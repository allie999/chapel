AST dump for ChapelArray after pass normalize.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint SysCTypes HaltWrappers Sort IO 

{
  function chpl__init_ChapelArray[416019]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[648186] "expr temp" "maybe param" "maybe type" "temp"
    (648189 'move' call_tmp[648186](113710 call chpl__processorAtomicType int(64)[13]))
    (542630 'default init var' numPrivateObjects[113711] call_tmp[648186])
    (113714 'end of statement')
    unknown call_tmp[648191] "maybe param" "maybe type" "temp"
    (648194 'move' call_tmp[648191](113716 call - 1))
    (542632 'init var' nullPid[113718] call_tmp[648191])
    (113721 'end of statement')
    (542634 'init var' debugBulkTransfer[113723] 0)
    (113726 'end of statement')
    (542636 'init var' useBulkTransfer[113728] 1)
    (113731 'end of statement')
    (542638 'init var' useBulkTransferStride[113733] 1)
    (113736 'end of statement')
    (542640 'init var' useBulkPtrTransfer[113738] useBulkTransfer[113728])
    (113741 'end of statement')
    (542642 'init var' PODValAccess[113743] 1)
    (113746 'end of statement')
    (542644 'init var' useBulkTransferDist[113748] 0)
    (113751 'end of statement')
    (542646 'init var' arrayAsVecGrowthFactor[113755] 1.5)
    (113758 'end of statement')
    (542648 'init var' debugArrayAsVec[113760] 0)
    (113763 'end of statement')
    (542672 'init var' CHPL_WARN_DOMAIN_LITERAL[115331] "unset")
    (115334 'end of statement')
    (542674 'init var' arrayLiteralLowBound[115336] defaultLowBound[361])
    (115339 'end of statement')
    (542676 'init var' capturedIteratorLowBound[115341] defaultLowBound[361])
    (115344 'end of statement')
    (519714 return _void[55])
  }
  unknown numPrivateObjects[113711] "dead at end of block" "insert auto destroy" "no doc"
  unknown nullPid[113718] "dead at end of block" "no doc" "param"
  unknown debugBulkTransfer[113723] "config" "no doc" "param"
  unknown useBulkTransfer[113728] "config" "no doc" "param"
  unknown useBulkTransferStride[113733] "config" "no doc" "param"
  unknown useBulkPtrTransfer[113738] "config" "no doc" "param"
  unknown PODValAccess[113743] "config" "no doc" "param"
  unknown useBulkTransferDist[113748] "config" "no doc" "param"
  unknown arrayAsVecGrowthFactor[113755] "config" "no doc" "param"
  unknown debugArrayAsVec[113760] "config" "no doc" "param"
  function _isPrivatized[113768](arg value[113766]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515718] "RVV" "param" "temp"
    unknown tmp[424103] "maybe param" "temp"
    (424114 'move' tmp[424103](113771 call ! 0))
    unknown call_tmp[648196] "expr temp" "maybe param" "maybe type" "temp"
    (648199 'move' call_tmp[648196](424116 call _cond_invalid tmp[424103]))
    if call_tmp[648196]
    {
      (424119 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564239] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564240] "maybe param" "temp"
    unknown call_tmp[648201] "expr temp" "maybe param" "maybe type" "temp"
    (648204 'move' call_tmp[648201](424104 call isTrue tmp[424103]))
    (564245 'move' tmp[564240](564243 call _cond_test call_tmp[648201]))
    if tmp[564240]
    {
      unknown tmp[424124] "maybe param" "temp"
      unknown tmp[424145] "maybe param" "temp"
      (424156 'move' tmp[424145] 1)
      unknown call_tmp[648206] "expr temp" "maybe param" "maybe type" "temp"
      (648209 'move' call_tmp[648206](424158 call _cond_invalid tmp[424145]))
      if call_tmp[648206]
      {
        (424161 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[564185] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564186] "maybe param" "temp"
      unknown call_tmp[648211] "expr temp" "maybe param" "maybe type" "temp"
      (648214 'move' call_tmp[648211](424146 call isTrue tmp[424145]))
      (564191 'move' tmp[564186](564189 call _cond_test call_tmp[648211]))
      if tmp[564186]
      {
        unknown tmp[564193] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648216] "expr temp" "maybe param" "maybe type" "temp"
        (648219 'move' call_tmp[648216](113775 call postfix! value[113766]))
        unknown call_tmp[648223] "expr temp" "maybe param" "maybe type" "temp"
        (648226 'move' call_tmp[648223](113783 call(113779 call (partial) dsiSupportsPrivatization _mt[243] call_tmp[648216])))
        (564195 'move' tmp[564193](424149 call isTrue call_tmp[648223]))
        (564200 'move' tmp[564185](564197 '_paramFoldLogical' tmp[564186] tmp[564193]))
      }
      {
        (564205 'move' tmp[564185](564202 '_paramFoldLogical' tmp[564186] 0))
      }
      (424135 'move' tmp[424124] tmp[564185])
      unknown call_tmp[648228] "expr temp" "maybe param" "maybe type" "temp"
      (648231 'move' call_tmp[648228](424137 call _cond_invalid tmp[424124]))
      if call_tmp[648228]
      {
        (424140 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564212] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564213] "maybe param" "temp"
      unknown call_tmp[648233] "expr temp" "maybe param" "maybe type" "temp"
      (648236 'move' call_tmp[648233](424125 call isTrue tmp[424124]))
      (564218 'move' tmp[564213](564216 call _cond_test call_tmp[648233]))
      if tmp[564213]
      {
        (564223 'move' tmp[564212](564220 '_paramFoldLogical' tmp[564213] 1))
      }
      {
        unknown tmp[564225] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648238] "expr temp" "maybe param" "maybe type" "temp"
        (648241 'move' call_tmp[648238](113787 call postfix! value[113766]))
        unknown call_tmp[648245] "expr temp" "maybe param" "maybe type" "temp"
        (648248 'move' call_tmp[648245](113795 call(113791 call (partial) dsiRequiresPrivatization _mt[243] call_tmp[648238])))
        (564227 'move' tmp[564225](424129 call isTrue call_tmp[648245]))
        (564232 'move' tmp[564212](564229 '_paramFoldLogical' tmp[564213] tmp[564225]))
      }
      unknown tmp[564247] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564249 'move' tmp[564247](424107 call isTrue tmp[564212]))
      (564254 'move' tmp[564239](564251 '_paramFoldLogical' tmp[564240] tmp[564247]))
    }
    {
      (564259 'move' tmp[564239](564256 '_paramFoldLogical' tmp[564240] 0))
    }
    (515723 'move' ret[515718](515722 'deref' tmp[564239]))
    (515720 return ret[515718])
  }
  function _newPrivatizedClass[113809](arg value[113807]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515729] "RVV" "temp"
    unknown call_tmp[648252] "maybe param" "maybe type" "temp"
    (648255 'move' call_tmp[648252](113820 call(113815 call (partial) fetchAdd _mt[243] numPrivateObjects[113711]) 1))
    const n[113821] "dead at end of block" "const" "insert auto destroy"
    (542650 'init var' n[113821] call_tmp[648252])
    (113824 'end of statement')
    unknown call_tmp[648257] "expr temp" "maybe param" "maybe type" "temp"
    (648260 'move' call_tmp[648257](359064 call here[90438]))
    unknown call_tmp[648264] "maybe param" "maybe type" "temp"
    (648267 'move' call_tmp[648264](113827 call id _mt[243] call_tmp[648257]))
    const hereID[113830] "dead at end of block" "const" "insert auto destroy"
    (542652 'init var' hereID[113830] call_tmp[648264])
    (113833 'end of statement')
    unknown call_tmp[648271] "maybe param" "maybe type" "temp"
    (648274 'move' call_tmp[648271](113841 call(113837 call (partial) dsiGetPrivatizeData _mt[243] value[113807])))
    const privatizeData[113842] "dead at end of block" "const" "insert auto destroy"
    (542654 'init var' privatizeData[113842] call_tmp[648271])
    (113845 'end of statement')
    const tmp[113862] "const" "temp"
    unknown call_tmp[648276] "expr temp" "maybe param" "maybe type" "temp"
    (648279 'move' call_tmp[648276](113849 call Locales[113662] 0))
    unknown call_tmp[648281] "expr temp" "maybe param" "maybe type" "temp"
    (648284 'move' call_tmp[648281](113859 '_wide_get_locale' call_tmp[648276]))
    (113864 'move' tmp[113862](113860 'deref' call_tmp[648281]))
    {
      (113857 call _newPrivatizedClassHelp value[113807] value[113807] n[113821] hereID[113830] privatizeData[113842])
      (479203 'end of statement' n[113821] hereID[113830] privatizeData[113842])
      (113867 'on block' 0 tmp[113862])
    }
    function _newPrivatizedClassHelp[113874](arg parentValue[113872]:_any[178](?), arg originalValue[113876]:_any[178](?), arg n[113878]:_any[178](?), arg hereID[113880]:_any[178](?), arg privatizeData[113882]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113885] "dead at end of block" "insert auto destroy"
      (542656 'init var' newValue[113885] originalValue[113876])
      (113888 'end of statement')
      unknown call_tmp[648286] "expr temp" "maybe param" "maybe type" "temp"
      (648289 'move' call_tmp[648286](359067 call here[90438]))
      unknown call_tmp[648293] "expr temp" "maybe param" "maybe type" "temp"
      (648296 'move' call_tmp[648293](113892 call id _mt[243] call_tmp[648286]))
      unknown call_tmp[648298] "expr temp" "maybe param" "maybe type" "temp"
      (648301 'move' call_tmp[648298](113895 call != hereID[113880] call_tmp[648293]))
      unknown call_tmp[648303] "expr temp" "maybe param" "maybe type" "temp"
      (648306 'move' call_tmp[648303](113958 call _cond_test call_tmp[648298]))
      if call_tmp[648303]
      {
        unknown call_tmp[648310] "expr temp" "maybe param" "maybe type" "temp"
        (648313 'move' call_tmp[648310](113906 call(113901 call (partial) dsiPrivatize _mt[243] parentValue[113872]) privatizeData[113882]))
        (113907 call = newValue[113885] call_tmp[648310])
        (479207 'end of statement' newValue[113885])
        (113931 'chpl_newPrivatizedClass' newValue[113885] n[113878])
        (479209 'end of statement' newValue[113885])
        unknown call_tmp[648317] "expr temp" "maybe param" "maybe type" "temp"
        (648320 'move' call_tmp[648317](113936 call pid _mt[243] newValue[113885]))
        (113940 call = call_tmp[648317] n[113878])
        (479211 'end of statement' newValue[113885])
      }
      {
        (113947 'chpl_newPrivatizedClass' newValue[113885] n[113878])
        (479213 'end of statement' newValue[113885])
        unknown call_tmp[648324] "expr temp" "maybe param" "maybe type" "temp"
        (648327 'move' call_tmp[648324](113951 call pid _mt[243] newValue[113885]))
        (113955 call = call_tmp[648324] n[113878])
        (479215 'end of statement' newValue[113885])
      }
      {
        const _cobeginCount[114045] "const" "end count" "temp"
        (114066 'move' _cobeginCount[114045](114063 call _endCountAlloc 1))
        (114058 call _upEndCount _cobeginCount[114045] 1 2)
        (479217 'end of statement')
        {
          unknown call_tmp[648331] "expr temp" "maybe param" "maybe type" "temp"
          (648334 'move' call_tmp[648331](113965 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648338] "expr temp" "maybe param" "maybe type" "temp"
          (648341 'move' call_tmp[648338](113968 call _instance _mt[243] call_tmp[648331]))
          unknown call_tmp[648343] "expr temp" "maybe param" "maybe type" "temp"
          (648346 'move' call_tmp[648343](113972 call != call_tmp[648338] nil[44]))
          unknown call_tmp[648348] "expr temp" "maybe param" "maybe type" "temp"
          (648351 'move' call_tmp[648348](113998 call _cond_test call_tmp[648343]))
          if call_tmp[648348]
          {
            const tmp[113990] "const" "temp"
            unknown call_tmp[648355] "expr temp" "maybe param" "maybe type" "temp"
            (648358 'move' call_tmp[648355](113975 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648360] "expr temp" "maybe param" "maybe type" "temp"
            (648363 'move' call_tmp[648360](113987 '_wide_get_locale' call_tmp[648355]))
            (113992 'move' tmp[113990](113988 'deref' call_tmp[648360]))
            {
              (113985 call _newPrivatizedClassHelp newValue[113885] originalValue[113876] n[113878] hereID[113880] privatizeData[113882])
              (479218 'end of statement' newValue[113885])
              (113995 'on block' 0 tmp[113990])
            }
          }
          (114048 call _downEndCount _cobeginCount[114045] nil[44])
          (114047 'cobegin block')
        }
        {
          unknown call_tmp[648367] "expr temp" "maybe param" "maybe type" "temp"
          (648370 'move' call_tmp[648367](114007 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648374] "expr temp" "maybe param" "maybe type" "temp"
          (648377 'move' call_tmp[648374](114010 call _instance _mt[243] call_tmp[648367]))
          unknown call_tmp[648379] "expr temp" "maybe param" "maybe type" "temp"
          (648382 'move' call_tmp[648379](114014 call != call_tmp[648374] nil[44]))
          unknown call_tmp[648384] "expr temp" "maybe param" "maybe type" "temp"
          (648387 'move' call_tmp[648384](114040 call _cond_test call_tmp[648379]))
          if call_tmp[648384]
          {
            const tmp[114032] "const" "temp"
            unknown call_tmp[648391] "expr temp" "maybe param" "maybe type" "temp"
            (648394 'move' call_tmp[648391](114017 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648396] "expr temp" "maybe param" "maybe type" "temp"
            (648399 'move' call_tmp[648396](114029 '_wide_get_locale' call_tmp[648391]))
            (114034 'move' tmp[114032](114030 'deref' call_tmp[648396]))
            {
              (114027 call _newPrivatizedClassHelp newValue[113885] originalValue[113876] n[113878] hereID[113880] privatizeData[113882])
              (479221 'end of statement' newValue[113885])
              (114037 'on block' 0 tmp[114032])
            }
          }
          (114054 call _downEndCount _cobeginCount[114045] nil[44])
          (114053 'cobegin block')
        }
        Defer
        {
          {
            (114069 call _endCountFree _cobeginCount[114045])
          }
        }
        (114074 call _waitEndCount _cobeginCount[114045] 1 2)
      }
      (515725 return _void[55])
    }
    (515735 'move' ret[515729](515734 'coerce' n[113821] int(64)[13]))
    gotoReturn _end__newPrivatizedClass[515727] _end__newPrivatizedClass[515727]
    (479226 'end of statement' n[113821])
    label _end__newPrivatizedClass[515727]
    (515731 return ret[515729])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[114093](arg pid[114090]:int(64)[13], arg original[114096]:object[367084](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648401] "expr temp" "maybe param" "maybe type" "temp"
    (648404 'move' call_tmp[648401](114102 call == pid[114090] nullPid[113718]))
    unknown call_tmp[648406] "expr temp" "maybe param" "maybe type" "temp"
    (648409 'move' call_tmp[648406](114106 call _cond_test call_tmp[648401]))
    if call_tmp[648406]
    {
      gotoReturn _end__freePrivatizedClass[515743] _end__freePrivatizedClass[515743]
    }
    const tmp[114126] "const" "temp"
    unknown call_tmp[648411] "expr temp" "maybe param" "maybe type" "temp"
    (648414 'move' call_tmp[648411](114115 call Locales[113662] 0))
    unknown call_tmp[648416] "expr temp" "maybe param" "maybe type" "temp"
    (648419 'move' call_tmp[648416](114123 '_wide_get_locale' call_tmp[648411]))
    (114128 'move' tmp[114126](114124 'deref' call_tmp[648416]))
    {
      {
        (114120 call _freePrivatizedClassHelp pid[114090] original[114096])
      }
      (114131 'on block' 0 tmp[114126])
    }
    function _freePrivatizedClassHelp[114138](arg pid[114136]:_any[178](?), arg original[114140]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown call_tmp[648421] "maybe param" "maybe type" "temp"
      (648424 'move' call_tmp[648421](114147 call chpl_getPrivatizedCopy unmanaged object[415488] pid[114136]))
      unknown prv[114148] "dead at end of block" "insert auto destroy"
      (542658 'init var' prv[114148] call_tmp[648421])
      (114151 'end of statement')
      unknown call_tmp[648426] "expr temp" "maybe param" "maybe type" "temp"
      (648429 'move' call_tmp[648426](114155 call != prv[114148] original[114140]))
      unknown call_tmp[648431] "expr temp" "maybe param" "maybe type" "temp"
      (648434 'move' call_tmp[648431](114162 call _cond_test call_tmp[648426]))
      if call_tmp[648431]
      {
        (114159 call chpl__delete prv[114148])
        (479230 'end of statement' prv[114148])
      }
      function chpl_clearPrivatizedClass[114173](arg pid[114170]:int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (515739 return _void[55])
      }
      (114180 call chpl_clearPrivatizedClass pid[114136])
      (479232 'end of statement')
      {
        const _cobeginCount[114255] "const" "end count" "temp"
        (114276 'move' _cobeginCount[114255](114273 call _endCountAlloc 1))
        (114268 call _upEndCount _cobeginCount[114255] 1 2)
        (479233 'end of statement')
        {
          unknown call_tmp[648438] "expr temp" "maybe param" "maybe type" "temp"
          (648441 'move' call_tmp[648438](114183 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648445] "expr temp" "maybe param" "maybe type" "temp"
          (648448 'move' call_tmp[648445](114186 call _instance _mt[243] call_tmp[648438]))
          unknown call_tmp[648450] "expr temp" "maybe param" "maybe type" "temp"
          (648453 'move' call_tmp[648450](114190 call != call_tmp[648445] nil[44]))
          unknown call_tmp[648455] "expr temp" "maybe param" "maybe type" "temp"
          (648458 'move' call_tmp[648455](114213 call _cond_test call_tmp[648450]))
          if call_tmp[648455]
          {
            const tmp[114205] "const" "temp"
            unknown call_tmp[648462] "expr temp" "maybe param" "maybe type" "temp"
            (648465 'move' call_tmp[648462](114193 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648467] "expr temp" "maybe param" "maybe type" "temp"
            (648470 'move' call_tmp[648467](114202 '_wide_get_locale' call_tmp[648462]))
            (114207 'move' tmp[114205](114203 'deref' call_tmp[648467]))
            {
              (114200 call _freePrivatizedClassHelp pid[114136] original[114140])
              (114210 'on block' 0 tmp[114205])
            }
          }
          (114258 call _downEndCount _cobeginCount[114255] nil[44])
          (114257 'cobegin block')
        }
        {
          unknown call_tmp[648474] "expr temp" "maybe param" "maybe type" "temp"
          (648477 'move' call_tmp[648474](114220 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648481] "expr temp" "maybe param" "maybe type" "temp"
          (648484 'move' call_tmp[648481](114223 call _instance _mt[243] call_tmp[648474]))
          unknown call_tmp[648486] "expr temp" "maybe param" "maybe type" "temp"
          (648489 'move' call_tmp[648486](114227 call != call_tmp[648481] nil[44]))
          unknown call_tmp[648491] "expr temp" "maybe param" "maybe type" "temp"
          (648494 'move' call_tmp[648491](114250 call _cond_test call_tmp[648486]))
          if call_tmp[648491]
          {
            const tmp[114242] "const" "temp"
            unknown call_tmp[648498] "expr temp" "maybe param" "maybe type" "temp"
            (648501 'move' call_tmp[648498](114230 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648503] "expr temp" "maybe param" "maybe type" "temp"
            (648506 'move' call_tmp[648503](114239 '_wide_get_locale' call_tmp[648498]))
            (114244 'move' tmp[114242](114240 'deref' call_tmp[648503]))
            {
              (114237 call _freePrivatizedClassHelp pid[114136] original[114140])
              (114247 'on block' 0 tmp[114242])
            }
          }
          (114264 call _downEndCount _cobeginCount[114255] nil[44])
          (114263 'cobegin block')
        }
        Defer
        {
          {
            (114279 call _endCountFree _cobeginCount[114255])
          }
        }
        (114284 call _waitEndCount _cobeginCount[114255] 1 2)
      }
      (515741 return _void[55])
    }
    label _end__freePrivatizedClass[515743]
    (515745 return _void[55])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114298](arg value[114296]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648510] "maybe param" "maybe type" "temp"
    (648513 'move' call_tmp[648510](114301 call pid _mt[243] value[114296]))
    const pid[114304] "dead at end of block" "const" "insert auto destroy"
    (542660 'init var' pid[114304] call_tmp[648510])
    (114307 'end of statement')
    unknown call_tmp[648515] "expr temp" "maybe param" "maybe type" "temp"
    (648518 'move' call_tmp[648515](359081 call here[90438]))
    unknown call_tmp[648522] "maybe param" "maybe type" "temp"
    (648525 'move' call_tmp[648522](114310 call id _mt[243] call_tmp[648515]))
    const hereID[114313] "dead at end of block" "const" "insert auto destroy"
    (542662 'init var' hereID[114313] call_tmp[648522])
    (114316 'end of statement')
    unknown call_tmp[648529] "maybe param" "maybe type" "temp"
    (648532 'move' call_tmp[648529](114324 call(114320 call (partial) dsiGetReprivatizeData _mt[243] value[114296])))
    const reprivatizeData[114325] "dead at end of block" "const" "insert auto destroy"
    (542664 'init var' reprivatizeData[114325] call_tmp[648529])
    (114328 'end of statement')
    const tmp[114345] "const" "temp"
    unknown call_tmp[648534] "expr temp" "maybe param" "maybe type" "temp"
    (648537 'move' call_tmp[648534](114332 call Locales[113662] 0))
    unknown call_tmp[648539] "expr temp" "maybe param" "maybe type" "temp"
    (648542 'move' call_tmp[648539](114342 '_wide_get_locale' call_tmp[648534]))
    (114347 'move' tmp[114345](114343 'deref' call_tmp[648539]))
    {
      (114340 call _reprivatizeHelp value[114296] value[114296] pid[114304] hereID[114313] reprivatizeData[114325])
      (479240 'end of statement' pid[114304] hereID[114313] reprivatizeData[114325])
      (114350 'on block' 0 tmp[114345])
    }
    function _reprivatizeHelp[114357](arg parentValue[114355]:_any[178](?), arg originalValue[114359]:_any[178](?), arg pid[114361]:_any[178](?), arg hereID[114363]:_any[178](?), arg reprivatizeData[114365]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114368] "dead at end of block" "insert auto destroy"
      (542666 'init var' newValue[114368] originalValue[114359])
      (114371 'end of statement')
      unknown call_tmp[648544] "expr temp" "maybe param" "maybe type" "temp"
      (648547 'move' call_tmp[648544](359084 call here[90438]))
      unknown call_tmp[648551] "expr temp" "maybe param" "maybe type" "temp"
      (648554 'move' call_tmp[648551](114375 call id _mt[243] call_tmp[648544]))
      unknown call_tmp[648556] "expr temp" "maybe param" "maybe type" "temp"
      (648559 'move' call_tmp[648556](114378 call != hereID[114363] call_tmp[648551]))
      unknown call_tmp[648561] "expr temp" "maybe param" "maybe type" "temp"
      (648564 'move' call_tmp[648561](114402 call _cond_test call_tmp[648556]))
      if call_tmp[648561]
      {
        unknown call_tmp[648566] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (648569 'move' call_tmp[648566](114383 'typeof' newValue[114368]))
        unknown call_tmp[648571] "expr temp" "maybe param" "maybe type" "temp"
        (648574 'move' call_tmp[648571](114386 call chpl_getPrivatizedCopy call_tmp[648566] pid[114361]))
        (114387 call = newValue[114368] call_tmp[648571])
        (479244 'end of statement' newValue[114368] newValue[114368])
        (114400 call(114394 call (partial) dsiReprivatize _mt[243] newValue[114368]) parentValue[114355] reprivatizeData[114365])
        (479247 'end of statement' newValue[114368])
      }
      {
        const _cobeginCount[114485] "const" "end count" "temp"
        (114506 'move' _cobeginCount[114485](114503 call _endCountAlloc 1))
        (114498 call _upEndCount _cobeginCount[114485] 1 2)
        (479249 'end of statement')
        {
          unknown call_tmp[648580] "expr temp" "maybe param" "maybe type" "temp"
          (648583 'move' call_tmp[648580](114407 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648587] "expr temp" "maybe param" "maybe type" "temp"
          (648590 'move' call_tmp[648587](114410 call _instance _mt[243] call_tmp[648580]))
          unknown call_tmp[648592] "expr temp" "maybe param" "maybe type" "temp"
          (648595 'move' call_tmp[648592](114414 call != call_tmp[648587] nil[44]))
          unknown call_tmp[648597] "expr temp" "maybe param" "maybe type" "temp"
          (648600 'move' call_tmp[648597](114440 call _cond_test call_tmp[648592]))
          if call_tmp[648597]
          {
            const tmp[114432] "const" "temp"
            unknown call_tmp[648604] "expr temp" "maybe param" "maybe type" "temp"
            (648607 'move' call_tmp[648604](114417 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648609] "expr temp" "maybe param" "maybe type" "temp"
            (648612 'move' call_tmp[648609](114429 '_wide_get_locale' call_tmp[648604]))
            (114434 'move' tmp[114432](114430 'deref' call_tmp[648609]))
            {
              (114427 call _reprivatizeHelp newValue[114368] originalValue[114359] pid[114361] hereID[114363] reprivatizeData[114365])
              (479250 'end of statement' newValue[114368])
              (114437 'on block' 0 tmp[114432])
            }
          }
          (114488 call _downEndCount _cobeginCount[114485] nil[44])
          (114487 'cobegin block')
        }
        {
          unknown call_tmp[648616] "expr temp" "maybe param" "maybe type" "temp"
          (648619 'move' call_tmp[648616](114447 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648623] "expr temp" "maybe param" "maybe type" "temp"
          (648626 'move' call_tmp[648623](114450 call _instance _mt[243] call_tmp[648616]))
          unknown call_tmp[648628] "expr temp" "maybe param" "maybe type" "temp"
          (648631 'move' call_tmp[648628](114454 call != call_tmp[648623] nil[44]))
          unknown call_tmp[648633] "expr temp" "maybe param" "maybe type" "temp"
          (648636 'move' call_tmp[648633](114480 call _cond_test call_tmp[648628]))
          if call_tmp[648633]
          {
            const tmp[114472] "const" "temp"
            unknown call_tmp[648640] "expr temp" "maybe param" "maybe type" "temp"
            (648643 'move' call_tmp[648640](114457 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648645] "expr temp" "maybe param" "maybe type" "temp"
            (648648 'move' call_tmp[648645](114469 '_wide_get_locale' call_tmp[648640]))
            (114474 'move' tmp[114472](114470 'deref' call_tmp[648645]))
            {
              (114467 call _reprivatizeHelp newValue[114368] originalValue[114359] pid[114361] hereID[114363] reprivatizeData[114365])
              (479253 'end of statement' newValue[114368])
              (114477 'on block' 0 tmp[114472])
            }
          }
          (114494 call _downEndCount _cobeginCount[114485] nil[44])
          (114493 'cobegin block')
        }
        Defer
        {
          {
            (114509 call _endCountFree _cobeginCount[114485])
          }
        }
        (114514 call _waitEndCount _cobeginCount[114485] 1 2)
      }
      (515749 return _void[55])
    }
    (515751 return _void[55])
  }
  function _makeIndexTuple[114527](param arg rank[114525]:_any[178](?), arg t[114530]:_tuple[56202](?), param arg expand[114535]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515755] "RVV" "temp"
    (515760 'move' ret[515755](515759 'deref' t[114530]))
    (515757 return ret[515755])
  }
  where {
    unknown call_tmp[648652] "expr temp" "maybe param" "maybe type" "temp"
    (648655 'move' call_tmp[648652](114541 call size _mt[243] t[114530]))
    (114544 call == rank[114525] call_tmp[648652])
  }
  function _makeIndexTuple[114557](param arg rank[114555]:_any[178](?), arg t[114560]:_tuple[56202](?), param arg expand[114565]:bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114595 call compilerError "index rank must match domain rank")
    (515762 return _void[55])
  }
  where {
    unknown call_tmp[648659] "expr temp" "maybe param" "maybe type" "temp"
    (648662 'move' call_tmp[648659](114571 call size _mt[243] t[114560]))
    (114574 call != rank[114555] call_tmp[648659])
  }
  function _makeIndexTuple[114605](param arg rank[114603]:_any[178](?), arg val[114608]:integral[199](?), param arg expand[114613]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515766] "RVV" "temp"
    unknown tmp[424166] "maybe param" "temp"
    (424177 'move' tmp[424166] expand[114613])
    unknown call_tmp[648664] "expr temp" "maybe param" "maybe type" "temp"
    (648667 'move' call_tmp[648664](424179 call _cond_invalid tmp[424166]))
    if call_tmp[648664]
    {
      (424182 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564266] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564267] "maybe param" "temp"
    unknown call_tmp[648669] "expr temp" "maybe param" "maybe type" "temp"
    (648672 'move' call_tmp[648669](424167 call isTrue tmp[424166]))
    (564272 'move' tmp[564267](564270 call _cond_test call_tmp[648669]))
    if tmp[564267]
    {
      (564277 'move' tmp[564266](564274 '_paramFoldLogical' tmp[564267] 1))
    }
    {
      unknown tmp[564279] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[648674] "expr temp" "maybe param" "maybe type" "temp"
      (648677 'move' call_tmp[648674](114620 call == rank[114603] 1))
      (564281 'move' tmp[564279](424171 call isTrue call_tmp[648674]))
      (564286 'move' tmp[564266](564283 '_paramFoldLogical' tmp[564267] tmp[564279]))
    }
    unknown call_tmp[648679] "expr temp" "maybe param" "maybe type" "temp"
    (648682 'move' call_tmp[648679](114707 call _cond_test tmp[564266]))
    if call_tmp[648679]
    {
      unknown t[114629] "dead at end of block" "insert auto destroy"
      unknown call_tmp[648684] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648687 'move' call_tmp[648684](114626 'typeof' val[114608]))
      unknown call_tmp[648689] "expr temp" "maybe param" "maybe type" "temp"
      (648692 'move' call_tmp[648689](114627 call * rank[114603] call_tmp[648684]))
      (542668 'default init var' t[114629] call_tmp[648689])
      (114632 'end of statement')
      {
        unknown i[114649] "dead at end of block" "insert auto destroy"
        (542670 'init var' i[114649] 0)
        (479261 'end of statement')
        unknown tmp[114650] "maybe param" "temp"
        unknown call_tmp[648694] "expr temp" "maybe param" "maybe type" "temp"
        (648697 'move' call_tmp[648694](114637 call - rank[114603] 1))
        (114662 'move' tmp[114650](114660 call chpl_compute_low_param_loop_bound 0 call_tmp[648694]))
        unknown tmp[114651] "maybe param" "temp"
        unknown call_tmp[648699] "expr temp" "maybe param" "maybe type" "temp"
        (648702 'move' call_tmp[648699](114667 call - rank[114603] 1))
        (114672 'move' tmp[114651](114670 call chpl_compute_high_param_loop_bound 0 call_tmp[648699]))
        unknown tmp[114652] "maybe param" "temp"
        (114675 'move' tmp[114652] 1)
        ParamForLoop[114677]
        { i[114649] tmp[114650] tmp[114651] tmp[114652]
          unknown call_tmp[648704] "expr temp" "maybe param" "maybe type" "temp"
          (648707 'move' call_tmp[648704](114644 call t[114629] i[114649]))
          (114646 call = call_tmp[648704] val[114608])
          (479262 'end of statement' t[114629] i[114649])
        }
        label _unused_continueLabel[114654]
        label _breakLabel[114653]
      }
      (515771 'move' ret[515766](515770 'deref' t[114629]))
      gotoReturn _end__makeIndexTuple[515764] _end__makeIndexTuple[515764]
      (479265 'end of statement' t[114629])
    }
    {
      unknown call_tmp[648709] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648712 'move' call_tmp[648709](114691 'typeof' val[114608]))
      unknown call_tmp[648714] "expr temp" "maybe param" "maybe type" "temp"
      (648717 'move' call_tmp[648714](114693 call _cast string[26] call_tmp[648709]))
      (114696 call compilerWarning call_tmp[648714])
      (479267 'end of statement')
      (114702 call compilerError "index rank must match domain rank")
      (479268 'end of statement')
      (515776 'move' ret[515766](515775 'deref' val[114608]))
      gotoReturn _end__makeIndexTuple[515764] _end__makeIndexTuple[515764]
    }
    label _end__makeIndexTuple[515764]
    (515768 return ret[515766])
  }
  function _newArray[114718](arg value[114716]:_any[178](?)) : _unknown[51] "no copy return"
  {
    unknown ret[515782] "RVV" "temp"
    unknown call_tmp[648719] "expr temp" "maybe param" "maybe type" "temp"
    (648722 'move' call_tmp[648719](114723 call _isPrivatized value[114716]))
    unknown call_tmp[648724] "expr temp" "maybe param" "maybe type" "temp"
    (648727 'move' call_tmp[648724](114743 call _cond_test call_tmp[648719]))
    if call_tmp[648724]
    {
      unknown call_tmp[648729] "expr temp" "maybe param" "maybe type" "temp"
      (648732 'move' call_tmp[648729](114729 call _newPrivatizedClass value[114716]))
      unknown call_tmp[648734] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648737 'move' call_tmp[648734](747873 'new' _array[133594](?) call_tmp[648729] value[114716]))
      (515787 'move' ret[515782](515786 'deref' call_tmp[648734]))
      gotoReturn _end__newArray[515780] _end__newArray[515780]
    }
    {
      unknown call_tmp[648739] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648742 'move' call_tmp[648739](747874 'new' _array[133594](?) nullPid[113718] value[114716]))
      (515792 'move' ret[515782](515791 'deref' call_tmp[648739]))
      gotoReturn _end__newArray[515780] _end__newArray[515780]
    }
    label _end__newArray[515780]
    (515784 return ret[515782])
  }
  function _getDomain[114756](arg value[114754]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515798] "RVV" "temp"
    unknown call_tmp[648744] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648747 'move' call_tmp[648744](114760 'typeof' value[114754]))
    unknown call_tmp[648749] "expr temp" "maybe param" "maybe type" "temp"
    (648752 'move' call_tmp[648749](114762 call _to_unmanaged call_tmp[648744]))
    unknown call_tmp[648754] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648757 'move' call_tmp[648754](114764 'typeof' value[114754]))
    unknown call_tmp[648759] "expr temp" "maybe param" "maybe type" "temp"
    (648762 'move' call_tmp[648759](114765 call != call_tmp[648749] call_tmp[648754]))
    unknown call_tmp[648764] "expr temp" "maybe param" "maybe type" "temp"
    (648767 'move' call_tmp[648764](114788 call _cond_test call_tmp[648759]))
    if call_tmp[648764]
    {
      (114786 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[648769] "expr temp" "maybe param" "maybe type" "temp"
    (648772 'move' call_tmp[648769](114797 call _isPrivatized value[114754]))
    unknown call_tmp[648774] "expr temp" "maybe param" "maybe type" "temp"
    (648777 'move' call_tmp[648774](114821 call _cond_test call_tmp[648769]))
    if call_tmp[648774]
    {
      unknown call_tmp[648781] "expr temp" "maybe param" "maybe type" "temp"
      (648784 'move' call_tmp[648781](114801 call pid _mt[243] value[114754]))
      unknown call_tmp[648786] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648789 'move' call_tmp[648786](747875 'new' _domain[125908](?) call_tmp[648781] value[114754](_unowned = 1)))
      (515803 'move' ret[515798](515802 'deref' call_tmp[648786]))
      gotoReturn _end__getDomain[515796] _end__getDomain[515796]
    }
    {
      unknown call_tmp[648791] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648794 'move' call_tmp[648791](747876 'new' _domain[125908](?) nullPid[113718] value[114754](_unowned = 1)))
      (515808 'move' ret[515798](515807 'deref' call_tmp[648791]))
      gotoReturn _end__getDomain[515796] _end__getDomain[515796]
    }
    label _end__getDomain[515796]
    (515800 return ret[515798])
  }
  function _getDistribution[114833](arg value[114831]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515814] "RVV" "temp"
    unknown call_tmp[648796] "expr temp" "maybe param" "maybe type" "temp"
    (648799 'move' call_tmp[648796](114838 call _isPrivatized value[114831]))
    unknown call_tmp[648801] "expr temp" "maybe param" "maybe type" "temp"
    (648804 'move' call_tmp[648801](114862 call _cond_test call_tmp[648796]))
    if call_tmp[648801]
    {
      unknown call_tmp[648808] "expr temp" "maybe param" "maybe type" "temp"
      (648811 'move' call_tmp[648808](114842 call pid _mt[243] value[114831]))
      unknown call_tmp[648813] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648816 'move' call_tmp[648813](747877 'new' _distribution[118973](?) call_tmp[648808] value[114831](_unowned = 1)))
      (515819 'move' ret[515814](515818 'deref' call_tmp[648813]))
      gotoReturn _end__getDistribution[515812] _end__getDistribution[515812]
    }
    {
      unknown call_tmp[648818] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648821 'move' call_tmp[648818](747878 'new' _distribution[118973](?) nullPid[113718] value[114831](_unowned = 1)))
      (515824 'move' ret[515814](515823 'deref' call_tmp[648818]))
      gotoReturn _end__getDistribution[515812] _end__getDistribution[515812]
    }
    label _end__getDistribution[515812]
    (515816 return ret[515814])
  }
  function chpl__buildDomainRuntimeType[114877](arg dist[114874]:_distribution[118973](?), param arg rank[114880]:int(64)[13], arg idxType[114884]:_any[178](?) =
  int(64)[13], param arg stridable[114889]:bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515830] "RVV" "temp" "type variable"
    unknown call_tmp[648823] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648826 'move' call_tmp[648823](747879 'new' _domain[125908](?) dist[114874] rank[114880] idxType[114884] stridable[114889]))
    (515835 'move' ret[515830](515834 'deref' call_tmp[648823]))
    (515832 return ret[515830])
  }
  function chpl__buildDomainRuntimeType[114912](arg dist[114909]:_distribution[118973](?), arg idxType[114914]:_any[178](?), param arg parSafe[114918]:bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515839] "RVV" "temp" "type variable"
    unknown call_tmp[648828] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648831 'move' call_tmp[648828](747880 'new' _domain[125908](?) dist[114909] idxType[114914] parSafe[114918]))
    (515844 'move' ret[515839](515843 'deref' call_tmp[648828]))
    (515841 return ret[515839])
  }
  function chpl__buildSparseDomainRuntimeType[114940](arg dist[114937]:_distribution[118973](?), arg parentDom[114943]:_domain[125908](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515848] "RVV" "temp" "type variable"
    unknown call_tmp[648833] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648836 'move' call_tmp[648833](747881 'new' _domain[125908](?) dist[114937] parentDom[114943]))
    (515853 'move' ret[515848](515852 'deref' call_tmp[648833]))
    (515850 return ret[515848])
  }
  function chpl__convertRuntimeTypeToValue[114963](arg dist[114960]:_distribution[118973](?), param arg rank[114966]:int(64)[13], arg idxType[114970]:_any[178](?) =
  int(64)[13], param arg stridable[114974]:bool[10], param arg isNoInit[114978]:bool[10]) : _unknown[51]
  {
    unknown ret[515857] "RVV" "temp"
    unknown call_tmp[648838] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648841 'move' call_tmp[648838](747882 'new' _domain[125908](?) dist[114960] rank[114966] idxType[114970] stridable[114974]))
    (515862 'move' ret[515857](515861 'deref' call_tmp[648838]))
    (515859 return ret[515857])
  }
  function chpl__convertRuntimeTypeToValue[115000](arg dist[114997]:_distribution[118973](?), arg idxType[115002]:_any[178](?), param arg parSafe[115005]:bool[10], param arg isNoInit[115009]:bool[10]) : _unknown[51]
  {
    unknown ret[515866] "RVV" "temp"
    unknown call_tmp[648843] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648846 'move' call_tmp[648843](747883 'new' _domain[125908](?) dist[114997] idxType[115002] parSafe[115005]))
    (515871 'move' ret[515866](515870 'deref' call_tmp[648843]))
    (515868 return ret[515866])
  }
  function chpl__convertRuntimeTypeToValue[115030](arg dist[115027]:_distribution[118973](?), arg parentDom[115033]:_domain[125908](?), param arg isNoInit[115037]:bool[10]) : _unknown[51]
  {
    unknown ret[515875] "RVV" "temp"
    unknown call_tmp[648848] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648851 'move' call_tmp[648848](747884 'new' _domain[125908](?) dist[115027] parentDom[115033]))
    (515880 'move' ret[515875](515879 'deref' call_tmp[648848]))
    (515877 return ret[515875])
  }
  function chpl__convertValueToRuntimeType[115057](arg dom[115054]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515884] "RVV" "temp" "type variable"
    unknown call_tmp[648855] "expr temp" "maybe param" "maybe type" "temp"
    (648858 'move' call_tmp[648855](115070 call dist _mt[243] dom[115054]))
    unknown call_tmp[648862] "expr temp" "maybe param" "maybe type" "temp"
    (648865 'move' call_tmp[648862](115075 call _value _mt[243] dom[115054]))
    unknown call_tmp[648869] "expr temp" "maybe param" "maybe type" "temp"
    (648872 'move' call_tmp[648869](115078 call rank _mt[243] call_tmp[648862]))
    unknown call_tmp[648876] "expr temp" "maybe param" "maybe type" "temp"
    (648879 'move' call_tmp[648876](115082 call _value _mt[243] dom[115054]))
    unknown call_tmp[648883] "expr temp" "maybe param" "maybe type" "temp"
    (648886 'move' call_tmp[648883](115085 call idxType _mt[243] call_tmp[648876]))
    unknown call_tmp[648890] "expr temp" "maybe param" "maybe type" "temp"
    (648893 'move' call_tmp[648890](115089 call _value _mt[243] dom[115054]))
    unknown call_tmp[648897] "expr temp" "maybe param" "maybe type" "temp"
    (648900 'move' call_tmp[648897](115092 call stridable _mt[243] call_tmp[648890]))
    unknown call_tmp[648902] "expr temp" "maybe param" "maybe type" "temp"
    (648905 'move' call_tmp[648902](115095 call chpl__buildDomainRuntimeType call_tmp[648855] call_tmp[648869] call_tmp[648883] call_tmp[648897]))
    (515889 'move' ret[515884](515888 'deref' call_tmp[648902]))
    (515886 return ret[515884])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492084] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648909] "expr temp" "maybe param" "maybe type" "temp"
      (648912 'move' call_tmp[648909](115061 call _value _mt[243] dom[115054]))
      (492088 'move' call_type_tmp[492084](115064 'typeof' call_tmp[648909]))
    }
    (354325 'is_subtype' BaseRectangularDom[382283](?) call_type_tmp[492084])
  }
  function chpl__convertValueToRuntimeType[115108](arg dom[115105]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515893] "RVV" "temp" "type variable"
    unknown call_tmp[648916] "expr temp" "maybe param" "maybe type" "temp"
    (648919 'move' call_tmp[648916](115121 call dist _mt[243] dom[115105]))
    unknown call_tmp[648923] "expr temp" "maybe param" "maybe type" "temp"
    (648926 'move' call_tmp[648923](115126 call _value _mt[243] dom[115105]))
    unknown call_tmp[648930] "expr temp" "maybe param" "maybe type" "temp"
    (648933 'move' call_tmp[648930](115129 call idxType _mt[243] call_tmp[648923]))
    unknown call_tmp[648937] "expr temp" "maybe param" "maybe type" "temp"
    (648940 'move' call_tmp[648937](115133 call _value _mt[243] dom[115105]))
    unknown call_tmp[648944] "expr temp" "maybe param" "maybe type" "temp"
    (648947 'move' call_tmp[648944](115138 call parSafe _mt[243] call_tmp[648937]))
    unknown call_tmp[648949] "expr temp" "maybe param" "maybe type" "temp"
    (648952 'move' call_tmp[648949](115141 call chpl__buildDomainRuntimeType call_tmp[648916] call_tmp[648930] call_tmp[648944]))
    (515898 'move' ret[515893](515897 'deref' call_tmp[648949]))
    (515895 return ret[515893])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492090] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648956] "expr temp" "maybe param" "maybe type" "temp"
      (648959 'move' call_tmp[648956](115112 call _value _mt[243] dom[115105]))
      (492094 'move' call_type_tmp[492090](115115 'typeof' call_tmp[648956]))
    }
    (354326 'is_subtype' BaseAssociativeDom[382288](?) call_type_tmp[492090])
  }
  function chpl__convertValueToRuntimeType[115154](arg dom[115151]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515902] "RVV" "temp" "type variable"
    unknown call_tmp[648963] "expr temp" "maybe param" "maybe type" "temp"
    (648966 'move' call_tmp[648963](115167 call dist _mt[243] dom[115151]))
    unknown call_tmp[648970] "expr temp" "maybe param" "maybe type" "temp"
    (648973 'move' call_tmp[648970](115172 call _value _mt[243] dom[115151]))
    unknown call_tmp[648977] "expr temp" "maybe param" "maybe type" "temp"
    (648980 'move' call_tmp[648977](115177 call parentDom _mt[243] call_tmp[648970]))
    unknown call_tmp[648982] "expr temp" "maybe param" "maybe type" "temp"
    (648985 'move' call_tmp[648982](115180 call chpl__buildSparseDomainRuntimeType call_tmp[648963] call_tmp[648977]))
    (515907 'move' ret[515902](515906 'deref' call_tmp[648982]))
    (515904 return ret[515902])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492096] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648989] "expr temp" "maybe param" "maybe type" "temp"
      (648992 'move' call_tmp[648989](115158 call _value _mt[243] dom[115151]))
      (492100 'move' call_type_tmp[492096](115161 'typeof' call_tmp[648989]))
    }
    (354327 'is_subtype' BaseSparseDom[382293](?) call_type_tmp[492096])
  }
  function chpl__convertValueToRuntimeType[115193](arg dom[115190]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515911] "RVV" "temp" "type variable"
    (115217 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (479286 'end of statement')
    (515916 'move' ret[515911](515915 'deref' 0))
    (515913 return ret[515911])
  }
  function chpl__buildArrayRuntimeType[115231](arg dom[115228]:_domain[125908](?), arg eltType[115233]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515920] "RVV" "temp" "type variable"
    unknown call_tmp[648996] "expr temp" "maybe param" "maybe type" "temp"
    (648999 'move' call_tmp[648996](115244 call(115238 call (partial) buildArray _mt[243] dom[115228]) eltType[115233] 1))
    (515925 'move' ret[515920](515924 'deref' call_tmp[648996]))
    (515922 return ret[515920])
  }
  function chpl__convertRuntimeTypeToValue[115256](arg dom[115253]:_domain[125908](?), arg eltType[115258]:_any[178](?), param arg isNoInit[115261]:bool[10]) : _unknown[51]
  {
    unknown ret[515929] "RVV" "temp"
    unknown call_tmp[649003] "expr temp" "maybe param" "maybe type" "temp"
    (649006 'move' call_tmp[649003](115271 call ! isNoInit[115261]))
    unknown call_tmp[649008] "expr temp" "maybe param" "maybe type" "temp"
    (649011 'move' call_tmp[649008](115273 call(115265 call (partial) buildArray _mt[243] dom[115253]) eltType[115258] call_tmp[649003]))
    (515934 'move' ret[515929](515933 'deref' call_tmp[649008]))
    (515931 return ret[515929])
  }
  function chpl__convertValueToRuntimeType[115287](arg arr[115284]:_array[133594](?)) type : _unknown[51]
  {
    unknown ret[515938] "RVV" "temp" "type variable"
    unknown call_tmp[649015] "expr temp" "maybe param" "maybe type" "temp"
    (649018 'move' call_tmp[649015](115291 call _dom _mt[243] arr[115284]))
    unknown call_tmp[649022] "expr temp" "maybe param" "maybe type" "temp"
    (649025 'move' call_tmp[649022](115296 call eltType _mt[243] arr[115284]))
    unknown call_tmp[649027] "expr temp" "maybe param" "maybe type" "temp"
    (649030 'move' call_tmp[649027](115299 call chpl__buildArrayRuntimeType call_tmp[649015] call_tmp[649022]))
    (515943 'move' ret[515938](515942 'deref' call_tmp[649027]))
    (515940 return ret[515938])
  }
  function _getLiteralType[115309](arg t[115307]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[515947] "RVV" "temp" "type variable"
    unknown call_tmp[649032] "expr temp" "maybe param" "maybe type" "temp"
    (649035 'move' call_tmp[649032](115313 call != t[115307] c_string[19]))
    unknown call_tmp[649037] "expr temp" "maybe param" "maybe type" "temp"
    (649040 'move' call_tmp[649037](115321 call _cond_test call_tmp[649032]))
    if call_tmp[649037]
    {
      (515952 'move' ret[515947](515951 'deref' t[115307]))
      gotoReturn _end__getLiteralType[515945] _end__getLiteralType[515945]
    }
    {
      (515957 'move' ret[515947](515956 'deref' string[26]))
      gotoReturn _end__getLiteralType[515945] _end__getLiteralType[515945]
    }
    label _end__getLiteralType[515945]
    (515949 return ret[515947])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115331] "config" "no doc" "param"
  unknown arrayLiteralLowBound[115336] "config" "no doc" "param"
  unknown capturedIteratorLowBound[115341] "config" "no doc" "param"
  function chpl__buildArrayExpr[115352](arg elems[115349]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[515963] "RVV" "temp"
    unknown tmp[424187] "maybe param" "temp"
    (424198 'move' tmp[424187](115356 call == CHPL_WARN_DOMAIN_LITERAL[115331] "true"))
    unknown call_tmp[649042] "expr temp" "maybe param" "maybe type" "temp"
    (649045 'move' call_tmp[649042](424200 call _cond_invalid tmp[424187]))
    if call_tmp[649042]
    {
      (424203 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564293] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564294] "maybe param" "temp"
    unknown call_tmp[649047] "expr temp" "maybe param" "maybe type" "temp"
    (649050 'move' call_tmp[649047](424188 call isTrue tmp[424187]))
    (564299 'move' tmp[564294](564297 call _cond_test call_tmp[649047]))
    if tmp[564294]
    {
      unknown tmp[564301] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649052] "expr temp" "maybe param" "maybe type" "temp"
      (649055 'move' call_tmp[649052](115362 call elems[115349] 0))
      unknown call_tmp[649057] "expr temp" "maybe param" "maybe type" "temp"
      (649060 'move' call_tmp[649057](115364 call isRange call_tmp[649052]))
      (564303 'move' tmp[564301](424191 call isTrue call_tmp[649057]))
      (564308 'move' tmp[564293](564305 '_paramFoldLogical' tmp[564294] tmp[564301]))
    }
    {
      (564313 'move' tmp[564293](564310 '_paramFoldLogical' tmp[564294] 0))
    }
    unknown call_tmp[649062] "expr temp" "maybe param" "maybe type" "temp"
    (649065 'move' call_tmp[649062](115423 call _cond_test tmp[564293]))
    if call_tmp[649062]
    {
      (115420 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    { scopeless type
      unknown call_type_tmp[492102] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649067] "expr temp" "maybe param" "maybe type" "temp"
      (649070 'move' call_tmp[649067](115432 call elems[115349] 0))
      (492106 'move' call_type_tmp[492102](115433 'typeof' call_tmp[649067]))
    }
    unknown elemType[115436] "dead at end of block" "insert auto destroy" "type variable"(115435 call _getLiteralType call_type_tmp[492102])
    (542681 'move' elemType[115436](542679 call _getLiteralType call_type_tmp[492102]))
    unknown A[115451] "dead at end of block" "insert auto destroy" "unsafe"
    unknown call_tmp[649072] "expr temp" "maybe param" "maybe type" "temp"
    (649075 'move' call_tmp[649072](115440 call chpl_build_low_bounded_range arrayLiteralLowBound[115336]))
    unknown call_tmp[649077] "expr temp" "maybe param" "maybe type" "temp"
    (649080 'move' call_tmp[649077](115443 call # call_tmp[649072] k[115347]))
    unknown call_tmp[649082] "expr temp" "maybe param" "maybe type" "temp"
    (649085 'move' call_tmp[649082](115447 call chpl__ensureDomainExpr call_tmp[649077]))
    unknown call_tmp[649087] "expr temp" "maybe param" "maybe type" "temp"
    (649090 'move' call_tmp[649087](115449 call chpl__buildArrayRuntimeType call_tmp[649082] elemType[115436]))
    (542683 'default init var' A[115451] call_tmp[649087])
    (115454 'end of statement' elemType[115436])
    {
      unknown i[115574] "dead at end of block" "insert auto destroy"
      (542685 'init var' i[115574] 0)
      (479296 'end of statement')
      unknown tmp[115575] "maybe param" "temp"
      unknown call_tmp[649092] "expr temp" "maybe param" "maybe type" "temp"
      (649095 'move' call_tmp[649092](115458 call - k[115347] 1))
      (115587 'move' tmp[115575](115585 call chpl_compute_low_param_loop_bound 0 call_tmp[649092]))
      unknown tmp[115576] "maybe param" "temp"
      unknown call_tmp[649097] "expr temp" "maybe param" "maybe type" "temp"
      (649100 'move' call_tmp[649097](115592 call - k[115347] 1))
      (115597 'move' tmp[115576](115595 call chpl_compute_high_param_loop_bound 0 call_tmp[649097]))
      unknown tmp[115577] "maybe param" "temp"
      (115600 'move' tmp[115577] 1)
      ParamForLoop[115602]
      { i[115574] tmp[115575] tmp[115576] tmp[115577]
        {
          { scopeless type
            unknown call_type_tmp[492108] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649102] "expr temp" "maybe param" "maybe type" "temp"
            (649105 'move' call_tmp[649102](115466 call elems[115349] i[115574]))
            (492112 'move' call_type_tmp[492108](115467 'typeof' call_tmp[649102]))
          }
          unknown currType[115470] "dead at end of block" "insert auto destroy" "type variable"(115469 call _getLiteralType call_type_tmp[492108])
          (542690 'move' currType[115470](542688 call _getLiteralType call_type_tmp[492108]))
          (479297 'end of statement' i[115574])
          unknown call_tmp[649107] "expr temp" "maybe param" "maybe type" "temp"
          (649110 'move' call_tmp[649107](115476 call != currType[115470] elemType[115436]))
          unknown call_tmp[649112] "expr temp" "maybe param" "maybe type" "temp"
          (649115 'move' call_tmp[649112](115556 call _cond_test call_tmp[649107]))
          if call_tmp[649112]
          {
            unknown call_tmp[649117] "expr temp" "maybe param" "maybe type" "temp"
            (649120 'move' call_tmp[649117](115498 call _cast string[26] i[115574]))
            unknown call_tmp[649122] "expr temp" "maybe param" "maybe type" "temp"
            (649125 'move' call_tmp[649122](115500 call + "Array literal element " call_tmp[649117]))
            unknown call_tmp[649127] "expr temp" "maybe param" "maybe type" "temp"
            (649130 'move' call_tmp[649127](115519 call + call_tmp[649122] " expected to be of type "))
            unknown call_tmp[649132] "expr temp" "maybe param" "maybe type" "temp"
            (649135 'move' call_tmp[649132](115523 call _cast string[26] elemType[115436]))
            unknown call_tmp[649137] "expr temp" "maybe param" "maybe type" "temp"
            (649140 'move' call_tmp[649137](115525 call + call_tmp[649127] call_tmp[649132]))
            unknown call_tmp[649142] "expr temp" "maybe param" "maybe type" "temp"
            (649145 'move' call_tmp[649142](115544 call + call_tmp[649137] " but is of type "))
            unknown call_tmp[649147] "expr temp" "maybe param" "maybe type" "temp"
            (649150 'move' call_tmp[649147](115548 call _cast string[26] currType[115470]))
            unknown call_tmp[649152] "expr temp" "maybe param" "maybe type" "temp"
            (649155 'move' call_tmp[649152](115550 call + call_tmp[649142] call_tmp[649147]))
            (115553 call compilerError call_tmp[649152])
            (479299 'end of statement' i[115574] elemType[115436] currType[115470])
          }
          unknown call_tmp[649157] "expr temp" "maybe param" "maybe type" "temp"
          (649160 'move' call_tmp[649157](115563 call + i[115574] arrayLiteralLowBound[115336]))
          unknown call_tmp[649162] "expr temp" "maybe param" "maybe type" "temp"
          (649165 'move' call_tmp[649162](115566 call A[115451] call_tmp[649157]))
          unknown call_tmp[649167] "expr temp" "maybe param" "maybe type" "temp"
          (649170 'move' call_tmp[649167](115570 call elems[115349] i[115574]))
          (115571 call = call_tmp[649162] call_tmp[649167])
          (479303 'end of statement' A[115451] i[115574] i[115574])
        }
      }
      label _unused_continueLabel[115579]
      label _breakLabel[115578]
    }
    (515968 'move' ret[515963](515967 'deref' A[115451]))
    gotoReturn _end_chpl__buildArrayExpr[515961] _end_chpl__buildArrayExpr[515961]
    (479307 'end of statement' A[115451])
    label _end_chpl__buildArrayExpr[515961]
    (515965 return ret[515963])
  }
  function chpl__buildAssociativeArrayExpr[115623](arg elems[115620]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515974] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492114] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649172] "expr temp" "maybe param" "maybe type" "temp"
      (649175 'move' call_tmp[649172](115629 call elems[115620] 0))
      (492118 'move' call_type_tmp[492114](115630 'typeof' call_tmp[649172]))
    }
    unknown keyType[115633] "dead at end of block" "insert auto destroy" "type variable"(115632 call _getLiteralType call_type_tmp[492114])
    (542695 'move' keyType[115633](542693 call _getLiteralType call_type_tmp[492114]))
    { scopeless type
      unknown call_type_tmp[492120] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649177] "expr temp" "maybe param" "maybe type" "temp"
      (649180 'move' call_tmp[649177](115641 call elems[115620] 1))
      (492124 'move' call_type_tmp[492120](115642 'typeof' call_tmp[649177]))
    }
    unknown valType[115645] "dead at end of block" "insert auto destroy" "type variable"(115644 call _getLiteralType call_type_tmp[492120])
    (542700 'move' valType[115645](542698 call _getLiteralType call_type_tmp[492120]))
    unknown D[115653] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649182] "expr temp" "maybe param" "maybe type" "temp"
    (649185 'move' call_tmp[649182](115651 call chpl__buildDomainRuntimeType defaultDist[94053] keyType[115633]))
    (542702 'default init var' D[115653] call_tmp[649182])
    (115656 'end of statement')
    unknown call_tmp[649189] "expr temp" "maybe param" "maybe type" "temp"
    (649192 'move' call_tmp[649189](115665 call / k[115618] 2))
    (115668 call(115660 call (partial) requestCapacity _mt[243] D[115653]) call_tmp[649189])
    (479310 'end of statement' D[115653])
    unknown A[115677] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649194] "expr temp" "maybe param" "maybe type" "temp"
    (649197 'move' call_tmp[649194](115673 call chpl__ensureDomainExpr D[115653]))
    unknown call_tmp[649199] "expr temp" "maybe param" "maybe type" "temp"
    (649202 'move' call_tmp[649199](115675 call chpl__buildArrayRuntimeType call_tmp[649194] valType[115645]))
    (542704 'default init var' A[115677] call_tmp[649199])
    (115680 'end of statement' keyType[115633] D[115653] valType[115645])
    {
      unknown i[115854] "dead at end of block" "insert auto destroy"
      (542706 'init var' i[115854] 0)
      (479314 'end of statement')
      unknown tmp[115855] "maybe param" "temp"
      unknown call_tmp[649204] "expr temp" "maybe param" "maybe type" "temp"
      (649207 'move' call_tmp[649204](115684 call - k[115618] 1))
      (115866 'move' tmp[115855](115864 call chpl_compute_low_param_loop_bound 0 call_tmp[649204]))
      unknown tmp[115856] "maybe param" "temp"
      unknown call_tmp[649209] "expr temp" "maybe param" "maybe type" "temp"
      (649212 'move' call_tmp[649209](115871 call - k[115618] 1))
      (115876 'move' tmp[115856](115874 call chpl_compute_high_param_loop_bound 0 call_tmp[649209]))
      unknown tmp[115857] "maybe param" "temp"
      (115879 'move' tmp[115857] 2)
      ParamForLoop[115881]
      { i[115854] tmp[115855] tmp[115856] tmp[115857]
        {
          unknown call_tmp[649214] "maybe param" "maybe type" "temp"
          (649217 'move' call_tmp[649214](115694 call elems[115620] i[115854]))
          unknown elemKey[115695] "dead at end of block" "insert auto destroy"
          (542708 'init var' elemKey[115695] call_tmp[649214])
          (115698 'end of statement')
          unknown call_tmp[649219] "expr temp" "maybe param" "maybe type" "temp"
          (649222 'move' call_tmp[649219](115703 call + i[115854] 1))
          unknown call_tmp[649224] "maybe param" "maybe type" "temp"
          (649227 'move' call_tmp[649224](115706 call elems[115620] call_tmp[649219]))
          unknown elemVal[115707] "dead at end of block" "insert auto destroy"
          (542710 'init var' elemVal[115707] call_tmp[649224])
          (115710 'end of statement' i[115854] i[115854])
          unknown call_tmp[649229] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649232 'move' call_tmp[649229](115713 'typeof' elemKey[115695]))
          unknown elemKeyType[115716] "dead at end of block" "insert auto destroy" "type variable"(115715 call _getLiteralType call_tmp[649229])
          unknown call_tmp[649234] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649237 'move' call_tmp[649234](542714 'typeof' elemKey[115695]))
          (542716 'move' elemKeyType[115716](542713 call _getLiteralType call_tmp[649234]))
          (479317 'end of statement' elemKey[115695])
          unknown call_tmp[649239] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649242 'move' call_tmp[649239](115721 'typeof' elemVal[115707]))
          unknown elemValType[115724] "dead at end of block" "insert auto destroy" "type variable"(115723 call _getLiteralType call_tmp[649239])
          unknown call_tmp[649244] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649247 'move' call_tmp[649244](542720 'typeof' elemVal[115707]))
          (542722 'move' elemValType[115724](542719 call _getLiteralType call_tmp[649244]))
          (479319 'end of statement' elemVal[115707])
          unknown call_tmp[649249] "expr temp" "maybe param" "maybe type" "temp"
          (649252 'move' call_tmp[649249](115729 call != elemKeyType[115716] keyType[115633]))
          unknown call_tmp[649254] "expr temp" "maybe param" "maybe type" "temp"
          (649257 'move' call_tmp[649254](115780 call _cond_test call_tmp[649249]))
          if call_tmp[649254]
          {
            unknown call_tmp[649259] "expr temp" "maybe param" "maybe type" "temp"
            (649262 'move' call_tmp[649259](115751 call / i[115854] 2))
            unknown call_tmp[649264] "expr temp" "maybe param" "maybe type" "temp"
            (649267 'move' call_tmp[649264](115754 call _cast string[26] call_tmp[649259]))
            unknown call_tmp[649269] "expr temp" "maybe param" "maybe type" "temp"
            (649272 'move' call_tmp[649269](115756 call + "Associative array key element " call_tmp[649264]))
            unknown call_tmp[649274] "expr temp" "maybe param" "maybe type" "temp"
            (649277 'move' call_tmp[649274](115759 call + call_tmp[649269] " expected to be of type "))
            unknown call_tmp[649279] "expr temp" "maybe param" "maybe type" "temp"
            (649282 'move' call_tmp[649279](115763 call _cast string[26] keyType[115633]))
            unknown call_tmp[649284] "expr temp" "maybe param" "maybe type" "temp"
            (649287 'move' call_tmp[649284](115765 call + call_tmp[649274] call_tmp[649279]))
            unknown call_tmp[649289] "expr temp" "maybe param" "maybe type" "temp"
            (649292 'move' call_tmp[649289](115768 call + call_tmp[649284] " but is of type "))
            unknown call_tmp[649294] "expr temp" "maybe param" "maybe type" "temp"
            (649297 'move' call_tmp[649294](115772 call _cast string[26] elemKeyType[115716]))
            unknown call_tmp[649299] "expr temp" "maybe param" "maybe type" "temp"
            (649302 'move' call_tmp[649299](115774 call + call_tmp[649289] call_tmp[649294]))
            (115777 call compilerError call_tmp[649299])
            (479321 'end of statement' i[115854] keyType[115633] elemKeyType[115716])
          }
          unknown call_tmp[649304] "expr temp" "maybe param" "maybe type" "temp"
          (649307 'move' call_tmp[649304](115786 call != elemValType[115724] valType[115645]))
          unknown call_tmp[649309] "expr temp" "maybe param" "maybe type" "temp"
          (649312 'move' call_tmp[649309](115837 call _cond_test call_tmp[649304]))
          if call_tmp[649309]
          {
            unknown call_tmp[649314] "expr temp" "maybe param" "maybe type" "temp"
            (649317 'move' call_tmp[649314](115808 call / i[115854] 2))
            unknown call_tmp[649319] "expr temp" "maybe param" "maybe type" "temp"
            (649322 'move' call_tmp[649319](115811 call _cast string[26] call_tmp[649314]))
            unknown call_tmp[649324] "expr temp" "maybe param" "maybe type" "temp"
            (649327 'move' call_tmp[649324](115813 call + "Associative array value element " call_tmp[649319]))
            unknown call_tmp[649329] "expr temp" "maybe param" "maybe type" "temp"
            (649332 'move' call_tmp[649329](115816 call + call_tmp[649324] " expected to be of type "))
            unknown call_tmp[649334] "expr temp" "maybe param" "maybe type" "temp"
            (649337 'move' call_tmp[649334](115820 call _cast string[26] valType[115645]))
            unknown call_tmp[649339] "expr temp" "maybe param" "maybe type" "temp"
            (649342 'move' call_tmp[649339](115822 call + call_tmp[649329] call_tmp[649334]))
            unknown call_tmp[649344] "expr temp" "maybe param" "maybe type" "temp"
            (649347 'move' call_tmp[649344](115825 call + call_tmp[649339] " but is of type "))
            unknown call_tmp[649349] "expr temp" "maybe param" "maybe type" "temp"
            (649352 'move' call_tmp[649349](115829 call _cast string[26] elemValType[115724]))
            unknown call_tmp[649354] "expr temp" "maybe param" "maybe type" "temp"
            (649357 'move' call_tmp[649354](115831 call + call_tmp[649344] call_tmp[649349]))
            (115834 call compilerError call_tmp[649354])
            (479325 'end of statement' i[115854] valType[115645] elemValType[115724])
          }
          (115843 call += D[115653] elemKey[115695])
          (479329 'end of statement' D[115653] elemKey[115695])
          unknown call_tmp[649359] "expr temp" "maybe param" "maybe type" "temp"
          (649362 'move' call_tmp[649359](115849 call A[115677] elemKey[115695]))
          (115851 call = call_tmp[649359] elemVal[115707])
          (479332 'end of statement' A[115677] elemKey[115695] elemVal[115707])
        }
      }
      label _unused_continueLabel[115859]
      label _breakLabel[115858]
    }
    (515979 'move' ret[515974](515978 'deref' A[115677]))
    gotoReturn _end_chpl__buildAssociativeArrayExpr[515972] _end_chpl__buildAssociativeArrayExpr[515972]
    (479336 'end of statement' A[115677])
    label _end_chpl__buildAssociativeArrayExpr[515972]
    (515976 return ret[515974])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115902](arg arr[115899]:unmanaged BaseArr[415491], arg eltType[115904]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649364] "expr temp" "maybe param" "maybe type" "temp"
    (649367 'move' call_tmp[649364](115909 call isArrayType eltType[115904]))
    unknown call_tmp[649369] "expr temp" "maybe param" "maybe type" "temp"
    (649372 'move' call_tmp[649369](115960 call _cond_test call_tmp[649364]))
    if call_tmp[649369]
    {
      unknown call_tmp[649376] "expr temp" "maybe param" "maybe type" "temp"
      (649379 'move' call_tmp[649376](115913 call _decEltRefCounts _mt[243] arr[115899]))
      (115917 call = call_tmp[649376] 1)
      (479338 'end of statement')
      unknown arrayEltType[115925] "dead at end of block" "insert auto destroy" "type variable"(115924 call chpl__eltTypeFromArrayRuntimeType eltType[115904])
      (542727 'move' arrayEltType[115925](542725 call chpl__eltTypeFromArrayRuntimeType eltType[115904]))
      const dom[115932] "dead at end of block" "const" "ref var"
      unknown call_tmp[649381] "expr temp" "maybe param" "maybe type" "temp"
      (649384 'move' call_tmp[649381](115931 call chpl__domainFromArrayRuntimeType eltType[115904]))
      (542730 'move' dom[115932](542729 'addr of' call_tmp[649381]))
      (115935 'end of statement')
      unknown call_tmp[649388] "maybe param" "maybe type" "temp"
      (649391 'move' call_tmp[649388](115937 call _instance _mt[243] dom[115932]))
      const dv[115940] "dead at end of block" "const" "insert auto destroy"
      (542732 'init var' dv[115940] call_tmp[649388])
      (115943 'end of statement' dom[115932])
      (115952 call(115947 call (partial) add_containing_arr _mt[243] dv[115940]) arr[115899])
      (479340 'end of statement' dv[115940])
      (115958 call chpl_incRefCountsForDomainsInArrayEltTypes arr[115899] arrayEltType[115925])
      (479342 'end of statement' arrayEltType[115925])
    }
    (515983 return _void[55])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115974](arg arr[115971]:unmanaged BaseArr[415491], arg eltType[115976]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649395] "expr temp" "maybe param" "maybe type" "temp"
    (649398 'move' call_tmp[649395](115981 call isArrayType eltType[115976]))
    unknown call_tmp[649400] "expr temp" "maybe param" "maybe type" "temp"
    (649403 'move' call_tmp[649400](116177 call _cond_test call_tmp[649395]))
    if call_tmp[649400]
    {
      unknown call_tmp[649407] "expr temp" "maybe param" "maybe type" "temp"
      (649410 'move' call_tmp[649407](115983 call _decEltRefCounts _mt[243] arr[115971]))
      unknown call_tmp[649412] "expr temp" "maybe param" "maybe type" "temp"
      (649415 'move' call_tmp[649412](115987 call == call_tmp[649407] 0))
      unknown call_tmp[649417] "expr temp" "maybe param" "maybe type" "temp"
      (649420 'move' call_tmp[649417](116010 call _cond_test call_tmp[649412]))
      if call_tmp[649417]
      {
        (116008 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116020] "dead at end of block" "insert auto destroy" "type variable"(116019 call chpl__eltTypeFromArrayRuntimeType eltType[115976])
      (542737 'move' arrayEltType[116020](542735 call chpl__eltTypeFromArrayRuntimeType eltType[115976]))
      const dom[116027] "dead at end of block" "const" "ref var"
      unknown call_tmp[649422] "expr temp" "maybe param" "maybe type" "temp"
      (649425 'move' call_tmp[649422](116026 call chpl__domainFromArrayRuntimeType eltType[115976]))
      (542740 'move' dom[116027](542739 'addr of' call_tmp[649422]))
      (116030 'end of statement')
      (116035 call chpl_decRefCountsForDomainsInArrayEltTypes arr[115971] arrayEltType[116020])
      (479345 'end of statement' arrayEltType[116020])
      unknown call_tmp[649429] "expr temp" "maybe param" "maybe type" "temp"
      (649432 'move' call_tmp[649429](116038 call _instance _mt[243] dom[116027]))
      unknown call_tmp[649436] "maybe param" "maybe type" "temp"
      (649439 'move' call_tmp[649436](116048 call(116043 call (partial) remove_containing_arr _mt[243] call_tmp[649429]) arr[115971]))
      unknown removeDom[116049] "dead at end of block" "insert auto destroy"
      (542742 'init var' removeDom[116049] call_tmp[649436])
      (116052 'end of statement' dom[116027])
      unknown call_tmp[649441] "expr temp" "maybe param" "maybe type" "temp"
      (649444 'move' call_tmp[649441](116173 call _cond_test removeDom[116049]))
      if call_tmp[649441]
      {
        const tmp[116164] "const" "temp"
        unknown call_tmp[649448] "expr temp" "maybe param" "maybe type" "temp"
        (649451 'move' call_tmp[649448](116055 call _instance _mt[243] dom[116027]))
        unknown call_tmp[649453] "expr temp" "maybe param" "maybe type" "temp"
        (649456 'move' call_tmp[649453](116161 '_wide_get_locale' call_tmp[649448]))
        (116166 'move' tmp[116164](116162 'deref' call_tmp[649453]))
        {
          {
            unknown call_tmp[649460] "maybe param" "maybe type" "temp"
            (649463 'move' call_tmp[649460](116059 call _instance _mt[243] dom[116027]))
            const inst[116062] "dead at end of block" "const" "insert auto destroy"
            (542744 'init var' inst[116062] call_tmp[649460])
            (116065 'end of statement')
            unknown call_tmp[649467] "maybe param" "maybe type" "temp"
            (649470 'move' call_tmp[649467](116077 call(116073 call (partial) remove _mt[243] inst[116062])))
            unknown tmp[116078] "dead at end of block" "insert auto destroy" "temp"
            (542746 'init var' tmp[116078] call_tmp[649467])
            (116085 call _check_tuple_var_decl tmp[116078] 2)
            (479349 'end of statement')
            unknown call_tmp[649472] "maybe param" "maybe type" "temp"
            (649475 'move' call_tmp[649472](116079 call tmp[116078] 0))
            unknown domToFree[116067] "dead at end of block" "insert auto destroy"
            (542748 'init var' domToFree[116067] call_tmp[649472])
            unknown call_tmp[649477] "maybe param" "maybe type" "temp"
            (649480 'move' call_tmp[649477](116082 call tmp[116078] 1))
            unknown distToRemove[116069] "dead at end of block" "insert auto destroy"
            (542750 'init var' distToRemove[116069] call_tmp[649477])
            (116090 'end of statement')
            unknown distToFree[116095] "dead at end of block" "insert auto destroy"
            (542752 'init var' distToFree[116095] nil[44] unmanaged BaseDist?[415497])
            (116098 'end of statement' dom[116027])
            unknown call_tmp[649482] "expr temp" "maybe param" "maybe type" "temp"
            (649485 'move' call_tmp[649482](116101 call != distToRemove[116069] nil[44]))
            unknown call_tmp[649487] "expr temp" "maybe param" "maybe type" "temp"
            (649490 'move' call_tmp[649487](116116 call _cond_test call_tmp[649482]))
            if call_tmp[649487]
            {
              unknown call_tmp[649492] "expr temp" "maybe param" "maybe type" "temp"
              (649495 'move' call_tmp[649492](116105 call postfix! distToRemove[116069]))
              unknown call_tmp[649499] "expr temp" "maybe param" "maybe type" "temp"
              (649502 'move' call_tmp[649499](116111 call(116107 call (partial) remove _mt[243] call_tmp[649492])))
              (116112 call = distToFree[116095] call_tmp[649499])
              (479350 'end of statement' distToFree[116095] distToRemove[116069])
            }
            unknown call_tmp[649504] "expr temp" "maybe param" "maybe type" "temp"
            (649507 'move' call_tmp[649504](116122 call != domToFree[116067] nil[44]))
            unknown call_tmp[649509] "expr temp" "maybe param" "maybe type" "temp"
            (649512 'move' call_tmp[649509](116133 call _cond_test call_tmp[649504]))
            if call_tmp[649509]
            {
              unknown call_tmp[649514] "expr temp" "maybe param" "maybe type" "temp"
              (649517 'move' call_tmp[649514](116130 call _isPrivatized inst[116062]))
              (116131 call _delete_dom inst[116062] call_tmp[649514])
              (479353 'end of statement' inst[116062] inst[116062])
            }
            unknown call_tmp[649519] "expr temp" "maybe param" "maybe type" "temp"
            (649522 'move' call_tmp[649519](116140 call != distToFree[116095] nil[44]))
            unknown call_tmp[649524] "expr temp" "maybe param" "maybe type" "temp"
            (649527 'move' call_tmp[649524](116156 call _cond_test call_tmp[649519]))
            if call_tmp[649524]
            {
              unknown call_tmp[649529] "expr temp" "maybe param" "maybe type" "temp"
              (649532 'move' call_tmp[649529](116144 call postfix! distToFree[116095]))
              unknown call_tmp[649536] "expr temp" "maybe param" "maybe type" "temp"
              (649539 'move' call_tmp[649536](116149 call dist _mt[243] inst[116062]))
              unknown call_tmp[649541] "expr temp" "maybe param" "maybe type" "temp"
              (649544 'move' call_tmp[649541](116153 call _isPrivatized call_tmp[649536]))
              (116154 call _delete_dist call_tmp[649529] call_tmp[649541])
              (479356 'end of statement' distToFree[116095] inst[116062])
            }
          }
          (116169 'on block' 0 tmp[116164])
        }
      }
    }
    (515985 return _void[55])
  }
  function chpl__buildSubDomainType[116190](arg dom[116187]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515989] "RVV" "temp" "type variable"
    unknown call_tmp[649546] "expr temp" "maybe param" "maybe type" "temp"
    (649549 'move' call_tmp[649546](116195 call chpl__convertValueToRuntimeType dom[116187]))
    (515994 'move' ret[515989](515993 'deref' call_tmp[649546]))
    (515991 return ret[515989])
  }
  function chpl__isTupleOfRanges[116205](arg tup[116203]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515998] "RVV" "param" "temp"
    {
      unknown i[116236] "dead at end of block" "insert auto destroy"
      (542754 'init var' i[116236] 0)
      (479360 'end of statement')
      unknown tmp[116237] "maybe param" "temp"
      unknown call_tmp[649553] "expr temp" "maybe param" "maybe type" "temp"
      (649556 'move' call_tmp[649553](116209 call size _mt[243] tup[116203]))
      unknown call_tmp[649558] "expr temp" "maybe param" "maybe type" "temp"
      (649561 'move' call_tmp[649558](116213 call - call_tmp[649553] 1))
      (116249 'move' tmp[116237](116247 call chpl_compute_low_param_loop_bound 0 call_tmp[649558]))
      unknown tmp[116238] "maybe param" "temp"
      unknown call_tmp[649565] "expr temp" "maybe param" "maybe type" "temp"
      (649568 'move' call_tmp[649565](116256 call size _mt[243] tup[116203]))
      unknown call_tmp[649570] "expr temp" "maybe param" "maybe type" "temp"
      (649573 'move' call_tmp[649570](116254 call - call_tmp[649565] 1))
      (116262 'move' tmp[116238](116260 call chpl_compute_high_param_loop_bound 0 call_tmp[649570]))
      unknown tmp[116239] "maybe param" "temp"
      (116265 'move' tmp[116239] 1)
      ParamForLoop[116267]
      { i[116236] tmp[116237] tmp[116238] tmp[116239]
        {
          { scopeless type
            unknown call_type_tmp[492126] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649575] "expr temp" "maybe param" "maybe type" "temp"
            (649578 'move' call_tmp[649575](116221 call tup[116203] i[116236]))
            (492130 'move' call_type_tmp[492126](116222 'typeof' call_tmp[649575]))
          }
          unknown call_tmp[649580] "expr temp" "maybe param" "maybe type" "temp"
          (649583 'move' call_tmp[649580](116224 call isRangeType call_type_tmp[492126]))
          unknown call_tmp[649585] "expr temp" "maybe param" "maybe type" "temp"
          (649588 'move' call_tmp[649585](116225 call ! call_tmp[649580]))
          unknown call_tmp[649590] "expr temp" "maybe param" "maybe type" "temp"
          (649593 'move' call_tmp[649590](116230 call _cond_test call_tmp[649585]))
          if call_tmp[649590]
          {
            (516003 'move' ret[515998](516002 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[515996] _end_chpl__isTupleOfRanges[515996]
          }
        }
      }
      label _unused_continueLabel[116241]
      label _breakLabel[116240]
    }
    (516008 'move' ret[515998](516007 'deref' 1))
    label _end_chpl__isTupleOfRanges[515996]
    (516000 return ret[515998])
  }
  function chpl__buildDomainExpr[116288](arg ranges[116285]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516012] "RVV" "temp"
    unknown call_tmp[649597] "maybe param" "maybe type" "temp"
    (649600 'move' call_tmp[649597](116295 call size _mt[243] ranges[116285]))
    unknown rank[116298] "dead at end of block" "param"
    (542756 'init var' rank[116298] call_tmp[649597])
    (116301 'end of statement')
    {
      unknown i[116352] "dead at end of block" "insert auto destroy"
      (542758 'init var' i[116352] 0)
      (479363 'end of statement')
      unknown tmp[116353] "maybe param" "temp"
      unknown call_tmp[649602] "expr temp" "maybe param" "maybe type" "temp"
      (649605 'move' call_tmp[649602](116306 call - rank[116298] 1))
      (116365 'move' tmp[116353](116363 call chpl_compute_low_param_loop_bound 1 call_tmp[649602]))
      unknown tmp[116354] "maybe param" "temp"
      unknown call_tmp[649607] "expr temp" "maybe param" "maybe type" "temp"
      (649610 'move' call_tmp[649607](116370 call - rank[116298] 1))
      (116375 'move' tmp[116354](116373 call chpl_compute_high_param_loop_bound 1 call_tmp[649607]))
      unknown tmp[116355] "maybe param" "temp"
      (116378 'move' tmp[116355] 1)
      ParamForLoop[116380]
      { i[116352] tmp[116353] tmp[116354] tmp[116355]
        unknown call_tmp[649612] "expr temp" "maybe param" "maybe type" "temp"
        (649615 'move' call_tmp[649612](116313 call ranges[116285] 0))
        unknown call_tmp[649619] "expr temp" "maybe param" "maybe type" "temp"
        (649622 'move' call_tmp[649619](116314 call idxType _mt[243] call_tmp[649612]))
        unknown call_tmp[649624] "expr temp" "maybe param" "maybe type" "temp"
        (649627 'move' call_tmp[649624](116320 call ranges[116285] i[116352]))
        unknown call_tmp[649631] "expr temp" "maybe param" "maybe type" "temp"
        (649634 'move' call_tmp[649631](116321 call idxType _mt[243] call_tmp[649624]))
        unknown call_tmp[649636] "expr temp" "maybe param" "maybe type" "temp"
        (649639 'move' call_tmp[649636](116324 call != call_tmp[649619] call_tmp[649631]))
        unknown call_tmp[649641] "expr temp" "maybe param" "maybe type" "temp"
        (649644 'move' call_tmp[649641](116347 call _cond_test call_tmp[649636]))
        if call_tmp[649641]
        {
          (116345 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116357]
      label _breakLabel[116356]
    }
    {
      unknown i[116431] "dead at end of block" "insert auto destroy"
      (542760 'init var' i[116431] 0)
      (479365 'end of statement')
      unknown tmp[116432] "maybe param" "temp"
      unknown call_tmp[649646] "expr temp" "maybe param" "maybe type" "temp"
      (649649 'move' call_tmp[649646](116392 call - rank[116298] 1))
      (116444 'move' tmp[116432](116442 call chpl_compute_low_param_loop_bound 0 call_tmp[649646]))
      unknown tmp[116433] "maybe param" "temp"
      unknown call_tmp[649651] "expr temp" "maybe param" "maybe type" "temp"
      (649654 'move' call_tmp[649651](116449 call - rank[116298] 1))
      (116454 'move' tmp[116433](116452 call chpl_compute_high_param_loop_bound 0 call_tmp[649651]))
      unknown tmp[116434] "maybe param" "temp"
      (116457 'move' tmp[116434] 1)
      ParamForLoop[116459]
      { i[116431] tmp[116432] tmp[116433] tmp[116434]
        unknown call_tmp[649656] "expr temp" "maybe param" "maybe type" "temp"
        (649659 'move' call_tmp[649656](116400 call ranges[116285] i[116431]))
        unknown call_tmp[649661] "expr temp" "maybe param" "maybe type" "temp"
        (649664 'move' call_tmp[649661](116402 call isBoundedRange call_tmp[649656]))
        unknown call_tmp[649666] "expr temp" "maybe param" "maybe type" "temp"
        (649669 'move' call_tmp[649666](116403 call ! call_tmp[649661]))
        unknown call_tmp[649671] "expr temp" "maybe param" "maybe type" "temp"
        (649674 'move' call_tmp[649671](116426 call _cond_test call_tmp[649666]))
        if call_tmp[649671]
        {
          (116424 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116436]
      label _breakLabel[116435]
    }
    unknown d[116484] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649676] "expr temp" "maybe param" "maybe type" "temp"
    (649679 'move' call_tmp[649676](116473 call ranges[116285] 0))
    unknown call_tmp[649683] "expr temp" "maybe param" "maybe type" "temp"
    (649686 'move' call_tmp[649683](116474 call idxType _mt[243] call_tmp[649676]))
    unknown call_tmp[649688] "expr temp" "maybe param" "maybe type" "temp"
    (649691 'move' call_tmp[649688](116480 call chpl__anyStridable ranges[116285]))
    unknown call_tmp[649693] "expr temp" "maybe param" "maybe type" "temp"
    (649696 'move' call_tmp[649693](116482 call chpl__buildDomainRuntimeType defaultDist[94053] rank[116298] call_tmp[649683] call_tmp[649688]))
    (542762 'default init var' d[116484] call_tmp[649693])
    (116487 'end of statement')
    (116496 call(116491 call (partial) setIndices _mt[243] d[116484]) ranges[116285])
    (479367 'end of statement' d[116484])
    (516017 'move' ret[516012](516016 'deref' d[116484]))
    gotoReturn _end_chpl__buildDomainExpr[516010] _end_chpl__buildDomainExpr[516010]
    (479369 'end of statement' d[116484])
    label _end_chpl__buildDomainExpr[516010]
    (516014 return ret[516012])
  }
  where {
    (116293 call chpl__isTupleOfRanges ranges[116285])
  }
  function chpl__buildDomainExpr[116510](arg keys[116507]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516023] "RVV" "temp"
    unknown call_tmp[649702] "maybe param" "maybe type" "temp"
    (649705 'move' call_tmp[649702](116513 call size _mt[243] keys[116507]))
    unknown count[116516] "dead at end of block" "param"
    (542764 'init var' count[116516] call_tmp[649702])
    (116519 'end of statement')
    { scopeless type
      unknown call_type_tmp[492132] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649707] "expr temp" "maybe param" "maybe type" "temp"
      (649710 'move' call_tmp[649707](116525 call keys[116507] 0))
      (492136 'move' call_type_tmp[492132](116526 'typeof' call_tmp[649707]))
    }
    unknown keyType[116529] "dead at end of block" "insert auto destroy" "type variable"(116528 call _getLiteralType call_type_tmp[492132])
    (542769 'move' keyType[116529](542767 call _getLiteralType call_type_tmp[492132]))
    {
      unknown i[116607] "dead at end of block" "insert auto destroy"
      (542771 'init var' i[116607] 0)
      (479371 'end of statement')
      unknown tmp[116608] "maybe param" "temp"
      unknown call_tmp[649712] "expr temp" "maybe param" "maybe type" "temp"
      (649715 'move' call_tmp[649712](116535 call - count[116516] 1))
      (116620 'move' tmp[116608](116618 call chpl_compute_low_param_loop_bound 1 call_tmp[649712]))
      unknown tmp[116609] "maybe param" "temp"
      unknown call_tmp[649717] "expr temp" "maybe param" "maybe type" "temp"
      (649720 'move' call_tmp[649717](116625 call - count[116516] 1))
      (116630 'move' tmp[116609](116628 call chpl_compute_high_param_loop_bound 1 call_tmp[649717]))
      unknown tmp[116610] "maybe param" "temp"
      (116633 'move' tmp[116610] 1)
      ParamForLoop[116635]
      { i[116607] tmp[116608] tmp[116609] tmp[116610]
        { scopeless type
          unknown call_type_tmp[492138] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[649722] "expr temp" "maybe param" "maybe type" "temp"
          (649725 'move' call_tmp[649722](116544 call keys[116507] i[116607]))
          (492142 'move' call_type_tmp[492138](116545 'typeof' call_tmp[649722]))
        }
        unknown call_tmp[649727] "expr temp" "maybe param" "maybe type" "temp"
        (649730 'move' call_tmp[649727](116547 call _getLiteralType call_type_tmp[492138]))
        unknown call_tmp[649732] "expr temp" "maybe param" "maybe type" "temp"
        (649735 'move' call_tmp[649732](116548 call != keyType[116529] call_tmp[649727]))
        unknown call_tmp[649737] "expr temp" "maybe param" "maybe type" "temp"
        (649740 'move' call_tmp[649737](116603 call _cond_test call_tmp[649732]))
        if call_tmp[649737]
        {
          { scopeless type
            unknown call_type_tmp[492144] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649742] "expr temp" "maybe param" "maybe type" "temp"
            (649745 'move' call_tmp[649742](116590 call keys[116507] i[116607]))
            (492148 'move' call_type_tmp[492144](116591 'typeof' call_tmp[649742]))
          }
          unknown call_tmp[649747] "expr temp" "maybe param" "maybe type" "temp"
          (649750 'move' call_tmp[649747](116570 call _cast string[26] i[116607]))
          unknown call_tmp[649752] "expr temp" "maybe param" "maybe type" "temp"
          (649755 'move' call_tmp[649752](116572 call + "Associative domain element " call_tmp[649747]))
          unknown call_tmp[649757] "expr temp" "maybe param" "maybe type" "temp"
          (649760 'move' call_tmp[649757](116575 call + call_tmp[649752] " expected to be of type "))
          unknown call_tmp[649762] "expr temp" "maybe param" "maybe type" "temp"
          (649765 'move' call_tmp[649762](116579 call _cast string[26] keyType[116529]))
          unknown call_tmp[649767] "expr temp" "maybe param" "maybe type" "temp"
          (649770 'move' call_tmp[649767](116581 call + call_tmp[649757] call_tmp[649762]))
          unknown call_tmp[649772] "expr temp" "maybe param" "maybe type" "temp"
          (649775 'move' call_tmp[649772](116584 call + call_tmp[649767] " but is of type "))
          unknown call_tmp[649777] "expr temp" "maybe param" "maybe type" "temp"
          (649780 'move' call_tmp[649777](116593 call _getLiteralType call_type_tmp[492144]))
          unknown call_tmp[649782] "expr temp" "maybe param" "maybe type" "temp"
          (649785 'move' call_tmp[649782](116595 call _cast string[26] call_tmp[649777]))
          unknown call_tmp[649787] "expr temp" "maybe param" "maybe type" "temp"
          (649790 'move' call_tmp[649787](116597 call + call_tmp[649772] call_tmp[649782]))
          (116600 call compilerError call_tmp[649787])
          (479372 'end of statement' i[116607] keyType[116529] i[116607])
        }
      }
      label _unused_continueLabel[116612]
      label _breakLabel[116611]
    }
    unknown D[116649] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649792] "expr temp" "maybe param" "maybe type" "temp"
    (649795 'move' call_tmp[649792](116647 call chpl__buildDomainRuntimeType defaultDist[94053] keyType[116529]))
    (542773 'default init var' D[116649] call_tmp[649792])
    (116652 'end of statement' keyType[116529])
    (116659 call(116654 call (partial) requestCapacity _mt[243] D[116649]) count[116516])
    (479377 'end of statement' D[116649])
    {
      unknown i[116676] "dead at end of block" "insert auto destroy"
      (542775 'init var' i[116676] 0)
      (479379 'end of statement')
      unknown tmp[116677] "maybe param" "temp"
      unknown call_tmp[649799] "expr temp" "maybe param" "maybe type" "temp"
      (649802 'move' call_tmp[649799](116664 call - count[116516] 1))
      (116689 'move' tmp[116677](116687 call chpl_compute_low_param_loop_bound 0 call_tmp[649799]))
      unknown tmp[116678] "maybe param" "temp"
      unknown call_tmp[649804] "expr temp" "maybe param" "maybe type" "temp"
      (649807 'move' call_tmp[649804](116694 call - count[116516] 1))
      (116699 'move' tmp[116678](116697 call chpl_compute_high_param_loop_bound 0 call_tmp[649804]))
      unknown tmp[116679] "maybe param" "temp"
      (116702 'move' tmp[116679] 1)
      ParamForLoop[116704]
      { i[116676] tmp[116677] tmp[116678] tmp[116679]
        unknown call_tmp[649809] "expr temp" "maybe param" "maybe type" "temp"
        (649812 'move' call_tmp[649809](116672 call keys[116507] i[116676]))
        (116673 call += D[116649] call_tmp[649809])
        (479380 'end of statement' D[116649] i[116676])
      }
      label _unused_continueLabel[116681]
      label _breakLabel[116680]
    }
    (516028 'move' ret[516023](516027 'deref' D[116649]))
    gotoReturn _end_chpl__buildDomainExpr[516021] _end_chpl__buildDomainExpr[516021]
    (479383 'end of statement' D[116649])
    label _end_chpl__buildDomainExpr[516021]
    (516025 return ret[516023])
  }
  function chpl__ensureDomainExpr[116724](const  ref arg x[116721]:_domain[125908](?)) const ref : _unknown[51]
  {
    unknown ret[516034] "RVV" "temp"
    (516039 'move' ret[516034](516038 'addr of' x[116721]))
    (516036 return ret[516034])
  }
  function chpl__ensureDomainExpr[116738](arg x[116735]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[516043] "RVV" "temp"
    unknown call_tmp[649814] "expr temp" "maybe param" "maybe type" "temp"
    (649817 'move' call_tmp[649814](116744 call chpl__buildDomainExpr(116742 'expand_tuple' x[116735])))
    (516048 'move' ret[516043](516047 'deref' call_tmp[649814]))
    (516045 return ret[516043])
  }
  function chpl__ensureDomainExpr[116754](arg t[116752]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[649819] "expr temp" "maybe param" "maybe type" "temp"
    (649822 'move' call_tmp[649819](116777 call _cast string[26] t[116752]))
    (116798 call compilerError "Domain expression was a type ('" call_tmp[649819] "') rather than a domain value or range list as expected")
    (516050 return _void[55])
  }
  function chpl__distributed[116809](arg d[116806]:_distribution[118973](?), arg dom[116812]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[516054] "RVV" "temp"
    unknown call_tmp[649824] "expr temp" "maybe param" "maybe type" "temp"
    (649827 'move' call_tmp[649824](116818 call isRectangularDom dom[116812]))
    unknown call_tmp[649829] "expr temp" "maybe param" "maybe type" "temp"
    (649832 'move' call_tmp[649829](116876 call _cond_test call_tmp[649824]))
    if call_tmp[649829]
    {
      unknown call_tmp[649836] "expr temp" "maybe param" "maybe type" "temp"
      (649839 'move' call_tmp[649836](116820 call rank _mt[243] dom[116812]))
      unknown call_tmp[649843] "expr temp" "maybe param" "maybe type" "temp"
      (649846 'move' call_tmp[649843](116825 call _value _mt[243] dom[116812]))
      unknown call_tmp[649850] "expr temp" "maybe param" "maybe type" "temp"
      (649853 'move' call_tmp[649850](116828 call idxType _mt[243] call_tmp[649843]))
      unknown call_tmp[649857] "expr temp" "maybe param" "maybe type" "temp"
      (649860 'move' call_tmp[649857](116832 call _value _mt[243] dom[116812]))
      unknown call_tmp[649864] "expr temp" "maybe param" "maybe type" "temp"
      (649867 'move' call_tmp[649864](116835 call stridable _mt[243] call_tmp[649857]))
      unknown call_tmp[649869] "expr temp" "maybe param" "maybe type" "temp"
      (649872 'move' call_tmp[649869](116839 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[649836] call_tmp[649850] call_tmp[649864]))
      unknown call_tmp[649874] "maybe param" "maybe type" "temp"
      (649877 'move' call_tmp[649874](116842 call chpl__distributed d[116806] call_tmp[649869]))
      unknown distDom[116845] "dead at end of block" "insert auto destroy"
      (542777 'init var' distDom[116845] dom[116812] call_tmp[649874])
      (116848 'end of statement')
      (516059 'move' ret[516054](516058 'deref' distDom[116845]))
      gotoReturn _end_chpl__distributed[516052] _end_chpl__distributed[516052]
      (479386 'end of statement' distDom[116845])
    }
    {
      unknown call_tmp[649881] "expr temp" "maybe param" "maybe type" "temp"
      (649884 'move' call_tmp[649881](116854 call _value _mt[243] dom[116812]))
      unknown call_tmp[649888] "expr temp" "maybe param" "maybe type" "temp"
      (649891 'move' call_tmp[649888](116857 call idxType _mt[243] call_tmp[649881]))
      unknown call_tmp[649893] "expr temp" "maybe param" "maybe type" "temp"
      (649896 'move' call_tmp[649893](116862 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[649888]))
      unknown call_tmp[649898] "maybe param" "maybe type" "temp"
      (649901 'move' call_tmp[649898](116865 call chpl__distributed d[116806] call_tmp[649893]))
      unknown distDom[116868] "dead at end of block" "insert auto destroy"
      (542779 'init var' distDom[116868] dom[116812] call_tmp[649898])
      (116871 'end of statement')
      (516064 'move' ret[516054](516063 'deref' distDom[116868]))
      gotoReturn _end_chpl__distributed[516052] _end_chpl__distributed[516052]
      (479388 'end of statement' distDom[116868])
    }
    label _end_chpl__distributed[516052]
    (516056 return ret[516054])
  }
  function chpl__distributed[116889](arg d[116886]:_distribution[118973](?), arg ranges[116892]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516070] "RVV" "temp"
    unknown call_tmp[649903] "expr temp" "maybe param" "maybe type" "temp"
    (649906 'move' call_tmp[649903](116906 call chpl__buildDomainExpr(116904 'expand_tuple' ranges[116892])))
    unknown call_tmp[649908] "expr temp" "maybe param" "maybe type" "temp"
    (649911 'move' call_tmp[649908](116907 call chpl__distributed d[116886] call_tmp[649903]))
    (516075 'move' ret[516070](516074 'deref' call_tmp[649908]))
    (516072 return ret[516070])
  }
  where {
    (116898 call chpl__isTupleOfRanges ranges[116892])
  }
  function chpl__isArrayView[116918](arg arr[116916]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516079] "RVV" "param" "temp"
    const value[116932] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564320] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564321] "maybe param" "temp"
    unknown call_tmp[649913] "expr temp" "maybe param" "maybe type" "temp"
    (649916 'move' call_tmp[649913](116923 call isArray arr[116916]))
    (564326 'move' tmp[564321](564324 call _cond_test call_tmp[649913]))
    if tmp[564321]
    {
      unknown tmp[564328] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564330 'move' tmp[564328](116925 call _value _mt[243] arr[116916]))
      (564335 'move' tmp[564320](564332 '_paramFoldLogical' tmp[564321] tmp[564328]))
    }
    {
      (564340 'move' tmp[564320](564337 '_paramFoldLogical' tmp[564321] arr[116916]))
    }
    (542781 'init var' value[116932] tmp[564320])
    (116935 'end of statement')
    unknown call_tmp[649922] "maybe param" "maybe type" "temp"
    (649925 'move' call_tmp[649922](116942 call(116938 call (partial) isSliceArrayView _mt[243] value[116932])))
    unknown isSlice[116943] "dead at end of block" "param"
    (542783 'init var' isSlice[116943] call_tmp[649922])
    (116946 'end of statement')
    unknown call_tmp[649929] "maybe param" "maybe type" "temp"
    (649932 'move' call_tmp[649929](116952 call(116948 call (partial) isRankChangeArrayView _mt[243] value[116932])))
    unknown isRankChange[116953] "dead at end of block" "param"
    (542785 'init var' isRankChange[116953] call_tmp[649929])
    (116956 'end of statement')
    unknown call_tmp[649936] "maybe param" "maybe type" "temp"
    (649939 'move' call_tmp[649936](116962 call(116958 call (partial) isReindexArrayView _mt[243] value[116932])))
    unknown isReindex[116963] "dead at end of block" "param"
    (542787 'init var' isReindex[116963] call_tmp[649936])
    (116966 'end of statement' value[116932] value[116932] value[116932])
    unknown tmp[424208] "maybe param" "temp"
    unknown tmp[424229] "maybe param" "temp"
    (424240 'move' tmp[424229] isSlice[116943])
    unknown call_tmp[649941] "expr temp" "maybe param" "maybe type" "temp"
    (649944 'move' call_tmp[649941](424242 call _cond_invalid tmp[424229]))
    if call_tmp[649941]
    {
      (424245 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564347] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564348] "maybe param" "temp"
    unknown call_tmp[649946] "expr temp" "maybe param" "maybe type" "temp"
    (649949 'move' call_tmp[649946](424230 call isTrue tmp[424229]))
    (564353 'move' tmp[564348](564351 call _cond_test call_tmp[649946]))
    if tmp[564348]
    {
      (564358 'move' tmp[564347](564355 '_paramFoldLogical' tmp[564348] 1))
    }
    {
      unknown tmp[564360] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564362 'move' tmp[564360](424234 call isTrue isRankChange[116953]))
      (564367 'move' tmp[564347](564364 '_paramFoldLogical' tmp[564348] tmp[564360]))
    }
    (424219 'move' tmp[424208] tmp[564347])
    unknown call_tmp[649951] "expr temp" "maybe param" "maybe type" "temp"
    (649954 'move' call_tmp[649951](424221 call _cond_invalid tmp[424208]))
    if call_tmp[649951]
    {
      (424224 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564374] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564375] "maybe param" "temp"
    unknown call_tmp[649956] "expr temp" "maybe param" "maybe type" "temp"
    (649959 'move' call_tmp[649956](424209 call isTrue tmp[424208]))
    (564380 'move' tmp[564375](564378 call _cond_test call_tmp[649956]))
    if tmp[564375]
    {
      (564385 'move' tmp[564374](564382 '_paramFoldLogical' tmp[564375] 1))
    }
    {
      unknown tmp[564387] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564389 'move' tmp[564387](424213 call isTrue isReindex[116963]))
      (564394 'move' tmp[564374](564391 '_paramFoldLogical' tmp[564375] tmp[564387]))
    }
    (516084 'move' ret[516079](516083 'deref' tmp[564374]))
    (516081 return ret[516079])
  }
  function chpl__getActualArray[116982](arg arr[116980]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516088] "RVV" "temp"
    unknown value[116996] "dead at end of block" "insert auto destroy"
    unknown tmp[564401] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564402] "maybe param" "temp"
    unknown call_tmp[649961] "expr temp" "maybe param" "maybe type" "temp"
    (649964 'move' call_tmp[649961](116987 call isArray arr[116980]))
    (564407 'move' tmp[564402](564405 call _cond_test call_tmp[649961]))
    if tmp[564402]
    {
      unknown tmp[564409] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564411 'move' tmp[564409](116989 call _value _mt[243] arr[116980]))
      (564416 'move' tmp[564401](564413 '_paramFoldLogical' tmp[564402] tmp[564409]))
    }
    {
      (564421 'move' tmp[564401](564418 '_paramFoldLogical' tmp[564402] arr[116980]))
    }
    (542789 'init var' value[116996] tmp[564401])
    (116999 'end of statement')
    unknown ret[117017] "dead at end of block" "insert auto destroy"
    unknown tmp[564428] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564429] "maybe param" "temp"
    unknown call_tmp[649968] "expr temp" "maybe param" "maybe type" "temp"
    (649971 'move' call_tmp[649968](117004 call chpl__isArrayView value[116996]))
    (564434 'move' tmp[564429](564432 call _cond_test call_tmp[649968]))
    if tmp[564429]
    {
      unknown tmp[564436] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564438 'move' tmp[564436](117012 call(117008 call (partial) _getActualArray _mt[243] value[116996])))
      (564443 'move' tmp[564428](564440 '_paramFoldLogical' tmp[564429] tmp[564436]))
    }
    {
      (564448 'move' tmp[564428](564445 '_paramFoldLogical' tmp[564429] value[116996]))
    }
    (542791 'init var' ret[117017] tmp[564428])
    (117020 'end of statement' value[116996] value[116996] value[116996])
    (516093 'move' ret[516088](516092 'deref' ret[117017]))
    gotoReturn _end_chpl__getActualArray[516086] _end_chpl__getActualArray[516086]
    (479400 'end of statement' ret[117017])
    label _end_chpl__getActualArray[516086]
    (516090 return ret[516088])
  }
  function chpl__isDROrDRView[117030](arg arg[117028]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516099] "RVV" "param" "temp"
    unknown tmp[424355] "maybe param" "temp"
    (424366 'move' tmp[424355](117035 call isDomain arg[117028]))
    unknown call_tmp[649975] "expr temp" "maybe param" "maybe type" "temp"
    (649978 'move' call_tmp[649975](424368 call _cond_invalid tmp[424355]))
    if call_tmp[649975]
    {
      (424371 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564455] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564456] "maybe param" "temp"
    unknown call_tmp[649980] "expr temp" "maybe param" "maybe type" "temp"
    (649983 'move' call_tmp[649980](424356 call isTrue tmp[424355]))
    (564461 'move' tmp[564456](564459 call _cond_test call_tmp[649980]))
    if tmp[564456]
    {
      (564466 'move' tmp[564455](564463 '_paramFoldLogical' tmp[564456] 1))
    }
    {
      unknown tmp[564468] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649985] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (649988 'move' call_tmp[649985](117038 'typeof' arg[117028]))
      unknown call_tmp[649990] "expr temp" "maybe param" "maybe type" "temp"
      (649993 'move' call_tmp[649990](354328 'is_subtype' BaseDom[372783](?) call_tmp[649985]))
      (564470 'move' tmp[564468](424360 call isTrue call_tmp[649990]))
      (564475 'move' tmp[564455](564472 '_paramFoldLogical' tmp[564456] tmp[564468]))
    }
    unknown call_tmp[649995] "expr temp" "maybe param" "maybe type" "temp"
    (649998 'move' call_tmp[649995](117186 call _cond_test tmp[564455]))
    if call_tmp[649995]
    {
      const value[117056] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[564482] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564483] "maybe param" "temp"
      unknown call_tmp[650000] "expr temp" "maybe param" "maybe type" "temp"
      (650003 'move' call_tmp[650000](117047 call isDomain arg[117028]))
      (564488 'move' tmp[564483](564486 call _cond_test call_tmp[650000]))
      if tmp[564483]
      {
        unknown tmp[564490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564492 'move' tmp[564490](117049 call _value _mt[243] arg[117028]))
        (564497 'move' tmp[564482](564494 '_paramFoldLogical' tmp[564483] tmp[564490]))
      }
      {
        (564502 'move' tmp[564482](564499 '_paramFoldLogical' tmp[564483] arg[117028]))
      }
      (542793 'init var' value[117056] tmp[564482])
      (117059 'end of statement')
      unknown call_tmp[650009] "maybe param" "maybe type" "temp"
      (650012 'move' call_tmp[650009](117066 call(117062 call (partial) isDefaultRectangular _mt[243] value[117056])))
      unknown isDR[117067] "dead at end of block" "param"
      (542795 'init var' isDR[117067] call_tmp[650009])
      (117070 'end of statement')
      unknown tmp[424250] "maybe param" "temp"
      (424261 'move' tmp[424250](117074 call chpl__isDomainView value[117056]))
      unknown call_tmp[650014] "expr temp" "maybe param" "maybe type" "temp"
      (650017 'move' call_tmp[650014](424263 call _cond_invalid tmp[424250]))
      if call_tmp[650014]
      {
        (424266 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[117086] "dead at end of block" "param"
      unknown tmp[564509] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564510] "maybe param" "temp"
      unknown call_tmp[650019] "expr temp" "maybe param" "maybe type" "temp"
      (650022 'move' call_tmp[650019](424251 call isTrue tmp[424250]))
      (564515 'move' tmp[564510](564513 call _cond_test call_tmp[650019]))
      if tmp[564510]
      {
        unknown tmp[564517] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650024] "expr temp" "maybe param" "maybe type" "temp"
        (650027 'move' call_tmp[650024](117078 call chpl__getActualDomain value[117056]))
        unknown call_tmp[650031] "expr temp" "maybe param" "maybe type" "temp"
        (650034 'move' call_tmp[650031](117083 call(117079 call (partial) isDefaultRectangular _mt[243] call_tmp[650024])))
        (564519 'move' tmp[564517](424254 call isTrue call_tmp[650031]))
        (564524 'move' tmp[564509](564521 '_paramFoldLogical' tmp[564510] tmp[564517]))
      }
      {
        (564529 'move' tmp[564509](564526 '_paramFoldLogical' tmp[564510] 0))
      }
      (542797 'init var' isDRView[117086] tmp[564509])
      (117089 'end of statement' value[117056] value[117056])
      unknown tmp[424271] "maybe param" "temp"
      (424282 'move' tmp[424271] isDR[117067])
      unknown call_tmp[650036] "expr temp" "maybe param" "maybe type" "temp"
      (650039 'move' call_tmp[650036](424284 call _cond_invalid tmp[424271]))
      if call_tmp[650036]
      {
        (424287 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564536] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564537] "maybe param" "temp"
      unknown call_tmp[650041] "expr temp" "maybe param" "maybe type" "temp"
      (650044 'move' call_tmp[650041](424272 call isTrue tmp[424271]))
      (564542 'move' tmp[564537](564540 call _cond_test call_tmp[650041]))
      if tmp[564537]
      {
        (564547 'move' tmp[564536](564544 '_paramFoldLogical' tmp[564537] 1))
      }
      {
        unknown tmp[564549] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564551 'move' tmp[564549](424276 call isTrue isDRView[117086]))
        (564556 'move' tmp[564536](564553 '_paramFoldLogical' tmp[564537] tmp[564549]))
      }
      (516104 'move' ret[516099](516103 'deref' tmp[564536]))
      gotoReturn _end_chpl__isDROrDRView[516097] _end_chpl__isDROrDRView[516097]
    }
    {
      unknown tmp[424334] "maybe param" "temp"
      (424345 'move' tmp[424334](117099 call isArray arg[117028]))
      unknown call_tmp[650046] "expr temp" "maybe param" "maybe type" "temp"
      (650049 'move' call_tmp[650046](424347 call _cond_invalid tmp[424334]))
      if call_tmp[650046]
      {
        (424350 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564563] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564564] "maybe param" "temp"
      unknown call_tmp[650051] "expr temp" "maybe param" "maybe type" "temp"
      (650054 'move' call_tmp[650051](424335 call isTrue tmp[424334]))
      (564569 'move' tmp[564564](564567 call _cond_test call_tmp[650051]))
      if tmp[564564]
      {
        (564574 'move' tmp[564563](564571 '_paramFoldLogical' tmp[564564] 1))
      }
      {
        unknown tmp[564576] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650056] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (650059 'move' call_tmp[650056](117102 'typeof' arg[117028]))
        unknown call_tmp[650061] "expr temp" "maybe param" "maybe type" "temp"
        (650064 'move' call_tmp[650061](354329 'is_subtype' BaseArr[382360](?) call_tmp[650056]))
        (564578 'move' tmp[564576](424339 call isTrue call_tmp[650061]))
        (564583 'move' tmp[564563](564580 '_paramFoldLogical' tmp[564564] tmp[564576]))
      }
      unknown call_tmp[650066] "expr temp" "maybe param" "maybe type" "temp"
      (650069 'move' call_tmp[650066](117182 call _cond_test tmp[564563]))
      if call_tmp[650066]
      {
        const value[117120] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[564590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564591] "maybe param" "temp"
        unknown call_tmp[650071] "expr temp" "maybe param" "maybe type" "temp"
        (650074 'move' call_tmp[650071](117111 call isArray arg[117028]))
        (564596 'move' tmp[564591](564594 call _cond_test call_tmp[650071]))
        if tmp[564591]
        {
          unknown tmp[564598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564600 'move' tmp[564598](117113 call _value _mt[243] arg[117028]))
          (564605 'move' tmp[564590](564602 '_paramFoldLogical' tmp[564591] tmp[564598]))
        }
        {
          (564610 'move' tmp[564590](564607 '_paramFoldLogical' tmp[564591] arg[117028]))
        }
        (542799 'init var' value[117120] tmp[564590])
        (117123 'end of statement')
        unknown call_tmp[650080] "maybe param" "maybe type" "temp"
        (650083 'move' call_tmp[650080](117130 call(117126 call (partial) isDefaultRectangular _mt[243] value[117120])))
        unknown isDR[117131] "dead at end of block" "param"
        (542801 'init var' isDR[117131] call_tmp[650080])
        (117134 'end of statement')
        unknown tmp[424292] "maybe param" "temp"
        (424303 'move' tmp[424292](117138 call chpl__isArrayView value[117120]))
        unknown call_tmp[650085] "expr temp" "maybe param" "maybe type" "temp"
        (650088 'move' call_tmp[650085](424305 call _cond_invalid tmp[424292]))
        if call_tmp[650085]
        {
          (424308 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[117150] "dead at end of block" "param"
        unknown tmp[564617] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564618] "maybe param" "temp"
        unknown call_tmp[650090] "expr temp" "maybe param" "maybe type" "temp"
        (650093 'move' call_tmp[650090](424293 call isTrue tmp[424292]))
        (564623 'move' tmp[564618](564621 call _cond_test call_tmp[650090]))
        if tmp[564618]
        {
          unknown tmp[564625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[650095] "expr temp" "maybe param" "maybe type" "temp"
          (650098 'move' call_tmp[650095](117142 call chpl__getActualArray value[117120]))
          unknown call_tmp[650102] "expr temp" "maybe param" "maybe type" "temp"
          (650105 'move' call_tmp[650102](117147 call(117143 call (partial) isDefaultRectangular _mt[243] call_tmp[650095])))
          (564627 'move' tmp[564625](424296 call isTrue call_tmp[650102]))
          (564632 'move' tmp[564617](564629 '_paramFoldLogical' tmp[564618] tmp[564625]))
        }
        {
          (564637 'move' tmp[564617](564634 '_paramFoldLogical' tmp[564618] 0))
        }
        (542803 'init var' isDRView[117150] tmp[564617])
        (117153 'end of statement' value[117120] value[117120])
        unknown tmp[424313] "maybe param" "temp"
        (424324 'move' tmp[424313] isDR[117131])
        unknown call_tmp[650107] "expr temp" "maybe param" "maybe type" "temp"
        (650110 'move' call_tmp[650107](424326 call _cond_invalid tmp[424313]))
        if call_tmp[650107]
        {
          (424329 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[564644] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564645] "maybe param" "temp"
        unknown call_tmp[650112] "expr temp" "maybe param" "maybe type" "temp"
        (650115 'move' call_tmp[650112](424314 call isTrue tmp[424313]))
        (564650 'move' tmp[564645](564648 call _cond_test call_tmp[650112]))
        if tmp[564645]
        {
          (564655 'move' tmp[564644](564652 '_paramFoldLogical' tmp[564645] 1))
        }
        {
          unknown tmp[564657] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564659 'move' tmp[564657](424318 call isTrue isDRView[117150]))
          (564664 'move' tmp[564644](564661 '_paramFoldLogical' tmp[564645] tmp[564657]))
        }
        (516109 'move' ret[516099](516108 'deref' tmp[564644]))
        gotoReturn _end_chpl__isDROrDRView[516097] _end_chpl__isDROrDRView[516097]
      }
      {
        (117179 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
    label _end_chpl__isDROrDRView[516097]
    (516101 return ret[516099])
  }
  function chpl__isDomainView[117198](arg dom[117196]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516115] "RVV" "param" "temp"
    const value[117212] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564671] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564672] "maybe param" "temp"
    unknown call_tmp[650117] "expr temp" "maybe param" "maybe type" "temp"
    (650120 'move' call_tmp[650117](117203 call isDomain dom[117196]))
    (564677 'move' tmp[564672](564675 call _cond_test call_tmp[650117]))
    if tmp[564672]
    {
      unknown tmp[564679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564681 'move' tmp[564679](117205 call _value _mt[243] dom[117196]))
      (564686 'move' tmp[564671](564683 '_paramFoldLogical' tmp[564672] tmp[564679]))
    }
    {
      (564691 'move' tmp[564671](564688 '_paramFoldLogical' tmp[564672] dom[117196]))
    }
    (542805 'init var' value[117212] tmp[564671])
    (117215 'end of statement')
    unknown call_tmp[650126] "maybe param" "maybe type" "temp"
    (650129 'move' call_tmp[650126](117224 call(117220 call (partial) isSliceDomainView _mt[243] value[117212])))
    unknown isSlice[117225] "dead at end of block" "param"
    (542807 'init var' isSlice[117225] call_tmp[650126])
    (117228 'end of statement')
    unknown call_tmp[650133] "maybe param" "maybe type" "temp"
    (650136 'move' call_tmp[650133](117236 call(117232 call (partial) isRankChangeDomainView _mt[243] value[117212])))
    unknown isRankChange[117237] "dead at end of block" "param"
    (542809 'init var' isRankChange[117237] call_tmp[650133])
    (117240 'end of statement')
    unknown call_tmp[650140] "maybe param" "maybe type" "temp"
    (650143 'move' call_tmp[650140](117248 call(117244 call (partial) isReindexDomainView _mt[243] value[117212])))
    unknown isReindex[117249] "dead at end of block" "param"
    (542811 'init var' isReindex[117249] call_tmp[650140])
    (117252 'end of statement' value[117212] value[117212] value[117212])
    unknown tmp[424376] "maybe param" "temp"
    unknown tmp[424397] "maybe param" "temp"
    (424408 'move' tmp[424397] isSlice[117225])
    unknown call_tmp[650145] "expr temp" "maybe param" "maybe type" "temp"
    (650148 'move' call_tmp[650145](424410 call _cond_invalid tmp[424397]))
    if call_tmp[650145]
    {
      (424413 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564699] "maybe param" "temp"
    unknown call_tmp[650150] "expr temp" "maybe param" "maybe type" "temp"
    (650153 'move' call_tmp[650150](424398 call isTrue tmp[424397]))
    (564704 'move' tmp[564699](564702 call _cond_test call_tmp[650150]))
    if tmp[564699]
    {
      (564709 'move' tmp[564698](564706 '_paramFoldLogical' tmp[564699] 1))
    }
    {
      unknown tmp[564711] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564713 'move' tmp[564711](424402 call isTrue isRankChange[117237]))
      (564718 'move' tmp[564698](564715 '_paramFoldLogical' tmp[564699] tmp[564711]))
    }
    (424387 'move' tmp[424376] tmp[564698])
    unknown call_tmp[650155] "expr temp" "maybe param" "maybe type" "temp"
    (650158 'move' call_tmp[650155](424389 call _cond_invalid tmp[424376]))
    if call_tmp[650155]
    {
      (424392 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564726] "maybe param" "temp"
    unknown call_tmp[650160] "expr temp" "maybe param" "maybe type" "temp"
    (650163 'move' call_tmp[650160](424377 call isTrue tmp[424376]))
    (564731 'move' tmp[564726](564729 call _cond_test call_tmp[650160]))
    if tmp[564726]
    {
      (564736 'move' tmp[564725](564733 '_paramFoldLogical' tmp[564726] 1))
    }
    {
      unknown tmp[564738] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564740 'move' tmp[564738](424381 call isTrue isReindex[117249]))
      (564745 'move' tmp[564725](564742 '_paramFoldLogical' tmp[564726] tmp[564738]))
    }
    (516120 'move' ret[516115](516119 'deref' tmp[564725]))
    (516117 return ret[516115])
  }
  function chpl__getActualDomain[117268](arg dom[117266]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516124] "RVV" "temp"
    unknown value[117282] "dead at end of block" "insert auto destroy"
    unknown tmp[564752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564753] "maybe param" "temp"
    unknown call_tmp[650165] "expr temp" "maybe param" "maybe type" "temp"
    (650168 'move' call_tmp[650165](117273 call isDomain dom[117266]))
    (564758 'move' tmp[564753](564756 call _cond_test call_tmp[650165]))
    if tmp[564753]
    {
      unknown tmp[564760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564762 'move' tmp[564760](117275 call _value _mt[243] dom[117266]))
      (564767 'move' tmp[564752](564764 '_paramFoldLogical' tmp[564753] tmp[564760]))
    }
    {
      (564772 'move' tmp[564752](564769 '_paramFoldLogical' tmp[564753] dom[117266]))
    }
    (542813 'init var' value[117282] tmp[564752])
    (117285 'end of statement')
    unknown ret[117303] "dead at end of block" "insert auto destroy"
    unknown tmp[564779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564780] "maybe param" "temp"
    unknown call_tmp[650172] "expr temp" "maybe param" "maybe type" "temp"
    (650175 'move' call_tmp[650172](117290 call chpl__isDomainView value[117282]))
    (564785 'move' tmp[564780](564783 call _cond_test call_tmp[650172]))
    if tmp[564780]
    {
      unknown tmp[564787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564789 'move' tmp[564787](117298 call(117294 call (partial) _getActualDomain _mt[243] value[117282])))
      (564794 'move' tmp[564779](564791 '_paramFoldLogical' tmp[564780] tmp[564787]))
    }
    {
      (564799 'move' tmp[564779](564796 '_paramFoldLogical' tmp[564780] value[117282]))
    }
    (542815 'init var' ret[117303] tmp[564779])
    (117306 'end of statement' value[117282] value[117282] value[117282])
    (516129 'move' ret[516124](516128 'deref' ret[117303]))
    gotoReturn _end_chpl__getActualDomain[516122] _end_chpl__getActualDomain[516122]
    (479424 'end of statement' ret[117303])
    label _end_chpl__getActualDomain[516122]
    (516126 return ret[516124])
  }
  function chpl__isRectangularDomType[117316](arg domainType[117314]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516135] "RVV" "param" "temp"
    unknown dom[117319] "dead at end of block" "insert auto destroy"
    (542817 'default init var' dom[117319] domainType[117314])
    (117322 'end of statement')
    unknown tmp[424418] "maybe param" "temp"
    (424429 'move' tmp[424418](117327 call isDomainType domainType[117314]))
    unknown call_tmp[650179] "expr temp" "maybe param" "maybe type" "temp"
    (650182 'move' call_tmp[650179](424431 call _cond_invalid tmp[424418]))
    if call_tmp[650179]
    {
      (424434 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564807] "maybe param" "temp"
    unknown call_tmp[650184] "expr temp" "maybe param" "maybe type" "temp"
    (650187 'move' call_tmp[650184](424419 call isTrue tmp[424418]))
    (564812 'move' tmp[564807](564810 call _cond_test call_tmp[650184]))
    if tmp[564807]
    {
      unknown tmp[564814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650189] "expr temp" "maybe param" "maybe type" "temp"
      (650192 'move' call_tmp[650189](117331 call isRectangularDom dom[117319]))
      (564816 'move' tmp[564814](424422 call isTrue call_tmp[650189]))
      (564821 'move' tmp[564806](564818 '_paramFoldLogical' tmp[564807] tmp[564814]))
    }
    {
      (564826 'move' tmp[564806](564823 '_paramFoldLogical' tmp[564807] 0))
    }
    (516140 'move' ret[516135](516139 'deref' tmp[564806]))
    gotoReturn _end_chpl__isRectangularDomType[516133] _end_chpl__isRectangularDomType[516133]
    (479427 'end of statement' dom[117319])
    label _end_chpl__isRectangularDomType[516133]
    (516137 return ret[516135])
  }
  function chpl__isSparseDomType[117342](arg domainType[117340]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516146] "RVV" "param" "temp"
    unknown dom[117345] "dead at end of block" "insert auto destroy"
    (542819 'default init var' dom[117345] domainType[117340])
    (117348 'end of statement')
    unknown call_tmp[650194] "expr temp" "maybe param" "maybe type" "temp"
    (650197 'move' call_tmp[650194](117353 call isSparseDom dom[117345]))
    (516151 'move' ret[516146](516150 'deref' call_tmp[650194]))
    gotoReturn _end_chpl__isSparseDomType[516144] _end_chpl__isSparseDomType[516144]
    (479429 'end of statement' dom[117345])
    label _end_chpl__isSparseDomType[516144]
    (516148 return ret[516146])
  }
  function chpl__parentDomainFromDomainRuntimeType[117362](arg domainType[117360]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516157] "RVV" "temp"
    unknown call_tmp[650199] "maybe param" "maybe type" "temp"
    (650202 'move' call_tmp[650199](117398 'get runtime type field' domainType[117360] "parentDom"))
    unknown parentDom[117399] "dead at end of block" "no auto destroy" "no copy"
    (542821 'init var' parentDom[117399] call_tmp[650199])
    (117402 'end of statement')
    unknown call_tmp[650206] "expr temp" "maybe param" "maybe type" "temp"
    (650209 'move' call_tmp[650206](117406 call _value _mt[243] parentDom[117399]))
    unknown call_tmp[650211] "expr temp" "maybe param" "maybe type" "temp"
    (650214 'move' call_tmp[650211](117410 call _getDomain call_tmp[650206]))
    (516162 'move' ret[516157](516161 'deref' call_tmp[650211]))
    gotoReturn _end_chpl__parentDomainFromDomainRuntimeType[516155] _end_chpl__parentDomainFromDomainRuntimeType[516155]
    (479431 'end of statement' parentDom[117399])
    label _end_chpl__parentDomainFromDomainRuntimeType[516155]
    (516159 return ret[516157])
  }
  function chpl__distributed[117421](arg d[117418]:_distribution[118973](?), arg domainType[117423]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516168] "RVV" "temp" "type variable"
    unknown call_tmp[650216] "expr temp" "maybe param" "maybe type" "temp"
    (650219 'move' call_tmp[650216](117428 call isDomainType domainType[117423]))
    unknown call_tmp[650221] "expr temp" "maybe param" "maybe type" "temp"
    (650224 'move' call_tmp[650221](117429 call ! call_tmp[650216]))
    unknown call_tmp[650226] "expr temp" "maybe param" "maybe type" "temp"
    (650229 'move' call_tmp[650226](117456 call _cond_test call_tmp[650221]))
    if call_tmp[650226]
    {
      unknown call_tmp[650231] "expr temp" "maybe param" "maybe type" "temp"
      (650234 'move' call_tmp[650231](117452 call _cast string[26] domainType[117423]))
      (117454 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[650231])
    }
    unknown call_tmp[650236] "expr temp" "maybe param" "maybe type" "temp"
    (650239 'move' call_tmp[650236](117465 call chpl__isRectangularDomType domainType[117423]))
    unknown call_tmp[650241] "expr temp" "maybe param" "maybe type" "temp"
    (650244 'move' call_tmp[650241](117549 call _cond_test call_tmp[650236]))
    if call_tmp[650241]
    {
      unknown dom[117467] "dead at end of block" "insert auto destroy"
      (542823 'default init var' dom[117467] domainType[117423])
      (117470 'end of statement')
      unknown call_tmp[650248] "expr temp" "maybe param" "maybe type" "temp"
      (650251 'move' call_tmp[650248](117476 call _value _mt[243] dom[117467]))
      unknown call_tmp[650255] "expr temp" "maybe param" "maybe type" "temp"
      (650258 'move' call_tmp[650255](117479 call rank _mt[243] call_tmp[650248]))
      unknown call_tmp[650262] "expr temp" "maybe param" "maybe type" "temp"
      (650265 'move' call_tmp[650262](117483 call _value _mt[243] dom[117467]))
      unknown call_tmp[650269] "expr temp" "maybe param" "maybe type" "temp"
      (650272 'move' call_tmp[650269](117486 call idxType _mt[243] call_tmp[650262]))
      unknown call_tmp[650276] "expr temp" "maybe param" "maybe type" "temp"
      (650279 'move' call_tmp[650276](117490 call _value _mt[243] dom[117467]))
      unknown call_tmp[650283] "expr temp" "maybe param" "maybe type" "temp"
      (650286 'move' call_tmp[650283](117493 call stridable _mt[243] call_tmp[650276]))
      unknown call_tmp[650288] "expr temp" "maybe param" "maybe type" "temp"
      (650291 'move' call_tmp[650288](117496 call chpl__buildDomainRuntimeType d[117418] call_tmp[650255] call_tmp[650269] call_tmp[650283]))
      (516173 'move' ret[516168](516172 'deref' call_tmp[650288]))
      gotoReturn _end_chpl__distributed[516166] _end_chpl__distributed[516166]
      (479434 'end of statement' dom[117467] dom[117467] dom[117467])
    }
    {
      unknown call_tmp[650293] "expr temp" "maybe param" "maybe type" "temp"
      (650296 'move' call_tmp[650293](117502 call chpl__isSparseDomType domainType[117423]))
      unknown call_tmp[650298] "expr temp" "maybe param" "maybe type" "temp"
      (650301 'move' call_tmp[650298](117545 call _cond_test call_tmp[650293]))
      if call_tmp[650298]
      {
        const parentDom[117507] "dead at end of block" "const" "ref var"
        unknown call_tmp[650303] "expr temp" "maybe param" "maybe type" "temp"
        (650306 'move' call_tmp[650303](117506 call chpl__parentDomainFromDomainRuntimeType domainType[117423]))
        (542826 'move' parentDom[117507](542825 'addr of' call_tmp[650303]))
        (117510 'end of statement')
        unknown call_tmp[650308] "expr temp" "maybe param" "maybe type" "temp"
        (650311 'move' call_tmp[650308](117516 call chpl__buildSparseDomainRuntimeType d[117418] parentDom[117507]))
        (516178 'move' ret[516168](516177 'deref' call_tmp[650308]))
        gotoReturn _end_chpl__distributed[516166] _end_chpl__distributed[516166]
        (479438 'end of statement' parentDom[117507])
      }
      {
        unknown dom[117520] "dead at end of block" "insert auto destroy"
        (542828 'default init var' dom[117520] domainType[117423])
        (117523 'end of statement')
        unknown call_tmp[650315] "expr temp" "maybe param" "maybe type" "temp"
        (650318 'move' call_tmp[650315](117529 call _value _mt[243] dom[117520]))
        unknown call_tmp[650322] "expr temp" "maybe param" "maybe type" "temp"
        (650325 'move' call_tmp[650322](117532 call idxType _mt[243] call_tmp[650315]))
        unknown call_tmp[650329] "expr temp" "maybe param" "maybe type" "temp"
        (650332 'move' call_tmp[650329](117536 call _value _mt[243] dom[117520]))
        unknown call_tmp[650336] "expr temp" "maybe param" "maybe type" "temp"
        (650339 'move' call_tmp[650336](117539 call parSafe _mt[243] call_tmp[650329]))
        unknown call_tmp[650341] "expr temp" "maybe param" "maybe type" "temp"
        (650344 'move' call_tmp[650341](117542 call chpl__buildDomainRuntimeType d[117418] call_tmp[650322] call_tmp[650336]))
        (516183 'move' ret[516168](516182 'deref' call_tmp[650341]))
        gotoReturn _end_chpl__distributed[516166] _end_chpl__distributed[516166]
        (479440 'end of statement' dom[117520] dom[117520])
      }
    }
    label _end_chpl__distributed[516166]
    (516170 return ret[516168])
  }
  function chpl__distributionFromDomainRuntimeType[117560](arg rtt[117558]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516189] "RVV" "temp"
    unknown call_tmp[650346] "maybe param" "maybe type" "temp"
    (650349 'move' call_tmp[650346](117580 'get runtime type field' rtt[117558] "dist"))
    unknown dist[117581] "dead at end of block" "no auto destroy" "no copy"
    (542830 'init var' dist[117581] call_tmp[650346])
    (117584 'end of statement')
    unknown call_tmp[650353] "expr temp" "maybe param" "maybe type" "temp"
    (650356 'move' call_tmp[650353](117588 call _value _mt[243] dist[117581]))
    unknown call_tmp[650358] "expr temp" "maybe param" "maybe type" "temp"
    (650361 'move' call_tmp[650358](117592 call _getDistribution call_tmp[650353]))
    (516194 'move' ret[516189](516193 'deref' call_tmp[650358]))
    gotoReturn _end_chpl__distributionFromDomainRuntimeType[516187] _end_chpl__distributionFromDomainRuntimeType[516187]
    (479443 'end of statement' dist[117581])
    label _end_chpl__distributionFromDomainRuntimeType[516187]
    (516191 return ret[516189])
  }
  function chpl__domainFromArrayRuntimeType[117601](arg rtt[117599]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516200] "RVV" "temp"
    unknown call_tmp[650363] "maybe param" "maybe type" "temp"
    (650366 'move' call_tmp[650363](117607 'get runtime type field' rtt[117599] "dom"))
    unknown dom[117608] "dead at end of block" "no auto destroy" "no copy"
    (542832 'init var' dom[117608] call_tmp[650363])
    (117611 'end of statement')
    unknown call_tmp[650370] "expr temp" "maybe param" "maybe type" "temp"
    (650373 'move' call_tmp[650370](117615 call _value _mt[243] dom[117608]))
    unknown call_tmp[650375] "expr temp" "maybe param" "maybe type" "temp"
    (650378 'move' call_tmp[650375](117619 call _getDomain call_tmp[650370]))
    (516205 'move' ret[516200](516204 'deref' call_tmp[650375]))
    gotoReturn _end_chpl__domainFromArrayRuntimeType[516198] _end_chpl__domainFromArrayRuntimeType[516198]
    (479445 'end of statement' dom[117608])
    label _end_chpl__domainFromArrayRuntimeType[516198]
    (516202 return ret[516200])
  }
  function chpl__eltTypeFromArrayRuntimeType[117628](arg rtt[117626]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516211] "RVV" "temp" "type variable"
    unknown eltType[117649] "dead at end of block" "no auto destroy" "no copy" "type variable"(117648 'get runtime type field' rtt[117626] "eltType")
    (542837 'move' eltType[117649](542834 'get runtime type field' rtt[117626] "eltType"))
    (479447 'end of statement')
    (516216 'move' ret[516211](516215 'deref' eltType[117649]))
    gotoReturn _end_chpl__eltTypeFromArrayRuntimeType[516209] _end_chpl__eltTypeFromArrayRuntimeType[516209]
    (479448 'end of statement' eltType[117649])
    label _end_chpl__eltTypeFromArrayRuntimeType[516209]
    (516213 return ret[516211])
  }
  function chpl__instanceTypeFromArrayRuntimeType[117662](arg rtt[117660]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    unknown ret[516222] "RVV" "temp" "type variable"
    (117699 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (479450 'end of statement')
    unknown call_tmp[650380] "expr temp" "maybe param" "maybe type" "temp"
    (650383 'move' call_tmp[650380](117706 'static field type' rtt[117660] "_instance"))
    (516227 'move' ret[516222](516226 'deref' call_tmp[650380]))
    (516224 return ret[516222])
  }
  function chpl__buildIndexType[117717](param arg rank[117714]:int(64)[13], arg idxType[117719]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516231] "RVV" "temp" "type variable"
    (516236 'move' ret[516231](516235 'deref' idxType[117719]))
    (516233 return ret[516231])
  }
  where {
    (117723 call == rank[117714] 1)
  }
  function chpl__buildIndexType[117738](param arg rank[117735]:int(64)[13], arg idxType[117740]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516240] "RVV" "temp" "type variable"
    unknown call_tmp[650385] "expr temp" "maybe param" "maybe type" "temp"
    (650388 'move' call_tmp[650385](117748 call * rank[117735] idxType[117740]))
    (516245 'move' ret[516240](516244 'deref' call_tmp[650385]))
    (516242 return ret[516240])
  }
  where {
    (117744 call > rank[117735] 1)
  }
  function chpl__buildIndexType[117762](param arg rank[117759]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[516249] "RVV" "temp" "type variable"
    unknown call_tmp[650390] "expr temp" "maybe param" "maybe type" "temp"
    (650393 'move' call_tmp[650390](117768 call chpl__buildIndexType rank[117759] int(64)[13]))
    (516254 'move' ret[516249](516253 'deref' call_tmp[650390]))
    (516251 return ret[516249])
  }
  function chpl__buildIndexType[117780](arg d[117777]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[516258] "RVV" "temp" "type variable"
    unknown call_tmp[650397] "expr temp" "maybe param" "maybe type" "temp"
    (650400 'move' call_tmp[650397](117784 call rank _mt[243] d[117777]))
    unknown call_tmp[650404] "expr temp" "maybe param" "maybe type" "temp"
    (650407 'move' call_tmp[650404](117789 call _value _mt[243] d[117777]))
    unknown call_tmp[650411] "expr temp" "maybe param" "maybe type" "temp"
    (650414 'move' call_tmp[650411](117792 call idxType _mt[243] call_tmp[650404]))
    unknown call_tmp[650416] "expr temp" "maybe param" "maybe type" "temp"
    (650419 'move' call_tmp[650416](117795 call chpl__buildIndexType call_tmp[650397] call_tmp[650411]))
    (516263 'move' ret[516258](516262 'deref' call_tmp[650416]))
    (516260 return ret[516258])
  }
  function isRectangularDom[117807](arg d[117804]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516267] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[492150] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650423] "expr temp" "maybe param" "maybe type" "temp"
      (650426 'move' call_tmp[650423](117812 call _value _mt[243] d[117804]))
      (492154 'move' call_type_tmp[492150](117815 'typeof' call_tmp[650423]))
    }
    unknown call_tmp[650428] "expr temp" "maybe param" "maybe type" "temp"
    (650431 'move' call_tmp[650428](117817 call _to_borrowed call_type_tmp[492150]))
    unknown call_tmp[650433] "expr temp" "maybe param" "maybe type" "temp"
    (650436 'move' call_tmp[650433](354330 'is_subtype' BaseRectangularDom[382283](?) call_tmp[650428]))
    (516272 'move' ret[516267](516271 'deref' call_tmp[650433]))
    (516269 return ret[516267])
  }
  function isRectangularArr[117834](arg a[117831]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516276] "RVV" "param" "temp"
    unknown call_tmp[650440] "expr temp" "maybe param" "maybe type" "temp"
    (650443 'move' call_tmp[650440](117838 call _dom _mt[243] a[117831]))
    unknown call_tmp[650445] "expr temp" "maybe param" "maybe type" "temp"
    (650448 'move' call_tmp[650445](117842 call isRectangularDom call_tmp[650440]))
    (516281 'move' ret[516276](516280 'deref' call_tmp[650445]))
    (516278 return ret[516276])
  }
  function isIrregularDom[117854](arg d[117851]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516285] "RVV" "param" "temp"
    unknown tmp[424439] "maybe param" "temp"
    (424450 'move' tmp[424439](117859 call isSparseDom d[117851]))
    unknown call_tmp[650450] "expr temp" "maybe param" "maybe type" "temp"
    (650453 'move' call_tmp[650450](424452 call _cond_invalid tmp[424439]))
    if call_tmp[650450]
    {
      (424455 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564834] "maybe param" "temp"
    unknown call_tmp[650455] "expr temp" "maybe param" "maybe type" "temp"
    (650458 'move' call_tmp[650455](424440 call isTrue tmp[424439]))
    (564839 'move' tmp[564834](564837 call _cond_test call_tmp[650455]))
    if tmp[564834]
    {
      (564844 'move' tmp[564833](564841 '_paramFoldLogical' tmp[564834] 1))
    }
    {
      unknown tmp[564846] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650460] "expr temp" "maybe param" "maybe type" "temp"
      (650463 'move' call_tmp[650460](117863 call isAssociativeDom d[117851]))
      (564848 'move' tmp[564846](424444 call isTrue call_tmp[650460]))
      (564853 'move' tmp[564833](564850 '_paramFoldLogical' tmp[564834] tmp[564846]))
    }
    (516290 'move' ret[516285](516289 'deref' tmp[564833]))
    (516287 return ret[516285])
  }
  function isIrregularArr[117879](arg a[117876]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516294] "RVV" "param" "temp"
    unknown call_tmp[650467] "expr temp" "maybe param" "maybe type" "temp"
    (650470 'move' call_tmp[650467](117883 call _dom _mt[243] a[117876]))
    unknown call_tmp[650472] "expr temp" "maybe param" "maybe type" "temp"
    (650475 'move' call_tmp[650472](117887 call isIrregularDom call_tmp[650467]))
    (516299 'move' ret[516294](516298 'deref' call_tmp[650472]))
    (516296 return ret[516294])
  }
  function isAssociativeDom[117899](arg d[117896]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516321] "RVV" "param" "temp"
    function isAssociativeDomClass[117907](arg dc[117904]:BaseAssociativeDom[382288](?)) param : _unknown[51]
    {
      unknown ret[516303] "RVV" "param" "temp"
      (516308 'move' ret[516303](516307 'deref' 1))
      (516305 return ret[516303])
    }
    function isAssociativeDomClass[117920](arg dc[117918]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516312] "RVV" "param" "temp"
      (516317 'move' ret[516312](516316 'deref' 0))
      (516314 return ret[516312])
    }
    unknown call_tmp[650479] "expr temp" "maybe param" "maybe type" "temp"
    (650482 'move' call_tmp[650479](117931 call _value _mt[243] d[117896]))
    unknown call_tmp[650484] "expr temp" "maybe param" "maybe type" "temp"
    (650487 'move' call_tmp[650484](117935 call _to_borrowed call_tmp[650479]))
    unknown call_tmp[650489] "expr temp" "maybe param" "maybe type" "temp"
    (650492 'move' call_tmp[650489](117937 call isAssociativeDomClass call_tmp[650484]))
    (516326 'move' ret[516321](516325 'deref' call_tmp[650489]))
    (516323 return ret[516321])
  }
  function isAssociativeArr[117950](arg a[117947]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516330] "RVV" "param" "temp"
    unknown call_tmp[650496] "expr temp" "maybe param" "maybe type" "temp"
    (650499 'move' call_tmp[650496](117954 call _dom _mt[243] a[117947]))
    unknown call_tmp[650501] "expr temp" "maybe param" "maybe type" "temp"
    (650504 'move' call_tmp[650501](117958 call isAssociativeDom call_tmp[650496]))
    (516335 'move' ret[516330](516334 'deref' call_tmp[650501]))
    (516332 return ret[516330])
  }
  function isSparseDom[117970](arg d[117967]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516357] "RVV" "param" "temp"
    function isSparseDomClass[117978](arg dc[117975]:BaseSparseDom[382293](?)) param : _unknown[51]
    {
      unknown ret[516339] "RVV" "param" "temp"
      (516344 'move' ret[516339](516343 'deref' 1))
      (516341 return ret[516339])
    }
    function isSparseDomClass[117991](arg dc[117989]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516348] "RVV" "param" "temp"
      (516353 'move' ret[516348](516352 'deref' 0))
      (516350 return ret[516348])
    }
    unknown call_tmp[650508] "expr temp" "maybe param" "maybe type" "temp"
    (650511 'move' call_tmp[650508](118001 call _value _mt[243] d[117967]))
    unknown call_tmp[650513] "expr temp" "maybe param" "maybe type" "temp"
    (650516 'move' call_tmp[650513](118005 call isSparseDomClass call_tmp[650508]))
    (516362 'move' ret[516357](516361 'deref' call_tmp[650513]))
    (516359 return ret[516357])
  }
  function isSparseArr[118018](arg a[118015]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516366] "RVV" "param" "temp"
    unknown call_tmp[650520] "expr temp" "maybe param" "maybe type" "temp"
    (650523 'move' call_tmp[650520](118022 call _dom _mt[243] a[118015]))
    unknown call_tmp[650525] "expr temp" "maybe param" "maybe type" "temp"
    (650528 'move' call_tmp[650525](118026 call isSparseDom call_tmp[650520]))
    (516371 'move' ret[516366](516370 'deref' call_tmp[650525]))
    (516368 return ret[516366])
  }
  function chpl__checkDomainsMatch[118040](arg a[118037]:_array[133594](?), arg b[118042]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650530] "expr temp" "maybe param" "maybe type" "temp"
    (650533 'move' call_tmp[650530](118086 call _cond_test 1))
    if call_tmp[650530]
    {
      unknown call_tmp[650537] "expr temp" "maybe param" "maybe type" "temp"
      (650540 'move' call_tmp[650537](118050 call _dom _mt[243] a[118037]))
      unknown call_tmp[650542] "expr temp" "maybe param" "maybe type" "temp"
      (650545 'move' call_tmp[650542](118054 call != call_tmp[650537] b[118042]))
      unknown call_tmp[650547] "expr temp" "maybe param" "maybe type" "temp"
      (650550 'move' call_tmp[650547](118081 call _cond_test call_tmp[650542]))
      if call_tmp[650547]
      {
        (118078 call boundsCheckHalt module=[255] HaltWrappers[210016] "domain mismatch on return")
        (359166 'referenced modules list' HaltWrappers[210016])
      }
    }
    (516373 return _void[55])
    (355152 'used modules list'(118045 'import' HaltWrappers[210016]))
  }
  function chpl__checkDomainsMatch[118098](arg a[118095]:_iteratorRecord[205](?), arg b[118100]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650552] "expr temp" "maybe param" "maybe type" "temp"
    (650555 'move' call_tmp[650552](118133 call _cond_test 1))
    if call_tmp[650552]
    {
      unknown tmp[118108] "dead at end of block" "insert auto destroy"
      (542839 'init var' tmp[118108] a[118095])
      (118111 'end of statement')
      unknown call_tmp[650559] "expr temp" "maybe param" "maybe type" "temp"
      (650562 'move' call_tmp[650559](118114 call _dom _mt[243] tmp[118108]))
      unknown call_tmp[650564] "expr temp" "maybe param" "maybe type" "temp"
      (650567 'move' call_tmp[650564](118118 call != call_tmp[650559] b[118100]))
      unknown call_tmp[650569] "expr temp" "maybe param" "maybe type" "temp"
      (650572 'move' call_tmp[650569](118129 call _cond_test call_tmp[650564]))
      if call_tmp[650569]
      {
        (118126 call boundsCheckHalt module=[255] HaltWrappers[210016] "domain mismatch on return")
        (359173 'referenced modules list' HaltWrappers[210016])
      }
    }
    (516375 return _void[55])
    (355154 'used modules list'(118103 'import' HaltWrappers[210016]))
  }
  function chpl__checkEltTypeMatch[118147](arg a[118144]:_array[133594](?), arg b[118149]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650576] "expr temp" "maybe param" "maybe type" "temp"
    (650579 'move' call_tmp[650576](118152 call eltType _mt[243] a[118144]))
    unknown call_tmp[650581] "expr temp" "maybe param" "maybe type" "temp"
    (650584 'move' call_tmp[650581](118156 call != call_tmp[650576] b[118149]))
    unknown call_tmp[650586] "expr temp" "maybe param" "maybe type" "temp"
    (650589 'move' call_tmp[650586](118192 call _cond_test call_tmp[650581]))
    if call_tmp[650586]
    {
      unknown call_tmp[650593] "expr temp" "maybe param" "maybe type" "temp"
      (650596 'move' call_tmp[650593](118178 call eltType _mt[243] a[118144]))
      unknown call_tmp[650598] "expr temp" "maybe param" "maybe type" "temp"
      (650601 'move' call_tmp[650598](118182 call _cast string[26] call_tmp[650593]))
      unknown call_tmp[650603] "expr temp" "maybe param" "maybe type" "temp"
      (650606 'move' call_tmp[650603](118187 call _cast string[26] b[118149]))
      (118189 call compilerError "array element type mismatch in return from " call_tmp[650598] " to " call_tmp[650603])
    }
    (516377 return _void[55])
  }
  function chpl__checkEltTypeMatch[118205](arg a[118202]:_iteratorRecord[205](?), arg b[118207]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650608] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650611 'move' call_tmp[650608](118211 'typeof' a[118202]))
    unknown eltType[118214] "dead at end of block" "insert auto destroy" "type variable"(118213 call iteratorToArrayElementType call_tmp[650608])
    unknown call_tmp[650613] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650616 'move' call_tmp[650613](542843 'typeof' a[118202]))
    (542845 'move' eltType[118214](542842 call iteratorToArrayElementType call_tmp[650613]))
    (479472 'end of statement')
    unknown call_tmp[650618] "expr temp" "maybe param" "maybe type" "temp"
    (650621 'move' call_tmp[650618](118220 call != eltType[118214] b[118207]))
    unknown call_tmp[650623] "expr temp" "maybe param" "maybe type" "temp"
    (650626 'move' call_tmp[650623](118237 call _cond_test call_tmp[650618]))
    if call_tmp[650623]
    {
      unknown call_tmp[650628] "expr temp" "maybe param" "maybe type" "temp"
      (650631 'move' call_tmp[650628](118227 call _cast string[26] eltType[118214]))
      unknown call_tmp[650633] "expr temp" "maybe param" "maybe type" "temp"
      (650636 'move' call_tmp[650633](118232 call _cast string[26] b[118207]))
      (118234 call compilerError "array element type mismatch in return from " call_tmp[650628] " to " call_tmp[650633])
      (479473 'end of statement' eltType[118214])
    }
    (516379 return _void[55])
  }
  type dmap[118245]
  function chpl__buildDistType[118252](arg t[118250]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516383] "RVV" "temp" "type variable"
    unknown x[118267] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650638] "expr temp" "maybe param" "maybe type" "temp"
    (650641 'move' call_tmp[650638](118265 call _to_unmanaged t[118250]))
    unknown call_tmp[650643] "expr temp" "maybe param" "maybe type" "temp"
    (650646 'move' call_tmp[650643](118266 'to nilable class from type' call_tmp[650638]))
    (542847 'default init var' x[118267] call_tmp[650643])
    (118270 'end of statement')
    unknown call_tmp[650648] "expr temp" "maybe param" "maybe type" "temp"
    (650651 'move' call_tmp[650648](118275 call postfix! x[118267]))
    unknown call_tmp[650653] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650656 'move' call_tmp[650653](747885 'new' _distribution[118973](?) call_tmp[650648]))
    unknown y[118279] "dead at end of block" "insert auto destroy"
    (542849 'init var' y[118279] call_tmp[650653])
    (118282 'end of statement' x[118267])
    unknown call_tmp[650658] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650661 'move' call_tmp[650658](118284 'typeof' y[118279]))
    (516388 'move' ret[516383](516387 'deref' call_tmp[650658]))
    gotoReturn _end_chpl__buildDistType[516381] _end_chpl__buildDistType[516381]
    (479476 'end of statement' y[118279])
    label _end_chpl__buildDistType[516381]
    (516385 return ret[516383])
  }
  where {
    unknown call_tmp[650663] "expr temp" "maybe param" "maybe type" "temp"
    (650666 'move' call_tmp[650663](118258 call _to_borrowed t[118250]))
    (354331 'is_subtype' BaseDist[382378](?) call_tmp[650663])
  }
  function chpl__buildDistType[118294](arg t[118292]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118315 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (516392 return _void[55])
  }
  function chpl__buildDistValue[118326](arg x[118323]:unmanaged[220](?)) : _unknown[51]
  {
    unknown ret[516396] "RVV" "temp"
    unknown call_tmp[650668] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650671 'move' call_tmp[650668](747886 'new' _distribution[118973](?) x[118323]))
    (516401 'move' ret[516396](516400 'deref' call_tmp[650668]))
    (516398 return ret[516396])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492156] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650675] "expr temp" "maybe param" "maybe type" "temp"
      (650678 'move' call_tmp[650675](118334 call(118330 call (partial) borrow _mt[243] x[118323])))
      (492160 'move' call_type_tmp[492156](118335 'typeof' call_tmp[650675]))
    }
    (354332 'is_subtype' BaseDist[382378](?) call_type_tmp[492156])
  }
  function chpl__buildDistValue[118356](in arg x[118353]:_owned[30](?)) : _unknown[51]
  {
    unknown ret[516405] "RVV" "temp"
    unknown call_tmp[650682] "expr temp" "maybe param" "maybe type" "temp"
    (650685 'move' call_tmp[650682](118376 call(118372 call (partial) release _mt[243] x[118353])))
    unknown call_tmp[650687] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650690 'move' call_tmp[650687](747887 'new' _distribution[118973](?) call_tmp[650682]))
    (516410 'move' ret[516405](516409 'deref' call_tmp[650687]))
    (516407 return ret[516405])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492162] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650694] "expr temp" "maybe param" "maybe type" "temp"
      (650697 'move' call_tmp[650694](118364 call(118360 call (partial) borrow _mt[243] x[118353])))
      (492166 'move' call_type_tmp[492162](118365 'typeof' call_tmp[650694]))
    }
    (354333 'is_subtype' BaseDist[382378](?) call_type_tmp[492162])
  }
  function chpl__buildDistValue[118389](arg x[118387]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118410 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (516412 return _void[55])
  }
  function _distribution[118973](?).init[118436](arg _mt[118977]:_MT[238], ref arg this[118975]:_distribution[118973](?), arg _pid[118433]:int(64)[13], arg _instance[118438]:_any[178](?), arg _unowned[118441]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461283] "temp"
    (461286 'init var' tmp[461283] _pid[118433] int(64)[13])
    (461288 'init field' this[118975] c"_pid" tmp[461283])
    (479482 'end of statement')
    unknown tmp[461292] "temp"
    (461294 'init var' tmp[461292] _instance[118438])
    (461296 'init field' this[118975] c"_instance" tmp[461292])
    (479483 'end of statement')
    unknown tmp[461300] "temp"
    (461303 'init var' tmp[461300] _unowned[118441] bool[10])
    (461305 'init field' this[118975] c"_unowned" tmp[461300])
    (479484 'end of statement')
    (516414 return _void[55])
  }
  function _distribution[118973](?).init[118479](arg _mt[118981]:_MT[238], ref arg this[118979]:_distribution[118973](?), arg value[118477]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461309] "temp"
    unknown tmp[564860] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564861] "maybe param" "temp"
    unknown call_tmp[650699] "expr temp" "maybe param" "maybe type" "temp"
    (650702 'move' call_tmp[650699](118488 call _isPrivatized value[118477]))
    (564866 'move' tmp[564861](564864 call _cond_test call_tmp[650699]))
    if tmp[564861]
    {
      unknown tmp[564868] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564870 'move' tmp[564868](118492 call _newPrivatizedClass value[118477]))
      (564875 'move' tmp[564860](564872 '_paramFoldLogical' tmp[564861] tmp[564868]))
    }
    {
      (564880 'move' tmp[564860](564877 '_paramFoldLogical' tmp[564861] nullPid[113718]))
    }
    (461312 'init var' tmp[461309] tmp[564860] int(64)[13])
    (461314 'init field' this[118979] c"_pid" tmp[461309])
    (479485 'end of statement')
    unknown call_tmp[650704] "maybe param" "maybe type" "temp"
    (650707 'move' call_tmp[650704](118508 call _to_unmanaged value[118477]))
    unknown tmp[461318] "temp"
    (461320 'init var' tmp[461318] call_tmp[650704])
    (461322 'init field' this[118979] c"_instance" tmp[461318])
    (479486 'end of statement')
    val tmp[461327]:bool[10] "temp"
    (461330 'default init var' tmp[461327] bool[10])
    (461332 '.=' this[118979] c"_unowned" tmp[461327])
    (479487 'end of statement')
    (516416 return _void[55])
  }
  function _distribution[118973](?).init=[118520](arg _mt[118985]:_MT[238], ref arg this[118983]:_distribution[118973](?), const  ref arg other[118517]:_distribution[118973](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650711] "expr temp" "maybe param" "maybe type" "temp"
    (650714 'move' call_tmp[650711](118523 call _value _mt[243] other[118517]))
    unknown call_tmp[650718] "maybe param" "maybe type" "temp"
    (650721 'move' call_tmp[650718](118532 call(118528 call (partial) dsiClone _mt[243] call_tmp[650711])))
    unknown value[118533] "dead at end of block" "insert auto destroy"
    (542851 'init var' value[118533] call_tmp[650718])
    (118536 'end of statement')
    (118544 call(118539 call (partial) init _mt[243] this[118983]) value[118533])
    (479488 'end of statement' value[118533])
    (516418 return _void[55])
  }
  function _distribution[118973](?)._value[118550](arg _mt[118989]:_MT[238], arg this[118987]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516422] "RVV" "temp"
    unknown call_tmp[650727] "expr temp" "maybe param" "maybe type" "temp"
    (650730 'move' call_tmp[650727](382561 call _instance _mt[243] this[118987]))
    unknown call_tmp[650732] "expr temp" "maybe param" "maybe type" "temp"
    (650735 'move' call_tmp[650732](118555 call _isPrivatized call_tmp[650727]))
    unknown call_tmp[650737] "expr temp" "maybe param" "maybe type" "temp"
    (650740 'move' call_tmp[650737](118569 call _cond_test call_tmp[650732]))
    if call_tmp[650737]
    {
      { scopeless type
        unknown call_type_tmp[492168] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[650744] "expr temp" "maybe param" "maybe type" "temp"
        (650747 'move' call_tmp[650744](382566 call _instance _mt[243] this[118987]))
        (492172 'move' call_type_tmp[492168](118558 'typeof' call_tmp[650744]))
      }
      unknown call_tmp[650751] "expr temp" "maybe param" "maybe type" "temp"
      (650754 'move' call_tmp[650751](382571 call _pid _mt[243] this[118987]))
      unknown call_tmp[650756] "expr temp" "maybe param" "maybe type" "temp"
      (650759 'move' call_tmp[650756](118561 call chpl_getPrivatizedCopy call_type_tmp[492168] call_tmp[650751]))
      (516427 'move' ret[516422](516426 'deref' call_tmp[650756]))
      gotoReturn _end__value[516420] _end__value[516420]
    }
    {
      unknown call_tmp[650763] "expr temp" "maybe param" "maybe type" "temp"
      (650766 'move' call_tmp[650763](382576 call _instance _mt[243] this[118987]))
      (516432 'move' ret[516422](516431 'deref' call_tmp[650763]))
      gotoReturn _end__value[516420] _end__value[516420]
    }
    label _end__value[516420]
    (516424 return ret[516422])
  }
  function _distribution[118973](?).chpl_forwarding_expr4__value[118578](arg _mt[118993]:_MT[238], arg this[118991]:_distribution[118973](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516438] "RVV" "temp"
    (516442 'move' ret[516438](382580 call _value _mt[243] this[118991]))
    (516440 return ret[516438])
  }
  function _distribution[118973](?)._do_destroy[118586](arg _mt[118997]:_MT[238], arg this[118995]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown tmp[424460] "maybe param" "temp"
    unknown call_tmp[650772] "expr temp" "maybe param" "maybe type" "temp"
    (650775 'move' call_tmp[650772](382585 call _unowned _mt[243] this[118995]))
    (424471 'move' tmp[424460](118589 call ! call_tmp[650772]))
    unknown call_tmp[650777] "expr temp" "maybe param" "maybe type" "temp"
    (650780 'move' call_tmp[650777](424473 call _cond_invalid tmp[424460]))
    if call_tmp[650777]
    {
      (424476 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564888] "maybe param" "temp"
    unknown call_tmp[650782] "expr temp" "maybe param" "maybe type" "temp"
    (650785 'move' call_tmp[650782](424461 call isTrue tmp[424460]))
    (564893 'move' tmp[564888](564891 call _cond_test call_tmp[650782]))
    if tmp[564888]
    {
      unknown tmp[564895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650789] "expr temp" "maybe param" "maybe type" "temp"
      (650792 'move' call_tmp[650789](359192 call _instance _mt[243] this[118995]))
      unknown call_tmp[650796] "expr temp" "maybe param" "maybe type" "temp"
      (650799 'move' call_tmp[650796](118598 call(118594 call (partial) singleton _mt[243] call_tmp[650789])))
      unknown call_tmp[650801] "expr temp" "maybe param" "maybe type" "temp"
      (650804 'move' call_tmp[650801](118599 call ! call_tmp[650796]))
      (564897 'move' tmp[564895](424464 call isTrue call_tmp[650801]))
      (564902 'move' tmp[564887](564899 '_paramFoldLogical' tmp[564888] tmp[564895]))
    }
    {
      (564907 'move' tmp[564887](564904 '_paramFoldLogical' tmp[564888] 0))
    }
    unknown call_tmp[650806] "expr temp" "maybe param" "maybe type" "temp"
    (650809 'move' call_tmp[650806](118647 call _cond_test tmp[564887]))
    if call_tmp[650806]
    {
      const tmp[118638] "const" "temp"
      unknown call_tmp[650813] "expr temp" "maybe param" "maybe type" "temp"
      (650816 'move' call_tmp[650813](382590 call _instance _mt[243] this[118995]))
      unknown call_tmp[650818] "expr temp" "maybe param" "maybe type" "temp"
      (650821 'move' call_tmp[650818](118635 '_wide_get_locale' call_tmp[650813]))
      (118640 'move' tmp[118638](118636 'deref' call_tmp[650818]))
      {
        {
          unknown call_tmp[650825] "expr temp" "maybe param" "maybe type" "temp"
          (650828 'move' call_tmp[650825](359197 call _instance _mt[243] this[118995]))
          unknown call_tmp[650832] "maybe param" "maybe type" "temp"
          (650835 'move' call_tmp[650832](118609 call(118605 call (partial) remove _mt[243] call_tmp[650825])))
          unknown distToFree[118610] "dead at end of block" "insert auto destroy"
          (542853 'init var' distToFree[118610] call_tmp[650832])
          (118613 'end of statement')
          unknown call_tmp[650837] "expr temp" "maybe param" "maybe type" "temp"
          (650840 'move' call_tmp[650837](118617 call != distToFree[118610] nil[44]))
          unknown call_tmp[650842] "expr temp" "maybe param" "maybe type" "temp"
          (650845 'move' call_tmp[650842](118631 call _cond_test call_tmp[650837]))
          if call_tmp[650842]
          {
            unknown call_tmp[650847] "expr temp" "maybe param" "maybe type" "temp"
            (650850 'move' call_tmp[650847](118621 call postfix! distToFree[118610]))
            unknown call_tmp[650854] "expr temp" "maybe param" "maybe type" "temp"
            (650857 'move' call_tmp[650854](382597 call _instance _mt[243] this[118995]))
            unknown call_tmp[650859] "expr temp" "maybe param" "maybe type" "temp"
            (650862 'move' call_tmp[650859](118627 call _isPrivatized call_tmp[650854]))
            (118628 call _delete_dist call_tmp[650847] call_tmp[650859])
            (479493 'end of statement' distToFree[118610])
          }
        }
        (118643 'on block' 0 tmp[118638])
      }
    }
    (516444 return _void[55])
  }
  function _distribution[118973](?).deinit[118656](arg _mt[119001]:_MT[238], arg this[118999]:_distribution[118973](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118660 call(382603 call (partial) _do_destroy _mt[243] this[118999]))
    (516446 return _void[55])
  }
  function _distribution[118973](?).clone[118667](arg _mt[119005]:_MT[238], arg this[119003]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516450] "RVV" "temp"
    unknown call_tmp[650868] "expr temp" "maybe param" "maybe type" "temp"
    (650871 'move' call_tmp[650868](359201 call _value _mt[243] this[119003]))
    unknown call_tmp[650875] "expr temp" "maybe param" "maybe type" "temp"
    (650878 'move' call_tmp[650875](118676 call(118672 call (partial) dsiClone _mt[243] call_tmp[650868])))
    unknown call_tmp[650880] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650883 'move' call_tmp[650880](747888 'new' _distribution[118973](?) call_tmp[650875]))
    (516455 'move' ret[516450](516454 'deref' call_tmp[650880]))
    (516452 return ret[516450])
  }
  function _distribution[118973](?).newRectangularDom[118690](arg _mt[119009]:_MT[238], arg this[119007]:_distribution[118973](?), param arg rank[118687]:int(64)[13], arg idxType[118692]:_any[178](?), param arg stridable[118695]:bool[10], arg ranges[118710] :
  unknown call_tmp[650885] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[516459] "RVV" "temp"
    unknown call_tmp[650892] "expr temp" "maybe param" "maybe type" "temp"
    (650895 'move' call_tmp[650892](359206 call _value _mt[243] this[119007]))
    unknown call_tmp[650899] "maybe param" "maybe type" "temp"
    (650902 'move' call_tmp[650899](118724 call(118716 call (partial) dsiNewRectangularDom _mt[243] call_tmp[650892]) rank[118687] idxType[118692] stridable[118695] ranges[118710]))
    unknown x[118725] "dead at end of block" "insert auto destroy"
    (542855 'init var' x[118725] call_tmp[650899])
    (118728 'end of statement')
    unknown call_tmp[650906] "expr temp" "maybe param" "maybe type" "temp"
    (650909 'move' call_tmp[650906](118737 call(118733 call (partial) linksDistribution _mt[243] x[118725])))
    unknown call_tmp[650911] "expr temp" "maybe param" "maybe type" "temp"
    (650914 'move' call_tmp[650911](118749 call _cond_test call_tmp[650906]))
    if call_tmp[650911]
    {
      unknown call_tmp[650918] "expr temp" "maybe param" "maybe type" "temp"
      (650921 'move' call_tmp[650918](359211 call _value _mt[243] this[119007]))
      (118746 call(118741 call (partial) add_dom _mt[243] call_tmp[650918]) x[118725])
      (479497 'end of statement' x[118725])
    }
    (516464 'move' ret[516459](516463 'deref' x[118725]))
    gotoReturn _end_newRectangularDom[516457] _end_newRectangularDom[516457]
    (479499 'end of statement' x[118725])
    label _end_newRectangularDom[516457]
    (516461 return ret[516459])
  }
  function _distribution[118973](?).newRectangularDom[118764](arg _mt[119013]:_MT[238], arg this[119011]:_distribution[118973](?), param arg rank[118761]:int(64)[13], arg idxType[118766]:_any[178](?), param arg stridable[118769]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516470] "RVV" "temp"
    unknown ranges[118784] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650925] "expr temp" "maybe param" "maybe type" "temp"
    (650928 'move' call_tmp[650925](118781 call range[64319](?) idxType[118766] bounded[64208] stridable[118769]))
    unknown call_tmp[650930] "expr temp" "maybe param" "maybe type" "temp"
    (650933 'move' call_tmp[650930](118782 call * rank[118761] call_tmp[650925]))
    (542857 'default init var' ranges[118784] call_tmp[650930])
    (118787 'end of statement')
    unknown call_tmp[650937] "expr temp" "maybe param" "maybe type" "temp"
    (650940 'move' call_tmp[650937](118795 call(382622 call (partial) newRectangularDom _mt[243] this[119011]) rank[118761] idxType[118766] stridable[118769] ranges[118784]))
    (516475 'move' ret[516470](516474 'deref' call_tmp[650937]))
    gotoReturn _end_newRectangularDom[516468] _end_newRectangularDom[516468]
    (479501 'end of statement' ranges[118784])
    label _end_newRectangularDom[516468]
    (516472 return ret[516470])
  }
  function _distribution[118973](?).newAssociativeDom[118804](arg _mt[119017]:_MT[238], arg this[119015]:_distribution[118973](?), arg idxType[118802]:_any[178](?), param arg parSafe[118808]:bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown ret[516481] "RVV" "temp"
    unknown call_tmp[650944] "expr temp" "maybe param" "maybe type" "temp"
    (650947 'move' call_tmp[650944](359216 call _value _mt[243] this[119015]))
    unknown call_tmp[650951] "maybe param" "maybe type" "temp"
    (650954 'move' call_tmp[650951](118821 call(118815 call (partial) dsiNewAssociativeDom _mt[243] call_tmp[650944]) idxType[118802] parSafe[118808]))
    unknown x[118822] "dead at end of block" "insert auto destroy"
    (542859 'init var' x[118822] call_tmp[650951])
    (118825 'end of statement')
    unknown call_tmp[650958] "expr temp" "maybe param" "maybe type" "temp"
    (650961 'move' call_tmp[650958](118832 call(118828 call (partial) linksDistribution _mt[243] x[118822])))
    unknown call_tmp[650963] "expr temp" "maybe param" "maybe type" "temp"
    (650966 'move' call_tmp[650963](118842 call _cond_test call_tmp[650958]))
    if call_tmp[650963]
    {
      unknown call_tmp[650970] "expr temp" "maybe param" "maybe type" "temp"
      (650973 'move' call_tmp[650970](359221 call _value _mt[243] this[119015]))
      (118839 call(118834 call (partial) add_dom _mt[243] call_tmp[650970]) x[118822])
      (479503 'end of statement' x[118822])
    }
    (516486 'move' ret[516481](516485 'deref' x[118822]))
    gotoReturn _end_newAssociativeDom[516479] _end_newAssociativeDom[516479]
    (479505 'end of statement' x[118822])
    label _end_newAssociativeDom[516479]
    (516483 return ret[516481])
  }
  function _distribution[118973](?).newSparseDom[118857](arg _mt[119021]:_MT[238], arg this[119019]:_distribution[118973](?), param arg rank[118854]:int(64)[13], arg idxType[118859]:_any[178](?), arg dom[118862]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516492] "RVV" "temp"
    unknown call_tmp[650979] "expr temp" "maybe param" "maybe type" "temp"
    (650982 'move' call_tmp[650979](359225 call _value _mt[243] this[119019]))
    unknown call_tmp[650986] "maybe param" "maybe type" "temp"
    (650989 'move' call_tmp[650986](118875 call(118868 call (partial) dsiNewSparseDom _mt[243] call_tmp[650979]) rank[118854] idxType[118859] dom[118862]))
    unknown x[118876] "dead at end of block" "insert auto destroy"
    (542861 'init var' x[118876] call_tmp[650986])
    (118879 'end of statement')
    unknown call_tmp[650993] "expr temp" "maybe param" "maybe type" "temp"
    (650996 'move' call_tmp[650993](118886 call(118882 call (partial) linksDistribution _mt[243] x[118876])))
    unknown call_tmp[650998] "expr temp" "maybe param" "maybe type" "temp"
    (651001 'move' call_tmp[650998](118896 call _cond_test call_tmp[650993]))
    if call_tmp[650998]
    {
      unknown call_tmp[651005] "expr temp" "maybe param" "maybe type" "temp"
      (651008 'move' call_tmp[651005](359230 call _value _mt[243] this[119019]))
      (118893 call(118888 call (partial) add_dom _mt[243] call_tmp[651005]) x[118876])
      (479507 'end of statement' x[118876])
    }
    (516497 'move' ret[516492](516496 'deref' x[118876]))
    gotoReturn _end_newSparseDom[516490] _end_newSparseDom[516490]
    (479509 'end of statement' x[118876])
    label _end_newSparseDom[516490]
    (516494 return ret[516492])
  }
  function _distribution[118973](?).idxToLocale[118909](arg _mt[119025]:_MT[238], arg this[119023]:_distribution[118973](?), arg ind[118907]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516503] "RVV" "temp"
    unknown call_tmp[651014] "expr temp" "maybe param" "maybe type" "temp"
    (651017 'move' call_tmp[651014](359234 call _value _mt[243] this[119023]))
    unknown call_tmp[651021] "expr temp" "maybe param" "maybe type" "temp"
    (651024 'move' call_tmp[651021](118919 call(118914 call (partial) dsiIndexToLocale _mt[243] call_tmp[651014]) ind[118907]))
    (516508 'move' ret[516503](516507 'deref' call_tmp[651021]))
    (516505 return ret[516503])
  }
  function _distribution[118973](?).readWriteThis[118929](arg _mt[119029]:_MT[238], arg this[119027]:_distribution[118973](?), arg f[118927]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651028] "expr temp" "maybe param" "maybe type" "temp"
    (651031 'move' call_tmp[651028](382642 call _value _mt[243] this[119027]))
    (118933 call <~> f[118927] call_tmp[651028])
    (516510 return _void[55])
  }
  function _distribution[118973](?).displayRepresentation[118941](arg _mt[119033]:_MT[238], arg this[119031]:_distribution[118973](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651035] "expr temp" "maybe param" "maybe type" "temp"
    (651038 'move' call_tmp[651035](359238 call _value _mt[243] this[119031]))
    (118950 call(118946 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[651035]))
    (516512 return _void[55])
  }
  function _distribution[118973](?).targetLocales[118957](arg _mt[119037]:_MT[238], arg this[119035]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516516] "RVV" "temp"
    unknown call_tmp[651044] "expr temp" "maybe param" "maybe type" "temp"
    (651047 'move' call_tmp[651044](359242 call _value _mt[243] this[119035]))
    unknown call_tmp[651051] "expr temp" "maybe param" "maybe type" "temp"
    (651054 'move' call_tmp[651051](118966 call(118962 call (partial) dsiTargetLocales _mt[243] call_tmp[651044])))
    (516521 'move' ret[516516](516520 'deref' call_tmp[651051]))
    (516518 return ret[516516])
  }
  type _distribution[118973](?) val _pid[118417]:int(64)[13] int(64)[13] unknown _instance[118421] "owned" val _unowned[118426]:bool[10] bool[10] forwarding ( )
  function ==[119049](arg d1[119046]:_distribution[118973](?), arg d2[119055]:_distribution[118973](?)) : _unknown[51] "inline"
  {
    unknown ret[516525] "RVV" "temp"
    unknown call_tmp[651058] "expr temp" "maybe param" "maybe type" "temp"
    (651061 'move' call_tmp[651058](119059 call _value _mt[243] d1[119046]))
    unknown call_tmp[651065] "expr temp" "maybe param" "maybe type" "temp"
    (651068 'move' call_tmp[651065](119063 call _value _mt[243] d2[119055]))
    unknown call_tmp[651070] "expr temp" "maybe param" "maybe type" "temp"
    (651073 'move' call_tmp[651070](119066 call == call_tmp[651058] call_tmp[651065]))
    unknown call_tmp[651075] "expr temp" "maybe param" "maybe type" "temp"
    (651078 'move' call_tmp[651075](119071 call _cond_test call_tmp[651070]))
    if call_tmp[651075]
    {
      (516530 'move' ret[516525](516529 'deref' 1))
      gotoReturn _end_==[516523] _end_==[516523]
    }
    unknown call_tmp[651082] "expr temp" "maybe param" "maybe type" "temp"
    (651085 'move' call_tmp[651082](119078 call _value _mt[243] d1[119046]))
    unknown call_tmp[651091] "expr temp" "maybe param" "maybe type" "temp"
    (651094 'move' call_tmp[651091](119087 call _value _mt[243] d2[119055]))
    unknown call_tmp[651096] "expr temp" "maybe param" "maybe type" "temp"
    (651099 'move' call_tmp[651096](119091 call(119083 call (partial) dsiEqualDMaps _mt[243] call_tmp[651082]) call_tmp[651091]))
    (516535 'move' ret[516525](516534 'deref' call_tmp[651096]))
    label _end_==[516523]
    (516527 return ret[516525])
  }
  function !=[119105](arg d1[119102]:_distribution[118973](?), arg d2[119111]:_distribution[118973](?)) : _unknown[51] "inline"
  {
    unknown ret[516539] "RVV" "temp"
    unknown call_tmp[651103] "expr temp" "maybe param" "maybe type" "temp"
    (651106 'move' call_tmp[651103](119115 call _value _mt[243] d1[119102]))
    unknown call_tmp[651110] "expr temp" "maybe param" "maybe type" "temp"
    (651113 'move' call_tmp[651110](119119 call _value _mt[243] d2[119111]))
    unknown call_tmp[651115] "expr temp" "maybe param" "maybe type" "temp"
    (651118 'move' call_tmp[651115](119122 call == call_tmp[651103] call_tmp[651110]))
    unknown call_tmp[651120] "expr temp" "maybe param" "maybe type" "temp"
    (651123 'move' call_tmp[651120](119127 call _cond_test call_tmp[651115]))
    if call_tmp[651120]
    {
      (516544 'move' ret[516539](516543 'deref' 0))
      gotoReturn _end_!=[516537] _end_!=[516537]
    }
    unknown call_tmp[651127] "expr temp" "maybe param" "maybe type" "temp"
    (651130 'move' call_tmp[651127](119134 call _value _mt[243] d1[119102]))
    unknown call_tmp[651136] "expr temp" "maybe param" "maybe type" "temp"
    (651139 'move' call_tmp[651136](119141 call _value _mt[243] d2[119111]))
    unknown call_tmp[651141] "expr temp" "maybe param" "maybe type" "temp"
    (651144 'move' call_tmp[651141](119145 call(119137 call (partial) dsiEqualDMaps _mt[243] call_tmp[651127]) call_tmp[651136]))
    unknown call_tmp[651146] "expr temp" "maybe param" "maybe type" "temp"
    (651149 'move' call_tmp[651146](119146 call ! call_tmp[651141]))
    (516549 'move' ret[516539](516548 'deref' call_tmp[651146]))
    label _end_!=[516537]
    (516541 return ret[516539])
  }
  function chpl_defaultComparator[119154]() : _unknown[51]
  {
    unknown ret[516553] "RVV" "temp"
    (516558 'move' ret[516553](516557 'deref' defaultComparator[267996]))
    (516555 return ret[516553])
    (355156 'used modules list'(119157 'use' Sort[267987]))
  }
  function _domain[125908](?).chpl__promotionType[119182](arg _mt[125912]:_MT[238], arg this[125910]:_domain[125908](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[516562] "RVV" "temp" "type variable"
    unknown call_tmp[651153] "expr temp" "maybe param" "maybe type" "temp"
    (651156 'move' call_tmp[651153](382651 call rank _mt[243] this[125910]))
    unknown call_tmp[651160] "expr temp" "maybe param" "maybe type" "temp"
    (651163 'move' call_tmp[651160](359254 call _value _mt[243] this[125910]))
    unknown call_tmp[651167] "expr temp" "maybe param" "maybe type" "temp"
    (651170 'move' call_tmp[651167](119187 call idxType _mt[243] call_tmp[651160]))
    unknown call_tmp[651172] "expr temp" "maybe param" "maybe type" "temp"
    (651175 'move' call_tmp[651172](119190 call chpl__buildIndexType call_tmp[651153] call_tmp[651167]))
    (516567 'move' ret[516562](516566 'deref' call_tmp[651172]))
    (516564 return ret[516562])
  }
  function _domain[125908](?).init[119203](arg _mt[125916]:_MT[238], ref arg this[125914]:_domain[125908](?), arg _pid[119200]:int(64)[13], arg _instance[119205]:_any[178](?), arg _unowned[119208]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461364] "temp"
    (461367 'init var' tmp[461364] _pid[119200] int(64)[13])
    (461369 'init field' this[125914] c"_pid" tmp[461364])
    (479521 'end of statement')
    unknown tmp[461373] "temp"
    (461375 'init var' tmp[461373] _instance[119205])
    (461377 'init field' this[125914] c"_instance" tmp[461373])
    (479522 'end of statement')
    unknown tmp[461381] "temp"
    (461384 'init var' tmp[461381] _unowned[119208] bool[10])
    (461386 'init field' this[125914] c"_unowned" tmp[461381])
    (479523 'end of statement')
    (516569 return _void[55])
  }
  function _domain[125908](?).init[119242](arg _mt[125920]:_MT[238], ref arg this[125918]:_domain[125908](?), arg value[119240]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651177] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651180 'move' call_tmp[651177](119246 'typeof' value[119240]))
    unknown call_tmp[651182] "expr temp" "maybe param" "maybe type" "temp"
    (651185 'move' call_tmp[651182](119248 call _to_unmanaged call_tmp[651177]))
    unknown call_tmp[651187] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651190 'move' call_tmp[651187](119250 'typeof' value[119240]))
    unknown call_tmp[651192] "expr temp" "maybe param" "maybe type" "temp"
    (651195 'move' call_tmp[651192](119251 call != call_tmp[651182] call_tmp[651187]))
    unknown call_tmp[651197] "expr temp" "maybe param" "maybe type" "temp"
    (651200 'move' call_tmp[651197](119258 call _cond_test call_tmp[651192]))
    if call_tmp[651197]
    {
      (119256 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[651202] "expr temp" "maybe param" "maybe type" "temp"
    (651205 'move' call_tmp[651202](119267 call _isPrivatized value[119240]))
    unknown call_tmp[651207] "expr temp" "maybe param" "maybe type" "temp"
    (651210 'move' call_tmp[651207](119313 call _cond_test call_tmp[651202]))
    if call_tmp[651207]
    {
      unknown call_tmp[651214] "expr temp" "maybe param" "maybe type" "temp"
      (651217 'move' call_tmp[651214](119269 call pid _mt[243] value[119240]))
      unknown call_tmp[651219] "expr temp" "maybe param" "maybe type" "temp"
      (651222 'move' call_tmp[651219](119273 call == call_tmp[651214] nullPid[113718]))
      unknown call_tmp[651224] "expr temp" "maybe param" "maybe type" "temp"
      (651227 'move' call_tmp[651224](119299 call _cond_test call_tmp[651219]))
      if call_tmp[651224]
      {
        unknown call_tmp[651229] "maybe param" "maybe type" "temp"
        (651232 'move' call_tmp[651229](119282 call _newPrivatizedClass value[119240]))
        unknown tmp[461390] "temp"
        (461393 'init var' tmp[461390] call_tmp[651229] int(64)[13])
        (461395 'init field' this[125918] c"_pid" tmp[461390])
        (479525 'end of statement')
      }
      {
        unknown call_tmp[651236] "maybe param" "maybe type" "temp"
        (651239 'move' call_tmp[651236](119292 call pid _mt[243] value[119240]))
        unknown tmp[461399] "temp"
        (461402 'init var' tmp[461399] call_tmp[651236] int(64)[13])
        (461404 'init field' this[125918] c"_pid" tmp[461399])
        (479526 'end of statement')
      }
    }
    {
      unknown tmp[461408] "temp"
      (461411 'init var' tmp[461408] nullPid[113718] int(64)[13])
      (461413 'init field' this[125918] c"_pid" tmp[461408])
      (479527 'end of statement')
    }
    unknown tmp[461417] "temp"
    (461419 'init var' tmp[461417] value[119240])
    (461421 'init field' this[125918] c"_instance" tmp[461417])
    (479528 'end of statement')
    val tmp[461426]:bool[10] "temp"
    (461429 'default init var' tmp[461426] bool[10])
    (461431 '.=' this[125918] c"_unowned" tmp[461426])
    (479529 'end of statement')
    (516571 return _void[55])
  }
  function _domain[125908](?).init[119333](arg _mt[125924]:_MT[238], ref arg this[125922]:_domain[125908](?), arg d[119330]:_distribution[118973](?), param arg rank[119336]:int(64)[13], arg idxType[119340]:_any[178](?) =
  int(64)[13], param arg stridable[119345]:bool[10] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651245] "expr temp" "maybe param" "maybe type" "temp"
    (651248 'move' call_tmp[651245](119361 call(119354 call (partial) newRectangularDom _mt[243] d[119330]) rank[119336] idxType[119340] stridable[119345]))
    (119363 call(119350 call (partial) init _mt[243] this[125922]) call_tmp[651245])
    (516573 return _void[55])
  }
  function _domain[125908](?).init[119374](arg _mt[125928]:_MT[238], ref arg this[125926]:_domain[125908](?), arg d[119371]:_distribution[118973](?), param arg rank[119377]:int(64)[13], arg idxType[119381]:_any[178](?) =
  int(64)[13], param arg stridable[119386]:bool[10] =
  0, arg ranges[119402] :
  unknown call_tmp[651250] "expr temp" "maybe param" "maybe type" "temp") : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651259] "expr temp" "maybe param" "maybe type" "temp"
    (651262 'move' call_tmp[651259](119418 call(119410 call (partial) newRectangularDom _mt[243] d[119371]) rank[119377] idxType[119381] stridable[119386] ranges[119402]))
    (119420 call(119406 call (partial) init _mt[243] this[125926]) call_tmp[651259])
    (516575 return _void[55])
  }
  function _domain[125908](?).init[119431](arg _mt[125932]:_MT[238], ref arg this[125930]:_domain[125908](?), arg d[119428]:_distribution[118973](?), arg idxType[119433]:_any[178](?), param arg parSafe[119437]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651268] "expr temp" "maybe param" "maybe type" "temp"
    (651271 'move' call_tmp[651268](119454 call(119448 call (partial) newAssociativeDom _mt[243] d[119428]) idxType[119433] parSafe[119437]))
    (119456 call(119442 call (partial) init _mt[243] this[125930]) call_tmp[651268])
    (516577 return _void[55])
  }
  function _domain[125908](?).init[119467](arg _mt[125936]:_MT[238], ref arg this[125934]:_domain[125908](?), arg d[119464]:_distribution[118973](?), arg dom[119470]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651279] "expr temp" "maybe param" "maybe type" "temp"
    (651282 'move' call_tmp[651279](119484 call rank _mt[243] dom[119470]))
    unknown call_tmp[651286] "expr temp" "maybe param" "maybe type" "temp"
    (651289 'move' call_tmp[651286](119489 call _value _mt[243] dom[119470]))
    unknown call_tmp[651293] "expr temp" "maybe param" "maybe type" "temp"
    (651296 'move' call_tmp[651293](119492 call idxType _mt[243] call_tmp[651286]))
    unknown call_tmp[651298] "expr temp" "maybe param" "maybe type" "temp"
    (651301 'move' call_tmp[651298](119496 call(119480 call (partial) newSparseDom _mt[243] d[119464]) call_tmp[651279] call_tmp[651293] dom[119470]))
    (119498 call(119474 call (partial) init _mt[243] this[125934]) call_tmp[651298])
    (516579 return _void[55])
  }
  function _domain[125908](?).init=[119509](arg _mt[125940]:_MT[238], ref arg this[125938]:_domain[125908](?), const  ref arg other[119506]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651307] "expr temp" "maybe param" "maybe type" "temp"
    (651310 'move' call_tmp[651307](119520 call dist _mt[243] other[119506]))
    unknown call_tmp[651314] "expr temp" "maybe param" "maybe type" "temp"
    (651317 'move' call_tmp[651314](119525 call rank _mt[243] other[119506]))
    unknown call_tmp[651321] "expr temp" "maybe param" "maybe type" "temp"
    (651324 'move' call_tmp[651321](119529 call idxType _mt[243] other[119506]))
    unknown call_tmp[651328] "expr temp" "maybe param" "maybe type" "temp"
    (651331 'move' call_tmp[651328](119533 call stridable _mt[243] other[119506]))
    unknown call_tmp[651335] "expr temp" "maybe param" "maybe type" "temp"
    (651338 'move' call_tmp[651335](119541 call(119537 call (partial) dims _mt[243] other[119506])))
    (119542 call(119516 call (partial) init _mt[243] this[125938]) call_tmp[651307] call_tmp[651314] call_tmp[651321] call_tmp[651328] call_tmp[651335])
    (516581 return _void[55])
  }
  where {
    (119514 call isRectangularDom other[119506])
  }
  function _domain[125908](?).init=[119554](arg _mt[125944]:_MT[238], ref arg this[125942]:_domain[125908](?), const  ref arg other[119551]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651340] "expr temp" "maybe param" "maybe type" "temp"
    (651343 'move' call_tmp[651340](119559 call isAssociativeDom other[119551]))
    unknown call_tmp[651345] "expr temp" "maybe param" "maybe type" "temp"
    (651348 'move' call_tmp[651345](119646 call _cond_test call_tmp[651340]))
    if call_tmp[651345]
    {
      unknown call_tmp[651354] "expr temp" "maybe param" "maybe type" "temp"
      (651357 'move' call_tmp[651354](119565 call dist _mt[243] other[119551]))
      unknown call_tmp[651361] "expr temp" "maybe param" "maybe type" "temp"
      (651364 'move' call_tmp[651361](119570 call idxType _mt[243] other[119551]))
      unknown call_tmp[651368] "expr temp" "maybe param" "maybe type" "temp"
      (651371 'move' call_tmp[651368](119574 call parSafe _mt[243] other[119551]))
      (119577 call(119561 call (partial) init _mt[243] this[125942]) call_tmp[651354] call_tmp[651361] call_tmp[651368])
    }
    {
      unknown call_tmp[651373] "expr temp" "maybe param" "maybe type" "temp"
      (651376 'move' call_tmp[651373](119583 call isSparseDom other[119551]))
      unknown call_tmp[651378] "expr temp" "maybe param" "maybe type" "temp"
      (651381 'move' call_tmp[651378](119642 call _cond_test call_tmp[651373]))
      if call_tmp[651378]
      {
        unknown call_tmp[651387] "expr temp" "maybe param" "maybe type" "temp"
        (651390 'move' call_tmp[651387](119589 call dist _mt[243] other[119551]))
        unknown call_tmp[651394] "expr temp" "maybe param" "maybe type" "temp"
        (651397 'move' call_tmp[651394](119594 call parentDom _mt[243] other[119551]))
        (119597 call(119585 call (partial) init _mt[243] this[125942]) call_tmp[651387] call_tmp[651394])
      }
      {
        unknown call_tmp[651399] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651402 'move' call_tmp[651399](119620 'typeof' this[125942]))
        unknown call_tmp[651404] "expr temp" "maybe param" "maybe type" "temp"
        (651407 'move' call_tmp[651404](119622 call _cast string[26] call_tmp[651399]))
        unknown call_tmp[651409] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651412 'move' call_tmp[651409](119626 'typeof' other[119551]))
        unknown call_tmp[651414] "expr temp" "maybe param" "maybe type" "temp"
        (651417 'move' call_tmp[651414](119628 call _cast string[26] call_tmp[651409]))
        (119631 call compilerError "Cannot initialize '" call_tmp[651404] "' from '" call_tmp[651414] "'")
        (479537 'end of statement')
        (119640 call(119635 call (partial) init _mt[243] this[125942]) nil[44])
      }
    }
    unknown call_tmp[651423] "expr temp" "maybe param" "maybe type" "temp"
    (651426 'move' call_tmp[651423](359293 call _instance _mt[243] this[125942]))
    (119662 call(119655 call (partial) dsiAssignDomain _mt[243] call_tmp[651423]) other[119551](lhsPrivate = 1))
    (516583 return _void[55])
  }
  function _domain[125908](?)._value[119668](arg _mt[125948]:_MT[238], arg this[125946]:_domain[125908](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516587] "RVV" "temp"
    unknown call_tmp[651432] "expr temp" "maybe param" "maybe type" "temp"
    (651435 'move' call_tmp[651432](382693 call _instance _mt[243] this[125946]))
    unknown call_tmp[651437] "expr temp" "maybe param" "maybe type" "temp"
    (651440 'move' call_tmp[651437](119673 call _isPrivatized call_tmp[651432]))
    unknown call_tmp[651442] "expr temp" "maybe param" "maybe type" "temp"
    (651445 'move' call_tmp[651442](119687 call _cond_test call_tmp[651437]))
    if call_tmp[651442]
    {
      { scopeless type
        unknown call_type_tmp[492174] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[651449] "expr temp" "maybe param" "maybe type" "temp"
        (651452 'move' call_tmp[651449](382698 call _instance _mt[243] this[125946]))
        (492178 'move' call_type_tmp[492174](119676 'typeof' call_tmp[651449]))
      }
      unknown call_tmp[651456] "expr temp" "maybe param" "maybe type" "temp"
      (651459 'move' call_tmp[651456](382703 call _pid _mt[243] this[125946]))
      unknown call_tmp[651461] "expr temp" "maybe param" "maybe type" "temp"
      (651464 'move' call_tmp[651461](119679 call chpl_getPrivatizedCopy call_type_tmp[492174] call_tmp[651456]))
      (516592 'move' ret[516587](516591 'deref' call_tmp[651461]))
      gotoReturn _end__value[516585] _end__value[516585]
    }
    {
      unknown call_tmp[651468] "expr temp" "maybe param" "maybe type" "temp"
      (651471 'move' call_tmp[651468](382708 call _instance _mt[243] this[125946]))
      (516597 'move' ret[516587](516596 'deref' call_tmp[651468]))
      gotoReturn _end__value[516585] _end__value[516585]
    }
    label _end__value[516585]
    (516589 return ret[516587])
  }
  function _domain[125908](?).chpl_forwarding_expr5__value[119697](arg _mt[125952]:_MT[238], arg this[125950]:_domain[125908](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516603] "RVV" "temp"
    (516607 'move' ret[516603](382712 call _value _mt[243] this[125950]))
    (516605 return ret[516603])
  }
  function _domain[125908](?).chpl__serialize[119705](arg _mt[125956]:_MT[238], arg this[125954]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516611] "RVV" "temp"
    unknown call_tmp[651477] "expr temp" "maybe param" "maybe type" "temp"
    (651480 'move' call_tmp[651477](119717 call _value _mt[243] this[125954]))
    unknown call_tmp[651484] "expr temp" "maybe param" "maybe type" "temp"
    (651487 'move' call_tmp[651484](119726 call(119722 call (partial) chpl__serialize _mt[243] call_tmp[651477])))
    (516616 'move' ret[516611](516615 'deref' call_tmp[651484]))
    (516613 return ret[516611])
  }
  where {
    unknown call_tmp[651491] "expr temp" "maybe param" "maybe type" "temp"
    (651494 'move' call_tmp[651491](119708 call _value _mt[243] this[125954]))
    (119715 call(119711 call (partial) isDefaultRectangular _mt[243] call_tmp[651491]))
  }
  function _domain[125908](?).chpl__deserialize[119737](arg _mt[125960]:_MT[238], arg this[125958]:_domain[125908](?), arg data[119735]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516620] "RVV" "temp"
    unknown valueType[119744] "dead at end of block" "insert auto destroy" "type variable"(119743 'static field type' this[125958] "_instance")
    (542866 'move' valueType[119744](542863 'static field type' this[125958] "_instance"))
    (479543 'end of statement')
    unknown call_tmp[651498] "expr temp" "maybe param" "maybe type" "temp"
    (651501 'move' call_tmp[651498](119753 call _to_borrowed valueType[119744]))
    unknown call_tmp[651505] "expr temp" "maybe param" "maybe type" "temp"
    (651508 'move' call_tmp[651505](119761 call(119756 call (partial) chpl__deserialize _mt[243] call_tmp[651498]) data[119735]))
    unknown call_tmp[651510] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (651513 'move' call_tmp[651510](747889 'new' _domain[125908](?) call_tmp[651505]))
    (516625 'move' ret[516620](516624 'deref' call_tmp[651510]))
    gotoReturn _end_chpl__deserialize[516618] _end_chpl__deserialize[516618]
    (479544 'end of statement' valueType[119744])
    label _end_chpl__deserialize[516618]
    (516622 return ret[516620])
  }
  function _domain[125908](?)._do_destroy[119770](arg _mt[125964]:_MT[238], arg this[125962]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[651517] "expr temp" "maybe param" "maybe type" "temp"
    (651520 'move' call_tmp[651517](382721 call _unowned _mt[243] this[125962]))
    unknown call_tmp[651522] "expr temp" "maybe param" "maybe type" "temp"
    (651525 'move' call_tmp[651522](119773 call ! call_tmp[651517]))
    unknown call_tmp[651527] "expr temp" "maybe param" "maybe type" "temp"
    (651530 'move' call_tmp[651527](119889 call _cond_test call_tmp[651522]))
    if call_tmp[651527]
    {
      const tmp[119879] "const" "temp"
      unknown call_tmp[651534] "expr temp" "maybe param" "maybe type" "temp"
      (651537 'move' call_tmp[651534](382726 call _instance _mt[243] this[125962]))
      unknown call_tmp[651539] "expr temp" "maybe param" "maybe type" "temp"
      (651542 'move' call_tmp[651539](119876 '_wide_get_locale' call_tmp[651534]))
      (119881 'move' tmp[119879](119877 'deref' call_tmp[651539]))
      {
        {
          unknown call_tmp[651546] "maybe param" "maybe type" "temp"
          (651549 'move' call_tmp[651546](382731 call _instance _mt[243] this[125962]))
          const inst[119777] "dead at end of block" "const" "insert auto destroy"
          (542868 'init var' inst[119777] call_tmp[651546])
          (119780 'end of statement')
          unknown call_tmp[651553] "maybe param" "maybe type" "temp"
          (651556 'move' call_tmp[651553](119792 call(119788 call (partial) remove _mt[243] inst[119777])))
          unknown tmp[119793] "dead at end of block" "insert auto destroy" "temp"
          (542870 'init var' tmp[119793] call_tmp[651553])
          (119800 call _check_tuple_var_decl tmp[119793] 2)
          (479546 'end of statement')
          unknown call_tmp[651558] "maybe param" "maybe type" "temp"
          (651561 'move' call_tmp[651558](119794 call tmp[119793] 0))
          unknown domToFree[119782] "dead at end of block" "insert auto destroy"
          (542872 'init var' domToFree[119782] call_tmp[651558])
          unknown call_tmp[651563] "maybe param" "maybe type" "temp"
          (651566 'move' call_tmp[651563](119797 call tmp[119793] 1))
          unknown distToRemove[119784] "dead at end of block" "insert auto destroy"
          (542874 'init var' distToRemove[119784] call_tmp[651563])
          (119805 'end of statement')
          unknown distToFree[119810] "dead at end of block" "insert auto destroy"
          (542876 'init var' distToFree[119810] nil[44] unmanaged BaseDist?[415497])
          (119813 'end of statement')
          unknown call_tmp[651568] "expr temp" "maybe param" "maybe type" "temp"
          (651571 'move' call_tmp[651568](119816 call != distToRemove[119784] nil[44]))
          unknown call_tmp[651573] "expr temp" "maybe param" "maybe type" "temp"
          (651576 'move' call_tmp[651573](119831 call _cond_test call_tmp[651568]))
          if call_tmp[651573]
          {
            unknown call_tmp[651578] "expr temp" "maybe param" "maybe type" "temp"
            (651581 'move' call_tmp[651578](119820 call postfix! distToRemove[119784]))
            unknown call_tmp[651585] "expr temp" "maybe param" "maybe type" "temp"
            (651588 'move' call_tmp[651585](119826 call(119822 call (partial) remove _mt[243] call_tmp[651578])))
            (119827 call = distToFree[119810] call_tmp[651585])
            (479547 'end of statement' distToFree[119810] distToRemove[119784])
          }
          unknown call_tmp[651590] "expr temp" "maybe param" "maybe type" "temp"
          (651593 'move' call_tmp[651590](119837 call != domToFree[119782] nil[44]))
          unknown call_tmp[651595] "expr temp" "maybe param" "maybe type" "temp"
          (651598 'move' call_tmp[651595](119848 call _cond_test call_tmp[651590]))
          if call_tmp[651595]
          {
            unknown call_tmp[651600] "expr temp" "maybe param" "maybe type" "temp"
            (651603 'move' call_tmp[651600](119845 call _isPrivatized inst[119777]))
            (119846 call _delete_dom inst[119777] call_tmp[651600])
            (479550 'end of statement' inst[119777] inst[119777])
          }
          unknown call_tmp[651605] "expr temp" "maybe param" "maybe type" "temp"
          (651608 'move' call_tmp[651605](119855 call != distToFree[119810] nil[44]))
          unknown call_tmp[651610] "expr temp" "maybe param" "maybe type" "temp"
          (651613 'move' call_tmp[651610](119871 call _cond_test call_tmp[651605]))
          if call_tmp[651610]
          {
            unknown call_tmp[651615] "expr temp" "maybe param" "maybe type" "temp"
            (651618 'move' call_tmp[651615](119859 call postfix! distToFree[119810]))
            unknown call_tmp[651622] "expr temp" "maybe param" "maybe type" "temp"
            (651625 'move' call_tmp[651622](119864 call dist _mt[243] inst[119777]))
            unknown call_tmp[651627] "expr temp" "maybe param" "maybe type" "temp"
            (651630 'move' call_tmp[651627](119868 call _isPrivatized call_tmp[651622]))
            (119869 call _delete_dist call_tmp[651615] call_tmp[651627])
            (479553 'end of statement' distToFree[119810] inst[119777])
          }
        }
        (119884 'on block' 0 tmp[119879])
      }
    }
    {
    }
    (516629 return _void[55])
  }
  function _domain[125908](?).deinit[119898](arg _mt[125968]:_MT[238], arg this[125966]:_domain[125908](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119902 call(382744 call (partial) _do_destroy _mt[243] this[125966]))
    (516631 return _void[55])
  }
  function _domain[125908](?).dist[119909](arg _mt[125972]:_MT[238], arg this[125970]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[516635] "RVV" "temp"
    unknown call_tmp[651636] "expr temp" "maybe param" "maybe type" "temp"
    (651639 'move' call_tmp[651636](359301 call _value _mt[243] this[125970]))
    unknown call_tmp[651643] "expr temp" "maybe param" "maybe type" "temp"
    (651646 'move' call_tmp[651643](119913 call dist _mt[243] call_tmp[651636]))
    unknown call_tmp[651648] "expr temp" "maybe param" "maybe type" "temp"
    (651651 'move' call_tmp[651648](119917 call _getDistribution call_tmp[651643]))
    (516640 'move' ret[516635](516639 'deref' call_tmp[651648]))
    (516637 return ret[516635])
  }
  function _domain[125908](?).rank[119925](arg _mt[125976]:_MT[238], arg this[125974]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516644] "RVV" "param" "temp"
    unknown tmp[424481] "maybe param" "temp"
    (424492 'move' tmp[424481](119930 call isRectangularDom this[125974]))
    unknown call_tmp[651653] "expr temp" "maybe param" "maybe type" "temp"
    (651656 'move' call_tmp[651653](424494 call _cond_invalid tmp[424481]))
    if call_tmp[651653]
    {
      (424497 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564915] "maybe param" "temp"
    unknown call_tmp[651658] "expr temp" "maybe param" "maybe type" "temp"
    (651661 'move' call_tmp[651658](424482 call isTrue tmp[424481]))
    (564920 'move' tmp[564915](564918 call _cond_test call_tmp[651658]))
    if tmp[564915]
    {
      (564925 'move' tmp[564914](564922 '_paramFoldLogical' tmp[564915] 1))
    }
    {
      unknown tmp[564927] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651663] "expr temp" "maybe param" "maybe type" "temp"
      (651666 'move' call_tmp[651663](119934 call isSparseDom this[125974]))
      (564929 'move' tmp[564927](424486 call isTrue call_tmp[651663]))
      (564934 'move' tmp[564914](564931 '_paramFoldLogical' tmp[564915] tmp[564927]))
    }
    unknown call_tmp[651668] "expr temp" "maybe param" "maybe type" "temp"
    (651671 'move' call_tmp[651668](119946 call _cond_test tmp[564914]))
    if call_tmp[651668]
    {
      unknown call_tmp[651675] "expr temp" "maybe param" "maybe type" "temp"
      (651678 'move' call_tmp[651675](359305 call _value _mt[243] this[125974]))
      unknown call_tmp[651682] "expr temp" "maybe param" "maybe type" "temp"
      (651685 'move' call_tmp[651682](119938 call rank _mt[243] call_tmp[651675]))
      (516649 'move' ret[516644](516648 'deref' call_tmp[651682]))
      gotoReturn _end_rank[516642] _end_rank[516642]
    }
    {
      (516654 'move' ret[516644](516653 'deref' 1))
      gotoReturn _end_rank[516642] _end_rank[516642]
    }
    label _end_rank[516642]
    (516646 return ret[516644])
  }
  function _domain[125908](?).idxType[119957](arg _mt[125980]:_MT[238], arg this[125978]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516660] "RVV" "temp" "type variable"
    unknown call_tmp[651689] "expr temp" "maybe param" "maybe type" "temp"
    (651692 'move' call_tmp[651689](359309 call _value _mt[243] this[125978]))
    unknown call_tmp[651696] "expr temp" "maybe param" "maybe type" "temp"
    (651699 'move' call_tmp[651696](119960 call idxType _mt[243] call_tmp[651689]))
    (516665 'move' ret[516660](516664 'deref' call_tmp[651696]))
    (516662 return ret[516660])
  }
  function _domain[125908](?).intIdxType[119970](arg _mt[125984]:_MT[238], arg this[125982]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516669] "RVV" "temp" "type variable"
    unknown call_tmp[651703] "expr temp" "maybe param" "maybe type" "temp"
    (651706 'move' call_tmp[651703](359313 call _value _mt[243] this[125982]))
    unknown call_tmp[651710] "expr temp" "maybe param" "maybe type" "temp"
    (651713 'move' call_tmp[651710](119974 call idxType _mt[243] call_tmp[651703]))
    unknown call_tmp[651715] "expr temp" "maybe param" "maybe type" "temp"
    (651718 'move' call_tmp[651715](119978 call chpl__idxTypeToIntIdxType call_tmp[651710]))
    (516674 'move' ret[516669](516673 'deref' call_tmp[651715]))
    (516671 return ret[516669])
  }
  function _domain[125908](?).stridable[119986](arg _mt[125988]:_MT[238], arg this[125986]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516678] "RVV" "param" "temp"
    unknown call_tmp[651722] "expr temp" "maybe param" "maybe type" "temp"
    (651725 'move' call_tmp[651722](359317 call _value _mt[243] this[125986]))
    unknown call_tmp[651729] "expr temp" "maybe param" "maybe type" "temp"
    (651732 'move' call_tmp[651729](119993 call stridable _mt[243] call_tmp[651722]))
    (516683 'move' ret[516678](516682 'deref' call_tmp[651729]))
    (516680 return ret[516678])
  }
  where {
    (119991 call isRectangularDom this[125986])
  }
  function _domain[125908](?).stridable[120004](arg _mt[125992]:_MT[238], arg this[125990]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516687] "RVV" "param" "temp"
    unknown call_tmp[651736] "expr temp" "maybe param" "maybe type" "temp"
    (651739 'move' call_tmp[651736](359321 call _value _mt[243] this[125990]))
    unknown call_tmp[651743] "expr temp" "maybe param" "maybe type" "temp"
    (651746 'move' call_tmp[651743](120011 call parentDom _mt[243] call_tmp[651736]))
    unknown call_tmp[651750] "expr temp" "maybe param" "maybe type" "temp"
    (651753 'move' call_tmp[651750](120014 call stridable _mt[243] call_tmp[651743]))
    (516692 'move' ret[516687](516691 'deref' call_tmp[651750]))
    (516689 return ret[516687])
  }
  where {
    (120009 call isSparseDom this[125990])
  }
  function _domain[125908](?).stridable[120025](arg _mt[125996]:_MT[238], arg this[125994]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120050 call compilerError "associative domains do not support .stridable")
    (516694 return _void[55])
  }
  where {
    (120030 call isAssociativeDom this[125994])
  }
  function _domain[125908](?).these[120058](arg _mt[126000]:_MT[238], arg this[125998]:_domain[125908](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[516698] "RVV" "temp"
    {
      unknown _indexOfInterest[120071] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120072] "expr temp" "temp"
      unknown call_tmp[651757] "expr temp" "maybe param" "maybe type" "temp"
      (651760 'move' call_tmp[651757](359325 call _value _mt[243] this[125998]))
      unknown call_tmp[651764] "expr temp" "maybe param" "maybe type" "temp"
      (651767 'move' call_tmp[651764](120066 call(120062 call (partial) these _mt[243] call_tmp[651757])))
      (120081 'move' _iterator[120072](120079 call _getIterator call_tmp[651764]))
      Defer
      {
        {
          (120098 call _freeIterator _iterator[120072])
        }
      }
      { scopeless type
        (120087 'move' _indexOfInterest[120071](120084 call iteratorIndex _iterator[120072]))
      }
      ForLoop[120073]
      {
        unknown i[120091] "index var" "insert auto destroy"
        (479567 'end of statement')
        (120093 'move' i[120091] _indexOfInterest[120071])
        (479568 'end of statement' i[120091])
        {
          unknown yret[516702] "YVV" "temp"
          (516705 'move' yret[516702](516704 'deref' i[120091]))
          (516707 yield yret[516702])
          (479570 'end of statement' i[120091])
        }
        label _continueLabel[120076]
        _indexOfInterest[120071]
        _iterator[120072]
      }
      label _breakLabel[120077]
    }
    (516700 return ret[516698])
  }
  function _domain[125908](?).these[120114](arg _mt[126004]:_MT[238], arg this[126002]:_domain[125908](?), param arg tag[120111]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516711] "RVV" "temp"
    {
      unknown _indexOfInterest[120173] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120174] "expr temp" "temp"
      unknown call_tmp[651771] "expr temp" "maybe param" "maybe type" "temp"
      (651774 'move' call_tmp[651771](359330 call _value _mt[243] this[126002]))
      unknown call_tmp[651778] "expr temp" "maybe param" "maybe type" "temp"
      (651781 'move' call_tmp[651778](120169 call(120164 call (partial) these _mt[243] call_tmp[651771]) tag[120111]))
      (120183 'move' _iterator[120174](120181 call _getIterator call_tmp[651778]))
      Defer
      {
        {
          (120200 call _freeIterator _iterator[120174])
        }
      }
      { scopeless type
        (120189 'move' _indexOfInterest[120173](120186 call iteratorIndex _iterator[120174]))
      }
      ForLoop[120175]
      {
        unknown i[120193] "index var" "insert auto destroy"
        (479573 'end of statement')
        (120195 'move' i[120193] _indexOfInterest[120173])
        (479574 'end of statement' i[120193])
        unknown yret[516715] "YVV" "temp"
        (516718 'move' yret[516715](516717 'deref' i[120193]))
        (516720 yield yret[516715])
        (479576 'end of statement' i[120193])
        label _continueLabel[120178]
        _indexOfInterest[120173]
        _iterator[120174]
      }
      label _breakLabel[120179]
    }
    (516713 return ret[516711])
  }
  where {
    unknown tmp[424502] "maybe param" "temp"
    (424513 'move' tmp[424502](120121 call == tag[120111] standalone[451]))
    unknown call_tmp[651783] "expr temp" "maybe param" "maybe type" "temp"
    (651786 'move' call_tmp[651783](424515 call _cond_invalid tmp[424502]))
    if call_tmp[651783]
    {
      (424518 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564941] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564942] "maybe param" "temp"
    unknown call_tmp[651788] "expr temp" "maybe param" "maybe type" "temp"
    (651791 'move' call_tmp[651788](424503 call isTrue tmp[424502]))
    (564947 'move' tmp[564942](564945 call _cond_test call_tmp[651788]))
    if tmp[564942]
    {
      unknown tmp[564949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651795] "expr temp" "maybe param" "maybe type" "temp"
      (651798 'move' call_tmp[651795](382756 call _value _mt[243] this[126002]))
      unknown call_tmp[651800] "expr temp" "maybe param" "maybe type" "temp"
      (651803 'move' call_tmp[651800](120159 'method call resolves' call_tmp[651795] "these"(tag = tag[120111])))
      (564951 'move' tmp[564949](424506 call isTrue call_tmp[651800]))
      (564956 'move' tmp[564941](564953 '_paramFoldLogical' tmp[564942] tmp[564949]))
    }
    {
      (564961 'move' tmp[564941](564958 '_paramFoldLogical' tmp[564942] 0))
    }
    (748279 call chpl_statementLevelSymbol tmp[564941])
  }
  function _domain[125908](?).these[120217](arg _mt[126008]:_MT[238], arg this[126006]:_domain[125908](?), param arg tag[120214]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516724] "RVV" "temp"
    {
      unknown _indexOfInterest[120237] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120238] "expr temp" "temp"
      unknown call_tmp[651807] "expr temp" "maybe param" "maybe type" "temp"
      (651810 'move' call_tmp[651807](359335 call _value _mt[243] this[126006]))
      unknown call_tmp[651814] "expr temp" "maybe param" "maybe type" "temp"
      (651817 'move' call_tmp[651814](120233 call(120228 call (partial) these _mt[243] call_tmp[651807]) tag[120214]))
      (120247 'move' _iterator[120238](120245 call _getIterator call_tmp[651814]))
      Defer
      {
        {
          (120264 call _freeIterator _iterator[120238])
        }
      }
      { scopeless type
        (120253 'move' _indexOfInterest[120237](120250 call iteratorIndex _iterator[120238]))
      }
      ForLoop[120239]
      {
        unknown followThis[120257] "index var" "insert auto destroy"
        (479579 'end of statement')
        (120259 'move' followThis[120257] _indexOfInterest[120237])
        (479580 'end of statement' followThis[120257])
        unknown yret[516728] "YVV" "temp"
        (516731 'move' yret[516728](516730 'deref' followThis[120257]))
        (516733 yield yret[516728])
        (479582 'end of statement' followThis[120257])
        label _continueLabel[120242]
        _indexOfInterest[120237]
        _iterator[120238]
      }
      label _breakLabel[120243]
    }
    (516726 return ret[516724])
  }
  where {
    (120224 call == tag[120214] leader[447])
  }
  function _domain[125908](?).these[120281](arg _mt[126012]:_MT[238], arg this[126010]:_domain[125908](?), param arg tag[120278]:iterKind[453], arg followThis[120283]:_any[178](?), param arg fast[120287]:bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516737] "RVV" "temp"
    unknown call_tmp[651821] "expr temp" "maybe param" "maybe type" "temp"
    (651824 'move' call_tmp[651821](382769 call _value _mt[243] this[126010]))
    unknown call_tmp[651826] "expr temp" "maybe param" "maybe type" "temp"
    (651829 'move' call_tmp[651826](120307 'method call resolves' call_tmp[651821] "these"(tag = tag[120278]) followThis[120283](fast = fast[120287])))
    unknown call_tmp[651831] "expr temp" "maybe param" "maybe type" "temp"
    (651834 'move' call_tmp[651831](120405 call _cond_test call_tmp[651826]))
    if call_tmp[651831]
    {
      {
        unknown _indexOfInterest[120323] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120324] "expr temp" "temp"
        unknown call_tmp[651838] "expr temp" "maybe param" "maybe type" "temp"
        (651841 'move' call_tmp[651838](359340 call _value _mt[243] this[126010]))
        unknown call_tmp[651845] "expr temp" "maybe param" "maybe type" "temp"
        (651848 'move' call_tmp[651845](120319 call(120310 call (partial) these _mt[243] call_tmp[651838])(tag = tag[120278]) followThis[120283](fast = fast[120287])))
        (120333 'move' _iterator[120324](120331 call _getIterator call_tmp[651845]))
        Defer
        {
          {
            (120350 call _freeIterator _iterator[120324])
          }
        }
        { scopeless type
          (120339 'move' _indexOfInterest[120323](120336 call iteratorIndex _iterator[120324]))
        }
        ForLoop[120325]
        {
          unknown i[120343] "index var" "insert auto destroy"
          (479585 'end of statement')
          (120345 'move' i[120343] _indexOfInterest[120323])
          (479586 'end of statement' i[120343])
          unknown yret[516741] "YVV" "temp"
          (516744 'move' yret[516741](516743 'deref' i[120343]))
          (516746 yield yret[516741])
          (479588 'end of statement' i[120343])
          label _continueLabel[120328]
          _indexOfInterest[120323]
          _iterator[120324]
        }
        label _breakLabel[120329]
      }
    }
    {
      {
        unknown _indexOfInterest[120370] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120371] "expr temp" "temp"
        unknown call_tmp[651852] "expr temp" "maybe param" "maybe type" "temp"
        (651855 'move' call_tmp[651852](359344 call _value _mt[243] this[126010]))
        unknown call_tmp[651859] "expr temp" "maybe param" "maybe type" "temp"
        (651862 'move' call_tmp[651859](120366 call(120360 call (partial) these _mt[243] call_tmp[651852]) tag[120278] followThis[120283]))
        (120380 'move' _iterator[120371](120378 call _getIterator call_tmp[651859]))
        Defer
        {
          {
            (120397 call _freeIterator _iterator[120371])
          }
        }
        { scopeless type
          (120386 'move' _indexOfInterest[120370](120383 call iteratorIndex _iterator[120371]))
        }
        ForLoop[120372]
        {
          unknown i[120390] "index var" "insert auto destroy"
          (479591 'end of statement')
          (120392 'move' i[120390] _indexOfInterest[120370])
          (479592 'end of statement' i[120390])
          unknown yret[516748] "YVV" "temp"
          (516751 'move' yret[516748](516750 'deref' i[120390]))
          (516753 yield yret[516748])
          (479594 'end of statement' i[120390])
          label _continueLabel[120375]
          _indexOfInterest[120370]
          _iterator[120371]
        }
        label _breakLabel[120376]
      }
    }
    (516739 return ret[516737])
  }
  where {
    (120296 call == tag[120278] follower[449])
  }
  function _domain[125908](?).this[120419](arg _mt[126016]:_MT[238], arg this[126014]:_domain[125908](?), arg d[120416]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516757] "RVV" "temp"
    unknown call_tmp[651866] "expr temp" "maybe param" "maybe type" "temp"
    (651869 'move' call_tmp[651866](120422 call rank _mt[243] d[120416]))
    unknown call_tmp[651873] "expr temp" "maybe param" "maybe type" "temp"
    (651876 'move' call_tmp[651873](382784 call rank _mt[243] this[126014]))
    unknown call_tmp[651878] "expr temp" "maybe param" "maybe type" "temp"
    (651881 'move' call_tmp[651878](120426 call == call_tmp[651866] call_tmp[651873]))
    unknown call_tmp[651883] "expr temp" "maybe param" "maybe type" "temp"
    (651886 'move' call_tmp[651883](120461 call _cond_test call_tmp[651878]))
    if call_tmp[651883]
    {
      unknown call_tmp[651890] "expr temp" "maybe param" "maybe type" "temp"
      (651893 'move' call_tmp[651890](120434 call(120430 call (partial) getIndices _mt[243] d[120416])))
      unknown call_tmp[651895] "expr temp" "maybe param" "maybe type" "temp"
      (651898 'move' call_tmp[651895](120437 call this[126014](120435 'expand_tuple' call_tmp[651890])))
      (516762 'move' ret[516757](516761 'deref' call_tmp[651895]))
      gotoReturn _end_this[516755] _end_this[516755]
    }
    {
      (120459 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[516755]
    (516759 return ret[516757])
  }
  function _domain[125908](?).this[120476](arg _mt[126020]:_MT[238], arg this[126018]:_domain[125908](?), arg ranges[120473]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516768] "RVV" "temp"
    unknown tmp[424523] "maybe param" "temp"
    unknown call_tmp[651904] "expr temp" "maybe param" "maybe type" "temp"
    (651907 'move' call_tmp[651904](359350 call _value _mt[243] this[126018]))
    (424534 'move' tmp[424523](120483 call stridable _mt[243] call_tmp[651904]))
    unknown call_tmp[651911] "expr temp" "maybe param" "maybe type" "temp"
    (651914 'move' call_tmp[651911](424536 call _cond_invalid tmp[424523]))
    if call_tmp[651911]
    {
      (424539 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown stridable[120492] "dead at end of block" "param"
    unknown tmp[564968] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564969] "maybe param" "temp"
    unknown call_tmp[651916] "expr temp" "maybe param" "maybe type" "temp"
    (651919 'move' call_tmp[651916](424524 call isTrue tmp[424523]))
    (564974 'move' tmp[564969](564972 call _cond_test call_tmp[651916]))
    if tmp[564969]
    {
      (564979 'move' tmp[564968](564976 '_paramFoldLogical' tmp[564969] 1))
    }
    {
      unknown tmp[564981] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651921] "expr temp" "maybe param" "maybe type" "temp"
      (651924 'move' call_tmp[651921](120489 call chpl__anyStridable ranges[120473]))
      (564983 'move' tmp[564981](424528 call isTrue call_tmp[651921]))
      (564988 'move' tmp[564968](564985 '_paramFoldLogical' tmp[564969] tmp[564981]))
    }
    (542878 'init var' stridable[120492] tmp[564968])
    (120495 'end of statement')
    unknown r[120512] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651928] "expr temp" "maybe param" "maybe type" "temp"
    (651931 'move' call_tmp[651928](382795 call rank _mt[243] this[126018]))
    unknown call_tmp[651935] "expr temp" "maybe param" "maybe type" "temp"
    (651938 'move' call_tmp[651935](359354 call _value _mt[243] this[126018]))
    unknown call_tmp[651942] "expr temp" "maybe param" "maybe type" "temp"
    (651945 'move' call_tmp[651942](120500 call idxType _mt[243] call_tmp[651935]))
    unknown call_tmp[651947] "expr temp" "maybe param" "maybe type" "temp"
    (651950 'move' call_tmp[651947](120509 call range[64319](?) call_tmp[651942] bounded[64208] stridable[120492]))
    unknown call_tmp[651952] "expr temp" "maybe param" "maybe type" "temp"
    (651955 'move' call_tmp[651952](120510 call * call_tmp[651928] call_tmp[651947]))
    (542880 'default init var' r[120512] call_tmp[651952])
    (120515 'end of statement')
    {
      unknown i[120544] "dead at end of block" "insert auto destroy"
      (542882 'init var' i[120544] 0)
      (479599 'end of statement')
      unknown tmp[120545] "maybe param" "temp"
      unknown call_tmp[651959] "expr temp" "maybe param" "maybe type" "temp"
      (651962 'move' call_tmp[651959](382801 call rank _mt[243] this[126018]))
      unknown call_tmp[651964] "expr temp" "maybe param" "maybe type" "temp"
      (651967 'move' call_tmp[651964](120519 call - call_tmp[651959] 1))
      (120557 'move' tmp[120545](120555 call chpl_compute_low_param_loop_bound 0 call_tmp[651964]))
      unknown tmp[120546] "maybe param" "temp"
      unknown call_tmp[651971] "expr temp" "maybe param" "maybe type" "temp"
      (651974 'move' call_tmp[651971](382810 call rank _mt[243] this[126018]))
      unknown call_tmp[651976] "expr temp" "maybe param" "maybe type" "temp"
      (651979 'move' call_tmp[651976](120562 call - call_tmp[651971] 1))
      (120567 'move' tmp[120546](120565 call chpl_compute_high_param_loop_bound 0 call_tmp[651976]))
      unknown tmp[120547] "maybe param" "temp"
      (120570 'move' tmp[120547] 1)
      ParamForLoop[120572]
      { i[120544] tmp[120545] tmp[120546] tmp[120547]
        {
          unknown call_tmp[651981] "expr temp" "maybe param" "maybe type" "temp"
          (651984 'move' call_tmp[651981](120526 call r[120512] i[120544]))
          unknown call_tmp[651988] "expr temp" "maybe param" "maybe type" "temp"
          (651991 'move' call_tmp[651988](359359 call _value _mt[243] this[126018]))
          unknown call_tmp[651995] "expr temp" "maybe param" "maybe type" "temp"
          (651998 'move' call_tmp[651995](120533 call(120528 call (partial) dsiDim _mt[243] call_tmp[651988]) i[120544]))
          unknown call_tmp[652000] "expr temp" "maybe param" "maybe type" "temp"
          (652003 'move' call_tmp[652000](120537 call ranges[120473] i[120544]))
          unknown call_tmp[652005] "expr temp" "maybe param" "maybe type" "temp"
          (652008 'move' call_tmp[652005](120539 call call_tmp[651995] call_tmp[652000]))
          (120540 call = call_tmp[651981] call_tmp[652005])
          (479600 'end of statement' r[120512] i[120544] i[120544] i[120544])
        }
      }
      label _unused_continueLabel[120549]
      label _breakLabel[120548]
    }
    unknown call_tmp[652012] "expr temp" "maybe param" "maybe type" "temp"
    (652015 'move' call_tmp[652012](382815 call dist _mt[243] this[126018]))
    unknown call_tmp[652019] "expr temp" "maybe param" "maybe type" "temp"
    (652022 'move' call_tmp[652019](382819 call rank _mt[243] this[126018]))
    unknown call_tmp[652026] "expr temp" "maybe param" "maybe type" "temp"
    (652029 'move' call_tmp[652026](359363 call _value _mt[243] this[126018]))
    unknown call_tmp[652033] "expr temp" "maybe param" "maybe type" "temp"
    (652036 'move' call_tmp[652033](120587 call idxType _mt[243] call_tmp[652026]))
    unknown call_tmp[652038] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652041 'move' call_tmp[652038](747890 'new' _domain[125908](?) call_tmp[652012] call_tmp[652019] call_tmp[652033] stridable[120492] r[120512]))
    (516773 'move' ret[516768](516772 'deref' call_tmp[652038]))
    gotoReturn _end_this[516766] _end_this[516766]
    (479605 'end of statement' r[120512])
    label _end_this[516766]
    (516770 return ret[516768])
  }
  where {
    (120481 call chpl__isTupleOfRanges ranges[120473])
  }
  function _domain[125908](?).this[120604](arg _mt[126024]:_MT[238], arg this[126022]:_domain[125908](?), arg args[120601]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516779] "RVV" "temp"
    unknown collapsedDim[120618] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652047] "expr temp" "maybe param" "maybe type" "temp"
    (652050 'move' call_tmp[652047](382830 call rank _mt[243] this[126022]))
    unknown call_tmp[652052] "expr temp" "maybe param" "maybe type" "temp"
    (652055 'move' call_tmp[652052](120616 call * call_tmp[652047] bool[10]))
    (542884 'default init var' collapsedDim[120618] call_tmp[652052])
    (120621 'end of statement')
    unknown idx[120627] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652059] "expr temp" "maybe param" "maybe type" "temp"
    (652062 'move' call_tmp[652059](382834 call rank _mt[243] this[126022]))
    unknown call_tmp[652066] "expr temp" "maybe param" "maybe type" "temp"
    (652069 'move' call_tmp[652066](382838 call idxType _mt[243] this[126022]))
    unknown call_tmp[652071] "expr temp" "maybe param" "maybe type" "temp"
    (652074 'move' call_tmp[652071](120625 call * call_tmp[652059] call_tmp[652066]))
    (542886 'default init var' idx[120627] call_tmp[652071])
    (120630 'end of statement')
    unknown call_tmp[652076] "maybe param" "maybe type" "temp"
    (652079 'move' call_tmp[652076](120635 call chpl__countRanges(120633 'expand_tuple' args[120601])))
    unknown uprank[120636] "dead at end of block" "param"
    (542888 'init var' uprank[120636] call_tmp[652076])
    (120639 'end of statement')
    unknown tmp[424544] "maybe param" "temp"
    (424555 'move' tmp[424544](120641 call stridable _mt[243] this[126022]))
    unknown call_tmp[652083] "expr temp" "maybe param" "maybe type" "temp"
    (652086 'move' call_tmp[652083](424557 call _cond_invalid tmp[424544]))
    if call_tmp[652083]
    {
      (424560 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown upstridable[120650] "dead at end of block" "param"
    unknown tmp[564995] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564996] "maybe param" "temp"
    unknown call_tmp[652088] "expr temp" "maybe param" "maybe type" "temp"
    (652091 'move' call_tmp[652088](424545 call isTrue tmp[424544]))
    (565001 'move' tmp[564996](564999 call _cond_test call_tmp[652088]))
    if tmp[564996]
    {
      (565006 'move' tmp[564995](565003 '_paramFoldLogical' tmp[564996] 1))
    }
    {
      unknown tmp[565008] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652093] "expr temp" "maybe param" "maybe type" "temp"
      (652096 'move' call_tmp[652093](120647 call chpl__anyRankChangeStridable args[120601]))
      (565010 'move' tmp[565008](424549 call isTrue call_tmp[652093]))
      (565015 'move' tmp[564995](565012 '_paramFoldLogical' tmp[564996] tmp[565008]))
    }
    (542890 'init var' upstridable[120650] tmp[564995])
    (120653 'end of statement')
    unknown upranges[120667] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652100] "expr temp" "maybe param" "maybe type" "temp"
    (652103 'move' call_tmp[652100](359372 call _value _mt[243] this[126022]))
    unknown call_tmp[652107] "expr temp" "maybe param" "maybe type" "temp"
    (652110 'move' call_tmp[652107](120657 call idxType _mt[243] call_tmp[652100]))
    unknown call_tmp[652112] "expr temp" "maybe param" "maybe type" "temp"
    (652115 'move' call_tmp[652112](120664 call range[64319](?)(idxType = call_tmp[652107])(stridable = upstridable[120650])))
    unknown call_tmp[652117] "expr temp" "maybe param" "maybe type" "temp"
    (652120 'move' call_tmp[652117](120665 call * uprank[120636] call_tmp[652112]))
    (542892 'default init var' upranges[120667] call_tmp[652117])
    (120670 'end of statement')
    unknown updim[120672] "dead at end of block" "insert auto destroy"
    (542894 'init var' updim[120672] 0)
    (120675 'end of statement')
    {
      unknown i[120766] "dead at end of block" "insert auto destroy"
      (542896 'init var' i[120766] 0)
      (479608 'end of statement')
      unknown tmp[120767] "maybe param" "temp"
      unknown call_tmp[652124] "expr temp" "maybe param" "maybe type" "temp"
      (652127 'move' call_tmp[652124](382847 call rank _mt[243] this[126022]))
      unknown call_tmp[652129] "expr temp" "maybe param" "maybe type" "temp"
      (652132 'move' call_tmp[652129](120679 call - call_tmp[652124] 1))
      (120779 'move' tmp[120767](120777 call chpl_compute_low_param_loop_bound 0 call_tmp[652129]))
      unknown tmp[120768] "maybe param" "temp"
      unknown call_tmp[652136] "expr temp" "maybe param" "maybe type" "temp"
      (652139 'move' call_tmp[652136](382874 call rank _mt[243] this[126022]))
      unknown call_tmp[652141] "expr temp" "maybe param" "maybe type" "temp"
      (652144 'move' call_tmp[652141](120784 call - call_tmp[652136] 1))
      (120789 'move' tmp[120768](120787 call chpl_compute_high_param_loop_bound 0 call_tmp[652141]))
      unknown tmp[120769] "maybe param" "temp"
      (120792 'move' tmp[120769] 1)
      ParamForLoop[120794]
      { i[120766] tmp[120767] tmp[120768] tmp[120769]
        {
          unknown call_tmp[652146] "expr temp" "maybe param" "maybe type" "temp"
          (652149 'move' call_tmp[652146](120687 call args[120601] i[120766]))
          unknown call_tmp[652151] "expr temp" "maybe param" "maybe type" "temp"
          (652154 'move' call_tmp[652151](120689 call isRange call_tmp[652146]))
          unknown call_tmp[652156] "expr temp" "maybe param" "maybe type" "temp"
          (652159 'move' call_tmp[652156](120761 call _cond_test call_tmp[652151]))
          if call_tmp[652156]
          {
            unknown call_tmp[652161] "expr temp" "maybe param" "maybe type" "temp"
            (652164 'move' call_tmp[652161](120693 call collapsedDim[120618] i[120766]))
            (120695 call = call_tmp[652161] 0)
            (479609 'end of statement' collapsedDim[120618] i[120766])
            unknown call_tmp[652166] "expr temp" "maybe param" "maybe type" "temp"
            (652169 'move' call_tmp[652166](120702 call idx[120627] i[120766]))
            unknown call_tmp[652173] "expr temp" "maybe param" "maybe type" "temp"
            (652176 'move' call_tmp[652173](120706 call(382857 call (partial) dim _mt[243] this[126022]) i[120766]))
            unknown call_tmp[652180] "expr temp" "maybe param" "maybe type" "temp"
            (652183 'move' call_tmp[652180](120707 call alignedLow _mt[243] call_tmp[652173]))
            (120710 call = call_tmp[652166] call_tmp[652180])
            (479612 'end of statement' idx[120627] i[120766] i[120766])
            unknown call_tmp[652185] "expr temp" "maybe param" "maybe type" "temp"
            (652188 'move' call_tmp[652185](120716 call upranges[120667] updim[120672]))
            unknown call_tmp[652192] "expr temp" "maybe param" "maybe type" "temp"
            (652195 'move' call_tmp[652192](120718 call _value _mt[243] this[126022]))
            unknown call_tmp[652199] "expr temp" "maybe param" "maybe type" "temp"
            (652202 'move' call_tmp[652199](120726 call(120721 call (partial) dsiDim _mt[243] call_tmp[652192]) i[120766]))
            unknown call_tmp[652204] "expr temp" "maybe param" "maybe type" "temp"
            (652207 'move' call_tmp[652204](120730 call args[120601] i[120766]))
            unknown call_tmp[652209] "expr temp" "maybe param" "maybe type" "temp"
            (652212 'move' call_tmp[652209](120732 call call_tmp[652199] call_tmp[652204]))
            (120733 call = call_tmp[652185] call_tmp[652209])
            (479616 'end of statement' upranges[120667] updim[120672] i[120766] i[120766])
            (120738 call += updim[120672] 1)
            (479621 'end of statement' updim[120672])
          }
          {
            unknown call_tmp[652214] "expr temp" "maybe param" "maybe type" "temp"
            (652217 'move' call_tmp[652214](120744 call collapsedDim[120618] i[120766]))
            (120746 call = call_tmp[652214] 1)
            (479623 'end of statement' collapsedDim[120618] i[120766])
            unknown call_tmp[652219] "expr temp" "maybe param" "maybe type" "temp"
            (652222 'move' call_tmp[652219](120753 call idx[120627] i[120766]))
            unknown call_tmp[652224] "expr temp" "maybe param" "maybe type" "temp"
            (652227 'move' call_tmp[652224](120757 call args[120601] i[120766]))
            (120758 call = call_tmp[652219] call_tmp[652224])
            (479626 'end of statement' idx[120627] i[120766] i[120766])
          }
        }
      }
      label _unused_continueLabel[120771]
      label _breakLabel[120770]
    }
    { scopeless type
      unknown call_type_tmp[492180] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652229] "expr temp" "maybe param" "maybe type" "temp"
      (652232 'move' call_tmp[652229](120806 call upranges[120667] 0))
      (492184 'move' call_type_tmp[492180](120807 'typeof' call_tmp[652229]))
    }
    const emptyrange[120808] "dead at end of block" "const" "insert auto destroy"
    (542898 'default init var' emptyrange[120808] call_type_tmp[492180])
    (120811 'end of statement')
    unknown call_tmp[652236] "expr temp" "maybe param" "maybe type" "temp"
    (652239 'move' call_tmp[652236](120815 call(382879 call (partial) contains _mt[243] this[126022]) idx[120627]))
    unknown call_tmp[652241] "expr temp" "maybe param" "maybe type" "temp"
    (652244 'move' call_tmp[652241](120816 call ! call_tmp[652236]))
    unknown call_tmp[652246] "expr temp" "maybe param" "maybe type" "temp"
    (652249 'move' call_tmp[652246](120871 call _cond_test call_tmp[652241]))
    if call_tmp[652246]
    {
      {
        unknown d[120833] "dead at end of block" "insert auto destroy"
        (542900 'init var' d[120833] 0)
        (479631 'end of statement')
        unknown tmp[120834] "maybe param" "temp"
        unknown call_tmp[652251] "expr temp" "maybe param" "maybe type" "temp"
        (652254 'move' call_tmp[652251](120821 call - uprank[120636] 1))
        (120846 'move' tmp[120834](120844 call chpl_compute_low_param_loop_bound 0 call_tmp[652251]))
        unknown tmp[120835] "maybe param" "temp"
        unknown call_tmp[652256] "expr temp" "maybe param" "maybe type" "temp"
        (652259 'move' call_tmp[652256](120851 call - uprank[120636] 1))
        (120856 'move' tmp[120835](120854 call chpl_compute_high_param_loop_bound 0 call_tmp[652256]))
        unknown tmp[120836] "maybe param" "temp"
        (120859 'move' tmp[120836] 1)
        ParamForLoop[120861]
        { d[120833] tmp[120834] tmp[120835] tmp[120836]
          unknown call_tmp[652261] "expr temp" "maybe param" "maybe type" "temp"
          (652264 'move' call_tmp[652261](120828 call upranges[120667] d[120833]))
          (120830 call = call_tmp[652261] emptyrange[120808])
          (479632 'end of statement' upranges[120667] d[120833] emptyrange[120808])
        }
        label _unused_continueLabel[120838]
        label _breakLabel[120837]
      }
    }
    unknown call_tmp[652268] "expr temp" "maybe param" "maybe type" "temp"
    (652271 'move' call_tmp[652268](359377 call dist _mt[243] this[126022]))
    unknown call_tmp[652275] "expr temp" "maybe param" "maybe type" "temp"
    (652278 'move' call_tmp[652275](120880 call _pid _mt[243] call_tmp[652268]))
    unknown call_tmp[652282] "expr temp" "maybe param" "maybe type" "temp"
    (652285 'move' call_tmp[652282](359381 call dist _mt[243] this[126022]))
    unknown call_tmp[652289] "expr temp" "maybe param" "maybe type" "temp"
    (652292 'move' call_tmp[652289](120886 call _instance _mt[243] call_tmp[652282]))
    unknown call_tmp[652294] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652297 'move' call_tmp[652294](747891 'new' ArrayViewRankChangeDist[382889](?)(downDistPid = call_tmp[652275])(downDistInst = call_tmp[652289])(collapsedDim = collapsedDim[120618])(idx = idx[120627])(_chpl_manager = unmanaged[220](?))))
    const rcdist[120895] "dead at end of block" "const" "insert auto destroy"
    (542902 'init var' rcdist[120895] call_tmp[652294])
    (120898 'end of statement')
    unknown call_tmp[652299] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652302 'move' call_tmp[652299](747892 'new' _distribution[118973](?) rcdist[120895]))
    const rcdistRec[120904] "dead at end of block" "const" "insert auto destroy"
    (542904 'init var' rcdistRec[120904] call_tmp[652299])
    (120907 'end of statement' upranges[120667] collapsedDim[120618] idx[120627] rcdist[120895])
    unknown call_tmp[652304] "expr temp" "maybe param" "maybe type" "temp"
    (652307 'move' call_tmp[652304](120916 call upranges[120667] 0))
    unknown call_tmp[652311] "expr temp" "maybe param" "maybe type" "temp"
    (652314 'move' call_tmp[652311](120917 call idxType _mt[243] call_tmp[652304]))
    unknown call_tmp[652316] "expr temp" "maybe param" "maybe type" "temp"
    (652319 'move' call_tmp[652316](120923 call upranges[120667] 0))
    unknown call_tmp[652323] "expr temp" "maybe param" "maybe type" "temp"
    (652326 'move' call_tmp[652323](120924 call stridable _mt[243] call_tmp[652316]))
    unknown call_tmp[652328] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652331 'move' call_tmp[652328](747893 'new' _domain[125908](?) rcdistRec[120904] uprank[120636] call_tmp[652311] call_tmp[652323] upranges[120667]))
    (516784 'move' ret[516779](516783 'deref' call_tmp[652328]))
    gotoReturn _end_this[516777] _end_this[516777]
    (479639 'end of statement' rcdistRec[120904] upranges[120667] upranges[120667] upranges[120667])
    label _end_this[516777]
    (516781 return ret[516779])
  }
  where {
    unknown call_tmp[652335] "expr temp" "maybe param" "maybe type" "temp"
    (652338 'move' call_tmp[652335](359367 call _value _mt[243] this[126022]))
    unknown call_tmp[652342] "expr temp" "maybe param" "maybe type" "temp"
    (652345 'move' call_tmp[652342](120610 call idxType _mt[243] call_tmp[652335]))
    (120613 call _validRankChangeArgs args[120601] call_tmp[652342])
  }
  function _domain[125908](?).this[120942](arg _mt[126028]:_MT[238], arg this[126026]:_domain[125908](?), arg i[120938]:integral[199](?) ...) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120963 call compilerError "domain slice requires a range in at least one dimension")
    (516788 return _void[55])
  }
  function _domain[125908](?).this[120975](arg _mt[126032]:_MT[238], arg this[126030]:_domain[125908](?), arg args[120972]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652351] "expr temp" "maybe param" "maybe type" "temp"
    (652354 'move' call_tmp[652351](382909 call rank _mt[243] this[126030]))
    unknown call_tmp[652356] "expr temp" "maybe param" "maybe type" "temp"
    (652359 'move' call_tmp[652356](120979 call == numArgs[120970] call_tmp[652351]))
    unknown call_tmp[652361] "expr temp" "maybe param" "maybe type" "temp"
    (652364 'move' call_tmp[652361](121026 call _cond_test call_tmp[652356]))
    if call_tmp[652361]
    {
      (121000 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121024 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (516790 return _void[55])
  }
  function _domain[125908](?).dims[121036](arg _mt[126036]:_MT[238], arg this[126034]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516794] "RVV" "temp"
    unknown call_tmp[652368] "expr temp" "maybe param" "maybe type" "temp"
    (652371 'move' call_tmp[652368](359385 call _value _mt[243] this[126034]))
    unknown call_tmp[652375] "expr temp" "maybe param" "maybe type" "temp"
    (652378 'move' call_tmp[652375](121043 call(121039 call (partial) dsiDims _mt[243] call_tmp[652368])))
    (516799 'move' ret[516794](516798 'deref' call_tmp[652375]))
    (516796 return ret[516794])
  }
  function _domain[125908](?).dim[121055](arg _mt[126040]:_MT[238], arg this[126038]:_domain[125908](?), arg d[121052]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516803] "RVV" "temp"
    unknown call_tmp[652380] "expr temp" "maybe param" "maybe type" "temp"
    (652383 'move' call_tmp[652380](121135 call _cond_test 1))
    if call_tmp[652380]
    {
      unknown tmp[424565] "maybe param" "temp"
      (424576 'move' tmp[424565](121064 call < d[121052] 0))
      unknown call_tmp[652385] "expr temp" "maybe param" "maybe type" "temp"
      (652388 'move' call_tmp[652385](424578 call _cond_invalid tmp[424565]))
      if call_tmp[652385]
      {
        (424581 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[565022] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565023] "maybe param" "temp"
      unknown call_tmp[652390] "expr temp" "maybe param" "maybe type" "temp"
      (652393 'move' call_tmp[652390](424566 call isTrue tmp[424565]))
      (565028 'move' tmp[565023](565026 call _cond_test call_tmp[652390]))
      if tmp[565023]
      {
        (565033 'move' tmp[565022](565030 '_paramFoldLogical' tmp[565023] 1))
      }
      {
        unknown tmp[565035] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652397] "expr temp" "maybe param" "maybe type" "temp"
        (652400 'move' call_tmp[652397](382916 call rank _mt[243] this[126038]))
        unknown call_tmp[652402] "expr temp" "maybe param" "maybe type" "temp"
        (652405 'move' call_tmp[652402](121068 call >= d[121052] call_tmp[652397]))
        (565037 'move' tmp[565035](424570 call isTrue call_tmp[652402]))
        (565042 'move' tmp[565022](565039 '_paramFoldLogical' tmp[565023] tmp[565035]))
      }
      unknown call_tmp[652407] "expr temp" "maybe param" "maybe type" "temp"
      (652410 'move' call_tmp[652407](121130 call _cond_test tmp[565022]))
      if call_tmp[652407]
      {
        unknown call_tmp[652412] "expr temp" "maybe param" "maybe type" "temp"
        (652415 'move' call_tmp[652412](121095 call _cast string[26] d[121052]))
        unknown call_tmp[652417] "expr temp" "maybe param" "maybe type" "temp"
        (652420 'move' call_tmp[652417](121097 call + "dim(" call_tmp[652412]))
        unknown call_tmp[652422] "expr temp" "maybe param" "maybe type" "temp"
        (652425 'move' call_tmp[652422](121116 call + call_tmp[652417] ") is out-of-bounds; must be 0.."))
        unknown call_tmp[652429] "expr temp" "maybe param" "maybe type" "temp"
        (652432 'move' call_tmp[652429](382921 call rank _mt[243] this[126038]))
        unknown call_tmp[652434] "expr temp" "maybe param" "maybe type" "temp"
        (652437 'move' call_tmp[652434](121120 call - call_tmp[652429] 1))
        unknown call_tmp[652439] "expr temp" "maybe param" "maybe type" "temp"
        (652442 'move' call_tmp[652439](121123 call _cast string[26] call_tmp[652434]))
        unknown call_tmp[652444] "expr temp" "maybe param" "maybe type" "temp"
        (652447 'move' call_tmp[652444](121125 call + call_tmp[652422] call_tmp[652439]))
        (121128 call boundsCheckHalt module=[255] HaltWrappers[210016] call_tmp[652444])
        (359389 'referenced modules list' HaltWrappers[210016])
      }
    }
    unknown call_tmp[652451] "expr temp" "maybe param" "maybe type" "temp"
    (652454 'move' call_tmp[652451](359395 call _value _mt[243] this[126038]))
    unknown call_tmp[652458] "expr temp" "maybe param" "maybe type" "temp"
    (652461 'move' call_tmp[652458](121146 call(121141 call (partial) dsiDim _mt[243] call_tmp[652451]) d[121052]))
    (516808 'move' ret[516803](516807 'deref' call_tmp[652458]))
    (516805 return ret[516803])
    (355158 'used modules list'(121058 'use' HaltWrappers[210016]))
  }
  function _domain[125908](?).dim[121157](arg _mt[126044]:_MT[238], arg this[126042]:_domain[125908](?), param arg d[121154]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516812] "RVV" "temp"
    unknown tmp[424586] "maybe param" "temp"
    (424597 'move' tmp[424586](121161 call < d[121154] 0))
    unknown call_tmp[652463] "expr temp" "maybe param" "maybe type" "temp"
    (652466 'move' call_tmp[652463](424599 call _cond_invalid tmp[424586]))
    if call_tmp[652463]
    {
      (424602 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565049] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565050] "maybe param" "temp"
    unknown call_tmp[652468] "expr temp" "maybe param" "maybe type" "temp"
    (652471 'move' call_tmp[652468](424587 call isTrue tmp[424586]))
    (565055 'move' tmp[565050](565053 call _cond_test call_tmp[652468]))
    if tmp[565050]
    {
      (565060 'move' tmp[565049](565057 '_paramFoldLogical' tmp[565050] 1))
    }
    {
      unknown tmp[565062] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652475] "expr temp" "maybe param" "maybe type" "temp"
      (652478 'move' call_tmp[652475](382928 call rank _mt[243] this[126042]))
      unknown call_tmp[652480] "expr temp" "maybe param" "maybe type" "temp"
      (652483 'move' call_tmp[652480](121166 call - call_tmp[652475] 1))
      unknown call_tmp[652485] "expr temp" "maybe param" "maybe type" "temp"
      (652488 'move' call_tmp[652485](121168 call > d[121154] call_tmp[652480]))
      (565064 'move' tmp[565062](424591 call isTrue call_tmp[652485]))
      (565069 'move' tmp[565049](565066 '_paramFoldLogical' tmp[565050] tmp[565062]))
    }
    unknown call_tmp[652490] "expr temp" "maybe param" "maybe type" "temp"
    (652493 'move' call_tmp[652490](121197 call _cond_test tmp[565049]))
    if call_tmp[652490]
    {
      unknown call_tmp[652497] "expr temp" "maybe param" "maybe type" "temp"
      (652500 'move' call_tmp[652497](382932 call rank _mt[243] this[126042]))
      unknown call_tmp[652502] "expr temp" "maybe param" "maybe type" "temp"
      (652505 'move' call_tmp[652502](121193 call - call_tmp[652497] 1))
      (121195 call compilerError "dim() must take a value from 0.." call_tmp[652502])
    }
    unknown call_tmp[652509] "expr temp" "maybe param" "maybe type" "temp"
    (652512 'move' call_tmp[652509](359399 call _value _mt[243] this[126042]))
    unknown call_tmp[652516] "expr temp" "maybe param" "maybe type" "temp"
    (652519 'move' call_tmp[652516](121209 call(121204 call (partial) dsiDim _mt[243] call_tmp[652509]) d[121154]))
    (516817 'move' ret[516812](516816 'deref' call_tmp[652516]))
    (516814 return ret[516812])
  }
  function _domain[125908](?).dimIter[121218](arg _mt[126048]:_MT[238], arg this[126046]:_domain[125908](?), param arg d[121216]:_any[178](?), arg ind[121220]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516821] "RVV" "temp"
    {
      unknown _indexOfInterest[121236] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121237] "expr temp" "temp"
      unknown call_tmp[652523] "expr temp" "maybe param" "maybe type" "temp"
      (652526 'move' call_tmp[652523](359403 call _value _mt[243] this[126046]))
      unknown call_tmp[652530] "expr temp" "maybe param" "maybe type" "temp"
      (652533 'move' call_tmp[652530](121232 call(121226 call (partial) dimIter _mt[243] call_tmp[652523]) d[121216] ind[121220]))
      (121246 'move' _iterator[121237](121244 call _getIterator call_tmp[652530]))
      Defer
      {
        {
          (121263 call _freeIterator _iterator[121237])
        }
      }
      { scopeless type
        (121252 'move' _indexOfInterest[121236](121249 call iteratorIndex _iterator[121237]))
      }
      ForLoop[121238]
      {
        unknown i[121256] "index var" "insert auto destroy"
        (479655 'end of statement')
        (121258 'move' i[121256] _indexOfInterest[121236])
        (479656 'end of statement' i[121256])
        unknown yret[516825] "YVV" "temp"
        (516828 'move' yret[516825](516827 'deref' i[121256]))
        (516830 yield yret[516825])
        (479658 'end of statement' i[121256])
        label _continueLabel[121241]
        _indexOfInterest[121236]
        _iterator[121237]
      }
      label _breakLabel[121242]
    }
    (516823 return ret[516821])
  }
  function _domain[125908](?).shape[121275](arg _mt[126052]:_MT[238], arg this[126050]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516834] "RVV" "temp"
    unknown s[121297] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652537] "expr temp" "maybe param" "maybe type" "temp"
    (652540 'move' call_tmp[652537](382942 call rank _mt[243] this[126050]))
    unknown call_tmp[652544] "expr temp" "maybe param" "maybe type" "temp"
    (652547 'move' call_tmp[652544](121291 call(382946 call (partial) dim _mt[243] this[126050]) 0))
    unknown call_tmp[652551] "expr temp" "maybe param" "maybe type" "temp"
    (652554 'move' call_tmp[652551](121292 call intIdxType _mt[243] call_tmp[652544]))
    unknown call_tmp[652556] "expr temp" "maybe param" "maybe type" "temp"
    (652559 'move' call_tmp[652556](121295 call * call_tmp[652537] call_tmp[652551]))
    (542906 'default init var' s[121297] call_tmp[652556])
    (121300 'end of statement')
    {
      unknown _indexOfInterest[121332] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121333] "expr temp" "temp"
      unknown call_tmp[652563] "expr temp" "maybe param" "maybe type" "temp"
      (652566 'move' call_tmp[652563](121356 call size _mt[243] s[121297]))
      unknown call_tmp[652568] "expr temp" "maybe param" "maybe type" "temp"
      (652571 'move' call_tmp[652568](121360 call chpl_direct_counted_range_iter 0 call_tmp[652563]))
      unknown call_tmp[652573] "expr temp" "maybe param" "maybe type" "temp"
      (652576 'move' call_tmp[652573](121350 call _getIterator call_tmp[652568]))
      unknown call_tmp[652580] "expr temp" "maybe param" "maybe type" "temp"
      (652583 'move' call_tmp[652580](121363 call(382952 call (partial) dims _mt[243] this[126050])))
      unknown call_tmp[652585] "expr temp" "maybe param" "maybe type" "temp"
      (652588 'move' call_tmp[652585](121364 call _getIterator call_tmp[652580]))
      (121367 'move' _iterator[121333](121320 call _build_tuple call_tmp[652573] call_tmp[652585]))
      Defer
      {
        {
          (121397 call _freeIterator _iterator[121333])
        }
      }
      { scopeless type
        (121372 'move' _indexOfInterest[121332](121369 call iteratorIndex _iterator[121333]))
      }
      ForLoop[121334]
      {
        (121377 call _check_tuple_var_decl _indexOfInterest[121332] 2)
        (479661 'end of statement')
        unknown i[121383] "index var" "insert auto destroy"
        (479662 'end of statement')
        (121385 'move' i[121383](121381 call _indexOfInterest[121332] 0))
        (479663 'end of statement' i[121383])
        unknown r[121390] "index var" "insert auto destroy"
        (479665 'end of statement')
        (121392 'move' r[121390](121388 call _indexOfInterest[121332] 1))
        (479666 'end of statement' r[121390])
        unknown call_tmp[652590] "expr temp" "maybe param" "maybe type" "temp"
        (652593 'move' call_tmp[652590](121324 call s[121297] i[121383]))
        unknown call_tmp[652597] "expr temp" "maybe param" "maybe type" "temp"
        (652600 'move' call_tmp[652597](121326 call size _mt[243] r[121390]))
        (121329 call = call_tmp[652590] call_tmp[652597])
        (479668 'end of statement' s[121297] i[121383] r[121390])
        label _continueLabel[121337]
        _indexOfInterest[121332]
        _iterator[121333]
      }
      label _breakLabel[121338]
    }
    (516839 'move' ret[516834](516838 'deref' s[121297]))
    gotoReturn _end_shape[516832] _end_shape[516832]
    (479672 'end of statement' s[121297])
    label _end_shape[516832]
    (516836 return ret[516834])
  }
  where {
    unknown tmp[424607] "maybe param" "temp"
    (424618 'move' tmp[424607](121280 call isRectangularDom this[126050]))
    unknown call_tmp[652602] "expr temp" "maybe param" "maybe type" "temp"
    (652605 'move' call_tmp[652602](424620 call _cond_invalid tmp[424607]))
    if call_tmp[652602]
    {
      (424623 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565076] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565077] "maybe param" "temp"
    unknown call_tmp[652607] "expr temp" "maybe param" "maybe type" "temp"
    (652610 'move' call_tmp[652607](424608 call isTrue tmp[424607]))
    (565082 'move' tmp[565077](565080 call _cond_test call_tmp[652607]))
    if tmp[565077]
    {
      (565087 'move' tmp[565076](565084 '_paramFoldLogical' tmp[565077] 1))
    }
    {
      unknown tmp[565089] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652612] "expr temp" "maybe param" "maybe type" "temp"
      (652615 'move' call_tmp[652612](121284 call isSparseDom this[126050]))
      (565091 'move' tmp[565089](424612 call isTrue call_tmp[652612]))
      (565096 'move' tmp[565076](565093 '_paramFoldLogical' tmp[565077] tmp[565089]))
    }
    (748281 call chpl_statementLevelSymbol tmp[565076])
  }
  function _domain[125908](?).shape[121412](arg _mt[126056]:_MT[238], arg this[126054]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516845] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492186] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652619] "expr temp" "maybe param" "maybe type" "temp"
      (652622 'move' call_tmp[652619](382958 call size _mt[243] this[126054]))
      (492190 'move' call_type_tmp[492186](121419 'typeof' call_tmp[652619]))
    }
    unknown s[121422] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652624] "expr temp" "maybe param" "maybe type" "temp"
    (652627 'move' call_tmp[652624](121420 call _build_tuple call_type_tmp[492186]))
    (542908 'default init var' s[121422] call_tmp[652624])
    (121425 'end of statement')
    unknown call_tmp[652629] "expr temp" "maybe param" "maybe type" "temp"
    (652632 'move' call_tmp[652629](121430 call s[121422] 0))
    unknown call_tmp[652636] "expr temp" "maybe param" "maybe type" "temp"
    (652639 'move' call_tmp[652636](382963 call size _mt[243] this[126054]))
    (121432 call = call_tmp[652629] call_tmp[652636])
    (479674 'end of statement' s[121422])
    (516850 'move' ret[516845](516849 'deref' s[121422]))
    gotoReturn _end_shape[516843] _end_shape[516843]
    (479676 'end of statement' s[121422])
    label _end_shape[516843]
    (516847 return ret[516845])
  }
  where {
    (121417 call isAssociativeDom this[126054])
  }
  function _domain[125908](?).shape[121443](arg _mt[126060]:_MT[238], arg this[126058]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121464 call compilerError ".shape not supported on this domain")
    (516854 return _void[55])
  }
  function _domain[125908](?).buildArray[121473](arg _mt[126064]:_MT[238], arg this[126062]:_domain[125908](?), arg eltType[121471]:_any[178](?), param arg initElts[121476]:bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516860] "RVV" "temp"
    unknown call_tmp[652641] "expr temp" "maybe param" "maybe type" "temp"
    (652644 'move' call_tmp[652641](121481 call == eltType[121471] void[4]))
    unknown call_tmp[652646] "expr temp" "maybe param" "maybe type" "temp"
    (652649 'move' call_tmp[652646](121505 call _cond_test call_tmp[652641]))
    if call_tmp[652646]
    {
      (121502 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652651] "expr temp" "maybe param" "maybe type" "temp"
    (652654 'move' call_tmp[652651](121513 call isGenericType eltType[121471]))
    unknown call_tmp[652656] "expr temp" "maybe param" "maybe type" "temp"
    (652659 'move' call_tmp[652656](121673 call _cond_test call_tmp[652651]))
    if call_tmp[652656]
    {
      unknown call_tmp[652661] "expr temp" "maybe param" "maybe type" "temp"
      (652664 'move' call_tmp[652661](121534 call _cast string[26] eltType[121471]))
      unknown call_tmp[652666] "expr temp" "maybe param" "maybe type" "temp"
      (652669 'move' call_tmp[652666](121536 call + "creating an array with element type " call_tmp[652661]))
      (121539 call compilerWarning call_tmp[652666])
      (479680 'end of statement')
      unknown tmp[424628] "maybe param" "temp"
      (424639 'move' tmp[424628](121545 call isClassType eltType[121471]))
      unknown call_tmp[652671] "expr temp" "maybe param" "maybe type" "temp"
      (652674 'move' call_tmp[652671](424641 call _cond_invalid tmp[424628]))
      if call_tmp[652671]
      {
        (424644 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565103] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565104] "maybe param" "temp"
      unknown call_tmp[652676] "expr temp" "maybe param" "maybe type" "temp"
      (652679 'move' call_tmp[652676](424629 call isTrue tmp[424628]))
      (565109 'move' tmp[565104](565107 call _cond_test call_tmp[652676]))
      if tmp[565104]
      {
        unknown tmp[565111] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652681] "expr temp" "maybe param" "maybe type" "temp"
        (652684 'move' call_tmp[652681](121548 'to borrowed class from unknown' eltType[121471]))
        unknown call_tmp[652686] "expr temp" "maybe param" "maybe type" "temp"
        (652689 'move' call_tmp[652686](121550 call isGenericType call_tmp[652681]))
        unknown call_tmp[652691] "expr temp" "maybe param" "maybe type" "temp"
        (652694 'move' call_tmp[652691](121551 call ! call_tmp[652686]))
        (565113 'move' tmp[565111](424632 call isTrue call_tmp[652691]))
        (565118 'move' tmp[565103](565115 '_paramFoldLogical' tmp[565104] tmp[565111]))
      }
      {
        (565123 'move' tmp[565103](565120 '_paramFoldLogical' tmp[565104] 0))
      }
      unknown call_tmp[652696] "expr temp" "maybe param" "maybe type" "temp"
      (652699 'move' call_tmp[652696](121577 call _cond_test tmp[565103]))
      if call_tmp[652696]
      {
        (121574 call compilerWarning "which now means class type with generic management")
      }
      (121600 call compilerError "array element type cannot currently be generic")
    }
    {
      unknown tmp[424649] "maybe param" "temp"
      (424660 'move' tmp[424649](121605 call isSparseDom this[126062]))
      unknown call_tmp[652701] "expr temp" "maybe param" "maybe type" "temp"
      (652704 'move' call_tmp[652701](424662 call _cond_invalid tmp[424649]))
      if call_tmp[652701]
      {
        (424665 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565130] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565131] "maybe param" "temp"
      unknown call_tmp[652706] "expr temp" "maybe param" "maybe type" "temp"
      (652709 'move' call_tmp[652706](424650 call isTrue tmp[424649]))
      (565136 'move' tmp[565131](565134 call _cond_test call_tmp[652706]))
      if tmp[565131]
      {
        unknown tmp[565138] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652711] "expr temp" "maybe param" "maybe type" "temp"
        (652714 'move' call_tmp[652711](121609 call isDefaultInitializable eltType[121471]))
        unknown call_tmp[652716] "expr temp" "maybe param" "maybe type" "temp"
        (652719 'move' call_tmp[652716](121610 call ! call_tmp[652711]))
        (565140 'move' tmp[565138](424653 call isTrue call_tmp[652716]))
        (565145 'move' tmp[565130](565142 '_paramFoldLogical' tmp[565131] tmp[565138]))
      }
      {
        (565150 'move' tmp[565130](565147 '_paramFoldLogical' tmp[565131] 0))
      }
      unknown call_tmp[652721] "expr temp" "maybe param" "maybe type" "temp"
      (652724 'move' call_tmp[652721](121669 call _cond_test tmp[565130]))
      if call_tmp[652721]
      {
        unknown call_tmp[652726] "expr temp" "maybe param" "maybe type" "temp"
        (652729 'move' call_tmp[652726](121617 call isNonNilableClass eltType[121471]))
        unknown call_tmp[652731] "expr temp" "maybe param" "maybe type" "temp"
        (652734 'move' call_tmp[652731](121664 call _cond_test call_tmp[652726]))
        if call_tmp[652731]
        {
          (121637 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121661 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    unknown call_tmp[652736] "expr temp" "maybe param" "maybe type" "temp"
    (652739 'move' call_tmp[652736](121790 call _cond_test 0))
    if call_tmp[652736]
    {
      unknown tmp[424670] "maybe param" "temp"
      (424681 'move' tmp[424670](121682 call isRectangularDom this[126062]))
      unknown call_tmp[652741] "expr temp" "maybe param" "maybe type" "temp"
      (652744 'move' call_tmp[652741](424683 call _cond_invalid tmp[424670]))
      if call_tmp[652741]
      {
        (424686 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565157] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565158] "maybe param" "temp"
      unknown call_tmp[652746] "expr temp" "maybe param" "maybe type" "temp"
      (652749 'move' call_tmp[652746](424671 call isTrue tmp[424670]))
      (565163 'move' tmp[565158](565161 call _cond_test call_tmp[652746]))
      if tmp[565158]
      {
        unknown tmp[565165] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652753] "expr temp" "maybe param" "maybe type" "temp"
        (652756 'move' call_tmp[652753](121684 call stridable _mt[243] this[126062]))
        (565167 'move' tmp[565165](424674 call isTrue call_tmp[652753]))
        (565172 'move' tmp[565157](565169 '_paramFoldLogical' tmp[565158] tmp[565165]))
      }
      {
        (565177 'move' tmp[565157](565174 '_paramFoldLogical' tmp[565158] 0))
      }
      unknown call_tmp[652758] "expr temp" "maybe param" "maybe type" "temp"
      (652761 'move' call_tmp[652758](121785 call _cond_test tmp[565157]))
      if call_tmp[652758]
      {
        unknown call_tmp[652765] "expr temp" "maybe param" "maybe type" "temp"
        (652768 'move' call_tmp[652765](382978 call rank _mt[243] this[126062]))
        unknown call_tmp[652770] "expr temp" "maybe param" "maybe type" "temp"
        (652773 'move' call_tmp[652770](121691 call == call_tmp[652765] 1))
        unknown call_tmp[652775] "expr temp" "maybe param" "maybe type" "temp"
        (652778 'move' call_tmp[652775](121781 call _cond_test call_tmp[652770]))
        if call_tmp[652775]
        {
          unknown call_tmp[652782] "expr temp" "maybe param" "maybe type" "temp"
          (652785 'move' call_tmp[652782](121694 call stride _mt[243] this[126062]))
          unknown call_tmp[652787] "expr temp" "maybe param" "maybe type" "temp"
          (652790 'move' call_tmp[652787](121698 call < call_tmp[652782] 0))
          unknown call_tmp[652792] "expr temp" "maybe param" "maybe type" "temp"
          (652795 'move' call_tmp[652792](121721 call _cond_test call_tmp[652787]))
          if call_tmp[652792]
          {
            (121719 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121746] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121747] "expr temp" "temp"
            unknown call_tmp[652799] "expr temp" "maybe param" "maybe type" "temp"
            (652802 'move' call_tmp[652799](121729 call stride _mt[243] this[126062]))
            (121756 'move' _iterator[121747](121754 call _getIterator call_tmp[652799]))
            Defer
            {
              {
                (121773 call _freeIterator _iterator[121747])
              }
            }
            { scopeless type
              (121762 'move' _indexOfInterest[121746](121759 call iteratorIndex _iterator[121747]))
            }
            ForLoop[121748]
            {
              unknown s[121766] "index var" "insert auto destroy"
              (479690 'end of statement')
              (121768 'move' s[121766] _indexOfInterest[121746])
              (479691 'end of statement' s[121766])
              unknown call_tmp[652804] "expr temp" "maybe param" "maybe type" "temp"
              (652807 'move' call_tmp[652804](121734 call < s[121766] 0))
              unknown call_tmp[652809] "expr temp" "maybe param" "maybe type" "temp"
              (652812 'move' call_tmp[652809](121741 call _cond_test call_tmp[652804]))
              if call_tmp[652809]
              {
                (121739 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121751]
              _indexOfInterest[121746]
              _iterator[121747]
            }
            label _breakLabel[121752]
          }
        }
      }
    }
    unknown call_tmp[652816] "expr temp" "maybe param" "maybe type" "temp"
    (652819 'move' call_tmp[652816](359412 call _value _mt[243] this[126062]))
    unknown call_tmp[652823] "maybe param" "maybe type" "temp"
    (652826 'move' call_tmp[652823](121804 call(121798 call (partial) dsiBuildArray _mt[243] call_tmp[652816]) eltType[121471] initElts[121476]))
    unknown x[121805] "dead at end of block" "insert auto destroy"
    (542910 'init var' x[121805] call_tmp[652823])
    (121808 'end of statement')
    function help[121811]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652830] "expr temp" "maybe param" "maybe type" "temp"
      (652833 'move' call_tmp[652830](359416 call _value _mt[243] this[126062]))
      (121821 call(121816 call (partial) add_arr _mt[243] call_tmp[652830]) x[121805])
      (516856 return _void[55])
    }
    (121828 call help)
    (479695 'end of statement')
    unknown call_tmp[652839] "expr temp" "maybe param" "maybe type" "temp"
    (652842 'move' call_tmp[652839](121834 call eltType _mt[243] x[121805]))
    (121837 call chpl_incRefCountsForDomainsInArrayEltTypes x[121805] call_tmp[652839])
    (479696 'end of statement' x[121805] x[121805])
    unknown call_tmp[652844] "expr temp" "maybe param" "maybe type" "temp"
    (652847 'move' call_tmp[652844](121842 call _newArray x[121805]))
    (516865 'move' ret[516860](516864 'deref' call_tmp[652844]))
    gotoReturn _end_buildArray[516858] _end_buildArray[516858]
    (479699 'end of statement' x[121805])
    label _end_buildArray[516858]
    (516862 return ret[516860])
  }
  function _domain[125908](?).buildArrayWith[121851](arg _mt[126068]:_MT[238], arg this[126066]:_domain[125908](?), arg eltType[121849]:_any[178](?), arg data[121857] :
  (121856 call _ddata[11696](?) eltType[121849]), arg allocSize[121861]:int(64)[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516873] "RVV" "temp"
    unknown call_tmp[652849] "expr temp" "maybe param" "maybe type" "temp"
    (652852 'move' call_tmp[652849](121866 call == eltType[121849] void[4]))
    unknown call_tmp[652854] "expr temp" "maybe param" "maybe type" "temp"
    (652857 'move' call_tmp[652854](121874 call _cond_test call_tmp[652849]))
    if call_tmp[652854]
    {
      (121871 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652861] "expr temp" "maybe param" "maybe type" "temp"
    (652864 'move' call_tmp[652861](359421 call _value _mt[243] this[126066]))
    unknown call_tmp[652868] "maybe param" "maybe type" "temp"
    (652871 'move' call_tmp[652868](121889 call(121882 call (partial) dsiBuildArrayWith _mt[243] call_tmp[652861]) eltType[121849] data[121857] allocSize[121861]))
    unknown x[121890] "dead at end of block" "insert auto destroy"
    (542912 'init var' x[121890] call_tmp[652868])
    (121893 'end of statement')
    function help[121896]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652875] "expr temp" "maybe param" "maybe type" "temp"
      (652878 'move' call_tmp[652875](359425 call _value _mt[243] this[126066]))
      (121904 call(121899 call (partial) add_arr _mt[243] call_tmp[652875]) x[121890])
      (516869 return _void[55])
    }
    (121911 call help)
    (479703 'end of statement')
    unknown call_tmp[652884] "expr temp" "maybe param" "maybe type" "temp"
    (652887 'move' call_tmp[652884](121917 call eltType _mt[243] x[121890]))
    (121920 call chpl_incRefCountsForDomainsInArrayEltTypes x[121890] call_tmp[652884])
    (479704 'end of statement' x[121890] x[121890])
    unknown call_tmp[652889] "expr temp" "maybe param" "maybe type" "temp"
    (652892 'move' call_tmp[652889](121925 call _newArray x[121890]))
    (516878 'move' ret[516873](516877 'deref' call_tmp[652889]))
    gotoReturn _end_buildArrayWith[516871] _end_buildArrayWith[516871]
    (479707 'end of statement' x[121890])
    label _end_buildArrayWith[516871]
    (516875 return ret[516873])
  }
  function _domain[125908](?).clear[121932](arg _mt[126072]:_MT[238], arg this[126070]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121940] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652894] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (652897 'move' call_tmp[652894](121939 'typeof' this[126070]))
    (542914 'default init var' emptyDom[121940] call_tmp[652894])
    (121943 'end of statement')
    (121947 call = this[126070] emptyDom[121940])
    (479709 'end of statement' emptyDom[121940])
    (516882 return _void[55])
  }
  where {
    (121937 call isRectangularDom this[126070])
  }
  function _domain[125908](?).clear[121955](arg _mt[126076]:_MT[238], arg this[126074]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652901] "expr temp" "maybe param" "maybe type" "temp"
    (652904 'move' call_tmp[652901](359430 call _value _mt[243] this[126074]))
    (121964 call(121960 call (partial) dsiClear _mt[243] call_tmp[652901]))
    (516884 return _void[55])
  }
  function _domain[125908](?).add[121973](arg _mt[126080]:_MT[238], arg this[126078]:_domain[125908](?), in arg i[121971]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516888] "RVV" "temp"
    unknown call_tmp[652910] "expr temp" "maybe param" "maybe type" "temp"
    (652913 'move' call_tmp[652910](359434 call _value _mt[243] this[126078]))
    unknown call_tmp[652917] "expr temp" "maybe param" "maybe type" "temp"
    (652920 'move' call_tmp[652917](121983 call(121978 call (partial) dsiAdd _mt[243] call_tmp[652910]) i[121971]))
    (516893 'move' ret[516888](516892 'deref' call_tmp[652917]))
    (516890 return ret[516888])
  }
  function _domain[125908](?).bulkAdd[122001](arg _mt[126084]:_MT[238], arg this[126082]:_domain[125908](?), arg inds[121998]:_array[133594](?), arg dataSorted[122004] :
  0 =
  0, arg isUnique[122008] :
  0 =
  0, arg preserveInds[122012] :
  1 =
  1, arg addOn[122016] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516897] "RVV" "temp"
    unknown call_tmp[652924] "expr temp" "maybe param" "maybe type" "temp"
    (652927 'move' call_tmp[652924](122033 call size _mt[243] inds[121998]))
    unknown call_tmp[652929] "expr temp" "maybe param" "maybe type" "temp"
    (652932 'move' call_tmp[652929](122037 call == call_tmp[652924] 0))
    unknown call_tmp[652934] "expr temp" "maybe param" "maybe type" "temp"
    (652937 'move' call_tmp[652934](122042 call _cond_test call_tmp[652929]))
    if call_tmp[652934]
    {
      (516902 'move' ret[516897](516901 'deref' 0))
      gotoReturn _end_bulkAdd[516895] _end_bulkAdd[516895]
    }
    unknown call_tmp[652941] "expr temp" "maybe param" "maybe type" "temp"
    (652944 'move' call_tmp[652941](359447 call _value _mt[243] this[126082]))
    unknown call_tmp[652948] "expr temp" "maybe param" "maybe type" "temp"
    (652951 'move' call_tmp[652948](122060 call(122051 call (partial) dsiBulkAdd _mt[243] call_tmp[652941]) inds[121998] dataSorted[122004] isUnique[122008] preserveInds[122012] addOn[122016]))
    (516907 'move' ret[516897](516906 'deref' call_tmp[652948]))
    label _end_bulkAdd[516895]
    (516899 return ret[516897])
  }
  where {
    unknown tmp[424691] "maybe param" "temp"
    (424702 'move' tmp[424691](122022 call isSparseDom this[126082]))
    unknown call_tmp[652953] "expr temp" "maybe param" "maybe type" "temp"
    (652956 'move' call_tmp[652953](424704 call _cond_invalid tmp[424691]))
    if call_tmp[652953]
    {
      (424707 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565184] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565185] "maybe param" "temp"
    unknown call_tmp[652958] "expr temp" "maybe param" "maybe type" "temp"
    (652961 'move' call_tmp[652958](424692 call isTrue tmp[424691]))
    (565190 'move' tmp[565185](565188 call _cond_test call_tmp[652958]))
    if tmp[565185]
    {
      unknown tmp[565192] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652965] "expr temp" "maybe param" "maybe type" "temp"
      (652968 'move' call_tmp[652965](359442 call _value _mt[243] this[126082]))
      unknown call_tmp[652972] "expr temp" "maybe param" "maybe type" "temp"
      (652975 'move' call_tmp[652972](122024 call rank _mt[243] call_tmp[652965]))
      unknown call_tmp[652977] "expr temp" "maybe param" "maybe type" "temp"
      (652980 'move' call_tmp[652977](122028 call == call_tmp[652972] 1))
      (565194 'move' tmp[565192](424695 call isTrue call_tmp[652977]))
      (565199 'move' tmp[565184](565196 '_paramFoldLogical' tmp[565185] tmp[565192]))
    }
    {
      (565204 'move' tmp[565184](565201 '_paramFoldLogical' tmp[565185] 0))
    }
    unknown call_tmp[652984] "expr temp" "maybe param" "maybe type" "temp"
    (652987 'move' call_tmp[652984](359438 call _value _mt[243] this[126082]))
    unknown call_tmp[652991] "expr temp" "maybe param" "maybe type" "temp"
    (652994 'move' call_tmp[652991](121992 call idxType _mt[243] call_tmp[652984]))
    unknown call_tmp[652998] "expr temp" "maybe param" "maybe type" "temp"
    (653001 'move' call_tmp[652998](461439 call eltType _mt[243] inds[121998]))
    unknown call_tmp[653003] "expr temp" "maybe param" "maybe type" "temp"
    (653006 'move' call_tmp[653003](461443 call == call_tmp[652991] call_tmp[652998]))
    (461437 call & tmp[565184] call_tmp[653003])
  }
  function _domain[125908](?).makeIndexBuffer[122072](arg _mt[126088]:_MT[238], arg this[126086]:_domain[125908](?), arg size[122069]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516911] "RVV" "temp"
    unknown call_tmp[653010] "expr temp" "maybe param" "maybe type" "temp"
    (653013 'move' call_tmp[653010](359451 call _value _mt[243] this[126086]))
    unknown call_tmp[653017] "expr temp" "maybe param" "maybe type" "temp"
    (653020 'move' call_tmp[653017](122082 call(122077 call (partial) dsiMakeIndexBuffer _mt[243] call_tmp[653010]) size[122069]))
    (516916 'move' ret[516911](516915 'deref' call_tmp[653017]))
    (516913 return ret[516911])
  }
  function _domain[125908](?).bulkAdd[122106](arg _mt[126092]:_MT[238], arg this[126090]:_domain[125908](?), arg inds[122103]:_array[133594](?), arg dataSorted[122109] :
  0 =
  0, arg isUnique[122113] :
  0 =
  0, arg preserveInds[122117] :
  1 =
  1, arg addOn[122121] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516920] "RVV" "temp"
    unknown call_tmp[653024] "expr temp" "maybe param" "maybe type" "temp"
    (653027 'move' call_tmp[653024](122138 call size _mt[243] inds[122103]))
    unknown call_tmp[653029] "expr temp" "maybe param" "maybe type" "temp"
    (653032 'move' call_tmp[653029](122142 call == call_tmp[653024] 0))
    unknown call_tmp[653034] "expr temp" "maybe param" "maybe type" "temp"
    (653037 'move' call_tmp[653034](122147 call _cond_test call_tmp[653029]))
    if call_tmp[653034]
    {
      (516925 'move' ret[516920](516924 'deref' 0))
      gotoReturn _end_bulkAdd[516918] _end_bulkAdd[516918]
    }
    unknown call_tmp[653041] "expr temp" "maybe param" "maybe type" "temp"
    (653044 'move' call_tmp[653041](359468 call _value _mt[243] this[126090]))
    unknown call_tmp[653048] "expr temp" "maybe param" "maybe type" "temp"
    (653051 'move' call_tmp[653048](122163 call(122154 call (partial) dsiBulkAdd _mt[243] call_tmp[653041]) inds[122103] dataSorted[122109] isUnique[122113] preserveInds[122117] addOn[122121]))
    (516930 'move' ret[516920](516929 'deref' call_tmp[653048]))
    label _end_bulkAdd[516918]
    (516922 return ret[516920])
  }
  where {
    unknown tmp[424712] "maybe param" "temp"
    (424723 'move' tmp[424712](122127 call isSparseDom this[126090]))
    unknown call_tmp[653053] "expr temp" "maybe param" "maybe type" "temp"
    (653056 'move' call_tmp[653053](424725 call _cond_invalid tmp[424712]))
    if call_tmp[653053]
    {
      (424728 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565211] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565212] "maybe param" "temp"
    unknown call_tmp[653058] "expr temp" "maybe param" "maybe type" "temp"
    (653061 'move' call_tmp[653058](424713 call isTrue tmp[424712]))
    (565217 'move' tmp[565212](565215 call _cond_test call_tmp[653058]))
    if tmp[565212]
    {
      unknown tmp[565219] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653065] "expr temp" "maybe param" "maybe type" "temp"
      (653068 'move' call_tmp[653065](359463 call _value _mt[243] this[126090]))
      unknown call_tmp[653072] "expr temp" "maybe param" "maybe type" "temp"
      (653075 'move' call_tmp[653072](122129 call rank _mt[243] call_tmp[653065]))
      unknown call_tmp[653077] "expr temp" "maybe param" "maybe type" "temp"
      (653080 'move' call_tmp[653077](122133 call > call_tmp[653072] 1))
      (565221 'move' tmp[565219](424716 call isTrue call_tmp[653077]))
      (565226 'move' tmp[565211](565223 '_paramFoldLogical' tmp[565212] tmp[565219]))
    }
    {
      (565231 'move' tmp[565211](565228 '_paramFoldLogical' tmp[565212] 0))
    }
    unknown call_tmp[653084] "expr temp" "maybe param" "maybe type" "temp"
    (653087 'move' call_tmp[653084](359455 call _value _mt[243] this[126090]))
    unknown call_tmp[653091] "expr temp" "maybe param" "maybe type" "temp"
    (653094 'move' call_tmp[653091](122091 call rank _mt[243] call_tmp[653084]))
    unknown call_tmp[653098] "expr temp" "maybe param" "maybe type" "temp"
    (653101 'move' call_tmp[653098](359459 call _value _mt[243] this[126090]))
    unknown call_tmp[653105] "expr temp" "maybe param" "maybe type" "temp"
    (653108 'move' call_tmp[653105](122095 call idxType _mt[243] call_tmp[653098]))
    unknown call_tmp[653110] "expr temp" "maybe param" "maybe type" "temp"
    (653113 'move' call_tmp[653110](122098 call * call_tmp[653091] call_tmp[653105]))
    unknown call_tmp[653117] "expr temp" "maybe param" "maybe type" "temp"
    (653120 'move' call_tmp[653117](461449 call eltType _mt[243] inds[122103]))
    unknown call_tmp[653122] "expr temp" "maybe param" "maybe type" "temp"
    (653125 'move' call_tmp[653122](461453 call == call_tmp[653110] call_tmp[653117]))
    (461447 call & tmp[565211] call_tmp[653122])
  }
  function _domain[125908](?).remove[122173](arg _mt[126096]:_MT[238], arg this[126094]:_domain[125908](?), arg i[122171]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516934] "RVV" "temp"
    unknown call_tmp[653129] "expr temp" "maybe param" "maybe type" "temp"
    (653132 'move' call_tmp[653129](359472 call _value _mt[243] this[126094]))
    unknown call_tmp[653136] "expr temp" "maybe param" "maybe type" "temp"
    (653139 'move' call_tmp[653136](122183 call(122178 call (partial) dsiRemove _mt[243] call_tmp[653129]) i[122171]))
    (516939 'move' ret[516934](516938 'deref' call_tmp[653136]))
    (516936 return ret[516934])
  }
  function _domain[125908](?).requestCapacity[122193](arg _mt[126100]:_MT[238], arg this[126098]:_domain[125908](?), arg i[122191]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[653141] "expr temp" "maybe param" "maybe type" "temp"
    (653144 'move' call_tmp[653141](122197 call < i[122191] 0))
    unknown call_tmp[653146] "expr temp" "maybe param" "maybe type" "temp"
    (653149 'move' call_tmp[653146](122221 call _cond_test call_tmp[653141]))
    if call_tmp[653146]
    {
      (122218 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    unknown call_tmp[653151] "expr temp" "maybe param" "maybe type" "temp"
    (653154 'move' call_tmp[653151](122229 call isAssociativeDom this[126098]))
    unknown call_tmp[653156] "expr temp" "maybe param" "maybe type" "temp"
    (653159 'move' call_tmp[653156](122230 call ! call_tmp[653151]))
    unknown call_tmp[653161] "expr temp" "maybe param" "maybe type" "temp"
    (653164 'move' call_tmp[653161](122253 call _cond_test call_tmp[653156]))
    if call_tmp[653161]
    {
      (122251 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[653168] "expr temp" "maybe param" "maybe type" "temp"
    (653171 'move' call_tmp[653168](359476 call _value _mt[243] this[126098]))
    (122266 call(122261 call (partial) dsiRequestCapacity _mt[243] call_tmp[653168]) i[122191])
    (516941 return _void[55])
  }
  function _domain[125908](?).size[122272](arg _mt[126104]:_MT[238], arg this[126102]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516945] "RVV" "temp"
    unknown call_tmp[653177] "expr temp" "maybe param" "maybe type" "temp"
    (653180 'move' call_tmp[653177](359480 call _value _mt[243] this[126102]))
    unknown call_tmp[653184] "expr temp" "maybe param" "maybe type" "temp"
    (653187 'move' call_tmp[653184](122275 call dsiNumIndices _mt[243] call_tmp[653177]))
    (516950 'move' ret[516945](516949 'deref' call_tmp[653184]))
    (516947 return ret[516945])
  }
  function _domain[125908](?).numIndices[122285](arg _mt[126108]:_MT[238], arg this[126106]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516954] "RVV" "temp"
    unknown call_tmp[653189] "expr temp" "maybe param" "maybe type" "temp"
    (653192 'move' call_tmp[653189](122322 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122325 call compilerWarning call_tmp[653189])
    (479723 'end of statement')
    unknown call_tmp[653196] "expr temp" "maybe param" "maybe type" "temp"
    (653199 'move' call_tmp[653196](383021 call size _mt[243] this[126106]))
    (516959 'move' ret[516954](516958 'deref' call_tmp[653196]))
    (516956 return ret[516954])
  }
  function _domain[125908](?).low[122335](arg _mt[126112]:_MT[238], arg this[126110]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516963] "RVV" "temp"
    unknown call_tmp[653203] "expr temp" "maybe param" "maybe type" "temp"
    (653206 'move' call_tmp[653203](359484 call _value _mt[243] this[126110]))
    unknown call_tmp[653210] "expr temp" "maybe param" "maybe type" "temp"
    (653213 'move' call_tmp[653210](122338 call dsiLow _mt[243] call_tmp[653203]))
    (516968 'move' ret[516963](516967 'deref' call_tmp[653210]))
    (516965 return ret[516963])
  }
  function _domain[125908](?).high[122348](arg _mt[126116]:_MT[238], arg this[126114]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516972] "RVV" "temp"
    unknown call_tmp[653217] "expr temp" "maybe param" "maybe type" "temp"
    (653220 'move' call_tmp[653217](359488 call _value _mt[243] this[126114]))
    unknown call_tmp[653224] "expr temp" "maybe param" "maybe type" "temp"
    (653227 'move' call_tmp[653224](122353 call dsiHigh _mt[243] call_tmp[653217]))
    (516977 'move' ret[516972](516976 'deref' call_tmp[653224]))
    (516974 return ret[516972])
  }
  function _domain[125908](?).stride[122363](arg _mt[126120]:_MT[238], arg this[126118]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516981] "RVV" "temp"
    unknown call_tmp[653231] "expr temp" "maybe param" "maybe type" "temp"
    (653234 'move' call_tmp[653231](359492 call _value _mt[243] this[126118]))
    unknown call_tmp[653238] "expr temp" "maybe param" "maybe type" "temp"
    (653241 'move' call_tmp[653238](122366 call dsiStride _mt[243] call_tmp[653231]))
    (516986 'move' ret[516981](516985 'deref' call_tmp[653238]))
    (516983 return ret[516981])
  }
  function _domain[125908](?).alignment[122376](arg _mt[126124]:_MT[238], arg this[126122]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516990] "RVV" "temp"
    unknown call_tmp[653245] "expr temp" "maybe param" "maybe type" "temp"
    (653248 'move' call_tmp[653245](359496 call _value _mt[243] this[126122]))
    unknown call_tmp[653252] "expr temp" "maybe param" "maybe type" "temp"
    (653255 'move' call_tmp[653252](122381 call dsiAlignment _mt[243] call_tmp[653245]))
    (516995 'move' ret[516990](516994 'deref' call_tmp[653252]))
    (516992 return ret[516990])
  }
  function _domain[125908](?).first[122391](arg _mt[126128]:_MT[238], arg this[126126]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516999] "RVV" "temp"
    unknown call_tmp[653259] "expr temp" "maybe param" "maybe type" "temp"
    (653262 'move' call_tmp[653259](359500 call _value _mt[243] this[126126]))
    unknown call_tmp[653266] "expr temp" "maybe param" "maybe type" "temp"
    (653269 'move' call_tmp[653266](122396 call dsiFirst _mt[243] call_tmp[653259]))
    (517004 'move' ret[516999](517003 'deref' call_tmp[653266]))
    (517001 return ret[516999])
  }
  function _domain[125908](?).last[122406](arg _mt[126132]:_MT[238], arg this[126130]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517008] "RVV" "temp"
    unknown call_tmp[653273] "expr temp" "maybe param" "maybe type" "temp"
    (653276 'move' call_tmp[653273](359504 call _value _mt[243] this[126130]))
    unknown call_tmp[653280] "expr temp" "maybe param" "maybe type" "temp"
    (653283 'move' call_tmp[653280](122411 call dsiLast _mt[243] call_tmp[653273]))
    (517013 'move' ret[517008](517012 'deref' call_tmp[653280]))
    (517010 return ret[517008])
  }
  function _domain[125908](?).alignedLow[122421](arg _mt[126136]:_MT[238], arg this[126134]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517017] "RVV" "temp"
    unknown call_tmp[653287] "expr temp" "maybe param" "maybe type" "temp"
    (653290 'move' call_tmp[653287](359508 call _value _mt[243] this[126134]))
    unknown call_tmp[653294] "expr temp" "maybe param" "maybe type" "temp"
    (653297 'move' call_tmp[653294](122426 call dsiAlignedLow _mt[243] call_tmp[653287]))
    (517022 'move' ret[517017](517021 'deref' call_tmp[653294]))
    (517019 return ret[517017])
  }
  function _domain[125908](?).alignedHigh[122436](arg _mt[126140]:_MT[238], arg this[126138]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517026] "RVV" "temp"
    unknown call_tmp[653301] "expr temp" "maybe param" "maybe type" "temp"
    (653304 'move' call_tmp[653301](359512 call _value _mt[243] this[126138]))
    unknown call_tmp[653308] "expr temp" "maybe param" "maybe type" "temp"
    (653311 'move' call_tmp[653308](122441 call dsiAlignedHigh _mt[243] call_tmp[653301]))
    (517031 'move' ret[517026](517030 'deref' call_tmp[653308]))
    (517028 return ret[517026])
  }
  function _domain[125908](?).indices[122451](arg _mt[126144]:_MT[238], arg this[126142]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122472 call compilerError "domains do not support '.indices'")
    (517033 return _void[55])
  }
  function _domain[125908](?).contains[122489](arg _mt[126148]:_MT[238], arg this[126146]:_domain[125908](?), arg i[122486] :
  unknown call_tmp[653315] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517037] "RVV" "temp"
    unknown tmp[424733] "maybe param" "temp"
    (424744 'move' tmp[424733](122494 call isRectangularDom this[126146]))
    unknown call_tmp[653334] "expr temp" "maybe param" "maybe type" "temp"
    (653337 'move' call_tmp[653334](424746 call _cond_invalid tmp[424733]))
    if call_tmp[653334]
    {
      (424749 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565238] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565239] "maybe param" "temp"
    unknown call_tmp[653339] "expr temp" "maybe param" "maybe type" "temp"
    (653342 'move' call_tmp[653339](424734 call isTrue tmp[424733]))
    (565244 'move' tmp[565239](565242 call _cond_test call_tmp[653339]))
    if tmp[565239]
    {
      (565249 'move' tmp[565238](565246 '_paramFoldLogical' tmp[565239] 1))
    }
    {
      unknown tmp[565251] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653344] "expr temp" "maybe param" "maybe type" "temp"
      (653347 'move' call_tmp[653344](122498 call isSparseDom this[126146]))
      (565253 'move' tmp[565251](424738 call isTrue call_tmp[653344]))
      (565258 'move' tmp[565238](565255 '_paramFoldLogical' tmp[565239] tmp[565251]))
    }
    unknown call_tmp[653349] "expr temp" "maybe param" "maybe type" "temp"
    (653352 'move' call_tmp[653349](122526 call _cond_test tmp[565238]))
    if call_tmp[653349]
    {
      unknown call_tmp[653356] "expr temp" "maybe param" "maybe type" "temp"
      (653359 'move' call_tmp[653356](359520 call _value _mt[243] this[126146]))
      unknown call_tmp[653365] "expr temp" "maybe param" "maybe type" "temp"
      (653368 'move' call_tmp[653365](383031 call rank _mt[243] this[126146]))
      unknown call_tmp[653370] "expr temp" "maybe param" "maybe type" "temp"
      (653373 'move' call_tmp[653370](122509 call _makeIndexTuple call_tmp[653365] i[122486]))
      unknown call_tmp[653375] "expr temp" "maybe param" "maybe type" "temp"
      (653378 'move' call_tmp[653375](122511 call(122502 call (partial) dsiMember _mt[243] call_tmp[653356]) call_tmp[653370]))
      (517042 'move' ret[517037](517041 'deref' call_tmp[653375]))
      gotoReturn _end_contains[517035] _end_contains[517035]
    }
    {
      unknown call_tmp[653382] "expr temp" "maybe param" "maybe type" "temp"
      (653385 'move' call_tmp[653382](359524 call _value _mt[243] this[126146]))
      unknown call_tmp[653389] "expr temp" "maybe param" "maybe type" "temp"
      (653392 'move' call_tmp[653389](122521 call i[122486] 0))
      unknown call_tmp[653394] "expr temp" "maybe param" "maybe type" "temp"
      (653397 'move' call_tmp[653394](122523 call(122515 call (partial) dsiMember _mt[243] call_tmp[653382]) call_tmp[653389]))
      (517047 'move' ret[517037](517046 'deref' call_tmp[653394]))
      gotoReturn _end_contains[517035] _end_contains[517035]
    }
    label _end_contains[517035]
    (517039 return ret[517037])
  }
  function _domain[125908](?).contains[122546](arg _mt[126152]:_MT[238], arg this[126150]:_domain[125908](?), arg i[122542] ... :
  unknown call_tmp[653401] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517053] "RVV" "temp"
    unknown call_tmp[653412] "expr temp" "maybe param" "maybe type" "temp"
    (653415 'move' call_tmp[653412](122551 call(383041 call (partial) contains _mt[243] this[126150]) i[122542]))
    (517058 'move' ret[517053](517057 'deref' call_tmp[653412]))
    (517055 return ret[517053])
  }
  function _domain[125908](?).member[122569](arg _mt[126156]:_MT[238], arg this[126154]:_domain[125908](?), arg i[122566] :
  unknown call_tmp[653419] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[517062] "RVV" "temp"
    unknown call_tmp[653438] "expr temp" "maybe param" "maybe type" "temp"
    (653441 'move' call_tmp[653438](122606 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122609 call compilerWarning call_tmp[653438])
    (479738 'end of statement')
    unknown call_tmp[653445] "expr temp" "maybe param" "maybe type" "temp"
    (653448 'move' call_tmp[653445](122618 call(122613 call (partial) contains _mt[243] this[126154]) i[122566]))
    (517067 'move' ret[517062](517066 'deref' call_tmp[653445]))
    (517064 return ret[517062])
  }
  function _domain[125908](?).member[122634](arg _mt[126160]:_MT[238], arg this[126158]:_domain[125908](?), arg i[122630] ... :
  unknown call_tmp[653452] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517071] "RVV" "temp"
    unknown call_tmp[653461] "expr temp" "maybe param" "maybe type" "temp"
    (653464 'move' call_tmp[653461](122639 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122642 call compilerWarning call_tmp[653461])
    (479740 'end of statement')
    unknown call_tmp[653468] "expr temp" "maybe param" "maybe type" "temp"
    (653471 'move' call_tmp[653468](122651 call(122646 call (partial) contains _mt[243] this[126158]) i[122630]))
    (517076 'move' ret[517071](517075 'deref' call_tmp[653468]))
    (517073 return ret[517071])
  }
  function _domain[125908](?).isSubset[122662](arg _mt[126164]:_MT[238], arg this[126162]:_domain[125908](?), arg super[122659]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517080] "RVV" "temp"
    unknown tmp[424754] "maybe param" "temp"
    (424765 'move' tmp[424754](122667 call isAssociativeDom this[126162]))
    unknown call_tmp[653473] "expr temp" "maybe param" "maybe type" "temp"
    (653476 'move' call_tmp[653473](424767 call _cond_invalid tmp[424754]))
    if call_tmp[653473]
    {
      (424770 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565265] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565266] "maybe param" "temp"
    unknown call_tmp[653478] "expr temp" "maybe param" "maybe type" "temp"
    (653481 'move' call_tmp[653478](424755 call isTrue tmp[424754]))
    (565271 'move' tmp[565266](565269 call _cond_test call_tmp[653478]))
    if tmp[565266]
    {
      (565276 'move' tmp[565265](565273 '_paramFoldLogical' tmp[565266] 1))
    }
    {
      unknown tmp[565278] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653483] "expr temp" "maybe param" "maybe type" "temp"
      (653486 'move' call_tmp[653483](122671 call isRectangularDom this[126162]))
      (565280 'move' tmp[565278](424759 call isTrue call_tmp[653483]))
      (565285 'move' tmp[565265](565282 '_paramFoldLogical' tmp[565266] tmp[565278]))
    }
    unknown call_tmp[653488] "expr temp" "maybe param" "maybe type" "temp"
    (653491 'move' call_tmp[653488](122674 call ! tmp[565265]))
    unknown call_tmp[653493] "expr temp" "maybe param" "maybe type" "temp"
    (653496 'move' call_tmp[653493](122729 call _cond_test call_tmp[653488]))
    if call_tmp[653493]
    {
      unknown call_tmp[653498] "expr temp" "maybe param" "maybe type" "temp"
      (653501 'move' call_tmp[653498](122679 call isSparseDom this[126162]))
      unknown call_tmp[653503] "expr temp" "maybe param" "maybe type" "temp"
      (653506 'move' call_tmp[653503](122722 call _cond_test call_tmp[653498]))
      if call_tmp[653503]
      {
        (122699 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122720 call compilerError "isSubset not supported on this domain type")
      }
    }
    unknown call_tmp[653508] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653511 'move' call_tmp[653508](122735 'typeof' super[122659]))
    unknown call_tmp[653513] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653516 'move' call_tmp[653513](122737 'typeof' this[126162]))
    unknown call_tmp[653518] "expr temp" "maybe param" "maybe type" "temp"
    (653521 'move' call_tmp[653518](122738 call != call_tmp[653508] call_tmp[653513]))
    unknown call_tmp[653523] "expr temp" "maybe param" "maybe type" "temp"
    (653526 'move' call_tmp[653523](122846 call _cond_test call_tmp[653518]))
    if call_tmp[653523]
    {
      unknown call_tmp[653528] "expr temp" "maybe param" "maybe type" "temp"
      (653531 'move' call_tmp[653528](122743 call isRectangularDom this[126162]))
      unknown call_tmp[653533] "expr temp" "maybe param" "maybe type" "temp"
      (653536 'move' call_tmp[653533](122841 call _cond_test call_tmp[653528]))
      if call_tmp[653533]
      {
        unknown call_tmp[653540] "expr temp" "maybe param" "maybe type" "temp"
        (653543 'move' call_tmp[653540](122745 call rank _mt[243] super[122659]))
        unknown call_tmp[653547] "expr temp" "maybe param" "maybe type" "temp"
        (653550 'move' call_tmp[653547](122749 call rank _mt[243] this[126162]))
        unknown call_tmp[653552] "expr temp" "maybe param" "maybe type" "temp"
        (653555 'move' call_tmp[653552](122752 call != call_tmp[653540] call_tmp[653547]))
        unknown call_tmp[653557] "expr temp" "maybe param" "maybe type" "temp"
        (653560 'move' call_tmp[653557](122813 call _cond_test call_tmp[653552]))
        if call_tmp[653557]
        {
          (122773 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492192] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653564] "expr temp" "maybe param" "maybe type" "temp"
            (653567 'move' call_tmp[653564](122776 call low _mt[243] super[122659]))
            (492196 'move' call_type_tmp[492192](122779 'typeof' call_tmp[653564]))
          }
          { scopeless type
            unknown call_type_tmp[492198] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653571] "expr temp" "maybe param" "maybe type" "temp"
            (653574 'move' call_tmp[653571](122781 call low _mt[243] this[126162]))
            (492202 'move' call_type_tmp[492198](122784 'typeof' call_tmp[653571]))
          }
          unknown call_tmp[653576] "expr temp" "maybe param" "maybe type" "temp"
          (653579 'move' call_tmp[653576](122785 call != call_type_tmp[492192] call_type_tmp[492198]))
          unknown call_tmp[653581] "expr temp" "maybe param" "maybe type" "temp"
          (653584 'move' call_tmp[653581](122808 call _cond_test call_tmp[653576]))
          if call_tmp[653581]
          {
            (122806 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122839 call compilerError "isSubset called with different associative domain types")
      }
    }
    unknown call_tmp[653586] "expr temp" "maybe param" "maybe type" "temp"
    (653589 'move' call_tmp[653586](122854 call isRectangularDom this[126162]))
    unknown call_tmp[653591] "expr temp" "maybe param" "maybe type" "temp"
    (653594 'move' call_tmp[653591](122977 call _cond_test call_tmp[653586]))
    if call_tmp[653591]
    {
      unknown contains[122856] "dead at end of block" "insert auto destroy"
      (542916 'init var' contains[122856] 1)
      (122859 'end of statement')
      {
        unknown _indexOfInterest[122926] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122927] "expr temp" "temp"
        unknown call_tmp[653598] "expr temp" "maybe param" "maybe type" "temp"
        (653601 'move' call_tmp[653598](122948 call(122945 call (partial) dims _mt[243] this[126162])))
        unknown call_tmp[653605] "expr temp" "maybe param" "maybe type" "temp"
        (653608 'move' call_tmp[653605](122943 call size _mt[243] call_tmp[653598]))
        unknown call_tmp[653610] "expr temp" "maybe param" "maybe type" "temp"
        (653613 'move' call_tmp[653610](122941 call - call_tmp[653605] 1))
        unknown call_tmp[653615] "expr temp" "maybe param" "maybe type" "temp"
        (653618 'move' call_tmp[653615](122951 call chpl_direct_range_iter 0 call_tmp[653610] 1))
        (122936 'move' _iterator[122927](122934 call _getIterator call_tmp[653615]))
        Defer
        {
          {
            (122967 call _freeIterator _iterator[122927])
          }
        }
        { scopeless type
          (122956 'move' _indexOfInterest[122926](122953 call iteratorIndex _iterator[122927]))
        }
        ForLoop[122928]
        {
          unknown i[122960] "index var" "insert auto destroy"
          (479749 'end of statement')
          (122962 'move' i[122960] _indexOfInterest[122926])
          (479750 'end of statement' i[122960])
          {
            {
              unknown tmp[122902] "temp"
              (122905 'move' tmp[122902](122904 'addr of' contains[122856]))
              unknown tmp[424775] "maybe param" "temp"
              (424786 'move' tmp[424775] tmp[122902])
              unknown call_tmp[653620] "expr temp" "maybe param" "maybe type" "temp"
              (653623 'move' call_tmp[653620](424788 call _cond_invalid tmp[424775]))
              if call_tmp[653620]
              {
                (424791 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565292] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565293] "maybe param" "temp"
              unknown call_tmp[653625] "expr temp" "maybe param" "maybe type" "temp"
              (653628 'move' call_tmp[653625](424776 call isTrue tmp[424775]))
              (565298 'move' tmp[565293](565296 call _cond_test call_tmp[653625]))
              if tmp[565293]
              {
                unknown tmp[565300] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653632] "expr temp" "maybe param" "maybe type" "temp"
                (653635 'move' call_tmp[653632](122883 call(122879 call (partial) dims _mt[243] super[122659])))
                unknown call_tmp[653637] "expr temp" "maybe param" "maybe type" "temp"
                (653640 'move' call_tmp[653637](122886 call call_tmp[653632] i[122960]))
                unknown call_tmp[653646] "expr temp" "maybe param" "maybe type" "temp"
                (653649 'move' call_tmp[653646](122895 call(122891 call (partial) dims _mt[243] this[126162])))
                unknown call_tmp[653651] "expr temp" "maybe param" "maybe type" "temp"
                (653654 'move' call_tmp[653651](122898 call call_tmp[653646] i[122960]))
                unknown call_tmp[653656] "expr temp" "maybe param" "maybe type" "temp"
                (653659 'move' call_tmp[653656](122900 call(122887 call (partial) contains _mt[243] call_tmp[653637]) call_tmp[653651]))
                (565302 'move' tmp[565300](424779 call isTrue call_tmp[653656]))
                (565307 'move' tmp[565292](565304 '_paramFoldLogical' tmp[565293] tmp[565300]))
              }
              {
                (565312 'move' tmp[565292](565309 '_paramFoldLogical' tmp[565293] 0))
              }
              (122910 call = tmp[122902] tmp[565292])
              (479753 'end of statement' i[122960] i[122960])
            }
            unknown call_tmp[653661] "expr temp" "maybe param" "maybe type" "temp"
            (653664 'move' call_tmp[653661](122916 call == contains[122856] 0))
            unknown call_tmp[653666] "expr temp" "maybe param" "maybe type" "temp"
            (653669 'move' call_tmp[653666](122921 call _cond_test call_tmp[653661]))
            if call_tmp[653666]
            {
              break _breakLabel[122932] _breakLabel[122932]
            }
          }
          label _continueLabel[122931]
          _indexOfInterest[122926]
          _iterator[122927]
        }
        label _breakLabel[122932]
      }
      (517085 'move' ret[517080](517084 'deref' contains[122856]))
      gotoReturn _end_isSubset[517078] _end_isSubset[517078]
      (479756 'end of statement' contains[122856])
    }
    function chpl__loopexpr_iter4[582122](arg iterator[582124]:_any[178](?), arg super[582260]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582271] "RVV" "temp"
      {
        unknown _indexOfInterest[582129] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582130] "expr temp" "temp"
        (582139 'move' _iterator[582130](582137 call _getIterator iterator[582124]))
        Defer
        {
          {
            (582153 call _freeIterator _iterator[582130])
          }
        }
        { scopeless type
          (582144 'move' _indexOfInterest[582129](582141 call iteratorIndex _iterator[582130]))
        }
        ForLoop[582131] for-expr
        {
          unknown i[122993] "index var" "insert auto destroy" "no doc"
          (582264 'end of statement')
          (582148 'move' i[122993] _indexOfInterest[582129])
          (582265 'end of statement' i[122993])
          {
            {
              unknown yret[582275] "YVV" "temp"
              unknown call_tmp[582284] "expr temp" "maybe param" "maybe type" "temp"
              (582287 'move' call_tmp[582284](122990 call(122985 call (partial) contains _mt[243] super[582260]) i[122993]))
              (582278 'move' yret[582275](582277 'deref' call_tmp[582284]))
              (582280 yield yret[582275])
              (582267 'end of statement' i[122993])
            }
          }
          label _continueLabel[582134]
          _indexOfInterest[582129]
          _iterator[582130]
        }
        label _breakLabel[582135]
      }
      (582273 return ret[582271])
    }
    function chpl__loopexpr_iter4[582160](param arg tag[582164]:iterKind[453], arg iterator[582167]:_any[178](?), arg super[582188]:_any[178](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582314] "RVV" "temp"
      const _leaderIterator[582179] "const" "expr temp" "temp"
      (582184 'move' _leaderIterator[582179](582181 call _toLeader iterator[582167]))
      (582319 'move' ret[582314](582318 'deref' _leaderIterator[582179]))
      (582316 return ret[582314])
    }
    where {
      unknown tmp[582290] "maybe param" "temp"
      (582301 'move' tmp[582290](582169 call == tag[582164] leader[447]))
      unknown call_tmp[582348] "expr temp" "maybe param" "maybe type" "temp"
      (582351 'move' call_tmp[582348](582303 call _cond_invalid tmp[582290]))
      if call_tmp[582348]
      {
        (582306 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582321] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582322] "maybe param" "temp"
      unknown call_tmp[582353] "expr temp" "maybe param" "maybe type" "temp"
      (582356 'move' call_tmp[582353](582291 call isTrue tmp[582290]))
      (582327 'move' tmp[582322](582325 call _cond_test call_tmp[582353]))
      if tmp[582322]
      {
        unknown tmp[582329] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582358] "expr temp" "maybe param" "maybe type" "temp"
        (582361 'move' call_tmp[582358](582173 'call resolves' "_toLeader" iterator[582167]))
        (582331 'move' tmp[582329](582294 call isTrue call_tmp[582358]))
        (582336 'move' tmp[582321](582333 '_paramFoldLogical' tmp[582322] tmp[582329]))
      }
      {
        (582341 'move' tmp[582321](582338 '_paramFoldLogical' tmp[582322] 0))
      }
      (748443 call chpl_statementLevelSymbol tmp[582321])
    }
    function chpl__loopexpr_iter4[582190](param arg tag[582194]:iterKind[453], arg followThis[582197]:_any[178](?), arg iterator[582199]:_any[178](?), arg super[582258]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582372] "RVV" "temp"
      const _followerIterator[582206] "const" "expr temp" "temp"
      (582212 'move' _followerIterator[582206](582208 call _toFollower iterator[582199] followThis[582197]))
      {
        unknown _indexOfInterest[582227] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582228] "expr temp" "temp"
        (582237 'move' _iterator[582228](582235 call _getIterator _followerIterator[582206]))
        Defer
        {
          {
            (582251 call _freeIterator _iterator[582228])
          }
        }
        { scopeless type
          (582242 'move' _indexOfInterest[582227](582239 call iteratorIndex _iterator[582228]))
        }
        ForLoop[582229] lowered-forall for-expr
        {
          unknown i[582214] "index var" "insert auto destroy" "no doc"
          (582365 'end of statement')
          (582246 'move' i[582214] _indexOfInterest[582227])
          (582366 'end of statement' i[582214])
          {
            {
              unknown yret[582376] "YVV" "temp"
              unknown call_tmp[582385] "expr temp" "maybe param" "maybe type" "temp"
              (582388 'move' call_tmp[582385](582223 call(582220 call (partial) contains _mt[243] super[582258]) i[582214]))
              (582379 'move' yret[582376](582378 'deref' call_tmp[582385]))
              (582381 yield yret[582376])
              (582368 'end of statement' i[582214])
            }
          }
          label _continueLabel[582232]
          _indexOfInterest[582227]
          _iterator[582228]
        }
        label _breakLabel[582233]
      }
      (582374 return ret[582372])
    }
    where {
      (582202 call == tag[582194] follower[449])
    }
    function chpl__forallexpr4[582102](arg iterExpr[582105]:_any[178](?), arg super[582109]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582393] "RVV" "temp"
      unknown _iterator[582112] "expr temp" "maybe ref" "temp"
      (582114 'move' _iterator[582112] iterExpr[582105])
      unknown call_tmp[582400] "expr temp" "maybe param" "maybe type" "temp"
      (582403 'move' call_tmp[582400](582117 call chpl__loopexpr_iter4 _iterator[582112] super[582109]))
      (582398 'move' ret[582393](582397 'deref' call_tmp[582400]))
      (582395 return ret[582393])
    }
    unknown call_tmp[582405] "expr temp" "maybe param" "maybe type" "temp"
    (582408 'move' call_tmp[582405](582107 call chpl__forallexpr4 this[126162] super[122659]))
    (582412 'iterator record set shape' call_tmp[582405] this[126162] 0)
    unknown call_tmp[653671] "expr temp" "maybe param" "maybe type" "temp"
    (653674 'move' call_tmp[653671](122995 'reduce' LogicalAndReduceScanOp[376659](?) call_tmp[582405] 0))
    (517090 'move' ret[517080](517089 'deref' call_tmp[653671]))
    label _end_isSubset[517078]
    (517082 return ret[517080])
  }
  function _domain[125908](?).isSuper[123007](arg _mt[126168]:_MT[238], arg this[126166]:_domain[125908](?), arg sub[123004]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517094] "RVV" "temp"
    unknown tmp[424796] "maybe param" "temp"
    (424807 'move' tmp[424796](123012 call isAssociativeDom this[126166]))
    unknown call_tmp[653676] "expr temp" "maybe param" "maybe type" "temp"
    (653679 'move' call_tmp[653676](424809 call _cond_invalid tmp[424796]))
    if call_tmp[653676]
    {
      (424812 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565319] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565320] "maybe param" "temp"
    unknown call_tmp[653681] "expr temp" "maybe param" "maybe type" "temp"
    (653684 'move' call_tmp[653681](424797 call isTrue tmp[424796]))
    (565325 'move' tmp[565320](565323 call _cond_test call_tmp[653681]))
    if tmp[565320]
    {
      (565330 'move' tmp[565319](565327 '_paramFoldLogical' tmp[565320] 1))
    }
    {
      unknown tmp[565332] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653686] "expr temp" "maybe param" "maybe type" "temp"
      (653689 'move' call_tmp[653686](123016 call isRectangularDom this[126166]))
      (565334 'move' tmp[565332](424801 call isTrue call_tmp[653686]))
      (565339 'move' tmp[565319](565336 '_paramFoldLogical' tmp[565320] tmp[565332]))
    }
    unknown call_tmp[653691] "expr temp" "maybe param" "maybe type" "temp"
    (653694 'move' call_tmp[653691](123019 call ! tmp[565319]))
    unknown call_tmp[653696] "expr temp" "maybe param" "maybe type" "temp"
    (653699 'move' call_tmp[653696](123076 call _cond_test call_tmp[653691]))
    if call_tmp[653696]
    {
      unknown call_tmp[653701] "expr temp" "maybe param" "maybe type" "temp"
      (653704 'move' call_tmp[653701](123024 call isSparseDom this[126166]))
      unknown call_tmp[653706] "expr temp" "maybe param" "maybe type" "temp"
      (653709 'move' call_tmp[653706](123069 call _cond_test call_tmp[653701]))
      if call_tmp[653706]
      {
        (123044 call compilerError "isSuper not supported on sparse domains")
      }
      {
        unknown call_tmp[653711] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (653714 'move' call_tmp[653711](123066 'typeof' this[126166]))
        (123067 call compilerError "isSuper not supported on the domain type " call_tmp[653711])
      }
    }
    unknown call_tmp[653716] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653719 'move' call_tmp[653716](123082 'typeof' sub[123004]))
    unknown call_tmp[653721] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653724 'move' call_tmp[653721](123084 'typeof' this[126166]))
    unknown call_tmp[653726] "expr temp" "maybe param" "maybe type" "temp"
    (653729 'move' call_tmp[653726](123085 call != call_tmp[653716] call_tmp[653721]))
    unknown call_tmp[653731] "expr temp" "maybe param" "maybe type" "temp"
    (653734 'move' call_tmp[653731](123193 call _cond_test call_tmp[653726]))
    if call_tmp[653731]
    {
      unknown call_tmp[653736] "expr temp" "maybe param" "maybe type" "temp"
      (653739 'move' call_tmp[653736](123090 call isRectangularDom this[126166]))
      unknown call_tmp[653741] "expr temp" "maybe param" "maybe type" "temp"
      (653744 'move' call_tmp[653741](123188 call _cond_test call_tmp[653736]))
      if call_tmp[653741]
      {
        unknown call_tmp[653748] "expr temp" "maybe param" "maybe type" "temp"
        (653751 'move' call_tmp[653748](123092 call rank _mt[243] sub[123004]))
        unknown call_tmp[653755] "expr temp" "maybe param" "maybe type" "temp"
        (653758 'move' call_tmp[653755](123096 call rank _mt[243] this[126166]))
        unknown call_tmp[653760] "expr temp" "maybe param" "maybe type" "temp"
        (653763 'move' call_tmp[653760](123099 call != call_tmp[653748] call_tmp[653755]))
        unknown call_tmp[653765] "expr temp" "maybe param" "maybe type" "temp"
        (653768 'move' call_tmp[653765](123160 call _cond_test call_tmp[653760]))
        if call_tmp[653765]
        {
          (123120 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492204] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653772] "expr temp" "maybe param" "maybe type" "temp"
            (653775 'move' call_tmp[653772](123123 call low _mt[243] sub[123004]))
            (492208 'move' call_type_tmp[492204](123126 'typeof' call_tmp[653772]))
          }
          { scopeless type
            unknown call_type_tmp[492210] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653779] "expr temp" "maybe param" "maybe type" "temp"
            (653782 'move' call_tmp[653779](123128 call low _mt[243] this[126166]))
            (492214 'move' call_type_tmp[492210](123131 'typeof' call_tmp[653779]))
          }
          unknown call_tmp[653784] "expr temp" "maybe param" "maybe type" "temp"
          (653787 'move' call_tmp[653784](123132 call != call_type_tmp[492204] call_type_tmp[492210]))
          unknown call_tmp[653789] "expr temp" "maybe param" "maybe type" "temp"
          (653792 'move' call_tmp[653789](123155 call _cond_test call_tmp[653784]))
          if call_tmp[653789]
          {
            (123153 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123186 call compilerError "isSuper called with different associative domain types")
      }
    }
    unknown call_tmp[653794] "expr temp" "maybe param" "maybe type" "temp"
    (653797 'move' call_tmp[653794](123201 call isRectangularDom this[126166]))
    unknown call_tmp[653799] "expr temp" "maybe param" "maybe type" "temp"
    (653802 'move' call_tmp[653799](123324 call _cond_test call_tmp[653794]))
    if call_tmp[653799]
    {
      unknown contains[123203] "dead at end of block" "insert auto destroy"
      (542918 'init var' contains[123203] 1)
      (123206 'end of statement')
      {
        unknown _indexOfInterest[123273] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123274] "expr temp" "temp"
        unknown call_tmp[653806] "expr temp" "maybe param" "maybe type" "temp"
        (653809 'move' call_tmp[653806](123295 call(123292 call (partial) dims _mt[243] this[126166])))
        unknown call_tmp[653813] "expr temp" "maybe param" "maybe type" "temp"
        (653816 'move' call_tmp[653813](123290 call size _mt[243] call_tmp[653806]))
        unknown call_tmp[653818] "expr temp" "maybe param" "maybe type" "temp"
        (653821 'move' call_tmp[653818](123288 call - call_tmp[653813] 1))
        unknown call_tmp[653823] "expr temp" "maybe param" "maybe type" "temp"
        (653826 'move' call_tmp[653823](123298 call chpl_direct_range_iter 0 call_tmp[653818] 1))
        (123283 'move' _iterator[123274](123281 call _getIterator call_tmp[653823]))
        Defer
        {
          {
            (123314 call _freeIterator _iterator[123274])
          }
        }
        { scopeless type
          (123303 'move' _indexOfInterest[123273](123300 call iteratorIndex _iterator[123274]))
        }
        ForLoop[123275]
        {
          unknown i[123307] "index var" "insert auto destroy"
          (479766 'end of statement')
          (123309 'move' i[123307] _indexOfInterest[123273])
          (479767 'end of statement' i[123307])
          {
            {
              unknown tmp[123249] "temp"
              (123252 'move' tmp[123249](123251 'addr of' contains[123203]))
              unknown tmp[424817] "maybe param" "temp"
              (424828 'move' tmp[424817] tmp[123249])
              unknown call_tmp[653828] "expr temp" "maybe param" "maybe type" "temp"
              (653831 'move' call_tmp[653828](424830 call _cond_invalid tmp[424817]))
              if call_tmp[653828]
              {
                (424833 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565346] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565347] "maybe param" "temp"
              unknown call_tmp[653833] "expr temp" "maybe param" "maybe type" "temp"
              (653836 'move' call_tmp[653833](424818 call isTrue tmp[424817]))
              (565352 'move' tmp[565347](565350 call _cond_test call_tmp[653833]))
              if tmp[565347]
              {
                unknown tmp[565354] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653840] "expr temp" "maybe param" "maybe type" "temp"
                (653843 'move' call_tmp[653840](123230 call(123226 call (partial) dims _mt[243] this[126166])))
                unknown call_tmp[653845] "expr temp" "maybe param" "maybe type" "temp"
                (653848 'move' call_tmp[653845](123233 call call_tmp[653840] i[123307]))
                unknown call_tmp[653854] "expr temp" "maybe param" "maybe type" "temp"
                (653857 'move' call_tmp[653854](123242 call(123238 call (partial) dims _mt[243] sub[123004])))
                unknown call_tmp[653859] "expr temp" "maybe param" "maybe type" "temp"
                (653862 'move' call_tmp[653859](123245 call call_tmp[653854] i[123307]))
                unknown call_tmp[653864] "expr temp" "maybe param" "maybe type" "temp"
                (653867 'move' call_tmp[653864](123247 call(123234 call (partial) contains _mt[243] call_tmp[653845]) call_tmp[653859]))
                (565356 'move' tmp[565354](424821 call isTrue call_tmp[653864]))
                (565361 'move' tmp[565346](565358 '_paramFoldLogical' tmp[565347] tmp[565354]))
              }
              {
                (565366 'move' tmp[565346](565363 '_paramFoldLogical' tmp[565347] 0))
              }
              (123257 call = tmp[123249] tmp[565346])
              (479770 'end of statement' i[123307] i[123307])
            }
            unknown call_tmp[653869] "expr temp" "maybe param" "maybe type" "temp"
            (653872 'move' call_tmp[653869](123263 call == contains[123203] 0))
            unknown call_tmp[653874] "expr temp" "maybe param" "maybe type" "temp"
            (653877 'move' call_tmp[653874](123268 call _cond_test call_tmp[653869]))
            if call_tmp[653874]
            {
              break _breakLabel[123279] _breakLabel[123279]
            }
          }
          label _continueLabel[123278]
          _indexOfInterest[123273]
          _iterator[123274]
        }
        label _breakLabel[123279]
      }
      (517099 'move' ret[517094](517098 'deref' contains[123203]))
      gotoReturn _end_isSuper[517092] _end_isSuper[517092]
      (479773 'end of statement' contains[123203])
    }
    function chpl__loopexpr_iter5[582434](arg iterator[582436]:_any[178](?), arg this[582572]:_domain[125908](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582583] "RVV" "temp"
      {
        unknown _indexOfInterest[582441] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582442] "expr temp" "temp"
        (582451 'move' _iterator[582442](582449 call _getIterator iterator[582436]))
        Defer
        {
          {
            (582465 call _freeIterator _iterator[582442])
          }
        }
        { scopeless type
          (582456 'move' _indexOfInterest[582441](582453 call iteratorIndex _iterator[582442]))
        }
        ForLoop[582443] for-expr
        {
          unknown i[123340] "index var" "insert auto destroy" "no doc"
          (582576 'end of statement')
          (582460 'move' i[123340] _indexOfInterest[582441])
          (582577 'end of statement' i[123340])
          {
            {
              unknown yret[582587] "YVV" "temp"
              unknown call_tmp[582596] "expr temp" "maybe param" "maybe type" "temp"
              (582599 'move' call_tmp[582596](123337 call(123332 call (partial) contains _mt[243] this[582572]) i[123340]))
              (582590 'move' yret[582587](582589 'deref' call_tmp[582596]))
              (582592 yield yret[582587])
              (582579 'end of statement' i[123340])
            }
          }
          label _continueLabel[582446]
          _indexOfInterest[582441]
          _iterator[582442]
        }
        label _breakLabel[582447]
      }
      (582585 return ret[582583])
    }
    function chpl__loopexpr_iter5[582472](param arg tag[582476]:iterKind[453], arg iterator[582479]:_any[178](?), arg this[582500]:_domain[125908](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582626] "RVV" "temp"
      const _leaderIterator[582491] "const" "expr temp" "temp"
      (582496 'move' _leaderIterator[582491](582493 call _toLeader iterator[582479]))
      (582631 'move' ret[582626](582630 'deref' _leaderIterator[582491]))
      (582628 return ret[582626])
    }
    where {
      unknown tmp[582602] "maybe param" "temp"
      (582613 'move' tmp[582602](582481 call == tag[582476] leader[447]))
      unknown call_tmp[582660] "expr temp" "maybe param" "maybe type" "temp"
      (582663 'move' call_tmp[582660](582615 call _cond_invalid tmp[582602]))
      if call_tmp[582660]
      {
        (582618 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582633] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582634] "maybe param" "temp"
      unknown call_tmp[582665] "expr temp" "maybe param" "maybe type" "temp"
      (582668 'move' call_tmp[582665](582603 call isTrue tmp[582602]))
      (582639 'move' tmp[582634](582637 call _cond_test call_tmp[582665]))
      if tmp[582634]
      {
        unknown tmp[582641] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582670] "expr temp" "maybe param" "maybe type" "temp"
        (582673 'move' call_tmp[582670](582485 'call resolves' "_toLeader" iterator[582479]))
        (582643 'move' tmp[582641](582606 call isTrue call_tmp[582670]))
        (582648 'move' tmp[582633](582645 '_paramFoldLogical' tmp[582634] tmp[582641]))
      }
      {
        (582653 'move' tmp[582633](582650 '_paramFoldLogical' tmp[582634] 0))
      }
      (748445 call chpl_statementLevelSymbol tmp[582633])
    }
    function chpl__loopexpr_iter5[582502](param arg tag[582506]:iterKind[453], arg followThis[582509]:_any[178](?), arg iterator[582511]:_any[178](?), arg this[582570]:_domain[125908](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582684] "RVV" "temp"
      const _followerIterator[582518] "const" "expr temp" "temp"
      (582524 'move' _followerIterator[582518](582520 call _toFollower iterator[582511] followThis[582509]))
      {
        unknown _indexOfInterest[582539] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582540] "expr temp" "temp"
        (582549 'move' _iterator[582540](582547 call _getIterator _followerIterator[582518]))
        Defer
        {
          {
            (582563 call _freeIterator _iterator[582540])
          }
        }
        { scopeless type
          (582554 'move' _indexOfInterest[582539](582551 call iteratorIndex _iterator[582540]))
        }
        ForLoop[582541] lowered-forall for-expr
        {
          unknown i[582526] "index var" "insert auto destroy" "no doc"
          (582677 'end of statement')
          (582558 'move' i[582526] _indexOfInterest[582539])
          (582678 'end of statement' i[582526])
          {
            {
              unknown yret[582688] "YVV" "temp"
              unknown call_tmp[582697] "expr temp" "maybe param" "maybe type" "temp"
              (582700 'move' call_tmp[582697](582535 call(582532 call (partial) contains _mt[243] this[582570]) i[582526]))
              (582691 'move' yret[582688](582690 'deref' call_tmp[582697]))
              (582693 yield yret[582688])
              (582680 'end of statement' i[582526])
            }
          }
          label _continueLabel[582544]
          _indexOfInterest[582539]
          _iterator[582540]
        }
        label _breakLabel[582545]
      }
      (582686 return ret[582684])
    }
    where {
      (582514 call == tag[582506] follower[449])
    }
    function chpl__forallexpr5[582414](arg iterExpr[582417]:_any[178](?), arg this[582421]:_domain[125908](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582705] "RVV" "temp"
      unknown _iterator[582424] "expr temp" "maybe ref" "temp"
      (582426 'move' _iterator[582424] iterExpr[582417])
      unknown call_tmp[582712] "expr temp" "maybe param" "maybe type" "temp"
      (582715 'move' call_tmp[582712](582429 call chpl__loopexpr_iter5 _iterator[582424] this[582421]))
      (582710 'move' ret[582705](582709 'deref' call_tmp[582712]))
      (582707 return ret[582705])
    }
    unknown call_tmp[582717] "expr temp" "maybe param" "maybe type" "temp"
    (582720 'move' call_tmp[582717](582419 call chpl__forallexpr5 sub[123004] this[126166]))
    (582724 'iterator record set shape' call_tmp[582717] sub[123004] 0)
    unknown call_tmp[653879] "expr temp" "maybe param" "maybe type" "temp"
    (653882 'move' call_tmp[653879](123342 'reduce' LogicalAndReduceScanOp[376659](?) call_tmp[582717] 0))
    (517104 'move' ret[517094](517103 'deref' call_tmp[653879]))
    label _end_isSuper[517092]
    (517096 return ret[517094])
  }
  function _domain[125908](?).indexOrder[123352](arg _mt[126172]:_MT[238], arg this[126170]:_domain[125908](?), arg i[123350]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517108] "RVV" "temp"
    unknown call_tmp[653886] "expr temp" "maybe param" "maybe type" "temp"
    (653889 'move' call_tmp[653886](359558 call _value _mt[243] this[126170]))
    unknown call_tmp[653895] "expr temp" "maybe param" "maybe type" "temp"
    (653898 'move' call_tmp[653895](383091 call rank _mt[243] this[126170]))
    unknown call_tmp[653900] "expr temp" "maybe param" "maybe type" "temp"
    (653903 'move' call_tmp[653900](123364 call _makeIndexTuple call_tmp[653895] i[123350]))
    unknown call_tmp[653905] "expr temp" "maybe param" "maybe type" "temp"
    (653908 'move' call_tmp[653905](123366 call(123357 call (partial) dsiIndexOrder _mt[243] call_tmp[653886]) call_tmp[653900]))
    (517113 'move' ret[517108](517112 'deref' call_tmp[653905]))
    (517110 return ret[517108])
  }
  function _domain[125908](?).position[123376](arg _mt[126176]:_MT[238], arg this[126174]:_domain[125908](?), arg i[123374]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517117] "RVV" "temp"
    unknown call_tmp[653912] "expr temp" "maybe param" "maybe type" "temp"
    (653915 'move' call_tmp[653912](383096 call rank _mt[243] this[126174]))
    unknown call_tmp[653917] "maybe param" "maybe type" "temp"
    (653920 'move' call_tmp[653917](123382 call _makeIndexTuple call_tmp[653912] i[123374]))
    unknown ind[123383] "dead at end of block" "insert auto destroy"
    (542920 'init var' ind[123383] call_tmp[653917])
    unknown pos[123390] "dead at end of block" "insert auto destroy"
    unknown call_tmp[653924] "expr temp" "maybe param" "maybe type" "temp"
    (653927 'move' call_tmp[653924](383101 call rank _mt[243] this[126174]))
    unknown call_tmp[653931] "expr temp" "maybe param" "maybe type" "temp"
    (653934 'move' call_tmp[653931](383105 call intIdxType _mt[243] this[126174]))
    unknown call_tmp[653936] "expr temp" "maybe param" "maybe type" "temp"
    (653939 'move' call_tmp[653936](123388 call * call_tmp[653924] call_tmp[653931]))
    (542922 'default init var' pos[123390] call_tmp[653936])
    (123393 'end of statement')
    {
      unknown _indexOfInterest[123426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123427] "expr temp" "temp"
      unknown call_tmp[653943] "expr temp" "maybe param" "maybe type" "temp"
      (653946 'move' call_tmp[653943](383114 call rank _mt[243] this[126174]))
      unknown call_tmp[653948] "expr temp" "maybe param" "maybe type" "temp"
      (653951 'move' call_tmp[653948](123441 call - call_tmp[653943] 1))
      unknown call_tmp[653953] "expr temp" "maybe param" "maybe type" "temp"
      (653956 'move' call_tmp[653953](123444 call chpl_direct_range_iter 0 call_tmp[653948] 1))
      (123436 'move' _iterator[123427](123434 call _getIterator call_tmp[653953]))
      Defer
      {
        {
          (123460 call _freeIterator _iterator[123427])
        }
      }
      { scopeless type
        (123449 'move' _indexOfInterest[123426](123446 call iteratorIndex _iterator[123427]))
      }
      ForLoop[123428]
      {
        unknown d[123453] "index var" "insert auto destroy"
        (479778 'end of statement')
        (123455 'move' d[123453] _indexOfInterest[123426])
        (479779 'end of statement' d[123453])
        unknown call_tmp[653958] "expr temp" "maybe param" "maybe type" "temp"
        (653961 'move' call_tmp[653958](123406 call pos[123390] d[123453]))
        unknown call_tmp[653965] "expr temp" "maybe param" "maybe type" "temp"
        (653968 'move' call_tmp[653965](359562 call _value _mt[243] this[126174]))
        unknown call_tmp[653972] "expr temp" "maybe param" "maybe type" "temp"
        (653975 'move' call_tmp[653972](123413 call(123408 call (partial) dsiDim _mt[243] call_tmp[653965]) d[123453]))
        unknown call_tmp[653979] "expr temp" "maybe param" "maybe type" "temp"
        (653982 'move' call_tmp[653979](123420 call ind[123383] d[123453]))
        unknown call_tmp[653984] "expr temp" "maybe param" "maybe type" "temp"
        (653987 'move' call_tmp[653984](123422 call(123414 call (partial) indexOrder _mt[243] call_tmp[653972]) call_tmp[653979]))
        (123423 call = call_tmp[653958] call_tmp[653984])
        (479781 'end of statement' pos[123390] d[123453] d[123453] ind[123383] d[123453])
        label _continueLabel[123431]
        _indexOfInterest[123426]
        _iterator[123427]
      }
      label _breakLabel[123432]
    }
    (517122 'move' ret[517117](517121 'deref' pos[123390]))
    gotoReturn _end_position[517115] _end_position[517115]
    (479787 'end of statement' pos[123390])
    label _end_position[517115]
    (517119 return ret[517117])
  }
  function _domain[125908](?).expand[123481](arg _mt[126180]:_MT[238], arg this[126178]:_domain[125908](?), arg off[123478] :
  unknown call_tmp[653991] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654003] "expr temp" "maybe param" "maybe type" "temp"
    (654006 'move' call_tmp[654003](123492 call isAssociativeDom this[126178]))
    unknown call_tmp[654008] "expr temp" "maybe param" "maybe type" "temp"
    (654011 'move' call_tmp[654008](123566 call _cond_test call_tmp[654003]))
    if call_tmp[654008]
    {
      (123512 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[654013] "expr temp" "maybe param" "maybe type" "temp"
      (654016 'move' call_tmp[654013](123517 call isSparseDom this[126178]))
      unknown call_tmp[654018] "expr temp" "maybe param" "maybe type" "temp"
      (654021 'move' call_tmp[654018](123560 call _cond_test call_tmp[654013]))
      if call_tmp[654018]
      {
        (123537 call compilerError "expand not supported on sparse domains")
      }
      {
        (123558 call compilerError "expand not supported on this domain type")
      }
    }
    (517126 return _void[55])
  }
  where {
    unknown call_tmp[654023] "expr temp" "maybe param" "maybe type" "temp"
    (654026 'move' call_tmp[654023](123486 call isRectangularDom this[126178]))
    (123487 call ! call_tmp[654023])
  }
  function _domain[125908](?).expand[123584](arg _mt[126184]:_MT[238], arg this[126182]:_domain[125908](?), arg off[123580] ... :
  (383130 call intIdxType _mt[243] this[126182])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517130] "RVV" "temp"
    unknown call_tmp[654034] "expr temp" "maybe param" "maybe type" "temp"
    (654037 'move' call_tmp[654034](123589 call(383138 call (partial) expand _mt[243] this[126182]) off[123580]))
    (517135 'move' ret[517130](517134 'deref' call_tmp[654034]))
    (517132 return ret[517130])
  }
  function _domain[125908](?).expand[123604](arg _mt[126188]:_MT[238], arg this[126186]:_domain[125908](?), arg off[123601] :
  unknown call_tmp[654041] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517139] "RVV" "temp"
    unknown call_tmp[654055] "maybe param" "maybe type" "temp"
    (654058 'move' call_tmp[654055](123608 call(383151 call (partial) dims _mt[243] this[126186])))
    unknown ranges[123609] "dead at end of block" "insert auto destroy"
    (542924 'init var' ranges[123609] call_tmp[654055])
    (123612 'end of statement')
    {
      unknown _indexOfInterest[123705] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123706] "expr temp" "temp"
      unknown call_tmp[654062] "expr temp" "maybe param" "maybe type" "temp"
      (654065 'move' call_tmp[654062](383166 call rank _mt[243] this[126186]))
      unknown call_tmp[654067] "expr temp" "maybe param" "maybe type" "temp"
      (654070 'move' call_tmp[654067](123720 call - call_tmp[654062] 1))
      unknown call_tmp[654072] "expr temp" "maybe param" "maybe type" "temp"
      (654075 'move' call_tmp[654072](123723 call chpl_direct_range_iter 0 call_tmp[654067] 1))
      (123715 'move' _iterator[123706](123713 call _getIterator call_tmp[654072]))
      Defer
      {
        {
          (123739 call _freeIterator _iterator[123706])
        }
      }
      { scopeless type
        (123728 'move' _indexOfInterest[123705](123725 call iteratorIndex _iterator[123706]))
      }
      ForLoop[123707]
      {
        unknown i[123732] "index var" "insert auto destroy"
        (479794 'end of statement')
        (123734 'move' i[123732] _indexOfInterest[123705])
        (479795 'end of statement' i[123732])
        {
          unknown call_tmp[654077] "expr temp" "maybe param" "maybe type" "temp"
          (654080 'move' call_tmp[654077](123625 call ranges[123609] i[123732]))
          unknown call_tmp[654082] "expr temp" "maybe param" "maybe type" "temp"
          (654085 'move' call_tmp[654082](123629 call ranges[123609] i[123732]))
          unknown call_tmp[654089] "expr temp" "maybe param" "maybe type" "temp"
          (654092 'move' call_tmp[654089](123638 call off[123601] i[123732]))
          unknown call_tmp[654094] "expr temp" "maybe param" "maybe type" "temp"
          (654097 'move' call_tmp[654094](123640 call(123632 call (partial) expand _mt[243] call_tmp[654082]) call_tmp[654089]))
          (123641 call = call_tmp[654077] call_tmp[654094])
          (479797 'end of statement' ranges[123609] i[123732] ranges[123609] i[123732] i[123732])
          unknown call_tmp[654099] "expr temp" "maybe param" "maybe type" "temp"
          (654102 'move' call_tmp[654099](123648 call ranges[123609] i[123732]))
          unknown call_tmp[654106] "expr temp" "maybe param" "maybe type" "temp"
          (654109 'move' call_tmp[654106](123649 call low _mt[243] call_tmp[654099]))
          unknown call_tmp[654111] "expr temp" "maybe param" "maybe type" "temp"
          (654114 'move' call_tmp[654111](123655 call ranges[123609] i[123732]))
          unknown call_tmp[654118] "expr temp" "maybe param" "maybe type" "temp"
          (654121 'move' call_tmp[654118](123656 call high _mt[243] call_tmp[654111]))
          unknown call_tmp[654123] "expr temp" "maybe param" "maybe type" "temp"
          (654126 'move' call_tmp[654123](123659 call > call_tmp[654106] call_tmp[654118]))
          unknown call_tmp[654128] "expr temp" "maybe param" "maybe type" "temp"
          (654131 'move' call_tmp[654128](123701 call _cond_test call_tmp[654123]))
          if call_tmp[654128]
          {
            (123698 call halt "***Error: Degenerate dimension created in dimension " i[123732] "***")
            (479803 'end of statement' i[123732])
          }
        }
        label _continueLabel[123710]
        _indexOfInterest[123705]
        _iterator[123706]
      }
      label _breakLabel[123711]
    }
    unknown call_tmp[654135] "expr temp" "maybe param" "maybe type" "temp"
    (654138 'move' call_tmp[654135](383171 call dist _mt[243] this[126186]))
    unknown call_tmp[654142] "expr temp" "maybe param" "maybe type" "temp"
    (654145 'move' call_tmp[654142](383175 call rank _mt[243] this[126186]))
    unknown call_tmp[654149] "expr temp" "maybe param" "maybe type" "temp"
    (654152 'move' call_tmp[654149](359566 call _value _mt[243] this[126186]))
    unknown call_tmp[654156] "expr temp" "maybe param" "maybe type" "temp"
    (654159 'move' call_tmp[654156](123752 call idxType _mt[243] call_tmp[654149]))
    unknown call_tmp[654163] "expr temp" "maybe param" "maybe type" "temp"
    (654166 'move' call_tmp[654163](383179 call stridable _mt[243] this[126186]))
    unknown call_tmp[654168] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654171 'move' call_tmp[654168](747894 'new' _domain[125908](?) call_tmp[654135] call_tmp[654142] call_tmp[654156] call_tmp[654163] ranges[123609]))
    (517144 'move' ret[517139](517143 'deref' call_tmp[654168]))
    gotoReturn _end_expand[517137] _end_expand[517137]
    (479805 'end of statement' ranges[123609])
    label _end_expand[517137]
    (517141 return ret[517139])
  }
  function _domain[125908](?).expand[123768](arg _mt[126192]:_MT[238], arg this[126190]:_domain[125908](?), arg off[123765] :
  (383184 call intIdxType _mt[243] this[126190])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517150] "RVV" "temp"
    unknown call_tmp[654177] "maybe param" "maybe type" "temp"
    (654180 'move' call_tmp[654177](123776 call(383192 call (partial) dims _mt[243] this[126190])))
    unknown ranges[123777] "dead at end of block" "insert auto destroy"
    (542926 'init var' ranges[123777] call_tmp[654177])
    (123780 'end of statement')
    {
      unknown _indexOfInterest[123807] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123808] "expr temp" "temp"
      unknown call_tmp[654184] "expr temp" "maybe param" "maybe type" "temp"
      (654187 'move' call_tmp[654184](383204 call rank _mt[243] this[126190]))
      unknown call_tmp[654189] "expr temp" "maybe param" "maybe type" "temp"
      (654192 'move' call_tmp[654189](123822 call - call_tmp[654184] 1))
      unknown call_tmp[654194] "expr temp" "maybe param" "maybe type" "temp"
      (654197 'move' call_tmp[654194](123825 call chpl_direct_range_iter 0 call_tmp[654189] 1))
      (123817 'move' _iterator[123808](123815 call _getIterator call_tmp[654194]))
      Defer
      {
        {
          (123841 call _freeIterator _iterator[123808])
        }
      }
      { scopeless type
        (123830 'move' _indexOfInterest[123807](123827 call iteratorIndex _iterator[123808]))
      }
      ForLoop[123809]
      {
        unknown i[123834] "index var" "insert auto destroy"
        (479808 'end of statement')
        (123836 'move' i[123834] _indexOfInterest[123807])
        (479809 'end of statement' i[123834])
        unknown call_tmp[654199] "expr temp" "maybe param" "maybe type" "temp"
        (654202 'move' call_tmp[654199](123793 call ranges[123777] i[123834]))
        unknown call_tmp[654206] "expr temp" "maybe param" "maybe type" "temp"
        (654209 'move' call_tmp[654206](123797 call(383198 call (partial) dim _mt[243] this[126190]) i[123834]))
        unknown call_tmp[654213] "expr temp" "maybe param" "maybe type" "temp"
        (654216 'move' call_tmp[654213](123803 call(123798 call (partial) expand _mt[243] call_tmp[654206]) off[123765]))
        (123804 call = call_tmp[654199] call_tmp[654213])
        (479811 'end of statement' ranges[123777] i[123834] i[123834])
        label _continueLabel[123812]
        _indexOfInterest[123807]
        _iterator[123808]
      }
      label _breakLabel[123813]
    }
    unknown call_tmp[654220] "expr temp" "maybe param" "maybe type" "temp"
    (654223 'move' call_tmp[654220](383209 call dist _mt[243] this[126190]))
    unknown call_tmp[654227] "expr temp" "maybe param" "maybe type" "temp"
    (654230 'move' call_tmp[654227](383213 call rank _mt[243] this[126190]))
    unknown call_tmp[654234] "expr temp" "maybe param" "maybe type" "temp"
    (654237 'move' call_tmp[654234](359570 call _value _mt[243] this[126190]))
    unknown call_tmp[654241] "expr temp" "maybe param" "maybe type" "temp"
    (654244 'move' call_tmp[654241](123854 call idxType _mt[243] call_tmp[654234]))
    unknown call_tmp[654248] "expr temp" "maybe param" "maybe type" "temp"
    (654251 'move' call_tmp[654248](383217 call stridable _mt[243] this[126190]))
    unknown call_tmp[654253] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654256 'move' call_tmp[654253](747895 'new' _domain[125908](?) call_tmp[654220] call_tmp[654227] call_tmp[654241] call_tmp[654248] ranges[123777]))
    (517155 'move' ret[517150](517154 'deref' call_tmp[654253]))
    gotoReturn _end_expand[517148] _end_expand[517148]
    (479815 'end of statement' ranges[123777])
    label _end_expand[517148]
    (517152 return ret[517150])
  }
  where {
    unknown call_tmp[654260] "expr temp" "maybe param" "maybe type" "temp"
    (654263 'move' call_tmp[654260](383188 call rank _mt[243] this[126190]))
    (123772 call > call_tmp[654260] 1)
  }
  function _domain[125908](?).exterior[123874](arg _mt[126196]:_MT[238], arg this[126194]:_domain[125908](?), arg off[123871] :
  unknown call_tmp[654267] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654279] "expr temp" "maybe param" "maybe type" "temp"
    (654282 'move' call_tmp[654279](123885 call isAssociativeDom this[126194]))
    unknown call_tmp[654284] "expr temp" "maybe param" "maybe type" "temp"
    (654287 'move' call_tmp[654284](123959 call _cond_test call_tmp[654279]))
    if call_tmp[654284]
    {
      (123905 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[654289] "expr temp" "maybe param" "maybe type" "temp"
      (654292 'move' call_tmp[654289](123910 call isSparseDom this[126194]))
      unknown call_tmp[654294] "expr temp" "maybe param" "maybe type" "temp"
      (654297 'move' call_tmp[654294](123953 call _cond_test call_tmp[654289]))
      if call_tmp[654294]
      {
        (123930 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123951 call compilerError "exterior not supported on this domain type")
      }
    }
    (517159 return _void[55])
  }
  where {
    unknown call_tmp[654299] "expr temp" "maybe param" "maybe type" "temp"
    (654302 'move' call_tmp[654299](123879 call isRectangularDom this[126194]))
    (123880 call ! call_tmp[654299])
  }
  function _domain[125908](?).exterior[123977](arg _mt[126200]:_MT[238], arg this[126198]:_domain[125908](?), arg off[123973] ... :
  (383233 call intIdxType _mt[243] this[126198])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517163] "RVV" "temp"
    unknown call_tmp[654310] "expr temp" "maybe param" "maybe type" "temp"
    (654313 'move' call_tmp[654310](123982 call(383241 call (partial) exterior _mt[243] this[126198]) off[123973]))
    (517168 'move' ret[517163](517167 'deref' call_tmp[654310]))
    (517165 return ret[517163])
  }
  function _domain[125908](?).exterior[123997](arg _mt[126204]:_MT[238], arg this[126202]:_domain[125908](?), arg off[123994] :
  unknown call_tmp[654317] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517172] "RVV" "temp"
    unknown call_tmp[654331] "maybe param" "maybe type" "temp"
    (654334 'move' call_tmp[654331](124001 call(383254 call (partial) dims _mt[243] this[126202])))
    unknown ranges[124002] "dead at end of block" "insert auto destroy"
    (542928 'init var' ranges[124002] call_tmp[654331])
    (124005 'end of statement')
    {
      unknown _indexOfInterest[124037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124038] "expr temp" "temp"
      unknown call_tmp[654338] "expr temp" "maybe param" "maybe type" "temp"
      (654341 'move' call_tmp[654338](383267 call rank _mt[243] this[126202]))
      unknown call_tmp[654343] "expr temp" "maybe param" "maybe type" "temp"
      (654346 'move' call_tmp[654343](124052 call - call_tmp[654338] 1))
      unknown call_tmp[654348] "expr temp" "maybe param" "maybe type" "temp"
      (654351 'move' call_tmp[654348](124055 call chpl_direct_range_iter 0 call_tmp[654343] 1))
      (124047 'move' _iterator[124038](124045 call _getIterator call_tmp[654348]))
      Defer
      {
        {
          (124071 call _freeIterator _iterator[124038])
        }
      }
      { scopeless type
        (124060 'move' _indexOfInterest[124037](124057 call iteratorIndex _iterator[124038]))
      }
      ForLoop[124039]
      {
        unknown i[124064] "index var" "insert auto destroy"
        (479822 'end of statement')
        (124066 'move' i[124064] _indexOfInterest[124037])
        (479823 'end of statement' i[124064])
        unknown call_tmp[654353] "expr temp" "maybe param" "maybe type" "temp"
        (654356 'move' call_tmp[654353](124018 call ranges[124002] i[124064]))
        unknown call_tmp[654360] "expr temp" "maybe param" "maybe type" "temp"
        (654363 'move' call_tmp[654360](124022 call(383260 call (partial) dim _mt[243] this[126202]) i[124064]))
        unknown call_tmp[654367] "expr temp" "maybe param" "maybe type" "temp"
        (654370 'move' call_tmp[654367](124031 call off[123994] i[124064]))
        unknown call_tmp[654372] "expr temp" "maybe param" "maybe type" "temp"
        (654375 'move' call_tmp[654372](124033 call(124025 call (partial) exterior _mt[243] call_tmp[654360]) call_tmp[654367]))
        (124034 call = call_tmp[654353] call_tmp[654372])
        (479825 'end of statement' ranges[124002] i[124064] i[124064] i[124064])
        label _continueLabel[124042]
        _indexOfInterest[124037]
        _iterator[124038]
      }
      label _breakLabel[124043]
    }
    unknown call_tmp[654379] "expr temp" "maybe param" "maybe type" "temp"
    (654382 'move' call_tmp[654379](383272 call dist _mt[243] this[126202]))
    unknown call_tmp[654386] "expr temp" "maybe param" "maybe type" "temp"
    (654389 'move' call_tmp[654386](383276 call rank _mt[243] this[126202]))
    unknown call_tmp[654393] "expr temp" "maybe param" "maybe type" "temp"
    (654396 'move' call_tmp[654393](359574 call _value _mt[243] this[126202]))
    unknown call_tmp[654400] "expr temp" "maybe param" "maybe type" "temp"
    (654403 'move' call_tmp[654400](124084 call idxType _mt[243] call_tmp[654393]))
    unknown call_tmp[654407] "expr temp" "maybe param" "maybe type" "temp"
    (654410 'move' call_tmp[654407](383280 call stridable _mt[243] this[126202]))
    unknown call_tmp[654412] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654415 'move' call_tmp[654412](747896 'new' _domain[125908](?) call_tmp[654379] call_tmp[654386] call_tmp[654400] call_tmp[654407] ranges[124002]))
    (517177 'move' ret[517172](517176 'deref' call_tmp[654412]))
    gotoReturn _end_exterior[517170] _end_exterior[517170]
    (479830 'end of statement' ranges[124002])
    label _end_exterior[517170]
    (517174 return ret[517172])
  }
  function _domain[125908](?).exterior[124100](arg _mt[126208]:_MT[238], arg this[126206]:_domain[125908](?), arg off[124097] :
  (383285 call intIdxType _mt[243] this[126206])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517183] "RVV" "temp"
    unknown offTup[124110] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654421] "expr temp" "maybe param" "maybe type" "temp"
    (654424 'move' call_tmp[654421](383293 call rank _mt[243] this[126206]))
    unknown call_tmp[654428] "expr temp" "maybe param" "maybe type" "temp"
    (654431 'move' call_tmp[654428](383297 call intIdxType _mt[243] this[126206]))
    unknown call_tmp[654433] "expr temp" "maybe param" "maybe type" "temp"
    (654436 'move' call_tmp[654433](124108 call * call_tmp[654421] call_tmp[654428]))
    (542930 'default init var' offTup[124110] call_tmp[654433])
    (124113 'end of statement')
    {
      unknown _indexOfInterest[124131] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124132] "expr temp" "temp"
      unknown call_tmp[654440] "expr temp" "maybe param" "maybe type" "temp"
      (654443 'move' call_tmp[654440](383304 call rank _mt[243] this[126206]))
      unknown call_tmp[654445] "expr temp" "maybe param" "maybe type" "temp"
      (654448 'move' call_tmp[654445](124146 call - call_tmp[654440] 1))
      unknown call_tmp[654450] "expr temp" "maybe param" "maybe type" "temp"
      (654453 'move' call_tmp[654450](124149 call chpl_direct_range_iter 0 call_tmp[654445] 1))
      (124141 'move' _iterator[124132](124139 call _getIterator call_tmp[654450]))
      Defer
      {
        {
          (124165 call _freeIterator _iterator[124132])
        }
      }
      { scopeless type
        (124154 'move' _indexOfInterest[124131](124151 call iteratorIndex _iterator[124132]))
      }
      ForLoop[124133]
      {
        unknown i[124158] "index var" "insert auto destroy"
        (479833 'end of statement')
        (124160 'move' i[124158] _indexOfInterest[124131])
        (479834 'end of statement' i[124158])
        unknown call_tmp[654455] "expr temp" "maybe param" "maybe type" "temp"
        (654458 'move' call_tmp[654455](124126 call offTup[124110] i[124158]))
        (124128 call = call_tmp[654455] off[124097])
        (479836 'end of statement' offTup[124110] i[124158])
        label _continueLabel[124136]
        _indexOfInterest[124131]
        _iterator[124132]
      }
      label _breakLabel[124137]
    }
    unknown call_tmp[654462] "expr temp" "maybe param" "maybe type" "temp"
    (654465 'move' call_tmp[654462](124175 call(383308 call (partial) exterior _mt[243] this[126206]) offTup[124110]))
    (517188 'move' ret[517183](517187 'deref' call_tmp[654462]))
    gotoReturn _end_exterior[517181] _end_exterior[517181]
    (479839 'end of statement' offTup[124110])
    label _end_exterior[517181]
    (517185 return ret[517183])
  }
  where {
    unknown call_tmp[654469] "expr temp" "maybe param" "maybe type" "temp"
    (654472 'move' call_tmp[654469](383289 call rank _mt[243] this[126206]))
    (124104 call != call_tmp[654469] 1)
  }
  function _domain[125908](?).interior[124190](arg _mt[126212]:_MT[238], arg this[126210]:_domain[125908](?), arg off[124187] :
  unknown call_tmp[654476] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654488] "expr temp" "maybe param" "maybe type" "temp"
    (654491 'move' call_tmp[654488](124201 call isAssociativeDom this[126210]))
    unknown call_tmp[654493] "expr temp" "maybe param" "maybe type" "temp"
    (654496 'move' call_tmp[654493](124275 call _cond_test call_tmp[654488]))
    if call_tmp[654493]
    {
      (124221 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[654498] "expr temp" "maybe param" "maybe type" "temp"
      (654501 'move' call_tmp[654498](124226 call isSparseDom this[126210]))
      unknown call_tmp[654503] "expr temp" "maybe param" "maybe type" "temp"
      (654506 'move' call_tmp[654503](124269 call _cond_test call_tmp[654498]))
      if call_tmp[654503]
      {
        (124246 call compilerError "interior not supported on sparse domains")
      }
      {
        (124267 call compilerError "interior not supported on this domain type")
      }
    }
    (517192 return _void[55])
  }
  where {
    unknown call_tmp[654508] "expr temp" "maybe param" "maybe type" "temp"
    (654511 'move' call_tmp[654508](124195 call isRectangularDom this[126210]))
    (124196 call ! call_tmp[654508])
  }
  function _domain[125908](?).interior[124293](arg _mt[126216]:_MT[238], arg this[126214]:_domain[125908](?), arg off[124289] ... :
  (383324 call intIdxType _mt[243] this[126214])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517196] "RVV" "temp"
    unknown call_tmp[654519] "expr temp" "maybe param" "maybe type" "temp"
    (654522 'move' call_tmp[654519](124298 call(383332 call (partial) interior _mt[243] this[126214]) off[124289]))
    (517201 'move' ret[517196](517200 'deref' call_tmp[654519]))
    (517198 return ret[517196])
  }
  function _domain[125908](?).interior[124313](arg _mt[126220]:_MT[238], arg this[126218]:_domain[125908](?), arg off[124310] :
  unknown call_tmp[654526] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517205] "RVV" "temp"
    unknown call_tmp[654540] "maybe param" "maybe type" "temp"
    (654543 'move' call_tmp[654540](124317 call(383345 call (partial) dims _mt[243] this[126218])))
    unknown ranges[124318] "dead at end of block" "insert auto destroy"
    (542932 'init var' ranges[124318] call_tmp[654540])
    (124321 'end of statement')
    {
      unknown _indexOfInterest[124455] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124456] "expr temp" "temp"
      unknown call_tmp[654547] "expr temp" "maybe param" "maybe type" "temp"
      (654550 'move' call_tmp[654547](383383 call rank _mt[243] this[126218]))
      unknown call_tmp[654552] "expr temp" "maybe param" "maybe type" "temp"
      (654555 'move' call_tmp[654552](124470 call - call_tmp[654547] 1))
      unknown call_tmp[654557] "expr temp" "maybe param" "maybe type" "temp"
      (654560 'move' call_tmp[654557](124473 call chpl_direct_range_iter 0 call_tmp[654552] 1))
      (124465 'move' _iterator[124456](124463 call _getIterator call_tmp[654557]))
      Defer
      {
        {
          (124489 call _freeIterator _iterator[124456])
        }
      }
      { scopeless type
        (124478 'move' _indexOfInterest[124455](124475 call iteratorIndex _iterator[124456]))
      }
      ForLoop[124457]
      {
        unknown i[124482] "index var" "insert auto destroy"
        (479846 'end of statement')
        (124484 'move' i[124482] _indexOfInterest[124455])
        (479847 'end of statement' i[124482])
        {
          unknown tmp[424838] "maybe param" "temp"
          unknown tmp[424859] "maybe param" "temp"
          unknown call_tmp[654562] "expr temp" "maybe param" "maybe type" "temp"
          (654565 'move' call_tmp[654562](124334 call off[124310] i[124482]))
          (424870 'move' tmp[424859](124336 call > call_tmp[654562] 0))
          unknown call_tmp[654567] "expr temp" "maybe param" "maybe type" "temp"
          (654570 'move' call_tmp[654567](424872 call _cond_invalid tmp[424859]))
          if call_tmp[654567]
          {
            (424875 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[565373] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565374] "maybe param" "temp"
          unknown call_tmp[654572] "expr temp" "maybe param" "maybe type" "temp"
          (654575 'move' call_tmp[654572](424860 call isTrue tmp[424859]))
          (565379 'move' tmp[565374](565377 call _cond_test call_tmp[654572]))
          if tmp[565374]
          {
            unknown tmp[565381] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[654579] "expr temp" "maybe param" "maybe type" "temp"
            (654582 'move' call_tmp[654579](124341 call(383351 call (partial) dim _mt[243] this[126218]) i[124482]))
            unknown call_tmp[654586] "expr temp" "maybe param" "maybe type" "temp"
            (654589 'move' call_tmp[654586](124342 call _high _mt[243] call_tmp[654579]))
            unknown call_tmp[654591] "expr temp" "maybe param" "maybe type" "temp"
            (654594 'move' call_tmp[654591](124346 call + call_tmp[654586] 1))
            unknown call_tmp[654596] "expr temp" "maybe param" "maybe type" "temp"
            (654599 'move' call_tmp[654596](124351 call off[124310] i[124482]))
            unknown call_tmp[654601] "expr temp" "maybe param" "maybe type" "temp"
            (654604 'move' call_tmp[654601](124352 call - call_tmp[654591] call_tmp[654596]))
            unknown call_tmp[654608] "expr temp" "maybe param" "maybe type" "temp"
            (654611 'move' call_tmp[654608](124357 call(383358 call (partial) dim _mt[243] this[126218]) i[124482]))
            unknown call_tmp[654615] "expr temp" "maybe param" "maybe type" "temp"
            (654618 'move' call_tmp[654615](124358 call _low _mt[243] call_tmp[654608]))
            unknown call_tmp[654620] "expr temp" "maybe param" "maybe type" "temp"
            (654623 'move' call_tmp[654620](124361 call < call_tmp[654601] call_tmp[654615]))
            (565383 'move' tmp[565381](424863 call isTrue call_tmp[654620]))
            (565388 'move' tmp[565373](565385 '_paramFoldLogical' tmp[565374] tmp[565381]))
          }
          {
            (565393 'move' tmp[565373](565390 '_paramFoldLogical' tmp[565374] 0))
          }
          (424849 'move' tmp[424838] tmp[565373])
          unknown call_tmp[654625] "expr temp" "maybe param" "maybe type" "temp"
          (654628 'move' call_tmp[654625](424851 call _cond_invalid tmp[424838]))
          if call_tmp[654625]
          {
            (424854 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[565427] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565428] "maybe param" "temp"
          unknown call_tmp[654630] "expr temp" "maybe param" "maybe type" "temp"
          (654633 'move' call_tmp[654630](424839 call isTrue tmp[424838]))
          (565433 'move' tmp[565428](565431 call _cond_test call_tmp[654630]))
          if tmp[565428]
          {
            (565438 'move' tmp[565427](565435 '_paramFoldLogical' tmp[565428] 1))
          }
          {
            unknown tmp[424880] "maybe param" "temp"
            unknown call_tmp[654635] "expr temp" "maybe param" "maybe type" "temp"
            (654638 'move' call_tmp[654635](124368 call off[124310] i[124482]))
            (424891 'move' tmp[424880](124370 call < call_tmp[654635] 0))
            unknown call_tmp[654640] "expr temp" "maybe param" "maybe type" "temp"
            (654643 'move' call_tmp[654640](424893 call _cond_invalid tmp[424880]))
            if call_tmp[654640]
            {
              (424896 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[565400] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[565401] "maybe param" "temp"
            unknown call_tmp[654645] "expr temp" "maybe param" "maybe type" "temp"
            (654648 'move' call_tmp[654645](424881 call isTrue tmp[424880]))
            (565406 'move' tmp[565401](565404 call _cond_test call_tmp[654645]))
            if tmp[565401]
            {
              unknown tmp[565408] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[654652] "expr temp" "maybe param" "maybe type" "temp"
              (654655 'move' call_tmp[654652](124375 call(383365 call (partial) dim _mt[243] this[126218]) i[124482]))
              unknown call_tmp[654659] "expr temp" "maybe param" "maybe type" "temp"
              (654662 'move' call_tmp[654659](124376 call _low _mt[243] call_tmp[654652]))
              unknown call_tmp[654664] "expr temp" "maybe param" "maybe type" "temp"
              (654667 'move' call_tmp[654664](124380 call - call_tmp[654659] 1))
              unknown call_tmp[654669] "expr temp" "maybe param" "maybe type" "temp"
              (654672 'move' call_tmp[654669](124385 call off[124310] i[124482]))
              unknown call_tmp[654674] "expr temp" "maybe param" "maybe type" "temp"
              (654677 'move' call_tmp[654674](124386 call - call_tmp[654664] call_tmp[654669]))
              unknown call_tmp[654681] "expr temp" "maybe param" "maybe type" "temp"
              (654684 'move' call_tmp[654681](124391 call(383372 call (partial) dim _mt[243] this[126218]) i[124482]))
              unknown call_tmp[654688] "expr temp" "maybe param" "maybe type" "temp"
              (654691 'move' call_tmp[654688](124392 call _high _mt[243] call_tmp[654681]))
              unknown call_tmp[654693] "expr temp" "maybe param" "maybe type" "temp"
              (654696 'move' call_tmp[654693](124395 call > call_tmp[654674] call_tmp[654688]))
              (565410 'move' tmp[565408](424884 call isTrue call_tmp[654693]))
              (565415 'move' tmp[565400](565412 '_paramFoldLogical' tmp[565401] tmp[565408]))
            }
            {
              (565420 'move' tmp[565400](565417 '_paramFoldLogical' tmp[565401] 0))
            }
            unknown tmp[565440] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (565442 'move' tmp[565440](424843 call isTrue tmp[565400]))
            (565447 'move' tmp[565427](565444 '_paramFoldLogical' tmp[565428] tmp[565440]))
          }
          unknown call_tmp[654698] "expr temp" "maybe param" "maybe type" "temp"
          (654701 'move' call_tmp[654698](124425 call _cond_test tmp[565427]))
          if call_tmp[654698]
          {
            (124422 call halt "***Error: Argument to 'interior' function out of range in dimension " i[124482] "***")
            (479851 'end of statement' i[124482])
          }
          unknown call_tmp[654703] "expr temp" "maybe param" "maybe type" "temp"
          (654706 'move' call_tmp[654703](124433 call ranges[124318] i[124482]))
          unknown call_tmp[654710] "expr temp" "maybe param" "maybe type" "temp"
          (654713 'move' call_tmp[654710](359578 call _value _mt[243] this[126218]))
          unknown call_tmp[654717] "expr temp" "maybe param" "maybe type" "temp"
          (654720 'move' call_tmp[654717](124440 call(124435 call (partial) dsiDim _mt[243] call_tmp[654710]) i[124482]))
          unknown call_tmp[654724] "expr temp" "maybe param" "maybe type" "temp"
          (654727 'move' call_tmp[654724](124449 call off[124310] i[124482]))
          unknown call_tmp[654729] "expr temp" "maybe param" "maybe type" "temp"
          (654732 'move' call_tmp[654729](124451 call(124443 call (partial) interior _mt[243] call_tmp[654717]) call_tmp[654724]))
          (124452 call = call_tmp[654703] call_tmp[654729])
          (479853 'end of statement' ranges[124318] i[124482] i[124482] i[124482])
        }
        label _continueLabel[124460]
        _indexOfInterest[124455]
        _iterator[124456]
      }
      label _breakLabel[124461]
    }
    unknown call_tmp[654736] "expr temp" "maybe param" "maybe type" "temp"
    (654739 'move' call_tmp[654736](383388 call dist _mt[243] this[126218]))
    unknown call_tmp[654743] "expr temp" "maybe param" "maybe type" "temp"
    (654746 'move' call_tmp[654743](383392 call rank _mt[243] this[126218]))
    unknown call_tmp[654750] "expr temp" "maybe param" "maybe type" "temp"
    (654753 'move' call_tmp[654750](359582 call _value _mt[243] this[126218]))
    unknown call_tmp[654757] "expr temp" "maybe param" "maybe type" "temp"
    (654760 'move' call_tmp[654757](124502 call idxType _mt[243] call_tmp[654750]))
    unknown call_tmp[654764] "expr temp" "maybe param" "maybe type" "temp"
    (654767 'move' call_tmp[654764](383396 call stridable _mt[243] this[126218]))
    unknown call_tmp[654769] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654772 'move' call_tmp[654769](747897 'new' _domain[125908](?) call_tmp[654736] call_tmp[654743] call_tmp[654757] call_tmp[654764] ranges[124318]))
    (517210 'move' ret[517205](517209 'deref' call_tmp[654769]))
    gotoReturn _end_interior[517203] _end_interior[517203]
    (479858 'end of statement' ranges[124318])
    label _end_interior[517203]
    (517207 return ret[517205])
  }
  function _domain[125908](?).interior[124518](arg _mt[126224]:_MT[238], arg this[126222]:_domain[125908](?), arg off[124515] :
  (383401 call intIdxType _mt[243] this[126222])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517216] "RVV" "temp"
    unknown offTup[124528] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654778] "expr temp" "maybe param" "maybe type" "temp"
    (654781 'move' call_tmp[654778](383409 call rank _mt[243] this[126222]))
    unknown call_tmp[654785] "expr temp" "maybe param" "maybe type" "temp"
    (654788 'move' call_tmp[654785](383413 call intIdxType _mt[243] this[126222]))
    unknown call_tmp[654790] "expr temp" "maybe param" "maybe type" "temp"
    (654793 'move' call_tmp[654790](124526 call * call_tmp[654778] call_tmp[654785]))
    (542934 'default init var' offTup[124528] call_tmp[654790])
    (124531 'end of statement')
    {
      unknown _indexOfInterest[124549] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124550] "expr temp" "temp"
      unknown call_tmp[654797] "expr temp" "maybe param" "maybe type" "temp"
      (654800 'move' call_tmp[654797](383420 call rank _mt[243] this[126222]))
      unknown call_tmp[654802] "expr temp" "maybe param" "maybe type" "temp"
      (654805 'move' call_tmp[654802](124564 call - call_tmp[654797] 1))
      unknown call_tmp[654807] "expr temp" "maybe param" "maybe type" "temp"
      (654810 'move' call_tmp[654807](124567 call chpl_direct_range_iter 0 call_tmp[654802] 1))
      (124559 'move' _iterator[124550](124557 call _getIterator call_tmp[654807]))
      Defer
      {
        {
          (124583 call _freeIterator _iterator[124550])
        }
      }
      { scopeless type
        (124572 'move' _indexOfInterest[124549](124569 call iteratorIndex _iterator[124550]))
      }
      ForLoop[124551]
      {
        unknown i[124576] "index var" "insert auto destroy"
        (479861 'end of statement')
        (124578 'move' i[124576] _indexOfInterest[124549])
        (479862 'end of statement' i[124576])
        unknown call_tmp[654812] "expr temp" "maybe param" "maybe type" "temp"
        (654815 'move' call_tmp[654812](124544 call offTup[124528] i[124576]))
        (124546 call = call_tmp[654812] off[124515])
        (479864 'end of statement' offTup[124528] i[124576])
        label _continueLabel[124554]
        _indexOfInterest[124549]
        _iterator[124550]
      }
      label _breakLabel[124555]
    }
    unknown call_tmp[654819] "expr temp" "maybe param" "maybe type" "temp"
    (654822 'move' call_tmp[654819](124593 call(383424 call (partial) interior _mt[243] this[126222]) offTup[124528]))
    (517221 'move' ret[517216](517220 'deref' call_tmp[654819]))
    gotoReturn _end_interior[517214] _end_interior[517214]
    (479867 'end of statement' offTup[124528])
    label _end_interior[517214]
    (517218 return ret[517216])
  }
  where {
    unknown call_tmp[654826] "expr temp" "maybe param" "maybe type" "temp"
    (654829 'move' call_tmp[654826](383405 call rank _mt[243] this[126222]))
    (124522 call != call_tmp[654826] 1)
  }
  function _domain[125908](?).translate[124603](arg _mt[126228]:_MT[238], arg this[126226]:_domain[125908](?), arg off[124601]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654831] "expr temp" "maybe param" "maybe type" "temp"
    (654834 'move' call_tmp[654831](124614 call isAssociativeDom this[126226]))
    unknown call_tmp[654836] "expr temp" "maybe param" "maybe type" "temp"
    (654839 'move' call_tmp[654836](124688 call _cond_test call_tmp[654831]))
    if call_tmp[654836]
    {
      (124634 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[654841] "expr temp" "maybe param" "maybe type" "temp"
      (654844 'move' call_tmp[654841](124639 call isSparseDom this[126226]))
      unknown call_tmp[654846] "expr temp" "maybe param" "maybe type" "temp"
      (654849 'move' call_tmp[654846](124682 call _cond_test call_tmp[654841]))
      if call_tmp[654846]
      {
        (124659 call compilerError "translate not supported on sparse domains")
      }
      {
        (124680 call compilerError "translate not supported on this domain type")
      }
    }
    (517225 return _void[55])
  }
  where {
    unknown call_tmp[654851] "expr temp" "maybe param" "maybe type" "temp"
    (654854 'move' call_tmp[654851](124608 call isRectangularDom this[126226]))
    (124609 call ! call_tmp[654851])
  }
  function _domain[125908](?).translate[124704](arg _mt[126232]:_MT[238], arg this[126230]:_domain[125908](?), arg off[124701]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517229] "RVV" "temp"
    unknown call_tmp[654860] "expr temp" "maybe param" "maybe type" "temp"
    (654863 'move' call_tmp[654860](124709 call(383436 call (partial) translate _mt[243] this[126230]) off[124701]))
    (517234 'move' ret[517229](517233 'deref' call_tmp[654860]))
    (517231 return ret[517229])
  }
  function _domain[125908](?).translate[124719](arg _mt[126236]:_MT[238], arg this[126234]:_domain[125908](?), arg off[124717]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517238] "RVV" "temp"
    unknown call_tmp[654867] "expr temp" "maybe param" "maybe type" "temp"
    (654870 'move' call_tmp[654867](124726 call size _mt[243] off[124717]))
    unknown call_tmp[654874] "expr temp" "maybe param" "maybe type" "temp"
    (654877 'move' call_tmp[654874](383442 call rank _mt[243] this[126234]))
    unknown call_tmp[654879] "expr temp" "maybe param" "maybe type" "temp"
    (654882 'move' call_tmp[654879](124730 call != call_tmp[654867] call_tmp[654874]))
    unknown call_tmp[654884] "expr temp" "maybe param" "maybe type" "temp"
    (654887 'move' call_tmp[654884](124753 call _cond_test call_tmp[654879]))
    if call_tmp[654884]
    {
      (124751 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown call_tmp[654891] "maybe param" "maybe type" "temp"
    (654894 'move' call_tmp[654891](124761 call(383446 call (partial) dims _mt[243] this[126234])))
    unknown ranges[124762] "dead at end of block" "insert auto destroy"
    (542936 'init var' ranges[124762] call_tmp[654891])
    (124765 'end of statement')
    {
      unknown _indexOfInterest[124799] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124800] "expr temp" "temp"
      unknown call_tmp[654898] "expr temp" "maybe param" "maybe type" "temp"
      (654901 'move' call_tmp[654898](383455 call rank _mt[243] this[126234]))
      unknown call_tmp[654903] "expr temp" "maybe param" "maybe type" "temp"
      (654906 'move' call_tmp[654903](124814 call - call_tmp[654898] 1))
      unknown call_tmp[654908] "expr temp" "maybe param" "maybe type" "temp"
      (654911 'move' call_tmp[654908](124817 call chpl_direct_range_iter 0 call_tmp[654903] 1))
      (124809 'move' _iterator[124800](124807 call _getIterator call_tmp[654908]))
      Defer
      {
        {
          (124833 call _freeIterator _iterator[124800])
        }
      }
      { scopeless type
        (124822 'move' _indexOfInterest[124799](124819 call iteratorIndex _iterator[124800]))
      }
      ForLoop[124801]
      {
        unknown i[124826] "index var" "insert auto destroy"
        (479875 'end of statement')
        (124828 'move' i[124826] _indexOfInterest[124799])
        (479876 'end of statement' i[124826])
        unknown call_tmp[654913] "expr temp" "maybe param" "maybe type" "temp"
        (654916 'move' call_tmp[654913](124777 call ranges[124762] i[124826]))
        unknown call_tmp[654920] "expr temp" "maybe param" "maybe type" "temp"
        (654923 'move' call_tmp[654920](359587 call _value _mt[243] this[126234]))
        unknown call_tmp[654927] "expr temp" "maybe param" "maybe type" "temp"
        (654930 'move' call_tmp[654927](124784 call(124779 call (partial) dsiDim _mt[243] call_tmp[654920]) i[124826]))
        unknown call_tmp[654934] "expr temp" "maybe param" "maybe type" "temp"
        (654937 'move' call_tmp[654934](124793 call off[124717] i[124826]))
        unknown call_tmp[654939] "expr temp" "maybe param" "maybe type" "temp"
        (654942 'move' call_tmp[654939](124795 call(124787 call (partial) translate _mt[243] call_tmp[654927]) call_tmp[654934]))
        (124796 call = call_tmp[654913] call_tmp[654939])
        (479878 'end of statement' ranges[124762] i[124826] i[124826] i[124826])
        label _continueLabel[124804]
        _indexOfInterest[124799]
        _iterator[124800]
      }
      label _breakLabel[124805]
    }
    unknown call_tmp[654946] "expr temp" "maybe param" "maybe type" "temp"
    (654949 'move' call_tmp[654946](383460 call dist _mt[243] this[126234]))
    unknown call_tmp[654953] "expr temp" "maybe param" "maybe type" "temp"
    (654956 'move' call_tmp[654953](383464 call rank _mt[243] this[126234]))
    unknown call_tmp[654960] "expr temp" "maybe param" "maybe type" "temp"
    (654963 'move' call_tmp[654960](359591 call _value _mt[243] this[126234]))
    unknown call_tmp[654967] "expr temp" "maybe param" "maybe type" "temp"
    (654970 'move' call_tmp[654967](124846 call idxType _mt[243] call_tmp[654960]))
    unknown call_tmp[654974] "expr temp" "maybe param" "maybe type" "temp"
    (654977 'move' call_tmp[654974](383468 call stridable _mt[243] this[126234]))
    unknown call_tmp[654979] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654982 'move' call_tmp[654979](747898 'new' _domain[125908](?) call_tmp[654946] call_tmp[654953] call_tmp[654967] call_tmp[654974] ranges[124762]))
    (517243 'move' ret[517238](517242 'deref' call_tmp[654979]))
    gotoReturn _end_translate[517236] _end_translate[517236]
    (479883 'end of statement' ranges[124762])
    label _end_translate[517236]
    (517240 return ret[517238])
  }
  where {
    (124724 call isTuple off[124717])
  }
  function _domain[125908](?).translate[124861](arg _mt[126240]:_MT[238], arg this[126238]:_domain[125908](?), arg off[124859]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517249] "RVV" "temp"
    unknown offTup[124880] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654986] "expr temp" "maybe param" "maybe type" "temp"
    (654989 'move' call_tmp[654986](383478 call rank _mt[243] this[126238]))
    unknown call_tmp[654991] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (654994 'move' call_tmp[654991](124877 'typeof' off[124859]))
    unknown call_tmp[654996] "expr temp" "maybe param" "maybe type" "temp"
    (654999 'move' call_tmp[654996](124878 call * call_tmp[654986] call_tmp[654991]))
    (542938 'default init var' offTup[124880] call_tmp[654996])
    (124883 'end of statement')
    {
      unknown _indexOfInterest[124901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124902] "expr temp" "temp"
      unknown call_tmp[655003] "expr temp" "maybe param" "maybe type" "temp"
      (655006 'move' call_tmp[655003](383486 call rank _mt[243] this[126238]))
      unknown call_tmp[655008] "expr temp" "maybe param" "maybe type" "temp"
      (655011 'move' call_tmp[655008](124916 call - call_tmp[655003] 1))
      unknown call_tmp[655013] "expr temp" "maybe param" "maybe type" "temp"
      (655016 'move' call_tmp[655013](124919 call chpl_direct_range_iter 0 call_tmp[655008] 1))
      (124911 'move' _iterator[124902](124909 call _getIterator call_tmp[655013]))
      Defer
      {
        {
          (124935 call _freeIterator _iterator[124902])
        }
      }
      { scopeless type
        (124924 'move' _indexOfInterest[124901](124921 call iteratorIndex _iterator[124902]))
      }
      ForLoop[124903]
      {
        unknown i[124928] "index var" "insert auto destroy"
        (479886 'end of statement')
        (124930 'move' i[124928] _indexOfInterest[124901])
        (479887 'end of statement' i[124928])
        unknown call_tmp[655018] "expr temp" "maybe param" "maybe type" "temp"
        (655021 'move' call_tmp[655018](124896 call offTup[124880] i[124928]))
        (124898 call = call_tmp[655018] off[124859])
        (479889 'end of statement' offTup[124880] i[124928])
        label _continueLabel[124906]
        _indexOfInterest[124901]
        _iterator[124902]
      }
      label _breakLabel[124907]
    }
    unknown call_tmp[655025] "expr temp" "maybe param" "maybe type" "temp"
    (655028 'move' call_tmp[655025](124945 call(383490 call (partial) translate _mt[243] this[126238]) offTup[124880]))
    (517254 'move' ret[517249](517253 'deref' call_tmp[655025]))
    gotoReturn _end_translate[517247] _end_translate[517247]
    (479892 'end of statement' offTup[124880])
    label _end_translate[517247]
    (517251 return ret[517249])
  }
  where {
    unknown tmp[424901] "maybe param" "temp"
    unknown call_tmp[655032] "expr temp" "maybe param" "maybe type" "temp"
    (655035 'move' call_tmp[655032](383473 call rank _mt[243] this[126238]))
    (424912 'move' tmp[424901](124865 call != call_tmp[655032] 1))
    unknown call_tmp[655037] "expr temp" "maybe param" "maybe type" "temp"
    (655040 'move' call_tmp[655037](424914 call _cond_invalid tmp[424901]))
    if call_tmp[655037]
    {
      (424917 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565454] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565455] "maybe param" "temp"
    unknown call_tmp[655042] "expr temp" "maybe param" "maybe type" "temp"
    (655045 'move' call_tmp[655042](424902 call isTrue tmp[424901]))
    (565460 'move' tmp[565455](565458 call _cond_test call_tmp[655042]))
    if tmp[565455]
    {
      unknown tmp[565462] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655047] "expr temp" "maybe param" "maybe type" "temp"
      (655050 'move' call_tmp[655047](124870 call isTuple off[124859]))
      unknown call_tmp[655052] "expr temp" "maybe param" "maybe type" "temp"
      (655055 'move' call_tmp[655052](124871 call ! call_tmp[655047]))
      (565464 'move' tmp[565462](424905 call isTrue call_tmp[655052]))
      (565469 'move' tmp[565454](565466 '_paramFoldLogical' tmp[565455] tmp[565462]))
    }
    {
      (565474 'move' tmp[565454](565471 '_paramFoldLogical' tmp[565455] 0))
    }
    (748283 call chpl_statementLevelSymbol tmp[565454])
  }
  function _domain[125908](?).isEmpty[124953](arg _mt[126244]:_MT[238], arg this[126242]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517260] "RVV" "temp"
    unknown call_tmp[655059] "expr temp" "maybe param" "maybe type" "temp"
    (655062 'move' call_tmp[655059](124957 call size _mt[243] this[126242]))
    unknown call_tmp[655064] "expr temp" "maybe param" "maybe type" "temp"
    (655067 'move' call_tmp[655064](124961 call == call_tmp[655059] 0))
    (517266 'move' ret[517260](517265 'coerce' call_tmp[655064] bool[10]))
    (517262 return ret[517260])
  }
  { scopeless type
    bool[10]
  }
  function _domain[125908](?).chpl__unTranslate[124977](arg _mt[126248]:_MT[238], arg this[126246]:_domain[125908](?), arg off[124973]:integral[199](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517270] "RVV" "temp"
    unknown call_tmp[655073] "expr temp" "maybe param" "maybe type" "temp"
    (655076 'move' call_tmp[655073](124982 call(383500 call (partial) chpl__unTranslate _mt[243] this[126246]) off[124973]))
    (517275 'move' ret[517270](517274 'deref' call_tmp[655073]))
    (517272 return ret[517270])
  }
  function _domain[125908](?).chpl__unTranslate[124997](arg _mt[126252]:_MT[238], arg this[126250]:_domain[125908](?), arg off[124994] :
  unknown call_tmp[655080] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517279] "RVV" "temp"
    unknown call_tmp[655094] "maybe param" "maybe type" "temp"
    (655097 'move' call_tmp[655094](125001 call(383513 call (partial) dims _mt[243] this[126250])))
    unknown ranges[125002] "dead at end of block" "insert auto destroy"
    (542940 'init var' ranges[125002] call_tmp[655094])
    (125005 'end of statement')
    {
      unknown _indexOfInterest[125037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125038] "expr temp" "temp"
      unknown call_tmp[655101] "expr temp" "maybe param" "maybe type" "temp"
      (655104 'move' call_tmp[655101](383526 call rank _mt[243] this[126250]))
      unknown call_tmp[655106] "expr temp" "maybe param" "maybe type" "temp"
      (655109 'move' call_tmp[655106](125052 call - call_tmp[655101] 1))
      unknown call_tmp[655111] "expr temp" "maybe param" "maybe type" "temp"
      (655114 'move' call_tmp[655111](125055 call chpl_direct_range_iter 0 call_tmp[655106] 1))
      (125047 'move' _iterator[125038](125045 call _getIterator call_tmp[655111]))
      Defer
      {
        {
          (125071 call _freeIterator _iterator[125038])
        }
      }
      { scopeless type
        (125060 'move' _indexOfInterest[125037](125057 call iteratorIndex _iterator[125038]))
      }
      ForLoop[125039]
      {
        unknown i[125064] "index var" "insert auto destroy"
        (479897 'end of statement')
        (125066 'move' i[125064] _indexOfInterest[125037])
        (479898 'end of statement' i[125064])
        unknown call_tmp[655116] "expr temp" "maybe param" "maybe type" "temp"
        (655119 'move' call_tmp[655116](125018 call ranges[125002] i[125064]))
        unknown call_tmp[655123] "expr temp" "maybe param" "maybe type" "temp"
        (655126 'move' call_tmp[655123](125022 call(383519 call (partial) dim _mt[243] this[126250]) i[125064]))
        unknown call_tmp[655130] "expr temp" "maybe param" "maybe type" "temp"
        (655133 'move' call_tmp[655130](125031 call off[124994] i[125064]))
        unknown call_tmp[655135] "expr temp" "maybe param" "maybe type" "temp"
        (655138 'move' call_tmp[655135](125033 call(125025 call (partial) chpl__unTranslate _mt[243] call_tmp[655123]) call_tmp[655130]))
        (125034 call = call_tmp[655116] call_tmp[655135])
        (479900 'end of statement' ranges[125002] i[125064] i[125064] i[125064])
        label _continueLabel[125042]
        _indexOfInterest[125037]
        _iterator[125038]
      }
      label _breakLabel[125043]
    }
    unknown call_tmp[655142] "expr temp" "maybe param" "maybe type" "temp"
    (655145 'move' call_tmp[655142](383531 call dist _mt[243] this[126250]))
    unknown call_tmp[655149] "expr temp" "maybe param" "maybe type" "temp"
    (655152 'move' call_tmp[655149](383535 call rank _mt[243] this[126250]))
    unknown call_tmp[655156] "expr temp" "maybe param" "maybe type" "temp"
    (655159 'move' call_tmp[655156](359596 call _value _mt[243] this[126250]))
    unknown call_tmp[655163] "expr temp" "maybe param" "maybe type" "temp"
    (655166 'move' call_tmp[655163](125084 call idxType _mt[243] call_tmp[655156]))
    unknown call_tmp[655170] "expr temp" "maybe param" "maybe type" "temp"
    (655173 'move' call_tmp[655170](383539 call stridable _mt[243] this[126250]))
    unknown call_tmp[655175] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655178 'move' call_tmp[655175](747899 'new' _domain[125908](?) call_tmp[655142] call_tmp[655149] call_tmp[655163] call_tmp[655170] ranges[125002]))
    (517284 'move' ret[517279](517283 'deref' call_tmp[655175]))
    gotoReturn _end_chpl__unTranslate[517277] _end_chpl__unTranslate[517277]
    (479905 'end of statement' ranges[125002])
    label _end_chpl__unTranslate[517277]
    (517281 return ret[517279])
  }
  function _domain[125908](?).setIndices[125098](arg _mt[126256]:_MT[238], arg this[126254]:_domain[125908](?), arg x[125096]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655182] "expr temp" "maybe param" "maybe type" "temp"
    (655185 'move' call_tmp[655182](359600 call _value _mt[243] this[126254]))
    (125106 call(125101 call (partial) dsiSetIndices _mt[243] call_tmp[655182]) x[125096])
    (479907 'end of statement')
    unknown call_tmp[655191] "expr temp" "maybe param" "maybe type" "temp"
    (655194 'move' call_tmp[655191](383546 call _instance _mt[243] this[126254]))
    unknown call_tmp[655196] "expr temp" "maybe param" "maybe type" "temp"
    (655199 'move' call_tmp[655196](125112 call _isPrivatized call_tmp[655191]))
    unknown call_tmp[655201] "expr temp" "maybe param" "maybe type" "temp"
    (655204 'move' call_tmp[655201](125119 call _cond_test call_tmp[655196]))
    if call_tmp[655201]
    {
      unknown call_tmp[655208] "expr temp" "maybe param" "maybe type" "temp"
      (655211 'move' call_tmp[655208](383550 call _value _mt[243] this[126254]))
      (125116 call _reprivatize call_tmp[655208])
    }
    (517288 return _void[55])
  }
  function _domain[125908](?).getIndices[125127](arg _mt[126260]:_MT[238], arg this[126258]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517292] "RVV" "temp"
    unknown call_tmp[655215] "expr temp" "maybe param" "maybe type" "temp"
    (655218 'move' call_tmp[655215](359604 call _value _mt[243] this[126258]))
    unknown call_tmp[655222] "expr temp" "maybe param" "maybe type" "temp"
    (655225 'move' call_tmp[655222](125136 call(125132 call (partial) dsiGetIndices _mt[243] call_tmp[655215])))
    (517297 'move' ret[517292](517296 'deref' call_tmp[655222]))
    (517294 return ret[517292])
  }
  function _domain[125908](?).writeThis[125146](arg _mt[126264]:_MT[238], arg this[126262]:_domain[125908](?), arg f[125144]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655229] "expr temp" "maybe param" "maybe type" "temp"
    (655232 'move' call_tmp[655229](359608 call _value _mt[243] this[126262]))
    (125156 call(125151 call (partial) dsiSerialWrite _mt[243] call_tmp[655229]) f[125144])
    (517299 return _void[55])
  }
  function _domain[125908](?).readThis[125165](arg _mt[126268]:_MT[238], arg this[126266]:_domain[125908](?), arg f[125163]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655238] "expr temp" "maybe param" "maybe type" "temp"
    (655241 'move' call_tmp[655238](359612 call _value _mt[243] this[126266]))
    (125175 call(125170 call (partial) dsiSerialRead _mt[243] call_tmp[655238]) f[125163])
    (517301 return _void[55])
  }
  function _domain[125908](?).localSlice[125186](arg _mt[126272]:_MT[238], arg this[126270]:_domain[125908](?), arg r[125183]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517305] "RVV" "temp"
    unknown call_tmp[655249] "expr temp" "maybe param" "maybe type" "temp"
    (655252 'move' call_tmp[655249](383561 call _value _mt[243] this[126270]))
    unknown call_tmp[655254] "expr temp" "maybe param" "maybe type" "temp"
    (655257 'move' call_tmp[655254](125201 '_wide_get_locale' call_tmp[655249]))
    unknown call_tmp[655259] "expr temp" "maybe param" "maybe type" "temp"
    (655262 'move' call_tmp[655259](125202 call chpl_localeID_to_locale call_tmp[655254]))
    unknown call_tmp[655264] "expr temp" "maybe param" "maybe type" "temp"
    (655267 'move' call_tmp[655264](383564 call here[90438]))
    unknown call_tmp[655269] "expr temp" "maybe param" "maybe type" "temp"
    (655272 'move' call_tmp[655269](125205 call != call_tmp[655259] call_tmp[655264]))
    unknown call_tmp[655274] "expr temp" "maybe param" "maybe type" "temp"
    (655277 'move' call_tmp[655274](125254 call _cond_test call_tmp[655269]))
    if call_tmp[655274]
    {
      unknown call_tmp[655281] "expr temp" "maybe param" "maybe type" "temp"
      (655284 'move' call_tmp[655281](383567 call _value _mt[243] this[126270]))
      unknown call_tmp[655286] "expr temp" "maybe param" "maybe type" "temp"
      (655289 'move' call_tmp[655286](125230 '_wide_get_node' call_tmp[655281]))
      unknown call_tmp[655291] "expr temp" "maybe param" "maybe type" "temp"
      (655294 'move' call_tmp[655291](359619 call here[90438]))
      unknown call_tmp[655298] "expr temp" "maybe param" "maybe type" "temp"
      (655301 'move' call_tmp[655298](125249 call id _mt[243] call_tmp[655291]))
      (125252 call halt "Attempting to take a local slice of a domain on locale " call_tmp[655286] " from locale " call_tmp[655298])
    }
    unknown call_tmp[655303] "expr temp" "maybe param" "maybe type" "temp"
    (655306 'move' call_tmp[655303](125264 call this[126270](125262 'expand_tuple' r[125183])))
    (517310 'move' ret[517305](517309 'deref' call_tmp[655303]))
    (517307 return ret[517305])
  }
  where {
    unknown tmp[424922] "maybe param" "temp"
    (424933 'move' tmp[424922](125191 call chpl__isTupleOfRanges r[125183]))
    unknown call_tmp[655308] "expr temp" "maybe param" "maybe type" "temp"
    (655311 'move' call_tmp[655308](424935 call _cond_invalid tmp[424922]))
    if call_tmp[655308]
    {
      (424938 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565481] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565482] "maybe param" "temp"
    unknown call_tmp[655313] "expr temp" "maybe param" "maybe type" "temp"
    (655316 'move' call_tmp[655313](424923 call isTrue tmp[424922]))
    (565487 'move' tmp[565482](565485 call _cond_test call_tmp[655313]))
    if tmp[565482]
    {
      unknown tmp[565489] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655320] "expr temp" "maybe param" "maybe type" "temp"
      (655323 'move' call_tmp[655320](359616 call _value _mt[243] this[126270]))
      unknown call_tmp[655327] "expr temp" "maybe param" "maybe type" "temp"
      (655330 'move' call_tmp[655327](125197 call(125193 call (partial) isDefaultRectangular _mt[243] call_tmp[655320])))
      (565491 'move' tmp[565489](424926 call isTrue call_tmp[655327]))
      (565496 'move' tmp[565481](565493 '_paramFoldLogical' tmp[565482] tmp[565489]))
    }
    {
      (565501 'move' tmp[565481](565498 '_paramFoldLogical' tmp[565482] 0))
    }
    (748285 call chpl_statementLevelSymbol tmp[565481])
  }
  function _domain[125908](?).localSlice[125276](arg _mt[126276]:_MT[238], arg this[126274]:_domain[125908](?), arg r[125273]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517314] "RVV" "temp"
    unknown call_tmp[655336] "expr temp" "maybe param" "maybe type" "temp"
    (655339 'move' call_tmp[655336](359626 call _value _mt[243] this[126274]))
    unknown call_tmp[655343] "expr temp" "maybe param" "maybe type" "temp"
    (655346 'move' call_tmp[655343](125301 call chpl__anyStridable r[125273]))
    unknown call_tmp[655348] "expr temp" "maybe param" "maybe type" "temp"
    (655351 'move' call_tmp[655348](125304 call(125295 call (partial) dsiLocalSlice _mt[243] call_tmp[655336]) call_tmp[655343] r[125273]))
    (517319 'move' ret[517314](517318 'deref' call_tmp[655348]))
    (517316 return ret[517314])
  }
  where {
    unknown tmp[424943] "maybe param" "temp"
    (424954 'move' tmp[424943](125281 call chpl__isTupleOfRanges r[125273]))
    unknown call_tmp[655353] "expr temp" "maybe param" "maybe type" "temp"
    (655356 'move' call_tmp[655353](424956 call _cond_invalid tmp[424943]))
    if call_tmp[655353]
    {
      (424959 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565508] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565509] "maybe param" "temp"
    unknown call_tmp[655358] "expr temp" "maybe param" "maybe type" "temp"
    (655361 'move' call_tmp[655358](424944 call isTrue tmp[424943]))
    (565514 'move' tmp[565509](565512 call _cond_test call_tmp[655358]))
    if tmp[565509]
    {
      unknown tmp[565516] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655365] "expr temp" "maybe param" "maybe type" "temp"
      (655368 'move' call_tmp[655365](359622 call _value _mt[243] this[126274]))
      unknown call_tmp[655372] "expr temp" "maybe param" "maybe type" "temp"
      (655375 'move' call_tmp[655372](125287 call(125283 call (partial) isDefaultRectangular _mt[243] call_tmp[655365])))
      unknown call_tmp[655377] "expr temp" "maybe param" "maybe type" "temp"
      (655380 'move' call_tmp[655377](125288 call ! call_tmp[655372]))
      (565518 'move' tmp[565516](424947 call isTrue call_tmp[655377]))
      (565523 'move' tmp[565508](565520 '_paramFoldLogical' tmp[565509] tmp[565516]))
    }
    {
      (565528 'move' tmp[565508](565525 '_paramFoldLogical' tmp[565509] 0))
    }
    (748287 call chpl_statementLevelSymbol tmp[565508])
  }
  function _domain[125908](?).localSlice[125317](arg _mt[126280]:_MT[238], arg this[126278]:_domain[125908](?), arg d[125314]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517323] "RVV" "temp"
    unknown call_tmp[655386] "expr temp" "maybe param" "maybe type" "temp"
    (655389 'move' call_tmp[655386](125325 call(125321 call (partial) getIndices _mt[243] d[125314])))
    unknown call_tmp[655391] "expr temp" "maybe param" "maybe type" "temp"
    (655394 'move' call_tmp[655391](125328 call(383581 call (partial) localSlice _mt[243] this[126278])(125326 'expand_tuple' call_tmp[655386])))
    (517328 'move' ret[517323](517327 'deref' call_tmp[655391]))
    (517325 return ret[517323])
  }
  function _domain[125908](?).sorted[125345](arg _mt[126284]:_MT[238], arg this[126282]:_domain[125908](?), arg comparator[125341]:_any[178](?) :
  (748834 call chpl_defaultComparator) =
  (125340 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517332] "RVV" "temp"
    {
      unknown _indexOfInterest[125361] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125362] "expr temp" "temp"
      unknown call_tmp[655398] "expr temp" "maybe param" "maybe type" "temp"
      (655401 'move' call_tmp[655398](359631 call _value _mt[243] this[126282]))
      unknown call_tmp[655405] "expr temp" "maybe param" "maybe type" "temp"
      (655408 'move' call_tmp[655405](125356 call(125351 call (partial) dsiSorted _mt[243] call_tmp[655398]) comparator[125341]))
      (125371 'move' _iterator[125362](125369 call _getIterator call_tmp[655405]))
      Defer
      {
        {
          (125388 call _freeIterator _iterator[125362])
        }
      }
      { scopeless type
        (125377 'move' _indexOfInterest[125361](125374 call iteratorIndex _iterator[125362]))
      }
      ForLoop[125363]
      {
        unknown i[125381] "index var" "insert auto destroy"
        (479917 'end of statement')
        (125383 'move' i[125381] _indexOfInterest[125361])
        (479918 'end of statement' i[125381])
        {
          unknown yret[517336] "YVV" "temp"
          (517339 'move' yret[517336](517338 'deref' i[125381]))
          (517341 yield yret[517336])
          (479920 'end of statement' i[125381])
        }
        label _continueLabel[125366]
        _indexOfInterest[125361]
        _iterator[125362]
      }
      label _breakLabel[125367]
    }
    (517334 return ret[517332])
  }
  function _domain[125908](?).displayRepresentation[125400](arg _mt[126288]:_MT[238], arg this[126286]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655412] "expr temp" "maybe param" "maybe type" "temp"
    (655415 'move' call_tmp[655412](359635 call _value _mt[243] this[126286]))
    (125407 call(125403 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[655412]))
    (517343 return _void[55])
  }
  function _domain[125908](?).defaultSparseDist[125414](arg _mt[126292]:_MT[238], arg this[126290]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[517347] "RVV" "temp"
    unknown call_tmp[655421] "expr temp" "maybe param" "maybe type" "temp"
    (655424 'move' call_tmp[655421](359639 call _value _mt[243] this[126290]))
    unknown call_tmp[655428] "expr temp" "maybe param" "maybe type" "temp"
    (655431 'move' call_tmp[655428](125418 call dist _mt[243] call_tmp[655421]))
    unknown call_tmp[655433] "expr temp" "maybe param" "maybe type" "temp"
    (655436 'move' call_tmp[655433](125422 call _getDistribution call_tmp[655428]))
    (517352 'move' ret[517347](517351 'deref' call_tmp[655433]))
    (517349 return ret[517347])
  }
  function _domain[125908](?).safeCast[125434](arg _mt[126296]:_MT[238], arg this[126294]:_domain[125908](?), arg t[125431]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517356] "RVV" "temp"
    const tmpD[125447] "dead at end of block" "const" "insert auto destroy"
    (542942 'default init var' tmpD[125447] t[125431])
    (125450 'end of statement')
    unknown call_tmp[655440] "expr temp" "maybe param" "maybe type" "temp"
    (655443 'move' call_tmp[655440](125453 call rank _mt[243] tmpD[125447]))
    unknown call_tmp[655447] "expr temp" "maybe param" "maybe type" "temp"
    (655450 'move' call_tmp[655447](125457 call rank _mt[243] this[126294]))
    unknown call_tmp[655452] "expr temp" "maybe param" "maybe type" "temp"
    (655455 'move' call_tmp[655452](125460 call != call_tmp[655440] call_tmp[655447]))
    unknown call_tmp[655457] "expr temp" "maybe param" "maybe type" "temp"
    (655460 'move' call_tmp[655457](125483 call _cond_test call_tmp[655452]))
    if call_tmp[655457]
    {
      (125481 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655464] "expr temp" "maybe param" "maybe type" "temp"
    (655467 'move' call_tmp[655464](125489 call idxType _mt[243] tmpD[125447]))
    unknown call_tmp[655471] "expr temp" "maybe param" "maybe type" "temp"
    (655474 'move' call_tmp[655471](125493 call idxType _mt[243] this[126294]))
    unknown call_tmp[655476] "expr temp" "maybe param" "maybe type" "temp"
    (655479 'move' call_tmp[655476](125496 call != call_tmp[655464] call_tmp[655471]))
    unknown call_tmp[655481] "expr temp" "maybe param" "maybe type" "temp"
    (655484 'move' call_tmp[655481](125519 call _cond_test call_tmp[655476]))
    if call_tmp[655481]
    {
      (125517 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655488] "expr temp" "maybe param" "maybe type" "temp"
    (655491 'move' call_tmp[655488](125525 call stridable _mt[243] tmpD[125447]))
    unknown call_tmp[655495] "expr temp" "maybe param" "maybe type" "temp"
    (655498 'move' call_tmp[655495](125529 call stridable _mt[243] this[126294]))
    unknown call_tmp[655500] "expr temp" "maybe param" "maybe type" "temp"
    (655503 'move' call_tmp[655500](125532 call == call_tmp[655488] call_tmp[655495]))
    unknown call_tmp[655505] "expr temp" "maybe param" "maybe type" "temp"
    (655508 'move' call_tmp[655505](125713 call _cond_test call_tmp[655500]))
    if call_tmp[655505]
    {
      (517361 'move' ret[517356](517360 'deref' this[126294]))
      gotoReturn _end_safeCast[517354] _end_safeCast[517354]
    }
    {
      unknown tmp[424985] "maybe param" "temp"
      unknown call_tmp[655512] "expr temp" "maybe param" "maybe type" "temp"
      (655515 'move' call_tmp[655512](125538 call stridable _mt[243] tmpD[125447]))
      (424996 'move' tmp[424985](125541 call ! call_tmp[655512]))
      unknown call_tmp[655517] "expr temp" "maybe param" "maybe type" "temp"
      (655520 'move' call_tmp[655517](424998 call _cond_invalid tmp[424985]))
      if call_tmp[655517]
      {
        (425001 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565535] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565536] "maybe param" "temp"
      unknown call_tmp[655522] "expr temp" "maybe param" "maybe type" "temp"
      (655525 'move' call_tmp[655522](424986 call isTrue tmp[424985]))
      (565541 'move' tmp[565536](565539 call _cond_test call_tmp[655522]))
      if tmp[565536]
      {
        unknown tmp[565543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655529] "expr temp" "maybe param" "maybe type" "temp"
        (655532 'move' call_tmp[655529](125544 call stridable _mt[243] this[126294]))
        (565545 'move' tmp[565543](424989 call isTrue call_tmp[655529]))
        (565550 'move' tmp[565535](565547 '_paramFoldLogical' tmp[565536] tmp[565543]))
      }
      {
        (565555 'move' tmp[565535](565552 '_paramFoldLogical' tmp[565536] 0))
      }
      unknown call_tmp[655534] "expr temp" "maybe param" "maybe type" "temp"
      (655537 'move' call_tmp[655534](125709 call _cond_test tmp[565535]))
      if call_tmp[655534]
      {
        unknown call_tmp[655541] "maybe param" "maybe type" "temp"
        (655544 'move' call_tmp[655541](125554 call(125550 call (partial) getIndices _mt[243] this[126294])))
        const inds[125555] "dead at end of block" "const" "insert auto destroy"
        (542944 'init var' inds[125555] call_tmp[655541])
        (125558 'end of statement')
        unknown unstridableInds[125572] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655548] "expr temp" "maybe param" "maybe type" "temp"
        (655551 'move' call_tmp[655548](383592 call rank _mt[243] this[126294]))
        unknown call_tmp[655555] "expr temp" "maybe param" "maybe type" "temp"
        (655558 'move' call_tmp[655555](125563 call idxType _mt[243] tmpD[125447]))
        unknown call_tmp[655560] "expr temp" "maybe param" "maybe type" "temp"
        (655563 'move' call_tmp[655560](125569 call range[64319](?) call_tmp[655555](stridable = 0)))
        unknown call_tmp[655565] "expr temp" "maybe param" "maybe type" "temp"
        (655568 'move' call_tmp[655565](125570 call * call_tmp[655548] call_tmp[655560]))
        (542946 'default init var' unstridableInds[125572] call_tmp[655565])
        (125575 'end of statement' tmpD[125447])
        {
          unknown dim[125649] "dead at end of block" "insert auto destroy"
          (542948 'init var' dim[125649] 0)
          (479929 'end of statement')
          unknown tmp[125650] "maybe param" "temp"
          unknown call_tmp[655572] "expr temp" "maybe param" "maybe type" "temp"
          (655575 'move' call_tmp[655572](125578 call size _mt[243] inds[125555]))
          unknown call_tmp[655577] "expr temp" "maybe param" "maybe type" "temp"
          (655580 'move' call_tmp[655577](125582 call - call_tmp[655572] 1))
          (125662 'move' tmp[125650](125660 call chpl_compute_low_param_loop_bound 0 call_tmp[655577]))
          unknown tmp[125651] "maybe param" "temp"
          unknown call_tmp[655584] "expr temp" "maybe param" "maybe type" "temp"
          (655587 'move' call_tmp[655584](125669 call size _mt[243] inds[125555]))
          unknown call_tmp[655589] "expr temp" "maybe param" "maybe type" "temp"
          (655592 'move' call_tmp[655589](125667 call - call_tmp[655584] 1))
          (125675 'move' tmp[125651](125673 call chpl_compute_high_param_loop_bound 0 call_tmp[655589]))
          unknown tmp[125652] "maybe param" "temp"
          (125678 'move' tmp[125652] 1)
          ParamForLoop[125680]
          { dim[125649] tmp[125650] tmp[125651] tmp[125652]
            {
              unknown call_tmp[655594] "expr temp" "maybe param" "maybe type" "temp"
              (655597 'move' call_tmp[655594](125589 call inds[125555] dim[125649]))
              unknown call_tmp[655601] "expr temp" "maybe param" "maybe type" "temp"
              (655604 'move' call_tmp[655601](125590 call stride _mt[243] call_tmp[655594]))
              unknown call_tmp[655606] "expr temp" "maybe param" "maybe type" "temp"
              (655609 'move' call_tmp[655606](125594 call != call_tmp[655601] 1))
              unknown call_tmp[655611] "expr temp" "maybe param" "maybe type" "temp"
              (655614 'move' call_tmp[655611](125618 call _cond_test call_tmp[655606]))
              if call_tmp[655611]
              {
                (125616 call halt "non-stridable domain assigned non-unit stride in dimension " dim[125649])
                (479930 'end of statement' dim[125649])
              }
              unknown call_tmp[655616] "expr temp" "maybe param" "maybe type" "temp"
              (655619 'move' call_tmp[655616](125627 call unstridableInds[125572] dim[125649]))
              unknown call_tmp[655621] "expr temp" "maybe param" "maybe type" "temp"
              (655624 'move' call_tmp[655621](125631 call inds[125555] dim[125649]))
              unknown call_tmp[655630] "expr temp" "maybe param" "maybe type" "temp"
              (655633 'move' call_tmp[655630](125637 call idxType _mt[243] tmpD[125447]))
              unknown call_tmp[655635] "expr temp" "maybe param" "maybe type" "temp"
              (655638 'move' call_tmp[655635](125643 call range[64319](?) call_tmp[655630](stridable = 0)))
              unknown call_tmp[655640] "expr temp" "maybe param" "maybe type" "temp"
              (655643 'move' call_tmp[655640](125645 call(125632 call (partial) safeCast _mt[243] call_tmp[655621]) call_tmp[655635]))
              (125646 call = call_tmp[655616] call_tmp[655640])
              (479932 'end of statement' unstridableInds[125572] dim[125649] inds[125555] dim[125649] tmpD[125447])
            }
          }
          label _unused_continueLabel[125654]
          label _breakLabel[125653]
        }
        (125695 call(125690 call (partial) setIndices _mt[243] tmpD[125447]) unstridableInds[125572])
        (479938 'end of statement' tmpD[125447] unstridableInds[125572])
        (517366 'move' ret[517356](517365 'deref' tmpD[125447]))
        gotoReturn _end_safeCast[517354] _end_safeCast[517354]
        (479941 'end of statement' tmpD[125447])
      }
      {
        (125702 call = tmpD[125447] this[126294])
        (479943 'end of statement' tmpD[125447])
        (517371 'move' ret[517356](517370 'deref' tmpD[125447]))
        gotoReturn _end_safeCast[517354] _end_safeCast[517354]
        (479945 'end of statement' tmpD[125447])
      }
    }
    label _end_safeCast[517354]
    (517358 return ret[517356])
  }
  where {
    unknown tmp[424964] "maybe param" "temp"
    (424975 'move' tmp[424964](125439 call chpl__isRectangularDomType t[125431]))
    unknown call_tmp[655647] "expr temp" "maybe param" "maybe type" "temp"
    (655650 'move' call_tmp[655647](424977 call _cond_invalid tmp[424964]))
    if call_tmp[655647]
    {
      (424980 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565562] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565563] "maybe param" "temp"
    unknown call_tmp[655652] "expr temp" "maybe param" "maybe type" "temp"
    (655655 'move' call_tmp[655652](424965 call isTrue tmp[424964]))
    (565568 'move' tmp[565563](565566 call _cond_test call_tmp[655652]))
    if tmp[565563]
    {
      unknown tmp[565570] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655657] "expr temp" "maybe param" "maybe type" "temp"
      (655660 'move' call_tmp[655657](125443 call isRectangularDom this[126294]))
      (565572 'move' tmp[565570](424968 call isTrue call_tmp[655657]))
      (565577 'move' tmp[565562](565574 '_paramFoldLogical' tmp[565563] tmp[565570]))
    }
    {
      (565582 'move' tmp[565562](565579 '_paramFoldLogical' tmp[565563] 0))
    }
    (748289 call chpl_statementLevelSymbol tmp[565562])
  }
  function _domain[125908](?).targetLocales[125724](arg _mt[126300]:_MT[238], arg this[126298]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517377] "RVV" "temp"
    unknown call_tmp[655664] "expr temp" "maybe param" "maybe type" "temp"
    (655667 'move' call_tmp[655664](359657 call _value _mt[243] this[126298]))
    unknown call_tmp[655671] "expr temp" "maybe param" "maybe type" "temp"
    (655674 'move' call_tmp[655671](125731 call(125727 call (partial) dsiTargetLocales _mt[243] call_tmp[655664])))
    (517382 'move' ret[517377](517381 'deref' call_tmp[655671]))
    (517379 return ret[517377])
  }
  function _domain[125908](?).hasSingleLocalSubdomain[125739](arg _mt[126304]:_MT[238], arg this[126302]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517386] "RVV" "param" "temp"
    unknown call_tmp[655678] "expr temp" "maybe param" "maybe type" "temp"
    (655681 'move' call_tmp[655678](359661 call _value _mt[243] this[126302]))
    unknown call_tmp[655685] "expr temp" "maybe param" "maybe type" "temp"
    (655688 'move' call_tmp[655685](125748 call(125744 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655678])))
    (517391 'move' ret[517386](517390 'deref' call_tmp[655685]))
    (517388 return ret[517386])
  }
  function _domain[125908](?).localSubdomain[125762](arg _mt[126308]:_MT[238], arg this[126306]:_domain[125908](?), arg loc[125758]:locale[28] =
  (383609 call here[90438])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517395] "RVV" "temp"
    unknown call_tmp[655692] "expr temp" "maybe param" "maybe type" "temp"
    (655695 'move' call_tmp[655692](359665 call _value _mt[243] this[126306]))
    unknown call_tmp[655699] "expr temp" "maybe param" "maybe type" "temp"
    (655702 'move' call_tmp[655699](125769 call(125765 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655692])))
    unknown call_tmp[655704] "expr temp" "maybe param" "maybe type" "temp"
    (655707 'move' call_tmp[655704](125770 call ! call_tmp[655699]))
    unknown call_tmp[655709] "expr temp" "maybe param" "maybe type" "temp"
    (655712 'move' call_tmp[655709](125793 call _cond_test call_tmp[655704]))
    if call_tmp[655709]
    {
      (125791 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[655716] "expr temp" "maybe param" "maybe type" "temp"
    (655719 'move' call_tmp[655716](359669 call _value _mt[243] this[126306]))
    unknown call_tmp[655723] "expr temp" "maybe param" "maybe type" "temp"
    (655726 'move' call_tmp[655723](125807 call(125802 call (partial) dsiLocalSubdomain _mt[243] call_tmp[655716]) loc[125758]))
    (517400 'move' ret[517395](517399 'deref' call_tmp[655723]))
    (517397 return ret[517395])
  }
  function _domain[125908](?).localSubdomains[125820](arg _mt[126312]:_MT[238], arg this[126310]:_domain[125908](?), arg loc[125816]:locale[28] =
  (383612 call here[90438])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517404] "RVV" "temp"
    unknown call_tmp[655730] "expr temp" "maybe param" "maybe type" "temp"
    (655733 'move' call_tmp[655730](359673 call _value _mt[243] this[126310]))
    unknown call_tmp[655737] "expr temp" "maybe param" "maybe type" "temp"
    (655740 'move' call_tmp[655737](125827 call(125823 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655730])))
    unknown call_tmp[655742] "expr temp" "maybe param" "maybe type" "temp"
    (655745 'move' call_tmp[655742](125883 call _cond_test call_tmp[655737]))
    if call_tmp[655742]
    {
      unknown yret[517408] "YVV" "temp"
      unknown call_tmp[655749] "expr temp" "maybe param" "maybe type" "temp"
      (655752 'move' call_tmp[655749](125831 call(383615 call (partial) localSubdomain _mt[243] this[126310]) loc[125816]))
      (517411 'move' yret[517408](517410 'deref' call_tmp[655749]))
      (517413 yield yret[517408])
    }
    {
      {
        unknown _indexOfInterest[125848] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125849] "expr temp" "temp"
        unknown call_tmp[655756] "expr temp" "maybe param" "maybe type" "temp"
        (655759 'move' call_tmp[655756](359677 call _value _mt[243] this[126310]))
        unknown call_tmp[655763] "expr temp" "maybe param" "maybe type" "temp"
        (655766 'move' call_tmp[655763](125844 call(125839 call (partial) dsiLocalSubdomains _mt[243] call_tmp[655756]) loc[125816]))
        (125858 'move' _iterator[125849](125856 call _getIterator call_tmp[655763]))
        Defer
        {
          {
            (125875 call _freeIterator _iterator[125849])
          }
        }
        { scopeless type
          (125864 'move' _indexOfInterest[125848](125861 call iteratorIndex _iterator[125849]))
        }
        ForLoop[125850]
        {
          unknown d[125868] "index var" "insert auto destroy"
          (479953 'end of statement')
          (125870 'move' d[125868] _indexOfInterest[125848])
          (479954 'end of statement' d[125868])
          unknown yret[517415] "YVV" "temp"
          (517418 'move' yret[517415](517417 'deref' d[125868]))
          (517420 yield yret[517415])
          (479956 'end of statement' d[125868])
          label _continueLabel[125853]
          _indexOfInterest[125848]
          _iterator[125849]
        }
        label _breakLabel[125854]
      }
    }
    (517406 return ret[517404])
  }
  function _domain[125908](?).supportsAutoLocalAccess[125892](arg _mt[126316]:_MT[238], arg this[126314]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517424] "RVV" "param" "temp"
    unknown call_tmp[655770] "expr temp" "maybe param" "maybe type" "temp"
    (655773 'move' call_tmp[655770](359681 call _value _mt[243] this[126314]))
    unknown call_tmp[655777] "expr temp" "maybe param" "maybe type" "temp"
    (655780 'move' call_tmp[655777](125901 call(125897 call (partial) dsiSupportsAutoLocalAccess _mt[243] call_tmp[655770])))
    (517429 'move' ret[517424](517428 'deref' call_tmp[655777]))
    (517426 return ret[517424])
  }
  type _domain[125908](?) val _pid[119167]:int(64)[13] int(64)[13] unknown _instance[119171] "owned" val _unowned[119176]:bool[10] bool[10] forwarding ( )
  function _cast[126325](arg t[126322]:_domain[125908](?), arg d[126328]:_domain[125908](?)) : _unknown[51] "no doc"
  {
    unknown ret[517433] "RVV" "temp"
    const tmpD[126342] "dead at end of block" "const" "insert auto destroy"
    (542950 'default init var' tmpD[126342] t[126322])
    (126345 'end of statement')
    unknown call_tmp[655784] "expr temp" "maybe param" "maybe type" "temp"
    (655787 'move' call_tmp[655784](126348 call rank _mt[243] tmpD[126342]))
    unknown call_tmp[655791] "expr temp" "maybe param" "maybe type" "temp"
    (655794 'move' call_tmp[655791](126352 call rank _mt[243] d[126328]))
    unknown call_tmp[655796] "expr temp" "maybe param" "maybe type" "temp"
    (655799 'move' call_tmp[655796](126355 call != call_tmp[655784] call_tmp[655791]))
    unknown call_tmp[655801] "expr temp" "maybe param" "maybe type" "temp"
    (655804 'move' call_tmp[655801](126362 call _cond_test call_tmp[655796]))
    if call_tmp[655801]
    {
      (126360 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655808] "expr temp" "maybe param" "maybe type" "temp"
    (655811 'move' call_tmp[655808](126368 call idxType _mt[243] tmpD[126342]))
    unknown call_tmp[655815] "expr temp" "maybe param" "maybe type" "temp"
    (655818 'move' call_tmp[655815](126372 call idxType _mt[243] d[126328]))
    unknown call_tmp[655820] "expr temp" "maybe param" "maybe type" "temp"
    (655823 'move' call_tmp[655820](126375 call != call_tmp[655808] call_tmp[655815]))
    unknown call_tmp[655825] "expr temp" "maybe param" "maybe type" "temp"
    (655828 'move' call_tmp[655825](126382 call _cond_test call_tmp[655820]))
    if call_tmp[655825]
    {
      (126380 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655832] "expr temp" "maybe param" "maybe type" "temp"
    (655835 'move' call_tmp[655832](126388 call stridable _mt[243] tmpD[126342]))
    unknown call_tmp[655839] "expr temp" "maybe param" "maybe type" "temp"
    (655842 'move' call_tmp[655839](126392 call stridable _mt[243] d[126328]))
    unknown call_tmp[655844] "expr temp" "maybe param" "maybe type" "temp"
    (655847 'move' call_tmp[655844](126395 call == call_tmp[655832] call_tmp[655839]))
    unknown call_tmp[655849] "expr temp" "maybe param" "maybe type" "temp"
    (655852 'move' call_tmp[655849](126539 call _cond_test call_tmp[655844]))
    if call_tmp[655849]
    {
      (517438 'move' ret[517433](517437 'deref' d[126328]))
      gotoReturn _end__cast[517431] _end__cast[517431]
    }
    {
      unknown tmp[425027] "maybe param" "temp"
      unknown call_tmp[655856] "expr temp" "maybe param" "maybe type" "temp"
      (655859 'move' call_tmp[655856](126401 call stridable _mt[243] tmpD[126342]))
      (425038 'move' tmp[425027](126404 call ! call_tmp[655856]))
      unknown call_tmp[655861] "expr temp" "maybe param" "maybe type" "temp"
      (655864 'move' call_tmp[655861](425040 call _cond_invalid tmp[425027]))
      if call_tmp[655861]
      {
        (425043 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565589] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565590] "maybe param" "temp"
      unknown call_tmp[655866] "expr temp" "maybe param" "maybe type" "temp"
      (655869 'move' call_tmp[655866](425028 call isTrue tmp[425027]))
      (565595 'move' tmp[565590](565593 call _cond_test call_tmp[655866]))
      if tmp[565590]
      {
        unknown tmp[565597] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655873] "expr temp" "maybe param" "maybe type" "temp"
        (655876 'move' call_tmp[655873](126407 call stridable _mt[243] d[126328]))
        (565599 'move' tmp[565597](425031 call isTrue call_tmp[655873]))
        (565604 'move' tmp[565589](565601 '_paramFoldLogical' tmp[565590] tmp[565597]))
      }
      {
        (565609 'move' tmp[565589](565606 '_paramFoldLogical' tmp[565590] 0))
      }
      unknown call_tmp[655878] "expr temp" "maybe param" "maybe type" "temp"
      (655881 'move' call_tmp[655878](126535 call _cond_test tmp[565589]))
      if call_tmp[655878]
      {
        unknown call_tmp[655885] "maybe param" "maybe type" "temp"
        (655888 'move' call_tmp[655885](126417 call(126413 call (partial) getIndices _mt[243] d[126328])))
        unknown inds[126418] "dead at end of block" "insert auto destroy"
        (542952 'init var' inds[126418] call_tmp[655885])
        (126421 'end of statement')
        unknown unstridableInds[126438] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655892] "expr temp" "maybe param" "maybe type" "temp"
        (655895 'move' call_tmp[655892](126424 call rank _mt[243] d[126328]))
        unknown call_tmp[655899] "expr temp" "maybe param" "maybe type" "temp"
        (655902 'move' call_tmp[655899](126429 call idxType _mt[243] tmpD[126342]))
        unknown call_tmp[655904] "expr temp" "maybe param" "maybe type" "temp"
        (655907 'move' call_tmp[655904](126435 call range[64319](?) call_tmp[655899](stridable = 0)))
        unknown call_tmp[655909] "expr temp" "maybe param" "maybe type" "temp"
        (655912 'move' call_tmp[655909](126436 call * call_tmp[655892] call_tmp[655904]))
        (542954 'default init var' unstridableInds[126438] call_tmp[655909])
        (126441 'end of statement' tmpD[126342])
        {
          unknown i[126475] "dead at end of block" "insert auto destroy"
          (542956 'init var' i[126475] 0)
          (479964 'end of statement')
          unknown tmp[126476] "maybe param" "temp"
          unknown call_tmp[655916] "expr temp" "maybe param" "maybe type" "temp"
          (655919 'move' call_tmp[655916](126444 call rank _mt[243] tmpD[126342]))
          unknown call_tmp[655921] "expr temp" "maybe param" "maybe type" "temp"
          (655924 'move' call_tmp[655921](126448 call - call_tmp[655916] 1))
          (126488 'move' tmp[126476](126486 call chpl_compute_low_param_loop_bound 0 call_tmp[655921]))
          unknown tmp[126477] "maybe param" "temp"
          unknown call_tmp[655928] "expr temp" "maybe param" "maybe type" "temp"
          (655931 'move' call_tmp[655928](126495 call rank _mt[243] tmpD[126342]))
          unknown call_tmp[655933] "expr temp" "maybe param" "maybe type" "temp"
          (655936 'move' call_tmp[655933](126493 call - call_tmp[655928] 1))
          (126501 'move' tmp[126477](126499 call chpl_compute_high_param_loop_bound 0 call_tmp[655933]))
          unknown tmp[126478] "maybe param" "temp"
          (126504 'move' tmp[126478] 1)
          ParamForLoop[126506]
          { i[126475] tmp[126476] tmp[126477] tmp[126478]
            {
              unknown call_tmp[655938] "expr temp" "maybe param" "maybe type" "temp"
              (655941 'move' call_tmp[655938](126455 call unstridableInds[126438] i[126475]))
              unknown call_tmp[655945] "expr temp" "maybe param" "maybe type" "temp"
              (655948 'move' call_tmp[655945](126462 call idxType _mt[243] tmpD[126342]))
              unknown call_tmp[655950] "expr temp" "maybe param" "maybe type" "temp"
              (655953 'move' call_tmp[655950](126468 call range[64319](?) call_tmp[655945](stridable = 0)))
              unknown call_tmp[655955] "expr temp" "maybe param" "maybe type" "temp"
              (655958 'move' call_tmp[655955](126459 call inds[126418] i[126475]))
              unknown call_tmp[655960] "expr temp" "maybe param" "maybe type" "temp"
              (655963 'move' call_tmp[655960](126469 call _cast call_tmp[655950] call_tmp[655955]))
              (126471 call = call_tmp[655938] call_tmp[655960])
              (479965 'end of statement' unstridableInds[126438] i[126475] tmpD[126342] inds[126418] i[126475])
            }
          }
          label _unused_continueLabel[126480]
          label _breakLabel[126479]
        }
        (126521 call(126516 call (partial) setIndices _mt[243] tmpD[126342]) unstridableInds[126438])
        (479971 'end of statement' tmpD[126342] unstridableInds[126438])
        (517443 'move' ret[517433](517442 'deref' tmpD[126342]))
        gotoReturn _end__cast[517431] _end__cast[517431]
        (479974 'end of statement' tmpD[126342])
      }
      {
        (126528 call = tmpD[126342] d[126328])
        (479976 'end of statement' tmpD[126342])
        (517448 'move' ret[517433](517447 'deref' tmpD[126342]))
        gotoReturn _end__cast[517431] _end__cast[517431]
        (479978 'end of statement' tmpD[126342])
      }
    }
    label _end__cast[517431]
    (517435 return ret[517433])
  }
  where {
    unknown tmp[425006] "maybe param" "temp"
    (425017 'move' tmp[425006](126334 call chpl__isRectangularDomType t[126322]))
    unknown call_tmp[655967] "expr temp" "maybe param" "maybe type" "temp"
    (655970 'move' call_tmp[655967](425019 call _cond_invalid tmp[425006]))
    if call_tmp[655967]
    {
      (425022 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565616] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565617] "maybe param" "temp"
    unknown call_tmp[655972] "expr temp" "maybe param" "maybe type" "temp"
    (655975 'move' call_tmp[655972](425007 call isTrue tmp[425006]))
    (565622 'move' tmp[565617](565620 call _cond_test call_tmp[655972]))
    if tmp[565617]
    {
      unknown tmp[565624] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655977] "expr temp" "maybe param" "maybe type" "temp"
      (655980 'move' call_tmp[655977](126338 call isRectangularDom d[126328]))
      (565626 'move' tmp[565624](425010 call isTrue call_tmp[655977]))
      (565631 'move' tmp[565616](565628 '_paramFoldLogical' tmp[565617] tmp[565624]))
    }
    {
      (565636 'move' tmp[565616](565633 '_paramFoldLogical' tmp[565617] 0))
    }
    (748291 call chpl_statementLevelSymbol tmp[565616])
  }
  function _cast[126554](arg t[126551]:string[26], arg x[126557]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517454] "RVV" "temp"
    unknown call_tmp[655982] "expr temp" "maybe param" "maybe type" "temp"
    (655985 'move' call_tmp[655982](126567 call stringify x[126557]))
    (517459 'move' ret[517454](517458 'deref' call_tmp[655982]))
    (517456 return ret[517454])
    (355160 'used modules list'(126561 'use' IO[230910]))
  }
  function chpl_countDomHelp[126576](arg dom[126574]:_any[178](?), arg counts[126578]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517463] "RVV" "temp"
    unknown call_tmp[655989] "maybe param" "maybe type" "temp"
    (655992 'move' call_tmp[655989](126585 call(126581 call (partial) dims _mt[243] dom[126574])))
    unknown ranges[126586] "dead at end of block" "insert auto destroy"
    (542958 'init var' ranges[126586] call_tmp[655989])
    (126589 'end of statement')
    {
      unknown i[126618] "dead at end of block" "insert auto destroy"
      (542960 'init var' i[126618] 0)
      (479981 'end of statement')
      unknown tmp[126619] "maybe param" "temp"
      unknown call_tmp[655996] "expr temp" "maybe param" "maybe type" "temp"
      (655999 'move' call_tmp[655996](126593 call rank _mt[243] dom[126574]))
      unknown call_tmp[656001] "expr temp" "maybe param" "maybe type" "temp"
      (656004 'move' call_tmp[656001](126597 call - call_tmp[655996] 1))
      (126631 'move' tmp[126619](126629 call chpl_compute_low_param_loop_bound 0 call_tmp[656001]))
      unknown tmp[126620] "maybe param" "temp"
      unknown call_tmp[656008] "expr temp" "maybe param" "maybe type" "temp"
      (656011 'move' call_tmp[656008](126638 call rank _mt[243] dom[126574]))
      unknown call_tmp[656013] "expr temp" "maybe param" "maybe type" "temp"
      (656016 'move' call_tmp[656013](126636 call - call_tmp[656008] 1))
      (126644 'move' tmp[126620](126642 call chpl_compute_high_param_loop_bound 0 call_tmp[656013]))
      unknown tmp[126621] "maybe param" "temp"
      (126647 'move' tmp[126621] 1)
      ParamForLoop[126649]
      { i[126618] tmp[126619] tmp[126620] tmp[126621]
        unknown call_tmp[656018] "expr temp" "maybe param" "maybe type" "temp"
        (656021 'move' call_tmp[656018](126604 call ranges[126586] i[126618]))
        unknown call_tmp[656023] "expr temp" "maybe param" "maybe type" "temp"
        (656026 'move' call_tmp[656023](126608 call ranges[126586] i[126618]))
        unknown call_tmp[656028] "expr temp" "maybe param" "maybe type" "temp"
        (656031 'move' call_tmp[656028](126612 call counts[126578] i[126618]))
        unknown call_tmp[656033] "expr temp" "maybe param" "maybe type" "temp"
        (656036 'move' call_tmp[656033](126613 call # call_tmp[656023] call_tmp[656028]))
        (126615 call = call_tmp[656018] call_tmp[656033])
        (479982 'end of statement' ranges[126586] i[126618] ranges[126586] i[126618] i[126618])
      }
      label _unused_continueLabel[126623]
      label _breakLabel[126622]
    }
    unknown call_tmp[656038] "expr temp" "maybe param" "maybe type" "temp"
    (656041 'move' call_tmp[656038](126662 call dom[126574](126660 'expand_tuple' ranges[126586])))
    (517468 'move' ret[517463](517467 'deref' call_tmp[656038]))
    gotoReturn _end_chpl_countDomHelp[517461] _end_chpl_countDomHelp[517461]
    (479988 'end of statement' ranges[126586])
    label _end_chpl_countDomHelp[517461]
    (517465 return ret[517463])
  }
  function #[126673](arg dom[126670]:_domain[125908](?), arg counts[126676]:integral[199](?)) : _unknown[51]
  {
    unknown ret[517474] "RVV" "temp"
    unknown call_tmp[656043] "expr temp" "maybe param" "maybe type" "temp"
    (656046 'move' call_tmp[656043](126696 call _build_tuple counts[126676]))
    unknown call_tmp[656048] "expr temp" "maybe param" "maybe type" "temp"
    (656051 'move' call_tmp[656048](126698 call chpl_countDomHelp dom[126670] call_tmp[656043]))
    (517479 'move' ret[517474](517478 'deref' call_tmp[656048]))
    (517476 return ret[517474])
  }
  where {
    unknown tmp[425048] "maybe param" "temp"
    (425059 'move' tmp[425048](126682 call isRectangularDom dom[126670]))
    unknown call_tmp[656053] "expr temp" "maybe param" "maybe type" "temp"
    (656056 'move' call_tmp[656053](425061 call _cond_invalid tmp[425048]))
    if call_tmp[656053]
    {
      (425064 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565643] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565644] "maybe param" "temp"
    unknown call_tmp[656058] "expr temp" "maybe param" "maybe type" "temp"
    (656061 'move' call_tmp[656058](425049 call isTrue tmp[425048]))
    (565649 'move' tmp[565644](565647 call _cond_test call_tmp[656058]))
    if tmp[565644]
    {
      unknown tmp[565651] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656065] "expr temp" "maybe param" "maybe type" "temp"
      (656068 'move' call_tmp[656065](126684 call rank _mt[243] dom[126670]))
      unknown call_tmp[656070] "expr temp" "maybe param" "maybe type" "temp"
      (656073 'move' call_tmp[656070](126688 call == call_tmp[656065] 1))
      (565653 'move' tmp[565651](425052 call isTrue call_tmp[656070]))
      (565658 'move' tmp[565643](565655 '_paramFoldLogical' tmp[565644] tmp[565651]))
    }
    {
      (565663 'move' tmp[565643](565660 '_paramFoldLogical' tmp[565644] 0))
    }
    (748293 call chpl_statementLevelSymbol tmp[565643])
  }
  function #[126711](arg dom[126708]:_domain[125908](?), arg counts[126713]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517483] "RVV" "temp"
    unknown call_tmp[656077] "expr temp" "maybe param" "maybe type" "temp"
    (656080 'move' call_tmp[656077](126726 call size _mt[243] counts[126713]))
    unknown call_tmp[656084] "expr temp" "maybe param" "maybe type" "temp"
    (656087 'move' call_tmp[656084](126730 call rank _mt[243] dom[126708]))
    unknown call_tmp[656089] "expr temp" "maybe param" "maybe type" "temp"
    (656092 'move' call_tmp[656089](126733 call != call_tmp[656077] call_tmp[656084]))
    unknown call_tmp[656094] "expr temp" "maybe param" "maybe type" "temp"
    (656097 'move' call_tmp[656094](126756 call _cond_test call_tmp[656089]))
    if call_tmp[656094]
    {
      (126754 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    unknown call_tmp[656099] "expr temp" "maybe param" "maybe type" "temp"
    (656102 'move' call_tmp[656099](126766 call chpl_countDomHelp dom[126708] counts[126713]))
    (517488 'move' ret[517483](517487 'deref' call_tmp[656099]))
    (517485 return ret[517483])
  }
  where {
    unknown tmp[425069] "maybe param" "temp"
    (425080 'move' tmp[425069](126718 call isRectangularDom dom[126708]))
    unknown call_tmp[656104] "expr temp" "maybe param" "maybe type" "temp"
    (656107 'move' call_tmp[656104](425082 call _cond_invalid tmp[425069]))
    if call_tmp[656104]
    {
      (425085 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565670] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565671] "maybe param" "temp"
    unknown call_tmp[656109] "expr temp" "maybe param" "maybe type" "temp"
    (656112 'move' call_tmp[656109](425070 call isTrue tmp[425069]))
    (565676 'move' tmp[565671](565674 call _cond_test call_tmp[656109]))
    if tmp[565671]
    {
      unknown tmp[565678] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656114] "expr temp" "maybe param" "maybe type" "temp"
      (656117 'move' call_tmp[656114](126722 call isTuple counts[126713]))
      (565680 'move' tmp[565678](425073 call isTrue call_tmp[656114]))
      (565685 'move' tmp[565670](565682 '_paramFoldLogical' tmp[565671] tmp[565678]))
    }
    {
      (565690 'move' tmp[565670](565687 '_paramFoldLogical' tmp[565671] 0))
    }
    (748295 call chpl_statementLevelSymbol tmp[565670])
  }
  function #[126780](arg arr[126777]:_array[133594](?), arg counts[126783]:integral[199](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517492] "RVV" "temp"
    unknown call_tmp[656121] "expr temp" "maybe param" "maybe type" "temp"
    (656124 'move' call_tmp[656121](126801 call _dom _mt[243] arr[126777]))
    unknown call_tmp[656126] "expr temp" "maybe param" "maybe type" "temp"
    (656129 'move' call_tmp[656126](126805 call # call_tmp[656121] counts[126783]))
    unknown call_tmp[656131] "expr temp" "maybe param" "maybe type" "temp"
    (656134 'move' call_tmp[656131](126808 call arr[126777] call_tmp[656126]))
    (517497 'move' ret[517492](517496 'deref' call_tmp[656131]))
    (517494 return ret[517492])
  }
  where {
    unknown tmp[425090] "maybe param" "temp"
    (425101 'move' tmp[425090](126789 call isRectangularArr arr[126777]))
    unknown call_tmp[656136] "expr temp" "maybe param" "maybe type" "temp"
    (656139 'move' call_tmp[656136](425103 call _cond_invalid tmp[425090]))
    if call_tmp[656136]
    {
      (425106 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565697] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565698] "maybe param" "temp"
    unknown call_tmp[656141] "expr temp" "maybe param" "maybe type" "temp"
    (656144 'move' call_tmp[656141](425091 call isTrue tmp[425090]))
    (565703 'move' tmp[565698](565701 call _cond_test call_tmp[656141]))
    if tmp[565698]
    {
      unknown tmp[565705] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656148] "expr temp" "maybe param" "maybe type" "temp"
      (656151 'move' call_tmp[656148](126791 call rank _mt[243] arr[126777]))
      unknown call_tmp[656153] "expr temp" "maybe param" "maybe type" "temp"
      (656156 'move' call_tmp[656153](126795 call == call_tmp[656148] 1))
      (565707 'move' tmp[565705](425094 call isTrue call_tmp[656153]))
      (565712 'move' tmp[565697](565709 '_paramFoldLogical' tmp[565698] tmp[565705]))
    }
    {
      (565717 'move' tmp[565697](565714 '_paramFoldLogical' tmp[565698] 0))
    }
    (748297 call chpl_statementLevelSymbol tmp[565697])
  }
  function #[126823](arg arr[126820]:_array[133594](?), arg counts[126825]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517501] "RVV" "temp"
    unknown call_tmp[656160] "expr temp" "maybe param" "maybe type" "temp"
    (656163 'move' call_tmp[656160](126838 call size _mt[243] counts[126825]))
    unknown call_tmp[656167] "expr temp" "maybe param" "maybe type" "temp"
    (656170 'move' call_tmp[656167](126842 call rank _mt[243] arr[126820]))
    unknown call_tmp[656172] "expr temp" "maybe param" "maybe type" "temp"
    (656175 'move' call_tmp[656172](126845 call != call_tmp[656160] call_tmp[656167]))
    unknown call_tmp[656177] "expr temp" "maybe param" "maybe type" "temp"
    (656180 'move' call_tmp[656177](126868 call _cond_test call_tmp[656172]))
    if call_tmp[656177]
    {
      (126866 call compilerError "the domain and array arguments of # must have the same rank")
    }
    unknown call_tmp[656184] "expr temp" "maybe param" "maybe type" "temp"
    (656187 'move' call_tmp[656184](126876 call _dom _mt[243] arr[126820]))
    unknown call_tmp[656189] "expr temp" "maybe param" "maybe type" "temp"
    (656192 'move' call_tmp[656189](126880 call # call_tmp[656184] counts[126825]))
    unknown call_tmp[656194] "expr temp" "maybe param" "maybe type" "temp"
    (656197 'move' call_tmp[656194](126883 call arr[126820] call_tmp[656189]))
    (517506 'move' ret[517501](517505 'deref' call_tmp[656194]))
    (517503 return ret[517501])
  }
  where {
    unknown tmp[425111] "maybe param" "temp"
    (425122 'move' tmp[425111](126830 call isRectangularArr arr[126820]))
    unknown call_tmp[656199] "expr temp" "maybe param" "maybe type" "temp"
    (656202 'move' call_tmp[656199](425124 call _cond_invalid tmp[425111]))
    if call_tmp[656199]
    {
      (425127 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565724] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565725] "maybe param" "temp"
    unknown call_tmp[656204] "expr temp" "maybe param" "maybe type" "temp"
    (656207 'move' call_tmp[656204](425112 call isTrue tmp[425111]))
    (565730 'move' tmp[565725](565728 call _cond_test call_tmp[656204]))
    if tmp[565725]
    {
      unknown tmp[565732] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656209] "expr temp" "maybe param" "maybe type" "temp"
      (656212 'move' call_tmp[656209](126834 call isTuple counts[126825]))
      (565734 'move' tmp[565732](425115 call isTrue call_tmp[656209]))
      (565739 'move' tmp[565724](565736 '_paramFoldLogical' tmp[565725] tmp[565732]))
    }
    {
      (565744 'move' tmp[565724](565741 '_paramFoldLogical' tmp[565725] 0))
    }
    (748299 call chpl_statementLevelSymbol tmp[565724])
  }
  function +[126895](arg d[126892]:_domain[125908](?), arg i[126901] :
  (126899 call chpl__buildIndexType d[126892])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656214] "expr temp" "maybe param" "maybe type" "temp"
    (656217 'move' call_tmp[656214](126907 call isRectangularDom d[126892]))
    unknown call_tmp[656219] "expr temp" "maybe param" "maybe type" "temp"
    (656222 'move' call_tmp[656219](126950 call _cond_test call_tmp[656214]))
    if call_tmp[656219]
    {
      (126927 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126948 call compilerError "Cannot add indices to this domain type")
    }
    (517508 return _void[55])
  }
  function +[126963](arg i[126961]:_any[178](?), arg d[126966]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656224] "expr temp" "maybe param" "maybe type" "temp"
    (656227 'move' call_tmp[656224](126981 call isRectangularDom d[126966]))
    unknown call_tmp[656229] "expr temp" "maybe param" "maybe type" "temp"
    (656232 'move' call_tmp[656229](126992 call _cond_test call_tmp[656224]))
    if call_tmp[656229]
    {
      (126985 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126990 call compilerError "Cannot add indices to this domain type")
    }
    (517510 return _void[55])
  }
  where {
    unknown call_tmp[656234] "expr temp" "maybe param" "maybe type" "temp"
    (656237 'move' call_tmp[656234](126975 call chpl__buildIndexType d[126966]))
    unknown call_tmp[656239] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656242 'move' call_tmp[656239](126971 'typeof' i[126961]))
    (354334 'is_subtype' call_tmp[656234] call_tmp[656239])
  }
  function +[127008](arg d[127005]:_domain[125908](?), arg i[127014] :
  (127012 call chpl__buildIndexType d[127005])) : _unknown[51]
  {
    unknown ret[517514] "RVV" "temp"
    (127027 call(127022 call (partial) add _mt[243] d[127005]) i[127014])
    (480000 'end of statement')
    (517519 'move' ret[517514](517518 'deref' d[127005]))
    (517516 return ret[517514])
  }
  where {
    (127020 call isIrregularDom d[127005])
  }
  function +[127040](arg i[127038]:_any[178](?), arg d[127043]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517523] "RVV" "temp"
    (127067 call(127062 call (partial) add _mt[243] d[127043]) i[127038])
    (480002 'end of statement')
    (517528 'move' ret[517523](517527 'deref' d[127043]))
    (517525 return ret[517523])
  }
  where {
    unknown tmp[425132] "maybe param" "temp"
    unknown call_tmp[656248] "expr temp" "maybe param" "maybe type" "temp"
    (656251 'move' call_tmp[656248](127052 call chpl__buildIndexType d[127043]))
    unknown call_tmp[656253] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656256 'move' call_tmp[656253](127048 'typeof' i[127038]))
    (425143 'move' tmp[425132](354335 'is_subtype' call_tmp[656248] call_tmp[656253]))
    unknown call_tmp[656258] "expr temp" "maybe param" "maybe type" "temp"
    (656261 'move' call_tmp[656258](425145 call _cond_invalid tmp[425132]))
    if call_tmp[656258]
    {
      (425148 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565751] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565752] "maybe param" "temp"
    unknown call_tmp[656263] "expr temp" "maybe param" "maybe type" "temp"
    (656266 'move' call_tmp[656263](425133 call isTrue tmp[425132]))
    (565757 'move' tmp[565752](565755 call _cond_test call_tmp[656263]))
    if tmp[565752]
    {
      unknown tmp[565759] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656268] "expr temp" "maybe param" "maybe type" "temp"
      (656271 'move' call_tmp[656268](127058 call isIrregularDom d[127043]))
      (565761 'move' tmp[565759](425136 call isTrue call_tmp[656268]))
      (565766 'move' tmp[565751](565763 '_paramFoldLogical' tmp[565752] tmp[565759]))
    }
    {
      (565771 'move' tmp[565751](565768 '_paramFoldLogical' tmp[565752] 0))
    }
    (748301 call chpl_statementLevelSymbol tmp[565751])
  }
  function +[127082](arg d1[127079]:_domain[125908](?), arg d2[127085]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517532] "RVV" "temp"
    unknown d3[127108] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656273] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656276 'move' call_tmp[656273](127107 'typeof' d1[127079]))
    (542962 'default init var' d3[127108] call_tmp[656273])
    (127111 'end of statement')
    {
      unknown _indexOfInterest[127123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127124] "expr temp" "temp"
      (127133 'move' _iterator[127124](127131 call _getIterator d1[127079]))
      Defer
      {
        {
          (127149 call _freeIterator _iterator[127124])
        }
      }
      { scopeless type
        (127138 'move' _indexOfInterest[127123](127135 call iteratorIndex _iterator[127124]))
      }
      ForLoop[127125]
      {
        unknown e[127142] "index var" "insert auto destroy"
        (480005 'end of statement')
        (127144 'move' e[127142] _indexOfInterest[127123])
        (480006 'end of statement' e[127142])
        (127121 call(127116 call (partial) add _mt[243] d3[127108]) e[127142])
        (480008 'end of statement' d3[127108] e[127142])
        label _continueLabel[127128]
        _indexOfInterest[127123]
        _iterator[127124]
      }
      label _breakLabel[127129]
    }
    {
      unknown _indexOfInterest[127166] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127167] "expr temp" "temp"
      (127176 'move' _iterator[127167](127174 call _getIterator d2[127085]))
      Defer
      {
        {
          (127192 call _freeIterator _iterator[127167])
        }
      }
      { scopeless type
        (127181 'move' _indexOfInterest[127166](127178 call iteratorIndex _iterator[127167]))
      }
      ForLoop[127168]
      {
        unknown e[127185] "index var" "insert auto destroy"
        (480012 'end of statement')
        (127187 'move' e[127185] _indexOfInterest[127166])
        (480013 'end of statement' e[127185])
        (127164 call(127159 call (partial) add _mt[243] d3[127108]) e[127185])
        (480015 'end of statement' d3[127108] e[127185])
        label _continueLabel[127171]
        _indexOfInterest[127166]
        _iterator[127167]
      }
      label _breakLabel[127172]
    }
    (517537 'move' ret[517532](517536 'deref' d3[127108]))
    gotoReturn _end_+[517530] _end_+[517530]
    (480018 'end of statement' d3[127108])
    label _end_+[517530]
    (517534 return ret[517532])
  }
  where {
    unknown tmp[425153] "maybe param" "temp"
    unknown call_tmp[656282] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656285 'move' call_tmp[656282](127089 'typeof' d1[127079]))
    unknown call_tmp[656287] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656290 'move' call_tmp[656287](127091 'typeof' d2[127085]))
    (425164 'move' tmp[425153](127092 call == call_tmp[656282] call_tmp[656287]))
    unknown call_tmp[656292] "expr temp" "maybe param" "maybe type" "temp"
    (656295 'move' call_tmp[656292](425166 call _cond_invalid tmp[425153]))
    if call_tmp[656292]
    {
      (425169 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565805] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565806] "maybe param" "temp"
    unknown call_tmp[656297] "expr temp" "maybe param" "maybe type" "temp"
    (656300 'move' call_tmp[656297](425154 call isTrue tmp[425153]))
    (565811 'move' tmp[565806](565809 call _cond_test call_tmp[656297]))
    if tmp[565806]
    {
      unknown tmp[425174] "maybe param" "temp"
      (425185 'move' tmp[425174](127097 call isIrregularDom d1[127079]))
      unknown call_tmp[656302] "expr temp" "maybe param" "maybe type" "temp"
      (656305 'move' call_tmp[656302](425187 call _cond_invalid tmp[425174]))
      if call_tmp[656302]
      {
        (425190 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565778] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565779] "maybe param" "temp"
      unknown call_tmp[656307] "expr temp" "maybe param" "maybe type" "temp"
      (656310 'move' call_tmp[656307](425175 call isTrue tmp[425174]))
      (565784 'move' tmp[565779](565782 call _cond_test call_tmp[656307]))
      if tmp[565779]
      {
        unknown tmp[565786] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[656312] "expr temp" "maybe param" "maybe type" "temp"
        (656315 'move' call_tmp[656312](127101 call isIrregularDom d2[127085]))
        (565788 'move' tmp[565786](425178 call isTrue call_tmp[656312]))
        (565793 'move' tmp[565778](565790 '_paramFoldLogical' tmp[565779] tmp[565786]))
      }
      {
        (565798 'move' tmp[565778](565795 '_paramFoldLogical' tmp[565779] 0))
      }
      unknown tmp[565813] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (565815 'move' tmp[565813](425157 call isTrue tmp[565778]))
      (565820 'move' tmp[565805](565817 '_paramFoldLogical' tmp[565806] tmp[565813]))
    }
    {
      (565825 'move' tmp[565805](565822 '_paramFoldLogical' tmp[565806] 0))
    }
    (748303 call chpl_statementLevelSymbol tmp[565805])
  }
  function +[127211](arg d1[127208]:_domain[125908](?), arg d2[127214]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425195] "maybe param" "temp"
    (425206 'move' tmp[425195](127220 call isRectangularDom d1[127208]))
    unknown call_tmp[656317] "expr temp" "maybe param" "maybe type" "temp"
    (656320 'move' call_tmp[656317](425208 call _cond_invalid tmp[425195]))
    if call_tmp[656317]
    {
      (425211 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565832] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565833] "maybe param" "temp"
    unknown call_tmp[656322] "expr temp" "maybe param" "maybe type" "temp"
    (656325 'move' call_tmp[656322](425196 call isTrue tmp[425195]))
    (565838 'move' tmp[565833](565836 call _cond_test call_tmp[656322]))
    if tmp[565833]
    {
      (565843 'move' tmp[565832](565840 '_paramFoldLogical' tmp[565833] 1))
    }
    {
      unknown tmp[565845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656327] "expr temp" "maybe param" "maybe type" "temp"
      (656330 'move' call_tmp[656327](127224 call isRectangularDom d2[127214]))
      (565847 'move' tmp[565845](425200 call isTrue call_tmp[656327]))
      (565852 'move' tmp[565832](565849 '_paramFoldLogical' tmp[565833] tmp[565845]))
    }
    unknown call_tmp[656332] "expr temp" "maybe param" "maybe type" "temp"
    (656335 'move' call_tmp[656332](127237 call _cond_test tmp[565832]))
    if call_tmp[656332]
    {
      (127230 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127235 call compilerError "Cannot add indices to this domain type")
    }
    (517541 return _void[55])
  }
  function -[127252](arg d[127249]:_domain[125908](?), arg i[127258] :
  (127256 call chpl__buildIndexType d[127249])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656337] "expr temp" "maybe param" "maybe type" "temp"
    (656340 'move' call_tmp[656337](127264 call isRectangularDom d[127249]))
    unknown call_tmp[656342] "expr temp" "maybe param" "maybe type" "temp"
    (656345 'move' call_tmp[656342](127307 call _cond_test call_tmp[656337]))
    if call_tmp[656342]
    {
      (127284 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127305 call compilerError "Cannot remove indices from this domain type")
    }
    (517543 return _void[55])
  }
  function -[127322](arg d[127319]:_domain[125908](?), arg i[127328] :
  (127326 call chpl__buildIndexType d[127319])) : _unknown[51]
  {
    unknown ret[517547] "RVV" "temp"
    (127341 call(127336 call (partial) remove _mt[243] d[127319]) i[127328])
    (480025 'end of statement')
    (517552 'move' ret[517547](517551 'deref' d[127319]))
    (517549 return ret[517547])
  }
  where {
    (127334 call isIrregularDom d[127319])
  }
  function -[127356](arg d1[127353]:_domain[125908](?), arg d2[127359]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517556] "RVV" "temp"
    unknown d3[127376] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656349] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656352 'move' call_tmp[656349](127375 'typeof' d1[127353]))
    (542964 'default init var' d3[127376] call_tmp[656349])
    (127379 'end of statement')
    {
      unknown _indexOfInterest[127391] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127392] "expr temp" "temp"
      (127401 'move' _iterator[127392](127399 call _getIterator d1[127353]))
      Defer
      {
        {
          (127417 call _freeIterator _iterator[127392])
        }
      }
      { scopeless type
        (127406 'move' _indexOfInterest[127391](127403 call iteratorIndex _iterator[127392]))
      }
      ForLoop[127393]
      {
        unknown e[127410] "index var" "insert auto destroy"
        (480028 'end of statement')
        (127412 'move' e[127410] _indexOfInterest[127391])
        (480029 'end of statement' e[127410])
        (127389 call(127384 call (partial) add _mt[243] d3[127376]) e[127410])
        (480031 'end of statement' d3[127376] e[127410])
        label _continueLabel[127396]
        _indexOfInterest[127391]
        _iterator[127392]
      }
      label _breakLabel[127397]
    }
    {
      unknown _indexOfInterest[127434] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127435] "expr temp" "temp"
      (127444 'move' _iterator[127435](127442 call _getIterator d2[127359]))
      Defer
      {
        {
          (127460 call _freeIterator _iterator[127435])
        }
      }
      { scopeless type
        (127449 'move' _indexOfInterest[127434](127446 call iteratorIndex _iterator[127435]))
      }
      ForLoop[127436]
      {
        unknown e[127453] "index var" "insert auto destroy"
        (480035 'end of statement')
        (127455 'move' e[127453] _indexOfInterest[127434])
        (480036 'end of statement' e[127453])
        (127432 call(127427 call (partial) remove _mt[243] d3[127376]) e[127453])
        (480038 'end of statement' d3[127376] e[127453])
        label _continueLabel[127439]
        _indexOfInterest[127434]
        _iterator[127435]
      }
      label _breakLabel[127440]
    }
    (517561 'move' ret[517556](517560 'deref' d3[127376]))
    gotoReturn _end_-[517554] _end_-[517554]
    (480041 'end of statement' d3[127376])
    label _end_-[517554]
    (517558 return ret[517556])
  }
  where {
    unknown tmp[425216] "maybe param" "temp"
    unknown call_tmp[656358] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656361 'move' call_tmp[656358](127363 'typeof' d1[127353]))
    unknown call_tmp[656363] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656366 'move' call_tmp[656363](127365 'typeof' d2[127359]))
    (425227 'move' tmp[425216](127366 call == call_tmp[656358] call_tmp[656363]))
    unknown call_tmp[656368] "expr temp" "maybe param" "maybe type" "temp"
    (656371 'move' call_tmp[656368](425229 call _cond_invalid tmp[425216]))
    if call_tmp[656368]
    {
      (425232 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565859] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565860] "maybe param" "temp"
    unknown call_tmp[656373] "expr temp" "maybe param" "maybe type" "temp"
    (656376 'move' call_tmp[656373](425217 call isTrue tmp[425216]))
    (565865 'move' tmp[565860](565863 call _cond_test call_tmp[656373]))
    if tmp[565860]
    {
      unknown tmp[565867] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656378] "expr temp" "maybe param" "maybe type" "temp"
      (656381 'move' call_tmp[656378](127371 call isSparseDom d1[127353]))
      (565869 'move' tmp[565867](425220 call isTrue call_tmp[656378]))
      (565874 'move' tmp[565859](565871 '_paramFoldLogical' tmp[565860] tmp[565867]))
    }
    {
      (565879 'move' tmp[565859](565876 '_paramFoldLogical' tmp[565860] 0))
    }
    (748305 call chpl_statementLevelSymbol tmp[565859])
  }
  function -[127479](arg d1[127476]:_domain[125908](?), arg d2[127482]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425237] "maybe param" "temp"
    (425248 'move' tmp[425237](127488 call isRectangularDom d1[127476]))
    unknown call_tmp[656383] "expr temp" "maybe param" "maybe type" "temp"
    (656386 'move' call_tmp[656383](425250 call _cond_invalid tmp[425237]))
    if call_tmp[656383]
    {
      (425253 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565886] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565887] "maybe param" "temp"
    unknown call_tmp[656388] "expr temp" "maybe param" "maybe type" "temp"
    (656391 'move' call_tmp[656388](425238 call isTrue tmp[425237]))
    (565892 'move' tmp[565887](565890 call _cond_test call_tmp[656388]))
    if tmp[565887]
    {
      (565897 'move' tmp[565886](565894 '_paramFoldLogical' tmp[565887] 1))
    }
    {
      unknown tmp[565899] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656393] "expr temp" "maybe param" "maybe type" "temp"
      (656396 'move' call_tmp[656393](127492 call isRectangularDom d2[127482]))
      (565901 'move' tmp[565899](425242 call isTrue call_tmp[656393]))
      (565906 'move' tmp[565886](565903 '_paramFoldLogical' tmp[565887] tmp[565899]))
    }
    unknown call_tmp[656398] "expr temp" "maybe param" "maybe type" "temp"
    (656401 'move' call_tmp[656398](127505 call _cond_test tmp[565886]))
    if call_tmp[656398]
    {
      (127498 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127503 call compilerError "Cannot remove indices from this domain type")
    }
    (517565 return _void[55])
  }
  function ==[127520](arg d1[127517]:_domain[125908](?), arg d2[127523]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517569] "RVV" "temp"
    unknown call_tmp[656405] "expr temp" "maybe param" "maybe type" "temp"
    (656408 'move' call_tmp[656405](127537 call _value _mt[243] d1[127517]))
    unknown call_tmp[656412] "expr temp" "maybe param" "maybe type" "temp"
    (656415 'move' call_tmp[656412](127540 call rank _mt[243] call_tmp[656405]))
    unknown call_tmp[656419] "expr temp" "maybe param" "maybe type" "temp"
    (656422 'move' call_tmp[656419](127544 call _value _mt[243] d2[127523]))
    unknown call_tmp[656426] "expr temp" "maybe param" "maybe type" "temp"
    (656429 'move' call_tmp[656426](127547 call rank _mt[243] call_tmp[656419]))
    unknown call_tmp[656431] "expr temp" "maybe param" "maybe type" "temp"
    (656434 'move' call_tmp[656431](127550 call != call_tmp[656412] call_tmp[656426]))
    unknown call_tmp[656436] "expr temp" "maybe param" "maybe type" "temp"
    (656439 'move' call_tmp[656436](127658 call _cond_test call_tmp[656431]))
    if call_tmp[656436]
    {
      (517574 'move' ret[517569](517573 'deref' 0))
      gotoReturn _end_==[517567] _end_==[517567]
    }
    {
      unknown call_tmp[656443] "expr temp" "maybe param" "maybe type" "temp"
      (656446 'move' call_tmp[656443](127557 call _value _mt[243] d1[127517]))
      unknown call_tmp[656450] "expr temp" "maybe param" "maybe type" "temp"
      (656453 'move' call_tmp[656450](127561 call _value _mt[243] d2[127523]))
      unknown call_tmp[656455] "expr temp" "maybe param" "maybe type" "temp"
      (656458 'move' call_tmp[656455](127564 call == call_tmp[656443] call_tmp[656450]))
      unknown call_tmp[656460] "expr temp" "maybe param" "maybe type" "temp"
      (656463 'move' call_tmp[656460](127654 call _cond_test call_tmp[656455]))
      if call_tmp[656460]
      {
        (517579 'move' ret[517569](517578 'deref' 1))
        gotoReturn _end_==[517567] _end_==[517567]
      }
      {
        {
          unknown i[127607] "dead at end of block" "insert auto destroy"
          (542966 'init var' i[127607] 0)
          (480048 'end of statement')
          unknown tmp[127608] "maybe param" "temp"
          unknown call_tmp[656467] "expr temp" "maybe param" "maybe type" "temp"
          (656470 'move' call_tmp[656467](127572 call _value _mt[243] d1[127517]))
          unknown call_tmp[656474] "expr temp" "maybe param" "maybe type" "temp"
          (656477 'move' call_tmp[656474](127575 call rank _mt[243] call_tmp[656467]))
          unknown call_tmp[656479] "expr temp" "maybe param" "maybe type" "temp"
          (656482 'move' call_tmp[656479](127579 call - call_tmp[656474] 1))
          (127620 'move' tmp[127608](127618 call chpl_compute_low_param_loop_bound 0 call_tmp[656479]))
          unknown tmp[127609] "maybe param" "temp"
          unknown call_tmp[656486] "expr temp" "maybe param" "maybe type" "temp"
          (656489 'move' call_tmp[656486](127629 call _value _mt[243] d1[127517]))
          unknown call_tmp[656493] "expr temp" "maybe param" "maybe type" "temp"
          (656496 'move' call_tmp[656493](127627 call rank _mt[243] call_tmp[656486]))
          unknown call_tmp[656498] "expr temp" "maybe param" "maybe type" "temp"
          (656501 'move' call_tmp[656498](127625 call - call_tmp[656493] 1))
          (127636 'move' tmp[127609](127634 call chpl_compute_high_param_loop_bound 0 call_tmp[656498]))
          unknown tmp[127610] "maybe param" "temp"
          (127639 'move' tmp[127610] 1)
          ParamForLoop[127641]
          { i[127607] tmp[127608] tmp[127609] tmp[127610]
            unknown call_tmp[656505] "expr temp" "maybe param" "maybe type" "temp"
            (656508 'move' call_tmp[656505](127589 call(127584 call (partial) dim _mt[243] d1[127517]) i[127607]))
            unknown call_tmp[656512] "expr temp" "maybe param" "maybe type" "temp"
            (656515 'move' call_tmp[656512](127596 call(127591 call (partial) dim _mt[243] d2[127523]) i[127607]))
            unknown call_tmp[656517] "expr temp" "maybe param" "maybe type" "temp"
            (656520 'move' call_tmp[656517](127597 call != call_tmp[656505] call_tmp[656512]))
            unknown call_tmp[656522] "expr temp" "maybe param" "maybe type" "temp"
            (656525 'move' call_tmp[656522](127602 call _cond_test call_tmp[656517]))
            if call_tmp[656522]
            {
              (517584 'move' ret[517569](517583 'deref' 0))
              gotoReturn _end_==[517567] _end_==[517567]
            }
          }
          label _unused_continueLabel[127612]
          label _breakLabel[127611]
        }
        (517589 'move' ret[517569](517588 'deref' 1))
        gotoReturn _end_==[517567] _end_==[517567]
      }
    }
    label _end_==[517567]
    (517571 return ret[517569])
  }
  where {
    unknown tmp[425258] "maybe param" "temp"
    (425269 'move' tmp[425258](127529 call isRectangularDom d1[127517]))
    unknown call_tmp[656527] "expr temp" "maybe param" "maybe type" "temp"
    (656530 'move' call_tmp[656527](425271 call _cond_invalid tmp[425258]))
    if call_tmp[656527]
    {
      (425274 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565913] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565914] "maybe param" "temp"
    unknown call_tmp[656532] "expr temp" "maybe param" "maybe type" "temp"
    (656535 'move' call_tmp[656532](425259 call isTrue tmp[425258]))
    (565919 'move' tmp[565914](565917 call _cond_test call_tmp[656532]))
    if tmp[565914]
    {
      unknown tmp[565921] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656537] "expr temp" "maybe param" "maybe type" "temp"
      (656540 'move' call_tmp[656537](127533 call isRectangularDom d2[127523]))
      (565923 'move' tmp[565921](425262 call isTrue call_tmp[656537]))
      (565928 'move' tmp[565913](565925 '_paramFoldLogical' tmp[565914] tmp[565921]))
    }
    {
      (565933 'move' tmp[565913](565930 '_paramFoldLogical' tmp[565914] 0))
    }
    (748307 call chpl_statementLevelSymbol tmp[565913])
  }
  function !=[127673](arg d1[127670]:_domain[125908](?), arg d2[127676]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517595] "RVV" "temp"
    unknown call_tmp[656544] "expr temp" "maybe param" "maybe type" "temp"
    (656547 'move' call_tmp[656544](127690 call _value _mt[243] d1[127670]))
    unknown call_tmp[656551] "expr temp" "maybe param" "maybe type" "temp"
    (656554 'move' call_tmp[656551](127693 call rank _mt[243] call_tmp[656544]))
    unknown call_tmp[656558] "expr temp" "maybe param" "maybe type" "temp"
    (656561 'move' call_tmp[656558](127697 call _value _mt[243] d2[127676]))
    unknown call_tmp[656565] "expr temp" "maybe param" "maybe type" "temp"
    (656568 'move' call_tmp[656565](127700 call rank _mt[243] call_tmp[656558]))
    unknown call_tmp[656570] "expr temp" "maybe param" "maybe type" "temp"
    (656573 'move' call_tmp[656570](127703 call != call_tmp[656551] call_tmp[656565]))
    unknown call_tmp[656575] "expr temp" "maybe param" "maybe type" "temp"
    (656578 'move' call_tmp[656575](127811 call _cond_test call_tmp[656570]))
    if call_tmp[656575]
    {
      (517600 'move' ret[517595](517599 'deref' 1))
      gotoReturn _end_!=[517593] _end_!=[517593]
    }
    {
      unknown call_tmp[656582] "expr temp" "maybe param" "maybe type" "temp"
      (656585 'move' call_tmp[656582](127710 call _value _mt[243] d1[127670]))
      unknown call_tmp[656589] "expr temp" "maybe param" "maybe type" "temp"
      (656592 'move' call_tmp[656589](127714 call _value _mt[243] d2[127676]))
      unknown call_tmp[656594] "expr temp" "maybe param" "maybe type" "temp"
      (656597 'move' call_tmp[656594](127717 call == call_tmp[656582] call_tmp[656589]))
      unknown call_tmp[656599] "expr temp" "maybe param" "maybe type" "temp"
      (656602 'move' call_tmp[656599](127807 call _cond_test call_tmp[656594]))
      if call_tmp[656599]
      {
        (517605 'move' ret[517595](517604 'deref' 0))
        gotoReturn _end_!=[517593] _end_!=[517593]
      }
      {
        {
          unknown i[127760] "dead at end of block" "insert auto destroy"
          (542968 'init var' i[127760] 0)
          (480053 'end of statement')
          unknown tmp[127761] "maybe param" "temp"
          unknown call_tmp[656606] "expr temp" "maybe param" "maybe type" "temp"
          (656609 'move' call_tmp[656606](127725 call _value _mt[243] d1[127670]))
          unknown call_tmp[656613] "expr temp" "maybe param" "maybe type" "temp"
          (656616 'move' call_tmp[656613](127728 call rank _mt[243] call_tmp[656606]))
          unknown call_tmp[656618] "expr temp" "maybe param" "maybe type" "temp"
          (656621 'move' call_tmp[656618](127732 call - call_tmp[656613] 1))
          (127773 'move' tmp[127761](127771 call chpl_compute_low_param_loop_bound 0 call_tmp[656618]))
          unknown tmp[127762] "maybe param" "temp"
          unknown call_tmp[656625] "expr temp" "maybe param" "maybe type" "temp"
          (656628 'move' call_tmp[656625](127782 call _value _mt[243] d1[127670]))
          unknown call_tmp[656632] "expr temp" "maybe param" "maybe type" "temp"
          (656635 'move' call_tmp[656632](127780 call rank _mt[243] call_tmp[656625]))
          unknown call_tmp[656637] "expr temp" "maybe param" "maybe type" "temp"
          (656640 'move' call_tmp[656637](127778 call - call_tmp[656632] 1))
          (127789 'move' tmp[127762](127787 call chpl_compute_high_param_loop_bound 0 call_tmp[656637]))
          unknown tmp[127763] "maybe param" "temp"
          (127792 'move' tmp[127763] 1)
          ParamForLoop[127794]
          { i[127760] tmp[127761] tmp[127762] tmp[127763]
            unknown call_tmp[656644] "expr temp" "maybe param" "maybe type" "temp"
            (656647 'move' call_tmp[656644](127742 call(127737 call (partial) dim _mt[243] d1[127670]) i[127760]))
            unknown call_tmp[656651] "expr temp" "maybe param" "maybe type" "temp"
            (656654 'move' call_tmp[656651](127749 call(127744 call (partial) dim _mt[243] d2[127676]) i[127760]))
            unknown call_tmp[656656] "expr temp" "maybe param" "maybe type" "temp"
            (656659 'move' call_tmp[656656](127750 call != call_tmp[656644] call_tmp[656651]))
            unknown call_tmp[656661] "expr temp" "maybe param" "maybe type" "temp"
            (656664 'move' call_tmp[656661](127755 call _cond_test call_tmp[656656]))
            if call_tmp[656661]
            {
              (517610 'move' ret[517595](517609 'deref' 1))
              gotoReturn _end_!=[517593] _end_!=[517593]
            }
          }
          label _unused_continueLabel[127765]
          label _breakLabel[127764]
        }
        (517615 'move' ret[517595](517614 'deref' 0))
        gotoReturn _end_!=[517593] _end_!=[517593]
      }
    }
    label _end_!=[517593]
    (517597 return ret[517595])
  }
  where {
    unknown tmp[425279] "maybe param" "temp"
    (425290 'move' tmp[425279](127682 call isRectangularDom d1[127670]))
    unknown call_tmp[656666] "expr temp" "maybe param" "maybe type" "temp"
    (656669 'move' call_tmp[656666](425292 call _cond_invalid tmp[425279]))
    if call_tmp[656666]
    {
      (425295 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565940] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565941] "maybe param" "temp"
    unknown call_tmp[656671] "expr temp" "maybe param" "maybe type" "temp"
    (656674 'move' call_tmp[656671](425280 call isTrue tmp[425279]))
    (565946 'move' tmp[565941](565944 call _cond_test call_tmp[656671]))
    if tmp[565941]
    {
      unknown tmp[565948] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656676] "expr temp" "maybe param" "maybe type" "temp"
      (656679 'move' call_tmp[656676](127686 call isRectangularDom d2[127676]))
      (565950 'move' tmp[565948](425283 call isTrue call_tmp[656676]))
      (565955 'move' tmp[565940](565952 '_paramFoldLogical' tmp[565941] tmp[565948]))
    }
    {
      (565960 'move' tmp[565940](565957 '_paramFoldLogical' tmp[565941] 0))
    }
    (748309 call chpl_statementLevelSymbol tmp[565940])
  }
  function ==[127826](arg d1[127823]:_domain[125908](?), arg d2[127829]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517621] "RVV" "temp"
    unknown call_tmp[656683] "expr temp" "maybe param" "maybe type" "temp"
    (656686 'move' call_tmp[656683](127843 call _value _mt[243] d1[127823]))
    unknown call_tmp[656690] "expr temp" "maybe param" "maybe type" "temp"
    (656693 'move' call_tmp[656690](127847 call _value _mt[243] d2[127829]))
    unknown call_tmp[656695] "expr temp" "maybe param" "maybe type" "temp"
    (656698 'move' call_tmp[656695](127850 call == call_tmp[656683] call_tmp[656690]))
    unknown call_tmp[656700] "expr temp" "maybe param" "maybe type" "temp"
    (656703 'move' call_tmp[656700](127855 call _cond_test call_tmp[656695]))
    if call_tmp[656700]
    {
      (517626 'move' ret[517621](517625 'deref' 1))
      gotoReturn _end_==[517619] _end_==[517619]
    }
    unknown call_tmp[656707] "expr temp" "maybe param" "maybe type" "temp"
    (656710 'move' call_tmp[656707](127862 call size _mt[243] d1[127823]))
    unknown call_tmp[656714] "expr temp" "maybe param" "maybe type" "temp"
    (656717 'move' call_tmp[656714](127866 call size _mt[243] d2[127829]))
    unknown call_tmp[656719] "expr temp" "maybe param" "maybe type" "temp"
    (656722 'move' call_tmp[656719](127869 call != call_tmp[656707] call_tmp[656714]))
    unknown call_tmp[656724] "expr temp" "maybe param" "maybe type" "temp"
    (656727 'move' call_tmp[656724](127874 call _cond_test call_tmp[656719]))
    if call_tmp[656724]
    {
      (517631 'move' ret[517621](517630 'deref' 0))
      gotoReturn _end_==[517619] _end_==[517619]
    }
    {
      unknown _indexOfInterest[127898] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127899] "expr temp" "temp"
      (127908 'move' _iterator[127899](127906 call _getIterator d1[127823]))
      Defer
      {
        {
          (127924 call _freeIterator _iterator[127899])
        }
      }
      { scopeless type
        (127913 'move' _indexOfInterest[127898](127910 call iteratorIndex _iterator[127899]))
      }
      ForLoop[127900]
      {
        unknown idx[127917] "index var" "insert auto destroy"
        (480059 'end of statement')
        (127919 'move' idx[127917] _indexOfInterest[127898])
        (480060 'end of statement' idx[127917])
        unknown call_tmp[656731] "expr temp" "maybe param" "maybe type" "temp"
        (656734 'move' call_tmp[656731](127887 call(127882 call (partial) contains _mt[243] d2[127829]) idx[127917]))
        unknown call_tmp[656736] "expr temp" "maybe param" "maybe type" "temp"
        (656739 'move' call_tmp[656736](127888 call ! call_tmp[656731]))
        unknown call_tmp[656741] "expr temp" "maybe param" "maybe type" "temp"
        (656744 'move' call_tmp[656741](127893 call _cond_test call_tmp[656736]))
        if call_tmp[656741]
        {
          (517636 'move' ret[517621](517635 'deref' 0))
          gotoReturn _end_==[517619] _end_==[517619]
        }
        label _continueLabel[127903]
        _indexOfInterest[127898]
        _iterator[127899]
      }
      label _breakLabel[127904]
    }
    (517641 'move' ret[517621](517640 'deref' 1))
    label _end_==[517619]
    (517623 return ret[517621])
  }
  where {
    unknown tmp[425300] "maybe param" "temp"
    (425311 'move' tmp[425300](127835 call isAssociativeDom d1[127823]))
    unknown call_tmp[656746] "expr temp" "maybe param" "maybe type" "temp"
    (656749 'move' call_tmp[656746](425313 call _cond_invalid tmp[425300]))
    if call_tmp[656746]
    {
      (425316 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565967] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565968] "maybe param" "temp"
    unknown call_tmp[656751] "expr temp" "maybe param" "maybe type" "temp"
    (656754 'move' call_tmp[656751](425301 call isTrue tmp[425300]))
    (565973 'move' tmp[565968](565971 call _cond_test call_tmp[656751]))
    if tmp[565968]
    {
      unknown tmp[565975] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656756] "expr temp" "maybe param" "maybe type" "temp"
      (656759 'move' call_tmp[656756](127839 call isAssociativeDom d2[127829]))
      (565977 'move' tmp[565975](425304 call isTrue call_tmp[656756]))
      (565982 'move' tmp[565967](565979 '_paramFoldLogical' tmp[565968] tmp[565975]))
    }
    {
      (565987 'move' tmp[565967](565984 '_paramFoldLogical' tmp[565968] 0))
    }
    (748311 call chpl_statementLevelSymbol tmp[565967])
  }
  function !=[127943](arg d1[127940]:_domain[125908](?), arg d2[127946]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517645] "RVV" "temp"
    unknown call_tmp[656763] "expr temp" "maybe param" "maybe type" "temp"
    (656766 'move' call_tmp[656763](127960 call _value _mt[243] d1[127940]))
    unknown call_tmp[656770] "expr temp" "maybe param" "maybe type" "temp"
    (656773 'move' call_tmp[656770](127964 call _value _mt[243] d2[127946]))
    unknown call_tmp[656775] "expr temp" "maybe param" "maybe type" "temp"
    (656778 'move' call_tmp[656775](127967 call == call_tmp[656763] call_tmp[656770]))
    unknown call_tmp[656780] "expr temp" "maybe param" "maybe type" "temp"
    (656783 'move' call_tmp[656780](127972 call _cond_test call_tmp[656775]))
    if call_tmp[656780]
    {
      (517650 'move' ret[517645](517649 'deref' 0))
      gotoReturn _end_!=[517643] _end_!=[517643]
    }
    unknown call_tmp[656787] "expr temp" "maybe param" "maybe type" "temp"
    (656790 'move' call_tmp[656787](127979 call size _mt[243] d1[127940]))
    unknown call_tmp[656794] "expr temp" "maybe param" "maybe type" "temp"
    (656797 'move' call_tmp[656794](127983 call size _mt[243] d2[127946]))
    unknown call_tmp[656799] "expr temp" "maybe param" "maybe type" "temp"
    (656802 'move' call_tmp[656799](127986 call != call_tmp[656787] call_tmp[656794]))
    unknown call_tmp[656804] "expr temp" "maybe param" "maybe type" "temp"
    (656807 'move' call_tmp[656804](127991 call _cond_test call_tmp[656799]))
    if call_tmp[656804]
    {
      (517655 'move' ret[517645](517654 'deref' 1))
      gotoReturn _end_!=[517643] _end_!=[517643]
    }
    {
      unknown _indexOfInterest[128015] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128016] "expr temp" "temp"
      (128025 'move' _iterator[128016](128023 call _getIterator d1[127940]))
      Defer
      {
        {
          (128041 call _freeIterator _iterator[128016])
        }
      }
      { scopeless type
        (128030 'move' _indexOfInterest[128015](128027 call iteratorIndex _iterator[128016]))
      }
      ForLoop[128017]
      {
        unknown idx[128034] "index var" "insert auto destroy"
        (480067 'end of statement')
        (128036 'move' idx[128034] _indexOfInterest[128015])
        (480068 'end of statement' idx[128034])
        unknown call_tmp[656811] "expr temp" "maybe param" "maybe type" "temp"
        (656814 'move' call_tmp[656811](128004 call(127999 call (partial) contains _mt[243] d2[127946]) idx[128034]))
        unknown call_tmp[656816] "expr temp" "maybe param" "maybe type" "temp"
        (656819 'move' call_tmp[656816](128005 call ! call_tmp[656811]))
        unknown call_tmp[656821] "expr temp" "maybe param" "maybe type" "temp"
        (656824 'move' call_tmp[656821](128010 call _cond_test call_tmp[656816]))
        if call_tmp[656821]
        {
          (517660 'move' ret[517645](517659 'deref' 1))
          gotoReturn _end_!=[517643] _end_!=[517643]
        }
        label _continueLabel[128020]
        _indexOfInterest[128015]
        _iterator[128016]
      }
      label _breakLabel[128021]
    }
    (517665 'move' ret[517645](517664 'deref' 0))
    label _end_!=[517643]
    (517647 return ret[517645])
  }
  where {
    unknown tmp[425321] "maybe param" "temp"
    (425332 'move' tmp[425321](127952 call isAssociativeDom d1[127940]))
    unknown call_tmp[656826] "expr temp" "maybe param" "maybe type" "temp"
    (656829 'move' call_tmp[656826](425334 call _cond_invalid tmp[425321]))
    if call_tmp[656826]
    {
      (425337 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565994] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565995] "maybe param" "temp"
    unknown call_tmp[656831] "expr temp" "maybe param" "maybe type" "temp"
    (656834 'move' call_tmp[656831](425322 call isTrue tmp[425321]))
    (566000 'move' tmp[565995](565998 call _cond_test call_tmp[656831]))
    if tmp[565995]
    {
      unknown tmp[566002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656836] "expr temp" "maybe param" "maybe type" "temp"
      (656839 'move' call_tmp[656836](127956 call isAssociativeDom d2[127946]))
      (566004 'move' tmp[566002](425325 call isTrue call_tmp[656836]))
      (566009 'move' tmp[565994](566006 '_paramFoldLogical' tmp[565995] tmp[566002]))
    }
    {
      (566014 'move' tmp[565994](566011 '_paramFoldLogical' tmp[565995] 0))
    }
    (748313 call chpl_statementLevelSymbol tmp[565994])
  }
  function ==[128060](arg d1[128057]:_domain[125908](?), arg d2[128063]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517669] "RVV" "temp"
    unknown call_tmp[656843] "expr temp" "maybe param" "maybe type" "temp"
    (656846 'move' call_tmp[656843](128077 call _value _mt[243] d1[128057]))
    unknown call_tmp[656850] "expr temp" "maybe param" "maybe type" "temp"
    (656853 'move' call_tmp[656850](128081 call _value _mt[243] d2[128063]))
    unknown call_tmp[656855] "expr temp" "maybe param" "maybe type" "temp"
    (656858 'move' call_tmp[656855](128084 call == call_tmp[656843] call_tmp[656850]))
    unknown call_tmp[656860] "expr temp" "maybe param" "maybe type" "temp"
    (656863 'move' call_tmp[656860](128089 call _cond_test call_tmp[656855]))
    if call_tmp[656860]
    {
      (517674 'move' ret[517669](517673 'deref' 1))
      gotoReturn _end_==[517667] _end_==[517667]
    }
    unknown call_tmp[656867] "expr temp" "maybe param" "maybe type" "temp"
    (656870 'move' call_tmp[656867](128096 call size _mt[243] d1[128057]))
    unknown call_tmp[656874] "expr temp" "maybe param" "maybe type" "temp"
    (656877 'move' call_tmp[656874](128100 call size _mt[243] d2[128063]))
    unknown call_tmp[656879] "expr temp" "maybe param" "maybe type" "temp"
    (656882 'move' call_tmp[656879](128103 call != call_tmp[656867] call_tmp[656874]))
    unknown call_tmp[656884] "expr temp" "maybe param" "maybe type" "temp"
    (656887 'move' call_tmp[656884](128108 call _cond_test call_tmp[656879]))
    if call_tmp[656884]
    {
      (517679 'move' ret[517669](517678 'deref' 0))
      gotoReturn _end_==[517667] _end_==[517667]
    }
    unknown call_tmp[656891] "expr temp" "maybe param" "maybe type" "temp"
    (656894 'move' call_tmp[656891](128114 call _value _mt[243] d1[128057]))
    unknown call_tmp[656898] "expr temp" "maybe param" "maybe type" "temp"
    (656901 'move' call_tmp[656898](128117 call parentDom _mt[243] call_tmp[656891]))
    unknown call_tmp[656905] "expr temp" "maybe param" "maybe type" "temp"
    (656908 'move' call_tmp[656905](128121 call _value _mt[243] d2[128063]))
    unknown call_tmp[656912] "expr temp" "maybe param" "maybe type" "temp"
    (656915 'move' call_tmp[656912](128124 call parentDom _mt[243] call_tmp[656905]))
    unknown call_tmp[656917] "expr temp" "maybe param" "maybe type" "temp"
    (656920 'move' call_tmp[656917](128127 call != call_tmp[656898] call_tmp[656912]))
    unknown call_tmp[656922] "expr temp" "maybe param" "maybe type" "temp"
    (656925 'move' call_tmp[656922](128132 call _cond_test call_tmp[656917]))
    if call_tmp[656922]
    {
      (517684 'move' ret[517669](517683 'deref' 0))
      gotoReturn _end_==[517667] _end_==[517667]
    }
    {
      unknown _indexOfInterest[128156] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128157] "expr temp" "temp"
      (128166 'move' _iterator[128157](128164 call _getIterator d1[128057]))
      Defer
      {
        {
          (128182 call _freeIterator _iterator[128157])
        }
      }
      { scopeless type
        (128171 'move' _indexOfInterest[128156](128168 call iteratorIndex _iterator[128157]))
      }
      ForLoop[128158]
      {
        unknown idx[128175] "index var" "insert auto destroy"
        (480076 'end of statement')
        (128177 'move' idx[128175] _indexOfInterest[128156])
        (480077 'end of statement' idx[128175])
        unknown call_tmp[656929] "expr temp" "maybe param" "maybe type" "temp"
        (656932 'move' call_tmp[656929](128145 call(128140 call (partial) contains _mt[243] d2[128063]) idx[128175]))
        unknown call_tmp[656934] "expr temp" "maybe param" "maybe type" "temp"
        (656937 'move' call_tmp[656934](128146 call ! call_tmp[656929]))
        unknown call_tmp[656939] "expr temp" "maybe param" "maybe type" "temp"
        (656942 'move' call_tmp[656939](128151 call _cond_test call_tmp[656934]))
        if call_tmp[656939]
        {
          (517689 'move' ret[517669](517688 'deref' 0))
          gotoReturn _end_==[517667] _end_==[517667]
        }
        label _continueLabel[128161]
        _indexOfInterest[128156]
        _iterator[128157]
      }
      label _breakLabel[128162]
    }
    (517694 'move' ret[517669](517693 'deref' 1))
    label _end_==[517667]
    (517671 return ret[517669])
  }
  where {
    unknown tmp[425342] "maybe param" "temp"
    (425353 'move' tmp[425342](128069 call isSparseDom d1[128057]))
    unknown call_tmp[656944] "expr temp" "maybe param" "maybe type" "temp"
    (656947 'move' call_tmp[656944](425355 call _cond_invalid tmp[425342]))
    if call_tmp[656944]
    {
      (425358 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566021] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566022] "maybe param" "temp"
    unknown call_tmp[656949] "expr temp" "maybe param" "maybe type" "temp"
    (656952 'move' call_tmp[656949](425343 call isTrue tmp[425342]))
    (566027 'move' tmp[566022](566025 call _cond_test call_tmp[656949]))
    if tmp[566022]
    {
      unknown tmp[566029] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656954] "expr temp" "maybe param" "maybe type" "temp"
      (656957 'move' call_tmp[656954](128073 call isSparseDom d2[128063]))
      (566031 'move' tmp[566029](425346 call isTrue call_tmp[656954]))
      (566036 'move' tmp[566021](566033 '_paramFoldLogical' tmp[566022] tmp[566029]))
    }
    {
      (566041 'move' tmp[566021](566038 '_paramFoldLogical' tmp[566022] 0))
    }
    (748315 call chpl_statementLevelSymbol tmp[566021])
  }
  function !=[128201](arg d1[128198]:_domain[125908](?), arg d2[128204]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517698] "RVV" "temp"
    unknown call_tmp[656961] "expr temp" "maybe param" "maybe type" "temp"
    (656964 'move' call_tmp[656961](128218 call _value _mt[243] d1[128198]))
    unknown call_tmp[656968] "expr temp" "maybe param" "maybe type" "temp"
    (656971 'move' call_tmp[656968](128222 call _value _mt[243] d2[128204]))
    unknown call_tmp[656973] "expr temp" "maybe param" "maybe type" "temp"
    (656976 'move' call_tmp[656973](128225 call == call_tmp[656961] call_tmp[656968]))
    unknown call_tmp[656978] "expr temp" "maybe param" "maybe type" "temp"
    (656981 'move' call_tmp[656978](128230 call _cond_test call_tmp[656973]))
    if call_tmp[656978]
    {
      (517703 'move' ret[517698](517702 'deref' 0))
      gotoReturn _end_!=[517696] _end_!=[517696]
    }
    unknown call_tmp[656985] "expr temp" "maybe param" "maybe type" "temp"
    (656988 'move' call_tmp[656985](128237 call size _mt[243] d1[128198]))
    unknown call_tmp[656992] "expr temp" "maybe param" "maybe type" "temp"
    (656995 'move' call_tmp[656992](128241 call size _mt[243] d2[128204]))
    unknown call_tmp[656997] "expr temp" "maybe param" "maybe type" "temp"
    (657000 'move' call_tmp[656997](128244 call != call_tmp[656985] call_tmp[656992]))
    unknown call_tmp[657002] "expr temp" "maybe param" "maybe type" "temp"
    (657005 'move' call_tmp[657002](128249 call _cond_test call_tmp[656997]))
    if call_tmp[657002]
    {
      (517708 'move' ret[517698](517707 'deref' 1))
      gotoReturn _end_!=[517696] _end_!=[517696]
    }
    unknown call_tmp[657009] "expr temp" "maybe param" "maybe type" "temp"
    (657012 'move' call_tmp[657009](128255 call _value _mt[243] d1[128198]))
    unknown call_tmp[657016] "expr temp" "maybe param" "maybe type" "temp"
    (657019 'move' call_tmp[657016](128258 call parentDom _mt[243] call_tmp[657009]))
    unknown call_tmp[657023] "expr temp" "maybe param" "maybe type" "temp"
    (657026 'move' call_tmp[657023](128262 call _value _mt[243] d2[128204]))
    unknown call_tmp[657030] "expr temp" "maybe param" "maybe type" "temp"
    (657033 'move' call_tmp[657030](128265 call parentDom _mt[243] call_tmp[657023]))
    unknown call_tmp[657035] "expr temp" "maybe param" "maybe type" "temp"
    (657038 'move' call_tmp[657035](128268 call != call_tmp[657016] call_tmp[657030]))
    unknown call_tmp[657040] "expr temp" "maybe param" "maybe type" "temp"
    (657043 'move' call_tmp[657040](128273 call _cond_test call_tmp[657035]))
    if call_tmp[657040]
    {
      (517713 'move' ret[517698](517712 'deref' 1))
      gotoReturn _end_!=[517696] _end_!=[517696]
    }
    {
      unknown _indexOfInterest[128297] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128298] "expr temp" "temp"
      (128307 'move' _iterator[128298](128305 call _getIterator d1[128198]))
      Defer
      {
        {
          (128323 call _freeIterator _iterator[128298])
        }
      }
      { scopeless type
        (128312 'move' _indexOfInterest[128297](128309 call iteratorIndex _iterator[128298]))
      }
      ForLoop[128299]
      {
        unknown idx[128316] "index var" "insert auto destroy"
        (480085 'end of statement')
        (128318 'move' idx[128316] _indexOfInterest[128297])
        (480086 'end of statement' idx[128316])
        unknown call_tmp[657047] "expr temp" "maybe param" "maybe type" "temp"
        (657050 'move' call_tmp[657047](128286 call(128281 call (partial) contains _mt[243] d2[128204]) idx[128316]))
        unknown call_tmp[657052] "expr temp" "maybe param" "maybe type" "temp"
        (657055 'move' call_tmp[657052](128287 call ! call_tmp[657047]))
        unknown call_tmp[657057] "expr temp" "maybe param" "maybe type" "temp"
        (657060 'move' call_tmp[657057](128292 call _cond_test call_tmp[657052]))
        if call_tmp[657057]
        {
          (517718 'move' ret[517698](517717 'deref' 1))
          gotoReturn _end_!=[517696] _end_!=[517696]
        }
        label _continueLabel[128302]
        _indexOfInterest[128297]
        _iterator[128298]
      }
      label _breakLabel[128303]
    }
    (517723 'move' ret[517698](517722 'deref' 0))
    label _end_!=[517696]
    (517700 return ret[517698])
  }
  where {
    unknown tmp[425363] "maybe param" "temp"
    (425374 'move' tmp[425363](128210 call isSparseDom d1[128198]))
    unknown call_tmp[657062] "expr temp" "maybe param" "maybe type" "temp"
    (657065 'move' call_tmp[657062](425376 call _cond_invalid tmp[425363]))
    if call_tmp[657062]
    {
      (425379 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566048] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566049] "maybe param" "temp"
    unknown call_tmp[657067] "expr temp" "maybe param" "maybe type" "temp"
    (657070 'move' call_tmp[657067](425364 call isTrue tmp[425363]))
    (566054 'move' tmp[566049](566052 call _cond_test call_tmp[657067]))
    if tmp[566049]
    {
      unknown tmp[566056] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657072] "expr temp" "maybe param" "maybe type" "temp"
      (657075 'move' call_tmp[657072](128214 call isSparseDom d2[128204]))
      (566058 'move' tmp[566056](425367 call isTrue call_tmp[657072]))
      (566063 'move' tmp[566048](566060 '_paramFoldLogical' tmp[566049] tmp[566056]))
    }
    {
      (566068 'move' tmp[566048](566065 '_paramFoldLogical' tmp[566049] 0))
    }
    (748317 call chpl_statementLevelSymbol tmp[566048])
  }
  function ==[128342](arg d1[128339]:_domain[125908](?), arg d2[128345]:_domain[125908](?)) param : _unknown[51] "inline"
  {
    unknown ret[517727] "RVV" "param" "temp"
    (517732 'move' ret[517727](517731 'deref' 0))
    (517729 return ret[517727])
  }
  function !=[128360](arg d1[128357]:_domain[125908](?), arg d2[128363]:_domain[125908](?)) param : _unknown[51] "inline"
  {
    unknown ret[517736] "RVV" "param" "temp"
    (517741 'move' ret[517736](517740 'deref' 1))
    (517738 return ret[517736])
  }
  function shouldReturnRvalueByConstRef[128376](arg t[128374]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517745] "RVV" "param" "temp"
    (517750 'move' ret[517745](517749 'deref' 1))
    (517747 return ret[517745])
  }
  function shouldReturnRvalueByValue[128388](arg t[128386]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517754] "RVV" "param" "temp"
    unknown call_tmp[657077] "expr temp" "maybe param" "maybe type" "temp"
    (657080 'move' call_tmp[657077](128391 call ! PODValAccess[113743]))
    unknown call_tmp[657082] "expr temp" "maybe param" "maybe type" "temp"
    (657085 'move' call_tmp[657082](128396 call _cond_test call_tmp[657077]))
    if call_tmp[657082]
    {
      (517759 'move' ret[517754](517758 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[517752] _end_shouldReturnRvalueByValue[517752]
    }
    unknown call_tmp[657087] "expr temp" "maybe param" "maybe type" "temp"
    (657090 'move' call_tmp[657087](128405 call isPODType t[128386]))
    unknown call_tmp[657092] "expr temp" "maybe param" "maybe type" "temp"
    (657095 'move' call_tmp[657092](128409 call _cond_test call_tmp[657087]))
    if call_tmp[657092]
    {
      (517764 'move' ret[517754](517763 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[517752] _end_shouldReturnRvalueByValue[517752]
    }
    (517769 'move' ret[517754](517768 'deref' 0))
    label _end_shouldReturnRvalueByValue[517752]
    (517756 return ret[517754])
  }
  function _array[133594](?).chpl__serialize[128436](arg _mt[133598]:_MT[238], arg this[133596]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517773] "RVV" "temp"
    unknown call_tmp[657099] "expr temp" "maybe param" "maybe type" "temp"
    (657102 'move' call_tmp[657099](359764 call _instance _mt[243] this[133596]))
    unknown call_tmp[657106] "expr temp" "maybe param" "maybe type" "temp"
    (657109 'move' call_tmp[657106](128451 call(128447 call (partial) chpl__serialize _mt[243] call_tmp[657099])))
    (517778 'move' ret[517773](517777 'deref' call_tmp[657106]))
    (517775 return ret[517773])
  }
  where {
    unknown call_tmp[657113] "expr temp" "maybe param" "maybe type" "temp"
    (657116 'move' call_tmp[657113](359759 call _instance _mt[243] this[133596]))
    (128445 call(128441 call (partial) chpl__rvfMe _mt[243] call_tmp[657113]))
  }
  function _array[133594](?).chpl__deserialize[128462](arg _mt[133602]:_MT[238], arg this[133600]:_array[133594](?), arg data[128460]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[517782] "RVV" "temp"
    unknown call_tmp[657120] "expr temp" "maybe param" "maybe type" "temp"
    (657123 'move' call_tmp[657120](128469 'static field type' this[133600] "_instance"))
    unknown call_tmp[657125] "expr temp" "maybe param" "maybe type" "temp"
    (657128 'move' call_tmp[657125](128471 call _to_borrowed call_tmp[657120]))
    unknown call_tmp[657132] "maybe param" "maybe type" "temp"
    (657135 'move' call_tmp[657132](128477 call(128472 call (partial) chpl__deserialize _mt[243] call_tmp[657125]) data[128460]))
    unknown arrinst[128478] "dead at end of block" "insert auto destroy"
    (542970 'init var' arrinst[128478] call_tmp[657132])
    (128481 'end of statement')
    unknown call_tmp[657137] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (657140 'move' call_tmp[657137](747900 'new' _array[133594](?) nullPid[113718] arrinst[128478](_unowned = 1)))
    (517787 'move' ret[517782](517786 'deref' call_tmp[657137]))
    gotoReturn _end_chpl__deserialize[517780] _end_chpl__deserialize[517780]
    (480097 'end of statement' arrinst[128478])
    label _end_chpl__deserialize[517780]
    (517784 return ret[517782])
  }
  function _array[133594](?).chpl__promotionType[128497](arg _mt[133606]:_MT[238], arg this[133604]:_array[133594](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[517793] "RVV" "temp" "type variable"
    unknown call_tmp[657144] "expr temp" "maybe param" "maybe type" "temp"
    (657147 'move' call_tmp[657144](359768 call _value _mt[243] this[133604]))
    unknown call_tmp[657151] "expr temp" "maybe param" "maybe type" "temp"
    (657154 'move' call_tmp[657151](128500 call eltType _mt[243] call_tmp[657144]))
    (517798 'move' ret[517793](517797 'deref' call_tmp[657151]))
    (517795 return ret[517793])
  }
  function _array[133594](?)._value[128510](arg _mt[133610]:_MT[238], arg this[133608]:_array[133594](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[517802] "RVV" "temp"
    unknown call_tmp[657158] "expr temp" "maybe param" "maybe type" "temp"
    (657161 'move' call_tmp[657158](383772 call _instance _mt[243] this[133608]))
    unknown call_tmp[657163] "expr temp" "maybe param" "maybe type" "temp"
    (657166 'move' call_tmp[657163](128515 call _isPrivatized call_tmp[657158]))
    unknown call_tmp[657168] "expr temp" "maybe param" "maybe type" "temp"
    (657171 'move' call_tmp[657168](128529 call _cond_test call_tmp[657163]))
    if call_tmp[657168]
    {
      { scopeless type
        unknown call_type_tmp[492216] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[657175] "expr temp" "maybe param" "maybe type" "temp"
        (657178 'move' call_tmp[657175](383777 call _instance _mt[243] this[133608]))
        (492220 'move' call_type_tmp[492216](128518 'typeof' call_tmp[657175]))
      }
      unknown call_tmp[657182] "expr temp" "maybe param" "maybe type" "temp"
      (657185 'move' call_tmp[657182](383782 call _pid _mt[243] this[133608]))
      unknown call_tmp[657187] "expr temp" "maybe param" "maybe type" "temp"
      (657190 'move' call_tmp[657187](128521 call chpl_getPrivatizedCopy call_type_tmp[492216] call_tmp[657182]))
      (517807 'move' ret[517802](517806 'deref' call_tmp[657187]))
      gotoReturn _end__value[517800] _end__value[517800]
    }
    {
      unknown call_tmp[657194] "expr temp" "maybe param" "maybe type" "temp"
      (657197 'move' call_tmp[657194](383787 call _instance _mt[243] this[133608]))
      (517812 'move' ret[517802](517811 'deref' call_tmp[657194]))
      gotoReturn _end__value[517800] _end__value[517800]
    }
    label _end__value[517800]
    (517804 return ret[517802])
  }
  function _array[133594](?).chpl_forwarding_expr6__value[128543](arg _mt[133614]:_MT[238], arg this[133612]:_array[133594](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[517818] "RVV" "temp"
    (517822 'move' ret[517818](383791 call _value _mt[243] this[133612]))
    (517820 return ret[517818])
  }
  function _array[133594](?).deinit[128551](arg _mt[133618]:_MT[238], arg this[133616]:_array[133594](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128556 call _do_destroy_array this[133616])
    (517824 return _void[55])
  }
  function _array[133594](?).eltType[128563](arg _mt[133622]:_MT[238], arg this[133620]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517828] "RVV" "temp" "type variable"
    unknown call_tmp[657203] "expr temp" "maybe param" "maybe type" "temp"
    (657206 'move' call_tmp[657203](359772 call _value _mt[243] this[133620]))
    unknown call_tmp[657210] "expr temp" "maybe param" "maybe type" "temp"
    (657213 'move' call_tmp[657210](128566 call eltType _mt[243] call_tmp[657203]))
    (517833 'move' ret[517828](517832 'deref' call_tmp[657210]))
    (517830 return ret[517828])
  }
  function _array[133594](?).idxType[128576](arg _mt[133626]:_MT[238], arg this[133624]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517837] "RVV" "temp" "type variable"
    unknown call_tmp[657217] "expr temp" "maybe param" "maybe type" "temp"
    (657220 'move' call_tmp[657217](359776 call _value _mt[243] this[133624]))
    unknown call_tmp[657224] "expr temp" "maybe param" "maybe type" "temp"
    (657227 'move' call_tmp[657224](128579 call idxType _mt[243] call_tmp[657217]))
    (517842 'move' ret[517837](517841 'deref' call_tmp[657224]))
    (517839 return ret[517837])
  }
  function _array[133594](?)._dom[128589](arg _mt[133630]:_MT[238], arg this[133628]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517846] "RVV" "temp"
    unknown call_tmp[657231] "expr temp" "maybe param" "maybe type" "temp"
    (657234 'move' call_tmp[657231](359780 call _value _mt[243] this[133628]))
    unknown call_tmp[657238] "expr temp" "maybe param" "maybe type" "temp"
    (657241 'move' call_tmp[657238](128593 call dom _mt[243] call_tmp[657231]))
    unknown call_tmp[657243] "expr temp" "maybe param" "maybe type" "temp"
    (657246 'move' call_tmp[657243](128597 call _getDomain call_tmp[657238]))
    (517851 'move' ret[517846](517850 'deref' call_tmp[657243]))
    (517848 return ret[517846])
  }
  function _array[133594](?).rank[128605](arg _mt[133634]:_MT[238], arg this[133632]:_array[133594](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517855] "RVV" "param" "temp"
    unknown call_tmp[657250] "expr temp" "maybe param" "maybe type" "temp"
    (657253 'move' call_tmp[657250](128608 call _dom _mt[243] this[133632]))
    unknown call_tmp[657257] "expr temp" "maybe param" "maybe type" "temp"
    (657260 'move' call_tmp[657257](128611 call rank _mt[243] call_tmp[657250]))
    (517860 'move' ret[517855](517859 'deref' call_tmp[657257]))
    (517857 return ret[517855])
  }
  function _array[133594](?).indices[128621](arg _mt[133638]:_MT[238], arg this[133636]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517864] "RVV" "temp"
    unknown call_tmp[657264] "expr temp" "maybe param" "maybe type" "temp"
    (657267 'move' call_tmp[657264](383796 call _dom _mt[243] this[133636]))
    (517869 'move' ret[517864](517868 'deref' call_tmp[657264]))
    (517866 return ret[517864])
  }
  function _array[133594](?).checkAccess[128633](arg _mt[133642]:_MT[238], arg this[133640]:_array[133594](?), arg indices[128631]:_any[178](?), arg value[128635]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657269] "expr temp" "maybe param" "maybe type" "temp"
    (657272 'move' call_tmp[657269](128640 call isRectangularArr this[133640]))
    unknown call_tmp[657274] "expr temp" "maybe param" "maybe type" "temp"
    (657277 'move' call_tmp[657274](129156 call _cond_test call_tmp[657269]))
    if call_tmp[657274]
    {
      unknown call_tmp[657281] "expr temp" "maybe param" "maybe type" "temp"
      (657284 'move' call_tmp[657281](128649 call(128644 call (partial) dsiBoundsCheck _mt[243] value[128635]) indices[128631]))
      unknown call_tmp[657286] "expr temp" "maybe param" "maybe type" "temp"
      (657289 'move' call_tmp[657286](128650 call ! call_tmp[657281]))
      unknown call_tmp[657291] "expr temp" "maybe param" "maybe type" "temp"
      (657294 'move' call_tmp[657291](129151 call _cond_test call_tmp[657286]))
      if call_tmp[657291]
      {
        unknown call_tmp[657298] "expr temp" "maybe param" "maybe type" "temp"
        (657301 'move' call_tmp[657298](383802 call rank _mt[243] this[133640]))
        unknown call_tmp[657303] "expr temp" "maybe param" "maybe type" "temp"
        (657306 'move' call_tmp[657303](128654 call == call_tmp[657298] 1))
        unknown call_tmp[657308] "expr temp" "maybe param" "maybe type" "temp"
        (657311 'move' call_tmp[657308](129146 call _cond_test call_tmp[657303]))
        if call_tmp[657308]
        {
          unknown call_tmp[657313] "expr temp" "maybe param" "maybe type" "temp"
          (657316 'move' call_tmp[657313](128695 call indices[128631] 0))
          unknown call_tmp[657320] "expr temp" "maybe param" "maybe type" "temp"
          (657323 'move' call_tmp[657320](128714 call dom _mt[243] value[128635]))
          unknown call_tmp[657327] "expr temp" "maybe param" "maybe type" "temp"
          (657330 'move' call_tmp[657327](128722 call(128717 call (partial) dsiDim _mt[243] call_tmp[657320]) 0))
          (128723 call halt "array index out of bounds\n" "note: index was " call_tmp[657313] " but array bounds are " call_tmp[657327])
        }
        {
          unknown istr[128743] "dead at end of block" "insert auto destroy"
          (542972 'init var' istr[128743] "")
          (128746 'end of statement')
          unknown bstr[128765] "dead at end of block" "insert auto destroy"
          (542974 'init var' bstr[128765] "")
          (128768 'end of statement')
          {
            unknown i[128824] "dead at end of block" "insert auto destroy"
            (542976 'init var' i[128824] 0)
            (480109 'end of statement')
            unknown tmp[128825] "maybe param" "temp"
            unknown call_tmp[657334] "expr temp" "maybe param" "maybe type" "temp"
            (657337 'move' call_tmp[657334](383807 call rank _mt[243] this[133640]))
            unknown call_tmp[657339] "expr temp" "maybe param" "maybe type" "temp"
            (657342 'move' call_tmp[657339](128772 call - call_tmp[657334] 1))
            (128837 'move' tmp[128825](128835 call chpl_compute_low_param_loop_bound 0 call_tmp[657339]))
            unknown tmp[128826] "maybe param" "temp"
            unknown call_tmp[657346] "expr temp" "maybe param" "maybe type" "temp"
            (657349 'move' call_tmp[657346](383819 call rank _mt[243] this[133640]))
            unknown call_tmp[657351] "expr temp" "maybe param" "maybe type" "temp"
            (657354 'move' call_tmp[657351](128842 call - call_tmp[657346] 1))
            (128847 'move' tmp[128826](128845 call chpl_compute_high_param_loop_bound 0 call_tmp[657351]))
            unknown tmp[128827] "maybe param" "temp"
            (128850 'move' tmp[128827] 1)
            ParamForLoop[128852]
            { i[128824] tmp[128825] tmp[128826] tmp[128827]
              {
                unknown call_tmp[657356] "expr temp" "maybe param" "maybe type" "temp"
                (657359 'move' call_tmp[657356](128778 call != i[128824] 0))
                unknown call_tmp[657361] "expr temp" "maybe param" "maybe type" "temp"
                (657364 'move' call_tmp[657361](128791 call _cond_test call_tmp[657356]))
                if call_tmp[657361]
                {
                  (128782 call += istr[128743] ", ")
                  (480110 'end of statement' istr[128743])
                  (128788 call += bstr[128765] ", ")
                  (480112 'end of statement' bstr[128765])
                }
                unknown call_tmp[657366] "expr temp" "maybe param" "maybe type" "temp"
                (657369 'move' call_tmp[657366](128800 call indices[128631] i[128824]))
                unknown call_tmp[657371] "expr temp" "maybe param" "maybe type" "temp"
                (657374 'move' call_tmp[657371](128802 call _cast string[26] call_tmp[657366]))
                (128804 call += istr[128743] call_tmp[657371])
                (480114 'end of statement' istr[128743] i[128824])
                unknown call_tmp[657378] "expr temp" "maybe param" "maybe type" "temp"
                (657381 'move' call_tmp[657378](128809 call dom _mt[243] value[128635]))
                unknown call_tmp[657385] "expr temp" "maybe param" "maybe type" "temp"
                (657388 'move' call_tmp[657385](128817 call(128812 call (partial) dsiDim _mt[243] call_tmp[657378]) i[128824]))
                unknown call_tmp[657390] "expr temp" "maybe param" "maybe type" "temp"
                (657393 'move' call_tmp[657390](128819 call _cast string[26] call_tmp[657385]))
                (128821 call += bstr[128765] call_tmp[657390])
                (480117 'end of statement' bstr[128765] i[128824])
              }
            }
            label _unused_continueLabel[128829]
            label _breakLabel[128828]
          }
          unknown dimstr[128878] "dead at end of block" "insert auto destroy"
          (542978 'init var' dimstr[128878] "")
          (128881 'end of statement')
          {
            unknown i[129032] "dead at end of block" "insert auto destroy"
            (542980 'init var' i[129032] 0)
            (480120 'end of statement')
            unknown tmp[129033] "maybe param" "temp"
            unknown call_tmp[657397] "expr temp" "maybe param" "maybe type" "temp"
            (657400 'move' call_tmp[657397](383823 call rank _mt[243] this[133640]))
            unknown call_tmp[657402] "expr temp" "maybe param" "maybe type" "temp"
            (657405 'move' call_tmp[657402](128885 call - call_tmp[657397] 1))
            (129045 'move' tmp[129033](129043 call chpl_compute_low_param_loop_bound 0 call_tmp[657402]))
            unknown tmp[129034] "maybe param" "temp"
            unknown call_tmp[657409] "expr temp" "maybe param" "maybe type" "temp"
            (657412 'move' call_tmp[657409](383836 call rank _mt[243] this[133640]))
            unknown call_tmp[657414] "expr temp" "maybe param" "maybe type" "temp"
            (657417 'move' call_tmp[657414](129050 call - call_tmp[657409] 1))
            (129055 'move' tmp[129034](129053 call chpl_compute_high_param_loop_bound 0 call_tmp[657414]))
            unknown tmp[129035] "maybe param" "temp"
            (129058 'move' tmp[129035] 1)
            ParamForLoop[129060]
            { i[129032] tmp[129033] tmp[129034] tmp[129035]
              {
                unknown call_tmp[657421] "expr temp" "maybe param" "maybe type" "temp"
                (657424 'move' call_tmp[657421](128890 call dom _mt[243] value[128635]))
                unknown call_tmp[657428] "expr temp" "maybe param" "maybe type" "temp"
                (657431 'move' call_tmp[657428](128898 call(128893 call (partial) dsiDim _mt[243] call_tmp[657421]) i[129032]))
                unknown call_tmp[657435] "expr temp" "maybe param" "maybe type" "temp"
                (657438 'move' call_tmp[657435](128907 call indices[128631] i[129032]))
                unknown call_tmp[657440] "expr temp" "maybe param" "maybe type" "temp"
                (657443 'move' call_tmp[657440](128909 call(128901 call (partial) boundsCheck _mt[243] call_tmp[657428]) call_tmp[657435]))
                unknown call_tmp[657445] "expr temp" "maybe param" "maybe type" "temp"
                (657448 'move' call_tmp[657445](128910 call ! call_tmp[657440]))
                unknown call_tmp[657450] "expr temp" "maybe param" "maybe type" "temp"
                (657453 'move' call_tmp[657450](129027 call _cond_test call_tmp[657445]))
                if call_tmp[657450]
                {
                  unknown call_tmp[657455] "expr temp" "maybe param" "maybe type" "temp"
                  (657458 'move' call_tmp[657455](128930 call == dimstr[128878] ""))
                  unknown call_tmp[657460] "expr temp" "maybe param" "maybe type" "temp"
                  (657463 'move' call_tmp[657460](129022 call _cond_test call_tmp[657455]))
                  if call_tmp[657460]
                  {
                    unknown call_tmp[657465] "expr temp" "maybe param" "maybe type" "temp"
                    (657468 'move' call_tmp[657465](128952 call _cast string[26] i[129032]))
                    unknown call_tmp[657470] "expr temp" "maybe param" "maybe type" "temp"
                    (657473 'move' call_tmp[657470](128954 call + "out of bounds in dimension " call_tmp[657465]))
                    unknown call_tmp[657475] "expr temp" "maybe param" "maybe type" "temp"
                    (657478 'move' call_tmp[657475](128973 call + call_tmp[657470] " because index "))
                    unknown call_tmp[657480] "expr temp" "maybe param" "maybe type" "temp"
                    (657483 'move' call_tmp[657480](128978 call indices[128631] i[129032]))
                    unknown call_tmp[657485] "expr temp" "maybe param" "maybe type" "temp"
                    (657488 'move' call_tmp[657485](128980 call _cast string[26] call_tmp[657480]))
                    unknown call_tmp[657490] "expr temp" "maybe param" "maybe type" "temp"
                    (657493 'move' call_tmp[657490](128982 call + call_tmp[657475] call_tmp[657485]))
                    unknown call_tmp[657495] "expr temp" "maybe param" "maybe type" "temp"
                    (657498 'move' call_tmp[657495](129001 call + call_tmp[657490] " is not in "))
                    unknown call_tmp[657502] "expr temp" "maybe param" "maybe type" "temp"
                    (657505 'move' call_tmp[657502](129004 call dom _mt[243] value[128635]))
                    unknown call_tmp[657509] "expr temp" "maybe param" "maybe type" "temp"
                    (657512 'move' call_tmp[657509](129012 call(129007 call (partial) dsiDim _mt[243] call_tmp[657502]) i[129032]))
                    unknown call_tmp[657514] "expr temp" "maybe param" "maybe type" "temp"
                    (657517 'move' call_tmp[657514](129014 call _cast string[26] call_tmp[657509]))
                    unknown call_tmp[657519] "expr temp" "maybe param" "maybe type" "temp"
                    (657522 'move' call_tmp[657519](129016 call + call_tmp[657495] call_tmp[657514]))
                    (129018 call = dimstr[128878] call_tmp[657519])
                    (480121 'end of statement' dimstr[128878] i[129032] i[129032] i[129032])
                  }
                }
              }
            }
            label _unused_continueLabel[129037]
            label _breakLabel[129036]
          }
          (129144 call halt "array index out of bounds\n" "note: index was (" istr[128743] ") " "but array bounds are (" bstr[128765] ")\n" "note: " dimstr[128878])
          (480126 'end of statement' istr[128743] bstr[128765] dimstr[128878])
        }
      }
    }
    (517871 return _void[55])
  }
  function _array[133594](?).checkSlice[129169](arg _mt[133646]:_MT[238], arg this[133644]:_array[133594](?), arg d[129166]:_domain[125908](?), arg value[129171]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657528] "expr temp" "maybe param" "maybe type" "temp"
    (657531 'move' call_tmp[657528](129179 call(129175 call (partial) dsiDims _mt[243] d[129166])))
    (129184 call(383846 call (partial) checkSlice _mt[243] this[133644])(129180 'expand_tuple' call_tmp[657528])(value = value[129171]))
    (517873 return _void[55])
  }
  function _array[133594](?).checkSlice[129195](arg _mt[133650]:_MT[238], arg this[133648]:_array[133594](?), arg ranges[129192]:_any[178](?) ..., arg value[129197]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657535] "expr temp" "maybe param" "maybe type" "temp"
    (657538 'move' call_tmp[657535](129206 call isRectangularArr this[133648]))
    unknown call_tmp[657540] "expr temp" "maybe param" "maybe type" "temp"
    (657543 'move' call_tmp[657540](129699 call _cond_test call_tmp[657535]))
    if call_tmp[657540]
    {
      unknown ok[129208] "dead at end of block" "insert auto destroy"
      (542982 'init var' ok[129208] 1)
      (129211 'end of statement')
      {
        unknown i[129253] "dead at end of block" "insert auto destroy"
        (542984 'init var' i[129253] 0)
        (480131 'end of statement')
        unknown tmp[129254] "maybe param" "temp"
        unknown call_tmp[657547] "expr temp" "maybe param" "maybe type" "temp"
        (657550 'move' call_tmp[657547](383857 call rank _mt[243] this[133648]))
        unknown call_tmp[657552] "expr temp" "maybe param" "maybe type" "temp"
        (657555 'move' call_tmp[657552](129216 call - call_tmp[657547] 1))
        (129266 'move' tmp[129254](129264 call chpl_compute_low_param_loop_bound 0 call_tmp[657552]))
        unknown tmp[129255] "maybe param" "temp"
        unknown call_tmp[657559] "expr temp" "maybe param" "maybe type" "temp"
        (657562 'move' call_tmp[657559](383865 call rank _mt[243] this[133648]))
        unknown call_tmp[657564] "expr temp" "maybe param" "maybe type" "temp"
        (657567 'move' call_tmp[657564](129271 call - call_tmp[657559] 1))
        (129276 'move' tmp[129255](129274 call chpl_compute_high_param_loop_bound 0 call_tmp[657564]))
        unknown tmp[129256] "maybe param" "temp"
        (129279 'move' tmp[129256] 1)
        ParamForLoop[129281]
        { i[129253] tmp[129254] tmp[129255] tmp[129256]
          {
            {
              unknown tmp[129241] "temp"
              (129244 'move' tmp[129241](129243 'addr of' ok[129208]))
              unknown tmp[425384] "maybe param" "temp"
              (425395 'move' tmp[425384] tmp[129241])
              unknown call_tmp[657569] "expr temp" "maybe param" "maybe type" "temp"
              (657572 'move' call_tmp[657569](425397 call _cond_invalid tmp[425384]))
              if call_tmp[657569]
              {
                (425400 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[566075] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[566076] "maybe param" "temp"
              unknown call_tmp[657574] "expr temp" "maybe param" "maybe type" "temp"
              (657577 'move' call_tmp[657574](425385 call isTrue tmp[425384]))
              (566081 'move' tmp[566076](566079 call _cond_test call_tmp[657574]))
              if tmp[566076]
              {
                unknown tmp[566083] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[657581] "expr temp" "maybe param" "maybe type" "temp"
                (657584 'move' call_tmp[657581](129222 call dom _mt[243] value[129197]))
                unknown call_tmp[657588] "expr temp" "maybe param" "maybe type" "temp"
                (657591 'move' call_tmp[657588](129230 call(129225 call (partial) dsiDim _mt[243] call_tmp[657581]) i[129253]))
                unknown call_tmp[657595] "expr temp" "maybe param" "maybe type" "temp"
                (657598 'move' call_tmp[657595](129237 call ranges[129192] i[129253]))
                unknown call_tmp[657600] "expr temp" "maybe param" "maybe type" "temp"
                (657603 'move' call_tmp[657600](129239 call(129231 call (partial) boundsCheck _mt[243] call_tmp[657588]) call_tmp[657595]))
                (566085 'move' tmp[566083](425388 call isTrue call_tmp[657600]))
                (566090 'move' tmp[566075](566087 '_paramFoldLogical' tmp[566076] tmp[566083]))
              }
              {
                (566095 'move' tmp[566075](566092 '_paramFoldLogical' tmp[566076] 0))
              }
              (129249 call = tmp[129241] tmp[566075])
              (480133 'end of statement' i[129253] i[129253])
            }
          }
        }
        label _unused_continueLabel[129258]
        label _breakLabel[129257]
      }
      unknown call_tmp[657605] "expr temp" "maybe param" "maybe type" "temp"
      (657608 'move' call_tmp[657605](129292 call == ok[129208] 0))
      unknown call_tmp[657610] "expr temp" "maybe param" "maybe type" "temp"
      (657613 'move' call_tmp[657610](129695 call _cond_test call_tmp[657605]))
      if call_tmp[657610]
      {
        unknown call_tmp[657617] "expr temp" "maybe param" "maybe type" "temp"
        (657620 'move' call_tmp[657617](383870 call rank _mt[243] this[133648]))
        unknown call_tmp[657622] "expr temp" "maybe param" "maybe type" "temp"
        (657625 'move' call_tmp[657622](129296 call == call_tmp[657617] 1))
        unknown call_tmp[657627] "expr temp" "maybe param" "maybe type" "temp"
        (657630 'move' call_tmp[657627](129690 call _cond_test call_tmp[657622]))
        if call_tmp[657627]
        {
          unknown call_tmp[657632] "expr temp" "maybe param" "maybe type" "temp"
          (657635 'move' call_tmp[657632](129337 call ranges[129192] 0))
          unknown call_tmp[657639] "expr temp" "maybe param" "maybe type" "temp"
          (657642 'move' call_tmp[657639](129340 call dom _mt[243] value[129197]))
          unknown call_tmp[657646] "expr temp" "maybe param" "maybe type" "temp"
          (657649 'move' call_tmp[657646](129348 call(129343 call (partial) dsiDim _mt[243] call_tmp[657639]) 0))
          (129349 call halt "array slice out of bounds\n" "note: slice index was " call_tmp[657632] " but array bounds are " call_tmp[657646])
        }
        {
          unknown istr[129369] "dead at end of block" "insert auto destroy"
          (542986 'init var' istr[129369] "")
          (129372 'end of statement')
          unknown bstr[129391] "dead at end of block" "insert auto destroy"
          (542988 'init var' bstr[129391] "")
          (129394 'end of statement')
          {
            unknown i[129450] "dead at end of block" "insert auto destroy"
            (542990 'init var' i[129450] 0)
            (480137 'end of statement')
            unknown tmp[129451] "maybe param" "temp"
            unknown call_tmp[657653] "expr temp" "maybe param" "maybe type" "temp"
            (657656 'move' call_tmp[657653](383875 call rank _mt[243] this[133648]))
            unknown call_tmp[657658] "expr temp" "maybe param" "maybe type" "temp"
            (657661 'move' call_tmp[657658](129398 call - call_tmp[657653] 1))
            (129463 'move' tmp[129451](129461 call chpl_compute_low_param_loop_bound 0 call_tmp[657658]))
            unknown tmp[129452] "maybe param" "temp"
            unknown call_tmp[657665] "expr temp" "maybe param" "maybe type" "temp"
            (657668 'move' call_tmp[657665](383887 call rank _mt[243] this[133648]))
            unknown call_tmp[657670] "expr temp" "maybe param" "maybe type" "temp"
            (657673 'move' call_tmp[657670](129468 call - call_tmp[657665] 1))
            (129473 'move' tmp[129452](129471 call chpl_compute_high_param_loop_bound 0 call_tmp[657670]))
            unknown tmp[129453] "maybe param" "temp"
            (129476 'move' tmp[129453] 1)
            ParamForLoop[129478]
            { i[129450] tmp[129451] tmp[129452] tmp[129453]
              {
                unknown call_tmp[657675] "expr temp" "maybe param" "maybe type" "temp"
                (657678 'move' call_tmp[657675](129404 call != i[129450] 0))
                unknown call_tmp[657680] "expr temp" "maybe param" "maybe type" "temp"
                (657683 'move' call_tmp[657680](129417 call _cond_test call_tmp[657675]))
                if call_tmp[657680]
                {
                  (129408 call += istr[129369] ", ")
                  (480138 'end of statement' istr[129369])
                  (129414 call += bstr[129391] ", ")
                  (480140 'end of statement' bstr[129391])
                }
                unknown call_tmp[657685] "expr temp" "maybe param" "maybe type" "temp"
                (657688 'move' call_tmp[657685](129426 call ranges[129192] i[129450]))
                unknown call_tmp[657690] "expr temp" "maybe param" "maybe type" "temp"
                (657693 'move' call_tmp[657690](129428 call _cast string[26] call_tmp[657685]))
                (129430 call += istr[129369] call_tmp[657690])
                (480142 'end of statement' istr[129369] i[129450])
                unknown call_tmp[657697] "expr temp" "maybe param" "maybe type" "temp"
                (657700 'move' call_tmp[657697](129435 call dom _mt[243] value[129197]))
                unknown call_tmp[657704] "expr temp" "maybe param" "maybe type" "temp"
                (657707 'move' call_tmp[657704](129443 call(129438 call (partial) dsiDim _mt[243] call_tmp[657697]) i[129450]))
                unknown call_tmp[657709] "expr temp" "maybe param" "maybe type" "temp"
                (657712 'move' call_tmp[657709](129445 call _cast string[26] call_tmp[657704]))
                (129447 call += bstr[129391] call_tmp[657709])
                (480145 'end of statement' bstr[129391] i[129450])
              }
            }
            label _unused_continueLabel[129455]
            label _breakLabel[129454]
          }
          unknown dimstr[129504] "dead at end of block" "insert auto destroy"
          (542992 'init var' dimstr[129504] "")
          (129507 'end of statement')
          {
            unknown i[129624] "dead at end of block" "insert auto destroy"
            (542994 'init var' i[129624] 0)
            (480148 'end of statement')
            unknown tmp[129625] "maybe param" "temp"
            unknown call_tmp[657716] "expr temp" "maybe param" "maybe type" "temp"
            (657719 'move' call_tmp[657716](383891 call rank _mt[243] this[133648]))
            unknown call_tmp[657721] "expr temp" "maybe param" "maybe type" "temp"
            (657724 'move' call_tmp[657721](129511 call - call_tmp[657716] 1))
            (129637 'move' tmp[129625](129635 call chpl_compute_low_param_loop_bound 0 call_tmp[657721]))
            unknown tmp[129626] "maybe param" "temp"
            unknown call_tmp[657728] "expr temp" "maybe param" "maybe type" "temp"
            (657731 'move' call_tmp[657728](383904 call rank _mt[243] this[133648]))
            unknown call_tmp[657733] "expr temp" "maybe param" "maybe type" "temp"
            (657736 'move' call_tmp[657733](129642 call - call_tmp[657728] 1))
            (129647 'move' tmp[129626](129645 call chpl_compute_high_param_loop_bound 0 call_tmp[657733]))
            unknown tmp[129627] "maybe param" "temp"
            (129650 'move' tmp[129627] 1)
            ParamForLoop[129652]
            { i[129624] tmp[129625] tmp[129626] tmp[129627]
              {
                unknown call_tmp[657740] "expr temp" "maybe param" "maybe type" "temp"
                (657743 'move' call_tmp[657740](129516 call dom _mt[243] value[129197]))
                unknown call_tmp[657747] "expr temp" "maybe param" "maybe type" "temp"
                (657750 'move' call_tmp[657747](129524 call(129519 call (partial) dsiDim _mt[243] call_tmp[657740]) i[129624]))
                unknown call_tmp[657754] "expr temp" "maybe param" "maybe type" "temp"
                (657757 'move' call_tmp[657754](129531 call ranges[129192] i[129624]))
                unknown call_tmp[657759] "expr temp" "maybe param" "maybe type" "temp"
                (657762 'move' call_tmp[657759](129533 call(129525 call (partial) boundsCheck _mt[243] call_tmp[657747]) call_tmp[657754]))
                unknown call_tmp[657764] "expr temp" "maybe param" "maybe type" "temp"
                (657767 'move' call_tmp[657764](129534 call ! call_tmp[657759]))
                unknown call_tmp[657769] "expr temp" "maybe param" "maybe type" "temp"
                (657772 'move' call_tmp[657769](129619 call _cond_test call_tmp[657764]))
                if call_tmp[657769]
                {
                  unknown call_tmp[657774] "expr temp" "maybe param" "maybe type" "temp"
                  (657777 'move' call_tmp[657774](129554 call == dimstr[129504] ""))
                  unknown call_tmp[657779] "expr temp" "maybe param" "maybe type" "temp"
                  (657782 'move' call_tmp[657779](129614 call _cond_test call_tmp[657774]))
                  if call_tmp[657779]
                  {
                    unknown call_tmp[657784] "expr temp" "maybe param" "maybe type" "temp"
                    (657787 'move' call_tmp[657784](129560 call _cast string[26] i[129624]))
                    unknown call_tmp[657789] "expr temp" "maybe param" "maybe type" "temp"
                    (657792 'move' call_tmp[657789](129562 call + "out of bounds in dimension " call_tmp[657784]))
                    unknown call_tmp[657794] "expr temp" "maybe param" "maybe type" "temp"
                    (657797 'move' call_tmp[657794](129581 call + call_tmp[657789] " because slice index "))
                    unknown call_tmp[657799] "expr temp" "maybe param" "maybe type" "temp"
                    (657802 'move' call_tmp[657799](129586 call ranges[129192] i[129624]))
                    unknown call_tmp[657804] "expr temp" "maybe param" "maybe type" "temp"
                    (657807 'move' call_tmp[657804](129588 call _cast string[26] call_tmp[657799]))
                    unknown call_tmp[657809] "expr temp" "maybe param" "maybe type" "temp"
                    (657812 'move' call_tmp[657809](129590 call + call_tmp[657794] call_tmp[657804]))
                    unknown call_tmp[657814] "expr temp" "maybe param" "maybe type" "temp"
                    (657817 'move' call_tmp[657814](129593 call + call_tmp[657809] " is not in "))
                    unknown call_tmp[657821] "expr temp" "maybe param" "maybe type" "temp"
                    (657824 'move' call_tmp[657821](129596 call dom _mt[243] value[129197]))
                    unknown call_tmp[657828] "expr temp" "maybe param" "maybe type" "temp"
                    (657831 'move' call_tmp[657828](129604 call(129599 call (partial) dsiDim _mt[243] call_tmp[657821]) i[129624]))
                    unknown call_tmp[657833] "expr temp" "maybe param" "maybe type" "temp"
                    (657836 'move' call_tmp[657833](129606 call _cast string[26] call_tmp[657828]))
                    unknown call_tmp[657838] "expr temp" "maybe param" "maybe type" "temp"
                    (657841 'move' call_tmp[657838](129608 call + call_tmp[657814] call_tmp[657833]))
                    (129610 call = dimstr[129504] call_tmp[657838])
                    (480149 'end of statement' dimstr[129504] i[129624] i[129624] i[129624])
                  }
                }
              }
            }
            label _unused_continueLabel[129629]
            label _breakLabel[129628]
          }
          (129688 call halt "array slice out of bounds\n" "note: slice index was (" istr[129369] ") " "but array bounds are (" bstr[129391] ")\n" "note: " dimstr[129504])
          (480154 'end of statement' istr[129369] bstr[129391] dimstr[129504])
        }
      }
    }
    (517875 return _void[55])
  }
  where {
    (129202 call chpl__isTupleOfRanges ranges[129192])
  }
  function _array[133594](?).this[129722](arg _mt[133654]:_MT[238], ref arg this[133652]:_array[133594](?), arg i[129719] :
  unknown call_tmp[657845] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517879] "RVV" "temp"
    unknown call_tmp[657873] "maybe param" "maybe type" "temp"
    (657876 'move' call_tmp[657873](383915 call _value _mt[243] this[133652]))
    const value[129725] "dead at end of block" "const" "insert auto destroy"
    (542996 'init var' value[129725] call_tmp[657873])
    (129728 'end of statement')
    unknown call_tmp[657878] "expr temp" "maybe param" "maybe type" "temp"
    (657881 'move' call_tmp[657878](129738 call _cond_test 1))
    if call_tmp[657878]
    {
      (129736 call(383922 call (partial) checkAccess _mt[243] this[133652]) i[129719](value = value[129725]))
      (480158 'end of statement' value[129725])
    }
    unknown tmp[425405] "maybe param" "temp"
    (425416 'move' tmp[425405](129746 call isRectangularArr this[133652]))
    unknown call_tmp[657885] "expr temp" "maybe param" "maybe type" "temp"
    (657888 'move' call_tmp[657885](425418 call _cond_invalid tmp[425405]))
    if call_tmp[657885]
    {
      (425421 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566102] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566103] "maybe param" "temp"
    unknown call_tmp[657890] "expr temp" "maybe param" "maybe type" "temp"
    (657893 'move' call_tmp[657890](425406 call isTrue tmp[425405]))
    (566108 'move' tmp[566103](566106 call _cond_test call_tmp[657890]))
    if tmp[566103]
    {
      (566113 'move' tmp[566102](566110 '_paramFoldLogical' tmp[566103] 1))
    }
    {
      unknown tmp[566115] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657895] "expr temp" "maybe param" "maybe type" "temp"
      (657898 'move' call_tmp[657895](129750 call isSparseArr this[133652]))
      (566117 'move' tmp[566115](425410 call isTrue call_tmp[657895]))
      (566122 'move' tmp[566102](566119 '_paramFoldLogical' tmp[566103] tmp[566115]))
    }
    unknown call_tmp[657900] "expr temp" "maybe param" "maybe type" "temp"
    (657903 'move' call_tmp[657900](129774 call _cond_test tmp[566102]))
    if call_tmp[657900]
    {
      unknown call_tmp[657907] "expr temp" "maybe param" "maybe type" "temp"
      (657910 'move' call_tmp[657907](129759 call(129754 call (partial) dsiAccess _mt[243] value[129725]) i[129719]))
      (517884 'move' ret[517879](517883 'addr of' call_tmp[657907]))
      gotoReturn _end_this[517877] _end_this[517877]
      (480161 'end of statement' value[129725])
    }
    {
      unknown call_tmp[657914] "expr temp" "maybe param" "maybe type" "temp"
      (657917 'move' call_tmp[657914](129769 call i[129719] 0))
      unknown call_tmp[657919] "expr temp" "maybe param" "maybe type" "temp"
      (657922 'move' call_tmp[657919](129771 call(129763 call (partial) dsiAccess _mt[243] value[129725]) call_tmp[657914]))
      (517889 'move' ret[517879](517888 'addr of' call_tmp[657919]))
      gotoReturn _end_this[517877] _end_this[517877]
      (480163 'end of statement' value[129725])
    }
    label _end_this[517877]
    (517881 return ret[517879])
  }
  function _array[133594](?).this[129797](arg _mt[133658]:_MT[238], const arg this[133656]:_array[133594](?), arg i[129794] :
  unknown call_tmp[657926] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517895] "RVV" "temp"
    unknown call_tmp[657954] "maybe param" "maybe type" "temp"
    (657957 'move' call_tmp[657954](383936 call _value _mt[243] this[133656]))
    const value[129807] "dead at end of block" "const" "insert auto destroy"
    (542998 'init var' value[129807] call_tmp[657954])
    (129810 'end of statement')
    unknown call_tmp[657959] "expr temp" "maybe param" "maybe type" "temp"
    (657962 'move' call_tmp[657959](129820 call _cond_test 1))
    if call_tmp[657959]
    {
      (129818 call(383941 call (partial) checkAccess _mt[243] this[133656]) i[129794](value = value[129807]))
      (480165 'end of statement' value[129807])
    }
    unknown tmp[425426] "maybe param" "temp"
    (425437 'move' tmp[425426](129828 call isRectangularArr this[133656]))
    unknown call_tmp[657966] "expr temp" "maybe param" "maybe type" "temp"
    (657969 'move' call_tmp[657966](425439 call _cond_invalid tmp[425426]))
    if call_tmp[657966]
    {
      (425442 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566129] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566130] "maybe param" "temp"
    unknown call_tmp[657971] "expr temp" "maybe param" "maybe type" "temp"
    (657974 'move' call_tmp[657971](425427 call isTrue tmp[425426]))
    (566135 'move' tmp[566130](566133 call _cond_test call_tmp[657971]))
    if tmp[566130]
    {
      (566140 'move' tmp[566129](566137 '_paramFoldLogical' tmp[566130] 1))
    }
    {
      unknown tmp[566142] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657976] "expr temp" "maybe param" "maybe type" "temp"
      (657979 'move' call_tmp[657976](129832 call isSparseArr this[133656]))
      (566144 'move' tmp[566142](425431 call isTrue call_tmp[657976]))
      (566149 'move' tmp[566129](566146 '_paramFoldLogical' tmp[566130] tmp[566142]))
    }
    unknown call_tmp[657981] "expr temp" "maybe param" "maybe type" "temp"
    (657984 'move' call_tmp[657981](129856 call _cond_test tmp[566129]))
    if call_tmp[657981]
    {
      unknown call_tmp[657988] "expr temp" "maybe param" "maybe type" "temp"
      (657991 'move' call_tmp[657988](129841 call(129836 call (partial) dsiAccess _mt[243] value[129807]) i[129794]))
      (517900 'move' ret[517895](517899 'deref' call_tmp[657988]))
      gotoReturn _end_this[517893] _end_this[517893]
      (480168 'end of statement' value[129807])
    }
    {
      unknown call_tmp[657995] "expr temp" "maybe param" "maybe type" "temp"
      (657998 'move' call_tmp[657995](129851 call i[129794] 0))
      unknown call_tmp[658000] "expr temp" "maybe param" "maybe type" "temp"
      (658003 'move' call_tmp[658000](129853 call(129845 call (partial) dsiAccess _mt[243] value[129807]) call_tmp[657995]))
      (517905 'move' ret[517895](517904 'deref' call_tmp[658000]))
      gotoReturn _end_this[517893] _end_this[517893]
      (480170 'end of statement' value[129807])
    }
    label _end_this[517893]
    (517897 return ret[517895])
  }
  where {
    unknown call_tmp[658007] "expr temp" "maybe param" "maybe type" "temp"
    (658010 'move' call_tmp[658007](359806 call _value _mt[243] this[133656]))
    unknown call_tmp[658014] "expr temp" "maybe param" "maybe type" "temp"
    (658017 'move' call_tmp[658014](129801 call eltType _mt[243] call_tmp[658007]))
    (129805 call shouldReturnRvalueByValue call_tmp[658014])
  }
  function _array[133594](?).this[129880](arg _mt[133662]:_MT[238], const arg this[133660]:_array[133594](?), arg i[129877] :
  unknown call_tmp[658021] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517911] "RVV" "temp"
    unknown call_tmp[658049] "maybe param" "maybe type" "temp"
    (658052 'move' call_tmp[658049](383955 call _value _mt[243] this[133660]))
    const value[129890] "dead at end of block" "const" "insert auto destroy"
    (543000 'init var' value[129890] call_tmp[658049])
    (129893 'end of statement')
    unknown call_tmp[658054] "expr temp" "maybe param" "maybe type" "temp"
    (658057 'move' call_tmp[658054](129903 call _cond_test 1))
    if call_tmp[658054]
    {
      (129901 call(383960 call (partial) checkAccess _mt[243] this[133660]) i[129877](value = value[129890]))
      (480172 'end of statement' value[129890])
    }
    unknown tmp[425447] "maybe param" "temp"
    (425458 'move' tmp[425447](129911 call isRectangularArr this[133660]))
    unknown call_tmp[658061] "expr temp" "maybe param" "maybe type" "temp"
    (658064 'move' call_tmp[658061](425460 call _cond_invalid tmp[425447]))
    if call_tmp[658061]
    {
      (425463 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566156] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566157] "maybe param" "temp"
    unknown call_tmp[658066] "expr temp" "maybe param" "maybe type" "temp"
    (658069 'move' call_tmp[658066](425448 call isTrue tmp[425447]))
    (566162 'move' tmp[566157](566160 call _cond_test call_tmp[658066]))
    if tmp[566157]
    {
      (566167 'move' tmp[566156](566164 '_paramFoldLogical' tmp[566157] 1))
    }
    {
      unknown tmp[566169] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658071] "expr temp" "maybe param" "maybe type" "temp"
      (658074 'move' call_tmp[658071](129915 call isSparseArr this[133660]))
      (566171 'move' tmp[566169](425452 call isTrue call_tmp[658071]))
      (566176 'move' tmp[566156](566173 '_paramFoldLogical' tmp[566157] tmp[566169]))
    }
    unknown call_tmp[658076] "expr temp" "maybe param" "maybe type" "temp"
    (658079 'move' call_tmp[658076](129939 call _cond_test tmp[566156]))
    if call_tmp[658076]
    {
      unknown call_tmp[658083] "expr temp" "maybe param" "maybe type" "temp"
      (658086 'move' call_tmp[658083](129924 call(129919 call (partial) dsiAccess _mt[243] value[129890]) i[129877]))
      (517916 'move' ret[517911](517915 'addr of' call_tmp[658083]))
      gotoReturn _end_this[517909] _end_this[517909]
      (480175 'end of statement' value[129890])
    }
    {
      unknown call_tmp[658090] "expr temp" "maybe param" "maybe type" "temp"
      (658093 'move' call_tmp[658090](129934 call i[129877] 0))
      unknown call_tmp[658095] "expr temp" "maybe param" "maybe type" "temp"
      (658098 'move' call_tmp[658095](129936 call(129928 call (partial) dsiAccess _mt[243] value[129890]) call_tmp[658090]))
      (517921 'move' ret[517911](517920 'addr of' call_tmp[658095]))
      gotoReturn _end_this[517909] _end_this[517909]
      (480177 'end of statement' value[129890])
    }
    label _end_this[517909]
    (517913 return ret[517911])
  }
  where {
    unknown call_tmp[658102] "expr temp" "maybe param" "maybe type" "temp"
    (658105 'move' call_tmp[658102](359816 call _value _mt[243] this[133660]))
    unknown call_tmp[658109] "expr temp" "maybe param" "maybe type" "temp"
    (658112 'move' call_tmp[658109](129884 call eltType _mt[243] call_tmp[658102]))
    (129888 call shouldReturnRvalueByConstRef call_tmp[658109])
  }
  function _array[133594](?).this[129962](arg _mt[133666]:_MT[238], ref arg this[133664]:_array[133594](?), arg i[129958] ... :
  unknown call_tmp[658116] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517927] "RVV" "temp"
    unknown call_tmp[658132] "expr temp" "maybe param" "maybe type" "temp"
    (658135 'move' call_tmp[658132](129967 call this[133664] i[129958]))
    (517932 'move' ret[517927](517931 'addr of' call_tmp[658132]))
    (517929 return ret[517927])
  }
  function _array[133594](?).this[129987](arg _mt[133670]:_MT[238], const arg this[133668]:_array[133594](?), arg i[129983] ... :
  unknown call_tmp[658139] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517936] "RVV" "temp"
    unknown call_tmp[658155] "expr temp" "maybe param" "maybe type" "temp"
    (658158 'move' call_tmp[658155](129999 call this[133668] i[129983]))
    (517941 'move' ret[517936](517940 'deref' call_tmp[658155]))
    (517938 return ret[517936])
  }
  where {
    unknown call_tmp[658162] "expr temp" "maybe param" "maybe type" "temp"
    (658165 'move' call_tmp[658162](359830 call _value _mt[243] this[133668]))
    unknown call_tmp[658169] "expr temp" "maybe param" "maybe type" "temp"
    (658172 'move' call_tmp[658169](129991 call eltType _mt[243] call_tmp[658162]))
    (129995 call shouldReturnRvalueByValue call_tmp[658169])
  }
  function _array[133594](?).this[130020](arg _mt[133674]:_MT[238], const arg this[133672]:_array[133594](?), arg i[130016] ... :
  unknown call_tmp[658176] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517945] "RVV" "temp"
    unknown call_tmp[658192] "expr temp" "maybe param" "maybe type" "temp"
    (658195 'move' call_tmp[658192](130032 call this[133672] i[130016]))
    (517950 'move' ret[517945](517949 'addr of' call_tmp[658192]))
    (517947 return ret[517945])
  }
  where {
    unknown call_tmp[658199] "expr temp" "maybe param" "maybe type" "temp"
    (658202 'move' call_tmp[658199](359838 call _value _mt[243] this[133672]))
    unknown call_tmp[658206] "expr temp" "maybe param" "maybe type" "temp"
    (658209 'move' call_tmp[658206](130024 call eltType _mt[243] call_tmp[658199]))
    (130028 call shouldReturnRvalueByConstRef call_tmp[658206])
  }
  function _array[133594](?).localAccess[130054](arg _mt[133678]:_MT[238], ref arg this[133676]:_array[133594](?), arg i[130051] :
  unknown call_tmp[658213] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[517954] "RVV" "temp"
    unknown call_tmp[658241] "maybe param" "maybe type" "temp"
    (658244 'move' call_tmp[658241](383992 call _value _mt[243] this[133676]))
    const value[130057] "dead at end of block" "const" "insert auto destroy"
    (543002 'init var' value[130057] call_tmp[658241])
    (130060 'end of statement')
    unknown call_tmp[658246] "expr temp" "maybe param" "maybe type" "temp"
    (658249 'move' call_tmp[658246](130070 call _cond_test 1))
    if call_tmp[658246]
    {
      (130068 call(383997 call (partial) checkAccess _mt[243] this[133676]) i[130051](value = value[130057]))
      (480182 'end of statement' value[130057])
    }
    unknown tmp[425468] "maybe param" "temp"
    (425479 'move' tmp[425468](130078 call isRectangularArr this[133676]))
    unknown call_tmp[658253] "expr temp" "maybe param" "maybe type" "temp"
    (658256 'move' call_tmp[658253](425481 call _cond_invalid tmp[425468]))
    if call_tmp[658253]
    {
      (425484 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566183] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566184] "maybe param" "temp"
    unknown call_tmp[658258] "expr temp" "maybe param" "maybe type" "temp"
    (658261 'move' call_tmp[658258](425469 call isTrue tmp[425468]))
    (566189 'move' tmp[566184](566187 call _cond_test call_tmp[658258]))
    if tmp[566184]
    {
      (566194 'move' tmp[566183](566191 '_paramFoldLogical' tmp[566184] 1))
    }
    {
      unknown tmp[566196] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658263] "expr temp" "maybe param" "maybe type" "temp"
      (658266 'move' call_tmp[658263](130082 call isSparseArr this[133676]))
      (566198 'move' tmp[566196](425473 call isTrue call_tmp[658263]))
      (566203 'move' tmp[566183](566200 '_paramFoldLogical' tmp[566184] tmp[566196]))
    }
    unknown call_tmp[658268] "expr temp" "maybe param" "maybe type" "temp"
    (658271 'move' call_tmp[658268](130108 call _cond_test tmp[566183]))
    if call_tmp[658268]
    {
      unknown call_tmp[658275] "expr temp" "maybe param" "maybe type" "temp"
      (658278 'move' call_tmp[658275](130093 call(130088 call (partial) dsiLocalAccess _mt[243] value[130057]) i[130051]))
      (517959 'move' ret[517954](517958 'addr of' call_tmp[658275]))
      gotoReturn _end_localAccess[517952] _end_localAccess[517952]
      (480185 'end of statement' value[130057])
    }
    {
      unknown call_tmp[658282] "expr temp" "maybe param" "maybe type" "temp"
      (658285 'move' call_tmp[658282](130103 call i[130051] 0))
      unknown call_tmp[658287] "expr temp" "maybe param" "maybe type" "temp"
      (658290 'move' call_tmp[658287](130105 call(130097 call (partial) dsiLocalAccess _mt[243] value[130057]) call_tmp[658282]))
      (517964 'move' ret[517954](517963 'addr of' call_tmp[658287]))
      gotoReturn _end_localAccess[517952] _end_localAccess[517952]
      (480187 'end of statement' value[130057])
    }
    label _end_localAccess[517952]
    (517956 return ret[517954])
  }
  function _array[133594](?).localAccess[130131](arg _mt[133682]:_MT[238], const arg this[133680]:_array[133594](?), arg i[130128] :
  unknown call_tmp[658294] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517970] "RVV" "temp"
    unknown call_tmp[658322] "maybe param" "maybe type" "temp"
    (658325 'move' call_tmp[658322](384011 call _value _mt[243] this[133680]))
    const value[130141] "dead at end of block" "const" "insert auto destroy"
    (543004 'init var' value[130141] call_tmp[658322])
    (130144 'end of statement')
    unknown call_tmp[658327] "expr temp" "maybe param" "maybe type" "temp"
    (658330 'move' call_tmp[658327](130154 call _cond_test 1))
    if call_tmp[658327]
    {
      (130152 call(384016 call (partial) checkAccess _mt[243] this[133680]) i[130128](value = value[130141]))
      (480189 'end of statement' value[130141])
    }
    unknown tmp[425489] "maybe param" "temp"
    (425500 'move' tmp[425489](130162 call isRectangularArr this[133680]))
    unknown call_tmp[658334] "expr temp" "maybe param" "maybe type" "temp"
    (658337 'move' call_tmp[658334](425502 call _cond_invalid tmp[425489]))
    if call_tmp[658334]
    {
      (425505 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566210] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566211] "maybe param" "temp"
    unknown call_tmp[658339] "expr temp" "maybe param" "maybe type" "temp"
    (658342 'move' call_tmp[658339](425490 call isTrue tmp[425489]))
    (566216 'move' tmp[566211](566214 call _cond_test call_tmp[658339]))
    if tmp[566211]
    {
      (566221 'move' tmp[566210](566218 '_paramFoldLogical' tmp[566211] 1))
    }
    {
      unknown tmp[566223] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658344] "expr temp" "maybe param" "maybe type" "temp"
      (658347 'move' call_tmp[658344](130166 call isSparseArr this[133680]))
      (566225 'move' tmp[566223](425494 call isTrue call_tmp[658344]))
      (566230 'move' tmp[566210](566227 '_paramFoldLogical' tmp[566211] tmp[566223]))
    }
    unknown call_tmp[658349] "expr temp" "maybe param" "maybe type" "temp"
    (658352 'move' call_tmp[658349](130190 call _cond_test tmp[566210]))
    if call_tmp[658349]
    {
      unknown call_tmp[658356] "expr temp" "maybe param" "maybe type" "temp"
      (658359 'move' call_tmp[658356](130175 call(130170 call (partial) dsiLocalAccess _mt[243] value[130141]) i[130128]))
      (517975 'move' ret[517970](517974 'deref' call_tmp[658356]))
      gotoReturn _end_localAccess[517968] _end_localAccess[517968]
      (480192 'end of statement' value[130141])
    }
    {
      unknown call_tmp[658363] "expr temp" "maybe param" "maybe type" "temp"
      (658366 'move' call_tmp[658363](130185 call i[130128] 0))
      unknown call_tmp[658368] "expr temp" "maybe param" "maybe type" "temp"
      (658371 'move' call_tmp[658368](130187 call(130179 call (partial) dsiLocalAccess _mt[243] value[130141]) call_tmp[658363]))
      (517980 'move' ret[517970](517979 'deref' call_tmp[658368]))
      gotoReturn _end_localAccess[517968] _end_localAccess[517968]
      (480194 'end of statement' value[130141])
    }
    label _end_localAccess[517968]
    (517972 return ret[517970])
  }
  where {
    unknown call_tmp[658375] "expr temp" "maybe param" "maybe type" "temp"
    (658378 'move' call_tmp[658375](359852 call _value _mt[243] this[133680]))
    unknown call_tmp[658382] "expr temp" "maybe param" "maybe type" "temp"
    (658385 'move' call_tmp[658382](130135 call eltType _mt[243] call_tmp[658375]))
    (130139 call shouldReturnRvalueByValue call_tmp[658382])
  }
  function _array[133594](?).localAccess[130214](arg _mt[133686]:_MT[238], const arg this[133684]:_array[133594](?), arg i[130211] :
  unknown call_tmp[658389] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517986] "RVV" "temp"
    unknown call_tmp[658417] "maybe param" "maybe type" "temp"
    (658420 'move' call_tmp[658417](384030 call _value _mt[243] this[133684]))
    const value[130224] "dead at end of block" "const" "insert auto destroy"
    (543006 'init var' value[130224] call_tmp[658417])
    (130227 'end of statement')
    unknown call_tmp[658422] "expr temp" "maybe param" "maybe type" "temp"
    (658425 'move' call_tmp[658422](130237 call _cond_test 1))
    if call_tmp[658422]
    {
      (130235 call(384035 call (partial) checkAccess _mt[243] this[133684]) i[130211](value = value[130224]))
      (480196 'end of statement' value[130224])
    }
    unknown tmp[425510] "maybe param" "temp"
    (425521 'move' tmp[425510](130245 call isRectangularArr this[133684]))
    unknown call_tmp[658429] "expr temp" "maybe param" "maybe type" "temp"
    (658432 'move' call_tmp[658429](425523 call _cond_invalid tmp[425510]))
    if call_tmp[658429]
    {
      (425526 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566238] "maybe param" "temp"
    unknown call_tmp[658434] "expr temp" "maybe param" "maybe type" "temp"
    (658437 'move' call_tmp[658434](425511 call isTrue tmp[425510]))
    (566243 'move' tmp[566238](566241 call _cond_test call_tmp[658434]))
    if tmp[566238]
    {
      (566248 'move' tmp[566237](566245 '_paramFoldLogical' tmp[566238] 1))
    }
    {
      unknown tmp[566250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658439] "expr temp" "maybe param" "maybe type" "temp"
      (658442 'move' call_tmp[658439](130249 call isSparseArr this[133684]))
      (566252 'move' tmp[566250](425515 call isTrue call_tmp[658439]))
      (566257 'move' tmp[566237](566254 '_paramFoldLogical' tmp[566238] tmp[566250]))
    }
    unknown call_tmp[658444] "expr temp" "maybe param" "maybe type" "temp"
    (658447 'move' call_tmp[658444](130273 call _cond_test tmp[566237]))
    if call_tmp[658444]
    {
      unknown call_tmp[658451] "expr temp" "maybe param" "maybe type" "temp"
      (658454 'move' call_tmp[658451](130258 call(130253 call (partial) dsiLocalAccess _mt[243] value[130224]) i[130211]))
      (517991 'move' ret[517986](517990 'addr of' call_tmp[658451]))
      gotoReturn _end_localAccess[517984] _end_localAccess[517984]
      (480199 'end of statement' value[130224])
    }
    {
      unknown call_tmp[658458] "expr temp" "maybe param" "maybe type" "temp"
      (658461 'move' call_tmp[658458](130268 call i[130211] 0))
      unknown call_tmp[658463] "expr temp" "maybe param" "maybe type" "temp"
      (658466 'move' call_tmp[658463](130270 call(130262 call (partial) dsiLocalAccess _mt[243] value[130224]) call_tmp[658458]))
      (517996 'move' ret[517986](517995 'addr of' call_tmp[658463]))
      gotoReturn _end_localAccess[517984] _end_localAccess[517984]
      (480201 'end of statement' value[130224])
    }
    label _end_localAccess[517984]
    (517988 return ret[517986])
  }
  where {
    unknown call_tmp[658470] "expr temp" "maybe param" "maybe type" "temp"
    (658473 'move' call_tmp[658470](359862 call _value _mt[243] this[133684]))
    unknown call_tmp[658477] "expr temp" "maybe param" "maybe type" "temp"
    (658480 'move' call_tmp[658477](130218 call eltType _mt[243] call_tmp[658470]))
    (130222 call shouldReturnRvalueByConstRef call_tmp[658477])
  }
  function _array[133594](?).localAccess[130296](arg _mt[133690]:_MT[238], ref arg this[133688]:_array[133594](?), arg i[130292] ... :
  unknown call_tmp[658484] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[518002] "RVV" "temp"
    unknown call_tmp[658502] "expr temp" "maybe param" "maybe type" "temp"
    (658505 'move' call_tmp[658502](130301 call(384051 call (partial) localAccess _mt[243] this[133688]) i[130292]))
    (518007 'move' ret[518002](518006 'addr of' call_tmp[658502]))
    (518004 return ret[518002])
  }
  function _array[133594](?).localAccess[130321](arg _mt[133694]:_MT[238], const arg this[133692]:_array[133594](?), arg i[130317] ... :
  unknown call_tmp[658509] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518011] "RVV" "temp"
    unknown call_tmp[658527] "expr temp" "maybe param" "maybe type" "temp"
    (658530 'move' call_tmp[658527](130333 call(384060 call (partial) localAccess _mt[243] this[133692]) i[130317]))
    (518016 'move' ret[518011](518015 'deref' call_tmp[658527]))
    (518013 return ret[518011])
  }
  where {
    unknown call_tmp[658534] "expr temp" "maybe param" "maybe type" "temp"
    (658537 'move' call_tmp[658534](359876 call _value _mt[243] this[133692]))
    unknown call_tmp[658541] "expr temp" "maybe param" "maybe type" "temp"
    (658544 'move' call_tmp[658541](130325 call eltType _mt[243] call_tmp[658534]))
    (130329 call shouldReturnRvalueByValue call_tmp[658541])
  }
  function _array[133594](?).localAccess[130354](arg _mt[133698]:_MT[238], const arg this[133696]:_array[133594](?), arg i[130350] ... :
  unknown call_tmp[658548] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518020] "RVV" "temp"
    unknown call_tmp[658566] "expr temp" "maybe param" "maybe type" "temp"
    (658569 'move' call_tmp[658566](130366 call(384069 call (partial) localAccess _mt[243] this[133696]) i[130350]))
    (518025 'move' ret[518020](518024 'addr of' call_tmp[658566]))
    (518022 return ret[518020])
  }
  where {
    unknown call_tmp[658573] "expr temp" "maybe param" "maybe type" "temp"
    (658576 'move' call_tmp[658573](359884 call _value _mt[243] this[133696]))
    unknown call_tmp[658580] "expr temp" "maybe param" "maybe type" "temp"
    (658583 'move' call_tmp[658580](130358 call eltType _mt[243] call_tmp[658573]))
    (130362 call shouldReturnRvalueByConstRef call_tmp[658580])
  }
  function _array[133594](?).this[130379](arg _mt[133702]:_MT[238], arg this[133700]:_array[133594](?), arg d[130376]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518029] "RVV" "temp"
    unknown call_tmp[658587] "expr temp" "maybe param" "maybe type" "temp"
    (658590 'move' call_tmp[658587](130382 call rank _mt[243] d[130376]))
    unknown call_tmp[658594] "expr temp" "maybe param" "maybe type" "temp"
    (658597 'move' call_tmp[658594](384075 call rank _mt[243] this[133700]))
    unknown call_tmp[658599] "expr temp" "maybe param" "maybe type" "temp"
    (658602 'move' call_tmp[658599](130386 call != call_tmp[658587] call_tmp[658594]))
    unknown call_tmp[658604] "expr temp" "maybe param" "maybe type" "temp"
    (658607 'move' call_tmp[658604](130409 call _cond_test call_tmp[658599]))
    if call_tmp[658604]
    {
      (130407 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[658609] "expr temp" "maybe param" "maybe type" "temp"
    (658612 'move' call_tmp[658609](130422 call _cond_test 1))
    if call_tmp[658609]
    {
      unknown call_tmp[658618] "expr temp" "maybe param" "maybe type" "temp"
      (658621 'move' call_tmp[658618](384085 call _value _mt[243] this[133700]))
      (130420 call(384080 call (partial) checkSlice _mt[243] this[133700]) d[130376] call_tmp[658618])
    }
    const tmp[130471] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566264] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566265] "maybe param" "temp"
    unknown call_tmp[658625] "expr temp" "maybe param" "maybe type" "temp"
    (658628 'move' call_tmp[658625](359889 call _value _mt[243] this[133700]))
    unknown call_tmp[658632] "expr temp" "maybe param" "maybe type" "temp"
    (658635 'move' call_tmp[658632](130437 call(130433 call (partial) isSliceArrayView _mt[243] call_tmp[658625])))
    (566270 'move' tmp[566265](566268 call _cond_test call_tmp[658632]))
    if tmp[566265]
    {
      unknown tmp[566272] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658639] "expr temp" "maybe param" "maybe type" "temp"
      (658642 'move' call_tmp[658639](130439 call _value _mt[243] this[133700]))
      unknown call_tmp[658646] "expr temp" "maybe param" "maybe type" "temp"
      (658649 'move' call_tmp[658646](130442 call arr _mt[243] call_tmp[658639]))
      unknown call_tmp[658653] "expr temp" "maybe param" "maybe type" "temp"
      (658656 'move' call_tmp[658653](130446 call _value _mt[243] this[133700]))
      unknown call_tmp[658660] "expr temp" "maybe param" "maybe type" "temp"
      (658663 'move' call_tmp[658660](130451 call _ArrPid _mt[243] call_tmp[658653]))
      (566274 'move' tmp[566272](130455 call _build_tuple call_tmp[658646] call_tmp[658660]))
      (566279 'move' tmp[566264](566276 '_paramFoldLogical' tmp[566265] tmp[566272]))
    }
    {
      unknown tmp[566281] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658667] "expr temp" "maybe param" "maybe type" "temp"
      (658670 'move' call_tmp[658667](130458 call _value _mt[243] this[133700]))
      unknown call_tmp[658674] "expr temp" "maybe param" "maybe type" "temp"
      (658677 'move' call_tmp[658674](130462 call _pid _mt[243] this[133700]))
      (566283 'move' tmp[566281](130466 call _build_tuple call_tmp[658667] call_tmp[658674]))
      (566288 'move' tmp[566264](566285 '_paramFoldLogical' tmp[566265] tmp[566281]))
    }
    (543008 'init var' tmp[130471] tmp[566264])
    (130478 call _check_tuple_var_decl tmp[130471] 2)
    (480208 'end of statement')
    unknown call_tmp[658679] "maybe param" "maybe type" "temp"
    (658682 'move' call_tmp[658679](130472 call tmp[130471] 0))
    const arr[130427] "dead at end of block" "const" "insert auto destroy"
    (543010 'init var' arr[130427] call_tmp[658679])
    unknown call_tmp[658684] "maybe param" "maybe type" "temp"
    (658687 'move' call_tmp[658684](130475 call tmp[130471] 1))
    const arrpid[130429] "dead at end of block" "const" "insert auto destroy"
    (543012 'init var' arrpid[130429] call_tmp[658684])
    (130483 'end of statement')
    unknown call_tmp[658691] "expr temp" "maybe param" "maybe type" "temp"
    (658694 'move' call_tmp[658691](130489 call eltType _mt[243] this[133700]))
    unknown call_tmp[658698] "expr temp" "maybe param" "maybe type" "temp"
    (658701 'move' call_tmp[658698](130495 call _pid _mt[243] d[130376]))
    unknown call_tmp[658705] "expr temp" "maybe param" "maybe type" "temp"
    (658708 'move' call_tmp[658705](130500 call _instance _mt[243] d[130376]))
    unknown call_tmp[658710] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658713 'move' call_tmp[658710](747901 'new' ArrayViewSliceArr[384089](?)(eltType = call_tmp[658691])(_DomPid = call_tmp[658698])(dom = call_tmp[658705])(_ArrPid = arrpid[130429])(_ArrInstance = arr[130427])(_chpl_manager = unmanaged[220](?))))
    unknown a[130509] "dead at end of block" "insert auto destroy"
    (543014 'init var' a[130509] call_tmp[658710])
    (130512 'end of statement' arrpid[130429] arr[130427])
    unknown call_tmp[658717] "expr temp" "maybe param" "maybe type" "temp"
    (658720 'move' call_tmp[658717](130514 call _value _mt[243] d[130376]))
    (130526 call(130517 call (partial) add_arr _mt[243] call_tmp[658717]) a[130509](locking = 1)(addToList = 0))
    (480211 'end of statement' a[130509])
    unknown call_tmp[658724] "expr temp" "maybe param" "maybe type" "temp"
    (658727 'move' call_tmp[658724](130531 call _newArray a[130509]))
    (518034 'move' ret[518029](518033 'deref' call_tmp[658724]))
    gotoReturn _end_this[518027] _end_this[518027]
    (480213 'end of statement' a[130509])
    label _end_this[518027]
    (518031 return ret[518029])
  }
  function _array[133594](?).this[130542](arg _mt[133706]:_MT[238], arg this[133704]:_array[133594](?), arg ranges[130539]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518040] "RVV" "temp"
    unknown call_tmp[658731] "expr temp" "maybe param" "maybe type" "temp"
    (658734 'move' call_tmp[658731](130557 call _cond_test 1))
    if call_tmp[658731]
    {
      unknown call_tmp[658740] "expr temp" "maybe param" "maybe type" "temp"
      (658743 'move' call_tmp[658740](384108 call _value _mt[243] this[133704]))
      (130555 call(384103 call (partial) checkSlice _mt[243] this[133704])(130551 'expand_tuple' ranges[130539])(value = call_tmp[658740]))
    }
    unknown call_tmp[658747] "maybe param" "maybe type" "temp"
    (658750 'move' call_tmp[658747](130567 call(384112 call (partial) _dom _mt[243] this[133704])(130565 'expand_tuple' ranges[130539])))
    unknown d[130568] "dead at end of block" "no auto destroy"
    (543016 'init var' d[130568] call_tmp[658747])
    (130571 'end of statement')
    unknown call_tmp[658754] "expr temp" "maybe param" "maybe type" "temp"
    (658757 'move' call_tmp[658754](130573 call _value _mt[243] d[130568]))
    unknown call_tmp[658761] "expr temp" "maybe param" "maybe type" "temp"
    (658764 'move' call_tmp[658761](130578 call _free_when_no_arrs _mt[243] call_tmp[658754]))
    (130582 call = call_tmp[658761] 1)
    (480216 'end of statement' d[130568])
    const tmp[130627] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566295] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566296] "maybe param" "temp"
    unknown call_tmp[658768] "expr temp" "maybe param" "maybe type" "temp"
    (658771 'move' call_tmp[658768](359902 call _value _mt[243] this[133704]))
    unknown call_tmp[658775] "expr temp" "maybe param" "maybe type" "temp"
    (658778 'move' call_tmp[658775](130595 call(130591 call (partial) isSliceArrayView _mt[243] call_tmp[658768])))
    (566301 'move' tmp[566296](566299 call _cond_test call_tmp[658775]))
    if tmp[566296]
    {
      unknown tmp[566303] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658782] "expr temp" "maybe param" "maybe type" "temp"
      (658785 'move' call_tmp[658782](130597 call _value _mt[243] this[133704]))
      unknown call_tmp[658789] "expr temp" "maybe param" "maybe type" "temp"
      (658792 'move' call_tmp[658789](130600 call arr _mt[243] call_tmp[658782]))
      unknown call_tmp[658796] "expr temp" "maybe param" "maybe type" "temp"
      (658799 'move' call_tmp[658796](130604 call _value _mt[243] this[133704]))
      unknown call_tmp[658803] "expr temp" "maybe param" "maybe type" "temp"
      (658806 'move' call_tmp[658803](130607 call _ArrPid _mt[243] call_tmp[658796]))
      (566305 'move' tmp[566303](130611 call _build_tuple call_tmp[658789] call_tmp[658803]))
      (566310 'move' tmp[566295](566307 '_paramFoldLogical' tmp[566296] tmp[566303]))
    }
    {
      unknown tmp[566312] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658810] "expr temp" "maybe param" "maybe type" "temp"
      (658813 'move' call_tmp[658810](130614 call _value _mt[243] this[133704]))
      unknown call_tmp[658817] "expr temp" "maybe param" "maybe type" "temp"
      (658820 'move' call_tmp[658817](130618 call _pid _mt[243] this[133704]))
      (566314 'move' tmp[566312](130622 call _build_tuple call_tmp[658810] call_tmp[658817]))
      (566319 'move' tmp[566295](566316 '_paramFoldLogical' tmp[566296] tmp[566312]))
    }
    (543018 'init var' tmp[130627] tmp[566295])
    (130634 call _check_tuple_var_decl tmp[130627] 2)
    (480218 'end of statement')
    unknown call_tmp[658822] "maybe param" "maybe type" "temp"
    (658825 'move' call_tmp[658822](130628 call tmp[130627] 0))
    const arr[130585] "dead at end of block" "const" "insert auto destroy"
    (543020 'init var' arr[130585] call_tmp[658822])
    unknown call_tmp[658827] "maybe param" "maybe type" "temp"
    (658830 'move' call_tmp[658827](130631 call tmp[130627] 1))
    const arrpid[130587] "dead at end of block" "const" "insert auto destroy"
    (543022 'init var' arrpid[130587] call_tmp[658827])
    (130639 'end of statement')
    unknown call_tmp[658834] "expr temp" "maybe param" "maybe type" "temp"
    (658837 'move' call_tmp[658834](130645 call eltType _mt[243] this[133704]))
    unknown call_tmp[658841] "expr temp" "maybe param" "maybe type" "temp"
    (658844 'move' call_tmp[658841](130651 call _pid _mt[243] d[130568]))
    unknown call_tmp[658848] "expr temp" "maybe param" "maybe type" "temp"
    (658851 'move' call_tmp[658848](130656 call _instance _mt[243] d[130568]))
    unknown call_tmp[658853] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658856 'move' call_tmp[658853](747902 'new' ArrayViewSliceArr[384089](?)(eltType = call_tmp[658834])(_DomPid = call_tmp[658841])(dom = call_tmp[658848])(_ArrPid = arrpid[130587])(_ArrInstance = arr[130585])(_chpl_manager = unmanaged[220](?))))
    unknown a[130665] "dead at end of block" "insert auto destroy"
    (543024 'init var' a[130665] call_tmp[658853])
    (130668 'end of statement' d[130568] d[130568] arrpid[130587] arr[130585])
    unknown call_tmp[658860] "expr temp" "maybe param" "maybe type" "temp"
    (658863 'move' call_tmp[658860](130670 call _value _mt[243] d[130568]))
    (130682 call(130673 call (partial) add_arr _mt[243] call_tmp[658860]) a[130665](locking = 0)(addToList = 0))
    (480223 'end of statement' d[130568] a[130665])
    unknown call_tmp[658867] "expr temp" "maybe param" "maybe type" "temp"
    (658870 'move' call_tmp[658867](130687 call _newArray a[130665]))
    (518045 'move' ret[518040](518044 'deref' call_tmp[658867]))
    gotoReturn _end_this[518038] _end_this[518038]
    (480226 'end of statement' a[130665])
    label _end_this[518038]
    (518042 return ret[518040])
  }
  where {
    (130547 call chpl__isTupleOfRanges ranges[130539])
  }
  function _array[133594](?).this[130699](arg _mt[133710]:_MT[238], arg this[133708]:_array[133594](?), arg args[130696]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518051] "RVV" "temp"
    unknown call_tmp[658874] "expr temp" "maybe param" "maybe type" "temp"
    (658877 'move' call_tmp[658874](130718 call _cond_test 1))
    if call_tmp[658874]
    {
      (130716 call(384130 call (partial) checkRankChange _mt[243] this[133708]) args[130696])
    }
    unknown call_tmp[658883] "maybe param" "maybe type" "temp"
    (658886 'move' call_tmp[658883](130731 call(130725 call (partial) _dom _mt[243] this[133708])(130729 'expand_tuple' args[130696])))
    const rcdom[130732] "dead at end of block" "const" "insert auto destroy"
    (543026 'init var' rcdom[130732] call_tmp[658883])
    (130735 'end of statement')
    unknown call_tmp[658890] "expr temp" "maybe param" "maybe type" "temp"
    (658893 'move' call_tmp[658890](130742 call _value _mt[243] this[133708]))
    unknown call_tmp[658897] "expr temp" "maybe param" "maybe type" "temp"
    (658900 'move' call_tmp[658897](130746 call _pid _mt[243] this[133708]))
    unknown call_tmp[658902] "maybe param" "maybe type" "temp"
    (658905 'move' call_tmp[658902](130750 call _build_tuple call_tmp[658890] call_tmp[658897]))
    const tmp[130752] "dead at end of block" "const" "insert auto destroy" "temp"
    (543028 'init var' tmp[130752] call_tmp[658902])
    (130759 call _check_tuple_var_decl tmp[130752] 2)
    (480229 'end of statement')
    unknown call_tmp[658907] "maybe param" "maybe type" "temp"
    (658910 'move' call_tmp[658907](130753 call tmp[130752] 0))
    const arr[130736] "dead at end of block" "const" "insert auto destroy"
    (543030 'init var' arr[130736] call_tmp[658907])
    unknown call_tmp[658912] "maybe param" "maybe type" "temp"
    (658915 'move' call_tmp[658912](130756 call tmp[130752] 1))
    const arrpid[130738] "dead at end of block" "const" "insert auto destroy"
    (543032 'init var' arrpid[130738] call_tmp[658912])
    (130764 'end of statement')
    unknown call_tmp[658919] "expr temp" "maybe param" "maybe type" "temp"
    (658922 'move' call_tmp[658919](130770 call eltType _mt[243] this[133708]))
    unknown call_tmp[658926] "expr temp" "maybe param" "maybe type" "temp"
    (658929 'move' call_tmp[658926](130776 call _pid _mt[243] rcdom[130732]))
    unknown call_tmp[658933] "expr temp" "maybe param" "maybe type" "temp"
    (658936 'move' call_tmp[658933](130781 call _instance _mt[243] rcdom[130732]))
    unknown call_tmp[658940] "expr temp" "maybe param" "maybe type" "temp"
    (658943 'move' call_tmp[658940](130790 call _value _mt[243] rcdom[130732]))
    unknown call_tmp[658947] "expr temp" "maybe param" "maybe type" "temp"
    (658950 'move' call_tmp[658947](130793 call collapsedDim _mt[243] call_tmp[658940]))
    unknown call_tmp[658954] "expr temp" "maybe param" "maybe type" "temp"
    (658957 'move' call_tmp[658954](130798 call _value _mt[243] rcdom[130732]))
    unknown call_tmp[658961] "expr temp" "maybe param" "maybe type" "temp"
    (658964 'move' call_tmp[658961](130801 call idx _mt[243] call_tmp[658954]))
    unknown call_tmp[658966] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658969 'move' call_tmp[658966](747903 'new' ArrayViewRankChangeArr[384136](?)(eltType = call_tmp[658919])(_DomPid = call_tmp[658926])(dom = call_tmp[658933])(_ArrPid = arrpid[130738])(_ArrInstance = arr[130736])(collapsedDim = call_tmp[658947])(idx = call_tmp[658961])(_chpl_manager = unmanaged[220](?))))
    unknown a[130806] "dead at end of block" "insert auto destroy"
    (543034 'init var' a[130806] call_tmp[658966])
    (130809 'end of statement' rcdom[130732] rcdom[130732] arrpid[130738] arr[130736] rcdom[130732] rcdom[130732])
    unknown call_tmp[658973] "expr temp" "maybe param" "maybe type" "temp"
    (658976 'move' call_tmp[658973](130811 call _value _mt[243] rcdom[130732]))
    (130821 call(130814 call (partial) add_arr _mt[243] call_tmp[658973]) a[130806](locking = 0))
    (480236 'end of statement' rcdom[130732] a[130806])
    unknown call_tmp[658980] "expr temp" "maybe param" "maybe type" "temp"
    (658983 'move' call_tmp[658980](130826 call _newArray a[130806]))
    (518056 'move' ret[518051](518055 'deref' call_tmp[658980]))
    gotoReturn _end_this[518049] _end_this[518049]
    (480239 'end of statement' a[130806])
    label _end_this[518049]
    (518053 return ret[518051])
  }
  where {
    unknown call_tmp[658987] "expr temp" "maybe param" "maybe type" "temp"
    (658990 'move' call_tmp[658987](359914 call _value _mt[243] this[133708]))
    unknown call_tmp[658994] "expr temp" "maybe param" "maybe type" "temp"
    (658997 'move' call_tmp[658994](130705 call dom _mt[243] call_tmp[658987]))
    unknown call_tmp[659001] "expr temp" "maybe param" "maybe type" "temp"
    (659004 'move' call_tmp[659001](130708 call idxType _mt[243] call_tmp[658994]))
    (130711 call _validRankChangeArgs args[130696] call_tmp[659001])
  }
  function _array[133594](?).checkRankChange[130836](arg _mt[133714]:_MT[238], arg this[133712]:_array[133594](?), arg args[130834]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130917] "dead at end of block" "insert auto destroy"
      (543036 'init var' i[130917] 0)
      (480241 'end of statement')
      unknown tmp[130918] "maybe param" "temp"
      unknown call_tmp[659008] "expr temp" "maybe param" "maybe type" "temp"
      (659011 'move' call_tmp[659008](130840 call size _mt[243] args[130834]))
      unknown call_tmp[659013] "expr temp" "maybe param" "maybe type" "temp"
      (659016 'move' call_tmp[659013](130844 call - call_tmp[659008] 1))
      (130930 'move' tmp[130918](130928 call chpl_compute_low_param_loop_bound 0 call_tmp[659013]))
      unknown tmp[130919] "maybe param" "temp"
      unknown call_tmp[659020] "expr temp" "maybe param" "maybe type" "temp"
      (659023 'move' call_tmp[659020](130937 call size _mt[243] args[130834]))
      unknown call_tmp[659025] "expr temp" "maybe param" "maybe type" "temp"
      (659028 'move' call_tmp[659025](130935 call - call_tmp[659020] 1))
      (130943 'move' tmp[130919](130941 call chpl_compute_high_param_loop_bound 0 call_tmp[659025]))
      unknown tmp[130920] "maybe param" "temp"
      (130946 'move' tmp[130920] 1)
      ParamForLoop[130948]
      { i[130917] tmp[130918] tmp[130919] tmp[130920]
        unknown call_tmp[659032] "expr temp" "maybe param" "maybe type" "temp"
        (659035 'move' call_tmp[659032](359928 call _value _mt[243] this[133712]))
        unknown call_tmp[659039] "expr temp" "maybe param" "maybe type" "temp"
        (659042 'move' call_tmp[659039](130849 call dom _mt[243] call_tmp[659032]))
        unknown call_tmp[659046] "expr temp" "maybe param" "maybe type" "temp"
        (659049 'move' call_tmp[659046](130857 call(130852 call (partial) dsiDim _mt[243] call_tmp[659039]) i[130917]))
        unknown call_tmp[659053] "expr temp" "maybe param" "maybe type" "temp"
        (659056 'move' call_tmp[659053](130864 call args[130834] i[130917]))
        unknown call_tmp[659058] "expr temp" "maybe param" "maybe type" "temp"
        (659061 'move' call_tmp[659058](130866 call(130858 call (partial) boundsCheck _mt[243] call_tmp[659046]) call_tmp[659053]))
        unknown call_tmp[659063] "expr temp" "maybe param" "maybe type" "temp"
        (659066 'move' call_tmp[659063](130867 call ! call_tmp[659058]))
        unknown call_tmp[659068] "expr temp" "maybe param" "maybe type" "temp"
        (659071 'move' call_tmp[659068](130912 call _cond_test call_tmp[659063]))
        if call_tmp[659068]
        {
          unknown call_tmp[659073] "expr temp" "maybe param" "maybe type" "temp"
          (659076 'move' call_tmp[659073](130909 call args[130834] i[130917]))
          (130910 call halt "array slice out of bounds in dimension " i[130917] ": " call_tmp[659073])
          (480242 'end of statement' i[130917] i[130917])
        }
      }
      label _unused_continueLabel[130922]
      label _breakLabel[130921]
    }
    (518060 return _void[55])
  }
  function _array[133594](?).localSlice[130966](arg _mt[133718]:_MT[238], arg this[133716]:_array[133594](?), arg r[130963]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518064] "RVV" "temp"
    unknown call_tmp[659080] "expr temp" "maybe param" "maybe type" "temp"
    (659083 'move' call_tmp[659080](130989 call _cond_test 1))
    if call_tmp[659080]
    {
      unknown call_tmp[659089] "expr temp" "maybe param" "maybe type" "temp"
      (659092 'move' call_tmp[659089](384166 call _value _mt[243] this[133716]))
      (130987 call(384161 call (partial) checkSlice _mt[243] this[133716])(130983 'expand_tuple' r[130963])(value = call_tmp[659089]))
    }
    unknown call_tmp[659096] "maybe param" "maybe type" "temp"
    (659099 'move' call_tmp[659096](130999 call(384170 call (partial) _dom _mt[243] this[133716])(130997 'expand_tuple' r[130963])))
    unknown dom[131000] "dead at end of block" "insert auto destroy"
    (543038 'init var' dom[131000] call_tmp[659096])
    (131003 'end of statement')
    unknown call_tmp[659103] "expr temp" "maybe param" "maybe type" "temp"
    (659106 'move' call_tmp[659103](131007 call(384177 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133716]) dom[131000]))
    (518069 'move' ret[518064](518068 'deref' call_tmp[659103]))
    gotoReturn _end_localSlice[518062] _end_localSlice[518062]
    (480246 'end of statement' dom[131000])
    label _end_localSlice[518062]
    (518066 return ret[518064])
  }
  where {
    unknown tmp[425531] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492222] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659110] "expr temp" "maybe param" "maybe type" "temp"
      (659113 'move' call_tmp[659110](384154 call _value _mt[243] this[133716]))
      (492226 'move' call_type_tmp[492222](130970 'typeof' call_tmp[659110]))
    }
    (425542 'move' tmp[425531](354336 'is_subtype' DefaultRectangularArr[379733](?) call_type_tmp[492222]))
    unknown call_tmp[659115] "expr temp" "maybe param" "maybe type" "temp"
    (659118 'move' call_tmp[659115](425544 call _cond_invalid tmp[425531]))
    if call_tmp[659115]
    {
      (425547 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566326] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566327] "maybe param" "temp"
    unknown call_tmp[659120] "expr temp" "maybe param" "maybe type" "temp"
    (659123 'move' call_tmp[659120](425532 call isTrue tmp[425531]))
    (566332 'move' tmp[566327](566330 call _cond_test call_tmp[659120]))
    if tmp[566327]
    {
      unknown tmp[566334] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659125] "expr temp" "maybe param" "maybe type" "temp"
      (659128 'move' call_tmp[659125](130977 call chpl__isTupleOfRanges r[130963]))
      (566336 'move' tmp[566334](425535 call isTrue call_tmp[659125]))
      (566341 'move' tmp[566326](566338 '_paramFoldLogical' tmp[566327] tmp[566334]))
    }
    {
      (566346 'move' tmp[566326](566343 '_paramFoldLogical' tmp[566327] 0))
    }
    (748319 call chpl_statementLevelSymbol tmp[566326])
  }
  function _array[133594](?).localSlice[131019](arg _mt[133722]:_MT[238], arg this[133720]:_array[133594](?), arg d[131016]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518075] "RVV" "temp"
    unknown call_tmp[659130] "expr temp" "maybe param" "maybe type" "temp"
    (659133 'move' call_tmp[659130](131041 call _cond_test 1))
    if call_tmp[659130]
    {
      unknown call_tmp[659139] "expr temp" "maybe param" "maybe type" "temp"
      (659142 'move' call_tmp[659139](131034 call(131030 call (partial) getIndices _mt[243] d[131016])))
      unknown call_tmp[659146] "expr temp" "maybe param" "maybe type" "temp"
      (659149 'move' call_tmp[659146](384193 call _value _mt[243] this[133720]))
      (131039 call(384189 call (partial) checkSlice _mt[243] this[133720])(131035 'expand_tuple' call_tmp[659139])(value = call_tmp[659146]))
    }
    unknown call_tmp[659153] "expr temp" "maybe param" "maybe type" "temp"
    (659156 'move' call_tmp[659153](131050 call(384197 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133720]) d[131016]))
    (518080 'move' ret[518075](518079 'deref' call_tmp[659153]))
    (518077 return ret[518075])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492228] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659160] "expr temp" "maybe param" "maybe type" "temp"
      (659163 'move' call_tmp[659160](384183 call _value _mt[243] this[133720]))
      (492232 'move' call_type_tmp[492228](131023 'typeof' call_tmp[659160]))
    }
    (354337 'is_subtype' DefaultRectangularArr[379733](?) call_type_tmp[492228])
  }
  function _array[133594](?).chpl__localSliceDefaultArithArrHelp[131062](arg _mt[133726]:_MT[238], arg this[133724]:_array[133594](?), arg d[131059]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no copy return"
  {
    unknown ret[518084] "RVV" "temp"
    unknown call_tmp[659167] "expr temp" "maybe param" "maybe type" "temp"
    (659170 'move' call_tmp[659167](384203 call _value _mt[243] this[133724]))
    unknown call_tmp[659172] "expr temp" "maybe param" "maybe type" "temp"
    (659175 'move' call_tmp[659172](131065 '_wide_get_locale' call_tmp[659167]))
    unknown call_tmp[659177] "expr temp" "maybe param" "maybe type" "temp"
    (659180 'move' call_tmp[659177](131066 call chpl_localeID_to_locale call_tmp[659172]))
    unknown call_tmp[659182] "expr temp" "maybe param" "maybe type" "temp"
    (659185 'move' call_tmp[659182](384206 call here[90438]))
    unknown call_tmp[659187] "expr temp" "maybe param" "maybe type" "temp"
    (659190 'move' call_tmp[659187](131069 call != call_tmp[659177] call_tmp[659182]))
    unknown call_tmp[659192] "expr temp" "maybe param" "maybe type" "temp"
    (659195 'move' call_tmp[659192](131102 call _cond_test call_tmp[659187]))
    if call_tmp[659192]
    {
      unknown call_tmp[659199] "expr temp" "maybe param" "maybe type" "temp"
      (659202 'move' call_tmp[659199](384209 call _value _mt[243] this[133724]))
      unknown call_tmp[659204] "expr temp" "maybe param" "maybe type" "temp"
      (659207 'move' call_tmp[659204](131094 '_wide_get_node' call_tmp[659199]))
      unknown call_tmp[659209] "expr temp" "maybe param" "maybe type" "temp"
      (659212 'move' call_tmp[659209](359933 call here[90438]))
      unknown call_tmp[659216] "expr temp" "maybe param" "maybe type" "temp"
      (659219 'move' call_tmp[659216](131097 call id _mt[243] call_tmp[659209]))
      (131100 call halt "Attempting to take a local slice of an array on locale " call_tmp[659204] " from locale " call_tmp[659216])
    }
    unknown call_tmp[659221] "expr temp" "maybe param" "maybe type" "temp"
    (659224 'move' call_tmp[659221](131111 call this[133724] d[131059]))
    (518089 'move' ret[518084](518088 'deref' call_tmp[659221]))
    (518086 return ret[518084])
  }
  function _array[133594](?).localSlice[131122](arg _mt[133730]:_MT[238], arg this[133728]:_array[133594](?), arg r[131119]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518093] "RVV" "temp"
    unknown call_tmp[659228] "expr temp" "maybe param" "maybe type" "temp"
    (659231 'move' call_tmp[659228](131147 call _cond_test 1))
    if call_tmp[659228]
    {
      unknown call_tmp[659237] "expr temp" "maybe param" "maybe type" "temp"
      (659240 'move' call_tmp[659237](384231 call _value _mt[243] this[133728]))
      (131145 call(384226 call (partial) checkSlice _mt[243] this[133728])(131141 'expand_tuple' r[131119])(value = call_tmp[659237]))
    }
    unknown call_tmp[659244] "expr temp" "maybe param" "maybe type" "temp"
    (659247 'move' call_tmp[659244](359936 call _value _mt[243] this[133728]))
    unknown call_tmp[659251] "expr temp" "maybe param" "maybe type" "temp"
    (659254 'move' call_tmp[659251](131159 call(131154 call (partial) dsiLocalSlice _mt[243] call_tmp[659244]) r[131119]))
    (518098 'move' ret[518093](518097 'deref' call_tmp[659251]))
    (518095 return ret[518093])
  }
  where {
    unknown tmp[425552] "maybe param" "temp"
    (425563 'move' tmp[425552](131127 call chpl__isTupleOfRanges r[131119]))
    unknown call_tmp[659256] "expr temp" "maybe param" "maybe type" "temp"
    (659259 'move' call_tmp[659256](425565 call _cond_invalid tmp[425552]))
    if call_tmp[659256]
    {
      (425568 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566353] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566354] "maybe param" "temp"
    unknown call_tmp[659261] "expr temp" "maybe param" "maybe type" "temp"
    (659264 'move' call_tmp[659261](425553 call isTrue tmp[425552]))
    (566359 'move' tmp[566354](566357 call _cond_test call_tmp[659261]))
    if tmp[566354]
    {
      { scopeless type
        unknown call_type_tmp[492234] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659268] "expr temp" "maybe param" "maybe type" "temp"
        (659271 'move' call_tmp[659268](384220 call _value _mt[243] this[133728]))
        (492238 'move' call_type_tmp[492234](131130 'typeof' call_tmp[659268]))
      }
      unknown tmp[566361] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659273] "expr temp" "maybe param" "maybe type" "temp"
      (659276 'move' call_tmp[659273](354338 'is_subtype' DefaultRectangularArr[379733](?) call_type_tmp[492234]))
      unknown call_tmp[659278] "expr temp" "maybe param" "maybe type" "temp"
      (659281 'move' call_tmp[659278](131134 call ! call_tmp[659273]))
      (566363 'move' tmp[566361](425556 call isTrue call_tmp[659278]))
      (566368 'move' tmp[566353](566365 '_paramFoldLogical' tmp[566354] tmp[566361]))
    }
    {
      (566373 'move' tmp[566353](566370 '_paramFoldLogical' tmp[566354] 0))
    }
    (748321 call chpl_statementLevelSymbol tmp[566353])
  }
  function _array[133594](?).localSlice[131171](arg _mt[133734]:_MT[238], arg this[133732]:_array[133594](?), arg d[131168]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518102] "RVV" "temp"
    unknown call_tmp[659287] "expr temp" "maybe param" "maybe type" "temp"
    (659290 'move' call_tmp[659287](131179 call(131175 call (partial) getIndices _mt[243] d[131168])))
    unknown call_tmp[659292] "expr temp" "maybe param" "maybe type" "temp"
    (659295 'move' call_tmp[659292](131182 call(384237 call (partial) localSlice _mt[243] this[133732])(131180 'expand_tuple' call_tmp[659287])))
    (518107 'move' ret[518102](518106 'deref' call_tmp[659292]))
    (518104 return ret[518102])
  }
  function _array[133594](?).these[131190](arg _mt[133738]:_MT[238], arg this[133736]:_array[133594](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[518111] "RVV" "temp"
    {
      unknown _indexOfInterest[131203] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131204] "expr temp" "temp"
      unknown call_tmp[659299] "expr temp" "maybe param" "maybe type" "temp"
      (659302 'move' call_tmp[659299](359941 call _value _mt[243] this[133736]))
      unknown call_tmp[659306] "expr temp" "maybe param" "maybe type" "temp"
      (659309 'move' call_tmp[659306](131198 call(131194 call (partial) these _mt[243] call_tmp[659299])))
      (131213 'move' _iterator[131204](131211 call _getIterator call_tmp[659306]))
      Defer
      {
        {
          (131230 call _freeIterator _iterator[131204])
        }
      }
      { scopeless type
        (131219 'move' _indexOfInterest[131203](131216 call iteratorIndex _iterator[131204]))
      }
      ForLoop[131205]
      {
        unknown i[131223] "index var" "insert auto destroy"
        (480256 'end of statement')
        (131225 'move' i[131223] _indexOfInterest[131203])
        (480257 'end of statement' i[131223])
        {
          unknown yret[518115] "YVV" "temp"
          (518118 'move' yret[518115](518117 'addr of' i[131223]))
          (518120 yield yret[518115])
          (480259 'end of statement' i[131223])
        }
        label _continueLabel[131208]
        _indexOfInterest[131203]
        _iterator[131204]
      }
      label _breakLabel[131209]
    }
    (518113 return ret[518111])
  }
  function _array[133594](?).these[131246](arg _mt[133742]:_MT[238], arg this[133740]:_array[133594](?), param arg tag[131243]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518124] "RVV" "temp"
    {
      unknown _indexOfInterest[131275] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131276] "expr temp" "temp"
      unknown call_tmp[659313] "expr temp" "maybe param" "maybe type" "temp"
      (659316 'move' call_tmp[659313](359946 call _value _mt[243] this[133740]))
      unknown call_tmp[659320] "expr temp" "maybe param" "maybe type" "temp"
      (659323 'move' call_tmp[659320](131271 call(131266 call (partial) these _mt[243] call_tmp[659313]) tag[131243]))
      (131285 'move' _iterator[131276](131283 call _getIterator call_tmp[659320]))
      Defer
      {
        {
          (131302 call _freeIterator _iterator[131276])
        }
      }
      { scopeless type
        (131291 'move' _indexOfInterest[131275](131288 call iteratorIndex _iterator[131276]))
      }
      ForLoop[131277]
      {
        unknown i[131295] "index var" "insert auto destroy"
        (480262 'end of statement')
        (131297 'move' i[131295] _indexOfInterest[131275])
        (480263 'end of statement' i[131295])
        unknown yret[518128] "YVV" "temp"
        (518131 'move' yret[518128](518130 'addr of' i[131295]))
        (518133 yield yret[518128])
        (480265 'end of statement' i[131295])
        label _continueLabel[131280]
        _indexOfInterest[131275]
        _iterator[131276]
      }
      label _breakLabel[131281]
    }
    (518126 return ret[518124])
  }
  where {
    unknown tmp[425573] "maybe param" "temp"
    (425584 'move' tmp[425573](131253 call == tag[131243] standalone[451]))
    unknown call_tmp[659325] "expr temp" "maybe param" "maybe type" "temp"
    (659328 'move' call_tmp[659325](425586 call _cond_invalid tmp[425573]))
    if call_tmp[659325]
    {
      (425589 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566380] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566381] "maybe param" "temp"
    unknown call_tmp[659330] "expr temp" "maybe param" "maybe type" "temp"
    (659333 'move' call_tmp[659330](425574 call isTrue tmp[425573]))
    (566386 'move' tmp[566381](566384 call _cond_test call_tmp[659330]))
    if tmp[566381]
    {
      unknown tmp[566388] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659337] "expr temp" "maybe param" "maybe type" "temp"
      (659340 'move' call_tmp[659337](384244 call _value _mt[243] this[133740]))
      unknown call_tmp[659342] "expr temp" "maybe param" "maybe type" "temp"
      (659345 'move' call_tmp[659342](131261 'method call resolves' call_tmp[659337] "these"(tag = tag[131243])))
      (566390 'move' tmp[566388](425577 call isTrue call_tmp[659342]))
      (566395 'move' tmp[566380](566392 '_paramFoldLogical' tmp[566381] tmp[566388]))
    }
    {
      (566400 'move' tmp[566380](566397 '_paramFoldLogical' tmp[566381] 0))
    }
    (748323 call chpl_statementLevelSymbol tmp[566380])
  }
  function _array[133594](?).these[131319](arg _mt[133746]:_MT[238], arg this[133744]:_array[133594](?), param arg tag[131316]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[518137] "RVV" "temp"
    {
      unknown _indexOfInterest[131339] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131340] "expr temp" "temp"
      unknown call_tmp[659349] "expr temp" "maybe param" "maybe type" "temp"
      (659352 'move' call_tmp[659349](359951 call _value _mt[243] this[133744]))
      unknown call_tmp[659356] "expr temp" "maybe param" "maybe type" "temp"
      (659359 'move' call_tmp[659356](131335 call(131330 call (partial) these _mt[243] call_tmp[659349]) tag[131316]))
      (131349 'move' _iterator[131340](131347 call _getIterator call_tmp[659356]))
      Defer
      {
        {
          (131366 call _freeIterator _iterator[131340])
        }
      }
      { scopeless type
        (131355 'move' _indexOfInterest[131339](131352 call iteratorIndex _iterator[131340]))
      }
      ForLoop[131341]
      {
        unknown followThis[131359] "index var" "insert auto destroy"
        (480268 'end of statement')
        (131361 'move' followThis[131359] _indexOfInterest[131339])
        (480269 'end of statement' followThis[131359])
        unknown yret[518141] "YVV" "temp"
        (518144 'move' yret[518141](518143 'deref' followThis[131359]))
        (518146 yield yret[518141])
        (480271 'end of statement' followThis[131359])
        label _continueLabel[131344]
        _indexOfInterest[131339]
        _iterator[131340]
      }
      label _breakLabel[131345]
    }
    (518139 return ret[518137])
  }
  where {
    (131326 call == tag[131316] leader[447])
  }
  function _array[133594](?).these[131383](arg _mt[133750]:_MT[238], arg this[133748]:_array[133594](?), param arg tag[131380]:iterKind[453], arg followThis[131385]:_any[178](?), param arg fast[131389]:bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518150] "RVV" "temp"
    unknown call_tmp[659363] "expr temp" "maybe param" "maybe type" "temp"
    (659366 'move' call_tmp[659363](384257 call _value _mt[243] this[133748]))
    unknown call_tmp[659368] "expr temp" "maybe param" "maybe type" "temp"
    (659371 'move' call_tmp[659368](131409 'method call resolves' call_tmp[659363] "these"(tag = tag[131380]) followThis[131385](fast = fast[131389])))
    unknown call_tmp[659373] "expr temp" "maybe param" "maybe type" "temp"
    (659376 'move' call_tmp[659373](131507 call _cond_test call_tmp[659368]))
    if call_tmp[659373]
    {
      {
        unknown _indexOfInterest[131425] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131426] "expr temp" "temp"
        unknown call_tmp[659380] "expr temp" "maybe param" "maybe type" "temp"
        (659383 'move' call_tmp[659380](359956 call _value _mt[243] this[133748]))
        unknown call_tmp[659387] "expr temp" "maybe param" "maybe type" "temp"
        (659390 'move' call_tmp[659387](131421 call(131412 call (partial) these _mt[243] call_tmp[659380])(tag = tag[131380]) followThis[131385](fast = fast[131389])))
        (131435 'move' _iterator[131426](131433 call _getIterator call_tmp[659387]))
        Defer
        {
          {
            (131452 call _freeIterator _iterator[131426])
          }
        }
        { scopeless type
          (131441 'move' _indexOfInterest[131425](131438 call iteratorIndex _iterator[131426]))
        }
        ForLoop[131427]
        {
          unknown i[131445] "index var" "insert auto destroy"
          (480274 'end of statement')
          (131447 'move' i[131445] _indexOfInterest[131425])
          (480275 'end of statement' i[131445])
          unknown yret[518154] "YVV" "temp"
          (518157 'move' yret[518154](518156 'addr of' i[131445]))
          (518159 yield yret[518154])
          (480277 'end of statement' i[131445])
          label _continueLabel[131430]
          _indexOfInterest[131425]
          _iterator[131426]
        }
        label _breakLabel[131431]
      }
    }
    {
      {
        unknown _indexOfInterest[131472] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131473] "expr temp" "temp"
        unknown call_tmp[659394] "expr temp" "maybe param" "maybe type" "temp"
        (659397 'move' call_tmp[659394](359960 call _value _mt[243] this[133748]))
        unknown call_tmp[659401] "expr temp" "maybe param" "maybe type" "temp"
        (659404 'move' call_tmp[659401](131468 call(131462 call (partial) these _mt[243] call_tmp[659394]) tag[131380] followThis[131385]))
        (131482 'move' _iterator[131473](131480 call _getIterator call_tmp[659401]))
        Defer
        {
          {
            (131499 call _freeIterator _iterator[131473])
          }
        }
        { scopeless type
          (131488 'move' _indexOfInterest[131472](131485 call iteratorIndex _iterator[131473]))
        }
        ForLoop[131474]
        {
          unknown i[131492] "index var" "insert auto destroy"
          (480280 'end of statement')
          (131494 'move' i[131492] _indexOfInterest[131472])
          (480281 'end of statement' i[131492])
          unknown yret[518161] "YVV" "temp"
          (518164 'move' yret[518161](518163 'addr of' i[131492]))
          (518166 yield yret[518161])
          (480283 'end of statement' i[131492])
          label _continueLabel[131477]
          _indexOfInterest[131472]
          _iterator[131473]
        }
        label _breakLabel[131478]
      }
    }
    (518152 return ret[518150])
  }
  where {
    (131398 call == tag[131380] follower[449])
  }
  function _array[133594](?).numElements[131517](arg _mt[133754]:_MT[238], arg this[133752]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518170] "RVV" "temp"
    unknown call_tmp[659406] "expr temp" "maybe param" "maybe type" "temp"
    (659409 'move' call_tmp[659406](131554 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131557 call compilerWarning call_tmp[659406])
    (480285 'end of statement')
    unknown call_tmp[659413] "expr temp" "maybe param" "maybe type" "temp"
    (659416 'move' call_tmp[659413](384271 call size _mt[243] this[133752]))
    (518175 'move' ret[518170](518174 'deref' call_tmp[659413]))
    (518172 return ret[518170])
  }
  function _array[133594](?).size[131567](arg _mt[133758]:_MT[238], arg this[133756]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518179] "RVV" "temp"
    unknown call_tmp[659420] "expr temp" "maybe param" "maybe type" "temp"
    (659423 'move' call_tmp[659420](359964 call _value _mt[243] this[133756]))
    unknown call_tmp[659427] "expr temp" "maybe param" "maybe type" "temp"
    (659430 'move' call_tmp[659427](131570 call dom _mt[243] call_tmp[659420]))
    unknown call_tmp[659434] "expr temp" "maybe param" "maybe type" "temp"
    (659437 'move' call_tmp[659434](131573 call dsiNumIndices _mt[243] call_tmp[659427]))
    (518184 'move' ret[518179](518183 'deref' call_tmp[659434]))
    (518181 return ret[518179])
  }
  function _array[133594](?).chpl_checkArrArgDoms[131587](arg _mt[133762]:_MT[238], arg this[133760]:_array[133594](?), arg formalDom[131584]:_domain[125908](?), param arg runtimeChecks[131590]:bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[659441] "expr temp" "maybe param" "maybe type" "temp"
    (659444 'move' call_tmp[659441](131594 call rank _mt[243] formalDom[131584]))
    unknown call_tmp[659448] "expr temp" "maybe param" "maybe type" "temp"
    (659451 'move' call_tmp[659448](131598 call _dom _mt[243] this[133760]))
    unknown call_tmp[659455] "expr temp" "maybe param" "maybe type" "temp"
    (659458 'move' call_tmp[659455](131601 call rank _mt[243] call_tmp[659448]))
    unknown call_tmp[659460] "expr temp" "maybe param" "maybe type" "temp"
    (659463 'move' call_tmp[659460](131604 call != call_tmp[659441] call_tmp[659455]))
    unknown call_tmp[659465] "expr temp" "maybe param" "maybe type" "temp"
    (659468 'move' call_tmp[659465](131669 call _cond_test call_tmp[659460]))
    if call_tmp[659465]
    {
      unknown call_tmp[659472] "expr temp" "maybe param" "maybe type" "temp"
      (659475 'move' call_tmp[659472](131625 call rank _mt[243] formalDom[131584]))
      unknown call_tmp[659477] "expr temp" "maybe param" "maybe type" "temp"
      (659480 'move' call_tmp[659477](131629 call _cast string[26] call_tmp[659472]))
      unknown call_tmp[659482] "expr temp" "maybe param" "maybe type" "temp"
      (659485 'move' call_tmp[659482](131631 call + "Rank mismatch passing array argument: expected " call_tmp[659477]))
      unknown call_tmp[659487] "expr temp" "maybe param" "maybe type" "temp"
      (659490 'move' call_tmp[659487](131650 call + call_tmp[659482] " but got "))
      unknown call_tmp[659494] "expr temp" "maybe param" "maybe type" "temp"
      (659497 'move' call_tmp[659494](131653 call _dom _mt[243] this[133760]))
      unknown call_tmp[659501] "expr temp" "maybe param" "maybe type" "temp"
      (659504 'move' call_tmp[659501](131656 call rank _mt[243] call_tmp[659494]))
      unknown call_tmp[659506] "expr temp" "maybe param" "maybe type" "temp"
      (659509 'move' call_tmp[659506](131660 call _cast string[26] call_tmp[659501]))
      unknown call_tmp[659511] "expr temp" "maybe param" "maybe type" "temp"
      (659514 'move' call_tmp[659511](131662 call + call_tmp[659487] call_tmp[659506]))
      (131667 call compilerError call_tmp[659511](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[492240] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659518] "expr temp" "maybe param" "maybe type" "temp"
      (659521 'move' call_tmp[659518](131676 call dist _mt[243] formalDom[131584]))
      unknown call_tmp[659525] "expr temp" "maybe param" "maybe type" "temp"
      (659528 'move' call_tmp[659525](131679 call _value _mt[243] call_tmp[659518]))
      (492244 'move' call_type_tmp[492240](131682 'typeof' call_tmp[659525]))
    }
    unknown call_tmp[659530] "expr temp" "maybe param" "maybe type" "temp"
    (659533 'move' call_tmp[659530](131685 call != call_type_tmp[492240] unmanaged DefaultDist[415482]))
    unknown call_tmp[659535] "expr temp" "maybe param" "maybe type" "temp"
    (659538 'move' call_tmp[659535](131813 call _cond_test call_tmp[659530]))
    if call_tmp[659535]
    {
      { scopeless type
        unknown call_type_tmp[492246] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659542] "expr temp" "maybe param" "maybe type" "temp"
        (659545 'move' call_tmp[659542](131690 call _dom _mt[243] this[133760]))
        (492250 'move' call_type_tmp[492246](131693 'typeof' call_tmp[659542]))
      }
      unknown call_tmp[659547] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (659550 'move' call_tmp[659547](131688 'typeof' formalDom[131584]))
      unknown call_tmp[659552] "expr temp" "maybe param" "maybe type" "temp"
      (659555 'move' call_tmp[659552](131694 call != call_tmp[659547] call_type_tmp[492246]))
      unknown call_tmp[659557] "expr temp" "maybe param" "maybe type" "temp"
      (659560 'move' call_tmp[659557](131719 call _cond_test call_tmp[659552]))
      if call_tmp[659557]
      {
        (131717 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[425594] "maybe param" "temp"
      (425605 'move' tmp[425594] runtimeChecks[131590])
      unknown call_tmp[659562] "expr temp" "maybe param" "maybe type" "temp"
      (659565 'move' call_tmp[659562](425607 call _cond_invalid tmp[425594]))
      if call_tmp[659562]
      {
        (425610 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[566407] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[566408] "maybe param" "temp"
      unknown call_tmp[659567] "expr temp" "maybe param" "maybe type" "temp"
      (659570 'move' call_tmp[659567](425595 call isTrue tmp[425594]))
      (566413 'move' tmp[566408](566411 call _cond_test call_tmp[659567]))
      if tmp[566408]
      {
        unknown tmp[566415] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[659574] "expr temp" "maybe param" "maybe type" "temp"
        (659577 'move' call_tmp[659574](131727 call dist _mt[243] formalDom[131584]))
        unknown call_tmp[659581] "expr temp" "maybe param" "maybe type" "temp"
        (659584 'move' call_tmp[659581](131731 call _dom _mt[243] this[133760]))
        unknown call_tmp[659588] "expr temp" "maybe param" "maybe type" "temp"
        (659591 'move' call_tmp[659588](131734 call dist _mt[243] call_tmp[659581]))
        unknown call_tmp[659593] "expr temp" "maybe param" "maybe type" "temp"
        (659596 'move' call_tmp[659593](131737 call != call_tmp[659574] call_tmp[659588]))
        (566417 'move' tmp[566415](425598 call isTrue call_tmp[659593]))
        (566422 'move' tmp[566407](566419 '_paramFoldLogical' tmp[566408] tmp[566415]))
      }
      {
        (566427 'move' tmp[566407](566424 '_paramFoldLogical' tmp[566408] 0))
      }
      unknown call_tmp[659598] "expr temp" "maybe param" "maybe type" "temp"
      (659601 'move' call_tmp[659598](131808 call _cond_test tmp[566407]))
      if call_tmp[659598]
      {
        unknown call_tmp[659605] "expr temp" "maybe param" "maybe type" "temp"
        (659608 'move' call_tmp[659605](131778 call dist _mt[243] formalDom[131584]))
        unknown call_tmp[659612] "expr temp" "maybe param" "maybe type" "temp"
        (659615 'move' call_tmp[659612](131800 call _dom _mt[243] this[133760]))
        unknown call_tmp[659619] "expr temp" "maybe param" "maybe type" "temp"
        (659622 'move' call_tmp[659619](131803 call dist _mt[243] call_tmp[659612]))
        (131806 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[659605] "\n" "  Actual domain map is: " call_tmp[659619])
      }
    }
    unknown tmp[425615] "maybe param" "temp"
    (425626 'move' tmp[425615] runtimeChecks[131590])
    unknown call_tmp[659624] "expr temp" "maybe param" "maybe type" "temp"
    (659627 'move' call_tmp[659624](425628 call _cond_invalid tmp[425615]))
    if call_tmp[659624]
    {
      (425631 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566434] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566435] "maybe param" "temp"
    unknown call_tmp[659629] "expr temp" "maybe param" "maybe type" "temp"
    (659632 'move' call_tmp[659629](425616 call isTrue tmp[425615]))
    (566440 'move' tmp[566435](566438 call _cond_test call_tmp[659629]))
    if tmp[566435]
    {
      unknown tmp[566442] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659636] "expr temp" "maybe param" "maybe type" "temp"
      (659639 'move' call_tmp[659636](131820 call _dom _mt[243] this[133760]))
      unknown call_tmp[659641] "expr temp" "maybe param" "maybe type" "temp"
      (659644 'move' call_tmp[659641](131823 call != formalDom[131584] call_tmp[659636]))
      (566444 'move' tmp[566442](425619 call isTrue call_tmp[659641]))
      (566449 'move' tmp[566434](566446 '_paramFoldLogical' tmp[566435] tmp[566442]))
    }
    {
      (566454 'move' tmp[566434](566451 '_paramFoldLogical' tmp[566435] 0))
    }
    unknown call_tmp[659646] "expr temp" "maybe param" "maybe type" "temp"
    (659649 'move' call_tmp[659646](131888 call _cond_test tmp[566434]))
    if call_tmp[659646]
    {
      unknown call_tmp[659653] "expr temp" "maybe param" "maybe type" "temp"
      (659656 'move' call_tmp[659653](131883 call _dom _mt[243] this[133760]))
      (131886 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[131584] "\n" "  Actual domain is: " call_tmp[659653])
    }
    (518186 return _void[55])
  }
  function _array[133594](?).reindex[131901](arg _mt[133766]:_MT[238], arg this[133764]:_array[133594](?), arg newDomain[131898]:_domain[125908](?)) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518190] "RVV" "temp"
    unknown call_tmp[659662] "expr temp" "maybe param" "maybe type" "temp"
    (659665 'move' call_tmp[659662](131922 call(131918 call (partial) dims _mt[243] newDomain[131898])))
    unknown call_tmp[659667] "expr temp" "maybe param" "maybe type" "temp"
    (659670 'move' call_tmp[659667](131925 call(384284 call (partial) reindex _mt[243] this[133764])(131923 'expand_tuple' call_tmp[659662])))
    (518195 'move' ret[518190](518194 'deref' call_tmp[659667]))
    (518192 return ret[518190])
  }
  where {
    unknown tmp[425636] "maybe param" "temp"
    unknown call_tmp[659674] "expr temp" "maybe param" "maybe type" "temp"
    (659677 'move' call_tmp[659674](131905 call _dom _mt[243] this[133764]))
    (425647 'move' tmp[425636](131909 call isRectangularDom call_tmp[659674]))
    unknown call_tmp[659679] "expr temp" "maybe param" "maybe type" "temp"
    (659682 'move' call_tmp[659679](425649 call _cond_invalid tmp[425636]))
    if call_tmp[659679]
    {
      (425652 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566461] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566462] "maybe param" "temp"
    unknown call_tmp[659684] "expr temp" "maybe param" "maybe type" "temp"
    (659687 'move' call_tmp[659684](425637 call isTrue tmp[425636]))
    (566467 'move' tmp[566462](566465 call _cond_test call_tmp[659684]))
    if tmp[566462]
    {
      unknown tmp[566469] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659689] "expr temp" "maybe param" "maybe type" "temp"
      (659692 'move' call_tmp[659689](131913 call isRectangularDom newDomain[131898]))
      (566471 'move' tmp[566469](425640 call isTrue call_tmp[659689]))
      (566476 'move' tmp[566461](566473 '_paramFoldLogical' tmp[566462] tmp[566469]))
    }
    {
      (566481 'move' tmp[566461](566478 '_paramFoldLogical' tmp[566462] 0))
    }
    (748325 call chpl_statementLevelSymbol tmp[566461])
  }
  function _array[133594](?).reindex[131938](arg _mt[133770]:_MT[238], arg this[133768]:_array[133594](?), arg newDims[131935]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518199] "RVV" "temp"
    {
      unknown i[131992] "dead at end of block" "insert auto destroy"
      (543040 'init var' i[131992] 0)
      (480295 'end of statement')
      unknown tmp[131993] "maybe param" "temp"
      unknown call_tmp[659696] "expr temp" "maybe param" "maybe type" "temp"
      (659699 'move' call_tmp[659696](131949 call size _mt[243] newDims[131935]))
      unknown call_tmp[659701] "expr temp" "maybe param" "maybe type" "temp"
      (659704 'move' call_tmp[659701](131953 call - call_tmp[659696] 1))
      (132005 'move' tmp[131993](132003 call chpl_compute_low_param_loop_bound 0 call_tmp[659701]))
      unknown tmp[131994] "maybe param" "temp"
      unknown call_tmp[659708] "expr temp" "maybe param" "maybe type" "temp"
      (659711 'move' call_tmp[659708](132012 call size _mt[243] newDims[131935]))
      unknown call_tmp[659713] "expr temp" "maybe param" "maybe type" "temp"
      (659716 'move' call_tmp[659713](132010 call - call_tmp[659708] 1))
      (132018 'move' tmp[131994](132016 call chpl_compute_high_param_loop_bound 0 call_tmp[659713]))
      unknown tmp[131995] "maybe param" "temp"
      (132021 'move' tmp[131995] 1)
      ParamForLoop[132023]
      { i[131992] tmp[131993] tmp[131994] tmp[131995]
        unknown call_tmp[659718] "expr temp" "maybe param" "maybe type" "temp"
        (659721 'move' call_tmp[659718](131961 call newDims[131935] i[131992]))
        unknown call_tmp[659723] "expr temp" "maybe param" "maybe type" "temp"
        (659726 'move' call_tmp[659723](131963 call isRange call_tmp[659718]))
        unknown call_tmp[659728] "expr temp" "maybe param" "maybe type" "temp"
        (659731 'move' call_tmp[659728](131964 call ! call_tmp[659723]))
        unknown call_tmp[659733] "expr temp" "maybe param" "maybe type" "temp"
        (659736 'move' call_tmp[659733](131987 call _cond_test call_tmp[659728]))
        if call_tmp[659733]
        {
          (131985 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[131997]
      label _breakLabel[131996]
    }
    unknown call_tmp[659740] "expr temp" "maybe param" "maybe type" "temp"
    (659743 'move' call_tmp[659740](132034 call rank _mt[243] this[133768]))
    unknown call_tmp[659747] "expr temp" "maybe param" "maybe type" "temp"
    (659750 'move' call_tmp[659747](132038 call size _mt[243] newDims[131935]))
    unknown call_tmp[659752] "expr temp" "maybe param" "maybe type" "temp"
    (659755 'move' call_tmp[659752](132041 call != call_tmp[659740] call_tmp[659747]))
    unknown call_tmp[659757] "expr temp" "maybe param" "maybe type" "temp"
    (659760 'move' call_tmp[659757](132101 call _cond_test call_tmp[659752]))
    if call_tmp[659757]
    {
      unknown call_tmp[659764] "expr temp" "maybe param" "maybe type" "temp"
      (659767 'move' call_tmp[659764](132062 call rank _mt[243] this[133768]))
      unknown call_tmp[659769] "expr temp" "maybe param" "maybe type" "temp"
      (659772 'move' call_tmp[659769](132066 call _cast string[26] call_tmp[659764]))
      unknown call_tmp[659774] "expr temp" "maybe param" "maybe type" "temp"
      (659777 'move' call_tmp[659774](132068 call + "rank mismatch: cannot reindex() from " call_tmp[659769]))
      unknown call_tmp[659779] "expr temp" "maybe param" "maybe type" "temp"
      (659782 'move' call_tmp[659779](132087 call + call_tmp[659774] " dimension(s) to "))
      unknown call_tmp[659786] "expr temp" "maybe param" "maybe type" "temp"
      (659789 'move' call_tmp[659786](132090 call size _mt[243] newDims[131935]))
      unknown call_tmp[659791] "expr temp" "maybe param" "maybe type" "temp"
      (659794 'move' call_tmp[659791](132094 call _cast string[26] call_tmp[659786]))
      unknown call_tmp[659796] "expr temp" "maybe param" "maybe type" "temp"
      (659799 'move' call_tmp[659796](132096 call + call_tmp[659779] call_tmp[659791]))
      (132099 call compilerError call_tmp[659796])
    }
    {
      unknown i[132179] "dead at end of block" "insert auto destroy"
      (543042 'init var' i[132179] 0)
      (480298 'end of statement')
      unknown tmp[132180] "maybe param" "temp"
      unknown call_tmp[659803] "expr temp" "maybe param" "maybe type" "temp"
      (659806 'move' call_tmp[659803](384290 call rank _mt[243] this[133768]))
      unknown call_tmp[659808] "expr temp" "maybe param" "maybe type" "temp"
      (659811 'move' call_tmp[659808](132109 call - call_tmp[659803] 1))
      (132192 'move' tmp[132180](132190 call chpl_compute_low_param_loop_bound 0 call_tmp[659808]))
      unknown tmp[132181] "maybe param" "temp"
      unknown call_tmp[659815] "expr temp" "maybe param" "maybe type" "temp"
      (659818 'move' call_tmp[659815](384298 call rank _mt[243] this[133768]))
      unknown call_tmp[659820] "expr temp" "maybe param" "maybe type" "temp"
      (659823 'move' call_tmp[659820](132197 call - call_tmp[659815] 1))
      (132202 'move' tmp[132181](132200 call chpl_compute_high_param_loop_bound 0 call_tmp[659820]))
      unknown tmp[132182] "maybe param" "temp"
      (132205 'move' tmp[132182] 1)
      ParamForLoop[132207]
      { i[132179] tmp[132180] tmp[132181] tmp[132182]
        unknown call_tmp[659825] "expr temp" "maybe param" "maybe type" "temp"
        (659828 'move' call_tmp[659825](132116 call newDims[131935] i[132179]))
        unknown call_tmp[659832] "expr temp" "maybe param" "maybe type" "temp"
        (659835 'move' call_tmp[659832](132117 call size _mt[243] call_tmp[659825]))
        unknown call_tmp[659839] "expr temp" "maybe param" "maybe type" "temp"
        (659842 'move' call_tmp[659839](359989 call _value _mt[243] this[133768]))
        unknown call_tmp[659846] "expr temp" "maybe param" "maybe type" "temp"
        (659849 'move' call_tmp[659846](132121 call dom _mt[243] call_tmp[659839]))
        unknown call_tmp[659853] "expr temp" "maybe param" "maybe type" "temp"
        (659856 'move' call_tmp[659853](132129 call(132124 call (partial) dsiDim _mt[243] call_tmp[659846]) i[132179]))
        unknown call_tmp[659860] "expr temp" "maybe param" "maybe type" "temp"
        (659863 'move' call_tmp[659860](132130 call size _mt[243] call_tmp[659853]))
        unknown call_tmp[659865] "expr temp" "maybe param" "maybe type" "temp"
        (659868 'move' call_tmp[659865](132133 call != call_tmp[659832] call_tmp[659860]))
        unknown call_tmp[659870] "expr temp" "maybe param" "maybe type" "temp"
        (659873 'move' call_tmp[659870](132174 call _cond_test call_tmp[659865]))
        if call_tmp[659870]
        {
          (132172 call halt "extent in dimension " i[132179] " does not match actual")
          (480299 'end of statement' i[132179])
        }
      }
      label _unused_continueLabel[132184]
      label _breakLabel[132183]
    }
    unknown call_tmp[659877] "expr temp" "maybe param" "maybe type" "temp"
    (659880 'move' call_tmp[659877](132217 call _value _mt[243] this[133768]))
    unknown call_tmp[659884] "maybe param" "maybe type" "temp"
    (659887 'move' call_tmp[659884](132220 call dom _mt[243] call_tmp[659877]))
    const thisDomClass[132223] "dead at end of block" "const" "insert auto destroy"
    (543044 'init var' thisDomClass[132223] call_tmp[659884])
    (132226 'end of statement')
    unknown call_tmp[659891] "expr temp" "maybe param" "maybe type" "temp"
    (659894 'move' call_tmp[659891](132234 call pid _mt[243] thisDomClass[132223]))
    unknown call_tmp[659896] "maybe param" "maybe type" "temp"
    (659899 'move' call_tmp[659896](132238 call _build_tuple thisDomClass[132223] call_tmp[659891]))
    const tmp[132240] "dead at end of block" "const" "insert auto destroy" "temp"
    (543046 'init var' tmp[132240] call_tmp[659896])
    (132247 call _check_tuple_var_decl tmp[132240] 2)
    (480301 'end of statement')
    unknown call_tmp[659901] "maybe param" "maybe type" "temp"
    (659904 'move' call_tmp[659901](132241 call tmp[132240] 0))
    const dom[132227] "dead at end of block" "const" "insert auto destroy"
    (543048 'init var' dom[132227] call_tmp[659901])
    unknown call_tmp[659906] "maybe param" "maybe type" "temp"
    (659909 'move' call_tmp[659906](132244 call tmp[132240] 1))
    const dompid[132229] "dead at end of block" "const" "insert auto destroy"
    (543050 'init var' dompid[132229] call_tmp[659906])
    (132252 'end of statement')
    unknown call_tmp[659911] "maybe param" "maybe type" "temp"
    (659914 'move' call_tmp[659911](132256 call chpl__buildDomainExpr(132254 'expand_tuple' newDims[131935])))
    const updom[132258] "dead at end of block" "const" "no auto destroy"
    (543052 'init var' updom[132258] call_tmp[659911])
    (132261 'end of statement')
    unknown call_tmp[659918] "expr temp" "maybe param" "maybe type" "temp"
    (659921 'move' call_tmp[659918](132267 call _dom _mt[243] this[133768]))
    unknown call_tmp[659925] "expr temp" "maybe param" "maybe type" "temp"
    (659928 'move' call_tmp[659925](132270 call dist _mt[243] call_tmp[659918]))
    unknown call_tmp[659932] "expr temp" "maybe param" "maybe type" "temp"
    (659935 'move' call_tmp[659932](132273 call _pid _mt[243] call_tmp[659925]))
    unknown call_tmp[659939] "expr temp" "maybe param" "maybe type" "temp"
    (659942 'move' call_tmp[659939](132279 call _dom _mt[243] this[133768]))
    unknown call_tmp[659946] "expr temp" "maybe param" "maybe type" "temp"
    (659949 'move' call_tmp[659946](132282 call dist _mt[243] call_tmp[659939]))
    unknown call_tmp[659953] "expr temp" "maybe param" "maybe type" "temp"
    (659956 'move' call_tmp[659953](132285 call _instance _mt[243] call_tmp[659946]))
    unknown call_tmp[659960] "expr temp" "maybe param" "maybe type" "temp"
    (659963 'move' call_tmp[659960](132290 call _value _mt[243] updom[132258]))
    unknown call_tmp[659965] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659968 'move' call_tmp[659965](747904 'new' ArrayViewReindexDist[384304](?)(downDistPid = call_tmp[659932])(downDistInst = call_tmp[659953])(updom = call_tmp[659960])(downdomPid = dompid[132229])(downdomInst = dom[132227])(_chpl_manager = unmanaged[220](?))))
    const redist[132299] "dead at end of block" "const" "insert auto destroy"
    (543054 'init var' redist[132299] call_tmp[659965])
    (132302 'end of statement')
    unknown call_tmp[659970] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659973 'move' call_tmp[659970](747905 'new' _distribution[118973](?) redist[132299]))
    const redistRec[132308] "dead at end of block" "const" "insert auto destroy"
    (543056 'init var' redistRec[132308] call_tmp[659970])
    (132311 'end of statement')
    unknown call_tmp[659977] "expr temp" "maybe param" "maybe type" "temp"
    (659980 'move' call_tmp[659977](384314 call rank _mt[243] this[133768]))
    unknown call_tmp[659984] "expr temp" "maybe param" "maybe type" "temp"
    (659987 'move' call_tmp[659984](132318 call idxType _mt[243] updom[132258]))
    unknown call_tmp[659991] "expr temp" "maybe param" "maybe type" "temp"
    (659994 'move' call_tmp[659991](132322 call stridable _mt[243] updom[132258]))
    unknown call_tmp[659998] "expr temp" "maybe param" "maybe type" "temp"
    (660001 'move' call_tmp[659998](132330 call(132326 call (partial) dims _mt[243] updom[132258])))
    unknown call_tmp[660003] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660006 'move' call_tmp[660003](747906 'new' _domain[125908](?) redistRec[132308] call_tmp[659977] call_tmp[659984] call_tmp[659991] call_tmp[659998]))
    const newDom[132332] "dead at end of block" "const" "no auto destroy"
    (543058 'init var' newDom[132332] call_tmp[660003])
    (132335 'end of statement')
    unknown call_tmp[660010] "expr temp" "maybe param" "maybe type" "temp"
    (660013 'move' call_tmp[660010](132337 call _value _mt[243] newDom[132332]))
    unknown call_tmp[660017] "expr temp" "maybe param" "maybe type" "temp"
    (660020 'move' call_tmp[660017](132340 call _free_when_no_arrs _mt[243] call_tmp[660010]))
    (132344 call = call_tmp[660017] 1)
    (480310 'end of statement' newDom[132332])
    unknown call_tmp[660024] "expr temp" "maybe param" "maybe type" "temp"
    (660027 'move' call_tmp[660024](132353 call _value _mt[243] this[133768]))
    unknown call_tmp[660031] "expr temp" "maybe param" "maybe type" "temp"
    (660034 'move' call_tmp[660031](132357 call _pid _mt[243] this[133768]))
    unknown call_tmp[660036] "maybe param" "maybe type" "temp"
    (660039 'move' call_tmp[660036](132361 call _build_tuple call_tmp[660024] call_tmp[660031]))
    const tmp[132363] "dead at end of block" "const" "insert auto destroy" "temp"
    (543060 'init var' tmp[132363] call_tmp[660036])
    (132370 call _check_tuple_var_decl tmp[132363] 2)
    (480312 'end of statement')
    unknown call_tmp[660041] "maybe param" "maybe type" "temp"
    (660044 'move' call_tmp[660041](132364 call tmp[132363] 0))
    const arr[132347] "dead at end of block" "const" "insert auto destroy"
    (543062 'init var' arr[132347] call_tmp[660041])
    unknown call_tmp[660046] "maybe param" "maybe type" "temp"
    (660049 'move' call_tmp[660046](132367 call tmp[132363] 1))
    const arrpid[132349] "dead at end of block" "const" "insert auto destroy"
    (543064 'init var' arrpid[132349] call_tmp[660046])
    (132375 'end of statement')
    unknown call_tmp[660053] "expr temp" "maybe param" "maybe type" "temp"
    (660056 'move' call_tmp[660053](132381 call eltType _mt[243] this[133768]))
    unknown call_tmp[660060] "expr temp" "maybe param" "maybe type" "temp"
    (660063 'move' call_tmp[660060](132387 call _pid _mt[243] newDom[132332]))
    unknown call_tmp[660067] "expr temp" "maybe param" "maybe type" "temp"
    (660070 'move' call_tmp[660067](132392 call _instance _mt[243] newDom[132332]))
    unknown call_tmp[660072] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660075 'move' call_tmp[660072](747907 'new' ArrayViewReindexArr[384318](?)(eltType = call_tmp[660053])(_DomPid = call_tmp[660060])(dom = call_tmp[660067])(_ArrPid = arrpid[132349])(_ArrInstance = arr[132347])(_chpl_manager = unmanaged[220](?))))
    unknown x[132401] "dead at end of block" "insert auto destroy"
    (543066 'init var' x[132401] call_tmp[660072])
    (132404 'end of statement' updom[132258] dompid[132229] dom[132227] redist[132299] redistRec[132308] updom[132258] updom[132258] updom[132258] newDom[132332] newDom[132332] arrpid[132349] arr[132347])
    unknown call_tmp[660079] "expr temp" "maybe param" "maybe type" "temp"
    (660082 'move' call_tmp[660079](132406 call _value _mt[243] newDom[132332]))
    (132416 call(132409 call (partial) add_arr _mt[243] call_tmp[660079]) x[132401](locking = 0))
    (480317 'end of statement' newDom[132332] x[132401])
    unknown call_tmp[660086] "expr temp" "maybe param" "maybe type" "temp"
    (660089 'move' call_tmp[660086](132421 call _newArray x[132401]))
    (518204 'move' ret[518199](518203 'deref' call_tmp[660086]))
    gotoReturn _end_reindex[518197] _end_reindex[518197]
    (480320 'end of statement' x[132401])
    label _end_reindex[518197]
    (518201 return ret[518199])
  }
  where {
    unknown call_tmp[660093] "expr temp" "maybe param" "maybe type" "temp"
    (660096 'move' call_tmp[660093](131942 call _dom _mt[243] this[133768]))
    (131946 call isRectangularDom call_tmp[660093])
  }
  function _array[133594](?).reindex[132433](arg _mt[133774]:_MT[238], arg this[133772]:_array[133594](?), arg d[132430]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132454 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (518208 return _void[55])
  }
  function _array[133594](?).writeThis[132463](arg _mt[133778]:_MT[238], arg this[133776]:_array[133594](?), arg f[132461]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660100] "expr temp" "maybe param" "maybe type" "temp"
    (660103 'move' call_tmp[660100](360008 call _value _mt[243] this[133776]))
    (132471 call(132466 call (partial) dsiSerialWrite _mt[243] call_tmp[660100]) f[132461])
    (518210 return _void[55])
  }
  function _array[133594](?).readThis[132480](arg _mt[133782]:_MT[238], arg this[133780]:_array[133594](?), arg f[132478]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660109] "expr temp" "maybe param" "maybe type" "temp"
    (660112 'move' call_tmp[660109](360012 call _value _mt[243] this[133780]))
    (132488 call(132483 call (partial) dsiSerialRead _mt[243] call_tmp[660109]) f[132478])
    (518212 return _void[55])
  }
  function _array[133594](?).IRV[132495](arg _mt[133786]:_MT[238], arg this[133784]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132522 call compilerError "only sparse arrays have an IRV")
    (518214 return _void[55])
  }
  where {
    unknown call_tmp[660116] "expr temp" "maybe param" "maybe type" "temp"
    (660119 'move' call_tmp[660116](132500 call isSparseArr this[133784]))
    (132501 call ! call_tmp[660116])
  }
  function _array[133594](?).IRV[132530](arg _mt[133790]:_MT[238], arg this[133788]:_array[133594](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[518218] "RVV" "temp"
    unknown call_tmp[660123] "expr temp" "maybe param" "maybe type" "temp"
    (660126 'move' call_tmp[660123](360016 call _value _mt[243] this[133788]))
    unknown call_tmp[660130] "expr temp" "maybe param" "maybe type" "temp"
    (660133 'move' call_tmp[660130](132539 call IRV _mt[243] call_tmp[660123]))
    (518223 'move' ret[518218](518222 'addr of' call_tmp[660130]))
    (518220 return ret[518218])
  }
  where {
    (132535 call isSparseArr this[133788])
  }
  function _array[133594](?).sorted[132559](arg _mt[133794]:_MT[238], arg this[133792]:_array[133594](?), arg comparator[132555]:_any[178](?) :
  (748837 call chpl_defaultComparator) =
  (132554 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518227] "RVV" "temp"
    unknown call_tmp[660137] "expr temp" "maybe param" "maybe type" "temp"
    (660140 'move' call_tmp[660137](384331 call _value _mt[243] this[133792]))
    unknown call_tmp[660142] "expr temp" "maybe param" "maybe type" "temp"
    (660145 'move' call_tmp[660142](132583 call canResolveMethod module=[255] Reflection[224901] call_tmp[660137] "dsiSorted" comparator[132555]))
    unknown call_tmp[660147] "expr temp" "maybe param" "maybe type" "temp"
    (660150 'move' call_tmp[660147](132726 call _cond_test call_tmp[660142]))
    if call_tmp[660147]
    {
      {
        unknown _indexOfInterest[132596] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132597] "expr temp" "temp"
        unknown call_tmp[660154] "expr temp" "maybe param" "maybe type" "temp"
        (660157 'move' call_tmp[660154](360026 call _value _mt[243] this[133792]))
        unknown call_tmp[660161] "expr temp" "maybe param" "maybe type" "temp"
        (660164 'move' call_tmp[660161](132591 call(132586 call (partial) dsiSorted _mt[243] call_tmp[660154]) comparator[132555]))
        (132606 'move' _iterator[132597](132604 call _getIterator call_tmp[660161]))
        Defer
        {
          {
            (132623 call _freeIterator _iterator[132597])
          }
        }
        { scopeless type
          (132612 'move' _indexOfInterest[132596](132609 call iteratorIndex _iterator[132597]))
        }
        ForLoop[132598]
        {
          unknown i[132616] "index var" "insert auto destroy"
          (480328 'end of statement')
          (132618 'move' i[132616] _indexOfInterest[132596])
          (480329 'end of statement' i[132616])
          {
            unknown yret[518231] "YVV" "temp"
            (518234 'move' yret[518231](518233 'deref' i[132616]))
            (518236 yield yret[518231])
            (480331 'end of statement' i[132616])
          }
          label _continueLabel[132601]
          _indexOfInterest[132596]
          _iterator[132597]
        }
        label _breakLabel[132602]
      }
    }
    {
      unknown call_tmp[660168] "expr temp" "maybe param" "maybe type" "temp"
      (660171 'move' call_tmp[660168](384338 call _value _mt[243] this[133792]))
      unknown call_tmp[660173] "expr temp" "maybe param" "maybe type" "temp"
      (660176 'move' call_tmp[660173](132638 call canResolveMethod module=[255] Reflection[224901] call_tmp[660168] "dsiSorted"))
      unknown call_tmp[660178] "expr temp" "maybe param" "maybe type" "temp"
      (660181 'move' call_tmp[660178](132722 call _cond_test call_tmp[660173]))
      if call_tmp[660178]
      {
        { scopeless type
          unknown call_type_tmp[492252] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[660185] "expr temp" "maybe param" "maybe type" "temp"
          (660188 'move' call_tmp[660185](384342 call _value _mt[243] this[133792]))
          (492256 'move' call_type_tmp[492252](132641 'typeof' call_tmp[660185]))
        }
        unknown call_tmp[660190] "expr temp" "maybe param" "maybe type" "temp"
        (660193 'move' call_tmp[660190](132643 call _cast string[26] call_type_tmp[492252]))
        unknown call_tmp[660195] "expr temp" "maybe param" "maybe type" "temp"
        (660198 'move' call_tmp[660195](132662 call + call_tmp[660190] " does not support dsiSorted(comparator)"))
        (132665 call compilerError call_tmp[660195])
      }
      {
        unknown copy[132673] "dead at end of block" "insert auto destroy"
        (543068 'init var' copy[132673] this[133792])
        (132676 'end of statement')
        (132682 call sort copy[132673](comparator = comparator[132555]))
        (480334 'end of statement' copy[132673])
        {
          unknown _indexOfInterest[132689] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132690] "expr temp" "temp"
          (132699 'move' _iterator[132690](132697 call _getIterator copy[132673]))
          Defer
          {
            {
              (132715 call _freeIterator _iterator[132690])
            }
          }
          { scopeless type
            (132704 'move' _indexOfInterest[132689](132701 call iteratorIndex _iterator[132690]))
          }
          ForLoop[132691]
          {
            unknown ind[132708] "index var" "insert auto destroy"
            (480337 'end of statement')
            (132710 'move' ind[132708] _indexOfInterest[132689])
            (480338 'end of statement' ind[132708])
            unknown yret[518238] "YVV" "temp"
            (518241 'move' yret[518238](518240 'deref' ind[132708]))
            (518243 yield yret[518238])
            (480340 'end of statement' ind[132708])
            label _continueLabel[132694]
            _indexOfInterest[132689]
            _iterator[132690]
          }
          label _breakLabel[132695]
        }
        (355162 'used modules list'(132669 'use' Sort[267987]))
      }
      (360030 'referenced modules list' Reflection[224901])
    }
    (518229 return ret[518227])
    (360020 'referenced modules list' Reflection[224901])
  }
  function _array[133594](?).displayRepresentation[132736](arg _mt[133798]:_MT[238], arg this[133796]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660202] "expr temp" "maybe param" "maybe type" "temp"
    (660205 'move' call_tmp[660202](360036 call _value _mt[243] this[133796]))
    (132743 call(132739 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[660202]))
    (518245 return _void[55])
  }
  function _array[133594](?).targetLocales[132750](arg _mt[133802]:_MT[238], arg this[133800]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518249] "RVV" "temp"
    unknown call_tmp[660211] "expr temp" "maybe param" "maybe type" "temp"
    (660214 'move' call_tmp[660211](360040 call _value _mt[243] this[133800]))
    unknown call_tmp[660218] "expr temp" "maybe param" "maybe type" "temp"
    (660221 'move' call_tmp[660218](132757 call(132753 call (partial) dsiTargetLocales _mt[243] call_tmp[660211])))
    (518254 'move' ret[518249](518253 'deref' call_tmp[660218]))
    (518251 return ret[518249])
  }
  function _array[133594](?).hasSingleLocalSubdomain[132765](arg _mt[133806]:_MT[238], arg this[133804]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518258] "RVV" "param" "temp"
    unknown call_tmp[660225] "expr temp" "maybe param" "maybe type" "temp"
    (660228 'move' call_tmp[660225](360044 call _value _mt[243] this[133804]))
    unknown call_tmp[660232] "expr temp" "maybe param" "maybe type" "temp"
    (660235 'move' call_tmp[660232](132772 call(132768 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660225])))
    (518263 'move' ret[518258](518262 'deref' call_tmp[660232]))
    (518260 return ret[518258])
  }
  function _array[133594](?).localSubdomain[132786](arg _mt[133810]:_MT[238], arg this[133808]:_array[133594](?), arg loc[132782]:locale[28] =
  (384350 call here[90438])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518267] "RVV" "temp"
    unknown call_tmp[660239] "expr temp" "maybe param" "maybe type" "temp"
    (660242 'move' call_tmp[660239](360048 call _value _mt[243] this[133808]))
    unknown call_tmp[660246] "expr temp" "maybe param" "maybe type" "temp"
    (660249 'move' call_tmp[660246](132793 call(132789 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660239])))
    unknown call_tmp[660251] "expr temp" "maybe param" "maybe type" "temp"
    (660254 'move' call_tmp[660251](132794 call ! call_tmp[660246]))
    unknown call_tmp[660256] "expr temp" "maybe param" "maybe type" "temp"
    (660259 'move' call_tmp[660256](132801 call _cond_test call_tmp[660251]))
    if call_tmp[660256]
    {
      (132799 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[660263] "expr temp" "maybe param" "maybe type" "temp"
    (660266 'move' call_tmp[660263](360052 call _value _mt[243] this[133808]))
    unknown call_tmp[660270] "expr temp" "maybe param" "maybe type" "temp"
    (660273 'move' call_tmp[660270](132813 call(132808 call (partial) dsiLocalSubdomain _mt[243] call_tmp[660263]) loc[132782]))
    (518272 'move' ret[518267](518271 'deref' call_tmp[660270]))
    (518269 return ret[518267])
  }
  function _array[133594](?).localSubdomains[132826](arg _mt[133814]:_MT[238], arg this[133812]:_array[133594](?), arg loc[132822]:locale[28] =
  (384353 call here[90438])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518276] "RVV" "temp"
    unknown call_tmp[660277] "expr temp" "maybe param" "maybe type" "temp"
    (660280 'move' call_tmp[660277](360056 call _value _mt[243] this[133812]))
    unknown call_tmp[660284] "expr temp" "maybe param" "maybe type" "temp"
    (660287 'move' call_tmp[660284](132833 call(132829 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660277])))
    unknown call_tmp[660289] "expr temp" "maybe param" "maybe type" "temp"
    (660292 'move' call_tmp[660289](132887 call _cond_test call_tmp[660284]))
    if call_tmp[660289]
    {
      unknown yret[518280] "YVV" "temp"
      unknown call_tmp[660296] "expr temp" "maybe param" "maybe type" "temp"
      (660299 'move' call_tmp[660296](132837 call(384356 call (partial) localSubdomain _mt[243] this[133812]) loc[132822]))
      (518283 'move' yret[518280](518282 'deref' call_tmp[660296]))
      (518285 yield yret[518280])
    }
    {
      {
        unknown _indexOfInterest[132852] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132853] "expr temp" "temp"
        unknown call_tmp[660303] "expr temp" "maybe param" "maybe type" "temp"
        (660306 'move' call_tmp[660303](360060 call _value _mt[243] this[133812]))
        unknown call_tmp[660310] "expr temp" "maybe param" "maybe type" "temp"
        (660313 'move' call_tmp[660310](132848 call(132843 call (partial) dsiLocalSubdomains _mt[243] call_tmp[660303]) loc[132822]))
        (132862 'move' _iterator[132853](132860 call _getIterator call_tmp[660310]))
        Defer
        {
          {
            (132879 call _freeIterator _iterator[132853])
          }
        }
        { scopeless type
          (132868 'move' _indexOfInterest[132852](132865 call iteratorIndex _iterator[132853]))
        }
        ForLoop[132854]
        {
          unknown d[132872] "index var" "insert auto destroy"
          (480349 'end of statement')
          (132874 'move' d[132872] _indexOfInterest[132852])
          (480350 'end of statement' d[132872])
          unknown yret[518287] "YVV" "temp"
          (518290 'move' yret[518287](518289 'deref' d[132872]))
          (518292 yield yret[518287])
          (480352 'end of statement' d[132872])
          label _continueLabel[132857]
          _indexOfInterest[132852]
          _iterator[132853]
        }
        label _breakLabel[132858]
      }
    }
    (518278 return ret[518276])
  }
  function _array[133594](?).chpl__isDense1DArray[132896](arg _mt[133818]:_MT[238], arg this[133816]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518296] "RVV" "param" "temp"
    unknown tmp[425657] "maybe param" "temp"
    unknown tmp[425678] "maybe param" "temp"
    (425689 'move' tmp[425678](132901 call isRectangularArr this[133816]))
    unknown call_tmp[660315] "expr temp" "maybe param" "maybe type" "temp"
    (660318 'move' call_tmp[660315](425691 call _cond_invalid tmp[425678]))
    if call_tmp[660315]
    {
      (425694 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566488] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566489] "maybe param" "temp"
    unknown call_tmp[660320] "expr temp" "maybe param" "maybe type" "temp"
    (660323 'move' call_tmp[660320](425679 call isTrue tmp[425678]))
    (566494 'move' tmp[566489](566492 call _cond_test call_tmp[660320]))
    if tmp[566489]
    {
      unknown tmp[566496] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660327] "expr temp" "maybe param" "maybe type" "temp"
      (660330 'move' call_tmp[660327](132903 call rank _mt[243] this[133816]))
      unknown call_tmp[660332] "expr temp" "maybe param" "maybe type" "temp"
      (660335 'move' call_tmp[660332](132907 call == call_tmp[660327] 1))
      (566498 'move' tmp[566496](425682 call isTrue call_tmp[660332]))
      (566503 'move' tmp[566488](566500 '_paramFoldLogical' tmp[566489] tmp[566496]))
    }
    {
      (566508 'move' tmp[566488](566505 '_paramFoldLogical' tmp[566489] 0))
    }
    (425668 'move' tmp[425657] tmp[566488])
    unknown call_tmp[660337] "expr temp" "maybe param" "maybe type" "temp"
    (660340 'move' call_tmp[660337](425670 call _cond_invalid tmp[425657]))
    if call_tmp[660337]
    {
      (425673 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566515] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566516] "maybe param" "temp"
    unknown call_tmp[660342] "expr temp" "maybe param" "maybe type" "temp"
    (660345 'move' call_tmp[660342](425658 call isTrue tmp[425657]))
    (566521 'move' tmp[566516](566519 call _cond_test call_tmp[660342]))
    if tmp[566516]
    {
      unknown tmp[566523] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660349] "expr temp" "maybe param" "maybe type" "temp"
      (660352 'move' call_tmp[660349](132912 call _value _mt[243] this[133816]))
      unknown call_tmp[660356] "expr temp" "maybe param" "maybe type" "temp"
      (660359 'move' call_tmp[660356](132915 call stridable _mt[243] call_tmp[660349]))
      unknown call_tmp[660361] "expr temp" "maybe param" "maybe type" "temp"
      (660364 'move' call_tmp[660361](132918 call ! call_tmp[660356]))
      (566525 'move' tmp[566523](425661 call isTrue call_tmp[660361]))
      (566530 'move' tmp[566515](566527 '_paramFoldLogical' tmp[566516] tmp[566523]))
    }
    {
      (566535 'move' tmp[566515](566532 '_paramFoldLogical' tmp[566516] 0))
    }
    (518301 'move' ret[518296](518300 'deref' tmp[566515]))
    (518298 return ret[518296])
  }
  function _array[133594](?).chpl__assertSingleArrayDomain[132933](arg _mt[133822]:_MT[238], arg this[133820]:_array[133594](?), arg fnName[132930]:string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660368] "expr temp" "maybe param" "maybe type" "temp"
    (660371 'move' call_tmp[660368](132936 call _dom _mt[243] this[133820]))
    unknown call_tmp[660375] "expr temp" "maybe param" "maybe type" "temp"
    (660378 'move' call_tmp[660375](132939 call _value _mt[243] call_tmp[660368]))
    unknown call_tmp[660382] "expr temp" "maybe param" "maybe type" "temp"
    (660385 'move' call_tmp[660382](132942 call _arrs _mt[243] call_tmp[660375]))
    unknown call_tmp[660389] "expr temp" "maybe param" "maybe type" "temp"
    (660392 'move' call_tmp[660389](132945 call size _mt[243] call_tmp[660382]))
    unknown call_tmp[660394] "expr temp" "maybe param" "maybe type" "temp"
    (660397 'move' call_tmp[660394](132949 call != call_tmp[660389] 1))
    unknown call_tmp[660399] "expr temp" "maybe param" "maybe type" "temp"
    (660402 'move' call_tmp[660399](132994 call _cond_test call_tmp[660394]))
    if call_tmp[660399]
    {
      unknown call_tmp[660404] "expr temp" "maybe param" "maybe type" "temp"
      (660407 'move' call_tmp[660404](132970 call + "cannot call " fnName[132930]))
      unknown call_tmp[660409] "expr temp" "maybe param" "maybe type" "temp"
      (660412 'move' call_tmp[660409](132989 call + call_tmp[660404] " on an array defined over a domain with multiple arrays"))
      (132992 call halt call_tmp[660409])
    }
    (518303 return _void[55])
  }
  function _array[133594](?).isEmpty[133004](arg _mt[133826]:_MT[238], arg this[133824]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518307] "RVV" "temp"
    unknown call_tmp[660416] "expr temp" "maybe param" "maybe type" "temp"
    (660419 'move' call_tmp[660416](133008 call size _mt[243] this[133824]))
    unknown call_tmp[660421] "expr temp" "maybe param" "maybe type" "temp"
    (660424 'move' call_tmp[660421](133012 call == call_tmp[660416] 0))
    (518313 'move' ret[518307](518312 'coerce' call_tmp[660421] bool[10]))
    (518309 return ret[518307])
  }
  { scopeless type
    bool[10]
  }
  function _array[133594](?).head[133022](arg _mt[133830]:_MT[238], arg this[133828]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518317] "RVV" "temp"
    unknown call_tmp[660428] "expr temp" "maybe param" "maybe type" "temp"
    (660431 'move' call_tmp[660428](133033 call _dom _mt[243] this[133828]))
    unknown call_tmp[660435] "expr temp" "maybe param" "maybe type" "temp"
    (660438 'move' call_tmp[660435](133036 call alignedLow _mt[243] call_tmp[660428]))
    unknown call_tmp[660440] "expr temp" "maybe param" "maybe type" "temp"
    (660443 'move' call_tmp[660440](133040 call this[133828] call_tmp[660435]))
    unknown call_tmp[660447] "expr temp" "maybe param" "maybe type" "temp"
    (660450 'move' call_tmp[660447](518324 call _value _mt[243] this[133828]))
    unknown call_tmp[660454] "expr temp" "maybe param" "maybe type" "temp"
    (660457 'move' call_tmp[660454](518322 call eltType _mt[243] call_tmp[660447]))
    (518329 'move' ret[518317](518328 'coerce' call_tmp[660440] call_tmp[660454]))
    (518319 return ret[518317])
  }
  { scopeless type
    unknown call_tmp[660461] "expr temp" "maybe param" "maybe type" "temp"
    (660464 'move' call_tmp[660461](133025 call _value _mt[243] this[133828]))
    (133028 call eltType _mt[243] call_tmp[660461])
  }
  function _array[133594](?).tail[133049](arg _mt[133834]:_MT[238], arg this[133832]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518333] "RVV" "temp"
    unknown call_tmp[660470] "expr temp" "maybe param" "maybe type" "temp"
    (660473 'move' call_tmp[660470](133060 call _dom _mt[243] this[133832]))
    unknown call_tmp[660477] "expr temp" "maybe param" "maybe type" "temp"
    (660480 'move' call_tmp[660477](133063 call alignedHigh _mt[243] call_tmp[660470]))
    unknown call_tmp[660482] "expr temp" "maybe param" "maybe type" "temp"
    (660485 'move' call_tmp[660482](133067 call this[133832] call_tmp[660477]))
    unknown call_tmp[660489] "expr temp" "maybe param" "maybe type" "temp"
    (660492 'move' call_tmp[660489](518340 call _value _mt[243] this[133832]))
    unknown call_tmp[660496] "expr temp" "maybe param" "maybe type" "temp"
    (660499 'move' call_tmp[660496](518338 call eltType _mt[243] call_tmp[660489]))
    (518345 'move' ret[518333](518344 'coerce' call_tmp[660482] call_tmp[660496]))
    (518335 return ret[518333])
  }
  { scopeless type
    unknown call_tmp[660503] "expr temp" "maybe param" "maybe type" "temp"
    (660506 'move' call_tmp[660503](133052 call _value _mt[243] this[133832]))
    (133055 call eltType _mt[243] call_tmp[660503])
  }
  function _array[133594](?).back[133076](arg _mt[133838]:_MT[238], arg this[133836]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518349] "RVV" "temp"
    unknown tmp[425699] "maybe param" "temp"
    unknown call_tmp[660510] "expr temp" "maybe param" "maybe type" "temp"
    (660513 'move' call_tmp[660510](133081 call isRectangularArr this[133836]))
    (425710 'move' tmp[425699](133082 call ! call_tmp[660510]))
    unknown call_tmp[660515] "expr temp" "maybe param" "maybe type" "temp"
    (660518 'move' call_tmp[660515](425712 call _cond_invalid tmp[425699]))
    if call_tmp[660515]
    {
      (425715 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566542] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566543] "maybe param" "temp"
    unknown call_tmp[660520] "expr temp" "maybe param" "maybe type" "temp"
    (660523 'move' call_tmp[660520](425700 call isTrue tmp[425699]))
    (566548 'move' tmp[566543](566546 call _cond_test call_tmp[660520]))
    if tmp[566543]
    {
      (566553 'move' tmp[566542](566550 '_paramFoldLogical' tmp[566543] 1))
    }
    {
      unknown tmp[566555] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660527] "expr temp" "maybe param" "maybe type" "temp"
      (660530 'move' call_tmp[660527](133085 call rank _mt[243] this[133836]))
      unknown call_tmp[660532] "expr temp" "maybe param" "maybe type" "temp"
      (660535 'move' call_tmp[660532](133089 call != call_tmp[660527] 1))
      (566557 'move' tmp[566555](425704 call isTrue call_tmp[660532]))
      (566562 'move' tmp[566542](566559 '_paramFoldLogical' tmp[566543] tmp[566555]))
    }
    unknown call_tmp[660537] "expr temp" "maybe param" "maybe type" "temp"
    (660540 'move' call_tmp[660537](133114 call _cond_test tmp[566542]))
    if call_tmp[660537]
    {
      (133112 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425720] "maybe param" "temp"
    (425731 'move' tmp[425720] 1)
    unknown call_tmp[660542] "expr temp" "maybe param" "maybe type" "temp"
    (660545 'move' call_tmp[660542](425733 call _cond_invalid tmp[425720]))
    if call_tmp[660542]
    {
      (425736 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566569] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566570] "maybe param" "temp"
    unknown call_tmp[660547] "expr temp" "maybe param" "maybe type" "temp"
    (660550 'move' call_tmp[660547](425721 call isTrue tmp[425720]))
    (566575 'move' tmp[566570](566573 call _cond_test call_tmp[660547]))
    if tmp[566570]
    {
      unknown tmp[566577] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660554] "expr temp" "maybe param" "maybe type" "temp"
      (660557 'move' call_tmp[660554](133123 call(384369 call (partial) isEmpty _mt[243] this[133836])))
      (566579 'move' tmp[566577](425724 call isTrue call_tmp[660554]))
      (566584 'move' tmp[566569](566581 '_paramFoldLogical' tmp[566570] tmp[566577]))
    }
    {
      (566589 'move' tmp[566569](566586 '_paramFoldLogical' tmp[566570] 0))
    }
    unknown call_tmp[660559] "expr temp" "maybe param" "maybe type" "temp"
    (660562 'move' call_tmp[660559](133147 call _cond_test tmp[566569]))
    if call_tmp[660559]
    {
      (133145 call halt "back called on an empty array")
    }
    unknown call_tmp[660566] "expr temp" "maybe param" "maybe type" "temp"
    (660569 'move' call_tmp[660566](133154 call _dom _mt[243] this[133836]))
    unknown call_tmp[660573] "expr temp" "maybe param" "maybe type" "temp"
    (660576 'move' call_tmp[660573](133157 call high _mt[243] call_tmp[660566]))
    unknown call_tmp[660578] "expr temp" "maybe param" "maybe type" "temp"
    (660581 'move' call_tmp[660578](133161 call this[133836] call_tmp[660573]))
    (518354 'move' ret[518349](518353 'deref' call_tmp[660578]))
    (518351 return ret[518349])
  }
  function _array[133594](?).front[133168](arg _mt[133842]:_MT[238], arg this[133840]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518358] "RVV" "temp"
    unknown tmp[425741] "maybe param" "temp"
    unknown call_tmp[660583] "expr temp" "maybe param" "maybe type" "temp"
    (660586 'move' call_tmp[660583](133173 call isRectangularArr this[133840]))
    (425752 'move' tmp[425741](133174 call ! call_tmp[660583]))
    unknown call_tmp[660588] "expr temp" "maybe param" "maybe type" "temp"
    (660591 'move' call_tmp[660588](425754 call _cond_invalid tmp[425741]))
    if call_tmp[660588]
    {
      (425757 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566596] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566597] "maybe param" "temp"
    unknown call_tmp[660593] "expr temp" "maybe param" "maybe type" "temp"
    (660596 'move' call_tmp[660593](425742 call isTrue tmp[425741]))
    (566602 'move' tmp[566597](566600 call _cond_test call_tmp[660593]))
    if tmp[566597]
    {
      (566607 'move' tmp[566596](566604 '_paramFoldLogical' tmp[566597] 1))
    }
    {
      unknown tmp[566609] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660600] "expr temp" "maybe param" "maybe type" "temp"
      (660603 'move' call_tmp[660600](133177 call rank _mt[243] this[133840]))
      unknown call_tmp[660605] "expr temp" "maybe param" "maybe type" "temp"
      (660608 'move' call_tmp[660605](133181 call != call_tmp[660600] 1))
      (566611 'move' tmp[566609](425746 call isTrue call_tmp[660605]))
      (566616 'move' tmp[566596](566613 '_paramFoldLogical' tmp[566597] tmp[566609]))
    }
    unknown call_tmp[660610] "expr temp" "maybe param" "maybe type" "temp"
    (660613 'move' call_tmp[660610](133206 call _cond_test tmp[566596]))
    if call_tmp[660610]
    {
      (133204 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425762] "maybe param" "temp"
    (425773 'move' tmp[425762] 1)
    unknown call_tmp[660615] "expr temp" "maybe param" "maybe type" "temp"
    (660618 'move' call_tmp[660615](425775 call _cond_invalid tmp[425762]))
    if call_tmp[660615]
    {
      (425778 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566623] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566624] "maybe param" "temp"
    unknown call_tmp[660620] "expr temp" "maybe param" "maybe type" "temp"
    (660623 'move' call_tmp[660620](425763 call isTrue tmp[425762]))
    (566629 'move' tmp[566624](566627 call _cond_test call_tmp[660620]))
    if tmp[566624]
    {
      unknown tmp[566631] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660627] "expr temp" "maybe param" "maybe type" "temp"
      (660630 'move' call_tmp[660627](133215 call(384376 call (partial) isEmpty _mt[243] this[133840])))
      (566633 'move' tmp[566631](425766 call isTrue call_tmp[660627]))
      (566638 'move' tmp[566623](566635 '_paramFoldLogical' tmp[566624] tmp[566631]))
    }
    {
      (566643 'move' tmp[566623](566640 '_paramFoldLogical' tmp[566624] 0))
    }
    unknown call_tmp[660632] "expr temp" "maybe param" "maybe type" "temp"
    (660635 'move' call_tmp[660632](133239 call _cond_test tmp[566623]))
    if call_tmp[660632]
    {
      (133237 call halt "front called on an empty array")
    }
    unknown call_tmp[660639] "expr temp" "maybe param" "maybe type" "temp"
    (660642 'move' call_tmp[660639](133246 call _dom _mt[243] this[133840]))
    unknown call_tmp[660646] "expr temp" "maybe param" "maybe type" "temp"
    (660649 'move' call_tmp[660646](133249 call low _mt[243] call_tmp[660639]))
    unknown call_tmp[660651] "expr temp" "maybe param" "maybe type" "temp"
    (660654 'move' call_tmp[660651](133253 call this[133840] call_tmp[660646]))
    (518363 'move' ret[518358](518362 'deref' call_tmp[660651]))
    (518360 return ret[518358])
  }
  function _array[133594](?).reverse[133260](arg _mt[133846]:_MT[238], arg this[133844]:_array[133594](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660658] "expr temp" "maybe param" "maybe type" "temp"
    (660661 'move' call_tmp[660658](133264 call(384383 call (partial) chpl__isDense1DArray _mt[243] this[133844])))
    unknown call_tmp[660663] "expr temp" "maybe param" "maybe type" "temp"
    (660666 'move' call_tmp[660663](133265 call ! call_tmp[660658]))
    unknown call_tmp[660668] "expr temp" "maybe param" "maybe type" "temp"
    (660671 'move' call_tmp[660668](133288 call _cond_test call_tmp[660663]))
    if call_tmp[660668]
    {
      (133286 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    unknown call_tmp[660675] "expr temp" "maybe param" "maybe type" "temp"
    (660678 'move' call_tmp[660675](133295 call _dom _mt[243] this[133844]))
    unknown call_tmp[660682] "maybe param" "maybe type" "temp"
    (660685 'move' call_tmp[660682](133298 call low _mt[243] call_tmp[660675]))
    const lo[133301] "dead at end of block" "const" "insert auto destroy"
    (543070 'init var' lo[133301] call_tmp[660682])
    unknown call_tmp[660689] "expr temp" "maybe param" "maybe type" "temp"
    (660692 'move' call_tmp[660689](133305 call _dom _mt[243] this[133844]))
    unknown call_tmp[660696] "expr temp" "maybe param" "maybe type" "temp"
    (660699 'move' call_tmp[660696](133308 call size _mt[243] call_tmp[660689]))
    unknown call_tmp[660701] "maybe param" "maybe type" "temp"
    (660704 'move' call_tmp[660701](133312 call / call_tmp[660696] 2))
    const mid[133314] "dead at end of block" "const" "insert auto destroy"
    (543072 'init var' mid[133314] call_tmp[660701])
    unknown call_tmp[660708] "expr temp" "maybe param" "maybe type" "temp"
    (660711 'move' call_tmp[660708](133318 call _dom _mt[243] this[133844]))
    unknown call_tmp[660715] "maybe param" "maybe type" "temp"
    (660718 'move' call_tmp[660715](133321 call high _mt[243] call_tmp[660708]))
    const hi[133324] "dead at end of block" "const" "insert auto destroy"
    (543074 'init var' hi[133324] call_tmp[660715])
    (133327 'end of statement')
    {
      unknown _indexOfInterest[133353] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133354] "expr temp" "temp"
      unknown call_tmp[660720] "expr temp" "maybe param" "maybe type" "temp"
      (660723 'move' call_tmp[660720](133370 call chpl_direct_counted_range_iter 0 mid[133314]))
      (133363 'move' _iterator[133354](133361 call _getIterator call_tmp[660720]))
      Defer
      {
        {
          (133386 call _freeIterator _iterator[133354])
        }
      }
      { scopeless type
        (133375 'move' _indexOfInterest[133353](133372 call iteratorIndex _iterator[133354]))
      }
      ForLoop[133355]
      {
        unknown i[133379] "index var" "insert auto destroy"
        (480373 'end of statement')
        (133381 'move' i[133379] _indexOfInterest[133353])
        (480374 'end of statement' i[133379])
        {
          unknown call_tmp[660725] "expr temp" "maybe param" "maybe type" "temp"
          (660728 'move' call_tmp[660725](133338 call + lo[133301] i[133379]))
          unknown call_tmp[660730] "expr temp" "maybe param" "maybe type" "temp"
          (660733 'move' call_tmp[660730](133341 call this[133844] call_tmp[660725]))
          unknown call_tmp[660735] "expr temp" "maybe param" "maybe type" "temp"
          (660738 'move' call_tmp[660735](133345 call - hi[133324] i[133379]))
          unknown call_tmp[660740] "expr temp" "maybe param" "maybe type" "temp"
          (660743 'move' call_tmp[660740](133348 call this[133844] call_tmp[660735]))
          (133349 call <=> call_tmp[660730] call_tmp[660740])
          (480376 'end of statement' lo[133301] i[133379] hi[133324] i[133379])
        }
        label _continueLabel[133358]
        _indexOfInterest[133353]
        _iterator[133354]
      }
      label _breakLabel[133359]
    }
    (518365 return _void[55])
  }
  function _array[133594](?).find[133404](arg _mt[133850]:_MT[238], arg this[133848]:_array[133594](?), arg val[133401] :
  (133398 call eltType _mt[243] this[133848])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518369] "RVV" "temp"
    {
      unknown _indexOfInterest[133442] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133443] "expr temp" "temp"
      unknown call_tmp[660749] "expr temp" "maybe param" "maybe type" "temp"
      (660752 'move' call_tmp[660749](133419 call _dom _mt[243] this[133848]))
      (133452 'move' _iterator[133443](133450 call _getIterator call_tmp[660749]))
      Defer
      {
        {
          (133469 call _freeIterator _iterator[133443])
        }
      }
      { scopeless type
        (133458 'move' _indexOfInterest[133442](133455 call iteratorIndex _iterator[133443]))
      }
      ForLoop[133444]
      {
        unknown i[133462] "index var" "insert auto destroy"
        (480382 'end of statement')
        (133464 'move' i[133462] _indexOfInterest[133442])
        (480383 'end of statement' i[133462])
        {
          unknown call_tmp[660754] "expr temp" "maybe param" "maybe type" "temp"
          (660757 'move' call_tmp[660754](133425 call this[133848] i[133462]))
          unknown call_tmp[660759] "expr temp" "maybe param" "maybe type" "temp"
          (660762 'move' call_tmp[660759](133427 call == call_tmp[660754] val[133401]))
          unknown call_tmp[660764] "expr temp" "maybe param" "maybe type" "temp"
          (660767 'move' call_tmp[660764](133436 call _cond_test call_tmp[660759]))
          if call_tmp[660764]
          {
            unknown call_tmp[660769] "expr temp" "maybe param" "maybe type" "temp"
            (660772 'move' call_tmp[660769](133432 call _build_tuple 1 i[133462]))
            unknown call_tmp[660776] "expr temp" "maybe param" "maybe type" "temp"
            (660779 'move' call_tmp[660776](518379 call _dom _mt[243] this[133848]))
            unknown call_tmp[660781] "expr temp" "maybe param" "maybe type" "temp"
            (660784 'move' call_tmp[660781](518377 call chpl__buildIndexType call_tmp[660776]))
            unknown call_tmp[660786] "expr temp" "maybe param" "maybe type" "temp"
            (660789 'move' call_tmp[660786](518374 call _build_tuple bool[10] call_tmp[660781]))
            (518383 'move' ret[518369](518382 'coerce' call_tmp[660769] call_tmp[660786]))
            gotoReturn _end_find[518367] _end_find[518367]
            (480385 'end of statement' i[133462])
          }
        }
        label _continueLabel[133447]
        _indexOfInterest[133442]
        _iterator[133443]
      }
      label _breakLabel[133448]
    }
    unknown arbInd[133484] "dead at end of block" "insert auto destroy"
    unknown call_tmp[660793] "expr temp" "maybe param" "maybe type" "temp"
    (660796 'move' call_tmp[660793](133478 call _dom _mt[243] this[133848]))
    unknown call_tmp[660798] "expr temp" "maybe param" "maybe type" "temp"
    (660801 'move' call_tmp[660798](133482 call chpl__buildIndexType call_tmp[660793]))
    (543076 'default init var' arbInd[133484] call_tmp[660798])
    (133487 'end of statement')
    unknown call_tmp[660803] "expr temp" "maybe param" "maybe type" "temp"
    (660806 'move' call_tmp[660803](133491 call _build_tuple 0 arbInd[133484]))
    unknown call_tmp[660810] "expr temp" "maybe param" "maybe type" "temp"
    (660813 'move' call_tmp[660810](518393 call _dom _mt[243] this[133848]))
    unknown call_tmp[660815] "expr temp" "maybe param" "maybe type" "temp"
    (660818 'move' call_tmp[660815](518391 call chpl__buildIndexType call_tmp[660810]))
    unknown call_tmp[660820] "expr temp" "maybe param" "maybe type" "temp"
    (660823 'move' call_tmp[660820](518388 call _build_tuple bool[10] call_tmp[660815]))
    (518397 'move' ret[518369](518396 'coerce' call_tmp[660803] call_tmp[660820]))
    gotoReturn _end_find[518367] _end_find[518367]
    (480387 'end of statement' arbInd[133484])
    label _end_find[518367]
    (518371 return ret[518369])
  }
  { scopeless type
    unknown call_tmp[660827] "expr temp" "maybe param" "maybe type" "temp"
    (660830 'move' call_tmp[660827](133408 call _dom _mt[243] this[133848]))
    unknown call_tmp[660832] "expr temp" "maybe param" "maybe type" "temp"
    (660835 'move' call_tmp[660832](133412 call chpl__buildIndexType call_tmp[660827]))
    (133415 call _build_tuple bool[10] call_tmp[660832])
  }
  function _array[133594](?).count[133507](arg _mt[133854]:_MT[238], arg this[133852]:_array[133594](?), arg val[133504] :
  (133501 call eltType _mt[243] this[133852])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518403] "RVV" "temp"
    unknown call_tmp[660839] "expr temp" "maybe param" "maybe type" "temp"
    (660842 'move' call_tmp[660839](133513 call == this[133852] val[133504]))
    unknown call_tmp[660844] "expr temp" "maybe param" "maybe type" "temp"
    (660847 'move' call_tmp[660844](133515 'reduce' SumReduceScanOp[376412](?) call_tmp[660839] 0))
    (518409 'move' ret[518403](518408 'coerce' call_tmp[660844] int(64)[13]))
    (518405 return ret[518403])
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133594](?).shape[133525](arg _mt[133858]:_MT[238], arg this[133856]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518413] "RVV" "temp"
    unknown call_tmp[660851] "expr temp" "maybe param" "maybe type" "temp"
    (660854 'move' call_tmp[660851](133528 call _dom _mt[243] this[133856]))
    unknown call_tmp[660858] "expr temp" "maybe param" "maybe type" "temp"
    (660861 'move' call_tmp[660858](133533 call shape _mt[243] call_tmp[660851]))
    (518418 'move' ret[518413](518417 'deref' call_tmp[660858]))
    (518415 return ret[518413])
  }
  function _array[133594](?)._scan[133545](arg _mt[133862]:_MT[238], arg this[133860]:_array[133594](?), arg op[133543]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518422] "RVV" "temp"
    unknown call_tmp[660865] "expr temp" "maybe param" "maybe type" "temp"
    (660868 'move' call_tmp[660865](360092 call _value _mt[243] this[133860]))
    unknown call_tmp[660874] "expr temp" "maybe param" "maybe type" "temp"
    (660877 'move' call_tmp[660874](133583 call _dom _mt[243] this[133860]))
    unknown call_tmp[660879] "expr temp" "maybe param" "maybe type" "temp"
    (660882 'move' call_tmp[660879](133586 call(133577 call (partial) doiScan _mt[243] call_tmp[660865]) op[133543] call_tmp[660874]))
    (518427 'move' ret[518422](518426 'deref' call_tmp[660879]))
    (518424 return ret[518422])
  }
  where {
    unknown call_tmp[660886] "expr temp" "maybe param" "maybe type" "temp"
    (660889 'move' call_tmp[660886](384402 call _value _mt[243] this[133860]))
    unknown call_tmp[660893] "expr temp" "maybe param" "maybe type" "temp"
    (660896 'move' call_tmp[660893](133572 call _dom _mt[243] this[133860]))
    (133575 call canResolveMethod module=[255] Reflection[224901] call_tmp[660886] "doiScan" op[133543] call_tmp[660893])
    (360085 'referenced modules list' Reflection[224901])
  }
  type _array[133594](?) val _pid[128421]:int(64)[13] int(64)[13] unknown _instance[128425] "alias scope from this" "owned" val _unowned[128430]:bool[10] bool[10] forwarding ( )
  function _do_destroy_arr[133871](arg _unowned[133868]:bool[10], arg _instance[133873]:_any[178](?), arg deinitElts[133876] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[660898] "expr temp" "maybe param" "maybe type" "temp"
    (660901 'move' call_tmp[660898](133880 call ! _unowned[133868]))
    unknown call_tmp[660903] "expr temp" "maybe param" "maybe type" "temp"
    (660906 'move' call_tmp[660903](134119 call _cond_test call_tmp[660898]))
    if call_tmp[660903]
    {
      const tmp[134095] "const" "temp"
      unknown call_tmp[660908] "expr temp" "maybe param" "maybe type" "temp"
      (660911 'move' call_tmp[660908](134092 '_wide_get_locale' _instance[133873]))
      (134097 'move' tmp[134095](134093 'deref' call_tmp[660908]))
      {
        {
          unknown call_tmp[660915] "expr temp" "maybe param" "maybe type" "temp"
          (660918 'move' call_tmp[660915](133888 call(133884 call (partial) isSliceArrayView _mt[243] _instance[133873])))
          unknown call_tmp[660920] "maybe param" "maybe type" "temp"
          (660923 'move' call_tmp[660920](133889 call ! call_tmp[660915]))
          unknown arrIsInList[133891] "dead at end of block" "param"
          (543078 'init var' arrIsInList[133891] call_tmp[660920])
          (133894 'end of statement')
          unknown call_tmp[660927] "maybe param" "maybe type" "temp"
          (660930 'move' call_tmp[660927](133907 call(133902 call (partial) remove _mt[243] _instance[133873]) arrIsInList[133891]))
          unknown tmp[133908] "dead at end of block" "insert auto destroy" "temp"
          (543080 'init var' tmp[133908] call_tmp[660927])
          (133915 call _check_tuple_var_decl tmp[133908] 2)
          (480392 'end of statement')
          unknown call_tmp[660932] "maybe param" "maybe type" "temp"
          (660935 'move' call_tmp[660932](133909 call tmp[133908] 0))
          unknown arrToFree[133896] "dead at end of block" "insert auto destroy"
          (543082 'init var' arrToFree[133896] call_tmp[660932])
          unknown call_tmp[660937] "maybe param" "maybe type" "temp"
          (660940 'move' call_tmp[660937](133912 call tmp[133908] 1))
          unknown domToRemove[133898] "dead at end of block" "insert auto destroy"
          (543084 'init var' domToRemove[133898] call_tmp[660937])
          (133920 'end of statement')
          unknown domToFree[133925] "dead at end of block" "insert auto destroy"
          (543086 'init var' domToFree[133925] nil[44] unmanaged BaseDom?[415503])
          (133928 'end of statement')
          unknown distToRemove[133933] "dead at end of block" "insert auto destroy"
          (543088 'init var' distToRemove[133933] nil[44] unmanaged BaseDist?[415497])
          (133936 'end of statement')
          unknown distToFree[133941] "dead at end of block" "insert auto destroy"
          (543090 'init var' distToFree[133941] nil[44] unmanaged BaseDist?[415497])
          (133944 'end of statement')
          unknown domIsPrivatized[133946] "dead at end of block" "insert auto destroy"
          (543092 'init var' domIsPrivatized[133946] 0)
          (133949 'end of statement')
          const instanceDom[133951] "dead at end of block" "const" "insert auto destroy"
          (543094 'init var' instanceDom[133951] domToRemove[133898])
          (133954 'end of statement')
          unknown call_tmp[660942] "expr temp" "maybe param" "maybe type" "temp"
          (660945 'move' call_tmp[660942](133957 call != domToRemove[133898] nil[44]))
          unknown call_tmp[660947] "expr temp" "maybe param" "maybe type" "temp"
          (660950 'move' call_tmp[660947](133992 call _cond_test call_tmp[660942]))
          if call_tmp[660947]
          {
            unknown tmp[492258] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[492283] "maybe param" "temp"
            (492286 'move' tmp[492283](492284 'addr of' domToFree[133925]))
            unknown tmp[492294] "maybe param" "temp"
            (492297 'move' tmp[492294](492295 'addr of' distToRemove[133933]))
            unknown call_tmp[660952] "expr temp" "maybe param" "maybe type" "temp"
            (660955 'move' call_tmp[660952](133965 call postfix! domToRemove[133898]))
            (492259 'move' tmp[492258](133971 call(133967 call (partial) remove _mt[243] call_tmp[660952])))
            { scopeless
              unknown call_tmp[660961] "expr temp" "maybe param" "maybe type" "temp"
              (660964 'move' call_tmp[660961](492265 call size _mt[243] tmp[492258]))
              unknown call_tmp[660966] "expr temp" "maybe param" "maybe type" "temp"
              (660969 'move' call_tmp[660966](492268 call != 2 call_tmp[660961]))
              unknown call_tmp[660971] "expr temp" "maybe param" "maybe type" "temp"
              (660974 'move' call_tmp[660971](492275 call _cond_test call_tmp[660966]))
              if call_tmp[660971]
              {
                (492271 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[660976] "expr temp" "maybe param" "maybe type" "temp"
            (660979 'move' call_tmp[660976](492281 call tmp[492258] 0))
            (492288 call = tmp[492283] call_tmp[660976])
            unknown call_tmp[660981] "expr temp" "maybe param" "maybe type" "temp"
            (660984 'move' call_tmp[660981](492292 call tmp[492258] 1))
            (492299 call = tmp[492294] call_tmp[660981])
            (480394 'end of statement' domToFree[133925] distToRemove[133933] domToRemove[133898])
            unknown tmp[425783] "maybe param" "temp"
            (425794 'move' tmp[425783] 1)
            unknown call_tmp[660986] "expr temp" "maybe param" "maybe type" "temp"
            (660989 'move' call_tmp[660986](425796 call _cond_invalid tmp[425783]))
            if call_tmp[660986]
            {
              (425799 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566650] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566651] "maybe param" "temp"
            unknown call_tmp[660991] "expr temp" "maybe param" "maybe type" "temp"
            (660994 'move' call_tmp[660991](425784 call isTrue tmp[425783]))
            (566656 'move' tmp[566651](566654 call _cond_test call_tmp[660991]))
            if tmp[566651]
            {
              unknown tmp[566658] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[660996] "expr temp" "maybe param" "maybe type" "temp"
              (660999 'move' call_tmp[660996](133979 call postfix! domToRemove[133898]))
              unknown call_tmp[661003] "expr temp" "maybe param" "maybe type" "temp"
              (661006 'move' call_tmp[661003](133981 call pid _mt[243] call_tmp[660996]))
              unknown call_tmp[661008] "expr temp" "maybe param" "maybe type" "temp"
              (661011 'move' call_tmp[661008](133985 call != call_tmp[661003] nullPid[113718]))
              (566660 'move' tmp[566658](425787 call isTrue call_tmp[661008]))
              (566665 'move' tmp[566650](566662 '_paramFoldLogical' tmp[566651] tmp[566658]))
            }
            {
              (566670 'move' tmp[566650](566667 '_paramFoldLogical' tmp[566651] 0))
            }
            (133989 call = domIsPrivatized[133946] tmp[566650])
            (480399 'end of statement' domIsPrivatized[133946] domToRemove[133898])
          }
          unknown distIsPrivatized[133997] "dead at end of block" "insert auto destroy"
          (543096 'init var' distIsPrivatized[133997] 0)
          (134000 'end of statement' domToRemove[133898])
          unknown call_tmp[661013] "expr temp" "maybe param" "maybe type" "temp"
          (661016 'move' call_tmp[661013](134003 call != distToRemove[133933] nil[44]))
          unknown call_tmp[661018] "expr temp" "maybe param" "maybe type" "temp"
          (661021 'move' call_tmp[661018](134034 call _cond_test call_tmp[661013]))
          if call_tmp[661018]
          {
            unknown call_tmp[661023] "expr temp" "maybe param" "maybe type" "temp"
            (661026 'move' call_tmp[661023](134007 call postfix! distToRemove[133933]))
            unknown call_tmp[661030] "expr temp" "maybe param" "maybe type" "temp"
            (661033 'move' call_tmp[661030](134013 call(134009 call (partial) remove _mt[243] call_tmp[661023])))
            (134014 call = distToFree[133941] call_tmp[661030])
            (480402 'end of statement' distToFree[133941] distToRemove[133933])
            unknown tmp[425804] "maybe param" "temp"
            (425815 'move' tmp[425804] 1)
            unknown call_tmp[661035] "expr temp" "maybe param" "maybe type" "temp"
            (661038 'move' call_tmp[661035](425817 call _cond_invalid tmp[425804]))
            if call_tmp[661035]
            {
              (425820 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566677] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566678] "maybe param" "temp"
            unknown call_tmp[661040] "expr temp" "maybe param" "maybe type" "temp"
            (661043 'move' call_tmp[661040](425805 call isTrue tmp[425804]))
            (566683 'move' tmp[566678](566681 call _cond_test call_tmp[661040]))
            if tmp[566678]
            {
              unknown tmp[566685] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661045] "expr temp" "maybe param" "maybe type" "temp"
              (661048 'move' call_tmp[661045](134021 call postfix! distToRemove[133933]))
              unknown call_tmp[661052] "expr temp" "maybe param" "maybe type" "temp"
              (661055 'move' call_tmp[661052](134023 call pid _mt[243] call_tmp[661045]))
              unknown call_tmp[661057] "expr temp" "maybe param" "maybe type" "temp"
              (661060 'move' call_tmp[661057](134027 call != call_tmp[661052] nullPid[113718]))
              (566687 'move' tmp[566685](425808 call isTrue call_tmp[661057]))
              (566692 'move' tmp[566677](566689 '_paramFoldLogical' tmp[566678] tmp[566685]))
            }
            {
              (566697 'move' tmp[566677](566694 '_paramFoldLogical' tmp[566678] 0))
            }
            (134031 call = distIsPrivatized[133997] tmp[566677])
            (480406 'end of statement' distIsPrivatized[133997] distToRemove[133933])
          }
          unknown call_tmp[661062] "expr temp" "maybe param" "maybe type" "temp"
          (661065 'move' call_tmp[661062](134040 call != arrToFree[133896] nil[44]))
          unknown call_tmp[661067] "expr temp" "maybe param" "maybe type" "temp"
          (661070 'move' call_tmp[661067](134053 call _cond_test call_tmp[661062]))
          if call_tmp[661067]
          {
            unknown call_tmp[661072] "expr temp" "maybe param" "maybe type" "temp"
            (661075 'move' call_tmp[661072](134048 call _isPrivatized _instance[133873]))
            (134051 call _delete_arr _instance[133873] call_tmp[661072](deinitElts = deinitElts[133876]))
          }
          unknown call_tmp[661077] "expr temp" "maybe param" "maybe type" "temp"
          (661080 'move' call_tmp[661077](134060 call != domToFree[133925] nil[44]))
          unknown call_tmp[661082] "expr temp" "maybe param" "maybe type" "temp"
          (661085 'move' call_tmp[661082](134070 call _cond_test call_tmp[661077]))
          if call_tmp[661082]
          {
            unknown call_tmp[661087] "expr temp" "maybe param" "maybe type" "temp"
            (661090 'move' call_tmp[661087](134064 call postfix! instanceDom[133951]))
            (134068 call _delete_dom call_tmp[661087] domIsPrivatized[133946])
            (480410 'end of statement' instanceDom[133951] domIsPrivatized[133946])
          }
          unknown call_tmp[661092] "expr temp" "maybe param" "maybe type" "temp"
          (661095 'move' call_tmp[661092](134077 call != distToFree[133941] nil[44]))
          unknown call_tmp[661097] "expr temp" "maybe param" "maybe type" "temp"
          (661100 'move' call_tmp[661097](134087 call _cond_test call_tmp[661092]))
          if call_tmp[661097]
          {
            unknown call_tmp[661102] "expr temp" "maybe param" "maybe type" "temp"
            (661105 'move' call_tmp[661102](134081 call postfix! distToFree[133941]))
            (134085 call _delete_dist call_tmp[661102] distIsPrivatized[133997])
            (480413 'end of statement' distToFree[133941] distIsPrivatized[133997])
          }
        }
        (134100 'on block' 0 tmp[134095])
      }
    }
    {
      unknown call_tmp[661107] "expr temp" "maybe param" "maybe type" "temp"
      (661110 'move' call_tmp[661107](134107 call chpl__isArrayView _instance[133873]))
      unknown call_tmp[661112] "expr temp" "maybe param" "maybe type" "temp"
      (661115 'move' call_tmp[661112](134114 call _cond_test call_tmp[661107]))
      if call_tmp[661112]
      {
        (134110 call chpl__delete _instance[133873])
      }
    }
    (518429 return _void[55])
  }
  function _do_destroy_array[134132](arg array[134129]:_array[133594](?), arg deinitElts[134135] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[661119] "expr temp" "maybe param" "maybe type" "temp"
    (661122 'move' call_tmp[661119](134140 call _unowned _mt[243] array[134129]))
    unknown call_tmp[661126] "expr temp" "maybe param" "maybe type" "temp"
    (661129 'move' call_tmp[661126](134145 call _instance _mt[243] array[134129]))
    (134149 call _do_destroy_arr call_tmp[661119] call_tmp[661126] deinitElts[134135])
    (518431 return _void[55])
  }
  function _deinitElementsIsParallel[134158](arg eltType[134156]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518435] "RVV" "param" "temp"
    (518440 'move' ret[518435](518439 'deref' 0))
    (518437 return ret[518435])
  }
  function _deinitElements[134172](arg array[134169]:_array[133594](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[661133] "expr temp" "maybe param" "maybe type" "temp"
    (661136 'move' call_tmp[661133](134177 call eltType _mt[243] array[134169]))
    unknown call_tmp[661138] "maybe param" "maybe type" "temp"
    (661141 'move' call_tmp[661138](134180 'needs auto destroy' call_tmp[661133]))
    unknown needsDestroy[134181] "dead at end of block" "param"
    (543098 'init var' needsDestroy[134181] call_tmp[661138])
    (134184 'end of statement')
    unknown call_tmp[661143] "expr temp" "maybe param" "maybe type" "temp"
    (661146 'move' call_tmp[661143](134255 call _cond_test needsDestroy[134181]))
    if call_tmp[661143]
    {
      unknown call_tmp[661150] "expr temp" "maybe param" "maybe type" "temp"
      (661153 'move' call_tmp[661150](134189 call eltType _mt[243] array[134169]))
      unknown call_tmp[661155] "expr temp" "maybe param" "maybe type" "temp"
      (661158 'move' call_tmp[661155](134193 call _deinitElementsIsParallel call_tmp[661150]))
      unknown call_tmp[661160] "expr temp" "maybe param" "maybe type" "temp"
      (661163 'move' call_tmp[661160](134250 call _cond_test call_tmp[661155]))
      if call_tmp[661160]
      {
        Forall {
          induction variables:
            
            unknown elt[134203] "index var" "insert auto destroy"
          iterated expressions:
            array[134169]
          shadow variables:
          other variables
            forall body
          {
            (134199 call chpl__autoDestroy elt[134203])
            (480419 'end of statement' elt[134203])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134216] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134217] "expr temp" "temp"
          (134226 'move' _iterator[134217](134224 call _getIterator array[134169]))
          Defer
          {
            {
              (134242 call _freeIterator _iterator[134217])
            }
          }
          { scopeless type
            (134231 'move' _indexOfInterest[134216](134228 call iteratorIndex _iterator[134217]))
          }
          ForLoop[134218]
          {
            unknown elt[134235] "index var" "insert auto destroy"
            (480422 'end of statement')
            (134237 'move' elt[134235] _indexOfInterest[134216])
            (480423 'end of statement' elt[134235])
            {
              (134213 call chpl__autoDestroy elt[134235])
              (480425 'end of statement' elt[134235])
            }
            label _continueLabel[134221]
            _indexOfInterest[134216]
            _iterator[134217]
          }
          label _breakLabel[134222]
        }
      }
    }
    unknown call_tmp[661167] "expr temp" "maybe param" "maybe type" "temp"
    (661170 'move' call_tmp[661167](134260 call _instance _mt[243] array[134169]))
    (134269 call(134265 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[661167]))
    (518442 return _void[55])
  }
  function _array[133594](?).equals[134280](arg _mt[134285]:_MT[238], arg this[134282]:_array[133594](?) :
  _array[133594](?), arg that[134277]:_array[133594](?)) : _unknown[51] "method"
  {
    unknown ret[518446] "RVV" "temp"
    unknown call_tmp[661176] "expr temp" "maybe param" "maybe type" "temp"
    (661179 'move' call_tmp[661176](134289 call _value _mt[243] this[134282]))
    unknown call_tmp[661183] "expr temp" "maybe param" "maybe type" "temp"
    (661186 'move' call_tmp[661183](134293 call _value _mt[243] that[134277]))
    unknown call_tmp[661188] "expr temp" "maybe param" "maybe type" "temp"
    (661191 'move' call_tmp[661188](134296 call == call_tmp[661176] call_tmp[661183]))
    unknown call_tmp[661193] "expr temp" "maybe param" "maybe type" "temp"
    (661196 'move' call_tmp[661193](134301 call _cond_test call_tmp[661188]))
    if call_tmp[661193]
    {
      (518452 'move' ret[518446](518451 'coerce' 1 bool[10]))
      gotoReturn _end_equals[518444] _end_equals[518444]
    }
    unknown call_tmp[661200] "expr temp" "maybe param" "maybe type" "temp"
    (661203 'move' call_tmp[661200](134308 call rank _mt[243] this[134282]))
    unknown call_tmp[661207] "expr temp" "maybe param" "maybe type" "temp"
    (661210 'move' call_tmp[661207](134312 call rank _mt[243] that[134277]))
    unknown call_tmp[661212] "expr temp" "maybe param" "maybe type" "temp"
    (661215 'move' call_tmp[661212](134315 call != call_tmp[661200] call_tmp[661207]))
    unknown call_tmp[661217] "expr temp" "maybe param" "maybe type" "temp"
    (661220 'move' call_tmp[661217](134320 call _cond_test call_tmp[661212]))
    if call_tmp[661217]
    {
      (518458 'move' ret[518446](518457 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518444] _end_equals[518444]
    }
    unknown call_tmp[661224] "expr temp" "maybe param" "maybe type" "temp"
    (661227 'move' call_tmp[661224](134326 call size _mt[243] this[134282]))
    unknown call_tmp[661231] "expr temp" "maybe param" "maybe type" "temp"
    (661234 'move' call_tmp[661231](134330 call size _mt[243] that[134277]))
    unknown call_tmp[661236] "expr temp" "maybe param" "maybe type" "temp"
    (661239 'move' call_tmp[661236](134333 call != call_tmp[661224] call_tmp[661231]))
    unknown call_tmp[661241] "expr temp" "maybe param" "maybe type" "temp"
    (661244 'move' call_tmp[661241](134338 call _cond_test call_tmp[661236]))
    if call_tmp[661241]
    {
      (518464 'move' ret[518446](518463 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518444] _end_equals[518444]
    }
    unknown tmp[425825] "maybe param" "temp"
    unknown call_tmp[661248] "expr temp" "maybe param" "maybe type" "temp"
    (661251 'move' call_tmp[661248](134345 call _dom _mt[243] this[134282]))
    (425836 'move' tmp[425825](134349 call isRectangularDom call_tmp[661248]))
    unknown call_tmp[661253] "expr temp" "maybe param" "maybe type" "temp"
    (661256 'move' call_tmp[661253](425838 call _cond_invalid tmp[425825]))
    if call_tmp[661253]
    {
      (425841 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566704] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566705] "maybe param" "temp"
    unknown call_tmp[661258] "expr temp" "maybe param" "maybe type" "temp"
    (661261 'move' call_tmp[661258](425826 call isTrue tmp[425825]))
    (566710 'move' tmp[566705](566708 call _cond_test call_tmp[661258]))
    if tmp[566705]
    {
      unknown tmp[566712] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661265] "expr temp" "maybe param" "maybe type" "temp"
      (661268 'move' call_tmp[661265](134352 call _dom _mt[243] that[134277]))
      unknown call_tmp[661270] "expr temp" "maybe param" "maybe type" "temp"
      (661273 'move' call_tmp[661270](134356 call isRectangularDom call_tmp[661265]))
      (566714 'move' tmp[566712](425829 call isTrue call_tmp[661270]))
      (566719 'move' tmp[566704](566716 '_paramFoldLogical' tmp[566705] tmp[566712]))
    }
    {
      (566724 'move' tmp[566704](566721 '_paramFoldLogical' tmp[566705] 0))
    }
    unknown call_tmp[661275] "expr temp" "maybe param" "maybe type" "temp"
    (661278 'move' call_tmp[661275](134449 call _cond_test tmp[566704]))
    if call_tmp[661275]
    {
      {
        unknown _indexOfInterest[134405] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134406] "expr temp" "temp"
        unknown call_tmp[661282] "expr temp" "maybe param" "maybe type" "temp"
        (661285 'move' call_tmp[661282](134421 call rank _mt[243] this[134282]))
        unknown call_tmp[661287] "expr temp" "maybe param" "maybe type" "temp"
        (661290 'move' call_tmp[661287](134425 call chpl_direct_counted_range_iter 0 call_tmp[661282]))
        (134415 'move' _iterator[134406](134413 call _getIterator call_tmp[661287]))
        Defer
        {
          {
            (134441 call _freeIterator _iterator[134406])
          }
        }
        { scopeless type
          (134430 'move' _indexOfInterest[134405](134427 call iteratorIndex _iterator[134406]))
        }
        ForLoop[134407]
        {
          unknown d[134434] "index var" "insert auto destroy"
          (480433 'end of statement')
          (134436 'move' d[134434] _indexOfInterest[134405])
          (480434 'end of statement' d[134434])
          unknown call_tmp[661294] "expr temp" "maybe param" "maybe type" "temp"
          (661297 'move' call_tmp[661294](134370 call _dom _mt[243] this[134282]))
          unknown call_tmp[661301] "expr temp" "maybe param" "maybe type" "temp"
          (661304 'move' call_tmp[661301](134378 call(134373 call (partial) dim _mt[243] call_tmp[661294]) d[134434]))
          unknown call_tmp[661308] "expr temp" "maybe param" "maybe type" "temp"
          (661311 'move' call_tmp[661308](134379 call size _mt[243] call_tmp[661301]))
          unknown call_tmp[661315] "expr temp" "maybe param" "maybe type" "temp"
          (661318 'move' call_tmp[661315](134383 call _dom _mt[243] that[134277]))
          unknown call_tmp[661322] "expr temp" "maybe param" "maybe type" "temp"
          (661325 'move' call_tmp[661322](134391 call(134386 call (partial) dim _mt[243] call_tmp[661315]) d[134434]))
          unknown call_tmp[661329] "expr temp" "maybe param" "maybe type" "temp"
          (661332 'move' call_tmp[661329](134392 call size _mt[243] call_tmp[661322]))
          unknown call_tmp[661334] "expr temp" "maybe param" "maybe type" "temp"
          (661337 'move' call_tmp[661334](134395 call != call_tmp[661308] call_tmp[661329]))
          unknown call_tmp[661339] "expr temp" "maybe param" "maybe type" "temp"
          (661342 'move' call_tmp[661339](134400 call _cond_test call_tmp[661334]))
          if call_tmp[661339]
          {
            (518470 'move' ret[518446](518469 'coerce' 0 bool[10]))
            gotoReturn _end_equals[518444] _end_equals[518444]
          }
          label _continueLabel[134410]
          _indexOfInterest[134405]
          _iterator[134406]
        }
        label _breakLabel[134411]
      }
    }
    unknown call_tmp[661346] "expr temp" "maybe param" "maybe type" "temp"
    (661349 'move' call_tmp[661346](134455 call eltType _mt[243] this[134282]))
    unknown call_tmp[661351] "expr temp" "maybe param" "maybe type" "temp"
    (661354 'move' call_tmp[661351](134459 call isArrayType call_tmp[661346]))
    unknown call_tmp[661356] "expr temp" "maybe param" "maybe type" "temp"
    (661359 'move' call_tmp[661356](134525 call _cond_test call_tmp[661351]))
    if call_tmp[661356]
    {
      unknown ret[134461] "dead at end of block" "insert auto destroy"
      (543100 'init var' ret[134461] 1)
      (134464 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134506] "index var" "insert auto destroy"
          
          unknown thatArr[134508] "index var" "insert auto destroy"
        iterated expressions:
          this[134282]
          that[134277]
        shadow variables:
          ret[134477] 'reduce' intent outer var ret[134461]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134494] "temp"
          (134497 'move' tmp[134494](134496 'addr of' ret[134477]))
          unknown tmp[425846] "maybe param" "temp"
          (425857 'move' tmp[425846] tmp[134494])
          unknown call_tmp[661361] "expr temp" "maybe param" "maybe type" "temp"
          (661364 'move' call_tmp[661361](425859 call _cond_invalid tmp[425846]))
          if call_tmp[661361]
          {
            (425862 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[566731] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[566732] "maybe param" "temp"
          unknown call_tmp[661366] "expr temp" "maybe param" "maybe type" "temp"
          (661369 'move' call_tmp[661366](425847 call isTrue tmp[425846]))
          (566737 'move' tmp[566732](566735 call _cond_test call_tmp[661366]))
          if tmp[566732]
          {
            unknown tmp[566739] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[661373] "expr temp" "maybe param" "maybe type" "temp"
            (661376 'move' call_tmp[661373](134492 call(134487 call (partial) equals _mt[243] thisArr[134506]) thatArr[134508]))
            (566741 'move' tmp[566739](425850 call isTrue call_tmp[661373]))
            (566746 'move' tmp[566731](566743 '_paramFoldLogical' tmp[566732] tmp[566739]))
          }
          {
            (566751 'move' tmp[566731](566748 '_paramFoldLogical' tmp[566732] 0))
          }
          (134502 call = tmp[134494] tmp[566731])
          (480438 'end of statement' thisArr[134506] thatArr[134508])
        }
      }
      (518476 'move' ret[518446](518475 'coerce' ret[134461] bool[10]))
      gotoReturn _end_equals[518444] _end_equals[518444]
      (480441 'end of statement' ret[134461])
    }
    {
      unknown call_tmp[661378] "expr temp" "maybe param" "maybe type" "temp"
      (661381 'move' call_tmp[661378](134518 call == this[134282] that[134277]))
      unknown call_tmp[661383] "expr temp" "maybe param" "maybe type" "temp"
      (661386 'move' call_tmp[661383](134520 'reduce' LogicalAndReduceScanOp[376659](?) call_tmp[661378] 0))
      (518482 'move' ret[518446](518481 'coerce' call_tmp[661383] bool[10]))
      gotoReturn _end_equals[518444] _end_equals[518444]
    }
    label _end_equals[518444]
    (518448 return ret[518446])
  }
  { scopeless type
    bool[10]
  }
  function _cast[134538](arg t[134535]:_array[133594](?), param arg arg[134540]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[518488] "RVV" "temp"
    unknown result[134543] "dead at end of block" "insert auto destroy"
    (543102 'default init var' result[134543] t[134535])
    (134546 'end of statement')
    (134552 call chpl__transferArray result[134543] arg[134540])
    (480444 'end of statement' result[134543])
    (518493 'move' ret[518488](518492 'deref' result[134543]))
    gotoReturn _end__cast[518486] _end__cast[518486]
    (480446 'end of statement' result[134543])
    label _end__cast[518486]
    (518490 return ret[518488])
  }
  function _cast[134565](arg t[134562]:string[26], arg x[134570]:_array[133594](?)) : _unknown[51] "no doc"
  {
    unknown ret[518499] "RVV" "temp"
    unknown call_tmp[661388] "expr temp" "maybe param" "maybe type" "temp"
    (661391 'move' call_tmp[661388](134580 call stringify x[134570]))
    (518504 'move' ret[518499](518503 'deref' call_tmp[661388]))
    (518501 return ret[518499])
    (355164 'used modules list'(134574 'use' IO[230910]))
  }
  function isDmapType[134589](arg t[134587]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518526] "RVV" "param" "temp"
    function isDmapHelp[134597](arg t[134594]:_distribution[118973](?)) param : _unknown[51]
    {
      unknown ret[518508] "RVV" "param" "temp"
      (518513 'move' ret[518508](518512 'deref' 1))
      (518510 return ret[518508])
    }
    function isDmapHelp[134610](arg t[134608]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518517] "RVV" "param" "temp"
      (518522 'move' ret[518517](518521 'deref' 0))
      (518519 return ret[518517])
    }
    unknown call_tmp[661393] "expr temp" "maybe param" "maybe type" "temp"
    (661396 'move' call_tmp[661393](134621 call isDmapHelp t[134587]))
    (518531 'move' ret[518526](518530 'deref' call_tmp[661393]))
    (518528 return ret[518526])
  }
  function isDmapValue[134632](arg e[134629]:_distribution[118973](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518535] "RVV" "param" "temp"
    (518540 'move' ret[518535](518539 'deref' 1))
    (518537 return ret[518535])
  }
  function isDmapValue[134644](arg e[134642]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518544] "RVV" "param" "temp"
    (518549 'move' ret[518544](518548 'deref' 0))
    (518546 return ret[518544])
  }
  function isDomainType[134656](arg t[134654]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518553] "RVV" "param" "temp"
    unknown call_tmp[661398] "expr temp" "maybe param" "maybe type" "temp"
    (661401 'move' call_tmp[661398](354339 'is_subtype' _domain[125908](?) t[134654]))
    (518558 'move' ret[518553](518557 'deref' call_tmp[661398]))
    (518555 return ret[518553])
  }
  function isDomainValue[134674](arg e[134671]:_domain[125908](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518562] "RVV" "param" "temp"
    (518567 'move' ret[518562](518566 'deref' 1))
    (518564 return ret[518562])
  }
  function isDomainValue[134686](arg e[134684]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518571] "RVV" "param" "temp"
    (518576 'move' ret[518571](518575 'deref' 0))
    (518573 return ret[518571])
  }
  function isArrayType[134698](arg t[134696]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518580] "RVV" "param" "temp"
    unknown call_tmp[661403] "expr temp" "maybe param" "maybe type" "temp"
    (661406 'move' call_tmp[661403](354340 'is_subtype' _array[133594](?) t[134696]))
    (518585 'move' ret[518580](518584 'deref' call_tmp[661403]))
    (518582 return ret[518580])
  }
  function isArrayValue[134718](arg e[134715]:_array[133594](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518589] "RVV" "param" "temp"
    (518594 'move' ret[518589](518593 'deref' 1))
    (518591 return ret[518589])
  }
  function isArrayValue[134730](arg e[134728]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518598] "RVV" "param" "temp"
    (518603 'move' ret[518598](518602 'deref' 0))
    (518600 return ret[518598])
  }
  function -[134744](arg a[134741]:_domain[125908](?), arg b[134747]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518607] "RVV" "temp"
    unknown newDom[134764] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661408] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661411 'move' call_tmp[661408](134763 'typeof' a[134741]))
    (543104 'default init var' newDom[134764] call_tmp[661408])
    (134767 'end of statement')
    {
      unknown call_tmp[661413] "maybe param" "maybe type" "temp"
      (661416 'move' call_tmp[661413](134811 'task_get_serial'))
      unknown tmp[134810] "dead at end of block" "insert auto destroy" "temp"
      (543106 'init var' tmp[134810] call_tmp[661413])
      unknown call_tmp[661420] "expr temp" "maybe param" "maybe type" "temp"
      (661423 'move' call_tmp[661420](134770 call _value _mt[243] newDom[134764]))
      unknown call_tmp[661427] "expr temp" "maybe param" "maybe type" "temp"
      (661430 'move' call_tmp[661427](134773 call parSafe _mt[243] call_tmp[661420]))
      unknown call_tmp[661432] "expr temp" "maybe param" "maybe type" "temp"
      (661435 'move' call_tmp[661432](134776 call ! call_tmp[661427]))
      unknown call_tmp[661437] "expr temp" "maybe param" "maybe type" "temp"
      (661440 'move' call_tmp[661437](134807 call _cond_test call_tmp[661432]))
      if call_tmp[661437]
      {
        (134813 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134817 'task_set_serial' tmp[134810])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134803] "index var" "insert auto destroy"
        iterated expressions:
          a[134741]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[661444] "expr temp" "maybe param" "maybe type" "temp"
          (661447 'move' call_tmp[661444](134786 call(134781 call (partial) contains _mt[243] b[134747]) e[134803]))
          unknown call_tmp[661449] "expr temp" "maybe param" "maybe type" "temp"
          (661452 'move' call_tmp[661449](134787 call ! call_tmp[661444]))
          unknown call_tmp[661454] "expr temp" "maybe param" "maybe type" "temp"
          (661457 'move' call_tmp[661454](134797 call _cond_test call_tmp[661449]))
          if call_tmp[661454]
          {
            (134795 call(134790 call (partial) add _mt[243] newDom[134764]) e[134803])
            (480462 'end of statement' newDom[134764] e[134803])
          }
        }
      }
    }
    (518612 'move' ret[518607](518611 'deref' newDom[134764]))
    gotoReturn _end_-[518605] _end_-[518605]
    (480465 'end of statement' newDom[134764])
    label _end_-[518605]
    (518609 return ret[518607])
  }
  where {
    unknown tmp[425867] "maybe param" "temp"
    unknown call_tmp[661461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661464 'move' call_tmp[661461](134751 'typeof' a[134741]))
    unknown call_tmp[661466] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661469 'move' call_tmp[661466](134753 'typeof' b[134747]))
    (425878 'move' tmp[425867](134754 call == call_tmp[661461] call_tmp[661466]))
    unknown call_tmp[661471] "expr temp" "maybe param" "maybe type" "temp"
    (661474 'move' call_tmp[661471](425880 call _cond_invalid tmp[425867]))
    if call_tmp[661471]
    {
      (425883 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566758] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566759] "maybe param" "temp"
    unknown call_tmp[661476] "expr temp" "maybe param" "maybe type" "temp"
    (661479 'move' call_tmp[661476](425868 call isTrue tmp[425867]))
    (566764 'move' tmp[566759](566762 call _cond_test call_tmp[661476]))
    if tmp[566759]
    {
      unknown tmp[566766] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661481] "expr temp" "maybe param" "maybe type" "temp"
      (661484 'move' call_tmp[661481](134759 call isAssociativeDom a[134741]))
      (566768 'move' tmp[566766](425871 call isTrue call_tmp[661481]))
      (566773 'move' tmp[566758](566770 '_paramFoldLogical' tmp[566759] tmp[566766]))
    }
    {
      (566778 'move' tmp[566758](566775 '_paramFoldLogical' tmp[566759] 0))
    }
    (748327 call chpl_statementLevelSymbol tmp[566758])
  }
  function -=[134833](ref arg a[134830]:_domain[125908](?), arg b[134836]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134874] "expr temp" "temp"
      (134883 'move' _iterator[134874](134881 call _getIterator b[134836]))
      Defer
      {
        {
          (134899 call _freeIterator _iterator[134874])
        }
      }
      { scopeless type
        (134888 'move' _indexOfInterest[134873](134885 call iteratorIndex _iterator[134874]))
      }
      ForLoop[134875]
      {
        unknown e[134892] "index var" "insert auto destroy"
        (480468 'end of statement')
        (134894 'move' e[134892] _indexOfInterest[134873])
        (480469 'end of statement' e[134892])
        unknown call_tmp[661488] "expr temp" "maybe param" "maybe type" "temp"
        (661491 'move' call_tmp[661488](134859 call(134854 call (partial) contains _mt[243] a[134830]) e[134892]))
        unknown call_tmp[661493] "expr temp" "maybe param" "maybe type" "temp"
        (661496 'move' call_tmp[661493](134868 call _cond_test call_tmp[661488]))
        if call_tmp[661493]
        {
          (134866 call(134861 call (partial) remove _mt[243] a[134830]) e[134892])
          (480471 'end of statement' e[134892])
        }
        label _continueLabel[134878]
        _indexOfInterest[134873]
        _iterator[134874]
      }
      label _breakLabel[134879]
    }
    (518616 return _void[55])
  }
  where {
    unknown tmp[425888] "maybe param" "temp"
    unknown call_tmp[661500] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661503 'move' call_tmp[661500](134840 'typeof' a[134830]))
    unknown call_tmp[661505] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661508 'move' call_tmp[661505](134842 'typeof' b[134836]))
    (425899 'move' tmp[425888](134843 call == call_tmp[661500] call_tmp[661505]))
    unknown call_tmp[661510] "expr temp" "maybe param" "maybe type" "temp"
    (661513 'move' call_tmp[661510](425901 call _cond_invalid tmp[425888]))
    if call_tmp[661510]
    {
      (425904 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566785] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566786] "maybe param" "temp"
    unknown call_tmp[661515] "expr temp" "maybe param" "maybe type" "temp"
    (661518 'move' call_tmp[661515](425889 call isTrue tmp[425888]))
    (566791 'move' tmp[566786](566789 call _cond_test call_tmp[661515]))
    if tmp[566786]
    {
      unknown tmp[566793] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661520] "expr temp" "maybe param" "maybe type" "temp"
      (661523 'move' call_tmp[661520](134848 call isAssociativeDom a[134830]))
      (566795 'move' tmp[566793](425892 call isTrue call_tmp[661520]))
      (566800 'move' tmp[566785](566797 '_paramFoldLogical' tmp[566786] tmp[566793]))
    }
    {
      (566805 'move' tmp[566785](566802 '_paramFoldLogical' tmp[566786] 0))
    }
    (748329 call chpl_statementLevelSymbol tmp[566785])
  }
  function |[134916](arg a[134913]:_domain[125908](?), arg b[134919]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518620] "RVV" "temp"
    unknown call_tmp[661525] "expr temp" "maybe param" "maybe type" "temp"
    (661528 'move' call_tmp[661525](134936 call + a[134913] b[134919]))
    (518625 'move' ret[518620](518624 'deref' call_tmp[661525]))
    (518622 return ret[518620])
  }
  where {
    unknown tmp[425909] "maybe param" "temp"
    unknown call_tmp[661530] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661533 'move' call_tmp[661530](134923 'typeof' a[134913]))
    unknown call_tmp[661535] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661538 'move' call_tmp[661535](134925 'typeof' b[134919]))
    (425920 'move' tmp[425909](134926 call == call_tmp[661530] call_tmp[661535]))
    unknown call_tmp[661540] "expr temp" "maybe param" "maybe type" "temp"
    (661543 'move' call_tmp[661540](425922 call _cond_invalid tmp[425909]))
    if call_tmp[661540]
    {
      (425925 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566812] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566813] "maybe param" "temp"
    unknown call_tmp[661545] "expr temp" "maybe param" "maybe type" "temp"
    (661548 'move' call_tmp[661545](425910 call isTrue tmp[425909]))
    (566818 'move' tmp[566813](566816 call _cond_test call_tmp[661545]))
    if tmp[566813]
    {
      unknown tmp[566820] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661550] "expr temp" "maybe param" "maybe type" "temp"
      (661553 'move' call_tmp[661550](134931 call isAssociativeDom a[134913]))
      (566822 'move' tmp[566820](425913 call isTrue call_tmp[661550]))
      (566827 'move' tmp[566812](566824 '_paramFoldLogical' tmp[566813] tmp[566820]))
    }
    {
      (566832 'move' tmp[566812](566829 '_paramFoldLogical' tmp[566813] 0))
    }
    (748331 call chpl_statementLevelSymbol tmp[566812])
  }
  function |=[134950](ref arg a[134947]:_domain[125908](?), arg b[134953]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134978] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134979] "expr temp" "temp"
      (134988 'move' _iterator[134979](134986 call _getIterator b[134953]))
      Defer
      {
        {
          (135004 call _freeIterator _iterator[134979])
        }
      }
      { scopeless type
        (134993 'move' _indexOfInterest[134978](134990 call iteratorIndex _iterator[134979]))
      }
      ForLoop[134980]
      {
        unknown e[134997] "index var" "insert auto destroy"
        (480475 'end of statement')
        (134999 'move' e[134997] _indexOfInterest[134978])
        (480476 'end of statement' e[134997])
        (134976 call(134971 call (partial) add _mt[243] a[134947]) e[134997])
        (480478 'end of statement' e[134997])
        label _continueLabel[134983]
        _indexOfInterest[134978]
        _iterator[134979]
      }
      label _breakLabel[134984]
    }
    (518627 return _void[55])
  }
  where {
    unknown tmp[425930] "maybe param" "temp"
    unknown call_tmp[661557] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661560 'move' call_tmp[661557](134957 'typeof' a[134947]))
    unknown call_tmp[661562] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661565 'move' call_tmp[661562](134959 'typeof' b[134953]))
    (425941 'move' tmp[425930](134960 call == call_tmp[661557] call_tmp[661562]))
    unknown call_tmp[661567] "expr temp" "maybe param" "maybe type" "temp"
    (661570 'move' call_tmp[661567](425943 call _cond_invalid tmp[425930]))
    if call_tmp[661567]
    {
      (425946 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566839] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566840] "maybe param" "temp"
    unknown call_tmp[661572] "expr temp" "maybe param" "maybe type" "temp"
    (661575 'move' call_tmp[661572](425931 call isTrue tmp[425930]))
    (566845 'move' tmp[566840](566843 call _cond_test call_tmp[661572]))
    if tmp[566840]
    {
      unknown tmp[566847] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661577] "expr temp" "maybe param" "maybe type" "temp"
      (661580 'move' call_tmp[661577](134965 call isAssociativeDom a[134947]))
      (566849 'move' tmp[566847](425934 call isTrue call_tmp[661577]))
      (566854 'move' tmp[566839](566851 '_paramFoldLogical' tmp[566840] tmp[566847]))
    }
    {
      (566859 'move' tmp[566839](566856 '_paramFoldLogical' tmp[566840] 0))
    }
    (748333 call chpl_statementLevelSymbol tmp[566839])
  }
  function +=[135021](ref arg a[135018]:_domain[125908](?), arg b[135024]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (135041 call |= a[135018] b[135024])
    (518629 return _void[55])
  }
  where {
    unknown tmp[425951] "maybe param" "temp"
    unknown call_tmp[661582] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661585 'move' call_tmp[661582](135028 'typeof' a[135018]))
    unknown call_tmp[661587] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661590 'move' call_tmp[661587](135030 'typeof' b[135024]))
    (425962 'move' tmp[425951](135031 call == call_tmp[661582] call_tmp[661587]))
    unknown call_tmp[661592] "expr temp" "maybe param" "maybe type" "temp"
    (661595 'move' call_tmp[661592](425964 call _cond_invalid tmp[425951]))
    if call_tmp[661592]
    {
      (425967 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566866] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566867] "maybe param" "temp"
    unknown call_tmp[661597] "expr temp" "maybe param" "maybe type" "temp"
    (661600 'move' call_tmp[661597](425952 call isTrue tmp[425951]))
    (566872 'move' tmp[566867](566870 call _cond_test call_tmp[661597]))
    if tmp[566867]
    {
      unknown tmp[566874] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661602] "expr temp" "maybe param" "maybe type" "temp"
      (661605 'move' call_tmp[661602](135036 call isAssociativeDom a[135018]))
      (566876 'move' tmp[566874](425955 call isTrue call_tmp[661602]))
      (566881 'move' tmp[566866](566878 '_paramFoldLogical' tmp[566867] tmp[566874]))
    }
    {
      (566886 'move' tmp[566866](566883 '_paramFoldLogical' tmp[566867] 0))
    }
    (748335 call chpl_statementLevelSymbol tmp[566866])
  }
  function &[135054](arg a[135051]:_domain[125908](?), arg b[135057]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518633] "RVV" "temp"
    unknown newDom[135074] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661607] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661610 'move' call_tmp[661607](135073 'typeof' a[135051]))
    (543108 'default init var' newDom[135074] call_tmp[661607])
    (135077 'end of statement')
    {
      unknown call_tmp[661612] "maybe param" "maybe type" "temp"
      (661615 'move' call_tmp[661612](135122 'task_get_serial'))
      unknown tmp[135121] "dead at end of block" "insert auto destroy" "temp"
      (543110 'init var' tmp[135121] call_tmp[661612])
      unknown call_tmp[661619] "expr temp" "maybe param" "maybe type" "temp"
      (661622 'move' call_tmp[661619](135080 call _value _mt[243] newDom[135074]))
      unknown call_tmp[661626] "expr temp" "maybe param" "maybe type" "temp"
      (661629 'move' call_tmp[661626](135083 call parSafe _mt[243] call_tmp[661619]))
      unknown call_tmp[661631] "expr temp" "maybe param" "maybe type" "temp"
      (661634 'move' call_tmp[661631](135086 call ! call_tmp[661626]))
      unknown call_tmp[661636] "expr temp" "maybe param" "maybe type" "temp"
      (661639 'move' call_tmp[661636](135118 call _cond_test call_tmp[661631]))
      if call_tmp[661636]
      {
        (135124 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135128 'task_set_serial' tmp[135121])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135114] "index var" "insert auto destroy"
        iterated expressions:
          a[135051]
        shadow variables:
          newDom[135091] 'ref' intent outer var newDom[135074]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[661643] "expr temp" "maybe param" "maybe type" "temp"
          (661646 'move' call_tmp[661643](135102 call(135097 call (partial) contains _mt[243] b[135057]) k[135114]))
          unknown call_tmp[661648] "expr temp" "maybe param" "maybe type" "temp"
          (661651 'move' call_tmp[661648](135108 call _cond_test call_tmp[661643]))
          if call_tmp[661648]
          {
            (135105 call += newDom[135091] k[135114])
            (480483 'end of statement' newDom[135091] k[135114])
          }
        }
      }
    }
    (518638 'move' ret[518633](518637 'deref' newDom[135074]))
    gotoReturn _end_&[518631] _end_&[518631]
    (480486 'end of statement' newDom[135074])
    label _end_&[518631]
    (518635 return ret[518633])
  }
  where {
    unknown tmp[425972] "maybe param" "temp"
    unknown call_tmp[661653] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661656 'move' call_tmp[661653](135061 'typeof' a[135051]))
    unknown call_tmp[661658] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661661 'move' call_tmp[661658](135063 'typeof' b[135057]))
    (425983 'move' tmp[425972](135064 call == call_tmp[661653] call_tmp[661658]))
    unknown call_tmp[661663] "expr temp" "maybe param" "maybe type" "temp"
    (661666 'move' call_tmp[661663](425985 call _cond_invalid tmp[425972]))
    if call_tmp[661663]
    {
      (425988 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566893] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566894] "maybe param" "temp"
    unknown call_tmp[661668] "expr temp" "maybe param" "maybe type" "temp"
    (661671 'move' call_tmp[661668](425973 call isTrue tmp[425972]))
    (566899 'move' tmp[566894](566897 call _cond_test call_tmp[661668]))
    if tmp[566894]
    {
      unknown tmp[566901] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661673] "expr temp" "maybe param" "maybe type" "temp"
      (661676 'move' call_tmp[661673](135069 call isAssociativeDom a[135051]))
      (566903 'move' tmp[566901](425976 call isTrue call_tmp[661673]))
      (566908 'move' tmp[566893](566905 '_paramFoldLogical' tmp[566894] tmp[566901]))
    }
    {
      (566913 'move' tmp[566893](566910 '_paramFoldLogical' tmp[566894] 0))
    }
    (748337 call chpl_statementLevelSymbol tmp[566893])
  }
  function &=[135144](ref arg a[135141]:_domain[125908](?), arg b[135147]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135170] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661680] "expr temp" "maybe param" "maybe type" "temp"
    (661683 'move' call_tmp[661680](135163 call idxType _mt[243] a[135141]))
    unknown call_tmp[661685] "expr temp" "maybe param" "maybe type" "temp"
    (661688 'move' call_tmp[661685](135168 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[661680]))
    (543112 'default init var' removeSet[135170] call_tmp[661685])
    (135173 'end of statement')
    {
      unknown _indexOfInterest[135196] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135197] "expr temp" "temp"
      (135206 'move' _iterator[135197](135204 call _getIterator a[135141]))
      Defer
      {
        {
          (135222 call _freeIterator _iterator[135197])
        }
      }
      { scopeless type
        (135211 'move' _indexOfInterest[135196](135208 call iteratorIndex _iterator[135197]))
      }
      ForLoop[135198]
      {
        unknown e[135215] "index var" "insert auto destroy"
        (480489 'end of statement')
        (135217 'move' e[135215] _indexOfInterest[135196])
        (480490 'end of statement' e[135215])
        unknown call_tmp[661692] "expr temp" "maybe param" "maybe type" "temp"
        (661695 'move' call_tmp[661692](135183 call(135178 call (partial) contains _mt[243] b[135147]) e[135215]))
        unknown call_tmp[661697] "expr temp" "maybe param" "maybe type" "temp"
        (661700 'move' call_tmp[661697](135184 call ! call_tmp[661692]))
        unknown call_tmp[661702] "expr temp" "maybe param" "maybe type" "temp"
        (661705 'move' call_tmp[661702](135191 call _cond_test call_tmp[661697]))
        if call_tmp[661702]
        {
          (135188 call += removeSet[135170] e[135215])
          (480492 'end of statement' removeSet[135170] e[135215])
        }
        label _continueLabel[135201]
        _indexOfInterest[135196]
        _iterator[135197]
      }
      label _breakLabel[135202]
    }
    {
      unknown _indexOfInterest[135239] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135240] "expr temp" "temp"
      (135249 'move' _iterator[135240](135247 call _getIterator removeSet[135170]))
      Defer
      {
        {
          (135265 call _freeIterator _iterator[135240])
        }
      }
      { scopeless type
        (135254 'move' _indexOfInterest[135239](135251 call iteratorIndex _iterator[135240]))
      }
      ForLoop[135241]
      {
        unknown e[135258] "index var" "insert auto destroy"
        (480496 'end of statement')
        (135260 'move' e[135258] _indexOfInterest[135239])
        (480497 'end of statement' e[135258])
        (135237 call(135232 call (partial) remove _mt[243] a[135141]) e[135258])
        (480499 'end of statement' e[135258])
        label _continueLabel[135244]
        _indexOfInterest[135239]
        _iterator[135240]
      }
      label _breakLabel[135245]
    }
    (518642 return _void[55])
  }
  where {
    unknown tmp[425993] "maybe param" "temp"
    unknown call_tmp[661709] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661712 'move' call_tmp[661709](135151 'typeof' a[135141]))
    unknown call_tmp[661714] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661717 'move' call_tmp[661714](135153 'typeof' b[135147]))
    (426004 'move' tmp[425993](135154 call == call_tmp[661709] call_tmp[661714]))
    unknown call_tmp[661719] "expr temp" "maybe param" "maybe type" "temp"
    (661722 'move' call_tmp[661719](426006 call _cond_invalid tmp[425993]))
    if call_tmp[661719]
    {
      (426009 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566920] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566921] "maybe param" "temp"
    unknown call_tmp[661724] "expr temp" "maybe param" "maybe type" "temp"
    (661727 'move' call_tmp[661724](425994 call isTrue tmp[425993]))
    (566926 'move' tmp[566921](566924 call _cond_test call_tmp[661724]))
    if tmp[566921]
    {
      unknown tmp[566928] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661729] "expr temp" "maybe param" "maybe type" "temp"
      (661732 'move' call_tmp[661729](135159 call isAssociativeDom a[135141]))
      (566930 'move' tmp[566928](425997 call isTrue call_tmp[661729]))
      (566935 'move' tmp[566920](566932 '_paramFoldLogical' tmp[566921] tmp[566928]))
    }
    {
      (566940 'move' tmp[566920](566937 '_paramFoldLogical' tmp[566921] 0))
    }
    (748339 call chpl_statementLevelSymbol tmp[566920])
  }
  function ^[135281](arg a[135278]:_domain[125908](?), arg b[135284]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518646] "RVV" "temp"
    unknown newDom[135301] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661734] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661737 'move' call_tmp[661734](135300 'typeof' a[135278]))
    (543114 'default init var' newDom[135301] call_tmp[661734])
    (135304 'end of statement')
    {
      unknown call_tmp[661739] "maybe param" "maybe type" "temp"
      (661742 'move' call_tmp[661739](135378 'task_get_serial'))
      unknown tmp[135377] "dead at end of block" "insert auto destroy" "temp"
      (543116 'init var' tmp[135377] call_tmp[661739])
      unknown call_tmp[661746] "expr temp" "maybe param" "maybe type" "temp"
      (661749 'move' call_tmp[661746](135307 call _value _mt[243] newDom[135301]))
      unknown call_tmp[661753] "expr temp" "maybe param" "maybe type" "temp"
      (661756 'move' call_tmp[661753](135310 call parSafe _mt[243] call_tmp[661746]))
      unknown call_tmp[661758] "expr temp" "maybe param" "maybe type" "temp"
      (661761 'move' call_tmp[661758](135313 call ! call_tmp[661753]))
      unknown call_tmp[661763] "expr temp" "maybe param" "maybe type" "temp"
      (661766 'move' call_tmp[661763](135374 call _cond_test call_tmp[661758]))
      if call_tmp[661763]
      {
        (135380 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135384 'task_set_serial' tmp[135377])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135340] "index var" "insert auto destroy"
          iterated expressions:
            a[135278]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661770] "expr temp" "maybe param" "maybe type" "temp"
            (661773 'move' call_tmp[661770](135323 call(135318 call (partial) contains _mt[243] b[135284]) k[135340]))
            unknown call_tmp[661775] "expr temp" "maybe param" "maybe type" "temp"
            (661778 'move' call_tmp[661775](135324 call ! call_tmp[661770]))
            unknown call_tmp[661780] "expr temp" "maybe param" "maybe type" "temp"
            (661783 'move' call_tmp[661780](135334 call _cond_test call_tmp[661775]))
            if call_tmp[661780]
            {
              (135332 call(135327 call (partial) add _mt[243] newDom[135301]) k[135340])
              (480503 'end of statement' newDom[135301] k[135340])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135370] "index var" "insert auto destroy"
          iterated expressions:
            b[135284]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661789] "expr temp" "maybe param" "maybe type" "temp"
            (661792 'move' call_tmp[661789](135353 call(135348 call (partial) contains _mt[243] a[135278]) k[135370]))
            unknown call_tmp[661794] "expr temp" "maybe param" "maybe type" "temp"
            (661797 'move' call_tmp[661794](135354 call ! call_tmp[661789]))
            unknown call_tmp[661799] "expr temp" "maybe param" "maybe type" "temp"
            (661802 'move' call_tmp[661799](135364 call _cond_test call_tmp[661794]))
            if call_tmp[661799]
            {
              (135362 call(135357 call (partial) add _mt[243] newDom[135301]) k[135370])
              (480506 'end of statement' newDom[135301] k[135370])
            }
          }
        }
      }
    }
    (518651 'move' ret[518646](518650 'deref' newDom[135301]))
    gotoReturn _end_^[518644] _end_^[518644]
    (480509 'end of statement' newDom[135301])
    label _end_^[518644]
    (518648 return ret[518646])
  }
  where {
    unknown tmp[426014] "maybe param" "temp"
    unknown call_tmp[661806] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661809 'move' call_tmp[661806](135288 'typeof' a[135278]))
    unknown call_tmp[661811] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661814 'move' call_tmp[661811](135290 'typeof' b[135284]))
    (426025 'move' tmp[426014](135291 call == call_tmp[661806] call_tmp[661811]))
    unknown call_tmp[661816] "expr temp" "maybe param" "maybe type" "temp"
    (661819 'move' call_tmp[661816](426027 call _cond_invalid tmp[426014]))
    if call_tmp[661816]
    {
      (426030 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566947] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566948] "maybe param" "temp"
    unknown call_tmp[661821] "expr temp" "maybe param" "maybe type" "temp"
    (661824 'move' call_tmp[661821](426015 call isTrue tmp[426014]))
    (566953 'move' tmp[566948](566951 call _cond_test call_tmp[661821]))
    if tmp[566948]
    {
      unknown tmp[566955] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661826] "expr temp" "maybe param" "maybe type" "temp"
      (661829 'move' call_tmp[661826](135296 call isAssociativeDom a[135278]))
      (566957 'move' tmp[566955](426018 call isTrue call_tmp[661826]))
      (566962 'move' tmp[566947](566959 '_paramFoldLogical' tmp[566948] tmp[566955]))
    }
    {
      (566967 'move' tmp[566947](566964 '_paramFoldLogical' tmp[566948] 0))
    }
    (748341 call chpl_statementLevelSymbol tmp[566947])
  }
  function ^=[135400](ref arg a[135397]:_domain[125908](?), arg b[135403]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135450] "expr temp" "temp"
      (135459 'move' _iterator[135450](135457 call _getIterator b[135403]))
      Defer
      {
        {
          (135475 call _freeIterator _iterator[135450])
        }
      }
      { scopeless type
        (135464 'move' _indexOfInterest[135449](135461 call iteratorIndex _iterator[135450]))
      }
      ForLoop[135451]
      {
        unknown e[135468] "index var" "insert auto destroy"
        (480512 'end of statement')
        (135470 'move' e[135468] _indexOfInterest[135449])
        (480513 'end of statement' e[135468])
        unknown call_tmp[661833] "expr temp" "maybe param" "maybe type" "temp"
        (661836 'move' call_tmp[661833](135426 call(135421 call (partial) contains _mt[243] a[135397]) e[135468]))
        unknown call_tmp[661838] "expr temp" "maybe param" "maybe type" "temp"
        (661841 'move' call_tmp[661838](135443 call _cond_test call_tmp[661833]))
        if call_tmp[661838]
        {
          (135433 call(135428 call (partial) remove _mt[243] a[135397]) e[135468])
          (480515 'end of statement' e[135468])
        }
        {
          (135441 call(135436 call (partial) add _mt[243] a[135397]) e[135468])
          (480517 'end of statement' e[135468])
        }
        label _continueLabel[135454]
        _indexOfInterest[135449]
        _iterator[135450]
      }
      label _breakLabel[135455]
    }
    (518655 return _void[55])
  }
  where {
    unknown tmp[426035] "maybe param" "temp"
    unknown call_tmp[661847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661850 'move' call_tmp[661847](135407 'typeof' a[135397]))
    unknown call_tmp[661852] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661855 'move' call_tmp[661852](135409 'typeof' b[135403]))
    (426046 'move' tmp[426035](135410 call == call_tmp[661847] call_tmp[661852]))
    unknown call_tmp[661857] "expr temp" "maybe param" "maybe type" "temp"
    (661860 'move' call_tmp[661857](426048 call _cond_invalid tmp[426035]))
    if call_tmp[661857]
    {
      (426051 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566974] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566975] "maybe param" "temp"
    unknown call_tmp[661862] "expr temp" "maybe param" "maybe type" "temp"
    (661865 'move' call_tmp[661862](426036 call isTrue tmp[426035]))
    (566980 'move' tmp[566975](566978 call _cond_test call_tmp[661862]))
    if tmp[566975]
    {
      unknown tmp[566982] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661867] "expr temp" "maybe param" "maybe type" "temp"
      (661870 'move' call_tmp[661867](135415 call isAssociativeDom a[135397]))
      (566984 'move' tmp[566982](426039 call isTrue call_tmp[661867]))
      (566989 'move' tmp[566974](566986 '_paramFoldLogical' tmp[566975] tmp[566982]))
    }
    {
      (566994 'move' tmp[566974](566991 '_paramFoldLogical' tmp[566975] 0))
    }
    (748343 call chpl_statementLevelSymbol tmp[566974])
  }
  function +=[135492](ref arg sd[135489]:_domain[125908](?), arg inds[135501]:_array[133594](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661874] "expr temp" "maybe param" "maybe type" "temp"
    (661877 'move' call_tmp[661874](135509 call size _mt[243] inds[135501]))
    unknown call_tmp[661879] "expr temp" "maybe param" "maybe type" "temp"
    (661882 'move' call_tmp[661879](135513 call == call_tmp[661874] 0))
    unknown call_tmp[661884] "expr temp" "maybe param" "maybe type" "temp"
    (661887 'move' call_tmp[661884](135517 call _cond_test call_tmp[661879]))
    if call_tmp[661884]
    {
      gotoReturn _end_+=[518657] _end_+=[518657]
    }
    unknown call_tmp[661891] "expr temp" "maybe param" "maybe type" "temp"
    (661894 'move' call_tmp[661891](135524 call _value _mt[243] sd[135489]))
    (135532 call(135527 call (partial) dsiBulkAdd _mt[243] call_tmp[661891]) inds[135501])
    label _end_+=[518657]
    (518659 return _void[55])
  }
  where {
    unknown call_tmp[661898] "expr temp" "maybe param" "maybe type" "temp"
    (661901 'move' call_tmp[661898](135507 call isSparseDom sd[135489]))
    unknown call_tmp[661903] "expr temp" "maybe param" "maybe type" "temp"
    (661906 'move' call_tmp[661903](135496 call chpl__buildIndexType sd[135489]))
    unknown call_tmp[661910] "expr temp" "maybe param" "maybe type" "temp"
    (661913 'move' call_tmp[661910](461467 call eltType _mt[243] inds[135501]))
    unknown call_tmp[661915] "expr temp" "maybe param" "maybe type" "temp"
    (661918 'move' call_tmp[661915](461471 call == call_tmp[661903] call_tmp[661910]))
    (461465 call & call_tmp[661898] call_tmp[661915])
  }
  function +=[135543](ref arg sd[135540]:_domain[125908](?), arg d[135546]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661922] "expr temp" "maybe param" "maybe type" "temp"
    (661925 'move' call_tmp[661922](135578 call size _mt[243] d[135546]))
    unknown call_tmp[661927] "expr temp" "maybe param" "maybe type" "temp"
    (661930 'move' call_tmp[661927](135582 call == call_tmp[661922] 0))
    unknown call_tmp[661932] "expr temp" "maybe param" "maybe type" "temp"
    (661935 'move' call_tmp[661932](135586 call _cond_test call_tmp[661927]))
    if call_tmp[661932]
    {
      gotoReturn _end_+=[518663] _end_+=[518663]
    }
    unknown call_tmp[661939] "maybe param" "maybe type" "temp"
    (661942 'move' call_tmp[661939](135593 call size _mt[243] d[135546]))
    const indCount[135596] "dead at end of block" "const" "insert auto destroy"
    (543118 'init var' indCount[135596] call_tmp[661939])
    (135599 'end of statement')
    unknown arr[135618] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661944] "expr temp" "maybe param" "maybe type" "temp"
    (661947 'move' call_tmp[661944](135601 call chpl_build_low_bounded_range 0))
    unknown call_tmp[661949] "expr temp" "maybe param" "maybe type" "temp"
    (661952 'move' call_tmp[661949](135604 call # call_tmp[661944] indCount[135596]))
    unknown call_tmp[661954] "expr temp" "maybe param" "maybe type" "temp"
    (661957 'move' call_tmp[661954](135607 call chpl__buildDomainExpr call_tmp[661949]))
    unknown call_tmp[661959] "expr temp" "maybe param" "maybe type" "temp"
    (661962 'move' call_tmp[661959](135614 call chpl__ensureDomainExpr call_tmp[661954]))
    unknown call_tmp[661964] "expr temp" "maybe param" "maybe type" "temp"
    (661967 'move' call_tmp[661964](135612 call chpl__buildIndexType sd[135540]))
    unknown call_tmp[661969] "expr temp" "maybe param" "maybe type" "temp"
    (661972 'move' call_tmp[661969](135616 call chpl__buildArrayRuntimeType call_tmp[661959] call_tmp[661964]))
    (543120 'default init var' arr[135618] call_tmp[661969])
    (135621 'end of statement')
    {
      unknown _indexOfInterest[135641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135642] "expr temp" "temp"
      unknown call_tmp[661974] "expr temp" "maybe param" "maybe type" "temp"
      (661977 'move' call_tmp[661974](135651 call _getIterator d[135546]))
      unknown call_tmp[661979] "expr temp" "maybe param" "maybe type" "temp"
      (661982 'move' call_tmp[661979](135654 call chpl_build_low_bounded_range 0))
      unknown call_tmp[661984] "expr temp" "maybe param" "maybe type" "temp"
      (661987 'move' call_tmp[661984](135656 call _getIterator call_tmp[661979]))
      (135659 'move' _iterator[135642](135632 call _build_tuple call_tmp[661974] call_tmp[661984]))
      Defer
      {
        {
          (135689 call _freeIterator _iterator[135642])
        }
      }
      { scopeless type
        (135664 'move' _indexOfInterest[135641](135661 call iteratorIndex _iterator[135642]))
      }
      ForLoop[135643]
      {
        (135669 call _check_tuple_var_decl _indexOfInterest[135641] 2)
        (480524 'end of statement')
        unknown i[135675] "index var" "insert auto destroy"
        (480525 'end of statement')
        (135677 'move' i[135675](135673 call _indexOfInterest[135641] 0))
        (480526 'end of statement' i[135675])
        unknown j[135682] "index var" "insert auto destroy"
        (480528 'end of statement')
        (135684 'move' j[135682](135680 call _indexOfInterest[135641] 1))
        (480529 'end of statement' j[135682])
        unknown call_tmp[661989] "expr temp" "maybe param" "maybe type" "temp"
        (661992 'move' call_tmp[661989](135636 call arr[135618] j[135682]))
        (135638 call = call_tmp[661989] i[135675])
        (480531 'end of statement' arr[135618] j[135682] i[135675])
        label _continueLabel[135646]
        _indexOfInterest[135641]
        _iterator[135642]
      }
      label _breakLabel[135647]
    }
    unknown rowSorted[135697] "dead at end of block" "insert auto destroy"
    (543122 'init var' rowSorted[135697] 0)
    (135700 'end of statement' indCount[135596])
    unknown call_tmp[661996] "expr temp" "maybe param" "maybe type" "temp"
    (661999 'move' call_tmp[661996](135702 call _value _mt[243] sd[135540]))
    (135713 call(135705 call (partial) dsiBulkAdd _mt[243] call_tmp[661996]) arr[135618] rowSorted[135697] 1 0)
    (480535 'end of statement' arr[135618] rowSorted[135697])
    label _end_+=[518663]
    (518665 return _void[55])
  }
  where {
    unknown tmp[426056] "maybe param" "temp"
    unknown tmp[426077] "maybe param" "temp"
    (426088 'move' tmp[426077](135552 call isSparseDom sd[135540]))
    unknown call_tmp[662003] "expr temp" "maybe param" "maybe type" "temp"
    (662006 'move' call_tmp[662003](426090 call _cond_invalid tmp[426077]))
    if call_tmp[662003]
    {
      (426093 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567001] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567002] "maybe param" "temp"
    unknown call_tmp[662008] "expr temp" "maybe param" "maybe type" "temp"
    (662011 'move' call_tmp[662008](426078 call isTrue tmp[426077]))
    (567007 'move' tmp[567002](567005 call _cond_test call_tmp[662008]))
    if tmp[567002]
    {
      unknown tmp[567009] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662015] "expr temp" "maybe param" "maybe type" "temp"
      (662018 'move' call_tmp[662015](135554 call rank _mt[243] d[135546]))
      unknown call_tmp[662022] "expr temp" "maybe param" "maybe type" "temp"
      (662025 'move' call_tmp[662022](135558 call rank _mt[243] sd[135540]))
      unknown call_tmp[662027] "expr temp" "maybe param" "maybe type" "temp"
      (662030 'move' call_tmp[662027](135561 call == call_tmp[662015] call_tmp[662022]))
      (567011 'move' tmp[567009](426081 call isTrue call_tmp[662027]))
      (567016 'move' tmp[567001](567013 '_paramFoldLogical' tmp[567002] tmp[567009]))
    }
    {
      (567021 'move' tmp[567001](567018 '_paramFoldLogical' tmp[567002] 0))
    }
    (426067 'move' tmp[426056] tmp[567001])
    unknown call_tmp[662032] "expr temp" "maybe param" "maybe type" "temp"
    (662035 'move' call_tmp[662032](426069 call _cond_invalid tmp[426056]))
    if call_tmp[662032]
    {
      (426072 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567028] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567029] "maybe param" "temp"
    unknown call_tmp[662037] "expr temp" "maybe param" "maybe type" "temp"
    (662040 'move' call_tmp[662037](426057 call isTrue tmp[426056]))
    (567034 'move' tmp[567029](567032 call _cond_test call_tmp[662037]))
    if tmp[567029]
    {
      unknown tmp[567036] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662044] "expr temp" "maybe param" "maybe type" "temp"
      (662047 'move' call_tmp[662044](135566 call idxType _mt[243] sd[135540]))
      unknown call_tmp[662051] "expr temp" "maybe param" "maybe type" "temp"
      (662054 'move' call_tmp[662051](135570 call idxType _mt[243] d[135546]))
      unknown call_tmp[662056] "expr temp" "maybe param" "maybe type" "temp"
      (662059 'move' call_tmp[662056](135573 call == call_tmp[662044] call_tmp[662051]))
      (567038 'move' tmp[567036](426060 call isTrue call_tmp[662056]))
      (567043 'move' tmp[567028](567040 '_paramFoldLogical' tmp[567029] tmp[567036]))
    }
    {
      (567048 'move' tmp[567028](567045 '_paramFoldLogical' tmp[567029] 0))
    }
    (748345 call chpl_statementLevelSymbol tmp[567028])
  }
  function -=[135724](ref arg sd[135721]:_domain[125908](?), arg inds[135733]:_array[133594](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135748] "expr temp" "temp"
      (135757 'move' _iterator[135748](135755 call _getIterator inds[135733]))
      Defer
      {
        {
          (135773 call _freeIterator _iterator[135748])
        }
      }
      { scopeless type
        (135762 'move' _indexOfInterest[135747](135759 call iteratorIndex _iterator[135748]))
      }
      ForLoop[135749]
      {
        unknown ind[135766] "index var" "insert auto destroy"
        (480539 'end of statement')
        (135768 'move' ind[135766] _indexOfInterest[135747])
        (480540 'end of statement' ind[135766])
        (135744 call -= sd[135721] ind[135766])
        (480542 'end of statement' ind[135766])
        label _continueLabel[135752]
        _indexOfInterest[135747]
        _iterator[135748]
      }
      label _breakLabel[135753]
    }
    (518669 return _void[55])
  }
  where {
    unknown call_tmp[662061] "expr temp" "maybe param" "maybe type" "temp"
    (662064 'move' call_tmp[662061](135739 call isSparseDom sd[135721]))
    unknown call_tmp[662066] "expr temp" "maybe param" "maybe type" "temp"
    (662069 'move' call_tmp[662066](135728 call chpl__buildIndexType sd[135721]))
    unknown call_tmp[662073] "expr temp" "maybe param" "maybe type" "temp"
    (662076 'move' call_tmp[662073](461477 call eltType _mt[243] inds[135733]))
    unknown call_tmp[662078] "expr temp" "maybe param" "maybe type" "temp"
    (662081 'move' call_tmp[662078](461481 call == call_tmp[662066] call_tmp[662073]))
    (461475 call & call_tmp[662061] call_tmp[662078])
  }
  function -=[135790](ref arg sd[135787]:_domain[125908](?), arg d[135793]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135832] "expr temp" "temp"
      (135841 'move' _iterator[135832](135839 call _getIterator d[135793]))
      Defer
      {
        {
          (135857 call _freeIterator _iterator[135832])
        }
      }
      { scopeless type
        (135846 'move' _indexOfInterest[135831](135843 call iteratorIndex _iterator[135832]))
      }
      ForLoop[135833]
      {
        unknown ind[135850] "index var" "insert auto destroy"
        (480545 'end of statement')
        (135852 'move' ind[135850] _indexOfInterest[135831])
        (480546 'end of statement' ind[135850])
        (135828 call -= sd[135787] ind[135850])
        (480548 'end of statement' ind[135850])
        label _continueLabel[135836]
        _indexOfInterest[135831]
        _iterator[135832]
      }
      label _breakLabel[135837]
    }
    (518671 return _void[55])
  }
  where {
    unknown tmp[426098] "maybe param" "temp"
    unknown tmp[426119] "maybe param" "temp"
    (426130 'move' tmp[426119](135799 call isSparseDom sd[135787]))
    unknown call_tmp[662083] "expr temp" "maybe param" "maybe type" "temp"
    (662086 'move' call_tmp[662083](426132 call _cond_invalid tmp[426119]))
    if call_tmp[662083]
    {
      (426135 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567055] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567056] "maybe param" "temp"
    unknown call_tmp[662088] "expr temp" "maybe param" "maybe type" "temp"
    (662091 'move' call_tmp[662088](426120 call isTrue tmp[426119]))
    (567061 'move' tmp[567056](567059 call _cond_test call_tmp[662088]))
    if tmp[567056]
    {
      unknown tmp[567063] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662095] "expr temp" "maybe param" "maybe type" "temp"
      (662098 'move' call_tmp[662095](135801 call rank _mt[243] d[135793]))
      unknown call_tmp[662102] "expr temp" "maybe param" "maybe type" "temp"
      (662105 'move' call_tmp[662102](135805 call rank _mt[243] sd[135787]))
      unknown call_tmp[662107] "expr temp" "maybe param" "maybe type" "temp"
      (662110 'move' call_tmp[662107](135808 call == call_tmp[662095] call_tmp[662102]))
      (567065 'move' tmp[567063](426123 call isTrue call_tmp[662107]))
      (567070 'move' tmp[567055](567067 '_paramFoldLogical' tmp[567056] tmp[567063]))
    }
    {
      (567075 'move' tmp[567055](567072 '_paramFoldLogical' tmp[567056] 0))
    }
    (426109 'move' tmp[426098] tmp[567055])
    unknown call_tmp[662112] "expr temp" "maybe param" "maybe type" "temp"
    (662115 'move' call_tmp[662112](426111 call _cond_invalid tmp[426098]))
    if call_tmp[662112]
    {
      (426114 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567082] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567083] "maybe param" "temp"
    unknown call_tmp[662117] "expr temp" "maybe param" "maybe type" "temp"
    (662120 'move' call_tmp[662117](426099 call isTrue tmp[426098]))
    (567088 'move' tmp[567083](567086 call _cond_test call_tmp[662117]))
    if tmp[567083]
    {
      unknown tmp[567090] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662124] "expr temp" "maybe param" "maybe type" "temp"
      (662127 'move' call_tmp[662124](135813 call idxType _mt[243] sd[135787]))
      unknown call_tmp[662131] "expr temp" "maybe param" "maybe type" "temp"
      (662134 'move' call_tmp[662131](135817 call idxType _mt[243] d[135793]))
      unknown call_tmp[662136] "expr temp" "maybe param" "maybe type" "temp"
      (662139 'move' call_tmp[662136](135820 call == call_tmp[662124] call_tmp[662131]))
      (567092 'move' tmp[567090](426102 call isTrue call_tmp[662136]))
      (567097 'move' tmp[567082](567094 '_paramFoldLogical' tmp[567083] tmp[567090]))
    }
    {
      (567102 'move' tmp[567082](567099 '_paramFoldLogical' tmp[567083] 0))
    }
    (748347 call chpl_statementLevelSymbol tmp[567082])
  }
  function isCollapsedDimension[135884](arg r[135881]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518675] "RVV" "param" "temp"
    (518680 'move' ret[518675](518679 'deref' 0))
    (518677 return ret[518675])
  }
  function isCollapsedDimension[135896](arg r[135894]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518684] "RVV" "param" "temp"
    (518689 'move' ret[518684](518688 'deref' 1))
    (518686 return ret[518684])
  }
  function chpl__anyStridable[135908](arg ranges[135906]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518693] "RVV" "param" "temp"
    {
      unknown i[135935] "dead at end of block" "insert auto destroy"
      (543124 'init var' i[135935] 0)
      (480552 'end of statement')
      unknown tmp[135936] "maybe param" "temp"
      unknown call_tmp[662143] "expr temp" "maybe param" "maybe type" "temp"
      (662146 'move' call_tmp[662143](135912 call size _mt[243] ranges[135906]))
      unknown call_tmp[662148] "expr temp" "maybe param" "maybe type" "temp"
      (662151 'move' call_tmp[662148](135916 call - call_tmp[662143] 1))
      (135948 'move' tmp[135936](135946 call chpl_compute_low_param_loop_bound 0 call_tmp[662148]))
      unknown tmp[135937] "maybe param" "temp"
      unknown call_tmp[662155] "expr temp" "maybe param" "maybe type" "temp"
      (662158 'move' call_tmp[662155](135955 call size _mt[243] ranges[135906]))
      unknown call_tmp[662160] "expr temp" "maybe param" "maybe type" "temp"
      (662163 'move' call_tmp[662160](135953 call - call_tmp[662155] 1))
      (135961 'move' tmp[135937](135959 call chpl_compute_high_param_loop_bound 0 call_tmp[662160]))
      unknown tmp[135938] "maybe param" "temp"
      (135964 'move' tmp[135938] 1)
      ParamForLoop[135966]
      { i[135935] tmp[135936] tmp[135937] tmp[135938]
        unknown call_tmp[662165] "expr temp" "maybe param" "maybe type" "temp"
        (662168 'move' call_tmp[662165](135923 call ranges[135906] i[135935]))
        unknown call_tmp[662172] "expr temp" "maybe param" "maybe type" "temp"
        (662175 'move' call_tmp[662172](135924 call stridable _mt[243] call_tmp[662165]))
        unknown call_tmp[662177] "expr temp" "maybe param" "maybe type" "temp"
        (662180 'move' call_tmp[662177](135930 call _cond_test call_tmp[662172]))
        if call_tmp[662177]
        {
          (518698 'move' ret[518693](518697 'deref' 1))
          gotoReturn _end_chpl__anyStridable[518691] _end_chpl__anyStridable[518691]
        }
      }
      label _unused_continueLabel[135940]
      label _breakLabel[135939]
    }
    (518703 'move' ret[518693](518702 'deref' 0))
    label _end_chpl__anyStridable[518691]
    (518695 return ret[518693])
  }
  function chpl__anyRankChangeStridable[135985](arg args[135983]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518707] "RVV" "param" "temp"
    {
      unknown i[136024] "dead at end of block" "insert auto destroy"
      (543126 'init var' i[136024] 0)
      (480555 'end of statement')
      unknown tmp[136025] "maybe param" "temp"
      unknown call_tmp[662184] "expr temp" "maybe param" "maybe type" "temp"
      (662187 'move' call_tmp[662184](135989 call size _mt[243] args[135983]))
      unknown call_tmp[662189] "expr temp" "maybe param" "maybe type" "temp"
      (662192 'move' call_tmp[662189](135993 call - call_tmp[662184] 1))
      (136037 'move' tmp[136025](136035 call chpl_compute_low_param_loop_bound 0 call_tmp[662189]))
      unknown tmp[136026] "maybe param" "temp"
      unknown call_tmp[662196] "expr temp" "maybe param" "maybe type" "temp"
      (662199 'move' call_tmp[662196](136044 call size _mt[243] args[135983]))
      unknown call_tmp[662201] "expr temp" "maybe param" "maybe type" "temp"
      (662204 'move' call_tmp[662201](136042 call - call_tmp[662196] 1))
      (136050 'move' tmp[136026](136048 call chpl_compute_high_param_loop_bound 0 call_tmp[662201]))
      unknown tmp[136027] "maybe param" "temp"
      (136053 'move' tmp[136027] 1)
      ParamForLoop[136055]
      { i[136024] tmp[136025] tmp[136026] tmp[136027]
        unknown call_tmp[662206] "expr temp" "maybe param" "maybe type" "temp"
        (662209 'move' call_tmp[662206](136001 call args[135983] i[136024]))
        unknown call_tmp[662211] "expr temp" "maybe param" "maybe type" "temp"
        (662214 'move' call_tmp[662211](136003 call isRangeValue call_tmp[662206]))
        unknown call_tmp[662216] "expr temp" "maybe param" "maybe type" "temp"
        (662219 'move' call_tmp[662216](136019 call _cond_test call_tmp[662211]))
        if call_tmp[662216]
        {
          unknown call_tmp[662221] "expr temp" "maybe param" "maybe type" "temp"
          (662224 'move' call_tmp[662221](136007 call args[135983] i[136024]))
          unknown call_tmp[662228] "expr temp" "maybe param" "maybe type" "temp"
          (662231 'move' call_tmp[662228](136008 call stridable _mt[243] call_tmp[662221]))
          unknown call_tmp[662233] "expr temp" "maybe param" "maybe type" "temp"
          (662236 'move' call_tmp[662233](136014 call _cond_test call_tmp[662228]))
          if call_tmp[662233]
          {
            (518712 'move' ret[518707](518711 'deref' 1))
            gotoReturn _end_chpl__anyRankChangeStridable[518705] _end_chpl__anyRankChangeStridable[518705]
          }
        }
      }
      label _unused_continueLabel[136029]
      label _breakLabel[136028]
    }
    (518717 'move' ret[518707](518716 'deref' 0))
    label _end_chpl__anyRankChangeStridable[518705]
    (518709 return ret[518707])
  }
  function chpl__countRanges[136074](arg arg[136072]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518721] "RVV" "param" "temp"
    unknown call_tmp[662238] "expr temp" "maybe param" "maybe type" "temp"
    (662241 'move' call_tmp[662238](136079 call isRangeValue arg[136072]))
    unknown call_tmp[662243] "expr temp" "maybe param" "maybe type" "temp"
    (662246 'move' call_tmp[662243](136081 call _cast int(64)[13] call_tmp[662238]))
    (518726 'move' ret[518721](518725 'deref' call_tmp[662243]))
    (518723 return ret[518721])
  }
  function chpl__countRanges[136092](arg arg[136090]:_any[178](?), arg args[136095]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[518730] "RVV" "param" "temp"
    unknown call_tmp[662248] "expr temp" "maybe param" "maybe type" "temp"
    (662251 'move' call_tmp[662248](136101 call chpl__countRanges arg[136090]))
    unknown call_tmp[662253] "expr temp" "maybe param" "maybe type" "temp"
    (662256 'move' call_tmp[662253](136106 call chpl__countRanges(136104 'expand_tuple' args[136095])))
    unknown call_tmp[662258] "expr temp" "maybe param" "maybe type" "temp"
    (662261 'move' call_tmp[662258](136107 call + call_tmp[662248] call_tmp[662253]))
    (518735 'move' ret[518730](518734 'deref' call_tmp[662258]))
    (518732 return ret[518730])
  }
  function _validRankChangeArgs[136118](arg args[136116]:_any[178](?), arg idxType[136120]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518808] "RVV" "param" "temp"
    function _validRankChangeArg[136126](arg idxType[136124]:_any[178](?), arg r[136132]:range[64319](?)) param : _unknown[51]
    {
      unknown ret[518739] "RVV" "param" "temp"
      (518744 'move' ret[518739](518743 'deref' 1))
      (518741 return ret[518739])
    }
    function _validRankChangeArg[136146](arg idxType[136144]:_any[178](?), arg i[136149] :
    idxType[136144]) param : _unknown[51]
    {
      unknown ret[518748] "RVV" "param" "temp"
      (518753 'move' ret[518748](518752 'deref' 1))
      (518750 return ret[518748])
    }
    function _validRankChangeArg[136162](arg idxType[136160]:_any[178](?), arg x[136164]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518757] "RVV" "param" "temp"
      (518762 'move' ret[518757](518761 'deref' 0))
      (518759 return ret[518757])
    }
    function allValid[136174]() param : _unknown[51]
    {
      unknown ret[518766] "RVV" "param" "temp"
      {
        unknown dim[136205] "dead at end of block" "insert auto destroy"
        (543128 'init var' dim[136205] 0)
        (480563 'end of statement')
        unknown tmp[136206] "maybe param" "temp"
        unknown call_tmp[662265] "expr temp" "maybe param" "maybe type" "temp"
        (662268 'move' call_tmp[662265](136178 call size _mt[243] args[136116]))
        unknown call_tmp[662270] "expr temp" "maybe param" "maybe type" "temp"
        (662273 'move' call_tmp[662270](136182 call - call_tmp[662265] 1))
        (136218 'move' tmp[136206](136216 call chpl_compute_low_param_loop_bound 0 call_tmp[662270]))
        unknown tmp[136207] "maybe param" "temp"
        unknown call_tmp[662277] "expr temp" "maybe param" "maybe type" "temp"
        (662280 'move' call_tmp[662277](136225 call size _mt[243] args[136116]))
        unknown call_tmp[662282] "expr temp" "maybe param" "maybe type" "temp"
        (662285 'move' call_tmp[662282](136223 call - call_tmp[662277] 1))
        (136231 'move' tmp[136207](136229 call chpl_compute_high_param_loop_bound 0 call_tmp[662282]))
        unknown tmp[136208] "maybe param" "temp"
        (136234 'move' tmp[136208] 1)
        ParamForLoop[136236]
        { dim[136205] tmp[136206] tmp[136207] tmp[136208]
          {
            unknown call_tmp[662287] "expr temp" "maybe param" "maybe type" "temp"
            (662290 'move' call_tmp[662287](136192 call args[136116] dim[136205]))
            unknown call_tmp[662292] "expr temp" "maybe param" "maybe type" "temp"
            (662295 'move' call_tmp[662292](136193 call _validRankChangeArg idxType[136120] call_tmp[662287]))
            unknown call_tmp[662297] "expr temp" "maybe param" "maybe type" "temp"
            (662300 'move' call_tmp[662297](136194 call ! call_tmp[662292]))
            unknown call_tmp[662302] "expr temp" "maybe param" "maybe type" "temp"
            (662305 'move' call_tmp[662302](136199 call _cond_test call_tmp[662297]))
            if call_tmp[662302]
            {
              (518771 'move' ret[518766](518770 'deref' 0))
              gotoReturn _end_allValid[518764] _end_allValid[518764]
            }
          }
        }
        label _unused_continueLabel[136210]
        label _breakLabel[136209]
      }
      (518776 'move' ret[518766](518775 'deref' 1))
      label _end_allValid[518764]
      (518768 return ret[518766])
    }
    function oneRange[136253]() param : _unknown[51]
    {
      unknown ret[518780] "RVV" "param" "temp"
      {
        unknown dim[136281] "dead at end of block" "insert auto destroy"
        (543130 'init var' dim[136281] 0)
        (480566 'end of statement')
        unknown tmp[136282] "maybe param" "temp"
        unknown call_tmp[662309] "expr temp" "maybe param" "maybe type" "temp"
        (662312 'move' call_tmp[662309](136257 call size _mt[243] args[136116]))
        unknown call_tmp[662314] "expr temp" "maybe param" "maybe type" "temp"
        (662317 'move' call_tmp[662314](136261 call - call_tmp[662309] 1))
        (136294 'move' tmp[136282](136292 call chpl_compute_low_param_loop_bound 0 call_tmp[662314]))
        unknown tmp[136283] "maybe param" "temp"
        unknown call_tmp[662321] "expr temp" "maybe param" "maybe type" "temp"
        (662324 'move' call_tmp[662321](136301 call size _mt[243] args[136116]))
        unknown call_tmp[662326] "expr temp" "maybe param" "maybe type" "temp"
        (662329 'move' call_tmp[662326](136299 call - call_tmp[662321] 1))
        (136307 'move' tmp[136283](136305 call chpl_compute_high_param_loop_bound 0 call_tmp[662326]))
        unknown tmp[136284] "maybe param" "temp"
        (136310 'move' tmp[136284] 1)
        ParamForLoop[136312]
        { dim[136281] tmp[136282] tmp[136283] tmp[136284]
          {
            unknown call_tmp[662331] "expr temp" "maybe param" "maybe type" "temp"
            (662334 'move' call_tmp[662331](136269 call args[136116] dim[136281]))
            unknown call_tmp[662336] "expr temp" "maybe param" "maybe type" "temp"
            (662339 'move' call_tmp[662336](136271 call isRange call_tmp[662331]))
            unknown call_tmp[662341] "expr temp" "maybe param" "maybe type" "temp"
            (662344 'move' call_tmp[662341](136275 call _cond_test call_tmp[662336]))
            if call_tmp[662341]
            {
              (518785 'move' ret[518780](518784 'deref' 1))
              gotoReturn _end_oneRange[518778] _end_oneRange[518778]
            }
          }
        }
        label _unused_continueLabel[136286]
        label _breakLabel[136285]
      }
      (518790 'move' ret[518780](518789 'deref' 0))
      label _end_oneRange[518778]
      (518782 return ret[518780])
    }
    function oneNonRange[136329]() param : _unknown[51]
    {
      unknown ret[518794] "RVV" "param" "temp"
      {
        unknown dim[136359] "dead at end of block" "insert auto destroy"
        (543132 'init var' dim[136359] 0)
        (480569 'end of statement')
        unknown tmp[136360] "maybe param" "temp"
        unknown call_tmp[662348] "expr temp" "maybe param" "maybe type" "temp"
        (662351 'move' call_tmp[662348](136333 call size _mt[243] args[136116]))
        unknown call_tmp[662353] "expr temp" "maybe param" "maybe type" "temp"
        (662356 'move' call_tmp[662353](136337 call - call_tmp[662348] 1))
        (136372 'move' tmp[136360](136370 call chpl_compute_low_param_loop_bound 0 call_tmp[662353]))
        unknown tmp[136361] "maybe param" "temp"
        unknown call_tmp[662360] "expr temp" "maybe param" "maybe type" "temp"
        (662363 'move' call_tmp[662360](136379 call size _mt[243] args[136116]))
        unknown call_tmp[662365] "expr temp" "maybe param" "maybe type" "temp"
        (662368 'move' call_tmp[662365](136377 call - call_tmp[662360] 1))
        (136385 'move' tmp[136361](136383 call chpl_compute_high_param_loop_bound 0 call_tmp[662365]))
        unknown tmp[136362] "maybe param" "temp"
        (136388 'move' tmp[136362] 1)
        ParamForLoop[136390]
        { dim[136359] tmp[136360] tmp[136361] tmp[136362]
          {
            unknown call_tmp[662370] "expr temp" "maybe param" "maybe type" "temp"
            (662373 'move' call_tmp[662370](136345 call args[136116] dim[136359]))
            unknown call_tmp[662375] "expr temp" "maybe param" "maybe type" "temp"
            (662378 'move' call_tmp[662375](136347 call isRange call_tmp[662370]))
            unknown call_tmp[662380] "expr temp" "maybe param" "maybe type" "temp"
            (662383 'move' call_tmp[662380](136348 call ! call_tmp[662375]))
            unknown call_tmp[662385] "expr temp" "maybe param" "maybe type" "temp"
            (662388 'move' call_tmp[662385](136353 call _cond_test call_tmp[662380]))
            if call_tmp[662385]
            {
              (518799 'move' ret[518794](518798 'deref' 1))
              gotoReturn _end_oneNonRange[518792] _end_oneNonRange[518792]
            }
          }
        }
        label _unused_continueLabel[136364]
        label _breakLabel[136363]
      }
      (518804 'move' ret[518794](518803 'deref' 0))
      label _end_oneNonRange[518792]
      (518796 return ret[518794])
    }
    unknown tmp[426140] "maybe param" "temp"
    unknown tmp[426161] "maybe param" "temp"
    (426172 'move' tmp[426161](136407 call allValid))
    unknown call_tmp[662390] "expr temp" "maybe param" "maybe type" "temp"
    (662393 'move' call_tmp[662390](426174 call _cond_invalid tmp[426161]))
    if call_tmp[662390]
    {
      (426177 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567109] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567110] "maybe param" "temp"
    unknown call_tmp[662395] "expr temp" "maybe param" "maybe type" "temp"
    (662398 'move' call_tmp[662395](426162 call isTrue tmp[426161]))
    (567115 'move' tmp[567110](567113 call _cond_test call_tmp[662395]))
    if tmp[567110]
    {
      unknown tmp[567117] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662400] "expr temp" "maybe param" "maybe type" "temp"
      (662403 'move' call_tmp[662400](136410 call oneRange))
      (567119 'move' tmp[567117](426165 call isTrue call_tmp[662400]))
      (567124 'move' tmp[567109](567121 '_paramFoldLogical' tmp[567110] tmp[567117]))
    }
    {
      (567129 'move' tmp[567109](567126 '_paramFoldLogical' tmp[567110] 0))
    }
    (426151 'move' tmp[426140] tmp[567109])
    unknown call_tmp[662405] "expr temp" "maybe param" "maybe type" "temp"
    (662408 'move' call_tmp[662405](426153 call _cond_invalid tmp[426140]))
    if call_tmp[662405]
    {
      (426156 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567136] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567137] "maybe param" "temp"
    unknown call_tmp[662410] "expr temp" "maybe param" "maybe type" "temp"
    (662413 'move' call_tmp[662410](426141 call isTrue tmp[426140]))
    (567142 'move' tmp[567137](567140 call _cond_test call_tmp[662410]))
    if tmp[567137]
    {
      unknown tmp[567144] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662415] "expr temp" "maybe param" "maybe type" "temp"
      (662418 'move' call_tmp[662415](136415 call oneNonRange))
      (567146 'move' tmp[567144](426144 call isTrue call_tmp[662415]))
      (567151 'move' tmp[567136](567148 '_paramFoldLogical' tmp[567137] tmp[567144]))
    }
    {
      (567156 'move' tmp[567136](567153 '_paramFoldLogical' tmp[567137] 0))
    }
    (518813 'move' ret[518808](518812 'deref' tmp[567136]))
    (518810 return ret[518808])
  }
  function =[136428](ref arg a[136425]:_distribution[118973](?), arg b[136431]:_distribution[118973](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662422] "expr temp" "maybe param" "maybe type" "temp"
    (662425 'move' call_tmp[662422](136435 call _value _mt[243] a[136425]))
    unknown call_tmp[662427] "expr temp" "maybe param" "maybe type" "temp"
    (662430 'move' call_tmp[662427](136439 call == call_tmp[662422] nil[44]))
    unknown call_tmp[662432] "expr temp" "maybe param" "maybe type" "temp"
    (662435 'move' call_tmp[662432](136588 call _cond_test call_tmp[662427]))
    if call_tmp[662432]
    {
      unknown call_tmp[662439] "expr temp" "maybe param" "maybe type" "temp"
      (662442 'move' call_tmp[662439](136450 call(136446 call (partial) clone _mt[243] b[136431])))
      (136453 'move' a[136425](136452 call chpl__autoCopy call_tmp[662439]))
    }
    {
      unknown call_tmp[662446] "expr temp" "maybe param" "maybe type" "temp"
      (662449 'move' call_tmp[662446](136457 call _value _mt[243] a[136425]))
      unknown call_tmp[662453] "expr temp" "maybe param" "maybe type" "temp"
      (662456 'move' call_tmp[662453](136462 call _doms _mt[243] call_tmp[662446]))
      unknown call_tmp[662460] "expr temp" "maybe param" "maybe type" "temp"
      (662463 'move' call_tmp[662460](136465 call size _mt[243] call_tmp[662453]))
      unknown call_tmp[662465] "expr temp" "maybe param" "maybe type" "temp"
      (662468 'move' call_tmp[662465](136469 call == call_tmp[662460] 0))
      unknown call_tmp[662470] "expr temp" "maybe param" "maybe type" "temp"
      (662473 'move' call_tmp[662470](136584 call _cond_test call_tmp[662465]))
      if call_tmp[662470]
      {
        { scopeless type
          unknown call_type_tmp[492302] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662477] "expr temp" "maybe param" "maybe type" "temp"
          (662480 'move' call_tmp[662477](136472 call _value _mt[243] a[136425]))
          (492306 'move' call_type_tmp[492302](136475 'typeof' call_tmp[662477]))
        }
        { scopeless type
          unknown call_type_tmp[492308] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662484] "expr temp" "maybe param" "maybe type" "temp"
          (662487 'move' call_tmp[662484](136477 call _value _mt[243] b[136431]))
          (492312 'move' call_type_tmp[492308](136480 'typeof' call_tmp[662484]))
        }
        unknown call_tmp[662489] "expr temp" "maybe param" "maybe type" "temp"
        (662492 'move' call_tmp[662489](136481 call != call_type_tmp[492302] call_type_tmp[492308]))
        unknown call_tmp[662494] "expr temp" "maybe param" "maybe type" "temp"
        (662497 'move' call_tmp[662494](136504 call _cond_test call_tmp[662489]))
        if call_tmp[662494]
        {
          (136502 call compilerError "type mismatch in distribution assignment")
        }
        unknown call_tmp[662501] "expr temp" "maybe param" "maybe type" "temp"
        (662504 'move' call_tmp[662501](136511 call _value _mt[243] a[136425]))
        unknown call_tmp[662508] "expr temp" "maybe param" "maybe type" "temp"
        (662511 'move' call_tmp[662508](136515 call _value _mt[243] b[136431]))
        unknown call_tmp[662513] "expr temp" "maybe param" "maybe type" "temp"
        (662516 'move' call_tmp[662513](136518 call == call_tmp[662501] call_tmp[662508]))
        unknown call_tmp[662518] "expr temp" "maybe param" "maybe type" "temp"
        (662521 'move' call_tmp[662518](136537 call _cond_test call_tmp[662513]))
        if call_tmp[662518]
        {
        }
        {
          unknown call_tmp[662525] "expr temp" "maybe param" "maybe type" "temp"
          (662528 'move' call_tmp[662525](136522 call _value _mt[243] a[136425]))
          unknown call_tmp[662534] "expr temp" "maybe param" "maybe type" "temp"
          (662537 'move' call_tmp[662534](136531 call _value _mt[243] b[136431]))
          (136535 call(136527 call (partial) dsiAssign _mt[243] call_tmp[662525]) call_tmp[662534])
        }
        unknown call_tmp[662541] "expr temp" "maybe param" "maybe type" "temp"
        (662544 'move' call_tmp[662541](136544 call _instance _mt[243] a[136425]))
        unknown call_tmp[662546] "expr temp" "maybe param" "maybe type" "temp"
        (662549 'move' call_tmp[662546](136548 call _isPrivatized call_tmp[662541]))
        unknown call_tmp[662551] "expr temp" "maybe param" "maybe type" "temp"
        (662554 'move' call_tmp[662551](136557 call _cond_test call_tmp[662546]))
        if call_tmp[662551]
        {
          unknown call_tmp[662558] "expr temp" "maybe param" "maybe type" "temp"
          (662561 'move' call_tmp[662558](136551 call _value _mt[243] a[136425]))
          (136555 call _reprivatize call_tmp[662558])
        }
      }
      {
        (136581 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
    (518815 return _void[55])
  }
  function =[136602](ref arg a[136599]:_domain[125908](?), arg b[136605]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662565] "expr temp" "maybe param" "maybe type" "temp"
    (662568 'move' call_tmp[662565](136609 call rank _mt[243] a[136599]))
    unknown call_tmp[662572] "expr temp" "maybe param" "maybe type" "temp"
    (662575 'move' call_tmp[662572](136613 call rank _mt[243] b[136605]))
    unknown call_tmp[662577] "expr temp" "maybe param" "maybe type" "temp"
    (662580 'move' call_tmp[662577](136616 call != call_tmp[662565] call_tmp[662572]))
    unknown call_tmp[662582] "expr temp" "maybe param" "maybe type" "temp"
    (662585 'move' call_tmp[662582](136639 call _cond_test call_tmp[662577]))
    if call_tmp[662582]
    {
      (136637 call compilerError "rank mismatch in domain assignment")
    }
    unknown call_tmp[662589] "expr temp" "maybe param" "maybe type" "temp"
    (662592 'move' call_tmp[662589](136646 call idxType _mt[243] a[136599]))
    unknown call_tmp[662596] "expr temp" "maybe param" "maybe type" "temp"
    (662599 'move' call_tmp[662596](136650 call idxType _mt[243] b[136605]))
    unknown call_tmp[662601] "expr temp" "maybe param" "maybe type" "temp"
    (662604 'move' call_tmp[662601](136653 call != call_tmp[662589] call_tmp[662596]))
    unknown call_tmp[662606] "expr temp" "maybe param" "maybe type" "temp"
    (662609 'move' call_tmp[662606](136676 call _cond_test call_tmp[662601]))
    if call_tmp[662606]
    {
      (136674 call compilerError "index type mismatch in domain assignment")
    }
    unknown tmp[426203] "maybe param" "temp"
    (426214 'move' tmp[426203](136684 call isRectangularDom a[136599]))
    unknown call_tmp[662611] "expr temp" "maybe param" "maybe type" "temp"
    (662614 'move' call_tmp[662611](426216 call _cond_invalid tmp[426203]))
    if call_tmp[662611]
    {
      (426219 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567163] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567164] "maybe param" "temp"
    unknown call_tmp[662616] "expr temp" "maybe param" "maybe type" "temp"
    (662619 'move' call_tmp[662616](426204 call isTrue tmp[426203]))
    (567169 'move' tmp[567164](567167 call _cond_test call_tmp[662616]))
    if tmp[567164]
    {
      unknown tmp[567171] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662621] "expr temp" "maybe param" "maybe type" "temp"
      (662624 'move' call_tmp[662621](136688 call isRectangularDom b[136605]))
      (567173 'move' tmp[567171](426207 call isTrue call_tmp[662621]))
      (567178 'move' tmp[567163](567175 '_paramFoldLogical' tmp[567164] tmp[567171]))
    }
    {
      (567183 'move' tmp[567163](567180 '_paramFoldLogical' tmp[567164] 0))
    }
    unknown call_tmp[662626] "expr temp" "maybe param" "maybe type" "temp"
    (662629 'move' call_tmp[662626](136731 call _cond_test tmp[567163]))
    if call_tmp[662626]
    {
      unknown tmp[426182] "maybe param" "temp"
      unknown call_tmp[662633] "expr temp" "maybe param" "maybe type" "temp"
      (662636 'move' call_tmp[662633](136692 call stridable _mt[243] a[136599]))
      (426193 'move' tmp[426182](136695 call ! call_tmp[662633]))
      unknown call_tmp[662638] "expr temp" "maybe param" "maybe type" "temp"
      (662641 'move' call_tmp[662638](426195 call _cond_invalid tmp[426182]))
      if call_tmp[662638]
      {
        (426198 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567190] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567191] "maybe param" "temp"
      unknown call_tmp[662643] "expr temp" "maybe param" "maybe type" "temp"
      (662646 'move' call_tmp[662643](426183 call isTrue tmp[426182]))
      (567196 'move' tmp[567191](567194 call _cond_test call_tmp[662643]))
      if tmp[567191]
      {
        unknown tmp[567198] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662650] "expr temp" "maybe param" "maybe type" "temp"
        (662653 'move' call_tmp[662650](136698 call stridable _mt[243] b[136605]))
        (567200 'move' tmp[567198](426186 call isTrue call_tmp[662650]))
        (567205 'move' tmp[567190](567202 '_paramFoldLogical' tmp[567191] tmp[567198]))
      }
      {
        (567210 'move' tmp[567190](567207 '_paramFoldLogical' tmp[567191] 0))
      }
      unknown call_tmp[662655] "expr temp" "maybe param" "maybe type" "temp"
      (662658 'move' call_tmp[662655](136726 call _cond_test tmp[567190]))
      if call_tmp[662655]
      {
        (136724 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    unknown call_tmp[662662] "expr temp" "maybe param" "maybe type" "temp"
    (662665 'move' call_tmp[662662](136737 call _instance _mt[243] a[136599]))
    (136747 call(136740 call (partial) dsiAssignDomain _mt[243] call_tmp[662662]) b[136605](lhsPrivate = 0))
    (480585 'end of statement')
    unknown call_tmp[662671] "expr temp" "maybe param" "maybe type" "temp"
    (662674 'move' call_tmp[662671](136751 call _instance _mt[243] a[136599]))
    unknown call_tmp[662676] "expr temp" "maybe param" "maybe type" "temp"
    (662679 'move' call_tmp[662676](136755 call _isPrivatized call_tmp[662671]))
    unknown call_tmp[662681] "expr temp" "maybe param" "maybe type" "temp"
    (662684 'move' call_tmp[662681](136765 call _cond_test call_tmp[662676]))
    if call_tmp[662681]
    {
      unknown call_tmp[662688] "expr temp" "maybe param" "maybe type" "temp"
      (662691 'move' call_tmp[662688](136758 call _instance _mt[243] a[136599]))
      (136762 call _reprivatize call_tmp[662688])
    }
    (518817 return _void[55])
  }
  function chpl__isLegalRectTupDomAssign[136775](arg d[136773]:_any[178](?), arg t[136777]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518857] "RVV" "param" "temp"
    function isRangeTuple[136783](arg a[136781]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518839] "RVV" "param" "temp"
      function peelArgs[136789](arg first[136787]:_any[178](?), arg rest[136792]:_any[178](?) ...) param : _unknown[51]
      {
        unknown ret[518821] "RVV" "param" "temp"
        unknown tmp[567271] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567272] "maybe param" "temp"
        unknown call_tmp[662695] "expr temp" "maybe param" "maybe type" "temp"
        (662698 'move' call_tmp[662695](136796 call size _mt[243] rest[136792]))
        unknown call_tmp[662700] "expr temp" "maybe param" "maybe type" "temp"
        (662703 'move' call_tmp[662700](136800 call > call_tmp[662695] 1))
        (567277 'move' tmp[567272](567275 call _cond_test call_tmp[662700]))
        if tmp[567272]
        {
          unknown tmp[426224] "maybe param" "temp"
          (426235 'move' tmp[426224](136805 call isRange first[136787]))
          unknown call_tmp[662705] "expr temp" "maybe param" "maybe type" "temp"
          (662708 'move' call_tmp[662705](426237 call _cond_invalid tmp[426224]))
          if call_tmp[662705]
          {
            (426240 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567217] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567218] "maybe param" "temp"
          unknown call_tmp[662710] "expr temp" "maybe param" "maybe type" "temp"
          (662713 'move' call_tmp[662710](426225 call isTrue tmp[426224]))
          (567223 'move' tmp[567218](567221 call _cond_test call_tmp[662710]))
          if tmp[567218]
          {
            unknown tmp[567225] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662715] "expr temp" "maybe param" "maybe type" "temp"
            (662718 'move' call_tmp[662715](136810 call peelArgs(136808 'expand_tuple' rest[136792])))
            (567227 'move' tmp[567225](426228 call isTrue call_tmp[662715]))
            (567232 'move' tmp[567217](567229 '_paramFoldLogical' tmp[567218] tmp[567225]))
          }
          {
            (567237 'move' tmp[567217](567234 '_paramFoldLogical' tmp[567218] 0))
          }
          (567282 'move' tmp[567271](567279 '_paramFoldLogical' tmp[567272] tmp[567217]))
        }
        {
          unknown tmp[426245] "maybe param" "temp"
          (426256 'move' tmp[426245](136816 call isRange first[136787]))
          unknown call_tmp[662720] "expr temp" "maybe param" "maybe type" "temp"
          (662723 'move' call_tmp[662720](426258 call _cond_invalid tmp[426245]))
          if call_tmp[662720]
          {
            (426261 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567244] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567245] "maybe param" "temp"
          unknown call_tmp[662725] "expr temp" "maybe param" "maybe type" "temp"
          (662728 'move' call_tmp[662725](426246 call isTrue tmp[426245]))
          (567250 'move' tmp[567245](567248 call _cond_test call_tmp[662725]))
          if tmp[567245]
          {
            unknown tmp[567252] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662730] "expr temp" "maybe param" "maybe type" "temp"
            (662733 'move' call_tmp[662730](136821 call rest[136792] 0))
            unknown call_tmp[662735] "expr temp" "maybe param" "maybe type" "temp"
            (662738 'move' call_tmp[662735](136823 call isRange call_tmp[662730]))
            (567254 'move' tmp[567252](426249 call isTrue call_tmp[662735]))
            (567259 'move' tmp[567244](567256 '_paramFoldLogical' tmp[567245] tmp[567252]))
          }
          {
            (567264 'move' tmp[567244](567261 '_paramFoldLogical' tmp[567245] 0))
          }
          (567287 'move' tmp[567271](567284 '_paramFoldLogical' tmp[567272] tmp[567244]))
        }
        (518826 'move' ret[518821](518825 'deref' tmp[567271]))
        (518823 return ret[518821])
      }
      function peelArgs[136839](arg first[136837]:_any[178](?)) param : _unknown[51]
      {
        unknown ret[518830] "RVV" "param" "temp"
        unknown call_tmp[662740] "expr temp" "maybe param" "maybe type" "temp"
        (662743 'move' call_tmp[662740](136844 call isRange first[136837]))
        (518835 'move' ret[518830](518834 'deref' call_tmp[662740]))
        (518832 return ret[518830])
      }
      unknown tmp[567294] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567295] "maybe param" "temp"
      unknown call_tmp[662745] "expr temp" "maybe param" "maybe type" "temp"
      (662748 'move' call_tmp[662745](136853 call isTuple a[136781]))
      unknown call_tmp[662750] "expr temp" "maybe param" "maybe type" "temp"
      (662753 'move' call_tmp[662750](136854 call ! call_tmp[662745]))
      (567300 'move' tmp[567295](567298 call _cond_test call_tmp[662750]))
      if tmp[567295]
      {
        (567305 'move' tmp[567294](567302 '_paramFoldLogical' tmp[567295] 0))
      }
      {
        unknown tmp[567307] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (567309 'move' tmp[567307](136861 call peelArgs(136859 'expand_tuple' a[136781])))
        (567314 'move' tmp[567294](567311 '_paramFoldLogical' tmp[567295] tmp[567307]))
      }
      (518844 'move' ret[518839](518843 'deref' tmp[567294]))
      (518841 return ret[518839])
    }
    function strideSafe[136874](arg d[136872]:_any[178](?), arg rt[136876]:_any[178](?), param arg dim[136880]:int(64)[13] =
    0) param : _unknown[51]
    {
      unknown ret[518848] "RVV" "param" "temp"
      unknown tmp[567402] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567403] "maybe param" "temp"
      unknown call_tmp[662757] "expr temp" "maybe param" "maybe type" "temp"
      (662760 'move' call_tmp[662757](136886 call rank _mt[243] d[136872]))
      unknown call_tmp[662762] "expr temp" "maybe param" "maybe type" "temp"
      (662765 'move' call_tmp[662762](136890 call - call_tmp[662757] 1))
      unknown call_tmp[662767] "expr temp" "maybe param" "maybe type" "temp"
      (662770 'move' call_tmp[662767](136892 call == dim[136880] call_tmp[662762]))
      (567408 'move' tmp[567403](567406 call _cond_test call_tmp[662767]))
      if tmp[567403]
      {
        unknown tmp[426266] "maybe param" "temp"
        unknown call_tmp[662774] "expr temp" "maybe param" "maybe type" "temp"
        (662777 'move' call_tmp[662774](136900 call(136895 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426277 'move' tmp[426266](136901 call stridable _mt[243] call_tmp[662774]))
        unknown call_tmp[662781] "expr temp" "maybe param" "maybe type" "temp"
        (662784 'move' call_tmp[662781](426279 call _cond_invalid tmp[426266]))
        if call_tmp[662781]
        {
          (426282 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567321] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567322] "maybe param" "temp"
        unknown call_tmp[662786] "expr temp" "maybe param" "maybe type" "temp"
        (662789 'move' call_tmp[662786](426267 call isTrue tmp[426266]))
        (567327 'move' tmp[567322](567325 call _cond_test call_tmp[662786]))
        if tmp[567322]
        {
          (567332 'move' tmp[567321](567329 '_paramFoldLogical' tmp[567322] 1))
        }
        {
          unknown tmp[567334] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662791] "expr temp" "maybe param" "maybe type" "temp"
          (662794 'move' call_tmp[662791](136907 call rt[136876] dim[136880]))
          unknown call_tmp[662798] "expr temp" "maybe param" "maybe type" "temp"
          (662801 'move' call_tmp[662798](136908 call stridable _mt[243] call_tmp[662791]))
          unknown call_tmp[662803] "expr temp" "maybe param" "maybe type" "temp"
          (662806 'move' call_tmp[662803](136911 call ! call_tmp[662798]))
          (567336 'move' tmp[567334](426271 call isTrue call_tmp[662803]))
          (567341 'move' tmp[567321](567338 '_paramFoldLogical' tmp[567322] tmp[567334]))
        }
        (567413 'move' tmp[567402](567410 '_paramFoldLogical' tmp[567403] tmp[567321]))
      }
      {
        unknown tmp[426287] "maybe param" "temp"
        unknown tmp[426308] "maybe param" "temp"
        unknown call_tmp[662810] "expr temp" "maybe param" "maybe type" "temp"
        (662813 'move' call_tmp[662810](136921 call(136916 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426319 'move' tmp[426308](136922 call stridable _mt[243] call_tmp[662810]))
        unknown call_tmp[662817] "expr temp" "maybe param" "maybe type" "temp"
        (662820 'move' call_tmp[662817](426321 call _cond_invalid tmp[426308]))
        if call_tmp[662817]
        {
          (426324 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567348] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567349] "maybe param" "temp"
        unknown call_tmp[662822] "expr temp" "maybe param" "maybe type" "temp"
        (662825 'move' call_tmp[662822](426309 call isTrue tmp[426308]))
        (567354 'move' tmp[567349](567352 call _cond_test call_tmp[662822]))
        if tmp[567349]
        {
          (567359 'move' tmp[567348](567356 '_paramFoldLogical' tmp[567349] 1))
        }
        {
          unknown tmp[567361] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662827] "expr temp" "maybe param" "maybe type" "temp"
          (662830 'move' call_tmp[662827](136928 call rt[136876] dim[136880]))
          unknown call_tmp[662834] "expr temp" "maybe param" "maybe type" "temp"
          (662837 'move' call_tmp[662834](136929 call stridable _mt[243] call_tmp[662827]))
          unknown call_tmp[662839] "expr temp" "maybe param" "maybe type" "temp"
          (662842 'move' call_tmp[662839](136932 call ! call_tmp[662834]))
          (567363 'move' tmp[567361](426313 call isTrue call_tmp[662839]))
          (567368 'move' tmp[567348](567365 '_paramFoldLogical' tmp[567349] tmp[567361]))
        }
        (426298 'move' tmp[426287] tmp[567348])
        unknown call_tmp[662844] "expr temp" "maybe param" "maybe type" "temp"
        (662847 'move' call_tmp[662844](426300 call _cond_invalid tmp[426287]))
        if call_tmp[662844]
        {
          (426303 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567375] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567376] "maybe param" "temp"
        unknown call_tmp[662849] "expr temp" "maybe param" "maybe type" "temp"
        (662852 'move' call_tmp[662849](426288 call isTrue tmp[426287]))
        (567381 'move' tmp[567376](567379 call _cond_test call_tmp[662849]))
        if tmp[567376]
        {
          unknown tmp[567383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662854] "expr temp" "maybe param" "maybe type" "temp"
          (662857 'move' call_tmp[662854](136942 call + dim[136880] 1))
          unknown call_tmp[662859] "expr temp" "maybe param" "maybe type" "temp"
          (662862 'move' call_tmp[662859](136944 call strideSafe d[136872] rt[136876] call_tmp[662854]))
          (567385 'move' tmp[567383](426291 call isTrue call_tmp[662859]))
          (567390 'move' tmp[567375](567387 '_paramFoldLogical' tmp[567376] tmp[567383]))
        }
        {
          (567395 'move' tmp[567375](567392 '_paramFoldLogical' tmp[567376] 0))
        }
        (567418 'move' tmp[567402](567415 '_paramFoldLogical' tmp[567403] tmp[567375]))
      }
      (518853 'move' ret[518848](518852 'deref' tmp[567402]))
      (518850 return ret[518848])
    }
    unknown tmp[426329] "maybe param" "temp"
    unknown tmp[426350] "maybe param" "temp"
    (426361 'move' tmp[426350](136958 call isRangeTuple t[136777]))
    unknown call_tmp[662864] "expr temp" "maybe param" "maybe type" "temp"
    (662867 'move' call_tmp[662864](426363 call _cond_invalid tmp[426350]))
    if call_tmp[662864]
    {
      (426366 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567425] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567426] "maybe param" "temp"
    unknown call_tmp[662869] "expr temp" "maybe param" "maybe type" "temp"
    (662872 'move' call_tmp[662869](426351 call isTrue tmp[426350]))
    (567431 'move' tmp[567426](567429 call _cond_test call_tmp[662869]))
    if tmp[567426]
    {
      unknown tmp[567433] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662876] "expr temp" "maybe param" "maybe type" "temp"
      (662879 'move' call_tmp[662876](136960 call rank _mt[243] d[136773]))
      unknown call_tmp[662883] "expr temp" "maybe param" "maybe type" "temp"
      (662886 'move' call_tmp[662883](136964 call size _mt[243] t[136777]))
      unknown call_tmp[662888] "expr temp" "maybe param" "maybe type" "temp"
      (662891 'move' call_tmp[662888](136967 call == call_tmp[662876] call_tmp[662883]))
      (567435 'move' tmp[567433](426354 call isTrue call_tmp[662888]))
      (567440 'move' tmp[567425](567437 '_paramFoldLogical' tmp[567426] tmp[567433]))
    }
    {
      (567445 'move' tmp[567425](567442 '_paramFoldLogical' tmp[567426] 0))
    }
    (426340 'move' tmp[426329] tmp[567425])
    unknown call_tmp[662893] "expr temp" "maybe param" "maybe type" "temp"
    (662896 'move' call_tmp[662893](426342 call _cond_invalid tmp[426329]))
    if call_tmp[662893]
    {
      (426345 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567452] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567453] "maybe param" "temp"
    unknown call_tmp[662898] "expr temp" "maybe param" "maybe type" "temp"
    (662901 'move' call_tmp[662898](426330 call isTrue tmp[426329]))
    (567458 'move' tmp[567453](567456 call _cond_test call_tmp[662898]))
    if tmp[567453]
    {
      unknown tmp[567460] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662903] "expr temp" "maybe param" "maybe type" "temp"
      (662906 'move' call_tmp[662903](136975 call strideSafe d[136773] t[136777]))
      (567462 'move' tmp[567460](426333 call isTrue call_tmp[662903]))
      (567467 'move' tmp[567452](567464 '_paramFoldLogical' tmp[567453] tmp[567460]))
    }
    {
      (567472 'move' tmp[567452](567469 '_paramFoldLogical' tmp[567453] 0))
    }
    (518862 'move' ret[518857](518861 'deref' tmp[567452]))
    (518859 return ret[518857])
  }
  function =[136988](ref arg a[136985]:_domain[125908](?), arg b[136991]:_tuple[56202](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662908] "expr temp" "maybe param" "maybe type" "temp"
    (662911 'move' call_tmp[662908](136998 call chpl__isLegalRectTupDomAssign a[136985] b[136991]))
    unknown call_tmp[662913] "expr temp" "maybe param" "maybe type" "temp"
    (662916 'move' call_tmp[662913](137082 call _cond_test call_tmp[662908]))
    if call_tmp[662913]
    {
      unknown call_tmp[662918] "expr temp" "maybe param" "maybe type" "temp"
      (662921 'move' call_tmp[662918](137003 call chpl__buildDomainExpr(137001 'expand_tuple' b[136991])))
      (137005 call = a[136985] call_tmp[662918])
    }
    {
      (137014 call(137010 call (partial) clear _mt[243] a[136985]))
      (480595 'end of statement')
      {
        unknown _indexOfInterest[137039] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137040] "expr temp" "temp"
        unknown call_tmp[662927] "expr temp" "maybe param" "maybe type" "temp"
        (662930 'move' call_tmp[662927](137055 call size _mt[243] b[136991]))
        unknown call_tmp[662932] "expr temp" "maybe param" "maybe type" "temp"
        (662935 'move' call_tmp[662932](137059 call chpl_direct_counted_range_iter 0 call_tmp[662927]))
        (137049 'move' _iterator[137040](137047 call _getIterator call_tmp[662932]))
        Defer
        {
          {
            (137075 call _freeIterator _iterator[137040])
          }
        }
        { scopeless type
          (137064 'move' _indexOfInterest[137039](137061 call iteratorIndex _iterator[137040]))
        }
        ForLoop[137041]
        {
          unknown ind[137068] "index var" "insert auto destroy"
          (480597 'end of statement')
          (137070 'move' ind[137068] _indexOfInterest[137039])
          (480598 'end of statement' ind[137068])
          {
            unknown call_tmp[662939] "expr temp" "maybe param" "maybe type" "temp"
            (662942 'move' call_tmp[662939](137034 call b[136991] ind[137068]))
            (137036 call(137028 call (partial) add _mt[243] a[136985]) call_tmp[662939])
            (480600 'end of statement' ind[137068])
          }
          label _continueLabel[137044]
          _indexOfInterest[137039]
          _iterator[137040]
        }
        label _breakLabel[137045]
      }
    }
    (518864 return _void[55])
  }
  function =[137095](ref arg d[137092]:_domain[125908](?), arg r[137101]:range[64319](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662944] "expr temp" "maybe param" "maybe type" "temp"
    (662947 'move' call_tmp[662944](137107 call chpl__buildDomainExpr r[137101]))
    (137109 call = d[137092] call_tmp[662944])
    (518866 return _void[55])
  }
  function =[137121](ref arg a[137118]:_domain[125908](?), arg b[137123]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662949] "expr temp" "maybe param" "maybe type" "temp"
    (662952 'move' call_tmp[662949](137128 call isRectangularDom a[137118]))
    unknown call_tmp[662954] "expr temp" "maybe param" "maybe type" "temp"
    (662957 'move' call_tmp[662954](137150 call _cond_test call_tmp[662949]))
    if call_tmp[662954]
    {
      (137148 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137161 call(137157 call (partial) clear _mt[243] a[137118]))
    (480604 'end of statement')
    {
      unknown _indexOfInterest[137174] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137175] "expr temp" "temp"
      (137184 'move' _iterator[137175](137182 call _getIterator b[137123]))
      Defer
      {
        {
          (137200 call _freeIterator _iterator[137175])
        }
      }
      { scopeless type
        (137189 'move' _indexOfInterest[137174](137186 call iteratorIndex _iterator[137175]))
      }
      ForLoop[137176]
      {
        unknown ind[137193] "index var" "insert auto destroy"
        (480606 'end of statement')
        (137195 'move' ind[137193] _indexOfInterest[137174])
        (480607 'end of statement' ind[137193])
        {
          (137171 call(137166 call (partial) add _mt[243] a[137118]) ind[137193])
          (480609 'end of statement' ind[137193])
        }
        label _continueLabel[137179]
        _indexOfInterest[137174]
        _iterator[137175]
      }
      label _breakLabel[137180]
    }
    (518868 return _void[55])
  }
  function chpl__serializeAssignment[137217](arg a[137214]:_array[133594](?), arg b[137219]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518872] "RVV" "param" "temp"
    unknown tmp[426371] "maybe param" "temp"
    unknown call_tmp[662965] "expr temp" "maybe param" "maybe type" "temp"
    (662968 'move' call_tmp[662965](137222 call rank _mt[243] a[137214]))
    (426382 'move' tmp[426371](137226 call != call_tmp[662965] 1))
    unknown call_tmp[662970] "expr temp" "maybe param" "maybe type" "temp"
    (662973 'move' call_tmp[662970](426384 call _cond_invalid tmp[426371]))
    if call_tmp[662970]
    {
      (426387 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567479] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567480] "maybe param" "temp"
    unknown call_tmp[662975] "expr temp" "maybe param" "maybe type" "temp"
    (662978 'move' call_tmp[662975](426372 call isTrue tmp[426371]))
    (567485 'move' tmp[567480](567483 call _cond_test call_tmp[662975]))
    if tmp[567480]
    {
      unknown tmp[567487] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662980] "expr temp" "maybe param" "maybe type" "temp"
      (662983 'move' call_tmp[662980](137231 call isRange b[137219]))
      (567489 'move' tmp[567487](426375 call isTrue call_tmp[662980]))
      (567494 'move' tmp[567479](567491 '_paramFoldLogical' tmp[567480] tmp[567487]))
    }
    {
      (567499 'move' tmp[567479](567496 '_paramFoldLogical' tmp[567480] 0))
    }
    unknown call_tmp[662985] "expr temp" "maybe param" "maybe type" "temp"
    (662988 'move' call_tmp[662985](137237 call _cond_test tmp[567479]))
    if call_tmp[662985]
    {
      (518877 'move' ret[518872](518876 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518870] _end_chpl__serializeAssignment[518870]
    }
    unknown tmp[426392] "maybe param" "temp"
    unknown tmp[426413] "maybe param" "temp"
    unknown tmp[426434] "maybe param" "temp"
    unknown call_tmp[662990] "expr temp" "maybe param" "maybe type" "temp"
    (662993 'move' call_tmp[662990](137246 call isRectangularArr a[137214]))
    (426445 'move' tmp[426434](137247 call ! call_tmp[662990]))
    unknown call_tmp[662995] "expr temp" "maybe param" "maybe type" "temp"
    (662998 'move' call_tmp[662995](426447 call _cond_invalid tmp[426434]))
    if call_tmp[662995]
    {
      (426450 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567506] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567507] "maybe param" "temp"
    unknown call_tmp[663000] "expr temp" "maybe param" "maybe type" "temp"
    (663003 'move' call_tmp[663000](426435 call isTrue tmp[426434]))
    (567512 'move' tmp[567507](567510 call _cond_test call_tmp[663000]))
    if tmp[567507]
    {
      unknown tmp[567514] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663005] "expr temp" "maybe param" "maybe type" "temp"
      (663008 'move' call_tmp[663005](137252 call isAssociativeArr a[137214]))
      unknown call_tmp[663010] "expr temp" "maybe param" "maybe type" "temp"
      (663013 'move' call_tmp[663010](137253 call ! call_tmp[663005]))
      (567516 'move' tmp[567514](426438 call isTrue call_tmp[663010]))
      (567521 'move' tmp[567506](567518 '_paramFoldLogical' tmp[567507] tmp[567514]))
    }
    {
      (567526 'move' tmp[567506](567523 '_paramFoldLogical' tmp[567507] 0))
    }
    (426424 'move' tmp[426413] tmp[567506])
    unknown call_tmp[663015] "expr temp" "maybe param" "maybe type" "temp"
    (663018 'move' call_tmp[663015](426426 call _cond_invalid tmp[426413]))
    if call_tmp[663015]
    {
      (426429 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567533] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567534] "maybe param" "temp"
    unknown call_tmp[663020] "expr temp" "maybe param" "maybe type" "temp"
    (663023 'move' call_tmp[663020](426414 call isTrue tmp[426413]))
    (567539 'move' tmp[567534](567537 call _cond_test call_tmp[663020]))
    if tmp[567534]
    {
      unknown tmp[567541] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663025] "expr temp" "maybe param" "maybe type" "temp"
      (663028 'move' call_tmp[663025](137260 call isSparseArr a[137214]))
      unknown call_tmp[663030] "expr temp" "maybe param" "maybe type" "temp"
      (663033 'move' call_tmp[663030](137261 call ! call_tmp[663025]))
      (567543 'move' tmp[567541](426417 call isTrue call_tmp[663030]))
      (567548 'move' tmp[567533](567545 '_paramFoldLogical' tmp[567534] tmp[567541]))
    }
    {
      (567553 'move' tmp[567533](567550 '_paramFoldLogical' tmp[567534] 0))
    }
    (426403 'move' tmp[426392] tmp[567533])
    unknown call_tmp[663035] "expr temp" "maybe param" "maybe type" "temp"
    (663038 'move' call_tmp[663035](426405 call _cond_invalid tmp[426392]))
    if call_tmp[663035]
    {
      (426408 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567641] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567642] "maybe param" "temp"
    unknown call_tmp[663040] "expr temp" "maybe param" "maybe type" "temp"
    (663043 'move' call_tmp[663040](426393 call isTrue tmp[426392]))
    (567647 'move' tmp[567642](567645 call _cond_test call_tmp[663040]))
    if tmp[567642]
    {
      (567652 'move' tmp[567641](567649 '_paramFoldLogical' tmp[567642] 1))
    }
    {
      unknown tmp[426455] "maybe param" "temp"
      unknown tmp[426476] "maybe param" "temp"
      unknown tmp[426497] "maybe param" "temp"
      (426508 'move' tmp[426497](137268 call isArray b[137219]))
      unknown call_tmp[663045] "expr temp" "maybe param" "maybe type" "temp"
      (663048 'move' call_tmp[663045](426510 call _cond_invalid tmp[426497]))
      if call_tmp[663045]
      {
        (426513 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567560] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567561] "maybe param" "temp"
      unknown call_tmp[663050] "expr temp" "maybe param" "maybe type" "temp"
      (663053 'move' call_tmp[663050](426498 call isTrue tmp[426497]))
      (567566 'move' tmp[567561](567564 call _cond_test call_tmp[663050]))
      if tmp[567561]
      {
        unknown tmp[567568] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663055] "expr temp" "maybe param" "maybe type" "temp"
        (663058 'move' call_tmp[663055](137272 call isRectangularArr b[137219]))
        unknown call_tmp[663060] "expr temp" "maybe param" "maybe type" "temp"
        (663063 'move' call_tmp[663060](137273 call ! call_tmp[663055]))
        (567570 'move' tmp[567568](426501 call isTrue call_tmp[663060]))
        (567575 'move' tmp[567560](567572 '_paramFoldLogical' tmp[567561] tmp[567568]))
      }
      {
        (567580 'move' tmp[567560](567577 '_paramFoldLogical' tmp[567561] 0))
      }
      (426487 'move' tmp[426476] tmp[567560])
      unknown call_tmp[663065] "expr temp" "maybe param" "maybe type" "temp"
      (663068 'move' call_tmp[663065](426489 call _cond_invalid tmp[426476]))
      if call_tmp[663065]
      {
        (426492 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567587] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567588] "maybe param" "temp"
      unknown call_tmp[663070] "expr temp" "maybe param" "maybe type" "temp"
      (663073 'move' call_tmp[663070](426477 call isTrue tmp[426476]))
      (567593 'move' tmp[567588](567591 call _cond_test call_tmp[663070]))
      if tmp[567588]
      {
        unknown tmp[567595] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663075] "expr temp" "maybe param" "maybe type" "temp"
        (663078 'move' call_tmp[663075](137280 call isAssociativeArr b[137219]))
        unknown call_tmp[663080] "expr temp" "maybe param" "maybe type" "temp"
        (663083 'move' call_tmp[663080](137281 call ! call_tmp[663075]))
        (567597 'move' tmp[567595](426480 call isTrue call_tmp[663080]))
        (567602 'move' tmp[567587](567599 '_paramFoldLogical' tmp[567588] tmp[567595]))
      }
      {
        (567607 'move' tmp[567587](567604 '_paramFoldLogical' tmp[567588] 0))
      }
      (426466 'move' tmp[426455] tmp[567587])
      unknown call_tmp[663085] "expr temp" "maybe param" "maybe type" "temp"
      (663088 'move' call_tmp[663085](426468 call _cond_invalid tmp[426455]))
      if call_tmp[663085]
      {
        (426471 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567614] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567615] "maybe param" "temp"
      unknown call_tmp[663090] "expr temp" "maybe param" "maybe type" "temp"
      (663093 'move' call_tmp[663090](426456 call isTrue tmp[426455]))
      (567620 'move' tmp[567615](567618 call _cond_test call_tmp[663090]))
      if tmp[567615]
      {
        unknown tmp[567622] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663095] "expr temp" "maybe param" "maybe type" "temp"
        (663098 'move' call_tmp[663095](137288 call isSparseArr b[137219]))
        unknown call_tmp[663100] "expr temp" "maybe param" "maybe type" "temp"
        (663103 'move' call_tmp[663100](137289 call ! call_tmp[663095]))
        (567624 'move' tmp[567622](426459 call isTrue call_tmp[663100]))
        (567629 'move' tmp[567614](567626 '_paramFoldLogical' tmp[567615] tmp[567622]))
      }
      {
        (567634 'move' tmp[567614](567631 '_paramFoldLogical' tmp[567615] 0))
      }
      unknown tmp[567654] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567656 'move' tmp[567654](426397 call isTrue tmp[567614]))
      (567661 'move' tmp[567641](567658 '_paramFoldLogical' tmp[567642] tmp[567654]))
    }
    unknown call_tmp[663105] "expr temp" "maybe param" "maybe type" "temp"
    (663108 'move' call_tmp[663105](137298 call _cond_test tmp[567641]))
    if call_tmp[663105]
    {
      (518882 'move' ret[518872](518881 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518870] _end_chpl__serializeAssignment[518870]
    }
    (518887 'move' ret[518872](518886 'deref' 0))
    label _end_chpl__serializeAssignment[518870]
    (518874 return ret[518872])
  }
  function chpl__compatibleForBulkTransfer[137316](arg a[137313]:_array[133594](?), arg b[137321]:_array[133594](?), param arg kind[137325]:_tElt[137999]) param : _unknown[51]
  {
    unknown ret[518891] "RVV" "param" "temp"
    unknown call_tmp[663110] "expr temp" "maybe param" "maybe type" "temp"
    (663113 'move' call_tmp[663110](137329 call ! useBulkTransfer[113728]))
    unknown call_tmp[663115] "expr temp" "maybe param" "maybe type" "temp"
    (663118 'move' call_tmp[663115](137334 call _cond_test call_tmp[663110]))
    if call_tmp[663115]
    {
      (518896 'move' ret[518891](518895 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518889] _end_chpl__compatibleForBulkTransfer[518889]
    }
    unknown call_tmp[663122] "expr temp" "maybe param" "maybe type" "temp"
    (663125 'move' call_tmp[663122](137341 call eltType _mt[243] a[137313]))
    unknown call_tmp[663129] "expr temp" "maybe param" "maybe type" "temp"
    (663132 'move' call_tmp[663129](137345 call eltType _mt[243] b[137321]))
    unknown call_tmp[663134] "expr temp" "maybe param" "maybe type" "temp"
    (663137 'move' call_tmp[663134](137348 call != call_tmp[663122] call_tmp[663129]))
    unknown call_tmp[663139] "expr temp" "maybe param" "maybe type" "temp"
    (663142 'move' call_tmp[663139](137353 call _cond_test call_tmp[663134]))
    if call_tmp[663139]
    {
      (518901 'move' ret[518891](518900 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518889] _end_chpl__compatibleForBulkTransfer[518889]
    }
    unknown call_tmp[663144] "expr temp" "maybe param" "maybe type" "temp"
    (663147 'move' call_tmp[663144](137363 call == kind[137325] move[137993]))
    unknown call_tmp[663149] "expr temp" "maybe param" "maybe type" "temp"
    (663152 'move' call_tmp[663149](137368 call _cond_test call_tmp[663144]))
    if call_tmp[663149]
    {
      (518906 'move' ret[518891](518905 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518889] _end_chpl__compatibleForBulkTransfer[518889]
    }
    unknown tmp[426518] "maybe param" "temp"
    (426529 'move' tmp[426518](137380 call == kind[137325] initCopy[137995]))
    unknown call_tmp[663154] "expr temp" "maybe param" "maybe type" "temp"
    (663157 'move' call_tmp[663154](426531 call _cond_invalid tmp[426518]))
    if call_tmp[663154]
    {
      (426534 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567668] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567669] "maybe param" "temp"
    unknown call_tmp[663159] "expr temp" "maybe param" "maybe type" "temp"
    (663162 'move' call_tmp[663159](426519 call isTrue tmp[426518]))
    (567674 'move' tmp[567669](567672 call _cond_test call_tmp[663159]))
    if tmp[567669]
    {
      unknown tmp[567676] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663166] "expr temp" "maybe param" "maybe type" "temp"
      (663169 'move' call_tmp[663166](137384 call eltType _mt[243] a[137313]))
      unknown call_tmp[663171] "expr temp" "maybe param" "maybe type" "temp"
      (663174 'move' call_tmp[663171](137388 call isConstCopyableType call_tmp[663166]))
      (567678 'move' tmp[567676](426522 call isTrue call_tmp[663171]))
      (567683 'move' tmp[567668](567680 '_paramFoldLogical' tmp[567669] tmp[567676]))
    }
    {
      (567688 'move' tmp[567668](567685 '_paramFoldLogical' tmp[567669] 0))
    }
    unknown call_tmp[663176] "expr temp" "maybe param" "maybe type" "temp"
    (663179 'move' call_tmp[663176](137394 call _cond_test tmp[567668]))
    if call_tmp[663176]
    {
      (518911 'move' ret[518891](518910 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518889] _end_chpl__compatibleForBulkTransfer[518889]
    }
    unknown call_tmp[663183] "expr temp" "maybe param" "maybe type" "temp"
    (663186 'move' call_tmp[663183](137401 call eltType _mt[243] a[137313]))
    unknown call_tmp[663188] "expr temp" "maybe param" "maybe type" "temp"
    (663191 'move' call_tmp[663188](137405 call chpl__supportedDataTypeForBulkTransfer call_tmp[663183]))
    unknown call_tmp[663193] "expr temp" "maybe param" "maybe type" "temp"
    (663196 'move' call_tmp[663193](137406 call ! call_tmp[663188]))
    unknown call_tmp[663198] "expr temp" "maybe param" "maybe type" "temp"
    (663201 'move' call_tmp[663198](137411 call _cond_test call_tmp[663193]))
    if call_tmp[663198]
    {
      (518916 'move' ret[518891](518915 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518889] _end_chpl__compatibleForBulkTransfer[518889]
    }
    (518921 'move' ret[518891](518920 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[518889]
    (518893 return ret[518891])
  }
  function chpl__supportedDataTypeForBulkTransfer[137425](arg t[137423]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518925] "RVV" "param" "temp"
    unknown tmp[426560] "maybe param" "temp"
    (426571 'move' tmp[426560](354343 'is_subtype' borrowed[211](?) t[137423]))
    unknown call_tmp[663203] "expr temp" "maybe param" "maybe type" "temp"
    (663206 'move' call_tmp[663203](426573 call _cond_invalid tmp[426560]))
    if call_tmp[663203]
    {
      (426576 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567695] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567696] "maybe param" "temp"
    unknown call_tmp[663208] "expr temp" "maybe param" "maybe type" "temp"
    (663211 'move' call_tmp[663208](426561 call isTrue tmp[426560]))
    (567701 'move' tmp[567696](567699 call _cond_test call_tmp[663208]))
    if tmp[567696]
    {
      (567706 'move' tmp[567695](567703 '_paramFoldLogical' tmp[567696] 1))
    }
    {
      unknown tmp[567708] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663213] "expr temp" "maybe param" "maybe type" "temp"
      (663216 'move' call_tmp[663213](354344 'is_subtype' unmanaged[220](?) t[137423]))
      (567710 'move' tmp[567708](426565 call isTrue call_tmp[663213]))
      (567715 'move' tmp[567695](567712 '_paramFoldLogical' tmp[567696] tmp[567708]))
    }
    unknown call_tmp[663218] "expr temp" "maybe param" "maybe type" "temp"
    (663221 'move' call_tmp[663218](137489 call _cond_test tmp[567695]))
    if call_tmp[663218]
    {
      (518930 'move' ret[518925](518929 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518923] _end_chpl__supportedDataTypeForBulkTransfer[518923]
    }
    {
      unknown tmp[426539] "maybe param" "temp"
      (426550 'move' tmp[426539](137446 call isRecordType t[137423]))
      unknown call_tmp[663223] "expr temp" "maybe param" "maybe type" "temp"
      (663226 'move' call_tmp[663223](426552 call _cond_invalid tmp[426539]))
      if call_tmp[663223]
      {
        (426555 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[567722] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567723] "maybe param" "temp"
      unknown call_tmp[663228] "expr temp" "maybe param" "maybe type" "temp"
      (663231 'move' call_tmp[663228](426540 call isTrue tmp[426539]))
      (567728 'move' tmp[567723](567726 call _cond_test call_tmp[663228]))
      if tmp[567723]
      {
        (567733 'move' tmp[567722](567730 '_paramFoldLogical' tmp[567723] 1))
      }
      {
        unknown tmp[567735] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663233] "expr temp" "maybe param" "maybe type" "temp"
        (663236 'move' call_tmp[663233](137450 call isTupleType t[137423]))
        (567737 'move' tmp[567735](426544 call isTrue call_tmp[663233]))
        (567742 'move' tmp[567722](567739 '_paramFoldLogical' tmp[567723] tmp[567735]))
      }
      unknown call_tmp[663238] "expr temp" "maybe param" "maybe type" "temp"
      (663241 'move' call_tmp[663238](137484 call _cond_test tmp[567722]))
      if call_tmp[663238]
      {
        unknown call_tmp[663243] "expr temp" "maybe param" "maybe type" "temp"
        (663246 'move' call_tmp[663243](137456 call isPODType t[137423]))
        (518935 'move' ret[518925](518934 'deref' call_tmp[663243]))
        gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518923] _end_chpl__supportedDataTypeForBulkTransfer[518923]
      }
      {
        unknown call_tmp[663248] "expr temp" "maybe param" "maybe type" "temp"
        (663251 'move' call_tmp[663248](137463 call isUnionType t[137423]))
        unknown call_tmp[663253] "expr temp" "maybe param" "maybe type" "temp"
        (663256 'move' call_tmp[663253](137480 call _cond_test call_tmp[663248]))
        if call_tmp[663253]
        {
          (518940 'move' ret[518925](518939 'deref' 0))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518923] _end_chpl__supportedDataTypeForBulkTransfer[518923]
        }
        {
          unknown x[137469] "dead at end of block" "insert auto destroy" "unsafe"
          (543134 'default init var' x[137469] t[137423])
          (137472 'end of statement')
          unknown call_tmp[663258] "expr temp" "maybe param" "maybe type" "temp"
          (663261 'move' call_tmp[663258](137477 call chpl__supportedDataTypeForBulkTransfer x[137469]))
          (518945 'move' ret[518925](518944 'deref' call_tmp[663258]))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518923] _end_chpl__supportedDataTypeForBulkTransfer[518923]
          (480630 'end of statement' x[137469])
        }
      }
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[518923]
    (518927 return ret[518925])
  }
  function chpl__supportedDataTypeForBulkTransfer[137503](arg x[137500]:string[26]) param : _unknown[51]
  {
    unknown ret[518951] "RVV" "param" "temp"
    (518956 'move' ret[518951](518955 'deref' 0))
    (518953 return ret[518951])
  }
  function chpl__supportedDataTypeForBulkTransfer[137517](arg x[137514]:bytes[24]) param : _unknown[51]
  {
    unknown ret[518960] "RVV" "param" "temp"
    (518965 'move' ret[518960](518964 'deref' 0))
    (518962 return ret[518960])
  }
  function chpl__supportedDataTypeForBulkTransfer[137531](arg x[137528]:_syncvar[84947](?)) param : _unknown[51]
  {
    unknown ret[518969] "RVV" "param" "temp"
    (518974 'move' ret[518969](518973 'deref' 0))
    (518971 return ret[518969])
  }
  function chpl__supportedDataTypeForBulkTransfer[137545](arg x[137542]:_singlevar[87256](?)) param : _unknown[51]
  {
    unknown ret[518978] "RVV" "param" "temp"
    (518983 'move' ret[518978](518982 'deref' 0))
    (518980 return ret[518978])
  }
  function chpl__supportedDataTypeForBulkTransfer[137559](arg x[137556]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[518987] "RVV" "param" "temp"
    (518992 'move' ret[518987](518991 'deref' 0))
    (518989 return ret[518987])
  }
  function chpl__supportedDataTypeForBulkTransfer[137575](arg x[137572]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[518996] "RVV" "param" "temp"
    (519001 'move' ret[518996](519000 'deref' 0))
    (518998 return ret[518996])
  }
  function chpl__supportedDataTypeForBulkTransfer[137589](arg x[137586]:_distribution[118973](?)) param : _unknown[51]
  {
    unknown ret[519005] "RVV" "param" "temp"
    (519010 'move' ret[519005](519009 'deref' 1))
    (519007 return ret[519005])
  }
  function chpl__supportedDataTypeForBulkTransfer[137603](arg x[137600]:locale[28]) param : _unknown[51]
  {
    unknown ret[519014] "RVV" "param" "temp"
    (519019 'move' ret[519014](519018 'deref' 1))
    (519016 return ret[519014])
  }
  function chpl__supportedDataTypeForBulkTransfer[137617](arg x[137614]:chpl_anycomplex[184](?)) param : _unknown[51]
  {
    unknown ret[519023] "RVV" "param" "temp"
    (519028 'move' ret[519023](519027 'deref' 1))
    (519025 return ret[519023])
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137629]:object[22]) param : _unknown[51]
  {
    unknown ret[519032] "RVV" "param" "temp"
    (519037 'move' ret[519032](519036 'deref' 0))
    (519034 return ret[519032])
  }
  function chpl__supportedDataTypeForBulkTransfer[137644](arg x[137642]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[519041] "RVV" "param" "temp"
    (519046 'move' ret[519041](519045 'deref' 1))
    (519043 return ret[519041])
  }
  function checkArrayShapesUponAssignment[137660](arg a[137657]:_array[133594](?), arg b[137665]:_array[133594](?)) : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[426581] "maybe param" "temp"
    (426592 'move' tmp[426581](137671 call isRectangularArr a[137657]))
    unknown call_tmp[663263] "expr temp" "maybe param" "maybe type" "temp"
    (663266 'move' call_tmp[663263](426594 call _cond_invalid tmp[426581]))
    if call_tmp[663263]
    {
      (426597 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567749] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567750] "maybe param" "temp"
    unknown call_tmp[663268] "expr temp" "maybe param" "maybe type" "temp"
    (663271 'move' call_tmp[663268](426582 call isTrue tmp[426581]))
    (567755 'move' tmp[567750](567753 call _cond_test call_tmp[663268]))
    if tmp[567750]
    {
      unknown tmp[567757] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663273] "expr temp" "maybe param" "maybe type" "temp"
      (663276 'move' call_tmp[663273](137675 call isRectangularArr b[137665]))
      (567759 'move' tmp[567757](426585 call isTrue call_tmp[663273]))
      (567764 'move' tmp[567749](567761 '_paramFoldLogical' tmp[567750] tmp[567757]))
    }
    {
      (567769 'move' tmp[567749](567766 '_paramFoldLogical' tmp[567750] 0))
    }
    unknown call_tmp[663278] "expr temp" "maybe param" "maybe type" "temp"
    (663281 'move' call_tmp[663278](137851 call _cond_test tmp[567749]))
    if call_tmp[663278]
    {
      unknown call_tmp[663285] "expr temp" "maybe param" "maybe type" "temp"
      (663288 'move' call_tmp[663285](137679 call _value _mt[243] a[137657]))
      unknown call_tmp[663292] "expr temp" "maybe param" "maybe type" "temp"
      (663295 'move' call_tmp[663292](137682 call dom _mt[243] call_tmp[663285]))
      unknown call_tmp[663299] "maybe param" "maybe type" "temp"
      (663302 'move' call_tmp[663299](137689 call(137685 call (partial) dsiDims _mt[243] call_tmp[663292])))
      const aDims[137690] "dead at end of block" "const" "insert auto destroy"
      (543136 'init var' aDims[137690] call_tmp[663299])
      unknown call_tmp[663306] "expr temp" "maybe param" "maybe type" "temp"
      (663309 'move' call_tmp[663306](137694 call _value _mt[243] b[137665]))
      unknown call_tmp[663313] "expr temp" "maybe param" "maybe type" "temp"
      (663316 'move' call_tmp[663313](137697 call dom _mt[243] call_tmp[663306]))
      unknown call_tmp[663320] "maybe param" "maybe type" "temp"
      (663323 'move' call_tmp[663320](137704 call(137700 call (partial) dsiDims _mt[243] call_tmp[663313])))
      const bDims[137705] "dead at end of block" "const" "insert auto destroy"
      (543138 'init var' bDims[137705] call_tmp[663320])
      (137708 'end of statement')
      unknown call_tmp[663327] "expr temp" "maybe param" "maybe type" "temp"
      (663330 'move' call_tmp[663327](137712 call size _mt[243] aDims[137690]))
      unknown call_tmp[663334] "expr temp" "maybe param" "maybe type" "temp"
      (663337 'move' call_tmp[663334](137716 call size _mt[243] bDims[137705]))
      unknown call_tmp[663339] "expr temp" "maybe param" "maybe type" "temp"
      (663342 'move' call_tmp[663339](137719 call == call_tmp[663327] call_tmp[663334]))
      (137722 call compilerAssert call_tmp[663339])
      (480644 'end of statement' aDims[137690] bDims[137705])
      {
        unknown i[137810] "dead at end of block" "insert auto destroy"
        (543140 'init var' i[137810] 0)
        (480647 'end of statement')
        unknown tmp[137811] "maybe param" "temp"
        unknown call_tmp[663346] "expr temp" "maybe param" "maybe type" "temp"
        (663349 'move' call_tmp[663346](137726 call size _mt[243] aDims[137690]))
        unknown call_tmp[663351] "expr temp" "maybe param" "maybe type" "temp"
        (663354 'move' call_tmp[663351](137730 call - call_tmp[663346] 1))
        (137823 'move' tmp[137811](137821 call chpl_compute_low_param_loop_bound 0 call_tmp[663351]))
        unknown tmp[137812] "maybe param" "temp"
        unknown call_tmp[663358] "expr temp" "maybe param" "maybe type" "temp"
        (663361 'move' call_tmp[663358](137830 call size _mt[243] aDims[137690]))
        unknown call_tmp[663363] "expr temp" "maybe param" "maybe type" "temp"
        (663366 'move' call_tmp[663363](137828 call - call_tmp[663358] 1))
        (137836 'move' tmp[137812](137834 call chpl_compute_high_param_loop_bound 0 call_tmp[663363]))
        unknown tmp[137813] "maybe param" "temp"
        (137839 'move' tmp[137813] 1)
        ParamForLoop[137841]
        { i[137810] tmp[137811] tmp[137812] tmp[137813]
          {
            unknown call_tmp[663368] "expr temp" "maybe param" "maybe type" "temp"
            (663371 'move' call_tmp[663368](137737 call aDims[137690] i[137810]))
            unknown call_tmp[663375] "expr temp" "maybe param" "maybe type" "temp"
            (663378 'move' call_tmp[663375](137738 call size _mt[243] call_tmp[663368]))
            unknown call_tmp[663380] "expr temp" "maybe param" "maybe type" "temp"
            (663383 'move' call_tmp[663380](137744 call bDims[137705] i[137810]))
            unknown call_tmp[663387] "expr temp" "maybe param" "maybe type" "temp"
            (663390 'move' call_tmp[663387](137745 call size _mt[243] call_tmp[663380]))
            unknown call_tmp[663392] "expr temp" "maybe param" "maybe type" "temp"
            (663395 'move' call_tmp[663392](137748 call != call_tmp[663375] call_tmp[663387]))
            unknown call_tmp[663397] "expr temp" "maybe param" "maybe type" "temp"
            (663400 'move' call_tmp[663397](137804 call _cond_test call_tmp[663392]))
            if call_tmp[663397]
            {
              unknown call_tmp[663402] "expr temp" "maybe param" "maybe type" "temp"
              (663405 'move' call_tmp[663402](137774 call aDims[137690] i[137810]))
              unknown call_tmp[663409] "expr temp" "maybe param" "maybe type" "temp"
              (663412 'move' call_tmp[663409](137775 call size _mt[243] call_tmp[663402]))
              unknown call_tmp[663414] "expr temp" "maybe param" "maybe type" "temp"
              (663417 'move' call_tmp[663414](137798 call bDims[137705] i[137810]))
              unknown call_tmp[663421] "expr temp" "maybe param" "maybe type" "temp"
              (663424 'move' call_tmp[663421](137799 call size _mt[243] call_tmp[663414]))
              (137802 call halt "assigning between arrays of different shapes in dimension " i[137810] ": " call_tmp[663409] " vs. " call_tmp[663421])
              (480648 'end of statement' i[137810] aDims[137690] i[137810] bDims[137705] i[137810])
            }
          }
        }
        label _unused_continueLabel[137815]
        label _breakLabel[137814]
      }
    }
    {
    }
    (519048 return _void[55])
  }
  function =[137866](ref arg a[137863]:_array[133594](?), arg b[137871]:_array[133594](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[663428] "expr temp" "maybe param" "maybe type" "temp"
    (663431 'move' call_tmp[663428](137875 call rank _mt[243] a[137863]))
    unknown call_tmp[663435] "expr temp" "maybe param" "maybe type" "temp"
    (663438 'move' call_tmp[663435](137879 call rank _mt[243] b[137871]))
    unknown call_tmp[663440] "expr temp" "maybe param" "maybe type" "temp"
    (663443 'move' call_tmp[663440](137882 call != call_tmp[663428] call_tmp[663435]))
    unknown call_tmp[663445] "expr temp" "maybe param" "maybe type" "temp"
    (663448 'move' call_tmp[663445](137905 call _cond_test call_tmp[663440]))
    if call_tmp[663445]
    {
      (137903 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[663452] "expr temp" "maybe param" "maybe type" "temp"
    (663455 'move' call_tmp[663452](137912 call _value _mt[243] b[137871]))
    unknown call_tmp[663457] "expr temp" "maybe param" "maybe type" "temp"
    (663460 'move' call_tmp[663457](137916 call == call_tmp[663452] nil[44]))
    unknown call_tmp[663462] "expr temp" "maybe param" "maybe type" "temp"
    (663465 'move' call_tmp[663462](137920 call _cond_test call_tmp[663457]))
    if call_tmp[663462]
    {
      gotoReturn _end_=[519050] _end_=[519050]
    }
    unknown call_tmp[663469] "expr temp" "maybe param" "maybe type" "temp"
    (663472 'move' call_tmp[663469](137926 call _value _mt[243] a[137863]))
    unknown call_tmp[663476] "expr temp" "maybe param" "maybe type" "temp"
    (663479 'move' call_tmp[663476](137930 call _value _mt[243] b[137871]))
    unknown call_tmp[663481] "expr temp" "maybe param" "maybe type" "temp"
    (663484 'move' call_tmp[663481](137933 call == call_tmp[663469] call_tmp[663476]))
    unknown call_tmp[663486] "expr temp" "maybe param" "maybe type" "temp"
    (663489 'move' call_tmp[663486](137938 call _cond_test call_tmp[663481]))
    if call_tmp[663486]
    {
      gotoReturn _end_=[519050] _end_=[519050]
    }
    unknown tmp[426602] "maybe param" "temp"
    unknown call_tmp[663493] "expr temp" "maybe param" "maybe type" "temp"
    (663496 'move' call_tmp[663493](137943 call size _mt[243] a[137863]))
    (426613 'move' tmp[426602](137947 call == call_tmp[663493] 0))
    unknown call_tmp[663498] "expr temp" "maybe param" "maybe type" "temp"
    (663501 'move' call_tmp[663498](426615 call _cond_invalid tmp[426602]))
    if call_tmp[663498]
    {
      (426618 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567776] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567777] "maybe param" "temp"
    unknown call_tmp[663503] "expr temp" "maybe param" "maybe type" "temp"
    (663506 'move' call_tmp[663503](426603 call isTrue tmp[426602]))
    (567782 'move' tmp[567777](567780 call _cond_test call_tmp[663503]))
    if tmp[567777]
    {
      unknown tmp[567784] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663510] "expr temp" "maybe param" "maybe type" "temp"
      (663513 'move' call_tmp[663510](137950 call size _mt[243] b[137871]))
      unknown call_tmp[663515] "expr temp" "maybe param" "maybe type" "temp"
      (663518 'move' call_tmp[663515](137954 call == call_tmp[663510] 0))
      (567786 'move' tmp[567784](426606 call isTrue call_tmp[663515]))
      (567791 'move' tmp[567776](567788 '_paramFoldLogical' tmp[567777] tmp[567784]))
    }
    {
      (567796 'move' tmp[567776](567793 '_paramFoldLogical' tmp[567777] 0))
    }
    unknown call_tmp[663520] "expr temp" "maybe param" "maybe type" "temp"
    (663523 'move' call_tmp[663520](137960 call _cond_test tmp[567776]))
    if call_tmp[663520]
    {
      gotoReturn _end_=[519050] _end_=[519050]
    }
    unknown call_tmp[663525] "expr temp" "maybe param" "maybe type" "temp"
    (663528 'move' call_tmp[663525](137972 call _cond_test 1))
    if call_tmp[663525]
    {
      (137970 call checkArrayShapesUponAssignment a[137863] b[137871])
    }
    (137988 call chpl__uncheckedArrayTransfer a[137863] b[137871](kind = assign[137997]))
    label _end_=[519050]
    (519052 return _void[55])
  }
  type _tElt[137999] def move[137993]:_tElt[137999] def initCopy[137995]:_tElt[137999] def assign[137997]:_tElt[137999]
  function needsInitWorkaround[138006](arg t[138004]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[519062] "RVV" "param" "temp"
    unknown tmp[426623] "maybe param" "temp"
    unknown tmp[426644] "maybe param" "temp"
    (426655 'move' tmp[426644](354348 'is_subtype' _array[133594](?) t[138004]))
    unknown call_tmp[663530] "expr temp" "maybe param" "maybe type" "temp"
    (663533 'move' call_tmp[663530](426657 call _cond_invalid tmp[426644]))
    if call_tmp[663530]
    {
      (426660 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567803] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567804] "maybe param" "temp"
    unknown call_tmp[663535] "expr temp" "maybe param" "maybe type" "temp"
    (663538 'move' call_tmp[663535](426645 call isTrue tmp[426644]))
    (567809 'move' tmp[567804](567807 call _cond_test call_tmp[663535]))
    if tmp[567804]
    {
      (567814 'move' tmp[567803](567811 '_paramFoldLogical' tmp[567804] 1))
    }
    {
      unknown tmp[567816] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663540] "expr temp" "maybe param" "maybe type" "temp"
      (663543 'move' call_tmp[663540](354349 'is_subtype' _domain[125908](?) t[138004]))
      (567818 'move' tmp[567816](426649 call isTrue call_tmp[663540]))
      (567823 'move' tmp[567803](567820 '_paramFoldLogical' tmp[567804] tmp[567816]))
    }
    (426634 'move' tmp[426623] tmp[567803])
    unknown call_tmp[663545] "expr temp" "maybe param" "maybe type" "temp"
    (663548 'move' call_tmp[663545](426636 call _cond_invalid tmp[426623]))
    if call_tmp[663545]
    {
      (426639 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567830] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567831] "maybe param" "temp"
    unknown call_tmp[663550] "expr temp" "maybe param" "maybe type" "temp"
    (663553 'move' call_tmp[663550](426624 call isTrue tmp[426623]))
    (567836 'move' tmp[567831](567834 call _cond_test call_tmp[663550]))
    if tmp[567831]
    {
      (567841 'move' tmp[567830](567838 '_paramFoldLogical' tmp[567831] 1))
    }
    {
      unknown tmp[567843] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663555] "expr temp" "maybe param" "maybe type" "temp"
      (663558 'move' call_tmp[663555](354350 'is_subtype' _distribution[118973](?) t[138004]))
      (567845 'move' tmp[567843](426628 call isTrue call_tmp[663555]))
      (567850 'move' tmp[567830](567847 '_paramFoldLogical' tmp[567831] tmp[567843]))
    }
    (519067 'move' ret[519062](519066 'deref' tmp[567830]))
    (519064 return ret[519062])
  }
  function initCopyAfterTransfer[138040](ref arg a[138037]:_array[133594](?)) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    unknown call_tmp[663562] "expr temp" "maybe param" "maybe type" "temp"
    (663565 'move' call_tmp[663562](138044 call eltType _mt[243] a[138037]))
    unknown call_tmp[663567] "expr temp" "maybe param" "maybe type" "temp"
    (663570 'move' call_tmp[663567](138048 call needsInitWorkaround call_tmp[663562]))
    unknown call_tmp[663572] "expr temp" "maybe param" "maybe type" "temp"
    (663575 'move' call_tmp[663572](138108 call _cond_test call_tmp[663567]))
    if call_tmp[663572]
    {
      unknown call_tmp[663579] "expr temp" "maybe param" "maybe type" "temp"
      (663582 'move' call_tmp[663579](415688 call _dom _mt[243] a[138037]))
      unknown call_tmp[663584] "maybe param" "maybe type" "temp"
      (663587 'move' call_tmp[663584](415684 call chpl__staticAutoLocalCheck a[138037] call_tmp[663579]))
      unknown chpl__staticAutoLocalCheckSym[415683] "dead at end of block" "param"
      (543142 'init var' chpl__staticAutoLocalCheckSym[415683] call_tmp[663584])
      (480664 'end of statement')
      if chpl__staticAutoLocalCheckSym[415683]
      {
        unknown call_tmp[663591] "expr temp" "maybe param" "maybe type" "temp"
        (663594 'move' call_tmp[663591](138051 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[138079] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663591]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138058] "dead at end of block" "ref var"
            unknown call_tmp[663596] "expr temp" "maybe param" "maybe type" "temp"
            (663599 'move' call_tmp[663596](415694 'may be local access' a[138037] ai[138079] chpl__staticAutoLocalCheckSym[415683] 1))
            (543145 'move' aa[138058](543144 'addr of' call_tmp[663596]))
            (138061 'end of statement')
            unknown call_tmp[663603] "maybe param" "maybe type" "temp"
            (663606 'move' call_tmp[663603](138064 call eltType _mt[243] a[138037]))
            unknown copy[138068] "dead at end of block" "no auto destroy"
            (543147 'init var' copy[138068] aa[138058] call_tmp[663603])
            (138071 'end of statement' ai[138079] aa[138058])
            (138076 '=' aa[138058] copy[138068])
            (480667 'end of statement' aa[138058] copy[138068])
          }
        }
      }
      {
        unknown call_tmp[663610] "expr temp" "maybe param" "maybe type" "temp"
        (663613 'move' call_tmp[663610](415680 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[415677] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663610]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415659] "dead at end of block" "ref var"
            unknown call_tmp[663615] "expr temp" "maybe param" "maybe type" "temp"
            (663618 'move' call_tmp[663615](415661 call a[138037] ai[415677]))
            (543150 'move' aa[415659](543149 'addr of' call_tmp[663615]))
            (415664 'end of statement')
            unknown call_tmp[663622] "maybe param" "maybe type" "temp"
            (663625 'move' call_tmp[663622](415668 call eltType _mt[243] a[138037]))
            unknown copy[415665] "dead at end of block" "no auto destroy"
            (543152 'init var' copy[415665] aa[415659] call_tmp[663622])
            (415672 'end of statement' ai[415677] aa[415659])
            (415673 '=' aa[415659] copy[415665])
            (480672 'end of statement' aa[415659] copy[415665])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138103] "index var" "insert auto destroy"
        iterated expressions:
          a[138037]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663629] "maybe param" "maybe type" "temp"
          (663632 'move' call_tmp[663629](138087 call eltType _mt[243] a[138037]))
          unknown copy[138091] "dead at end of block" "no auto destroy"
          (543154 'init var' copy[138091] aa[138103] call_tmp[663629])
          (138094 'end of statement' aa[138103])
          (138100 '=' aa[138103] copy[138091])
          (480676 'end of statement' aa[138103] copy[138091])
        }
      }
    }
    (519069 return _void[55])
  }
  function fixRuntimeType[138119](arg eltType[138117]:_any[178](?), ref arg elt[138121]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138124] "dead at end of block" "insert auto destroy"
    (543156 'init var' runtimeTypesDiffer[138124] 0)
    (138127 'end of statement')
    unknown tmp[426665] "maybe param" "temp"
    (426676 'move' tmp[426665](354351 'is_subtype' _array[133594](?) eltType[138117]))
    unknown call_tmp[663634] "expr temp" "maybe param" "maybe type" "temp"
    (663637 'move' call_tmp[663634](426678 call _cond_invalid tmp[426665]))
    if call_tmp[663634]
    {
      (426681 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567857] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567858] "maybe param" "temp"
    unknown call_tmp[663639] "expr temp" "maybe param" "maybe type" "temp"
    (663642 'move' call_tmp[663639](426666 call isTrue tmp[426665]))
    (567863 'move' tmp[567858](567861 call _cond_test call_tmp[663639]))
    if tmp[567858]
    {
      (567868 'move' tmp[567857](567865 '_paramFoldLogical' tmp[567858] 1))
    }
    {
      unknown tmp[567870] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663644] "expr temp" "maybe param" "maybe type" "temp"
      (663647 'move' call_tmp[663644](354352 'is_subtype' _domain[125908](?) eltType[138117]))
      (567872 'move' tmp[567870](426670 call isTrue call_tmp[663644]))
      (567877 'move' tmp[567857](567874 '_paramFoldLogical' tmp[567858] tmp[567870]))
    }
    unknown call_tmp[663649] "expr temp" "maybe param" "maybe type" "temp"
    (663652 'move' call_tmp[663649](138257 call _cond_test tmp[567857]))
    if call_tmp[663649]
    {
      unknown call_tmp[663654] "expr temp" "maybe param" "maybe type" "temp"
      (663657 'move' call_tmp[663654](354353 'is_subtype' _array[133594](?) eltType[138117]))
      unknown call_tmp[663659] "expr temp" "maybe param" "maybe type" "temp"
      (663662 'move' call_tmp[663659](138183 call _cond_test call_tmp[663654]))
      if call_tmp[663659]
      {
        const lhsDomain[138150] "dead at end of block" "const" "ref var"
        unknown call_tmp[663664] "expr temp" "maybe param" "maybe type" "temp"
        (663667 'move' call_tmp[663664](138149 call chpl__domainFromArrayRuntimeType eltType[138117]))
        (543159 'move' lhsDomain[138150](543158 'addr of' call_tmp[663664]))
        (138153 'end of statement')
        const rhsDomain[138159] "dead at end of block" "const" "ref var"
        unknown call_tmp[663671] "expr temp" "maybe param" "maybe type" "temp"
        (663674 'move' call_tmp[663671](138156 call _dom _mt[243] elt[138121]))
        (543162 'move' rhsDomain[138159](543161 'addr of' call_tmp[663671]))
        (138162 'end of statement')
        unknown call_tmp[663678] "expr temp" "maybe param" "maybe type" "temp"
        (663681 'move' call_tmp[663678](138164 call _instance _mt[243] lhsDomain[138150]))
        unknown call_tmp[663685] "expr temp" "maybe param" "maybe type" "temp"
        (663688 'move' call_tmp[663685](138168 call _instance _mt[243] rhsDomain[138159]))
        unknown call_tmp[663690] "expr temp" "maybe param" "maybe type" "temp"
        (663693 'move' call_tmp[663690](138171 call != call_tmp[663678] call_tmp[663685]))
        unknown call_tmp[663695] "expr temp" "maybe param" "maybe type" "temp"
        (663698 'move' call_tmp[663695](138179 call _cond_test call_tmp[663690]))
        if call_tmp[663695]
        {
          (138175 call = runtimeTypesDiffer[138124] 1)
          (480680 'end of statement' runtimeTypesDiffer[138124])
        }
      }
      unknown call_tmp[663700] "expr temp" "maybe param" "maybe type" "temp"
      (663703 'move' call_tmp[663700](354354 'is_subtype' _domain[125908](?) eltType[138117]))
      unknown call_tmp[663705] "expr temp" "maybe param" "maybe type" "temp"
      (663708 'move' call_tmp[663705](138230 call _cond_test call_tmp[663700]))
      if call_tmp[663705]
      {
        const lhsDist[138197] "dead at end of block" "const" "ref var"
        unknown call_tmp[663710] "expr temp" "maybe param" "maybe type" "temp"
        (663713 'move' call_tmp[663710](138196 call chpl__distributionFromDomainRuntimeType eltType[138117]))
        (543165 'move' lhsDist[138197](543164 'addr of' call_tmp[663710]))
        (138200 'end of statement')
        const rhsDist[138206] "dead at end of block" "const" "ref var"
        unknown call_tmp[663717] "expr temp" "maybe param" "maybe type" "temp"
        (663720 'move' call_tmp[663717](138203 call dist _mt[243] elt[138121]))
        (543168 'move' rhsDist[138206](543167 'addr of' call_tmp[663717]))
        (138209 'end of statement')
        unknown call_tmp[663724] "expr temp" "maybe param" "maybe type" "temp"
        (663727 'move' call_tmp[663724](138211 call _instance _mt[243] lhsDist[138197]))
        unknown call_tmp[663731] "expr temp" "maybe param" "maybe type" "temp"
        (663734 'move' call_tmp[663731](138215 call _instance _mt[243] rhsDist[138206]))
        unknown call_tmp[663736] "expr temp" "maybe param" "maybe type" "temp"
        (663739 'move' call_tmp[663736](138218 call != call_tmp[663724] call_tmp[663731]))
        unknown call_tmp[663741] "expr temp" "maybe param" "maybe type" "temp"
        (663744 'move' call_tmp[663741](138226 call _cond_test call_tmp[663736]))
        if call_tmp[663741]
        {
          (138222 call = runtimeTypesDiffer[138124] 1)
          (480682 'end of statement' runtimeTypesDiffer[138124])
        }
      }
      unknown call_tmp[663746] "expr temp" "maybe param" "maybe type" "temp"
      (663749 'move' call_tmp[663746](138253 call _cond_test runtimeTypesDiffer[138124]))
      if call_tmp[663746]
      {
        unknown copy[138237] "dead at end of block" "no auto destroy"
        (543170 'init var' copy[138237] elt[138121] eltType[138117])
        (138240 'end of statement')
        (138245 call chpl__autoDestroy elt[138121])
        (480684 'end of statement')
        (138251 '=' elt[138121] copy[138237])
        (480685 'end of statement' copy[138237])
      }
    }
    (519071 return _void[55])
  }
  function fixEltRuntimeTypesAfterTransfer[138271](ref arg a[138268]:_array[133594](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[663753] "expr temp" "maybe param" "maybe type" "temp"
    (663756 'move' call_tmp[663753](138275 call eltType _mt[243] a[138268]))
    unknown call_tmp[663758] "expr temp" "maybe param" "maybe type" "temp"
    (663761 'move' call_tmp[663758](138279 call needsInitWorkaround call_tmp[663753]))
    unknown call_tmp[663763] "expr temp" "maybe param" "maybe type" "temp"
    (663766 'move' call_tmp[663763](138327 call _cond_test call_tmp[663758]))
    if call_tmp[663763]
    {
      unknown call_tmp[663770] "expr temp" "maybe param" "maybe type" "temp"
      (663773 'move' call_tmp[663770](415727 call _dom _mt[243] a[138268]))
      unknown call_tmp[663775] "maybe param" "maybe type" "temp"
      (663778 'move' call_tmp[663775](415723 call chpl__staticAutoLocalCheck a[138268] call_tmp[663770]))
      unknown chpl__staticAutoLocalCheckSym[415722] "dead at end of block" "param"
      (543172 'init var' chpl__staticAutoLocalCheckSym[415722] call_tmp[663775])
      (480687 'end of statement')
      if chpl__staticAutoLocalCheckSym[415722]
      {
        unknown call_tmp[663782] "expr temp" "maybe param" "maybe type" "temp"
        (663785 'move' call_tmp[663782](138282 call _dom _mt[243] a[138268]))
        Forall {
          induction variables:
            
            unknown ai[138304] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663782]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138289] "dead at end of block" "ref var"
            unknown call_tmp[663787] "expr temp" "maybe param" "maybe type" "temp"
            (663790 'move' call_tmp[663787](415733 'may be local access' a[138268] ai[138304] chpl__staticAutoLocalCheckSym[415722] 1))
            (543175 'move' aa[138289](543174 'addr of' call_tmp[663787]))
            (138292 'end of statement' ai[138304])
            unknown call_tmp[663794] "expr temp" "maybe param" "maybe type" "temp"
            (663797 'move' call_tmp[663794](138296 call eltType _mt[243] a[138268]))
            (138301 call fixRuntimeType call_tmp[663794] aa[138289])
            (480689 'end of statement' aa[138289])
          }
        }
      }
      {
        unknown call_tmp[663801] "expr temp" "maybe param" "maybe type" "temp"
        (663804 'move' call_tmp[663801](415719 call _dom _mt[243] a[138268]))
        Forall {
          induction variables:
            
            unknown ai[415716] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663801]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415702] "dead at end of block" "ref var"
            unknown call_tmp[663806] "expr temp" "maybe param" "maybe type" "temp"
            (663809 'move' call_tmp[663806](415704 call a[138268] ai[415716]))
            (543178 'move' aa[415702](543177 'addr of' call_tmp[663806]))
            (415707 'end of statement' ai[415716])
            unknown call_tmp[663813] "expr temp" "maybe param" "maybe type" "temp"
            (663816 'move' call_tmp[663813](415711 call eltType _mt[243] a[138268]))
            (415709 call fixRuntimeType call_tmp[663813] aa[415702])
            (480692 'end of statement' aa[415702])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138322] "index var" "insert auto destroy"
        iterated expressions:
          a[138268]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663820] "expr temp" "maybe param" "maybe type" "temp"
          (663823 'move' call_tmp[663820](138313 call eltType _mt[243] a[138268]))
          (138318 call fixRuntimeType call_tmp[663820] aa[138322])
          (480694 'end of statement' aa[138322])
        }
      }
    }
    (519073 return _void[55])
  }
  function chpl__uncheckedArrayTransfer[138342](ref arg a[138339]:_array[133594](?), arg b[138347]:_array[133594](?), param arg kind[138350]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138353] "dead at end of block" "insert auto destroy"
    (543180 'init var' done[138353] 0)
    (138356 'end of statement')
    unknown call_tmp[663825] "expr temp" "maybe param" "maybe type" "temp"
    (663828 'move' call_tmp[663825](138362 call chpl__serializeAssignment a[138339] b[138347]))
    unknown call_tmp[663830] "expr temp" "maybe param" "maybe type" "temp"
    (663833 'move' call_tmp[663830](138363 call ! call_tmp[663825]))
    unknown call_tmp[663835] "expr temp" "maybe param" "maybe type" "temp"
    (663838 'move' call_tmp[663835](138479 call _cond_test call_tmp[663830]))
    if call_tmp[663835]
    {
      unknown call_tmp[663840] "expr temp" "maybe param" "maybe type" "temp"
      (663843 'move' call_tmp[663840](138370 call chpl__compatibleForBulkTransfer a[138339] b[138347] kind[138350]))
      unknown call_tmp[663845] "expr temp" "maybe param" "maybe type" "temp"
      (663848 'move' call_tmp[663845](138401 call _cond_test call_tmp[663840]))
      if call_tmp[663845]
      {
        unknown call_tmp[663850] "expr temp" "maybe param" "maybe type" "temp"
        (663853 'move' call_tmp[663850](138376 call chpl__bulkTransferArray a[138339] b[138347]))
        (138377 call = done[138353] call_tmp[663850])
        (480696 'end of statement' done[138353])
      }
      {
        unknown call_tmp[663855] "expr temp" "maybe param" "maybe type" "temp"
        (663858 'move' call_tmp[663855](138386 call chpl__compatibleForWidePtrBulkTransfer a[138339] b[138347] kind[138350]))
        unknown call_tmp[663860] "expr temp" "maybe param" "maybe type" "temp"
        (663863 'move' call_tmp[663860](138397 call _cond_test call_tmp[663855]))
        if call_tmp[663860]
        {
          unknown call_tmp[663865] "expr temp" "maybe param" "maybe type" "temp"
          (663868 'move' call_tmp[663865](138392 call chpl__bulkTransferPtrArray a[138339] b[138347]))
          (138393 call = done[138353] call_tmp[663865])
          (480698 'end of statement' done[138353])
        }
      }
      unknown call_tmp[663870] "expr temp" "maybe param" "maybe type" "temp"
      (663873 'move' call_tmp[663870](138475 call _cond_test done[138353]))
      if call_tmp[663870]
      {
        unknown tmp[426728] "maybe param" "temp"
        (426739 'move' tmp[426728](138413 call == kind[138350] initCopy[137995]))
        unknown call_tmp[663875] "expr temp" "maybe param" "maybe type" "temp"
        (663878 'move' call_tmp[663875](426741 call _cond_invalid tmp[426728]))
        if call_tmp[663875]
        {
          (426744 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567884] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567885] "maybe param" "temp"
        unknown call_tmp[663880] "expr temp" "maybe param" "maybe type" "temp"
        (663883 'move' call_tmp[663880](426729 call isTrue tmp[426728]))
        (567890 'move' tmp[567885](567888 call _cond_test call_tmp[663880]))
        if tmp[567885]
        {
          unknown tmp[567892] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[663887] "expr temp" "maybe param" "maybe type" "temp"
          (663890 'move' call_tmp[663887](138417 call eltType _mt[243] a[138339]))
          unknown call_tmp[663892] "expr temp" "maybe param" "maybe type" "temp"
          (663895 'move' call_tmp[663892](138421 call isPODType call_tmp[663887]))
          unknown call_tmp[663897] "expr temp" "maybe param" "maybe type" "temp"
          (663900 'move' call_tmp[663897](138422 call ! call_tmp[663892]))
          (567894 'move' tmp[567892](426732 call isTrue call_tmp[663897]))
          (567899 'move' tmp[567884](567896 '_paramFoldLogical' tmp[567885] tmp[567892]))
        }
        {
          (567904 'move' tmp[567884](567901 '_paramFoldLogical' tmp[567885] 0))
        }
        unknown call_tmp[663902] "expr temp" "maybe param" "maybe type" "temp"
        (663905 'move' call_tmp[663902](138469 call _cond_test tmp[567884]))
        if call_tmp[663902]
        {
          (138429 call initCopyAfterTransfer a[138339])
        }
        {
          unknown tmp[426686] "maybe param" "temp"
          (426697 'move' tmp[426686](138437 call == kind[138350] move[137993]))
          unknown call_tmp[663907] "expr temp" "maybe param" "maybe type" "temp"
          (663910 'move' call_tmp[663907](426699 call _cond_invalid tmp[426686]))
          if call_tmp[663907]
          {
            (426702 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567938] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[567939] "maybe param" "temp"
          unknown call_tmp[663912] "expr temp" "maybe param" "maybe type" "temp"
          (663915 'move' call_tmp[663912](426687 call isTrue tmp[426686]))
          (567944 'move' tmp[567939](567942 call _cond_test call_tmp[663912]))
          if tmp[567939]
          {
            unknown tmp[426707] "maybe param" "temp"
            unknown call_tmp[663919] "expr temp" "maybe param" "maybe type" "temp"
            (663922 'move' call_tmp[663919](138441 call eltType _mt[243] a[138339]))
            (426718 'move' tmp[426707](354355 'is_subtype' _array[133594](?) call_tmp[663919]))
            unknown call_tmp[663924] "expr temp" "maybe param" "maybe type" "temp"
            (663927 'move' call_tmp[663924](426720 call _cond_invalid tmp[426707]))
            if call_tmp[663924]
            {
              (426723 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[567911] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[567912] "maybe param" "temp"
            unknown call_tmp[663929] "expr temp" "maybe param" "maybe type" "temp"
            (663932 'move' call_tmp[663929](426708 call isTrue tmp[426707]))
            (567917 'move' tmp[567912](567915 call _cond_test call_tmp[663929]))
            if tmp[567912]
            {
              (567922 'move' tmp[567911](567919 '_paramFoldLogical' tmp[567912] 1))
            }
            {
              unknown tmp[567924] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[663936] "expr temp" "maybe param" "maybe type" "temp"
              (663939 'move' call_tmp[663936](138449 call eltType _mt[243] a[138339]))
              unknown call_tmp[663941] "expr temp" "maybe param" "maybe type" "temp"
              (663944 'move' call_tmp[663941](354356 'is_subtype' _domain[125908](?) call_tmp[663936]))
              (567926 'move' tmp[567924](426712 call isTrue call_tmp[663941]))
              (567931 'move' tmp[567911](567928 '_paramFoldLogical' tmp[567912] tmp[567924]))
            }
            unknown tmp[567946] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (567948 'move' tmp[567946](426690 call isTrue tmp[567911]))
            (567953 'move' tmp[567938](567950 '_paramFoldLogical' tmp[567939] tmp[567946]))
          }
          {
            (567958 'move' tmp[567938](567955 '_paramFoldLogical' tmp[567939] 0))
          }
          unknown call_tmp[663946] "expr temp" "maybe param" "maybe type" "temp"
          (663949 'move' call_tmp[663946](138465 call _cond_test tmp[567938]))
          if call_tmp[663946]
          {
            (138462 call fixEltRuntimeTypesAfterTransfer a[138339])
          }
        }
      }
    }
    unknown call_tmp[663951] "expr temp" "maybe param" "maybe type" "temp"
    (663954 'move' call_tmp[663951](138484 call ! done[138353]))
    unknown call_tmp[663956] "expr temp" "maybe param" "maybe type" "temp"
    (663959 'move' call_tmp[663956](138494 call _cond_test call_tmp[663951]))
    if call_tmp[663956]
    {
      (138491 call chpl__transferArray a[138339] b[138347] kind[138350])
    }
    (519075 return _void[55])
  }
  function chpl__compatibleForWidePtrBulkTransfer[138504](arg a[138502]:_any[178](?), arg b[138506]:_any[178](?), param arg kind[138512] :
  assign[137997] =
  assign[137997]) param : _unknown[51]
  {
    unknown ret[519079] "RVV" "param" "temp"
    unknown call_tmp[663961] "expr temp" "maybe param" "maybe type" "temp"
    (663964 'move' call_tmp[663961](138516 call ! useBulkPtrTransfer[113738]))
    unknown call_tmp[663966] "expr temp" "maybe param" "maybe type" "temp"
    (663969 'move' call_tmp[663966](138521 call _cond_test call_tmp[663961]))
    if call_tmp[663966]
    {
      (519084 'move' ret[519079](519083 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519077] _end_chpl__compatibleForWidePtrBulkTransfer[519077]
    }
    unknown tmp[426749] "maybe param" "temp"
    unknown call_tmp[663973] "expr temp" "maybe param" "maybe type" "temp"
    (663976 'move' call_tmp[663973](138528 call _value _mt[243] a[138502]))
    (426760 'move' tmp[426749](138535 call(138531 call (partial) isDefaultRectangular _mt[243] call_tmp[663973])))
    unknown call_tmp[663980] "expr temp" "maybe param" "maybe type" "temp"
    (663983 'move' call_tmp[663980](426762 call _cond_invalid tmp[426749]))
    if call_tmp[663980]
    {
      (426765 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567965] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567966] "maybe param" "temp"
    unknown call_tmp[663985] "expr temp" "maybe param" "maybe type" "temp"
    (663988 'move' call_tmp[663985](426750 call isTrue tmp[426749]))
    (567971 'move' tmp[567966](567969 call _cond_test call_tmp[663985]))
    if tmp[567966]
    {
      unknown tmp[567973] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663992] "expr temp" "maybe param" "maybe type" "temp"
      (663995 'move' call_tmp[663992](138537 call _value _mt[243] b[138506]))
      unknown call_tmp[663999] "expr temp" "maybe param" "maybe type" "temp"
      (664002 'move' call_tmp[663999](138544 call(138540 call (partial) isDefaultRectangular _mt[243] call_tmp[663992])))
      (567975 'move' tmp[567973](426753 call isTrue call_tmp[663999]))
      (567980 'move' tmp[567965](567977 '_paramFoldLogical' tmp[567966] tmp[567973]))
    }
    {
      (567985 'move' tmp[567965](567982 '_paramFoldLogical' tmp[567966] 0))
    }
    unknown call_tmp[664004] "expr temp" "maybe param" "maybe type" "temp"
    (664007 'move' call_tmp[664004](138547 call ! tmp[567965]))
    unknown call_tmp[664009] "expr temp" "maybe param" "maybe type" "temp"
    (664012 'move' call_tmp[664009](138552 call _cond_test call_tmp[664004]))
    if call_tmp[664009]
    {
      (519089 'move' ret[519079](519088 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519077] _end_chpl__compatibleForWidePtrBulkTransfer[519077]
    }
    unknown call_tmp[664016] "expr temp" "maybe param" "maybe type" "temp"
    (664019 'move' call_tmp[664016](138558 call eltType _mt[243] a[138502]))
    unknown call_tmp[664023] "expr temp" "maybe param" "maybe type" "temp"
    (664026 'move' call_tmp[664023](138562 call eltType _mt[243] b[138506]))
    unknown call_tmp[664028] "expr temp" "maybe param" "maybe type" "temp"
    (664031 'move' call_tmp[664028](138565 call != call_tmp[664016] call_tmp[664023]))
    unknown call_tmp[664033] "expr temp" "maybe param" "maybe type" "temp"
    (664036 'move' call_tmp[664033](138570 call _cond_test call_tmp[664028]))
    if call_tmp[664033]
    {
      (519094 'move' ret[519079](519093 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519077] _end_chpl__compatibleForWidePtrBulkTransfer[519077]
    }
    unknown call_tmp[664040] "expr temp" "maybe param" "maybe type" "temp"
    (664043 'move' call_tmp[664040](138577 call eltType _mt[243] a[138502]))
    unknown call_tmp[664045] "expr temp" "maybe param" "maybe type" "temp"
    (664048 'move' call_tmp[664045](138581 call isClass call_tmp[664040]))
    unknown call_tmp[664050] "expr temp" "maybe param" "maybe type" "temp"
    (664053 'move' call_tmp[664050](138582 call ! call_tmp[664045]))
    unknown call_tmp[664055] "expr temp" "maybe param" "maybe type" "temp"
    (664058 'move' call_tmp[664055](138587 call _cond_test call_tmp[664050]))
    if call_tmp[664055]
    {
      (519099 'move' ret[519079](519098 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519077] _end_chpl__compatibleForWidePtrBulkTransfer[519077]
    }
    unknown call_tmp[664062] "expr temp" "maybe param" "maybe type" "temp"
    (664065 'move' call_tmp[664062](138594 call eltType _mt[243] a[138502]))
    unknown call_tmp[664067] "expr temp" "maybe param" "maybe type" "temp"
    (664070 'move' call_tmp[664067](138598 call isOwnedClass call_tmp[664062]))
    unknown call_tmp[664072] "expr temp" "maybe param" "maybe type" "temp"
    (664075 'move' call_tmp[664072](138602 call _cond_test call_tmp[664067]))
    if call_tmp[664072]
    {
      (519104 'move' ret[519079](519103 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519077] _end_chpl__compatibleForWidePtrBulkTransfer[519077]
    }
    unknown call_tmp[664079] "expr temp" "maybe param" "maybe type" "temp"
    (664082 'move' call_tmp[664079](138609 call eltType _mt[243] a[138502]))
    unknown call_tmp[664084] "expr temp" "maybe param" "maybe type" "temp"
    (664087 'move' call_tmp[664084](138613 call isSharedClass call_tmp[664079]))
    unknown call_tmp[664089] "expr temp" "maybe param" "maybe type" "temp"
    (664092 'move' call_tmp[664089](138617 call _cond_test call_tmp[664084]))
    if call_tmp[664089]
    {
      (519109 'move' ret[519079](519108 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519077] _end_chpl__compatibleForWidePtrBulkTransfer[519077]
    }
    (519114 'move' ret[519079](519113 'deref' 1))
    label _end_chpl__compatibleForWidePtrBulkTransfer[519077]
    (519081 return ret[519079])
  }
  function chpl__bulkTransferPtrArray[138635](ref arg a[138632]:_array[133594](?), arg b[138640]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[519118] "RVV" "temp"
    unknown call_tmp[664096] "maybe param" "maybe type" "temp"
    (664099 'move' call_tmp[664096](138644 call _dom _mt[243] a[138632]))
    const aDom[138647] "dead at end of block" "const" "insert auto destroy"
    (543182 'init var' aDom[138647] call_tmp[664096])
    (138650 'end of statement')
    unknown call_tmp[664103] "maybe param" "maybe type" "temp"
    (664106 'move' call_tmp[664103](138653 call _dom _mt[243] b[138640]))
    const bDom[138656] "dead at end of block" "const" "insert auto destroy"
    (543184 'init var' bDom[138656] call_tmp[664103])
    (138659 'end of statement')
    unknown call_tmp[664108] "expr temp" "maybe param" "maybe type" "temp"
    (664111 'move' call_tmp[664108](138662 call != aDom[138647] bDom[138656]))
    unknown call_tmp[664113] "expr temp" "maybe param" "maybe type" "temp"
    (664116 'move' call_tmp[664113](138667 call _cond_test call_tmp[664108]))
    if call_tmp[664113]
    {
      (519123 'move' ret[519118](519122 'deref' 0))
      gotoReturn _end_chpl__bulkTransferPtrArray[519116] _end_chpl__bulkTransferPtrArray[519116]
    }
    unknown call_tmp[664120] "expr temp" "maybe param" "maybe type" "temp"
    (664123 'move' call_tmp[664120](138692 call low _mt[243] aDom[138647]))
    unknown call_tmp[664125] "expr temp" "maybe param" "maybe type" "temp"
    (664128 'move' call_tmp[664125](138696 call a[138632] call_tmp[664120]))
    unknown call_tmp[664130] "expr temp" "maybe param" "maybe type" "temp"
    (664133 'move' call_tmp[664130](138697 'is wide pointer' call_tmp[664125]))
    unknown call_tmp[664135] "expr temp" "maybe param" "maybe type" "temp"
    (664138 'move' call_tmp[664135](138708 call _cond_test call_tmp[664130]))
    if call_tmp[664135]
    {
      unknown call_tmp[664140] "expr temp" "maybe param" "maybe type" "temp"
      (664143 'move' call_tmp[664140](138704 call chpl__bulkTransferArray a[138632] aDom[138647] b[138640] bDom[138656]))
      (519128 'move' ret[519118](519127 'deref' call_tmp[664140]))
      gotoReturn _end_chpl__bulkTransferPtrArray[519116] _end_chpl__bulkTransferPtrArray[519116]
      (480714 'end of statement' aDom[138647] bDom[138656])
    }
    (519133 'move' ret[519118](519132 'deref' 0))
    label _end_chpl__bulkTransferPtrArray[519116]
    (519120 return ret[519118])
  }
  function chpl__bulkTransferArray[138727](ref arg a[138724]:_array[133594](?), arg b[138734]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[519137] "RVV" "temp"
    unknown call_tmp[664147] "expr temp" "maybe param" "maybe type" "temp"
    (664150 'move' call_tmp[664147](461543 call _dom _mt[243] a[138724]))
    unknown call_tmp[664154] "expr temp" "maybe param" "maybe type" "temp"
    (664157 'move' call_tmp[664154](461549 call _dom _mt[243] b[138734]))
    unknown call_tmp[664159] "expr temp" "maybe param" "maybe type" "temp"
    (664162 'move' call_tmp[664159](138743 call chpl__bulkTransferArray a[138724] call_tmp[664147] b[138734] call_tmp[664154]))
    (519142 'move' ret[519137](519141 'deref' call_tmp[664159]))
    (519139 return ret[519137])
  }
  function chpl__bulkTransferArray[138757](ref arg a[138754]:_array[133594](?), arg AD[138760]:_domain[125908](?), const  ref arg b[138766]:_array[133594](?), arg BD[138770]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[519146] "RVV" "temp"
    unknown call_tmp[664166] "expr temp" "maybe param" "maybe type" "temp"
    (664169 'move' call_tmp[664166](138775 call _value _mt[243] a[138754]))
    unknown call_tmp[664173] "expr temp" "maybe param" "maybe type" "temp"
    (664176 'move' call_tmp[664173](138781 call _value _mt[243] b[138766]))
    unknown call_tmp[664178] "expr temp" "maybe param" "maybe type" "temp"
    (664181 'move' call_tmp[664178](138785 call chpl__bulkTransferArray call_tmp[664166] AD[138760] call_tmp[664173] BD[138770]))
    (519151 'move' ret[519146](519150 'deref' call_tmp[664178]))
    (519148 return ret[519146])
  }
  function chpl__bulkTransferArray[138795](arg destClass[138793]:_any[178](?), arg destDom[138798]:_domain[125908](?), arg srcClass[138801]:_any[178](?), arg srcDom[138804]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[519157] "RVV" "temp"
    unknown success[138808] "dead at end of block" "insert auto destroy"
    (543186 'init var' success[138808] 0)
    (138811 'end of statement')
    function bulkTransferDebug[138819](arg msg[138816]:string[26]) : _unknown[51] "inline" "no return value for void"
    {
      unknown call_tmp[664183] "expr temp" "maybe param" "maybe type" "temp"
      (664186 'move' call_tmp[664183](138844 call _cond_test debugBulkTransfer[113723]))
      if call_tmp[664183]
      {
        (138842 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138816])
      }
      (519153 return _void[55])
    }
    (138871 call bulkTransferDebug "in chpl__bulkTransferArray")
    (480721 'end of statement')
    unknown call_tmp[664188] "expr temp" "maybe param" "maybe type" "temp"
    (664191 'move' call_tmp[664188](138899 call canResolveMethod module=[255] Reflection[224901] destClass[138793] "doiBulkTransferFromKnown" destDom[138798] srcClass[138801] srcDom[138804]))
    unknown call_tmp[664193] "expr temp" "maybe param" "maybe type" "temp"
    (664196 'move' call_tmp[664193](139135 call _cond_test call_tmp[664188]))
    if call_tmp[664193]
    {
      (138919 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (480722 'end of statement')
      unknown call_tmp[664200] "expr temp" "maybe param" "maybe type" "temp"
      (664203 'move' call_tmp[664200](138931 call(138924 call (partial) doiBulkTransferFromKnown _mt[243] destClass[138793]) destDom[138798] srcClass[138801] srcDom[138804]))
      (138932 call = success[138808] call_tmp[664200])
      (480723 'end of statement' success[138808])
    }
    {
      unknown call_tmp[664205] "expr temp" "maybe param" "maybe type" "temp"
      (664208 'move' call_tmp[664205](138961 call canResolveMethod module=[255] Reflection[224901] srcClass[138801] "doiBulkTransferToKnown" srcDom[138804] destClass[138793] destDom[138798]))
      unknown call_tmp[664210] "expr temp" "maybe param" "maybe type" "temp"
      (664213 'move' call_tmp[664210](139130 call _cond_test call_tmp[664205]))
      if call_tmp[664210]
      {
        (138981 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (480725 'end of statement')
        unknown call_tmp[664217] "expr temp" "maybe param" "maybe type" "temp"
        (664220 'move' call_tmp[664217](138993 call(138986 call (partial) doiBulkTransferToKnown _mt[243] srcClass[138801]) srcDom[138804] destClass[138793] destDom[138798]))
        (138994 call = success[138808] call_tmp[664217])
        (480726 'end of statement' success[138808])
      }
      {
        unknown call_tmp[664222] "expr temp" "maybe param" "maybe type" "temp"
        (664225 'move' call_tmp[664222](139023 call canResolveMethod module=[255] Reflection[224901] destClass[138793] "doiBulkTransferFromAny" destDom[138798] srcClass[138801] srcDom[138804]))
        unknown call_tmp[664227] "expr temp" "maybe param" "maybe type" "temp"
        (664230 'move' call_tmp[664227](139125 call _cond_test call_tmp[664222]))
        if call_tmp[664227]
        {
          (139043 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (480728 'end of statement')
          unknown call_tmp[664234] "expr temp" "maybe param" "maybe type" "temp"
          (664237 'move' call_tmp[664234](139055 call(139048 call (partial) doiBulkTransferFromAny _mt[243] destClass[138793]) destDom[138798] srcClass[138801] srcDom[138804]))
          (139056 call = success[138808] call_tmp[664234])
          (480729 'end of statement' success[138808])
        }
        {
          unknown call_tmp[664239] "expr temp" "maybe param" "maybe type" "temp"
          (664242 'move' call_tmp[664239](139085 call canResolveMethod module=[255] Reflection[224901] srcClass[138801] "doiBulkTransferToAny" srcDom[138804] destClass[138793] destDom[138798]))
          unknown call_tmp[664244] "expr temp" "maybe param" "maybe type" "temp"
          (664247 'move' call_tmp[664244](139121 call _cond_test call_tmp[664239]))
          if call_tmp[664244]
          {
            (139105 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (480731 'end of statement')
            unknown call_tmp[664251] "expr temp" "maybe param" "maybe type" "temp"
            (664254 'move' call_tmp[664251](139117 call(139110 call (partial) doiBulkTransferToAny _mt[243] srcClass[138801]) srcDom[138804] destClass[138793] destDom[138798]))
            (139118 call = success[138808] call_tmp[664251])
            (480732 'end of statement' success[138808])
          }
          (360264 'referenced modules list' Reflection[224901])
        }
        (360257 'referenced modules list' Reflection[224901])
      }
      (360250 'referenced modules list' Reflection[224901])
    }
    unknown call_tmp[664256] "expr temp" "maybe param" "maybe type" "temp"
    (664259 'move' call_tmp[664256](139183 call _cond_test success[138808]))
    if call_tmp[664256]
    {
      (139160 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139181 call bulkTransferDebug "bulk transfer did not happen")
    }
    (519162 'move' ret[519157](519161 'deref' success[138808]))
    gotoReturn _end_chpl__bulkTransferArray[519155] _end_chpl__bulkTransferArray[519155]
    (480736 'end of statement' success[138808])
    label _end_chpl__bulkTransferArray[519155]
    (519159 return ret[519157])
    (360243 'referenced modules list' Reflection[224901])
  }
  function chpl__transferArray[139202](ref arg a[139199]:_array[133594](?), const  ref arg b[139204]:_any[178](?), param arg kind[139210] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    unknown tmp[426791] "maybe param" "temp"
    unknown call_tmp[664263] "expr temp" "maybe param" "maybe type" "temp"
    (664266 'move' call_tmp[664263](139220 call eltType _mt[243] a[139199]))
    unknown call_tmp[664268] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (664271 'move' call_tmp[664268](139224 'typeof' b[139204]))
    (426802 'move' tmp[426791](139225 call == call_tmp[664263] call_tmp[664268]))
    unknown call_tmp[664273] "expr temp" "maybe param" "maybe type" "temp"
    (664276 'move' call_tmp[664273](426804 call _cond_invalid tmp[426791]))
    if call_tmp[664273]
    {
      (426807 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568019] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568020] "maybe param" "temp"
    unknown call_tmp[664278] "expr temp" "maybe param" "maybe type" "temp"
    (664281 'move' call_tmp[664278](426792 call isTrue tmp[426791]))
    (568025 'move' tmp[568020](568023 call _cond_test call_tmp[664278]))
    if tmp[568020]
    {
      (568030 'move' tmp[568019](568027 '_paramFoldLogical' tmp[568020] 1))
    }
    {
      unknown tmp[426812] "maybe param" "temp"
      unknown call_tmp[664285] "expr temp" "maybe param" "maybe type" "temp"
      (664288 'move' call_tmp[664285](139229 call eltType _mt[243] a[139199]))
      (426823 'move' tmp[426812](139233 call _isPrimitiveType call_tmp[664285]))
      unknown call_tmp[664290] "expr temp" "maybe param" "maybe type" "temp"
      (664293 'move' call_tmp[664290](426825 call _cond_invalid tmp[426812]))
      if call_tmp[664290]
      {
        (426828 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567992] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567993] "maybe param" "temp"
      unknown call_tmp[664295] "expr temp" "maybe param" "maybe type" "temp"
      (664298 'move' call_tmp[664295](426813 call isTrue tmp[426812]))
      (567998 'move' tmp[567993](567996 call _cond_test call_tmp[664295]))
      if tmp[567993]
      {
        unknown tmp[568000] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664300] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (664303 'move' call_tmp[664300](139236 'typeof' b[139204]))
        unknown call_tmp[664305] "expr temp" "maybe param" "maybe type" "temp"
        (664308 'move' call_tmp[664305](139238 call _isPrimitiveType call_tmp[664300]))
        (568002 'move' tmp[568000](426816 call isTrue call_tmp[664305]))
        (568007 'move' tmp[567992](568004 '_paramFoldLogical' tmp[567993] tmp[568000]))
      }
      {
        (568012 'move' tmp[567992](568009 '_paramFoldLogical' tmp[567993] 0))
      }
      unknown tmp[568032] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568034 'move' tmp[568032](426796 call isTrue tmp[567992]))
      (568039 'move' tmp[568019](568036 '_paramFoldLogical' tmp[568020] tmp[568032]))
    }
    unknown call_tmp[664310] "expr temp" "maybe param" "maybe type" "temp"
    (664313 'move' call_tmp[664310](140133 call _cond_test tmp[568019]))
    if call_tmp[664310]
    {
      unknown tmp[426770] "maybe param" "temp"
      (426781 'move' tmp[426770](139248 call == kind[139210] move[137993]))
      unknown call_tmp[664315] "expr temp" "maybe param" "maybe type" "temp"
      (664318 'move' call_tmp[664315](426783 call _cond_invalid tmp[426770]))
      if call_tmp[664315]
      {
        (426786 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[568046] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568047] "maybe param" "temp"
      unknown call_tmp[664320] "expr temp" "maybe param" "maybe type" "temp"
      (664323 'move' call_tmp[664320](426771 call isTrue tmp[426770]))
      (568052 'move' tmp[568047](568050 call _cond_test call_tmp[664320]))
      if tmp[568047]
      {
        (568057 'move' tmp[568046](568054 '_paramFoldLogical' tmp[568047] 1))
      }
      {
        unknown tmp[568059] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664325] "expr temp" "maybe param" "maybe type" "temp"
        (664328 'move' call_tmp[664325](139255 call == kind[139210] initCopy[137995]))
        (568061 'move' tmp[568059](426775 call isTrue call_tmp[664325]))
        (568066 'move' tmp[568046](568063 '_paramFoldLogical' tmp[568047] tmp[568059]))
      }
      unknown call_tmp[664330] "expr temp" "maybe param" "maybe type" "temp"
      (664333 'move' call_tmp[664330](139373 call _cond_test tmp[568046]))
      if call_tmp[664330]
      {
        unknown call_tmp[664337] "expr temp" "maybe param" "maybe type" "temp"
        (664340 'move' call_tmp[664337](139261 call eltType _mt[243] a[139199]))
        unknown call_tmp[664342] "expr temp" "maybe param" "maybe type" "temp"
        (664345 'move' call_tmp[664342](139265 call needsInitWorkaround call_tmp[664337]))
        unknown call_tmp[664347] "expr temp" "maybe param" "maybe type" "temp"
        (664350 'move' call_tmp[664347](139337 call _cond_test call_tmp[664342]))
        if call_tmp[664347]
        {
          unknown call_tmp[664354] "expr temp" "maybe param" "maybe type" "temp"
          (664357 'move' call_tmp[664354](415777 call _dom _mt[243] a[139199]))
          unknown call_tmp[664359] "maybe param" "maybe type" "temp"
          (664362 'move' call_tmp[664359](415773 call chpl__staticAutoLocalCheck a[139199] call_tmp[664354]))
          unknown chpl__staticAutoLocalCheckSym[415772] "dead at end of block" "param"
          (543188 'init var' chpl__staticAutoLocalCheckSym[415772] call_tmp[664359])
          (480740 'end of statement')
          if chpl__staticAutoLocalCheckSym[415772]
          {
            unknown call_tmp[664366] "expr temp" "maybe param" "maybe type" "temp"
            (664369 'move' call_tmp[664366](139268 call _dom _mt[243] a[139199]))
            Forall {
              induction variables:
                
                unknown ai[139302] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664366]
              shadow variables:
                b[139272] 'in' intent outer var b[139204]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[139281] "dead at end of block" "ref var"
                unknown call_tmp[664371] "expr temp" "maybe param" "maybe type" "temp"
                (664374 'move' call_tmp[664371](415783 'may be local access' a[139199] ai[139302] chpl__staticAutoLocalCheckSym[415772] 1))
                (543191 'move' aa[139281](543190 'addr of' call_tmp[664371]))
                (139284 'end of statement')
                unknown call_tmp[664378] "maybe param" "maybe type" "temp"
                (664381 'move' call_tmp[664378](139287 call eltType _mt[243] a[139199]))
                unknown copy[139291] "dead at end of block" "no auto destroy"
                (543193 'init var' copy[139291] b[139272] call_tmp[664378])
                (139294 'end of statement' ai[139302] b[139272])
                (139299 '=' aa[139281] copy[139291])
                (480743 'end of statement' aa[139281] copy[139291])
              }
            }
          }
          {
            unknown call_tmp[664385] "expr temp" "maybe param" "maybe type" "temp"
            (664388 'move' call_tmp[664385](415762 call _dom _mt[243] a[139199]))
            Forall {
              induction variables:
                
                unknown ai[415759] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664385]
              shadow variables:
                b[415766] 'in' intent outer var b[139204]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[415741] "dead at end of block" "ref var"
                unknown call_tmp[664390] "expr temp" "maybe param" "maybe type" "temp"
                (664393 'move' call_tmp[664390](415743 call a[139199] ai[415759]))
                (543196 'move' aa[415741](543195 'addr of' call_tmp[664390]))
                (415746 'end of statement')
                unknown call_tmp[664397] "maybe param" "maybe type" "temp"
                (664400 'move' call_tmp[664397](415750 call eltType _mt[243] a[139199]))
                unknown copy[415747] "dead at end of block" "no auto destroy"
                (543198 'init var' copy[415747] b[415766] call_tmp[664397])
                (415754 'end of statement' ai[415759] b[415766])
                (415755 '=' aa[415741] copy[415747])
                (480748 'end of statement' aa[415741] copy[415747])
              }
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139332] "index var" "insert auto destroy"
            iterated expressions:
              a[139199]
            shadow variables:
              b[139310] 'in' intent outer var b[139204]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown call_tmp[664404] "maybe param" "maybe type" "temp"
              (664407 'move' call_tmp[664404](139316 call eltType _mt[243] a[139199]))
              unknown copy[139320] "dead at end of block" "no auto destroy"
              (543200 'init var' copy[139320] b[139310] call_tmp[664404])
              (139323 'end of statement' b[139310])
              (139329 '=' aa[139332] copy[139320])
              (480752 'end of statement' aa[139332] copy[139320])
            }
          }
        }
      }
      {
        unknown call_tmp[664409] "expr temp" "maybe param" "maybe type" "temp"
        (664412 'move' call_tmp[664409](139347 call == kind[139210] assign[137997]))
        unknown call_tmp[664414] "expr temp" "maybe param" "maybe type" "temp"
        (664417 'move' call_tmp[664414](139369 call _cond_test call_tmp[664409]))
        if call_tmp[664414]
        {
          Forall {
            induction variables:
              
              unknown aa[139364] "index var" "insert auto destroy"
            iterated expressions:
              a[139199]
            shadow variables:
              b[139352] 'in' intent outer var b[139204]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139359 call = aa[139364] b[139352])
              (480755 'end of statement' aa[139364] b[139352])
            }
          }
        }
      }
    }
    {
      unknown call_tmp[664419] "expr temp" "maybe param" "maybe type" "temp"
      (664422 'move' call_tmp[664419](139383 call chpl__serializeAssignment a[139199] b[139204]))
      unknown call_tmp[664424] "expr temp" "maybe param" "maybe type" "temp"
      (664427 'move' call_tmp[664424](140129 call _cond_test call_tmp[664419]))
      if call_tmp[664424]
      {
        unknown call_tmp[664429] "expr temp" "maybe param" "maybe type" "temp"
        (664432 'move' call_tmp[664429](139389 call == kind[139210] move[137993]))
        unknown call_tmp[664434] "expr temp" "maybe param" "maybe type" "temp"
        (664437 'move' call_tmp[664434](139870 call _cond_test call_tmp[664429]))
        if call_tmp[664434]
        {
          unknown call_tmp[664441] "expr temp" "maybe param" "maybe type" "temp"
          (664444 'move' call_tmp[664441](139393 call eltType _mt[243] a[139199]))
          unknown call_tmp[664446] "expr temp" "maybe param" "maybe type" "temp"
          (664449 'move' call_tmp[664446](139397 call needsInitWorkaround call_tmp[664441]))
          unknown call_tmp[664451] "expr temp" "maybe param" "maybe type" "temp"
          (664454 'move' call_tmp[664451](139591 call _cond_test call_tmp[664446]))
          if call_tmp[664451]
          {
            {
              unknown _indexOfInterest[139453] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139454] "expr temp" "temp"
              unknown call_tmp[664458] "expr temp" "maybe param" "maybe type" "temp"
              (664461 'move' call_tmp[664458](139463 call _dom _mt[243] a[139199]))
              unknown call_tmp[664463] "expr temp" "maybe param" "maybe type" "temp"
              (664466 'move' call_tmp[664463](139466 call _getIterator call_tmp[664458]))
              unknown call_tmp[664468] "expr temp" "maybe param" "maybe type" "temp"
              (664471 'move' call_tmp[664468](139470 call _getIterator b[139204]))
              (139472 'move' _iterator[139454](139409 call _build_tuple call_tmp[664463] call_tmp[664468]))
              Defer
              {
                {
                  (139502 call _freeIterator _iterator[139454])
                }
              }
              { scopeless type
                (139477 'move' _indexOfInterest[139453](139474 call iteratorIndex _iterator[139454]))
              }
              ForLoop[139455]
              {
                (139482 call _check_tuple_var_decl _indexOfInterest[139453] 2)
                (480759 'end of statement')
                unknown ai[139488] "index var" "insert auto destroy"
                (480760 'end of statement')
                (139490 'move' ai[139488](139486 call _indexOfInterest[139453] 0))
                (480761 'end of statement' ai[139488])
                unknown bb[139495] "index var" "insert auto destroy"
                (480763 'end of statement')
                (139497 'move' bb[139495](139493 call _indexOfInterest[139453] 1))
                (480764 'end of statement' bb[139495])
                {
                  unknown aa[139414] "dead at end of block" "ref var"
                  unknown call_tmp[664473] "expr temp" "maybe param" "maybe type" "temp"
                  (664476 'move' call_tmp[664473](139413 call a[139199] ai[139488]))
                  (543203 'move' aa[139414](543202 'addr of' call_tmp[664473]))
                  (139417 'end of statement' ai[139488])
                  unknown call_tmp[664478] "expr temp" "maybe param" "maybe type" "temp"
                  (664481 'move' call_tmp[664478](139441 'steal' bb[139495]))
                  (139442 '=' aa[139414] call_tmp[664478])
                  (480767 'end of statement' aa[139414] bb[139495])
                  unknown call_tmp[664485] "expr temp" "maybe param" "maybe type" "temp"
                  (664488 'move' call_tmp[664485](139446 call eltType _mt[243] a[139199]))
                  (139451 call fixRuntimeType call_tmp[664485] aa[139414])
                  (480770 'end of statement' aa[139414])
                }
                label _continueLabel[139458]
                _indexOfInterest[139453]
                _iterator[139454]
              }
              label _breakLabel[139459]
            }
          }
          {
            {
              unknown _indexOfInterest[139538] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139539] "expr temp" "temp"
              unknown call_tmp[664490] "expr temp" "maybe param" "maybe type" "temp"
              (664493 'move' call_tmp[664490](139548 call _getIterator a[139199]))
              unknown call_tmp[664495] "expr temp" "maybe param" "maybe type" "temp"
              (664498 'move' call_tmp[664495](139551 call _getIterator b[139204]))
              (139553 'move' _iterator[139539](139518 call _build_tuple call_tmp[664490] call_tmp[664495]))
              Defer
              {
                {
                  (139583 call _freeIterator _iterator[139539])
                }
              }
              { scopeless type
                (139558 'move' _indexOfInterest[139538](139555 call iteratorIndex _iterator[139539]))
              }
              ForLoop[139540]
              {
                (139563 call _check_tuple_var_decl _indexOfInterest[139538] 2)
                (480773 'end of statement')
                unknown aa[139569] "index var" "insert auto destroy"
                (480774 'end of statement')
                (139571 'move' aa[139569](139567 call _indexOfInterest[139538] 0))
                (480775 'end of statement' aa[139569])
                unknown bb[139576] "index var" "insert auto destroy"
                (480777 'end of statement')
                (139578 'move' bb[139576](139574 call _indexOfInterest[139538] 1))
                (480778 'end of statement' bb[139576])
                {
                  unknown call_tmp[664500] "expr temp" "maybe param" "maybe type" "temp"
                  (664503 'move' call_tmp[664500](139525 'steal' bb[139576]))
                  (139526 '=' aa[139569] call_tmp[664500])
                  (480780 'end of statement' aa[139569] bb[139576])
                  unknown call_tmp[664507] "expr temp" "maybe param" "maybe type" "temp"
                  (664510 'move' call_tmp[664507](139531 call eltType _mt[243] a[139199]))
                  (139536 call fixRuntimeType call_tmp[664507] aa[139569])
                  (480783 'end of statement' aa[139569])
                }
                label _continueLabel[139543]
                _indexOfInterest[139538]
                _iterator[139539]
              }
              label _breakLabel[139544]
            }
          }
        }
        {
          unknown call_tmp[664512] "expr temp" "maybe param" "maybe type" "temp"
          (664515 'move' call_tmp[664512](139601 call == kind[139210] initCopy[137995]))
          unknown call_tmp[664517] "expr temp" "maybe param" "maybe type" "temp"
          (664520 'move' call_tmp[664517](139865 call _cond_test call_tmp[664512]))
          if call_tmp[664517]
          {
            unknown call_tmp[664524] "expr temp" "maybe param" "maybe type" "temp"
            (664527 'move' call_tmp[664524](139605 call eltType _mt[243] a[139199]))
            unknown call_tmp[664529] "expr temp" "maybe param" "maybe type" "temp"
            (664532 'move' call_tmp[664529](139609 call needsInitWorkaround call_tmp[664524]))
            unknown call_tmp[664534] "expr temp" "maybe param" "maybe type" "temp"
            (664537 'move' call_tmp[664534](139781 call _cond_test call_tmp[664529]))
            if call_tmp[664534]
            {
              {
                unknown _indexOfInterest[139646] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139647] "expr temp" "temp"
                unknown call_tmp[664541] "expr temp" "maybe param" "maybe type" "temp"
                (664544 'move' call_tmp[664541](139656 call _dom _mt[243] a[139199]))
                unknown call_tmp[664546] "expr temp" "maybe param" "maybe type" "temp"
                (664549 'move' call_tmp[664546](139659 call _getIterator call_tmp[664541]))
                unknown call_tmp[664551] "expr temp" "maybe param" "maybe type" "temp"
                (664554 'move' call_tmp[664551](139663 call _getIterator b[139204]))
                (139665 'move' _iterator[139647](139621 call _build_tuple call_tmp[664546] call_tmp[664551]))
                Defer
                {
                  {
                    (139695 call _freeIterator _iterator[139647])
                  }
                }
                { scopeless type
                  (139670 'move' _indexOfInterest[139646](139667 call iteratorIndex _iterator[139647]))
                }
                ForLoop[139648]
                {
                  (139675 call _check_tuple_var_decl _indexOfInterest[139646] 2)
                  (480786 'end of statement')
                  unknown ai[139681] "index var" "insert auto destroy"
                  (480787 'end of statement')
                  (139683 'move' ai[139681](139679 call _indexOfInterest[139646] 0))
                  (480788 'end of statement' ai[139681])
                  unknown bb[139688] "index var" "insert auto destroy"
                  (480790 'end of statement')
                  (139690 'move' bb[139688](139686 call _indexOfInterest[139646] 1))
                  (480791 'end of statement' bb[139688])
                  {
                    unknown aa[139626] "dead at end of block" "ref var"
                    unknown call_tmp[664556] "expr temp" "maybe param" "maybe type" "temp"
                    (664559 'move' call_tmp[664556](139625 call a[139199] ai[139681]))
                    (543206 'move' aa[139626](543205 'addr of' call_tmp[664556]))
                    (139629 'end of statement')
                    unknown call_tmp[664563] "maybe param" "maybe type" "temp"
                    (664566 'move' call_tmp[664563](139632 call eltType _mt[243] a[139199]))
                    unknown copy[139636] "dead at end of block" "no auto destroy"
                    (543208 'init var' copy[139636] b[139204] call_tmp[664563])
                    (139639 'end of statement' ai[139681])
                    (139644 '=' aa[139626] copy[139636])
                    (480794 'end of statement' aa[139626] copy[139636])
                  }
                  label _continueLabel[139651]
                  _indexOfInterest[139646]
                  _iterator[139647]
                }
                label _breakLabel[139652]
              }
            }
            {
              {
                unknown _indexOfInterest[139728] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139729] "expr temp" "temp"
                unknown call_tmp[664568] "expr temp" "maybe param" "maybe type" "temp"
                (664571 'move' call_tmp[664568](139738 call _getIterator a[139199]))
                unknown call_tmp[664573] "expr temp" "maybe param" "maybe type" "temp"
                (664576 'move' call_tmp[664573](139741 call _getIterator b[139204]))
                (139743 'move' _iterator[139729](139711 call _build_tuple call_tmp[664568] call_tmp[664573]))
                Defer
                {
                  {
                    (139773 call _freeIterator _iterator[139729])
                  }
                }
                { scopeless type
                  (139748 'move' _indexOfInterest[139728](139745 call iteratorIndex _iterator[139729]))
                }
                ForLoop[139730]
                {
                  (139753 call _check_tuple_var_decl _indexOfInterest[139728] 2)
                  (480798 'end of statement')
                  unknown aa[139759] "index var" "insert auto destroy"
                  (480799 'end of statement')
                  (139761 'move' aa[139759](139757 call _indexOfInterest[139728] 0))
                  (480800 'end of statement' aa[139759])
                  unknown bb[139766] "index var" "insert auto destroy"
                  (480802 'end of statement')
                  (139768 'move' bb[139766](139764 call _indexOfInterest[139728] 1))
                  (480803 'end of statement' bb[139766])
                  {
                    unknown call_tmp[664580] "maybe param" "maybe type" "temp"
                    (664583 'move' call_tmp[664580](139713 call eltType _mt[243] a[139199]))
                    unknown copy[139717] "dead at end of block" "no auto destroy"
                    (543210 'init var' copy[139717] b[139204] call_tmp[664580])
                    (139720 'end of statement')
                    (139726 '=' aa[139759] copy[139717])
                    (480805 'end of statement' aa[139759] copy[139717])
                  }
                  label _continueLabel[139733]
                  _indexOfInterest[139728]
                  _iterator[139729]
                }
                label _breakLabel[139734]
              }
            }
          }
          {
            unknown call_tmp[664585] "expr temp" "maybe param" "maybe type" "temp"
            (664588 'move' call_tmp[664585](139791 call == kind[139210] assign[137997]))
            unknown call_tmp[664590] "expr temp" "maybe param" "maybe type" "temp"
            (664593 'move' call_tmp[664590](139861 call _cond_test call_tmp[664585]))
            if call_tmp[664590]
            {
              {
                unknown _indexOfInterest[139808] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139809] "expr temp" "temp"
                unknown call_tmp[664595] "expr temp" "maybe param" "maybe type" "temp"
                (664598 'move' call_tmp[664595](139818 call _getIterator a[139199]))
                unknown call_tmp[664600] "expr temp" "maybe param" "maybe type" "temp"
                (664603 'move' call_tmp[664600](139821 call _getIterator b[139204]))
                (139823 'move' _iterator[139809](139801 call _build_tuple call_tmp[664595] call_tmp[664600]))
                Defer
                {
                  {
                    (139853 call _freeIterator _iterator[139809])
                  }
                }
                { scopeless type
                  (139828 'move' _indexOfInterest[139808](139825 call iteratorIndex _iterator[139809]))
                }
                ForLoop[139810]
                {
                  (139833 call _check_tuple_var_decl _indexOfInterest[139808] 2)
                  (480809 'end of statement')
                  unknown aa[139839] "index var" "insert auto destroy"
                  (480810 'end of statement')
                  (139841 'move' aa[139839](139837 call _indexOfInterest[139808] 0))
                  (480811 'end of statement' aa[139839])
                  unknown bb[139846] "index var" "insert auto destroy"
                  (480813 'end of statement')
                  (139848 'move' bb[139846](139844 call _indexOfInterest[139808] 1))
                  (480814 'end of statement' bb[139846])
                  {
                    (139804 call = aa[139839] bb[139846])
                    (480816 'end of statement' aa[139839] bb[139846])
                  }
                  label _continueLabel[139813]
                  _indexOfInterest[139808]
                  _iterator[139809]
                }
                label _breakLabel[139814]
              }
            }
          }
        }
      }
      {
        unknown call_tmp[664605] "expr temp" "maybe param" "maybe type" "temp"
        (664608 'move' call_tmp[664605](139881 call == kind[139210] move[137993]))
        unknown call_tmp[664610] "expr temp" "maybe param" "maybe type" "temp"
        (664613 'move' call_tmp[664610](140123 call _cond_test call_tmp[664605]))
        if call_tmp[664610]
        {
          unknown call_tmp[664617] "expr temp" "maybe param" "maybe type" "temp"
          (664620 'move' call_tmp[664617](139885 call eltType _mt[243] a[139199]))
          unknown call_tmp[664622] "expr temp" "maybe param" "maybe type" "temp"
          (664625 'move' call_tmp[664622](139889 call needsInitWorkaround call_tmp[664617]))
          unknown call_tmp[664627] "expr temp" "maybe param" "maybe type" "temp"
          (664630 'move' call_tmp[664627](139977 call _cond_test call_tmp[664622]))
          if call_tmp[664627]
          {
            unknown call_tmp[664634] "expr temp" "maybe param" "maybe type" "temp"
            (664637 'move' call_tmp[664634](415824 call _dom _mt[243] a[139199]))
            unknown call_tmp[664639] "maybe param" "maybe type" "temp"
            (664642 'move' call_tmp[664639](415820 call chpl__staticAutoLocalCheck a[139199] call_tmp[664634]))
            unknown chpl__staticAutoLocalCheckSym[415819] "dead at end of block" "param"
            (543212 'init var' chpl__staticAutoLocalCheckSym[415819] call_tmp[664639])
            (480819 'end of statement')
            if chpl__staticAutoLocalCheckSym[415819]
            {
              unknown call_tmp[664646] "expr temp" "maybe param" "maybe type" "temp"
              (664649 'move' call_tmp[664646](139897 call _dom _mt[243] a[139199]))
              Forall {
                induction variables:
                  
                  unknown ai[139932] "index var" "insert auto destroy"
                  
                  unknown bb[139934] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664646]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[139907] "dead at end of block" "ref var"
                    unknown call_tmp[664651] "expr temp" "maybe param" "maybe type" "temp"
                    (664654 'move' call_tmp[664651](415830 'may be local access' a[139199] ai[139932] chpl__staticAutoLocalCheckSym[415819] 1))
                    (543215 'move' aa[139907](543214 'addr of' call_tmp[664651]))
                    (139910 'end of statement' ai[139932])
                    unknown call_tmp[664656] "expr temp" "maybe param" "maybe type" "temp"
                    (664659 'move' call_tmp[664656](139918 'steal' bb[139934]))
                    (139919 '=' aa[139907] call_tmp[664656])
                    (480821 'end of statement' aa[139907] bb[139934])
                    unknown call_tmp[664663] "expr temp" "maybe param" "maybe type" "temp"
                    (664666 'move' call_tmp[664663](139923 call eltType _mt[243] a[139199]))
                    (139928 call fixRuntimeType call_tmp[664663] aa[139907])
                    (480824 'end of statement' aa[139907])
                  }
                }
              }
            }
            {
              unknown call_tmp[664670] "expr temp" "maybe param" "maybe type" "temp"
              (664673 'move' call_tmp[664670](415815 call _dom _mt[243] a[139199]))
              Forall {
                induction variables:
                  
                  unknown ai[415810] "index var" "insert auto destroy"
                  
                  unknown bb[415812] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664670]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[415792] "dead at end of block" "ref var"
                    unknown call_tmp[664675] "expr temp" "maybe param" "maybe type" "temp"
                    (664678 'move' call_tmp[664675](415794 call a[139199] ai[415810]))
                    (543218 'move' aa[415792](543217 'addr of' call_tmp[664675]))
                    (415797 'end of statement' ai[415810])
                    unknown call_tmp[664680] "expr temp" "maybe param" "maybe type" "temp"
                    (664683 'move' call_tmp[664680](415800 'steal' bb[415812]))
                    (415798 '=' aa[415792] call_tmp[664680])
                    (480827 'end of statement' aa[415792] bb[415812])
                    unknown call_tmp[664687] "expr temp" "maybe param" "maybe type" "temp"
                    (664690 'move' call_tmp[664687](415805 call eltType _mt[243] a[139199]))
                    (415803 call fixRuntimeType call_tmp[664687] aa[415792])
                    (480830 'end of statement' aa[415792])
                  }
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139970] "index var" "insert auto destroy"
                
                unknown bb[139972] "index var" "insert auto destroy"
              iterated expressions:
                a[139199]
                b[139204]
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown call_tmp[664692] "expr temp" "maybe param" "maybe type" "temp"
                  (664695 'move' call_tmp[664692](139955 'steal' bb[139972]))
                  (139956 '=' aa[139970] call_tmp[664692])
                  (480832 'end of statement' aa[139970] bb[139972])
                  unknown call_tmp[664699] "expr temp" "maybe param" "maybe type" "temp"
                  (664702 'move' call_tmp[664699](139961 call eltType _mt[243] a[139199]))
                  (139966 call fixRuntimeType call_tmp[664699] aa[139970])
                  (480835 'end of statement' aa[139970])
                }
              }
            }
          }
        }
        {
          unknown call_tmp[664704] "expr temp" "maybe param" "maybe type" "temp"
          (664707 'move' call_tmp[664704](139987 call == kind[139210] initCopy[137995]))
          unknown call_tmp[664709] "expr temp" "maybe param" "maybe type" "temp"
          (664712 'move' call_tmp[664709](140118 call _cond_test call_tmp[664704]))
          if call_tmp[664709]
          {
            unknown call_tmp[664716] "expr temp" "maybe param" "maybe type" "temp"
            (664719 'move' call_tmp[664716](139991 call eltType _mt[243] a[139199]))
            unknown call_tmp[664721] "expr temp" "maybe param" "maybe type" "temp"
            (664724 'move' call_tmp[664721](139995 call needsInitWorkaround call_tmp[664716]))
            unknown call_tmp[664726] "expr temp" "maybe param" "maybe type" "temp"
            (664729 'move' call_tmp[664726](140077 call _cond_test call_tmp[664721]))
            if call_tmp[664726]
            {
              unknown call_tmp[664733] "expr temp" "maybe param" "maybe type" "temp"
              (664736 'move' call_tmp[664733](415871 call _dom _mt[243] a[139199]))
              unknown call_tmp[664738] "maybe param" "maybe type" "temp"
              (664741 'move' call_tmp[664738](415867 call chpl__staticAutoLocalCheck a[139199] call_tmp[664733]))
              unknown chpl__staticAutoLocalCheckSym[415866] "dead at end of block" "param"
              (543220 'init var' chpl__staticAutoLocalCheckSym[415866] call_tmp[664738])
              (480837 'end of statement')
              if chpl__staticAutoLocalCheckSym[415866]
              {
                unknown call_tmp[664745] "expr temp" "maybe param" "maybe type" "temp"
                (664748 'move' call_tmp[664745](140003 call _dom _mt[243] a[139199]))
                Forall {
                  induction variables:
                    
                    unknown ai[140035] "index var" "insert auto destroy"
                    
                    unknown bb[140037] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664745]
                    b[139204]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[140013] "dead at end of block" "ref var"
                      unknown call_tmp[664750] "expr temp" "maybe param" "maybe type" "temp"
                      (664753 'move' call_tmp[664750](415877 'may be local access' a[139199] ai[140035] chpl__staticAutoLocalCheckSym[415866] 1))
                      (543223 'move' aa[140013](543222 'addr of' call_tmp[664750]))
                      (140016 'end of statement')
                      unknown call_tmp[664757] "maybe param" "maybe type" "temp"
                      (664760 'move' call_tmp[664757](140019 call eltType _mt[243] a[139199]))
                      unknown copy[140023] "dead at end of block" "no auto destroy"
                      (543225 'init var' copy[140023] bb[140037] call_tmp[664757])
                      (140026 'end of statement' ai[140035] bb[140037])
                      (140031 '=' aa[140013] copy[140023])
                      (480840 'end of statement' aa[140013] copy[140023])
                    }
                  }
                }
              }
              {
                unknown call_tmp[664764] "expr temp" "maybe param" "maybe type" "temp"
                (664767 'move' call_tmp[664764](415862 call _dom _mt[243] a[139199]))
                Forall {
                  induction variables:
                    
                    unknown ai[415857] "index var" "insert auto destroy"
                    
                    unknown bb[415859] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664764]
                    b[139204]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[415839] "dead at end of block" "ref var"
                      unknown call_tmp[664769] "expr temp" "maybe param" "maybe type" "temp"
                      (664772 'move' call_tmp[664769](415841 call a[139199] ai[415857]))
                      (543228 'move' aa[415839](543227 'addr of' call_tmp[664769]))
                      (415844 'end of statement')
                      unknown call_tmp[664776] "maybe param" "maybe type" "temp"
                      (664779 'move' call_tmp[664776](415848 call eltType _mt[243] a[139199]))
                      unknown copy[415845] "dead at end of block" "no auto destroy"
                      (543230 'init var' copy[415845] bb[415859] call_tmp[664776])
                      (415852 'end of statement' ai[415857] bb[415859])
                      (415853 '=' aa[415839] copy[415845])
                      (480845 'end of statement' aa[415839] copy[415845])
                    }
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140070] "index var" "insert auto destroy"
                  
                  unknown bb[140072] "index var" "insert auto destroy"
                iterated expressions:
                  a[139199]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown call_tmp[664783] "maybe param" "maybe type" "temp"
                    (664786 'move' call_tmp[664783](140053 call eltType _mt[243] a[139199]))
                    unknown copy[140057] "dead at end of block" "no auto destroy"
                    (543232 'init var' copy[140057] bb[140072] call_tmp[664783])
                    (140060 'end of statement' bb[140072])
                    (140066 '=' aa[140070] copy[140057])
                    (480849 'end of statement' aa[140070] copy[140057])
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[664788] "expr temp" "maybe param" "maybe type" "temp"
            (664791 'move' call_tmp[664788](140087 call == kind[139210] assign[137997]))
            unknown call_tmp[664793] "expr temp" "maybe param" "maybe type" "temp"
            (664796 'move' call_tmp[664793](140114 call _cond_test call_tmp[664788]))
            if call_tmp[664793]
            {
              Forall {
                induction variables:
                  
                  unknown aa[140107] "index var" "insert auto destroy"
                  
                  unknown bb[140109] "index var" "insert auto destroy"
                iterated expressions:
                  a[139199]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140101 call = aa[140107] bb[140109])
                    (480852 'end of statement' aa[140107] bb[140109])
                  }
                }
              }
            }
          }
        }
      }
    }
    (519166 return _void[55])
  }
  {
    (139217 call <=(139214 'lifetime_of' a[139199])(139216 'lifetime_of' b[139204]))
  }
  function chpl__transferArray[140150](ref arg a[140147]:_array[133594](?), param arg b[140152]:_any[178](?), param arg kind[140158] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140169] "index var" "insert auto destroy"
      iterated expressions:
        a[140147]
      shadow variables:
      other variables
        forall body
      {
        (140165 call = aa[140169] b[140152])
        (480855 'end of statement' aa[140169])
      }
    }
    (519168 return _void[55])
  }
  function =[140184](ref arg a[140181]:_array[133594](?), arg b[140187]:_domain[125908](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664800] "expr temp" "maybe param" "maybe type" "temp"
    (664803 'move' call_tmp[664800](140191 call rank _mt[243] a[140181]))
    unknown call_tmp[664807] "expr temp" "maybe param" "maybe type" "temp"
    (664810 'move' call_tmp[664807](140195 call rank _mt[243] b[140187]))
    unknown call_tmp[664812] "expr temp" "maybe param" "maybe type" "temp"
    (664815 'move' call_tmp[664812](140198 call != call_tmp[664800] call_tmp[664807]))
    unknown call_tmp[664817] "expr temp" "maybe param" "maybe type" "temp"
    (664820 'move' call_tmp[664817](140205 call _cond_test call_tmp[664812]))
    if call_tmp[664817]
    {
      (140203 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426833] "maybe param" "temp"
    (426844 'move' tmp[426833](140214 call isAssociativeDom b[140187]))
    unknown call_tmp[664822] "expr temp" "maybe param" "maybe type" "temp"
    (664825 'move' call_tmp[664822](426846 call _cond_invalid tmp[426833]))
    if call_tmp[664822]
    {
      (426849 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568073] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568074] "maybe param" "temp"
    unknown call_tmp[664827] "expr temp" "maybe param" "maybe type" "temp"
    (664830 'move' call_tmp[664827](426834 call isTrue tmp[426833]))
    (568079 'move' tmp[568074](568077 call _cond_test call_tmp[664827]))
    if tmp[568074]
    {
      unknown tmp[568081] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664832] "expr temp" "maybe param" "maybe type" "temp"
      (664835 'move' call_tmp[664832](140218 call isRectangularArr a[140181]))
      (568083 'move' tmp[568081](426837 call isTrue call_tmp[664832]))
      (568088 'move' tmp[568073](568085 '_paramFoldLogical' tmp[568074] tmp[568081]))
    }
    {
      (568093 'move' tmp[568073](568090 '_paramFoldLogical' tmp[568074] 0))
    }
    unknown call_tmp[664837] "expr temp" "maybe param" "maybe type" "temp"
    (664840 'move' call_tmp[664837](140242 call _cond_test tmp[568073]))
    if call_tmp[664837]
    {
      (140240 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140251 call chpl__transferArray a[140181] b[140187])
    (519170 return _void[55])
  }
  function =[140263](arg a[140260]:_array[133594](?), arg b[140269]:range[64319](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664844] "expr temp" "maybe param" "maybe type" "temp"
    (664847 'move' call_tmp[664844](140273 call rank _mt[243] a[140260]))
    unknown call_tmp[664849] "expr temp" "maybe param" "maybe type" "temp"
    (664852 'move' call_tmp[664849](140277 call == call_tmp[664844] 1))
    unknown call_tmp[664854] "expr temp" "maybe param" "maybe type" "temp"
    (664857 'move' call_tmp[664854](140306 call _cond_test call_tmp[664849]))
    if call_tmp[664854]
    {
      (140283 call chpl__transferArray a[140260] b[140269])
    }
    {
      (140304 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (519172 return _void[55])
  }
  function =[140323](ref arg a[140320]:_array[133594](?), arg b[140325]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140331 call chpl__transferArray a[140320] b[140325])
    (519174 return _void[55])
  }
  function helpInitArrFromTuple[140340](ref arg j[140338]:_any[178](?), param arg rank[140343]:int(64)[13], ref arg a[140349]:_array[133594](?), arg b[140353]:_tuple[56202](?), param arg kind[140357]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[664861] "expr temp" "maybe param" "maybe type" "temp"
    (664864 'move' call_tmp[664861](140367 call _dom _mt[243] a[140349]))
    unknown idxType[140386] "dead at end of block" "insert auto destroy" "type variable"(140370 call idxType _mt[243] call_tmp[664861])
    unknown call_tmp[664870] "expr temp" "maybe param" "maybe type" "temp"
    (664873 'move' call_tmp[664870](543237 call _dom _mt[243] a[140349]))
    (543241 'move' idxType[140386](543235 call idxType _mt[243] call_tmp[664870]))
    unknown call_tmp[664879] "expr temp" "maybe param" "maybe type" "temp"
    (664882 'move' call_tmp[664879](140375 call _dom _mt[243] a[140349]))
    unknown call_tmp[664886] "expr temp" "maybe param" "maybe type" "temp"
    (664889 'move' call_tmp[664886](140378 call intIdxType _mt[243] call_tmp[664879]))
    unknown strType[140383] "dead at end of block" "insert auto destroy" "type variable"(140382 call chpl__signedType call_tmp[664886])
    unknown call_tmp[664893] "expr temp" "maybe param" "maybe type" "temp"
    (664896 'move' call_tmp[664893](543248 call _dom _mt[243] a[140349]))
    unknown call_tmp[664900] "expr temp" "maybe param" "maybe type" "temp"
    (664903 'move' call_tmp[664900](543246 call intIdxType _mt[243] call_tmp[664893]))
    (543252 'move' strType[140383](543244 call chpl__signedType call_tmp[664900]))
    unknown call_tmp[664907] "expr temp" "maybe param" "maybe type" "temp"
    (664910 'move' call_tmp[664907](140391 call _dom _mt[243] a[140349]))
    unknown call_tmp[664916] "expr temp" "maybe param" "maybe type" "temp"
    (664919 'move' call_tmp[664916](140398 call rank _mt[243] a[140349]))
    unknown call_tmp[664921] "expr temp" "maybe param" "maybe type" "temp"
    (664924 'move' call_tmp[664921](140402 call - call_tmp[664916] rank[140343]))
    unknown call_tmp[664926] "expr temp" "maybe param" "maybe type" "temp"
    (664929 'move' call_tmp[664926](140405 call(140394 call (partial) dim _mt[243] call_tmp[664907]) call_tmp[664921]))
    unknown call_tmp[664933] "maybe param" "maybe type" "temp"
    (664936 'move' call_tmp[664933](140406 call stride _mt[243] call_tmp[664926]))
    const stride[140409] "dead at end of block" "const" "insert auto destroy"
    (543254 'init var' stride[140409] call_tmp[664933])
    unknown call_tmp[664940] "expr temp" "maybe param" "maybe type" "temp"
    (664943 'move' call_tmp[664940](140413 call _dom _mt[243] a[140349]))
    unknown call_tmp[664949] "expr temp" "maybe param" "maybe type" "temp"
    (664952 'move' call_tmp[664949](140420 call rank _mt[243] a[140349]))
    unknown call_tmp[664954] "expr temp" "maybe param" "maybe type" "temp"
    (664957 'move' call_tmp[664954](140424 call - call_tmp[664949] rank[140343]))
    unknown call_tmp[664959] "expr temp" "maybe param" "maybe type" "temp"
    (664962 'move' call_tmp[664959](140427 call(140416 call (partial) dim _mt[243] call_tmp[664940]) call_tmp[664954]))
    unknown call_tmp[664966] "maybe param" "maybe type" "temp"
    (664969 'move' call_tmp[664966](140428 call firstAsInt _mt[243] call_tmp[664959]))
    const start[140431] "dead at end of block" "const" "insert auto destroy"
    (543256 'init var' start[140431] call_tmp[664966])
    (140434 'end of statement')
    unknown call_tmp[664971] "expr temp" "maybe param" "maybe type" "temp"
    (664974 'move' call_tmp[664971](140437 call == rank[140343] 1))
    unknown call_tmp[664976] "expr temp" "maybe param" "maybe type" "temp"
    (664979 'move' call_tmp[664976](140729 call _cond_test call_tmp[664971]))
    if call_tmp[664976]
    {
      {
        unknown i[140594] "dead at end of block" "insert auto destroy"
        (543258 'init var' i[140594] 0)
        (480864 'end of statement')
        unknown tmp[140595] "maybe param" "temp"
        unknown call_tmp[664983] "expr temp" "maybe param" "maybe type" "temp"
        (664986 'move' call_tmp[664983](140441 call size _mt[243] b[140353]))
        unknown call_tmp[664988] "expr temp" "maybe param" "maybe type" "temp"
        (664991 'move' call_tmp[664988](140445 call - call_tmp[664983] 1))
        (140607 'move' tmp[140595](140605 call chpl_compute_low_param_loop_bound 0 call_tmp[664988]))
        unknown tmp[140596] "maybe param" "temp"
        unknown call_tmp[664995] "expr temp" "maybe param" "maybe type" "temp"
        (664998 'move' call_tmp[664995](140614 call size _mt[243] b[140353]))
        unknown call_tmp[665000] "expr temp" "maybe param" "maybe type" "temp"
        (665003 'move' call_tmp[665000](140612 call - call_tmp[664995] 1))
        (140620 'move' tmp[140596](140618 call chpl_compute_high_param_loop_bound 0 call_tmp[665000]))
        unknown tmp[140597] "maybe param" "temp"
        (140623 'move' tmp[140597] 1)
        ParamForLoop[140625]
        { i[140594] tmp[140595] tmp[140596] tmp[140597]
          {
            unknown call_tmp[665007] "expr temp" "maybe param" "maybe type" "temp"
            (665010 'move' call_tmp[665007](140451 call rank _mt[243] a[140349]))
            unknown call_tmp[665012] "expr temp" "maybe param" "maybe type" "temp"
            (665015 'move' call_tmp[665012](140455 call - call_tmp[665007] rank[140343]))
            unknown call_tmp[665017] "expr temp" "maybe param" "maybe type" "temp"
            (665020 'move' call_tmp[665017](140458 call j[140338] call_tmp[665012]))
            unknown call_tmp[665022] "expr temp" "maybe param" "maybe type" "temp"
            (665025 'move' call_tmp[665022](140464 call _cast strType[140383] start[140431]))
            unknown call_tmp[665027] "expr temp" "maybe param" "maybe type" "temp"
            (665030 'move' call_tmp[665027](140468 call * i[140594] stride[140409]))
            unknown call_tmp[665032] "expr temp" "maybe param" "maybe type" "temp"
            (665035 'move' call_tmp[665032](140470 call + call_tmp[665022] call_tmp[665027]))
            unknown call_tmp[665037] "expr temp" "maybe param" "maybe type" "temp"
            (665040 'move' call_tmp[665037](140472 call chpl__intToIdx idxType[140386] call_tmp[665032]))
            (140473 call = call_tmp[665017] call_tmp[665037])
            (480865 'end of statement' idxType[140386] strType[140383] start[140431] i[140594] stride[140409])
            unknown dst[140481] "dead at end of block" "ref var"
            unknown call_tmp[665042] "expr temp" "maybe param" "maybe type" "temp"
            (665045 'move' call_tmp[665042](140480 call a[140349] j[140338]))
            (543261 'move' dst[140481](543260 'addr of' call_tmp[665042]))
            (140484 'end of statement')
            const src[140489] "dead at end of block" "const" "ref var"
            unknown call_tmp[665047] "expr temp" "maybe param" "maybe type" "temp"
            (665050 'move' call_tmp[665047](140488 call b[140353] i[140594]))
            (543264 'move' src[140489](543263 'addr of' call_tmp[665047]))
            (140492 'end of statement' i[140594])
            unknown call_tmp[665052] "expr temp" "maybe param" "maybe type" "temp"
            (665055 'move' call_tmp[665052](140498 call == kind[140357] move[137993]))
            unknown call_tmp[665057] "expr temp" "maybe param" "maybe type" "temp"
            (665060 'move' call_tmp[665057](140589 call _cond_test call_tmp[665052]))
            if call_tmp[665057]
            {
              unknown call_tmp[665062] "expr temp" "maybe param" "maybe type" "temp"
              (665065 'move' call_tmp[665062](140503 call isArray dst[140481]))
              unknown call_tmp[665067] "expr temp" "maybe param" "maybe type" "temp"
              (665070 'move' call_tmp[665067](140539 call _cond_test call_tmp[665062]))
              if call_tmp[665067]
              {
                unknown call_tmp[665074] "expr temp" "maybe param" "maybe type" "temp"
                (665077 'move' call_tmp[665074](140506 call eltType _mt[243] a[140349]))
                unknown call_tmp[665079] "maybe param" "maybe type" "temp"
                (665082 'move' call_tmp[665079](140511 call chpl__coerceMove call_tmp[665074] src[140489]))
                unknown newArr[140512] "dead at end of block" "no auto destroy" "no copy"
                (543266 'init var' newArr[140512] call_tmp[665079])
                (140515 'end of statement' src[140489])
                (140521 '=' dst[140481] newArr[140512])
                (480873 'end of statement' dst[140481] newArr[140512])
              }
              {
                (140527 '=' dst[140481] src[140489])
                (480876 'end of statement' dst[140481] src[140489])
                unknown call_tmp[665086] "expr temp" "maybe param" "maybe type" "temp"
                (665089 'move' call_tmp[665086](140532 call eltType _mt[243] a[140349]))
                (140537 call fixRuntimeType call_tmp[665086] dst[140481])
                (480879 'end of statement' dst[140481])
              }
            }
            {
              unknown call_tmp[665091] "expr temp" "maybe param" "maybe type" "temp"
              (665094 'move' call_tmp[665091](140549 call == kind[140357] initCopy[137995]))
              unknown call_tmp[665096] "expr temp" "maybe param" "maybe type" "temp"
              (665099 'move' call_tmp[665096](140584 call _cond_test call_tmp[665091]))
              if call_tmp[665096]
              {
                unknown call_tmp[665103] "maybe param" "maybe type" "temp"
                (665106 'move' call_tmp[665103](140552 call eltType _mt[243] a[140349]))
                unknown copy[140556] "dead at end of block" "no auto destroy"
                (543268 'init var' copy[140556] src[140489] call_tmp[665103])
                (140559 'end of statement' src[140489])
                (140565 '=' dst[140481] copy[140556])
                (480882 'end of statement' dst[140481] copy[140556])
              }
              {
                unknown call_tmp[665108] "expr temp" "maybe param" "maybe type" "temp"
                (665111 'move' call_tmp[665108](140572 call == kind[140357] assign[137997]))
                unknown call_tmp[665113] "expr temp" "maybe param" "maybe type" "temp"
                (665116 'move' call_tmp[665113](140580 call _cond_test call_tmp[665108]))
                if call_tmp[665113]
                {
                  (140576 call = dst[140481] src[140489])
                  (480885 'end of statement' dst[140481] src[140489])
                }
              }
            }
          }
        }
        label _unused_continueLabel[140599]
        label _breakLabel[140598]
      }
    }
    {
      {
        unknown i[140688] "dead at end of block" "insert auto destroy"
        (543270 'init var' i[140688] 0)
        (480888 'end of statement')
        unknown tmp[140689] "maybe param" "temp"
        unknown call_tmp[665120] "expr temp" "maybe param" "maybe type" "temp"
        (665123 'move' call_tmp[665120](140637 call size _mt[243] b[140353]))
        unknown call_tmp[665125] "expr temp" "maybe param" "maybe type" "temp"
        (665128 'move' call_tmp[665125](140641 call - call_tmp[665120] 1))
        (140701 'move' tmp[140689](140699 call chpl_compute_low_param_loop_bound 0 call_tmp[665125]))
        unknown tmp[140690] "maybe param" "temp"
        unknown call_tmp[665132] "expr temp" "maybe param" "maybe type" "temp"
        (665135 'move' call_tmp[665132](140708 call size _mt[243] b[140353]))
        unknown call_tmp[665137] "expr temp" "maybe param" "maybe type" "temp"
        (665140 'move' call_tmp[665137](140706 call - call_tmp[665132] 1))
        (140714 'move' tmp[140690](140712 call chpl_compute_high_param_loop_bound 0 call_tmp[665137]))
        unknown tmp[140691] "maybe param" "temp"
        (140717 'move' tmp[140691] 1)
        ParamForLoop[140719]
        { i[140688] tmp[140689] tmp[140690] tmp[140691]
          {
            unknown call_tmp[665144] "expr temp" "maybe param" "maybe type" "temp"
            (665147 'move' call_tmp[665144](140647 call rank _mt[243] a[140349]))
            unknown call_tmp[665149] "expr temp" "maybe param" "maybe type" "temp"
            (665152 'move' call_tmp[665149](140651 call - call_tmp[665144] rank[140343]))
            unknown call_tmp[665154] "expr temp" "maybe param" "maybe type" "temp"
            (665157 'move' call_tmp[665154](140654 call j[140338] call_tmp[665149]))
            unknown call_tmp[665159] "expr temp" "maybe param" "maybe type" "temp"
            (665162 'move' call_tmp[665159](140660 call _cast strType[140383] start[140431]))
            unknown call_tmp[665164] "expr temp" "maybe param" "maybe type" "temp"
            (665167 'move' call_tmp[665164](140664 call * i[140688] stride[140409]))
            unknown call_tmp[665169] "expr temp" "maybe param" "maybe type" "temp"
            (665172 'move' call_tmp[665169](140666 call + call_tmp[665159] call_tmp[665164]))
            unknown call_tmp[665174] "expr temp" "maybe param" "maybe type" "temp"
            (665177 'move' call_tmp[665174](140668 call chpl__intToIdx idxType[140386] call_tmp[665169]))
            (140669 call = call_tmp[665154] call_tmp[665174])
            (480889 'end of statement' idxType[140386] strType[140383] start[140431] i[140688] stride[140409])
            unknown call_tmp[665179] "expr temp" "maybe param" "maybe type" "temp"
            (665182 'move' call_tmp[665179](140678 call - rank[140343] 1))
            unknown call_tmp[665184] "expr temp" "maybe param" "maybe type" "temp"
            (665187 'move' call_tmp[665184](140684 call b[140353] i[140688]))
            (140686 call helpInitArrFromTuple j[140338] call_tmp[665179] a[140349] call_tmp[665184] kind[140357])
            (480895 'end of statement' i[140688])
          }
        }
        label _unused_continueLabel[140693]
        label _breakLabel[140692]
      }
    }
    (519176 return _void[55])
  }
  {
    (140364 call <(140361 'lifetime_of' a[140349])(140363 'lifetime_of' b[140353]))
  }
  function initArrFromTuple[140744](ref arg a[140741]:_array[133594](?), arg b[140747]:_tuple[56202](?), param arg kind[140751]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140767] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665191] "expr temp" "maybe param" "maybe type" "temp"
    (665194 'move' call_tmp[665191](140755 call rank _mt[243] a[140741]))
    unknown call_tmp[665198] "expr temp" "maybe param" "maybe type" "temp"
    (665201 'move' call_tmp[665198](140759 call _dom _mt[243] a[140741]))
    unknown call_tmp[665205] "expr temp" "maybe param" "maybe type" "temp"
    (665208 'move' call_tmp[665205](140762 call idxType _mt[243] call_tmp[665198]))
    unknown call_tmp[665210] "expr temp" "maybe param" "maybe type" "temp"
    (665213 'move' call_tmp[665210](140765 call * call_tmp[665191] call_tmp[665205]))
    (543272 'default init var' j[140767] call_tmp[665210])
    (140770 'end of statement')
    unknown call_tmp[665217] "expr temp" "maybe param" "maybe type" "temp"
    (665220 'move' call_tmp[665217](140776 call rank _mt[243] a[140741]))
    (140782 call helpInitArrFromTuple j[140767] call_tmp[665217] a[140741] b[140747] kind[140751])
    (480897 'end of statement' j[140767])
    (519178 return _void[55])
  }
  function =[140794](ref arg a[140791]:_array[133594](?), arg b[140797]:_tuple[56202](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (140812 call initArrFromTuple a[140791] b[140797] assign[137997])
    (519180 return _void[55])
  }
  where {
    (140803 call isRectangularArr a[140791])
  }
  function _desync[140824](arg t[140821]:_syncvar[84947](?)) type : _unknown[51]
  {
    unknown ret[519184] "RVV" "temp" "type variable"
    unknown x[140827] "dead at end of block" "insert auto destroy"
    (543274 'default init var' x[140827] t[140821])
    (140830 'end of statement')
    unknown call_tmp[665224] "expr temp" "maybe param" "maybe type" "temp"
    (665227 'move' call_tmp[665224](140833 call valType _mt[243] x[140827]))
    (519189 'move' ret[519184](519188 'deref' call_tmp[665224]))
    gotoReturn _end__desync[519182] _end__desync[519182]
    (480900 'end of statement' x[140827])
    label _end__desync[519182]
    (519186 return ret[519184])
  }
  function _desync[140846](arg t[140843]:_singlevar[87256](?)) type : _unknown[51]
  {
    unknown ret[519195] "RVV" "temp" "type variable"
    unknown x[140849] "dead at end of block" "insert auto destroy"
    (543276 'default init var' x[140849] t[140843])
    (140852 'end of statement')
    unknown call_tmp[665231] "expr temp" "maybe param" "maybe type" "temp"
    (665234 'move' call_tmp[665231](140855 call valType _mt[243] x[140849]))
    (519200 'move' ret[519195](519199 'deref' call_tmp[665231]))
    gotoReturn _end__desync[519193] _end__desync[519193]
    (480902 'end of statement' x[140849])
    label _end__desync[519193]
    (519197 return ret[519195])
  }
  function _desync[140866](arg t[140864]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[519206] "RVV" "temp" "type variable"
    (519211 'move' ret[519206](519210 'deref' t[140864]))
    (519208 return ret[519206])
  }
  function desyncEltType[140880](arg t[140877]:_array[133594](?)) type : _unknown[51] "private"
  {
    unknown ret[519215] "RVV" "temp" "type variable"
    unknown eltType[140886] "dead at end of block" "insert auto destroy" "type variable"(140885 call chpl__eltTypeFromArrayRuntimeType t[140877])
    (543281 'move' eltType[140886](543279 call chpl__eltTypeFromArrayRuntimeType t[140877]))
    (480905 'end of statement')
    unknown call_tmp[665236] "expr temp" "maybe param" "maybe type" "temp"
    (665239 'move' call_tmp[665236](140893 call _desync eltType[140886]))
    (519220 'move' ret[519215](519219 'deref' call_tmp[665236]))
    gotoReturn _end_desyncEltType[519213] _end_desyncEltType[519213]
    (480906 'end of statement' eltType[140886])
    label _end_desyncEltType[519213]
    (519217 return ret[519215])
  }
  function =[140906](ref arg a[140903]:_array[133594](?), arg b[140915] :
  unknown call_tmp[665243] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140926] "index var" "insert auto destroy"
      iterated expressions:
        a[140903]
      shadow variables:
      other variables
        forall body
      {
        (140922 call = e[140926] b[140915])
        (480908 'end of statement' e[140926])
      }
    }
    (519224 return _void[55])
  }
  function +=[140941](arg a[140938]:_array[133594](?), arg b[140950] :
  unknown call_tmp[665250] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140961] "index var" "insert auto destroy"
      iterated expressions:
        a[140938]
      shadow variables:
      other variables
        forall body
      {
        (140957 call += e[140961] b[140950])
        (480910 'end of statement' e[140961])
      }
    }
    (519226 return _void[55])
  }
  function -=[140976](arg a[140973]:_array[133594](?), arg b[140985] :
  unknown call_tmp[665257] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140996] "index var" "insert auto destroy"
      iterated expressions:
        a[140973]
      shadow variables:
      other variables
        forall body
      {
        (140992 call -= e[140996] b[140985])
        (480912 'end of statement' e[140996])
      }
    }
    (519228 return _void[55])
  }
  function *=[141011](arg a[141008]:_array[133594](?), arg b[141020] :
  unknown call_tmp[665264] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141031] "index var" "insert auto destroy"
      iterated expressions:
        a[141008]
      shadow variables:
      other variables
        forall body
      {
        (141027 call *= e[141031] b[141020])
        (480914 'end of statement' e[141031])
      }
    }
    (519230 return _void[55])
  }
  function /=[141046](arg a[141043]:_array[133594](?), arg b[141055] :
  unknown call_tmp[665271] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141066] "index var" "insert auto destroy"
      iterated expressions:
        a[141043]
      shadow variables:
      other variables
        forall body
      {
        (141062 call /= e[141066] b[141055])
        (480916 'end of statement' e[141066])
      }
    }
    (519232 return _void[55])
  }
  function %=[141081](arg a[141078]:_array[133594](?), arg b[141090] :
  unknown call_tmp[665278] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141101] "index var" "insert auto destroy"
      iterated expressions:
        a[141078]
      shadow variables:
      other variables
        forall body
      {
        (141097 call %= e[141101] b[141090])
        (480918 'end of statement' e[141101])
      }
    }
    (519234 return _void[55])
  }
  function **=[141116](arg a[141113]:_array[133594](?), arg b[141125] :
  unknown call_tmp[665285] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141136] "index var" "insert auto destroy"
      iterated expressions:
        a[141113]
      shadow variables:
      other variables
        forall body
      {
        (141132 call **= e[141136] b[141125])
        (480920 'end of statement' e[141136])
      }
    }
    (519236 return _void[55])
  }
  function &=[141151](arg a[141148]:_array[133594](?), arg b[141160] :
  unknown call_tmp[665292] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141171] "index var" "insert auto destroy"
      iterated expressions:
        a[141148]
      shadow variables:
      other variables
        forall body
      {
        (141167 call &= e[141171] b[141160])
        (480922 'end of statement' e[141171])
      }
    }
    (519238 return _void[55])
  }
  function |=[141186](arg a[141183]:_array[133594](?), arg b[141195] :
  unknown call_tmp[665299] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141206] "index var" "insert auto destroy"
      iterated expressions:
        a[141183]
      shadow variables:
      other variables
        forall body
      {
        (141202 call |= e[141206] b[141195])
        (480924 'end of statement' e[141206])
      }
    }
    (519240 return _void[55])
  }
  function ^=[141221](arg a[141218]:_array[133594](?), arg b[141230] :
  unknown call_tmp[665306] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141241] "index var" "insert auto destroy"
      iterated expressions:
        a[141218]
      shadow variables:
      other variables
        forall body
      {
        (141237 call ^= e[141241] b[141230])
        (480926 'end of statement' e[141241])
      }
    }
    (519242 return _void[55])
  }
  function >>=[141256](arg a[141253]:_array[133594](?), arg b[141265] :
  unknown call_tmp[665313] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141276] "index var" "insert auto destroy"
      iterated expressions:
        a[141253]
      shadow variables:
      other variables
        forall body
      {
        (141272 call >>= e[141276] b[141265])
        (480928 'end of statement' e[141276])
      }
    }
    (519244 return _void[55])
  }
  function <<=[141291](arg a[141288]:_array[133594](?), arg b[141300] :
  unknown call_tmp[665320] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141311] "index var" "insert auto destroy"
      iterated expressions:
        a[141288]
      shadow variables:
      other variables
        forall body
      {
        (141307 call <<= e[141311] b[141300])
        (480930 'end of statement' e[141311])
      }
    }
    (519246 return _void[55])
  }
  function chpl_by[141324](arg a[141321]:_domain[125908](?), arg b[141326]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519250] "RVV" "temp"
    unknown r[141349] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665327] "expr temp" "maybe param" "maybe type" "temp"
    (665330 'move' call_tmp[665327](141329 call rank _mt[243] a[141321]))
    unknown call_tmp[665334] "expr temp" "maybe param" "maybe type" "temp"
    (665337 'move' call_tmp[665334](141334 call _value _mt[243] a[141321]))
    unknown call_tmp[665341] "expr temp" "maybe param" "maybe type" "temp"
    (665344 'move' call_tmp[665341](141337 call idxType _mt[243] call_tmp[665334]))
    unknown call_tmp[665346] "expr temp" "maybe param" "maybe type" "temp"
    (665349 'move' call_tmp[665346](141346 call range[64319](?) call_tmp[665341] bounded[64208] 1))
    unknown call_tmp[665351] "expr temp" "maybe param" "maybe type" "temp"
    (665354 'move' call_tmp[665351](141347 call * call_tmp[665327] call_tmp[665346]))
    (543283 'default init var' r[141349] call_tmp[665351])
    (141352 'end of statement')
    unknown call_tmp[665358] "expr temp" "maybe param" "maybe type" "temp"
    (665361 'move' call_tmp[665358](141356 call rank _mt[243] a[141321]))
    unknown call_tmp[665363] "maybe param" "maybe type" "temp"
    (665366 'move' call_tmp[665363](141363 call _makeIndexTuple call_tmp[665358] b[141326](expand = 1)))
    unknown t[141364] "dead at end of block" "insert auto destroy"
    (543285 'init var' t[141364] call_tmp[665363])
    (141367 'end of statement')
    {
      unknown i[141398] "dead at end of block" "insert auto destroy"
      (543287 'init var' i[141398] 0)
      (480932 'end of statement')
      unknown tmp[141399] "maybe param" "temp"
      unknown call_tmp[665370] "expr temp" "maybe param" "maybe type" "temp"
      (665373 'move' call_tmp[665370](141370 call rank _mt[243] a[141321]))
      unknown call_tmp[665375] "expr temp" "maybe param" "maybe type" "temp"
      (665378 'move' call_tmp[665375](141374 call - call_tmp[665370] 1))
      (141411 'move' tmp[141399](141409 call chpl_compute_low_param_loop_bound 0 call_tmp[665375]))
      unknown tmp[141400] "maybe param" "temp"
      unknown call_tmp[665382] "expr temp" "maybe param" "maybe type" "temp"
      (665385 'move' call_tmp[665382](141418 call rank _mt[243] a[141321]))
      unknown call_tmp[665387] "expr temp" "maybe param" "maybe type" "temp"
      (665390 'move' call_tmp[665387](141416 call - call_tmp[665382] 1))
      (141424 'move' tmp[141400](141422 call chpl_compute_high_param_loop_bound 0 call_tmp[665387]))
      unknown tmp[141401] "maybe param" "temp"
      (141427 'move' tmp[141401] 1)
      ParamForLoop[141429]
      { i[141398] tmp[141399] tmp[141400] tmp[141401]
        unknown call_tmp[665392] "expr temp" "maybe param" "maybe type" "temp"
        (665395 'move' call_tmp[665392](141381 call r[141349] i[141398]))
        unknown call_tmp[665399] "expr temp" "maybe param" "maybe type" "temp"
        (665402 'move' call_tmp[665399](141388 call(141383 call (partial) dim _mt[243] a[141321]) i[141398]))
        unknown call_tmp[665404] "expr temp" "maybe param" "maybe type" "temp"
        (665407 'move' call_tmp[665404](141392 call t[141364] i[141398]))
        unknown call_tmp[665409] "expr temp" "maybe param" "maybe type" "temp"
        (665412 'move' call_tmp[665409](141393 call chpl_by call_tmp[665399] call_tmp[665404]))
        (141395 call = call_tmp[665392] call_tmp[665409])
        (480933 'end of statement' r[141349] i[141398] i[141398] t[141364] i[141398])
      }
      label _unused_continueLabel[141403]
      label _breakLabel[141402]
    }
    unknown call_tmp[665416] "expr temp" "maybe param" "maybe type" "temp"
    (665419 'move' call_tmp[665416](141441 call dist _mt[243] a[141321]))
    unknown call_tmp[665423] "expr temp" "maybe param" "maybe type" "temp"
    (665426 'move' call_tmp[665423](141446 call rank _mt[243] a[141321]))
    unknown call_tmp[665430] "expr temp" "maybe param" "maybe type" "temp"
    (665433 'move' call_tmp[665430](141450 call _value _mt[243] a[141321]))
    unknown call_tmp[665437] "expr temp" "maybe param" "maybe type" "temp"
    (665440 'move' call_tmp[665437](141453 call idxType _mt[243] call_tmp[665430]))
    unknown call_tmp[665442] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665445 'move' call_tmp[665442](747908 'new' _domain[125908](?) call_tmp[665416] call_tmp[665423] call_tmp[665437] 1 r[141349]))
    (519255 'move' ret[519250](519254 'deref' call_tmp[665442]))
    gotoReturn _end_chpl_by[519248] _end_chpl_by[519248]
    (480939 'end of statement' r[141349])
    label _end_chpl_by[519248]
    (519252 return ret[519250])
  }
  function chpl_align[141469](arg a[141466]:_domain[125908](?), arg b[141471]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519261] "RVV" "temp"
    unknown r[141497] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665449] "expr temp" "maybe param" "maybe type" "temp"
    (665452 'move' call_tmp[665449](141474 call rank _mt[243] a[141466]))
    unknown call_tmp[665456] "expr temp" "maybe param" "maybe type" "temp"
    (665459 'move' call_tmp[665456](141479 call _value _mt[243] a[141466]))
    unknown call_tmp[665463] "expr temp" "maybe param" "maybe type" "temp"
    (665466 'move' call_tmp[665463](141482 call idxType _mt[243] call_tmp[665456]))
    unknown call_tmp[665470] "expr temp" "maybe param" "maybe type" "temp"
    (665473 'move' call_tmp[665470](141491 call stridable _mt[243] a[141466]))
    unknown call_tmp[665475] "expr temp" "maybe param" "maybe type" "temp"
    (665478 'move' call_tmp[665475](141494 call range[64319](?) call_tmp[665463] bounded[64208] call_tmp[665470]))
    unknown call_tmp[665480] "expr temp" "maybe param" "maybe type" "temp"
    (665483 'move' call_tmp[665480](141495 call * call_tmp[665449] call_tmp[665475]))
    (543289 'default init var' r[141497] call_tmp[665480])
    (141500 'end of statement')
    unknown call_tmp[665487] "expr temp" "maybe param" "maybe type" "temp"
    (665490 'move' call_tmp[665487](141504 call rank _mt[243] a[141466]))
    unknown call_tmp[665492] "maybe param" "maybe type" "temp"
    (665495 'move' call_tmp[665492](141511 call _makeIndexTuple call_tmp[665487] b[141471](expand = 1)))
    unknown t[141512] "dead at end of block" "insert auto destroy"
    (543291 'init var' t[141512] call_tmp[665492])
    (141515 'end of statement')
    {
      unknown i[141546] "dead at end of block" "insert auto destroy"
      (543293 'init var' i[141546] 0)
      (480941 'end of statement')
      unknown tmp[141547] "maybe param" "temp"
      unknown call_tmp[665499] "expr temp" "maybe param" "maybe type" "temp"
      (665502 'move' call_tmp[665499](141518 call rank _mt[243] a[141466]))
      unknown call_tmp[665504] "expr temp" "maybe param" "maybe type" "temp"
      (665507 'move' call_tmp[665504](141522 call - call_tmp[665499] 1))
      (141559 'move' tmp[141547](141557 call chpl_compute_low_param_loop_bound 0 call_tmp[665504]))
      unknown tmp[141548] "maybe param" "temp"
      unknown call_tmp[665511] "expr temp" "maybe param" "maybe type" "temp"
      (665514 'move' call_tmp[665511](141566 call rank _mt[243] a[141466]))
      unknown call_tmp[665516] "expr temp" "maybe param" "maybe type" "temp"
      (665519 'move' call_tmp[665516](141564 call - call_tmp[665511] 1))
      (141572 'move' tmp[141548](141570 call chpl_compute_high_param_loop_bound 0 call_tmp[665516]))
      unknown tmp[141549] "maybe param" "temp"
      (141575 'move' tmp[141549] 1)
      ParamForLoop[141577]
      { i[141546] tmp[141547] tmp[141548] tmp[141549]
        unknown call_tmp[665521] "expr temp" "maybe param" "maybe type" "temp"
        (665524 'move' call_tmp[665521](141529 call r[141497] i[141546]))
        unknown call_tmp[665528] "expr temp" "maybe param" "maybe type" "temp"
        (665531 'move' call_tmp[665528](141536 call(141531 call (partial) dim _mt[243] a[141466]) i[141546]))
        unknown call_tmp[665533] "expr temp" "maybe param" "maybe type" "temp"
        (665536 'move' call_tmp[665533](141540 call t[141512] i[141546]))
        unknown call_tmp[665538] "expr temp" "maybe param" "maybe type" "temp"
        (665541 'move' call_tmp[665538](141541 call chpl_align call_tmp[665528] call_tmp[665533]))
        (141543 call = call_tmp[665521] call_tmp[665538])
        (480942 'end of statement' r[141497] i[141546] i[141546] t[141512] i[141546])
      }
      label _unused_continueLabel[141551]
      label _breakLabel[141550]
    }
    unknown call_tmp[665545] "expr temp" "maybe param" "maybe type" "temp"
    (665548 'move' call_tmp[665545](141589 call dist _mt[243] a[141466]))
    unknown call_tmp[665552] "expr temp" "maybe param" "maybe type" "temp"
    (665555 'move' call_tmp[665552](141594 call rank _mt[243] a[141466]))
    unknown call_tmp[665559] "expr temp" "maybe param" "maybe type" "temp"
    (665562 'move' call_tmp[665559](141598 call _value _mt[243] a[141466]))
    unknown call_tmp[665566] "expr temp" "maybe param" "maybe type" "temp"
    (665569 'move' call_tmp[665566](141601 call idxType _mt[243] call_tmp[665559]))
    unknown call_tmp[665573] "expr temp" "maybe param" "maybe type" "temp"
    (665576 'move' call_tmp[665573](141605 call stridable _mt[243] a[141466]))
    unknown call_tmp[665578] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665581 'move' call_tmp[665578](747909 'new' _domain[125908](?) call_tmp[665545] call_tmp[665552] call_tmp[665566] call_tmp[665573] r[141497]))
    (519266 'move' ret[519261](519265 'deref' call_tmp[665578]))
    gotoReturn _end_chpl_align[519259] _end_chpl_align[519259]
    (480948 'end of statement' r[141497])
    label _end_chpl_align[519259]
    (519263 return ret[519261])
  }
  function <=>[141624](arg x[141621]:_array[133594](?), arg y[141631]:_array[133594](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141636] "dead at end of block" "insert auto destroy"
    (543295 'init var' hasSwapped[141636] 0 bool[10])
    (141639 'end of statement')
    unknown tmp[426854] "maybe param" "temp"
    unknown tmp[426875] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492314] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665585] "expr temp" "maybe param" "maybe type" "temp"
      (665588 'move' call_tmp[665585](141642 call _value _mt[243] x[141621]))
      (492318 'move' call_type_tmp[492314](141645 'typeof' call_tmp[665585]))
    }
    { scopeless type
      unknown call_type_tmp[492320] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665592] "expr temp" "maybe param" "maybe type" "temp"
      (665595 'move' call_tmp[665592](141647 call _value _mt[243] y[141631]))
      (492324 'move' call_type_tmp[492320](141650 'typeof' call_tmp[665592]))
    }
    (426886 'move' tmp[426875](141651 call == call_type_tmp[492314] call_type_tmp[492320]))
    unknown call_tmp[665597] "expr temp" "maybe param" "maybe type" "temp"
    (665600 'move' call_tmp[665597](426888 call _cond_invalid tmp[426875]))
    if call_tmp[665597]
    {
      (426891 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568100] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568101] "maybe param" "temp"
    unknown call_tmp[665602] "expr temp" "maybe param" "maybe type" "temp"
    (665605 'move' call_tmp[665602](426876 call isTrue tmp[426875]))
    (568106 'move' tmp[568101](568104 call _cond_test call_tmp[665602]))
    if tmp[568101]
    {
      unknown tmp[568108] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665609] "expr temp" "maybe param" "maybe type" "temp"
      (665612 'move' call_tmp[665609](141655 call _value _mt[243] x[141621]))
      unknown call_tmp[665614] "expr temp" "maybe param" "maybe type" "temp"
      (665617 'move' call_tmp[665614](141659 call chpl__isArrayView call_tmp[665609]))
      unknown call_tmp[665619] "expr temp" "maybe param" "maybe type" "temp"
      (665622 'move' call_tmp[665619](141660 call ! call_tmp[665614]))
      (568110 'move' tmp[568108](426879 call isTrue call_tmp[665619]))
      (568115 'move' tmp[568100](568112 '_paramFoldLogical' tmp[568101] tmp[568108]))
    }
    {
      (568120 'move' tmp[568100](568117 '_paramFoldLogical' tmp[568101] 0))
    }
    (426865 'move' tmp[426854] tmp[568100])
    unknown call_tmp[665624] "expr temp" "maybe param" "maybe type" "temp"
    (665627 'move' call_tmp[665624](426867 call _cond_invalid tmp[426854]))
    if call_tmp[665624]
    {
      (426870 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568127] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568128] "maybe param" "temp"
    unknown call_tmp[665629] "expr temp" "maybe param" "maybe type" "temp"
    (665632 'move' call_tmp[665629](426855 call isTrue tmp[426854]))
    (568133 'move' tmp[568128](568131 call _cond_test call_tmp[665629]))
    if tmp[568128]
    {
      unknown tmp[568135] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665636] "expr temp" "maybe param" "maybe type" "temp"
      (665639 'move' call_tmp[665636](141669 call _value _mt[243] x[141621]))
      unknown call_tmp[665643] "expr temp" "maybe param" "maybe type" "temp"
      (665646 'move' call_tmp[665643](141691 call _value _mt[243] y[141631]))
      unknown call_tmp[665648] "expr temp" "maybe param" "maybe type" "temp"
      (665651 'move' call_tmp[665648](141694 call canResolveMethod module=[255] Reflection[224901] call_tmp[665636] "doiSwap" call_tmp[665643]))
      (568137 'move' tmp[568135](426858 call isTrue call_tmp[665648]))
      (568142 'move' tmp[568127](568139 '_paramFoldLogical' tmp[568128] tmp[568135]))
    }
    {
      (568147 'move' tmp[568127](568144 '_paramFoldLogical' tmp[568128] 0))
    }
    unknown call_tmp[665653] "expr temp" "maybe param" "maybe type" "temp"
    (665656 'move' call_tmp[665653](141726 call _cond_test tmp[568127]))
    if call_tmp[665653]
    {
      unknown call_tmp[665660] "expr temp" "maybe param" "maybe type" "temp"
      (665663 'move' call_tmp[665660](461606 call _dom _mt[243] x[141621]))
      unknown call_tmp[665667] "expr temp" "maybe param" "maybe type" "temp"
      (665670 'move' call_tmp[665667](461612 call _dom _mt[243] y[141631]))
      unknown call_tmp[665672] "expr temp" "maybe param" "maybe type" "temp"
      (665675 'move' call_tmp[665672](141699 call == call_tmp[665660] call_tmp[665667]))
      unknown call_tmp[665677] "expr temp" "maybe param" "maybe type" "temp"
      (665680 'move' call_tmp[665677](141721 call _cond_test call_tmp[665672]))
      if call_tmp[665677]
      {
        unknown call_tmp[665684] "expr temp" "maybe param" "maybe type" "temp"
        (665687 'move' call_tmp[665684](141702 call _value _mt[243] x[141621]))
        unknown call_tmp[665693] "expr temp" "maybe param" "maybe type" "temp"
        (665696 'move' call_tmp[665693](141709 call _value _mt[243] y[141631]))
        (141713 call(141705 call (partial) doiSwap _mt[243] call_tmp[665684]) call_tmp[665693])
        (480952 'end of statement')
        (141718 call = hasSwapped[141636] 1)
        (480953 'end of statement' hasSwapped[141636])
      }
    }
    unknown call_tmp[665698] "expr temp" "maybe param" "maybe type" "temp"
    (665701 'move' call_tmp[665698](141731 call ! hasSwapped[141636]))
    unknown call_tmp[665703] "expr temp" "maybe param" "maybe type" "temp"
    (665706 'move' call_tmp[665703](141755 call _cond_test call_tmp[665698]))
    if call_tmp[665703]
    {
      Forall {
        induction variables:
          
          unknown a[141748] "index var" "insert auto destroy"
          
          unknown b[141750] "index var" "insert auto destroy"
        iterated expressions:
          x[141621]
          y[141631]
        shadow variables:
        other variables
          forall body
        {
          (141744 call <=> a[141748] b[141750])
          (480955 'end of statement' a[141748] b[141750])
        }
      }
    }
    (519270 return _void[55])
    (360368 'referenced modules list' Reflection[224901])
  }
  function reshape[141769](arg A[141766]:_array[133594](?), arg D[141772]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[519274] "RVV" "temp"
    unknown call_tmp[665708] "expr temp" "maybe param" "maybe type" "temp"
    (665711 'move' call_tmp[665708](141778 call isRectangularDom D[141772]))
    unknown call_tmp[665713] "expr temp" "maybe param" "maybe type" "temp"
    (665716 'move' call_tmp[665713](141779 call ! call_tmp[665708]))
    unknown call_tmp[665718] "expr temp" "maybe param" "maybe type" "temp"
    (665721 'move' call_tmp[665718](141807 call _cond_test call_tmp[665713]))
    if call_tmp[665718]
    {
      unknown call_tmp[665723] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665726 'move' call_tmp[665723](141801 'typeof' D[141772]))
      unknown call_tmp[665728] "expr temp" "maybe param" "maybe type" "temp"
      (665731 'move' call_tmp[665728](141803 call _cast string[26] call_tmp[665723]))
      (141805 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665728])
    }
    unknown call_tmp[665735] "expr temp" "maybe param" "maybe type" "temp"
    (665738 'move' call_tmp[665735](141814 call size _mt[243] A[141766]))
    unknown call_tmp[665742] "expr temp" "maybe param" "maybe type" "temp"
    (665745 'move' call_tmp[665742](141818 call size _mt[243] D[141772]))
    unknown call_tmp[665747] "expr temp" "maybe param" "maybe type" "temp"
    (665750 'move' call_tmp[665747](141821 call != call_tmp[665735] call_tmp[665742]))
    unknown call_tmp[665752] "expr temp" "maybe param" "maybe type" "temp"
    (665755 'move' call_tmp[665752](141886 call _cond_test call_tmp[665747]))
    if call_tmp[665752]
    {
      unknown call_tmp[665759] "expr temp" "maybe param" "maybe type" "temp"
      (665762 'move' call_tmp[665759](141843 call size _mt[243] A[141766]))
      unknown call_tmp[665766] "expr temp" "maybe param" "maybe type" "temp"
      (665769 'move' call_tmp[665766](141864 call size _mt[243] D[141772]))
      (141884 call halt "reshape(A,D) is invoked when A has " call_tmp[665759] " elements, but D has " call_tmp[665766] " indices")
    }
    unknown B[141918] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter6[582742](arg iterator[582744]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582805] "RVV" "temp"
      {
        unknown _indexOfInterest[582749] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582750] "expr temp" "temp"
        (582759 'move' _iterator[582750](582757 call _getIteratorZip iterator[582744]))
        Defer
        {
          {
            (582785 call _freeIterator _iterator[582750])
          }
        }
        { scopeless type
          (582764 'move' _indexOfInterest[582749](582761 call iteratorIndex _iterator[582750]))
        }
        ForLoop[582751] for-expr
        {
          unknown a[141916] "index var" "insert auto destroy" "no doc"
          (582794 'end of statement')
          unknown i[141914] "index var" "insert auto destroy" "no doc"
          (582795 'end of statement')
          (582769 call _check_tuple_var_decl _indexOfInterest[582749] 2)
          (582796 'end of statement')
          (582775 'move' i[141914](582773 call _indexOfInterest[582749] 0))
          (582797 'end of statement' i[141914])
          (582780 'move' a[141916](582778 call _indexOfInterest[582749] 1))
          (582799 'end of statement' a[141916])
          {
            {
              unknown yret[582809] "YVV" "temp"
              (582812 'move' yret[582809](582811 'deref' a[141916]))
              (582814 yield yret[582809])
              (582801 'end of statement' a[141916])
            }
          }
          label _continueLabel[582754]
          _indexOfInterest[582749]
          _iterator[582750]
        }
        label _breakLabel[582755]
      }
      (582807 return ret[582805])
    }
    function chpl__forexpr6[582726](arg iterExpr[582729]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582819] "RVV" "temp"
      unknown _iterator[582733] "expr temp" "maybe ref" "temp"
      (582735 'move' _iterator[582733] iterExpr[582729])
      unknown call_tmp[582826] "expr temp" "maybe param" "maybe type" "temp"
      (582829 'move' call_tmp[582826](582738 call chpl__loopexpr_iter6 _iterator[582733]))
      (582824 'move' ret[582819](582823 'deref' call_tmp[582826]))
      (582821 return ret[582819])
    }
    unknown call_tmp[582831] "expr temp" "maybe param" "maybe type" "temp"
    (582834 'move' call_tmp[582831](141909 call _build_tuple D[141772] A[141766]))
    unknown call_tmp[582836] "maybe param" "maybe type" "temp"
    (582839 'move' call_tmp[582836](582731 call chpl__forexpr6 call_tmp[582831]))
    (582843 'iterator record set shape' call_tmp[582836] D[141772] 1)
    unknown call_tmp[665771] "expr temp" "maybe param" "maybe type" "temp"
    (665774 'move' call_tmp[665771](141897 call chpl__ensureDomainExpr D[141772]))
    unknown call_tmp[665778] "expr temp" "maybe param" "maybe type" "temp"
    (665781 'move' call_tmp[665778](141894 call eltType _mt[243] A[141766]))
    unknown call_tmp[665783] "maybe param" "maybe type" "temp"
    (665786 'move' call_tmp[665783](141899 call chpl__buildArrayRuntimeType call_tmp[665771] call_tmp[665778]))
    (543297 'init var' B[141918] call_tmp[582836] call_tmp[665783])
    (141921 'end of statement')
    (519279 'move' ret[519274](519278 'deref' B[141918]))
    gotoReturn _end_reshape[519272] _end_reshape[519272]
    (480960 'end of statement' B[141918])
    label _end_reshape[519272]
    (519276 return ret[519274])
  }
  function reshape[141933](arg A[141930]:_iteratorRecord[205](?), arg D[141936]:_domain[125908](?)) : _unknown[51] "no doc"
  {
    unknown ret[519285] "RVV" "temp"
    unknown call_tmp[665788] "expr temp" "maybe param" "maybe type" "temp"
    (665791 'move' call_tmp[665788](141942 call isRectangularDom D[141936]))
    unknown call_tmp[665793] "expr temp" "maybe param" "maybe type" "temp"
    (665796 'move' call_tmp[665793](141943 call ! call_tmp[665788]))
    unknown call_tmp[665798] "expr temp" "maybe param" "maybe type" "temp"
    (665801 'move' call_tmp[665798](141955 call _cond_test call_tmp[665793]))
    if call_tmp[665798]
    {
      unknown call_tmp[665803] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665806 'move' call_tmp[665803](141949 'typeof' D[141936]))
      unknown call_tmp[665808] "expr temp" "maybe param" "maybe type" "temp"
      (665811 'move' call_tmp[665808](141951 call _cast string[26] call_tmp[665803]))
      (141953 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665808])
    }
    unknown B[141978] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter7[582861](arg iterator[582863]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582924] "RVV" "temp"
      {
        unknown _indexOfInterest[582868] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582869] "expr temp" "temp"
        (582878 'move' _iterator[582869](582876 call _getIteratorZip iterator[582863]))
        Defer
        {
          {
            (582904 call _freeIterator _iterator[582869])
          }
        }
        { scopeless type
          (582883 'move' _indexOfInterest[582868](582880 call iteratorIndex _iterator[582869]))
        }
        ForLoop[582870] for-expr
        {
          unknown a[141976] "index var" "insert auto destroy" "no doc"
          (582913 'end of statement')
          unknown i[141974] "index var" "insert auto destroy" "no doc"
          (582914 'end of statement')
          (582888 call _check_tuple_var_decl _indexOfInterest[582868] 2)
          (582915 'end of statement')
          (582894 'move' i[141974](582892 call _indexOfInterest[582868] 0))
          (582916 'end of statement' i[141974])
          (582899 'move' a[141976](582897 call _indexOfInterest[582868] 1))
          (582918 'end of statement' a[141976])
          {
            {
              unknown yret[582928] "YVV" "temp"
              (582931 'move' yret[582928](582930 'deref' a[141976]))
              (582933 yield yret[582928])
              (582920 'end of statement' a[141976])
            }
          }
          label _continueLabel[582873]
          _indexOfInterest[582868]
          _iterator[582869]
        }
        label _breakLabel[582874]
      }
      (582926 return ret[582924])
    }
    function chpl__forexpr7[582845](arg iterExpr[582848]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582938] "RVV" "temp"
      unknown _iterator[582852] "expr temp" "maybe ref" "temp"
      (582854 'move' _iterator[582852] iterExpr[582848])
      unknown call_tmp[582945] "expr temp" "maybe param" "maybe type" "temp"
      (582948 'move' call_tmp[582945](582857 call chpl__loopexpr_iter7 _iterator[582852]))
      (582943 'move' ret[582938](582942 'deref' call_tmp[582945]))
      (582940 return ret[582938])
    }
    unknown call_tmp[582950] "expr temp" "maybe param" "maybe type" "temp"
    (582953 'move' call_tmp[582950](141969 call _build_tuple D[141936] A[141930]))
    unknown call_tmp[582955] "maybe param" "maybe type" "temp"
    (582958 'move' call_tmp[582955](582850 call chpl__forexpr7 call_tmp[582950]))
    (582962 'iterator record set shape' call_tmp[582955] D[141936] 1)
    (543299 'init var' B[141978] call_tmp[582955])
    (141981 'end of statement')
    (519290 'move' ret[519285](519289 'deref' B[141978]))
    gotoReturn _end_reshape[519283] _end_reshape[519283]
    (480963 'end of statement' B[141978])
    label _end_reshape[519283]
    (519287 return ret[519285])
  }
  function linearize[141991](arg Xs[141989]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[519296] "RVV" "temp"
    {
      unknown _indexOfInterest[141998] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141999] "expr temp" "temp"
      (142008 'move' _iterator[141999](142006 call _getIterator Xs[141989]))
      Defer
      {
        {
          (142024 call _freeIterator _iterator[141999])
        }
      }
      { scopeless type
        (142013 'move' _indexOfInterest[141998](142010 call iteratorIndex _iterator[141999]))
      }
      ForLoop[142000]
      {
        unknown x[142017] "index var" "insert auto destroy"
        (480966 'end of statement')
        (142019 'move' x[142017] _indexOfInterest[141998])
        (480967 'end of statement' x[142017])
        unknown yret[519300] "YVV" "temp"
        (519303 'move' yret[519300](519302 'deref' x[142017]))
        (519305 yield yret[519300])
        (480969 'end of statement' x[142017])
        label _continueLabel[142003]
        _indexOfInterest[141998]
        _iterator[141999]
      }
      label _breakLabel[142004]
    }
    (519298 return ret[519296])
  }
  function chpl__unalias[142040](arg x[142037]:_domain[125908](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519309] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492326] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665815] "expr temp" "maybe param" "maybe type" "temp"
      (665818 'move' call_tmp[665815](142044 call _instance _mt[243] x[142037]))
      (492330 'move' call_type_tmp[492326](142047 'typeof' call_tmp[665815]))
    }
    { scopeless type
      unknown call_type_tmp[492332] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665822] "expr temp" "maybe param" "maybe type" "temp"
      (665825 'move' call_tmp[665822](142051 call _instance _mt[243] x[142037]))
      (492336 'move' call_type_tmp[492332](142054 'typeof' call_tmp[665822]))
    }
    unknown call_tmp[665827] "expr temp" "maybe param" "maybe type" "temp"
    (665830 'move' call_tmp[665827](142049 call _to_unmanaged call_type_tmp[492326]))
    unknown call_tmp[665832] "expr temp" "maybe param" "maybe type" "temp"
    (665835 'move' call_tmp[665832](142055 call != call_tmp[665827] call_type_tmp[492332]))
    unknown call_tmp[665837] "expr temp" "maybe param" "maybe type" "temp"
    (665840 'move' call_tmp[665837](142062 call _cond_test call_tmp[665832]))
    if call_tmp[665837]
    {
      (142060 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[665844] "expr temp" "maybe param" "maybe type" "temp"
    (665847 'move' call_tmp[665844](142069 call _unowned _mt[243] x[142037]))
    unknown call_tmp[665849] "expr temp" "maybe param" "maybe type" "temp"
    (665852 'move' call_tmp[665849](142090 call _cond_test call_tmp[665844]))
    if call_tmp[665849]
    {
      unknown ret[142073] "dead at end of block" "no auto destroy"
      (543301 'init var' ret[142073] x[142037])
      (142076 'end of statement')
      (519314 'move' ret[519309](519313 'deref' ret[142073]))
      gotoReturn _end_chpl__unalias[519307] _end_chpl__unalias[519307]
      (480972 'end of statement' ret[142073])
    }
    {
      unknown ret[142082] "dead at end of block" "insert auto destroy" "no copy"
      (543303 'init var' ret[142082] x[142037])
      (142085 'end of statement')
      (519319 'move' ret[519309](519318 'deref' ret[142082]))
      gotoReturn _end_chpl__unalias[519307] _end_chpl__unalias[519307]
      (480974 'end of statement' ret[142082])
    }
    label _end_chpl__unalias[519307]
    (519311 return ret[519309])
  }
  function chpl__initCopy[142104](const  ref arg rhs[142101]:_array[133594](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519325] "RVV" "temp"
    unknown call_tmp[665854] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (665857 'move' call_tmp[665854](142108 'typeof' rhs[142101]))
    unknown call_tmp[665859] "maybe param" "maybe type" "temp"
    (665862 'move' call_tmp[665859](142111 call chpl__coerceCopy call_tmp[665854] rhs[142101]))
    unknown lhs[142112] "dead at end of block" "no copy"
    (543305 'init var' lhs[142112] call_tmp[665859])
    (142115 'end of statement')
    (519330 'move' ret[519325](519329 'deref' lhs[142112]))
    gotoReturn _end_chpl__initCopy[519323] _end_chpl__initCopy[519323]
    (480976 'end of statement' lhs[142112])
    label _end_chpl__initCopy[519323]
    (519327 return ret[519325])
  }
  function chpl__autoCopy[142130](arg x[142127]:_array[133594](?)) : _unknown[51] "auto copy fn"
  {
    unknown ret[519336] "RVV" "temp"
    unknown call_tmp[665864] "maybe param" "maybe type" "temp"
    (665867 'move' call_tmp[665864](142135 call chpl__initCopy x[142127]))
    unknown b[142136] "dead at end of block" "insert auto destroy" "no copy"
    (543307 'init var' b[142136] call_tmp[665864])
    (142139 'end of statement')
    (519341 'move' ret[519336](519340 'deref' b[142136]))
    gotoReturn _end_chpl__autoCopy[519334] _end_chpl__autoCopy[519334]
    (480978 'end of statement' b[142136])
    label _end_chpl__autoCopy[519334]
    (519338 return ret[519336])
  }
  function chpl__coerceCopy[142152](arg dstType[142149]:_domain[125908](?), arg rhs[142155]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519347] "RVV" "temp"
    unknown call_tmp[665871] "expr temp" "maybe param" "maybe type" "temp"
    (665874 'move' call_tmp[665871](142159 call dist _mt[243] rhs[142155]))
    unknown call_tmp[665878] "expr temp" "maybe param" "maybe type" "temp"
    (665881 'move' call_tmp[665878](142162 call _value _mt[243] call_tmp[665871]))
    unknown call_tmp[665885] "maybe param" "maybe type" "temp"
    (665888 'move' call_tmp[665885](142171 call(142167 call (partial) dsiIsLayout _mt[243] call_tmp[665878])))
    unknown rhsIsLayout[142172] "dead at end of block" "param"
    (543309 'init var' rhsIsLayout[142172] call_tmp[665885])
    (142175 'end of statement')
    unknown lhs[142178] "dead at end of block" "insert auto destroy"
    (543311 'default init var' lhs[142178] dstType[142149])
    (142181 'end of statement')
    (748157 call chpl_statementLevelSymbol lhs[142178])
    (142186 call = lhs[142178] rhs[142155])
    (480980 'end of statement' lhs[142178])
    unknown tmp[426896] "maybe param" "temp"
    unknown call_tmp[665892] "expr temp" "maybe param" "maybe type" "temp"
    (665895 'move' call_tmp[665892](142190 call dist _mt[243] lhs[142178]))
    unknown call_tmp[665899] "expr temp" "maybe param" "maybe type" "temp"
    (665902 'move' call_tmp[665899](142193 call _value _mt[243] call_tmp[665892]))
    (426907 'move' tmp[426896](142200 call(142196 call (partial) dsiIsLayout _mt[243] call_tmp[665899])))
    unknown call_tmp[665906] "expr temp" "maybe param" "maybe type" "temp"
    (665909 'move' call_tmp[665906](426909 call _cond_invalid tmp[426896]))
    if call_tmp[665906]
    {
      (426912 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568154] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568155] "maybe param" "temp"
    unknown call_tmp[665911] "expr temp" "maybe param" "maybe type" "temp"
    (665914 'move' call_tmp[665911](426897 call isTrue tmp[426896]))
    (568160 'move' tmp[568155](568158 call _cond_test call_tmp[665911]))
    if tmp[568155]
    {
      unknown tmp[568162] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665916] "expr temp" "maybe param" "maybe type" "temp"
      (665919 'move' call_tmp[665916](142202 call ! rhsIsLayout[142172]))
      (568164 'move' tmp[568162](426900 call isTrue call_tmp[665916]))
      (568169 'move' tmp[568154](568166 '_paramFoldLogical' tmp[568155] tmp[568162]))
    }
    {
      (568174 'move' tmp[568154](568171 '_paramFoldLogical' tmp[568155] 0))
    }
    unknown call_tmp[665921] "expr temp" "maybe param" "maybe type" "temp"
    (665924 'move' call_tmp[665921](142229 call _cond_test tmp[568154]))
    if call_tmp[665921]
    {
      (142227 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519352 'move' ret[519347](519351 'deref' lhs[142178]))
    gotoReturn _end_chpl__coerceCopy[519345] _end_chpl__coerceCopy[519345]
    (480984 'end of statement' lhs[142178])
    label _end_chpl__coerceCopy[519345]
    (519349 return ret[519347])
  }
  function chpl__coerceMove[142245](arg dstType[142242]:_domain[125908](?), in arg rhs[142248]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519358] "RVV" "temp"
    unknown call_tmp[665928] "expr temp" "maybe param" "maybe type" "temp"
    (665931 'move' call_tmp[665928](142252 call dist _mt[243] rhs[142248]))
    unknown call_tmp[665935] "expr temp" "maybe param" "maybe type" "temp"
    (665938 'move' call_tmp[665935](142255 call _value _mt[243] call_tmp[665928]))
    unknown call_tmp[665942] "maybe param" "maybe type" "temp"
    (665945 'move' call_tmp[665942](142262 call(142258 call (partial) dsiIsLayout _mt[243] call_tmp[665935])))
    unknown rhsIsLayout[142263] "dead at end of block" "param"
    (543313 'init var' rhsIsLayout[142263] call_tmp[665942])
    (142266 'end of statement')
    unknown lhs[142269] "dead at end of block" "insert auto destroy"
    (543315 'default init var' lhs[142269] dstType[142242])
    (142272 'end of statement')
    (748159 call chpl_statementLevelSymbol lhs[142269])
    (142277 call = lhs[142269] rhs[142248])
    (480986 'end of statement' lhs[142269])
    unknown tmp[426917] "maybe param" "temp"
    unknown call_tmp[665949] "expr temp" "maybe param" "maybe type" "temp"
    (665952 'move' call_tmp[665949](142281 call dist _mt[243] lhs[142269]))
    unknown call_tmp[665956] "expr temp" "maybe param" "maybe type" "temp"
    (665959 'move' call_tmp[665956](142284 call _value _mt[243] call_tmp[665949]))
    (426928 'move' tmp[426917](142291 call(142287 call (partial) dsiIsLayout _mt[243] call_tmp[665956])))
    unknown call_tmp[665963] "expr temp" "maybe param" "maybe type" "temp"
    (665966 'move' call_tmp[665963](426930 call _cond_invalid tmp[426917]))
    if call_tmp[665963]
    {
      (426933 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568181] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568182] "maybe param" "temp"
    unknown call_tmp[665968] "expr temp" "maybe param" "maybe type" "temp"
    (665971 'move' call_tmp[665968](426918 call isTrue tmp[426917]))
    (568187 'move' tmp[568182](568185 call _cond_test call_tmp[665968]))
    if tmp[568182]
    {
      unknown tmp[568189] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665973] "expr temp" "maybe param" "maybe type" "temp"
      (665976 'move' call_tmp[665973](142293 call ! rhsIsLayout[142263]))
      (568191 'move' tmp[568189](426921 call isTrue call_tmp[665973]))
      (568196 'move' tmp[568181](568193 '_paramFoldLogical' tmp[568182] tmp[568189]))
    }
    {
      (568201 'move' tmp[568181](568198 '_paramFoldLogical' tmp[568182] 0))
    }
    unknown call_tmp[665978] "expr temp" "maybe param" "maybe type" "temp"
    (665981 'move' call_tmp[665978](142302 call _cond_test tmp[568181]))
    if call_tmp[665978]
    {
      (142300 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519363 'move' ret[519358](519362 'deref' lhs[142269]))
    gotoReturn _end_chpl__coerceMove[519356] _end_chpl__coerceMove[519356]
    (480990 'end of statement' lhs[142269])
    label _end_chpl__coerceMove[519356]
    (519360 return ret[519358])
  }
  function chpl__coerceCopy[142318](arg dstType[142315]:_domain[125908](?), arg rhs[142321]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519369] "RVV" "temp"
    unknown lhs[142325] "dead at end of block" "insert auto destroy"
    (543317 'default init var' lhs[142325] dstType[142315])
    (142328 'end of statement')
    (748161 call chpl_statementLevelSymbol lhs[142325])
    unknown call_tmp[665983] "expr temp" "maybe param" "maybe type" "temp"
    (665986 'move' call_tmp[665983](142336 call chpl__isLegalRectTupDomAssign lhs[142325] rhs[142321]))
    unknown call_tmp[665988] "expr temp" "maybe param" "maybe type" "temp"
    (665991 'move' call_tmp[665988](142353 call _cond_test call_tmp[665983]))
    if call_tmp[665988]
    {
      unknown call_tmp[665993] "expr temp" "maybe param" "maybe type" "temp"
      (665996 'move' call_tmp[665993](142341 call chpl__buildDomainExpr(142339 'expand_tuple' rhs[142321])))
      (142343 call = lhs[142325] call_tmp[665993])
      (480992 'end of statement' lhs[142325])
    }
    {
      (142349 call = lhs[142325] rhs[142321])
      (480994 'end of statement' lhs[142325])
    }
    (519374 'move' ret[519369](519373 'deref' lhs[142325]))
    gotoReturn _end_chpl__coerceCopy[519367] _end_chpl__coerceCopy[519367]
    (480996 'end of statement' lhs[142325])
    label _end_chpl__coerceCopy[519367]
    (519371 return ret[519369])
  }
  function chpl__coerceMove[142368](arg dstType[142365]:_domain[125908](?), in arg rhs[142371]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519380] "RVV" "temp"
    unknown lhs[142375] "dead at end of block" "insert auto destroy"
    (543319 'default init var' lhs[142375] dstType[142365])
    (142378 'end of statement')
    (748163 call chpl_statementLevelSymbol lhs[142375])
    unknown call_tmp[665998] "expr temp" "maybe param" "maybe type" "temp"
    (666001 'move' call_tmp[665998](142386 call chpl__isLegalRectTupDomAssign lhs[142375] rhs[142371]))
    unknown call_tmp[666003] "expr temp" "maybe param" "maybe type" "temp"
    (666006 'move' call_tmp[666003](142403 call _cond_test call_tmp[665998]))
    if call_tmp[666003]
    {
      unknown call_tmp[666008] "expr temp" "maybe param" "maybe type" "temp"
      (666011 'move' call_tmp[666008](142391 call chpl__buildDomainExpr(142389 'expand_tuple' rhs[142371])))
      (142393 call = lhs[142375] call_tmp[666008])
      (480998 'end of statement' lhs[142375])
    }
    {
      (142399 call = lhs[142375] rhs[142371])
      (481000 'end of statement' lhs[142375])
    }
    (519385 'move' ret[519380](519384 'deref' lhs[142375]))
    gotoReturn _end_chpl__coerceMove[519378] _end_chpl__coerceMove[519378]
    (481002 'end of statement' lhs[142375])
    label _end_chpl__coerceMove[519378]
    (519382 return ret[519380])
  }
  function chpl__coerceCopy[142418](arg dstType[142415]:_domain[125908](?), arg rhs[142424]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519391] "RVV" "temp"
    unknown lhs[142428] "dead at end of block" "insert auto destroy"
    (543321 'default init var' lhs[142428] dstType[142415])
    (142431 'end of statement')
    (748165 call chpl_statementLevelSymbol lhs[142428])
    unknown call_tmp[666013] "expr temp" "maybe param" "maybe type" "temp"
    (666016 'move' call_tmp[666013](142438 call chpl__buildDomainExpr rhs[142424]))
    (142440 call = lhs[142428] call_tmp[666013])
    (481004 'end of statement' lhs[142428])
    (519396 'move' ret[519391](519395 'deref' lhs[142428]))
    gotoReturn _end_chpl__coerceCopy[519389] _end_chpl__coerceCopy[519389]
    (481006 'end of statement' lhs[142428])
    label _end_chpl__coerceCopy[519389]
    (519393 return ret[519391])
  }
  function chpl__coerceMove[142454](arg dstType[142451]:_domain[125908](?), in arg rhs[142460]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519402] "RVV" "temp"
    unknown lhs[142464] "dead at end of block" "insert auto destroy"
    (543323 'default init var' lhs[142464] dstType[142451])
    (142467 'end of statement')
    (748167 call chpl_statementLevelSymbol lhs[142464])
    unknown call_tmp[666018] "expr temp" "maybe param" "maybe type" "temp"
    (666021 'move' call_tmp[666018](142474 call chpl__buildDomainExpr rhs[142460]))
    (142476 call = lhs[142464] call_tmp[666018])
    (481008 'end of statement' lhs[142464])
    (519407 'move' ret[519402](519406 'deref' lhs[142464]))
    gotoReturn _end_chpl__coerceMove[519400] _end_chpl__coerceMove[519400]
    (481010 'end of statement' lhs[142464])
    label _end_chpl__coerceMove[519400]
    (519404 return ret[519402])
  }
  function chpl__coerceCopy[142490](arg dstType[142487]:_domain[125908](?), arg rhs[142493]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519413] "RVV" "temp"
    unknown lhs[142497] "dead at end of block" "insert auto destroy"
    (543325 'default init var' lhs[142497] dstType[142487])
    (142500 'end of statement')
    unknown call_tmp[666023] "expr temp" "maybe param" "maybe type" "temp"
    (666026 'move' call_tmp[666023](142505 call isRectangularDom lhs[142497]))
    unknown call_tmp[666028] "expr temp" "maybe param" "maybe type" "temp"
    (666031 'move' call_tmp[666028](142511 call _cond_test call_tmp[666023]))
    if call_tmp[666028]
    {
      (142509 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142521 call(142517 call (partial) clear _mt[243] lhs[142497]))
    (481013 'end of statement' lhs[142497])
    {
      unknown _indexOfInterest[142534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142535] "expr temp" "temp"
      (142544 'move' _iterator[142535](142542 call _getIterator rhs[142493]))
      Defer
      {
        {
          (142560 call _freeIterator _iterator[142535])
        }
      }
      { scopeless type
        (142549 'move' _indexOfInterest[142534](142546 call iteratorIndex _iterator[142535]))
      }
      ForLoop[142536]
      {
        unknown ind[142553] "index var" "insert auto destroy"
        (481016 'end of statement')
        (142555 'move' ind[142553] _indexOfInterest[142534])
        (481017 'end of statement' ind[142553])
        {
          (142531 call(142526 call (partial) add _mt[243] lhs[142497]) ind[142553])
          (481019 'end of statement' lhs[142497] ind[142553])
        }
        label _continueLabel[142539]
        _indexOfInterest[142534]
        _iterator[142535]
      }
      label _breakLabel[142540]
    }
    (519418 'move' ret[519413](519417 'deref' lhs[142497]))
    gotoReturn _end_chpl__coerceCopy[519411] _end_chpl__coerceCopy[519411]
    (481022 'end of statement' lhs[142497])
    label _end_chpl__coerceCopy[519411]
    (519415 return ret[519413])
  }
  function chpl__coerceMove[142578](arg dstType[142575]:_domain[125908](?), arg rhs[142581]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519424] "RVV" "temp"
    unknown lhs[142585] "dead at end of block" "insert auto destroy"
    (543327 'default init var' lhs[142585] dstType[142575])
    (142588 'end of statement')
    unknown call_tmp[666037] "expr temp" "maybe param" "maybe type" "temp"
    (666040 'move' call_tmp[666037](142593 call isRectangularDom lhs[142585]))
    unknown call_tmp[666042] "expr temp" "maybe param" "maybe type" "temp"
    (666045 'move' call_tmp[666042](142599 call _cond_test call_tmp[666037]))
    if call_tmp[666042]
    {
      (142597 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142609 call(142605 call (partial) clear _mt[243] lhs[142585]))
    (481025 'end of statement' lhs[142585])
    {
      unknown _indexOfInterest[142622] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142623] "expr temp" "temp"
      (142632 'move' _iterator[142623](142630 call _getIterator rhs[142581]))
      Defer
      {
        {
          (142648 call _freeIterator _iterator[142623])
        }
      }
      { scopeless type
        (142637 'move' _indexOfInterest[142622](142634 call iteratorIndex _iterator[142623]))
      }
      ForLoop[142624]
      {
        unknown ind[142641] "index var" "insert auto destroy"
        (481028 'end of statement')
        (142643 'move' ind[142641] _indexOfInterest[142622])
        (481029 'end of statement' ind[142641])
        {
          (142619 call(142614 call (partial) add _mt[243] lhs[142585]) ind[142641])
          (481031 'end of statement' lhs[142585] ind[142641])
        }
        label _continueLabel[142627]
        _indexOfInterest[142622]
        _iterator[142623]
      }
      label _breakLabel[142628]
    }
    (519429 'move' ret[519424](519428 'deref' lhs[142585]))
    gotoReturn _end_chpl__coerceMove[519422] _end_chpl__coerceMove[519422]
    (481034 'end of statement' lhs[142585])
    label _end_chpl__coerceMove[519422]
    (519426 return ret[519424])
  }
  function chpl__coerceCopy[142666](arg dstType[142663]:_domain[125908](?), arg rhs[142668]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519435] "RVV" "temp"
    unknown lhs[142671] "dead at end of block" "insert auto destroy"
    (543329 'default init var' lhs[142671] dstType[142663])
    (142674 'end of statement')
    unknown call_tmp[666051] "expr temp" "maybe param" "maybe type" "temp"
    (666054 'move' call_tmp[666051](142679 call isRectangularDom lhs[142671]))
    unknown call_tmp[666056] "expr temp" "maybe param" "maybe type" "temp"
    (666059 'move' call_tmp[666056](142685 call _cond_test call_tmp[666051]))
    if call_tmp[666056]
    {
      (142683 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142695 call(142691 call (partial) clear _mt[243] lhs[142671]))
    (481037 'end of statement' lhs[142671])
    {
      unknown _indexOfInterest[142708] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142709] "expr temp" "temp"
      (142718 'move' _iterator[142709](142716 call _getIterator rhs[142668]))
      Defer
      {
        {
          (142734 call _freeIterator _iterator[142709])
        }
      }
      { scopeless type
        (142723 'move' _indexOfInterest[142708](142720 call iteratorIndex _iterator[142709]))
      }
      ForLoop[142710]
      {
        unknown ind[142727] "index var" "insert auto destroy"
        (481040 'end of statement')
        (142729 'move' ind[142727] _indexOfInterest[142708])
        (481041 'end of statement' ind[142727])
        {
          (142705 call(142700 call (partial) add _mt[243] lhs[142671]) ind[142727])
          (481043 'end of statement' lhs[142671] ind[142727])
        }
        label _continueLabel[142713]
        _indexOfInterest[142708]
        _iterator[142709]
      }
      label _breakLabel[142714]
    }
    (519440 'move' ret[519435](519439 'deref' lhs[142671]))
    gotoReturn _end_chpl__coerceCopy[519433] _end_chpl__coerceCopy[519433]
    (481046 'end of statement' lhs[142671])
    label _end_chpl__coerceCopy[519433]
    (519437 return ret[519435])
  }
  function chpl__coerceMove[142752](arg dstType[142749]:_domain[125908](?), in arg rhs[142754]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519446] "RVV" "temp"
    unknown lhs[142757] "dead at end of block" "insert auto destroy"
    (543331 'default init var' lhs[142757] dstType[142749])
    (142760 'end of statement')
    unknown call_tmp[666065] "expr temp" "maybe param" "maybe type" "temp"
    (666068 'move' call_tmp[666065](142765 call isRectangularDom lhs[142757]))
    unknown call_tmp[666070] "expr temp" "maybe param" "maybe type" "temp"
    (666073 'move' call_tmp[666070](142771 call _cond_test call_tmp[666065]))
    if call_tmp[666070]
    {
      (142769 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142781 call(142777 call (partial) clear _mt[243] lhs[142757]))
    (481049 'end of statement' lhs[142757])
    {
      unknown _indexOfInterest[142794] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142795] "expr temp" "temp"
      (142804 'move' _iterator[142795](142802 call _getIterator rhs[142754]))
      Defer
      {
        {
          (142820 call _freeIterator _iterator[142795])
        }
      }
      { scopeless type
        (142809 'move' _indexOfInterest[142794](142806 call iteratorIndex _iterator[142795]))
      }
      ForLoop[142796]
      {
        unknown ind[142813] "index var" "insert auto destroy"
        (481052 'end of statement')
        (142815 'move' ind[142813] _indexOfInterest[142794])
        (481053 'end of statement' ind[142813])
        {
          (142791 call(142786 call (partial) add _mt[243] lhs[142757]) ind[142813])
          (481055 'end of statement' lhs[142757] ind[142813])
        }
        label _continueLabel[142799]
        _indexOfInterest[142794]
        _iterator[142795]
      }
      label _breakLabel[142800]
    }
    (519451 'move' ret[519446](519450 'deref' lhs[142757]))
    gotoReturn _end_chpl__coerceMove[519444] _end_chpl__coerceMove[519444]
    (481058 'end of statement' lhs[142757])
    label _end_chpl__coerceMove[519444]
    (519448 return ret[519446])
  }
  function chpl__coerceCopy[142838](arg dstType[142835]:_array[133594](?), arg rhs[142841]:_array[133594](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519457] "RVV" "temp"
    unknown eltType[142848] "dead at end of block" "insert auto destroy" "type variable"(142847 call chpl__eltTypeFromArrayRuntimeType dstType[142835])
    (543336 'move' eltType[142848](543334 call chpl__eltTypeFromArrayRuntimeType dstType[142835]))
    const dom[142856] "dead at end of block" "const" "ref var"
    unknown call_tmp[666079] "expr temp" "maybe param" "maybe type" "temp"
    (666082 'move' call_tmp[666079](142855 call chpl__domainFromArrayRuntimeType dstType[142835]))
    (543339 'move' dom[142856](543338 'addr of' call_tmp[666079]))
    (142859 'end of statement')
    unknown call_tmp[666086] "maybe param" "maybe type" "temp"
    (666089 'move' call_tmp[666086](142868 call(142861 call (partial) buildArray _mt[243] dom[142856]) eltType[142848](initElts = 0)))
    unknown lhs[142869] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543341 'init var' lhs[142869] call_tmp[666086])
    (142872 'end of statement' dom[142856] eltType[142848])
    unknown call_tmp[666093] "expr temp" "maybe param" "maybe type" "temp"
    (666096 'move' call_tmp[666093](142874 call rank _mt[243] lhs[142869]))
    unknown call_tmp[666100] "expr temp" "maybe param" "maybe type" "temp"
    (666103 'move' call_tmp[666100](142878 call rank _mt[243] rhs[142841]))
    unknown call_tmp[666105] "expr temp" "maybe param" "maybe type" "temp"
    (666108 'move' call_tmp[666105](142881 call != call_tmp[666093] call_tmp[666100]))
    unknown call_tmp[666110] "expr temp" "maybe param" "maybe type" "temp"
    (666113 'move' call_tmp[666110](142888 call _cond_test call_tmp[666105]))
    if call_tmp[666110]
    {
      (142886 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666115] "expr temp" "maybe param" "maybe type" "temp"
    (666118 'move' call_tmp[666115](142896 call isCopyableType eltType[142848]))
    unknown call_tmp[666120] "expr temp" "maybe param" "maybe type" "temp"
    (666123 'move' call_tmp[666120](142897 call ! call_tmp[666115]))
    unknown call_tmp[666125] "expr temp" "maybe param" "maybe type" "temp"
    (666128 'move' call_tmp[666125](142941 call _cond_test call_tmp[666120]))
    if call_tmp[666125]
    {
      unknown call_tmp[666130] "expr temp" "maybe param" "maybe type" "temp"
      (666133 'move' call_tmp[666130](142920 call _cast string[26] eltType[142848]))
      (142939 call compilerError "Cannot copy-initialize array because element type '" call_tmp[666130] "' cannot be copy-initialized")
      (481063 'end of statement' eltType[142848])
    }
    unknown call_tmp[666137] "expr temp" "maybe param" "maybe type" "temp"
    (666140 'move' call_tmp[666137](142947 call _value _mt[243] rhs[142841]))
    unknown call_tmp[666142] "expr temp" "maybe param" "maybe type" "temp"
    (666145 'move' call_tmp[666142](142951 call == call_tmp[666137] nil[44]))
    unknown call_tmp[666147] "expr temp" "maybe param" "maybe type" "temp"
    (666150 'move' call_tmp[666147](143015 call _cond_test call_tmp[666142]))
    if call_tmp[666147]
    {
    }
    {
      unknown call_tmp[666154] "expr temp" "maybe param" "maybe type" "temp"
      (666157 'move' call_tmp[666154](142955 call _value _mt[243] lhs[142869]))
      unknown call_tmp[666161] "expr temp" "maybe param" "maybe type" "temp"
      (666164 'move' call_tmp[666161](142959 call _value _mt[243] rhs[142841]))
      unknown call_tmp[666166] "expr temp" "maybe param" "maybe type" "temp"
      (666169 'move' call_tmp[666166](142962 call == call_tmp[666154] call_tmp[666161]))
      unknown call_tmp[666171] "expr temp" "maybe param" "maybe type" "temp"
      (666174 'move' call_tmp[666171](143010 call _cond_test call_tmp[666166]))
      if call_tmp[666171]
      {
      }
      {
        unknown tmp[426938] "maybe param" "temp"
        unknown call_tmp[666178] "expr temp" "maybe param" "maybe type" "temp"
        (666181 'move' call_tmp[666178](142966 call size _mt[243] lhs[142869]))
        (426949 'move' tmp[426938](142970 call == call_tmp[666178] 0))
        unknown call_tmp[666183] "expr temp" "maybe param" "maybe type" "temp"
        (666186 'move' call_tmp[666183](426951 call _cond_invalid tmp[426938]))
        if call_tmp[666183]
        {
          (426954 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568208] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568209] "maybe param" "temp"
        unknown call_tmp[666188] "expr temp" "maybe param" "maybe type" "temp"
        (666191 'move' call_tmp[666188](426939 call isTrue tmp[426938]))
        (568214 'move' tmp[568209](568212 call _cond_test call_tmp[666188]))
        if tmp[568209]
        {
          unknown tmp[568216] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666195] "expr temp" "maybe param" "maybe type" "temp"
          (666198 'move' call_tmp[666195](142973 call size _mt[243] rhs[142841]))
          unknown call_tmp[666200] "expr temp" "maybe param" "maybe type" "temp"
          (666203 'move' call_tmp[666200](142977 call == call_tmp[666195] 0))
          (568218 'move' tmp[568216](426942 call isTrue call_tmp[666200]))
          (568223 'move' tmp[568208](568220 '_paramFoldLogical' tmp[568209] tmp[568216]))
        }
        {
          (568228 'move' tmp[568208](568225 '_paramFoldLogical' tmp[568209] 0))
        }
        unknown call_tmp[666205] "expr temp" "maybe param" "maybe type" "temp"
        (666208 'move' call_tmp[666205](143006 call _cond_test tmp[568208]))
        if call_tmp[666205]
        {
        }
        {
          unknown call_tmp[666210] "expr temp" "maybe param" "maybe type" "temp"
          (666213 'move' call_tmp[666210](142989 call _cond_test 1))
          if call_tmp[666210]
          {
            (142987 call checkArrayShapesUponAssignment lhs[142869] rhs[142841])
            (481066 'end of statement' lhs[142869])
          }
          (143004 call chpl__uncheckedArrayTransfer lhs[142869] rhs[142841](kind = initCopy[137995]))
          (481068 'end of statement' lhs[142869])
        }
      }
    }
    unknown call_tmp[666217] "expr temp" "maybe param" "maybe type" "temp"
    (666220 'move' call_tmp[666217](143021 call _value _mt[243] lhs[142869]))
    (143030 call(143026 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666217]))
    (481070 'end of statement' lhs[142869])
    (519462 'move' ret[519457](519461 'deref' lhs[142869]))
    gotoReturn _end_chpl__coerceCopy[519455] _end_chpl__coerceCopy[519455]
    (481072 'end of statement' lhs[142869])
    label _end_chpl__coerceCopy[519455]
    (519459 return ret[519457])
  }
  function chpl__coerceMove[143043](arg dstType[143040]:_array[133594](?), in arg rhs[143046]:_array[133594](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519468] "RVV" "temp"
    unknown eltType[143053] "dead at end of block" "insert auto destroy" "type variable"(143052 call chpl__eltTypeFromArrayRuntimeType dstType[143040])
    (543346 'move' eltType[143053](543344 call chpl__eltTypeFromArrayRuntimeType dstType[143040]))
    const dom[143061] "dead at end of block" "const" "ref var"
    unknown call_tmp[666224] "expr temp" "maybe param" "maybe type" "temp"
    (666227 'move' call_tmp[666224](143060 call chpl__domainFromArrayRuntimeType dstType[143040]))
    (543349 'move' dom[143061](543348 'addr of' call_tmp[666224]))
    (143064 'end of statement')
    { scopeless type
      unknown call_type_tmp[492338] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[666231] "expr temp" "maybe param" "maybe type" "temp"
      (666234 'move' call_tmp[666231](143066 call _instance _mt[243] rhs[143046]))
      (492342 'move' call_type_tmp[492338](143069 'typeof' call_tmp[666231]))
    }
    unknown call_tmp[666236] "expr temp" "maybe param" "maybe type" "temp"
    (666239 'move' call_tmp[666236](143073 call chpl__instanceTypeFromArrayRuntimeType dstType[143040]))
    unknown call_tmp[666241] "maybe param" "maybe type" "temp"
    (666244 'move' call_tmp[666241](143074 call != call_type_tmp[492338] call_tmp[666236]))
    unknown typeMismatch[143076] "dead at end of block" "param"
    (543351 'init var' typeMismatch[143076] call_tmp[666241])
    (143079 'end of statement')
    unknown call_tmp[666246] "maybe param" "maybe type" "temp"
    (666249 'move' call_tmp[666246](143081 call ! typeMismatch[143076]))
    unknown moveElts[143083] "dead at end of block" "param"
    (543353 'init var' moveElts[143083] call_tmp[666246])
    (143086 'end of statement')
    unknown tmp[426959] "maybe param" "temp"
    (426970 'move' tmp[426959] moveElts[143083])
    unknown call_tmp[666251] "expr temp" "maybe param" "maybe type" "temp"
    (666254 'move' call_tmp[666251](426972 call _cond_invalid tmp[426959]))
    if call_tmp[666251]
    {
      (426975 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568235] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568236] "maybe param" "temp"
    unknown call_tmp[666256] "expr temp" "maybe param" "maybe type" "temp"
    (666259 'move' call_tmp[666256](426960 call isTrue tmp[426959]))
    (568241 'move' tmp[568236](568239 call _cond_test call_tmp[666256]))
    if tmp[568236]
    {
      unknown tmp[568243] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666263] "expr temp" "maybe param" "maybe type" "temp"
      (666266 'move' call_tmp[666263](143089 call _instance _mt[243] dom[143061]))
      unknown call_tmp[666270] "expr temp" "maybe param" "maybe type" "temp"
      (666273 'move' call_tmp[666270](143093 call _dom _mt[243] rhs[143046]))
      unknown call_tmp[666277] "expr temp" "maybe param" "maybe type" "temp"
      (666280 'move' call_tmp[666277](143096 call _instance _mt[243] call_tmp[666270]))
      unknown call_tmp[666282] "expr temp" "maybe param" "maybe type" "temp"
      (666285 'move' call_tmp[666282](143099 call == call_tmp[666263] call_tmp[666277]))
      (568245 'move' tmp[568243](426963 call isTrue call_tmp[666282]))
      (568250 'move' tmp[568235](568247 '_paramFoldLogical' tmp[568236] tmp[568243]))
    }
    {
      (568255 'move' tmp[568235](568252 '_paramFoldLogical' tmp[568236] 0))
    }
    unknown call_tmp[666287] "expr temp" "maybe param" "maybe type" "temp"
    (666290 'move' call_tmp[666287](143107 call _cond_test tmp[568235]))
    if call_tmp[666287]
    {
      (519473 'move' ret[519468](519472 'deref' rhs[143046]))
      gotoReturn _end_chpl__coerceMove[519466] _end_chpl__coerceMove[519466]
    }
    unknown call_tmp[666294] "maybe param" "maybe type" "temp"
    (666297 'move' call_tmp[666294](143119 call(143112 call (partial) buildArray _mt[243] dom[143061]) eltType[143053](initElts = 0)))
    unknown lhs[143120] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543355 'init var' lhs[143120] call_tmp[666294])
    (143123 'end of statement' dom[143061] eltType[143053])
    unknown call_tmp[666301] "expr temp" "maybe param" "maybe type" "temp"
    (666304 'move' call_tmp[666301](143125 call rank _mt[243] lhs[143120]))
    unknown call_tmp[666308] "expr temp" "maybe param" "maybe type" "temp"
    (666311 'move' call_tmp[666308](143129 call rank _mt[243] rhs[143046]))
    unknown call_tmp[666313] "expr temp" "maybe param" "maybe type" "temp"
    (666316 'move' call_tmp[666313](143132 call != call_tmp[666301] call_tmp[666308]))
    unknown call_tmp[666318] "expr temp" "maybe param" "maybe type" "temp"
    (666321 'move' call_tmp[666318](143139 call _cond_test call_tmp[666313]))
    if call_tmp[666318]
    {
      (143137 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666325] "expr temp" "maybe param" "maybe type" "temp"
    (666328 'move' call_tmp[666325](143145 call _value _mt[243] rhs[143046]))
    unknown call_tmp[666330] "expr temp" "maybe param" "maybe type" "temp"
    (666333 'move' call_tmp[666330](143149 call == call_tmp[666325] nil[44]))
    unknown call_tmp[666335] "expr temp" "maybe param" "maybe type" "temp"
    (666338 'move' call_tmp[666335](143226 call _cond_test call_tmp[666330]))
    if call_tmp[666335]
    {
    }
    {
      unknown call_tmp[666342] "expr temp" "maybe param" "maybe type" "temp"
      (666345 'move' call_tmp[666342](143153 call _value _mt[243] lhs[143120]))
      unknown call_tmp[666349] "expr temp" "maybe param" "maybe type" "temp"
      (666352 'move' call_tmp[666349](143157 call _value _mt[243] rhs[143046]))
      unknown call_tmp[666354] "expr temp" "maybe param" "maybe type" "temp"
      (666357 'move' call_tmp[666354](143160 call == call_tmp[666342] call_tmp[666349]))
      unknown call_tmp[666359] "expr temp" "maybe param" "maybe type" "temp"
      (666362 'move' call_tmp[666359](143221 call _cond_test call_tmp[666354]))
      if call_tmp[666359]
      {
      }
      {
        unknown tmp[426980] "maybe param" "temp"
        unknown call_tmp[666366] "expr temp" "maybe param" "maybe type" "temp"
        (666369 'move' call_tmp[666366](143164 call size _mt[243] lhs[143120]))
        (426991 'move' tmp[426980](143168 call == call_tmp[666366] 0))
        unknown call_tmp[666371] "expr temp" "maybe param" "maybe type" "temp"
        (666374 'move' call_tmp[666371](426993 call _cond_invalid tmp[426980]))
        if call_tmp[666371]
        {
          (426996 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568262] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568263] "maybe param" "temp"
        unknown call_tmp[666376] "expr temp" "maybe param" "maybe type" "temp"
        (666379 'move' call_tmp[666376](426981 call isTrue tmp[426980]))
        (568268 'move' tmp[568263](568266 call _cond_test call_tmp[666376]))
        if tmp[568263]
        {
          unknown tmp[568270] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666383] "expr temp" "maybe param" "maybe type" "temp"
          (666386 'move' call_tmp[666383](143171 call size _mt[243] rhs[143046]))
          unknown call_tmp[666388] "expr temp" "maybe param" "maybe type" "temp"
          (666391 'move' call_tmp[666388](143175 call == call_tmp[666383] 0))
          (568272 'move' tmp[568270](426984 call isTrue call_tmp[666388]))
          (568277 'move' tmp[568262](568274 '_paramFoldLogical' tmp[568263] tmp[568270]))
        }
        {
          (568282 'move' tmp[568262](568279 '_paramFoldLogical' tmp[568263] 0))
        }
        unknown call_tmp[666393] "expr temp" "maybe param" "maybe type" "temp"
        (666396 'move' call_tmp[666393](143217 call _cond_test tmp[568262]))
        if call_tmp[666393]
        {
        }
        {
          unknown call_tmp[666398] "expr temp" "maybe param" "maybe type" "temp"
          (666401 'move' call_tmp[666398](143187 call _cond_test 1))
          if call_tmp[666398]
          {
            (143185 call checkArrayShapesUponAssignment lhs[143120] rhs[143046])
            (481080 'end of statement' lhs[143120])
          }
          unknown kind[143205] "dead at end of block" "param"
          unknown tmp[568289] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568290] "maybe param" "temp"
          (568295 'move' tmp[568290](568293 call _cond_test moveElts[143083]))
          if tmp[568290]
          {
            (568300 'move' tmp[568289](568297 '_paramFoldLogical' tmp[568290] move[137993]))
          }
          {
            (568305 'move' tmp[568289](568302 '_paramFoldLogical' tmp[568290] initCopy[137995]))
          }
          (543357 'init var' kind[143205] tmp[568289])
          (143208 'end of statement')
          (143215 call chpl__uncheckedArrayTransfer lhs[143120] rhs[143046](kind = kind[143205]))
          (481082 'end of statement' lhs[143120])
        }
      }
    }
    unknown call_tmp[666405] "expr temp" "maybe param" "maybe type" "temp"
    (666408 'move' call_tmp[666405](143233 call _unowned _mt[243] rhs[143046]))
    unknown call_tmp[666412] "expr temp" "maybe param" "maybe type" "temp"
    (666415 'move' call_tmp[666412](143238 call _instance _mt[243] rhs[143046]))
    unknown call_tmp[666417] "expr temp" "maybe param" "maybe type" "temp"
    (666420 'move' call_tmp[666417](143242 call ! moveElts[143083]))
    (143245 call _do_destroy_arr call_tmp[666405] call_tmp[666412](deinitElts = call_tmp[666417]))
    (481084 'end of statement')
    unknown call_tmp[666424] "expr temp" "maybe param" "maybe type" "temp"
    (666427 'move' call_tmp[666424](143248 call _value _mt[243] lhs[143120]))
    (143255 call(143251 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666424]))
    (481085 'end of statement' lhs[143120])
    (519478 'move' ret[519468](519477 'deref' lhs[143120]))
    gotoReturn _end_chpl__coerceMove[519466] _end_chpl__coerceMove[519466]
    (481087 'end of statement' lhs[143120])
    label _end_chpl__coerceMove[519466]
    (519470 return ret[519468])
  }
  function chpl__coerceCopy[143268](arg dstType[143265]:_array[133594](?), arg rhs[143271]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519484] "RVV" "temp"
    unknown eltType[143278] "dead at end of block" "insert auto destroy" "type variable"(143277 call chpl__eltTypeFromArrayRuntimeType dstType[143265])
    (543362 'move' eltType[143278](543360 call chpl__eltTypeFromArrayRuntimeType dstType[143265]))
    const dom[143286] "dead at end of block" "const" "ref var"
    unknown call_tmp[666431] "expr temp" "maybe param" "maybe type" "temp"
    (666434 'move' call_tmp[666431](143285 call chpl__domainFromArrayRuntimeType dstType[143265]))
    (543365 'move' dom[143286](543364 'addr of' call_tmp[666431]))
    (143289 'end of statement')
    unknown call_tmp[666438] "maybe param" "maybe type" "temp"
    (666441 'move' call_tmp[666438](143298 call(143291 call (partial) buildArray _mt[243] dom[143286]) eltType[143278](initElts = 0)))
    unknown lhs[143299] "dead at end of block" "insert auto destroy" "no copy"
    (543367 'init var' lhs[143299] call_tmp[666438])
    (143302 'end of statement' dom[143286] eltType[143278])
    unknown call_tmp[666445] "expr temp" "maybe param" "maybe type" "temp"
    (666448 'move' call_tmp[666445](143304 call rank _mt[243] lhs[143299]))
    unknown call_tmp[666452] "expr temp" "maybe param" "maybe type" "temp"
    (666455 'move' call_tmp[666452](143308 call rank _mt[243] rhs[143271]))
    unknown call_tmp[666457] "expr temp" "maybe param" "maybe type" "temp"
    (666460 'move' call_tmp[666457](143311 call != call_tmp[666445] call_tmp[666452]))
    unknown call_tmp[666462] "expr temp" "maybe param" "maybe type" "temp"
    (666465 'move' call_tmp[666462](143318 call _cond_test call_tmp[666457]))
    if call_tmp[666462]
    {
      (143316 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427001] "maybe param" "temp"
    (427012 'move' tmp[427001](143326 call isAssociativeDom rhs[143271]))
    unknown call_tmp[666467] "expr temp" "maybe param" "maybe type" "temp"
    (666470 'move' call_tmp[666467](427014 call _cond_invalid tmp[427001]))
    if call_tmp[666467]
    {
      (427017 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568312] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568313] "maybe param" "temp"
    unknown call_tmp[666472] "expr temp" "maybe param" "maybe type" "temp"
    (666475 'move' call_tmp[666472](427002 call isTrue tmp[427001]))
    (568318 'move' tmp[568313](568316 call _cond_test call_tmp[666472]))
    if tmp[568313]
    {
      unknown tmp[568320] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666477] "expr temp" "maybe param" "maybe type" "temp"
      (666480 'move' call_tmp[666477](143330 call isRectangularArr lhs[143299]))
      (568322 'move' tmp[568320](427005 call isTrue call_tmp[666477]))
      (568327 'move' tmp[568312](568324 '_paramFoldLogical' tmp[568313] tmp[568320]))
    }
    {
      (568332 'move' tmp[568312](568329 '_paramFoldLogical' tmp[568313] 0))
    }
    unknown call_tmp[666482] "expr temp" "maybe param" "maybe type" "temp"
    (666485 'move' call_tmp[666482](143338 call _cond_test tmp[568312]))
    if call_tmp[666482]
    {
      (143336 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666487] "expr temp" "maybe param" "maybe type" "temp"
    (666490 'move' call_tmp[666487](143346 call isPODType eltType[143278]))
    unknown call_tmp[666492] "expr temp" "maybe param" "maybe type" "temp"
    (666495 'move' call_tmp[666492](143347 call ! call_tmp[666487]))
    unknown call_tmp[666497] "expr temp" "maybe param" "maybe type" "temp"
    (666500 'move' call_tmp[666497](143370 call _cond_test call_tmp[666492]))
    if call_tmp[666497]
    {
      (143368 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143384 call chpl__transferArray lhs[143299] rhs[143271](kind = initCopy[137995]))
    (481095 'end of statement' lhs[143299])
    unknown call_tmp[666504] "expr temp" "maybe param" "maybe type" "temp"
    (666507 'move' call_tmp[666504](143387 call _value _mt[243] lhs[143299]))
    (143394 call(143390 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666504]))
    (481097 'end of statement' lhs[143299])
    (519489 'move' ret[519484](519488 'deref' lhs[143299]))
    gotoReturn _end_chpl__coerceCopy[519482] _end_chpl__coerceCopy[519482]
    (481099 'end of statement' lhs[143299])
    label _end_chpl__coerceCopy[519482]
    (519486 return ret[519484])
  }
  function chpl__coerceMove[143407](arg dstType[143404]:_array[133594](?), in arg rhs[143410]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519495] "RVV" "temp"
    unknown eltType[143417] "dead at end of block" "insert auto destroy" "type variable"(143416 call chpl__eltTypeFromArrayRuntimeType dstType[143404])
    (543372 'move' eltType[143417](543370 call chpl__eltTypeFromArrayRuntimeType dstType[143404]))
    const dom[143425] "dead at end of block" "const" "ref var"
    unknown call_tmp[666511] "expr temp" "maybe param" "maybe type" "temp"
    (666514 'move' call_tmp[666511](143424 call chpl__domainFromArrayRuntimeType dstType[143404]))
    (543375 'move' dom[143425](543374 'addr of' call_tmp[666511]))
    (143428 'end of statement')
    unknown call_tmp[666518] "maybe param" "maybe type" "temp"
    (666521 'move' call_tmp[666518](143437 call(143430 call (partial) buildArray _mt[243] dom[143425]) eltType[143417](initElts = 0)))
    unknown lhs[143438] "dead at end of block" "insert auto destroy" "no copy"
    (543377 'init var' lhs[143438] call_tmp[666518])
    (143441 'end of statement' dom[143425] eltType[143417])
    unknown call_tmp[666525] "expr temp" "maybe param" "maybe type" "temp"
    (666528 'move' call_tmp[666525](143443 call rank _mt[243] lhs[143438]))
    unknown call_tmp[666532] "expr temp" "maybe param" "maybe type" "temp"
    (666535 'move' call_tmp[666532](143447 call rank _mt[243] rhs[143410]))
    unknown call_tmp[666537] "expr temp" "maybe param" "maybe type" "temp"
    (666540 'move' call_tmp[666537](143450 call != call_tmp[666525] call_tmp[666532]))
    unknown call_tmp[666542] "expr temp" "maybe param" "maybe type" "temp"
    (666545 'move' call_tmp[666542](143457 call _cond_test call_tmp[666537]))
    if call_tmp[666542]
    {
      (143455 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427022] "maybe param" "temp"
    (427033 'move' tmp[427022](143465 call isAssociativeDom rhs[143410]))
    unknown call_tmp[666547] "expr temp" "maybe param" "maybe type" "temp"
    (666550 'move' call_tmp[666547](427035 call _cond_invalid tmp[427022]))
    if call_tmp[666547]
    {
      (427038 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568339] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568340] "maybe param" "temp"
    unknown call_tmp[666552] "expr temp" "maybe param" "maybe type" "temp"
    (666555 'move' call_tmp[666552](427023 call isTrue tmp[427022]))
    (568345 'move' tmp[568340](568343 call _cond_test call_tmp[666552]))
    if tmp[568340]
    {
      unknown tmp[568347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666557] "expr temp" "maybe param" "maybe type" "temp"
      (666560 'move' call_tmp[666557](143469 call isRectangularArr lhs[143438]))
      (568349 'move' tmp[568347](427026 call isTrue call_tmp[666557]))
      (568354 'move' tmp[568339](568351 '_paramFoldLogical' tmp[568340] tmp[568347]))
    }
    {
      (568359 'move' tmp[568339](568356 '_paramFoldLogical' tmp[568340] 0))
    }
    unknown call_tmp[666562] "expr temp" "maybe param" "maybe type" "temp"
    (666565 'move' call_tmp[666562](143477 call _cond_test tmp[568339]))
    if call_tmp[666562]
    {
      (143475 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666567] "expr temp" "maybe param" "maybe type" "temp"
    (666570 'move' call_tmp[666567](143485 call isPODType eltType[143417]))
    unknown call_tmp[666572] "expr temp" "maybe param" "maybe type" "temp"
    (666575 'move' call_tmp[666572](143486 call ! call_tmp[666567]))
    unknown call_tmp[666577] "expr temp" "maybe param" "maybe type" "temp"
    (666580 'move' call_tmp[666577](143493 call _cond_test call_tmp[666572]))
    if call_tmp[666577]
    {
      (143491 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143507 call chpl__transferArray lhs[143438] rhs[143410](kind = initCopy[137995]))
    (481107 'end of statement' lhs[143438])
    unknown call_tmp[666584] "expr temp" "maybe param" "maybe type" "temp"
    (666587 'move' call_tmp[666584](143510 call _value _mt[243] lhs[143438]))
    (143517 call(143513 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666584]))
    (481109 'end of statement' lhs[143438])
    (519500 'move' ret[519495](519499 'deref' lhs[143438]))
    gotoReturn _end_chpl__coerceMove[519493] _end_chpl__coerceMove[519493]
    (481111 'end of statement' lhs[143438])
    label _end_chpl__coerceMove[519493]
    (519497 return ret[519495])
  }
  function chpl__coerceCopy[143530](arg dstType[143527]:_array[133594](?), arg rhs[143536]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519506] "RVV" "temp"
    unknown eltType[143543] "dead at end of block" "insert auto destroy" "type variable"(143542 call chpl__eltTypeFromArrayRuntimeType dstType[143527])
    (543382 'move' eltType[143543](543380 call chpl__eltTypeFromArrayRuntimeType dstType[143527]))
    const dom[143551] "dead at end of block" "const" "ref var"
    unknown call_tmp[666591] "expr temp" "maybe param" "maybe type" "temp"
    (666594 'move' call_tmp[666591](143550 call chpl__domainFromArrayRuntimeType dstType[143527]))
    (543385 'move' dom[143551](543384 'addr of' call_tmp[666591]))
    (143554 'end of statement')
    unknown call_tmp[666598] "maybe param" "maybe type" "temp"
    (666601 'move' call_tmp[666598](143563 call(143556 call (partial) buildArray _mt[243] dom[143551]) eltType[143543](initElts = 0)))
    unknown lhs[143564] "dead at end of block" "insert auto destroy" "no copy"
    (543387 'init var' lhs[143564] call_tmp[666598])
    (143567 'end of statement' dom[143551] eltType[143543])
    unknown call_tmp[666605] "expr temp" "maybe param" "maybe type" "temp"
    (666608 'move' call_tmp[666605](143569 call rank _mt[243] lhs[143564]))
    unknown call_tmp[666610] "expr temp" "maybe param" "maybe type" "temp"
    (666613 'move' call_tmp[666610](143573 call != call_tmp[666605] 1))
    unknown call_tmp[666615] "expr temp" "maybe param" "maybe type" "temp"
    (666618 'move' call_tmp[666615](143580 call _cond_test call_tmp[666610]))
    if call_tmp[666615]
    {
      (143578 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143594 call chpl__transferArray lhs[143564] rhs[143536](kind = initCopy[137995]))
    (481116 'end of statement' lhs[143564])
    unknown call_tmp[666622] "expr temp" "maybe param" "maybe type" "temp"
    (666625 'move' call_tmp[666622](143597 call _value _mt[243] lhs[143564]))
    (143604 call(143600 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666622]))
    (481118 'end of statement' lhs[143564])
    (519511 'move' ret[519506](519510 'deref' lhs[143564]))
    gotoReturn _end_chpl__coerceCopy[519504] _end_chpl__coerceCopy[519504]
    (481120 'end of statement' lhs[143564])
    label _end_chpl__coerceCopy[519504]
    (519508 return ret[519506])
  }
  function chpl__coerceMove[143617](arg dstType[143614]:_array[133594](?), in arg rhs[143623]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519517] "RVV" "temp"
    unknown eltType[143630] "dead at end of block" "insert auto destroy" "type variable"(143629 call chpl__eltTypeFromArrayRuntimeType dstType[143614])
    (543392 'move' eltType[143630](543390 call chpl__eltTypeFromArrayRuntimeType dstType[143614]))
    const dom[143638] "dead at end of block" "const" "ref var"
    unknown call_tmp[666629] "expr temp" "maybe param" "maybe type" "temp"
    (666632 'move' call_tmp[666629](143637 call chpl__domainFromArrayRuntimeType dstType[143614]))
    (543395 'move' dom[143638](543394 'addr of' call_tmp[666629]))
    (143641 'end of statement')
    unknown call_tmp[666636] "maybe param" "maybe type" "temp"
    (666639 'move' call_tmp[666636](143650 call(143643 call (partial) buildArray _mt[243] dom[143638]) eltType[143630](initElts = 0)))
    unknown lhs[143651] "dead at end of block" "insert auto destroy" "no copy"
    (543397 'init var' lhs[143651] call_tmp[666636])
    (143654 'end of statement' dom[143638] eltType[143630])
    unknown call_tmp[666643] "expr temp" "maybe param" "maybe type" "temp"
    (666646 'move' call_tmp[666643](143656 call rank _mt[243] lhs[143651]))
    unknown call_tmp[666648] "expr temp" "maybe param" "maybe type" "temp"
    (666651 'move' call_tmp[666648](143660 call != call_tmp[666643] 1))
    unknown call_tmp[666653] "expr temp" "maybe param" "maybe type" "temp"
    (666656 'move' call_tmp[666653](143667 call _cond_test call_tmp[666648]))
    if call_tmp[666653]
    {
      (143665 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143681 call chpl__transferArray lhs[143651] rhs[143623](kind = initCopy[137995]))
    (481125 'end of statement' lhs[143651])
    unknown call_tmp[666660] "expr temp" "maybe param" "maybe type" "temp"
    (666663 'move' call_tmp[666660](143684 call _value _mt[243] lhs[143651]))
    (143691 call(143687 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666660]))
    (481127 'end of statement' lhs[143651])
    (519522 'move' ret[519517](519521 'deref' lhs[143651]))
    gotoReturn _end_chpl__coerceMove[519515] _end_chpl__coerceMove[519515]
    (481129 'end of statement' lhs[143651])
    label _end_chpl__coerceMove[519515]
    (519519 return ret[519517])
  }
  function chpl__coerceCopy[143704](arg dstType[143701]:_array[133594](?), arg rhs[143707]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519528] "RVV" "temp"
    unknown eltType[143714] "dead at end of block" "insert auto destroy" "type variable"(143713 call chpl__eltTypeFromArrayRuntimeType dstType[143701])
    (543402 'move' eltType[143714](543400 call chpl__eltTypeFromArrayRuntimeType dstType[143701]))
    const dom[143722] "dead at end of block" "const" "ref var"
    unknown call_tmp[666667] "expr temp" "maybe param" "maybe type" "temp"
    (666670 'move' call_tmp[666667](143721 call chpl__domainFromArrayRuntimeType dstType[143701]))
    (543405 'move' dom[143722](543404 'addr of' call_tmp[666667]))
    (143725 'end of statement')
    unknown call_tmp[666674] "maybe param" "maybe type" "temp"
    (666677 'move' call_tmp[666674](143734 call(143727 call (partial) buildArray _mt[243] dom[143722]) eltType[143714](initElts = 0)))
    unknown lhs[143735] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543407 'init var' lhs[143735] call_tmp[666674])
    (143738 'end of statement' dom[143722] eltType[143714])
    unknown call_tmp[666679] "expr temp" "maybe param" "maybe type" "temp"
    (666682 'move' call_tmp[666679](143742 call isRectangularArr lhs[143735]))
    unknown call_tmp[666684] "expr temp" "maybe param" "maybe type" "temp"
    (666687 'move' call_tmp[666684](143743 call ! call_tmp[666679]))
    unknown call_tmp[666689] "expr temp" "maybe param" "maybe type" "temp"
    (666692 'move' call_tmp[666689](143766 call _cond_test call_tmp[666684]))
    if call_tmp[666689]
    {
      (143764 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143779 call initArrFromTuple lhs[143735] rhs[143707] initCopy[137995])
    (481134 'end of statement' lhs[143735])
    unknown call_tmp[666696] "expr temp" "maybe param" "maybe type" "temp"
    (666699 'move' call_tmp[666696](143782 call _value _mt[243] lhs[143735]))
    (143789 call(143785 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666696]))
    (481136 'end of statement' lhs[143735])
    (519533 'move' ret[519528](519532 'deref' lhs[143735]))
    gotoReturn _end_chpl__coerceCopy[519526] _end_chpl__coerceCopy[519526]
    (481138 'end of statement' lhs[143735])
    label _end_chpl__coerceCopy[519526]
    (519530 return ret[519528])
  }
  function chpl__coerceMove[143802](arg dstType[143799]:_array[133594](?), in arg rhs[143805]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519539] "RVV" "temp"
    unknown eltType[143812] "dead at end of block" "insert auto destroy" "type variable"(143811 call chpl__eltTypeFromArrayRuntimeType dstType[143799])
    (543412 'move' eltType[143812](543410 call chpl__eltTypeFromArrayRuntimeType dstType[143799]))
    const dom[143820] "dead at end of block" "const" "ref var"
    unknown call_tmp[666703] "expr temp" "maybe param" "maybe type" "temp"
    (666706 'move' call_tmp[666703](143819 call chpl__domainFromArrayRuntimeType dstType[143799]))
    (543415 'move' dom[143820](543414 'addr of' call_tmp[666703]))
    (143823 'end of statement')
    unknown call_tmp[666710] "maybe param" "maybe type" "temp"
    (666713 'move' call_tmp[666710](143832 call(143825 call (partial) buildArray _mt[243] dom[143820]) eltType[143812](initElts = 0)))
    unknown lhs[143833] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543417 'init var' lhs[143833] call_tmp[666710])
    (143836 'end of statement' dom[143820] eltType[143812])
    unknown call_tmp[666715] "expr temp" "maybe param" "maybe type" "temp"
    (666718 'move' call_tmp[666715](143840 call isRectangularArr lhs[143833]))
    unknown call_tmp[666720] "expr temp" "maybe param" "maybe type" "temp"
    (666723 'move' call_tmp[666720](143841 call ! call_tmp[666715]))
    unknown call_tmp[666725] "expr temp" "maybe param" "maybe type" "temp"
    (666728 'move' call_tmp[666725](143848 call _cond_test call_tmp[666720]))
    if call_tmp[666725]
    {
      (143846 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143861 call initArrFromTuple lhs[143833] rhs[143805] move[137993])
    (481143 'end of statement' lhs[143833])
    unknown call_tmp[666732] "expr temp" "maybe param" "maybe type" "temp"
    (666735 'move' call_tmp[666732](143864 call _value _mt[243] lhs[143833]))
    (143871 call(143867 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666732]))
    (481145 'end of statement' lhs[143833])
    (519544 'move' ret[519539](519543 'deref' lhs[143833]))
    gotoReturn _end_chpl__coerceMove[519537] _end_chpl__coerceMove[519537]
    (481147 'end of statement' lhs[143833])
    label _end_chpl__coerceMove[519537]
    (519541 return ret[519539])
  }
  function chpl__coerceCopy[143884](arg dstType[143881]:_array[133594](?), arg rhs[143890] :
  (143889 call desyncEltType dstType[143881])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519550] "RVV" "temp"
    unknown eltType[143897] "dead at end of block" "insert auto destroy" "type variable"(143896 call chpl__eltTypeFromArrayRuntimeType dstType[143881])
    (543422 'move' eltType[143897](543420 call chpl__eltTypeFromArrayRuntimeType dstType[143881]))
    const dom[143905] "dead at end of block" "const" "ref var"
    unknown call_tmp[666739] "expr temp" "maybe param" "maybe type" "temp"
    (666742 'move' call_tmp[666739](143904 call chpl__domainFromArrayRuntimeType dstType[143881]))
    (543425 'move' dom[143905](543424 'addr of' call_tmp[666739]))
    (143908 'end of statement')
    unknown call_tmp[666746] "maybe param" "maybe type" "temp"
    (666749 'move' call_tmp[666746](143917 call(143910 call (partial) buildArray _mt[243] dom[143905]) eltType[143897](initElts = 0)))
    unknown lhs[143918] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543427 'init var' lhs[143918] call_tmp[666746])
    (143921 'end of statement' dom[143905] eltType[143897])
    Forall {
      induction variables:
        
        unknown e[143947] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143918]
      shadow variables:
        rhs[143925] 'in' intent outer var rhs[143890]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[666753] "maybe param" "maybe type" "temp"
        (666756 'move' call_tmp[666753](143931 call eltType _mt[243] lhs[143918]))
        unknown copy[143935] "dead at end of block" "no auto destroy"
        (543429 'init var' copy[143935] rhs[143925] call_tmp[666753])
        (143938 'end of statement' rhs[143925] lhs[143918])
        (143944 '=' e[143947] copy[143935])
        (481153 'end of statement' e[143947] copy[143935])
      }
    }
    unknown call_tmp[666760] "expr temp" "maybe param" "maybe type" "temp"
    (666763 'move' call_tmp[666760](143952 call _value _mt[243] lhs[143918]))
    (143959 call(143955 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666760]))
    (481156 'end of statement' lhs[143918])
    (519555 'move' ret[519550](519554 'deref' lhs[143918]))
    gotoReturn _end_chpl__coerceCopy[519548] _end_chpl__coerceCopy[519548]
    (481158 'end of statement' lhs[143918])
    label _end_chpl__coerceCopy[519548]
    (519552 return ret[519550])
  }
  function chpl__coerceMove[143972](arg dstType[143969]:_array[133594](?), in arg rhs[143978] :
  (143977 call desyncEltType dstType[143969])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519561] "RVV" "temp"
    unknown eltType[143985] "dead at end of block" "insert auto destroy" "type variable"(143984 call chpl__eltTypeFromArrayRuntimeType dstType[143969])
    (543434 'move' eltType[143985](543432 call chpl__eltTypeFromArrayRuntimeType dstType[143969]))
    const dom[143993] "dead at end of block" "const" "ref var"
    unknown call_tmp[666767] "expr temp" "maybe param" "maybe type" "temp"
    (666770 'move' call_tmp[666767](143992 call chpl__domainFromArrayRuntimeType dstType[143969]))
    (543437 'move' dom[143993](543436 'addr of' call_tmp[666767]))
    (143996 'end of statement')
    unknown call_tmp[666774] "maybe param" "maybe type" "temp"
    (666777 'move' call_tmp[666774](144005 call(143998 call (partial) buildArray _mt[243] dom[143993]) eltType[143985](initElts = 0)))
    unknown lhs[144006] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543439 'init var' lhs[144006] call_tmp[666774])
    (144009 'end of statement' dom[143993] eltType[143985])
    Forall {
      induction variables:
        
        unknown e[144032] "index var" "insert auto destroy"
      iterated expressions:
        lhs[144006]
      shadow variables:
        rhs[144013] 'in' intent outer var rhs[143978]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[144020] "dead at end of block" "no auto destroy"
        (543441 'init var' copy[144020] rhs[144013] eltType[143985])
        (144023 'end of statement' rhs[144013] eltType[143985])
        (144029 '=' e[144032] copy[144020])
        (481164 'end of statement' e[144032] copy[144020])
      }
    }
    unknown call_tmp[666781] "expr temp" "maybe param" "maybe type" "temp"
    (666784 'move' call_tmp[666781](144037 call _value _mt[243] lhs[144006]))
    (144044 call(144040 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666781]))
    (481167 'end of statement' lhs[144006])
    (519566 'move' ret[519561](519565 'deref' lhs[144006]))
    gotoReturn _end_chpl__coerceMove[519559] _end_chpl__coerceMove[519559]
    (481169 'end of statement' lhs[144006])
    label _end_chpl__coerceMove[519559]
    (519563 return ret[519561])
  }
  function chpl__coerceCopy[144057](arg dstType[144054]:_array[133594](?), arg rhs[144060]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519572] "RVV" "temp"
    unknown eltType[144067] "dead at end of block" "insert auto destroy" "type variable"(144066 call chpl__eltTypeFromArrayRuntimeType dstType[144054])
    (543446 'move' eltType[144067](543444 call chpl__eltTypeFromArrayRuntimeType dstType[144054]))
    const dom[144075] "dead at end of block" "const" "ref var"
    unknown call_tmp[666788] "expr temp" "maybe param" "maybe type" "temp"
    (666791 'move' call_tmp[666788](144074 call chpl__domainFromArrayRuntimeType dstType[144054]))
    (543449 'move' dom[144075](543448 'addr of' call_tmp[666788]))
    (144078 'end of statement')
    unknown call_tmp[666795] "maybe param" "maybe type" "temp"
    (666798 'move' call_tmp[666795](144087 call(144080 call (partial) buildArray _mt[243] dom[144075]) eltType[144067](initElts = 0)))
    unknown lhs[144088] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543451 'init var' lhs[144088] call_tmp[666795])
    (144091 'end of statement' dom[144075] eltType[144067])
    (144101 call chpl__transferArray lhs[144088] rhs[144060](kind = initCopy[137995]))
    (481173 'end of statement' lhs[144088])
    unknown call_tmp[666802] "expr temp" "maybe param" "maybe type" "temp"
    (666805 'move' call_tmp[666802](144104 call _value _mt[243] lhs[144088]))
    (144111 call(144107 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666802]))
    (481175 'end of statement' lhs[144088])
    (519577 'move' ret[519572](519576 'deref' lhs[144088]))
    gotoReturn _end_chpl__coerceCopy[519570] _end_chpl__coerceCopy[519570]
    (481177 'end of statement' lhs[144088])
    label _end_chpl__coerceCopy[519570]
    (519574 return ret[519572])
  }
  function chpl__coerceMove[144124](arg dstType[144121]:_array[133594](?), arg rhs[144127]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519583] "RVV" "temp"
    unknown eltType[144134] "dead at end of block" "insert auto destroy" "type variable"(144133 call chpl__eltTypeFromArrayRuntimeType dstType[144121])
    (543456 'move' eltType[144134](543454 call chpl__eltTypeFromArrayRuntimeType dstType[144121]))
    const dom[144142] "dead at end of block" "const" "ref var"
    unknown call_tmp[666809] "expr temp" "maybe param" "maybe type" "temp"
    (666812 'move' call_tmp[666809](144141 call chpl__domainFromArrayRuntimeType dstType[144121]))
    (543459 'move' dom[144142](543458 'addr of' call_tmp[666809]))
    (144145 'end of statement')
    unknown call_tmp[666816] "maybe param" "maybe type" "temp"
    (666819 'move' call_tmp[666816](144154 call(144147 call (partial) buildArray _mt[243] dom[144142]) eltType[144134](initElts = 0)))
    unknown lhs[144155] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543461 'init var' lhs[144155] call_tmp[666816])
    (144158 'end of statement' dom[144142] eltType[144134])
    (144168 call chpl__transferArray lhs[144155] rhs[144127](kind = move[137993]))
    (481181 'end of statement' lhs[144155])
    unknown call_tmp[666823] "expr temp" "maybe param" "maybe type" "temp"
    (666826 'move' call_tmp[666823](144171 call _value _mt[243] lhs[144155]))
    (144178 call(144174 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666823]))
    (481183 'end of statement' lhs[144155])
    (519588 'move' ret[519583](519587 'deref' lhs[144155]))
    gotoReturn _end_chpl__coerceMove[519581] _end_chpl__coerceMove[519581]
    (481185 'end of statement' lhs[144155])
    label _end_chpl__coerceMove[519581]
    (519585 return ret[519583])
  }
  function chpl__coerceCopy[144191](arg dstType[144188]:_array[133594](?), arg rhs[144193]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519594] "RVV" "temp"
    unknown eltType[144199] "dead at end of block" "insert auto destroy" "type variable"(144198 call chpl__eltTypeFromArrayRuntimeType dstType[144188])
    (543466 'move' eltType[144199](543464 call chpl__eltTypeFromArrayRuntimeType dstType[144188]))
    const dom[144207] "dead at end of block" "const" "ref var"
    unknown call_tmp[666830] "expr temp" "maybe param" "maybe type" "temp"
    (666833 'move' call_tmp[666830](144206 call chpl__domainFromArrayRuntimeType dstType[144188]))
    (543469 'move' dom[144207](543468 'addr of' call_tmp[666830]))
    (144210 'end of statement')
    unknown call_tmp[666837] "maybe param" "maybe type" "temp"
    (666840 'move' call_tmp[666837](144219 call(144212 call (partial) buildArray _mt[243] dom[144207]) eltType[144199](initElts = 0)))
    unknown lhs[144220] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543471 'init var' lhs[144220] call_tmp[666837])
    (144223 'end of statement' dom[144207] eltType[144199])
    (144233 call chpl__transferArray lhs[144220] rhs[144193](kind = initCopy[137995]))
    (481189 'end of statement' lhs[144220])
    unknown call_tmp[666844] "expr temp" "maybe param" "maybe type" "temp"
    (666847 'move' call_tmp[666844](144236 call _value _mt[243] lhs[144220]))
    (144243 call(144239 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666844]))
    (481191 'end of statement' lhs[144220])
    (519599 'move' ret[519594](519598 'deref' lhs[144220]))
    gotoReturn _end_chpl__coerceCopy[519592] _end_chpl__coerceCopy[519592]
    (481193 'end of statement' lhs[144220])
    label _end_chpl__coerceCopy[519592]
    (519596 return ret[519594])
  }
  function chpl__coerceMove[144256](arg dstType[144253]:_array[133594](?), in arg rhs[144258]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519605] "RVV" "temp"
    unknown eltType[144264] "dead at end of block" "insert auto destroy" "type variable"(144263 call chpl__eltTypeFromArrayRuntimeType dstType[144253])
    (543476 'move' eltType[144264](543474 call chpl__eltTypeFromArrayRuntimeType dstType[144253]))
    const dom[144272] "dead at end of block" "const" "ref var"
    unknown call_tmp[666851] "expr temp" "maybe param" "maybe type" "temp"
    (666854 'move' call_tmp[666851](144271 call chpl__domainFromArrayRuntimeType dstType[144253]))
    (543479 'move' dom[144272](543478 'addr of' call_tmp[666851]))
    (144275 'end of statement')
    unknown call_tmp[666858] "maybe param" "maybe type" "temp"
    (666861 'move' call_tmp[666858](144284 call(144277 call (partial) buildArray _mt[243] dom[144272]) eltType[144264](initElts = 0)))
    unknown lhs[144285] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543481 'init var' lhs[144285] call_tmp[666858])
    (144288 'end of statement' dom[144272] eltType[144264])
    (144298 call chpl__transferArray lhs[144285] rhs[144258](kind = initCopy[137995]))
    (481197 'end of statement' lhs[144285])
    unknown call_tmp[666865] "expr temp" "maybe param" "maybe type" "temp"
    (666868 'move' call_tmp[666865](144301 call _value _mt[243] lhs[144285]))
    (144308 call(144304 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666865]))
    (481199 'end of statement' lhs[144285])
    (519610 'move' ret[519605](519609 'deref' lhs[144285]))
    gotoReturn _end_chpl__coerceMove[519603] _end_chpl__coerceMove[519603]
    (481201 'end of statement' lhs[144285])
    label _end_chpl__coerceMove[519603]
    (519607 return ret[519605])
  }
  function chpl__unref[144323](arg x[144320]:_array[133594](?)) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[519616] "RVV" "temp"
    unknown ret[144333] "dead at end of block" "no auto destroy"
    (543483 'init var' ret[144333] x[144320])
    (144336 'end of statement')
    (519621 'move' ret[519616](519620 'deref' ret[144333]))
    gotoReturn _end_chpl__unref[519614] _end_chpl__unref[519614]
    (481203 'end of statement' ret[144333])
    label _end_chpl__unref[519614]
    (519618 return ret[519616])
  }
  where {
    unknown call_tmp[666874] "expr temp" "maybe param" "maybe type" "temp"
    (666877 'move' call_tmp[666874](144327 call _value _mt[243] x[144320]))
    (144331 call chpl__isArrayView call_tmp[666874])
  }
  function chpl__unref[144350](arg ir[144347]:_iteratorRecord[205](?)) : _unknown[51] "no copy return" "unref fn"
  {
    unknown ret[519627] "RVV" "temp"
    unknown call_tmp[666879] "maybe param" "maybe type" "temp"
    (666882 'move' call_tmp[666879](144355 call chpl__initCopy ir[144347]))
    unknown toArray[144356] "dead at end of block" "no auto destroy" "no copy"
    (543485 'init var' toArray[144356] call_tmp[666879])
    (144359 'end of statement')
    (519632 'move' ret[519627](519631 'deref' toArray[144356]))
    gotoReturn _end_chpl__unref[519625] _end_chpl__unref[519625]
    (481205 'end of statement' toArray[144356])
    label _end_chpl__unref[519625]
    (519629 return ret[519627])
  }
  function chpl__unref[144374](arg x[144371]:_array[133594](?)) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[519638] "RVV" "temp"
    unknown ret[144377] "dead at end of block" "insert auto destroy" "no copy"
    (543487 'init var' ret[144377] x[144371])
    (144380 'end of statement')
    (519643 'move' ret[519638](519642 'deref' ret[144377]))
    gotoReturn _end_chpl__unref[519636] _end_chpl__unref[519636]
    (481207 'end of statement' ret[144377])
    label _end_chpl__unref[519636]
    (519640 return ret[519638])
  }
  function chpl__unalias[144395](arg x[144392]:_array[133594](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519649] "RVV" "temp"
    unknown tmp[427043] "maybe param" "temp"
    unknown tmp[427064] "maybe param" "temp"
    unknown call_tmp[666886] "expr temp" "maybe param" "maybe type" "temp"
    (666889 'move' call_tmp[666886](144398 call _value _mt[243] x[144392]))
    (427075 'move' tmp[427064](144405 call(144401 call (partial) isSliceArrayView _mt[243] call_tmp[666886])))
    unknown call_tmp[666893] "expr temp" "maybe param" "maybe type" "temp"
    (666896 'move' call_tmp[666893](427077 call _cond_invalid tmp[427064]))
    if call_tmp[666893]
    {
      (427080 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568366] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568367] "maybe param" "temp"
    unknown call_tmp[666898] "expr temp" "maybe param" "maybe type" "temp"
    (666901 'move' call_tmp[666898](427065 call isTrue tmp[427064]))
    (568372 'move' tmp[568367](568370 call _cond_test call_tmp[666898]))
    if tmp[568367]
    {
      (568377 'move' tmp[568366](568374 '_paramFoldLogical' tmp[568367] 1))
    }
    {
      unknown tmp[568379] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666905] "expr temp" "maybe param" "maybe type" "temp"
      (666908 'move' call_tmp[666905](144407 call _value _mt[243] x[144392]))
      unknown call_tmp[666912] "expr temp" "maybe param" "maybe type" "temp"
      (666915 'move' call_tmp[666912](144414 call(144410 call (partial) isRankChangeArrayView _mt[243] call_tmp[666905])))
      (568381 'move' tmp[568379](427069 call isTrue call_tmp[666912]))
      (568386 'move' tmp[568366](568383 '_paramFoldLogical' tmp[568367] tmp[568379]))
    }
    (427054 'move' tmp[427043] tmp[568366])
    unknown call_tmp[666917] "expr temp" "maybe param" "maybe type" "temp"
    (666920 'move' call_tmp[666917](427056 call _cond_invalid tmp[427043]))
    if call_tmp[666917]
    {
      (427059 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown isview[144428] "dead at end of block" "param"
    unknown tmp[568393] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568394] "maybe param" "temp"
    unknown call_tmp[666922] "expr temp" "maybe param" "maybe type" "temp"
    (666925 'move' call_tmp[666922](427044 call isTrue tmp[427043]))
    (568399 'move' tmp[568394](568397 call _cond_test call_tmp[666922]))
    if tmp[568394]
    {
      (568404 'move' tmp[568393](568401 '_paramFoldLogical' tmp[568394] 1))
    }
    {
      unknown tmp[568406] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666929] "expr temp" "maybe param" "maybe type" "temp"
      (666932 'move' call_tmp[666929](144418 call _value _mt[243] x[144392]))
      unknown call_tmp[666936] "expr temp" "maybe param" "maybe type" "temp"
      (666939 'move' call_tmp[666936](144425 call(144421 call (partial) isReindexArrayView _mt[243] call_tmp[666929])))
      (568408 'move' tmp[568406](427048 call isTrue call_tmp[666936]))
      (568413 'move' tmp[568393](568410 '_paramFoldLogical' tmp[568394] tmp[568406]))
    }
    (543489 'init var' isview[144428] tmp[568393])
    (144431 'end of statement')
    unknown call_tmp[666941] "expr temp" "maybe param" "maybe type" "temp"
    (666944 'move' call_tmp[666941](144457 call _cond_test isview[144428]))
    if call_tmp[666941]
    {
      unknown ret[144435] "dead at end of block" "no auto destroy"
      (543491 'init var' ret[144435] x[144392])
      (144438 'end of statement')
      (144443 call chpl__autoDestroy x[144392])
      (481211 'end of statement')
      (519654 'move' ret[519649](519653 'deref' ret[144435]))
      gotoReturn _end_chpl__unalias[519647] _end_chpl__unalias[519647]
      (481212 'end of statement' ret[144435])
    }
    {
      unknown ret[144449] "dead at end of block" "insert auto destroy" "no copy"
      (543493 'init var' ret[144449] x[144392])
      (144452 'end of statement')
      (519659 'move' ret[519649](519658 'deref' ret[144449]))
      gotoReturn _end_chpl__unalias[519647] _end_chpl__unalias[519647]
      (481214 'end of statement' ret[144449])
    }
    label _end_chpl__unalias[519647]
    (519651 return ret[519649])
  }
  function chpl__initCopy[144469](arg ir[144466]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519665] "RVV" "temp"
    unknown call_tmp[666948] "expr temp" "maybe param" "maybe type" "temp"
    (666951 'move' call_tmp[666948](144478 call _shape_ _mt[243] ir[144466]))
    unknown call_tmp[666953] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (666956 'move' call_tmp[666953](747910 'new' _domain[125908](?) call_tmp[666948]))
    unknown shape[144483] "dead at end of block"
    (543495 'init var' shape[144483] call_tmp[666953])
    (144486 'end of statement')
    unknown call_tmp[666960] "expr temp" "maybe param" "maybe type" "temp"
    (666963 'move' call_tmp[666960](144489 call _unowned _mt[243] shape[144483]))
    (144493 call = call_tmp[666960] 1)
    (481216 'end of statement' shape[144483])
    unknown call_tmp[666965] "expr temp" "maybe param" "maybe type" "temp"
    (666968 'move' call_tmp[666965](144500 call chpl__initCopy_shapeHelp shape[144483] ir[144466]))
    (519670 'move' ret[519665](519669 'deref' call_tmp[666965]))
    gotoReturn _end_chpl__initCopy[519663] _end_chpl__initCopy[519663]
    (481218 'end of statement' shape[144483])
    label _end_chpl__initCopy[519663]
    (519667 return ret[519665])
  }
  where {
    (144474 call chpl_iteratorHasDomainShape ir[144466])
  }
  function chpl__initCopy[144512](arg ir[144509]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519676] "RVV" "temp"
    unknown call_tmp[666972] "expr temp" "maybe param" "maybe type" "temp"
    (666975 'move' call_tmp[666972](144527 call _shape_ _mt[243] ir[144509]))
    unknown call_tmp[666977] "maybe param" "maybe type" "temp"
    (666980 'move' call_tmp[666977](144531 call chpl__buildDomainExpr call_tmp[666972]))
    unknown shape[144533] "dead at end of block" "insert auto destroy"
    (543497 'init var' shape[144533] call_tmp[666977])
    (144536 'end of statement')
    unknown call_tmp[666982] "expr temp" "maybe param" "maybe type" "temp"
    (666985 'move' call_tmp[666982](144542 call chpl__initCopy_shapeHelp shape[144533] ir[144509]))
    (519681 'move' ret[519676](519680 'deref' call_tmp[666982]))
    gotoReturn _end_chpl__initCopy[519674] _end_chpl__initCopy[519674]
    (481220 'end of statement' shape[144533])
    label _end_chpl__initCopy[519674]
    (519678 return ret[519676])
  }
  where {
    unknown tmp[427085] "maybe param" "temp"
    (427096 'move' tmp[427085](144517 call chpl_iteratorHasRangeShape ir[144509]))
    unknown call_tmp[666987] "expr temp" "maybe param" "maybe type" "temp"
    (666990 'move' call_tmp[666987](427098 call _cond_invalid tmp[427085]))
    if call_tmp[666987]
    {
      (427101 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568420] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568421] "maybe param" "temp"
    unknown call_tmp[666992] "expr temp" "maybe param" "maybe type" "temp"
    (666995 'move' call_tmp[666992](427086 call isTrue tmp[427085]))
    (568426 'move' tmp[568421](568424 call _cond_test call_tmp[666992]))
    if tmp[568421]
    {
      unknown tmp[568428] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666997] "expr temp" "maybe param" "maybe type" "temp"
      (667000 'move' call_tmp[666997](144521 call chpl_iteratorFromForExpr ir[144509]))
      unknown call_tmp[667002] "expr temp" "maybe param" "maybe type" "temp"
      (667005 'move' call_tmp[667002](144522 call ! call_tmp[666997]))
      (568430 'move' tmp[568428](427089 call isTrue call_tmp[667002]))
      (568435 'move' tmp[568420](568432 '_paramFoldLogical' tmp[568421] tmp[568428]))
    }
    {
      (568440 'move' tmp[568420](568437 '_paramFoldLogical' tmp[568421] 0))
    }
    (748349 call chpl_statementLevelSymbol tmp[568420])
  }
  function chpl__initCopy_shapeHelp[144554](arg shape[144551]:_domain[125908](?), arg ir[144557]:_iteratorRecord[205](?)) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[519687] "RVV" "temp"
    unknown call_tmp[667009] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667012 'move' call_tmp[667009](144566 'typeof' ir[144557]))
    unknown call_tmp[667014] "expr temp" "maybe param" "maybe type" "temp"
    (667017 'move' call_tmp[667014](144568 call iteratorToArrayElementType call_tmp[667009]))
    unknown call_tmp[667019] "maybe param" "maybe type" "temp"
    (667022 'move' call_tmp[667019](144572 call(144561 call (partial) buildArray _mt[243] shape[144551]) call_tmp[667014](initElts = 0)))
    unknown result[144573] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543499 'init var' result[144573] call_tmp[667019])
    (144576 'end of statement')
    unknown call_tmp[667026] "expr temp" "maybe param" "maybe type" "temp"
    (667029 'move' call_tmp[667026](144580 call eltType _mt[243] result[144573]))
    unknown call_tmp[667031] "expr temp" "maybe param" "maybe type" "temp"
    (667034 'move' call_tmp[667031](144584 call isArray call_tmp[667026]))
    unknown call_tmp[667036] "expr temp" "maybe param" "maybe type" "temp"
    (667039 'move' call_tmp[667036](144608 call _cond_test call_tmp[667031]))
    if call_tmp[667036]
    {
      (144606 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[667041] "expr temp" "maybe param" "maybe type" "temp"
    (667044 'move' call_tmp[667041](144616 call chpl_iteratorFromForExpr ir[144557]))
    unknown call_tmp[667046] "expr temp" "maybe param" "maybe type" "temp"
    (667049 'move' call_tmp[667046](144873 call _cond_test call_tmp[667041]))
    if call_tmp[667046]
    {
      unknown call_tmp[667053] "expr temp" "maybe param" "maybe type" "temp"
      (667056 'move' call_tmp[667053](144619 call eltType _mt[243] result[144573]))
      unknown call_tmp[667058] "expr temp" "maybe param" "maybe type" "temp"
      (667061 'move' call_tmp[667058](144623 call needsInitWorkaround call_tmp[667053]))
      unknown call_tmp[667063] "expr temp" "maybe param" "maybe type" "temp"
      (667066 'move' call_tmp[667063](144787 call _cond_test call_tmp[667058]))
      if call_tmp[667063]
      {
        {
          unknown _indexOfInterest[144656] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144657] "expr temp" "temp"
          unknown call_tmp[667070] "expr temp" "maybe param" "maybe type" "temp"
          (667073 'move' call_tmp[667070](144666 call _dom _mt[243] result[144573]))
          unknown call_tmp[667075] "expr temp" "maybe param" "maybe type" "temp"
          (667078 'move' call_tmp[667075](144669 call _getIterator call_tmp[667070]))
          unknown call_tmp[667080] "expr temp" "maybe param" "maybe type" "temp"
          (667083 'move' call_tmp[667080](144673 call _getIterator ir[144557]))
          (144675 'move' _iterator[144657](144635 call _build_tuple call_tmp[667075] call_tmp[667080]))
          Defer
          {
            {
              (144705 call _freeIterator _iterator[144657])
            }
          }
          { scopeless type
            (144680 'move' _indexOfInterest[144656](144677 call iteratorIndex _iterator[144657]))
          }
          ForLoop[144658]
          {
            (144685 call _check_tuple_var_decl _indexOfInterest[144656] 2)
            (481224 'end of statement')
            unknown ri[144691] "index var" "insert auto destroy"
            (481225 'end of statement')
            (144693 'move' ri[144691](144689 call _indexOfInterest[144656] 0))
            (481226 'end of statement' ri[144691])
            unknown src[144698] "index var" "insert auto destroy"
            (481228 'end of statement')
            (144700 'move' src[144698](144696 call _indexOfInterest[144656] 1))
            (481229 'end of statement' src[144698])
            {
              unknown r[144640] "dead at end of block" "ref var"
              unknown call_tmp[667085] "expr temp" "maybe param" "maybe type" "temp"
              (667088 'move' call_tmp[667085](144639 call result[144573] ri[144691]))
              (543502 'move' r[144640](543501 'addr of' call_tmp[667085]))
              (144643 'end of statement')
              unknown copy[144646] "dead at end of block" "no auto destroy"
              (543504 'init var' copy[144646] src[144698])
              (144649 'end of statement' result[144573] ri[144691] src[144698])
              (144654 '=' r[144640] copy[144646])
              (481234 'end of statement' r[144640] copy[144646])
            }
            label _continueLabel[144661]
            _indexOfInterest[144656]
            _iterator[144657]
          }
          label _breakLabel[144662]
        }
      }
      {
        {
          unknown _indexOfInterest[144734] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144735] "expr temp" "temp"
          unknown call_tmp[667090] "expr temp" "maybe param" "maybe type" "temp"
          (667093 'move' call_tmp[667090](144744 call _getIterator result[144573]))
          unknown call_tmp[667095] "expr temp" "maybe param" "maybe type" "temp"
          (667098 'move' call_tmp[667095](144747 call _getIterator ir[144557]))
          (144749 'move' _iterator[144735](144721 call _build_tuple call_tmp[667090] call_tmp[667095]))
          Defer
          {
            {
              (144779 call _freeIterator _iterator[144735])
            }
          }
          { scopeless type
            (144754 'move' _indexOfInterest[144734](144751 call iteratorIndex _iterator[144735]))
          }
          ForLoop[144736]
          {
            (144759 call _check_tuple_var_decl _indexOfInterest[144734] 2)
            (481238 'end of statement')
            unknown r[144765] "index var" "insert auto destroy"
            (481239 'end of statement')
            (144767 'move' r[144765](144763 call _indexOfInterest[144734] 0))
            (481240 'end of statement' r[144765])
            unknown src[144772] "index var" "insert auto destroy"
            (481242 'end of statement')
            (144774 'move' src[144772](144770 call _indexOfInterest[144734] 1))
            (481243 'end of statement' src[144772])
            {
              unknown copy[144723] "dead at end of block" "no auto destroy"
              (543506 'init var' copy[144723] src[144772])
              (144726 'end of statement' src[144772])
              (144732 '=' r[144765] copy[144723])
              (481246 'end of statement' r[144765] copy[144723])
            }
            label _continueLabel[144739]
            _indexOfInterest[144734]
            _iterator[144735]
          }
          label _breakLabel[144740]
        }
      }
    }
    {
      unknown call_tmp[667102] "expr temp" "maybe param" "maybe type" "temp"
      (667105 'move' call_tmp[667102](144794 call eltType _mt[243] result[144573]))
      unknown call_tmp[667107] "expr temp" "maybe param" "maybe type" "temp"
      (667110 'move' call_tmp[667107](144798 call needsInitWorkaround call_tmp[667102]))
      unknown call_tmp[667112] "expr temp" "maybe param" "maybe type" "temp"
      (667115 'move' call_tmp[667112](144868 call _cond_test call_tmp[667107]))
      if call_tmp[667112]
      {
        unknown call_tmp[667119] "expr temp" "maybe param" "maybe type" "temp"
        (667122 'move' call_tmp[667119](415913 call _dom _mt[243] result[144573]))
        unknown call_tmp[667124] "maybe param" "maybe type" "temp"
        (667127 'move' call_tmp[667124](415909 call chpl__staticAutoLocalCheck result[144573] call_tmp[667119]))
        unknown chpl__staticAutoLocalCheckSym[415908] "dead at end of block" "param"
        (543508 'init var' chpl__staticAutoLocalCheckSym[415908] call_tmp[667124])
        (481249 'end of statement' result[144573] result[144573])
        if chpl__staticAutoLocalCheckSym[415908]
        {
          unknown call_tmp[667131] "expr temp" "maybe param" "maybe type" "temp"
          (667134 'move' call_tmp[667131](144805 call _dom _mt[243] result[144573]))
          Forall {
            induction variables:
              
              unknown ri[144832] "index var" "insert auto destroy"
              
              unknown src[144834] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667131]
              ir[144557]
            shadow variables:
            other variables
              forall body
            {
              unknown r[144815] "dead at end of block" "ref var"
              unknown call_tmp[667136] "expr temp" "maybe param" "maybe type" "temp"
              (667139 'move' call_tmp[667136](415919 'may be local access' result[144573] ri[144832] chpl__staticAutoLocalCheckSym[415908] 1))
              (543511 'move' r[144815](543510 'addr of' call_tmp[667136]))
              (144818 'end of statement')
              unknown copy[144821] "dead at end of block" "no auto destroy"
              (543513 'init var' copy[144821] src[144834])
              (144824 'end of statement' result[144573] ri[144832] src[144834])
              (144829 '=' r[144815] copy[144821])
              (481255 'end of statement' r[144815] copy[144821])
            }
          }
        }
        {
          unknown call_tmp[667143] "expr temp" "maybe param" "maybe type" "temp"
          (667146 'move' call_tmp[667143](415904 call _dom _mt[243] result[144573]))
          Forall {
            induction variables:
              
              unknown ri[415899] "index var" "insert auto destroy"
              
              unknown src[415901] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667143]
              ir[144557]
            shadow variables:
            other variables
              forall body
            {
              unknown r[415885] "dead at end of block" "ref var"
              unknown call_tmp[667148] "expr temp" "maybe param" "maybe type" "temp"
              (667151 'move' call_tmp[667148](415887 call result[144573] ri[415899]))
              (543516 'move' r[415885](543515 'addr of' call_tmp[667148]))
              (415890 'end of statement')
              unknown copy[415891] "dead at end of block" "no auto destroy"
              (543518 'init var' copy[415891] src[415901])
              (415894 'end of statement' result[144573] ri[415899] src[415901])
              (415895 '=' r[415885] copy[415891])
              (481261 'end of statement' r[415885] copy[415891])
            }
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144861] "index var" "insert auto destroy"
            
            unknown src[144863] "index var" "insert auto destroy"
          iterated expressions:
            result[144573]
            ir[144557]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144849] "dead at end of block" "no auto destroy"
            (543520 'init var' copy[144849] src[144863])
            (144852 'end of statement' src[144863])
            (144858 '=' r[144861] copy[144849])
            (481265 'end of statement' r[144861] copy[144849])
          }
        }
      }
    }
    unknown call_tmp[667155] "expr temp" "maybe param" "maybe type" "temp"
    (667158 'move' call_tmp[667155](144878 call _value _mt[243] result[144573]))
    (144885 call(144881 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[667155]))
    (481268 'end of statement' result[144573])
    (519692 'move' ret[519687](519691 'deref' result[144573]))
    gotoReturn _end_chpl__initCopy_shapeHelp[519685] _end_chpl__initCopy_shapeHelp[519685]
    (481270 'end of statement' result[144573])
    label _end_chpl__initCopy_shapeHelp[519685]
    (519689 return ret[519687])
  }
  function chpl__throwErrorUnchecked[144900](in arg e[144897] :
  (144895 call _owned[30](?) Error[167984])) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    unknown call_tmp[667162] "expr temp" "maybe param" "maybe type" "temp"
    (667165 'move' call_tmp[667162](468077 call chpl_fix_thrown_error e[144897]))
    (144903 'throw' call_tmp[667162])
    (519696 return _void[55])
  }
  function chpl__initCopy[144914](arg ir[144911]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519700] "RVV" "temp"
    unknown call_tmp[667167] "maybe param" "maybe type" "temp"
    (667170 'move' call_tmp[667167](144919 call chpl_iteratorHasRangeShape ir[144911]))
    unknown shapeful[144920] "dead at end of block" "param"
    (543522 'init var' shapeful[144920] call_tmp[667167])
    (144923 'end of statement')
    unknown r[144937] "dead at end of block"
    unknown tmp[568447] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568448] "maybe param" "temp"
    (568453 'move' tmp[568448](568451 call _cond_test shapeful[144920]))
    if tmp[568448]
    {
      unknown tmp[568455] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568457 'move' tmp[568455](144927 call _shape_ _mt[243] ir[144911]))
      (568462 'move' tmp[568447](568459 '_paramFoldLogical' tmp[568448] tmp[568455]))
    }
    {
      unknown tmp[568464] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568466 'move' tmp[568464](144932 call chpl_build_bounded_range 1 0))
      (568471 'move' tmp[568447](568468 '_paramFoldLogical' tmp[568448] tmp[568464]))
    }
    (543524 'init var' r[144937] tmp[568447])
    (144940 'end of statement')
    unknown i[144942] "dead at end of block"
    (543526 'init var' i[144942] 0)
    (144945 'end of statement')
    unknown call_tmp[667176] "expr temp" "maybe param" "maybe type" "temp"
    (667179 'move' call_tmp[667176](144947 call size _mt[243] r[144937]))
    unknown call_tmp[667181] "maybe param" "maybe type" "temp"
    (667184 'move' call_tmp[667181](144951 call _cast size_t[20657] call_tmp[667176]))
    unknown size[144953] "dead at end of block"
    (543528 'init var' size[144953] call_tmp[667181])
    (144956 'end of statement')
    unknown call_tmp[667186] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667189 'move' call_tmp[667186](144959 'typeof' ir[144911]))
    unknown elemType[144962] "dead at end of block" "type variable"(144961 call iteratorToArrayElementType call_tmp[667186])
    unknown call_tmp[667191] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667194 'move' call_tmp[667191](543532 'typeof' ir[144911]))
    (543534 'move' elemType[144962](543531 call iteratorToArrayElementType call_tmp[667191]))
    unknown call_tmp[667196] "maybe param" "maybe type" "temp"
    (667199 'move' call_tmp[667196](144968 call _ddata[11696](?) elemType[144962]))
    unknown data[144970] "dead at end of block"
    (543536 'init var' data[144970] nil[44] call_tmp[667196])
    (144973 'end of statement')
    unknown callPostAlloc[144975] "dead at end of block"
    (543538 'default init var' callPostAlloc[144975] bool[10])
    (144978 'end of statement')
    unknown subloc[144980] "dead at end of block"
    (543540 'init var' subloc[144980] c_sublocid_none[89873])
    (144983 'end of statement')
    unknown call_tmp[667201] "expr temp" "maybe param" "maybe type" "temp"
    (667204 'move' call_tmp[667201](144986 call > size[144953] 0))
    unknown call_tmp[667206] "expr temp" "maybe param" "maybe type" "temp"
    (667209 'move' call_tmp[667206](144999 call _cond_test call_tmp[667201]))
    if call_tmp[667206]
    {
      unknown call_tmp[667211] "expr temp" "maybe param" "maybe type" "temp"
      (667214 'move' call_tmp[667211](144994 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
      (144995 call = data[144970] call_tmp[667211])
      (481275 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145147] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145148] "expr temp" "temp"
          (145157 'move' _iterator[145148](145155 call _getIterator ir[144911]))
          Defer
          {
            {
              (145173 call _freeIterator _iterator[145148])
            }
          }
          { scopeless type
            (145162 'move' _indexOfInterest[145147](145159 call iteratorIndex _iterator[145148]))
          }
          ForLoop[145149]
          {
            unknown elt[145166] "index var" "insert auto destroy"
            (481281 'end of statement')
            (145168 'move' elt[145166] _indexOfInterest[145147])
            (481282 'end of statement' elt[145166])
            {
              unknown call_tmp[667216] "maybe param" "maybe type" "temp"
              (667219 'move' call_tmp[667216](145008 call chpl__initCopy elt[145166]))
              unknown eltCopy[145010] "dead at end of block" "no auto destroy" "no copy"
              (543542 'init var' eltCopy[145010] call_tmp[667216])
              (145013 'end of statement' elt[145166])
              unknown call_tmp[667221] "expr temp" "maybe param" "maybe type" "temp"
              (667224 'move' call_tmp[667221](145017 call >= i[144942] size[144953]))
              unknown call_tmp[667226] "expr temp" "maybe param" "maybe type" "temp"
              (667229 'move' call_tmp[667226](145129 call _cond_test call_tmp[667221]))
              if call_tmp[667226]
              {
                unknown oldSize[145020] "dead at end of block"
                (543544 'init var' oldSize[145020] size[144953])
                (145023 'end of statement')
                unknown oldData[145026] "dead at end of block"
                (543546 'init var' oldData[145026] data[144970])
                (145029 'end of statement' size[144953] data[144970])
                unknown call_tmp[667231] "expr temp" "maybe param" "maybe type" "temp"
                (667234 'move' call_tmp[667231](145032 call == size[144953] 0))
                unknown call_tmp[667236] "expr temp" "maybe param" "maybe type" "temp"
                (667239 'move' call_tmp[667236](145047 call _cond_test call_tmp[667231]))
                if call_tmp[667236]
                {
                  (145036 call = size[144953] 4)
                  (481287 'end of statement' size[144953])
                }
                {
                  unknown call_tmp[667241] "expr temp" "maybe param" "maybe type" "temp"
                  (667244 'move' call_tmp[667241](145042 call * 2 size[144953]))
                  (145044 call = size[144953] call_tmp[667241])
                  (481289 'end of statement' size[144953] size[144953])
                }
                unknown call_tmp[667246] "expr temp" "maybe param" "maybe type" "temp"
                (667249 'move' call_tmp[667246](145059 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
                (145060 call = data[144970] call_tmp[667246])
                (481292 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
                {
                  unknown _indexOfInterest[145083] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145084] "expr temp" "temp"
                  unknown call_tmp[667251] "expr temp" "maybe param" "maybe type" "temp"
                  (667254 'move' call_tmp[667251](145100 call chpl_direct_counted_range_iter 0 oldSize[145020]))
                  (145093 'move' _iterator[145084](145091 call _getIterator call_tmp[667251]))
                  Defer
                  {
                    {
                      (145116 call _freeIterator _iterator[145084])
                    }
                  }
                  { scopeless type
                    (145105 'move' _indexOfInterest[145083](145102 call iteratorIndex _iterator[145084]))
                  }
                  ForLoop[145085]
                  {
                    unknown i[145109] "index var" "insert auto destroy"
                    (481298 'end of statement')
                    (145111 'move' i[145109] _indexOfInterest[145083])
                    (481299 'end of statement' i[145109])
                    {
                      unknown call_tmp[667256] "expr temp" "maybe param" "maybe type" "temp"
                      (667259 'move' call_tmp[667256](145075 call data[144970] i[145109]))
                      unknown call_tmp[667261] "expr temp" "maybe param" "maybe type" "temp"
                      (667264 'move' call_tmp[667261](145079 call oldData[145026] i[145109]))
                      (145080 '=' call_tmp[667256] call_tmp[667261])
                      (481301 'end of statement' data[144970] i[145109] oldData[145026] i[145109])
                    }
                    label _continueLabel[145088]
                    _indexOfInterest[145083]
                    _iterator[145084]
                  }
                  label _breakLabel[145089]
                }
                (145127 call _ddata_free oldData[145026] oldSize[145020])
                (481306 'end of statement' oldData[145026] oldSize[145020])
              }
              unknown call_tmp[667266] "expr temp" "maybe param" "maybe type" "temp"
              (667269 'move' call_tmp[667266](145138 call data[144970] i[144942]))
              (145140 '=' call_tmp[667266] eltCopy[145010])
              (481309 'end of statement' data[144970] i[144942] eltCopy[145010])
              (145144 call += i[144942] 1)
              (481313 'end of statement' i[144942])
            }
            label _continueLabel[145152]
            _indexOfInterest[145147]
            _iterator[145148]
          }
          label _breakLabel[145153]
        }
      }
    }
    Catch e : Error
    {
      unknown call_tmp[667271] "maybe param" "maybe type" "temp"
      (667274 'move' call_tmp[667271](354361 'current error'))
      unknown tmp[354358] "dead at end of block" "temp"
      (543548 'init var' tmp[354358] call_tmp[667271])
      unknown call_tmp[667276] "expr temp" "maybe param" "maybe type" "temp"
      (667279 'move' call_tmp[667276](354365 'to non nilable class' tmp[354358]))
      unknown call_tmp[667281] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (667284 'move' call_tmp[667281](747911 'new' _owned[30](?) call_tmp[667276]))
      unknown e[354364] "dead at end of block"
      (543550 'init var' e[354364] call_tmp[667281])
      (481315 'end of statement')
      {
        {
          unknown _indexOfInterest[145202] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145203] "expr temp" "temp"
          unknown call_tmp[667286] "expr temp" "maybe param" "maybe type" "temp"
          (667289 'move' call_tmp[667286](145217 call - i[144942] 1))
          unknown call_tmp[667291] "expr temp" "maybe param" "maybe type" "temp"
          (667294 'move' call_tmp[667291](145220 call chpl_direct_range_iter 0 call_tmp[667286] 1))
          (145212 'move' _iterator[145203](145210 call _getIterator call_tmp[667291]))
          Defer
          {
            {
              (145236 call _freeIterator _iterator[145203])
            }
          }
          { scopeless type
            (145225 'move' _indexOfInterest[145202](145222 call iteratorIndex _iterator[145203]))
          }
          ForLoop[145204]
          {
            unknown j[145229] "index var" "insert auto destroy"
            (481317 'end of statement')
            (145231 'move' j[145229] _indexOfInterest[145202])
            (481318 'end of statement' j[145229])
            {
              unknown call_tmp[667296] "expr temp" "maybe param" "maybe type" "temp"
              (667299 'move' call_tmp[667296](145197 call data[144970] j[145229]))
              (145199 call chpl__autoDestroy call_tmp[667296])
              (481320 'end of statement' data[144970] j[145229])
            }
            label _continueLabel[145207]
            _indexOfInterest[145202]
            _iterator[145203]
          }
          label _breakLabel[145208]
        }
        (145248 call _ddata_free data[144970] size[144953])
        (481323 'end of statement' data[144970] size[144953])
        (145253 call chpl__throwErrorUnchecked e[354364])
        (481326 'end of statement' e[354364])
      }
    }
    unknown tmp[427106] "maybe param" "temp"
    (427117 'move' tmp[427106] shapeful[144920])
    unknown call_tmp[667301] "expr temp" "maybe param" "maybe type" "temp"
    (667304 'move' call_tmp[667301](427119 call _cond_invalid tmp[427106]))
    if call_tmp[667301]
    {
      (427122 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568478] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568479] "maybe param" "temp"
    unknown call_tmp[667306] "expr temp" "maybe param" "maybe type" "temp"
    (667309 'move' call_tmp[667306](427107 call isTrue tmp[427106]))
    (568484 'move' tmp[568479](568482 call _cond_test call_tmp[667306]))
    if tmp[568479]
    {
      unknown tmp[568486] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667313] "expr temp" "maybe param" "maybe type" "temp"
      (667316 'move' call_tmp[667313](145261 call size _mt[243] r[144937]))
      unknown call_tmp[667318] "expr temp" "maybe param" "maybe type" "temp"
      (667321 'move' call_tmp[667318](145264 call < i[144942] call_tmp[667313]))
      (568488 'move' tmp[568486](427110 call isTrue call_tmp[667318]))
      (568493 'move' tmp[568478](568490 '_paramFoldLogical' tmp[568479] tmp[568486]))
    }
    {
      (568498 'move' tmp[568478](568495 '_paramFoldLogical' tmp[568479] 0))
    }
    unknown call_tmp[667323] "expr temp" "maybe param" "maybe type" "temp"
    (667326 'move' call_tmp[667323](145276 call _cond_test tmp[568478]))
    if call_tmp[667323]
    {
      unknown call_tmp[667328] "expr temp" "maybe param" "maybe type" "temp"
      (667331 'move' call_tmp[667328](145271 call # r[144937] i[144942]))
      (145273 call = r[144937] call_tmp[667328])
      (481329 'end of statement' r[144937] r[144937] i[144942])
    }
    unknown call_tmp[667333] "expr temp" "maybe param" "maybe type" "temp"
    (667336 'move' call_tmp[667333](145282 call ! shapeful[144920]))
    unknown call_tmp[667338] "expr temp" "maybe param" "maybe type" "temp"
    (667341 'move' call_tmp[667338](145305 call _cond_test call_tmp[667333]))
    if call_tmp[667338]
    {
      unknown tmp[568505] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568506] "maybe param" "temp"
      unknown call_tmp[667343] "expr temp" "maybe param" "maybe type" "temp"
      (667346 'move' call_tmp[667343](145287 call == i[144942] 0))
      (568511 'move' tmp[568506](568509 call _cond_test call_tmp[667343]))
      if tmp[568506]
      {
        unknown tmp[568513] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (568515 'move' tmp[568513](145291 call chpl_build_bounded_range 1 0))
        (568520 'move' tmp[568505](568517 '_paramFoldLogical' tmp[568506] tmp[568513]))
      }
      {
        unknown tmp[568522] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[667348] "expr temp" "maybe param" "maybe type" "temp"
        (667351 'move' call_tmp[667348](145294 call chpl_build_low_bounded_range capturedIteratorLowBound[115341]))
        (568524 'move' tmp[568522](145297 call # call_tmp[667348] i[144942]))
        (568529 'move' tmp[568505](568526 '_paramFoldLogical' tmp[568506] tmp[568522]))
      }
      (145302 call = r[144937] tmp[568505])
      (481333 'end of statement' r[144937] i[144942] i[144942])
    }
    unknown call_tmp[667353] "maybe param" "maybe type" "temp"
    (667356 'move' call_tmp[667353](145312 call chpl__buildDomainExpr r[144937]))
    unknown D[145314] "dead at end of block" "insert auto destroy"
    (543552 'init var' D[145314] call_tmp[667353])
    (145317 'end of statement' r[144937] elemType[144962] r[144937])
    unknown call_tmp[667358] "expr temp" "maybe param" "maybe type" "temp"
    (667361 'move' call_tmp[667358](145320 call != data[144970] nil[44]))
    unknown call_tmp[667363] "expr temp" "maybe param" "maybe type" "temp"
    (667366 'move' call_tmp[667363](145447 call _cond_test call_tmp[667358]))
    if call_tmp[667363]
    {
      unknown call_tmp[667368] "expr temp" "maybe param" "maybe type" "temp"
      (667371 'move' call_tmp[667368](145329 call _cond_test callPostAlloc[144975]))
      if call_tmp[667368]
      {
        (145327 call _ddata_allocate_postalloc data[144970] size[144953])
        (481338 'end of statement' data[144970] size[144953])
      }
      { scopeless type
        unknown call_type_tmp[492344] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667373] "expr temp" "maybe param" "maybe type" "temp"
        (667376 'move' call_tmp[667373](145344 call data[144970] 0))
        (492348 'move' call_type_tmp[492344](145345 'typeof' call_tmp[667373]))
      }
      unknown call_tmp[667380] "expr temp" "maybe param" "maybe type" "temp"
      (667383 'move' call_tmp[667380](145350 call _cast int(64)[13] size[144953]))
      unknown call_tmp[667385] "maybe param" "maybe type" "temp"
      (667388 'move' call_tmp[667385](145352 call(145338 call (partial) buildArrayWith _mt[243] D[145314]) call_type_tmp[492344] data[144970] call_tmp[667380]))
      unknown A[145353] "dead at end of block"
      (543554 'init var' A[145353] call_tmp[667385])
      (145356 'end of statement' D[145314] data[144970] data[144970] size[144953])
      { scopeless type
        unknown call_type_tmp[492350] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667390] "expr temp" "maybe param" "maybe type" "temp"
        (667393 'move' call_tmp[667390](145366 call data[144970] 0))
        (492354 'move' call_type_tmp[492350](145367 'typeof' call_tmp[667390]))
      }
      unknown call_tmp[667397] "expr temp" "maybe param" "maybe type" "temp"
      (667400 'move' call_tmp[667397](145359 call _value _mt[243] A[145353]))
      (145368 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[667397] call_type_tmp[492350])
      (481345 'end of statement' A[145353] data[144970])
      unknown call_tmp[667404] "expr temp" "maybe param" "maybe type" "temp"
      (667407 'move' call_tmp[667404](145371 call _value _mt[243] A[145353]))
      unknown call_tmp[667411] "expr temp" "maybe param" "maybe type" "temp"
      (667414 'move' call_tmp[667411](145374 call _decEltRefCounts _mt[243] call_tmp[667404]))
      (145378 call = call_tmp[667411] 0)
      (481348 'end of statement' A[145353])
      (145400 'auto destroy runtime type' elemType[144962])
      (481350 'end of statement' elemType[144962])
      (519705 'move' ret[519700](519704 'deref' A[145353]))
      gotoReturn _end_chpl__initCopy[519698] _end_chpl__initCopy[519698]
      (481352 'end of statement' A[145353])
    }
    {
      unknown call_tmp[667416] "expr temp" "maybe param" "maybe type" "temp"
      (667419 'move' call_tmp[667416](145411 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
      (145412 call = data[144970] call_tmp[667416])
      (481354 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
      unknown call_tmp[667421] "expr temp" "maybe param" "maybe type" "temp"
      (667424 'move' call_tmp[667421](145423 call _cond_test callPostAlloc[144975]))
      if call_tmp[667421]
      {
        (145421 call _ddata_allocate_postalloc data[144970] size[144953])
        (481359 'end of statement' data[144970] size[144953])
      }
      unknown call_tmp[667428] "expr temp" "maybe param" "maybe type" "temp"
      (667431 'move' call_tmp[667428](145437 call _cast int(64)[13] size[144953]))
      unknown call_tmp[667433] "maybe param" "maybe type" "temp"
      (667436 'move' call_tmp[667433](145439 call(145429 call (partial) buildArrayWith _mt[243] D[145314]) elemType[144962] data[144970] call_tmp[667428]))
      unknown A[145440] "dead at end of block"
      (543556 'init var' A[145440] call_tmp[667433])
      (145443 'end of statement' D[145314] elemType[144962] data[144970] size[144953])
      (519710 'move' ret[519700](519709 'deref' A[145440]))
      gotoReturn _end_chpl__initCopy[519698] _end_chpl__initCopy[519698]
      (481366 'end of statement' A[145440])
    }
    label _end_chpl__initCopy[519698]
    (519702 return ret[519700])
  }
  (355142 'used modules list'(113680 'use' ChapelBase[307])(113684 'use' ChapelTuple[56188])(113687 'use' ChapelLocale[89847])(113690 'use' ArrayViewSlice[189732])(113693 'use' ArrayViewRankChange[191488])(113696 'use' ArrayViewReindex[196078])(113699 'import' Reflection[224901])(113702 'use' ChapelDebugPrint[188155])(113705 'use' SysCTypes[20943]))
}