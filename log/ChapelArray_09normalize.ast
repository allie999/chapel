AST dump for ChapelArray after pass normalize.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint SysCTypes HaltWrappers Sort IO 

{
  function chpl__init_ChapelArray[415981]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[648147] "expr temp" "maybe param" "maybe type" "temp"
    (648150 'move' call_tmp[648147](113704 call chpl__processorAtomicType int(64)[13]))
    (542589 'default init var' numPrivateObjects[113705] call_tmp[648147])
    (113708 'end of statement')
    unknown call_tmp[648152] "maybe param" "maybe type" "temp"
    (648155 'move' call_tmp[648152](113710 call - 1))
    (542591 'init var' nullPid[113712] call_tmp[648152])
    (113715 'end of statement')
    (542593 'init var' debugBulkTransfer[113717] 0)
    (113720 'end of statement')
    (542595 'init var' useBulkTransfer[113722] 1)
    (113725 'end of statement')
    (542597 'init var' useBulkTransferStride[113727] 1)
    (113730 'end of statement')
    (542599 'init var' useBulkPtrTransfer[113732] useBulkTransfer[113722])
    (113735 'end of statement')
    (542601 'init var' PODValAccess[113737] 1)
    (113740 'end of statement')
    (542603 'init var' useBulkTransferDist[113742] 0)
    (113745 'end of statement')
    (542605 'init var' arrayAsVecGrowthFactor[113749] 1.5)
    (113752 'end of statement')
    (542607 'init var' debugArrayAsVec[113754] 0)
    (113757 'end of statement')
    (542631 'init var' CHPL_WARN_DOMAIN_LITERAL[115325] "unset")
    (115328 'end of statement')
    (542633 'init var' arrayLiteralLowBound[115330] defaultLowBound[361])
    (115333 'end of statement')
    (542635 'init var' capturedIteratorLowBound[115335] defaultLowBound[361])
    (115338 'end of statement')
    (519673 return _void[55])
  }
  unknown numPrivateObjects[113705] "dead at end of block" "insert auto destroy" "no doc"
  unknown nullPid[113712] "dead at end of block" "no doc" "param"
  unknown debugBulkTransfer[113717] "config" "no doc" "param"
  unknown useBulkTransfer[113722] "config" "no doc" "param"
  unknown useBulkTransferStride[113727] "config" "no doc" "param"
  unknown useBulkPtrTransfer[113732] "config" "no doc" "param"
  unknown PODValAccess[113737] "config" "no doc" "param"
  unknown useBulkTransferDist[113742] "config" "no doc" "param"
  unknown arrayAsVecGrowthFactor[113749] "config" "no doc" "param"
  unknown debugArrayAsVec[113754] "config" "no doc" "param"
  function _isPrivatized[113762](arg value[113760]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515677] "RVV" "param" "temp"
    unknown tmp[424065] "maybe param" "temp"
    (424076 'move' tmp[424065](113765 call ! 0))
    unknown call_tmp[648157] "expr temp" "maybe param" "maybe type" "temp"
    (648160 'move' call_tmp[648157](424078 call _cond_invalid tmp[424065]))
    if call_tmp[648157]
    {
      (424081 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564200] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564201] "maybe param" "temp"
    unknown call_tmp[648162] "expr temp" "maybe param" "maybe type" "temp"
    (648165 'move' call_tmp[648162](424066 call isTrue tmp[424065]))
    (564206 'move' tmp[564201](564204 call _cond_test call_tmp[648162]))
    if tmp[564201]
    {
      unknown tmp[424086] "maybe param" "temp"
      unknown tmp[424107] "maybe param" "temp"
      (424118 'move' tmp[424107] 1)
      unknown call_tmp[648167] "expr temp" "maybe param" "maybe type" "temp"
      (648170 'move' call_tmp[648167](424120 call _cond_invalid tmp[424107]))
      if call_tmp[648167]
      {
        (424123 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[564146] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564147] "maybe param" "temp"
      unknown call_tmp[648172] "expr temp" "maybe param" "maybe type" "temp"
      (648175 'move' call_tmp[648172](424108 call isTrue tmp[424107]))
      (564152 'move' tmp[564147](564150 call _cond_test call_tmp[648172]))
      if tmp[564147]
      {
        unknown tmp[564154] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648177] "expr temp" "maybe param" "maybe type" "temp"
        (648180 'move' call_tmp[648177](113769 call postfix! value[113760]))
        unknown call_tmp[648184] "expr temp" "maybe param" "maybe type" "temp"
        (648187 'move' call_tmp[648184](113777 call(113773 call (partial) dsiSupportsPrivatization _mt[243] call_tmp[648177])))
        (564156 'move' tmp[564154](424111 call isTrue call_tmp[648184]))
        (564161 'move' tmp[564146](564158 '_paramFoldLogical' tmp[564147] tmp[564154]))
      }
      {
        (564166 'move' tmp[564146](564163 '_paramFoldLogical' tmp[564147] 0))
      }
      (424097 'move' tmp[424086] tmp[564146])
      unknown call_tmp[648189] "expr temp" "maybe param" "maybe type" "temp"
      (648192 'move' call_tmp[648189](424099 call _cond_invalid tmp[424086]))
      if call_tmp[648189]
      {
        (424102 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564173] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564174] "maybe param" "temp"
      unknown call_tmp[648194] "expr temp" "maybe param" "maybe type" "temp"
      (648197 'move' call_tmp[648194](424087 call isTrue tmp[424086]))
      (564179 'move' tmp[564174](564177 call _cond_test call_tmp[648194]))
      if tmp[564174]
      {
        (564184 'move' tmp[564173](564181 '_paramFoldLogical' tmp[564174] 1))
      }
      {
        unknown tmp[564186] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648199] "expr temp" "maybe param" "maybe type" "temp"
        (648202 'move' call_tmp[648199](113781 call postfix! value[113760]))
        unknown call_tmp[648206] "expr temp" "maybe param" "maybe type" "temp"
        (648209 'move' call_tmp[648206](113789 call(113785 call (partial) dsiRequiresPrivatization _mt[243] call_tmp[648199])))
        (564188 'move' tmp[564186](424091 call isTrue call_tmp[648206]))
        (564193 'move' tmp[564173](564190 '_paramFoldLogical' tmp[564174] tmp[564186]))
      }
      unknown tmp[564208] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564210 'move' tmp[564208](424069 call isTrue tmp[564173]))
      (564215 'move' tmp[564200](564212 '_paramFoldLogical' tmp[564201] tmp[564208]))
    }
    {
      (564220 'move' tmp[564200](564217 '_paramFoldLogical' tmp[564201] 0))
    }
    (515682 'move' ret[515677](515681 'deref' tmp[564200]))
    (515679 return ret[515677])
  }
  function _newPrivatizedClass[113803](arg value[113801]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515688] "RVV" "temp"
    unknown call_tmp[648213] "maybe param" "maybe type" "temp"
    (648216 'move' call_tmp[648213](113814 call(113809 call (partial) fetchAdd _mt[243] numPrivateObjects[113705]) 1))
    const n[113815] "dead at end of block" "const" "insert auto destroy"
    (542609 'init var' n[113815] call_tmp[648213])
    (113818 'end of statement')
    unknown call_tmp[648218] "expr temp" "maybe param" "maybe type" "temp"
    (648221 'move' call_tmp[648218](359024 call here[90435]))
    unknown call_tmp[648225] "maybe param" "maybe type" "temp"
    (648228 'move' call_tmp[648225](113821 call id _mt[243] call_tmp[648218]))
    const hereID[113824] "dead at end of block" "const" "insert auto destroy"
    (542611 'init var' hereID[113824] call_tmp[648225])
    (113827 'end of statement')
    unknown call_tmp[648232] "maybe param" "maybe type" "temp"
    (648235 'move' call_tmp[648232](113835 call(113831 call (partial) dsiGetPrivatizeData _mt[243] value[113801])))
    const privatizeData[113836] "dead at end of block" "const" "insert auto destroy"
    (542613 'init var' privatizeData[113836] call_tmp[648232])
    (113839 'end of statement')
    const tmp[113856] "const" "temp"
    unknown call_tmp[648237] "expr temp" "maybe param" "maybe type" "temp"
    (648240 'move' call_tmp[648237](113843 call Locales[113656] 0))
    unknown call_tmp[648242] "expr temp" "maybe param" "maybe type" "temp"
    (648245 'move' call_tmp[648242](113853 '_wide_get_locale' call_tmp[648237]))
    (113858 'move' tmp[113856](113854 'deref' call_tmp[648242]))
    {
      (113851 call _newPrivatizedClassHelp value[113801] value[113801] n[113815] hereID[113824] privatizeData[113836])
      (479161 'end of statement' n[113815] hereID[113824] privatizeData[113836])
      (113861 'on block' 0 tmp[113856])
    }
    function _newPrivatizedClassHelp[113868](arg parentValue[113866]:_any[178](?), arg originalValue[113870]:_any[178](?), arg n[113872]:_any[178](?), arg hereID[113874]:_any[178](?), arg privatizeData[113876]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113879] "dead at end of block" "insert auto destroy"
      (542615 'init var' newValue[113879] originalValue[113870])
      (113882 'end of statement')
      unknown call_tmp[648247] "expr temp" "maybe param" "maybe type" "temp"
      (648250 'move' call_tmp[648247](359027 call here[90435]))
      unknown call_tmp[648254] "expr temp" "maybe param" "maybe type" "temp"
      (648257 'move' call_tmp[648254](113886 call id _mt[243] call_tmp[648247]))
      unknown call_tmp[648259] "expr temp" "maybe param" "maybe type" "temp"
      (648262 'move' call_tmp[648259](113889 call != hereID[113874] call_tmp[648254]))
      unknown call_tmp[648264] "expr temp" "maybe param" "maybe type" "temp"
      (648267 'move' call_tmp[648264](113952 call _cond_test call_tmp[648259]))
      if call_tmp[648264]
      {
        unknown call_tmp[648271] "expr temp" "maybe param" "maybe type" "temp"
        (648274 'move' call_tmp[648271](113900 call(113895 call (partial) dsiPrivatize _mt[243] parentValue[113866]) privatizeData[113876]))
        (113901 call = newValue[113879] call_tmp[648271])
        (479165 'end of statement' newValue[113879])
        (113925 'chpl_newPrivatizedClass' newValue[113879] n[113872])
        (479167 'end of statement' newValue[113879])
        unknown call_tmp[648278] "expr temp" "maybe param" "maybe type" "temp"
        (648281 'move' call_tmp[648278](113930 call pid _mt[243] newValue[113879]))
        (113934 call = call_tmp[648278] n[113872])
        (479169 'end of statement' newValue[113879])
      }
      {
        (113941 'chpl_newPrivatizedClass' newValue[113879] n[113872])
        (479171 'end of statement' newValue[113879])
        unknown call_tmp[648285] "expr temp" "maybe param" "maybe type" "temp"
        (648288 'move' call_tmp[648285](113945 call pid _mt[243] newValue[113879]))
        (113949 call = call_tmp[648285] n[113872])
        (479173 'end of statement' newValue[113879])
      }
      {
        const _cobeginCount[114039] "const" "end count" "temp"
        (114060 'move' _cobeginCount[114039](114057 call _endCountAlloc 1))
        (114052 call _upEndCount _cobeginCount[114039] 1 2)
        (479175 'end of statement')
        {
          unknown call_tmp[648292] "expr temp" "maybe param" "maybe type" "temp"
          (648295 'move' call_tmp[648292](113959 call left _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648299] "expr temp" "maybe param" "maybe type" "temp"
          (648302 'move' call_tmp[648299](113962 call _instance _mt[243] call_tmp[648292]))
          unknown call_tmp[648304] "expr temp" "maybe param" "maybe type" "temp"
          (648307 'move' call_tmp[648304](113966 call != call_tmp[648299] nil[44]))
          unknown call_tmp[648309] "expr temp" "maybe param" "maybe type" "temp"
          (648312 'move' call_tmp[648309](113992 call _cond_test call_tmp[648304]))
          if call_tmp[648309]
          {
            const tmp[113984] "const" "temp"
            unknown call_tmp[648316] "expr temp" "maybe param" "maybe type" "temp"
            (648319 'move' call_tmp[648316](113969 call left _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648321] "expr temp" "maybe param" "maybe type" "temp"
            (648324 'move' call_tmp[648321](113981 '_wide_get_locale' call_tmp[648316]))
            (113986 'move' tmp[113984](113982 'deref' call_tmp[648321]))
            {
              (113979 call _newPrivatizedClassHelp newValue[113879] originalValue[113870] n[113872] hereID[113874] privatizeData[113876])
              (479176 'end of statement' newValue[113879])
              (113989 'on block' 0 tmp[113984])
            }
          }
          (114042 call _downEndCount _cobeginCount[114039] nil[44])
          (114041 'cobegin block')
        }
        {
          unknown call_tmp[648328] "expr temp" "maybe param" "maybe type" "temp"
          (648331 'move' call_tmp[648328](114001 call right _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648335] "expr temp" "maybe param" "maybe type" "temp"
          (648338 'move' call_tmp[648335](114004 call _instance _mt[243] call_tmp[648328]))
          unknown call_tmp[648340] "expr temp" "maybe param" "maybe type" "temp"
          (648343 'move' call_tmp[648340](114008 call != call_tmp[648335] nil[44]))
          unknown call_tmp[648345] "expr temp" "maybe param" "maybe type" "temp"
          (648348 'move' call_tmp[648345](114034 call _cond_test call_tmp[648340]))
          if call_tmp[648345]
          {
            const tmp[114026] "const" "temp"
            unknown call_tmp[648352] "expr temp" "maybe param" "maybe type" "temp"
            (648355 'move' call_tmp[648352](114011 call right _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648357] "expr temp" "maybe param" "maybe type" "temp"
            (648360 'move' call_tmp[648357](114023 '_wide_get_locale' call_tmp[648352]))
            (114028 'move' tmp[114026](114024 'deref' call_tmp[648357]))
            {
              (114021 call _newPrivatizedClassHelp newValue[113879] originalValue[113870] n[113872] hereID[113874] privatizeData[113876])
              (479179 'end of statement' newValue[113879])
              (114031 'on block' 0 tmp[114026])
            }
          }
          (114048 call _downEndCount _cobeginCount[114039] nil[44])
          (114047 'cobegin block')
        }
        Defer
        {
          {
            (114063 call _endCountFree _cobeginCount[114039])
          }
        }
        (114068 call _waitEndCount _cobeginCount[114039] 1 2)
      }
      (515684 return _void[55])
    }
    (515694 'move' ret[515688](515693 'coerce' n[113815] int(64)[13]))
    gotoReturn _end__newPrivatizedClass[515686] _end__newPrivatizedClass[515686]
    (479184 'end of statement' n[113815])
    label _end__newPrivatizedClass[515686]
    (515690 return ret[515688])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[114087](arg pid[114084]:int(64)[13], arg original[114090]:object[367044](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648362] "expr temp" "maybe param" "maybe type" "temp"
    (648365 'move' call_tmp[648362](114096 call == pid[114084] nullPid[113712]))
    unknown call_tmp[648367] "expr temp" "maybe param" "maybe type" "temp"
    (648370 'move' call_tmp[648367](114100 call _cond_test call_tmp[648362]))
    if call_tmp[648367]
    {
      gotoReturn _end__freePrivatizedClass[515702] _end__freePrivatizedClass[515702]
    }
    const tmp[114120] "const" "temp"
    unknown call_tmp[648372] "expr temp" "maybe param" "maybe type" "temp"
    (648375 'move' call_tmp[648372](114109 call Locales[113656] 0))
    unknown call_tmp[648377] "expr temp" "maybe param" "maybe type" "temp"
    (648380 'move' call_tmp[648377](114117 '_wide_get_locale' call_tmp[648372]))
    (114122 'move' tmp[114120](114118 'deref' call_tmp[648377]))
    {
      {
        (114114 call _freePrivatizedClassHelp pid[114084] original[114090])
      }
      (114125 'on block' 0 tmp[114120])
    }
    function _freePrivatizedClassHelp[114132](arg pid[114130]:_any[178](?), arg original[114134]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown call_tmp[648382] "maybe param" "maybe type" "temp"
      (648385 'move' call_tmp[648382](114141 call chpl_getPrivatizedCopy unmanaged object[415450] pid[114130]))
      unknown prv[114142] "dead at end of block" "insert auto destroy"
      (542617 'init var' prv[114142] call_tmp[648382])
      (114145 'end of statement')
      unknown call_tmp[648387] "expr temp" "maybe param" "maybe type" "temp"
      (648390 'move' call_tmp[648387](114149 call != prv[114142] original[114134]))
      unknown call_tmp[648392] "expr temp" "maybe param" "maybe type" "temp"
      (648395 'move' call_tmp[648392](114156 call _cond_test call_tmp[648387]))
      if call_tmp[648392]
      {
        (114153 call chpl__delete prv[114142])
        (479188 'end of statement' prv[114142])
      }
      function chpl_clearPrivatizedClass[114167](arg pid[114164]:int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (515698 return _void[55])
      }
      (114174 call chpl_clearPrivatizedClass pid[114130])
      (479190 'end of statement')
      {
        const _cobeginCount[114249] "const" "end count" "temp"
        (114270 'move' _cobeginCount[114249](114267 call _endCountAlloc 1))
        (114262 call _upEndCount _cobeginCount[114249] 1 2)
        (479191 'end of statement')
        {
          unknown call_tmp[648399] "expr temp" "maybe param" "maybe type" "temp"
          (648402 'move' call_tmp[648399](114177 call left _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648406] "expr temp" "maybe param" "maybe type" "temp"
          (648409 'move' call_tmp[648406](114180 call _instance _mt[243] call_tmp[648399]))
          unknown call_tmp[648411] "expr temp" "maybe param" "maybe type" "temp"
          (648414 'move' call_tmp[648411](114184 call != call_tmp[648406] nil[44]))
          unknown call_tmp[648416] "expr temp" "maybe param" "maybe type" "temp"
          (648419 'move' call_tmp[648416](114207 call _cond_test call_tmp[648411]))
          if call_tmp[648416]
          {
            const tmp[114199] "const" "temp"
            unknown call_tmp[648423] "expr temp" "maybe param" "maybe type" "temp"
            (648426 'move' call_tmp[648423](114187 call left _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648428] "expr temp" "maybe param" "maybe type" "temp"
            (648431 'move' call_tmp[648428](114196 '_wide_get_locale' call_tmp[648423]))
            (114201 'move' tmp[114199](114197 'deref' call_tmp[648428]))
            {
              (114194 call _freePrivatizedClassHelp pid[114130] original[114134])
              (114204 'on block' 0 tmp[114199])
            }
          }
          (114252 call _downEndCount _cobeginCount[114249] nil[44])
          (114251 'cobegin block')
        }
        {
          unknown call_tmp[648435] "expr temp" "maybe param" "maybe type" "temp"
          (648438 'move' call_tmp[648435](114214 call right _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648442] "expr temp" "maybe param" "maybe type" "temp"
          (648445 'move' call_tmp[648442](114217 call _instance _mt[243] call_tmp[648435]))
          unknown call_tmp[648447] "expr temp" "maybe param" "maybe type" "temp"
          (648450 'move' call_tmp[648447](114221 call != call_tmp[648442] nil[44]))
          unknown call_tmp[648452] "expr temp" "maybe param" "maybe type" "temp"
          (648455 'move' call_tmp[648452](114244 call _cond_test call_tmp[648447]))
          if call_tmp[648452]
          {
            const tmp[114236] "const" "temp"
            unknown call_tmp[648459] "expr temp" "maybe param" "maybe type" "temp"
            (648462 'move' call_tmp[648459](114224 call right _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648464] "expr temp" "maybe param" "maybe type" "temp"
            (648467 'move' call_tmp[648464](114233 '_wide_get_locale' call_tmp[648459]))
            (114238 'move' tmp[114236](114234 'deref' call_tmp[648464]))
            {
              (114231 call _freePrivatizedClassHelp pid[114130] original[114134])
              (114241 'on block' 0 tmp[114236])
            }
          }
          (114258 call _downEndCount _cobeginCount[114249] nil[44])
          (114257 'cobegin block')
        }
        Defer
        {
          {
            (114273 call _endCountFree _cobeginCount[114249])
          }
        }
        (114278 call _waitEndCount _cobeginCount[114249] 1 2)
      }
      (515700 return _void[55])
    }
    label _end__freePrivatizedClass[515702]
    (515704 return _void[55])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114292](arg value[114290]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648471] "maybe param" "maybe type" "temp"
    (648474 'move' call_tmp[648471](114295 call pid _mt[243] value[114290]))
    const pid[114298] "dead at end of block" "const" "insert auto destroy"
    (542619 'init var' pid[114298] call_tmp[648471])
    (114301 'end of statement')
    unknown call_tmp[648476] "expr temp" "maybe param" "maybe type" "temp"
    (648479 'move' call_tmp[648476](359041 call here[90435]))
    unknown call_tmp[648483] "maybe param" "maybe type" "temp"
    (648486 'move' call_tmp[648483](114304 call id _mt[243] call_tmp[648476]))
    const hereID[114307] "dead at end of block" "const" "insert auto destroy"
    (542621 'init var' hereID[114307] call_tmp[648483])
    (114310 'end of statement')
    unknown call_tmp[648490] "maybe param" "maybe type" "temp"
    (648493 'move' call_tmp[648490](114318 call(114314 call (partial) dsiGetReprivatizeData _mt[243] value[114290])))
    const reprivatizeData[114319] "dead at end of block" "const" "insert auto destroy"
    (542623 'init var' reprivatizeData[114319] call_tmp[648490])
    (114322 'end of statement')
    const tmp[114339] "const" "temp"
    unknown call_tmp[648495] "expr temp" "maybe param" "maybe type" "temp"
    (648498 'move' call_tmp[648495](114326 call Locales[113656] 0))
    unknown call_tmp[648500] "expr temp" "maybe param" "maybe type" "temp"
    (648503 'move' call_tmp[648500](114336 '_wide_get_locale' call_tmp[648495]))
    (114341 'move' tmp[114339](114337 'deref' call_tmp[648500]))
    {
      (114334 call _reprivatizeHelp value[114290] value[114290] pid[114298] hereID[114307] reprivatizeData[114319])
      (479198 'end of statement' pid[114298] hereID[114307] reprivatizeData[114319])
      (114344 'on block' 0 tmp[114339])
    }
    function _reprivatizeHelp[114351](arg parentValue[114349]:_any[178](?), arg originalValue[114353]:_any[178](?), arg pid[114355]:_any[178](?), arg hereID[114357]:_any[178](?), arg reprivatizeData[114359]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114362] "dead at end of block" "insert auto destroy"
      (542625 'init var' newValue[114362] originalValue[114353])
      (114365 'end of statement')
      unknown call_tmp[648505] "expr temp" "maybe param" "maybe type" "temp"
      (648508 'move' call_tmp[648505](359044 call here[90435]))
      unknown call_tmp[648512] "expr temp" "maybe param" "maybe type" "temp"
      (648515 'move' call_tmp[648512](114369 call id _mt[243] call_tmp[648505]))
      unknown call_tmp[648517] "expr temp" "maybe param" "maybe type" "temp"
      (648520 'move' call_tmp[648517](114372 call != hereID[114357] call_tmp[648512]))
      unknown call_tmp[648522] "expr temp" "maybe param" "maybe type" "temp"
      (648525 'move' call_tmp[648522](114396 call _cond_test call_tmp[648517]))
      if call_tmp[648522]
      {
        unknown call_tmp[648527] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (648530 'move' call_tmp[648527](114377 'typeof' newValue[114362]))
        unknown call_tmp[648532] "expr temp" "maybe param" "maybe type" "temp"
        (648535 'move' call_tmp[648532](114380 call chpl_getPrivatizedCopy call_tmp[648527] pid[114355]))
        (114381 call = newValue[114362] call_tmp[648532])
        (479202 'end of statement' newValue[114362] newValue[114362])
        (114394 call(114388 call (partial) dsiReprivatize _mt[243] newValue[114362]) parentValue[114349] reprivatizeData[114359])
        (479205 'end of statement' newValue[114362])
      }
      {
        const _cobeginCount[114479] "const" "end count" "temp"
        (114500 'move' _cobeginCount[114479](114497 call _endCountAlloc 1))
        (114492 call _upEndCount _cobeginCount[114479] 1 2)
        (479207 'end of statement')
        {
          unknown call_tmp[648541] "expr temp" "maybe param" "maybe type" "temp"
          (648544 'move' call_tmp[648541](114401 call left _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648548] "expr temp" "maybe param" "maybe type" "temp"
          (648551 'move' call_tmp[648548](114404 call _instance _mt[243] call_tmp[648541]))
          unknown call_tmp[648553] "expr temp" "maybe param" "maybe type" "temp"
          (648556 'move' call_tmp[648553](114408 call != call_tmp[648548] nil[44]))
          unknown call_tmp[648558] "expr temp" "maybe param" "maybe type" "temp"
          (648561 'move' call_tmp[648558](114434 call _cond_test call_tmp[648553]))
          if call_tmp[648558]
          {
            const tmp[114426] "const" "temp"
            unknown call_tmp[648565] "expr temp" "maybe param" "maybe type" "temp"
            (648568 'move' call_tmp[648565](114411 call left _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648570] "expr temp" "maybe param" "maybe type" "temp"
            (648573 'move' call_tmp[648570](114423 '_wide_get_locale' call_tmp[648565]))
            (114428 'move' tmp[114426](114424 'deref' call_tmp[648570]))
            {
              (114421 call _reprivatizeHelp newValue[114362] originalValue[114353] pid[114355] hereID[114357] reprivatizeData[114359])
              (479208 'end of statement' newValue[114362])
              (114431 'on block' 0 tmp[114426])
            }
          }
          (114482 call _downEndCount _cobeginCount[114479] nil[44])
          (114481 'cobegin block')
        }
        {
          unknown call_tmp[648577] "expr temp" "maybe param" "maybe type" "temp"
          (648580 'move' call_tmp[648577](114441 call right _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648584] "expr temp" "maybe param" "maybe type" "temp"
          (648587 'move' call_tmp[648584](114444 call _instance _mt[243] call_tmp[648577]))
          unknown call_tmp[648589] "expr temp" "maybe param" "maybe type" "temp"
          (648592 'move' call_tmp[648589](114448 call != call_tmp[648584] nil[44]))
          unknown call_tmp[648594] "expr temp" "maybe param" "maybe type" "temp"
          (648597 'move' call_tmp[648594](114474 call _cond_test call_tmp[648589]))
          if call_tmp[648594]
          {
            const tmp[114466] "const" "temp"
            unknown call_tmp[648601] "expr temp" "maybe param" "maybe type" "temp"
            (648604 'move' call_tmp[648601](114451 call right _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648606] "expr temp" "maybe param" "maybe type" "temp"
            (648609 'move' call_tmp[648606](114463 '_wide_get_locale' call_tmp[648601]))
            (114468 'move' tmp[114466](114464 'deref' call_tmp[648606]))
            {
              (114461 call _reprivatizeHelp newValue[114362] originalValue[114353] pid[114355] hereID[114357] reprivatizeData[114359])
              (479211 'end of statement' newValue[114362])
              (114471 'on block' 0 tmp[114466])
            }
          }
          (114488 call _downEndCount _cobeginCount[114479] nil[44])
          (114487 'cobegin block')
        }
        Defer
        {
          {
            (114503 call _endCountFree _cobeginCount[114479])
          }
        }
        (114508 call _waitEndCount _cobeginCount[114479] 1 2)
      }
      (515708 return _void[55])
    }
    (515710 return _void[55])
  }
  function _makeIndexTuple[114521](param arg rank[114519]:_any[178](?), arg t[114524]:_tuple[56199](?), param arg expand[114529]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515714] "RVV" "temp"
    (515719 'move' ret[515714](515718 'deref' t[114524]))
    (515716 return ret[515714])
  }
  where {
    unknown call_tmp[648613] "expr temp" "maybe param" "maybe type" "temp"
    (648616 'move' call_tmp[648613](114535 call size _mt[243] t[114524]))
    (114538 call == rank[114519] call_tmp[648613])
  }
  function _makeIndexTuple[114551](param arg rank[114549]:_any[178](?), arg t[114554]:_tuple[56199](?), param arg expand[114559]:bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114589 call compilerError "index rank must match domain rank")
    (515721 return _void[55])
  }
  where {
    unknown call_tmp[648620] "expr temp" "maybe param" "maybe type" "temp"
    (648623 'move' call_tmp[648620](114565 call size _mt[243] t[114554]))
    (114568 call != rank[114549] call_tmp[648620])
  }
  function _makeIndexTuple[114599](param arg rank[114597]:_any[178](?), arg val[114602]:integral[199](?), param arg expand[114607]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515725] "RVV" "temp"
    unknown tmp[424128] "maybe param" "temp"
    (424139 'move' tmp[424128] expand[114607])
    unknown call_tmp[648625] "expr temp" "maybe param" "maybe type" "temp"
    (648628 'move' call_tmp[648625](424141 call _cond_invalid tmp[424128]))
    if call_tmp[648625]
    {
      (424144 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564227] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564228] "maybe param" "temp"
    unknown call_tmp[648630] "expr temp" "maybe param" "maybe type" "temp"
    (648633 'move' call_tmp[648630](424129 call isTrue tmp[424128]))
    (564233 'move' tmp[564228](564231 call _cond_test call_tmp[648630]))
    if tmp[564228]
    {
      (564238 'move' tmp[564227](564235 '_paramFoldLogical' tmp[564228] 1))
    }
    {
      unknown tmp[564240] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[648635] "expr temp" "maybe param" "maybe type" "temp"
      (648638 'move' call_tmp[648635](114614 call == rank[114597] 1))
      (564242 'move' tmp[564240](424133 call isTrue call_tmp[648635]))
      (564247 'move' tmp[564227](564244 '_paramFoldLogical' tmp[564228] tmp[564240]))
    }
    unknown call_tmp[648640] "expr temp" "maybe param" "maybe type" "temp"
    (648643 'move' call_tmp[648640](114701 call _cond_test tmp[564227]))
    if call_tmp[648640]
    {
      unknown t[114623] "dead at end of block" "insert auto destroy"
      unknown call_tmp[648645] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648648 'move' call_tmp[648645](114620 'typeof' val[114602]))
      unknown call_tmp[648650] "expr temp" "maybe param" "maybe type" "temp"
      (648653 'move' call_tmp[648650](114621 call * rank[114597] call_tmp[648645]))
      (542627 'default init var' t[114623] call_tmp[648650])
      (114626 'end of statement')
      {
        unknown i[114643] "dead at end of block" "insert auto destroy"
        (542629 'init var' i[114643] 0)
        (479219 'end of statement')
        unknown tmp[114644] "maybe param" "temp"
        unknown call_tmp[648655] "expr temp" "maybe param" "maybe type" "temp"
        (648658 'move' call_tmp[648655](114631 call - rank[114597] 1))
        (114656 'move' tmp[114644](114654 call chpl_compute_low_param_loop_bound 0 call_tmp[648655]))
        unknown tmp[114645] "maybe param" "temp"
        unknown call_tmp[648660] "expr temp" "maybe param" "maybe type" "temp"
        (648663 'move' call_tmp[648660](114661 call - rank[114597] 1))
        (114666 'move' tmp[114645](114664 call chpl_compute_high_param_loop_bound 0 call_tmp[648660]))
        unknown tmp[114646] "maybe param" "temp"
        (114669 'move' tmp[114646] 1)
        ParamForLoop[114671]
        { i[114643] tmp[114644] tmp[114645] tmp[114646]
          unknown call_tmp[648665] "expr temp" "maybe param" "maybe type" "temp"
          (648668 'move' call_tmp[648665](114638 call t[114623] i[114643]))
          (114640 call = call_tmp[648665] val[114602])
          (479220 'end of statement' t[114623] i[114643])
        }
        label _unused_continueLabel[114648]
        label _breakLabel[114647]
      }
      (515730 'move' ret[515725](515729 'deref' t[114623]))
      gotoReturn _end__makeIndexTuple[515723] _end__makeIndexTuple[515723]
      (479223 'end of statement' t[114623])
    }
    {
      unknown call_tmp[648670] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648673 'move' call_tmp[648670](114685 'typeof' val[114602]))
      unknown call_tmp[648675] "expr temp" "maybe param" "maybe type" "temp"
      (648678 'move' call_tmp[648675](114687 call _cast string[26] call_tmp[648670]))
      (114690 call compilerWarning call_tmp[648675])
      (479225 'end of statement')
      (114696 call compilerError "index rank must match domain rank")
      (479226 'end of statement')
      (515735 'move' ret[515725](515734 'deref' val[114602]))
      gotoReturn _end__makeIndexTuple[515723] _end__makeIndexTuple[515723]
    }
    label _end__makeIndexTuple[515723]
    (515727 return ret[515725])
  }
  function _newArray[114712](arg value[114710]:_any[178](?)) : _unknown[51] "no copy return"
  {
    unknown ret[515741] "RVV" "temp"
    unknown call_tmp[648680] "expr temp" "maybe param" "maybe type" "temp"
    (648683 'move' call_tmp[648680](114717 call _isPrivatized value[114710]))
    unknown call_tmp[648685] "expr temp" "maybe param" "maybe type" "temp"
    (648688 'move' call_tmp[648685](114737 call _cond_test call_tmp[648680]))
    if call_tmp[648685]
    {
      unknown call_tmp[648690] "expr temp" "maybe param" "maybe type" "temp"
      (648693 'move' call_tmp[648690](114723 call _newPrivatizedClass value[114710]))
      unknown call_tmp[648695] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648698 'move' call_tmp[648695](747854 'new' _array[133588](?) call_tmp[648690] value[114710]))
      (515746 'move' ret[515741](515745 'deref' call_tmp[648695]))
      gotoReturn _end__newArray[515739] _end__newArray[515739]
    }
    {
      unknown call_tmp[648700] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648703 'move' call_tmp[648700](747855 'new' _array[133588](?) nullPid[113712] value[114710]))
      (515751 'move' ret[515741](515750 'deref' call_tmp[648700]))
      gotoReturn _end__newArray[515739] _end__newArray[515739]
    }
    label _end__newArray[515739]
    (515743 return ret[515741])
  }
  function _getDomain[114750](arg value[114748]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515757] "RVV" "temp"
    unknown call_tmp[648705] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648708 'move' call_tmp[648705](114754 'typeof' value[114748]))
    unknown call_tmp[648710] "expr temp" "maybe param" "maybe type" "temp"
    (648713 'move' call_tmp[648710](114756 call _to_unmanaged call_tmp[648705]))
    unknown call_tmp[648715] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648718 'move' call_tmp[648715](114758 'typeof' value[114748]))
    unknown call_tmp[648720] "expr temp" "maybe param" "maybe type" "temp"
    (648723 'move' call_tmp[648720](114759 call != call_tmp[648710] call_tmp[648715]))
    unknown call_tmp[648725] "expr temp" "maybe param" "maybe type" "temp"
    (648728 'move' call_tmp[648725](114782 call _cond_test call_tmp[648720]))
    if call_tmp[648725]
    {
      (114780 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[648730] "expr temp" "maybe param" "maybe type" "temp"
    (648733 'move' call_tmp[648730](114791 call _isPrivatized value[114748]))
    unknown call_tmp[648735] "expr temp" "maybe param" "maybe type" "temp"
    (648738 'move' call_tmp[648735](114815 call _cond_test call_tmp[648730]))
    if call_tmp[648735]
    {
      unknown call_tmp[648742] "expr temp" "maybe param" "maybe type" "temp"
      (648745 'move' call_tmp[648742](114795 call pid _mt[243] value[114748]))
      unknown call_tmp[648747] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648750 'move' call_tmp[648747](747856 'new' _domain[125902](?) call_tmp[648742] value[114748](_unowned = 1)))
      (515762 'move' ret[515757](515761 'deref' call_tmp[648747]))
      gotoReturn _end__getDomain[515755] _end__getDomain[515755]
    }
    {
      unknown call_tmp[648752] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648755 'move' call_tmp[648752](747857 'new' _domain[125902](?) nullPid[113712] value[114748](_unowned = 1)))
      (515767 'move' ret[515757](515766 'deref' call_tmp[648752]))
      gotoReturn _end__getDomain[515755] _end__getDomain[515755]
    }
    label _end__getDomain[515755]
    (515759 return ret[515757])
  }
  function _getDistribution[114827](arg value[114825]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515773] "RVV" "temp"
    unknown call_tmp[648757] "expr temp" "maybe param" "maybe type" "temp"
    (648760 'move' call_tmp[648757](114832 call _isPrivatized value[114825]))
    unknown call_tmp[648762] "expr temp" "maybe param" "maybe type" "temp"
    (648765 'move' call_tmp[648762](114856 call _cond_test call_tmp[648757]))
    if call_tmp[648762]
    {
      unknown call_tmp[648769] "expr temp" "maybe param" "maybe type" "temp"
      (648772 'move' call_tmp[648769](114836 call pid _mt[243] value[114825]))
      unknown call_tmp[648774] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648777 'move' call_tmp[648774](747858 'new' _distribution[118967](?) call_tmp[648769] value[114825](_unowned = 1)))
      (515778 'move' ret[515773](515777 'deref' call_tmp[648774]))
      gotoReturn _end__getDistribution[515771] _end__getDistribution[515771]
    }
    {
      unknown call_tmp[648779] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648782 'move' call_tmp[648779](747859 'new' _distribution[118967](?) nullPid[113712] value[114825](_unowned = 1)))
      (515783 'move' ret[515773](515782 'deref' call_tmp[648779]))
      gotoReturn _end__getDistribution[515771] _end__getDistribution[515771]
    }
    label _end__getDistribution[515771]
    (515775 return ret[515773])
  }
  function chpl__buildDomainRuntimeType[114871](arg dist[114868]:_distribution[118967](?), param arg rank[114874]:int(64)[13], arg idxType[114878]:_any[178](?) =
  int(64)[13], param arg stridable[114883]:bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515789] "RVV" "temp" "type variable"
    unknown call_tmp[648784] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648787 'move' call_tmp[648784](747860 'new' _domain[125902](?) dist[114868] rank[114874] idxType[114878] stridable[114883]))
    (515794 'move' ret[515789](515793 'deref' call_tmp[648784]))
    (515791 return ret[515789])
  }
  function chpl__buildDomainRuntimeType[114906](arg dist[114903]:_distribution[118967](?), arg idxType[114908]:_any[178](?), param arg parSafe[114912]:bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515798] "RVV" "temp" "type variable"
    unknown call_tmp[648789] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648792 'move' call_tmp[648789](747861 'new' _domain[125902](?) dist[114903] idxType[114908] parSafe[114912]))
    (515803 'move' ret[515798](515802 'deref' call_tmp[648789]))
    (515800 return ret[515798])
  }
  function chpl__buildSparseDomainRuntimeType[114934](arg dist[114931]:_distribution[118967](?), arg parentDom[114937]:_domain[125902](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515807] "RVV" "temp" "type variable"
    unknown call_tmp[648794] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648797 'move' call_tmp[648794](747862 'new' _domain[125902](?) dist[114931] parentDom[114937]))
    (515812 'move' ret[515807](515811 'deref' call_tmp[648794]))
    (515809 return ret[515807])
  }
  function chpl__convertRuntimeTypeToValue[114957](arg dist[114954]:_distribution[118967](?), param arg rank[114960]:int(64)[13], arg idxType[114964]:_any[178](?) =
  int(64)[13], param arg stridable[114968]:bool[10], param arg isNoInit[114972]:bool[10]) : _unknown[51]
  {
    unknown ret[515816] "RVV" "temp"
    unknown call_tmp[648799] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648802 'move' call_tmp[648799](747863 'new' _domain[125902](?) dist[114954] rank[114960] idxType[114964] stridable[114968]))
    (515821 'move' ret[515816](515820 'deref' call_tmp[648799]))
    (515818 return ret[515816])
  }
  function chpl__convertRuntimeTypeToValue[114994](arg dist[114991]:_distribution[118967](?), arg idxType[114996]:_any[178](?), param arg parSafe[114999]:bool[10], param arg isNoInit[115003]:bool[10]) : _unknown[51]
  {
    unknown ret[515825] "RVV" "temp"
    unknown call_tmp[648804] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648807 'move' call_tmp[648804](747864 'new' _domain[125902](?) dist[114991] idxType[114996] parSafe[114999]))
    (515830 'move' ret[515825](515829 'deref' call_tmp[648804]))
    (515827 return ret[515825])
  }
  function chpl__convertRuntimeTypeToValue[115024](arg dist[115021]:_distribution[118967](?), arg parentDom[115027]:_domain[125902](?), param arg isNoInit[115031]:bool[10]) : _unknown[51]
  {
    unknown ret[515834] "RVV" "temp"
    unknown call_tmp[648809] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648812 'move' call_tmp[648809](747865 'new' _domain[125902](?) dist[115021] parentDom[115027]))
    (515839 'move' ret[515834](515838 'deref' call_tmp[648809]))
    (515836 return ret[515834])
  }
  function chpl__convertValueToRuntimeType[115051](arg dom[115048]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515843] "RVV" "temp" "type variable"
    unknown call_tmp[648816] "expr temp" "maybe param" "maybe type" "temp"
    (648819 'move' call_tmp[648816](115064 call dist _mt[243] dom[115048]))
    unknown call_tmp[648823] "expr temp" "maybe param" "maybe type" "temp"
    (648826 'move' call_tmp[648823](115069 call _value _mt[243] dom[115048]))
    unknown call_tmp[648830] "expr temp" "maybe param" "maybe type" "temp"
    (648833 'move' call_tmp[648830](115072 call rank _mt[243] call_tmp[648823]))
    unknown call_tmp[648837] "expr temp" "maybe param" "maybe type" "temp"
    (648840 'move' call_tmp[648837](115076 call _value _mt[243] dom[115048]))
    unknown call_tmp[648844] "expr temp" "maybe param" "maybe type" "temp"
    (648847 'move' call_tmp[648844](115079 call idxType _mt[243] call_tmp[648837]))
    unknown call_tmp[648851] "expr temp" "maybe param" "maybe type" "temp"
    (648854 'move' call_tmp[648851](115083 call _value _mt[243] dom[115048]))
    unknown call_tmp[648858] "expr temp" "maybe param" "maybe type" "temp"
    (648861 'move' call_tmp[648858](115086 call stridable _mt[243] call_tmp[648851]))
    unknown call_tmp[648863] "expr temp" "maybe param" "maybe type" "temp"
    (648866 'move' call_tmp[648863](115089 call chpl__buildDomainRuntimeType call_tmp[648816] call_tmp[648830] call_tmp[648844] call_tmp[648858]))
    (515848 'move' ret[515843](515847 'deref' call_tmp[648863]))
    (515845 return ret[515843])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492043] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648870] "expr temp" "maybe param" "maybe type" "temp"
      (648873 'move' call_tmp[648870](115055 call _value _mt[243] dom[115048]))
      (492047 'move' call_type_tmp[492043](115058 'typeof' call_tmp[648870]))
    }
    (354285 'is_subtype' BaseRectangularDom[382243](?) call_type_tmp[492043])
  }
  function chpl__convertValueToRuntimeType[115102](arg dom[115099]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515852] "RVV" "temp" "type variable"
    unknown call_tmp[648877] "expr temp" "maybe param" "maybe type" "temp"
    (648880 'move' call_tmp[648877](115115 call dist _mt[243] dom[115099]))
    unknown call_tmp[648884] "expr temp" "maybe param" "maybe type" "temp"
    (648887 'move' call_tmp[648884](115120 call _value _mt[243] dom[115099]))
    unknown call_tmp[648891] "expr temp" "maybe param" "maybe type" "temp"
    (648894 'move' call_tmp[648891](115123 call idxType _mt[243] call_tmp[648884]))
    unknown call_tmp[648898] "expr temp" "maybe param" "maybe type" "temp"
    (648901 'move' call_tmp[648898](115127 call _value _mt[243] dom[115099]))
    unknown call_tmp[648905] "expr temp" "maybe param" "maybe type" "temp"
    (648908 'move' call_tmp[648905](115132 call parSafe _mt[243] call_tmp[648898]))
    unknown call_tmp[648910] "expr temp" "maybe param" "maybe type" "temp"
    (648913 'move' call_tmp[648910](115135 call chpl__buildDomainRuntimeType call_tmp[648877] call_tmp[648891] call_tmp[648905]))
    (515857 'move' ret[515852](515856 'deref' call_tmp[648910]))
    (515854 return ret[515852])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492049] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648917] "expr temp" "maybe param" "maybe type" "temp"
      (648920 'move' call_tmp[648917](115106 call _value _mt[243] dom[115099]))
      (492053 'move' call_type_tmp[492049](115109 'typeof' call_tmp[648917]))
    }
    (354286 'is_subtype' BaseAssociativeDom[382248](?) call_type_tmp[492049])
  }
  function chpl__convertValueToRuntimeType[115148](arg dom[115145]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515861] "RVV" "temp" "type variable"
    unknown call_tmp[648924] "expr temp" "maybe param" "maybe type" "temp"
    (648927 'move' call_tmp[648924](115161 call dist _mt[243] dom[115145]))
    unknown call_tmp[648931] "expr temp" "maybe param" "maybe type" "temp"
    (648934 'move' call_tmp[648931](115166 call _value _mt[243] dom[115145]))
    unknown call_tmp[648938] "expr temp" "maybe param" "maybe type" "temp"
    (648941 'move' call_tmp[648938](115171 call parentDom _mt[243] call_tmp[648931]))
    unknown call_tmp[648943] "expr temp" "maybe param" "maybe type" "temp"
    (648946 'move' call_tmp[648943](115174 call chpl__buildSparseDomainRuntimeType call_tmp[648924] call_tmp[648938]))
    (515866 'move' ret[515861](515865 'deref' call_tmp[648943]))
    (515863 return ret[515861])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492055] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648950] "expr temp" "maybe param" "maybe type" "temp"
      (648953 'move' call_tmp[648950](115152 call _value _mt[243] dom[115145]))
      (492059 'move' call_type_tmp[492055](115155 'typeof' call_tmp[648950]))
    }
    (354287 'is_subtype' BaseSparseDom[382253](?) call_type_tmp[492055])
  }
  function chpl__convertValueToRuntimeType[115187](arg dom[115184]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515870] "RVV" "temp" "type variable"
    (115211 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (479244 'end of statement')
    (515875 'move' ret[515870](515874 'deref' 0))
    (515872 return ret[515870])
  }
  function chpl__buildArrayRuntimeType[115225](arg dom[115222]:_domain[125902](?), arg eltType[115227]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515879] "RVV" "temp" "type variable"
    unknown call_tmp[648957] "expr temp" "maybe param" "maybe type" "temp"
    (648960 'move' call_tmp[648957](115238 call(115232 call (partial) buildArray _mt[243] dom[115222]) eltType[115227] 1))
    (515884 'move' ret[515879](515883 'deref' call_tmp[648957]))
    (515881 return ret[515879])
  }
  function chpl__convertRuntimeTypeToValue[115250](arg dom[115247]:_domain[125902](?), arg eltType[115252]:_any[178](?), param arg isNoInit[115255]:bool[10]) : _unknown[51]
  {
    unknown ret[515888] "RVV" "temp"
    unknown call_tmp[648964] "expr temp" "maybe param" "maybe type" "temp"
    (648967 'move' call_tmp[648964](115265 call ! isNoInit[115255]))
    unknown call_tmp[648969] "expr temp" "maybe param" "maybe type" "temp"
    (648972 'move' call_tmp[648969](115267 call(115259 call (partial) buildArray _mt[243] dom[115247]) eltType[115252] call_tmp[648964]))
    (515893 'move' ret[515888](515892 'deref' call_tmp[648969]))
    (515890 return ret[515888])
  }
  function chpl__convertValueToRuntimeType[115281](arg arr[115278]:_array[133588](?)) type : _unknown[51]
  {
    unknown ret[515897] "RVV" "temp" "type variable"
    unknown call_tmp[648976] "expr temp" "maybe param" "maybe type" "temp"
    (648979 'move' call_tmp[648976](115285 call _dom _mt[243] arr[115278]))
    unknown call_tmp[648983] "expr temp" "maybe param" "maybe type" "temp"
    (648986 'move' call_tmp[648983](115290 call eltType _mt[243] arr[115278]))
    unknown call_tmp[648988] "expr temp" "maybe param" "maybe type" "temp"
    (648991 'move' call_tmp[648988](115293 call chpl__buildArrayRuntimeType call_tmp[648976] call_tmp[648983]))
    (515902 'move' ret[515897](515901 'deref' call_tmp[648988]))
    (515899 return ret[515897])
  }
  function _getLiteralType[115303](arg t[115301]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[515906] "RVV" "temp" "type variable"
    unknown call_tmp[648993] "expr temp" "maybe param" "maybe type" "temp"
    (648996 'move' call_tmp[648993](115307 call != t[115301] c_string[19]))
    unknown call_tmp[648998] "expr temp" "maybe param" "maybe type" "temp"
    (649001 'move' call_tmp[648998](115315 call _cond_test call_tmp[648993]))
    if call_tmp[648998]
    {
      (515911 'move' ret[515906](515910 'deref' t[115301]))
      gotoReturn _end__getLiteralType[515904] _end__getLiteralType[515904]
    }
    {
      (515916 'move' ret[515906](515915 'deref' string[26]))
      gotoReturn _end__getLiteralType[515904] _end__getLiteralType[515904]
    }
    label _end__getLiteralType[515904]
    (515908 return ret[515906])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115325] "config" "no doc" "param"
  unknown arrayLiteralLowBound[115330] "config" "no doc" "param"
  unknown capturedIteratorLowBound[115335] "config" "no doc" "param"
  function chpl__buildArrayExpr[115346](arg elems[115343]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[515922] "RVV" "temp"
    unknown tmp[424149] "maybe param" "temp"
    (424160 'move' tmp[424149](115350 call == CHPL_WARN_DOMAIN_LITERAL[115325] "true"))
    unknown call_tmp[649003] "expr temp" "maybe param" "maybe type" "temp"
    (649006 'move' call_tmp[649003](424162 call _cond_invalid tmp[424149]))
    if call_tmp[649003]
    {
      (424165 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564254] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564255] "maybe param" "temp"
    unknown call_tmp[649008] "expr temp" "maybe param" "maybe type" "temp"
    (649011 'move' call_tmp[649008](424150 call isTrue tmp[424149]))
    (564260 'move' tmp[564255](564258 call _cond_test call_tmp[649008]))
    if tmp[564255]
    {
      unknown tmp[564262] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649013] "expr temp" "maybe param" "maybe type" "temp"
      (649016 'move' call_tmp[649013](115356 call elems[115343] 0))
      unknown call_tmp[649018] "expr temp" "maybe param" "maybe type" "temp"
      (649021 'move' call_tmp[649018](115358 call isRange call_tmp[649013]))
      (564264 'move' tmp[564262](424153 call isTrue call_tmp[649018]))
      (564269 'move' tmp[564254](564266 '_paramFoldLogical' tmp[564255] tmp[564262]))
    }
    {
      (564274 'move' tmp[564254](564271 '_paramFoldLogical' tmp[564255] 0))
    }
    unknown call_tmp[649023] "expr temp" "maybe param" "maybe type" "temp"
    (649026 'move' call_tmp[649023](115417 call _cond_test tmp[564254]))
    if call_tmp[649023]
    {
      (115414 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    { scopeless type
      unknown call_type_tmp[492061] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649028] "expr temp" "maybe param" "maybe type" "temp"
      (649031 'move' call_tmp[649028](115426 call elems[115343] 0))
      (492065 'move' call_type_tmp[492061](115427 'typeof' call_tmp[649028]))
    }
    unknown elemType[115430] "dead at end of block" "insert auto destroy" "type variable"(115429 call _getLiteralType call_type_tmp[492061])
    (542640 'move' elemType[115430](542638 call _getLiteralType call_type_tmp[492061]))
    unknown A[115445] "dead at end of block" "insert auto destroy" "unsafe"
    unknown call_tmp[649033] "expr temp" "maybe param" "maybe type" "temp"
    (649036 'move' call_tmp[649033](115434 call chpl_build_low_bounded_range arrayLiteralLowBound[115330]))
    unknown call_tmp[649038] "expr temp" "maybe param" "maybe type" "temp"
    (649041 'move' call_tmp[649038](115437 call # call_tmp[649033] k[115341]))
    unknown call_tmp[649043] "expr temp" "maybe param" "maybe type" "temp"
    (649046 'move' call_tmp[649043](115441 call chpl__ensureDomainExpr call_tmp[649038]))
    unknown call_tmp[649048] "expr temp" "maybe param" "maybe type" "temp"
    (649051 'move' call_tmp[649048](115443 call chpl__buildArrayRuntimeType call_tmp[649043] elemType[115430]))
    (542642 'default init var' A[115445] call_tmp[649048])
    (115448 'end of statement' elemType[115430])
    {
      unknown i[115568] "dead at end of block" "insert auto destroy"
      (542644 'init var' i[115568] 0)
      (479254 'end of statement')
      unknown tmp[115569] "maybe param" "temp"
      unknown call_tmp[649053] "expr temp" "maybe param" "maybe type" "temp"
      (649056 'move' call_tmp[649053](115452 call - k[115341] 1))
      (115581 'move' tmp[115569](115579 call chpl_compute_low_param_loop_bound 0 call_tmp[649053]))
      unknown tmp[115570] "maybe param" "temp"
      unknown call_tmp[649058] "expr temp" "maybe param" "maybe type" "temp"
      (649061 'move' call_tmp[649058](115586 call - k[115341] 1))
      (115591 'move' tmp[115570](115589 call chpl_compute_high_param_loop_bound 0 call_tmp[649058]))
      unknown tmp[115571] "maybe param" "temp"
      (115594 'move' tmp[115571] 1)
      ParamForLoop[115596]
      { i[115568] tmp[115569] tmp[115570] tmp[115571]
        {
          { scopeless type
            unknown call_type_tmp[492067] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649063] "expr temp" "maybe param" "maybe type" "temp"
            (649066 'move' call_tmp[649063](115460 call elems[115343] i[115568]))
            (492071 'move' call_type_tmp[492067](115461 'typeof' call_tmp[649063]))
          }
          unknown currType[115464] "dead at end of block" "insert auto destroy" "type variable"(115463 call _getLiteralType call_type_tmp[492067])
          (542649 'move' currType[115464](542647 call _getLiteralType call_type_tmp[492067]))
          (479255 'end of statement' i[115568])
          unknown call_tmp[649068] "expr temp" "maybe param" "maybe type" "temp"
          (649071 'move' call_tmp[649068](115470 call != currType[115464] elemType[115430]))
          unknown call_tmp[649073] "expr temp" "maybe param" "maybe type" "temp"
          (649076 'move' call_tmp[649073](115550 call _cond_test call_tmp[649068]))
          if call_tmp[649073]
          {
            unknown call_tmp[649078] "expr temp" "maybe param" "maybe type" "temp"
            (649081 'move' call_tmp[649078](115492 call _cast string[26] i[115568]))
            unknown call_tmp[649083] "expr temp" "maybe param" "maybe type" "temp"
            (649086 'move' call_tmp[649083](115494 call + "Array literal element " call_tmp[649078]))
            unknown call_tmp[649088] "expr temp" "maybe param" "maybe type" "temp"
            (649091 'move' call_tmp[649088](115513 call + call_tmp[649083] " expected to be of type "))
            unknown call_tmp[649093] "expr temp" "maybe param" "maybe type" "temp"
            (649096 'move' call_tmp[649093](115517 call _cast string[26] elemType[115430]))
            unknown call_tmp[649098] "expr temp" "maybe param" "maybe type" "temp"
            (649101 'move' call_tmp[649098](115519 call + call_tmp[649088] call_tmp[649093]))
            unknown call_tmp[649103] "expr temp" "maybe param" "maybe type" "temp"
            (649106 'move' call_tmp[649103](115538 call + call_tmp[649098] " but is of type "))
            unknown call_tmp[649108] "expr temp" "maybe param" "maybe type" "temp"
            (649111 'move' call_tmp[649108](115542 call _cast string[26] currType[115464]))
            unknown call_tmp[649113] "expr temp" "maybe param" "maybe type" "temp"
            (649116 'move' call_tmp[649113](115544 call + call_tmp[649103] call_tmp[649108]))
            (115547 call compilerError call_tmp[649113])
            (479257 'end of statement' i[115568] elemType[115430] currType[115464])
          }
          unknown call_tmp[649118] "expr temp" "maybe param" "maybe type" "temp"
          (649121 'move' call_tmp[649118](115557 call + i[115568] arrayLiteralLowBound[115330]))
          unknown call_tmp[649123] "expr temp" "maybe param" "maybe type" "temp"
          (649126 'move' call_tmp[649123](115560 call A[115445] call_tmp[649118]))
          unknown call_tmp[649128] "expr temp" "maybe param" "maybe type" "temp"
          (649131 'move' call_tmp[649128](115564 call elems[115343] i[115568]))
          (115565 call = call_tmp[649123] call_tmp[649128])
          (479261 'end of statement' A[115445] i[115568] i[115568])
        }
      }
      label _unused_continueLabel[115573]
      label _breakLabel[115572]
    }
    (515927 'move' ret[515922](515926 'deref' A[115445]))
    gotoReturn _end_chpl__buildArrayExpr[515920] _end_chpl__buildArrayExpr[515920]
    (479265 'end of statement' A[115445])
    label _end_chpl__buildArrayExpr[515920]
    (515924 return ret[515922])
  }
  function chpl__buildAssociativeArrayExpr[115617](arg elems[115614]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515933] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492073] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649133] "expr temp" "maybe param" "maybe type" "temp"
      (649136 'move' call_tmp[649133](115623 call elems[115614] 0))
      (492077 'move' call_type_tmp[492073](115624 'typeof' call_tmp[649133]))
    }
    unknown keyType[115627] "dead at end of block" "insert auto destroy" "type variable"(115626 call _getLiteralType call_type_tmp[492073])
    (542654 'move' keyType[115627](542652 call _getLiteralType call_type_tmp[492073]))
    { scopeless type
      unknown call_type_tmp[492079] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649138] "expr temp" "maybe param" "maybe type" "temp"
      (649141 'move' call_tmp[649138](115635 call elems[115614] 1))
      (492083 'move' call_type_tmp[492079](115636 'typeof' call_tmp[649138]))
    }
    unknown valType[115639] "dead at end of block" "insert auto destroy" "type variable"(115638 call _getLiteralType call_type_tmp[492079])
    (542659 'move' valType[115639](542657 call _getLiteralType call_type_tmp[492079]))
    unknown D[115647] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649143] "expr temp" "maybe param" "maybe type" "temp"
    (649146 'move' call_tmp[649143](115645 call chpl__buildDomainRuntimeType defaultDist[94050] keyType[115627]))
    (542661 'default init var' D[115647] call_tmp[649143])
    (115650 'end of statement')
    unknown call_tmp[649150] "expr temp" "maybe param" "maybe type" "temp"
    (649153 'move' call_tmp[649150](115659 call / k[115612] 2))
    (115662 call(115654 call (partial) requestCapacity _mt[243] D[115647]) call_tmp[649150])
    (479268 'end of statement' D[115647])
    unknown A[115671] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649155] "expr temp" "maybe param" "maybe type" "temp"
    (649158 'move' call_tmp[649155](115667 call chpl__ensureDomainExpr D[115647]))
    unknown call_tmp[649160] "expr temp" "maybe param" "maybe type" "temp"
    (649163 'move' call_tmp[649160](115669 call chpl__buildArrayRuntimeType call_tmp[649155] valType[115639]))
    (542663 'default init var' A[115671] call_tmp[649160])
    (115674 'end of statement' keyType[115627] D[115647] valType[115639])
    {
      unknown i[115848] "dead at end of block" "insert auto destroy"
      (542665 'init var' i[115848] 0)
      (479272 'end of statement')
      unknown tmp[115849] "maybe param" "temp"
      unknown call_tmp[649165] "expr temp" "maybe param" "maybe type" "temp"
      (649168 'move' call_tmp[649165](115678 call - k[115612] 1))
      (115860 'move' tmp[115849](115858 call chpl_compute_low_param_loop_bound 0 call_tmp[649165]))
      unknown tmp[115850] "maybe param" "temp"
      unknown call_tmp[649170] "expr temp" "maybe param" "maybe type" "temp"
      (649173 'move' call_tmp[649170](115865 call - k[115612] 1))
      (115870 'move' tmp[115850](115868 call chpl_compute_high_param_loop_bound 0 call_tmp[649170]))
      unknown tmp[115851] "maybe param" "temp"
      (115873 'move' tmp[115851] 2)
      ParamForLoop[115875]
      { i[115848] tmp[115849] tmp[115850] tmp[115851]
        {
          unknown call_tmp[649175] "maybe param" "maybe type" "temp"
          (649178 'move' call_tmp[649175](115688 call elems[115614] i[115848]))
          unknown elemKey[115689] "dead at end of block" "insert auto destroy"
          (542667 'init var' elemKey[115689] call_tmp[649175])
          (115692 'end of statement')
          unknown call_tmp[649180] "expr temp" "maybe param" "maybe type" "temp"
          (649183 'move' call_tmp[649180](115697 call + i[115848] 1))
          unknown call_tmp[649185] "maybe param" "maybe type" "temp"
          (649188 'move' call_tmp[649185](115700 call elems[115614] call_tmp[649180]))
          unknown elemVal[115701] "dead at end of block" "insert auto destroy"
          (542669 'init var' elemVal[115701] call_tmp[649185])
          (115704 'end of statement' i[115848] i[115848])
          unknown call_tmp[649190] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649193 'move' call_tmp[649190](115707 'typeof' elemKey[115689]))
          unknown elemKeyType[115710] "dead at end of block" "insert auto destroy" "type variable"(115709 call _getLiteralType call_tmp[649190])
          unknown call_tmp[649195] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649198 'move' call_tmp[649195](542673 'typeof' elemKey[115689]))
          (542675 'move' elemKeyType[115710](542672 call _getLiteralType call_tmp[649195]))
          (479275 'end of statement' elemKey[115689])
          unknown call_tmp[649200] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649203 'move' call_tmp[649200](115715 'typeof' elemVal[115701]))
          unknown elemValType[115718] "dead at end of block" "insert auto destroy" "type variable"(115717 call _getLiteralType call_tmp[649200])
          unknown call_tmp[649205] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649208 'move' call_tmp[649205](542679 'typeof' elemVal[115701]))
          (542681 'move' elemValType[115718](542678 call _getLiteralType call_tmp[649205]))
          (479277 'end of statement' elemVal[115701])
          unknown call_tmp[649210] "expr temp" "maybe param" "maybe type" "temp"
          (649213 'move' call_tmp[649210](115723 call != elemKeyType[115710] keyType[115627]))
          unknown call_tmp[649215] "expr temp" "maybe param" "maybe type" "temp"
          (649218 'move' call_tmp[649215](115774 call _cond_test call_tmp[649210]))
          if call_tmp[649215]
          {
            unknown call_tmp[649220] "expr temp" "maybe param" "maybe type" "temp"
            (649223 'move' call_tmp[649220](115745 call / i[115848] 2))
            unknown call_tmp[649225] "expr temp" "maybe param" "maybe type" "temp"
            (649228 'move' call_tmp[649225](115748 call _cast string[26] call_tmp[649220]))
            unknown call_tmp[649230] "expr temp" "maybe param" "maybe type" "temp"
            (649233 'move' call_tmp[649230](115750 call + "Associative array key element " call_tmp[649225]))
            unknown call_tmp[649235] "expr temp" "maybe param" "maybe type" "temp"
            (649238 'move' call_tmp[649235](115753 call + call_tmp[649230] " expected to be of type "))
            unknown call_tmp[649240] "expr temp" "maybe param" "maybe type" "temp"
            (649243 'move' call_tmp[649240](115757 call _cast string[26] keyType[115627]))
            unknown call_tmp[649245] "expr temp" "maybe param" "maybe type" "temp"
            (649248 'move' call_tmp[649245](115759 call + call_tmp[649235] call_tmp[649240]))
            unknown call_tmp[649250] "expr temp" "maybe param" "maybe type" "temp"
            (649253 'move' call_tmp[649250](115762 call + call_tmp[649245] " but is of type "))
            unknown call_tmp[649255] "expr temp" "maybe param" "maybe type" "temp"
            (649258 'move' call_tmp[649255](115766 call _cast string[26] elemKeyType[115710]))
            unknown call_tmp[649260] "expr temp" "maybe param" "maybe type" "temp"
            (649263 'move' call_tmp[649260](115768 call + call_tmp[649250] call_tmp[649255]))
            (115771 call compilerError call_tmp[649260])
            (479279 'end of statement' i[115848] keyType[115627] elemKeyType[115710])
          }
          unknown call_tmp[649265] "expr temp" "maybe param" "maybe type" "temp"
          (649268 'move' call_tmp[649265](115780 call != elemValType[115718] valType[115639]))
          unknown call_tmp[649270] "expr temp" "maybe param" "maybe type" "temp"
          (649273 'move' call_tmp[649270](115831 call _cond_test call_tmp[649265]))
          if call_tmp[649270]
          {
            unknown call_tmp[649275] "expr temp" "maybe param" "maybe type" "temp"
            (649278 'move' call_tmp[649275](115802 call / i[115848] 2))
            unknown call_tmp[649280] "expr temp" "maybe param" "maybe type" "temp"
            (649283 'move' call_tmp[649280](115805 call _cast string[26] call_tmp[649275]))
            unknown call_tmp[649285] "expr temp" "maybe param" "maybe type" "temp"
            (649288 'move' call_tmp[649285](115807 call + "Associative array value element " call_tmp[649280]))
            unknown call_tmp[649290] "expr temp" "maybe param" "maybe type" "temp"
            (649293 'move' call_tmp[649290](115810 call + call_tmp[649285] " expected to be of type "))
            unknown call_tmp[649295] "expr temp" "maybe param" "maybe type" "temp"
            (649298 'move' call_tmp[649295](115814 call _cast string[26] valType[115639]))
            unknown call_tmp[649300] "expr temp" "maybe param" "maybe type" "temp"
            (649303 'move' call_tmp[649300](115816 call + call_tmp[649290] call_tmp[649295]))
            unknown call_tmp[649305] "expr temp" "maybe param" "maybe type" "temp"
            (649308 'move' call_tmp[649305](115819 call + call_tmp[649300] " but is of type "))
            unknown call_tmp[649310] "expr temp" "maybe param" "maybe type" "temp"
            (649313 'move' call_tmp[649310](115823 call _cast string[26] elemValType[115718]))
            unknown call_tmp[649315] "expr temp" "maybe param" "maybe type" "temp"
            (649318 'move' call_tmp[649315](115825 call + call_tmp[649305] call_tmp[649310]))
            (115828 call compilerError call_tmp[649315])
            (479283 'end of statement' i[115848] valType[115639] elemValType[115718])
          }
          (115837 call += D[115647] elemKey[115689])
          (479287 'end of statement' D[115647] elemKey[115689])
          unknown call_tmp[649320] "expr temp" "maybe param" "maybe type" "temp"
          (649323 'move' call_tmp[649320](115843 call A[115671] elemKey[115689]))
          (115845 call = call_tmp[649320] elemVal[115701])
          (479290 'end of statement' A[115671] elemKey[115689] elemVal[115701])
        }
      }
      label _unused_continueLabel[115853]
      label _breakLabel[115852]
    }
    (515938 'move' ret[515933](515937 'deref' A[115671]))
    gotoReturn _end_chpl__buildAssociativeArrayExpr[515931] _end_chpl__buildAssociativeArrayExpr[515931]
    (479294 'end of statement' A[115671])
    label _end_chpl__buildAssociativeArrayExpr[515931]
    (515935 return ret[515933])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115896](arg arr[115893]:unmanaged BaseArr[415453], arg eltType[115898]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649325] "expr temp" "maybe param" "maybe type" "temp"
    (649328 'move' call_tmp[649325](115903 call isArrayType eltType[115898]))
    unknown call_tmp[649330] "expr temp" "maybe param" "maybe type" "temp"
    (649333 'move' call_tmp[649330](115954 call _cond_test call_tmp[649325]))
    if call_tmp[649330]
    {
      unknown call_tmp[649337] "expr temp" "maybe param" "maybe type" "temp"
      (649340 'move' call_tmp[649337](115907 call _decEltRefCounts _mt[243] arr[115893]))
      (115911 call = call_tmp[649337] 1)
      (479296 'end of statement')
      unknown arrayEltType[115919] "dead at end of block" "insert auto destroy" "type variable"(115918 call chpl__eltTypeFromArrayRuntimeType eltType[115898])
      (542686 'move' arrayEltType[115919](542684 call chpl__eltTypeFromArrayRuntimeType eltType[115898]))
      const dom[115926] "dead at end of block" "const" "ref var"
      unknown call_tmp[649342] "expr temp" "maybe param" "maybe type" "temp"
      (649345 'move' call_tmp[649342](115925 call chpl__domainFromArrayRuntimeType eltType[115898]))
      (542689 'move' dom[115926](542688 'addr of' call_tmp[649342]))
      (115929 'end of statement')
      unknown call_tmp[649349] "maybe param" "maybe type" "temp"
      (649352 'move' call_tmp[649349](115931 call _instance _mt[243] dom[115926]))
      const dv[115934] "dead at end of block" "const" "insert auto destroy"
      (542691 'init var' dv[115934] call_tmp[649349])
      (115937 'end of statement' dom[115926])
      (115946 call(115941 call (partial) add_containing_arr _mt[243] dv[115934]) arr[115893])
      (479298 'end of statement' dv[115934])
      (115952 call chpl_incRefCountsForDomainsInArrayEltTypes arr[115893] arrayEltType[115919])
      (479300 'end of statement' arrayEltType[115919])
    }
    (515942 return _void[55])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115968](arg arr[115965]:unmanaged BaseArr[415453], arg eltType[115970]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649356] "expr temp" "maybe param" "maybe type" "temp"
    (649359 'move' call_tmp[649356](115975 call isArrayType eltType[115970]))
    unknown call_tmp[649361] "expr temp" "maybe param" "maybe type" "temp"
    (649364 'move' call_tmp[649361](116171 call _cond_test call_tmp[649356]))
    if call_tmp[649361]
    {
      unknown call_tmp[649368] "expr temp" "maybe param" "maybe type" "temp"
      (649371 'move' call_tmp[649368](115977 call _decEltRefCounts _mt[243] arr[115965]))
      unknown call_tmp[649373] "expr temp" "maybe param" "maybe type" "temp"
      (649376 'move' call_tmp[649373](115981 call == call_tmp[649368] 0))
      unknown call_tmp[649378] "expr temp" "maybe param" "maybe type" "temp"
      (649381 'move' call_tmp[649378](116004 call _cond_test call_tmp[649373]))
      if call_tmp[649378]
      {
        (116002 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116014] "dead at end of block" "insert auto destroy" "type variable"(116013 call chpl__eltTypeFromArrayRuntimeType eltType[115970])
      (542696 'move' arrayEltType[116014](542694 call chpl__eltTypeFromArrayRuntimeType eltType[115970]))
      const dom[116021] "dead at end of block" "const" "ref var"
      unknown call_tmp[649383] "expr temp" "maybe param" "maybe type" "temp"
      (649386 'move' call_tmp[649383](116020 call chpl__domainFromArrayRuntimeType eltType[115970]))
      (542699 'move' dom[116021](542698 'addr of' call_tmp[649383]))
      (116024 'end of statement')
      (116029 call chpl_decRefCountsForDomainsInArrayEltTypes arr[115965] arrayEltType[116014])
      (479303 'end of statement' arrayEltType[116014])
      unknown call_tmp[649390] "expr temp" "maybe param" "maybe type" "temp"
      (649393 'move' call_tmp[649390](116032 call _instance _mt[243] dom[116021]))
      unknown call_tmp[649397] "maybe param" "maybe type" "temp"
      (649400 'move' call_tmp[649397](116042 call(116037 call (partial) remove_containing_arr _mt[243] call_tmp[649390]) arr[115965]))
      unknown removeDom[116043] "dead at end of block" "insert auto destroy"
      (542701 'init var' removeDom[116043] call_tmp[649397])
      (116046 'end of statement' dom[116021])
      unknown call_tmp[649402] "expr temp" "maybe param" "maybe type" "temp"
      (649405 'move' call_tmp[649402](116167 call _cond_test removeDom[116043]))
      if call_tmp[649402]
      {
        const tmp[116158] "const" "temp"
        unknown call_tmp[649409] "expr temp" "maybe param" "maybe type" "temp"
        (649412 'move' call_tmp[649409](116049 call _instance _mt[243] dom[116021]))
        unknown call_tmp[649414] "expr temp" "maybe param" "maybe type" "temp"
        (649417 'move' call_tmp[649414](116155 '_wide_get_locale' call_tmp[649409]))
        (116160 'move' tmp[116158](116156 'deref' call_tmp[649414]))
        {
          {
            unknown call_tmp[649421] "maybe param" "maybe type" "temp"
            (649424 'move' call_tmp[649421](116053 call _instance _mt[243] dom[116021]))
            const inst[116056] "dead at end of block" "const" "insert auto destroy"
            (542703 'init var' inst[116056] call_tmp[649421])
            (116059 'end of statement')
            unknown call_tmp[649428] "maybe param" "maybe type" "temp"
            (649431 'move' call_tmp[649428](116071 call(116067 call (partial) remove _mt[243] inst[116056])))
            unknown tmp[116072] "dead at end of block" "insert auto destroy" "temp"
            (542705 'init var' tmp[116072] call_tmp[649428])
            (116079 call _check_tuple_var_decl tmp[116072] 2)
            (479307 'end of statement')
            unknown call_tmp[649433] "maybe param" "maybe type" "temp"
            (649436 'move' call_tmp[649433](116073 call tmp[116072] 0))
            unknown domToFree[116061] "dead at end of block" "insert auto destroy"
            (542707 'init var' domToFree[116061] call_tmp[649433])
            unknown call_tmp[649438] "maybe param" "maybe type" "temp"
            (649441 'move' call_tmp[649438](116076 call tmp[116072] 1))
            unknown distToRemove[116063] "dead at end of block" "insert auto destroy"
            (542709 'init var' distToRemove[116063] call_tmp[649438])
            (116084 'end of statement')
            unknown distToFree[116089] "dead at end of block" "insert auto destroy"
            (542711 'init var' distToFree[116089] nil[44] unmanaged BaseDist?[415459])
            (116092 'end of statement' dom[116021])
            unknown call_tmp[649443] "expr temp" "maybe param" "maybe type" "temp"
            (649446 'move' call_tmp[649443](116095 call != distToRemove[116063] nil[44]))
            unknown call_tmp[649448] "expr temp" "maybe param" "maybe type" "temp"
            (649451 'move' call_tmp[649448](116110 call _cond_test call_tmp[649443]))
            if call_tmp[649448]
            {
              unknown call_tmp[649453] "expr temp" "maybe param" "maybe type" "temp"
              (649456 'move' call_tmp[649453](116099 call postfix! distToRemove[116063]))
              unknown call_tmp[649460] "expr temp" "maybe param" "maybe type" "temp"
              (649463 'move' call_tmp[649460](116105 call(116101 call (partial) remove _mt[243] call_tmp[649453])))
              (116106 call = distToFree[116089] call_tmp[649460])
              (479308 'end of statement' distToFree[116089] distToRemove[116063])
            }
            unknown call_tmp[649465] "expr temp" "maybe param" "maybe type" "temp"
            (649468 'move' call_tmp[649465](116116 call != domToFree[116061] nil[44]))
            unknown call_tmp[649470] "expr temp" "maybe param" "maybe type" "temp"
            (649473 'move' call_tmp[649470](116127 call _cond_test call_tmp[649465]))
            if call_tmp[649470]
            {
              unknown call_tmp[649475] "expr temp" "maybe param" "maybe type" "temp"
              (649478 'move' call_tmp[649475](116124 call _isPrivatized inst[116056]))
              (116125 call _delete_dom inst[116056] call_tmp[649475])
              (479311 'end of statement' inst[116056] inst[116056])
            }
            unknown call_tmp[649480] "expr temp" "maybe param" "maybe type" "temp"
            (649483 'move' call_tmp[649480](116134 call != distToFree[116089] nil[44]))
            unknown call_tmp[649485] "expr temp" "maybe param" "maybe type" "temp"
            (649488 'move' call_tmp[649485](116150 call _cond_test call_tmp[649480]))
            if call_tmp[649485]
            {
              unknown call_tmp[649490] "expr temp" "maybe param" "maybe type" "temp"
              (649493 'move' call_tmp[649490](116138 call postfix! distToFree[116089]))
              unknown call_tmp[649497] "expr temp" "maybe param" "maybe type" "temp"
              (649500 'move' call_tmp[649497](116143 call dist _mt[243] inst[116056]))
              unknown call_tmp[649502] "expr temp" "maybe param" "maybe type" "temp"
              (649505 'move' call_tmp[649502](116147 call _isPrivatized call_tmp[649497]))
              (116148 call _delete_dist call_tmp[649490] call_tmp[649502])
              (479314 'end of statement' distToFree[116089] inst[116056])
            }
          }
          (116163 'on block' 0 tmp[116158])
        }
      }
    }
    (515944 return _void[55])
  }
  function chpl__buildSubDomainType[116184](arg dom[116181]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515948] "RVV" "temp" "type variable"
    unknown call_tmp[649507] "expr temp" "maybe param" "maybe type" "temp"
    (649510 'move' call_tmp[649507](116189 call chpl__convertValueToRuntimeType dom[116181]))
    (515953 'move' ret[515948](515952 'deref' call_tmp[649507]))
    (515950 return ret[515948])
  }
  function chpl__isTupleOfRanges[116199](arg tup[116197]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515957] "RVV" "param" "temp"
    {
      unknown i[116230] "dead at end of block" "insert auto destroy"
      (542713 'init var' i[116230] 0)
      (479318 'end of statement')
      unknown tmp[116231] "maybe param" "temp"
      unknown call_tmp[649514] "expr temp" "maybe param" "maybe type" "temp"
      (649517 'move' call_tmp[649514](116203 call size _mt[243] tup[116197]))
      unknown call_tmp[649519] "expr temp" "maybe param" "maybe type" "temp"
      (649522 'move' call_tmp[649519](116207 call - call_tmp[649514] 1))
      (116243 'move' tmp[116231](116241 call chpl_compute_low_param_loop_bound 0 call_tmp[649519]))
      unknown tmp[116232] "maybe param" "temp"
      unknown call_tmp[649526] "expr temp" "maybe param" "maybe type" "temp"
      (649529 'move' call_tmp[649526](116250 call size _mt[243] tup[116197]))
      unknown call_tmp[649531] "expr temp" "maybe param" "maybe type" "temp"
      (649534 'move' call_tmp[649531](116248 call - call_tmp[649526] 1))
      (116256 'move' tmp[116232](116254 call chpl_compute_high_param_loop_bound 0 call_tmp[649531]))
      unknown tmp[116233] "maybe param" "temp"
      (116259 'move' tmp[116233] 1)
      ParamForLoop[116261]
      { i[116230] tmp[116231] tmp[116232] tmp[116233]
        {
          { scopeless type
            unknown call_type_tmp[492085] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649536] "expr temp" "maybe param" "maybe type" "temp"
            (649539 'move' call_tmp[649536](116215 call tup[116197] i[116230]))
            (492089 'move' call_type_tmp[492085](116216 'typeof' call_tmp[649536]))
          }
          unknown call_tmp[649541] "expr temp" "maybe param" "maybe type" "temp"
          (649544 'move' call_tmp[649541](116218 call isRangeType call_type_tmp[492085]))
          unknown call_tmp[649546] "expr temp" "maybe param" "maybe type" "temp"
          (649549 'move' call_tmp[649546](116219 call ! call_tmp[649541]))
          unknown call_tmp[649551] "expr temp" "maybe param" "maybe type" "temp"
          (649554 'move' call_tmp[649551](116224 call _cond_test call_tmp[649546]))
          if call_tmp[649551]
          {
            (515962 'move' ret[515957](515961 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[515955] _end_chpl__isTupleOfRanges[515955]
          }
        }
      }
      label _unused_continueLabel[116235]
      label _breakLabel[116234]
    }
    (515967 'move' ret[515957](515966 'deref' 1))
    label _end_chpl__isTupleOfRanges[515955]
    (515959 return ret[515957])
  }
  function chpl__buildDomainExpr[116282](arg ranges[116279]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515971] "RVV" "temp"
    unknown call_tmp[649558] "maybe param" "maybe type" "temp"
    (649561 'move' call_tmp[649558](116289 call size _mt[243] ranges[116279]))
    unknown rank[116292] "dead at end of block" "param"
    (542715 'init var' rank[116292] call_tmp[649558])
    (116295 'end of statement')
    {
      unknown i[116346] "dead at end of block" "insert auto destroy"
      (542717 'init var' i[116346] 0)
      (479321 'end of statement')
      unknown tmp[116347] "maybe param" "temp"
      unknown call_tmp[649563] "expr temp" "maybe param" "maybe type" "temp"
      (649566 'move' call_tmp[649563](116300 call - rank[116292] 1))
      (116359 'move' tmp[116347](116357 call chpl_compute_low_param_loop_bound 1 call_tmp[649563]))
      unknown tmp[116348] "maybe param" "temp"
      unknown call_tmp[649568] "expr temp" "maybe param" "maybe type" "temp"
      (649571 'move' call_tmp[649568](116364 call - rank[116292] 1))
      (116369 'move' tmp[116348](116367 call chpl_compute_high_param_loop_bound 1 call_tmp[649568]))
      unknown tmp[116349] "maybe param" "temp"
      (116372 'move' tmp[116349] 1)
      ParamForLoop[116374]
      { i[116346] tmp[116347] tmp[116348] tmp[116349]
        unknown call_tmp[649573] "expr temp" "maybe param" "maybe type" "temp"
        (649576 'move' call_tmp[649573](116307 call ranges[116279] 0))
        unknown call_tmp[649580] "expr temp" "maybe param" "maybe type" "temp"
        (649583 'move' call_tmp[649580](116308 call idxType _mt[243] call_tmp[649573]))
        unknown call_tmp[649585] "expr temp" "maybe param" "maybe type" "temp"
        (649588 'move' call_tmp[649585](116314 call ranges[116279] i[116346]))
        unknown call_tmp[649592] "expr temp" "maybe param" "maybe type" "temp"
        (649595 'move' call_tmp[649592](116315 call idxType _mt[243] call_tmp[649585]))
        unknown call_tmp[649597] "expr temp" "maybe param" "maybe type" "temp"
        (649600 'move' call_tmp[649597](116318 call != call_tmp[649580] call_tmp[649592]))
        unknown call_tmp[649602] "expr temp" "maybe param" "maybe type" "temp"
        (649605 'move' call_tmp[649602](116341 call _cond_test call_tmp[649597]))
        if call_tmp[649602]
        {
          (116339 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116351]
      label _breakLabel[116350]
    }
    {
      unknown i[116425] "dead at end of block" "insert auto destroy"
      (542719 'init var' i[116425] 0)
      (479323 'end of statement')
      unknown tmp[116426] "maybe param" "temp"
      unknown call_tmp[649607] "expr temp" "maybe param" "maybe type" "temp"
      (649610 'move' call_tmp[649607](116386 call - rank[116292] 1))
      (116438 'move' tmp[116426](116436 call chpl_compute_low_param_loop_bound 0 call_tmp[649607]))
      unknown tmp[116427] "maybe param" "temp"
      unknown call_tmp[649612] "expr temp" "maybe param" "maybe type" "temp"
      (649615 'move' call_tmp[649612](116443 call - rank[116292] 1))
      (116448 'move' tmp[116427](116446 call chpl_compute_high_param_loop_bound 0 call_tmp[649612]))
      unknown tmp[116428] "maybe param" "temp"
      (116451 'move' tmp[116428] 1)
      ParamForLoop[116453]
      { i[116425] tmp[116426] tmp[116427] tmp[116428]
        unknown call_tmp[649617] "expr temp" "maybe param" "maybe type" "temp"
        (649620 'move' call_tmp[649617](116394 call ranges[116279] i[116425]))
        unknown call_tmp[649622] "expr temp" "maybe param" "maybe type" "temp"
        (649625 'move' call_tmp[649622](116396 call isBoundedRange call_tmp[649617]))
        unknown call_tmp[649627] "expr temp" "maybe param" "maybe type" "temp"
        (649630 'move' call_tmp[649627](116397 call ! call_tmp[649622]))
        unknown call_tmp[649632] "expr temp" "maybe param" "maybe type" "temp"
        (649635 'move' call_tmp[649632](116420 call _cond_test call_tmp[649627]))
        if call_tmp[649632]
        {
          (116418 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116430]
      label _breakLabel[116429]
    }
    unknown d[116478] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649637] "expr temp" "maybe param" "maybe type" "temp"
    (649640 'move' call_tmp[649637](116467 call ranges[116279] 0))
    unknown call_tmp[649644] "expr temp" "maybe param" "maybe type" "temp"
    (649647 'move' call_tmp[649644](116468 call idxType _mt[243] call_tmp[649637]))
    unknown call_tmp[649649] "expr temp" "maybe param" "maybe type" "temp"
    (649652 'move' call_tmp[649649](116474 call chpl__anyStridable ranges[116279]))
    unknown call_tmp[649654] "expr temp" "maybe param" "maybe type" "temp"
    (649657 'move' call_tmp[649654](116476 call chpl__buildDomainRuntimeType defaultDist[94050] rank[116292] call_tmp[649644] call_tmp[649649]))
    (542721 'default init var' d[116478] call_tmp[649654])
    (116481 'end of statement')
    (116490 call(116485 call (partial) setIndices _mt[243] d[116478]) ranges[116279])
    (479325 'end of statement' d[116478])
    (515976 'move' ret[515971](515975 'deref' d[116478]))
    gotoReturn _end_chpl__buildDomainExpr[515969] _end_chpl__buildDomainExpr[515969]
    (479327 'end of statement' d[116478])
    label _end_chpl__buildDomainExpr[515969]
    (515973 return ret[515971])
  }
  where {
    (116287 call chpl__isTupleOfRanges ranges[116279])
  }
  function chpl__buildDomainExpr[116504](arg keys[116501]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515982] "RVV" "temp"
    unknown call_tmp[649663] "maybe param" "maybe type" "temp"
    (649666 'move' call_tmp[649663](116507 call size _mt[243] keys[116501]))
    unknown count[116510] "dead at end of block" "param"
    (542723 'init var' count[116510] call_tmp[649663])
    (116513 'end of statement')
    { scopeless type
      unknown call_type_tmp[492091] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649668] "expr temp" "maybe param" "maybe type" "temp"
      (649671 'move' call_tmp[649668](116519 call keys[116501] 0))
      (492095 'move' call_type_tmp[492091](116520 'typeof' call_tmp[649668]))
    }
    unknown keyType[116523] "dead at end of block" "insert auto destroy" "type variable"(116522 call _getLiteralType call_type_tmp[492091])
    (542728 'move' keyType[116523](542726 call _getLiteralType call_type_tmp[492091]))
    {
      unknown i[116601] "dead at end of block" "insert auto destroy"
      (542730 'init var' i[116601] 0)
      (479329 'end of statement')
      unknown tmp[116602] "maybe param" "temp"
      unknown call_tmp[649673] "expr temp" "maybe param" "maybe type" "temp"
      (649676 'move' call_tmp[649673](116529 call - count[116510] 1))
      (116614 'move' tmp[116602](116612 call chpl_compute_low_param_loop_bound 1 call_tmp[649673]))
      unknown tmp[116603] "maybe param" "temp"
      unknown call_tmp[649678] "expr temp" "maybe param" "maybe type" "temp"
      (649681 'move' call_tmp[649678](116619 call - count[116510] 1))
      (116624 'move' tmp[116603](116622 call chpl_compute_high_param_loop_bound 1 call_tmp[649678]))
      unknown tmp[116604] "maybe param" "temp"
      (116627 'move' tmp[116604] 1)
      ParamForLoop[116629]
      { i[116601] tmp[116602] tmp[116603] tmp[116604]
        { scopeless type
          unknown call_type_tmp[492097] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[649683] "expr temp" "maybe param" "maybe type" "temp"
          (649686 'move' call_tmp[649683](116538 call keys[116501] i[116601]))
          (492101 'move' call_type_tmp[492097](116539 'typeof' call_tmp[649683]))
        }
        unknown call_tmp[649688] "expr temp" "maybe param" "maybe type" "temp"
        (649691 'move' call_tmp[649688](116541 call _getLiteralType call_type_tmp[492097]))
        unknown call_tmp[649693] "expr temp" "maybe param" "maybe type" "temp"
        (649696 'move' call_tmp[649693](116542 call != keyType[116523] call_tmp[649688]))
        unknown call_tmp[649698] "expr temp" "maybe param" "maybe type" "temp"
        (649701 'move' call_tmp[649698](116597 call _cond_test call_tmp[649693]))
        if call_tmp[649698]
        {
          { scopeless type
            unknown call_type_tmp[492103] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649703] "expr temp" "maybe param" "maybe type" "temp"
            (649706 'move' call_tmp[649703](116584 call keys[116501] i[116601]))
            (492107 'move' call_type_tmp[492103](116585 'typeof' call_tmp[649703]))
          }
          unknown call_tmp[649708] "expr temp" "maybe param" "maybe type" "temp"
          (649711 'move' call_tmp[649708](116564 call _cast string[26] i[116601]))
          unknown call_tmp[649713] "expr temp" "maybe param" "maybe type" "temp"
          (649716 'move' call_tmp[649713](116566 call + "Associative domain element " call_tmp[649708]))
          unknown call_tmp[649718] "expr temp" "maybe param" "maybe type" "temp"
          (649721 'move' call_tmp[649718](116569 call + call_tmp[649713] " expected to be of type "))
          unknown call_tmp[649723] "expr temp" "maybe param" "maybe type" "temp"
          (649726 'move' call_tmp[649723](116573 call _cast string[26] keyType[116523]))
          unknown call_tmp[649728] "expr temp" "maybe param" "maybe type" "temp"
          (649731 'move' call_tmp[649728](116575 call + call_tmp[649718] call_tmp[649723]))
          unknown call_tmp[649733] "expr temp" "maybe param" "maybe type" "temp"
          (649736 'move' call_tmp[649733](116578 call + call_tmp[649728] " but is of type "))
          unknown call_tmp[649738] "expr temp" "maybe param" "maybe type" "temp"
          (649741 'move' call_tmp[649738](116587 call _getLiteralType call_type_tmp[492103]))
          unknown call_tmp[649743] "expr temp" "maybe param" "maybe type" "temp"
          (649746 'move' call_tmp[649743](116589 call _cast string[26] call_tmp[649738]))
          unknown call_tmp[649748] "expr temp" "maybe param" "maybe type" "temp"
          (649751 'move' call_tmp[649748](116591 call + call_tmp[649733] call_tmp[649743]))
          (116594 call compilerError call_tmp[649748])
          (479330 'end of statement' i[116601] keyType[116523] i[116601])
        }
      }
      label _unused_continueLabel[116606]
      label _breakLabel[116605]
    }
    unknown D[116643] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649753] "expr temp" "maybe param" "maybe type" "temp"
    (649756 'move' call_tmp[649753](116641 call chpl__buildDomainRuntimeType defaultDist[94050] keyType[116523]))
    (542732 'default init var' D[116643] call_tmp[649753])
    (116646 'end of statement' keyType[116523])
    (116653 call(116648 call (partial) requestCapacity _mt[243] D[116643]) count[116510])
    (479335 'end of statement' D[116643])
    {
      unknown i[116670] "dead at end of block" "insert auto destroy"
      (542734 'init var' i[116670] 0)
      (479337 'end of statement')
      unknown tmp[116671] "maybe param" "temp"
      unknown call_tmp[649760] "expr temp" "maybe param" "maybe type" "temp"
      (649763 'move' call_tmp[649760](116658 call - count[116510] 1))
      (116683 'move' tmp[116671](116681 call chpl_compute_low_param_loop_bound 0 call_tmp[649760]))
      unknown tmp[116672] "maybe param" "temp"
      unknown call_tmp[649765] "expr temp" "maybe param" "maybe type" "temp"
      (649768 'move' call_tmp[649765](116688 call - count[116510] 1))
      (116693 'move' tmp[116672](116691 call chpl_compute_high_param_loop_bound 0 call_tmp[649765]))
      unknown tmp[116673] "maybe param" "temp"
      (116696 'move' tmp[116673] 1)
      ParamForLoop[116698]
      { i[116670] tmp[116671] tmp[116672] tmp[116673]
        unknown call_tmp[649770] "expr temp" "maybe param" "maybe type" "temp"
        (649773 'move' call_tmp[649770](116666 call keys[116501] i[116670]))
        (116667 call += D[116643] call_tmp[649770])
        (479338 'end of statement' D[116643] i[116670])
      }
      label _unused_continueLabel[116675]
      label _breakLabel[116674]
    }
    (515987 'move' ret[515982](515986 'deref' D[116643]))
    gotoReturn _end_chpl__buildDomainExpr[515980] _end_chpl__buildDomainExpr[515980]
    (479341 'end of statement' D[116643])
    label _end_chpl__buildDomainExpr[515980]
    (515984 return ret[515982])
  }
  function chpl__ensureDomainExpr[116718](const  ref arg x[116715]:_domain[125902](?)) const ref : _unknown[51]
  {
    unknown ret[515993] "RVV" "temp"
    (515998 'move' ret[515993](515997 'addr of' x[116715]))
    (515995 return ret[515993])
  }
  function chpl__ensureDomainExpr[116732](arg x[116729]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[516002] "RVV" "temp"
    unknown call_tmp[649775] "expr temp" "maybe param" "maybe type" "temp"
    (649778 'move' call_tmp[649775](116738 call chpl__buildDomainExpr(116736 'expand_tuple' x[116729])))
    (516007 'move' ret[516002](516006 'deref' call_tmp[649775]))
    (516004 return ret[516002])
  }
  function chpl__ensureDomainExpr[116748](arg t[116746]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[649780] "expr temp" "maybe param" "maybe type" "temp"
    (649783 'move' call_tmp[649780](116771 call _cast string[26] t[116746]))
    (116792 call compilerError "Domain expression was a type ('" call_tmp[649780] "') rather than a domain value or range list as expected")
    (516009 return _void[55])
  }
  function chpl__distributed[116803](arg d[116800]:_distribution[118967](?), arg dom[116806]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[516013] "RVV" "temp"
    unknown call_tmp[649785] "expr temp" "maybe param" "maybe type" "temp"
    (649788 'move' call_tmp[649785](116812 call isRectangularDom dom[116806]))
    unknown call_tmp[649790] "expr temp" "maybe param" "maybe type" "temp"
    (649793 'move' call_tmp[649790](116870 call _cond_test call_tmp[649785]))
    if call_tmp[649790]
    {
      unknown call_tmp[649797] "expr temp" "maybe param" "maybe type" "temp"
      (649800 'move' call_tmp[649797](116814 call rank _mt[243] dom[116806]))
      unknown call_tmp[649804] "expr temp" "maybe param" "maybe type" "temp"
      (649807 'move' call_tmp[649804](116819 call _value _mt[243] dom[116806]))
      unknown call_tmp[649811] "expr temp" "maybe param" "maybe type" "temp"
      (649814 'move' call_tmp[649811](116822 call idxType _mt[243] call_tmp[649804]))
      unknown call_tmp[649818] "expr temp" "maybe param" "maybe type" "temp"
      (649821 'move' call_tmp[649818](116826 call _value _mt[243] dom[116806]))
      unknown call_tmp[649825] "expr temp" "maybe param" "maybe type" "temp"
      (649828 'move' call_tmp[649825](116829 call stridable _mt[243] call_tmp[649818]))
      unknown call_tmp[649830] "expr temp" "maybe param" "maybe type" "temp"
      (649833 'move' call_tmp[649830](116833 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[649797] call_tmp[649811] call_tmp[649825]))
      unknown call_tmp[649835] "maybe param" "maybe type" "temp"
      (649838 'move' call_tmp[649835](116836 call chpl__distributed d[116800] call_tmp[649830]))
      unknown distDom[116839] "dead at end of block" "insert auto destroy"
      (542736 'init var' distDom[116839] dom[116806] call_tmp[649835])
      (116842 'end of statement')
      (516018 'move' ret[516013](516017 'deref' distDom[116839]))
      gotoReturn _end_chpl__distributed[516011] _end_chpl__distributed[516011]
      (479344 'end of statement' distDom[116839])
    }
    {
      unknown call_tmp[649842] "expr temp" "maybe param" "maybe type" "temp"
      (649845 'move' call_tmp[649842](116848 call _value _mt[243] dom[116806]))
      unknown call_tmp[649849] "expr temp" "maybe param" "maybe type" "temp"
      (649852 'move' call_tmp[649849](116851 call idxType _mt[243] call_tmp[649842]))
      unknown call_tmp[649854] "expr temp" "maybe param" "maybe type" "temp"
      (649857 'move' call_tmp[649854](116856 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[649849]))
      unknown call_tmp[649859] "maybe param" "maybe type" "temp"
      (649862 'move' call_tmp[649859](116859 call chpl__distributed d[116800] call_tmp[649854]))
      unknown distDom[116862] "dead at end of block" "insert auto destroy"
      (542738 'init var' distDom[116862] dom[116806] call_tmp[649859])
      (116865 'end of statement')
      (516023 'move' ret[516013](516022 'deref' distDom[116862]))
      gotoReturn _end_chpl__distributed[516011] _end_chpl__distributed[516011]
      (479346 'end of statement' distDom[116862])
    }
    label _end_chpl__distributed[516011]
    (516015 return ret[516013])
  }
  function chpl__distributed[116883](arg d[116880]:_distribution[118967](?), arg ranges[116886]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516029] "RVV" "temp"
    unknown call_tmp[649864] "expr temp" "maybe param" "maybe type" "temp"
    (649867 'move' call_tmp[649864](116900 call chpl__buildDomainExpr(116898 'expand_tuple' ranges[116886])))
    unknown call_tmp[649869] "expr temp" "maybe param" "maybe type" "temp"
    (649872 'move' call_tmp[649869](116901 call chpl__distributed d[116880] call_tmp[649864]))
    (516034 'move' ret[516029](516033 'deref' call_tmp[649869]))
    (516031 return ret[516029])
  }
  where {
    (116892 call chpl__isTupleOfRanges ranges[116886])
  }
  function chpl__isArrayView[116912](arg arr[116910]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516038] "RVV" "param" "temp"
    const value[116926] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564281] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564282] "maybe param" "temp"
    unknown call_tmp[649874] "expr temp" "maybe param" "maybe type" "temp"
    (649877 'move' call_tmp[649874](116917 call isArray arr[116910]))
    (564287 'move' tmp[564282](564285 call _cond_test call_tmp[649874]))
    if tmp[564282]
    {
      unknown tmp[564289] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564291 'move' tmp[564289](116919 call _value _mt[243] arr[116910]))
      (564296 'move' tmp[564281](564293 '_paramFoldLogical' tmp[564282] tmp[564289]))
    }
    {
      (564301 'move' tmp[564281](564298 '_paramFoldLogical' tmp[564282] arr[116910]))
    }
    (542740 'init var' value[116926] tmp[564281])
    (116929 'end of statement')
    unknown call_tmp[649883] "maybe param" "maybe type" "temp"
    (649886 'move' call_tmp[649883](116936 call(116932 call (partial) isSliceArrayView _mt[243] value[116926])))
    unknown isSlice[116937] "dead at end of block" "param"
    (542742 'init var' isSlice[116937] call_tmp[649883])
    (116940 'end of statement')
    unknown call_tmp[649890] "maybe param" "maybe type" "temp"
    (649893 'move' call_tmp[649890](116946 call(116942 call (partial) isRankChangeArrayView _mt[243] value[116926])))
    unknown isRankChange[116947] "dead at end of block" "param"
    (542744 'init var' isRankChange[116947] call_tmp[649890])
    (116950 'end of statement')
    unknown call_tmp[649897] "maybe param" "maybe type" "temp"
    (649900 'move' call_tmp[649897](116956 call(116952 call (partial) isReindexArrayView _mt[243] value[116926])))
    unknown isReindex[116957] "dead at end of block" "param"
    (542746 'init var' isReindex[116957] call_tmp[649897])
    (116960 'end of statement' value[116926] value[116926] value[116926])
    unknown tmp[424170] "maybe param" "temp"
    unknown tmp[424191] "maybe param" "temp"
    (424202 'move' tmp[424191] isSlice[116937])
    unknown call_tmp[649902] "expr temp" "maybe param" "maybe type" "temp"
    (649905 'move' call_tmp[649902](424204 call _cond_invalid tmp[424191]))
    if call_tmp[649902]
    {
      (424207 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564308] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564309] "maybe param" "temp"
    unknown call_tmp[649907] "expr temp" "maybe param" "maybe type" "temp"
    (649910 'move' call_tmp[649907](424192 call isTrue tmp[424191]))
    (564314 'move' tmp[564309](564312 call _cond_test call_tmp[649907]))
    if tmp[564309]
    {
      (564319 'move' tmp[564308](564316 '_paramFoldLogical' tmp[564309] 1))
    }
    {
      unknown tmp[564321] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564323 'move' tmp[564321](424196 call isTrue isRankChange[116947]))
      (564328 'move' tmp[564308](564325 '_paramFoldLogical' tmp[564309] tmp[564321]))
    }
    (424181 'move' tmp[424170] tmp[564308])
    unknown call_tmp[649912] "expr temp" "maybe param" "maybe type" "temp"
    (649915 'move' call_tmp[649912](424183 call _cond_invalid tmp[424170]))
    if call_tmp[649912]
    {
      (424186 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564335] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564336] "maybe param" "temp"
    unknown call_tmp[649917] "expr temp" "maybe param" "maybe type" "temp"
    (649920 'move' call_tmp[649917](424171 call isTrue tmp[424170]))
    (564341 'move' tmp[564336](564339 call _cond_test call_tmp[649917]))
    if tmp[564336]
    {
      (564346 'move' tmp[564335](564343 '_paramFoldLogical' tmp[564336] 1))
    }
    {
      unknown tmp[564348] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564350 'move' tmp[564348](424175 call isTrue isReindex[116957]))
      (564355 'move' tmp[564335](564352 '_paramFoldLogical' tmp[564336] tmp[564348]))
    }
    (516043 'move' ret[516038](516042 'deref' tmp[564335]))
    (516040 return ret[516038])
  }
  function chpl__getActualArray[116976](arg arr[116974]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516047] "RVV" "temp"
    unknown value[116990] "dead at end of block" "insert auto destroy"
    unknown tmp[564362] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564363] "maybe param" "temp"
    unknown call_tmp[649922] "expr temp" "maybe param" "maybe type" "temp"
    (649925 'move' call_tmp[649922](116981 call isArray arr[116974]))
    (564368 'move' tmp[564363](564366 call _cond_test call_tmp[649922]))
    if tmp[564363]
    {
      unknown tmp[564370] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564372 'move' tmp[564370](116983 call _value _mt[243] arr[116974]))
      (564377 'move' tmp[564362](564374 '_paramFoldLogical' tmp[564363] tmp[564370]))
    }
    {
      (564382 'move' tmp[564362](564379 '_paramFoldLogical' tmp[564363] arr[116974]))
    }
    (542748 'init var' value[116990] tmp[564362])
    (116993 'end of statement')
    unknown ret[117011] "dead at end of block" "insert auto destroy"
    unknown tmp[564389] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564390] "maybe param" "temp"
    unknown call_tmp[649929] "expr temp" "maybe param" "maybe type" "temp"
    (649932 'move' call_tmp[649929](116998 call chpl__isArrayView value[116990]))
    (564395 'move' tmp[564390](564393 call _cond_test call_tmp[649929]))
    if tmp[564390]
    {
      unknown tmp[564397] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564399 'move' tmp[564397](117006 call(117002 call (partial) _getActualArray _mt[243] value[116990])))
      (564404 'move' tmp[564389](564401 '_paramFoldLogical' tmp[564390] tmp[564397]))
    }
    {
      (564409 'move' tmp[564389](564406 '_paramFoldLogical' tmp[564390] value[116990]))
    }
    (542750 'init var' ret[117011] tmp[564389])
    (117014 'end of statement' value[116990] value[116990] value[116990])
    (516052 'move' ret[516047](516051 'deref' ret[117011]))
    gotoReturn _end_chpl__getActualArray[516045] _end_chpl__getActualArray[516045]
    (479358 'end of statement' ret[117011])
    label _end_chpl__getActualArray[516045]
    (516049 return ret[516047])
  }
  function chpl__isDROrDRView[117024](arg arg[117022]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516058] "RVV" "param" "temp"
    unknown tmp[424317] "maybe param" "temp"
    (424328 'move' tmp[424317](117029 call isDomain arg[117022]))
    unknown call_tmp[649936] "expr temp" "maybe param" "maybe type" "temp"
    (649939 'move' call_tmp[649936](424330 call _cond_invalid tmp[424317]))
    if call_tmp[649936]
    {
      (424333 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564416] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564417] "maybe param" "temp"
    unknown call_tmp[649941] "expr temp" "maybe param" "maybe type" "temp"
    (649944 'move' call_tmp[649941](424318 call isTrue tmp[424317]))
    (564422 'move' tmp[564417](564420 call _cond_test call_tmp[649941]))
    if tmp[564417]
    {
      (564427 'move' tmp[564416](564424 '_paramFoldLogical' tmp[564417] 1))
    }
    {
      unknown tmp[564429] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649946] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (649949 'move' call_tmp[649946](117032 'typeof' arg[117022]))
      unknown call_tmp[649951] "expr temp" "maybe param" "maybe type" "temp"
      (649954 'move' call_tmp[649951](354288 'is_subtype' BaseDom[372743](?) call_tmp[649946]))
      (564431 'move' tmp[564429](424322 call isTrue call_tmp[649951]))
      (564436 'move' tmp[564416](564433 '_paramFoldLogical' tmp[564417] tmp[564429]))
    }
    unknown call_tmp[649956] "expr temp" "maybe param" "maybe type" "temp"
    (649959 'move' call_tmp[649956](117180 call _cond_test tmp[564416]))
    if call_tmp[649956]
    {
      const value[117050] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[564443] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564444] "maybe param" "temp"
      unknown call_tmp[649961] "expr temp" "maybe param" "maybe type" "temp"
      (649964 'move' call_tmp[649961](117041 call isDomain arg[117022]))
      (564449 'move' tmp[564444](564447 call _cond_test call_tmp[649961]))
      if tmp[564444]
      {
        unknown tmp[564451] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564453 'move' tmp[564451](117043 call _value _mt[243] arg[117022]))
        (564458 'move' tmp[564443](564455 '_paramFoldLogical' tmp[564444] tmp[564451]))
      }
      {
        (564463 'move' tmp[564443](564460 '_paramFoldLogical' tmp[564444] arg[117022]))
      }
      (542752 'init var' value[117050] tmp[564443])
      (117053 'end of statement')
      unknown call_tmp[649970] "maybe param" "maybe type" "temp"
      (649973 'move' call_tmp[649970](117060 call(117056 call (partial) isDefaultRectangular _mt[243] value[117050])))
      unknown isDR[117061] "dead at end of block" "param"
      (542754 'init var' isDR[117061] call_tmp[649970])
      (117064 'end of statement')
      unknown tmp[424212] "maybe param" "temp"
      (424223 'move' tmp[424212](117068 call chpl__isDomainView value[117050]))
      unknown call_tmp[649975] "expr temp" "maybe param" "maybe type" "temp"
      (649978 'move' call_tmp[649975](424225 call _cond_invalid tmp[424212]))
      if call_tmp[649975]
      {
        (424228 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[117080] "dead at end of block" "param"
      unknown tmp[564470] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564471] "maybe param" "temp"
      unknown call_tmp[649980] "expr temp" "maybe param" "maybe type" "temp"
      (649983 'move' call_tmp[649980](424213 call isTrue tmp[424212]))
      (564476 'move' tmp[564471](564474 call _cond_test call_tmp[649980]))
      if tmp[564471]
      {
        unknown tmp[564478] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[649985] "expr temp" "maybe param" "maybe type" "temp"
        (649988 'move' call_tmp[649985](117072 call chpl__getActualDomain value[117050]))
        unknown call_tmp[649992] "expr temp" "maybe param" "maybe type" "temp"
        (649995 'move' call_tmp[649992](117077 call(117073 call (partial) isDefaultRectangular _mt[243] call_tmp[649985])))
        (564480 'move' tmp[564478](424216 call isTrue call_tmp[649992]))
        (564485 'move' tmp[564470](564482 '_paramFoldLogical' tmp[564471] tmp[564478]))
      }
      {
        (564490 'move' tmp[564470](564487 '_paramFoldLogical' tmp[564471] 0))
      }
      (542756 'init var' isDRView[117080] tmp[564470])
      (117083 'end of statement' value[117050] value[117050])
      unknown tmp[424233] "maybe param" "temp"
      (424244 'move' tmp[424233] isDR[117061])
      unknown call_tmp[649997] "expr temp" "maybe param" "maybe type" "temp"
      (650000 'move' call_tmp[649997](424246 call _cond_invalid tmp[424233]))
      if call_tmp[649997]
      {
        (424249 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564497] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564498] "maybe param" "temp"
      unknown call_tmp[650002] "expr temp" "maybe param" "maybe type" "temp"
      (650005 'move' call_tmp[650002](424234 call isTrue tmp[424233]))
      (564503 'move' tmp[564498](564501 call _cond_test call_tmp[650002]))
      if tmp[564498]
      {
        (564508 'move' tmp[564497](564505 '_paramFoldLogical' tmp[564498] 1))
      }
      {
        unknown tmp[564510] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564512 'move' tmp[564510](424238 call isTrue isDRView[117080]))
        (564517 'move' tmp[564497](564514 '_paramFoldLogical' tmp[564498] tmp[564510]))
      }
      (516063 'move' ret[516058](516062 'deref' tmp[564497]))
      gotoReturn _end_chpl__isDROrDRView[516056] _end_chpl__isDROrDRView[516056]
    }
    {
      unknown tmp[424296] "maybe param" "temp"
      (424307 'move' tmp[424296](117093 call isArray arg[117022]))
      unknown call_tmp[650007] "expr temp" "maybe param" "maybe type" "temp"
      (650010 'move' call_tmp[650007](424309 call _cond_invalid tmp[424296]))
      if call_tmp[650007]
      {
        (424312 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564524] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564525] "maybe param" "temp"
      unknown call_tmp[650012] "expr temp" "maybe param" "maybe type" "temp"
      (650015 'move' call_tmp[650012](424297 call isTrue tmp[424296]))
      (564530 'move' tmp[564525](564528 call _cond_test call_tmp[650012]))
      if tmp[564525]
      {
        (564535 'move' tmp[564524](564532 '_paramFoldLogical' tmp[564525] 1))
      }
      {
        unknown tmp[564537] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650017] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (650020 'move' call_tmp[650017](117096 'typeof' arg[117022]))
        unknown call_tmp[650022] "expr temp" "maybe param" "maybe type" "temp"
        (650025 'move' call_tmp[650022](354289 'is_subtype' BaseArr[382320](?) call_tmp[650017]))
        (564539 'move' tmp[564537](424301 call isTrue call_tmp[650022]))
        (564544 'move' tmp[564524](564541 '_paramFoldLogical' tmp[564525] tmp[564537]))
      }
      unknown call_tmp[650027] "expr temp" "maybe param" "maybe type" "temp"
      (650030 'move' call_tmp[650027](117176 call _cond_test tmp[564524]))
      if call_tmp[650027]
      {
        const value[117114] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[564551] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564552] "maybe param" "temp"
        unknown call_tmp[650032] "expr temp" "maybe param" "maybe type" "temp"
        (650035 'move' call_tmp[650032](117105 call isArray arg[117022]))
        (564557 'move' tmp[564552](564555 call _cond_test call_tmp[650032]))
        if tmp[564552]
        {
          unknown tmp[564559] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564561 'move' tmp[564559](117107 call _value _mt[243] arg[117022]))
          (564566 'move' tmp[564551](564563 '_paramFoldLogical' tmp[564552] tmp[564559]))
        }
        {
          (564571 'move' tmp[564551](564568 '_paramFoldLogical' tmp[564552] arg[117022]))
        }
        (542758 'init var' value[117114] tmp[564551])
        (117117 'end of statement')
        unknown call_tmp[650041] "maybe param" "maybe type" "temp"
        (650044 'move' call_tmp[650041](117124 call(117120 call (partial) isDefaultRectangular _mt[243] value[117114])))
        unknown isDR[117125] "dead at end of block" "param"
        (542760 'init var' isDR[117125] call_tmp[650041])
        (117128 'end of statement')
        unknown tmp[424254] "maybe param" "temp"
        (424265 'move' tmp[424254](117132 call chpl__isArrayView value[117114]))
        unknown call_tmp[650046] "expr temp" "maybe param" "maybe type" "temp"
        (650049 'move' call_tmp[650046](424267 call _cond_invalid tmp[424254]))
        if call_tmp[650046]
        {
          (424270 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[117144] "dead at end of block" "param"
        unknown tmp[564578] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564579] "maybe param" "temp"
        unknown call_tmp[650051] "expr temp" "maybe param" "maybe type" "temp"
        (650054 'move' call_tmp[650051](424255 call isTrue tmp[424254]))
        (564584 'move' tmp[564579](564582 call _cond_test call_tmp[650051]))
        if tmp[564579]
        {
          unknown tmp[564586] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[650056] "expr temp" "maybe param" "maybe type" "temp"
          (650059 'move' call_tmp[650056](117136 call chpl__getActualArray value[117114]))
          unknown call_tmp[650063] "expr temp" "maybe param" "maybe type" "temp"
          (650066 'move' call_tmp[650063](117141 call(117137 call (partial) isDefaultRectangular _mt[243] call_tmp[650056])))
          (564588 'move' tmp[564586](424258 call isTrue call_tmp[650063]))
          (564593 'move' tmp[564578](564590 '_paramFoldLogical' tmp[564579] tmp[564586]))
        }
        {
          (564598 'move' tmp[564578](564595 '_paramFoldLogical' tmp[564579] 0))
        }
        (542762 'init var' isDRView[117144] tmp[564578])
        (117147 'end of statement' value[117114] value[117114])
        unknown tmp[424275] "maybe param" "temp"
        (424286 'move' tmp[424275] isDR[117125])
        unknown call_tmp[650068] "expr temp" "maybe param" "maybe type" "temp"
        (650071 'move' call_tmp[650068](424288 call _cond_invalid tmp[424275]))
        if call_tmp[650068]
        {
          (424291 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[564605] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564606] "maybe param" "temp"
        unknown call_tmp[650073] "expr temp" "maybe param" "maybe type" "temp"
        (650076 'move' call_tmp[650073](424276 call isTrue tmp[424275]))
        (564611 'move' tmp[564606](564609 call _cond_test call_tmp[650073]))
        if tmp[564606]
        {
          (564616 'move' tmp[564605](564613 '_paramFoldLogical' tmp[564606] 1))
        }
        {
          unknown tmp[564618] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564620 'move' tmp[564618](424280 call isTrue isDRView[117144]))
          (564625 'move' tmp[564605](564622 '_paramFoldLogical' tmp[564606] tmp[564618]))
        }
        (516068 'move' ret[516058](516067 'deref' tmp[564605]))
        gotoReturn _end_chpl__isDROrDRView[516056] _end_chpl__isDROrDRView[516056]
      }
      {
        (117173 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
    label _end_chpl__isDROrDRView[516056]
    (516060 return ret[516058])
  }
  function chpl__isDomainView[117192](arg dom[117190]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516074] "RVV" "param" "temp"
    const value[117206] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564632] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564633] "maybe param" "temp"
    unknown call_tmp[650078] "expr temp" "maybe param" "maybe type" "temp"
    (650081 'move' call_tmp[650078](117197 call isDomain dom[117190]))
    (564638 'move' tmp[564633](564636 call _cond_test call_tmp[650078]))
    if tmp[564633]
    {
      unknown tmp[564640] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564642 'move' tmp[564640](117199 call _value _mt[243] dom[117190]))
      (564647 'move' tmp[564632](564644 '_paramFoldLogical' tmp[564633] tmp[564640]))
    }
    {
      (564652 'move' tmp[564632](564649 '_paramFoldLogical' tmp[564633] dom[117190]))
    }
    (542764 'init var' value[117206] tmp[564632])
    (117209 'end of statement')
    unknown call_tmp[650087] "maybe param" "maybe type" "temp"
    (650090 'move' call_tmp[650087](117218 call(117214 call (partial) isSliceDomainView _mt[243] value[117206])))
    unknown isSlice[117219] "dead at end of block" "param"
    (542766 'init var' isSlice[117219] call_tmp[650087])
    (117222 'end of statement')
    unknown call_tmp[650094] "maybe param" "maybe type" "temp"
    (650097 'move' call_tmp[650094](117230 call(117226 call (partial) isRankChangeDomainView _mt[243] value[117206])))
    unknown isRankChange[117231] "dead at end of block" "param"
    (542768 'init var' isRankChange[117231] call_tmp[650094])
    (117234 'end of statement')
    unknown call_tmp[650101] "maybe param" "maybe type" "temp"
    (650104 'move' call_tmp[650101](117242 call(117238 call (partial) isReindexDomainView _mt[243] value[117206])))
    unknown isReindex[117243] "dead at end of block" "param"
    (542770 'init var' isReindex[117243] call_tmp[650101])
    (117246 'end of statement' value[117206] value[117206] value[117206])
    unknown tmp[424338] "maybe param" "temp"
    unknown tmp[424359] "maybe param" "temp"
    (424370 'move' tmp[424359] isSlice[117219])
    unknown call_tmp[650106] "expr temp" "maybe param" "maybe type" "temp"
    (650109 'move' call_tmp[650106](424372 call _cond_invalid tmp[424359]))
    if call_tmp[650106]
    {
      (424375 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564659] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564660] "maybe param" "temp"
    unknown call_tmp[650111] "expr temp" "maybe param" "maybe type" "temp"
    (650114 'move' call_tmp[650111](424360 call isTrue tmp[424359]))
    (564665 'move' tmp[564660](564663 call _cond_test call_tmp[650111]))
    if tmp[564660]
    {
      (564670 'move' tmp[564659](564667 '_paramFoldLogical' tmp[564660] 1))
    }
    {
      unknown tmp[564672] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564674 'move' tmp[564672](424364 call isTrue isRankChange[117231]))
      (564679 'move' tmp[564659](564676 '_paramFoldLogical' tmp[564660] tmp[564672]))
    }
    (424349 'move' tmp[424338] tmp[564659])
    unknown call_tmp[650116] "expr temp" "maybe param" "maybe type" "temp"
    (650119 'move' call_tmp[650116](424351 call _cond_invalid tmp[424338]))
    if call_tmp[650116]
    {
      (424354 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564686] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564687] "maybe param" "temp"
    unknown call_tmp[650121] "expr temp" "maybe param" "maybe type" "temp"
    (650124 'move' call_tmp[650121](424339 call isTrue tmp[424338]))
    (564692 'move' tmp[564687](564690 call _cond_test call_tmp[650121]))
    if tmp[564687]
    {
      (564697 'move' tmp[564686](564694 '_paramFoldLogical' tmp[564687] 1))
    }
    {
      unknown tmp[564699] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564701 'move' tmp[564699](424343 call isTrue isReindex[117243]))
      (564706 'move' tmp[564686](564703 '_paramFoldLogical' tmp[564687] tmp[564699]))
    }
    (516079 'move' ret[516074](516078 'deref' tmp[564686]))
    (516076 return ret[516074])
  }
  function chpl__getActualDomain[117262](arg dom[117260]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516083] "RVV" "temp"
    unknown value[117276] "dead at end of block" "insert auto destroy"
    unknown tmp[564713] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564714] "maybe param" "temp"
    unknown call_tmp[650126] "expr temp" "maybe param" "maybe type" "temp"
    (650129 'move' call_tmp[650126](117267 call isDomain dom[117260]))
    (564719 'move' tmp[564714](564717 call _cond_test call_tmp[650126]))
    if tmp[564714]
    {
      unknown tmp[564721] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564723 'move' tmp[564721](117269 call _value _mt[243] dom[117260]))
      (564728 'move' tmp[564713](564725 '_paramFoldLogical' tmp[564714] tmp[564721]))
    }
    {
      (564733 'move' tmp[564713](564730 '_paramFoldLogical' tmp[564714] dom[117260]))
    }
    (542772 'init var' value[117276] tmp[564713])
    (117279 'end of statement')
    unknown ret[117297] "dead at end of block" "insert auto destroy"
    unknown tmp[564740] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564741] "maybe param" "temp"
    unknown call_tmp[650133] "expr temp" "maybe param" "maybe type" "temp"
    (650136 'move' call_tmp[650133](117284 call chpl__isDomainView value[117276]))
    (564746 'move' tmp[564741](564744 call _cond_test call_tmp[650133]))
    if tmp[564741]
    {
      unknown tmp[564748] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564750 'move' tmp[564748](117292 call(117288 call (partial) _getActualDomain _mt[243] value[117276])))
      (564755 'move' tmp[564740](564752 '_paramFoldLogical' tmp[564741] tmp[564748]))
    }
    {
      (564760 'move' tmp[564740](564757 '_paramFoldLogical' tmp[564741] value[117276]))
    }
    (542774 'init var' ret[117297] tmp[564740])
    (117300 'end of statement' value[117276] value[117276] value[117276])
    (516088 'move' ret[516083](516087 'deref' ret[117297]))
    gotoReturn _end_chpl__getActualDomain[516081] _end_chpl__getActualDomain[516081]
    (479382 'end of statement' ret[117297])
    label _end_chpl__getActualDomain[516081]
    (516085 return ret[516083])
  }
  function chpl__isRectangularDomType[117310](arg domainType[117308]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516094] "RVV" "param" "temp"
    unknown dom[117313] "dead at end of block" "insert auto destroy"
    (542776 'default init var' dom[117313] domainType[117308])
    (117316 'end of statement')
    unknown tmp[424380] "maybe param" "temp"
    (424391 'move' tmp[424380](117321 call isDomainType domainType[117308]))
    unknown call_tmp[650140] "expr temp" "maybe param" "maybe type" "temp"
    (650143 'move' call_tmp[650140](424393 call _cond_invalid tmp[424380]))
    if call_tmp[650140]
    {
      (424396 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564767] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564768] "maybe param" "temp"
    unknown call_tmp[650145] "expr temp" "maybe param" "maybe type" "temp"
    (650148 'move' call_tmp[650145](424381 call isTrue tmp[424380]))
    (564773 'move' tmp[564768](564771 call _cond_test call_tmp[650145]))
    if tmp[564768]
    {
      unknown tmp[564775] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650150] "expr temp" "maybe param" "maybe type" "temp"
      (650153 'move' call_tmp[650150](117325 call isRectangularDom dom[117313]))
      (564777 'move' tmp[564775](424384 call isTrue call_tmp[650150]))
      (564782 'move' tmp[564767](564779 '_paramFoldLogical' tmp[564768] tmp[564775]))
    }
    {
      (564787 'move' tmp[564767](564784 '_paramFoldLogical' tmp[564768] 0))
    }
    (516099 'move' ret[516094](516098 'deref' tmp[564767]))
    gotoReturn _end_chpl__isRectangularDomType[516092] _end_chpl__isRectangularDomType[516092]
    (479385 'end of statement' dom[117313])
    label _end_chpl__isRectangularDomType[516092]
    (516096 return ret[516094])
  }
  function chpl__isSparseDomType[117336](arg domainType[117334]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516105] "RVV" "param" "temp"
    unknown dom[117339] "dead at end of block" "insert auto destroy"
    (542778 'default init var' dom[117339] domainType[117334])
    (117342 'end of statement')
    unknown call_tmp[650155] "expr temp" "maybe param" "maybe type" "temp"
    (650158 'move' call_tmp[650155](117347 call isSparseDom dom[117339]))
    (516110 'move' ret[516105](516109 'deref' call_tmp[650155]))
    gotoReturn _end_chpl__isSparseDomType[516103] _end_chpl__isSparseDomType[516103]
    (479387 'end of statement' dom[117339])
    label _end_chpl__isSparseDomType[516103]
    (516107 return ret[516105])
  }
  function chpl__parentDomainFromDomainRuntimeType[117356](arg domainType[117354]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516116] "RVV" "temp"
    unknown call_tmp[650160] "maybe param" "maybe type" "temp"
    (650163 'move' call_tmp[650160](117392 'get runtime type field' domainType[117354] "parentDom"))
    unknown parentDom[117393] "dead at end of block" "no auto destroy" "no copy"
    (542780 'init var' parentDom[117393] call_tmp[650160])
    (117396 'end of statement')
    unknown call_tmp[650167] "expr temp" "maybe param" "maybe type" "temp"
    (650170 'move' call_tmp[650167](117400 call _value _mt[243] parentDom[117393]))
    unknown call_tmp[650172] "expr temp" "maybe param" "maybe type" "temp"
    (650175 'move' call_tmp[650172](117404 call _getDomain call_tmp[650167]))
    (516121 'move' ret[516116](516120 'deref' call_tmp[650172]))
    gotoReturn _end_chpl__parentDomainFromDomainRuntimeType[516114] _end_chpl__parentDomainFromDomainRuntimeType[516114]
    (479389 'end of statement' parentDom[117393])
    label _end_chpl__parentDomainFromDomainRuntimeType[516114]
    (516118 return ret[516116])
  }
  function chpl__distributed[117415](arg d[117412]:_distribution[118967](?), arg domainType[117417]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516127] "RVV" "temp" "type variable"
    unknown call_tmp[650177] "expr temp" "maybe param" "maybe type" "temp"
    (650180 'move' call_tmp[650177](117422 call isDomainType domainType[117417]))
    unknown call_tmp[650182] "expr temp" "maybe param" "maybe type" "temp"
    (650185 'move' call_tmp[650182](117423 call ! call_tmp[650177]))
    unknown call_tmp[650187] "expr temp" "maybe param" "maybe type" "temp"
    (650190 'move' call_tmp[650187](117450 call _cond_test call_tmp[650182]))
    if call_tmp[650187]
    {
      unknown call_tmp[650192] "expr temp" "maybe param" "maybe type" "temp"
      (650195 'move' call_tmp[650192](117446 call _cast string[26] domainType[117417]))
      (117448 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[650192])
    }
    unknown call_tmp[650197] "expr temp" "maybe param" "maybe type" "temp"
    (650200 'move' call_tmp[650197](117459 call chpl__isRectangularDomType domainType[117417]))
    unknown call_tmp[650202] "expr temp" "maybe param" "maybe type" "temp"
    (650205 'move' call_tmp[650202](117543 call _cond_test call_tmp[650197]))
    if call_tmp[650202]
    {
      unknown dom[117461] "dead at end of block" "insert auto destroy"
      (542782 'default init var' dom[117461] domainType[117417])
      (117464 'end of statement')
      unknown call_tmp[650209] "expr temp" "maybe param" "maybe type" "temp"
      (650212 'move' call_tmp[650209](117470 call _value _mt[243] dom[117461]))
      unknown call_tmp[650216] "expr temp" "maybe param" "maybe type" "temp"
      (650219 'move' call_tmp[650216](117473 call rank _mt[243] call_tmp[650209]))
      unknown call_tmp[650223] "expr temp" "maybe param" "maybe type" "temp"
      (650226 'move' call_tmp[650223](117477 call _value _mt[243] dom[117461]))
      unknown call_tmp[650230] "expr temp" "maybe param" "maybe type" "temp"
      (650233 'move' call_tmp[650230](117480 call idxType _mt[243] call_tmp[650223]))
      unknown call_tmp[650237] "expr temp" "maybe param" "maybe type" "temp"
      (650240 'move' call_tmp[650237](117484 call _value _mt[243] dom[117461]))
      unknown call_tmp[650244] "expr temp" "maybe param" "maybe type" "temp"
      (650247 'move' call_tmp[650244](117487 call stridable _mt[243] call_tmp[650237]))
      unknown call_tmp[650249] "expr temp" "maybe param" "maybe type" "temp"
      (650252 'move' call_tmp[650249](117490 call chpl__buildDomainRuntimeType d[117412] call_tmp[650216] call_tmp[650230] call_tmp[650244]))
      (516132 'move' ret[516127](516131 'deref' call_tmp[650249]))
      gotoReturn _end_chpl__distributed[516125] _end_chpl__distributed[516125]
      (479392 'end of statement' dom[117461] dom[117461] dom[117461])
    }
    {
      unknown call_tmp[650254] "expr temp" "maybe param" "maybe type" "temp"
      (650257 'move' call_tmp[650254](117496 call chpl__isSparseDomType domainType[117417]))
      unknown call_tmp[650259] "expr temp" "maybe param" "maybe type" "temp"
      (650262 'move' call_tmp[650259](117539 call _cond_test call_tmp[650254]))
      if call_tmp[650259]
      {
        const parentDom[117501] "dead at end of block" "const" "ref var"
        unknown call_tmp[650264] "expr temp" "maybe param" "maybe type" "temp"
        (650267 'move' call_tmp[650264](117500 call chpl__parentDomainFromDomainRuntimeType domainType[117417]))
        (542785 'move' parentDom[117501](542784 'addr of' call_tmp[650264]))
        (117504 'end of statement')
        unknown call_tmp[650269] "expr temp" "maybe param" "maybe type" "temp"
        (650272 'move' call_tmp[650269](117510 call chpl__buildSparseDomainRuntimeType d[117412] parentDom[117501]))
        (516137 'move' ret[516127](516136 'deref' call_tmp[650269]))
        gotoReturn _end_chpl__distributed[516125] _end_chpl__distributed[516125]
        (479396 'end of statement' parentDom[117501])
      }
      {
        unknown dom[117514] "dead at end of block" "insert auto destroy"
        (542787 'default init var' dom[117514] domainType[117417])
        (117517 'end of statement')
        unknown call_tmp[650276] "expr temp" "maybe param" "maybe type" "temp"
        (650279 'move' call_tmp[650276](117523 call _value _mt[243] dom[117514]))
        unknown call_tmp[650283] "expr temp" "maybe param" "maybe type" "temp"
        (650286 'move' call_tmp[650283](117526 call idxType _mt[243] call_tmp[650276]))
        unknown call_tmp[650290] "expr temp" "maybe param" "maybe type" "temp"
        (650293 'move' call_tmp[650290](117530 call _value _mt[243] dom[117514]))
        unknown call_tmp[650297] "expr temp" "maybe param" "maybe type" "temp"
        (650300 'move' call_tmp[650297](117533 call parSafe _mt[243] call_tmp[650290]))
        unknown call_tmp[650302] "expr temp" "maybe param" "maybe type" "temp"
        (650305 'move' call_tmp[650302](117536 call chpl__buildDomainRuntimeType d[117412] call_tmp[650283] call_tmp[650297]))
        (516142 'move' ret[516127](516141 'deref' call_tmp[650302]))
        gotoReturn _end_chpl__distributed[516125] _end_chpl__distributed[516125]
        (479398 'end of statement' dom[117514] dom[117514])
      }
    }
    label _end_chpl__distributed[516125]
    (516129 return ret[516127])
  }
  function chpl__distributionFromDomainRuntimeType[117554](arg rtt[117552]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516148] "RVV" "temp"
    unknown call_tmp[650307] "maybe param" "maybe type" "temp"
    (650310 'move' call_tmp[650307](117574 'get runtime type field' rtt[117552] "dist"))
    unknown dist[117575] "dead at end of block" "no auto destroy" "no copy"
    (542789 'init var' dist[117575] call_tmp[650307])
    (117578 'end of statement')
    unknown call_tmp[650314] "expr temp" "maybe param" "maybe type" "temp"
    (650317 'move' call_tmp[650314](117582 call _value _mt[243] dist[117575]))
    unknown call_tmp[650319] "expr temp" "maybe param" "maybe type" "temp"
    (650322 'move' call_tmp[650319](117586 call _getDistribution call_tmp[650314]))
    (516153 'move' ret[516148](516152 'deref' call_tmp[650319]))
    gotoReturn _end_chpl__distributionFromDomainRuntimeType[516146] _end_chpl__distributionFromDomainRuntimeType[516146]
    (479401 'end of statement' dist[117575])
    label _end_chpl__distributionFromDomainRuntimeType[516146]
    (516150 return ret[516148])
  }
  function chpl__domainFromArrayRuntimeType[117595](arg rtt[117593]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516159] "RVV" "temp"
    unknown call_tmp[650324] "maybe param" "maybe type" "temp"
    (650327 'move' call_tmp[650324](117601 'get runtime type field' rtt[117593] "dom"))
    unknown dom[117602] "dead at end of block" "no auto destroy" "no copy"
    (542791 'init var' dom[117602] call_tmp[650324])
    (117605 'end of statement')
    unknown call_tmp[650331] "expr temp" "maybe param" "maybe type" "temp"
    (650334 'move' call_tmp[650331](117609 call _value _mt[243] dom[117602]))
    unknown call_tmp[650336] "expr temp" "maybe param" "maybe type" "temp"
    (650339 'move' call_tmp[650336](117613 call _getDomain call_tmp[650331]))
    (516164 'move' ret[516159](516163 'deref' call_tmp[650336]))
    gotoReturn _end_chpl__domainFromArrayRuntimeType[516157] _end_chpl__domainFromArrayRuntimeType[516157]
    (479403 'end of statement' dom[117602])
    label _end_chpl__domainFromArrayRuntimeType[516157]
    (516161 return ret[516159])
  }
  function chpl__eltTypeFromArrayRuntimeType[117622](arg rtt[117620]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516170] "RVV" "temp" "type variable"
    unknown eltType[117643] "dead at end of block" "no auto destroy" "no copy" "type variable"(117642 'get runtime type field' rtt[117620] "eltType")
    (542796 'move' eltType[117643](542793 'get runtime type field' rtt[117620] "eltType"))
    (479405 'end of statement')
    (516175 'move' ret[516170](516174 'deref' eltType[117643]))
    gotoReturn _end_chpl__eltTypeFromArrayRuntimeType[516168] _end_chpl__eltTypeFromArrayRuntimeType[516168]
    (479406 'end of statement' eltType[117643])
    label _end_chpl__eltTypeFromArrayRuntimeType[516168]
    (516172 return ret[516170])
  }
  function chpl__instanceTypeFromArrayRuntimeType[117656](arg rtt[117654]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    unknown ret[516181] "RVV" "temp" "type variable"
    (117693 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (479408 'end of statement')
    unknown call_tmp[650341] "expr temp" "maybe param" "maybe type" "temp"
    (650344 'move' call_tmp[650341](117700 'static field type' rtt[117654] "_instance"))
    (516186 'move' ret[516181](516185 'deref' call_tmp[650341]))
    (516183 return ret[516181])
  }
  function chpl__buildIndexType[117711](param arg rank[117708]:int(64)[13], arg idxType[117713]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516190] "RVV" "temp" "type variable"
    (516195 'move' ret[516190](516194 'deref' idxType[117713]))
    (516192 return ret[516190])
  }
  where {
    (117717 call == rank[117708] 1)
  }
  function chpl__buildIndexType[117732](param arg rank[117729]:int(64)[13], arg idxType[117734]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516199] "RVV" "temp" "type variable"
    unknown call_tmp[650346] "expr temp" "maybe param" "maybe type" "temp"
    (650349 'move' call_tmp[650346](117742 call * rank[117729] idxType[117734]))
    (516204 'move' ret[516199](516203 'deref' call_tmp[650346]))
    (516201 return ret[516199])
  }
  where {
    (117738 call > rank[117729] 1)
  }
  function chpl__buildIndexType[117756](param arg rank[117753]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[516208] "RVV" "temp" "type variable"
    unknown call_tmp[650351] "expr temp" "maybe param" "maybe type" "temp"
    (650354 'move' call_tmp[650351](117762 call chpl__buildIndexType rank[117753] int(64)[13]))
    (516213 'move' ret[516208](516212 'deref' call_tmp[650351]))
    (516210 return ret[516208])
  }
  function chpl__buildIndexType[117774](arg d[117771]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[516217] "RVV" "temp" "type variable"
    unknown call_tmp[650358] "expr temp" "maybe param" "maybe type" "temp"
    (650361 'move' call_tmp[650358](117778 call rank _mt[243] d[117771]))
    unknown call_tmp[650365] "expr temp" "maybe param" "maybe type" "temp"
    (650368 'move' call_tmp[650365](117783 call _value _mt[243] d[117771]))
    unknown call_tmp[650372] "expr temp" "maybe param" "maybe type" "temp"
    (650375 'move' call_tmp[650372](117786 call idxType _mt[243] call_tmp[650365]))
    unknown call_tmp[650377] "expr temp" "maybe param" "maybe type" "temp"
    (650380 'move' call_tmp[650377](117789 call chpl__buildIndexType call_tmp[650358] call_tmp[650372]))
    (516222 'move' ret[516217](516221 'deref' call_tmp[650377]))
    (516219 return ret[516217])
  }
  function isRectangularDom[117801](arg d[117798]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516226] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[492109] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650384] "expr temp" "maybe param" "maybe type" "temp"
      (650387 'move' call_tmp[650384](117806 call _value _mt[243] d[117798]))
      (492113 'move' call_type_tmp[492109](117809 'typeof' call_tmp[650384]))
    }
    unknown call_tmp[650389] "expr temp" "maybe param" "maybe type" "temp"
    (650392 'move' call_tmp[650389](117811 call _to_borrowed call_type_tmp[492109]))
    unknown call_tmp[650394] "expr temp" "maybe param" "maybe type" "temp"
    (650397 'move' call_tmp[650394](354290 'is_subtype' BaseRectangularDom[382243](?) call_tmp[650389]))
    (516231 'move' ret[516226](516230 'deref' call_tmp[650394]))
    (516228 return ret[516226])
  }
  function isRectangularArr[117828](arg a[117825]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516235] "RVV" "param" "temp"
    unknown call_tmp[650401] "expr temp" "maybe param" "maybe type" "temp"
    (650404 'move' call_tmp[650401](117832 call _dom _mt[243] a[117825]))
    unknown call_tmp[650406] "expr temp" "maybe param" "maybe type" "temp"
    (650409 'move' call_tmp[650406](117836 call isRectangularDom call_tmp[650401]))
    (516240 'move' ret[516235](516239 'deref' call_tmp[650406]))
    (516237 return ret[516235])
  }
  function isIrregularDom[117848](arg d[117845]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516244] "RVV" "param" "temp"
    unknown tmp[424401] "maybe param" "temp"
    (424412 'move' tmp[424401](117853 call isSparseDom d[117845]))
    unknown call_tmp[650411] "expr temp" "maybe param" "maybe type" "temp"
    (650414 'move' call_tmp[650411](424414 call _cond_invalid tmp[424401]))
    if call_tmp[650411]
    {
      (424417 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564794] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564795] "maybe param" "temp"
    unknown call_tmp[650416] "expr temp" "maybe param" "maybe type" "temp"
    (650419 'move' call_tmp[650416](424402 call isTrue tmp[424401]))
    (564800 'move' tmp[564795](564798 call _cond_test call_tmp[650416]))
    if tmp[564795]
    {
      (564805 'move' tmp[564794](564802 '_paramFoldLogical' tmp[564795] 1))
    }
    {
      unknown tmp[564807] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650421] "expr temp" "maybe param" "maybe type" "temp"
      (650424 'move' call_tmp[650421](117857 call isAssociativeDom d[117845]))
      (564809 'move' tmp[564807](424406 call isTrue call_tmp[650421]))
      (564814 'move' tmp[564794](564811 '_paramFoldLogical' tmp[564795] tmp[564807]))
    }
    (516249 'move' ret[516244](516248 'deref' tmp[564794]))
    (516246 return ret[516244])
  }
  function isIrregularArr[117873](arg a[117870]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516253] "RVV" "param" "temp"
    unknown call_tmp[650428] "expr temp" "maybe param" "maybe type" "temp"
    (650431 'move' call_tmp[650428](117877 call _dom _mt[243] a[117870]))
    unknown call_tmp[650433] "expr temp" "maybe param" "maybe type" "temp"
    (650436 'move' call_tmp[650433](117881 call isIrregularDom call_tmp[650428]))
    (516258 'move' ret[516253](516257 'deref' call_tmp[650433]))
    (516255 return ret[516253])
  }
  function isAssociativeDom[117893](arg d[117890]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516280] "RVV" "param" "temp"
    function isAssociativeDomClass[117901](arg dc[117898]:BaseAssociativeDom[382248](?)) param : _unknown[51]
    {
      unknown ret[516262] "RVV" "param" "temp"
      (516267 'move' ret[516262](516266 'deref' 1))
      (516264 return ret[516262])
    }
    function isAssociativeDomClass[117914](arg dc[117912]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516271] "RVV" "param" "temp"
      (516276 'move' ret[516271](516275 'deref' 0))
      (516273 return ret[516271])
    }
    unknown call_tmp[650440] "expr temp" "maybe param" "maybe type" "temp"
    (650443 'move' call_tmp[650440](117925 call _value _mt[243] d[117890]))
    unknown call_tmp[650445] "expr temp" "maybe param" "maybe type" "temp"
    (650448 'move' call_tmp[650445](117929 call _to_borrowed call_tmp[650440]))
    unknown call_tmp[650450] "expr temp" "maybe param" "maybe type" "temp"
    (650453 'move' call_tmp[650450](117931 call isAssociativeDomClass call_tmp[650445]))
    (516285 'move' ret[516280](516284 'deref' call_tmp[650450]))
    (516282 return ret[516280])
  }
  function isAssociativeArr[117944](arg a[117941]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516289] "RVV" "param" "temp"
    unknown call_tmp[650457] "expr temp" "maybe param" "maybe type" "temp"
    (650460 'move' call_tmp[650457](117948 call _dom _mt[243] a[117941]))
    unknown call_tmp[650462] "expr temp" "maybe param" "maybe type" "temp"
    (650465 'move' call_tmp[650462](117952 call isAssociativeDom call_tmp[650457]))
    (516294 'move' ret[516289](516293 'deref' call_tmp[650462]))
    (516291 return ret[516289])
  }
  function isSparseDom[117964](arg d[117961]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516316] "RVV" "param" "temp"
    function isSparseDomClass[117972](arg dc[117969]:BaseSparseDom[382253](?)) param : _unknown[51]
    {
      unknown ret[516298] "RVV" "param" "temp"
      (516303 'move' ret[516298](516302 'deref' 1))
      (516300 return ret[516298])
    }
    function isSparseDomClass[117985](arg dc[117983]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516307] "RVV" "param" "temp"
      (516312 'move' ret[516307](516311 'deref' 0))
      (516309 return ret[516307])
    }
    unknown call_tmp[650469] "expr temp" "maybe param" "maybe type" "temp"
    (650472 'move' call_tmp[650469](117995 call _value _mt[243] d[117961]))
    unknown call_tmp[650474] "expr temp" "maybe param" "maybe type" "temp"
    (650477 'move' call_tmp[650474](117999 call isSparseDomClass call_tmp[650469]))
    (516321 'move' ret[516316](516320 'deref' call_tmp[650474]))
    (516318 return ret[516316])
  }
  function isSparseArr[118012](arg a[118009]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516325] "RVV" "param" "temp"
    unknown call_tmp[650481] "expr temp" "maybe param" "maybe type" "temp"
    (650484 'move' call_tmp[650481](118016 call _dom _mt[243] a[118009]))
    unknown call_tmp[650486] "expr temp" "maybe param" "maybe type" "temp"
    (650489 'move' call_tmp[650486](118020 call isSparseDom call_tmp[650481]))
    (516330 'move' ret[516325](516329 'deref' call_tmp[650486]))
    (516327 return ret[516325])
  }
  function chpl__checkDomainsMatch[118034](arg a[118031]:_array[133588](?), arg b[118036]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650491] "expr temp" "maybe param" "maybe type" "temp"
    (650494 'move' call_tmp[650491](118080 call _cond_test 1))
    if call_tmp[650491]
    {
      unknown call_tmp[650498] "expr temp" "maybe param" "maybe type" "temp"
      (650501 'move' call_tmp[650498](118044 call _dom _mt[243] a[118031]))
      unknown call_tmp[650503] "expr temp" "maybe param" "maybe type" "temp"
      (650506 'move' call_tmp[650503](118048 call != call_tmp[650498] b[118036]))
      unknown call_tmp[650508] "expr temp" "maybe param" "maybe type" "temp"
      (650511 'move' call_tmp[650508](118075 call _cond_test call_tmp[650503]))
      if call_tmp[650508]
      {
        (118072 call boundsCheckHalt module=[255] HaltWrappers[209998] "domain mismatch on return")
        (359126 'referenced modules list' HaltWrappers[209998])
      }
    }
    (516332 return _void[55])
    (355112 'used modules list'(118039 'import' HaltWrappers[209998]))
  }
  function chpl__checkDomainsMatch[118092](arg a[118089]:_iteratorRecord[205](?), arg b[118094]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650513] "expr temp" "maybe param" "maybe type" "temp"
    (650516 'move' call_tmp[650513](118127 call _cond_test 1))
    if call_tmp[650513]
    {
      unknown tmp[118102] "dead at end of block" "insert auto destroy"
      (542798 'init var' tmp[118102] a[118089])
      (118105 'end of statement')
      unknown call_tmp[650520] "expr temp" "maybe param" "maybe type" "temp"
      (650523 'move' call_tmp[650520](118108 call _dom _mt[243] tmp[118102]))
      unknown call_tmp[650525] "expr temp" "maybe param" "maybe type" "temp"
      (650528 'move' call_tmp[650525](118112 call != call_tmp[650520] b[118094]))
      unknown call_tmp[650530] "expr temp" "maybe param" "maybe type" "temp"
      (650533 'move' call_tmp[650530](118123 call _cond_test call_tmp[650525]))
      if call_tmp[650530]
      {
        (118120 call boundsCheckHalt module=[255] HaltWrappers[209998] "domain mismatch on return")
        (359133 'referenced modules list' HaltWrappers[209998])
      }
    }
    (516334 return _void[55])
    (355114 'used modules list'(118097 'import' HaltWrappers[209998]))
  }
  function chpl__checkEltTypeMatch[118141](arg a[118138]:_array[133588](?), arg b[118143]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650537] "expr temp" "maybe param" "maybe type" "temp"
    (650540 'move' call_tmp[650537](118146 call eltType _mt[243] a[118138]))
    unknown call_tmp[650542] "expr temp" "maybe param" "maybe type" "temp"
    (650545 'move' call_tmp[650542](118150 call != call_tmp[650537] b[118143]))
    unknown call_tmp[650547] "expr temp" "maybe param" "maybe type" "temp"
    (650550 'move' call_tmp[650547](118186 call _cond_test call_tmp[650542]))
    if call_tmp[650547]
    {
      unknown call_tmp[650554] "expr temp" "maybe param" "maybe type" "temp"
      (650557 'move' call_tmp[650554](118172 call eltType _mt[243] a[118138]))
      unknown call_tmp[650559] "expr temp" "maybe param" "maybe type" "temp"
      (650562 'move' call_tmp[650559](118176 call _cast string[26] call_tmp[650554]))
      unknown call_tmp[650564] "expr temp" "maybe param" "maybe type" "temp"
      (650567 'move' call_tmp[650564](118181 call _cast string[26] b[118143]))
      (118183 call compilerError "array element type mismatch in return from " call_tmp[650559] " to " call_tmp[650564])
    }
    (516336 return _void[55])
  }
  function chpl__checkEltTypeMatch[118199](arg a[118196]:_iteratorRecord[205](?), arg b[118201]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650569] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650572 'move' call_tmp[650569](118205 'typeof' a[118196]))
    unknown eltType[118208] "dead at end of block" "insert auto destroy" "type variable"(118207 call iteratorToArrayElementType call_tmp[650569])
    unknown call_tmp[650574] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650577 'move' call_tmp[650574](542802 'typeof' a[118196]))
    (542804 'move' eltType[118208](542801 call iteratorToArrayElementType call_tmp[650574]))
    (479430 'end of statement')
    unknown call_tmp[650579] "expr temp" "maybe param" "maybe type" "temp"
    (650582 'move' call_tmp[650579](118214 call != eltType[118208] b[118201]))
    unknown call_tmp[650584] "expr temp" "maybe param" "maybe type" "temp"
    (650587 'move' call_tmp[650584](118231 call _cond_test call_tmp[650579]))
    if call_tmp[650584]
    {
      unknown call_tmp[650589] "expr temp" "maybe param" "maybe type" "temp"
      (650592 'move' call_tmp[650589](118221 call _cast string[26] eltType[118208]))
      unknown call_tmp[650594] "expr temp" "maybe param" "maybe type" "temp"
      (650597 'move' call_tmp[650594](118226 call _cast string[26] b[118201]))
      (118228 call compilerError "array element type mismatch in return from " call_tmp[650589] " to " call_tmp[650594])
      (479431 'end of statement' eltType[118208])
    }
    (516338 return _void[55])
  }
  type dmap[118239]
  function chpl__buildDistType[118246](arg t[118244]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516342] "RVV" "temp" "type variable"
    unknown x[118261] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650599] "expr temp" "maybe param" "maybe type" "temp"
    (650602 'move' call_tmp[650599](118259 call _to_unmanaged t[118244]))
    unknown call_tmp[650604] "expr temp" "maybe param" "maybe type" "temp"
    (650607 'move' call_tmp[650604](118260 'to nilable class from type' call_tmp[650599]))
    (542806 'default init var' x[118261] call_tmp[650604])
    (118264 'end of statement')
    unknown call_tmp[650609] "expr temp" "maybe param" "maybe type" "temp"
    (650612 'move' call_tmp[650609](118269 call postfix! x[118261]))
    unknown call_tmp[650614] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650617 'move' call_tmp[650614](747866 'new' _distribution[118967](?) call_tmp[650609]))
    unknown y[118273] "dead at end of block" "insert auto destroy"
    (542808 'init var' y[118273] call_tmp[650614])
    (118276 'end of statement' x[118261])
    unknown call_tmp[650619] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650622 'move' call_tmp[650619](118278 'typeof' y[118273]))
    (516347 'move' ret[516342](516346 'deref' call_tmp[650619]))
    gotoReturn _end_chpl__buildDistType[516340] _end_chpl__buildDistType[516340]
    (479434 'end of statement' y[118273])
    label _end_chpl__buildDistType[516340]
    (516344 return ret[516342])
  }
  where {
    unknown call_tmp[650624] "expr temp" "maybe param" "maybe type" "temp"
    (650627 'move' call_tmp[650624](118252 call _to_borrowed t[118244]))
    (354291 'is_subtype' BaseDist[382338](?) call_tmp[650624])
  }
  function chpl__buildDistType[118288](arg t[118286]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118309 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (516351 return _void[55])
  }
  function chpl__buildDistValue[118320](arg x[118317]:unmanaged[220](?)) : _unknown[51]
  {
    unknown ret[516355] "RVV" "temp"
    unknown call_tmp[650629] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650632 'move' call_tmp[650629](747867 'new' _distribution[118967](?) x[118317]))
    (516360 'move' ret[516355](516359 'deref' call_tmp[650629]))
    (516357 return ret[516355])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492115] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650636] "expr temp" "maybe param" "maybe type" "temp"
      (650639 'move' call_tmp[650636](118328 call(118324 call (partial) borrow _mt[243] x[118317])))
      (492119 'move' call_type_tmp[492115](118329 'typeof' call_tmp[650636]))
    }
    (354292 'is_subtype' BaseDist[382338](?) call_type_tmp[492115])
  }
  function chpl__buildDistValue[118350](in arg x[118347]:_owned[30](?)) : _unknown[51]
  {
    unknown ret[516364] "RVV" "temp"
    unknown call_tmp[650643] "expr temp" "maybe param" "maybe type" "temp"
    (650646 'move' call_tmp[650643](118370 call(118366 call (partial) release _mt[243] x[118347])))
    unknown call_tmp[650648] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650651 'move' call_tmp[650648](747868 'new' _distribution[118967](?) call_tmp[650643]))
    (516369 'move' ret[516364](516368 'deref' call_tmp[650648]))
    (516366 return ret[516364])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492121] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650655] "expr temp" "maybe param" "maybe type" "temp"
      (650658 'move' call_tmp[650655](118358 call(118354 call (partial) borrow _mt[243] x[118347])))
      (492125 'move' call_type_tmp[492121](118359 'typeof' call_tmp[650655]))
    }
    (354293 'is_subtype' BaseDist[382338](?) call_type_tmp[492121])
  }
  function chpl__buildDistValue[118383](arg x[118381]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118404 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (516371 return _void[55])
  }
  function _distribution[118967](?).init[118430](arg _mt[118971]:_MT[238], ref arg this[118969]:_distribution[118967](?), arg _pid[118427]:int(64)[13], arg _instance[118432]:_any[178](?), arg _unowned[118435]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461245] "temp"
    (461248 'init var' tmp[461245] _pid[118427] int(64)[13])
    (461250 'init field' this[118969] c"_pid" tmp[461245])
    (479440 'end of statement')
    unknown tmp[461254] "temp"
    (461256 'init var' tmp[461254] _instance[118432])
    (461258 'init field' this[118969] c"_instance" tmp[461254])
    (479441 'end of statement')
    unknown tmp[461262] "temp"
    (461265 'init var' tmp[461262] _unowned[118435] bool[10])
    (461267 'init field' this[118969] c"_unowned" tmp[461262])
    (479442 'end of statement')
    (516373 return _void[55])
  }
  function _distribution[118967](?).init[118473](arg _mt[118975]:_MT[238], ref arg this[118973]:_distribution[118967](?), arg value[118471]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461271] "temp"
    unknown tmp[564821] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564822] "maybe param" "temp"
    unknown call_tmp[650660] "expr temp" "maybe param" "maybe type" "temp"
    (650663 'move' call_tmp[650660](118482 call _isPrivatized value[118471]))
    (564827 'move' tmp[564822](564825 call _cond_test call_tmp[650660]))
    if tmp[564822]
    {
      unknown tmp[564829] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564831 'move' tmp[564829](118486 call _newPrivatizedClass value[118471]))
      (564836 'move' tmp[564821](564833 '_paramFoldLogical' tmp[564822] tmp[564829]))
    }
    {
      (564841 'move' tmp[564821](564838 '_paramFoldLogical' tmp[564822] nullPid[113712]))
    }
    (461274 'init var' tmp[461271] tmp[564821] int(64)[13])
    (461276 'init field' this[118973] c"_pid" tmp[461271])
    (479443 'end of statement')
    unknown call_tmp[650665] "maybe param" "maybe type" "temp"
    (650668 'move' call_tmp[650665](118502 call _to_unmanaged value[118471]))
    unknown tmp[461280] "temp"
    (461282 'init var' tmp[461280] call_tmp[650665])
    (461284 'init field' this[118973] c"_instance" tmp[461280])
    (479444 'end of statement')
    val tmp[461289]:bool[10] "temp"
    (461292 'default init var' tmp[461289] bool[10])
    (461294 '.=' this[118973] c"_unowned" tmp[461289])
    (479445 'end of statement')
    (516375 return _void[55])
  }
  function _distribution[118967](?).init=[118514](arg _mt[118979]:_MT[238], ref arg this[118977]:_distribution[118967](?), const  ref arg other[118511]:_distribution[118967](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650672] "expr temp" "maybe param" "maybe type" "temp"
    (650675 'move' call_tmp[650672](118517 call _value _mt[243] other[118511]))
    unknown call_tmp[650679] "maybe param" "maybe type" "temp"
    (650682 'move' call_tmp[650679](118526 call(118522 call (partial) dsiClone _mt[243] call_tmp[650672])))
    unknown value[118527] "dead at end of block" "insert auto destroy"
    (542810 'init var' value[118527] call_tmp[650679])
    (118530 'end of statement')
    (118538 call(118533 call (partial) init _mt[243] this[118977]) value[118527])
    (479446 'end of statement' value[118527])
    (516377 return _void[55])
  }
  function _distribution[118967](?)._value[118544](arg _mt[118983]:_MT[238], arg this[118981]:_distribution[118967](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516381] "RVV" "temp"
    unknown call_tmp[650688] "expr temp" "maybe param" "maybe type" "temp"
    (650691 'move' call_tmp[650688](382521 call _instance _mt[243] this[118981]))
    unknown call_tmp[650693] "expr temp" "maybe param" "maybe type" "temp"
    (650696 'move' call_tmp[650693](118549 call _isPrivatized call_tmp[650688]))
    unknown call_tmp[650698] "expr temp" "maybe param" "maybe type" "temp"
    (650701 'move' call_tmp[650698](118563 call _cond_test call_tmp[650693]))
    if call_tmp[650698]
    {
      { scopeless type
        unknown call_type_tmp[492127] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[650705] "expr temp" "maybe param" "maybe type" "temp"
        (650708 'move' call_tmp[650705](382526 call _instance _mt[243] this[118981]))
        (492131 'move' call_type_tmp[492127](118552 'typeof' call_tmp[650705]))
      }
      unknown call_tmp[650712] "expr temp" "maybe param" "maybe type" "temp"
      (650715 'move' call_tmp[650712](382531 call _pid _mt[243] this[118981]))
      unknown call_tmp[650717] "expr temp" "maybe param" "maybe type" "temp"
      (650720 'move' call_tmp[650717](118555 call chpl_getPrivatizedCopy call_type_tmp[492127] call_tmp[650712]))
      (516386 'move' ret[516381](516385 'deref' call_tmp[650717]))
      gotoReturn _end__value[516379] _end__value[516379]
    }
    {
      unknown call_tmp[650724] "expr temp" "maybe param" "maybe type" "temp"
      (650727 'move' call_tmp[650724](382536 call _instance _mt[243] this[118981]))
      (516391 'move' ret[516381](516390 'deref' call_tmp[650724]))
      gotoReturn _end__value[516379] _end__value[516379]
    }
    label _end__value[516379]
    (516383 return ret[516381])
  }
  function _distribution[118967](?).chpl_forwarding_expr4__value[118572](arg _mt[118987]:_MT[238], arg this[118985]:_distribution[118967](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516397] "RVV" "temp"
    (516401 'move' ret[516397](382540 call _value _mt[243] this[118985]))
    (516399 return ret[516397])
  }
  function _distribution[118967](?)._do_destroy[118580](arg _mt[118991]:_MT[238], arg this[118989]:_distribution[118967](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown tmp[424422] "maybe param" "temp"
    unknown call_tmp[650733] "expr temp" "maybe param" "maybe type" "temp"
    (650736 'move' call_tmp[650733](382545 call _unowned _mt[243] this[118989]))
    (424433 'move' tmp[424422](118583 call ! call_tmp[650733]))
    unknown call_tmp[650738] "expr temp" "maybe param" "maybe type" "temp"
    (650741 'move' call_tmp[650738](424435 call _cond_invalid tmp[424422]))
    if call_tmp[650738]
    {
      (424438 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564848] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564849] "maybe param" "temp"
    unknown call_tmp[650743] "expr temp" "maybe param" "maybe type" "temp"
    (650746 'move' call_tmp[650743](424423 call isTrue tmp[424422]))
    (564854 'move' tmp[564849](564852 call _cond_test call_tmp[650743]))
    if tmp[564849]
    {
      unknown tmp[564856] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650750] "expr temp" "maybe param" "maybe type" "temp"
      (650753 'move' call_tmp[650750](359152 call _instance _mt[243] this[118989]))
      unknown call_tmp[650757] "expr temp" "maybe param" "maybe type" "temp"
      (650760 'move' call_tmp[650757](118592 call(118588 call (partial) singleton _mt[243] call_tmp[650750])))
      unknown call_tmp[650762] "expr temp" "maybe param" "maybe type" "temp"
      (650765 'move' call_tmp[650762](118593 call ! call_tmp[650757]))
      (564858 'move' tmp[564856](424426 call isTrue call_tmp[650762]))
      (564863 'move' tmp[564848](564860 '_paramFoldLogical' tmp[564849] tmp[564856]))
    }
    {
      (564868 'move' tmp[564848](564865 '_paramFoldLogical' tmp[564849] 0))
    }
    unknown call_tmp[650767] "expr temp" "maybe param" "maybe type" "temp"
    (650770 'move' call_tmp[650767](118641 call _cond_test tmp[564848]))
    if call_tmp[650767]
    {
      const tmp[118632] "const" "temp"
      unknown call_tmp[650774] "expr temp" "maybe param" "maybe type" "temp"
      (650777 'move' call_tmp[650774](382550 call _instance _mt[243] this[118989]))
      unknown call_tmp[650779] "expr temp" "maybe param" "maybe type" "temp"
      (650782 'move' call_tmp[650779](118629 '_wide_get_locale' call_tmp[650774]))
      (118634 'move' tmp[118632](118630 'deref' call_tmp[650779]))
      {
        {
          unknown call_tmp[650786] "expr temp" "maybe param" "maybe type" "temp"
          (650789 'move' call_tmp[650786](359157 call _instance _mt[243] this[118989]))
          unknown call_tmp[650793] "maybe param" "maybe type" "temp"
          (650796 'move' call_tmp[650793](118603 call(118599 call (partial) remove _mt[243] call_tmp[650786])))
          unknown distToFree[118604] "dead at end of block" "insert auto destroy"
          (542812 'init var' distToFree[118604] call_tmp[650793])
          (118607 'end of statement')
          unknown call_tmp[650798] "expr temp" "maybe param" "maybe type" "temp"
          (650801 'move' call_tmp[650798](118611 call != distToFree[118604] nil[44]))
          unknown call_tmp[650803] "expr temp" "maybe param" "maybe type" "temp"
          (650806 'move' call_tmp[650803](118625 call _cond_test call_tmp[650798]))
          if call_tmp[650803]
          {
            unknown call_tmp[650808] "expr temp" "maybe param" "maybe type" "temp"
            (650811 'move' call_tmp[650808](118615 call postfix! distToFree[118604]))
            unknown call_tmp[650815] "expr temp" "maybe param" "maybe type" "temp"
            (650818 'move' call_tmp[650815](382557 call _instance _mt[243] this[118989]))
            unknown call_tmp[650820] "expr temp" "maybe param" "maybe type" "temp"
            (650823 'move' call_tmp[650820](118621 call _isPrivatized call_tmp[650815]))
            (118622 call _delete_dist call_tmp[650808] call_tmp[650820])
            (479451 'end of statement' distToFree[118604])
          }
        }
        (118637 'on block' 0 tmp[118632])
      }
    }
    (516403 return _void[55])
  }
  function _distribution[118967](?).deinit[118650](arg _mt[118995]:_MT[238], arg this[118993]:_distribution[118967](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118654 call(382563 call (partial) _do_destroy _mt[243] this[118993]))
    (516405 return _void[55])
  }
  function _distribution[118967](?).clone[118661](arg _mt[118999]:_MT[238], arg this[118997]:_distribution[118967](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516409] "RVV" "temp"
    unknown call_tmp[650829] "expr temp" "maybe param" "maybe type" "temp"
    (650832 'move' call_tmp[650829](359161 call _value _mt[243] this[118997]))
    unknown call_tmp[650836] "expr temp" "maybe param" "maybe type" "temp"
    (650839 'move' call_tmp[650836](118670 call(118666 call (partial) dsiClone _mt[243] call_tmp[650829])))
    unknown call_tmp[650841] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650844 'move' call_tmp[650841](747869 'new' _distribution[118967](?) call_tmp[650836]))
    (516414 'move' ret[516409](516413 'deref' call_tmp[650841]))
    (516411 return ret[516409])
  }
  function _distribution[118967](?).newRectangularDom[118684](arg _mt[119003]:_MT[238], arg this[119001]:_distribution[118967](?), param arg rank[118681]:int(64)[13], arg idxType[118686]:_any[178](?), param arg stridable[118689]:bool[10], arg ranges[118704] :
  unknown call_tmp[650846] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[516418] "RVV" "temp"
    unknown call_tmp[650853] "expr temp" "maybe param" "maybe type" "temp"
    (650856 'move' call_tmp[650853](359166 call _value _mt[243] this[119001]))
    unknown call_tmp[650860] "maybe param" "maybe type" "temp"
    (650863 'move' call_tmp[650860](118718 call(118710 call (partial) dsiNewRectangularDom _mt[243] call_tmp[650853]) rank[118681] idxType[118686] stridable[118689] ranges[118704]))
    unknown x[118719] "dead at end of block" "insert auto destroy"
    (542814 'init var' x[118719] call_tmp[650860])
    (118722 'end of statement')
    unknown call_tmp[650867] "expr temp" "maybe param" "maybe type" "temp"
    (650870 'move' call_tmp[650867](118731 call(118727 call (partial) linksDistribution _mt[243] x[118719])))
    unknown call_tmp[650872] "expr temp" "maybe param" "maybe type" "temp"
    (650875 'move' call_tmp[650872](118743 call _cond_test call_tmp[650867]))
    if call_tmp[650872]
    {
      unknown call_tmp[650879] "expr temp" "maybe param" "maybe type" "temp"
      (650882 'move' call_tmp[650879](359171 call _value _mt[243] this[119001]))
      (118740 call(118735 call (partial) add_dom _mt[243] call_tmp[650879]) x[118719])
      (479455 'end of statement' x[118719])
    }
    (516423 'move' ret[516418](516422 'deref' x[118719]))
    gotoReturn _end_newRectangularDom[516416] _end_newRectangularDom[516416]
    (479457 'end of statement' x[118719])
    label _end_newRectangularDom[516416]
    (516420 return ret[516418])
  }
  function _distribution[118967](?).newRectangularDom[118758](arg _mt[119007]:_MT[238], arg this[119005]:_distribution[118967](?), param arg rank[118755]:int(64)[13], arg idxType[118760]:_any[178](?), param arg stridable[118763]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516429] "RVV" "temp"
    unknown ranges[118778] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650886] "expr temp" "maybe param" "maybe type" "temp"
    (650889 'move' call_tmp[650886](118775 call range[64316](?) idxType[118760] bounded[64205] stridable[118763]))
    unknown call_tmp[650891] "expr temp" "maybe param" "maybe type" "temp"
    (650894 'move' call_tmp[650891](118776 call * rank[118755] call_tmp[650886]))
    (542816 'default init var' ranges[118778] call_tmp[650891])
    (118781 'end of statement')
    unknown call_tmp[650898] "expr temp" "maybe param" "maybe type" "temp"
    (650901 'move' call_tmp[650898](118789 call(382582 call (partial) newRectangularDom _mt[243] this[119005]) rank[118755] idxType[118760] stridable[118763] ranges[118778]))
    (516434 'move' ret[516429](516433 'deref' call_tmp[650898]))
    gotoReturn _end_newRectangularDom[516427] _end_newRectangularDom[516427]
    (479459 'end of statement' ranges[118778])
    label _end_newRectangularDom[516427]
    (516431 return ret[516429])
  }
  function _distribution[118967](?).newAssociativeDom[118798](arg _mt[119011]:_MT[238], arg this[119009]:_distribution[118967](?), arg idxType[118796]:_any[178](?), param arg parSafe[118802]:bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown ret[516440] "RVV" "temp"
    unknown call_tmp[650905] "expr temp" "maybe param" "maybe type" "temp"
    (650908 'move' call_tmp[650905](359176 call _value _mt[243] this[119009]))
    unknown call_tmp[650912] "maybe param" "maybe type" "temp"
    (650915 'move' call_tmp[650912](118815 call(118809 call (partial) dsiNewAssociativeDom _mt[243] call_tmp[650905]) idxType[118796] parSafe[118802]))
    unknown x[118816] "dead at end of block" "insert auto destroy"
    (542818 'init var' x[118816] call_tmp[650912])
    (118819 'end of statement')
    unknown call_tmp[650919] "expr temp" "maybe param" "maybe type" "temp"
    (650922 'move' call_tmp[650919](118826 call(118822 call (partial) linksDistribution _mt[243] x[118816])))
    unknown call_tmp[650924] "expr temp" "maybe param" "maybe type" "temp"
    (650927 'move' call_tmp[650924](118836 call _cond_test call_tmp[650919]))
    if call_tmp[650924]
    {
      unknown call_tmp[650931] "expr temp" "maybe param" "maybe type" "temp"
      (650934 'move' call_tmp[650931](359181 call _value _mt[243] this[119009]))
      (118833 call(118828 call (partial) add_dom _mt[243] call_tmp[650931]) x[118816])
      (479461 'end of statement' x[118816])
    }
    (516445 'move' ret[516440](516444 'deref' x[118816]))
    gotoReturn _end_newAssociativeDom[516438] _end_newAssociativeDom[516438]
    (479463 'end of statement' x[118816])
    label _end_newAssociativeDom[516438]
    (516442 return ret[516440])
  }
  function _distribution[118967](?).newSparseDom[118851](arg _mt[119015]:_MT[238], arg this[119013]:_distribution[118967](?), param arg rank[118848]:int(64)[13], arg idxType[118853]:_any[178](?), arg dom[118856]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516451] "RVV" "temp"
    unknown call_tmp[650940] "expr temp" "maybe param" "maybe type" "temp"
    (650943 'move' call_tmp[650940](359185 call _value _mt[243] this[119013]))
    unknown call_tmp[650947] "maybe param" "maybe type" "temp"
    (650950 'move' call_tmp[650947](118869 call(118862 call (partial) dsiNewSparseDom _mt[243] call_tmp[650940]) rank[118848] idxType[118853] dom[118856]))
    unknown x[118870] "dead at end of block" "insert auto destroy"
    (542820 'init var' x[118870] call_tmp[650947])
    (118873 'end of statement')
    unknown call_tmp[650954] "expr temp" "maybe param" "maybe type" "temp"
    (650957 'move' call_tmp[650954](118880 call(118876 call (partial) linksDistribution _mt[243] x[118870])))
    unknown call_tmp[650959] "expr temp" "maybe param" "maybe type" "temp"
    (650962 'move' call_tmp[650959](118890 call _cond_test call_tmp[650954]))
    if call_tmp[650959]
    {
      unknown call_tmp[650966] "expr temp" "maybe param" "maybe type" "temp"
      (650969 'move' call_tmp[650966](359190 call _value _mt[243] this[119013]))
      (118887 call(118882 call (partial) add_dom _mt[243] call_tmp[650966]) x[118870])
      (479465 'end of statement' x[118870])
    }
    (516456 'move' ret[516451](516455 'deref' x[118870]))
    gotoReturn _end_newSparseDom[516449] _end_newSparseDom[516449]
    (479467 'end of statement' x[118870])
    label _end_newSparseDom[516449]
    (516453 return ret[516451])
  }
  function _distribution[118967](?).idxToLocale[118903](arg _mt[119019]:_MT[238], arg this[119017]:_distribution[118967](?), arg ind[118901]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516462] "RVV" "temp"
    unknown call_tmp[650975] "expr temp" "maybe param" "maybe type" "temp"
    (650978 'move' call_tmp[650975](359194 call _value _mt[243] this[119017]))
    unknown call_tmp[650982] "expr temp" "maybe param" "maybe type" "temp"
    (650985 'move' call_tmp[650982](118913 call(118908 call (partial) dsiIndexToLocale _mt[243] call_tmp[650975]) ind[118901]))
    (516467 'move' ret[516462](516466 'deref' call_tmp[650982]))
    (516464 return ret[516462])
  }
  function _distribution[118967](?).readWriteThis[118923](arg _mt[119023]:_MT[238], arg this[119021]:_distribution[118967](?), arg f[118921]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650989] "expr temp" "maybe param" "maybe type" "temp"
    (650992 'move' call_tmp[650989](382602 call _value _mt[243] this[119021]))
    (118927 call <~> f[118921] call_tmp[650989])
    (516469 return _void[55])
  }
  function _distribution[118967](?).displayRepresentation[118935](arg _mt[119027]:_MT[238], arg this[119025]:_distribution[118967](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650996] "expr temp" "maybe param" "maybe type" "temp"
    (650999 'move' call_tmp[650996](359198 call _value _mt[243] this[119025]))
    (118944 call(118940 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[650996]))
    (516471 return _void[55])
  }
  function _distribution[118967](?).targetLocales[118951](arg _mt[119031]:_MT[238], arg this[119029]:_distribution[118967](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516475] "RVV" "temp"
    unknown call_tmp[651005] "expr temp" "maybe param" "maybe type" "temp"
    (651008 'move' call_tmp[651005](359202 call _value _mt[243] this[119029]))
    unknown call_tmp[651012] "expr temp" "maybe param" "maybe type" "temp"
    (651015 'move' call_tmp[651012](118960 call(118956 call (partial) dsiTargetLocales _mt[243] call_tmp[651005])))
    (516480 'move' ret[516475](516479 'deref' call_tmp[651012]))
    (516477 return ret[516475])
  }
  type _distribution[118967](?) val _pid[118411]:int(64)[13] int(64)[13] unknown _instance[118415] "owned" val _unowned[118420]:bool[10] bool[10] forwarding ( )
  function ==[119043](arg d1[119040]:_distribution[118967](?), arg d2[119049]:_distribution[118967](?)) : _unknown[51] "inline"
  {
    unknown ret[516484] "RVV" "temp"
    unknown call_tmp[651019] "expr temp" "maybe param" "maybe type" "temp"
    (651022 'move' call_tmp[651019](119053 call _value _mt[243] d1[119040]))
    unknown call_tmp[651026] "expr temp" "maybe param" "maybe type" "temp"
    (651029 'move' call_tmp[651026](119057 call _value _mt[243] d2[119049]))
    unknown call_tmp[651031] "expr temp" "maybe param" "maybe type" "temp"
    (651034 'move' call_tmp[651031](119060 call == call_tmp[651019] call_tmp[651026]))
    unknown call_tmp[651036] "expr temp" "maybe param" "maybe type" "temp"
    (651039 'move' call_tmp[651036](119065 call _cond_test call_tmp[651031]))
    if call_tmp[651036]
    {
      (516489 'move' ret[516484](516488 'deref' 1))
      gotoReturn _end_==[516482] _end_==[516482]
    }
    unknown call_tmp[651043] "expr temp" "maybe param" "maybe type" "temp"
    (651046 'move' call_tmp[651043](119072 call _value _mt[243] d1[119040]))
    unknown call_tmp[651052] "expr temp" "maybe param" "maybe type" "temp"
    (651055 'move' call_tmp[651052](119081 call _value _mt[243] d2[119049]))
    unknown call_tmp[651057] "expr temp" "maybe param" "maybe type" "temp"
    (651060 'move' call_tmp[651057](119085 call(119077 call (partial) dsiEqualDMaps _mt[243] call_tmp[651043]) call_tmp[651052]))
    (516494 'move' ret[516484](516493 'deref' call_tmp[651057]))
    label _end_==[516482]
    (516486 return ret[516484])
  }
  function !=[119099](arg d1[119096]:_distribution[118967](?), arg d2[119105]:_distribution[118967](?)) : _unknown[51] "inline"
  {
    unknown ret[516498] "RVV" "temp"
    unknown call_tmp[651064] "expr temp" "maybe param" "maybe type" "temp"
    (651067 'move' call_tmp[651064](119109 call _value _mt[243] d1[119096]))
    unknown call_tmp[651071] "expr temp" "maybe param" "maybe type" "temp"
    (651074 'move' call_tmp[651071](119113 call _value _mt[243] d2[119105]))
    unknown call_tmp[651076] "expr temp" "maybe param" "maybe type" "temp"
    (651079 'move' call_tmp[651076](119116 call == call_tmp[651064] call_tmp[651071]))
    unknown call_tmp[651081] "expr temp" "maybe param" "maybe type" "temp"
    (651084 'move' call_tmp[651081](119121 call _cond_test call_tmp[651076]))
    if call_tmp[651081]
    {
      (516503 'move' ret[516498](516502 'deref' 0))
      gotoReturn _end_!=[516496] _end_!=[516496]
    }
    unknown call_tmp[651088] "expr temp" "maybe param" "maybe type" "temp"
    (651091 'move' call_tmp[651088](119128 call _value _mt[243] d1[119096]))
    unknown call_tmp[651097] "expr temp" "maybe param" "maybe type" "temp"
    (651100 'move' call_tmp[651097](119135 call _value _mt[243] d2[119105]))
    unknown call_tmp[651102] "expr temp" "maybe param" "maybe type" "temp"
    (651105 'move' call_tmp[651102](119139 call(119131 call (partial) dsiEqualDMaps _mt[243] call_tmp[651088]) call_tmp[651097]))
    unknown call_tmp[651107] "expr temp" "maybe param" "maybe type" "temp"
    (651110 'move' call_tmp[651107](119140 call ! call_tmp[651102]))
    (516508 'move' ret[516498](516507 'deref' call_tmp[651107]))
    label _end_!=[516496]
    (516500 return ret[516498])
  }
  function chpl_defaultComparator[119148]() : _unknown[51]
  {
    unknown ret[516512] "RVV" "temp"
    (516517 'move' ret[516512](516516 'deref' defaultComparator[267977]))
    (516514 return ret[516512])
    (355116 'used modules list'(119151 'use' Sort[267968]))
  }
  function _domain[125902](?).chpl__promotionType[119176](arg _mt[125906]:_MT[238], arg this[125904]:_domain[125902](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[516521] "RVV" "temp" "type variable"
    unknown call_tmp[651114] "expr temp" "maybe param" "maybe type" "temp"
    (651117 'move' call_tmp[651114](382611 call rank _mt[243] this[125904]))
    unknown call_tmp[651121] "expr temp" "maybe param" "maybe type" "temp"
    (651124 'move' call_tmp[651121](359214 call _value _mt[243] this[125904]))
    unknown call_tmp[651128] "expr temp" "maybe param" "maybe type" "temp"
    (651131 'move' call_tmp[651128](119181 call idxType _mt[243] call_tmp[651121]))
    unknown call_tmp[651133] "expr temp" "maybe param" "maybe type" "temp"
    (651136 'move' call_tmp[651133](119184 call chpl__buildIndexType call_tmp[651114] call_tmp[651128]))
    (516526 'move' ret[516521](516525 'deref' call_tmp[651133]))
    (516523 return ret[516521])
  }
  function _domain[125902](?).init[119197](arg _mt[125910]:_MT[238], ref arg this[125908]:_domain[125902](?), arg _pid[119194]:int(64)[13], arg _instance[119199]:_any[178](?), arg _unowned[119202]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461326] "temp"
    (461329 'init var' tmp[461326] _pid[119194] int(64)[13])
    (461331 'init field' this[125908] c"_pid" tmp[461326])
    (479479 'end of statement')
    unknown tmp[461335] "temp"
    (461337 'init var' tmp[461335] _instance[119199])
    (461339 'init field' this[125908] c"_instance" tmp[461335])
    (479480 'end of statement')
    unknown tmp[461343] "temp"
    (461346 'init var' tmp[461343] _unowned[119202] bool[10])
    (461348 'init field' this[125908] c"_unowned" tmp[461343])
    (479481 'end of statement')
    (516528 return _void[55])
  }
  function _domain[125902](?).init[119236](arg _mt[125914]:_MT[238], ref arg this[125912]:_domain[125902](?), arg value[119234]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651138] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651141 'move' call_tmp[651138](119240 'typeof' value[119234]))
    unknown call_tmp[651143] "expr temp" "maybe param" "maybe type" "temp"
    (651146 'move' call_tmp[651143](119242 call _to_unmanaged call_tmp[651138]))
    unknown call_tmp[651148] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651151 'move' call_tmp[651148](119244 'typeof' value[119234]))
    unknown call_tmp[651153] "expr temp" "maybe param" "maybe type" "temp"
    (651156 'move' call_tmp[651153](119245 call != call_tmp[651143] call_tmp[651148]))
    unknown call_tmp[651158] "expr temp" "maybe param" "maybe type" "temp"
    (651161 'move' call_tmp[651158](119252 call _cond_test call_tmp[651153]))
    if call_tmp[651158]
    {
      (119250 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[651163] "expr temp" "maybe param" "maybe type" "temp"
    (651166 'move' call_tmp[651163](119261 call _isPrivatized value[119234]))
    unknown call_tmp[651168] "expr temp" "maybe param" "maybe type" "temp"
    (651171 'move' call_tmp[651168](119307 call _cond_test call_tmp[651163]))
    if call_tmp[651168]
    {
      unknown call_tmp[651175] "expr temp" "maybe param" "maybe type" "temp"
      (651178 'move' call_tmp[651175](119263 call pid _mt[243] value[119234]))
      unknown call_tmp[651180] "expr temp" "maybe param" "maybe type" "temp"
      (651183 'move' call_tmp[651180](119267 call == call_tmp[651175] nullPid[113712]))
      unknown call_tmp[651185] "expr temp" "maybe param" "maybe type" "temp"
      (651188 'move' call_tmp[651185](119293 call _cond_test call_tmp[651180]))
      if call_tmp[651185]
      {
        unknown call_tmp[651190] "maybe param" "maybe type" "temp"
        (651193 'move' call_tmp[651190](119276 call _newPrivatizedClass value[119234]))
        unknown tmp[461352] "temp"
        (461355 'init var' tmp[461352] call_tmp[651190] int(64)[13])
        (461357 'init field' this[125912] c"_pid" tmp[461352])
        (479483 'end of statement')
      }
      {
        unknown call_tmp[651197] "maybe param" "maybe type" "temp"
        (651200 'move' call_tmp[651197](119286 call pid _mt[243] value[119234]))
        unknown tmp[461361] "temp"
        (461364 'init var' tmp[461361] call_tmp[651197] int(64)[13])
        (461366 'init field' this[125912] c"_pid" tmp[461361])
        (479484 'end of statement')
      }
    }
    {
      unknown tmp[461370] "temp"
      (461373 'init var' tmp[461370] nullPid[113712] int(64)[13])
      (461375 'init field' this[125912] c"_pid" tmp[461370])
      (479485 'end of statement')
    }
    unknown tmp[461379] "temp"
    (461381 'init var' tmp[461379] value[119234])
    (461383 'init field' this[125912] c"_instance" tmp[461379])
    (479486 'end of statement')
    val tmp[461388]:bool[10] "temp"
    (461391 'default init var' tmp[461388] bool[10])
    (461393 '.=' this[125912] c"_unowned" tmp[461388])
    (479487 'end of statement')
    (516530 return _void[55])
  }
  function _domain[125902](?).init[119327](arg _mt[125918]:_MT[238], ref arg this[125916]:_domain[125902](?), arg d[119324]:_distribution[118967](?), param arg rank[119330]:int(64)[13], arg idxType[119334]:_any[178](?) =
  int(64)[13], param arg stridable[119339]:bool[10] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651206] "expr temp" "maybe param" "maybe type" "temp"
    (651209 'move' call_tmp[651206](119355 call(119348 call (partial) newRectangularDom _mt[243] d[119324]) rank[119330] idxType[119334] stridable[119339]))
    (119357 call(119344 call (partial) init _mt[243] this[125916]) call_tmp[651206])
    (516532 return _void[55])
  }
  function _domain[125902](?).init[119368](arg _mt[125922]:_MT[238], ref arg this[125920]:_domain[125902](?), arg d[119365]:_distribution[118967](?), param arg rank[119371]:int(64)[13], arg idxType[119375]:_any[178](?) =
  int(64)[13], param arg stridable[119380]:bool[10] =
  0, arg ranges[119396] :
  unknown call_tmp[651211] "expr temp" "maybe param" "maybe type" "temp") : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651220] "expr temp" "maybe param" "maybe type" "temp"
    (651223 'move' call_tmp[651220](119412 call(119404 call (partial) newRectangularDom _mt[243] d[119365]) rank[119371] idxType[119375] stridable[119380] ranges[119396]))
    (119414 call(119400 call (partial) init _mt[243] this[125920]) call_tmp[651220])
    (516534 return _void[55])
  }
  function _domain[125902](?).init[119425](arg _mt[125926]:_MT[238], ref arg this[125924]:_domain[125902](?), arg d[119422]:_distribution[118967](?), arg idxType[119427]:_any[178](?), param arg parSafe[119431]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651229] "expr temp" "maybe param" "maybe type" "temp"
    (651232 'move' call_tmp[651229](119448 call(119442 call (partial) newAssociativeDom _mt[243] d[119422]) idxType[119427] parSafe[119431]))
    (119450 call(119436 call (partial) init _mt[243] this[125924]) call_tmp[651229])
    (516536 return _void[55])
  }
  function _domain[125902](?).init[119461](arg _mt[125930]:_MT[238], ref arg this[125928]:_domain[125902](?), arg d[119458]:_distribution[118967](?), arg dom[119464]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651240] "expr temp" "maybe param" "maybe type" "temp"
    (651243 'move' call_tmp[651240](119478 call rank _mt[243] dom[119464]))
    unknown call_tmp[651247] "expr temp" "maybe param" "maybe type" "temp"
    (651250 'move' call_tmp[651247](119483 call _value _mt[243] dom[119464]))
    unknown call_tmp[651254] "expr temp" "maybe param" "maybe type" "temp"
    (651257 'move' call_tmp[651254](119486 call idxType _mt[243] call_tmp[651247]))
    unknown call_tmp[651259] "expr temp" "maybe param" "maybe type" "temp"
    (651262 'move' call_tmp[651259](119490 call(119474 call (partial) newSparseDom _mt[243] d[119458]) call_tmp[651240] call_tmp[651254] dom[119464]))
    (119492 call(119468 call (partial) init _mt[243] this[125928]) call_tmp[651259])
    (516538 return _void[55])
  }
  function _domain[125902](?).init=[119503](arg _mt[125934]:_MT[238], ref arg this[125932]:_domain[125902](?), const  ref arg other[119500]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651268] "expr temp" "maybe param" "maybe type" "temp"
    (651271 'move' call_tmp[651268](119514 call dist _mt[243] other[119500]))
    unknown call_tmp[651275] "expr temp" "maybe param" "maybe type" "temp"
    (651278 'move' call_tmp[651275](119519 call rank _mt[243] other[119500]))
    unknown call_tmp[651282] "expr temp" "maybe param" "maybe type" "temp"
    (651285 'move' call_tmp[651282](119523 call idxType _mt[243] other[119500]))
    unknown call_tmp[651289] "expr temp" "maybe param" "maybe type" "temp"
    (651292 'move' call_tmp[651289](119527 call stridable _mt[243] other[119500]))
    unknown call_tmp[651296] "expr temp" "maybe param" "maybe type" "temp"
    (651299 'move' call_tmp[651296](119535 call(119531 call (partial) dims _mt[243] other[119500])))
    (119536 call(119510 call (partial) init _mt[243] this[125932]) call_tmp[651268] call_tmp[651275] call_tmp[651282] call_tmp[651289] call_tmp[651296])
    (516540 return _void[55])
  }
  where {
    (119508 call isRectangularDom other[119500])
  }
  function _domain[125902](?).init=[119548](arg _mt[125938]:_MT[238], ref arg this[125936]:_domain[125902](?), const  ref arg other[119545]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651301] "expr temp" "maybe param" "maybe type" "temp"
    (651304 'move' call_tmp[651301](119553 call isAssociativeDom other[119545]))
    unknown call_tmp[651306] "expr temp" "maybe param" "maybe type" "temp"
    (651309 'move' call_tmp[651306](119640 call _cond_test call_tmp[651301]))
    if call_tmp[651306]
    {
      unknown call_tmp[651315] "expr temp" "maybe param" "maybe type" "temp"
      (651318 'move' call_tmp[651315](119559 call dist _mt[243] other[119545]))
      unknown call_tmp[651322] "expr temp" "maybe param" "maybe type" "temp"
      (651325 'move' call_tmp[651322](119564 call idxType _mt[243] other[119545]))
      unknown call_tmp[651329] "expr temp" "maybe param" "maybe type" "temp"
      (651332 'move' call_tmp[651329](119568 call parSafe _mt[243] other[119545]))
      (119571 call(119555 call (partial) init _mt[243] this[125936]) call_tmp[651315] call_tmp[651322] call_tmp[651329])
    }
    {
      unknown call_tmp[651334] "expr temp" "maybe param" "maybe type" "temp"
      (651337 'move' call_tmp[651334](119577 call isSparseDom other[119545]))
      unknown call_tmp[651339] "expr temp" "maybe param" "maybe type" "temp"
      (651342 'move' call_tmp[651339](119636 call _cond_test call_tmp[651334]))
      if call_tmp[651339]
      {
        unknown call_tmp[651348] "expr temp" "maybe param" "maybe type" "temp"
        (651351 'move' call_tmp[651348](119583 call dist _mt[243] other[119545]))
        unknown call_tmp[651355] "expr temp" "maybe param" "maybe type" "temp"
        (651358 'move' call_tmp[651355](119588 call parentDom _mt[243] other[119545]))
        (119591 call(119579 call (partial) init _mt[243] this[125936]) call_tmp[651348] call_tmp[651355])
      }
      {
        unknown call_tmp[651360] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651363 'move' call_tmp[651360](119614 'typeof' this[125936]))
        unknown call_tmp[651365] "expr temp" "maybe param" "maybe type" "temp"
        (651368 'move' call_tmp[651365](119616 call _cast string[26] call_tmp[651360]))
        unknown call_tmp[651370] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651373 'move' call_tmp[651370](119620 'typeof' other[119545]))
        unknown call_tmp[651375] "expr temp" "maybe param" "maybe type" "temp"
        (651378 'move' call_tmp[651375](119622 call _cast string[26] call_tmp[651370]))
        (119625 call compilerError "Cannot initialize '" call_tmp[651365] "' from '" call_tmp[651375] "'")
        (479495 'end of statement')
        (119634 call(119629 call (partial) init _mt[243] this[125936]) nil[44])
      }
    }
    unknown call_tmp[651384] "expr temp" "maybe param" "maybe type" "temp"
    (651387 'move' call_tmp[651384](359253 call _instance _mt[243] this[125936]))
    (119656 call(119649 call (partial) dsiAssignDomain _mt[243] call_tmp[651384]) other[119545](lhsPrivate = 1))
    (516542 return _void[55])
  }
  function _domain[125902](?)._value[119662](arg _mt[125942]:_MT[238], arg this[125940]:_domain[125902](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516546] "RVV" "temp"
    unknown call_tmp[651393] "expr temp" "maybe param" "maybe type" "temp"
    (651396 'move' call_tmp[651393](382653 call _instance _mt[243] this[125940]))
    unknown call_tmp[651398] "expr temp" "maybe param" "maybe type" "temp"
    (651401 'move' call_tmp[651398](119667 call _isPrivatized call_tmp[651393]))
    unknown call_tmp[651403] "expr temp" "maybe param" "maybe type" "temp"
    (651406 'move' call_tmp[651403](119681 call _cond_test call_tmp[651398]))
    if call_tmp[651403]
    {
      { scopeless type
        unknown call_type_tmp[492133] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[651410] "expr temp" "maybe param" "maybe type" "temp"
        (651413 'move' call_tmp[651410](382658 call _instance _mt[243] this[125940]))
        (492137 'move' call_type_tmp[492133](119670 'typeof' call_tmp[651410]))
      }
      unknown call_tmp[651417] "expr temp" "maybe param" "maybe type" "temp"
      (651420 'move' call_tmp[651417](382663 call _pid _mt[243] this[125940]))
      unknown call_tmp[651422] "expr temp" "maybe param" "maybe type" "temp"
      (651425 'move' call_tmp[651422](119673 call chpl_getPrivatizedCopy call_type_tmp[492133] call_tmp[651417]))
      (516551 'move' ret[516546](516550 'deref' call_tmp[651422]))
      gotoReturn _end__value[516544] _end__value[516544]
    }
    {
      unknown call_tmp[651429] "expr temp" "maybe param" "maybe type" "temp"
      (651432 'move' call_tmp[651429](382668 call _instance _mt[243] this[125940]))
      (516556 'move' ret[516546](516555 'deref' call_tmp[651429]))
      gotoReturn _end__value[516544] _end__value[516544]
    }
    label _end__value[516544]
    (516548 return ret[516546])
  }
  function _domain[125902](?).chpl_forwarding_expr5__value[119691](arg _mt[125946]:_MT[238], arg this[125944]:_domain[125902](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516562] "RVV" "temp"
    (516566 'move' ret[516562](382672 call _value _mt[243] this[125944]))
    (516564 return ret[516562])
  }
  function _domain[125902](?).chpl__serialize[119699](arg _mt[125950]:_MT[238], arg this[125948]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516570] "RVV" "temp"
    unknown call_tmp[651438] "expr temp" "maybe param" "maybe type" "temp"
    (651441 'move' call_tmp[651438](119711 call _value _mt[243] this[125948]))
    unknown call_tmp[651445] "expr temp" "maybe param" "maybe type" "temp"
    (651448 'move' call_tmp[651445](119720 call(119716 call (partial) chpl__serialize _mt[243] call_tmp[651438])))
    (516575 'move' ret[516570](516574 'deref' call_tmp[651445]))
    (516572 return ret[516570])
  }
  where {
    unknown call_tmp[651452] "expr temp" "maybe param" "maybe type" "temp"
    (651455 'move' call_tmp[651452](119702 call _value _mt[243] this[125948]))
    (119709 call(119705 call (partial) isDefaultRectangular _mt[243] call_tmp[651452]))
  }
  function _domain[125902](?).chpl__deserialize[119731](arg _mt[125954]:_MT[238], arg this[125952]:_domain[125902](?), arg data[119729]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516579] "RVV" "temp"
    unknown valueType[119738] "dead at end of block" "insert auto destroy" "type variable"(119737 'static field type' this[125952] "_instance")
    (542825 'move' valueType[119738](542822 'static field type' this[125952] "_instance"))
    (479501 'end of statement')
    unknown call_tmp[651459] "expr temp" "maybe param" "maybe type" "temp"
    (651462 'move' call_tmp[651459](119747 call _to_borrowed valueType[119738]))
    unknown call_tmp[651466] "expr temp" "maybe param" "maybe type" "temp"
    (651469 'move' call_tmp[651466](119755 call(119750 call (partial) chpl__deserialize _mt[243] call_tmp[651459]) data[119729]))
    unknown call_tmp[651471] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (651474 'move' call_tmp[651471](747870 'new' _domain[125902](?) call_tmp[651466]))
    (516584 'move' ret[516579](516583 'deref' call_tmp[651471]))
    gotoReturn _end_chpl__deserialize[516577] _end_chpl__deserialize[516577]
    (479502 'end of statement' valueType[119738])
    label _end_chpl__deserialize[516577]
    (516581 return ret[516579])
  }
  function _domain[125902](?)._do_destroy[119764](arg _mt[125958]:_MT[238], arg this[125956]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[651478] "expr temp" "maybe param" "maybe type" "temp"
    (651481 'move' call_tmp[651478](382681 call _unowned _mt[243] this[125956]))
    unknown call_tmp[651483] "expr temp" "maybe param" "maybe type" "temp"
    (651486 'move' call_tmp[651483](119767 call ! call_tmp[651478]))
    unknown call_tmp[651488] "expr temp" "maybe param" "maybe type" "temp"
    (651491 'move' call_tmp[651488](119883 call _cond_test call_tmp[651483]))
    if call_tmp[651488]
    {
      const tmp[119873] "const" "temp"
      unknown call_tmp[651495] "expr temp" "maybe param" "maybe type" "temp"
      (651498 'move' call_tmp[651495](382686 call _instance _mt[243] this[125956]))
      unknown call_tmp[651500] "expr temp" "maybe param" "maybe type" "temp"
      (651503 'move' call_tmp[651500](119870 '_wide_get_locale' call_tmp[651495]))
      (119875 'move' tmp[119873](119871 'deref' call_tmp[651500]))
      {
        {
          unknown call_tmp[651507] "maybe param" "maybe type" "temp"
          (651510 'move' call_tmp[651507](382691 call _instance _mt[243] this[125956]))
          const inst[119771] "dead at end of block" "const" "insert auto destroy"
          (542827 'init var' inst[119771] call_tmp[651507])
          (119774 'end of statement')
          unknown call_tmp[651514] "maybe param" "maybe type" "temp"
          (651517 'move' call_tmp[651514](119786 call(119782 call (partial) remove _mt[243] inst[119771])))
          unknown tmp[119787] "dead at end of block" "insert auto destroy" "temp"
          (542829 'init var' tmp[119787] call_tmp[651514])
          (119794 call _check_tuple_var_decl tmp[119787] 2)
          (479504 'end of statement')
          unknown call_tmp[651519] "maybe param" "maybe type" "temp"
          (651522 'move' call_tmp[651519](119788 call tmp[119787] 0))
          unknown domToFree[119776] "dead at end of block" "insert auto destroy"
          (542831 'init var' domToFree[119776] call_tmp[651519])
          unknown call_tmp[651524] "maybe param" "maybe type" "temp"
          (651527 'move' call_tmp[651524](119791 call tmp[119787] 1))
          unknown distToRemove[119778] "dead at end of block" "insert auto destroy"
          (542833 'init var' distToRemove[119778] call_tmp[651524])
          (119799 'end of statement')
          unknown distToFree[119804] "dead at end of block" "insert auto destroy"
          (542835 'init var' distToFree[119804] nil[44] unmanaged BaseDist?[415459])
          (119807 'end of statement')
          unknown call_tmp[651529] "expr temp" "maybe param" "maybe type" "temp"
          (651532 'move' call_tmp[651529](119810 call != distToRemove[119778] nil[44]))
          unknown call_tmp[651534] "expr temp" "maybe param" "maybe type" "temp"
          (651537 'move' call_tmp[651534](119825 call _cond_test call_tmp[651529]))
          if call_tmp[651534]
          {
            unknown call_tmp[651539] "expr temp" "maybe param" "maybe type" "temp"
            (651542 'move' call_tmp[651539](119814 call postfix! distToRemove[119778]))
            unknown call_tmp[651546] "expr temp" "maybe param" "maybe type" "temp"
            (651549 'move' call_tmp[651546](119820 call(119816 call (partial) remove _mt[243] call_tmp[651539])))
            (119821 call = distToFree[119804] call_tmp[651546])
            (479505 'end of statement' distToFree[119804] distToRemove[119778])
          }
          unknown call_tmp[651551] "expr temp" "maybe param" "maybe type" "temp"
          (651554 'move' call_tmp[651551](119831 call != domToFree[119776] nil[44]))
          unknown call_tmp[651556] "expr temp" "maybe param" "maybe type" "temp"
          (651559 'move' call_tmp[651556](119842 call _cond_test call_tmp[651551]))
          if call_tmp[651556]
          {
            unknown call_tmp[651561] "expr temp" "maybe param" "maybe type" "temp"
            (651564 'move' call_tmp[651561](119839 call _isPrivatized inst[119771]))
            (119840 call _delete_dom inst[119771] call_tmp[651561])
            (479508 'end of statement' inst[119771] inst[119771])
          }
          unknown call_tmp[651566] "expr temp" "maybe param" "maybe type" "temp"
          (651569 'move' call_tmp[651566](119849 call != distToFree[119804] nil[44]))
          unknown call_tmp[651571] "expr temp" "maybe param" "maybe type" "temp"
          (651574 'move' call_tmp[651571](119865 call _cond_test call_tmp[651566]))
          if call_tmp[651571]
          {
            unknown call_tmp[651576] "expr temp" "maybe param" "maybe type" "temp"
            (651579 'move' call_tmp[651576](119853 call postfix! distToFree[119804]))
            unknown call_tmp[651583] "expr temp" "maybe param" "maybe type" "temp"
            (651586 'move' call_tmp[651583](119858 call dist _mt[243] inst[119771]))
            unknown call_tmp[651588] "expr temp" "maybe param" "maybe type" "temp"
            (651591 'move' call_tmp[651588](119862 call _isPrivatized call_tmp[651583]))
            (119863 call _delete_dist call_tmp[651576] call_tmp[651588])
            (479511 'end of statement' distToFree[119804] inst[119771])
          }
        }
        (119878 'on block' 0 tmp[119873])
      }
    }
    {
    }
    (516588 return _void[55])
  }
  function _domain[125902](?).deinit[119892](arg _mt[125962]:_MT[238], arg this[125960]:_domain[125902](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119896 call(382704 call (partial) _do_destroy _mt[243] this[125960]))
    (516590 return _void[55])
  }
  function _domain[125902](?).dist[119903](arg _mt[125966]:_MT[238], arg this[125964]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[516594] "RVV" "temp"
    unknown call_tmp[651597] "expr temp" "maybe param" "maybe type" "temp"
    (651600 'move' call_tmp[651597](359261 call _value _mt[243] this[125964]))
    unknown call_tmp[651604] "expr temp" "maybe param" "maybe type" "temp"
    (651607 'move' call_tmp[651604](119907 call dist _mt[243] call_tmp[651597]))
    unknown call_tmp[651609] "expr temp" "maybe param" "maybe type" "temp"
    (651612 'move' call_tmp[651609](119911 call _getDistribution call_tmp[651604]))
    (516599 'move' ret[516594](516598 'deref' call_tmp[651609]))
    (516596 return ret[516594])
  }
  function _domain[125902](?).rank[119919](arg _mt[125970]:_MT[238], arg this[125968]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516603] "RVV" "param" "temp"
    unknown tmp[424443] "maybe param" "temp"
    (424454 'move' tmp[424443](119924 call isRectangularDom this[125968]))
    unknown call_tmp[651614] "expr temp" "maybe param" "maybe type" "temp"
    (651617 'move' call_tmp[651614](424456 call _cond_invalid tmp[424443]))
    if call_tmp[651614]
    {
      (424459 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564875] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564876] "maybe param" "temp"
    unknown call_tmp[651619] "expr temp" "maybe param" "maybe type" "temp"
    (651622 'move' call_tmp[651619](424444 call isTrue tmp[424443]))
    (564881 'move' tmp[564876](564879 call _cond_test call_tmp[651619]))
    if tmp[564876]
    {
      (564886 'move' tmp[564875](564883 '_paramFoldLogical' tmp[564876] 1))
    }
    {
      unknown tmp[564888] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651624] "expr temp" "maybe param" "maybe type" "temp"
      (651627 'move' call_tmp[651624](119928 call isSparseDom this[125968]))
      (564890 'move' tmp[564888](424448 call isTrue call_tmp[651624]))
      (564895 'move' tmp[564875](564892 '_paramFoldLogical' tmp[564876] tmp[564888]))
    }
    unknown call_tmp[651629] "expr temp" "maybe param" "maybe type" "temp"
    (651632 'move' call_tmp[651629](119940 call _cond_test tmp[564875]))
    if call_tmp[651629]
    {
      unknown call_tmp[651636] "expr temp" "maybe param" "maybe type" "temp"
      (651639 'move' call_tmp[651636](359265 call _value _mt[243] this[125968]))
      unknown call_tmp[651643] "expr temp" "maybe param" "maybe type" "temp"
      (651646 'move' call_tmp[651643](119932 call rank _mt[243] call_tmp[651636]))
      (516608 'move' ret[516603](516607 'deref' call_tmp[651643]))
      gotoReturn _end_rank[516601] _end_rank[516601]
    }
    {
      (516613 'move' ret[516603](516612 'deref' 1))
      gotoReturn _end_rank[516601] _end_rank[516601]
    }
    label _end_rank[516601]
    (516605 return ret[516603])
  }
  function _domain[125902](?).idxType[119951](arg _mt[125974]:_MT[238], arg this[125972]:_domain[125902](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516619] "RVV" "temp" "type variable"
    unknown call_tmp[651650] "expr temp" "maybe param" "maybe type" "temp"
    (651653 'move' call_tmp[651650](359269 call _value _mt[243] this[125972]))
    unknown call_tmp[651657] "expr temp" "maybe param" "maybe type" "temp"
    (651660 'move' call_tmp[651657](119954 call idxType _mt[243] call_tmp[651650]))
    (516624 'move' ret[516619](516623 'deref' call_tmp[651657]))
    (516621 return ret[516619])
  }
  function _domain[125902](?).intIdxType[119964](arg _mt[125978]:_MT[238], arg this[125976]:_domain[125902](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516628] "RVV" "temp" "type variable"
    unknown call_tmp[651664] "expr temp" "maybe param" "maybe type" "temp"
    (651667 'move' call_tmp[651664](359273 call _value _mt[243] this[125976]))
    unknown call_tmp[651671] "expr temp" "maybe param" "maybe type" "temp"
    (651674 'move' call_tmp[651671](119968 call idxType _mt[243] call_tmp[651664]))
    unknown call_tmp[651676] "expr temp" "maybe param" "maybe type" "temp"
    (651679 'move' call_tmp[651676](119972 call chpl__idxTypeToIntIdxType call_tmp[651671]))
    (516633 'move' ret[516628](516632 'deref' call_tmp[651676]))
    (516630 return ret[516628])
  }
  function _domain[125902](?).stridable[119980](arg _mt[125982]:_MT[238], arg this[125980]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516637] "RVV" "param" "temp"
    unknown call_tmp[651683] "expr temp" "maybe param" "maybe type" "temp"
    (651686 'move' call_tmp[651683](359277 call _value _mt[243] this[125980]))
    unknown call_tmp[651690] "expr temp" "maybe param" "maybe type" "temp"
    (651693 'move' call_tmp[651690](119987 call stridable _mt[243] call_tmp[651683]))
    (516642 'move' ret[516637](516641 'deref' call_tmp[651690]))
    (516639 return ret[516637])
  }
  where {
    (119985 call isRectangularDom this[125980])
  }
  function _domain[125902](?).stridable[119998](arg _mt[125986]:_MT[238], arg this[125984]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516646] "RVV" "param" "temp"
    unknown call_tmp[651697] "expr temp" "maybe param" "maybe type" "temp"
    (651700 'move' call_tmp[651697](359281 call _value _mt[243] this[125984]))
    unknown call_tmp[651704] "expr temp" "maybe param" "maybe type" "temp"
    (651707 'move' call_tmp[651704](120005 call parentDom _mt[243] call_tmp[651697]))
    unknown call_tmp[651711] "expr temp" "maybe param" "maybe type" "temp"
    (651714 'move' call_tmp[651711](120008 call stridable _mt[243] call_tmp[651704]))
    (516651 'move' ret[516646](516650 'deref' call_tmp[651711]))
    (516648 return ret[516646])
  }
  where {
    (120003 call isSparseDom this[125984])
  }
  function _domain[125902](?).stridable[120019](arg _mt[125990]:_MT[238], arg this[125988]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120044 call compilerError "associative domains do not support .stridable")
    (516653 return _void[55])
  }
  where {
    (120024 call isAssociativeDom this[125988])
  }
  function _domain[125902](?).these[120052](arg _mt[125994]:_MT[238], arg this[125992]:_domain[125902](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[516657] "RVV" "temp"
    {
      unknown _indexOfInterest[120065] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120066] "expr temp" "temp"
      unknown call_tmp[651718] "expr temp" "maybe param" "maybe type" "temp"
      (651721 'move' call_tmp[651718](359285 call _value _mt[243] this[125992]))
      unknown call_tmp[651725] "expr temp" "maybe param" "maybe type" "temp"
      (651728 'move' call_tmp[651725](120060 call(120056 call (partial) these _mt[243] call_tmp[651718])))
      (120075 'move' _iterator[120066](120073 call _getIterator call_tmp[651725]))
      Defer
      {
        {
          (120092 call _freeIterator _iterator[120066])
        }
      }
      { scopeless type
        (120081 'move' _indexOfInterest[120065](120078 call iteratorIndex _iterator[120066]))
      }
      ForLoop[120067]
      {
        unknown i[120085] "index var" "insert auto destroy"
        (479525 'end of statement')
        (120087 'move' i[120085] _indexOfInterest[120065])
        (479526 'end of statement' i[120085])
        {
          unknown yret[516661] "YVV" "temp"
          (516664 'move' yret[516661](516663 'deref' i[120085]))
          (516666 yield yret[516661])
          (479528 'end of statement' i[120085])
        }
        label _continueLabel[120070]
        _indexOfInterest[120065]
        _iterator[120066]
      }
      label _breakLabel[120071]
    }
    (516659 return ret[516657])
  }
  function _domain[125902](?).these[120108](arg _mt[125998]:_MT[238], arg this[125996]:_domain[125902](?), param arg tag[120105]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516670] "RVV" "temp"
    {
      unknown _indexOfInterest[120167] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120168] "expr temp" "temp"
      unknown call_tmp[651732] "expr temp" "maybe param" "maybe type" "temp"
      (651735 'move' call_tmp[651732](359290 call _value _mt[243] this[125996]))
      unknown call_tmp[651739] "expr temp" "maybe param" "maybe type" "temp"
      (651742 'move' call_tmp[651739](120163 call(120158 call (partial) these _mt[243] call_tmp[651732]) tag[120105]))
      (120177 'move' _iterator[120168](120175 call _getIterator call_tmp[651739]))
      Defer
      {
        {
          (120194 call _freeIterator _iterator[120168])
        }
      }
      { scopeless type
        (120183 'move' _indexOfInterest[120167](120180 call iteratorIndex _iterator[120168]))
      }
      ForLoop[120169]
      {
        unknown i[120187] "index var" "insert auto destroy"
        (479531 'end of statement')
        (120189 'move' i[120187] _indexOfInterest[120167])
        (479532 'end of statement' i[120187])
        unknown yret[516674] "YVV" "temp"
        (516677 'move' yret[516674](516676 'deref' i[120187]))
        (516679 yield yret[516674])
        (479534 'end of statement' i[120187])
        label _continueLabel[120172]
        _indexOfInterest[120167]
        _iterator[120168]
      }
      label _breakLabel[120173]
    }
    (516672 return ret[516670])
  }
  where {
    unknown tmp[424464] "maybe param" "temp"
    (424475 'move' tmp[424464](120115 call == tag[120105] standalone[451]))
    unknown call_tmp[651744] "expr temp" "maybe param" "maybe type" "temp"
    (651747 'move' call_tmp[651744](424477 call _cond_invalid tmp[424464]))
    if call_tmp[651744]
    {
      (424480 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564902] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564903] "maybe param" "temp"
    unknown call_tmp[651749] "expr temp" "maybe param" "maybe type" "temp"
    (651752 'move' call_tmp[651749](424465 call isTrue tmp[424464]))
    (564908 'move' tmp[564903](564906 call _cond_test call_tmp[651749]))
    if tmp[564903]
    {
      unknown tmp[564910] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651756] "expr temp" "maybe param" "maybe type" "temp"
      (651759 'move' call_tmp[651756](382716 call _value _mt[243] this[125996]))
      unknown call_tmp[651761] "expr temp" "maybe param" "maybe type" "temp"
      (651764 'move' call_tmp[651761](120153 'method call resolves' call_tmp[651756] "these"(tag = tag[120105])))
      (564912 'move' tmp[564910](424468 call isTrue call_tmp[651761]))
      (564917 'move' tmp[564902](564914 '_paramFoldLogical' tmp[564903] tmp[564910]))
    }
    {
      (564922 'move' tmp[564902](564919 '_paramFoldLogical' tmp[564903] 0))
    }
    (748260 call chpl_statementLevelSymbol tmp[564902])
  }
  function _domain[125902](?).these[120211](arg _mt[126002]:_MT[238], arg this[126000]:_domain[125902](?), param arg tag[120208]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516683] "RVV" "temp"
    {
      unknown _indexOfInterest[120231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120232] "expr temp" "temp"
      unknown call_tmp[651768] "expr temp" "maybe param" "maybe type" "temp"
      (651771 'move' call_tmp[651768](359295 call _value _mt[243] this[126000]))
      unknown call_tmp[651775] "expr temp" "maybe param" "maybe type" "temp"
      (651778 'move' call_tmp[651775](120227 call(120222 call (partial) these _mt[243] call_tmp[651768]) tag[120208]))
      (120241 'move' _iterator[120232](120239 call _getIterator call_tmp[651775]))
      Defer
      {
        {
          (120258 call _freeIterator _iterator[120232])
        }
      }
      { scopeless type
        (120247 'move' _indexOfInterest[120231](120244 call iteratorIndex _iterator[120232]))
      }
      ForLoop[120233]
      {
        unknown followThis[120251] "index var" "insert auto destroy"
        (479537 'end of statement')
        (120253 'move' followThis[120251] _indexOfInterest[120231])
        (479538 'end of statement' followThis[120251])
        unknown yret[516687] "YVV" "temp"
        (516690 'move' yret[516687](516689 'deref' followThis[120251]))
        (516692 yield yret[516687])
        (479540 'end of statement' followThis[120251])
        label _continueLabel[120236]
        _indexOfInterest[120231]
        _iterator[120232]
      }
      label _breakLabel[120237]
    }
    (516685 return ret[516683])
  }
  where {
    (120218 call == tag[120208] leader[447])
  }
  function _domain[125902](?).these[120275](arg _mt[126006]:_MT[238], arg this[126004]:_domain[125902](?), param arg tag[120272]:iterKind[453], arg followThis[120277]:_any[178](?), param arg fast[120281]:bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516696] "RVV" "temp"
    unknown call_tmp[651782] "expr temp" "maybe param" "maybe type" "temp"
    (651785 'move' call_tmp[651782](382729 call _value _mt[243] this[126004]))
    unknown call_tmp[651787] "expr temp" "maybe param" "maybe type" "temp"
    (651790 'move' call_tmp[651787](120301 'method call resolves' call_tmp[651782] "these"(tag = tag[120272]) followThis[120277](fast = fast[120281])))
    unknown call_tmp[651792] "expr temp" "maybe param" "maybe type" "temp"
    (651795 'move' call_tmp[651792](120399 call _cond_test call_tmp[651787]))
    if call_tmp[651792]
    {
      {
        unknown _indexOfInterest[120317] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120318] "expr temp" "temp"
        unknown call_tmp[651799] "expr temp" "maybe param" "maybe type" "temp"
        (651802 'move' call_tmp[651799](359300 call _value _mt[243] this[126004]))
        unknown call_tmp[651806] "expr temp" "maybe param" "maybe type" "temp"
        (651809 'move' call_tmp[651806](120313 call(120304 call (partial) these _mt[243] call_tmp[651799])(tag = tag[120272]) followThis[120277](fast = fast[120281])))
        (120327 'move' _iterator[120318](120325 call _getIterator call_tmp[651806]))
        Defer
        {
          {
            (120344 call _freeIterator _iterator[120318])
          }
        }
        { scopeless type
          (120333 'move' _indexOfInterest[120317](120330 call iteratorIndex _iterator[120318]))
        }
        ForLoop[120319]
        {
          unknown i[120337] "index var" "insert auto destroy"
          (479543 'end of statement')
          (120339 'move' i[120337] _indexOfInterest[120317])
          (479544 'end of statement' i[120337])
          unknown yret[516700] "YVV" "temp"
          (516703 'move' yret[516700](516702 'deref' i[120337]))
          (516705 yield yret[516700])
          (479546 'end of statement' i[120337])
          label _continueLabel[120322]
          _indexOfInterest[120317]
          _iterator[120318]
        }
        label _breakLabel[120323]
      }
    }
    {
      {
        unknown _indexOfInterest[120364] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120365] "expr temp" "temp"
        unknown call_tmp[651813] "expr temp" "maybe param" "maybe type" "temp"
        (651816 'move' call_tmp[651813](359304 call _value _mt[243] this[126004]))
        unknown call_tmp[651820] "expr temp" "maybe param" "maybe type" "temp"
        (651823 'move' call_tmp[651820](120360 call(120354 call (partial) these _mt[243] call_tmp[651813]) tag[120272] followThis[120277]))
        (120374 'move' _iterator[120365](120372 call _getIterator call_tmp[651820]))
        Defer
        {
          {
            (120391 call _freeIterator _iterator[120365])
          }
        }
        { scopeless type
          (120380 'move' _indexOfInterest[120364](120377 call iteratorIndex _iterator[120365]))
        }
        ForLoop[120366]
        {
          unknown i[120384] "index var" "insert auto destroy"
          (479549 'end of statement')
          (120386 'move' i[120384] _indexOfInterest[120364])
          (479550 'end of statement' i[120384])
          unknown yret[516707] "YVV" "temp"
          (516710 'move' yret[516707](516709 'deref' i[120384]))
          (516712 yield yret[516707])
          (479552 'end of statement' i[120384])
          label _continueLabel[120369]
          _indexOfInterest[120364]
          _iterator[120365]
        }
        label _breakLabel[120370]
      }
    }
    (516698 return ret[516696])
  }
  where {
    (120290 call == tag[120272] follower[449])
  }
  function _domain[125902](?).this[120413](arg _mt[126010]:_MT[238], arg this[126008]:_domain[125902](?), arg d[120410]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516716] "RVV" "temp"
    unknown call_tmp[651827] "expr temp" "maybe param" "maybe type" "temp"
    (651830 'move' call_tmp[651827](120416 call rank _mt[243] d[120410]))
    unknown call_tmp[651834] "expr temp" "maybe param" "maybe type" "temp"
    (651837 'move' call_tmp[651834](382744 call rank _mt[243] this[126008]))
    unknown call_tmp[651839] "expr temp" "maybe param" "maybe type" "temp"
    (651842 'move' call_tmp[651839](120420 call == call_tmp[651827] call_tmp[651834]))
    unknown call_tmp[651844] "expr temp" "maybe param" "maybe type" "temp"
    (651847 'move' call_tmp[651844](120455 call _cond_test call_tmp[651839]))
    if call_tmp[651844]
    {
      unknown call_tmp[651851] "expr temp" "maybe param" "maybe type" "temp"
      (651854 'move' call_tmp[651851](120428 call(120424 call (partial) getIndices _mt[243] d[120410])))
      unknown call_tmp[651856] "expr temp" "maybe param" "maybe type" "temp"
      (651859 'move' call_tmp[651856](120431 call this[126008](120429 'expand_tuple' call_tmp[651851])))
      (516721 'move' ret[516716](516720 'deref' call_tmp[651856]))
      gotoReturn _end_this[516714] _end_this[516714]
    }
    {
      (120453 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[516714]
    (516718 return ret[516716])
  }
  function _domain[125902](?).this[120470](arg _mt[126014]:_MT[238], arg this[126012]:_domain[125902](?), arg ranges[120467]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516727] "RVV" "temp"
    unknown tmp[424485] "maybe param" "temp"
    unknown call_tmp[651865] "expr temp" "maybe param" "maybe type" "temp"
    (651868 'move' call_tmp[651865](359310 call _value _mt[243] this[126012]))
    (424496 'move' tmp[424485](120477 call stridable _mt[243] call_tmp[651865]))
    unknown call_tmp[651872] "expr temp" "maybe param" "maybe type" "temp"
    (651875 'move' call_tmp[651872](424498 call _cond_invalid tmp[424485]))
    if call_tmp[651872]
    {
      (424501 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown stridable[120486] "dead at end of block" "param"
    unknown tmp[564929] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564930] "maybe param" "temp"
    unknown call_tmp[651877] "expr temp" "maybe param" "maybe type" "temp"
    (651880 'move' call_tmp[651877](424486 call isTrue tmp[424485]))
    (564935 'move' tmp[564930](564933 call _cond_test call_tmp[651877]))
    if tmp[564930]
    {
      (564940 'move' tmp[564929](564937 '_paramFoldLogical' tmp[564930] 1))
    }
    {
      unknown tmp[564942] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651882] "expr temp" "maybe param" "maybe type" "temp"
      (651885 'move' call_tmp[651882](120483 call chpl__anyStridable ranges[120467]))
      (564944 'move' tmp[564942](424490 call isTrue call_tmp[651882]))
      (564949 'move' tmp[564929](564946 '_paramFoldLogical' tmp[564930] tmp[564942]))
    }
    (542837 'init var' stridable[120486] tmp[564929])
    (120489 'end of statement')
    unknown r[120506] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651889] "expr temp" "maybe param" "maybe type" "temp"
    (651892 'move' call_tmp[651889](382755 call rank _mt[243] this[126012]))
    unknown call_tmp[651896] "expr temp" "maybe param" "maybe type" "temp"
    (651899 'move' call_tmp[651896](359314 call _value _mt[243] this[126012]))
    unknown call_tmp[651903] "expr temp" "maybe param" "maybe type" "temp"
    (651906 'move' call_tmp[651903](120494 call idxType _mt[243] call_tmp[651896]))
    unknown call_tmp[651908] "expr temp" "maybe param" "maybe type" "temp"
    (651911 'move' call_tmp[651908](120503 call range[64316](?) call_tmp[651903] bounded[64205] stridable[120486]))
    unknown call_tmp[651913] "expr temp" "maybe param" "maybe type" "temp"
    (651916 'move' call_tmp[651913](120504 call * call_tmp[651889] call_tmp[651908]))
    (542839 'default init var' r[120506] call_tmp[651913])
    (120509 'end of statement')
    {
      unknown i[120538] "dead at end of block" "insert auto destroy"
      (542841 'init var' i[120538] 0)
      (479557 'end of statement')
      unknown tmp[120539] "maybe param" "temp"
      unknown call_tmp[651920] "expr temp" "maybe param" "maybe type" "temp"
      (651923 'move' call_tmp[651920](382761 call rank _mt[243] this[126012]))
      unknown call_tmp[651925] "expr temp" "maybe param" "maybe type" "temp"
      (651928 'move' call_tmp[651925](120513 call - call_tmp[651920] 1))
      (120551 'move' tmp[120539](120549 call chpl_compute_low_param_loop_bound 0 call_tmp[651925]))
      unknown tmp[120540] "maybe param" "temp"
      unknown call_tmp[651932] "expr temp" "maybe param" "maybe type" "temp"
      (651935 'move' call_tmp[651932](382770 call rank _mt[243] this[126012]))
      unknown call_tmp[651937] "expr temp" "maybe param" "maybe type" "temp"
      (651940 'move' call_tmp[651937](120556 call - call_tmp[651932] 1))
      (120561 'move' tmp[120540](120559 call chpl_compute_high_param_loop_bound 0 call_tmp[651937]))
      unknown tmp[120541] "maybe param" "temp"
      (120564 'move' tmp[120541] 1)
      ParamForLoop[120566]
      { i[120538] tmp[120539] tmp[120540] tmp[120541]
        {
          unknown call_tmp[651942] "expr temp" "maybe param" "maybe type" "temp"
          (651945 'move' call_tmp[651942](120520 call r[120506] i[120538]))
          unknown call_tmp[651949] "expr temp" "maybe param" "maybe type" "temp"
          (651952 'move' call_tmp[651949](359319 call _value _mt[243] this[126012]))
          unknown call_tmp[651956] "expr temp" "maybe param" "maybe type" "temp"
          (651959 'move' call_tmp[651956](120527 call(120522 call (partial) dsiDim _mt[243] call_tmp[651949]) i[120538]))
          unknown call_tmp[651961] "expr temp" "maybe param" "maybe type" "temp"
          (651964 'move' call_tmp[651961](120531 call ranges[120467] i[120538]))
          unknown call_tmp[651966] "expr temp" "maybe param" "maybe type" "temp"
          (651969 'move' call_tmp[651966](120533 call call_tmp[651956] call_tmp[651961]))
          (120534 call = call_tmp[651942] call_tmp[651966])
          (479558 'end of statement' r[120506] i[120538] i[120538] i[120538])
        }
      }
      label _unused_continueLabel[120543]
      label _breakLabel[120542]
    }
    unknown call_tmp[651973] "expr temp" "maybe param" "maybe type" "temp"
    (651976 'move' call_tmp[651973](382775 call dist _mt[243] this[126012]))
    unknown call_tmp[651980] "expr temp" "maybe param" "maybe type" "temp"
    (651983 'move' call_tmp[651980](382779 call rank _mt[243] this[126012]))
    unknown call_tmp[651987] "expr temp" "maybe param" "maybe type" "temp"
    (651990 'move' call_tmp[651987](359323 call _value _mt[243] this[126012]))
    unknown call_tmp[651994] "expr temp" "maybe param" "maybe type" "temp"
    (651997 'move' call_tmp[651994](120581 call idxType _mt[243] call_tmp[651987]))
    unknown call_tmp[651999] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652002 'move' call_tmp[651999](747871 'new' _domain[125902](?) call_tmp[651973] call_tmp[651980] call_tmp[651994] stridable[120486] r[120506]))
    (516732 'move' ret[516727](516731 'deref' call_tmp[651999]))
    gotoReturn _end_this[516725] _end_this[516725]
    (479563 'end of statement' r[120506])
    label _end_this[516725]
    (516729 return ret[516727])
  }
  where {
    (120475 call chpl__isTupleOfRanges ranges[120467])
  }
  function _domain[125902](?).this[120598](arg _mt[126018]:_MT[238], arg this[126016]:_domain[125902](?), arg args[120595]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516738] "RVV" "temp"
    unknown collapsedDim[120612] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652008] "expr temp" "maybe param" "maybe type" "temp"
    (652011 'move' call_tmp[652008](382790 call rank _mt[243] this[126016]))
    unknown call_tmp[652013] "expr temp" "maybe param" "maybe type" "temp"
    (652016 'move' call_tmp[652013](120610 call * call_tmp[652008] bool[10]))
    (542843 'default init var' collapsedDim[120612] call_tmp[652013])
    (120615 'end of statement')
    unknown idx[120621] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652020] "expr temp" "maybe param" "maybe type" "temp"
    (652023 'move' call_tmp[652020](382794 call rank _mt[243] this[126016]))
    unknown call_tmp[652027] "expr temp" "maybe param" "maybe type" "temp"
    (652030 'move' call_tmp[652027](382798 call idxType _mt[243] this[126016]))
    unknown call_tmp[652032] "expr temp" "maybe param" "maybe type" "temp"
    (652035 'move' call_tmp[652032](120619 call * call_tmp[652020] call_tmp[652027]))
    (542845 'default init var' idx[120621] call_tmp[652032])
    (120624 'end of statement')
    unknown call_tmp[652037] "maybe param" "maybe type" "temp"
    (652040 'move' call_tmp[652037](120629 call chpl__countRanges(120627 'expand_tuple' args[120595])))
    unknown uprank[120630] "dead at end of block" "param"
    (542847 'init var' uprank[120630] call_tmp[652037])
    (120633 'end of statement')
    unknown tmp[424506] "maybe param" "temp"
    (424517 'move' tmp[424506](120635 call stridable _mt[243] this[126016]))
    unknown call_tmp[652044] "expr temp" "maybe param" "maybe type" "temp"
    (652047 'move' call_tmp[652044](424519 call _cond_invalid tmp[424506]))
    if call_tmp[652044]
    {
      (424522 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown upstridable[120644] "dead at end of block" "param"
    unknown tmp[564956] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564957] "maybe param" "temp"
    unknown call_tmp[652049] "expr temp" "maybe param" "maybe type" "temp"
    (652052 'move' call_tmp[652049](424507 call isTrue tmp[424506]))
    (564962 'move' tmp[564957](564960 call _cond_test call_tmp[652049]))
    if tmp[564957]
    {
      (564967 'move' tmp[564956](564964 '_paramFoldLogical' tmp[564957] 1))
    }
    {
      unknown tmp[564969] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652054] "expr temp" "maybe param" "maybe type" "temp"
      (652057 'move' call_tmp[652054](120641 call chpl__anyRankChangeStridable args[120595]))
      (564971 'move' tmp[564969](424511 call isTrue call_tmp[652054]))
      (564976 'move' tmp[564956](564973 '_paramFoldLogical' tmp[564957] tmp[564969]))
    }
    (542849 'init var' upstridable[120644] tmp[564956])
    (120647 'end of statement')
    unknown upranges[120661] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652061] "expr temp" "maybe param" "maybe type" "temp"
    (652064 'move' call_tmp[652061](359332 call _value _mt[243] this[126016]))
    unknown call_tmp[652068] "expr temp" "maybe param" "maybe type" "temp"
    (652071 'move' call_tmp[652068](120651 call idxType _mt[243] call_tmp[652061]))
    unknown call_tmp[652073] "expr temp" "maybe param" "maybe type" "temp"
    (652076 'move' call_tmp[652073](120658 call range[64316](?)(idxType = call_tmp[652068])(stridable = upstridable[120644])))
    unknown call_tmp[652078] "expr temp" "maybe param" "maybe type" "temp"
    (652081 'move' call_tmp[652078](120659 call * uprank[120630] call_tmp[652073]))
    (542851 'default init var' upranges[120661] call_tmp[652078])
    (120664 'end of statement')
    unknown updim[120666] "dead at end of block" "insert auto destroy"
    (542853 'init var' updim[120666] 0)
    (120669 'end of statement')
    {
      unknown i[120760] "dead at end of block" "insert auto destroy"
      (542855 'init var' i[120760] 0)
      (479566 'end of statement')
      unknown tmp[120761] "maybe param" "temp"
      unknown call_tmp[652085] "expr temp" "maybe param" "maybe type" "temp"
      (652088 'move' call_tmp[652085](382807 call rank _mt[243] this[126016]))
      unknown call_tmp[652090] "expr temp" "maybe param" "maybe type" "temp"
      (652093 'move' call_tmp[652090](120673 call - call_tmp[652085] 1))
      (120773 'move' tmp[120761](120771 call chpl_compute_low_param_loop_bound 0 call_tmp[652090]))
      unknown tmp[120762] "maybe param" "temp"
      unknown call_tmp[652097] "expr temp" "maybe param" "maybe type" "temp"
      (652100 'move' call_tmp[652097](382834 call rank _mt[243] this[126016]))
      unknown call_tmp[652102] "expr temp" "maybe param" "maybe type" "temp"
      (652105 'move' call_tmp[652102](120778 call - call_tmp[652097] 1))
      (120783 'move' tmp[120762](120781 call chpl_compute_high_param_loop_bound 0 call_tmp[652102]))
      unknown tmp[120763] "maybe param" "temp"
      (120786 'move' tmp[120763] 1)
      ParamForLoop[120788]
      { i[120760] tmp[120761] tmp[120762] tmp[120763]
        {
          unknown call_tmp[652107] "expr temp" "maybe param" "maybe type" "temp"
          (652110 'move' call_tmp[652107](120681 call args[120595] i[120760]))
          unknown call_tmp[652112] "expr temp" "maybe param" "maybe type" "temp"
          (652115 'move' call_tmp[652112](120683 call isRange call_tmp[652107]))
          unknown call_tmp[652117] "expr temp" "maybe param" "maybe type" "temp"
          (652120 'move' call_tmp[652117](120755 call _cond_test call_tmp[652112]))
          if call_tmp[652117]
          {
            unknown call_tmp[652122] "expr temp" "maybe param" "maybe type" "temp"
            (652125 'move' call_tmp[652122](120687 call collapsedDim[120612] i[120760]))
            (120689 call = call_tmp[652122] 0)
            (479567 'end of statement' collapsedDim[120612] i[120760])
            unknown call_tmp[652127] "expr temp" "maybe param" "maybe type" "temp"
            (652130 'move' call_tmp[652127](120696 call idx[120621] i[120760]))
            unknown call_tmp[652134] "expr temp" "maybe param" "maybe type" "temp"
            (652137 'move' call_tmp[652134](120700 call(382817 call (partial) dim _mt[243] this[126016]) i[120760]))
            unknown call_tmp[652141] "expr temp" "maybe param" "maybe type" "temp"
            (652144 'move' call_tmp[652141](120701 call alignedLow _mt[243] call_tmp[652134]))
            (120704 call = call_tmp[652127] call_tmp[652141])
            (479570 'end of statement' idx[120621] i[120760] i[120760])
            unknown call_tmp[652146] "expr temp" "maybe param" "maybe type" "temp"
            (652149 'move' call_tmp[652146](120710 call upranges[120661] updim[120666]))
            unknown call_tmp[652153] "expr temp" "maybe param" "maybe type" "temp"
            (652156 'move' call_tmp[652153](120712 call _value _mt[243] this[126016]))
            unknown call_tmp[652160] "expr temp" "maybe param" "maybe type" "temp"
            (652163 'move' call_tmp[652160](120720 call(120715 call (partial) dsiDim _mt[243] call_tmp[652153]) i[120760]))
            unknown call_tmp[652165] "expr temp" "maybe param" "maybe type" "temp"
            (652168 'move' call_tmp[652165](120724 call args[120595] i[120760]))
            unknown call_tmp[652170] "expr temp" "maybe param" "maybe type" "temp"
            (652173 'move' call_tmp[652170](120726 call call_tmp[652160] call_tmp[652165]))
            (120727 call = call_tmp[652146] call_tmp[652170])
            (479574 'end of statement' upranges[120661] updim[120666] i[120760] i[120760])
            (120732 call += updim[120666] 1)
            (479579 'end of statement' updim[120666])
          }
          {
            unknown call_tmp[652175] "expr temp" "maybe param" "maybe type" "temp"
            (652178 'move' call_tmp[652175](120738 call collapsedDim[120612] i[120760]))
            (120740 call = call_tmp[652175] 1)
            (479581 'end of statement' collapsedDim[120612] i[120760])
            unknown call_tmp[652180] "expr temp" "maybe param" "maybe type" "temp"
            (652183 'move' call_tmp[652180](120747 call idx[120621] i[120760]))
            unknown call_tmp[652185] "expr temp" "maybe param" "maybe type" "temp"
            (652188 'move' call_tmp[652185](120751 call args[120595] i[120760]))
            (120752 call = call_tmp[652180] call_tmp[652185])
            (479584 'end of statement' idx[120621] i[120760] i[120760])
          }
        }
      }
      label _unused_continueLabel[120765]
      label _breakLabel[120764]
    }
    { scopeless type
      unknown call_type_tmp[492139] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652190] "expr temp" "maybe param" "maybe type" "temp"
      (652193 'move' call_tmp[652190](120800 call upranges[120661] 0))
      (492143 'move' call_type_tmp[492139](120801 'typeof' call_tmp[652190]))
    }
    const emptyrange[120802] "dead at end of block" "const" "insert auto destroy"
    (542857 'default init var' emptyrange[120802] call_type_tmp[492139])
    (120805 'end of statement')
    unknown call_tmp[652197] "expr temp" "maybe param" "maybe type" "temp"
    (652200 'move' call_tmp[652197](120809 call(382839 call (partial) contains _mt[243] this[126016]) idx[120621]))
    unknown call_tmp[652202] "expr temp" "maybe param" "maybe type" "temp"
    (652205 'move' call_tmp[652202](120810 call ! call_tmp[652197]))
    unknown call_tmp[652207] "expr temp" "maybe param" "maybe type" "temp"
    (652210 'move' call_tmp[652207](120865 call _cond_test call_tmp[652202]))
    if call_tmp[652207]
    {
      {
        unknown d[120827] "dead at end of block" "insert auto destroy"
        (542859 'init var' d[120827] 0)
        (479589 'end of statement')
        unknown tmp[120828] "maybe param" "temp"
        unknown call_tmp[652212] "expr temp" "maybe param" "maybe type" "temp"
        (652215 'move' call_tmp[652212](120815 call - uprank[120630] 1))
        (120840 'move' tmp[120828](120838 call chpl_compute_low_param_loop_bound 0 call_tmp[652212]))
        unknown tmp[120829] "maybe param" "temp"
        unknown call_tmp[652217] "expr temp" "maybe param" "maybe type" "temp"
        (652220 'move' call_tmp[652217](120845 call - uprank[120630] 1))
        (120850 'move' tmp[120829](120848 call chpl_compute_high_param_loop_bound 0 call_tmp[652217]))
        unknown tmp[120830] "maybe param" "temp"
        (120853 'move' tmp[120830] 1)
        ParamForLoop[120855]
        { d[120827] tmp[120828] tmp[120829] tmp[120830]
          unknown call_tmp[652222] "expr temp" "maybe param" "maybe type" "temp"
          (652225 'move' call_tmp[652222](120822 call upranges[120661] d[120827]))
          (120824 call = call_tmp[652222] emptyrange[120802])
          (479590 'end of statement' upranges[120661] d[120827] emptyrange[120802])
        }
        label _unused_continueLabel[120832]
        label _breakLabel[120831]
      }
    }
    unknown call_tmp[652229] "expr temp" "maybe param" "maybe type" "temp"
    (652232 'move' call_tmp[652229](359337 call dist _mt[243] this[126016]))
    unknown call_tmp[652236] "expr temp" "maybe param" "maybe type" "temp"
    (652239 'move' call_tmp[652236](120874 call _pid _mt[243] call_tmp[652229]))
    unknown call_tmp[652243] "expr temp" "maybe param" "maybe type" "temp"
    (652246 'move' call_tmp[652243](359341 call dist _mt[243] this[126016]))
    unknown call_tmp[652250] "expr temp" "maybe param" "maybe type" "temp"
    (652253 'move' call_tmp[652250](120880 call _instance _mt[243] call_tmp[652243]))
    unknown call_tmp[652255] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652258 'move' call_tmp[652255](747872 'new' ArrayViewRankChangeDist[382849](?)(downDistPid = call_tmp[652236])(downDistInst = call_tmp[652250])(collapsedDim = collapsedDim[120612])(idx = idx[120621])(_chpl_manager = unmanaged[220](?))))
    const rcdist[120889] "dead at end of block" "const" "insert auto destroy"
    (542861 'init var' rcdist[120889] call_tmp[652255])
    (120892 'end of statement')
    unknown call_tmp[652260] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652263 'move' call_tmp[652260](747873 'new' _distribution[118967](?) rcdist[120889]))
    const rcdistRec[120898] "dead at end of block" "const" "insert auto destroy"
    (542863 'init var' rcdistRec[120898] call_tmp[652260])
    (120901 'end of statement' upranges[120661] collapsedDim[120612] idx[120621] rcdist[120889])
    unknown call_tmp[652265] "expr temp" "maybe param" "maybe type" "temp"
    (652268 'move' call_tmp[652265](120910 call upranges[120661] 0))
    unknown call_tmp[652272] "expr temp" "maybe param" "maybe type" "temp"
    (652275 'move' call_tmp[652272](120911 call idxType _mt[243] call_tmp[652265]))
    unknown call_tmp[652277] "expr temp" "maybe param" "maybe type" "temp"
    (652280 'move' call_tmp[652277](120917 call upranges[120661] 0))
    unknown call_tmp[652284] "expr temp" "maybe param" "maybe type" "temp"
    (652287 'move' call_tmp[652284](120918 call stridable _mt[243] call_tmp[652277]))
    unknown call_tmp[652289] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652292 'move' call_tmp[652289](747874 'new' _domain[125902](?) rcdistRec[120898] uprank[120630] call_tmp[652272] call_tmp[652284] upranges[120661]))
    (516743 'move' ret[516738](516742 'deref' call_tmp[652289]))
    gotoReturn _end_this[516736] _end_this[516736]
    (479597 'end of statement' rcdistRec[120898] upranges[120661] upranges[120661] upranges[120661])
    label _end_this[516736]
    (516740 return ret[516738])
  }
  where {
    unknown call_tmp[652296] "expr temp" "maybe param" "maybe type" "temp"
    (652299 'move' call_tmp[652296](359327 call _value _mt[243] this[126016]))
    unknown call_tmp[652303] "expr temp" "maybe param" "maybe type" "temp"
    (652306 'move' call_tmp[652303](120604 call idxType _mt[243] call_tmp[652296]))
    (120607 call _validRankChangeArgs args[120595] call_tmp[652303])
  }
  function _domain[125902](?).this[120936](arg _mt[126022]:_MT[238], arg this[126020]:_domain[125902](?), arg i[120932]:integral[199](?) ...) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120957 call compilerError "domain slice requires a range in at least one dimension")
    (516747 return _void[55])
  }
  function _domain[125902](?).this[120969](arg _mt[126026]:_MT[238], arg this[126024]:_domain[125902](?), arg args[120966]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652312] "expr temp" "maybe param" "maybe type" "temp"
    (652315 'move' call_tmp[652312](382869 call rank _mt[243] this[126024]))
    unknown call_tmp[652317] "expr temp" "maybe param" "maybe type" "temp"
    (652320 'move' call_tmp[652317](120973 call == numArgs[120964] call_tmp[652312]))
    unknown call_tmp[652322] "expr temp" "maybe param" "maybe type" "temp"
    (652325 'move' call_tmp[652322](121020 call _cond_test call_tmp[652317]))
    if call_tmp[652322]
    {
      (120994 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121018 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (516749 return _void[55])
  }
  function _domain[125902](?).dims[121030](arg _mt[126030]:_MT[238], arg this[126028]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516753] "RVV" "temp"
    unknown call_tmp[652329] "expr temp" "maybe param" "maybe type" "temp"
    (652332 'move' call_tmp[652329](359345 call _value _mt[243] this[126028]))
    unknown call_tmp[652336] "expr temp" "maybe param" "maybe type" "temp"
    (652339 'move' call_tmp[652336](121037 call(121033 call (partial) dsiDims _mt[243] call_tmp[652329])))
    (516758 'move' ret[516753](516757 'deref' call_tmp[652336]))
    (516755 return ret[516753])
  }
  function _domain[125902](?).dim[121049](arg _mt[126034]:_MT[238], arg this[126032]:_domain[125902](?), arg d[121046]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516762] "RVV" "temp"
    unknown call_tmp[652341] "expr temp" "maybe param" "maybe type" "temp"
    (652344 'move' call_tmp[652341](121129 call _cond_test 1))
    if call_tmp[652341]
    {
      unknown tmp[424527] "maybe param" "temp"
      (424538 'move' tmp[424527](121058 call < d[121046] 0))
      unknown call_tmp[652346] "expr temp" "maybe param" "maybe type" "temp"
      (652349 'move' call_tmp[652346](424540 call _cond_invalid tmp[424527]))
      if call_tmp[652346]
      {
        (424543 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564983] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564984] "maybe param" "temp"
      unknown call_tmp[652351] "expr temp" "maybe param" "maybe type" "temp"
      (652354 'move' call_tmp[652351](424528 call isTrue tmp[424527]))
      (564989 'move' tmp[564984](564987 call _cond_test call_tmp[652351]))
      if tmp[564984]
      {
        (564994 'move' tmp[564983](564991 '_paramFoldLogical' tmp[564984] 1))
      }
      {
        unknown tmp[564996] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652358] "expr temp" "maybe param" "maybe type" "temp"
        (652361 'move' call_tmp[652358](382876 call rank _mt[243] this[126032]))
        unknown call_tmp[652363] "expr temp" "maybe param" "maybe type" "temp"
        (652366 'move' call_tmp[652363](121062 call >= d[121046] call_tmp[652358]))
        (564998 'move' tmp[564996](424532 call isTrue call_tmp[652363]))
        (565003 'move' tmp[564983](565000 '_paramFoldLogical' tmp[564984] tmp[564996]))
      }
      unknown call_tmp[652368] "expr temp" "maybe param" "maybe type" "temp"
      (652371 'move' call_tmp[652368](121124 call _cond_test tmp[564983]))
      if call_tmp[652368]
      {
        unknown call_tmp[652373] "expr temp" "maybe param" "maybe type" "temp"
        (652376 'move' call_tmp[652373](121089 call _cast string[26] d[121046]))
        unknown call_tmp[652378] "expr temp" "maybe param" "maybe type" "temp"
        (652381 'move' call_tmp[652378](121091 call + "dim(" call_tmp[652373]))
        unknown call_tmp[652383] "expr temp" "maybe param" "maybe type" "temp"
        (652386 'move' call_tmp[652383](121110 call + call_tmp[652378] ") is out-of-bounds; must be 0.."))
        unknown call_tmp[652390] "expr temp" "maybe param" "maybe type" "temp"
        (652393 'move' call_tmp[652390](382881 call rank _mt[243] this[126032]))
        unknown call_tmp[652395] "expr temp" "maybe param" "maybe type" "temp"
        (652398 'move' call_tmp[652395](121114 call - call_tmp[652390] 1))
        unknown call_tmp[652400] "expr temp" "maybe param" "maybe type" "temp"
        (652403 'move' call_tmp[652400](121117 call _cast string[26] call_tmp[652395]))
        unknown call_tmp[652405] "expr temp" "maybe param" "maybe type" "temp"
        (652408 'move' call_tmp[652405](121119 call + call_tmp[652383] call_tmp[652400]))
        (121122 call boundsCheckHalt module=[255] HaltWrappers[209998] call_tmp[652405])
        (359349 'referenced modules list' HaltWrappers[209998])
      }
    }
    unknown call_tmp[652412] "expr temp" "maybe param" "maybe type" "temp"
    (652415 'move' call_tmp[652412](359355 call _value _mt[243] this[126032]))
    unknown call_tmp[652419] "expr temp" "maybe param" "maybe type" "temp"
    (652422 'move' call_tmp[652419](121140 call(121135 call (partial) dsiDim _mt[243] call_tmp[652412]) d[121046]))
    (516767 'move' ret[516762](516766 'deref' call_tmp[652419]))
    (516764 return ret[516762])
    (355118 'used modules list'(121052 'use' HaltWrappers[209998]))
  }
  function _domain[125902](?).dim[121151](arg _mt[126038]:_MT[238], arg this[126036]:_domain[125902](?), param arg d[121148]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516771] "RVV" "temp"
    unknown tmp[424548] "maybe param" "temp"
    (424559 'move' tmp[424548](121155 call < d[121148] 0))
    unknown call_tmp[652424] "expr temp" "maybe param" "maybe type" "temp"
    (652427 'move' call_tmp[652424](424561 call _cond_invalid tmp[424548]))
    if call_tmp[652424]
    {
      (424564 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565010] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565011] "maybe param" "temp"
    unknown call_tmp[652429] "expr temp" "maybe param" "maybe type" "temp"
    (652432 'move' call_tmp[652429](424549 call isTrue tmp[424548]))
    (565016 'move' tmp[565011](565014 call _cond_test call_tmp[652429]))
    if tmp[565011]
    {
      (565021 'move' tmp[565010](565018 '_paramFoldLogical' tmp[565011] 1))
    }
    {
      unknown tmp[565023] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652436] "expr temp" "maybe param" "maybe type" "temp"
      (652439 'move' call_tmp[652436](382888 call rank _mt[243] this[126036]))
      unknown call_tmp[652441] "expr temp" "maybe param" "maybe type" "temp"
      (652444 'move' call_tmp[652441](121160 call - call_tmp[652436] 1))
      unknown call_tmp[652446] "expr temp" "maybe param" "maybe type" "temp"
      (652449 'move' call_tmp[652446](121162 call > d[121148] call_tmp[652441]))
      (565025 'move' tmp[565023](424553 call isTrue call_tmp[652446]))
      (565030 'move' tmp[565010](565027 '_paramFoldLogical' tmp[565011] tmp[565023]))
    }
    unknown call_tmp[652451] "expr temp" "maybe param" "maybe type" "temp"
    (652454 'move' call_tmp[652451](121191 call _cond_test tmp[565010]))
    if call_tmp[652451]
    {
      unknown call_tmp[652458] "expr temp" "maybe param" "maybe type" "temp"
      (652461 'move' call_tmp[652458](382892 call rank _mt[243] this[126036]))
      unknown call_tmp[652463] "expr temp" "maybe param" "maybe type" "temp"
      (652466 'move' call_tmp[652463](121187 call - call_tmp[652458] 1))
      (121189 call compilerError "dim() must take a value from 0.." call_tmp[652463])
    }
    unknown call_tmp[652470] "expr temp" "maybe param" "maybe type" "temp"
    (652473 'move' call_tmp[652470](359359 call _value _mt[243] this[126036]))
    unknown call_tmp[652477] "expr temp" "maybe param" "maybe type" "temp"
    (652480 'move' call_tmp[652477](121203 call(121198 call (partial) dsiDim _mt[243] call_tmp[652470]) d[121148]))
    (516776 'move' ret[516771](516775 'deref' call_tmp[652477]))
    (516773 return ret[516771])
  }
  function _domain[125902](?).dimIter[121212](arg _mt[126042]:_MT[238], arg this[126040]:_domain[125902](?), param arg d[121210]:_any[178](?), arg ind[121214]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516780] "RVV" "temp"
    {
      unknown _indexOfInterest[121230] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121231] "expr temp" "temp"
      unknown call_tmp[652484] "expr temp" "maybe param" "maybe type" "temp"
      (652487 'move' call_tmp[652484](359363 call _value _mt[243] this[126040]))
      unknown call_tmp[652491] "expr temp" "maybe param" "maybe type" "temp"
      (652494 'move' call_tmp[652491](121226 call(121220 call (partial) dimIter _mt[243] call_tmp[652484]) d[121210] ind[121214]))
      (121240 'move' _iterator[121231](121238 call _getIterator call_tmp[652491]))
      Defer
      {
        {
          (121257 call _freeIterator _iterator[121231])
        }
      }
      { scopeless type
        (121246 'move' _indexOfInterest[121230](121243 call iteratorIndex _iterator[121231]))
      }
      ForLoop[121232]
      {
        unknown i[121250] "index var" "insert auto destroy"
        (479613 'end of statement')
        (121252 'move' i[121250] _indexOfInterest[121230])
        (479614 'end of statement' i[121250])
        unknown yret[516784] "YVV" "temp"
        (516787 'move' yret[516784](516786 'deref' i[121250]))
        (516789 yield yret[516784])
        (479616 'end of statement' i[121250])
        label _continueLabel[121235]
        _indexOfInterest[121230]
        _iterator[121231]
      }
      label _breakLabel[121236]
    }
    (516782 return ret[516780])
  }
  function _domain[125902](?).shape[121269](arg _mt[126046]:_MT[238], arg this[126044]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516793] "RVV" "temp"
    unknown s[121291] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652498] "expr temp" "maybe param" "maybe type" "temp"
    (652501 'move' call_tmp[652498](382902 call rank _mt[243] this[126044]))
    unknown call_tmp[652505] "expr temp" "maybe param" "maybe type" "temp"
    (652508 'move' call_tmp[652505](121285 call(382906 call (partial) dim _mt[243] this[126044]) 0))
    unknown call_tmp[652512] "expr temp" "maybe param" "maybe type" "temp"
    (652515 'move' call_tmp[652512](121286 call intIdxType _mt[243] call_tmp[652505]))
    unknown call_tmp[652517] "expr temp" "maybe param" "maybe type" "temp"
    (652520 'move' call_tmp[652517](121289 call * call_tmp[652498] call_tmp[652512]))
    (542865 'default init var' s[121291] call_tmp[652517])
    (121294 'end of statement')
    {
      unknown _indexOfInterest[121326] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121327] "expr temp" "temp"
      unknown call_tmp[652524] "expr temp" "maybe param" "maybe type" "temp"
      (652527 'move' call_tmp[652524](121350 call size _mt[243] s[121291]))
      unknown call_tmp[652529] "expr temp" "maybe param" "maybe type" "temp"
      (652532 'move' call_tmp[652529](121354 call chpl_direct_counted_range_iter 0 call_tmp[652524]))
      unknown call_tmp[652534] "expr temp" "maybe param" "maybe type" "temp"
      (652537 'move' call_tmp[652534](121344 call _getIterator call_tmp[652529]))
      unknown call_tmp[652541] "expr temp" "maybe param" "maybe type" "temp"
      (652544 'move' call_tmp[652541](121357 call(382912 call (partial) dims _mt[243] this[126044])))
      unknown call_tmp[652546] "expr temp" "maybe param" "maybe type" "temp"
      (652549 'move' call_tmp[652546](121358 call _getIterator call_tmp[652541]))
      (121361 'move' _iterator[121327](121314 call _build_tuple call_tmp[652534] call_tmp[652546]))
      Defer
      {
        {
          (121391 call _freeIterator _iterator[121327])
        }
      }
      { scopeless type
        (121366 'move' _indexOfInterest[121326](121363 call iteratorIndex _iterator[121327]))
      }
      ForLoop[121328]
      {
        (121371 call _check_tuple_var_decl _indexOfInterest[121326] 2)
        (479619 'end of statement')
        unknown i[121377] "index var" "insert auto destroy"
        (479620 'end of statement')
        (121379 'move' i[121377](121375 call _indexOfInterest[121326] 0))
        (479621 'end of statement' i[121377])
        unknown r[121384] "index var" "insert auto destroy"
        (479623 'end of statement')
        (121386 'move' r[121384](121382 call _indexOfInterest[121326] 1))
        (479624 'end of statement' r[121384])
        unknown call_tmp[652551] "expr temp" "maybe param" "maybe type" "temp"
        (652554 'move' call_tmp[652551](121318 call s[121291] i[121377]))
        unknown call_tmp[652558] "expr temp" "maybe param" "maybe type" "temp"
        (652561 'move' call_tmp[652558](121320 call size _mt[243] r[121384]))
        (121323 call = call_tmp[652551] call_tmp[652558])
        (479626 'end of statement' s[121291] i[121377] r[121384])
        label _continueLabel[121331]
        _indexOfInterest[121326]
        _iterator[121327]
      }
      label _breakLabel[121332]
    }
    (516798 'move' ret[516793](516797 'deref' s[121291]))
    gotoReturn _end_shape[516791] _end_shape[516791]
    (479630 'end of statement' s[121291])
    label _end_shape[516791]
    (516795 return ret[516793])
  }
  where {
    unknown tmp[424569] "maybe param" "temp"
    (424580 'move' tmp[424569](121274 call isRectangularDom this[126044]))
    unknown call_tmp[652563] "expr temp" "maybe param" "maybe type" "temp"
    (652566 'move' call_tmp[652563](424582 call _cond_invalid tmp[424569]))
    if call_tmp[652563]
    {
      (424585 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565037] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565038] "maybe param" "temp"
    unknown call_tmp[652568] "expr temp" "maybe param" "maybe type" "temp"
    (652571 'move' call_tmp[652568](424570 call isTrue tmp[424569]))
    (565043 'move' tmp[565038](565041 call _cond_test call_tmp[652568]))
    if tmp[565038]
    {
      (565048 'move' tmp[565037](565045 '_paramFoldLogical' tmp[565038] 1))
    }
    {
      unknown tmp[565050] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652573] "expr temp" "maybe param" "maybe type" "temp"
      (652576 'move' call_tmp[652573](121278 call isSparseDom this[126044]))
      (565052 'move' tmp[565050](424574 call isTrue call_tmp[652573]))
      (565057 'move' tmp[565037](565054 '_paramFoldLogical' tmp[565038] tmp[565050]))
    }
    (748262 call chpl_statementLevelSymbol tmp[565037])
  }
  function _domain[125902](?).shape[121406](arg _mt[126050]:_MT[238], arg this[126048]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516804] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492145] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652580] "expr temp" "maybe param" "maybe type" "temp"
      (652583 'move' call_tmp[652580](382918 call size _mt[243] this[126048]))
      (492149 'move' call_type_tmp[492145](121413 'typeof' call_tmp[652580]))
    }
    unknown s[121416] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652585] "expr temp" "maybe param" "maybe type" "temp"
    (652588 'move' call_tmp[652585](121414 call _build_tuple call_type_tmp[492145]))
    (542867 'default init var' s[121416] call_tmp[652585])
    (121419 'end of statement')
    unknown call_tmp[652590] "expr temp" "maybe param" "maybe type" "temp"
    (652593 'move' call_tmp[652590](121424 call s[121416] 0))
    unknown call_tmp[652597] "expr temp" "maybe param" "maybe type" "temp"
    (652600 'move' call_tmp[652597](382923 call size _mt[243] this[126048]))
    (121426 call = call_tmp[652590] call_tmp[652597])
    (479632 'end of statement' s[121416])
    (516809 'move' ret[516804](516808 'deref' s[121416]))
    gotoReturn _end_shape[516802] _end_shape[516802]
    (479634 'end of statement' s[121416])
    label _end_shape[516802]
    (516806 return ret[516804])
  }
  where {
    (121411 call isAssociativeDom this[126048])
  }
  function _domain[125902](?).shape[121437](arg _mt[126054]:_MT[238], arg this[126052]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121458 call compilerError ".shape not supported on this domain")
    (516813 return _void[55])
  }
  function _domain[125902](?).buildArray[121467](arg _mt[126058]:_MT[238], arg this[126056]:_domain[125902](?), arg eltType[121465]:_any[178](?), param arg initElts[121470]:bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516819] "RVV" "temp"
    unknown call_tmp[652602] "expr temp" "maybe param" "maybe type" "temp"
    (652605 'move' call_tmp[652602](121475 call == eltType[121465] void[4]))
    unknown call_tmp[652607] "expr temp" "maybe param" "maybe type" "temp"
    (652610 'move' call_tmp[652607](121499 call _cond_test call_tmp[652602]))
    if call_tmp[652607]
    {
      (121496 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652612] "expr temp" "maybe param" "maybe type" "temp"
    (652615 'move' call_tmp[652612](121507 call isGenericType eltType[121465]))
    unknown call_tmp[652617] "expr temp" "maybe param" "maybe type" "temp"
    (652620 'move' call_tmp[652617](121667 call _cond_test call_tmp[652612]))
    if call_tmp[652617]
    {
      unknown call_tmp[652622] "expr temp" "maybe param" "maybe type" "temp"
      (652625 'move' call_tmp[652622](121528 call _cast string[26] eltType[121465]))
      unknown call_tmp[652627] "expr temp" "maybe param" "maybe type" "temp"
      (652630 'move' call_tmp[652627](121530 call + "creating an array with element type " call_tmp[652622]))
      (121533 call compilerWarning call_tmp[652627])
      (479638 'end of statement')
      unknown tmp[424590] "maybe param" "temp"
      (424601 'move' tmp[424590](121539 call isClassType eltType[121465]))
      unknown call_tmp[652632] "expr temp" "maybe param" "maybe type" "temp"
      (652635 'move' call_tmp[652632](424603 call _cond_invalid tmp[424590]))
      if call_tmp[652632]
      {
        (424606 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565064] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565065] "maybe param" "temp"
      unknown call_tmp[652637] "expr temp" "maybe param" "maybe type" "temp"
      (652640 'move' call_tmp[652637](424591 call isTrue tmp[424590]))
      (565070 'move' tmp[565065](565068 call _cond_test call_tmp[652637]))
      if tmp[565065]
      {
        unknown tmp[565072] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652642] "expr temp" "maybe param" "maybe type" "temp"
        (652645 'move' call_tmp[652642](121542 'to borrowed class from unknown' eltType[121465]))
        unknown call_tmp[652647] "expr temp" "maybe param" "maybe type" "temp"
        (652650 'move' call_tmp[652647](121544 call isGenericType call_tmp[652642]))
        unknown call_tmp[652652] "expr temp" "maybe param" "maybe type" "temp"
        (652655 'move' call_tmp[652652](121545 call ! call_tmp[652647]))
        (565074 'move' tmp[565072](424594 call isTrue call_tmp[652652]))
        (565079 'move' tmp[565064](565076 '_paramFoldLogical' tmp[565065] tmp[565072]))
      }
      {
        (565084 'move' tmp[565064](565081 '_paramFoldLogical' tmp[565065] 0))
      }
      unknown call_tmp[652657] "expr temp" "maybe param" "maybe type" "temp"
      (652660 'move' call_tmp[652657](121571 call _cond_test tmp[565064]))
      if call_tmp[652657]
      {
        (121568 call compilerWarning "which now means class type with generic management")
      }
      (121594 call compilerError "array element type cannot currently be generic")
    }
    {
      unknown tmp[424611] "maybe param" "temp"
      (424622 'move' tmp[424611](121599 call isSparseDom this[126056]))
      unknown call_tmp[652662] "expr temp" "maybe param" "maybe type" "temp"
      (652665 'move' call_tmp[652662](424624 call _cond_invalid tmp[424611]))
      if call_tmp[652662]
      {
        (424627 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565091] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565092] "maybe param" "temp"
      unknown call_tmp[652667] "expr temp" "maybe param" "maybe type" "temp"
      (652670 'move' call_tmp[652667](424612 call isTrue tmp[424611]))
      (565097 'move' tmp[565092](565095 call _cond_test call_tmp[652667]))
      if tmp[565092]
      {
        unknown tmp[565099] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652672] "expr temp" "maybe param" "maybe type" "temp"
        (652675 'move' call_tmp[652672](121603 call isDefaultInitializable eltType[121465]))
        unknown call_tmp[652677] "expr temp" "maybe param" "maybe type" "temp"
        (652680 'move' call_tmp[652677](121604 call ! call_tmp[652672]))
        (565101 'move' tmp[565099](424615 call isTrue call_tmp[652677]))
        (565106 'move' tmp[565091](565103 '_paramFoldLogical' tmp[565092] tmp[565099]))
      }
      {
        (565111 'move' tmp[565091](565108 '_paramFoldLogical' tmp[565092] 0))
      }
      unknown call_tmp[652682] "expr temp" "maybe param" "maybe type" "temp"
      (652685 'move' call_tmp[652682](121663 call _cond_test tmp[565091]))
      if call_tmp[652682]
      {
        unknown call_tmp[652687] "expr temp" "maybe param" "maybe type" "temp"
        (652690 'move' call_tmp[652687](121611 call isNonNilableClass eltType[121465]))
        unknown call_tmp[652692] "expr temp" "maybe param" "maybe type" "temp"
        (652695 'move' call_tmp[652692](121658 call _cond_test call_tmp[652687]))
        if call_tmp[652692]
        {
          (121631 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121655 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    unknown call_tmp[652697] "expr temp" "maybe param" "maybe type" "temp"
    (652700 'move' call_tmp[652697](121784 call _cond_test 0))
    if call_tmp[652697]
    {
      unknown tmp[424632] "maybe param" "temp"
      (424643 'move' tmp[424632](121676 call isRectangularDom this[126056]))
      unknown call_tmp[652702] "expr temp" "maybe param" "maybe type" "temp"
      (652705 'move' call_tmp[652702](424645 call _cond_invalid tmp[424632]))
      if call_tmp[652702]
      {
        (424648 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565118] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565119] "maybe param" "temp"
      unknown call_tmp[652707] "expr temp" "maybe param" "maybe type" "temp"
      (652710 'move' call_tmp[652707](424633 call isTrue tmp[424632]))
      (565124 'move' tmp[565119](565122 call _cond_test call_tmp[652707]))
      if tmp[565119]
      {
        unknown tmp[565126] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652714] "expr temp" "maybe param" "maybe type" "temp"
        (652717 'move' call_tmp[652714](121678 call stridable _mt[243] this[126056]))
        (565128 'move' tmp[565126](424636 call isTrue call_tmp[652714]))
        (565133 'move' tmp[565118](565130 '_paramFoldLogical' tmp[565119] tmp[565126]))
      }
      {
        (565138 'move' tmp[565118](565135 '_paramFoldLogical' tmp[565119] 0))
      }
      unknown call_tmp[652719] "expr temp" "maybe param" "maybe type" "temp"
      (652722 'move' call_tmp[652719](121779 call _cond_test tmp[565118]))
      if call_tmp[652719]
      {
        unknown call_tmp[652726] "expr temp" "maybe param" "maybe type" "temp"
        (652729 'move' call_tmp[652726](382938 call rank _mt[243] this[126056]))
        unknown call_tmp[652731] "expr temp" "maybe param" "maybe type" "temp"
        (652734 'move' call_tmp[652731](121685 call == call_tmp[652726] 1))
        unknown call_tmp[652736] "expr temp" "maybe param" "maybe type" "temp"
        (652739 'move' call_tmp[652736](121775 call _cond_test call_tmp[652731]))
        if call_tmp[652736]
        {
          unknown call_tmp[652743] "expr temp" "maybe param" "maybe type" "temp"
          (652746 'move' call_tmp[652743](121688 call stride _mt[243] this[126056]))
          unknown call_tmp[652748] "expr temp" "maybe param" "maybe type" "temp"
          (652751 'move' call_tmp[652748](121692 call < call_tmp[652743] 0))
          unknown call_tmp[652753] "expr temp" "maybe param" "maybe type" "temp"
          (652756 'move' call_tmp[652753](121715 call _cond_test call_tmp[652748]))
          if call_tmp[652753]
          {
            (121713 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121740] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121741] "expr temp" "temp"
            unknown call_tmp[652760] "expr temp" "maybe param" "maybe type" "temp"
            (652763 'move' call_tmp[652760](121723 call stride _mt[243] this[126056]))
            (121750 'move' _iterator[121741](121748 call _getIterator call_tmp[652760]))
            Defer
            {
              {
                (121767 call _freeIterator _iterator[121741])
              }
            }
            { scopeless type
              (121756 'move' _indexOfInterest[121740](121753 call iteratorIndex _iterator[121741]))
            }
            ForLoop[121742]
            {
              unknown s[121760] "index var" "insert auto destroy"
              (479648 'end of statement')
              (121762 'move' s[121760] _indexOfInterest[121740])
              (479649 'end of statement' s[121760])
              unknown call_tmp[652765] "expr temp" "maybe param" "maybe type" "temp"
              (652768 'move' call_tmp[652765](121728 call < s[121760] 0))
              unknown call_tmp[652770] "expr temp" "maybe param" "maybe type" "temp"
              (652773 'move' call_tmp[652770](121735 call _cond_test call_tmp[652765]))
              if call_tmp[652770]
              {
                (121733 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121745]
              _indexOfInterest[121740]
              _iterator[121741]
            }
            label _breakLabel[121746]
          }
        }
      }
    }
    unknown call_tmp[652777] "expr temp" "maybe param" "maybe type" "temp"
    (652780 'move' call_tmp[652777](359372 call _value _mt[243] this[126056]))
    unknown call_tmp[652784] "maybe param" "maybe type" "temp"
    (652787 'move' call_tmp[652784](121798 call(121792 call (partial) dsiBuildArray _mt[243] call_tmp[652777]) eltType[121465] initElts[121470]))
    unknown x[121799] "dead at end of block" "insert auto destroy"
    (542869 'init var' x[121799] call_tmp[652784])
    (121802 'end of statement')
    function help[121805]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652791] "expr temp" "maybe param" "maybe type" "temp"
      (652794 'move' call_tmp[652791](359376 call _value _mt[243] this[126056]))
      (121815 call(121810 call (partial) add_arr _mt[243] call_tmp[652791]) x[121799])
      (516815 return _void[55])
    }
    (121822 call help)
    (479653 'end of statement')
    unknown call_tmp[652800] "expr temp" "maybe param" "maybe type" "temp"
    (652803 'move' call_tmp[652800](121828 call eltType _mt[243] x[121799]))
    (121831 call chpl_incRefCountsForDomainsInArrayEltTypes x[121799] call_tmp[652800])
    (479654 'end of statement' x[121799] x[121799])
    unknown call_tmp[652805] "expr temp" "maybe param" "maybe type" "temp"
    (652808 'move' call_tmp[652805](121836 call _newArray x[121799]))
    (516824 'move' ret[516819](516823 'deref' call_tmp[652805]))
    gotoReturn _end_buildArray[516817] _end_buildArray[516817]
    (479657 'end of statement' x[121799])
    label _end_buildArray[516817]
    (516821 return ret[516819])
  }
  function _domain[125902](?).buildArrayWith[121845](arg _mt[126062]:_MT[238], arg this[126060]:_domain[125902](?), arg eltType[121843]:_any[178](?), arg data[121851] :
  (121850 call _ddata[11695](?) eltType[121843]), arg allocSize[121855]:int(64)[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516832] "RVV" "temp"
    unknown call_tmp[652810] "expr temp" "maybe param" "maybe type" "temp"
    (652813 'move' call_tmp[652810](121860 call == eltType[121843] void[4]))
    unknown call_tmp[652815] "expr temp" "maybe param" "maybe type" "temp"
    (652818 'move' call_tmp[652815](121868 call _cond_test call_tmp[652810]))
    if call_tmp[652815]
    {
      (121865 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652822] "expr temp" "maybe param" "maybe type" "temp"
    (652825 'move' call_tmp[652822](359381 call _value _mt[243] this[126060]))
    unknown call_tmp[652829] "maybe param" "maybe type" "temp"
    (652832 'move' call_tmp[652829](121883 call(121876 call (partial) dsiBuildArrayWith _mt[243] call_tmp[652822]) eltType[121843] data[121851] allocSize[121855]))
    unknown x[121884] "dead at end of block" "insert auto destroy"
    (542871 'init var' x[121884] call_tmp[652829])
    (121887 'end of statement')
    function help[121890]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652836] "expr temp" "maybe param" "maybe type" "temp"
      (652839 'move' call_tmp[652836](359385 call _value _mt[243] this[126060]))
      (121898 call(121893 call (partial) add_arr _mt[243] call_tmp[652836]) x[121884])
      (516828 return _void[55])
    }
    (121905 call help)
    (479661 'end of statement')
    unknown call_tmp[652845] "expr temp" "maybe param" "maybe type" "temp"
    (652848 'move' call_tmp[652845](121911 call eltType _mt[243] x[121884]))
    (121914 call chpl_incRefCountsForDomainsInArrayEltTypes x[121884] call_tmp[652845])
    (479662 'end of statement' x[121884] x[121884])
    unknown call_tmp[652850] "expr temp" "maybe param" "maybe type" "temp"
    (652853 'move' call_tmp[652850](121919 call _newArray x[121884]))
    (516837 'move' ret[516832](516836 'deref' call_tmp[652850]))
    gotoReturn _end_buildArrayWith[516830] _end_buildArrayWith[516830]
    (479665 'end of statement' x[121884])
    label _end_buildArrayWith[516830]
    (516834 return ret[516832])
  }
  function _domain[125902](?).clear[121926](arg _mt[126066]:_MT[238], arg this[126064]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121934] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652855] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (652858 'move' call_tmp[652855](121933 'typeof' this[126064]))
    (542873 'default init var' emptyDom[121934] call_tmp[652855])
    (121937 'end of statement')
    (121941 call = this[126064] emptyDom[121934])
    (479667 'end of statement' emptyDom[121934])
    (516841 return _void[55])
  }
  where {
    (121931 call isRectangularDom this[126064])
  }
  function _domain[125902](?).clear[121949](arg _mt[126070]:_MT[238], arg this[126068]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652862] "expr temp" "maybe param" "maybe type" "temp"
    (652865 'move' call_tmp[652862](359390 call _value _mt[243] this[126068]))
    (121958 call(121954 call (partial) dsiClear _mt[243] call_tmp[652862]))
    (516843 return _void[55])
  }
  function _domain[125902](?).add[121967](arg _mt[126074]:_MT[238], arg this[126072]:_domain[125902](?), in arg i[121965]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516847] "RVV" "temp"
    unknown call_tmp[652871] "expr temp" "maybe param" "maybe type" "temp"
    (652874 'move' call_tmp[652871](359394 call _value _mt[243] this[126072]))
    unknown call_tmp[652878] "expr temp" "maybe param" "maybe type" "temp"
    (652881 'move' call_tmp[652878](121977 call(121972 call (partial) dsiAdd _mt[243] call_tmp[652871]) i[121965]))
    (516852 'move' ret[516847](516851 'deref' call_tmp[652878]))
    (516849 return ret[516847])
  }
  function _domain[125902](?).bulkAdd[121995](arg _mt[126078]:_MT[238], arg this[126076]:_domain[125902](?), arg inds[121992]:_array[133588](?), arg dataSorted[121998] :
  0 =
  0, arg isUnique[122002] :
  0 =
  0, arg preserveInds[122006] :
  1 =
  1, arg addOn[122010] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516856] "RVV" "temp"
    unknown call_tmp[652885] "expr temp" "maybe param" "maybe type" "temp"
    (652888 'move' call_tmp[652885](122027 call size _mt[243] inds[121992]))
    unknown call_tmp[652890] "expr temp" "maybe param" "maybe type" "temp"
    (652893 'move' call_tmp[652890](122031 call == call_tmp[652885] 0))
    unknown call_tmp[652895] "expr temp" "maybe param" "maybe type" "temp"
    (652898 'move' call_tmp[652895](122036 call _cond_test call_tmp[652890]))
    if call_tmp[652895]
    {
      (516861 'move' ret[516856](516860 'deref' 0))
      gotoReturn _end_bulkAdd[516854] _end_bulkAdd[516854]
    }
    unknown call_tmp[652902] "expr temp" "maybe param" "maybe type" "temp"
    (652905 'move' call_tmp[652902](359407 call _value _mt[243] this[126076]))
    unknown call_tmp[652909] "expr temp" "maybe param" "maybe type" "temp"
    (652912 'move' call_tmp[652909](122054 call(122045 call (partial) dsiBulkAdd _mt[243] call_tmp[652902]) inds[121992] dataSorted[121998] isUnique[122002] preserveInds[122006] addOn[122010]))
    (516866 'move' ret[516856](516865 'deref' call_tmp[652909]))
    label _end_bulkAdd[516854]
    (516858 return ret[516856])
  }
  where {
    unknown tmp[424653] "maybe param" "temp"
    (424664 'move' tmp[424653](122016 call isSparseDom this[126076]))
    unknown call_tmp[652914] "expr temp" "maybe param" "maybe type" "temp"
    (652917 'move' call_tmp[652914](424666 call _cond_invalid tmp[424653]))
    if call_tmp[652914]
    {
      (424669 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565145] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565146] "maybe param" "temp"
    unknown call_tmp[652919] "expr temp" "maybe param" "maybe type" "temp"
    (652922 'move' call_tmp[652919](424654 call isTrue tmp[424653]))
    (565151 'move' tmp[565146](565149 call _cond_test call_tmp[652919]))
    if tmp[565146]
    {
      unknown tmp[565153] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652926] "expr temp" "maybe param" "maybe type" "temp"
      (652929 'move' call_tmp[652926](359402 call _value _mt[243] this[126076]))
      unknown call_tmp[652933] "expr temp" "maybe param" "maybe type" "temp"
      (652936 'move' call_tmp[652933](122018 call rank _mt[243] call_tmp[652926]))
      unknown call_tmp[652938] "expr temp" "maybe param" "maybe type" "temp"
      (652941 'move' call_tmp[652938](122022 call == call_tmp[652933] 1))
      (565155 'move' tmp[565153](424657 call isTrue call_tmp[652938]))
      (565160 'move' tmp[565145](565157 '_paramFoldLogical' tmp[565146] tmp[565153]))
    }
    {
      (565165 'move' tmp[565145](565162 '_paramFoldLogical' tmp[565146] 0))
    }
    unknown call_tmp[652945] "expr temp" "maybe param" "maybe type" "temp"
    (652948 'move' call_tmp[652945](359398 call _value _mt[243] this[126076]))
    unknown call_tmp[652952] "expr temp" "maybe param" "maybe type" "temp"
    (652955 'move' call_tmp[652952](121986 call idxType _mt[243] call_tmp[652945]))
    unknown call_tmp[652959] "expr temp" "maybe param" "maybe type" "temp"
    (652962 'move' call_tmp[652959](461401 call eltType _mt[243] inds[121992]))
    unknown call_tmp[652964] "expr temp" "maybe param" "maybe type" "temp"
    (652967 'move' call_tmp[652964](461405 call == call_tmp[652952] call_tmp[652959]))
    (461399 call & tmp[565145] call_tmp[652964])
  }
  function _domain[125902](?).makeIndexBuffer[122066](arg _mt[126082]:_MT[238], arg this[126080]:_domain[125902](?), arg size[122063]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516870] "RVV" "temp"
    unknown call_tmp[652971] "expr temp" "maybe param" "maybe type" "temp"
    (652974 'move' call_tmp[652971](359411 call _value _mt[243] this[126080]))
    unknown call_tmp[652978] "expr temp" "maybe param" "maybe type" "temp"
    (652981 'move' call_tmp[652978](122076 call(122071 call (partial) dsiMakeIndexBuffer _mt[243] call_tmp[652971]) size[122063]))
    (516875 'move' ret[516870](516874 'deref' call_tmp[652978]))
    (516872 return ret[516870])
  }
  function _domain[125902](?).bulkAdd[122100](arg _mt[126086]:_MT[238], arg this[126084]:_domain[125902](?), arg inds[122097]:_array[133588](?), arg dataSorted[122103] :
  0 =
  0, arg isUnique[122107] :
  0 =
  0, arg preserveInds[122111] :
  1 =
  1, arg addOn[122115] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516879] "RVV" "temp"
    unknown call_tmp[652985] "expr temp" "maybe param" "maybe type" "temp"
    (652988 'move' call_tmp[652985](122132 call size _mt[243] inds[122097]))
    unknown call_tmp[652990] "expr temp" "maybe param" "maybe type" "temp"
    (652993 'move' call_tmp[652990](122136 call == call_tmp[652985] 0))
    unknown call_tmp[652995] "expr temp" "maybe param" "maybe type" "temp"
    (652998 'move' call_tmp[652995](122141 call _cond_test call_tmp[652990]))
    if call_tmp[652995]
    {
      (516884 'move' ret[516879](516883 'deref' 0))
      gotoReturn _end_bulkAdd[516877] _end_bulkAdd[516877]
    }
    unknown call_tmp[653002] "expr temp" "maybe param" "maybe type" "temp"
    (653005 'move' call_tmp[653002](359428 call _value _mt[243] this[126084]))
    unknown call_tmp[653009] "expr temp" "maybe param" "maybe type" "temp"
    (653012 'move' call_tmp[653009](122157 call(122148 call (partial) dsiBulkAdd _mt[243] call_tmp[653002]) inds[122097] dataSorted[122103] isUnique[122107] preserveInds[122111] addOn[122115]))
    (516889 'move' ret[516879](516888 'deref' call_tmp[653009]))
    label _end_bulkAdd[516877]
    (516881 return ret[516879])
  }
  where {
    unknown tmp[424674] "maybe param" "temp"
    (424685 'move' tmp[424674](122121 call isSparseDom this[126084]))
    unknown call_tmp[653014] "expr temp" "maybe param" "maybe type" "temp"
    (653017 'move' call_tmp[653014](424687 call _cond_invalid tmp[424674]))
    if call_tmp[653014]
    {
      (424690 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565172] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565173] "maybe param" "temp"
    unknown call_tmp[653019] "expr temp" "maybe param" "maybe type" "temp"
    (653022 'move' call_tmp[653019](424675 call isTrue tmp[424674]))
    (565178 'move' tmp[565173](565176 call _cond_test call_tmp[653019]))
    if tmp[565173]
    {
      unknown tmp[565180] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653026] "expr temp" "maybe param" "maybe type" "temp"
      (653029 'move' call_tmp[653026](359423 call _value _mt[243] this[126084]))
      unknown call_tmp[653033] "expr temp" "maybe param" "maybe type" "temp"
      (653036 'move' call_tmp[653033](122123 call rank _mt[243] call_tmp[653026]))
      unknown call_tmp[653038] "expr temp" "maybe param" "maybe type" "temp"
      (653041 'move' call_tmp[653038](122127 call > call_tmp[653033] 1))
      (565182 'move' tmp[565180](424678 call isTrue call_tmp[653038]))
      (565187 'move' tmp[565172](565184 '_paramFoldLogical' tmp[565173] tmp[565180]))
    }
    {
      (565192 'move' tmp[565172](565189 '_paramFoldLogical' tmp[565173] 0))
    }
    unknown call_tmp[653045] "expr temp" "maybe param" "maybe type" "temp"
    (653048 'move' call_tmp[653045](359415 call _value _mt[243] this[126084]))
    unknown call_tmp[653052] "expr temp" "maybe param" "maybe type" "temp"
    (653055 'move' call_tmp[653052](122085 call rank _mt[243] call_tmp[653045]))
    unknown call_tmp[653059] "expr temp" "maybe param" "maybe type" "temp"
    (653062 'move' call_tmp[653059](359419 call _value _mt[243] this[126084]))
    unknown call_tmp[653066] "expr temp" "maybe param" "maybe type" "temp"
    (653069 'move' call_tmp[653066](122089 call idxType _mt[243] call_tmp[653059]))
    unknown call_tmp[653071] "expr temp" "maybe param" "maybe type" "temp"
    (653074 'move' call_tmp[653071](122092 call * call_tmp[653052] call_tmp[653066]))
    unknown call_tmp[653078] "expr temp" "maybe param" "maybe type" "temp"
    (653081 'move' call_tmp[653078](461411 call eltType _mt[243] inds[122097]))
    unknown call_tmp[653083] "expr temp" "maybe param" "maybe type" "temp"
    (653086 'move' call_tmp[653083](461415 call == call_tmp[653071] call_tmp[653078]))
    (461409 call & tmp[565172] call_tmp[653083])
  }
  function _domain[125902](?).remove[122167](arg _mt[126090]:_MT[238], arg this[126088]:_domain[125902](?), arg i[122165]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516893] "RVV" "temp"
    unknown call_tmp[653090] "expr temp" "maybe param" "maybe type" "temp"
    (653093 'move' call_tmp[653090](359432 call _value _mt[243] this[126088]))
    unknown call_tmp[653097] "expr temp" "maybe param" "maybe type" "temp"
    (653100 'move' call_tmp[653097](122177 call(122172 call (partial) dsiRemove _mt[243] call_tmp[653090]) i[122165]))
    (516898 'move' ret[516893](516897 'deref' call_tmp[653097]))
    (516895 return ret[516893])
  }
  function _domain[125902](?).requestCapacity[122187](arg _mt[126094]:_MT[238], arg this[126092]:_domain[125902](?), arg i[122185]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[653102] "expr temp" "maybe param" "maybe type" "temp"
    (653105 'move' call_tmp[653102](122191 call < i[122185] 0))
    unknown call_tmp[653107] "expr temp" "maybe param" "maybe type" "temp"
    (653110 'move' call_tmp[653107](122215 call _cond_test call_tmp[653102]))
    if call_tmp[653107]
    {
      (122212 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    unknown call_tmp[653112] "expr temp" "maybe param" "maybe type" "temp"
    (653115 'move' call_tmp[653112](122223 call isAssociativeDom this[126092]))
    unknown call_tmp[653117] "expr temp" "maybe param" "maybe type" "temp"
    (653120 'move' call_tmp[653117](122224 call ! call_tmp[653112]))
    unknown call_tmp[653122] "expr temp" "maybe param" "maybe type" "temp"
    (653125 'move' call_tmp[653122](122247 call _cond_test call_tmp[653117]))
    if call_tmp[653122]
    {
      (122245 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[653129] "expr temp" "maybe param" "maybe type" "temp"
    (653132 'move' call_tmp[653129](359436 call _value _mt[243] this[126092]))
    (122260 call(122255 call (partial) dsiRequestCapacity _mt[243] call_tmp[653129]) i[122185])
    (516900 return _void[55])
  }
  function _domain[125902](?).size[122266](arg _mt[126098]:_MT[238], arg this[126096]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516904] "RVV" "temp"
    unknown call_tmp[653138] "expr temp" "maybe param" "maybe type" "temp"
    (653141 'move' call_tmp[653138](359440 call _value _mt[243] this[126096]))
    unknown call_tmp[653145] "expr temp" "maybe param" "maybe type" "temp"
    (653148 'move' call_tmp[653145](122269 call dsiNumIndices _mt[243] call_tmp[653138]))
    (516909 'move' ret[516904](516908 'deref' call_tmp[653145]))
    (516906 return ret[516904])
  }
  function _domain[125902](?).numIndices[122279](arg _mt[126102]:_MT[238], arg this[126100]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516913] "RVV" "temp"
    unknown call_tmp[653150] "expr temp" "maybe param" "maybe type" "temp"
    (653153 'move' call_tmp[653150](122316 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122319 call compilerWarning call_tmp[653150])
    (479681 'end of statement')
    unknown call_tmp[653157] "expr temp" "maybe param" "maybe type" "temp"
    (653160 'move' call_tmp[653157](382981 call size _mt[243] this[126100]))
    (516918 'move' ret[516913](516917 'deref' call_tmp[653157]))
    (516915 return ret[516913])
  }
  function _domain[125902](?).low[122329](arg _mt[126106]:_MT[238], arg this[126104]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516922] "RVV" "temp"
    unknown call_tmp[653164] "expr temp" "maybe param" "maybe type" "temp"
    (653167 'move' call_tmp[653164](359444 call _value _mt[243] this[126104]))
    unknown call_tmp[653171] "expr temp" "maybe param" "maybe type" "temp"
    (653174 'move' call_tmp[653171](122332 call dsiLow _mt[243] call_tmp[653164]))
    (516927 'move' ret[516922](516926 'deref' call_tmp[653171]))
    (516924 return ret[516922])
  }
  function _domain[125902](?).high[122342](arg _mt[126110]:_MT[238], arg this[126108]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516931] "RVV" "temp"
    unknown call_tmp[653178] "expr temp" "maybe param" "maybe type" "temp"
    (653181 'move' call_tmp[653178](359448 call _value _mt[243] this[126108]))
    unknown call_tmp[653185] "expr temp" "maybe param" "maybe type" "temp"
    (653188 'move' call_tmp[653185](122347 call dsiHigh _mt[243] call_tmp[653178]))
    (516936 'move' ret[516931](516935 'deref' call_tmp[653185]))
    (516933 return ret[516931])
  }
  function _domain[125902](?).stride[122357](arg _mt[126114]:_MT[238], arg this[126112]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516940] "RVV" "temp"
    unknown call_tmp[653192] "expr temp" "maybe param" "maybe type" "temp"
    (653195 'move' call_tmp[653192](359452 call _value _mt[243] this[126112]))
    unknown call_tmp[653199] "expr temp" "maybe param" "maybe type" "temp"
    (653202 'move' call_tmp[653199](122360 call dsiStride _mt[243] call_tmp[653192]))
    (516945 'move' ret[516940](516944 'deref' call_tmp[653199]))
    (516942 return ret[516940])
  }
  function _domain[125902](?).alignment[122370](arg _mt[126118]:_MT[238], arg this[126116]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516949] "RVV" "temp"
    unknown call_tmp[653206] "expr temp" "maybe param" "maybe type" "temp"
    (653209 'move' call_tmp[653206](359456 call _value _mt[243] this[126116]))
    unknown call_tmp[653213] "expr temp" "maybe param" "maybe type" "temp"
    (653216 'move' call_tmp[653213](122375 call dsiAlignment _mt[243] call_tmp[653206]))
    (516954 'move' ret[516949](516953 'deref' call_tmp[653213]))
    (516951 return ret[516949])
  }
  function _domain[125902](?).first[122385](arg _mt[126122]:_MT[238], arg this[126120]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516958] "RVV" "temp"
    unknown call_tmp[653220] "expr temp" "maybe param" "maybe type" "temp"
    (653223 'move' call_tmp[653220](359460 call _value _mt[243] this[126120]))
    unknown call_tmp[653227] "expr temp" "maybe param" "maybe type" "temp"
    (653230 'move' call_tmp[653227](122390 call dsiFirst _mt[243] call_tmp[653220]))
    (516963 'move' ret[516958](516962 'deref' call_tmp[653227]))
    (516960 return ret[516958])
  }
  function _domain[125902](?).last[122400](arg _mt[126126]:_MT[238], arg this[126124]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516967] "RVV" "temp"
    unknown call_tmp[653234] "expr temp" "maybe param" "maybe type" "temp"
    (653237 'move' call_tmp[653234](359464 call _value _mt[243] this[126124]))
    unknown call_tmp[653241] "expr temp" "maybe param" "maybe type" "temp"
    (653244 'move' call_tmp[653241](122405 call dsiLast _mt[243] call_tmp[653234]))
    (516972 'move' ret[516967](516971 'deref' call_tmp[653241]))
    (516969 return ret[516967])
  }
  function _domain[125902](?).alignedLow[122415](arg _mt[126130]:_MT[238], arg this[126128]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516976] "RVV" "temp"
    unknown call_tmp[653248] "expr temp" "maybe param" "maybe type" "temp"
    (653251 'move' call_tmp[653248](359468 call _value _mt[243] this[126128]))
    unknown call_tmp[653255] "expr temp" "maybe param" "maybe type" "temp"
    (653258 'move' call_tmp[653255](122420 call dsiAlignedLow _mt[243] call_tmp[653248]))
    (516981 'move' ret[516976](516980 'deref' call_tmp[653255]))
    (516978 return ret[516976])
  }
  function _domain[125902](?).alignedHigh[122430](arg _mt[126134]:_MT[238], arg this[126132]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516985] "RVV" "temp"
    unknown call_tmp[653262] "expr temp" "maybe param" "maybe type" "temp"
    (653265 'move' call_tmp[653262](359472 call _value _mt[243] this[126132]))
    unknown call_tmp[653269] "expr temp" "maybe param" "maybe type" "temp"
    (653272 'move' call_tmp[653269](122435 call dsiAlignedHigh _mt[243] call_tmp[653262]))
    (516990 'move' ret[516985](516989 'deref' call_tmp[653269]))
    (516987 return ret[516985])
  }
  function _domain[125902](?).indices[122445](arg _mt[126138]:_MT[238], arg this[126136]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122466 call compilerError "domains do not support '.indices'")
    (516992 return _void[55])
  }
  function _domain[125902](?).contains[122483](arg _mt[126142]:_MT[238], arg this[126140]:_domain[125902](?), arg i[122480] :
  unknown call_tmp[653276] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516996] "RVV" "temp"
    unknown tmp[424695] "maybe param" "temp"
    (424706 'move' tmp[424695](122488 call isRectangularDom this[126140]))
    unknown call_tmp[653295] "expr temp" "maybe param" "maybe type" "temp"
    (653298 'move' call_tmp[653295](424708 call _cond_invalid tmp[424695]))
    if call_tmp[653295]
    {
      (424711 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565199] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565200] "maybe param" "temp"
    unknown call_tmp[653300] "expr temp" "maybe param" "maybe type" "temp"
    (653303 'move' call_tmp[653300](424696 call isTrue tmp[424695]))
    (565205 'move' tmp[565200](565203 call _cond_test call_tmp[653300]))
    if tmp[565200]
    {
      (565210 'move' tmp[565199](565207 '_paramFoldLogical' tmp[565200] 1))
    }
    {
      unknown tmp[565212] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653305] "expr temp" "maybe param" "maybe type" "temp"
      (653308 'move' call_tmp[653305](122492 call isSparseDom this[126140]))
      (565214 'move' tmp[565212](424700 call isTrue call_tmp[653305]))
      (565219 'move' tmp[565199](565216 '_paramFoldLogical' tmp[565200] tmp[565212]))
    }
    unknown call_tmp[653310] "expr temp" "maybe param" "maybe type" "temp"
    (653313 'move' call_tmp[653310](122520 call _cond_test tmp[565199]))
    if call_tmp[653310]
    {
      unknown call_tmp[653317] "expr temp" "maybe param" "maybe type" "temp"
      (653320 'move' call_tmp[653317](359480 call _value _mt[243] this[126140]))
      unknown call_tmp[653326] "expr temp" "maybe param" "maybe type" "temp"
      (653329 'move' call_tmp[653326](382991 call rank _mt[243] this[126140]))
      unknown call_tmp[653331] "expr temp" "maybe param" "maybe type" "temp"
      (653334 'move' call_tmp[653331](122503 call _makeIndexTuple call_tmp[653326] i[122480]))
      unknown call_tmp[653336] "expr temp" "maybe param" "maybe type" "temp"
      (653339 'move' call_tmp[653336](122505 call(122496 call (partial) dsiMember _mt[243] call_tmp[653317]) call_tmp[653331]))
      (517001 'move' ret[516996](517000 'deref' call_tmp[653336]))
      gotoReturn _end_contains[516994] _end_contains[516994]
    }
    {
      unknown call_tmp[653343] "expr temp" "maybe param" "maybe type" "temp"
      (653346 'move' call_tmp[653343](359484 call _value _mt[243] this[126140]))
      unknown call_tmp[653350] "expr temp" "maybe param" "maybe type" "temp"
      (653353 'move' call_tmp[653350](122515 call i[122480] 0))
      unknown call_tmp[653355] "expr temp" "maybe param" "maybe type" "temp"
      (653358 'move' call_tmp[653355](122517 call(122509 call (partial) dsiMember _mt[243] call_tmp[653343]) call_tmp[653350]))
      (517006 'move' ret[516996](517005 'deref' call_tmp[653355]))
      gotoReturn _end_contains[516994] _end_contains[516994]
    }
    label _end_contains[516994]
    (516998 return ret[516996])
  }
  function _domain[125902](?).contains[122540](arg _mt[126146]:_MT[238], arg this[126144]:_domain[125902](?), arg i[122536] ... :
  unknown call_tmp[653362] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517012] "RVV" "temp"
    unknown call_tmp[653373] "expr temp" "maybe param" "maybe type" "temp"
    (653376 'move' call_tmp[653373](122545 call(383001 call (partial) contains _mt[243] this[126144]) i[122536]))
    (517017 'move' ret[517012](517016 'deref' call_tmp[653373]))
    (517014 return ret[517012])
  }
  function _domain[125902](?).member[122563](arg _mt[126150]:_MT[238], arg this[126148]:_domain[125902](?), arg i[122560] :
  unknown call_tmp[653380] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[517021] "RVV" "temp"
    unknown call_tmp[653399] "expr temp" "maybe param" "maybe type" "temp"
    (653402 'move' call_tmp[653399](122600 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122603 call compilerWarning call_tmp[653399])
    (479696 'end of statement')
    unknown call_tmp[653406] "expr temp" "maybe param" "maybe type" "temp"
    (653409 'move' call_tmp[653406](122612 call(122607 call (partial) contains _mt[243] this[126148]) i[122560]))
    (517026 'move' ret[517021](517025 'deref' call_tmp[653406]))
    (517023 return ret[517021])
  }
  function _domain[125902](?).member[122628](arg _mt[126154]:_MT[238], arg this[126152]:_domain[125902](?), arg i[122624] ... :
  unknown call_tmp[653413] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517030] "RVV" "temp"
    unknown call_tmp[653422] "expr temp" "maybe param" "maybe type" "temp"
    (653425 'move' call_tmp[653422](122633 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122636 call compilerWarning call_tmp[653422])
    (479698 'end of statement')
    unknown call_tmp[653429] "expr temp" "maybe param" "maybe type" "temp"
    (653432 'move' call_tmp[653429](122645 call(122640 call (partial) contains _mt[243] this[126152]) i[122624]))
    (517035 'move' ret[517030](517034 'deref' call_tmp[653429]))
    (517032 return ret[517030])
  }
  function _domain[125902](?).isSubset[122656](arg _mt[126158]:_MT[238], arg this[126156]:_domain[125902](?), arg super[122653]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517039] "RVV" "temp"
    unknown tmp[424716] "maybe param" "temp"
    (424727 'move' tmp[424716](122661 call isAssociativeDom this[126156]))
    unknown call_tmp[653434] "expr temp" "maybe param" "maybe type" "temp"
    (653437 'move' call_tmp[653434](424729 call _cond_invalid tmp[424716]))
    if call_tmp[653434]
    {
      (424732 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565226] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565227] "maybe param" "temp"
    unknown call_tmp[653439] "expr temp" "maybe param" "maybe type" "temp"
    (653442 'move' call_tmp[653439](424717 call isTrue tmp[424716]))
    (565232 'move' tmp[565227](565230 call _cond_test call_tmp[653439]))
    if tmp[565227]
    {
      (565237 'move' tmp[565226](565234 '_paramFoldLogical' tmp[565227] 1))
    }
    {
      unknown tmp[565239] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653444] "expr temp" "maybe param" "maybe type" "temp"
      (653447 'move' call_tmp[653444](122665 call isRectangularDom this[126156]))
      (565241 'move' tmp[565239](424721 call isTrue call_tmp[653444]))
      (565246 'move' tmp[565226](565243 '_paramFoldLogical' tmp[565227] tmp[565239]))
    }
    unknown call_tmp[653449] "expr temp" "maybe param" "maybe type" "temp"
    (653452 'move' call_tmp[653449](122668 call ! tmp[565226]))
    unknown call_tmp[653454] "expr temp" "maybe param" "maybe type" "temp"
    (653457 'move' call_tmp[653454](122723 call _cond_test call_tmp[653449]))
    if call_tmp[653454]
    {
      unknown call_tmp[653459] "expr temp" "maybe param" "maybe type" "temp"
      (653462 'move' call_tmp[653459](122673 call isSparseDom this[126156]))
      unknown call_tmp[653464] "expr temp" "maybe param" "maybe type" "temp"
      (653467 'move' call_tmp[653464](122716 call _cond_test call_tmp[653459]))
      if call_tmp[653464]
      {
        (122693 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122714 call compilerError "isSubset not supported on this domain type")
      }
    }
    unknown call_tmp[653469] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653472 'move' call_tmp[653469](122729 'typeof' super[122653]))
    unknown call_tmp[653474] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653477 'move' call_tmp[653474](122731 'typeof' this[126156]))
    unknown call_tmp[653479] "expr temp" "maybe param" "maybe type" "temp"
    (653482 'move' call_tmp[653479](122732 call != call_tmp[653469] call_tmp[653474]))
    unknown call_tmp[653484] "expr temp" "maybe param" "maybe type" "temp"
    (653487 'move' call_tmp[653484](122840 call _cond_test call_tmp[653479]))
    if call_tmp[653484]
    {
      unknown call_tmp[653489] "expr temp" "maybe param" "maybe type" "temp"
      (653492 'move' call_tmp[653489](122737 call isRectangularDom this[126156]))
      unknown call_tmp[653494] "expr temp" "maybe param" "maybe type" "temp"
      (653497 'move' call_tmp[653494](122835 call _cond_test call_tmp[653489]))
      if call_tmp[653494]
      {
        unknown call_tmp[653501] "expr temp" "maybe param" "maybe type" "temp"
        (653504 'move' call_tmp[653501](122739 call rank _mt[243] super[122653]))
        unknown call_tmp[653508] "expr temp" "maybe param" "maybe type" "temp"
        (653511 'move' call_tmp[653508](122743 call rank _mt[243] this[126156]))
        unknown call_tmp[653513] "expr temp" "maybe param" "maybe type" "temp"
        (653516 'move' call_tmp[653513](122746 call != call_tmp[653501] call_tmp[653508]))
        unknown call_tmp[653518] "expr temp" "maybe param" "maybe type" "temp"
        (653521 'move' call_tmp[653518](122807 call _cond_test call_tmp[653513]))
        if call_tmp[653518]
        {
          (122767 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492151] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653525] "expr temp" "maybe param" "maybe type" "temp"
            (653528 'move' call_tmp[653525](122770 call low _mt[243] super[122653]))
            (492155 'move' call_type_tmp[492151](122773 'typeof' call_tmp[653525]))
          }
          { scopeless type
            unknown call_type_tmp[492157] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653532] "expr temp" "maybe param" "maybe type" "temp"
            (653535 'move' call_tmp[653532](122775 call low _mt[243] this[126156]))
            (492161 'move' call_type_tmp[492157](122778 'typeof' call_tmp[653532]))
          }
          unknown call_tmp[653537] "expr temp" "maybe param" "maybe type" "temp"
          (653540 'move' call_tmp[653537](122779 call != call_type_tmp[492151] call_type_tmp[492157]))
          unknown call_tmp[653542] "expr temp" "maybe param" "maybe type" "temp"
          (653545 'move' call_tmp[653542](122802 call _cond_test call_tmp[653537]))
          if call_tmp[653542]
          {
            (122800 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122833 call compilerError "isSubset called with different associative domain types")
      }
    }
    unknown call_tmp[653547] "expr temp" "maybe param" "maybe type" "temp"
    (653550 'move' call_tmp[653547](122848 call isRectangularDom this[126156]))
    unknown call_tmp[653552] "expr temp" "maybe param" "maybe type" "temp"
    (653555 'move' call_tmp[653552](122971 call _cond_test call_tmp[653547]))
    if call_tmp[653552]
    {
      unknown contains[122850] "dead at end of block" "insert auto destroy"
      (542875 'init var' contains[122850] 1)
      (122853 'end of statement')
      {
        unknown _indexOfInterest[122920] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122921] "expr temp" "temp"
        unknown call_tmp[653559] "expr temp" "maybe param" "maybe type" "temp"
        (653562 'move' call_tmp[653559](122942 call(122939 call (partial) dims _mt[243] this[126156])))
        unknown call_tmp[653566] "expr temp" "maybe param" "maybe type" "temp"
        (653569 'move' call_tmp[653566](122937 call size _mt[243] call_tmp[653559]))
        unknown call_tmp[653571] "expr temp" "maybe param" "maybe type" "temp"
        (653574 'move' call_tmp[653571](122935 call - call_tmp[653566] 1))
        unknown call_tmp[653576] "expr temp" "maybe param" "maybe type" "temp"
        (653579 'move' call_tmp[653576](122945 call chpl_direct_range_iter 0 call_tmp[653571] 1))
        (122930 'move' _iterator[122921](122928 call _getIterator call_tmp[653576]))
        Defer
        {
          {
            (122961 call _freeIterator _iterator[122921])
          }
        }
        { scopeless type
          (122950 'move' _indexOfInterest[122920](122947 call iteratorIndex _iterator[122921]))
        }
        ForLoop[122922]
        {
          unknown i[122954] "index var" "insert auto destroy"
          (479707 'end of statement')
          (122956 'move' i[122954] _indexOfInterest[122920])
          (479708 'end of statement' i[122954])
          {
            {
              unknown tmp[122896] "temp"
              (122899 'move' tmp[122896](122898 'addr of' contains[122850]))
              unknown tmp[424737] "maybe param" "temp"
              (424748 'move' tmp[424737] tmp[122896])
              unknown call_tmp[653581] "expr temp" "maybe param" "maybe type" "temp"
              (653584 'move' call_tmp[653581](424750 call _cond_invalid tmp[424737]))
              if call_tmp[653581]
              {
                (424753 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565253] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565254] "maybe param" "temp"
              unknown call_tmp[653586] "expr temp" "maybe param" "maybe type" "temp"
              (653589 'move' call_tmp[653586](424738 call isTrue tmp[424737]))
              (565259 'move' tmp[565254](565257 call _cond_test call_tmp[653586]))
              if tmp[565254]
              {
                unknown tmp[565261] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653593] "expr temp" "maybe param" "maybe type" "temp"
                (653596 'move' call_tmp[653593](122877 call(122873 call (partial) dims _mt[243] super[122653])))
                unknown call_tmp[653598] "expr temp" "maybe param" "maybe type" "temp"
                (653601 'move' call_tmp[653598](122880 call call_tmp[653593] i[122954]))
                unknown call_tmp[653607] "expr temp" "maybe param" "maybe type" "temp"
                (653610 'move' call_tmp[653607](122889 call(122885 call (partial) dims _mt[243] this[126156])))
                unknown call_tmp[653612] "expr temp" "maybe param" "maybe type" "temp"
                (653615 'move' call_tmp[653612](122892 call call_tmp[653607] i[122954]))
                unknown call_tmp[653617] "expr temp" "maybe param" "maybe type" "temp"
                (653620 'move' call_tmp[653617](122894 call(122881 call (partial) contains _mt[243] call_tmp[653598]) call_tmp[653612]))
                (565263 'move' tmp[565261](424741 call isTrue call_tmp[653617]))
                (565268 'move' tmp[565253](565265 '_paramFoldLogical' tmp[565254] tmp[565261]))
              }
              {
                (565273 'move' tmp[565253](565270 '_paramFoldLogical' tmp[565254] 0))
              }
              (122904 call = tmp[122896] tmp[565253])
              (479711 'end of statement' i[122954] i[122954])
            }
            unknown call_tmp[653622] "expr temp" "maybe param" "maybe type" "temp"
            (653625 'move' call_tmp[653622](122910 call == contains[122850] 0))
            unknown call_tmp[653627] "expr temp" "maybe param" "maybe type" "temp"
            (653630 'move' call_tmp[653627](122915 call _cond_test call_tmp[653622]))
            if call_tmp[653627]
            {
              break _breakLabel[122926] _breakLabel[122926]
            }
          }
          label _continueLabel[122925]
          _indexOfInterest[122920]
          _iterator[122921]
        }
        label _breakLabel[122926]
      }
      (517044 'move' ret[517039](517043 'deref' contains[122850]))
      gotoReturn _end_isSubset[517037] _end_isSubset[517037]
      (479714 'end of statement' contains[122850])
    }
    function chpl__loopexpr_iter4[582083](arg iterator[582085]:_any[178](?), arg super[582221]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582232] "RVV" "temp"
      {
        unknown _indexOfInterest[582090] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582091] "expr temp" "temp"
        (582100 'move' _iterator[582091](582098 call _getIterator iterator[582085]))
        Defer
        {
          {
            (582114 call _freeIterator _iterator[582091])
          }
        }
        { scopeless type
          (582105 'move' _indexOfInterest[582090](582102 call iteratorIndex _iterator[582091]))
        }
        ForLoop[582092] for-expr
        {
          unknown i[122987] "index var" "insert auto destroy" "no doc"
          (582225 'end of statement')
          (582109 'move' i[122987] _indexOfInterest[582090])
          (582226 'end of statement' i[122987])
          {
            {
              unknown yret[582236] "YVV" "temp"
              unknown call_tmp[582245] "expr temp" "maybe param" "maybe type" "temp"
              (582248 'move' call_tmp[582245](122984 call(122979 call (partial) contains _mt[243] super[582221]) i[122987]))
              (582239 'move' yret[582236](582238 'deref' call_tmp[582245]))
              (582241 yield yret[582236])
              (582228 'end of statement' i[122987])
            }
          }
          label _continueLabel[582095]
          _indexOfInterest[582090]
          _iterator[582091]
        }
        label _breakLabel[582096]
      }
      (582234 return ret[582232])
    }
    function chpl__loopexpr_iter4[582121](param arg tag[582125]:iterKind[453], arg iterator[582128]:_any[178](?), arg super[582149]:_any[178](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582275] "RVV" "temp"
      const _leaderIterator[582140] "const" "expr temp" "temp"
      (582145 'move' _leaderIterator[582140](582142 call _toLeader iterator[582128]))
      (582280 'move' ret[582275](582279 'deref' _leaderIterator[582140]))
      (582277 return ret[582275])
    }
    where {
      unknown tmp[582251] "maybe param" "temp"
      (582262 'move' tmp[582251](582130 call == tag[582125] leader[447]))
      unknown call_tmp[582309] "expr temp" "maybe param" "maybe type" "temp"
      (582312 'move' call_tmp[582309](582264 call _cond_invalid tmp[582251]))
      if call_tmp[582309]
      {
        (582267 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582282] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582283] "maybe param" "temp"
      unknown call_tmp[582314] "expr temp" "maybe param" "maybe type" "temp"
      (582317 'move' call_tmp[582314](582252 call isTrue tmp[582251]))
      (582288 'move' tmp[582283](582286 call _cond_test call_tmp[582314]))
      if tmp[582283]
      {
        unknown tmp[582290] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582319] "expr temp" "maybe param" "maybe type" "temp"
        (582322 'move' call_tmp[582319](582134 'call resolves' "_toLeader" iterator[582128]))
        (582292 'move' tmp[582290](582255 call isTrue call_tmp[582319]))
        (582297 'move' tmp[582282](582294 '_paramFoldLogical' tmp[582283] tmp[582290]))
      }
      {
        (582302 'move' tmp[582282](582299 '_paramFoldLogical' tmp[582283] 0))
      }
      (748424 call chpl_statementLevelSymbol tmp[582282])
    }
    function chpl__loopexpr_iter4[582151](param arg tag[582155]:iterKind[453], arg followThis[582158]:_any[178](?), arg iterator[582160]:_any[178](?), arg super[582219]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582333] "RVV" "temp"
      const _followerIterator[582167] "const" "expr temp" "temp"
      (582173 'move' _followerIterator[582167](582169 call _toFollower iterator[582160] followThis[582158]))
      {
        unknown _indexOfInterest[582188] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582189] "expr temp" "temp"
        (582198 'move' _iterator[582189](582196 call _getIterator _followerIterator[582167]))
        Defer
        {
          {
            (582212 call _freeIterator _iterator[582189])
          }
        }
        { scopeless type
          (582203 'move' _indexOfInterest[582188](582200 call iteratorIndex _iterator[582189]))
        }
        ForLoop[582190] lowered-forall for-expr
        {
          unknown i[582175] "index var" "insert auto destroy" "no doc"
          (582326 'end of statement')
          (582207 'move' i[582175] _indexOfInterest[582188])
          (582327 'end of statement' i[582175])
          {
            {
              unknown yret[582337] "YVV" "temp"
              unknown call_tmp[582346] "expr temp" "maybe param" "maybe type" "temp"
              (582349 'move' call_tmp[582346](582184 call(582181 call (partial) contains _mt[243] super[582219]) i[582175]))
              (582340 'move' yret[582337](582339 'deref' call_tmp[582346]))
              (582342 yield yret[582337])
              (582329 'end of statement' i[582175])
            }
          }
          label _continueLabel[582193]
          _indexOfInterest[582188]
          _iterator[582189]
        }
        label _breakLabel[582194]
      }
      (582335 return ret[582333])
    }
    where {
      (582163 call == tag[582155] follower[449])
    }
    function chpl__forallexpr4[582063](arg iterExpr[582066]:_any[178](?), arg super[582070]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582354] "RVV" "temp"
      unknown _iterator[582073] "expr temp" "maybe ref" "temp"
      (582075 'move' _iterator[582073] iterExpr[582066])
      unknown call_tmp[582361] "expr temp" "maybe param" "maybe type" "temp"
      (582364 'move' call_tmp[582361](582078 call chpl__loopexpr_iter4 _iterator[582073] super[582070]))
      (582359 'move' ret[582354](582358 'deref' call_tmp[582361]))
      (582356 return ret[582354])
    }
    unknown call_tmp[582366] "expr temp" "maybe param" "maybe type" "temp"
    (582369 'move' call_tmp[582366](582068 call chpl__forallexpr4 this[126156] super[122653]))
    (582373 'iterator record set shape' call_tmp[582366] this[126156] 0)
    unknown call_tmp[653632] "expr temp" "maybe param" "maybe type" "temp"
    (653635 'move' call_tmp[653632](122989 'reduce' LogicalAndReduceScanOp[376619](?) call_tmp[582366] 0))
    (517049 'move' ret[517039](517048 'deref' call_tmp[653632]))
    label _end_isSubset[517037]
    (517041 return ret[517039])
  }
  function _domain[125902](?).isSuper[123001](arg _mt[126162]:_MT[238], arg this[126160]:_domain[125902](?), arg sub[122998]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517053] "RVV" "temp"
    unknown tmp[424758] "maybe param" "temp"
    (424769 'move' tmp[424758](123006 call isAssociativeDom this[126160]))
    unknown call_tmp[653637] "expr temp" "maybe param" "maybe type" "temp"
    (653640 'move' call_tmp[653637](424771 call _cond_invalid tmp[424758]))
    if call_tmp[653637]
    {
      (424774 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565281] "maybe param" "temp"
    unknown call_tmp[653642] "expr temp" "maybe param" "maybe type" "temp"
    (653645 'move' call_tmp[653642](424759 call isTrue tmp[424758]))
    (565286 'move' tmp[565281](565284 call _cond_test call_tmp[653642]))
    if tmp[565281]
    {
      (565291 'move' tmp[565280](565288 '_paramFoldLogical' tmp[565281] 1))
    }
    {
      unknown tmp[565293] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653647] "expr temp" "maybe param" "maybe type" "temp"
      (653650 'move' call_tmp[653647](123010 call isRectangularDom this[126160]))
      (565295 'move' tmp[565293](424763 call isTrue call_tmp[653647]))
      (565300 'move' tmp[565280](565297 '_paramFoldLogical' tmp[565281] tmp[565293]))
    }
    unknown call_tmp[653652] "expr temp" "maybe param" "maybe type" "temp"
    (653655 'move' call_tmp[653652](123013 call ! tmp[565280]))
    unknown call_tmp[653657] "expr temp" "maybe param" "maybe type" "temp"
    (653660 'move' call_tmp[653657](123070 call _cond_test call_tmp[653652]))
    if call_tmp[653657]
    {
      unknown call_tmp[653662] "expr temp" "maybe param" "maybe type" "temp"
      (653665 'move' call_tmp[653662](123018 call isSparseDom this[126160]))
      unknown call_tmp[653667] "expr temp" "maybe param" "maybe type" "temp"
      (653670 'move' call_tmp[653667](123063 call _cond_test call_tmp[653662]))
      if call_tmp[653667]
      {
        (123038 call compilerError "isSuper not supported on sparse domains")
      }
      {
        unknown call_tmp[653672] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (653675 'move' call_tmp[653672](123060 'typeof' this[126160]))
        (123061 call compilerError "isSuper not supported on the domain type " call_tmp[653672])
      }
    }
    unknown call_tmp[653677] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653680 'move' call_tmp[653677](123076 'typeof' sub[122998]))
    unknown call_tmp[653682] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653685 'move' call_tmp[653682](123078 'typeof' this[126160]))
    unknown call_tmp[653687] "expr temp" "maybe param" "maybe type" "temp"
    (653690 'move' call_tmp[653687](123079 call != call_tmp[653677] call_tmp[653682]))
    unknown call_tmp[653692] "expr temp" "maybe param" "maybe type" "temp"
    (653695 'move' call_tmp[653692](123187 call _cond_test call_tmp[653687]))
    if call_tmp[653692]
    {
      unknown call_tmp[653697] "expr temp" "maybe param" "maybe type" "temp"
      (653700 'move' call_tmp[653697](123084 call isRectangularDom this[126160]))
      unknown call_tmp[653702] "expr temp" "maybe param" "maybe type" "temp"
      (653705 'move' call_tmp[653702](123182 call _cond_test call_tmp[653697]))
      if call_tmp[653702]
      {
        unknown call_tmp[653709] "expr temp" "maybe param" "maybe type" "temp"
        (653712 'move' call_tmp[653709](123086 call rank _mt[243] sub[122998]))
        unknown call_tmp[653716] "expr temp" "maybe param" "maybe type" "temp"
        (653719 'move' call_tmp[653716](123090 call rank _mt[243] this[126160]))
        unknown call_tmp[653721] "expr temp" "maybe param" "maybe type" "temp"
        (653724 'move' call_tmp[653721](123093 call != call_tmp[653709] call_tmp[653716]))
        unknown call_tmp[653726] "expr temp" "maybe param" "maybe type" "temp"
        (653729 'move' call_tmp[653726](123154 call _cond_test call_tmp[653721]))
        if call_tmp[653726]
        {
          (123114 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492163] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653733] "expr temp" "maybe param" "maybe type" "temp"
            (653736 'move' call_tmp[653733](123117 call low _mt[243] sub[122998]))
            (492167 'move' call_type_tmp[492163](123120 'typeof' call_tmp[653733]))
          }
          { scopeless type
            unknown call_type_tmp[492169] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653740] "expr temp" "maybe param" "maybe type" "temp"
            (653743 'move' call_tmp[653740](123122 call low _mt[243] this[126160]))
            (492173 'move' call_type_tmp[492169](123125 'typeof' call_tmp[653740]))
          }
          unknown call_tmp[653745] "expr temp" "maybe param" "maybe type" "temp"
          (653748 'move' call_tmp[653745](123126 call != call_type_tmp[492163] call_type_tmp[492169]))
          unknown call_tmp[653750] "expr temp" "maybe param" "maybe type" "temp"
          (653753 'move' call_tmp[653750](123149 call _cond_test call_tmp[653745]))
          if call_tmp[653750]
          {
            (123147 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123180 call compilerError "isSuper called with different associative domain types")
      }
    }
    unknown call_tmp[653755] "expr temp" "maybe param" "maybe type" "temp"
    (653758 'move' call_tmp[653755](123195 call isRectangularDom this[126160]))
    unknown call_tmp[653760] "expr temp" "maybe param" "maybe type" "temp"
    (653763 'move' call_tmp[653760](123318 call _cond_test call_tmp[653755]))
    if call_tmp[653760]
    {
      unknown contains[123197] "dead at end of block" "insert auto destroy"
      (542877 'init var' contains[123197] 1)
      (123200 'end of statement')
      {
        unknown _indexOfInterest[123267] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123268] "expr temp" "temp"
        unknown call_tmp[653767] "expr temp" "maybe param" "maybe type" "temp"
        (653770 'move' call_tmp[653767](123289 call(123286 call (partial) dims _mt[243] this[126160])))
        unknown call_tmp[653774] "expr temp" "maybe param" "maybe type" "temp"
        (653777 'move' call_tmp[653774](123284 call size _mt[243] call_tmp[653767]))
        unknown call_tmp[653779] "expr temp" "maybe param" "maybe type" "temp"
        (653782 'move' call_tmp[653779](123282 call - call_tmp[653774] 1))
        unknown call_tmp[653784] "expr temp" "maybe param" "maybe type" "temp"
        (653787 'move' call_tmp[653784](123292 call chpl_direct_range_iter 0 call_tmp[653779] 1))
        (123277 'move' _iterator[123268](123275 call _getIterator call_tmp[653784]))
        Defer
        {
          {
            (123308 call _freeIterator _iterator[123268])
          }
        }
        { scopeless type
          (123297 'move' _indexOfInterest[123267](123294 call iteratorIndex _iterator[123268]))
        }
        ForLoop[123269]
        {
          unknown i[123301] "index var" "insert auto destroy"
          (479724 'end of statement')
          (123303 'move' i[123301] _indexOfInterest[123267])
          (479725 'end of statement' i[123301])
          {
            {
              unknown tmp[123243] "temp"
              (123246 'move' tmp[123243](123245 'addr of' contains[123197]))
              unknown tmp[424779] "maybe param" "temp"
              (424790 'move' tmp[424779] tmp[123243])
              unknown call_tmp[653789] "expr temp" "maybe param" "maybe type" "temp"
              (653792 'move' call_tmp[653789](424792 call _cond_invalid tmp[424779]))
              if call_tmp[653789]
              {
                (424795 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565307] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565308] "maybe param" "temp"
              unknown call_tmp[653794] "expr temp" "maybe param" "maybe type" "temp"
              (653797 'move' call_tmp[653794](424780 call isTrue tmp[424779]))
              (565313 'move' tmp[565308](565311 call _cond_test call_tmp[653794]))
              if tmp[565308]
              {
                unknown tmp[565315] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653801] "expr temp" "maybe param" "maybe type" "temp"
                (653804 'move' call_tmp[653801](123224 call(123220 call (partial) dims _mt[243] this[126160])))
                unknown call_tmp[653806] "expr temp" "maybe param" "maybe type" "temp"
                (653809 'move' call_tmp[653806](123227 call call_tmp[653801] i[123301]))
                unknown call_tmp[653815] "expr temp" "maybe param" "maybe type" "temp"
                (653818 'move' call_tmp[653815](123236 call(123232 call (partial) dims _mt[243] sub[122998])))
                unknown call_tmp[653820] "expr temp" "maybe param" "maybe type" "temp"
                (653823 'move' call_tmp[653820](123239 call call_tmp[653815] i[123301]))
                unknown call_tmp[653825] "expr temp" "maybe param" "maybe type" "temp"
                (653828 'move' call_tmp[653825](123241 call(123228 call (partial) contains _mt[243] call_tmp[653806]) call_tmp[653820]))
                (565317 'move' tmp[565315](424783 call isTrue call_tmp[653825]))
                (565322 'move' tmp[565307](565319 '_paramFoldLogical' tmp[565308] tmp[565315]))
              }
              {
                (565327 'move' tmp[565307](565324 '_paramFoldLogical' tmp[565308] 0))
              }
              (123251 call = tmp[123243] tmp[565307])
              (479728 'end of statement' i[123301] i[123301])
            }
            unknown call_tmp[653830] "expr temp" "maybe param" "maybe type" "temp"
            (653833 'move' call_tmp[653830](123257 call == contains[123197] 0))
            unknown call_tmp[653835] "expr temp" "maybe param" "maybe type" "temp"
            (653838 'move' call_tmp[653835](123262 call _cond_test call_tmp[653830]))
            if call_tmp[653835]
            {
              break _breakLabel[123273] _breakLabel[123273]
            }
          }
          label _continueLabel[123272]
          _indexOfInterest[123267]
          _iterator[123268]
        }
        label _breakLabel[123273]
      }
      (517058 'move' ret[517053](517057 'deref' contains[123197]))
      gotoReturn _end_isSuper[517051] _end_isSuper[517051]
      (479731 'end of statement' contains[123197])
    }
    function chpl__loopexpr_iter5[582395](arg iterator[582397]:_any[178](?), arg this[582533]:_domain[125902](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582544] "RVV" "temp"
      {
        unknown _indexOfInterest[582402] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582403] "expr temp" "temp"
        (582412 'move' _iterator[582403](582410 call _getIterator iterator[582397]))
        Defer
        {
          {
            (582426 call _freeIterator _iterator[582403])
          }
        }
        { scopeless type
          (582417 'move' _indexOfInterest[582402](582414 call iteratorIndex _iterator[582403]))
        }
        ForLoop[582404] for-expr
        {
          unknown i[123334] "index var" "insert auto destroy" "no doc"
          (582537 'end of statement')
          (582421 'move' i[123334] _indexOfInterest[582402])
          (582538 'end of statement' i[123334])
          {
            {
              unknown yret[582548] "YVV" "temp"
              unknown call_tmp[582557] "expr temp" "maybe param" "maybe type" "temp"
              (582560 'move' call_tmp[582557](123331 call(123326 call (partial) contains _mt[243] this[582533]) i[123334]))
              (582551 'move' yret[582548](582550 'deref' call_tmp[582557]))
              (582553 yield yret[582548])
              (582540 'end of statement' i[123334])
            }
          }
          label _continueLabel[582407]
          _indexOfInterest[582402]
          _iterator[582403]
        }
        label _breakLabel[582408]
      }
      (582546 return ret[582544])
    }
    function chpl__loopexpr_iter5[582433](param arg tag[582437]:iterKind[453], arg iterator[582440]:_any[178](?), arg this[582461]:_domain[125902](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582587] "RVV" "temp"
      const _leaderIterator[582452] "const" "expr temp" "temp"
      (582457 'move' _leaderIterator[582452](582454 call _toLeader iterator[582440]))
      (582592 'move' ret[582587](582591 'deref' _leaderIterator[582452]))
      (582589 return ret[582587])
    }
    where {
      unknown tmp[582563] "maybe param" "temp"
      (582574 'move' tmp[582563](582442 call == tag[582437] leader[447]))
      unknown call_tmp[582621] "expr temp" "maybe param" "maybe type" "temp"
      (582624 'move' call_tmp[582621](582576 call _cond_invalid tmp[582563]))
      if call_tmp[582621]
      {
        (582579 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582594] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582595] "maybe param" "temp"
      unknown call_tmp[582626] "expr temp" "maybe param" "maybe type" "temp"
      (582629 'move' call_tmp[582626](582564 call isTrue tmp[582563]))
      (582600 'move' tmp[582595](582598 call _cond_test call_tmp[582626]))
      if tmp[582595]
      {
        unknown tmp[582602] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582631] "expr temp" "maybe param" "maybe type" "temp"
        (582634 'move' call_tmp[582631](582446 'call resolves' "_toLeader" iterator[582440]))
        (582604 'move' tmp[582602](582567 call isTrue call_tmp[582631]))
        (582609 'move' tmp[582594](582606 '_paramFoldLogical' tmp[582595] tmp[582602]))
      }
      {
        (582614 'move' tmp[582594](582611 '_paramFoldLogical' tmp[582595] 0))
      }
      (748426 call chpl_statementLevelSymbol tmp[582594])
    }
    function chpl__loopexpr_iter5[582463](param arg tag[582467]:iterKind[453], arg followThis[582470]:_any[178](?), arg iterator[582472]:_any[178](?), arg this[582531]:_domain[125902](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582645] "RVV" "temp"
      const _followerIterator[582479] "const" "expr temp" "temp"
      (582485 'move' _followerIterator[582479](582481 call _toFollower iterator[582472] followThis[582470]))
      {
        unknown _indexOfInterest[582500] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582501] "expr temp" "temp"
        (582510 'move' _iterator[582501](582508 call _getIterator _followerIterator[582479]))
        Defer
        {
          {
            (582524 call _freeIterator _iterator[582501])
          }
        }
        { scopeless type
          (582515 'move' _indexOfInterest[582500](582512 call iteratorIndex _iterator[582501]))
        }
        ForLoop[582502] lowered-forall for-expr
        {
          unknown i[582487] "index var" "insert auto destroy" "no doc"
          (582638 'end of statement')
          (582519 'move' i[582487] _indexOfInterest[582500])
          (582639 'end of statement' i[582487])
          {
            {
              unknown yret[582649] "YVV" "temp"
              unknown call_tmp[582658] "expr temp" "maybe param" "maybe type" "temp"
              (582661 'move' call_tmp[582658](582496 call(582493 call (partial) contains _mt[243] this[582531]) i[582487]))
              (582652 'move' yret[582649](582651 'deref' call_tmp[582658]))
              (582654 yield yret[582649])
              (582641 'end of statement' i[582487])
            }
          }
          label _continueLabel[582505]
          _indexOfInterest[582500]
          _iterator[582501]
        }
        label _breakLabel[582506]
      }
      (582647 return ret[582645])
    }
    where {
      (582475 call == tag[582467] follower[449])
    }
    function chpl__forallexpr5[582375](arg iterExpr[582378]:_any[178](?), arg this[582382]:_domain[125902](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582666] "RVV" "temp"
      unknown _iterator[582385] "expr temp" "maybe ref" "temp"
      (582387 'move' _iterator[582385] iterExpr[582378])
      unknown call_tmp[582673] "expr temp" "maybe param" "maybe type" "temp"
      (582676 'move' call_tmp[582673](582390 call chpl__loopexpr_iter5 _iterator[582385] this[582382]))
      (582671 'move' ret[582666](582670 'deref' call_tmp[582673]))
      (582668 return ret[582666])
    }
    unknown call_tmp[582678] "expr temp" "maybe param" "maybe type" "temp"
    (582681 'move' call_tmp[582678](582380 call chpl__forallexpr5 sub[122998] this[126160]))
    (582685 'iterator record set shape' call_tmp[582678] sub[122998] 0)
    unknown call_tmp[653840] "expr temp" "maybe param" "maybe type" "temp"
    (653843 'move' call_tmp[653840](123336 'reduce' LogicalAndReduceScanOp[376619](?) call_tmp[582678] 0))
    (517063 'move' ret[517053](517062 'deref' call_tmp[653840]))
    label _end_isSuper[517051]
    (517055 return ret[517053])
  }
  function _domain[125902](?).indexOrder[123346](arg _mt[126166]:_MT[238], arg this[126164]:_domain[125902](?), arg i[123344]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517067] "RVV" "temp"
    unknown call_tmp[653847] "expr temp" "maybe param" "maybe type" "temp"
    (653850 'move' call_tmp[653847](359518 call _value _mt[243] this[126164]))
    unknown call_tmp[653856] "expr temp" "maybe param" "maybe type" "temp"
    (653859 'move' call_tmp[653856](383051 call rank _mt[243] this[126164]))
    unknown call_tmp[653861] "expr temp" "maybe param" "maybe type" "temp"
    (653864 'move' call_tmp[653861](123358 call _makeIndexTuple call_tmp[653856] i[123344]))
    unknown call_tmp[653866] "expr temp" "maybe param" "maybe type" "temp"
    (653869 'move' call_tmp[653866](123360 call(123351 call (partial) dsiIndexOrder _mt[243] call_tmp[653847]) call_tmp[653861]))
    (517072 'move' ret[517067](517071 'deref' call_tmp[653866]))
    (517069 return ret[517067])
  }
  function _domain[125902](?).position[123370](arg _mt[126170]:_MT[238], arg this[126168]:_domain[125902](?), arg i[123368]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517076] "RVV" "temp"
    unknown call_tmp[653873] "expr temp" "maybe param" "maybe type" "temp"
    (653876 'move' call_tmp[653873](383056 call rank _mt[243] this[126168]))
    unknown call_tmp[653878] "maybe param" "maybe type" "temp"
    (653881 'move' call_tmp[653878](123376 call _makeIndexTuple call_tmp[653873] i[123368]))
    unknown ind[123377] "dead at end of block" "insert auto destroy"
    (542879 'init var' ind[123377] call_tmp[653878])
    unknown pos[123384] "dead at end of block" "insert auto destroy"
    unknown call_tmp[653885] "expr temp" "maybe param" "maybe type" "temp"
    (653888 'move' call_tmp[653885](383061 call rank _mt[243] this[126168]))
    unknown call_tmp[653892] "expr temp" "maybe param" "maybe type" "temp"
    (653895 'move' call_tmp[653892](383065 call intIdxType _mt[243] this[126168]))
    unknown call_tmp[653897] "expr temp" "maybe param" "maybe type" "temp"
    (653900 'move' call_tmp[653897](123382 call * call_tmp[653885] call_tmp[653892]))
    (542881 'default init var' pos[123384] call_tmp[653897])
    (123387 'end of statement')
    {
      unknown _indexOfInterest[123420] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123421] "expr temp" "temp"
      unknown call_tmp[653904] "expr temp" "maybe param" "maybe type" "temp"
      (653907 'move' call_tmp[653904](383074 call rank _mt[243] this[126168]))
      unknown call_tmp[653909] "expr temp" "maybe param" "maybe type" "temp"
      (653912 'move' call_tmp[653909](123435 call - call_tmp[653904] 1))
      unknown call_tmp[653914] "expr temp" "maybe param" "maybe type" "temp"
      (653917 'move' call_tmp[653914](123438 call chpl_direct_range_iter 0 call_tmp[653909] 1))
      (123430 'move' _iterator[123421](123428 call _getIterator call_tmp[653914]))
      Defer
      {
        {
          (123454 call _freeIterator _iterator[123421])
        }
      }
      { scopeless type
        (123443 'move' _indexOfInterest[123420](123440 call iteratorIndex _iterator[123421]))
      }
      ForLoop[123422]
      {
        unknown d[123447] "index var" "insert auto destroy"
        (479736 'end of statement')
        (123449 'move' d[123447] _indexOfInterest[123420])
        (479737 'end of statement' d[123447])
        unknown call_tmp[653919] "expr temp" "maybe param" "maybe type" "temp"
        (653922 'move' call_tmp[653919](123400 call pos[123384] d[123447]))
        unknown call_tmp[653926] "expr temp" "maybe param" "maybe type" "temp"
        (653929 'move' call_tmp[653926](359522 call _value _mt[243] this[126168]))
        unknown call_tmp[653933] "expr temp" "maybe param" "maybe type" "temp"
        (653936 'move' call_tmp[653933](123407 call(123402 call (partial) dsiDim _mt[243] call_tmp[653926]) d[123447]))
        unknown call_tmp[653940] "expr temp" "maybe param" "maybe type" "temp"
        (653943 'move' call_tmp[653940](123414 call ind[123377] d[123447]))
        unknown call_tmp[653945] "expr temp" "maybe param" "maybe type" "temp"
        (653948 'move' call_tmp[653945](123416 call(123408 call (partial) indexOrder _mt[243] call_tmp[653933]) call_tmp[653940]))
        (123417 call = call_tmp[653919] call_tmp[653945])
        (479739 'end of statement' pos[123384] d[123447] d[123447] ind[123377] d[123447])
        label _continueLabel[123425]
        _indexOfInterest[123420]
        _iterator[123421]
      }
      label _breakLabel[123426]
    }
    (517081 'move' ret[517076](517080 'deref' pos[123384]))
    gotoReturn _end_position[517074] _end_position[517074]
    (479745 'end of statement' pos[123384])
    label _end_position[517074]
    (517078 return ret[517076])
  }
  function _domain[125902](?).expand[123475](arg _mt[126174]:_MT[238], arg this[126172]:_domain[125902](?), arg off[123472] :
  unknown call_tmp[653952] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[653964] "expr temp" "maybe param" "maybe type" "temp"
    (653967 'move' call_tmp[653964](123486 call isAssociativeDom this[126172]))
    unknown call_tmp[653969] "expr temp" "maybe param" "maybe type" "temp"
    (653972 'move' call_tmp[653969](123560 call _cond_test call_tmp[653964]))
    if call_tmp[653969]
    {
      (123506 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[653974] "expr temp" "maybe param" "maybe type" "temp"
      (653977 'move' call_tmp[653974](123511 call isSparseDom this[126172]))
      unknown call_tmp[653979] "expr temp" "maybe param" "maybe type" "temp"
      (653982 'move' call_tmp[653979](123554 call _cond_test call_tmp[653974]))
      if call_tmp[653979]
      {
        (123531 call compilerError "expand not supported on sparse domains")
      }
      {
        (123552 call compilerError "expand not supported on this domain type")
      }
    }
    (517085 return _void[55])
  }
  where {
    unknown call_tmp[653984] "expr temp" "maybe param" "maybe type" "temp"
    (653987 'move' call_tmp[653984](123480 call isRectangularDom this[126172]))
    (123481 call ! call_tmp[653984])
  }
  function _domain[125902](?).expand[123578](arg _mt[126178]:_MT[238], arg this[126176]:_domain[125902](?), arg off[123574] ... :
  (383090 call intIdxType _mt[243] this[126176])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517089] "RVV" "temp"
    unknown call_tmp[653995] "expr temp" "maybe param" "maybe type" "temp"
    (653998 'move' call_tmp[653995](123583 call(383098 call (partial) expand _mt[243] this[126176]) off[123574]))
    (517094 'move' ret[517089](517093 'deref' call_tmp[653995]))
    (517091 return ret[517089])
  }
  function _domain[125902](?).expand[123598](arg _mt[126182]:_MT[238], arg this[126180]:_domain[125902](?), arg off[123595] :
  unknown call_tmp[654002] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517098] "RVV" "temp"
    unknown call_tmp[654016] "maybe param" "maybe type" "temp"
    (654019 'move' call_tmp[654016](123602 call(383111 call (partial) dims _mt[243] this[126180])))
    unknown ranges[123603] "dead at end of block" "insert auto destroy"
    (542883 'init var' ranges[123603] call_tmp[654016])
    (123606 'end of statement')
    {
      unknown _indexOfInterest[123699] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123700] "expr temp" "temp"
      unknown call_tmp[654023] "expr temp" "maybe param" "maybe type" "temp"
      (654026 'move' call_tmp[654023](383126 call rank _mt[243] this[126180]))
      unknown call_tmp[654028] "expr temp" "maybe param" "maybe type" "temp"
      (654031 'move' call_tmp[654028](123714 call - call_tmp[654023] 1))
      unknown call_tmp[654033] "expr temp" "maybe param" "maybe type" "temp"
      (654036 'move' call_tmp[654033](123717 call chpl_direct_range_iter 0 call_tmp[654028] 1))
      (123709 'move' _iterator[123700](123707 call _getIterator call_tmp[654033]))
      Defer
      {
        {
          (123733 call _freeIterator _iterator[123700])
        }
      }
      { scopeless type
        (123722 'move' _indexOfInterest[123699](123719 call iteratorIndex _iterator[123700]))
      }
      ForLoop[123701]
      {
        unknown i[123726] "index var" "insert auto destroy"
        (479752 'end of statement')
        (123728 'move' i[123726] _indexOfInterest[123699])
        (479753 'end of statement' i[123726])
        {
          unknown call_tmp[654038] "expr temp" "maybe param" "maybe type" "temp"
          (654041 'move' call_tmp[654038](123619 call ranges[123603] i[123726]))
          unknown call_tmp[654043] "expr temp" "maybe param" "maybe type" "temp"
          (654046 'move' call_tmp[654043](123623 call ranges[123603] i[123726]))
          unknown call_tmp[654050] "expr temp" "maybe param" "maybe type" "temp"
          (654053 'move' call_tmp[654050](123632 call off[123595] i[123726]))
          unknown call_tmp[654055] "expr temp" "maybe param" "maybe type" "temp"
          (654058 'move' call_tmp[654055](123634 call(123626 call (partial) expand _mt[243] call_tmp[654043]) call_tmp[654050]))
          (123635 call = call_tmp[654038] call_tmp[654055])
          (479755 'end of statement' ranges[123603] i[123726] ranges[123603] i[123726] i[123726])
          unknown call_tmp[654060] "expr temp" "maybe param" "maybe type" "temp"
          (654063 'move' call_tmp[654060](123642 call ranges[123603] i[123726]))
          unknown call_tmp[654067] "expr temp" "maybe param" "maybe type" "temp"
          (654070 'move' call_tmp[654067](123643 call low _mt[243] call_tmp[654060]))
          unknown call_tmp[654072] "expr temp" "maybe param" "maybe type" "temp"
          (654075 'move' call_tmp[654072](123649 call ranges[123603] i[123726]))
          unknown call_tmp[654079] "expr temp" "maybe param" "maybe type" "temp"
          (654082 'move' call_tmp[654079](123650 call high _mt[243] call_tmp[654072]))
          unknown call_tmp[654084] "expr temp" "maybe param" "maybe type" "temp"
          (654087 'move' call_tmp[654084](123653 call > call_tmp[654067] call_tmp[654079]))
          unknown call_tmp[654089] "expr temp" "maybe param" "maybe type" "temp"
          (654092 'move' call_tmp[654089](123695 call _cond_test call_tmp[654084]))
          if call_tmp[654089]
          {
            (123692 call halt "***Error: Degenerate dimension created in dimension " i[123726] "***")
            (479761 'end of statement' i[123726])
          }
        }
        label _continueLabel[123704]
        _indexOfInterest[123699]
        _iterator[123700]
      }
      label _breakLabel[123705]
    }
    unknown call_tmp[654096] "expr temp" "maybe param" "maybe type" "temp"
    (654099 'move' call_tmp[654096](383131 call dist _mt[243] this[126180]))
    unknown call_tmp[654103] "expr temp" "maybe param" "maybe type" "temp"
    (654106 'move' call_tmp[654103](383135 call rank _mt[243] this[126180]))
    unknown call_tmp[654110] "expr temp" "maybe param" "maybe type" "temp"
    (654113 'move' call_tmp[654110](359526 call _value _mt[243] this[126180]))
    unknown call_tmp[654117] "expr temp" "maybe param" "maybe type" "temp"
    (654120 'move' call_tmp[654117](123746 call idxType _mt[243] call_tmp[654110]))
    unknown call_tmp[654124] "expr temp" "maybe param" "maybe type" "temp"
    (654127 'move' call_tmp[654124](383139 call stridable _mt[243] this[126180]))
    unknown call_tmp[654129] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654132 'move' call_tmp[654129](747875 'new' _domain[125902](?) call_tmp[654096] call_tmp[654103] call_tmp[654117] call_tmp[654124] ranges[123603]))
    (517103 'move' ret[517098](517102 'deref' call_tmp[654129]))
    gotoReturn _end_expand[517096] _end_expand[517096]
    (479763 'end of statement' ranges[123603])
    label _end_expand[517096]
    (517100 return ret[517098])
  }
  function _domain[125902](?).expand[123762](arg _mt[126186]:_MT[238], arg this[126184]:_domain[125902](?), arg off[123759] :
  (383144 call intIdxType _mt[243] this[126184])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517109] "RVV" "temp"
    unknown call_tmp[654138] "maybe param" "maybe type" "temp"
    (654141 'move' call_tmp[654138](123770 call(383152 call (partial) dims _mt[243] this[126184])))
    unknown ranges[123771] "dead at end of block" "insert auto destroy"
    (542885 'init var' ranges[123771] call_tmp[654138])
    (123774 'end of statement')
    {
      unknown _indexOfInterest[123801] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123802] "expr temp" "temp"
      unknown call_tmp[654145] "expr temp" "maybe param" "maybe type" "temp"
      (654148 'move' call_tmp[654145](383164 call rank _mt[243] this[126184]))
      unknown call_tmp[654150] "expr temp" "maybe param" "maybe type" "temp"
      (654153 'move' call_tmp[654150](123816 call - call_tmp[654145] 1))
      unknown call_tmp[654155] "expr temp" "maybe param" "maybe type" "temp"
      (654158 'move' call_tmp[654155](123819 call chpl_direct_range_iter 0 call_tmp[654150] 1))
      (123811 'move' _iterator[123802](123809 call _getIterator call_tmp[654155]))
      Defer
      {
        {
          (123835 call _freeIterator _iterator[123802])
        }
      }
      { scopeless type
        (123824 'move' _indexOfInterest[123801](123821 call iteratorIndex _iterator[123802]))
      }
      ForLoop[123803]
      {
        unknown i[123828] "index var" "insert auto destroy"
        (479766 'end of statement')
        (123830 'move' i[123828] _indexOfInterest[123801])
        (479767 'end of statement' i[123828])
        unknown call_tmp[654160] "expr temp" "maybe param" "maybe type" "temp"
        (654163 'move' call_tmp[654160](123787 call ranges[123771] i[123828]))
        unknown call_tmp[654167] "expr temp" "maybe param" "maybe type" "temp"
        (654170 'move' call_tmp[654167](123791 call(383158 call (partial) dim _mt[243] this[126184]) i[123828]))
        unknown call_tmp[654174] "expr temp" "maybe param" "maybe type" "temp"
        (654177 'move' call_tmp[654174](123797 call(123792 call (partial) expand _mt[243] call_tmp[654167]) off[123759]))
        (123798 call = call_tmp[654160] call_tmp[654174])
        (479769 'end of statement' ranges[123771] i[123828] i[123828])
        label _continueLabel[123806]
        _indexOfInterest[123801]
        _iterator[123802]
      }
      label _breakLabel[123807]
    }
    unknown call_tmp[654181] "expr temp" "maybe param" "maybe type" "temp"
    (654184 'move' call_tmp[654181](383169 call dist _mt[243] this[126184]))
    unknown call_tmp[654188] "expr temp" "maybe param" "maybe type" "temp"
    (654191 'move' call_tmp[654188](383173 call rank _mt[243] this[126184]))
    unknown call_tmp[654195] "expr temp" "maybe param" "maybe type" "temp"
    (654198 'move' call_tmp[654195](359530 call _value _mt[243] this[126184]))
    unknown call_tmp[654202] "expr temp" "maybe param" "maybe type" "temp"
    (654205 'move' call_tmp[654202](123848 call idxType _mt[243] call_tmp[654195]))
    unknown call_tmp[654209] "expr temp" "maybe param" "maybe type" "temp"
    (654212 'move' call_tmp[654209](383177 call stridable _mt[243] this[126184]))
    unknown call_tmp[654214] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654217 'move' call_tmp[654214](747876 'new' _domain[125902](?) call_tmp[654181] call_tmp[654188] call_tmp[654202] call_tmp[654209] ranges[123771]))
    (517114 'move' ret[517109](517113 'deref' call_tmp[654214]))
    gotoReturn _end_expand[517107] _end_expand[517107]
    (479773 'end of statement' ranges[123771])
    label _end_expand[517107]
    (517111 return ret[517109])
  }
  where {
    unknown call_tmp[654221] "expr temp" "maybe param" "maybe type" "temp"
    (654224 'move' call_tmp[654221](383148 call rank _mt[243] this[126184]))
    (123766 call > call_tmp[654221] 1)
  }
  function _domain[125902](?).exterior[123868](arg _mt[126190]:_MT[238], arg this[126188]:_domain[125902](?), arg off[123865] :
  unknown call_tmp[654228] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654240] "expr temp" "maybe param" "maybe type" "temp"
    (654243 'move' call_tmp[654240](123879 call isAssociativeDom this[126188]))
    unknown call_tmp[654245] "expr temp" "maybe param" "maybe type" "temp"
    (654248 'move' call_tmp[654245](123953 call _cond_test call_tmp[654240]))
    if call_tmp[654245]
    {
      (123899 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[654250] "expr temp" "maybe param" "maybe type" "temp"
      (654253 'move' call_tmp[654250](123904 call isSparseDom this[126188]))
      unknown call_tmp[654255] "expr temp" "maybe param" "maybe type" "temp"
      (654258 'move' call_tmp[654255](123947 call _cond_test call_tmp[654250]))
      if call_tmp[654255]
      {
        (123924 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123945 call compilerError "exterior not supported on this domain type")
      }
    }
    (517118 return _void[55])
  }
  where {
    unknown call_tmp[654260] "expr temp" "maybe param" "maybe type" "temp"
    (654263 'move' call_tmp[654260](123873 call isRectangularDom this[126188]))
    (123874 call ! call_tmp[654260])
  }
  function _domain[125902](?).exterior[123971](arg _mt[126194]:_MT[238], arg this[126192]:_domain[125902](?), arg off[123967] ... :
  (383193 call intIdxType _mt[243] this[126192])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517122] "RVV" "temp"
    unknown call_tmp[654271] "expr temp" "maybe param" "maybe type" "temp"
    (654274 'move' call_tmp[654271](123976 call(383201 call (partial) exterior _mt[243] this[126192]) off[123967]))
    (517127 'move' ret[517122](517126 'deref' call_tmp[654271]))
    (517124 return ret[517122])
  }
  function _domain[125902](?).exterior[123991](arg _mt[126198]:_MT[238], arg this[126196]:_domain[125902](?), arg off[123988] :
  unknown call_tmp[654278] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517131] "RVV" "temp"
    unknown call_tmp[654292] "maybe param" "maybe type" "temp"
    (654295 'move' call_tmp[654292](123995 call(383214 call (partial) dims _mt[243] this[126196])))
    unknown ranges[123996] "dead at end of block" "insert auto destroy"
    (542887 'init var' ranges[123996] call_tmp[654292])
    (123999 'end of statement')
    {
      unknown _indexOfInterest[124031] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124032] "expr temp" "temp"
      unknown call_tmp[654299] "expr temp" "maybe param" "maybe type" "temp"
      (654302 'move' call_tmp[654299](383227 call rank _mt[243] this[126196]))
      unknown call_tmp[654304] "expr temp" "maybe param" "maybe type" "temp"
      (654307 'move' call_tmp[654304](124046 call - call_tmp[654299] 1))
      unknown call_tmp[654309] "expr temp" "maybe param" "maybe type" "temp"
      (654312 'move' call_tmp[654309](124049 call chpl_direct_range_iter 0 call_tmp[654304] 1))
      (124041 'move' _iterator[124032](124039 call _getIterator call_tmp[654309]))
      Defer
      {
        {
          (124065 call _freeIterator _iterator[124032])
        }
      }
      { scopeless type
        (124054 'move' _indexOfInterest[124031](124051 call iteratorIndex _iterator[124032]))
      }
      ForLoop[124033]
      {
        unknown i[124058] "index var" "insert auto destroy"
        (479780 'end of statement')
        (124060 'move' i[124058] _indexOfInterest[124031])
        (479781 'end of statement' i[124058])
        unknown call_tmp[654314] "expr temp" "maybe param" "maybe type" "temp"
        (654317 'move' call_tmp[654314](124012 call ranges[123996] i[124058]))
        unknown call_tmp[654321] "expr temp" "maybe param" "maybe type" "temp"
        (654324 'move' call_tmp[654321](124016 call(383220 call (partial) dim _mt[243] this[126196]) i[124058]))
        unknown call_tmp[654328] "expr temp" "maybe param" "maybe type" "temp"
        (654331 'move' call_tmp[654328](124025 call off[123988] i[124058]))
        unknown call_tmp[654333] "expr temp" "maybe param" "maybe type" "temp"
        (654336 'move' call_tmp[654333](124027 call(124019 call (partial) exterior _mt[243] call_tmp[654321]) call_tmp[654328]))
        (124028 call = call_tmp[654314] call_tmp[654333])
        (479783 'end of statement' ranges[123996] i[124058] i[124058] i[124058])
        label _continueLabel[124036]
        _indexOfInterest[124031]
        _iterator[124032]
      }
      label _breakLabel[124037]
    }
    unknown call_tmp[654340] "expr temp" "maybe param" "maybe type" "temp"
    (654343 'move' call_tmp[654340](383232 call dist _mt[243] this[126196]))
    unknown call_tmp[654347] "expr temp" "maybe param" "maybe type" "temp"
    (654350 'move' call_tmp[654347](383236 call rank _mt[243] this[126196]))
    unknown call_tmp[654354] "expr temp" "maybe param" "maybe type" "temp"
    (654357 'move' call_tmp[654354](359534 call _value _mt[243] this[126196]))
    unknown call_tmp[654361] "expr temp" "maybe param" "maybe type" "temp"
    (654364 'move' call_tmp[654361](124078 call idxType _mt[243] call_tmp[654354]))
    unknown call_tmp[654368] "expr temp" "maybe param" "maybe type" "temp"
    (654371 'move' call_tmp[654368](383240 call stridable _mt[243] this[126196]))
    unknown call_tmp[654373] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654376 'move' call_tmp[654373](747877 'new' _domain[125902](?) call_tmp[654340] call_tmp[654347] call_tmp[654361] call_tmp[654368] ranges[123996]))
    (517136 'move' ret[517131](517135 'deref' call_tmp[654373]))
    gotoReturn _end_exterior[517129] _end_exterior[517129]
    (479788 'end of statement' ranges[123996])
    label _end_exterior[517129]
    (517133 return ret[517131])
  }
  function _domain[125902](?).exterior[124094](arg _mt[126202]:_MT[238], arg this[126200]:_domain[125902](?), arg off[124091] :
  (383245 call intIdxType _mt[243] this[126200])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517142] "RVV" "temp"
    unknown offTup[124104] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654382] "expr temp" "maybe param" "maybe type" "temp"
    (654385 'move' call_tmp[654382](383253 call rank _mt[243] this[126200]))
    unknown call_tmp[654389] "expr temp" "maybe param" "maybe type" "temp"
    (654392 'move' call_tmp[654389](383257 call intIdxType _mt[243] this[126200]))
    unknown call_tmp[654394] "expr temp" "maybe param" "maybe type" "temp"
    (654397 'move' call_tmp[654394](124102 call * call_tmp[654382] call_tmp[654389]))
    (542889 'default init var' offTup[124104] call_tmp[654394])
    (124107 'end of statement')
    {
      unknown _indexOfInterest[124125] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124126] "expr temp" "temp"
      unknown call_tmp[654401] "expr temp" "maybe param" "maybe type" "temp"
      (654404 'move' call_tmp[654401](383264 call rank _mt[243] this[126200]))
      unknown call_tmp[654406] "expr temp" "maybe param" "maybe type" "temp"
      (654409 'move' call_tmp[654406](124140 call - call_tmp[654401] 1))
      unknown call_tmp[654411] "expr temp" "maybe param" "maybe type" "temp"
      (654414 'move' call_tmp[654411](124143 call chpl_direct_range_iter 0 call_tmp[654406] 1))
      (124135 'move' _iterator[124126](124133 call _getIterator call_tmp[654411]))
      Defer
      {
        {
          (124159 call _freeIterator _iterator[124126])
        }
      }
      { scopeless type
        (124148 'move' _indexOfInterest[124125](124145 call iteratorIndex _iterator[124126]))
      }
      ForLoop[124127]
      {
        unknown i[124152] "index var" "insert auto destroy"
        (479791 'end of statement')
        (124154 'move' i[124152] _indexOfInterest[124125])
        (479792 'end of statement' i[124152])
        unknown call_tmp[654416] "expr temp" "maybe param" "maybe type" "temp"
        (654419 'move' call_tmp[654416](124120 call offTup[124104] i[124152]))
        (124122 call = call_tmp[654416] off[124091])
        (479794 'end of statement' offTup[124104] i[124152])
        label _continueLabel[124130]
        _indexOfInterest[124125]
        _iterator[124126]
      }
      label _breakLabel[124131]
    }
    unknown call_tmp[654423] "expr temp" "maybe param" "maybe type" "temp"
    (654426 'move' call_tmp[654423](124169 call(383268 call (partial) exterior _mt[243] this[126200]) offTup[124104]))
    (517147 'move' ret[517142](517146 'deref' call_tmp[654423]))
    gotoReturn _end_exterior[517140] _end_exterior[517140]
    (479797 'end of statement' offTup[124104])
    label _end_exterior[517140]
    (517144 return ret[517142])
  }
  where {
    unknown call_tmp[654430] "expr temp" "maybe param" "maybe type" "temp"
    (654433 'move' call_tmp[654430](383249 call rank _mt[243] this[126200]))
    (124098 call != call_tmp[654430] 1)
  }
  function _domain[125902](?).interior[124184](arg _mt[126206]:_MT[238], arg this[126204]:_domain[125902](?), arg off[124181] :
  unknown call_tmp[654437] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654449] "expr temp" "maybe param" "maybe type" "temp"
    (654452 'move' call_tmp[654449](124195 call isAssociativeDom this[126204]))
    unknown call_tmp[654454] "expr temp" "maybe param" "maybe type" "temp"
    (654457 'move' call_tmp[654454](124269 call _cond_test call_tmp[654449]))
    if call_tmp[654454]
    {
      (124215 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[654459] "expr temp" "maybe param" "maybe type" "temp"
      (654462 'move' call_tmp[654459](124220 call isSparseDom this[126204]))
      unknown call_tmp[654464] "expr temp" "maybe param" "maybe type" "temp"
      (654467 'move' call_tmp[654464](124263 call _cond_test call_tmp[654459]))
      if call_tmp[654464]
      {
        (124240 call compilerError "interior not supported on sparse domains")
      }
      {
        (124261 call compilerError "interior not supported on this domain type")
      }
    }
    (517151 return _void[55])
  }
  where {
    unknown call_tmp[654469] "expr temp" "maybe param" "maybe type" "temp"
    (654472 'move' call_tmp[654469](124189 call isRectangularDom this[126204]))
    (124190 call ! call_tmp[654469])
  }
  function _domain[125902](?).interior[124287](arg _mt[126210]:_MT[238], arg this[126208]:_domain[125902](?), arg off[124283] ... :
  (383284 call intIdxType _mt[243] this[126208])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517155] "RVV" "temp"
    unknown call_tmp[654480] "expr temp" "maybe param" "maybe type" "temp"
    (654483 'move' call_tmp[654480](124292 call(383292 call (partial) interior _mt[243] this[126208]) off[124283]))
    (517160 'move' ret[517155](517159 'deref' call_tmp[654480]))
    (517157 return ret[517155])
  }
  function _domain[125902](?).interior[124307](arg _mt[126214]:_MT[238], arg this[126212]:_domain[125902](?), arg off[124304] :
  unknown call_tmp[654487] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517164] "RVV" "temp"
    unknown call_tmp[654501] "maybe param" "maybe type" "temp"
    (654504 'move' call_tmp[654501](124311 call(383305 call (partial) dims _mt[243] this[126212])))
    unknown ranges[124312] "dead at end of block" "insert auto destroy"
    (542891 'init var' ranges[124312] call_tmp[654501])
    (124315 'end of statement')
    {
      unknown _indexOfInterest[124449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124450] "expr temp" "temp"
      unknown call_tmp[654508] "expr temp" "maybe param" "maybe type" "temp"
      (654511 'move' call_tmp[654508](383343 call rank _mt[243] this[126212]))
      unknown call_tmp[654513] "expr temp" "maybe param" "maybe type" "temp"
      (654516 'move' call_tmp[654513](124464 call - call_tmp[654508] 1))
      unknown call_tmp[654518] "expr temp" "maybe param" "maybe type" "temp"
      (654521 'move' call_tmp[654518](124467 call chpl_direct_range_iter 0 call_tmp[654513] 1))
      (124459 'move' _iterator[124450](124457 call _getIterator call_tmp[654518]))
      Defer
      {
        {
          (124483 call _freeIterator _iterator[124450])
        }
      }
      { scopeless type
        (124472 'move' _indexOfInterest[124449](124469 call iteratorIndex _iterator[124450]))
      }
      ForLoop[124451]
      {
        unknown i[124476] "index var" "insert auto destroy"
        (479804 'end of statement')
        (124478 'move' i[124476] _indexOfInterest[124449])
        (479805 'end of statement' i[124476])
        {
          unknown tmp[424800] "maybe param" "temp"
          unknown tmp[424821] "maybe param" "temp"
          unknown call_tmp[654523] "expr temp" "maybe param" "maybe type" "temp"
          (654526 'move' call_tmp[654523](124328 call off[124304] i[124476]))
          (424832 'move' tmp[424821](124330 call > call_tmp[654523] 0))
          unknown call_tmp[654528] "expr temp" "maybe param" "maybe type" "temp"
          (654531 'move' call_tmp[654528](424834 call _cond_invalid tmp[424821]))
          if call_tmp[654528]
          {
            (424837 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[565334] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565335] "maybe param" "temp"
          unknown call_tmp[654533] "expr temp" "maybe param" "maybe type" "temp"
          (654536 'move' call_tmp[654533](424822 call isTrue tmp[424821]))
          (565340 'move' tmp[565335](565338 call _cond_test call_tmp[654533]))
          if tmp[565335]
          {
            unknown tmp[565342] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[654540] "expr temp" "maybe param" "maybe type" "temp"
            (654543 'move' call_tmp[654540](124335 call(383311 call (partial) dim _mt[243] this[126212]) i[124476]))
            unknown call_tmp[654547] "expr temp" "maybe param" "maybe type" "temp"
            (654550 'move' call_tmp[654547](124336 call _high _mt[243] call_tmp[654540]))
            unknown call_tmp[654552] "expr temp" "maybe param" "maybe type" "temp"
            (654555 'move' call_tmp[654552](124340 call + call_tmp[654547] 1))
            unknown call_tmp[654557] "expr temp" "maybe param" "maybe type" "temp"
            (654560 'move' call_tmp[654557](124345 call off[124304] i[124476]))
            unknown call_tmp[654562] "expr temp" "maybe param" "maybe type" "temp"
            (654565 'move' call_tmp[654562](124346 call - call_tmp[654552] call_tmp[654557]))
            unknown call_tmp[654569] "expr temp" "maybe param" "maybe type" "temp"
            (654572 'move' call_tmp[654569](124351 call(383318 call (partial) dim _mt[243] this[126212]) i[124476]))
            unknown call_tmp[654576] "expr temp" "maybe param" "maybe type" "temp"
            (654579 'move' call_tmp[654576](124352 call _low _mt[243] call_tmp[654569]))
            unknown call_tmp[654581] "expr temp" "maybe param" "maybe type" "temp"
            (654584 'move' call_tmp[654581](124355 call < call_tmp[654562] call_tmp[654576]))
            (565344 'move' tmp[565342](424825 call isTrue call_tmp[654581]))
            (565349 'move' tmp[565334](565346 '_paramFoldLogical' tmp[565335] tmp[565342]))
          }
          {
            (565354 'move' tmp[565334](565351 '_paramFoldLogical' tmp[565335] 0))
          }
          (424811 'move' tmp[424800] tmp[565334])
          unknown call_tmp[654586] "expr temp" "maybe param" "maybe type" "temp"
          (654589 'move' call_tmp[654586](424813 call _cond_invalid tmp[424800]))
          if call_tmp[654586]
          {
            (424816 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[565388] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565389] "maybe param" "temp"
          unknown call_tmp[654591] "expr temp" "maybe param" "maybe type" "temp"
          (654594 'move' call_tmp[654591](424801 call isTrue tmp[424800]))
          (565394 'move' tmp[565389](565392 call _cond_test call_tmp[654591]))
          if tmp[565389]
          {
            (565399 'move' tmp[565388](565396 '_paramFoldLogical' tmp[565389] 1))
          }
          {
            unknown tmp[424842] "maybe param" "temp"
            unknown call_tmp[654596] "expr temp" "maybe param" "maybe type" "temp"
            (654599 'move' call_tmp[654596](124362 call off[124304] i[124476]))
            (424853 'move' tmp[424842](124364 call < call_tmp[654596] 0))
            unknown call_tmp[654601] "expr temp" "maybe param" "maybe type" "temp"
            (654604 'move' call_tmp[654601](424855 call _cond_invalid tmp[424842]))
            if call_tmp[654601]
            {
              (424858 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[565361] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[565362] "maybe param" "temp"
            unknown call_tmp[654606] "expr temp" "maybe param" "maybe type" "temp"
            (654609 'move' call_tmp[654606](424843 call isTrue tmp[424842]))
            (565367 'move' tmp[565362](565365 call _cond_test call_tmp[654606]))
            if tmp[565362]
            {
              unknown tmp[565369] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[654613] "expr temp" "maybe param" "maybe type" "temp"
              (654616 'move' call_tmp[654613](124369 call(383325 call (partial) dim _mt[243] this[126212]) i[124476]))
              unknown call_tmp[654620] "expr temp" "maybe param" "maybe type" "temp"
              (654623 'move' call_tmp[654620](124370 call _low _mt[243] call_tmp[654613]))
              unknown call_tmp[654625] "expr temp" "maybe param" "maybe type" "temp"
              (654628 'move' call_tmp[654625](124374 call - call_tmp[654620] 1))
              unknown call_tmp[654630] "expr temp" "maybe param" "maybe type" "temp"
              (654633 'move' call_tmp[654630](124379 call off[124304] i[124476]))
              unknown call_tmp[654635] "expr temp" "maybe param" "maybe type" "temp"
              (654638 'move' call_tmp[654635](124380 call - call_tmp[654625] call_tmp[654630]))
              unknown call_tmp[654642] "expr temp" "maybe param" "maybe type" "temp"
              (654645 'move' call_tmp[654642](124385 call(383332 call (partial) dim _mt[243] this[126212]) i[124476]))
              unknown call_tmp[654649] "expr temp" "maybe param" "maybe type" "temp"
              (654652 'move' call_tmp[654649](124386 call _high _mt[243] call_tmp[654642]))
              unknown call_tmp[654654] "expr temp" "maybe param" "maybe type" "temp"
              (654657 'move' call_tmp[654654](124389 call > call_tmp[654635] call_tmp[654649]))
              (565371 'move' tmp[565369](424846 call isTrue call_tmp[654654]))
              (565376 'move' tmp[565361](565373 '_paramFoldLogical' tmp[565362] tmp[565369]))
            }
            {
              (565381 'move' tmp[565361](565378 '_paramFoldLogical' tmp[565362] 0))
            }
            unknown tmp[565401] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (565403 'move' tmp[565401](424805 call isTrue tmp[565361]))
            (565408 'move' tmp[565388](565405 '_paramFoldLogical' tmp[565389] tmp[565401]))
          }
          unknown call_tmp[654659] "expr temp" "maybe param" "maybe type" "temp"
          (654662 'move' call_tmp[654659](124419 call _cond_test tmp[565388]))
          if call_tmp[654659]
          {
            (124416 call halt "***Error: Argument to 'interior' function out of range in dimension " i[124476] "***")
            (479809 'end of statement' i[124476])
          }
          unknown call_tmp[654664] "expr temp" "maybe param" "maybe type" "temp"
          (654667 'move' call_tmp[654664](124427 call ranges[124312] i[124476]))
          unknown call_tmp[654671] "expr temp" "maybe param" "maybe type" "temp"
          (654674 'move' call_tmp[654671](359538 call _value _mt[243] this[126212]))
          unknown call_tmp[654678] "expr temp" "maybe param" "maybe type" "temp"
          (654681 'move' call_tmp[654678](124434 call(124429 call (partial) dsiDim _mt[243] call_tmp[654671]) i[124476]))
          unknown call_tmp[654685] "expr temp" "maybe param" "maybe type" "temp"
          (654688 'move' call_tmp[654685](124443 call off[124304] i[124476]))
          unknown call_tmp[654690] "expr temp" "maybe param" "maybe type" "temp"
          (654693 'move' call_tmp[654690](124445 call(124437 call (partial) interior _mt[243] call_tmp[654678]) call_tmp[654685]))
          (124446 call = call_tmp[654664] call_tmp[654690])
          (479811 'end of statement' ranges[124312] i[124476] i[124476] i[124476])
        }
        label _continueLabel[124454]
        _indexOfInterest[124449]
        _iterator[124450]
      }
      label _breakLabel[124455]
    }
    unknown call_tmp[654697] "expr temp" "maybe param" "maybe type" "temp"
    (654700 'move' call_tmp[654697](383348 call dist _mt[243] this[126212]))
    unknown call_tmp[654704] "expr temp" "maybe param" "maybe type" "temp"
    (654707 'move' call_tmp[654704](383352 call rank _mt[243] this[126212]))
    unknown call_tmp[654711] "expr temp" "maybe param" "maybe type" "temp"
    (654714 'move' call_tmp[654711](359542 call _value _mt[243] this[126212]))
    unknown call_tmp[654718] "expr temp" "maybe param" "maybe type" "temp"
    (654721 'move' call_tmp[654718](124496 call idxType _mt[243] call_tmp[654711]))
    unknown call_tmp[654725] "expr temp" "maybe param" "maybe type" "temp"
    (654728 'move' call_tmp[654725](383356 call stridable _mt[243] this[126212]))
    unknown call_tmp[654730] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654733 'move' call_tmp[654730](747878 'new' _domain[125902](?) call_tmp[654697] call_tmp[654704] call_tmp[654718] call_tmp[654725] ranges[124312]))
    (517169 'move' ret[517164](517168 'deref' call_tmp[654730]))
    gotoReturn _end_interior[517162] _end_interior[517162]
    (479816 'end of statement' ranges[124312])
    label _end_interior[517162]
    (517166 return ret[517164])
  }
  function _domain[125902](?).interior[124512](arg _mt[126218]:_MT[238], arg this[126216]:_domain[125902](?), arg off[124509] :
  (383361 call intIdxType _mt[243] this[126216])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517175] "RVV" "temp"
    unknown offTup[124522] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654739] "expr temp" "maybe param" "maybe type" "temp"
    (654742 'move' call_tmp[654739](383369 call rank _mt[243] this[126216]))
    unknown call_tmp[654746] "expr temp" "maybe param" "maybe type" "temp"
    (654749 'move' call_tmp[654746](383373 call intIdxType _mt[243] this[126216]))
    unknown call_tmp[654751] "expr temp" "maybe param" "maybe type" "temp"
    (654754 'move' call_tmp[654751](124520 call * call_tmp[654739] call_tmp[654746]))
    (542893 'default init var' offTup[124522] call_tmp[654751])
    (124525 'end of statement')
    {
      unknown _indexOfInterest[124543] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124544] "expr temp" "temp"
      unknown call_tmp[654758] "expr temp" "maybe param" "maybe type" "temp"
      (654761 'move' call_tmp[654758](383380 call rank _mt[243] this[126216]))
      unknown call_tmp[654763] "expr temp" "maybe param" "maybe type" "temp"
      (654766 'move' call_tmp[654763](124558 call - call_tmp[654758] 1))
      unknown call_tmp[654768] "expr temp" "maybe param" "maybe type" "temp"
      (654771 'move' call_tmp[654768](124561 call chpl_direct_range_iter 0 call_tmp[654763] 1))
      (124553 'move' _iterator[124544](124551 call _getIterator call_tmp[654768]))
      Defer
      {
        {
          (124577 call _freeIterator _iterator[124544])
        }
      }
      { scopeless type
        (124566 'move' _indexOfInterest[124543](124563 call iteratorIndex _iterator[124544]))
      }
      ForLoop[124545]
      {
        unknown i[124570] "index var" "insert auto destroy"
        (479819 'end of statement')
        (124572 'move' i[124570] _indexOfInterest[124543])
        (479820 'end of statement' i[124570])
        unknown call_tmp[654773] "expr temp" "maybe param" "maybe type" "temp"
        (654776 'move' call_tmp[654773](124538 call offTup[124522] i[124570]))
        (124540 call = call_tmp[654773] off[124509])
        (479822 'end of statement' offTup[124522] i[124570])
        label _continueLabel[124548]
        _indexOfInterest[124543]
        _iterator[124544]
      }
      label _breakLabel[124549]
    }
    unknown call_tmp[654780] "expr temp" "maybe param" "maybe type" "temp"
    (654783 'move' call_tmp[654780](124587 call(383384 call (partial) interior _mt[243] this[126216]) offTup[124522]))
    (517180 'move' ret[517175](517179 'deref' call_tmp[654780]))
    gotoReturn _end_interior[517173] _end_interior[517173]
    (479825 'end of statement' offTup[124522])
    label _end_interior[517173]
    (517177 return ret[517175])
  }
  where {
    unknown call_tmp[654787] "expr temp" "maybe param" "maybe type" "temp"
    (654790 'move' call_tmp[654787](383365 call rank _mt[243] this[126216]))
    (124516 call != call_tmp[654787] 1)
  }
  function _domain[125902](?).translate[124597](arg _mt[126222]:_MT[238], arg this[126220]:_domain[125902](?), arg off[124595]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654792] "expr temp" "maybe param" "maybe type" "temp"
    (654795 'move' call_tmp[654792](124608 call isAssociativeDom this[126220]))
    unknown call_tmp[654797] "expr temp" "maybe param" "maybe type" "temp"
    (654800 'move' call_tmp[654797](124682 call _cond_test call_tmp[654792]))
    if call_tmp[654797]
    {
      (124628 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[654802] "expr temp" "maybe param" "maybe type" "temp"
      (654805 'move' call_tmp[654802](124633 call isSparseDom this[126220]))
      unknown call_tmp[654807] "expr temp" "maybe param" "maybe type" "temp"
      (654810 'move' call_tmp[654807](124676 call _cond_test call_tmp[654802]))
      if call_tmp[654807]
      {
        (124653 call compilerError "translate not supported on sparse domains")
      }
      {
        (124674 call compilerError "translate not supported on this domain type")
      }
    }
    (517184 return _void[55])
  }
  where {
    unknown call_tmp[654812] "expr temp" "maybe param" "maybe type" "temp"
    (654815 'move' call_tmp[654812](124602 call isRectangularDom this[126220]))
    (124603 call ! call_tmp[654812])
  }
  function _domain[125902](?).translate[124698](arg _mt[126226]:_MT[238], arg this[126224]:_domain[125902](?), arg off[124695]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517188] "RVV" "temp"
    unknown call_tmp[654821] "expr temp" "maybe param" "maybe type" "temp"
    (654824 'move' call_tmp[654821](124703 call(383396 call (partial) translate _mt[243] this[126224]) off[124695]))
    (517193 'move' ret[517188](517192 'deref' call_tmp[654821]))
    (517190 return ret[517188])
  }
  function _domain[125902](?).translate[124713](arg _mt[126230]:_MT[238], arg this[126228]:_domain[125902](?), arg off[124711]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517197] "RVV" "temp"
    unknown call_tmp[654828] "expr temp" "maybe param" "maybe type" "temp"
    (654831 'move' call_tmp[654828](124720 call size _mt[243] off[124711]))
    unknown call_tmp[654835] "expr temp" "maybe param" "maybe type" "temp"
    (654838 'move' call_tmp[654835](383402 call rank _mt[243] this[126228]))
    unknown call_tmp[654840] "expr temp" "maybe param" "maybe type" "temp"
    (654843 'move' call_tmp[654840](124724 call != call_tmp[654828] call_tmp[654835]))
    unknown call_tmp[654845] "expr temp" "maybe param" "maybe type" "temp"
    (654848 'move' call_tmp[654845](124747 call _cond_test call_tmp[654840]))
    if call_tmp[654845]
    {
      (124745 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown call_tmp[654852] "maybe param" "maybe type" "temp"
    (654855 'move' call_tmp[654852](124755 call(383406 call (partial) dims _mt[243] this[126228])))
    unknown ranges[124756] "dead at end of block" "insert auto destroy"
    (542895 'init var' ranges[124756] call_tmp[654852])
    (124759 'end of statement')
    {
      unknown _indexOfInterest[124793] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124794] "expr temp" "temp"
      unknown call_tmp[654859] "expr temp" "maybe param" "maybe type" "temp"
      (654862 'move' call_tmp[654859](383415 call rank _mt[243] this[126228]))
      unknown call_tmp[654864] "expr temp" "maybe param" "maybe type" "temp"
      (654867 'move' call_tmp[654864](124808 call - call_tmp[654859] 1))
      unknown call_tmp[654869] "expr temp" "maybe param" "maybe type" "temp"
      (654872 'move' call_tmp[654869](124811 call chpl_direct_range_iter 0 call_tmp[654864] 1))
      (124803 'move' _iterator[124794](124801 call _getIterator call_tmp[654869]))
      Defer
      {
        {
          (124827 call _freeIterator _iterator[124794])
        }
      }
      { scopeless type
        (124816 'move' _indexOfInterest[124793](124813 call iteratorIndex _iterator[124794]))
      }
      ForLoop[124795]
      {
        unknown i[124820] "index var" "insert auto destroy"
        (479833 'end of statement')
        (124822 'move' i[124820] _indexOfInterest[124793])
        (479834 'end of statement' i[124820])
        unknown call_tmp[654874] "expr temp" "maybe param" "maybe type" "temp"
        (654877 'move' call_tmp[654874](124771 call ranges[124756] i[124820]))
        unknown call_tmp[654881] "expr temp" "maybe param" "maybe type" "temp"
        (654884 'move' call_tmp[654881](359547 call _value _mt[243] this[126228]))
        unknown call_tmp[654888] "expr temp" "maybe param" "maybe type" "temp"
        (654891 'move' call_tmp[654888](124778 call(124773 call (partial) dsiDim _mt[243] call_tmp[654881]) i[124820]))
        unknown call_tmp[654895] "expr temp" "maybe param" "maybe type" "temp"
        (654898 'move' call_tmp[654895](124787 call off[124711] i[124820]))
        unknown call_tmp[654900] "expr temp" "maybe param" "maybe type" "temp"
        (654903 'move' call_tmp[654900](124789 call(124781 call (partial) translate _mt[243] call_tmp[654888]) call_tmp[654895]))
        (124790 call = call_tmp[654874] call_tmp[654900])
        (479836 'end of statement' ranges[124756] i[124820] i[124820] i[124820])
        label _continueLabel[124798]
        _indexOfInterest[124793]
        _iterator[124794]
      }
      label _breakLabel[124799]
    }
    unknown call_tmp[654907] "expr temp" "maybe param" "maybe type" "temp"
    (654910 'move' call_tmp[654907](383420 call dist _mt[243] this[126228]))
    unknown call_tmp[654914] "expr temp" "maybe param" "maybe type" "temp"
    (654917 'move' call_tmp[654914](383424 call rank _mt[243] this[126228]))
    unknown call_tmp[654921] "expr temp" "maybe param" "maybe type" "temp"
    (654924 'move' call_tmp[654921](359551 call _value _mt[243] this[126228]))
    unknown call_tmp[654928] "expr temp" "maybe param" "maybe type" "temp"
    (654931 'move' call_tmp[654928](124840 call idxType _mt[243] call_tmp[654921]))
    unknown call_tmp[654935] "expr temp" "maybe param" "maybe type" "temp"
    (654938 'move' call_tmp[654935](383428 call stridable _mt[243] this[126228]))
    unknown call_tmp[654940] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654943 'move' call_tmp[654940](747879 'new' _domain[125902](?) call_tmp[654907] call_tmp[654914] call_tmp[654928] call_tmp[654935] ranges[124756]))
    (517202 'move' ret[517197](517201 'deref' call_tmp[654940]))
    gotoReturn _end_translate[517195] _end_translate[517195]
    (479841 'end of statement' ranges[124756])
    label _end_translate[517195]
    (517199 return ret[517197])
  }
  where {
    (124718 call isTuple off[124711])
  }
  function _domain[125902](?).translate[124855](arg _mt[126234]:_MT[238], arg this[126232]:_domain[125902](?), arg off[124853]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517208] "RVV" "temp"
    unknown offTup[124874] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654947] "expr temp" "maybe param" "maybe type" "temp"
    (654950 'move' call_tmp[654947](383438 call rank _mt[243] this[126232]))
    unknown call_tmp[654952] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (654955 'move' call_tmp[654952](124871 'typeof' off[124853]))
    unknown call_tmp[654957] "expr temp" "maybe param" "maybe type" "temp"
    (654960 'move' call_tmp[654957](124872 call * call_tmp[654947] call_tmp[654952]))
    (542897 'default init var' offTup[124874] call_tmp[654957])
    (124877 'end of statement')
    {
      unknown _indexOfInterest[124895] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124896] "expr temp" "temp"
      unknown call_tmp[654964] "expr temp" "maybe param" "maybe type" "temp"
      (654967 'move' call_tmp[654964](383446 call rank _mt[243] this[126232]))
      unknown call_tmp[654969] "expr temp" "maybe param" "maybe type" "temp"
      (654972 'move' call_tmp[654969](124910 call - call_tmp[654964] 1))
      unknown call_tmp[654974] "expr temp" "maybe param" "maybe type" "temp"
      (654977 'move' call_tmp[654974](124913 call chpl_direct_range_iter 0 call_tmp[654969] 1))
      (124905 'move' _iterator[124896](124903 call _getIterator call_tmp[654974]))
      Defer
      {
        {
          (124929 call _freeIterator _iterator[124896])
        }
      }
      { scopeless type
        (124918 'move' _indexOfInterest[124895](124915 call iteratorIndex _iterator[124896]))
      }
      ForLoop[124897]
      {
        unknown i[124922] "index var" "insert auto destroy"
        (479844 'end of statement')
        (124924 'move' i[124922] _indexOfInterest[124895])
        (479845 'end of statement' i[124922])
        unknown call_tmp[654979] "expr temp" "maybe param" "maybe type" "temp"
        (654982 'move' call_tmp[654979](124890 call offTup[124874] i[124922]))
        (124892 call = call_tmp[654979] off[124853])
        (479847 'end of statement' offTup[124874] i[124922])
        label _continueLabel[124900]
        _indexOfInterest[124895]
        _iterator[124896]
      }
      label _breakLabel[124901]
    }
    unknown call_tmp[654986] "expr temp" "maybe param" "maybe type" "temp"
    (654989 'move' call_tmp[654986](124939 call(383450 call (partial) translate _mt[243] this[126232]) offTup[124874]))
    (517213 'move' ret[517208](517212 'deref' call_tmp[654986]))
    gotoReturn _end_translate[517206] _end_translate[517206]
    (479850 'end of statement' offTup[124874])
    label _end_translate[517206]
    (517210 return ret[517208])
  }
  where {
    unknown tmp[424863] "maybe param" "temp"
    unknown call_tmp[654993] "expr temp" "maybe param" "maybe type" "temp"
    (654996 'move' call_tmp[654993](383433 call rank _mt[243] this[126232]))
    (424874 'move' tmp[424863](124859 call != call_tmp[654993] 1))
    unknown call_tmp[654998] "expr temp" "maybe param" "maybe type" "temp"
    (655001 'move' call_tmp[654998](424876 call _cond_invalid tmp[424863]))
    if call_tmp[654998]
    {
      (424879 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565415] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565416] "maybe param" "temp"
    unknown call_tmp[655003] "expr temp" "maybe param" "maybe type" "temp"
    (655006 'move' call_tmp[655003](424864 call isTrue tmp[424863]))
    (565421 'move' tmp[565416](565419 call _cond_test call_tmp[655003]))
    if tmp[565416]
    {
      unknown tmp[565423] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655008] "expr temp" "maybe param" "maybe type" "temp"
      (655011 'move' call_tmp[655008](124864 call isTuple off[124853]))
      unknown call_tmp[655013] "expr temp" "maybe param" "maybe type" "temp"
      (655016 'move' call_tmp[655013](124865 call ! call_tmp[655008]))
      (565425 'move' tmp[565423](424867 call isTrue call_tmp[655013]))
      (565430 'move' tmp[565415](565427 '_paramFoldLogical' tmp[565416] tmp[565423]))
    }
    {
      (565435 'move' tmp[565415](565432 '_paramFoldLogical' tmp[565416] 0))
    }
    (748264 call chpl_statementLevelSymbol tmp[565415])
  }
  function _domain[125902](?).isEmpty[124947](arg _mt[126238]:_MT[238], arg this[126236]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517219] "RVV" "temp"
    unknown call_tmp[655020] "expr temp" "maybe param" "maybe type" "temp"
    (655023 'move' call_tmp[655020](124951 call size _mt[243] this[126236]))
    unknown call_tmp[655025] "expr temp" "maybe param" "maybe type" "temp"
    (655028 'move' call_tmp[655025](124955 call == call_tmp[655020] 0))
    (517225 'move' ret[517219](517224 'coerce' call_tmp[655025] bool[10]))
    (517221 return ret[517219])
  }
  { scopeless type
    bool[10]
  }
  function _domain[125902](?).chpl__unTranslate[124971](arg _mt[126242]:_MT[238], arg this[126240]:_domain[125902](?), arg off[124967]:integral[199](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517229] "RVV" "temp"
    unknown call_tmp[655034] "expr temp" "maybe param" "maybe type" "temp"
    (655037 'move' call_tmp[655034](124976 call(383460 call (partial) chpl__unTranslate _mt[243] this[126240]) off[124967]))
    (517234 'move' ret[517229](517233 'deref' call_tmp[655034]))
    (517231 return ret[517229])
  }
  function _domain[125902](?).chpl__unTranslate[124991](arg _mt[126246]:_MT[238], arg this[126244]:_domain[125902](?), arg off[124988] :
  unknown call_tmp[655041] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517238] "RVV" "temp"
    unknown call_tmp[655055] "maybe param" "maybe type" "temp"
    (655058 'move' call_tmp[655055](124995 call(383473 call (partial) dims _mt[243] this[126244])))
    unknown ranges[124996] "dead at end of block" "insert auto destroy"
    (542899 'init var' ranges[124996] call_tmp[655055])
    (124999 'end of statement')
    {
      unknown _indexOfInterest[125031] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125032] "expr temp" "temp"
      unknown call_tmp[655062] "expr temp" "maybe param" "maybe type" "temp"
      (655065 'move' call_tmp[655062](383486 call rank _mt[243] this[126244]))
      unknown call_tmp[655067] "expr temp" "maybe param" "maybe type" "temp"
      (655070 'move' call_tmp[655067](125046 call - call_tmp[655062] 1))
      unknown call_tmp[655072] "expr temp" "maybe param" "maybe type" "temp"
      (655075 'move' call_tmp[655072](125049 call chpl_direct_range_iter 0 call_tmp[655067] 1))
      (125041 'move' _iterator[125032](125039 call _getIterator call_tmp[655072]))
      Defer
      {
        {
          (125065 call _freeIterator _iterator[125032])
        }
      }
      { scopeless type
        (125054 'move' _indexOfInterest[125031](125051 call iteratorIndex _iterator[125032]))
      }
      ForLoop[125033]
      {
        unknown i[125058] "index var" "insert auto destroy"
        (479855 'end of statement')
        (125060 'move' i[125058] _indexOfInterest[125031])
        (479856 'end of statement' i[125058])
        unknown call_tmp[655077] "expr temp" "maybe param" "maybe type" "temp"
        (655080 'move' call_tmp[655077](125012 call ranges[124996] i[125058]))
        unknown call_tmp[655084] "expr temp" "maybe param" "maybe type" "temp"
        (655087 'move' call_tmp[655084](125016 call(383479 call (partial) dim _mt[243] this[126244]) i[125058]))
        unknown call_tmp[655091] "expr temp" "maybe param" "maybe type" "temp"
        (655094 'move' call_tmp[655091](125025 call off[124988] i[125058]))
        unknown call_tmp[655096] "expr temp" "maybe param" "maybe type" "temp"
        (655099 'move' call_tmp[655096](125027 call(125019 call (partial) chpl__unTranslate _mt[243] call_tmp[655084]) call_tmp[655091]))
        (125028 call = call_tmp[655077] call_tmp[655096])
        (479858 'end of statement' ranges[124996] i[125058] i[125058] i[125058])
        label _continueLabel[125036]
        _indexOfInterest[125031]
        _iterator[125032]
      }
      label _breakLabel[125037]
    }
    unknown call_tmp[655103] "expr temp" "maybe param" "maybe type" "temp"
    (655106 'move' call_tmp[655103](383491 call dist _mt[243] this[126244]))
    unknown call_tmp[655110] "expr temp" "maybe param" "maybe type" "temp"
    (655113 'move' call_tmp[655110](383495 call rank _mt[243] this[126244]))
    unknown call_tmp[655117] "expr temp" "maybe param" "maybe type" "temp"
    (655120 'move' call_tmp[655117](359556 call _value _mt[243] this[126244]))
    unknown call_tmp[655124] "expr temp" "maybe param" "maybe type" "temp"
    (655127 'move' call_tmp[655124](125078 call idxType _mt[243] call_tmp[655117]))
    unknown call_tmp[655131] "expr temp" "maybe param" "maybe type" "temp"
    (655134 'move' call_tmp[655131](383499 call stridable _mt[243] this[126244]))
    unknown call_tmp[655136] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655139 'move' call_tmp[655136](747880 'new' _domain[125902](?) call_tmp[655103] call_tmp[655110] call_tmp[655124] call_tmp[655131] ranges[124996]))
    (517243 'move' ret[517238](517242 'deref' call_tmp[655136]))
    gotoReturn _end_chpl__unTranslate[517236] _end_chpl__unTranslate[517236]
    (479863 'end of statement' ranges[124996])
    label _end_chpl__unTranslate[517236]
    (517240 return ret[517238])
  }
  function _domain[125902](?).setIndices[125092](arg _mt[126250]:_MT[238], arg this[126248]:_domain[125902](?), arg x[125090]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655143] "expr temp" "maybe param" "maybe type" "temp"
    (655146 'move' call_tmp[655143](359560 call _value _mt[243] this[126248]))
    (125100 call(125095 call (partial) dsiSetIndices _mt[243] call_tmp[655143]) x[125090])
    (479865 'end of statement')
    unknown call_tmp[655152] "expr temp" "maybe param" "maybe type" "temp"
    (655155 'move' call_tmp[655152](383506 call _instance _mt[243] this[126248]))
    unknown call_tmp[655157] "expr temp" "maybe param" "maybe type" "temp"
    (655160 'move' call_tmp[655157](125106 call _isPrivatized call_tmp[655152]))
    unknown call_tmp[655162] "expr temp" "maybe param" "maybe type" "temp"
    (655165 'move' call_tmp[655162](125113 call _cond_test call_tmp[655157]))
    if call_tmp[655162]
    {
      unknown call_tmp[655169] "expr temp" "maybe param" "maybe type" "temp"
      (655172 'move' call_tmp[655169](383510 call _value _mt[243] this[126248]))
      (125110 call _reprivatize call_tmp[655169])
    }
    (517247 return _void[55])
  }
  function _domain[125902](?).getIndices[125121](arg _mt[126254]:_MT[238], arg this[126252]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517251] "RVV" "temp"
    unknown call_tmp[655176] "expr temp" "maybe param" "maybe type" "temp"
    (655179 'move' call_tmp[655176](359564 call _value _mt[243] this[126252]))
    unknown call_tmp[655183] "expr temp" "maybe param" "maybe type" "temp"
    (655186 'move' call_tmp[655183](125130 call(125126 call (partial) dsiGetIndices _mt[243] call_tmp[655176])))
    (517256 'move' ret[517251](517255 'deref' call_tmp[655183]))
    (517253 return ret[517251])
  }
  function _domain[125902](?).writeThis[125140](arg _mt[126258]:_MT[238], arg this[126256]:_domain[125902](?), arg f[125138]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655190] "expr temp" "maybe param" "maybe type" "temp"
    (655193 'move' call_tmp[655190](359568 call _value _mt[243] this[126256]))
    (125150 call(125145 call (partial) dsiSerialWrite _mt[243] call_tmp[655190]) f[125138])
    (517258 return _void[55])
  }
  function _domain[125902](?).readThis[125159](arg _mt[126262]:_MT[238], arg this[126260]:_domain[125902](?), arg f[125157]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655199] "expr temp" "maybe param" "maybe type" "temp"
    (655202 'move' call_tmp[655199](359572 call _value _mt[243] this[126260]))
    (125169 call(125164 call (partial) dsiSerialRead _mt[243] call_tmp[655199]) f[125157])
    (517260 return _void[55])
  }
  function _domain[125902](?).localSlice[125180](arg _mt[126266]:_MT[238], arg this[126264]:_domain[125902](?), arg r[125177]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517264] "RVV" "temp"
    unknown call_tmp[655210] "expr temp" "maybe param" "maybe type" "temp"
    (655213 'move' call_tmp[655210](383521 call _value _mt[243] this[126264]))
    unknown call_tmp[655215] "expr temp" "maybe param" "maybe type" "temp"
    (655218 'move' call_tmp[655215](125195 '_wide_get_locale' call_tmp[655210]))
    unknown call_tmp[655220] "expr temp" "maybe param" "maybe type" "temp"
    (655223 'move' call_tmp[655220](125196 call chpl_localeID_to_locale call_tmp[655215]))
    unknown call_tmp[655225] "expr temp" "maybe param" "maybe type" "temp"
    (655228 'move' call_tmp[655225](383524 call here[90435]))
    unknown call_tmp[655230] "expr temp" "maybe param" "maybe type" "temp"
    (655233 'move' call_tmp[655230](125199 call != call_tmp[655220] call_tmp[655225]))
    unknown call_tmp[655235] "expr temp" "maybe param" "maybe type" "temp"
    (655238 'move' call_tmp[655235](125248 call _cond_test call_tmp[655230]))
    if call_tmp[655235]
    {
      unknown call_tmp[655242] "expr temp" "maybe param" "maybe type" "temp"
      (655245 'move' call_tmp[655242](383527 call _value _mt[243] this[126264]))
      unknown call_tmp[655247] "expr temp" "maybe param" "maybe type" "temp"
      (655250 'move' call_tmp[655247](125224 '_wide_get_node' call_tmp[655242]))
      unknown call_tmp[655252] "expr temp" "maybe param" "maybe type" "temp"
      (655255 'move' call_tmp[655252](359579 call here[90435]))
      unknown call_tmp[655259] "expr temp" "maybe param" "maybe type" "temp"
      (655262 'move' call_tmp[655259](125243 call id _mt[243] call_tmp[655252]))
      (125246 call halt "Attempting to take a local slice of a domain on locale " call_tmp[655247] " from locale " call_tmp[655259])
    }
    unknown call_tmp[655264] "expr temp" "maybe param" "maybe type" "temp"
    (655267 'move' call_tmp[655264](125258 call this[126264](125256 'expand_tuple' r[125177])))
    (517269 'move' ret[517264](517268 'deref' call_tmp[655264]))
    (517266 return ret[517264])
  }
  where {
    unknown tmp[424884] "maybe param" "temp"
    (424895 'move' tmp[424884](125185 call chpl__isTupleOfRanges r[125177]))
    unknown call_tmp[655269] "expr temp" "maybe param" "maybe type" "temp"
    (655272 'move' call_tmp[655269](424897 call _cond_invalid tmp[424884]))
    if call_tmp[655269]
    {
      (424900 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565442] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565443] "maybe param" "temp"
    unknown call_tmp[655274] "expr temp" "maybe param" "maybe type" "temp"
    (655277 'move' call_tmp[655274](424885 call isTrue tmp[424884]))
    (565448 'move' tmp[565443](565446 call _cond_test call_tmp[655274]))
    if tmp[565443]
    {
      unknown tmp[565450] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655281] "expr temp" "maybe param" "maybe type" "temp"
      (655284 'move' call_tmp[655281](359576 call _value _mt[243] this[126264]))
      unknown call_tmp[655288] "expr temp" "maybe param" "maybe type" "temp"
      (655291 'move' call_tmp[655288](125191 call(125187 call (partial) isDefaultRectangular _mt[243] call_tmp[655281])))
      (565452 'move' tmp[565450](424888 call isTrue call_tmp[655288]))
      (565457 'move' tmp[565442](565454 '_paramFoldLogical' tmp[565443] tmp[565450]))
    }
    {
      (565462 'move' tmp[565442](565459 '_paramFoldLogical' tmp[565443] 0))
    }
    (748266 call chpl_statementLevelSymbol tmp[565442])
  }
  function _domain[125902](?).localSlice[125270](arg _mt[126270]:_MT[238], arg this[126268]:_domain[125902](?), arg r[125267]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517273] "RVV" "temp"
    unknown call_tmp[655297] "expr temp" "maybe param" "maybe type" "temp"
    (655300 'move' call_tmp[655297](359586 call _value _mt[243] this[126268]))
    unknown call_tmp[655304] "expr temp" "maybe param" "maybe type" "temp"
    (655307 'move' call_tmp[655304](125295 call chpl__anyStridable r[125267]))
    unknown call_tmp[655309] "expr temp" "maybe param" "maybe type" "temp"
    (655312 'move' call_tmp[655309](125298 call(125289 call (partial) dsiLocalSlice _mt[243] call_tmp[655297]) call_tmp[655304] r[125267]))
    (517278 'move' ret[517273](517277 'deref' call_tmp[655309]))
    (517275 return ret[517273])
  }
  where {
    unknown tmp[424905] "maybe param" "temp"
    (424916 'move' tmp[424905](125275 call chpl__isTupleOfRanges r[125267]))
    unknown call_tmp[655314] "expr temp" "maybe param" "maybe type" "temp"
    (655317 'move' call_tmp[655314](424918 call _cond_invalid tmp[424905]))
    if call_tmp[655314]
    {
      (424921 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565469] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565470] "maybe param" "temp"
    unknown call_tmp[655319] "expr temp" "maybe param" "maybe type" "temp"
    (655322 'move' call_tmp[655319](424906 call isTrue tmp[424905]))
    (565475 'move' tmp[565470](565473 call _cond_test call_tmp[655319]))
    if tmp[565470]
    {
      unknown tmp[565477] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655326] "expr temp" "maybe param" "maybe type" "temp"
      (655329 'move' call_tmp[655326](359582 call _value _mt[243] this[126268]))
      unknown call_tmp[655333] "expr temp" "maybe param" "maybe type" "temp"
      (655336 'move' call_tmp[655333](125281 call(125277 call (partial) isDefaultRectangular _mt[243] call_tmp[655326])))
      unknown call_tmp[655338] "expr temp" "maybe param" "maybe type" "temp"
      (655341 'move' call_tmp[655338](125282 call ! call_tmp[655333]))
      (565479 'move' tmp[565477](424909 call isTrue call_tmp[655338]))
      (565484 'move' tmp[565469](565481 '_paramFoldLogical' tmp[565470] tmp[565477]))
    }
    {
      (565489 'move' tmp[565469](565486 '_paramFoldLogical' tmp[565470] 0))
    }
    (748268 call chpl_statementLevelSymbol tmp[565469])
  }
  function _domain[125902](?).localSlice[125311](arg _mt[126274]:_MT[238], arg this[126272]:_domain[125902](?), arg d[125308]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517282] "RVV" "temp"
    unknown call_tmp[655347] "expr temp" "maybe param" "maybe type" "temp"
    (655350 'move' call_tmp[655347](125319 call(125315 call (partial) getIndices _mt[243] d[125308])))
    unknown call_tmp[655352] "expr temp" "maybe param" "maybe type" "temp"
    (655355 'move' call_tmp[655352](125322 call(383541 call (partial) localSlice _mt[243] this[126272])(125320 'expand_tuple' call_tmp[655347])))
    (517287 'move' ret[517282](517286 'deref' call_tmp[655352]))
    (517284 return ret[517282])
  }
  function _domain[125902](?).sorted[125339](arg _mt[126278]:_MT[238], arg this[126276]:_domain[125902](?), arg comparator[125335]:_any[178](?) :
  (748815 call chpl_defaultComparator) =
  (125334 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517291] "RVV" "temp"
    {
      unknown _indexOfInterest[125355] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125356] "expr temp" "temp"
      unknown call_tmp[655359] "expr temp" "maybe param" "maybe type" "temp"
      (655362 'move' call_tmp[655359](359591 call _value _mt[243] this[126276]))
      unknown call_tmp[655366] "expr temp" "maybe param" "maybe type" "temp"
      (655369 'move' call_tmp[655366](125350 call(125345 call (partial) dsiSorted _mt[243] call_tmp[655359]) comparator[125335]))
      (125365 'move' _iterator[125356](125363 call _getIterator call_tmp[655366]))
      Defer
      {
        {
          (125382 call _freeIterator _iterator[125356])
        }
      }
      { scopeless type
        (125371 'move' _indexOfInterest[125355](125368 call iteratorIndex _iterator[125356]))
      }
      ForLoop[125357]
      {
        unknown i[125375] "index var" "insert auto destroy"
        (479875 'end of statement')
        (125377 'move' i[125375] _indexOfInterest[125355])
        (479876 'end of statement' i[125375])
        {
          unknown yret[517295] "YVV" "temp"
          (517298 'move' yret[517295](517297 'deref' i[125375]))
          (517300 yield yret[517295])
          (479878 'end of statement' i[125375])
        }
        label _continueLabel[125360]
        _indexOfInterest[125355]
        _iterator[125356]
      }
      label _breakLabel[125361]
    }
    (517293 return ret[517291])
  }
  function _domain[125902](?).displayRepresentation[125394](arg _mt[126282]:_MT[238], arg this[126280]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655373] "expr temp" "maybe param" "maybe type" "temp"
    (655376 'move' call_tmp[655373](359595 call _value _mt[243] this[126280]))
    (125401 call(125397 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[655373]))
    (517302 return _void[55])
  }
  function _domain[125902](?).defaultSparseDist[125408](arg _mt[126286]:_MT[238], arg this[126284]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[517306] "RVV" "temp"
    unknown call_tmp[655382] "expr temp" "maybe param" "maybe type" "temp"
    (655385 'move' call_tmp[655382](359599 call _value _mt[243] this[126284]))
    unknown call_tmp[655389] "expr temp" "maybe param" "maybe type" "temp"
    (655392 'move' call_tmp[655389](125412 call dist _mt[243] call_tmp[655382]))
    unknown call_tmp[655394] "expr temp" "maybe param" "maybe type" "temp"
    (655397 'move' call_tmp[655394](125416 call _getDistribution call_tmp[655389]))
    (517311 'move' ret[517306](517310 'deref' call_tmp[655394]))
    (517308 return ret[517306])
  }
  function _domain[125902](?).safeCast[125428](arg _mt[126290]:_MT[238], arg this[126288]:_domain[125902](?), arg t[125425]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517315] "RVV" "temp"
    const tmpD[125441] "dead at end of block" "const" "insert auto destroy"
    (542901 'default init var' tmpD[125441] t[125425])
    (125444 'end of statement')
    unknown call_tmp[655401] "expr temp" "maybe param" "maybe type" "temp"
    (655404 'move' call_tmp[655401](125447 call rank _mt[243] tmpD[125441]))
    unknown call_tmp[655408] "expr temp" "maybe param" "maybe type" "temp"
    (655411 'move' call_tmp[655408](125451 call rank _mt[243] this[126288]))
    unknown call_tmp[655413] "expr temp" "maybe param" "maybe type" "temp"
    (655416 'move' call_tmp[655413](125454 call != call_tmp[655401] call_tmp[655408]))
    unknown call_tmp[655418] "expr temp" "maybe param" "maybe type" "temp"
    (655421 'move' call_tmp[655418](125477 call _cond_test call_tmp[655413]))
    if call_tmp[655418]
    {
      (125475 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655425] "expr temp" "maybe param" "maybe type" "temp"
    (655428 'move' call_tmp[655425](125483 call idxType _mt[243] tmpD[125441]))
    unknown call_tmp[655432] "expr temp" "maybe param" "maybe type" "temp"
    (655435 'move' call_tmp[655432](125487 call idxType _mt[243] this[126288]))
    unknown call_tmp[655437] "expr temp" "maybe param" "maybe type" "temp"
    (655440 'move' call_tmp[655437](125490 call != call_tmp[655425] call_tmp[655432]))
    unknown call_tmp[655442] "expr temp" "maybe param" "maybe type" "temp"
    (655445 'move' call_tmp[655442](125513 call _cond_test call_tmp[655437]))
    if call_tmp[655442]
    {
      (125511 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655449] "expr temp" "maybe param" "maybe type" "temp"
    (655452 'move' call_tmp[655449](125519 call stridable _mt[243] tmpD[125441]))
    unknown call_tmp[655456] "expr temp" "maybe param" "maybe type" "temp"
    (655459 'move' call_tmp[655456](125523 call stridable _mt[243] this[126288]))
    unknown call_tmp[655461] "expr temp" "maybe param" "maybe type" "temp"
    (655464 'move' call_tmp[655461](125526 call == call_tmp[655449] call_tmp[655456]))
    unknown call_tmp[655466] "expr temp" "maybe param" "maybe type" "temp"
    (655469 'move' call_tmp[655466](125707 call _cond_test call_tmp[655461]))
    if call_tmp[655466]
    {
      (517320 'move' ret[517315](517319 'deref' this[126288]))
      gotoReturn _end_safeCast[517313] _end_safeCast[517313]
    }
    {
      unknown tmp[424947] "maybe param" "temp"
      unknown call_tmp[655473] "expr temp" "maybe param" "maybe type" "temp"
      (655476 'move' call_tmp[655473](125532 call stridable _mt[243] tmpD[125441]))
      (424958 'move' tmp[424947](125535 call ! call_tmp[655473]))
      unknown call_tmp[655478] "expr temp" "maybe param" "maybe type" "temp"
      (655481 'move' call_tmp[655478](424960 call _cond_invalid tmp[424947]))
      if call_tmp[655478]
      {
        (424963 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565496] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565497] "maybe param" "temp"
      unknown call_tmp[655483] "expr temp" "maybe param" "maybe type" "temp"
      (655486 'move' call_tmp[655483](424948 call isTrue tmp[424947]))
      (565502 'move' tmp[565497](565500 call _cond_test call_tmp[655483]))
      if tmp[565497]
      {
        unknown tmp[565504] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655490] "expr temp" "maybe param" "maybe type" "temp"
        (655493 'move' call_tmp[655490](125538 call stridable _mt[243] this[126288]))
        (565506 'move' tmp[565504](424951 call isTrue call_tmp[655490]))
        (565511 'move' tmp[565496](565508 '_paramFoldLogical' tmp[565497] tmp[565504]))
      }
      {
        (565516 'move' tmp[565496](565513 '_paramFoldLogical' tmp[565497] 0))
      }
      unknown call_tmp[655495] "expr temp" "maybe param" "maybe type" "temp"
      (655498 'move' call_tmp[655495](125703 call _cond_test tmp[565496]))
      if call_tmp[655495]
      {
        unknown call_tmp[655502] "maybe param" "maybe type" "temp"
        (655505 'move' call_tmp[655502](125548 call(125544 call (partial) getIndices _mt[243] this[126288])))
        const inds[125549] "dead at end of block" "const" "insert auto destroy"
        (542903 'init var' inds[125549] call_tmp[655502])
        (125552 'end of statement')
        unknown unstridableInds[125566] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655509] "expr temp" "maybe param" "maybe type" "temp"
        (655512 'move' call_tmp[655509](383552 call rank _mt[243] this[126288]))
        unknown call_tmp[655516] "expr temp" "maybe param" "maybe type" "temp"
        (655519 'move' call_tmp[655516](125557 call idxType _mt[243] tmpD[125441]))
        unknown call_tmp[655521] "expr temp" "maybe param" "maybe type" "temp"
        (655524 'move' call_tmp[655521](125563 call range[64316](?) call_tmp[655516](stridable = 0)))
        unknown call_tmp[655526] "expr temp" "maybe param" "maybe type" "temp"
        (655529 'move' call_tmp[655526](125564 call * call_tmp[655509] call_tmp[655521]))
        (542905 'default init var' unstridableInds[125566] call_tmp[655526])
        (125569 'end of statement' tmpD[125441])
        {
          unknown dim[125643] "dead at end of block" "insert auto destroy"
          (542907 'init var' dim[125643] 0)
          (479887 'end of statement')
          unknown tmp[125644] "maybe param" "temp"
          unknown call_tmp[655533] "expr temp" "maybe param" "maybe type" "temp"
          (655536 'move' call_tmp[655533](125572 call size _mt[243] inds[125549]))
          unknown call_tmp[655538] "expr temp" "maybe param" "maybe type" "temp"
          (655541 'move' call_tmp[655538](125576 call - call_tmp[655533] 1))
          (125656 'move' tmp[125644](125654 call chpl_compute_low_param_loop_bound 0 call_tmp[655538]))
          unknown tmp[125645] "maybe param" "temp"
          unknown call_tmp[655545] "expr temp" "maybe param" "maybe type" "temp"
          (655548 'move' call_tmp[655545](125663 call size _mt[243] inds[125549]))
          unknown call_tmp[655550] "expr temp" "maybe param" "maybe type" "temp"
          (655553 'move' call_tmp[655550](125661 call - call_tmp[655545] 1))
          (125669 'move' tmp[125645](125667 call chpl_compute_high_param_loop_bound 0 call_tmp[655550]))
          unknown tmp[125646] "maybe param" "temp"
          (125672 'move' tmp[125646] 1)
          ParamForLoop[125674]
          { dim[125643] tmp[125644] tmp[125645] tmp[125646]
            {
              unknown call_tmp[655555] "expr temp" "maybe param" "maybe type" "temp"
              (655558 'move' call_tmp[655555](125583 call inds[125549] dim[125643]))
              unknown call_tmp[655562] "expr temp" "maybe param" "maybe type" "temp"
              (655565 'move' call_tmp[655562](125584 call stride _mt[243] call_tmp[655555]))
              unknown call_tmp[655567] "expr temp" "maybe param" "maybe type" "temp"
              (655570 'move' call_tmp[655567](125588 call != call_tmp[655562] 1))
              unknown call_tmp[655572] "expr temp" "maybe param" "maybe type" "temp"
              (655575 'move' call_tmp[655572](125612 call _cond_test call_tmp[655567]))
              if call_tmp[655572]
              {
                (125610 call halt "non-stridable domain assigned non-unit stride in dimension " dim[125643])
                (479888 'end of statement' dim[125643])
              }
              unknown call_tmp[655577] "expr temp" "maybe param" "maybe type" "temp"
              (655580 'move' call_tmp[655577](125621 call unstridableInds[125566] dim[125643]))
              unknown call_tmp[655582] "expr temp" "maybe param" "maybe type" "temp"
              (655585 'move' call_tmp[655582](125625 call inds[125549] dim[125643]))
              unknown call_tmp[655591] "expr temp" "maybe param" "maybe type" "temp"
              (655594 'move' call_tmp[655591](125631 call idxType _mt[243] tmpD[125441]))
              unknown call_tmp[655596] "expr temp" "maybe param" "maybe type" "temp"
              (655599 'move' call_tmp[655596](125637 call range[64316](?) call_tmp[655591](stridable = 0)))
              unknown call_tmp[655601] "expr temp" "maybe param" "maybe type" "temp"
              (655604 'move' call_tmp[655601](125639 call(125626 call (partial) safeCast _mt[243] call_tmp[655582]) call_tmp[655596]))
              (125640 call = call_tmp[655577] call_tmp[655601])
              (479890 'end of statement' unstridableInds[125566] dim[125643] inds[125549] dim[125643] tmpD[125441])
            }
          }
          label _unused_continueLabel[125648]
          label _breakLabel[125647]
        }
        (125689 call(125684 call (partial) setIndices _mt[243] tmpD[125441]) unstridableInds[125566])
        (479896 'end of statement' tmpD[125441] unstridableInds[125566])
        (517325 'move' ret[517315](517324 'deref' tmpD[125441]))
        gotoReturn _end_safeCast[517313] _end_safeCast[517313]
        (479899 'end of statement' tmpD[125441])
      }
      {
        (125696 call = tmpD[125441] this[126288])
        (479901 'end of statement' tmpD[125441])
        (517330 'move' ret[517315](517329 'deref' tmpD[125441]))
        gotoReturn _end_safeCast[517313] _end_safeCast[517313]
        (479903 'end of statement' tmpD[125441])
      }
    }
    label _end_safeCast[517313]
    (517317 return ret[517315])
  }
  where {
    unknown tmp[424926] "maybe param" "temp"
    (424937 'move' tmp[424926](125433 call chpl__isRectangularDomType t[125425]))
    unknown call_tmp[655608] "expr temp" "maybe param" "maybe type" "temp"
    (655611 'move' call_tmp[655608](424939 call _cond_invalid tmp[424926]))
    if call_tmp[655608]
    {
      (424942 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565524] "maybe param" "temp"
    unknown call_tmp[655613] "expr temp" "maybe param" "maybe type" "temp"
    (655616 'move' call_tmp[655613](424927 call isTrue tmp[424926]))
    (565529 'move' tmp[565524](565527 call _cond_test call_tmp[655613]))
    if tmp[565524]
    {
      unknown tmp[565531] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655618] "expr temp" "maybe param" "maybe type" "temp"
      (655621 'move' call_tmp[655618](125437 call isRectangularDom this[126288]))
      (565533 'move' tmp[565531](424930 call isTrue call_tmp[655618]))
      (565538 'move' tmp[565523](565535 '_paramFoldLogical' tmp[565524] tmp[565531]))
    }
    {
      (565543 'move' tmp[565523](565540 '_paramFoldLogical' tmp[565524] 0))
    }
    (748270 call chpl_statementLevelSymbol tmp[565523])
  }
  function _domain[125902](?).targetLocales[125718](arg _mt[126294]:_MT[238], arg this[126292]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517336] "RVV" "temp"
    unknown call_tmp[655625] "expr temp" "maybe param" "maybe type" "temp"
    (655628 'move' call_tmp[655625](359617 call _value _mt[243] this[126292]))
    unknown call_tmp[655632] "expr temp" "maybe param" "maybe type" "temp"
    (655635 'move' call_tmp[655632](125725 call(125721 call (partial) dsiTargetLocales _mt[243] call_tmp[655625])))
    (517341 'move' ret[517336](517340 'deref' call_tmp[655632]))
    (517338 return ret[517336])
  }
  function _domain[125902](?).hasSingleLocalSubdomain[125733](arg _mt[126298]:_MT[238], arg this[126296]:_domain[125902](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517345] "RVV" "param" "temp"
    unknown call_tmp[655639] "expr temp" "maybe param" "maybe type" "temp"
    (655642 'move' call_tmp[655639](359621 call _value _mt[243] this[126296]))
    unknown call_tmp[655646] "expr temp" "maybe param" "maybe type" "temp"
    (655649 'move' call_tmp[655646](125742 call(125738 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655639])))
    (517350 'move' ret[517345](517349 'deref' call_tmp[655646]))
    (517347 return ret[517345])
  }
  function _domain[125902](?).localSubdomain[125756](arg _mt[126302]:_MT[238], arg this[126300]:_domain[125902](?), arg loc[125752]:locale[28] =
  (383569 call here[90435])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517354] "RVV" "temp"
    unknown call_tmp[655653] "expr temp" "maybe param" "maybe type" "temp"
    (655656 'move' call_tmp[655653](359625 call _value _mt[243] this[126300]))
    unknown call_tmp[655660] "expr temp" "maybe param" "maybe type" "temp"
    (655663 'move' call_tmp[655660](125763 call(125759 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655653])))
    unknown call_tmp[655665] "expr temp" "maybe param" "maybe type" "temp"
    (655668 'move' call_tmp[655665](125764 call ! call_tmp[655660]))
    unknown call_tmp[655670] "expr temp" "maybe param" "maybe type" "temp"
    (655673 'move' call_tmp[655670](125787 call _cond_test call_tmp[655665]))
    if call_tmp[655670]
    {
      (125785 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[655677] "expr temp" "maybe param" "maybe type" "temp"
    (655680 'move' call_tmp[655677](359629 call _value _mt[243] this[126300]))
    unknown call_tmp[655684] "expr temp" "maybe param" "maybe type" "temp"
    (655687 'move' call_tmp[655684](125801 call(125796 call (partial) dsiLocalSubdomain _mt[243] call_tmp[655677]) loc[125752]))
    (517359 'move' ret[517354](517358 'deref' call_tmp[655684]))
    (517356 return ret[517354])
  }
  function _domain[125902](?).localSubdomains[125814](arg _mt[126306]:_MT[238], arg this[126304]:_domain[125902](?), arg loc[125810]:locale[28] =
  (383572 call here[90435])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517363] "RVV" "temp"
    unknown call_tmp[655691] "expr temp" "maybe param" "maybe type" "temp"
    (655694 'move' call_tmp[655691](359633 call _value _mt[243] this[126304]))
    unknown call_tmp[655698] "expr temp" "maybe param" "maybe type" "temp"
    (655701 'move' call_tmp[655698](125821 call(125817 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655691])))
    unknown call_tmp[655703] "expr temp" "maybe param" "maybe type" "temp"
    (655706 'move' call_tmp[655703](125877 call _cond_test call_tmp[655698]))
    if call_tmp[655703]
    {
      unknown yret[517367] "YVV" "temp"
      unknown call_tmp[655710] "expr temp" "maybe param" "maybe type" "temp"
      (655713 'move' call_tmp[655710](125825 call(383575 call (partial) localSubdomain _mt[243] this[126304]) loc[125810]))
      (517370 'move' yret[517367](517369 'deref' call_tmp[655710]))
      (517372 yield yret[517367])
    }
    {
      {
        unknown _indexOfInterest[125842] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125843] "expr temp" "temp"
        unknown call_tmp[655717] "expr temp" "maybe param" "maybe type" "temp"
        (655720 'move' call_tmp[655717](359637 call _value _mt[243] this[126304]))
        unknown call_tmp[655724] "expr temp" "maybe param" "maybe type" "temp"
        (655727 'move' call_tmp[655724](125838 call(125833 call (partial) dsiLocalSubdomains _mt[243] call_tmp[655717]) loc[125810]))
        (125852 'move' _iterator[125843](125850 call _getIterator call_tmp[655724]))
        Defer
        {
          {
            (125869 call _freeIterator _iterator[125843])
          }
        }
        { scopeless type
          (125858 'move' _indexOfInterest[125842](125855 call iteratorIndex _iterator[125843]))
        }
        ForLoop[125844]
        {
          unknown d[125862] "index var" "insert auto destroy"
          (479911 'end of statement')
          (125864 'move' d[125862] _indexOfInterest[125842])
          (479912 'end of statement' d[125862])
          unknown yret[517374] "YVV" "temp"
          (517377 'move' yret[517374](517376 'deref' d[125862]))
          (517379 yield yret[517374])
          (479914 'end of statement' d[125862])
          label _continueLabel[125847]
          _indexOfInterest[125842]
          _iterator[125843]
        }
        label _breakLabel[125848]
      }
    }
    (517365 return ret[517363])
  }
  function _domain[125902](?).supportsAutoLocalAccess[125886](arg _mt[126310]:_MT[238], arg this[126308]:_domain[125902](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517383] "RVV" "param" "temp"
    unknown call_tmp[655731] "expr temp" "maybe param" "maybe type" "temp"
    (655734 'move' call_tmp[655731](359641 call _value _mt[243] this[126308]))
    unknown call_tmp[655738] "expr temp" "maybe param" "maybe type" "temp"
    (655741 'move' call_tmp[655738](125895 call(125891 call (partial) dsiSupportsAutoLocalAccess _mt[243] call_tmp[655731])))
    (517388 'move' ret[517383](517387 'deref' call_tmp[655738]))
    (517385 return ret[517383])
  }
  type _domain[125902](?) val _pid[119161]:int(64)[13] int(64)[13] unknown _instance[119165] "owned" val _unowned[119170]:bool[10] bool[10] forwarding ( )
  function _cast[126319](arg t[126316]:_domain[125902](?), arg d[126322]:_domain[125902](?)) : _unknown[51] "no doc"
  {
    unknown ret[517392] "RVV" "temp"
    const tmpD[126336] "dead at end of block" "const" "insert auto destroy"
    (542909 'default init var' tmpD[126336] t[126316])
    (126339 'end of statement')
    unknown call_tmp[655745] "expr temp" "maybe param" "maybe type" "temp"
    (655748 'move' call_tmp[655745](126342 call rank _mt[243] tmpD[126336]))
    unknown call_tmp[655752] "expr temp" "maybe param" "maybe type" "temp"
    (655755 'move' call_tmp[655752](126346 call rank _mt[243] d[126322]))
    unknown call_tmp[655757] "expr temp" "maybe param" "maybe type" "temp"
    (655760 'move' call_tmp[655757](126349 call != call_tmp[655745] call_tmp[655752]))
    unknown call_tmp[655762] "expr temp" "maybe param" "maybe type" "temp"
    (655765 'move' call_tmp[655762](126356 call _cond_test call_tmp[655757]))
    if call_tmp[655762]
    {
      (126354 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655769] "expr temp" "maybe param" "maybe type" "temp"
    (655772 'move' call_tmp[655769](126362 call idxType _mt[243] tmpD[126336]))
    unknown call_tmp[655776] "expr temp" "maybe param" "maybe type" "temp"
    (655779 'move' call_tmp[655776](126366 call idxType _mt[243] d[126322]))
    unknown call_tmp[655781] "expr temp" "maybe param" "maybe type" "temp"
    (655784 'move' call_tmp[655781](126369 call != call_tmp[655769] call_tmp[655776]))
    unknown call_tmp[655786] "expr temp" "maybe param" "maybe type" "temp"
    (655789 'move' call_tmp[655786](126376 call _cond_test call_tmp[655781]))
    if call_tmp[655786]
    {
      (126374 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655793] "expr temp" "maybe param" "maybe type" "temp"
    (655796 'move' call_tmp[655793](126382 call stridable _mt[243] tmpD[126336]))
    unknown call_tmp[655800] "expr temp" "maybe param" "maybe type" "temp"
    (655803 'move' call_tmp[655800](126386 call stridable _mt[243] d[126322]))
    unknown call_tmp[655805] "expr temp" "maybe param" "maybe type" "temp"
    (655808 'move' call_tmp[655805](126389 call == call_tmp[655793] call_tmp[655800]))
    unknown call_tmp[655810] "expr temp" "maybe param" "maybe type" "temp"
    (655813 'move' call_tmp[655810](126533 call _cond_test call_tmp[655805]))
    if call_tmp[655810]
    {
      (517397 'move' ret[517392](517396 'deref' d[126322]))
      gotoReturn _end__cast[517390] _end__cast[517390]
    }
    {
      unknown tmp[424989] "maybe param" "temp"
      unknown call_tmp[655817] "expr temp" "maybe param" "maybe type" "temp"
      (655820 'move' call_tmp[655817](126395 call stridable _mt[243] tmpD[126336]))
      (425000 'move' tmp[424989](126398 call ! call_tmp[655817]))
      unknown call_tmp[655822] "expr temp" "maybe param" "maybe type" "temp"
      (655825 'move' call_tmp[655822](425002 call _cond_invalid tmp[424989]))
      if call_tmp[655822]
      {
        (425005 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565551] "maybe param" "temp"
      unknown call_tmp[655827] "expr temp" "maybe param" "maybe type" "temp"
      (655830 'move' call_tmp[655827](424990 call isTrue tmp[424989]))
      (565556 'move' tmp[565551](565554 call _cond_test call_tmp[655827]))
      if tmp[565551]
      {
        unknown tmp[565558] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655834] "expr temp" "maybe param" "maybe type" "temp"
        (655837 'move' call_tmp[655834](126401 call stridable _mt[243] d[126322]))
        (565560 'move' tmp[565558](424993 call isTrue call_tmp[655834]))
        (565565 'move' tmp[565550](565562 '_paramFoldLogical' tmp[565551] tmp[565558]))
      }
      {
        (565570 'move' tmp[565550](565567 '_paramFoldLogical' tmp[565551] 0))
      }
      unknown call_tmp[655839] "expr temp" "maybe param" "maybe type" "temp"
      (655842 'move' call_tmp[655839](126529 call _cond_test tmp[565550]))
      if call_tmp[655839]
      {
        unknown call_tmp[655846] "maybe param" "maybe type" "temp"
        (655849 'move' call_tmp[655846](126411 call(126407 call (partial) getIndices _mt[243] d[126322])))
        unknown inds[126412] "dead at end of block" "insert auto destroy"
        (542911 'init var' inds[126412] call_tmp[655846])
        (126415 'end of statement')
        unknown unstridableInds[126432] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655853] "expr temp" "maybe param" "maybe type" "temp"
        (655856 'move' call_tmp[655853](126418 call rank _mt[243] d[126322]))
        unknown call_tmp[655860] "expr temp" "maybe param" "maybe type" "temp"
        (655863 'move' call_tmp[655860](126423 call idxType _mt[243] tmpD[126336]))
        unknown call_tmp[655865] "expr temp" "maybe param" "maybe type" "temp"
        (655868 'move' call_tmp[655865](126429 call range[64316](?) call_tmp[655860](stridable = 0)))
        unknown call_tmp[655870] "expr temp" "maybe param" "maybe type" "temp"
        (655873 'move' call_tmp[655870](126430 call * call_tmp[655853] call_tmp[655865]))
        (542913 'default init var' unstridableInds[126432] call_tmp[655870])
        (126435 'end of statement' tmpD[126336])
        {
          unknown i[126469] "dead at end of block" "insert auto destroy"
          (542915 'init var' i[126469] 0)
          (479922 'end of statement')
          unknown tmp[126470] "maybe param" "temp"
          unknown call_tmp[655877] "expr temp" "maybe param" "maybe type" "temp"
          (655880 'move' call_tmp[655877](126438 call rank _mt[243] tmpD[126336]))
          unknown call_tmp[655882] "expr temp" "maybe param" "maybe type" "temp"
          (655885 'move' call_tmp[655882](126442 call - call_tmp[655877] 1))
          (126482 'move' tmp[126470](126480 call chpl_compute_low_param_loop_bound 0 call_tmp[655882]))
          unknown tmp[126471] "maybe param" "temp"
          unknown call_tmp[655889] "expr temp" "maybe param" "maybe type" "temp"
          (655892 'move' call_tmp[655889](126489 call rank _mt[243] tmpD[126336]))
          unknown call_tmp[655894] "expr temp" "maybe param" "maybe type" "temp"
          (655897 'move' call_tmp[655894](126487 call - call_tmp[655889] 1))
          (126495 'move' tmp[126471](126493 call chpl_compute_high_param_loop_bound 0 call_tmp[655894]))
          unknown tmp[126472] "maybe param" "temp"
          (126498 'move' tmp[126472] 1)
          ParamForLoop[126500]
          { i[126469] tmp[126470] tmp[126471] tmp[126472]
            {
              unknown call_tmp[655899] "expr temp" "maybe param" "maybe type" "temp"
              (655902 'move' call_tmp[655899](126449 call unstridableInds[126432] i[126469]))
              unknown call_tmp[655906] "expr temp" "maybe param" "maybe type" "temp"
              (655909 'move' call_tmp[655906](126456 call idxType _mt[243] tmpD[126336]))
              unknown call_tmp[655911] "expr temp" "maybe param" "maybe type" "temp"
              (655914 'move' call_tmp[655911](126462 call range[64316](?) call_tmp[655906](stridable = 0)))
              unknown call_tmp[655916] "expr temp" "maybe param" "maybe type" "temp"
              (655919 'move' call_tmp[655916](126453 call inds[126412] i[126469]))
              unknown call_tmp[655921] "expr temp" "maybe param" "maybe type" "temp"
              (655924 'move' call_tmp[655921](126463 call _cast call_tmp[655911] call_tmp[655916]))
              (126465 call = call_tmp[655899] call_tmp[655921])
              (479923 'end of statement' unstridableInds[126432] i[126469] tmpD[126336] inds[126412] i[126469])
            }
          }
          label _unused_continueLabel[126474]
          label _breakLabel[126473]
        }
        (126515 call(126510 call (partial) setIndices _mt[243] tmpD[126336]) unstridableInds[126432])
        (479929 'end of statement' tmpD[126336] unstridableInds[126432])
        (517402 'move' ret[517392](517401 'deref' tmpD[126336]))
        gotoReturn _end__cast[517390] _end__cast[517390]
        (479932 'end of statement' tmpD[126336])
      }
      {
        (126522 call = tmpD[126336] d[126322])
        (479934 'end of statement' tmpD[126336])
        (517407 'move' ret[517392](517406 'deref' tmpD[126336]))
        gotoReturn _end__cast[517390] _end__cast[517390]
        (479936 'end of statement' tmpD[126336])
      }
    }
    label _end__cast[517390]
    (517394 return ret[517392])
  }
  where {
    unknown tmp[424968] "maybe param" "temp"
    (424979 'move' tmp[424968](126328 call chpl__isRectangularDomType t[126316]))
    unknown call_tmp[655928] "expr temp" "maybe param" "maybe type" "temp"
    (655931 'move' call_tmp[655928](424981 call _cond_invalid tmp[424968]))
    if call_tmp[655928]
    {
      (424984 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565577] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565578] "maybe param" "temp"
    unknown call_tmp[655933] "expr temp" "maybe param" "maybe type" "temp"
    (655936 'move' call_tmp[655933](424969 call isTrue tmp[424968]))
    (565583 'move' tmp[565578](565581 call _cond_test call_tmp[655933]))
    if tmp[565578]
    {
      unknown tmp[565585] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655938] "expr temp" "maybe param" "maybe type" "temp"
      (655941 'move' call_tmp[655938](126332 call isRectangularDom d[126322]))
      (565587 'move' tmp[565585](424972 call isTrue call_tmp[655938]))
      (565592 'move' tmp[565577](565589 '_paramFoldLogical' tmp[565578] tmp[565585]))
    }
    {
      (565597 'move' tmp[565577](565594 '_paramFoldLogical' tmp[565578] 0))
    }
    (748272 call chpl_statementLevelSymbol tmp[565577])
  }
  function _cast[126548](arg t[126545]:string[26], arg x[126551]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517413] "RVV" "temp"
    unknown call_tmp[655943] "expr temp" "maybe param" "maybe type" "temp"
    (655946 'move' call_tmp[655943](126561 call stringify x[126551]))
    (517418 'move' ret[517413](517417 'deref' call_tmp[655943]))
    (517415 return ret[517413])
    (355120 'used modules list'(126555 'use' IO[230891]))
  }
  function chpl_countDomHelp[126570](arg dom[126568]:_any[178](?), arg counts[126572]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517422] "RVV" "temp"
    unknown call_tmp[655950] "maybe param" "maybe type" "temp"
    (655953 'move' call_tmp[655950](126579 call(126575 call (partial) dims _mt[243] dom[126568])))
    unknown ranges[126580] "dead at end of block" "insert auto destroy"
    (542917 'init var' ranges[126580] call_tmp[655950])
    (126583 'end of statement')
    {
      unknown i[126612] "dead at end of block" "insert auto destroy"
      (542919 'init var' i[126612] 0)
      (479939 'end of statement')
      unknown tmp[126613] "maybe param" "temp"
      unknown call_tmp[655957] "expr temp" "maybe param" "maybe type" "temp"
      (655960 'move' call_tmp[655957](126587 call rank _mt[243] dom[126568]))
      unknown call_tmp[655962] "expr temp" "maybe param" "maybe type" "temp"
      (655965 'move' call_tmp[655962](126591 call - call_tmp[655957] 1))
      (126625 'move' tmp[126613](126623 call chpl_compute_low_param_loop_bound 0 call_tmp[655962]))
      unknown tmp[126614] "maybe param" "temp"
      unknown call_tmp[655969] "expr temp" "maybe param" "maybe type" "temp"
      (655972 'move' call_tmp[655969](126632 call rank _mt[243] dom[126568]))
      unknown call_tmp[655974] "expr temp" "maybe param" "maybe type" "temp"
      (655977 'move' call_tmp[655974](126630 call - call_tmp[655969] 1))
      (126638 'move' tmp[126614](126636 call chpl_compute_high_param_loop_bound 0 call_tmp[655974]))
      unknown tmp[126615] "maybe param" "temp"
      (126641 'move' tmp[126615] 1)
      ParamForLoop[126643]
      { i[126612] tmp[126613] tmp[126614] tmp[126615]
        unknown call_tmp[655979] "expr temp" "maybe param" "maybe type" "temp"
        (655982 'move' call_tmp[655979](126598 call ranges[126580] i[126612]))
        unknown call_tmp[655984] "expr temp" "maybe param" "maybe type" "temp"
        (655987 'move' call_tmp[655984](126602 call ranges[126580] i[126612]))
        unknown call_tmp[655989] "expr temp" "maybe param" "maybe type" "temp"
        (655992 'move' call_tmp[655989](126606 call counts[126572] i[126612]))
        unknown call_tmp[655994] "expr temp" "maybe param" "maybe type" "temp"
        (655997 'move' call_tmp[655994](126607 call # call_tmp[655984] call_tmp[655989]))
        (126609 call = call_tmp[655979] call_tmp[655994])
        (479940 'end of statement' ranges[126580] i[126612] ranges[126580] i[126612] i[126612])
      }
      label _unused_continueLabel[126617]
      label _breakLabel[126616]
    }
    unknown call_tmp[655999] "expr temp" "maybe param" "maybe type" "temp"
    (656002 'move' call_tmp[655999](126656 call dom[126568](126654 'expand_tuple' ranges[126580])))
    (517427 'move' ret[517422](517426 'deref' call_tmp[655999]))
    gotoReturn _end_chpl_countDomHelp[517420] _end_chpl_countDomHelp[517420]
    (479946 'end of statement' ranges[126580])
    label _end_chpl_countDomHelp[517420]
    (517424 return ret[517422])
  }
  function #[126667](arg dom[126664]:_domain[125902](?), arg counts[126670]:integral[199](?)) : _unknown[51]
  {
    unknown ret[517433] "RVV" "temp"
    unknown call_tmp[656004] "expr temp" "maybe param" "maybe type" "temp"
    (656007 'move' call_tmp[656004](126690 call _build_tuple counts[126670]))
    unknown call_tmp[656009] "expr temp" "maybe param" "maybe type" "temp"
    (656012 'move' call_tmp[656009](126692 call chpl_countDomHelp dom[126664] call_tmp[656004]))
    (517438 'move' ret[517433](517437 'deref' call_tmp[656009]))
    (517435 return ret[517433])
  }
  where {
    unknown tmp[425010] "maybe param" "temp"
    (425021 'move' tmp[425010](126676 call isRectangularDom dom[126664]))
    unknown call_tmp[656014] "expr temp" "maybe param" "maybe type" "temp"
    (656017 'move' call_tmp[656014](425023 call _cond_invalid tmp[425010]))
    if call_tmp[656014]
    {
      (425026 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565604] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565605] "maybe param" "temp"
    unknown call_tmp[656019] "expr temp" "maybe param" "maybe type" "temp"
    (656022 'move' call_tmp[656019](425011 call isTrue tmp[425010]))
    (565610 'move' tmp[565605](565608 call _cond_test call_tmp[656019]))
    if tmp[565605]
    {
      unknown tmp[565612] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656026] "expr temp" "maybe param" "maybe type" "temp"
      (656029 'move' call_tmp[656026](126678 call rank _mt[243] dom[126664]))
      unknown call_tmp[656031] "expr temp" "maybe param" "maybe type" "temp"
      (656034 'move' call_tmp[656031](126682 call == call_tmp[656026] 1))
      (565614 'move' tmp[565612](425014 call isTrue call_tmp[656031]))
      (565619 'move' tmp[565604](565616 '_paramFoldLogical' tmp[565605] tmp[565612]))
    }
    {
      (565624 'move' tmp[565604](565621 '_paramFoldLogical' tmp[565605] 0))
    }
    (748274 call chpl_statementLevelSymbol tmp[565604])
  }
  function #[126705](arg dom[126702]:_domain[125902](?), arg counts[126707]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517442] "RVV" "temp"
    unknown call_tmp[656038] "expr temp" "maybe param" "maybe type" "temp"
    (656041 'move' call_tmp[656038](126720 call size _mt[243] counts[126707]))
    unknown call_tmp[656045] "expr temp" "maybe param" "maybe type" "temp"
    (656048 'move' call_tmp[656045](126724 call rank _mt[243] dom[126702]))
    unknown call_tmp[656050] "expr temp" "maybe param" "maybe type" "temp"
    (656053 'move' call_tmp[656050](126727 call != call_tmp[656038] call_tmp[656045]))
    unknown call_tmp[656055] "expr temp" "maybe param" "maybe type" "temp"
    (656058 'move' call_tmp[656055](126750 call _cond_test call_tmp[656050]))
    if call_tmp[656055]
    {
      (126748 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    unknown call_tmp[656060] "expr temp" "maybe param" "maybe type" "temp"
    (656063 'move' call_tmp[656060](126760 call chpl_countDomHelp dom[126702] counts[126707]))
    (517447 'move' ret[517442](517446 'deref' call_tmp[656060]))
    (517444 return ret[517442])
  }
  where {
    unknown tmp[425031] "maybe param" "temp"
    (425042 'move' tmp[425031](126712 call isRectangularDom dom[126702]))
    unknown call_tmp[656065] "expr temp" "maybe param" "maybe type" "temp"
    (656068 'move' call_tmp[656065](425044 call _cond_invalid tmp[425031]))
    if call_tmp[656065]
    {
      (425047 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565631] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565632] "maybe param" "temp"
    unknown call_tmp[656070] "expr temp" "maybe param" "maybe type" "temp"
    (656073 'move' call_tmp[656070](425032 call isTrue tmp[425031]))
    (565637 'move' tmp[565632](565635 call _cond_test call_tmp[656070]))
    if tmp[565632]
    {
      unknown tmp[565639] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656075] "expr temp" "maybe param" "maybe type" "temp"
      (656078 'move' call_tmp[656075](126716 call isTuple counts[126707]))
      (565641 'move' tmp[565639](425035 call isTrue call_tmp[656075]))
      (565646 'move' tmp[565631](565643 '_paramFoldLogical' tmp[565632] tmp[565639]))
    }
    {
      (565651 'move' tmp[565631](565648 '_paramFoldLogical' tmp[565632] 0))
    }
    (748276 call chpl_statementLevelSymbol tmp[565631])
  }
  function #[126774](arg arr[126771]:_array[133588](?), arg counts[126777]:integral[199](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517451] "RVV" "temp"
    unknown call_tmp[656082] "expr temp" "maybe param" "maybe type" "temp"
    (656085 'move' call_tmp[656082](126795 call _dom _mt[243] arr[126771]))
    unknown call_tmp[656087] "expr temp" "maybe param" "maybe type" "temp"
    (656090 'move' call_tmp[656087](126799 call # call_tmp[656082] counts[126777]))
    unknown call_tmp[656092] "expr temp" "maybe param" "maybe type" "temp"
    (656095 'move' call_tmp[656092](126802 call arr[126771] call_tmp[656087]))
    (517456 'move' ret[517451](517455 'deref' call_tmp[656092]))
    (517453 return ret[517451])
  }
  where {
    unknown tmp[425052] "maybe param" "temp"
    (425063 'move' tmp[425052](126783 call isRectangularArr arr[126771]))
    unknown call_tmp[656097] "expr temp" "maybe param" "maybe type" "temp"
    (656100 'move' call_tmp[656097](425065 call _cond_invalid tmp[425052]))
    if call_tmp[656097]
    {
      (425068 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565658] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565659] "maybe param" "temp"
    unknown call_tmp[656102] "expr temp" "maybe param" "maybe type" "temp"
    (656105 'move' call_tmp[656102](425053 call isTrue tmp[425052]))
    (565664 'move' tmp[565659](565662 call _cond_test call_tmp[656102]))
    if tmp[565659]
    {
      unknown tmp[565666] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656109] "expr temp" "maybe param" "maybe type" "temp"
      (656112 'move' call_tmp[656109](126785 call rank _mt[243] arr[126771]))
      unknown call_tmp[656114] "expr temp" "maybe param" "maybe type" "temp"
      (656117 'move' call_tmp[656114](126789 call == call_tmp[656109] 1))
      (565668 'move' tmp[565666](425056 call isTrue call_tmp[656114]))
      (565673 'move' tmp[565658](565670 '_paramFoldLogical' tmp[565659] tmp[565666]))
    }
    {
      (565678 'move' tmp[565658](565675 '_paramFoldLogical' tmp[565659] 0))
    }
    (748278 call chpl_statementLevelSymbol tmp[565658])
  }
  function #[126817](arg arr[126814]:_array[133588](?), arg counts[126819]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517460] "RVV" "temp"
    unknown call_tmp[656121] "expr temp" "maybe param" "maybe type" "temp"
    (656124 'move' call_tmp[656121](126832 call size _mt[243] counts[126819]))
    unknown call_tmp[656128] "expr temp" "maybe param" "maybe type" "temp"
    (656131 'move' call_tmp[656128](126836 call rank _mt[243] arr[126814]))
    unknown call_tmp[656133] "expr temp" "maybe param" "maybe type" "temp"
    (656136 'move' call_tmp[656133](126839 call != call_tmp[656121] call_tmp[656128]))
    unknown call_tmp[656138] "expr temp" "maybe param" "maybe type" "temp"
    (656141 'move' call_tmp[656138](126862 call _cond_test call_tmp[656133]))
    if call_tmp[656138]
    {
      (126860 call compilerError "the domain and array arguments of # must have the same rank")
    }
    unknown call_tmp[656145] "expr temp" "maybe param" "maybe type" "temp"
    (656148 'move' call_tmp[656145](126870 call _dom _mt[243] arr[126814]))
    unknown call_tmp[656150] "expr temp" "maybe param" "maybe type" "temp"
    (656153 'move' call_tmp[656150](126874 call # call_tmp[656145] counts[126819]))
    unknown call_tmp[656155] "expr temp" "maybe param" "maybe type" "temp"
    (656158 'move' call_tmp[656155](126877 call arr[126814] call_tmp[656150]))
    (517465 'move' ret[517460](517464 'deref' call_tmp[656155]))
    (517462 return ret[517460])
  }
  where {
    unknown tmp[425073] "maybe param" "temp"
    (425084 'move' tmp[425073](126824 call isRectangularArr arr[126814]))
    unknown call_tmp[656160] "expr temp" "maybe param" "maybe type" "temp"
    (656163 'move' call_tmp[656160](425086 call _cond_invalid tmp[425073]))
    if call_tmp[656160]
    {
      (425089 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565685] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565686] "maybe param" "temp"
    unknown call_tmp[656165] "expr temp" "maybe param" "maybe type" "temp"
    (656168 'move' call_tmp[656165](425074 call isTrue tmp[425073]))
    (565691 'move' tmp[565686](565689 call _cond_test call_tmp[656165]))
    if tmp[565686]
    {
      unknown tmp[565693] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656170] "expr temp" "maybe param" "maybe type" "temp"
      (656173 'move' call_tmp[656170](126828 call isTuple counts[126819]))
      (565695 'move' tmp[565693](425077 call isTrue call_tmp[656170]))
      (565700 'move' tmp[565685](565697 '_paramFoldLogical' tmp[565686] tmp[565693]))
    }
    {
      (565705 'move' tmp[565685](565702 '_paramFoldLogical' tmp[565686] 0))
    }
    (748280 call chpl_statementLevelSymbol tmp[565685])
  }
  function +[126889](arg d[126886]:_domain[125902](?), arg i[126895] :
  (126893 call chpl__buildIndexType d[126886])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656175] "expr temp" "maybe param" "maybe type" "temp"
    (656178 'move' call_tmp[656175](126901 call isRectangularDom d[126886]))
    unknown call_tmp[656180] "expr temp" "maybe param" "maybe type" "temp"
    (656183 'move' call_tmp[656180](126944 call _cond_test call_tmp[656175]))
    if call_tmp[656180]
    {
      (126921 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126942 call compilerError "Cannot add indices to this domain type")
    }
    (517467 return _void[55])
  }
  function +[126957](arg i[126955]:_any[178](?), arg d[126960]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656185] "expr temp" "maybe param" "maybe type" "temp"
    (656188 'move' call_tmp[656185](126975 call isRectangularDom d[126960]))
    unknown call_tmp[656190] "expr temp" "maybe param" "maybe type" "temp"
    (656193 'move' call_tmp[656190](126986 call _cond_test call_tmp[656185]))
    if call_tmp[656190]
    {
      (126979 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126984 call compilerError "Cannot add indices to this domain type")
    }
    (517469 return _void[55])
  }
  where {
    unknown call_tmp[656195] "expr temp" "maybe param" "maybe type" "temp"
    (656198 'move' call_tmp[656195](126969 call chpl__buildIndexType d[126960]))
    unknown call_tmp[656200] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656203 'move' call_tmp[656200](126965 'typeof' i[126955]))
    (354294 'is_subtype' call_tmp[656195] call_tmp[656200])
  }
  function +[127002](arg d[126999]:_domain[125902](?), arg i[127008] :
  (127006 call chpl__buildIndexType d[126999])) : _unknown[51]
  {
    unknown ret[517473] "RVV" "temp"
    (127021 call(127016 call (partial) add _mt[243] d[126999]) i[127008])
    (479958 'end of statement')
    (517478 'move' ret[517473](517477 'deref' d[126999]))
    (517475 return ret[517473])
  }
  where {
    (127014 call isIrregularDom d[126999])
  }
  function +[127034](arg i[127032]:_any[178](?), arg d[127037]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517482] "RVV" "temp"
    (127061 call(127056 call (partial) add _mt[243] d[127037]) i[127032])
    (479960 'end of statement')
    (517487 'move' ret[517482](517486 'deref' d[127037]))
    (517484 return ret[517482])
  }
  where {
    unknown tmp[425094] "maybe param" "temp"
    unknown call_tmp[656209] "expr temp" "maybe param" "maybe type" "temp"
    (656212 'move' call_tmp[656209](127046 call chpl__buildIndexType d[127037]))
    unknown call_tmp[656214] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656217 'move' call_tmp[656214](127042 'typeof' i[127032]))
    (425105 'move' tmp[425094](354295 'is_subtype' call_tmp[656209] call_tmp[656214]))
    unknown call_tmp[656219] "expr temp" "maybe param" "maybe type" "temp"
    (656222 'move' call_tmp[656219](425107 call _cond_invalid tmp[425094]))
    if call_tmp[656219]
    {
      (425110 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565712] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565713] "maybe param" "temp"
    unknown call_tmp[656224] "expr temp" "maybe param" "maybe type" "temp"
    (656227 'move' call_tmp[656224](425095 call isTrue tmp[425094]))
    (565718 'move' tmp[565713](565716 call _cond_test call_tmp[656224]))
    if tmp[565713]
    {
      unknown tmp[565720] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656229] "expr temp" "maybe param" "maybe type" "temp"
      (656232 'move' call_tmp[656229](127052 call isIrregularDom d[127037]))
      (565722 'move' tmp[565720](425098 call isTrue call_tmp[656229]))
      (565727 'move' tmp[565712](565724 '_paramFoldLogical' tmp[565713] tmp[565720]))
    }
    {
      (565732 'move' tmp[565712](565729 '_paramFoldLogical' tmp[565713] 0))
    }
    (748282 call chpl_statementLevelSymbol tmp[565712])
  }
  function +[127076](arg d1[127073]:_domain[125902](?), arg d2[127079]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517491] "RVV" "temp"
    unknown d3[127102] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656234] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656237 'move' call_tmp[656234](127101 'typeof' d1[127073]))
    (542921 'default init var' d3[127102] call_tmp[656234])
    (127105 'end of statement')
    {
      unknown _indexOfInterest[127117] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127118] "expr temp" "temp"
      (127127 'move' _iterator[127118](127125 call _getIterator d1[127073]))
      Defer
      {
        {
          (127143 call _freeIterator _iterator[127118])
        }
      }
      { scopeless type
        (127132 'move' _indexOfInterest[127117](127129 call iteratorIndex _iterator[127118]))
      }
      ForLoop[127119]
      {
        unknown e[127136] "index var" "insert auto destroy"
        (479963 'end of statement')
        (127138 'move' e[127136] _indexOfInterest[127117])
        (479964 'end of statement' e[127136])
        (127115 call(127110 call (partial) add _mt[243] d3[127102]) e[127136])
        (479966 'end of statement' d3[127102] e[127136])
        label _continueLabel[127122]
        _indexOfInterest[127117]
        _iterator[127118]
      }
      label _breakLabel[127123]
    }
    {
      unknown _indexOfInterest[127160] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127161] "expr temp" "temp"
      (127170 'move' _iterator[127161](127168 call _getIterator d2[127079]))
      Defer
      {
        {
          (127186 call _freeIterator _iterator[127161])
        }
      }
      { scopeless type
        (127175 'move' _indexOfInterest[127160](127172 call iteratorIndex _iterator[127161]))
      }
      ForLoop[127162]
      {
        unknown e[127179] "index var" "insert auto destroy"
        (479970 'end of statement')
        (127181 'move' e[127179] _indexOfInterest[127160])
        (479971 'end of statement' e[127179])
        (127158 call(127153 call (partial) add _mt[243] d3[127102]) e[127179])
        (479973 'end of statement' d3[127102] e[127179])
        label _continueLabel[127165]
        _indexOfInterest[127160]
        _iterator[127161]
      }
      label _breakLabel[127166]
    }
    (517496 'move' ret[517491](517495 'deref' d3[127102]))
    gotoReturn _end_+[517489] _end_+[517489]
    (479976 'end of statement' d3[127102])
    label _end_+[517489]
    (517493 return ret[517491])
  }
  where {
    unknown tmp[425115] "maybe param" "temp"
    unknown call_tmp[656243] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656246 'move' call_tmp[656243](127083 'typeof' d1[127073]))
    unknown call_tmp[656248] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656251 'move' call_tmp[656248](127085 'typeof' d2[127079]))
    (425126 'move' tmp[425115](127086 call == call_tmp[656243] call_tmp[656248]))
    unknown call_tmp[656253] "expr temp" "maybe param" "maybe type" "temp"
    (656256 'move' call_tmp[656253](425128 call _cond_invalid tmp[425115]))
    if call_tmp[656253]
    {
      (425131 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565766] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565767] "maybe param" "temp"
    unknown call_tmp[656258] "expr temp" "maybe param" "maybe type" "temp"
    (656261 'move' call_tmp[656258](425116 call isTrue tmp[425115]))
    (565772 'move' tmp[565767](565770 call _cond_test call_tmp[656258]))
    if tmp[565767]
    {
      unknown tmp[425136] "maybe param" "temp"
      (425147 'move' tmp[425136](127091 call isIrregularDom d1[127073]))
      unknown call_tmp[656263] "expr temp" "maybe param" "maybe type" "temp"
      (656266 'move' call_tmp[656263](425149 call _cond_invalid tmp[425136]))
      if call_tmp[656263]
      {
        (425152 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565739] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565740] "maybe param" "temp"
      unknown call_tmp[656268] "expr temp" "maybe param" "maybe type" "temp"
      (656271 'move' call_tmp[656268](425137 call isTrue tmp[425136]))
      (565745 'move' tmp[565740](565743 call _cond_test call_tmp[656268]))
      if tmp[565740]
      {
        unknown tmp[565747] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[656273] "expr temp" "maybe param" "maybe type" "temp"
        (656276 'move' call_tmp[656273](127095 call isIrregularDom d2[127079]))
        (565749 'move' tmp[565747](425140 call isTrue call_tmp[656273]))
        (565754 'move' tmp[565739](565751 '_paramFoldLogical' tmp[565740] tmp[565747]))
      }
      {
        (565759 'move' tmp[565739](565756 '_paramFoldLogical' tmp[565740] 0))
      }
      unknown tmp[565774] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (565776 'move' tmp[565774](425119 call isTrue tmp[565739]))
      (565781 'move' tmp[565766](565778 '_paramFoldLogical' tmp[565767] tmp[565774]))
    }
    {
      (565786 'move' tmp[565766](565783 '_paramFoldLogical' tmp[565767] 0))
    }
    (748284 call chpl_statementLevelSymbol tmp[565766])
  }
  function +[127205](arg d1[127202]:_domain[125902](?), arg d2[127208]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425157] "maybe param" "temp"
    (425168 'move' tmp[425157](127214 call isRectangularDom d1[127202]))
    unknown call_tmp[656278] "expr temp" "maybe param" "maybe type" "temp"
    (656281 'move' call_tmp[656278](425170 call _cond_invalid tmp[425157]))
    if call_tmp[656278]
    {
      (425173 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565793] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565794] "maybe param" "temp"
    unknown call_tmp[656283] "expr temp" "maybe param" "maybe type" "temp"
    (656286 'move' call_tmp[656283](425158 call isTrue tmp[425157]))
    (565799 'move' tmp[565794](565797 call _cond_test call_tmp[656283]))
    if tmp[565794]
    {
      (565804 'move' tmp[565793](565801 '_paramFoldLogical' tmp[565794] 1))
    }
    {
      unknown tmp[565806] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656288] "expr temp" "maybe param" "maybe type" "temp"
      (656291 'move' call_tmp[656288](127218 call isRectangularDom d2[127208]))
      (565808 'move' tmp[565806](425162 call isTrue call_tmp[656288]))
      (565813 'move' tmp[565793](565810 '_paramFoldLogical' tmp[565794] tmp[565806]))
    }
    unknown call_tmp[656293] "expr temp" "maybe param" "maybe type" "temp"
    (656296 'move' call_tmp[656293](127231 call _cond_test tmp[565793]))
    if call_tmp[656293]
    {
      (127224 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127229 call compilerError "Cannot add indices to this domain type")
    }
    (517500 return _void[55])
  }
  function -[127246](arg d[127243]:_domain[125902](?), arg i[127252] :
  (127250 call chpl__buildIndexType d[127243])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656298] "expr temp" "maybe param" "maybe type" "temp"
    (656301 'move' call_tmp[656298](127258 call isRectangularDom d[127243]))
    unknown call_tmp[656303] "expr temp" "maybe param" "maybe type" "temp"
    (656306 'move' call_tmp[656303](127301 call _cond_test call_tmp[656298]))
    if call_tmp[656303]
    {
      (127278 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127299 call compilerError "Cannot remove indices from this domain type")
    }
    (517502 return _void[55])
  }
  function -[127316](arg d[127313]:_domain[125902](?), arg i[127322] :
  (127320 call chpl__buildIndexType d[127313])) : _unknown[51]
  {
    unknown ret[517506] "RVV" "temp"
    (127335 call(127330 call (partial) remove _mt[243] d[127313]) i[127322])
    (479983 'end of statement')
    (517511 'move' ret[517506](517510 'deref' d[127313]))
    (517508 return ret[517506])
  }
  where {
    (127328 call isIrregularDom d[127313])
  }
  function -[127350](arg d1[127347]:_domain[125902](?), arg d2[127353]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517515] "RVV" "temp"
    unknown d3[127370] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656310] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656313 'move' call_tmp[656310](127369 'typeof' d1[127347]))
    (542923 'default init var' d3[127370] call_tmp[656310])
    (127373 'end of statement')
    {
      unknown _indexOfInterest[127385] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127386] "expr temp" "temp"
      (127395 'move' _iterator[127386](127393 call _getIterator d1[127347]))
      Defer
      {
        {
          (127411 call _freeIterator _iterator[127386])
        }
      }
      { scopeless type
        (127400 'move' _indexOfInterest[127385](127397 call iteratorIndex _iterator[127386]))
      }
      ForLoop[127387]
      {
        unknown e[127404] "index var" "insert auto destroy"
        (479986 'end of statement')
        (127406 'move' e[127404] _indexOfInterest[127385])
        (479987 'end of statement' e[127404])
        (127383 call(127378 call (partial) add _mt[243] d3[127370]) e[127404])
        (479989 'end of statement' d3[127370] e[127404])
        label _continueLabel[127390]
        _indexOfInterest[127385]
        _iterator[127386]
      }
      label _breakLabel[127391]
    }
    {
      unknown _indexOfInterest[127428] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127429] "expr temp" "temp"
      (127438 'move' _iterator[127429](127436 call _getIterator d2[127353]))
      Defer
      {
        {
          (127454 call _freeIterator _iterator[127429])
        }
      }
      { scopeless type
        (127443 'move' _indexOfInterest[127428](127440 call iteratorIndex _iterator[127429]))
      }
      ForLoop[127430]
      {
        unknown e[127447] "index var" "insert auto destroy"
        (479993 'end of statement')
        (127449 'move' e[127447] _indexOfInterest[127428])
        (479994 'end of statement' e[127447])
        (127426 call(127421 call (partial) remove _mt[243] d3[127370]) e[127447])
        (479996 'end of statement' d3[127370] e[127447])
        label _continueLabel[127433]
        _indexOfInterest[127428]
        _iterator[127429]
      }
      label _breakLabel[127434]
    }
    (517520 'move' ret[517515](517519 'deref' d3[127370]))
    gotoReturn _end_-[517513] _end_-[517513]
    (479999 'end of statement' d3[127370])
    label _end_-[517513]
    (517517 return ret[517515])
  }
  where {
    unknown tmp[425178] "maybe param" "temp"
    unknown call_tmp[656319] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656322 'move' call_tmp[656319](127357 'typeof' d1[127347]))
    unknown call_tmp[656324] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656327 'move' call_tmp[656324](127359 'typeof' d2[127353]))
    (425189 'move' tmp[425178](127360 call == call_tmp[656319] call_tmp[656324]))
    unknown call_tmp[656329] "expr temp" "maybe param" "maybe type" "temp"
    (656332 'move' call_tmp[656329](425191 call _cond_invalid tmp[425178]))
    if call_tmp[656329]
    {
      (425194 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565820] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565821] "maybe param" "temp"
    unknown call_tmp[656334] "expr temp" "maybe param" "maybe type" "temp"
    (656337 'move' call_tmp[656334](425179 call isTrue tmp[425178]))
    (565826 'move' tmp[565821](565824 call _cond_test call_tmp[656334]))
    if tmp[565821]
    {
      unknown tmp[565828] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656339] "expr temp" "maybe param" "maybe type" "temp"
      (656342 'move' call_tmp[656339](127365 call isSparseDom d1[127347]))
      (565830 'move' tmp[565828](425182 call isTrue call_tmp[656339]))
      (565835 'move' tmp[565820](565832 '_paramFoldLogical' tmp[565821] tmp[565828]))
    }
    {
      (565840 'move' tmp[565820](565837 '_paramFoldLogical' tmp[565821] 0))
    }
    (748286 call chpl_statementLevelSymbol tmp[565820])
  }
  function -[127473](arg d1[127470]:_domain[125902](?), arg d2[127476]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425199] "maybe param" "temp"
    (425210 'move' tmp[425199](127482 call isRectangularDom d1[127470]))
    unknown call_tmp[656344] "expr temp" "maybe param" "maybe type" "temp"
    (656347 'move' call_tmp[656344](425212 call _cond_invalid tmp[425199]))
    if call_tmp[656344]
    {
      (425215 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565847] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565848] "maybe param" "temp"
    unknown call_tmp[656349] "expr temp" "maybe param" "maybe type" "temp"
    (656352 'move' call_tmp[656349](425200 call isTrue tmp[425199]))
    (565853 'move' tmp[565848](565851 call _cond_test call_tmp[656349]))
    if tmp[565848]
    {
      (565858 'move' tmp[565847](565855 '_paramFoldLogical' tmp[565848] 1))
    }
    {
      unknown tmp[565860] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656354] "expr temp" "maybe param" "maybe type" "temp"
      (656357 'move' call_tmp[656354](127486 call isRectangularDom d2[127476]))
      (565862 'move' tmp[565860](425204 call isTrue call_tmp[656354]))
      (565867 'move' tmp[565847](565864 '_paramFoldLogical' tmp[565848] tmp[565860]))
    }
    unknown call_tmp[656359] "expr temp" "maybe param" "maybe type" "temp"
    (656362 'move' call_tmp[656359](127499 call _cond_test tmp[565847]))
    if call_tmp[656359]
    {
      (127492 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127497 call compilerError "Cannot remove indices from this domain type")
    }
    (517524 return _void[55])
  }
  function ==[127514](arg d1[127511]:_domain[125902](?), arg d2[127517]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517528] "RVV" "temp"
    unknown call_tmp[656366] "expr temp" "maybe param" "maybe type" "temp"
    (656369 'move' call_tmp[656366](127531 call _value _mt[243] d1[127511]))
    unknown call_tmp[656373] "expr temp" "maybe param" "maybe type" "temp"
    (656376 'move' call_tmp[656373](127534 call rank _mt[243] call_tmp[656366]))
    unknown call_tmp[656380] "expr temp" "maybe param" "maybe type" "temp"
    (656383 'move' call_tmp[656380](127538 call _value _mt[243] d2[127517]))
    unknown call_tmp[656387] "expr temp" "maybe param" "maybe type" "temp"
    (656390 'move' call_tmp[656387](127541 call rank _mt[243] call_tmp[656380]))
    unknown call_tmp[656392] "expr temp" "maybe param" "maybe type" "temp"
    (656395 'move' call_tmp[656392](127544 call != call_tmp[656373] call_tmp[656387]))
    unknown call_tmp[656397] "expr temp" "maybe param" "maybe type" "temp"
    (656400 'move' call_tmp[656397](127652 call _cond_test call_tmp[656392]))
    if call_tmp[656397]
    {
      (517533 'move' ret[517528](517532 'deref' 0))
      gotoReturn _end_==[517526] _end_==[517526]
    }
    {
      unknown call_tmp[656404] "expr temp" "maybe param" "maybe type" "temp"
      (656407 'move' call_tmp[656404](127551 call _value _mt[243] d1[127511]))
      unknown call_tmp[656411] "expr temp" "maybe param" "maybe type" "temp"
      (656414 'move' call_tmp[656411](127555 call _value _mt[243] d2[127517]))
      unknown call_tmp[656416] "expr temp" "maybe param" "maybe type" "temp"
      (656419 'move' call_tmp[656416](127558 call == call_tmp[656404] call_tmp[656411]))
      unknown call_tmp[656421] "expr temp" "maybe param" "maybe type" "temp"
      (656424 'move' call_tmp[656421](127648 call _cond_test call_tmp[656416]))
      if call_tmp[656421]
      {
        (517538 'move' ret[517528](517537 'deref' 1))
        gotoReturn _end_==[517526] _end_==[517526]
      }
      {
        {
          unknown i[127601] "dead at end of block" "insert auto destroy"
          (542925 'init var' i[127601] 0)
          (480006 'end of statement')
          unknown tmp[127602] "maybe param" "temp"
          unknown call_tmp[656428] "expr temp" "maybe param" "maybe type" "temp"
          (656431 'move' call_tmp[656428](127566 call _value _mt[243] d1[127511]))
          unknown call_tmp[656435] "expr temp" "maybe param" "maybe type" "temp"
          (656438 'move' call_tmp[656435](127569 call rank _mt[243] call_tmp[656428]))
          unknown call_tmp[656440] "expr temp" "maybe param" "maybe type" "temp"
          (656443 'move' call_tmp[656440](127573 call - call_tmp[656435] 1))
          (127614 'move' tmp[127602](127612 call chpl_compute_low_param_loop_bound 0 call_tmp[656440]))
          unknown tmp[127603] "maybe param" "temp"
          unknown call_tmp[656447] "expr temp" "maybe param" "maybe type" "temp"
          (656450 'move' call_tmp[656447](127623 call _value _mt[243] d1[127511]))
          unknown call_tmp[656454] "expr temp" "maybe param" "maybe type" "temp"
          (656457 'move' call_tmp[656454](127621 call rank _mt[243] call_tmp[656447]))
          unknown call_tmp[656459] "expr temp" "maybe param" "maybe type" "temp"
          (656462 'move' call_tmp[656459](127619 call - call_tmp[656454] 1))
          (127630 'move' tmp[127603](127628 call chpl_compute_high_param_loop_bound 0 call_tmp[656459]))
          unknown tmp[127604] "maybe param" "temp"
          (127633 'move' tmp[127604] 1)
          ParamForLoop[127635]
          { i[127601] tmp[127602] tmp[127603] tmp[127604]
            unknown call_tmp[656466] "expr temp" "maybe param" "maybe type" "temp"
            (656469 'move' call_tmp[656466](127583 call(127578 call (partial) dim _mt[243] d1[127511]) i[127601]))
            unknown call_tmp[656473] "expr temp" "maybe param" "maybe type" "temp"
            (656476 'move' call_tmp[656473](127590 call(127585 call (partial) dim _mt[243] d2[127517]) i[127601]))
            unknown call_tmp[656478] "expr temp" "maybe param" "maybe type" "temp"
            (656481 'move' call_tmp[656478](127591 call != call_tmp[656466] call_tmp[656473]))
            unknown call_tmp[656483] "expr temp" "maybe param" "maybe type" "temp"
            (656486 'move' call_tmp[656483](127596 call _cond_test call_tmp[656478]))
            if call_tmp[656483]
            {
              (517543 'move' ret[517528](517542 'deref' 0))
              gotoReturn _end_==[517526] _end_==[517526]
            }
          }
          label _unused_continueLabel[127606]
          label _breakLabel[127605]
        }
        (517548 'move' ret[517528](517547 'deref' 1))
        gotoReturn _end_==[517526] _end_==[517526]
      }
    }
    label _end_==[517526]
    (517530 return ret[517528])
  }
  where {
    unknown tmp[425220] "maybe param" "temp"
    (425231 'move' tmp[425220](127523 call isRectangularDom d1[127511]))
    unknown call_tmp[656488] "expr temp" "maybe param" "maybe type" "temp"
    (656491 'move' call_tmp[656488](425233 call _cond_invalid tmp[425220]))
    if call_tmp[656488]
    {
      (425236 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565874] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565875] "maybe param" "temp"
    unknown call_tmp[656493] "expr temp" "maybe param" "maybe type" "temp"
    (656496 'move' call_tmp[656493](425221 call isTrue tmp[425220]))
    (565880 'move' tmp[565875](565878 call _cond_test call_tmp[656493]))
    if tmp[565875]
    {
      unknown tmp[565882] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656498] "expr temp" "maybe param" "maybe type" "temp"
      (656501 'move' call_tmp[656498](127527 call isRectangularDom d2[127517]))
      (565884 'move' tmp[565882](425224 call isTrue call_tmp[656498]))
      (565889 'move' tmp[565874](565886 '_paramFoldLogical' tmp[565875] tmp[565882]))
    }
    {
      (565894 'move' tmp[565874](565891 '_paramFoldLogical' tmp[565875] 0))
    }
    (748288 call chpl_statementLevelSymbol tmp[565874])
  }
  function !=[127667](arg d1[127664]:_domain[125902](?), arg d2[127670]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517554] "RVV" "temp"
    unknown call_tmp[656505] "expr temp" "maybe param" "maybe type" "temp"
    (656508 'move' call_tmp[656505](127684 call _value _mt[243] d1[127664]))
    unknown call_tmp[656512] "expr temp" "maybe param" "maybe type" "temp"
    (656515 'move' call_tmp[656512](127687 call rank _mt[243] call_tmp[656505]))
    unknown call_tmp[656519] "expr temp" "maybe param" "maybe type" "temp"
    (656522 'move' call_tmp[656519](127691 call _value _mt[243] d2[127670]))
    unknown call_tmp[656526] "expr temp" "maybe param" "maybe type" "temp"
    (656529 'move' call_tmp[656526](127694 call rank _mt[243] call_tmp[656519]))
    unknown call_tmp[656531] "expr temp" "maybe param" "maybe type" "temp"
    (656534 'move' call_tmp[656531](127697 call != call_tmp[656512] call_tmp[656526]))
    unknown call_tmp[656536] "expr temp" "maybe param" "maybe type" "temp"
    (656539 'move' call_tmp[656536](127805 call _cond_test call_tmp[656531]))
    if call_tmp[656536]
    {
      (517559 'move' ret[517554](517558 'deref' 1))
      gotoReturn _end_!=[517552] _end_!=[517552]
    }
    {
      unknown call_tmp[656543] "expr temp" "maybe param" "maybe type" "temp"
      (656546 'move' call_tmp[656543](127704 call _value _mt[243] d1[127664]))
      unknown call_tmp[656550] "expr temp" "maybe param" "maybe type" "temp"
      (656553 'move' call_tmp[656550](127708 call _value _mt[243] d2[127670]))
      unknown call_tmp[656555] "expr temp" "maybe param" "maybe type" "temp"
      (656558 'move' call_tmp[656555](127711 call == call_tmp[656543] call_tmp[656550]))
      unknown call_tmp[656560] "expr temp" "maybe param" "maybe type" "temp"
      (656563 'move' call_tmp[656560](127801 call _cond_test call_tmp[656555]))
      if call_tmp[656560]
      {
        (517564 'move' ret[517554](517563 'deref' 0))
        gotoReturn _end_!=[517552] _end_!=[517552]
      }
      {
        {
          unknown i[127754] "dead at end of block" "insert auto destroy"
          (542927 'init var' i[127754] 0)
          (480011 'end of statement')
          unknown tmp[127755] "maybe param" "temp"
          unknown call_tmp[656567] "expr temp" "maybe param" "maybe type" "temp"
          (656570 'move' call_tmp[656567](127719 call _value _mt[243] d1[127664]))
          unknown call_tmp[656574] "expr temp" "maybe param" "maybe type" "temp"
          (656577 'move' call_tmp[656574](127722 call rank _mt[243] call_tmp[656567]))
          unknown call_tmp[656579] "expr temp" "maybe param" "maybe type" "temp"
          (656582 'move' call_tmp[656579](127726 call - call_tmp[656574] 1))
          (127767 'move' tmp[127755](127765 call chpl_compute_low_param_loop_bound 0 call_tmp[656579]))
          unknown tmp[127756] "maybe param" "temp"
          unknown call_tmp[656586] "expr temp" "maybe param" "maybe type" "temp"
          (656589 'move' call_tmp[656586](127776 call _value _mt[243] d1[127664]))
          unknown call_tmp[656593] "expr temp" "maybe param" "maybe type" "temp"
          (656596 'move' call_tmp[656593](127774 call rank _mt[243] call_tmp[656586]))
          unknown call_tmp[656598] "expr temp" "maybe param" "maybe type" "temp"
          (656601 'move' call_tmp[656598](127772 call - call_tmp[656593] 1))
          (127783 'move' tmp[127756](127781 call chpl_compute_high_param_loop_bound 0 call_tmp[656598]))
          unknown tmp[127757] "maybe param" "temp"
          (127786 'move' tmp[127757] 1)
          ParamForLoop[127788]
          { i[127754] tmp[127755] tmp[127756] tmp[127757]
            unknown call_tmp[656605] "expr temp" "maybe param" "maybe type" "temp"
            (656608 'move' call_tmp[656605](127736 call(127731 call (partial) dim _mt[243] d1[127664]) i[127754]))
            unknown call_tmp[656612] "expr temp" "maybe param" "maybe type" "temp"
            (656615 'move' call_tmp[656612](127743 call(127738 call (partial) dim _mt[243] d2[127670]) i[127754]))
            unknown call_tmp[656617] "expr temp" "maybe param" "maybe type" "temp"
            (656620 'move' call_tmp[656617](127744 call != call_tmp[656605] call_tmp[656612]))
            unknown call_tmp[656622] "expr temp" "maybe param" "maybe type" "temp"
            (656625 'move' call_tmp[656622](127749 call _cond_test call_tmp[656617]))
            if call_tmp[656622]
            {
              (517569 'move' ret[517554](517568 'deref' 1))
              gotoReturn _end_!=[517552] _end_!=[517552]
            }
          }
          label _unused_continueLabel[127759]
          label _breakLabel[127758]
        }
        (517574 'move' ret[517554](517573 'deref' 0))
        gotoReturn _end_!=[517552] _end_!=[517552]
      }
    }
    label _end_!=[517552]
    (517556 return ret[517554])
  }
  where {
    unknown tmp[425241] "maybe param" "temp"
    (425252 'move' tmp[425241](127676 call isRectangularDom d1[127664]))
    unknown call_tmp[656627] "expr temp" "maybe param" "maybe type" "temp"
    (656630 'move' call_tmp[656627](425254 call _cond_invalid tmp[425241]))
    if call_tmp[656627]
    {
      (425257 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565901] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565902] "maybe param" "temp"
    unknown call_tmp[656632] "expr temp" "maybe param" "maybe type" "temp"
    (656635 'move' call_tmp[656632](425242 call isTrue tmp[425241]))
    (565907 'move' tmp[565902](565905 call _cond_test call_tmp[656632]))
    if tmp[565902]
    {
      unknown tmp[565909] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656637] "expr temp" "maybe param" "maybe type" "temp"
      (656640 'move' call_tmp[656637](127680 call isRectangularDom d2[127670]))
      (565911 'move' tmp[565909](425245 call isTrue call_tmp[656637]))
      (565916 'move' tmp[565901](565913 '_paramFoldLogical' tmp[565902] tmp[565909]))
    }
    {
      (565921 'move' tmp[565901](565918 '_paramFoldLogical' tmp[565902] 0))
    }
    (748290 call chpl_statementLevelSymbol tmp[565901])
  }
  function ==[127820](arg d1[127817]:_domain[125902](?), arg d2[127823]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517580] "RVV" "temp"
    unknown call_tmp[656644] "expr temp" "maybe param" "maybe type" "temp"
    (656647 'move' call_tmp[656644](127837 call _value _mt[243] d1[127817]))
    unknown call_tmp[656651] "expr temp" "maybe param" "maybe type" "temp"
    (656654 'move' call_tmp[656651](127841 call _value _mt[243] d2[127823]))
    unknown call_tmp[656656] "expr temp" "maybe param" "maybe type" "temp"
    (656659 'move' call_tmp[656656](127844 call == call_tmp[656644] call_tmp[656651]))
    unknown call_tmp[656661] "expr temp" "maybe param" "maybe type" "temp"
    (656664 'move' call_tmp[656661](127849 call _cond_test call_tmp[656656]))
    if call_tmp[656661]
    {
      (517585 'move' ret[517580](517584 'deref' 1))
      gotoReturn _end_==[517578] _end_==[517578]
    }
    unknown call_tmp[656668] "expr temp" "maybe param" "maybe type" "temp"
    (656671 'move' call_tmp[656668](127856 call size _mt[243] d1[127817]))
    unknown call_tmp[656675] "expr temp" "maybe param" "maybe type" "temp"
    (656678 'move' call_tmp[656675](127860 call size _mt[243] d2[127823]))
    unknown call_tmp[656680] "expr temp" "maybe param" "maybe type" "temp"
    (656683 'move' call_tmp[656680](127863 call != call_tmp[656668] call_tmp[656675]))
    unknown call_tmp[656685] "expr temp" "maybe param" "maybe type" "temp"
    (656688 'move' call_tmp[656685](127868 call _cond_test call_tmp[656680]))
    if call_tmp[656685]
    {
      (517590 'move' ret[517580](517589 'deref' 0))
      gotoReturn _end_==[517578] _end_==[517578]
    }
    {
      unknown _indexOfInterest[127892] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127893] "expr temp" "temp"
      (127902 'move' _iterator[127893](127900 call _getIterator d1[127817]))
      Defer
      {
        {
          (127918 call _freeIterator _iterator[127893])
        }
      }
      { scopeless type
        (127907 'move' _indexOfInterest[127892](127904 call iteratorIndex _iterator[127893]))
      }
      ForLoop[127894]
      {
        unknown idx[127911] "index var" "insert auto destroy"
        (480017 'end of statement')
        (127913 'move' idx[127911] _indexOfInterest[127892])
        (480018 'end of statement' idx[127911])
        unknown call_tmp[656692] "expr temp" "maybe param" "maybe type" "temp"
        (656695 'move' call_tmp[656692](127881 call(127876 call (partial) contains _mt[243] d2[127823]) idx[127911]))
        unknown call_tmp[656697] "expr temp" "maybe param" "maybe type" "temp"
        (656700 'move' call_tmp[656697](127882 call ! call_tmp[656692]))
        unknown call_tmp[656702] "expr temp" "maybe param" "maybe type" "temp"
        (656705 'move' call_tmp[656702](127887 call _cond_test call_tmp[656697]))
        if call_tmp[656702]
        {
          (517595 'move' ret[517580](517594 'deref' 0))
          gotoReturn _end_==[517578] _end_==[517578]
        }
        label _continueLabel[127897]
        _indexOfInterest[127892]
        _iterator[127893]
      }
      label _breakLabel[127898]
    }
    (517600 'move' ret[517580](517599 'deref' 1))
    label _end_==[517578]
    (517582 return ret[517580])
  }
  where {
    unknown tmp[425262] "maybe param" "temp"
    (425273 'move' tmp[425262](127829 call isAssociativeDom d1[127817]))
    unknown call_tmp[656707] "expr temp" "maybe param" "maybe type" "temp"
    (656710 'move' call_tmp[656707](425275 call _cond_invalid tmp[425262]))
    if call_tmp[656707]
    {
      (425278 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565928] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565929] "maybe param" "temp"
    unknown call_tmp[656712] "expr temp" "maybe param" "maybe type" "temp"
    (656715 'move' call_tmp[656712](425263 call isTrue tmp[425262]))
    (565934 'move' tmp[565929](565932 call _cond_test call_tmp[656712]))
    if tmp[565929]
    {
      unknown tmp[565936] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656717] "expr temp" "maybe param" "maybe type" "temp"
      (656720 'move' call_tmp[656717](127833 call isAssociativeDom d2[127823]))
      (565938 'move' tmp[565936](425266 call isTrue call_tmp[656717]))
      (565943 'move' tmp[565928](565940 '_paramFoldLogical' tmp[565929] tmp[565936]))
    }
    {
      (565948 'move' tmp[565928](565945 '_paramFoldLogical' tmp[565929] 0))
    }
    (748292 call chpl_statementLevelSymbol tmp[565928])
  }
  function !=[127937](arg d1[127934]:_domain[125902](?), arg d2[127940]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517604] "RVV" "temp"
    unknown call_tmp[656724] "expr temp" "maybe param" "maybe type" "temp"
    (656727 'move' call_tmp[656724](127954 call _value _mt[243] d1[127934]))
    unknown call_tmp[656731] "expr temp" "maybe param" "maybe type" "temp"
    (656734 'move' call_tmp[656731](127958 call _value _mt[243] d2[127940]))
    unknown call_tmp[656736] "expr temp" "maybe param" "maybe type" "temp"
    (656739 'move' call_tmp[656736](127961 call == call_tmp[656724] call_tmp[656731]))
    unknown call_tmp[656741] "expr temp" "maybe param" "maybe type" "temp"
    (656744 'move' call_tmp[656741](127966 call _cond_test call_tmp[656736]))
    if call_tmp[656741]
    {
      (517609 'move' ret[517604](517608 'deref' 0))
      gotoReturn _end_!=[517602] _end_!=[517602]
    }
    unknown call_tmp[656748] "expr temp" "maybe param" "maybe type" "temp"
    (656751 'move' call_tmp[656748](127973 call size _mt[243] d1[127934]))
    unknown call_tmp[656755] "expr temp" "maybe param" "maybe type" "temp"
    (656758 'move' call_tmp[656755](127977 call size _mt[243] d2[127940]))
    unknown call_tmp[656760] "expr temp" "maybe param" "maybe type" "temp"
    (656763 'move' call_tmp[656760](127980 call != call_tmp[656748] call_tmp[656755]))
    unknown call_tmp[656765] "expr temp" "maybe param" "maybe type" "temp"
    (656768 'move' call_tmp[656765](127985 call _cond_test call_tmp[656760]))
    if call_tmp[656765]
    {
      (517614 'move' ret[517604](517613 'deref' 1))
      gotoReturn _end_!=[517602] _end_!=[517602]
    }
    {
      unknown _indexOfInterest[128009] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128010] "expr temp" "temp"
      (128019 'move' _iterator[128010](128017 call _getIterator d1[127934]))
      Defer
      {
        {
          (128035 call _freeIterator _iterator[128010])
        }
      }
      { scopeless type
        (128024 'move' _indexOfInterest[128009](128021 call iteratorIndex _iterator[128010]))
      }
      ForLoop[128011]
      {
        unknown idx[128028] "index var" "insert auto destroy"
        (480025 'end of statement')
        (128030 'move' idx[128028] _indexOfInterest[128009])
        (480026 'end of statement' idx[128028])
        unknown call_tmp[656772] "expr temp" "maybe param" "maybe type" "temp"
        (656775 'move' call_tmp[656772](127998 call(127993 call (partial) contains _mt[243] d2[127940]) idx[128028]))
        unknown call_tmp[656777] "expr temp" "maybe param" "maybe type" "temp"
        (656780 'move' call_tmp[656777](127999 call ! call_tmp[656772]))
        unknown call_tmp[656782] "expr temp" "maybe param" "maybe type" "temp"
        (656785 'move' call_tmp[656782](128004 call _cond_test call_tmp[656777]))
        if call_tmp[656782]
        {
          (517619 'move' ret[517604](517618 'deref' 1))
          gotoReturn _end_!=[517602] _end_!=[517602]
        }
        label _continueLabel[128014]
        _indexOfInterest[128009]
        _iterator[128010]
      }
      label _breakLabel[128015]
    }
    (517624 'move' ret[517604](517623 'deref' 0))
    label _end_!=[517602]
    (517606 return ret[517604])
  }
  where {
    unknown tmp[425283] "maybe param" "temp"
    (425294 'move' tmp[425283](127946 call isAssociativeDom d1[127934]))
    unknown call_tmp[656787] "expr temp" "maybe param" "maybe type" "temp"
    (656790 'move' call_tmp[656787](425296 call _cond_invalid tmp[425283]))
    if call_tmp[656787]
    {
      (425299 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565955] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565956] "maybe param" "temp"
    unknown call_tmp[656792] "expr temp" "maybe param" "maybe type" "temp"
    (656795 'move' call_tmp[656792](425284 call isTrue tmp[425283]))
    (565961 'move' tmp[565956](565959 call _cond_test call_tmp[656792]))
    if tmp[565956]
    {
      unknown tmp[565963] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656797] "expr temp" "maybe param" "maybe type" "temp"
      (656800 'move' call_tmp[656797](127950 call isAssociativeDom d2[127940]))
      (565965 'move' tmp[565963](425287 call isTrue call_tmp[656797]))
      (565970 'move' tmp[565955](565967 '_paramFoldLogical' tmp[565956] tmp[565963]))
    }
    {
      (565975 'move' tmp[565955](565972 '_paramFoldLogical' tmp[565956] 0))
    }
    (748294 call chpl_statementLevelSymbol tmp[565955])
  }
  function ==[128054](arg d1[128051]:_domain[125902](?), arg d2[128057]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517628] "RVV" "temp"
    unknown call_tmp[656804] "expr temp" "maybe param" "maybe type" "temp"
    (656807 'move' call_tmp[656804](128071 call _value _mt[243] d1[128051]))
    unknown call_tmp[656811] "expr temp" "maybe param" "maybe type" "temp"
    (656814 'move' call_tmp[656811](128075 call _value _mt[243] d2[128057]))
    unknown call_tmp[656816] "expr temp" "maybe param" "maybe type" "temp"
    (656819 'move' call_tmp[656816](128078 call == call_tmp[656804] call_tmp[656811]))
    unknown call_tmp[656821] "expr temp" "maybe param" "maybe type" "temp"
    (656824 'move' call_tmp[656821](128083 call _cond_test call_tmp[656816]))
    if call_tmp[656821]
    {
      (517633 'move' ret[517628](517632 'deref' 1))
      gotoReturn _end_==[517626] _end_==[517626]
    }
    unknown call_tmp[656828] "expr temp" "maybe param" "maybe type" "temp"
    (656831 'move' call_tmp[656828](128090 call size _mt[243] d1[128051]))
    unknown call_tmp[656835] "expr temp" "maybe param" "maybe type" "temp"
    (656838 'move' call_tmp[656835](128094 call size _mt[243] d2[128057]))
    unknown call_tmp[656840] "expr temp" "maybe param" "maybe type" "temp"
    (656843 'move' call_tmp[656840](128097 call != call_tmp[656828] call_tmp[656835]))
    unknown call_tmp[656845] "expr temp" "maybe param" "maybe type" "temp"
    (656848 'move' call_tmp[656845](128102 call _cond_test call_tmp[656840]))
    if call_tmp[656845]
    {
      (517638 'move' ret[517628](517637 'deref' 0))
      gotoReturn _end_==[517626] _end_==[517626]
    }
    unknown call_tmp[656852] "expr temp" "maybe param" "maybe type" "temp"
    (656855 'move' call_tmp[656852](128108 call _value _mt[243] d1[128051]))
    unknown call_tmp[656859] "expr temp" "maybe param" "maybe type" "temp"
    (656862 'move' call_tmp[656859](128111 call parentDom _mt[243] call_tmp[656852]))
    unknown call_tmp[656866] "expr temp" "maybe param" "maybe type" "temp"
    (656869 'move' call_tmp[656866](128115 call _value _mt[243] d2[128057]))
    unknown call_tmp[656873] "expr temp" "maybe param" "maybe type" "temp"
    (656876 'move' call_tmp[656873](128118 call parentDom _mt[243] call_tmp[656866]))
    unknown call_tmp[656878] "expr temp" "maybe param" "maybe type" "temp"
    (656881 'move' call_tmp[656878](128121 call != call_tmp[656859] call_tmp[656873]))
    unknown call_tmp[656883] "expr temp" "maybe param" "maybe type" "temp"
    (656886 'move' call_tmp[656883](128126 call _cond_test call_tmp[656878]))
    if call_tmp[656883]
    {
      (517643 'move' ret[517628](517642 'deref' 0))
      gotoReturn _end_==[517626] _end_==[517626]
    }
    {
      unknown _indexOfInterest[128150] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128151] "expr temp" "temp"
      (128160 'move' _iterator[128151](128158 call _getIterator d1[128051]))
      Defer
      {
        {
          (128176 call _freeIterator _iterator[128151])
        }
      }
      { scopeless type
        (128165 'move' _indexOfInterest[128150](128162 call iteratorIndex _iterator[128151]))
      }
      ForLoop[128152]
      {
        unknown idx[128169] "index var" "insert auto destroy"
        (480034 'end of statement')
        (128171 'move' idx[128169] _indexOfInterest[128150])
        (480035 'end of statement' idx[128169])
        unknown call_tmp[656890] "expr temp" "maybe param" "maybe type" "temp"
        (656893 'move' call_tmp[656890](128139 call(128134 call (partial) contains _mt[243] d2[128057]) idx[128169]))
        unknown call_tmp[656895] "expr temp" "maybe param" "maybe type" "temp"
        (656898 'move' call_tmp[656895](128140 call ! call_tmp[656890]))
        unknown call_tmp[656900] "expr temp" "maybe param" "maybe type" "temp"
        (656903 'move' call_tmp[656900](128145 call _cond_test call_tmp[656895]))
        if call_tmp[656900]
        {
          (517648 'move' ret[517628](517647 'deref' 0))
          gotoReturn _end_==[517626] _end_==[517626]
        }
        label _continueLabel[128155]
        _indexOfInterest[128150]
        _iterator[128151]
      }
      label _breakLabel[128156]
    }
    (517653 'move' ret[517628](517652 'deref' 1))
    label _end_==[517626]
    (517630 return ret[517628])
  }
  where {
    unknown tmp[425304] "maybe param" "temp"
    (425315 'move' tmp[425304](128063 call isSparseDom d1[128051]))
    unknown call_tmp[656905] "expr temp" "maybe param" "maybe type" "temp"
    (656908 'move' call_tmp[656905](425317 call _cond_invalid tmp[425304]))
    if call_tmp[656905]
    {
      (425320 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565982] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565983] "maybe param" "temp"
    unknown call_tmp[656910] "expr temp" "maybe param" "maybe type" "temp"
    (656913 'move' call_tmp[656910](425305 call isTrue tmp[425304]))
    (565988 'move' tmp[565983](565986 call _cond_test call_tmp[656910]))
    if tmp[565983]
    {
      unknown tmp[565990] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656915] "expr temp" "maybe param" "maybe type" "temp"
      (656918 'move' call_tmp[656915](128067 call isSparseDom d2[128057]))
      (565992 'move' tmp[565990](425308 call isTrue call_tmp[656915]))
      (565997 'move' tmp[565982](565994 '_paramFoldLogical' tmp[565983] tmp[565990]))
    }
    {
      (566002 'move' tmp[565982](565999 '_paramFoldLogical' tmp[565983] 0))
    }
    (748296 call chpl_statementLevelSymbol tmp[565982])
  }
  function !=[128195](arg d1[128192]:_domain[125902](?), arg d2[128198]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517657] "RVV" "temp"
    unknown call_tmp[656922] "expr temp" "maybe param" "maybe type" "temp"
    (656925 'move' call_tmp[656922](128212 call _value _mt[243] d1[128192]))
    unknown call_tmp[656929] "expr temp" "maybe param" "maybe type" "temp"
    (656932 'move' call_tmp[656929](128216 call _value _mt[243] d2[128198]))
    unknown call_tmp[656934] "expr temp" "maybe param" "maybe type" "temp"
    (656937 'move' call_tmp[656934](128219 call == call_tmp[656922] call_tmp[656929]))
    unknown call_tmp[656939] "expr temp" "maybe param" "maybe type" "temp"
    (656942 'move' call_tmp[656939](128224 call _cond_test call_tmp[656934]))
    if call_tmp[656939]
    {
      (517662 'move' ret[517657](517661 'deref' 0))
      gotoReturn _end_!=[517655] _end_!=[517655]
    }
    unknown call_tmp[656946] "expr temp" "maybe param" "maybe type" "temp"
    (656949 'move' call_tmp[656946](128231 call size _mt[243] d1[128192]))
    unknown call_tmp[656953] "expr temp" "maybe param" "maybe type" "temp"
    (656956 'move' call_tmp[656953](128235 call size _mt[243] d2[128198]))
    unknown call_tmp[656958] "expr temp" "maybe param" "maybe type" "temp"
    (656961 'move' call_tmp[656958](128238 call != call_tmp[656946] call_tmp[656953]))
    unknown call_tmp[656963] "expr temp" "maybe param" "maybe type" "temp"
    (656966 'move' call_tmp[656963](128243 call _cond_test call_tmp[656958]))
    if call_tmp[656963]
    {
      (517667 'move' ret[517657](517666 'deref' 1))
      gotoReturn _end_!=[517655] _end_!=[517655]
    }
    unknown call_tmp[656970] "expr temp" "maybe param" "maybe type" "temp"
    (656973 'move' call_tmp[656970](128249 call _value _mt[243] d1[128192]))
    unknown call_tmp[656977] "expr temp" "maybe param" "maybe type" "temp"
    (656980 'move' call_tmp[656977](128252 call parentDom _mt[243] call_tmp[656970]))
    unknown call_tmp[656984] "expr temp" "maybe param" "maybe type" "temp"
    (656987 'move' call_tmp[656984](128256 call _value _mt[243] d2[128198]))
    unknown call_tmp[656991] "expr temp" "maybe param" "maybe type" "temp"
    (656994 'move' call_tmp[656991](128259 call parentDom _mt[243] call_tmp[656984]))
    unknown call_tmp[656996] "expr temp" "maybe param" "maybe type" "temp"
    (656999 'move' call_tmp[656996](128262 call != call_tmp[656977] call_tmp[656991]))
    unknown call_tmp[657001] "expr temp" "maybe param" "maybe type" "temp"
    (657004 'move' call_tmp[657001](128267 call _cond_test call_tmp[656996]))
    if call_tmp[657001]
    {
      (517672 'move' ret[517657](517671 'deref' 1))
      gotoReturn _end_!=[517655] _end_!=[517655]
    }
    {
      unknown _indexOfInterest[128291] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128292] "expr temp" "temp"
      (128301 'move' _iterator[128292](128299 call _getIterator d1[128192]))
      Defer
      {
        {
          (128317 call _freeIterator _iterator[128292])
        }
      }
      { scopeless type
        (128306 'move' _indexOfInterest[128291](128303 call iteratorIndex _iterator[128292]))
      }
      ForLoop[128293]
      {
        unknown idx[128310] "index var" "insert auto destroy"
        (480043 'end of statement')
        (128312 'move' idx[128310] _indexOfInterest[128291])
        (480044 'end of statement' idx[128310])
        unknown call_tmp[657008] "expr temp" "maybe param" "maybe type" "temp"
        (657011 'move' call_tmp[657008](128280 call(128275 call (partial) contains _mt[243] d2[128198]) idx[128310]))
        unknown call_tmp[657013] "expr temp" "maybe param" "maybe type" "temp"
        (657016 'move' call_tmp[657013](128281 call ! call_tmp[657008]))
        unknown call_tmp[657018] "expr temp" "maybe param" "maybe type" "temp"
        (657021 'move' call_tmp[657018](128286 call _cond_test call_tmp[657013]))
        if call_tmp[657018]
        {
          (517677 'move' ret[517657](517676 'deref' 1))
          gotoReturn _end_!=[517655] _end_!=[517655]
        }
        label _continueLabel[128296]
        _indexOfInterest[128291]
        _iterator[128292]
      }
      label _breakLabel[128297]
    }
    (517682 'move' ret[517657](517681 'deref' 0))
    label _end_!=[517655]
    (517659 return ret[517657])
  }
  where {
    unknown tmp[425325] "maybe param" "temp"
    (425336 'move' tmp[425325](128204 call isSparseDom d1[128192]))
    unknown call_tmp[657023] "expr temp" "maybe param" "maybe type" "temp"
    (657026 'move' call_tmp[657023](425338 call _cond_invalid tmp[425325]))
    if call_tmp[657023]
    {
      (425341 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566009] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566010] "maybe param" "temp"
    unknown call_tmp[657028] "expr temp" "maybe param" "maybe type" "temp"
    (657031 'move' call_tmp[657028](425326 call isTrue tmp[425325]))
    (566015 'move' tmp[566010](566013 call _cond_test call_tmp[657028]))
    if tmp[566010]
    {
      unknown tmp[566017] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657033] "expr temp" "maybe param" "maybe type" "temp"
      (657036 'move' call_tmp[657033](128208 call isSparseDom d2[128198]))
      (566019 'move' tmp[566017](425329 call isTrue call_tmp[657033]))
      (566024 'move' tmp[566009](566021 '_paramFoldLogical' tmp[566010] tmp[566017]))
    }
    {
      (566029 'move' tmp[566009](566026 '_paramFoldLogical' tmp[566010] 0))
    }
    (748298 call chpl_statementLevelSymbol tmp[566009])
  }
  function ==[128336](arg d1[128333]:_domain[125902](?), arg d2[128339]:_domain[125902](?)) param : _unknown[51] "inline"
  {
    unknown ret[517686] "RVV" "param" "temp"
    (517691 'move' ret[517686](517690 'deref' 0))
    (517688 return ret[517686])
  }
  function !=[128354](arg d1[128351]:_domain[125902](?), arg d2[128357]:_domain[125902](?)) param : _unknown[51] "inline"
  {
    unknown ret[517695] "RVV" "param" "temp"
    (517700 'move' ret[517695](517699 'deref' 1))
    (517697 return ret[517695])
  }
  function shouldReturnRvalueByConstRef[128370](arg t[128368]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517704] "RVV" "param" "temp"
    (517709 'move' ret[517704](517708 'deref' 1))
    (517706 return ret[517704])
  }
  function shouldReturnRvalueByValue[128382](arg t[128380]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517713] "RVV" "param" "temp"
    unknown call_tmp[657038] "expr temp" "maybe param" "maybe type" "temp"
    (657041 'move' call_tmp[657038](128385 call ! PODValAccess[113737]))
    unknown call_tmp[657043] "expr temp" "maybe param" "maybe type" "temp"
    (657046 'move' call_tmp[657043](128390 call _cond_test call_tmp[657038]))
    if call_tmp[657043]
    {
      (517718 'move' ret[517713](517717 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[517711] _end_shouldReturnRvalueByValue[517711]
    }
    unknown call_tmp[657048] "expr temp" "maybe param" "maybe type" "temp"
    (657051 'move' call_tmp[657048](128399 call isPODType t[128380]))
    unknown call_tmp[657053] "expr temp" "maybe param" "maybe type" "temp"
    (657056 'move' call_tmp[657053](128403 call _cond_test call_tmp[657048]))
    if call_tmp[657053]
    {
      (517723 'move' ret[517713](517722 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[517711] _end_shouldReturnRvalueByValue[517711]
    }
    (517728 'move' ret[517713](517727 'deref' 0))
    label _end_shouldReturnRvalueByValue[517711]
    (517715 return ret[517713])
  }
  function _array[133588](?).chpl__serialize[128430](arg _mt[133592]:_MT[238], arg this[133590]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517732] "RVV" "temp"
    unknown call_tmp[657060] "expr temp" "maybe param" "maybe type" "temp"
    (657063 'move' call_tmp[657060](359724 call _instance _mt[243] this[133590]))
    unknown call_tmp[657067] "expr temp" "maybe param" "maybe type" "temp"
    (657070 'move' call_tmp[657067](128445 call(128441 call (partial) chpl__serialize _mt[243] call_tmp[657060])))
    (517737 'move' ret[517732](517736 'deref' call_tmp[657067]))
    (517734 return ret[517732])
  }
  where {
    unknown call_tmp[657074] "expr temp" "maybe param" "maybe type" "temp"
    (657077 'move' call_tmp[657074](359719 call _instance _mt[243] this[133590]))
    (128439 call(128435 call (partial) chpl__rvfMe _mt[243] call_tmp[657074]))
  }
  function _array[133588](?).chpl__deserialize[128456](arg _mt[133596]:_MT[238], arg this[133594]:_array[133588](?), arg data[128454]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[517741] "RVV" "temp"
    unknown call_tmp[657081] "expr temp" "maybe param" "maybe type" "temp"
    (657084 'move' call_tmp[657081](128463 'static field type' this[133594] "_instance"))
    unknown call_tmp[657086] "expr temp" "maybe param" "maybe type" "temp"
    (657089 'move' call_tmp[657086](128465 call _to_borrowed call_tmp[657081]))
    unknown call_tmp[657093] "maybe param" "maybe type" "temp"
    (657096 'move' call_tmp[657093](128471 call(128466 call (partial) chpl__deserialize _mt[243] call_tmp[657086]) data[128454]))
    unknown arrinst[128472] "dead at end of block" "insert auto destroy"
    (542929 'init var' arrinst[128472] call_tmp[657093])
    (128475 'end of statement')
    unknown call_tmp[657098] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (657101 'move' call_tmp[657098](747881 'new' _array[133588](?) nullPid[113712] arrinst[128472](_unowned = 1)))
    (517746 'move' ret[517741](517745 'deref' call_tmp[657098]))
    gotoReturn _end_chpl__deserialize[517739] _end_chpl__deserialize[517739]
    (480055 'end of statement' arrinst[128472])
    label _end_chpl__deserialize[517739]
    (517743 return ret[517741])
  }
  function _array[133588](?).chpl__promotionType[128491](arg _mt[133600]:_MT[238], arg this[133598]:_array[133588](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[517752] "RVV" "temp" "type variable"
    unknown call_tmp[657105] "expr temp" "maybe param" "maybe type" "temp"
    (657108 'move' call_tmp[657105](359728 call _value _mt[243] this[133598]))
    unknown call_tmp[657112] "expr temp" "maybe param" "maybe type" "temp"
    (657115 'move' call_tmp[657112](128494 call eltType _mt[243] call_tmp[657105]))
    (517757 'move' ret[517752](517756 'deref' call_tmp[657112]))
    (517754 return ret[517752])
  }
  function _array[133588](?)._value[128504](arg _mt[133604]:_MT[238], arg this[133602]:_array[133588](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[517761] "RVV" "temp"
    unknown call_tmp[657119] "expr temp" "maybe param" "maybe type" "temp"
    (657122 'move' call_tmp[657119](383732 call _instance _mt[243] this[133602]))
    unknown call_tmp[657124] "expr temp" "maybe param" "maybe type" "temp"
    (657127 'move' call_tmp[657124](128509 call _isPrivatized call_tmp[657119]))
    unknown call_tmp[657129] "expr temp" "maybe param" "maybe type" "temp"
    (657132 'move' call_tmp[657129](128523 call _cond_test call_tmp[657124]))
    if call_tmp[657129]
    {
      { scopeless type
        unknown call_type_tmp[492175] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[657136] "expr temp" "maybe param" "maybe type" "temp"
        (657139 'move' call_tmp[657136](383737 call _instance _mt[243] this[133602]))
        (492179 'move' call_type_tmp[492175](128512 'typeof' call_tmp[657136]))
      }
      unknown call_tmp[657143] "expr temp" "maybe param" "maybe type" "temp"
      (657146 'move' call_tmp[657143](383742 call _pid _mt[243] this[133602]))
      unknown call_tmp[657148] "expr temp" "maybe param" "maybe type" "temp"
      (657151 'move' call_tmp[657148](128515 call chpl_getPrivatizedCopy call_type_tmp[492175] call_tmp[657143]))
      (517766 'move' ret[517761](517765 'deref' call_tmp[657148]))
      gotoReturn _end__value[517759] _end__value[517759]
    }
    {
      unknown call_tmp[657155] "expr temp" "maybe param" "maybe type" "temp"
      (657158 'move' call_tmp[657155](383747 call _instance _mt[243] this[133602]))
      (517771 'move' ret[517761](517770 'deref' call_tmp[657155]))
      gotoReturn _end__value[517759] _end__value[517759]
    }
    label _end__value[517759]
    (517763 return ret[517761])
  }
  function _array[133588](?).chpl_forwarding_expr6__value[128537](arg _mt[133608]:_MT[238], arg this[133606]:_array[133588](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[517777] "RVV" "temp"
    (517781 'move' ret[517777](383751 call _value _mt[243] this[133606]))
    (517779 return ret[517777])
  }
  function _array[133588](?).deinit[128545](arg _mt[133612]:_MT[238], arg this[133610]:_array[133588](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128550 call _do_destroy_array this[133610])
    (517783 return _void[55])
  }
  function _array[133588](?).eltType[128557](arg _mt[133616]:_MT[238], arg this[133614]:_array[133588](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517787] "RVV" "temp" "type variable"
    unknown call_tmp[657164] "expr temp" "maybe param" "maybe type" "temp"
    (657167 'move' call_tmp[657164](359732 call _value _mt[243] this[133614]))
    unknown call_tmp[657171] "expr temp" "maybe param" "maybe type" "temp"
    (657174 'move' call_tmp[657171](128560 call eltType _mt[243] call_tmp[657164]))
    (517792 'move' ret[517787](517791 'deref' call_tmp[657171]))
    (517789 return ret[517787])
  }
  function _array[133588](?).idxType[128570](arg _mt[133620]:_MT[238], arg this[133618]:_array[133588](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517796] "RVV" "temp" "type variable"
    unknown call_tmp[657178] "expr temp" "maybe param" "maybe type" "temp"
    (657181 'move' call_tmp[657178](359736 call _value _mt[243] this[133618]))
    unknown call_tmp[657185] "expr temp" "maybe param" "maybe type" "temp"
    (657188 'move' call_tmp[657185](128573 call idxType _mt[243] call_tmp[657178]))
    (517801 'move' ret[517796](517800 'deref' call_tmp[657185]))
    (517798 return ret[517796])
  }
  function _array[133588](?)._dom[128583](arg _mt[133624]:_MT[238], arg this[133622]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517805] "RVV" "temp"
    unknown call_tmp[657192] "expr temp" "maybe param" "maybe type" "temp"
    (657195 'move' call_tmp[657192](359740 call _value _mt[243] this[133622]))
    unknown call_tmp[657199] "expr temp" "maybe param" "maybe type" "temp"
    (657202 'move' call_tmp[657199](128587 call dom _mt[243] call_tmp[657192]))
    unknown call_tmp[657204] "expr temp" "maybe param" "maybe type" "temp"
    (657207 'move' call_tmp[657204](128591 call _getDomain call_tmp[657199]))
    (517810 'move' ret[517805](517809 'deref' call_tmp[657204]))
    (517807 return ret[517805])
  }
  function _array[133588](?).rank[128599](arg _mt[133628]:_MT[238], arg this[133626]:_array[133588](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517814] "RVV" "param" "temp"
    unknown call_tmp[657211] "expr temp" "maybe param" "maybe type" "temp"
    (657214 'move' call_tmp[657211](128602 call _dom _mt[243] this[133626]))
    unknown call_tmp[657218] "expr temp" "maybe param" "maybe type" "temp"
    (657221 'move' call_tmp[657218](128605 call rank _mt[243] call_tmp[657211]))
    (517819 'move' ret[517814](517818 'deref' call_tmp[657218]))
    (517816 return ret[517814])
  }
  function _array[133588](?).indices[128615](arg _mt[133632]:_MT[238], arg this[133630]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517823] "RVV" "temp"
    unknown call_tmp[657225] "expr temp" "maybe param" "maybe type" "temp"
    (657228 'move' call_tmp[657225](383756 call _dom _mt[243] this[133630]))
    (517828 'move' ret[517823](517827 'deref' call_tmp[657225]))
    (517825 return ret[517823])
  }
  function _array[133588](?).checkAccess[128627](arg _mt[133636]:_MT[238], arg this[133634]:_array[133588](?), arg indices[128625]:_any[178](?), arg value[128629]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657230] "expr temp" "maybe param" "maybe type" "temp"
    (657233 'move' call_tmp[657230](128634 call isRectangularArr this[133634]))
    unknown call_tmp[657235] "expr temp" "maybe param" "maybe type" "temp"
    (657238 'move' call_tmp[657235](129150 call _cond_test call_tmp[657230]))
    if call_tmp[657235]
    {
      unknown call_tmp[657242] "expr temp" "maybe param" "maybe type" "temp"
      (657245 'move' call_tmp[657242](128643 call(128638 call (partial) dsiBoundsCheck _mt[243] value[128629]) indices[128625]))
      unknown call_tmp[657247] "expr temp" "maybe param" "maybe type" "temp"
      (657250 'move' call_tmp[657247](128644 call ! call_tmp[657242]))
      unknown call_tmp[657252] "expr temp" "maybe param" "maybe type" "temp"
      (657255 'move' call_tmp[657252](129145 call _cond_test call_tmp[657247]))
      if call_tmp[657252]
      {
        unknown call_tmp[657259] "expr temp" "maybe param" "maybe type" "temp"
        (657262 'move' call_tmp[657259](383762 call rank _mt[243] this[133634]))
        unknown call_tmp[657264] "expr temp" "maybe param" "maybe type" "temp"
        (657267 'move' call_tmp[657264](128648 call == call_tmp[657259] 1))
        unknown call_tmp[657269] "expr temp" "maybe param" "maybe type" "temp"
        (657272 'move' call_tmp[657269](129140 call _cond_test call_tmp[657264]))
        if call_tmp[657269]
        {
          unknown call_tmp[657274] "expr temp" "maybe param" "maybe type" "temp"
          (657277 'move' call_tmp[657274](128689 call indices[128625] 0))
          unknown call_tmp[657281] "expr temp" "maybe param" "maybe type" "temp"
          (657284 'move' call_tmp[657281](128708 call dom _mt[243] value[128629]))
          unknown call_tmp[657288] "expr temp" "maybe param" "maybe type" "temp"
          (657291 'move' call_tmp[657288](128716 call(128711 call (partial) dsiDim _mt[243] call_tmp[657281]) 0))
          (128717 call halt "array index out of bounds\n" "note: index was " call_tmp[657274] " but array bounds are " call_tmp[657288])
        }
        {
          unknown istr[128737] "dead at end of block" "insert auto destroy"
          (542931 'init var' istr[128737] "")
          (128740 'end of statement')
          unknown bstr[128759] "dead at end of block" "insert auto destroy"
          (542933 'init var' bstr[128759] "")
          (128762 'end of statement')
          {
            unknown i[128818] "dead at end of block" "insert auto destroy"
            (542935 'init var' i[128818] 0)
            (480067 'end of statement')
            unknown tmp[128819] "maybe param" "temp"
            unknown call_tmp[657295] "expr temp" "maybe param" "maybe type" "temp"
            (657298 'move' call_tmp[657295](383767 call rank _mt[243] this[133634]))
            unknown call_tmp[657300] "expr temp" "maybe param" "maybe type" "temp"
            (657303 'move' call_tmp[657300](128766 call - call_tmp[657295] 1))
            (128831 'move' tmp[128819](128829 call chpl_compute_low_param_loop_bound 0 call_tmp[657300]))
            unknown tmp[128820] "maybe param" "temp"
            unknown call_tmp[657307] "expr temp" "maybe param" "maybe type" "temp"
            (657310 'move' call_tmp[657307](383779 call rank _mt[243] this[133634]))
            unknown call_tmp[657312] "expr temp" "maybe param" "maybe type" "temp"
            (657315 'move' call_tmp[657312](128836 call - call_tmp[657307] 1))
            (128841 'move' tmp[128820](128839 call chpl_compute_high_param_loop_bound 0 call_tmp[657312]))
            unknown tmp[128821] "maybe param" "temp"
            (128844 'move' tmp[128821] 1)
            ParamForLoop[128846]
            { i[128818] tmp[128819] tmp[128820] tmp[128821]
              {
                unknown call_tmp[657317] "expr temp" "maybe param" "maybe type" "temp"
                (657320 'move' call_tmp[657317](128772 call != i[128818] 0))
                unknown call_tmp[657322] "expr temp" "maybe param" "maybe type" "temp"
                (657325 'move' call_tmp[657322](128785 call _cond_test call_tmp[657317]))
                if call_tmp[657322]
                {
                  (128776 call += istr[128737] ", ")
                  (480068 'end of statement' istr[128737])
                  (128782 call += bstr[128759] ", ")
                  (480070 'end of statement' bstr[128759])
                }
                unknown call_tmp[657327] "expr temp" "maybe param" "maybe type" "temp"
                (657330 'move' call_tmp[657327](128794 call indices[128625] i[128818]))
                unknown call_tmp[657332] "expr temp" "maybe param" "maybe type" "temp"
                (657335 'move' call_tmp[657332](128796 call _cast string[26] call_tmp[657327]))
                (128798 call += istr[128737] call_tmp[657332])
                (480072 'end of statement' istr[128737] i[128818])
                unknown call_tmp[657339] "expr temp" "maybe param" "maybe type" "temp"
                (657342 'move' call_tmp[657339](128803 call dom _mt[243] value[128629]))
                unknown call_tmp[657346] "expr temp" "maybe param" "maybe type" "temp"
                (657349 'move' call_tmp[657346](128811 call(128806 call (partial) dsiDim _mt[243] call_tmp[657339]) i[128818]))
                unknown call_tmp[657351] "expr temp" "maybe param" "maybe type" "temp"
                (657354 'move' call_tmp[657351](128813 call _cast string[26] call_tmp[657346]))
                (128815 call += bstr[128759] call_tmp[657351])
                (480075 'end of statement' bstr[128759] i[128818])
              }
            }
            label _unused_continueLabel[128823]
            label _breakLabel[128822]
          }
          unknown dimstr[128872] "dead at end of block" "insert auto destroy"
          (542937 'init var' dimstr[128872] "")
          (128875 'end of statement')
          {
            unknown i[129026] "dead at end of block" "insert auto destroy"
            (542939 'init var' i[129026] 0)
            (480078 'end of statement')
            unknown tmp[129027] "maybe param" "temp"
            unknown call_tmp[657358] "expr temp" "maybe param" "maybe type" "temp"
            (657361 'move' call_tmp[657358](383783 call rank _mt[243] this[133634]))
            unknown call_tmp[657363] "expr temp" "maybe param" "maybe type" "temp"
            (657366 'move' call_tmp[657363](128879 call - call_tmp[657358] 1))
            (129039 'move' tmp[129027](129037 call chpl_compute_low_param_loop_bound 0 call_tmp[657363]))
            unknown tmp[129028] "maybe param" "temp"
            unknown call_tmp[657370] "expr temp" "maybe param" "maybe type" "temp"
            (657373 'move' call_tmp[657370](383796 call rank _mt[243] this[133634]))
            unknown call_tmp[657375] "expr temp" "maybe param" "maybe type" "temp"
            (657378 'move' call_tmp[657375](129044 call - call_tmp[657370] 1))
            (129049 'move' tmp[129028](129047 call chpl_compute_high_param_loop_bound 0 call_tmp[657375]))
            unknown tmp[129029] "maybe param" "temp"
            (129052 'move' tmp[129029] 1)
            ParamForLoop[129054]
            { i[129026] tmp[129027] tmp[129028] tmp[129029]
              {
                unknown call_tmp[657382] "expr temp" "maybe param" "maybe type" "temp"
                (657385 'move' call_tmp[657382](128884 call dom _mt[243] value[128629]))
                unknown call_tmp[657389] "expr temp" "maybe param" "maybe type" "temp"
                (657392 'move' call_tmp[657389](128892 call(128887 call (partial) dsiDim _mt[243] call_tmp[657382]) i[129026]))
                unknown call_tmp[657396] "expr temp" "maybe param" "maybe type" "temp"
                (657399 'move' call_tmp[657396](128901 call indices[128625] i[129026]))
                unknown call_tmp[657401] "expr temp" "maybe param" "maybe type" "temp"
                (657404 'move' call_tmp[657401](128903 call(128895 call (partial) boundsCheck _mt[243] call_tmp[657389]) call_tmp[657396]))
                unknown call_tmp[657406] "expr temp" "maybe param" "maybe type" "temp"
                (657409 'move' call_tmp[657406](128904 call ! call_tmp[657401]))
                unknown call_tmp[657411] "expr temp" "maybe param" "maybe type" "temp"
                (657414 'move' call_tmp[657411](129021 call _cond_test call_tmp[657406]))
                if call_tmp[657411]
                {
                  unknown call_tmp[657416] "expr temp" "maybe param" "maybe type" "temp"
                  (657419 'move' call_tmp[657416](128924 call == dimstr[128872] ""))
                  unknown call_tmp[657421] "expr temp" "maybe param" "maybe type" "temp"
                  (657424 'move' call_tmp[657421](129016 call _cond_test call_tmp[657416]))
                  if call_tmp[657421]
                  {
                    unknown call_tmp[657426] "expr temp" "maybe param" "maybe type" "temp"
                    (657429 'move' call_tmp[657426](128946 call _cast string[26] i[129026]))
                    unknown call_tmp[657431] "expr temp" "maybe param" "maybe type" "temp"
                    (657434 'move' call_tmp[657431](128948 call + "out of bounds in dimension " call_tmp[657426]))
                    unknown call_tmp[657436] "expr temp" "maybe param" "maybe type" "temp"
                    (657439 'move' call_tmp[657436](128967 call + call_tmp[657431] " because index "))
                    unknown call_tmp[657441] "expr temp" "maybe param" "maybe type" "temp"
                    (657444 'move' call_tmp[657441](128972 call indices[128625] i[129026]))
                    unknown call_tmp[657446] "expr temp" "maybe param" "maybe type" "temp"
                    (657449 'move' call_tmp[657446](128974 call _cast string[26] call_tmp[657441]))
                    unknown call_tmp[657451] "expr temp" "maybe param" "maybe type" "temp"
                    (657454 'move' call_tmp[657451](128976 call + call_tmp[657436] call_tmp[657446]))
                    unknown call_tmp[657456] "expr temp" "maybe param" "maybe type" "temp"
                    (657459 'move' call_tmp[657456](128995 call + call_tmp[657451] " is not in "))
                    unknown call_tmp[657463] "expr temp" "maybe param" "maybe type" "temp"
                    (657466 'move' call_tmp[657463](128998 call dom _mt[243] value[128629]))
                    unknown call_tmp[657470] "expr temp" "maybe param" "maybe type" "temp"
                    (657473 'move' call_tmp[657470](129006 call(129001 call (partial) dsiDim _mt[243] call_tmp[657463]) i[129026]))
                    unknown call_tmp[657475] "expr temp" "maybe param" "maybe type" "temp"
                    (657478 'move' call_tmp[657475](129008 call _cast string[26] call_tmp[657470]))
                    unknown call_tmp[657480] "expr temp" "maybe param" "maybe type" "temp"
                    (657483 'move' call_tmp[657480](129010 call + call_tmp[657456] call_tmp[657475]))
                    (129012 call = dimstr[128872] call_tmp[657480])
                    (480079 'end of statement' dimstr[128872] i[129026] i[129026] i[129026])
                  }
                }
              }
            }
            label _unused_continueLabel[129031]
            label _breakLabel[129030]
          }
          (129138 call halt "array index out of bounds\n" "note: index was (" istr[128737] ") " "but array bounds are (" bstr[128759] ")\n" "note: " dimstr[128872])
          (480084 'end of statement' istr[128737] bstr[128759] dimstr[128872])
        }
      }
    }
    (517830 return _void[55])
  }
  function _array[133588](?).checkSlice[129163](arg _mt[133640]:_MT[238], arg this[133638]:_array[133588](?), arg d[129160]:_domain[125902](?), arg value[129165]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657489] "expr temp" "maybe param" "maybe type" "temp"
    (657492 'move' call_tmp[657489](129173 call(129169 call (partial) dsiDims _mt[243] d[129160])))
    (129178 call(383806 call (partial) checkSlice _mt[243] this[133638])(129174 'expand_tuple' call_tmp[657489])(value = value[129165]))
    (517832 return _void[55])
  }
  function _array[133588](?).checkSlice[129189](arg _mt[133644]:_MT[238], arg this[133642]:_array[133588](?), arg ranges[129186]:_any[178](?) ..., arg value[129191]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657496] "expr temp" "maybe param" "maybe type" "temp"
    (657499 'move' call_tmp[657496](129200 call isRectangularArr this[133642]))
    unknown call_tmp[657501] "expr temp" "maybe param" "maybe type" "temp"
    (657504 'move' call_tmp[657501](129693 call _cond_test call_tmp[657496]))
    if call_tmp[657501]
    {
      unknown ok[129202] "dead at end of block" "insert auto destroy"
      (542941 'init var' ok[129202] 1)
      (129205 'end of statement')
      {
        unknown i[129247] "dead at end of block" "insert auto destroy"
        (542943 'init var' i[129247] 0)
        (480089 'end of statement')
        unknown tmp[129248] "maybe param" "temp"
        unknown call_tmp[657508] "expr temp" "maybe param" "maybe type" "temp"
        (657511 'move' call_tmp[657508](383817 call rank _mt[243] this[133642]))
        unknown call_tmp[657513] "expr temp" "maybe param" "maybe type" "temp"
        (657516 'move' call_tmp[657513](129210 call - call_tmp[657508] 1))
        (129260 'move' tmp[129248](129258 call chpl_compute_low_param_loop_bound 0 call_tmp[657513]))
        unknown tmp[129249] "maybe param" "temp"
        unknown call_tmp[657520] "expr temp" "maybe param" "maybe type" "temp"
        (657523 'move' call_tmp[657520](383825 call rank _mt[243] this[133642]))
        unknown call_tmp[657525] "expr temp" "maybe param" "maybe type" "temp"
        (657528 'move' call_tmp[657525](129265 call - call_tmp[657520] 1))
        (129270 'move' tmp[129249](129268 call chpl_compute_high_param_loop_bound 0 call_tmp[657525]))
        unknown tmp[129250] "maybe param" "temp"
        (129273 'move' tmp[129250] 1)
        ParamForLoop[129275]
        { i[129247] tmp[129248] tmp[129249] tmp[129250]
          {
            {
              unknown tmp[129235] "temp"
              (129238 'move' tmp[129235](129237 'addr of' ok[129202]))
              unknown tmp[425346] "maybe param" "temp"
              (425357 'move' tmp[425346] tmp[129235])
              unknown call_tmp[657530] "expr temp" "maybe param" "maybe type" "temp"
              (657533 'move' call_tmp[657530](425359 call _cond_invalid tmp[425346]))
              if call_tmp[657530]
              {
                (425362 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[566036] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[566037] "maybe param" "temp"
              unknown call_tmp[657535] "expr temp" "maybe param" "maybe type" "temp"
              (657538 'move' call_tmp[657535](425347 call isTrue tmp[425346]))
              (566042 'move' tmp[566037](566040 call _cond_test call_tmp[657535]))
              if tmp[566037]
              {
                unknown tmp[566044] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[657542] "expr temp" "maybe param" "maybe type" "temp"
                (657545 'move' call_tmp[657542](129216 call dom _mt[243] value[129191]))
                unknown call_tmp[657549] "expr temp" "maybe param" "maybe type" "temp"
                (657552 'move' call_tmp[657549](129224 call(129219 call (partial) dsiDim _mt[243] call_tmp[657542]) i[129247]))
                unknown call_tmp[657556] "expr temp" "maybe param" "maybe type" "temp"
                (657559 'move' call_tmp[657556](129231 call ranges[129186] i[129247]))
                unknown call_tmp[657561] "expr temp" "maybe param" "maybe type" "temp"
                (657564 'move' call_tmp[657561](129233 call(129225 call (partial) boundsCheck _mt[243] call_tmp[657549]) call_tmp[657556]))
                (566046 'move' tmp[566044](425350 call isTrue call_tmp[657561]))
                (566051 'move' tmp[566036](566048 '_paramFoldLogical' tmp[566037] tmp[566044]))
              }
              {
                (566056 'move' tmp[566036](566053 '_paramFoldLogical' tmp[566037] 0))
              }
              (129243 call = tmp[129235] tmp[566036])
              (480091 'end of statement' i[129247] i[129247])
            }
          }
        }
        label _unused_continueLabel[129252]
        label _breakLabel[129251]
      }
      unknown call_tmp[657566] "expr temp" "maybe param" "maybe type" "temp"
      (657569 'move' call_tmp[657566](129286 call == ok[129202] 0))
      unknown call_tmp[657571] "expr temp" "maybe param" "maybe type" "temp"
      (657574 'move' call_tmp[657571](129689 call _cond_test call_tmp[657566]))
      if call_tmp[657571]
      {
        unknown call_tmp[657578] "expr temp" "maybe param" "maybe type" "temp"
        (657581 'move' call_tmp[657578](383830 call rank _mt[243] this[133642]))
        unknown call_tmp[657583] "expr temp" "maybe param" "maybe type" "temp"
        (657586 'move' call_tmp[657583](129290 call == call_tmp[657578] 1))
        unknown call_tmp[657588] "expr temp" "maybe param" "maybe type" "temp"
        (657591 'move' call_tmp[657588](129684 call _cond_test call_tmp[657583]))
        if call_tmp[657588]
        {
          unknown call_tmp[657593] "expr temp" "maybe param" "maybe type" "temp"
          (657596 'move' call_tmp[657593](129331 call ranges[129186] 0))
          unknown call_tmp[657600] "expr temp" "maybe param" "maybe type" "temp"
          (657603 'move' call_tmp[657600](129334 call dom _mt[243] value[129191]))
          unknown call_tmp[657607] "expr temp" "maybe param" "maybe type" "temp"
          (657610 'move' call_tmp[657607](129342 call(129337 call (partial) dsiDim _mt[243] call_tmp[657600]) 0))
          (129343 call halt "array slice out of bounds\n" "note: slice index was " call_tmp[657593] " but array bounds are " call_tmp[657607])
        }
        {
          unknown istr[129363] "dead at end of block" "insert auto destroy"
          (542945 'init var' istr[129363] "")
          (129366 'end of statement')
          unknown bstr[129385] "dead at end of block" "insert auto destroy"
          (542947 'init var' bstr[129385] "")
          (129388 'end of statement')
          {
            unknown i[129444] "dead at end of block" "insert auto destroy"
            (542949 'init var' i[129444] 0)
            (480095 'end of statement')
            unknown tmp[129445] "maybe param" "temp"
            unknown call_tmp[657614] "expr temp" "maybe param" "maybe type" "temp"
            (657617 'move' call_tmp[657614](383835 call rank _mt[243] this[133642]))
            unknown call_tmp[657619] "expr temp" "maybe param" "maybe type" "temp"
            (657622 'move' call_tmp[657619](129392 call - call_tmp[657614] 1))
            (129457 'move' tmp[129445](129455 call chpl_compute_low_param_loop_bound 0 call_tmp[657619]))
            unknown tmp[129446] "maybe param" "temp"
            unknown call_tmp[657626] "expr temp" "maybe param" "maybe type" "temp"
            (657629 'move' call_tmp[657626](383847 call rank _mt[243] this[133642]))
            unknown call_tmp[657631] "expr temp" "maybe param" "maybe type" "temp"
            (657634 'move' call_tmp[657631](129462 call - call_tmp[657626] 1))
            (129467 'move' tmp[129446](129465 call chpl_compute_high_param_loop_bound 0 call_tmp[657631]))
            unknown tmp[129447] "maybe param" "temp"
            (129470 'move' tmp[129447] 1)
            ParamForLoop[129472]
            { i[129444] tmp[129445] tmp[129446] tmp[129447]
              {
                unknown call_tmp[657636] "expr temp" "maybe param" "maybe type" "temp"
                (657639 'move' call_tmp[657636](129398 call != i[129444] 0))
                unknown call_tmp[657641] "expr temp" "maybe param" "maybe type" "temp"
                (657644 'move' call_tmp[657641](129411 call _cond_test call_tmp[657636]))
                if call_tmp[657641]
                {
                  (129402 call += istr[129363] ", ")
                  (480096 'end of statement' istr[129363])
                  (129408 call += bstr[129385] ", ")
                  (480098 'end of statement' bstr[129385])
                }
                unknown call_tmp[657646] "expr temp" "maybe param" "maybe type" "temp"
                (657649 'move' call_tmp[657646](129420 call ranges[129186] i[129444]))
                unknown call_tmp[657651] "expr temp" "maybe param" "maybe type" "temp"
                (657654 'move' call_tmp[657651](129422 call _cast string[26] call_tmp[657646]))
                (129424 call += istr[129363] call_tmp[657651])
                (480100 'end of statement' istr[129363] i[129444])
                unknown call_tmp[657658] "expr temp" "maybe param" "maybe type" "temp"
                (657661 'move' call_tmp[657658](129429 call dom _mt[243] value[129191]))
                unknown call_tmp[657665] "expr temp" "maybe param" "maybe type" "temp"
                (657668 'move' call_tmp[657665](129437 call(129432 call (partial) dsiDim _mt[243] call_tmp[657658]) i[129444]))
                unknown call_tmp[657670] "expr temp" "maybe param" "maybe type" "temp"
                (657673 'move' call_tmp[657670](129439 call _cast string[26] call_tmp[657665]))
                (129441 call += bstr[129385] call_tmp[657670])
                (480103 'end of statement' bstr[129385] i[129444])
              }
            }
            label _unused_continueLabel[129449]
            label _breakLabel[129448]
          }
          unknown dimstr[129498] "dead at end of block" "insert auto destroy"
          (542951 'init var' dimstr[129498] "")
          (129501 'end of statement')
          {
            unknown i[129618] "dead at end of block" "insert auto destroy"
            (542953 'init var' i[129618] 0)
            (480106 'end of statement')
            unknown tmp[129619] "maybe param" "temp"
            unknown call_tmp[657677] "expr temp" "maybe param" "maybe type" "temp"
            (657680 'move' call_tmp[657677](383851 call rank _mt[243] this[133642]))
            unknown call_tmp[657682] "expr temp" "maybe param" "maybe type" "temp"
            (657685 'move' call_tmp[657682](129505 call - call_tmp[657677] 1))
            (129631 'move' tmp[129619](129629 call chpl_compute_low_param_loop_bound 0 call_tmp[657682]))
            unknown tmp[129620] "maybe param" "temp"
            unknown call_tmp[657689] "expr temp" "maybe param" "maybe type" "temp"
            (657692 'move' call_tmp[657689](383864 call rank _mt[243] this[133642]))
            unknown call_tmp[657694] "expr temp" "maybe param" "maybe type" "temp"
            (657697 'move' call_tmp[657694](129636 call - call_tmp[657689] 1))
            (129641 'move' tmp[129620](129639 call chpl_compute_high_param_loop_bound 0 call_tmp[657694]))
            unknown tmp[129621] "maybe param" "temp"
            (129644 'move' tmp[129621] 1)
            ParamForLoop[129646]
            { i[129618] tmp[129619] tmp[129620] tmp[129621]
              {
                unknown call_tmp[657701] "expr temp" "maybe param" "maybe type" "temp"
                (657704 'move' call_tmp[657701](129510 call dom _mt[243] value[129191]))
                unknown call_tmp[657708] "expr temp" "maybe param" "maybe type" "temp"
                (657711 'move' call_tmp[657708](129518 call(129513 call (partial) dsiDim _mt[243] call_tmp[657701]) i[129618]))
                unknown call_tmp[657715] "expr temp" "maybe param" "maybe type" "temp"
                (657718 'move' call_tmp[657715](129525 call ranges[129186] i[129618]))
                unknown call_tmp[657720] "expr temp" "maybe param" "maybe type" "temp"
                (657723 'move' call_tmp[657720](129527 call(129519 call (partial) boundsCheck _mt[243] call_tmp[657708]) call_tmp[657715]))
                unknown call_tmp[657725] "expr temp" "maybe param" "maybe type" "temp"
                (657728 'move' call_tmp[657725](129528 call ! call_tmp[657720]))
                unknown call_tmp[657730] "expr temp" "maybe param" "maybe type" "temp"
                (657733 'move' call_tmp[657730](129613 call _cond_test call_tmp[657725]))
                if call_tmp[657730]
                {
                  unknown call_tmp[657735] "expr temp" "maybe param" "maybe type" "temp"
                  (657738 'move' call_tmp[657735](129548 call == dimstr[129498] ""))
                  unknown call_tmp[657740] "expr temp" "maybe param" "maybe type" "temp"
                  (657743 'move' call_tmp[657740](129608 call _cond_test call_tmp[657735]))
                  if call_tmp[657740]
                  {
                    unknown call_tmp[657745] "expr temp" "maybe param" "maybe type" "temp"
                    (657748 'move' call_tmp[657745](129554 call _cast string[26] i[129618]))
                    unknown call_tmp[657750] "expr temp" "maybe param" "maybe type" "temp"
                    (657753 'move' call_tmp[657750](129556 call + "out of bounds in dimension " call_tmp[657745]))
                    unknown call_tmp[657755] "expr temp" "maybe param" "maybe type" "temp"
                    (657758 'move' call_tmp[657755](129575 call + call_tmp[657750] " because slice index "))
                    unknown call_tmp[657760] "expr temp" "maybe param" "maybe type" "temp"
                    (657763 'move' call_tmp[657760](129580 call ranges[129186] i[129618]))
                    unknown call_tmp[657765] "expr temp" "maybe param" "maybe type" "temp"
                    (657768 'move' call_tmp[657765](129582 call _cast string[26] call_tmp[657760]))
                    unknown call_tmp[657770] "expr temp" "maybe param" "maybe type" "temp"
                    (657773 'move' call_tmp[657770](129584 call + call_tmp[657755] call_tmp[657765]))
                    unknown call_tmp[657775] "expr temp" "maybe param" "maybe type" "temp"
                    (657778 'move' call_tmp[657775](129587 call + call_tmp[657770] " is not in "))
                    unknown call_tmp[657782] "expr temp" "maybe param" "maybe type" "temp"
                    (657785 'move' call_tmp[657782](129590 call dom _mt[243] value[129191]))
                    unknown call_tmp[657789] "expr temp" "maybe param" "maybe type" "temp"
                    (657792 'move' call_tmp[657789](129598 call(129593 call (partial) dsiDim _mt[243] call_tmp[657782]) i[129618]))
                    unknown call_tmp[657794] "expr temp" "maybe param" "maybe type" "temp"
                    (657797 'move' call_tmp[657794](129600 call _cast string[26] call_tmp[657789]))
                    unknown call_tmp[657799] "expr temp" "maybe param" "maybe type" "temp"
                    (657802 'move' call_tmp[657799](129602 call + call_tmp[657775] call_tmp[657794]))
                    (129604 call = dimstr[129498] call_tmp[657799])
                    (480107 'end of statement' dimstr[129498] i[129618] i[129618] i[129618])
                  }
                }
              }
            }
            label _unused_continueLabel[129623]
            label _breakLabel[129622]
          }
          (129682 call halt "array slice out of bounds\n" "note: slice index was (" istr[129363] ") " "but array bounds are (" bstr[129385] ")\n" "note: " dimstr[129498])
          (480112 'end of statement' istr[129363] bstr[129385] dimstr[129498])
        }
      }
    }
    (517834 return _void[55])
  }
  where {
    (129196 call chpl__isTupleOfRanges ranges[129186])
  }
  function _array[133588](?).this[129716](arg _mt[133648]:_MT[238], ref arg this[133646]:_array[133588](?), arg i[129713] :
  unknown call_tmp[657806] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517838] "RVV" "temp"
    unknown call_tmp[657834] "maybe param" "maybe type" "temp"
    (657837 'move' call_tmp[657834](383875 call _value _mt[243] this[133646]))
    const value[129719] "dead at end of block" "const" "insert auto destroy"
    (542955 'init var' value[129719] call_tmp[657834])
    (129722 'end of statement')
    unknown call_tmp[657839] "expr temp" "maybe param" "maybe type" "temp"
    (657842 'move' call_tmp[657839](129732 call _cond_test 1))
    if call_tmp[657839]
    {
      (129730 call(383882 call (partial) checkAccess _mt[243] this[133646]) i[129713](value = value[129719]))
      (480116 'end of statement' value[129719])
    }
    unknown tmp[425367] "maybe param" "temp"
    (425378 'move' tmp[425367](129740 call isRectangularArr this[133646]))
    unknown call_tmp[657846] "expr temp" "maybe param" "maybe type" "temp"
    (657849 'move' call_tmp[657846](425380 call _cond_invalid tmp[425367]))
    if call_tmp[657846]
    {
      (425383 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566063] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566064] "maybe param" "temp"
    unknown call_tmp[657851] "expr temp" "maybe param" "maybe type" "temp"
    (657854 'move' call_tmp[657851](425368 call isTrue tmp[425367]))
    (566069 'move' tmp[566064](566067 call _cond_test call_tmp[657851]))
    if tmp[566064]
    {
      (566074 'move' tmp[566063](566071 '_paramFoldLogical' tmp[566064] 1))
    }
    {
      unknown tmp[566076] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657856] "expr temp" "maybe param" "maybe type" "temp"
      (657859 'move' call_tmp[657856](129744 call isSparseArr this[133646]))
      (566078 'move' tmp[566076](425372 call isTrue call_tmp[657856]))
      (566083 'move' tmp[566063](566080 '_paramFoldLogical' tmp[566064] tmp[566076]))
    }
    unknown call_tmp[657861] "expr temp" "maybe param" "maybe type" "temp"
    (657864 'move' call_tmp[657861](129768 call _cond_test tmp[566063]))
    if call_tmp[657861]
    {
      unknown call_tmp[657868] "expr temp" "maybe param" "maybe type" "temp"
      (657871 'move' call_tmp[657868](129753 call(129748 call (partial) dsiAccess _mt[243] value[129719]) i[129713]))
      (517843 'move' ret[517838](517842 'addr of' call_tmp[657868]))
      gotoReturn _end_this[517836] _end_this[517836]
      (480119 'end of statement' value[129719])
    }
    {
      unknown call_tmp[657875] "expr temp" "maybe param" "maybe type" "temp"
      (657878 'move' call_tmp[657875](129763 call i[129713] 0))
      unknown call_tmp[657880] "expr temp" "maybe param" "maybe type" "temp"
      (657883 'move' call_tmp[657880](129765 call(129757 call (partial) dsiAccess _mt[243] value[129719]) call_tmp[657875]))
      (517848 'move' ret[517838](517847 'addr of' call_tmp[657880]))
      gotoReturn _end_this[517836] _end_this[517836]
      (480121 'end of statement' value[129719])
    }
    label _end_this[517836]
    (517840 return ret[517838])
  }
  function _array[133588](?).this[129791](arg _mt[133652]:_MT[238], const arg this[133650]:_array[133588](?), arg i[129788] :
  unknown call_tmp[657887] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517854] "RVV" "temp"
    unknown call_tmp[657915] "maybe param" "maybe type" "temp"
    (657918 'move' call_tmp[657915](383896 call _value _mt[243] this[133650]))
    const value[129801] "dead at end of block" "const" "insert auto destroy"
    (542957 'init var' value[129801] call_tmp[657915])
    (129804 'end of statement')
    unknown call_tmp[657920] "expr temp" "maybe param" "maybe type" "temp"
    (657923 'move' call_tmp[657920](129814 call _cond_test 1))
    if call_tmp[657920]
    {
      (129812 call(383901 call (partial) checkAccess _mt[243] this[133650]) i[129788](value = value[129801]))
      (480123 'end of statement' value[129801])
    }
    unknown tmp[425388] "maybe param" "temp"
    (425399 'move' tmp[425388](129822 call isRectangularArr this[133650]))
    unknown call_tmp[657927] "expr temp" "maybe param" "maybe type" "temp"
    (657930 'move' call_tmp[657927](425401 call _cond_invalid tmp[425388]))
    if call_tmp[657927]
    {
      (425404 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566090] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566091] "maybe param" "temp"
    unknown call_tmp[657932] "expr temp" "maybe param" "maybe type" "temp"
    (657935 'move' call_tmp[657932](425389 call isTrue tmp[425388]))
    (566096 'move' tmp[566091](566094 call _cond_test call_tmp[657932]))
    if tmp[566091]
    {
      (566101 'move' tmp[566090](566098 '_paramFoldLogical' tmp[566091] 1))
    }
    {
      unknown tmp[566103] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657937] "expr temp" "maybe param" "maybe type" "temp"
      (657940 'move' call_tmp[657937](129826 call isSparseArr this[133650]))
      (566105 'move' tmp[566103](425393 call isTrue call_tmp[657937]))
      (566110 'move' tmp[566090](566107 '_paramFoldLogical' tmp[566091] tmp[566103]))
    }
    unknown call_tmp[657942] "expr temp" "maybe param" "maybe type" "temp"
    (657945 'move' call_tmp[657942](129850 call _cond_test tmp[566090]))
    if call_tmp[657942]
    {
      unknown call_tmp[657949] "expr temp" "maybe param" "maybe type" "temp"
      (657952 'move' call_tmp[657949](129835 call(129830 call (partial) dsiAccess _mt[243] value[129801]) i[129788]))
      (517859 'move' ret[517854](517858 'deref' call_tmp[657949]))
      gotoReturn _end_this[517852] _end_this[517852]
      (480126 'end of statement' value[129801])
    }
    {
      unknown call_tmp[657956] "expr temp" "maybe param" "maybe type" "temp"
      (657959 'move' call_tmp[657956](129845 call i[129788] 0))
      unknown call_tmp[657961] "expr temp" "maybe param" "maybe type" "temp"
      (657964 'move' call_tmp[657961](129847 call(129839 call (partial) dsiAccess _mt[243] value[129801]) call_tmp[657956]))
      (517864 'move' ret[517854](517863 'deref' call_tmp[657961]))
      gotoReturn _end_this[517852] _end_this[517852]
      (480128 'end of statement' value[129801])
    }
    label _end_this[517852]
    (517856 return ret[517854])
  }
  where {
    unknown call_tmp[657968] "expr temp" "maybe param" "maybe type" "temp"
    (657971 'move' call_tmp[657968](359766 call _value _mt[243] this[133650]))
    unknown call_tmp[657975] "expr temp" "maybe param" "maybe type" "temp"
    (657978 'move' call_tmp[657975](129795 call eltType _mt[243] call_tmp[657968]))
    (129799 call shouldReturnRvalueByValue call_tmp[657975])
  }
  function _array[133588](?).this[129874](arg _mt[133656]:_MT[238], const arg this[133654]:_array[133588](?), arg i[129871] :
  unknown call_tmp[657982] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517870] "RVV" "temp"
    unknown call_tmp[658010] "maybe param" "maybe type" "temp"
    (658013 'move' call_tmp[658010](383915 call _value _mt[243] this[133654]))
    const value[129884] "dead at end of block" "const" "insert auto destroy"
    (542959 'init var' value[129884] call_tmp[658010])
    (129887 'end of statement')
    unknown call_tmp[658015] "expr temp" "maybe param" "maybe type" "temp"
    (658018 'move' call_tmp[658015](129897 call _cond_test 1))
    if call_tmp[658015]
    {
      (129895 call(383920 call (partial) checkAccess _mt[243] this[133654]) i[129871](value = value[129884]))
      (480130 'end of statement' value[129884])
    }
    unknown tmp[425409] "maybe param" "temp"
    (425420 'move' tmp[425409](129905 call isRectangularArr this[133654]))
    unknown call_tmp[658022] "expr temp" "maybe param" "maybe type" "temp"
    (658025 'move' call_tmp[658022](425422 call _cond_invalid tmp[425409]))
    if call_tmp[658022]
    {
      (425425 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566117] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566118] "maybe param" "temp"
    unknown call_tmp[658027] "expr temp" "maybe param" "maybe type" "temp"
    (658030 'move' call_tmp[658027](425410 call isTrue tmp[425409]))
    (566123 'move' tmp[566118](566121 call _cond_test call_tmp[658027]))
    if tmp[566118]
    {
      (566128 'move' tmp[566117](566125 '_paramFoldLogical' tmp[566118] 1))
    }
    {
      unknown tmp[566130] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658032] "expr temp" "maybe param" "maybe type" "temp"
      (658035 'move' call_tmp[658032](129909 call isSparseArr this[133654]))
      (566132 'move' tmp[566130](425414 call isTrue call_tmp[658032]))
      (566137 'move' tmp[566117](566134 '_paramFoldLogical' tmp[566118] tmp[566130]))
    }
    unknown call_tmp[658037] "expr temp" "maybe param" "maybe type" "temp"
    (658040 'move' call_tmp[658037](129933 call _cond_test tmp[566117]))
    if call_tmp[658037]
    {
      unknown call_tmp[658044] "expr temp" "maybe param" "maybe type" "temp"
      (658047 'move' call_tmp[658044](129918 call(129913 call (partial) dsiAccess _mt[243] value[129884]) i[129871]))
      (517875 'move' ret[517870](517874 'addr of' call_tmp[658044]))
      gotoReturn _end_this[517868] _end_this[517868]
      (480133 'end of statement' value[129884])
    }
    {
      unknown call_tmp[658051] "expr temp" "maybe param" "maybe type" "temp"
      (658054 'move' call_tmp[658051](129928 call i[129871] 0))
      unknown call_tmp[658056] "expr temp" "maybe param" "maybe type" "temp"
      (658059 'move' call_tmp[658056](129930 call(129922 call (partial) dsiAccess _mt[243] value[129884]) call_tmp[658051]))
      (517880 'move' ret[517870](517879 'addr of' call_tmp[658056]))
      gotoReturn _end_this[517868] _end_this[517868]
      (480135 'end of statement' value[129884])
    }
    label _end_this[517868]
    (517872 return ret[517870])
  }
  where {
    unknown call_tmp[658063] "expr temp" "maybe param" "maybe type" "temp"
    (658066 'move' call_tmp[658063](359776 call _value _mt[243] this[133654]))
    unknown call_tmp[658070] "expr temp" "maybe param" "maybe type" "temp"
    (658073 'move' call_tmp[658070](129878 call eltType _mt[243] call_tmp[658063]))
    (129882 call shouldReturnRvalueByConstRef call_tmp[658070])
  }
  function _array[133588](?).this[129956](arg _mt[133660]:_MT[238], ref arg this[133658]:_array[133588](?), arg i[129952] ... :
  unknown call_tmp[658077] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517886] "RVV" "temp"
    unknown call_tmp[658093] "expr temp" "maybe param" "maybe type" "temp"
    (658096 'move' call_tmp[658093](129961 call this[133658] i[129952]))
    (517891 'move' ret[517886](517890 'addr of' call_tmp[658093]))
    (517888 return ret[517886])
  }
  function _array[133588](?).this[129981](arg _mt[133664]:_MT[238], const arg this[133662]:_array[133588](?), arg i[129977] ... :
  unknown call_tmp[658100] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517895] "RVV" "temp"
    unknown call_tmp[658116] "expr temp" "maybe param" "maybe type" "temp"
    (658119 'move' call_tmp[658116](129993 call this[133662] i[129977]))
    (517900 'move' ret[517895](517899 'deref' call_tmp[658116]))
    (517897 return ret[517895])
  }
  where {
    unknown call_tmp[658123] "expr temp" "maybe param" "maybe type" "temp"
    (658126 'move' call_tmp[658123](359790 call _value _mt[243] this[133662]))
    unknown call_tmp[658130] "expr temp" "maybe param" "maybe type" "temp"
    (658133 'move' call_tmp[658130](129985 call eltType _mt[243] call_tmp[658123]))
    (129989 call shouldReturnRvalueByValue call_tmp[658130])
  }
  function _array[133588](?).this[130014](arg _mt[133668]:_MT[238], const arg this[133666]:_array[133588](?), arg i[130010] ... :
  unknown call_tmp[658137] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517904] "RVV" "temp"
    unknown call_tmp[658153] "expr temp" "maybe param" "maybe type" "temp"
    (658156 'move' call_tmp[658153](130026 call this[133666] i[130010]))
    (517909 'move' ret[517904](517908 'addr of' call_tmp[658153]))
    (517906 return ret[517904])
  }
  where {
    unknown call_tmp[658160] "expr temp" "maybe param" "maybe type" "temp"
    (658163 'move' call_tmp[658160](359798 call _value _mt[243] this[133666]))
    unknown call_tmp[658167] "expr temp" "maybe param" "maybe type" "temp"
    (658170 'move' call_tmp[658167](130018 call eltType _mt[243] call_tmp[658160]))
    (130022 call shouldReturnRvalueByConstRef call_tmp[658167])
  }
  function _array[133588](?).localAccess[130048](arg _mt[133672]:_MT[238], ref arg this[133670]:_array[133588](?), arg i[130045] :
  unknown call_tmp[658174] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[517913] "RVV" "temp"
    unknown call_tmp[658202] "maybe param" "maybe type" "temp"
    (658205 'move' call_tmp[658202](383952 call _value _mt[243] this[133670]))
    const value[130051] "dead at end of block" "const" "insert auto destroy"
    (542961 'init var' value[130051] call_tmp[658202])
    (130054 'end of statement')
    unknown call_tmp[658207] "expr temp" "maybe param" "maybe type" "temp"
    (658210 'move' call_tmp[658207](130064 call _cond_test 1))
    if call_tmp[658207]
    {
      (130062 call(383957 call (partial) checkAccess _mt[243] this[133670]) i[130045](value = value[130051]))
      (480140 'end of statement' value[130051])
    }
    unknown tmp[425430] "maybe param" "temp"
    (425441 'move' tmp[425430](130072 call isRectangularArr this[133670]))
    unknown call_tmp[658214] "expr temp" "maybe param" "maybe type" "temp"
    (658217 'move' call_tmp[658214](425443 call _cond_invalid tmp[425430]))
    if call_tmp[658214]
    {
      (425446 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566144] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566145] "maybe param" "temp"
    unknown call_tmp[658219] "expr temp" "maybe param" "maybe type" "temp"
    (658222 'move' call_tmp[658219](425431 call isTrue tmp[425430]))
    (566150 'move' tmp[566145](566148 call _cond_test call_tmp[658219]))
    if tmp[566145]
    {
      (566155 'move' tmp[566144](566152 '_paramFoldLogical' tmp[566145] 1))
    }
    {
      unknown tmp[566157] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658224] "expr temp" "maybe param" "maybe type" "temp"
      (658227 'move' call_tmp[658224](130076 call isSparseArr this[133670]))
      (566159 'move' tmp[566157](425435 call isTrue call_tmp[658224]))
      (566164 'move' tmp[566144](566161 '_paramFoldLogical' tmp[566145] tmp[566157]))
    }
    unknown call_tmp[658229] "expr temp" "maybe param" "maybe type" "temp"
    (658232 'move' call_tmp[658229](130102 call _cond_test tmp[566144]))
    if call_tmp[658229]
    {
      unknown call_tmp[658236] "expr temp" "maybe param" "maybe type" "temp"
      (658239 'move' call_tmp[658236](130087 call(130082 call (partial) dsiLocalAccess _mt[243] value[130051]) i[130045]))
      (517918 'move' ret[517913](517917 'addr of' call_tmp[658236]))
      gotoReturn _end_localAccess[517911] _end_localAccess[517911]
      (480143 'end of statement' value[130051])
    }
    {
      unknown call_tmp[658243] "expr temp" "maybe param" "maybe type" "temp"
      (658246 'move' call_tmp[658243](130097 call i[130045] 0))
      unknown call_tmp[658248] "expr temp" "maybe param" "maybe type" "temp"
      (658251 'move' call_tmp[658248](130099 call(130091 call (partial) dsiLocalAccess _mt[243] value[130051]) call_tmp[658243]))
      (517923 'move' ret[517913](517922 'addr of' call_tmp[658248]))
      gotoReturn _end_localAccess[517911] _end_localAccess[517911]
      (480145 'end of statement' value[130051])
    }
    label _end_localAccess[517911]
    (517915 return ret[517913])
  }
  function _array[133588](?).localAccess[130125](arg _mt[133676]:_MT[238], const arg this[133674]:_array[133588](?), arg i[130122] :
  unknown call_tmp[658255] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517929] "RVV" "temp"
    unknown call_tmp[658283] "maybe param" "maybe type" "temp"
    (658286 'move' call_tmp[658283](383971 call _value _mt[243] this[133674]))
    const value[130135] "dead at end of block" "const" "insert auto destroy"
    (542963 'init var' value[130135] call_tmp[658283])
    (130138 'end of statement')
    unknown call_tmp[658288] "expr temp" "maybe param" "maybe type" "temp"
    (658291 'move' call_tmp[658288](130148 call _cond_test 1))
    if call_tmp[658288]
    {
      (130146 call(383976 call (partial) checkAccess _mt[243] this[133674]) i[130122](value = value[130135]))
      (480147 'end of statement' value[130135])
    }
    unknown tmp[425451] "maybe param" "temp"
    (425462 'move' tmp[425451](130156 call isRectangularArr this[133674]))
    unknown call_tmp[658295] "expr temp" "maybe param" "maybe type" "temp"
    (658298 'move' call_tmp[658295](425464 call _cond_invalid tmp[425451]))
    if call_tmp[658295]
    {
      (425467 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566171] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566172] "maybe param" "temp"
    unknown call_tmp[658300] "expr temp" "maybe param" "maybe type" "temp"
    (658303 'move' call_tmp[658300](425452 call isTrue tmp[425451]))
    (566177 'move' tmp[566172](566175 call _cond_test call_tmp[658300]))
    if tmp[566172]
    {
      (566182 'move' tmp[566171](566179 '_paramFoldLogical' tmp[566172] 1))
    }
    {
      unknown tmp[566184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658305] "expr temp" "maybe param" "maybe type" "temp"
      (658308 'move' call_tmp[658305](130160 call isSparseArr this[133674]))
      (566186 'move' tmp[566184](425456 call isTrue call_tmp[658305]))
      (566191 'move' tmp[566171](566188 '_paramFoldLogical' tmp[566172] tmp[566184]))
    }
    unknown call_tmp[658310] "expr temp" "maybe param" "maybe type" "temp"
    (658313 'move' call_tmp[658310](130184 call _cond_test tmp[566171]))
    if call_tmp[658310]
    {
      unknown call_tmp[658317] "expr temp" "maybe param" "maybe type" "temp"
      (658320 'move' call_tmp[658317](130169 call(130164 call (partial) dsiLocalAccess _mt[243] value[130135]) i[130122]))
      (517934 'move' ret[517929](517933 'deref' call_tmp[658317]))
      gotoReturn _end_localAccess[517927] _end_localAccess[517927]
      (480150 'end of statement' value[130135])
    }
    {
      unknown call_tmp[658324] "expr temp" "maybe param" "maybe type" "temp"
      (658327 'move' call_tmp[658324](130179 call i[130122] 0))
      unknown call_tmp[658329] "expr temp" "maybe param" "maybe type" "temp"
      (658332 'move' call_tmp[658329](130181 call(130173 call (partial) dsiLocalAccess _mt[243] value[130135]) call_tmp[658324]))
      (517939 'move' ret[517929](517938 'deref' call_tmp[658329]))
      gotoReturn _end_localAccess[517927] _end_localAccess[517927]
      (480152 'end of statement' value[130135])
    }
    label _end_localAccess[517927]
    (517931 return ret[517929])
  }
  where {
    unknown call_tmp[658336] "expr temp" "maybe param" "maybe type" "temp"
    (658339 'move' call_tmp[658336](359812 call _value _mt[243] this[133674]))
    unknown call_tmp[658343] "expr temp" "maybe param" "maybe type" "temp"
    (658346 'move' call_tmp[658343](130129 call eltType _mt[243] call_tmp[658336]))
    (130133 call shouldReturnRvalueByValue call_tmp[658343])
  }
  function _array[133588](?).localAccess[130208](arg _mt[133680]:_MT[238], const arg this[133678]:_array[133588](?), arg i[130205] :
  unknown call_tmp[658350] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517945] "RVV" "temp"
    unknown call_tmp[658378] "maybe param" "maybe type" "temp"
    (658381 'move' call_tmp[658378](383990 call _value _mt[243] this[133678]))
    const value[130218] "dead at end of block" "const" "insert auto destroy"
    (542965 'init var' value[130218] call_tmp[658378])
    (130221 'end of statement')
    unknown call_tmp[658383] "expr temp" "maybe param" "maybe type" "temp"
    (658386 'move' call_tmp[658383](130231 call _cond_test 1))
    if call_tmp[658383]
    {
      (130229 call(383995 call (partial) checkAccess _mt[243] this[133678]) i[130205](value = value[130218]))
      (480154 'end of statement' value[130218])
    }
    unknown tmp[425472] "maybe param" "temp"
    (425483 'move' tmp[425472](130239 call isRectangularArr this[133678]))
    unknown call_tmp[658390] "expr temp" "maybe param" "maybe type" "temp"
    (658393 'move' call_tmp[658390](425485 call _cond_invalid tmp[425472]))
    if call_tmp[658390]
    {
      (425488 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566198] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566199] "maybe param" "temp"
    unknown call_tmp[658395] "expr temp" "maybe param" "maybe type" "temp"
    (658398 'move' call_tmp[658395](425473 call isTrue tmp[425472]))
    (566204 'move' tmp[566199](566202 call _cond_test call_tmp[658395]))
    if tmp[566199]
    {
      (566209 'move' tmp[566198](566206 '_paramFoldLogical' tmp[566199] 1))
    }
    {
      unknown tmp[566211] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658400] "expr temp" "maybe param" "maybe type" "temp"
      (658403 'move' call_tmp[658400](130243 call isSparseArr this[133678]))
      (566213 'move' tmp[566211](425477 call isTrue call_tmp[658400]))
      (566218 'move' tmp[566198](566215 '_paramFoldLogical' tmp[566199] tmp[566211]))
    }
    unknown call_tmp[658405] "expr temp" "maybe param" "maybe type" "temp"
    (658408 'move' call_tmp[658405](130267 call _cond_test tmp[566198]))
    if call_tmp[658405]
    {
      unknown call_tmp[658412] "expr temp" "maybe param" "maybe type" "temp"
      (658415 'move' call_tmp[658412](130252 call(130247 call (partial) dsiLocalAccess _mt[243] value[130218]) i[130205]))
      (517950 'move' ret[517945](517949 'addr of' call_tmp[658412]))
      gotoReturn _end_localAccess[517943] _end_localAccess[517943]
      (480157 'end of statement' value[130218])
    }
    {
      unknown call_tmp[658419] "expr temp" "maybe param" "maybe type" "temp"
      (658422 'move' call_tmp[658419](130262 call i[130205] 0))
      unknown call_tmp[658424] "expr temp" "maybe param" "maybe type" "temp"
      (658427 'move' call_tmp[658424](130264 call(130256 call (partial) dsiLocalAccess _mt[243] value[130218]) call_tmp[658419]))
      (517955 'move' ret[517945](517954 'addr of' call_tmp[658424]))
      gotoReturn _end_localAccess[517943] _end_localAccess[517943]
      (480159 'end of statement' value[130218])
    }
    label _end_localAccess[517943]
    (517947 return ret[517945])
  }
  where {
    unknown call_tmp[658431] "expr temp" "maybe param" "maybe type" "temp"
    (658434 'move' call_tmp[658431](359822 call _value _mt[243] this[133678]))
    unknown call_tmp[658438] "expr temp" "maybe param" "maybe type" "temp"
    (658441 'move' call_tmp[658438](130212 call eltType _mt[243] call_tmp[658431]))
    (130216 call shouldReturnRvalueByConstRef call_tmp[658438])
  }
  function _array[133588](?).localAccess[130290](arg _mt[133684]:_MT[238], ref arg this[133682]:_array[133588](?), arg i[130286] ... :
  unknown call_tmp[658445] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[517961] "RVV" "temp"
    unknown call_tmp[658463] "expr temp" "maybe param" "maybe type" "temp"
    (658466 'move' call_tmp[658463](130295 call(384011 call (partial) localAccess _mt[243] this[133682]) i[130286]))
    (517966 'move' ret[517961](517965 'addr of' call_tmp[658463]))
    (517963 return ret[517961])
  }
  function _array[133588](?).localAccess[130315](arg _mt[133688]:_MT[238], const arg this[133686]:_array[133588](?), arg i[130311] ... :
  unknown call_tmp[658470] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517970] "RVV" "temp"
    unknown call_tmp[658488] "expr temp" "maybe param" "maybe type" "temp"
    (658491 'move' call_tmp[658488](130327 call(384020 call (partial) localAccess _mt[243] this[133686]) i[130311]))
    (517975 'move' ret[517970](517974 'deref' call_tmp[658488]))
    (517972 return ret[517970])
  }
  where {
    unknown call_tmp[658495] "expr temp" "maybe param" "maybe type" "temp"
    (658498 'move' call_tmp[658495](359836 call _value _mt[243] this[133686]))
    unknown call_tmp[658502] "expr temp" "maybe param" "maybe type" "temp"
    (658505 'move' call_tmp[658502](130319 call eltType _mt[243] call_tmp[658495]))
    (130323 call shouldReturnRvalueByValue call_tmp[658502])
  }
  function _array[133588](?).localAccess[130348](arg _mt[133692]:_MT[238], const arg this[133690]:_array[133588](?), arg i[130344] ... :
  unknown call_tmp[658509] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517979] "RVV" "temp"
    unknown call_tmp[658527] "expr temp" "maybe param" "maybe type" "temp"
    (658530 'move' call_tmp[658527](130360 call(384029 call (partial) localAccess _mt[243] this[133690]) i[130344]))
    (517984 'move' ret[517979](517983 'addr of' call_tmp[658527]))
    (517981 return ret[517979])
  }
  where {
    unknown call_tmp[658534] "expr temp" "maybe param" "maybe type" "temp"
    (658537 'move' call_tmp[658534](359844 call _value _mt[243] this[133690]))
    unknown call_tmp[658541] "expr temp" "maybe param" "maybe type" "temp"
    (658544 'move' call_tmp[658541](130352 call eltType _mt[243] call_tmp[658534]))
    (130356 call shouldReturnRvalueByConstRef call_tmp[658541])
  }
  function _array[133588](?).this[130373](arg _mt[133696]:_MT[238], arg this[133694]:_array[133588](?), arg d[130370]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517988] "RVV" "temp"
    unknown call_tmp[658548] "expr temp" "maybe param" "maybe type" "temp"
    (658551 'move' call_tmp[658548](130376 call rank _mt[243] d[130370]))
    unknown call_tmp[658555] "expr temp" "maybe param" "maybe type" "temp"
    (658558 'move' call_tmp[658555](384035 call rank _mt[243] this[133694]))
    unknown call_tmp[658560] "expr temp" "maybe param" "maybe type" "temp"
    (658563 'move' call_tmp[658560](130380 call != call_tmp[658548] call_tmp[658555]))
    unknown call_tmp[658565] "expr temp" "maybe param" "maybe type" "temp"
    (658568 'move' call_tmp[658565](130403 call _cond_test call_tmp[658560]))
    if call_tmp[658565]
    {
      (130401 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[658570] "expr temp" "maybe param" "maybe type" "temp"
    (658573 'move' call_tmp[658570](130416 call _cond_test 1))
    if call_tmp[658570]
    {
      unknown call_tmp[658579] "expr temp" "maybe param" "maybe type" "temp"
      (658582 'move' call_tmp[658579](384045 call _value _mt[243] this[133694]))
      (130414 call(384040 call (partial) checkSlice _mt[243] this[133694]) d[130370] call_tmp[658579])
    }
    const tmp[130465] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566225] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566226] "maybe param" "temp"
    unknown call_tmp[658586] "expr temp" "maybe param" "maybe type" "temp"
    (658589 'move' call_tmp[658586](359849 call _value _mt[243] this[133694]))
    unknown call_tmp[658593] "expr temp" "maybe param" "maybe type" "temp"
    (658596 'move' call_tmp[658593](130431 call(130427 call (partial) isSliceArrayView _mt[243] call_tmp[658586])))
    (566231 'move' tmp[566226](566229 call _cond_test call_tmp[658593]))
    if tmp[566226]
    {
      unknown tmp[566233] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658600] "expr temp" "maybe param" "maybe type" "temp"
      (658603 'move' call_tmp[658600](130433 call _value _mt[243] this[133694]))
      unknown call_tmp[658607] "expr temp" "maybe param" "maybe type" "temp"
      (658610 'move' call_tmp[658607](130436 call arr _mt[243] call_tmp[658600]))
      unknown call_tmp[658614] "expr temp" "maybe param" "maybe type" "temp"
      (658617 'move' call_tmp[658614](130440 call _value _mt[243] this[133694]))
      unknown call_tmp[658621] "expr temp" "maybe param" "maybe type" "temp"
      (658624 'move' call_tmp[658621](130445 call _ArrPid _mt[243] call_tmp[658614]))
      (566235 'move' tmp[566233](130449 call _build_tuple call_tmp[658607] call_tmp[658621]))
      (566240 'move' tmp[566225](566237 '_paramFoldLogical' tmp[566226] tmp[566233]))
    }
    {
      unknown tmp[566242] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658628] "expr temp" "maybe param" "maybe type" "temp"
      (658631 'move' call_tmp[658628](130452 call _value _mt[243] this[133694]))
      unknown call_tmp[658635] "expr temp" "maybe param" "maybe type" "temp"
      (658638 'move' call_tmp[658635](130456 call _pid _mt[243] this[133694]))
      (566244 'move' tmp[566242](130460 call _build_tuple call_tmp[658628] call_tmp[658635]))
      (566249 'move' tmp[566225](566246 '_paramFoldLogical' tmp[566226] tmp[566242]))
    }
    (542967 'init var' tmp[130465] tmp[566225])
    (130472 call _check_tuple_var_decl tmp[130465] 2)
    (480166 'end of statement')
    unknown call_tmp[658640] "maybe param" "maybe type" "temp"
    (658643 'move' call_tmp[658640](130466 call tmp[130465] 0))
    const arr[130421] "dead at end of block" "const" "insert auto destroy"
    (542969 'init var' arr[130421] call_tmp[658640])
    unknown call_tmp[658645] "maybe param" "maybe type" "temp"
    (658648 'move' call_tmp[658645](130469 call tmp[130465] 1))
    const arrpid[130423] "dead at end of block" "const" "insert auto destroy"
    (542971 'init var' arrpid[130423] call_tmp[658645])
    (130477 'end of statement')
    unknown call_tmp[658652] "expr temp" "maybe param" "maybe type" "temp"
    (658655 'move' call_tmp[658652](130483 call eltType _mt[243] this[133694]))
    unknown call_tmp[658659] "expr temp" "maybe param" "maybe type" "temp"
    (658662 'move' call_tmp[658659](130489 call _pid _mt[243] d[130370]))
    unknown call_tmp[658666] "expr temp" "maybe param" "maybe type" "temp"
    (658669 'move' call_tmp[658666](130494 call _instance _mt[243] d[130370]))
    unknown call_tmp[658671] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658674 'move' call_tmp[658671](747882 'new' ArrayViewSliceArr[384049](?)(eltType = call_tmp[658652])(_DomPid = call_tmp[658659])(dom = call_tmp[658666])(_ArrPid = arrpid[130423])(_ArrInstance = arr[130421])(_chpl_manager = unmanaged[220](?))))
    unknown a[130503] "dead at end of block" "insert auto destroy"
    (542973 'init var' a[130503] call_tmp[658671])
    (130506 'end of statement' arrpid[130423] arr[130421])
    unknown call_tmp[658678] "expr temp" "maybe param" "maybe type" "temp"
    (658681 'move' call_tmp[658678](130508 call _value _mt[243] d[130370]))
    (130520 call(130511 call (partial) add_arr _mt[243] call_tmp[658678]) a[130503](locking = 1)(addToList = 0))
    (480169 'end of statement' a[130503])
    unknown call_tmp[658685] "expr temp" "maybe param" "maybe type" "temp"
    (658688 'move' call_tmp[658685](130525 call _newArray a[130503]))
    (517993 'move' ret[517988](517992 'deref' call_tmp[658685]))
    gotoReturn _end_this[517986] _end_this[517986]
    (480171 'end of statement' a[130503])
    label _end_this[517986]
    (517990 return ret[517988])
  }
  function _array[133588](?).this[130536](arg _mt[133700]:_MT[238], arg this[133698]:_array[133588](?), arg ranges[130533]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517999] "RVV" "temp"
    unknown call_tmp[658692] "expr temp" "maybe param" "maybe type" "temp"
    (658695 'move' call_tmp[658692](130551 call _cond_test 1))
    if call_tmp[658692]
    {
      unknown call_tmp[658701] "expr temp" "maybe param" "maybe type" "temp"
      (658704 'move' call_tmp[658701](384068 call _value _mt[243] this[133698]))
      (130549 call(384063 call (partial) checkSlice _mt[243] this[133698])(130545 'expand_tuple' ranges[130533])(value = call_tmp[658701]))
    }
    unknown call_tmp[658708] "maybe param" "maybe type" "temp"
    (658711 'move' call_tmp[658708](130561 call(384072 call (partial) _dom _mt[243] this[133698])(130559 'expand_tuple' ranges[130533])))
    unknown d[130562] "dead at end of block" "no auto destroy"
    (542975 'init var' d[130562] call_tmp[658708])
    (130565 'end of statement')
    unknown call_tmp[658715] "expr temp" "maybe param" "maybe type" "temp"
    (658718 'move' call_tmp[658715](130567 call _value _mt[243] d[130562]))
    unknown call_tmp[658722] "expr temp" "maybe param" "maybe type" "temp"
    (658725 'move' call_tmp[658722](130572 call _free_when_no_arrs _mt[243] call_tmp[658715]))
    (130576 call = call_tmp[658722] 1)
    (480174 'end of statement' d[130562])
    const tmp[130621] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566256] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566257] "maybe param" "temp"
    unknown call_tmp[658729] "expr temp" "maybe param" "maybe type" "temp"
    (658732 'move' call_tmp[658729](359862 call _value _mt[243] this[133698]))
    unknown call_tmp[658736] "expr temp" "maybe param" "maybe type" "temp"
    (658739 'move' call_tmp[658736](130589 call(130585 call (partial) isSliceArrayView _mt[243] call_tmp[658729])))
    (566262 'move' tmp[566257](566260 call _cond_test call_tmp[658736]))
    if tmp[566257]
    {
      unknown tmp[566264] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658743] "expr temp" "maybe param" "maybe type" "temp"
      (658746 'move' call_tmp[658743](130591 call _value _mt[243] this[133698]))
      unknown call_tmp[658750] "expr temp" "maybe param" "maybe type" "temp"
      (658753 'move' call_tmp[658750](130594 call arr _mt[243] call_tmp[658743]))
      unknown call_tmp[658757] "expr temp" "maybe param" "maybe type" "temp"
      (658760 'move' call_tmp[658757](130598 call _value _mt[243] this[133698]))
      unknown call_tmp[658764] "expr temp" "maybe param" "maybe type" "temp"
      (658767 'move' call_tmp[658764](130601 call _ArrPid _mt[243] call_tmp[658757]))
      (566266 'move' tmp[566264](130605 call _build_tuple call_tmp[658750] call_tmp[658764]))
      (566271 'move' tmp[566256](566268 '_paramFoldLogical' tmp[566257] tmp[566264]))
    }
    {
      unknown tmp[566273] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658771] "expr temp" "maybe param" "maybe type" "temp"
      (658774 'move' call_tmp[658771](130608 call _value _mt[243] this[133698]))
      unknown call_tmp[658778] "expr temp" "maybe param" "maybe type" "temp"
      (658781 'move' call_tmp[658778](130612 call _pid _mt[243] this[133698]))
      (566275 'move' tmp[566273](130616 call _build_tuple call_tmp[658771] call_tmp[658778]))
      (566280 'move' tmp[566256](566277 '_paramFoldLogical' tmp[566257] tmp[566273]))
    }
    (542977 'init var' tmp[130621] tmp[566256])
    (130628 call _check_tuple_var_decl tmp[130621] 2)
    (480176 'end of statement')
    unknown call_tmp[658783] "maybe param" "maybe type" "temp"
    (658786 'move' call_tmp[658783](130622 call tmp[130621] 0))
    const arr[130579] "dead at end of block" "const" "insert auto destroy"
    (542979 'init var' arr[130579] call_tmp[658783])
    unknown call_tmp[658788] "maybe param" "maybe type" "temp"
    (658791 'move' call_tmp[658788](130625 call tmp[130621] 1))
    const arrpid[130581] "dead at end of block" "const" "insert auto destroy"
    (542981 'init var' arrpid[130581] call_tmp[658788])
    (130633 'end of statement')
    unknown call_tmp[658795] "expr temp" "maybe param" "maybe type" "temp"
    (658798 'move' call_tmp[658795](130639 call eltType _mt[243] this[133698]))
    unknown call_tmp[658802] "expr temp" "maybe param" "maybe type" "temp"
    (658805 'move' call_tmp[658802](130645 call _pid _mt[243] d[130562]))
    unknown call_tmp[658809] "expr temp" "maybe param" "maybe type" "temp"
    (658812 'move' call_tmp[658809](130650 call _instance _mt[243] d[130562]))
    unknown call_tmp[658814] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658817 'move' call_tmp[658814](747883 'new' ArrayViewSliceArr[384049](?)(eltType = call_tmp[658795])(_DomPid = call_tmp[658802])(dom = call_tmp[658809])(_ArrPid = arrpid[130581])(_ArrInstance = arr[130579])(_chpl_manager = unmanaged[220](?))))
    unknown a[130659] "dead at end of block" "insert auto destroy"
    (542983 'init var' a[130659] call_tmp[658814])
    (130662 'end of statement' d[130562] d[130562] arrpid[130581] arr[130579])
    unknown call_tmp[658821] "expr temp" "maybe param" "maybe type" "temp"
    (658824 'move' call_tmp[658821](130664 call _value _mt[243] d[130562]))
    (130676 call(130667 call (partial) add_arr _mt[243] call_tmp[658821]) a[130659](locking = 0)(addToList = 0))
    (480181 'end of statement' d[130562] a[130659])
    unknown call_tmp[658828] "expr temp" "maybe param" "maybe type" "temp"
    (658831 'move' call_tmp[658828](130681 call _newArray a[130659]))
    (518004 'move' ret[517999](518003 'deref' call_tmp[658828]))
    gotoReturn _end_this[517997] _end_this[517997]
    (480184 'end of statement' a[130659])
    label _end_this[517997]
    (518001 return ret[517999])
  }
  where {
    (130541 call chpl__isTupleOfRanges ranges[130533])
  }
  function _array[133588](?).this[130693](arg _mt[133704]:_MT[238], arg this[133702]:_array[133588](?), arg args[130690]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518010] "RVV" "temp"
    unknown call_tmp[658835] "expr temp" "maybe param" "maybe type" "temp"
    (658838 'move' call_tmp[658835](130712 call _cond_test 1))
    if call_tmp[658835]
    {
      (130710 call(384090 call (partial) checkRankChange _mt[243] this[133702]) args[130690])
    }
    unknown call_tmp[658844] "maybe param" "maybe type" "temp"
    (658847 'move' call_tmp[658844](130725 call(130719 call (partial) _dom _mt[243] this[133702])(130723 'expand_tuple' args[130690])))
    const rcdom[130726] "dead at end of block" "const" "insert auto destroy"
    (542985 'init var' rcdom[130726] call_tmp[658844])
    (130729 'end of statement')
    unknown call_tmp[658851] "expr temp" "maybe param" "maybe type" "temp"
    (658854 'move' call_tmp[658851](130736 call _value _mt[243] this[133702]))
    unknown call_tmp[658858] "expr temp" "maybe param" "maybe type" "temp"
    (658861 'move' call_tmp[658858](130740 call _pid _mt[243] this[133702]))
    unknown call_tmp[658863] "maybe param" "maybe type" "temp"
    (658866 'move' call_tmp[658863](130744 call _build_tuple call_tmp[658851] call_tmp[658858]))
    const tmp[130746] "dead at end of block" "const" "insert auto destroy" "temp"
    (542987 'init var' tmp[130746] call_tmp[658863])
    (130753 call _check_tuple_var_decl tmp[130746] 2)
    (480187 'end of statement')
    unknown call_tmp[658868] "maybe param" "maybe type" "temp"
    (658871 'move' call_tmp[658868](130747 call tmp[130746] 0))
    const arr[130730] "dead at end of block" "const" "insert auto destroy"
    (542989 'init var' arr[130730] call_tmp[658868])
    unknown call_tmp[658873] "maybe param" "maybe type" "temp"
    (658876 'move' call_tmp[658873](130750 call tmp[130746] 1))
    const arrpid[130732] "dead at end of block" "const" "insert auto destroy"
    (542991 'init var' arrpid[130732] call_tmp[658873])
    (130758 'end of statement')
    unknown call_tmp[658880] "expr temp" "maybe param" "maybe type" "temp"
    (658883 'move' call_tmp[658880](130764 call eltType _mt[243] this[133702]))
    unknown call_tmp[658887] "expr temp" "maybe param" "maybe type" "temp"
    (658890 'move' call_tmp[658887](130770 call _pid _mt[243] rcdom[130726]))
    unknown call_tmp[658894] "expr temp" "maybe param" "maybe type" "temp"
    (658897 'move' call_tmp[658894](130775 call _instance _mt[243] rcdom[130726]))
    unknown call_tmp[658901] "expr temp" "maybe param" "maybe type" "temp"
    (658904 'move' call_tmp[658901](130784 call _value _mt[243] rcdom[130726]))
    unknown call_tmp[658908] "expr temp" "maybe param" "maybe type" "temp"
    (658911 'move' call_tmp[658908](130787 call collapsedDim _mt[243] call_tmp[658901]))
    unknown call_tmp[658915] "expr temp" "maybe param" "maybe type" "temp"
    (658918 'move' call_tmp[658915](130792 call _value _mt[243] rcdom[130726]))
    unknown call_tmp[658922] "expr temp" "maybe param" "maybe type" "temp"
    (658925 'move' call_tmp[658922](130795 call idx _mt[243] call_tmp[658915]))
    unknown call_tmp[658927] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658930 'move' call_tmp[658927](747884 'new' ArrayViewRankChangeArr[384096](?)(eltType = call_tmp[658880])(_DomPid = call_tmp[658887])(dom = call_tmp[658894])(_ArrPid = arrpid[130732])(_ArrInstance = arr[130730])(collapsedDim = call_tmp[658908])(idx = call_tmp[658922])(_chpl_manager = unmanaged[220](?))))
    unknown a[130800] "dead at end of block" "insert auto destroy"
    (542993 'init var' a[130800] call_tmp[658927])
    (130803 'end of statement' rcdom[130726] rcdom[130726] arrpid[130732] arr[130730] rcdom[130726] rcdom[130726])
    unknown call_tmp[658934] "expr temp" "maybe param" "maybe type" "temp"
    (658937 'move' call_tmp[658934](130805 call _value _mt[243] rcdom[130726]))
    (130815 call(130808 call (partial) add_arr _mt[243] call_tmp[658934]) a[130800](locking = 0))
    (480194 'end of statement' rcdom[130726] a[130800])
    unknown call_tmp[658941] "expr temp" "maybe param" "maybe type" "temp"
    (658944 'move' call_tmp[658941](130820 call _newArray a[130800]))
    (518015 'move' ret[518010](518014 'deref' call_tmp[658941]))
    gotoReturn _end_this[518008] _end_this[518008]
    (480197 'end of statement' a[130800])
    label _end_this[518008]
    (518012 return ret[518010])
  }
  where {
    unknown call_tmp[658948] "expr temp" "maybe param" "maybe type" "temp"
    (658951 'move' call_tmp[658948](359874 call _value _mt[243] this[133702]))
    unknown call_tmp[658955] "expr temp" "maybe param" "maybe type" "temp"
    (658958 'move' call_tmp[658955](130699 call dom _mt[243] call_tmp[658948]))
    unknown call_tmp[658962] "expr temp" "maybe param" "maybe type" "temp"
    (658965 'move' call_tmp[658962](130702 call idxType _mt[243] call_tmp[658955]))
    (130705 call _validRankChangeArgs args[130690] call_tmp[658962])
  }
  function _array[133588](?).checkRankChange[130830](arg _mt[133708]:_MT[238], arg this[133706]:_array[133588](?), arg args[130828]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130911] "dead at end of block" "insert auto destroy"
      (542995 'init var' i[130911] 0)
      (480199 'end of statement')
      unknown tmp[130912] "maybe param" "temp"
      unknown call_tmp[658969] "expr temp" "maybe param" "maybe type" "temp"
      (658972 'move' call_tmp[658969](130834 call size _mt[243] args[130828]))
      unknown call_tmp[658974] "expr temp" "maybe param" "maybe type" "temp"
      (658977 'move' call_tmp[658974](130838 call - call_tmp[658969] 1))
      (130924 'move' tmp[130912](130922 call chpl_compute_low_param_loop_bound 0 call_tmp[658974]))
      unknown tmp[130913] "maybe param" "temp"
      unknown call_tmp[658981] "expr temp" "maybe param" "maybe type" "temp"
      (658984 'move' call_tmp[658981](130931 call size _mt[243] args[130828]))
      unknown call_tmp[658986] "expr temp" "maybe param" "maybe type" "temp"
      (658989 'move' call_tmp[658986](130929 call - call_tmp[658981] 1))
      (130937 'move' tmp[130913](130935 call chpl_compute_high_param_loop_bound 0 call_tmp[658986]))
      unknown tmp[130914] "maybe param" "temp"
      (130940 'move' tmp[130914] 1)
      ParamForLoop[130942]
      { i[130911] tmp[130912] tmp[130913] tmp[130914]
        unknown call_tmp[658993] "expr temp" "maybe param" "maybe type" "temp"
        (658996 'move' call_tmp[658993](359888 call _value _mt[243] this[133706]))
        unknown call_tmp[659000] "expr temp" "maybe param" "maybe type" "temp"
        (659003 'move' call_tmp[659000](130843 call dom _mt[243] call_tmp[658993]))
        unknown call_tmp[659007] "expr temp" "maybe param" "maybe type" "temp"
        (659010 'move' call_tmp[659007](130851 call(130846 call (partial) dsiDim _mt[243] call_tmp[659000]) i[130911]))
        unknown call_tmp[659014] "expr temp" "maybe param" "maybe type" "temp"
        (659017 'move' call_tmp[659014](130858 call args[130828] i[130911]))
        unknown call_tmp[659019] "expr temp" "maybe param" "maybe type" "temp"
        (659022 'move' call_tmp[659019](130860 call(130852 call (partial) boundsCheck _mt[243] call_tmp[659007]) call_tmp[659014]))
        unknown call_tmp[659024] "expr temp" "maybe param" "maybe type" "temp"
        (659027 'move' call_tmp[659024](130861 call ! call_tmp[659019]))
        unknown call_tmp[659029] "expr temp" "maybe param" "maybe type" "temp"
        (659032 'move' call_tmp[659029](130906 call _cond_test call_tmp[659024]))
        if call_tmp[659029]
        {
          unknown call_tmp[659034] "expr temp" "maybe param" "maybe type" "temp"
          (659037 'move' call_tmp[659034](130903 call args[130828] i[130911]))
          (130904 call halt "array slice out of bounds in dimension " i[130911] ": " call_tmp[659034])
          (480200 'end of statement' i[130911] i[130911])
        }
      }
      label _unused_continueLabel[130916]
      label _breakLabel[130915]
    }
    (518019 return _void[55])
  }
  function _array[133588](?).localSlice[130960](arg _mt[133712]:_MT[238], arg this[133710]:_array[133588](?), arg r[130957]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518023] "RVV" "temp"
    unknown call_tmp[659041] "expr temp" "maybe param" "maybe type" "temp"
    (659044 'move' call_tmp[659041](130983 call _cond_test 1))
    if call_tmp[659041]
    {
      unknown call_tmp[659050] "expr temp" "maybe param" "maybe type" "temp"
      (659053 'move' call_tmp[659050](384126 call _value _mt[243] this[133710]))
      (130981 call(384121 call (partial) checkSlice _mt[243] this[133710])(130977 'expand_tuple' r[130957])(value = call_tmp[659050]))
    }
    unknown call_tmp[659057] "maybe param" "maybe type" "temp"
    (659060 'move' call_tmp[659057](130993 call(384130 call (partial) _dom _mt[243] this[133710])(130991 'expand_tuple' r[130957])))
    unknown dom[130994] "dead at end of block" "insert auto destroy"
    (542997 'init var' dom[130994] call_tmp[659057])
    (130997 'end of statement')
    unknown call_tmp[659064] "expr temp" "maybe param" "maybe type" "temp"
    (659067 'move' call_tmp[659064](131001 call(384137 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133710]) dom[130994]))
    (518028 'move' ret[518023](518027 'deref' call_tmp[659064]))
    gotoReturn _end_localSlice[518021] _end_localSlice[518021]
    (480204 'end of statement' dom[130994])
    label _end_localSlice[518021]
    (518025 return ret[518023])
  }
  where {
    unknown tmp[425493] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492181] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659071] "expr temp" "maybe param" "maybe type" "temp"
      (659074 'move' call_tmp[659071](384114 call _value _mt[243] this[133710]))
      (492185 'move' call_type_tmp[492181](130964 'typeof' call_tmp[659071]))
    }
    (425504 'move' tmp[425493](354296 'is_subtype' DefaultRectangularArr[379693](?) call_type_tmp[492181]))
    unknown call_tmp[659076] "expr temp" "maybe param" "maybe type" "temp"
    (659079 'move' call_tmp[659076](425506 call _cond_invalid tmp[425493]))
    if call_tmp[659076]
    {
      (425509 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566287] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566288] "maybe param" "temp"
    unknown call_tmp[659081] "expr temp" "maybe param" "maybe type" "temp"
    (659084 'move' call_tmp[659081](425494 call isTrue tmp[425493]))
    (566293 'move' tmp[566288](566291 call _cond_test call_tmp[659081]))
    if tmp[566288]
    {
      unknown tmp[566295] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659086] "expr temp" "maybe param" "maybe type" "temp"
      (659089 'move' call_tmp[659086](130971 call chpl__isTupleOfRanges r[130957]))
      (566297 'move' tmp[566295](425497 call isTrue call_tmp[659086]))
      (566302 'move' tmp[566287](566299 '_paramFoldLogical' tmp[566288] tmp[566295]))
    }
    {
      (566307 'move' tmp[566287](566304 '_paramFoldLogical' tmp[566288] 0))
    }
    (748300 call chpl_statementLevelSymbol tmp[566287])
  }
  function _array[133588](?).localSlice[131013](arg _mt[133716]:_MT[238], arg this[133714]:_array[133588](?), arg d[131010]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518034] "RVV" "temp"
    unknown call_tmp[659091] "expr temp" "maybe param" "maybe type" "temp"
    (659094 'move' call_tmp[659091](131035 call _cond_test 1))
    if call_tmp[659091]
    {
      unknown call_tmp[659100] "expr temp" "maybe param" "maybe type" "temp"
      (659103 'move' call_tmp[659100](131028 call(131024 call (partial) getIndices _mt[243] d[131010])))
      unknown call_tmp[659107] "expr temp" "maybe param" "maybe type" "temp"
      (659110 'move' call_tmp[659107](384153 call _value _mt[243] this[133714]))
      (131033 call(384149 call (partial) checkSlice _mt[243] this[133714])(131029 'expand_tuple' call_tmp[659100])(value = call_tmp[659107]))
    }
    unknown call_tmp[659114] "expr temp" "maybe param" "maybe type" "temp"
    (659117 'move' call_tmp[659114](131044 call(384157 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133714]) d[131010]))
    (518039 'move' ret[518034](518038 'deref' call_tmp[659114]))
    (518036 return ret[518034])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492187] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659121] "expr temp" "maybe param" "maybe type" "temp"
      (659124 'move' call_tmp[659121](384143 call _value _mt[243] this[133714]))
      (492191 'move' call_type_tmp[492187](131017 'typeof' call_tmp[659121]))
    }
    (354297 'is_subtype' DefaultRectangularArr[379693](?) call_type_tmp[492187])
  }
  function _array[133588](?).chpl__localSliceDefaultArithArrHelp[131056](arg _mt[133720]:_MT[238], arg this[133718]:_array[133588](?), arg d[131053]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no copy return"
  {
    unknown ret[518043] "RVV" "temp"
    unknown call_tmp[659128] "expr temp" "maybe param" "maybe type" "temp"
    (659131 'move' call_tmp[659128](384163 call _value _mt[243] this[133718]))
    unknown call_tmp[659133] "expr temp" "maybe param" "maybe type" "temp"
    (659136 'move' call_tmp[659133](131059 '_wide_get_locale' call_tmp[659128]))
    unknown call_tmp[659138] "expr temp" "maybe param" "maybe type" "temp"
    (659141 'move' call_tmp[659138](131060 call chpl_localeID_to_locale call_tmp[659133]))
    unknown call_tmp[659143] "expr temp" "maybe param" "maybe type" "temp"
    (659146 'move' call_tmp[659143](384166 call here[90435]))
    unknown call_tmp[659148] "expr temp" "maybe param" "maybe type" "temp"
    (659151 'move' call_tmp[659148](131063 call != call_tmp[659138] call_tmp[659143]))
    unknown call_tmp[659153] "expr temp" "maybe param" "maybe type" "temp"
    (659156 'move' call_tmp[659153](131096 call _cond_test call_tmp[659148]))
    if call_tmp[659153]
    {
      unknown call_tmp[659160] "expr temp" "maybe param" "maybe type" "temp"
      (659163 'move' call_tmp[659160](384169 call _value _mt[243] this[133718]))
      unknown call_tmp[659165] "expr temp" "maybe param" "maybe type" "temp"
      (659168 'move' call_tmp[659165](131088 '_wide_get_node' call_tmp[659160]))
      unknown call_tmp[659170] "expr temp" "maybe param" "maybe type" "temp"
      (659173 'move' call_tmp[659170](359893 call here[90435]))
      unknown call_tmp[659177] "expr temp" "maybe param" "maybe type" "temp"
      (659180 'move' call_tmp[659177](131091 call id _mt[243] call_tmp[659170]))
      (131094 call halt "Attempting to take a local slice of an array on locale " call_tmp[659165] " from locale " call_tmp[659177])
    }
    unknown call_tmp[659182] "expr temp" "maybe param" "maybe type" "temp"
    (659185 'move' call_tmp[659182](131105 call this[133718] d[131053]))
    (518048 'move' ret[518043](518047 'deref' call_tmp[659182]))
    (518045 return ret[518043])
  }
  function _array[133588](?).localSlice[131116](arg _mt[133724]:_MT[238], arg this[133722]:_array[133588](?), arg r[131113]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518052] "RVV" "temp"
    unknown call_tmp[659189] "expr temp" "maybe param" "maybe type" "temp"
    (659192 'move' call_tmp[659189](131141 call _cond_test 1))
    if call_tmp[659189]
    {
      unknown call_tmp[659198] "expr temp" "maybe param" "maybe type" "temp"
      (659201 'move' call_tmp[659198](384191 call _value _mt[243] this[133722]))
      (131139 call(384186 call (partial) checkSlice _mt[243] this[133722])(131135 'expand_tuple' r[131113])(value = call_tmp[659198]))
    }
    unknown call_tmp[659205] "expr temp" "maybe param" "maybe type" "temp"
    (659208 'move' call_tmp[659205](359896 call _value _mt[243] this[133722]))
    unknown call_tmp[659212] "expr temp" "maybe param" "maybe type" "temp"
    (659215 'move' call_tmp[659212](131153 call(131148 call (partial) dsiLocalSlice _mt[243] call_tmp[659205]) r[131113]))
    (518057 'move' ret[518052](518056 'deref' call_tmp[659212]))
    (518054 return ret[518052])
  }
  where {
    unknown tmp[425514] "maybe param" "temp"
    (425525 'move' tmp[425514](131121 call chpl__isTupleOfRanges r[131113]))
    unknown call_tmp[659217] "expr temp" "maybe param" "maybe type" "temp"
    (659220 'move' call_tmp[659217](425527 call _cond_invalid tmp[425514]))
    if call_tmp[659217]
    {
      (425530 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566314] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566315] "maybe param" "temp"
    unknown call_tmp[659222] "expr temp" "maybe param" "maybe type" "temp"
    (659225 'move' call_tmp[659222](425515 call isTrue tmp[425514]))
    (566320 'move' tmp[566315](566318 call _cond_test call_tmp[659222]))
    if tmp[566315]
    {
      { scopeless type
        unknown call_type_tmp[492193] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659229] "expr temp" "maybe param" "maybe type" "temp"
        (659232 'move' call_tmp[659229](384180 call _value _mt[243] this[133722]))
        (492197 'move' call_type_tmp[492193](131124 'typeof' call_tmp[659229]))
      }
      unknown tmp[566322] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659234] "expr temp" "maybe param" "maybe type" "temp"
      (659237 'move' call_tmp[659234](354298 'is_subtype' DefaultRectangularArr[379693](?) call_type_tmp[492193]))
      unknown call_tmp[659239] "expr temp" "maybe param" "maybe type" "temp"
      (659242 'move' call_tmp[659239](131128 call ! call_tmp[659234]))
      (566324 'move' tmp[566322](425518 call isTrue call_tmp[659239]))
      (566329 'move' tmp[566314](566326 '_paramFoldLogical' tmp[566315] tmp[566322]))
    }
    {
      (566334 'move' tmp[566314](566331 '_paramFoldLogical' tmp[566315] 0))
    }
    (748302 call chpl_statementLevelSymbol tmp[566314])
  }
  function _array[133588](?).localSlice[131165](arg _mt[133728]:_MT[238], arg this[133726]:_array[133588](?), arg d[131162]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518061] "RVV" "temp"
    unknown call_tmp[659248] "expr temp" "maybe param" "maybe type" "temp"
    (659251 'move' call_tmp[659248](131173 call(131169 call (partial) getIndices _mt[243] d[131162])))
    unknown call_tmp[659253] "expr temp" "maybe param" "maybe type" "temp"
    (659256 'move' call_tmp[659253](131176 call(384197 call (partial) localSlice _mt[243] this[133726])(131174 'expand_tuple' call_tmp[659248])))
    (518066 'move' ret[518061](518065 'deref' call_tmp[659253]))
    (518063 return ret[518061])
  }
  function _array[133588](?).these[131184](arg _mt[133732]:_MT[238], arg this[133730]:_array[133588](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[518070] "RVV" "temp"
    {
      unknown _indexOfInterest[131197] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131198] "expr temp" "temp"
      unknown call_tmp[659260] "expr temp" "maybe param" "maybe type" "temp"
      (659263 'move' call_tmp[659260](359901 call _value _mt[243] this[133730]))
      unknown call_tmp[659267] "expr temp" "maybe param" "maybe type" "temp"
      (659270 'move' call_tmp[659267](131192 call(131188 call (partial) these _mt[243] call_tmp[659260])))
      (131207 'move' _iterator[131198](131205 call _getIterator call_tmp[659267]))
      Defer
      {
        {
          (131224 call _freeIterator _iterator[131198])
        }
      }
      { scopeless type
        (131213 'move' _indexOfInterest[131197](131210 call iteratorIndex _iterator[131198]))
      }
      ForLoop[131199]
      {
        unknown i[131217] "index var" "insert auto destroy"
        (480214 'end of statement')
        (131219 'move' i[131217] _indexOfInterest[131197])
        (480215 'end of statement' i[131217])
        {
          unknown yret[518074] "YVV" "temp"
          (518077 'move' yret[518074](518076 'addr of' i[131217]))
          (518079 yield yret[518074])
          (480217 'end of statement' i[131217])
        }
        label _continueLabel[131202]
        _indexOfInterest[131197]
        _iterator[131198]
      }
      label _breakLabel[131203]
    }
    (518072 return ret[518070])
  }
  function _array[133588](?).these[131240](arg _mt[133736]:_MT[238], arg this[133734]:_array[133588](?), param arg tag[131237]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518083] "RVV" "temp"
    {
      unknown _indexOfInterest[131269] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131270] "expr temp" "temp"
      unknown call_tmp[659274] "expr temp" "maybe param" "maybe type" "temp"
      (659277 'move' call_tmp[659274](359906 call _value _mt[243] this[133734]))
      unknown call_tmp[659281] "expr temp" "maybe param" "maybe type" "temp"
      (659284 'move' call_tmp[659281](131265 call(131260 call (partial) these _mt[243] call_tmp[659274]) tag[131237]))
      (131279 'move' _iterator[131270](131277 call _getIterator call_tmp[659281]))
      Defer
      {
        {
          (131296 call _freeIterator _iterator[131270])
        }
      }
      { scopeless type
        (131285 'move' _indexOfInterest[131269](131282 call iteratorIndex _iterator[131270]))
      }
      ForLoop[131271]
      {
        unknown i[131289] "index var" "insert auto destroy"
        (480220 'end of statement')
        (131291 'move' i[131289] _indexOfInterest[131269])
        (480221 'end of statement' i[131289])
        unknown yret[518087] "YVV" "temp"
        (518090 'move' yret[518087](518089 'addr of' i[131289]))
        (518092 yield yret[518087])
        (480223 'end of statement' i[131289])
        label _continueLabel[131274]
        _indexOfInterest[131269]
        _iterator[131270]
      }
      label _breakLabel[131275]
    }
    (518085 return ret[518083])
  }
  where {
    unknown tmp[425535] "maybe param" "temp"
    (425546 'move' tmp[425535](131247 call == tag[131237] standalone[451]))
    unknown call_tmp[659286] "expr temp" "maybe param" "maybe type" "temp"
    (659289 'move' call_tmp[659286](425548 call _cond_invalid tmp[425535]))
    if call_tmp[659286]
    {
      (425551 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566341] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566342] "maybe param" "temp"
    unknown call_tmp[659291] "expr temp" "maybe param" "maybe type" "temp"
    (659294 'move' call_tmp[659291](425536 call isTrue tmp[425535]))
    (566347 'move' tmp[566342](566345 call _cond_test call_tmp[659291]))
    if tmp[566342]
    {
      unknown tmp[566349] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659298] "expr temp" "maybe param" "maybe type" "temp"
      (659301 'move' call_tmp[659298](384204 call _value _mt[243] this[133734]))
      unknown call_tmp[659303] "expr temp" "maybe param" "maybe type" "temp"
      (659306 'move' call_tmp[659303](131255 'method call resolves' call_tmp[659298] "these"(tag = tag[131237])))
      (566351 'move' tmp[566349](425539 call isTrue call_tmp[659303]))
      (566356 'move' tmp[566341](566353 '_paramFoldLogical' tmp[566342] tmp[566349]))
    }
    {
      (566361 'move' tmp[566341](566358 '_paramFoldLogical' tmp[566342] 0))
    }
    (748304 call chpl_statementLevelSymbol tmp[566341])
  }
  function _array[133588](?).these[131313](arg _mt[133740]:_MT[238], arg this[133738]:_array[133588](?), param arg tag[131310]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[518096] "RVV" "temp"
    {
      unknown _indexOfInterest[131333] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131334] "expr temp" "temp"
      unknown call_tmp[659310] "expr temp" "maybe param" "maybe type" "temp"
      (659313 'move' call_tmp[659310](359911 call _value _mt[243] this[133738]))
      unknown call_tmp[659317] "expr temp" "maybe param" "maybe type" "temp"
      (659320 'move' call_tmp[659317](131329 call(131324 call (partial) these _mt[243] call_tmp[659310]) tag[131310]))
      (131343 'move' _iterator[131334](131341 call _getIterator call_tmp[659317]))
      Defer
      {
        {
          (131360 call _freeIterator _iterator[131334])
        }
      }
      { scopeless type
        (131349 'move' _indexOfInterest[131333](131346 call iteratorIndex _iterator[131334]))
      }
      ForLoop[131335]
      {
        unknown followThis[131353] "index var" "insert auto destroy"
        (480226 'end of statement')
        (131355 'move' followThis[131353] _indexOfInterest[131333])
        (480227 'end of statement' followThis[131353])
        unknown yret[518100] "YVV" "temp"
        (518103 'move' yret[518100](518102 'deref' followThis[131353]))
        (518105 yield yret[518100])
        (480229 'end of statement' followThis[131353])
        label _continueLabel[131338]
        _indexOfInterest[131333]
        _iterator[131334]
      }
      label _breakLabel[131339]
    }
    (518098 return ret[518096])
  }
  where {
    (131320 call == tag[131310] leader[447])
  }
  function _array[133588](?).these[131377](arg _mt[133744]:_MT[238], arg this[133742]:_array[133588](?), param arg tag[131374]:iterKind[453], arg followThis[131379]:_any[178](?), param arg fast[131383]:bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518109] "RVV" "temp"
    unknown call_tmp[659324] "expr temp" "maybe param" "maybe type" "temp"
    (659327 'move' call_tmp[659324](384217 call _value _mt[243] this[133742]))
    unknown call_tmp[659329] "expr temp" "maybe param" "maybe type" "temp"
    (659332 'move' call_tmp[659329](131403 'method call resolves' call_tmp[659324] "these"(tag = tag[131374]) followThis[131379](fast = fast[131383])))
    unknown call_tmp[659334] "expr temp" "maybe param" "maybe type" "temp"
    (659337 'move' call_tmp[659334](131501 call _cond_test call_tmp[659329]))
    if call_tmp[659334]
    {
      {
        unknown _indexOfInterest[131419] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131420] "expr temp" "temp"
        unknown call_tmp[659341] "expr temp" "maybe param" "maybe type" "temp"
        (659344 'move' call_tmp[659341](359916 call _value _mt[243] this[133742]))
        unknown call_tmp[659348] "expr temp" "maybe param" "maybe type" "temp"
        (659351 'move' call_tmp[659348](131415 call(131406 call (partial) these _mt[243] call_tmp[659341])(tag = tag[131374]) followThis[131379](fast = fast[131383])))
        (131429 'move' _iterator[131420](131427 call _getIterator call_tmp[659348]))
        Defer
        {
          {
            (131446 call _freeIterator _iterator[131420])
          }
        }
        { scopeless type
          (131435 'move' _indexOfInterest[131419](131432 call iteratorIndex _iterator[131420]))
        }
        ForLoop[131421]
        {
          unknown i[131439] "index var" "insert auto destroy"
          (480232 'end of statement')
          (131441 'move' i[131439] _indexOfInterest[131419])
          (480233 'end of statement' i[131439])
          unknown yret[518113] "YVV" "temp"
          (518116 'move' yret[518113](518115 'addr of' i[131439]))
          (518118 yield yret[518113])
          (480235 'end of statement' i[131439])
          label _continueLabel[131424]
          _indexOfInterest[131419]
          _iterator[131420]
        }
        label _breakLabel[131425]
      }
    }
    {
      {
        unknown _indexOfInterest[131466] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131467] "expr temp" "temp"
        unknown call_tmp[659355] "expr temp" "maybe param" "maybe type" "temp"
        (659358 'move' call_tmp[659355](359920 call _value _mt[243] this[133742]))
        unknown call_tmp[659362] "expr temp" "maybe param" "maybe type" "temp"
        (659365 'move' call_tmp[659362](131462 call(131456 call (partial) these _mt[243] call_tmp[659355]) tag[131374] followThis[131379]))
        (131476 'move' _iterator[131467](131474 call _getIterator call_tmp[659362]))
        Defer
        {
          {
            (131493 call _freeIterator _iterator[131467])
          }
        }
        { scopeless type
          (131482 'move' _indexOfInterest[131466](131479 call iteratorIndex _iterator[131467]))
        }
        ForLoop[131468]
        {
          unknown i[131486] "index var" "insert auto destroy"
          (480238 'end of statement')
          (131488 'move' i[131486] _indexOfInterest[131466])
          (480239 'end of statement' i[131486])
          unknown yret[518120] "YVV" "temp"
          (518123 'move' yret[518120](518122 'addr of' i[131486]))
          (518125 yield yret[518120])
          (480241 'end of statement' i[131486])
          label _continueLabel[131471]
          _indexOfInterest[131466]
          _iterator[131467]
        }
        label _breakLabel[131472]
      }
    }
    (518111 return ret[518109])
  }
  where {
    (131392 call == tag[131374] follower[449])
  }
  function _array[133588](?).numElements[131511](arg _mt[133748]:_MT[238], arg this[133746]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518129] "RVV" "temp"
    unknown call_tmp[659367] "expr temp" "maybe param" "maybe type" "temp"
    (659370 'move' call_tmp[659367](131548 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131551 call compilerWarning call_tmp[659367])
    (480243 'end of statement')
    unknown call_tmp[659374] "expr temp" "maybe param" "maybe type" "temp"
    (659377 'move' call_tmp[659374](384231 call size _mt[243] this[133746]))
    (518134 'move' ret[518129](518133 'deref' call_tmp[659374]))
    (518131 return ret[518129])
  }
  function _array[133588](?).size[131561](arg _mt[133752]:_MT[238], arg this[133750]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518138] "RVV" "temp"
    unknown call_tmp[659381] "expr temp" "maybe param" "maybe type" "temp"
    (659384 'move' call_tmp[659381](359924 call _value _mt[243] this[133750]))
    unknown call_tmp[659388] "expr temp" "maybe param" "maybe type" "temp"
    (659391 'move' call_tmp[659388](131564 call dom _mt[243] call_tmp[659381]))
    unknown call_tmp[659395] "expr temp" "maybe param" "maybe type" "temp"
    (659398 'move' call_tmp[659395](131567 call dsiNumIndices _mt[243] call_tmp[659388]))
    (518143 'move' ret[518138](518142 'deref' call_tmp[659395]))
    (518140 return ret[518138])
  }
  function _array[133588](?).chpl_checkArrArgDoms[131581](arg _mt[133756]:_MT[238], arg this[133754]:_array[133588](?), arg formalDom[131578]:_domain[125902](?), param arg runtimeChecks[131584]:bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[659402] "expr temp" "maybe param" "maybe type" "temp"
    (659405 'move' call_tmp[659402](131588 call rank _mt[243] formalDom[131578]))
    unknown call_tmp[659409] "expr temp" "maybe param" "maybe type" "temp"
    (659412 'move' call_tmp[659409](131592 call _dom _mt[243] this[133754]))
    unknown call_tmp[659416] "expr temp" "maybe param" "maybe type" "temp"
    (659419 'move' call_tmp[659416](131595 call rank _mt[243] call_tmp[659409]))
    unknown call_tmp[659421] "expr temp" "maybe param" "maybe type" "temp"
    (659424 'move' call_tmp[659421](131598 call != call_tmp[659402] call_tmp[659416]))
    unknown call_tmp[659426] "expr temp" "maybe param" "maybe type" "temp"
    (659429 'move' call_tmp[659426](131663 call _cond_test call_tmp[659421]))
    if call_tmp[659426]
    {
      unknown call_tmp[659433] "expr temp" "maybe param" "maybe type" "temp"
      (659436 'move' call_tmp[659433](131619 call rank _mt[243] formalDom[131578]))
      unknown call_tmp[659438] "expr temp" "maybe param" "maybe type" "temp"
      (659441 'move' call_tmp[659438](131623 call _cast string[26] call_tmp[659433]))
      unknown call_tmp[659443] "expr temp" "maybe param" "maybe type" "temp"
      (659446 'move' call_tmp[659443](131625 call + "Rank mismatch passing array argument: expected " call_tmp[659438]))
      unknown call_tmp[659448] "expr temp" "maybe param" "maybe type" "temp"
      (659451 'move' call_tmp[659448](131644 call + call_tmp[659443] " but got "))
      unknown call_tmp[659455] "expr temp" "maybe param" "maybe type" "temp"
      (659458 'move' call_tmp[659455](131647 call _dom _mt[243] this[133754]))
      unknown call_tmp[659462] "expr temp" "maybe param" "maybe type" "temp"
      (659465 'move' call_tmp[659462](131650 call rank _mt[243] call_tmp[659455]))
      unknown call_tmp[659467] "expr temp" "maybe param" "maybe type" "temp"
      (659470 'move' call_tmp[659467](131654 call _cast string[26] call_tmp[659462]))
      unknown call_tmp[659472] "expr temp" "maybe param" "maybe type" "temp"
      (659475 'move' call_tmp[659472](131656 call + call_tmp[659448] call_tmp[659467]))
      (131661 call compilerError call_tmp[659472](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[492199] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659479] "expr temp" "maybe param" "maybe type" "temp"
      (659482 'move' call_tmp[659479](131670 call dist _mt[243] formalDom[131578]))
      unknown call_tmp[659486] "expr temp" "maybe param" "maybe type" "temp"
      (659489 'move' call_tmp[659486](131673 call _value _mt[243] call_tmp[659479]))
      (492203 'move' call_type_tmp[492199](131676 'typeof' call_tmp[659486]))
    }
    unknown call_tmp[659491] "expr temp" "maybe param" "maybe type" "temp"
    (659494 'move' call_tmp[659491](131679 call != call_type_tmp[492199] unmanaged DefaultDist[415444]))
    unknown call_tmp[659496] "expr temp" "maybe param" "maybe type" "temp"
    (659499 'move' call_tmp[659496](131807 call _cond_test call_tmp[659491]))
    if call_tmp[659496]
    {
      { scopeless type
        unknown call_type_tmp[492205] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659503] "expr temp" "maybe param" "maybe type" "temp"
        (659506 'move' call_tmp[659503](131684 call _dom _mt[243] this[133754]))
        (492209 'move' call_type_tmp[492205](131687 'typeof' call_tmp[659503]))
      }
      unknown call_tmp[659508] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (659511 'move' call_tmp[659508](131682 'typeof' formalDom[131578]))
      unknown call_tmp[659513] "expr temp" "maybe param" "maybe type" "temp"
      (659516 'move' call_tmp[659513](131688 call != call_tmp[659508] call_type_tmp[492205]))
      unknown call_tmp[659518] "expr temp" "maybe param" "maybe type" "temp"
      (659521 'move' call_tmp[659518](131713 call _cond_test call_tmp[659513]))
      if call_tmp[659518]
      {
        (131711 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[425556] "maybe param" "temp"
      (425567 'move' tmp[425556] runtimeChecks[131584])
      unknown call_tmp[659523] "expr temp" "maybe param" "maybe type" "temp"
      (659526 'move' call_tmp[659523](425569 call _cond_invalid tmp[425556]))
      if call_tmp[659523]
      {
        (425572 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[566368] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[566369] "maybe param" "temp"
      unknown call_tmp[659528] "expr temp" "maybe param" "maybe type" "temp"
      (659531 'move' call_tmp[659528](425557 call isTrue tmp[425556]))
      (566374 'move' tmp[566369](566372 call _cond_test call_tmp[659528]))
      if tmp[566369]
      {
        unknown tmp[566376] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[659535] "expr temp" "maybe param" "maybe type" "temp"
        (659538 'move' call_tmp[659535](131721 call dist _mt[243] formalDom[131578]))
        unknown call_tmp[659542] "expr temp" "maybe param" "maybe type" "temp"
        (659545 'move' call_tmp[659542](131725 call _dom _mt[243] this[133754]))
        unknown call_tmp[659549] "expr temp" "maybe param" "maybe type" "temp"
        (659552 'move' call_tmp[659549](131728 call dist _mt[243] call_tmp[659542]))
        unknown call_tmp[659554] "expr temp" "maybe param" "maybe type" "temp"
        (659557 'move' call_tmp[659554](131731 call != call_tmp[659535] call_tmp[659549]))
        (566378 'move' tmp[566376](425560 call isTrue call_tmp[659554]))
        (566383 'move' tmp[566368](566380 '_paramFoldLogical' tmp[566369] tmp[566376]))
      }
      {
        (566388 'move' tmp[566368](566385 '_paramFoldLogical' tmp[566369] 0))
      }
      unknown call_tmp[659559] "expr temp" "maybe param" "maybe type" "temp"
      (659562 'move' call_tmp[659559](131802 call _cond_test tmp[566368]))
      if call_tmp[659559]
      {
        unknown call_tmp[659566] "expr temp" "maybe param" "maybe type" "temp"
        (659569 'move' call_tmp[659566](131772 call dist _mt[243] formalDom[131578]))
        unknown call_tmp[659573] "expr temp" "maybe param" "maybe type" "temp"
        (659576 'move' call_tmp[659573](131794 call _dom _mt[243] this[133754]))
        unknown call_tmp[659580] "expr temp" "maybe param" "maybe type" "temp"
        (659583 'move' call_tmp[659580](131797 call dist _mt[243] call_tmp[659573]))
        (131800 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[659566] "\n" "  Actual domain map is: " call_tmp[659580])
      }
    }
    unknown tmp[425577] "maybe param" "temp"
    (425588 'move' tmp[425577] runtimeChecks[131584])
    unknown call_tmp[659585] "expr temp" "maybe param" "maybe type" "temp"
    (659588 'move' call_tmp[659585](425590 call _cond_invalid tmp[425577]))
    if call_tmp[659585]
    {
      (425593 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566395] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566396] "maybe param" "temp"
    unknown call_tmp[659590] "expr temp" "maybe param" "maybe type" "temp"
    (659593 'move' call_tmp[659590](425578 call isTrue tmp[425577]))
    (566401 'move' tmp[566396](566399 call _cond_test call_tmp[659590]))
    if tmp[566396]
    {
      unknown tmp[566403] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659597] "expr temp" "maybe param" "maybe type" "temp"
      (659600 'move' call_tmp[659597](131814 call _dom _mt[243] this[133754]))
      unknown call_tmp[659602] "expr temp" "maybe param" "maybe type" "temp"
      (659605 'move' call_tmp[659602](131817 call != formalDom[131578] call_tmp[659597]))
      (566405 'move' tmp[566403](425581 call isTrue call_tmp[659602]))
      (566410 'move' tmp[566395](566407 '_paramFoldLogical' tmp[566396] tmp[566403]))
    }
    {
      (566415 'move' tmp[566395](566412 '_paramFoldLogical' tmp[566396] 0))
    }
    unknown call_tmp[659607] "expr temp" "maybe param" "maybe type" "temp"
    (659610 'move' call_tmp[659607](131882 call _cond_test tmp[566395]))
    if call_tmp[659607]
    {
      unknown call_tmp[659614] "expr temp" "maybe param" "maybe type" "temp"
      (659617 'move' call_tmp[659614](131877 call _dom _mt[243] this[133754]))
      (131880 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[131578] "\n" "  Actual domain is: " call_tmp[659614])
    }
    (518145 return _void[55])
  }
  function _array[133588](?).reindex[131895](arg _mt[133760]:_MT[238], arg this[133758]:_array[133588](?), arg newDomain[131892]:_domain[125902](?)) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518149] "RVV" "temp"
    unknown call_tmp[659623] "expr temp" "maybe param" "maybe type" "temp"
    (659626 'move' call_tmp[659623](131916 call(131912 call (partial) dims _mt[243] newDomain[131892])))
    unknown call_tmp[659628] "expr temp" "maybe param" "maybe type" "temp"
    (659631 'move' call_tmp[659628](131919 call(384244 call (partial) reindex _mt[243] this[133758])(131917 'expand_tuple' call_tmp[659623])))
    (518154 'move' ret[518149](518153 'deref' call_tmp[659628]))
    (518151 return ret[518149])
  }
  where {
    unknown tmp[425598] "maybe param" "temp"
    unknown call_tmp[659635] "expr temp" "maybe param" "maybe type" "temp"
    (659638 'move' call_tmp[659635](131899 call _dom _mt[243] this[133758]))
    (425609 'move' tmp[425598](131903 call isRectangularDom call_tmp[659635]))
    unknown call_tmp[659640] "expr temp" "maybe param" "maybe type" "temp"
    (659643 'move' call_tmp[659640](425611 call _cond_invalid tmp[425598]))
    if call_tmp[659640]
    {
      (425614 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566422] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566423] "maybe param" "temp"
    unknown call_tmp[659645] "expr temp" "maybe param" "maybe type" "temp"
    (659648 'move' call_tmp[659645](425599 call isTrue tmp[425598]))
    (566428 'move' tmp[566423](566426 call _cond_test call_tmp[659645]))
    if tmp[566423]
    {
      unknown tmp[566430] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659650] "expr temp" "maybe param" "maybe type" "temp"
      (659653 'move' call_tmp[659650](131907 call isRectangularDom newDomain[131892]))
      (566432 'move' tmp[566430](425602 call isTrue call_tmp[659650]))
      (566437 'move' tmp[566422](566434 '_paramFoldLogical' tmp[566423] tmp[566430]))
    }
    {
      (566442 'move' tmp[566422](566439 '_paramFoldLogical' tmp[566423] 0))
    }
    (748306 call chpl_statementLevelSymbol tmp[566422])
  }
  function _array[133588](?).reindex[131932](arg _mt[133764]:_MT[238], arg this[133762]:_array[133588](?), arg newDims[131929]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518158] "RVV" "temp"
    {
      unknown i[131986] "dead at end of block" "insert auto destroy"
      (542999 'init var' i[131986] 0)
      (480253 'end of statement')
      unknown tmp[131987] "maybe param" "temp"
      unknown call_tmp[659657] "expr temp" "maybe param" "maybe type" "temp"
      (659660 'move' call_tmp[659657](131943 call size _mt[243] newDims[131929]))
      unknown call_tmp[659662] "expr temp" "maybe param" "maybe type" "temp"
      (659665 'move' call_tmp[659662](131947 call - call_tmp[659657] 1))
      (131999 'move' tmp[131987](131997 call chpl_compute_low_param_loop_bound 0 call_tmp[659662]))
      unknown tmp[131988] "maybe param" "temp"
      unknown call_tmp[659669] "expr temp" "maybe param" "maybe type" "temp"
      (659672 'move' call_tmp[659669](132006 call size _mt[243] newDims[131929]))
      unknown call_tmp[659674] "expr temp" "maybe param" "maybe type" "temp"
      (659677 'move' call_tmp[659674](132004 call - call_tmp[659669] 1))
      (132012 'move' tmp[131988](132010 call chpl_compute_high_param_loop_bound 0 call_tmp[659674]))
      unknown tmp[131989] "maybe param" "temp"
      (132015 'move' tmp[131989] 1)
      ParamForLoop[132017]
      { i[131986] tmp[131987] tmp[131988] tmp[131989]
        unknown call_tmp[659679] "expr temp" "maybe param" "maybe type" "temp"
        (659682 'move' call_tmp[659679](131955 call newDims[131929] i[131986]))
        unknown call_tmp[659684] "expr temp" "maybe param" "maybe type" "temp"
        (659687 'move' call_tmp[659684](131957 call isRange call_tmp[659679]))
        unknown call_tmp[659689] "expr temp" "maybe param" "maybe type" "temp"
        (659692 'move' call_tmp[659689](131958 call ! call_tmp[659684]))
        unknown call_tmp[659694] "expr temp" "maybe param" "maybe type" "temp"
        (659697 'move' call_tmp[659694](131981 call _cond_test call_tmp[659689]))
        if call_tmp[659694]
        {
          (131979 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[131991]
      label _breakLabel[131990]
    }
    unknown call_tmp[659701] "expr temp" "maybe param" "maybe type" "temp"
    (659704 'move' call_tmp[659701](132028 call rank _mt[243] this[133762]))
    unknown call_tmp[659708] "expr temp" "maybe param" "maybe type" "temp"
    (659711 'move' call_tmp[659708](132032 call size _mt[243] newDims[131929]))
    unknown call_tmp[659713] "expr temp" "maybe param" "maybe type" "temp"
    (659716 'move' call_tmp[659713](132035 call != call_tmp[659701] call_tmp[659708]))
    unknown call_tmp[659718] "expr temp" "maybe param" "maybe type" "temp"
    (659721 'move' call_tmp[659718](132095 call _cond_test call_tmp[659713]))
    if call_tmp[659718]
    {
      unknown call_tmp[659725] "expr temp" "maybe param" "maybe type" "temp"
      (659728 'move' call_tmp[659725](132056 call rank _mt[243] this[133762]))
      unknown call_tmp[659730] "expr temp" "maybe param" "maybe type" "temp"
      (659733 'move' call_tmp[659730](132060 call _cast string[26] call_tmp[659725]))
      unknown call_tmp[659735] "expr temp" "maybe param" "maybe type" "temp"
      (659738 'move' call_tmp[659735](132062 call + "rank mismatch: cannot reindex() from " call_tmp[659730]))
      unknown call_tmp[659740] "expr temp" "maybe param" "maybe type" "temp"
      (659743 'move' call_tmp[659740](132081 call + call_tmp[659735] " dimension(s) to "))
      unknown call_tmp[659747] "expr temp" "maybe param" "maybe type" "temp"
      (659750 'move' call_tmp[659747](132084 call size _mt[243] newDims[131929]))
      unknown call_tmp[659752] "expr temp" "maybe param" "maybe type" "temp"
      (659755 'move' call_tmp[659752](132088 call _cast string[26] call_tmp[659747]))
      unknown call_tmp[659757] "expr temp" "maybe param" "maybe type" "temp"
      (659760 'move' call_tmp[659757](132090 call + call_tmp[659740] call_tmp[659752]))
      (132093 call compilerError call_tmp[659757])
    }
    {
      unknown i[132173] "dead at end of block" "insert auto destroy"
      (543001 'init var' i[132173] 0)
      (480256 'end of statement')
      unknown tmp[132174] "maybe param" "temp"
      unknown call_tmp[659764] "expr temp" "maybe param" "maybe type" "temp"
      (659767 'move' call_tmp[659764](384250 call rank _mt[243] this[133762]))
      unknown call_tmp[659769] "expr temp" "maybe param" "maybe type" "temp"
      (659772 'move' call_tmp[659769](132103 call - call_tmp[659764] 1))
      (132186 'move' tmp[132174](132184 call chpl_compute_low_param_loop_bound 0 call_tmp[659769]))
      unknown tmp[132175] "maybe param" "temp"
      unknown call_tmp[659776] "expr temp" "maybe param" "maybe type" "temp"
      (659779 'move' call_tmp[659776](384258 call rank _mt[243] this[133762]))
      unknown call_tmp[659781] "expr temp" "maybe param" "maybe type" "temp"
      (659784 'move' call_tmp[659781](132191 call - call_tmp[659776] 1))
      (132196 'move' tmp[132175](132194 call chpl_compute_high_param_loop_bound 0 call_tmp[659781]))
      unknown tmp[132176] "maybe param" "temp"
      (132199 'move' tmp[132176] 1)
      ParamForLoop[132201]
      { i[132173] tmp[132174] tmp[132175] tmp[132176]
        unknown call_tmp[659786] "expr temp" "maybe param" "maybe type" "temp"
        (659789 'move' call_tmp[659786](132110 call newDims[131929] i[132173]))
        unknown call_tmp[659793] "expr temp" "maybe param" "maybe type" "temp"
        (659796 'move' call_tmp[659793](132111 call size _mt[243] call_tmp[659786]))
        unknown call_tmp[659800] "expr temp" "maybe param" "maybe type" "temp"
        (659803 'move' call_tmp[659800](359949 call _value _mt[243] this[133762]))
        unknown call_tmp[659807] "expr temp" "maybe param" "maybe type" "temp"
        (659810 'move' call_tmp[659807](132115 call dom _mt[243] call_tmp[659800]))
        unknown call_tmp[659814] "expr temp" "maybe param" "maybe type" "temp"
        (659817 'move' call_tmp[659814](132123 call(132118 call (partial) dsiDim _mt[243] call_tmp[659807]) i[132173]))
        unknown call_tmp[659821] "expr temp" "maybe param" "maybe type" "temp"
        (659824 'move' call_tmp[659821](132124 call size _mt[243] call_tmp[659814]))
        unknown call_tmp[659826] "expr temp" "maybe param" "maybe type" "temp"
        (659829 'move' call_tmp[659826](132127 call != call_tmp[659793] call_tmp[659821]))
        unknown call_tmp[659831] "expr temp" "maybe param" "maybe type" "temp"
        (659834 'move' call_tmp[659831](132168 call _cond_test call_tmp[659826]))
        if call_tmp[659831]
        {
          (132166 call halt "extent in dimension " i[132173] " does not match actual")
          (480257 'end of statement' i[132173])
        }
      }
      label _unused_continueLabel[132178]
      label _breakLabel[132177]
    }
    unknown call_tmp[659838] "expr temp" "maybe param" "maybe type" "temp"
    (659841 'move' call_tmp[659838](132211 call _value _mt[243] this[133762]))
    unknown call_tmp[659845] "maybe param" "maybe type" "temp"
    (659848 'move' call_tmp[659845](132214 call dom _mt[243] call_tmp[659838]))
    const thisDomClass[132217] "dead at end of block" "const" "insert auto destroy"
    (543003 'init var' thisDomClass[132217] call_tmp[659845])
    (132220 'end of statement')
    unknown call_tmp[659852] "expr temp" "maybe param" "maybe type" "temp"
    (659855 'move' call_tmp[659852](132228 call pid _mt[243] thisDomClass[132217]))
    unknown call_tmp[659857] "maybe param" "maybe type" "temp"
    (659860 'move' call_tmp[659857](132232 call _build_tuple thisDomClass[132217] call_tmp[659852]))
    const tmp[132234] "dead at end of block" "const" "insert auto destroy" "temp"
    (543005 'init var' tmp[132234] call_tmp[659857])
    (132241 call _check_tuple_var_decl tmp[132234] 2)
    (480259 'end of statement')
    unknown call_tmp[659862] "maybe param" "maybe type" "temp"
    (659865 'move' call_tmp[659862](132235 call tmp[132234] 0))
    const dom[132221] "dead at end of block" "const" "insert auto destroy"
    (543007 'init var' dom[132221] call_tmp[659862])
    unknown call_tmp[659867] "maybe param" "maybe type" "temp"
    (659870 'move' call_tmp[659867](132238 call tmp[132234] 1))
    const dompid[132223] "dead at end of block" "const" "insert auto destroy"
    (543009 'init var' dompid[132223] call_tmp[659867])
    (132246 'end of statement')
    unknown call_tmp[659872] "maybe param" "maybe type" "temp"
    (659875 'move' call_tmp[659872](132250 call chpl__buildDomainExpr(132248 'expand_tuple' newDims[131929])))
    const updom[132252] "dead at end of block" "const" "no auto destroy"
    (543011 'init var' updom[132252] call_tmp[659872])
    (132255 'end of statement')
    unknown call_tmp[659879] "expr temp" "maybe param" "maybe type" "temp"
    (659882 'move' call_tmp[659879](132261 call _dom _mt[243] this[133762]))
    unknown call_tmp[659886] "expr temp" "maybe param" "maybe type" "temp"
    (659889 'move' call_tmp[659886](132264 call dist _mt[243] call_tmp[659879]))
    unknown call_tmp[659893] "expr temp" "maybe param" "maybe type" "temp"
    (659896 'move' call_tmp[659893](132267 call _pid _mt[243] call_tmp[659886]))
    unknown call_tmp[659900] "expr temp" "maybe param" "maybe type" "temp"
    (659903 'move' call_tmp[659900](132273 call _dom _mt[243] this[133762]))
    unknown call_tmp[659907] "expr temp" "maybe param" "maybe type" "temp"
    (659910 'move' call_tmp[659907](132276 call dist _mt[243] call_tmp[659900]))
    unknown call_tmp[659914] "expr temp" "maybe param" "maybe type" "temp"
    (659917 'move' call_tmp[659914](132279 call _instance _mt[243] call_tmp[659907]))
    unknown call_tmp[659921] "expr temp" "maybe param" "maybe type" "temp"
    (659924 'move' call_tmp[659921](132284 call _value _mt[243] updom[132252]))
    unknown call_tmp[659926] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659929 'move' call_tmp[659926](747885 'new' ArrayViewReindexDist[384264](?)(downDistPid = call_tmp[659893])(downDistInst = call_tmp[659914])(updom = call_tmp[659921])(downdomPid = dompid[132223])(downdomInst = dom[132221])(_chpl_manager = unmanaged[220](?))))
    const redist[132293] "dead at end of block" "const" "insert auto destroy"
    (543013 'init var' redist[132293] call_tmp[659926])
    (132296 'end of statement')
    unknown call_tmp[659931] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659934 'move' call_tmp[659931](747886 'new' _distribution[118967](?) redist[132293]))
    const redistRec[132302] "dead at end of block" "const" "insert auto destroy"
    (543015 'init var' redistRec[132302] call_tmp[659931])
    (132305 'end of statement')
    unknown call_tmp[659938] "expr temp" "maybe param" "maybe type" "temp"
    (659941 'move' call_tmp[659938](384274 call rank _mt[243] this[133762]))
    unknown call_tmp[659945] "expr temp" "maybe param" "maybe type" "temp"
    (659948 'move' call_tmp[659945](132312 call idxType _mt[243] updom[132252]))
    unknown call_tmp[659952] "expr temp" "maybe param" "maybe type" "temp"
    (659955 'move' call_tmp[659952](132316 call stridable _mt[243] updom[132252]))
    unknown call_tmp[659959] "expr temp" "maybe param" "maybe type" "temp"
    (659962 'move' call_tmp[659959](132324 call(132320 call (partial) dims _mt[243] updom[132252])))
    unknown call_tmp[659964] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659967 'move' call_tmp[659964](747887 'new' _domain[125902](?) redistRec[132302] call_tmp[659938] call_tmp[659945] call_tmp[659952] call_tmp[659959]))
    const newDom[132326] "dead at end of block" "const" "no auto destroy"
    (543017 'init var' newDom[132326] call_tmp[659964])
    (132329 'end of statement')
    unknown call_tmp[659971] "expr temp" "maybe param" "maybe type" "temp"
    (659974 'move' call_tmp[659971](132331 call _value _mt[243] newDom[132326]))
    unknown call_tmp[659978] "expr temp" "maybe param" "maybe type" "temp"
    (659981 'move' call_tmp[659978](132334 call _free_when_no_arrs _mt[243] call_tmp[659971]))
    (132338 call = call_tmp[659978] 1)
    (480268 'end of statement' newDom[132326])
    unknown call_tmp[659985] "expr temp" "maybe param" "maybe type" "temp"
    (659988 'move' call_tmp[659985](132347 call _value _mt[243] this[133762]))
    unknown call_tmp[659992] "expr temp" "maybe param" "maybe type" "temp"
    (659995 'move' call_tmp[659992](132351 call _pid _mt[243] this[133762]))
    unknown call_tmp[659997] "maybe param" "maybe type" "temp"
    (660000 'move' call_tmp[659997](132355 call _build_tuple call_tmp[659985] call_tmp[659992]))
    const tmp[132357] "dead at end of block" "const" "insert auto destroy" "temp"
    (543019 'init var' tmp[132357] call_tmp[659997])
    (132364 call _check_tuple_var_decl tmp[132357] 2)
    (480270 'end of statement')
    unknown call_tmp[660002] "maybe param" "maybe type" "temp"
    (660005 'move' call_tmp[660002](132358 call tmp[132357] 0))
    const arr[132341] "dead at end of block" "const" "insert auto destroy"
    (543021 'init var' arr[132341] call_tmp[660002])
    unknown call_tmp[660007] "maybe param" "maybe type" "temp"
    (660010 'move' call_tmp[660007](132361 call tmp[132357] 1))
    const arrpid[132343] "dead at end of block" "const" "insert auto destroy"
    (543023 'init var' arrpid[132343] call_tmp[660007])
    (132369 'end of statement')
    unknown call_tmp[660014] "expr temp" "maybe param" "maybe type" "temp"
    (660017 'move' call_tmp[660014](132375 call eltType _mt[243] this[133762]))
    unknown call_tmp[660021] "expr temp" "maybe param" "maybe type" "temp"
    (660024 'move' call_tmp[660021](132381 call _pid _mt[243] newDom[132326]))
    unknown call_tmp[660028] "expr temp" "maybe param" "maybe type" "temp"
    (660031 'move' call_tmp[660028](132386 call _instance _mt[243] newDom[132326]))
    unknown call_tmp[660033] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660036 'move' call_tmp[660033](747888 'new' ArrayViewReindexArr[384278](?)(eltType = call_tmp[660014])(_DomPid = call_tmp[660021])(dom = call_tmp[660028])(_ArrPid = arrpid[132343])(_ArrInstance = arr[132341])(_chpl_manager = unmanaged[220](?))))
    unknown x[132395] "dead at end of block" "insert auto destroy"
    (543025 'init var' x[132395] call_tmp[660033])
    (132398 'end of statement' updom[132252] dompid[132223] dom[132221] redist[132293] redistRec[132302] updom[132252] updom[132252] updom[132252] newDom[132326] newDom[132326] arrpid[132343] arr[132341])
    unknown call_tmp[660040] "expr temp" "maybe param" "maybe type" "temp"
    (660043 'move' call_tmp[660040](132400 call _value _mt[243] newDom[132326]))
    (132410 call(132403 call (partial) add_arr _mt[243] call_tmp[660040]) x[132395](locking = 0))
    (480275 'end of statement' newDom[132326] x[132395])
    unknown call_tmp[660047] "expr temp" "maybe param" "maybe type" "temp"
    (660050 'move' call_tmp[660047](132415 call _newArray x[132395]))
    (518163 'move' ret[518158](518162 'deref' call_tmp[660047]))
    gotoReturn _end_reindex[518156] _end_reindex[518156]
    (480278 'end of statement' x[132395])
    label _end_reindex[518156]
    (518160 return ret[518158])
  }
  where {
    unknown call_tmp[660054] "expr temp" "maybe param" "maybe type" "temp"
    (660057 'move' call_tmp[660054](131936 call _dom _mt[243] this[133762]))
    (131940 call isRectangularDom call_tmp[660054])
  }
  function _array[133588](?).reindex[132427](arg _mt[133768]:_MT[238], arg this[133766]:_array[133588](?), arg d[132424]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132448 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (518167 return _void[55])
  }
  function _array[133588](?).writeThis[132457](arg _mt[133772]:_MT[238], arg this[133770]:_array[133588](?), arg f[132455]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660061] "expr temp" "maybe param" "maybe type" "temp"
    (660064 'move' call_tmp[660061](359968 call _value _mt[243] this[133770]))
    (132465 call(132460 call (partial) dsiSerialWrite _mt[243] call_tmp[660061]) f[132455])
    (518169 return _void[55])
  }
  function _array[133588](?).readThis[132474](arg _mt[133776]:_MT[238], arg this[133774]:_array[133588](?), arg f[132472]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660070] "expr temp" "maybe param" "maybe type" "temp"
    (660073 'move' call_tmp[660070](359972 call _value _mt[243] this[133774]))
    (132482 call(132477 call (partial) dsiSerialRead _mt[243] call_tmp[660070]) f[132472])
    (518171 return _void[55])
  }
  function _array[133588](?).IRV[132489](arg _mt[133780]:_MT[238], arg this[133778]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132516 call compilerError "only sparse arrays have an IRV")
    (518173 return _void[55])
  }
  where {
    unknown call_tmp[660077] "expr temp" "maybe param" "maybe type" "temp"
    (660080 'move' call_tmp[660077](132494 call isSparseArr this[133778]))
    (132495 call ! call_tmp[660077])
  }
  function _array[133588](?).IRV[132524](arg _mt[133784]:_MT[238], arg this[133782]:_array[133588](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[518177] "RVV" "temp"
    unknown call_tmp[660084] "expr temp" "maybe param" "maybe type" "temp"
    (660087 'move' call_tmp[660084](359976 call _value _mt[243] this[133782]))
    unknown call_tmp[660091] "expr temp" "maybe param" "maybe type" "temp"
    (660094 'move' call_tmp[660091](132533 call IRV _mt[243] call_tmp[660084]))
    (518182 'move' ret[518177](518181 'addr of' call_tmp[660091]))
    (518179 return ret[518177])
  }
  where {
    (132529 call isSparseArr this[133782])
  }
  function _array[133588](?).sorted[132553](arg _mt[133788]:_MT[238], arg this[133786]:_array[133588](?), arg comparator[132549]:_any[178](?) :
  (748818 call chpl_defaultComparator) =
  (132548 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518186] "RVV" "temp"
    unknown call_tmp[660098] "expr temp" "maybe param" "maybe type" "temp"
    (660101 'move' call_tmp[660098](384291 call _value _mt[243] this[133786]))
    unknown call_tmp[660103] "expr temp" "maybe param" "maybe type" "temp"
    (660106 'move' call_tmp[660103](132577 call canResolveMethod module=[255] Reflection[224882] call_tmp[660098] "dsiSorted" comparator[132549]))
    unknown call_tmp[660108] "expr temp" "maybe param" "maybe type" "temp"
    (660111 'move' call_tmp[660108](132720 call _cond_test call_tmp[660103]))
    if call_tmp[660108]
    {
      {
        unknown _indexOfInterest[132590] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132591] "expr temp" "temp"
        unknown call_tmp[660115] "expr temp" "maybe param" "maybe type" "temp"
        (660118 'move' call_tmp[660115](359986 call _value _mt[243] this[133786]))
        unknown call_tmp[660122] "expr temp" "maybe param" "maybe type" "temp"
        (660125 'move' call_tmp[660122](132585 call(132580 call (partial) dsiSorted _mt[243] call_tmp[660115]) comparator[132549]))
        (132600 'move' _iterator[132591](132598 call _getIterator call_tmp[660122]))
        Defer
        {
          {
            (132617 call _freeIterator _iterator[132591])
          }
        }
        { scopeless type
          (132606 'move' _indexOfInterest[132590](132603 call iteratorIndex _iterator[132591]))
        }
        ForLoop[132592]
        {
          unknown i[132610] "index var" "insert auto destroy"
          (480286 'end of statement')
          (132612 'move' i[132610] _indexOfInterest[132590])
          (480287 'end of statement' i[132610])
          {
            unknown yret[518190] "YVV" "temp"
            (518193 'move' yret[518190](518192 'deref' i[132610]))
            (518195 yield yret[518190])
            (480289 'end of statement' i[132610])
          }
          label _continueLabel[132595]
          _indexOfInterest[132590]
          _iterator[132591]
        }
        label _breakLabel[132596]
      }
    }
    {
      unknown call_tmp[660129] "expr temp" "maybe param" "maybe type" "temp"
      (660132 'move' call_tmp[660129](384298 call _value _mt[243] this[133786]))
      unknown call_tmp[660134] "expr temp" "maybe param" "maybe type" "temp"
      (660137 'move' call_tmp[660134](132632 call canResolveMethod module=[255] Reflection[224882] call_tmp[660129] "dsiSorted"))
      unknown call_tmp[660139] "expr temp" "maybe param" "maybe type" "temp"
      (660142 'move' call_tmp[660139](132716 call _cond_test call_tmp[660134]))
      if call_tmp[660139]
      {
        { scopeless type
          unknown call_type_tmp[492211] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[660146] "expr temp" "maybe param" "maybe type" "temp"
          (660149 'move' call_tmp[660146](384302 call _value _mt[243] this[133786]))
          (492215 'move' call_type_tmp[492211](132635 'typeof' call_tmp[660146]))
        }
        unknown call_tmp[660151] "expr temp" "maybe param" "maybe type" "temp"
        (660154 'move' call_tmp[660151](132637 call _cast string[26] call_type_tmp[492211]))
        unknown call_tmp[660156] "expr temp" "maybe param" "maybe type" "temp"
        (660159 'move' call_tmp[660156](132656 call + call_tmp[660151] " does not support dsiSorted(comparator)"))
        (132659 call compilerError call_tmp[660156])
      }
      {
        unknown copy[132667] "dead at end of block" "insert auto destroy"
        (543027 'init var' copy[132667] this[133786])
        (132670 'end of statement')
        (132676 call sort copy[132667](comparator = comparator[132549]))
        (480292 'end of statement' copy[132667])
        {
          unknown _indexOfInterest[132683] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132684] "expr temp" "temp"
          (132693 'move' _iterator[132684](132691 call _getIterator copy[132667]))
          Defer
          {
            {
              (132709 call _freeIterator _iterator[132684])
            }
          }
          { scopeless type
            (132698 'move' _indexOfInterest[132683](132695 call iteratorIndex _iterator[132684]))
          }
          ForLoop[132685]
          {
            unknown ind[132702] "index var" "insert auto destroy"
            (480295 'end of statement')
            (132704 'move' ind[132702] _indexOfInterest[132683])
            (480296 'end of statement' ind[132702])
            unknown yret[518197] "YVV" "temp"
            (518200 'move' yret[518197](518199 'deref' ind[132702]))
            (518202 yield yret[518197])
            (480298 'end of statement' ind[132702])
            label _continueLabel[132688]
            _indexOfInterest[132683]
            _iterator[132684]
          }
          label _breakLabel[132689]
        }
        (355122 'used modules list'(132663 'use' Sort[267968]))
      }
      (359990 'referenced modules list' Reflection[224882])
    }
    (518188 return ret[518186])
    (359980 'referenced modules list' Reflection[224882])
  }
  function _array[133588](?).displayRepresentation[132730](arg _mt[133792]:_MT[238], arg this[133790]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660163] "expr temp" "maybe param" "maybe type" "temp"
    (660166 'move' call_tmp[660163](359996 call _value _mt[243] this[133790]))
    (132737 call(132733 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[660163]))
    (518204 return _void[55])
  }
  function _array[133588](?).targetLocales[132744](arg _mt[133796]:_MT[238], arg this[133794]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518208] "RVV" "temp"
    unknown call_tmp[660172] "expr temp" "maybe param" "maybe type" "temp"
    (660175 'move' call_tmp[660172](360000 call _value _mt[243] this[133794]))
    unknown call_tmp[660179] "expr temp" "maybe param" "maybe type" "temp"
    (660182 'move' call_tmp[660179](132751 call(132747 call (partial) dsiTargetLocales _mt[243] call_tmp[660172])))
    (518213 'move' ret[518208](518212 'deref' call_tmp[660179]))
    (518210 return ret[518208])
  }
  function _array[133588](?).hasSingleLocalSubdomain[132759](arg _mt[133800]:_MT[238], arg this[133798]:_array[133588](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518217] "RVV" "param" "temp"
    unknown call_tmp[660186] "expr temp" "maybe param" "maybe type" "temp"
    (660189 'move' call_tmp[660186](360004 call _value _mt[243] this[133798]))
    unknown call_tmp[660193] "expr temp" "maybe param" "maybe type" "temp"
    (660196 'move' call_tmp[660193](132766 call(132762 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660186])))
    (518222 'move' ret[518217](518221 'deref' call_tmp[660193]))
    (518219 return ret[518217])
  }
  function _array[133588](?).localSubdomain[132780](arg _mt[133804]:_MT[238], arg this[133802]:_array[133588](?), arg loc[132776]:locale[28] =
  (384310 call here[90435])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518226] "RVV" "temp"
    unknown call_tmp[660200] "expr temp" "maybe param" "maybe type" "temp"
    (660203 'move' call_tmp[660200](360008 call _value _mt[243] this[133802]))
    unknown call_tmp[660207] "expr temp" "maybe param" "maybe type" "temp"
    (660210 'move' call_tmp[660207](132787 call(132783 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660200])))
    unknown call_tmp[660212] "expr temp" "maybe param" "maybe type" "temp"
    (660215 'move' call_tmp[660212](132788 call ! call_tmp[660207]))
    unknown call_tmp[660217] "expr temp" "maybe param" "maybe type" "temp"
    (660220 'move' call_tmp[660217](132795 call _cond_test call_tmp[660212]))
    if call_tmp[660217]
    {
      (132793 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[660224] "expr temp" "maybe param" "maybe type" "temp"
    (660227 'move' call_tmp[660224](360012 call _value _mt[243] this[133802]))
    unknown call_tmp[660231] "expr temp" "maybe param" "maybe type" "temp"
    (660234 'move' call_tmp[660231](132807 call(132802 call (partial) dsiLocalSubdomain _mt[243] call_tmp[660224]) loc[132776]))
    (518231 'move' ret[518226](518230 'deref' call_tmp[660231]))
    (518228 return ret[518226])
  }
  function _array[133588](?).localSubdomains[132820](arg _mt[133808]:_MT[238], arg this[133806]:_array[133588](?), arg loc[132816]:locale[28] =
  (384313 call here[90435])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518235] "RVV" "temp"
    unknown call_tmp[660238] "expr temp" "maybe param" "maybe type" "temp"
    (660241 'move' call_tmp[660238](360016 call _value _mt[243] this[133806]))
    unknown call_tmp[660245] "expr temp" "maybe param" "maybe type" "temp"
    (660248 'move' call_tmp[660245](132827 call(132823 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660238])))
    unknown call_tmp[660250] "expr temp" "maybe param" "maybe type" "temp"
    (660253 'move' call_tmp[660250](132881 call _cond_test call_tmp[660245]))
    if call_tmp[660250]
    {
      unknown yret[518239] "YVV" "temp"
      unknown call_tmp[660257] "expr temp" "maybe param" "maybe type" "temp"
      (660260 'move' call_tmp[660257](132831 call(384316 call (partial) localSubdomain _mt[243] this[133806]) loc[132816]))
      (518242 'move' yret[518239](518241 'deref' call_tmp[660257]))
      (518244 yield yret[518239])
    }
    {
      {
        unknown _indexOfInterest[132846] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132847] "expr temp" "temp"
        unknown call_tmp[660264] "expr temp" "maybe param" "maybe type" "temp"
        (660267 'move' call_tmp[660264](360020 call _value _mt[243] this[133806]))
        unknown call_tmp[660271] "expr temp" "maybe param" "maybe type" "temp"
        (660274 'move' call_tmp[660271](132842 call(132837 call (partial) dsiLocalSubdomains _mt[243] call_tmp[660264]) loc[132816]))
        (132856 'move' _iterator[132847](132854 call _getIterator call_tmp[660271]))
        Defer
        {
          {
            (132873 call _freeIterator _iterator[132847])
          }
        }
        { scopeless type
          (132862 'move' _indexOfInterest[132846](132859 call iteratorIndex _iterator[132847]))
        }
        ForLoop[132848]
        {
          unknown d[132866] "index var" "insert auto destroy"
          (480307 'end of statement')
          (132868 'move' d[132866] _indexOfInterest[132846])
          (480308 'end of statement' d[132866])
          unknown yret[518246] "YVV" "temp"
          (518249 'move' yret[518246](518248 'deref' d[132866]))
          (518251 yield yret[518246])
          (480310 'end of statement' d[132866])
          label _continueLabel[132851]
          _indexOfInterest[132846]
          _iterator[132847]
        }
        label _breakLabel[132852]
      }
    }
    (518237 return ret[518235])
  }
  function _array[133588](?).chpl__isDense1DArray[132890](arg _mt[133812]:_MT[238], arg this[133810]:_array[133588](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518255] "RVV" "param" "temp"
    unknown tmp[425619] "maybe param" "temp"
    unknown tmp[425640] "maybe param" "temp"
    (425651 'move' tmp[425640](132895 call isRectangularArr this[133810]))
    unknown call_tmp[660276] "expr temp" "maybe param" "maybe type" "temp"
    (660279 'move' call_tmp[660276](425653 call _cond_invalid tmp[425640]))
    if call_tmp[660276]
    {
      (425656 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566449] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566450] "maybe param" "temp"
    unknown call_tmp[660281] "expr temp" "maybe param" "maybe type" "temp"
    (660284 'move' call_tmp[660281](425641 call isTrue tmp[425640]))
    (566455 'move' tmp[566450](566453 call _cond_test call_tmp[660281]))
    if tmp[566450]
    {
      unknown tmp[566457] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660288] "expr temp" "maybe param" "maybe type" "temp"
      (660291 'move' call_tmp[660288](132897 call rank _mt[243] this[133810]))
      unknown call_tmp[660293] "expr temp" "maybe param" "maybe type" "temp"
      (660296 'move' call_tmp[660293](132901 call == call_tmp[660288] 1))
      (566459 'move' tmp[566457](425644 call isTrue call_tmp[660293]))
      (566464 'move' tmp[566449](566461 '_paramFoldLogical' tmp[566450] tmp[566457]))
    }
    {
      (566469 'move' tmp[566449](566466 '_paramFoldLogical' tmp[566450] 0))
    }
    (425630 'move' tmp[425619] tmp[566449])
    unknown call_tmp[660298] "expr temp" "maybe param" "maybe type" "temp"
    (660301 'move' call_tmp[660298](425632 call _cond_invalid tmp[425619]))
    if call_tmp[660298]
    {
      (425635 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566476] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566477] "maybe param" "temp"
    unknown call_tmp[660303] "expr temp" "maybe param" "maybe type" "temp"
    (660306 'move' call_tmp[660303](425620 call isTrue tmp[425619]))
    (566482 'move' tmp[566477](566480 call _cond_test call_tmp[660303]))
    if tmp[566477]
    {
      unknown tmp[566484] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660310] "expr temp" "maybe param" "maybe type" "temp"
      (660313 'move' call_tmp[660310](132906 call _value _mt[243] this[133810]))
      unknown call_tmp[660317] "expr temp" "maybe param" "maybe type" "temp"
      (660320 'move' call_tmp[660317](132909 call stridable _mt[243] call_tmp[660310]))
      unknown call_tmp[660322] "expr temp" "maybe param" "maybe type" "temp"
      (660325 'move' call_tmp[660322](132912 call ! call_tmp[660317]))
      (566486 'move' tmp[566484](425623 call isTrue call_tmp[660322]))
      (566491 'move' tmp[566476](566488 '_paramFoldLogical' tmp[566477] tmp[566484]))
    }
    {
      (566496 'move' tmp[566476](566493 '_paramFoldLogical' tmp[566477] 0))
    }
    (518260 'move' ret[518255](518259 'deref' tmp[566476]))
    (518257 return ret[518255])
  }
  function _array[133588](?).chpl__assertSingleArrayDomain[132927](arg _mt[133816]:_MT[238], arg this[133814]:_array[133588](?), arg fnName[132924]:string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660329] "expr temp" "maybe param" "maybe type" "temp"
    (660332 'move' call_tmp[660329](132930 call _dom _mt[243] this[133814]))
    unknown call_tmp[660336] "expr temp" "maybe param" "maybe type" "temp"
    (660339 'move' call_tmp[660336](132933 call _value _mt[243] call_tmp[660329]))
    unknown call_tmp[660343] "expr temp" "maybe param" "maybe type" "temp"
    (660346 'move' call_tmp[660343](132936 call _arrs _mt[243] call_tmp[660336]))
    unknown call_tmp[660350] "expr temp" "maybe param" "maybe type" "temp"
    (660353 'move' call_tmp[660350](132939 call size _mt[243] call_tmp[660343]))
    unknown call_tmp[660355] "expr temp" "maybe param" "maybe type" "temp"
    (660358 'move' call_tmp[660355](132943 call != call_tmp[660350] 1))
    unknown call_tmp[660360] "expr temp" "maybe param" "maybe type" "temp"
    (660363 'move' call_tmp[660360](132988 call _cond_test call_tmp[660355]))
    if call_tmp[660360]
    {
      unknown call_tmp[660365] "expr temp" "maybe param" "maybe type" "temp"
      (660368 'move' call_tmp[660365](132964 call + "cannot call " fnName[132924]))
      unknown call_tmp[660370] "expr temp" "maybe param" "maybe type" "temp"
      (660373 'move' call_tmp[660370](132983 call + call_tmp[660365] " on an array defined over a domain with multiple arrays"))
      (132986 call halt call_tmp[660370])
    }
    (518262 return _void[55])
  }
  function _array[133588](?).isEmpty[132998](arg _mt[133820]:_MT[238], arg this[133818]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518266] "RVV" "temp"
    unknown call_tmp[660377] "expr temp" "maybe param" "maybe type" "temp"
    (660380 'move' call_tmp[660377](133002 call size _mt[243] this[133818]))
    unknown call_tmp[660382] "expr temp" "maybe param" "maybe type" "temp"
    (660385 'move' call_tmp[660382](133006 call == call_tmp[660377] 0))
    (518272 'move' ret[518266](518271 'coerce' call_tmp[660382] bool[10]))
    (518268 return ret[518266])
  }
  { scopeless type
    bool[10]
  }
  function _array[133588](?).head[133016](arg _mt[133824]:_MT[238], arg this[133822]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518276] "RVV" "temp"
    unknown call_tmp[660389] "expr temp" "maybe param" "maybe type" "temp"
    (660392 'move' call_tmp[660389](133027 call _dom _mt[243] this[133822]))
    unknown call_tmp[660396] "expr temp" "maybe param" "maybe type" "temp"
    (660399 'move' call_tmp[660396](133030 call alignedLow _mt[243] call_tmp[660389]))
    unknown call_tmp[660401] "expr temp" "maybe param" "maybe type" "temp"
    (660404 'move' call_tmp[660401](133034 call this[133822] call_tmp[660396]))
    unknown call_tmp[660408] "expr temp" "maybe param" "maybe type" "temp"
    (660411 'move' call_tmp[660408](518283 call _value _mt[243] this[133822]))
    unknown call_tmp[660415] "expr temp" "maybe param" "maybe type" "temp"
    (660418 'move' call_tmp[660415](518281 call eltType _mt[243] call_tmp[660408]))
    (518288 'move' ret[518276](518287 'coerce' call_tmp[660401] call_tmp[660415]))
    (518278 return ret[518276])
  }
  { scopeless type
    unknown call_tmp[660422] "expr temp" "maybe param" "maybe type" "temp"
    (660425 'move' call_tmp[660422](133019 call _value _mt[243] this[133822]))
    (133022 call eltType _mt[243] call_tmp[660422])
  }
  function _array[133588](?).tail[133043](arg _mt[133828]:_MT[238], arg this[133826]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518292] "RVV" "temp"
    unknown call_tmp[660431] "expr temp" "maybe param" "maybe type" "temp"
    (660434 'move' call_tmp[660431](133054 call _dom _mt[243] this[133826]))
    unknown call_tmp[660438] "expr temp" "maybe param" "maybe type" "temp"
    (660441 'move' call_tmp[660438](133057 call alignedHigh _mt[243] call_tmp[660431]))
    unknown call_tmp[660443] "expr temp" "maybe param" "maybe type" "temp"
    (660446 'move' call_tmp[660443](133061 call this[133826] call_tmp[660438]))
    unknown call_tmp[660450] "expr temp" "maybe param" "maybe type" "temp"
    (660453 'move' call_tmp[660450](518299 call _value _mt[243] this[133826]))
    unknown call_tmp[660457] "expr temp" "maybe param" "maybe type" "temp"
    (660460 'move' call_tmp[660457](518297 call eltType _mt[243] call_tmp[660450]))
    (518304 'move' ret[518292](518303 'coerce' call_tmp[660443] call_tmp[660457]))
    (518294 return ret[518292])
  }
  { scopeless type
    unknown call_tmp[660464] "expr temp" "maybe param" "maybe type" "temp"
    (660467 'move' call_tmp[660464](133046 call _value _mt[243] this[133826]))
    (133049 call eltType _mt[243] call_tmp[660464])
  }
  function _array[133588](?).back[133070](arg _mt[133832]:_MT[238], arg this[133830]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518308] "RVV" "temp"
    unknown tmp[425661] "maybe param" "temp"
    unknown call_tmp[660471] "expr temp" "maybe param" "maybe type" "temp"
    (660474 'move' call_tmp[660471](133075 call isRectangularArr this[133830]))
    (425672 'move' tmp[425661](133076 call ! call_tmp[660471]))
    unknown call_tmp[660476] "expr temp" "maybe param" "maybe type" "temp"
    (660479 'move' call_tmp[660476](425674 call _cond_invalid tmp[425661]))
    if call_tmp[660476]
    {
      (425677 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566503] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566504] "maybe param" "temp"
    unknown call_tmp[660481] "expr temp" "maybe param" "maybe type" "temp"
    (660484 'move' call_tmp[660481](425662 call isTrue tmp[425661]))
    (566509 'move' tmp[566504](566507 call _cond_test call_tmp[660481]))
    if tmp[566504]
    {
      (566514 'move' tmp[566503](566511 '_paramFoldLogical' tmp[566504] 1))
    }
    {
      unknown tmp[566516] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660488] "expr temp" "maybe param" "maybe type" "temp"
      (660491 'move' call_tmp[660488](133079 call rank _mt[243] this[133830]))
      unknown call_tmp[660493] "expr temp" "maybe param" "maybe type" "temp"
      (660496 'move' call_tmp[660493](133083 call != call_tmp[660488] 1))
      (566518 'move' tmp[566516](425666 call isTrue call_tmp[660493]))
      (566523 'move' tmp[566503](566520 '_paramFoldLogical' tmp[566504] tmp[566516]))
    }
    unknown call_tmp[660498] "expr temp" "maybe param" "maybe type" "temp"
    (660501 'move' call_tmp[660498](133108 call _cond_test tmp[566503]))
    if call_tmp[660498]
    {
      (133106 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425682] "maybe param" "temp"
    (425693 'move' tmp[425682] 1)
    unknown call_tmp[660503] "expr temp" "maybe param" "maybe type" "temp"
    (660506 'move' call_tmp[660503](425695 call _cond_invalid tmp[425682]))
    if call_tmp[660503]
    {
      (425698 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566530] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566531] "maybe param" "temp"
    unknown call_tmp[660508] "expr temp" "maybe param" "maybe type" "temp"
    (660511 'move' call_tmp[660508](425683 call isTrue tmp[425682]))
    (566536 'move' tmp[566531](566534 call _cond_test call_tmp[660508]))
    if tmp[566531]
    {
      unknown tmp[566538] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660515] "expr temp" "maybe param" "maybe type" "temp"
      (660518 'move' call_tmp[660515](133117 call(384329 call (partial) isEmpty _mt[243] this[133830])))
      (566540 'move' tmp[566538](425686 call isTrue call_tmp[660515]))
      (566545 'move' tmp[566530](566542 '_paramFoldLogical' tmp[566531] tmp[566538]))
    }
    {
      (566550 'move' tmp[566530](566547 '_paramFoldLogical' tmp[566531] 0))
    }
    unknown call_tmp[660520] "expr temp" "maybe param" "maybe type" "temp"
    (660523 'move' call_tmp[660520](133141 call _cond_test tmp[566530]))
    if call_tmp[660520]
    {
      (133139 call halt "back called on an empty array")
    }
    unknown call_tmp[660527] "expr temp" "maybe param" "maybe type" "temp"
    (660530 'move' call_tmp[660527](133148 call _dom _mt[243] this[133830]))
    unknown call_tmp[660534] "expr temp" "maybe param" "maybe type" "temp"
    (660537 'move' call_tmp[660534](133151 call high _mt[243] call_tmp[660527]))
    unknown call_tmp[660539] "expr temp" "maybe param" "maybe type" "temp"
    (660542 'move' call_tmp[660539](133155 call this[133830] call_tmp[660534]))
    (518313 'move' ret[518308](518312 'deref' call_tmp[660539]))
    (518310 return ret[518308])
  }
  function _array[133588](?).front[133162](arg _mt[133836]:_MT[238], arg this[133834]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518317] "RVV" "temp"
    unknown tmp[425703] "maybe param" "temp"
    unknown call_tmp[660544] "expr temp" "maybe param" "maybe type" "temp"
    (660547 'move' call_tmp[660544](133167 call isRectangularArr this[133834]))
    (425714 'move' tmp[425703](133168 call ! call_tmp[660544]))
    unknown call_tmp[660549] "expr temp" "maybe param" "maybe type" "temp"
    (660552 'move' call_tmp[660549](425716 call _cond_invalid tmp[425703]))
    if call_tmp[660549]
    {
      (425719 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566557] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566558] "maybe param" "temp"
    unknown call_tmp[660554] "expr temp" "maybe param" "maybe type" "temp"
    (660557 'move' call_tmp[660554](425704 call isTrue tmp[425703]))
    (566563 'move' tmp[566558](566561 call _cond_test call_tmp[660554]))
    if tmp[566558]
    {
      (566568 'move' tmp[566557](566565 '_paramFoldLogical' tmp[566558] 1))
    }
    {
      unknown tmp[566570] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660561] "expr temp" "maybe param" "maybe type" "temp"
      (660564 'move' call_tmp[660561](133171 call rank _mt[243] this[133834]))
      unknown call_tmp[660566] "expr temp" "maybe param" "maybe type" "temp"
      (660569 'move' call_tmp[660566](133175 call != call_tmp[660561] 1))
      (566572 'move' tmp[566570](425708 call isTrue call_tmp[660566]))
      (566577 'move' tmp[566557](566574 '_paramFoldLogical' tmp[566558] tmp[566570]))
    }
    unknown call_tmp[660571] "expr temp" "maybe param" "maybe type" "temp"
    (660574 'move' call_tmp[660571](133200 call _cond_test tmp[566557]))
    if call_tmp[660571]
    {
      (133198 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425724] "maybe param" "temp"
    (425735 'move' tmp[425724] 1)
    unknown call_tmp[660576] "expr temp" "maybe param" "maybe type" "temp"
    (660579 'move' call_tmp[660576](425737 call _cond_invalid tmp[425724]))
    if call_tmp[660576]
    {
      (425740 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566584] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566585] "maybe param" "temp"
    unknown call_tmp[660581] "expr temp" "maybe param" "maybe type" "temp"
    (660584 'move' call_tmp[660581](425725 call isTrue tmp[425724]))
    (566590 'move' tmp[566585](566588 call _cond_test call_tmp[660581]))
    if tmp[566585]
    {
      unknown tmp[566592] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660588] "expr temp" "maybe param" "maybe type" "temp"
      (660591 'move' call_tmp[660588](133209 call(384336 call (partial) isEmpty _mt[243] this[133834])))
      (566594 'move' tmp[566592](425728 call isTrue call_tmp[660588]))
      (566599 'move' tmp[566584](566596 '_paramFoldLogical' tmp[566585] tmp[566592]))
    }
    {
      (566604 'move' tmp[566584](566601 '_paramFoldLogical' tmp[566585] 0))
    }
    unknown call_tmp[660593] "expr temp" "maybe param" "maybe type" "temp"
    (660596 'move' call_tmp[660593](133233 call _cond_test tmp[566584]))
    if call_tmp[660593]
    {
      (133231 call halt "front called on an empty array")
    }
    unknown call_tmp[660600] "expr temp" "maybe param" "maybe type" "temp"
    (660603 'move' call_tmp[660600](133240 call _dom _mt[243] this[133834]))
    unknown call_tmp[660607] "expr temp" "maybe param" "maybe type" "temp"
    (660610 'move' call_tmp[660607](133243 call low _mt[243] call_tmp[660600]))
    unknown call_tmp[660612] "expr temp" "maybe param" "maybe type" "temp"
    (660615 'move' call_tmp[660612](133247 call this[133834] call_tmp[660607]))
    (518322 'move' ret[518317](518321 'deref' call_tmp[660612]))
    (518319 return ret[518317])
  }
  function _array[133588](?).reverse[133254](arg _mt[133840]:_MT[238], arg this[133838]:_array[133588](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660619] "expr temp" "maybe param" "maybe type" "temp"
    (660622 'move' call_tmp[660619](133258 call(384343 call (partial) chpl__isDense1DArray _mt[243] this[133838])))
    unknown call_tmp[660624] "expr temp" "maybe param" "maybe type" "temp"
    (660627 'move' call_tmp[660624](133259 call ! call_tmp[660619]))
    unknown call_tmp[660629] "expr temp" "maybe param" "maybe type" "temp"
    (660632 'move' call_tmp[660629](133282 call _cond_test call_tmp[660624]))
    if call_tmp[660629]
    {
      (133280 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    unknown call_tmp[660636] "expr temp" "maybe param" "maybe type" "temp"
    (660639 'move' call_tmp[660636](133289 call _dom _mt[243] this[133838]))
    unknown call_tmp[660643] "maybe param" "maybe type" "temp"
    (660646 'move' call_tmp[660643](133292 call low _mt[243] call_tmp[660636]))
    const lo[133295] "dead at end of block" "const" "insert auto destroy"
    (543029 'init var' lo[133295] call_tmp[660643])
    unknown call_tmp[660650] "expr temp" "maybe param" "maybe type" "temp"
    (660653 'move' call_tmp[660650](133299 call _dom _mt[243] this[133838]))
    unknown call_tmp[660657] "expr temp" "maybe param" "maybe type" "temp"
    (660660 'move' call_tmp[660657](133302 call size _mt[243] call_tmp[660650]))
    unknown call_tmp[660662] "maybe param" "maybe type" "temp"
    (660665 'move' call_tmp[660662](133306 call / call_tmp[660657] 2))
    const mid[133308] "dead at end of block" "const" "insert auto destroy"
    (543031 'init var' mid[133308] call_tmp[660662])
    unknown call_tmp[660669] "expr temp" "maybe param" "maybe type" "temp"
    (660672 'move' call_tmp[660669](133312 call _dom _mt[243] this[133838]))
    unknown call_tmp[660676] "maybe param" "maybe type" "temp"
    (660679 'move' call_tmp[660676](133315 call high _mt[243] call_tmp[660669]))
    const hi[133318] "dead at end of block" "const" "insert auto destroy"
    (543033 'init var' hi[133318] call_tmp[660676])
    (133321 'end of statement')
    {
      unknown _indexOfInterest[133347] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133348] "expr temp" "temp"
      unknown call_tmp[660681] "expr temp" "maybe param" "maybe type" "temp"
      (660684 'move' call_tmp[660681](133364 call chpl_direct_counted_range_iter 0 mid[133308]))
      (133357 'move' _iterator[133348](133355 call _getIterator call_tmp[660681]))
      Defer
      {
        {
          (133380 call _freeIterator _iterator[133348])
        }
      }
      { scopeless type
        (133369 'move' _indexOfInterest[133347](133366 call iteratorIndex _iterator[133348]))
      }
      ForLoop[133349]
      {
        unknown i[133373] "index var" "insert auto destroy"
        (480331 'end of statement')
        (133375 'move' i[133373] _indexOfInterest[133347])
        (480332 'end of statement' i[133373])
        {
          unknown call_tmp[660686] "expr temp" "maybe param" "maybe type" "temp"
          (660689 'move' call_tmp[660686](133332 call + lo[133295] i[133373]))
          unknown call_tmp[660691] "expr temp" "maybe param" "maybe type" "temp"
          (660694 'move' call_tmp[660691](133335 call this[133838] call_tmp[660686]))
          unknown call_tmp[660696] "expr temp" "maybe param" "maybe type" "temp"
          (660699 'move' call_tmp[660696](133339 call - hi[133318] i[133373]))
          unknown call_tmp[660701] "expr temp" "maybe param" "maybe type" "temp"
          (660704 'move' call_tmp[660701](133342 call this[133838] call_tmp[660696]))
          (133343 call <=> call_tmp[660691] call_tmp[660701])
          (480334 'end of statement' lo[133295] i[133373] hi[133318] i[133373])
        }
        label _continueLabel[133352]
        _indexOfInterest[133347]
        _iterator[133348]
      }
      label _breakLabel[133353]
    }
    (518324 return _void[55])
  }
  function _array[133588](?).find[133398](arg _mt[133844]:_MT[238], arg this[133842]:_array[133588](?), arg val[133395] :
  (133392 call eltType _mt[243] this[133842])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518328] "RVV" "temp"
    {
      unknown _indexOfInterest[133436] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133437] "expr temp" "temp"
      unknown call_tmp[660710] "expr temp" "maybe param" "maybe type" "temp"
      (660713 'move' call_tmp[660710](133413 call _dom _mt[243] this[133842]))
      (133446 'move' _iterator[133437](133444 call _getIterator call_tmp[660710]))
      Defer
      {
        {
          (133463 call _freeIterator _iterator[133437])
        }
      }
      { scopeless type
        (133452 'move' _indexOfInterest[133436](133449 call iteratorIndex _iterator[133437]))
      }
      ForLoop[133438]
      {
        unknown i[133456] "index var" "insert auto destroy"
        (480340 'end of statement')
        (133458 'move' i[133456] _indexOfInterest[133436])
        (480341 'end of statement' i[133456])
        {
          unknown call_tmp[660715] "expr temp" "maybe param" "maybe type" "temp"
          (660718 'move' call_tmp[660715](133419 call this[133842] i[133456]))
          unknown call_tmp[660720] "expr temp" "maybe param" "maybe type" "temp"
          (660723 'move' call_tmp[660720](133421 call == call_tmp[660715] val[133395]))
          unknown call_tmp[660725] "expr temp" "maybe param" "maybe type" "temp"
          (660728 'move' call_tmp[660725](133430 call _cond_test call_tmp[660720]))
          if call_tmp[660725]
          {
            unknown call_tmp[660730] "expr temp" "maybe param" "maybe type" "temp"
            (660733 'move' call_tmp[660730](133426 call _build_tuple 1 i[133456]))
            unknown call_tmp[660737] "expr temp" "maybe param" "maybe type" "temp"
            (660740 'move' call_tmp[660737](518338 call _dom _mt[243] this[133842]))
            unknown call_tmp[660742] "expr temp" "maybe param" "maybe type" "temp"
            (660745 'move' call_tmp[660742](518336 call chpl__buildIndexType call_tmp[660737]))
            unknown call_tmp[660747] "expr temp" "maybe param" "maybe type" "temp"
            (660750 'move' call_tmp[660747](518333 call _build_tuple bool[10] call_tmp[660742]))
            (518342 'move' ret[518328](518341 'coerce' call_tmp[660730] call_tmp[660747]))
            gotoReturn _end_find[518326] _end_find[518326]
            (480343 'end of statement' i[133456])
          }
        }
        label _continueLabel[133441]
        _indexOfInterest[133436]
        _iterator[133437]
      }
      label _breakLabel[133442]
    }
    unknown arbInd[133478] "dead at end of block" "insert auto destroy"
    unknown call_tmp[660754] "expr temp" "maybe param" "maybe type" "temp"
    (660757 'move' call_tmp[660754](133472 call _dom _mt[243] this[133842]))
    unknown call_tmp[660759] "expr temp" "maybe param" "maybe type" "temp"
    (660762 'move' call_tmp[660759](133476 call chpl__buildIndexType call_tmp[660754]))
    (543035 'default init var' arbInd[133478] call_tmp[660759])
    (133481 'end of statement')
    unknown call_tmp[660764] "expr temp" "maybe param" "maybe type" "temp"
    (660767 'move' call_tmp[660764](133485 call _build_tuple 0 arbInd[133478]))
    unknown call_tmp[660771] "expr temp" "maybe param" "maybe type" "temp"
    (660774 'move' call_tmp[660771](518352 call _dom _mt[243] this[133842]))
    unknown call_tmp[660776] "expr temp" "maybe param" "maybe type" "temp"
    (660779 'move' call_tmp[660776](518350 call chpl__buildIndexType call_tmp[660771]))
    unknown call_tmp[660781] "expr temp" "maybe param" "maybe type" "temp"
    (660784 'move' call_tmp[660781](518347 call _build_tuple bool[10] call_tmp[660776]))
    (518356 'move' ret[518328](518355 'coerce' call_tmp[660764] call_tmp[660781]))
    gotoReturn _end_find[518326] _end_find[518326]
    (480345 'end of statement' arbInd[133478])
    label _end_find[518326]
    (518330 return ret[518328])
  }
  { scopeless type
    unknown call_tmp[660788] "expr temp" "maybe param" "maybe type" "temp"
    (660791 'move' call_tmp[660788](133402 call _dom _mt[243] this[133842]))
    unknown call_tmp[660793] "expr temp" "maybe param" "maybe type" "temp"
    (660796 'move' call_tmp[660793](133406 call chpl__buildIndexType call_tmp[660788]))
    (133409 call _build_tuple bool[10] call_tmp[660793])
  }
  function _array[133588](?).count[133501](arg _mt[133848]:_MT[238], arg this[133846]:_array[133588](?), arg val[133498] :
  (133495 call eltType _mt[243] this[133846])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518362] "RVV" "temp"
    unknown call_tmp[660800] "expr temp" "maybe param" "maybe type" "temp"
    (660803 'move' call_tmp[660800](133507 call == this[133846] val[133498]))
    unknown call_tmp[660805] "expr temp" "maybe param" "maybe type" "temp"
    (660808 'move' call_tmp[660805](133509 'reduce' SumReduceScanOp[376372](?) call_tmp[660800] 0))
    (518368 'move' ret[518362](518367 'coerce' call_tmp[660805] int(64)[13]))
    (518364 return ret[518362])
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133588](?).shape[133519](arg _mt[133852]:_MT[238], arg this[133850]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518372] "RVV" "temp"
    unknown call_tmp[660812] "expr temp" "maybe param" "maybe type" "temp"
    (660815 'move' call_tmp[660812](133522 call _dom _mt[243] this[133850]))
    unknown call_tmp[660819] "expr temp" "maybe param" "maybe type" "temp"
    (660822 'move' call_tmp[660819](133527 call shape _mt[243] call_tmp[660812]))
    (518377 'move' ret[518372](518376 'deref' call_tmp[660819]))
    (518374 return ret[518372])
  }
  function _array[133588](?)._scan[133539](arg _mt[133856]:_MT[238], arg this[133854]:_array[133588](?), arg op[133537]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518381] "RVV" "temp"
    unknown call_tmp[660826] "expr temp" "maybe param" "maybe type" "temp"
    (660829 'move' call_tmp[660826](360052 call _value _mt[243] this[133854]))
    unknown call_tmp[660835] "expr temp" "maybe param" "maybe type" "temp"
    (660838 'move' call_tmp[660835](133577 call _dom _mt[243] this[133854]))
    unknown call_tmp[660840] "expr temp" "maybe param" "maybe type" "temp"
    (660843 'move' call_tmp[660840](133580 call(133571 call (partial) doiScan _mt[243] call_tmp[660826]) op[133537] call_tmp[660835]))
    (518386 'move' ret[518381](518385 'deref' call_tmp[660840]))
    (518383 return ret[518381])
  }
  where {
    unknown call_tmp[660847] "expr temp" "maybe param" "maybe type" "temp"
    (660850 'move' call_tmp[660847](384362 call _value _mt[243] this[133854]))
    unknown call_tmp[660854] "expr temp" "maybe param" "maybe type" "temp"
    (660857 'move' call_tmp[660854](133566 call _dom _mt[243] this[133854]))
    (133569 call canResolveMethod module=[255] Reflection[224882] call_tmp[660847] "doiScan" op[133537] call_tmp[660854])
    (360045 'referenced modules list' Reflection[224882])
  }
  type _array[133588](?) val _pid[128415]:int(64)[13] int(64)[13] unknown _instance[128419] "alias scope from this" "owned" val _unowned[128424]:bool[10] bool[10] forwarding ( )
  function _do_destroy_arr[133865](arg _unowned[133862]:bool[10], arg _instance[133867]:_any[178](?), arg deinitElts[133870] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[660859] "expr temp" "maybe param" "maybe type" "temp"
    (660862 'move' call_tmp[660859](133874 call ! _unowned[133862]))
    unknown call_tmp[660864] "expr temp" "maybe param" "maybe type" "temp"
    (660867 'move' call_tmp[660864](134113 call _cond_test call_tmp[660859]))
    if call_tmp[660864]
    {
      const tmp[134089] "const" "temp"
      unknown call_tmp[660869] "expr temp" "maybe param" "maybe type" "temp"
      (660872 'move' call_tmp[660869](134086 '_wide_get_locale' _instance[133867]))
      (134091 'move' tmp[134089](134087 'deref' call_tmp[660869]))
      {
        {
          unknown call_tmp[660876] "expr temp" "maybe param" "maybe type" "temp"
          (660879 'move' call_tmp[660876](133882 call(133878 call (partial) isSliceArrayView _mt[243] _instance[133867])))
          unknown call_tmp[660881] "maybe param" "maybe type" "temp"
          (660884 'move' call_tmp[660881](133883 call ! call_tmp[660876]))
          unknown arrIsInList[133885] "dead at end of block" "param"
          (543037 'init var' arrIsInList[133885] call_tmp[660881])
          (133888 'end of statement')
          unknown call_tmp[660888] "maybe param" "maybe type" "temp"
          (660891 'move' call_tmp[660888](133901 call(133896 call (partial) remove _mt[243] _instance[133867]) arrIsInList[133885]))
          unknown tmp[133902] "dead at end of block" "insert auto destroy" "temp"
          (543039 'init var' tmp[133902] call_tmp[660888])
          (133909 call _check_tuple_var_decl tmp[133902] 2)
          (480350 'end of statement')
          unknown call_tmp[660893] "maybe param" "maybe type" "temp"
          (660896 'move' call_tmp[660893](133903 call tmp[133902] 0))
          unknown arrToFree[133890] "dead at end of block" "insert auto destroy"
          (543041 'init var' arrToFree[133890] call_tmp[660893])
          unknown call_tmp[660898] "maybe param" "maybe type" "temp"
          (660901 'move' call_tmp[660898](133906 call tmp[133902] 1))
          unknown domToRemove[133892] "dead at end of block" "insert auto destroy"
          (543043 'init var' domToRemove[133892] call_tmp[660898])
          (133914 'end of statement')
          unknown domToFree[133919] "dead at end of block" "insert auto destroy"
          (543045 'init var' domToFree[133919] nil[44] unmanaged BaseDom?[415465])
          (133922 'end of statement')
          unknown distToRemove[133927] "dead at end of block" "insert auto destroy"
          (543047 'init var' distToRemove[133927] nil[44] unmanaged BaseDist?[415459])
          (133930 'end of statement')
          unknown distToFree[133935] "dead at end of block" "insert auto destroy"
          (543049 'init var' distToFree[133935] nil[44] unmanaged BaseDist?[415459])
          (133938 'end of statement')
          unknown domIsPrivatized[133940] "dead at end of block" "insert auto destroy"
          (543051 'init var' domIsPrivatized[133940] 0)
          (133943 'end of statement')
          const instanceDom[133945] "dead at end of block" "const" "insert auto destroy"
          (543053 'init var' instanceDom[133945] domToRemove[133892])
          (133948 'end of statement')
          unknown call_tmp[660903] "expr temp" "maybe param" "maybe type" "temp"
          (660906 'move' call_tmp[660903](133951 call != domToRemove[133892] nil[44]))
          unknown call_tmp[660908] "expr temp" "maybe param" "maybe type" "temp"
          (660911 'move' call_tmp[660908](133986 call _cond_test call_tmp[660903]))
          if call_tmp[660908]
          {
            unknown tmp[492217] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[492242] "maybe param" "temp"
            (492245 'move' tmp[492242](492243 'addr of' domToFree[133919]))
            unknown tmp[492253] "maybe param" "temp"
            (492256 'move' tmp[492253](492254 'addr of' distToRemove[133927]))
            unknown call_tmp[660913] "expr temp" "maybe param" "maybe type" "temp"
            (660916 'move' call_tmp[660913](133959 call postfix! domToRemove[133892]))
            (492218 'move' tmp[492217](133965 call(133961 call (partial) remove _mt[243] call_tmp[660913])))
            { scopeless
              unknown call_tmp[660922] "expr temp" "maybe param" "maybe type" "temp"
              (660925 'move' call_tmp[660922](492224 call size _mt[243] tmp[492217]))
              unknown call_tmp[660927] "expr temp" "maybe param" "maybe type" "temp"
              (660930 'move' call_tmp[660927](492227 call != 2 call_tmp[660922]))
              unknown call_tmp[660932] "expr temp" "maybe param" "maybe type" "temp"
              (660935 'move' call_tmp[660932](492234 call _cond_test call_tmp[660927]))
              if call_tmp[660932]
              {
                (492230 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[660937] "expr temp" "maybe param" "maybe type" "temp"
            (660940 'move' call_tmp[660937](492240 call tmp[492217] 0))
            (492247 call = tmp[492242] call_tmp[660937])
            unknown call_tmp[660942] "expr temp" "maybe param" "maybe type" "temp"
            (660945 'move' call_tmp[660942](492251 call tmp[492217] 1))
            (492258 call = tmp[492253] call_tmp[660942])
            (480352 'end of statement' domToFree[133919] distToRemove[133927] domToRemove[133892])
            unknown tmp[425745] "maybe param" "temp"
            (425756 'move' tmp[425745] 1)
            unknown call_tmp[660947] "expr temp" "maybe param" "maybe type" "temp"
            (660950 'move' call_tmp[660947](425758 call _cond_invalid tmp[425745]))
            if call_tmp[660947]
            {
              (425761 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566611] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566612] "maybe param" "temp"
            unknown call_tmp[660952] "expr temp" "maybe param" "maybe type" "temp"
            (660955 'move' call_tmp[660952](425746 call isTrue tmp[425745]))
            (566617 'move' tmp[566612](566615 call _cond_test call_tmp[660952]))
            if tmp[566612]
            {
              unknown tmp[566619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[660957] "expr temp" "maybe param" "maybe type" "temp"
              (660960 'move' call_tmp[660957](133973 call postfix! domToRemove[133892]))
              unknown call_tmp[660964] "expr temp" "maybe param" "maybe type" "temp"
              (660967 'move' call_tmp[660964](133975 call pid _mt[243] call_tmp[660957]))
              unknown call_tmp[660969] "expr temp" "maybe param" "maybe type" "temp"
              (660972 'move' call_tmp[660969](133979 call != call_tmp[660964] nullPid[113712]))
              (566621 'move' tmp[566619](425749 call isTrue call_tmp[660969]))
              (566626 'move' tmp[566611](566623 '_paramFoldLogical' tmp[566612] tmp[566619]))
            }
            {
              (566631 'move' tmp[566611](566628 '_paramFoldLogical' tmp[566612] 0))
            }
            (133983 call = domIsPrivatized[133940] tmp[566611])
            (480357 'end of statement' domIsPrivatized[133940] domToRemove[133892])
          }
          unknown distIsPrivatized[133991] "dead at end of block" "insert auto destroy"
          (543055 'init var' distIsPrivatized[133991] 0)
          (133994 'end of statement' domToRemove[133892])
          unknown call_tmp[660974] "expr temp" "maybe param" "maybe type" "temp"
          (660977 'move' call_tmp[660974](133997 call != distToRemove[133927] nil[44]))
          unknown call_tmp[660979] "expr temp" "maybe param" "maybe type" "temp"
          (660982 'move' call_tmp[660979](134028 call _cond_test call_tmp[660974]))
          if call_tmp[660979]
          {
            unknown call_tmp[660984] "expr temp" "maybe param" "maybe type" "temp"
            (660987 'move' call_tmp[660984](134001 call postfix! distToRemove[133927]))
            unknown call_tmp[660991] "expr temp" "maybe param" "maybe type" "temp"
            (660994 'move' call_tmp[660991](134007 call(134003 call (partial) remove _mt[243] call_tmp[660984])))
            (134008 call = distToFree[133935] call_tmp[660991])
            (480360 'end of statement' distToFree[133935] distToRemove[133927])
            unknown tmp[425766] "maybe param" "temp"
            (425777 'move' tmp[425766] 1)
            unknown call_tmp[660996] "expr temp" "maybe param" "maybe type" "temp"
            (660999 'move' call_tmp[660996](425779 call _cond_invalid tmp[425766]))
            if call_tmp[660996]
            {
              (425782 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566638] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566639] "maybe param" "temp"
            unknown call_tmp[661001] "expr temp" "maybe param" "maybe type" "temp"
            (661004 'move' call_tmp[661001](425767 call isTrue tmp[425766]))
            (566644 'move' tmp[566639](566642 call _cond_test call_tmp[661001]))
            if tmp[566639]
            {
              unknown tmp[566646] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661006] "expr temp" "maybe param" "maybe type" "temp"
              (661009 'move' call_tmp[661006](134015 call postfix! distToRemove[133927]))
              unknown call_tmp[661013] "expr temp" "maybe param" "maybe type" "temp"
              (661016 'move' call_tmp[661013](134017 call pid _mt[243] call_tmp[661006]))
              unknown call_tmp[661018] "expr temp" "maybe param" "maybe type" "temp"
              (661021 'move' call_tmp[661018](134021 call != call_tmp[661013] nullPid[113712]))
              (566648 'move' tmp[566646](425770 call isTrue call_tmp[661018]))
              (566653 'move' tmp[566638](566650 '_paramFoldLogical' tmp[566639] tmp[566646]))
            }
            {
              (566658 'move' tmp[566638](566655 '_paramFoldLogical' tmp[566639] 0))
            }
            (134025 call = distIsPrivatized[133991] tmp[566638])
            (480364 'end of statement' distIsPrivatized[133991] distToRemove[133927])
          }
          unknown call_tmp[661023] "expr temp" "maybe param" "maybe type" "temp"
          (661026 'move' call_tmp[661023](134034 call != arrToFree[133890] nil[44]))
          unknown call_tmp[661028] "expr temp" "maybe param" "maybe type" "temp"
          (661031 'move' call_tmp[661028](134047 call _cond_test call_tmp[661023]))
          if call_tmp[661028]
          {
            unknown call_tmp[661033] "expr temp" "maybe param" "maybe type" "temp"
            (661036 'move' call_tmp[661033](134042 call _isPrivatized _instance[133867]))
            (134045 call _delete_arr _instance[133867] call_tmp[661033](deinitElts = deinitElts[133870]))
          }
          unknown call_tmp[661038] "expr temp" "maybe param" "maybe type" "temp"
          (661041 'move' call_tmp[661038](134054 call != domToFree[133919] nil[44]))
          unknown call_tmp[661043] "expr temp" "maybe param" "maybe type" "temp"
          (661046 'move' call_tmp[661043](134064 call _cond_test call_tmp[661038]))
          if call_tmp[661043]
          {
            unknown call_tmp[661048] "expr temp" "maybe param" "maybe type" "temp"
            (661051 'move' call_tmp[661048](134058 call postfix! instanceDom[133945]))
            (134062 call _delete_dom call_tmp[661048] domIsPrivatized[133940])
            (480368 'end of statement' instanceDom[133945] domIsPrivatized[133940])
          }
          unknown call_tmp[661053] "expr temp" "maybe param" "maybe type" "temp"
          (661056 'move' call_tmp[661053](134071 call != distToFree[133935] nil[44]))
          unknown call_tmp[661058] "expr temp" "maybe param" "maybe type" "temp"
          (661061 'move' call_tmp[661058](134081 call _cond_test call_tmp[661053]))
          if call_tmp[661058]
          {
            unknown call_tmp[661063] "expr temp" "maybe param" "maybe type" "temp"
            (661066 'move' call_tmp[661063](134075 call postfix! distToFree[133935]))
            (134079 call _delete_dist call_tmp[661063] distIsPrivatized[133991])
            (480371 'end of statement' distToFree[133935] distIsPrivatized[133991])
          }
        }
        (134094 'on block' 0 tmp[134089])
      }
    }
    {
      unknown call_tmp[661068] "expr temp" "maybe param" "maybe type" "temp"
      (661071 'move' call_tmp[661068](134101 call chpl__isArrayView _instance[133867]))
      unknown call_tmp[661073] "expr temp" "maybe param" "maybe type" "temp"
      (661076 'move' call_tmp[661073](134108 call _cond_test call_tmp[661068]))
      if call_tmp[661073]
      {
        (134104 call chpl__delete _instance[133867])
      }
    }
    (518388 return _void[55])
  }
  function _do_destroy_array[134126](arg array[134123]:_array[133588](?), arg deinitElts[134129] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[661080] "expr temp" "maybe param" "maybe type" "temp"
    (661083 'move' call_tmp[661080](134134 call _unowned _mt[243] array[134123]))
    unknown call_tmp[661087] "expr temp" "maybe param" "maybe type" "temp"
    (661090 'move' call_tmp[661087](134139 call _instance _mt[243] array[134123]))
    (134143 call _do_destroy_arr call_tmp[661080] call_tmp[661087] deinitElts[134129])
    (518390 return _void[55])
  }
  function _deinitElementsIsParallel[134152](arg eltType[134150]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518394] "RVV" "param" "temp"
    (518399 'move' ret[518394](518398 'deref' 0))
    (518396 return ret[518394])
  }
  function _deinitElements[134166](arg array[134163]:_array[133588](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[661094] "expr temp" "maybe param" "maybe type" "temp"
    (661097 'move' call_tmp[661094](134171 call eltType _mt[243] array[134163]))
    unknown call_tmp[661099] "maybe param" "maybe type" "temp"
    (661102 'move' call_tmp[661099](134174 'needs auto destroy' call_tmp[661094]))
    unknown needsDestroy[134175] "dead at end of block" "param"
    (543057 'init var' needsDestroy[134175] call_tmp[661099])
    (134178 'end of statement')
    unknown call_tmp[661104] "expr temp" "maybe param" "maybe type" "temp"
    (661107 'move' call_tmp[661104](134248 call _cond_test needsDestroy[134175]))
    if call_tmp[661104]
    {
      unknown call_tmp[661111] "expr temp" "maybe param" "maybe type" "temp"
      (661114 'move' call_tmp[661111](134183 call eltType _mt[243] array[134163]))
      unknown call_tmp[661116] "expr temp" "maybe param" "maybe type" "temp"
      (661119 'move' call_tmp[661116](134187 call _deinitElementsIsParallel call_tmp[661111]))
      unknown call_tmp[661121] "expr temp" "maybe param" "maybe type" "temp"
      (661124 'move' call_tmp[661121](134243 call _cond_test call_tmp[661116]))
      if call_tmp[661121]
      {
        Forall {
          induction variables:
            
            unknown elt[134197] "index var" "insert auto destroy"
          iterated expressions:
            array[134163]
          shadow variables:
          other variables
            forall body
          {
            (134193 call chpl__autoDestroy elt[134197])
            (480377 'end of statement' elt[134197])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134209] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134210] "expr temp" "temp"
          (134219 'move' _iterator[134210](134217 call _getIterator array[134163]))
          Defer
          {
            {
              (134235 call _freeIterator _iterator[134210])
            }
          }
          { scopeless type
            (134224 'move' _indexOfInterest[134209](134221 call iteratorIndex _iterator[134210]))
          }
          ForLoop[134211]
          {
            unknown elt[134228] "index var" "insert auto destroy"
            (480380 'end of statement')
            (134230 'move' elt[134228] _indexOfInterest[134209])
            (480381 'end of statement' elt[134228])
            {
              (134206 call chpl__autoDestroy elt[134228])
              (480383 'end of statement' elt[134228])
            }
            label _continueLabel[134214]
            _indexOfInterest[134209]
            _iterator[134210]
          }
          label _breakLabel[134215]
        }
      }
    }
    unknown call_tmp[661128] "expr temp" "maybe param" "maybe type" "temp"
    (661131 'move' call_tmp[661128](134253 call _instance _mt[243] array[134163]))
    (134262 call(134258 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[661128]))
    (518401 return _void[55])
  }
  function _array[133588](?).equals[134273](arg _mt[134278]:_MT[238], arg this[134275]:_array[133588](?) :
  _array[133588](?), arg that[134270]:_array[133588](?)) : _unknown[51] "method"
  {
    unknown ret[518405] "RVV" "temp"
    unknown call_tmp[661137] "expr temp" "maybe param" "maybe type" "temp"
    (661140 'move' call_tmp[661137](134282 call _value _mt[243] this[134275]))
    unknown call_tmp[661144] "expr temp" "maybe param" "maybe type" "temp"
    (661147 'move' call_tmp[661144](134286 call _value _mt[243] that[134270]))
    unknown call_tmp[661149] "expr temp" "maybe param" "maybe type" "temp"
    (661152 'move' call_tmp[661149](134289 call == call_tmp[661137] call_tmp[661144]))
    unknown call_tmp[661154] "expr temp" "maybe param" "maybe type" "temp"
    (661157 'move' call_tmp[661154](134294 call _cond_test call_tmp[661149]))
    if call_tmp[661154]
    {
      (518411 'move' ret[518405](518410 'coerce' 1 bool[10]))
      gotoReturn _end_equals[518403] _end_equals[518403]
    }
    unknown call_tmp[661161] "expr temp" "maybe param" "maybe type" "temp"
    (661164 'move' call_tmp[661161](134301 call rank _mt[243] this[134275]))
    unknown call_tmp[661168] "expr temp" "maybe param" "maybe type" "temp"
    (661171 'move' call_tmp[661168](134305 call rank _mt[243] that[134270]))
    unknown call_tmp[661173] "expr temp" "maybe param" "maybe type" "temp"
    (661176 'move' call_tmp[661173](134308 call != call_tmp[661161] call_tmp[661168]))
    unknown call_tmp[661178] "expr temp" "maybe param" "maybe type" "temp"
    (661181 'move' call_tmp[661178](134313 call _cond_test call_tmp[661173]))
    if call_tmp[661178]
    {
      (518417 'move' ret[518405](518416 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518403] _end_equals[518403]
    }
    unknown call_tmp[661185] "expr temp" "maybe param" "maybe type" "temp"
    (661188 'move' call_tmp[661185](134319 call size _mt[243] this[134275]))
    unknown call_tmp[661192] "expr temp" "maybe param" "maybe type" "temp"
    (661195 'move' call_tmp[661192](134323 call size _mt[243] that[134270]))
    unknown call_tmp[661197] "expr temp" "maybe param" "maybe type" "temp"
    (661200 'move' call_tmp[661197](134326 call != call_tmp[661185] call_tmp[661192]))
    unknown call_tmp[661202] "expr temp" "maybe param" "maybe type" "temp"
    (661205 'move' call_tmp[661202](134331 call _cond_test call_tmp[661197]))
    if call_tmp[661202]
    {
      (518423 'move' ret[518405](518422 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518403] _end_equals[518403]
    }
    unknown tmp[425787] "maybe param" "temp"
    unknown call_tmp[661209] "expr temp" "maybe param" "maybe type" "temp"
    (661212 'move' call_tmp[661209](134338 call _dom _mt[243] this[134275]))
    (425798 'move' tmp[425787](134342 call isRectangularDom call_tmp[661209]))
    unknown call_tmp[661214] "expr temp" "maybe param" "maybe type" "temp"
    (661217 'move' call_tmp[661214](425800 call _cond_invalid tmp[425787]))
    if call_tmp[661214]
    {
      (425803 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566665] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566666] "maybe param" "temp"
    unknown call_tmp[661219] "expr temp" "maybe param" "maybe type" "temp"
    (661222 'move' call_tmp[661219](425788 call isTrue tmp[425787]))
    (566671 'move' tmp[566666](566669 call _cond_test call_tmp[661219]))
    if tmp[566666]
    {
      unknown tmp[566673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661226] "expr temp" "maybe param" "maybe type" "temp"
      (661229 'move' call_tmp[661226](134345 call _dom _mt[243] that[134270]))
      unknown call_tmp[661231] "expr temp" "maybe param" "maybe type" "temp"
      (661234 'move' call_tmp[661231](134349 call isRectangularDom call_tmp[661226]))
      (566675 'move' tmp[566673](425791 call isTrue call_tmp[661231]))
      (566680 'move' tmp[566665](566677 '_paramFoldLogical' tmp[566666] tmp[566673]))
    }
    {
      (566685 'move' tmp[566665](566682 '_paramFoldLogical' tmp[566666] 0))
    }
    unknown call_tmp[661236] "expr temp" "maybe param" "maybe type" "temp"
    (661239 'move' call_tmp[661236](134442 call _cond_test tmp[566665]))
    if call_tmp[661236]
    {
      {
        unknown _indexOfInterest[134398] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134399] "expr temp" "temp"
        unknown call_tmp[661243] "expr temp" "maybe param" "maybe type" "temp"
        (661246 'move' call_tmp[661243](134414 call rank _mt[243] this[134275]))
        unknown call_tmp[661248] "expr temp" "maybe param" "maybe type" "temp"
        (661251 'move' call_tmp[661248](134418 call chpl_direct_counted_range_iter 0 call_tmp[661243]))
        (134408 'move' _iterator[134399](134406 call _getIterator call_tmp[661248]))
        Defer
        {
          {
            (134434 call _freeIterator _iterator[134399])
          }
        }
        { scopeless type
          (134423 'move' _indexOfInterest[134398](134420 call iteratorIndex _iterator[134399]))
        }
        ForLoop[134400]
        {
          unknown d[134427] "index var" "insert auto destroy"
          (480391 'end of statement')
          (134429 'move' d[134427] _indexOfInterest[134398])
          (480392 'end of statement' d[134427])
          unknown call_tmp[661255] "expr temp" "maybe param" "maybe type" "temp"
          (661258 'move' call_tmp[661255](134363 call _dom _mt[243] this[134275]))
          unknown call_tmp[661262] "expr temp" "maybe param" "maybe type" "temp"
          (661265 'move' call_tmp[661262](134371 call(134366 call (partial) dim _mt[243] call_tmp[661255]) d[134427]))
          unknown call_tmp[661269] "expr temp" "maybe param" "maybe type" "temp"
          (661272 'move' call_tmp[661269](134372 call size _mt[243] call_tmp[661262]))
          unknown call_tmp[661276] "expr temp" "maybe param" "maybe type" "temp"
          (661279 'move' call_tmp[661276](134376 call _dom _mt[243] that[134270]))
          unknown call_tmp[661283] "expr temp" "maybe param" "maybe type" "temp"
          (661286 'move' call_tmp[661283](134384 call(134379 call (partial) dim _mt[243] call_tmp[661276]) d[134427]))
          unknown call_tmp[661290] "expr temp" "maybe param" "maybe type" "temp"
          (661293 'move' call_tmp[661290](134385 call size _mt[243] call_tmp[661283]))
          unknown call_tmp[661295] "expr temp" "maybe param" "maybe type" "temp"
          (661298 'move' call_tmp[661295](134388 call != call_tmp[661269] call_tmp[661290]))
          unknown call_tmp[661300] "expr temp" "maybe param" "maybe type" "temp"
          (661303 'move' call_tmp[661300](134393 call _cond_test call_tmp[661295]))
          if call_tmp[661300]
          {
            (518429 'move' ret[518405](518428 'coerce' 0 bool[10]))
            gotoReturn _end_equals[518403] _end_equals[518403]
          }
          label _continueLabel[134403]
          _indexOfInterest[134398]
          _iterator[134399]
        }
        label _breakLabel[134404]
      }
    }
    unknown call_tmp[661307] "expr temp" "maybe param" "maybe type" "temp"
    (661310 'move' call_tmp[661307](134448 call eltType _mt[243] this[134275]))
    unknown call_tmp[661312] "expr temp" "maybe param" "maybe type" "temp"
    (661315 'move' call_tmp[661312](134452 call isArrayType call_tmp[661307]))
    unknown call_tmp[661317] "expr temp" "maybe param" "maybe type" "temp"
    (661320 'move' call_tmp[661317](134517 call _cond_test call_tmp[661312]))
    if call_tmp[661317]
    {
      unknown ret[134454] "dead at end of block" "insert auto destroy"
      (543059 'init var' ret[134454] 1)
      (134457 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134499] "index var" "insert auto destroy"
          
          unknown thatArr[134501] "index var" "insert auto destroy"
        iterated expressions:
          this[134275]
          that[134270]
        shadow variables:
          ret[134470] 'reduce' intent outer var ret[134454]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134487] "temp"
          (134490 'move' tmp[134487](134489 'addr of' ret[134470]))
          unknown tmp[425808] "maybe param" "temp"
          (425819 'move' tmp[425808] tmp[134487])
          unknown call_tmp[661322] "expr temp" "maybe param" "maybe type" "temp"
          (661325 'move' call_tmp[661322](425821 call _cond_invalid tmp[425808]))
          if call_tmp[661322]
          {
            (425824 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[566692] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[566693] "maybe param" "temp"
          unknown call_tmp[661327] "expr temp" "maybe param" "maybe type" "temp"
          (661330 'move' call_tmp[661327](425809 call isTrue tmp[425808]))
          (566698 'move' tmp[566693](566696 call _cond_test call_tmp[661327]))
          if tmp[566693]
          {
            unknown tmp[566700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[661334] "expr temp" "maybe param" "maybe type" "temp"
            (661337 'move' call_tmp[661334](134485 call(134480 call (partial) equals _mt[243] thisArr[134499]) thatArr[134501]))
            (566702 'move' tmp[566700](425812 call isTrue call_tmp[661334]))
            (566707 'move' tmp[566692](566704 '_paramFoldLogical' tmp[566693] tmp[566700]))
          }
          {
            (566712 'move' tmp[566692](566709 '_paramFoldLogical' tmp[566693] 0))
          }
          (134495 call = tmp[134487] tmp[566692])
          (480396 'end of statement' thisArr[134499] thatArr[134501])
        }
      }
      (518435 'move' ret[518405](518434 'coerce' ret[134454] bool[10]))
      gotoReturn _end_equals[518403] _end_equals[518403]
      (480399 'end of statement' ret[134454])
    }
    {
      unknown call_tmp[661339] "expr temp" "maybe param" "maybe type" "temp"
      (661342 'move' call_tmp[661339](134510 call == this[134275] that[134270]))
      unknown call_tmp[661344] "expr temp" "maybe param" "maybe type" "temp"
      (661347 'move' call_tmp[661344](134512 'reduce' LogicalAndReduceScanOp[376619](?) call_tmp[661339] 0))
      (518441 'move' ret[518405](518440 'coerce' call_tmp[661344] bool[10]))
      gotoReturn _end_equals[518403] _end_equals[518403]
    }
    label _end_equals[518403]
    (518407 return ret[518405])
  }
  { scopeless type
    bool[10]
  }
  function _cast[134530](arg t[134527]:_array[133588](?), param arg arg[134532]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[518447] "RVV" "temp"
    unknown result[134535] "dead at end of block" "insert auto destroy"
    (543061 'default init var' result[134535] t[134527])
    (134538 'end of statement')
    (134544 call chpl__transferArray result[134535] arg[134532])
    (480402 'end of statement' result[134535])
    (518452 'move' ret[518447](518451 'deref' result[134535]))
    gotoReturn _end__cast[518445] _end__cast[518445]
    (480404 'end of statement' result[134535])
    label _end__cast[518445]
    (518449 return ret[518447])
  }
  function _cast[134557](arg t[134554]:string[26], arg x[134562]:_array[133588](?)) : _unknown[51] "no doc"
  {
    unknown ret[518458] "RVV" "temp"
    unknown call_tmp[661349] "expr temp" "maybe param" "maybe type" "temp"
    (661352 'move' call_tmp[661349](134572 call stringify x[134562]))
    (518463 'move' ret[518458](518462 'deref' call_tmp[661349]))
    (518460 return ret[518458])
    (355124 'used modules list'(134566 'use' IO[230891]))
  }
  function isDmapType[134581](arg t[134579]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518485] "RVV" "param" "temp"
    function isDmapHelp[134589](arg t[134586]:_distribution[118967](?)) param : _unknown[51]
    {
      unknown ret[518467] "RVV" "param" "temp"
      (518472 'move' ret[518467](518471 'deref' 1))
      (518469 return ret[518467])
    }
    function isDmapHelp[134602](arg t[134600]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518476] "RVV" "param" "temp"
      (518481 'move' ret[518476](518480 'deref' 0))
      (518478 return ret[518476])
    }
    unknown call_tmp[661354] "expr temp" "maybe param" "maybe type" "temp"
    (661357 'move' call_tmp[661354](134613 call isDmapHelp t[134579]))
    (518490 'move' ret[518485](518489 'deref' call_tmp[661354]))
    (518487 return ret[518485])
  }
  function isDmapValue[134624](arg e[134621]:_distribution[118967](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518494] "RVV" "param" "temp"
    (518499 'move' ret[518494](518498 'deref' 1))
    (518496 return ret[518494])
  }
  function isDmapValue[134636](arg e[134634]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518503] "RVV" "param" "temp"
    (518508 'move' ret[518503](518507 'deref' 0))
    (518505 return ret[518503])
  }
  function isDomainType[134648](arg t[134646]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518512] "RVV" "param" "temp"
    unknown call_tmp[661359] "expr temp" "maybe param" "maybe type" "temp"
    (661362 'move' call_tmp[661359](354299 'is_subtype' _domain[125902](?) t[134646]))
    (518517 'move' ret[518512](518516 'deref' call_tmp[661359]))
    (518514 return ret[518512])
  }
  function isDomainValue[134666](arg e[134663]:_domain[125902](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518521] "RVV" "param" "temp"
    (518526 'move' ret[518521](518525 'deref' 1))
    (518523 return ret[518521])
  }
  function isDomainValue[134678](arg e[134676]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518530] "RVV" "param" "temp"
    (518535 'move' ret[518530](518534 'deref' 0))
    (518532 return ret[518530])
  }
  function isArrayType[134690](arg t[134688]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518539] "RVV" "param" "temp"
    unknown call_tmp[661364] "expr temp" "maybe param" "maybe type" "temp"
    (661367 'move' call_tmp[661364](354300 'is_subtype' _array[133588](?) t[134688]))
    (518544 'move' ret[518539](518543 'deref' call_tmp[661364]))
    (518541 return ret[518539])
  }
  function isArrayValue[134710](arg e[134707]:_array[133588](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518548] "RVV" "param" "temp"
    (518553 'move' ret[518548](518552 'deref' 1))
    (518550 return ret[518548])
  }
  function isArrayValue[134722](arg e[134720]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518557] "RVV" "param" "temp"
    (518562 'move' ret[518557](518561 'deref' 0))
    (518559 return ret[518557])
  }
  function -[134736](arg a[134733]:_domain[125902](?), arg b[134739]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518566] "RVV" "temp"
    unknown newDom[134756] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661369] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661372 'move' call_tmp[661369](134755 'typeof' a[134733]))
    (543063 'default init var' newDom[134756] call_tmp[661369])
    (134759 'end of statement')
    {
      unknown call_tmp[661374] "maybe param" "maybe type" "temp"
      (661377 'move' call_tmp[661374](134802 'task_get_serial'))
      unknown tmp[134801] "dead at end of block" "insert auto destroy" "temp"
      (543065 'init var' tmp[134801] call_tmp[661374])
      unknown call_tmp[661381] "expr temp" "maybe param" "maybe type" "temp"
      (661384 'move' call_tmp[661381](134762 call _value _mt[243] newDom[134756]))
      unknown call_tmp[661388] "expr temp" "maybe param" "maybe type" "temp"
      (661391 'move' call_tmp[661388](134765 call parSafe _mt[243] call_tmp[661381]))
      unknown call_tmp[661393] "expr temp" "maybe param" "maybe type" "temp"
      (661396 'move' call_tmp[661393](134768 call ! call_tmp[661388]))
      unknown call_tmp[661398] "expr temp" "maybe param" "maybe type" "temp"
      (661401 'move' call_tmp[661398](134798 call _cond_test call_tmp[661393]))
      if call_tmp[661398]
      {
        (134804 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134808 'task_set_serial' tmp[134801])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134795] "index var" "insert auto destroy"
        iterated expressions:
          a[134733]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[661405] "expr temp" "maybe param" "maybe type" "temp"
          (661408 'move' call_tmp[661405](134778 call(134773 call (partial) contains _mt[243] b[134739]) e[134795]))
          unknown call_tmp[661410] "expr temp" "maybe param" "maybe type" "temp"
          (661413 'move' call_tmp[661410](134779 call ! call_tmp[661405]))
          unknown call_tmp[661415] "expr temp" "maybe param" "maybe type" "temp"
          (661418 'move' call_tmp[661415](134789 call _cond_test call_tmp[661410]))
          if call_tmp[661415]
          {
            (134787 call(134782 call (partial) add _mt[243] newDom[134756]) e[134795])
            (480420 'end of statement' newDom[134756] e[134795])
          }
        }
      }
    }
    (518571 'move' ret[518566](518570 'deref' newDom[134756]))
    gotoReturn _end_-[518564] _end_-[518564]
    (480423 'end of statement' newDom[134756])
    label _end_-[518564]
    (518568 return ret[518566])
  }
  where {
    unknown tmp[425829] "maybe param" "temp"
    unknown call_tmp[661422] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661425 'move' call_tmp[661422](134743 'typeof' a[134733]))
    unknown call_tmp[661427] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661430 'move' call_tmp[661427](134745 'typeof' b[134739]))
    (425840 'move' tmp[425829](134746 call == call_tmp[661422] call_tmp[661427]))
    unknown call_tmp[661432] "expr temp" "maybe param" "maybe type" "temp"
    (661435 'move' call_tmp[661432](425842 call _cond_invalid tmp[425829]))
    if call_tmp[661432]
    {
      (425845 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566719] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566720] "maybe param" "temp"
    unknown call_tmp[661437] "expr temp" "maybe param" "maybe type" "temp"
    (661440 'move' call_tmp[661437](425830 call isTrue tmp[425829]))
    (566725 'move' tmp[566720](566723 call _cond_test call_tmp[661437]))
    if tmp[566720]
    {
      unknown tmp[566727] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661442] "expr temp" "maybe param" "maybe type" "temp"
      (661445 'move' call_tmp[661442](134751 call isAssociativeDom a[134733]))
      (566729 'move' tmp[566727](425833 call isTrue call_tmp[661442]))
      (566734 'move' tmp[566719](566731 '_paramFoldLogical' tmp[566720] tmp[566727]))
    }
    {
      (566739 'move' tmp[566719](566736 '_paramFoldLogical' tmp[566720] 0))
    }
    (748308 call chpl_statementLevelSymbol tmp[566719])
  }
  function -=[134824](ref arg a[134821]:_domain[125902](?), arg b[134827]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134864] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134865] "expr temp" "temp"
      (134874 'move' _iterator[134865](134872 call _getIterator b[134827]))
      Defer
      {
        {
          (134890 call _freeIterator _iterator[134865])
        }
      }
      { scopeless type
        (134879 'move' _indexOfInterest[134864](134876 call iteratorIndex _iterator[134865]))
      }
      ForLoop[134866]
      {
        unknown e[134883] "index var" "insert auto destroy"
        (480426 'end of statement')
        (134885 'move' e[134883] _indexOfInterest[134864])
        (480427 'end of statement' e[134883])
        unknown call_tmp[661449] "expr temp" "maybe param" "maybe type" "temp"
        (661452 'move' call_tmp[661449](134850 call(134845 call (partial) contains _mt[243] a[134821]) e[134883]))
        unknown call_tmp[661454] "expr temp" "maybe param" "maybe type" "temp"
        (661457 'move' call_tmp[661454](134859 call _cond_test call_tmp[661449]))
        if call_tmp[661454]
        {
          (134857 call(134852 call (partial) remove _mt[243] a[134821]) e[134883])
          (480429 'end of statement' e[134883])
        }
        label _continueLabel[134869]
        _indexOfInterest[134864]
        _iterator[134865]
      }
      label _breakLabel[134870]
    }
    (518575 return _void[55])
  }
  where {
    unknown tmp[425850] "maybe param" "temp"
    unknown call_tmp[661461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661464 'move' call_tmp[661461](134831 'typeof' a[134821]))
    unknown call_tmp[661466] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661469 'move' call_tmp[661466](134833 'typeof' b[134827]))
    (425861 'move' tmp[425850](134834 call == call_tmp[661461] call_tmp[661466]))
    unknown call_tmp[661471] "expr temp" "maybe param" "maybe type" "temp"
    (661474 'move' call_tmp[661471](425863 call _cond_invalid tmp[425850]))
    if call_tmp[661471]
    {
      (425866 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566746] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566747] "maybe param" "temp"
    unknown call_tmp[661476] "expr temp" "maybe param" "maybe type" "temp"
    (661479 'move' call_tmp[661476](425851 call isTrue tmp[425850]))
    (566752 'move' tmp[566747](566750 call _cond_test call_tmp[661476]))
    if tmp[566747]
    {
      unknown tmp[566754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661481] "expr temp" "maybe param" "maybe type" "temp"
      (661484 'move' call_tmp[661481](134839 call isAssociativeDom a[134821]))
      (566756 'move' tmp[566754](425854 call isTrue call_tmp[661481]))
      (566761 'move' tmp[566746](566758 '_paramFoldLogical' tmp[566747] tmp[566754]))
    }
    {
      (566766 'move' tmp[566746](566763 '_paramFoldLogical' tmp[566747] 0))
    }
    (748310 call chpl_statementLevelSymbol tmp[566746])
  }
  function |[134907](arg a[134904]:_domain[125902](?), arg b[134910]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518579] "RVV" "temp"
    unknown call_tmp[661486] "expr temp" "maybe param" "maybe type" "temp"
    (661489 'move' call_tmp[661486](134927 call + a[134904] b[134910]))
    (518584 'move' ret[518579](518583 'deref' call_tmp[661486]))
    (518581 return ret[518579])
  }
  where {
    unknown tmp[425871] "maybe param" "temp"
    unknown call_tmp[661491] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661494 'move' call_tmp[661491](134914 'typeof' a[134904]))
    unknown call_tmp[661496] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661499 'move' call_tmp[661496](134916 'typeof' b[134910]))
    (425882 'move' tmp[425871](134917 call == call_tmp[661491] call_tmp[661496]))
    unknown call_tmp[661501] "expr temp" "maybe param" "maybe type" "temp"
    (661504 'move' call_tmp[661501](425884 call _cond_invalid tmp[425871]))
    if call_tmp[661501]
    {
      (425887 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566773] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566774] "maybe param" "temp"
    unknown call_tmp[661506] "expr temp" "maybe param" "maybe type" "temp"
    (661509 'move' call_tmp[661506](425872 call isTrue tmp[425871]))
    (566779 'move' tmp[566774](566777 call _cond_test call_tmp[661506]))
    if tmp[566774]
    {
      unknown tmp[566781] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661511] "expr temp" "maybe param" "maybe type" "temp"
      (661514 'move' call_tmp[661511](134922 call isAssociativeDom a[134904]))
      (566783 'move' tmp[566781](425875 call isTrue call_tmp[661511]))
      (566788 'move' tmp[566773](566785 '_paramFoldLogical' tmp[566774] tmp[566781]))
    }
    {
      (566793 'move' tmp[566773](566790 '_paramFoldLogical' tmp[566774] 0))
    }
    (748312 call chpl_statementLevelSymbol tmp[566773])
  }
  function |=[134941](ref arg a[134938]:_domain[125902](?), arg b[134944]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134969] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134970] "expr temp" "temp"
      (134979 'move' _iterator[134970](134977 call _getIterator b[134944]))
      Defer
      {
        {
          (134995 call _freeIterator _iterator[134970])
        }
      }
      { scopeless type
        (134984 'move' _indexOfInterest[134969](134981 call iteratorIndex _iterator[134970]))
      }
      ForLoop[134971]
      {
        unknown e[134988] "index var" "insert auto destroy"
        (480433 'end of statement')
        (134990 'move' e[134988] _indexOfInterest[134969])
        (480434 'end of statement' e[134988])
        (134967 call(134962 call (partial) add _mt[243] a[134938]) e[134988])
        (480436 'end of statement' e[134988])
        label _continueLabel[134974]
        _indexOfInterest[134969]
        _iterator[134970]
      }
      label _breakLabel[134975]
    }
    (518586 return _void[55])
  }
  where {
    unknown tmp[425892] "maybe param" "temp"
    unknown call_tmp[661518] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661521 'move' call_tmp[661518](134948 'typeof' a[134938]))
    unknown call_tmp[661523] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661526 'move' call_tmp[661523](134950 'typeof' b[134944]))
    (425903 'move' tmp[425892](134951 call == call_tmp[661518] call_tmp[661523]))
    unknown call_tmp[661528] "expr temp" "maybe param" "maybe type" "temp"
    (661531 'move' call_tmp[661528](425905 call _cond_invalid tmp[425892]))
    if call_tmp[661528]
    {
      (425908 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566800] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566801] "maybe param" "temp"
    unknown call_tmp[661533] "expr temp" "maybe param" "maybe type" "temp"
    (661536 'move' call_tmp[661533](425893 call isTrue tmp[425892]))
    (566806 'move' tmp[566801](566804 call _cond_test call_tmp[661533]))
    if tmp[566801]
    {
      unknown tmp[566808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661538] "expr temp" "maybe param" "maybe type" "temp"
      (661541 'move' call_tmp[661538](134956 call isAssociativeDom a[134938]))
      (566810 'move' tmp[566808](425896 call isTrue call_tmp[661538]))
      (566815 'move' tmp[566800](566812 '_paramFoldLogical' tmp[566801] tmp[566808]))
    }
    {
      (566820 'move' tmp[566800](566817 '_paramFoldLogical' tmp[566801] 0))
    }
    (748314 call chpl_statementLevelSymbol tmp[566800])
  }
  function +=[135012](ref arg a[135009]:_domain[125902](?), arg b[135015]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (135032 call |= a[135009] b[135015])
    (518588 return _void[55])
  }
  where {
    unknown tmp[425913] "maybe param" "temp"
    unknown call_tmp[661543] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661546 'move' call_tmp[661543](135019 'typeof' a[135009]))
    unknown call_tmp[661548] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661551 'move' call_tmp[661548](135021 'typeof' b[135015]))
    (425924 'move' tmp[425913](135022 call == call_tmp[661543] call_tmp[661548]))
    unknown call_tmp[661553] "expr temp" "maybe param" "maybe type" "temp"
    (661556 'move' call_tmp[661553](425926 call _cond_invalid tmp[425913]))
    if call_tmp[661553]
    {
      (425929 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566827] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566828] "maybe param" "temp"
    unknown call_tmp[661558] "expr temp" "maybe param" "maybe type" "temp"
    (661561 'move' call_tmp[661558](425914 call isTrue tmp[425913]))
    (566833 'move' tmp[566828](566831 call _cond_test call_tmp[661558]))
    if tmp[566828]
    {
      unknown tmp[566835] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661563] "expr temp" "maybe param" "maybe type" "temp"
      (661566 'move' call_tmp[661563](135027 call isAssociativeDom a[135009]))
      (566837 'move' tmp[566835](425917 call isTrue call_tmp[661563]))
      (566842 'move' tmp[566827](566839 '_paramFoldLogical' tmp[566828] tmp[566835]))
    }
    {
      (566847 'move' tmp[566827](566844 '_paramFoldLogical' tmp[566828] 0))
    }
    (748316 call chpl_statementLevelSymbol tmp[566827])
  }
  function &[135045](arg a[135042]:_domain[125902](?), arg b[135048]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518592] "RVV" "temp"
    unknown newDom[135065] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661568] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661571 'move' call_tmp[661568](135064 'typeof' a[135042]))
    (543067 'default init var' newDom[135065] call_tmp[661568])
    (135068 'end of statement')
    {
      unknown call_tmp[661573] "maybe param" "maybe type" "temp"
      (661576 'move' call_tmp[661573](135112 'task_get_serial'))
      unknown tmp[135111] "dead at end of block" "insert auto destroy" "temp"
      (543069 'init var' tmp[135111] call_tmp[661573])
      unknown call_tmp[661580] "expr temp" "maybe param" "maybe type" "temp"
      (661583 'move' call_tmp[661580](135071 call _value _mt[243] newDom[135065]))
      unknown call_tmp[661587] "expr temp" "maybe param" "maybe type" "temp"
      (661590 'move' call_tmp[661587](135074 call parSafe _mt[243] call_tmp[661580]))
      unknown call_tmp[661592] "expr temp" "maybe param" "maybe type" "temp"
      (661595 'move' call_tmp[661592](135077 call ! call_tmp[661587]))
      unknown call_tmp[661597] "expr temp" "maybe param" "maybe type" "temp"
      (661600 'move' call_tmp[661597](135108 call _cond_test call_tmp[661592]))
      if call_tmp[661597]
      {
        (135114 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135118 'task_set_serial' tmp[135111])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135105] "index var" "insert auto destroy"
        iterated expressions:
          a[135042]
        shadow variables:
          newDom[135082] 'ref' intent outer var newDom[135065]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[661604] "expr temp" "maybe param" "maybe type" "temp"
          (661607 'move' call_tmp[661604](135093 call(135088 call (partial) contains _mt[243] b[135048]) k[135105]))
          unknown call_tmp[661609] "expr temp" "maybe param" "maybe type" "temp"
          (661612 'move' call_tmp[661609](135099 call _cond_test call_tmp[661604]))
          if call_tmp[661609]
          {
            (135096 call += newDom[135082] k[135105])
            (480441 'end of statement' newDom[135082] k[135105])
          }
        }
      }
    }
    (518597 'move' ret[518592](518596 'deref' newDom[135065]))
    gotoReturn _end_&[518590] _end_&[518590]
    (480444 'end of statement' newDom[135065])
    label _end_&[518590]
    (518594 return ret[518592])
  }
  where {
    unknown tmp[425934] "maybe param" "temp"
    unknown call_tmp[661614] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661617 'move' call_tmp[661614](135052 'typeof' a[135042]))
    unknown call_tmp[661619] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661622 'move' call_tmp[661619](135054 'typeof' b[135048]))
    (425945 'move' tmp[425934](135055 call == call_tmp[661614] call_tmp[661619]))
    unknown call_tmp[661624] "expr temp" "maybe param" "maybe type" "temp"
    (661627 'move' call_tmp[661624](425947 call _cond_invalid tmp[425934]))
    if call_tmp[661624]
    {
      (425950 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566854] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566855] "maybe param" "temp"
    unknown call_tmp[661629] "expr temp" "maybe param" "maybe type" "temp"
    (661632 'move' call_tmp[661629](425935 call isTrue tmp[425934]))
    (566860 'move' tmp[566855](566858 call _cond_test call_tmp[661629]))
    if tmp[566855]
    {
      unknown tmp[566862] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661634] "expr temp" "maybe param" "maybe type" "temp"
      (661637 'move' call_tmp[661634](135060 call isAssociativeDom a[135042]))
      (566864 'move' tmp[566862](425938 call isTrue call_tmp[661634]))
      (566869 'move' tmp[566854](566866 '_paramFoldLogical' tmp[566855] tmp[566862]))
    }
    {
      (566874 'move' tmp[566854](566871 '_paramFoldLogical' tmp[566855] 0))
    }
    (748318 call chpl_statementLevelSymbol tmp[566854])
  }
  function &=[135134](ref arg a[135131]:_domain[125902](?), arg b[135137]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135160] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661641] "expr temp" "maybe param" "maybe type" "temp"
    (661644 'move' call_tmp[661641](135153 call idxType _mt[243] a[135131]))
    unknown call_tmp[661646] "expr temp" "maybe param" "maybe type" "temp"
    (661649 'move' call_tmp[661646](135158 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[661641]))
    (543071 'default init var' removeSet[135160] call_tmp[661646])
    (135163 'end of statement')
    {
      unknown _indexOfInterest[135186] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135187] "expr temp" "temp"
      (135196 'move' _iterator[135187](135194 call _getIterator a[135131]))
      Defer
      {
        {
          (135212 call _freeIterator _iterator[135187])
        }
      }
      { scopeless type
        (135201 'move' _indexOfInterest[135186](135198 call iteratorIndex _iterator[135187]))
      }
      ForLoop[135188]
      {
        unknown e[135205] "index var" "insert auto destroy"
        (480447 'end of statement')
        (135207 'move' e[135205] _indexOfInterest[135186])
        (480448 'end of statement' e[135205])
        unknown call_tmp[661653] "expr temp" "maybe param" "maybe type" "temp"
        (661656 'move' call_tmp[661653](135173 call(135168 call (partial) contains _mt[243] b[135137]) e[135205]))
        unknown call_tmp[661658] "expr temp" "maybe param" "maybe type" "temp"
        (661661 'move' call_tmp[661658](135174 call ! call_tmp[661653]))
        unknown call_tmp[661663] "expr temp" "maybe param" "maybe type" "temp"
        (661666 'move' call_tmp[661663](135181 call _cond_test call_tmp[661658]))
        if call_tmp[661663]
        {
          (135178 call += removeSet[135160] e[135205])
          (480450 'end of statement' removeSet[135160] e[135205])
        }
        label _continueLabel[135191]
        _indexOfInterest[135186]
        _iterator[135187]
      }
      label _breakLabel[135192]
    }
    {
      unknown _indexOfInterest[135229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135230] "expr temp" "temp"
      (135239 'move' _iterator[135230](135237 call _getIterator removeSet[135160]))
      Defer
      {
        {
          (135255 call _freeIterator _iterator[135230])
        }
      }
      { scopeless type
        (135244 'move' _indexOfInterest[135229](135241 call iteratorIndex _iterator[135230]))
      }
      ForLoop[135231]
      {
        unknown e[135248] "index var" "insert auto destroy"
        (480454 'end of statement')
        (135250 'move' e[135248] _indexOfInterest[135229])
        (480455 'end of statement' e[135248])
        (135227 call(135222 call (partial) remove _mt[243] a[135131]) e[135248])
        (480457 'end of statement' e[135248])
        label _continueLabel[135234]
        _indexOfInterest[135229]
        _iterator[135230]
      }
      label _breakLabel[135235]
    }
    (518601 return _void[55])
  }
  where {
    unknown tmp[425955] "maybe param" "temp"
    unknown call_tmp[661670] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661673 'move' call_tmp[661670](135141 'typeof' a[135131]))
    unknown call_tmp[661675] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661678 'move' call_tmp[661675](135143 'typeof' b[135137]))
    (425966 'move' tmp[425955](135144 call == call_tmp[661670] call_tmp[661675]))
    unknown call_tmp[661680] "expr temp" "maybe param" "maybe type" "temp"
    (661683 'move' call_tmp[661680](425968 call _cond_invalid tmp[425955]))
    if call_tmp[661680]
    {
      (425971 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566881] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566882] "maybe param" "temp"
    unknown call_tmp[661685] "expr temp" "maybe param" "maybe type" "temp"
    (661688 'move' call_tmp[661685](425956 call isTrue tmp[425955]))
    (566887 'move' tmp[566882](566885 call _cond_test call_tmp[661685]))
    if tmp[566882]
    {
      unknown tmp[566889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661690] "expr temp" "maybe param" "maybe type" "temp"
      (661693 'move' call_tmp[661690](135149 call isAssociativeDom a[135131]))
      (566891 'move' tmp[566889](425959 call isTrue call_tmp[661690]))
      (566896 'move' tmp[566881](566893 '_paramFoldLogical' tmp[566882] tmp[566889]))
    }
    {
      (566901 'move' tmp[566881](566898 '_paramFoldLogical' tmp[566882] 0))
    }
    (748320 call chpl_statementLevelSymbol tmp[566881])
  }
  function ^[135271](arg a[135268]:_domain[125902](?), arg b[135274]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518605] "RVV" "temp"
    unknown newDom[135291] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661695] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661698 'move' call_tmp[661695](135290 'typeof' a[135268]))
    (543073 'default init var' newDom[135291] call_tmp[661695])
    (135294 'end of statement')
    {
      unknown call_tmp[661700] "maybe param" "maybe type" "temp"
      (661703 'move' call_tmp[661700](135366 'task_get_serial'))
      unknown tmp[135365] "dead at end of block" "insert auto destroy" "temp"
      (543075 'init var' tmp[135365] call_tmp[661700])
      unknown call_tmp[661707] "expr temp" "maybe param" "maybe type" "temp"
      (661710 'move' call_tmp[661707](135297 call _value _mt[243] newDom[135291]))
      unknown call_tmp[661714] "expr temp" "maybe param" "maybe type" "temp"
      (661717 'move' call_tmp[661714](135300 call parSafe _mt[243] call_tmp[661707]))
      unknown call_tmp[661719] "expr temp" "maybe param" "maybe type" "temp"
      (661722 'move' call_tmp[661719](135303 call ! call_tmp[661714]))
      unknown call_tmp[661724] "expr temp" "maybe param" "maybe type" "temp"
      (661727 'move' call_tmp[661724](135362 call _cond_test call_tmp[661719]))
      if call_tmp[661724]
      {
        (135368 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135372 'task_set_serial' tmp[135365])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135330] "index var" "insert auto destroy"
          iterated expressions:
            a[135268]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661731] "expr temp" "maybe param" "maybe type" "temp"
            (661734 'move' call_tmp[661731](135313 call(135308 call (partial) contains _mt[243] b[135274]) k[135330]))
            unknown call_tmp[661736] "expr temp" "maybe param" "maybe type" "temp"
            (661739 'move' call_tmp[661736](135314 call ! call_tmp[661731]))
            unknown call_tmp[661741] "expr temp" "maybe param" "maybe type" "temp"
            (661744 'move' call_tmp[661741](135324 call _cond_test call_tmp[661736]))
            if call_tmp[661741]
            {
              (135322 call(135317 call (partial) add _mt[243] newDom[135291]) k[135330])
              (480461 'end of statement' newDom[135291] k[135330])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135359] "index var" "insert auto destroy"
          iterated expressions:
            b[135274]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661750] "expr temp" "maybe param" "maybe type" "temp"
            (661753 'move' call_tmp[661750](135342 call(135337 call (partial) contains _mt[243] a[135268]) k[135359]))
            unknown call_tmp[661755] "expr temp" "maybe param" "maybe type" "temp"
            (661758 'move' call_tmp[661755](135343 call ! call_tmp[661750]))
            unknown call_tmp[661760] "expr temp" "maybe param" "maybe type" "temp"
            (661763 'move' call_tmp[661760](135353 call _cond_test call_tmp[661755]))
            if call_tmp[661760]
            {
              (135351 call(135346 call (partial) add _mt[243] newDom[135291]) k[135359])
              (480464 'end of statement' newDom[135291] k[135359])
            }
          }
        }
      }
    }
    (518610 'move' ret[518605](518609 'deref' newDom[135291]))
    gotoReturn _end_^[518603] _end_^[518603]
    (480467 'end of statement' newDom[135291])
    label _end_^[518603]
    (518607 return ret[518605])
  }
  where {
    unknown tmp[425976] "maybe param" "temp"
    unknown call_tmp[661767] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661770 'move' call_tmp[661767](135278 'typeof' a[135268]))
    unknown call_tmp[661772] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661775 'move' call_tmp[661772](135280 'typeof' b[135274]))
    (425987 'move' tmp[425976](135281 call == call_tmp[661767] call_tmp[661772]))
    unknown call_tmp[661777] "expr temp" "maybe param" "maybe type" "temp"
    (661780 'move' call_tmp[661777](425989 call _cond_invalid tmp[425976]))
    if call_tmp[661777]
    {
      (425992 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566908] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566909] "maybe param" "temp"
    unknown call_tmp[661782] "expr temp" "maybe param" "maybe type" "temp"
    (661785 'move' call_tmp[661782](425977 call isTrue tmp[425976]))
    (566914 'move' tmp[566909](566912 call _cond_test call_tmp[661782]))
    if tmp[566909]
    {
      unknown tmp[566916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661787] "expr temp" "maybe param" "maybe type" "temp"
      (661790 'move' call_tmp[661787](135286 call isAssociativeDom a[135268]))
      (566918 'move' tmp[566916](425980 call isTrue call_tmp[661787]))
      (566923 'move' tmp[566908](566920 '_paramFoldLogical' tmp[566909] tmp[566916]))
    }
    {
      (566928 'move' tmp[566908](566925 '_paramFoldLogical' tmp[566909] 0))
    }
    (748322 call chpl_statementLevelSymbol tmp[566908])
  }
  function ^=[135388](ref arg a[135385]:_domain[125902](?), arg b[135391]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135437] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135438] "expr temp" "temp"
      (135447 'move' _iterator[135438](135445 call _getIterator b[135391]))
      Defer
      {
        {
          (135463 call _freeIterator _iterator[135438])
        }
      }
      { scopeless type
        (135452 'move' _indexOfInterest[135437](135449 call iteratorIndex _iterator[135438]))
      }
      ForLoop[135439]
      {
        unknown e[135456] "index var" "insert auto destroy"
        (480470 'end of statement')
        (135458 'move' e[135456] _indexOfInterest[135437])
        (480471 'end of statement' e[135456])
        unknown call_tmp[661794] "expr temp" "maybe param" "maybe type" "temp"
        (661797 'move' call_tmp[661794](135414 call(135409 call (partial) contains _mt[243] a[135385]) e[135456]))
        unknown call_tmp[661799] "expr temp" "maybe param" "maybe type" "temp"
        (661802 'move' call_tmp[661799](135431 call _cond_test call_tmp[661794]))
        if call_tmp[661799]
        {
          (135421 call(135416 call (partial) remove _mt[243] a[135385]) e[135456])
          (480473 'end of statement' e[135456])
        }
        {
          (135429 call(135424 call (partial) add _mt[243] a[135385]) e[135456])
          (480475 'end of statement' e[135456])
        }
        label _continueLabel[135442]
        _indexOfInterest[135437]
        _iterator[135438]
      }
      label _breakLabel[135443]
    }
    (518614 return _void[55])
  }
  where {
    unknown tmp[425997] "maybe param" "temp"
    unknown call_tmp[661808] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661811 'move' call_tmp[661808](135395 'typeof' a[135385]))
    unknown call_tmp[661813] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661816 'move' call_tmp[661813](135397 'typeof' b[135391]))
    (426008 'move' tmp[425997](135398 call == call_tmp[661808] call_tmp[661813]))
    unknown call_tmp[661818] "expr temp" "maybe param" "maybe type" "temp"
    (661821 'move' call_tmp[661818](426010 call _cond_invalid tmp[425997]))
    if call_tmp[661818]
    {
      (426013 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566935] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566936] "maybe param" "temp"
    unknown call_tmp[661823] "expr temp" "maybe param" "maybe type" "temp"
    (661826 'move' call_tmp[661823](425998 call isTrue tmp[425997]))
    (566941 'move' tmp[566936](566939 call _cond_test call_tmp[661823]))
    if tmp[566936]
    {
      unknown tmp[566943] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661828] "expr temp" "maybe param" "maybe type" "temp"
      (661831 'move' call_tmp[661828](135403 call isAssociativeDom a[135385]))
      (566945 'move' tmp[566943](426001 call isTrue call_tmp[661828]))
      (566950 'move' tmp[566935](566947 '_paramFoldLogical' tmp[566936] tmp[566943]))
    }
    {
      (566955 'move' tmp[566935](566952 '_paramFoldLogical' tmp[566936] 0))
    }
    (748324 call chpl_statementLevelSymbol tmp[566935])
  }
  function +=[135480](ref arg sd[135477]:_domain[125902](?), arg inds[135489]:_array[133588](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661835] "expr temp" "maybe param" "maybe type" "temp"
    (661838 'move' call_tmp[661835](135497 call size _mt[243] inds[135489]))
    unknown call_tmp[661840] "expr temp" "maybe param" "maybe type" "temp"
    (661843 'move' call_tmp[661840](135501 call == call_tmp[661835] 0))
    unknown call_tmp[661845] "expr temp" "maybe param" "maybe type" "temp"
    (661848 'move' call_tmp[661845](135505 call _cond_test call_tmp[661840]))
    if call_tmp[661845]
    {
      gotoReturn _end_+=[518616] _end_+=[518616]
    }
    unknown call_tmp[661852] "expr temp" "maybe param" "maybe type" "temp"
    (661855 'move' call_tmp[661852](135512 call _value _mt[243] sd[135477]))
    (135520 call(135515 call (partial) dsiBulkAdd _mt[243] call_tmp[661852]) inds[135489])
    label _end_+=[518616]
    (518618 return _void[55])
  }
  where {
    unknown call_tmp[661859] "expr temp" "maybe param" "maybe type" "temp"
    (661862 'move' call_tmp[661859](135495 call isSparseDom sd[135477]))
    unknown call_tmp[661864] "expr temp" "maybe param" "maybe type" "temp"
    (661867 'move' call_tmp[661864](135484 call chpl__buildIndexType sd[135477]))
    unknown call_tmp[661871] "expr temp" "maybe param" "maybe type" "temp"
    (661874 'move' call_tmp[661871](461429 call eltType _mt[243] inds[135489]))
    unknown call_tmp[661876] "expr temp" "maybe param" "maybe type" "temp"
    (661879 'move' call_tmp[661876](461433 call == call_tmp[661864] call_tmp[661871]))
    (461427 call & call_tmp[661859] call_tmp[661876])
  }
  function +=[135531](ref arg sd[135528]:_domain[125902](?), arg d[135534]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661883] "expr temp" "maybe param" "maybe type" "temp"
    (661886 'move' call_tmp[661883](135566 call size _mt[243] d[135534]))
    unknown call_tmp[661888] "expr temp" "maybe param" "maybe type" "temp"
    (661891 'move' call_tmp[661888](135570 call == call_tmp[661883] 0))
    unknown call_tmp[661893] "expr temp" "maybe param" "maybe type" "temp"
    (661896 'move' call_tmp[661893](135574 call _cond_test call_tmp[661888]))
    if call_tmp[661893]
    {
      gotoReturn _end_+=[518622] _end_+=[518622]
    }
    unknown call_tmp[661900] "maybe param" "maybe type" "temp"
    (661903 'move' call_tmp[661900](135581 call size _mt[243] d[135534]))
    const indCount[135584] "dead at end of block" "const" "insert auto destroy"
    (543077 'init var' indCount[135584] call_tmp[661900])
    (135587 'end of statement')
    unknown arr[135606] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661905] "expr temp" "maybe param" "maybe type" "temp"
    (661908 'move' call_tmp[661905](135589 call chpl_build_low_bounded_range 0))
    unknown call_tmp[661910] "expr temp" "maybe param" "maybe type" "temp"
    (661913 'move' call_tmp[661910](135592 call # call_tmp[661905] indCount[135584]))
    unknown call_tmp[661915] "expr temp" "maybe param" "maybe type" "temp"
    (661918 'move' call_tmp[661915](135595 call chpl__buildDomainExpr call_tmp[661910]))
    unknown call_tmp[661920] "expr temp" "maybe param" "maybe type" "temp"
    (661923 'move' call_tmp[661920](135602 call chpl__ensureDomainExpr call_tmp[661915]))
    unknown call_tmp[661925] "expr temp" "maybe param" "maybe type" "temp"
    (661928 'move' call_tmp[661925](135600 call chpl__buildIndexType sd[135528]))
    unknown call_tmp[661930] "expr temp" "maybe param" "maybe type" "temp"
    (661933 'move' call_tmp[661930](135604 call chpl__buildArrayRuntimeType call_tmp[661920] call_tmp[661925]))
    (543079 'default init var' arr[135606] call_tmp[661930])
    (135609 'end of statement')
    {
      unknown _indexOfInterest[135629] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135630] "expr temp" "temp"
      unknown call_tmp[661935] "expr temp" "maybe param" "maybe type" "temp"
      (661938 'move' call_tmp[661935](135639 call _getIterator d[135534]))
      unknown call_tmp[661940] "expr temp" "maybe param" "maybe type" "temp"
      (661943 'move' call_tmp[661940](135642 call chpl_build_low_bounded_range 0))
      unknown call_tmp[661945] "expr temp" "maybe param" "maybe type" "temp"
      (661948 'move' call_tmp[661945](135644 call _getIterator call_tmp[661940]))
      (135647 'move' _iterator[135630](135620 call _build_tuple call_tmp[661935] call_tmp[661945]))
      Defer
      {
        {
          (135677 call _freeIterator _iterator[135630])
        }
      }
      { scopeless type
        (135652 'move' _indexOfInterest[135629](135649 call iteratorIndex _iterator[135630]))
      }
      ForLoop[135631]
      {
        (135657 call _check_tuple_var_decl _indexOfInterest[135629] 2)
        (480482 'end of statement')
        unknown i[135663] "index var" "insert auto destroy"
        (480483 'end of statement')
        (135665 'move' i[135663](135661 call _indexOfInterest[135629] 0))
        (480484 'end of statement' i[135663])
        unknown j[135670] "index var" "insert auto destroy"
        (480486 'end of statement')
        (135672 'move' j[135670](135668 call _indexOfInterest[135629] 1))
        (480487 'end of statement' j[135670])
        unknown call_tmp[661950] "expr temp" "maybe param" "maybe type" "temp"
        (661953 'move' call_tmp[661950](135624 call arr[135606] j[135670]))
        (135626 call = call_tmp[661950] i[135663])
        (480489 'end of statement' arr[135606] j[135670] i[135663])
        label _continueLabel[135634]
        _indexOfInterest[135629]
        _iterator[135630]
      }
      label _breakLabel[135635]
    }
    unknown rowSorted[135685] "dead at end of block" "insert auto destroy"
    (543081 'init var' rowSorted[135685] 0)
    (135688 'end of statement' indCount[135584])
    unknown call_tmp[661957] "expr temp" "maybe param" "maybe type" "temp"
    (661960 'move' call_tmp[661957](135690 call _value _mt[243] sd[135528]))
    (135701 call(135693 call (partial) dsiBulkAdd _mt[243] call_tmp[661957]) arr[135606] rowSorted[135685] 1 0)
    (480493 'end of statement' arr[135606] rowSorted[135685])
    label _end_+=[518622]
    (518624 return _void[55])
  }
  where {
    unknown tmp[426018] "maybe param" "temp"
    unknown tmp[426039] "maybe param" "temp"
    (426050 'move' tmp[426039](135540 call isSparseDom sd[135528]))
    unknown call_tmp[661964] "expr temp" "maybe param" "maybe type" "temp"
    (661967 'move' call_tmp[661964](426052 call _cond_invalid tmp[426039]))
    if call_tmp[661964]
    {
      (426055 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566962] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566963] "maybe param" "temp"
    unknown call_tmp[661969] "expr temp" "maybe param" "maybe type" "temp"
    (661972 'move' call_tmp[661969](426040 call isTrue tmp[426039]))
    (566968 'move' tmp[566963](566966 call _cond_test call_tmp[661969]))
    if tmp[566963]
    {
      unknown tmp[566970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661976] "expr temp" "maybe param" "maybe type" "temp"
      (661979 'move' call_tmp[661976](135542 call rank _mt[243] d[135534]))
      unknown call_tmp[661983] "expr temp" "maybe param" "maybe type" "temp"
      (661986 'move' call_tmp[661983](135546 call rank _mt[243] sd[135528]))
      unknown call_tmp[661988] "expr temp" "maybe param" "maybe type" "temp"
      (661991 'move' call_tmp[661988](135549 call == call_tmp[661976] call_tmp[661983]))
      (566972 'move' tmp[566970](426043 call isTrue call_tmp[661988]))
      (566977 'move' tmp[566962](566974 '_paramFoldLogical' tmp[566963] tmp[566970]))
    }
    {
      (566982 'move' tmp[566962](566979 '_paramFoldLogical' tmp[566963] 0))
    }
    (426029 'move' tmp[426018] tmp[566962])
    unknown call_tmp[661993] "expr temp" "maybe param" "maybe type" "temp"
    (661996 'move' call_tmp[661993](426031 call _cond_invalid tmp[426018]))
    if call_tmp[661993]
    {
      (426034 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566989] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566990] "maybe param" "temp"
    unknown call_tmp[661998] "expr temp" "maybe param" "maybe type" "temp"
    (662001 'move' call_tmp[661998](426019 call isTrue tmp[426018]))
    (566995 'move' tmp[566990](566993 call _cond_test call_tmp[661998]))
    if tmp[566990]
    {
      unknown tmp[566997] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662005] "expr temp" "maybe param" "maybe type" "temp"
      (662008 'move' call_tmp[662005](135554 call idxType _mt[243] sd[135528]))
      unknown call_tmp[662012] "expr temp" "maybe param" "maybe type" "temp"
      (662015 'move' call_tmp[662012](135558 call idxType _mt[243] d[135534]))
      unknown call_tmp[662017] "expr temp" "maybe param" "maybe type" "temp"
      (662020 'move' call_tmp[662017](135561 call == call_tmp[662005] call_tmp[662012]))
      (566999 'move' tmp[566997](426022 call isTrue call_tmp[662017]))
      (567004 'move' tmp[566989](567001 '_paramFoldLogical' tmp[566990] tmp[566997]))
    }
    {
      (567009 'move' tmp[566989](567006 '_paramFoldLogical' tmp[566990] 0))
    }
    (748326 call chpl_statementLevelSymbol tmp[566989])
  }
  function -=[135712](ref arg sd[135709]:_domain[125902](?), arg inds[135721]:_array[133588](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135735] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135736] "expr temp" "temp"
      (135745 'move' _iterator[135736](135743 call _getIterator inds[135721]))
      Defer
      {
        {
          (135761 call _freeIterator _iterator[135736])
        }
      }
      { scopeless type
        (135750 'move' _indexOfInterest[135735](135747 call iteratorIndex _iterator[135736]))
      }
      ForLoop[135737]
      {
        unknown ind[135754] "index var" "insert auto destroy"
        (480497 'end of statement')
        (135756 'move' ind[135754] _indexOfInterest[135735])
        (480498 'end of statement' ind[135754])
        (135732 call -= sd[135709] ind[135754])
        (480500 'end of statement' ind[135754])
        label _continueLabel[135740]
        _indexOfInterest[135735]
        _iterator[135736]
      }
      label _breakLabel[135741]
    }
    (518628 return _void[55])
  }
  where {
    unknown call_tmp[662022] "expr temp" "maybe param" "maybe type" "temp"
    (662025 'move' call_tmp[662022](135727 call isSparseDom sd[135709]))
    unknown call_tmp[662027] "expr temp" "maybe param" "maybe type" "temp"
    (662030 'move' call_tmp[662027](135716 call chpl__buildIndexType sd[135709]))
    unknown call_tmp[662034] "expr temp" "maybe param" "maybe type" "temp"
    (662037 'move' call_tmp[662034](461439 call eltType _mt[243] inds[135721]))
    unknown call_tmp[662039] "expr temp" "maybe param" "maybe type" "temp"
    (662042 'move' call_tmp[662039](461443 call == call_tmp[662027] call_tmp[662034]))
    (461437 call & call_tmp[662022] call_tmp[662039])
  }
  function -=[135778](ref arg sd[135775]:_domain[125902](?), arg d[135781]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135819] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135820] "expr temp" "temp"
      (135829 'move' _iterator[135820](135827 call _getIterator d[135781]))
      Defer
      {
        {
          (135845 call _freeIterator _iterator[135820])
        }
      }
      { scopeless type
        (135834 'move' _indexOfInterest[135819](135831 call iteratorIndex _iterator[135820]))
      }
      ForLoop[135821]
      {
        unknown ind[135838] "index var" "insert auto destroy"
        (480503 'end of statement')
        (135840 'move' ind[135838] _indexOfInterest[135819])
        (480504 'end of statement' ind[135838])
        (135816 call -= sd[135775] ind[135838])
        (480506 'end of statement' ind[135838])
        label _continueLabel[135824]
        _indexOfInterest[135819]
        _iterator[135820]
      }
      label _breakLabel[135825]
    }
    (518630 return _void[55])
  }
  where {
    unknown tmp[426060] "maybe param" "temp"
    unknown tmp[426081] "maybe param" "temp"
    (426092 'move' tmp[426081](135787 call isSparseDom sd[135775]))
    unknown call_tmp[662044] "expr temp" "maybe param" "maybe type" "temp"
    (662047 'move' call_tmp[662044](426094 call _cond_invalid tmp[426081]))
    if call_tmp[662044]
    {
      (426097 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567016] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567017] "maybe param" "temp"
    unknown call_tmp[662049] "expr temp" "maybe param" "maybe type" "temp"
    (662052 'move' call_tmp[662049](426082 call isTrue tmp[426081]))
    (567022 'move' tmp[567017](567020 call _cond_test call_tmp[662049]))
    if tmp[567017]
    {
      unknown tmp[567024] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662056] "expr temp" "maybe param" "maybe type" "temp"
      (662059 'move' call_tmp[662056](135789 call rank _mt[243] d[135781]))
      unknown call_tmp[662063] "expr temp" "maybe param" "maybe type" "temp"
      (662066 'move' call_tmp[662063](135793 call rank _mt[243] sd[135775]))
      unknown call_tmp[662068] "expr temp" "maybe param" "maybe type" "temp"
      (662071 'move' call_tmp[662068](135796 call == call_tmp[662056] call_tmp[662063]))
      (567026 'move' tmp[567024](426085 call isTrue call_tmp[662068]))
      (567031 'move' tmp[567016](567028 '_paramFoldLogical' tmp[567017] tmp[567024]))
    }
    {
      (567036 'move' tmp[567016](567033 '_paramFoldLogical' tmp[567017] 0))
    }
    (426071 'move' tmp[426060] tmp[567016])
    unknown call_tmp[662073] "expr temp" "maybe param" "maybe type" "temp"
    (662076 'move' call_tmp[662073](426073 call _cond_invalid tmp[426060]))
    if call_tmp[662073]
    {
      (426076 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567043] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567044] "maybe param" "temp"
    unknown call_tmp[662078] "expr temp" "maybe param" "maybe type" "temp"
    (662081 'move' call_tmp[662078](426061 call isTrue tmp[426060]))
    (567049 'move' tmp[567044](567047 call _cond_test call_tmp[662078]))
    if tmp[567044]
    {
      unknown tmp[567051] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662085] "expr temp" "maybe param" "maybe type" "temp"
      (662088 'move' call_tmp[662085](135801 call idxType _mt[243] sd[135775]))
      unknown call_tmp[662092] "expr temp" "maybe param" "maybe type" "temp"
      (662095 'move' call_tmp[662092](135805 call idxType _mt[243] d[135781]))
      unknown call_tmp[662097] "expr temp" "maybe param" "maybe type" "temp"
      (662100 'move' call_tmp[662097](135808 call == call_tmp[662085] call_tmp[662092]))
      (567053 'move' tmp[567051](426064 call isTrue call_tmp[662097]))
      (567058 'move' tmp[567043](567055 '_paramFoldLogical' tmp[567044] tmp[567051]))
    }
    {
      (567063 'move' tmp[567043](567060 '_paramFoldLogical' tmp[567044] 0))
    }
    (748328 call chpl_statementLevelSymbol tmp[567043])
  }
  function isCollapsedDimension[135872](arg r[135869]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518634] "RVV" "param" "temp"
    (518639 'move' ret[518634](518638 'deref' 0))
    (518636 return ret[518634])
  }
  function isCollapsedDimension[135884](arg r[135882]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518643] "RVV" "param" "temp"
    (518648 'move' ret[518643](518647 'deref' 1))
    (518645 return ret[518643])
  }
  function chpl__anyStridable[135896](arg ranges[135894]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518652] "RVV" "param" "temp"
    {
      unknown i[135923] "dead at end of block" "insert auto destroy"
      (543083 'init var' i[135923] 0)
      (480510 'end of statement')
      unknown tmp[135924] "maybe param" "temp"
      unknown call_tmp[662104] "expr temp" "maybe param" "maybe type" "temp"
      (662107 'move' call_tmp[662104](135900 call size _mt[243] ranges[135894]))
      unknown call_tmp[662109] "expr temp" "maybe param" "maybe type" "temp"
      (662112 'move' call_tmp[662109](135904 call - call_tmp[662104] 1))
      (135936 'move' tmp[135924](135934 call chpl_compute_low_param_loop_bound 0 call_tmp[662109]))
      unknown tmp[135925] "maybe param" "temp"
      unknown call_tmp[662116] "expr temp" "maybe param" "maybe type" "temp"
      (662119 'move' call_tmp[662116](135943 call size _mt[243] ranges[135894]))
      unknown call_tmp[662121] "expr temp" "maybe param" "maybe type" "temp"
      (662124 'move' call_tmp[662121](135941 call - call_tmp[662116] 1))
      (135949 'move' tmp[135925](135947 call chpl_compute_high_param_loop_bound 0 call_tmp[662121]))
      unknown tmp[135926] "maybe param" "temp"
      (135952 'move' tmp[135926] 1)
      ParamForLoop[135954]
      { i[135923] tmp[135924] tmp[135925] tmp[135926]
        unknown call_tmp[662126] "expr temp" "maybe param" "maybe type" "temp"
        (662129 'move' call_tmp[662126](135911 call ranges[135894] i[135923]))
        unknown call_tmp[662133] "expr temp" "maybe param" "maybe type" "temp"
        (662136 'move' call_tmp[662133](135912 call stridable _mt[243] call_tmp[662126]))
        unknown call_tmp[662138] "expr temp" "maybe param" "maybe type" "temp"
        (662141 'move' call_tmp[662138](135918 call _cond_test call_tmp[662133]))
        if call_tmp[662138]
        {
          (518657 'move' ret[518652](518656 'deref' 1))
          gotoReturn _end_chpl__anyStridable[518650] _end_chpl__anyStridable[518650]
        }
      }
      label _unused_continueLabel[135928]
      label _breakLabel[135927]
    }
    (518662 'move' ret[518652](518661 'deref' 0))
    label _end_chpl__anyStridable[518650]
    (518654 return ret[518652])
  }
  function chpl__anyRankChangeStridable[135973](arg args[135971]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518666] "RVV" "param" "temp"
    {
      unknown i[136012] "dead at end of block" "insert auto destroy"
      (543085 'init var' i[136012] 0)
      (480513 'end of statement')
      unknown tmp[136013] "maybe param" "temp"
      unknown call_tmp[662145] "expr temp" "maybe param" "maybe type" "temp"
      (662148 'move' call_tmp[662145](135977 call size _mt[243] args[135971]))
      unknown call_tmp[662150] "expr temp" "maybe param" "maybe type" "temp"
      (662153 'move' call_tmp[662150](135981 call - call_tmp[662145] 1))
      (136025 'move' tmp[136013](136023 call chpl_compute_low_param_loop_bound 0 call_tmp[662150]))
      unknown tmp[136014] "maybe param" "temp"
      unknown call_tmp[662157] "expr temp" "maybe param" "maybe type" "temp"
      (662160 'move' call_tmp[662157](136032 call size _mt[243] args[135971]))
      unknown call_tmp[662162] "expr temp" "maybe param" "maybe type" "temp"
      (662165 'move' call_tmp[662162](136030 call - call_tmp[662157] 1))
      (136038 'move' tmp[136014](136036 call chpl_compute_high_param_loop_bound 0 call_tmp[662162]))
      unknown tmp[136015] "maybe param" "temp"
      (136041 'move' tmp[136015] 1)
      ParamForLoop[136043]
      { i[136012] tmp[136013] tmp[136014] tmp[136015]
        unknown call_tmp[662167] "expr temp" "maybe param" "maybe type" "temp"
        (662170 'move' call_tmp[662167](135989 call args[135971] i[136012]))
        unknown call_tmp[662172] "expr temp" "maybe param" "maybe type" "temp"
        (662175 'move' call_tmp[662172](135991 call isRangeValue call_tmp[662167]))
        unknown call_tmp[662177] "expr temp" "maybe param" "maybe type" "temp"
        (662180 'move' call_tmp[662177](136007 call _cond_test call_tmp[662172]))
        if call_tmp[662177]
        {
          unknown call_tmp[662182] "expr temp" "maybe param" "maybe type" "temp"
          (662185 'move' call_tmp[662182](135995 call args[135971] i[136012]))
          unknown call_tmp[662189] "expr temp" "maybe param" "maybe type" "temp"
          (662192 'move' call_tmp[662189](135996 call stridable _mt[243] call_tmp[662182]))
          unknown call_tmp[662194] "expr temp" "maybe param" "maybe type" "temp"
          (662197 'move' call_tmp[662194](136002 call _cond_test call_tmp[662189]))
          if call_tmp[662194]
          {
            (518671 'move' ret[518666](518670 'deref' 1))
            gotoReturn _end_chpl__anyRankChangeStridable[518664] _end_chpl__anyRankChangeStridable[518664]
          }
        }
      }
      label _unused_continueLabel[136017]
      label _breakLabel[136016]
    }
    (518676 'move' ret[518666](518675 'deref' 0))
    label _end_chpl__anyRankChangeStridable[518664]
    (518668 return ret[518666])
  }
  function chpl__countRanges[136062](arg arg[136060]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518680] "RVV" "param" "temp"
    unknown call_tmp[662199] "expr temp" "maybe param" "maybe type" "temp"
    (662202 'move' call_tmp[662199](136067 call isRangeValue arg[136060]))
    unknown call_tmp[662204] "expr temp" "maybe param" "maybe type" "temp"
    (662207 'move' call_tmp[662204](136069 call _cast int(64)[13] call_tmp[662199]))
    (518685 'move' ret[518680](518684 'deref' call_tmp[662204]))
    (518682 return ret[518680])
  }
  function chpl__countRanges[136080](arg arg[136078]:_any[178](?), arg args[136083]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[518689] "RVV" "param" "temp"
    unknown call_tmp[662209] "expr temp" "maybe param" "maybe type" "temp"
    (662212 'move' call_tmp[662209](136089 call chpl__countRanges arg[136078]))
    unknown call_tmp[662214] "expr temp" "maybe param" "maybe type" "temp"
    (662217 'move' call_tmp[662214](136094 call chpl__countRanges(136092 'expand_tuple' args[136083])))
    unknown call_tmp[662219] "expr temp" "maybe param" "maybe type" "temp"
    (662222 'move' call_tmp[662219](136095 call + call_tmp[662209] call_tmp[662214]))
    (518694 'move' ret[518689](518693 'deref' call_tmp[662219]))
    (518691 return ret[518689])
  }
  function _validRankChangeArgs[136106](arg args[136104]:_any[178](?), arg idxType[136108]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518767] "RVV" "param" "temp"
    function _validRankChangeArg[136114](arg idxType[136112]:_any[178](?), arg r[136120]:range[64316](?)) param : _unknown[51]
    {
      unknown ret[518698] "RVV" "param" "temp"
      (518703 'move' ret[518698](518702 'deref' 1))
      (518700 return ret[518698])
    }
    function _validRankChangeArg[136134](arg idxType[136132]:_any[178](?), arg i[136137] :
    idxType[136132]) param : _unknown[51]
    {
      unknown ret[518707] "RVV" "param" "temp"
      (518712 'move' ret[518707](518711 'deref' 1))
      (518709 return ret[518707])
    }
    function _validRankChangeArg[136150](arg idxType[136148]:_any[178](?), arg x[136152]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518716] "RVV" "param" "temp"
      (518721 'move' ret[518716](518720 'deref' 0))
      (518718 return ret[518716])
    }
    function allValid[136162]() param : _unknown[51]
    {
      unknown ret[518725] "RVV" "param" "temp"
      {
        unknown dim[136193] "dead at end of block" "insert auto destroy"
        (543087 'init var' dim[136193] 0)
        (480521 'end of statement')
        unknown tmp[136194] "maybe param" "temp"
        unknown call_tmp[662226] "expr temp" "maybe param" "maybe type" "temp"
        (662229 'move' call_tmp[662226](136166 call size _mt[243] args[136104]))
        unknown call_tmp[662231] "expr temp" "maybe param" "maybe type" "temp"
        (662234 'move' call_tmp[662231](136170 call - call_tmp[662226] 1))
        (136206 'move' tmp[136194](136204 call chpl_compute_low_param_loop_bound 0 call_tmp[662231]))
        unknown tmp[136195] "maybe param" "temp"
        unknown call_tmp[662238] "expr temp" "maybe param" "maybe type" "temp"
        (662241 'move' call_tmp[662238](136213 call size _mt[243] args[136104]))
        unknown call_tmp[662243] "expr temp" "maybe param" "maybe type" "temp"
        (662246 'move' call_tmp[662243](136211 call - call_tmp[662238] 1))
        (136219 'move' tmp[136195](136217 call chpl_compute_high_param_loop_bound 0 call_tmp[662243]))
        unknown tmp[136196] "maybe param" "temp"
        (136222 'move' tmp[136196] 1)
        ParamForLoop[136224]
        { dim[136193] tmp[136194] tmp[136195] tmp[136196]
          {
            unknown call_tmp[662248] "expr temp" "maybe param" "maybe type" "temp"
            (662251 'move' call_tmp[662248](136180 call args[136104] dim[136193]))
            unknown call_tmp[662253] "expr temp" "maybe param" "maybe type" "temp"
            (662256 'move' call_tmp[662253](136181 call _validRankChangeArg idxType[136108] call_tmp[662248]))
            unknown call_tmp[662258] "expr temp" "maybe param" "maybe type" "temp"
            (662261 'move' call_tmp[662258](136182 call ! call_tmp[662253]))
            unknown call_tmp[662263] "expr temp" "maybe param" "maybe type" "temp"
            (662266 'move' call_tmp[662263](136187 call _cond_test call_tmp[662258]))
            if call_tmp[662263]
            {
              (518730 'move' ret[518725](518729 'deref' 0))
              gotoReturn _end_allValid[518723] _end_allValid[518723]
            }
          }
        }
        label _unused_continueLabel[136198]
        label _breakLabel[136197]
      }
      (518735 'move' ret[518725](518734 'deref' 1))
      label _end_allValid[518723]
      (518727 return ret[518725])
    }
    function oneRange[136241]() param : _unknown[51]
    {
      unknown ret[518739] "RVV" "param" "temp"
      {
        unknown dim[136269] "dead at end of block" "insert auto destroy"
        (543089 'init var' dim[136269] 0)
        (480524 'end of statement')
        unknown tmp[136270] "maybe param" "temp"
        unknown call_tmp[662270] "expr temp" "maybe param" "maybe type" "temp"
        (662273 'move' call_tmp[662270](136245 call size _mt[243] args[136104]))
        unknown call_tmp[662275] "expr temp" "maybe param" "maybe type" "temp"
        (662278 'move' call_tmp[662275](136249 call - call_tmp[662270] 1))
        (136282 'move' tmp[136270](136280 call chpl_compute_low_param_loop_bound 0 call_tmp[662275]))
        unknown tmp[136271] "maybe param" "temp"
        unknown call_tmp[662282] "expr temp" "maybe param" "maybe type" "temp"
        (662285 'move' call_tmp[662282](136289 call size _mt[243] args[136104]))
        unknown call_tmp[662287] "expr temp" "maybe param" "maybe type" "temp"
        (662290 'move' call_tmp[662287](136287 call - call_tmp[662282] 1))
        (136295 'move' tmp[136271](136293 call chpl_compute_high_param_loop_bound 0 call_tmp[662287]))
        unknown tmp[136272] "maybe param" "temp"
        (136298 'move' tmp[136272] 1)
        ParamForLoop[136300]
        { dim[136269] tmp[136270] tmp[136271] tmp[136272]
          {
            unknown call_tmp[662292] "expr temp" "maybe param" "maybe type" "temp"
            (662295 'move' call_tmp[662292](136257 call args[136104] dim[136269]))
            unknown call_tmp[662297] "expr temp" "maybe param" "maybe type" "temp"
            (662300 'move' call_tmp[662297](136259 call isRange call_tmp[662292]))
            unknown call_tmp[662302] "expr temp" "maybe param" "maybe type" "temp"
            (662305 'move' call_tmp[662302](136263 call _cond_test call_tmp[662297]))
            if call_tmp[662302]
            {
              (518744 'move' ret[518739](518743 'deref' 1))
              gotoReturn _end_oneRange[518737] _end_oneRange[518737]
            }
          }
        }
        label _unused_continueLabel[136274]
        label _breakLabel[136273]
      }
      (518749 'move' ret[518739](518748 'deref' 0))
      label _end_oneRange[518737]
      (518741 return ret[518739])
    }
    function oneNonRange[136317]() param : _unknown[51]
    {
      unknown ret[518753] "RVV" "param" "temp"
      {
        unknown dim[136347] "dead at end of block" "insert auto destroy"
        (543091 'init var' dim[136347] 0)
        (480527 'end of statement')
        unknown tmp[136348] "maybe param" "temp"
        unknown call_tmp[662309] "expr temp" "maybe param" "maybe type" "temp"
        (662312 'move' call_tmp[662309](136321 call size _mt[243] args[136104]))
        unknown call_tmp[662314] "expr temp" "maybe param" "maybe type" "temp"
        (662317 'move' call_tmp[662314](136325 call - call_tmp[662309] 1))
        (136360 'move' tmp[136348](136358 call chpl_compute_low_param_loop_bound 0 call_tmp[662314]))
        unknown tmp[136349] "maybe param" "temp"
        unknown call_tmp[662321] "expr temp" "maybe param" "maybe type" "temp"
        (662324 'move' call_tmp[662321](136367 call size _mt[243] args[136104]))
        unknown call_tmp[662326] "expr temp" "maybe param" "maybe type" "temp"
        (662329 'move' call_tmp[662326](136365 call - call_tmp[662321] 1))
        (136373 'move' tmp[136349](136371 call chpl_compute_high_param_loop_bound 0 call_tmp[662326]))
        unknown tmp[136350] "maybe param" "temp"
        (136376 'move' tmp[136350] 1)
        ParamForLoop[136378]
        { dim[136347] tmp[136348] tmp[136349] tmp[136350]
          {
            unknown call_tmp[662331] "expr temp" "maybe param" "maybe type" "temp"
            (662334 'move' call_tmp[662331](136333 call args[136104] dim[136347]))
            unknown call_tmp[662336] "expr temp" "maybe param" "maybe type" "temp"
            (662339 'move' call_tmp[662336](136335 call isRange call_tmp[662331]))
            unknown call_tmp[662341] "expr temp" "maybe param" "maybe type" "temp"
            (662344 'move' call_tmp[662341](136336 call ! call_tmp[662336]))
            unknown call_tmp[662346] "expr temp" "maybe param" "maybe type" "temp"
            (662349 'move' call_tmp[662346](136341 call _cond_test call_tmp[662341]))
            if call_tmp[662346]
            {
              (518758 'move' ret[518753](518757 'deref' 1))
              gotoReturn _end_oneNonRange[518751] _end_oneNonRange[518751]
            }
          }
        }
        label _unused_continueLabel[136352]
        label _breakLabel[136351]
      }
      (518763 'move' ret[518753](518762 'deref' 0))
      label _end_oneNonRange[518751]
      (518755 return ret[518753])
    }
    unknown tmp[426102] "maybe param" "temp"
    unknown tmp[426123] "maybe param" "temp"
    (426134 'move' tmp[426123](136395 call allValid))
    unknown call_tmp[662351] "expr temp" "maybe param" "maybe type" "temp"
    (662354 'move' call_tmp[662351](426136 call _cond_invalid tmp[426123]))
    if call_tmp[662351]
    {
      (426139 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567070] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567071] "maybe param" "temp"
    unknown call_tmp[662356] "expr temp" "maybe param" "maybe type" "temp"
    (662359 'move' call_tmp[662356](426124 call isTrue tmp[426123]))
    (567076 'move' tmp[567071](567074 call _cond_test call_tmp[662356]))
    if tmp[567071]
    {
      unknown tmp[567078] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662361] "expr temp" "maybe param" "maybe type" "temp"
      (662364 'move' call_tmp[662361](136398 call oneRange))
      (567080 'move' tmp[567078](426127 call isTrue call_tmp[662361]))
      (567085 'move' tmp[567070](567082 '_paramFoldLogical' tmp[567071] tmp[567078]))
    }
    {
      (567090 'move' tmp[567070](567087 '_paramFoldLogical' tmp[567071] 0))
    }
    (426113 'move' tmp[426102] tmp[567070])
    unknown call_tmp[662366] "expr temp" "maybe param" "maybe type" "temp"
    (662369 'move' call_tmp[662366](426115 call _cond_invalid tmp[426102]))
    if call_tmp[662366]
    {
      (426118 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567097] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567098] "maybe param" "temp"
    unknown call_tmp[662371] "expr temp" "maybe param" "maybe type" "temp"
    (662374 'move' call_tmp[662371](426103 call isTrue tmp[426102]))
    (567103 'move' tmp[567098](567101 call _cond_test call_tmp[662371]))
    if tmp[567098]
    {
      unknown tmp[567105] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662376] "expr temp" "maybe param" "maybe type" "temp"
      (662379 'move' call_tmp[662376](136403 call oneNonRange))
      (567107 'move' tmp[567105](426106 call isTrue call_tmp[662376]))
      (567112 'move' tmp[567097](567109 '_paramFoldLogical' tmp[567098] tmp[567105]))
    }
    {
      (567117 'move' tmp[567097](567114 '_paramFoldLogical' tmp[567098] 0))
    }
    (518772 'move' ret[518767](518771 'deref' tmp[567097]))
    (518769 return ret[518767])
  }
  function =[136416](ref arg a[136413]:_distribution[118967](?), arg b[136419]:_distribution[118967](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662383] "expr temp" "maybe param" "maybe type" "temp"
    (662386 'move' call_tmp[662383](136423 call _value _mt[243] a[136413]))
    unknown call_tmp[662388] "expr temp" "maybe param" "maybe type" "temp"
    (662391 'move' call_tmp[662388](136427 call == call_tmp[662383] nil[44]))
    unknown call_tmp[662393] "expr temp" "maybe param" "maybe type" "temp"
    (662396 'move' call_tmp[662393](136576 call _cond_test call_tmp[662388]))
    if call_tmp[662393]
    {
      unknown call_tmp[662400] "expr temp" "maybe param" "maybe type" "temp"
      (662403 'move' call_tmp[662400](136438 call(136434 call (partial) clone _mt[243] b[136419])))
      (136441 'move' a[136413](136440 call chpl__autoCopy call_tmp[662400]))
    }
    {
      unknown call_tmp[662407] "expr temp" "maybe param" "maybe type" "temp"
      (662410 'move' call_tmp[662407](136445 call _value _mt[243] a[136413]))
      unknown call_tmp[662414] "expr temp" "maybe param" "maybe type" "temp"
      (662417 'move' call_tmp[662414](136450 call _doms _mt[243] call_tmp[662407]))
      unknown call_tmp[662421] "expr temp" "maybe param" "maybe type" "temp"
      (662424 'move' call_tmp[662421](136453 call size _mt[243] call_tmp[662414]))
      unknown call_tmp[662426] "expr temp" "maybe param" "maybe type" "temp"
      (662429 'move' call_tmp[662426](136457 call == call_tmp[662421] 0))
      unknown call_tmp[662431] "expr temp" "maybe param" "maybe type" "temp"
      (662434 'move' call_tmp[662431](136572 call _cond_test call_tmp[662426]))
      if call_tmp[662431]
      {
        { scopeless type
          unknown call_type_tmp[492261] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662438] "expr temp" "maybe param" "maybe type" "temp"
          (662441 'move' call_tmp[662438](136460 call _value _mt[243] a[136413]))
          (492265 'move' call_type_tmp[492261](136463 'typeof' call_tmp[662438]))
        }
        { scopeless type
          unknown call_type_tmp[492267] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662445] "expr temp" "maybe param" "maybe type" "temp"
          (662448 'move' call_tmp[662445](136465 call _value _mt[243] b[136419]))
          (492271 'move' call_type_tmp[492267](136468 'typeof' call_tmp[662445]))
        }
        unknown call_tmp[662450] "expr temp" "maybe param" "maybe type" "temp"
        (662453 'move' call_tmp[662450](136469 call != call_type_tmp[492261] call_type_tmp[492267]))
        unknown call_tmp[662455] "expr temp" "maybe param" "maybe type" "temp"
        (662458 'move' call_tmp[662455](136492 call _cond_test call_tmp[662450]))
        if call_tmp[662455]
        {
          (136490 call compilerError "type mismatch in distribution assignment")
        }
        unknown call_tmp[662462] "expr temp" "maybe param" "maybe type" "temp"
        (662465 'move' call_tmp[662462](136499 call _value _mt[243] a[136413]))
        unknown call_tmp[662469] "expr temp" "maybe param" "maybe type" "temp"
        (662472 'move' call_tmp[662469](136503 call _value _mt[243] b[136419]))
        unknown call_tmp[662474] "expr temp" "maybe param" "maybe type" "temp"
        (662477 'move' call_tmp[662474](136506 call == call_tmp[662462] call_tmp[662469]))
        unknown call_tmp[662479] "expr temp" "maybe param" "maybe type" "temp"
        (662482 'move' call_tmp[662479](136525 call _cond_test call_tmp[662474]))
        if call_tmp[662479]
        {
        }
        {
          unknown call_tmp[662486] "expr temp" "maybe param" "maybe type" "temp"
          (662489 'move' call_tmp[662486](136510 call _value _mt[243] a[136413]))
          unknown call_tmp[662495] "expr temp" "maybe param" "maybe type" "temp"
          (662498 'move' call_tmp[662495](136519 call _value _mt[243] b[136419]))
          (136523 call(136515 call (partial) dsiAssign _mt[243] call_tmp[662486]) call_tmp[662495])
        }
        unknown call_tmp[662502] "expr temp" "maybe param" "maybe type" "temp"
        (662505 'move' call_tmp[662502](136532 call _instance _mt[243] a[136413]))
        unknown call_tmp[662507] "expr temp" "maybe param" "maybe type" "temp"
        (662510 'move' call_tmp[662507](136536 call _isPrivatized call_tmp[662502]))
        unknown call_tmp[662512] "expr temp" "maybe param" "maybe type" "temp"
        (662515 'move' call_tmp[662512](136545 call _cond_test call_tmp[662507]))
        if call_tmp[662512]
        {
          unknown call_tmp[662519] "expr temp" "maybe param" "maybe type" "temp"
          (662522 'move' call_tmp[662519](136539 call _value _mt[243] a[136413]))
          (136543 call _reprivatize call_tmp[662519])
        }
      }
      {
        (136569 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
    (518774 return _void[55])
  }
  function =[136590](ref arg a[136587]:_domain[125902](?), arg b[136593]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662526] "expr temp" "maybe param" "maybe type" "temp"
    (662529 'move' call_tmp[662526](136597 call rank _mt[243] a[136587]))
    unknown call_tmp[662533] "expr temp" "maybe param" "maybe type" "temp"
    (662536 'move' call_tmp[662533](136601 call rank _mt[243] b[136593]))
    unknown call_tmp[662538] "expr temp" "maybe param" "maybe type" "temp"
    (662541 'move' call_tmp[662538](136604 call != call_tmp[662526] call_tmp[662533]))
    unknown call_tmp[662543] "expr temp" "maybe param" "maybe type" "temp"
    (662546 'move' call_tmp[662543](136627 call _cond_test call_tmp[662538]))
    if call_tmp[662543]
    {
      (136625 call compilerError "rank mismatch in domain assignment")
    }
    unknown call_tmp[662550] "expr temp" "maybe param" "maybe type" "temp"
    (662553 'move' call_tmp[662550](136634 call idxType _mt[243] a[136587]))
    unknown call_tmp[662557] "expr temp" "maybe param" "maybe type" "temp"
    (662560 'move' call_tmp[662557](136638 call idxType _mt[243] b[136593]))
    unknown call_tmp[662562] "expr temp" "maybe param" "maybe type" "temp"
    (662565 'move' call_tmp[662562](136641 call != call_tmp[662550] call_tmp[662557]))
    unknown call_tmp[662567] "expr temp" "maybe param" "maybe type" "temp"
    (662570 'move' call_tmp[662567](136664 call _cond_test call_tmp[662562]))
    if call_tmp[662567]
    {
      (136662 call compilerError "index type mismatch in domain assignment")
    }
    unknown tmp[426165] "maybe param" "temp"
    (426176 'move' tmp[426165](136672 call isRectangularDom a[136587]))
    unknown call_tmp[662572] "expr temp" "maybe param" "maybe type" "temp"
    (662575 'move' call_tmp[662572](426178 call _cond_invalid tmp[426165]))
    if call_tmp[662572]
    {
      (426181 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567124] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567125] "maybe param" "temp"
    unknown call_tmp[662577] "expr temp" "maybe param" "maybe type" "temp"
    (662580 'move' call_tmp[662577](426166 call isTrue tmp[426165]))
    (567130 'move' tmp[567125](567128 call _cond_test call_tmp[662577]))
    if tmp[567125]
    {
      unknown tmp[567132] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662582] "expr temp" "maybe param" "maybe type" "temp"
      (662585 'move' call_tmp[662582](136676 call isRectangularDom b[136593]))
      (567134 'move' tmp[567132](426169 call isTrue call_tmp[662582]))
      (567139 'move' tmp[567124](567136 '_paramFoldLogical' tmp[567125] tmp[567132]))
    }
    {
      (567144 'move' tmp[567124](567141 '_paramFoldLogical' tmp[567125] 0))
    }
    unknown call_tmp[662587] "expr temp" "maybe param" "maybe type" "temp"
    (662590 'move' call_tmp[662587](136719 call _cond_test tmp[567124]))
    if call_tmp[662587]
    {
      unknown tmp[426144] "maybe param" "temp"
      unknown call_tmp[662594] "expr temp" "maybe param" "maybe type" "temp"
      (662597 'move' call_tmp[662594](136680 call stridable _mt[243] a[136587]))
      (426155 'move' tmp[426144](136683 call ! call_tmp[662594]))
      unknown call_tmp[662599] "expr temp" "maybe param" "maybe type" "temp"
      (662602 'move' call_tmp[662599](426157 call _cond_invalid tmp[426144]))
      if call_tmp[662599]
      {
        (426160 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567151] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567152] "maybe param" "temp"
      unknown call_tmp[662604] "expr temp" "maybe param" "maybe type" "temp"
      (662607 'move' call_tmp[662604](426145 call isTrue tmp[426144]))
      (567157 'move' tmp[567152](567155 call _cond_test call_tmp[662604]))
      if tmp[567152]
      {
        unknown tmp[567159] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662611] "expr temp" "maybe param" "maybe type" "temp"
        (662614 'move' call_tmp[662611](136686 call stridable _mt[243] b[136593]))
        (567161 'move' tmp[567159](426148 call isTrue call_tmp[662611]))
        (567166 'move' tmp[567151](567163 '_paramFoldLogical' tmp[567152] tmp[567159]))
      }
      {
        (567171 'move' tmp[567151](567168 '_paramFoldLogical' tmp[567152] 0))
      }
      unknown call_tmp[662616] "expr temp" "maybe param" "maybe type" "temp"
      (662619 'move' call_tmp[662616](136714 call _cond_test tmp[567151]))
      if call_tmp[662616]
      {
        (136712 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    unknown call_tmp[662623] "expr temp" "maybe param" "maybe type" "temp"
    (662626 'move' call_tmp[662623](136725 call _instance _mt[243] a[136587]))
    (136735 call(136728 call (partial) dsiAssignDomain _mt[243] call_tmp[662623]) b[136593](lhsPrivate = 0))
    (480543 'end of statement')
    unknown call_tmp[662632] "expr temp" "maybe param" "maybe type" "temp"
    (662635 'move' call_tmp[662632](136739 call _instance _mt[243] a[136587]))
    unknown call_tmp[662637] "expr temp" "maybe param" "maybe type" "temp"
    (662640 'move' call_tmp[662637](136743 call _isPrivatized call_tmp[662632]))
    unknown call_tmp[662642] "expr temp" "maybe param" "maybe type" "temp"
    (662645 'move' call_tmp[662642](136753 call _cond_test call_tmp[662637]))
    if call_tmp[662642]
    {
      unknown call_tmp[662649] "expr temp" "maybe param" "maybe type" "temp"
      (662652 'move' call_tmp[662649](136746 call _instance _mt[243] a[136587]))
      (136750 call _reprivatize call_tmp[662649])
    }
    (518776 return _void[55])
  }
  function chpl__isLegalRectTupDomAssign[136763](arg d[136761]:_any[178](?), arg t[136765]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518816] "RVV" "param" "temp"
    function isRangeTuple[136771](arg a[136769]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518798] "RVV" "param" "temp"
      function peelArgs[136777](arg first[136775]:_any[178](?), arg rest[136780]:_any[178](?) ...) param : _unknown[51]
      {
        unknown ret[518780] "RVV" "param" "temp"
        unknown tmp[567232] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567233] "maybe param" "temp"
        unknown call_tmp[662656] "expr temp" "maybe param" "maybe type" "temp"
        (662659 'move' call_tmp[662656](136784 call size _mt[243] rest[136780]))
        unknown call_tmp[662661] "expr temp" "maybe param" "maybe type" "temp"
        (662664 'move' call_tmp[662661](136788 call > call_tmp[662656] 1))
        (567238 'move' tmp[567233](567236 call _cond_test call_tmp[662661]))
        if tmp[567233]
        {
          unknown tmp[426186] "maybe param" "temp"
          (426197 'move' tmp[426186](136793 call isRange first[136775]))
          unknown call_tmp[662666] "expr temp" "maybe param" "maybe type" "temp"
          (662669 'move' call_tmp[662666](426199 call _cond_invalid tmp[426186]))
          if call_tmp[662666]
          {
            (426202 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567178] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567179] "maybe param" "temp"
          unknown call_tmp[662671] "expr temp" "maybe param" "maybe type" "temp"
          (662674 'move' call_tmp[662671](426187 call isTrue tmp[426186]))
          (567184 'move' tmp[567179](567182 call _cond_test call_tmp[662671]))
          if tmp[567179]
          {
            unknown tmp[567186] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662676] "expr temp" "maybe param" "maybe type" "temp"
            (662679 'move' call_tmp[662676](136798 call peelArgs(136796 'expand_tuple' rest[136780])))
            (567188 'move' tmp[567186](426190 call isTrue call_tmp[662676]))
            (567193 'move' tmp[567178](567190 '_paramFoldLogical' tmp[567179] tmp[567186]))
          }
          {
            (567198 'move' tmp[567178](567195 '_paramFoldLogical' tmp[567179] 0))
          }
          (567243 'move' tmp[567232](567240 '_paramFoldLogical' tmp[567233] tmp[567178]))
        }
        {
          unknown tmp[426207] "maybe param" "temp"
          (426218 'move' tmp[426207](136804 call isRange first[136775]))
          unknown call_tmp[662681] "expr temp" "maybe param" "maybe type" "temp"
          (662684 'move' call_tmp[662681](426220 call _cond_invalid tmp[426207]))
          if call_tmp[662681]
          {
            (426223 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567205] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567206] "maybe param" "temp"
          unknown call_tmp[662686] "expr temp" "maybe param" "maybe type" "temp"
          (662689 'move' call_tmp[662686](426208 call isTrue tmp[426207]))
          (567211 'move' tmp[567206](567209 call _cond_test call_tmp[662686]))
          if tmp[567206]
          {
            unknown tmp[567213] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662691] "expr temp" "maybe param" "maybe type" "temp"
            (662694 'move' call_tmp[662691](136809 call rest[136780] 0))
            unknown call_tmp[662696] "expr temp" "maybe param" "maybe type" "temp"
            (662699 'move' call_tmp[662696](136811 call isRange call_tmp[662691]))
            (567215 'move' tmp[567213](426211 call isTrue call_tmp[662696]))
            (567220 'move' tmp[567205](567217 '_paramFoldLogical' tmp[567206] tmp[567213]))
          }
          {
            (567225 'move' tmp[567205](567222 '_paramFoldLogical' tmp[567206] 0))
          }
          (567248 'move' tmp[567232](567245 '_paramFoldLogical' tmp[567233] tmp[567205]))
        }
        (518785 'move' ret[518780](518784 'deref' tmp[567232]))
        (518782 return ret[518780])
      }
      function peelArgs[136827](arg first[136825]:_any[178](?)) param : _unknown[51]
      {
        unknown ret[518789] "RVV" "param" "temp"
        unknown call_tmp[662701] "expr temp" "maybe param" "maybe type" "temp"
        (662704 'move' call_tmp[662701](136832 call isRange first[136825]))
        (518794 'move' ret[518789](518793 'deref' call_tmp[662701]))
        (518791 return ret[518789])
      }
      unknown tmp[567255] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567256] "maybe param" "temp"
      unknown call_tmp[662706] "expr temp" "maybe param" "maybe type" "temp"
      (662709 'move' call_tmp[662706](136841 call isTuple a[136769]))
      unknown call_tmp[662711] "expr temp" "maybe param" "maybe type" "temp"
      (662714 'move' call_tmp[662711](136842 call ! call_tmp[662706]))
      (567261 'move' tmp[567256](567259 call _cond_test call_tmp[662711]))
      if tmp[567256]
      {
        (567266 'move' tmp[567255](567263 '_paramFoldLogical' tmp[567256] 0))
      }
      {
        unknown tmp[567268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (567270 'move' tmp[567268](136849 call peelArgs(136847 'expand_tuple' a[136769])))
        (567275 'move' tmp[567255](567272 '_paramFoldLogical' tmp[567256] tmp[567268]))
      }
      (518803 'move' ret[518798](518802 'deref' tmp[567255]))
      (518800 return ret[518798])
    }
    function strideSafe[136862](arg d[136860]:_any[178](?), arg rt[136864]:_any[178](?), param arg dim[136868]:int(64)[13] =
    0) param : _unknown[51]
    {
      unknown ret[518807] "RVV" "param" "temp"
      unknown tmp[567363] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567364] "maybe param" "temp"
      unknown call_tmp[662718] "expr temp" "maybe param" "maybe type" "temp"
      (662721 'move' call_tmp[662718](136874 call rank _mt[243] d[136860]))
      unknown call_tmp[662723] "expr temp" "maybe param" "maybe type" "temp"
      (662726 'move' call_tmp[662723](136878 call - call_tmp[662718] 1))
      unknown call_tmp[662728] "expr temp" "maybe param" "maybe type" "temp"
      (662731 'move' call_tmp[662728](136880 call == dim[136868] call_tmp[662723]))
      (567369 'move' tmp[567364](567367 call _cond_test call_tmp[662728]))
      if tmp[567364]
      {
        unknown tmp[426228] "maybe param" "temp"
        unknown call_tmp[662735] "expr temp" "maybe param" "maybe type" "temp"
        (662738 'move' call_tmp[662735](136888 call(136883 call (partial) dim _mt[243] d[136860]) dim[136868]))
        (426239 'move' tmp[426228](136889 call stridable _mt[243] call_tmp[662735]))
        unknown call_tmp[662742] "expr temp" "maybe param" "maybe type" "temp"
        (662745 'move' call_tmp[662742](426241 call _cond_invalid tmp[426228]))
        if call_tmp[662742]
        {
          (426244 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567282] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567283] "maybe param" "temp"
        unknown call_tmp[662747] "expr temp" "maybe param" "maybe type" "temp"
        (662750 'move' call_tmp[662747](426229 call isTrue tmp[426228]))
        (567288 'move' tmp[567283](567286 call _cond_test call_tmp[662747]))
        if tmp[567283]
        {
          (567293 'move' tmp[567282](567290 '_paramFoldLogical' tmp[567283] 1))
        }
        {
          unknown tmp[567295] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662752] "expr temp" "maybe param" "maybe type" "temp"
          (662755 'move' call_tmp[662752](136895 call rt[136864] dim[136868]))
          unknown call_tmp[662759] "expr temp" "maybe param" "maybe type" "temp"
          (662762 'move' call_tmp[662759](136896 call stridable _mt[243] call_tmp[662752]))
          unknown call_tmp[662764] "expr temp" "maybe param" "maybe type" "temp"
          (662767 'move' call_tmp[662764](136899 call ! call_tmp[662759]))
          (567297 'move' tmp[567295](426233 call isTrue call_tmp[662764]))
          (567302 'move' tmp[567282](567299 '_paramFoldLogical' tmp[567283] tmp[567295]))
        }
        (567374 'move' tmp[567363](567371 '_paramFoldLogical' tmp[567364] tmp[567282]))
      }
      {
        unknown tmp[426249] "maybe param" "temp"
        unknown tmp[426270] "maybe param" "temp"
        unknown call_tmp[662771] "expr temp" "maybe param" "maybe type" "temp"
        (662774 'move' call_tmp[662771](136909 call(136904 call (partial) dim _mt[243] d[136860]) dim[136868]))
        (426281 'move' tmp[426270](136910 call stridable _mt[243] call_tmp[662771]))
        unknown call_tmp[662778] "expr temp" "maybe param" "maybe type" "temp"
        (662781 'move' call_tmp[662778](426283 call _cond_invalid tmp[426270]))
        if call_tmp[662778]
        {
          (426286 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567309] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567310] "maybe param" "temp"
        unknown call_tmp[662783] "expr temp" "maybe param" "maybe type" "temp"
        (662786 'move' call_tmp[662783](426271 call isTrue tmp[426270]))
        (567315 'move' tmp[567310](567313 call _cond_test call_tmp[662783]))
        if tmp[567310]
        {
          (567320 'move' tmp[567309](567317 '_paramFoldLogical' tmp[567310] 1))
        }
        {
          unknown tmp[567322] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662788] "expr temp" "maybe param" "maybe type" "temp"
          (662791 'move' call_tmp[662788](136916 call rt[136864] dim[136868]))
          unknown call_tmp[662795] "expr temp" "maybe param" "maybe type" "temp"
          (662798 'move' call_tmp[662795](136917 call stridable _mt[243] call_tmp[662788]))
          unknown call_tmp[662800] "expr temp" "maybe param" "maybe type" "temp"
          (662803 'move' call_tmp[662800](136920 call ! call_tmp[662795]))
          (567324 'move' tmp[567322](426275 call isTrue call_tmp[662800]))
          (567329 'move' tmp[567309](567326 '_paramFoldLogical' tmp[567310] tmp[567322]))
        }
        (426260 'move' tmp[426249] tmp[567309])
        unknown call_tmp[662805] "expr temp" "maybe param" "maybe type" "temp"
        (662808 'move' call_tmp[662805](426262 call _cond_invalid tmp[426249]))
        if call_tmp[662805]
        {
          (426265 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567336] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567337] "maybe param" "temp"
        unknown call_tmp[662810] "expr temp" "maybe param" "maybe type" "temp"
        (662813 'move' call_tmp[662810](426250 call isTrue tmp[426249]))
        (567342 'move' tmp[567337](567340 call _cond_test call_tmp[662810]))
        if tmp[567337]
        {
          unknown tmp[567344] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662815] "expr temp" "maybe param" "maybe type" "temp"
          (662818 'move' call_tmp[662815](136930 call + dim[136868] 1))
          unknown call_tmp[662820] "expr temp" "maybe param" "maybe type" "temp"
          (662823 'move' call_tmp[662820](136932 call strideSafe d[136860] rt[136864] call_tmp[662815]))
          (567346 'move' tmp[567344](426253 call isTrue call_tmp[662820]))
          (567351 'move' tmp[567336](567348 '_paramFoldLogical' tmp[567337] tmp[567344]))
        }
        {
          (567356 'move' tmp[567336](567353 '_paramFoldLogical' tmp[567337] 0))
        }
        (567379 'move' tmp[567363](567376 '_paramFoldLogical' tmp[567364] tmp[567336]))
      }
      (518812 'move' ret[518807](518811 'deref' tmp[567363]))
      (518809 return ret[518807])
    }
    unknown tmp[426291] "maybe param" "temp"
    unknown tmp[426312] "maybe param" "temp"
    (426323 'move' tmp[426312](136946 call isRangeTuple t[136765]))
    unknown call_tmp[662825] "expr temp" "maybe param" "maybe type" "temp"
    (662828 'move' call_tmp[662825](426325 call _cond_invalid tmp[426312]))
    if call_tmp[662825]
    {
      (426328 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567386] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567387] "maybe param" "temp"
    unknown call_tmp[662830] "expr temp" "maybe param" "maybe type" "temp"
    (662833 'move' call_tmp[662830](426313 call isTrue tmp[426312]))
    (567392 'move' tmp[567387](567390 call _cond_test call_tmp[662830]))
    if tmp[567387]
    {
      unknown tmp[567394] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662837] "expr temp" "maybe param" "maybe type" "temp"
      (662840 'move' call_tmp[662837](136948 call rank _mt[243] d[136761]))
      unknown call_tmp[662844] "expr temp" "maybe param" "maybe type" "temp"
      (662847 'move' call_tmp[662844](136952 call size _mt[243] t[136765]))
      unknown call_tmp[662849] "expr temp" "maybe param" "maybe type" "temp"
      (662852 'move' call_tmp[662849](136955 call == call_tmp[662837] call_tmp[662844]))
      (567396 'move' tmp[567394](426316 call isTrue call_tmp[662849]))
      (567401 'move' tmp[567386](567398 '_paramFoldLogical' tmp[567387] tmp[567394]))
    }
    {
      (567406 'move' tmp[567386](567403 '_paramFoldLogical' tmp[567387] 0))
    }
    (426302 'move' tmp[426291] tmp[567386])
    unknown call_tmp[662854] "expr temp" "maybe param" "maybe type" "temp"
    (662857 'move' call_tmp[662854](426304 call _cond_invalid tmp[426291]))
    if call_tmp[662854]
    {
      (426307 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567413] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567414] "maybe param" "temp"
    unknown call_tmp[662859] "expr temp" "maybe param" "maybe type" "temp"
    (662862 'move' call_tmp[662859](426292 call isTrue tmp[426291]))
    (567419 'move' tmp[567414](567417 call _cond_test call_tmp[662859]))
    if tmp[567414]
    {
      unknown tmp[567421] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662864] "expr temp" "maybe param" "maybe type" "temp"
      (662867 'move' call_tmp[662864](136963 call strideSafe d[136761] t[136765]))
      (567423 'move' tmp[567421](426295 call isTrue call_tmp[662864]))
      (567428 'move' tmp[567413](567425 '_paramFoldLogical' tmp[567414] tmp[567421]))
    }
    {
      (567433 'move' tmp[567413](567430 '_paramFoldLogical' tmp[567414] 0))
    }
    (518821 'move' ret[518816](518820 'deref' tmp[567413]))
    (518818 return ret[518816])
  }
  function =[136976](ref arg a[136973]:_domain[125902](?), arg b[136979]:_tuple[56199](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662869] "expr temp" "maybe param" "maybe type" "temp"
    (662872 'move' call_tmp[662869](136986 call chpl__isLegalRectTupDomAssign a[136973] b[136979]))
    unknown call_tmp[662874] "expr temp" "maybe param" "maybe type" "temp"
    (662877 'move' call_tmp[662874](137070 call _cond_test call_tmp[662869]))
    if call_tmp[662874]
    {
      unknown call_tmp[662879] "expr temp" "maybe param" "maybe type" "temp"
      (662882 'move' call_tmp[662879](136991 call chpl__buildDomainExpr(136989 'expand_tuple' b[136979])))
      (136993 call = a[136973] call_tmp[662879])
    }
    {
      (137002 call(136998 call (partial) clear _mt[243] a[136973]))
      (480553 'end of statement')
      {
        unknown _indexOfInterest[137027] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137028] "expr temp" "temp"
        unknown call_tmp[662888] "expr temp" "maybe param" "maybe type" "temp"
        (662891 'move' call_tmp[662888](137043 call size _mt[243] b[136979]))
        unknown call_tmp[662893] "expr temp" "maybe param" "maybe type" "temp"
        (662896 'move' call_tmp[662893](137047 call chpl_direct_counted_range_iter 0 call_tmp[662888]))
        (137037 'move' _iterator[137028](137035 call _getIterator call_tmp[662893]))
        Defer
        {
          {
            (137063 call _freeIterator _iterator[137028])
          }
        }
        { scopeless type
          (137052 'move' _indexOfInterest[137027](137049 call iteratorIndex _iterator[137028]))
        }
        ForLoop[137029]
        {
          unknown ind[137056] "index var" "insert auto destroy"
          (480555 'end of statement')
          (137058 'move' ind[137056] _indexOfInterest[137027])
          (480556 'end of statement' ind[137056])
          {
            unknown call_tmp[662900] "expr temp" "maybe param" "maybe type" "temp"
            (662903 'move' call_tmp[662900](137022 call b[136979] ind[137056]))
            (137024 call(137016 call (partial) add _mt[243] a[136973]) call_tmp[662900])
            (480558 'end of statement' ind[137056])
          }
          label _continueLabel[137032]
          _indexOfInterest[137027]
          _iterator[137028]
        }
        label _breakLabel[137033]
      }
    }
    (518823 return _void[55])
  }
  function =[137083](ref arg d[137080]:_domain[125902](?), arg r[137089]:range[64316](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662905] "expr temp" "maybe param" "maybe type" "temp"
    (662908 'move' call_tmp[662905](137095 call chpl__buildDomainExpr r[137089]))
    (137097 call = d[137080] call_tmp[662905])
    (518825 return _void[55])
  }
  function =[137109](ref arg a[137106]:_domain[125902](?), arg b[137111]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662910] "expr temp" "maybe param" "maybe type" "temp"
    (662913 'move' call_tmp[662910](137116 call isRectangularDom a[137106]))
    unknown call_tmp[662915] "expr temp" "maybe param" "maybe type" "temp"
    (662918 'move' call_tmp[662915](137138 call _cond_test call_tmp[662910]))
    if call_tmp[662915]
    {
      (137136 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137149 call(137145 call (partial) clear _mt[243] a[137106]))
    (480562 'end of statement')
    {
      unknown _indexOfInterest[137162] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137163] "expr temp" "temp"
      (137172 'move' _iterator[137163](137170 call _getIterator b[137111]))
      Defer
      {
        {
          (137188 call _freeIterator _iterator[137163])
        }
      }
      { scopeless type
        (137177 'move' _indexOfInterest[137162](137174 call iteratorIndex _iterator[137163]))
      }
      ForLoop[137164]
      {
        unknown ind[137181] "index var" "insert auto destroy"
        (480564 'end of statement')
        (137183 'move' ind[137181] _indexOfInterest[137162])
        (480565 'end of statement' ind[137181])
        {
          (137159 call(137154 call (partial) add _mt[243] a[137106]) ind[137181])
          (480567 'end of statement' ind[137181])
        }
        label _continueLabel[137167]
        _indexOfInterest[137162]
        _iterator[137163]
      }
      label _breakLabel[137168]
    }
    (518827 return _void[55])
  }
  function chpl__serializeAssignment[137205](arg a[137202]:_array[133588](?), arg b[137207]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518831] "RVV" "param" "temp"
    unknown tmp[426333] "maybe param" "temp"
    unknown call_tmp[662926] "expr temp" "maybe param" "maybe type" "temp"
    (662929 'move' call_tmp[662926](137210 call rank _mt[243] a[137202]))
    (426344 'move' tmp[426333](137214 call != call_tmp[662926] 1))
    unknown call_tmp[662931] "expr temp" "maybe param" "maybe type" "temp"
    (662934 'move' call_tmp[662931](426346 call _cond_invalid tmp[426333]))
    if call_tmp[662931]
    {
      (426349 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567440] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567441] "maybe param" "temp"
    unknown call_tmp[662936] "expr temp" "maybe param" "maybe type" "temp"
    (662939 'move' call_tmp[662936](426334 call isTrue tmp[426333]))
    (567446 'move' tmp[567441](567444 call _cond_test call_tmp[662936]))
    if tmp[567441]
    {
      unknown tmp[567448] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662941] "expr temp" "maybe param" "maybe type" "temp"
      (662944 'move' call_tmp[662941](137219 call isRange b[137207]))
      (567450 'move' tmp[567448](426337 call isTrue call_tmp[662941]))
      (567455 'move' tmp[567440](567452 '_paramFoldLogical' tmp[567441] tmp[567448]))
    }
    {
      (567460 'move' tmp[567440](567457 '_paramFoldLogical' tmp[567441] 0))
    }
    unknown call_tmp[662946] "expr temp" "maybe param" "maybe type" "temp"
    (662949 'move' call_tmp[662946](137225 call _cond_test tmp[567440]))
    if call_tmp[662946]
    {
      (518836 'move' ret[518831](518835 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518829] _end_chpl__serializeAssignment[518829]
    }
    unknown tmp[426354] "maybe param" "temp"
    unknown tmp[426375] "maybe param" "temp"
    unknown tmp[426396] "maybe param" "temp"
    unknown call_tmp[662951] "expr temp" "maybe param" "maybe type" "temp"
    (662954 'move' call_tmp[662951](137234 call isRectangularArr a[137202]))
    (426407 'move' tmp[426396](137235 call ! call_tmp[662951]))
    unknown call_tmp[662956] "expr temp" "maybe param" "maybe type" "temp"
    (662959 'move' call_tmp[662956](426409 call _cond_invalid tmp[426396]))
    if call_tmp[662956]
    {
      (426412 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567467] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567468] "maybe param" "temp"
    unknown call_tmp[662961] "expr temp" "maybe param" "maybe type" "temp"
    (662964 'move' call_tmp[662961](426397 call isTrue tmp[426396]))
    (567473 'move' tmp[567468](567471 call _cond_test call_tmp[662961]))
    if tmp[567468]
    {
      unknown tmp[567475] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662966] "expr temp" "maybe param" "maybe type" "temp"
      (662969 'move' call_tmp[662966](137240 call isAssociativeArr a[137202]))
      unknown call_tmp[662971] "expr temp" "maybe param" "maybe type" "temp"
      (662974 'move' call_tmp[662971](137241 call ! call_tmp[662966]))
      (567477 'move' tmp[567475](426400 call isTrue call_tmp[662971]))
      (567482 'move' tmp[567467](567479 '_paramFoldLogical' tmp[567468] tmp[567475]))
    }
    {
      (567487 'move' tmp[567467](567484 '_paramFoldLogical' tmp[567468] 0))
    }
    (426386 'move' tmp[426375] tmp[567467])
    unknown call_tmp[662976] "expr temp" "maybe param" "maybe type" "temp"
    (662979 'move' call_tmp[662976](426388 call _cond_invalid tmp[426375]))
    if call_tmp[662976]
    {
      (426391 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567494] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567495] "maybe param" "temp"
    unknown call_tmp[662981] "expr temp" "maybe param" "maybe type" "temp"
    (662984 'move' call_tmp[662981](426376 call isTrue tmp[426375]))
    (567500 'move' tmp[567495](567498 call _cond_test call_tmp[662981]))
    if tmp[567495]
    {
      unknown tmp[567502] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662986] "expr temp" "maybe param" "maybe type" "temp"
      (662989 'move' call_tmp[662986](137248 call isSparseArr a[137202]))
      unknown call_tmp[662991] "expr temp" "maybe param" "maybe type" "temp"
      (662994 'move' call_tmp[662991](137249 call ! call_tmp[662986]))
      (567504 'move' tmp[567502](426379 call isTrue call_tmp[662991]))
      (567509 'move' tmp[567494](567506 '_paramFoldLogical' tmp[567495] tmp[567502]))
    }
    {
      (567514 'move' tmp[567494](567511 '_paramFoldLogical' tmp[567495] 0))
    }
    (426365 'move' tmp[426354] tmp[567494])
    unknown call_tmp[662996] "expr temp" "maybe param" "maybe type" "temp"
    (662999 'move' call_tmp[662996](426367 call _cond_invalid tmp[426354]))
    if call_tmp[662996]
    {
      (426370 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567602] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567603] "maybe param" "temp"
    unknown call_tmp[663001] "expr temp" "maybe param" "maybe type" "temp"
    (663004 'move' call_tmp[663001](426355 call isTrue tmp[426354]))
    (567608 'move' tmp[567603](567606 call _cond_test call_tmp[663001]))
    if tmp[567603]
    {
      (567613 'move' tmp[567602](567610 '_paramFoldLogical' tmp[567603] 1))
    }
    {
      unknown tmp[426417] "maybe param" "temp"
      unknown tmp[426438] "maybe param" "temp"
      unknown tmp[426459] "maybe param" "temp"
      (426470 'move' tmp[426459](137256 call isArray b[137207]))
      unknown call_tmp[663006] "expr temp" "maybe param" "maybe type" "temp"
      (663009 'move' call_tmp[663006](426472 call _cond_invalid tmp[426459]))
      if call_tmp[663006]
      {
        (426475 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567521] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567522] "maybe param" "temp"
      unknown call_tmp[663011] "expr temp" "maybe param" "maybe type" "temp"
      (663014 'move' call_tmp[663011](426460 call isTrue tmp[426459]))
      (567527 'move' tmp[567522](567525 call _cond_test call_tmp[663011]))
      if tmp[567522]
      {
        unknown tmp[567529] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663016] "expr temp" "maybe param" "maybe type" "temp"
        (663019 'move' call_tmp[663016](137260 call isRectangularArr b[137207]))
        unknown call_tmp[663021] "expr temp" "maybe param" "maybe type" "temp"
        (663024 'move' call_tmp[663021](137261 call ! call_tmp[663016]))
        (567531 'move' tmp[567529](426463 call isTrue call_tmp[663021]))
        (567536 'move' tmp[567521](567533 '_paramFoldLogical' tmp[567522] tmp[567529]))
      }
      {
        (567541 'move' tmp[567521](567538 '_paramFoldLogical' tmp[567522] 0))
      }
      (426449 'move' tmp[426438] tmp[567521])
      unknown call_tmp[663026] "expr temp" "maybe param" "maybe type" "temp"
      (663029 'move' call_tmp[663026](426451 call _cond_invalid tmp[426438]))
      if call_tmp[663026]
      {
        (426454 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567548] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567549] "maybe param" "temp"
      unknown call_tmp[663031] "expr temp" "maybe param" "maybe type" "temp"
      (663034 'move' call_tmp[663031](426439 call isTrue tmp[426438]))
      (567554 'move' tmp[567549](567552 call _cond_test call_tmp[663031]))
      if tmp[567549]
      {
        unknown tmp[567556] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663036] "expr temp" "maybe param" "maybe type" "temp"
        (663039 'move' call_tmp[663036](137268 call isAssociativeArr b[137207]))
        unknown call_tmp[663041] "expr temp" "maybe param" "maybe type" "temp"
        (663044 'move' call_tmp[663041](137269 call ! call_tmp[663036]))
        (567558 'move' tmp[567556](426442 call isTrue call_tmp[663041]))
        (567563 'move' tmp[567548](567560 '_paramFoldLogical' tmp[567549] tmp[567556]))
      }
      {
        (567568 'move' tmp[567548](567565 '_paramFoldLogical' tmp[567549] 0))
      }
      (426428 'move' tmp[426417] tmp[567548])
      unknown call_tmp[663046] "expr temp" "maybe param" "maybe type" "temp"
      (663049 'move' call_tmp[663046](426430 call _cond_invalid tmp[426417]))
      if call_tmp[663046]
      {
        (426433 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567575] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567576] "maybe param" "temp"
      unknown call_tmp[663051] "expr temp" "maybe param" "maybe type" "temp"
      (663054 'move' call_tmp[663051](426418 call isTrue tmp[426417]))
      (567581 'move' tmp[567576](567579 call _cond_test call_tmp[663051]))
      if tmp[567576]
      {
        unknown tmp[567583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663056] "expr temp" "maybe param" "maybe type" "temp"
        (663059 'move' call_tmp[663056](137276 call isSparseArr b[137207]))
        unknown call_tmp[663061] "expr temp" "maybe param" "maybe type" "temp"
        (663064 'move' call_tmp[663061](137277 call ! call_tmp[663056]))
        (567585 'move' tmp[567583](426421 call isTrue call_tmp[663061]))
        (567590 'move' tmp[567575](567587 '_paramFoldLogical' tmp[567576] tmp[567583]))
      }
      {
        (567595 'move' tmp[567575](567592 '_paramFoldLogical' tmp[567576] 0))
      }
      unknown tmp[567615] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567617 'move' tmp[567615](426359 call isTrue tmp[567575]))
      (567622 'move' tmp[567602](567619 '_paramFoldLogical' tmp[567603] tmp[567615]))
    }
    unknown call_tmp[663066] "expr temp" "maybe param" "maybe type" "temp"
    (663069 'move' call_tmp[663066](137286 call _cond_test tmp[567602]))
    if call_tmp[663066]
    {
      (518841 'move' ret[518831](518840 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518829] _end_chpl__serializeAssignment[518829]
    }
    (518846 'move' ret[518831](518845 'deref' 0))
    label _end_chpl__serializeAssignment[518829]
    (518833 return ret[518831])
  }
  function chpl__compatibleForBulkTransfer[137304](arg a[137301]:_array[133588](?), arg b[137309]:_array[133588](?), param arg kind[137313]:_tElt[137987]) param : _unknown[51]
  {
    unknown ret[518850] "RVV" "param" "temp"
    unknown call_tmp[663071] "expr temp" "maybe param" "maybe type" "temp"
    (663074 'move' call_tmp[663071](137317 call ! useBulkTransfer[113722]))
    unknown call_tmp[663076] "expr temp" "maybe param" "maybe type" "temp"
    (663079 'move' call_tmp[663076](137322 call _cond_test call_tmp[663071]))
    if call_tmp[663076]
    {
      (518855 'move' ret[518850](518854 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518848] _end_chpl__compatibleForBulkTransfer[518848]
    }
    unknown call_tmp[663083] "expr temp" "maybe param" "maybe type" "temp"
    (663086 'move' call_tmp[663083](137329 call eltType _mt[243] a[137301]))
    unknown call_tmp[663090] "expr temp" "maybe param" "maybe type" "temp"
    (663093 'move' call_tmp[663090](137333 call eltType _mt[243] b[137309]))
    unknown call_tmp[663095] "expr temp" "maybe param" "maybe type" "temp"
    (663098 'move' call_tmp[663095](137336 call != call_tmp[663083] call_tmp[663090]))
    unknown call_tmp[663100] "expr temp" "maybe param" "maybe type" "temp"
    (663103 'move' call_tmp[663100](137341 call _cond_test call_tmp[663095]))
    if call_tmp[663100]
    {
      (518860 'move' ret[518850](518859 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518848] _end_chpl__compatibleForBulkTransfer[518848]
    }
    unknown call_tmp[663105] "expr temp" "maybe param" "maybe type" "temp"
    (663108 'move' call_tmp[663105](137351 call == kind[137313] move[137981]))
    unknown call_tmp[663110] "expr temp" "maybe param" "maybe type" "temp"
    (663113 'move' call_tmp[663110](137356 call _cond_test call_tmp[663105]))
    if call_tmp[663110]
    {
      (518865 'move' ret[518850](518864 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518848] _end_chpl__compatibleForBulkTransfer[518848]
    }
    unknown tmp[426480] "maybe param" "temp"
    (426491 'move' tmp[426480](137368 call == kind[137313] initCopy[137983]))
    unknown call_tmp[663115] "expr temp" "maybe param" "maybe type" "temp"
    (663118 'move' call_tmp[663115](426493 call _cond_invalid tmp[426480]))
    if call_tmp[663115]
    {
      (426496 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567629] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567630] "maybe param" "temp"
    unknown call_tmp[663120] "expr temp" "maybe param" "maybe type" "temp"
    (663123 'move' call_tmp[663120](426481 call isTrue tmp[426480]))
    (567635 'move' tmp[567630](567633 call _cond_test call_tmp[663120]))
    if tmp[567630]
    {
      unknown tmp[567637] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663127] "expr temp" "maybe param" "maybe type" "temp"
      (663130 'move' call_tmp[663127](137372 call eltType _mt[243] a[137301]))
      unknown call_tmp[663132] "expr temp" "maybe param" "maybe type" "temp"
      (663135 'move' call_tmp[663132](137376 call isConstCopyableType call_tmp[663127]))
      (567639 'move' tmp[567637](426484 call isTrue call_tmp[663132]))
      (567644 'move' tmp[567629](567641 '_paramFoldLogical' tmp[567630] tmp[567637]))
    }
    {
      (567649 'move' tmp[567629](567646 '_paramFoldLogical' tmp[567630] 0))
    }
    unknown call_tmp[663137] "expr temp" "maybe param" "maybe type" "temp"
    (663140 'move' call_tmp[663137](137382 call _cond_test tmp[567629]))
    if call_tmp[663137]
    {
      (518870 'move' ret[518850](518869 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518848] _end_chpl__compatibleForBulkTransfer[518848]
    }
    unknown call_tmp[663144] "expr temp" "maybe param" "maybe type" "temp"
    (663147 'move' call_tmp[663144](137389 call eltType _mt[243] a[137301]))
    unknown call_tmp[663149] "expr temp" "maybe param" "maybe type" "temp"
    (663152 'move' call_tmp[663149](137393 call chpl__supportedDataTypeForBulkTransfer call_tmp[663144]))
    unknown call_tmp[663154] "expr temp" "maybe param" "maybe type" "temp"
    (663157 'move' call_tmp[663154](137394 call ! call_tmp[663149]))
    unknown call_tmp[663159] "expr temp" "maybe param" "maybe type" "temp"
    (663162 'move' call_tmp[663159](137399 call _cond_test call_tmp[663154]))
    if call_tmp[663159]
    {
      (518875 'move' ret[518850](518874 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518848] _end_chpl__compatibleForBulkTransfer[518848]
    }
    (518880 'move' ret[518850](518879 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[518848]
    (518852 return ret[518850])
  }
  function chpl__supportedDataTypeForBulkTransfer[137413](arg t[137411]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518884] "RVV" "param" "temp"
    unknown tmp[426522] "maybe param" "temp"
    (426533 'move' tmp[426522](354303 'is_subtype' borrowed[211](?) t[137411]))
    unknown call_tmp[663164] "expr temp" "maybe param" "maybe type" "temp"
    (663167 'move' call_tmp[663164](426535 call _cond_invalid tmp[426522]))
    if call_tmp[663164]
    {
      (426538 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567656] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567657] "maybe param" "temp"
    unknown call_tmp[663169] "expr temp" "maybe param" "maybe type" "temp"
    (663172 'move' call_tmp[663169](426523 call isTrue tmp[426522]))
    (567662 'move' tmp[567657](567660 call _cond_test call_tmp[663169]))
    if tmp[567657]
    {
      (567667 'move' tmp[567656](567664 '_paramFoldLogical' tmp[567657] 1))
    }
    {
      unknown tmp[567669] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663174] "expr temp" "maybe param" "maybe type" "temp"
      (663177 'move' call_tmp[663174](354304 'is_subtype' unmanaged[220](?) t[137411]))
      (567671 'move' tmp[567669](426527 call isTrue call_tmp[663174]))
      (567676 'move' tmp[567656](567673 '_paramFoldLogical' tmp[567657] tmp[567669]))
    }
    unknown call_tmp[663179] "expr temp" "maybe param" "maybe type" "temp"
    (663182 'move' call_tmp[663179](137477 call _cond_test tmp[567656]))
    if call_tmp[663179]
    {
      (518889 'move' ret[518884](518888 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518882] _end_chpl__supportedDataTypeForBulkTransfer[518882]
    }
    {
      unknown tmp[426501] "maybe param" "temp"
      (426512 'move' tmp[426501](137434 call isRecordType t[137411]))
      unknown call_tmp[663184] "expr temp" "maybe param" "maybe type" "temp"
      (663187 'move' call_tmp[663184](426514 call _cond_invalid tmp[426501]))
      if call_tmp[663184]
      {
        (426517 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[567683] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567684] "maybe param" "temp"
      unknown call_tmp[663189] "expr temp" "maybe param" "maybe type" "temp"
      (663192 'move' call_tmp[663189](426502 call isTrue tmp[426501]))
      (567689 'move' tmp[567684](567687 call _cond_test call_tmp[663189]))
      if tmp[567684]
      {
        (567694 'move' tmp[567683](567691 '_paramFoldLogical' tmp[567684] 1))
      }
      {
        unknown tmp[567696] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663194] "expr temp" "maybe param" "maybe type" "temp"
        (663197 'move' call_tmp[663194](137438 call isTupleType t[137411]))
        (567698 'move' tmp[567696](426506 call isTrue call_tmp[663194]))
        (567703 'move' tmp[567683](567700 '_paramFoldLogical' tmp[567684] tmp[567696]))
      }
      unknown call_tmp[663199] "expr temp" "maybe param" "maybe type" "temp"
      (663202 'move' call_tmp[663199](137472 call _cond_test tmp[567683]))
      if call_tmp[663199]
      {
        unknown call_tmp[663204] "expr temp" "maybe param" "maybe type" "temp"
        (663207 'move' call_tmp[663204](137444 call isPODType t[137411]))
        (518894 'move' ret[518884](518893 'deref' call_tmp[663204]))
        gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518882] _end_chpl__supportedDataTypeForBulkTransfer[518882]
      }
      {
        unknown call_tmp[663209] "expr temp" "maybe param" "maybe type" "temp"
        (663212 'move' call_tmp[663209](137451 call isUnionType t[137411]))
        unknown call_tmp[663214] "expr temp" "maybe param" "maybe type" "temp"
        (663217 'move' call_tmp[663214](137468 call _cond_test call_tmp[663209]))
        if call_tmp[663214]
        {
          (518899 'move' ret[518884](518898 'deref' 0))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518882] _end_chpl__supportedDataTypeForBulkTransfer[518882]
        }
        {
          unknown x[137457] "dead at end of block" "insert auto destroy" "unsafe"
          (543093 'default init var' x[137457] t[137411])
          (137460 'end of statement')
          unknown call_tmp[663219] "expr temp" "maybe param" "maybe type" "temp"
          (663222 'move' call_tmp[663219](137465 call chpl__supportedDataTypeForBulkTransfer x[137457]))
          (518904 'move' ret[518884](518903 'deref' call_tmp[663219]))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518882] _end_chpl__supportedDataTypeForBulkTransfer[518882]
          (480588 'end of statement' x[137457])
        }
      }
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[518882]
    (518886 return ret[518884])
  }
  function chpl__supportedDataTypeForBulkTransfer[137491](arg x[137488]:string[26]) param : _unknown[51]
  {
    unknown ret[518910] "RVV" "param" "temp"
    (518915 'move' ret[518910](518914 'deref' 0))
    (518912 return ret[518910])
  }
  function chpl__supportedDataTypeForBulkTransfer[137505](arg x[137502]:bytes[24]) param : _unknown[51]
  {
    unknown ret[518919] "RVV" "param" "temp"
    (518924 'move' ret[518919](518923 'deref' 0))
    (518921 return ret[518919])
  }
  function chpl__supportedDataTypeForBulkTransfer[137519](arg x[137516]:_syncvar[84944](?)) param : _unknown[51]
  {
    unknown ret[518928] "RVV" "param" "temp"
    (518933 'move' ret[518928](518932 'deref' 0))
    (518930 return ret[518928])
  }
  function chpl__supportedDataTypeForBulkTransfer[137533](arg x[137530]:_singlevar[87253](?)) param : _unknown[51]
  {
    unknown ret[518937] "RVV" "param" "temp"
    (518942 'move' ret[518937](518941 'deref' 0))
    (518939 return ret[518937])
  }
  function chpl__supportedDataTypeForBulkTransfer[137547](arg x[137544]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[518946] "RVV" "param" "temp"
    (518951 'move' ret[518946](518950 'deref' 0))
    (518948 return ret[518946])
  }
  function chpl__supportedDataTypeForBulkTransfer[137563](arg x[137560]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[518955] "RVV" "param" "temp"
    (518960 'move' ret[518955](518959 'deref' 0))
    (518957 return ret[518955])
  }
  function chpl__supportedDataTypeForBulkTransfer[137577](arg x[137574]:_distribution[118967](?)) param : _unknown[51]
  {
    unknown ret[518964] "RVV" "param" "temp"
    (518969 'move' ret[518964](518968 'deref' 1))
    (518966 return ret[518964])
  }
  function chpl__supportedDataTypeForBulkTransfer[137591](arg x[137588]:locale[28]) param : _unknown[51]
  {
    unknown ret[518973] "RVV" "param" "temp"
    (518978 'move' ret[518973](518977 'deref' 1))
    (518975 return ret[518973])
  }
  function chpl__supportedDataTypeForBulkTransfer[137605](arg x[137602]:chpl_anycomplex[184](?)) param : _unknown[51]
  {
    unknown ret[518982] "RVV" "param" "temp"
    (518987 'move' ret[518982](518986 'deref' 1))
    (518984 return ret[518982])
  }
  function chpl__supportedDataTypeForBulkTransfer[137620](arg x[137617]:object[22]) param : _unknown[51]
  {
    unknown ret[518991] "RVV" "param" "temp"
    (518996 'move' ret[518991](518995 'deref' 0))
    (518993 return ret[518991])
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137630]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[519000] "RVV" "param" "temp"
    (519005 'move' ret[519000](519004 'deref' 1))
    (519002 return ret[519000])
  }
  function checkArrayShapesUponAssignment[137648](arg a[137645]:_array[133588](?), arg b[137653]:_array[133588](?)) : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[426543] "maybe param" "temp"
    (426554 'move' tmp[426543](137659 call isRectangularArr a[137645]))
    unknown call_tmp[663224] "expr temp" "maybe param" "maybe type" "temp"
    (663227 'move' call_tmp[663224](426556 call _cond_invalid tmp[426543]))
    if call_tmp[663224]
    {
      (426559 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567710] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567711] "maybe param" "temp"
    unknown call_tmp[663229] "expr temp" "maybe param" "maybe type" "temp"
    (663232 'move' call_tmp[663229](426544 call isTrue tmp[426543]))
    (567716 'move' tmp[567711](567714 call _cond_test call_tmp[663229]))
    if tmp[567711]
    {
      unknown tmp[567718] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663234] "expr temp" "maybe param" "maybe type" "temp"
      (663237 'move' call_tmp[663234](137663 call isRectangularArr b[137653]))
      (567720 'move' tmp[567718](426547 call isTrue call_tmp[663234]))
      (567725 'move' tmp[567710](567722 '_paramFoldLogical' tmp[567711] tmp[567718]))
    }
    {
      (567730 'move' tmp[567710](567727 '_paramFoldLogical' tmp[567711] 0))
    }
    unknown call_tmp[663239] "expr temp" "maybe param" "maybe type" "temp"
    (663242 'move' call_tmp[663239](137839 call _cond_test tmp[567710]))
    if call_tmp[663239]
    {
      unknown call_tmp[663246] "expr temp" "maybe param" "maybe type" "temp"
      (663249 'move' call_tmp[663246](137667 call _value _mt[243] a[137645]))
      unknown call_tmp[663253] "expr temp" "maybe param" "maybe type" "temp"
      (663256 'move' call_tmp[663253](137670 call dom _mt[243] call_tmp[663246]))
      unknown call_tmp[663260] "maybe param" "maybe type" "temp"
      (663263 'move' call_tmp[663260](137677 call(137673 call (partial) dsiDims _mt[243] call_tmp[663253])))
      const aDims[137678] "dead at end of block" "const" "insert auto destroy"
      (543095 'init var' aDims[137678] call_tmp[663260])
      unknown call_tmp[663267] "expr temp" "maybe param" "maybe type" "temp"
      (663270 'move' call_tmp[663267](137682 call _value _mt[243] b[137653]))
      unknown call_tmp[663274] "expr temp" "maybe param" "maybe type" "temp"
      (663277 'move' call_tmp[663274](137685 call dom _mt[243] call_tmp[663267]))
      unknown call_tmp[663281] "maybe param" "maybe type" "temp"
      (663284 'move' call_tmp[663281](137692 call(137688 call (partial) dsiDims _mt[243] call_tmp[663274])))
      const bDims[137693] "dead at end of block" "const" "insert auto destroy"
      (543097 'init var' bDims[137693] call_tmp[663281])
      (137696 'end of statement')
      unknown call_tmp[663288] "expr temp" "maybe param" "maybe type" "temp"
      (663291 'move' call_tmp[663288](137700 call size _mt[243] aDims[137678]))
      unknown call_tmp[663295] "expr temp" "maybe param" "maybe type" "temp"
      (663298 'move' call_tmp[663295](137704 call size _mt[243] bDims[137693]))
      unknown call_tmp[663300] "expr temp" "maybe param" "maybe type" "temp"
      (663303 'move' call_tmp[663300](137707 call == call_tmp[663288] call_tmp[663295]))
      (137710 call compilerAssert call_tmp[663300])
      (480602 'end of statement' aDims[137678] bDims[137693])
      {
        unknown i[137798] "dead at end of block" "insert auto destroy"
        (543099 'init var' i[137798] 0)
        (480605 'end of statement')
        unknown tmp[137799] "maybe param" "temp"
        unknown call_tmp[663307] "expr temp" "maybe param" "maybe type" "temp"
        (663310 'move' call_tmp[663307](137714 call size _mt[243] aDims[137678]))
        unknown call_tmp[663312] "expr temp" "maybe param" "maybe type" "temp"
        (663315 'move' call_tmp[663312](137718 call - call_tmp[663307] 1))
        (137811 'move' tmp[137799](137809 call chpl_compute_low_param_loop_bound 0 call_tmp[663312]))
        unknown tmp[137800] "maybe param" "temp"
        unknown call_tmp[663319] "expr temp" "maybe param" "maybe type" "temp"
        (663322 'move' call_tmp[663319](137818 call size _mt[243] aDims[137678]))
        unknown call_tmp[663324] "expr temp" "maybe param" "maybe type" "temp"
        (663327 'move' call_tmp[663324](137816 call - call_tmp[663319] 1))
        (137824 'move' tmp[137800](137822 call chpl_compute_high_param_loop_bound 0 call_tmp[663324]))
        unknown tmp[137801] "maybe param" "temp"
        (137827 'move' tmp[137801] 1)
        ParamForLoop[137829]
        { i[137798] tmp[137799] tmp[137800] tmp[137801]
          {
            unknown call_tmp[663329] "expr temp" "maybe param" "maybe type" "temp"
            (663332 'move' call_tmp[663329](137725 call aDims[137678] i[137798]))
            unknown call_tmp[663336] "expr temp" "maybe param" "maybe type" "temp"
            (663339 'move' call_tmp[663336](137726 call size _mt[243] call_tmp[663329]))
            unknown call_tmp[663341] "expr temp" "maybe param" "maybe type" "temp"
            (663344 'move' call_tmp[663341](137732 call bDims[137693] i[137798]))
            unknown call_tmp[663348] "expr temp" "maybe param" "maybe type" "temp"
            (663351 'move' call_tmp[663348](137733 call size _mt[243] call_tmp[663341]))
            unknown call_tmp[663353] "expr temp" "maybe param" "maybe type" "temp"
            (663356 'move' call_tmp[663353](137736 call != call_tmp[663336] call_tmp[663348]))
            unknown call_tmp[663358] "expr temp" "maybe param" "maybe type" "temp"
            (663361 'move' call_tmp[663358](137792 call _cond_test call_tmp[663353]))
            if call_tmp[663358]
            {
              unknown call_tmp[663363] "expr temp" "maybe param" "maybe type" "temp"
              (663366 'move' call_tmp[663363](137762 call aDims[137678] i[137798]))
              unknown call_tmp[663370] "expr temp" "maybe param" "maybe type" "temp"
              (663373 'move' call_tmp[663370](137763 call size _mt[243] call_tmp[663363]))
              unknown call_tmp[663375] "expr temp" "maybe param" "maybe type" "temp"
              (663378 'move' call_tmp[663375](137786 call bDims[137693] i[137798]))
              unknown call_tmp[663382] "expr temp" "maybe param" "maybe type" "temp"
              (663385 'move' call_tmp[663382](137787 call size _mt[243] call_tmp[663375]))
              (137790 call halt "assigning between arrays of different shapes in dimension " i[137798] ": " call_tmp[663370] " vs. " call_tmp[663382])
              (480606 'end of statement' i[137798] aDims[137678] i[137798] bDims[137693] i[137798])
            }
          }
        }
        label _unused_continueLabel[137803]
        label _breakLabel[137802]
      }
    }
    {
    }
    (519007 return _void[55])
  }
  function =[137854](ref arg a[137851]:_array[133588](?), arg b[137859]:_array[133588](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[663389] "expr temp" "maybe param" "maybe type" "temp"
    (663392 'move' call_tmp[663389](137863 call rank _mt[243] a[137851]))
    unknown call_tmp[663396] "expr temp" "maybe param" "maybe type" "temp"
    (663399 'move' call_tmp[663396](137867 call rank _mt[243] b[137859]))
    unknown call_tmp[663401] "expr temp" "maybe param" "maybe type" "temp"
    (663404 'move' call_tmp[663401](137870 call != call_tmp[663389] call_tmp[663396]))
    unknown call_tmp[663406] "expr temp" "maybe param" "maybe type" "temp"
    (663409 'move' call_tmp[663406](137893 call _cond_test call_tmp[663401]))
    if call_tmp[663406]
    {
      (137891 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[663413] "expr temp" "maybe param" "maybe type" "temp"
    (663416 'move' call_tmp[663413](137900 call _value _mt[243] b[137859]))
    unknown call_tmp[663418] "expr temp" "maybe param" "maybe type" "temp"
    (663421 'move' call_tmp[663418](137904 call == call_tmp[663413] nil[44]))
    unknown call_tmp[663423] "expr temp" "maybe param" "maybe type" "temp"
    (663426 'move' call_tmp[663423](137908 call _cond_test call_tmp[663418]))
    if call_tmp[663423]
    {
      gotoReturn _end_=[519009] _end_=[519009]
    }
    unknown call_tmp[663430] "expr temp" "maybe param" "maybe type" "temp"
    (663433 'move' call_tmp[663430](137914 call _value _mt[243] a[137851]))
    unknown call_tmp[663437] "expr temp" "maybe param" "maybe type" "temp"
    (663440 'move' call_tmp[663437](137918 call _value _mt[243] b[137859]))
    unknown call_tmp[663442] "expr temp" "maybe param" "maybe type" "temp"
    (663445 'move' call_tmp[663442](137921 call == call_tmp[663430] call_tmp[663437]))
    unknown call_tmp[663447] "expr temp" "maybe param" "maybe type" "temp"
    (663450 'move' call_tmp[663447](137926 call _cond_test call_tmp[663442]))
    if call_tmp[663447]
    {
      gotoReturn _end_=[519009] _end_=[519009]
    }
    unknown tmp[426564] "maybe param" "temp"
    unknown call_tmp[663454] "expr temp" "maybe param" "maybe type" "temp"
    (663457 'move' call_tmp[663454](137931 call size _mt[243] a[137851]))
    (426575 'move' tmp[426564](137935 call == call_tmp[663454] 0))
    unknown call_tmp[663459] "expr temp" "maybe param" "maybe type" "temp"
    (663462 'move' call_tmp[663459](426577 call _cond_invalid tmp[426564]))
    if call_tmp[663459]
    {
      (426580 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567737] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567738] "maybe param" "temp"
    unknown call_tmp[663464] "expr temp" "maybe param" "maybe type" "temp"
    (663467 'move' call_tmp[663464](426565 call isTrue tmp[426564]))
    (567743 'move' tmp[567738](567741 call _cond_test call_tmp[663464]))
    if tmp[567738]
    {
      unknown tmp[567745] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663471] "expr temp" "maybe param" "maybe type" "temp"
      (663474 'move' call_tmp[663471](137938 call size _mt[243] b[137859]))
      unknown call_tmp[663476] "expr temp" "maybe param" "maybe type" "temp"
      (663479 'move' call_tmp[663476](137942 call == call_tmp[663471] 0))
      (567747 'move' tmp[567745](426568 call isTrue call_tmp[663476]))
      (567752 'move' tmp[567737](567749 '_paramFoldLogical' tmp[567738] tmp[567745]))
    }
    {
      (567757 'move' tmp[567737](567754 '_paramFoldLogical' tmp[567738] 0))
    }
    unknown call_tmp[663481] "expr temp" "maybe param" "maybe type" "temp"
    (663484 'move' call_tmp[663481](137948 call _cond_test tmp[567737]))
    if call_tmp[663481]
    {
      gotoReturn _end_=[519009] _end_=[519009]
    }
    unknown call_tmp[663486] "expr temp" "maybe param" "maybe type" "temp"
    (663489 'move' call_tmp[663486](137960 call _cond_test 1))
    if call_tmp[663486]
    {
      (137958 call checkArrayShapesUponAssignment a[137851] b[137859])
    }
    (137976 call chpl__uncheckedArrayTransfer a[137851] b[137859](kind = assign[137985]))
    label _end_=[519009]
    (519011 return _void[55])
  }
  type _tElt[137987] def move[137981]:_tElt[137987] def initCopy[137983]:_tElt[137987] def assign[137985]:_tElt[137987]
  function needsInitWorkaround[137994](arg t[137992]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[519021] "RVV" "param" "temp"
    unknown tmp[426585] "maybe param" "temp"
    unknown tmp[426606] "maybe param" "temp"
    (426617 'move' tmp[426606](354308 'is_subtype' _array[133588](?) t[137992]))
    unknown call_tmp[663491] "expr temp" "maybe param" "maybe type" "temp"
    (663494 'move' call_tmp[663491](426619 call _cond_invalid tmp[426606]))
    if call_tmp[663491]
    {
      (426622 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567764] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567765] "maybe param" "temp"
    unknown call_tmp[663496] "expr temp" "maybe param" "maybe type" "temp"
    (663499 'move' call_tmp[663496](426607 call isTrue tmp[426606]))
    (567770 'move' tmp[567765](567768 call _cond_test call_tmp[663496]))
    if tmp[567765]
    {
      (567775 'move' tmp[567764](567772 '_paramFoldLogical' tmp[567765] 1))
    }
    {
      unknown tmp[567777] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663501] "expr temp" "maybe param" "maybe type" "temp"
      (663504 'move' call_tmp[663501](354309 'is_subtype' _domain[125902](?) t[137992]))
      (567779 'move' tmp[567777](426611 call isTrue call_tmp[663501]))
      (567784 'move' tmp[567764](567781 '_paramFoldLogical' tmp[567765] tmp[567777]))
    }
    (426596 'move' tmp[426585] tmp[567764])
    unknown call_tmp[663506] "expr temp" "maybe param" "maybe type" "temp"
    (663509 'move' call_tmp[663506](426598 call _cond_invalid tmp[426585]))
    if call_tmp[663506]
    {
      (426601 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567791] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567792] "maybe param" "temp"
    unknown call_tmp[663511] "expr temp" "maybe param" "maybe type" "temp"
    (663514 'move' call_tmp[663511](426586 call isTrue tmp[426585]))
    (567797 'move' tmp[567792](567795 call _cond_test call_tmp[663511]))
    if tmp[567792]
    {
      (567802 'move' tmp[567791](567799 '_paramFoldLogical' tmp[567792] 1))
    }
    {
      unknown tmp[567804] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663516] "expr temp" "maybe param" "maybe type" "temp"
      (663519 'move' call_tmp[663516](354310 'is_subtype' _distribution[118967](?) t[137992]))
      (567806 'move' tmp[567804](426590 call isTrue call_tmp[663516]))
      (567811 'move' tmp[567791](567808 '_paramFoldLogical' tmp[567792] tmp[567804]))
    }
    (519026 'move' ret[519021](519025 'deref' tmp[567791]))
    (519023 return ret[519021])
  }
  function initCopyAfterTransfer[138028](ref arg a[138025]:_array[133588](?)) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    unknown call_tmp[663523] "expr temp" "maybe param" "maybe type" "temp"
    (663526 'move' call_tmp[663523](138032 call eltType _mt[243] a[138025]))
    unknown call_tmp[663528] "expr temp" "maybe param" "maybe type" "temp"
    (663531 'move' call_tmp[663528](138036 call needsInitWorkaround call_tmp[663523]))
    unknown call_tmp[663533] "expr temp" "maybe param" "maybe type" "temp"
    (663536 'move' call_tmp[663533](138094 call _cond_test call_tmp[663528]))
    if call_tmp[663533]
    {
      unknown call_tmp[663540] "expr temp" "maybe param" "maybe type" "temp"
      (663543 'move' call_tmp[663540](415650 call _dom _mt[243] a[138025]))
      unknown call_tmp[663545] "maybe param" "maybe type" "temp"
      (663548 'move' call_tmp[663545](415646 call chpl__staticAutoLocalCheck a[138025] call_tmp[663540]))
      unknown chpl__staticAutoLocalCheckSym[415645] "dead at end of block" "param"
      (543101 'init var' chpl__staticAutoLocalCheckSym[415645] call_tmp[663545])
      (480622 'end of statement')
      if chpl__staticAutoLocalCheckSym[415645]
      {
        unknown call_tmp[663552] "expr temp" "maybe param" "maybe type" "temp"
        (663555 'move' call_tmp[663552](138039 call _dom _mt[243] a[138025]))
        Forall {
          induction variables:
            
            unknown ai[138067] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663552]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138046] "dead at end of block" "ref var"
            unknown call_tmp[663557] "expr temp" "maybe param" "maybe type" "temp"
            (663560 'move' call_tmp[663557](415656 'may be local access' a[138025] ai[138067] chpl__staticAutoLocalCheckSym[415645] 1))
            (543104 'move' aa[138046](543103 'addr of' call_tmp[663557]))
            (138049 'end of statement')
            unknown call_tmp[663564] "maybe param" "maybe type" "temp"
            (663567 'move' call_tmp[663564](138052 call eltType _mt[243] a[138025]))
            unknown copy[138056] "dead at end of block" "no auto destroy"
            (543106 'init var' copy[138056] aa[138046] call_tmp[663564])
            (138059 'end of statement' ai[138067] aa[138046])
            (138064 '=' aa[138046] copy[138056])
            (480625 'end of statement' aa[138046] copy[138056])
          }
        }
      }
      {
        unknown call_tmp[663571] "expr temp" "maybe param" "maybe type" "temp"
        (663574 'move' call_tmp[663571](415642 call _dom _mt[243] a[138025]))
        Forall {
          induction variables:
            
            unknown ai[415639] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663571]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415621] "dead at end of block" "ref var"
            unknown call_tmp[663576] "expr temp" "maybe param" "maybe type" "temp"
            (663579 'move' call_tmp[663576](415623 call a[138025] ai[415639]))
            (543109 'move' aa[415621](543108 'addr of' call_tmp[663576]))
            (415626 'end of statement')
            unknown call_tmp[663583] "maybe param" "maybe type" "temp"
            (663586 'move' call_tmp[663583](415630 call eltType _mt[243] a[138025]))
            unknown copy[415627] "dead at end of block" "no auto destroy"
            (543111 'init var' copy[415627] aa[415621] call_tmp[663583])
            (415634 'end of statement' ai[415639] aa[415621])
            (415635 '=' aa[415621] copy[415627])
            (480630 'end of statement' aa[415621] copy[415627])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138090] "index var" "insert auto destroy"
        iterated expressions:
          a[138025]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663590] "maybe param" "maybe type" "temp"
          (663593 'move' call_tmp[663590](138074 call eltType _mt[243] a[138025]))
          unknown copy[138078] "dead at end of block" "no auto destroy"
          (543113 'init var' copy[138078] aa[138090] call_tmp[663590])
          (138081 'end of statement' aa[138090])
          (138087 '=' aa[138090] copy[138078])
          (480634 'end of statement' aa[138090] copy[138078])
        }
      }
    }
    (519028 return _void[55])
  }
  function fixRuntimeType[138105](arg eltType[138103]:_any[178](?), ref arg elt[138107]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138110] "dead at end of block" "insert auto destroy"
    (543115 'init var' runtimeTypesDiffer[138110] 0)
    (138113 'end of statement')
    unknown tmp[426627] "maybe param" "temp"
    (426638 'move' tmp[426627](354311 'is_subtype' _array[133588](?) eltType[138103]))
    unknown call_tmp[663595] "expr temp" "maybe param" "maybe type" "temp"
    (663598 'move' call_tmp[663595](426640 call _cond_invalid tmp[426627]))
    if call_tmp[663595]
    {
      (426643 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567818] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567819] "maybe param" "temp"
    unknown call_tmp[663600] "expr temp" "maybe param" "maybe type" "temp"
    (663603 'move' call_tmp[663600](426628 call isTrue tmp[426627]))
    (567824 'move' tmp[567819](567822 call _cond_test call_tmp[663600]))
    if tmp[567819]
    {
      (567829 'move' tmp[567818](567826 '_paramFoldLogical' tmp[567819] 1))
    }
    {
      unknown tmp[567831] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663605] "expr temp" "maybe param" "maybe type" "temp"
      (663608 'move' call_tmp[663605](354312 'is_subtype' _domain[125902](?) eltType[138103]))
      (567833 'move' tmp[567831](426632 call isTrue call_tmp[663605]))
      (567838 'move' tmp[567818](567835 '_paramFoldLogical' tmp[567819] tmp[567831]))
    }
    unknown call_tmp[663610] "expr temp" "maybe param" "maybe type" "temp"
    (663613 'move' call_tmp[663610](138243 call _cond_test tmp[567818]))
    if call_tmp[663610]
    {
      unknown call_tmp[663615] "expr temp" "maybe param" "maybe type" "temp"
      (663618 'move' call_tmp[663615](354313 'is_subtype' _array[133588](?) eltType[138103]))
      unknown call_tmp[663620] "expr temp" "maybe param" "maybe type" "temp"
      (663623 'move' call_tmp[663620](138169 call _cond_test call_tmp[663615]))
      if call_tmp[663620]
      {
        const lhsDomain[138136] "dead at end of block" "const" "ref var"
        unknown call_tmp[663625] "expr temp" "maybe param" "maybe type" "temp"
        (663628 'move' call_tmp[663625](138135 call chpl__domainFromArrayRuntimeType eltType[138103]))
        (543118 'move' lhsDomain[138136](543117 'addr of' call_tmp[663625]))
        (138139 'end of statement')
        const rhsDomain[138145] "dead at end of block" "const" "ref var"
        unknown call_tmp[663632] "expr temp" "maybe param" "maybe type" "temp"
        (663635 'move' call_tmp[663632](138142 call _dom _mt[243] elt[138107]))
        (543121 'move' rhsDomain[138145](543120 'addr of' call_tmp[663632]))
        (138148 'end of statement')
        unknown call_tmp[663639] "expr temp" "maybe param" "maybe type" "temp"
        (663642 'move' call_tmp[663639](138150 call _instance _mt[243] lhsDomain[138136]))
        unknown call_tmp[663646] "expr temp" "maybe param" "maybe type" "temp"
        (663649 'move' call_tmp[663646](138154 call _instance _mt[243] rhsDomain[138145]))
        unknown call_tmp[663651] "expr temp" "maybe param" "maybe type" "temp"
        (663654 'move' call_tmp[663651](138157 call != call_tmp[663639] call_tmp[663646]))
        unknown call_tmp[663656] "expr temp" "maybe param" "maybe type" "temp"
        (663659 'move' call_tmp[663656](138165 call _cond_test call_tmp[663651]))
        if call_tmp[663656]
        {
          (138161 call = runtimeTypesDiffer[138110] 1)
          (480638 'end of statement' runtimeTypesDiffer[138110])
        }
      }
      unknown call_tmp[663661] "expr temp" "maybe param" "maybe type" "temp"
      (663664 'move' call_tmp[663661](354314 'is_subtype' _domain[125902](?) eltType[138103]))
      unknown call_tmp[663666] "expr temp" "maybe param" "maybe type" "temp"
      (663669 'move' call_tmp[663666](138216 call _cond_test call_tmp[663661]))
      if call_tmp[663666]
      {
        const lhsDist[138183] "dead at end of block" "const" "ref var"
        unknown call_tmp[663671] "expr temp" "maybe param" "maybe type" "temp"
        (663674 'move' call_tmp[663671](138182 call chpl__distributionFromDomainRuntimeType eltType[138103]))
        (543124 'move' lhsDist[138183](543123 'addr of' call_tmp[663671]))
        (138186 'end of statement')
        const rhsDist[138192] "dead at end of block" "const" "ref var"
        unknown call_tmp[663678] "expr temp" "maybe param" "maybe type" "temp"
        (663681 'move' call_tmp[663678](138189 call dist _mt[243] elt[138107]))
        (543127 'move' rhsDist[138192](543126 'addr of' call_tmp[663678]))
        (138195 'end of statement')
        unknown call_tmp[663685] "expr temp" "maybe param" "maybe type" "temp"
        (663688 'move' call_tmp[663685](138197 call _instance _mt[243] lhsDist[138183]))
        unknown call_tmp[663692] "expr temp" "maybe param" "maybe type" "temp"
        (663695 'move' call_tmp[663692](138201 call _instance _mt[243] rhsDist[138192]))
        unknown call_tmp[663697] "expr temp" "maybe param" "maybe type" "temp"
        (663700 'move' call_tmp[663697](138204 call != call_tmp[663685] call_tmp[663692]))
        unknown call_tmp[663702] "expr temp" "maybe param" "maybe type" "temp"
        (663705 'move' call_tmp[663702](138212 call _cond_test call_tmp[663697]))
        if call_tmp[663702]
        {
          (138208 call = runtimeTypesDiffer[138110] 1)
          (480640 'end of statement' runtimeTypesDiffer[138110])
        }
      }
      unknown call_tmp[663707] "expr temp" "maybe param" "maybe type" "temp"
      (663710 'move' call_tmp[663707](138239 call _cond_test runtimeTypesDiffer[138110]))
      if call_tmp[663707]
      {
        unknown copy[138223] "dead at end of block" "no auto destroy"
        (543129 'init var' copy[138223] elt[138107] eltType[138103])
        (138226 'end of statement')
        (138231 call chpl__autoDestroy elt[138107])
        (480642 'end of statement')
        (138237 '=' elt[138107] copy[138223])
        (480643 'end of statement' copy[138223])
      }
    }
    (519030 return _void[55])
  }
  function fixEltRuntimeTypesAfterTransfer[138257](ref arg a[138254]:_array[133588](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[663714] "expr temp" "maybe param" "maybe type" "temp"
    (663717 'move' call_tmp[663714](138261 call eltType _mt[243] a[138254]))
    unknown call_tmp[663719] "expr temp" "maybe param" "maybe type" "temp"
    (663722 'move' call_tmp[663719](138265 call needsInitWorkaround call_tmp[663714]))
    unknown call_tmp[663724] "expr temp" "maybe param" "maybe type" "temp"
    (663727 'move' call_tmp[663724](138311 call _cond_test call_tmp[663719]))
    if call_tmp[663724]
    {
      unknown call_tmp[663731] "expr temp" "maybe param" "maybe type" "temp"
      (663734 'move' call_tmp[663731](415689 call _dom _mt[243] a[138254]))
      unknown call_tmp[663736] "maybe param" "maybe type" "temp"
      (663739 'move' call_tmp[663736](415685 call chpl__staticAutoLocalCheck a[138254] call_tmp[663731]))
      unknown chpl__staticAutoLocalCheckSym[415684] "dead at end of block" "param"
      (543131 'init var' chpl__staticAutoLocalCheckSym[415684] call_tmp[663736])
      (480645 'end of statement')
      if chpl__staticAutoLocalCheckSym[415684]
      {
        unknown call_tmp[663743] "expr temp" "maybe param" "maybe type" "temp"
        (663746 'move' call_tmp[663743](138268 call _dom _mt[243] a[138254]))
        Forall {
          induction variables:
            
            unknown ai[138290] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663743]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138275] "dead at end of block" "ref var"
            unknown call_tmp[663748] "expr temp" "maybe param" "maybe type" "temp"
            (663751 'move' call_tmp[663748](415695 'may be local access' a[138254] ai[138290] chpl__staticAutoLocalCheckSym[415684] 1))
            (543134 'move' aa[138275](543133 'addr of' call_tmp[663748]))
            (138278 'end of statement' ai[138290])
            unknown call_tmp[663755] "expr temp" "maybe param" "maybe type" "temp"
            (663758 'move' call_tmp[663755](138282 call eltType _mt[243] a[138254]))
            (138287 call fixRuntimeType call_tmp[663755] aa[138275])
            (480647 'end of statement' aa[138275])
          }
        }
      }
      {
        unknown call_tmp[663762] "expr temp" "maybe param" "maybe type" "temp"
        (663765 'move' call_tmp[663762](415681 call _dom _mt[243] a[138254]))
        Forall {
          induction variables:
            
            unknown ai[415678] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663762]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415664] "dead at end of block" "ref var"
            unknown call_tmp[663767] "expr temp" "maybe param" "maybe type" "temp"
            (663770 'move' call_tmp[663767](415666 call a[138254] ai[415678]))
            (543137 'move' aa[415664](543136 'addr of' call_tmp[663767]))
            (415669 'end of statement' ai[415678])
            unknown call_tmp[663774] "expr temp" "maybe param" "maybe type" "temp"
            (663777 'move' call_tmp[663774](415673 call eltType _mt[243] a[138254]))
            (415671 call fixRuntimeType call_tmp[663774] aa[415664])
            (480650 'end of statement' aa[415664])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138307] "index var" "insert auto destroy"
        iterated expressions:
          a[138254]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663781] "expr temp" "maybe param" "maybe type" "temp"
          (663784 'move' call_tmp[663781](138298 call eltType _mt[243] a[138254]))
          (138303 call fixRuntimeType call_tmp[663781] aa[138307])
          (480652 'end of statement' aa[138307])
        }
      }
    }
    (519032 return _void[55])
  }
  function chpl__uncheckedArrayTransfer[138326](ref arg a[138323]:_array[133588](?), arg b[138331]:_array[133588](?), param arg kind[138334]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138337] "dead at end of block" "insert auto destroy"
    (543139 'init var' done[138337] 0)
    (138340 'end of statement')
    unknown call_tmp[663786] "expr temp" "maybe param" "maybe type" "temp"
    (663789 'move' call_tmp[663786](138346 call chpl__serializeAssignment a[138323] b[138331]))
    unknown call_tmp[663791] "expr temp" "maybe param" "maybe type" "temp"
    (663794 'move' call_tmp[663791](138347 call ! call_tmp[663786]))
    unknown call_tmp[663796] "expr temp" "maybe param" "maybe type" "temp"
    (663799 'move' call_tmp[663796](138463 call _cond_test call_tmp[663791]))
    if call_tmp[663796]
    {
      unknown call_tmp[663801] "expr temp" "maybe param" "maybe type" "temp"
      (663804 'move' call_tmp[663801](138354 call chpl__compatibleForBulkTransfer a[138323] b[138331] kind[138334]))
      unknown call_tmp[663806] "expr temp" "maybe param" "maybe type" "temp"
      (663809 'move' call_tmp[663806](138385 call _cond_test call_tmp[663801]))
      if call_tmp[663806]
      {
        unknown call_tmp[663811] "expr temp" "maybe param" "maybe type" "temp"
        (663814 'move' call_tmp[663811](138360 call chpl__bulkTransferArray a[138323] b[138331]))
        (138361 call = done[138337] call_tmp[663811])
        (480654 'end of statement' done[138337])
      }
      {
        unknown call_tmp[663816] "expr temp" "maybe param" "maybe type" "temp"
        (663819 'move' call_tmp[663816](138370 call chpl__compatibleForWidePtrBulkTransfer a[138323] b[138331] kind[138334]))
        unknown call_tmp[663821] "expr temp" "maybe param" "maybe type" "temp"
        (663824 'move' call_tmp[663821](138381 call _cond_test call_tmp[663816]))
        if call_tmp[663821]
        {
          unknown call_tmp[663826] "expr temp" "maybe param" "maybe type" "temp"
          (663829 'move' call_tmp[663826](138376 call chpl__bulkTransferPtrArray a[138323] b[138331]))
          (138377 call = done[138337] call_tmp[663826])
          (480656 'end of statement' done[138337])
        }
      }
      unknown call_tmp[663831] "expr temp" "maybe param" "maybe type" "temp"
      (663834 'move' call_tmp[663831](138459 call _cond_test done[138337]))
      if call_tmp[663831]
      {
        unknown tmp[426690] "maybe param" "temp"
        (426701 'move' tmp[426690](138397 call == kind[138334] initCopy[137983]))
        unknown call_tmp[663836] "expr temp" "maybe param" "maybe type" "temp"
        (663839 'move' call_tmp[663836](426703 call _cond_invalid tmp[426690]))
        if call_tmp[663836]
        {
          (426706 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567845] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567846] "maybe param" "temp"
        unknown call_tmp[663841] "expr temp" "maybe param" "maybe type" "temp"
        (663844 'move' call_tmp[663841](426691 call isTrue tmp[426690]))
        (567851 'move' tmp[567846](567849 call _cond_test call_tmp[663841]))
        if tmp[567846]
        {
          unknown tmp[567853] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[663848] "expr temp" "maybe param" "maybe type" "temp"
          (663851 'move' call_tmp[663848](138401 call eltType _mt[243] a[138323]))
          unknown call_tmp[663853] "expr temp" "maybe param" "maybe type" "temp"
          (663856 'move' call_tmp[663853](138405 call isPODType call_tmp[663848]))
          unknown call_tmp[663858] "expr temp" "maybe param" "maybe type" "temp"
          (663861 'move' call_tmp[663858](138406 call ! call_tmp[663853]))
          (567855 'move' tmp[567853](426694 call isTrue call_tmp[663858]))
          (567860 'move' tmp[567845](567857 '_paramFoldLogical' tmp[567846] tmp[567853]))
        }
        {
          (567865 'move' tmp[567845](567862 '_paramFoldLogical' tmp[567846] 0))
        }
        unknown call_tmp[663863] "expr temp" "maybe param" "maybe type" "temp"
        (663866 'move' call_tmp[663863](138453 call _cond_test tmp[567845]))
        if call_tmp[663863]
        {
          (138413 call initCopyAfterTransfer a[138323])
        }
        {
          unknown tmp[426648] "maybe param" "temp"
          (426659 'move' tmp[426648](138421 call == kind[138334] move[137981]))
          unknown call_tmp[663868] "expr temp" "maybe param" "maybe type" "temp"
          (663871 'move' call_tmp[663868](426661 call _cond_invalid tmp[426648]))
          if call_tmp[663868]
          {
            (426664 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567899] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[567900] "maybe param" "temp"
          unknown call_tmp[663873] "expr temp" "maybe param" "maybe type" "temp"
          (663876 'move' call_tmp[663873](426649 call isTrue tmp[426648]))
          (567905 'move' tmp[567900](567903 call _cond_test call_tmp[663873]))
          if tmp[567900]
          {
            unknown tmp[426669] "maybe param" "temp"
            unknown call_tmp[663880] "expr temp" "maybe param" "maybe type" "temp"
            (663883 'move' call_tmp[663880](138425 call eltType _mt[243] a[138323]))
            (426680 'move' tmp[426669](354315 'is_subtype' _array[133588](?) call_tmp[663880]))
            unknown call_tmp[663885] "expr temp" "maybe param" "maybe type" "temp"
            (663888 'move' call_tmp[663885](426682 call _cond_invalid tmp[426669]))
            if call_tmp[663885]
            {
              (426685 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[567872] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[567873] "maybe param" "temp"
            unknown call_tmp[663890] "expr temp" "maybe param" "maybe type" "temp"
            (663893 'move' call_tmp[663890](426670 call isTrue tmp[426669]))
            (567878 'move' tmp[567873](567876 call _cond_test call_tmp[663890]))
            if tmp[567873]
            {
              (567883 'move' tmp[567872](567880 '_paramFoldLogical' tmp[567873] 1))
            }
            {
              unknown tmp[567885] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[663897] "expr temp" "maybe param" "maybe type" "temp"
              (663900 'move' call_tmp[663897](138433 call eltType _mt[243] a[138323]))
              unknown call_tmp[663902] "expr temp" "maybe param" "maybe type" "temp"
              (663905 'move' call_tmp[663902](354316 'is_subtype' _domain[125902](?) call_tmp[663897]))
              (567887 'move' tmp[567885](426674 call isTrue call_tmp[663902]))
              (567892 'move' tmp[567872](567889 '_paramFoldLogical' tmp[567873] tmp[567885]))
            }
            unknown tmp[567907] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (567909 'move' tmp[567907](426652 call isTrue tmp[567872]))
            (567914 'move' tmp[567899](567911 '_paramFoldLogical' tmp[567900] tmp[567907]))
          }
          {
            (567919 'move' tmp[567899](567916 '_paramFoldLogical' tmp[567900] 0))
          }
          unknown call_tmp[663907] "expr temp" "maybe param" "maybe type" "temp"
          (663910 'move' call_tmp[663907](138449 call _cond_test tmp[567899]))
          if call_tmp[663907]
          {
            (138446 call fixEltRuntimeTypesAfterTransfer a[138323])
          }
        }
      }
    }
    unknown call_tmp[663912] "expr temp" "maybe param" "maybe type" "temp"
    (663915 'move' call_tmp[663912](138468 call ! done[138337]))
    unknown call_tmp[663917] "expr temp" "maybe param" "maybe type" "temp"
    (663920 'move' call_tmp[663917](138478 call _cond_test call_tmp[663912]))
    if call_tmp[663917]
    {
      (138475 call chpl__transferArray a[138323] b[138331] kind[138334])
    }
    (519034 return _void[55])
  }
  function chpl__compatibleForWidePtrBulkTransfer[138488](arg a[138486]:_any[178](?), arg b[138490]:_any[178](?), param arg kind[138496] :
  assign[137985] =
  assign[137985]) param : _unknown[51]
  {
    unknown ret[519038] "RVV" "param" "temp"
    unknown call_tmp[663922] "expr temp" "maybe param" "maybe type" "temp"
    (663925 'move' call_tmp[663922](138500 call ! useBulkPtrTransfer[113732]))
    unknown call_tmp[663927] "expr temp" "maybe param" "maybe type" "temp"
    (663930 'move' call_tmp[663927](138505 call _cond_test call_tmp[663922]))
    if call_tmp[663927]
    {
      (519043 'move' ret[519038](519042 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519036] _end_chpl__compatibleForWidePtrBulkTransfer[519036]
    }
    unknown tmp[426711] "maybe param" "temp"
    unknown call_tmp[663934] "expr temp" "maybe param" "maybe type" "temp"
    (663937 'move' call_tmp[663934](138512 call _value _mt[243] a[138486]))
    (426722 'move' tmp[426711](138519 call(138515 call (partial) isDefaultRectangular _mt[243] call_tmp[663934])))
    unknown call_tmp[663941] "expr temp" "maybe param" "maybe type" "temp"
    (663944 'move' call_tmp[663941](426724 call _cond_invalid tmp[426711]))
    if call_tmp[663941]
    {
      (426727 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567926] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567927] "maybe param" "temp"
    unknown call_tmp[663946] "expr temp" "maybe param" "maybe type" "temp"
    (663949 'move' call_tmp[663946](426712 call isTrue tmp[426711]))
    (567932 'move' tmp[567927](567930 call _cond_test call_tmp[663946]))
    if tmp[567927]
    {
      unknown tmp[567934] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663953] "expr temp" "maybe param" "maybe type" "temp"
      (663956 'move' call_tmp[663953](138521 call _value _mt[243] b[138490]))
      unknown call_tmp[663960] "expr temp" "maybe param" "maybe type" "temp"
      (663963 'move' call_tmp[663960](138528 call(138524 call (partial) isDefaultRectangular _mt[243] call_tmp[663953])))
      (567936 'move' tmp[567934](426715 call isTrue call_tmp[663960]))
      (567941 'move' tmp[567926](567938 '_paramFoldLogical' tmp[567927] tmp[567934]))
    }
    {
      (567946 'move' tmp[567926](567943 '_paramFoldLogical' tmp[567927] 0))
    }
    unknown call_tmp[663965] "expr temp" "maybe param" "maybe type" "temp"
    (663968 'move' call_tmp[663965](138531 call ! tmp[567926]))
    unknown call_tmp[663970] "expr temp" "maybe param" "maybe type" "temp"
    (663973 'move' call_tmp[663970](138536 call _cond_test call_tmp[663965]))
    if call_tmp[663970]
    {
      (519048 'move' ret[519038](519047 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519036] _end_chpl__compatibleForWidePtrBulkTransfer[519036]
    }
    unknown call_tmp[663977] "expr temp" "maybe param" "maybe type" "temp"
    (663980 'move' call_tmp[663977](138542 call eltType _mt[243] a[138486]))
    unknown call_tmp[663984] "expr temp" "maybe param" "maybe type" "temp"
    (663987 'move' call_tmp[663984](138546 call eltType _mt[243] b[138490]))
    unknown call_tmp[663989] "expr temp" "maybe param" "maybe type" "temp"
    (663992 'move' call_tmp[663989](138549 call != call_tmp[663977] call_tmp[663984]))
    unknown call_tmp[663994] "expr temp" "maybe param" "maybe type" "temp"
    (663997 'move' call_tmp[663994](138554 call _cond_test call_tmp[663989]))
    if call_tmp[663994]
    {
      (519053 'move' ret[519038](519052 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519036] _end_chpl__compatibleForWidePtrBulkTransfer[519036]
    }
    unknown call_tmp[664001] "expr temp" "maybe param" "maybe type" "temp"
    (664004 'move' call_tmp[664001](138561 call eltType _mt[243] a[138486]))
    unknown call_tmp[664006] "expr temp" "maybe param" "maybe type" "temp"
    (664009 'move' call_tmp[664006](138565 call isClass call_tmp[664001]))
    unknown call_tmp[664011] "expr temp" "maybe param" "maybe type" "temp"
    (664014 'move' call_tmp[664011](138566 call ! call_tmp[664006]))
    unknown call_tmp[664016] "expr temp" "maybe param" "maybe type" "temp"
    (664019 'move' call_tmp[664016](138571 call _cond_test call_tmp[664011]))
    if call_tmp[664016]
    {
      (519058 'move' ret[519038](519057 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519036] _end_chpl__compatibleForWidePtrBulkTransfer[519036]
    }
    unknown call_tmp[664023] "expr temp" "maybe param" "maybe type" "temp"
    (664026 'move' call_tmp[664023](138578 call eltType _mt[243] a[138486]))
    unknown call_tmp[664028] "expr temp" "maybe param" "maybe type" "temp"
    (664031 'move' call_tmp[664028](138582 call isOwnedClass call_tmp[664023]))
    unknown call_tmp[664033] "expr temp" "maybe param" "maybe type" "temp"
    (664036 'move' call_tmp[664033](138586 call _cond_test call_tmp[664028]))
    if call_tmp[664033]
    {
      (519063 'move' ret[519038](519062 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519036] _end_chpl__compatibleForWidePtrBulkTransfer[519036]
    }
    unknown call_tmp[664040] "expr temp" "maybe param" "maybe type" "temp"
    (664043 'move' call_tmp[664040](138593 call eltType _mt[243] a[138486]))
    unknown call_tmp[664045] "expr temp" "maybe param" "maybe type" "temp"
    (664048 'move' call_tmp[664045](138597 call isSharedClass call_tmp[664040]))
    unknown call_tmp[664050] "expr temp" "maybe param" "maybe type" "temp"
    (664053 'move' call_tmp[664050](138601 call _cond_test call_tmp[664045]))
    if call_tmp[664050]
    {
      (519068 'move' ret[519038](519067 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519036] _end_chpl__compatibleForWidePtrBulkTransfer[519036]
    }
    (519073 'move' ret[519038](519072 'deref' 1))
    label _end_chpl__compatibleForWidePtrBulkTransfer[519036]
    (519040 return ret[519038])
  }
  function chpl__bulkTransferPtrArray[138619](ref arg a[138616]:_array[133588](?), arg b[138624]:_array[133588](?)) : _unknown[51] "inline"
  {
    unknown ret[519077] "RVV" "temp"
    unknown call_tmp[664057] "maybe param" "maybe type" "temp"
    (664060 'move' call_tmp[664057](138628 call _dom _mt[243] a[138616]))
    const aDom[138631] "dead at end of block" "const" "insert auto destroy"
    (543141 'init var' aDom[138631] call_tmp[664057])
    (138634 'end of statement')
    unknown call_tmp[664064] "maybe param" "maybe type" "temp"
    (664067 'move' call_tmp[664064](138637 call _dom _mt[243] b[138624]))
    const bDom[138640] "dead at end of block" "const" "insert auto destroy"
    (543143 'init var' bDom[138640] call_tmp[664064])
    (138643 'end of statement')
    unknown call_tmp[664069] "expr temp" "maybe param" "maybe type" "temp"
    (664072 'move' call_tmp[664069](138646 call != aDom[138631] bDom[138640]))
    unknown call_tmp[664074] "expr temp" "maybe param" "maybe type" "temp"
    (664077 'move' call_tmp[664074](138651 call _cond_test call_tmp[664069]))
    if call_tmp[664074]
    {
      (519082 'move' ret[519077](519081 'deref' 0))
      gotoReturn _end_chpl__bulkTransferPtrArray[519075] _end_chpl__bulkTransferPtrArray[519075]
    }
    unknown call_tmp[664081] "expr temp" "maybe param" "maybe type" "temp"
    (664084 'move' call_tmp[664081](138676 call low _mt[243] aDom[138631]))
    unknown call_tmp[664086] "expr temp" "maybe param" "maybe type" "temp"
    (664089 'move' call_tmp[664086](138680 call a[138616] call_tmp[664081]))
    unknown call_tmp[664091] "expr temp" "maybe param" "maybe type" "temp"
    (664094 'move' call_tmp[664091](138681 'is wide pointer' call_tmp[664086]))
    unknown call_tmp[664096] "expr temp" "maybe param" "maybe type" "temp"
    (664099 'move' call_tmp[664096](138692 call _cond_test call_tmp[664091]))
    if call_tmp[664096]
    {
      unknown call_tmp[664101] "expr temp" "maybe param" "maybe type" "temp"
      (664104 'move' call_tmp[664101](138688 call chpl__bulkTransferArray a[138616] aDom[138631] b[138624] bDom[138640]))
      (519087 'move' ret[519077](519086 'deref' call_tmp[664101]))
      gotoReturn _end_chpl__bulkTransferPtrArray[519075] _end_chpl__bulkTransferPtrArray[519075]
      (480672 'end of statement' aDom[138631] bDom[138640])
    }
    (519092 'move' ret[519077](519091 'deref' 0))
    label _end_chpl__bulkTransferPtrArray[519075]
    (519079 return ret[519077])
  }
  function chpl__bulkTransferArray[138711](ref arg a[138708]:_array[133588](?), arg b[138718]:_array[133588](?)) : _unknown[51] "inline"
  {
    unknown ret[519096] "RVV" "temp"
    unknown call_tmp[664108] "expr temp" "maybe param" "maybe type" "temp"
    (664111 'move' call_tmp[664108](461505 call _dom _mt[243] a[138708]))
    unknown call_tmp[664115] "expr temp" "maybe param" "maybe type" "temp"
    (664118 'move' call_tmp[664115](461511 call _dom _mt[243] b[138718]))
    unknown call_tmp[664120] "expr temp" "maybe param" "maybe type" "temp"
    (664123 'move' call_tmp[664120](138727 call chpl__bulkTransferArray a[138708] call_tmp[664108] b[138718] call_tmp[664115]))
    (519101 'move' ret[519096](519100 'deref' call_tmp[664120]))
    (519098 return ret[519096])
  }
  function chpl__bulkTransferArray[138741](ref arg a[138738]:_array[133588](?), arg AD[138744]:_domain[125902](?), const  ref arg b[138750]:_array[133588](?), arg BD[138754]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[519105] "RVV" "temp"
    unknown call_tmp[664127] "expr temp" "maybe param" "maybe type" "temp"
    (664130 'move' call_tmp[664127](138759 call _value _mt[243] a[138738]))
    unknown call_tmp[664134] "expr temp" "maybe param" "maybe type" "temp"
    (664137 'move' call_tmp[664134](138765 call _value _mt[243] b[138750]))
    unknown call_tmp[664139] "expr temp" "maybe param" "maybe type" "temp"
    (664142 'move' call_tmp[664139](138769 call chpl__bulkTransferArray call_tmp[664127] AD[138744] call_tmp[664134] BD[138754]))
    (519110 'move' ret[519105](519109 'deref' call_tmp[664139]))
    (519107 return ret[519105])
  }
  function chpl__bulkTransferArray[138779](arg destClass[138777]:_any[178](?), arg destDom[138782]:_domain[125902](?), arg srcClass[138785]:_any[178](?), arg srcDom[138788]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[519116] "RVV" "temp"
    unknown success[138792] "dead at end of block" "insert auto destroy"
    (543145 'init var' success[138792] 0)
    (138795 'end of statement')
    function bulkTransferDebug[138803](arg msg[138800]:string[26]) : _unknown[51] "inline" "no return value for void"
    {
      unknown call_tmp[664144] "expr temp" "maybe param" "maybe type" "temp"
      (664147 'move' call_tmp[664144](138828 call _cond_test debugBulkTransfer[113717]))
      if call_tmp[664144]
      {
        (138826 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138800])
      }
      (519112 return _void[55])
    }
    (138855 call bulkTransferDebug "in chpl__bulkTransferArray")
    (480679 'end of statement')
    unknown call_tmp[664149] "expr temp" "maybe param" "maybe type" "temp"
    (664152 'move' call_tmp[664149](138883 call canResolveMethod module=[255] Reflection[224882] destClass[138777] "doiBulkTransferFromKnown" destDom[138782] srcClass[138785] srcDom[138788]))
    unknown call_tmp[664154] "expr temp" "maybe param" "maybe type" "temp"
    (664157 'move' call_tmp[664154](139119 call _cond_test call_tmp[664149]))
    if call_tmp[664154]
    {
      (138903 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (480680 'end of statement')
      unknown call_tmp[664161] "expr temp" "maybe param" "maybe type" "temp"
      (664164 'move' call_tmp[664161](138915 call(138908 call (partial) doiBulkTransferFromKnown _mt[243] destClass[138777]) destDom[138782] srcClass[138785] srcDom[138788]))
      (138916 call = success[138792] call_tmp[664161])
      (480681 'end of statement' success[138792])
    }
    {
      unknown call_tmp[664166] "expr temp" "maybe param" "maybe type" "temp"
      (664169 'move' call_tmp[664166](138945 call canResolveMethod module=[255] Reflection[224882] srcClass[138785] "doiBulkTransferToKnown" srcDom[138788] destClass[138777] destDom[138782]))
      unknown call_tmp[664171] "expr temp" "maybe param" "maybe type" "temp"
      (664174 'move' call_tmp[664171](139114 call _cond_test call_tmp[664166]))
      if call_tmp[664171]
      {
        (138965 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (480683 'end of statement')
        unknown call_tmp[664178] "expr temp" "maybe param" "maybe type" "temp"
        (664181 'move' call_tmp[664178](138977 call(138970 call (partial) doiBulkTransferToKnown _mt[243] srcClass[138785]) srcDom[138788] destClass[138777] destDom[138782]))
        (138978 call = success[138792] call_tmp[664178])
        (480684 'end of statement' success[138792])
      }
      {
        unknown call_tmp[664183] "expr temp" "maybe param" "maybe type" "temp"
        (664186 'move' call_tmp[664183](139007 call canResolveMethod module=[255] Reflection[224882] destClass[138777] "doiBulkTransferFromAny" destDom[138782] srcClass[138785] srcDom[138788]))
        unknown call_tmp[664188] "expr temp" "maybe param" "maybe type" "temp"
        (664191 'move' call_tmp[664188](139109 call _cond_test call_tmp[664183]))
        if call_tmp[664188]
        {
          (139027 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (480686 'end of statement')
          unknown call_tmp[664195] "expr temp" "maybe param" "maybe type" "temp"
          (664198 'move' call_tmp[664195](139039 call(139032 call (partial) doiBulkTransferFromAny _mt[243] destClass[138777]) destDom[138782] srcClass[138785] srcDom[138788]))
          (139040 call = success[138792] call_tmp[664195])
          (480687 'end of statement' success[138792])
        }
        {
          unknown call_tmp[664200] "expr temp" "maybe param" "maybe type" "temp"
          (664203 'move' call_tmp[664200](139069 call canResolveMethod module=[255] Reflection[224882] srcClass[138785] "doiBulkTransferToAny" srcDom[138788] destClass[138777] destDom[138782]))
          unknown call_tmp[664205] "expr temp" "maybe param" "maybe type" "temp"
          (664208 'move' call_tmp[664205](139105 call _cond_test call_tmp[664200]))
          if call_tmp[664205]
          {
            (139089 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (480689 'end of statement')
            unknown call_tmp[664212] "expr temp" "maybe param" "maybe type" "temp"
            (664215 'move' call_tmp[664212](139101 call(139094 call (partial) doiBulkTransferToAny _mt[243] srcClass[138785]) srcDom[138788] destClass[138777] destDom[138782]))
            (139102 call = success[138792] call_tmp[664212])
            (480690 'end of statement' success[138792])
          }
          (360224 'referenced modules list' Reflection[224882])
        }
        (360217 'referenced modules list' Reflection[224882])
      }
      (360210 'referenced modules list' Reflection[224882])
    }
    unknown call_tmp[664217] "expr temp" "maybe param" "maybe type" "temp"
    (664220 'move' call_tmp[664217](139167 call _cond_test success[138792]))
    if call_tmp[664217]
    {
      (139144 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139165 call bulkTransferDebug "bulk transfer did not happen")
    }
    (519121 'move' ret[519116](519120 'deref' success[138792]))
    gotoReturn _end_chpl__bulkTransferArray[519114] _end_chpl__bulkTransferArray[519114]
    (480694 'end of statement' success[138792])
    label _end_chpl__bulkTransferArray[519114]
    (519118 return ret[519116])
    (360203 'referenced modules list' Reflection[224882])
  }
  function chpl__transferArray[139186](ref arg a[139183]:_array[133588](?), const  ref arg b[139188]:_any[178](?), param arg kind[139194] :
  assign[137985] =
  assign[137985]) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    unknown tmp[426753] "maybe param" "temp"
    unknown call_tmp[664224] "expr temp" "maybe param" "maybe type" "temp"
    (664227 'move' call_tmp[664224](139204 call eltType _mt[243] a[139183]))
    unknown call_tmp[664229] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (664232 'move' call_tmp[664229](139208 'typeof' b[139188]))
    (426764 'move' tmp[426753](139209 call == call_tmp[664224] call_tmp[664229]))
    unknown call_tmp[664234] "expr temp" "maybe param" "maybe type" "temp"
    (664237 'move' call_tmp[664234](426766 call _cond_invalid tmp[426753]))
    if call_tmp[664234]
    {
      (426769 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567980] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567981] "maybe param" "temp"
    unknown call_tmp[664239] "expr temp" "maybe param" "maybe type" "temp"
    (664242 'move' call_tmp[664239](426754 call isTrue tmp[426753]))
    (567986 'move' tmp[567981](567984 call _cond_test call_tmp[664239]))
    if tmp[567981]
    {
      (567991 'move' tmp[567980](567988 '_paramFoldLogical' tmp[567981] 1))
    }
    {
      unknown tmp[426774] "maybe param" "temp"
      unknown call_tmp[664246] "expr temp" "maybe param" "maybe type" "temp"
      (664249 'move' call_tmp[664246](139213 call eltType _mt[243] a[139183]))
      (426785 'move' tmp[426774](139217 call _isPrimitiveType call_tmp[664246]))
      unknown call_tmp[664251] "expr temp" "maybe param" "maybe type" "temp"
      (664254 'move' call_tmp[664251](426787 call _cond_invalid tmp[426774]))
      if call_tmp[664251]
      {
        (426790 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567953] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567954] "maybe param" "temp"
      unknown call_tmp[664256] "expr temp" "maybe param" "maybe type" "temp"
      (664259 'move' call_tmp[664256](426775 call isTrue tmp[426774]))
      (567959 'move' tmp[567954](567957 call _cond_test call_tmp[664256]))
      if tmp[567954]
      {
        unknown tmp[567961] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664261] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (664264 'move' call_tmp[664261](139220 'typeof' b[139188]))
        unknown call_tmp[664266] "expr temp" "maybe param" "maybe type" "temp"
        (664269 'move' call_tmp[664266](139222 call _isPrimitiveType call_tmp[664261]))
        (567963 'move' tmp[567961](426778 call isTrue call_tmp[664266]))
        (567968 'move' tmp[567953](567965 '_paramFoldLogical' tmp[567954] tmp[567961]))
      }
      {
        (567973 'move' tmp[567953](567970 '_paramFoldLogical' tmp[567954] 0))
      }
      unknown tmp[567993] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567995 'move' tmp[567993](426758 call isTrue tmp[567953]))
      (568000 'move' tmp[567980](567997 '_paramFoldLogical' tmp[567981] tmp[567993]))
    }
    unknown call_tmp[664271] "expr temp" "maybe param" "maybe type" "temp"
    (664274 'move' call_tmp[664271](140109 call _cond_test tmp[567980]))
    if call_tmp[664271]
    {
      unknown tmp[426732] "maybe param" "temp"
      (426743 'move' tmp[426732](139232 call == kind[139194] move[137981]))
      unknown call_tmp[664276] "expr temp" "maybe param" "maybe type" "temp"
      (664279 'move' call_tmp[664276](426745 call _cond_invalid tmp[426732]))
      if call_tmp[664276]
      {
        (426748 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[568007] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568008] "maybe param" "temp"
      unknown call_tmp[664281] "expr temp" "maybe param" "maybe type" "temp"
      (664284 'move' call_tmp[664281](426733 call isTrue tmp[426732]))
      (568013 'move' tmp[568008](568011 call _cond_test call_tmp[664281]))
      if tmp[568008]
      {
        (568018 'move' tmp[568007](568015 '_paramFoldLogical' tmp[568008] 1))
      }
      {
        unknown tmp[568020] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664286] "expr temp" "maybe param" "maybe type" "temp"
        (664289 'move' call_tmp[664286](139239 call == kind[139194] initCopy[137983]))
        (568022 'move' tmp[568020](426737 call isTrue call_tmp[664286]))
        (568027 'move' tmp[568007](568024 '_paramFoldLogical' tmp[568008] tmp[568020]))
      }
      unknown call_tmp[664291] "expr temp" "maybe param" "maybe type" "temp"
      (664294 'move' call_tmp[664291](139354 call _cond_test tmp[568007]))
      if call_tmp[664291]
      {
        unknown call_tmp[664298] "expr temp" "maybe param" "maybe type" "temp"
        (664301 'move' call_tmp[664298](139245 call eltType _mt[243] a[139183]))
        unknown call_tmp[664303] "expr temp" "maybe param" "maybe type" "temp"
        (664306 'move' call_tmp[664303](139249 call needsInitWorkaround call_tmp[664298]))
        unknown call_tmp[664308] "expr temp" "maybe param" "maybe type" "temp"
        (664311 'move' call_tmp[664308](139319 call _cond_test call_tmp[664303]))
        if call_tmp[664308]
        {
          unknown call_tmp[664315] "expr temp" "maybe param" "maybe type" "temp"
          (664318 'move' call_tmp[664315](415739 call _dom _mt[243] a[139183]))
          unknown call_tmp[664320] "maybe param" "maybe type" "temp"
          (664323 'move' call_tmp[664320](415735 call chpl__staticAutoLocalCheck a[139183] call_tmp[664315]))
          unknown chpl__staticAutoLocalCheckSym[415734] "dead at end of block" "param"
          (543147 'init var' chpl__staticAutoLocalCheckSym[415734] call_tmp[664320])
          (480698 'end of statement')
          if chpl__staticAutoLocalCheckSym[415734]
          {
            unknown call_tmp[664327] "expr temp" "maybe param" "maybe type" "temp"
            (664330 'move' call_tmp[664327](139252 call _dom _mt[243] a[139183]))
            Forall {
              induction variables:
                
                unknown ai[139286] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664327]
              shadow variables:
                b[139256] 'in' intent outer var b[139188]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[139265] "dead at end of block" "ref var"
                unknown call_tmp[664332] "expr temp" "maybe param" "maybe type" "temp"
                (664335 'move' call_tmp[664332](415745 'may be local access' a[139183] ai[139286] chpl__staticAutoLocalCheckSym[415734] 1))
                (543150 'move' aa[139265](543149 'addr of' call_tmp[664332]))
                (139268 'end of statement')
                unknown call_tmp[664339] "maybe param" "maybe type" "temp"
                (664342 'move' call_tmp[664339](139271 call eltType _mt[243] a[139183]))
                unknown copy[139275] "dead at end of block" "no auto destroy"
                (543152 'init var' copy[139275] b[139256] call_tmp[664339])
                (139278 'end of statement' ai[139286] b[139256])
                (139283 '=' aa[139265] copy[139275])
                (480701 'end of statement' aa[139265] copy[139275])
              }
            }
          }
          {
            unknown call_tmp[664346] "expr temp" "maybe param" "maybe type" "temp"
            (664349 'move' call_tmp[664346](415724 call _dom _mt[243] a[139183]))
            Forall {
              induction variables:
                
                unknown ai[415721] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664346]
              shadow variables:
                b[415728] 'in' intent outer var b[139188]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[415703] "dead at end of block" "ref var"
                unknown call_tmp[664351] "expr temp" "maybe param" "maybe type" "temp"
                (664354 'move' call_tmp[664351](415705 call a[139183] ai[415721]))
                (543155 'move' aa[415703](543154 'addr of' call_tmp[664351]))
                (415708 'end of statement')
                unknown call_tmp[664358] "maybe param" "maybe type" "temp"
                (664361 'move' call_tmp[664358](415712 call eltType _mt[243] a[139183]))
                unknown copy[415709] "dead at end of block" "no auto destroy"
                (543157 'init var' copy[415709] b[415728] call_tmp[664358])
                (415716 'end of statement' ai[415721] b[415728])
                (415717 '=' aa[415703] copy[415709])
                (480706 'end of statement' aa[415703] copy[415709])
              }
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139315] "index var" "insert auto destroy"
            iterated expressions:
              a[139183]
            shadow variables:
              b[139293] 'in' intent outer var b[139188]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown call_tmp[664365] "maybe param" "maybe type" "temp"
              (664368 'move' call_tmp[664365](139299 call eltType _mt[243] a[139183]))
              unknown copy[139303] "dead at end of block" "no auto destroy"
              (543159 'init var' copy[139303] b[139293] call_tmp[664365])
              (139306 'end of statement' b[139293])
              (139312 '=' aa[139315] copy[139303])
              (480710 'end of statement' aa[139315] copy[139303])
            }
          }
        }
      }
      {
        unknown call_tmp[664370] "expr temp" "maybe param" "maybe type" "temp"
        (664373 'move' call_tmp[664370](139329 call == kind[139194] assign[137985]))
        unknown call_tmp[664375] "expr temp" "maybe param" "maybe type" "temp"
        (664378 'move' call_tmp[664375](139350 call _cond_test call_tmp[664370]))
        if call_tmp[664375]
        {
          Forall {
            induction variables:
              
              unknown aa[139346] "index var" "insert auto destroy"
            iterated expressions:
              a[139183]
            shadow variables:
              b[139334] 'in' intent outer var b[139188]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139341 call = aa[139346] b[139334])
              (480713 'end of statement' aa[139346] b[139334])
            }
          }
        }
      }
    }
    {
      unknown call_tmp[664380] "expr temp" "maybe param" "maybe type" "temp"
      (664383 'move' call_tmp[664380](139364 call chpl__serializeAssignment a[139183] b[139188]))
      unknown call_tmp[664385] "expr temp" "maybe param" "maybe type" "temp"
      (664388 'move' call_tmp[664385](140105 call _cond_test call_tmp[664380]))
      if call_tmp[664385]
      {
        unknown call_tmp[664390] "expr temp" "maybe param" "maybe type" "temp"
        (664393 'move' call_tmp[664390](139370 call == kind[139194] move[137981]))
        unknown call_tmp[664395] "expr temp" "maybe param" "maybe type" "temp"
        (664398 'move' call_tmp[664395](139851 call _cond_test call_tmp[664390]))
        if call_tmp[664395]
        {
          unknown call_tmp[664402] "expr temp" "maybe param" "maybe type" "temp"
          (664405 'move' call_tmp[664402](139374 call eltType _mt[243] a[139183]))
          unknown call_tmp[664407] "expr temp" "maybe param" "maybe type" "temp"
          (664410 'move' call_tmp[664407](139378 call needsInitWorkaround call_tmp[664402]))
          unknown call_tmp[664412] "expr temp" "maybe param" "maybe type" "temp"
          (664415 'move' call_tmp[664412](139572 call _cond_test call_tmp[664407]))
          if call_tmp[664412]
          {
            {
              unknown _indexOfInterest[139434] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139435] "expr temp" "temp"
              unknown call_tmp[664419] "expr temp" "maybe param" "maybe type" "temp"
              (664422 'move' call_tmp[664419](139444 call _dom _mt[243] a[139183]))
              unknown call_tmp[664424] "expr temp" "maybe param" "maybe type" "temp"
              (664427 'move' call_tmp[664424](139447 call _getIterator call_tmp[664419]))
              unknown call_tmp[664429] "expr temp" "maybe param" "maybe type" "temp"
              (664432 'move' call_tmp[664429](139451 call _getIterator b[139188]))
              (139453 'move' _iterator[139435](139390 call _build_tuple call_tmp[664424] call_tmp[664429]))
              Defer
              {
                {
                  (139483 call _freeIterator _iterator[139435])
                }
              }
              { scopeless type
                (139458 'move' _indexOfInterest[139434](139455 call iteratorIndex _iterator[139435]))
              }
              ForLoop[139436]
              {
                (139463 call _check_tuple_var_decl _indexOfInterest[139434] 2)
                (480717 'end of statement')
                unknown ai[139469] "index var" "insert auto destroy"
                (480718 'end of statement')
                (139471 'move' ai[139469](139467 call _indexOfInterest[139434] 0))
                (480719 'end of statement' ai[139469])
                unknown bb[139476] "index var" "insert auto destroy"
                (480721 'end of statement')
                (139478 'move' bb[139476](139474 call _indexOfInterest[139434] 1))
                (480722 'end of statement' bb[139476])
                {
                  unknown aa[139395] "dead at end of block" "ref var"
                  unknown call_tmp[664434] "expr temp" "maybe param" "maybe type" "temp"
                  (664437 'move' call_tmp[664434](139394 call a[139183] ai[139469]))
                  (543162 'move' aa[139395](543161 'addr of' call_tmp[664434]))
                  (139398 'end of statement' ai[139469])
                  unknown call_tmp[664439] "expr temp" "maybe param" "maybe type" "temp"
                  (664442 'move' call_tmp[664439](139422 'steal' bb[139476]))
                  (139423 '=' aa[139395] call_tmp[664439])
                  (480725 'end of statement' aa[139395] bb[139476])
                  unknown call_tmp[664446] "expr temp" "maybe param" "maybe type" "temp"
                  (664449 'move' call_tmp[664446](139427 call eltType _mt[243] a[139183]))
                  (139432 call fixRuntimeType call_tmp[664446] aa[139395])
                  (480728 'end of statement' aa[139395])
                }
                label _continueLabel[139439]
                _indexOfInterest[139434]
                _iterator[139435]
              }
              label _breakLabel[139440]
            }
          }
          {
            {
              unknown _indexOfInterest[139519] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139520] "expr temp" "temp"
              unknown call_tmp[664451] "expr temp" "maybe param" "maybe type" "temp"
              (664454 'move' call_tmp[664451](139529 call _getIterator a[139183]))
              unknown call_tmp[664456] "expr temp" "maybe param" "maybe type" "temp"
              (664459 'move' call_tmp[664456](139532 call _getIterator b[139188]))
              (139534 'move' _iterator[139520](139499 call _build_tuple call_tmp[664451] call_tmp[664456]))
              Defer
              {
                {
                  (139564 call _freeIterator _iterator[139520])
                }
              }
              { scopeless type
                (139539 'move' _indexOfInterest[139519](139536 call iteratorIndex _iterator[139520]))
              }
              ForLoop[139521]
              {
                (139544 call _check_tuple_var_decl _indexOfInterest[139519] 2)
                (480731 'end of statement')
                unknown aa[139550] "index var" "insert auto destroy"
                (480732 'end of statement')
                (139552 'move' aa[139550](139548 call _indexOfInterest[139519] 0))
                (480733 'end of statement' aa[139550])
                unknown bb[139557] "index var" "insert auto destroy"
                (480735 'end of statement')
                (139559 'move' bb[139557](139555 call _indexOfInterest[139519] 1))
                (480736 'end of statement' bb[139557])
                {
                  unknown call_tmp[664461] "expr temp" "maybe param" "maybe type" "temp"
                  (664464 'move' call_tmp[664461](139506 'steal' bb[139557]))
                  (139507 '=' aa[139550] call_tmp[664461])
                  (480738 'end of statement' aa[139550] bb[139557])
                  unknown call_tmp[664468] "expr temp" "maybe param" "maybe type" "temp"
                  (664471 'move' call_tmp[664468](139512 call eltType _mt[243] a[139183]))
                  (139517 call fixRuntimeType call_tmp[664468] aa[139550])
                  (480741 'end of statement' aa[139550])
                }
                label _continueLabel[139524]
                _indexOfInterest[139519]
                _iterator[139520]
              }
              label _breakLabel[139525]
            }
          }
        }
        {
          unknown call_tmp[664473] "expr temp" "maybe param" "maybe type" "temp"
          (664476 'move' call_tmp[664473](139582 call == kind[139194] initCopy[137983]))
          unknown call_tmp[664478] "expr temp" "maybe param" "maybe type" "temp"
          (664481 'move' call_tmp[664478](139846 call _cond_test call_tmp[664473]))
          if call_tmp[664478]
          {
            unknown call_tmp[664485] "expr temp" "maybe param" "maybe type" "temp"
            (664488 'move' call_tmp[664485](139586 call eltType _mt[243] a[139183]))
            unknown call_tmp[664490] "expr temp" "maybe param" "maybe type" "temp"
            (664493 'move' call_tmp[664490](139590 call needsInitWorkaround call_tmp[664485]))
            unknown call_tmp[664495] "expr temp" "maybe param" "maybe type" "temp"
            (664498 'move' call_tmp[664495](139762 call _cond_test call_tmp[664490]))
            if call_tmp[664495]
            {
              {
                unknown _indexOfInterest[139627] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139628] "expr temp" "temp"
                unknown call_tmp[664502] "expr temp" "maybe param" "maybe type" "temp"
                (664505 'move' call_tmp[664502](139637 call _dom _mt[243] a[139183]))
                unknown call_tmp[664507] "expr temp" "maybe param" "maybe type" "temp"
                (664510 'move' call_tmp[664507](139640 call _getIterator call_tmp[664502]))
                unknown call_tmp[664512] "expr temp" "maybe param" "maybe type" "temp"
                (664515 'move' call_tmp[664512](139644 call _getIterator b[139188]))
                (139646 'move' _iterator[139628](139602 call _build_tuple call_tmp[664507] call_tmp[664512]))
                Defer
                {
                  {
                    (139676 call _freeIterator _iterator[139628])
                  }
                }
                { scopeless type
                  (139651 'move' _indexOfInterest[139627](139648 call iteratorIndex _iterator[139628]))
                }
                ForLoop[139629]
                {
                  (139656 call _check_tuple_var_decl _indexOfInterest[139627] 2)
                  (480744 'end of statement')
                  unknown ai[139662] "index var" "insert auto destroy"
                  (480745 'end of statement')
                  (139664 'move' ai[139662](139660 call _indexOfInterest[139627] 0))
                  (480746 'end of statement' ai[139662])
                  unknown bb[139669] "index var" "insert auto destroy"
                  (480748 'end of statement')
                  (139671 'move' bb[139669](139667 call _indexOfInterest[139627] 1))
                  (480749 'end of statement' bb[139669])
                  {
                    unknown aa[139607] "dead at end of block" "ref var"
                    unknown call_tmp[664517] "expr temp" "maybe param" "maybe type" "temp"
                    (664520 'move' call_tmp[664517](139606 call a[139183] ai[139662]))
                    (543165 'move' aa[139607](543164 'addr of' call_tmp[664517]))
                    (139610 'end of statement')
                    unknown call_tmp[664524] "maybe param" "maybe type" "temp"
                    (664527 'move' call_tmp[664524](139613 call eltType _mt[243] a[139183]))
                    unknown copy[139617] "dead at end of block" "no auto destroy"
                    (543167 'init var' copy[139617] b[139188] call_tmp[664524])
                    (139620 'end of statement' ai[139662])
                    (139625 '=' aa[139607] copy[139617])
                    (480752 'end of statement' aa[139607] copy[139617])
                  }
                  label _continueLabel[139632]
                  _indexOfInterest[139627]
                  _iterator[139628]
                }
                label _breakLabel[139633]
              }
            }
            {
              {
                unknown _indexOfInterest[139709] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139710] "expr temp" "temp"
                unknown call_tmp[664529] "expr temp" "maybe param" "maybe type" "temp"
                (664532 'move' call_tmp[664529](139719 call _getIterator a[139183]))
                unknown call_tmp[664534] "expr temp" "maybe param" "maybe type" "temp"
                (664537 'move' call_tmp[664534](139722 call _getIterator b[139188]))
                (139724 'move' _iterator[139710](139692 call _build_tuple call_tmp[664529] call_tmp[664534]))
                Defer
                {
                  {
                    (139754 call _freeIterator _iterator[139710])
                  }
                }
                { scopeless type
                  (139729 'move' _indexOfInterest[139709](139726 call iteratorIndex _iterator[139710]))
                }
                ForLoop[139711]
                {
                  (139734 call _check_tuple_var_decl _indexOfInterest[139709] 2)
                  (480756 'end of statement')
                  unknown aa[139740] "index var" "insert auto destroy"
                  (480757 'end of statement')
                  (139742 'move' aa[139740](139738 call _indexOfInterest[139709] 0))
                  (480758 'end of statement' aa[139740])
                  unknown bb[139747] "index var" "insert auto destroy"
                  (480760 'end of statement')
                  (139749 'move' bb[139747](139745 call _indexOfInterest[139709] 1))
                  (480761 'end of statement' bb[139747])
                  {
                    unknown call_tmp[664541] "maybe param" "maybe type" "temp"
                    (664544 'move' call_tmp[664541](139694 call eltType _mt[243] a[139183]))
                    unknown copy[139698] "dead at end of block" "no auto destroy"
                    (543169 'init var' copy[139698] b[139188] call_tmp[664541])
                    (139701 'end of statement')
                    (139707 '=' aa[139740] copy[139698])
                    (480763 'end of statement' aa[139740] copy[139698])
                  }
                  label _continueLabel[139714]
                  _indexOfInterest[139709]
                  _iterator[139710]
                }
                label _breakLabel[139715]
              }
            }
          }
          {
            unknown call_tmp[664546] "expr temp" "maybe param" "maybe type" "temp"
            (664549 'move' call_tmp[664546](139772 call == kind[139194] assign[137985]))
            unknown call_tmp[664551] "expr temp" "maybe param" "maybe type" "temp"
            (664554 'move' call_tmp[664551](139842 call _cond_test call_tmp[664546]))
            if call_tmp[664551]
            {
              {
                unknown _indexOfInterest[139789] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139790] "expr temp" "temp"
                unknown call_tmp[664556] "expr temp" "maybe param" "maybe type" "temp"
                (664559 'move' call_tmp[664556](139799 call _getIterator a[139183]))
                unknown call_tmp[664561] "expr temp" "maybe param" "maybe type" "temp"
                (664564 'move' call_tmp[664561](139802 call _getIterator b[139188]))
                (139804 'move' _iterator[139790](139782 call _build_tuple call_tmp[664556] call_tmp[664561]))
                Defer
                {
                  {
                    (139834 call _freeIterator _iterator[139790])
                  }
                }
                { scopeless type
                  (139809 'move' _indexOfInterest[139789](139806 call iteratorIndex _iterator[139790]))
                }
                ForLoop[139791]
                {
                  (139814 call _check_tuple_var_decl _indexOfInterest[139789] 2)
                  (480767 'end of statement')
                  unknown aa[139820] "index var" "insert auto destroy"
                  (480768 'end of statement')
                  (139822 'move' aa[139820](139818 call _indexOfInterest[139789] 0))
                  (480769 'end of statement' aa[139820])
                  unknown bb[139827] "index var" "insert auto destroy"
                  (480771 'end of statement')
                  (139829 'move' bb[139827](139825 call _indexOfInterest[139789] 1))
                  (480772 'end of statement' bb[139827])
                  {
                    (139785 call = aa[139820] bb[139827])
                    (480774 'end of statement' aa[139820] bb[139827])
                  }
                  label _continueLabel[139794]
                  _indexOfInterest[139789]
                  _iterator[139790]
                }
                label _breakLabel[139795]
              }
            }
          }
        }
      }
      {
        unknown call_tmp[664566] "expr temp" "maybe param" "maybe type" "temp"
        (664569 'move' call_tmp[664566](139862 call == kind[139194] move[137981]))
        unknown call_tmp[664571] "expr temp" "maybe param" "maybe type" "temp"
        (664574 'move' call_tmp[664571](140099 call _cond_test call_tmp[664566]))
        if call_tmp[664571]
        {
          unknown call_tmp[664578] "expr temp" "maybe param" "maybe type" "temp"
          (664581 'move' call_tmp[664578](139866 call eltType _mt[243] a[139183]))
          unknown call_tmp[664583] "expr temp" "maybe param" "maybe type" "temp"
          (664586 'move' call_tmp[664583](139870 call needsInitWorkaround call_tmp[664578]))
          unknown call_tmp[664588] "expr temp" "maybe param" "maybe type" "temp"
          (664591 'move' call_tmp[664588](139956 call _cond_test call_tmp[664583]))
          if call_tmp[664588]
          {
            unknown call_tmp[664595] "expr temp" "maybe param" "maybe type" "temp"
            (664598 'move' call_tmp[664595](415786 call _dom _mt[243] a[139183]))
            unknown call_tmp[664600] "maybe param" "maybe type" "temp"
            (664603 'move' call_tmp[664600](415782 call chpl__staticAutoLocalCheck a[139183] call_tmp[664595]))
            unknown chpl__staticAutoLocalCheckSym[415781] "dead at end of block" "param"
            (543171 'init var' chpl__staticAutoLocalCheckSym[415781] call_tmp[664600])
            (480777 'end of statement')
            if chpl__staticAutoLocalCheckSym[415781]
            {
              unknown call_tmp[664607] "expr temp" "maybe param" "maybe type" "temp"
              (664610 'move' call_tmp[664607](139878 call _dom _mt[243] a[139183]))
              Forall {
                induction variables:
                  
                  unknown ai[139913] "index var" "insert auto destroy"
                  
                  unknown bb[139915] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664607]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[139888] "dead at end of block" "ref var"
                    unknown call_tmp[664612] "expr temp" "maybe param" "maybe type" "temp"
                    (664615 'move' call_tmp[664612](415792 'may be local access' a[139183] ai[139913] chpl__staticAutoLocalCheckSym[415781] 1))
                    (543174 'move' aa[139888](543173 'addr of' call_tmp[664612]))
                    (139891 'end of statement' ai[139913])
                    unknown call_tmp[664617] "expr temp" "maybe param" "maybe type" "temp"
                    (664620 'move' call_tmp[664617](139899 'steal' bb[139915]))
                    (139900 '=' aa[139888] call_tmp[664617])
                    (480779 'end of statement' aa[139888] bb[139915])
                    unknown call_tmp[664624] "expr temp" "maybe param" "maybe type" "temp"
                    (664627 'move' call_tmp[664624](139904 call eltType _mt[243] a[139183]))
                    (139909 call fixRuntimeType call_tmp[664624] aa[139888])
                    (480782 'end of statement' aa[139888])
                  }
                }
              }
            }
            {
              unknown call_tmp[664631] "expr temp" "maybe param" "maybe type" "temp"
              (664634 'move' call_tmp[664631](415777 call _dom _mt[243] a[139183]))
              Forall {
                induction variables:
                  
                  unknown ai[415772] "index var" "insert auto destroy"
                  
                  unknown bb[415774] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664631]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[415754] "dead at end of block" "ref var"
                    unknown call_tmp[664636] "expr temp" "maybe param" "maybe type" "temp"
                    (664639 'move' call_tmp[664636](415756 call a[139183] ai[415772]))
                    (543177 'move' aa[415754](543176 'addr of' call_tmp[664636]))
                    (415759 'end of statement' ai[415772])
                    unknown call_tmp[664641] "expr temp" "maybe param" "maybe type" "temp"
                    (664644 'move' call_tmp[664641](415762 'steal' bb[415774]))
                    (415760 '=' aa[415754] call_tmp[664641])
                    (480785 'end of statement' aa[415754] bb[415774])
                    unknown call_tmp[664648] "expr temp" "maybe param" "maybe type" "temp"
                    (664651 'move' call_tmp[664648](415767 call eltType _mt[243] a[139183]))
                    (415765 call fixRuntimeType call_tmp[664648] aa[415754])
                    (480788 'end of statement' aa[415754])
                  }
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139950] "index var" "insert auto destroy"
                
                unknown bb[139952] "index var" "insert auto destroy"
              iterated expressions:
                a[139183]
                b[139188]
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown call_tmp[664653] "expr temp" "maybe param" "maybe type" "temp"
                  (664656 'move' call_tmp[664653](139935 'steal' bb[139952]))
                  (139936 '=' aa[139950] call_tmp[664653])
                  (480790 'end of statement' aa[139950] bb[139952])
                  unknown call_tmp[664660] "expr temp" "maybe param" "maybe type" "temp"
                  (664663 'move' call_tmp[664660](139941 call eltType _mt[243] a[139183]))
                  (139946 call fixRuntimeType call_tmp[664660] aa[139950])
                  (480793 'end of statement' aa[139950])
                }
              }
            }
          }
        }
        {
          unknown call_tmp[664665] "expr temp" "maybe param" "maybe type" "temp"
          (664668 'move' call_tmp[664665](139966 call == kind[139194] initCopy[137983]))
          unknown call_tmp[664670] "expr temp" "maybe param" "maybe type" "temp"
          (664673 'move' call_tmp[664670](140094 call _cond_test call_tmp[664665]))
          if call_tmp[664670]
          {
            unknown call_tmp[664677] "expr temp" "maybe param" "maybe type" "temp"
            (664680 'move' call_tmp[664677](139970 call eltType _mt[243] a[139183]))
            unknown call_tmp[664682] "expr temp" "maybe param" "maybe type" "temp"
            (664685 'move' call_tmp[664682](139974 call needsInitWorkaround call_tmp[664677]))
            unknown call_tmp[664687] "expr temp" "maybe param" "maybe type" "temp"
            (664690 'move' call_tmp[664687](140054 call _cond_test call_tmp[664682]))
            if call_tmp[664687]
            {
              unknown call_tmp[664694] "expr temp" "maybe param" "maybe type" "temp"
              (664697 'move' call_tmp[664694](415833 call _dom _mt[243] a[139183]))
              unknown call_tmp[664699] "maybe param" "maybe type" "temp"
              (664702 'move' call_tmp[664699](415829 call chpl__staticAutoLocalCheck a[139183] call_tmp[664694]))
              unknown chpl__staticAutoLocalCheckSym[415828] "dead at end of block" "param"
              (543179 'init var' chpl__staticAutoLocalCheckSym[415828] call_tmp[664699])
              (480795 'end of statement')
              if chpl__staticAutoLocalCheckSym[415828]
              {
                unknown call_tmp[664706] "expr temp" "maybe param" "maybe type" "temp"
                (664709 'move' call_tmp[664706](139982 call _dom _mt[243] a[139183]))
                Forall {
                  induction variables:
                    
                    unknown ai[140014] "index var" "insert auto destroy"
                    
                    unknown bb[140016] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664706]
                    b[139188]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[139992] "dead at end of block" "ref var"
                      unknown call_tmp[664711] "expr temp" "maybe param" "maybe type" "temp"
                      (664714 'move' call_tmp[664711](415839 'may be local access' a[139183] ai[140014] chpl__staticAutoLocalCheckSym[415828] 1))
                      (543182 'move' aa[139992](543181 'addr of' call_tmp[664711]))
                      (139995 'end of statement')
                      unknown call_tmp[664718] "maybe param" "maybe type" "temp"
                      (664721 'move' call_tmp[664718](139998 call eltType _mt[243] a[139183]))
                      unknown copy[140002] "dead at end of block" "no auto destroy"
                      (543184 'init var' copy[140002] bb[140016] call_tmp[664718])
                      (140005 'end of statement' ai[140014] bb[140016])
                      (140010 '=' aa[139992] copy[140002])
                      (480798 'end of statement' aa[139992] copy[140002])
                    }
                  }
                }
              }
              {
                unknown call_tmp[664725] "expr temp" "maybe param" "maybe type" "temp"
                (664728 'move' call_tmp[664725](415824 call _dom _mt[243] a[139183]))
                Forall {
                  induction variables:
                    
                    unknown ai[415819] "index var" "insert auto destroy"
                    
                    unknown bb[415821] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664725]
                    b[139188]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[415801] "dead at end of block" "ref var"
                      unknown call_tmp[664730] "expr temp" "maybe param" "maybe type" "temp"
                      (664733 'move' call_tmp[664730](415803 call a[139183] ai[415819]))
                      (543187 'move' aa[415801](543186 'addr of' call_tmp[664730]))
                      (415806 'end of statement')
                      unknown call_tmp[664737] "maybe param" "maybe type" "temp"
                      (664740 'move' call_tmp[664737](415810 call eltType _mt[243] a[139183]))
                      unknown copy[415807] "dead at end of block" "no auto destroy"
                      (543189 'init var' copy[415807] bb[415821] call_tmp[664737])
                      (415814 'end of statement' ai[415819] bb[415821])
                      (415815 '=' aa[415801] copy[415807])
                      (480803 'end of statement' aa[415801] copy[415807])
                    }
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140048] "index var" "insert auto destroy"
                  
                  unknown bb[140050] "index var" "insert auto destroy"
                iterated expressions:
                  a[139183]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown call_tmp[664744] "maybe param" "maybe type" "temp"
                    (664747 'move' call_tmp[664744](140031 call eltType _mt[243] a[139183]))
                    unknown copy[140035] "dead at end of block" "no auto destroy"
                    (543191 'init var' copy[140035] bb[140050] call_tmp[664744])
                    (140038 'end of statement' bb[140050])
                    (140044 '=' aa[140048] copy[140035])
                    (480807 'end of statement' aa[140048] copy[140035])
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[664749] "expr temp" "maybe param" "maybe type" "temp"
            (664752 'move' call_tmp[664749](140064 call == kind[139194] assign[137985]))
            unknown call_tmp[664754] "expr temp" "maybe param" "maybe type" "temp"
            (664757 'move' call_tmp[664754](140090 call _cond_test call_tmp[664749]))
            if call_tmp[664754]
            {
              Forall {
                induction variables:
                  
                  unknown aa[140084] "index var" "insert auto destroy"
                  
                  unknown bb[140086] "index var" "insert auto destroy"
                iterated expressions:
                  a[139183]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140078 call = aa[140084] bb[140086])
                    (480810 'end of statement' aa[140084] bb[140086])
                  }
                }
              }
            }
          }
        }
      }
    }
    (519125 return _void[55])
  }
  {
    (139201 call <=(139198 'lifetime_of' a[139183])(139200 'lifetime_of' b[139188]))
  }
  function chpl__transferArray[140126](ref arg a[140123]:_array[133588](?), param arg b[140128]:_any[178](?), param arg kind[140134] :
  assign[137985] =
  assign[137985]) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140145] "index var" "insert auto destroy"
      iterated expressions:
        a[140123]
      shadow variables:
      other variables
        forall body
      {
        (140141 call = aa[140145] b[140128])
        (480813 'end of statement' aa[140145])
      }
    }
    (519127 return _void[55])
  }
  function =[140159](ref arg a[140156]:_array[133588](?), arg b[140162]:_domain[125902](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664761] "expr temp" "maybe param" "maybe type" "temp"
    (664764 'move' call_tmp[664761](140166 call rank _mt[243] a[140156]))
    unknown call_tmp[664768] "expr temp" "maybe param" "maybe type" "temp"
    (664771 'move' call_tmp[664768](140170 call rank _mt[243] b[140162]))
    unknown call_tmp[664773] "expr temp" "maybe param" "maybe type" "temp"
    (664776 'move' call_tmp[664773](140173 call != call_tmp[664761] call_tmp[664768]))
    unknown call_tmp[664778] "expr temp" "maybe param" "maybe type" "temp"
    (664781 'move' call_tmp[664778](140180 call _cond_test call_tmp[664773]))
    if call_tmp[664778]
    {
      (140178 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426795] "maybe param" "temp"
    (426806 'move' tmp[426795](140189 call isAssociativeDom b[140162]))
    unknown call_tmp[664783] "expr temp" "maybe param" "maybe type" "temp"
    (664786 'move' call_tmp[664783](426808 call _cond_invalid tmp[426795]))
    if call_tmp[664783]
    {
      (426811 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568034] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568035] "maybe param" "temp"
    unknown call_tmp[664788] "expr temp" "maybe param" "maybe type" "temp"
    (664791 'move' call_tmp[664788](426796 call isTrue tmp[426795]))
    (568040 'move' tmp[568035](568038 call _cond_test call_tmp[664788]))
    if tmp[568035]
    {
      unknown tmp[568042] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664793] "expr temp" "maybe param" "maybe type" "temp"
      (664796 'move' call_tmp[664793](140193 call isRectangularArr a[140156]))
      (568044 'move' tmp[568042](426799 call isTrue call_tmp[664793]))
      (568049 'move' tmp[568034](568046 '_paramFoldLogical' tmp[568035] tmp[568042]))
    }
    {
      (568054 'move' tmp[568034](568051 '_paramFoldLogical' tmp[568035] 0))
    }
    unknown call_tmp[664798] "expr temp" "maybe param" "maybe type" "temp"
    (664801 'move' call_tmp[664798](140217 call _cond_test tmp[568034]))
    if call_tmp[664798]
    {
      (140215 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140226 call chpl__transferArray a[140156] b[140162])
    (519129 return _void[55])
  }
  function =[140238](arg a[140235]:_array[133588](?), arg b[140244]:range[64316](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664805] "expr temp" "maybe param" "maybe type" "temp"
    (664808 'move' call_tmp[664805](140248 call rank _mt[243] a[140235]))
    unknown call_tmp[664810] "expr temp" "maybe param" "maybe type" "temp"
    (664813 'move' call_tmp[664810](140252 call == call_tmp[664805] 1))
    unknown call_tmp[664815] "expr temp" "maybe param" "maybe type" "temp"
    (664818 'move' call_tmp[664815](140281 call _cond_test call_tmp[664810]))
    if call_tmp[664815]
    {
      (140258 call chpl__transferArray a[140235] b[140244])
    }
    {
      (140279 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (519131 return _void[55])
  }
  function =[140298](ref arg a[140295]:_array[133588](?), arg b[140300]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140306 call chpl__transferArray a[140295] b[140300])
    (519133 return _void[55])
  }
  function helpInitArrFromTuple[140315](ref arg j[140313]:_any[178](?), param arg rank[140318]:int(64)[13], ref arg a[140324]:_array[133588](?), arg b[140328]:_tuple[56199](?), param arg kind[140332]:_tElt[137987]) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[664822] "expr temp" "maybe param" "maybe type" "temp"
    (664825 'move' call_tmp[664822](140342 call _dom _mt[243] a[140324]))
    unknown idxType[140361] "dead at end of block" "insert auto destroy" "type variable"(140345 call idxType _mt[243] call_tmp[664822])
    unknown call_tmp[664831] "expr temp" "maybe param" "maybe type" "temp"
    (664834 'move' call_tmp[664831](543196 call _dom _mt[243] a[140324]))
    (543200 'move' idxType[140361](543194 call idxType _mt[243] call_tmp[664831]))
    unknown call_tmp[664840] "expr temp" "maybe param" "maybe type" "temp"
    (664843 'move' call_tmp[664840](140350 call _dom _mt[243] a[140324]))
    unknown call_tmp[664847] "expr temp" "maybe param" "maybe type" "temp"
    (664850 'move' call_tmp[664847](140353 call intIdxType _mt[243] call_tmp[664840]))
    unknown strType[140358] "dead at end of block" "insert auto destroy" "type variable"(140357 call chpl__signedType call_tmp[664847])
    unknown call_tmp[664854] "expr temp" "maybe param" "maybe type" "temp"
    (664857 'move' call_tmp[664854](543207 call _dom _mt[243] a[140324]))
    unknown call_tmp[664861] "expr temp" "maybe param" "maybe type" "temp"
    (664864 'move' call_tmp[664861](543205 call intIdxType _mt[243] call_tmp[664854]))
    (543211 'move' strType[140358](543203 call chpl__signedType call_tmp[664861]))
    unknown call_tmp[664868] "expr temp" "maybe param" "maybe type" "temp"
    (664871 'move' call_tmp[664868](140366 call _dom _mt[243] a[140324]))
    unknown call_tmp[664877] "expr temp" "maybe param" "maybe type" "temp"
    (664880 'move' call_tmp[664877](140373 call rank _mt[243] a[140324]))
    unknown call_tmp[664882] "expr temp" "maybe param" "maybe type" "temp"
    (664885 'move' call_tmp[664882](140377 call - call_tmp[664877] rank[140318]))
    unknown call_tmp[664887] "expr temp" "maybe param" "maybe type" "temp"
    (664890 'move' call_tmp[664887](140380 call(140369 call (partial) dim _mt[243] call_tmp[664868]) call_tmp[664882]))
    unknown call_tmp[664894] "maybe param" "maybe type" "temp"
    (664897 'move' call_tmp[664894](140381 call stride _mt[243] call_tmp[664887]))
    const stride[140384] "dead at end of block" "const" "insert auto destroy"
    (543213 'init var' stride[140384] call_tmp[664894])
    unknown call_tmp[664901] "expr temp" "maybe param" "maybe type" "temp"
    (664904 'move' call_tmp[664901](140388 call _dom _mt[243] a[140324]))
    unknown call_tmp[664910] "expr temp" "maybe param" "maybe type" "temp"
    (664913 'move' call_tmp[664910](140395 call rank _mt[243] a[140324]))
    unknown call_tmp[664915] "expr temp" "maybe param" "maybe type" "temp"
    (664918 'move' call_tmp[664915](140399 call - call_tmp[664910] rank[140318]))
    unknown call_tmp[664920] "expr temp" "maybe param" "maybe type" "temp"
    (664923 'move' call_tmp[664920](140402 call(140391 call (partial) dim _mt[243] call_tmp[664901]) call_tmp[664915]))
    unknown call_tmp[664927] "maybe param" "maybe type" "temp"
    (664930 'move' call_tmp[664927](140403 call firstAsInt _mt[243] call_tmp[664920]))
    const start[140406] "dead at end of block" "const" "insert auto destroy"
    (543215 'init var' start[140406] call_tmp[664927])
    (140409 'end of statement')
    unknown call_tmp[664932] "expr temp" "maybe param" "maybe type" "temp"
    (664935 'move' call_tmp[664932](140412 call == rank[140318] 1))
    unknown call_tmp[664937] "expr temp" "maybe param" "maybe type" "temp"
    (664940 'move' call_tmp[664937](140704 call _cond_test call_tmp[664932]))
    if call_tmp[664937]
    {
      {
        unknown i[140569] "dead at end of block" "insert auto destroy"
        (543217 'init var' i[140569] 0)
        (480822 'end of statement')
        unknown tmp[140570] "maybe param" "temp"
        unknown call_tmp[664944] "expr temp" "maybe param" "maybe type" "temp"
        (664947 'move' call_tmp[664944](140416 call size _mt[243] b[140328]))
        unknown call_tmp[664949] "expr temp" "maybe param" "maybe type" "temp"
        (664952 'move' call_tmp[664949](140420 call - call_tmp[664944] 1))
        (140582 'move' tmp[140570](140580 call chpl_compute_low_param_loop_bound 0 call_tmp[664949]))
        unknown tmp[140571] "maybe param" "temp"
        unknown call_tmp[664956] "expr temp" "maybe param" "maybe type" "temp"
        (664959 'move' call_tmp[664956](140589 call size _mt[243] b[140328]))
        unknown call_tmp[664961] "expr temp" "maybe param" "maybe type" "temp"
        (664964 'move' call_tmp[664961](140587 call - call_tmp[664956] 1))
        (140595 'move' tmp[140571](140593 call chpl_compute_high_param_loop_bound 0 call_tmp[664961]))
        unknown tmp[140572] "maybe param" "temp"
        (140598 'move' tmp[140572] 1)
        ParamForLoop[140600]
        { i[140569] tmp[140570] tmp[140571] tmp[140572]
          {
            unknown call_tmp[664968] "expr temp" "maybe param" "maybe type" "temp"
            (664971 'move' call_tmp[664968](140426 call rank _mt[243] a[140324]))
            unknown call_tmp[664973] "expr temp" "maybe param" "maybe type" "temp"
            (664976 'move' call_tmp[664973](140430 call - call_tmp[664968] rank[140318]))
            unknown call_tmp[664978] "expr temp" "maybe param" "maybe type" "temp"
            (664981 'move' call_tmp[664978](140433 call j[140313] call_tmp[664973]))
            unknown call_tmp[664983] "expr temp" "maybe param" "maybe type" "temp"
            (664986 'move' call_tmp[664983](140439 call _cast strType[140358] start[140406]))
            unknown call_tmp[664988] "expr temp" "maybe param" "maybe type" "temp"
            (664991 'move' call_tmp[664988](140443 call * i[140569] stride[140384]))
            unknown call_tmp[664993] "expr temp" "maybe param" "maybe type" "temp"
            (664996 'move' call_tmp[664993](140445 call + call_tmp[664983] call_tmp[664988]))
            unknown call_tmp[664998] "expr temp" "maybe param" "maybe type" "temp"
            (665001 'move' call_tmp[664998](140447 call chpl__intToIdx idxType[140361] call_tmp[664993]))
            (140448 call = call_tmp[664978] call_tmp[664998])
            (480823 'end of statement' idxType[140361] strType[140358] start[140406] i[140569] stride[140384])
            unknown dst[140456] "dead at end of block" "ref var"
            unknown call_tmp[665003] "expr temp" "maybe param" "maybe type" "temp"
            (665006 'move' call_tmp[665003](140455 call a[140324] j[140313]))
            (543220 'move' dst[140456](543219 'addr of' call_tmp[665003]))
            (140459 'end of statement')
            const src[140464] "dead at end of block" "const" "ref var"
            unknown call_tmp[665008] "expr temp" "maybe param" "maybe type" "temp"
            (665011 'move' call_tmp[665008](140463 call b[140328] i[140569]))
            (543223 'move' src[140464](543222 'addr of' call_tmp[665008]))
            (140467 'end of statement' i[140569])
            unknown call_tmp[665013] "expr temp" "maybe param" "maybe type" "temp"
            (665016 'move' call_tmp[665013](140473 call == kind[140332] move[137981]))
            unknown call_tmp[665018] "expr temp" "maybe param" "maybe type" "temp"
            (665021 'move' call_tmp[665018](140564 call _cond_test call_tmp[665013]))
            if call_tmp[665018]
            {
              unknown call_tmp[665023] "expr temp" "maybe param" "maybe type" "temp"
              (665026 'move' call_tmp[665023](140478 call isArray dst[140456]))
              unknown call_tmp[665028] "expr temp" "maybe param" "maybe type" "temp"
              (665031 'move' call_tmp[665028](140514 call _cond_test call_tmp[665023]))
              if call_tmp[665028]
              {
                unknown call_tmp[665035] "expr temp" "maybe param" "maybe type" "temp"
                (665038 'move' call_tmp[665035](140481 call eltType _mt[243] a[140324]))
                unknown call_tmp[665040] "maybe param" "maybe type" "temp"
                (665043 'move' call_tmp[665040](140486 call chpl__coerceMove call_tmp[665035] src[140464]))
                unknown newArr[140487] "dead at end of block" "no auto destroy" "no copy"
                (543225 'init var' newArr[140487] call_tmp[665040])
                (140490 'end of statement' src[140464])
                (140496 '=' dst[140456] newArr[140487])
                (480831 'end of statement' dst[140456] newArr[140487])
              }
              {
                (140502 '=' dst[140456] src[140464])
                (480834 'end of statement' dst[140456] src[140464])
                unknown call_tmp[665047] "expr temp" "maybe param" "maybe type" "temp"
                (665050 'move' call_tmp[665047](140507 call eltType _mt[243] a[140324]))
                (140512 call fixRuntimeType call_tmp[665047] dst[140456])
                (480837 'end of statement' dst[140456])
              }
            }
            {
              unknown call_tmp[665052] "expr temp" "maybe param" "maybe type" "temp"
              (665055 'move' call_tmp[665052](140524 call == kind[140332] initCopy[137983]))
              unknown call_tmp[665057] "expr temp" "maybe param" "maybe type" "temp"
              (665060 'move' call_tmp[665057](140559 call _cond_test call_tmp[665052]))
              if call_tmp[665057]
              {
                unknown call_tmp[665064] "maybe param" "maybe type" "temp"
                (665067 'move' call_tmp[665064](140527 call eltType _mt[243] a[140324]))
                unknown copy[140531] "dead at end of block" "no auto destroy"
                (543227 'init var' copy[140531] src[140464] call_tmp[665064])
                (140534 'end of statement' src[140464])
                (140540 '=' dst[140456] copy[140531])
                (480840 'end of statement' dst[140456] copy[140531])
              }
              {
                unknown call_tmp[665069] "expr temp" "maybe param" "maybe type" "temp"
                (665072 'move' call_tmp[665069](140547 call == kind[140332] assign[137985]))
                unknown call_tmp[665074] "expr temp" "maybe param" "maybe type" "temp"
                (665077 'move' call_tmp[665074](140555 call _cond_test call_tmp[665069]))
                if call_tmp[665074]
                {
                  (140551 call = dst[140456] src[140464])
                  (480843 'end of statement' dst[140456] src[140464])
                }
              }
            }
          }
        }
        label _unused_continueLabel[140574]
        label _breakLabel[140573]
      }
    }
    {
      {
        unknown i[140663] "dead at end of block" "insert auto destroy"
        (543229 'init var' i[140663] 0)
        (480846 'end of statement')
        unknown tmp[140664] "maybe param" "temp"
        unknown call_tmp[665081] "expr temp" "maybe param" "maybe type" "temp"
        (665084 'move' call_tmp[665081](140612 call size _mt[243] b[140328]))
        unknown call_tmp[665086] "expr temp" "maybe param" "maybe type" "temp"
        (665089 'move' call_tmp[665086](140616 call - call_tmp[665081] 1))
        (140676 'move' tmp[140664](140674 call chpl_compute_low_param_loop_bound 0 call_tmp[665086]))
        unknown tmp[140665] "maybe param" "temp"
        unknown call_tmp[665093] "expr temp" "maybe param" "maybe type" "temp"
        (665096 'move' call_tmp[665093](140683 call size _mt[243] b[140328]))
        unknown call_tmp[665098] "expr temp" "maybe param" "maybe type" "temp"
        (665101 'move' call_tmp[665098](140681 call - call_tmp[665093] 1))
        (140689 'move' tmp[140665](140687 call chpl_compute_high_param_loop_bound 0 call_tmp[665098]))
        unknown tmp[140666] "maybe param" "temp"
        (140692 'move' tmp[140666] 1)
        ParamForLoop[140694]
        { i[140663] tmp[140664] tmp[140665] tmp[140666]
          {
            unknown call_tmp[665105] "expr temp" "maybe param" "maybe type" "temp"
            (665108 'move' call_tmp[665105](140622 call rank _mt[243] a[140324]))
            unknown call_tmp[665110] "expr temp" "maybe param" "maybe type" "temp"
            (665113 'move' call_tmp[665110](140626 call - call_tmp[665105] rank[140318]))
            unknown call_tmp[665115] "expr temp" "maybe param" "maybe type" "temp"
            (665118 'move' call_tmp[665115](140629 call j[140313] call_tmp[665110]))
            unknown call_tmp[665120] "expr temp" "maybe param" "maybe type" "temp"
            (665123 'move' call_tmp[665120](140635 call _cast strType[140358] start[140406]))
            unknown call_tmp[665125] "expr temp" "maybe param" "maybe type" "temp"
            (665128 'move' call_tmp[665125](140639 call * i[140663] stride[140384]))
            unknown call_tmp[665130] "expr temp" "maybe param" "maybe type" "temp"
            (665133 'move' call_tmp[665130](140641 call + call_tmp[665120] call_tmp[665125]))
            unknown call_tmp[665135] "expr temp" "maybe param" "maybe type" "temp"
            (665138 'move' call_tmp[665135](140643 call chpl__intToIdx idxType[140361] call_tmp[665130]))
            (140644 call = call_tmp[665115] call_tmp[665135])
            (480847 'end of statement' idxType[140361] strType[140358] start[140406] i[140663] stride[140384])
            unknown call_tmp[665140] "expr temp" "maybe param" "maybe type" "temp"
            (665143 'move' call_tmp[665140](140653 call - rank[140318] 1))
            unknown call_tmp[665145] "expr temp" "maybe param" "maybe type" "temp"
            (665148 'move' call_tmp[665145](140659 call b[140328] i[140663]))
            (140661 call helpInitArrFromTuple j[140313] call_tmp[665140] a[140324] call_tmp[665145] kind[140332])
            (480853 'end of statement' i[140663])
          }
        }
        label _unused_continueLabel[140668]
        label _breakLabel[140667]
      }
    }
    (519135 return _void[55])
  }
  {
    (140339 call <(140336 'lifetime_of' a[140324])(140338 'lifetime_of' b[140328]))
  }
  function initArrFromTuple[140719](ref arg a[140716]:_array[133588](?), arg b[140722]:_tuple[56199](?), param arg kind[140726]:_tElt[137987]) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140742] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665152] "expr temp" "maybe param" "maybe type" "temp"
    (665155 'move' call_tmp[665152](140730 call rank _mt[243] a[140716]))
    unknown call_tmp[665159] "expr temp" "maybe param" "maybe type" "temp"
    (665162 'move' call_tmp[665159](140734 call _dom _mt[243] a[140716]))
    unknown call_tmp[665166] "expr temp" "maybe param" "maybe type" "temp"
    (665169 'move' call_tmp[665166](140737 call idxType _mt[243] call_tmp[665159]))
    unknown call_tmp[665171] "expr temp" "maybe param" "maybe type" "temp"
    (665174 'move' call_tmp[665171](140740 call * call_tmp[665152] call_tmp[665166]))
    (543231 'default init var' j[140742] call_tmp[665171])
    (140745 'end of statement')
    unknown call_tmp[665178] "expr temp" "maybe param" "maybe type" "temp"
    (665181 'move' call_tmp[665178](140751 call rank _mt[243] a[140716]))
    (140757 call helpInitArrFromTuple j[140742] call_tmp[665178] a[140716] b[140722] kind[140726])
    (480855 'end of statement' j[140742])
    (519137 return _void[55])
  }
  function =[140769](ref arg a[140766]:_array[133588](?), arg b[140772]:_tuple[56199](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (140787 call initArrFromTuple a[140766] b[140772] assign[137985])
    (519139 return _void[55])
  }
  where {
    (140778 call isRectangularArr a[140766])
  }
  function _desync[140799](arg t[140796]:_syncvar[84944](?)) type : _unknown[51]
  {
    unknown ret[519143] "RVV" "temp" "type variable"
    unknown x[140802] "dead at end of block" "insert auto destroy"
    (543233 'default init var' x[140802] t[140796])
    (140805 'end of statement')
    unknown call_tmp[665185] "expr temp" "maybe param" "maybe type" "temp"
    (665188 'move' call_tmp[665185](140808 call valType _mt[243] x[140802]))
    (519148 'move' ret[519143](519147 'deref' call_tmp[665185]))
    gotoReturn _end__desync[519141] _end__desync[519141]
    (480858 'end of statement' x[140802])
    label _end__desync[519141]
    (519145 return ret[519143])
  }
  function _desync[140821](arg t[140818]:_singlevar[87253](?)) type : _unknown[51]
  {
    unknown ret[519154] "RVV" "temp" "type variable"
    unknown x[140824] "dead at end of block" "insert auto destroy"
    (543235 'default init var' x[140824] t[140818])
    (140827 'end of statement')
    unknown call_tmp[665192] "expr temp" "maybe param" "maybe type" "temp"
    (665195 'move' call_tmp[665192](140830 call valType _mt[243] x[140824]))
    (519159 'move' ret[519154](519158 'deref' call_tmp[665192]))
    gotoReturn _end__desync[519152] _end__desync[519152]
    (480860 'end of statement' x[140824])
    label _end__desync[519152]
    (519156 return ret[519154])
  }
  function _desync[140841](arg t[140839]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[519165] "RVV" "temp" "type variable"
    (519170 'move' ret[519165](519169 'deref' t[140839]))
    (519167 return ret[519165])
  }
  function desyncEltType[140855](arg t[140852]:_array[133588](?)) type : _unknown[51] "private"
  {
    unknown ret[519174] "RVV" "temp" "type variable"
    unknown eltType[140861] "dead at end of block" "insert auto destroy" "type variable"(140860 call chpl__eltTypeFromArrayRuntimeType t[140852])
    (543240 'move' eltType[140861](543238 call chpl__eltTypeFromArrayRuntimeType t[140852]))
    (480863 'end of statement')
    unknown call_tmp[665197] "expr temp" "maybe param" "maybe type" "temp"
    (665200 'move' call_tmp[665197](140868 call _desync eltType[140861]))
    (519179 'move' ret[519174](519178 'deref' call_tmp[665197]))
    gotoReturn _end_desyncEltType[519172] _end_desyncEltType[519172]
    (480864 'end of statement' eltType[140861])
    label _end_desyncEltType[519172]
    (519176 return ret[519174])
  }
  function =[140881](ref arg a[140878]:_array[133588](?), arg b[140890] :
  unknown call_tmp[665204] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140901] "index var" "insert auto destroy"
      iterated expressions:
        a[140878]
      shadow variables:
      other variables
        forall body
      {
        (140897 call = e[140901] b[140890])
        (480866 'end of statement' e[140901])
      }
    }
    (519183 return _void[55])
  }
  function +=[140915](arg a[140912]:_array[133588](?), arg b[140924] :
  unknown call_tmp[665211] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140935] "index var" "insert auto destroy"
      iterated expressions:
        a[140912]
      shadow variables:
      other variables
        forall body
      {
        (140931 call += e[140935] b[140924])
        (480868 'end of statement' e[140935])
      }
    }
    (519185 return _void[55])
  }
  function -=[140949](arg a[140946]:_array[133588](?), arg b[140958] :
  unknown call_tmp[665218] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140969] "index var" "insert auto destroy"
      iterated expressions:
        a[140946]
      shadow variables:
      other variables
        forall body
      {
        (140965 call -= e[140969] b[140958])
        (480870 'end of statement' e[140969])
      }
    }
    (519187 return _void[55])
  }
  function *=[140983](arg a[140980]:_array[133588](?), arg b[140992] :
  unknown call_tmp[665225] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141003] "index var" "insert auto destroy"
      iterated expressions:
        a[140980]
      shadow variables:
      other variables
        forall body
      {
        (140999 call *= e[141003] b[140992])
        (480872 'end of statement' e[141003])
      }
    }
    (519189 return _void[55])
  }
  function /=[141017](arg a[141014]:_array[133588](?), arg b[141026] :
  unknown call_tmp[665232] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141037] "index var" "insert auto destroy"
      iterated expressions:
        a[141014]
      shadow variables:
      other variables
        forall body
      {
        (141033 call /= e[141037] b[141026])
        (480874 'end of statement' e[141037])
      }
    }
    (519191 return _void[55])
  }
  function %=[141051](arg a[141048]:_array[133588](?), arg b[141060] :
  unknown call_tmp[665239] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141071] "index var" "insert auto destroy"
      iterated expressions:
        a[141048]
      shadow variables:
      other variables
        forall body
      {
        (141067 call %= e[141071] b[141060])
        (480876 'end of statement' e[141071])
      }
    }
    (519193 return _void[55])
  }
  function **=[141085](arg a[141082]:_array[133588](?), arg b[141094] :
  unknown call_tmp[665246] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141105] "index var" "insert auto destroy"
      iterated expressions:
        a[141082]
      shadow variables:
      other variables
        forall body
      {
        (141101 call **= e[141105] b[141094])
        (480878 'end of statement' e[141105])
      }
    }
    (519195 return _void[55])
  }
  function &=[141119](arg a[141116]:_array[133588](?), arg b[141128] :
  unknown call_tmp[665253] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141139] "index var" "insert auto destroy"
      iterated expressions:
        a[141116]
      shadow variables:
      other variables
        forall body
      {
        (141135 call &= e[141139] b[141128])
        (480880 'end of statement' e[141139])
      }
    }
    (519197 return _void[55])
  }
  function |=[141153](arg a[141150]:_array[133588](?), arg b[141162] :
  unknown call_tmp[665260] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141173] "index var" "insert auto destroy"
      iterated expressions:
        a[141150]
      shadow variables:
      other variables
        forall body
      {
        (141169 call |= e[141173] b[141162])
        (480882 'end of statement' e[141173])
      }
    }
    (519199 return _void[55])
  }
  function ^=[141187](arg a[141184]:_array[133588](?), arg b[141196] :
  unknown call_tmp[665267] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141207] "index var" "insert auto destroy"
      iterated expressions:
        a[141184]
      shadow variables:
      other variables
        forall body
      {
        (141203 call ^= e[141207] b[141196])
        (480884 'end of statement' e[141207])
      }
    }
    (519201 return _void[55])
  }
  function >>=[141221](arg a[141218]:_array[133588](?), arg b[141230] :
  unknown call_tmp[665274] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141241] "index var" "insert auto destroy"
      iterated expressions:
        a[141218]
      shadow variables:
      other variables
        forall body
      {
        (141237 call >>= e[141241] b[141230])
        (480886 'end of statement' e[141241])
      }
    }
    (519203 return _void[55])
  }
  function <<=[141255](arg a[141252]:_array[133588](?), arg b[141264] :
  unknown call_tmp[665281] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141275] "index var" "insert auto destroy"
      iterated expressions:
        a[141252]
      shadow variables:
      other variables
        forall body
      {
        (141271 call <<= e[141275] b[141264])
        (480888 'end of statement' e[141275])
      }
    }
    (519205 return _void[55])
  }
  function chpl_by[141287](arg a[141284]:_domain[125902](?), arg b[141289]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519209] "RVV" "temp"
    unknown r[141312] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665288] "expr temp" "maybe param" "maybe type" "temp"
    (665291 'move' call_tmp[665288](141292 call rank _mt[243] a[141284]))
    unknown call_tmp[665295] "expr temp" "maybe param" "maybe type" "temp"
    (665298 'move' call_tmp[665295](141297 call _value _mt[243] a[141284]))
    unknown call_tmp[665302] "expr temp" "maybe param" "maybe type" "temp"
    (665305 'move' call_tmp[665302](141300 call idxType _mt[243] call_tmp[665295]))
    unknown call_tmp[665307] "expr temp" "maybe param" "maybe type" "temp"
    (665310 'move' call_tmp[665307](141309 call range[64316](?) call_tmp[665302] bounded[64205] 1))
    unknown call_tmp[665312] "expr temp" "maybe param" "maybe type" "temp"
    (665315 'move' call_tmp[665312](141310 call * call_tmp[665288] call_tmp[665307]))
    (543242 'default init var' r[141312] call_tmp[665312])
    (141315 'end of statement')
    unknown call_tmp[665319] "expr temp" "maybe param" "maybe type" "temp"
    (665322 'move' call_tmp[665319](141319 call rank _mt[243] a[141284]))
    unknown call_tmp[665324] "maybe param" "maybe type" "temp"
    (665327 'move' call_tmp[665324](141326 call _makeIndexTuple call_tmp[665319] b[141289](expand = 1)))
    unknown t[141327] "dead at end of block" "insert auto destroy"
    (543244 'init var' t[141327] call_tmp[665324])
    (141330 'end of statement')
    {
      unknown i[141361] "dead at end of block" "insert auto destroy"
      (543246 'init var' i[141361] 0)
      (480890 'end of statement')
      unknown tmp[141362] "maybe param" "temp"
      unknown call_tmp[665331] "expr temp" "maybe param" "maybe type" "temp"
      (665334 'move' call_tmp[665331](141333 call rank _mt[243] a[141284]))
      unknown call_tmp[665336] "expr temp" "maybe param" "maybe type" "temp"
      (665339 'move' call_tmp[665336](141337 call - call_tmp[665331] 1))
      (141374 'move' tmp[141362](141372 call chpl_compute_low_param_loop_bound 0 call_tmp[665336]))
      unknown tmp[141363] "maybe param" "temp"
      unknown call_tmp[665343] "expr temp" "maybe param" "maybe type" "temp"
      (665346 'move' call_tmp[665343](141381 call rank _mt[243] a[141284]))
      unknown call_tmp[665348] "expr temp" "maybe param" "maybe type" "temp"
      (665351 'move' call_tmp[665348](141379 call - call_tmp[665343] 1))
      (141387 'move' tmp[141363](141385 call chpl_compute_high_param_loop_bound 0 call_tmp[665348]))
      unknown tmp[141364] "maybe param" "temp"
      (141390 'move' tmp[141364] 1)
      ParamForLoop[141392]
      { i[141361] tmp[141362] tmp[141363] tmp[141364]
        unknown call_tmp[665353] "expr temp" "maybe param" "maybe type" "temp"
        (665356 'move' call_tmp[665353](141344 call r[141312] i[141361]))
        unknown call_tmp[665360] "expr temp" "maybe param" "maybe type" "temp"
        (665363 'move' call_tmp[665360](141351 call(141346 call (partial) dim _mt[243] a[141284]) i[141361]))
        unknown call_tmp[665365] "expr temp" "maybe param" "maybe type" "temp"
        (665368 'move' call_tmp[665365](141355 call t[141327] i[141361]))
        unknown call_tmp[665370] "expr temp" "maybe param" "maybe type" "temp"
        (665373 'move' call_tmp[665370](141356 call chpl_by call_tmp[665360] call_tmp[665365]))
        (141358 call = call_tmp[665353] call_tmp[665370])
        (480891 'end of statement' r[141312] i[141361] i[141361] t[141327] i[141361])
      }
      label _unused_continueLabel[141366]
      label _breakLabel[141365]
    }
    unknown call_tmp[665377] "expr temp" "maybe param" "maybe type" "temp"
    (665380 'move' call_tmp[665377](141404 call dist _mt[243] a[141284]))
    unknown call_tmp[665384] "expr temp" "maybe param" "maybe type" "temp"
    (665387 'move' call_tmp[665384](141409 call rank _mt[243] a[141284]))
    unknown call_tmp[665391] "expr temp" "maybe param" "maybe type" "temp"
    (665394 'move' call_tmp[665391](141413 call _value _mt[243] a[141284]))
    unknown call_tmp[665398] "expr temp" "maybe param" "maybe type" "temp"
    (665401 'move' call_tmp[665398](141416 call idxType _mt[243] call_tmp[665391]))
    unknown call_tmp[665403] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665406 'move' call_tmp[665403](747889 'new' _domain[125902](?) call_tmp[665377] call_tmp[665384] call_tmp[665398] 1 r[141312]))
    (519214 'move' ret[519209](519213 'deref' call_tmp[665403]))
    gotoReturn _end_chpl_by[519207] _end_chpl_by[519207]
    (480897 'end of statement' r[141312])
    label _end_chpl_by[519207]
    (519211 return ret[519209])
  }
  function chpl_align[141432](arg a[141429]:_domain[125902](?), arg b[141434]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519220] "RVV" "temp"
    unknown r[141460] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665410] "expr temp" "maybe param" "maybe type" "temp"
    (665413 'move' call_tmp[665410](141437 call rank _mt[243] a[141429]))
    unknown call_tmp[665417] "expr temp" "maybe param" "maybe type" "temp"
    (665420 'move' call_tmp[665417](141442 call _value _mt[243] a[141429]))
    unknown call_tmp[665424] "expr temp" "maybe param" "maybe type" "temp"
    (665427 'move' call_tmp[665424](141445 call idxType _mt[243] call_tmp[665417]))
    unknown call_tmp[665431] "expr temp" "maybe param" "maybe type" "temp"
    (665434 'move' call_tmp[665431](141454 call stridable _mt[243] a[141429]))
    unknown call_tmp[665436] "expr temp" "maybe param" "maybe type" "temp"
    (665439 'move' call_tmp[665436](141457 call range[64316](?) call_tmp[665424] bounded[64205] call_tmp[665431]))
    unknown call_tmp[665441] "expr temp" "maybe param" "maybe type" "temp"
    (665444 'move' call_tmp[665441](141458 call * call_tmp[665410] call_tmp[665436]))
    (543248 'default init var' r[141460] call_tmp[665441])
    (141463 'end of statement')
    unknown call_tmp[665448] "expr temp" "maybe param" "maybe type" "temp"
    (665451 'move' call_tmp[665448](141467 call rank _mt[243] a[141429]))
    unknown call_tmp[665453] "maybe param" "maybe type" "temp"
    (665456 'move' call_tmp[665453](141474 call _makeIndexTuple call_tmp[665448] b[141434](expand = 1)))
    unknown t[141475] "dead at end of block" "insert auto destroy"
    (543250 'init var' t[141475] call_tmp[665453])
    (141478 'end of statement')
    {
      unknown i[141509] "dead at end of block" "insert auto destroy"
      (543252 'init var' i[141509] 0)
      (480899 'end of statement')
      unknown tmp[141510] "maybe param" "temp"
      unknown call_tmp[665460] "expr temp" "maybe param" "maybe type" "temp"
      (665463 'move' call_tmp[665460](141481 call rank _mt[243] a[141429]))
      unknown call_tmp[665465] "expr temp" "maybe param" "maybe type" "temp"
      (665468 'move' call_tmp[665465](141485 call - call_tmp[665460] 1))
      (141522 'move' tmp[141510](141520 call chpl_compute_low_param_loop_bound 0 call_tmp[665465]))
      unknown tmp[141511] "maybe param" "temp"
      unknown call_tmp[665472] "expr temp" "maybe param" "maybe type" "temp"
      (665475 'move' call_tmp[665472](141529 call rank _mt[243] a[141429]))
      unknown call_tmp[665477] "expr temp" "maybe param" "maybe type" "temp"
      (665480 'move' call_tmp[665477](141527 call - call_tmp[665472] 1))
      (141535 'move' tmp[141511](141533 call chpl_compute_high_param_loop_bound 0 call_tmp[665477]))
      unknown tmp[141512] "maybe param" "temp"
      (141538 'move' tmp[141512] 1)
      ParamForLoop[141540]
      { i[141509] tmp[141510] tmp[141511] tmp[141512]
        unknown call_tmp[665482] "expr temp" "maybe param" "maybe type" "temp"
        (665485 'move' call_tmp[665482](141492 call r[141460] i[141509]))
        unknown call_tmp[665489] "expr temp" "maybe param" "maybe type" "temp"
        (665492 'move' call_tmp[665489](141499 call(141494 call (partial) dim _mt[243] a[141429]) i[141509]))
        unknown call_tmp[665494] "expr temp" "maybe param" "maybe type" "temp"
        (665497 'move' call_tmp[665494](141503 call t[141475] i[141509]))
        unknown call_tmp[665499] "expr temp" "maybe param" "maybe type" "temp"
        (665502 'move' call_tmp[665499](141504 call chpl_align call_tmp[665489] call_tmp[665494]))
        (141506 call = call_tmp[665482] call_tmp[665499])
        (480900 'end of statement' r[141460] i[141509] i[141509] t[141475] i[141509])
      }
      label _unused_continueLabel[141514]
      label _breakLabel[141513]
    }
    unknown call_tmp[665506] "expr temp" "maybe param" "maybe type" "temp"
    (665509 'move' call_tmp[665506](141552 call dist _mt[243] a[141429]))
    unknown call_tmp[665513] "expr temp" "maybe param" "maybe type" "temp"
    (665516 'move' call_tmp[665513](141557 call rank _mt[243] a[141429]))
    unknown call_tmp[665520] "expr temp" "maybe param" "maybe type" "temp"
    (665523 'move' call_tmp[665520](141561 call _value _mt[243] a[141429]))
    unknown call_tmp[665527] "expr temp" "maybe param" "maybe type" "temp"
    (665530 'move' call_tmp[665527](141564 call idxType _mt[243] call_tmp[665520]))
    unknown call_tmp[665534] "expr temp" "maybe param" "maybe type" "temp"
    (665537 'move' call_tmp[665534](141568 call stridable _mt[243] a[141429]))
    unknown call_tmp[665539] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665542 'move' call_tmp[665539](747890 'new' _domain[125902](?) call_tmp[665506] call_tmp[665513] call_tmp[665527] call_tmp[665534] r[141460]))
    (519225 'move' ret[519220](519224 'deref' call_tmp[665539]))
    gotoReturn _end_chpl_align[519218] _end_chpl_align[519218]
    (480906 'end of statement' r[141460])
    label _end_chpl_align[519218]
    (519222 return ret[519220])
  }
  function <=>[141587](arg x[141584]:_array[133588](?), arg y[141594]:_array[133588](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141599] "dead at end of block" "insert auto destroy"
    (543254 'init var' hasSwapped[141599] 0 bool[10])
    (141602 'end of statement')
    unknown tmp[426816] "maybe param" "temp"
    unknown tmp[426837] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492273] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665546] "expr temp" "maybe param" "maybe type" "temp"
      (665549 'move' call_tmp[665546](141605 call _value _mt[243] x[141584]))
      (492277 'move' call_type_tmp[492273](141608 'typeof' call_tmp[665546]))
    }
    { scopeless type
      unknown call_type_tmp[492279] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665553] "expr temp" "maybe param" "maybe type" "temp"
      (665556 'move' call_tmp[665553](141610 call _value _mt[243] y[141594]))
      (492283 'move' call_type_tmp[492279](141613 'typeof' call_tmp[665553]))
    }
    (426848 'move' tmp[426837](141614 call == call_type_tmp[492273] call_type_tmp[492279]))
    unknown call_tmp[665558] "expr temp" "maybe param" "maybe type" "temp"
    (665561 'move' call_tmp[665558](426850 call _cond_invalid tmp[426837]))
    if call_tmp[665558]
    {
      (426853 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568061] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568062] "maybe param" "temp"
    unknown call_tmp[665563] "expr temp" "maybe param" "maybe type" "temp"
    (665566 'move' call_tmp[665563](426838 call isTrue tmp[426837]))
    (568067 'move' tmp[568062](568065 call _cond_test call_tmp[665563]))
    if tmp[568062]
    {
      unknown tmp[568069] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665570] "expr temp" "maybe param" "maybe type" "temp"
      (665573 'move' call_tmp[665570](141618 call _value _mt[243] x[141584]))
      unknown call_tmp[665575] "expr temp" "maybe param" "maybe type" "temp"
      (665578 'move' call_tmp[665575](141622 call chpl__isArrayView call_tmp[665570]))
      unknown call_tmp[665580] "expr temp" "maybe param" "maybe type" "temp"
      (665583 'move' call_tmp[665580](141623 call ! call_tmp[665575]))
      (568071 'move' tmp[568069](426841 call isTrue call_tmp[665580]))
      (568076 'move' tmp[568061](568073 '_paramFoldLogical' tmp[568062] tmp[568069]))
    }
    {
      (568081 'move' tmp[568061](568078 '_paramFoldLogical' tmp[568062] 0))
    }
    (426827 'move' tmp[426816] tmp[568061])
    unknown call_tmp[665585] "expr temp" "maybe param" "maybe type" "temp"
    (665588 'move' call_tmp[665585](426829 call _cond_invalid tmp[426816]))
    if call_tmp[665585]
    {
      (426832 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568088] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568089] "maybe param" "temp"
    unknown call_tmp[665590] "expr temp" "maybe param" "maybe type" "temp"
    (665593 'move' call_tmp[665590](426817 call isTrue tmp[426816]))
    (568094 'move' tmp[568089](568092 call _cond_test call_tmp[665590]))
    if tmp[568089]
    {
      unknown tmp[568096] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665597] "expr temp" "maybe param" "maybe type" "temp"
      (665600 'move' call_tmp[665597](141632 call _value _mt[243] x[141584]))
      unknown call_tmp[665604] "expr temp" "maybe param" "maybe type" "temp"
      (665607 'move' call_tmp[665604](141654 call _value _mt[243] y[141594]))
      unknown call_tmp[665609] "expr temp" "maybe param" "maybe type" "temp"
      (665612 'move' call_tmp[665609](141657 call canResolveMethod module=[255] Reflection[224882] call_tmp[665597] "doiSwap" call_tmp[665604]))
      (568098 'move' tmp[568096](426820 call isTrue call_tmp[665609]))
      (568103 'move' tmp[568088](568100 '_paramFoldLogical' tmp[568089] tmp[568096]))
    }
    {
      (568108 'move' tmp[568088](568105 '_paramFoldLogical' tmp[568089] 0))
    }
    unknown call_tmp[665614] "expr temp" "maybe param" "maybe type" "temp"
    (665617 'move' call_tmp[665614](141689 call _cond_test tmp[568088]))
    if call_tmp[665614]
    {
      unknown call_tmp[665621] "expr temp" "maybe param" "maybe type" "temp"
      (665624 'move' call_tmp[665621](461568 call _dom _mt[243] x[141584]))
      unknown call_tmp[665628] "expr temp" "maybe param" "maybe type" "temp"
      (665631 'move' call_tmp[665628](461574 call _dom _mt[243] y[141594]))
      unknown call_tmp[665633] "expr temp" "maybe param" "maybe type" "temp"
      (665636 'move' call_tmp[665633](141662 call == call_tmp[665621] call_tmp[665628]))
      unknown call_tmp[665638] "expr temp" "maybe param" "maybe type" "temp"
      (665641 'move' call_tmp[665638](141684 call _cond_test call_tmp[665633]))
      if call_tmp[665638]
      {
        unknown call_tmp[665645] "expr temp" "maybe param" "maybe type" "temp"
        (665648 'move' call_tmp[665645](141665 call _value _mt[243] x[141584]))
        unknown call_tmp[665654] "expr temp" "maybe param" "maybe type" "temp"
        (665657 'move' call_tmp[665654](141672 call _value _mt[243] y[141594]))
        (141676 call(141668 call (partial) doiSwap _mt[243] call_tmp[665645]) call_tmp[665654])
        (480910 'end of statement')
        (141681 call = hasSwapped[141599] 1)
        (480911 'end of statement' hasSwapped[141599])
      }
    }
    unknown call_tmp[665659] "expr temp" "maybe param" "maybe type" "temp"
    (665662 'move' call_tmp[665659](141694 call ! hasSwapped[141599]))
    unknown call_tmp[665664] "expr temp" "maybe param" "maybe type" "temp"
    (665667 'move' call_tmp[665664](141717 call _cond_test call_tmp[665659]))
    if call_tmp[665664]
    {
      Forall {
        induction variables:
          
          unknown a[141711] "index var" "insert auto destroy"
          
          unknown b[141713] "index var" "insert auto destroy"
        iterated expressions:
          x[141584]
          y[141594]
        shadow variables:
        other variables
          forall body
        {
          (141707 call <=> a[141711] b[141713])
          (480913 'end of statement' a[141711] b[141713])
        }
      }
    }
    (519229 return _void[55])
    (360328 'referenced modules list' Reflection[224882])
  }
  function reshape[141731](arg A[141728]:_array[133588](?), arg D[141734]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[519233] "RVV" "temp"
    unknown call_tmp[665669] "expr temp" "maybe param" "maybe type" "temp"
    (665672 'move' call_tmp[665669](141740 call isRectangularDom D[141734]))
    unknown call_tmp[665674] "expr temp" "maybe param" "maybe type" "temp"
    (665677 'move' call_tmp[665674](141741 call ! call_tmp[665669]))
    unknown call_tmp[665679] "expr temp" "maybe param" "maybe type" "temp"
    (665682 'move' call_tmp[665679](141769 call _cond_test call_tmp[665674]))
    if call_tmp[665679]
    {
      unknown call_tmp[665684] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665687 'move' call_tmp[665684](141763 'typeof' D[141734]))
      unknown call_tmp[665689] "expr temp" "maybe param" "maybe type" "temp"
      (665692 'move' call_tmp[665689](141765 call _cast string[26] call_tmp[665684]))
      (141767 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665689])
    }
    unknown call_tmp[665696] "expr temp" "maybe param" "maybe type" "temp"
    (665699 'move' call_tmp[665696](141776 call size _mt[243] A[141728]))
    unknown call_tmp[665703] "expr temp" "maybe param" "maybe type" "temp"
    (665706 'move' call_tmp[665703](141780 call size _mt[243] D[141734]))
    unknown call_tmp[665708] "expr temp" "maybe param" "maybe type" "temp"
    (665711 'move' call_tmp[665708](141783 call != call_tmp[665696] call_tmp[665703]))
    unknown call_tmp[665713] "expr temp" "maybe param" "maybe type" "temp"
    (665716 'move' call_tmp[665713](141848 call _cond_test call_tmp[665708]))
    if call_tmp[665713]
    {
      unknown call_tmp[665720] "expr temp" "maybe param" "maybe type" "temp"
      (665723 'move' call_tmp[665720](141805 call size _mt[243] A[141728]))
      unknown call_tmp[665727] "expr temp" "maybe param" "maybe type" "temp"
      (665730 'move' call_tmp[665727](141826 call size _mt[243] D[141734]))
      (141846 call halt "reshape(A,D) is invoked when A has " call_tmp[665720] " elements, but D has " call_tmp[665727] " indices")
    }
    unknown B[141880] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter6[582703](arg iterator[582705]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582766] "RVV" "temp"
      {
        unknown _indexOfInterest[582710] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582711] "expr temp" "temp"
        (582720 'move' _iterator[582711](582718 call _getIteratorZip iterator[582705]))
        Defer
        {
          {
            (582746 call _freeIterator _iterator[582711])
          }
        }
        { scopeless type
          (582725 'move' _indexOfInterest[582710](582722 call iteratorIndex _iterator[582711]))
        }
        ForLoop[582712] for-expr
        {
          unknown a[141878] "index var" "insert auto destroy" "no doc"
          (582755 'end of statement')
          unknown i[141876] "index var" "insert auto destroy" "no doc"
          (582756 'end of statement')
          (582730 call _check_tuple_var_decl _indexOfInterest[582710] 2)
          (582757 'end of statement')
          (582736 'move' i[141876](582734 call _indexOfInterest[582710] 0))
          (582758 'end of statement' i[141876])
          (582741 'move' a[141878](582739 call _indexOfInterest[582710] 1))
          (582760 'end of statement' a[141878])
          {
            {
              unknown yret[582770] "YVV" "temp"
              (582773 'move' yret[582770](582772 'deref' a[141878]))
              (582775 yield yret[582770])
              (582762 'end of statement' a[141878])
            }
          }
          label _continueLabel[582715]
          _indexOfInterest[582710]
          _iterator[582711]
        }
        label _breakLabel[582716]
      }
      (582768 return ret[582766])
    }
    function chpl__forexpr6[582687](arg iterExpr[582690]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582780] "RVV" "temp"
      unknown _iterator[582694] "expr temp" "maybe ref" "temp"
      (582696 'move' _iterator[582694] iterExpr[582690])
      unknown call_tmp[582787] "expr temp" "maybe param" "maybe type" "temp"
      (582790 'move' call_tmp[582787](582699 call chpl__loopexpr_iter6 _iterator[582694]))
      (582785 'move' ret[582780](582784 'deref' call_tmp[582787]))
      (582782 return ret[582780])
    }
    unknown call_tmp[582792] "expr temp" "maybe param" "maybe type" "temp"
    (582795 'move' call_tmp[582792](141871 call _build_tuple D[141734] A[141728]))
    unknown call_tmp[582797] "maybe param" "maybe type" "temp"
    (582800 'move' call_tmp[582797](582692 call chpl__forexpr6 call_tmp[582792]))
    (582804 'iterator record set shape' call_tmp[582797] D[141734] 1)
    unknown call_tmp[665732] "expr temp" "maybe param" "maybe type" "temp"
    (665735 'move' call_tmp[665732](141859 call chpl__ensureDomainExpr D[141734]))
    unknown call_tmp[665739] "expr temp" "maybe param" "maybe type" "temp"
    (665742 'move' call_tmp[665739](141856 call eltType _mt[243] A[141728]))
    unknown call_tmp[665744] "maybe param" "maybe type" "temp"
    (665747 'move' call_tmp[665744](141861 call chpl__buildArrayRuntimeType call_tmp[665732] call_tmp[665739]))
    (543256 'init var' B[141880] call_tmp[582797] call_tmp[665744])
    (141883 'end of statement')
    (519238 'move' ret[519233](519237 'deref' B[141880]))
    gotoReturn _end_reshape[519231] _end_reshape[519231]
    (480918 'end of statement' B[141880])
    label _end_reshape[519231]
    (519235 return ret[519233])
  }
  function reshape[141895](arg A[141892]:_iteratorRecord[205](?), arg D[141898]:_domain[125902](?)) : _unknown[51] "no doc"
  {
    unknown ret[519244] "RVV" "temp"
    unknown call_tmp[665749] "expr temp" "maybe param" "maybe type" "temp"
    (665752 'move' call_tmp[665749](141904 call isRectangularDom D[141898]))
    unknown call_tmp[665754] "expr temp" "maybe param" "maybe type" "temp"
    (665757 'move' call_tmp[665754](141905 call ! call_tmp[665749]))
    unknown call_tmp[665759] "expr temp" "maybe param" "maybe type" "temp"
    (665762 'move' call_tmp[665759](141917 call _cond_test call_tmp[665754]))
    if call_tmp[665759]
    {
      unknown call_tmp[665764] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665767 'move' call_tmp[665764](141911 'typeof' D[141898]))
      unknown call_tmp[665769] "expr temp" "maybe param" "maybe type" "temp"
      (665772 'move' call_tmp[665769](141913 call _cast string[26] call_tmp[665764]))
      (141915 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665769])
    }
    unknown B[141940] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter7[582822](arg iterator[582824]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582885] "RVV" "temp"
      {
        unknown _indexOfInterest[582829] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582830] "expr temp" "temp"
        (582839 'move' _iterator[582830](582837 call _getIteratorZip iterator[582824]))
        Defer
        {
          {
            (582865 call _freeIterator _iterator[582830])
          }
        }
        { scopeless type
          (582844 'move' _indexOfInterest[582829](582841 call iteratorIndex _iterator[582830]))
        }
        ForLoop[582831] for-expr
        {
          unknown a[141938] "index var" "insert auto destroy" "no doc"
          (582874 'end of statement')
          unknown i[141936] "index var" "insert auto destroy" "no doc"
          (582875 'end of statement')
          (582849 call _check_tuple_var_decl _indexOfInterest[582829] 2)
          (582876 'end of statement')
          (582855 'move' i[141936](582853 call _indexOfInterest[582829] 0))
          (582877 'end of statement' i[141936])
          (582860 'move' a[141938](582858 call _indexOfInterest[582829] 1))
          (582879 'end of statement' a[141938])
          {
            {
              unknown yret[582889] "YVV" "temp"
              (582892 'move' yret[582889](582891 'deref' a[141938]))
              (582894 yield yret[582889])
              (582881 'end of statement' a[141938])
            }
          }
          label _continueLabel[582834]
          _indexOfInterest[582829]
          _iterator[582830]
        }
        label _breakLabel[582835]
      }
      (582887 return ret[582885])
    }
    function chpl__forexpr7[582806](arg iterExpr[582809]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582899] "RVV" "temp"
      unknown _iterator[582813] "expr temp" "maybe ref" "temp"
      (582815 'move' _iterator[582813] iterExpr[582809])
      unknown call_tmp[582906] "expr temp" "maybe param" "maybe type" "temp"
      (582909 'move' call_tmp[582906](582818 call chpl__loopexpr_iter7 _iterator[582813]))
      (582904 'move' ret[582899](582903 'deref' call_tmp[582906]))
      (582901 return ret[582899])
    }
    unknown call_tmp[582911] "expr temp" "maybe param" "maybe type" "temp"
    (582914 'move' call_tmp[582911](141931 call _build_tuple D[141898] A[141892]))
    unknown call_tmp[582916] "maybe param" "maybe type" "temp"
    (582919 'move' call_tmp[582916](582811 call chpl__forexpr7 call_tmp[582911]))
    (582923 'iterator record set shape' call_tmp[582916] D[141898] 1)
    (543258 'init var' B[141940] call_tmp[582916])
    (141943 'end of statement')
    (519249 'move' ret[519244](519248 'deref' B[141940]))
    gotoReturn _end_reshape[519242] _end_reshape[519242]
    (480921 'end of statement' B[141940])
    label _end_reshape[519242]
    (519246 return ret[519244])
  }
  function linearize[141953](arg Xs[141951]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[519255] "RVV" "temp"
    {
      unknown _indexOfInterest[141960] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141961] "expr temp" "temp"
      (141970 'move' _iterator[141961](141968 call _getIterator Xs[141951]))
      Defer
      {
        {
          (141986 call _freeIterator _iterator[141961])
        }
      }
      { scopeless type
        (141975 'move' _indexOfInterest[141960](141972 call iteratorIndex _iterator[141961]))
      }
      ForLoop[141962]
      {
        unknown x[141979] "index var" "insert auto destroy"
        (480924 'end of statement')
        (141981 'move' x[141979] _indexOfInterest[141960])
        (480925 'end of statement' x[141979])
        unknown yret[519259] "YVV" "temp"
        (519262 'move' yret[519259](519261 'deref' x[141979]))
        (519264 yield yret[519259])
        (480927 'end of statement' x[141979])
        label _continueLabel[141965]
        _indexOfInterest[141960]
        _iterator[141961]
      }
      label _breakLabel[141966]
    }
    (519257 return ret[519255])
  }
  function chpl__unalias[142002](arg x[141999]:_domain[125902](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519268] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492285] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665776] "expr temp" "maybe param" "maybe type" "temp"
      (665779 'move' call_tmp[665776](142006 call _instance _mt[243] x[141999]))
      (492289 'move' call_type_tmp[492285](142009 'typeof' call_tmp[665776]))
    }
    { scopeless type
      unknown call_type_tmp[492291] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665783] "expr temp" "maybe param" "maybe type" "temp"
      (665786 'move' call_tmp[665783](142013 call _instance _mt[243] x[141999]))
      (492295 'move' call_type_tmp[492291](142016 'typeof' call_tmp[665783]))
    }
    unknown call_tmp[665788] "expr temp" "maybe param" "maybe type" "temp"
    (665791 'move' call_tmp[665788](142011 call _to_unmanaged call_type_tmp[492285]))
    unknown call_tmp[665793] "expr temp" "maybe param" "maybe type" "temp"
    (665796 'move' call_tmp[665793](142017 call != call_tmp[665788] call_type_tmp[492291]))
    unknown call_tmp[665798] "expr temp" "maybe param" "maybe type" "temp"
    (665801 'move' call_tmp[665798](142024 call _cond_test call_tmp[665793]))
    if call_tmp[665798]
    {
      (142022 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[665805] "expr temp" "maybe param" "maybe type" "temp"
    (665808 'move' call_tmp[665805](142031 call _unowned _mt[243] x[141999]))
    unknown call_tmp[665810] "expr temp" "maybe param" "maybe type" "temp"
    (665813 'move' call_tmp[665810](142052 call _cond_test call_tmp[665805]))
    if call_tmp[665810]
    {
      unknown ret[142035] "dead at end of block" "no auto destroy"
      (543260 'init var' ret[142035] x[141999])
      (142038 'end of statement')
      (519273 'move' ret[519268](519272 'deref' ret[142035]))
      gotoReturn _end_chpl__unalias[519266] _end_chpl__unalias[519266]
      (480930 'end of statement' ret[142035])
    }
    {
      unknown ret[142044] "dead at end of block" "insert auto destroy" "no copy"
      (543262 'init var' ret[142044] x[141999])
      (142047 'end of statement')
      (519278 'move' ret[519268](519277 'deref' ret[142044]))
      gotoReturn _end_chpl__unalias[519266] _end_chpl__unalias[519266]
      (480932 'end of statement' ret[142044])
    }
    label _end_chpl__unalias[519266]
    (519270 return ret[519268])
  }
  function chpl__initCopy[142066](const  ref arg rhs[142063]:_array[133588](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519284] "RVV" "temp"
    unknown call_tmp[665815] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (665818 'move' call_tmp[665815](142070 'typeof' rhs[142063]))
    unknown call_tmp[665820] "maybe param" "maybe type" "temp"
    (665823 'move' call_tmp[665820](142073 call chpl__coerceCopy call_tmp[665815] rhs[142063]))
    unknown lhs[142074] "dead at end of block" "no copy"
    (543264 'init var' lhs[142074] call_tmp[665820])
    (142077 'end of statement')
    (519289 'move' ret[519284](519288 'deref' lhs[142074]))
    gotoReturn _end_chpl__initCopy[519282] _end_chpl__initCopy[519282]
    (480934 'end of statement' lhs[142074])
    label _end_chpl__initCopy[519282]
    (519286 return ret[519284])
  }
  function chpl__autoCopy[142092](arg x[142089]:_array[133588](?)) : _unknown[51] "auto copy fn"
  {
    unknown ret[519295] "RVV" "temp"
    unknown call_tmp[665825] "maybe param" "maybe type" "temp"
    (665828 'move' call_tmp[665825](142097 call chpl__initCopy x[142089]))
    unknown b[142098] "dead at end of block" "insert auto destroy" "no copy"
    (543266 'init var' b[142098] call_tmp[665825])
    (142101 'end of statement')
    (519300 'move' ret[519295](519299 'deref' b[142098]))
    gotoReturn _end_chpl__autoCopy[519293] _end_chpl__autoCopy[519293]
    (480936 'end of statement' b[142098])
    label _end_chpl__autoCopy[519293]
    (519297 return ret[519295])
  }
  function chpl__coerceCopy[142114](arg dstType[142111]:_domain[125902](?), arg rhs[142117]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519306] "RVV" "temp"
    unknown call_tmp[665832] "expr temp" "maybe param" "maybe type" "temp"
    (665835 'move' call_tmp[665832](142121 call dist _mt[243] rhs[142117]))
    unknown call_tmp[665839] "expr temp" "maybe param" "maybe type" "temp"
    (665842 'move' call_tmp[665839](142124 call _value _mt[243] call_tmp[665832]))
    unknown call_tmp[665846] "maybe param" "maybe type" "temp"
    (665849 'move' call_tmp[665846](142133 call(142129 call (partial) dsiIsLayout _mt[243] call_tmp[665839])))
    unknown rhsIsLayout[142134] "dead at end of block" "param"
    (543268 'init var' rhsIsLayout[142134] call_tmp[665846])
    (142137 'end of statement')
    unknown lhs[142140] "dead at end of block" "insert auto destroy"
    (543270 'default init var' lhs[142140] dstType[142111])
    (142143 'end of statement')
    (748138 call chpl_statementLevelSymbol lhs[142140])
    (142148 call = lhs[142140] rhs[142117])
    (480938 'end of statement' lhs[142140])
    unknown tmp[426858] "maybe param" "temp"
    unknown call_tmp[665853] "expr temp" "maybe param" "maybe type" "temp"
    (665856 'move' call_tmp[665853](142152 call dist _mt[243] lhs[142140]))
    unknown call_tmp[665860] "expr temp" "maybe param" "maybe type" "temp"
    (665863 'move' call_tmp[665860](142155 call _value _mt[243] call_tmp[665853]))
    (426869 'move' tmp[426858](142162 call(142158 call (partial) dsiIsLayout _mt[243] call_tmp[665860])))
    unknown call_tmp[665867] "expr temp" "maybe param" "maybe type" "temp"
    (665870 'move' call_tmp[665867](426871 call _cond_invalid tmp[426858]))
    if call_tmp[665867]
    {
      (426874 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568115] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568116] "maybe param" "temp"
    unknown call_tmp[665872] "expr temp" "maybe param" "maybe type" "temp"
    (665875 'move' call_tmp[665872](426859 call isTrue tmp[426858]))
    (568121 'move' tmp[568116](568119 call _cond_test call_tmp[665872]))
    if tmp[568116]
    {
      unknown tmp[568123] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665877] "expr temp" "maybe param" "maybe type" "temp"
      (665880 'move' call_tmp[665877](142164 call ! rhsIsLayout[142134]))
      (568125 'move' tmp[568123](426862 call isTrue call_tmp[665877]))
      (568130 'move' tmp[568115](568127 '_paramFoldLogical' tmp[568116] tmp[568123]))
    }
    {
      (568135 'move' tmp[568115](568132 '_paramFoldLogical' tmp[568116] 0))
    }
    unknown call_tmp[665882] "expr temp" "maybe param" "maybe type" "temp"
    (665885 'move' call_tmp[665882](142191 call _cond_test tmp[568115]))
    if call_tmp[665882]
    {
      (142189 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519311 'move' ret[519306](519310 'deref' lhs[142140]))
    gotoReturn _end_chpl__coerceCopy[519304] _end_chpl__coerceCopy[519304]
    (480942 'end of statement' lhs[142140])
    label _end_chpl__coerceCopy[519304]
    (519308 return ret[519306])
  }
  function chpl__coerceMove[142207](arg dstType[142204]:_domain[125902](?), in arg rhs[142210]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519317] "RVV" "temp"
    unknown call_tmp[665889] "expr temp" "maybe param" "maybe type" "temp"
    (665892 'move' call_tmp[665889](142214 call dist _mt[243] rhs[142210]))
    unknown call_tmp[665896] "expr temp" "maybe param" "maybe type" "temp"
    (665899 'move' call_tmp[665896](142217 call _value _mt[243] call_tmp[665889]))
    unknown call_tmp[665903] "maybe param" "maybe type" "temp"
    (665906 'move' call_tmp[665903](142224 call(142220 call (partial) dsiIsLayout _mt[243] call_tmp[665896])))
    unknown rhsIsLayout[142225] "dead at end of block" "param"
    (543272 'init var' rhsIsLayout[142225] call_tmp[665903])
    (142228 'end of statement')
    unknown lhs[142231] "dead at end of block" "insert auto destroy"
    (543274 'default init var' lhs[142231] dstType[142204])
    (142234 'end of statement')
    (748140 call chpl_statementLevelSymbol lhs[142231])
    (142239 call = lhs[142231] rhs[142210])
    (480944 'end of statement' lhs[142231])
    unknown tmp[426879] "maybe param" "temp"
    unknown call_tmp[665910] "expr temp" "maybe param" "maybe type" "temp"
    (665913 'move' call_tmp[665910](142243 call dist _mt[243] lhs[142231]))
    unknown call_tmp[665917] "expr temp" "maybe param" "maybe type" "temp"
    (665920 'move' call_tmp[665917](142246 call _value _mt[243] call_tmp[665910]))
    (426890 'move' tmp[426879](142253 call(142249 call (partial) dsiIsLayout _mt[243] call_tmp[665917])))
    unknown call_tmp[665924] "expr temp" "maybe param" "maybe type" "temp"
    (665927 'move' call_tmp[665924](426892 call _cond_invalid tmp[426879]))
    if call_tmp[665924]
    {
      (426895 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568142] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568143] "maybe param" "temp"
    unknown call_tmp[665929] "expr temp" "maybe param" "maybe type" "temp"
    (665932 'move' call_tmp[665929](426880 call isTrue tmp[426879]))
    (568148 'move' tmp[568143](568146 call _cond_test call_tmp[665929]))
    if tmp[568143]
    {
      unknown tmp[568150] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665934] "expr temp" "maybe param" "maybe type" "temp"
      (665937 'move' call_tmp[665934](142255 call ! rhsIsLayout[142225]))
      (568152 'move' tmp[568150](426883 call isTrue call_tmp[665934]))
      (568157 'move' tmp[568142](568154 '_paramFoldLogical' tmp[568143] tmp[568150]))
    }
    {
      (568162 'move' tmp[568142](568159 '_paramFoldLogical' tmp[568143] 0))
    }
    unknown call_tmp[665939] "expr temp" "maybe param" "maybe type" "temp"
    (665942 'move' call_tmp[665939](142264 call _cond_test tmp[568142]))
    if call_tmp[665939]
    {
      (142262 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519322 'move' ret[519317](519321 'deref' lhs[142231]))
    gotoReturn _end_chpl__coerceMove[519315] _end_chpl__coerceMove[519315]
    (480948 'end of statement' lhs[142231])
    label _end_chpl__coerceMove[519315]
    (519319 return ret[519317])
  }
  function chpl__coerceCopy[142280](arg dstType[142277]:_domain[125902](?), arg rhs[142283]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519328] "RVV" "temp"
    unknown lhs[142287] "dead at end of block" "insert auto destroy"
    (543276 'default init var' lhs[142287] dstType[142277])
    (142290 'end of statement')
    (748142 call chpl_statementLevelSymbol lhs[142287])
    unknown call_tmp[665944] "expr temp" "maybe param" "maybe type" "temp"
    (665947 'move' call_tmp[665944](142298 call chpl__isLegalRectTupDomAssign lhs[142287] rhs[142283]))
    unknown call_tmp[665949] "expr temp" "maybe param" "maybe type" "temp"
    (665952 'move' call_tmp[665949](142315 call _cond_test call_tmp[665944]))
    if call_tmp[665949]
    {
      unknown call_tmp[665954] "expr temp" "maybe param" "maybe type" "temp"
      (665957 'move' call_tmp[665954](142303 call chpl__buildDomainExpr(142301 'expand_tuple' rhs[142283])))
      (142305 call = lhs[142287] call_tmp[665954])
      (480950 'end of statement' lhs[142287])
    }
    {
      (142311 call = lhs[142287] rhs[142283])
      (480952 'end of statement' lhs[142287])
    }
    (519333 'move' ret[519328](519332 'deref' lhs[142287]))
    gotoReturn _end_chpl__coerceCopy[519326] _end_chpl__coerceCopy[519326]
    (480954 'end of statement' lhs[142287])
    label _end_chpl__coerceCopy[519326]
    (519330 return ret[519328])
  }
  function chpl__coerceMove[142330](arg dstType[142327]:_domain[125902](?), in arg rhs[142333]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519339] "RVV" "temp"
    unknown lhs[142337] "dead at end of block" "insert auto destroy"
    (543278 'default init var' lhs[142337] dstType[142327])
    (142340 'end of statement')
    (748144 call chpl_statementLevelSymbol lhs[142337])
    unknown call_tmp[665959] "expr temp" "maybe param" "maybe type" "temp"
    (665962 'move' call_tmp[665959](142348 call chpl__isLegalRectTupDomAssign lhs[142337] rhs[142333]))
    unknown call_tmp[665964] "expr temp" "maybe param" "maybe type" "temp"
    (665967 'move' call_tmp[665964](142365 call _cond_test call_tmp[665959]))
    if call_tmp[665964]
    {
      unknown call_tmp[665969] "expr temp" "maybe param" "maybe type" "temp"
      (665972 'move' call_tmp[665969](142353 call chpl__buildDomainExpr(142351 'expand_tuple' rhs[142333])))
      (142355 call = lhs[142337] call_tmp[665969])
      (480956 'end of statement' lhs[142337])
    }
    {
      (142361 call = lhs[142337] rhs[142333])
      (480958 'end of statement' lhs[142337])
    }
    (519344 'move' ret[519339](519343 'deref' lhs[142337]))
    gotoReturn _end_chpl__coerceMove[519337] _end_chpl__coerceMove[519337]
    (480960 'end of statement' lhs[142337])
    label _end_chpl__coerceMove[519337]
    (519341 return ret[519339])
  }
  function chpl__coerceCopy[142380](arg dstType[142377]:_domain[125902](?), arg rhs[142386]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519350] "RVV" "temp"
    unknown lhs[142390] "dead at end of block" "insert auto destroy"
    (543280 'default init var' lhs[142390] dstType[142377])
    (142393 'end of statement')
    (748146 call chpl_statementLevelSymbol lhs[142390])
    unknown call_tmp[665974] "expr temp" "maybe param" "maybe type" "temp"
    (665977 'move' call_tmp[665974](142400 call chpl__buildDomainExpr rhs[142386]))
    (142402 call = lhs[142390] call_tmp[665974])
    (480962 'end of statement' lhs[142390])
    (519355 'move' ret[519350](519354 'deref' lhs[142390]))
    gotoReturn _end_chpl__coerceCopy[519348] _end_chpl__coerceCopy[519348]
    (480964 'end of statement' lhs[142390])
    label _end_chpl__coerceCopy[519348]
    (519352 return ret[519350])
  }
  function chpl__coerceMove[142416](arg dstType[142413]:_domain[125902](?), in arg rhs[142422]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519361] "RVV" "temp"
    unknown lhs[142426] "dead at end of block" "insert auto destroy"
    (543282 'default init var' lhs[142426] dstType[142413])
    (142429 'end of statement')
    (748148 call chpl_statementLevelSymbol lhs[142426])
    unknown call_tmp[665979] "expr temp" "maybe param" "maybe type" "temp"
    (665982 'move' call_tmp[665979](142436 call chpl__buildDomainExpr rhs[142422]))
    (142438 call = lhs[142426] call_tmp[665979])
    (480966 'end of statement' lhs[142426])
    (519366 'move' ret[519361](519365 'deref' lhs[142426]))
    gotoReturn _end_chpl__coerceMove[519359] _end_chpl__coerceMove[519359]
    (480968 'end of statement' lhs[142426])
    label _end_chpl__coerceMove[519359]
    (519363 return ret[519361])
  }
  function chpl__coerceCopy[142452](arg dstType[142449]:_domain[125902](?), arg rhs[142455]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519372] "RVV" "temp"
    unknown lhs[142459] "dead at end of block" "insert auto destroy"
    (543284 'default init var' lhs[142459] dstType[142449])
    (142462 'end of statement')
    unknown call_tmp[665984] "expr temp" "maybe param" "maybe type" "temp"
    (665987 'move' call_tmp[665984](142467 call isRectangularDom lhs[142459]))
    unknown call_tmp[665989] "expr temp" "maybe param" "maybe type" "temp"
    (665992 'move' call_tmp[665989](142473 call _cond_test call_tmp[665984]))
    if call_tmp[665989]
    {
      (142471 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142483 call(142479 call (partial) clear _mt[243] lhs[142459]))
    (480971 'end of statement' lhs[142459])
    {
      unknown _indexOfInterest[142496] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142497] "expr temp" "temp"
      (142506 'move' _iterator[142497](142504 call _getIterator rhs[142455]))
      Defer
      {
        {
          (142522 call _freeIterator _iterator[142497])
        }
      }
      { scopeless type
        (142511 'move' _indexOfInterest[142496](142508 call iteratorIndex _iterator[142497]))
      }
      ForLoop[142498]
      {
        unknown ind[142515] "index var" "insert auto destroy"
        (480974 'end of statement')
        (142517 'move' ind[142515] _indexOfInterest[142496])
        (480975 'end of statement' ind[142515])
        {
          (142493 call(142488 call (partial) add _mt[243] lhs[142459]) ind[142515])
          (480977 'end of statement' lhs[142459] ind[142515])
        }
        label _continueLabel[142501]
        _indexOfInterest[142496]
        _iterator[142497]
      }
      label _breakLabel[142502]
    }
    (519377 'move' ret[519372](519376 'deref' lhs[142459]))
    gotoReturn _end_chpl__coerceCopy[519370] _end_chpl__coerceCopy[519370]
    (480980 'end of statement' lhs[142459])
    label _end_chpl__coerceCopy[519370]
    (519374 return ret[519372])
  }
  function chpl__coerceMove[142540](arg dstType[142537]:_domain[125902](?), arg rhs[142543]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519383] "RVV" "temp"
    unknown lhs[142547] "dead at end of block" "insert auto destroy"
    (543286 'default init var' lhs[142547] dstType[142537])
    (142550 'end of statement')
    unknown call_tmp[665998] "expr temp" "maybe param" "maybe type" "temp"
    (666001 'move' call_tmp[665998](142555 call isRectangularDom lhs[142547]))
    unknown call_tmp[666003] "expr temp" "maybe param" "maybe type" "temp"
    (666006 'move' call_tmp[666003](142561 call _cond_test call_tmp[665998]))
    if call_tmp[666003]
    {
      (142559 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142571 call(142567 call (partial) clear _mt[243] lhs[142547]))
    (480983 'end of statement' lhs[142547])
    {
      unknown _indexOfInterest[142584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142585] "expr temp" "temp"
      (142594 'move' _iterator[142585](142592 call _getIterator rhs[142543]))
      Defer
      {
        {
          (142610 call _freeIterator _iterator[142585])
        }
      }
      { scopeless type
        (142599 'move' _indexOfInterest[142584](142596 call iteratorIndex _iterator[142585]))
      }
      ForLoop[142586]
      {
        unknown ind[142603] "index var" "insert auto destroy"
        (480986 'end of statement')
        (142605 'move' ind[142603] _indexOfInterest[142584])
        (480987 'end of statement' ind[142603])
        {
          (142581 call(142576 call (partial) add _mt[243] lhs[142547]) ind[142603])
          (480989 'end of statement' lhs[142547] ind[142603])
        }
        label _continueLabel[142589]
        _indexOfInterest[142584]
        _iterator[142585]
      }
      label _breakLabel[142590]
    }
    (519388 'move' ret[519383](519387 'deref' lhs[142547]))
    gotoReturn _end_chpl__coerceMove[519381] _end_chpl__coerceMove[519381]
    (480992 'end of statement' lhs[142547])
    label _end_chpl__coerceMove[519381]
    (519385 return ret[519383])
  }
  function chpl__coerceCopy[142628](arg dstType[142625]:_domain[125902](?), arg rhs[142630]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519394] "RVV" "temp"
    unknown lhs[142633] "dead at end of block" "insert auto destroy"
    (543288 'default init var' lhs[142633] dstType[142625])
    (142636 'end of statement')
    unknown call_tmp[666012] "expr temp" "maybe param" "maybe type" "temp"
    (666015 'move' call_tmp[666012](142641 call isRectangularDom lhs[142633]))
    unknown call_tmp[666017] "expr temp" "maybe param" "maybe type" "temp"
    (666020 'move' call_tmp[666017](142647 call _cond_test call_tmp[666012]))
    if call_tmp[666017]
    {
      (142645 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142657 call(142653 call (partial) clear _mt[243] lhs[142633]))
    (480995 'end of statement' lhs[142633])
    {
      unknown _indexOfInterest[142670] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142671] "expr temp" "temp"
      (142680 'move' _iterator[142671](142678 call _getIterator rhs[142630]))
      Defer
      {
        {
          (142696 call _freeIterator _iterator[142671])
        }
      }
      { scopeless type
        (142685 'move' _indexOfInterest[142670](142682 call iteratorIndex _iterator[142671]))
      }
      ForLoop[142672]
      {
        unknown ind[142689] "index var" "insert auto destroy"
        (480998 'end of statement')
        (142691 'move' ind[142689] _indexOfInterest[142670])
        (480999 'end of statement' ind[142689])
        {
          (142667 call(142662 call (partial) add _mt[243] lhs[142633]) ind[142689])
          (481001 'end of statement' lhs[142633] ind[142689])
        }
        label _continueLabel[142675]
        _indexOfInterest[142670]
        _iterator[142671]
      }
      label _breakLabel[142676]
    }
    (519399 'move' ret[519394](519398 'deref' lhs[142633]))
    gotoReturn _end_chpl__coerceCopy[519392] _end_chpl__coerceCopy[519392]
    (481004 'end of statement' lhs[142633])
    label _end_chpl__coerceCopy[519392]
    (519396 return ret[519394])
  }
  function chpl__coerceMove[142714](arg dstType[142711]:_domain[125902](?), in arg rhs[142716]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519405] "RVV" "temp"
    unknown lhs[142719] "dead at end of block" "insert auto destroy"
    (543290 'default init var' lhs[142719] dstType[142711])
    (142722 'end of statement')
    unknown call_tmp[666026] "expr temp" "maybe param" "maybe type" "temp"
    (666029 'move' call_tmp[666026](142727 call isRectangularDom lhs[142719]))
    unknown call_tmp[666031] "expr temp" "maybe param" "maybe type" "temp"
    (666034 'move' call_tmp[666031](142733 call _cond_test call_tmp[666026]))
    if call_tmp[666031]
    {
      (142731 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142743 call(142739 call (partial) clear _mt[243] lhs[142719]))
    (481007 'end of statement' lhs[142719])
    {
      unknown _indexOfInterest[142756] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142757] "expr temp" "temp"
      (142766 'move' _iterator[142757](142764 call _getIterator rhs[142716]))
      Defer
      {
        {
          (142782 call _freeIterator _iterator[142757])
        }
      }
      { scopeless type
        (142771 'move' _indexOfInterest[142756](142768 call iteratorIndex _iterator[142757]))
      }
      ForLoop[142758]
      {
        unknown ind[142775] "index var" "insert auto destroy"
        (481010 'end of statement')
        (142777 'move' ind[142775] _indexOfInterest[142756])
        (481011 'end of statement' ind[142775])
        {
          (142753 call(142748 call (partial) add _mt[243] lhs[142719]) ind[142775])
          (481013 'end of statement' lhs[142719] ind[142775])
        }
        label _continueLabel[142761]
        _indexOfInterest[142756]
        _iterator[142757]
      }
      label _breakLabel[142762]
    }
    (519410 'move' ret[519405](519409 'deref' lhs[142719]))
    gotoReturn _end_chpl__coerceMove[519403] _end_chpl__coerceMove[519403]
    (481016 'end of statement' lhs[142719])
    label _end_chpl__coerceMove[519403]
    (519407 return ret[519405])
  }
  function chpl__coerceCopy[142800](arg dstType[142797]:_array[133588](?), arg rhs[142803]:_array[133588](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519416] "RVV" "temp"
    unknown eltType[142810] "dead at end of block" "insert auto destroy" "type variable"(142809 call chpl__eltTypeFromArrayRuntimeType dstType[142797])
    (543295 'move' eltType[142810](543293 call chpl__eltTypeFromArrayRuntimeType dstType[142797]))
    const dom[142818] "dead at end of block" "const" "ref var"
    unknown call_tmp[666040] "expr temp" "maybe param" "maybe type" "temp"
    (666043 'move' call_tmp[666040](142817 call chpl__domainFromArrayRuntimeType dstType[142797]))
    (543298 'move' dom[142818](543297 'addr of' call_tmp[666040]))
    (142821 'end of statement')
    unknown call_tmp[666047] "maybe param" "maybe type" "temp"
    (666050 'move' call_tmp[666047](142830 call(142823 call (partial) buildArray _mt[243] dom[142818]) eltType[142810](initElts = 0)))
    unknown lhs[142831] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543300 'init var' lhs[142831] call_tmp[666047])
    (142834 'end of statement' dom[142818] eltType[142810])
    unknown call_tmp[666054] "expr temp" "maybe param" "maybe type" "temp"
    (666057 'move' call_tmp[666054](142836 call rank _mt[243] lhs[142831]))
    unknown call_tmp[666061] "expr temp" "maybe param" "maybe type" "temp"
    (666064 'move' call_tmp[666061](142840 call rank _mt[243] rhs[142803]))
    unknown call_tmp[666066] "expr temp" "maybe param" "maybe type" "temp"
    (666069 'move' call_tmp[666066](142843 call != call_tmp[666054] call_tmp[666061]))
    unknown call_tmp[666071] "expr temp" "maybe param" "maybe type" "temp"
    (666074 'move' call_tmp[666071](142850 call _cond_test call_tmp[666066]))
    if call_tmp[666071]
    {
      (142848 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666076] "expr temp" "maybe param" "maybe type" "temp"
    (666079 'move' call_tmp[666076](142858 call isCopyableType eltType[142810]))
    unknown call_tmp[666081] "expr temp" "maybe param" "maybe type" "temp"
    (666084 'move' call_tmp[666081](142859 call ! call_tmp[666076]))
    unknown call_tmp[666086] "expr temp" "maybe param" "maybe type" "temp"
    (666089 'move' call_tmp[666086](142903 call _cond_test call_tmp[666081]))
    if call_tmp[666086]
    {
      unknown call_tmp[666091] "expr temp" "maybe param" "maybe type" "temp"
      (666094 'move' call_tmp[666091](142882 call _cast string[26] eltType[142810]))
      (142901 call compilerError "Cannot copy-initialize array because element type '" call_tmp[666091] "' cannot be copy-initialized")
      (481021 'end of statement' eltType[142810])
    }
    unknown call_tmp[666098] "expr temp" "maybe param" "maybe type" "temp"
    (666101 'move' call_tmp[666098](142909 call _value _mt[243] rhs[142803]))
    unknown call_tmp[666103] "expr temp" "maybe param" "maybe type" "temp"
    (666106 'move' call_tmp[666103](142913 call == call_tmp[666098] nil[44]))
    unknown call_tmp[666108] "expr temp" "maybe param" "maybe type" "temp"
    (666111 'move' call_tmp[666108](142977 call _cond_test call_tmp[666103]))
    if call_tmp[666108]
    {
    }
    {
      unknown call_tmp[666115] "expr temp" "maybe param" "maybe type" "temp"
      (666118 'move' call_tmp[666115](142917 call _value _mt[243] lhs[142831]))
      unknown call_tmp[666122] "expr temp" "maybe param" "maybe type" "temp"
      (666125 'move' call_tmp[666122](142921 call _value _mt[243] rhs[142803]))
      unknown call_tmp[666127] "expr temp" "maybe param" "maybe type" "temp"
      (666130 'move' call_tmp[666127](142924 call == call_tmp[666115] call_tmp[666122]))
      unknown call_tmp[666132] "expr temp" "maybe param" "maybe type" "temp"
      (666135 'move' call_tmp[666132](142972 call _cond_test call_tmp[666127]))
      if call_tmp[666132]
      {
      }
      {
        unknown tmp[426900] "maybe param" "temp"
        unknown call_tmp[666139] "expr temp" "maybe param" "maybe type" "temp"
        (666142 'move' call_tmp[666139](142928 call size _mt[243] lhs[142831]))
        (426911 'move' tmp[426900](142932 call == call_tmp[666139] 0))
        unknown call_tmp[666144] "expr temp" "maybe param" "maybe type" "temp"
        (666147 'move' call_tmp[666144](426913 call _cond_invalid tmp[426900]))
        if call_tmp[666144]
        {
          (426916 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568169] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568170] "maybe param" "temp"
        unknown call_tmp[666149] "expr temp" "maybe param" "maybe type" "temp"
        (666152 'move' call_tmp[666149](426901 call isTrue tmp[426900]))
        (568175 'move' tmp[568170](568173 call _cond_test call_tmp[666149]))
        if tmp[568170]
        {
          unknown tmp[568177] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666156] "expr temp" "maybe param" "maybe type" "temp"
          (666159 'move' call_tmp[666156](142935 call size _mt[243] rhs[142803]))
          unknown call_tmp[666161] "expr temp" "maybe param" "maybe type" "temp"
          (666164 'move' call_tmp[666161](142939 call == call_tmp[666156] 0))
          (568179 'move' tmp[568177](426904 call isTrue call_tmp[666161]))
          (568184 'move' tmp[568169](568181 '_paramFoldLogical' tmp[568170] tmp[568177]))
        }
        {
          (568189 'move' tmp[568169](568186 '_paramFoldLogical' tmp[568170] 0))
        }
        unknown call_tmp[666166] "expr temp" "maybe param" "maybe type" "temp"
        (666169 'move' call_tmp[666166](142968 call _cond_test tmp[568169]))
        if call_tmp[666166]
        {
        }
        {
          unknown call_tmp[666171] "expr temp" "maybe param" "maybe type" "temp"
          (666174 'move' call_tmp[666171](142951 call _cond_test 1))
          if call_tmp[666171]
          {
            (142949 call checkArrayShapesUponAssignment lhs[142831] rhs[142803])
            (481024 'end of statement' lhs[142831])
          }
          (142966 call chpl__uncheckedArrayTransfer lhs[142831] rhs[142803](kind = initCopy[137983]))
          (481026 'end of statement' lhs[142831])
        }
      }
    }
    unknown call_tmp[666178] "expr temp" "maybe param" "maybe type" "temp"
    (666181 'move' call_tmp[666178](142983 call _value _mt[243] lhs[142831]))
    (142992 call(142988 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666178]))
    (481028 'end of statement' lhs[142831])
    (519421 'move' ret[519416](519420 'deref' lhs[142831]))
    gotoReturn _end_chpl__coerceCopy[519414] _end_chpl__coerceCopy[519414]
    (481030 'end of statement' lhs[142831])
    label _end_chpl__coerceCopy[519414]
    (519418 return ret[519416])
  }
  function chpl__coerceMove[143005](arg dstType[143002]:_array[133588](?), in arg rhs[143008]:_array[133588](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519427] "RVV" "temp"
    unknown eltType[143015] "dead at end of block" "insert auto destroy" "type variable"(143014 call chpl__eltTypeFromArrayRuntimeType dstType[143002])
    (543305 'move' eltType[143015](543303 call chpl__eltTypeFromArrayRuntimeType dstType[143002]))
    const dom[143023] "dead at end of block" "const" "ref var"
    unknown call_tmp[666185] "expr temp" "maybe param" "maybe type" "temp"
    (666188 'move' call_tmp[666185](143022 call chpl__domainFromArrayRuntimeType dstType[143002]))
    (543308 'move' dom[143023](543307 'addr of' call_tmp[666185]))
    (143026 'end of statement')
    { scopeless type
      unknown call_type_tmp[492297] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[666192] "expr temp" "maybe param" "maybe type" "temp"
      (666195 'move' call_tmp[666192](143028 call _instance _mt[243] rhs[143008]))
      (492301 'move' call_type_tmp[492297](143031 'typeof' call_tmp[666192]))
    }
    unknown call_tmp[666197] "expr temp" "maybe param" "maybe type" "temp"
    (666200 'move' call_tmp[666197](143035 call chpl__instanceTypeFromArrayRuntimeType dstType[143002]))
    unknown call_tmp[666202] "maybe param" "maybe type" "temp"
    (666205 'move' call_tmp[666202](143036 call != call_type_tmp[492297] call_tmp[666197]))
    unknown typeMismatch[143038] "dead at end of block" "param"
    (543310 'init var' typeMismatch[143038] call_tmp[666202])
    (143041 'end of statement')
    unknown call_tmp[666207] "maybe param" "maybe type" "temp"
    (666210 'move' call_tmp[666207](143043 call ! typeMismatch[143038]))
    unknown moveElts[143045] "dead at end of block" "param"
    (543312 'init var' moveElts[143045] call_tmp[666207])
    (143048 'end of statement')
    unknown tmp[426921] "maybe param" "temp"
    (426932 'move' tmp[426921] moveElts[143045])
    unknown call_tmp[666212] "expr temp" "maybe param" "maybe type" "temp"
    (666215 'move' call_tmp[666212](426934 call _cond_invalid tmp[426921]))
    if call_tmp[666212]
    {
      (426937 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568196] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568197] "maybe param" "temp"
    unknown call_tmp[666217] "expr temp" "maybe param" "maybe type" "temp"
    (666220 'move' call_tmp[666217](426922 call isTrue tmp[426921]))
    (568202 'move' tmp[568197](568200 call _cond_test call_tmp[666217]))
    if tmp[568197]
    {
      unknown tmp[568204] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666224] "expr temp" "maybe param" "maybe type" "temp"
      (666227 'move' call_tmp[666224](143051 call _instance _mt[243] dom[143023]))
      unknown call_tmp[666231] "expr temp" "maybe param" "maybe type" "temp"
      (666234 'move' call_tmp[666231](143055 call _dom _mt[243] rhs[143008]))
      unknown call_tmp[666238] "expr temp" "maybe param" "maybe type" "temp"
      (666241 'move' call_tmp[666238](143058 call _instance _mt[243] call_tmp[666231]))
      unknown call_tmp[666243] "expr temp" "maybe param" "maybe type" "temp"
      (666246 'move' call_tmp[666243](143061 call == call_tmp[666224] call_tmp[666238]))
      (568206 'move' tmp[568204](426925 call isTrue call_tmp[666243]))
      (568211 'move' tmp[568196](568208 '_paramFoldLogical' tmp[568197] tmp[568204]))
    }
    {
      (568216 'move' tmp[568196](568213 '_paramFoldLogical' tmp[568197] 0))
    }
    unknown call_tmp[666248] "expr temp" "maybe param" "maybe type" "temp"
    (666251 'move' call_tmp[666248](143069 call _cond_test tmp[568196]))
    if call_tmp[666248]
    {
      (519432 'move' ret[519427](519431 'deref' rhs[143008]))
      gotoReturn _end_chpl__coerceMove[519425] _end_chpl__coerceMove[519425]
    }
    unknown call_tmp[666255] "maybe param" "maybe type" "temp"
    (666258 'move' call_tmp[666255](143081 call(143074 call (partial) buildArray _mt[243] dom[143023]) eltType[143015](initElts = 0)))
    unknown lhs[143082] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543314 'init var' lhs[143082] call_tmp[666255])
    (143085 'end of statement' dom[143023] eltType[143015])
    unknown call_tmp[666262] "expr temp" "maybe param" "maybe type" "temp"
    (666265 'move' call_tmp[666262](143087 call rank _mt[243] lhs[143082]))
    unknown call_tmp[666269] "expr temp" "maybe param" "maybe type" "temp"
    (666272 'move' call_tmp[666269](143091 call rank _mt[243] rhs[143008]))
    unknown call_tmp[666274] "expr temp" "maybe param" "maybe type" "temp"
    (666277 'move' call_tmp[666274](143094 call != call_tmp[666262] call_tmp[666269]))
    unknown call_tmp[666279] "expr temp" "maybe param" "maybe type" "temp"
    (666282 'move' call_tmp[666279](143101 call _cond_test call_tmp[666274]))
    if call_tmp[666279]
    {
      (143099 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666286] "expr temp" "maybe param" "maybe type" "temp"
    (666289 'move' call_tmp[666286](143107 call _value _mt[243] rhs[143008]))
    unknown call_tmp[666291] "expr temp" "maybe param" "maybe type" "temp"
    (666294 'move' call_tmp[666291](143111 call == call_tmp[666286] nil[44]))
    unknown call_tmp[666296] "expr temp" "maybe param" "maybe type" "temp"
    (666299 'move' call_tmp[666296](143188 call _cond_test call_tmp[666291]))
    if call_tmp[666296]
    {
    }
    {
      unknown call_tmp[666303] "expr temp" "maybe param" "maybe type" "temp"
      (666306 'move' call_tmp[666303](143115 call _value _mt[243] lhs[143082]))
      unknown call_tmp[666310] "expr temp" "maybe param" "maybe type" "temp"
      (666313 'move' call_tmp[666310](143119 call _value _mt[243] rhs[143008]))
      unknown call_tmp[666315] "expr temp" "maybe param" "maybe type" "temp"
      (666318 'move' call_tmp[666315](143122 call == call_tmp[666303] call_tmp[666310]))
      unknown call_tmp[666320] "expr temp" "maybe param" "maybe type" "temp"
      (666323 'move' call_tmp[666320](143183 call _cond_test call_tmp[666315]))
      if call_tmp[666320]
      {
      }
      {
        unknown tmp[426942] "maybe param" "temp"
        unknown call_tmp[666327] "expr temp" "maybe param" "maybe type" "temp"
        (666330 'move' call_tmp[666327](143126 call size _mt[243] lhs[143082]))
        (426953 'move' tmp[426942](143130 call == call_tmp[666327] 0))
        unknown call_tmp[666332] "expr temp" "maybe param" "maybe type" "temp"
        (666335 'move' call_tmp[666332](426955 call _cond_invalid tmp[426942]))
        if call_tmp[666332]
        {
          (426958 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568223] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568224] "maybe param" "temp"
        unknown call_tmp[666337] "expr temp" "maybe param" "maybe type" "temp"
        (666340 'move' call_tmp[666337](426943 call isTrue tmp[426942]))
        (568229 'move' tmp[568224](568227 call _cond_test call_tmp[666337]))
        if tmp[568224]
        {
          unknown tmp[568231] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666344] "expr temp" "maybe param" "maybe type" "temp"
          (666347 'move' call_tmp[666344](143133 call size _mt[243] rhs[143008]))
          unknown call_tmp[666349] "expr temp" "maybe param" "maybe type" "temp"
          (666352 'move' call_tmp[666349](143137 call == call_tmp[666344] 0))
          (568233 'move' tmp[568231](426946 call isTrue call_tmp[666349]))
          (568238 'move' tmp[568223](568235 '_paramFoldLogical' tmp[568224] tmp[568231]))
        }
        {
          (568243 'move' tmp[568223](568240 '_paramFoldLogical' tmp[568224] 0))
        }
        unknown call_tmp[666354] "expr temp" "maybe param" "maybe type" "temp"
        (666357 'move' call_tmp[666354](143179 call _cond_test tmp[568223]))
        if call_tmp[666354]
        {
        }
        {
          unknown call_tmp[666359] "expr temp" "maybe param" "maybe type" "temp"
          (666362 'move' call_tmp[666359](143149 call _cond_test 1))
          if call_tmp[666359]
          {
            (143147 call checkArrayShapesUponAssignment lhs[143082] rhs[143008])
            (481038 'end of statement' lhs[143082])
          }
          unknown kind[143167] "dead at end of block" "param"
          unknown tmp[568250] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568251] "maybe param" "temp"
          (568256 'move' tmp[568251](568254 call _cond_test moveElts[143045]))
          if tmp[568251]
          {
            (568261 'move' tmp[568250](568258 '_paramFoldLogical' tmp[568251] move[137981]))
          }
          {
            (568266 'move' tmp[568250](568263 '_paramFoldLogical' tmp[568251] initCopy[137983]))
          }
          (543316 'init var' kind[143167] tmp[568250])
          (143170 'end of statement')
          (143177 call chpl__uncheckedArrayTransfer lhs[143082] rhs[143008](kind = kind[143167]))
          (481040 'end of statement' lhs[143082])
        }
      }
    }
    unknown call_tmp[666366] "expr temp" "maybe param" "maybe type" "temp"
    (666369 'move' call_tmp[666366](143195 call _unowned _mt[243] rhs[143008]))
    unknown call_tmp[666373] "expr temp" "maybe param" "maybe type" "temp"
    (666376 'move' call_tmp[666373](143200 call _instance _mt[243] rhs[143008]))
    unknown call_tmp[666378] "expr temp" "maybe param" "maybe type" "temp"
    (666381 'move' call_tmp[666378](143204 call ! moveElts[143045]))
    (143207 call _do_destroy_arr call_tmp[666366] call_tmp[666373](deinitElts = call_tmp[666378]))
    (481042 'end of statement')
    unknown call_tmp[666385] "expr temp" "maybe param" "maybe type" "temp"
    (666388 'move' call_tmp[666385](143210 call _value _mt[243] lhs[143082]))
    (143217 call(143213 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666385]))
    (481043 'end of statement' lhs[143082])
    (519437 'move' ret[519427](519436 'deref' lhs[143082]))
    gotoReturn _end_chpl__coerceMove[519425] _end_chpl__coerceMove[519425]
    (481045 'end of statement' lhs[143082])
    label _end_chpl__coerceMove[519425]
    (519429 return ret[519427])
  }
  function chpl__coerceCopy[143230](arg dstType[143227]:_array[133588](?), arg rhs[143233]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519443] "RVV" "temp"
    unknown eltType[143240] "dead at end of block" "insert auto destroy" "type variable"(143239 call chpl__eltTypeFromArrayRuntimeType dstType[143227])
    (543321 'move' eltType[143240](543319 call chpl__eltTypeFromArrayRuntimeType dstType[143227]))
    const dom[143248] "dead at end of block" "const" "ref var"
    unknown call_tmp[666392] "expr temp" "maybe param" "maybe type" "temp"
    (666395 'move' call_tmp[666392](143247 call chpl__domainFromArrayRuntimeType dstType[143227]))
    (543324 'move' dom[143248](543323 'addr of' call_tmp[666392]))
    (143251 'end of statement')
    unknown call_tmp[666399] "maybe param" "maybe type" "temp"
    (666402 'move' call_tmp[666399](143260 call(143253 call (partial) buildArray _mt[243] dom[143248]) eltType[143240](initElts = 0)))
    unknown lhs[143261] "dead at end of block" "insert auto destroy" "no copy"
    (543326 'init var' lhs[143261] call_tmp[666399])
    (143264 'end of statement' dom[143248] eltType[143240])
    unknown call_tmp[666406] "expr temp" "maybe param" "maybe type" "temp"
    (666409 'move' call_tmp[666406](143266 call rank _mt[243] lhs[143261]))
    unknown call_tmp[666413] "expr temp" "maybe param" "maybe type" "temp"
    (666416 'move' call_tmp[666413](143270 call rank _mt[243] rhs[143233]))
    unknown call_tmp[666418] "expr temp" "maybe param" "maybe type" "temp"
    (666421 'move' call_tmp[666418](143273 call != call_tmp[666406] call_tmp[666413]))
    unknown call_tmp[666423] "expr temp" "maybe param" "maybe type" "temp"
    (666426 'move' call_tmp[666423](143280 call _cond_test call_tmp[666418]))
    if call_tmp[666423]
    {
      (143278 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426963] "maybe param" "temp"
    (426974 'move' tmp[426963](143288 call isAssociativeDom rhs[143233]))
    unknown call_tmp[666428] "expr temp" "maybe param" "maybe type" "temp"
    (666431 'move' call_tmp[666428](426976 call _cond_invalid tmp[426963]))
    if call_tmp[666428]
    {
      (426979 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568273] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568274] "maybe param" "temp"
    unknown call_tmp[666433] "expr temp" "maybe param" "maybe type" "temp"
    (666436 'move' call_tmp[666433](426964 call isTrue tmp[426963]))
    (568279 'move' tmp[568274](568277 call _cond_test call_tmp[666433]))
    if tmp[568274]
    {
      unknown tmp[568281] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666438] "expr temp" "maybe param" "maybe type" "temp"
      (666441 'move' call_tmp[666438](143292 call isRectangularArr lhs[143261]))
      (568283 'move' tmp[568281](426967 call isTrue call_tmp[666438]))
      (568288 'move' tmp[568273](568285 '_paramFoldLogical' tmp[568274] tmp[568281]))
    }
    {
      (568293 'move' tmp[568273](568290 '_paramFoldLogical' tmp[568274] 0))
    }
    unknown call_tmp[666443] "expr temp" "maybe param" "maybe type" "temp"
    (666446 'move' call_tmp[666443](143300 call _cond_test tmp[568273]))
    if call_tmp[666443]
    {
      (143298 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666448] "expr temp" "maybe param" "maybe type" "temp"
    (666451 'move' call_tmp[666448](143308 call isPODType eltType[143240]))
    unknown call_tmp[666453] "expr temp" "maybe param" "maybe type" "temp"
    (666456 'move' call_tmp[666453](143309 call ! call_tmp[666448]))
    unknown call_tmp[666458] "expr temp" "maybe param" "maybe type" "temp"
    (666461 'move' call_tmp[666458](143332 call _cond_test call_tmp[666453]))
    if call_tmp[666458]
    {
      (143330 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143346 call chpl__transferArray lhs[143261] rhs[143233](kind = initCopy[137983]))
    (481053 'end of statement' lhs[143261])
    unknown call_tmp[666465] "expr temp" "maybe param" "maybe type" "temp"
    (666468 'move' call_tmp[666465](143349 call _value _mt[243] lhs[143261]))
    (143356 call(143352 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666465]))
    (481055 'end of statement' lhs[143261])
    (519448 'move' ret[519443](519447 'deref' lhs[143261]))
    gotoReturn _end_chpl__coerceCopy[519441] _end_chpl__coerceCopy[519441]
    (481057 'end of statement' lhs[143261])
    label _end_chpl__coerceCopy[519441]
    (519445 return ret[519443])
  }
  function chpl__coerceMove[143369](arg dstType[143366]:_array[133588](?), in arg rhs[143372]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519454] "RVV" "temp"
    unknown eltType[143379] "dead at end of block" "insert auto destroy" "type variable"(143378 call chpl__eltTypeFromArrayRuntimeType dstType[143366])
    (543331 'move' eltType[143379](543329 call chpl__eltTypeFromArrayRuntimeType dstType[143366]))
    const dom[143387] "dead at end of block" "const" "ref var"
    unknown call_tmp[666472] "expr temp" "maybe param" "maybe type" "temp"
    (666475 'move' call_tmp[666472](143386 call chpl__domainFromArrayRuntimeType dstType[143366]))
    (543334 'move' dom[143387](543333 'addr of' call_tmp[666472]))
    (143390 'end of statement')
    unknown call_tmp[666479] "maybe param" "maybe type" "temp"
    (666482 'move' call_tmp[666479](143399 call(143392 call (partial) buildArray _mt[243] dom[143387]) eltType[143379](initElts = 0)))
    unknown lhs[143400] "dead at end of block" "insert auto destroy" "no copy"
    (543336 'init var' lhs[143400] call_tmp[666479])
    (143403 'end of statement' dom[143387] eltType[143379])
    unknown call_tmp[666486] "expr temp" "maybe param" "maybe type" "temp"
    (666489 'move' call_tmp[666486](143405 call rank _mt[243] lhs[143400]))
    unknown call_tmp[666493] "expr temp" "maybe param" "maybe type" "temp"
    (666496 'move' call_tmp[666493](143409 call rank _mt[243] rhs[143372]))
    unknown call_tmp[666498] "expr temp" "maybe param" "maybe type" "temp"
    (666501 'move' call_tmp[666498](143412 call != call_tmp[666486] call_tmp[666493]))
    unknown call_tmp[666503] "expr temp" "maybe param" "maybe type" "temp"
    (666506 'move' call_tmp[666503](143419 call _cond_test call_tmp[666498]))
    if call_tmp[666503]
    {
      (143417 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426984] "maybe param" "temp"
    (426995 'move' tmp[426984](143427 call isAssociativeDom rhs[143372]))
    unknown call_tmp[666508] "expr temp" "maybe param" "maybe type" "temp"
    (666511 'move' call_tmp[666508](426997 call _cond_invalid tmp[426984]))
    if call_tmp[666508]
    {
      (427000 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568300] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568301] "maybe param" "temp"
    unknown call_tmp[666513] "expr temp" "maybe param" "maybe type" "temp"
    (666516 'move' call_tmp[666513](426985 call isTrue tmp[426984]))
    (568306 'move' tmp[568301](568304 call _cond_test call_tmp[666513]))
    if tmp[568301]
    {
      unknown tmp[568308] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666518] "expr temp" "maybe param" "maybe type" "temp"
      (666521 'move' call_tmp[666518](143431 call isRectangularArr lhs[143400]))
      (568310 'move' tmp[568308](426988 call isTrue call_tmp[666518]))
      (568315 'move' tmp[568300](568312 '_paramFoldLogical' tmp[568301] tmp[568308]))
    }
    {
      (568320 'move' tmp[568300](568317 '_paramFoldLogical' tmp[568301] 0))
    }
    unknown call_tmp[666523] "expr temp" "maybe param" "maybe type" "temp"
    (666526 'move' call_tmp[666523](143439 call _cond_test tmp[568300]))
    if call_tmp[666523]
    {
      (143437 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666528] "expr temp" "maybe param" "maybe type" "temp"
    (666531 'move' call_tmp[666528](143447 call isPODType eltType[143379]))
    unknown call_tmp[666533] "expr temp" "maybe param" "maybe type" "temp"
    (666536 'move' call_tmp[666533](143448 call ! call_tmp[666528]))
    unknown call_tmp[666538] "expr temp" "maybe param" "maybe type" "temp"
    (666541 'move' call_tmp[666538](143455 call _cond_test call_tmp[666533]))
    if call_tmp[666538]
    {
      (143453 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143469 call chpl__transferArray lhs[143400] rhs[143372](kind = initCopy[137983]))
    (481065 'end of statement' lhs[143400])
    unknown call_tmp[666545] "expr temp" "maybe param" "maybe type" "temp"
    (666548 'move' call_tmp[666545](143472 call _value _mt[243] lhs[143400]))
    (143479 call(143475 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666545]))
    (481067 'end of statement' lhs[143400])
    (519459 'move' ret[519454](519458 'deref' lhs[143400]))
    gotoReturn _end_chpl__coerceMove[519452] _end_chpl__coerceMove[519452]
    (481069 'end of statement' lhs[143400])
    label _end_chpl__coerceMove[519452]
    (519456 return ret[519454])
  }
  function chpl__coerceCopy[143492](arg dstType[143489]:_array[133588](?), arg rhs[143498]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519465] "RVV" "temp"
    unknown eltType[143505] "dead at end of block" "insert auto destroy" "type variable"(143504 call chpl__eltTypeFromArrayRuntimeType dstType[143489])
    (543341 'move' eltType[143505](543339 call chpl__eltTypeFromArrayRuntimeType dstType[143489]))
    const dom[143513] "dead at end of block" "const" "ref var"
    unknown call_tmp[666552] "expr temp" "maybe param" "maybe type" "temp"
    (666555 'move' call_tmp[666552](143512 call chpl__domainFromArrayRuntimeType dstType[143489]))
    (543344 'move' dom[143513](543343 'addr of' call_tmp[666552]))
    (143516 'end of statement')
    unknown call_tmp[666559] "maybe param" "maybe type" "temp"
    (666562 'move' call_tmp[666559](143525 call(143518 call (partial) buildArray _mt[243] dom[143513]) eltType[143505](initElts = 0)))
    unknown lhs[143526] "dead at end of block" "insert auto destroy" "no copy"
    (543346 'init var' lhs[143526] call_tmp[666559])
    (143529 'end of statement' dom[143513] eltType[143505])
    unknown call_tmp[666566] "expr temp" "maybe param" "maybe type" "temp"
    (666569 'move' call_tmp[666566](143531 call rank _mt[243] lhs[143526]))
    unknown call_tmp[666571] "expr temp" "maybe param" "maybe type" "temp"
    (666574 'move' call_tmp[666571](143535 call != call_tmp[666566] 1))
    unknown call_tmp[666576] "expr temp" "maybe param" "maybe type" "temp"
    (666579 'move' call_tmp[666576](143542 call _cond_test call_tmp[666571]))
    if call_tmp[666576]
    {
      (143540 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143556 call chpl__transferArray lhs[143526] rhs[143498](kind = initCopy[137983]))
    (481074 'end of statement' lhs[143526])
    unknown call_tmp[666583] "expr temp" "maybe param" "maybe type" "temp"
    (666586 'move' call_tmp[666583](143559 call _value _mt[243] lhs[143526]))
    (143566 call(143562 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666583]))
    (481076 'end of statement' lhs[143526])
    (519470 'move' ret[519465](519469 'deref' lhs[143526]))
    gotoReturn _end_chpl__coerceCopy[519463] _end_chpl__coerceCopy[519463]
    (481078 'end of statement' lhs[143526])
    label _end_chpl__coerceCopy[519463]
    (519467 return ret[519465])
  }
  function chpl__coerceMove[143579](arg dstType[143576]:_array[133588](?), in arg rhs[143585]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519476] "RVV" "temp"
    unknown eltType[143592] "dead at end of block" "insert auto destroy" "type variable"(143591 call chpl__eltTypeFromArrayRuntimeType dstType[143576])
    (543351 'move' eltType[143592](543349 call chpl__eltTypeFromArrayRuntimeType dstType[143576]))
    const dom[143600] "dead at end of block" "const" "ref var"
    unknown call_tmp[666590] "expr temp" "maybe param" "maybe type" "temp"
    (666593 'move' call_tmp[666590](143599 call chpl__domainFromArrayRuntimeType dstType[143576]))
    (543354 'move' dom[143600](543353 'addr of' call_tmp[666590]))
    (143603 'end of statement')
    unknown call_tmp[666597] "maybe param" "maybe type" "temp"
    (666600 'move' call_tmp[666597](143612 call(143605 call (partial) buildArray _mt[243] dom[143600]) eltType[143592](initElts = 0)))
    unknown lhs[143613] "dead at end of block" "insert auto destroy" "no copy"
    (543356 'init var' lhs[143613] call_tmp[666597])
    (143616 'end of statement' dom[143600] eltType[143592])
    unknown call_tmp[666604] "expr temp" "maybe param" "maybe type" "temp"
    (666607 'move' call_tmp[666604](143618 call rank _mt[243] lhs[143613]))
    unknown call_tmp[666609] "expr temp" "maybe param" "maybe type" "temp"
    (666612 'move' call_tmp[666609](143622 call != call_tmp[666604] 1))
    unknown call_tmp[666614] "expr temp" "maybe param" "maybe type" "temp"
    (666617 'move' call_tmp[666614](143629 call _cond_test call_tmp[666609]))
    if call_tmp[666614]
    {
      (143627 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143643 call chpl__transferArray lhs[143613] rhs[143585](kind = initCopy[137983]))
    (481083 'end of statement' lhs[143613])
    unknown call_tmp[666621] "expr temp" "maybe param" "maybe type" "temp"
    (666624 'move' call_tmp[666621](143646 call _value _mt[243] lhs[143613]))
    (143653 call(143649 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666621]))
    (481085 'end of statement' lhs[143613])
    (519481 'move' ret[519476](519480 'deref' lhs[143613]))
    gotoReturn _end_chpl__coerceMove[519474] _end_chpl__coerceMove[519474]
    (481087 'end of statement' lhs[143613])
    label _end_chpl__coerceMove[519474]
    (519478 return ret[519476])
  }
  function chpl__coerceCopy[143666](arg dstType[143663]:_array[133588](?), arg rhs[143669]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519487] "RVV" "temp"
    unknown eltType[143676] "dead at end of block" "insert auto destroy" "type variable"(143675 call chpl__eltTypeFromArrayRuntimeType dstType[143663])
    (543361 'move' eltType[143676](543359 call chpl__eltTypeFromArrayRuntimeType dstType[143663]))
    const dom[143684] "dead at end of block" "const" "ref var"
    unknown call_tmp[666628] "expr temp" "maybe param" "maybe type" "temp"
    (666631 'move' call_tmp[666628](143683 call chpl__domainFromArrayRuntimeType dstType[143663]))
    (543364 'move' dom[143684](543363 'addr of' call_tmp[666628]))
    (143687 'end of statement')
    unknown call_tmp[666635] "maybe param" "maybe type" "temp"
    (666638 'move' call_tmp[666635](143696 call(143689 call (partial) buildArray _mt[243] dom[143684]) eltType[143676](initElts = 0)))
    unknown lhs[143697] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543366 'init var' lhs[143697] call_tmp[666635])
    (143700 'end of statement' dom[143684] eltType[143676])
    unknown call_tmp[666640] "expr temp" "maybe param" "maybe type" "temp"
    (666643 'move' call_tmp[666640](143704 call isRectangularArr lhs[143697]))
    unknown call_tmp[666645] "expr temp" "maybe param" "maybe type" "temp"
    (666648 'move' call_tmp[666645](143705 call ! call_tmp[666640]))
    unknown call_tmp[666650] "expr temp" "maybe param" "maybe type" "temp"
    (666653 'move' call_tmp[666650](143728 call _cond_test call_tmp[666645]))
    if call_tmp[666650]
    {
      (143726 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143741 call initArrFromTuple lhs[143697] rhs[143669] initCopy[137983])
    (481092 'end of statement' lhs[143697])
    unknown call_tmp[666657] "expr temp" "maybe param" "maybe type" "temp"
    (666660 'move' call_tmp[666657](143744 call _value _mt[243] lhs[143697]))
    (143751 call(143747 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666657]))
    (481094 'end of statement' lhs[143697])
    (519492 'move' ret[519487](519491 'deref' lhs[143697]))
    gotoReturn _end_chpl__coerceCopy[519485] _end_chpl__coerceCopy[519485]
    (481096 'end of statement' lhs[143697])
    label _end_chpl__coerceCopy[519485]
    (519489 return ret[519487])
  }
  function chpl__coerceMove[143764](arg dstType[143761]:_array[133588](?), in arg rhs[143767]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519498] "RVV" "temp"
    unknown eltType[143774] "dead at end of block" "insert auto destroy" "type variable"(143773 call chpl__eltTypeFromArrayRuntimeType dstType[143761])
    (543371 'move' eltType[143774](543369 call chpl__eltTypeFromArrayRuntimeType dstType[143761]))
    const dom[143782] "dead at end of block" "const" "ref var"
    unknown call_tmp[666664] "expr temp" "maybe param" "maybe type" "temp"
    (666667 'move' call_tmp[666664](143781 call chpl__domainFromArrayRuntimeType dstType[143761]))
    (543374 'move' dom[143782](543373 'addr of' call_tmp[666664]))
    (143785 'end of statement')
    unknown call_tmp[666671] "maybe param" "maybe type" "temp"
    (666674 'move' call_tmp[666671](143794 call(143787 call (partial) buildArray _mt[243] dom[143782]) eltType[143774](initElts = 0)))
    unknown lhs[143795] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543376 'init var' lhs[143795] call_tmp[666671])
    (143798 'end of statement' dom[143782] eltType[143774])
    unknown call_tmp[666676] "expr temp" "maybe param" "maybe type" "temp"
    (666679 'move' call_tmp[666676](143802 call isRectangularArr lhs[143795]))
    unknown call_tmp[666681] "expr temp" "maybe param" "maybe type" "temp"
    (666684 'move' call_tmp[666681](143803 call ! call_tmp[666676]))
    unknown call_tmp[666686] "expr temp" "maybe param" "maybe type" "temp"
    (666689 'move' call_tmp[666686](143810 call _cond_test call_tmp[666681]))
    if call_tmp[666686]
    {
      (143808 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143823 call initArrFromTuple lhs[143795] rhs[143767] move[137981])
    (481101 'end of statement' lhs[143795])
    unknown call_tmp[666693] "expr temp" "maybe param" "maybe type" "temp"
    (666696 'move' call_tmp[666693](143826 call _value _mt[243] lhs[143795]))
    (143833 call(143829 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666693]))
    (481103 'end of statement' lhs[143795])
    (519503 'move' ret[519498](519502 'deref' lhs[143795]))
    gotoReturn _end_chpl__coerceMove[519496] _end_chpl__coerceMove[519496]
    (481105 'end of statement' lhs[143795])
    label _end_chpl__coerceMove[519496]
    (519500 return ret[519498])
  }
  function chpl__coerceCopy[143846](arg dstType[143843]:_array[133588](?), arg rhs[143852] :
  (143851 call desyncEltType dstType[143843])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519509] "RVV" "temp"
    unknown eltType[143859] "dead at end of block" "insert auto destroy" "type variable"(143858 call chpl__eltTypeFromArrayRuntimeType dstType[143843])
    (543381 'move' eltType[143859](543379 call chpl__eltTypeFromArrayRuntimeType dstType[143843]))
    const dom[143867] "dead at end of block" "const" "ref var"
    unknown call_tmp[666700] "expr temp" "maybe param" "maybe type" "temp"
    (666703 'move' call_tmp[666700](143866 call chpl__domainFromArrayRuntimeType dstType[143843]))
    (543384 'move' dom[143867](543383 'addr of' call_tmp[666700]))
    (143870 'end of statement')
    unknown call_tmp[666707] "maybe param" "maybe type" "temp"
    (666710 'move' call_tmp[666707](143879 call(143872 call (partial) buildArray _mt[243] dom[143867]) eltType[143859](initElts = 0)))
    unknown lhs[143880] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543386 'init var' lhs[143880] call_tmp[666707])
    (143883 'end of statement' dom[143867] eltType[143859])
    Forall {
      induction variables:
        
        unknown e[143909] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143880]
      shadow variables:
        rhs[143887] 'in' intent outer var rhs[143852]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[666714] "maybe param" "maybe type" "temp"
        (666717 'move' call_tmp[666714](143893 call eltType _mt[243] lhs[143880]))
        unknown copy[143897] "dead at end of block" "no auto destroy"
        (543388 'init var' copy[143897] rhs[143887] call_tmp[666714])
        (143900 'end of statement' rhs[143887] lhs[143880])
        (143906 '=' e[143909] copy[143897])
        (481111 'end of statement' e[143909] copy[143897])
      }
    }
    unknown call_tmp[666721] "expr temp" "maybe param" "maybe type" "temp"
    (666724 'move' call_tmp[666721](143913 call _value _mt[243] lhs[143880]))
    (143920 call(143916 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666721]))
    (481114 'end of statement' lhs[143880])
    (519514 'move' ret[519509](519513 'deref' lhs[143880]))
    gotoReturn _end_chpl__coerceCopy[519507] _end_chpl__coerceCopy[519507]
    (481116 'end of statement' lhs[143880])
    label _end_chpl__coerceCopy[519507]
    (519511 return ret[519509])
  }
  function chpl__coerceMove[143933](arg dstType[143930]:_array[133588](?), in arg rhs[143939] :
  (143938 call desyncEltType dstType[143930])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519520] "RVV" "temp"
    unknown eltType[143946] "dead at end of block" "insert auto destroy" "type variable"(143945 call chpl__eltTypeFromArrayRuntimeType dstType[143930])
    (543393 'move' eltType[143946](543391 call chpl__eltTypeFromArrayRuntimeType dstType[143930]))
    const dom[143954] "dead at end of block" "const" "ref var"
    unknown call_tmp[666728] "expr temp" "maybe param" "maybe type" "temp"
    (666731 'move' call_tmp[666728](143953 call chpl__domainFromArrayRuntimeType dstType[143930]))
    (543396 'move' dom[143954](543395 'addr of' call_tmp[666728]))
    (143957 'end of statement')
    unknown call_tmp[666735] "maybe param" "maybe type" "temp"
    (666738 'move' call_tmp[666735](143966 call(143959 call (partial) buildArray _mt[243] dom[143954]) eltType[143946](initElts = 0)))
    unknown lhs[143967] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543398 'init var' lhs[143967] call_tmp[666735])
    (143970 'end of statement' dom[143954] eltType[143946])
    Forall {
      induction variables:
        
        unknown e[143993] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143967]
      shadow variables:
        rhs[143974] 'in' intent outer var rhs[143939]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[143981] "dead at end of block" "no auto destroy"
        (543400 'init var' copy[143981] rhs[143974] eltType[143946])
        (143984 'end of statement' rhs[143974] eltType[143946])
        (143990 '=' e[143993] copy[143981])
        (481122 'end of statement' e[143993] copy[143981])
      }
    }
    unknown call_tmp[666742] "expr temp" "maybe param" "maybe type" "temp"
    (666745 'move' call_tmp[666742](143997 call _value _mt[243] lhs[143967]))
    (144004 call(144000 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666742]))
    (481125 'end of statement' lhs[143967])
    (519525 'move' ret[519520](519524 'deref' lhs[143967]))
    gotoReturn _end_chpl__coerceMove[519518] _end_chpl__coerceMove[519518]
    (481127 'end of statement' lhs[143967])
    label _end_chpl__coerceMove[519518]
    (519522 return ret[519520])
  }
  function chpl__coerceCopy[144017](arg dstType[144014]:_array[133588](?), arg rhs[144020]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519531] "RVV" "temp"
    unknown eltType[144027] "dead at end of block" "insert auto destroy" "type variable"(144026 call chpl__eltTypeFromArrayRuntimeType dstType[144014])
    (543405 'move' eltType[144027](543403 call chpl__eltTypeFromArrayRuntimeType dstType[144014]))
    const dom[144035] "dead at end of block" "const" "ref var"
    unknown call_tmp[666749] "expr temp" "maybe param" "maybe type" "temp"
    (666752 'move' call_tmp[666749](144034 call chpl__domainFromArrayRuntimeType dstType[144014]))
    (543408 'move' dom[144035](543407 'addr of' call_tmp[666749]))
    (144038 'end of statement')
    unknown call_tmp[666756] "maybe param" "maybe type" "temp"
    (666759 'move' call_tmp[666756](144047 call(144040 call (partial) buildArray _mt[243] dom[144035]) eltType[144027](initElts = 0)))
    unknown lhs[144048] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543410 'init var' lhs[144048] call_tmp[666756])
    (144051 'end of statement' dom[144035] eltType[144027])
    (144061 call chpl__transferArray lhs[144048] rhs[144020](kind = initCopy[137983]))
    (481131 'end of statement' lhs[144048])
    unknown call_tmp[666763] "expr temp" "maybe param" "maybe type" "temp"
    (666766 'move' call_tmp[666763](144064 call _value _mt[243] lhs[144048]))
    (144071 call(144067 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666763]))
    (481133 'end of statement' lhs[144048])
    (519536 'move' ret[519531](519535 'deref' lhs[144048]))
    gotoReturn _end_chpl__coerceCopy[519529] _end_chpl__coerceCopy[519529]
    (481135 'end of statement' lhs[144048])
    label _end_chpl__coerceCopy[519529]
    (519533 return ret[519531])
  }
  function chpl__coerceMove[144084](arg dstType[144081]:_array[133588](?), arg rhs[144087]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519542] "RVV" "temp"
    unknown eltType[144094] "dead at end of block" "insert auto destroy" "type variable"(144093 call chpl__eltTypeFromArrayRuntimeType dstType[144081])
    (543415 'move' eltType[144094](543413 call chpl__eltTypeFromArrayRuntimeType dstType[144081]))
    const dom[144102] "dead at end of block" "const" "ref var"
    unknown call_tmp[666770] "expr temp" "maybe param" "maybe type" "temp"
    (666773 'move' call_tmp[666770](144101 call chpl__domainFromArrayRuntimeType dstType[144081]))
    (543418 'move' dom[144102](543417 'addr of' call_tmp[666770]))
    (144105 'end of statement')
    unknown call_tmp[666777] "maybe param" "maybe type" "temp"
    (666780 'move' call_tmp[666777](144114 call(144107 call (partial) buildArray _mt[243] dom[144102]) eltType[144094](initElts = 0)))
    unknown lhs[144115] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543420 'init var' lhs[144115] call_tmp[666777])
    (144118 'end of statement' dom[144102] eltType[144094])
    (144128 call chpl__transferArray lhs[144115] rhs[144087](kind = move[137981]))
    (481139 'end of statement' lhs[144115])
    unknown call_tmp[666784] "expr temp" "maybe param" "maybe type" "temp"
    (666787 'move' call_tmp[666784](144131 call _value _mt[243] lhs[144115]))
    (144138 call(144134 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666784]))
    (481141 'end of statement' lhs[144115])
    (519547 'move' ret[519542](519546 'deref' lhs[144115]))
    gotoReturn _end_chpl__coerceMove[519540] _end_chpl__coerceMove[519540]
    (481143 'end of statement' lhs[144115])
    label _end_chpl__coerceMove[519540]
    (519544 return ret[519542])
  }
  function chpl__coerceCopy[144151](arg dstType[144148]:_array[133588](?), arg rhs[144153]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519553] "RVV" "temp"
    unknown eltType[144159] "dead at end of block" "insert auto destroy" "type variable"(144158 call chpl__eltTypeFromArrayRuntimeType dstType[144148])
    (543425 'move' eltType[144159](543423 call chpl__eltTypeFromArrayRuntimeType dstType[144148]))
    const dom[144167] "dead at end of block" "const" "ref var"
    unknown call_tmp[666791] "expr temp" "maybe param" "maybe type" "temp"
    (666794 'move' call_tmp[666791](144166 call chpl__domainFromArrayRuntimeType dstType[144148]))
    (543428 'move' dom[144167](543427 'addr of' call_tmp[666791]))
    (144170 'end of statement')
    unknown call_tmp[666798] "maybe param" "maybe type" "temp"
    (666801 'move' call_tmp[666798](144179 call(144172 call (partial) buildArray _mt[243] dom[144167]) eltType[144159](initElts = 0)))
    unknown lhs[144180] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543430 'init var' lhs[144180] call_tmp[666798])
    (144183 'end of statement' dom[144167] eltType[144159])
    (144193 call chpl__transferArray lhs[144180] rhs[144153](kind = initCopy[137983]))
    (481147 'end of statement' lhs[144180])
    unknown call_tmp[666805] "expr temp" "maybe param" "maybe type" "temp"
    (666808 'move' call_tmp[666805](144196 call _value _mt[243] lhs[144180]))
    (144203 call(144199 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666805]))
    (481149 'end of statement' lhs[144180])
    (519558 'move' ret[519553](519557 'deref' lhs[144180]))
    gotoReturn _end_chpl__coerceCopy[519551] _end_chpl__coerceCopy[519551]
    (481151 'end of statement' lhs[144180])
    label _end_chpl__coerceCopy[519551]
    (519555 return ret[519553])
  }
  function chpl__coerceMove[144216](arg dstType[144213]:_array[133588](?), in arg rhs[144218]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519564] "RVV" "temp"
    unknown eltType[144224] "dead at end of block" "insert auto destroy" "type variable"(144223 call chpl__eltTypeFromArrayRuntimeType dstType[144213])
    (543435 'move' eltType[144224](543433 call chpl__eltTypeFromArrayRuntimeType dstType[144213]))
    const dom[144232] "dead at end of block" "const" "ref var"
    unknown call_tmp[666812] "expr temp" "maybe param" "maybe type" "temp"
    (666815 'move' call_tmp[666812](144231 call chpl__domainFromArrayRuntimeType dstType[144213]))
    (543438 'move' dom[144232](543437 'addr of' call_tmp[666812]))
    (144235 'end of statement')
    unknown call_tmp[666819] "maybe param" "maybe type" "temp"
    (666822 'move' call_tmp[666819](144244 call(144237 call (partial) buildArray _mt[243] dom[144232]) eltType[144224](initElts = 0)))
    unknown lhs[144245] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543440 'init var' lhs[144245] call_tmp[666819])
    (144248 'end of statement' dom[144232] eltType[144224])
    (144258 call chpl__transferArray lhs[144245] rhs[144218](kind = initCopy[137983]))
    (481155 'end of statement' lhs[144245])
    unknown call_tmp[666826] "expr temp" "maybe param" "maybe type" "temp"
    (666829 'move' call_tmp[666826](144261 call _value _mt[243] lhs[144245]))
    (144268 call(144264 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666826]))
    (481157 'end of statement' lhs[144245])
    (519569 'move' ret[519564](519568 'deref' lhs[144245]))
    gotoReturn _end_chpl__coerceMove[519562] _end_chpl__coerceMove[519562]
    (481159 'end of statement' lhs[144245])
    label _end_chpl__coerceMove[519562]
    (519566 return ret[519564])
  }
  function chpl__unref[144283](arg x[144280]:_array[133588](?)) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[519575] "RVV" "temp"
    unknown ret[144293] "dead at end of block" "no auto destroy"
    (543442 'init var' ret[144293] x[144280])
    (144296 'end of statement')
    (519580 'move' ret[519575](519579 'deref' ret[144293]))
    gotoReturn _end_chpl__unref[519573] _end_chpl__unref[519573]
    (481161 'end of statement' ret[144293])
    label _end_chpl__unref[519573]
    (519577 return ret[519575])
  }
  where {
    unknown call_tmp[666835] "expr temp" "maybe param" "maybe type" "temp"
    (666838 'move' call_tmp[666835](144287 call _value _mt[243] x[144280]))
    (144291 call chpl__isArrayView call_tmp[666835])
  }
  function chpl__unref[144310](arg ir[144307]:_iteratorRecord[205](?)) : _unknown[51] "no copy return" "unref fn"
  {
    unknown ret[519586] "RVV" "temp"
    unknown call_tmp[666840] "maybe param" "maybe type" "temp"
    (666843 'move' call_tmp[666840](144315 call chpl__initCopy ir[144307]))
    unknown toArray[144316] "dead at end of block" "no auto destroy" "no copy"
    (543444 'init var' toArray[144316] call_tmp[666840])
    (144319 'end of statement')
    (519591 'move' ret[519586](519590 'deref' toArray[144316]))
    gotoReturn _end_chpl__unref[519584] _end_chpl__unref[519584]
    (481163 'end of statement' toArray[144316])
    label _end_chpl__unref[519584]
    (519588 return ret[519586])
  }
  function chpl__unref[144334](arg x[144331]:_array[133588](?)) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[519597] "RVV" "temp"
    unknown ret[144337] "dead at end of block" "insert auto destroy" "no copy"
    (543446 'init var' ret[144337] x[144331])
    (144340 'end of statement')
    (519602 'move' ret[519597](519601 'deref' ret[144337]))
    gotoReturn _end_chpl__unref[519595] _end_chpl__unref[519595]
    (481165 'end of statement' ret[144337])
    label _end_chpl__unref[519595]
    (519599 return ret[519597])
  }
  function chpl__unalias[144355](arg x[144352]:_array[133588](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519608] "RVV" "temp"
    unknown tmp[427005] "maybe param" "temp"
    unknown tmp[427026] "maybe param" "temp"
    unknown call_tmp[666847] "expr temp" "maybe param" "maybe type" "temp"
    (666850 'move' call_tmp[666847](144358 call _value _mt[243] x[144352]))
    (427037 'move' tmp[427026](144365 call(144361 call (partial) isSliceArrayView _mt[243] call_tmp[666847])))
    unknown call_tmp[666854] "expr temp" "maybe param" "maybe type" "temp"
    (666857 'move' call_tmp[666854](427039 call _cond_invalid tmp[427026]))
    if call_tmp[666854]
    {
      (427042 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568327] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568328] "maybe param" "temp"
    unknown call_tmp[666859] "expr temp" "maybe param" "maybe type" "temp"
    (666862 'move' call_tmp[666859](427027 call isTrue tmp[427026]))
    (568333 'move' tmp[568328](568331 call _cond_test call_tmp[666859]))
    if tmp[568328]
    {
      (568338 'move' tmp[568327](568335 '_paramFoldLogical' tmp[568328] 1))
    }
    {
      unknown tmp[568340] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666866] "expr temp" "maybe param" "maybe type" "temp"
      (666869 'move' call_tmp[666866](144367 call _value _mt[243] x[144352]))
      unknown call_tmp[666873] "expr temp" "maybe param" "maybe type" "temp"
      (666876 'move' call_tmp[666873](144374 call(144370 call (partial) isRankChangeArrayView _mt[243] call_tmp[666866])))
      (568342 'move' tmp[568340](427031 call isTrue call_tmp[666873]))
      (568347 'move' tmp[568327](568344 '_paramFoldLogical' tmp[568328] tmp[568340]))
    }
    (427016 'move' tmp[427005] tmp[568327])
    unknown call_tmp[666878] "expr temp" "maybe param" "maybe type" "temp"
    (666881 'move' call_tmp[666878](427018 call _cond_invalid tmp[427005]))
    if call_tmp[666878]
    {
      (427021 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown isview[144388] "dead at end of block" "param"
    unknown tmp[568354] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568355] "maybe param" "temp"
    unknown call_tmp[666883] "expr temp" "maybe param" "maybe type" "temp"
    (666886 'move' call_tmp[666883](427006 call isTrue tmp[427005]))
    (568360 'move' tmp[568355](568358 call _cond_test call_tmp[666883]))
    if tmp[568355]
    {
      (568365 'move' tmp[568354](568362 '_paramFoldLogical' tmp[568355] 1))
    }
    {
      unknown tmp[568367] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666890] "expr temp" "maybe param" "maybe type" "temp"
      (666893 'move' call_tmp[666890](144378 call _value _mt[243] x[144352]))
      unknown call_tmp[666897] "expr temp" "maybe param" "maybe type" "temp"
      (666900 'move' call_tmp[666897](144385 call(144381 call (partial) isReindexArrayView _mt[243] call_tmp[666890])))
      (568369 'move' tmp[568367](427010 call isTrue call_tmp[666897]))
      (568374 'move' tmp[568354](568371 '_paramFoldLogical' tmp[568355] tmp[568367]))
    }
    (543448 'init var' isview[144388] tmp[568354])
    (144391 'end of statement')
    unknown call_tmp[666902] "expr temp" "maybe param" "maybe type" "temp"
    (666905 'move' call_tmp[666902](144417 call _cond_test isview[144388]))
    if call_tmp[666902]
    {
      unknown ret[144395] "dead at end of block" "no auto destroy"
      (543450 'init var' ret[144395] x[144352])
      (144398 'end of statement')
      (144403 call chpl__autoDestroy x[144352])
      (481169 'end of statement')
      (519613 'move' ret[519608](519612 'deref' ret[144395]))
      gotoReturn _end_chpl__unalias[519606] _end_chpl__unalias[519606]
      (481170 'end of statement' ret[144395])
    }
    {
      unknown ret[144409] "dead at end of block" "insert auto destroy" "no copy"
      (543452 'init var' ret[144409] x[144352])
      (144412 'end of statement')
      (519618 'move' ret[519608](519617 'deref' ret[144409]))
      gotoReturn _end_chpl__unalias[519606] _end_chpl__unalias[519606]
      (481172 'end of statement' ret[144409])
    }
    label _end_chpl__unalias[519606]
    (519610 return ret[519608])
  }
  function chpl__initCopy[144429](arg ir[144426]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519624] "RVV" "temp"
    unknown call_tmp[666909] "expr temp" "maybe param" "maybe type" "temp"
    (666912 'move' call_tmp[666909](144438 call _shape_ _mt[243] ir[144426]))
    unknown call_tmp[666914] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (666917 'move' call_tmp[666914](747891 'new' _domain[125902](?) call_tmp[666909]))
    unknown shape[144443] "dead at end of block"
    (543454 'init var' shape[144443] call_tmp[666914])
    (144446 'end of statement')
    unknown call_tmp[666921] "expr temp" "maybe param" "maybe type" "temp"
    (666924 'move' call_tmp[666921](144449 call _unowned _mt[243] shape[144443]))
    (144453 call = call_tmp[666921] 1)
    (481174 'end of statement' shape[144443])
    unknown call_tmp[666926] "expr temp" "maybe param" "maybe type" "temp"
    (666929 'move' call_tmp[666926](144460 call chpl__initCopy_shapeHelp shape[144443] ir[144426]))
    (519629 'move' ret[519624](519628 'deref' call_tmp[666926]))
    gotoReturn _end_chpl__initCopy[519622] _end_chpl__initCopy[519622]
    (481176 'end of statement' shape[144443])
    label _end_chpl__initCopy[519622]
    (519626 return ret[519624])
  }
  where {
    (144434 call chpl_iteratorHasDomainShape ir[144426])
  }
  function chpl__initCopy[144472](arg ir[144469]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519635] "RVV" "temp"
    unknown call_tmp[666933] "expr temp" "maybe param" "maybe type" "temp"
    (666936 'move' call_tmp[666933](144487 call _shape_ _mt[243] ir[144469]))
    unknown call_tmp[666938] "maybe param" "maybe type" "temp"
    (666941 'move' call_tmp[666938](144491 call chpl__buildDomainExpr call_tmp[666933]))
    unknown shape[144493] "dead at end of block" "insert auto destroy"
    (543456 'init var' shape[144493] call_tmp[666938])
    (144496 'end of statement')
    unknown call_tmp[666943] "expr temp" "maybe param" "maybe type" "temp"
    (666946 'move' call_tmp[666943](144502 call chpl__initCopy_shapeHelp shape[144493] ir[144469]))
    (519640 'move' ret[519635](519639 'deref' call_tmp[666943]))
    gotoReturn _end_chpl__initCopy[519633] _end_chpl__initCopy[519633]
    (481178 'end of statement' shape[144493])
    label _end_chpl__initCopy[519633]
    (519637 return ret[519635])
  }
  where {
    unknown tmp[427047] "maybe param" "temp"
    (427058 'move' tmp[427047](144477 call chpl_iteratorHasRangeShape ir[144469]))
    unknown call_tmp[666948] "expr temp" "maybe param" "maybe type" "temp"
    (666951 'move' call_tmp[666948](427060 call _cond_invalid tmp[427047]))
    if call_tmp[666948]
    {
      (427063 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568381] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568382] "maybe param" "temp"
    unknown call_tmp[666953] "expr temp" "maybe param" "maybe type" "temp"
    (666956 'move' call_tmp[666953](427048 call isTrue tmp[427047]))
    (568387 'move' tmp[568382](568385 call _cond_test call_tmp[666953]))
    if tmp[568382]
    {
      unknown tmp[568389] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666958] "expr temp" "maybe param" "maybe type" "temp"
      (666961 'move' call_tmp[666958](144481 call chpl_iteratorFromForExpr ir[144469]))
      unknown call_tmp[666963] "expr temp" "maybe param" "maybe type" "temp"
      (666966 'move' call_tmp[666963](144482 call ! call_tmp[666958]))
      (568391 'move' tmp[568389](427051 call isTrue call_tmp[666963]))
      (568396 'move' tmp[568381](568393 '_paramFoldLogical' tmp[568382] tmp[568389]))
    }
    {
      (568401 'move' tmp[568381](568398 '_paramFoldLogical' tmp[568382] 0))
    }
    (748330 call chpl_statementLevelSymbol tmp[568381])
  }
  function chpl__initCopy_shapeHelp[144514](arg shape[144511]:_domain[125902](?), arg ir[144517]:_iteratorRecord[205](?)) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[519646] "RVV" "temp"
    unknown call_tmp[666970] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (666973 'move' call_tmp[666970](144526 'typeof' ir[144517]))
    unknown call_tmp[666975] "expr temp" "maybe param" "maybe type" "temp"
    (666978 'move' call_tmp[666975](144528 call iteratorToArrayElementType call_tmp[666970]))
    unknown call_tmp[666980] "maybe param" "maybe type" "temp"
    (666983 'move' call_tmp[666980](144532 call(144521 call (partial) buildArray _mt[243] shape[144511]) call_tmp[666975](initElts = 0)))
    unknown result[144533] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543458 'init var' result[144533] call_tmp[666980])
    (144536 'end of statement')
    unknown call_tmp[666987] "expr temp" "maybe param" "maybe type" "temp"
    (666990 'move' call_tmp[666987](144540 call eltType _mt[243] result[144533]))
    unknown call_tmp[666992] "expr temp" "maybe param" "maybe type" "temp"
    (666995 'move' call_tmp[666992](144544 call isArray call_tmp[666987]))
    unknown call_tmp[666997] "expr temp" "maybe param" "maybe type" "temp"
    (667000 'move' call_tmp[666997](144568 call _cond_test call_tmp[666992]))
    if call_tmp[666997]
    {
      (144566 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[667002] "expr temp" "maybe param" "maybe type" "temp"
    (667005 'move' call_tmp[667002](144576 call chpl_iteratorFromForExpr ir[144517]))
    unknown call_tmp[667007] "expr temp" "maybe param" "maybe type" "temp"
    (667010 'move' call_tmp[667007](144831 call _cond_test call_tmp[667002]))
    if call_tmp[667007]
    {
      unknown call_tmp[667014] "expr temp" "maybe param" "maybe type" "temp"
      (667017 'move' call_tmp[667014](144579 call eltType _mt[243] result[144533]))
      unknown call_tmp[667019] "expr temp" "maybe param" "maybe type" "temp"
      (667022 'move' call_tmp[667019](144583 call needsInitWorkaround call_tmp[667014]))
      unknown call_tmp[667024] "expr temp" "maybe param" "maybe type" "temp"
      (667027 'move' call_tmp[667024](144747 call _cond_test call_tmp[667019]))
      if call_tmp[667024]
      {
        {
          unknown _indexOfInterest[144616] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144617] "expr temp" "temp"
          unknown call_tmp[667031] "expr temp" "maybe param" "maybe type" "temp"
          (667034 'move' call_tmp[667031](144626 call _dom _mt[243] result[144533]))
          unknown call_tmp[667036] "expr temp" "maybe param" "maybe type" "temp"
          (667039 'move' call_tmp[667036](144629 call _getIterator call_tmp[667031]))
          unknown call_tmp[667041] "expr temp" "maybe param" "maybe type" "temp"
          (667044 'move' call_tmp[667041](144633 call _getIterator ir[144517]))
          (144635 'move' _iterator[144617](144595 call _build_tuple call_tmp[667036] call_tmp[667041]))
          Defer
          {
            {
              (144665 call _freeIterator _iterator[144617])
            }
          }
          { scopeless type
            (144640 'move' _indexOfInterest[144616](144637 call iteratorIndex _iterator[144617]))
          }
          ForLoop[144618]
          {
            (144645 call _check_tuple_var_decl _indexOfInterest[144616] 2)
            (481182 'end of statement')
            unknown ri[144651] "index var" "insert auto destroy"
            (481183 'end of statement')
            (144653 'move' ri[144651](144649 call _indexOfInterest[144616] 0))
            (481184 'end of statement' ri[144651])
            unknown src[144658] "index var" "insert auto destroy"
            (481186 'end of statement')
            (144660 'move' src[144658](144656 call _indexOfInterest[144616] 1))
            (481187 'end of statement' src[144658])
            {
              unknown r[144600] "dead at end of block" "ref var"
              unknown call_tmp[667046] "expr temp" "maybe param" "maybe type" "temp"
              (667049 'move' call_tmp[667046](144599 call result[144533] ri[144651]))
              (543461 'move' r[144600](543460 'addr of' call_tmp[667046]))
              (144603 'end of statement')
              unknown copy[144606] "dead at end of block" "no auto destroy"
              (543463 'init var' copy[144606] src[144658])
              (144609 'end of statement' result[144533] ri[144651] src[144658])
              (144614 '=' r[144600] copy[144606])
              (481192 'end of statement' r[144600] copy[144606])
            }
            label _continueLabel[144621]
            _indexOfInterest[144616]
            _iterator[144617]
          }
          label _breakLabel[144622]
        }
      }
      {
        {
          unknown _indexOfInterest[144694] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144695] "expr temp" "temp"
          unknown call_tmp[667051] "expr temp" "maybe param" "maybe type" "temp"
          (667054 'move' call_tmp[667051](144704 call _getIterator result[144533]))
          unknown call_tmp[667056] "expr temp" "maybe param" "maybe type" "temp"
          (667059 'move' call_tmp[667056](144707 call _getIterator ir[144517]))
          (144709 'move' _iterator[144695](144681 call _build_tuple call_tmp[667051] call_tmp[667056]))
          Defer
          {
            {
              (144739 call _freeIterator _iterator[144695])
            }
          }
          { scopeless type
            (144714 'move' _indexOfInterest[144694](144711 call iteratorIndex _iterator[144695]))
          }
          ForLoop[144696]
          {
            (144719 call _check_tuple_var_decl _indexOfInterest[144694] 2)
            (481196 'end of statement')
            unknown r[144725] "index var" "insert auto destroy"
            (481197 'end of statement')
            (144727 'move' r[144725](144723 call _indexOfInterest[144694] 0))
            (481198 'end of statement' r[144725])
            unknown src[144732] "index var" "insert auto destroy"
            (481200 'end of statement')
            (144734 'move' src[144732](144730 call _indexOfInterest[144694] 1))
            (481201 'end of statement' src[144732])
            {
              unknown copy[144683] "dead at end of block" "no auto destroy"
              (543465 'init var' copy[144683] src[144732])
              (144686 'end of statement' src[144732])
              (144692 '=' r[144725] copy[144683])
              (481204 'end of statement' r[144725] copy[144683])
            }
            label _continueLabel[144699]
            _indexOfInterest[144694]
            _iterator[144695]
          }
          label _breakLabel[144700]
        }
      }
    }
    {
      unknown call_tmp[667063] "expr temp" "maybe param" "maybe type" "temp"
      (667066 'move' call_tmp[667063](144754 call eltType _mt[243] result[144533]))
      unknown call_tmp[667068] "expr temp" "maybe param" "maybe type" "temp"
      (667071 'move' call_tmp[667068](144758 call needsInitWorkaround call_tmp[667063]))
      unknown call_tmp[667073] "expr temp" "maybe param" "maybe type" "temp"
      (667076 'move' call_tmp[667073](144826 call _cond_test call_tmp[667068]))
      if call_tmp[667073]
      {
        unknown call_tmp[667080] "expr temp" "maybe param" "maybe type" "temp"
        (667083 'move' call_tmp[667080](415875 call _dom _mt[243] result[144533]))
        unknown call_tmp[667085] "maybe param" "maybe type" "temp"
        (667088 'move' call_tmp[667085](415871 call chpl__staticAutoLocalCheck result[144533] call_tmp[667080]))
        unknown chpl__staticAutoLocalCheckSym[415870] "dead at end of block" "param"
        (543467 'init var' chpl__staticAutoLocalCheckSym[415870] call_tmp[667085])
        (481207 'end of statement' result[144533] result[144533])
        if chpl__staticAutoLocalCheckSym[415870]
        {
          unknown call_tmp[667092] "expr temp" "maybe param" "maybe type" "temp"
          (667095 'move' call_tmp[667092](144765 call _dom _mt[243] result[144533]))
          Forall {
            induction variables:
              
              unknown ri[144792] "index var" "insert auto destroy"
              
              unknown src[144794] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667092]
              ir[144517]
            shadow variables:
            other variables
              forall body
            {
              unknown r[144775] "dead at end of block" "ref var"
              unknown call_tmp[667097] "expr temp" "maybe param" "maybe type" "temp"
              (667100 'move' call_tmp[667097](415881 'may be local access' result[144533] ri[144792] chpl__staticAutoLocalCheckSym[415870] 1))
              (543470 'move' r[144775](543469 'addr of' call_tmp[667097]))
              (144778 'end of statement')
              unknown copy[144781] "dead at end of block" "no auto destroy"
              (543472 'init var' copy[144781] src[144794])
              (144784 'end of statement' result[144533] ri[144792] src[144794])
              (144789 '=' r[144775] copy[144781])
              (481213 'end of statement' r[144775] copy[144781])
            }
          }
        }
        {
          unknown call_tmp[667104] "expr temp" "maybe param" "maybe type" "temp"
          (667107 'move' call_tmp[667104](415866 call _dom _mt[243] result[144533]))
          Forall {
            induction variables:
              
              unknown ri[415861] "index var" "insert auto destroy"
              
              unknown src[415863] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667104]
              ir[144517]
            shadow variables:
            other variables
              forall body
            {
              unknown r[415847] "dead at end of block" "ref var"
              unknown call_tmp[667109] "expr temp" "maybe param" "maybe type" "temp"
              (667112 'move' call_tmp[667109](415849 call result[144533] ri[415861]))
              (543475 'move' r[415847](543474 'addr of' call_tmp[667109]))
              (415852 'end of statement')
              unknown copy[415853] "dead at end of block" "no auto destroy"
              (543477 'init var' copy[415853] src[415863])
              (415856 'end of statement' result[144533] ri[415861] src[415863])
              (415857 '=' r[415847] copy[415853])
              (481219 'end of statement' r[415847] copy[415853])
            }
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144820] "index var" "insert auto destroy"
            
            unknown src[144822] "index var" "insert auto destroy"
          iterated expressions:
            result[144533]
            ir[144517]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144808] "dead at end of block" "no auto destroy"
            (543479 'init var' copy[144808] src[144822])
            (144811 'end of statement' src[144822])
            (144817 '=' r[144820] copy[144808])
            (481223 'end of statement' r[144820] copy[144808])
          }
        }
      }
    }
    unknown call_tmp[667116] "expr temp" "maybe param" "maybe type" "temp"
    (667119 'move' call_tmp[667116](144836 call _value _mt[243] result[144533]))
    (144843 call(144839 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[667116]))
    (481226 'end of statement' result[144533])
    (519651 'move' ret[519646](519650 'deref' result[144533]))
    gotoReturn _end_chpl__initCopy_shapeHelp[519644] _end_chpl__initCopy_shapeHelp[519644]
    (481228 'end of statement' result[144533])
    label _end_chpl__initCopy_shapeHelp[519644]
    (519648 return ret[519646])
  }
  function chpl__throwErrorUnchecked[144858](in arg e[144855] :
  (144853 call _owned[30](?) Error[167938])) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    unknown call_tmp[667123] "expr temp" "maybe param" "maybe type" "temp"
    (667126 'move' call_tmp[667123](468039 call chpl_fix_thrown_error e[144855]))
    (144861 'throw' call_tmp[667123])
    (519655 return _void[55])
  }
  function chpl__initCopy[144872](arg ir[144869]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519659] "RVV" "temp"
    unknown call_tmp[667128] "maybe param" "maybe type" "temp"
    (667131 'move' call_tmp[667128](144877 call chpl_iteratorHasRangeShape ir[144869]))
    unknown shapeful[144878] "dead at end of block" "param"
    (543481 'init var' shapeful[144878] call_tmp[667128])
    (144881 'end of statement')
    unknown r[144895] "dead at end of block"
    unknown tmp[568408] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568409] "maybe param" "temp"
    (568414 'move' tmp[568409](568412 call _cond_test shapeful[144878]))
    if tmp[568409]
    {
      unknown tmp[568416] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568418 'move' tmp[568416](144885 call _shape_ _mt[243] ir[144869]))
      (568423 'move' tmp[568408](568420 '_paramFoldLogical' tmp[568409] tmp[568416]))
    }
    {
      unknown tmp[568425] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568427 'move' tmp[568425](144890 call chpl_build_bounded_range 1 0))
      (568432 'move' tmp[568408](568429 '_paramFoldLogical' tmp[568409] tmp[568425]))
    }
    (543483 'init var' r[144895] tmp[568408])
    (144898 'end of statement')
    unknown i[144900] "dead at end of block"
    (543485 'init var' i[144900] 0)
    (144903 'end of statement')
    unknown call_tmp[667137] "expr temp" "maybe param" "maybe type" "temp"
    (667140 'move' call_tmp[667137](144905 call size _mt[243] r[144895]))
    unknown call_tmp[667142] "maybe param" "maybe type" "temp"
    (667145 'move' call_tmp[667142](144909 call _cast size_t[20654] call_tmp[667137]))
    unknown size[144911] "dead at end of block"
    (543487 'init var' size[144911] call_tmp[667142])
    (144914 'end of statement')
    unknown call_tmp[667147] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667150 'move' call_tmp[667147](144917 'typeof' ir[144869]))
    unknown elemType[144920] "dead at end of block" "type variable"(144919 call iteratorToArrayElementType call_tmp[667147])
    unknown call_tmp[667152] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667155 'move' call_tmp[667152](543491 'typeof' ir[144869]))
    (543493 'move' elemType[144920](543490 call iteratorToArrayElementType call_tmp[667152]))
    unknown call_tmp[667157] "maybe param" "maybe type" "temp"
    (667160 'move' call_tmp[667157](144926 call _ddata[11695](?) elemType[144920]))
    unknown data[144928] "dead at end of block"
    (543495 'init var' data[144928] nil[44] call_tmp[667157])
    (144931 'end of statement')
    unknown callPostAlloc[144933] "dead at end of block"
    (543497 'default init var' callPostAlloc[144933] bool[10])
    (144936 'end of statement')
    unknown subloc[144938] "dead at end of block"
    (543499 'init var' subloc[144938] c_sublocid_none[89870])
    (144941 'end of statement')
    unknown call_tmp[667162] "expr temp" "maybe param" "maybe type" "temp"
    (667165 'move' call_tmp[667162](144944 call > size[144911] 0))
    unknown call_tmp[667167] "expr temp" "maybe param" "maybe type" "temp"
    (667170 'move' call_tmp[667167](144957 call _cond_test call_tmp[667162]))
    if call_tmp[667167]
    {
      unknown call_tmp[667172] "expr temp" "maybe param" "maybe type" "temp"
      (667175 'move' call_tmp[667172](144952 call _ddata_allocate_noinit elemType[144920] size[144911] callPostAlloc[144933]))
      (144953 call = data[144928] call_tmp[667172])
      (481233 'end of statement' data[144928] elemType[144920] size[144911] callPostAlloc[144933])
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145105] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145106] "expr temp" "temp"
          (145115 'move' _iterator[145106](145113 call _getIterator ir[144869]))
          Defer
          {
            {
              (145131 call _freeIterator _iterator[145106])
            }
          }
          { scopeless type
            (145120 'move' _indexOfInterest[145105](145117 call iteratorIndex _iterator[145106]))
          }
          ForLoop[145107]
          {
            unknown elt[145124] "index var" "insert auto destroy"
            (481239 'end of statement')
            (145126 'move' elt[145124] _indexOfInterest[145105])
            (481240 'end of statement' elt[145124])
            {
              unknown call_tmp[667177] "maybe param" "maybe type" "temp"
              (667180 'move' call_tmp[667177](144966 call chpl__initCopy elt[145124]))
              unknown eltCopy[144968] "dead at end of block" "no auto destroy" "no copy"
              (543501 'init var' eltCopy[144968] call_tmp[667177])
              (144971 'end of statement' elt[145124])
              unknown call_tmp[667182] "expr temp" "maybe param" "maybe type" "temp"
              (667185 'move' call_tmp[667182](144975 call >= i[144900] size[144911]))
              unknown call_tmp[667187] "expr temp" "maybe param" "maybe type" "temp"
              (667190 'move' call_tmp[667187](145087 call _cond_test call_tmp[667182]))
              if call_tmp[667187]
              {
                unknown oldSize[144978] "dead at end of block"
                (543503 'init var' oldSize[144978] size[144911])
                (144981 'end of statement')
                unknown oldData[144984] "dead at end of block"
                (543505 'init var' oldData[144984] data[144928])
                (144987 'end of statement' size[144911] data[144928])
                unknown call_tmp[667192] "expr temp" "maybe param" "maybe type" "temp"
                (667195 'move' call_tmp[667192](144990 call == size[144911] 0))
                unknown call_tmp[667197] "expr temp" "maybe param" "maybe type" "temp"
                (667200 'move' call_tmp[667197](145005 call _cond_test call_tmp[667192]))
                if call_tmp[667197]
                {
                  (144994 call = size[144911] 4)
                  (481245 'end of statement' size[144911])
                }
                {
                  unknown call_tmp[667202] "expr temp" "maybe param" "maybe type" "temp"
                  (667205 'move' call_tmp[667202](145000 call * 2 size[144911]))
                  (145002 call = size[144911] call_tmp[667202])
                  (481247 'end of statement' size[144911] size[144911])
                }
                unknown call_tmp[667207] "expr temp" "maybe param" "maybe type" "temp"
                (667210 'move' call_tmp[667207](145017 call _ddata_allocate_noinit elemType[144920] size[144911] callPostAlloc[144933]))
                (145018 call = data[144928] call_tmp[667207])
                (481250 'end of statement' data[144928] elemType[144920] size[144911] callPostAlloc[144933])
                {
                  unknown _indexOfInterest[145041] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145042] "expr temp" "temp"
                  unknown call_tmp[667212] "expr temp" "maybe param" "maybe type" "temp"
                  (667215 'move' call_tmp[667212](145058 call chpl_direct_counted_range_iter 0 oldSize[144978]))
                  (145051 'move' _iterator[145042](145049 call _getIterator call_tmp[667212]))
                  Defer
                  {
                    {
                      (145074 call _freeIterator _iterator[145042])
                    }
                  }
                  { scopeless type
                    (145063 'move' _indexOfInterest[145041](145060 call iteratorIndex _iterator[145042]))
                  }
                  ForLoop[145043]
                  {
                    unknown i[145067] "index var" "insert auto destroy"
                    (481256 'end of statement')
                    (145069 'move' i[145067] _indexOfInterest[145041])
                    (481257 'end of statement' i[145067])
                    {
                      unknown call_tmp[667217] "expr temp" "maybe param" "maybe type" "temp"
                      (667220 'move' call_tmp[667217](145033 call data[144928] i[145067]))
                      unknown call_tmp[667222] "expr temp" "maybe param" "maybe type" "temp"
                      (667225 'move' call_tmp[667222](145037 call oldData[144984] i[145067]))
                      (145038 '=' call_tmp[667217] call_tmp[667222])
                      (481259 'end of statement' data[144928] i[145067] oldData[144984] i[145067])
                    }
                    label _continueLabel[145046]
                    _indexOfInterest[145041]
                    _iterator[145042]
                  }
                  label _breakLabel[145047]
                }
                (145085 call _ddata_free oldData[144984] oldSize[144978])
                (481264 'end of statement' oldData[144984] oldSize[144978])
              }
              unknown call_tmp[667227] "expr temp" "maybe param" "maybe type" "temp"
              (667230 'move' call_tmp[667227](145096 call data[144928] i[144900]))
              (145098 '=' call_tmp[667227] eltCopy[144968])
              (481267 'end of statement' data[144928] i[144900] eltCopy[144968])
              (145102 call += i[144900] 1)
              (481271 'end of statement' i[144900])
            }
            label _continueLabel[145110]
            _indexOfInterest[145105]
            _iterator[145106]
          }
          label _breakLabel[145111]
        }
      }
    }
    Catch e : Error
    {
      unknown call_tmp[667232] "maybe param" "maybe type" "temp"
      (667235 'move' call_tmp[667232](354321 'current error'))
      unknown tmp[354318] "dead at end of block" "temp"
      (543507 'init var' tmp[354318] call_tmp[667232])
      unknown call_tmp[667237] "expr temp" "maybe param" "maybe type" "temp"
      (667240 'move' call_tmp[667237](354325 'to non nilable class' tmp[354318]))
      unknown call_tmp[667242] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (667245 'move' call_tmp[667242](747892 'new' _owned[30](?) call_tmp[667237]))
      unknown e[354324] "dead at end of block"
      (543509 'init var' e[354324] call_tmp[667242])
      (481273 'end of statement')
      {
        {
          unknown _indexOfInterest[145160] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145161] "expr temp" "temp"
          unknown call_tmp[667247] "expr temp" "maybe param" "maybe type" "temp"
          (667250 'move' call_tmp[667247](145175 call - i[144900] 1))
          unknown call_tmp[667252] "expr temp" "maybe param" "maybe type" "temp"
          (667255 'move' call_tmp[667252](145178 call chpl_direct_range_iter 0 call_tmp[667247] 1))
          (145170 'move' _iterator[145161](145168 call _getIterator call_tmp[667252]))
          Defer
          {
            {
              (145194 call _freeIterator _iterator[145161])
            }
          }
          { scopeless type
            (145183 'move' _indexOfInterest[145160](145180 call iteratorIndex _iterator[145161]))
          }
          ForLoop[145162]
          {
            unknown j[145187] "index var" "insert auto destroy"
            (481275 'end of statement')
            (145189 'move' j[145187] _indexOfInterest[145160])
            (481276 'end of statement' j[145187])
            {
              unknown call_tmp[667257] "expr temp" "maybe param" "maybe type" "temp"
              (667260 'move' call_tmp[667257](145155 call data[144928] j[145187]))
              (145157 call chpl__autoDestroy call_tmp[667257])
              (481278 'end of statement' data[144928] j[145187])
            }
            label _continueLabel[145165]
            _indexOfInterest[145160]
            _iterator[145161]
          }
          label _breakLabel[145166]
        }
        (145206 call _ddata_free data[144928] size[144911])
        (481281 'end of statement' data[144928] size[144911])
        (145211 call chpl__throwErrorUnchecked e[354324])
        (481284 'end of statement' e[354324])
      }
    }
    unknown tmp[427068] "maybe param" "temp"
    (427079 'move' tmp[427068] shapeful[144878])
    unknown call_tmp[667262] "expr temp" "maybe param" "maybe type" "temp"
    (667265 'move' call_tmp[667262](427081 call _cond_invalid tmp[427068]))
    if call_tmp[667262]
    {
      (427084 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568439] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568440] "maybe param" "temp"
    unknown call_tmp[667267] "expr temp" "maybe param" "maybe type" "temp"
    (667270 'move' call_tmp[667267](427069 call isTrue tmp[427068]))
    (568445 'move' tmp[568440](568443 call _cond_test call_tmp[667267]))
    if tmp[568440]
    {
      unknown tmp[568447] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667274] "expr temp" "maybe param" "maybe type" "temp"
      (667277 'move' call_tmp[667274](145219 call size _mt[243] r[144895]))
      unknown call_tmp[667279] "expr temp" "maybe param" "maybe type" "temp"
      (667282 'move' call_tmp[667279](145222 call < i[144900] call_tmp[667274]))
      (568449 'move' tmp[568447](427072 call isTrue call_tmp[667279]))
      (568454 'move' tmp[568439](568451 '_paramFoldLogical' tmp[568440] tmp[568447]))
    }
    {
      (568459 'move' tmp[568439](568456 '_paramFoldLogical' tmp[568440] 0))
    }
    unknown call_tmp[667284] "expr temp" "maybe param" "maybe type" "temp"
    (667287 'move' call_tmp[667284](145234 call _cond_test tmp[568439]))
    if call_tmp[667284]
    {
      unknown call_tmp[667289] "expr temp" "maybe param" "maybe type" "temp"
      (667292 'move' call_tmp[667289](145229 call # r[144895] i[144900]))
      (145231 call = r[144895] call_tmp[667289])
      (481287 'end of statement' r[144895] r[144895] i[144900])
    }
    unknown call_tmp[667294] "expr temp" "maybe param" "maybe type" "temp"
    (667297 'move' call_tmp[667294](145240 call ! shapeful[144878]))
    unknown call_tmp[667299] "expr temp" "maybe param" "maybe type" "temp"
    (667302 'move' call_tmp[667299](145263 call _cond_test call_tmp[667294]))
    if call_tmp[667299]
    {
      unknown tmp[568466] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568467] "maybe param" "temp"
      unknown call_tmp[667304] "expr temp" "maybe param" "maybe type" "temp"
      (667307 'move' call_tmp[667304](145245 call == i[144900] 0))
      (568472 'move' tmp[568467](568470 call _cond_test call_tmp[667304]))
      if tmp[568467]
      {
        unknown tmp[568474] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (568476 'move' tmp[568474](145249 call chpl_build_bounded_range 1 0))
        (568481 'move' tmp[568466](568478 '_paramFoldLogical' tmp[568467] tmp[568474]))
      }
      {
        unknown tmp[568483] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[667309] "expr temp" "maybe param" "maybe type" "temp"
        (667312 'move' call_tmp[667309](145252 call chpl_build_low_bounded_range capturedIteratorLowBound[115335]))
        (568485 'move' tmp[568483](145255 call # call_tmp[667309] i[144900]))
        (568490 'move' tmp[568466](568487 '_paramFoldLogical' tmp[568467] tmp[568483]))
      }
      (145260 call = r[144895] tmp[568466])
      (481291 'end of statement' r[144895] i[144900] i[144900])
    }
    unknown call_tmp[667314] "maybe param" "maybe type" "temp"
    (667317 'move' call_tmp[667314](145270 call chpl__buildDomainExpr r[144895]))
    unknown D[145272] "dead at end of block" "insert auto destroy"
    (543511 'init var' D[145272] call_tmp[667314])
    (145275 'end of statement' r[144895] elemType[144920] r[144895])
    unknown call_tmp[667319] "expr temp" "maybe param" "maybe type" "temp"
    (667322 'move' call_tmp[667319](145278 call != data[144928] nil[44]))
    unknown call_tmp[667324] "expr temp" "maybe param" "maybe type" "temp"
    (667327 'move' call_tmp[667324](145405 call _cond_test call_tmp[667319]))
    if call_tmp[667324]
    {
      unknown call_tmp[667329] "expr temp" "maybe param" "maybe type" "temp"
      (667332 'move' call_tmp[667329](145287 call _cond_test callPostAlloc[144933]))
      if call_tmp[667329]
      {
        (145285 call _ddata_allocate_postalloc data[144928] size[144911])
        (481296 'end of statement' data[144928] size[144911])
      }
      { scopeless type
        unknown call_type_tmp[492303] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667334] "expr temp" "maybe param" "maybe type" "temp"
        (667337 'move' call_tmp[667334](145302 call data[144928] 0))
        (492307 'move' call_type_tmp[492303](145303 'typeof' call_tmp[667334]))
      }
      unknown call_tmp[667341] "expr temp" "maybe param" "maybe type" "temp"
      (667344 'move' call_tmp[667341](145308 call _cast int(64)[13] size[144911]))
      unknown call_tmp[667346] "maybe param" "maybe type" "temp"
      (667349 'move' call_tmp[667346](145310 call(145296 call (partial) buildArrayWith _mt[243] D[145272]) call_type_tmp[492303] data[144928] call_tmp[667341]))
      unknown A[145311] "dead at end of block"
      (543513 'init var' A[145311] call_tmp[667346])
      (145314 'end of statement' D[145272] data[144928] data[144928] size[144911])
      { scopeless type
        unknown call_type_tmp[492309] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667351] "expr temp" "maybe param" "maybe type" "temp"
        (667354 'move' call_tmp[667351](145324 call data[144928] 0))
        (492313 'move' call_type_tmp[492309](145325 'typeof' call_tmp[667351]))
      }
      unknown call_tmp[667358] "expr temp" "maybe param" "maybe type" "temp"
      (667361 'move' call_tmp[667358](145317 call _value _mt[243] A[145311]))
      (145326 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[667358] call_type_tmp[492309])
      (481303 'end of statement' A[145311] data[144928])
      unknown call_tmp[667365] "expr temp" "maybe param" "maybe type" "temp"
      (667368 'move' call_tmp[667365](145329 call _value _mt[243] A[145311]))
      unknown call_tmp[667372] "expr temp" "maybe param" "maybe type" "temp"
      (667375 'move' call_tmp[667372](145332 call _decEltRefCounts _mt[243] call_tmp[667365]))
      (145336 call = call_tmp[667372] 0)
      (481306 'end of statement' A[145311])
      (145358 'auto destroy runtime type' elemType[144920])
      (481308 'end of statement' elemType[144920])
      (519664 'move' ret[519659](519663 'deref' A[145311]))
      gotoReturn _end_chpl__initCopy[519657] _end_chpl__initCopy[519657]
      (481310 'end of statement' A[145311])
    }
    {
      unknown call_tmp[667377] "expr temp" "maybe param" "maybe type" "temp"
      (667380 'move' call_tmp[667377](145369 call _ddata_allocate_noinit elemType[144920] size[144911] callPostAlloc[144933]))
      (145370 call = data[144928] call_tmp[667377])
      (481312 'end of statement' data[144928] elemType[144920] size[144911] callPostAlloc[144933])
      unknown call_tmp[667382] "expr temp" "maybe param" "maybe type" "temp"
      (667385 'move' call_tmp[667382](145381 call _cond_test callPostAlloc[144933]))
      if call_tmp[667382]
      {
        (145379 call _ddata_allocate_postalloc data[144928] size[144911])
        (481317 'end of statement' data[144928] size[144911])
      }
      unknown call_tmp[667389] "expr temp" "maybe param" "maybe type" "temp"
      (667392 'move' call_tmp[667389](145395 call _cast int(64)[13] size[144911]))
      unknown call_tmp[667394] "maybe param" "maybe type" "temp"
      (667397 'move' call_tmp[667394](145397 call(145387 call (partial) buildArrayWith _mt[243] D[145272]) elemType[144920] data[144928] call_tmp[667389]))
      unknown A[145398] "dead at end of block"
      (543515 'init var' A[145398] call_tmp[667394])
      (145401 'end of statement' D[145272] elemType[144920] data[144928] size[144911])
      (519669 'move' ret[519659](519668 'deref' A[145398]))
      gotoReturn _end_chpl__initCopy[519657] _end_chpl__initCopy[519657]
      (481324 'end of statement' A[145398])
    }
    label _end_chpl__initCopy[519657]
    (519661 return ret[519659])
  }
  (355102 'used modules list'(113674 'use' ChapelBase[307])(113678 'use' ChapelTuple[56185])(113681 'use' ChapelLocale[89844])(113684 'use' ArrayViewSlice[189686])(113687 'use' ArrayViewRankChange[191441])(113690 'use' ArrayViewReindex[196028])(113693 'import' Reflection[224882])(113696 'use' ChapelDebugPrint[188109])(113699 'use' SysCTypes[20940]))
}