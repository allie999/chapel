AST dump for ChapelArray after pass cleanup.
Module use list: 

{
  (113674 'use' ChapelBase)
  (113678 'use' ChapelTuple)
  (113681 'use' ChapelLocale)
  (113684 'use' ArrayViewSlice)
  (113687 'use' ArrayViewRankChange)
  (113690 'use' ArrayViewReindex)
  (113693 'import' Reflection)
  (113696 'use' ChapelDebugPrint)
  (113699 'use' SysCTypes)
  unknown numPrivateObjects[113705] "no doc"(113704 call chpl__processorAtomicType int[13])
  (113708 'end of statement')
  unknown nullPid[113712] "no doc" "param"(113710 call - 1)
  (113715 'end of statement')
  unknown debugBulkTransfer[113717] "config" "no doc" "param" 0
  (113720 'end of statement')
  unknown useBulkTransfer[113722] "config" "no doc" "param" 1
  (113725 'end of statement')
  unknown useBulkTransferStride[113727] "config" "no doc" "param" 1
  (113730 'end of statement')
  unknown useBulkPtrTransfer[113732] "config" "no doc" "param" useBulkTransfer
  (113735 'end of statement')
  unknown PODValAccess[113737] "config" "no doc" "param" 1
  (113740 'end of statement')
  unknown useBulkTransferDist[113742] "config" "no doc" "param" 0
  (113745 'end of statement')
  unknown arrayAsVecGrowthFactor[113749] "config" "no doc" "param" 1.5
  (113752 'end of statement')
  unknown debugArrayAsVec[113754] "config" "no doc" "param" 0
  (113757 'end of statement')
  function _isPrivatized[113762](arg value[113760]:_any[178](?)) param : _unknown[51]
  {
    (113794 return(113792 call &&(113765 call ! _local)(113790 call ||(113778 call && _privatization(113777 call(113773 call .(113769 call postfix! value) c"dsiSupportsPrivatization")))(113789 call(113785 call .(113781 call postfix! value) c"dsiRequiresPrivatization")))))
  }
  function _newPrivatizedClass[113803](arg value[113801]:_any[178](?)) : _unknown[51]
  {
    const n[113815] "const"(113814 call(113809 call . numPrivateObjects c"fetchAdd") 1)
    (113818 'end of statement')
    const hereID[113824] "const"(113821 call . here c"id")
    (113827 'end of statement')
    const privatizeData[113836] "const"(113835 call(113831 call . value c"dsiGetPrivatizeData"))
    (113839 'end of statement')
    const tmp[113856] "const" "temp"
    (113858 'move' tmp[113856](113854 'deref'(113853 '_wide_get_locale'(113843 call Locales 0))))
    {
      (113851 call _newPrivatizedClassHelp value value n hereID privatizeData)
      (113861 'on block' 0 tmp[113856])
    }
    function _newPrivatizedClassHelp[113868](arg parentValue[113866]:_any[178](?), arg originalValue[113870]:_any[178](?), arg n[113872]:_any[178](?), arg hereID[113874]:_any[178](?), arg privatizeData[113876]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113879] originalValue
      (113882 'end of statement')
      if(113952 call _cond_test(113889 call != hereID(113886 call . here c"id")))
      {
        (113901 call = newValue(113900 call(113895 call . parentValue c"dsiPrivatize") privatizeData))
        (113925 'chpl_newPrivatizedClass' newValue n)
        (113934 call =(113930 call . newValue c"pid") n)
      }
      {
        (113941 'chpl_newPrivatizedClass' newValue n)
        (113949 call =(113945 call . newValue c"pid") n)
      }
      {
        const _cobeginCount[114039] "const" "end count" "temp"
        (114060 'move' _cobeginCount[114039](114057 call _endCountAlloc 1))
        (114052 call _upEndCount _cobeginCount[114039] 1 2)
        {
          if(113992 call _cond_test(113966 call !=(113962 call .(113959 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            const tmp[113984] "const" "temp"
            (113986 'move' tmp[113984](113982 'deref'(113981 '_wide_get_locale'(113969 call . chpl_localeTree c"left"))))
            {
              (113979 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
              (113989 'on block' 0 tmp[113984])
            }
          }
          (114042 call _downEndCount _cobeginCount[114039] nil[44])
          (114041 'cobegin block')
        }
        {
          if(114034 call _cond_test(114008 call !=(114004 call .(114001 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            const tmp[114026] "const" "temp"
            (114028 'move' tmp[114026](114024 'deref'(114023 '_wide_get_locale'(114011 call . chpl_localeTree c"right"))))
            {
              (114021 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
              (114031 'on block' 0 tmp[114026])
            }
          }
          (114048 call _downEndCount _cobeginCount[114039] nil[44])
          (114047 'cobegin block')
        }
        Defer
        {
          {
            (114063 call _endCountFree _cobeginCount[114039])
          }
        }
        (114068 call _waitEndCount _cobeginCount[114039] 1 2)
      }
    }
    (114076 return n)
  }
  { scopeless type
    int[13]
  }
  function _freePrivatizedClass[114087](arg pid[114084] :
  int[13], arg original[114090] :
  object) : _unknown[51] "no return value for void"
  {
    if(114100 call _cond_test(114096 call == pid nullPid))
    {
      (114098 return _void[55])
    }
    const tmp[114120] "const" "temp"
    (114122 'move' tmp[114120](114118 'deref'(114117 '_wide_get_locale'(114109 call Locales 0))))
    {
      {
        (114114 call _freePrivatizedClassHelp pid original)
      }
      (114125 'on block' 0 tmp[114120])
    }
    function _freePrivatizedClassHelp[114132](arg pid[114130]:_any[178](?), arg original[114134]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown prv[114142](114141 call chpl_getPrivatizedCopy(114138 'to unmanaged class from unknown' object) pid)
      (114145 'end of statement')
      if(114156 call _cond_test(114149 call != prv original))
      {
        (114153 call chpl__delete prv)
      }
      function chpl_clearPrivatizedClass[114167](arg pid[114164] :
      int[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
      }
      (114174 call chpl_clearPrivatizedClass pid)
      {
        const _cobeginCount[114249] "const" "end count" "temp"
        (114270 'move' _cobeginCount[114249](114267 call _endCountAlloc 1))
        (114262 call _upEndCount _cobeginCount[114249] 1 2)
        {
          if(114207 call _cond_test(114184 call !=(114180 call .(114177 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            const tmp[114199] "const" "temp"
            (114201 'move' tmp[114199](114197 'deref'(114196 '_wide_get_locale'(114187 call . chpl_localeTree c"left"))))
            {
              (114194 call _freePrivatizedClassHelp pid original)
              (114204 'on block' 0 tmp[114199])
            }
          }
          (114252 call _downEndCount _cobeginCount[114249] nil[44])
          (114251 'cobegin block')
        }
        {
          if(114244 call _cond_test(114221 call !=(114217 call .(114214 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            const tmp[114236] "const" "temp"
            (114238 'move' tmp[114236](114234 'deref'(114233 '_wide_get_locale'(114224 call . chpl_localeTree c"right"))))
            {
              (114231 call _freePrivatizedClassHelp pid original)
              (114241 'on block' 0 tmp[114236])
            }
          }
          (114258 call _downEndCount _cobeginCount[114249] nil[44])
          (114257 'cobegin block')
        }
        Defer
        {
          {
            (114273 call _endCountFree _cobeginCount[114249])
          }
        }
        (114278 call _waitEndCount _cobeginCount[114249] 1 2)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114292](arg value[114290]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const pid[114298] "const"(114295 call . value c"pid")
    (114301 'end of statement')
    const hereID[114307] "const"(114304 call . here c"id")
    (114310 'end of statement')
    const reprivatizeData[114319] "const"(114318 call(114314 call . value c"dsiGetReprivatizeData"))
    (114322 'end of statement')
    const tmp[114339] "const" "temp"
    (114341 'move' tmp[114339](114337 'deref'(114336 '_wide_get_locale'(114326 call Locales 0))))
    {
      (114334 call _reprivatizeHelp value value pid hereID reprivatizeData)
      (114344 'on block' 0 tmp[114339])
    }
    function _reprivatizeHelp[114351](arg parentValue[114349]:_any[178](?), arg originalValue[114353]:_any[178](?), arg pid[114355]:_any[178](?), arg hereID[114357]:_any[178](?), arg reprivatizeData[114359]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114362] originalValue
      (114365 'end of statement')
      if(114396 call _cond_test(114372 call != hereID(114369 call . here c"id")))
      {
        (114381 call = newValue(114380 call chpl_getPrivatizedCopy(114377 'typeof' newValue) pid))
        (114394 call(114388 call . newValue c"dsiReprivatize") parentValue reprivatizeData)
      }
      {
        const _cobeginCount[114479] "const" "end count" "temp"
        (114500 'move' _cobeginCount[114479](114497 call _endCountAlloc 1))
        (114492 call _upEndCount _cobeginCount[114479] 1 2)
        {
          if(114434 call _cond_test(114408 call !=(114404 call .(114401 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            const tmp[114426] "const" "temp"
            (114428 'move' tmp[114426](114424 'deref'(114423 '_wide_get_locale'(114411 call . chpl_localeTree c"left"))))
            {
              (114421 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
              (114431 'on block' 0 tmp[114426])
            }
          }
          (114482 call _downEndCount _cobeginCount[114479] nil[44])
          (114481 'cobegin block')
        }
        {
          if(114474 call _cond_test(114448 call !=(114444 call .(114441 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            const tmp[114466] "const" "temp"
            (114468 'move' tmp[114466](114464 'deref'(114463 '_wide_get_locale'(114451 call . chpl_localeTree c"right"))))
            {
              (114461 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
              (114471 'on block' 0 tmp[114466])
            }
          }
          (114488 call _downEndCount _cobeginCount[114479] nil[44])
          (114487 'cobegin block')
        }
        Defer
        {
          {
            (114503 call _endCountFree _cobeginCount[114479])
          }
        }
        (114508 call _waitEndCount _cobeginCount[114479] 1 2)
      }
    }
  }
  function _makeIndexTuple[114521](param arg rank[114519]:_any[178](?), arg t[114524] :
  _tuple, param arg expand[114529] :
  bool[10] =
  0) : _unknown[51]
  {
    (114541 return t)
  }
  where {
    (114538 call == rank(114535 call . t c"size"))
  }
  function _makeIndexTuple[114551](param arg rank[114549]:_any[178](?), arg t[114554] :
  _tuple, param arg expand[114559] :
  bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114589 call compilerError "index rank must match domain rank")
  }
  where {
    (114568 call != rank(114565 call . t c"size"))
  }
  function _makeIndexTuple[114599](param arg rank[114597]:_any[178](?), arg val[114602] :
  integral, param arg expand[114607] :
  bool[10] =
  0) : _unknown[51]
  {
    if(114701 call _cond_test(114616 call || expand(114614 call == rank 1)))
    {
      unknown t[114623](114621 call * rank(114620 'typeof' val))
      (114626 'end of statement')
      {
        unknown i[114643] 0
        unknown tmp[114644] "maybe param" "temp"
        (114656 'move' tmp[114644](114654 call chpl_compute_low_param_loop_bound 0(114631 call - rank 1)))
        unknown tmp[114645] "maybe param" "temp"
        (114666 'move' tmp[114645](114664 call chpl_compute_high_param_loop_bound 0(114661 call - rank 1)))
        unknown tmp[114646] "maybe param" "temp"
        (114669 'move' tmp[114646] 1)
        ParamForLoop[114671]
        { i[114643] tmp[114644] tmp[114645] tmp[114646]
          (114640 call =(114638 call t i) val)
        }
        label _unused_continueLabel[114648]
        label _breakLabel[114647]
      }
      (114681 return t)
    }
    {
      (114690 call compilerWarning(114687 call _cast string[26](114685 'typeof' val)))
      (114696 call compilerError "index rank must match domain rank")
      (114699 return val)
    }
  }
  function _newArray[114712](arg value[114710]:_any[178](?)) : _unknown[51] "no copy return"
  {
    if(114737 call _cond_test(114717 call _isPrivatized value))
    {
      (114727 return(114718 'new'(114726 call _array(114723 call _newPrivatizedClass value) value)))
    }
    {
      (114735 return(114729 'new'(114734 call _array nullPid value)))
    }
  }
  function _getDomain[114750](arg value[114748]:_any[178](?)) : _unknown[51]
  {
    if(114782 call _cond_test(114759 call !=(114756 call _to_unmanaged(114754 'typeof' value))(114758 'typeof' value)))
    {
      (114780 call compilerError "Domain on borrow created")
    }
    if(114815 call _cond_test(114791 call _isPrivatized value))
    {
      (114803 return(114792 'new'(114802 call _domain(114795 call . value c"pid") value(_unowned = 1))))
    }
    {
      (114813 return(114805 'new'(114812 call _domain nullPid value(_unowned = 1))))
    }
  }
  function _getDistribution[114827](arg value[114825]:_any[178](?)) : _unknown[51]
  {
    if(114856 call _cond_test(114832 call _isPrivatized value))
    {
      (114844 return(114833 'new'(114843 call _distribution(114836 call . value c"pid") value(_unowned = 1))))
    }
    {
      (114854 return(114846 'new'(114853 call _distribution nullPid value(_unowned = 1))))
    }
  }
  function chpl__buildDomainRuntimeType[114871](arg dist[114868] :
  _distribution, param arg rank[114874] :
  int[13], arg idxType[114878]:_any[178](?) =
  int[13], param arg stridable[114883] :
  bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    (114895 return(114887 'new'(114894 call _domain dist rank idxType stridable)))
  }
  function chpl__buildDomainRuntimeType[114906](arg dist[114903] :
  _distribution, arg idxType[114908]:_any[178](?), param arg parSafe[114912] :
  bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    (114923 return(114916 'new'(114922 call _domain dist idxType parSafe)))
  }
  function chpl__buildSparseDomainRuntimeType[114934](arg dist[114931] :
  _distribution, arg parentDom[114937] :
  _domain) type : _unknown[51] "runtime type init fn"
  {
    (114946 return(114940 'new'(114945 call _domain dist parentDom)))
  }
  function chpl__convertRuntimeTypeToValue[114957](arg dist[114954] :
  _distribution, param arg rank[114960] :
  int[13], arg idxType[114964]:_any[178](?) =
  int[13], param arg stridable[114968] :
  bool[10], param arg isNoInit[114972] :
  bool[10]) : _unknown[51]
  {
    (114983 return(114975 'new'(114982 call _domain dist rank idxType stridable)))
  }
  function chpl__convertRuntimeTypeToValue[114994](arg dist[114991] :
  _distribution, arg idxType[114996]:_any[178](?), param arg parSafe[114999] :
  bool[10], param arg isNoInit[115003] :
  bool[10]) : _unknown[51]
  {
    (115013 return(115006 'new'(115012 call _domain dist idxType parSafe)))
  }
  function chpl__convertRuntimeTypeToValue[115024](arg dist[115021] :
  _distribution, arg parentDom[115027] :
  _domain, param arg isNoInit[115031] :
  bool[10]) : _unknown[51]
  {
    (115040 return(115034 'new'(115039 call _domain dist parentDom)))
  }
  function chpl__convertValueToRuntimeType[115051](arg dom[115048] :
  _domain) type : _unknown[51]
  {
    (115090 return(115089 call chpl__buildDomainRuntimeType(115064 call . dom c"dist")(115072 call .(115069 call . dom c"_value") c"rank")(115079 call .(115076 call . dom c"_value") c"idxType")(115086 call .(115083 call . dom c"_value") c"stridable")))
  }
  where {
    (354285 'is_subtype' BaseRectangularDom(115058 'typeof'(115055 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[115102](arg dom[115099] :
  _domain) type : _unknown[51]
  {
    (115136 return(115135 call chpl__buildDomainRuntimeType(115115 call . dom c"dist")(115123 call .(115120 call . dom c"_value") c"idxType")(115132 call .(115127 call . dom c"_value") c"parSafe")))
  }
  where {
    (354286 'is_subtype' BaseAssociativeDom(115109 'typeof'(115106 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[115148](arg dom[115145] :
  _domain) type : _unknown[51]
  {
    (115175 return(115174 call chpl__buildSparseDomainRuntimeType(115161 call . dom c"dist")(115171 call .(115166 call . dom c"_value") c"parentDom")))
  }
  where {
    (354287 'is_subtype' BaseSparseDom(115155 'typeof'(115152 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[115187](arg dom[115184] :
  _domain) type : _unknown[51]
  {
    (115211 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (115215 return 0)
  }
  function chpl__buildArrayRuntimeType[115225](arg dom[115222] :
  _domain, arg eltType[115227]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    (115239 return(115238 call(115232 call . dom c"buildArray") eltType 1))
  }
  function chpl__convertRuntimeTypeToValue[115250](arg dom[115247] :
  _domain, arg eltType[115252]:_any[178](?), param arg isNoInit[115255] :
  bool[10]) : _unknown[51]
  {
    (115268 return(115267 call(115259 call . dom c"buildArray") eltType(115265 call ! isNoInit)))
  }
  function chpl__convertValueToRuntimeType[115281](arg arr[115278] :
  (115275 call chpl__buildArrayRuntimeType nil[44])) type : _unknown[51]
  {
    (115294 return(115293 call chpl__buildArrayRuntimeType(115285 call . arr c"_dom")(115290 call . arr c"eltType")))
  }
  function _getLiteralType[115303](arg t[115301]:_any[178](?)) type : _unknown[51]
  {
    if(115315 call _cond_test(115307 call != t c_string))
    {
      (115310 return t)
    }
    {
      (115313 return string[26])
    }
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115325] "config" "no doc" "param" "unset"
  (115328 'end of statement')
  unknown arrayLiteralLowBound[115330] "config" "no doc" "param" defaultLowBound
  (115333 'end of statement')
  unknown capturedIteratorLowBound[115335] "config" "no doc" "param" defaultLowBound
  (115338 'end of statement')
  function chpl__buildArrayExpr[115346](arg elems[115343]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    if(115417 call _cond_test(115359 call &&(115350 call == CHPL_WARN_DOMAIN_LITERAL "true")(115358 call isRange(115356 call elems 0))))
    {
      (115414 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    unknown elemType[115430] "type variable"(115429 call _getLiteralType(115427 'typeof'(115426 call elems 0)))
    unknown A[115445] "unsafe"(115443 call chpl__buildArrayRuntimeType(115441 call chpl__ensureDomainExpr(115437 call #(115434 call chpl_build_low_bounded_range arrayLiteralLowBound) k)) elemType)
    (115448 'end of statement')
    {
      unknown i[115568] 0
      unknown tmp[115569] "maybe param" "temp"
      (115581 'move' tmp[115569](115579 call chpl_compute_low_param_loop_bound 0(115452 call - k 1)))
      unknown tmp[115570] "maybe param" "temp"
      (115591 'move' tmp[115570](115589 call chpl_compute_high_param_loop_bound 0(115586 call - k 1)))
      unknown tmp[115571] "maybe param" "temp"
      (115594 'move' tmp[115571] 1)
      ParamForLoop[115596]
      { i[115568] tmp[115569] tmp[115570] tmp[115571]
        {
          unknown currType[115464] "type variable"(115463 call _getLiteralType(115461 'typeof'(115460 call elems i)))
          if(115550 call _cond_test(115470 call != currType elemType))
          {
            (115547 call compilerError(115544 call +(115538 call +(115519 call +(115513 call +(115494 call + "Array literal element "(115492 call _cast string[26] i)) " expected to be of type ")(115517 call _cast string[26] elemType)) " but is of type ")(115542 call _cast string[26] currType)))
          }
          (115565 call =(115560 call A(115557 call + i arrayLiteralLowBound))(115564 call elems i))
        }
      }
      label _unused_continueLabel[115573]
      label _breakLabel[115572]
    }
    (115606 return A)
  }
  function chpl__buildAssociativeArrayExpr[115617](arg elems[115614]:_any[178](?) ...) : _unknown[51]
  {
    unknown keyType[115627] "type variable"(115626 call _getLiteralType(115624 'typeof'(115623 call elems 0)))
    unknown valType[115639] "type variable"(115638 call _getLiteralType(115636 'typeof'(115635 call elems 1)))
    unknown D[115647](115645 call chpl__buildDomainRuntimeType defaultDist keyType)
    (115650 'end of statement')
    (115662 call(115654 call . D c"requestCapacity")(115659 call / k 2))
    unknown A[115671](115669 call chpl__buildArrayRuntimeType(115667 call chpl__ensureDomainExpr D) valType)
    (115674 'end of statement')
    {
      unknown i[115848] 0
      unknown tmp[115849] "maybe param" "temp"
      (115860 'move' tmp[115849](115858 call chpl_compute_low_param_loop_bound 0(115678 call - k 1)))
      unknown tmp[115850] "maybe param" "temp"
      (115870 'move' tmp[115850](115868 call chpl_compute_high_param_loop_bound 0(115865 call - k 1)))
      unknown tmp[115851] "maybe param" "temp"
      (115873 'move' tmp[115851] 2)
      ParamForLoop[115875]
      { i[115848] tmp[115849] tmp[115850] tmp[115851]
        {
          unknown elemKey[115689](115688 call elems i)
          (115692 'end of statement')
          unknown elemVal[115701](115700 call elems(115697 call + i 1))
          (115704 'end of statement')
          unknown elemKeyType[115710] "type variable"(115709 call _getLiteralType(115707 'typeof' elemKey))
          unknown elemValType[115718] "type variable"(115717 call _getLiteralType(115715 'typeof' elemVal))
          if(115774 call _cond_test(115723 call != elemKeyType keyType))
          {
            (115771 call compilerError(115768 call +(115762 call +(115759 call +(115753 call +(115750 call + "Associative array key element "(115748 call _cast string[26](115745 call / i 2))) " expected to be of type ")(115757 call _cast string[26] keyType)) " but is of type ")(115766 call _cast string[26] elemKeyType)))
          }
          if(115831 call _cond_test(115780 call != elemValType valType))
          {
            (115828 call compilerError(115825 call +(115819 call +(115816 call +(115810 call +(115807 call + "Associative array value element "(115805 call _cast string[26](115802 call / i 2))) " expected to be of type ")(115814 call _cast string[26] valType)) " but is of type ")(115823 call _cast string[26] elemValType)))
          }
          (115837 call += D elemKey)
          (115845 call =(115843 call A elemKey) elemVal)
        }
      }
      label _unused_continueLabel[115853]
      label _breakLabel[115852]
    }
    (115885 return A)
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115896](arg arr[115893] :
  (115892 'to unmanaged class from unknown' BaseArr), arg eltType[115898]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(115954 call _cond_test(115903 call isArrayType eltType))
    {
      (115911 call =(115907 call . arr c"_decEltRefCounts") 1)
      unknown arrayEltType[115919] "type variable"(115918 call chpl__eltTypeFromArrayRuntimeType eltType)
      const dom[115926] "const" "ref var"(115925 call chpl__domainFromArrayRuntimeType eltType)
      (115929 'end of statement')
      const dv[115934] "const"(115931 call . dom c"_instance")
      (115937 'end of statement')
      (115946 call(115941 call . dv c"add_containing_arr") arr)
      (115952 call chpl_incRefCountsForDomainsInArrayEltTypes arr arrayEltType)
    }
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115968](arg arr[115965] :
  (115964 'to unmanaged class from unknown' BaseArr), arg eltType[115970]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(116171 call _cond_test(115975 call isArrayType eltType))
    {
      if(116004 call _cond_test(115981 call ==(115977 call . arr c"_decEltRefCounts") 0))
      {
        (116002 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116014] "type variable"(116013 call chpl__eltTypeFromArrayRuntimeType eltType)
      const dom[116021] "const" "ref var"(116020 call chpl__domainFromArrayRuntimeType eltType)
      (116024 'end of statement')
      (116029 call chpl_decRefCountsForDomainsInArrayEltTypes arr arrayEltType)
      unknown removeDom[116043](116042 call(116037 call .(116032 call . dom c"_instance") c"remove_containing_arr") arr)
      (116046 'end of statement')
      if(116167 call _cond_test removeDom)
      {
        const tmp[116158] "const" "temp"
        (116160 'move' tmp[116158](116156 'deref'(116155 '_wide_get_locale'(116049 call . dom c"_instance"))))
        {
          {
            const inst[116056] "const"(116053 call . dom c"_instance")
            (116059 'end of statement')
            unknown tmp[116072] "temp"(116071 call(116067 call . inst c"remove"))
            (116079 call _check_tuple_var_decl tmp[116072] 2)
            unknown domToFree[116061](116073 call tmp[116072] 0)
            unknown distToRemove[116063](116076 call tmp[116072] 1)
            (116084 'end of statement')
            unknown distToFree[116089] nil[44](116087 'to unmanaged class from unknown'(116086 'to nilable class from type' BaseDist))
            (116092 'end of statement')
            if(116110 call _cond_test(116095 call != distToRemove nil[44]))
            {
              (116106 call = distToFree(116105 call(116101 call .(116099 call postfix! distToRemove) c"remove")))
            }
            if(116127 call _cond_test(116116 call != domToFree nil[44]))
            {
              (116125 call _delete_dom inst(116124 call _isPrivatized inst))
            }
            if(116150 call _cond_test(116134 call != distToFree nil[44]))
            {
              (116148 call _delete_dist(116138 call postfix! distToFree)(116147 call _isPrivatized(116143 call . inst c"dist")))
            }
          }
          (116163 'on block' 0 tmp[116158])
        }
      }
    }
  }
  function chpl__buildSubDomainType[116184](arg dom[116181] :
  _domain) type : _unknown[51]
  {
    (116190 return(116189 call chpl__convertValueToRuntimeType dom))
  }
  function chpl__isTupleOfRanges[116199](arg tup[116197]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[116230] 0
      unknown tmp[116231] "maybe param" "temp"
      (116243 'move' tmp[116231](116241 call chpl_compute_low_param_loop_bound 0(116207 call -(116203 call . tup c"size") 1)))
      unknown tmp[116232] "maybe param" "temp"
      (116256 'move' tmp[116232](116254 call chpl_compute_high_param_loop_bound 0(116248 call -(116250 call . tup c"size") 1)))
      unknown tmp[116233] "maybe param" "temp"
      (116259 'move' tmp[116233] 1)
      ParamForLoop[116261]
      { i[116230] tmp[116231] tmp[116232] tmp[116233]
        {
          if(116224 call _cond_test(116219 call !(116218 call isRangeType(116216 'typeof'(116215 call tup i)))))
          {
            (116222 return 0)
          }
        }
      }
      label _unused_continueLabel[116235]
      label _breakLabel[116234]
    }
    (116272 return 1)
  }
  function chpl__buildDomainExpr[116282](arg ranges[116279]:_any[178](?) ...) : _unknown[51]
  {
    unknown rank[116292] "param"(116289 call . ranges c"size")
    (116295 'end of statement')
    {
      unknown i[116346] 0
      unknown tmp[116347] "maybe param" "temp"
      (116359 'move' tmp[116347](116357 call chpl_compute_low_param_loop_bound 1(116300 call - rank 1)))
      unknown tmp[116348] "maybe param" "temp"
      (116369 'move' tmp[116348](116367 call chpl_compute_high_param_loop_bound 1(116364 call - rank 1)))
      unknown tmp[116349] "maybe param" "temp"
      (116372 'move' tmp[116349] 1)
      ParamForLoop[116374]
      { i[116346] tmp[116347] tmp[116348] tmp[116349]
        if(116341 call _cond_test(116318 call !=(116308 call .(116307 call ranges 0) c"idxType")(116315 call .(116314 call ranges i) c"idxType")))
        {
          (116339 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116351]
      label _breakLabel[116350]
    }
    {
      unknown i[116425] 0
      unknown tmp[116426] "maybe param" "temp"
      (116438 'move' tmp[116426](116436 call chpl_compute_low_param_loop_bound 0(116386 call - rank 1)))
      unknown tmp[116427] "maybe param" "temp"
      (116448 'move' tmp[116427](116446 call chpl_compute_high_param_loop_bound 0(116443 call - rank 1)))
      unknown tmp[116428] "maybe param" "temp"
      (116451 'move' tmp[116428] 1)
      ParamForLoop[116453]
      { i[116425] tmp[116426] tmp[116427] tmp[116428]
        if(116420 call _cond_test(116397 call !(116396 call isBoundedRange(116394 call ranges i))))
        {
          (116418 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116430]
      label _breakLabel[116429]
    }
    unknown d[116478](116476 call chpl__buildDomainRuntimeType defaultDist rank(116468 call .(116467 call ranges 0) c"idxType")(116474 call chpl__anyStridable ranges))
    (116481 'end of statement')
    (116490 call(116485 call . d c"setIndices") ranges)
    (116493 return d)
  }
  where {
    (116287 call chpl__isTupleOfRanges ranges)
  }
  function chpl__buildDomainExpr[116504](arg keys[116501]:_any[178](?) ...) : _unknown[51]
  {
    unknown count[116510] "param"(116507 call . keys c"size")
    (116513 'end of statement')
    unknown keyType[116523] "type variable"(116522 call _getLiteralType(116520 'typeof'(116519 call keys 0)))
    {
      unknown i[116601] 0
      unknown tmp[116602] "maybe param" "temp"
      (116614 'move' tmp[116602](116612 call chpl_compute_low_param_loop_bound 1(116529 call - count 1)))
      unknown tmp[116603] "maybe param" "temp"
      (116624 'move' tmp[116603](116622 call chpl_compute_high_param_loop_bound 1(116619 call - count 1)))
      unknown tmp[116604] "maybe param" "temp"
      (116627 'move' tmp[116604] 1)
      ParamForLoop[116629]
      { i[116601] tmp[116602] tmp[116603] tmp[116604]
        if(116597 call _cond_test(116542 call != keyType(116541 call _getLiteralType(116539 'typeof'(116538 call keys i)))))
        {
          (116594 call compilerError(116591 call +(116578 call +(116575 call +(116569 call +(116566 call + "Associative domain element "(116564 call _cast string[26] i)) " expected to be of type ")(116573 call _cast string[26] keyType)) " but is of type ")(116589 call _cast string[26](116587 call _getLiteralType(116585 'typeof'(116584 call keys i))))))
        }
      }
      label _unused_continueLabel[116606]
      label _breakLabel[116605]
    }
    unknown D[116643](116641 call chpl__buildDomainRuntimeType defaultDist keyType)
    (116646 'end of statement')
    (116653 call(116648 call . D c"requestCapacity") count)
    {
      unknown i[116670] 0
      unknown tmp[116671] "maybe param" "temp"
      (116683 'move' tmp[116671](116681 call chpl_compute_low_param_loop_bound 0(116658 call - count 1)))
      unknown tmp[116672] "maybe param" "temp"
      (116693 'move' tmp[116672](116691 call chpl_compute_high_param_loop_bound 0(116688 call - count 1)))
      unknown tmp[116673] "maybe param" "temp"
      (116696 'move' tmp[116673] 1)
      ParamForLoop[116698]
      { i[116670] tmp[116671] tmp[116672] tmp[116673]
        (116667 call += D(116666 call keys i))
      }
      label _unused_continueLabel[116675]
      label _breakLabel[116674]
    }
    (116708 return D)
  }
  function chpl__ensureDomainExpr[116718](const  ref arg x[116715] :
  _domain) const ref : _unknown[51]
  {
    (116721 return x)
  }
  function chpl__ensureDomainExpr[116732](arg x[116729]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    (116739 return(116738 call chpl__buildDomainExpr(116736 'expand_tuple' x)))
  }
  function chpl__ensureDomainExpr[116748](arg t[116746]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    (116792 call compilerError "Domain expression was a type ('"(116771 call _cast string[26] t) "') rather than a domain value or range list as expected")
  }
  function chpl__distributed[116803](arg d[116800] :
  _distribution, arg dom[116806] :
  _domain) : _unknown[51]
  {
    if(116870 call _cond_test(116812 call isRectangularDom dom))
    {
      unknown distDom[116839] dom(116836 call chpl__distributed d(116833 call chpl__buildDomainRuntimeType defaultDist(116814 call . dom c"rank")(116822 call .(116819 call . dom c"_value") c"idxType")(116829 call .(116826 call . dom c"_value") c"stridable")))
      (116842 'end of statement')
      (116845 return distDom)
    }
    {
      unknown distDom[116862] dom(116859 call chpl__distributed d(116856 call chpl__buildDomainRuntimeType defaultDist(116851 call .(116848 call . dom c"_value") c"idxType")))
      (116865 'end of statement')
      (116868 return distDom)
    }
  }
  function chpl__distributed[116883](arg d[116880] :
  _distribution, arg ranges[116886]:_any[178](?) ...) : _unknown[51]
  {
    (116902 return(116901 call chpl__distributed d(116900 call chpl__buildDomainExpr(116898 'expand_tuple' ranges))))
  }
  where {
    (116892 call chpl__isTupleOfRanges ranges)
  }
  function chpl__isArrayView[116912](arg arr[116910]:_any[178](?)) param : _unknown[51]
  {
    const value[116926] "const"(116923 IfExpr (116917 call isArray arr) then
    { scopeless
      (116919 call . arr c"_value")
    } else
    { scopeless
      arr
    } )
    (116929 'end of statement')
    unknown isSlice[116937] "param"(116936 call(116932 call . value c"isSliceArrayView"))
    (116940 'end of statement')
    unknown isRankChange[116947] "param"(116946 call(116942 call . value c"isRankChangeArrayView"))
    (116950 'end of statement')
    unknown isReindex[116957] "param"(116956 call(116952 call . value c"isReindexArrayView"))
    (116960 'end of statement')
    (116968 return(116966 call ||(116963 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualArray[116976](arg arr[116974]:_any[178](?)) : _unknown[51]
  {
    unknown value[116990](116987 IfExpr (116981 call isArray arr) then
    { scopeless
      (116983 call . arr c"_value")
    } else
    { scopeless
      arr
    } )
    (116993 'end of statement')
    unknown ret[117011](117008 IfExpr (116998 call chpl__isArrayView value) then
    { scopeless
      (117006 call(117002 call . value c"_getActualArray"))
    } else
    { scopeless
      value
    } )
    (117014 'end of statement')
    (117016 return ret)
  }
  function chpl__isDROrDRView[117024](arg arg[117022]:_any[178](?)) param : _unknown[51]
  {
    if(117180 call _cond_test(117036 call ||(117029 call isDomain arg)(354288 'is_subtype' BaseDom(117032 'typeof' arg))))
    {
      const value[117050] "const"(117047 IfExpr (117041 call isDomain arg) then
      { scopeless
        (117043 call . arg c"_value")
      } else
      { scopeless
        arg
      } )
      (117053 'end of statement')
      unknown isDR[117061] "param"(117060 call(117056 call . value c"isDefaultRectangular"))
      (117064 'end of statement')
      unknown isDRView[117080] "param"(117078 call &&(117068 call chpl__isDomainView value)(117077 call(117073 call .(117072 call chpl__getActualDomain value) c"isDefaultRectangular")))
      (117083 'end of statement')
      (117088 return(117086 call || isDR isDRView))
    }
    {
      if(117176 call _cond_test(117100 call ||(117093 call isArray arg)(354289 'is_subtype' BaseArr(117096 'typeof' arg))))
      {
        const value[117114] "const"(117111 IfExpr (117105 call isArray arg) then
        { scopeless
          (117107 call . arg c"_value")
        } else
        { scopeless
          arg
        } )
        (117117 'end of statement')
        unknown isDR[117125] "param"(117124 call(117120 call . value c"isDefaultRectangular"))
        (117128 'end of statement')
        unknown isDRView[117144] "param"(117142 call &&(117132 call chpl__isArrayView value)(117141 call(117137 call .(117136 call chpl__getActualArray value) c"isDefaultRectangular")))
        (117147 'end of statement')
        (117152 return(117150 call || isDR isDRView))
      }
      {
        (117173 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
  }
  function chpl__isDomainView[117192](arg dom[117190]:_any[178](?)) param : _unknown[51]
  {
    const value[117206] "const"(117203 IfExpr (117197 call isDomain dom) then
    { scopeless
      (117199 call . dom c"_value")
    } else
    { scopeless
      dom
    } )
    (117209 'end of statement')
    unknown isSlice[117219] "param"(117218 call(117214 call . value c"isSliceDomainView"))
    (117222 'end of statement')
    unknown isRankChange[117231] "param"(117230 call(117226 call . value c"isRankChangeDomainView"))
    (117234 'end of statement')
    unknown isReindex[117243] "param"(117242 call(117238 call . value c"isReindexDomainView"))
    (117246 'end of statement')
    (117254 return(117252 call ||(117249 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualDomain[117262](arg dom[117260]:_any[178](?)) : _unknown[51]
  {
    unknown value[117276](117273 IfExpr (117267 call isDomain dom) then
    { scopeless
      (117269 call . dom c"_value")
    } else
    { scopeless
      dom
    } )
    (117279 'end of statement')
    unknown ret[117297](117294 IfExpr (117284 call chpl__isDomainView value) then
    { scopeless
      (117292 call(117288 call . value c"_getActualDomain"))
    } else
    { scopeless
      value
    } )
    (117300 'end of statement')
    (117302 return ret)
  }
  function chpl__isRectangularDomType[117310](arg domainType[117308]:_any[178](?)) param : _unknown[51]
  {
    unknown dom[117313] domainType
    (117316 'end of statement')
    (117328 return(117326 call &&(117321 call isDomainType domainType)(117325 call isRectangularDom dom)))
  }
  function chpl__isSparseDomType[117336](arg domainType[117334]:_any[178](?)) param : _unknown[51]
  {
    unknown dom[117339] domainType
    (117342 'end of statement')
    (117348 return(117347 call isSparseDom dom))
  }
  function chpl__parentDomainFromDomainRuntimeType[117356](arg domainType[117354]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown parentDom[117393] "no auto destroy" "no copy"(117392 'get runtime type field' domainType "parentDom")
    (117396 'end of statement')
    (117405 return(117404 call _getDomain(117400 call . parentDom c"_value")))
  }
  function chpl__distributed[117415](arg d[117412] :
  _distribution, arg domainType[117417]:_any[178](?)) type : _unknown[51]
  {
    if(117450 call _cond_test(117423 call !(117422 call isDomainType domainType)))
    {
      (117448 call compilerError "cannot apply 'dmapped' to the non-domain type "(117446 call _cast string[26] domainType))
    }
    if(117543 call _cond_test(117459 call chpl__isRectangularDomType domainType))
    {
      unknown dom[117461] domainType
      (117464 'end of statement')
      (117491 return(117490 call chpl__buildDomainRuntimeType d(117473 call .(117470 call . dom c"_value") c"rank")(117480 call .(117477 call . dom c"_value") c"idxType")(117487 call .(117484 call . dom c"_value") c"stridable")))
    }
    {
      if(117539 call _cond_test(117496 call chpl__isSparseDomType domainType))
      {
        const parentDom[117501] "const" "ref var"(117500 call chpl__parentDomainFromDomainRuntimeType domainType)
        (117504 'end of statement')
        (117511 return(117510 call chpl__buildSparseDomainRuntimeType d parentDom))
      }
      {
        unknown dom[117514] domainType
        (117517 'end of statement')
        (117537 return(117536 call chpl__buildDomainRuntimeType d(117526 call .(117523 call . dom c"_value") c"idxType")(117533 call .(117530 call . dom c"_value") c"parSafe")))
      }
    }
  }
  function chpl__distributionFromDomainRuntimeType[117554](arg rtt[117552]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown dist[117575] "no auto destroy" "no copy"(117574 'get runtime type field' rtt "dist")
    (117578 'end of statement')
    (117587 return(117586 call _getDistribution(117582 call . dist c"_value")))
  }
  function chpl__domainFromArrayRuntimeType[117595](arg rtt[117593]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown dom[117602] "no auto destroy" "no copy"(117601 'get runtime type field' rtt "dom")
    (117605 'end of statement')
    (117614 return(117613 call _getDomain(117609 call . dom c"_value")))
  }
  function chpl__eltTypeFromArrayRuntimeType[117622](arg rtt[117620]:_any[178](?)) type : _unknown[51]
  {
    unknown eltType[117643] "no auto destroy" "no copy" "type variable"(117642 'get runtime type field' rtt "eltType")
    (117648 return eltType)
  }
  function chpl__instanceTypeFromArrayRuntimeType[117656](arg rtt[117654]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    (117693 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (117701 return(117700 'static field type' rtt "_instance"))
  }
  function chpl__buildIndexType[117711](param arg rank[117708] :
  int[13], arg idxType[117713]:_any[178](?)) type : _unknown[51]
  {
    (117720 return idxType)
  }
  where {
    (117717 call == rank 1)
  }
  function chpl__buildIndexType[117732](param arg rank[117729] :
  int[13], arg idxType[117734]:_any[178](?)) type : _unknown[51]
  {
    (117744 return(117742 call * rank idxType))
  }
  where {
    (117738 call > rank 1)
  }
  function chpl__buildIndexType[117756](param arg rank[117753] :
  int[13]) type : _unknown[51]
  {
    (117763 return(117762 call chpl__buildIndexType rank int[13]))
  }
  function chpl__buildIndexType[117774](arg d[117771] :
  _domain) type : _unknown[51]
  {
    (117790 return(117789 call chpl__buildIndexType(117778 call . d c"rank")(117786 call .(117783 call . d c"_value") c"idxType")))
  }
  function isRectangularDom[117801](arg d[117798] :
  _domain) param : _unknown[51]
  {
    (117815 return(354290 'is_subtype' BaseRectangularDom(117811 call _to_borrowed(117809 'typeof'(117806 call . d c"_value")))))
  }
  function isRectangularArr[117828](arg a[117825] :
  (117822 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (117837 return(117836 call isRectangularDom(117832 call . a c"_dom")))
  }
  function isIrregularDom[117848](arg d[117845] :
  _domain) param : _unknown[51]
  {
    (117860 return(117858 call ||(117853 call isSparseDom d)(117857 call isAssociativeDom d)))
  }
  function isIrregularArr[117873](arg a[117870] :
  (117867 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (117882 return(117881 call isIrregularDom(117877 call . a c"_dom")))
  }
  function isAssociativeDom[117893](arg d[117890] :
  _domain) param : _unknown[51]
  {
    function isAssociativeDomClass[117901](arg dc[117898] :
    BaseAssociativeDom) param : _unknown[51]
    {
      (117904 return 1)
    }
    function isAssociativeDomClass[117914](arg dc[117912]:_any[178](?)) param : _unknown[51]
    {
      (117917 return 0)
    }
    (117932 return(117931 call isAssociativeDomClass(117929 call _to_borrowed(117925 call . d c"_value"))))
  }
  function isAssociativeArr[117944](arg a[117941] :
  (117938 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (117953 return(117952 call isAssociativeDom(117948 call . a c"_dom")))
  }
  function isSparseDom[117964](arg d[117961] :
  _domain) param : _unknown[51]
  {
    function isSparseDomClass[117972](arg dc[117969] :
    BaseSparseDom) param : _unknown[51]
    {
      (117975 return 1)
    }
    function isSparseDomClass[117985](arg dc[117983]:_any[178](?)) param : _unknown[51]
    {
      (117988 return 0)
    }
    (118000 return(117999 call isSparseDomClass(117995 call . d c"_value")))
  }
  function isSparseArr[118012](arg a[118009] :
  (118006 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (118021 return(118020 call isSparseDom(118016 call . a c"_dom")))
  }
  function chpl__checkDomainsMatch[118034](arg a[118031] :
  (118028 call chpl__buildArrayRuntimeType nil[44]), arg b[118036]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118039 'import' HaltWrappers)
    if(118080 call _cond_test boundsChecking)
    {
      if(118075 call _cond_test(118048 call !=(118044 call . a c"_dom") b))
      {
        (118072 call(118051 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkDomainsMatch[118092](arg a[118089] :
  _iteratorRecord, arg b[118094]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118097 'import' HaltWrappers)
    if(118127 call _cond_test boundsChecking)
    {
      unknown tmp[118102] a
      (118105 'end of statement')
      if(118123 call _cond_test(118112 call !=(118108 call . tmp c"_dom") b))
      {
        (118120 call(118115 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkEltTypeMatch[118141](arg a[118138] :
  (118135 call chpl__buildArrayRuntimeType nil[44]), arg b[118143]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(118186 call _cond_test(118150 call !=(118146 call . a c"eltType") b))
    {
      (118183 call compilerError "array element type mismatch in return from "(118176 call _cast string[26](118172 call . a c"eltType")) " to "(118181 call _cast string[26] b))
    }
  }
  function chpl__checkEltTypeMatch[118199](arg a[118196] :
  _iteratorRecord, arg b[118201]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown eltType[118208] "type variable"(118207 call iteratorToArrayElementType(118205 'typeof' a))
    if(118231 call _cond_test(118214 call != eltType b))
    {
      (118228 call compilerError "array element type mismatch in return from "(118221 call _cast string[26] eltType) " to "(118226 call _cast string[26] b))
    }
  }
  type dmap[118239]
  function chpl__buildDistType[118246](arg t[118244]:_any[178](?)) type : _unknown[51]
  {
    unknown x[118261](118260 'to nilable class from type'(118259 call _to_unmanaged t))
    (118264 'end of statement')
    unknown y[118273](118266 'new'(118272 call _distribution(118269 call postfix! x)))
    (118276 'end of statement')
    (118279 return(118278 'typeof' y))
  }
  where {
    (354291 'is_subtype' BaseDist(118252 call _to_borrowed t))
  }
  function chpl__buildDistType[118288](arg t[118286]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118309 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
  }
  function chpl__buildDistValue[118320](arg x[118317] :
  unmanaged[220](?)) : _unknown[51]
  {
    (118338 return(118333 'new'(118337 call _distribution x)))
  }
  where {
    (354292 'is_subtype' BaseDist(118329 'typeof'(118328 call(118324 call . x c"borrow"))))
  }
  function chpl__buildDistValue[118350](in arg x[118347] :
  _owned) : _unknown[51]
  {
    (118373 return(118363 'new'(118372 call _distribution(118370 call(118366 call . x c"release")))))
  }
  where {
    (354293 'is_subtype' BaseDist(118359 'typeof'(118358 call(118354 call . x c"borrow"))))
  }
  function chpl__buildDistValue[118383](arg x[118381]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118404 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
  }
  function _distribution[118967](?).init[118430](arg _mt[118971]:_MT[238], arg this[118969]:_distribution[118967](?), arg _pid[118427] :
  int[13], arg _instance[118432]:_any[178](?), arg _unowned[118435] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (118445 call =(118441 call . this c"_pid") _pid)
    (118454 call =(118450 call . this c"_instance") _instance)
    (118464 call =(118460 call . this c"_unowned") _unowned)
  }
  function _distribution[118967](?).init[118473](arg _mt[118975]:_MT[238], arg this[118973]:_distribution[118967](?), arg value[118471]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (118491 call =(118476 call . this c"_pid")(118488 IfExpr (118482 call _isPrivatized value) then
    { scopeless
      (118486 call _newPrivatizedClass value)
    } else
    { scopeless
      nullPid
    } ))
    (118503 call =(118496 call . this c"_instance")(118502 call _to_unmanaged value))
  }
  function _distribution[118967](?).init=[118514](arg _mt[118979]:_MT[238], arg this[118977]:_distribution[118967](?), const  ref arg other[118511] :
  _distribution) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown value[118527](118526 call(118522 call .(118517 call . other c"_value") c"dsiClone"))
    (118530 'end of statement')
    (118538 call(118533 call . this c"init") value)
  }
  function _distribution[118967](?)._value[118544](arg _mt[118983]:_MT[238], arg this[118981]:_distribution[118967](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(118563 call _cond_test(118549 call _isPrivatized _instance))
    {
      (118556 return(118555 call chpl_getPrivatizedCopy(118552 'typeof' _instance) _pid))
    }
    {
      (118560 return _instance)
    }
  }
  function _distribution[118967](?).chpl_forwarding_expr4__value[118572](arg _mt[118987]:_MT[238], arg this[118985]:_distribution[118967](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (118574 return _value)
  }
  function _distribution[118967](?)._do_destroy[118580](arg _mt[118991]:_MT[238], arg this[118989]:_distribution[118967](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(118641 call _cond_test(118595 call &&(118583 call ! _unowned)(118593 call !(118592 call(118588 call . _instance c"singleton")))))
    {
      const tmp[118632] "const" "temp"
      (118634 'move' tmp[118632](118630 'deref'(118629 '_wide_get_locale' _instance)))
      {
        {
          unknown distToFree[118604](118603 call(118599 call . _instance c"remove"))
          (118607 'end of statement')
          if(118625 call _cond_test(118611 call != distToFree nil[44]))
          {
            (118622 call _delete_dist(118615 call postfix! distToFree)(118621 call _isPrivatized _instance))
          }
        }
        (118637 'on block' 0 tmp[118632])
      }
    }
  }
  function _distribution[118967](?).deinit[118650](arg _mt[118995]:_MT[238], arg this[118993]:_distribution[118967](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118654 call _do_destroy)
  }
  function _distribution[118967](?).clone[118661](arg _mt[118999]:_MT[238], arg this[118997]:_distribution[118967](?)) : _unknown[51] "method" "primary method"
  {
    (118673 return(118663 'new'(118672 call _distribution(118670 call(118666 call . _value c"dsiClone")))))
  }
  function _distribution[118967](?).newRectangularDom[118684](arg _mt[119003]:_MT[238], arg this[119001]:_distribution[118967](?), param arg rank[118681] :
  int[13], arg idxType[118686]:_any[178](?), param arg stridable[118689] :
  bool[10], arg ranges[118704] :
  (118702 call * rank(118701 call range idxType(118697 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method"
  {
    unknown x[118719](118718 call(118710 call . _value c"dsiNewRectangularDom") rank idxType stridable ranges)
    (118722 'end of statement')
    if(118743 call _cond_test(118731 call(118727 call . x c"linksDistribution")))
    {
      (118740 call(118735 call . _value c"add_dom") x)
    }
    (118748 return x)
  }
  function _distribution[118967](?).newRectangularDom[118758](arg _mt[119007]:_MT[238], arg this[119005]:_distribution[118967](?), param arg rank[118755] :
  int[13], arg idxType[118760]:_any[178](?), param arg stridable[118763] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ranges[118778](118776 call * rank(118775 call range idxType(118771 call . BoundedRangeType c"bounded") stridable))
    (118781 'end of statement')
    (118790 return(118789 call newRectangularDom rank idxType stridable ranges))
  }
  function _distribution[118967](?).newAssociativeDom[118798](arg _mt[119011]:_MT[238], arg this[119009]:_distribution[118967](?), arg idxType[118796]:_any[178](?), param arg parSafe[118802] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown x[118816](118815 call(118809 call . _value c"dsiNewAssociativeDom") idxType parSafe)
    (118819 'end of statement')
    if(118836 call _cond_test(118826 call(118822 call . x c"linksDistribution")))
    {
      (118833 call(118828 call . _value c"add_dom") x)
    }
    (118841 return x)
  }
  function _distribution[118967](?).newSparseDom[118851](arg _mt[119015]:_MT[238], arg this[119013]:_distribution[118967](?), param arg rank[118848] :
  int[13], arg idxType[118853]:_any[178](?), arg dom[118856] :
  _domain) : _unknown[51] "method" "primary method"
  {
    unknown x[118870](118869 call(118862 call . _value c"dsiNewSparseDom") rank idxType dom)
    (118873 'end of statement')
    if(118890 call _cond_test(118880 call(118876 call . x c"linksDistribution")))
    {
      (118887 call(118882 call . _value c"add_dom") x)
    }
    (118895 return x)
  }
  function _distribution[118967](?).idxToLocale[118903](arg _mt[119019]:_MT[238], arg this[119017]:_distribution[118967](?), arg ind[118901]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (118914 return(118913 call(118908 call . _value c"dsiIndexToLocale") ind))
  }
  function _distribution[118967](?).readWriteThis[118923](arg _mt[119023]:_MT[238], arg this[119021]:_distribution[118967](?), arg f[118921]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (118927 call <~> f _value)
  }
  function _distribution[118967](?).displayRepresentation[118935](arg _mt[119027]:_MT[238], arg this[119025]:_distribution[118967](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (118944 call(118940 call . _value c"dsiDisplayRepresentation"))
  }
  function _distribution[118967](?).targetLocales[118951](arg _mt[119031]:_MT[238], arg this[119029]:_distribution[118967](?)) : _unknown[51] "method" "primary method"
  {
    (118961 return(118960 call(118956 call . _value c"dsiTargetLocales")))
  }
  type _distribution[118967](?) unknown _pid[118411] int[13] unknown _instance[118415] "owned" unknown _unowned[118420] bool[10] forwarding ( )
  function ==[119043](arg d1[119040] :
  (119039 call _distribution ?[260]), arg d2[119049] :
  (119048 call _distribution ?[260])) : _unknown[51] "inline"
  {
    if(119065 call _cond_test(119060 call ==(119053 call . d1 c"_value")(119057 call . d2 c"_value")))
    {
      (119063 return 1)
    }
    (119086 return(119085 call(119077 call .(119072 call . d1 c"_value") c"dsiEqualDMaps")(119081 call . d2 c"_value")))
  }
  function !=[119099](arg d1[119096] :
  (119095 call _distribution ?[260]), arg d2[119105] :
  (119104 call _distribution ?[260])) : _unknown[51] "inline"
  {
    if(119121 call _cond_test(119116 call ==(119109 call . d1 c"_value")(119113 call . d2 c"_value")))
    {
      (119119 return 0)
    }
    (119142 return(119140 call !(119139 call(119131 call .(119128 call . d1 c"_value") c"dsiEqualDMaps")(119135 call . d2 c"_value"))))
  }
  function chpl_defaultComparator[119148]() : _unknown[51]
  {
    (119151 'use' Sort)
    (119155 return defaultComparator)
  }
  function _domain[125902](?).chpl__promotionType[119176](arg _mt[125906]:_MT[238], arg this[125904]:_domain[125902](?)) type : _unknown[51] "method" "primary method"
  {
    (119186 return(119184 call chpl__buildIndexType rank(119181 call . _value c"idxType")))
  }
  function _domain[125902](?).init[119197](arg _mt[125910]:_MT[238], arg this[125908]:_domain[125902](?), arg _pid[119194] :
  int[13], arg _instance[119199]:_any[178](?), arg _unowned[119202] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119210 call =(119206 call . this c"_pid") _pid)
    (119219 call =(119215 call . this c"_instance") _instance)
    (119227 call =(119223 call . this c"_unowned") _unowned)
  }
  function _domain[125902](?).init[119236](arg _mt[125914]:_MT[238], arg this[125912]:_domain[125902](?), arg value[119234]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(119252 call _cond_test(119245 call !=(119242 call _to_unmanaged(119240 'typeof' value))(119244 'typeof' value)))
    {
      (119250 call compilerError "Domain on borrow created")
    }
    if(119307 call _cond_test(119261 call _isPrivatized value))
    {
      if(119293 call _cond_test(119267 call ==(119263 call . value c"pid") nullPid))
      {
        (119277 call =(119270 call . this c"_pid")(119276 call _newPrivatizedClass value))
      }
      {
        (119289 call =(119282 call . this c"_pid")(119286 call . value c"pid"))
      }
    }
    {
      (119303 call =(119299 call . this c"_pid") nullPid)
    }
    (119316 call =(119312 call . this c"_instance") value)
  }
  function _domain[125902](?).init[119327](arg _mt[125918]:_MT[238], arg this[125916]:_domain[125902](?), arg d[119324] :
  _distribution, param arg rank[119330] :
  int[13], arg idxType[119334]:_any[178](?) =
  int[13], param arg stridable[119339] :
  bool[10] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119357 call(119344 call . this c"init")(119355 call(119348 call . d c"newRectangularDom") rank idxType stridable))
  }
  function _domain[125902](?).init[119368](arg _mt[125922]:_MT[238], arg this[125920]:_domain[125902](?), arg d[119365] :
  _distribution, param arg rank[119371] :
  int[13], arg idxType[119375]:_any[178](?) =
  int[13], param arg stridable[119380] :
  bool[10] =
  0, arg ranges[119396] :
  (119394 call * rank(119393 call range idxType(119389 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119414 call(119400 call . this c"init")(119412 call(119404 call . d c"newRectangularDom") rank idxType stridable ranges))
  }
  function _domain[125902](?).init[119425](arg _mt[125926]:_MT[238], arg this[125924]:_domain[125902](?), arg d[119422] :
  _distribution, arg idxType[119427]:_any[178](?), param arg parSafe[119431] :
  bool[10] =
  1) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119450 call(119436 call . this c"init")(119448 call(119442 call . d c"newAssociativeDom") idxType parSafe))
  }
  function _domain[125902](?).init[119461](arg _mt[125930]:_MT[238], arg this[125928]:_domain[125902](?), arg d[119458] :
  _distribution, arg dom[119464] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119492 call(119468 call . this c"init")(119490 call(119474 call . d c"newSparseDom")(119478 call . dom c"rank")(119486 call .(119483 call . dom c"_value") c"idxType") dom))
  }
  function _domain[125902](?).init=[119503](arg _mt[125934]:_MT[238], arg this[125932]:_domain[125902](?), const  ref arg other[119500] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119536 call(119510 call . this c"init")(119514 call . other c"dist")(119519 call . other c"rank")(119523 call . other c"idxType")(119527 call . other c"stridable")(119535 call(119531 call . other c"dims")))
  }
  where {
    (119508 call isRectangularDom other)
  }
  function _domain[125902](?).init=[119548](arg _mt[125938]:_MT[238], arg this[125936]:_domain[125902](?), const  ref arg other[119545] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(119640 call _cond_test(119553 call isAssociativeDom other))
    {
      (119571 call(119555 call . this c"init")(119559 call . other c"dist")(119564 call . other c"idxType")(119568 call . other c"parSafe"))
    }
    {
      if(119636 call _cond_test(119577 call isSparseDom other))
      {
        (119591 call(119579 call . this c"init")(119583 call . other c"dist")(119588 call . other c"parentDom"))
      }
      {
        (119625 call compilerError "Cannot initialize '"(119616 call _cast string[26](119614 'typeof' this)) "' from '"(119622 call _cast string[26](119620 'typeof' other)) "'")
        (119634 call(119629 call . this c"init") nil[44])
      }
    }
    (119656 call(119649 call . _instance c"dsiAssignDomain") other(lhsPrivate = 1))
  }
  function _domain[125902](?)._value[119662](arg _mt[125942]:_MT[238], arg this[125940]:_domain[125902](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(119681 call _cond_test(119667 call _isPrivatized _instance))
    {
      (119674 return(119673 call chpl_getPrivatizedCopy(119670 'typeof' _instance) _pid))
    }
    {
      (119678 return _instance)
    }
  }
  function _domain[125902](?).chpl_forwarding_expr5__value[119691](arg _mt[125946]:_MT[238], arg this[125944]:_domain[125902](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (119693 return _value)
  }
  function _domain[125902](?).chpl__serialize[119699](arg _mt[125950]:_MT[238], arg this[125948]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (119721 return(119720 call(119716 call .(119711 call . this c"_value") c"chpl__serialize")))
  }
  where {
    (119709 call(119705 call .(119702 call . this c"_value") c"isDefaultRectangular"))
  }
  function _domain[125902](?).chpl__deserialize[119731](arg _mt[125954]:_MT[238], arg this[125952]:_domain[125902](?), arg data[119729]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown valueType[119738] "type variable"(119737 'static field type' this "_instance")
    (119758 return(119742 'new'(119757 call _domain(119755 call(119750 call .(119747 call _to_borrowed valueType) c"chpl__deserialize") data))))
  }
  function _domain[125902](?)._do_destroy[119764](arg _mt[125958]:_MT[238], arg this[125956]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(119883 call _cond_test(119767 call ! _unowned))
    {
      const tmp[119873] "const" "temp"
      (119875 'move' tmp[119873](119871 'deref'(119870 '_wide_get_locale' _instance)))
      {
        {
          const inst[119771] "const" _instance
          (119774 'end of statement')
          unknown tmp[119787] "temp"(119786 call(119782 call . inst c"remove"))
          (119794 call _check_tuple_var_decl tmp[119787] 2)
          unknown domToFree[119776](119788 call tmp[119787] 0)
          unknown distToRemove[119778](119791 call tmp[119787] 1)
          (119799 'end of statement')
          unknown distToFree[119804] nil[44](119802 'to unmanaged class from unknown'(119801 'to nilable class from type' BaseDist))
          (119807 'end of statement')
          if(119825 call _cond_test(119810 call != distToRemove nil[44]))
          {
            (119821 call = distToFree(119820 call(119816 call .(119814 call postfix! distToRemove) c"remove")))
          }
          if(119842 call _cond_test(119831 call != domToFree nil[44]))
          {
            (119840 call _delete_dom inst(119839 call _isPrivatized inst))
          }
          if(119865 call _cond_test(119849 call != distToFree nil[44]))
          {
            (119863 call _delete_dist(119853 call postfix! distToFree)(119862 call _isPrivatized(119858 call . inst c"dist")))
          }
        }
        (119878 'on block' 0 tmp[119873])
      }
    }
    {
    }
  }
  function _domain[125902](?).deinit[119892](arg _mt[125962]:_MT[238], arg this[125960]:_domain[125902](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119896 call _do_destroy)
  }
  function _domain[125902](?).dist[119903](arg _mt[125966]:_MT[238], arg this[125964]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    (119912 return(119911 call _getDistribution(119907 call . _value c"dist")))
  }
  function _domain[125902](?).rank[119919](arg _mt[125970]:_MT[238], arg this[125968]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    if(119940 call _cond_test(119929 call ||(119924 call isRectangularDom this)(119928 call isSparseDom this)))
    {
      (119935 return(119932 call . _value c"rank"))
    }
    {
      (119938 return 1)
    }
  }
  function _domain[125902](?).idxType[119951](arg _mt[125974]:_MT[238], arg this[125972]:_domain[125902](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (119957 return(119954 call . _value c"idxType"))
  }
  function _domain[125902](?).intIdxType[119964](arg _mt[125978]:_MT[238], arg this[125976]:_domain[125902](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (119973 return(119972 call chpl__idxTypeToIntIdxType(119968 call . _value c"idxType")))
  }
  function _domain[125902](?).stridable[119980](arg _mt[125982]:_MT[238], arg this[125980]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    (119990 return(119987 call . _value c"stridable"))
  }
  where {
    (119985 call isRectangularDom this)
  }
  function _domain[125902](?).stridable[119998](arg _mt[125986]:_MT[238], arg this[125984]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (120011 return(120008 call .(120005 call . _value c"parentDom") c"stridable"))
  }
  where {
    (120003 call isSparseDom this)
  }
  function _domain[125902](?).stridable[120019](arg _mt[125990]:_MT[238], arg this[125988]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120044 call compilerError "associative domains do not support .stridable")
  }
  where {
    (120024 call isAssociativeDom this)
  }
  function _domain[125902](?).these[120052](arg _mt[125994]:_MT[238], arg this[125992]:_domain[125902](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[120065] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120066] "expr temp" "temp"
      (120075 'move' _iterator[120066](120073 call _getIterator(120060 call(120056 call . _value c"these"))))
      Defer
      {
        {
          (120092 call _freeIterator _iterator[120066])
        }
      }
      { scopeless type
        (120081 'move' _indexOfInterest[120065](120078 call iteratorIndex _iterator[120066]))
      }
      ForLoop[120067]
      {
        unknown i[120085] "index var" "insert auto destroy"
        (120087 'move' i[120085] _indexOfInterest[120065])
        {
          (120062 yield i)
        }
        label _continueLabel[120070]
        _indexOfInterest[120065]
        _iterator[120066]
      }
      label _breakLabel[120071]
    }
  }
  function _domain[125902](?).these[120108](arg _mt[125998]:_MT[238], arg this[125996]:_domain[125902](?), param arg tag[120105] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[120167] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120168] "expr temp" "temp"
      (120177 'move' _iterator[120168](120175 call _getIterator(120163 call(120158 call . _value c"these") tag)))
      Defer
      {
        {
          (120194 call _freeIterator _iterator[120168])
        }
      }
      { scopeless type
        (120183 'move' _indexOfInterest[120167](120180 call iteratorIndex _iterator[120168]))
      }
      ForLoop[120169]
      {
        unknown i[120187] "index var" "insert auto destroy"
        (120189 'move' i[120187] _indexOfInterest[120167])
        (120165 yield i)
        label _continueLabel[120172]
        _indexOfInterest[120167]
        _iterator[120168]
      }
      label _breakLabel[120173]
    }
  }
  where {
    (120154 call &&(120115 call == tag(120112 call . iterKind c"standalone"))(120153 'method call resolves' _value "these"(tag = tag)))
  }
  function _domain[125902](?).these[120211](arg _mt[126002]:_MT[238], arg this[126000]:_domain[125902](?), param arg tag[120208] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[120231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120232] "expr temp" "temp"
      (120241 'move' _iterator[120232](120239 call _getIterator(120227 call(120222 call . _value c"these") tag)))
      Defer
      {
        {
          (120258 call _freeIterator _iterator[120232])
        }
      }
      { scopeless type
        (120247 'move' _indexOfInterest[120231](120244 call iteratorIndex _iterator[120232]))
      }
      ForLoop[120233]
      {
        unknown followThis[120251] "index var" "insert auto destroy"
        (120253 'move' followThis[120251] _indexOfInterest[120231])
        (120229 yield followThis)
        label _continueLabel[120236]
        _indexOfInterest[120231]
        _iterator[120232]
      }
      label _breakLabel[120237]
    }
  }
  where {
    (120218 call == tag(120215 call . iterKind c"leader"))
  }
  function _domain[125902](?).these[120275](arg _mt[126006]:_MT[238], arg this[126004]:_domain[125902](?), param arg tag[120272] :
  iterKind, arg followThis[120277]:_any[178](?), param arg fast[120281] :
  bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    if(120399 call _cond_test(120301 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[120317] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120318] "expr temp" "temp"
        (120327 'move' _iterator[120318](120325 call _getIterator(120313 call(120304 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (120344 call _freeIterator _iterator[120318])
          }
        }
        { scopeless type
          (120333 'move' _indexOfInterest[120317](120330 call iteratorIndex _iterator[120318]))
        }
        ForLoop[120319]
        {
          unknown i[120337] "index var" "insert auto destroy"
          (120339 'move' i[120337] _indexOfInterest[120317])
          (120315 yield i)
          label _continueLabel[120322]
          _indexOfInterest[120317]
          _iterator[120318]
        }
        label _breakLabel[120323]
      }
    }
    {
      {
        unknown _indexOfInterest[120364] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120365] "expr temp" "temp"
        (120374 'move' _iterator[120365](120372 call _getIterator(120360 call(120354 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (120391 call _freeIterator _iterator[120365])
          }
        }
        { scopeless type
          (120380 'move' _indexOfInterest[120364](120377 call iteratorIndex _iterator[120365]))
        }
        ForLoop[120366]
        {
          unknown i[120384] "index var" "insert auto destroy"
          (120386 'move' i[120384] _indexOfInterest[120364])
          (120362 yield i)
          label _continueLabel[120369]
          _indexOfInterest[120364]
          _iterator[120365]
        }
        label _breakLabel[120370]
      }
    }
  }
  where {
    (120290 call == tag(120287 call . iterKind c"follower"))
  }
  function _domain[125902](?).this[120413](arg _mt[126010]:_MT[238], arg this[126008]:_domain[125902](?), arg d[120410] :
  _domain) : _unknown[51] "method" "primary method" "no doc"
  {
    if(120455 call _cond_test(120420 call ==(120416 call . d c"rank") rank))
    {
      (120432 return(120431 call this(120429 'expand_tuple'(120428 call(120424 call . d c"getIndices")))))
    }
    {
      (120453 call compilerError "slicing a domain with a domain of a different rank")
    }
  }
  function _domain[125902](?).this[120470](arg _mt[126014]:_MT[238], arg this[126012]:_domain[125902](?), arg ranges[120467]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown stridable[120486] "param"(120484 call ||(120477 call . _value c"stridable")(120483 call chpl__anyStridable ranges))
    (120489 'end of statement')
    unknown r[120506](120504 call * rank(120503 call range(120494 call . _value c"idxType")(120499 call . BoundedRangeType c"bounded") stridable))
    (120509 'end of statement')
    {
      unknown i[120538] 0
      unknown tmp[120539] "maybe param" "temp"
      (120551 'move' tmp[120539](120549 call chpl_compute_low_param_loop_bound 0(120513 call - rank 1)))
      unknown tmp[120540] "maybe param" "temp"
      (120561 'move' tmp[120540](120559 call chpl_compute_high_param_loop_bound 0(120556 call - rank 1)))
      unknown tmp[120541] "maybe param" "temp"
      (120564 'move' tmp[120541] 1)
      ParamForLoop[120566]
      { i[120538] tmp[120539] tmp[120540] tmp[120541]
        {
          (120534 call =(120520 call r i)(120533 call(120527 call(120522 call . _value c"dsiDim") i)(120531 call ranges i)))
        }
      }
      label _unused_continueLabel[120543]
      label _breakLabel[120542]
    }
    (120587 return(120575 'new'(120586 call _domain dist rank(120581 call . _value c"idxType") stridable r)))
  }
  where {
    (120475 call chpl__isTupleOfRanges ranges)
  }
  function _domain[125902](?).this[120598](arg _mt[126018]:_MT[238], arg this[126016]:_domain[125902](?), arg args[120595]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown collapsedDim[120612](120610 call * rank bool[10])
    (120615 'end of statement')
    unknown idx[120621](120619 call * rank idxType)
    (120624 'end of statement')
    unknown uprank[120630] "param"(120629 call chpl__countRanges(120627 'expand_tuple' args))
    (120633 'end of statement')
    unknown upstridable[120644] "param"(120642 call ||(120635 call . this c"stridable")(120641 call chpl__anyRankChangeStridable args))
    (120647 'end of statement')
    unknown upranges[120661](120659 call * uprank(120658 call range(idxType =(120651 call . _value c"idxType"))(stridable = upstridable)))
    (120664 'end of statement')
    unknown updim[120666] 0
    (120669 'end of statement')
    {
      unknown i[120760] 0
      unknown tmp[120761] "maybe param" "temp"
      (120773 'move' tmp[120761](120771 call chpl_compute_low_param_loop_bound 0(120673 call - rank 1)))
      unknown tmp[120762] "maybe param" "temp"
      (120783 'move' tmp[120762](120781 call chpl_compute_high_param_loop_bound 0(120778 call - rank 1)))
      unknown tmp[120763] "maybe param" "temp"
      (120786 'move' tmp[120763] 1)
      ParamForLoop[120788]
      { i[120760] tmp[120761] tmp[120762] tmp[120763]
        {
          if(120755 call _cond_test(120683 call isRange(120681 call args i)))
          {
            (120689 call =(120687 call collapsedDim i) 0)
            (120704 call =(120696 call idx i)(120701 call .(120700 call dim i) c"alignedLow"))
            (120727 call =(120710 call upranges updim)(120726 call(120720 call(120715 call .(120712 call . this c"_value") c"dsiDim") i)(120724 call args i)))
            (120732 call += updim 1)
          }
          {
            (120740 call =(120738 call collapsedDim i) 1)
            (120752 call =(120747 call idx i)(120751 call args i))
          }
        }
      }
      label _unused_continueLabel[120765]
      label _breakLabel[120764]
    }
    const emptyrange[120802] "const"(120801 'typeof'(120800 call upranges 0))
    (120805 'end of statement')
    if(120865 call _cond_test(120810 call !(120809 call contains idx)))
    {
      {
        unknown d[120827] 0
        unknown tmp[120828] "maybe param" "temp"
        (120840 'move' tmp[120828](120838 call chpl_compute_low_param_loop_bound 0(120815 call - uprank 1)))
        unknown tmp[120829] "maybe param" "temp"
        (120850 'move' tmp[120829](120848 call chpl_compute_high_param_loop_bound 0(120845 call - uprank 1)))
        unknown tmp[120830] "maybe param" "temp"
        (120853 'move' tmp[120830] 1)
        ParamForLoop[120855]
        { d[120827] tmp[120828] tmp[120829] tmp[120830]
          (120824 call =(120822 call upranges d) emptyrange)
        }
        label _unused_continueLabel[120832]
        label _breakLabel[120831]
      }
    }
    const rcdist[120889] "const"(120871 'new'(_chpl_manager = unmanaged[220](?))(120888 call ArrayViewRankChangeDist(downDistPid =(120874 call . dist c"_pid"))(downDistInst =(120880 call . dist c"_instance"))(collapsedDim = collapsedDim)(idx = idx)))
    (120892 'end of statement')
    const rcdistRec[120898] "const"(120893 'new'(120897 call _distribution rcdist))
    (120901 'end of statement')
    (120923 return(120902 'new'(120922 call _domain rcdistRec uprank(120911 call .(120910 call upranges 0) c"idxType")(120918 call .(120917 call upranges 0) c"stridable") upranges)))
  }
  where {
    (120607 call _validRankChangeArgs args(120604 call . _value c"idxType"))
  }
  function _domain[125902](?).this[120936](arg _mt[126022]:_MT[238], arg this[126020]:_domain[125902](?), arg i[120932] ... :
  integral) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120957 call compilerError "domain slice requires a range in at least one dimension")
  }
  function _domain[125902](?).this[120969](arg _mt[126026]:_MT[238], arg this[126024]:_domain[125902](?), arg args[120966]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(121020 call _cond_test(120973 call == numArgs rank))
    {
      (120994 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121018 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
  }
  function _domain[125902](?).dims[121030](arg _mt[126030]:_MT[238], arg this[126028]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    (121038 return(121037 call(121033 call . _value c"dsiDims")))
  }
  function _domain[125902](?).dim[121049](arg _mt[126034]:_MT[238], arg this[126032]:_domain[125902](?), arg d[121046] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (121052 'use' HaltWrappers)
    if(121129 call _cond_test boundsChecking)
    {
      if(121124 call _cond_test(121064 call ||(121058 call < d 0)(121062 call >= d rank)))
      {
        (121122 call(121067 call . HaltWrappers c"boundsCheckHalt")(121119 call +(121110 call +(121091 call + "dim("(121089 call _cast string[26] d)) ") is out-of-bounds; must be 0..")(121117 call _cast string[26](121114 call - rank 1))))
      }
    }
    (121141 return(121140 call(121135 call . _value c"dsiDim") d))
  }
  function _domain[125902](?).dim[121151](arg _mt[126038]:_MT[238], arg this[126036]:_domain[125902](?), param arg d[121148] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    if(121191 call _cond_test(121164 call ||(121155 call < d 0)(121162 call > d(121160 call - rank 1))))
    {
      (121189 call compilerError "dim() must take a value from 0.."(121187 call - rank 1))
    }
    (121204 return(121203 call(121198 call . _value c"dsiDim") d))
  }
  function _domain[125902](?).dimIter[121212](arg _mt[126042]:_MT[238], arg this[126040]:_domain[125902](?), param arg d[121210]:_any[178](?), arg ind[121214]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[121230] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121231] "expr temp" "temp"
      (121240 'move' _iterator[121231](121238 call _getIterator(121226 call(121220 call . _value c"dimIter") d ind)))
      Defer
      {
        {
          (121257 call _freeIterator _iterator[121231])
        }
      }
      { scopeless type
        (121246 'move' _indexOfInterest[121230](121243 call iteratorIndex _iterator[121231]))
      }
      ForLoop[121232]
      {
        unknown i[121250] "index var" "insert auto destroy"
        (121252 'move' i[121250] _indexOfInterest[121230])
        (121228 yield i)
        label _continueLabel[121235]
        _indexOfInterest[121230]
        _iterator[121231]
      }
      label _breakLabel[121236]
    }
  }
  function _domain[125902](?).shape[121269](arg _mt[126046]:_MT[238], arg this[126044]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown s[121291](121289 call * rank(121286 call .(121285 call dim 0) c"intIdxType"))
    (121294 'end of statement')
    {
      unknown _indexOfInterest[121326] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121327] "expr temp" "temp"
      (121361 'move' _iterator[121327](121314 call _build_tuple(121344 call _getIterator(121354 call chpl_direct_counted_range_iter 0(121350 call . s c"size")))(121358 call _getIterator(121357 call dims))))
      Defer
      {
        {
          (121391 call _freeIterator _iterator[121327])
        }
      }
      { scopeless type
        (121366 'move' _indexOfInterest[121326](121363 call iteratorIndex _iterator[121327]))
      }
      ForLoop[121328]
      {
        (121371 call _check_tuple_var_decl _indexOfInterest[121326] 2)
        unknown i[121377] "index var" "insert auto destroy"
        (121379 'move' i[121377](121375 call _indexOfInterest[121326] 0))
        unknown r[121384] "index var" "insert auto destroy"
        (121386 'move' r[121384](121382 call _indexOfInterest[121326] 1))
        (121323 call =(121318 call s i)(121320 call . r c"size"))
        label _continueLabel[121331]
        _indexOfInterest[121326]
        _iterator[121327]
      }
      label _breakLabel[121332]
    }
    (121399 return s)
  }
  where {
    (121279 call ||(121274 call isRectangularDom this)(121278 call isSparseDom this))
  }
  function _domain[125902](?).shape[121406](arg _mt[126050]:_MT[238], arg this[126048]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown s[121416](121414 call _build_tuple(121413 'typeof' size))
    (121419 'end of statement')
    (121426 call =(121424 call s 0) size)
    (121430 return s)
  }
  where {
    (121411 call isAssociativeDom this)
  }
  function _domain[125902](?).shape[121437](arg _mt[126054]:_MT[238], arg this[126052]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121458 call compilerError ".shape not supported on this domain")
  }
  function _domain[125902](?).buildArray[121467](arg _mt[126058]:_MT[238], arg this[126056]:_domain[125902](?), arg eltType[121465]:_any[178](?), param arg initElts[121470] :
  bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    if(121499 call _cond_test(121475 call == eltType void[4]))
    {
      (121496 call compilerError "array element type cannot be void")
    }
    if(121667 call _cond_test(121507 call isGenericType eltType))
    {
      (121533 call compilerWarning(121530 call + "creating an array with element type "(121528 call _cast string[26] eltType)))
      if(121571 call _cond_test(121547 call &&(121539 call isClassType eltType)(121545 call !(121544 call isGenericType(121542 'to borrowed class from unknown' eltType)))))
      {
        (121568 call compilerWarning "which now means class type with generic management")
      }
      (121594 call compilerError "array element type cannot currently be generic")
    }
    {
      if(121663 call _cond_test(121606 call &&(121599 call isSparseDom this)(121604 call !(121603 call isDefaultInitializable eltType))))
      {
        if(121658 call _cond_test(121611 call isNonNilableClass eltType))
        {
          (121631 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121655 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    if(121784 call _cond_test chpl_warnUnstable)
    {
      if(121779 call _cond_test(121681 call &&(121676 call isRectangularDom this)(121678 call . this c"stridable")))
      {
        if(121775 call _cond_test(121685 call == rank 1))
        {
          if(121715 call _cond_test(121692 call <(121688 call . this c"stride") 0))
          {
            (121713 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121740] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121741] "expr temp" "temp"
            (121750 'move' _iterator[121741](121748 call _getIterator(121723 call . this c"stride")))
            Defer
            {
              {
                (121767 call _freeIterator _iterator[121741])
              }
            }
            { scopeless type
              (121756 'move' _indexOfInterest[121740](121753 call iteratorIndex _iterator[121741]))
            }
            ForLoop[121742]
            {
              unknown s[121760] "index var" "insert auto destroy"
              (121762 'move' s[121760] _indexOfInterest[121740])
              if(121735 call _cond_test(121728 call < s 0))
              {
                (121733 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121745]
              _indexOfInterest[121740]
              _iterator[121741]
            }
            label _breakLabel[121746]
          }
        }
      }
    }
    unknown x[121799](121798 call(121792 call . _value c"dsiBuildArray") eltType initElts)
    (121802 'end of statement')
    function help[121805]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      (121815 call(121810 call . _value c"add_arr") x)
    }
    (121822 call help)
    (121831 call chpl_incRefCountsForDomainsInArrayEltTypes x(121828 call . x c"eltType"))
    (121837 return(121836 call _newArray x))
  }
  function _domain[125902](?).buildArrayWith[121845](arg _mt[126062]:_MT[238], arg this[126060]:_domain[125902](?), arg eltType[121843]:_any[178](?), arg data[121851] :
  (121850 call _ddata eltType), arg allocSize[121855] :
  int[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    if(121868 call _cond_test(121860 call == eltType void[4]))
    {
      (121865 call compilerError "array element type cannot be void")
    }
    unknown x[121884](121883 call(121876 call . _value c"dsiBuildArrayWith") eltType data allocSize)
    (121887 'end of statement')
    function help[121890]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      (121898 call(121893 call . _value c"add_arr") x)
    }
    (121905 call help)
    (121914 call chpl_incRefCountsForDomainsInArrayEltTypes x(121911 call . x c"eltType"))
    (121920 return(121919 call _newArray x))
  }
  function _domain[125902](?).clear[121926](arg _mt[126066]:_MT[238], arg this[126064]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121934](121933 'typeof' this)
    (121937 'end of statement')
    (121941 call = this emptyDom)
  }
  where {
    (121931 call isRectangularDom this)
  }
  function _domain[125902](?).clear[121949](arg _mt[126070]:_MT[238], arg this[126068]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (121958 call(121954 call . _value c"dsiClear"))
  }
  function _domain[125902](?).add[121967](arg _mt[126074]:_MT[238], arg this[126072]:_domain[125902](?), in arg i[121965]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (121978 return(121977 call(121972 call . _value c"dsiAdd") i))
  }
  function _domain[125902](?).bulkAdd[121995](arg _mt[126078]:_MT[238], arg this[126076]:_domain[125902](?), arg inds[121992] :
  (121989 call chpl__buildArrayRuntimeType nil[44](121986 call . _value c"idxType")), arg dataSorted[121998] =
  0, arg isUnique[122002] =
  0, arg preserveInds[122006] =
  1, arg addOn[122010] =
  nilLocale) : _unknown[51] "method" "primary method" "no doc"
  {
    if(122036 call _cond_test(122031 call ==(122027 call . inds c"size") 0))
    {
      (122034 return 0)
    }
    (122055 return(122054 call(122045 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (122024 call &&(122016 call isSparseDom this)(122022 call ==(122018 call . _value c"rank") 1))
  }
  function _domain[125902](?).makeIndexBuffer[122066](arg _mt[126082]:_MT[238], arg this[126080]:_domain[125902](?), arg size[122063] :
  int[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (122077 return(122076 call(122071 call . _value c"dsiMakeIndexBuffer") size))
  }
  function _domain[125902](?).bulkAdd[122100](arg _mt[126086]:_MT[238], arg this[126084]:_domain[125902](?), arg inds[122097] :
  (122094 call chpl__buildArrayRuntimeType nil[44](122092 call *(122085 call . _value c"rank")(122089 call . _value c"idxType"))), arg dataSorted[122103] =
  0, arg isUnique[122107] =
  0, arg preserveInds[122111] =
  1, arg addOn[122115] =
  nilLocale) : _unknown[51] "method" "primary method"
  {
    if(122141 call _cond_test(122136 call ==(122132 call . inds c"size") 0))
    {
      (122139 return 0)
    }
    (122158 return(122157 call(122148 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (122129 call &&(122121 call isSparseDom this)(122127 call >(122123 call . _value c"rank") 1))
  }
  function _domain[125902](?).remove[122167](arg _mt[126090]:_MT[238], arg this[126088]:_domain[125902](?), arg i[122165]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (122178 return(122177 call(122172 call . _value c"dsiRemove") i))
  }
  function _domain[125902](?).requestCapacity[122187](arg _mt[126094]:_MT[238], arg this[126092]:_domain[125902](?), arg i[122185]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(122215 call _cond_test(122191 call < i 0))
    {
      (122212 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    if(122247 call _cond_test(122224 call !(122223 call isAssociativeDom this)))
    {
      (122245 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    (122260 call(122255 call . _value c"dsiRequestCapacity") i)
  }
  function _domain[125902](?).size[122266](arg _mt[126098]:_MT[238], arg this[126096]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122272 return(122269 call . _value c"dsiNumIndices"))
  }
  function _domain[125902](?).numIndices[122279](arg _mt[126102]:_MT[238], arg this[126100]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122319 call compilerWarning(122316 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122323 return size)
  }
  function _domain[125902](?).low[122329](arg _mt[126106]:_MT[238], arg this[126104]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122335 return(122332 call . _value c"dsiLow"))
  }
  function _domain[125902](?).high[122342](arg _mt[126110]:_MT[238], arg this[126108]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122350 return(122347 call . _value c"dsiHigh"))
  }
  function _domain[125902](?).stride[122357](arg _mt[126114]:_MT[238], arg this[126112]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122363 return(122360 call . _value c"dsiStride"))
  }
  function _domain[125902](?).alignment[122370](arg _mt[126118]:_MT[238], arg this[126116]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122378 return(122375 call . _value c"dsiAlignment"))
  }
  function _domain[125902](?).first[122385](arg _mt[126122]:_MT[238], arg this[126120]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122393 return(122390 call . _value c"dsiFirst"))
  }
  function _domain[125902](?).last[122400](arg _mt[126126]:_MT[238], arg this[126124]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122408 return(122405 call . _value c"dsiLast"))
  }
  function _domain[125902](?).alignedLow[122415](arg _mt[126130]:_MT[238], arg this[126128]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122423 return(122420 call . _value c"dsiAlignedLow"))
  }
  function _domain[125902](?).alignedHigh[122430](arg _mt[126134]:_MT[238], arg this[126132]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122438 return(122435 call . _value c"dsiAlignedHigh"))
  }
  function _domain[125902](?).indices[122445](arg _mt[126138]:_MT[238], arg this[126136]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122466 call compilerError "domains do not support '.indices'")
  }
  function _domain[125902](?).contains[122483](arg _mt[126142]:_MT[238], arg this[126140]:_domain[125902](?), arg i[122480] :
  (122478 call * rank(122475 call . _value c"idxType"))) : _unknown[51] "method" "primary method" "no doc"
  {
    if(122520 call _cond_test(122493 call ||(122488 call isRectangularDom this)(122492 call isSparseDom this)))
    {
      (122506 return(122505 call(122496 call . _value c"dsiMember")(122503 call _makeIndexTuple rank i)))
    }
    {
      (122518 return(122517 call(122509 call . _value c"dsiMember")(122515 call i 0)))
    }
  }
  function _domain[125902](?).contains[122540](arg _mt[126146]:_MT[238], arg this[126144]:_domain[125902](?), arg i[122536] ... :
  (122532 call . _value c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (122546 return(122545 call contains i))
  }
  function _domain[125902](?).member[122563](arg _mt[126150]:_MT[238], arg this[126148]:_domain[125902](?), arg i[122560] :
  (122558 call * rank(122555 call . _value c"idxType"))) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (122603 call compilerWarning(122600 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122613 return(122612 call(122607 call . this c"contains") i))
  }
  function _domain[125902](?).member[122628](arg _mt[126154]:_MT[238], arg this[126152]:_domain[125902](?), arg i[122624] ... :
  (122620 call . _value c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (122636 call compilerWarning(122633 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122646 return(122645 call(122640 call . this c"contains") i))
  }
  function _domain[125902](?).isSubset[122656](arg _mt[126158]:_MT[238], arg this[126156]:_domain[125902](?), arg super[122653] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(122723 call _cond_test(122668 call !(122666 call ||(122661 call isAssociativeDom this)(122665 call isRectangularDom this))))
    {
      if(122716 call _cond_test(122673 call isSparseDom this))
      {
        (122693 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122714 call compilerError "isSubset not supported on this domain type")
      }
    }
    if(122840 call _cond_test(122732 call !=(122729 'typeof' super)(122731 'typeof' this)))
    {
      if(122835 call _cond_test(122737 call isRectangularDom this))
      {
        if(122807 call _cond_test(122746 call !=(122739 call . super c"rank")(122743 call . this c"rank")))
        {
          (122767 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          if(122802 call _cond_test(122779 call !=(122773 'typeof'(122770 call . super c"low"))(122778 'typeof'(122775 call . this c"low"))))
          {
            (122800 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122833 call compilerError "isSubset called with different associative domain types")
      }
    }
    if(122971 call _cond_test(122848 call isRectangularDom this))
    {
      unknown contains[122850] 1
      (122853 'end of statement')
      {
        unknown _indexOfInterest[122920] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122921] "expr temp" "temp"
        (122930 'move' _iterator[122921](122928 call _getIterator(122945 call chpl_direct_range_iter 0(122935 call -(122937 call .(122942 call(122939 call . this c"dims")) c"size") 1) 1)))
        Defer
        {
          {
            (122961 call _freeIterator _iterator[122921])
          }
        }
        { scopeless type
          (122950 'move' _indexOfInterest[122920](122947 call iteratorIndex _iterator[122921]))
        }
        ForLoop[122922]
        {
          unknown i[122954] "index var" "insert auto destroy"
          (122956 'move' i[122954] _indexOfInterest[122920])
          {
            {
              unknown tmp[122896] "temp"
              (122899 'move' tmp[122896](122898 'addr of' contains))
              (122904 call = tmp[122896](122901 call && tmp[122896](122894 call(122881 call .(122880 call(122877 call(122873 call . super c"dims")) i) c"contains")(122892 call(122889 call(122885 call . this c"dims")) i))))
            }
            if(122915 call _cond_test(122910 call == contains 0))
            {
              break nil[44]
            }
          }
          label _continueLabel[122925]
          _indexOfInterest[122920]
          _iterator[122921]
        }
        label _breakLabel[122926]
      }
      (122969 return contains)
    }
    (122991 return(122989 'reduce' LogicalAndReduceScanOp(122985 forall  i  in  this do
    {
      (122984 call(122979 call . super c"contains") i)
    } ) 0))
  }
  function _domain[125902](?).isSuper[123001](arg _mt[126162]:_MT[238], arg this[126160]:_domain[125902](?), arg sub[122998] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(123070 call _cond_test(123013 call !(123011 call ||(123006 call isAssociativeDom this)(123010 call isRectangularDom this))))
    {
      if(123063 call _cond_test(123018 call isSparseDom this))
      {
        (123038 call compilerError "isSuper not supported on sparse domains")
      }
      {
        (123061 call compilerError "isSuper not supported on the domain type "(123060 'typeof' this))
      }
    }
    if(123187 call _cond_test(123079 call !=(123076 'typeof' sub)(123078 'typeof' this)))
    {
      if(123182 call _cond_test(123084 call isRectangularDom this))
      {
        if(123154 call _cond_test(123093 call !=(123086 call . sub c"rank")(123090 call . this c"rank")))
        {
          (123114 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          if(123149 call _cond_test(123126 call !=(123120 'typeof'(123117 call . sub c"low"))(123125 'typeof'(123122 call . this c"low"))))
          {
            (123147 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123180 call compilerError "isSuper called with different associative domain types")
      }
    }
    if(123318 call _cond_test(123195 call isRectangularDom this))
    {
      unknown contains[123197] 1
      (123200 'end of statement')
      {
        unknown _indexOfInterest[123267] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123268] "expr temp" "temp"
        (123277 'move' _iterator[123268](123275 call _getIterator(123292 call chpl_direct_range_iter 0(123282 call -(123284 call .(123289 call(123286 call . this c"dims")) c"size") 1) 1)))
        Defer
        {
          {
            (123308 call _freeIterator _iterator[123268])
          }
        }
        { scopeless type
          (123297 'move' _indexOfInterest[123267](123294 call iteratorIndex _iterator[123268]))
        }
        ForLoop[123269]
        {
          unknown i[123301] "index var" "insert auto destroy"
          (123303 'move' i[123301] _indexOfInterest[123267])
          {
            {
              unknown tmp[123243] "temp"
              (123246 'move' tmp[123243](123245 'addr of' contains))
              (123251 call = tmp[123243](123248 call && tmp[123243](123241 call(123228 call .(123227 call(123224 call(123220 call . this c"dims")) i) c"contains")(123239 call(123236 call(123232 call . sub c"dims")) i))))
            }
            if(123262 call _cond_test(123257 call == contains 0))
            {
              break nil[44]
            }
          }
          label _continueLabel[123272]
          _indexOfInterest[123267]
          _iterator[123268]
        }
        label _breakLabel[123273]
      }
      (123316 return contains)
    }
    (123338 return(123336 'reduce' LogicalAndReduceScanOp(123332 forall  i  in  sub do
    {
      (123331 call(123326 call . this c"contains") i)
    } ) 0))
  }
  function _domain[125902](?).indexOrder[123346](arg _mt[126166]:_MT[238], arg this[126164]:_domain[125902](?), arg i[123344]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (123361 return(123360 call(123351 call . _value c"dsiIndexOrder")(123358 call _makeIndexTuple rank i)))
  }
  function _domain[125902](?).position[123370](arg _mt[126170]:_MT[238], arg this[126168]:_domain[125902](?), arg i[123368]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ind[123377](123376 call _makeIndexTuple rank i)
    unknown pos[123384](123382 call * rank intIdxType)
    (123387 'end of statement')
    {
      unknown _indexOfInterest[123420] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123421] "expr temp" "temp"
      (123430 'move' _iterator[123421](123428 call _getIterator(123438 call chpl_direct_range_iter 0(123435 call - rank 1) 1)))
      Defer
      {
        {
          (123454 call _freeIterator _iterator[123421])
        }
      }
      { scopeless type
        (123443 'move' _indexOfInterest[123420](123440 call iteratorIndex _iterator[123421]))
      }
      ForLoop[123422]
      {
        unknown d[123447] "index var" "insert auto destroy"
        (123449 'move' d[123447] _indexOfInterest[123420])
        (123417 call =(123400 call pos d)(123416 call(123408 call .(123407 call(123402 call . _value c"dsiDim") d) c"indexOrder")(123414 call ind d)))
        label _continueLabel[123425]
        _indexOfInterest[123420]
        _iterator[123421]
      }
      label _breakLabel[123426]
    }
    (123462 return pos)
  }
  function _domain[125902](?).expand[123475](arg _mt[126174]:_MT[238], arg this[126172]:_domain[125902](?), arg off[123472] :
  (123470 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(123560 call _cond_test(123486 call isAssociativeDom this))
    {
      (123506 call compilerError "expand not supported on associative domains")
    }
    {
      if(123554 call _cond_test(123511 call isSparseDom this))
      {
        (123531 call compilerError "expand not supported on sparse domains")
      }
      {
        (123552 call compilerError "expand not supported on this domain type")
      }
    }
  }
  where {
    (123481 call !(123480 call isRectangularDom this))
  }
  function _domain[125902](?).expand[123578](arg _mt[126178]:_MT[238], arg this[126176]:_domain[125902](?), arg off[123574] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    (123584 return(123583 call expand off))
  }
  function _domain[125902](?).expand[123598](arg _mt[126182]:_MT[238], arg this[126180]:_domain[125902](?), arg off[123595] :
  (123593 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[123603](123602 call dims)
    (123606 'end of statement')
    {
      unknown _indexOfInterest[123699] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123700] "expr temp" "temp"
      (123709 'move' _iterator[123700](123707 call _getIterator(123717 call chpl_direct_range_iter 0(123714 call - rank 1) 1)))
      Defer
      {
        {
          (123733 call _freeIterator _iterator[123700])
        }
      }
      { scopeless type
        (123722 'move' _indexOfInterest[123699](123719 call iteratorIndex _iterator[123700]))
      }
      ForLoop[123701]
      {
        unknown i[123726] "index var" "insert auto destroy"
        (123728 'move' i[123726] _indexOfInterest[123699])
        {
          (123635 call =(123619 call ranges i)(123634 call(123626 call .(123623 call ranges i) c"expand")(123632 call off i)))
          if(123695 call _cond_test(123653 call >(123643 call .(123642 call ranges i) c"low")(123650 call .(123649 call ranges i) c"high")))
          {
            (123692 call halt "***Error: Degenerate dimension created in dimension " i "***")
          }
        }
        label _continueLabel[123704]
        _indexOfInterest[123699]
        _iterator[123700]
      }
      label _breakLabel[123705]
    }
    (123752 return(123740 'new'(123751 call _domain dist rank(123746 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125902](?).expand[123762](arg _mt[126186]:_MT[238], arg this[126184]:_domain[125902](?), arg off[123759] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    unknown ranges[123771](123770 call dims)
    (123774 'end of statement')
    {
      unknown _indexOfInterest[123801] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123802] "expr temp" "temp"
      (123811 'move' _iterator[123802](123809 call _getIterator(123819 call chpl_direct_range_iter 0(123816 call - rank 1) 1)))
      Defer
      {
        {
          (123835 call _freeIterator _iterator[123802])
        }
      }
      { scopeless type
        (123824 'move' _indexOfInterest[123801](123821 call iteratorIndex _iterator[123802]))
      }
      ForLoop[123803]
      {
        unknown i[123828] "index var" "insert auto destroy"
        (123830 'move' i[123828] _indexOfInterest[123801])
        (123798 call =(123787 call ranges i)(123797 call(123792 call .(123791 call dim i) c"expand") off))
        label _continueLabel[123806]
        _indexOfInterest[123801]
        _iterator[123802]
      }
      label _breakLabel[123807]
    }
    (123854 return(123842 'new'(123853 call _domain dist rank(123848 call . _value c"idxType") stridable ranges)))
  }
  where {
    (123766 call > rank 1)
  }
  function _domain[125902](?).exterior[123868](arg _mt[126190]:_MT[238], arg this[126188]:_domain[125902](?), arg off[123865] :
  (123863 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(123953 call _cond_test(123879 call isAssociativeDom this))
    {
      (123899 call compilerError "exterior not supported on associative domains")
    }
    {
      if(123947 call _cond_test(123904 call isSparseDom this))
      {
        (123924 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123945 call compilerError "exterior not supported on this domain type")
      }
    }
  }
  where {
    (123874 call !(123873 call isRectangularDom this))
  }
  function _domain[125902](?).exterior[123971](arg _mt[126194]:_MT[238], arg this[126192]:_domain[125902](?), arg off[123967] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    (123977 return(123976 call exterior off))
  }
  function _domain[125902](?).exterior[123991](arg _mt[126198]:_MT[238], arg this[126196]:_domain[125902](?), arg off[123988] :
  (123986 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[123996](123995 call dims)
    (123999 'end of statement')
    {
      unknown _indexOfInterest[124031] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124032] "expr temp" "temp"
      (124041 'move' _iterator[124032](124039 call _getIterator(124049 call chpl_direct_range_iter 0(124046 call - rank 1) 1)))
      Defer
      {
        {
          (124065 call _freeIterator _iterator[124032])
        }
      }
      { scopeless type
        (124054 'move' _indexOfInterest[124031](124051 call iteratorIndex _iterator[124032]))
      }
      ForLoop[124033]
      {
        unknown i[124058] "index var" "insert auto destroy"
        (124060 'move' i[124058] _indexOfInterest[124031])
        (124028 call =(124012 call ranges i)(124027 call(124019 call .(124016 call dim i) c"exterior")(124025 call off i)))
        label _continueLabel[124036]
        _indexOfInterest[124031]
        _iterator[124032]
      }
      label _breakLabel[124037]
    }
    (124084 return(124072 'new'(124083 call _domain dist rank(124078 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125902](?).exterior[124094](arg _mt[126202]:_MT[238], arg this[126200]:_domain[125902](?), arg off[124091] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    unknown offTup[124104](124102 call * rank intIdxType)
    (124107 'end of statement')
    {
      unknown _indexOfInterest[124125] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124126] "expr temp" "temp"
      (124135 'move' _iterator[124126](124133 call _getIterator(124143 call chpl_direct_range_iter 0(124140 call - rank 1) 1)))
      Defer
      {
        {
          (124159 call _freeIterator _iterator[124126])
        }
      }
      { scopeless type
        (124148 'move' _indexOfInterest[124125](124145 call iteratorIndex _iterator[124126]))
      }
      ForLoop[124127]
      {
        unknown i[124152] "index var" "insert auto destroy"
        (124154 'move' i[124152] _indexOfInterest[124125])
        (124122 call =(124120 call offTup i) off)
        label _continueLabel[124130]
        _indexOfInterest[124125]
        _iterator[124126]
      }
      label _breakLabel[124131]
    }
    (124170 return(124169 call exterior offTup))
  }
  where {
    (124098 call != rank 1)
  }
  function _domain[125902](?).interior[124184](arg _mt[126206]:_MT[238], arg this[126204]:_domain[125902](?), arg off[124181] :
  (124179 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(124269 call _cond_test(124195 call isAssociativeDom this))
    {
      (124215 call compilerError "interior not supported on associative domains")
    }
    {
      if(124263 call _cond_test(124220 call isSparseDom this))
      {
        (124240 call compilerError "interior not supported on sparse domains")
      }
      {
        (124261 call compilerError "interior not supported on this domain type")
      }
    }
  }
  where {
    (124190 call !(124189 call isRectangularDom this))
  }
  function _domain[125902](?).interior[124287](arg _mt[126210]:_MT[238], arg this[126208]:_domain[125902](?), arg off[124283] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    (124293 return(124292 call interior off))
  }
  function _domain[125902](?).interior[124307](arg _mt[126214]:_MT[238], arg this[126212]:_domain[125902](?), arg off[124304] :
  (124302 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[124312](124311 call dims)
    (124315 'end of statement')
    {
      unknown _indexOfInterest[124449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124450] "expr temp" "temp"
      (124459 'move' _iterator[124450](124457 call _getIterator(124467 call chpl_direct_range_iter 0(124464 call - rank 1) 1)))
      Defer
      {
        {
          (124483 call _freeIterator _iterator[124450])
        }
      }
      { scopeless type
        (124472 'move' _indexOfInterest[124449](124469 call iteratorIndex _iterator[124450]))
      }
      ForLoop[124451]
      {
        unknown i[124476] "index var" "insert auto destroy"
        (124478 'move' i[124476] _indexOfInterest[124449])
        {
          if(124419 call _cond_test(124393 call ||(124357 call &&(124330 call >(124328 call off i) 0)(124355 call <(124346 call -(124340 call +(124336 call .(124335 call dim i) c"_high") 1)(124345 call off i))(124352 call .(124351 call dim i) c"_low")))(124391 call &&(124364 call <(124362 call off i) 0)(124389 call >(124380 call -(124374 call -(124370 call .(124369 call dim i) c"_low") 1)(124379 call off i))(124386 call .(124385 call dim i) c"_high")))))
          {
            (124416 call halt "***Error: Argument to 'interior' function out of range in dimension " i "***")
          }
          (124446 call =(124427 call ranges i)(124445 call(124437 call .(124434 call(124429 call . _value c"dsiDim") i) c"interior")(124443 call off i)))
        }
        label _continueLabel[124454]
        _indexOfInterest[124449]
        _iterator[124450]
      }
      label _breakLabel[124455]
    }
    (124502 return(124490 'new'(124501 call _domain dist rank(124496 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125902](?).interior[124512](arg _mt[126218]:_MT[238], arg this[126216]:_domain[125902](?), arg off[124509] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    unknown offTup[124522](124520 call * rank intIdxType)
    (124525 'end of statement')
    {
      unknown _indexOfInterest[124543] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124544] "expr temp" "temp"
      (124553 'move' _iterator[124544](124551 call _getIterator(124561 call chpl_direct_range_iter 0(124558 call - rank 1) 1)))
      Defer
      {
        {
          (124577 call _freeIterator _iterator[124544])
        }
      }
      { scopeless type
        (124566 'move' _indexOfInterest[124543](124563 call iteratorIndex _iterator[124544]))
      }
      ForLoop[124545]
      {
        unknown i[124570] "index var" "insert auto destroy"
        (124572 'move' i[124570] _indexOfInterest[124543])
        (124540 call =(124538 call offTup i) off)
        label _continueLabel[124548]
        _indexOfInterest[124543]
        _iterator[124544]
      }
      label _breakLabel[124549]
    }
    (124588 return(124587 call interior offTup))
  }
  where {
    (124516 call != rank 1)
  }
  function _domain[125902](?).translate[124597](arg _mt[126222]:_MT[238], arg this[126220]:_domain[125902](?), arg off[124595]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(124682 call _cond_test(124608 call isAssociativeDom this))
    {
      (124628 call compilerError "translate not supported on associative domains")
    }
    {
      if(124676 call _cond_test(124633 call isSparseDom this))
      {
        (124653 call compilerError "translate not supported on sparse domains")
      }
      {
        (124674 call compilerError "translate not supported on this domain type")
      }
    }
  }
  where {
    (124603 call !(124602 call isRectangularDom this))
  }
  function _domain[125902](?).translate[124698](arg _mt[126226]:_MT[238], arg this[126224]:_domain[125902](?), arg off[124695]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    (124704 return(124703 call translate off))
  }
  function _domain[125902](?).translate[124713](arg _mt[126230]:_MT[238], arg this[126228]:_domain[125902](?), arg off[124711]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(124747 call _cond_test(124724 call !=(124720 call . off c"size") rank))
    {
      (124745 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown ranges[124756](124755 call dims)
    (124759 'end of statement')
    {
      unknown _indexOfInterest[124793] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124794] "expr temp" "temp"
      (124803 'move' _iterator[124794](124801 call _getIterator(124811 call chpl_direct_range_iter 0(124808 call - rank 1) 1)))
      Defer
      {
        {
          (124827 call _freeIterator _iterator[124794])
        }
      }
      { scopeless type
        (124816 'move' _indexOfInterest[124793](124813 call iteratorIndex _iterator[124794]))
      }
      ForLoop[124795]
      {
        unknown i[124820] "index var" "insert auto destroy"
        (124822 'move' i[124820] _indexOfInterest[124793])
        (124790 call =(124771 call ranges i)(124789 call(124781 call .(124778 call(124773 call . _value c"dsiDim") i) c"translate")(124787 call off i)))
        label _continueLabel[124798]
        _indexOfInterest[124793]
        _iterator[124794]
      }
      label _breakLabel[124799]
    }
    (124846 return(124834 'new'(124845 call _domain dist rank(124840 call . _value c"idxType") stridable ranges)))
  }
  where {
    (124718 call isTuple off)
  }
  function _domain[125902](?).translate[124855](arg _mt[126234]:_MT[238], arg this[126232]:_domain[125902](?), arg off[124853]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown offTup[124874](124872 call * rank(124871 'typeof' off))
    (124877 'end of statement')
    {
      unknown _indexOfInterest[124895] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124896] "expr temp" "temp"
      (124905 'move' _iterator[124896](124903 call _getIterator(124913 call chpl_direct_range_iter 0(124910 call - rank 1) 1)))
      Defer
      {
        {
          (124929 call _freeIterator _iterator[124896])
        }
      }
      { scopeless type
        (124918 'move' _indexOfInterest[124895](124915 call iteratorIndex _iterator[124896]))
      }
      ForLoop[124897]
      {
        unknown i[124922] "index var" "insert auto destroy"
        (124924 'move' i[124922] _indexOfInterest[124895])
        (124892 call =(124890 call offTup i) off)
        label _continueLabel[124900]
        _indexOfInterest[124895]
        _iterator[124896]
      }
      label _breakLabel[124901]
    }
    (124940 return(124939 call translate offTup))
  }
  where {
    (124867 call &&(124859 call != rank 1)(124865 call !(124864 call isTuple off)))
  }
  function _domain[125902](?).isEmpty[124947](arg _mt[126238]:_MT[238], arg this[126236]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    (124957 return(124955 call ==(124951 call . this c"size") 0))
  }
  { scopeless type
    bool[10]
  }
  function _domain[125902](?).chpl__unTranslate[124971](arg _mt[126242]:_MT[238], arg this[126240]:_domain[125902](?), arg off[124967] ... :
  integral) : _unknown[51] "method" "primary method"
  {
    (124977 return(124976 call chpl__unTranslate off))
  }
  function _domain[125902](?).chpl__unTranslate[124991](arg _mt[126246]:_MT[238], arg this[126244]:_domain[125902](?), arg off[124988] :
  (124986 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[124996](124995 call dims)
    (124999 'end of statement')
    {
      unknown _indexOfInterest[125031] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125032] "expr temp" "temp"
      (125041 'move' _iterator[125032](125039 call _getIterator(125049 call chpl_direct_range_iter 0(125046 call - rank 1) 1)))
      Defer
      {
        {
          (125065 call _freeIterator _iterator[125032])
        }
      }
      { scopeless type
        (125054 'move' _indexOfInterest[125031](125051 call iteratorIndex _iterator[125032]))
      }
      ForLoop[125033]
      {
        unknown i[125058] "index var" "insert auto destroy"
        (125060 'move' i[125058] _indexOfInterest[125031])
        (125028 call =(125012 call ranges i)(125027 call(125019 call .(125016 call dim i) c"chpl__unTranslate")(125025 call off i)))
        label _continueLabel[125036]
        _indexOfInterest[125031]
        _iterator[125032]
      }
      label _breakLabel[125037]
    }
    (125084 return(125072 'new'(125083 call _domain dist rank(125078 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125902](?).setIndices[125092](arg _mt[126250]:_MT[238], arg this[126248]:_domain[125902](?), arg x[125090]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (125100 call(125095 call . _value c"dsiSetIndices") x)
    if(125113 call _cond_test(125106 call _isPrivatized _instance))
    {
      (125110 call _reprivatize _value)
    }
  }
  function _domain[125902](?).getIndices[125121](arg _mt[126254]:_MT[238], arg this[126252]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (125131 return(125130 call(125126 call . _value c"dsiGetIndices")))
  }
  function _domain[125902](?).writeThis[125140](arg _mt[126258]:_MT[238], arg this[126256]:_domain[125902](?), arg f[125138]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (125150 call(125145 call . _value c"dsiSerialWrite") f)
  }
  function _domain[125902](?).readThis[125159](arg _mt[126262]:_MT[238], arg this[126260]:_domain[125902](?), arg f[125157]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (125169 call(125164 call . _value c"dsiSerialRead") f)
  }
  function _domain[125902](?).localSlice[125180](arg _mt[126266]:_MT[238], arg this[126264]:_domain[125902](?), arg r[125177]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    if(125248 call _cond_test(125199 call !=(125196 call chpl_localeID_to_locale(125195 '_wide_get_locale' _value)) here))
    {
      (125246 call halt "Attempting to take a local slice of a domain on locale "(125224 '_wide_get_node' _value) " from locale "(125243 call . here c"id"))
    }
    (125259 return(125258 call this(125256 'expand_tuple' r)))
  }
  where {
    (125192 call &&(125185 call chpl__isTupleOfRanges r)(125191 call(125187 call . _value c"isDefaultRectangular")))
  }
  function _domain[125902](?).localSlice[125270](arg _mt[126270]:_MT[238], arg this[126268]:_domain[125902](?), arg r[125267]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    (125299 return(125298 call(125289 call . _value c"dsiLocalSlice")(125295 call chpl__anyStridable r) r))
  }
  where {
    (125284 call &&(125275 call chpl__isTupleOfRanges r)(125282 call !(125281 call(125277 call . _value c"isDefaultRectangular"))))
  }
  function _domain[125902](?).localSlice[125311](arg _mt[126274]:_MT[238], arg this[126272]:_domain[125902](?), arg d[125308] :
  _domain) : _unknown[51] "method" "primary method"
  {
    (125323 return(125322 call localSlice(125320 'expand_tuple'(125319 call(125315 call . d c"getIndices")))))
  }
  function _domain[125902](?).sorted[125339](arg _mt[126278]:_MT[238], arg this[126276]:_domain[125902](?), arg comparator[125335] :
  unknown t[125330] =
  (125334 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[125355] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125356] "expr temp" "temp"
      (125365 'move' _iterator[125356](125363 call _getIterator(125350 call(125345 call . _value c"dsiSorted") comparator)))
      Defer
      {
        {
          (125382 call _freeIterator _iterator[125356])
        }
      }
      { scopeless type
        (125371 'move' _indexOfInterest[125355](125368 call iteratorIndex _iterator[125356]))
      }
      ForLoop[125357]
      {
        unknown i[125375] "index var" "insert auto destroy"
        (125377 'move' i[125375] _indexOfInterest[125355])
        {
          (125352 yield i)
        }
        label _continueLabel[125360]
        _indexOfInterest[125355]
        _iterator[125356]
      }
      label _breakLabel[125361]
    }
  }
  function _domain[125902](?).displayRepresentation[125394](arg _mt[126282]:_MT[238], arg this[126280]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (125401 call(125397 call . _value c"dsiDisplayRepresentation"))
  }
  function _domain[125902](?).defaultSparseDist[125408](arg _mt[126286]:_MT[238], arg this[126284]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (125417 return(125416 call _getDistribution(125412 call . _value c"dist")))
  }
  function _domain[125902](?).safeCast[125428](arg _mt[126290]:_MT[238], arg this[126288]:_domain[125902](?), arg t[125425] :
  _domain) : _unknown[51] "method" "primary method"
  {
    const tmpD[125441] "const" t
    (125444 'end of statement')
    if(125477 call _cond_test(125454 call !=(125447 call . tmpD c"rank")(125451 call . this c"rank")))
    {
      (125475 call compilerError "rank mismatch in cast")
    }
    if(125513 call _cond_test(125490 call !=(125483 call . tmpD c"idxType")(125487 call . this c"idxType")))
    {
      (125511 call compilerError "idxType mismatch in cast")
    }
    if(125707 call _cond_test(125526 call ==(125519 call . tmpD c"stridable")(125523 call . this c"stridable")))
    {
      (125529 return this)
    }
    {
      if(125703 call _cond_test(125541 call &&(125535 call !(125532 call . tmpD c"stridable"))(125538 call . this c"stridable")))
      {
        const inds[125549] "const"(125548 call(125544 call . this c"getIndices"))
        (125552 'end of statement')
        unknown unstridableInds[125566](125564 call * rank(125563 call range(125557 call . tmpD c"idxType")(stridable = 0)))
        (125569 'end of statement')
        {
          unknown dim[125643] 0
          unknown tmp[125644] "maybe param" "temp"
          (125656 'move' tmp[125644](125654 call chpl_compute_low_param_loop_bound 0(125576 call -(125572 call . inds c"size") 1)))
          unknown tmp[125645] "maybe param" "temp"
          (125669 'move' tmp[125645](125667 call chpl_compute_high_param_loop_bound 0(125661 call -(125663 call . inds c"size") 1)))
          unknown tmp[125646] "maybe param" "temp"
          (125672 'move' tmp[125646] 1)
          ParamForLoop[125674]
          { dim[125643] tmp[125644] tmp[125645] tmp[125646]
            {
              if(125612 call _cond_test(125588 call !=(125584 call .(125583 call inds dim) c"stride") 1))
              {
                (125610 call halt "non-stridable domain assigned non-unit stride in dimension " dim)
              }
              (125640 call =(125621 call unstridableInds dim)(125639 call(125626 call .(125625 call inds dim) c"safeCast")(125637 call range(125631 call . tmpD c"idxType")(stridable = 0))))
            }
          }
          label _unused_continueLabel[125648]
          label _breakLabel[125647]
        }
        (125689 call(125684 call . tmpD c"setIndices") unstridableInds)
        (125692 return tmpD)
      }
      {
        (125696 call = tmpD this)
        (125701 return tmpD)
      }
    }
  }
  where {
    (125438 call &&(125433 call chpl__isRectangularDomType t)(125437 call isRectangularDom this))
  }
  function _domain[125902](?).targetLocales[125718](arg _mt[126294]:_MT[238], arg this[126292]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    (125726 return(125725 call(125721 call . _value c"dsiTargetLocales")))
  }
  function _domain[125902](?).hasSingleLocalSubdomain[125733](arg _mt[126298]:_MT[238], arg this[126296]:_domain[125902](?)) param : _unknown[51] "method" "primary method"
  {
    (125743 return(125742 call(125738 call . _value c"dsiHasSingleLocalSubdomain")))
  }
  function _domain[125902](?).localSubdomain[125756](arg _mt[126302]:_MT[238], arg this[126300]:_domain[125902](?), arg loc[125752] :
  locale[28] =
  here) : _unknown[51] "method" "primary method"
  {
    if(125787 call _cond_test(125764 call !(125763 call(125759 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      (125785 call compilerError "Domain's local domain is not a single domain")
    }
    (125802 return(125801 call(125796 call . _value c"dsiLocalSubdomain") loc))
  }
  function _domain[125902](?).localSubdomains[125814](arg _mt[126306]:_MT[238], arg this[126304]:_domain[125902](?), arg loc[125810] :
  locale[28] =
  here) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(125877 call _cond_test(125821 call(125817 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (125826 yield(125825 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[125842] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125843] "expr temp" "temp"
        (125852 'move' _iterator[125843](125850 call _getIterator(125838 call(125833 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (125869 call _freeIterator _iterator[125843])
          }
        }
        { scopeless type
          (125858 'move' _indexOfInterest[125842](125855 call iteratorIndex _iterator[125843]))
        }
        ForLoop[125844]
        {
          unknown d[125862] "index var" "insert auto destroy"
          (125864 'move' d[125862] _indexOfInterest[125842])
          (125840 yield d)
          label _continueLabel[125847]
          _indexOfInterest[125842]
          _iterator[125843]
        }
        label _breakLabel[125848]
      }
    }
  }
  function _domain[125902](?).supportsAutoLocalAccess[125886](arg _mt[126310]:_MT[238], arg this[126308]:_domain[125902](?)) param : _unknown[51] "method" "primary method"
  {
    (125896 return(125895 call(125891 call . _value c"dsiSupportsAutoLocalAccess")))
  }
  type _domain[125902](?) unknown _pid[119161] int[13] unknown _instance[119165] "owned" unknown _unowned[119170] bool[10] forwarding ( )
  function _cast[126319](arg t[126316] :
  _domain, arg d[126322] :
  _domain) : _unknown[51] "no doc"
  {
    const tmpD[126336] "const" t
    (126339 'end of statement')
    if(126356 call _cond_test(126349 call !=(126342 call . tmpD c"rank")(126346 call . d c"rank")))
    {
      (126354 call compilerError "rank mismatch in cast")
    }
    if(126376 call _cond_test(126369 call !=(126362 call . tmpD c"idxType")(126366 call . d c"idxType")))
    {
      (126374 call compilerError "idxType mismatch in cast")
    }
    if(126533 call _cond_test(126389 call ==(126382 call . tmpD c"stridable")(126386 call . d c"stridable")))
    {
      (126392 return d)
    }
    {
      if(126529 call _cond_test(126404 call &&(126398 call !(126395 call . tmpD c"stridable"))(126401 call . d c"stridable")))
      {
        unknown inds[126412](126411 call(126407 call . d c"getIndices"))
        (126415 'end of statement')
        unknown unstridableInds[126432](126430 call *(126418 call . d c"rank")(126429 call range(126423 call . tmpD c"idxType")(stridable = 0)))
        (126435 'end of statement')
        {
          unknown i[126469] 0
          unknown tmp[126470] "maybe param" "temp"
          (126482 'move' tmp[126470](126480 call chpl_compute_low_param_loop_bound 0(126442 call -(126438 call . tmpD c"rank") 1)))
          unknown tmp[126471] "maybe param" "temp"
          (126495 'move' tmp[126471](126493 call chpl_compute_high_param_loop_bound 0(126487 call -(126489 call . tmpD c"rank") 1)))
          unknown tmp[126472] "maybe param" "temp"
          (126498 'move' tmp[126472] 1)
          ParamForLoop[126500]
          { i[126469] tmp[126470] tmp[126471] tmp[126472]
            {
              (126465 call =(126449 call unstridableInds i)(126463 call _cast(126462 call range(126456 call . tmpD c"idxType")(stridable = 0))(126453 call inds i)))
            }
          }
          label _unused_continueLabel[126474]
          label _breakLabel[126473]
        }
        (126515 call(126510 call . tmpD c"setIndices") unstridableInds)
        (126518 return tmpD)
      }
      {
        (126522 call = tmpD d)
        (126527 return tmpD)
      }
    }
  }
  where {
    (126333 call &&(126328 call chpl__isRectangularDomType t)(126332 call isRectangularDom d))
  }
  function _cast[126548](arg t[126545] :
  string[26], arg x[126551] :
  _domain) : _unknown[51]
  {
    (126555 'use' IO)
    (126562 return(126561 call stringify x))
  }
  function chpl_countDomHelp[126570](arg dom[126568]:_any[178](?), arg counts[126572]:_any[178](?)) : _unknown[51]
  {
    unknown ranges[126580](126579 call(126575 call . dom c"dims"))
    (126583 'end of statement')
    {
      unknown i[126612] 0
      unknown tmp[126613] "maybe param" "temp"
      (126625 'move' tmp[126613](126623 call chpl_compute_low_param_loop_bound 0(126591 call -(126587 call . dom c"rank") 1)))
      unknown tmp[126614] "maybe param" "temp"
      (126638 'move' tmp[126614](126636 call chpl_compute_high_param_loop_bound 0(126630 call -(126632 call . dom c"rank") 1)))
      unknown tmp[126615] "maybe param" "temp"
      (126641 'move' tmp[126615] 1)
      ParamForLoop[126643]
      { i[126612] tmp[126613] tmp[126614] tmp[126615]
        (126609 call =(126598 call ranges i)(126607 call #(126602 call ranges i)(126606 call counts i)))
      }
      label _unused_continueLabel[126617]
      label _breakLabel[126616]
    }
    (126657 return(126656 call dom(126654 'expand_tuple' ranges)))
  }
  function #[126667](arg dom[126664] :
  _domain, arg counts[126670] :
  integral) : _unknown[51]
  {
    (126693 return(126692 call chpl_countDomHelp dom(126690 call _build_tuple counts)))
  }
  where {
    (126684 call &&(126676 call isRectangularDom dom)(126682 call ==(126678 call . dom c"rank") 1))
  }
  function #[126705](arg dom[126702] :
  _domain, arg counts[126707]:_any[178](?)) : _unknown[51]
  {
    if(126750 call _cond_test(126727 call !=(126720 call . counts c"size")(126724 call . dom c"rank")))
    {
      (126748 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    (126761 return(126760 call chpl_countDomHelp dom counts))
  }
  where {
    (126717 call &&(126712 call isRectangularDom dom)(126716 call isTuple counts))
  }
  function #[126774](arg arr[126771] :
  (126768 call chpl__buildArrayRuntimeType nil[44]), arg counts[126777] :
  integral) : _unknown[51] "fn returns aliasing array"
  {
    (126803 return(126802 call arr(126799 call #(126795 call . arr c"_dom") counts)))
  }
  where {
    (126791 call &&(126783 call isRectangularArr arr)(126789 call ==(126785 call . arr c"rank") 1))
  }
  function #[126817](arg arr[126814] :
  (126811 call chpl__buildArrayRuntimeType nil[44]), arg counts[126819]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    if(126862 call _cond_test(126839 call !=(126832 call . counts c"size")(126836 call . arr c"rank")))
    {
      (126860 call compilerError "the domain and array arguments of # must have the same rank")
    }
    (126878 return(126877 call arr(126874 call #(126870 call . arr c"_dom") counts)))
  }
  where {
    (126829 call &&(126824 call isRectangularArr arr)(126828 call isTuple counts))
  }
  function +[126889](arg d[126886] :
  _domain, arg i[126895] :
  (126893 call chpl__buildIndexType d)) : _unknown[51] "no return value for void"
  {
    if(126944 call _cond_test(126901 call isRectangularDom d))
    {
      (126921 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126942 call compilerError "Cannot add indices to this domain type")
    }
  }
  function +[126957](arg i[126955]:_any[178](?), arg d[126960] :
  _domain) : _unknown[51] "no return value for void"
  {
    if(126986 call _cond_test(126975 call isRectangularDom d))
    {
      (126979 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126984 call compilerError "Cannot add indices to this domain type")
    }
  }
  where {
    (354294 'is_subtype'(126969 call chpl__buildIndexType d)(126965 'typeof' i))
  }
  function +[127002](arg d[126999] :
  _domain, arg i[127008] :
  (127006 call chpl__buildIndexType d)) : _unknown[51]
  {
    (127021 call(127016 call . d c"add") i)
    (127025 return d)
  }
  where {
    (127014 call isIrregularDom d)
  }
  function +[127034](arg i[127032]:_any[178](?), arg d[127037] :
  _domain) : _unknown[51]
  {
    (127061 call(127056 call . d c"add") i)
    (127065 return d)
  }
  where {
    (127053 call &&(354295 'is_subtype'(127046 call chpl__buildIndexType d)(127042 'typeof' i))(127052 call isIrregularDom d))
  }
  function +[127076](arg d1[127073] :
  _domain, arg d2[127079] :
  _domain) : _unknown[51]
  {
    unknown d3[127102](127101 'typeof' d1)
    (127105 'end of statement')
    {
      unknown _indexOfInterest[127117] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127118] "expr temp" "temp"
      (127127 'move' _iterator[127118](127125 call _getIterator d1))
      Defer
      {
        {
          (127143 call _freeIterator _iterator[127118])
        }
      }
      { scopeless type
        (127132 'move' _indexOfInterest[127117](127129 call iteratorIndex _iterator[127118]))
      }
      ForLoop[127119]
      {
        unknown e[127136] "index var" "insert auto destroy"
        (127138 'move' e[127136] _indexOfInterest[127117])
        (127115 call(127110 call . d3 c"add") e)
        label _continueLabel[127122]
        _indexOfInterest[127117]
        _iterator[127118]
      }
      label _breakLabel[127123]
    }
    {
      unknown _indexOfInterest[127160] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127161] "expr temp" "temp"
      (127170 'move' _iterator[127161](127168 call _getIterator d2))
      Defer
      {
        {
          (127186 call _freeIterator _iterator[127161])
        }
      }
      { scopeless type
        (127175 'move' _indexOfInterest[127160](127172 call iteratorIndex _iterator[127161]))
      }
      ForLoop[127162]
      {
        unknown e[127179] "index var" "insert auto destroy"
        (127181 'move' e[127179] _indexOfInterest[127160])
        (127158 call(127153 call . d3 c"add") e)
        label _continueLabel[127165]
        _indexOfInterest[127160]
        _iterator[127161]
      }
      label _breakLabel[127166]
    }
    (127194 return d3)
  }
  where {
    (127098 call &&(127086 call ==(127083 'typeof' d1)(127085 'typeof' d2))(127096 call &&(127091 call isIrregularDom d1)(127095 call isIrregularDom d2)))
  }
  function +[127205](arg d1[127202] :
  _domain, arg d2[127208] :
  _domain) : _unknown[51] "no return value for void"
  {
    if(127231 call _cond_test(127219 call ||(127214 call isRectangularDom d1)(127218 call isRectangularDom d2)))
    {
      (127224 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127229 call compilerError "Cannot add indices to this domain type")
    }
  }
  function -[127246](arg d[127243] :
  _domain, arg i[127252] :
  (127250 call chpl__buildIndexType d)) : _unknown[51] "no return value for void"
  {
    if(127301 call _cond_test(127258 call isRectangularDom d))
    {
      (127278 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127299 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function -[127316](arg d[127313] :
  _domain, arg i[127322] :
  (127320 call chpl__buildIndexType d)) : _unknown[51]
  {
    (127335 call(127330 call . d c"remove") i)
    (127339 return d)
  }
  where {
    (127328 call isIrregularDom d)
  }
  function -[127350](arg d1[127347] :
  _domain, arg d2[127353] :
  _domain) : _unknown[51]
  {
    unknown d3[127370](127369 'typeof' d1)
    (127373 'end of statement')
    {
      unknown _indexOfInterest[127385] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127386] "expr temp" "temp"
      (127395 'move' _iterator[127386](127393 call _getIterator d1))
      Defer
      {
        {
          (127411 call _freeIterator _iterator[127386])
        }
      }
      { scopeless type
        (127400 'move' _indexOfInterest[127385](127397 call iteratorIndex _iterator[127386]))
      }
      ForLoop[127387]
      {
        unknown e[127404] "index var" "insert auto destroy"
        (127406 'move' e[127404] _indexOfInterest[127385])
        (127383 call(127378 call . d3 c"add") e)
        label _continueLabel[127390]
        _indexOfInterest[127385]
        _iterator[127386]
      }
      label _breakLabel[127391]
    }
    {
      unknown _indexOfInterest[127428] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127429] "expr temp" "temp"
      (127438 'move' _iterator[127429](127436 call _getIterator d2))
      Defer
      {
        {
          (127454 call _freeIterator _iterator[127429])
        }
      }
      { scopeless type
        (127443 'move' _indexOfInterest[127428](127440 call iteratorIndex _iterator[127429]))
      }
      ForLoop[127430]
      {
        unknown e[127447] "index var" "insert auto destroy"
        (127449 'move' e[127447] _indexOfInterest[127428])
        (127426 call(127421 call . d3 c"remove") e)
        label _continueLabel[127433]
        _indexOfInterest[127428]
        _iterator[127429]
      }
      label _breakLabel[127434]
    }
    (127462 return d3)
  }
  where {
    (127366 call &&(127360 call ==(127357 'typeof' d1)(127359 'typeof' d2))(127365 call isSparseDom d1))
  }
  function -[127473](arg d1[127470] :
  _domain, arg d2[127476] :
  _domain) : _unknown[51] "no return value for void"
  {
    if(127499 call _cond_test(127487 call ||(127482 call isRectangularDom d1)(127486 call isRectangularDom d2)))
    {
      (127492 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127497 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function ==[127514](arg d1[127511] :
  _domain, arg d2[127517] :
  _domain) : _unknown[51] "inline"
  {
    if(127652 call _cond_test(127544 call !=(127534 call .(127531 call . d1 c"_value") c"rank")(127541 call .(127538 call . d2 c"_value") c"rank")))
    {
      (127547 return 0)
    }
    {
      if(127648 call _cond_test(127558 call ==(127551 call . d1 c"_value")(127555 call . d2 c"_value")))
      {
        (127561 return 1)
      }
      {
        {
          unknown i[127601] 0
          unknown tmp[127602] "maybe param" "temp"
          (127614 'move' tmp[127602](127612 call chpl_compute_low_param_loop_bound 0(127573 call -(127569 call .(127566 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127603] "maybe param" "temp"
          (127630 'move' tmp[127603](127628 call chpl_compute_high_param_loop_bound 0(127619 call -(127621 call .(127623 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127604] "maybe param" "temp"
          (127633 'move' tmp[127604] 1)
          ParamForLoop[127635]
          { i[127601] tmp[127602] tmp[127603] tmp[127604]
            if(127596 call _cond_test(127591 call !=(127583 call(127578 call . d1 c"dim") i)(127590 call(127585 call . d2 c"dim") i)))
            {
              (127594 return 0)
            }
          }
          label _unused_continueLabel[127606]
          label _breakLabel[127605]
        }
        (127646 return 1)
      }
    }
  }
  where {
    (127528 call &&(127523 call isRectangularDom d1)(127527 call isRectangularDom d2))
  }
  function !=[127667](arg d1[127664] :
  _domain, arg d2[127670] :
  _domain) : _unknown[51] "inline"
  {
    if(127805 call _cond_test(127697 call !=(127687 call .(127684 call . d1 c"_value") c"rank")(127694 call .(127691 call . d2 c"_value") c"rank")))
    {
      (127700 return 1)
    }
    {
      if(127801 call _cond_test(127711 call ==(127704 call . d1 c"_value")(127708 call . d2 c"_value")))
      {
        (127714 return 0)
      }
      {
        {
          unknown i[127754] 0
          unknown tmp[127755] "maybe param" "temp"
          (127767 'move' tmp[127755](127765 call chpl_compute_low_param_loop_bound 0(127726 call -(127722 call .(127719 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127756] "maybe param" "temp"
          (127783 'move' tmp[127756](127781 call chpl_compute_high_param_loop_bound 0(127772 call -(127774 call .(127776 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127757] "maybe param" "temp"
          (127786 'move' tmp[127757] 1)
          ParamForLoop[127788]
          { i[127754] tmp[127755] tmp[127756] tmp[127757]
            if(127749 call _cond_test(127744 call !=(127736 call(127731 call . d1 c"dim") i)(127743 call(127738 call . d2 c"dim") i)))
            {
              (127747 return 1)
            }
          }
          label _unused_continueLabel[127759]
          label _breakLabel[127758]
        }
        (127799 return 0)
      }
    }
  }
  where {
    (127681 call &&(127676 call isRectangularDom d1)(127680 call isRectangularDom d2))
  }
  function ==[127820](arg d1[127817] :
  _domain, arg d2[127823] :
  _domain) : _unknown[51] "inline"
  {
    if(127849 call _cond_test(127844 call ==(127837 call . d1 c"_value")(127841 call . d2 c"_value")))
    {
      (127847 return 1)
    }
    if(127868 call _cond_test(127863 call !=(127856 call . d1 c"size")(127860 call . d2 c"size")))
    {
      (127866 return 0)
    }
    {
      unknown _indexOfInterest[127892] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127893] "expr temp" "temp"
      (127902 'move' _iterator[127893](127900 call _getIterator d1))
      Defer
      {
        {
          (127918 call _freeIterator _iterator[127893])
        }
      }
      { scopeless type
        (127907 'move' _indexOfInterest[127892](127904 call iteratorIndex _iterator[127893]))
      }
      ForLoop[127894]
      {
        unknown idx[127911] "index var" "insert auto destroy"
        (127913 'move' idx[127911] _indexOfInterest[127892])
        if(127887 call _cond_test(127882 call !(127881 call(127876 call . d2 c"contains") idx)))
        {
          (127885 return 0)
        }
        label _continueLabel[127897]
        _indexOfInterest[127892]
        _iterator[127893]
      }
      label _breakLabel[127898]
    }
    (127926 return 1)
  }
  where {
    (127834 call &&(127829 call isAssociativeDom d1)(127833 call isAssociativeDom d2))
  }
  function !=[127937](arg d1[127934] :
  _domain, arg d2[127940] :
  _domain) : _unknown[51] "inline"
  {
    if(127966 call _cond_test(127961 call ==(127954 call . d1 c"_value")(127958 call . d2 c"_value")))
    {
      (127964 return 0)
    }
    if(127985 call _cond_test(127980 call !=(127973 call . d1 c"size")(127977 call . d2 c"size")))
    {
      (127983 return 1)
    }
    {
      unknown _indexOfInterest[128009] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128010] "expr temp" "temp"
      (128019 'move' _iterator[128010](128017 call _getIterator d1))
      Defer
      {
        {
          (128035 call _freeIterator _iterator[128010])
        }
      }
      { scopeless type
        (128024 'move' _indexOfInterest[128009](128021 call iteratorIndex _iterator[128010]))
      }
      ForLoop[128011]
      {
        unknown idx[128028] "index var" "insert auto destroy"
        (128030 'move' idx[128028] _indexOfInterest[128009])
        if(128004 call _cond_test(127999 call !(127998 call(127993 call . d2 c"contains") idx)))
        {
          (128002 return 1)
        }
        label _continueLabel[128014]
        _indexOfInterest[128009]
        _iterator[128010]
      }
      label _breakLabel[128015]
    }
    (128043 return 0)
  }
  where {
    (127951 call &&(127946 call isAssociativeDom d1)(127950 call isAssociativeDom d2))
  }
  function ==[128054](arg d1[128051] :
  _domain, arg d2[128057] :
  _domain) : _unknown[51] "inline"
  {
    if(128083 call _cond_test(128078 call ==(128071 call . d1 c"_value")(128075 call . d2 c"_value")))
    {
      (128081 return 1)
    }
    if(128102 call _cond_test(128097 call !=(128090 call . d1 c"size")(128094 call . d2 c"size")))
    {
      (128100 return 0)
    }
    if(128126 call _cond_test(128121 call !=(128111 call .(128108 call . d1 c"_value") c"parentDom")(128118 call .(128115 call . d2 c"_value") c"parentDom")))
    {
      (128124 return 0)
    }
    {
      unknown _indexOfInterest[128150] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128151] "expr temp" "temp"
      (128160 'move' _iterator[128151](128158 call _getIterator d1))
      Defer
      {
        {
          (128176 call _freeIterator _iterator[128151])
        }
      }
      { scopeless type
        (128165 'move' _indexOfInterest[128150](128162 call iteratorIndex _iterator[128151]))
      }
      ForLoop[128152]
      {
        unknown idx[128169] "index var" "insert auto destroy"
        (128171 'move' idx[128169] _indexOfInterest[128150])
        if(128145 call _cond_test(128140 call !(128139 call(128134 call . d2 c"contains") idx)))
        {
          (128143 return 0)
        }
        label _continueLabel[128155]
        _indexOfInterest[128150]
        _iterator[128151]
      }
      label _breakLabel[128156]
    }
    (128184 return 1)
  }
  where {
    (128068 call &&(128063 call isSparseDom d1)(128067 call isSparseDom d2))
  }
  function !=[128195](arg d1[128192] :
  _domain, arg d2[128198] :
  _domain) : _unknown[51] "inline"
  {
    if(128224 call _cond_test(128219 call ==(128212 call . d1 c"_value")(128216 call . d2 c"_value")))
    {
      (128222 return 0)
    }
    if(128243 call _cond_test(128238 call !=(128231 call . d1 c"size")(128235 call . d2 c"size")))
    {
      (128241 return 1)
    }
    if(128267 call _cond_test(128262 call !=(128252 call .(128249 call . d1 c"_value") c"parentDom")(128259 call .(128256 call . d2 c"_value") c"parentDom")))
    {
      (128265 return 1)
    }
    {
      unknown _indexOfInterest[128291] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128292] "expr temp" "temp"
      (128301 'move' _iterator[128292](128299 call _getIterator d1))
      Defer
      {
        {
          (128317 call _freeIterator _iterator[128292])
        }
      }
      { scopeless type
        (128306 'move' _indexOfInterest[128291](128303 call iteratorIndex _iterator[128292]))
      }
      ForLoop[128293]
      {
        unknown idx[128310] "index var" "insert auto destroy"
        (128312 'move' idx[128310] _indexOfInterest[128291])
        if(128286 call _cond_test(128281 call !(128280 call(128275 call . d2 c"contains") idx)))
        {
          (128284 return 1)
        }
        label _continueLabel[128296]
        _indexOfInterest[128291]
        _iterator[128292]
      }
      label _breakLabel[128297]
    }
    (128325 return 0)
  }
  where {
    (128209 call &&(128204 call isSparseDom d1)(128208 call isSparseDom d2))
  }
  function ==[128336](arg d1[128333] :
  _domain, arg d2[128339] :
  _domain) param : _unknown[51] "inline"
  {
    (128343 return 0)
  }
  function !=[128354](arg d1[128351] :
  _domain, arg d2[128357] :
  _domain) param : _unknown[51] "inline"
  {
    (128361 return 1)
  }
  function shouldReturnRvalueByConstRef[128370](arg t[128368]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (128373 return 1)
  }
  function shouldReturnRvalueByValue[128382](arg t[128380]:_any[178](?)) param : _unknown[51] "no doc"
  {
    if(128390 call _cond_test(128385 call ! PODValAccess))
    {
      (128388 return 0)
    }
    if(128403 call _cond_test(128399 call isPODType t))
    {
      (128401 return 1)
    }
    (128409 return 0)
  }
  function _array[133588](?).chpl__serialize[128430](arg _mt[133592]:_MT[238], arg this[133590]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    (128446 return(128445 call(128441 call . _instance c"chpl__serialize")))
  }
  where {
    (128439 call(128435 call . _instance c"chpl__rvfMe"))
  }
  function _array[133588](?).chpl__deserialize[128456](arg _mt[133596]:_MT[238], arg this[133594]:_array[133588](?), arg data[128454]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown arrinst[128472](128471 call(128466 call .(128465 call _to_borrowed(128463 'static field type' this "_instance")) c"chpl__deserialize") data)
    (128475 'end of statement')
    (128485 return(128477 'new'(128484 call _array nullPid arrinst(_unowned = 1))))
  }
  function _array[133588](?).chpl__promotionType[128491](arg _mt[133600]:_MT[238], arg this[133598]:_array[133588](?)) type : _unknown[51] "method" "primary method"
  {
    (128497 return(128494 call . _value c"eltType"))
  }
  function _array[133588](?)._value[128504](arg _mt[133604]:_MT[238], arg this[133602]:_array[133588](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    if(128523 call _cond_test(128509 call _isPrivatized _instance))
    {
      (128516 return(128515 call chpl_getPrivatizedCopy(128512 'typeof' _instance) _pid))
    }
    {
      (128520 return _instance)
    }
  }
  function _array[133588](?).chpl_forwarding_expr6__value[128537](arg _mt[133608]:_MT[238], arg this[133606]:_array[133588](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (128539 return _value)
  }
  function _array[133588](?).deinit[128545](arg _mt[133612]:_MT[238], arg this[133610]:_array[133588](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128550 call _do_destroy_array this)
  }
  function _array[133588](?).eltType[128557](arg _mt[133616]:_MT[238], arg this[133614]:_array[133588](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (128563 return(128560 call . _value c"eltType"))
  }
  function _array[133588](?).idxType[128570](arg _mt[133620]:_MT[238], arg this[133618]:_array[133588](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (128576 return(128573 call . _value c"idxType"))
  }
  function _array[133588](?)._dom[128583](arg _mt[133624]:_MT[238], arg this[133622]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    (128592 return(128591 call _getDomain(128587 call . _value c"dom")))
  }
  function _array[133588](?).rank[128599](arg _mt[133628]:_MT[238], arg this[133626]:_array[133588](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    (128608 return(128605 call .(128602 call . this c"_dom") c"rank"))
  }
  function _array[133588](?).indices[128615](arg _mt[133632]:_MT[238], arg this[133630]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    (128618 return _dom)
  }
  function _array[133588](?).checkAccess[128627](arg _mt[133636]:_MT[238], arg this[133634]:_array[133588](?), arg indices[128625]:_any[178](?), arg value[128629]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    if(129150 call _cond_test(128634 call isRectangularArr this))
    {
      if(129145 call _cond_test(128644 call !(128643 call(128638 call . value c"dsiBoundsCheck") indices)))
      {
        if(129140 call _cond_test(128648 call == rank 1))
        {
          (128717 call halt "array index out of bounds\n" "note: index was "(128689 call indices 0) " but array bounds are "(128716 call(128711 call .(128708 call . value c"dom") c"dsiDim") 0))
        }
        {
          unknown istr[128737] ""
          (128740 'end of statement')
          unknown bstr[128759] ""
          (128762 'end of statement')
          {
            unknown i[128818] 0
            unknown tmp[128819] "maybe param" "temp"
            (128831 'move' tmp[128819](128829 call chpl_compute_low_param_loop_bound 0(128766 call - rank 1)))
            unknown tmp[128820] "maybe param" "temp"
            (128841 'move' tmp[128820](128839 call chpl_compute_high_param_loop_bound 0(128836 call - rank 1)))
            unknown tmp[128821] "maybe param" "temp"
            (128844 'move' tmp[128821] 1)
            ParamForLoop[128846]
            { i[128818] tmp[128819] tmp[128820] tmp[128821]
              {
                if(128785 call _cond_test(128772 call != i 0))
                {
                  (128776 call += istr ", ")
                  (128782 call += bstr ", ")
                }
                (128798 call += istr(128796 call _cast string[26](128794 call indices i)))
                (128815 call += bstr(128813 call _cast string[26](128811 call(128806 call .(128803 call . value c"dom") c"dsiDim") i)))
              }
            }
            label _unused_continueLabel[128823]
            label _breakLabel[128822]
          }
          unknown dimstr[128872] ""
          (128875 'end of statement')
          {
            unknown i[129026] 0
            unknown tmp[129027] "maybe param" "temp"
            (129039 'move' tmp[129027](129037 call chpl_compute_low_param_loop_bound 0(128879 call - rank 1)))
            unknown tmp[129028] "maybe param" "temp"
            (129049 'move' tmp[129028](129047 call chpl_compute_high_param_loop_bound 0(129044 call - rank 1)))
            unknown tmp[129029] "maybe param" "temp"
            (129052 'move' tmp[129029] 1)
            ParamForLoop[129054]
            { i[129026] tmp[129027] tmp[129028] tmp[129029]
              {
                if(129021 call _cond_test(128904 call !(128903 call(128895 call .(128892 call(128887 call .(128884 call . value c"dom") c"dsiDim") i) c"boundsCheck")(128901 call indices i))))
                {
                  if(129016 call _cond_test(128924 call == dimstr ""))
                  {
                    (129012 call = dimstr(129010 call +(128995 call +(128976 call +(128967 call +(128948 call + "out of bounds in dimension "(128946 call _cast string[26] i)) " because index ")(128974 call _cast string[26](128972 call indices i))) " is not in ")(129008 call _cast string[26](129006 call(129001 call .(128998 call . value c"dom") c"dsiDim") i))))
                  }
                }
              }
            }
            label _unused_continueLabel[129031]
            label _breakLabel[129030]
          }
          (129138 call halt "array index out of bounds\n" "note: index was (" istr ") " "but array bounds are (" bstr ")\n" "note: " dimstr)
        }
      }
    }
  }
  function _array[133588](?).checkSlice[129163](arg _mt[133640]:_MT[238], arg this[133638]:_array[133588](?), arg d[129160] :
  _domain, arg value[129165]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    (129178 call checkSlice(129174 'expand_tuple'(129173 call(129169 call . d c"dsiDims")))(value = value))
  }
  function _array[133588](?).checkSlice[129189](arg _mt[133644]:_MT[238], arg this[133642]:_array[133588](?), arg ranges[129186]:_any[178](?) ..., arg value[129191]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    if(129693 call _cond_test(129200 call isRectangularArr this))
    {
      unknown ok[129202] 1
      (129205 'end of statement')
      {
        unknown i[129247] 0
        unknown tmp[129248] "maybe param" "temp"
        (129260 'move' tmp[129248](129258 call chpl_compute_low_param_loop_bound 0(129210 call - rank 1)))
        unknown tmp[129249] "maybe param" "temp"
        (129270 'move' tmp[129249](129268 call chpl_compute_high_param_loop_bound 0(129265 call - rank 1)))
        unknown tmp[129250] "maybe param" "temp"
        (129273 'move' tmp[129250] 1)
        ParamForLoop[129275]
        { i[129247] tmp[129248] tmp[129249] tmp[129250]
          {
            {
              unknown tmp[129235] "temp"
              (129238 'move' tmp[129235](129237 'addr of' ok))
              (129243 call = tmp[129235](129240 call && tmp[129235](129233 call(129225 call .(129224 call(129219 call .(129216 call . value c"dom") c"dsiDim") i) c"boundsCheck")(129231 call ranges i))))
            }
          }
        }
        label _unused_continueLabel[129252]
        label _breakLabel[129251]
      }
      if(129689 call _cond_test(129286 call == ok 0))
      {
        if(129684 call _cond_test(129290 call == rank 1))
        {
          (129343 call halt "array slice out of bounds\n" "note: slice index was "(129331 call ranges 0) " but array bounds are "(129342 call(129337 call .(129334 call . value c"dom") c"dsiDim") 0))
        }
        {
          unknown istr[129363] ""
          (129366 'end of statement')
          unknown bstr[129385] ""
          (129388 'end of statement')
          {
            unknown i[129444] 0
            unknown tmp[129445] "maybe param" "temp"
            (129457 'move' tmp[129445](129455 call chpl_compute_low_param_loop_bound 0(129392 call - rank 1)))
            unknown tmp[129446] "maybe param" "temp"
            (129467 'move' tmp[129446](129465 call chpl_compute_high_param_loop_bound 0(129462 call - rank 1)))
            unknown tmp[129447] "maybe param" "temp"
            (129470 'move' tmp[129447] 1)
            ParamForLoop[129472]
            { i[129444] tmp[129445] tmp[129446] tmp[129447]
              {
                if(129411 call _cond_test(129398 call != i 0))
                {
                  (129402 call += istr ", ")
                  (129408 call += bstr ", ")
                }
                (129424 call += istr(129422 call _cast string[26](129420 call ranges i)))
                (129441 call += bstr(129439 call _cast string[26](129437 call(129432 call .(129429 call . value c"dom") c"dsiDim") i)))
              }
            }
            label _unused_continueLabel[129449]
            label _breakLabel[129448]
          }
          unknown dimstr[129498] ""
          (129501 'end of statement')
          {
            unknown i[129618] 0
            unknown tmp[129619] "maybe param" "temp"
            (129631 'move' tmp[129619](129629 call chpl_compute_low_param_loop_bound 0(129505 call - rank 1)))
            unknown tmp[129620] "maybe param" "temp"
            (129641 'move' tmp[129620](129639 call chpl_compute_high_param_loop_bound 0(129636 call - rank 1)))
            unknown tmp[129621] "maybe param" "temp"
            (129644 'move' tmp[129621] 1)
            ParamForLoop[129646]
            { i[129618] tmp[129619] tmp[129620] tmp[129621]
              {
                if(129613 call _cond_test(129528 call !(129527 call(129519 call .(129518 call(129513 call .(129510 call . value c"dom") c"dsiDim") i) c"boundsCheck")(129525 call ranges i))))
                {
                  if(129608 call _cond_test(129548 call == dimstr ""))
                  {
                    (129604 call = dimstr(129602 call +(129587 call +(129584 call +(129575 call +(129556 call + "out of bounds in dimension "(129554 call _cast string[26] i)) " because slice index ")(129582 call _cast string[26](129580 call ranges i))) " is not in ")(129600 call _cast string[26](129598 call(129593 call .(129590 call . value c"dom") c"dsiDim") i))))
                  }
                }
              }
            }
            label _unused_continueLabel[129623]
            label _breakLabel[129622]
          }
          (129682 call halt "array slice out of bounds\n" "note: slice index was (" istr ") " "but array bounds are (" bstr ")\n" "note: " dimstr)
        }
      }
    }
  }
  where {
    (129196 call chpl__isTupleOfRanges ranges)
  }
  function _array[133588](?).this[129716](arg _mt[133648]:_MT[238], ref arg this[133646]:_array[133588](?), arg i[129713] :
  (129711 call * rank(129708 call .(129705 call . _value c"dom") c"idxType"))) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    const value[129719] "const" _value
    (129722 'end of statement')
    if(129732 call _cond_test boundsChecking)
    {
      (129730 call checkAccess i(value = value))
    }
    if(129768 call _cond_test(129745 call ||(129740 call isRectangularArr this)(129744 call isSparseArr this)))
    {
      (129754 return(129753 call(129748 call . value c"dsiAccess") i))
    }
    {
      (129766 return(129765 call(129757 call . value c"dsiAccess")(129763 call i 0)))
    }
  }
  function _array[133588](?).this[129791](arg _mt[133652]:_MT[238], const arg this[133650]:_array[133588](?), arg i[129788] :
  (129786 call * rank(129783 call .(129780 call . _value c"dom") c"idxType"))) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[129801] "const" _value
    (129804 'end of statement')
    if(129814 call _cond_test boundsChecking)
    {
      (129812 call checkAccess i(value = value))
    }
    if(129850 call _cond_test(129827 call ||(129822 call isRectangularArr this)(129826 call isSparseArr this)))
    {
      (129836 return(129835 call(129830 call . value c"dsiAccess") i))
    }
    {
      (129848 return(129847 call(129839 call . value c"dsiAccess")(129845 call i 0)))
    }
  }
  where {
    (129799 call shouldReturnRvalueByValue(129795 call . _value c"eltType"))
  }
  function _array[133588](?).this[129874](arg _mt[133656]:_MT[238], const arg this[133654]:_array[133588](?), arg i[129871] :
  (129869 call * rank(129866 call .(129863 call . _value c"dom") c"idxType"))) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[129884] "const" _value
    (129887 'end of statement')
    if(129897 call _cond_test boundsChecking)
    {
      (129895 call checkAccess i(value = value))
    }
    if(129933 call _cond_test(129910 call ||(129905 call isRectangularArr this)(129909 call isSparseArr this)))
    {
      (129919 return(129918 call(129913 call . value c"dsiAccess") i))
    }
    {
      (129931 return(129930 call(129922 call . value c"dsiAccess")(129928 call i 0)))
    }
  }
  where {
    (129882 call shouldReturnRvalueByConstRef(129878 call . _value c"eltType"))
  }
  function _array[133588](?).this[129956](arg _mt[133660]:_MT[238], ref arg this[133658]:_array[133588](?), arg i[129952] ... :
  (129948 call .(129945 call . _value c"dom") c"idxType")) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    (129962 return(129961 call this i))
  }
  function _array[133588](?).this[129981](arg _mt[133664]:_MT[238], const arg this[133662]:_array[133588](?), arg i[129977] ... :
  (129973 call .(129970 call . _value c"dom") c"idxType")) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (129994 return(129993 call this i))
  }
  where {
    (129989 call shouldReturnRvalueByValue(129985 call . _value c"eltType"))
  }
  function _array[133588](?).this[130014](arg _mt[133668]:_MT[238], const arg this[133666]:_array[133588](?), arg i[130010] ... :
  (130006 call .(130003 call . _value c"dom") c"idxType")) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (130027 return(130026 call this i))
  }
  where {
    (130022 call shouldReturnRvalueByConstRef(130018 call . _value c"eltType"))
  }
  function _array[133588](?).localAccess[130048](arg _mt[133672]:_MT[238], ref arg this[133670]:_array[133588](?), arg i[130045] :
  (130043 call * rank(130040 call .(130037 call . _value c"dom") c"idxType"))) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    const value[130051] "const" _value
    (130054 'end of statement')
    if(130064 call _cond_test boundsChecking)
    {
      (130062 call checkAccess i(value = value))
    }
    if(130102 call _cond_test(130077 call ||(130072 call isRectangularArr this)(130076 call isSparseArr this)))
    {
      (130088 return(130087 call(130082 call . value c"dsiLocalAccess") i))
    }
    {
      (130100 return(130099 call(130091 call . value c"dsiLocalAccess")(130097 call i 0)))
    }
  }
  function _array[133588](?).localAccess[130125](arg _mt[133676]:_MT[238], const arg this[133674]:_array[133588](?), arg i[130122] :
  (130120 call * rank(130117 call .(130114 call . _value c"dom") c"idxType"))) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[130135] "const" _value
    (130138 'end of statement')
    if(130148 call _cond_test boundsChecking)
    {
      (130146 call checkAccess i(value = value))
    }
    if(130184 call _cond_test(130161 call ||(130156 call isRectangularArr this)(130160 call isSparseArr this)))
    {
      (130170 return(130169 call(130164 call . value c"dsiLocalAccess") i))
    }
    {
      (130182 return(130181 call(130173 call . value c"dsiLocalAccess")(130179 call i 0)))
    }
  }
  where {
    (130133 call shouldReturnRvalueByValue(130129 call . _value c"eltType"))
  }
  function _array[133588](?).localAccess[130208](arg _mt[133680]:_MT[238], const arg this[133678]:_array[133588](?), arg i[130205] :
  (130203 call * rank(130200 call .(130197 call . _value c"dom") c"idxType"))) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[130218] "const" _value
    (130221 'end of statement')
    if(130231 call _cond_test boundsChecking)
    {
      (130229 call checkAccess i(value = value))
    }
    if(130267 call _cond_test(130244 call ||(130239 call isRectangularArr this)(130243 call isSparseArr this)))
    {
      (130253 return(130252 call(130247 call . value c"dsiLocalAccess") i))
    }
    {
      (130265 return(130264 call(130256 call . value c"dsiLocalAccess")(130262 call i 0)))
    }
  }
  where {
    (130216 call shouldReturnRvalueByConstRef(130212 call . _value c"eltType"))
  }
  function _array[133588](?).localAccess[130290](arg _mt[133684]:_MT[238], ref arg this[133682]:_array[133588](?), arg i[130286] ... :
  (130282 call .(130279 call . _value c"dom") c"idxType")) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    (130296 return(130295 call localAccess i))
  }
  function _array[133588](?).localAccess[130315](arg _mt[133688]:_MT[238], const arg this[133686]:_array[133588](?), arg i[130311] ... :
  (130307 call .(130304 call . _value c"dom") c"idxType")) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (130328 return(130327 call localAccess i))
  }
  where {
    (130323 call shouldReturnRvalueByValue(130319 call . _value c"eltType"))
  }
  function _array[133588](?).localAccess[130348](arg _mt[133692]:_MT[238], const arg this[133690]:_array[133588](?), arg i[130344] ... :
  (130340 call .(130337 call . _value c"dom") c"idxType")) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (130361 return(130360 call localAccess i))
  }
  where {
    (130356 call shouldReturnRvalueByConstRef(130352 call . _value c"eltType"))
  }
  function _array[133588](?).this[130373](arg _mt[133696]:_MT[238], arg this[133694]:_array[133588](?), arg d[130370] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130403 call _cond_test(130380 call !=(130376 call . d c"rank") rank))
    {
      (130401 call compilerError "slicing an array with a domain of a different rank")
    }
    if(130416 call _cond_test boundsChecking)
    {
      (130414 call checkSlice d _value)
    }
    const tmp[130465] "const" "temp"(130462 IfExpr (130431 call(130427 call . _value c"isSliceArrayView")) then
    { scopeless
      (130449 call _build_tuple(130436 call .(130433 call . this c"_value") c"arr")(130445 call .(130440 call . this c"_value") c"_ArrPid"))
    } else
    { scopeless
      (130460 call _build_tuple(130452 call . this c"_value")(130456 call . this c"_pid"))
    } )
    (130472 call _check_tuple_var_decl tmp[130465] 2)
    const arr[130421] "const"(130466 call tmp[130465] 0)
    const arrpid[130423] "const"(130469 call tmp[130465] 1)
    (130477 'end of statement')
    unknown a[130503](130480 'new'(_chpl_manager = unmanaged[220](?))(130502 call ArrayViewSliceArr(eltType =(130483 call . this c"eltType"))(_DomPid =(130489 call . d c"_pid"))(dom =(130494 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
    (130506 'end of statement')
    (130520 call(130511 call .(130508 call . d c"_value") c"add_arr") a(locking = 1)(addToList = 0))
    (130526 return(130525 call _newArray a))
  }
  function _array[133588](?).this[130536](arg _mt[133700]:_MT[238], arg this[133698]:_array[133588](?), arg ranges[130533]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130551 call _cond_test boundsChecking)
    {
      (130549 call checkSlice(130545 'expand_tuple' ranges)(value = _value))
    }
    unknown d[130562] "no auto destroy"(130561 call _dom(130559 'expand_tuple' ranges))
    (130565 'end of statement')
    (130576 call =(130572 call .(130567 call . d c"_value") c"_free_when_no_arrs") 1)
    const tmp[130621] "const" "temp"(130618 IfExpr (130589 call(130585 call . _value c"isSliceArrayView")) then
    { scopeless
      (130605 call _build_tuple(130594 call .(130591 call . this c"_value") c"arr")(130601 call .(130598 call . this c"_value") c"_ArrPid"))
    } else
    { scopeless
      (130616 call _build_tuple(130608 call . this c"_value")(130612 call . this c"_pid"))
    } )
    (130628 call _check_tuple_var_decl tmp[130621] 2)
    const arr[130579] "const"(130622 call tmp[130621] 0)
    const arrpid[130581] "const"(130625 call tmp[130621] 1)
    (130633 'end of statement')
    unknown a[130659](130636 'new'(_chpl_manager = unmanaged[220](?))(130658 call ArrayViewSliceArr(eltType =(130639 call . this c"eltType"))(_DomPid =(130645 call . d c"_pid"))(dom =(130650 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
    (130662 'end of statement')
    (130676 call(130667 call .(130664 call . d c"_value") c"add_arr") a(locking = 0)(addToList = 0))
    (130682 return(130681 call _newArray a))
  }
  where {
    (130541 call chpl__isTupleOfRanges ranges)
  }
  function _array[133588](?).this[130693](arg _mt[133704]:_MT[238], arg this[133702]:_array[133588](?), arg args[130690]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130712 call _cond_test boundsChecking)
    {
      (130710 call checkRankChange args)
    }
    const rcdom[130726] "const"(130725 call(130719 call . this c"_dom")(130723 'expand_tuple' args))
    (130729 'end of statement')
    const tmp[130746] "const" "temp"(130744 call _build_tuple(130736 call . this c"_value")(130740 call . this c"_pid"))
    (130753 call _check_tuple_var_decl tmp[130746] 2)
    const arr[130730] "const"(130747 call tmp[130746] 0)
    const arrpid[130732] "const"(130750 call tmp[130746] 1)
    (130758 'end of statement')
    unknown a[130800](130761 'new'(_chpl_manager = unmanaged[220](?))(130799 call ArrayViewRankChangeArr(eltType =(130764 call . this c"eltType"))(_DomPid =(130770 call . rcdom c"_pid"))(dom =(130775 call . rcdom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)(collapsedDim =(130787 call .(130784 call . rcdom c"_value") c"collapsedDim"))(idx =(130795 call .(130792 call . rcdom c"_value") c"idx"))))
    (130803 'end of statement')
    (130815 call(130808 call .(130805 call . rcdom c"_value") c"add_arr") a(locking = 0))
    (130821 return(130820 call _newArray a))
  }
  where {
    (130705 call _validRankChangeArgs args(130702 call .(130699 call . _value c"dom") c"idxType"))
  }
  function _array[133588](?).checkRankChange[130830](arg _mt[133708]:_MT[238], arg this[133706]:_array[133588](?), arg args[130828]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130911] 0
      unknown tmp[130912] "maybe param" "temp"
      (130924 'move' tmp[130912](130922 call chpl_compute_low_param_loop_bound 0(130838 call -(130834 call . args c"size") 1)))
      unknown tmp[130913] "maybe param" "temp"
      (130937 'move' tmp[130913](130935 call chpl_compute_high_param_loop_bound 0(130929 call -(130931 call . args c"size") 1)))
      unknown tmp[130914] "maybe param" "temp"
      (130940 'move' tmp[130914] 1)
      ParamForLoop[130942]
      { i[130911] tmp[130912] tmp[130913] tmp[130914]
        if(130906 call _cond_test(130861 call !(130860 call(130852 call .(130851 call(130846 call .(130843 call . _value c"dom") c"dsiDim") i) c"boundsCheck")(130858 call args i))))
        {
          (130904 call halt "array slice out of bounds in dimension " i ": "(130903 call args i))
        }
      }
      label _unused_continueLabel[130916]
      label _breakLabel[130915]
    }
  }
  function _array[133588](?).localSlice[130960](arg _mt[133712]:_MT[238], arg this[133710]:_array[133588](?), arg r[130957]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130983 call _cond_test boundsChecking)
    {
      (130981 call checkSlice(130977 'expand_tuple' r)(value = _value))
    }
    unknown dom[130994](130993 call _dom(130991 'expand_tuple' r))
    (130997 'end of statement')
    (131002 return(131001 call chpl__localSliceDefaultArithArrHelp dom))
  }
  where {
    (130972 call &&(354296 'is_subtype' DefaultRectangularArr(130964 'typeof' _value))(130971 call chpl__isTupleOfRanges r))
  }
  function _array[133588](?).localSlice[131013](arg _mt[133716]:_MT[238], arg this[133714]:_array[133588](?), arg d[131010] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(131035 call _cond_test boundsChecking)
    {
      (131033 call checkSlice(131029 'expand_tuple'(131028 call(131024 call . d c"getIndices")))(value = _value))
    }
    (131045 return(131044 call chpl__localSliceDefaultArithArrHelp d))
  }
  where {
    (354297 'is_subtype' DefaultRectangularArr(131017 'typeof' _value))
  }
  function _array[133588](?).chpl__localSliceDefaultArithArrHelp[131056](arg _mt[133720]:_MT[238], arg this[133718]:_array[133588](?), arg d[131053] :
  _domain) : _unknown[51] "method" "primary method" "no copy return"
  {
    if(131096 call _cond_test(131063 call !=(131060 call chpl_localeID_to_locale(131059 '_wide_get_locale' _value)) here))
    {
      (131094 call halt "Attempting to take a local slice of an array on locale "(131088 '_wide_get_node' _value) " from locale "(131091 call . here c"id"))
    }
    (131106 return(131105 call this d))
  }
  function _array[133588](?).localSlice[131116](arg _mt[133724]:_MT[238], arg this[133722]:_array[133588](?), arg r[131113]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(131141 call _cond_test boundsChecking)
    {
      (131139 call checkSlice(131135 'expand_tuple' r)(value = _value))
    }
    (131154 return(131153 call(131148 call . _value c"dsiLocalSlice") r))
  }
  where {
    (131130 call &&(131121 call chpl__isTupleOfRanges r)(131128 call !(354298 'is_subtype' DefaultRectangularArr(131124 'typeof' _value))))
  }
  function _array[133588](?).localSlice[131165](arg _mt[133728]:_MT[238], arg this[133726]:_array[133588](?), arg d[131162] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    (131177 return(131176 call localSlice(131174 'expand_tuple'(131173 call(131169 call . d c"getIndices")))))
  }
  function _array[133588](?).these[131184](arg _mt[133732]:_MT[238], arg this[133730]:_array[133588](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[131197] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131198] "expr temp" "temp"
      (131207 'move' _iterator[131198](131205 call _getIterator(131192 call(131188 call . _value c"these"))))
      Defer
      {
        {
          (131224 call _freeIterator _iterator[131198])
        }
      }
      { scopeless type
        (131213 'move' _indexOfInterest[131197](131210 call iteratorIndex _iterator[131198]))
      }
      ForLoop[131199]
      {
        unknown i[131217] "index var" "insert auto destroy"
        (131219 'move' i[131217] _indexOfInterest[131197])
        {
          (131194 yield i)
        }
        label _continueLabel[131202]
        _indexOfInterest[131197]
        _iterator[131198]
      }
      label _breakLabel[131203]
    }
  }
  function _array[133588](?).these[131240](arg _mt[133736]:_MT[238], arg this[133734]:_array[133588](?), param arg tag[131237] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[131269] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131270] "expr temp" "temp"
      (131279 'move' _iterator[131270](131277 call _getIterator(131265 call(131260 call . _value c"these") tag)))
      Defer
      {
        {
          (131296 call _freeIterator _iterator[131270])
        }
      }
      { scopeless type
        (131285 'move' _indexOfInterest[131269](131282 call iteratorIndex _iterator[131270]))
      }
      ForLoop[131271]
      {
        unknown i[131289] "index var" "insert auto destroy"
        (131291 'move' i[131289] _indexOfInterest[131269])
        (131267 yield i)
        label _continueLabel[131274]
        _indexOfInterest[131269]
        _iterator[131270]
      }
      label _breakLabel[131275]
    }
  }
  where {
    (131256 call &&(131247 call == tag(131244 call . iterKind c"standalone"))(131255 'method call resolves' _value "these"(tag = tag)))
  }
  function _array[133588](?).these[131313](arg _mt[133740]:_MT[238], arg this[133738]:_array[133588](?), param arg tag[131310] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[131333] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131334] "expr temp" "temp"
      (131343 'move' _iterator[131334](131341 call _getIterator(131329 call(131324 call . _value c"these") tag)))
      Defer
      {
        {
          (131360 call _freeIterator _iterator[131334])
        }
      }
      { scopeless type
        (131349 'move' _indexOfInterest[131333](131346 call iteratorIndex _iterator[131334]))
      }
      ForLoop[131335]
      {
        unknown followThis[131353] "index var" "insert auto destroy"
        (131355 'move' followThis[131353] _indexOfInterest[131333])
        (131331 yield followThis)
        label _continueLabel[131338]
        _indexOfInterest[131333]
        _iterator[131334]
      }
      label _breakLabel[131339]
    }
  }
  where {
    (131320 call == tag(131317 call . iterKind c"leader"))
  }
  function _array[133588](?).these[131377](arg _mt[133744]:_MT[238], arg this[133742]:_array[133588](?), param arg tag[131374] :
  iterKind, arg followThis[131379]:_any[178](?), param arg fast[131383] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    if(131501 call _cond_test(131403 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[131419] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131420] "expr temp" "temp"
        (131429 'move' _iterator[131420](131427 call _getIterator(131415 call(131406 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (131446 call _freeIterator _iterator[131420])
          }
        }
        { scopeless type
          (131435 'move' _indexOfInterest[131419](131432 call iteratorIndex _iterator[131420]))
        }
        ForLoop[131421]
        {
          unknown i[131439] "index var" "insert auto destroy"
          (131441 'move' i[131439] _indexOfInterest[131419])
          (131417 yield i)
          label _continueLabel[131424]
          _indexOfInterest[131419]
          _iterator[131420]
        }
        label _breakLabel[131425]
      }
    }
    {
      {
        unknown _indexOfInterest[131466] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131467] "expr temp" "temp"
        (131476 'move' _iterator[131467](131474 call _getIterator(131462 call(131456 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (131493 call _freeIterator _iterator[131467])
          }
        }
        { scopeless type
          (131482 'move' _indexOfInterest[131466](131479 call iteratorIndex _iterator[131467]))
        }
        ForLoop[131468]
        {
          unknown i[131486] "index var" "insert auto destroy"
          (131488 'move' i[131486] _indexOfInterest[131466])
          (131464 yield i)
          label _continueLabel[131471]
          _indexOfInterest[131466]
          _iterator[131467]
        }
        label _breakLabel[131472]
      }
    }
  }
  where {
    (131392 call == tag(131389 call . iterKind c"follower"))
  }
  function _array[133588](?).numElements[131511](arg _mt[133748]:_MT[238], arg this[133746]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (131551 call compilerWarning(131548 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131555 return size)
  }
  function _array[133588](?).size[131561](arg _mt[133752]:_MT[238], arg this[133750]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (131570 return(131567 call .(131564 call . _value c"dom") c"dsiNumIndices"))
  }
  function _array[133588](?).chpl_checkArrArgDoms[131581](arg _mt[133756]:_MT[238], arg this[133754]:_array[133588](?), arg formalDom[131578] :
  _domain, param arg runtimeChecks[131584] :
  bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(131663 call _cond_test(131598 call !=(131588 call . formalDom c"rank")(131595 call .(131592 call . this c"_dom") c"rank")))
    {
      (131661 call compilerError(131656 call +(131644 call +(131625 call + "Rank mismatch passing array argument: expected "(131623 call _cast string[26](131619 call . formalDom c"rank"))) " but got ")(131654 call _cast string[26](131650 call .(131647 call . this c"_dom") c"rank")))(errorDepth = 2))
    }
    if(131807 call _cond_test(131679 call !=(131676 'typeof'(131673 call .(131670 call . formalDom c"dist") c"_value"))(131678 'to unmanaged class from unknown' DefaultDist)))
    {
      if(131713 call _cond_test(131688 call !=(131682 'typeof' formalDom)(131687 'typeof'(131684 call . this c"_dom"))))
      {
        (131711 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      if(131802 call _cond_test(131733 call && runtimeChecks(131731 call !=(131721 call . formalDom c"dist")(131728 call .(131725 call . this c"_dom") c"dist"))))
      {
        (131800 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: "(131772 call . formalDom c"dist") "\n" "  Actual domain map is: "(131797 call .(131794 call . this c"_dom") c"dist"))
      }
    }
    if(131882 call _cond_test(131819 call && runtimeChecks(131817 call != formalDom(131814 call . this c"_dom"))))
    {
      (131880 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom "\n" "  Actual domain is: "(131877 call . this c"_dom"))
    }
  }
  function _array[133588](?).reindex[131895](arg _mt[133760]:_MT[238], arg this[133758]:_array[133588](?), arg newDomain[131892] :
  _domain) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    (131920 return(131919 call reindex(131917 'expand_tuple'(131916 call(131912 call . newDomain c"dims")))))
  }
  where {
    (131908 call &&(131903 call isRectangularDom(131899 call . this c"_dom"))(131907 call isRectangularDom newDomain))
  }
  function _array[133588](?).reindex[131932](arg _mt[133764]:_MT[238], arg this[133762]:_array[133588](?), arg newDims[131929]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    {
      unknown i[131986] 0
      unknown tmp[131987] "maybe param" "temp"
      (131999 'move' tmp[131987](131997 call chpl_compute_low_param_loop_bound 0(131947 call -(131943 call . newDims c"size") 1)))
      unknown tmp[131988] "maybe param" "temp"
      (132012 'move' tmp[131988](132010 call chpl_compute_high_param_loop_bound 0(132004 call -(132006 call . newDims c"size") 1)))
      unknown tmp[131989] "maybe param" "temp"
      (132015 'move' tmp[131989] 1)
      ParamForLoop[132017]
      { i[131986] tmp[131987] tmp[131988] tmp[131989]
        if(131981 call _cond_test(131958 call !(131957 call isRange(131955 call newDims i))))
        {
          (131979 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[131991]
      label _breakLabel[131990]
    }
    if(132095 call _cond_test(132035 call !=(132028 call . this c"rank")(132032 call . newDims c"size")))
    {
      (132093 call compilerError(132090 call +(132081 call +(132062 call + "rank mismatch: cannot reindex() from "(132060 call _cast string[26](132056 call . this c"rank"))) " dimension(s) to ")(132088 call _cast string[26](132084 call . newDims c"size"))))
    }
    {
      unknown i[132173] 0
      unknown tmp[132174] "maybe param" "temp"
      (132186 'move' tmp[132174](132184 call chpl_compute_low_param_loop_bound 0(132103 call - rank 1)))
      unknown tmp[132175] "maybe param" "temp"
      (132196 'move' tmp[132175](132194 call chpl_compute_high_param_loop_bound 0(132191 call - rank 1)))
      unknown tmp[132176] "maybe param" "temp"
      (132199 'move' tmp[132176] 1)
      ParamForLoop[132201]
      { i[132173] tmp[132174] tmp[132175] tmp[132176]
        if(132168 call _cond_test(132127 call !=(132111 call .(132110 call newDims i) c"size")(132124 call .(132123 call(132118 call .(132115 call . _value c"dom") c"dsiDim") i) c"size")))
        {
          (132166 call halt "extent in dimension " i " does not match actual")
        }
      }
      label _unused_continueLabel[132178]
      label _breakLabel[132177]
    }
    const thisDomClass[132217] "const"(132214 call .(132211 call . this c"_value") c"dom")
    (132220 'end of statement')
    const tmp[132234] "const" "temp"(132232 call _build_tuple thisDomClass(132228 call . thisDomClass c"pid"))
    (132241 call _check_tuple_var_decl tmp[132234] 2)
    const dom[132221] "const"(132235 call tmp[132234] 0)
    const dompid[132223] "const"(132238 call tmp[132234] 1)
    (132246 'end of statement')
    const updom[132252] "const" "no auto destroy"(132250 call chpl__buildDomainExpr(132248 'expand_tuple' newDims))
    (132255 'end of statement')
    const redist[132293] "const"(132258 'new'(_chpl_manager = unmanaged[220](?))(132292 call ArrayViewReindexDist(downDistPid =(132267 call .(132264 call .(132261 call . this c"_dom") c"dist") c"_pid"))(downDistInst =(132279 call .(132276 call .(132273 call . this c"_dom") c"dist") c"_instance"))(updom =(132284 call . updom c"_value"))(downdomPid = dompid)(downdomInst = dom)))
    (132296 'end of statement')
    const redistRec[132302] "const"(132297 'new'(132301 call _distribution redist))
    (132305 'end of statement')
    const newDom[132326] "const" "no auto destroy"(132306 'new'(132325 call _domain redistRec rank(132312 call . updom c"idxType")(132316 call . updom c"stridable")(132324 call(132320 call . updom c"dims"))))
    (132329 'end of statement')
    (132338 call =(132334 call .(132331 call . newDom c"_value") c"_free_when_no_arrs") 1)
    const tmp[132357] "const" "temp"(132355 call _build_tuple(132347 call . this c"_value")(132351 call . this c"_pid"))
    (132364 call _check_tuple_var_decl tmp[132357] 2)
    const arr[132341] "const"(132358 call tmp[132357] 0)
    const arrpid[132343] "const"(132361 call tmp[132357] 1)
    (132369 'end of statement')
    unknown x[132395](132372 'new'(_chpl_manager = unmanaged[220](?))(132394 call ArrayViewReindexArr(eltType =(132375 call . this c"eltType"))(_DomPid =(132381 call . newDom c"_pid"))(dom =(132386 call . newDom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
    (132398 'end of statement')
    (132410 call(132403 call .(132400 call . newDom c"_value") c"add_arr") x(locking = 0))
    (132416 return(132415 call _newArray x))
  }
  where {
    (131940 call isRectangularDom(131936 call . this c"_dom"))
  }
  function _array[133588](?).reindex[132427](arg _mt[133768]:_MT[238], arg this[133766]:_array[133588](?), arg d[132424] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132448 call compilerError "Reindexing non-rectangular arrays is not permitted.")
  }
  function _array[133588](?).writeThis[132457](arg _mt[133772]:_MT[238], arg this[133770]:_array[133588](?), arg f[132455]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (132465 call(132460 call . _value c"dsiSerialWrite") f)
  }
  function _array[133588](?).readThis[132474](arg _mt[133776]:_MT[238], arg this[133774]:_array[133588](?), arg f[132472]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (132482 call(132477 call . _value c"dsiSerialRead") f)
  }
  function _array[133588](?).IRV[132489](arg _mt[133780]:_MT[238], arg this[133778]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132516 call compilerError "only sparse arrays have an IRV")
  }
  where {
    (132495 call !(132494 call isSparseArr this))
  }
  function _array[133588](?).IRV[132524](arg _mt[133784]:_MT[238], arg this[133782]:_array[133588](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (132536 return(132533 call . _value c"IRV"))
  }
  where {
    (132529 call isSparseArr this)
  }
  function _array[133588](?).sorted[132553](arg _mt[133788]:_MT[238], arg this[133786]:_array[133588](?), arg comparator[132549] :
  unknown t[132544] =
  (132548 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(132720 call _cond_test(132577 call(132556 call . Reflection c"canResolveMethod") _value "dsiSorted" comparator))
    {
      {
        unknown _indexOfInterest[132590] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132591] "expr temp" "temp"
        (132600 'move' _iterator[132591](132598 call _getIterator(132585 call(132580 call . _value c"dsiSorted") comparator)))
        Defer
        {
          {
            (132617 call _freeIterator _iterator[132591])
          }
        }
        { scopeless type
          (132606 'move' _indexOfInterest[132590](132603 call iteratorIndex _iterator[132591]))
        }
        ForLoop[132592]
        {
          unknown i[132610] "index var" "insert auto destroy"
          (132612 'move' i[132610] _indexOfInterest[132590])
          {
            (132587 yield i)
          }
          label _continueLabel[132595]
          _indexOfInterest[132590]
          _iterator[132591]
        }
        label _breakLabel[132596]
      }
    }
    {
      if(132716 call _cond_test(132632 call(132626 call . Reflection c"canResolveMethod") _value "dsiSorted"))
      {
        (132659 call compilerError(132656 call +(132637 call _cast string[26](132635 'typeof' _value)) " does not support dsiSorted(comparator)"))
      }
      {
        (132663 'use' Sort)
        unknown copy[132667] this
        (132670 'end of statement')
        (132676 call sort copy(comparator = comparator))
        {
          unknown _indexOfInterest[132683] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132684] "expr temp" "temp"
          (132693 'move' _iterator[132684](132691 call _getIterator copy))
          Defer
          {
            {
              (132709 call _freeIterator _iterator[132684])
            }
          }
          { scopeless type
            (132698 'move' _indexOfInterest[132683](132695 call iteratorIndex _iterator[132684]))
          }
          ForLoop[132685]
          {
            unknown ind[132702] "index var" "insert auto destroy"
            (132704 'move' ind[132702] _indexOfInterest[132683])
            (132681 yield ind)
            label _continueLabel[132688]
            _indexOfInterest[132683]
            _iterator[132684]
          }
          label _breakLabel[132689]
        }
      }
    }
  }
  function _array[133588](?).displayRepresentation[132730](arg _mt[133792]:_MT[238], arg this[133790]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (132737 call(132733 call . _value c"dsiDisplayRepresentation"))
  }
  function _array[133588](?).targetLocales[132744](arg _mt[133796]:_MT[238], arg this[133794]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    (132752 return(132751 call(132747 call . _value c"dsiTargetLocales")))
  }
  function _array[133588](?).hasSingleLocalSubdomain[132759](arg _mt[133800]:_MT[238], arg this[133798]:_array[133588](?)) param : _unknown[51] "method" "primary method"
  {
    (132767 return(132766 call(132762 call . _value c"dsiHasSingleLocalSubdomain")))
  }
  function _array[133588](?).localSubdomain[132780](arg _mt[133804]:_MT[238], arg this[133802]:_array[133588](?), arg loc[132776] :
  locale[28] =
  here) : _unknown[51] "method" "primary method"
  {
    if(132795 call _cond_test(132788 call !(132787 call(132783 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      (132793 call compilerError "Domain's local domain is not a single domain")
    }
    (132808 return(132807 call(132802 call . _value c"dsiLocalSubdomain") loc))
  }
  function _array[133588](?).localSubdomains[132820](arg _mt[133808]:_MT[238], arg this[133806]:_array[133588](?), arg loc[132816] :
  locale[28] =
  here) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(132881 call _cond_test(132827 call(132823 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (132832 yield(132831 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[132846] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132847] "expr temp" "temp"
        (132856 'move' _iterator[132847](132854 call _getIterator(132842 call(132837 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (132873 call _freeIterator _iterator[132847])
          }
        }
        { scopeless type
          (132862 'move' _indexOfInterest[132846](132859 call iteratorIndex _iterator[132847]))
        }
        ForLoop[132848]
        {
          unknown d[132866] "index var" "insert auto destroy"
          (132868 'move' d[132866] _indexOfInterest[132846])
          (132844 yield d)
          label _continueLabel[132851]
          _indexOfInterest[132846]
          _iterator[132847]
        }
        label _breakLabel[132852]
      }
    }
  }
  function _array[133588](?).chpl__isDense1DArray[132890](arg _mt[133812]:_MT[238], arg this[133810]:_array[133588](?)) param : _unknown[51] "method" "primary method"
  {
    (132916 return(132914 call &&(132903 call &&(132895 call isRectangularArr this)(132901 call ==(132897 call . this c"rank") 1))(132912 call !(132909 call .(132906 call . this c"_value") c"stridable"))))
  }
  function _array[133588](?).chpl__assertSingleArrayDomain[132927](arg _mt[133816]:_MT[238], arg this[133814]:_array[133588](?), arg fnName[132924] :
  string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(132988 call _cond_test(132943 call !=(132939 call .(132936 call .(132933 call .(132930 call . this c"_dom") c"_value") c"_arrs") c"size") 1))
    {
      (132986 call halt(132983 call +(132964 call + "cannot call " fnName) " on an array defined over a domain with multiple arrays"))
    }
  }
  function _array[133588](?).isEmpty[132998](arg _mt[133820]:_MT[238], arg this[133818]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    (133008 return(133006 call ==(133002 call . this c"size") 0))
  }
  { scopeless type
    bool[10]
  }
  function _array[133588](?).head[133016](arg _mt[133824]:_MT[238], arg this[133822]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133035 return(133034 call this(133030 call .(133027 call . this c"_dom") c"alignedLow")))
  }
  { scopeless type
    (133022 call .(133019 call . this c"_value") c"eltType")
  }
  function _array[133588](?).tail[133043](arg _mt[133828]:_MT[238], arg this[133826]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133062 return(133061 call this(133057 call .(133054 call . this c"_dom") c"alignedHigh")))
  }
  { scopeless type
    (133049 call .(133046 call . this c"_value") c"eltType")
  }
  function _array[133588](?).back[133070](arg _mt[133832]:_MT[238], arg this[133830]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    if(133108 call _cond_test(133085 call ||(133076 call !(133075 call isRectangularArr this))(133083 call !=(133079 call . this c"rank") 1)))
    {
      (133106 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    if(133141 call _cond_test(133118 call && boundsChecking(133117 call isEmpty)))
    {
      (133139 call halt "back called on an empty array")
    }
    (133156 return(133155 call this(133151 call .(133148 call . this c"_dom") c"high")))
  }
  function _array[133588](?).front[133162](arg _mt[133836]:_MT[238], arg this[133834]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    if(133200 call _cond_test(133177 call ||(133168 call !(133167 call isRectangularArr this))(133175 call !=(133171 call . this c"rank") 1)))
    {
      (133198 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    if(133233 call _cond_test(133210 call && boundsChecking(133209 call isEmpty)))
    {
      (133231 call halt "front called on an empty array")
    }
    (133248 return(133247 call this(133243 call .(133240 call . this c"_dom") c"low")))
  }
  function _array[133588](?).reverse[133254](arg _mt[133840]:_MT[238], arg this[133838]:_array[133588](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(133282 call _cond_test(133259 call !(133258 call chpl__isDense1DArray)))
    {
      (133280 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    const lo[133295] "const"(133292 call .(133289 call . this c"_dom") c"low")
    const mid[133308] "const"(133306 call /(133302 call .(133299 call . this c"_dom") c"size") 2)
    const hi[133318] "const"(133315 call .(133312 call . this c"_dom") c"high")
    (133321 'end of statement')
    {
      unknown _indexOfInterest[133347] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133348] "expr temp" "temp"
      (133357 'move' _iterator[133348](133355 call _getIterator(133364 call chpl_direct_counted_range_iter 0 mid)))
      Defer
      {
        {
          (133380 call _freeIterator _iterator[133348])
        }
      }
      { scopeless type
        (133369 'move' _indexOfInterest[133347](133366 call iteratorIndex _iterator[133348]))
      }
      ForLoop[133349]
      {
        unknown i[133373] "index var" "insert auto destroy"
        (133375 'move' i[133373] _indexOfInterest[133347])
        {
          (133343 call <=>(133335 call this(133332 call + lo i))(133342 call this(133339 call - hi i)))
        }
        label _continueLabel[133352]
        _indexOfInterest[133347]
        _iterator[133348]
      }
      label _breakLabel[133353]
    }
  }
  function _array[133588](?).find[133398](arg _mt[133844]:_MT[238], arg this[133842]:_array[133588](?), arg val[133395] :
  (133392 call . this c"eltType")) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[133436] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133437] "expr temp" "temp"
      (133446 'move' _iterator[133437](133444 call _getIterator(133413 call . this c"_dom")))
      Defer
      {
        {
          (133463 call _freeIterator _iterator[133437])
        }
      }
      { scopeless type
        (133452 'move' _indexOfInterest[133436](133449 call iteratorIndex _iterator[133437]))
      }
      ForLoop[133438]
      {
        unknown i[133456] "index var" "insert auto destroy"
        (133458 'move' i[133456] _indexOfInterest[133436])
        {
          if(133430 call _cond_test(133421 call ==(133419 call this i) val))
          {
            (133428 return(133426 call _build_tuple 1 i))
          }
        }
        label _continueLabel[133441]
        _indexOfInterest[133436]
        _iterator[133437]
      }
      label _breakLabel[133442]
    }
    unknown arbInd[133478](133476 call chpl__buildIndexType(133472 call . this c"_dom"))
    (133481 'end of statement')
    (133487 return(133485 call _build_tuple 0 arbInd))
  }
  { scopeless type
    (133409 call _build_tuple bool[10](133406 call chpl__buildIndexType(133402 call . this c"_dom")))
  }
  function _array[133588](?).count[133501](arg _mt[133848]:_MT[238], arg this[133846]:_array[133588](?), arg val[133498] :
  (133495 call . this c"eltType")) : _unknown[51] "method" "primary method"
  {
    (133511 return(133509 'reduce' SumReduceScanOp(133507 call == this val) 0))
  }
  { scopeless type
    int[13]
  }
  function _array[133588](?).shape[133519](arg _mt[133852]:_MT[238], arg this[133850]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (133530 return(133527 call .(133522 call . this c"_dom") c"shape"))
  }
  function _array[133588](?)._scan[133539](arg _mt[133856]:_MT[238], arg this[133854]:_array[133588](?), arg op[133537]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133581 return(133580 call(133571 call . _value c"doiScan") op(133577 call . this c"_dom")))
  }
  where {
    (133569 call(133542 call . Reflection c"canResolveMethod") _value "doiScan" op(133566 call . this c"_dom"))
  }
  type _array[133588](?) unknown _pid[128415] int[13] unknown _instance[128419] "alias scope from this" "owned" unknown _unowned[128424] bool[10] forwarding ( )
  function _do_destroy_arr[133865](arg _unowned[133862] :
  bool[10], arg _instance[133867]:_any[178](?), arg deinitElts[133870] =
  1) : _unknown[51] "inline" "no return value for void"
  {
    if(134113 call _cond_test(133874 call ! _unowned))
    {
      const tmp[134089] "const" "temp"
      (134091 'move' tmp[134089](134087 'deref'(134086 '_wide_get_locale' _instance)))
      {
        {
          unknown arrIsInList[133885] "param"(133883 call !(133882 call(133878 call . _instance c"isSliceArrayView")))
          (133888 'end of statement')
          unknown tmp[133902] "temp"(133901 call(133896 call . _instance c"remove") arrIsInList)
          (133909 call _check_tuple_var_decl tmp[133902] 2)
          unknown arrToFree[133890](133903 call tmp[133902] 0)
          unknown domToRemove[133892](133906 call tmp[133902] 1)
          (133914 'end of statement')
          unknown domToFree[133919] nil[44](133917 'to unmanaged class from unknown'(133916 'to nilable class from type' BaseDom))
          (133922 'end of statement')
          unknown distToRemove[133927] nil[44](133925 'to unmanaged class from unknown'(133924 'to nilable class from type' BaseDist))
          (133930 'end of statement')
          unknown distToFree[133935] nil[44](133933 'to unmanaged class from unknown'(133932 'to nilable class from type' BaseDist))
          (133938 'end of statement')
          unknown domIsPrivatized[133940] 0
          (133943 'end of statement')
          const instanceDom[133945] "const" domToRemove
          (133948 'end of statement')
          if(133986 call _cond_test(133951 call != domToRemove nil[44]))
          {
            (133966 call =(133956 call _build_tuple domToFree distToRemove)(133965 call(133961 call .(133959 call postfix! domToRemove) c"remove")))
            (133983 call = domIsPrivatized(133981 call && _privatization(133979 call !=(133975 call .(133973 call postfix! domToRemove) c"pid") nullPid)))
          }
          unknown distIsPrivatized[133991] 0
          (133994 'end of statement')
          if(134028 call _cond_test(133997 call != distToRemove nil[44]))
          {
            (134008 call = distToFree(134007 call(134003 call .(134001 call postfix! distToRemove) c"remove")))
            (134025 call = distIsPrivatized(134023 call && _privatization(134021 call !=(134017 call .(134015 call postfix! distToRemove) c"pid") nullPid)))
          }
          if(134047 call _cond_test(134034 call != arrToFree nil[44]))
          {
            (134045 call _delete_arr _instance(134042 call _isPrivatized _instance)(deinitElts = deinitElts))
          }
          if(134064 call _cond_test(134054 call != domToFree nil[44]))
          {
            (134062 call _delete_dom(134058 call postfix! instanceDom) domIsPrivatized)
          }
          if(134081 call _cond_test(134071 call != distToFree nil[44]))
          {
            (134079 call _delete_dist(134075 call postfix! distToFree) distIsPrivatized)
          }
        }
        (134094 'on block' 0 tmp[134089])
      }
    }
    {
      if(134108 call _cond_test(134101 call chpl__isArrayView _instance))
      {
        (134104 call chpl__delete _instance)
      }
    }
  }
  function _do_destroy_array[134126](arg array[134123] :
  _array, arg deinitElts[134129] =
  1) : _unknown[51] "inline" "no return value for void"
  {
    (134143 call _do_destroy_arr(134134 call . array c"_unowned")(134139 call . array c"_instance") deinitElts)
  }
  function _deinitElementsIsParallel[134152](arg eltType[134150]:_any[178](?)) param : _unknown[51]
  {
    (134155 return 0)
  }
  function _deinitElements[134166](arg array[134163] :
  _array) : _unknown[51] "no return value for void"
  {
    unknown needsDestroy[134175] "param"(134174 'needs auto destroy'(134171 call . array c"eltType"))
    (134178 'end of statement')
    if(134248 call _cond_test needsDestroy)
    {
      if(134243 call _cond_test(134187 call _deinitElementsIsParallel(134183 call . array c"eltType")))
      {
        Forall {
          induction variables:
            
            unknown elt[134197] "index var" "insert auto destroy"
          iterated expressions:
            array
          shadow variables:
          other variables
            forall body
          {
            (134193 call chpl__autoDestroy elt)
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134209] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134210] "expr temp" "temp"
          (134219 'move' _iterator[134210](134217 call _getIterator array))
          Defer
          {
            {
              (134235 call _freeIterator _iterator[134210])
            }
          }
          { scopeless type
            (134224 'move' _indexOfInterest[134209](134221 call iteratorIndex _iterator[134210]))
          }
          ForLoop[134211]
          {
            unknown elt[134228] "index var" "insert auto destroy"
            (134230 'move' elt[134228] _indexOfInterest[134209])
            {
              (134206 call chpl__autoDestroy elt)
            }
            label _continueLabel[134214]
            _indexOfInterest[134209]
            _iterator[134210]
          }
          label _breakLabel[134215]
        }
      }
    }
    (134262 call(134258 call .(134253 call . array c"_instance") c"dsiElementDeinitializationComplete"))
  }
  function _unknown[51].equals[134273](arg _mt[134278]:_MT[238], arg this[134275] :
  _array, arg that[134270] :
  _array) : _unknown[51] "method"
  {
    if(134294 call _cond_test(134289 call ==(134282 call . this c"_value")(134286 call . that c"_value")))
    {
      (134292 return 1)
    }
    if(134313 call _cond_test(134308 call !=(134301 call . this c"rank")(134305 call . that c"rank")))
    {
      (134311 return 0)
    }
    if(134331 call _cond_test(134326 call !=(134319 call . this c"size")(134323 call . that c"size")))
    {
      (134329 return 0)
    }
    if(134442 call _cond_test(134350 call &&(134342 call isRectangularDom(134338 call . this c"_dom"))(134349 call isRectangularDom(134345 call . that c"_dom"))))
    {
      {
        unknown _indexOfInterest[134398] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134399] "expr temp" "temp"
        (134408 'move' _iterator[134399](134406 call _getIterator(134418 call chpl_direct_counted_range_iter 0(134414 call . this c"rank"))))
        Defer
        {
          {
            (134434 call _freeIterator _iterator[134399])
          }
        }
        { scopeless type
          (134423 'move' _indexOfInterest[134398](134420 call iteratorIndex _iterator[134399]))
        }
        ForLoop[134400]
        {
          unknown d[134427] "index var" "insert auto destroy"
          (134429 'move' d[134427] _indexOfInterest[134398])
          if(134393 call _cond_test(134388 call !=(134372 call .(134371 call(134366 call .(134363 call . this c"_dom") c"dim") d) c"size")(134385 call .(134384 call(134379 call .(134376 call . that c"_dom") c"dim") d) c"size")))
          {
            (134391 return 0)
          }
          label _continueLabel[134403]
          _indexOfInterest[134398]
          _iterator[134399]
        }
        label _breakLabel[134404]
      }
    }
    if(134517 call _cond_test(134452 call isArrayType(134448 call . this c"eltType")))
    {
      unknown ret[134454] 1
      (134457 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134499] "index var" "insert auto destroy"
          
          unknown thatArr[134501] "index var" "insert auto destroy"
        iterated expressions:
          this
          that
        shadow variables:
          ret[134470] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134487] "temp"
          (134490 'move' tmp[134487](134489 'addr of' ret))
          (134495 call = tmp[134487](134492 call && tmp[134487](134485 call(134480 call . thisArr c"equals") thatArr)))
        }
      }
      (134505 return ret)
    }
    {
      (134514 return(134512 'reduce' LogicalAndReduceScanOp(134510 call == this that) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function _cast[134530](arg t[134527] :
  _array, param arg arg[134532]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown result[134535] t
    (134538 'end of statement')
    (134544 call chpl__transferArray result arg)
    (134547 return result)
  }
  function _cast[134557](arg t[134554] :
  string[26], arg x[134562] :
  (134559 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "no doc"
  {
    (134566 'use' IO)
    (134573 return(134572 call stringify x))
  }
  function isDmapType[134581](arg t[134579]:_any[178](?)) param : _unknown[51]
  {
    function isDmapHelp[134589](arg t[134586] :
    _distribution) param : _unknown[51]
    {
      (134592 return 1)
    }
    function isDmapHelp[134602](arg t[134600]:_any[178](?)) param : _unknown[51]
    {
      (134605 return 0)
    }
    (134614 return(134613 call isDmapHelp t))
  }
  function isDmapValue[134624](arg e[134621] :
  _distribution) param : _unknown[51] "no doc"
  {
    (134627 return 1)
  }
  function isDmapValue[134636](arg e[134634]:_any[178](?)) param : _unknown[51]
  {
    (134639 return 0)
  }
  function isDomainType[134648](arg t[134646]:_any[178](?)) param : _unknown[51]
  {
    (134655 return(354299 'is_subtype' _domain t))
  }
  function isDomainValue[134666](arg e[134663] :
  _domain) param : _unknown[51] "no doc"
  {
    (134669 return 1)
  }
  function isDomainValue[134678](arg e[134676]:_any[178](?)) param : _unknown[51]
  {
    (134681 return 0)
  }
  function isArrayType[134690](arg t[134688]:_any[178](?)) param : _unknown[51]
  {
    (134697 return(354300 'is_subtype' _array t))
  }
  function isArrayValue[134710](arg e[134707] :
  (134704 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51] "no doc"
  {
    (134713 return 1)
  }
  function isArrayValue[134722](arg e[134720]:_any[178](?)) param : _unknown[51]
  {
    (134725 return 0)
  }
  function -[134736](arg a[134733] :
  _domain, arg b[134739] :
  _domain) : _unknown[51]
  {
    unknown newDom[134756](134755 'typeof' a)
    (134759 'end of statement')
    {
      unknown tmp[134801] "temp"(134802 'task_get_serial')
      if(134798 call _cond_test(134768 call !(134765 call .(134762 call . newDom c"_value") c"parSafe")))
      {
        (134804 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134808 'task_set_serial' tmp[134801])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134795] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(134789 call _cond_test(134779 call !(134778 call(134773 call . b c"contains") e)))
          {
            (134787 call(134782 call . newDom c"add") e)
          }
        }
      }
    }
    (134813 return newDom)
  }
  where {
    (134752 call &&(134746 call ==(134743 'typeof' a)(134745 'typeof' b))(134751 call isAssociativeDom a))
  }
  function -=[134824](ref arg a[134821] :
  _domain, arg b[134827] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134864] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134865] "expr temp" "temp"
      (134874 'move' _iterator[134865](134872 call _getIterator b))
      Defer
      {
        {
          (134890 call _freeIterator _iterator[134865])
        }
      }
      { scopeless type
        (134879 'move' _indexOfInterest[134864](134876 call iteratorIndex _iterator[134865]))
      }
      ForLoop[134866]
      {
        unknown e[134883] "index var" "insert auto destroy"
        (134885 'move' e[134883] _indexOfInterest[134864])
        if(134859 call _cond_test(134850 call(134845 call . a c"contains") e))
        {
          (134857 call(134852 call . a c"remove") e)
        }
        label _continueLabel[134869]
        _indexOfInterest[134864]
        _iterator[134865]
      }
      label _breakLabel[134870]
    }
  }
  where {
    (134840 call &&(134834 call ==(134831 'typeof' a)(134833 'typeof' b))(134839 call isAssociativeDom a))
  }
  function |[134907](arg a[134904] :
  _domain, arg b[134910] :
  _domain) : _unknown[51]
  {
    (134929 return(134927 call + a b))
  }
  where {
    (134923 call &&(134917 call ==(134914 'typeof' a)(134916 'typeof' b))(134922 call isAssociativeDom a))
  }
  function |=[134941](ref arg a[134938] :
  _domain, arg b[134944] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134969] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134970] "expr temp" "temp"
      (134979 'move' _iterator[134970](134977 call _getIterator b))
      Defer
      {
        {
          (134995 call _freeIterator _iterator[134970])
        }
      }
      { scopeless type
        (134984 'move' _indexOfInterest[134969](134981 call iteratorIndex _iterator[134970]))
      }
      ForLoop[134971]
      {
        unknown e[134988] "index var" "insert auto destroy"
        (134990 'move' e[134988] _indexOfInterest[134969])
        (134967 call(134962 call . a c"add") e)
        label _continueLabel[134974]
        _indexOfInterest[134969]
        _iterator[134970]
      }
      label _breakLabel[134975]
    }
  }
  where {
    (134957 call &&(134951 call ==(134948 'typeof' a)(134950 'typeof' b))(134956 call isAssociativeDom a))
  }
  function +=[135012](ref arg a[135009] :
  _domain, arg b[135015] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    (135032 call |= a b)
  }
  where {
    (135028 call &&(135022 call ==(135019 'typeof' a)(135021 'typeof' b))(135027 call isAssociativeDom a))
  }
  function &[135045](arg a[135042] :
  _domain, arg b[135048] :
  _domain) : _unknown[51]
  {
    unknown newDom[135065](135064 'typeof' a)
    (135068 'end of statement')
    {
      unknown tmp[135111] "temp"(135112 'task_get_serial')
      if(135108 call _cond_test(135077 call !(135074 call .(135071 call . newDom c"_value") c"parSafe")))
      {
        (135114 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135118 'task_set_serial' tmp[135111])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135105] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
          newDom[135082] 'ref' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          if(135099 call _cond_test(135093 call(135088 call . b c"contains") k))
          {
            (135096 call += newDom k)
          }
        }
      }
    }
    (135123 return newDom)
  }
  where {
    (135061 call &&(135055 call ==(135052 'typeof' a)(135054 'typeof' b))(135060 call isAssociativeDom a))
  }
  function &=[135134](ref arg a[135131] :
  _domain, arg b[135137] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135160](135158 call chpl__buildDomainRuntimeType defaultDist(135153 call . a c"idxType"))
    (135163 'end of statement')
    {
      unknown _indexOfInterest[135186] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135187] "expr temp" "temp"
      (135196 'move' _iterator[135187](135194 call _getIterator a))
      Defer
      {
        {
          (135212 call _freeIterator _iterator[135187])
        }
      }
      { scopeless type
        (135201 'move' _indexOfInterest[135186](135198 call iteratorIndex _iterator[135187]))
      }
      ForLoop[135188]
      {
        unknown e[135205] "index var" "insert auto destroy"
        (135207 'move' e[135205] _indexOfInterest[135186])
        if(135181 call _cond_test(135174 call !(135173 call(135168 call . b c"contains") e)))
        {
          (135178 call += removeSet e)
        }
        label _continueLabel[135191]
        _indexOfInterest[135186]
        _iterator[135187]
      }
      label _breakLabel[135192]
    }
    {
      unknown _indexOfInterest[135229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135230] "expr temp" "temp"
      (135239 'move' _iterator[135230](135237 call _getIterator removeSet))
      Defer
      {
        {
          (135255 call _freeIterator _iterator[135230])
        }
      }
      { scopeless type
        (135244 'move' _indexOfInterest[135229](135241 call iteratorIndex _iterator[135230]))
      }
      ForLoop[135231]
      {
        unknown e[135248] "index var" "insert auto destroy"
        (135250 'move' e[135248] _indexOfInterest[135229])
        (135227 call(135222 call . a c"remove") e)
        label _continueLabel[135234]
        _indexOfInterest[135229]
        _iterator[135230]
      }
      label _breakLabel[135235]
    }
  }
  where {
    (135150 call &&(135144 call ==(135141 'typeof' a)(135143 'typeof' b))(135149 call isAssociativeDom a))
  }
  function ^[135271](arg a[135268] :
  _domain, arg b[135274] :
  _domain) : _unknown[51]
  {
    unknown newDom[135291](135290 'typeof' a)
    (135294 'end of statement')
    {
      unknown tmp[135365] "temp"(135366 'task_get_serial')
      if(135362 call _cond_test(135303 call !(135300 call .(135297 call . newDom c"_value") c"parSafe")))
      {
        (135368 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135372 'task_set_serial' tmp[135365])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135330] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
          other variables
            forall body
          {
            if(135324 call _cond_test(135314 call !(135313 call(135308 call . b c"contains") k)))
            {
              (135322 call(135317 call . newDom c"add") k)
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135359] "index var" "insert auto destroy"
          iterated expressions:
            b
          shadow variables:
          other variables
            forall body
          {
            if(135353 call _cond_test(135343 call !(135342 call(135337 call . a c"contains") k)))
            {
              (135351 call(135346 call . newDom c"add") k)
            }
          }
        }
      }
    }
    (135377 return newDom)
  }
  where {
    (135287 call &&(135281 call ==(135278 'typeof' a)(135280 'typeof' b))(135286 call isAssociativeDom a))
  }
  function ^=[135388](ref arg a[135385] :
  _domain, arg b[135391] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135437] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135438] "expr temp" "temp"
      (135447 'move' _iterator[135438](135445 call _getIterator b))
      Defer
      {
        {
          (135463 call _freeIterator _iterator[135438])
        }
      }
      { scopeless type
        (135452 'move' _indexOfInterest[135437](135449 call iteratorIndex _iterator[135438]))
      }
      ForLoop[135439]
      {
        unknown e[135456] "index var" "insert auto destroy"
        (135458 'move' e[135456] _indexOfInterest[135437])
        if(135431 call _cond_test(135414 call(135409 call . a c"contains") e))
        {
          (135421 call(135416 call . a c"remove") e)
        }
        {
          (135429 call(135424 call . a c"add") e)
        }
        label _continueLabel[135442]
        _indexOfInterest[135437]
        _iterator[135438]
      }
      label _breakLabel[135443]
    }
  }
  where {
    (135404 call &&(135398 call ==(135395 'typeof' a)(135397 'typeof' b))(135403 call isAssociativeDom a))
  }
  function +=[135480](ref arg sd[135477] :
  _domain, arg inds[135489] :
  (135486 call chpl__buildArrayRuntimeType nil[44](135484 call chpl__buildIndexType sd))) : _unknown[51] "assignop" "no return value for void"
  {
    if(135505 call _cond_test(135501 call ==(135497 call . inds c"size") 0))
    {
      (135503 return _void[55])
    }
    (135520 call(135515 call .(135512 call . sd c"_value") c"dsiBulkAdd") inds)
  }
  where {
    (135495 call isSparseDom sd)
  }
  function +=[135531](ref arg sd[135528] :
  _domain, arg d[135534] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    if(135574 call _cond_test(135570 call ==(135566 call . d c"size") 0))
    {
      (135572 return _void[55])
    }
    const indCount[135584] "const"(135581 call . d c"size")
    (135587 'end of statement')
    unknown arr[135606](135604 call chpl__buildArrayRuntimeType(135602 call chpl__ensureDomainExpr(135595 call chpl__buildDomainExpr(135592 call #(135589 call chpl_build_low_bounded_range 0) indCount)))(135600 call chpl__buildIndexType sd))
    (135609 'end of statement')
    {
      unknown _indexOfInterest[135629] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135630] "expr temp" "temp"
      (135647 'move' _iterator[135630](135620 call _build_tuple(135639 call _getIterator d)(135644 call _getIterator(135642 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (135677 call _freeIterator _iterator[135630])
        }
      }
      { scopeless type
        (135652 'move' _indexOfInterest[135629](135649 call iteratorIndex _iterator[135630]))
      }
      ForLoop[135631]
      {
        (135657 call _check_tuple_var_decl _indexOfInterest[135629] 2)
        unknown i[135663] "index var" "insert auto destroy"
        (135665 'move' i[135663](135661 call _indexOfInterest[135629] 0))
        unknown j[135670] "index var" "insert auto destroy"
        (135672 'move' j[135670](135668 call _indexOfInterest[135629] 1))
        (135626 call =(135624 call arr j) i)
        label _continueLabel[135634]
        _indexOfInterest[135629]
        _iterator[135630]
      }
      label _breakLabel[135635]
    }
    unknown rowSorted[135685] 0
    (135688 'end of statement')
    (135701 call(135693 call .(135690 call . sd c"_value") c"dsiBulkAdd") arr rowSorted 1 0)
  }
  where {
    (135563 call &&(135551 call &&(135540 call isSparseDom sd)(135549 call ==(135542 call . d c"rank")(135546 call . sd c"rank")))(135561 call ==(135554 call . sd c"idxType")(135558 call . d c"idxType")))
  }
  function -=[135712](ref arg sd[135709] :
  _domain, arg inds[135721] :
  (135718 call chpl__buildArrayRuntimeType nil[44](135716 call chpl__buildIndexType sd))) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135735] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135736] "expr temp" "temp"
      (135745 'move' _iterator[135736](135743 call _getIterator inds))
      Defer
      {
        {
          (135761 call _freeIterator _iterator[135736])
        }
      }
      { scopeless type
        (135750 'move' _indexOfInterest[135735](135747 call iteratorIndex _iterator[135736]))
      }
      ForLoop[135737]
      {
        unknown ind[135754] "index var" "insert auto destroy"
        (135756 'move' ind[135754] _indexOfInterest[135735])
        (135732 call -= sd ind)
        label _continueLabel[135740]
        _indexOfInterest[135735]
        _iterator[135736]
      }
      label _breakLabel[135741]
    }
  }
  where {
    (135727 call isSparseDom sd)
  }
  function -=[135778](ref arg sd[135775] :
  _domain, arg d[135781] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135819] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135820] "expr temp" "temp"
      (135829 'move' _iterator[135820](135827 call _getIterator d))
      Defer
      {
        {
          (135845 call _freeIterator _iterator[135820])
        }
      }
      { scopeless type
        (135834 'move' _indexOfInterest[135819](135831 call iteratorIndex _iterator[135820]))
      }
      ForLoop[135821]
      {
        unknown ind[135838] "index var" "insert auto destroy"
        (135840 'move' ind[135838] _indexOfInterest[135819])
        (135816 call -= sd ind)
        label _continueLabel[135824]
        _indexOfInterest[135819]
        _iterator[135820]
      }
      label _breakLabel[135825]
    }
  }
  where {
    (135810 call &&(135798 call &&(135787 call isSparseDom sd)(135796 call ==(135789 call . d c"rank")(135793 call . sd c"rank")))(135808 call ==(135801 call . sd c"idxType")(135805 call . d c"idxType")))
  }
  function isCollapsedDimension[135872](arg r[135869] :
  (135868 call range unknown e[135859] unknown b[135862] unknown s[135864] unknown a[135866])) param : _unknown[51] "no doc"
  {
    (135875 return 0)
  }
  function isCollapsedDimension[135884](arg r[135882]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (135887 return 1)
  }
  function chpl__anyStridable[135896](arg ranges[135894]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[135923] 0
      unknown tmp[135924] "maybe param" "temp"
      (135936 'move' tmp[135924](135934 call chpl_compute_low_param_loop_bound 0(135904 call -(135900 call . ranges c"size") 1)))
      unknown tmp[135925] "maybe param" "temp"
      (135949 'move' tmp[135925](135947 call chpl_compute_high_param_loop_bound 0(135941 call -(135943 call . ranges c"size") 1)))
      unknown tmp[135926] "maybe param" "temp"
      (135952 'move' tmp[135926] 1)
      ParamForLoop[135954]
      { i[135923] tmp[135924] tmp[135925] tmp[135926]
        if(135918 call _cond_test(135912 call .(135911 call ranges i) c"stridable"))
        {
          (135916 return 1)
        }
      }
      label _unused_continueLabel[135928]
      label _breakLabel[135927]
    }
    (135965 return 0)
  }
  function chpl__anyRankChangeStridable[135973](arg args[135971]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[136012] 0
      unknown tmp[136013] "maybe param" "temp"
      (136025 'move' tmp[136013](136023 call chpl_compute_low_param_loop_bound 0(135981 call -(135977 call . args c"size") 1)))
      unknown tmp[136014] "maybe param" "temp"
      (136038 'move' tmp[136014](136036 call chpl_compute_high_param_loop_bound 0(136030 call -(136032 call . args c"size") 1)))
      unknown tmp[136015] "maybe param" "temp"
      (136041 'move' tmp[136015] 1)
      ParamForLoop[136043]
      { i[136012] tmp[136013] tmp[136014] tmp[136015]
        if(136007 call _cond_test(135991 call isRangeValue(135989 call args i)))
        {
          if(136002 call _cond_test(135996 call .(135995 call args i) c"stridable"))
          {
            (136000 return 1)
          }
        }
      }
      label _unused_continueLabel[136017]
      label _breakLabel[136016]
    }
    (136054 return 0)
  }
  function chpl__countRanges[136062](arg arg[136060]:_any[178](?)) param : _unknown[51]
  {
    (136071 return(136069 call _cast int[13](136067 call isRangeValue arg)))
  }
  function chpl__countRanges[136080](arg arg[136078]:_any[178](?), arg args[136083]:_any[178](?) ...) param : _unknown[51]
  {
    (136097 return(136095 call +(136089 call chpl__countRanges arg)(136094 call chpl__countRanges(136092 'expand_tuple' args))))
  }
  function _validRankChangeArgs[136106](arg args[136104]:_any[178](?), arg idxType[136108]:_any[178](?)) param : _unknown[51]
  {
    function _validRankChangeArg[136114](arg idxType[136112]:_any[178](?), arg r[136120] :
    (136119 call range ?[260])) param : _unknown[51]
    {
      (136124 return 1)
    }
    function _validRankChangeArg[136134](arg idxType[136132]:_any[178](?), arg i[136137] :
    idxType) param : _unknown[51]
    {
      (136141 return 1)
    }
    function _validRankChangeArg[136150](arg idxType[136148]:_any[178](?), arg x[136152]:_any[178](?)) param : _unknown[51]
    {
      (136155 return 0)
    }
    function allValid[136162]() param : _unknown[51]
    {
      {
        unknown dim[136193] 0
        unknown tmp[136194] "maybe param" "temp"
        (136206 'move' tmp[136194](136204 call chpl_compute_low_param_loop_bound 0(136170 call -(136166 call . args c"size") 1)))
        unknown tmp[136195] "maybe param" "temp"
        (136219 'move' tmp[136195](136217 call chpl_compute_high_param_loop_bound 0(136211 call -(136213 call . args c"size") 1)))
        unknown tmp[136196] "maybe param" "temp"
        (136222 'move' tmp[136196] 1)
        ParamForLoop[136224]
        { dim[136193] tmp[136194] tmp[136195] tmp[136196]
          {
            if(136187 call _cond_test(136182 call !(136181 call _validRankChangeArg idxType(136180 call args dim))))
            {
              (136185 return 0)
            }
          }
        }
        label _unused_continueLabel[136198]
        label _breakLabel[136197]
      }
      (136235 return 1)
    }
    function oneRange[136241]() param : _unknown[51]
    {
      {
        unknown dim[136269] 0
        unknown tmp[136270] "maybe param" "temp"
        (136282 'move' tmp[136270](136280 call chpl_compute_low_param_loop_bound 0(136249 call -(136245 call . args c"size") 1)))
        unknown tmp[136271] "maybe param" "temp"
        (136295 'move' tmp[136271](136293 call chpl_compute_high_param_loop_bound 0(136287 call -(136289 call . args c"size") 1)))
        unknown tmp[136272] "maybe param" "temp"
        (136298 'move' tmp[136272] 1)
        ParamForLoop[136300]
        { dim[136269] tmp[136270] tmp[136271] tmp[136272]
          {
            if(136263 call _cond_test(136259 call isRange(136257 call args dim)))
            {
              (136261 return 1)
            }
          }
        }
        label _unused_continueLabel[136274]
        label _breakLabel[136273]
      }
      (136311 return 0)
    }
    function oneNonRange[136317]() param : _unknown[51]
    {
      {
        unknown dim[136347] 0
        unknown tmp[136348] "maybe param" "temp"
        (136360 'move' tmp[136348](136358 call chpl_compute_low_param_loop_bound 0(136325 call -(136321 call . args c"size") 1)))
        unknown tmp[136349] "maybe param" "temp"
        (136373 'move' tmp[136349](136371 call chpl_compute_high_param_loop_bound 0(136365 call -(136367 call . args c"size") 1)))
        unknown tmp[136350] "maybe param" "temp"
        (136376 'move' tmp[136350] 1)
        ParamForLoop[136378]
        { dim[136347] tmp[136348] tmp[136349] tmp[136350]
          {
            if(136341 call _cond_test(136336 call !(136335 call isRange(136333 call args dim))))
            {
              (136339 return 1)
            }
          }
        }
        label _unused_continueLabel[136352]
        label _breakLabel[136351]
      }
      (136389 return 0)
    }
    (136406 return(136404 call &&(136399 call &&(136395 call allValid)(136398 call oneRange))(136403 call oneNonRange)))
  }
  function =[136416](ref arg a[136413] :
  _distribution, arg b[136419] :
  _distribution) : _unknown[51] "assignop" "no return value for void"
  {
    if(136576 call _cond_test(136427 call ==(136423 call . a c"_value") nil[44]))
    {
      (136441 'move' a(136440 call chpl__autoCopy(136438 call(136434 call . b c"clone"))))
    }
    {
      if(136572 call _cond_test(136457 call ==(136453 call .(136450 call .(136445 call . a c"_value") c"_doms") c"size") 0))
      {
        if(136492 call _cond_test(136469 call !=(136463 'typeof'(136460 call . a c"_value"))(136468 'typeof'(136465 call . b c"_value"))))
        {
          (136490 call compilerError "type mismatch in distribution assignment")
        }
        if(136525 call _cond_test(136506 call ==(136499 call . a c"_value")(136503 call . b c"_value")))
        {
        }
        {
          (136523 call(136515 call .(136510 call . a c"_value") c"dsiAssign")(136519 call . b c"_value"))
        }
        if(136545 call _cond_test(136536 call _isPrivatized(136532 call . a c"_instance")))
        {
          (136543 call _reprivatize(136539 call . a c"_value"))
        }
      }
      {
        (136569 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
  }
  function =[136590](ref arg a[136587] :
  _domain, arg b[136593] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    if(136627 call _cond_test(136604 call !=(136597 call . a c"rank")(136601 call . b c"rank")))
    {
      (136625 call compilerError "rank mismatch in domain assignment")
    }
    if(136664 call _cond_test(136641 call !=(136634 call . a c"idxType")(136638 call . b c"idxType")))
    {
      (136662 call compilerError "index type mismatch in domain assignment")
    }
    if(136719 call _cond_test(136677 call &&(136672 call isRectangularDom a)(136676 call isRectangularDom b)))
    {
      if(136714 call _cond_test(136689 call &&(136683 call !(136680 call . a c"stridable"))(136686 call . b c"stridable")))
      {
        (136712 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    (136735 call(136728 call .(136725 call . a c"_instance") c"dsiAssignDomain") b(lhsPrivate = 0))
    if(136753 call _cond_test(136743 call _isPrivatized(136739 call . a c"_instance")))
    {
      (136750 call _reprivatize(136746 call . a c"_instance"))
    }
  }
  function chpl__isLegalRectTupDomAssign[136763](arg d[136761]:_any[178](?), arg t[136765]:_any[178](?)) param : _unknown[51]
  {
    function isRangeTuple[136771](arg a[136769]:_any[178](?)) param : _unknown[51]
    {
      function peelArgs[136777](arg first[136775]:_any[178](?), arg rest[136780]:_any[178](?) ...) param : _unknown[51]
      {
        (136817 return(136814 IfExpr (136788 call >(136784 call . rest c"size") 1) then
        { scopeless
          (136799 call &&(136793 call isRange first)(136798 call peelArgs(136796 'expand_tuple' rest)))
        } else
        { scopeless
          (136812 call &&(136804 call isRange first)(136811 call isRange(136809 call rest 0)))
        } ))
      }
      function peelArgs[136827](arg first[136825]:_any[178](?)) param : _unknown[51]
      {
        (136833 return(136832 call isRange first))
      }
      (136853 return(136850 IfExpr (136842 call !(136841 call isTuple a)) then
      { scopeless
        0
      } else
      { scopeless
        (136849 call peelArgs(136847 'expand_tuple' a))
      } ))
    }
    function strideSafe[136862](arg d[136860]:_any[178](?), arg rt[136864]:_any[178](?), param arg dim[136868] :
    int[13] =
    0) param : _unknown[51]
    {
      (136938 return(136935 IfExpr (136880 call == dim(136878 call -(136874 call . d c"rank") 1)) then
      { scopeless
        (136901 call ||(136889 call .(136888 call(136883 call . d c"dim") dim) c"stridable")(136899 call !(136896 call .(136895 call rt dim) c"stridable")))
      } else
      { scopeless
        (136933 call &&(136922 call ||(136910 call .(136909 call(136904 call . d c"dim") dim) c"stridable")(136920 call !(136917 call .(136916 call rt dim) c"stridable")))(136932 call strideSafe d rt(136930 call + dim 1)))
      } ))
    }
    (136966 return(136964 call &&(136957 call &&(136946 call isRangeTuple t)(136955 call ==(136948 call . d c"rank")(136952 call . t c"size")))(136963 call strideSafe d t)))
  }
  function =[136976](ref arg a[136973] :
  _domain, arg b[136979] :
  _tuple) : _unknown[51] "assignop" "no return value for void"
  {
    if(137070 call _cond_test(136986 call chpl__isLegalRectTupDomAssign a b))
    {
      (136993 call = a(136991 call chpl__buildDomainExpr(136989 'expand_tuple' b)))
    }
    {
      (137002 call(136998 call . a c"clear"))
      {
        unknown _indexOfInterest[137027] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137028] "expr temp" "temp"
        (137037 'move' _iterator[137028](137035 call _getIterator(137047 call chpl_direct_counted_range_iter 0(137043 call . b c"size"))))
        Defer
        {
          {
            (137063 call _freeIterator _iterator[137028])
          }
        }
        { scopeless type
          (137052 'move' _indexOfInterest[137027](137049 call iteratorIndex _iterator[137028]))
        }
        ForLoop[137029]
        {
          unknown ind[137056] "index var" "insert auto destroy"
          (137058 'move' ind[137056] _indexOfInterest[137027])
          {
            (137024 call(137016 call . a c"add")(137022 call b ind))
          }
          label _continueLabel[137032]
          _indexOfInterest[137027]
          _iterator[137028]
        }
        label _breakLabel[137033]
      }
    }
  }
  function =[137083](ref arg d[137080] :
  _domain, arg r[137089] :
  (137088 call range ?[260])) : _unknown[51] "assignop" "no return value for void"
  {
    (137097 call = d(137095 call chpl__buildDomainExpr r))
  }
  function =[137109](ref arg a[137106] :
  _domain, arg b[137111]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    if(137138 call _cond_test(137116 call isRectangularDom a))
    {
      (137136 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137149 call(137145 call . a c"clear"))
    {
      unknown _indexOfInterest[137162] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137163] "expr temp" "temp"
      (137172 'move' _iterator[137163](137170 call _getIterator b))
      Defer
      {
        {
          (137188 call _freeIterator _iterator[137163])
        }
      }
      { scopeless type
        (137177 'move' _indexOfInterest[137162](137174 call iteratorIndex _iterator[137163]))
      }
      ForLoop[137164]
      {
        unknown ind[137181] "index var" "insert auto destroy"
        (137183 'move' ind[137181] _indexOfInterest[137162])
        {
          (137159 call(137154 call . a c"add") ind)
        }
        label _continueLabel[137167]
        _indexOfInterest[137162]
        _iterator[137163]
      }
      label _breakLabel[137168]
    }
  }
  function chpl__serializeAssignment[137205](arg a[137202] :
  (137199 call chpl__buildArrayRuntimeType nil[44]), arg b[137207]:_any[178](?)) param : _unknown[51]
  {
    if(137225 call _cond_test(137220 call &&(137214 call !=(137210 call . a c"rank") 1)(137219 call isRange b)))
    {
      (137223 return 1)
    }
    if(137286 call _cond_test(137281 call ||(137251 call &&(137243 call &&(137235 call !(137234 call isRectangularArr a))(137241 call !(137240 call isAssociativeArr a)))(137249 call !(137248 call isSparseArr a)))(137279 call &&(137271 call &&(137263 call &&(137256 call isArray b)(137261 call !(137260 call isRectangularArr b)))(137269 call !(137268 call isAssociativeArr b)))(137277 call !(137276 call isSparseArr b)))))
    {
      (137284 return 1)
    }
    (137292 return 0)
  }
  function chpl__compatibleForBulkTransfer[137304](arg a[137301] :
  (137298 call chpl__buildArrayRuntimeType nil[44]), arg b[137309] :
  (137306 call chpl__buildArrayRuntimeType nil[44]), param arg kind[137313] :
  _tElt) param : _unknown[51]
  {
    if(137322 call _cond_test(137317 call ! useBulkTransfer))
    {
      (137320 return 0)
    }
    if(137341 call _cond_test(137336 call !=(137329 call . a c"eltType")(137333 call . b c"eltType")))
    {
      (137339 return 0)
    }
    if(137356 call _cond_test(137351 call == kind(137348 call . _tElt c"move")))
    {
      (137354 return 1)
    }
    if(137382 call _cond_test(137377 call &&(137368 call == kind(137365 call . _tElt c"initCopy"))(137376 call isConstCopyableType(137372 call . a c"eltType"))))
    {
      (137380 return 1)
    }
    if(137399 call _cond_test(137394 call !(137393 call chpl__supportedDataTypeForBulkTransfer(137389 call . a c"eltType"))))
    {
      (137397 return 0)
    }
    (137405 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137413](arg t[137411]:_any[178](?)) param : _unknown[51]
  {
    if(137477 call _cond_test(137425 call ||(354303 'is_subtype' borrowed[211](?) t)(354304 'is_subtype' unmanaged[220](?) t)))
    {
      (137428 return 0)
    }
    {
      if(137472 call _cond_test(137439 call ||(137434 call isRecordType t)(137438 call isTupleType t)))
      {
        (137445 return(137444 call isPODType t))
      }
      {
        if(137468 call _cond_test(137451 call isUnionType t))
        {
          (137453 return 0)
        }
        {
          unknown x[137457] "unsafe" t
          (137460 'end of statement')
          (137466 return(137465 call chpl__supportedDataTypeForBulkTransfer x))
        }
      }
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137491](arg x[137488] :
  string[26]) param : _unknown[51]
  {
    (137494 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137505](arg x[137502] :
  bytes[24]) param : _unknown[51]
  {
    (137508 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137519](arg x[137516] :
  _syncvar) param : _unknown[51]
  {
    (137522 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137533](arg x[137530] :
  _singlevar) param : _unknown[51]
  {
    (137536 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137547](arg x[137544] :
  _domain) param : _unknown[51]
  {
    (137550 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137563](arg x[137560] :
  (137557 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (137566 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137577](arg x[137574] :
  _distribution) param : _unknown[51]
  {
    (137580 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137591](arg x[137588] :
  locale[28]) param : _unknown[51]
  {
    (137594 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137605](arg x[137602] :
  chpl_anycomplex) param : _unknown[51]
  {
    (137608 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137620](arg x[137617] :
  (137616 'to borrowed class from unknown' object)) param : _unknown[51]
  {
    (137623 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137630]:_any[178](?)) param : _unknown[51]
  {
    (137635 return 1)
  }
  function checkArrayShapesUponAssignment[137648](arg a[137645] :
  (137642 call chpl__buildArrayRuntimeType nil[44]), arg b[137653] :
  (137650 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "no doc" "no return value for void"
  {
    if(137839 call _cond_test(137664 call &&(137659 call isRectangularArr a)(137663 call isRectangularArr b)))
    {
      const aDims[137678] "const"(137677 call(137673 call .(137670 call .(137667 call . a c"_value") c"dom") c"dsiDims"))
      const bDims[137693] "const"(137692 call(137688 call .(137685 call .(137682 call . b c"_value") c"dom") c"dsiDims"))
      (137696 'end of statement')
      (137710 call compilerAssert(137707 call ==(137700 call . aDims c"size")(137704 call . bDims c"size")))
      {
        unknown i[137798] 0
        unknown tmp[137799] "maybe param" "temp"
        (137811 'move' tmp[137799](137809 call chpl_compute_low_param_loop_bound 0(137718 call -(137714 call . aDims c"size") 1)))
        unknown tmp[137800] "maybe param" "temp"
        (137824 'move' tmp[137800](137822 call chpl_compute_high_param_loop_bound 0(137816 call -(137818 call . aDims c"size") 1)))
        unknown tmp[137801] "maybe param" "temp"
        (137827 'move' tmp[137801] 1)
        ParamForLoop[137829]
        { i[137798] tmp[137799] tmp[137800] tmp[137801]
          {
            if(137792 call _cond_test(137736 call !=(137726 call .(137725 call aDims i) c"size")(137733 call .(137732 call bDims i) c"size")))
            {
              (137790 call halt "assigning between arrays of different shapes in dimension " i ": "(137763 call .(137762 call aDims i) c"size") " vs. "(137787 call .(137786 call bDims i) c"size"))
            }
          }
        }
        label _unused_continueLabel[137803]
        label _breakLabel[137802]
      }
    }
    {
    }
  }
  function =[137854](ref arg a[137851] :
  (137848 call chpl__buildArrayRuntimeType nil[44]), arg b[137859] :
  (137856 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    if(137893 call _cond_test(137870 call !=(137863 call . a c"rank")(137867 call . b c"rank")))
    {
      (137891 call compilerError "rank mismatch in array assignment")
    }
    if(137908 call _cond_test(137904 call ==(137900 call . b c"_value") nil[44]))
    {
      (137906 return _void[55])
    }
    if(137926 call _cond_test(137921 call ==(137914 call . a c"_value")(137918 call . b c"_value")))
    {
      (137923 return _void[55])
    }
    if(137948 call _cond_test(137944 call &&(137935 call ==(137931 call . a c"size") 0)(137942 call ==(137938 call . b c"size") 0)))
    {
      (137946 return _void[55])
    }
    if(137960 call _cond_test boundsChecking)
    {
      (137958 call checkArrayShapesUponAssignment a b)
    }
    (137976 call chpl__uncheckedArrayTransfer a b(kind =(137972 call . _tElt c"assign")))
  }
  type _tElt[137987] def move[137981]:_tElt[137987] def initCopy[137983]:_tElt[137987] def assign[137985]:_tElt[137987]
  function needsInitWorkaround[137994](arg t[137992]:_any[178](?)) param : _unknown[51] "private"
  {
    (138015 return(138013 call ||(138006 call ||(354308 'is_subtype' _array t)(354309 'is_subtype' _domain t))(354310 'is_subtype' _distribution t)))
  }
  function initCopyAfterTransfer[138028](ref arg a[138025] :
  (138022 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    if(138094 call _cond_test(138036 call needsInitWorkaround(138032 call . a c"eltType")))
    {
      Forall {
        induction variables:
          
          unknown ai[138067] "index var" "insert auto destroy"
        iterated expressions:
          (138039 call . a c"_dom")
        shadow variables:
        other variables
          forall body
        {
          unknown aa[138046] "ref var"(138045 call a ai)
          (138049 'end of statement')
          unknown copy[138056] "no auto destroy" aa(138052 call . a c"eltType")
          (138059 'end of statement')
          (138064 '=' aa copy)
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138090] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          unknown copy[138078] "no auto destroy" aa(138074 call . a c"eltType")
          (138081 'end of statement')
          (138087 '=' aa copy)
        }
      }
    }
  }
  function fixRuntimeType[138105](arg eltType[138103]:_any[178](?), ref arg elt[138107]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138110] 0
    (138113 'end of statement')
    if(138243 call _cond_test(138125 call ||(354311 'is_subtype' _array eltType)(354312 'is_subtype' _domain eltType)))
    {
      if(138169 call _cond_test(354313 'is_subtype' _array eltType))
      {
        const lhsDomain[138136] "const" "ref var"(138135 call chpl__domainFromArrayRuntimeType eltType)
        (138139 'end of statement')
        const rhsDomain[138145] "const" "ref var"(138142 call . elt c"_dom")
        (138148 'end of statement')
        if(138165 call _cond_test(138157 call !=(138150 call . lhsDomain c"_instance")(138154 call . rhsDomain c"_instance")))
        {
          (138161 call = runtimeTypesDiffer 1)
        }
      }
      if(138216 call _cond_test(354314 'is_subtype' _domain eltType))
      {
        const lhsDist[138183] "const" "ref var"(138182 call chpl__distributionFromDomainRuntimeType eltType)
        (138186 'end of statement')
        const rhsDist[138192] "const" "ref var"(138189 call . elt c"dist")
        (138195 'end of statement')
        if(138212 call _cond_test(138204 call !=(138197 call . lhsDist c"_instance")(138201 call . rhsDist c"_instance")))
        {
          (138208 call = runtimeTypesDiffer 1)
        }
      }
      if(138239 call _cond_test runtimeTypesDiffer)
      {
        unknown copy[138223] "no auto destroy" elt eltType
        (138226 'end of statement')
        (138231 call chpl__autoDestroy elt)
        (138237 '=' elt copy)
      }
    }
  }
  function fixEltRuntimeTypesAfterTransfer[138257](ref arg a[138254] :
  (138251 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "private" "no return value for void"
  {
    if(138311 call _cond_test(138265 call needsInitWorkaround(138261 call . a c"eltType")))
    {
      Forall {
        induction variables:
          
          unknown ai[138290] "index var" "insert auto destroy"
        iterated expressions:
          (138268 call . a c"_dom")
        shadow variables:
        other variables
          forall body
        {
          unknown aa[138275] "ref var"(138274 call a ai)
          (138278 'end of statement')
          (138287 call fixRuntimeType(138282 call . a c"eltType") aa)
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138307] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          (138303 call fixRuntimeType(138298 call . a c"eltType") aa)
        }
      }
    }
  }
  function chpl__uncheckedArrayTransfer[138326](ref arg a[138323] :
  (138320 call chpl__buildArrayRuntimeType nil[44]), arg b[138331] :
  (138328 call chpl__buildArrayRuntimeType nil[44]), param arg kind[138334]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138337] 0
    (138340 'end of statement')
    if(138463 call _cond_test(138347 call !(138346 call chpl__serializeAssignment a b)))
    {
      if(138385 call _cond_test(138354 call chpl__compatibleForBulkTransfer a b kind))
      {
        (138361 call = done(138360 call chpl__bulkTransferArray a b))
      }
      {
        if(138381 call _cond_test(138370 call chpl__compatibleForWidePtrBulkTransfer a b kind))
        {
          (138377 call = done(138376 call chpl__bulkTransferPtrArray a b))
        }
      }
      if(138459 call _cond_test done)
      {
        if(138453 call _cond_test(138408 call &&(138397 call == kind(138394 call . _tElt c"initCopy"))(138406 call !(138405 call isPODType(138401 call . a c"eltType")))))
        {
          (138413 call initCopyAfterTransfer a)
        }
        {
          if(138449 call _cond_test(138441 call &&(138421 call == kind(138418 call . _tElt c"move"))(138439 call ||(354315 'is_subtype' _array(138425 call . a c"eltType"))(354316 'is_subtype' _domain(138433 call . a c"eltType")))))
          {
            (138446 call fixEltRuntimeTypesAfterTransfer a)
          }
        }
      }
    }
    if(138478 call _cond_test(138468 call ! done))
    {
      (138475 call chpl__transferArray a b kind)
    }
  }
  function chpl__compatibleForWidePtrBulkTransfer[138488](arg a[138486]:_any[178](?), arg b[138490]:_any[178](?), param arg kind[138496] =
  (138493 call . _tElt c"assign")) param : _unknown[51]
  {
    if(138505 call _cond_test(138500 call ! useBulkPtrTransfer))
    {
      (138503 return 0)
    }
    if(138536 call _cond_test(138531 call !(138529 call &&(138519 call(138515 call .(138512 call . a c"_value") c"isDefaultRectangular"))(138528 call(138524 call .(138521 call . b c"_value") c"isDefaultRectangular")))))
    {
      (138534 return 0)
    }
    if(138554 call _cond_test(138549 call !=(138542 call . a c"eltType")(138546 call . b c"eltType")))
    {
      (138552 return 0)
    }
    if(138571 call _cond_test(138566 call !(138565 call isClass(138561 call . a c"eltType"))))
    {
      (138569 return 0)
    }
    if(138586 call _cond_test(138582 call isOwnedClass(138578 call . a c"eltType")))
    {
      (138584 return 0)
    }
    if(138601 call _cond_test(138597 call isSharedClass(138593 call . a c"eltType")))
    {
      (138599 return 0)
    }
    (138607 return 1)
  }
  function chpl__bulkTransferPtrArray[138619](ref arg a[138616] :
  (138613 call chpl__buildArrayRuntimeType nil[44]), arg b[138624] :
  (138621 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline"
  {
    const aDom[138631] "const"(138628 call . a c"_dom")
    (138634 'end of statement')
    const bDom[138640] "const"(138637 call . b c"_dom")
    (138643 'end of statement')
    if(138651 call _cond_test(138646 call != aDom bDom))
    {
      (138649 return 0)
    }
    if(138692 call _cond_test(138681 'is wide pointer'(138680 call a(138676 call . aDom c"low"))))
    {
      (138689 return(138688 call chpl__bulkTransferArray a aDom b bDom))
    }
    (138697 return 0)
  }
  function chpl__bulkTransferArray[138711](ref arg a[138708] :
  (138706 call chpl__buildArrayRuntimeType unknown AD[138703]), arg b[138718] :
  (138716 call chpl__buildArrayRuntimeType unknown BD[138713])) : _unknown[51] "inline"
  {
    (138728 return(138727 call chpl__bulkTransferArray a AD b BD))
  }
  function chpl__bulkTransferArray[138741](ref arg a[138738] :
  (138735 call chpl__buildArrayRuntimeType nil[44]), arg AD[138744] :
  _domain, const  ref arg b[138750] :
  (138747 call chpl__buildArrayRuntimeType nil[44]), arg BD[138754] :
  _domain) : _unknown[51] "inline"
  {
    (138770 return(138769 call chpl__bulkTransferArray(138759 call . a c"_value") AD(138765 call . b c"_value") BD))
  }
  function chpl__bulkTransferArray[138779](arg destClass[138777]:_any[178](?), arg destDom[138782] :
  _domain, arg srcClass[138785]:_any[178](?), arg srcDom[138788] :
  _domain) : _unknown[51] "inline"
  {
    unknown success[138792] 0
    (138795 'end of statement')
    function bulkTransferDebug[138803](arg msg[138800] :
    string[26]) : _unknown[51] "inline" "no return value for void"
    {
      if(138828 call _cond_test debugBulkTransfer)
      {
        (138826 call chpl_debug_writeln "proc =(a:[],b:[]): " msg)
      }
    }
    (138855 call bulkTransferDebug "in chpl__bulkTransferArray")
    if(139119 call _cond_test(138883 call(138858 call . Reflection c"canResolveMethod") destClass "doiBulkTransferFromKnown" destDom srcClass srcDom))
    {
      (138903 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (138916 call = success(138915 call(138908 call . destClass c"doiBulkTransferFromKnown") destDom srcClass srcDom))
    }
    {
      if(139114 call _cond_test(138945 call(138920 call . Reflection c"canResolveMethod") srcClass "doiBulkTransferToKnown" srcDom destClass destDom))
      {
        (138965 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (138978 call = success(138977 call(138970 call . srcClass c"doiBulkTransferToKnown") srcDom destClass destDom))
      }
      {
        if(139109 call _cond_test(139007 call(138982 call . Reflection c"canResolveMethod") destClass "doiBulkTransferFromAny" destDom srcClass srcDom))
        {
          (139027 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (139040 call = success(139039 call(139032 call . destClass c"doiBulkTransferFromAny") destDom srcClass srcDom))
        }
        {
          if(139105 call _cond_test(139069 call(139044 call . Reflection c"canResolveMethod") srcClass "doiBulkTransferToAny" srcDom destClass destDom))
          {
            (139089 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (139102 call = success(139101 call(139094 call . srcClass c"doiBulkTransferToAny") srcDom destClass destDom))
          }
        }
      }
    }
    if(139167 call _cond_test success)
    {
      (139144 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139165 call bulkTransferDebug "bulk transfer did not happen")
    }
    (139174 return success)
  }
  function chpl__transferArray[139186](ref arg a[139183] :
  (139180 call chpl__buildArrayRuntimeType nil[44]), const  ref arg b[139188]:_any[178](?), param arg kind[139194] =
  (139191 call . _tElt c"assign")) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    if(140109 call _cond_test(139225 call ||(139209 call ==(139204 call . a c"eltType")(139208 'typeof' b))(139223 call &&(139217 call _isPrimitiveType(139213 call . a c"eltType"))(139222 call _isPrimitiveType(139220 'typeof' b)))))
    {
      if(139354 call _cond_test(139241 call ||(139232 call == kind(139229 call . _tElt c"move"))(139239 call == kind(139236 call . _tElt c"initCopy"))))
      {
        if(139319 call _cond_test(139249 call needsInitWorkaround(139245 call . a c"eltType")))
        {
          Forall {
            induction variables:
              
              unknown ai[139286] "index var" "insert auto destroy"
            iterated expressions:
              (139252 call . a c"_dom")
            shadow variables:
              b[139256] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown aa[139265] "ref var"(139264 call a ai)
              (139268 'end of statement')
              unknown copy[139275] "no auto destroy" b(139271 call . a c"eltType")
              (139278 'end of statement')
              (139283 '=' aa copy)
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139315] "index var" "insert auto destroy"
            iterated expressions:
              a
            shadow variables:
              b[139293] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown copy[139303] "no auto destroy" b(139299 call . a c"eltType")
              (139306 'end of statement')
              (139312 '=' aa copy)
            }
          }
        }
      }
      {
        if(139350 call _cond_test(139329 call == kind(139326 call . _tElt c"assign")))
        {
          Forall {
            induction variables:
              
              unknown aa[139346] "index var" "insert auto destroy"
            iterated expressions:
              a
            shadow variables:
              b[139334] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139341 call = aa b)
            }
          }
        }
      }
    }
    {
      if(140105 call _cond_test(139364 call chpl__serializeAssignment a b))
      {
        if(139851 call _cond_test(139370 call == kind(139367 call . _tElt c"move")))
        {
          if(139572 call _cond_test(139378 call needsInitWorkaround(139374 call . a c"eltType")))
          {
            {
              unknown _indexOfInterest[139434] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139435] "expr temp" "temp"
              (139453 'move' _iterator[139435](139390 call _build_tuple(139447 call _getIterator(139444 call . a c"_dom"))(139451 call _getIterator b)))
              Defer
              {
                {
                  (139483 call _freeIterator _iterator[139435])
                }
              }
              { scopeless type
                (139458 'move' _indexOfInterest[139434](139455 call iteratorIndex _iterator[139435]))
              }
              ForLoop[139436]
              {
                (139463 call _check_tuple_var_decl _indexOfInterest[139434] 2)
                unknown ai[139469] "index var" "insert auto destroy"
                (139471 'move' ai[139469](139467 call _indexOfInterest[139434] 0))
                unknown bb[139476] "index var" "insert auto destroy"
                (139478 'move' bb[139476](139474 call _indexOfInterest[139434] 1))
                {
                  unknown aa[139395] "ref var"(139394 call a ai)
                  (139398 'end of statement')
                  (139423 '=' aa(139422 'steal' bb))
                  (139432 call fixRuntimeType(139427 call . a c"eltType") aa)
                }
                label _continueLabel[139439]
                _indexOfInterest[139434]
                _iterator[139435]
              }
              label _breakLabel[139440]
            }
          }
          {
            {
              unknown _indexOfInterest[139519] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139520] "expr temp" "temp"
              (139534 'move' _iterator[139520](139499 call _build_tuple(139529 call _getIterator a)(139532 call _getIterator b)))
              Defer
              {
                {
                  (139564 call _freeIterator _iterator[139520])
                }
              }
              { scopeless type
                (139539 'move' _indexOfInterest[139519](139536 call iteratorIndex _iterator[139520]))
              }
              ForLoop[139521]
              {
                (139544 call _check_tuple_var_decl _indexOfInterest[139519] 2)
                unknown aa[139550] "index var" "insert auto destroy"
                (139552 'move' aa[139550](139548 call _indexOfInterest[139519] 0))
                unknown bb[139557] "index var" "insert auto destroy"
                (139559 'move' bb[139557](139555 call _indexOfInterest[139519] 1))
                {
                  (139507 '=' aa(139506 'steal' bb))
                  (139517 call fixRuntimeType(139512 call . a c"eltType") aa)
                }
                label _continueLabel[139524]
                _indexOfInterest[139519]
                _iterator[139520]
              }
              label _breakLabel[139525]
            }
          }
        }
        {
          if(139846 call _cond_test(139582 call == kind(139579 call . _tElt c"initCopy")))
          {
            if(139762 call _cond_test(139590 call needsInitWorkaround(139586 call . a c"eltType")))
            {
              {
                unknown _indexOfInterest[139627] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139628] "expr temp" "temp"
                (139646 'move' _iterator[139628](139602 call _build_tuple(139640 call _getIterator(139637 call . a c"_dom"))(139644 call _getIterator b)))
                Defer
                {
                  {
                    (139676 call _freeIterator _iterator[139628])
                  }
                }
                { scopeless type
                  (139651 'move' _indexOfInterest[139627](139648 call iteratorIndex _iterator[139628]))
                }
                ForLoop[139629]
                {
                  (139656 call _check_tuple_var_decl _indexOfInterest[139627] 2)
                  unknown ai[139662] "index var" "insert auto destroy"
                  (139664 'move' ai[139662](139660 call _indexOfInterest[139627] 0))
                  unknown bb[139669] "index var" "insert auto destroy"
                  (139671 'move' bb[139669](139667 call _indexOfInterest[139627] 1))
                  {
                    unknown aa[139607] "ref var"(139606 call a ai)
                    (139610 'end of statement')
                    unknown copy[139617] "no auto destroy" b(139613 call . a c"eltType")
                    (139620 'end of statement')
                    (139625 '=' aa copy)
                  }
                  label _continueLabel[139632]
                  _indexOfInterest[139627]
                  _iterator[139628]
                }
                label _breakLabel[139633]
              }
            }
            {
              {
                unknown _indexOfInterest[139709] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139710] "expr temp" "temp"
                (139724 'move' _iterator[139710](139692 call _build_tuple(139719 call _getIterator a)(139722 call _getIterator b)))
                Defer
                {
                  {
                    (139754 call _freeIterator _iterator[139710])
                  }
                }
                { scopeless type
                  (139729 'move' _indexOfInterest[139709](139726 call iteratorIndex _iterator[139710]))
                }
                ForLoop[139711]
                {
                  (139734 call _check_tuple_var_decl _indexOfInterest[139709] 2)
                  unknown aa[139740] "index var" "insert auto destroy"
                  (139742 'move' aa[139740](139738 call _indexOfInterest[139709] 0))
                  unknown bb[139747] "index var" "insert auto destroy"
                  (139749 'move' bb[139747](139745 call _indexOfInterest[139709] 1))
                  {
                    unknown copy[139698] "no auto destroy" b(139694 call . a c"eltType")
                    (139701 'end of statement')
                    (139707 '=' aa copy)
                  }
                  label _continueLabel[139714]
                  _indexOfInterest[139709]
                  _iterator[139710]
                }
                label _breakLabel[139715]
              }
            }
          }
          {
            if(139842 call _cond_test(139772 call == kind(139769 call . _tElt c"assign")))
            {
              {
                unknown _indexOfInterest[139789] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139790] "expr temp" "temp"
                (139804 'move' _iterator[139790](139782 call _build_tuple(139799 call _getIterator a)(139802 call _getIterator b)))
                Defer
                {
                  {
                    (139834 call _freeIterator _iterator[139790])
                  }
                }
                { scopeless type
                  (139809 'move' _indexOfInterest[139789](139806 call iteratorIndex _iterator[139790]))
                }
                ForLoop[139791]
                {
                  (139814 call _check_tuple_var_decl _indexOfInterest[139789] 2)
                  unknown aa[139820] "index var" "insert auto destroy"
                  (139822 'move' aa[139820](139818 call _indexOfInterest[139789] 0))
                  unknown bb[139827] "index var" "insert auto destroy"
                  (139829 'move' bb[139827](139825 call _indexOfInterest[139789] 1))
                  {
                    (139785 call = aa bb)
                  }
                  label _continueLabel[139794]
                  _indexOfInterest[139789]
                  _iterator[139790]
                }
                label _breakLabel[139795]
              }
            }
          }
        }
      }
      {
        if(140099 call _cond_test(139862 call == kind(139859 call . _tElt c"move")))
        {
          if(139956 call _cond_test(139870 call needsInitWorkaround(139866 call . a c"eltType")))
          {
            Forall {
              induction variables:
                
                unknown ai[139913] "index var" "insert auto destroy"
                
                unknown bb[139915] "index var" "insert auto destroy"
              iterated expressions:
                (139878 call . a c"_dom")
                b
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown aa[139888] "ref var"(139887 call a ai)
                  (139891 'end of statement')
                  (139900 '=' aa(139899 'steal' bb))
                  (139909 call fixRuntimeType(139904 call . a c"eltType") aa)
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139950] "index var" "insert auto destroy"
                
                unknown bb[139952] "index var" "insert auto destroy"
              iterated expressions:
                a
                b
              shadow variables:
              other variables
                forall body
              {
                {
                  (139936 '=' aa(139935 'steal' bb))
                  (139946 call fixRuntimeType(139941 call . a c"eltType") aa)
                }
              }
            }
          }
        }
        {
          if(140094 call _cond_test(139966 call == kind(139963 call . _tElt c"initCopy")))
          {
            if(140054 call _cond_test(139974 call needsInitWorkaround(139970 call . a c"eltType")))
            {
              Forall {
                induction variables:
                  
                  unknown ai[140014] "index var" "insert auto destroy"
                  
                  unknown bb[140016] "index var" "insert auto destroy"
                iterated expressions:
                  (139982 call . a c"_dom")
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[139992] "ref var"(139991 call a ai)
                    (139995 'end of statement')
                    unknown copy[140002] "no auto destroy" bb(139998 call . a c"eltType")
                    (140005 'end of statement')
                    (140010 '=' aa copy)
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140048] "index var" "insert auto destroy"
                  
                  unknown bb[140050] "index var" "insert auto destroy"
                iterated expressions:
                  a
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown copy[140035] "no auto destroy" bb(140031 call . a c"eltType")
                    (140038 'end of statement')
                    (140044 '=' aa copy)
                  }
                }
              }
            }
          }
          {
            if(140090 call _cond_test(140064 call == kind(140061 call . _tElt c"assign")))
            {
              Forall {
                induction variables:
                  
                  unknown aa[140084] "index var" "insert auto destroy"
                  
                  unknown bb[140086] "index var" "insert auto destroy"
                iterated expressions:
                  a
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140078 call = aa bb)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {
    (139201 call <=(139198 'lifetime_of' a)(139200 'lifetime_of' b))
  }
  function chpl__transferArray[140126](ref arg a[140123] :
  (140120 call chpl__buildArrayRuntimeType nil[44]), param arg b[140128]:_any[178](?), param arg kind[140134] =
  (140131 call . _tElt c"assign")) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140145] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140141 call = aa b)
      }
    }
  }
  function =[140159](ref arg a[140156] :
  (140153 call chpl__buildArrayRuntimeType nil[44]), arg b[140162] :
  _domain) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    if(140180 call _cond_test(140173 call !=(140166 call . a c"rank")(140170 call . b c"rank")))
    {
      (140178 call compilerError "rank mismatch in array assignment")
    }
    if(140217 call _cond_test(140194 call &&(140189 call isAssociativeDom b)(140193 call isRectangularArr a)))
    {
      (140215 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140226 call chpl__transferArray a b)
  }
  function =[140238](arg a[140235] :
  (140232 call chpl__buildArrayRuntimeType nil[44]), arg b[140244] :
  (140243 call range ?[260])) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    if(140281 call _cond_test(140252 call ==(140248 call . a c"rank") 1))
    {
      (140258 call chpl__transferArray a b)
    }
    {
      (140279 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
  }
  function =[140298](ref arg a[140295] :
  (140292 call chpl__buildArrayRuntimeType nil[44]), arg b[140300]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140306 call chpl__transferArray a b)
  }
  function helpInitArrFromTuple[140315](ref arg j[140313]:_any[178](?), param arg rank[140318] :
  int[13], ref arg a[140324] :
  (140321 call chpl__buildArrayRuntimeType nil[44]), arg b[140328] :
  _tuple, param arg kind[140332] :
  _tElt) : _unknown[51] "private" "no return value for void"
  {
    unknown idxType[140361] "type variable"(140345 call .(140342 call . a c"_dom") c"idxType")
    unknown strType[140358] "type variable"(140357 call chpl__signedType(140353 call .(140350 call . a c"_dom") c"intIdxType"))
    const stride[140384] "const"(140381 call .(140380 call(140369 call .(140366 call . a c"_dom") c"dim")(140377 call -(140373 call . a c"rank") rank)) c"stride")
    const start[140406] "const"(140403 call .(140402 call(140391 call .(140388 call . a c"_dom") c"dim")(140399 call -(140395 call . a c"rank") rank)) c"firstAsInt")
    (140409 'end of statement')
    if(140704 call _cond_test(140412 call == rank 1))
    {
      {
        unknown i[140569] 0
        unknown tmp[140570] "maybe param" "temp"
        (140582 'move' tmp[140570](140580 call chpl_compute_low_param_loop_bound 0(140420 call -(140416 call . b c"size") 1)))
        unknown tmp[140571] "maybe param" "temp"
        (140595 'move' tmp[140571](140593 call chpl_compute_high_param_loop_bound 0(140587 call -(140589 call . b c"size") 1)))
        unknown tmp[140572] "maybe param" "temp"
        (140598 'move' tmp[140572] 1)
        ParamForLoop[140600]
        { i[140569] tmp[140570] tmp[140571] tmp[140572]
          {
            (140448 call =(140433 call j(140430 call -(140426 call . a c"rank") rank))(140447 call chpl__intToIdx idxType(140445 call +(140439 call _cast strType start)(140443 call * i stride))))
            unknown dst[140456] "ref var"(140455 call a j)
            (140459 'end of statement')
            const src[140464] "const" "ref var"(140463 call b i)
            (140467 'end of statement')
            if(140564 call _cond_test(140473 call == kind(140470 call . _tElt c"move")))
            {
              if(140514 call _cond_test(140478 call isArray dst))
              {
                unknown newArr[140487] "no auto destroy" "no copy"(140486 call chpl__coerceMove(140481 call . a c"eltType") src)
                (140490 'end of statement')
                (140496 '=' dst newArr)
              }
              {
                (140502 '=' dst src)
                (140512 call fixRuntimeType(140507 call . a c"eltType") dst)
              }
            }
            {
              if(140559 call _cond_test(140524 call == kind(140521 call . _tElt c"initCopy")))
              {
                unknown copy[140531] "no auto destroy" src(140527 call . a c"eltType")
                (140534 'end of statement')
                (140540 '=' dst copy)
              }
              {
                if(140555 call _cond_test(140547 call == kind(140544 call . _tElt c"assign")))
                {
                  (140551 call = dst src)
                }
              }
            }
          }
        }
        label _unused_continueLabel[140574]
        label _breakLabel[140573]
      }
    }
    {
      {
        unknown i[140663] 0
        unknown tmp[140664] "maybe param" "temp"
        (140676 'move' tmp[140664](140674 call chpl_compute_low_param_loop_bound 0(140616 call -(140612 call . b c"size") 1)))
        unknown tmp[140665] "maybe param" "temp"
        (140689 'move' tmp[140665](140687 call chpl_compute_high_param_loop_bound 0(140681 call -(140683 call . b c"size") 1)))
        unknown tmp[140666] "maybe param" "temp"
        (140692 'move' tmp[140666] 1)
        ParamForLoop[140694]
        { i[140663] tmp[140664] tmp[140665] tmp[140666]
          {
            (140644 call =(140629 call j(140626 call -(140622 call . a c"rank") rank))(140643 call chpl__intToIdx idxType(140641 call +(140635 call _cast strType start)(140639 call * i stride))))
            (140661 call helpInitArrFromTuple j(140653 call - rank 1) a(140659 call b i) kind)
          }
        }
        label _unused_continueLabel[140668]
        label _breakLabel[140667]
      }
    }
  }
  {
    (140339 call <(140336 'lifetime_of' a)(140338 'lifetime_of' b))
  }
  function initArrFromTuple[140719](ref arg a[140716] :
  (140713 call chpl__buildArrayRuntimeType nil[44]), arg b[140722] :
  _tuple, param arg kind[140726] :
  _tElt) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140742](140740 call *(140730 call . a c"rank")(140737 call .(140734 call . a c"_dom") c"idxType"))
    (140745 'end of statement')
    (140757 call helpInitArrFromTuple j(140751 call . a c"rank") a b kind)
  }
  function =[140769](ref arg a[140766] :
  (140763 call chpl__buildArrayRuntimeType nil[44]), arg b[140772] :
  _tuple) : _unknown[51] "assignop" "no return value for void"
  {
    (140787 call initArrFromTuple a b(140784 call . _tElt c"assign"))
  }
  where {
    (140778 call isRectangularArr a)
  }
  function _desync[140799](arg t[140796] :
  _syncvar) type : _unknown[51]
  {
    unknown x[140802] t
    (140805 'end of statement')
    (140811 return(140808 call . x c"valType"))
  }
  function _desync[140821](arg t[140818] :
  _singlevar) type : _unknown[51]
  {
    unknown x[140824] t
    (140827 'end of statement')
    (140833 return(140830 call . x c"valType"))
  }
  function _desync[140841](arg t[140839]:_any[178](?)) type : _unknown[51]
  {
    (140844 return t)
  }
  function desyncEltType[140855](arg t[140852] :
  _array) type : _unknown[51] "private"
  {
    unknown eltType[140861] "type variable"(140860 call chpl__eltTypeFromArrayRuntimeType t)
    (140869 return(140868 call _desync eltType))
  }
  function =[140881](ref arg a[140878] :
  (140875 call chpl__buildArrayRuntimeType nil[44]), arg b[140890] :
  (140889 call _desync(140885 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140901] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140897 call = e b)
      }
    }
  }
  function +=[140915](arg a[140912] :
  (140909 call chpl__buildArrayRuntimeType nil[44]), arg b[140924] :
  (140923 call _desync(140919 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140935] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140931 call += e b)
      }
    }
  }
  function -=[140949](arg a[140946] :
  (140943 call chpl__buildArrayRuntimeType nil[44]), arg b[140958] :
  (140957 call _desync(140953 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140969] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140965 call -= e b)
      }
    }
  }
  function *=[140983](arg a[140980] :
  (140977 call chpl__buildArrayRuntimeType nil[44]), arg b[140992] :
  (140991 call _desync(140987 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141003] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140999 call *= e b)
      }
    }
  }
  function /=[141017](arg a[141014] :
  (141011 call chpl__buildArrayRuntimeType nil[44]), arg b[141026] :
  (141025 call _desync(141021 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141037] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141033 call /= e b)
      }
    }
  }
  function %=[141051](arg a[141048] :
  (141045 call chpl__buildArrayRuntimeType nil[44]), arg b[141060] :
  (141059 call _desync(141055 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141071] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141067 call %= e b)
      }
    }
  }
  function **=[141085](arg a[141082] :
  (141079 call chpl__buildArrayRuntimeType nil[44]), arg b[141094] :
  (141093 call _desync(141089 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141105] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141101 call **= e b)
      }
    }
  }
  function &=[141119](arg a[141116] :
  (141113 call chpl__buildArrayRuntimeType nil[44]), arg b[141128] :
  (141127 call _desync(141123 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141139] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141135 call &= e b)
      }
    }
  }
  function |=[141153](arg a[141150] :
  (141147 call chpl__buildArrayRuntimeType nil[44]), arg b[141162] :
  (141161 call _desync(141157 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141173] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141169 call |= e b)
      }
    }
  }
  function ^=[141187](arg a[141184] :
  (141181 call chpl__buildArrayRuntimeType nil[44]), arg b[141196] :
  (141195 call _desync(141191 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141207] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141203 call ^= e b)
      }
    }
  }
  function >>=[141221](arg a[141218] :
  (141215 call chpl__buildArrayRuntimeType nil[44]), arg b[141230] :
  (141229 call _desync(141225 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141241] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141237 call >>= e b)
      }
    }
  }
  function <<=[141255](arg a[141252] :
  (141249 call chpl__buildArrayRuntimeType nil[44]), arg b[141264] :
  (141263 call _desync(141259 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141275] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141271 call <<= e b)
      }
    }
  }
  function chpl_by[141287](arg a[141284] :
  _domain, arg b[141289]:_any[178](?)) : _unknown[51]
  {
    unknown r[141312](141310 call *(141292 call . a c"rank")(141309 call range(141300 call .(141297 call . a c"_value") c"idxType")(141305 call . BoundedRangeType c"bounded") 1))
    (141315 'end of statement')
    unknown t[141327](141326 call _makeIndexTuple(141319 call . a c"rank") b(expand = 1))
    (141330 'end of statement')
    {
      unknown i[141361] 0
      unknown tmp[141362] "maybe param" "temp"
      (141374 'move' tmp[141362](141372 call chpl_compute_low_param_loop_bound 0(141337 call -(141333 call . a c"rank") 1)))
      unknown tmp[141363] "maybe param" "temp"
      (141387 'move' tmp[141363](141385 call chpl_compute_high_param_loop_bound 0(141379 call -(141381 call . a c"rank") 1)))
      unknown tmp[141364] "maybe param" "temp"
      (141390 'move' tmp[141364] 1)
      ParamForLoop[141392]
      { i[141361] tmp[141362] tmp[141363] tmp[141364]
        (141358 call =(141344 call r i)(141356 call chpl_by(141351 call(141346 call . a c"dim") i)(141355 call t i)))
      }
      label _unused_continueLabel[141366]
      label _breakLabel[141365]
    }
    (141422 return(141401 'new'(141421 call _domain(141404 call . a c"dist")(141409 call . a c"rank")(141416 call .(141413 call . a c"_value") c"idxType") 1 r)))
  }
  function chpl_align[141432](arg a[141429] :
  _domain, arg b[141434]:_any[178](?)) : _unknown[51]
  {
    unknown r[141460](141458 call *(141437 call . a c"rank")(141457 call range(141445 call .(141442 call . a c"_value") c"idxType")(141450 call . BoundedRangeType c"bounded")(141454 call . a c"stridable")))
    (141463 'end of statement')
    unknown t[141475](141474 call _makeIndexTuple(141467 call . a c"rank") b(expand = 1))
    (141478 'end of statement')
    {
      unknown i[141509] 0
      unknown tmp[141510] "maybe param" "temp"
      (141522 'move' tmp[141510](141520 call chpl_compute_low_param_loop_bound 0(141485 call -(141481 call . a c"rank") 1)))
      unknown tmp[141511] "maybe param" "temp"
      (141535 'move' tmp[141511](141533 call chpl_compute_high_param_loop_bound 0(141527 call -(141529 call . a c"rank") 1)))
      unknown tmp[141512] "maybe param" "temp"
      (141538 'move' tmp[141512] 1)
      ParamForLoop[141540]
      { i[141509] tmp[141510] tmp[141511] tmp[141512]
        (141506 call =(141492 call r i)(141504 call chpl_align(141499 call(141494 call . a c"dim") i)(141503 call t i)))
      }
      label _unused_continueLabel[141514]
      label _breakLabel[141513]
    }
    (141573 return(141549 'new'(141572 call _domain(141552 call . a c"dist")(141557 call . a c"rank")(141564 call .(141561 call . a c"_value") c"idxType")(141568 call . a c"stridable") r)))
  }
  function <=>[141587](arg x[141584] :
  (141582 call chpl__buildArrayRuntimeType unknown xD[141579]), arg y[141594] :
  (141592 call chpl__buildArrayRuntimeType unknown yD[141589])) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141599] 0 bool[10]
    (141602 'end of statement')
    if(141689 call _cond_test(141658 call &&(141625 call &&(141614 call ==(141608 'typeof'(141605 call . x c"_value"))(141613 'typeof'(141610 call . y c"_value")))(141623 call !(141622 call chpl__isArrayView(141618 call . x c"_value"))))(141657 call(141628 call . Reflection c"canResolveMethod")(141632 call . x c"_value") "doiSwap"(141654 call . y c"_value"))))
    {
      if(141684 call _cond_test(141662 call == xD yD))
      {
        (141676 call(141668 call .(141665 call . x c"_value") c"doiSwap")(141672 call . y c"_value"))
        (141681 call = hasSwapped 1)
      }
    }
    if(141717 call _cond_test(141694 call ! hasSwapped))
    {
      Forall {
        induction variables:
          
          unknown a[141711] "index var" "insert auto destroy"
          
          unknown b[141713] "index var" "insert auto destroy"
        iterated expressions:
          x
          y
        shadow variables:
        other variables
          forall body
        {
          (141707 call <=> a b)
        }
      }
    }
  }
  function reshape[141731](arg A[141728] :
  (141725 call chpl__buildArrayRuntimeType nil[44]), arg D[141734] :
  _domain) : _unknown[51]
  {
    if(141769 call _cond_test(141741 call !(141740 call isRectangularDom D)))
    {
      (141767 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(141765 call _cast string[26](141763 'typeof' D)))
    }
    if(141848 call _cond_test(141783 call !=(141776 call . A c"size")(141780 call . D c"size")))
    {
      (141846 call halt "reshape(A,D) is invoked when A has "(141805 call . A c"size") " elements, but D has "(141826 call . D c"size") " indices")
    }
    unknown B[141880](141874 for (141866 call _build_tuple i a)  in  zip(141871 call _build_tuple D A) do
    {
      a
    } )(141861 call chpl__buildArrayRuntimeType(141859 call chpl__ensureDomainExpr D)(141856 call . A c"eltType"))
    (141883 'end of statement')
    (141885 return B)
  }
  function reshape[141895](arg A[141892] :
  _iteratorRecord, arg D[141898] :
  _domain) : _unknown[51] "no doc"
  {
    if(141917 call _cond_test(141905 call !(141904 call isRectangularDom D)))
    {
      (141915 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(141913 call _cast string[26](141911 'typeof' D)))
    }
    unknown B[141940](141934 for (141926 call _build_tuple i a)  in  zip(141931 call _build_tuple D A) do
    {
      a
    } )
    (141943 'end of statement')
    (141945 return B)
  }
  function linearize[141953](arg Xs[141951]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[141960] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141961] "expr temp" "temp"
      (141970 'move' _iterator[141961](141968 call _getIterator Xs))
      Defer
      {
        {
          (141986 call _freeIterator _iterator[141961])
        }
      }
      { scopeless type
        (141975 'move' _indexOfInterest[141960](141972 call iteratorIndex _iterator[141961]))
      }
      ForLoop[141962]
      {
        unknown x[141979] "index var" "insert auto destroy"
        (141981 'move' x[141979] _indexOfInterest[141960])
        (141958 yield x)
        label _continueLabel[141965]
        _indexOfInterest[141960]
        _iterator[141961]
      }
      label _breakLabel[141966]
    }
  }
  function chpl__unalias[142002](arg x[141999] :
  _domain) : _unknown[51] "inline" "unalias fn"
  {
    if(142024 call _cond_test(142017 call !=(142011 call _to_unmanaged(142009 'typeof'(142006 call . x c"_instance")))(142016 'typeof'(142013 call . x c"_instance"))))
    {
      (142022 call compilerError "Domain on borrow created")
    }
    if(142052 call _cond_test(142031 call . x c"_unowned"))
    {
      unknown ret[142035] "no auto destroy" x
      (142038 'end of statement')
      (142041 return ret)
    }
    {
      unknown ret[142044] "no copy" x
      (142047 'end of statement')
      (142050 return ret)
    }
  }
  function chpl__initCopy[142066](const  ref arg rhs[142063] :
  (142060 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "init copy fn"
  {
    unknown lhs[142074] "no copy"(142073 call chpl__coerceCopy(142070 'typeof' rhs) rhs)
    (142077 'end of statement')
    (142080 return lhs)
  }
  function chpl__autoCopy[142092](arg x[142089] :
  (142086 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "auto copy fn"
  {
    unknown b[142098] "no copy"(142097 call chpl__initCopy x)
    (142101 'end of statement')
    (142104 return b)
  }
  function chpl__coerceCopy[142114](arg dstType[142111] :
  _domain, arg rhs[142117] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown rhsIsLayout[142134] "param"(142133 call(142129 call .(142124 call .(142121 call . rhs c"dist") c"_value") c"dsiIsLayout"))
    (142137 'end of statement')
    unknown lhs[142140] dstType
    (142143 'end of statement')
    lhs
    (142148 call = lhs rhs)
    if(142191 call _cond_test(142166 call &&(142162 call(142158 call .(142155 call .(142152 call . lhs c"dist") c"_value") c"dsiIsLayout"))(142164 call ! rhsIsLayout)))
    {
      (142189 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (142197 return lhs)
  }
  function chpl__coerceMove[142207](arg dstType[142204] :
  _domain, in arg rhs[142210] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown rhsIsLayout[142225] "param"(142224 call(142220 call .(142217 call .(142214 call . rhs c"dist") c"_value") c"dsiIsLayout"))
    (142228 'end of statement')
    unknown lhs[142231] dstType
    (142234 'end of statement')
    lhs
    (142239 call = lhs rhs)
    if(142264 call _cond_test(142257 call &&(142253 call(142249 call .(142246 call .(142243 call . lhs c"dist") c"_value") c"dsiIsLayout"))(142255 call ! rhsIsLayout)))
    {
      (142262 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (142270 return lhs)
  }
  function chpl__coerceCopy[142280](arg dstType[142277] :
  _domain, arg rhs[142283] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142287] dstType
    (142290 'end of statement')
    lhs
    if(142315 call _cond_test(142298 call chpl__isLegalRectTupDomAssign lhs rhs))
    {
      (142305 call = lhs(142303 call chpl__buildDomainExpr(142301 'expand_tuple' rhs)))
    }
    {
      (142311 call = lhs rhs)
    }
    (142320 return lhs)
  }
  function chpl__coerceMove[142330](arg dstType[142327] :
  _domain, in arg rhs[142333] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142337] dstType
    (142340 'end of statement')
    lhs
    if(142365 call _cond_test(142348 call chpl__isLegalRectTupDomAssign lhs rhs))
    {
      (142355 call = lhs(142353 call chpl__buildDomainExpr(142351 'expand_tuple' rhs)))
    }
    {
      (142361 call = lhs rhs)
    }
    (142370 return lhs)
  }
  function chpl__coerceCopy[142380](arg dstType[142377] :
  _domain, arg rhs[142386] :
  (142385 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142390] dstType
    (142393 'end of statement')
    lhs
    (142402 call = lhs(142400 call chpl__buildDomainExpr rhs))
    (142406 return lhs)
  }
  function chpl__coerceMove[142416](arg dstType[142413] :
  _domain, in arg rhs[142422] :
  (142421 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142426] dstType
    (142429 'end of statement')
    lhs
    (142438 call = lhs(142436 call chpl__buildDomainExpr rhs))
    (142442 return lhs)
  }
  function chpl__coerceCopy[142452](arg dstType[142449] :
  _domain, arg rhs[142455] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142459] dstType
    (142462 'end of statement')
    if(142473 call _cond_test(142467 call isRectangularDom lhs))
    {
      (142471 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142483 call(142479 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142496] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142497] "expr temp" "temp"
      (142506 'move' _iterator[142497](142504 call _getIterator rhs))
      Defer
      {
        {
          (142522 call _freeIterator _iterator[142497])
        }
      }
      { scopeless type
        (142511 'move' _indexOfInterest[142496](142508 call iteratorIndex _iterator[142497]))
      }
      ForLoop[142498]
      {
        unknown ind[142515] "index var" "insert auto destroy"
        (142517 'move' ind[142515] _indexOfInterest[142496])
        {
          (142493 call(142488 call . lhs c"add") ind)
        }
        label _continueLabel[142501]
        _indexOfInterest[142496]
        _iterator[142497]
      }
      label _breakLabel[142502]
    }
    (142530 return lhs)
  }
  function chpl__coerceMove[142540](arg dstType[142537] :
  _domain, arg rhs[142543] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142547] dstType
    (142550 'end of statement')
    if(142561 call _cond_test(142555 call isRectangularDom lhs))
    {
      (142559 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142571 call(142567 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142585] "expr temp" "temp"
      (142594 'move' _iterator[142585](142592 call _getIterator rhs))
      Defer
      {
        {
          (142610 call _freeIterator _iterator[142585])
        }
      }
      { scopeless type
        (142599 'move' _indexOfInterest[142584](142596 call iteratorIndex _iterator[142585]))
      }
      ForLoop[142586]
      {
        unknown ind[142603] "index var" "insert auto destroy"
        (142605 'move' ind[142603] _indexOfInterest[142584])
        {
          (142581 call(142576 call . lhs c"add") ind)
        }
        label _continueLabel[142589]
        _indexOfInterest[142584]
        _iterator[142585]
      }
      label _breakLabel[142590]
    }
    (142618 return lhs)
  }
  function chpl__coerceCopy[142628](arg dstType[142625] :
  _domain, arg rhs[142630]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142633] dstType
    (142636 'end of statement')
    if(142647 call _cond_test(142641 call isRectangularDom lhs))
    {
      (142645 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142657 call(142653 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142670] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142671] "expr temp" "temp"
      (142680 'move' _iterator[142671](142678 call _getIterator rhs))
      Defer
      {
        {
          (142696 call _freeIterator _iterator[142671])
        }
      }
      { scopeless type
        (142685 'move' _indexOfInterest[142670](142682 call iteratorIndex _iterator[142671]))
      }
      ForLoop[142672]
      {
        unknown ind[142689] "index var" "insert auto destroy"
        (142691 'move' ind[142689] _indexOfInterest[142670])
        {
          (142667 call(142662 call . lhs c"add") ind)
        }
        label _continueLabel[142675]
        _indexOfInterest[142670]
        _iterator[142671]
      }
      label _breakLabel[142676]
    }
    (142704 return lhs)
  }
  function chpl__coerceMove[142714](arg dstType[142711] :
  _domain, in arg rhs[142716]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142719] dstType
    (142722 'end of statement')
    if(142733 call _cond_test(142727 call isRectangularDom lhs))
    {
      (142731 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142743 call(142739 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142756] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142757] "expr temp" "temp"
      (142766 'move' _iterator[142757](142764 call _getIterator rhs))
      Defer
      {
        {
          (142782 call _freeIterator _iterator[142757])
        }
      }
      { scopeless type
        (142771 'move' _indexOfInterest[142756](142768 call iteratorIndex _iterator[142757]))
      }
      ForLoop[142758]
      {
        unknown ind[142775] "index var" "insert auto destroy"
        (142777 'move' ind[142775] _indexOfInterest[142756])
        {
          (142753 call(142748 call . lhs c"add") ind)
        }
        label _continueLabel[142761]
        _indexOfInterest[142756]
        _iterator[142757]
      }
      label _breakLabel[142762]
    }
    (142790 return lhs)
  }
  function chpl__coerceCopy[142800](arg dstType[142797] :
  _array, arg rhs[142803] :
  _array) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[142810] "type variable"(142809 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[142818] "const" "ref var"(142817 call chpl__domainFromArrayRuntimeType dstType)
    (142821 'end of statement')
    unknown lhs[142831] "no copy" "unsafe"(142830 call(142823 call . dom c"buildArray") eltType(initElts = 0))
    (142834 'end of statement')
    if(142850 call _cond_test(142843 call !=(142836 call . lhs c"rank")(142840 call . rhs c"rank")))
    {
      (142848 call compilerError "rank mismatch in array assignment")
    }
    if(142903 call _cond_test(142859 call !(142858 call isCopyableType eltType)))
    {
      (142901 call compilerError "Cannot copy-initialize array because element type '"(142882 call _cast string[26] eltType) "' cannot be copy-initialized")
    }
    if(142977 call _cond_test(142913 call ==(142909 call . rhs c"_value") nil[44]))
    {
    }
    {
      if(142972 call _cond_test(142924 call ==(142917 call . lhs c"_value")(142921 call . rhs c"_value")))
      {
      }
      {
        if(142968 call _cond_test(142941 call &&(142932 call ==(142928 call . lhs c"size") 0)(142939 call ==(142935 call . rhs c"size") 0)))
        {
        }
        {
          if(142951 call _cond_test boundsChecking)
          {
            (142949 call checkArrayShapesUponAssignment lhs rhs)
          }
          (142966 call chpl__uncheckedArrayTransfer lhs rhs(kind =(142962 call . _tElt c"initCopy")))
        }
      }
    }
    (142992 call(142988 call .(142983 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (142995 return lhs)
  }
  function chpl__coerceMove[143005](arg dstType[143002] :
  _array, in arg rhs[143008] :
  _array) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143015] "type variable"(143014 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143023] "const" "ref var"(143022 call chpl__domainFromArrayRuntimeType dstType)
    (143026 'end of statement')
    unknown typeMismatch[143038] "param"(143036 call !=(143031 'typeof'(143028 call . rhs c"_instance"))(143035 call chpl__instanceTypeFromArrayRuntimeType dstType))
    (143041 'end of statement')
    unknown moveElts[143045] "param"(143043 call ! typeMismatch)
    (143048 'end of statement')
    if(143069 call _cond_test(143063 call && moveElts(143061 call ==(143051 call . dom c"_instance")(143058 call .(143055 call . rhs c"_dom") c"_instance"))))
    {
      (143066 return rhs)
    }
    unknown lhs[143082] "no copy" "unsafe"(143081 call(143074 call . dom c"buildArray") eltType(initElts = 0))
    (143085 'end of statement')
    if(143101 call _cond_test(143094 call !=(143087 call . lhs c"rank")(143091 call . rhs c"rank")))
    {
      (143099 call compilerError "rank mismatch in array assignment")
    }
    if(143188 call _cond_test(143111 call ==(143107 call . rhs c"_value") nil[44]))
    {
    }
    {
      if(143183 call _cond_test(143122 call ==(143115 call . lhs c"_value")(143119 call . rhs c"_value")))
      {
      }
      {
        if(143179 call _cond_test(143139 call &&(143130 call ==(143126 call . lhs c"size") 0)(143137 call ==(143133 call . rhs c"size") 0)))
        {
        }
        {
          if(143149 call _cond_test boundsChecking)
          {
            (143147 call checkArrayShapesUponAssignment lhs rhs)
          }
          unknown kind[143167] "param"(143164 IfExpr  moveElts then
          { scopeless
            (143157 call . _tElt c"move")
          } else
          { scopeless
            (143161 call . _tElt c"initCopy")
          } )
          (143170 'end of statement')
          (143177 call chpl__uncheckedArrayTransfer lhs rhs(kind = kind))
        }
      }
    }
    (143207 call _do_destroy_arr(143195 call . rhs c"_unowned")(143200 call . rhs c"_instance")(deinitElts =(143204 call ! moveElts)))
    (143217 call(143213 call .(143210 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143220 return lhs)
  }
  function chpl__coerceCopy[143230](arg dstType[143227] :
  _array, arg rhs[143233] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143240] "type variable"(143239 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143248] "const" "ref var"(143247 call chpl__domainFromArrayRuntimeType dstType)
    (143251 'end of statement')
    unknown lhs[143261] "no copy"(143260 call(143253 call . dom c"buildArray") eltType(initElts = 0))
    (143264 'end of statement')
    if(143280 call _cond_test(143273 call !=(143266 call . lhs c"rank")(143270 call . rhs c"rank")))
    {
      (143278 call compilerError "rank mismatch in array assignment")
    }
    if(143300 call _cond_test(143293 call &&(143288 call isAssociativeDom rhs)(143292 call isRectangularArr lhs)))
    {
      (143298 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    if(143332 call _cond_test(143309 call !(143308 call isPODType eltType)))
    {
      (143330 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143346 call chpl__transferArray lhs rhs(kind =(143342 call . _tElt c"initCopy")))
    (143356 call(143352 call .(143349 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143359 return lhs)
  }
  function chpl__coerceMove[143369](arg dstType[143366] :
  _array, in arg rhs[143372] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143379] "type variable"(143378 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143387] "const" "ref var"(143386 call chpl__domainFromArrayRuntimeType dstType)
    (143390 'end of statement')
    unknown lhs[143400] "no copy"(143399 call(143392 call . dom c"buildArray") eltType(initElts = 0))
    (143403 'end of statement')
    if(143419 call _cond_test(143412 call !=(143405 call . lhs c"rank")(143409 call . rhs c"rank")))
    {
      (143417 call compilerError "rank mismatch in array assignment")
    }
    if(143439 call _cond_test(143432 call &&(143427 call isAssociativeDom rhs)(143431 call isRectangularArr lhs)))
    {
      (143437 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    if(143455 call _cond_test(143448 call !(143447 call isPODType eltType)))
    {
      (143453 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143469 call chpl__transferArray lhs rhs(kind =(143465 call . _tElt c"initCopy")))
    (143479 call(143475 call .(143472 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143482 return lhs)
  }
  function chpl__coerceCopy[143492](arg dstType[143489] :
  _array, arg rhs[143498] :
  (143497 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143505] "type variable"(143504 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143513] "const" "ref var"(143512 call chpl__domainFromArrayRuntimeType dstType)
    (143516 'end of statement')
    unknown lhs[143526] "no copy"(143525 call(143518 call . dom c"buildArray") eltType(initElts = 0))
    (143529 'end of statement')
    if(143542 call _cond_test(143535 call !=(143531 call . lhs c"rank") 1))
    {
      (143540 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143556 call chpl__transferArray lhs rhs(kind =(143552 call . _tElt c"initCopy")))
    (143566 call(143562 call .(143559 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143569 return lhs)
  }
  function chpl__coerceMove[143579](arg dstType[143576] :
  _array, in arg rhs[143585] :
  (143584 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143592] "type variable"(143591 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143600] "const" "ref var"(143599 call chpl__domainFromArrayRuntimeType dstType)
    (143603 'end of statement')
    unknown lhs[143613] "no copy"(143612 call(143605 call . dom c"buildArray") eltType(initElts = 0))
    (143616 'end of statement')
    if(143629 call _cond_test(143622 call !=(143618 call . lhs c"rank") 1))
    {
      (143627 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143643 call chpl__transferArray lhs rhs(kind =(143639 call . _tElt c"initCopy")))
    (143653 call(143649 call .(143646 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143656 return lhs)
  }
  function chpl__coerceCopy[143666](arg dstType[143663] :
  _array, arg rhs[143669] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143676] "type variable"(143675 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143684] "const" "ref var"(143683 call chpl__domainFromArrayRuntimeType dstType)
    (143687 'end of statement')
    unknown lhs[143697] "no copy" "unsafe"(143696 call(143689 call . dom c"buildArray") eltType(initElts = 0))
    (143700 'end of statement')
    if(143728 call _cond_test(143705 call !(143704 call isRectangularArr lhs)))
    {
      (143726 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143741 call initArrFromTuple lhs rhs(143738 call . _tElt c"initCopy"))
    (143751 call(143747 call .(143744 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143754 return lhs)
  }
  function chpl__coerceMove[143764](arg dstType[143761] :
  _array, in arg rhs[143767] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143774] "type variable"(143773 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143782] "const" "ref var"(143781 call chpl__domainFromArrayRuntimeType dstType)
    (143785 'end of statement')
    unknown lhs[143795] "no copy" "unsafe"(143794 call(143787 call . dom c"buildArray") eltType(initElts = 0))
    (143798 'end of statement')
    if(143810 call _cond_test(143803 call !(143802 call isRectangularArr lhs)))
    {
      (143808 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143823 call initArrFromTuple lhs rhs(143820 call . _tElt c"move"))
    (143833 call(143829 call .(143826 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143836 return lhs)
  }
  function chpl__coerceCopy[143846](arg dstType[143843] :
  _array, arg rhs[143852] :
  (143851 call desyncEltType dstType)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143859] "type variable"(143858 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143867] "const" "ref var"(143866 call chpl__domainFromArrayRuntimeType dstType)
    (143870 'end of statement')
    unknown lhs[143880] "no copy" "unsafe"(143879 call(143872 call . dom c"buildArray") eltType(initElts = 0))
    (143883 'end of statement')
    Forall {
      induction variables:
        
        unknown e[143909] "index var" "insert auto destroy"
      iterated expressions:
        lhs
      shadow variables:
        rhs[143887] 'in' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[143897] "no auto destroy" rhs(143893 call . lhs c"eltType")
        (143900 'end of statement')
        (143906 '=' e copy)
      }
    }
    (143920 call(143916 call .(143913 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143923 return lhs)
  }
  function chpl__coerceMove[143933](arg dstType[143930] :
  _array, in arg rhs[143939] :
  (143938 call desyncEltType dstType)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143946] "type variable"(143945 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143954] "const" "ref var"(143953 call chpl__domainFromArrayRuntimeType dstType)
    (143957 'end of statement')
    unknown lhs[143967] "no copy" "unsafe"(143966 call(143959 call . dom c"buildArray") eltType(initElts = 0))
    (143970 'end of statement')
    Forall {
      induction variables:
        
        unknown e[143993] "index var" "insert auto destroy"
      iterated expressions:
        lhs
      shadow variables:
        rhs[143974] 'in' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[143981] "no auto destroy" rhs eltType
        (143984 'end of statement')
        (143990 '=' e copy)
      }
    }
    (144004 call(144000 call .(143997 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144007 return lhs)
  }
  function chpl__coerceCopy[144017](arg dstType[144014] :
  _array, arg rhs[144020] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144027] "type variable"(144026 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144035] "const" "ref var"(144034 call chpl__domainFromArrayRuntimeType dstType)
    (144038 'end of statement')
    unknown lhs[144048] "no copy" "unsafe"(144047 call(144040 call . dom c"buildArray") eltType(initElts = 0))
    (144051 'end of statement')
    (144061 call chpl__transferArray lhs rhs(kind =(144057 call . _tElt c"initCopy")))
    (144071 call(144067 call .(144064 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144074 return lhs)
  }
  function chpl__coerceMove[144084](arg dstType[144081] :
  _array, arg rhs[144087] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144094] "type variable"(144093 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144102] "const" "ref var"(144101 call chpl__domainFromArrayRuntimeType dstType)
    (144105 'end of statement')
    unknown lhs[144115] "no copy" "unsafe"(144114 call(144107 call . dom c"buildArray") eltType(initElts = 0))
    (144118 'end of statement')
    (144128 call chpl__transferArray lhs rhs(kind =(144124 call . _tElt c"move")))
    (144138 call(144134 call .(144131 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144141 return lhs)
  }
  function chpl__coerceCopy[144151](arg dstType[144148] :
  _array, arg rhs[144153]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144159] "type variable"(144158 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144167] "const" "ref var"(144166 call chpl__domainFromArrayRuntimeType dstType)
    (144170 'end of statement')
    unknown lhs[144180] "no copy" "unsafe"(144179 call(144172 call . dom c"buildArray") eltType(initElts = 0))
    (144183 'end of statement')
    (144193 call chpl__transferArray lhs rhs(kind =(144189 call . _tElt c"initCopy")))
    (144203 call(144199 call .(144196 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144206 return lhs)
  }
  function chpl__coerceMove[144216](arg dstType[144213] :
  _array, in arg rhs[144218]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144224] "type variable"(144223 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144232] "const" "ref var"(144231 call chpl__domainFromArrayRuntimeType dstType)
    (144235 'end of statement')
    unknown lhs[144245] "no copy" "unsafe"(144244 call(144237 call . dom c"buildArray") eltType(initElts = 0))
    (144248 'end of statement')
    (144258 call chpl__transferArray lhs rhs(kind =(144254 call . _tElt c"initCopy")))
    (144268 call(144264 call .(144261 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144271 return lhs)
  }
  function chpl__unref[144283](arg x[144280] :
  (144277 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[144293] "no auto destroy" x
    (144296 'end of statement')
    (144299 return ret)
  }
  where {
    (144291 call chpl__isArrayView(144287 call . x c"_value"))
  }
  function chpl__unref[144310](arg ir[144307] :
  _iteratorRecord) : _unknown[51] "no copy return" "unref fn"
  {
    unknown toArray[144316] "no auto destroy" "no copy"(144315 call chpl__initCopy ir)
    (144319 'end of statement')
    (144322 return toArray)
  }
  function chpl__unref[144334](arg x[144331] :
  (144328 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[144337] "no copy" x
    (144340 'end of statement')
    (144343 return ret)
  }
  function chpl__unalias[144355](arg x[144352] :
  (144349 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "unalias fn"
  {
    unknown isview[144388] "param"(144386 call ||(144375 call ||(144365 call(144361 call .(144358 call . x c"_value") c"isSliceArrayView"))(144374 call(144370 call .(144367 call . x c"_value") c"isRankChangeArrayView")))(144385 call(144381 call .(144378 call . x c"_value") c"isReindexArrayView")))
    (144391 'end of statement')
    if(144417 call _cond_test isview)
    {
      unknown ret[144395] "no auto destroy" x
      (144398 'end of statement')
      (144403 call chpl__autoDestroy x)
      (144406 return ret)
    }
    {
      unknown ret[144409] "no copy" x
      (144412 'end of statement')
      (144415 return ret)
    }
  }
  function chpl__initCopy[144429](arg ir[144426] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    unknown shape[144443](144435 'new'(144442 call _domain(144438 call . ir c"_shape_")))
    (144446 'end of statement')
    (144453 call =(144449 call . shape c"_unowned") 1)
    (144461 return(144460 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (144434 call chpl_iteratorHasDomainShape ir)
  }
  function chpl__initCopy[144472](arg ir[144469] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    unknown shape[144493] "insert auto destroy"(144491 call chpl__buildDomainExpr(144487 call . ir c"_shape_"))
    (144496 'end of statement')
    (144503 return(144502 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (144484 call &&(144477 call chpl_iteratorHasRangeShape ir)(144482 call !(144481 call chpl_iteratorFromForExpr ir)))
  }
  function chpl__initCopy_shapeHelp[144514](arg shape[144511] :
  _domain, arg ir[144517] :
  _iteratorRecord) : _unknown[51] "ignore transfer errors"
  {
    unknown result[144533] "no copy" "unsafe"(144532 call(144521 call . shape c"buildArray")(144528 call iteratorToArrayElementType(144526 'typeof' ir))(initElts = 0))
    (144536 'end of statement')
    if(144568 call _cond_test(144544 call isArray(144540 call . result c"eltType")))
    {
      (144566 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    if(144831 call _cond_test(144576 call chpl_iteratorFromForExpr ir))
    {
      if(144747 call _cond_test(144583 call needsInitWorkaround(144579 call . result c"eltType")))
      {
        {
          unknown _indexOfInterest[144616] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144617] "expr temp" "temp"
          (144635 'move' _iterator[144617](144595 call _build_tuple(144629 call _getIterator(144626 call . result c"_dom"))(144633 call _getIterator ir)))
          Defer
          {
            {
              (144665 call _freeIterator _iterator[144617])
            }
          }
          { scopeless type
            (144640 'move' _indexOfInterest[144616](144637 call iteratorIndex _iterator[144617]))
          }
          ForLoop[144618]
          {
            (144645 call _check_tuple_var_decl _indexOfInterest[144616] 2)
            unknown ri[144651] "index var" "insert auto destroy"
            (144653 'move' ri[144651](144649 call _indexOfInterest[144616] 0))
            unknown src[144658] "index var" "insert auto destroy"
            (144660 'move' src[144658](144656 call _indexOfInterest[144616] 1))
            {
              unknown r[144600] "ref var"(144599 call result ri)
              (144603 'end of statement')
              unknown copy[144606] "no auto destroy" src
              (144609 'end of statement')
              (144614 '=' r copy)
            }
            label _continueLabel[144621]
            _indexOfInterest[144616]
            _iterator[144617]
          }
          label _breakLabel[144622]
        }
      }
      {
        {
          unknown _indexOfInterest[144694] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144695] "expr temp" "temp"
          (144709 'move' _iterator[144695](144681 call _build_tuple(144704 call _getIterator result)(144707 call _getIterator ir)))
          Defer
          {
            {
              (144739 call _freeIterator _iterator[144695])
            }
          }
          { scopeless type
            (144714 'move' _indexOfInterest[144694](144711 call iteratorIndex _iterator[144695]))
          }
          ForLoop[144696]
          {
            (144719 call _check_tuple_var_decl _indexOfInterest[144694] 2)
            unknown r[144725] "index var" "insert auto destroy"
            (144727 'move' r[144725](144723 call _indexOfInterest[144694] 0))
            unknown src[144732] "index var" "insert auto destroy"
            (144734 'move' src[144732](144730 call _indexOfInterest[144694] 1))
            {
              unknown copy[144683] "no auto destroy" src
              (144686 'end of statement')
              (144692 '=' r copy)
            }
            label _continueLabel[144699]
            _indexOfInterest[144694]
            _iterator[144695]
          }
          label _breakLabel[144700]
        }
      }
    }
    {
      if(144826 call _cond_test(144758 call needsInitWorkaround(144754 call . result c"eltType")))
      {
        Forall {
          induction variables:
            
            unknown ri[144792] "index var" "insert auto destroy"
            
            unknown src[144794] "index var" "insert auto destroy"
          iterated expressions:
            (144765 call . result c"_dom")
            ir
          shadow variables:
          other variables
            forall body
          {
            unknown r[144775] "ref var"(144774 call result ri)
            (144778 'end of statement')
            unknown copy[144781] "no auto destroy" src
            (144784 'end of statement')
            (144789 '=' r copy)
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144820] "index var" "insert auto destroy"
            
            unknown src[144822] "index var" "insert auto destroy"
          iterated expressions:
            result
            ir
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144808] "no auto destroy" src
            (144811 'end of statement')
            (144817 '=' r copy)
          }
        }
      }
    }
    (144843 call(144839 call .(144836 call . result c"_value") c"dsiElementInitializationComplete"))
    (144846 return result)
  }
  function chpl__throwErrorUnchecked[144858](in arg e[144855] :
  (144853 call _owned Error)) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    (144861 'throw' e)
  }
  function chpl__initCopy[144872](arg ir[144869] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    unknown shapeful[144878] "param"(144877 call chpl_iteratorHasRangeShape ir)
    (144881 'end of statement')
    unknown r[144895](144892 IfExpr  shapeful then
    { scopeless
      (144885 call . ir c"_shape_")
    } else
    { scopeless
      (144890 call chpl_build_bounded_range 1 0)
    } )
    (144898 'end of statement')
    unknown i[144900] 0
    (144903 'end of statement')
    unknown size[144911](144909 call _cast size_t(144905 call . r c"size"))
    (144914 'end of statement')
    unknown elemType[144920] "type variable"(144919 call iteratorToArrayElementType(144917 'typeof' ir))
    unknown data[144928] nil[44](144926 call _ddata elemType)
    (144931 'end of statement')
    unknown callPostAlloc[144933] bool[10]
    (144936 'end of statement')
    unknown subloc[144938] c_sublocid_none
    (144941 'end of statement')
    if(144957 call _cond_test(144944 call > size 0))
    {
      (144953 call = data(144952 call _ddata_allocate_noinit elemType size callPostAlloc))
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145105] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145106] "expr temp" "temp"
          (145115 'move' _iterator[145106](145113 call _getIterator ir))
          Defer
          {
            {
              (145131 call _freeIterator _iterator[145106])
            }
          }
          { scopeless type
            (145120 'move' _indexOfInterest[145105](145117 call iteratorIndex _iterator[145106]))
          }
          ForLoop[145107]
          {
            unknown elt[145124] "index var" "insert auto destroy"
            (145126 'move' elt[145124] _indexOfInterest[145105])
            {
              unknown eltCopy[144968] "no auto destroy" "no copy"(144967 'try-expr'(144966 call chpl__initCopy elt))
              (144971 'end of statement')
              if(145087 call _cond_test(144975 call >= i size))
              {
                unknown oldSize[144978] size
                (144981 'end of statement')
                unknown oldData[144984] data
                (144987 'end of statement')
                if(145005 call _cond_test(144990 call == size 0))
                {
                  (144994 call = size 4)
                }
                {
                  (145002 call = size(145000 call * 2 size))
                }
                (145018 call = data(145017 call _ddata_allocate_noinit elemType size callPostAlloc))
                {
                  unknown _indexOfInterest[145041] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145042] "expr temp" "temp"
                  (145051 'move' _iterator[145042](145049 call _getIterator(145058 call chpl_direct_counted_range_iter 0 oldSize)))
                  Defer
                  {
                    {
                      (145074 call _freeIterator _iterator[145042])
                    }
                  }
                  { scopeless type
                    (145063 'move' _indexOfInterest[145041](145060 call iteratorIndex _iterator[145042]))
                  }
                  ForLoop[145043]
                  {
                    unknown i[145067] "index var" "insert auto destroy"
                    (145069 'move' i[145067] _indexOfInterest[145041])
                    {
                      (145038 '='(145033 call data i)(145037 call oldData i))
                    }
                    label _continueLabel[145046]
                    _indexOfInterest[145041]
                    _iterator[145042]
                  }
                  label _breakLabel[145047]
                }
                (145085 call _ddata_free oldData oldSize)
              }
              (145098 '='(145096 call data i) eltCopy)
              (145102 call += i 1)
            }
            label _continueLabel[145110]
            _indexOfInterest[145105]
            _iterator[145106]
          }
          label _breakLabel[145111]
        }
      }
    }
    Catch e : Error
    {
      unknown tmp[354318] "temp"(354321 'current error')
      unknown e[354324](354329 'new'(354327 call _owned(354325 'to non nilable class' tmp[354318])))
      {
        {
          unknown _indexOfInterest[145160] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145161] "expr temp" "temp"
          (145170 'move' _iterator[145161](145168 call _getIterator(145178 call chpl_direct_range_iter 0(145175 call - i 1) 1)))
          Defer
          {
            {
              (145194 call _freeIterator _iterator[145161])
            }
          }
          { scopeless type
            (145183 'move' _indexOfInterest[145160](145180 call iteratorIndex _iterator[145161]))
          }
          ForLoop[145162]
          {
            unknown j[145187] "index var" "insert auto destroy"
            (145189 'move' j[145187] _indexOfInterest[145160])
            {
              (145157 call chpl__autoDestroy(145155 call data j))
            }
            label _continueLabel[145165]
            _indexOfInterest[145160]
            _iterator[145161]
          }
          label _breakLabel[145166]
        }
        (145206 call _ddata_free data size)
        (145211 call chpl__throwErrorUnchecked e)
      }
    }
    if(145234 call _cond_test(145224 call && shapeful(145222 call < i(145219 call . r c"size"))))
    {
      (145231 call = r(145229 call # r i))
    }
    if(145263 call _cond_test(145240 call ! shapeful))
    {
      (145260 call = r(145257 IfExpr (145245 call == i 0) then
      { scopeless
        (145249 call chpl_build_bounded_range 1 0)
      } else
      { scopeless
        (145255 call #(145252 call chpl_build_low_bounded_range capturedIteratorLowBound) i)
      } ))
    }
    unknown D[145272] "insert auto destroy"(145270 call chpl__buildDomainExpr r)
    (145275 'end of statement')
    if(145405 call _cond_test(145278 call != data nil[44]))
    {
      if(145287 call _cond_test callPostAlloc)
      {
        (145285 call _ddata_allocate_postalloc data size)
      }
      unknown A[145311](145310 call(145296 call . D c"buildArrayWith")(145303 'typeof'(145302 call data 0)) data(145308 call _cast int[13] size))
      (145314 'end of statement')
      (145326 call chpl_decRefCountsForDomainsInArrayEltTypes(145317 call . A c"_value")(145325 'typeof'(145324 call data 0)))
      (145336 call =(145332 call .(145329 call . A c"_value") c"_decEltRefCounts") 0)
      (145358 'auto destroy runtime type' elemType)
      (145361 return A)
    }
    {
      (145370 call = data(145369 call _ddata_allocate_noinit elemType size callPostAlloc))
      if(145381 call _cond_test callPostAlloc)
      {
        (145379 call _ddata_allocate_postalloc data size)
      }
      unknown A[145398](145397 call(145387 call . D c"buildArrayWith") elemType data(145395 call _cast int[13] size))
      (145401 'end of statement')
      (145403 return A)
    }
  }
}