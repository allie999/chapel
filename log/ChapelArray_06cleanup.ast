AST dump for ChapelArray after pass cleanup.
Module use list: 

{
  (113680 'use' ChapelBase)
  (113684 'use' ChapelTuple)
  (113687 'use' ChapelLocale)
  (113690 'use' ArrayViewSlice)
  (113693 'use' ArrayViewRankChange)
  (113696 'use' ArrayViewReindex)
  (113699 'import' Reflection)
  (113702 'use' ChapelDebugPrint)
  (113705 'use' SysCTypes)
  unknown numPrivateObjects[113711] "no doc"(113710 call chpl__processorAtomicType int[13])
  (113714 'end of statement')
  unknown nullPid[113718] "no doc" "param"(113716 call - 1)
  (113721 'end of statement')
  unknown debugBulkTransfer[113723] "config" "no doc" "param" 0
  (113726 'end of statement')
  unknown useBulkTransfer[113728] "config" "no doc" "param" 1
  (113731 'end of statement')
  unknown useBulkTransferStride[113733] "config" "no doc" "param" 1
  (113736 'end of statement')
  unknown useBulkPtrTransfer[113738] "config" "no doc" "param" useBulkTransfer
  (113741 'end of statement')
  unknown PODValAccess[113743] "config" "no doc" "param" 1
  (113746 'end of statement')
  unknown useBulkTransferDist[113748] "config" "no doc" "param" 0
  (113751 'end of statement')
  unknown arrayAsVecGrowthFactor[113755] "config" "no doc" "param" 1.5
  (113758 'end of statement')
  unknown debugArrayAsVec[113760] "config" "no doc" "param" 0
  (113763 'end of statement')
  function _isPrivatized[113768](arg value[113766]:_any[178](?)) param : _unknown[51]
  {
    (113800 return(113798 call &&(113771 call ! _local)(113796 call ||(113784 call && _privatization(113783 call(113779 call .(113775 call postfix! value) c"dsiSupportsPrivatization")))(113795 call(113791 call .(113787 call postfix! value) c"dsiRequiresPrivatization")))))
  }
  function _newPrivatizedClass[113809](arg value[113807]:_any[178](?)) : _unknown[51]
  {
    const n[113821] "const"(113820 call(113815 call . numPrivateObjects c"fetchAdd") 1)
    (113824 'end of statement')
    const hereID[113830] "const"(113827 call . here c"id")
    (113833 'end of statement')
    const privatizeData[113842] "const"(113841 call(113837 call . value c"dsiGetPrivatizeData"))
    (113845 'end of statement')
    const tmp[113862] "const" "temp"
    (113864 'move' tmp[113862](113860 'deref'(113859 '_wide_get_locale'(113849 call Locales 0))))
    {
      (113857 call _newPrivatizedClassHelp value value n hereID privatizeData)
      (113867 'on block' 0 tmp[113862])
    }
    function _newPrivatizedClassHelp[113874](arg parentValue[113872]:_any[178](?), arg originalValue[113876]:_any[178](?), arg n[113878]:_any[178](?), arg hereID[113880]:_any[178](?), arg privatizeData[113882]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113885] originalValue
      (113888 'end of statement')
      if(113958 call _cond_test(113895 call != hereID(113892 call . here c"id")))
      {
        (113907 call = newValue(113906 call(113901 call . parentValue c"dsiPrivatize") privatizeData))
        (113931 'chpl_newPrivatizedClass' newValue n)
        (113940 call =(113936 call . newValue c"pid") n)
      }
      {
        (113947 'chpl_newPrivatizedClass' newValue n)
        (113955 call =(113951 call . newValue c"pid") n)
      }
      {
        const _cobeginCount[114045] "const" "end count" "temp"
        (114066 'move' _cobeginCount[114045](114063 call _endCountAlloc 1))
        (114058 call _upEndCount _cobeginCount[114045] 1 2)
        {
          if(113998 call _cond_test(113972 call !=(113968 call .(113965 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            const tmp[113990] "const" "temp"
            (113992 'move' tmp[113990](113988 'deref'(113987 '_wide_get_locale'(113975 call . chpl_localeTree c"left"))))
            {
              (113985 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
              (113995 'on block' 0 tmp[113990])
            }
          }
          (114048 call _downEndCount _cobeginCount[114045] nil[44])
          (114047 'cobegin block')
        }
        {
          if(114040 call _cond_test(114014 call !=(114010 call .(114007 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            const tmp[114032] "const" "temp"
            (114034 'move' tmp[114032](114030 'deref'(114029 '_wide_get_locale'(114017 call . chpl_localeTree c"right"))))
            {
              (114027 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
              (114037 'on block' 0 tmp[114032])
            }
          }
          (114054 call _downEndCount _cobeginCount[114045] nil[44])
          (114053 'cobegin block')
        }
        Defer
        {
          {
            (114069 call _endCountFree _cobeginCount[114045])
          }
        }
        (114074 call _waitEndCount _cobeginCount[114045] 1 2)
      }
    }
    (114082 return n)
  }
  { scopeless type
    int[13]
  }
  function _freePrivatizedClass[114093](arg pid[114090] :
  int[13], arg original[114096] :
  object) : _unknown[51] "no return value for void"
  {
    if(114106 call _cond_test(114102 call == pid nullPid))
    {
      (114104 return _void[55])
    }
    const tmp[114126] "const" "temp"
    (114128 'move' tmp[114126](114124 'deref'(114123 '_wide_get_locale'(114115 call Locales 0))))
    {
      {
        (114120 call _freePrivatizedClassHelp pid original)
      }
      (114131 'on block' 0 tmp[114126])
    }
    function _freePrivatizedClassHelp[114138](arg pid[114136]:_any[178](?), arg original[114140]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown prv[114148](114147 call chpl_getPrivatizedCopy(114144 'to unmanaged class from unknown' object) pid)
      (114151 'end of statement')
      if(114162 call _cond_test(114155 call != prv original))
      {
        (114159 call chpl__delete prv)
      }
      function chpl_clearPrivatizedClass[114173](arg pid[114170] :
      int[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
      }
      (114180 call chpl_clearPrivatizedClass pid)
      {
        const _cobeginCount[114255] "const" "end count" "temp"
        (114276 'move' _cobeginCount[114255](114273 call _endCountAlloc 1))
        (114268 call _upEndCount _cobeginCount[114255] 1 2)
        {
          if(114213 call _cond_test(114190 call !=(114186 call .(114183 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            const tmp[114205] "const" "temp"
            (114207 'move' tmp[114205](114203 'deref'(114202 '_wide_get_locale'(114193 call . chpl_localeTree c"left"))))
            {
              (114200 call _freePrivatizedClassHelp pid original)
              (114210 'on block' 0 tmp[114205])
            }
          }
          (114258 call _downEndCount _cobeginCount[114255] nil[44])
          (114257 'cobegin block')
        }
        {
          if(114250 call _cond_test(114227 call !=(114223 call .(114220 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            const tmp[114242] "const" "temp"
            (114244 'move' tmp[114242](114240 'deref'(114239 '_wide_get_locale'(114230 call . chpl_localeTree c"right"))))
            {
              (114237 call _freePrivatizedClassHelp pid original)
              (114247 'on block' 0 tmp[114242])
            }
          }
          (114264 call _downEndCount _cobeginCount[114255] nil[44])
          (114263 'cobegin block')
        }
        Defer
        {
          {
            (114279 call _endCountFree _cobeginCount[114255])
          }
        }
        (114284 call _waitEndCount _cobeginCount[114255] 1 2)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114298](arg value[114296]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const pid[114304] "const"(114301 call . value c"pid")
    (114307 'end of statement')
    const hereID[114313] "const"(114310 call . here c"id")
    (114316 'end of statement')
    const reprivatizeData[114325] "const"(114324 call(114320 call . value c"dsiGetReprivatizeData"))
    (114328 'end of statement')
    const tmp[114345] "const" "temp"
    (114347 'move' tmp[114345](114343 'deref'(114342 '_wide_get_locale'(114332 call Locales 0))))
    {
      (114340 call _reprivatizeHelp value value pid hereID reprivatizeData)
      (114350 'on block' 0 tmp[114345])
    }
    function _reprivatizeHelp[114357](arg parentValue[114355]:_any[178](?), arg originalValue[114359]:_any[178](?), arg pid[114361]:_any[178](?), arg hereID[114363]:_any[178](?), arg reprivatizeData[114365]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114368] originalValue
      (114371 'end of statement')
      if(114402 call _cond_test(114378 call != hereID(114375 call . here c"id")))
      {
        (114387 call = newValue(114386 call chpl_getPrivatizedCopy(114383 'typeof' newValue) pid))
        (114400 call(114394 call . newValue c"dsiReprivatize") parentValue reprivatizeData)
      }
      {
        const _cobeginCount[114485] "const" "end count" "temp"
        (114506 'move' _cobeginCount[114485](114503 call _endCountAlloc 1))
        (114498 call _upEndCount _cobeginCount[114485] 1 2)
        {
          if(114440 call _cond_test(114414 call !=(114410 call .(114407 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            const tmp[114432] "const" "temp"
            (114434 'move' tmp[114432](114430 'deref'(114429 '_wide_get_locale'(114417 call . chpl_localeTree c"left"))))
            {
              (114427 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
              (114437 'on block' 0 tmp[114432])
            }
          }
          (114488 call _downEndCount _cobeginCount[114485] nil[44])
          (114487 'cobegin block')
        }
        {
          if(114480 call _cond_test(114454 call !=(114450 call .(114447 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            const tmp[114472] "const" "temp"
            (114474 'move' tmp[114472](114470 'deref'(114469 '_wide_get_locale'(114457 call . chpl_localeTree c"right"))))
            {
              (114467 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
              (114477 'on block' 0 tmp[114472])
            }
          }
          (114494 call _downEndCount _cobeginCount[114485] nil[44])
          (114493 'cobegin block')
        }
        Defer
        {
          {
            (114509 call _endCountFree _cobeginCount[114485])
          }
        }
        (114514 call _waitEndCount _cobeginCount[114485] 1 2)
      }
    }
  }
  function _makeIndexTuple[114527](param arg rank[114525]:_any[178](?), arg t[114530] :
  _tuple, param arg expand[114535] :
  bool[10] =
  0) : _unknown[51]
  {
    (114547 return t)
  }
  where {
    (114544 call == rank(114541 call . t c"size"))
  }
  function _makeIndexTuple[114557](param arg rank[114555]:_any[178](?), arg t[114560] :
  _tuple, param arg expand[114565] :
  bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114595 call compilerError "index rank must match domain rank")
  }
  where {
    (114574 call != rank(114571 call . t c"size"))
  }
  function _makeIndexTuple[114605](param arg rank[114603]:_any[178](?), arg val[114608] :
  integral, param arg expand[114613] :
  bool[10] =
  0) : _unknown[51]
  {
    if(114707 call _cond_test(114622 call || expand(114620 call == rank 1)))
    {
      unknown t[114629](114627 call * rank(114626 'typeof' val))
      (114632 'end of statement')
      {
        unknown i[114649] 0
        unknown tmp[114650] "maybe param" "temp"
        (114662 'move' tmp[114650](114660 call chpl_compute_low_param_loop_bound 0(114637 call - rank 1)))
        unknown tmp[114651] "maybe param" "temp"
        (114672 'move' tmp[114651](114670 call chpl_compute_high_param_loop_bound 0(114667 call - rank 1)))
        unknown tmp[114652] "maybe param" "temp"
        (114675 'move' tmp[114652] 1)
        ParamForLoop[114677]
        { i[114649] tmp[114650] tmp[114651] tmp[114652]
          (114646 call =(114644 call t i) val)
        }
        label _unused_continueLabel[114654]
        label _breakLabel[114653]
      }
      (114687 return t)
    }
    {
      (114696 call compilerWarning(114693 call _cast string[26](114691 'typeof' val)))
      (114702 call compilerError "index rank must match domain rank")
      (114705 return val)
    }
  }
  function _newArray[114718](arg value[114716]:_any[178](?)) : _unknown[51] "no copy return"
  {
    if(114743 call _cond_test(114723 call _isPrivatized value))
    {
      (114733 return(114724 'new'(114732 call _array(114729 call _newPrivatizedClass value) value)))
    }
    {
      (114741 return(114735 'new'(114740 call _array nullPid value)))
    }
  }
  function _getDomain[114756](arg value[114754]:_any[178](?)) : _unknown[51]
  {
    if(114788 call _cond_test(114765 call !=(114762 call _to_unmanaged(114760 'typeof' value))(114764 'typeof' value)))
    {
      (114786 call compilerError "Domain on borrow created")
    }
    if(114821 call _cond_test(114797 call _isPrivatized value))
    {
      (114809 return(114798 'new'(114808 call _domain(114801 call . value c"pid") value(_unowned = 1))))
    }
    {
      (114819 return(114811 'new'(114818 call _domain nullPid value(_unowned = 1))))
    }
  }
  function _getDistribution[114833](arg value[114831]:_any[178](?)) : _unknown[51]
  {
    if(114862 call _cond_test(114838 call _isPrivatized value))
    {
      (114850 return(114839 'new'(114849 call _distribution(114842 call . value c"pid") value(_unowned = 1))))
    }
    {
      (114860 return(114852 'new'(114859 call _distribution nullPid value(_unowned = 1))))
    }
  }
  function chpl__buildDomainRuntimeType[114877](arg dist[114874] :
  _distribution, param arg rank[114880] :
  int[13], arg idxType[114884]:_any[178](?) =
  int[13], param arg stridable[114889] :
  bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    (114901 return(114893 'new'(114900 call _domain dist rank idxType stridable)))
  }
  function chpl__buildDomainRuntimeType[114912](arg dist[114909] :
  _distribution, arg idxType[114914]:_any[178](?), param arg parSafe[114918] :
  bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    (114929 return(114922 'new'(114928 call _domain dist idxType parSafe)))
  }
  function chpl__buildSparseDomainRuntimeType[114940](arg dist[114937] :
  _distribution, arg parentDom[114943] :
  _domain) type : _unknown[51] "runtime type init fn"
  {
    (114952 return(114946 'new'(114951 call _domain dist parentDom)))
  }
  function chpl__convertRuntimeTypeToValue[114963](arg dist[114960] :
  _distribution, param arg rank[114966] :
  int[13], arg idxType[114970]:_any[178](?) =
  int[13], param arg stridable[114974] :
  bool[10], param arg isNoInit[114978] :
  bool[10]) : _unknown[51]
  {
    (114989 return(114981 'new'(114988 call _domain dist rank idxType stridable)))
  }
  function chpl__convertRuntimeTypeToValue[115000](arg dist[114997] :
  _distribution, arg idxType[115002]:_any[178](?), param arg parSafe[115005] :
  bool[10], param arg isNoInit[115009] :
  bool[10]) : _unknown[51]
  {
    (115019 return(115012 'new'(115018 call _domain dist idxType parSafe)))
  }
  function chpl__convertRuntimeTypeToValue[115030](arg dist[115027] :
  _distribution, arg parentDom[115033] :
  _domain, param arg isNoInit[115037] :
  bool[10]) : _unknown[51]
  {
    (115046 return(115040 'new'(115045 call _domain dist parentDom)))
  }
  function chpl__convertValueToRuntimeType[115057](arg dom[115054] :
  _domain) type : _unknown[51]
  {
    (115096 return(115095 call chpl__buildDomainRuntimeType(115070 call . dom c"dist")(115078 call .(115075 call . dom c"_value") c"rank")(115085 call .(115082 call . dom c"_value") c"idxType")(115092 call .(115089 call . dom c"_value") c"stridable")))
  }
  where {
    (354325 'is_subtype' BaseRectangularDom(115064 'typeof'(115061 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[115108](arg dom[115105] :
  _domain) type : _unknown[51]
  {
    (115142 return(115141 call chpl__buildDomainRuntimeType(115121 call . dom c"dist")(115129 call .(115126 call . dom c"_value") c"idxType")(115138 call .(115133 call . dom c"_value") c"parSafe")))
  }
  where {
    (354326 'is_subtype' BaseAssociativeDom(115115 'typeof'(115112 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[115154](arg dom[115151] :
  _domain) type : _unknown[51]
  {
    (115181 return(115180 call chpl__buildSparseDomainRuntimeType(115167 call . dom c"dist")(115177 call .(115172 call . dom c"_value") c"parentDom")))
  }
  where {
    (354327 'is_subtype' BaseSparseDom(115161 'typeof'(115158 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[115193](arg dom[115190] :
  _domain) type : _unknown[51]
  {
    (115217 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (115221 return 0)
  }
  function chpl__buildArrayRuntimeType[115231](arg dom[115228] :
  _domain, arg eltType[115233]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    (115245 return(115244 call(115238 call . dom c"buildArray") eltType 1))
  }
  function chpl__convertRuntimeTypeToValue[115256](arg dom[115253] :
  _domain, arg eltType[115258]:_any[178](?), param arg isNoInit[115261] :
  bool[10]) : _unknown[51]
  {
    (115274 return(115273 call(115265 call . dom c"buildArray") eltType(115271 call ! isNoInit)))
  }
  function chpl__convertValueToRuntimeType[115287](arg arr[115284] :
  (115281 call chpl__buildArrayRuntimeType nil[44])) type : _unknown[51]
  {
    (115300 return(115299 call chpl__buildArrayRuntimeType(115291 call . arr c"_dom")(115296 call . arr c"eltType")))
  }
  function _getLiteralType[115309](arg t[115307]:_any[178](?)) type : _unknown[51]
  {
    if(115321 call _cond_test(115313 call != t c_string))
    {
      (115316 return t)
    }
    {
      (115319 return string[26])
    }
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115331] "config" "no doc" "param" "unset"
  (115334 'end of statement')
  unknown arrayLiteralLowBound[115336] "config" "no doc" "param" defaultLowBound
  (115339 'end of statement')
  unknown capturedIteratorLowBound[115341] "config" "no doc" "param" defaultLowBound
  (115344 'end of statement')
  function chpl__buildArrayExpr[115352](arg elems[115349]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    if(115423 call _cond_test(115365 call &&(115356 call == CHPL_WARN_DOMAIN_LITERAL "true")(115364 call isRange(115362 call elems 0))))
    {
      (115420 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    unknown elemType[115436] "type variable"(115435 call _getLiteralType(115433 'typeof'(115432 call elems 0)))
    unknown A[115451] "unsafe"(115449 call chpl__buildArrayRuntimeType(115447 call chpl__ensureDomainExpr(115443 call #(115440 call chpl_build_low_bounded_range arrayLiteralLowBound) k)) elemType)
    (115454 'end of statement')
    {
      unknown i[115574] 0
      unknown tmp[115575] "maybe param" "temp"
      (115587 'move' tmp[115575](115585 call chpl_compute_low_param_loop_bound 0(115458 call - k 1)))
      unknown tmp[115576] "maybe param" "temp"
      (115597 'move' tmp[115576](115595 call chpl_compute_high_param_loop_bound 0(115592 call - k 1)))
      unknown tmp[115577] "maybe param" "temp"
      (115600 'move' tmp[115577] 1)
      ParamForLoop[115602]
      { i[115574] tmp[115575] tmp[115576] tmp[115577]
        {
          unknown currType[115470] "type variable"(115469 call _getLiteralType(115467 'typeof'(115466 call elems i)))
          if(115556 call _cond_test(115476 call != currType elemType))
          {
            (115553 call compilerError(115550 call +(115544 call +(115525 call +(115519 call +(115500 call + "Array literal element "(115498 call _cast string[26] i)) " expected to be of type ")(115523 call _cast string[26] elemType)) " but is of type ")(115548 call _cast string[26] currType)))
          }
          (115571 call =(115566 call A(115563 call + i arrayLiteralLowBound))(115570 call elems i))
        }
      }
      label _unused_continueLabel[115579]
      label _breakLabel[115578]
    }
    (115612 return A)
  }
  function chpl__buildAssociativeArrayExpr[115623](arg elems[115620]:_any[178](?) ...) : _unknown[51]
  {
    unknown keyType[115633] "type variable"(115632 call _getLiteralType(115630 'typeof'(115629 call elems 0)))
    unknown valType[115645] "type variable"(115644 call _getLiteralType(115642 'typeof'(115641 call elems 1)))
    unknown D[115653](115651 call chpl__buildDomainRuntimeType defaultDist keyType)
    (115656 'end of statement')
    (115668 call(115660 call . D c"requestCapacity")(115665 call / k 2))
    unknown A[115677](115675 call chpl__buildArrayRuntimeType(115673 call chpl__ensureDomainExpr D) valType)
    (115680 'end of statement')
    {
      unknown i[115854] 0
      unknown tmp[115855] "maybe param" "temp"
      (115866 'move' tmp[115855](115864 call chpl_compute_low_param_loop_bound 0(115684 call - k 1)))
      unknown tmp[115856] "maybe param" "temp"
      (115876 'move' tmp[115856](115874 call chpl_compute_high_param_loop_bound 0(115871 call - k 1)))
      unknown tmp[115857] "maybe param" "temp"
      (115879 'move' tmp[115857] 2)
      ParamForLoop[115881]
      { i[115854] tmp[115855] tmp[115856] tmp[115857]
        {
          unknown elemKey[115695](115694 call elems i)
          (115698 'end of statement')
          unknown elemVal[115707](115706 call elems(115703 call + i 1))
          (115710 'end of statement')
          unknown elemKeyType[115716] "type variable"(115715 call _getLiteralType(115713 'typeof' elemKey))
          unknown elemValType[115724] "type variable"(115723 call _getLiteralType(115721 'typeof' elemVal))
          if(115780 call _cond_test(115729 call != elemKeyType keyType))
          {
            (115777 call compilerError(115774 call +(115768 call +(115765 call +(115759 call +(115756 call + "Associative array key element "(115754 call _cast string[26](115751 call / i 2))) " expected to be of type ")(115763 call _cast string[26] keyType)) " but is of type ")(115772 call _cast string[26] elemKeyType)))
          }
          if(115837 call _cond_test(115786 call != elemValType valType))
          {
            (115834 call compilerError(115831 call +(115825 call +(115822 call +(115816 call +(115813 call + "Associative array value element "(115811 call _cast string[26](115808 call / i 2))) " expected to be of type ")(115820 call _cast string[26] valType)) " but is of type ")(115829 call _cast string[26] elemValType)))
          }
          (115843 call += D elemKey)
          (115851 call =(115849 call A elemKey) elemVal)
        }
      }
      label _unused_continueLabel[115859]
      label _breakLabel[115858]
    }
    (115891 return A)
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115902](arg arr[115899] :
  (115898 'to unmanaged class from unknown' BaseArr), arg eltType[115904]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(115960 call _cond_test(115909 call isArrayType eltType))
    {
      (115917 call =(115913 call . arr c"_decEltRefCounts") 1)
      unknown arrayEltType[115925] "type variable"(115924 call chpl__eltTypeFromArrayRuntimeType eltType)
      const dom[115932] "const" "ref var"(115931 call chpl__domainFromArrayRuntimeType eltType)
      (115935 'end of statement')
      const dv[115940] "const"(115937 call . dom c"_instance")
      (115943 'end of statement')
      (115952 call(115947 call . dv c"add_containing_arr") arr)
      (115958 call chpl_incRefCountsForDomainsInArrayEltTypes arr arrayEltType)
    }
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115974](arg arr[115971] :
  (115970 'to unmanaged class from unknown' BaseArr), arg eltType[115976]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(116177 call _cond_test(115981 call isArrayType eltType))
    {
      if(116010 call _cond_test(115987 call ==(115983 call . arr c"_decEltRefCounts") 0))
      {
        (116008 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116020] "type variable"(116019 call chpl__eltTypeFromArrayRuntimeType eltType)
      const dom[116027] "const" "ref var"(116026 call chpl__domainFromArrayRuntimeType eltType)
      (116030 'end of statement')
      (116035 call chpl_decRefCountsForDomainsInArrayEltTypes arr arrayEltType)
      unknown removeDom[116049](116048 call(116043 call .(116038 call . dom c"_instance") c"remove_containing_arr") arr)
      (116052 'end of statement')
      if(116173 call _cond_test removeDom)
      {
        const tmp[116164] "const" "temp"
        (116166 'move' tmp[116164](116162 'deref'(116161 '_wide_get_locale'(116055 call . dom c"_instance"))))
        {
          {
            const inst[116062] "const"(116059 call . dom c"_instance")
            (116065 'end of statement')
            unknown tmp[116078] "temp"(116077 call(116073 call . inst c"remove"))
            (116085 call _check_tuple_var_decl tmp[116078] 2)
            unknown domToFree[116067](116079 call tmp[116078] 0)
            unknown distToRemove[116069](116082 call tmp[116078] 1)
            (116090 'end of statement')
            unknown distToFree[116095] nil[44](116093 'to unmanaged class from unknown'(116092 'to nilable class from type' BaseDist))
            (116098 'end of statement')
            if(116116 call _cond_test(116101 call != distToRemove nil[44]))
            {
              (116112 call = distToFree(116111 call(116107 call .(116105 call postfix! distToRemove) c"remove")))
            }
            if(116133 call _cond_test(116122 call != domToFree nil[44]))
            {
              (116131 call _delete_dom inst(116130 call _isPrivatized inst))
            }
            if(116156 call _cond_test(116140 call != distToFree nil[44]))
            {
              (116154 call _delete_dist(116144 call postfix! distToFree)(116153 call _isPrivatized(116149 call . inst c"dist")))
            }
          }
          (116169 'on block' 0 tmp[116164])
        }
      }
    }
  }
  function chpl__buildSubDomainType[116190](arg dom[116187] :
  _domain) type : _unknown[51]
  {
    (116196 return(116195 call chpl__convertValueToRuntimeType dom))
  }
  function chpl__isTupleOfRanges[116205](arg tup[116203]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[116236] 0
      unknown tmp[116237] "maybe param" "temp"
      (116249 'move' tmp[116237](116247 call chpl_compute_low_param_loop_bound 0(116213 call -(116209 call . tup c"size") 1)))
      unknown tmp[116238] "maybe param" "temp"
      (116262 'move' tmp[116238](116260 call chpl_compute_high_param_loop_bound 0(116254 call -(116256 call . tup c"size") 1)))
      unknown tmp[116239] "maybe param" "temp"
      (116265 'move' tmp[116239] 1)
      ParamForLoop[116267]
      { i[116236] tmp[116237] tmp[116238] tmp[116239]
        {
          if(116230 call _cond_test(116225 call !(116224 call isRangeType(116222 'typeof'(116221 call tup i)))))
          {
            (116228 return 0)
          }
        }
      }
      label _unused_continueLabel[116241]
      label _breakLabel[116240]
    }
    (116278 return 1)
  }
  function chpl__buildDomainExpr[116288](arg ranges[116285]:_any[178](?) ...) : _unknown[51]
  {
    unknown rank[116298] "param"(116295 call . ranges c"size")
    (116301 'end of statement')
    {
      unknown i[116352] 0
      unknown tmp[116353] "maybe param" "temp"
      (116365 'move' tmp[116353](116363 call chpl_compute_low_param_loop_bound 1(116306 call - rank 1)))
      unknown tmp[116354] "maybe param" "temp"
      (116375 'move' tmp[116354](116373 call chpl_compute_high_param_loop_bound 1(116370 call - rank 1)))
      unknown tmp[116355] "maybe param" "temp"
      (116378 'move' tmp[116355] 1)
      ParamForLoop[116380]
      { i[116352] tmp[116353] tmp[116354] tmp[116355]
        if(116347 call _cond_test(116324 call !=(116314 call .(116313 call ranges 0) c"idxType")(116321 call .(116320 call ranges i) c"idxType")))
        {
          (116345 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116357]
      label _breakLabel[116356]
    }
    {
      unknown i[116431] 0
      unknown tmp[116432] "maybe param" "temp"
      (116444 'move' tmp[116432](116442 call chpl_compute_low_param_loop_bound 0(116392 call - rank 1)))
      unknown tmp[116433] "maybe param" "temp"
      (116454 'move' tmp[116433](116452 call chpl_compute_high_param_loop_bound 0(116449 call - rank 1)))
      unknown tmp[116434] "maybe param" "temp"
      (116457 'move' tmp[116434] 1)
      ParamForLoop[116459]
      { i[116431] tmp[116432] tmp[116433] tmp[116434]
        if(116426 call _cond_test(116403 call !(116402 call isBoundedRange(116400 call ranges i))))
        {
          (116424 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116436]
      label _breakLabel[116435]
    }
    unknown d[116484](116482 call chpl__buildDomainRuntimeType defaultDist rank(116474 call .(116473 call ranges 0) c"idxType")(116480 call chpl__anyStridable ranges))
    (116487 'end of statement')
    (116496 call(116491 call . d c"setIndices") ranges)
    (116499 return d)
  }
  where {
    (116293 call chpl__isTupleOfRanges ranges)
  }
  function chpl__buildDomainExpr[116510](arg keys[116507]:_any[178](?) ...) : _unknown[51]
  {
    unknown count[116516] "param"(116513 call . keys c"size")
    (116519 'end of statement')
    unknown keyType[116529] "type variable"(116528 call _getLiteralType(116526 'typeof'(116525 call keys 0)))
    {
      unknown i[116607] 0
      unknown tmp[116608] "maybe param" "temp"
      (116620 'move' tmp[116608](116618 call chpl_compute_low_param_loop_bound 1(116535 call - count 1)))
      unknown tmp[116609] "maybe param" "temp"
      (116630 'move' tmp[116609](116628 call chpl_compute_high_param_loop_bound 1(116625 call - count 1)))
      unknown tmp[116610] "maybe param" "temp"
      (116633 'move' tmp[116610] 1)
      ParamForLoop[116635]
      { i[116607] tmp[116608] tmp[116609] tmp[116610]
        if(116603 call _cond_test(116548 call != keyType(116547 call _getLiteralType(116545 'typeof'(116544 call keys i)))))
        {
          (116600 call compilerError(116597 call +(116584 call +(116581 call +(116575 call +(116572 call + "Associative domain element "(116570 call _cast string[26] i)) " expected to be of type ")(116579 call _cast string[26] keyType)) " but is of type ")(116595 call _cast string[26](116593 call _getLiteralType(116591 'typeof'(116590 call keys i))))))
        }
      }
      label _unused_continueLabel[116612]
      label _breakLabel[116611]
    }
    unknown D[116649](116647 call chpl__buildDomainRuntimeType defaultDist keyType)
    (116652 'end of statement')
    (116659 call(116654 call . D c"requestCapacity") count)
    {
      unknown i[116676] 0
      unknown tmp[116677] "maybe param" "temp"
      (116689 'move' tmp[116677](116687 call chpl_compute_low_param_loop_bound 0(116664 call - count 1)))
      unknown tmp[116678] "maybe param" "temp"
      (116699 'move' tmp[116678](116697 call chpl_compute_high_param_loop_bound 0(116694 call - count 1)))
      unknown tmp[116679] "maybe param" "temp"
      (116702 'move' tmp[116679] 1)
      ParamForLoop[116704]
      { i[116676] tmp[116677] tmp[116678] tmp[116679]
        (116673 call += D(116672 call keys i))
      }
      label _unused_continueLabel[116681]
      label _breakLabel[116680]
    }
    (116714 return D)
  }
  function chpl__ensureDomainExpr[116724](const  ref arg x[116721] :
  _domain) const ref : _unknown[51]
  {
    (116727 return x)
  }
  function chpl__ensureDomainExpr[116738](arg x[116735]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    (116745 return(116744 call chpl__buildDomainExpr(116742 'expand_tuple' x)))
  }
  function chpl__ensureDomainExpr[116754](arg t[116752]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    (116798 call compilerError "Domain expression was a type ('"(116777 call _cast string[26] t) "') rather than a domain value or range list as expected")
  }
  function chpl__distributed[116809](arg d[116806] :
  _distribution, arg dom[116812] :
  _domain) : _unknown[51]
  {
    if(116876 call _cond_test(116818 call isRectangularDom dom))
    {
      unknown distDom[116845] dom(116842 call chpl__distributed d(116839 call chpl__buildDomainRuntimeType defaultDist(116820 call . dom c"rank")(116828 call .(116825 call . dom c"_value") c"idxType")(116835 call .(116832 call . dom c"_value") c"stridable")))
      (116848 'end of statement')
      (116851 return distDom)
    }
    {
      unknown distDom[116868] dom(116865 call chpl__distributed d(116862 call chpl__buildDomainRuntimeType defaultDist(116857 call .(116854 call . dom c"_value") c"idxType")))
      (116871 'end of statement')
      (116874 return distDom)
    }
  }
  function chpl__distributed[116889](arg d[116886] :
  _distribution, arg ranges[116892]:_any[178](?) ...) : _unknown[51]
  {
    (116908 return(116907 call chpl__distributed d(116906 call chpl__buildDomainExpr(116904 'expand_tuple' ranges))))
  }
  where {
    (116898 call chpl__isTupleOfRanges ranges)
  }
  function chpl__isArrayView[116918](arg arr[116916]:_any[178](?)) param : _unknown[51]
  {
    const value[116932] "const"(116929 IfExpr (116923 call isArray arr) then
    { scopeless
      (116925 call . arr c"_value")
    } else
    { scopeless
      arr
    } )
    (116935 'end of statement')
    unknown isSlice[116943] "param"(116942 call(116938 call . value c"isSliceArrayView"))
    (116946 'end of statement')
    unknown isRankChange[116953] "param"(116952 call(116948 call . value c"isRankChangeArrayView"))
    (116956 'end of statement')
    unknown isReindex[116963] "param"(116962 call(116958 call . value c"isReindexArrayView"))
    (116966 'end of statement')
    (116974 return(116972 call ||(116969 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualArray[116982](arg arr[116980]:_any[178](?)) : _unknown[51]
  {
    unknown value[116996](116993 IfExpr (116987 call isArray arr) then
    { scopeless
      (116989 call . arr c"_value")
    } else
    { scopeless
      arr
    } )
    (116999 'end of statement')
    unknown ret[117017](117014 IfExpr (117004 call chpl__isArrayView value) then
    { scopeless
      (117012 call(117008 call . value c"_getActualArray"))
    } else
    { scopeless
      value
    } )
    (117020 'end of statement')
    (117022 return ret)
  }
  function chpl__isDROrDRView[117030](arg arg[117028]:_any[178](?)) param : _unknown[51]
  {
    if(117186 call _cond_test(117042 call ||(117035 call isDomain arg)(354328 'is_subtype' BaseDom(117038 'typeof' arg))))
    {
      const value[117056] "const"(117053 IfExpr (117047 call isDomain arg) then
      { scopeless
        (117049 call . arg c"_value")
      } else
      { scopeless
        arg
      } )
      (117059 'end of statement')
      unknown isDR[117067] "param"(117066 call(117062 call . value c"isDefaultRectangular"))
      (117070 'end of statement')
      unknown isDRView[117086] "param"(117084 call &&(117074 call chpl__isDomainView value)(117083 call(117079 call .(117078 call chpl__getActualDomain value) c"isDefaultRectangular")))
      (117089 'end of statement')
      (117094 return(117092 call || isDR isDRView))
    }
    {
      if(117182 call _cond_test(117106 call ||(117099 call isArray arg)(354329 'is_subtype' BaseArr(117102 'typeof' arg))))
      {
        const value[117120] "const"(117117 IfExpr (117111 call isArray arg) then
        { scopeless
          (117113 call . arg c"_value")
        } else
        { scopeless
          arg
        } )
        (117123 'end of statement')
        unknown isDR[117131] "param"(117130 call(117126 call . value c"isDefaultRectangular"))
        (117134 'end of statement')
        unknown isDRView[117150] "param"(117148 call &&(117138 call chpl__isArrayView value)(117147 call(117143 call .(117142 call chpl__getActualArray value) c"isDefaultRectangular")))
        (117153 'end of statement')
        (117158 return(117156 call || isDR isDRView))
      }
      {
        (117179 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
  }
  function chpl__isDomainView[117198](arg dom[117196]:_any[178](?)) param : _unknown[51]
  {
    const value[117212] "const"(117209 IfExpr (117203 call isDomain dom) then
    { scopeless
      (117205 call . dom c"_value")
    } else
    { scopeless
      dom
    } )
    (117215 'end of statement')
    unknown isSlice[117225] "param"(117224 call(117220 call . value c"isSliceDomainView"))
    (117228 'end of statement')
    unknown isRankChange[117237] "param"(117236 call(117232 call . value c"isRankChangeDomainView"))
    (117240 'end of statement')
    unknown isReindex[117249] "param"(117248 call(117244 call . value c"isReindexDomainView"))
    (117252 'end of statement')
    (117260 return(117258 call ||(117255 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualDomain[117268](arg dom[117266]:_any[178](?)) : _unknown[51]
  {
    unknown value[117282](117279 IfExpr (117273 call isDomain dom) then
    { scopeless
      (117275 call . dom c"_value")
    } else
    { scopeless
      dom
    } )
    (117285 'end of statement')
    unknown ret[117303](117300 IfExpr (117290 call chpl__isDomainView value) then
    { scopeless
      (117298 call(117294 call . value c"_getActualDomain"))
    } else
    { scopeless
      value
    } )
    (117306 'end of statement')
    (117308 return ret)
  }
  function chpl__isRectangularDomType[117316](arg domainType[117314]:_any[178](?)) param : _unknown[51]
  {
    unknown dom[117319] domainType
    (117322 'end of statement')
    (117334 return(117332 call &&(117327 call isDomainType domainType)(117331 call isRectangularDom dom)))
  }
  function chpl__isSparseDomType[117342](arg domainType[117340]:_any[178](?)) param : _unknown[51]
  {
    unknown dom[117345] domainType
    (117348 'end of statement')
    (117354 return(117353 call isSparseDom dom))
  }
  function chpl__parentDomainFromDomainRuntimeType[117362](arg domainType[117360]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown parentDom[117399] "no auto destroy" "no copy"(117398 'get runtime type field' domainType "parentDom")
    (117402 'end of statement')
    (117411 return(117410 call _getDomain(117406 call . parentDom c"_value")))
  }
  function chpl__distributed[117421](arg d[117418] :
  _distribution, arg domainType[117423]:_any[178](?)) type : _unknown[51]
  {
    if(117456 call _cond_test(117429 call !(117428 call isDomainType domainType)))
    {
      (117454 call compilerError "cannot apply 'dmapped' to the non-domain type "(117452 call _cast string[26] domainType))
    }
    if(117549 call _cond_test(117465 call chpl__isRectangularDomType domainType))
    {
      unknown dom[117467] domainType
      (117470 'end of statement')
      (117497 return(117496 call chpl__buildDomainRuntimeType d(117479 call .(117476 call . dom c"_value") c"rank")(117486 call .(117483 call . dom c"_value") c"idxType")(117493 call .(117490 call . dom c"_value") c"stridable")))
    }
    {
      if(117545 call _cond_test(117502 call chpl__isSparseDomType domainType))
      {
        const parentDom[117507] "const" "ref var"(117506 call chpl__parentDomainFromDomainRuntimeType domainType)
        (117510 'end of statement')
        (117517 return(117516 call chpl__buildSparseDomainRuntimeType d parentDom))
      }
      {
        unknown dom[117520] domainType
        (117523 'end of statement')
        (117543 return(117542 call chpl__buildDomainRuntimeType d(117532 call .(117529 call . dom c"_value") c"idxType")(117539 call .(117536 call . dom c"_value") c"parSafe")))
      }
    }
  }
  function chpl__distributionFromDomainRuntimeType[117560](arg rtt[117558]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown dist[117581] "no auto destroy" "no copy"(117580 'get runtime type field' rtt "dist")
    (117584 'end of statement')
    (117593 return(117592 call _getDistribution(117588 call . dist c"_value")))
  }
  function chpl__domainFromArrayRuntimeType[117601](arg rtt[117599]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown dom[117608] "no auto destroy" "no copy"(117607 'get runtime type field' rtt "dom")
    (117611 'end of statement')
    (117620 return(117619 call _getDomain(117615 call . dom c"_value")))
  }
  function chpl__eltTypeFromArrayRuntimeType[117628](arg rtt[117626]:_any[178](?)) type : _unknown[51]
  {
    unknown eltType[117649] "no auto destroy" "no copy" "type variable"(117648 'get runtime type field' rtt "eltType")
    (117654 return eltType)
  }
  function chpl__instanceTypeFromArrayRuntimeType[117662](arg rtt[117660]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    (117699 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (117707 return(117706 'static field type' rtt "_instance"))
  }
  function chpl__buildIndexType[117717](param arg rank[117714] :
  int[13], arg idxType[117719]:_any[178](?)) type : _unknown[51]
  {
    (117726 return idxType)
  }
  where {
    (117723 call == rank 1)
  }
  function chpl__buildIndexType[117738](param arg rank[117735] :
  int[13], arg idxType[117740]:_any[178](?)) type : _unknown[51]
  {
    (117750 return(117748 call * rank idxType))
  }
  where {
    (117744 call > rank 1)
  }
  function chpl__buildIndexType[117762](param arg rank[117759] :
  int[13]) type : _unknown[51]
  {
    (117769 return(117768 call chpl__buildIndexType rank int[13]))
  }
  function chpl__buildIndexType[117780](arg d[117777] :
  _domain) type : _unknown[51]
  {
    (117796 return(117795 call chpl__buildIndexType(117784 call . d c"rank")(117792 call .(117789 call . d c"_value") c"idxType")))
  }
  function isRectangularDom[117807](arg d[117804] :
  _domain) param : _unknown[51]
  {
    (117821 return(354330 'is_subtype' BaseRectangularDom(117817 call _to_borrowed(117815 'typeof'(117812 call . d c"_value")))))
  }
  function isRectangularArr[117834](arg a[117831] :
  (117828 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (117843 return(117842 call isRectangularDom(117838 call . a c"_dom")))
  }
  function isIrregularDom[117854](arg d[117851] :
  _domain) param : _unknown[51]
  {
    (117866 return(117864 call ||(117859 call isSparseDom d)(117863 call isAssociativeDom d)))
  }
  function isIrregularArr[117879](arg a[117876] :
  (117873 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (117888 return(117887 call isIrregularDom(117883 call . a c"_dom")))
  }
  function isAssociativeDom[117899](arg d[117896] :
  _domain) param : _unknown[51]
  {
    function isAssociativeDomClass[117907](arg dc[117904] :
    BaseAssociativeDom) param : _unknown[51]
    {
      (117910 return 1)
    }
    function isAssociativeDomClass[117920](arg dc[117918]:_any[178](?)) param : _unknown[51]
    {
      (117923 return 0)
    }
    (117938 return(117937 call isAssociativeDomClass(117935 call _to_borrowed(117931 call . d c"_value"))))
  }
  function isAssociativeArr[117950](arg a[117947] :
  (117944 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (117959 return(117958 call isAssociativeDom(117954 call . a c"_dom")))
  }
  function isSparseDom[117970](arg d[117967] :
  _domain) param : _unknown[51]
  {
    function isSparseDomClass[117978](arg dc[117975] :
    BaseSparseDom) param : _unknown[51]
    {
      (117981 return 1)
    }
    function isSparseDomClass[117991](arg dc[117989]:_any[178](?)) param : _unknown[51]
    {
      (117994 return 0)
    }
    (118006 return(118005 call isSparseDomClass(118001 call . d c"_value")))
  }
  function isSparseArr[118018](arg a[118015] :
  (118012 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (118027 return(118026 call isSparseDom(118022 call . a c"_dom")))
  }
  function chpl__checkDomainsMatch[118040](arg a[118037] :
  (118034 call chpl__buildArrayRuntimeType nil[44]), arg b[118042]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118045 'import' HaltWrappers)
    if(118086 call _cond_test boundsChecking)
    {
      if(118081 call _cond_test(118054 call !=(118050 call . a c"_dom") b))
      {
        (118078 call(118057 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkDomainsMatch[118098](arg a[118095] :
  _iteratorRecord, arg b[118100]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118103 'import' HaltWrappers)
    if(118133 call _cond_test boundsChecking)
    {
      unknown tmp[118108] a
      (118111 'end of statement')
      if(118129 call _cond_test(118118 call !=(118114 call . tmp c"_dom") b))
      {
        (118126 call(118121 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkEltTypeMatch[118147](arg a[118144] :
  (118141 call chpl__buildArrayRuntimeType nil[44]), arg b[118149]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(118192 call _cond_test(118156 call !=(118152 call . a c"eltType") b))
    {
      (118189 call compilerError "array element type mismatch in return from "(118182 call _cast string[26](118178 call . a c"eltType")) " to "(118187 call _cast string[26] b))
    }
  }
  function chpl__checkEltTypeMatch[118205](arg a[118202] :
  _iteratorRecord, arg b[118207]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown eltType[118214] "type variable"(118213 call iteratorToArrayElementType(118211 'typeof' a))
    if(118237 call _cond_test(118220 call != eltType b))
    {
      (118234 call compilerError "array element type mismatch in return from "(118227 call _cast string[26] eltType) " to "(118232 call _cast string[26] b))
    }
  }
  type dmap[118245]
  function chpl__buildDistType[118252](arg t[118250]:_any[178](?)) type : _unknown[51]
  {
    unknown x[118267](118266 'to nilable class from type'(118265 call _to_unmanaged t))
    (118270 'end of statement')
    unknown y[118279](118272 'new'(118278 call _distribution(118275 call postfix! x)))
    (118282 'end of statement')
    (118285 return(118284 'typeof' y))
  }
  where {
    (354331 'is_subtype' BaseDist(118258 call _to_borrowed t))
  }
  function chpl__buildDistType[118294](arg t[118292]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118315 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
  }
  function chpl__buildDistValue[118326](arg x[118323] :
  unmanaged[220](?)) : _unknown[51]
  {
    (118344 return(118339 'new'(118343 call _distribution x)))
  }
  where {
    (354332 'is_subtype' BaseDist(118335 'typeof'(118334 call(118330 call . x c"borrow"))))
  }
  function chpl__buildDistValue[118356](in arg x[118353] :
  _owned) : _unknown[51]
  {
    (118379 return(118369 'new'(118378 call _distribution(118376 call(118372 call . x c"release")))))
  }
  where {
    (354333 'is_subtype' BaseDist(118365 'typeof'(118364 call(118360 call . x c"borrow"))))
  }
  function chpl__buildDistValue[118389](arg x[118387]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118410 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
  }
  function _distribution[118973](?).init[118436](arg _mt[118977]:_MT[238], arg this[118975]:_distribution[118973](?), arg _pid[118433] :
  int[13], arg _instance[118438]:_any[178](?), arg _unowned[118441] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (118451 call =(118447 call . this c"_pid") _pid)
    (118460 call =(118456 call . this c"_instance") _instance)
    (118470 call =(118466 call . this c"_unowned") _unowned)
  }
  function _distribution[118973](?).init[118479](arg _mt[118981]:_MT[238], arg this[118979]:_distribution[118973](?), arg value[118477]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (118497 call =(118482 call . this c"_pid")(118494 IfExpr (118488 call _isPrivatized value) then
    { scopeless
      (118492 call _newPrivatizedClass value)
    } else
    { scopeless
      nullPid
    } ))
    (118509 call =(118502 call . this c"_instance")(118508 call _to_unmanaged value))
  }
  function _distribution[118973](?).init=[118520](arg _mt[118985]:_MT[238], arg this[118983]:_distribution[118973](?), const  ref arg other[118517] :
  _distribution) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown value[118533](118532 call(118528 call .(118523 call . other c"_value") c"dsiClone"))
    (118536 'end of statement')
    (118544 call(118539 call . this c"init") value)
  }
  function _distribution[118973](?)._value[118550](arg _mt[118989]:_MT[238], arg this[118987]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(118569 call _cond_test(118555 call _isPrivatized _instance))
    {
      (118562 return(118561 call chpl_getPrivatizedCopy(118558 'typeof' _instance) _pid))
    }
    {
      (118566 return _instance)
    }
  }
  function _distribution[118973](?).chpl_forwarding_expr4__value[118578](arg _mt[118993]:_MT[238], arg this[118991]:_distribution[118973](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (118580 return _value)
  }
  function _distribution[118973](?)._do_destroy[118586](arg _mt[118997]:_MT[238], arg this[118995]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(118647 call _cond_test(118601 call &&(118589 call ! _unowned)(118599 call !(118598 call(118594 call . _instance c"singleton")))))
    {
      const tmp[118638] "const" "temp"
      (118640 'move' tmp[118638](118636 'deref'(118635 '_wide_get_locale' _instance)))
      {
        {
          unknown distToFree[118610](118609 call(118605 call . _instance c"remove"))
          (118613 'end of statement')
          if(118631 call _cond_test(118617 call != distToFree nil[44]))
          {
            (118628 call _delete_dist(118621 call postfix! distToFree)(118627 call _isPrivatized _instance))
          }
        }
        (118643 'on block' 0 tmp[118638])
      }
    }
  }
  function _distribution[118973](?).deinit[118656](arg _mt[119001]:_MT[238], arg this[118999]:_distribution[118973](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118660 call _do_destroy)
  }
  function _distribution[118973](?).clone[118667](arg _mt[119005]:_MT[238], arg this[119003]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    (118679 return(118669 'new'(118678 call _distribution(118676 call(118672 call . _value c"dsiClone")))))
  }
  function _distribution[118973](?).newRectangularDom[118690](arg _mt[119009]:_MT[238], arg this[119007]:_distribution[118973](?), param arg rank[118687] :
  int[13], arg idxType[118692]:_any[178](?), param arg stridable[118695] :
  bool[10], arg ranges[118710] :
  (118708 call * rank(118707 call range idxType(118703 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method"
  {
    unknown x[118725](118724 call(118716 call . _value c"dsiNewRectangularDom") rank idxType stridable ranges)
    (118728 'end of statement')
    if(118749 call _cond_test(118737 call(118733 call . x c"linksDistribution")))
    {
      (118746 call(118741 call . _value c"add_dom") x)
    }
    (118754 return x)
  }
  function _distribution[118973](?).newRectangularDom[118764](arg _mt[119013]:_MT[238], arg this[119011]:_distribution[118973](?), param arg rank[118761] :
  int[13], arg idxType[118766]:_any[178](?), param arg stridable[118769] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ranges[118784](118782 call * rank(118781 call range idxType(118777 call . BoundedRangeType c"bounded") stridable))
    (118787 'end of statement')
    (118796 return(118795 call newRectangularDom rank idxType stridable ranges))
  }
  function _distribution[118973](?).newAssociativeDom[118804](arg _mt[119017]:_MT[238], arg this[119015]:_distribution[118973](?), arg idxType[118802]:_any[178](?), param arg parSafe[118808] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown x[118822](118821 call(118815 call . _value c"dsiNewAssociativeDom") idxType parSafe)
    (118825 'end of statement')
    if(118842 call _cond_test(118832 call(118828 call . x c"linksDistribution")))
    {
      (118839 call(118834 call . _value c"add_dom") x)
    }
    (118847 return x)
  }
  function _distribution[118973](?).newSparseDom[118857](arg _mt[119021]:_MT[238], arg this[119019]:_distribution[118973](?), param arg rank[118854] :
  int[13], arg idxType[118859]:_any[178](?), arg dom[118862] :
  _domain) : _unknown[51] "method" "primary method"
  {
    unknown x[118876](118875 call(118868 call . _value c"dsiNewSparseDom") rank idxType dom)
    (118879 'end of statement')
    if(118896 call _cond_test(118886 call(118882 call . x c"linksDistribution")))
    {
      (118893 call(118888 call . _value c"add_dom") x)
    }
    (118901 return x)
  }
  function _distribution[118973](?).idxToLocale[118909](arg _mt[119025]:_MT[238], arg this[119023]:_distribution[118973](?), arg ind[118907]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (118920 return(118919 call(118914 call . _value c"dsiIndexToLocale") ind))
  }
  function _distribution[118973](?).readWriteThis[118929](arg _mt[119029]:_MT[238], arg this[119027]:_distribution[118973](?), arg f[118927]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (118933 call <~> f _value)
  }
  function _distribution[118973](?).displayRepresentation[118941](arg _mt[119033]:_MT[238], arg this[119031]:_distribution[118973](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (118950 call(118946 call . _value c"dsiDisplayRepresentation"))
  }
  function _distribution[118973](?).targetLocales[118957](arg _mt[119037]:_MT[238], arg this[119035]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    (118967 return(118966 call(118962 call . _value c"dsiTargetLocales")))
  }
  type _distribution[118973](?) unknown _pid[118417] int[13] unknown _instance[118421] "owned" unknown _unowned[118426] bool[10] forwarding ( )
  function ==[119049](arg d1[119046] :
  (119045 call _distribution ?[260]), arg d2[119055] :
  (119054 call _distribution ?[260])) : _unknown[51] "inline"
  {
    if(119071 call _cond_test(119066 call ==(119059 call . d1 c"_value")(119063 call . d2 c"_value")))
    {
      (119069 return 1)
    }
    (119092 return(119091 call(119083 call .(119078 call . d1 c"_value") c"dsiEqualDMaps")(119087 call . d2 c"_value")))
  }
  function !=[119105](arg d1[119102] :
  (119101 call _distribution ?[260]), arg d2[119111] :
  (119110 call _distribution ?[260])) : _unknown[51] "inline"
  {
    if(119127 call _cond_test(119122 call ==(119115 call . d1 c"_value")(119119 call . d2 c"_value")))
    {
      (119125 return 0)
    }
    (119148 return(119146 call !(119145 call(119137 call .(119134 call . d1 c"_value") c"dsiEqualDMaps")(119141 call . d2 c"_value"))))
  }
  function chpl_defaultComparator[119154]() : _unknown[51]
  {
    (119157 'use' Sort)
    (119161 return defaultComparator)
  }
  function _domain[125908](?).chpl__promotionType[119182](arg _mt[125912]:_MT[238], arg this[125910]:_domain[125908](?)) type : _unknown[51] "method" "primary method"
  {
    (119192 return(119190 call chpl__buildIndexType rank(119187 call . _value c"idxType")))
  }
  function _domain[125908](?).init[119203](arg _mt[125916]:_MT[238], arg this[125914]:_domain[125908](?), arg _pid[119200] :
  int[13], arg _instance[119205]:_any[178](?), arg _unowned[119208] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119216 call =(119212 call . this c"_pid") _pid)
    (119225 call =(119221 call . this c"_instance") _instance)
    (119233 call =(119229 call . this c"_unowned") _unowned)
  }
  function _domain[125908](?).init[119242](arg _mt[125920]:_MT[238], arg this[125918]:_domain[125908](?), arg value[119240]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(119258 call _cond_test(119251 call !=(119248 call _to_unmanaged(119246 'typeof' value))(119250 'typeof' value)))
    {
      (119256 call compilerError "Domain on borrow created")
    }
    if(119313 call _cond_test(119267 call _isPrivatized value))
    {
      if(119299 call _cond_test(119273 call ==(119269 call . value c"pid") nullPid))
      {
        (119283 call =(119276 call . this c"_pid")(119282 call _newPrivatizedClass value))
      }
      {
        (119295 call =(119288 call . this c"_pid")(119292 call . value c"pid"))
      }
    }
    {
      (119309 call =(119305 call . this c"_pid") nullPid)
    }
    (119322 call =(119318 call . this c"_instance") value)
  }
  function _domain[125908](?).init[119333](arg _mt[125924]:_MT[238], arg this[125922]:_domain[125908](?), arg d[119330] :
  _distribution, param arg rank[119336] :
  int[13], arg idxType[119340]:_any[178](?) =
  int[13], param arg stridable[119345] :
  bool[10] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119363 call(119350 call . this c"init")(119361 call(119354 call . d c"newRectangularDom") rank idxType stridable))
  }
  function _domain[125908](?).init[119374](arg _mt[125928]:_MT[238], arg this[125926]:_domain[125908](?), arg d[119371] :
  _distribution, param arg rank[119377] :
  int[13], arg idxType[119381]:_any[178](?) =
  int[13], param arg stridable[119386] :
  bool[10] =
  0, arg ranges[119402] :
  (119400 call * rank(119399 call range idxType(119395 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119420 call(119406 call . this c"init")(119418 call(119410 call . d c"newRectangularDom") rank idxType stridable ranges))
  }
  function _domain[125908](?).init[119431](arg _mt[125932]:_MT[238], arg this[125930]:_domain[125908](?), arg d[119428] :
  _distribution, arg idxType[119433]:_any[178](?), param arg parSafe[119437] :
  bool[10] =
  1) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119456 call(119442 call . this c"init")(119454 call(119448 call . d c"newAssociativeDom") idxType parSafe))
  }
  function _domain[125908](?).init[119467](arg _mt[125936]:_MT[238], arg this[125934]:_domain[125908](?), arg d[119464] :
  _distribution, arg dom[119470] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119498 call(119474 call . this c"init")(119496 call(119480 call . d c"newSparseDom")(119484 call . dom c"rank")(119492 call .(119489 call . dom c"_value") c"idxType") dom))
  }
  function _domain[125908](?).init=[119509](arg _mt[125940]:_MT[238], arg this[125938]:_domain[125908](?), const  ref arg other[119506] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (119542 call(119516 call . this c"init")(119520 call . other c"dist")(119525 call . other c"rank")(119529 call . other c"idxType")(119533 call . other c"stridable")(119541 call(119537 call . other c"dims")))
  }
  where {
    (119514 call isRectangularDom other)
  }
  function _domain[125908](?).init=[119554](arg _mt[125944]:_MT[238], arg this[125942]:_domain[125908](?), const  ref arg other[119551] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(119646 call _cond_test(119559 call isAssociativeDom other))
    {
      (119577 call(119561 call . this c"init")(119565 call . other c"dist")(119570 call . other c"idxType")(119574 call . other c"parSafe"))
    }
    {
      if(119642 call _cond_test(119583 call isSparseDom other))
      {
        (119597 call(119585 call . this c"init")(119589 call . other c"dist")(119594 call . other c"parentDom"))
      }
      {
        (119631 call compilerError "Cannot initialize '"(119622 call _cast string[26](119620 'typeof' this)) "' from '"(119628 call _cast string[26](119626 'typeof' other)) "'")
        (119640 call(119635 call . this c"init") nil[44])
      }
    }
    (119662 call(119655 call . _instance c"dsiAssignDomain") other(lhsPrivate = 1))
  }
  function _domain[125908](?)._value[119668](arg _mt[125948]:_MT[238], arg this[125946]:_domain[125908](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(119687 call _cond_test(119673 call _isPrivatized _instance))
    {
      (119680 return(119679 call chpl_getPrivatizedCopy(119676 'typeof' _instance) _pid))
    }
    {
      (119684 return _instance)
    }
  }
  function _domain[125908](?).chpl_forwarding_expr5__value[119697](arg _mt[125952]:_MT[238], arg this[125950]:_domain[125908](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (119699 return _value)
  }
  function _domain[125908](?).chpl__serialize[119705](arg _mt[125956]:_MT[238], arg this[125954]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (119727 return(119726 call(119722 call .(119717 call . this c"_value") c"chpl__serialize")))
  }
  where {
    (119715 call(119711 call .(119708 call . this c"_value") c"isDefaultRectangular"))
  }
  function _domain[125908](?).chpl__deserialize[119737](arg _mt[125960]:_MT[238], arg this[125958]:_domain[125908](?), arg data[119735]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown valueType[119744] "type variable"(119743 'static field type' this "_instance")
    (119764 return(119748 'new'(119763 call _domain(119761 call(119756 call .(119753 call _to_borrowed valueType) c"chpl__deserialize") data))))
  }
  function _domain[125908](?)._do_destroy[119770](arg _mt[125964]:_MT[238], arg this[125962]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(119889 call _cond_test(119773 call ! _unowned))
    {
      const tmp[119879] "const" "temp"
      (119881 'move' tmp[119879](119877 'deref'(119876 '_wide_get_locale' _instance)))
      {
        {
          const inst[119777] "const" _instance
          (119780 'end of statement')
          unknown tmp[119793] "temp"(119792 call(119788 call . inst c"remove"))
          (119800 call _check_tuple_var_decl tmp[119793] 2)
          unknown domToFree[119782](119794 call tmp[119793] 0)
          unknown distToRemove[119784](119797 call tmp[119793] 1)
          (119805 'end of statement')
          unknown distToFree[119810] nil[44](119808 'to unmanaged class from unknown'(119807 'to nilable class from type' BaseDist))
          (119813 'end of statement')
          if(119831 call _cond_test(119816 call != distToRemove nil[44]))
          {
            (119827 call = distToFree(119826 call(119822 call .(119820 call postfix! distToRemove) c"remove")))
          }
          if(119848 call _cond_test(119837 call != domToFree nil[44]))
          {
            (119846 call _delete_dom inst(119845 call _isPrivatized inst))
          }
          if(119871 call _cond_test(119855 call != distToFree nil[44]))
          {
            (119869 call _delete_dist(119859 call postfix! distToFree)(119868 call _isPrivatized(119864 call . inst c"dist")))
          }
        }
        (119884 'on block' 0 tmp[119879])
      }
    }
    {
    }
  }
  function _domain[125908](?).deinit[119898](arg _mt[125968]:_MT[238], arg this[125966]:_domain[125908](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119902 call _do_destroy)
  }
  function _domain[125908](?).dist[119909](arg _mt[125972]:_MT[238], arg this[125970]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    (119918 return(119917 call _getDistribution(119913 call . _value c"dist")))
  }
  function _domain[125908](?).rank[119925](arg _mt[125976]:_MT[238], arg this[125974]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    if(119946 call _cond_test(119935 call ||(119930 call isRectangularDom this)(119934 call isSparseDom this)))
    {
      (119941 return(119938 call . _value c"rank"))
    }
    {
      (119944 return 1)
    }
  }
  function _domain[125908](?).idxType[119957](arg _mt[125980]:_MT[238], arg this[125978]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (119963 return(119960 call . _value c"idxType"))
  }
  function _domain[125908](?).intIdxType[119970](arg _mt[125984]:_MT[238], arg this[125982]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (119979 return(119978 call chpl__idxTypeToIntIdxType(119974 call . _value c"idxType")))
  }
  function _domain[125908](?).stridable[119986](arg _mt[125988]:_MT[238], arg this[125986]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    (119996 return(119993 call . _value c"stridable"))
  }
  where {
    (119991 call isRectangularDom this)
  }
  function _domain[125908](?).stridable[120004](arg _mt[125992]:_MT[238], arg this[125990]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (120017 return(120014 call .(120011 call . _value c"parentDom") c"stridable"))
  }
  where {
    (120009 call isSparseDom this)
  }
  function _domain[125908](?).stridable[120025](arg _mt[125996]:_MT[238], arg this[125994]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120050 call compilerError "associative domains do not support .stridable")
  }
  where {
    (120030 call isAssociativeDom this)
  }
  function _domain[125908](?).these[120058](arg _mt[126000]:_MT[238], arg this[125998]:_domain[125908](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[120071] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120072] "expr temp" "temp"
      (120081 'move' _iterator[120072](120079 call _getIterator(120066 call(120062 call . _value c"these"))))
      Defer
      {
        {
          (120098 call _freeIterator _iterator[120072])
        }
      }
      { scopeless type
        (120087 'move' _indexOfInterest[120071](120084 call iteratorIndex _iterator[120072]))
      }
      ForLoop[120073]
      {
        unknown i[120091] "index var" "insert auto destroy"
        (120093 'move' i[120091] _indexOfInterest[120071])
        {
          (120068 yield i)
        }
        label _continueLabel[120076]
        _indexOfInterest[120071]
        _iterator[120072]
      }
      label _breakLabel[120077]
    }
  }
  function _domain[125908](?).these[120114](arg _mt[126004]:_MT[238], arg this[126002]:_domain[125908](?), param arg tag[120111] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[120173] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120174] "expr temp" "temp"
      (120183 'move' _iterator[120174](120181 call _getIterator(120169 call(120164 call . _value c"these") tag)))
      Defer
      {
        {
          (120200 call _freeIterator _iterator[120174])
        }
      }
      { scopeless type
        (120189 'move' _indexOfInterest[120173](120186 call iteratorIndex _iterator[120174]))
      }
      ForLoop[120175]
      {
        unknown i[120193] "index var" "insert auto destroy"
        (120195 'move' i[120193] _indexOfInterest[120173])
        (120171 yield i)
        label _continueLabel[120178]
        _indexOfInterest[120173]
        _iterator[120174]
      }
      label _breakLabel[120179]
    }
  }
  where {
    (120160 call &&(120121 call == tag(120118 call . iterKind c"standalone"))(120159 'method call resolves' _value "these"(tag = tag)))
  }
  function _domain[125908](?).these[120217](arg _mt[126008]:_MT[238], arg this[126006]:_domain[125908](?), param arg tag[120214] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[120237] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120238] "expr temp" "temp"
      (120247 'move' _iterator[120238](120245 call _getIterator(120233 call(120228 call . _value c"these") tag)))
      Defer
      {
        {
          (120264 call _freeIterator _iterator[120238])
        }
      }
      { scopeless type
        (120253 'move' _indexOfInterest[120237](120250 call iteratorIndex _iterator[120238]))
      }
      ForLoop[120239]
      {
        unknown followThis[120257] "index var" "insert auto destroy"
        (120259 'move' followThis[120257] _indexOfInterest[120237])
        (120235 yield followThis)
        label _continueLabel[120242]
        _indexOfInterest[120237]
        _iterator[120238]
      }
      label _breakLabel[120243]
    }
  }
  where {
    (120224 call == tag(120221 call . iterKind c"leader"))
  }
  function _domain[125908](?).these[120281](arg _mt[126012]:_MT[238], arg this[126010]:_domain[125908](?), param arg tag[120278] :
  iterKind, arg followThis[120283]:_any[178](?), param arg fast[120287] :
  bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    if(120405 call _cond_test(120307 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[120323] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120324] "expr temp" "temp"
        (120333 'move' _iterator[120324](120331 call _getIterator(120319 call(120310 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (120350 call _freeIterator _iterator[120324])
          }
        }
        { scopeless type
          (120339 'move' _indexOfInterest[120323](120336 call iteratorIndex _iterator[120324]))
        }
        ForLoop[120325]
        {
          unknown i[120343] "index var" "insert auto destroy"
          (120345 'move' i[120343] _indexOfInterest[120323])
          (120321 yield i)
          label _continueLabel[120328]
          _indexOfInterest[120323]
          _iterator[120324]
        }
        label _breakLabel[120329]
      }
    }
    {
      {
        unknown _indexOfInterest[120370] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120371] "expr temp" "temp"
        (120380 'move' _iterator[120371](120378 call _getIterator(120366 call(120360 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (120397 call _freeIterator _iterator[120371])
          }
        }
        { scopeless type
          (120386 'move' _indexOfInterest[120370](120383 call iteratorIndex _iterator[120371]))
        }
        ForLoop[120372]
        {
          unknown i[120390] "index var" "insert auto destroy"
          (120392 'move' i[120390] _indexOfInterest[120370])
          (120368 yield i)
          label _continueLabel[120375]
          _indexOfInterest[120370]
          _iterator[120371]
        }
        label _breakLabel[120376]
      }
    }
  }
  where {
    (120296 call == tag(120293 call . iterKind c"follower"))
  }
  function _domain[125908](?).this[120419](arg _mt[126016]:_MT[238], arg this[126014]:_domain[125908](?), arg d[120416] :
  _domain) : _unknown[51] "method" "primary method" "no doc"
  {
    if(120461 call _cond_test(120426 call ==(120422 call . d c"rank") rank))
    {
      (120438 return(120437 call this(120435 'expand_tuple'(120434 call(120430 call . d c"getIndices")))))
    }
    {
      (120459 call compilerError "slicing a domain with a domain of a different rank")
    }
  }
  function _domain[125908](?).this[120476](arg _mt[126020]:_MT[238], arg this[126018]:_domain[125908](?), arg ranges[120473]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown stridable[120492] "param"(120490 call ||(120483 call . _value c"stridable")(120489 call chpl__anyStridable ranges))
    (120495 'end of statement')
    unknown r[120512](120510 call * rank(120509 call range(120500 call . _value c"idxType")(120505 call . BoundedRangeType c"bounded") stridable))
    (120515 'end of statement')
    {
      unknown i[120544] 0
      unknown tmp[120545] "maybe param" "temp"
      (120557 'move' tmp[120545](120555 call chpl_compute_low_param_loop_bound 0(120519 call - rank 1)))
      unknown tmp[120546] "maybe param" "temp"
      (120567 'move' tmp[120546](120565 call chpl_compute_high_param_loop_bound 0(120562 call - rank 1)))
      unknown tmp[120547] "maybe param" "temp"
      (120570 'move' tmp[120547] 1)
      ParamForLoop[120572]
      { i[120544] tmp[120545] tmp[120546] tmp[120547]
        {
          (120540 call =(120526 call r i)(120539 call(120533 call(120528 call . _value c"dsiDim") i)(120537 call ranges i)))
        }
      }
      label _unused_continueLabel[120549]
      label _breakLabel[120548]
    }
    (120593 return(120581 'new'(120592 call _domain dist rank(120587 call . _value c"idxType") stridable r)))
  }
  where {
    (120481 call chpl__isTupleOfRanges ranges)
  }
  function _domain[125908](?).this[120604](arg _mt[126024]:_MT[238], arg this[126022]:_domain[125908](?), arg args[120601]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown collapsedDim[120618](120616 call * rank bool[10])
    (120621 'end of statement')
    unknown idx[120627](120625 call * rank idxType)
    (120630 'end of statement')
    unknown uprank[120636] "param"(120635 call chpl__countRanges(120633 'expand_tuple' args))
    (120639 'end of statement')
    unknown upstridable[120650] "param"(120648 call ||(120641 call . this c"stridable")(120647 call chpl__anyRankChangeStridable args))
    (120653 'end of statement')
    unknown upranges[120667](120665 call * uprank(120664 call range(idxType =(120657 call . _value c"idxType"))(stridable = upstridable)))
    (120670 'end of statement')
    unknown updim[120672] 0
    (120675 'end of statement')
    {
      unknown i[120766] 0
      unknown tmp[120767] "maybe param" "temp"
      (120779 'move' tmp[120767](120777 call chpl_compute_low_param_loop_bound 0(120679 call - rank 1)))
      unknown tmp[120768] "maybe param" "temp"
      (120789 'move' tmp[120768](120787 call chpl_compute_high_param_loop_bound 0(120784 call - rank 1)))
      unknown tmp[120769] "maybe param" "temp"
      (120792 'move' tmp[120769] 1)
      ParamForLoop[120794]
      { i[120766] tmp[120767] tmp[120768] tmp[120769]
        {
          if(120761 call _cond_test(120689 call isRange(120687 call args i)))
          {
            (120695 call =(120693 call collapsedDim i) 0)
            (120710 call =(120702 call idx i)(120707 call .(120706 call dim i) c"alignedLow"))
            (120733 call =(120716 call upranges updim)(120732 call(120726 call(120721 call .(120718 call . this c"_value") c"dsiDim") i)(120730 call args i)))
            (120738 call += updim 1)
          }
          {
            (120746 call =(120744 call collapsedDim i) 1)
            (120758 call =(120753 call idx i)(120757 call args i))
          }
        }
      }
      label _unused_continueLabel[120771]
      label _breakLabel[120770]
    }
    const emptyrange[120808] "const"(120807 'typeof'(120806 call upranges 0))
    (120811 'end of statement')
    if(120871 call _cond_test(120816 call !(120815 call contains idx)))
    {
      {
        unknown d[120833] 0
        unknown tmp[120834] "maybe param" "temp"
        (120846 'move' tmp[120834](120844 call chpl_compute_low_param_loop_bound 0(120821 call - uprank 1)))
        unknown tmp[120835] "maybe param" "temp"
        (120856 'move' tmp[120835](120854 call chpl_compute_high_param_loop_bound 0(120851 call - uprank 1)))
        unknown tmp[120836] "maybe param" "temp"
        (120859 'move' tmp[120836] 1)
        ParamForLoop[120861]
        { d[120833] tmp[120834] tmp[120835] tmp[120836]
          (120830 call =(120828 call upranges d) emptyrange)
        }
        label _unused_continueLabel[120838]
        label _breakLabel[120837]
      }
    }
    const rcdist[120895] "const"(120877 'new'(_chpl_manager = unmanaged[220](?))(120894 call ArrayViewRankChangeDist(downDistPid =(120880 call . dist c"_pid"))(downDistInst =(120886 call . dist c"_instance"))(collapsedDim = collapsedDim)(idx = idx)))
    (120898 'end of statement')
    const rcdistRec[120904] "const"(120899 'new'(120903 call _distribution rcdist))
    (120907 'end of statement')
    (120929 return(120908 'new'(120928 call _domain rcdistRec uprank(120917 call .(120916 call upranges 0) c"idxType")(120924 call .(120923 call upranges 0) c"stridable") upranges)))
  }
  where {
    (120613 call _validRankChangeArgs args(120610 call . _value c"idxType"))
  }
  function _domain[125908](?).this[120942](arg _mt[126028]:_MT[238], arg this[126026]:_domain[125908](?), arg i[120938] ... :
  integral) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120963 call compilerError "domain slice requires a range in at least one dimension")
  }
  function _domain[125908](?).this[120975](arg _mt[126032]:_MT[238], arg this[126030]:_domain[125908](?), arg args[120972]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(121026 call _cond_test(120979 call == numArgs rank))
    {
      (121000 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121024 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
  }
  function _domain[125908](?).dims[121036](arg _mt[126036]:_MT[238], arg this[126034]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    (121044 return(121043 call(121039 call . _value c"dsiDims")))
  }
  function _domain[125908](?).dim[121055](arg _mt[126040]:_MT[238], arg this[126038]:_domain[125908](?), arg d[121052] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (121058 'use' HaltWrappers)
    if(121135 call _cond_test boundsChecking)
    {
      if(121130 call _cond_test(121070 call ||(121064 call < d 0)(121068 call >= d rank)))
      {
        (121128 call(121073 call . HaltWrappers c"boundsCheckHalt")(121125 call +(121116 call +(121097 call + "dim("(121095 call _cast string[26] d)) ") is out-of-bounds; must be 0..")(121123 call _cast string[26](121120 call - rank 1))))
      }
    }
    (121147 return(121146 call(121141 call . _value c"dsiDim") d))
  }
  function _domain[125908](?).dim[121157](arg _mt[126044]:_MT[238], arg this[126042]:_domain[125908](?), param arg d[121154] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    if(121197 call _cond_test(121170 call ||(121161 call < d 0)(121168 call > d(121166 call - rank 1))))
    {
      (121195 call compilerError "dim() must take a value from 0.."(121193 call - rank 1))
    }
    (121210 return(121209 call(121204 call . _value c"dsiDim") d))
  }
  function _domain[125908](?).dimIter[121218](arg _mt[126048]:_MT[238], arg this[126046]:_domain[125908](?), param arg d[121216]:_any[178](?), arg ind[121220]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[121236] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121237] "expr temp" "temp"
      (121246 'move' _iterator[121237](121244 call _getIterator(121232 call(121226 call . _value c"dimIter") d ind)))
      Defer
      {
        {
          (121263 call _freeIterator _iterator[121237])
        }
      }
      { scopeless type
        (121252 'move' _indexOfInterest[121236](121249 call iteratorIndex _iterator[121237]))
      }
      ForLoop[121238]
      {
        unknown i[121256] "index var" "insert auto destroy"
        (121258 'move' i[121256] _indexOfInterest[121236])
        (121234 yield i)
        label _continueLabel[121241]
        _indexOfInterest[121236]
        _iterator[121237]
      }
      label _breakLabel[121242]
    }
  }
  function _domain[125908](?).shape[121275](arg _mt[126052]:_MT[238], arg this[126050]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown s[121297](121295 call * rank(121292 call .(121291 call dim 0) c"intIdxType"))
    (121300 'end of statement')
    {
      unknown _indexOfInterest[121332] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121333] "expr temp" "temp"
      (121367 'move' _iterator[121333](121320 call _build_tuple(121350 call _getIterator(121360 call chpl_direct_counted_range_iter 0(121356 call . s c"size")))(121364 call _getIterator(121363 call dims))))
      Defer
      {
        {
          (121397 call _freeIterator _iterator[121333])
        }
      }
      { scopeless type
        (121372 'move' _indexOfInterest[121332](121369 call iteratorIndex _iterator[121333]))
      }
      ForLoop[121334]
      {
        (121377 call _check_tuple_var_decl _indexOfInterest[121332] 2)
        unknown i[121383] "index var" "insert auto destroy"
        (121385 'move' i[121383](121381 call _indexOfInterest[121332] 0))
        unknown r[121390] "index var" "insert auto destroy"
        (121392 'move' r[121390](121388 call _indexOfInterest[121332] 1))
        (121329 call =(121324 call s i)(121326 call . r c"size"))
        label _continueLabel[121337]
        _indexOfInterest[121332]
        _iterator[121333]
      }
      label _breakLabel[121338]
    }
    (121405 return s)
  }
  where {
    (121285 call ||(121280 call isRectangularDom this)(121284 call isSparseDom this))
  }
  function _domain[125908](?).shape[121412](arg _mt[126056]:_MT[238], arg this[126054]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown s[121422](121420 call _build_tuple(121419 'typeof' size))
    (121425 'end of statement')
    (121432 call =(121430 call s 0) size)
    (121436 return s)
  }
  where {
    (121417 call isAssociativeDom this)
  }
  function _domain[125908](?).shape[121443](arg _mt[126060]:_MT[238], arg this[126058]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121464 call compilerError ".shape not supported on this domain")
  }
  function _domain[125908](?).buildArray[121473](arg _mt[126064]:_MT[238], arg this[126062]:_domain[125908](?), arg eltType[121471]:_any[178](?), param arg initElts[121476] :
  bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    if(121505 call _cond_test(121481 call == eltType void[4]))
    {
      (121502 call compilerError "array element type cannot be void")
    }
    if(121673 call _cond_test(121513 call isGenericType eltType))
    {
      (121539 call compilerWarning(121536 call + "creating an array with element type "(121534 call _cast string[26] eltType)))
      if(121577 call _cond_test(121553 call &&(121545 call isClassType eltType)(121551 call !(121550 call isGenericType(121548 'to borrowed class from unknown' eltType)))))
      {
        (121574 call compilerWarning "which now means class type with generic management")
      }
      (121600 call compilerError "array element type cannot currently be generic")
    }
    {
      if(121669 call _cond_test(121612 call &&(121605 call isSparseDom this)(121610 call !(121609 call isDefaultInitializable eltType))))
      {
        if(121664 call _cond_test(121617 call isNonNilableClass eltType))
        {
          (121637 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121661 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    if(121790 call _cond_test chpl_warnUnstable)
    {
      if(121785 call _cond_test(121687 call &&(121682 call isRectangularDom this)(121684 call . this c"stridable")))
      {
        if(121781 call _cond_test(121691 call == rank 1))
        {
          if(121721 call _cond_test(121698 call <(121694 call . this c"stride") 0))
          {
            (121719 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121746] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121747] "expr temp" "temp"
            (121756 'move' _iterator[121747](121754 call _getIterator(121729 call . this c"stride")))
            Defer
            {
              {
                (121773 call _freeIterator _iterator[121747])
              }
            }
            { scopeless type
              (121762 'move' _indexOfInterest[121746](121759 call iteratorIndex _iterator[121747]))
            }
            ForLoop[121748]
            {
              unknown s[121766] "index var" "insert auto destroy"
              (121768 'move' s[121766] _indexOfInterest[121746])
              if(121741 call _cond_test(121734 call < s 0))
              {
                (121739 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121751]
              _indexOfInterest[121746]
              _iterator[121747]
            }
            label _breakLabel[121752]
          }
        }
      }
    }
    unknown x[121805](121804 call(121798 call . _value c"dsiBuildArray") eltType initElts)
    (121808 'end of statement')
    function help[121811]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      (121821 call(121816 call . _value c"add_arr") x)
    }
    (121828 call help)
    (121837 call chpl_incRefCountsForDomainsInArrayEltTypes x(121834 call . x c"eltType"))
    (121843 return(121842 call _newArray x))
  }
  function _domain[125908](?).buildArrayWith[121851](arg _mt[126068]:_MT[238], arg this[126066]:_domain[125908](?), arg eltType[121849]:_any[178](?), arg data[121857] :
  (121856 call _ddata eltType), arg allocSize[121861] :
  int[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    if(121874 call _cond_test(121866 call == eltType void[4]))
    {
      (121871 call compilerError "array element type cannot be void")
    }
    unknown x[121890](121889 call(121882 call . _value c"dsiBuildArrayWith") eltType data allocSize)
    (121893 'end of statement')
    function help[121896]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      (121904 call(121899 call . _value c"add_arr") x)
    }
    (121911 call help)
    (121920 call chpl_incRefCountsForDomainsInArrayEltTypes x(121917 call . x c"eltType"))
    (121926 return(121925 call _newArray x))
  }
  function _domain[125908](?).clear[121932](arg _mt[126072]:_MT[238], arg this[126070]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121940](121939 'typeof' this)
    (121943 'end of statement')
    (121947 call = this emptyDom)
  }
  where {
    (121937 call isRectangularDom this)
  }
  function _domain[125908](?).clear[121955](arg _mt[126076]:_MT[238], arg this[126074]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (121964 call(121960 call . _value c"dsiClear"))
  }
  function _domain[125908](?).add[121973](arg _mt[126080]:_MT[238], arg this[126078]:_domain[125908](?), in arg i[121971]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (121984 return(121983 call(121978 call . _value c"dsiAdd") i))
  }
  function _domain[125908](?).bulkAdd[122001](arg _mt[126084]:_MT[238], arg this[126082]:_domain[125908](?), arg inds[121998] :
  (121995 call chpl__buildArrayRuntimeType nil[44](121992 call . _value c"idxType")), arg dataSorted[122004] =
  0, arg isUnique[122008] =
  0, arg preserveInds[122012] =
  1, arg addOn[122016] =
  nilLocale) : _unknown[51] "method" "primary method" "no doc"
  {
    if(122042 call _cond_test(122037 call ==(122033 call . inds c"size") 0))
    {
      (122040 return 0)
    }
    (122061 return(122060 call(122051 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (122030 call &&(122022 call isSparseDom this)(122028 call ==(122024 call . _value c"rank") 1))
  }
  function _domain[125908](?).makeIndexBuffer[122072](arg _mt[126088]:_MT[238], arg this[126086]:_domain[125908](?), arg size[122069] :
  int[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (122083 return(122082 call(122077 call . _value c"dsiMakeIndexBuffer") size))
  }
  function _domain[125908](?).bulkAdd[122106](arg _mt[126092]:_MT[238], arg this[126090]:_domain[125908](?), arg inds[122103] :
  (122100 call chpl__buildArrayRuntimeType nil[44](122098 call *(122091 call . _value c"rank")(122095 call . _value c"idxType"))), arg dataSorted[122109] =
  0, arg isUnique[122113] =
  0, arg preserveInds[122117] =
  1, arg addOn[122121] =
  nilLocale) : _unknown[51] "method" "primary method"
  {
    if(122147 call _cond_test(122142 call ==(122138 call . inds c"size") 0))
    {
      (122145 return 0)
    }
    (122164 return(122163 call(122154 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (122135 call &&(122127 call isSparseDom this)(122133 call >(122129 call . _value c"rank") 1))
  }
  function _domain[125908](?).remove[122173](arg _mt[126096]:_MT[238], arg this[126094]:_domain[125908](?), arg i[122171]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (122184 return(122183 call(122178 call . _value c"dsiRemove") i))
  }
  function _domain[125908](?).requestCapacity[122193](arg _mt[126100]:_MT[238], arg this[126098]:_domain[125908](?), arg i[122191]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(122221 call _cond_test(122197 call < i 0))
    {
      (122218 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    if(122253 call _cond_test(122230 call !(122229 call isAssociativeDom this)))
    {
      (122251 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    (122266 call(122261 call . _value c"dsiRequestCapacity") i)
  }
  function _domain[125908](?).size[122272](arg _mt[126104]:_MT[238], arg this[126102]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122278 return(122275 call . _value c"dsiNumIndices"))
  }
  function _domain[125908](?).numIndices[122285](arg _mt[126108]:_MT[238], arg this[126106]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122325 call compilerWarning(122322 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122329 return size)
  }
  function _domain[125908](?).low[122335](arg _mt[126112]:_MT[238], arg this[126110]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122341 return(122338 call . _value c"dsiLow"))
  }
  function _domain[125908](?).high[122348](arg _mt[126116]:_MT[238], arg this[126114]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122356 return(122353 call . _value c"dsiHigh"))
  }
  function _domain[125908](?).stride[122363](arg _mt[126120]:_MT[238], arg this[126118]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122369 return(122366 call . _value c"dsiStride"))
  }
  function _domain[125908](?).alignment[122376](arg _mt[126124]:_MT[238], arg this[126122]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122384 return(122381 call . _value c"dsiAlignment"))
  }
  function _domain[125908](?).first[122391](arg _mt[126128]:_MT[238], arg this[126126]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122399 return(122396 call . _value c"dsiFirst"))
  }
  function _domain[125908](?).last[122406](arg _mt[126132]:_MT[238], arg this[126130]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122414 return(122411 call . _value c"dsiLast"))
  }
  function _domain[125908](?).alignedLow[122421](arg _mt[126136]:_MT[238], arg this[126134]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122429 return(122426 call . _value c"dsiAlignedLow"))
  }
  function _domain[125908](?).alignedHigh[122436](arg _mt[126140]:_MT[238], arg this[126138]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122444 return(122441 call . _value c"dsiAlignedHigh"))
  }
  function _domain[125908](?).indices[122451](arg _mt[126144]:_MT[238], arg this[126142]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122472 call compilerError "domains do not support '.indices'")
  }
  function _domain[125908](?).contains[122489](arg _mt[126148]:_MT[238], arg this[126146]:_domain[125908](?), arg i[122486] :
  (122484 call * rank(122481 call . _value c"idxType"))) : _unknown[51] "method" "primary method" "no doc"
  {
    if(122526 call _cond_test(122499 call ||(122494 call isRectangularDom this)(122498 call isSparseDom this)))
    {
      (122512 return(122511 call(122502 call . _value c"dsiMember")(122509 call _makeIndexTuple rank i)))
    }
    {
      (122524 return(122523 call(122515 call . _value c"dsiMember")(122521 call i 0)))
    }
  }
  function _domain[125908](?).contains[122546](arg _mt[126152]:_MT[238], arg this[126150]:_domain[125908](?), arg i[122542] ... :
  (122538 call . _value c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (122552 return(122551 call contains i))
  }
  function _domain[125908](?).member[122569](arg _mt[126156]:_MT[238], arg this[126154]:_domain[125908](?), arg i[122566] :
  (122564 call * rank(122561 call . _value c"idxType"))) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (122609 call compilerWarning(122606 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122619 return(122618 call(122613 call . this c"contains") i))
  }
  function _domain[125908](?).member[122634](arg _mt[126160]:_MT[238], arg this[126158]:_domain[125908](?), arg i[122630] ... :
  (122626 call . _value c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (122642 call compilerWarning(122639 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122652 return(122651 call(122646 call . this c"contains") i))
  }
  function _domain[125908](?).isSubset[122662](arg _mt[126164]:_MT[238], arg this[126162]:_domain[125908](?), arg super[122659] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(122729 call _cond_test(122674 call !(122672 call ||(122667 call isAssociativeDom this)(122671 call isRectangularDom this))))
    {
      if(122722 call _cond_test(122679 call isSparseDom this))
      {
        (122699 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122720 call compilerError "isSubset not supported on this domain type")
      }
    }
    if(122846 call _cond_test(122738 call !=(122735 'typeof' super)(122737 'typeof' this)))
    {
      if(122841 call _cond_test(122743 call isRectangularDom this))
      {
        if(122813 call _cond_test(122752 call !=(122745 call . super c"rank")(122749 call . this c"rank")))
        {
          (122773 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          if(122808 call _cond_test(122785 call !=(122779 'typeof'(122776 call . super c"low"))(122784 'typeof'(122781 call . this c"low"))))
          {
            (122806 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122839 call compilerError "isSubset called with different associative domain types")
      }
    }
    if(122977 call _cond_test(122854 call isRectangularDom this))
    {
      unknown contains[122856] 1
      (122859 'end of statement')
      {
        unknown _indexOfInterest[122926] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122927] "expr temp" "temp"
        (122936 'move' _iterator[122927](122934 call _getIterator(122951 call chpl_direct_range_iter 0(122941 call -(122943 call .(122948 call(122945 call . this c"dims")) c"size") 1) 1)))
        Defer
        {
          {
            (122967 call _freeIterator _iterator[122927])
          }
        }
        { scopeless type
          (122956 'move' _indexOfInterest[122926](122953 call iteratorIndex _iterator[122927]))
        }
        ForLoop[122928]
        {
          unknown i[122960] "index var" "insert auto destroy"
          (122962 'move' i[122960] _indexOfInterest[122926])
          {
            {
              unknown tmp[122902] "temp"
              (122905 'move' tmp[122902](122904 'addr of' contains))
              (122910 call = tmp[122902](122907 call && tmp[122902](122900 call(122887 call .(122886 call(122883 call(122879 call . super c"dims")) i) c"contains")(122898 call(122895 call(122891 call . this c"dims")) i))))
            }
            if(122921 call _cond_test(122916 call == contains 0))
            {
              break nil[44]
            }
          }
          label _continueLabel[122931]
          _indexOfInterest[122926]
          _iterator[122927]
        }
        label _breakLabel[122932]
      }
      (122975 return contains)
    }
    (122997 return(122995 'reduce' LogicalAndReduceScanOp(122991 forall  i  in  this do
    {
      (122990 call(122985 call . super c"contains") i)
    } ) 0))
  }
  function _domain[125908](?).isSuper[123007](arg _mt[126168]:_MT[238], arg this[126166]:_domain[125908](?), arg sub[123004] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(123076 call _cond_test(123019 call !(123017 call ||(123012 call isAssociativeDom this)(123016 call isRectangularDom this))))
    {
      if(123069 call _cond_test(123024 call isSparseDom this))
      {
        (123044 call compilerError "isSuper not supported on sparse domains")
      }
      {
        (123067 call compilerError "isSuper not supported on the domain type "(123066 'typeof' this))
      }
    }
    if(123193 call _cond_test(123085 call !=(123082 'typeof' sub)(123084 'typeof' this)))
    {
      if(123188 call _cond_test(123090 call isRectangularDom this))
      {
        if(123160 call _cond_test(123099 call !=(123092 call . sub c"rank")(123096 call . this c"rank")))
        {
          (123120 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          if(123155 call _cond_test(123132 call !=(123126 'typeof'(123123 call . sub c"low"))(123131 'typeof'(123128 call . this c"low"))))
          {
            (123153 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123186 call compilerError "isSuper called with different associative domain types")
      }
    }
    if(123324 call _cond_test(123201 call isRectangularDom this))
    {
      unknown contains[123203] 1
      (123206 'end of statement')
      {
        unknown _indexOfInterest[123273] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123274] "expr temp" "temp"
        (123283 'move' _iterator[123274](123281 call _getIterator(123298 call chpl_direct_range_iter 0(123288 call -(123290 call .(123295 call(123292 call . this c"dims")) c"size") 1) 1)))
        Defer
        {
          {
            (123314 call _freeIterator _iterator[123274])
          }
        }
        { scopeless type
          (123303 'move' _indexOfInterest[123273](123300 call iteratorIndex _iterator[123274]))
        }
        ForLoop[123275]
        {
          unknown i[123307] "index var" "insert auto destroy"
          (123309 'move' i[123307] _indexOfInterest[123273])
          {
            {
              unknown tmp[123249] "temp"
              (123252 'move' tmp[123249](123251 'addr of' contains))
              (123257 call = tmp[123249](123254 call && tmp[123249](123247 call(123234 call .(123233 call(123230 call(123226 call . this c"dims")) i) c"contains")(123245 call(123242 call(123238 call . sub c"dims")) i))))
            }
            if(123268 call _cond_test(123263 call == contains 0))
            {
              break nil[44]
            }
          }
          label _continueLabel[123278]
          _indexOfInterest[123273]
          _iterator[123274]
        }
        label _breakLabel[123279]
      }
      (123322 return contains)
    }
    (123344 return(123342 'reduce' LogicalAndReduceScanOp(123338 forall  i  in  sub do
    {
      (123337 call(123332 call . this c"contains") i)
    } ) 0))
  }
  function _domain[125908](?).indexOrder[123352](arg _mt[126172]:_MT[238], arg this[126170]:_domain[125908](?), arg i[123350]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (123367 return(123366 call(123357 call . _value c"dsiIndexOrder")(123364 call _makeIndexTuple rank i)))
  }
  function _domain[125908](?).position[123376](arg _mt[126176]:_MT[238], arg this[126174]:_domain[125908](?), arg i[123374]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ind[123383](123382 call _makeIndexTuple rank i)
    unknown pos[123390](123388 call * rank intIdxType)
    (123393 'end of statement')
    {
      unknown _indexOfInterest[123426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123427] "expr temp" "temp"
      (123436 'move' _iterator[123427](123434 call _getIterator(123444 call chpl_direct_range_iter 0(123441 call - rank 1) 1)))
      Defer
      {
        {
          (123460 call _freeIterator _iterator[123427])
        }
      }
      { scopeless type
        (123449 'move' _indexOfInterest[123426](123446 call iteratorIndex _iterator[123427]))
      }
      ForLoop[123428]
      {
        unknown d[123453] "index var" "insert auto destroy"
        (123455 'move' d[123453] _indexOfInterest[123426])
        (123423 call =(123406 call pos d)(123422 call(123414 call .(123413 call(123408 call . _value c"dsiDim") d) c"indexOrder")(123420 call ind d)))
        label _continueLabel[123431]
        _indexOfInterest[123426]
        _iterator[123427]
      }
      label _breakLabel[123432]
    }
    (123468 return pos)
  }
  function _domain[125908](?).expand[123481](arg _mt[126180]:_MT[238], arg this[126178]:_domain[125908](?), arg off[123478] :
  (123476 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(123566 call _cond_test(123492 call isAssociativeDom this))
    {
      (123512 call compilerError "expand not supported on associative domains")
    }
    {
      if(123560 call _cond_test(123517 call isSparseDom this))
      {
        (123537 call compilerError "expand not supported on sparse domains")
      }
      {
        (123558 call compilerError "expand not supported on this domain type")
      }
    }
  }
  where {
    (123487 call !(123486 call isRectangularDom this))
  }
  function _domain[125908](?).expand[123584](arg _mt[126184]:_MT[238], arg this[126182]:_domain[125908](?), arg off[123580] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    (123590 return(123589 call expand off))
  }
  function _domain[125908](?).expand[123604](arg _mt[126188]:_MT[238], arg this[126186]:_domain[125908](?), arg off[123601] :
  (123599 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[123609](123608 call dims)
    (123612 'end of statement')
    {
      unknown _indexOfInterest[123705] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123706] "expr temp" "temp"
      (123715 'move' _iterator[123706](123713 call _getIterator(123723 call chpl_direct_range_iter 0(123720 call - rank 1) 1)))
      Defer
      {
        {
          (123739 call _freeIterator _iterator[123706])
        }
      }
      { scopeless type
        (123728 'move' _indexOfInterest[123705](123725 call iteratorIndex _iterator[123706]))
      }
      ForLoop[123707]
      {
        unknown i[123732] "index var" "insert auto destroy"
        (123734 'move' i[123732] _indexOfInterest[123705])
        {
          (123641 call =(123625 call ranges i)(123640 call(123632 call .(123629 call ranges i) c"expand")(123638 call off i)))
          if(123701 call _cond_test(123659 call >(123649 call .(123648 call ranges i) c"low")(123656 call .(123655 call ranges i) c"high")))
          {
            (123698 call halt "***Error: Degenerate dimension created in dimension " i "***")
          }
        }
        label _continueLabel[123710]
        _indexOfInterest[123705]
        _iterator[123706]
      }
      label _breakLabel[123711]
    }
    (123758 return(123746 'new'(123757 call _domain dist rank(123752 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125908](?).expand[123768](arg _mt[126192]:_MT[238], arg this[126190]:_domain[125908](?), arg off[123765] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    unknown ranges[123777](123776 call dims)
    (123780 'end of statement')
    {
      unknown _indexOfInterest[123807] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123808] "expr temp" "temp"
      (123817 'move' _iterator[123808](123815 call _getIterator(123825 call chpl_direct_range_iter 0(123822 call - rank 1) 1)))
      Defer
      {
        {
          (123841 call _freeIterator _iterator[123808])
        }
      }
      { scopeless type
        (123830 'move' _indexOfInterest[123807](123827 call iteratorIndex _iterator[123808]))
      }
      ForLoop[123809]
      {
        unknown i[123834] "index var" "insert auto destroy"
        (123836 'move' i[123834] _indexOfInterest[123807])
        (123804 call =(123793 call ranges i)(123803 call(123798 call .(123797 call dim i) c"expand") off))
        label _continueLabel[123812]
        _indexOfInterest[123807]
        _iterator[123808]
      }
      label _breakLabel[123813]
    }
    (123860 return(123848 'new'(123859 call _domain dist rank(123854 call . _value c"idxType") stridable ranges)))
  }
  where {
    (123772 call > rank 1)
  }
  function _domain[125908](?).exterior[123874](arg _mt[126196]:_MT[238], arg this[126194]:_domain[125908](?), arg off[123871] :
  (123869 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(123959 call _cond_test(123885 call isAssociativeDom this))
    {
      (123905 call compilerError "exterior not supported on associative domains")
    }
    {
      if(123953 call _cond_test(123910 call isSparseDom this))
      {
        (123930 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123951 call compilerError "exterior not supported on this domain type")
      }
    }
  }
  where {
    (123880 call !(123879 call isRectangularDom this))
  }
  function _domain[125908](?).exterior[123977](arg _mt[126200]:_MT[238], arg this[126198]:_domain[125908](?), arg off[123973] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    (123983 return(123982 call exterior off))
  }
  function _domain[125908](?).exterior[123997](arg _mt[126204]:_MT[238], arg this[126202]:_domain[125908](?), arg off[123994] :
  (123992 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[124002](124001 call dims)
    (124005 'end of statement')
    {
      unknown _indexOfInterest[124037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124038] "expr temp" "temp"
      (124047 'move' _iterator[124038](124045 call _getIterator(124055 call chpl_direct_range_iter 0(124052 call - rank 1) 1)))
      Defer
      {
        {
          (124071 call _freeIterator _iterator[124038])
        }
      }
      { scopeless type
        (124060 'move' _indexOfInterest[124037](124057 call iteratorIndex _iterator[124038]))
      }
      ForLoop[124039]
      {
        unknown i[124064] "index var" "insert auto destroy"
        (124066 'move' i[124064] _indexOfInterest[124037])
        (124034 call =(124018 call ranges i)(124033 call(124025 call .(124022 call dim i) c"exterior")(124031 call off i)))
        label _continueLabel[124042]
        _indexOfInterest[124037]
        _iterator[124038]
      }
      label _breakLabel[124043]
    }
    (124090 return(124078 'new'(124089 call _domain dist rank(124084 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125908](?).exterior[124100](arg _mt[126208]:_MT[238], arg this[126206]:_domain[125908](?), arg off[124097] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    unknown offTup[124110](124108 call * rank intIdxType)
    (124113 'end of statement')
    {
      unknown _indexOfInterest[124131] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124132] "expr temp" "temp"
      (124141 'move' _iterator[124132](124139 call _getIterator(124149 call chpl_direct_range_iter 0(124146 call - rank 1) 1)))
      Defer
      {
        {
          (124165 call _freeIterator _iterator[124132])
        }
      }
      { scopeless type
        (124154 'move' _indexOfInterest[124131](124151 call iteratorIndex _iterator[124132]))
      }
      ForLoop[124133]
      {
        unknown i[124158] "index var" "insert auto destroy"
        (124160 'move' i[124158] _indexOfInterest[124131])
        (124128 call =(124126 call offTup i) off)
        label _continueLabel[124136]
        _indexOfInterest[124131]
        _iterator[124132]
      }
      label _breakLabel[124137]
    }
    (124176 return(124175 call exterior offTup))
  }
  where {
    (124104 call != rank 1)
  }
  function _domain[125908](?).interior[124190](arg _mt[126212]:_MT[238], arg this[126210]:_domain[125908](?), arg off[124187] :
  (124185 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(124275 call _cond_test(124201 call isAssociativeDom this))
    {
      (124221 call compilerError "interior not supported on associative domains")
    }
    {
      if(124269 call _cond_test(124226 call isSparseDom this))
      {
        (124246 call compilerError "interior not supported on sparse domains")
      }
      {
        (124267 call compilerError "interior not supported on this domain type")
      }
    }
  }
  where {
    (124196 call !(124195 call isRectangularDom this))
  }
  function _domain[125908](?).interior[124293](arg _mt[126216]:_MT[238], arg this[126214]:_domain[125908](?), arg off[124289] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    (124299 return(124298 call interior off))
  }
  function _domain[125908](?).interior[124313](arg _mt[126220]:_MT[238], arg this[126218]:_domain[125908](?), arg off[124310] :
  (124308 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[124318](124317 call dims)
    (124321 'end of statement')
    {
      unknown _indexOfInterest[124455] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124456] "expr temp" "temp"
      (124465 'move' _iterator[124456](124463 call _getIterator(124473 call chpl_direct_range_iter 0(124470 call - rank 1) 1)))
      Defer
      {
        {
          (124489 call _freeIterator _iterator[124456])
        }
      }
      { scopeless type
        (124478 'move' _indexOfInterest[124455](124475 call iteratorIndex _iterator[124456]))
      }
      ForLoop[124457]
      {
        unknown i[124482] "index var" "insert auto destroy"
        (124484 'move' i[124482] _indexOfInterest[124455])
        {
          if(124425 call _cond_test(124399 call ||(124363 call &&(124336 call >(124334 call off i) 0)(124361 call <(124352 call -(124346 call +(124342 call .(124341 call dim i) c"_high") 1)(124351 call off i))(124358 call .(124357 call dim i) c"_low")))(124397 call &&(124370 call <(124368 call off i) 0)(124395 call >(124386 call -(124380 call -(124376 call .(124375 call dim i) c"_low") 1)(124385 call off i))(124392 call .(124391 call dim i) c"_high")))))
          {
            (124422 call halt "***Error: Argument to 'interior' function out of range in dimension " i "***")
          }
          (124452 call =(124433 call ranges i)(124451 call(124443 call .(124440 call(124435 call . _value c"dsiDim") i) c"interior")(124449 call off i)))
        }
        label _continueLabel[124460]
        _indexOfInterest[124455]
        _iterator[124456]
      }
      label _breakLabel[124461]
    }
    (124508 return(124496 'new'(124507 call _domain dist rank(124502 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125908](?).interior[124518](arg _mt[126224]:_MT[238], arg this[126222]:_domain[125908](?), arg off[124515] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    unknown offTup[124528](124526 call * rank intIdxType)
    (124531 'end of statement')
    {
      unknown _indexOfInterest[124549] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124550] "expr temp" "temp"
      (124559 'move' _iterator[124550](124557 call _getIterator(124567 call chpl_direct_range_iter 0(124564 call - rank 1) 1)))
      Defer
      {
        {
          (124583 call _freeIterator _iterator[124550])
        }
      }
      { scopeless type
        (124572 'move' _indexOfInterest[124549](124569 call iteratorIndex _iterator[124550]))
      }
      ForLoop[124551]
      {
        unknown i[124576] "index var" "insert auto destroy"
        (124578 'move' i[124576] _indexOfInterest[124549])
        (124546 call =(124544 call offTup i) off)
        label _continueLabel[124554]
        _indexOfInterest[124549]
        _iterator[124550]
      }
      label _breakLabel[124555]
    }
    (124594 return(124593 call interior offTup))
  }
  where {
    (124522 call != rank 1)
  }
  function _domain[125908](?).translate[124603](arg _mt[126228]:_MT[238], arg this[126226]:_domain[125908](?), arg off[124601]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(124688 call _cond_test(124614 call isAssociativeDom this))
    {
      (124634 call compilerError "translate not supported on associative domains")
    }
    {
      if(124682 call _cond_test(124639 call isSparseDom this))
      {
        (124659 call compilerError "translate not supported on sparse domains")
      }
      {
        (124680 call compilerError "translate not supported on this domain type")
      }
    }
  }
  where {
    (124609 call !(124608 call isRectangularDom this))
  }
  function _domain[125908](?).translate[124704](arg _mt[126232]:_MT[238], arg this[126230]:_domain[125908](?), arg off[124701]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    (124710 return(124709 call translate off))
  }
  function _domain[125908](?).translate[124719](arg _mt[126236]:_MT[238], arg this[126234]:_domain[125908](?), arg off[124717]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(124753 call _cond_test(124730 call !=(124726 call . off c"size") rank))
    {
      (124751 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown ranges[124762](124761 call dims)
    (124765 'end of statement')
    {
      unknown _indexOfInterest[124799] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124800] "expr temp" "temp"
      (124809 'move' _iterator[124800](124807 call _getIterator(124817 call chpl_direct_range_iter 0(124814 call - rank 1) 1)))
      Defer
      {
        {
          (124833 call _freeIterator _iterator[124800])
        }
      }
      { scopeless type
        (124822 'move' _indexOfInterest[124799](124819 call iteratorIndex _iterator[124800]))
      }
      ForLoop[124801]
      {
        unknown i[124826] "index var" "insert auto destroy"
        (124828 'move' i[124826] _indexOfInterest[124799])
        (124796 call =(124777 call ranges i)(124795 call(124787 call .(124784 call(124779 call . _value c"dsiDim") i) c"translate")(124793 call off i)))
        label _continueLabel[124804]
        _indexOfInterest[124799]
        _iterator[124800]
      }
      label _breakLabel[124805]
    }
    (124852 return(124840 'new'(124851 call _domain dist rank(124846 call . _value c"idxType") stridable ranges)))
  }
  where {
    (124724 call isTuple off)
  }
  function _domain[125908](?).translate[124861](arg _mt[126240]:_MT[238], arg this[126238]:_domain[125908](?), arg off[124859]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown offTup[124880](124878 call * rank(124877 'typeof' off))
    (124883 'end of statement')
    {
      unknown _indexOfInterest[124901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124902] "expr temp" "temp"
      (124911 'move' _iterator[124902](124909 call _getIterator(124919 call chpl_direct_range_iter 0(124916 call - rank 1) 1)))
      Defer
      {
        {
          (124935 call _freeIterator _iterator[124902])
        }
      }
      { scopeless type
        (124924 'move' _indexOfInterest[124901](124921 call iteratorIndex _iterator[124902]))
      }
      ForLoop[124903]
      {
        unknown i[124928] "index var" "insert auto destroy"
        (124930 'move' i[124928] _indexOfInterest[124901])
        (124898 call =(124896 call offTup i) off)
        label _continueLabel[124906]
        _indexOfInterest[124901]
        _iterator[124902]
      }
      label _breakLabel[124907]
    }
    (124946 return(124945 call translate offTup))
  }
  where {
    (124873 call &&(124865 call != rank 1)(124871 call !(124870 call isTuple off)))
  }
  function _domain[125908](?).isEmpty[124953](arg _mt[126244]:_MT[238], arg this[126242]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    (124963 return(124961 call ==(124957 call . this c"size") 0))
  }
  { scopeless type
    bool[10]
  }
  function _domain[125908](?).chpl__unTranslate[124977](arg _mt[126248]:_MT[238], arg this[126246]:_domain[125908](?), arg off[124973] ... :
  integral) : _unknown[51] "method" "primary method"
  {
    (124983 return(124982 call chpl__unTranslate off))
  }
  function _domain[125908](?).chpl__unTranslate[124997](arg _mt[126252]:_MT[238], arg this[126250]:_domain[125908](?), arg off[124994] :
  (124992 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    unknown ranges[125002](125001 call dims)
    (125005 'end of statement')
    {
      unknown _indexOfInterest[125037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125038] "expr temp" "temp"
      (125047 'move' _iterator[125038](125045 call _getIterator(125055 call chpl_direct_range_iter 0(125052 call - rank 1) 1)))
      Defer
      {
        {
          (125071 call _freeIterator _iterator[125038])
        }
      }
      { scopeless type
        (125060 'move' _indexOfInterest[125037](125057 call iteratorIndex _iterator[125038]))
      }
      ForLoop[125039]
      {
        unknown i[125064] "index var" "insert auto destroy"
        (125066 'move' i[125064] _indexOfInterest[125037])
        (125034 call =(125018 call ranges i)(125033 call(125025 call .(125022 call dim i) c"chpl__unTranslate")(125031 call off i)))
        label _continueLabel[125042]
        _indexOfInterest[125037]
        _iterator[125038]
      }
      label _breakLabel[125043]
    }
    (125090 return(125078 'new'(125089 call _domain dist rank(125084 call . _value c"idxType") stridable ranges)))
  }
  function _domain[125908](?).setIndices[125098](arg _mt[126256]:_MT[238], arg this[126254]:_domain[125908](?), arg x[125096]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (125106 call(125101 call . _value c"dsiSetIndices") x)
    if(125119 call _cond_test(125112 call _isPrivatized _instance))
    {
      (125116 call _reprivatize _value)
    }
  }
  function _domain[125908](?).getIndices[125127](arg _mt[126260]:_MT[238], arg this[126258]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (125137 return(125136 call(125132 call . _value c"dsiGetIndices")))
  }
  function _domain[125908](?).writeThis[125146](arg _mt[126264]:_MT[238], arg this[126262]:_domain[125908](?), arg f[125144]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (125156 call(125151 call . _value c"dsiSerialWrite") f)
  }
  function _domain[125908](?).readThis[125165](arg _mt[126268]:_MT[238], arg this[126266]:_domain[125908](?), arg f[125163]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (125175 call(125170 call . _value c"dsiSerialRead") f)
  }
  function _domain[125908](?).localSlice[125186](arg _mt[126272]:_MT[238], arg this[126270]:_domain[125908](?), arg r[125183]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    if(125254 call _cond_test(125205 call !=(125202 call chpl_localeID_to_locale(125201 '_wide_get_locale' _value)) here))
    {
      (125252 call halt "Attempting to take a local slice of a domain on locale "(125230 '_wide_get_node' _value) " from locale "(125249 call . here c"id"))
    }
    (125265 return(125264 call this(125262 'expand_tuple' r)))
  }
  where {
    (125198 call &&(125191 call chpl__isTupleOfRanges r)(125197 call(125193 call . _value c"isDefaultRectangular")))
  }
  function _domain[125908](?).localSlice[125276](arg _mt[126276]:_MT[238], arg this[126274]:_domain[125908](?), arg r[125273]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    (125305 return(125304 call(125295 call . _value c"dsiLocalSlice")(125301 call chpl__anyStridable r) r))
  }
  where {
    (125290 call &&(125281 call chpl__isTupleOfRanges r)(125288 call !(125287 call(125283 call . _value c"isDefaultRectangular"))))
  }
  function _domain[125908](?).localSlice[125317](arg _mt[126280]:_MT[238], arg this[126278]:_domain[125908](?), arg d[125314] :
  _domain) : _unknown[51] "method" "primary method"
  {
    (125329 return(125328 call localSlice(125326 'expand_tuple'(125325 call(125321 call . d c"getIndices")))))
  }
  function _domain[125908](?).sorted[125345](arg _mt[126284]:_MT[238], arg this[126282]:_domain[125908](?), arg comparator[125341] :
  unknown t[125336] =
  (125340 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[125361] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125362] "expr temp" "temp"
      (125371 'move' _iterator[125362](125369 call _getIterator(125356 call(125351 call . _value c"dsiSorted") comparator)))
      Defer
      {
        {
          (125388 call _freeIterator _iterator[125362])
        }
      }
      { scopeless type
        (125377 'move' _indexOfInterest[125361](125374 call iteratorIndex _iterator[125362]))
      }
      ForLoop[125363]
      {
        unknown i[125381] "index var" "insert auto destroy"
        (125383 'move' i[125381] _indexOfInterest[125361])
        {
          (125358 yield i)
        }
        label _continueLabel[125366]
        _indexOfInterest[125361]
        _iterator[125362]
      }
      label _breakLabel[125367]
    }
  }
  function _domain[125908](?).displayRepresentation[125400](arg _mt[126288]:_MT[238], arg this[126286]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (125407 call(125403 call . _value c"dsiDisplayRepresentation"))
  }
  function _domain[125908](?).defaultSparseDist[125414](arg _mt[126292]:_MT[238], arg this[126290]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (125423 return(125422 call _getDistribution(125418 call . _value c"dist")))
  }
  function _domain[125908](?).safeCast[125434](arg _mt[126296]:_MT[238], arg this[126294]:_domain[125908](?), arg t[125431] :
  _domain) : _unknown[51] "method" "primary method"
  {
    const tmpD[125447] "const" t
    (125450 'end of statement')
    if(125483 call _cond_test(125460 call !=(125453 call . tmpD c"rank")(125457 call . this c"rank")))
    {
      (125481 call compilerError "rank mismatch in cast")
    }
    if(125519 call _cond_test(125496 call !=(125489 call . tmpD c"idxType")(125493 call . this c"idxType")))
    {
      (125517 call compilerError "idxType mismatch in cast")
    }
    if(125713 call _cond_test(125532 call ==(125525 call . tmpD c"stridable")(125529 call . this c"stridable")))
    {
      (125535 return this)
    }
    {
      if(125709 call _cond_test(125547 call &&(125541 call !(125538 call . tmpD c"stridable"))(125544 call . this c"stridable")))
      {
        const inds[125555] "const"(125554 call(125550 call . this c"getIndices"))
        (125558 'end of statement')
        unknown unstridableInds[125572](125570 call * rank(125569 call range(125563 call . tmpD c"idxType")(stridable = 0)))
        (125575 'end of statement')
        {
          unknown dim[125649] 0
          unknown tmp[125650] "maybe param" "temp"
          (125662 'move' tmp[125650](125660 call chpl_compute_low_param_loop_bound 0(125582 call -(125578 call . inds c"size") 1)))
          unknown tmp[125651] "maybe param" "temp"
          (125675 'move' tmp[125651](125673 call chpl_compute_high_param_loop_bound 0(125667 call -(125669 call . inds c"size") 1)))
          unknown tmp[125652] "maybe param" "temp"
          (125678 'move' tmp[125652] 1)
          ParamForLoop[125680]
          { dim[125649] tmp[125650] tmp[125651] tmp[125652]
            {
              if(125618 call _cond_test(125594 call !=(125590 call .(125589 call inds dim) c"stride") 1))
              {
                (125616 call halt "non-stridable domain assigned non-unit stride in dimension " dim)
              }
              (125646 call =(125627 call unstridableInds dim)(125645 call(125632 call .(125631 call inds dim) c"safeCast")(125643 call range(125637 call . tmpD c"idxType")(stridable = 0))))
            }
          }
          label _unused_continueLabel[125654]
          label _breakLabel[125653]
        }
        (125695 call(125690 call . tmpD c"setIndices") unstridableInds)
        (125698 return tmpD)
      }
      {
        (125702 call = tmpD this)
        (125707 return tmpD)
      }
    }
  }
  where {
    (125444 call &&(125439 call chpl__isRectangularDomType t)(125443 call isRectangularDom this))
  }
  function _domain[125908](?).targetLocales[125724](arg _mt[126300]:_MT[238], arg this[126298]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    (125732 return(125731 call(125727 call . _value c"dsiTargetLocales")))
  }
  function _domain[125908](?).hasSingleLocalSubdomain[125739](arg _mt[126304]:_MT[238], arg this[126302]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    (125749 return(125748 call(125744 call . _value c"dsiHasSingleLocalSubdomain")))
  }
  function _domain[125908](?).localSubdomain[125762](arg _mt[126308]:_MT[238], arg this[126306]:_domain[125908](?), arg loc[125758] :
  locale[28] =
  here) : _unknown[51] "method" "primary method"
  {
    if(125793 call _cond_test(125770 call !(125769 call(125765 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      (125791 call compilerError "Domain's local domain is not a single domain")
    }
    (125808 return(125807 call(125802 call . _value c"dsiLocalSubdomain") loc))
  }
  function _domain[125908](?).localSubdomains[125820](arg _mt[126312]:_MT[238], arg this[126310]:_domain[125908](?), arg loc[125816] :
  locale[28] =
  here) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(125883 call _cond_test(125827 call(125823 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (125832 yield(125831 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[125848] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125849] "expr temp" "temp"
        (125858 'move' _iterator[125849](125856 call _getIterator(125844 call(125839 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (125875 call _freeIterator _iterator[125849])
          }
        }
        { scopeless type
          (125864 'move' _indexOfInterest[125848](125861 call iteratorIndex _iterator[125849]))
        }
        ForLoop[125850]
        {
          unknown d[125868] "index var" "insert auto destroy"
          (125870 'move' d[125868] _indexOfInterest[125848])
          (125846 yield d)
          label _continueLabel[125853]
          _indexOfInterest[125848]
          _iterator[125849]
        }
        label _breakLabel[125854]
      }
    }
  }
  function _domain[125908](?).supportsAutoLocalAccess[125892](arg _mt[126316]:_MT[238], arg this[126314]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    (125902 return(125901 call(125897 call . _value c"dsiSupportsAutoLocalAccess")))
  }
  type _domain[125908](?) unknown _pid[119167] int[13] unknown _instance[119171] "owned" unknown _unowned[119176] bool[10] forwarding ( )
  function _cast[126325](arg t[126322] :
  _domain, arg d[126328] :
  _domain) : _unknown[51] "no doc"
  {
    const tmpD[126342] "const" t
    (126345 'end of statement')
    if(126362 call _cond_test(126355 call !=(126348 call . tmpD c"rank")(126352 call . d c"rank")))
    {
      (126360 call compilerError "rank mismatch in cast")
    }
    if(126382 call _cond_test(126375 call !=(126368 call . tmpD c"idxType")(126372 call . d c"idxType")))
    {
      (126380 call compilerError "idxType mismatch in cast")
    }
    if(126539 call _cond_test(126395 call ==(126388 call . tmpD c"stridable")(126392 call . d c"stridable")))
    {
      (126398 return d)
    }
    {
      if(126535 call _cond_test(126410 call &&(126404 call !(126401 call . tmpD c"stridable"))(126407 call . d c"stridable")))
      {
        unknown inds[126418](126417 call(126413 call . d c"getIndices"))
        (126421 'end of statement')
        unknown unstridableInds[126438](126436 call *(126424 call . d c"rank")(126435 call range(126429 call . tmpD c"idxType")(stridable = 0)))
        (126441 'end of statement')
        {
          unknown i[126475] 0
          unknown tmp[126476] "maybe param" "temp"
          (126488 'move' tmp[126476](126486 call chpl_compute_low_param_loop_bound 0(126448 call -(126444 call . tmpD c"rank") 1)))
          unknown tmp[126477] "maybe param" "temp"
          (126501 'move' tmp[126477](126499 call chpl_compute_high_param_loop_bound 0(126493 call -(126495 call . tmpD c"rank") 1)))
          unknown tmp[126478] "maybe param" "temp"
          (126504 'move' tmp[126478] 1)
          ParamForLoop[126506]
          { i[126475] tmp[126476] tmp[126477] tmp[126478]
            {
              (126471 call =(126455 call unstridableInds i)(126469 call _cast(126468 call range(126462 call . tmpD c"idxType")(stridable = 0))(126459 call inds i)))
            }
          }
          label _unused_continueLabel[126480]
          label _breakLabel[126479]
        }
        (126521 call(126516 call . tmpD c"setIndices") unstridableInds)
        (126524 return tmpD)
      }
      {
        (126528 call = tmpD d)
        (126533 return tmpD)
      }
    }
  }
  where {
    (126339 call &&(126334 call chpl__isRectangularDomType t)(126338 call isRectangularDom d))
  }
  function _cast[126554](arg t[126551] :
  string[26], arg x[126557] :
  _domain) : _unknown[51]
  {
    (126561 'use' IO)
    (126568 return(126567 call stringify x))
  }
  function chpl_countDomHelp[126576](arg dom[126574]:_any[178](?), arg counts[126578]:_any[178](?)) : _unknown[51]
  {
    unknown ranges[126586](126585 call(126581 call . dom c"dims"))
    (126589 'end of statement')
    {
      unknown i[126618] 0
      unknown tmp[126619] "maybe param" "temp"
      (126631 'move' tmp[126619](126629 call chpl_compute_low_param_loop_bound 0(126597 call -(126593 call . dom c"rank") 1)))
      unknown tmp[126620] "maybe param" "temp"
      (126644 'move' tmp[126620](126642 call chpl_compute_high_param_loop_bound 0(126636 call -(126638 call . dom c"rank") 1)))
      unknown tmp[126621] "maybe param" "temp"
      (126647 'move' tmp[126621] 1)
      ParamForLoop[126649]
      { i[126618] tmp[126619] tmp[126620] tmp[126621]
        (126615 call =(126604 call ranges i)(126613 call #(126608 call ranges i)(126612 call counts i)))
      }
      label _unused_continueLabel[126623]
      label _breakLabel[126622]
    }
    (126663 return(126662 call dom(126660 'expand_tuple' ranges)))
  }
  function #[126673](arg dom[126670] :
  _domain, arg counts[126676] :
  integral) : _unknown[51]
  {
    (126699 return(126698 call chpl_countDomHelp dom(126696 call _build_tuple counts)))
  }
  where {
    (126690 call &&(126682 call isRectangularDom dom)(126688 call ==(126684 call . dom c"rank") 1))
  }
  function #[126711](arg dom[126708] :
  _domain, arg counts[126713]:_any[178](?)) : _unknown[51]
  {
    if(126756 call _cond_test(126733 call !=(126726 call . counts c"size")(126730 call . dom c"rank")))
    {
      (126754 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    (126767 return(126766 call chpl_countDomHelp dom counts))
  }
  where {
    (126723 call &&(126718 call isRectangularDom dom)(126722 call isTuple counts))
  }
  function #[126780](arg arr[126777] :
  (126774 call chpl__buildArrayRuntimeType nil[44]), arg counts[126783] :
  integral) : _unknown[51] "fn returns aliasing array"
  {
    (126809 return(126808 call arr(126805 call #(126801 call . arr c"_dom") counts)))
  }
  where {
    (126797 call &&(126789 call isRectangularArr arr)(126795 call ==(126791 call . arr c"rank") 1))
  }
  function #[126823](arg arr[126820] :
  (126817 call chpl__buildArrayRuntimeType nil[44]), arg counts[126825]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    if(126868 call _cond_test(126845 call !=(126838 call . counts c"size")(126842 call . arr c"rank")))
    {
      (126866 call compilerError "the domain and array arguments of # must have the same rank")
    }
    (126884 return(126883 call arr(126880 call #(126876 call . arr c"_dom") counts)))
  }
  where {
    (126835 call &&(126830 call isRectangularArr arr)(126834 call isTuple counts))
  }
  function +[126895](arg d[126892] :
  _domain, arg i[126901] :
  (126899 call chpl__buildIndexType d)) : _unknown[51] "no return value for void"
  {
    if(126950 call _cond_test(126907 call isRectangularDom d))
    {
      (126927 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126948 call compilerError "Cannot add indices to this domain type")
    }
  }
  function +[126963](arg i[126961]:_any[178](?), arg d[126966] :
  _domain) : _unknown[51] "no return value for void"
  {
    if(126992 call _cond_test(126981 call isRectangularDom d))
    {
      (126985 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126990 call compilerError "Cannot add indices to this domain type")
    }
  }
  where {
    (354334 'is_subtype'(126975 call chpl__buildIndexType d)(126971 'typeof' i))
  }
  function +[127008](arg d[127005] :
  _domain, arg i[127014] :
  (127012 call chpl__buildIndexType d)) : _unknown[51]
  {
    (127027 call(127022 call . d c"add") i)
    (127031 return d)
  }
  where {
    (127020 call isIrregularDom d)
  }
  function +[127040](arg i[127038]:_any[178](?), arg d[127043] :
  _domain) : _unknown[51]
  {
    (127067 call(127062 call . d c"add") i)
    (127071 return d)
  }
  where {
    (127059 call &&(354335 'is_subtype'(127052 call chpl__buildIndexType d)(127048 'typeof' i))(127058 call isIrregularDom d))
  }
  function +[127082](arg d1[127079] :
  _domain, arg d2[127085] :
  _domain) : _unknown[51]
  {
    unknown d3[127108](127107 'typeof' d1)
    (127111 'end of statement')
    {
      unknown _indexOfInterest[127123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127124] "expr temp" "temp"
      (127133 'move' _iterator[127124](127131 call _getIterator d1))
      Defer
      {
        {
          (127149 call _freeIterator _iterator[127124])
        }
      }
      { scopeless type
        (127138 'move' _indexOfInterest[127123](127135 call iteratorIndex _iterator[127124]))
      }
      ForLoop[127125]
      {
        unknown e[127142] "index var" "insert auto destroy"
        (127144 'move' e[127142] _indexOfInterest[127123])
        (127121 call(127116 call . d3 c"add") e)
        label _continueLabel[127128]
        _indexOfInterest[127123]
        _iterator[127124]
      }
      label _breakLabel[127129]
    }
    {
      unknown _indexOfInterest[127166] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127167] "expr temp" "temp"
      (127176 'move' _iterator[127167](127174 call _getIterator d2))
      Defer
      {
        {
          (127192 call _freeIterator _iterator[127167])
        }
      }
      { scopeless type
        (127181 'move' _indexOfInterest[127166](127178 call iteratorIndex _iterator[127167]))
      }
      ForLoop[127168]
      {
        unknown e[127185] "index var" "insert auto destroy"
        (127187 'move' e[127185] _indexOfInterest[127166])
        (127164 call(127159 call . d3 c"add") e)
        label _continueLabel[127171]
        _indexOfInterest[127166]
        _iterator[127167]
      }
      label _breakLabel[127172]
    }
    (127200 return d3)
  }
  where {
    (127104 call &&(127092 call ==(127089 'typeof' d1)(127091 'typeof' d2))(127102 call &&(127097 call isIrregularDom d1)(127101 call isIrregularDom d2)))
  }
  function +[127211](arg d1[127208] :
  _domain, arg d2[127214] :
  _domain) : _unknown[51] "no return value for void"
  {
    if(127237 call _cond_test(127225 call ||(127220 call isRectangularDom d1)(127224 call isRectangularDom d2)))
    {
      (127230 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127235 call compilerError "Cannot add indices to this domain type")
    }
  }
  function -[127252](arg d[127249] :
  _domain, arg i[127258] :
  (127256 call chpl__buildIndexType d)) : _unknown[51] "no return value for void"
  {
    if(127307 call _cond_test(127264 call isRectangularDom d))
    {
      (127284 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127305 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function -[127322](arg d[127319] :
  _domain, arg i[127328] :
  (127326 call chpl__buildIndexType d)) : _unknown[51]
  {
    (127341 call(127336 call . d c"remove") i)
    (127345 return d)
  }
  where {
    (127334 call isIrregularDom d)
  }
  function -[127356](arg d1[127353] :
  _domain, arg d2[127359] :
  _domain) : _unknown[51]
  {
    unknown d3[127376](127375 'typeof' d1)
    (127379 'end of statement')
    {
      unknown _indexOfInterest[127391] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127392] "expr temp" "temp"
      (127401 'move' _iterator[127392](127399 call _getIterator d1))
      Defer
      {
        {
          (127417 call _freeIterator _iterator[127392])
        }
      }
      { scopeless type
        (127406 'move' _indexOfInterest[127391](127403 call iteratorIndex _iterator[127392]))
      }
      ForLoop[127393]
      {
        unknown e[127410] "index var" "insert auto destroy"
        (127412 'move' e[127410] _indexOfInterest[127391])
        (127389 call(127384 call . d3 c"add") e)
        label _continueLabel[127396]
        _indexOfInterest[127391]
        _iterator[127392]
      }
      label _breakLabel[127397]
    }
    {
      unknown _indexOfInterest[127434] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127435] "expr temp" "temp"
      (127444 'move' _iterator[127435](127442 call _getIterator d2))
      Defer
      {
        {
          (127460 call _freeIterator _iterator[127435])
        }
      }
      { scopeless type
        (127449 'move' _indexOfInterest[127434](127446 call iteratorIndex _iterator[127435]))
      }
      ForLoop[127436]
      {
        unknown e[127453] "index var" "insert auto destroy"
        (127455 'move' e[127453] _indexOfInterest[127434])
        (127432 call(127427 call . d3 c"remove") e)
        label _continueLabel[127439]
        _indexOfInterest[127434]
        _iterator[127435]
      }
      label _breakLabel[127440]
    }
    (127468 return d3)
  }
  where {
    (127372 call &&(127366 call ==(127363 'typeof' d1)(127365 'typeof' d2))(127371 call isSparseDom d1))
  }
  function -[127479](arg d1[127476] :
  _domain, arg d2[127482] :
  _domain) : _unknown[51] "no return value for void"
  {
    if(127505 call _cond_test(127493 call ||(127488 call isRectangularDom d1)(127492 call isRectangularDom d2)))
    {
      (127498 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127503 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function ==[127520](arg d1[127517] :
  _domain, arg d2[127523] :
  _domain) : _unknown[51] "inline"
  {
    if(127658 call _cond_test(127550 call !=(127540 call .(127537 call . d1 c"_value") c"rank")(127547 call .(127544 call . d2 c"_value") c"rank")))
    {
      (127553 return 0)
    }
    {
      if(127654 call _cond_test(127564 call ==(127557 call . d1 c"_value")(127561 call . d2 c"_value")))
      {
        (127567 return 1)
      }
      {
        {
          unknown i[127607] 0
          unknown tmp[127608] "maybe param" "temp"
          (127620 'move' tmp[127608](127618 call chpl_compute_low_param_loop_bound 0(127579 call -(127575 call .(127572 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127609] "maybe param" "temp"
          (127636 'move' tmp[127609](127634 call chpl_compute_high_param_loop_bound 0(127625 call -(127627 call .(127629 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127610] "maybe param" "temp"
          (127639 'move' tmp[127610] 1)
          ParamForLoop[127641]
          { i[127607] tmp[127608] tmp[127609] tmp[127610]
            if(127602 call _cond_test(127597 call !=(127589 call(127584 call . d1 c"dim") i)(127596 call(127591 call . d2 c"dim") i)))
            {
              (127600 return 0)
            }
          }
          label _unused_continueLabel[127612]
          label _breakLabel[127611]
        }
        (127652 return 1)
      }
    }
  }
  where {
    (127534 call &&(127529 call isRectangularDom d1)(127533 call isRectangularDom d2))
  }
  function !=[127673](arg d1[127670] :
  _domain, arg d2[127676] :
  _domain) : _unknown[51] "inline"
  {
    if(127811 call _cond_test(127703 call !=(127693 call .(127690 call . d1 c"_value") c"rank")(127700 call .(127697 call . d2 c"_value") c"rank")))
    {
      (127706 return 1)
    }
    {
      if(127807 call _cond_test(127717 call ==(127710 call . d1 c"_value")(127714 call . d2 c"_value")))
      {
        (127720 return 0)
      }
      {
        {
          unknown i[127760] 0
          unknown tmp[127761] "maybe param" "temp"
          (127773 'move' tmp[127761](127771 call chpl_compute_low_param_loop_bound 0(127732 call -(127728 call .(127725 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127762] "maybe param" "temp"
          (127789 'move' tmp[127762](127787 call chpl_compute_high_param_loop_bound 0(127778 call -(127780 call .(127782 call . d1 c"_value") c"rank") 1)))
          unknown tmp[127763] "maybe param" "temp"
          (127792 'move' tmp[127763] 1)
          ParamForLoop[127794]
          { i[127760] tmp[127761] tmp[127762] tmp[127763]
            if(127755 call _cond_test(127750 call !=(127742 call(127737 call . d1 c"dim") i)(127749 call(127744 call . d2 c"dim") i)))
            {
              (127753 return 1)
            }
          }
          label _unused_continueLabel[127765]
          label _breakLabel[127764]
        }
        (127805 return 0)
      }
    }
  }
  where {
    (127687 call &&(127682 call isRectangularDom d1)(127686 call isRectangularDom d2))
  }
  function ==[127826](arg d1[127823] :
  _domain, arg d2[127829] :
  _domain) : _unknown[51] "inline"
  {
    if(127855 call _cond_test(127850 call ==(127843 call . d1 c"_value")(127847 call . d2 c"_value")))
    {
      (127853 return 1)
    }
    if(127874 call _cond_test(127869 call !=(127862 call . d1 c"size")(127866 call . d2 c"size")))
    {
      (127872 return 0)
    }
    {
      unknown _indexOfInterest[127898] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127899] "expr temp" "temp"
      (127908 'move' _iterator[127899](127906 call _getIterator d1))
      Defer
      {
        {
          (127924 call _freeIterator _iterator[127899])
        }
      }
      { scopeless type
        (127913 'move' _indexOfInterest[127898](127910 call iteratorIndex _iterator[127899]))
      }
      ForLoop[127900]
      {
        unknown idx[127917] "index var" "insert auto destroy"
        (127919 'move' idx[127917] _indexOfInterest[127898])
        if(127893 call _cond_test(127888 call !(127887 call(127882 call . d2 c"contains") idx)))
        {
          (127891 return 0)
        }
        label _continueLabel[127903]
        _indexOfInterest[127898]
        _iterator[127899]
      }
      label _breakLabel[127904]
    }
    (127932 return 1)
  }
  where {
    (127840 call &&(127835 call isAssociativeDom d1)(127839 call isAssociativeDom d2))
  }
  function !=[127943](arg d1[127940] :
  _domain, arg d2[127946] :
  _domain) : _unknown[51] "inline"
  {
    if(127972 call _cond_test(127967 call ==(127960 call . d1 c"_value")(127964 call . d2 c"_value")))
    {
      (127970 return 0)
    }
    if(127991 call _cond_test(127986 call !=(127979 call . d1 c"size")(127983 call . d2 c"size")))
    {
      (127989 return 1)
    }
    {
      unknown _indexOfInterest[128015] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128016] "expr temp" "temp"
      (128025 'move' _iterator[128016](128023 call _getIterator d1))
      Defer
      {
        {
          (128041 call _freeIterator _iterator[128016])
        }
      }
      { scopeless type
        (128030 'move' _indexOfInterest[128015](128027 call iteratorIndex _iterator[128016]))
      }
      ForLoop[128017]
      {
        unknown idx[128034] "index var" "insert auto destroy"
        (128036 'move' idx[128034] _indexOfInterest[128015])
        if(128010 call _cond_test(128005 call !(128004 call(127999 call . d2 c"contains") idx)))
        {
          (128008 return 1)
        }
        label _continueLabel[128020]
        _indexOfInterest[128015]
        _iterator[128016]
      }
      label _breakLabel[128021]
    }
    (128049 return 0)
  }
  where {
    (127957 call &&(127952 call isAssociativeDom d1)(127956 call isAssociativeDom d2))
  }
  function ==[128060](arg d1[128057] :
  _domain, arg d2[128063] :
  _domain) : _unknown[51] "inline"
  {
    if(128089 call _cond_test(128084 call ==(128077 call . d1 c"_value")(128081 call . d2 c"_value")))
    {
      (128087 return 1)
    }
    if(128108 call _cond_test(128103 call !=(128096 call . d1 c"size")(128100 call . d2 c"size")))
    {
      (128106 return 0)
    }
    if(128132 call _cond_test(128127 call !=(128117 call .(128114 call . d1 c"_value") c"parentDom")(128124 call .(128121 call . d2 c"_value") c"parentDom")))
    {
      (128130 return 0)
    }
    {
      unknown _indexOfInterest[128156] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128157] "expr temp" "temp"
      (128166 'move' _iterator[128157](128164 call _getIterator d1))
      Defer
      {
        {
          (128182 call _freeIterator _iterator[128157])
        }
      }
      { scopeless type
        (128171 'move' _indexOfInterest[128156](128168 call iteratorIndex _iterator[128157]))
      }
      ForLoop[128158]
      {
        unknown idx[128175] "index var" "insert auto destroy"
        (128177 'move' idx[128175] _indexOfInterest[128156])
        if(128151 call _cond_test(128146 call !(128145 call(128140 call . d2 c"contains") idx)))
        {
          (128149 return 0)
        }
        label _continueLabel[128161]
        _indexOfInterest[128156]
        _iterator[128157]
      }
      label _breakLabel[128162]
    }
    (128190 return 1)
  }
  where {
    (128074 call &&(128069 call isSparseDom d1)(128073 call isSparseDom d2))
  }
  function !=[128201](arg d1[128198] :
  _domain, arg d2[128204] :
  _domain) : _unknown[51] "inline"
  {
    if(128230 call _cond_test(128225 call ==(128218 call . d1 c"_value")(128222 call . d2 c"_value")))
    {
      (128228 return 0)
    }
    if(128249 call _cond_test(128244 call !=(128237 call . d1 c"size")(128241 call . d2 c"size")))
    {
      (128247 return 1)
    }
    if(128273 call _cond_test(128268 call !=(128258 call .(128255 call . d1 c"_value") c"parentDom")(128265 call .(128262 call . d2 c"_value") c"parentDom")))
    {
      (128271 return 1)
    }
    {
      unknown _indexOfInterest[128297] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128298] "expr temp" "temp"
      (128307 'move' _iterator[128298](128305 call _getIterator d1))
      Defer
      {
        {
          (128323 call _freeIterator _iterator[128298])
        }
      }
      { scopeless type
        (128312 'move' _indexOfInterest[128297](128309 call iteratorIndex _iterator[128298]))
      }
      ForLoop[128299]
      {
        unknown idx[128316] "index var" "insert auto destroy"
        (128318 'move' idx[128316] _indexOfInterest[128297])
        if(128292 call _cond_test(128287 call !(128286 call(128281 call . d2 c"contains") idx)))
        {
          (128290 return 1)
        }
        label _continueLabel[128302]
        _indexOfInterest[128297]
        _iterator[128298]
      }
      label _breakLabel[128303]
    }
    (128331 return 0)
  }
  where {
    (128215 call &&(128210 call isSparseDom d1)(128214 call isSparseDom d2))
  }
  function ==[128342](arg d1[128339] :
  _domain, arg d2[128345] :
  _domain) param : _unknown[51] "inline"
  {
    (128349 return 0)
  }
  function !=[128360](arg d1[128357] :
  _domain, arg d2[128363] :
  _domain) param : _unknown[51] "inline"
  {
    (128367 return 1)
  }
  function shouldReturnRvalueByConstRef[128376](arg t[128374]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (128379 return 1)
  }
  function shouldReturnRvalueByValue[128388](arg t[128386]:_any[178](?)) param : _unknown[51] "no doc"
  {
    if(128396 call _cond_test(128391 call ! PODValAccess))
    {
      (128394 return 0)
    }
    if(128409 call _cond_test(128405 call isPODType t))
    {
      (128407 return 1)
    }
    (128415 return 0)
  }
  function _array[133594](?).chpl__serialize[128436](arg _mt[133598]:_MT[238], arg this[133596]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    (128452 return(128451 call(128447 call . _instance c"chpl__serialize")))
  }
  where {
    (128445 call(128441 call . _instance c"chpl__rvfMe"))
  }
  function _array[133594](?).chpl__deserialize[128462](arg _mt[133602]:_MT[238], arg this[133600]:_array[133594](?), arg data[128460]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown arrinst[128478](128477 call(128472 call .(128471 call _to_borrowed(128469 'static field type' this "_instance")) c"chpl__deserialize") data)
    (128481 'end of statement')
    (128491 return(128483 'new'(128490 call _array nullPid arrinst(_unowned = 1))))
  }
  function _array[133594](?).chpl__promotionType[128497](arg _mt[133606]:_MT[238], arg this[133604]:_array[133594](?)) type : _unknown[51] "method" "primary method"
  {
    (128503 return(128500 call . _value c"eltType"))
  }
  function _array[133594](?)._value[128510](arg _mt[133610]:_MT[238], arg this[133608]:_array[133594](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    if(128529 call _cond_test(128515 call _isPrivatized _instance))
    {
      (128522 return(128521 call chpl_getPrivatizedCopy(128518 'typeof' _instance) _pid))
    }
    {
      (128526 return _instance)
    }
  }
  function _array[133594](?).chpl_forwarding_expr6__value[128543](arg _mt[133614]:_MT[238], arg this[133612]:_array[133594](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (128545 return _value)
  }
  function _array[133594](?).deinit[128551](arg _mt[133618]:_MT[238], arg this[133616]:_array[133594](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128556 call _do_destroy_array this)
  }
  function _array[133594](?).eltType[128563](arg _mt[133622]:_MT[238], arg this[133620]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (128569 return(128566 call . _value c"eltType"))
  }
  function _array[133594](?).idxType[128576](arg _mt[133626]:_MT[238], arg this[133624]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (128582 return(128579 call . _value c"idxType"))
  }
  function _array[133594](?)._dom[128589](arg _mt[133630]:_MT[238], arg this[133628]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    (128598 return(128597 call _getDomain(128593 call . _value c"dom")))
  }
  function _array[133594](?).rank[128605](arg _mt[133634]:_MT[238], arg this[133632]:_array[133594](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    (128614 return(128611 call .(128608 call . this c"_dom") c"rank"))
  }
  function _array[133594](?).indices[128621](arg _mt[133638]:_MT[238], arg this[133636]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    (128624 return _dom)
  }
  function _array[133594](?).checkAccess[128633](arg _mt[133642]:_MT[238], arg this[133640]:_array[133594](?), arg indices[128631]:_any[178](?), arg value[128635]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    if(129156 call _cond_test(128640 call isRectangularArr this))
    {
      if(129151 call _cond_test(128650 call !(128649 call(128644 call . value c"dsiBoundsCheck") indices)))
      {
        if(129146 call _cond_test(128654 call == rank 1))
        {
          (128723 call halt "array index out of bounds\n" "note: index was "(128695 call indices 0) " but array bounds are "(128722 call(128717 call .(128714 call . value c"dom") c"dsiDim") 0))
        }
        {
          unknown istr[128743] ""
          (128746 'end of statement')
          unknown bstr[128765] ""
          (128768 'end of statement')
          {
            unknown i[128824] 0
            unknown tmp[128825] "maybe param" "temp"
            (128837 'move' tmp[128825](128835 call chpl_compute_low_param_loop_bound 0(128772 call - rank 1)))
            unknown tmp[128826] "maybe param" "temp"
            (128847 'move' tmp[128826](128845 call chpl_compute_high_param_loop_bound 0(128842 call - rank 1)))
            unknown tmp[128827] "maybe param" "temp"
            (128850 'move' tmp[128827] 1)
            ParamForLoop[128852]
            { i[128824] tmp[128825] tmp[128826] tmp[128827]
              {
                if(128791 call _cond_test(128778 call != i 0))
                {
                  (128782 call += istr ", ")
                  (128788 call += bstr ", ")
                }
                (128804 call += istr(128802 call _cast string[26](128800 call indices i)))
                (128821 call += bstr(128819 call _cast string[26](128817 call(128812 call .(128809 call . value c"dom") c"dsiDim") i)))
              }
            }
            label _unused_continueLabel[128829]
            label _breakLabel[128828]
          }
          unknown dimstr[128878] ""
          (128881 'end of statement')
          {
            unknown i[129032] 0
            unknown tmp[129033] "maybe param" "temp"
            (129045 'move' tmp[129033](129043 call chpl_compute_low_param_loop_bound 0(128885 call - rank 1)))
            unknown tmp[129034] "maybe param" "temp"
            (129055 'move' tmp[129034](129053 call chpl_compute_high_param_loop_bound 0(129050 call - rank 1)))
            unknown tmp[129035] "maybe param" "temp"
            (129058 'move' tmp[129035] 1)
            ParamForLoop[129060]
            { i[129032] tmp[129033] tmp[129034] tmp[129035]
              {
                if(129027 call _cond_test(128910 call !(128909 call(128901 call .(128898 call(128893 call .(128890 call . value c"dom") c"dsiDim") i) c"boundsCheck")(128907 call indices i))))
                {
                  if(129022 call _cond_test(128930 call == dimstr ""))
                  {
                    (129018 call = dimstr(129016 call +(129001 call +(128982 call +(128973 call +(128954 call + "out of bounds in dimension "(128952 call _cast string[26] i)) " because index ")(128980 call _cast string[26](128978 call indices i))) " is not in ")(129014 call _cast string[26](129012 call(129007 call .(129004 call . value c"dom") c"dsiDim") i))))
                  }
                }
              }
            }
            label _unused_continueLabel[129037]
            label _breakLabel[129036]
          }
          (129144 call halt "array index out of bounds\n" "note: index was (" istr ") " "but array bounds are (" bstr ")\n" "note: " dimstr)
        }
      }
    }
  }
  function _array[133594](?).checkSlice[129169](arg _mt[133646]:_MT[238], arg this[133644]:_array[133594](?), arg d[129166] :
  _domain, arg value[129171]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    (129184 call checkSlice(129180 'expand_tuple'(129179 call(129175 call . d c"dsiDims")))(value = value))
  }
  function _array[133594](?).checkSlice[129195](arg _mt[133650]:_MT[238], arg this[133648]:_array[133594](?), arg ranges[129192]:_any[178](?) ..., arg value[129197]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    if(129699 call _cond_test(129206 call isRectangularArr this))
    {
      unknown ok[129208] 1
      (129211 'end of statement')
      {
        unknown i[129253] 0
        unknown tmp[129254] "maybe param" "temp"
        (129266 'move' tmp[129254](129264 call chpl_compute_low_param_loop_bound 0(129216 call - rank 1)))
        unknown tmp[129255] "maybe param" "temp"
        (129276 'move' tmp[129255](129274 call chpl_compute_high_param_loop_bound 0(129271 call - rank 1)))
        unknown tmp[129256] "maybe param" "temp"
        (129279 'move' tmp[129256] 1)
        ParamForLoop[129281]
        { i[129253] tmp[129254] tmp[129255] tmp[129256]
          {
            {
              unknown tmp[129241] "temp"
              (129244 'move' tmp[129241](129243 'addr of' ok))
              (129249 call = tmp[129241](129246 call && tmp[129241](129239 call(129231 call .(129230 call(129225 call .(129222 call . value c"dom") c"dsiDim") i) c"boundsCheck")(129237 call ranges i))))
            }
          }
        }
        label _unused_continueLabel[129258]
        label _breakLabel[129257]
      }
      if(129695 call _cond_test(129292 call == ok 0))
      {
        if(129690 call _cond_test(129296 call == rank 1))
        {
          (129349 call halt "array slice out of bounds\n" "note: slice index was "(129337 call ranges 0) " but array bounds are "(129348 call(129343 call .(129340 call . value c"dom") c"dsiDim") 0))
        }
        {
          unknown istr[129369] ""
          (129372 'end of statement')
          unknown bstr[129391] ""
          (129394 'end of statement')
          {
            unknown i[129450] 0
            unknown tmp[129451] "maybe param" "temp"
            (129463 'move' tmp[129451](129461 call chpl_compute_low_param_loop_bound 0(129398 call - rank 1)))
            unknown tmp[129452] "maybe param" "temp"
            (129473 'move' tmp[129452](129471 call chpl_compute_high_param_loop_bound 0(129468 call - rank 1)))
            unknown tmp[129453] "maybe param" "temp"
            (129476 'move' tmp[129453] 1)
            ParamForLoop[129478]
            { i[129450] tmp[129451] tmp[129452] tmp[129453]
              {
                if(129417 call _cond_test(129404 call != i 0))
                {
                  (129408 call += istr ", ")
                  (129414 call += bstr ", ")
                }
                (129430 call += istr(129428 call _cast string[26](129426 call ranges i)))
                (129447 call += bstr(129445 call _cast string[26](129443 call(129438 call .(129435 call . value c"dom") c"dsiDim") i)))
              }
            }
            label _unused_continueLabel[129455]
            label _breakLabel[129454]
          }
          unknown dimstr[129504] ""
          (129507 'end of statement')
          {
            unknown i[129624] 0
            unknown tmp[129625] "maybe param" "temp"
            (129637 'move' tmp[129625](129635 call chpl_compute_low_param_loop_bound 0(129511 call - rank 1)))
            unknown tmp[129626] "maybe param" "temp"
            (129647 'move' tmp[129626](129645 call chpl_compute_high_param_loop_bound 0(129642 call - rank 1)))
            unknown tmp[129627] "maybe param" "temp"
            (129650 'move' tmp[129627] 1)
            ParamForLoop[129652]
            { i[129624] tmp[129625] tmp[129626] tmp[129627]
              {
                if(129619 call _cond_test(129534 call !(129533 call(129525 call .(129524 call(129519 call .(129516 call . value c"dom") c"dsiDim") i) c"boundsCheck")(129531 call ranges i))))
                {
                  if(129614 call _cond_test(129554 call == dimstr ""))
                  {
                    (129610 call = dimstr(129608 call +(129593 call +(129590 call +(129581 call +(129562 call + "out of bounds in dimension "(129560 call _cast string[26] i)) " because slice index ")(129588 call _cast string[26](129586 call ranges i))) " is not in ")(129606 call _cast string[26](129604 call(129599 call .(129596 call . value c"dom") c"dsiDim") i))))
                  }
                }
              }
            }
            label _unused_continueLabel[129629]
            label _breakLabel[129628]
          }
          (129688 call halt "array slice out of bounds\n" "note: slice index was (" istr ") " "but array bounds are (" bstr ")\n" "note: " dimstr)
        }
      }
    }
  }
  where {
    (129202 call chpl__isTupleOfRanges ranges)
  }
  function _array[133594](?).this[129722](arg _mt[133654]:_MT[238], ref arg this[133652]:_array[133594](?), arg i[129719] :
  (129717 call * rank(129714 call .(129711 call . _value c"dom") c"idxType"))) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    const value[129725] "const" _value
    (129728 'end of statement')
    if(129738 call _cond_test boundsChecking)
    {
      (129736 call checkAccess i(value = value))
    }
    if(129774 call _cond_test(129751 call ||(129746 call isRectangularArr this)(129750 call isSparseArr this)))
    {
      (129760 return(129759 call(129754 call . value c"dsiAccess") i))
    }
    {
      (129772 return(129771 call(129763 call . value c"dsiAccess")(129769 call i 0)))
    }
  }
  function _array[133594](?).this[129797](arg _mt[133658]:_MT[238], const arg this[133656]:_array[133594](?), arg i[129794] :
  (129792 call * rank(129789 call .(129786 call . _value c"dom") c"idxType"))) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[129807] "const" _value
    (129810 'end of statement')
    if(129820 call _cond_test boundsChecking)
    {
      (129818 call checkAccess i(value = value))
    }
    if(129856 call _cond_test(129833 call ||(129828 call isRectangularArr this)(129832 call isSparseArr this)))
    {
      (129842 return(129841 call(129836 call . value c"dsiAccess") i))
    }
    {
      (129854 return(129853 call(129845 call . value c"dsiAccess")(129851 call i 0)))
    }
  }
  where {
    (129805 call shouldReturnRvalueByValue(129801 call . _value c"eltType"))
  }
  function _array[133594](?).this[129880](arg _mt[133662]:_MT[238], const arg this[133660]:_array[133594](?), arg i[129877] :
  (129875 call * rank(129872 call .(129869 call . _value c"dom") c"idxType"))) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[129890] "const" _value
    (129893 'end of statement')
    if(129903 call _cond_test boundsChecking)
    {
      (129901 call checkAccess i(value = value))
    }
    if(129939 call _cond_test(129916 call ||(129911 call isRectangularArr this)(129915 call isSparseArr this)))
    {
      (129925 return(129924 call(129919 call . value c"dsiAccess") i))
    }
    {
      (129937 return(129936 call(129928 call . value c"dsiAccess")(129934 call i 0)))
    }
  }
  where {
    (129888 call shouldReturnRvalueByConstRef(129884 call . _value c"eltType"))
  }
  function _array[133594](?).this[129962](arg _mt[133666]:_MT[238], ref arg this[133664]:_array[133594](?), arg i[129958] ... :
  (129954 call .(129951 call . _value c"dom") c"idxType")) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    (129968 return(129967 call this i))
  }
  function _array[133594](?).this[129987](arg _mt[133670]:_MT[238], const arg this[133668]:_array[133594](?), arg i[129983] ... :
  (129979 call .(129976 call . _value c"dom") c"idxType")) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (130000 return(129999 call this i))
  }
  where {
    (129995 call shouldReturnRvalueByValue(129991 call . _value c"eltType"))
  }
  function _array[133594](?).this[130020](arg _mt[133674]:_MT[238], const arg this[133672]:_array[133594](?), arg i[130016] ... :
  (130012 call .(130009 call . _value c"dom") c"idxType")) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (130033 return(130032 call this i))
  }
  where {
    (130028 call shouldReturnRvalueByConstRef(130024 call . _value c"eltType"))
  }
  function _array[133594](?).localAccess[130054](arg _mt[133678]:_MT[238], ref arg this[133676]:_array[133594](?), arg i[130051] :
  (130049 call * rank(130046 call .(130043 call . _value c"dom") c"idxType"))) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    const value[130057] "const" _value
    (130060 'end of statement')
    if(130070 call _cond_test boundsChecking)
    {
      (130068 call checkAccess i(value = value))
    }
    if(130108 call _cond_test(130083 call ||(130078 call isRectangularArr this)(130082 call isSparseArr this)))
    {
      (130094 return(130093 call(130088 call . value c"dsiLocalAccess") i))
    }
    {
      (130106 return(130105 call(130097 call . value c"dsiLocalAccess")(130103 call i 0)))
    }
  }
  function _array[133594](?).localAccess[130131](arg _mt[133682]:_MT[238], const arg this[133680]:_array[133594](?), arg i[130128] :
  (130126 call * rank(130123 call .(130120 call . _value c"dom") c"idxType"))) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[130141] "const" _value
    (130144 'end of statement')
    if(130154 call _cond_test boundsChecking)
    {
      (130152 call checkAccess i(value = value))
    }
    if(130190 call _cond_test(130167 call ||(130162 call isRectangularArr this)(130166 call isSparseArr this)))
    {
      (130176 return(130175 call(130170 call . value c"dsiLocalAccess") i))
    }
    {
      (130188 return(130187 call(130179 call . value c"dsiLocalAccess")(130185 call i 0)))
    }
  }
  where {
    (130139 call shouldReturnRvalueByValue(130135 call . _value c"eltType"))
  }
  function _array[133594](?).localAccess[130214](arg _mt[133686]:_MT[238], const arg this[133684]:_array[133594](?), arg i[130211] :
  (130209 call * rank(130206 call .(130203 call . _value c"dom") c"idxType"))) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    const value[130224] "const" _value
    (130227 'end of statement')
    if(130237 call _cond_test boundsChecking)
    {
      (130235 call checkAccess i(value = value))
    }
    if(130273 call _cond_test(130250 call ||(130245 call isRectangularArr this)(130249 call isSparseArr this)))
    {
      (130259 return(130258 call(130253 call . value c"dsiLocalAccess") i))
    }
    {
      (130271 return(130270 call(130262 call . value c"dsiLocalAccess")(130268 call i 0)))
    }
  }
  where {
    (130222 call shouldReturnRvalueByConstRef(130218 call . _value c"eltType"))
  }
  function _array[133594](?).localAccess[130296](arg _mt[133690]:_MT[238], ref arg this[133688]:_array[133594](?), arg i[130292] ... :
  (130288 call .(130285 call . _value c"dom") c"idxType")) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    (130302 return(130301 call localAccess i))
  }
  function _array[133594](?).localAccess[130321](arg _mt[133694]:_MT[238], const arg this[133692]:_array[133594](?), arg i[130317] ... :
  (130313 call .(130310 call . _value c"dom") c"idxType")) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (130334 return(130333 call localAccess i))
  }
  where {
    (130329 call shouldReturnRvalueByValue(130325 call . _value c"eltType"))
  }
  function _array[133594](?).localAccess[130354](arg _mt[133698]:_MT[238], const arg this[133696]:_array[133594](?), arg i[130350] ... :
  (130346 call .(130343 call . _value c"dom") c"idxType")) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (130367 return(130366 call localAccess i))
  }
  where {
    (130362 call shouldReturnRvalueByConstRef(130358 call . _value c"eltType"))
  }
  function _array[133594](?).this[130379](arg _mt[133702]:_MT[238], arg this[133700]:_array[133594](?), arg d[130376] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130409 call _cond_test(130386 call !=(130382 call . d c"rank") rank))
    {
      (130407 call compilerError "slicing an array with a domain of a different rank")
    }
    if(130422 call _cond_test boundsChecking)
    {
      (130420 call checkSlice d _value)
    }
    const tmp[130471] "const" "temp"(130468 IfExpr (130437 call(130433 call . _value c"isSliceArrayView")) then
    { scopeless
      (130455 call _build_tuple(130442 call .(130439 call . this c"_value") c"arr")(130451 call .(130446 call . this c"_value") c"_ArrPid"))
    } else
    { scopeless
      (130466 call _build_tuple(130458 call . this c"_value")(130462 call . this c"_pid"))
    } )
    (130478 call _check_tuple_var_decl tmp[130471] 2)
    const arr[130427] "const"(130472 call tmp[130471] 0)
    const arrpid[130429] "const"(130475 call tmp[130471] 1)
    (130483 'end of statement')
    unknown a[130509](130486 'new'(_chpl_manager = unmanaged[220](?))(130508 call ArrayViewSliceArr(eltType =(130489 call . this c"eltType"))(_DomPid =(130495 call . d c"_pid"))(dom =(130500 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
    (130512 'end of statement')
    (130526 call(130517 call .(130514 call . d c"_value") c"add_arr") a(locking = 1)(addToList = 0))
    (130532 return(130531 call _newArray a))
  }
  function _array[133594](?).this[130542](arg _mt[133706]:_MT[238], arg this[133704]:_array[133594](?), arg ranges[130539]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130557 call _cond_test boundsChecking)
    {
      (130555 call checkSlice(130551 'expand_tuple' ranges)(value = _value))
    }
    unknown d[130568] "no auto destroy"(130567 call _dom(130565 'expand_tuple' ranges))
    (130571 'end of statement')
    (130582 call =(130578 call .(130573 call . d c"_value") c"_free_when_no_arrs") 1)
    const tmp[130627] "const" "temp"(130624 IfExpr (130595 call(130591 call . _value c"isSliceArrayView")) then
    { scopeless
      (130611 call _build_tuple(130600 call .(130597 call . this c"_value") c"arr")(130607 call .(130604 call . this c"_value") c"_ArrPid"))
    } else
    { scopeless
      (130622 call _build_tuple(130614 call . this c"_value")(130618 call . this c"_pid"))
    } )
    (130634 call _check_tuple_var_decl tmp[130627] 2)
    const arr[130585] "const"(130628 call tmp[130627] 0)
    const arrpid[130587] "const"(130631 call tmp[130627] 1)
    (130639 'end of statement')
    unknown a[130665](130642 'new'(_chpl_manager = unmanaged[220](?))(130664 call ArrayViewSliceArr(eltType =(130645 call . this c"eltType"))(_DomPid =(130651 call . d c"_pid"))(dom =(130656 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
    (130668 'end of statement')
    (130682 call(130673 call .(130670 call . d c"_value") c"add_arr") a(locking = 0)(addToList = 0))
    (130688 return(130687 call _newArray a))
  }
  where {
    (130547 call chpl__isTupleOfRanges ranges)
  }
  function _array[133594](?).this[130699](arg _mt[133710]:_MT[238], arg this[133708]:_array[133594](?), arg args[130696]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130718 call _cond_test boundsChecking)
    {
      (130716 call checkRankChange args)
    }
    const rcdom[130732] "const"(130731 call(130725 call . this c"_dom")(130729 'expand_tuple' args))
    (130735 'end of statement')
    const tmp[130752] "const" "temp"(130750 call _build_tuple(130742 call . this c"_value")(130746 call . this c"_pid"))
    (130759 call _check_tuple_var_decl tmp[130752] 2)
    const arr[130736] "const"(130753 call tmp[130752] 0)
    const arrpid[130738] "const"(130756 call tmp[130752] 1)
    (130764 'end of statement')
    unknown a[130806](130767 'new'(_chpl_manager = unmanaged[220](?))(130805 call ArrayViewRankChangeArr(eltType =(130770 call . this c"eltType"))(_DomPid =(130776 call . rcdom c"_pid"))(dom =(130781 call . rcdom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)(collapsedDim =(130793 call .(130790 call . rcdom c"_value") c"collapsedDim"))(idx =(130801 call .(130798 call . rcdom c"_value") c"idx"))))
    (130809 'end of statement')
    (130821 call(130814 call .(130811 call . rcdom c"_value") c"add_arr") a(locking = 0))
    (130827 return(130826 call _newArray a))
  }
  where {
    (130711 call _validRankChangeArgs args(130708 call .(130705 call . _value c"dom") c"idxType"))
  }
  function _array[133594](?).checkRankChange[130836](arg _mt[133714]:_MT[238], arg this[133712]:_array[133594](?), arg args[130834]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130917] 0
      unknown tmp[130918] "maybe param" "temp"
      (130930 'move' tmp[130918](130928 call chpl_compute_low_param_loop_bound 0(130844 call -(130840 call . args c"size") 1)))
      unknown tmp[130919] "maybe param" "temp"
      (130943 'move' tmp[130919](130941 call chpl_compute_high_param_loop_bound 0(130935 call -(130937 call . args c"size") 1)))
      unknown tmp[130920] "maybe param" "temp"
      (130946 'move' tmp[130920] 1)
      ParamForLoop[130948]
      { i[130917] tmp[130918] tmp[130919] tmp[130920]
        if(130912 call _cond_test(130867 call !(130866 call(130858 call .(130857 call(130852 call .(130849 call . _value c"dom") c"dsiDim") i) c"boundsCheck")(130864 call args i))))
        {
          (130910 call halt "array slice out of bounds in dimension " i ": "(130909 call args i))
        }
      }
      label _unused_continueLabel[130922]
      label _breakLabel[130921]
    }
  }
  function _array[133594](?).localSlice[130966](arg _mt[133718]:_MT[238], arg this[133716]:_array[133594](?), arg r[130963]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130989 call _cond_test boundsChecking)
    {
      (130987 call checkSlice(130983 'expand_tuple' r)(value = _value))
    }
    unknown dom[131000](130999 call _dom(130997 'expand_tuple' r))
    (131003 'end of statement')
    (131008 return(131007 call chpl__localSliceDefaultArithArrHelp dom))
  }
  where {
    (130978 call &&(354336 'is_subtype' DefaultRectangularArr(130970 'typeof' _value))(130977 call chpl__isTupleOfRanges r))
  }
  function _array[133594](?).localSlice[131019](arg _mt[133722]:_MT[238], arg this[133720]:_array[133594](?), arg d[131016] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(131041 call _cond_test boundsChecking)
    {
      (131039 call checkSlice(131035 'expand_tuple'(131034 call(131030 call . d c"getIndices")))(value = _value))
    }
    (131051 return(131050 call chpl__localSliceDefaultArithArrHelp d))
  }
  where {
    (354337 'is_subtype' DefaultRectangularArr(131023 'typeof' _value))
  }
  function _array[133594](?).chpl__localSliceDefaultArithArrHelp[131062](arg _mt[133726]:_MT[238], arg this[133724]:_array[133594](?), arg d[131059] :
  _domain) : _unknown[51] "method" "primary method" "no copy return"
  {
    if(131102 call _cond_test(131069 call !=(131066 call chpl_localeID_to_locale(131065 '_wide_get_locale' _value)) here))
    {
      (131100 call halt "Attempting to take a local slice of an array on locale "(131094 '_wide_get_node' _value) " from locale "(131097 call . here c"id"))
    }
    (131112 return(131111 call this d))
  }
  function _array[133594](?).localSlice[131122](arg _mt[133730]:_MT[238], arg this[133728]:_array[133594](?), arg r[131119]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(131147 call _cond_test boundsChecking)
    {
      (131145 call checkSlice(131141 'expand_tuple' r)(value = _value))
    }
    (131160 return(131159 call(131154 call . _value c"dsiLocalSlice") r))
  }
  where {
    (131136 call &&(131127 call chpl__isTupleOfRanges r)(131134 call !(354338 'is_subtype' DefaultRectangularArr(131130 'typeof' _value))))
  }
  function _array[133594](?).localSlice[131171](arg _mt[133734]:_MT[238], arg this[133732]:_array[133594](?), arg d[131168] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    (131183 return(131182 call localSlice(131180 'expand_tuple'(131179 call(131175 call . d c"getIndices")))))
  }
  function _array[133594](?).these[131190](arg _mt[133738]:_MT[238], arg this[133736]:_array[133594](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[131203] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131204] "expr temp" "temp"
      (131213 'move' _iterator[131204](131211 call _getIterator(131198 call(131194 call . _value c"these"))))
      Defer
      {
        {
          (131230 call _freeIterator _iterator[131204])
        }
      }
      { scopeless type
        (131219 'move' _indexOfInterest[131203](131216 call iteratorIndex _iterator[131204]))
      }
      ForLoop[131205]
      {
        unknown i[131223] "index var" "insert auto destroy"
        (131225 'move' i[131223] _indexOfInterest[131203])
        {
          (131200 yield i)
        }
        label _continueLabel[131208]
        _indexOfInterest[131203]
        _iterator[131204]
      }
      label _breakLabel[131209]
    }
  }
  function _array[133594](?).these[131246](arg _mt[133742]:_MT[238], arg this[133740]:_array[133594](?), param arg tag[131243] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[131275] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131276] "expr temp" "temp"
      (131285 'move' _iterator[131276](131283 call _getIterator(131271 call(131266 call . _value c"these") tag)))
      Defer
      {
        {
          (131302 call _freeIterator _iterator[131276])
        }
      }
      { scopeless type
        (131291 'move' _indexOfInterest[131275](131288 call iteratorIndex _iterator[131276]))
      }
      ForLoop[131277]
      {
        unknown i[131295] "index var" "insert auto destroy"
        (131297 'move' i[131295] _indexOfInterest[131275])
        (131273 yield i)
        label _continueLabel[131280]
        _indexOfInterest[131275]
        _iterator[131276]
      }
      label _breakLabel[131281]
    }
  }
  where {
    (131262 call &&(131253 call == tag(131250 call . iterKind c"standalone"))(131261 'method call resolves' _value "these"(tag = tag)))
  }
  function _array[133594](?).these[131319](arg _mt[133746]:_MT[238], arg this[133744]:_array[133594](?), param arg tag[131316] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[131339] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131340] "expr temp" "temp"
      (131349 'move' _iterator[131340](131347 call _getIterator(131335 call(131330 call . _value c"these") tag)))
      Defer
      {
        {
          (131366 call _freeIterator _iterator[131340])
        }
      }
      { scopeless type
        (131355 'move' _indexOfInterest[131339](131352 call iteratorIndex _iterator[131340]))
      }
      ForLoop[131341]
      {
        unknown followThis[131359] "index var" "insert auto destroy"
        (131361 'move' followThis[131359] _indexOfInterest[131339])
        (131337 yield followThis)
        label _continueLabel[131344]
        _indexOfInterest[131339]
        _iterator[131340]
      }
      label _breakLabel[131345]
    }
  }
  where {
    (131326 call == tag(131323 call . iterKind c"leader"))
  }
  function _array[133594](?).these[131383](arg _mt[133750]:_MT[238], arg this[133748]:_array[133594](?), param arg tag[131380] :
  iterKind, arg followThis[131385]:_any[178](?), param arg fast[131389] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    if(131507 call _cond_test(131409 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[131425] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131426] "expr temp" "temp"
        (131435 'move' _iterator[131426](131433 call _getIterator(131421 call(131412 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (131452 call _freeIterator _iterator[131426])
          }
        }
        { scopeless type
          (131441 'move' _indexOfInterest[131425](131438 call iteratorIndex _iterator[131426]))
        }
        ForLoop[131427]
        {
          unknown i[131445] "index var" "insert auto destroy"
          (131447 'move' i[131445] _indexOfInterest[131425])
          (131423 yield i)
          label _continueLabel[131430]
          _indexOfInterest[131425]
          _iterator[131426]
        }
        label _breakLabel[131431]
      }
    }
    {
      {
        unknown _indexOfInterest[131472] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131473] "expr temp" "temp"
        (131482 'move' _iterator[131473](131480 call _getIterator(131468 call(131462 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (131499 call _freeIterator _iterator[131473])
          }
        }
        { scopeless type
          (131488 'move' _indexOfInterest[131472](131485 call iteratorIndex _iterator[131473]))
        }
        ForLoop[131474]
        {
          unknown i[131492] "index var" "insert auto destroy"
          (131494 'move' i[131492] _indexOfInterest[131472])
          (131470 yield i)
          label _continueLabel[131477]
          _indexOfInterest[131472]
          _iterator[131473]
        }
        label _breakLabel[131478]
      }
    }
  }
  where {
    (131398 call == tag(131395 call . iterKind c"follower"))
  }
  function _array[133594](?).numElements[131517](arg _mt[133754]:_MT[238], arg this[133752]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (131557 call compilerWarning(131554 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131561 return size)
  }
  function _array[133594](?).size[131567](arg _mt[133758]:_MT[238], arg this[133756]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (131576 return(131573 call .(131570 call . _value c"dom") c"dsiNumIndices"))
  }
  function _array[133594](?).chpl_checkArrArgDoms[131587](arg _mt[133762]:_MT[238], arg this[133760]:_array[133594](?), arg formalDom[131584] :
  _domain, param arg runtimeChecks[131590] :
  bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(131669 call _cond_test(131604 call !=(131594 call . formalDom c"rank")(131601 call .(131598 call . this c"_dom") c"rank")))
    {
      (131667 call compilerError(131662 call +(131650 call +(131631 call + "Rank mismatch passing array argument: expected "(131629 call _cast string[26](131625 call . formalDom c"rank"))) " but got ")(131660 call _cast string[26](131656 call .(131653 call . this c"_dom") c"rank")))(errorDepth = 2))
    }
    if(131813 call _cond_test(131685 call !=(131682 'typeof'(131679 call .(131676 call . formalDom c"dist") c"_value"))(131684 'to unmanaged class from unknown' DefaultDist)))
    {
      if(131719 call _cond_test(131694 call !=(131688 'typeof' formalDom)(131693 'typeof'(131690 call . this c"_dom"))))
      {
        (131717 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      if(131808 call _cond_test(131739 call && runtimeChecks(131737 call !=(131727 call . formalDom c"dist")(131734 call .(131731 call . this c"_dom") c"dist"))))
      {
        (131806 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: "(131778 call . formalDom c"dist") "\n" "  Actual domain map is: "(131803 call .(131800 call . this c"_dom") c"dist"))
      }
    }
    if(131888 call _cond_test(131825 call && runtimeChecks(131823 call != formalDom(131820 call . this c"_dom"))))
    {
      (131886 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom "\n" "  Actual domain is: "(131883 call . this c"_dom"))
    }
  }
  function _array[133594](?).reindex[131901](arg _mt[133766]:_MT[238], arg this[133764]:_array[133594](?), arg newDomain[131898] :
  _domain) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    (131926 return(131925 call reindex(131923 'expand_tuple'(131922 call(131918 call . newDomain c"dims")))))
  }
  where {
    (131914 call &&(131909 call isRectangularDom(131905 call . this c"_dom"))(131913 call isRectangularDom newDomain))
  }
  function _array[133594](?).reindex[131938](arg _mt[133770]:_MT[238], arg this[133768]:_array[133594](?), arg newDims[131935]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    {
      unknown i[131992] 0
      unknown tmp[131993] "maybe param" "temp"
      (132005 'move' tmp[131993](132003 call chpl_compute_low_param_loop_bound 0(131953 call -(131949 call . newDims c"size") 1)))
      unknown tmp[131994] "maybe param" "temp"
      (132018 'move' tmp[131994](132016 call chpl_compute_high_param_loop_bound 0(132010 call -(132012 call . newDims c"size") 1)))
      unknown tmp[131995] "maybe param" "temp"
      (132021 'move' tmp[131995] 1)
      ParamForLoop[132023]
      { i[131992] tmp[131993] tmp[131994] tmp[131995]
        if(131987 call _cond_test(131964 call !(131963 call isRange(131961 call newDims i))))
        {
          (131985 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[131997]
      label _breakLabel[131996]
    }
    if(132101 call _cond_test(132041 call !=(132034 call . this c"rank")(132038 call . newDims c"size")))
    {
      (132099 call compilerError(132096 call +(132087 call +(132068 call + "rank mismatch: cannot reindex() from "(132066 call _cast string[26](132062 call . this c"rank"))) " dimension(s) to ")(132094 call _cast string[26](132090 call . newDims c"size"))))
    }
    {
      unknown i[132179] 0
      unknown tmp[132180] "maybe param" "temp"
      (132192 'move' tmp[132180](132190 call chpl_compute_low_param_loop_bound 0(132109 call - rank 1)))
      unknown tmp[132181] "maybe param" "temp"
      (132202 'move' tmp[132181](132200 call chpl_compute_high_param_loop_bound 0(132197 call - rank 1)))
      unknown tmp[132182] "maybe param" "temp"
      (132205 'move' tmp[132182] 1)
      ParamForLoop[132207]
      { i[132179] tmp[132180] tmp[132181] tmp[132182]
        if(132174 call _cond_test(132133 call !=(132117 call .(132116 call newDims i) c"size")(132130 call .(132129 call(132124 call .(132121 call . _value c"dom") c"dsiDim") i) c"size")))
        {
          (132172 call halt "extent in dimension " i " does not match actual")
        }
      }
      label _unused_continueLabel[132184]
      label _breakLabel[132183]
    }
    const thisDomClass[132223] "const"(132220 call .(132217 call . this c"_value") c"dom")
    (132226 'end of statement')
    const tmp[132240] "const" "temp"(132238 call _build_tuple thisDomClass(132234 call . thisDomClass c"pid"))
    (132247 call _check_tuple_var_decl tmp[132240] 2)
    const dom[132227] "const"(132241 call tmp[132240] 0)
    const dompid[132229] "const"(132244 call tmp[132240] 1)
    (132252 'end of statement')
    const updom[132258] "const" "no auto destroy"(132256 call chpl__buildDomainExpr(132254 'expand_tuple' newDims))
    (132261 'end of statement')
    const redist[132299] "const"(132264 'new'(_chpl_manager = unmanaged[220](?))(132298 call ArrayViewReindexDist(downDistPid =(132273 call .(132270 call .(132267 call . this c"_dom") c"dist") c"_pid"))(downDistInst =(132285 call .(132282 call .(132279 call . this c"_dom") c"dist") c"_instance"))(updom =(132290 call . updom c"_value"))(downdomPid = dompid)(downdomInst = dom)))
    (132302 'end of statement')
    const redistRec[132308] "const"(132303 'new'(132307 call _distribution redist))
    (132311 'end of statement')
    const newDom[132332] "const" "no auto destroy"(132312 'new'(132331 call _domain redistRec rank(132318 call . updom c"idxType")(132322 call . updom c"stridable")(132330 call(132326 call . updom c"dims"))))
    (132335 'end of statement')
    (132344 call =(132340 call .(132337 call . newDom c"_value") c"_free_when_no_arrs") 1)
    const tmp[132363] "const" "temp"(132361 call _build_tuple(132353 call . this c"_value")(132357 call . this c"_pid"))
    (132370 call _check_tuple_var_decl tmp[132363] 2)
    const arr[132347] "const"(132364 call tmp[132363] 0)
    const arrpid[132349] "const"(132367 call tmp[132363] 1)
    (132375 'end of statement')
    unknown x[132401](132378 'new'(_chpl_manager = unmanaged[220](?))(132400 call ArrayViewReindexArr(eltType =(132381 call . this c"eltType"))(_DomPid =(132387 call . newDom c"_pid"))(dom =(132392 call . newDom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
    (132404 'end of statement')
    (132416 call(132409 call .(132406 call . newDom c"_value") c"add_arr") x(locking = 0))
    (132422 return(132421 call _newArray x))
  }
  where {
    (131946 call isRectangularDom(131942 call . this c"_dom"))
  }
  function _array[133594](?).reindex[132433](arg _mt[133774]:_MT[238], arg this[133772]:_array[133594](?), arg d[132430] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132454 call compilerError "Reindexing non-rectangular arrays is not permitted.")
  }
  function _array[133594](?).writeThis[132463](arg _mt[133778]:_MT[238], arg this[133776]:_array[133594](?), arg f[132461]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (132471 call(132466 call . _value c"dsiSerialWrite") f)
  }
  function _array[133594](?).readThis[132480](arg _mt[133782]:_MT[238], arg this[133780]:_array[133594](?), arg f[132478]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    (132488 call(132483 call . _value c"dsiSerialRead") f)
  }
  function _array[133594](?).IRV[132495](arg _mt[133786]:_MT[238], arg this[133784]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132522 call compilerError "only sparse arrays have an IRV")
  }
  where {
    (132501 call !(132500 call isSparseArr this))
  }
  function _array[133594](?).IRV[132530](arg _mt[133790]:_MT[238], arg this[133788]:_array[133594](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (132542 return(132539 call . _value c"IRV"))
  }
  where {
    (132535 call isSparseArr this)
  }
  function _array[133594](?).sorted[132559](arg _mt[133794]:_MT[238], arg this[133792]:_array[133594](?), arg comparator[132555] :
  unknown t[132550] =
  (132554 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(132726 call _cond_test(132583 call(132562 call . Reflection c"canResolveMethod") _value "dsiSorted" comparator))
    {
      {
        unknown _indexOfInterest[132596] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132597] "expr temp" "temp"
        (132606 'move' _iterator[132597](132604 call _getIterator(132591 call(132586 call . _value c"dsiSorted") comparator)))
        Defer
        {
          {
            (132623 call _freeIterator _iterator[132597])
          }
        }
        { scopeless type
          (132612 'move' _indexOfInterest[132596](132609 call iteratorIndex _iterator[132597]))
        }
        ForLoop[132598]
        {
          unknown i[132616] "index var" "insert auto destroy"
          (132618 'move' i[132616] _indexOfInterest[132596])
          {
            (132593 yield i)
          }
          label _continueLabel[132601]
          _indexOfInterest[132596]
          _iterator[132597]
        }
        label _breakLabel[132602]
      }
    }
    {
      if(132722 call _cond_test(132638 call(132632 call . Reflection c"canResolveMethod") _value "dsiSorted"))
      {
        (132665 call compilerError(132662 call +(132643 call _cast string[26](132641 'typeof' _value)) " does not support dsiSorted(comparator)"))
      }
      {
        (132669 'use' Sort)
        unknown copy[132673] this
        (132676 'end of statement')
        (132682 call sort copy(comparator = comparator))
        {
          unknown _indexOfInterest[132689] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132690] "expr temp" "temp"
          (132699 'move' _iterator[132690](132697 call _getIterator copy))
          Defer
          {
            {
              (132715 call _freeIterator _iterator[132690])
            }
          }
          { scopeless type
            (132704 'move' _indexOfInterest[132689](132701 call iteratorIndex _iterator[132690]))
          }
          ForLoop[132691]
          {
            unknown ind[132708] "index var" "insert auto destroy"
            (132710 'move' ind[132708] _indexOfInterest[132689])
            (132687 yield ind)
            label _continueLabel[132694]
            _indexOfInterest[132689]
            _iterator[132690]
          }
          label _breakLabel[132695]
        }
      }
    }
  }
  function _array[133594](?).displayRepresentation[132736](arg _mt[133798]:_MT[238], arg this[133796]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (132743 call(132739 call . _value c"dsiDisplayRepresentation"))
  }
  function _array[133594](?).targetLocales[132750](arg _mt[133802]:_MT[238], arg this[133800]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    (132758 return(132757 call(132753 call . _value c"dsiTargetLocales")))
  }
  function _array[133594](?).hasSingleLocalSubdomain[132765](arg _mt[133806]:_MT[238], arg this[133804]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    (132773 return(132772 call(132768 call . _value c"dsiHasSingleLocalSubdomain")))
  }
  function _array[133594](?).localSubdomain[132786](arg _mt[133810]:_MT[238], arg this[133808]:_array[133594](?), arg loc[132782] :
  locale[28] =
  here) : _unknown[51] "method" "primary method"
  {
    if(132801 call _cond_test(132794 call !(132793 call(132789 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      (132799 call compilerError "Domain's local domain is not a single domain")
    }
    (132814 return(132813 call(132808 call . _value c"dsiLocalSubdomain") loc))
  }
  function _array[133594](?).localSubdomains[132826](arg _mt[133814]:_MT[238], arg this[133812]:_array[133594](?), arg loc[132822] :
  locale[28] =
  here) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(132887 call _cond_test(132833 call(132829 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (132838 yield(132837 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[132852] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132853] "expr temp" "temp"
        (132862 'move' _iterator[132853](132860 call _getIterator(132848 call(132843 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (132879 call _freeIterator _iterator[132853])
          }
        }
        { scopeless type
          (132868 'move' _indexOfInterest[132852](132865 call iteratorIndex _iterator[132853]))
        }
        ForLoop[132854]
        {
          unknown d[132872] "index var" "insert auto destroy"
          (132874 'move' d[132872] _indexOfInterest[132852])
          (132850 yield d)
          label _continueLabel[132857]
          _indexOfInterest[132852]
          _iterator[132853]
        }
        label _breakLabel[132858]
      }
    }
  }
  function _array[133594](?).chpl__isDense1DArray[132896](arg _mt[133818]:_MT[238], arg this[133816]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    (132922 return(132920 call &&(132909 call &&(132901 call isRectangularArr this)(132907 call ==(132903 call . this c"rank") 1))(132918 call !(132915 call .(132912 call . this c"_value") c"stridable"))))
  }
  function _array[133594](?).chpl__assertSingleArrayDomain[132933](arg _mt[133822]:_MT[238], arg this[133820]:_array[133594](?), arg fnName[132930] :
  string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(132994 call _cond_test(132949 call !=(132945 call .(132942 call .(132939 call .(132936 call . this c"_dom") c"_value") c"_arrs") c"size") 1))
    {
      (132992 call halt(132989 call +(132970 call + "cannot call " fnName) " on an array defined over a domain with multiple arrays"))
    }
  }
  function _array[133594](?).isEmpty[133004](arg _mt[133826]:_MT[238], arg this[133824]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    (133014 return(133012 call ==(133008 call . this c"size") 0))
  }
  { scopeless type
    bool[10]
  }
  function _array[133594](?).head[133022](arg _mt[133830]:_MT[238], arg this[133828]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133041 return(133040 call this(133036 call .(133033 call . this c"_dom") c"alignedLow")))
  }
  { scopeless type
    (133028 call .(133025 call . this c"_value") c"eltType")
  }
  function _array[133594](?).tail[133049](arg _mt[133834]:_MT[238], arg this[133832]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133068 return(133067 call this(133063 call .(133060 call . this c"_dom") c"alignedHigh")))
  }
  { scopeless type
    (133055 call .(133052 call . this c"_value") c"eltType")
  }
  function _array[133594](?).back[133076](arg _mt[133838]:_MT[238], arg this[133836]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    if(133114 call _cond_test(133091 call ||(133082 call !(133081 call isRectangularArr this))(133089 call !=(133085 call . this c"rank") 1)))
    {
      (133112 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    if(133147 call _cond_test(133124 call && boundsChecking(133123 call isEmpty)))
    {
      (133145 call halt "back called on an empty array")
    }
    (133162 return(133161 call this(133157 call .(133154 call . this c"_dom") c"high")))
  }
  function _array[133594](?).front[133168](arg _mt[133842]:_MT[238], arg this[133840]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    if(133206 call _cond_test(133183 call ||(133174 call !(133173 call isRectangularArr this))(133181 call !=(133177 call . this c"rank") 1)))
    {
      (133204 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    if(133239 call _cond_test(133216 call && boundsChecking(133215 call isEmpty)))
    {
      (133237 call halt "front called on an empty array")
    }
    (133254 return(133253 call this(133249 call .(133246 call . this c"_dom") c"low")))
  }
  function _array[133594](?).reverse[133260](arg _mt[133846]:_MT[238], arg this[133844]:_array[133594](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(133288 call _cond_test(133265 call !(133264 call chpl__isDense1DArray)))
    {
      (133286 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    const lo[133301] "const"(133298 call .(133295 call . this c"_dom") c"low")
    const mid[133314] "const"(133312 call /(133308 call .(133305 call . this c"_dom") c"size") 2)
    const hi[133324] "const"(133321 call .(133318 call . this c"_dom") c"high")
    (133327 'end of statement')
    {
      unknown _indexOfInterest[133353] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133354] "expr temp" "temp"
      (133363 'move' _iterator[133354](133361 call _getIterator(133370 call chpl_direct_counted_range_iter 0 mid)))
      Defer
      {
        {
          (133386 call _freeIterator _iterator[133354])
        }
      }
      { scopeless type
        (133375 'move' _indexOfInterest[133353](133372 call iteratorIndex _iterator[133354]))
      }
      ForLoop[133355]
      {
        unknown i[133379] "index var" "insert auto destroy"
        (133381 'move' i[133379] _indexOfInterest[133353])
        {
          (133349 call <=>(133341 call this(133338 call + lo i))(133348 call this(133345 call - hi i)))
        }
        label _continueLabel[133358]
        _indexOfInterest[133353]
        _iterator[133354]
      }
      label _breakLabel[133359]
    }
  }
  function _array[133594](?).find[133404](arg _mt[133850]:_MT[238], arg this[133848]:_array[133594](?), arg val[133401] :
  (133398 call . this c"eltType")) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[133442] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133443] "expr temp" "temp"
      (133452 'move' _iterator[133443](133450 call _getIterator(133419 call . this c"_dom")))
      Defer
      {
        {
          (133469 call _freeIterator _iterator[133443])
        }
      }
      { scopeless type
        (133458 'move' _indexOfInterest[133442](133455 call iteratorIndex _iterator[133443]))
      }
      ForLoop[133444]
      {
        unknown i[133462] "index var" "insert auto destroy"
        (133464 'move' i[133462] _indexOfInterest[133442])
        {
          if(133436 call _cond_test(133427 call ==(133425 call this i) val))
          {
            (133434 return(133432 call _build_tuple 1 i))
          }
        }
        label _continueLabel[133447]
        _indexOfInterest[133442]
        _iterator[133443]
      }
      label _breakLabel[133448]
    }
    unknown arbInd[133484](133482 call chpl__buildIndexType(133478 call . this c"_dom"))
    (133487 'end of statement')
    (133493 return(133491 call _build_tuple 0 arbInd))
  }
  { scopeless type
    (133415 call _build_tuple bool[10](133412 call chpl__buildIndexType(133408 call . this c"_dom")))
  }
  function _array[133594](?).count[133507](arg _mt[133854]:_MT[238], arg this[133852]:_array[133594](?), arg val[133504] :
  (133501 call . this c"eltType")) : _unknown[51] "method" "primary method"
  {
    (133517 return(133515 'reduce' SumReduceScanOp(133513 call == this val) 0))
  }
  { scopeless type
    int[13]
  }
  function _array[133594](?).shape[133525](arg _mt[133858]:_MT[238], arg this[133856]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (133536 return(133533 call .(133528 call . this c"_dom") c"shape"))
  }
  function _array[133594](?)._scan[133545](arg _mt[133862]:_MT[238], arg this[133860]:_array[133594](?), arg op[133543]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133587 return(133586 call(133577 call . _value c"doiScan") op(133583 call . this c"_dom")))
  }
  where {
    (133575 call(133548 call . Reflection c"canResolveMethod") _value "doiScan" op(133572 call . this c"_dom"))
  }
  type _array[133594](?) unknown _pid[128421] int[13] unknown _instance[128425] "alias scope from this" "owned" unknown _unowned[128430] bool[10] forwarding ( )
  function _do_destroy_arr[133871](arg _unowned[133868] :
  bool[10], arg _instance[133873]:_any[178](?), arg deinitElts[133876] =
  1) : _unknown[51] "inline" "no return value for void"
  {
    if(134119 call _cond_test(133880 call ! _unowned))
    {
      const tmp[134095] "const" "temp"
      (134097 'move' tmp[134095](134093 'deref'(134092 '_wide_get_locale' _instance)))
      {
        {
          unknown arrIsInList[133891] "param"(133889 call !(133888 call(133884 call . _instance c"isSliceArrayView")))
          (133894 'end of statement')
          unknown tmp[133908] "temp"(133907 call(133902 call . _instance c"remove") arrIsInList)
          (133915 call _check_tuple_var_decl tmp[133908] 2)
          unknown arrToFree[133896](133909 call tmp[133908] 0)
          unknown domToRemove[133898](133912 call tmp[133908] 1)
          (133920 'end of statement')
          unknown domToFree[133925] nil[44](133923 'to unmanaged class from unknown'(133922 'to nilable class from type' BaseDom))
          (133928 'end of statement')
          unknown distToRemove[133933] nil[44](133931 'to unmanaged class from unknown'(133930 'to nilable class from type' BaseDist))
          (133936 'end of statement')
          unknown distToFree[133941] nil[44](133939 'to unmanaged class from unknown'(133938 'to nilable class from type' BaseDist))
          (133944 'end of statement')
          unknown domIsPrivatized[133946] 0
          (133949 'end of statement')
          const instanceDom[133951] "const" domToRemove
          (133954 'end of statement')
          if(133992 call _cond_test(133957 call != domToRemove nil[44]))
          {
            (133972 call =(133962 call _build_tuple domToFree distToRemove)(133971 call(133967 call .(133965 call postfix! domToRemove) c"remove")))
            (133989 call = domIsPrivatized(133987 call && _privatization(133985 call !=(133981 call .(133979 call postfix! domToRemove) c"pid") nullPid)))
          }
          unknown distIsPrivatized[133997] 0
          (134000 'end of statement')
          if(134034 call _cond_test(134003 call != distToRemove nil[44]))
          {
            (134014 call = distToFree(134013 call(134009 call .(134007 call postfix! distToRemove) c"remove")))
            (134031 call = distIsPrivatized(134029 call && _privatization(134027 call !=(134023 call .(134021 call postfix! distToRemove) c"pid") nullPid)))
          }
          if(134053 call _cond_test(134040 call != arrToFree nil[44]))
          {
            (134051 call _delete_arr _instance(134048 call _isPrivatized _instance)(deinitElts = deinitElts))
          }
          if(134070 call _cond_test(134060 call != domToFree nil[44]))
          {
            (134068 call _delete_dom(134064 call postfix! instanceDom) domIsPrivatized)
          }
          if(134087 call _cond_test(134077 call != distToFree nil[44]))
          {
            (134085 call _delete_dist(134081 call postfix! distToFree) distIsPrivatized)
          }
        }
        (134100 'on block' 0 tmp[134095])
      }
    }
    {
      if(134114 call _cond_test(134107 call chpl__isArrayView _instance))
      {
        (134110 call chpl__delete _instance)
      }
    }
  }
  function _do_destroy_array[134132](arg array[134129] :
  _array, arg deinitElts[134135] =
  1) : _unknown[51] "inline" "no return value for void"
  {
    (134149 call _do_destroy_arr(134140 call . array c"_unowned")(134145 call . array c"_instance") deinitElts)
  }
  function _deinitElementsIsParallel[134158](arg eltType[134156]:_any[178](?)) param : _unknown[51]
  {
    (134161 return 0)
  }
  function _deinitElements[134172](arg array[134169] :
  _array) : _unknown[51] "no return value for void"
  {
    unknown needsDestroy[134181] "param"(134180 'needs auto destroy'(134177 call . array c"eltType"))
    (134184 'end of statement')
    if(134255 call _cond_test needsDestroy)
    {
      if(134250 call _cond_test(134193 call _deinitElementsIsParallel(134189 call . array c"eltType")))
      {
        Forall {
          induction variables:
            
            unknown elt[134203] "index var" "insert auto destroy"
          iterated expressions:
            array
          shadow variables:
          other variables
            forall body
          {
            (134199 call chpl__autoDestroy elt)
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134216] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134217] "expr temp" "temp"
          (134226 'move' _iterator[134217](134224 call _getIterator array))
          Defer
          {
            {
              (134242 call _freeIterator _iterator[134217])
            }
          }
          { scopeless type
            (134231 'move' _indexOfInterest[134216](134228 call iteratorIndex _iterator[134217]))
          }
          ForLoop[134218]
          {
            unknown elt[134235] "index var" "insert auto destroy"
            (134237 'move' elt[134235] _indexOfInterest[134216])
            {
              (134213 call chpl__autoDestroy elt)
            }
            label _continueLabel[134221]
            _indexOfInterest[134216]
            _iterator[134217]
          }
          label _breakLabel[134222]
        }
      }
    }
    (134269 call(134265 call .(134260 call . array c"_instance") c"dsiElementDeinitializationComplete"))
  }
  function _unknown[51].equals[134280](arg _mt[134285]:_MT[238], arg this[134282] :
  _array, arg that[134277] :
  _array) : _unknown[51] "method"
  {
    if(134301 call _cond_test(134296 call ==(134289 call . this c"_value")(134293 call . that c"_value")))
    {
      (134299 return 1)
    }
    if(134320 call _cond_test(134315 call !=(134308 call . this c"rank")(134312 call . that c"rank")))
    {
      (134318 return 0)
    }
    if(134338 call _cond_test(134333 call !=(134326 call . this c"size")(134330 call . that c"size")))
    {
      (134336 return 0)
    }
    if(134449 call _cond_test(134357 call &&(134349 call isRectangularDom(134345 call . this c"_dom"))(134356 call isRectangularDom(134352 call . that c"_dom"))))
    {
      {
        unknown _indexOfInterest[134405] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134406] "expr temp" "temp"
        (134415 'move' _iterator[134406](134413 call _getIterator(134425 call chpl_direct_counted_range_iter 0(134421 call . this c"rank"))))
        Defer
        {
          {
            (134441 call _freeIterator _iterator[134406])
          }
        }
        { scopeless type
          (134430 'move' _indexOfInterest[134405](134427 call iteratorIndex _iterator[134406]))
        }
        ForLoop[134407]
        {
          unknown d[134434] "index var" "insert auto destroy"
          (134436 'move' d[134434] _indexOfInterest[134405])
          if(134400 call _cond_test(134395 call !=(134379 call .(134378 call(134373 call .(134370 call . this c"_dom") c"dim") d) c"size")(134392 call .(134391 call(134386 call .(134383 call . that c"_dom") c"dim") d) c"size")))
          {
            (134398 return 0)
          }
          label _continueLabel[134410]
          _indexOfInterest[134405]
          _iterator[134406]
        }
        label _breakLabel[134411]
      }
    }
    if(134525 call _cond_test(134459 call isArrayType(134455 call . this c"eltType")))
    {
      unknown ret[134461] 1
      (134464 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134506] "index var" "insert auto destroy"
          
          unknown thatArr[134508] "index var" "insert auto destroy"
        iterated expressions:
          this
          that
        shadow variables:
          ret[134477] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134494] "temp"
          (134497 'move' tmp[134494](134496 'addr of' ret))
          (134502 call = tmp[134494](134499 call && tmp[134494](134492 call(134487 call . thisArr c"equals") thatArr)))
        }
      }
      (134513 return ret)
    }
    {
      (134522 return(134520 'reduce' LogicalAndReduceScanOp(134518 call == this that) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function _cast[134538](arg t[134535] :
  _array, param arg arg[134540]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown result[134543] t
    (134546 'end of statement')
    (134552 call chpl__transferArray result arg)
    (134555 return result)
  }
  function _cast[134565](arg t[134562] :
  string[26], arg x[134570] :
  (134567 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "no doc"
  {
    (134574 'use' IO)
    (134581 return(134580 call stringify x))
  }
  function isDmapType[134589](arg t[134587]:_any[178](?)) param : _unknown[51]
  {
    function isDmapHelp[134597](arg t[134594] :
    _distribution) param : _unknown[51]
    {
      (134600 return 1)
    }
    function isDmapHelp[134610](arg t[134608]:_any[178](?)) param : _unknown[51]
    {
      (134613 return 0)
    }
    (134622 return(134621 call isDmapHelp t))
  }
  function isDmapValue[134632](arg e[134629] :
  _distribution) param : _unknown[51] "no doc"
  {
    (134635 return 1)
  }
  function isDmapValue[134644](arg e[134642]:_any[178](?)) param : _unknown[51]
  {
    (134647 return 0)
  }
  function isDomainType[134656](arg t[134654]:_any[178](?)) param : _unknown[51]
  {
    (134663 return(354339 'is_subtype' _domain t))
  }
  function isDomainValue[134674](arg e[134671] :
  _domain) param : _unknown[51] "no doc"
  {
    (134677 return 1)
  }
  function isDomainValue[134686](arg e[134684]:_any[178](?)) param : _unknown[51]
  {
    (134689 return 0)
  }
  function isArrayType[134698](arg t[134696]:_any[178](?)) param : _unknown[51]
  {
    (134705 return(354340 'is_subtype' _array t))
  }
  function isArrayValue[134718](arg e[134715] :
  (134712 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51] "no doc"
  {
    (134721 return 1)
  }
  function isArrayValue[134730](arg e[134728]:_any[178](?)) param : _unknown[51]
  {
    (134733 return 0)
  }
  function -[134744](arg a[134741] :
  _domain, arg b[134747] :
  _domain) : _unknown[51]
  {
    unknown newDom[134764](134763 'typeof' a)
    (134767 'end of statement')
    {
      unknown tmp[134810] "temp"(134811 'task_get_serial')
      if(134807 call _cond_test(134776 call !(134773 call .(134770 call . newDom c"_value") c"parSafe")))
      {
        (134813 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134817 'task_set_serial' tmp[134810])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134803] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          if(134797 call _cond_test(134787 call !(134786 call(134781 call . b c"contains") e)))
          {
            (134795 call(134790 call . newDom c"add") e)
          }
        }
      }
    }
    (134822 return newDom)
  }
  where {
    (134760 call &&(134754 call ==(134751 'typeof' a)(134753 'typeof' b))(134759 call isAssociativeDom a))
  }
  function -=[134833](ref arg a[134830] :
  _domain, arg b[134836] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134874] "expr temp" "temp"
      (134883 'move' _iterator[134874](134881 call _getIterator b))
      Defer
      {
        {
          (134899 call _freeIterator _iterator[134874])
        }
      }
      { scopeless type
        (134888 'move' _indexOfInterest[134873](134885 call iteratorIndex _iterator[134874]))
      }
      ForLoop[134875]
      {
        unknown e[134892] "index var" "insert auto destroy"
        (134894 'move' e[134892] _indexOfInterest[134873])
        if(134868 call _cond_test(134859 call(134854 call . a c"contains") e))
        {
          (134866 call(134861 call . a c"remove") e)
        }
        label _continueLabel[134878]
        _indexOfInterest[134873]
        _iterator[134874]
      }
      label _breakLabel[134879]
    }
  }
  where {
    (134849 call &&(134843 call ==(134840 'typeof' a)(134842 'typeof' b))(134848 call isAssociativeDom a))
  }
  function |[134916](arg a[134913] :
  _domain, arg b[134919] :
  _domain) : _unknown[51]
  {
    (134938 return(134936 call + a b))
  }
  where {
    (134932 call &&(134926 call ==(134923 'typeof' a)(134925 'typeof' b))(134931 call isAssociativeDom a))
  }
  function |=[134950](ref arg a[134947] :
  _domain, arg b[134953] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134978] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134979] "expr temp" "temp"
      (134988 'move' _iterator[134979](134986 call _getIterator b))
      Defer
      {
        {
          (135004 call _freeIterator _iterator[134979])
        }
      }
      { scopeless type
        (134993 'move' _indexOfInterest[134978](134990 call iteratorIndex _iterator[134979]))
      }
      ForLoop[134980]
      {
        unknown e[134997] "index var" "insert auto destroy"
        (134999 'move' e[134997] _indexOfInterest[134978])
        (134976 call(134971 call . a c"add") e)
        label _continueLabel[134983]
        _indexOfInterest[134978]
        _iterator[134979]
      }
      label _breakLabel[134984]
    }
  }
  where {
    (134966 call &&(134960 call ==(134957 'typeof' a)(134959 'typeof' b))(134965 call isAssociativeDom a))
  }
  function +=[135021](ref arg a[135018] :
  _domain, arg b[135024] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    (135041 call |= a b)
  }
  where {
    (135037 call &&(135031 call ==(135028 'typeof' a)(135030 'typeof' b))(135036 call isAssociativeDom a))
  }
  function &[135054](arg a[135051] :
  _domain, arg b[135057] :
  _domain) : _unknown[51]
  {
    unknown newDom[135074](135073 'typeof' a)
    (135077 'end of statement')
    {
      unknown tmp[135121] "temp"(135122 'task_get_serial')
      if(135118 call _cond_test(135086 call !(135083 call .(135080 call . newDom c"_value") c"parSafe")))
      {
        (135124 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135128 'task_set_serial' tmp[135121])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135114] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
          newDom[135091] 'ref' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          if(135108 call _cond_test(135102 call(135097 call . b c"contains") k))
          {
            (135105 call += newDom k)
          }
        }
      }
    }
    (135133 return newDom)
  }
  where {
    (135070 call &&(135064 call ==(135061 'typeof' a)(135063 'typeof' b))(135069 call isAssociativeDom a))
  }
  function &=[135144](ref arg a[135141] :
  _domain, arg b[135147] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135170](135168 call chpl__buildDomainRuntimeType defaultDist(135163 call . a c"idxType"))
    (135173 'end of statement')
    {
      unknown _indexOfInterest[135196] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135197] "expr temp" "temp"
      (135206 'move' _iterator[135197](135204 call _getIterator a))
      Defer
      {
        {
          (135222 call _freeIterator _iterator[135197])
        }
      }
      { scopeless type
        (135211 'move' _indexOfInterest[135196](135208 call iteratorIndex _iterator[135197]))
      }
      ForLoop[135198]
      {
        unknown e[135215] "index var" "insert auto destroy"
        (135217 'move' e[135215] _indexOfInterest[135196])
        if(135191 call _cond_test(135184 call !(135183 call(135178 call . b c"contains") e)))
        {
          (135188 call += removeSet e)
        }
        label _continueLabel[135201]
        _indexOfInterest[135196]
        _iterator[135197]
      }
      label _breakLabel[135202]
    }
    {
      unknown _indexOfInterest[135239] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135240] "expr temp" "temp"
      (135249 'move' _iterator[135240](135247 call _getIterator removeSet))
      Defer
      {
        {
          (135265 call _freeIterator _iterator[135240])
        }
      }
      { scopeless type
        (135254 'move' _indexOfInterest[135239](135251 call iteratorIndex _iterator[135240]))
      }
      ForLoop[135241]
      {
        unknown e[135258] "index var" "insert auto destroy"
        (135260 'move' e[135258] _indexOfInterest[135239])
        (135237 call(135232 call . a c"remove") e)
        label _continueLabel[135244]
        _indexOfInterest[135239]
        _iterator[135240]
      }
      label _breakLabel[135245]
    }
  }
  where {
    (135160 call &&(135154 call ==(135151 'typeof' a)(135153 'typeof' b))(135159 call isAssociativeDom a))
  }
  function ^[135281](arg a[135278] :
  _domain, arg b[135284] :
  _domain) : _unknown[51]
  {
    unknown newDom[135301](135300 'typeof' a)
    (135304 'end of statement')
    {
      unknown tmp[135377] "temp"(135378 'task_get_serial')
      if(135374 call _cond_test(135313 call !(135310 call .(135307 call . newDom c"_value") c"parSafe")))
      {
        (135380 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135384 'task_set_serial' tmp[135377])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135340] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
          other variables
            forall body
          {
            if(135334 call _cond_test(135324 call !(135323 call(135318 call . b c"contains") k)))
            {
              (135332 call(135327 call . newDom c"add") k)
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135370] "index var" "insert auto destroy"
          iterated expressions:
            b
          shadow variables:
          other variables
            forall body
          {
            if(135364 call _cond_test(135354 call !(135353 call(135348 call . a c"contains") k)))
            {
              (135362 call(135357 call . newDom c"add") k)
            }
          }
        }
      }
    }
    (135389 return newDom)
  }
  where {
    (135297 call &&(135291 call ==(135288 'typeof' a)(135290 'typeof' b))(135296 call isAssociativeDom a))
  }
  function ^=[135400](ref arg a[135397] :
  _domain, arg b[135403] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135450] "expr temp" "temp"
      (135459 'move' _iterator[135450](135457 call _getIterator b))
      Defer
      {
        {
          (135475 call _freeIterator _iterator[135450])
        }
      }
      { scopeless type
        (135464 'move' _indexOfInterest[135449](135461 call iteratorIndex _iterator[135450]))
      }
      ForLoop[135451]
      {
        unknown e[135468] "index var" "insert auto destroy"
        (135470 'move' e[135468] _indexOfInterest[135449])
        if(135443 call _cond_test(135426 call(135421 call . a c"contains") e))
        {
          (135433 call(135428 call . a c"remove") e)
        }
        {
          (135441 call(135436 call . a c"add") e)
        }
        label _continueLabel[135454]
        _indexOfInterest[135449]
        _iterator[135450]
      }
      label _breakLabel[135455]
    }
  }
  where {
    (135416 call &&(135410 call ==(135407 'typeof' a)(135409 'typeof' b))(135415 call isAssociativeDom a))
  }
  function +=[135492](ref arg sd[135489] :
  _domain, arg inds[135501] :
  (135498 call chpl__buildArrayRuntimeType nil[44](135496 call chpl__buildIndexType sd))) : _unknown[51] "assignop" "no return value for void"
  {
    if(135517 call _cond_test(135513 call ==(135509 call . inds c"size") 0))
    {
      (135515 return _void[55])
    }
    (135532 call(135527 call .(135524 call . sd c"_value") c"dsiBulkAdd") inds)
  }
  where {
    (135507 call isSparseDom sd)
  }
  function +=[135543](ref arg sd[135540] :
  _domain, arg d[135546] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    if(135586 call _cond_test(135582 call ==(135578 call . d c"size") 0))
    {
      (135584 return _void[55])
    }
    const indCount[135596] "const"(135593 call . d c"size")
    (135599 'end of statement')
    unknown arr[135618](135616 call chpl__buildArrayRuntimeType(135614 call chpl__ensureDomainExpr(135607 call chpl__buildDomainExpr(135604 call #(135601 call chpl_build_low_bounded_range 0) indCount)))(135612 call chpl__buildIndexType sd))
    (135621 'end of statement')
    {
      unknown _indexOfInterest[135641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135642] "expr temp" "temp"
      (135659 'move' _iterator[135642](135632 call _build_tuple(135651 call _getIterator d)(135656 call _getIterator(135654 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (135689 call _freeIterator _iterator[135642])
        }
      }
      { scopeless type
        (135664 'move' _indexOfInterest[135641](135661 call iteratorIndex _iterator[135642]))
      }
      ForLoop[135643]
      {
        (135669 call _check_tuple_var_decl _indexOfInterest[135641] 2)
        unknown i[135675] "index var" "insert auto destroy"
        (135677 'move' i[135675](135673 call _indexOfInterest[135641] 0))
        unknown j[135682] "index var" "insert auto destroy"
        (135684 'move' j[135682](135680 call _indexOfInterest[135641] 1))
        (135638 call =(135636 call arr j) i)
        label _continueLabel[135646]
        _indexOfInterest[135641]
        _iterator[135642]
      }
      label _breakLabel[135647]
    }
    unknown rowSorted[135697] 0
    (135700 'end of statement')
    (135713 call(135705 call .(135702 call . sd c"_value") c"dsiBulkAdd") arr rowSorted 1 0)
  }
  where {
    (135575 call &&(135563 call &&(135552 call isSparseDom sd)(135561 call ==(135554 call . d c"rank")(135558 call . sd c"rank")))(135573 call ==(135566 call . sd c"idxType")(135570 call . d c"idxType")))
  }
  function -=[135724](ref arg sd[135721] :
  _domain, arg inds[135733] :
  (135730 call chpl__buildArrayRuntimeType nil[44](135728 call chpl__buildIndexType sd))) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135748] "expr temp" "temp"
      (135757 'move' _iterator[135748](135755 call _getIterator inds))
      Defer
      {
        {
          (135773 call _freeIterator _iterator[135748])
        }
      }
      { scopeless type
        (135762 'move' _indexOfInterest[135747](135759 call iteratorIndex _iterator[135748]))
      }
      ForLoop[135749]
      {
        unknown ind[135766] "index var" "insert auto destroy"
        (135768 'move' ind[135766] _indexOfInterest[135747])
        (135744 call -= sd ind)
        label _continueLabel[135752]
        _indexOfInterest[135747]
        _iterator[135748]
      }
      label _breakLabel[135753]
    }
  }
  where {
    (135739 call isSparseDom sd)
  }
  function -=[135790](ref arg sd[135787] :
  _domain, arg d[135793] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135832] "expr temp" "temp"
      (135841 'move' _iterator[135832](135839 call _getIterator d))
      Defer
      {
        {
          (135857 call _freeIterator _iterator[135832])
        }
      }
      { scopeless type
        (135846 'move' _indexOfInterest[135831](135843 call iteratorIndex _iterator[135832]))
      }
      ForLoop[135833]
      {
        unknown ind[135850] "index var" "insert auto destroy"
        (135852 'move' ind[135850] _indexOfInterest[135831])
        (135828 call -= sd ind)
        label _continueLabel[135836]
        _indexOfInterest[135831]
        _iterator[135832]
      }
      label _breakLabel[135837]
    }
  }
  where {
    (135822 call &&(135810 call &&(135799 call isSparseDom sd)(135808 call ==(135801 call . d c"rank")(135805 call . sd c"rank")))(135820 call ==(135813 call . sd c"idxType")(135817 call . d c"idxType")))
  }
  function isCollapsedDimension[135884](arg r[135881] :
  (135880 call range unknown e[135871] unknown b[135874] unknown s[135876] unknown a[135878])) param : _unknown[51] "no doc"
  {
    (135887 return 0)
  }
  function isCollapsedDimension[135896](arg r[135894]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (135899 return 1)
  }
  function chpl__anyStridable[135908](arg ranges[135906]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[135935] 0
      unknown tmp[135936] "maybe param" "temp"
      (135948 'move' tmp[135936](135946 call chpl_compute_low_param_loop_bound 0(135916 call -(135912 call . ranges c"size") 1)))
      unknown tmp[135937] "maybe param" "temp"
      (135961 'move' tmp[135937](135959 call chpl_compute_high_param_loop_bound 0(135953 call -(135955 call . ranges c"size") 1)))
      unknown tmp[135938] "maybe param" "temp"
      (135964 'move' tmp[135938] 1)
      ParamForLoop[135966]
      { i[135935] tmp[135936] tmp[135937] tmp[135938]
        if(135930 call _cond_test(135924 call .(135923 call ranges i) c"stridable"))
        {
          (135928 return 1)
        }
      }
      label _unused_continueLabel[135940]
      label _breakLabel[135939]
    }
    (135977 return 0)
  }
  function chpl__anyRankChangeStridable[135985](arg args[135983]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[136024] 0
      unknown tmp[136025] "maybe param" "temp"
      (136037 'move' tmp[136025](136035 call chpl_compute_low_param_loop_bound 0(135993 call -(135989 call . args c"size") 1)))
      unknown tmp[136026] "maybe param" "temp"
      (136050 'move' tmp[136026](136048 call chpl_compute_high_param_loop_bound 0(136042 call -(136044 call . args c"size") 1)))
      unknown tmp[136027] "maybe param" "temp"
      (136053 'move' tmp[136027] 1)
      ParamForLoop[136055]
      { i[136024] tmp[136025] tmp[136026] tmp[136027]
        if(136019 call _cond_test(136003 call isRangeValue(136001 call args i)))
        {
          if(136014 call _cond_test(136008 call .(136007 call args i) c"stridable"))
          {
            (136012 return 1)
          }
        }
      }
      label _unused_continueLabel[136029]
      label _breakLabel[136028]
    }
    (136066 return 0)
  }
  function chpl__countRanges[136074](arg arg[136072]:_any[178](?)) param : _unknown[51]
  {
    (136083 return(136081 call _cast int[13](136079 call isRangeValue arg)))
  }
  function chpl__countRanges[136092](arg arg[136090]:_any[178](?), arg args[136095]:_any[178](?) ...) param : _unknown[51]
  {
    (136109 return(136107 call +(136101 call chpl__countRanges arg)(136106 call chpl__countRanges(136104 'expand_tuple' args))))
  }
  function _validRankChangeArgs[136118](arg args[136116]:_any[178](?), arg idxType[136120]:_any[178](?)) param : _unknown[51]
  {
    function _validRankChangeArg[136126](arg idxType[136124]:_any[178](?), arg r[136132] :
    (136131 call range ?[260])) param : _unknown[51]
    {
      (136136 return 1)
    }
    function _validRankChangeArg[136146](arg idxType[136144]:_any[178](?), arg i[136149] :
    idxType) param : _unknown[51]
    {
      (136153 return 1)
    }
    function _validRankChangeArg[136162](arg idxType[136160]:_any[178](?), arg x[136164]:_any[178](?)) param : _unknown[51]
    {
      (136167 return 0)
    }
    function allValid[136174]() param : _unknown[51]
    {
      {
        unknown dim[136205] 0
        unknown tmp[136206] "maybe param" "temp"
        (136218 'move' tmp[136206](136216 call chpl_compute_low_param_loop_bound 0(136182 call -(136178 call . args c"size") 1)))
        unknown tmp[136207] "maybe param" "temp"
        (136231 'move' tmp[136207](136229 call chpl_compute_high_param_loop_bound 0(136223 call -(136225 call . args c"size") 1)))
        unknown tmp[136208] "maybe param" "temp"
        (136234 'move' tmp[136208] 1)
        ParamForLoop[136236]
        { dim[136205] tmp[136206] tmp[136207] tmp[136208]
          {
            if(136199 call _cond_test(136194 call !(136193 call _validRankChangeArg idxType(136192 call args dim))))
            {
              (136197 return 0)
            }
          }
        }
        label _unused_continueLabel[136210]
        label _breakLabel[136209]
      }
      (136247 return 1)
    }
    function oneRange[136253]() param : _unknown[51]
    {
      {
        unknown dim[136281] 0
        unknown tmp[136282] "maybe param" "temp"
        (136294 'move' tmp[136282](136292 call chpl_compute_low_param_loop_bound 0(136261 call -(136257 call . args c"size") 1)))
        unknown tmp[136283] "maybe param" "temp"
        (136307 'move' tmp[136283](136305 call chpl_compute_high_param_loop_bound 0(136299 call -(136301 call . args c"size") 1)))
        unknown tmp[136284] "maybe param" "temp"
        (136310 'move' tmp[136284] 1)
        ParamForLoop[136312]
        { dim[136281] tmp[136282] tmp[136283] tmp[136284]
          {
            if(136275 call _cond_test(136271 call isRange(136269 call args dim)))
            {
              (136273 return 1)
            }
          }
        }
        label _unused_continueLabel[136286]
        label _breakLabel[136285]
      }
      (136323 return 0)
    }
    function oneNonRange[136329]() param : _unknown[51]
    {
      {
        unknown dim[136359] 0
        unknown tmp[136360] "maybe param" "temp"
        (136372 'move' tmp[136360](136370 call chpl_compute_low_param_loop_bound 0(136337 call -(136333 call . args c"size") 1)))
        unknown tmp[136361] "maybe param" "temp"
        (136385 'move' tmp[136361](136383 call chpl_compute_high_param_loop_bound 0(136377 call -(136379 call . args c"size") 1)))
        unknown tmp[136362] "maybe param" "temp"
        (136388 'move' tmp[136362] 1)
        ParamForLoop[136390]
        { dim[136359] tmp[136360] tmp[136361] tmp[136362]
          {
            if(136353 call _cond_test(136348 call !(136347 call isRange(136345 call args dim))))
            {
              (136351 return 1)
            }
          }
        }
        label _unused_continueLabel[136364]
        label _breakLabel[136363]
      }
      (136401 return 0)
    }
    (136418 return(136416 call &&(136411 call &&(136407 call allValid)(136410 call oneRange))(136415 call oneNonRange)))
  }
  function =[136428](ref arg a[136425] :
  _distribution, arg b[136431] :
  _distribution) : _unknown[51] "assignop" "no return value for void"
  {
    if(136588 call _cond_test(136439 call ==(136435 call . a c"_value") nil[44]))
    {
      (136453 'move' a(136452 call chpl__autoCopy(136450 call(136446 call . b c"clone"))))
    }
    {
      if(136584 call _cond_test(136469 call ==(136465 call .(136462 call .(136457 call . a c"_value") c"_doms") c"size") 0))
      {
        if(136504 call _cond_test(136481 call !=(136475 'typeof'(136472 call . a c"_value"))(136480 'typeof'(136477 call . b c"_value"))))
        {
          (136502 call compilerError "type mismatch in distribution assignment")
        }
        if(136537 call _cond_test(136518 call ==(136511 call . a c"_value")(136515 call . b c"_value")))
        {
        }
        {
          (136535 call(136527 call .(136522 call . a c"_value") c"dsiAssign")(136531 call . b c"_value"))
        }
        if(136557 call _cond_test(136548 call _isPrivatized(136544 call . a c"_instance")))
        {
          (136555 call _reprivatize(136551 call . a c"_value"))
        }
      }
      {
        (136581 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
  }
  function =[136602](ref arg a[136599] :
  _domain, arg b[136605] :
  _domain) : _unknown[51] "assignop" "no return value for void"
  {
    if(136639 call _cond_test(136616 call !=(136609 call . a c"rank")(136613 call . b c"rank")))
    {
      (136637 call compilerError "rank mismatch in domain assignment")
    }
    if(136676 call _cond_test(136653 call !=(136646 call . a c"idxType")(136650 call . b c"idxType")))
    {
      (136674 call compilerError "index type mismatch in domain assignment")
    }
    if(136731 call _cond_test(136689 call &&(136684 call isRectangularDom a)(136688 call isRectangularDom b)))
    {
      if(136726 call _cond_test(136701 call &&(136695 call !(136692 call . a c"stridable"))(136698 call . b c"stridable")))
      {
        (136724 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    (136747 call(136740 call .(136737 call . a c"_instance") c"dsiAssignDomain") b(lhsPrivate = 0))
    if(136765 call _cond_test(136755 call _isPrivatized(136751 call . a c"_instance")))
    {
      (136762 call _reprivatize(136758 call . a c"_instance"))
    }
  }
  function chpl__isLegalRectTupDomAssign[136775](arg d[136773]:_any[178](?), arg t[136777]:_any[178](?)) param : _unknown[51]
  {
    function isRangeTuple[136783](arg a[136781]:_any[178](?)) param : _unknown[51]
    {
      function peelArgs[136789](arg first[136787]:_any[178](?), arg rest[136792]:_any[178](?) ...) param : _unknown[51]
      {
        (136829 return(136826 IfExpr (136800 call >(136796 call . rest c"size") 1) then
        { scopeless
          (136811 call &&(136805 call isRange first)(136810 call peelArgs(136808 'expand_tuple' rest)))
        } else
        { scopeless
          (136824 call &&(136816 call isRange first)(136823 call isRange(136821 call rest 0)))
        } ))
      }
      function peelArgs[136839](arg first[136837]:_any[178](?)) param : _unknown[51]
      {
        (136845 return(136844 call isRange first))
      }
      (136865 return(136862 IfExpr (136854 call !(136853 call isTuple a)) then
      { scopeless
        0
      } else
      { scopeless
        (136861 call peelArgs(136859 'expand_tuple' a))
      } ))
    }
    function strideSafe[136874](arg d[136872]:_any[178](?), arg rt[136876]:_any[178](?), param arg dim[136880] :
    int[13] =
    0) param : _unknown[51]
    {
      (136950 return(136947 IfExpr (136892 call == dim(136890 call -(136886 call . d c"rank") 1)) then
      { scopeless
        (136913 call ||(136901 call .(136900 call(136895 call . d c"dim") dim) c"stridable")(136911 call !(136908 call .(136907 call rt dim) c"stridable")))
      } else
      { scopeless
        (136945 call &&(136934 call ||(136922 call .(136921 call(136916 call . d c"dim") dim) c"stridable")(136932 call !(136929 call .(136928 call rt dim) c"stridable")))(136944 call strideSafe d rt(136942 call + dim 1)))
      } ))
    }
    (136978 return(136976 call &&(136969 call &&(136958 call isRangeTuple t)(136967 call ==(136960 call . d c"rank")(136964 call . t c"size")))(136975 call strideSafe d t)))
  }
  function =[136988](ref arg a[136985] :
  _domain, arg b[136991] :
  _tuple) : _unknown[51] "assignop" "no return value for void"
  {
    if(137082 call _cond_test(136998 call chpl__isLegalRectTupDomAssign a b))
    {
      (137005 call = a(137003 call chpl__buildDomainExpr(137001 'expand_tuple' b)))
    }
    {
      (137014 call(137010 call . a c"clear"))
      {
        unknown _indexOfInterest[137039] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137040] "expr temp" "temp"
        (137049 'move' _iterator[137040](137047 call _getIterator(137059 call chpl_direct_counted_range_iter 0(137055 call . b c"size"))))
        Defer
        {
          {
            (137075 call _freeIterator _iterator[137040])
          }
        }
        { scopeless type
          (137064 'move' _indexOfInterest[137039](137061 call iteratorIndex _iterator[137040]))
        }
        ForLoop[137041]
        {
          unknown ind[137068] "index var" "insert auto destroy"
          (137070 'move' ind[137068] _indexOfInterest[137039])
          {
            (137036 call(137028 call . a c"add")(137034 call b ind))
          }
          label _continueLabel[137044]
          _indexOfInterest[137039]
          _iterator[137040]
        }
        label _breakLabel[137045]
      }
    }
  }
  function =[137095](ref arg d[137092] :
  _domain, arg r[137101] :
  (137100 call range ?[260])) : _unknown[51] "assignop" "no return value for void"
  {
    (137109 call = d(137107 call chpl__buildDomainExpr r))
  }
  function =[137121](ref arg a[137118] :
  _domain, arg b[137123]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    if(137150 call _cond_test(137128 call isRectangularDom a))
    {
      (137148 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137161 call(137157 call . a c"clear"))
    {
      unknown _indexOfInterest[137174] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137175] "expr temp" "temp"
      (137184 'move' _iterator[137175](137182 call _getIterator b))
      Defer
      {
        {
          (137200 call _freeIterator _iterator[137175])
        }
      }
      { scopeless type
        (137189 'move' _indexOfInterest[137174](137186 call iteratorIndex _iterator[137175]))
      }
      ForLoop[137176]
      {
        unknown ind[137193] "index var" "insert auto destroy"
        (137195 'move' ind[137193] _indexOfInterest[137174])
        {
          (137171 call(137166 call . a c"add") ind)
        }
        label _continueLabel[137179]
        _indexOfInterest[137174]
        _iterator[137175]
      }
      label _breakLabel[137180]
    }
  }
  function chpl__serializeAssignment[137217](arg a[137214] :
  (137211 call chpl__buildArrayRuntimeType nil[44]), arg b[137219]:_any[178](?)) param : _unknown[51]
  {
    if(137237 call _cond_test(137232 call &&(137226 call !=(137222 call . a c"rank") 1)(137231 call isRange b)))
    {
      (137235 return 1)
    }
    if(137298 call _cond_test(137293 call ||(137263 call &&(137255 call &&(137247 call !(137246 call isRectangularArr a))(137253 call !(137252 call isAssociativeArr a)))(137261 call !(137260 call isSparseArr a)))(137291 call &&(137283 call &&(137275 call &&(137268 call isArray b)(137273 call !(137272 call isRectangularArr b)))(137281 call !(137280 call isAssociativeArr b)))(137289 call !(137288 call isSparseArr b)))))
    {
      (137296 return 1)
    }
    (137304 return 0)
  }
  function chpl__compatibleForBulkTransfer[137316](arg a[137313] :
  (137310 call chpl__buildArrayRuntimeType nil[44]), arg b[137321] :
  (137318 call chpl__buildArrayRuntimeType nil[44]), param arg kind[137325] :
  _tElt) param : _unknown[51]
  {
    if(137334 call _cond_test(137329 call ! useBulkTransfer))
    {
      (137332 return 0)
    }
    if(137353 call _cond_test(137348 call !=(137341 call . a c"eltType")(137345 call . b c"eltType")))
    {
      (137351 return 0)
    }
    if(137368 call _cond_test(137363 call == kind(137360 call . _tElt c"move")))
    {
      (137366 return 1)
    }
    if(137394 call _cond_test(137389 call &&(137380 call == kind(137377 call . _tElt c"initCopy"))(137388 call isConstCopyableType(137384 call . a c"eltType"))))
    {
      (137392 return 1)
    }
    if(137411 call _cond_test(137406 call !(137405 call chpl__supportedDataTypeForBulkTransfer(137401 call . a c"eltType"))))
    {
      (137409 return 0)
    }
    (137417 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137425](arg t[137423]:_any[178](?)) param : _unknown[51]
  {
    if(137489 call _cond_test(137437 call ||(354343 'is_subtype' borrowed[211](?) t)(354344 'is_subtype' unmanaged[220](?) t)))
    {
      (137440 return 0)
    }
    {
      if(137484 call _cond_test(137451 call ||(137446 call isRecordType t)(137450 call isTupleType t)))
      {
        (137457 return(137456 call isPODType t))
      }
      {
        if(137480 call _cond_test(137463 call isUnionType t))
        {
          (137465 return 0)
        }
        {
          unknown x[137469] "unsafe" t
          (137472 'end of statement')
          (137478 return(137477 call chpl__supportedDataTypeForBulkTransfer x))
        }
      }
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137503](arg x[137500] :
  string[26]) param : _unknown[51]
  {
    (137506 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137517](arg x[137514] :
  bytes[24]) param : _unknown[51]
  {
    (137520 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137531](arg x[137528] :
  _syncvar) param : _unknown[51]
  {
    (137534 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137545](arg x[137542] :
  _singlevar) param : _unknown[51]
  {
    (137548 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137559](arg x[137556] :
  _domain) param : _unknown[51]
  {
    (137562 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137575](arg x[137572] :
  (137569 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    (137578 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137589](arg x[137586] :
  _distribution) param : _unknown[51]
  {
    (137592 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137603](arg x[137600] :
  locale[28]) param : _unknown[51]
  {
    (137606 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137617](arg x[137614] :
  chpl_anycomplex) param : _unknown[51]
  {
    (137620 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137629] :
  (137628 'to borrowed class from unknown' object)) param : _unknown[51]
  {
    (137635 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137644](arg x[137642]:_any[178](?)) param : _unknown[51]
  {
    (137647 return 1)
  }
  function checkArrayShapesUponAssignment[137660](arg a[137657] :
  (137654 call chpl__buildArrayRuntimeType nil[44]), arg b[137665] :
  (137662 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "no doc" "no return value for void"
  {
    if(137851 call _cond_test(137676 call &&(137671 call isRectangularArr a)(137675 call isRectangularArr b)))
    {
      const aDims[137690] "const"(137689 call(137685 call .(137682 call .(137679 call . a c"_value") c"dom") c"dsiDims"))
      const bDims[137705] "const"(137704 call(137700 call .(137697 call .(137694 call . b c"_value") c"dom") c"dsiDims"))
      (137708 'end of statement')
      (137722 call compilerAssert(137719 call ==(137712 call . aDims c"size")(137716 call . bDims c"size")))
      {
        unknown i[137810] 0
        unknown tmp[137811] "maybe param" "temp"
        (137823 'move' tmp[137811](137821 call chpl_compute_low_param_loop_bound 0(137730 call -(137726 call . aDims c"size") 1)))
        unknown tmp[137812] "maybe param" "temp"
        (137836 'move' tmp[137812](137834 call chpl_compute_high_param_loop_bound 0(137828 call -(137830 call . aDims c"size") 1)))
        unknown tmp[137813] "maybe param" "temp"
        (137839 'move' tmp[137813] 1)
        ParamForLoop[137841]
        { i[137810] tmp[137811] tmp[137812] tmp[137813]
          {
            if(137804 call _cond_test(137748 call !=(137738 call .(137737 call aDims i) c"size")(137745 call .(137744 call bDims i) c"size")))
            {
              (137802 call halt "assigning between arrays of different shapes in dimension " i ": "(137775 call .(137774 call aDims i) c"size") " vs. "(137799 call .(137798 call bDims i) c"size"))
            }
          }
        }
        label _unused_continueLabel[137815]
        label _breakLabel[137814]
      }
    }
    {
    }
  }
  function =[137866](ref arg a[137863] :
  (137860 call chpl__buildArrayRuntimeType nil[44]), arg b[137871] :
  (137868 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    if(137905 call _cond_test(137882 call !=(137875 call . a c"rank")(137879 call . b c"rank")))
    {
      (137903 call compilerError "rank mismatch in array assignment")
    }
    if(137920 call _cond_test(137916 call ==(137912 call . b c"_value") nil[44]))
    {
      (137918 return _void[55])
    }
    if(137938 call _cond_test(137933 call ==(137926 call . a c"_value")(137930 call . b c"_value")))
    {
      (137935 return _void[55])
    }
    if(137960 call _cond_test(137956 call &&(137947 call ==(137943 call . a c"size") 0)(137954 call ==(137950 call . b c"size") 0)))
    {
      (137958 return _void[55])
    }
    if(137972 call _cond_test boundsChecking)
    {
      (137970 call checkArrayShapesUponAssignment a b)
    }
    (137988 call chpl__uncheckedArrayTransfer a b(kind =(137984 call . _tElt c"assign")))
  }
  type _tElt[137999] def move[137993]:_tElt[137999] def initCopy[137995]:_tElt[137999] def assign[137997]:_tElt[137999]
  function needsInitWorkaround[138006](arg t[138004]:_any[178](?)) param : _unknown[51] "private"
  {
    (138027 return(138025 call ||(138018 call ||(354348 'is_subtype' _array t)(354349 'is_subtype' _domain t))(354350 'is_subtype' _distribution t)))
  }
  function initCopyAfterTransfer[138040](ref arg a[138037] :
  (138034 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    if(138108 call _cond_test(138048 call needsInitWorkaround(138044 call . a c"eltType")))
    {
      Forall {
        induction variables:
          
          unknown ai[138079] "index var" "insert auto destroy"
        iterated expressions:
          (138051 call . a c"_dom")
        shadow variables:
        other variables
          forall body
        {
          unknown aa[138058] "ref var"(138057 call a ai)
          (138061 'end of statement')
          unknown copy[138068] "no auto destroy" aa(138064 call . a c"eltType")
          (138071 'end of statement')
          (138076 '=' aa copy)
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138103] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          unknown copy[138091] "no auto destroy" aa(138087 call . a c"eltType")
          (138094 'end of statement')
          (138100 '=' aa copy)
        }
      }
    }
  }
  function fixRuntimeType[138119](arg eltType[138117]:_any[178](?), ref arg elt[138121]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138124] 0
    (138127 'end of statement')
    if(138257 call _cond_test(138139 call ||(354351 'is_subtype' _array eltType)(354352 'is_subtype' _domain eltType)))
    {
      if(138183 call _cond_test(354353 'is_subtype' _array eltType))
      {
        const lhsDomain[138150] "const" "ref var"(138149 call chpl__domainFromArrayRuntimeType eltType)
        (138153 'end of statement')
        const rhsDomain[138159] "const" "ref var"(138156 call . elt c"_dom")
        (138162 'end of statement')
        if(138179 call _cond_test(138171 call !=(138164 call . lhsDomain c"_instance")(138168 call . rhsDomain c"_instance")))
        {
          (138175 call = runtimeTypesDiffer 1)
        }
      }
      if(138230 call _cond_test(354354 'is_subtype' _domain eltType))
      {
        const lhsDist[138197] "const" "ref var"(138196 call chpl__distributionFromDomainRuntimeType eltType)
        (138200 'end of statement')
        const rhsDist[138206] "const" "ref var"(138203 call . elt c"dist")
        (138209 'end of statement')
        if(138226 call _cond_test(138218 call !=(138211 call . lhsDist c"_instance")(138215 call . rhsDist c"_instance")))
        {
          (138222 call = runtimeTypesDiffer 1)
        }
      }
      if(138253 call _cond_test runtimeTypesDiffer)
      {
        unknown copy[138237] "no auto destroy" elt eltType
        (138240 'end of statement')
        (138245 call chpl__autoDestroy elt)
        (138251 '=' elt copy)
      }
    }
  }
  function fixEltRuntimeTypesAfterTransfer[138271](ref arg a[138268] :
  (138265 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "private" "no return value for void"
  {
    if(138327 call _cond_test(138279 call needsInitWorkaround(138275 call . a c"eltType")))
    {
      Forall {
        induction variables:
          
          unknown ai[138304] "index var" "insert auto destroy"
        iterated expressions:
          (138282 call . a c"_dom")
        shadow variables:
        other variables
          forall body
        {
          unknown aa[138289] "ref var"(138288 call a ai)
          (138292 'end of statement')
          (138301 call fixRuntimeType(138296 call . a c"eltType") aa)
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138322] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          (138318 call fixRuntimeType(138313 call . a c"eltType") aa)
        }
      }
    }
  }
  function chpl__uncheckedArrayTransfer[138342](ref arg a[138339] :
  (138336 call chpl__buildArrayRuntimeType nil[44]), arg b[138347] :
  (138344 call chpl__buildArrayRuntimeType nil[44]), param arg kind[138350]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138353] 0
    (138356 'end of statement')
    if(138479 call _cond_test(138363 call !(138362 call chpl__serializeAssignment a b)))
    {
      if(138401 call _cond_test(138370 call chpl__compatibleForBulkTransfer a b kind))
      {
        (138377 call = done(138376 call chpl__bulkTransferArray a b))
      }
      {
        if(138397 call _cond_test(138386 call chpl__compatibleForWidePtrBulkTransfer a b kind))
        {
          (138393 call = done(138392 call chpl__bulkTransferPtrArray a b))
        }
      }
      if(138475 call _cond_test done)
      {
        if(138469 call _cond_test(138424 call &&(138413 call == kind(138410 call . _tElt c"initCopy"))(138422 call !(138421 call isPODType(138417 call . a c"eltType")))))
        {
          (138429 call initCopyAfterTransfer a)
        }
        {
          if(138465 call _cond_test(138457 call &&(138437 call == kind(138434 call . _tElt c"move"))(138455 call ||(354355 'is_subtype' _array(138441 call . a c"eltType"))(354356 'is_subtype' _domain(138449 call . a c"eltType")))))
          {
            (138462 call fixEltRuntimeTypesAfterTransfer a)
          }
        }
      }
    }
    if(138494 call _cond_test(138484 call ! done))
    {
      (138491 call chpl__transferArray a b kind)
    }
  }
  function chpl__compatibleForWidePtrBulkTransfer[138504](arg a[138502]:_any[178](?), arg b[138506]:_any[178](?), param arg kind[138512] =
  (138509 call . _tElt c"assign")) param : _unknown[51]
  {
    if(138521 call _cond_test(138516 call ! useBulkPtrTransfer))
    {
      (138519 return 0)
    }
    if(138552 call _cond_test(138547 call !(138545 call &&(138535 call(138531 call .(138528 call . a c"_value") c"isDefaultRectangular"))(138544 call(138540 call .(138537 call . b c"_value") c"isDefaultRectangular")))))
    {
      (138550 return 0)
    }
    if(138570 call _cond_test(138565 call !=(138558 call . a c"eltType")(138562 call . b c"eltType")))
    {
      (138568 return 0)
    }
    if(138587 call _cond_test(138582 call !(138581 call isClass(138577 call . a c"eltType"))))
    {
      (138585 return 0)
    }
    if(138602 call _cond_test(138598 call isOwnedClass(138594 call . a c"eltType")))
    {
      (138600 return 0)
    }
    if(138617 call _cond_test(138613 call isSharedClass(138609 call . a c"eltType")))
    {
      (138615 return 0)
    }
    (138623 return 1)
  }
  function chpl__bulkTransferPtrArray[138635](ref arg a[138632] :
  (138629 call chpl__buildArrayRuntimeType nil[44]), arg b[138640] :
  (138637 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline"
  {
    const aDom[138647] "const"(138644 call . a c"_dom")
    (138650 'end of statement')
    const bDom[138656] "const"(138653 call . b c"_dom")
    (138659 'end of statement')
    if(138667 call _cond_test(138662 call != aDom bDom))
    {
      (138665 return 0)
    }
    if(138708 call _cond_test(138697 'is wide pointer'(138696 call a(138692 call . aDom c"low"))))
    {
      (138705 return(138704 call chpl__bulkTransferArray a aDom b bDom))
    }
    (138713 return 0)
  }
  function chpl__bulkTransferArray[138727](ref arg a[138724] :
  (138722 call chpl__buildArrayRuntimeType unknown AD[138719]), arg b[138734] :
  (138732 call chpl__buildArrayRuntimeType unknown BD[138729])) : _unknown[51] "inline"
  {
    (138744 return(138743 call chpl__bulkTransferArray a AD b BD))
  }
  function chpl__bulkTransferArray[138757](ref arg a[138754] :
  (138751 call chpl__buildArrayRuntimeType nil[44]), arg AD[138760] :
  _domain, const  ref arg b[138766] :
  (138763 call chpl__buildArrayRuntimeType nil[44]), arg BD[138770] :
  _domain) : _unknown[51] "inline"
  {
    (138786 return(138785 call chpl__bulkTransferArray(138775 call . a c"_value") AD(138781 call . b c"_value") BD))
  }
  function chpl__bulkTransferArray[138795](arg destClass[138793]:_any[178](?), arg destDom[138798] :
  _domain, arg srcClass[138801]:_any[178](?), arg srcDom[138804] :
  _domain) : _unknown[51] "inline"
  {
    unknown success[138808] 0
    (138811 'end of statement')
    function bulkTransferDebug[138819](arg msg[138816] :
    string[26]) : _unknown[51] "inline" "no return value for void"
    {
      if(138844 call _cond_test debugBulkTransfer)
      {
        (138842 call chpl_debug_writeln "proc =(a:[],b:[]): " msg)
      }
    }
    (138871 call bulkTransferDebug "in chpl__bulkTransferArray")
    if(139135 call _cond_test(138899 call(138874 call . Reflection c"canResolveMethod") destClass "doiBulkTransferFromKnown" destDom srcClass srcDom))
    {
      (138919 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (138932 call = success(138931 call(138924 call . destClass c"doiBulkTransferFromKnown") destDom srcClass srcDom))
    }
    {
      if(139130 call _cond_test(138961 call(138936 call . Reflection c"canResolveMethod") srcClass "doiBulkTransferToKnown" srcDom destClass destDom))
      {
        (138981 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (138994 call = success(138993 call(138986 call . srcClass c"doiBulkTransferToKnown") srcDom destClass destDom))
      }
      {
        if(139125 call _cond_test(139023 call(138998 call . Reflection c"canResolveMethod") destClass "doiBulkTransferFromAny" destDom srcClass srcDom))
        {
          (139043 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (139056 call = success(139055 call(139048 call . destClass c"doiBulkTransferFromAny") destDom srcClass srcDom))
        }
        {
          if(139121 call _cond_test(139085 call(139060 call . Reflection c"canResolveMethod") srcClass "doiBulkTransferToAny" srcDom destClass destDom))
          {
            (139105 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (139118 call = success(139117 call(139110 call . srcClass c"doiBulkTransferToAny") srcDom destClass destDom))
          }
        }
      }
    }
    if(139183 call _cond_test success)
    {
      (139160 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139181 call bulkTransferDebug "bulk transfer did not happen")
    }
    (139190 return success)
  }
  function chpl__transferArray[139202](ref arg a[139199] :
  (139196 call chpl__buildArrayRuntimeType nil[44]), const  ref arg b[139204]:_any[178](?), param arg kind[139210] =
  (139207 call . _tElt c"assign")) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    if(140133 call _cond_test(139241 call ||(139225 call ==(139220 call . a c"eltType")(139224 'typeof' b))(139239 call &&(139233 call _isPrimitiveType(139229 call . a c"eltType"))(139238 call _isPrimitiveType(139236 'typeof' b)))))
    {
      if(139373 call _cond_test(139257 call ||(139248 call == kind(139245 call . _tElt c"move"))(139255 call == kind(139252 call . _tElt c"initCopy"))))
      {
        if(139337 call _cond_test(139265 call needsInitWorkaround(139261 call . a c"eltType")))
        {
          Forall {
            induction variables:
              
              unknown ai[139302] "index var" "insert auto destroy"
            iterated expressions:
              (139268 call . a c"_dom")
            shadow variables:
              b[139272] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown aa[139281] "ref var"(139280 call a ai)
              (139284 'end of statement')
              unknown copy[139291] "no auto destroy" b(139287 call . a c"eltType")
              (139294 'end of statement')
              (139299 '=' aa copy)
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139332] "index var" "insert auto destroy"
            iterated expressions:
              a
            shadow variables:
              b[139310] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown copy[139320] "no auto destroy" b(139316 call . a c"eltType")
              (139323 'end of statement')
              (139329 '=' aa copy)
            }
          }
        }
      }
      {
        if(139369 call _cond_test(139347 call == kind(139344 call . _tElt c"assign")))
        {
          Forall {
            induction variables:
              
              unknown aa[139364] "index var" "insert auto destroy"
            iterated expressions:
              a
            shadow variables:
              b[139352] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139359 call = aa b)
            }
          }
        }
      }
    }
    {
      if(140129 call _cond_test(139383 call chpl__serializeAssignment a b))
      {
        if(139870 call _cond_test(139389 call == kind(139386 call . _tElt c"move")))
        {
          if(139591 call _cond_test(139397 call needsInitWorkaround(139393 call . a c"eltType")))
          {
            {
              unknown _indexOfInterest[139453] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139454] "expr temp" "temp"
              (139472 'move' _iterator[139454](139409 call _build_tuple(139466 call _getIterator(139463 call . a c"_dom"))(139470 call _getIterator b)))
              Defer
              {
                {
                  (139502 call _freeIterator _iterator[139454])
                }
              }
              { scopeless type
                (139477 'move' _indexOfInterest[139453](139474 call iteratorIndex _iterator[139454]))
              }
              ForLoop[139455]
              {
                (139482 call _check_tuple_var_decl _indexOfInterest[139453] 2)
                unknown ai[139488] "index var" "insert auto destroy"
                (139490 'move' ai[139488](139486 call _indexOfInterest[139453] 0))
                unknown bb[139495] "index var" "insert auto destroy"
                (139497 'move' bb[139495](139493 call _indexOfInterest[139453] 1))
                {
                  unknown aa[139414] "ref var"(139413 call a ai)
                  (139417 'end of statement')
                  (139442 '=' aa(139441 'steal' bb))
                  (139451 call fixRuntimeType(139446 call . a c"eltType") aa)
                }
                label _continueLabel[139458]
                _indexOfInterest[139453]
                _iterator[139454]
              }
              label _breakLabel[139459]
            }
          }
          {
            {
              unknown _indexOfInterest[139538] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139539] "expr temp" "temp"
              (139553 'move' _iterator[139539](139518 call _build_tuple(139548 call _getIterator a)(139551 call _getIterator b)))
              Defer
              {
                {
                  (139583 call _freeIterator _iterator[139539])
                }
              }
              { scopeless type
                (139558 'move' _indexOfInterest[139538](139555 call iteratorIndex _iterator[139539]))
              }
              ForLoop[139540]
              {
                (139563 call _check_tuple_var_decl _indexOfInterest[139538] 2)
                unknown aa[139569] "index var" "insert auto destroy"
                (139571 'move' aa[139569](139567 call _indexOfInterest[139538] 0))
                unknown bb[139576] "index var" "insert auto destroy"
                (139578 'move' bb[139576](139574 call _indexOfInterest[139538] 1))
                {
                  (139526 '=' aa(139525 'steal' bb))
                  (139536 call fixRuntimeType(139531 call . a c"eltType") aa)
                }
                label _continueLabel[139543]
                _indexOfInterest[139538]
                _iterator[139539]
              }
              label _breakLabel[139544]
            }
          }
        }
        {
          if(139865 call _cond_test(139601 call == kind(139598 call . _tElt c"initCopy")))
          {
            if(139781 call _cond_test(139609 call needsInitWorkaround(139605 call . a c"eltType")))
            {
              {
                unknown _indexOfInterest[139646] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139647] "expr temp" "temp"
                (139665 'move' _iterator[139647](139621 call _build_tuple(139659 call _getIterator(139656 call . a c"_dom"))(139663 call _getIterator b)))
                Defer
                {
                  {
                    (139695 call _freeIterator _iterator[139647])
                  }
                }
                { scopeless type
                  (139670 'move' _indexOfInterest[139646](139667 call iteratorIndex _iterator[139647]))
                }
                ForLoop[139648]
                {
                  (139675 call _check_tuple_var_decl _indexOfInterest[139646] 2)
                  unknown ai[139681] "index var" "insert auto destroy"
                  (139683 'move' ai[139681](139679 call _indexOfInterest[139646] 0))
                  unknown bb[139688] "index var" "insert auto destroy"
                  (139690 'move' bb[139688](139686 call _indexOfInterest[139646] 1))
                  {
                    unknown aa[139626] "ref var"(139625 call a ai)
                    (139629 'end of statement')
                    unknown copy[139636] "no auto destroy" b(139632 call . a c"eltType")
                    (139639 'end of statement')
                    (139644 '=' aa copy)
                  }
                  label _continueLabel[139651]
                  _indexOfInterest[139646]
                  _iterator[139647]
                }
                label _breakLabel[139652]
              }
            }
            {
              {
                unknown _indexOfInterest[139728] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139729] "expr temp" "temp"
                (139743 'move' _iterator[139729](139711 call _build_tuple(139738 call _getIterator a)(139741 call _getIterator b)))
                Defer
                {
                  {
                    (139773 call _freeIterator _iterator[139729])
                  }
                }
                { scopeless type
                  (139748 'move' _indexOfInterest[139728](139745 call iteratorIndex _iterator[139729]))
                }
                ForLoop[139730]
                {
                  (139753 call _check_tuple_var_decl _indexOfInterest[139728] 2)
                  unknown aa[139759] "index var" "insert auto destroy"
                  (139761 'move' aa[139759](139757 call _indexOfInterest[139728] 0))
                  unknown bb[139766] "index var" "insert auto destroy"
                  (139768 'move' bb[139766](139764 call _indexOfInterest[139728] 1))
                  {
                    unknown copy[139717] "no auto destroy" b(139713 call . a c"eltType")
                    (139720 'end of statement')
                    (139726 '=' aa copy)
                  }
                  label _continueLabel[139733]
                  _indexOfInterest[139728]
                  _iterator[139729]
                }
                label _breakLabel[139734]
              }
            }
          }
          {
            if(139861 call _cond_test(139791 call == kind(139788 call . _tElt c"assign")))
            {
              {
                unknown _indexOfInterest[139808] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139809] "expr temp" "temp"
                (139823 'move' _iterator[139809](139801 call _build_tuple(139818 call _getIterator a)(139821 call _getIterator b)))
                Defer
                {
                  {
                    (139853 call _freeIterator _iterator[139809])
                  }
                }
                { scopeless type
                  (139828 'move' _indexOfInterest[139808](139825 call iteratorIndex _iterator[139809]))
                }
                ForLoop[139810]
                {
                  (139833 call _check_tuple_var_decl _indexOfInterest[139808] 2)
                  unknown aa[139839] "index var" "insert auto destroy"
                  (139841 'move' aa[139839](139837 call _indexOfInterest[139808] 0))
                  unknown bb[139846] "index var" "insert auto destroy"
                  (139848 'move' bb[139846](139844 call _indexOfInterest[139808] 1))
                  {
                    (139804 call = aa bb)
                  }
                  label _continueLabel[139813]
                  _indexOfInterest[139808]
                  _iterator[139809]
                }
                label _breakLabel[139814]
              }
            }
          }
        }
      }
      {
        if(140123 call _cond_test(139881 call == kind(139878 call . _tElt c"move")))
        {
          if(139977 call _cond_test(139889 call needsInitWorkaround(139885 call . a c"eltType")))
          {
            Forall {
              induction variables:
                
                unknown ai[139932] "index var" "insert auto destroy"
                
                unknown bb[139934] "index var" "insert auto destroy"
              iterated expressions:
                (139897 call . a c"_dom")
                b
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown aa[139907] "ref var"(139906 call a ai)
                  (139910 'end of statement')
                  (139919 '=' aa(139918 'steal' bb))
                  (139928 call fixRuntimeType(139923 call . a c"eltType") aa)
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139970] "index var" "insert auto destroy"
                
                unknown bb[139972] "index var" "insert auto destroy"
              iterated expressions:
                a
                b
              shadow variables:
              other variables
                forall body
              {
                {
                  (139956 '=' aa(139955 'steal' bb))
                  (139966 call fixRuntimeType(139961 call . a c"eltType") aa)
                }
              }
            }
          }
        }
        {
          if(140118 call _cond_test(139987 call == kind(139984 call . _tElt c"initCopy")))
          {
            if(140077 call _cond_test(139995 call needsInitWorkaround(139991 call . a c"eltType")))
            {
              Forall {
                induction variables:
                  
                  unknown ai[140035] "index var" "insert auto destroy"
                  
                  unknown bb[140037] "index var" "insert auto destroy"
                iterated expressions:
                  (140003 call . a c"_dom")
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[140013] "ref var"(140012 call a ai)
                    (140016 'end of statement')
                    unknown copy[140023] "no auto destroy" bb(140019 call . a c"eltType")
                    (140026 'end of statement')
                    (140031 '=' aa copy)
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140070] "index var" "insert auto destroy"
                  
                  unknown bb[140072] "index var" "insert auto destroy"
                iterated expressions:
                  a
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown copy[140057] "no auto destroy" bb(140053 call . a c"eltType")
                    (140060 'end of statement')
                    (140066 '=' aa copy)
                  }
                }
              }
            }
          }
          {
            if(140114 call _cond_test(140087 call == kind(140084 call . _tElt c"assign")))
            {
              Forall {
                induction variables:
                  
                  unknown aa[140107] "index var" "insert auto destroy"
                  
                  unknown bb[140109] "index var" "insert auto destroy"
                iterated expressions:
                  a
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140101 call = aa bb)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {
    (139217 call <=(139214 'lifetime_of' a)(139216 'lifetime_of' b))
  }
  function chpl__transferArray[140150](ref arg a[140147] :
  (140144 call chpl__buildArrayRuntimeType nil[44]), param arg b[140152]:_any[178](?), param arg kind[140158] =
  (140155 call . _tElt c"assign")) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140169] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140165 call = aa b)
      }
    }
  }
  function =[140184](ref arg a[140181] :
  (140178 call chpl__buildArrayRuntimeType nil[44]), arg b[140187] :
  _domain) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    if(140205 call _cond_test(140198 call !=(140191 call . a c"rank")(140195 call . b c"rank")))
    {
      (140203 call compilerError "rank mismatch in array assignment")
    }
    if(140242 call _cond_test(140219 call &&(140214 call isAssociativeDom b)(140218 call isRectangularArr a)))
    {
      (140240 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140251 call chpl__transferArray a b)
  }
  function =[140263](arg a[140260] :
  (140257 call chpl__buildArrayRuntimeType nil[44]), arg b[140269] :
  (140268 call range ?[260])) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    if(140306 call _cond_test(140277 call ==(140273 call . a c"rank") 1))
    {
      (140283 call chpl__transferArray a b)
    }
    {
      (140304 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
  }
  function =[140323](ref arg a[140320] :
  (140317 call chpl__buildArrayRuntimeType nil[44]), arg b[140325]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140331 call chpl__transferArray a b)
  }
  function helpInitArrFromTuple[140340](ref arg j[140338]:_any[178](?), param arg rank[140343] :
  int[13], ref arg a[140349] :
  (140346 call chpl__buildArrayRuntimeType nil[44]), arg b[140353] :
  _tuple, param arg kind[140357] :
  _tElt) : _unknown[51] "private" "no return value for void"
  {
    unknown idxType[140386] "type variable"(140370 call .(140367 call . a c"_dom") c"idxType")
    unknown strType[140383] "type variable"(140382 call chpl__signedType(140378 call .(140375 call . a c"_dom") c"intIdxType"))
    const stride[140409] "const"(140406 call .(140405 call(140394 call .(140391 call . a c"_dom") c"dim")(140402 call -(140398 call . a c"rank") rank)) c"stride")
    const start[140431] "const"(140428 call .(140427 call(140416 call .(140413 call . a c"_dom") c"dim")(140424 call -(140420 call . a c"rank") rank)) c"firstAsInt")
    (140434 'end of statement')
    if(140729 call _cond_test(140437 call == rank 1))
    {
      {
        unknown i[140594] 0
        unknown tmp[140595] "maybe param" "temp"
        (140607 'move' tmp[140595](140605 call chpl_compute_low_param_loop_bound 0(140445 call -(140441 call . b c"size") 1)))
        unknown tmp[140596] "maybe param" "temp"
        (140620 'move' tmp[140596](140618 call chpl_compute_high_param_loop_bound 0(140612 call -(140614 call . b c"size") 1)))
        unknown tmp[140597] "maybe param" "temp"
        (140623 'move' tmp[140597] 1)
        ParamForLoop[140625]
        { i[140594] tmp[140595] tmp[140596] tmp[140597]
          {
            (140473 call =(140458 call j(140455 call -(140451 call . a c"rank") rank))(140472 call chpl__intToIdx idxType(140470 call +(140464 call _cast strType start)(140468 call * i stride))))
            unknown dst[140481] "ref var"(140480 call a j)
            (140484 'end of statement')
            const src[140489] "const" "ref var"(140488 call b i)
            (140492 'end of statement')
            if(140589 call _cond_test(140498 call == kind(140495 call . _tElt c"move")))
            {
              if(140539 call _cond_test(140503 call isArray dst))
              {
                unknown newArr[140512] "no auto destroy" "no copy"(140511 call chpl__coerceMove(140506 call . a c"eltType") src)
                (140515 'end of statement')
                (140521 '=' dst newArr)
              }
              {
                (140527 '=' dst src)
                (140537 call fixRuntimeType(140532 call . a c"eltType") dst)
              }
            }
            {
              if(140584 call _cond_test(140549 call == kind(140546 call . _tElt c"initCopy")))
              {
                unknown copy[140556] "no auto destroy" src(140552 call . a c"eltType")
                (140559 'end of statement')
                (140565 '=' dst copy)
              }
              {
                if(140580 call _cond_test(140572 call == kind(140569 call . _tElt c"assign")))
                {
                  (140576 call = dst src)
                }
              }
            }
          }
        }
        label _unused_continueLabel[140599]
        label _breakLabel[140598]
      }
    }
    {
      {
        unknown i[140688] 0
        unknown tmp[140689] "maybe param" "temp"
        (140701 'move' tmp[140689](140699 call chpl_compute_low_param_loop_bound 0(140641 call -(140637 call . b c"size") 1)))
        unknown tmp[140690] "maybe param" "temp"
        (140714 'move' tmp[140690](140712 call chpl_compute_high_param_loop_bound 0(140706 call -(140708 call . b c"size") 1)))
        unknown tmp[140691] "maybe param" "temp"
        (140717 'move' tmp[140691] 1)
        ParamForLoop[140719]
        { i[140688] tmp[140689] tmp[140690] tmp[140691]
          {
            (140669 call =(140654 call j(140651 call -(140647 call . a c"rank") rank))(140668 call chpl__intToIdx idxType(140666 call +(140660 call _cast strType start)(140664 call * i stride))))
            (140686 call helpInitArrFromTuple j(140678 call - rank 1) a(140684 call b i) kind)
          }
        }
        label _unused_continueLabel[140693]
        label _breakLabel[140692]
      }
    }
  }
  {
    (140364 call <(140361 'lifetime_of' a)(140363 'lifetime_of' b))
  }
  function initArrFromTuple[140744](ref arg a[140741] :
  (140738 call chpl__buildArrayRuntimeType nil[44]), arg b[140747] :
  _tuple, param arg kind[140751] :
  _tElt) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140767](140765 call *(140755 call . a c"rank")(140762 call .(140759 call . a c"_dom") c"idxType"))
    (140770 'end of statement')
    (140782 call helpInitArrFromTuple j(140776 call . a c"rank") a b kind)
  }
  function =[140794](ref arg a[140791] :
  (140788 call chpl__buildArrayRuntimeType nil[44]), arg b[140797] :
  _tuple) : _unknown[51] "assignop" "no return value for void"
  {
    (140812 call initArrFromTuple a b(140809 call . _tElt c"assign"))
  }
  where {
    (140803 call isRectangularArr a)
  }
  function _desync[140824](arg t[140821] :
  _syncvar) type : _unknown[51]
  {
    unknown x[140827] t
    (140830 'end of statement')
    (140836 return(140833 call . x c"valType"))
  }
  function _desync[140846](arg t[140843] :
  _singlevar) type : _unknown[51]
  {
    unknown x[140849] t
    (140852 'end of statement')
    (140858 return(140855 call . x c"valType"))
  }
  function _desync[140866](arg t[140864]:_any[178](?)) type : _unknown[51]
  {
    (140869 return t)
  }
  function desyncEltType[140880](arg t[140877] :
  _array) type : _unknown[51] "private"
  {
    unknown eltType[140886] "type variable"(140885 call chpl__eltTypeFromArrayRuntimeType t)
    (140894 return(140893 call _desync eltType))
  }
  function =[140906](ref arg a[140903] :
  (140900 call chpl__buildArrayRuntimeType nil[44]), arg b[140915] :
  (140914 call _desync(140910 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140926] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140922 call = e b)
      }
    }
  }
  function +=[140941](arg a[140938] :
  (140935 call chpl__buildArrayRuntimeType nil[44]), arg b[140950] :
  (140949 call _desync(140945 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140961] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140957 call += e b)
      }
    }
  }
  function -=[140976](arg a[140973] :
  (140970 call chpl__buildArrayRuntimeType nil[44]), arg b[140985] :
  (140984 call _desync(140980 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140996] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140992 call -= e b)
      }
    }
  }
  function *=[141011](arg a[141008] :
  (141005 call chpl__buildArrayRuntimeType nil[44]), arg b[141020] :
  (141019 call _desync(141015 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141031] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141027 call *= e b)
      }
    }
  }
  function /=[141046](arg a[141043] :
  (141040 call chpl__buildArrayRuntimeType nil[44]), arg b[141055] :
  (141054 call _desync(141050 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141066] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141062 call /= e b)
      }
    }
  }
  function %=[141081](arg a[141078] :
  (141075 call chpl__buildArrayRuntimeType nil[44]), arg b[141090] :
  (141089 call _desync(141085 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141101] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141097 call %= e b)
      }
    }
  }
  function **=[141116](arg a[141113] :
  (141110 call chpl__buildArrayRuntimeType nil[44]), arg b[141125] :
  (141124 call _desync(141120 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141136] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141132 call **= e b)
      }
    }
  }
  function &=[141151](arg a[141148] :
  (141145 call chpl__buildArrayRuntimeType nil[44]), arg b[141160] :
  (141159 call _desync(141155 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141171] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141167 call &= e b)
      }
    }
  }
  function |=[141186](arg a[141183] :
  (141180 call chpl__buildArrayRuntimeType nil[44]), arg b[141195] :
  (141194 call _desync(141190 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141206] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141202 call |= e b)
      }
    }
  }
  function ^=[141221](arg a[141218] :
  (141215 call chpl__buildArrayRuntimeType nil[44]), arg b[141230] :
  (141229 call _desync(141225 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141241] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141237 call ^= e b)
      }
    }
  }
  function >>=[141256](arg a[141253] :
  (141250 call chpl__buildArrayRuntimeType nil[44]), arg b[141265] :
  (141264 call _desync(141260 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141276] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141272 call >>= e b)
      }
    }
  }
  function <<=[141291](arg a[141288] :
  (141285 call chpl__buildArrayRuntimeType nil[44]), arg b[141300] :
  (141299 call _desync(141295 call . a c"eltType"))) : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141311] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141307 call <<= e b)
      }
    }
  }
  function chpl_by[141324](arg a[141321] :
  _domain, arg b[141326]:_any[178](?)) : _unknown[51]
  {
    unknown r[141349](141347 call *(141329 call . a c"rank")(141346 call range(141337 call .(141334 call . a c"_value") c"idxType")(141342 call . BoundedRangeType c"bounded") 1))
    (141352 'end of statement')
    unknown t[141364](141363 call _makeIndexTuple(141356 call . a c"rank") b(expand = 1))
    (141367 'end of statement')
    {
      unknown i[141398] 0
      unknown tmp[141399] "maybe param" "temp"
      (141411 'move' tmp[141399](141409 call chpl_compute_low_param_loop_bound 0(141374 call -(141370 call . a c"rank") 1)))
      unknown tmp[141400] "maybe param" "temp"
      (141424 'move' tmp[141400](141422 call chpl_compute_high_param_loop_bound 0(141416 call -(141418 call . a c"rank") 1)))
      unknown tmp[141401] "maybe param" "temp"
      (141427 'move' tmp[141401] 1)
      ParamForLoop[141429]
      { i[141398] tmp[141399] tmp[141400] tmp[141401]
        (141395 call =(141381 call r i)(141393 call chpl_by(141388 call(141383 call . a c"dim") i)(141392 call t i)))
      }
      label _unused_continueLabel[141403]
      label _breakLabel[141402]
    }
    (141459 return(141438 'new'(141458 call _domain(141441 call . a c"dist")(141446 call . a c"rank")(141453 call .(141450 call . a c"_value") c"idxType") 1 r)))
  }
  function chpl_align[141469](arg a[141466] :
  _domain, arg b[141471]:_any[178](?)) : _unknown[51]
  {
    unknown r[141497](141495 call *(141474 call . a c"rank")(141494 call range(141482 call .(141479 call . a c"_value") c"idxType")(141487 call . BoundedRangeType c"bounded")(141491 call . a c"stridable")))
    (141500 'end of statement')
    unknown t[141512](141511 call _makeIndexTuple(141504 call . a c"rank") b(expand = 1))
    (141515 'end of statement')
    {
      unknown i[141546] 0
      unknown tmp[141547] "maybe param" "temp"
      (141559 'move' tmp[141547](141557 call chpl_compute_low_param_loop_bound 0(141522 call -(141518 call . a c"rank") 1)))
      unknown tmp[141548] "maybe param" "temp"
      (141572 'move' tmp[141548](141570 call chpl_compute_high_param_loop_bound 0(141564 call -(141566 call . a c"rank") 1)))
      unknown tmp[141549] "maybe param" "temp"
      (141575 'move' tmp[141549] 1)
      ParamForLoop[141577]
      { i[141546] tmp[141547] tmp[141548] tmp[141549]
        (141543 call =(141529 call r i)(141541 call chpl_align(141536 call(141531 call . a c"dim") i)(141540 call t i)))
      }
      label _unused_continueLabel[141551]
      label _breakLabel[141550]
    }
    (141610 return(141586 'new'(141609 call _domain(141589 call . a c"dist")(141594 call . a c"rank")(141601 call .(141598 call . a c"_value") c"idxType")(141605 call . a c"stridable") r)))
  }
  function <=>[141624](arg x[141621] :
  (141619 call chpl__buildArrayRuntimeType unknown xD[141616]), arg y[141631] :
  (141629 call chpl__buildArrayRuntimeType unknown yD[141626])) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141636] 0 bool[10]
    (141639 'end of statement')
    if(141726 call _cond_test(141695 call &&(141662 call &&(141651 call ==(141645 'typeof'(141642 call . x c"_value"))(141650 'typeof'(141647 call . y c"_value")))(141660 call !(141659 call chpl__isArrayView(141655 call . x c"_value"))))(141694 call(141665 call . Reflection c"canResolveMethod")(141669 call . x c"_value") "doiSwap"(141691 call . y c"_value"))))
    {
      if(141721 call _cond_test(141699 call == xD yD))
      {
        (141713 call(141705 call .(141702 call . x c"_value") c"doiSwap")(141709 call . y c"_value"))
        (141718 call = hasSwapped 1)
      }
    }
    if(141755 call _cond_test(141731 call ! hasSwapped))
    {
      Forall {
        induction variables:
          
          unknown a[141748] "index var" "insert auto destroy"
          
          unknown b[141750] "index var" "insert auto destroy"
        iterated expressions:
          x
          y
        shadow variables:
        other variables
          forall body
        {
          (141744 call <=> a b)
        }
      }
    }
  }
  function reshape[141769](arg A[141766] :
  (141763 call chpl__buildArrayRuntimeType nil[44]), arg D[141772] :
  _domain) : _unknown[51]
  {
    if(141807 call _cond_test(141779 call !(141778 call isRectangularDom D)))
    {
      (141805 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(141803 call _cast string[26](141801 'typeof' D)))
    }
    if(141886 call _cond_test(141821 call !=(141814 call . A c"size")(141818 call . D c"size")))
    {
      (141884 call halt "reshape(A,D) is invoked when A has "(141843 call . A c"size") " elements, but D has "(141864 call . D c"size") " indices")
    }
    unknown B[141918](141912 for (141904 call _build_tuple i a)  in  zip(141909 call _build_tuple D A) do
    {
      a
    } )(141899 call chpl__buildArrayRuntimeType(141897 call chpl__ensureDomainExpr D)(141894 call . A c"eltType"))
    (141921 'end of statement')
    (141923 return B)
  }
  function reshape[141933](arg A[141930] :
  _iteratorRecord, arg D[141936] :
  _domain) : _unknown[51] "no doc"
  {
    if(141955 call _cond_test(141943 call !(141942 call isRectangularDom D)))
    {
      (141953 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(141951 call _cast string[26](141949 'typeof' D)))
    }
    unknown B[141978](141972 for (141964 call _build_tuple i a)  in  zip(141969 call _build_tuple D A) do
    {
      a
    } )
    (141981 'end of statement')
    (141983 return B)
  }
  function linearize[141991](arg Xs[141989]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[141998] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141999] "expr temp" "temp"
      (142008 'move' _iterator[141999](142006 call _getIterator Xs))
      Defer
      {
        {
          (142024 call _freeIterator _iterator[141999])
        }
      }
      { scopeless type
        (142013 'move' _indexOfInterest[141998](142010 call iteratorIndex _iterator[141999]))
      }
      ForLoop[142000]
      {
        unknown x[142017] "index var" "insert auto destroy"
        (142019 'move' x[142017] _indexOfInterest[141998])
        (141996 yield x)
        label _continueLabel[142003]
        _indexOfInterest[141998]
        _iterator[141999]
      }
      label _breakLabel[142004]
    }
  }
  function chpl__unalias[142040](arg x[142037] :
  _domain) : _unknown[51] "inline" "unalias fn"
  {
    if(142062 call _cond_test(142055 call !=(142049 call _to_unmanaged(142047 'typeof'(142044 call . x c"_instance")))(142054 'typeof'(142051 call . x c"_instance"))))
    {
      (142060 call compilerError "Domain on borrow created")
    }
    if(142090 call _cond_test(142069 call . x c"_unowned"))
    {
      unknown ret[142073] "no auto destroy" x
      (142076 'end of statement')
      (142079 return ret)
    }
    {
      unknown ret[142082] "no copy" x
      (142085 'end of statement')
      (142088 return ret)
    }
  }
  function chpl__initCopy[142104](const  ref arg rhs[142101] :
  (142098 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "init copy fn"
  {
    unknown lhs[142112] "no copy"(142111 call chpl__coerceCopy(142108 'typeof' rhs) rhs)
    (142115 'end of statement')
    (142118 return lhs)
  }
  function chpl__autoCopy[142130](arg x[142127] :
  (142124 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "auto copy fn"
  {
    unknown b[142136] "no copy"(142135 call chpl__initCopy x)
    (142139 'end of statement')
    (142142 return b)
  }
  function chpl__coerceCopy[142152](arg dstType[142149] :
  _domain, arg rhs[142155] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown rhsIsLayout[142172] "param"(142171 call(142167 call .(142162 call .(142159 call . rhs c"dist") c"_value") c"dsiIsLayout"))
    (142175 'end of statement')
    unknown lhs[142178] dstType
    (142181 'end of statement')
    lhs
    (142186 call = lhs rhs)
    if(142229 call _cond_test(142204 call &&(142200 call(142196 call .(142193 call .(142190 call . lhs c"dist") c"_value") c"dsiIsLayout"))(142202 call ! rhsIsLayout)))
    {
      (142227 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (142235 return lhs)
  }
  function chpl__coerceMove[142245](arg dstType[142242] :
  _domain, in arg rhs[142248] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown rhsIsLayout[142263] "param"(142262 call(142258 call .(142255 call .(142252 call . rhs c"dist") c"_value") c"dsiIsLayout"))
    (142266 'end of statement')
    unknown lhs[142269] dstType
    (142272 'end of statement')
    lhs
    (142277 call = lhs rhs)
    if(142302 call _cond_test(142295 call &&(142291 call(142287 call .(142284 call .(142281 call . lhs c"dist") c"_value") c"dsiIsLayout"))(142293 call ! rhsIsLayout)))
    {
      (142300 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (142308 return lhs)
  }
  function chpl__coerceCopy[142318](arg dstType[142315] :
  _domain, arg rhs[142321] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142325] dstType
    (142328 'end of statement')
    lhs
    if(142353 call _cond_test(142336 call chpl__isLegalRectTupDomAssign lhs rhs))
    {
      (142343 call = lhs(142341 call chpl__buildDomainExpr(142339 'expand_tuple' rhs)))
    }
    {
      (142349 call = lhs rhs)
    }
    (142358 return lhs)
  }
  function chpl__coerceMove[142368](arg dstType[142365] :
  _domain, in arg rhs[142371] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142375] dstType
    (142378 'end of statement')
    lhs
    if(142403 call _cond_test(142386 call chpl__isLegalRectTupDomAssign lhs rhs))
    {
      (142393 call = lhs(142391 call chpl__buildDomainExpr(142389 'expand_tuple' rhs)))
    }
    {
      (142399 call = lhs rhs)
    }
    (142408 return lhs)
  }
  function chpl__coerceCopy[142418](arg dstType[142415] :
  _domain, arg rhs[142424] :
  (142423 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142428] dstType
    (142431 'end of statement')
    lhs
    (142440 call = lhs(142438 call chpl__buildDomainExpr rhs))
    (142444 return lhs)
  }
  function chpl__coerceMove[142454](arg dstType[142451] :
  _domain, in arg rhs[142460] :
  (142459 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142464] dstType
    (142467 'end of statement')
    lhs
    (142476 call = lhs(142474 call chpl__buildDomainExpr rhs))
    (142480 return lhs)
  }
  function chpl__coerceCopy[142490](arg dstType[142487] :
  _domain, arg rhs[142493] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142497] dstType
    (142500 'end of statement')
    if(142511 call _cond_test(142505 call isRectangularDom lhs))
    {
      (142509 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142521 call(142517 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142535] "expr temp" "temp"
      (142544 'move' _iterator[142535](142542 call _getIterator rhs))
      Defer
      {
        {
          (142560 call _freeIterator _iterator[142535])
        }
      }
      { scopeless type
        (142549 'move' _indexOfInterest[142534](142546 call iteratorIndex _iterator[142535]))
      }
      ForLoop[142536]
      {
        unknown ind[142553] "index var" "insert auto destroy"
        (142555 'move' ind[142553] _indexOfInterest[142534])
        {
          (142531 call(142526 call . lhs c"add") ind)
        }
        label _continueLabel[142539]
        _indexOfInterest[142534]
        _iterator[142535]
      }
      label _breakLabel[142540]
    }
    (142568 return lhs)
  }
  function chpl__coerceMove[142578](arg dstType[142575] :
  _domain, arg rhs[142581] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142585] dstType
    (142588 'end of statement')
    if(142599 call _cond_test(142593 call isRectangularDom lhs))
    {
      (142597 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142609 call(142605 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142622] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142623] "expr temp" "temp"
      (142632 'move' _iterator[142623](142630 call _getIterator rhs))
      Defer
      {
        {
          (142648 call _freeIterator _iterator[142623])
        }
      }
      { scopeless type
        (142637 'move' _indexOfInterest[142622](142634 call iteratorIndex _iterator[142623]))
      }
      ForLoop[142624]
      {
        unknown ind[142641] "index var" "insert auto destroy"
        (142643 'move' ind[142641] _indexOfInterest[142622])
        {
          (142619 call(142614 call . lhs c"add") ind)
        }
        label _continueLabel[142627]
        _indexOfInterest[142622]
        _iterator[142623]
      }
      label _breakLabel[142628]
    }
    (142656 return lhs)
  }
  function chpl__coerceCopy[142666](arg dstType[142663] :
  _domain, arg rhs[142668]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142671] dstType
    (142674 'end of statement')
    if(142685 call _cond_test(142679 call isRectangularDom lhs))
    {
      (142683 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142695 call(142691 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142708] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142709] "expr temp" "temp"
      (142718 'move' _iterator[142709](142716 call _getIterator rhs))
      Defer
      {
        {
          (142734 call _freeIterator _iterator[142709])
        }
      }
      { scopeless type
        (142723 'move' _indexOfInterest[142708](142720 call iteratorIndex _iterator[142709]))
      }
      ForLoop[142710]
      {
        unknown ind[142727] "index var" "insert auto destroy"
        (142729 'move' ind[142727] _indexOfInterest[142708])
        {
          (142705 call(142700 call . lhs c"add") ind)
        }
        label _continueLabel[142713]
        _indexOfInterest[142708]
        _iterator[142709]
      }
      label _breakLabel[142714]
    }
    (142742 return lhs)
  }
  function chpl__coerceMove[142752](arg dstType[142749] :
  _domain, in arg rhs[142754]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown lhs[142757] dstType
    (142760 'end of statement')
    if(142771 call _cond_test(142765 call isRectangularDom lhs))
    {
      (142769 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142781 call(142777 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142794] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142795] "expr temp" "temp"
      (142804 'move' _iterator[142795](142802 call _getIterator rhs))
      Defer
      {
        {
          (142820 call _freeIterator _iterator[142795])
        }
      }
      { scopeless type
        (142809 'move' _indexOfInterest[142794](142806 call iteratorIndex _iterator[142795]))
      }
      ForLoop[142796]
      {
        unknown ind[142813] "index var" "insert auto destroy"
        (142815 'move' ind[142813] _indexOfInterest[142794])
        {
          (142791 call(142786 call . lhs c"add") ind)
        }
        label _continueLabel[142799]
        _indexOfInterest[142794]
        _iterator[142795]
      }
      label _breakLabel[142800]
    }
    (142828 return lhs)
  }
  function chpl__coerceCopy[142838](arg dstType[142835] :
  _array, arg rhs[142841] :
  _array) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[142848] "type variable"(142847 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[142856] "const" "ref var"(142855 call chpl__domainFromArrayRuntimeType dstType)
    (142859 'end of statement')
    unknown lhs[142869] "no copy" "unsafe"(142868 call(142861 call . dom c"buildArray") eltType(initElts = 0))
    (142872 'end of statement')
    if(142888 call _cond_test(142881 call !=(142874 call . lhs c"rank")(142878 call . rhs c"rank")))
    {
      (142886 call compilerError "rank mismatch in array assignment")
    }
    if(142941 call _cond_test(142897 call !(142896 call isCopyableType eltType)))
    {
      (142939 call compilerError "Cannot copy-initialize array because element type '"(142920 call _cast string[26] eltType) "' cannot be copy-initialized")
    }
    if(143015 call _cond_test(142951 call ==(142947 call . rhs c"_value") nil[44]))
    {
    }
    {
      if(143010 call _cond_test(142962 call ==(142955 call . lhs c"_value")(142959 call . rhs c"_value")))
      {
      }
      {
        if(143006 call _cond_test(142979 call &&(142970 call ==(142966 call . lhs c"size") 0)(142977 call ==(142973 call . rhs c"size") 0)))
        {
        }
        {
          if(142989 call _cond_test boundsChecking)
          {
            (142987 call checkArrayShapesUponAssignment lhs rhs)
          }
          (143004 call chpl__uncheckedArrayTransfer lhs rhs(kind =(143000 call . _tElt c"initCopy")))
        }
      }
    }
    (143030 call(143026 call .(143021 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143033 return lhs)
  }
  function chpl__coerceMove[143043](arg dstType[143040] :
  _array, in arg rhs[143046] :
  _array) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143053] "type variable"(143052 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143061] "const" "ref var"(143060 call chpl__domainFromArrayRuntimeType dstType)
    (143064 'end of statement')
    unknown typeMismatch[143076] "param"(143074 call !=(143069 'typeof'(143066 call . rhs c"_instance"))(143073 call chpl__instanceTypeFromArrayRuntimeType dstType))
    (143079 'end of statement')
    unknown moveElts[143083] "param"(143081 call ! typeMismatch)
    (143086 'end of statement')
    if(143107 call _cond_test(143101 call && moveElts(143099 call ==(143089 call . dom c"_instance")(143096 call .(143093 call . rhs c"_dom") c"_instance"))))
    {
      (143104 return rhs)
    }
    unknown lhs[143120] "no copy" "unsafe"(143119 call(143112 call . dom c"buildArray") eltType(initElts = 0))
    (143123 'end of statement')
    if(143139 call _cond_test(143132 call !=(143125 call . lhs c"rank")(143129 call . rhs c"rank")))
    {
      (143137 call compilerError "rank mismatch in array assignment")
    }
    if(143226 call _cond_test(143149 call ==(143145 call . rhs c"_value") nil[44]))
    {
    }
    {
      if(143221 call _cond_test(143160 call ==(143153 call . lhs c"_value")(143157 call . rhs c"_value")))
      {
      }
      {
        if(143217 call _cond_test(143177 call &&(143168 call ==(143164 call . lhs c"size") 0)(143175 call ==(143171 call . rhs c"size") 0)))
        {
        }
        {
          if(143187 call _cond_test boundsChecking)
          {
            (143185 call checkArrayShapesUponAssignment lhs rhs)
          }
          unknown kind[143205] "param"(143202 IfExpr  moveElts then
          { scopeless
            (143195 call . _tElt c"move")
          } else
          { scopeless
            (143199 call . _tElt c"initCopy")
          } )
          (143208 'end of statement')
          (143215 call chpl__uncheckedArrayTransfer lhs rhs(kind = kind))
        }
      }
    }
    (143245 call _do_destroy_arr(143233 call . rhs c"_unowned")(143238 call . rhs c"_instance")(deinitElts =(143242 call ! moveElts)))
    (143255 call(143251 call .(143248 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143258 return lhs)
  }
  function chpl__coerceCopy[143268](arg dstType[143265] :
  _array, arg rhs[143271] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143278] "type variable"(143277 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143286] "const" "ref var"(143285 call chpl__domainFromArrayRuntimeType dstType)
    (143289 'end of statement')
    unknown lhs[143299] "no copy"(143298 call(143291 call . dom c"buildArray") eltType(initElts = 0))
    (143302 'end of statement')
    if(143318 call _cond_test(143311 call !=(143304 call . lhs c"rank")(143308 call . rhs c"rank")))
    {
      (143316 call compilerError "rank mismatch in array assignment")
    }
    if(143338 call _cond_test(143331 call &&(143326 call isAssociativeDom rhs)(143330 call isRectangularArr lhs)))
    {
      (143336 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    if(143370 call _cond_test(143347 call !(143346 call isPODType eltType)))
    {
      (143368 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143384 call chpl__transferArray lhs rhs(kind =(143380 call . _tElt c"initCopy")))
    (143394 call(143390 call .(143387 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143397 return lhs)
  }
  function chpl__coerceMove[143407](arg dstType[143404] :
  _array, in arg rhs[143410] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143417] "type variable"(143416 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143425] "const" "ref var"(143424 call chpl__domainFromArrayRuntimeType dstType)
    (143428 'end of statement')
    unknown lhs[143438] "no copy"(143437 call(143430 call . dom c"buildArray") eltType(initElts = 0))
    (143441 'end of statement')
    if(143457 call _cond_test(143450 call !=(143443 call . lhs c"rank")(143447 call . rhs c"rank")))
    {
      (143455 call compilerError "rank mismatch in array assignment")
    }
    if(143477 call _cond_test(143470 call &&(143465 call isAssociativeDom rhs)(143469 call isRectangularArr lhs)))
    {
      (143475 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    if(143493 call _cond_test(143486 call !(143485 call isPODType eltType)))
    {
      (143491 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143507 call chpl__transferArray lhs rhs(kind =(143503 call . _tElt c"initCopy")))
    (143517 call(143513 call .(143510 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143520 return lhs)
  }
  function chpl__coerceCopy[143530](arg dstType[143527] :
  _array, arg rhs[143536] :
  (143535 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143543] "type variable"(143542 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143551] "const" "ref var"(143550 call chpl__domainFromArrayRuntimeType dstType)
    (143554 'end of statement')
    unknown lhs[143564] "no copy"(143563 call(143556 call . dom c"buildArray") eltType(initElts = 0))
    (143567 'end of statement')
    if(143580 call _cond_test(143573 call !=(143569 call . lhs c"rank") 1))
    {
      (143578 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143594 call chpl__transferArray lhs rhs(kind =(143590 call . _tElt c"initCopy")))
    (143604 call(143600 call .(143597 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143607 return lhs)
  }
  function chpl__coerceMove[143617](arg dstType[143614] :
  _array, in arg rhs[143623] :
  (143622 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143630] "type variable"(143629 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143638] "const" "ref var"(143637 call chpl__domainFromArrayRuntimeType dstType)
    (143641 'end of statement')
    unknown lhs[143651] "no copy"(143650 call(143643 call . dom c"buildArray") eltType(initElts = 0))
    (143654 'end of statement')
    if(143667 call _cond_test(143660 call !=(143656 call . lhs c"rank") 1))
    {
      (143665 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143681 call chpl__transferArray lhs rhs(kind =(143677 call . _tElt c"initCopy")))
    (143691 call(143687 call .(143684 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143694 return lhs)
  }
  function chpl__coerceCopy[143704](arg dstType[143701] :
  _array, arg rhs[143707] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143714] "type variable"(143713 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143722] "const" "ref var"(143721 call chpl__domainFromArrayRuntimeType dstType)
    (143725 'end of statement')
    unknown lhs[143735] "no copy" "unsafe"(143734 call(143727 call . dom c"buildArray") eltType(initElts = 0))
    (143738 'end of statement')
    if(143766 call _cond_test(143743 call !(143742 call isRectangularArr lhs)))
    {
      (143764 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143779 call initArrFromTuple lhs rhs(143776 call . _tElt c"initCopy"))
    (143789 call(143785 call .(143782 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143792 return lhs)
  }
  function chpl__coerceMove[143802](arg dstType[143799] :
  _array, in arg rhs[143805] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143812] "type variable"(143811 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143820] "const" "ref var"(143819 call chpl__domainFromArrayRuntimeType dstType)
    (143823 'end of statement')
    unknown lhs[143833] "no copy" "unsafe"(143832 call(143825 call . dom c"buildArray") eltType(initElts = 0))
    (143836 'end of statement')
    if(143848 call _cond_test(143841 call !(143840 call isRectangularArr lhs)))
    {
      (143846 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143861 call initArrFromTuple lhs rhs(143858 call . _tElt c"move"))
    (143871 call(143867 call .(143864 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143874 return lhs)
  }
  function chpl__coerceCopy[143884](arg dstType[143881] :
  _array, arg rhs[143890] :
  (143889 call desyncEltType dstType)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143897] "type variable"(143896 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143905] "const" "ref var"(143904 call chpl__domainFromArrayRuntimeType dstType)
    (143908 'end of statement')
    unknown lhs[143918] "no copy" "unsafe"(143917 call(143910 call . dom c"buildArray") eltType(initElts = 0))
    (143921 'end of statement')
    Forall {
      induction variables:
        
        unknown e[143947] "index var" "insert auto destroy"
      iterated expressions:
        lhs
      shadow variables:
        rhs[143925] 'in' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[143935] "no auto destroy" rhs(143931 call . lhs c"eltType")
        (143938 'end of statement')
        (143944 '=' e copy)
      }
    }
    (143959 call(143955 call .(143952 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143962 return lhs)
  }
  function chpl__coerceMove[143972](arg dstType[143969] :
  _array, in arg rhs[143978] :
  (143977 call desyncEltType dstType)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143985] "type variable"(143984 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[143993] "const" "ref var"(143992 call chpl__domainFromArrayRuntimeType dstType)
    (143996 'end of statement')
    unknown lhs[144006] "no copy" "unsafe"(144005 call(143998 call . dom c"buildArray") eltType(initElts = 0))
    (144009 'end of statement')
    Forall {
      induction variables:
        
        unknown e[144032] "index var" "insert auto destroy"
      iterated expressions:
        lhs
      shadow variables:
        rhs[144013] 'in' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[144020] "no auto destroy" rhs eltType
        (144023 'end of statement')
        (144029 '=' e copy)
      }
    }
    (144044 call(144040 call .(144037 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144047 return lhs)
  }
  function chpl__coerceCopy[144057](arg dstType[144054] :
  _array, arg rhs[144060] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144067] "type variable"(144066 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144075] "const" "ref var"(144074 call chpl__domainFromArrayRuntimeType dstType)
    (144078 'end of statement')
    unknown lhs[144088] "no copy" "unsafe"(144087 call(144080 call . dom c"buildArray") eltType(initElts = 0))
    (144091 'end of statement')
    (144101 call chpl__transferArray lhs rhs(kind =(144097 call . _tElt c"initCopy")))
    (144111 call(144107 call .(144104 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144114 return lhs)
  }
  function chpl__coerceMove[144124](arg dstType[144121] :
  _array, arg rhs[144127] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144134] "type variable"(144133 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144142] "const" "ref var"(144141 call chpl__domainFromArrayRuntimeType dstType)
    (144145 'end of statement')
    unknown lhs[144155] "no copy" "unsafe"(144154 call(144147 call . dom c"buildArray") eltType(initElts = 0))
    (144158 'end of statement')
    (144168 call chpl__transferArray lhs rhs(kind =(144164 call . _tElt c"move")))
    (144178 call(144174 call .(144171 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144181 return lhs)
  }
  function chpl__coerceCopy[144191](arg dstType[144188] :
  _array, arg rhs[144193]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144199] "type variable"(144198 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144207] "const" "ref var"(144206 call chpl__domainFromArrayRuntimeType dstType)
    (144210 'end of statement')
    unknown lhs[144220] "no copy" "unsafe"(144219 call(144212 call . dom c"buildArray") eltType(initElts = 0))
    (144223 'end of statement')
    (144233 call chpl__transferArray lhs rhs(kind =(144229 call . _tElt c"initCopy")))
    (144243 call(144239 call .(144236 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144246 return lhs)
  }
  function chpl__coerceMove[144256](arg dstType[144253] :
  _array, in arg rhs[144258]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144264] "type variable"(144263 call chpl__eltTypeFromArrayRuntimeType dstType)
    const dom[144272] "const" "ref var"(144271 call chpl__domainFromArrayRuntimeType dstType)
    (144275 'end of statement')
    unknown lhs[144285] "no copy" "unsafe"(144284 call(144277 call . dom c"buildArray") eltType(initElts = 0))
    (144288 'end of statement')
    (144298 call chpl__transferArray lhs rhs(kind =(144294 call . _tElt c"initCopy")))
    (144308 call(144304 call .(144301 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144311 return lhs)
  }
  function chpl__unref[144323](arg x[144320] :
  (144317 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[144333] "no auto destroy" x
    (144336 'end of statement')
    (144339 return ret)
  }
  where {
    (144331 call chpl__isArrayView(144327 call . x c"_value"))
  }
  function chpl__unref[144350](arg ir[144347] :
  _iteratorRecord) : _unknown[51] "no copy return" "unref fn"
  {
    unknown toArray[144356] "no auto destroy" "no copy"(144355 call chpl__initCopy ir)
    (144359 'end of statement')
    (144362 return toArray)
  }
  function chpl__unref[144374](arg x[144371] :
  (144368 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[144377] "no copy" x
    (144380 'end of statement')
    (144383 return ret)
  }
  function chpl__unalias[144395](arg x[144392] :
  (144389 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "unalias fn"
  {
    unknown isview[144428] "param"(144426 call ||(144415 call ||(144405 call(144401 call .(144398 call . x c"_value") c"isSliceArrayView"))(144414 call(144410 call .(144407 call . x c"_value") c"isRankChangeArrayView")))(144425 call(144421 call .(144418 call . x c"_value") c"isReindexArrayView")))
    (144431 'end of statement')
    if(144457 call _cond_test isview)
    {
      unknown ret[144435] "no auto destroy" x
      (144438 'end of statement')
      (144443 call chpl__autoDestroy x)
      (144446 return ret)
    }
    {
      unknown ret[144449] "no copy" x
      (144452 'end of statement')
      (144455 return ret)
    }
  }
  function chpl__initCopy[144469](arg ir[144466] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    unknown shape[144483](144475 'new'(144482 call _domain(144478 call . ir c"_shape_")))
    (144486 'end of statement')
    (144493 call =(144489 call . shape c"_unowned") 1)
    (144501 return(144500 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (144474 call chpl_iteratorHasDomainShape ir)
  }
  function chpl__initCopy[144512](arg ir[144509] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    unknown shape[144533] "insert auto destroy"(144531 call chpl__buildDomainExpr(144527 call . ir c"_shape_"))
    (144536 'end of statement')
    (144543 return(144542 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (144524 call &&(144517 call chpl_iteratorHasRangeShape ir)(144522 call !(144521 call chpl_iteratorFromForExpr ir)))
  }
  function chpl__initCopy_shapeHelp[144554](arg shape[144551] :
  _domain, arg ir[144557] :
  _iteratorRecord) : _unknown[51] "ignore transfer errors"
  {
    unknown result[144573] "no copy" "unsafe"(144572 call(144561 call . shape c"buildArray")(144568 call iteratorToArrayElementType(144566 'typeof' ir))(initElts = 0))
    (144576 'end of statement')
    if(144608 call _cond_test(144584 call isArray(144580 call . result c"eltType")))
    {
      (144606 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    if(144873 call _cond_test(144616 call chpl_iteratorFromForExpr ir))
    {
      if(144787 call _cond_test(144623 call needsInitWorkaround(144619 call . result c"eltType")))
      {
        {
          unknown _indexOfInterest[144656] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144657] "expr temp" "temp"
          (144675 'move' _iterator[144657](144635 call _build_tuple(144669 call _getIterator(144666 call . result c"_dom"))(144673 call _getIterator ir)))
          Defer
          {
            {
              (144705 call _freeIterator _iterator[144657])
            }
          }
          { scopeless type
            (144680 'move' _indexOfInterest[144656](144677 call iteratorIndex _iterator[144657]))
          }
          ForLoop[144658]
          {
            (144685 call _check_tuple_var_decl _indexOfInterest[144656] 2)
            unknown ri[144691] "index var" "insert auto destroy"
            (144693 'move' ri[144691](144689 call _indexOfInterest[144656] 0))
            unknown src[144698] "index var" "insert auto destroy"
            (144700 'move' src[144698](144696 call _indexOfInterest[144656] 1))
            {
              unknown r[144640] "ref var"(144639 call result ri)
              (144643 'end of statement')
              unknown copy[144646] "no auto destroy" src
              (144649 'end of statement')
              (144654 '=' r copy)
            }
            label _continueLabel[144661]
            _indexOfInterest[144656]
            _iterator[144657]
          }
          label _breakLabel[144662]
        }
      }
      {
        {
          unknown _indexOfInterest[144734] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144735] "expr temp" "temp"
          (144749 'move' _iterator[144735](144721 call _build_tuple(144744 call _getIterator result)(144747 call _getIterator ir)))
          Defer
          {
            {
              (144779 call _freeIterator _iterator[144735])
            }
          }
          { scopeless type
            (144754 'move' _indexOfInterest[144734](144751 call iteratorIndex _iterator[144735]))
          }
          ForLoop[144736]
          {
            (144759 call _check_tuple_var_decl _indexOfInterest[144734] 2)
            unknown r[144765] "index var" "insert auto destroy"
            (144767 'move' r[144765](144763 call _indexOfInterest[144734] 0))
            unknown src[144772] "index var" "insert auto destroy"
            (144774 'move' src[144772](144770 call _indexOfInterest[144734] 1))
            {
              unknown copy[144723] "no auto destroy" src
              (144726 'end of statement')
              (144732 '=' r copy)
            }
            label _continueLabel[144739]
            _indexOfInterest[144734]
            _iterator[144735]
          }
          label _breakLabel[144740]
        }
      }
    }
    {
      if(144868 call _cond_test(144798 call needsInitWorkaround(144794 call . result c"eltType")))
      {
        Forall {
          induction variables:
            
            unknown ri[144832] "index var" "insert auto destroy"
            
            unknown src[144834] "index var" "insert auto destroy"
          iterated expressions:
            (144805 call . result c"_dom")
            ir
          shadow variables:
          other variables
            forall body
          {
            unknown r[144815] "ref var"(144814 call result ri)
            (144818 'end of statement')
            unknown copy[144821] "no auto destroy" src
            (144824 'end of statement')
            (144829 '=' r copy)
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144861] "index var" "insert auto destroy"
            
            unknown src[144863] "index var" "insert auto destroy"
          iterated expressions:
            result
            ir
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144849] "no auto destroy" src
            (144852 'end of statement')
            (144858 '=' r copy)
          }
        }
      }
    }
    (144885 call(144881 call .(144878 call . result c"_value") c"dsiElementInitializationComplete"))
    (144888 return result)
  }
  function chpl__throwErrorUnchecked[144900](in arg e[144897] :
  (144895 call _owned Error)) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    (144903 'throw' e)
  }
  function chpl__initCopy[144914](arg ir[144911] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    unknown shapeful[144920] "param"(144919 call chpl_iteratorHasRangeShape ir)
    (144923 'end of statement')
    unknown r[144937](144934 IfExpr  shapeful then
    { scopeless
      (144927 call . ir c"_shape_")
    } else
    { scopeless
      (144932 call chpl_build_bounded_range 1 0)
    } )
    (144940 'end of statement')
    unknown i[144942] 0
    (144945 'end of statement')
    unknown size[144953](144951 call _cast size_t(144947 call . r c"size"))
    (144956 'end of statement')
    unknown elemType[144962] "type variable"(144961 call iteratorToArrayElementType(144959 'typeof' ir))
    unknown data[144970] nil[44](144968 call _ddata elemType)
    (144973 'end of statement')
    unknown callPostAlloc[144975] bool[10]
    (144978 'end of statement')
    unknown subloc[144980] c_sublocid_none
    (144983 'end of statement')
    if(144999 call _cond_test(144986 call > size 0))
    {
      (144995 call = data(144994 call _ddata_allocate_noinit elemType size callPostAlloc))
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145147] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145148] "expr temp" "temp"
          (145157 'move' _iterator[145148](145155 call _getIterator ir))
          Defer
          {
            {
              (145173 call _freeIterator _iterator[145148])
            }
          }
          { scopeless type
            (145162 'move' _indexOfInterest[145147](145159 call iteratorIndex _iterator[145148]))
          }
          ForLoop[145149]
          {
            unknown elt[145166] "index var" "insert auto destroy"
            (145168 'move' elt[145166] _indexOfInterest[145147])
            {
              unknown eltCopy[145010] "no auto destroy" "no copy"(145009 'try-expr'(145008 call chpl__initCopy elt))
              (145013 'end of statement')
              if(145129 call _cond_test(145017 call >= i size))
              {
                unknown oldSize[145020] size
                (145023 'end of statement')
                unknown oldData[145026] data
                (145029 'end of statement')
                if(145047 call _cond_test(145032 call == size 0))
                {
                  (145036 call = size 4)
                }
                {
                  (145044 call = size(145042 call * 2 size))
                }
                (145060 call = data(145059 call _ddata_allocate_noinit elemType size callPostAlloc))
                {
                  unknown _indexOfInterest[145083] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145084] "expr temp" "temp"
                  (145093 'move' _iterator[145084](145091 call _getIterator(145100 call chpl_direct_counted_range_iter 0 oldSize)))
                  Defer
                  {
                    {
                      (145116 call _freeIterator _iterator[145084])
                    }
                  }
                  { scopeless type
                    (145105 'move' _indexOfInterest[145083](145102 call iteratorIndex _iterator[145084]))
                  }
                  ForLoop[145085]
                  {
                    unknown i[145109] "index var" "insert auto destroy"
                    (145111 'move' i[145109] _indexOfInterest[145083])
                    {
                      (145080 '='(145075 call data i)(145079 call oldData i))
                    }
                    label _continueLabel[145088]
                    _indexOfInterest[145083]
                    _iterator[145084]
                  }
                  label _breakLabel[145089]
                }
                (145127 call _ddata_free oldData oldSize)
              }
              (145140 '='(145138 call data i) eltCopy)
              (145144 call += i 1)
            }
            label _continueLabel[145152]
            _indexOfInterest[145147]
            _iterator[145148]
          }
          label _breakLabel[145153]
        }
      }
    }
    Catch e : Error
    {
      unknown tmp[354358] "temp"(354361 'current error')
      unknown e[354364](354369 'new'(354367 call _owned(354365 'to non nilable class' tmp[354358])))
      {
        {
          unknown _indexOfInterest[145202] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145203] "expr temp" "temp"
          (145212 'move' _iterator[145203](145210 call _getIterator(145220 call chpl_direct_range_iter 0(145217 call - i 1) 1)))
          Defer
          {
            {
              (145236 call _freeIterator _iterator[145203])
            }
          }
          { scopeless type
            (145225 'move' _indexOfInterest[145202](145222 call iteratorIndex _iterator[145203]))
          }
          ForLoop[145204]
          {
            unknown j[145229] "index var" "insert auto destroy"
            (145231 'move' j[145229] _indexOfInterest[145202])
            {
              (145199 call chpl__autoDestroy(145197 call data j))
            }
            label _continueLabel[145207]
            _indexOfInterest[145202]
            _iterator[145203]
          }
          label _breakLabel[145208]
        }
        (145248 call _ddata_free data size)
        (145253 call chpl__throwErrorUnchecked e)
      }
    }
    if(145276 call _cond_test(145266 call && shapeful(145264 call < i(145261 call . r c"size"))))
    {
      (145273 call = r(145271 call # r i))
    }
    if(145305 call _cond_test(145282 call ! shapeful))
    {
      (145302 call = r(145299 IfExpr (145287 call == i 0) then
      { scopeless
        (145291 call chpl_build_bounded_range 1 0)
      } else
      { scopeless
        (145297 call #(145294 call chpl_build_low_bounded_range capturedIteratorLowBound) i)
      } ))
    }
    unknown D[145314] "insert auto destroy"(145312 call chpl__buildDomainExpr r)
    (145317 'end of statement')
    if(145447 call _cond_test(145320 call != data nil[44]))
    {
      if(145329 call _cond_test callPostAlloc)
      {
        (145327 call _ddata_allocate_postalloc data size)
      }
      unknown A[145353](145352 call(145338 call . D c"buildArrayWith")(145345 'typeof'(145344 call data 0)) data(145350 call _cast int[13] size))
      (145356 'end of statement')
      (145368 call chpl_decRefCountsForDomainsInArrayEltTypes(145359 call . A c"_value")(145367 'typeof'(145366 call data 0)))
      (145378 call =(145374 call .(145371 call . A c"_value") c"_decEltRefCounts") 0)
      (145400 'auto destroy runtime type' elemType)
      (145403 return A)
    }
    {
      (145412 call = data(145411 call _ddata_allocate_noinit elemType size callPostAlloc))
      if(145423 call _cond_test callPostAlloc)
      {
        (145421 call _ddata_allocate_postalloc data size)
      }
      unknown A[145440](145439 call(145429 call . D c"buildArrayWith") elemType data(145437 call _cast int[13] size))
      (145443 'end of statement')
      (145445 return A)
    }
  }
}