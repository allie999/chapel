AST dump for ArrayViewReindex after pass expandExternArrayCalls.
Module use list: 

{
  (196080 'use' ChapelStandard)
  type ArrayViewReindexDist[196319](?) const downDistPid[196087] "const" int[13] const downDistInst[196091] "const" const updom[196095] "const" const downdomPid[196099] "const" const downdomInst[196103] "const" function ArrayViewReindexDist[196319](?).downDist[196109](arg _mt[196323]:_MT[238], arg this[196321]:ArrayViewReindexDist[196319](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(196126 call _cond_test(196114 call _isPrivatized downDistInst))
    {
      { scopeless
        (196121 return(196120 call chpl_getPrivatizedCopy(196117 'typeof' downDistInst) downDistPid))
      }
    }
    {
      { scopeless
        (196124 return downDistInst)
      }
    }
  } function ArrayViewReindexDist[196319](?).dsiNewRectangularDom[196139](arg _mt[196327]:_MT[238], arg this[196325]:ArrayViewReindexDist[196319](?), param arg rank[196137]:_any[178](?), arg idxType[196141]:_any[178](?), param arg stridable[196143]:_any[178](?), arg inds[196145]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      unknown newdom[196173](196149 'new'(_chpl_manager = unmanaged[220](?))(196172 call ArrayViewReindexDom(rank = rank)(idxType = idxType)(stridable = stridable)(downdomPid = downdomPid)(downdomInst = downdomInst)(distPid =(196163 call . this c"pid"))(distInst =(196170 call _to_unmanaged this))))
      (196176 'end of statement')
    }
    (196184 call(196179 call . newdom c"dsiSetIndices") inds)
    (196187 return newdom)
  } function ArrayViewReindexDist[196319](?).dsiClone[196193](arg _mt[196331]:_MT[238], arg this[196329]:ArrayViewReindexDist[196319](?)) : _unknown[51] "method" "primary method"
  {
    (196211 return(196197 'new'(_chpl_manager = unmanaged[220](?))(196210 call ArrayViewReindexDist(downDistPid = downDistPid)(downDistInst = downDistInst)(updom = updom)(downdomPid = downdomPid)(downdomInst = downdomInst))))
  } function ArrayViewReindexDist[196319](?).dsiSupportsPrivatization[196218](arg _mt[196335]:_MT[238], arg this[196333]:ArrayViewReindexDist[196319](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (196226 return(196225 call(196221 call . downDistInst c"dsiSupportsPrivatization")))
    }
  } function ArrayViewReindexDist[196319](?).dsiGetPrivatizeData[196233](arg _mt[196339]:_MT[238], arg this[196337]:ArrayViewReindexDist[196319](?)) : _unknown[51] "method" "primary method"
  {
    (196243 return(196241 call _build_tuple downDistPid downDistInst updom downdomPid downdomInst))
  } function ArrayViewReindexDist[196319](?).dsiPrivatize[196252](arg _mt[196343]:_MT[238], arg this[196341]:ArrayViewReindexDist[196319](?), arg privatizeData[196250]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (196285 return(196256 'new'(_chpl_manager = unmanaged[220](?))(196284 call ArrayViewReindexDist(downDistPid =(196261 call privatizeData 0))(downDistInst =(196267 call privatizeData 1))(updom =(196272 call privatizeData 2))(downdomPid =(196277 call privatizeData 3))(downdomInst =(196282 call privatizeData 4)))))
  } function ArrayViewReindexDist[196319](?).dsiDestroyDist[196292](arg _mt[196347]:_MT[238], arg this[196345]:ArrayViewReindexDist[196319](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (196298 call _delete_dom updom 0)
  } function ArrayViewReindexDist[196319](?).dsiIsLayout[196305](arg _mt[196351]:_MT[238], arg this[196349]:ArrayViewReindexDist[196319](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (196313 return(196312 call(196308 call . downDistInst c"dsiIsLayout")))
  } BaseDist
  type ArrayViewReindexDom[197635](?) unknown updomInst[196365](196364 'to unmanaged class from unknown'(196363 'to nilable class from type'(196362 call DefaultRectangularDom rank idxType stridable))) function ArrayViewReindexDom[197635](?).chpl_forwarding_expr10_updom[196371](arg _mt[197639]:_MT[238], arg this[197637]:ArrayViewReindexDom[197635](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (196373 return updom)
  } unknown downdomPid[196377] unknown downdomInst[196381] const distPid[196385] "const" const distInst[196389] "const" unknown ownsDownDomInst[196394] 0 function ArrayViewReindexDom[197635](?).dist[196400](arg _mt[197643]:_MT[238], arg this[197641]:ArrayViewReindexDom[197635](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(196417 call _cond_test(196405 call _isPrivatized distInst))
    {
      { scopeless
        (196412 return(196411 call chpl_getPrivatizedCopy(196408 'typeof' distInst) distPid))
      }
    }
    {
      { scopeless
        (196415 return distInst)
      }
    }
  } function ArrayViewReindexDom[197635](?).updom[196428](arg _mt[197647]:_MT[238], arg this[197645]:ArrayViewReindexDom[197635](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (196433 return(196431 call postfix! updomInst))
  } function ArrayViewReindexDom[197635](?).downdomtype[196444](arg _mt[197651]:_MT[238], arg this[197649]:ArrayViewReindexDom[197635](?), param arg rank[196441] :
  int[13], arg idxType[196446]:_any[178](?), param arg stridable[196449] :
  bool[10]) type : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown ranges[196464](196462 call * rank(196461 call range idxType(196457 call . BoundedRangeType c"bounded") stridable))
      (196467 'end of statement')
    }
    { scopeless
      unknown a[196485](196484 call(196473 call .(196470 call . dist c"downDist") c"dsiNewRectangularDom")(rank = rank)(idxType = idxType)(stridable = stridable) ranges)
      (196488 'end of statement')
    }
    (196491 return(196490 'typeof' a))
  } function ArrayViewReindexDom[197635](?).downdom[196497](arg _mt[197655]:_MT[238], arg this[197653]:ArrayViewReindexDom[197635](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(196514 call _cond_test(196502 call _isPrivatized downdomInst))
    {
      { scopeless
        (196509 return(196508 call chpl_getPrivatizedCopy(196505 'typeof' downdomInst) downdomPid))
      }
    }
    {
      { scopeless
        (196512 return downdomInst)
      }
    }
  } function ArrayViewReindexDom[197635](?).dsiBuildArray[196527](arg _mt[197659]:_MT[238], arg this[197657]:ArrayViewReindexDom[197635](?), arg eltType[196525]:_any[178](?), param arg initElts[196530] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const downarr[196544] "const" "no auto destroy"(196543 call _newArray(196541 call(196535 call . downdom c"dsiBuildArray") eltType initElts))
      (196547 'end of statement')
    }
    (196579 return(196551 'new'(_chpl_manager = unmanaged[220](?))(196578 call ArrayViewReindexArr(eltType = eltType)(_DomPid =(196557 call . this c"pid"))(dom =(196564 call _to_unmanaged this))(_ArrPid =(196567 call . downarr c"_pid"))(_ArrInstance =(196572 call . downarr c"_instance"))(ownsArrInstance = 1))))
  } function ArrayViewReindexDom[197635](?).dsiSetIndices[196587](arg _mt[197663]:_MT[238], arg this[197661]:ArrayViewReindexDom[197635](?), arg inds[196585]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown updomRec[196594] "no auto destroy"(196592 call chpl__buildDomainExpr(196590 'expand_tuple' inds))
      (196597 'end of statement')
    }
    if(196611 call _cond_test(196601 call != updomInst nil[44]))
    {
      { scopeless
        (196609 call _delete_dom(196605 call postfix! updomInst) 0)
      }
    }
    (196621 call = updomInst(196618 call . updomRec c"_value"))
    { scopeless
      unknown ranges[196644](196642 call * rank(196641 call range idxType(196629 call . BoundedRangeType c"bounded")(196638 call .(196635 call . dist c"downdomInst") c"stridable")))
      (196647 'end of statement')
    }
    { scopeless
      unknown downdomclass[196670](196669 call(196652 call .(196649 call . dist c"downDist") c"dsiNewRectangularDom")(rank = rank)(idxType = idxType)(stridable =(196664 call .(196661 call . dist c"downdomInst") c"stridable")) ranges)
      (196673 'end of statement')
    }
    { scopeless
      unknown downdomLoc[196679] "no auto destroy"(196674 'new'(196678 call _domain downdomclass))
      (196682 'end of statement')
    }
    (196693 call = downdomLoc(196692 call chpl_reindexConvertDom inds updom(196689 call . dist c"downdomInst")))
    (196704 call =(196700 call .(196697 call . downdomLoc c"_value") c"_free_when_no_arrs") 1)
    if(196724 call _cond_test(196712 call &&(196709 call != downdomInst nil[44]) ownsDownDomInst))
    {
      (196721 call _delete_dom downdomInst(196720 call _isPrivatized downdomInst))
    }
    (196733 call = downdomPid(196730 call . downdomLoc c"_pid"))
    (196741 call = downdomInst(196738 call . downdomLoc c"_instance"))
    (196746 call = ownsDownDomInst 1)
  } function ArrayViewReindexDom[197635](?).these[196753](arg _mt[197667]:_MT[238], arg this[197665]:ArrayViewReindexDom[197635](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(196840 call _cond_test(196758 call chpl__isDROrDRView downdom))
    {
      {
        unknown _indexOfInterest[196764] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[196765] "expr temp" "temp"
        (196774 'move' _iterator[196765](196772 call _getIterator updom))
        Defer
        {
          {
            (196790 call _freeIterator _iterator[196765])
          }
        }
        { scopeless type
          (196779 'move' _indexOfInterest[196764](196776 call iteratorIndex _iterator[196765]))
        }
        ForLoop[196766]
        {
          unknown i[196783] "index var" "insert auto destroy"
          (196785 'move' i[196783] _indexOfInterest[196764])
          { scopeless
            (196762 yield i)
          }
          label _continueLabel[196769]
          _indexOfInterest[196764]
          _iterator[196765]
        }
        label _breakLabel[196770]
      }
    }
    {
      {
        unknown _indexOfInterest[196806] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[196807] "expr temp" "temp"
        (196816 'move' _iterator[196807](196814 call _getIterator downdom))
        Defer
        {
          {
            (196832 call _freeIterator _iterator[196807])
          }
        }
        { scopeless type
          (196821 'move' _indexOfInterest[196806](196818 call iteratorIndex _iterator[196807]))
        }
        ForLoop[196808]
        {
          unknown i[196825] "index var" "insert auto destroy"
          (196827 'move' i[196825] _indexOfInterest[196806])
          { scopeless
            (196804 yield(196803 call downIdxToUpIdx i))
          }
          label _continueLabel[196811]
          _indexOfInterest[196806]
          _iterator[196807]
        }
        label _breakLabel[196812]
      }
    }
  } function ArrayViewReindexDom[197635](?).these[196853](arg _mt[197671]:_MT[238], arg this[197669]:ArrayViewReindexDom[197635](?), param arg tag[196850] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown i[196882] "index var" "insert auto destroy"
      iterated expressions:
        updom
      shadow variables:
      other variables
        forall body
      {
        (196879 yield i)
      }
    }
  }
  where {
    (196874 call &&(196866 call &&(196860 call == tag(196857 call . iterKind c"standalone"))(196865 call chpl__isDROrDRView downdom))(196873 'method call resolves' updom "these" tag))
  } function ArrayViewReindexDom[197635](?).these[196896](arg _mt[197675]:_MT[238], arg this[197673]:ArrayViewReindexDom[197635](?), param arg tag[196893] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown i[196930] "index var" "insert auto destroy"
      iterated expressions:
        downdom
      shadow variables:
      other variables
        forall body
      {
        (196927 yield(196926 call downIdxToUpIdx i))
      }
    }
  }
  where {
    (196919 call &&(196911 call &&(196903 call == tag(196900 call . iterKind c"standalone"))(196909 call !(196908 call chpl__isDROrDRView downdom)))(196918 'method call resolves' downdom "these" tag))
  } function ArrayViewReindexDom[197635](?).these[196944](arg _mt[197679]:_MT[238], arg this[197677]:ArrayViewReindexDom[197635](?), param arg tag[196941] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(197050 call _cond_test(196956 call chpl__isDROrDRView downdom))
    {
      {
        unknown _indexOfInterest[196968] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[196969] "expr temp" "temp"
        (196978 'move' _iterator[196969](196976 call _getIterator(196964 call(196959 call . updom c"these") tag)))
        Defer
        {
          {
            (196995 call _freeIterator _iterator[196969])
          }
        }
        { scopeless type
          (196984 'move' _indexOfInterest[196968](196981 call iteratorIndex _iterator[196969]))
        }
        ForLoop[196970]
        {
          unknown followThis[196988] "index var" "insert auto destroy"
          (196990 'move' followThis[196988] _indexOfInterest[196968])
          { scopeless
            (196966 yield followThis)
          }
          label _continueLabel[196973]
          _indexOfInterest[196968]
          _iterator[196969]
        }
        label _breakLabel[196974]
      }
    }
    {
      {
        unknown _indexOfInterest[197015] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[197016] "expr temp" "temp"
        (197025 'move' _iterator[197016](197023 call _getIterator(197010 call(197005 call . downdom c"these") tag)))
        Defer
        {
          {
            (197042 call _freeIterator _iterator[197016])
          }
        }
        { scopeless type
          (197031 'move' _indexOfInterest[197015](197028 call iteratorIndex _iterator[197016]))
        }
        ForLoop[197017]
        {
          unknown followThis[197035] "index var" "insert auto destroy"
          (197037 'move' followThis[197035] _indexOfInterest[197015])
          {
            (197012 yield followThis)
          }
          label _continueLabel[197020]
          _indexOfInterest[197015]
          _iterator[197016]
        }
        label _breakLabel[197021]
      }
    }
  }
  where {
    (196951 call == tag(196948 call . iterKind c"leader"))
  } function ArrayViewReindexDom[197635](?).these[197064](arg _mt[197683]:_MT[238], arg this[197681]:ArrayViewReindexDom[197635](?), param arg tag[197061] :
  iterKind, arg followThis[197066]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[197087] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[197088] "expr temp" "temp"
      (197097 'move' _iterator[197088](197095 call _getIterator(197083 call(197077 call . updom c"these") tag followThis)))
      Defer
      {
        {
          (197114 call _freeIterator _iterator[197088])
        }
      }
      { scopeless type
        (197103 'move' _indexOfInterest[197087](197100 call iteratorIndex _iterator[197088]))
      }
      ForLoop[197089]
      {
        unknown i[197107] "index var" "insert auto destroy"
        (197109 'move' i[197107] _indexOfInterest[197087])
        { scopeless
          (197085 yield i)
        }
        label _continueLabel[197092]
        _indexOfInterest[197087]
        _iterator[197088]
      }
      label _breakLabel[197093]
    }
  }
  where {
    (197073 call == tag(197070 call . iterKind c"follower"))
  } function ArrayViewReindexDom[197635](?).chpl_reindexConvertLoDTupleToHiD[197129](arg _mt[197687]:_MT[238], arg this[197685]:ArrayViewReindexDom[197635](?), arg tup[197127]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (197150 call compilerError "Unimplemented routine")
  } function ArrayViewReindexDom[197635](?).chpl_reindexConvertHiDTupleToLoD[197159](arg _mt[197691]:_MT[238], arg this[197689]:ArrayViewReindexDom[197635](?), arg tup[197157]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (197164 call compilerError "Unimplemented routine")
  } function ArrayViewReindexDom[197635](?).downIdxToUpIdx[197175](arg _mt[197695]:_MT[238], arg this[197693]:ArrayViewReindexDom[197635](?), arg downIdx[197172] :
  integral) : _unknown[51] "inline" "method" "primary method"
  {
    (197193 call compilerAssert(197183 call ==(197179 call . updom c"rank") 1)(197191 call _cast string[26](197187 call . updom c"rank")))
    (197221 return(197220 call(197203 call .(197202 call(197197 call . updom c"dsiDim") 0) c"orderToIndex")(197218 call(197213 call .(197212 call(197207 call . downdom c"dsiDim") 0) c"indexOrder") downIdx)))
  } function ArrayViewReindexDom[197635](?).downIdxToUpIdx[197229](arg _mt[197699]:_MT[238], arg this[197697]:ArrayViewReindexDom[197635](?), arg i[197227]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      unknown ind[197241](197239 call *(197232 call . updom c"rank")(197236 call . updom c"idxType"))
      (197244 'end of statement')
    }
    {
      unknown d[197292] 0
      unknown tmp[197293] "maybe param" "temp"
      (197305 'move' tmp[197293](197303 call chpl_compute_low_param_loop_bound 0(197252 call -(197248 call . updom c"rank") 1)))
      unknown tmp[197294] "maybe param" "temp"
      (197318 'move' tmp[197294](197316 call chpl_compute_high_param_loop_bound 0(197310 call -(197312 call . updom c"rank") 1)))
      unknown tmp[197295] "maybe param" "temp"
      (197321 'move' tmp[197295] 1)
      ParamForLoop[197323]
      { d[197292] tmp[197293] tmp[197294] tmp[197295]
        {
          (197288 call =(197259 call ind d)(197287 call(197267 call .(197266 call(197261 call . updom c"dsiDim") d) c"orderToIndex")(197285 call(197277 call .(197276 call(197271 call . downdom c"dsiDim") d) c"indexOrder")(197283 call i d))))
        }
      }
      label _unused_continueLabel[197297]
      label _breakLabel[197296]
    }
    (197333 return ind)
  } function ArrayViewReindexDom[197635](?).dsiMyDist[197339](arg _mt[197703]:_MT[238], arg this[197701]:ArrayViewReindexDom[197635](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (197342 return dist)
  } function ArrayViewReindexDom[197635](?).dsiTargetLocales[197349](arg _mt[197707]:_MT[238], arg this[197705]:ArrayViewReindexDom[197635](?)) : _unknown[51] "method" "primary method"
  {
    (197357 return(197356 call(197352 call . downdom c"dsiTargetLocales")))
  } function ArrayViewReindexDom[197635](?).dsiHasSingleLocalSubdomain[197364](arg _mt[197711]:_MT[238], arg this[197709]:ArrayViewReindexDom[197635](?)) param : _unknown[51] "method" "primary method"
  {
    { scopeless
      (197372 return(197371 call(197367 call . downdom c"dsiHasSingleLocalSubdomain")))
    }
  } function ArrayViewReindexDom[197635](?).dsiLocalSubdomain[197383](arg _mt[197715]:_MT[238], arg this[197713]:ArrayViewReindexDom[197635](?), arg loc[197380] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const dims[197397] "const"(197396 call(197392 call .(197391 call(197386 call . downdom c"dsiLocalSubdomain") loc) c"dims"))
      (197400 'end of statement')
    }
    (197408 return(197407 call chpl_reindexConvertDom dims downdom updom))
  } function ArrayViewReindexDom[197635](?).dsiAssignDomain[197418](arg _mt[197719]:_MT[238], arg this[197717]:ArrayViewReindexDom[197635](?), arg rhs[197415] :
  _domain, arg lhsPrivate[197421] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (197428 call chpl_assignDomainWithGetSetIndices this rhs)
  } function ArrayViewReindexDom[197635](?).isReindexDomainView[197435](arg _mt[197723]:_MT[238], arg this[197721]:ArrayViewReindexDom[197635](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (197438 return 1)
  } function ArrayViewReindexDom[197635](?)._getActualDomain[197445](arg _mt[197727]:_MT[238], arg this[197725]:ArrayViewReindexDom[197635](?)) : _unknown[51] "method" "primary method"
  {
    if(197464 call _cond_test(197450 call chpl__isDomainView downdom))
    {
      (197457 return(197456 call(197452 call . downdom c"_getActualDomain")))
    }
    {
      (197461 return downdom)
    }
  } function ArrayViewReindexDom[197635](?).dsiDestroyDom[197473](arg _mt[197731]:_MT[238], arg this[197729]:ArrayViewReindexDom[197635](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (197481 call _delete_dom(197477 call postfix! updomInst) 0)
    (197491 call _delete_dom downdomInst(197490 call _isPrivatized downdomInst))
  } function ArrayViewReindexDom[197635](?).dsiSupportsPrivatization[197497](arg _mt[197735]:_MT[238], arg this[197733]:ArrayViewReindexDom[197635](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (197505 return(197504 call(197500 call . downdomInst c"dsiSupportsPrivatization")))
    }
  } function ArrayViewReindexDom[197635](?).dsiGetPrivatizeData[197512](arg _mt[197739]:_MT[238], arg this[197737]:ArrayViewReindexDom[197635](?)) : _unknown[51] "method" "primary method"
  {
    (197522 return(197520 call _build_tuple updomInst downdomPid downdomInst distPid distInst))
  } function ArrayViewReindexDom[197635](?).dsiPrivatize[197531](arg _mt[197743]:_MT[238], arg this[197741]:ArrayViewReindexDom[197635](?), arg privatizeData[197529]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (197579 return(197535 'new'(_chpl_manager = unmanaged[220](?))(197578 call ArrayViewReindexDom(rank =(197538 call . this c"rank"))(idxType =(197544 call . this c"idxType"))(stridable =(197549 call . this c"stridable"))(updomInst =(197556 call privatizeData 0))(downdomPid =(197561 call privatizeData 1))(downdomInst =(197566 call privatizeData 2))(distPid =(197571 call privatizeData 3))(distInst =(197576 call privatizeData 4)))))
  } function ArrayViewReindexDom[197635](?).dsiGetReprivatizeData[197586](arg _mt[197747]:_MT[238], arg this[197745]:ArrayViewReindexDom[197635](?)) : _unknown[51] "method" "primary method"
  {
    (197594 return(197592 call _build_tuple updomInst downdomPid downdomInst))
  } function ArrayViewReindexDom[197635](?).dsiReprivatize[197603](arg _mt[197751]:_MT[238], arg this[197749]:ArrayViewReindexDom[197635](?), arg other[197601]:_any[178](?), arg reprivatizeData[197605]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (197612 call = updomInst(197611 call reprivatizeData 0))
    (197621 call = downdomPid(197620 call reprivatizeData 1))
    (197629 call = downdomInst(197628 call reprivatizeData 2))
  } BaseRectangularDom forwarding ( )
  function buildIndexCacheHelper[197758](arg arr[197756]:_any[178](?), arg dom[197760]:_any[178](?)) : _unknown[51] "private"
  {
    if(197859 call _cond_test(197765 call chpl__isDROrDRView arr))
    {
      if(197850 call _cond_test(197769 call chpl__isArrayView arr))
      {
        if(197830 call _cond_test(197784 call &&(197775 call(197771 call . arr c"isSliceArrayView"))(197782 call !(197781 call(197777 call . arr c"_containsRCRE")))))
        {
          (197814 return(197813 call(197808 call .(197805 call(197797 call .(197796 call(197792 call .(197791 call(197787 call . arr c"_getActualArray")) c"dsiGetRAD")) c"toSlice")(197801 call . arr c"dom")) c"toReindex") dom))
        }
        {
          (197827 return(197826 call(197821 call .(197818 call . arr c"indexCache") c"toReindex") dom))
        }
      }
      {
        (197847 return(197846 call(197841 call .(197840 call(197836 call . arr c"dsiGetRAD")) c"toReindex") dom))
      }
    }
    {
      (197856 return 0)
    }
  }
  type ArrayViewReindexArr[199326](?) const _DomPid[197869] "const" const dom[197873] "const" const _ArrPid[197877] "const" const _ArrInstance[197881] "const" const indexCache[197885] "const" const ownsArrInstance[197889] "const" function ArrayViewReindexArr[199326](?).init[197897](arg _mt[199330]:_MT[238], arg this[199328]:ArrayViewReindexArr[199326](?), arg eltType[197895]:_any[178](?), const arg _DomPid[197899]:_any[178](?), const arg dom[197901]:_any[178](?), const arg _ArrPid[197903]:_any[178](?), const arg _ArrInstance[197905]:_any[178](?), const arg ownsArrInstance[197909] :
  bool[10] =
  0) : _unknown[51] "method" "primary method"
  {
    (197920 call(197914 call . super c"init")(eltType = eltType))
    (197928 call =(197924 call . this c"_DomPid") _DomPid)
    (197936 call =(197932 call . this c"dom") dom)
    (197944 call =(197940 call . this c"_ArrPid") _ArrPid)
    (197952 call =(197948 call . this c"_ArrInstance") _ArrInstance)
    (197964 call =(197956 call . this c"indexCache")(197963 call buildIndexCacheHelper _ArrInstance dom))
    (197972 call =(197968 call . this c"ownsArrInstance") ownsArrInstance)
  } function ArrayViewReindexArr[199326](?).chpl_forwarding_expr11_arr[197986](arg _mt[199334]:_MT[238], arg this[199332]:ArrayViewReindexArr[199326](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (197988 return arr)
  } function ArrayViewReindexArr[199326](?).downdom[197994](arg _mt[199338]:_MT[238], arg this[199336]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (198000 return(197997 call . arr c"dom"))
  } function ArrayViewReindexArr[199326](?).idxType[198007](arg _mt[199342]:_MT[238], arg this[199340]:ArrayViewReindexArr[199326](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (198013 return(198010 call . dom c"idxType"))
    }
  } function ArrayViewReindexArr[199326](?).rank[198020](arg _mt[199346]:_MT[238], arg this[199344]:ArrayViewReindexArr[199326](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (198026 return(198023 call . dom c"rank"))
    }
  } function ArrayViewReindexArr[199326](?).isReindexArrayView[198033](arg _mt[199350]:_MT[238], arg this[199348]:ArrayViewReindexArr[199326](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (198036 return 1)
  } function ArrayViewReindexArr[199326](?).these[198043](arg _mt[199354]:_MT[238], arg this[199352]:ArrayViewReindexArr[199326](?)) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[198054] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[198055] "expr temp" "temp"
      (198064 'move' _iterator[198055](198062 call _getIterator(198050 call chpl__serialViewIter this privDom)))
      Defer
      {
        {
          (198081 call _freeIterator _iterator[198055])
        }
      }
      { scopeless type
        (198070 'move' _indexOfInterest[198054](198067 call iteratorIndex _iterator[198055]))
      }
      ForLoop[198056]
      {
        unknown elem[198074] "index var" "insert auto destroy"
        (198076 'move' elem[198074] _indexOfInterest[198054])
        { scopeless
          (198052 yield elem)
        }
        label _continueLabel[198059]
        _indexOfInterest[198054]
        _iterator[198055]
      }
      label _breakLabel[198060]
    }
  } function ArrayViewReindexArr[199326](?).these[198097](arg _mt[199358]:_MT[238], arg this[199356]:ArrayViewReindexArr[199326](?), param arg tag[198094] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown i[198166] "index var" "insert auto destroy"
      iterated expressions:
        privDom
      shadow variables:
      other variables
        forall body
      {
        if(198160 call _cond_test(198123 call shouldUseIndexCache))
        {
          { scopeless
            const dataIdx[198131] "const"(198130 call(198125 call . indexCache c"getDataIndex") i)
            (198134 'end of statement')
          }
          (198143 yield(198142 call(198137 call . indexCache c"getDataElem") dataIdx))
        }
        {
          (198157 yield(198156 call(198146 call . arr c"dsiAccess")(198154 call chpl_reindexConvertIdx i privDom downdom)))
        }
      }
    }
  }
  where {
    (198117 call &&(198109 call &&(198104 call == tag(198101 call . iterKind c"standalone"))(198107 call ! localeModelHasSublocales))(198116 'method call resolves' privDom "these" tag))
  } function ArrayViewReindexArr[199326](?).these[198180](arg _mt[199362]:_MT[238], arg this[199360]:ArrayViewReindexArr[199326](?), param arg tag[198177] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[198201] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[198202] "expr temp" "temp"
      (198211 'move' _iterator[198202](198209 call _getIterator(198196 call(198191 call . privDom c"these") tag)))
      Defer
      {
        {
          (198228 call _freeIterator _iterator[198202])
        }
      }
      { scopeless type
        (198217 'move' _indexOfInterest[198201](198214 call iteratorIndex _iterator[198202]))
      }
      ForLoop[198203]
      {
        unknown followThis[198221] "index var" "insert auto destroy"
        (198223 'move' followThis[198221] _indexOfInterest[198201])
        {
          (198198 yield followThis)
        }
        label _continueLabel[198206]
        _indexOfInterest[198201]
        _iterator[198202]
      }
      label _breakLabel[198207]
    }
  }
  where {
    (198187 call == tag(198184 call . iterKind c"leader"))
  } function ArrayViewReindexArr[199326](?).these[198245](arg _mt[199366]:_MT[238], arg this[199364]:ArrayViewReindexArr[199326](?), param arg tag[198242] :
  iterKind, arg followThis[198247]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[198309] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[198310] "expr temp" "temp"
      (198319 'move' _iterator[198310](198317 call _getIterator(198264 call(198258 call . privDom c"these") tag followThis)))
      Defer
      {
        {
          (198336 call _freeIterator _iterator[198310])
        }
      }
      { scopeless type
        (198325 'move' _indexOfInterest[198309](198322 call iteratorIndex _iterator[198310]))
      }
      ForLoop[198311]
      {
        unknown i[198329] "index var" "insert auto destroy"
        (198331 'move' i[198329] _indexOfInterest[198309])
        {
          if(198304 call _cond_test(198267 call shouldUseIndexCache))
          {
            { scopeless
              const dataIdx[198275] "const"(198274 call(198269 call . indexCache c"getDataIndex") i)
              (198278 'end of statement')
            }
            (198287 yield(198286 call(198281 call . indexCache c"getDataElem") dataIdx))
          }
          {
            (198301 yield(198300 call(198290 call . arr c"dsiAccess")(198298 call chpl_reindexConvertIdx i privDom downdom)))
          }
        }
        label _continueLabel[198314]
        _indexOfInterest[198309]
        _iterator[198310]
      }
      label _breakLabel[198315]
    }
  }
  where {
    (198254 call == tag(198251 call . iterKind c"follower"))
  } function ArrayViewReindexArr[199326](?).dsiSerialWrite[198351](arg _mt[199370]:_MT[238], arg this[199368]:ArrayViewReindexArr[199326](?), arg f[198349]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (198363 call chpl_serialReadWriteRectangular f this(198360 call . privDom c"updom"))
  } function ArrayViewReindexArr[199326](?).dsiSerialRead[198372](arg _mt[199374]:_MT[238], arg this[199372]:ArrayViewReindexArr[199326](?), arg f[198370]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (198382 call chpl_serialReadWriteRectangular f this(198379 call . privDom c"updom"))
  } function ArrayViewReindexArr[199326](?).dsiDisplayRepresentation[198389](arg _mt[199378]:_MT[238], arg this[199376]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (198410 call writeln "Reindex view")
    (198432 call writeln "------------")
    (198437 call writeln "of domain:")
    (198444 call(198440 call . privDom c"dsiDisplayRepresentation"))
    (198449 call writeln "on array:")
    (198456 call(198452 call . arr c"dsiDisplayRepresentation"))
    (198461 call writeln "------------")
  } function ArrayViewReindexArr[199326](?).dsiAccess[198473](arg _mt[199382]:_MT[238], arg this[199380]:ArrayViewReindexArr[199326](?), arg i[198469] ... :
  idxType) ref : _unknown[51] "inline" "method" "primary method"
  {
    (198479 return(198478 call dsiAccess i))
  } function ArrayViewReindexArr[199326](?).dsiAccess[198492](arg _mt[199386]:_MT[238], arg this[199384]:ArrayViewReindexArr[199326](?), arg i[198488] ... :
  idxType) : _unknown[51] "inline" "method" "primary method"
  {
    (198502 return(198501 call dsiAccess i))
  }
  where {
    (198497 call shouldReturnRvalueByValue eltType)
  } function ArrayViewReindexArr[199326](?).dsiAccess[198516](arg _mt[199390]:_MT[238], arg this[199388]:ArrayViewReindexArr[199326](?), arg i[198512] ... :
  idxType) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (198526 return(198525 call dsiAccess i))
  }
  where {
    (198521 call shouldReturnRvalueByConstRef eltType)
  } function ArrayViewReindexArr[199326](?).dsiAccess[198536](arg _mt[199394]:_MT[238], arg this[199392]:ArrayViewReindexArr[199326](?), arg i[198534]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    if(198577 call _cond_test(198540 call shouldUseIndexCache))
    {
      { scopeless
        const dataIdx[198548] "const"(198547 call(198542 call . indexCache c"getDataIndex") i)
        (198551 'end of statement')
      }
      (198560 return(198559 call(198554 call . indexCache c"getDataElem") dataIdx))
    }
    {
      (198574 return(198573 call(198563 call . arr c"dsiAccess")(198571 call chpl_reindexConvertIdx i privDom downdom)))
    }
  } function ArrayViewReindexArr[199326](?).dsiAccess[198588](arg _mt[199398]:_MT[238], arg this[199396]:ArrayViewReindexArr[199326](?), arg i[198586]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    if(198633 call _cond_test(198596 call shouldUseIndexCache))
    {
      { scopeless
        const dataIdx[198604] "const"(198603 call(198598 call . indexCache c"getDataIndex") i)
        (198607 'end of statement')
      }
      (198616 return(198615 call(198610 call . indexCache c"getDataElem") dataIdx))
    }
    {
      (198630 return(198629 call(198619 call . arr c"dsiAccess")(198627 call chpl_reindexConvertIdx i privDom downdom)))
    }
  }
  where {
    (198593 call shouldReturnRvalueByValue eltType)
  } function ArrayViewReindexArr[199326](?).dsiAccess[198645](arg _mt[199402]:_MT[238], arg this[199400]:ArrayViewReindexArr[199326](?), arg i[198643]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    if(198690 call _cond_test(198653 call shouldUseIndexCache))
    {
      { scopeless
        const dataIdx[198661] "const"(198660 call(198655 call . indexCache c"getDataIndex") i)
        (198664 'end of statement')
      }
      (198673 return(198672 call(198667 call . indexCache c"getDataElem") dataIdx))
    }
    {
      (198687 return(198686 call(198676 call . arr c"dsiAccess")(198684 call chpl_reindexConvertIdx i privDom downdom)))
    }
  }
  where {
    (198650 call shouldReturnRvalueByConstRef eltType)
  } function ArrayViewReindexArr[199326](?).dsiLocalAccess[198702](arg _mt[199406]:_MT[238], arg this[199404]:ArrayViewReindexArr[199326](?), arg i[198700]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (198716 return(198715 call(198705 call . arr c"dsiLocalAccess")(198713 call chpl_reindexConvertIdx i privDom downdom)))
    }
  } function ArrayViewReindexArr[199326](?).dsiLocalAccess[198725](arg _mt[199410]:_MT[238], arg this[199408]:ArrayViewReindexArr[199326](?), arg i[198723]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (198743 return(198742 call(198732 call . arr c"dsiLocalAccess")(198740 call chpl_reindexConvertIdx i privDom downdom)))
    }
  }
  where {
    (198730 call shouldReturnRvalueByValue eltType)
  } function ArrayViewReindexArr[199326](?).dsiLocalAccess[198753](arg _mt[199414]:_MT[238], arg this[199412]:ArrayViewReindexArr[199326](?), arg i[198751]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (198771 return(198770 call(198760 call . arr c"dsiLocalAccess")(198768 call chpl_reindexConvertIdx i privDom downdom)))
    }
  }
  where {
    (198758 call shouldReturnRvalueByConstRef eltType)
  } function ArrayViewReindexArr[199326](?).dsiBoundsCheck[198781](arg _mt[199418]:_MT[238], arg this[199416]:ArrayViewReindexArr[199326](?), arg i[198779]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (198790 return(198789 call(198784 call . privDom c"dsiMember") i))
  } function ArrayViewReindexArr[199326](?).dsiHasSingleLocalSubdomain[198797](arg _mt[199422]:_MT[238], arg this[199420]:ArrayViewReindexArr[199326](?)) param : _unknown[51] "method" "primary method"
  {
    { scopeless
      (198805 return(198804 call(198800 call . privDom c"dsiHasSingleLocalSubdomain")))
    }
  } function ArrayViewReindexArr[199326](?).dsiLocalSubdomain[198816](arg _mt[199426]:_MT[238], arg this[199424]:ArrayViewReindexArr[199326](?), arg loc[198813] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    (198825 return(198824 call(198819 call . privDom c"dsiLocalSubdomain") loc))
  } function ArrayViewReindexArr[199326](?).dsiSupportsPrivatization[198832](arg _mt[199430]:_MT[238], arg this[199428]:ArrayViewReindexArr[199326](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (198840 return(198839 call(198835 call . _ArrInstance c"dsiSupportsPrivatization")))
    }
  } function ArrayViewReindexArr[199326](?).dsiGetPrivatizeData[198847](arg _mt[199434]:_MT[238], arg this[199432]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method"
  {
    (198856 return(198854 call _build_tuple _DomPid privDom _ArrPid _ArrInstance))
  } function ArrayViewReindexArr[199326](?).dsiPrivatize[198865](arg _mt[199438]:_MT[238], arg this[199436]:ArrayViewReindexArr[199326](?), arg privatizeData[198863]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (198898 return(198869 'new'(_chpl_manager = unmanaged[220](?))(198897 call ArrayViewReindexArr(eltType =(198872 call . this c"eltType"))(_DomPid =(198880 call privatizeData 0))(dom =(198885 call privatizeData 1))(_ArrPid =(198890 call privatizeData 2))(_ArrInstance =(198895 call privatizeData 3)))))
  } function ArrayViewReindexArr[199326](?).shouldUseIndexCache[198905](arg _mt[199442]:_MT[238], arg this[199440]:ArrayViewReindexArr[199326](?)) param : _unknown[51] "method" "primary method"
  {
    (198911 return(198910 call chpl__isDROrDRView _ArrInstance))
  } function ArrayViewReindexArr[199326](?).buildIndexCache[198918](arg _mt[199446]:_MT[238], arg this[199444]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method"
  {
    if(199014 call _cond_test(198922 call shouldUseIndexCache))
    {
      if(199005 call _cond_test(198926 call chpl__isArrayView _ArrInstance))
      {
        if(198985 call _cond_test(198941 call &&(198932 call(198928 call . _ArrInstance c"isSliceArrayView"))(198939 call !(198938 call(198934 call . _ArrInstance c"_containsRCRE")))))
        {
          (198969 return(198968 call(198963 call .(198962 call(198954 call .(198953 call(198949 call .(198948 call(198944 call . _ArrInstance c"_getActualArray")) c"dsiGetRAD")) c"toSlice")(198958 call . _ArrInstance c"dom")) c"toReindex") dom))
        }
        {
          (198982 return(198981 call(198976 call .(198973 call . _ArrInstance c"indexCache") c"toReindex") dom))
        }
      }
      {
        (199002 return(199001 call(198996 call .(198995 call(198991 call . _ArrInstance c"dsiGetRAD")) c"toReindex") dom))
      }
    }
    {
      (199011 return 0)
    }
  } function ArrayViewReindexArr[199326](?).privDom[199023](arg _mt[199450]:_MT[238], arg this[199448]:ArrayViewReindexArr[199326](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(199042 call _cond_test(199028 call _isPrivatized dom))
    {
      (199035 return(199034 call chpl_getPrivatizedCopy(199031 'typeof' dom) _DomPid))
    }
    {
      (199039 return dom)
    }
  } function ArrayViewReindexArr[199326](?).arr[199051](arg _mt[199454]:_MT[238], arg this[199452]:ArrayViewReindexArr[199326](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(199070 call _cond_test(199056 call _isPrivatized _ArrInstance))
    {
      (199063 return(199062 call chpl_getPrivatizedCopy(199059 'typeof' _ArrInstance) _ArrPid))
    }
    {
      (199067 return _ArrInstance)
    }
  } function ArrayViewReindexArr[199326](?).dsiGetBaseDom[199079](arg _mt[199458]:_MT[238], arg this[199456]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (199082 return privDom)
  } function ArrayViewReindexArr[199326](?)._getActualArray[199089](arg _mt[199462]:_MT[238], arg this[199460]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method"
  {
    if(199108 call _cond_test(199094 call chpl__isArrayView arr))
    {
      (199101 return(199100 call(199096 call . arr c"_getActualArray")))
    }
    {
      (199105 return arr)
    }
  } function ArrayViewReindexArr[199326](?)._containsRCRE[199117](arg _mt[199466]:_MT[238], arg this[199464]:ArrayViewReindexArr[199326](?)) param : _unknown[51] "method" "primary method"
  {
    if(199152 call _cond_test(199122 call chpl__isArrayView arr))
    {
      (199145 return(199143 call ||(199135 call ||(199128 call(199124 call . arr c"isRankChangeArrayView"))(199134 call(199130 call . arr c"isReindexArrayView")))(199142 call(199138 call . arr c"_containsRCRE"))))
    }
    {
      (199149 return 0)
    }
  } function ArrayViewReindexArr[199326](?)._getRCREView[199161](arg _mt[199470]:_MT[238], arg this[199468]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method"
  {
    (199164 return this)
  } function ArrayViewReindexArr[199326](?).dsiElementInitializationComplete[199171](arg _mt[199474]:_MT[238], arg this[199472]:ArrayViewReindexArr[199326](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
  } function ArrayViewReindexArr[199326](?).dsiDestroyArr[199182](arg _mt[199478]:_MT[238], arg this[199476]:ArrayViewReindexArr[199326](?), arg deinitElts[199179] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(199195 call _cond_test ownsArrInstance)
    {
      (199192 call _delete_arr _ArrInstance(199191 call _isPrivatized _ArrInstance))
    }
  } function ArrayViewReindexArr[199326](?).doiCanBulkTransferRankChange[199204](arg _mt[199482]:_MT[238], arg this[199480]:ArrayViewReindexArr[199326](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (199212 return(199211 call(199207 call . arr c"doiCanBulkTransferRankChange")))
    }
  } function ArrayViewReindexArr[199326](?).doiBulkTransferFromKnown[199221](arg _mt[199486]:_MT[238], arg this[199484]:ArrayViewReindexArr[199326](?), arg destDom[199219]:_any[178](?), arg srcClass[199223]:_any[178](?), arg srcDom[199225]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const shifted[199251] "const"(199250 call chpl_reindexConvertDomMaybeSlice(199234 call(199230 call . destDom c"dims"))(199237 call . privDom c"updom")(199247 call .(199244 call .(199241 call . this c"dom") c"dist") c"downdomInst"))
      (199254 'end of statement')
    }
    (199266 return(199265 call chpl__bulkTransferArray(199258 call . this c"arr") shifted srcClass srcDom))
  }
  { scopeless type
    bool[10]
  } function ArrayViewReindexArr[199326](?).doiBulkTransferToKnown[199275](arg _mt[199490]:_MT[238], arg this[199488]:ArrayViewReindexArr[199326](?), arg srcDom[199273]:_any[178](?), arg destClass[199277]:_any[178](?), arg destDom[199279]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const shifted[199305] "const"(199304 call chpl_reindexConvertDomMaybeSlice(199288 call(199284 call . srcDom c"dims"))(199291 call . privDom c"updom")(199301 call .(199298 call .(199295 call . this c"dom") c"dist") c"downdomInst"))
      (199308 'end of statement')
    }
    (199320 return(199319 call chpl__bulkTransferArray destClass destDom(199315 call . this c"arr") shifted))
  }
  { scopeless type
    bool[10]
  } AbsBaseArr forwarding ( )
  function chpl_reindexConvertIdxDim[199497](arg i[199495]:_any[178](?), arg updom[199499]:_any[178](?), arg downdom[199501]:_any[178](?), arg dim[199504] :
  int[13]) : _unknown[51] "inline"
  {
    (199532 return(199531 call(199514 call .(199513 call(199508 call . downdom c"dsiDim") dim) c"orderToIndex")(199529 call(199524 call .(199523 call(199518 call . updom c"dsiDim") dim) c"indexOrder") i)))
  }
  function chpl_reindexConvertIdx[199543](arg i[199540] :
  integral, arg updom[199545]:_any[178](?), arg downdom[199547]:_any[178](?)) : _unknown[51] "inline"
  {
    (199565 call compilerAssert(199555 call ==(199551 call . downdom c"rank") 1)(199563 call _cast string[26](199559 call . downdom c"rank")))
    (199575 return(199574 call chpl_reindexConvertIdxDim i updom downdom 0))
  }
  function chpl_reindexConvertIdx[199583](arg i[199581]:_any[178](?), arg updom[199585]:_any[178](?), arg downdom[199587]:_any[178](?)) : _unknown[51] "inline"
  {
    { scopeless
      unknown ind[199599](199597 call *(199590 call . downdom c"rank")(199594 call . downdom c"idxType"))
      (199602 'end of statement')
    }
    {
      unknown d[199632] 0
      unknown tmp[199633] "maybe param" "temp"
      (199645 'move' tmp[199633](199643 call chpl_compute_low_param_loop_bound 0(199610 call -(199606 call . downdom c"rank") 1)))
      unknown tmp[199634] "maybe param" "temp"
      (199658 'move' tmp[199634](199656 call chpl_compute_high_param_loop_bound 0(199650 call -(199652 call . downdom c"rank") 1)))
      unknown tmp[199635] "maybe param" "temp"
      (199661 'move' tmp[199635] 1)
      ParamForLoop[199663]
      { d[199632] tmp[199633] tmp[199634] tmp[199635]
        {
          (199628 call =(199617 call ind d)(199627 call chpl_reindexConvertIdxDim(199622 call i d) updom downdom d))
        }
      }
      label _unused_continueLabel[199637]
      label _breakLabel[199636]
    }
    (199673 return ind)
  }
  function chpl_reindexConvertDom[199681](arg dims[199679]:_any[178](?), arg updom[199683]:_any[178](?), arg downdom[199685]:_any[178](?)) : _unknown[51] "inline"
  {
    if(199740 call _cond_test(199695 call !=(199688 call . updom c"rank")(199692 call . dims c"size")))
    {
      (199737 call compilerError(199734 call +(199725 call +(199722 call + "Called chpl_reindexConvertDom with incorrect rank. Got "(199720 call _cast string[26](199716 call . dims c"size"))) ", expecting ")(199732 call _cast string[26](199728 call . updom c"rank"))))
    }
    { scopeless
      unknown ranges[199752](199751 'typeof'(199750 call(199746 call . downdom c"dsiDims")))
      (199755 'end of statement')
    }
    { scopeless
      unknown actualLow[199756](199767 call *(199760 call . downdom c"rank")(199764 call . downdom c"idxType"))
      unknown actualHigh[199769](199773 'typeof' actualLow)
      (199774 'end of statement')
    }
    {
      unknown d[199876] 0
      unknown tmp[199877] "maybe param" "temp"
      (199889 'move' tmp[199877](199887 call chpl_compute_low_param_loop_bound 0(199781 call -(199777 call . dims c"size") 1)))
      unknown tmp[199878] "maybe param" "temp"
      (199902 'move' tmp[199878](199900 call chpl_compute_high_param_loop_bound 0(199894 call -(199896 call . dims c"size") 1)))
      unknown tmp[199879] "maybe param" "temp"
      (199905 'move' tmp[199879] 1)
      ParamForLoop[199907]
      { d[199876] tmp[199877] tmp[199878] tmp[199879]
        {
          if(199871 call _cond_test(199793 call ==(199789 call .(199788 call dims d) c"size") 0))
          {
            (199809 call =(199798 call actualLow d)(199806 call .(199805 call(199800 call . downdom c"dsiDim") d) c"low"))
            (199827 call =(199816 call actualHigh d)(199824 call .(199823 call(199818 call . downdom c"dsiDim") d) c"high"))
          }
          {
            (199847 call =(199833 call actualLow d)(199846 call chpl_reindexConvertIdxDim(199839 call .(199838 call dims d) c"first") updom downdom d))
            (199868 call =(199854 call actualHigh d)(199867 call chpl_reindexConvertIdxDim(199860 call .(199859 call dims d) c"last") updom downdom d))
          }
        }
      }
      label _unused_continueLabel[199881]
      label _breakLabel[199880]
    }
    {
      unknown d[199953] 0
      unknown tmp[199954] "maybe param" "temp"
      (199966 'move' tmp[199954](199964 call chpl_compute_low_param_loop_bound 0(199922 call -(199918 call . updom c"rank") 1)))
      unknown tmp[199955] "maybe param" "temp"
      (199979 'move' tmp[199955](199977 call chpl_compute_high_param_loop_bound 0(199971 call -(199973 call . updom c"rank") 1)))
      unknown tmp[199956] "maybe param" "temp"
      (199982 'move' tmp[199956] 1)
      ParamForLoop[199984]
      { d[199953] tmp[199954] tmp[199955] tmp[199956]
        {
          (199949 call =(199929 call ranges d)(199948 call(199936 call(199931 call . downdom c"dsiDim") d)(199945 call chpl_build_bounded_range(199940 call actualLow d)(199944 call actualHigh d))))
        }
      }
      label _unused_continueLabel[199958]
      label _breakLabel[199957]
    }
    (199998 return(199996 call chpl__buildDomainExpr(199994 'expand_tuple' ranges)))
  }
  function chpl_reindexConvertDomMaybeSlice[200006](arg dims[200004]:_any[178](?), arg updom[200008]:_any[178](?), arg downdom[200010]:_any[178](?)) : _unknown[51] "inline"
  {
    if(200067 call _cond_test(200020 call !=(200013 call . updom c"rank")(200017 call . dims c"size")))
    {
      (200064 call compilerError(200061 call +(200052 call +(200049 call + "Called chpl_reindexConvertDomMaybeSlice with incorrect rank. Got "(200047 call _cast string[26](200043 call . dims c"size"))) ", expecting ")(200059 call _cast string[26](200055 call . updom c"rank"))))
    }
    { scopeless
      unknown ranges[200099](200097 call *(200073 call . downdom c"rank")(200096 call range(200078 call . downdom c"idxType")(stridable =(200093 call ||(200083 call . downdom c"stridable")(200090 call .(200089 call dims 0) c"stridable")))))
      (200102 'end of statement')
    }
    { scopeless
      unknown actualLow[200103](200114 call *(200107 call . downdom c"rank")(200111 call . downdom c"idxType"))
      unknown actualHigh[200116](200120 'typeof' actualLow)
      (200121 'end of statement')
    }
    {
      unknown d[200223] 0
      unknown tmp[200224] "maybe param" "temp"
      (200236 'move' tmp[200224](200234 call chpl_compute_low_param_loop_bound 0(200128 call -(200124 call . dims c"size") 1)))
      unknown tmp[200225] "maybe param" "temp"
      (200249 'move' tmp[200225](200247 call chpl_compute_high_param_loop_bound 0(200241 call -(200243 call . dims c"size") 1)))
      unknown tmp[200226] "maybe param" "temp"
      (200252 'move' tmp[200226] 1)
      ParamForLoop[200254]
      { d[200223] tmp[200224] tmp[200225] tmp[200226]
        {
          if(200218 call _cond_test(200140 call ==(200136 call .(200135 call dims d) c"size") 0))
          {
            (200156 call =(200145 call actualLow d)(200153 call .(200152 call(200147 call . downdom c"dsiDim") d) c"low"))
            (200174 call =(200163 call actualHigh d)(200171 call .(200170 call(200165 call . downdom c"dsiDim") d) c"high"))
          }
          {
            (200194 call =(200180 call actualLow d)(200193 call chpl_reindexConvertIdxDim(200186 call .(200185 call dims d) c"first") updom downdom d))
            (200215 call =(200201 call actualHigh d)(200214 call chpl_reindexConvertIdxDim(200207 call .(200206 call dims d) c"last") updom downdom d))
          }
        }
      }
      label _unused_continueLabel[200228]
      label _breakLabel[200227]
    }
    {
      unknown d[200393] 0
      unknown tmp[200394] "maybe param" "temp"
      (200406 'move' tmp[200394](200404 call chpl_compute_low_param_loop_bound 0(200269 call -(200265 call . updom c"rank") 1)))
      unknown tmp[200395] "maybe param" "temp"
      (200419 'move' tmp[200395](200417 call chpl_compute_high_param_loop_bound 0(200411 call -(200413 call . updom c"rank") 1)))
      unknown tmp[200396] "maybe param" "temp"
      (200422 'move' tmp[200396] 1)
      ParamForLoop[200424]
      { d[200393] tmp[200394] tmp[200395] tmp[200396]
        {
          if(200388 call _cond_test(200290 call ||(200280 call .(200279 call(200274 call . downdom c"dsiDim") d) c"stridable")(200287 call .(200286 call dims d) c"stridable")))
          {
            { scopeless
              const relStride[200327] "const"(200326 call max 1(200324 call *(200312 call /(200299 call .(200298 call dims d) c"stride")(200309 call .(200308 call(200303 call . updom c"dsiDim") d) c"stride"))(200321 call .(200320 call(200315 call . downdom c"dsiDim") d) c"stride")))
              (200330 'end of statement')
            }
            (200358 call =(200335 call ranges d)(200357 call(200342 call(200337 call . downdom c"dsiDim") d)(200354 call chpl_by(200351 call chpl_build_bounded_range(200346 call actualLow d)(200350 call actualHigh d)) relStride)))
          }
          {
            (200384 call =(200364 call ranges d)(200383 call(200371 call(200366 call . downdom c"dsiDim") d)(200380 call chpl_build_bounded_range(200375 call actualLow d)(200379 call actualHigh d))))
          }
        }
      }
      label _unused_continueLabel[200398]
      label _breakLabel[200397]
    }
    (200438 return(200436 call chpl__buildDomainExpr(200434 'expand_tuple' ranges)))
  }
}