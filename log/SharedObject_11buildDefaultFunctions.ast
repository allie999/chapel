AST dump for SharedObject after pass buildDefaultFunctions.
Module use list: ChapelError Atomics ChapelBase OwnedObject HaltWrappers 

{
  function chpl__init_SharedObject[415965]() : void[4] "insert line file info" "module init"
  {
    (505597 return _void[55])
  }
  function ReferenceCount[41754].init[41690](arg _mt[41758]:_MT[238], arg this[41756]:ReferenceCount[41754]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[454302] "temporary of super field" "temp"
    (454310 'move' super_tmp[454302](454303 '.v' this[41756] c"super"))
    (454306 call init _mt[243] super_tmp[454302])
    (474154 'end of statement')
    unknown tmp[454273] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491590] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[604391] "expr temp" "maybe param" "maybe type" "temp"
      (604394 'move' call_tmp[604391](454275 '.v' this[41756] c"super"))
      (491594 'move' call_type_tmp[491590](454278 'typeof' call_tmp[604391]))
    }
    (454279 'move' tmp[454273] call_type_tmp[491590])
    unknown call_tmp[604396] "maybe param" "maybe type" "temp"
    (604399 'move' call_tmp[604396](454284 'cast' tmp[454273] this[41756]))
    unknown chpl__thisAsParent[454281] "dead at end of block" "insert auto destroy" "temp"
    (540592 'init var' chpl__thisAsParent[454281] call_tmp[604396] tmp[454273])
    (454287 'setcid' chpl__thisAsParent[454281])
    (474155 'end of statement')
    unknown tmp[454289] "temp"
    unknown call_tmp[604401] "expr temp" "maybe param" "maybe type" "temp"
    (604404 'move' call_tmp[604401](454292 call chpl__atomicType int(64)[13]))
    (454294 'default init var' tmp[454289] call_tmp[604401])
    (454296 '.=' this[41756] c"count" tmp[454289])
    (474156 'end of statement')
    (454301 'setcid' this[41756])
    (474157 'end of statement')
    unknown call_tmp[604408] "expr temp" "maybe param" "maybe type" "temp"
    (604411 'move' call_tmp[604408](357004 call count _mt[243] this[41756]))
    (41708 call(41703 call (partial) write _mt[243] call_tmp[604408]) 1)
    (505372 return _void[55])
  }
  function ReferenceCount[41754].retain[41714](arg _mt[41762]:_MT[238], arg this[41760]:ReferenceCount[41754]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[604417] "expr temp" "maybe param" "maybe type" "temp"
    (604420 'move' call_tmp[604417](357009 call count _mt[243] this[41760]))
    (41722 call(41717 call (partial) add _mt[243] call_tmp[604417]) 1)
    (505374 return _void[55])
  }
  function ReferenceCount[41754].release[41729](arg _mt[41766]:_MT[238], arg this[41764]:ReferenceCount[41754]) : _unknown[51] "method" "primary method"
  {
    unknown ret[505378] "RVV" "temp"
    unknown call_tmp[604426] "expr temp" "maybe param" "maybe type" "temp"
    (604429 'move' call_tmp[604426](357014 call count _mt[243] this[41764]))
    unknown call_tmp[604433] "maybe param" "maybe type" "temp"
    (604436 'move' call_tmp[604433](41739 call(41734 call (partial) fetchSub _mt[243] call_tmp[604426]) 1))
    unknown oldValue[41740] "dead at end of block" "insert auto destroy"
    (540594 'init var' oldValue[41740] call_tmp[604433])
    (41743 'end of statement')
    unknown call_tmp[604438] "expr temp" "maybe param" "maybe type" "temp"
    (604441 'move' call_tmp[604438](41747 call - oldValue[41740] 1))
    (505383 'move' ret[505378](505382 'deref' call_tmp[604438]))
    gotoReturn _end_release[505376] _end_release[505376]
    (474160 'end of statement' oldValue[41740])
    label _end_release[505376]
    (505380 return ret[505378])
  }
  function ReferenceCount[41754].super[759219](arg _mt[759221]:_MT[238], arg this[759223]:ReferenceCount[41754]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759233] "RVV" "temp"
    unknown call_tmp[759240] "expr temp" "maybe param" "maybe type" "temp"
    (759243 'move' call_tmp[759240](759227 '.v' this[759223] c"super"))
    (759238 'move' ret[759233](759237 'deref' call_tmp[759240]))
    (759235 return ret[759233])
  }
  function ReferenceCount[41754].count[759245](arg _mt[759247]:_MT[238], arg this[759249]:ReferenceCount[41754]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759259] "RVV" "temp"
    unknown call_tmp[759266] "expr temp" "maybe param" "maybe type" "temp"
    (759269 'move' call_tmp[759266](759253 '.' this[759249] c"count"))
    (759264 'move' ret[759259](759263 'addr of' call_tmp[759266]))
    (759261 return ret[759259])
  }
  function ReferenceCount[41754].deinit[759271](arg _mt[759273]:_MT[238], arg this[759275]:ReferenceCount[41754]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (759283 return _void[55])
  }
  function ReferenceCount[41754].writeThis[759285](arg _mt[759289]:_MT[238], arg this[759287]:ReferenceCount[41754], arg f[759288]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (759294 call writeThisDefaultImpl f[759288] this[759287])
    (759299 return _void[55])
  }
  function ReferenceCount[41754].readThis[759301](arg _mt[759305]:_MT[238], arg this[759303]:ReferenceCount[41754], arg f[759304]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (759309 call readThisDefaultImpl f[759304] this[759303])
    (759315 return _void[55])
  }
  type ReferenceCount[41754] val super[355644]:object[22] "super class" unknown count[41684](41682 call chpl__atomicType int(64)[13])
  type unmanaged ReferenceCount?[415415]
  type ReferenceCount?[415412](?)
  type ReferenceCount[370642](?)
  function _shared[32](?).chpl_forwarding_expr2[41784](arg _mt[42959]:_MT[238], arg this[42957]:_shared[32](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[505389] "RVV" "temp"
    (505393 'move' ret[505389](41783 call(370638 call (partial) borrow _mt[243] this[42957])))
    (505391 return ret[505389])
  }
  function _shared[32](?).init[41801](arg _mt[42963]:_MT[238], ref arg this[42961]:_shared[32](?), arg chpl_t[41799]:_any[178](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[604445] "expr temp" "maybe param" "maybe type" "temp"
    (604448 'move' call_tmp[604445](41806 call isClass chpl_t[41799]))
    unknown call_tmp[604450] "expr temp" "maybe param" "maybe type" "temp"
    (604453 'move' call_tmp[604450](41807 call ! call_tmp[604445]))
    unknown call_tmp[604455] "expr temp" "maybe param" "maybe type" "temp"
    (604458 'move' call_tmp[604455](41830 call _cond_test call_tmp[604450]))
    if call_tmp[604455]
    {
      (41828 call compilerError "shared only works with classes")
    }
    unknown tmp[454313] "temp" "type variable"
    (454315 'move' tmp[454313](41843 call _to_borrowed chpl_t[41799]))
    (454317 'init field' this[42961] c"chpl_t" tmp[454313])
    (474163 'end of statement')
    unknown call_tmp[604460] "expr temp" "maybe param" "maybe type" "temp"
    (604463 'move' call_tmp[604460](454331 '.v' this[42961] c"chpl_t"))
    unknown call_tmp[604465] "maybe param" "maybe type" "temp"
    (604468 'move' call_tmp[604465](454323 'to nilable class' call_tmp[604460]))
    unknown tmp[454321] "temp"
    (454325 'init var' tmp[454321] nil[44] call_tmp[604465])
    (454327 'init field' this[42961] c"chpl_p" tmp[454321])
    (474164 'end of statement')
    unknown tmp[454334] "temp"
    (454337 'init var' tmp[454334] nil[44] unmanaged ReferenceCount?[415415])
    (454339 'init field' this[42961] c"chpl_pn" tmp[454334])
    (474165 'end of statement')
    (505395 return _void[55])
  }
  function _shared[32](?).init[41873](arg _mt[42967]:_MT[238], ref arg this[42965]:_shared[32](?), arg p[41870]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (41894 call compilerError "cannot initialize shared from a borrow")
    (474166 'end of statement')
    unknown call_tmp[604472] "expr temp" "maybe param" "maybe type" "temp"
    (604475 'move' call_tmp[604472](41904 call _to_unmanaged p[41870]))
    (41906 call(41898 call (partial) init _mt[243] this[42965]) call_tmp[604472])
    (505397 return _void[55])
  }
  function _shared[32](?).init[41916](arg _mt[42971]:_MT[238], ref arg this[42969]:_shared[32](?), arg p[41913]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454343] "temp" "type variable"
    unknown call_tmp[604477] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604480 'move' call_tmp[604477](41924 'typeof' p[41913]))
    (454345 'move' tmp[454343](41926 call _to_borrowed call_tmp[604477]))
    (454347 'init field' this[42969] c"chpl_t" tmp[454343])
    (474168 'end of statement')
    unknown rc[41935] "dead at end of block" "insert auto destroy"
    (540596 'init var' rc[41935] nil[44] unmanaged ReferenceCount?[415415])
    (41938 'end of statement')
    unknown call_tmp[604482] "expr temp" "maybe param" "maybe type" "temp"
    (604485 'move' call_tmp[604482](41941 call != p[41913] nil[44]))
    unknown call_tmp[604487] "expr temp" "maybe param" "maybe type" "temp"
    (604490 'move' call_tmp[604487](41953 call _cond_test call_tmp[604482]))
    if call_tmp[604487]
    {
      unknown call_tmp[604492] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604495 'move' call_tmp[604492](747766 'new' ReferenceCount[370642](?)(_chpl_manager = unmanaged[220](?))))
      (41950 call = rc[41935] call_tmp[604492])
      (474169 'end of statement' rc[41935])
    }
    unknown call_tmp[604497] "maybe param" "maybe type" "temp"
    (604500 'move' call_tmp[604497](41965 call _to_borrowed p[41913]))
    unknown call_tmp[604502] "expr temp" "maybe param" "maybe type" "temp"
    (604505 'move' call_tmp[604502](454361 '.v' this[42969] c"chpl_t"))
    unknown call_tmp[604507] "maybe param" "maybe type" "temp"
    (604510 'move' call_tmp[604507](454353 'to nilable class' call_tmp[604502]))
    unknown tmp[454351] "temp"
    (454355 'init var' tmp[454351] call_tmp[604497] call_tmp[604507])
    (454357 'init field' this[42969] c"chpl_p" tmp[454351])
    (474171 'end of statement')
    unknown tmp[454364] "temp"
    (454367 'init var' tmp[454364] rc[41935] unmanaged ReferenceCount?[415415])
    (454369 'init field' this[42969] c"chpl_pn" tmp[454364])
    (474172 'end of statement' rc[41935])
    (505399 return _void[55])
  }
  function _shared[32](?).init[41993](arg _mt[42975]:_MT[238], ref arg this[42973]:_shared[32](?), arg p[41990]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (42024 call compilerError "shared only works with classes")
    (474174 'end of statement')
    unknown tmp[454379] "temp" "type variable"
    (454381 'move' tmp[454379](454373 'typeof' p[41990]))
    (454383 'init field' this[42973] c"chpl_t" tmp[454379])
    (474175 'end of statement')
    unknown call_tmp[604512] "expr temp" "maybe param" "maybe type" "temp"
    (604515 'move' call_tmp[604512](454397 '.v' this[42973] c"chpl_t"))
    unknown call_tmp[604517] "maybe param" "maybe type" "temp"
    (604520 'move' call_tmp[604517](454389 'to nilable class' call_tmp[604512]))
    unknown tmp[454387] "temp"
    (454391 'init var' tmp[454387] p[41990] call_tmp[604517])
    (454393 'init field' this[42973] c"chpl_p" tmp[454387])
    (474176 'end of statement')
    val tmp[454401]:unmanaged ReferenceCount?[415415] "temp"
    (454404 'default init var' tmp[454401] unmanaged ReferenceCount?[415415])
    (454406 '.=' this[42973] c"chpl_pn" tmp[454401])
    (474177 'end of statement')
    (505401 return _void[55])
  }
  where {
    unknown tmp[418265] "maybe param" "temp"
    unknown tmp[418286] "maybe param" "temp"
    unknown call_tmp[604522] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604525 'move' call_tmp[604522](454375 'typeof' p[41990]))
    unknown call_tmp[604527] "expr temp" "maybe param" "maybe type" "temp"
    (604530 'move' call_tmp[604527](41998 call isClass call_tmp[604522]))
    (418297 'move' tmp[418286](42000 call == call_tmp[604527] 0))
    unknown call_tmp[604532] "expr temp" "maybe param" "maybe type" "temp"
    (604535 'move' call_tmp[604532](418299 call _cond_invalid tmp[418286]))
    if call_tmp[604532]
    {
      (418302 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554074] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554075] "maybe param" "temp"
    unknown call_tmp[604537] "expr temp" "maybe param" "maybe type" "temp"
    (604540 'move' call_tmp[604537](418287 call isTrue tmp[418286]))
    (554080 'move' tmp[554075](554078 call _cond_test call_tmp[604537]))
    if tmp[554075]
    {
      unknown tmp[554082] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604542] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604545 'move' call_tmp[604542](454377 'typeof' p[41990]))
      unknown call_tmp[604547] "expr temp" "maybe param" "maybe type" "temp"
      (604550 'move' call_tmp[604547](354238 'is_subtype' _shared[32](?) call_tmp[604542]))
      unknown call_tmp[604552] "expr temp" "maybe param" "maybe type" "temp"
      (604555 'move' call_tmp[604552](42008 call == call_tmp[604547] 0))
      (554084 'move' tmp[554082](418290 call isTrue call_tmp[604552]))
      (554089 'move' tmp[554074](554086 '_paramFoldLogical' tmp[554075] tmp[554082]))
    }
    {
      (554094 'move' tmp[554074](554091 '_paramFoldLogical' tmp[554075] 0))
    }
    (418276 'move' tmp[418265] tmp[554074])
    unknown call_tmp[604557] "expr temp" "maybe param" "maybe type" "temp"
    (604560 'move' call_tmp[604557](418278 call _cond_invalid tmp[418265]))
    if call_tmp[604557]
    {
      (418281 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554101] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554102] "maybe param" "temp"
    unknown call_tmp[604562] "expr temp" "maybe param" "maybe type" "temp"
    (604565 'move' call_tmp[604562](418266 call isTrue tmp[418265]))
    (554107 'move' tmp[554102](554105 call _cond_test call_tmp[604562]))
    if tmp[554102]
    {
      unknown tmp[554109] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604567] "expr temp" "maybe param" "maybe type" "temp"
      (604570 'move' call_tmp[604567](42015 call isIterator p[41990]))
      unknown call_tmp[604572] "expr temp" "maybe param" "maybe type" "temp"
      (604575 'move' call_tmp[604572](42017 call == call_tmp[604567] 0))
      (554111 'move' tmp[554109](418269 call isTrue call_tmp[604572]))
      (554116 'move' tmp[554101](554113 '_paramFoldLogical' tmp[554102] tmp[554109]))
    }
    {
      (554121 'move' tmp[554101](554118 '_paramFoldLogical' tmp[554102] 0))
    }
    (748197 call chpl_statementLevelSymbol tmp[554101])
  }
  function _shared[32](?).init[42052](arg _mt[42979]:_MT[238], ref arg this[42977]:_shared[32](?), in arg take[42049]:_owned[30](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[604579] "maybe param" "maybe type" "temp"
    (604582 'move' call_tmp[604579](42059 call(42055 call (partial) release _mt[243] take[42049])))
    unknown p[42060] "dead at end of block" "insert auto destroy"
    (540598 'init var' p[42060] call_tmp[604579])
    (42063 'end of statement')
    unknown tmp[454410] "temp" "type variable"
    unknown tmp[554128] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554129] "maybe param" "temp"
    unknown call_tmp[604584] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604587 'move' call_tmp[604584](42070 'typeof' this[42977]))
    unknown call_tmp[604591] "expr temp" "maybe param" "maybe type" "temp"
    (604594 'move' call_tmp[604591](42071 call chpl_t _mt[243] call_tmp[604584]))
    unknown call_tmp[604596] "expr temp" "maybe param" "maybe type" "temp"
    (604599 'move' call_tmp[604596](42075 call == call_tmp[604591] ?[260]))
    (554134 'move' tmp[554129](554132 call _cond_test call_tmp[604596]))
    if tmp[554129]
    {
      unknown tmp[554136] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604601] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604604 'move' call_tmp[604601](42079 'typeof' p[42060]))
      (554138 'move' tmp[554136](42081 call _to_borrowed call_tmp[604601]))
      (554143 'move' tmp[554128](554140 '_paramFoldLogical' tmp[554129] tmp[554136]))
    }
    {
      unknown tmp[554145] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604606] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604609 'move' call_tmp[604606](42083 'typeof' this[42977]))
      (554147 'move' tmp[554145](42084 call chpl_t _mt[243] call_tmp[604606]))
      (554152 'move' tmp[554128](554149 '_paramFoldLogical' tmp[554129] tmp[554145]))
    }
    (454412 'move' tmp[454410] tmp[554128])
    (454414 'init field' this[42977] c"chpl_t" tmp[454410])
    (474178 'end of statement')
    unknown call_tmp[604613] "expr temp" "maybe param" "maybe type" "temp"
    (604616 'move' call_tmp[604613](42096 call isClass p[42060]))
    unknown call_tmp[604618] "expr temp" "maybe param" "maybe type" "temp"
    (604621 'move' call_tmp[604618](42097 call ! call_tmp[604613]))
    unknown call_tmp[604623] "expr temp" "maybe param" "maybe type" "temp"
    (604626 'move' call_tmp[604623](42104 call _cond_test call_tmp[604618]))
    if call_tmp[604623]
    {
      (42102 call compilerError "shared only works with classes")
    }
    unknown rc[42113] "dead at end of block" "insert auto destroy"
    (540600 'init var' rc[42113] nil[44] unmanaged ReferenceCount?[415415])
    (42116 'end of statement')
    unknown call_tmp[604628] "expr temp" "maybe param" "maybe type" "temp"
    (604631 'move' call_tmp[604628](42119 call != p[42060] nil[44]))
    unknown call_tmp[604633] "expr temp" "maybe param" "maybe type" "temp"
    (604636 'move' call_tmp[604633](42131 call _cond_test call_tmp[604628]))
    if call_tmp[604633]
    {
      unknown call_tmp[604638] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604641 'move' call_tmp[604638](747767 'new' ReferenceCount[370642](?)(_chpl_manager = unmanaged[220](?))))
      (42128 call = rc[42113] call_tmp[604638])
      (474180 'end of statement' rc[42113])
    }
    unknown call_tmp[604643] "expr temp" "maybe param" "maybe type" "temp"
    (604646 'move' call_tmp[604643](454428 '.v' this[42977] c"chpl_t"))
    unknown call_tmp[604648] "maybe param" "maybe type" "temp"
    (604651 'move' call_tmp[604648](454420 'to nilable class' call_tmp[604643]))
    unknown tmp[454418] "temp"
    (454422 'init var' tmp[454418] p[42060] call_tmp[604648])
    (454424 'init field' this[42977] c"chpl_p" tmp[454418])
    (474182 'end of statement' p[42060])
    unknown tmp[454431] "temp"
    (454434 'init var' tmp[454431] rc[42113] unmanaged ReferenceCount?[415415])
    (454436 'init field' this[42977] c"chpl_pn" tmp[454431])
    (474184 'end of statement' rc[42113])
    (505403 return _void[55])
  }
  function _shared[32](?).init[42167](arg _mt[42983]:_MT[238], ref arg this[42981]:_shared[32](?), arg _private[42164]:bool[10], arg t[42169]:_any[178](?), ref arg src[42172]:_shared[32](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454440] "temp" "type variable"
    (454442 'move' tmp[454440] t[42169])
    (454444 'init field' this[42981] c"chpl_t" tmp[454440])
    (474186 'end of statement')
    unknown call_tmp[604653] "expr temp" "maybe param" "maybe type" "temp"
    (604656 'move' call_tmp[604653](42196 call _to_unmanaged t[42169]))
    unknown call_tmp[604658] "expr temp" "maybe param" "maybe type" "temp"
    (604661 'move' call_tmp[604658](42198 call _to_nilable call_tmp[604653]))
    unknown call_tmp[604665] "expr temp" "maybe param" "maybe type" "temp"
    (604668 'move' call_tmp[604665](42189 call chpl_p _mt[243] src[42172]))
    unknown call_tmp[604670] "maybe param" "maybe type" "temp"
    (604673 'move' call_tmp[604670](42199 call _cast call_tmp[604658] call_tmp[604665]))
    unknown call_tmp[604675] "expr temp" "maybe param" "maybe type" "temp"
    (604678 'move' call_tmp[604675](454458 '.v' this[42981] c"chpl_t"))
    unknown call_tmp[604680] "maybe param" "maybe type" "temp"
    (604683 'move' call_tmp[604680](454450 'to nilable class' call_tmp[604675]))
    unknown tmp[454448] "temp"
    (454452 'init var' tmp[454448] call_tmp[604670] call_tmp[604680])
    (454454 'init field' this[42981] c"chpl_p" tmp[454448])
    (474187 'end of statement')
    unknown call_tmp[604687] "maybe param" "maybe type" "temp"
    (604690 'move' call_tmp[604687](42209 call chpl_pn _mt[243] src[42172]))
    unknown tmp[454461] "temp"
    (454464 'init var' tmp[454461] call_tmp[604687] unmanaged ReferenceCount?[415415])
    (454466 'init field' this[42981] c"chpl_pn" tmp[454461])
    (474188 'end of statement')
    unknown call_tmp[604694] "expr temp" "maybe param" "maybe type" "temp"
    (604697 'move' call_tmp[604694](42216 call chpl_p _mt[243] src[42172]))
    (42220 call = call_tmp[604694] nil[44])
    (474189 'end of statement')
    unknown call_tmp[604701] "expr temp" "maybe param" "maybe type" "temp"
    (604704 'move' call_tmp[604701](42224 call chpl_pn _mt[243] src[42172]))
    (42228 call = call_tmp[604701] nil[44])
    (505405 return _void[55])
  }
  function _shared[32](?).init[42239](arg _mt[42987]:_MT[238], ref arg this[42985]:_shared[32](?), arg _private[42236]:bool[10], arg t[42241]:_any[178](?), arg p[42243]:_any[178](?), arg pn[42245]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[604706] "expr temp" "maybe param" "maybe type" "temp"
    (604709 'move' call_tmp[604706](42252 call _to_unmanaged t[42241]))
    unknown call_tmp[604711] "expr temp" "maybe param" "maybe type" "temp"
    (604714 'move' call_tmp[604711](42254 call _to_nilable call_tmp[604706]))
    unknown call_tmp[604716] "maybe param" "maybe type" "temp"
    (604719 'move' call_tmp[604716](42255 call _cast call_tmp[604711] p[42243]))
    unknown ptr[42257] "dead at end of block" "insert auto destroy"
    (540602 'init var' ptr[42257] call_tmp[604716])
    (42260 'end of statement')
    unknown count[42263] "dead at end of block" "insert auto destroy"
    (540604 'init var' count[42263] pn[42245])
    (42266 'end of statement')
    unknown call_tmp[604721] "expr temp" "maybe param" "maybe type" "temp"
    (604724 'move' call_tmp[604721](42269 call != ptr[42257] nil[44]))
    unknown call_tmp[604726] "expr temp" "maybe param" "maybe type" "temp"
    (604729 'move' call_tmp[604726](42287 call _cond_test call_tmp[604721]))
    if call_tmp[604726]
    {
      unknown call_tmp[604731] "expr temp" "maybe param" "maybe type" "temp"
      (604734 'move' call_tmp[604731](42272 call postfix! count[42263]))
      (42278 call(42274 call (partial) retain _mt[243] call_tmp[604731]))
      (474191 'end of statement' count[42263])
    }
    {
      (42283 call = count[42263] nil[44])
      (474193 'end of statement' count[42263])
    }
    unknown tmp[454470] "temp" "type variable"
    (454472 'move' tmp[454470] t[42241])
    (454474 'init field' this[42985] c"chpl_t" tmp[454470])
    (474195 'end of statement')
    unknown call_tmp[604738] "expr temp" "maybe param" "maybe type" "temp"
    (604741 'move' call_tmp[604738](454488 '.v' this[42985] c"chpl_t"))
    unknown call_tmp[604743] "maybe param" "maybe type" "temp"
    (604746 'move' call_tmp[604743](454480 'to nilable class' call_tmp[604738]))
    unknown tmp[454478] "temp"
    (454482 'init var' tmp[454478] ptr[42257] call_tmp[604743])
    (454484 'init field' this[42985] c"chpl_p" tmp[454478])
    (474196 'end of statement' ptr[42257])
    unknown tmp[454491] "temp"
    (454494 'init var' tmp[454491] count[42263] unmanaged ReferenceCount?[415415])
    (454496 'init field' this[42985] c"chpl_pn" tmp[454491])
    (474198 'end of statement' count[42263])
    (505407 return _void[55])
  }
  function _shared[32](?).init=[42323](arg _mt[42991]:_MT[238], ref arg this[42989]:_shared[32](?), in arg take[42320]:_owned[30](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[418307] "maybe param" "temp"
    unknown call_tmp[604748] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604751 'move' call_tmp[604748](42327 'typeof' this[42989]))
    (418318 'move' tmp[418307](42329 call isNonNilableClass call_tmp[604748]))
    unknown call_tmp[604753] "expr temp" "maybe param" "maybe type" "temp"
    (604756 'move' call_tmp[604753](418320 call _cond_invalid tmp[418307]))
    if call_tmp[604753]
    {
      (418323 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554159] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554160] "maybe param" "temp"
    unknown call_tmp[604758] "expr temp" "maybe param" "maybe type" "temp"
    (604761 'move' call_tmp[604758](418308 call isTrue tmp[418307]))
    (554165 'move' tmp[554160](554163 call _cond_test call_tmp[604758]))
    if tmp[554160]
    {
      unknown tmp[554167] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604763] "expr temp" "maybe param" "maybe type" "temp"
      (604766 'move' call_tmp[604763](42333 call isNilableClass take[42320]))
      (554169 'move' tmp[554167](418311 call isTrue call_tmp[604763]))
      (554174 'move' tmp[554159](554171 '_paramFoldLogical' tmp[554160] tmp[554167]))
    }
    {
      (554179 'move' tmp[554159](554176 '_paramFoldLogical' tmp[554160] 0))
    }
    unknown call_tmp[604768] "expr temp" "maybe param" "maybe type" "temp"
    (604771 'move' call_tmp[604768](42359 call _cond_test tmp[554159]))
    if call_tmp[604768]
    {
      (42357 call compilerError "cannot create a non-nilable shared variable from a nilable class instance")
    }
    (42371 call(42366 call (partial) init _mt[243] this[42989]) take[42320])
    (505409 return _void[55])
  }
  function _shared[32](?).init=[42381](arg _mt[42995]:_MT[238], ref arg this[42993]:_shared[32](?), const  ref arg src[42378]:_shared[32](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[418328] "maybe param" "temp"
    unknown call_tmp[604775] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604778 'move' call_tmp[604775](42385 'typeof' this[42993]))
    (418339 'move' tmp[418328](42387 call isNonNilableClass call_tmp[604775]))
    unknown call_tmp[604780] "expr temp" "maybe param" "maybe type" "temp"
    (604783 'move' call_tmp[604780](418341 call _cond_invalid tmp[418328]))
    if call_tmp[604780]
    {
      (418344 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554186] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554187] "maybe param" "temp"
    unknown call_tmp[604785] "expr temp" "maybe param" "maybe type" "temp"
    (604788 'move' call_tmp[604785](418329 call isTrue tmp[418328]))
    (554192 'move' tmp[554187](554190 call _cond_test call_tmp[604785]))
    if tmp[554187]
    {
      unknown tmp[554194] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604790] "expr temp" "maybe param" "maybe type" "temp"
      (604793 'move' call_tmp[604790](42391 call isNilableClass src[42378]))
      (554196 'move' tmp[554194](418332 call isTrue call_tmp[604790]))
      (554201 'move' tmp[554186](554198 '_paramFoldLogical' tmp[554187] tmp[554194]))
    }
    {
      (554206 'move' tmp[554186](554203 '_paramFoldLogical' tmp[554187] 0))
    }
    unknown call_tmp[604795] "expr temp" "maybe param" "maybe type" "temp"
    (604798 'move' call_tmp[604795](42399 call _cond_test tmp[554186]))
    if call_tmp[604795]
    {
      (42397 call compilerError "cannot create a non-nilable shared variable from a nilable class instance")
    }
    unknown call_tmp[604800] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604803 'move' call_tmp[604800](42412 'typeof' this[42993]))
    unknown call_tmp[604807] "expr temp" "maybe param" "maybe type" "temp"
    (604810 'move' call_tmp[604807](42413 call chpl_t _mt[243] call_tmp[604800]))
    unknown call_tmp[604814] "expr temp" "maybe param" "maybe type" "temp"
    (604817 'move' call_tmp[604814](42407 call chpl_t _mt[243] src[42378]))
    unknown call_tmp[604819] "expr temp" "maybe param" "maybe type" "temp"
    (604822 'move' call_tmp[604819](354239 'is_coercible' call_tmp[604807] call_tmp[604814]))
    unknown call_tmp[604824] "expr temp" "maybe param" "maybe type" "temp"
    (604827 'move' call_tmp[604824](42418 call == call_tmp[604819] 0))
    unknown call_tmp[604829] "expr temp" "maybe param" "maybe type" "temp"
    (604832 'move' call_tmp[604829](42437 call _cond_test call_tmp[604824]))
    if call_tmp[604829]
    {
      unknown call_tmp[604834] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604837 'move' call_tmp[604834](42424 'typeof' src[42378]))
      unknown call_tmp[604839] "expr temp" "maybe param" "maybe type" "temp"
      (604842 'move' call_tmp[604839](42426 call _cast string[26] call_tmp[604834]))
      unknown call_tmp[604844] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (604847 'move' call_tmp[604844](42430 'typeof' this[42993]))
      unknown call_tmp[604849] "expr temp" "maybe param" "maybe type" "temp"
      (604852 'move' call_tmp[604849](42432 call _cast string[26] call_tmp[604844]))
      (42435 call compilerError "cannot coerce '" call_tmp[604839] "' to '" call_tmp[604849] "' in initialization")
    }
    unknown tmp[454500] "temp" "type variable"
    unknown call_tmp[604854] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604857 'move' call_tmp[604854](42447 'typeof' this[42993]))
    (454502 'move' tmp[454500](42448 call chpl_t _mt[243] call_tmp[604854]))
    (454504 'init field' this[42993] c"chpl_t" tmp[454500])
    (474206 'end of statement')
    unknown call_tmp[604863] "maybe param" "maybe type" "temp"
    (604866 'move' call_tmp[604863](42459 call chpl_p _mt[243] src[42378]))
    unknown call_tmp[604868] "expr temp" "maybe param" "maybe type" "temp"
    (604871 'move' call_tmp[604868](454518 '.v' this[42993] c"chpl_t"))
    unknown call_tmp[604873] "maybe param" "maybe type" "temp"
    (604876 'move' call_tmp[604873](454510 'to nilable class' call_tmp[604868]))
    unknown tmp[454508] "temp"
    (454512 'init var' tmp[454508] call_tmp[604863] call_tmp[604873])
    (454514 'init field' this[42993] c"chpl_p" tmp[454508])
    (474207 'end of statement')
    unknown call_tmp[604880] "maybe param" "maybe type" "temp"
    (604883 'move' call_tmp[604880](42470 call chpl_pn _mt[243] src[42378]))
    unknown tmp[454521] "temp"
    (454524 'init var' tmp[454521] call_tmp[604880] unmanaged ReferenceCount?[415415])
    (454526 'init field' this[42993] c"chpl_pn" tmp[454521])
    (474208 'end of statement')
    unknown call_tmp[604887] "expr temp" "maybe param" "maybe type" "temp"
    (604890 'move' call_tmp[604887](42484 call chpl_pn _mt[243] this[42993]))
    unknown call_tmp[604892] "expr temp" "maybe param" "maybe type" "temp"
    (604895 'move' call_tmp[604892](42488 call != call_tmp[604887] nil[44]))
    unknown call_tmp[604897] "expr temp" "maybe param" "maybe type" "temp"
    (604900 'move' call_tmp[604897](42502 call _cond_test call_tmp[604892]))
    if call_tmp[604897]
    {
      unknown call_tmp[604904] "expr temp" "maybe param" "maybe type" "temp"
      (604907 'move' call_tmp[604904](42491 call chpl_pn _mt[243] this[42993]))
      unknown call_tmp[604909] "expr temp" "maybe param" "maybe type" "temp"
      (604912 'move' call_tmp[604909](42494 call postfix! call_tmp[604904]))
      (42500 call(42496 call (partial) retain _mt[243] call_tmp[604909]))
    }
    (505411 return _void[55])
  }
  function _shared[32](?).init=[42515](arg _mt[42999]:_MT[238], ref arg this[42997]:_shared[32](?), arg src[42512]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (42536 call compilerError "cannot create a shared variable from a borrowed class instance")
    (474210 'end of statement')
    unknown tmp[454530] "temp" "type variable"
    (454532 'move' tmp[454530] int(64)[13])
    (454534 'init field' this[42997] c"chpl_t" tmp[454530])
    (474211 'end of statement')
    unknown tmp[454539] "temp"
    unknown call_tmp[604916] "expr temp" "maybe param" "maybe type" "temp"
    (604919 'move' call_tmp[604916](454549 '.v' this[42997] c"chpl_t"))
    unknown call_tmp[604921] "expr temp" "maybe param" "maybe type" "temp"
    (604924 'move' call_tmp[604921](454541 'to nilable class' call_tmp[604916]))
    (454543 'default init var' tmp[454539] call_tmp[604921])
    (454545 '.=' this[42997] c"chpl_p" tmp[454539])
    (474212 'end of statement')
    val tmp[454552]:unmanaged ReferenceCount?[415415] "temp"
    (454555 'default init var' tmp[454552] unmanaged ReferenceCount?[415415])
    (454557 '.=' this[42997] c"chpl_pn" tmp[454552])
    (474213 'end of statement')
    (505413 return _void[55])
  }
  function _shared[32](?).init=[42555](arg _mt[43003]:_MT[238], ref arg this[43001]:_shared[32](?), arg src[42552]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (42576 call compilerError "cannot create a shared variable from an unmanaged class instance")
    (474214 'end of statement')
    unknown tmp[454561] "temp" "type variable"
    (454563 'move' tmp[454561] int(64)[13])
    (454565 'init field' this[43001] c"chpl_t" tmp[454561])
    (474215 'end of statement')
    unknown tmp[454570] "temp"
    unknown call_tmp[604926] "expr temp" "maybe param" "maybe type" "temp"
    (604929 'move' call_tmp[604926](454580 '.v' this[43001] c"chpl_t"))
    unknown call_tmp[604931] "expr temp" "maybe param" "maybe type" "temp"
    (604934 'move' call_tmp[604931](454572 'to nilable class' call_tmp[604926]))
    (454574 'default init var' tmp[454570] call_tmp[604931])
    (454576 '.=' this[43001] c"chpl_p" tmp[454570])
    (474216 'end of statement')
    val tmp[454583]:unmanaged ReferenceCount?[415415] "temp"
    (454586 'default init var' tmp[454583] unmanaged ReferenceCount?[415415])
    (454588 '.=' this[43001] c"chpl_pn" tmp[454583])
    (474217 'end of statement')
    (505415 return _void[55])
  }
  function _shared[32](?).init=[42595](arg _mt[43007]:_MT[238], ref arg this[43005]:_shared[32](?), arg src[42592]:_nilType[42]) : void[4] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[604938] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (604941 'move' call_tmp[604938](42602 'typeof' this[43005]))
    unknown call_tmp[604945] "expr temp" "maybe param" "maybe type" "temp"
    (604948 'move' call_tmp[604945](42603 call chpl_t _mt[243] call_tmp[604938]))
    (42607 call(42598 call (partial) init _mt[243] this[43005]) call_tmp[604945])
    (474218 'end of statement')
    unknown call_tmp[604952] "expr temp" "maybe param" "maybe type" "temp"
    (604955 'move' call_tmp[604952](370699 call chpl_t _mt[243] this[43005]))
    unknown call_tmp[604957] "expr temp" "maybe param" "maybe type" "temp"
    (604960 'move' call_tmp[604957](42613 call isNonNilableClass call_tmp[604952]))
    unknown call_tmp[604962] "expr temp" "maybe param" "maybe type" "temp"
    (604965 'move' call_tmp[604962](42635 call _cond_test call_tmp[604957]))
    if call_tmp[604962]
    {
      (42633 call compilerError "Assigning non-nilable shared to nil")
    }
    (505417 return _void[55])
  }
  function _shared[32](?).doClear[42644](arg _mt[43011]:_MT[238], ref arg this[43009]:_shared[32](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[418349] "maybe param" "temp"
    unknown call_tmp[604969] "expr temp" "maybe param" "maybe type" "temp"
    (604972 'move' call_tmp[604969](370704 call chpl_p _mt[243] this[43009]))
    (418360 'move' tmp[418349](42648 call != call_tmp[604969] nil[44]))
    unknown call_tmp[604974] "expr temp" "maybe param" "maybe type" "temp"
    (604977 'move' call_tmp[604974](418362 call _cond_invalid tmp[418349]))
    if call_tmp[604974]
    {
      (418365 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554213] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554214] "maybe param" "temp"
    unknown call_tmp[604979] "expr temp" "maybe param" "maybe type" "temp"
    (604982 'move' call_tmp[604979](418350 call isTrue tmp[418349]))
    (554219 'move' tmp[554214](554217 call _cond_test call_tmp[604979]))
    if tmp[554214]
    {
      unknown tmp[554221] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604986] "expr temp" "maybe param" "maybe type" "temp"
      (604989 'move' call_tmp[604986](370709 call chpl_pn _mt[243] this[43009]))
      unknown call_tmp[604991] "expr temp" "maybe param" "maybe type" "temp"
      (604994 'move' call_tmp[604991](42652 call != call_tmp[604986] nil[44]))
      (554223 'move' tmp[554221](418353 call isTrue call_tmp[604991]))
      (554228 'move' tmp[554213](554225 '_paramFoldLogical' tmp[554214] tmp[554221]))
    }
    {
      (554233 'move' tmp[554213](554230 '_paramFoldLogical' tmp[554214] 0))
    }
    unknown call_tmp[604996] "expr temp" "maybe param" "maybe type" "temp"
    (604999 'move' call_tmp[604996](42691 call _cond_test tmp[554213]))
    if call_tmp[604996]
    {
      unknown call_tmp[605003] "expr temp" "maybe param" "maybe type" "temp"
      (605006 'move' call_tmp[605003](370714 call chpl_pn _mt[243] this[43009]))
      unknown call_tmp[605008] "expr temp" "maybe param" "maybe type" "temp"
      (605011 'move' call_tmp[605008](42657 call postfix! call_tmp[605003]))
      unknown call_tmp[605015] "maybe param" "maybe type" "temp"
      (605018 'move' call_tmp[605015](42663 call(42659 call (partial) release _mt[243] call_tmp[605008])))
      unknown count[42664] "dead at end of block" "insert auto destroy"
      (540606 'init var' count[42664] call_tmp[605015])
      (42667 'end of statement')
      unknown call_tmp[605020] "expr temp" "maybe param" "maybe type" "temp"
      (605023 'move' call_tmp[605020](42671 call == count[42664] 0))
      unknown call_tmp[605025] "expr temp" "maybe param" "maybe type" "temp"
      (605028 'move' call_tmp[605025](42687 call _cond_test call_tmp[605020]))
      if call_tmp[605025]
      {
        unknown call_tmp[605032] "expr temp" "maybe param" "maybe type" "temp"
        (605035 'move' call_tmp[605032](370720 call chpl_p _mt[243] this[43009]))
        unknown call_tmp[605037] "expr temp" "maybe param" "maybe type" "temp"
        (605040 'move' call_tmp[605037](42676 call _to_unmanaged call_tmp[605032]))
        (42678 call chpl__delete call_tmp[605037])
        (474221 'end of statement')
        unknown call_tmp[605044] "expr temp" "maybe param" "maybe type" "temp"
        (605047 'move' call_tmp[605044](370725 call chpl_pn _mt[243] this[43009]))
        (42684 call chpl__delete call_tmp[605044])
      }
    }
    unknown call_tmp[605051] "expr temp" "maybe param" "maybe type" "temp"
    (605054 'move' call_tmp[605051](370730 call chpl_p _mt[243] this[43009]))
    (42698 call = call_tmp[605051] nil[44])
    (474223 'end of statement')
    unknown call_tmp[605058] "expr temp" "maybe param" "maybe type" "temp"
    (605061 'move' call_tmp[605058](370735 call chpl_pn _mt[243] this[43009]))
    (42703 call = call_tmp[605058] nil[44])
    (505419 return _void[55])
  }
  function _shared[32](?).create[42712](arg _mt[43015]:_MT[238], arg this[43013]:_shared[32](?), arg source[42710]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[605063] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605066 'move' call_tmp[605063](42734 'typeof' source[42710]))
    unknown call_tmp[605068] "expr temp" "maybe param" "maybe type" "temp"
    (605071 'move' call_tmp[605068](42736 call _cast string[26] call_tmp[605063]))
    (42738 call compilerError "cannot create a 'shared' from " call_tmp[605068])
    (505421 return _void[55])
  }
  function _shared[32](?).create[42749](arg _mt[43019]:_MT[238], arg this[43017]:_shared[32](?), in arg take[42746]:_owned[30](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505425] "RVV" "temp"
    unknown result[42753] "dead at end of block" "insert auto destroy"
    (540608 'init var' result[42753] take[42746] _shared[32](?))
    (42756 'end of statement')
    (505430 'move' ret[505425](505429 'deref' result[42753]))
    gotoReturn _end_create[505423] _end_create[505423]
    (474226 'end of statement' result[42753])
    label _end_create[505423]
    (505427 return ret[505425])
  }
  function _shared[32](?).create[42769](arg _mt[43023]:_MT[238], arg this[43021]:_shared[32](?), in arg src[42766]:_shared[32](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505436] "RVV" "temp"
    (505441 'move' ret[505436](505440 'deref' src[42766]))
    (505438 return ret[505436])
  }
  function _shared[32](?).create[42783](arg _mt[43027]:_MT[238], arg this[43025]:_shared[32](?), arg p[42780]:unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown ret[505445] "RVV" "temp"
    unknown result[42790] "dead at end of block" "insert auto destroy"
    unknown call_tmp[605073] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605076 'move' call_tmp[605073](42786 'typeof' p[42780]))
    unknown call_tmp[605078] "expr temp" "maybe param" "maybe type" "temp"
    (605081 'move' call_tmp[605078](42788 call _cast _shared[32](?) call_tmp[605073]))
    (540610 'default init var' result[42790] call_tmp[605078])
    (42793 'end of statement')
    (42801 call(42796 call (partial) retain _mt[243] result[42790]) p[42780])
    (474229 'end of statement' result[42790])
    (505450 'move' ret[505445](505449 'deref' result[42790]))
    gotoReturn _end_create[505443] _end_create[505443]
    (474231 'end of statement' result[42790])
    label _end_create[505443]
    (505447 return ret[505445])
  }
  function _shared[32](?).deinit[42810](arg _mt[43031]:_MT[238], arg this[43029]:_shared[32](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[605087] "expr temp" "maybe param" "maybe type" "temp"
    (605090 'move' call_tmp[605087](370751 call chpl_p _mt[243] this[43029]))
    unknown call_tmp[605092] "expr temp" "maybe param" "maybe type" "temp"
    (605095 'move' call_tmp[605092](42815 call isClass call_tmp[605087]))
    unknown call_tmp[605097] "expr temp" "maybe param" "maybe type" "temp"
    (605100 'move' call_tmp[605097](42821 call _cond_test call_tmp[605092]))
    if call_tmp[605097]
    {
      (42818 call(370755 call (partial) doClear _mt[243] this[43029]))
    }
    (505454 return _void[55])
  }
  function _shared[32](?).retain[42834](arg _mt[43035]:_MT[238], ref arg this[43033]:_shared[32](?), arg newPtr[42831]:unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[605106] "expr temp" "maybe param" "maybe type" "temp"
    (605109 'move' call_tmp[605106](370761 call chpl_t _mt[243] this[43033]))
    unknown call_tmp[605111] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605114 'move' call_tmp[605111](42838 'typeof' newPtr[42831]))
    unknown call_tmp[605116] "expr temp" "maybe param" "maybe type" "temp"
    (605119 'move' call_tmp[605116](354240 'is_coercible' call_tmp[605106] call_tmp[605111]))
    unknown call_tmp[605121] "expr temp" "maybe param" "maybe type" "temp"
    (605124 'move' call_tmp[605121](42842 call ! call_tmp[605116]))
    unknown call_tmp[605126] "expr temp" "maybe param" "maybe type" "temp"
    (605129 'move' call_tmp[605126](42874 call _cond_test call_tmp[605121]))
    if call_tmp[605126]
    {
      unknown call_tmp[605131] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (605134 'move' call_tmp[605131](42847 'typeof' newPtr[42831]))
      unknown call_tmp[605136] "expr temp" "maybe param" "maybe type" "temp"
      (605139 'move' call_tmp[605136](42849 call _cast string[26] call_tmp[605131]))
      unknown call_tmp[605141] "expr temp" "maybe param" "maybe type" "temp"
      (605144 'move' call_tmp[605141](42851 call + "cannot retain '" call_tmp[605136]))
      unknown call_tmp[605146] "expr temp" "maybe param" "maybe type" "temp"
      (605149 'move' call_tmp[605146](42854 call + call_tmp[605141] "' "))
      unknown call_tmp[605151] "expr temp" "maybe param" "maybe type" "temp"
      (605154 'move' call_tmp[605151](42857 call + call_tmp[605146] "(expected '"))
      unknown call_tmp[605158] "expr temp" "maybe param" "maybe type" "temp"
      (605161 'move' call_tmp[605158](370767 call chpl_t _mt[243] this[43033]))
      unknown call_tmp[605163] "expr temp" "maybe param" "maybe type" "temp"
      (605166 'move' call_tmp[605163](42862 call _to_unmanaged call_tmp[605158]))
      unknown call_tmp[605168] "expr temp" "maybe param" "maybe type" "temp"
      (605171 'move' call_tmp[605168](42864 call _cast string[26] call_tmp[605163]))
      unknown call_tmp[605173] "expr temp" "maybe param" "maybe type" "temp"
      (605176 'move' call_tmp[605173](42866 call + call_tmp[605151] call_tmp[605168]))
      unknown call_tmp[605178] "expr temp" "maybe param" "maybe type" "temp"
      (605181 'move' call_tmp[605178](42869 call + call_tmp[605173] "')"))
      (42872 call compilerError call_tmp[605178])
    }
    (42882 call(370771 call (partial) doClear _mt[243] this[43033]))
    (474235 'end of statement')
    unknown call_tmp[605187] "expr temp" "maybe param" "maybe type" "temp"
    (605190 'move' call_tmp[605187](42885 call chpl_p _mt[243] this[43033]))
    (42889 call = call_tmp[605187] newPtr[42831])
    (474236 'end of statement')
    unknown call_tmp[605192] "expr temp" "maybe param" "maybe type" "temp"
    (605195 'move' call_tmp[605192](42894 call != newPtr[42831] nil[44]))
    unknown call_tmp[605197] "expr temp" "maybe param" "maybe type" "temp"
    (605200 'move' call_tmp[605197](42910 call _cond_test call_tmp[605192]))
    if call_tmp[605197]
    {
      unknown call_tmp[605204] "expr temp" "maybe param" "maybe type" "temp"
      (605207 'move' call_tmp[605204](42897 call chpl_pn _mt[243] this[43033]))
      unknown call_tmp[605209] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (605212 'move' call_tmp[605209](747768 'new' ReferenceCount[370642](?)(_chpl_manager = unmanaged[220](?))))
      (42906 call = call_tmp[605204] call_tmp[605209])
    }
    (505456 return _void[55])
  }
  function _shared[32](?).clear[42918](arg _mt[43039]:_MT[238], ref arg this[43037]:_shared[32](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    (42922 call(370778 call (partial) doClear _mt[243] this[43037]))
    (505458 return _void[55])
  }
  function _shared[32](?).borrow[42929](arg _mt[43043]:_MT[238], arg this[43041]:_shared[32](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    unknown ret[505462] "RVV" "temp"
    unknown call_tmp[605218] "expr temp" "maybe param" "maybe type" "temp"
    (605221 'move' call_tmp[605218](370783 call chpl_t _mt[243] this[43041]))
    unknown call_tmp[605223] "expr temp" "maybe param" "maybe type" "temp"
    (605226 'move' call_tmp[605223](42934 call _to_nilable call_tmp[605218]))
    unknown call_tmp[605230] "expr temp" "maybe param" "maybe type" "temp"
    (605233 'move' call_tmp[605230](370788 call chpl_t _mt[243] this[43041]))
    unknown call_tmp[605235] "expr temp" "maybe param" "maybe type" "temp"
    (605238 'move' call_tmp[605235](42936 call == call_tmp[605223] call_tmp[605230]))
    unknown call_tmp[605240] "expr temp" "maybe param" "maybe type" "temp"
    (605243 'move' call_tmp[605240](42948 call _cond_test call_tmp[605235]))
    if call_tmp[605240]
    {
      unknown call_tmp[605247] "expr temp" "maybe param" "maybe type" "temp"
      (605250 'move' call_tmp[605247](370793 call chpl_p _mt[243] this[43041]))
      (505467 'move' ret[505462](505466 'deref' call_tmp[605247]))
      gotoReturn _end_borrow[505460] _end_borrow[505460]
    }
    {
      unknown call_tmp[605254] "expr temp" "maybe param" "maybe type" "temp"
      (605257 'move' call_tmp[605254](370798 call chpl_p _mt[243] this[43041]))
      unknown call_tmp[605259] "expr temp" "maybe param" "maybe type" "temp"
      (605262 'move' call_tmp[605259](42943 call postfix! call_tmp[605254]))
      (505472 'move' ret[505462](505471 'deref' call_tmp[605259]))
      gotoReturn _end_borrow[505460] _end_borrow[505460]
    }
    label _end_borrow[505460]
    (505464 return ret[505462])
  }
  function _shared[32](?).chpl_t[759317](arg _mt[759319]:_MT[238], arg this[759321]:_shared[32](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[759340] "RVV" "temp" "type variable"
    unknown call_tmp[759354] "expr temp" "maybe param" "maybe type" "temp"
    (759357 'move' call_tmp[759354](759326 'is bound' this[759321] c"chpl_t"))
    if call_tmp[759354]
    {
      unknown call_tmp[759359] "expr temp" "maybe param" "maybe type" "temp"
      (759362 'move' call_tmp[759359](759325 '.v' this[759321] c"chpl_t"))
      (759345 'move' ret[759340](759344 'deref' call_tmp[759359]))
      gotoReturn _end_chpl_t[759338] _end_chpl_t[759338]
    }
    {
      (759350 'move' ret[759340](759349 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[759338] _end_chpl_t[759338]
    }
    label _end_chpl_t[759338]
    (759342 return ret[759340])
  }
  function _shared[32](?).chpl_t[759364](arg _mt[759366]:_MT[238], arg this[759368]:_shared[32](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759387] "RVV" "temp" "type variable"
    unknown call_tmp[759401] "expr temp" "maybe param" "maybe type" "temp"
    (759404 'move' call_tmp[759401](759373 'is bound' this[759368] c"chpl_t"))
    if call_tmp[759401]
    {
      unknown call_tmp[759406] "expr temp" "maybe param" "maybe type" "temp"
      (759409 'move' call_tmp[759406](759372 '.v' this[759368] c"chpl_t"))
      (759392 'move' ret[759387](759391 'deref' call_tmp[759406]))
      gotoReturn _end_chpl_t[759385] _end_chpl_t[759385]
    }
    {
      (759397 'move' ret[759387](759396 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[759385] _end_chpl_t[759385]
    }
    label _end_chpl_t[759385]
    (759389 return ret[759387])
  }
  function _shared[32](?).chpl_p[759411](arg _mt[759413]:_MT[238], ref arg this[759415]:_shared[32](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[759425] "RVV" "temp"
    unknown call_tmp[759432] "expr temp" "maybe param" "maybe type" "temp"
    (759435 'move' call_tmp[759432](759419 '.' this[759415] c"chpl_p"))
    (759430 'move' ret[759425](759429 'addr of' call_tmp[759432]))
    (759427 return ret[759425])
  }
  function _shared[32](?).chpl_pn[759437](arg _mt[759439]:_MT[238], ref arg this[759441]:_shared[32](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[759451] "RVV" "temp"
    unknown call_tmp[759458] "expr temp" "maybe param" "maybe type" "temp"
    (759461 'move' call_tmp[759458](759445 '.' this[759441] c"chpl_pn"))
    (759456 'move' ret[759451](759455 'addr of' call_tmp[759458]))
    (759453 return ret[759451])
  }
  function _shared[32](?).writeThis[759463](arg _mt[759467]:_MT[238], arg this[759465]:_shared[32](?), arg f[759466]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (759476 call(759472 call (partial) readWriteThis _mt[243] this[759465]) f[759466])
    (759479 return _void[55])
  }
  function _shared[32](?).readThis[759483](arg _mt[759487]:_MT[238], arg this[759485]:_shared[32](?), arg f[759486]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (759495 call(759491 call (partial) readWriteThis _mt[243] this[759485]) f[759486])
    (759499 return _void[55])
  }
  function chpl_fields_are_comparable[759515](arg _arg1[759517]:_shared[32](?), arg _arg2[759518]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759547]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759554] "expr temp" "maybe param" "maybe type" "temp"
    (759557 'move' call_tmp[759554](759521 call chpl_p _mt[243] _arg1[759517]))
    unknown call_tmp[759559] "expr temp" "maybe param" "maybe type" "temp"
    (759562 'move' call_tmp[759559](759525 call chpl_p _mt[243] _arg2[759518]))
    unknown call_tmp[759564] "expr temp" "maybe param" "maybe type" "temp"
    (759567 'move' call_tmp[759564](759529 'call resolves' c"==" call_tmp[759554] call_tmp[759559]))
    unknown call_tmp[759569] "expr temp" "maybe param" "maybe type" "temp"
    (759572 'move' call_tmp[759569](759531 call chpl_pn _mt[243] _arg1[759517]))
    unknown call_tmp[759574] "expr temp" "maybe param" "maybe type" "temp"
    (759577 'move' call_tmp[759574](759535 call chpl_pn _mt[243] _arg2[759518]))
    unknown call_tmp[759579] "expr temp" "maybe param" "maybe type" "temp"
    (759582 'move' call_tmp[759579](759539 'call resolves' c"==" call_tmp[759569] call_tmp[759574]))
    unknown call_tmp[759584] "expr temp" "maybe param" "maybe type" "temp"
    (759587 'move' call_tmp[759584](759541 '&' call_tmp[759564] call_tmp[759579]))
    (759552 'move' ret[759547](759551 'deref' call_tmp[759584]))
    (759549 return ret[759547])
  }
  function ==[759503](arg _arg1[759505]:_shared[32](?), arg _arg2[759506]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759631]:bool[10] "RVV" "temp"
    unknown call_tmp[759648] "expr temp" "maybe param" "maybe type" "temp"
    (759651 'move' call_tmp[759648](759595 call chpl_p _mt[243] _arg1[759505]))
    unknown call_tmp[759653] "expr temp" "maybe param" "maybe type" "temp"
    (759656 'move' call_tmp[759653](759599 call chpl_p _mt[243] _arg2[759506]))
    unknown call_tmp[759658] "expr temp" "maybe param" "maybe type" "temp"
    (759661 'move' call_tmp[759658](759603 call != call_tmp[759648] call_tmp[759653]))
    if call_tmp[759658]
    {
      (759636 'move' ret[759631](759635 'deref' 0))
      gotoReturn _end_==[759629] _end_==[759629]
    }
    unknown call_tmp[759663] "expr temp" "maybe param" "maybe type" "temp"
    (759666 'move' call_tmp[759663](759609 call chpl_pn _mt[243] _arg1[759505]))
    unknown call_tmp[759668] "expr temp" "maybe param" "maybe type" "temp"
    (759671 'move' call_tmp[759668](759613 call chpl_pn _mt[243] _arg2[759506]))
    unknown call_tmp[759673] "expr temp" "maybe param" "maybe type" "temp"
    (759676 'move' call_tmp[759673](759617 call != call_tmp[759663] call_tmp[759668]))
    if call_tmp[759673]
    {
      (759641 'move' ret[759631](759640 'deref' 0))
      gotoReturn _end_==[759629] _end_==[759629]
    }
    (759646 'move' ret[759631](759645 'deref' 1))
    label _end_==[759629]
    (759633 return ret[759631])
  }
  where {
    unknown call_tmp[759678] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759681 'move' call_tmp[759678](759509 'typeof' _arg1[759505]))
    unknown call_tmp[759683] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759686 'move' call_tmp[759683](759511 'typeof' _arg2[759506]))
    unknown call_tmp[759688] "expr temp" "maybe param" "maybe type" "temp"
    (759691 'move' call_tmp[759688](759513 call == call_tmp[759678] call_tmp[759683]))
    unknown call_tmp[759693] "expr temp" "maybe param" "maybe type" "temp"
    (759696 'move' call_tmp[759693](759589 call chpl_fields_are_comparable[759515] _arg1[759505] _arg2[759506]))
    (759593 '&' call_tmp[759688] call_tmp[759693])
  }
  function chpl_fields_are_comparable[759710](arg _arg1[759712]:_shared[32](?), arg _arg2[759713]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759742]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759749] "expr temp" "maybe param" "maybe type" "temp"
    (759752 'move' call_tmp[759749](759716 call chpl_p _mt[243] _arg1[759712]))
    unknown call_tmp[759754] "expr temp" "maybe param" "maybe type" "temp"
    (759757 'move' call_tmp[759754](759720 call chpl_p _mt[243] _arg2[759713]))
    unknown call_tmp[759759] "expr temp" "maybe param" "maybe type" "temp"
    (759762 'move' call_tmp[759759](759724 'call resolves' c"!=" call_tmp[759749] call_tmp[759754]))
    unknown call_tmp[759764] "expr temp" "maybe param" "maybe type" "temp"
    (759767 'move' call_tmp[759764](759726 call chpl_pn _mt[243] _arg1[759712]))
    unknown call_tmp[759769] "expr temp" "maybe param" "maybe type" "temp"
    (759772 'move' call_tmp[759769](759730 call chpl_pn _mt[243] _arg2[759713]))
    unknown call_tmp[759774] "expr temp" "maybe param" "maybe type" "temp"
    (759777 'move' call_tmp[759774](759734 'call resolves' c"!=" call_tmp[759764] call_tmp[759769]))
    unknown call_tmp[759779] "expr temp" "maybe param" "maybe type" "temp"
    (759782 'move' call_tmp[759779](759736 '&' call_tmp[759759] call_tmp[759774]))
    (759747 'move' ret[759742](759746 'deref' call_tmp[759779]))
    (759744 return ret[759742])
  }
  function !=[759698](arg _arg1[759700]:_shared[32](?), arg _arg2[759701]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759826]:bool[10] "RVV" "temp"
    unknown call_tmp[759843] "expr temp" "maybe param" "maybe type" "temp"
    (759846 'move' call_tmp[759843](759790 call chpl_p _mt[243] _arg1[759700]))
    unknown call_tmp[759848] "expr temp" "maybe param" "maybe type" "temp"
    (759851 'move' call_tmp[759848](759794 call chpl_p _mt[243] _arg2[759701]))
    unknown call_tmp[759853] "expr temp" "maybe param" "maybe type" "temp"
    (759856 'move' call_tmp[759853](759798 call != call_tmp[759843] call_tmp[759848]))
    if call_tmp[759853]
    {
      (759831 'move' ret[759826](759830 'deref' 1))
      gotoReturn _end_!=[759824] _end_!=[759824]
    }
    unknown call_tmp[759858] "expr temp" "maybe param" "maybe type" "temp"
    (759861 'move' call_tmp[759858](759804 call chpl_pn _mt[243] _arg1[759700]))
    unknown call_tmp[759863] "expr temp" "maybe param" "maybe type" "temp"
    (759866 'move' call_tmp[759863](759808 call chpl_pn _mt[243] _arg2[759701]))
    unknown call_tmp[759868] "expr temp" "maybe param" "maybe type" "temp"
    (759871 'move' call_tmp[759868](759812 call != call_tmp[759858] call_tmp[759863]))
    if call_tmp[759868]
    {
      (759836 'move' ret[759826](759835 'deref' 1))
      gotoReturn _end_!=[759824] _end_!=[759824]
    }
    (759841 'move' ret[759826](759840 'deref' 0))
    label _end_!=[759824]
    (759828 return ret[759826])
  }
  where {
    unknown call_tmp[759873] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759876 'move' call_tmp[759873](759704 'typeof' _arg1[759700]))
    unknown call_tmp[759878] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759881 'move' call_tmp[759878](759706 'typeof' _arg2[759701]))
    unknown call_tmp[759883] "expr temp" "maybe param" "maybe type" "temp"
    (759886 'move' call_tmp[759883](759708 call == call_tmp[759873] call_tmp[759878]))
    unknown call_tmp[759888] "expr temp" "maybe param" "maybe type" "temp"
    (759891 'move' call_tmp[759888](759784 call chpl_fields_are_comparable[759710] _arg1[759700] _arg2[759701]))
    (759788 '&' call_tmp[759883] call_tmp[759888])
  }
  function chpl_fields_are_comparable[759905](arg _arg1[759907]:_shared[32](?), arg _arg2[759908]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759937]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759944] "expr temp" "maybe param" "maybe type" "temp"
    (759947 'move' call_tmp[759944](759911 call chpl_p _mt[243] _arg1[759907]))
    unknown call_tmp[759949] "expr temp" "maybe param" "maybe type" "temp"
    (759952 'move' call_tmp[759949](759915 call chpl_p _mt[243] _arg2[759908]))
    unknown call_tmp[759954] "expr temp" "maybe param" "maybe type" "temp"
    (759957 'move' call_tmp[759954](759919 'call resolves' c"<" call_tmp[759944] call_tmp[759949]))
    unknown call_tmp[759959] "expr temp" "maybe param" "maybe type" "temp"
    (759962 'move' call_tmp[759959](759921 call chpl_pn _mt[243] _arg1[759907]))
    unknown call_tmp[759964] "expr temp" "maybe param" "maybe type" "temp"
    (759967 'move' call_tmp[759964](759925 call chpl_pn _mt[243] _arg2[759908]))
    unknown call_tmp[759969] "expr temp" "maybe param" "maybe type" "temp"
    (759972 'move' call_tmp[759969](759929 'call resolves' c"<" call_tmp[759959] call_tmp[759964]))
    unknown call_tmp[759974] "expr temp" "maybe param" "maybe type" "temp"
    (759977 'move' call_tmp[759974](759931 '&' call_tmp[759954] call_tmp[759969]))
    (759942 'move' ret[759937](759941 'deref' call_tmp[759974]))
    (759939 return ret[759937])
  }
  function <[759893](arg _arg1[759895]:_shared[32](?), arg _arg2[759896]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760051]:bool[10] "RVV" "temp"
    unknown call_tmp[760078] "expr temp" "maybe param" "maybe type" "temp"
    (760081 'move' call_tmp[760078](759985 call chpl_p _mt[243] _arg1[759895]))
    unknown call_tmp[760083] "expr temp" "maybe param" "maybe type" "temp"
    (760086 'move' call_tmp[760083](759989 call chpl_p _mt[243] _arg2[759896]))
    unknown call_tmp[760088] "expr temp" "maybe param" "maybe type" "temp"
    (760091 'move' call_tmp[760088](759993 call < call_tmp[760078] call_tmp[760083]))
    if call_tmp[760088]
    {
      (760056 'move' ret[760051](760055 'deref' 1))
      gotoReturn _end_<[760049] _end_<[760049]
    }
    unknown call_tmp[760093] "expr temp" "maybe param" "maybe type" "temp"
    (760096 'move' call_tmp[760093](759999 call chpl_p _mt[243] _arg1[759895]))
    unknown call_tmp[760098] "expr temp" "maybe param" "maybe type" "temp"
    (760101 'move' call_tmp[760098](760003 call chpl_p _mt[243] _arg2[759896]))
    unknown call_tmp[760103] "expr temp" "maybe param" "maybe type" "temp"
    (760106 'move' call_tmp[760103](760007 call > call_tmp[760093] call_tmp[760098]))
    if call_tmp[760103]
    {
      (760061 'move' ret[760051](760060 'deref' 0))
      gotoReturn _end_<[760049] _end_<[760049]
    }
    unknown call_tmp[760108] "expr temp" "maybe param" "maybe type" "temp"
    (760111 'move' call_tmp[760108](760013 call chpl_pn _mt[243] _arg1[759895]))
    unknown call_tmp[760113] "expr temp" "maybe param" "maybe type" "temp"
    (760116 'move' call_tmp[760113](760017 call chpl_pn _mt[243] _arg2[759896]))
    unknown call_tmp[760118] "expr temp" "maybe param" "maybe type" "temp"
    (760121 'move' call_tmp[760118](760021 call < call_tmp[760108] call_tmp[760113]))
    if call_tmp[760118]
    {
      (760066 'move' ret[760051](760065 'deref' 1))
      gotoReturn _end_<[760049] _end_<[760049]
    }
    unknown call_tmp[760123] "expr temp" "maybe param" "maybe type" "temp"
    (760126 'move' call_tmp[760123](760027 call chpl_pn _mt[243] _arg1[759895]))
    unknown call_tmp[760128] "expr temp" "maybe param" "maybe type" "temp"
    (760131 'move' call_tmp[760128](760031 call chpl_pn _mt[243] _arg2[759896]))
    unknown call_tmp[760133] "expr temp" "maybe param" "maybe type" "temp"
    (760136 'move' call_tmp[760133](760035 call > call_tmp[760123] call_tmp[760128]))
    if call_tmp[760133]
    {
      (760071 'move' ret[760051](760070 'deref' 0))
      gotoReturn _end_<[760049] _end_<[760049]
    }
    (760076 'move' ret[760051](760075 'deref' 0))
    label _end_<[760049]
    (760053 return ret[760051])
  }
  where {
    unknown call_tmp[760138] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760141 'move' call_tmp[760138](759899 'typeof' _arg1[759895]))
    unknown call_tmp[760143] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760146 'move' call_tmp[760143](759901 'typeof' _arg2[759896]))
    unknown call_tmp[760148] "expr temp" "maybe param" "maybe type" "temp"
    (760151 'move' call_tmp[760148](759903 call == call_tmp[760138] call_tmp[760143]))
    unknown call_tmp[760153] "expr temp" "maybe param" "maybe type" "temp"
    (760156 'move' call_tmp[760153](759979 call chpl_fields_are_comparable[759905] _arg1[759895] _arg2[759896]))
    (759983 '&' call_tmp[760148] call_tmp[760153])
  }
  function chpl_fields_are_comparable[760170](arg _arg1[760172]:_shared[32](?), arg _arg2[760173]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[760202]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[760209] "expr temp" "maybe param" "maybe type" "temp"
    (760212 'move' call_tmp[760209](760176 call chpl_p _mt[243] _arg1[760172]))
    unknown call_tmp[760214] "expr temp" "maybe param" "maybe type" "temp"
    (760217 'move' call_tmp[760214](760180 call chpl_p _mt[243] _arg2[760173]))
    unknown call_tmp[760219] "expr temp" "maybe param" "maybe type" "temp"
    (760222 'move' call_tmp[760219](760184 'call resolves' c"<=" call_tmp[760209] call_tmp[760214]))
    unknown call_tmp[760224] "expr temp" "maybe param" "maybe type" "temp"
    (760227 'move' call_tmp[760224](760186 call chpl_pn _mt[243] _arg1[760172]))
    unknown call_tmp[760229] "expr temp" "maybe param" "maybe type" "temp"
    (760232 'move' call_tmp[760229](760190 call chpl_pn _mt[243] _arg2[760173]))
    unknown call_tmp[760234] "expr temp" "maybe param" "maybe type" "temp"
    (760237 'move' call_tmp[760234](760194 'call resolves' c"<=" call_tmp[760224] call_tmp[760229]))
    unknown call_tmp[760239] "expr temp" "maybe param" "maybe type" "temp"
    (760242 'move' call_tmp[760239](760196 '&' call_tmp[760219] call_tmp[760234]))
    (760207 'move' ret[760202](760206 'deref' call_tmp[760239]))
    (760204 return ret[760202])
  }
  function <=[760158](arg _arg1[760160]:_shared[32](?), arg _arg2[760161]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760316]:bool[10] "RVV" "temp"
    unknown call_tmp[760343] "expr temp" "maybe param" "maybe type" "temp"
    (760346 'move' call_tmp[760343](760250 call chpl_p _mt[243] _arg1[760160]))
    unknown call_tmp[760348] "expr temp" "maybe param" "maybe type" "temp"
    (760351 'move' call_tmp[760348](760254 call chpl_p _mt[243] _arg2[760161]))
    unknown call_tmp[760353] "expr temp" "maybe param" "maybe type" "temp"
    (760356 'move' call_tmp[760353](760258 call < call_tmp[760343] call_tmp[760348]))
    if call_tmp[760353]
    {
      (760321 'move' ret[760316](760320 'deref' 1))
      gotoReturn _end_<=[760314] _end_<=[760314]
    }
    unknown call_tmp[760358] "expr temp" "maybe param" "maybe type" "temp"
    (760361 'move' call_tmp[760358](760264 call chpl_p _mt[243] _arg1[760160]))
    unknown call_tmp[760363] "expr temp" "maybe param" "maybe type" "temp"
    (760366 'move' call_tmp[760363](760268 call chpl_p _mt[243] _arg2[760161]))
    unknown call_tmp[760368] "expr temp" "maybe param" "maybe type" "temp"
    (760371 'move' call_tmp[760368](760272 call > call_tmp[760358] call_tmp[760363]))
    if call_tmp[760368]
    {
      (760326 'move' ret[760316](760325 'deref' 0))
      gotoReturn _end_<=[760314] _end_<=[760314]
    }
    unknown call_tmp[760373] "expr temp" "maybe param" "maybe type" "temp"
    (760376 'move' call_tmp[760373](760278 call chpl_pn _mt[243] _arg1[760160]))
    unknown call_tmp[760378] "expr temp" "maybe param" "maybe type" "temp"
    (760381 'move' call_tmp[760378](760282 call chpl_pn _mt[243] _arg2[760161]))
    unknown call_tmp[760383] "expr temp" "maybe param" "maybe type" "temp"
    (760386 'move' call_tmp[760383](760286 call < call_tmp[760373] call_tmp[760378]))
    if call_tmp[760383]
    {
      (760331 'move' ret[760316](760330 'deref' 1))
      gotoReturn _end_<=[760314] _end_<=[760314]
    }
    unknown call_tmp[760388] "expr temp" "maybe param" "maybe type" "temp"
    (760391 'move' call_tmp[760388](760292 call chpl_pn _mt[243] _arg1[760160]))
    unknown call_tmp[760393] "expr temp" "maybe param" "maybe type" "temp"
    (760396 'move' call_tmp[760393](760296 call chpl_pn _mt[243] _arg2[760161]))
    unknown call_tmp[760398] "expr temp" "maybe param" "maybe type" "temp"
    (760401 'move' call_tmp[760398](760300 call > call_tmp[760388] call_tmp[760393]))
    if call_tmp[760398]
    {
      (760336 'move' ret[760316](760335 'deref' 0))
      gotoReturn _end_<=[760314] _end_<=[760314]
    }
    (760341 'move' ret[760316](760340 'deref' 1))
    label _end_<=[760314]
    (760318 return ret[760316])
  }
  where {
    unknown call_tmp[760403] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760406 'move' call_tmp[760403](760164 'typeof' _arg1[760160]))
    unknown call_tmp[760408] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760411 'move' call_tmp[760408](760166 'typeof' _arg2[760161]))
    unknown call_tmp[760413] "expr temp" "maybe param" "maybe type" "temp"
    (760416 'move' call_tmp[760413](760168 call == call_tmp[760403] call_tmp[760408]))
    unknown call_tmp[760418] "expr temp" "maybe param" "maybe type" "temp"
    (760421 'move' call_tmp[760418](760244 call chpl_fields_are_comparable[760170] _arg1[760160] _arg2[760161]))
    (760248 '&' call_tmp[760413] call_tmp[760418])
  }
  function chpl_fields_are_comparable[760435](arg _arg1[760437]:_shared[32](?), arg _arg2[760438]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[760467]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[760474] "expr temp" "maybe param" "maybe type" "temp"
    (760477 'move' call_tmp[760474](760441 call chpl_p _mt[243] _arg1[760437]))
    unknown call_tmp[760479] "expr temp" "maybe param" "maybe type" "temp"
    (760482 'move' call_tmp[760479](760445 call chpl_p _mt[243] _arg2[760438]))
    unknown call_tmp[760484] "expr temp" "maybe param" "maybe type" "temp"
    (760487 'move' call_tmp[760484](760449 'call resolves' c">" call_tmp[760474] call_tmp[760479]))
    unknown call_tmp[760489] "expr temp" "maybe param" "maybe type" "temp"
    (760492 'move' call_tmp[760489](760451 call chpl_pn _mt[243] _arg1[760437]))
    unknown call_tmp[760494] "expr temp" "maybe param" "maybe type" "temp"
    (760497 'move' call_tmp[760494](760455 call chpl_pn _mt[243] _arg2[760438]))
    unknown call_tmp[760499] "expr temp" "maybe param" "maybe type" "temp"
    (760502 'move' call_tmp[760499](760459 'call resolves' c">" call_tmp[760489] call_tmp[760494]))
    unknown call_tmp[760504] "expr temp" "maybe param" "maybe type" "temp"
    (760507 'move' call_tmp[760504](760461 '&' call_tmp[760484] call_tmp[760499]))
    (760472 'move' ret[760467](760471 'deref' call_tmp[760504]))
    (760469 return ret[760467])
  }
  function >[760423](arg _arg1[760425]:_shared[32](?), arg _arg2[760426]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760581]:bool[10] "RVV" "temp"
    unknown call_tmp[760608] "expr temp" "maybe param" "maybe type" "temp"
    (760611 'move' call_tmp[760608](760515 call chpl_p _mt[243] _arg1[760425]))
    unknown call_tmp[760613] "expr temp" "maybe param" "maybe type" "temp"
    (760616 'move' call_tmp[760613](760519 call chpl_p _mt[243] _arg2[760426]))
    unknown call_tmp[760618] "expr temp" "maybe param" "maybe type" "temp"
    (760621 'move' call_tmp[760618](760523 call > call_tmp[760608] call_tmp[760613]))
    if call_tmp[760618]
    {
      (760586 'move' ret[760581](760585 'deref' 1))
      gotoReturn _end_>[760579] _end_>[760579]
    }
    unknown call_tmp[760623] "expr temp" "maybe param" "maybe type" "temp"
    (760626 'move' call_tmp[760623](760529 call chpl_p _mt[243] _arg1[760425]))
    unknown call_tmp[760628] "expr temp" "maybe param" "maybe type" "temp"
    (760631 'move' call_tmp[760628](760533 call chpl_p _mt[243] _arg2[760426]))
    unknown call_tmp[760633] "expr temp" "maybe param" "maybe type" "temp"
    (760636 'move' call_tmp[760633](760537 call < call_tmp[760623] call_tmp[760628]))
    if call_tmp[760633]
    {
      (760591 'move' ret[760581](760590 'deref' 0))
      gotoReturn _end_>[760579] _end_>[760579]
    }
    unknown call_tmp[760638] "expr temp" "maybe param" "maybe type" "temp"
    (760641 'move' call_tmp[760638](760543 call chpl_pn _mt[243] _arg1[760425]))
    unknown call_tmp[760643] "expr temp" "maybe param" "maybe type" "temp"
    (760646 'move' call_tmp[760643](760547 call chpl_pn _mt[243] _arg2[760426]))
    unknown call_tmp[760648] "expr temp" "maybe param" "maybe type" "temp"
    (760651 'move' call_tmp[760648](760551 call > call_tmp[760638] call_tmp[760643]))
    if call_tmp[760648]
    {
      (760596 'move' ret[760581](760595 'deref' 1))
      gotoReturn _end_>[760579] _end_>[760579]
    }
    unknown call_tmp[760653] "expr temp" "maybe param" "maybe type" "temp"
    (760656 'move' call_tmp[760653](760557 call chpl_pn _mt[243] _arg1[760425]))
    unknown call_tmp[760658] "expr temp" "maybe param" "maybe type" "temp"
    (760661 'move' call_tmp[760658](760561 call chpl_pn _mt[243] _arg2[760426]))
    unknown call_tmp[760663] "expr temp" "maybe param" "maybe type" "temp"
    (760666 'move' call_tmp[760663](760565 call < call_tmp[760653] call_tmp[760658]))
    if call_tmp[760663]
    {
      (760601 'move' ret[760581](760600 'deref' 0))
      gotoReturn _end_>[760579] _end_>[760579]
    }
    (760606 'move' ret[760581](760605 'deref' 0))
    label _end_>[760579]
    (760583 return ret[760581])
  }
  where {
    unknown call_tmp[760668] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760671 'move' call_tmp[760668](760429 'typeof' _arg1[760425]))
    unknown call_tmp[760673] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760676 'move' call_tmp[760673](760431 'typeof' _arg2[760426]))
    unknown call_tmp[760678] "expr temp" "maybe param" "maybe type" "temp"
    (760681 'move' call_tmp[760678](760433 call == call_tmp[760668] call_tmp[760673]))
    unknown call_tmp[760683] "expr temp" "maybe param" "maybe type" "temp"
    (760686 'move' call_tmp[760683](760509 call chpl_fields_are_comparable[760435] _arg1[760425] _arg2[760426]))
    (760513 '&' call_tmp[760678] call_tmp[760683])
  }
  function chpl_fields_are_comparable[760700](arg _arg1[760702]:_shared[32](?), arg _arg2[760703]:_shared[32](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[760732]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[760739] "expr temp" "maybe param" "maybe type" "temp"
    (760742 'move' call_tmp[760739](760706 call chpl_p _mt[243] _arg1[760702]))
    unknown call_tmp[760744] "expr temp" "maybe param" "maybe type" "temp"
    (760747 'move' call_tmp[760744](760710 call chpl_p _mt[243] _arg2[760703]))
    unknown call_tmp[760749] "expr temp" "maybe param" "maybe type" "temp"
    (760752 'move' call_tmp[760749](760714 'call resolves' c">=" call_tmp[760739] call_tmp[760744]))
    unknown call_tmp[760754] "expr temp" "maybe param" "maybe type" "temp"
    (760757 'move' call_tmp[760754](760716 call chpl_pn _mt[243] _arg1[760702]))
    unknown call_tmp[760759] "expr temp" "maybe param" "maybe type" "temp"
    (760762 'move' call_tmp[760759](760720 call chpl_pn _mt[243] _arg2[760703]))
    unknown call_tmp[760764] "expr temp" "maybe param" "maybe type" "temp"
    (760767 'move' call_tmp[760764](760724 'call resolves' c">=" call_tmp[760754] call_tmp[760759]))
    unknown call_tmp[760769] "expr temp" "maybe param" "maybe type" "temp"
    (760772 'move' call_tmp[760769](760726 '&' call_tmp[760749] call_tmp[760764]))
    (760737 'move' ret[760732](760736 'deref' call_tmp[760769]))
    (760734 return ret[760732])
  }
  function >=[760688](arg _arg1[760690]:_shared[32](?), arg _arg2[760691]:_shared[32](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760846]:bool[10] "RVV" "temp"
    unknown call_tmp[760873] "expr temp" "maybe param" "maybe type" "temp"
    (760876 'move' call_tmp[760873](760780 call chpl_p _mt[243] _arg1[760690]))
    unknown call_tmp[760878] "expr temp" "maybe param" "maybe type" "temp"
    (760881 'move' call_tmp[760878](760784 call chpl_p _mt[243] _arg2[760691]))
    unknown call_tmp[760883] "expr temp" "maybe param" "maybe type" "temp"
    (760886 'move' call_tmp[760883](760788 call > call_tmp[760873] call_tmp[760878]))
    if call_tmp[760883]
    {
      (760851 'move' ret[760846](760850 'deref' 1))
      gotoReturn _end_>=[760844] _end_>=[760844]
    }
    unknown call_tmp[760888] "expr temp" "maybe param" "maybe type" "temp"
    (760891 'move' call_tmp[760888](760794 call chpl_p _mt[243] _arg1[760690]))
    unknown call_tmp[760893] "expr temp" "maybe param" "maybe type" "temp"
    (760896 'move' call_tmp[760893](760798 call chpl_p _mt[243] _arg2[760691]))
    unknown call_tmp[760898] "expr temp" "maybe param" "maybe type" "temp"
    (760901 'move' call_tmp[760898](760802 call < call_tmp[760888] call_tmp[760893]))
    if call_tmp[760898]
    {
      (760856 'move' ret[760846](760855 'deref' 0))
      gotoReturn _end_>=[760844] _end_>=[760844]
    }
    unknown call_tmp[760903] "expr temp" "maybe param" "maybe type" "temp"
    (760906 'move' call_tmp[760903](760808 call chpl_pn _mt[243] _arg1[760690]))
    unknown call_tmp[760908] "expr temp" "maybe param" "maybe type" "temp"
    (760911 'move' call_tmp[760908](760812 call chpl_pn _mt[243] _arg2[760691]))
    unknown call_tmp[760913] "expr temp" "maybe param" "maybe type" "temp"
    (760916 'move' call_tmp[760913](760816 call > call_tmp[760903] call_tmp[760908]))
    if call_tmp[760913]
    {
      (760861 'move' ret[760846](760860 'deref' 1))
      gotoReturn _end_>=[760844] _end_>=[760844]
    }
    unknown call_tmp[760918] "expr temp" "maybe param" "maybe type" "temp"
    (760921 'move' call_tmp[760918](760822 call chpl_pn _mt[243] _arg1[760690]))
    unknown call_tmp[760923] "expr temp" "maybe param" "maybe type" "temp"
    (760926 'move' call_tmp[760923](760826 call chpl_pn _mt[243] _arg2[760691]))
    unknown call_tmp[760928] "expr temp" "maybe param" "maybe type" "temp"
    (760931 'move' call_tmp[760928](760830 call < call_tmp[760918] call_tmp[760923]))
    if call_tmp[760928]
    {
      (760866 'move' ret[760846](760865 'deref' 0))
      gotoReturn _end_>=[760844] _end_>=[760844]
    }
    (760871 'move' ret[760846](760870 'deref' 1))
    label _end_>=[760844]
    (760848 return ret[760846])
  }
  where {
    unknown call_tmp[760933] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760936 'move' call_tmp[760933](760694 'typeof' _arg1[760690]))
    unknown call_tmp[760938] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760941 'move' call_tmp[760938](760696 'typeof' _arg2[760691]))
    unknown call_tmp[760943] "expr temp" "maybe param" "maybe type" "temp"
    (760946 'move' call_tmp[760943](760698 call == call_tmp[760933] call_tmp[760938]))
    unknown call_tmp[760948] "expr temp" "maybe param" "maybe type" "temp"
    (760951 'move' call_tmp[760948](760774 call chpl_fields_are_comparable[760700] _arg1[760690] _arg2[760691]))
    (760778 '&' call_tmp[760943] call_tmp[760948])
  }
  function chpl__defaultHash[760953](arg r[760955]:_shared[32](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[760986] "RVV" "temp"
    unknown call_tmp[760993] "expr temp" "maybe param" "maybe type" "temp"
    (760996 'move' call_tmp[760993](760972 call chpl_pn _mt[243] r[760955]))
    unknown call_tmp[760998] "expr temp" "maybe param" "maybe type" "temp"
    (761001 'move' call_tmp[760998](760976 call chpl__defaultHash call_tmp[760993]))
    unknown call_tmp[761003] "expr temp" "maybe param" "maybe type" "temp"
    (761006 'move' call_tmp[761003](760963 call chpl_p _mt[243] r[760955]))
    unknown call_tmp[761008] "expr temp" "maybe param" "maybe type" "temp"
    (761011 'move' call_tmp[761008](760967 call chpl__defaultHash call_tmp[761003]))
    unknown call_tmp[761013] "expr temp" "maybe param" "maybe type" "temp"
    (761016 'move' call_tmp[761013](760957 call chpl_t _mt[243] r[760955]))
    unknown call_tmp[761018] "expr temp" "maybe param" "maybe type" "temp"
    (761021 'move' call_tmp[761018](760961 call chpl__defaultHash call_tmp[761013]))
    unknown call_tmp[761023] "expr temp" "maybe param" "maybe type" "temp"
    (761026 'move' call_tmp[761023](760969 call chpl__defaultHashCombine call_tmp[761008] call_tmp[761018] 2))
    unknown call_tmp[761028] "expr temp" "maybe param" "maybe type" "temp"
    (761031 'move' call_tmp[761028](760978 call chpl__defaultHashCombine call_tmp[760998] call_tmp[761023] 3))
    (760991 'move' ret[760986](760990 'deref' call_tmp[761028]))
    (760988 return ret[760986])
  }
  type _shared[32](?) unknown chpl_t[41770] "no doc" "type variable" unknown chpl_p[41777] "no doc" "owned"(41776 'to nilable class' chpl_t[41770]) val chpl_pn[41793]:unmanaged ReferenceCount?[415415] "no doc" "owned" unmanaged ReferenceCount?[415415] forwarding ( )
  type shared[415422](?)
  type shared?[415418](?)
  function =[43052](ref arg lhs[43049]:_shared[32](?), arg rhs[43055]:_shared[32](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[605266] "expr temp" "maybe param" "maybe type" "temp"
    (605269 'move' call_tmp[605266](43071 call chpl_pn _mt[243] rhs[43055]))
    unknown call_tmp[605271] "expr temp" "maybe param" "maybe type" "temp"
    (605274 'move' call_tmp[605271](43075 call != call_tmp[605266] nil[44]))
    unknown call_tmp[605276] "expr temp" "maybe param" "maybe type" "temp"
    (605279 'move' call_tmp[605276](43089 call _cond_test call_tmp[605271]))
    if call_tmp[605276]
    {
      unknown call_tmp[605283] "expr temp" "maybe param" "maybe type" "temp"
      (605286 'move' call_tmp[605283](43078 call chpl_pn _mt[243] rhs[43055]))
      unknown call_tmp[605288] "expr temp" "maybe param" "maybe type" "temp"
      (605291 'move' call_tmp[605288](43081 call postfix! call_tmp[605283]))
      (43087 call(43083 call (partial) retain _mt[243] call_tmp[605288]))
    }
    unknown call_tmp[605297] "maybe param" "maybe type" "temp"
    (605300 'move' call_tmp[605297](43096 call chpl_p _mt[243] rhs[43055]))
    const chpl_p_tmp[43099] "dead at end of block" "const" "insert auto destroy"
    (540612 'init var' chpl_p_tmp[43099] call_tmp[605297])
    (43102 'end of statement')
    unknown call_tmp[605304] "maybe param" "maybe type" "temp"
    (605307 'move' call_tmp[605304](43104 call chpl_pn _mt[243] rhs[43055]))
    const chpl_pn_tmp[43107] "dead at end of block" "const" "insert auto destroy"
    (540614 'init var' chpl_pn_tmp[43107] call_tmp[605304])
    (43110 'end of statement')
    (43118 call(43114 call (partial) doClear _mt[243] lhs[43049]))
    (474242 'end of statement')
    unknown call_tmp[605313] "expr temp" "maybe param" "maybe type" "temp"
    (605316 'move' call_tmp[605313](43121 call chpl_p _mt[243] lhs[43049]))
    (43125 call = call_tmp[605313] chpl_p_tmp[43099])
    (474243 'end of statement' chpl_p_tmp[43099])
    unknown call_tmp[605320] "expr temp" "maybe param" "maybe type" "temp"
    (605323 'move' call_tmp[605320](43129 call chpl_pn _mt[243] lhs[43049]))
    (43133 call = call_tmp[605320] chpl_pn_tmp[43107])
    (474245 'end of statement' chpl_pn_tmp[43107])
    (505476 return _void[55])
  }
  where {
    unknown tmp[418370] "maybe param" "temp"
    (418381 'move' tmp[418370](43061 call isNonNilableClass lhs[43049]))
    unknown call_tmp[605325] "expr temp" "maybe param" "maybe type" "temp"
    (605328 'move' call_tmp[605325](418383 call _cond_invalid tmp[418370]))
    if call_tmp[605325]
    {
      (418386 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554240] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554241] "maybe param" "temp"
    unknown call_tmp[605330] "expr temp" "maybe param" "maybe type" "temp"
    (605333 'move' call_tmp[605330](418371 call isTrue tmp[418370]))
    (554246 'move' tmp[554241](554244 call _cond_test call_tmp[605330]))
    if tmp[554241]
    {
      unknown tmp[554248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605335] "expr temp" "maybe param" "maybe type" "temp"
      (605338 'move' call_tmp[605335](43065 call isNilableClass rhs[43055]))
      (554250 'move' tmp[554248](418374 call isTrue call_tmp[605335]))
      (554255 'move' tmp[554240](554252 '_paramFoldLogical' tmp[554241] tmp[554248]))
    }
    {
      (554260 'move' tmp[554240](554257 '_paramFoldLogical' tmp[554241] 0))
    }
    (43068 call ! tmp[554240])
  }
  function =[43145](ref arg lhs[43142]:_shared[32](?), in arg rhs[43148]:_owned[30](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[605344] "expr temp" "maybe param" "maybe type" "temp"
    (605347 'move' call_tmp[605344](43172 call(43168 call (partial) release _mt[243] rhs[43148])))
    (43174 call(43164 call (partial) retain _mt[243] lhs[43142]) call_tmp[605344])
    (505478 return _void[55])
  }
  where {
    unknown tmp[418391] "maybe param" "temp"
    (418402 'move' tmp[418391](43154 call isNonNilableClass lhs[43142]))
    unknown call_tmp[605349] "expr temp" "maybe param" "maybe type" "temp"
    (605352 'move' call_tmp[605349](418404 call _cond_invalid tmp[418391]))
    if call_tmp[605349]
    {
      (418407 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554267] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554268] "maybe param" "temp"
    unknown call_tmp[605354] "expr temp" "maybe param" "maybe type" "temp"
    (605357 'move' call_tmp[605354](418392 call isTrue tmp[418391]))
    (554273 'move' tmp[554268](554271 call _cond_test call_tmp[605354]))
    if tmp[554268]
    {
      unknown tmp[554275] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605359] "expr temp" "maybe param" "maybe type" "temp"
      (605362 'move' call_tmp[605359](43158 call isNilableClass rhs[43148]))
      (554277 'move' tmp[554275](418395 call isTrue call_tmp[605359]))
      (554282 'move' tmp[554267](554279 '_paramFoldLogical' tmp[554268] tmp[554275]))
    }
    {
      (554287 'move' tmp[554267](554284 '_paramFoldLogical' tmp[554268] 0))
    }
    (43161 call ! tmp[554267])
  }
  function =[43186](ref arg lhs[43183]:_shared[32](?), arg rhs[43189]:_nilType[42]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (43203 call(43199 call (partial) clear _mt[243] lhs[43183]))
    (505480 return _void[55])
  }
  where {
    unknown call_tmp[605366] "expr temp" "maybe param" "maybe type" "temp"
    (605369 'move' call_tmp[605366](43195 call isNonNilableClass lhs[43183]))
    (43196 call ! call_tmp[605366])
  }
  function <=>[43215](ref arg lhs[43212]:_shared[32](?), ref arg rhs[43218]:_shared[32](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[605373] "expr temp" "maybe param" "maybe type" "temp"
    (605376 'move' call_tmp[605373](43222 call chpl_pn _mt[243] lhs[43212]))
    unknown call_tmp[605380] "expr temp" "maybe param" "maybe type" "temp"
    (605383 'move' call_tmp[605380](43226 call chpl_pn _mt[243] rhs[43218]))
    (43229 call <=> call_tmp[605373] call_tmp[605380])
    (474249 'end of statement')
    unknown call_tmp[605387] "expr temp" "maybe param" "maybe type" "temp"
    (605390 'move' call_tmp[605387](43234 call chpl_p _mt[243] lhs[43212]))
    unknown call_tmp[605394] "expr temp" "maybe param" "maybe type" "temp"
    (605397 'move' call_tmp[605394](43238 call chpl_p _mt[243] rhs[43218]))
    (43241 call <=> call_tmp[605387] call_tmp[605394])
    (505482 return _void[55])
  }
  function chpl__autoDestroy[43252](ref arg x[43249]:_shared[32](?)) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[605399] "expr temp" "maybe param" "maybe type" "temp"
    (605402 'move' call_tmp[605399](43259 'deref' x[43249]))
    (43260 'call destructor' call_tmp[605399])
    (505484 return _void[55])
  }
  function _shared[32](?).readWriteThis[43270](arg _mt[43275]:_MT[238], arg this[43272]:_shared[32](?) :
  _shared[32](?), arg f[43268]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown call_tmp[605406] "expr temp" "maybe param" "maybe type" "temp"
    (605409 'move' call_tmp[605406](43279 call chpl_p _mt[243] this[43272]))
    (43282 call <~> f[43268] call_tmp[605406])
    (505486 return _void[55])
  }
  function _cast[43294](arg t[43291]:borrowed[211](?), const  ref arg x[43297]:_shared[32](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505490] "RVV" "temp"
    unknown call_tmp[605413] "expr temp" "maybe param" "maybe type" "temp"
    (605416 'move' call_tmp[605413](43315 call(43311 call (partial) borrow _mt[243] x[43297])))
    (505495 'move' ret[505490](505494 'deref' call_tmp[605413]))
    (505492 return ret[505490])
  }
  where {
    unknown call_tmp[605420] "expr temp" "maybe param" "maybe type" "temp"
    (605423 'move' call_tmp[605420](43304 call chpl_t _mt[243] x[43297]))
    (354241 'is_subtype' call_tmp[605420] t[43291])
  }
  function _cast[43331](arg t[43328]:shared?[415418](?), in arg x[43336]:shared[415422](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505499] "RVV" "temp"
    unknown call_tmp[605427] "expr temp" "maybe param" "maybe type" "temp"
    (605430 'move' call_tmp[605427](43359 call chpl_t _mt[243] t[43328]))
    unknown call_tmp[605432] "expr temp" "maybe param" "maybe type" "temp"
    (605435 'move' call_tmp[605432](43363 call _to_nilable call_tmp[605427]))
    unknown call_tmp[605437] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605440 'move' call_tmp[605437](747769 'new' _shared[32](?) 1 call_tmp[605432] x[43336]))
    (505504 'move' ret[505499](505503 'deref' call_tmp[605437]))
    (505501 return ret[505499])
  }
  where {
    unknown call_tmp[605444] "expr temp" "maybe param" "maybe type" "temp"
    (605447 'move' call_tmp[605444](43347 call chpl_t _mt[243] t[43328]))
    unknown call_tmp[605449] "expr temp" "maybe param" "maybe type" "temp"
    (605452 'move' call_tmp[605449](43351 call _to_nonnil call_tmp[605444]))
    unknown call_tmp[605456] "expr temp" "maybe param" "maybe type" "temp"
    (605459 'move' call_tmp[605456](43341 call chpl_t _mt[243] x[43336]))
    (354242 'is_subtype' call_tmp[605449] call_tmp[605456])
  }
  function _cast[43381](arg t[43378]:shared?[415418](?), in arg x[43387]:shared?[415418](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505508] "RVV" "temp"
    unknown call_tmp[605463] "expr temp" "maybe param" "maybe type" "temp"
    (605466 'move' call_tmp[605463](43406 call chpl_t _mt[243] t[43378]))
    unknown call_tmp[605468] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605471 'move' call_tmp[605468](747770 'new' _shared[32](?) 1 call_tmp[605463] x[43387]))
    (505513 'move' ret[505508](505512 'deref' call_tmp[605468]))
    (505510 return ret[505508])
  }
  where {
    unknown call_tmp[605475] "expr temp" "maybe param" "maybe type" "temp"
    (605478 'move' call_tmp[605475](43397 call chpl_t _mt[243] t[43378]))
    unknown call_tmp[605482] "expr temp" "maybe param" "maybe type" "temp"
    (605485 'move' call_tmp[605482](43392 call chpl_t _mt[243] x[43387]))
    (354243 'is_subtype' call_tmp[605475] call_tmp[605482])
  }
  function _cast[43425](arg t[43422]:shared[415422](?), in arg x[43430]:shared[415422](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505517] "RVV" "temp"
    unknown call_tmp[605489] "expr temp" "maybe param" "maybe type" "temp"
    (605492 'move' call_tmp[605489](43449 call chpl_t _mt[243] t[43422]))
    unknown call_tmp[605494] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605497 'move' call_tmp[605494](747771 'new' _shared[32](?) 1 call_tmp[605489] x[43430]))
    (505522 'move' ret[505517](505521 'deref' call_tmp[605494]))
    (505519 return ret[505517])
  }
  where {
    unknown call_tmp[605501] "expr temp" "maybe param" "maybe type" "temp"
    (605504 'move' call_tmp[605501](43440 call chpl_t _mt[243] t[43422]))
    unknown call_tmp[605508] "expr temp" "maybe param" "maybe type" "temp"
    (605511 'move' call_tmp[605508](43435 call chpl_t _mt[243] x[43430]))
    (354244 'is_subtype' call_tmp[605501] call_tmp[605508])
  }
  function _cast[43468](arg t[43465]:shared[415422](?), in arg x[43474]:shared?[415418](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505526] "RVV" "temp"
    unknown call_tmp[605515] "expr temp" "maybe param" "maybe type" "temp"
    (605518 'move' call_tmp[605515](43492 call chpl_p _mt[243] x[43474]))
    unknown call_tmp[605520] "expr temp" "maybe param" "maybe type" "temp"
    (605523 'move' call_tmp[605520](43496 call == call_tmp[605515] nil[44]))
    unknown call_tmp[605525] "expr temp" "maybe param" "maybe type" "temp"
    (605528 'move' call_tmp[605525](43507 call _cond_test call_tmp[605520]))
    if call_tmp[605525]
    {
      unknown call_tmp[605530] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (605533 'move' call_tmp[605530](747772 'new' NilClassError[368325](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[605535] "expr temp" "maybe param" "maybe type" "temp"
      (605538 'move' call_tmp[605535](468071 call chpl_fix_thrown_error call_tmp[605530]))
      (43504 'throw' call_tmp[605535])
    }
    unknown call_tmp[605542] "expr temp" "maybe param" "maybe type" "temp"
    (605545 'move' call_tmp[605542](43518 call chpl_t _mt[243] t[43465]))
    unknown call_tmp[605547] "expr temp" "maybe param" "maybe type" "temp"
    (605550 'move' call_tmp[605547](43522 call _to_nonnil call_tmp[605542]))
    unknown call_tmp[605552] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605555 'move' call_tmp[605552](747773 'new' _shared[32](?) 1 call_tmp[605547] x[43474]))
    (505531 'move' ret[505526](505530 'deref' call_tmp[605552]))
    (505528 return ret[505526])
  }
  where {
    unknown call_tmp[605559] "expr temp" "maybe param" "maybe type" "temp"
    (605562 'move' call_tmp[605559](43487 call chpl_t _mt[243] t[43465]))
    unknown call_tmp[605566] "expr temp" "maybe param" "maybe type" "temp"
    (605569 'move' call_tmp[605566](43480 call chpl_t _mt[243] x[43474]))
    unknown call_tmp[605571] "expr temp" "maybe param" "maybe type" "temp"
    (605574 'move' call_tmp[605571](43484 call _to_nonnil call_tmp[605566]))
    (354245 'is_subtype' call_tmp[605559] call_tmp[605571])
  }
  function _cast[43538](arg t[43535]:shared[415422](?), const  ref arg x[43544]:shared?[415418](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505535] "RVV" "temp"
    unknown call_tmp[605578] "expr temp" "maybe param" "maybe type" "temp"
    (605581 'move' call_tmp[605578](43562 call chpl_p _mt[243] x[43544]))
    unknown call_tmp[605583] "expr temp" "maybe param" "maybe type" "temp"
    (605586 'move' call_tmp[605583](43566 call == call_tmp[605578] nil[44]))
    unknown call_tmp[605588] "expr temp" "maybe param" "maybe type" "temp"
    (605591 'move' call_tmp[605588](43577 call _cond_test call_tmp[605583]))
    if call_tmp[605588]
    {
      unknown call_tmp[605593] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (605596 'move' call_tmp[605593](747774 'new' NilClassError[368325](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[605598] "expr temp" "maybe param" "maybe type" "temp"
      (605601 'move' call_tmp[605598](468073 call chpl_fix_thrown_error call_tmp[605593]))
      (43574 'throw' call_tmp[605598])
    }
    unknown call_tmp[605605] "expr temp" "maybe param" "maybe type" "temp"
    (605608 'move' call_tmp[605605](43589 call chpl_t _mt[243] t[43535]))
    unknown call_tmp[605610] "expr temp" "maybe param" "maybe type" "temp"
    (605613 'move' call_tmp[605610](43593 call _to_unmanaged call_tmp[605605]))
    unknown call_tmp[605615] "expr temp" "maybe param" "maybe type" "temp"
    (605618 'move' call_tmp[605615](43595 call _to_nonnil call_tmp[605610]))
    unknown call_tmp[605622] "expr temp" "maybe param" "maybe type" "temp"
    (605625 'move' call_tmp[605622](43583 call chpl_p _mt[243] x[43544]))
    unknown call_tmp[605627] "maybe param" "maybe type" "temp"
    (605630 'move' call_tmp[605627](43596 call _cast call_tmp[605615] call_tmp[605622]))
    unknown p[43599] "dead at end of block" "insert auto destroy"
    (540616 'init var' p[43599] call_tmp[605627])
    (43602 'end of statement')
    unknown call_tmp[605632] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605635 'move' call_tmp[605632](43609 'typeof' p[43599]))
    unknown call_tmp[605637] "expr temp" "maybe param" "maybe type" "temp"
    (605640 'move' call_tmp[605637](43611 call _to_borrowed call_tmp[605632]))
    unknown call_tmp[605644] "expr temp" "maybe param" "maybe type" "temp"
    (605647 'move' call_tmp[605644](43614 call chpl_pn _mt[243] x[43544]))
    unknown call_tmp[605649] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605652 'move' call_tmp[605649](747775 'new' _shared[32](?) 1 call_tmp[605637] p[43599] call_tmp[605644]))
    (505540 'move' ret[505535](505539 'deref' call_tmp[605649]))
    gotoReturn _end__cast[505533] _end__cast[505533]
    (474260 'end of statement' p[43599] p[43599])
    label _end__cast[505533]
    (505537 return ret[505535])
  }
  where {
    unknown call_tmp[605656] "expr temp" "maybe param" "maybe type" "temp"
    (605659 'move' call_tmp[605656](43555 call chpl_t _mt[243] x[43544]))
    unknown call_tmp[605661] "expr temp" "maybe param" "maybe type" "temp"
    (605664 'move' call_tmp[605661](43559 call _to_nonnil call_tmp[605656]))
    unknown call_tmp[605668] "expr temp" "maybe param" "maybe type" "temp"
    (605671 'move' call_tmp[605668](43549 call chpl_t _mt[243] t[43535]))
    (354246 'is_proper_subtype' call_tmp[605661] call_tmp[605668])
  }
  function _cast[43631](arg t[43628]:shared[415422](?), const  ref arg x[43636]:shared[415422](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505546] "RVV" "temp"
    unknown call_tmp[605675] "expr temp" "maybe param" "maybe type" "temp"
    (605678 'move' call_tmp[605675](43657 call chpl_t _mt[243] t[43628]))
    unknown call_tmp[605680] "expr temp" "maybe param" "maybe type" "temp"
    (605683 'move' call_tmp[605680](43661 call _to_unmanaged call_tmp[605675]))
    unknown call_tmp[605685] "expr temp" "maybe param" "maybe type" "temp"
    (605688 'move' call_tmp[605685](43663 call _to_nonnil call_tmp[605680]))
    unknown call_tmp[605692] "expr temp" "maybe param" "maybe type" "temp"
    (605695 'move' call_tmp[605692](43651 call chpl_p _mt[243] x[43636]))
    unknown call_tmp[605697] "maybe param" "maybe type" "temp"
    (605700 'move' call_tmp[605697](43664 call _cast call_tmp[605685] call_tmp[605692]))
    unknown p[43667] "dead at end of block" "insert auto destroy"
    (540618 'init var' p[43667] call_tmp[605697])
    (43670 'end of statement')
    unknown call_tmp[605702] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605705 'move' call_tmp[605702](43678 'typeof' p[43667]))
    unknown call_tmp[605707] "expr temp" "maybe param" "maybe type" "temp"
    (605710 'move' call_tmp[605707](43680 call _to_borrowed call_tmp[605702]))
    unknown call_tmp[605714] "expr temp" "maybe param" "maybe type" "temp"
    (605717 'move' call_tmp[605714](43683 call chpl_pn _mt[243] x[43636]))
    unknown call_tmp[605719] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605722 'move' call_tmp[605719](747776 'new' _shared[32](?) 1 call_tmp[605707] p[43667] call_tmp[605714]))
    (505551 'move' ret[505546](505550 'deref' call_tmp[605719]))
    gotoReturn _end__cast[505544] _end__cast[505544]
    (474263 'end of statement' p[43667] p[43667])
    label _end__cast[505544]
    (505548 return ret[505546])
  }
  where {
    unknown call_tmp[605726] "expr temp" "maybe param" "maybe type" "temp"
    (605729 'move' call_tmp[605726](43646 call chpl_t _mt[243] x[43636]))
    unknown call_tmp[605733] "expr temp" "maybe param" "maybe type" "temp"
    (605736 'move' call_tmp[605733](43641 call chpl_t _mt[243] t[43628]))
    (354247 'is_proper_subtype' call_tmp[605726] call_tmp[605733])
  }
  function _cast[43701](arg t[43698]:shared?[415418](?), const  ref arg x[43707]:shared?[415418](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505557] "RVV" "temp"
    unknown call_tmp[605740] "expr temp" "maybe param" "maybe type" "temp"
    (605743 'move' call_tmp[605740](43728 call chpl_t _mt[243] t[43698]))
    unknown call_tmp[605745] "expr temp" "maybe param" "maybe type" "temp"
    (605748 'move' call_tmp[605745](43732 call _to_unmanaged call_tmp[605740]))
    unknown call_tmp[605750] "expr temp" "maybe param" "maybe type" "temp"
    (605753 'move' call_tmp[605750](43734 call _to_nilable call_tmp[605745]))
    unknown call_tmp[605757] "expr temp" "maybe param" "maybe type" "temp"
    (605760 'move' call_tmp[605757](43722 call chpl_p _mt[243] x[43707]))
    unknown call_tmp[605762] "maybe param" "maybe type" "temp"
    (605765 'move' call_tmp[605762](43735 call _cast call_tmp[605750] call_tmp[605757]))
    unknown p[43737] "dead at end of block" "insert auto destroy"
    (540620 'init var' p[43737] call_tmp[605762])
    (43740 'end of statement')
    unknown call_tmp[605767] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605770 'move' call_tmp[605767](43748 'typeof' p[43737]))
    unknown call_tmp[605772] "expr temp" "maybe param" "maybe type" "temp"
    (605775 'move' call_tmp[605772](43750 call _to_borrowed call_tmp[605767]))
    unknown call_tmp[605779] "expr temp" "maybe param" "maybe type" "temp"
    (605782 'move' call_tmp[605779](43753 call chpl_pn _mt[243] x[43707]))
    unknown call_tmp[605784] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605787 'move' call_tmp[605784](747777 'new' _shared[32](?) 1 call_tmp[605772] p[43737] call_tmp[605779]))
    (505562 'move' ret[505557](505561 'deref' call_tmp[605784]))
    gotoReturn _end__cast[505555] _end__cast[505555]
    (474266 'end of statement' p[43737] p[43737])
    label _end__cast[505555]
    (505559 return ret[505557])
  }
  where {
    unknown call_tmp[605791] "expr temp" "maybe param" "maybe type" "temp"
    (605794 'move' call_tmp[605791](43717 call chpl_t _mt[243] x[43707]))
    unknown call_tmp[605798] "expr temp" "maybe param" "maybe type" "temp"
    (605801 'move' call_tmp[605798](43712 call chpl_t _mt[243] t[43698]))
    (354248 'is_proper_subtype' call_tmp[605791] call_tmp[605798])
  }
  function _cast[43771](arg t[43768]:shared?[415418](?), const  ref arg x[43776]:shared[415422](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505568] "RVV" "temp"
    unknown call_tmp[605805] "expr temp" "maybe param" "maybe type" "temp"
    (605808 'move' call_tmp[605805](43800 call chpl_t _mt[243] t[43768]))
    unknown call_tmp[605810] "expr temp" "maybe param" "maybe type" "temp"
    (605813 'move' call_tmp[605810](43804 call _to_unmanaged call_tmp[605805]))
    unknown call_tmp[605815] "expr temp" "maybe param" "maybe type" "temp"
    (605818 'move' call_tmp[605815](43806 call _to_nilable call_tmp[605810]))
    unknown call_tmp[605822] "expr temp" "maybe param" "maybe type" "temp"
    (605825 'move' call_tmp[605822](43794 call chpl_p _mt[243] x[43776]))
    unknown call_tmp[605827] "maybe param" "maybe type" "temp"
    (605830 'move' call_tmp[605827](43807 call _cast call_tmp[605815] call_tmp[605822]))
    unknown p[43809] "dead at end of block" "insert auto destroy"
    (540622 'init var' p[43809] call_tmp[605827])
    (43812 'end of statement')
    unknown call_tmp[605832] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (605835 'move' call_tmp[605832](43820 'typeof' p[43809]))
    unknown call_tmp[605837] "expr temp" "maybe param" "maybe type" "temp"
    (605840 'move' call_tmp[605837](43822 call _to_borrowed call_tmp[605832]))
    unknown call_tmp[605844] "expr temp" "maybe param" "maybe type" "temp"
    (605847 'move' call_tmp[605844](43825 call chpl_pn _mt[243] x[43776]))
    unknown call_tmp[605849] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605852 'move' call_tmp[605849](747778 'new' _shared[32](?) 1 call_tmp[605837] p[43809] call_tmp[605844]))
    (505573 'move' ret[505568](505572 'deref' call_tmp[605849]))
    gotoReturn _end__cast[505566] _end__cast[505566]
    (474269 'end of statement' p[43809] p[43809])
    label _end__cast[505566]
    (505570 return ret[505568])
  }
  where {
    unknown call_tmp[605856] "expr temp" "maybe param" "maybe type" "temp"
    (605859 'move' call_tmp[605856](43787 call chpl_t _mt[243] x[43776]))
    unknown call_tmp[605861] "expr temp" "maybe param" "maybe type" "temp"
    (605864 'move' call_tmp[605861](43791 call _to_nilable call_tmp[605856]))
    unknown call_tmp[605868] "expr temp" "maybe param" "maybe type" "temp"
    (605871 'move' call_tmp[605868](43781 call chpl_t _mt[243] t[43768]))
    (354249 'is_proper_subtype' call_tmp[605861] call_tmp[605868])
  }
  function _cast[43840](arg t[43837]:_shared[32](?), arg x[43843]:_nilType[42]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505579] "RVV" "temp"
    unknown call_tmp[605875] "expr temp" "maybe param" "maybe type" "temp"
    (605878 'move' call_tmp[605875](43848 call chpl_t _mt[243] t[43837]))
    unknown call_tmp[605880] "expr temp" "maybe param" "maybe type" "temp"
    (605883 'move' call_tmp[605880](43852 call isNonNilableClass call_tmp[605875]))
    unknown call_tmp[605885] "expr temp" "maybe param" "maybe type" "temp"
    (605888 'move' call_tmp[605885](43874 call _cond_test call_tmp[605880]))
    if call_tmp[605885]
    {
      (43872 call compilerError "Illegal cast from nil to non-nilable shared type")
    }
    unknown tmp[43881] "dead at end of block" "insert auto destroy"
    (540624 'default init var' tmp[43881] t[43837])
    (43884 'end of statement')
    (505584 'move' ret[505579](505583 'deref' tmp[43881]))
    gotoReturn _end__cast[505577] _end__cast[505577]
    (474273 'end of statement' tmp[43881])
    label _end__cast[505577]
    (505581 return ret[505579])
  }
  function postfix![43896](arg x[43893]:_shared[32](?)) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[505590] "RVV" "temp"
    unknown tmp[418412] "maybe param" "temp"
    (418423 'move' tmp[418412] 1)
    unknown call_tmp[605890] "expr temp" "maybe param" "maybe type" "temp"
    (605893 'move' call_tmp[605890](418425 call _cond_invalid tmp[418412]))
    if call_tmp[605890]
    {
      (418428 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554294] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554295] "maybe param" "temp"
    unknown call_tmp[605895] "expr temp" "maybe param" "maybe type" "temp"
    (605898 'move' call_tmp[605895](418413 call isTrue tmp[418412]))
    (554300 'move' tmp[554295](554298 call _cond_test call_tmp[605895]))
    if tmp[554295]
    {
      (554305 'move' tmp[554294](554302 '_paramFoldLogical' tmp[554295] 1))
    }
    {
      unknown tmp[554307] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (554309 'move' tmp[554307](418417 call isTrue enablePostfixBangChecks[324]))
      (554314 'move' tmp[554294](554311 '_paramFoldLogical' tmp[554295] tmp[554307]))
    }
    unknown call_tmp[605900] "expr temp" "maybe param" "maybe type" "temp"
    (605903 'move' call_tmp[605900](43945 call _cond_test tmp[554294]))
    if call_tmp[605900]
    {
      unknown call_tmp[605907] "expr temp" "maybe param" "maybe type" "temp"
      (605910 'move' call_tmp[605907](43908 call chpl_t _mt[243] x[43893]))
      unknown call_tmp[605912] "expr temp" "maybe param" "maybe type" "temp"
      (605915 'move' call_tmp[605912](43912 call _to_nilable call_tmp[605907]))
      unknown call_tmp[605919] "expr temp" "maybe param" "maybe type" "temp"
      (605922 'move' call_tmp[605919](43914 call chpl_t _mt[243] x[43893]))
      unknown call_tmp[605924] "expr temp" "maybe param" "maybe type" "temp"
      (605927 'move' call_tmp[605924](43917 call == call_tmp[605912] call_tmp[605919]))
      unknown call_tmp[605929] "expr temp" "maybe param" "maybe type" "temp"
      (605932 'move' call_tmp[605929](43940 call _cond_test call_tmp[605924]))
      if call_tmp[605929]
      {
        unknown call_tmp[605936] "expr temp" "maybe param" "maybe type" "temp"
        (605939 'move' call_tmp[605936](43920 call chpl_p _mt[243] x[43893]))
        unknown call_tmp[605941] "expr temp" "maybe param" "maybe type" "temp"
        (605944 'move' call_tmp[605941](43924 call == call_tmp[605936] nil[44]))
        unknown call_tmp[605946] "expr temp" "maybe param" "maybe type" "temp"
        (605949 'move' call_tmp[605946](43935 call _cond_test call_tmp[605941]))
        if call_tmp[605946]
        {
          (43932 call nilCheckHalt module=[255] HaltWrappers[210016] "argument to ! is nil")
          (357114 'referenced modules list' HaltWrappers[210016])
        }
      }
    }
    unknown call_tmp[605953] "expr temp" "maybe param" "maybe type" "temp"
    (605956 'move' call_tmp[605953](43951 call chpl_p _mt[243] x[43893]))
    unknown call_tmp[605958] "expr temp" "maybe param" "maybe type" "temp"
    (605961 'move' call_tmp[605958](43955 call _to_nonnil call_tmp[605953]))
    (505595 'move' ret[505590](505594 'deref' call_tmp[605958]))
    (505592 return ret[505590])
    (355073 'used modules list'(43899 'import' HaltWrappers[210016]))
  }
  (355068 'used modules list'(41672 'use' ChapelError[167899])(41674 'use' Atomics[43964])(41675 'use' ChapelBase[307])(41678 'use' OwnedObject[39586]))
}