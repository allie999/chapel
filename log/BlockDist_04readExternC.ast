AST dump for BlockDist after pass readExternC.
Module use list: 

{
  (353181 'use' ChapelStandard)
  (316626 'use' DSIUtil)
  (316629 'use' ChapelUtil)
  (316632 'use' CommDiagnostics)
  (316635 'use' ChapelLocks)
  (316638 'use' ChapelDebugPrint)
  (316641 'use' LayoutCS)
  (316644 'use' SparseBlockDist)
  { scopeless
    unknown debugBlockDist[316647] "config" "param" 0
    (316650 'end of statement')
  }
  { scopeless
    unknown debugBlockDistBulkTransfer[316652] "config" "param" 0
    (316655 'end of statement')
  }
  { scopeless
    const disableAliasedBulkTransfer[316657] "config" "const" 1
    (316660 'end of statement')
  }
  { scopeless
    unknown disableBlockDistBulkTransfer[316662] "config" "param" 0
    (316665 'end of statement')
  }
  { scopeless
    unknown sanityCheckDistribution[316667] "config" "param" 0
    (316670 'end of statement')
  }
  { scopeless
    unknown testFastFollowerOptimization[316672] "config" "param" 0
    (316675 'end of statement')
  }
  { scopeless
    unknown disableBlockLazyRAD[316677] "config" "param" defaultDisableLazyRADOpt
    (316680 'end of statement')
  }
  type Block[316760](?) unknown rank[316685] "param" int[13] unknown idxType[316690] "type variable" int[13] unknown boundingBox[316699](316697 call chpl__buildDomainRuntimeType defaultDist rank idxType) unknown targetLocDom[316708](316706 call chpl__buildDomainRuntimeType defaultDist rank) unknown targetLocales[316719](316717 call chpl__buildArrayRuntimeType(316715 call chpl__ensureDomainExpr targetLocDom) locale[28]) unknown locDist[316735](316733 call chpl__buildArrayRuntimeType(316731 call chpl__ensureDomainExpr targetLocDom)(316730 'to unmanaged class from unknown'(316729 call LocBlock rank idxType))) unknown dataParTasksPerLocale[316740] int[13] unknown dataParIgnoreRunningTasks[316745] bool[10] unknown dataParMinGranularity[316750] int[13] unknown sparseLayoutType[316756] "type variable"(316755 'to unmanaged class from unknown' DefaultDist) BaseDist
  type LocBlock[316783](?) unknown rank[316765] "param" int[13] unknown idxType[316769] "type variable" const myChunk[316778] "const"(316776 call chpl__buildDomainRuntimeType defaultDist rank idxType)
  type BlockDom[316840](?) unknown sparseLayoutType[316789] "type variable" const dist[316799] "const"(316798 'to unmanaged class from unknown'(316797 call Block rank idxType sparseLayoutType)) unknown locDoms[316821](316819 call chpl__buildArrayRuntimeType(316817 call chpl__ensureDomainExpr(316806 call . dist c"targetLocDom"))(316816 'to unmanaged class from unknown'(316815 call LocBlockDom rank idxType stridable))) unknown whole[316835](316833 call chpl__buildDomainRuntimeType defaultDist(rank = rank)(idxType = idxType)(stridable = stridable)) BaseRectangularDom
  type LocBlockDom[316869](?) unknown rank[316845] "param" int[13] unknown idxType[316849] "type variable" unknown stridable[316853] "param" bool[10] unknown myBlock[316864](316862 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  type BlockArr[316945](?) unknown sparseLayoutType[316875] "type variable" unknown doRADOpt[316880] defaultDoRADOpt bool[10] unknown dom[316892](316891 'to unmanaged class from unknown'(316890 call BlockDom rank idxType stridable sparseLayoutType)) unknown locArr[316916](316914 call chpl__buildArrayRuntimeType(316912 call chpl__ensureDomainExpr(316900 call .(316897 call . dom c"dist") c"targetLocDom"))(316911 'to unmanaged class from unknown'(316910 call LocBlockArr eltType rank idxType stridable))) unknown myLocArr[316929] "local field"(316928 'to unmanaged class from unknown'(316927 'to nilable class from type'(316926 call LocBlockArr eltType rank idxType stridable))) const SENTINEL[316940] "const"(316939 call max(316936 call * rank idxType)) BaseRectangularArr
  type LocBlockArr[317161](?) unknown eltType[316949] "type variable" unknown rank[316953] "param" int[13] unknown idxType[316957] "type variable" unknown stridable[316961] "param" bool[10] const locDom[316972] "const"(316971 'to unmanaged class from unknown'(316970 call LocBlockDom rank idxType stridable)) unknown locRAD[316985](316984 'to unmanaged class from unknown'(316983 'to nilable class from type'(316982 call LocRADCache eltType rank idxType stridable))) unknown myElems[317001] "local field" "unsafe"(316999 call chpl__buildArrayRuntimeType(316997 call chpl__ensureDomainExpr(316992 call . locDom c"myBlock")) eltType) unknown locRADLock[317006] chpl_LocalSpinlock function LocBlockArr[317161](?).init[317014](arg _mt[317165]:_MT[238], arg this[317163]:LocBlockArr[317161](?), arg eltType[317012]:_any[178](?), param arg rank[317017] :
  int[13], arg idxType[317020]:_any[178](?), param arg stridable[317023] :
  bool[10], const arg locDom[317033] :
  (317032 'to unmanaged class from unknown'(317031 call LocBlockDom rank idxType stridable)), param arg initElts[317037] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (317045 call =(317041 call . this c"eltType") eltType)
    (317054 call =(317050 call . this c"rank") rank)
    (317062 call =(317058 call . this c"idxType") idxType)
    (317070 call =(317066 call . this c"stridable") stridable)
    (317080 call =(317076 call . this c"locDom") locDom)
    (317104 call =(317086 call . this c"myElems")(317103 call(317096 call .(317093 call .(317090 call . this c"locDom") c"myBlock") c"buildArray") eltType(initElts = initElts)))
  } function LocBlockArr[317161](?).writeThis[317113](arg _mt[317169]:_MT[238], arg this[317167]:LocBlockArr[317161](?), arg f[317111]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (317134 call halt "LocBlockArr.writeThis() is not implemented / should not be needed")
  } function LocBlockArr[317161](?).deinit[317141](arg _mt[317173]:_MT[238], arg this[317171]:LocBlockArr[317161](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    if(317152 call _cond_test(317145 call != locRAD nil[44]))
    {
      { scopeless
        (317149 call chpl__delete locRAD)
      }
    }
  }
  function _unknown[51].init[317183](arg _mt[317234]:_MT[238], arg this[317231] :
  Block, arg boundingBox[317180] :
  _domain, arg targetLocales[317190] :
  (317186 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg dataParTasksPerLocale[317197] =
  (317196 call getDataParTasksPerLocale), arg dataParIgnoreRunningTasks[317203] =
  (317202 call getDataParIgnoreRunningTasks), arg dataParMinGranularity[317209] =
  (317208 call getDataParMinGranularity), param arg rank[317216] =
  (317213 call . boundingBox c"rank"), arg idxType[317223]:_any[178](?) =
  (317220 call . boundingBox c"idxType"), arg sparseLayoutType[317228]:_any[178](?) =
  (317227 'to unmanaged class from unknown' DefaultDist)) : _unknown[51] "method"
  {
    (317241 call =(317237 call . this c"rank") rank)
    (317250 call =(317246 call . this c"idxType") idxType)
    if(317281 call _cond_test(317258 call != rank(317255 call . boundingBox c"rank")))
    {
      { scopeless
        (317279 call compilerError "specified Block rank != rank of specified bounding box")
      }
    }
    if(317314 call _cond_test(317291 call != idxType(317288 call . boundingBox c"idxType")))
    {
      { scopeless
        (317312 call compilerError "specified Block index type != index type of specified bounding box")
      }
    }
    if(317350 call _cond_test(317327 call &&(317321 call != rank 2)(317326 call isCSType sparseLayoutType)))
    {
      { scopeless
        (317348 call compilerError "CS layout is only supported for 2 dimensional domains")
      }
    }
    if(317383 call _cond_test(317360 call ==(317356 call . boundingBox c"size") 0))
    {
      { scopeless
        (317381 call halt "Block() requires a non-empty boundingBox")
      }
    }
    (317405 call =(317391 call . this c"boundingBox")(317403 call _cast(317401 call chpl__buildDomainRuntimeType defaultDist rank idxType(stridable = 0)) boundingBox))
    { scopeless
      const ranges[317413] "const"(317412 call setupTargetLocRanges rank targetLocales)
      (317416 'end of statement')
    }
    (317426 call =(317418 call . this c"targetLocDom")(317424 call chpl__buildDomainExpr(317422 'expand_tuple' ranges)))
    (317441 call =(317430 call . this c"targetLocales")(317440 call reshape targetLocales(317437 call . this c"targetLocDom")))
    { scopeless
      const dummyLB[317454] "const"(317446 'new'(_chpl_manager = unmanaged[220](?))(317453 call LocBlock rank idxType(dummy = 1)))
      (317457 'end of statement')
    }
    { scopeless
      unknown locDistTemp[317471] dummyLB(317468 call chpl__buildArrayRuntimeType(317466 call chpl__ensureDomainExpr targetLocDom)(317465 'to unmanaged class from unknown'(317464 call LocBlock rank idxType)))
      (317474 'end of statement')
    }
    {
      unknown tmpIter[317513] "expr temp" "maybe ref" "no copy" "temp"
      (317516 'move' tmpIter[317513] targetLocDom)
      unknown isRngDomArr[317680] "maybe param" "temp"
      (317695 'move' isRngDomArr[317680](317693 call ||(317682 call isBoundedRange tmpIter[317513])(317691 call ||(317685 call isDomain tmpIter[317513])(317688 call isArray tmpIter[317513]))))
      if isRngDomArr[317680]
      {
        const _coforallCount[317552] "const" "end count" "temp"
        (317617 'move' _coforallCount[317552](317614 call _endCountAlloc 0))
        unknown numTasks[317553] "temp"
        (317601 'move' numTasks[317553](317597 call . tmpIter[317513] c"size"))
        (317592 call _upEndCount _coforallCount[317552] 0 numTasks[317553])
        unknown _indexOfInterest[317559] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317560] "expr temp" "temp"
        (317569 'move' _iterator[317560](317567 call _getIterator tmpIter[317513]))
        Defer
        {
          {
            (317585 call _freeIterator _iterator[317560])
          }
        }
        { scopeless type
          (317574 'move' _indexOfInterest[317559](317571 call iteratorIndex _iterator[317560]))
        }
        ForLoop[317561]
        {
          unknown locid[317578] "coforall index var" "index var" "insert auto destroy"
          (317580 'move' locid[317578] _indexOfInterest[317559])
          { scopeless
            { scopeless
              const tmp[317519] "const" "temp"
              (317521 'move' tmp[317519](317523 'deref'(317524 '_wide_get_locale'(317529 call(317526 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317537 call =(317539 call locDistTemp locid)(317541 'new'(_chpl_manager = unmanaged[220](?))(317545 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317554 call _downEndCount _coforallCount[317552] nil[44])
                (317532 'coforall on block' 0 tmp[317519])
              }
            }
          }
          label _continueLabel[317564]
          _indexOfInterest[317559]
          _iterator[317560]
        }
        label _breakLabel[317565]
        Defer
        {
          {
            (317604 call _endCountFree _coforallCount[317552])
          }
        }
        (317609 call _waitEndCount _coforallCount[317552] 0 numTasks[317553])
      }
      {
        const _coforallCount[317621] "const" "end count" "temp"
        (317677 'move' _coforallCount[317621](317674 call _endCountAlloc 0))
        unknown _indexOfInterest[317628] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317629] "expr temp" "temp"
        (317638 'move' _iterator[317629](317636 call _getIterator tmpIter[317513]))
        Defer
        {
          {
            (317654 call _freeIterator _iterator[317629])
          }
        }
        { scopeless type
          (317643 'move' _indexOfInterest[317628](317640 call iteratorIndex _iterator[317629]))
        }
        ForLoop[317630]
        {
          unknown locid[317647] "coforall index var" "index var" "insert auto destroy"
          (317649 'move' locid[317647] _indexOfInterest[317628])
          (317661 call _upEndCount _coforallCount[317621] 0)
          { scopeless
            { scopeless
              const tmp[317505] "const" "temp"
              (317507 'move' tmp[317505](317503 'deref'(317502 '_wide_get_locale'(317483 call(317478 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317499 call =(317487 call locDistTemp locid)(317490 'new'(_chpl_manager = unmanaged[220](?))(317498 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317623 call _downEndCount _coforallCount[317621] nil[44])
                (317510 'coforall on block' 0 tmp[317505])
              }
            }
          }
          label _continueLabel[317633]
          _indexOfInterest[317628]
          _iterator[317629]
        }
        label _breakLabel[317634]
        Defer
        {
          {
            (317665 call _endCountFree _coforallCount[317621])
          }
        }
        (317670 call _waitEndCount _coforallCount[317621] 0)
      }
    }
    (317701 call chpl__delete dummyLB)
    (317711 call =(317707 call . this c"locDist") locDistTemp)
    (317732 call =(317717 call . this c"dataParTasksPerLocale")(317729 IfExpr (317722 call == dataParTasksPerLocale 0) then
    { scopeless
      (317725 call . here c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale
    } ))
    (317742 call =(317738 call . this c"dataParIgnoreRunningTasks") dataParIgnoreRunningTasks)
    (317752 call =(317748 call . this c"dataParMinGranularity") dataParMinGranularity)
    (317765 call =(317758 call . this c"sparseLayoutType")(317764 call _to_unmanaged sparseLayoutType))
    (317773 call(317769 call . this c"complete"))
    if(317802 call _cond_test debugBlockDist)
    {
      (317795 call writeln "Creating new Block distribution:")
      (317800 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiAssign[317816](arg _mt[317821]:_MT[238], arg this[317818] :
  Block, arg other[317813] :
  (317812 'typeof' this)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[317848] "expr temp" "maybe ref" "no copy" "temp"
      (317851 'move' tmpIter[317848] targetLocDom)
      unknown isRngDomArr[318002] "maybe param" "temp"
      (318017 'move' isRngDomArr[318002](318015 call ||(318004 call isBoundedRange tmpIter[317848])(318013 call ||(318007 call isDomain tmpIter[317848])(318010 call isArray tmpIter[317848]))))
      if isRngDomArr[318002]
      {
        const _coforallCount[317874] "const" "end count" "temp"
        (317939 'move' _coforallCount[317874](317936 call _endCountAlloc 0))
        unknown numTasks[317875] "temp"
        (317923 'move' numTasks[317875](317919 call . tmpIter[317848] c"size"))
        (317914 call _upEndCount _coforallCount[317874] 0 numTasks[317875])
        unknown _indexOfInterest[317881] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317882] "expr temp" "temp"
        (317891 'move' _iterator[317882](317889 call _getIterator tmpIter[317848]))
        Defer
        {
          {
            (317907 call _freeIterator _iterator[317882])
          }
        }
        { scopeless type
          (317896 'move' _indexOfInterest[317881](317893 call iteratorIndex _iterator[317882]))
        }
        ForLoop[317883]
        {
          unknown locid[317900] "coforall index var" "index var" "insert auto destroy"
          (317902 'move' locid[317900] _indexOfInterest[317881])
          { scopeless
            { scopeless
              const tmp[317854] "const" "temp"
              (317856 'move' tmp[317854](317858 'deref'(317859 '_wide_get_locale'(317861 call targetLocales locid))))
              {
                { scopeless
                  (317869 call chpl__delete(317871 call locDist locid))
                }
                (317876 call _downEndCount _coforallCount[317874] nil[44])
                (317864 'coforall on block' 0 tmp[317854])
              }
            }
          }
          label _continueLabel[317886]
          _indexOfInterest[317881]
          _iterator[317882]
        }
        label _breakLabel[317887]
        Defer
        {
          {
            (317926 call _endCountFree _coforallCount[317874])
          }
        }
        (317931 call _waitEndCount _coforallCount[317874] 0 numTasks[317875])
      }
      {
        const _coforallCount[317943] "const" "end count" "temp"
        (317999 'move' _coforallCount[317943](317996 call _endCountAlloc 0))
        unknown _indexOfInterest[317950] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317951] "expr temp" "temp"
        (317960 'move' _iterator[317951](317958 call _getIterator tmpIter[317848]))
        Defer
        {
          {
            (317976 call _freeIterator _iterator[317951])
          }
        }
        { scopeless type
          (317965 'move' _indexOfInterest[317950](317962 call iteratorIndex _iterator[317951]))
        }
        ForLoop[317952]
        {
          unknown locid[317969] "coforall index var" "index var" "insert auto destroy"
          (317971 'move' locid[317969] _indexOfInterest[317950])
          (317983 call _upEndCount _coforallCount[317943] 0)
          { scopeless
            { scopeless
              const tmp[317840] "const" "temp"
              (317842 'move' tmp[317840](317838 'deref'(317837 '_wide_get_locale'(317828 call targetLocales locid))))
              {
                { scopeless
                  (317834 call chpl__delete(317832 call locDist locid))
                }
                (317945 call _downEndCount _coforallCount[317943] nil[44])
                (317845 'coforall on block' 0 tmp[317840])
              }
            }
          }
          label _continueLabel[317955]
          _indexOfInterest[317950]
          _iterator[317951]
        }
        label _breakLabel[317956]
        Defer
        {
          {
            (317987 call _endCountFree _coforallCount[317943])
          }
        }
        (317992 call _waitEndCount _coforallCount[317943] 0)
      }
    }
    (318027 call = boundingBox(318024 call . other c"boundingBox"))
    (318035 call = targetLocDom(318032 call . other c"targetLocDom"))
    (318043 call = targetLocales(318040 call . other c"targetLocales"))
    (318051 call = dataParTasksPerLocale(318048 call . other c"dataParTasksPerLocale"))
    (318059 call = dataParIgnoreRunningTasks(318056 call . other c"dataParIgnoreRunningTasks"))
    (318067 call = dataParMinGranularity(318064 call . other c"dataParMinGranularity"))
    {
      unknown tmpIter[318105] "expr temp" "maybe ref" "no copy" "temp"
      (318108 'move' tmpIter[318105] targetLocDom)
      unknown isRngDomArr[318269] "maybe param" "temp"
      (318284 'move' isRngDomArr[318269](318282 call ||(318271 call isBoundedRange tmpIter[318105])(318280 call ||(318274 call isDomain tmpIter[318105])(318277 call isArray tmpIter[318105]))))
      if isRngDomArr[318269]
      {
        const _coforallCount[318141] "const" "end count" "temp"
        (318206 'move' _coforallCount[318141](318203 call _endCountAlloc 0))
        unknown numTasks[318142] "temp"
        (318190 'move' numTasks[318142](318186 call . tmpIter[318105] c"size"))
        (318181 call _upEndCount _coforallCount[318141] 0 numTasks[318142])
        unknown _indexOfInterest[318148] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318149] "expr temp" "temp"
        (318158 'move' _iterator[318149](318156 call _getIterator tmpIter[318105]))
        Defer
        {
          {
            (318174 call _freeIterator _iterator[318149])
          }
        }
        { scopeless type
          (318163 'move' _indexOfInterest[318148](318160 call iteratorIndex _iterator[318149]))
        }
        ForLoop[318150]
        {
          unknown locid[318167] "coforall index var" "index var" "insert auto destroy"
          (318169 'move' locid[318167] _indexOfInterest[318148])
          { scopeless
            { scopeless
              const tmp[318111] "const" "temp"
              (318113 'move' tmp[318111](318115 'deref'(318116 '_wide_get_locale'(318118 call targetLocales locid))))
              {
                { scopeless
                  (318126 call =(318128 call locDist locid)(318130 'new'(_chpl_manager = unmanaged[220](?))(318134 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (318143 call _downEndCount _coforallCount[318141] nil[44])
                (318121 'coforall on block' 0 tmp[318111])
              }
            }
          }
          label _continueLabel[318153]
          _indexOfInterest[318148]
          _iterator[318149]
        }
        label _breakLabel[318154]
        Defer
        {
          {
            (318193 call _endCountFree _coforallCount[318141])
          }
        }
        (318198 call _waitEndCount _coforallCount[318141] 0 numTasks[318142])
      }
      {
        const _coforallCount[318210] "const" "end count" "temp"
        (318266 'move' _coforallCount[318210](318263 call _endCountAlloc 0))
        unknown _indexOfInterest[318217] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318218] "expr temp" "temp"
        (318227 'move' _iterator[318218](318225 call _getIterator tmpIter[318105]))
        Defer
        {
          {
            (318243 call _freeIterator _iterator[318218])
          }
        }
        { scopeless type
          (318232 'move' _indexOfInterest[318217](318229 call iteratorIndex _iterator[318218]))
        }
        ForLoop[318219]
        {
          unknown locid[318236] "coforall index var" "index var" "insert auto destroy"
          (318238 'move' locid[318236] _indexOfInterest[318217])
          (318250 call _upEndCount _coforallCount[318210] 0)
          { scopeless
            { scopeless
              const tmp[318097] "const" "temp"
              (318099 'move' tmp[318097](318095 'deref'(318094 '_wide_get_locale'(318075 call targetLocales locid))))
              {
                { scopeless
                  (318091 call =(318079 call locDist locid)(318082 'new'(_chpl_manager = unmanaged[220](?))(318090 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (318212 call _downEndCount _coforallCount[318210] nil[44])
                (318102 'coforall on block' 0 tmp[318097])
              }
            }
          }
          label _continueLabel[318222]
          _indexOfInterest[318217]
          _iterator[318218]
        }
        label _breakLabel[318223]
        Defer
        {
          {
            (318254 call _endCountFree _coforallCount[318210])
          }
        }
        (318259 call _waitEndCount _coforallCount[318210] 0)
      }
    }
  }
  function _unknown[51].dsiEqualDMaps[318300](arg _mt[318305]:_MT[238], arg this[318302] :
  Block, arg that[318297] :
  (318296 call Block ?[260])) : _unknown[51] "method"
  {
    (318344 return(318342 call &&(318327 call &&(318315 call ==(318308 call . this c"rank")(318312 call . that c"rank"))(318325 call ==(318318 call . this c"boundingBox")(318322 call . that c"boundingBox")))(318341 call(318333 call .(318330 call . this c"targetLocales") c"equals")(318337 call . that c"targetLocales"))))
  }
  function _unknown[51].dsiEqualDMaps[318354](arg _mt[318359]:_MT[238], arg this[318356] :
  Block, arg that[318352]:_any[178](?)) param : _unknown[51] "method"
  {
    (318362 return 0)
  }
  function _unknown[51].dsiClone[318370](arg _mt[318375]:_MT[238], arg this[318372] :
  Block) : _unknown[51] "method"
  {
    (318391 return(318379 'new'(_chpl_manager = unmanaged[220](?))(318390 call Block boundingBox targetLocales dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity rank idxType sparseLayoutType)))
  }
  function _unknown[51].dsiDestroyDist[318399](arg _mt[318404]:_MT[238], arg this[318401] :
  Block) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[318426] "expr temp" "maybe ref" "no copy" "temp"
      (318429 'move' tmpIter[318426] locDist)
      unknown isRngDomArr[318576] "maybe param" "temp"
      (318591 'move' isRngDomArr[318576](318589 call ||(318578 call isBoundedRange tmpIter[318426])(318587 call ||(318581 call isDomain tmpIter[318426])(318584 call isArray tmpIter[318426]))))
      if isRngDomArr[318576]
      {
        const _coforallCount[318448] "const" "end count" "temp"
        (318513 'move' _coforallCount[318448](318510 call _endCountAlloc 0))
        unknown numTasks[318449] "temp"
        (318497 'move' numTasks[318449](318493 call . tmpIter[318426] c"size"))
        (318488 call _upEndCount _coforallCount[318448] 0 numTasks[318449])
        unknown _indexOfInterest[318455] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318456] "expr temp" "temp"
        (318465 'move' _iterator[318456](318463 call _getIterator tmpIter[318426]))
        Defer
        {
          {
            (318481 call _freeIterator _iterator[318456])
          }
        }
        { scopeless type
          (318470 'move' _indexOfInterest[318455](318467 call iteratorIndex _iterator[318456]))
        }
        ForLoop[318457]
        {
          unknown ld[318474] "coforall index var" "index var" "insert auto destroy"
          (318476 'move' ld[318474] _indexOfInterest[318455])
          { scopeless
            { scopeless
              const tmp[318432] "const" "temp"
              (318434 'move' tmp[318432](318436 'deref'(318437 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318445 call chpl__delete ld)
                }
                (318450 call _downEndCount _coforallCount[318448] nil[44])
                (318440 'coforall on block' 0 tmp[318432])
              }
            }
          }
          label _continueLabel[318460]
          _indexOfInterest[318455]
          _iterator[318456]
        }
        label _breakLabel[318461]
        Defer
        {
          {
            (318500 call _endCountFree _coforallCount[318448])
          }
        }
        (318505 call _waitEndCount _coforallCount[318448] 0 numTasks[318449])
      }
      {
        const _coforallCount[318517] "const" "end count" "temp"
        (318573 'move' _coforallCount[318517](318570 call _endCountAlloc 0))
        unknown _indexOfInterest[318524] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318525] "expr temp" "temp"
        (318534 'move' _iterator[318525](318532 call _getIterator tmpIter[318426]))
        Defer
        {
          {
            (318550 call _freeIterator _iterator[318525])
          }
        }
        { scopeless type
          (318539 'move' _indexOfInterest[318524](318536 call iteratorIndex _iterator[318525]))
        }
        ForLoop[318526]
        {
          unknown ld[318543] "coforall index var" "index var" "insert auto destroy"
          (318545 'move' ld[318543] _indexOfInterest[318524])
          (318557 call _upEndCount _coforallCount[318517] 0)
          { scopeless
            { scopeless
              const tmp[318417] "const" "temp"
              (318419 'move' tmp[318417](318415 'deref'(318414 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318411 call chpl__delete ld)
                }
                (318519 call _downEndCount _coforallCount[318517] nil[44])
                (318422 'coforall on block' 0 tmp[318417])
              }
            }
          }
          label _continueLabel[318529]
          _indexOfInterest[318524]
          _iterator[318525]
        }
        label _breakLabel[318530]
        Defer
        {
          {
            (318561 call _endCountFree _coforallCount[318517])
          }
        }
        (318566 call _waitEndCount _coforallCount[318517] 0)
      }
    }
  }
  function _unknown[51].dsiDisplayRepresentation[318601](arg _mt[318606]:_MT[238], arg this[318603] :
  Block) : _unknown[51] "method" "method overrides"
  {
    (318628 call writeln "boundingBox = " boundingBox)
    (318651 call writeln "targetLocDom = " targetLocDom)
    (318682 call writeln "targetLocales = "(318678 for  tl  in  targetLocales do
    {
      (318675 call . tl c"id")
    } ))
    (318704 call writeln "dataParTasksPerLocale = " dataParTasksPerLocale)
    (318726 call writeln "dataParIgnoreRunningTasks = " dataParIgnoreRunningTasks)
    (318748 call writeln "dataParMinGranularity = " dataParMinGranularity)
    {
      unknown _indexOfInterest[318800] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[318801] "expr temp" "temp"
      (318810 'move' _iterator[318801](318808 call _getIterator targetLocDom))
      Defer
      {
        {
          (318826 call _freeIterator _iterator[318801])
        }
      }
      { scopeless type
        (318815 'move' _indexOfInterest[318800](318812 call iteratorIndex _iterator[318801]))
      }
      ForLoop[318802]
      {
        unknown tli[318819] "index var" "insert auto destroy"
        (318821 'move' tli[318819] _indexOfInterest[318800])
        { scopeless
          (318798 call writeln "locDist[" tli "].myChunk = "(318795 call .(318792 call locDist tli) c"myChunk"))
        }
        label _continueLabel[318805]
        _indexOfInterest[318800]
        _iterator[318801]
      }
      label _breakLabel[318806]
    }
  }
  function _unknown[51].dsiNewRectangularDom[318842](arg _mt[318855]:_MT[238], arg this[318852] :
  Block, param arg rank[318839] :
  int[13], arg idxType[318844]:_any[178](?), param arg stridable[318847] :
  bool[10], arg inds[318850]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(318885 call _cond_test(318862 call != idxType(318859 call . this c"idxType")))
    {
      { scopeless
        (318883 call compilerError "Block domain index type does not match distribution's")
      }
    }
    if(318919 call _cond_test(318896 call != rank(318893 call . this c"rank")))
    {
      { scopeless
        (318917 call compilerError "Block domain rank does not match distribution's")
      }
    }
    { scopeless
      const whole[318931] "const"(318930 call createWholeDomainForInds rank idxType stridable inds)
      (318934 'end of statement')
    }
    { scopeless
      const dummyLBD[318944] "const"(318937 'new'(_chpl_manager = unmanaged[220](?))(318943 call LocBlockDom rank idxType stridable))
      (318947 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[318965] dummyLBD(318962 call chpl__buildArrayRuntimeType(318960 call chpl__ensureDomainExpr(318949 call . this c"targetLocDom"))(318959 'to unmanaged class from unknown'(318958 call LocBlockDom rank idxType stridable)))
      (318968 'end of statement')
    }
    {
      unknown tmpIter[319016] "expr temp" "maybe ref" "no copy" "temp"
      (319019 'move' tmpIter[319016](318971 call . this c"targetLocDom"))
      unknown isRngDomArr[319188] "maybe param" "temp"
      (319203 'move' isRngDomArr[319188](319201 call ||(319190 call isBoundedRange tmpIter[319016])(319199 call ||(319193 call isDomain tmpIter[319016])(319196 call isArray tmpIter[319016]))))
      if isRngDomArr[319188]
      {
        const _coforallCount[319060] "const" "end count" "temp"
        (319125 'move' _coforallCount[319060](319122 call _endCountAlloc 0))
        unknown numTasks[319061] "temp"
        (319109 'move' numTasks[319061](319105 call . tmpIter[319016] c"size"))
        (319100 call _upEndCount _coforallCount[319060] 0 numTasks[319061])
        unknown _indexOfInterest[319067] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[319068] "expr temp" "temp"
        (319077 'move' _iterator[319068](319075 call _getIterator tmpIter[319016]))
        Defer
        {
          {
            (319093 call _freeIterator _iterator[319068])
          }
        }
        { scopeless type
          (319082 'move' _indexOfInterest[319067](319079 call iteratorIndex _iterator[319068]))
        }
        ForLoop[319069]
        {
          unknown localeIdx[319086] "coforall index var" "index var" "insert auto destroy"
          (319088 'move' localeIdx[319086] _indexOfInterest[319067])
          { scopeless
            { scopeless
              const tmp[319022] "const" "temp"
              (319024 'move' tmp[319022](319026 'deref'(319027 '_wide_get_locale'(319032 call(319029 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (319040 call =(319042 call locDomsTemp localeIdx)(319044 'new'(_chpl_manager = unmanaged[220](?))(319048 call LocBlockDom rank idxType stridable(319056 call(319053 call . this c"getChunk") whole localeIdx))))
                }
                (319062 call _downEndCount _coforallCount[319060] nil[44])
                (319035 'coforall on block' 0 tmp[319022])
              }
            }
          }
          label _continueLabel[319072]
          _indexOfInterest[319067]
          _iterator[319068]
        }
        label _breakLabel[319073]
        Defer
        {
          {
            (319112 call _endCountFree _coforallCount[319060])
          }
        }
        (319117 call _waitEndCount _coforallCount[319060] 0 numTasks[319061])
      }
      {
        const _coforallCount[319129] "const" "end count" "temp"
        (319185 'move' _coforallCount[319129](319182 call _endCountAlloc 0))
        unknown _indexOfInterest[319136] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[319137] "expr temp" "temp"
        (319146 'move' _iterator[319137](319144 call _getIterator tmpIter[319016]))
        Defer
        {
          {
            (319162 call _freeIterator _iterator[319137])
          }
        }
        { scopeless type
          (319151 'move' _indexOfInterest[319136](319148 call iteratorIndex _iterator[319137]))
        }
        ForLoop[319138]
        {
          unknown localeIdx[319155] "coforall index var" "index var" "insert auto destroy"
          (319157 'move' localeIdx[319155] _indexOfInterest[319136])
          (319169 call _upEndCount _coforallCount[319129] 0)
          { scopeless
            { scopeless
              const tmp[319008] "const" "temp"
              (319010 'move' tmp[319008](319006 'deref'(319005 '_wide_get_locale'(318980 call(318975 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (319002 call =(318984 call locDomsTemp localeIdx)(318987 'new'(_chpl_manager = unmanaged[220](?))(319001 call LocBlockDom rank idxType stridable(319000 call(318994 call . this c"getChunk") whole localeIdx))))
                }
                (319131 call _downEndCount _coforallCount[319129] nil[44])
                (319013 'coforall on block' 0 tmp[319008])
              }
            }
          }
          label _continueLabel[319141]
          _indexOfInterest[319136]
          _iterator[319137]
        }
        label _breakLabel[319142]
        Defer
        {
          {
            (319173 call _endCountFree _coforallCount[319129])
          }
        }
        (319178 call _waitEndCount _coforallCount[319129] 0)
      }
    }
    (319209 call chpl__delete dummyLBD)
    { scopeless
      unknown dom[319228](319214 'new'(_chpl_manager = unmanaged[220](?))(319227 call BlockDom rank idxType stridable sparseLayoutType(319223 call _cast unmanaged[220](?) this) locDomsTemp whole))
      (319231 'end of statement')
    }
    if(319262 call _cond_test debugBlockDist)
    {
      (319252 call writeln "Creating new Block domain:")
      (319260 call(319256 call . dom c"dsiDisplayRepresentation"))
    }
    (319267 return dom)
  }
  function _unknown[51].dsiNewSparseDom[319278](arg _mt[319289]:_MT[238], arg this[319286] :
  Block, param arg rank[319275] :
  int[13], arg idxType[319280]:_any[178](?), arg dom[319283] :
  _domain) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      unknown ret[319325](319293 'new'(_chpl_manager = unmanaged[220](?))(319324 call SparseBlockDom(rank = rank)(idxType = idxType)(sparseLayoutType = sparseLayoutType)(stridable =(319303 call . dom c"stridable"))(dist =(319310 call _to_unmanaged this))(whole =(319318 call .(319313 call . dom c"_value") c"whole"))(parentDom = dom)))
      (319328 'end of statement')
    }
    (319335 call(319331 call . ret c"setup"))
    (319338 return ret)
  }
  function _unknown[51].writeThis[319347](arg _mt[319352]:_MT[238], arg this[319349] :
  Block, arg x[319345]:_any[178](?)) : _unknown[51] throws "method"
  {
    (319375 call <~>(319372 call <~> x "Block") "\n")
    (319400 call <~>(319397 call <~> x "-------") "\n")
    (319427 call <~>(319424 call <~>(319421 call <~> x "distributes: ") boundingBox) "\n")
    (319454 call <~>(319451 call <~>(319448 call <~> x "across locales: ") targetLocales) "\n")
    (319481 call <~>(319478 call <~>(319475 call <~> x "indexed via: ") targetLocDom) "\n")
    (319505 call <~>(319502 call <~> x "resulting in: ") "\n")
    {
      unknown _indexOfInterest[319594] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[319595] "expr temp" "temp"
      (319604 'move' _iterator[319595](319602 call _getIterator targetLocDom))
      Defer
      {
        {
          (319620 call _freeIterator _iterator[319595])
        }
      }
      { scopeless type
        (319609 'move' _indexOfInterest[319594](319606 call iteratorIndex _iterator[319595]))
      }
      ForLoop[319596]
      {
        unknown locid[319613] "index var" "insert auto destroy"
        (319615 'move' locid[319613] _indexOfInterest[319594])
        { scopeless
          (319591 call <~>(319588 call <~>(319579 call <~>(319560 call <~>(319550 call <~>(319531 call <~>(319528 call <~> x "  [") locid) "] locale ")(319559 '_wide_get_node'(319555 call locDist locid))) " owns chunk: ")(319585 call .(319584 call locDist locid) c"myChunk")) "\n")
        }
        label _continueLabel[319599]
        _indexOfInterest[319594]
        _iterator[319595]
      }
      label _breakLabel[319600]
    }
  }
  function _unknown[51].dsiIndexToLocale[319636](arg _mt[319641]:_MT[238], arg this[319638] :
  Block, arg ind[319633] :
  idxType) : _unknown[51] "method"
  {
    (319654 return(319653 call targetLocales(319651 call targetLocsIdx ind)))
  }
  where {
    (319645 call == rank 1)
  }
  function _unknown[51].dsiIndexToLocale[319670](arg _mt[319675]:_MT[238], arg this[319672] :
  Block, arg ind[319667] :
  (319665 call * rank idxType)) : _unknown[51] "method"
  {
    (319684 return(319683 call targetLocales(319681 call targetLocsIdx ind)))
  }
  function _unknown[51].getChunk[319694](arg _mt[319701]:_MT[238], arg this[319698] :
  Block, arg inds[319692]:_any[178](?), arg locid[319696]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      const chunk[319719] "const"(319718 call(319707 call .(319706 call locDist locid) c"myChunk")(319716 'expand_tuple'(319715 call(319711 call . inds c"getIndices"))))
      (319722 'end of statement')
    }
    if(319843 call _cond_test sanityCheckDistribution)
    {
      { scopeless
        if(319839 call _cond_test(319730 call >(319726 call . chunk c"size") 0))
        {
          if(319796 call _cond_test(319740 call !=(319738 call targetLocsIdx(319734 call . chunk c"low")) locid))
          {
            { scopeless
              (319794 call writeln "["(319746 call . here c"id") "] "(319767 call . chunk c"low") " is in my chunk but maps to "(319793 call targetLocsIdx(319789 call . chunk c"low")))
            }
          }
          if(319834 call _cond_test(319810 call !=(319808 call targetLocsIdx(319804 call . chunk c"high")) locid))
          {
            { scopeless
              (319832 call writeln "["(319816 call . here c"id") "] "(319821 call . chunk c"high") " is in my chunk but maps to "(319831 call targetLocsIdx(319827 call . chunk c"high")))
            }
          }
        }
      }
    }
    (319849 return chunk)
  }
  function _unknown[51].targetLocsIdx[319860](arg _mt[319865]:_MT[238], arg this[319862] :
  Block, arg ind[319857] :
  idxType) : _unknown[51] "method"
  {
    (319877 return(319876 call targetLocsIdx(319873 call _build_tuple ind)))
  }
  where {
    (319869 call == rank 1)
  }
  function _unknown[51].targetLocsIdx[319893](arg _mt[319898]:_MT[238], arg this[319895] :
  Block, arg ind[319890] :
  (319888 call * rank idxType)) : _unknown[51] "method"
  {
    { scopeless
      unknown result[319904](319902 call * rank int[13])
      (319907 'end of statement')
    }
    {
      unknown i[319992] 0
      unknown tmp[319993] "maybe param" "temp"
      (320005 'move' tmp[319993](320003 call chpl_compute_low_param_loop_bound 0(319912 call - rank 1)))
      unknown tmp[319994] "maybe param" "temp"
      (320015 'move' tmp[319994](320013 call chpl_compute_high_param_loop_bound 0(320010 call - rank 1)))
      unknown tmp[319995] "maybe param" "temp"
      (320018 'move' tmp[319995] 1)
      ParamForLoop[320020]
      { i[319992] tmp[319993] tmp[319994] tmp[319995]
        { scopeless
          (319989 call =(319919 call result i)(319988 call max 0(319987 call min(319938 call _cast int[13](319935 call -(319931 call .(319930 call(319925 call . targetLocDom c"dim") i) c"size") 1))(319985 call _cast int[13](319982 call /(319970 call *(319955 call -(319944 call ind i)(319952 call .(319951 call(319946 call . boundingBox c"dim") i) c"low"))(319968 call _cast idxType(319964 call .(319963 call(319958 call . targetLocDom c"dim") i) c"size")))(319979 call .(319978 call(319973 call . boundingBox c"dim") i) c"size"))))))
        }
      }
      label _unused_continueLabel[319997]
      label _breakLabel[319996]
    }
    (320041 return(320038 IfExpr (320031 call == rank 1) then
    { scopeless
      (320036 call result 0)
    } else
    { scopeless
      result
    } ))
  }
  function _unknown[51].activeTargetLocales[320054](arg _mt[320059]:_MT[238], arg this[320056] :
  Block, const arg space[320050] :
  _domain =
  boundingBox) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const locSpace[320071] "const"(320069 call chpl__buildDomainExpr(320067 'expand_tuple'(320066 call(320062 call . space c"dims"))))
      (320074 'end of statement')
    }
    { scopeless
      const low[320086] "const"(320085 call chpl__tuplify(320083 call targetLocsIdx(320079 call . locSpace c"first")))
      (320089 'end of statement')
    }
    { scopeless
      const high[320100] "const"(320099 call chpl__tuplify(320097 call targetLocsIdx(320093 call . locSpace c"last")))
      (320103 'end of statement')
    }
    { scopeless
      unknown dims[320115](320113 call * rank(320112 call range(320110 'typeof'(320109 call low 0))))
      (320118 'end of statement')
    }
    {
      unknown i[320144] 0
      unknown tmp[320145] "maybe param" "temp"
      (320157 'move' tmp[320145](320155 call chpl_compute_low_param_loop_bound 0(320122 call - rank 1)))
      unknown tmp[320146] "maybe param" "temp"
      (320167 'move' tmp[320146](320165 call chpl_compute_high_param_loop_bound 0(320162 call - rank 1)))
      unknown tmp[320147] "maybe param" "temp"
      (320170 'move' tmp[320147] 1)
      ParamForLoop[320172]
      { i[320144] tmp[320145] tmp[320146] tmp[320147]
        {
          (320140 call =(320129 call dims i)(320138 call chpl_build_bounded_range(320133 call low i)(320137 call high i)))
        }
      }
      label _unused_continueLabel[320149]
      label _breakLabel[320148]
    }
    {
      unknown _indexOfInterest[320217] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320218] "expr temp" "temp"
      (320227 'move' _iterator[320218](320225 call _getIterator(320185 call chpl__buildDomainExpr(320183 'expand_tuple' dims))))
      Defer
      {
        {
          (320244 call _freeIterator _iterator[320218])
        }
      }
      { scopeless type
        (320233 'move' _indexOfInterest[320217](320230 call iteratorIndex _iterator[320218]))
      }
      ForLoop[320219]
      {
        unknown i[320237] "index var" "insert auto destroy"
        (320239 'move' i[320237] _indexOfInterest[320217])
        {
          { scopeless
            const chunk[320193] "const"(320192 call chpl__computeBlock i targetLocDom boundingBox)
            (320196 'end of statement')
          }
          if(320212 call _cond_test(320207 call >(320203 call .(320202 call locSpace(320200 'expand_tuple' chunk)) c"size") 0))
          {
            { scopeless
              (320210 yield i)
            }
          }
        }
        label _continueLabel[320222]
        _indexOfInterest[320217]
        _iterator[320218]
      }
      label _breakLabel[320223]
    }
  }
  function chpl__computeBlock[320257](arg locid[320255]:_any[178](?), arg targetLocBox[320259]:_any[178](?), arg boundingBox[320261]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[320267] "param"(320264 call . targetLocBox c"rank")
      (320270 'end of statement')
    }
    unknown idxType[320282] "type variable"(320279 call .(320278 call(320275 call chpl__tuplify boundingBox) 0) c"idxType")
    { scopeless
      unknown inds[320292](320290 call * rank(320289 call range idxType))
      (320295 'end of statement')
    }
    {
      unknown i[320407] 0
      unknown tmp[320408] "maybe param" "temp"
      (320420 'move' tmp[320408](320418 call chpl_compute_low_param_loop_bound 0(320299 call - rank 1)))
      unknown tmp[320409] "maybe param" "temp"
      (320430 'move' tmp[320409](320428 call chpl_compute_high_param_loop_bound 0(320425 call - rank 1)))
      unknown tmp[320410] "maybe param" "temp"
      (320433 'move' tmp[320410] 1)
      ParamForLoop[320435]
      { i[320407] tmp[320408] tmp[320409] tmp[320410]
        {
          { scopeless
            const lo[320313] "const"(320310 call .(320309 call(320304 call . boundingBox c"dim") i) c"low")
            (320316 'end of statement')
          }
          { scopeless
            const hi[320328] "const"(320325 call .(320324 call(320319 call . boundingBox c"dim") i) c"high")
            (320331 'end of statement')
          }
          { scopeless
            const numelems[320339] "const"(320337 call +(320334 call - hi lo) 1)
            (320342 'end of statement')
          }
          { scopeless
            const numlocs[320353] "const"(320350 call .(320349 call(320344 call . targetLocBox c"dim") i) c"size")
            (320356 'end of statement')
          }
          { scopeless
            const tmp[320383] "const" "temp"(320382 call _computeBlock numelems numlocs(320372 call(320369 call chpl__tuplify locid) i)(320376 call max idxType)(320380 call min idxType) lo)
            (320390 call _check_tuple_var_decl tmp[320383] 2)
            const blo[320357] "const"(320384 call tmp[320383] 0)
            const bhi[320359] "const"(320387 call tmp[320383] 1)
            (320395 'end of statement')
          }
          (320404 call =(320399 call inds i)(320402 call chpl_build_bounded_range blo bhi))
        }
      }
      label _unused_continueLabel[320412]
      label _breakLabel[320411]
    }
    (320445 return inds)
  }
  function _unknown[51].init[320456](arg _mt[320475]:_MT[238], arg this[320472] :
  LocBlock, param arg rank[320453] :
  int[13], arg idxType[320458]:_any[178](?), arg locid[320460]:_any[178](?), arg boundingBox[320462]:_any[178](?), arg targetLocDom[320469] :
  (320467 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[51] "method"
  {
    (320482 call =(320478 call . this c"rank") rank)
    (320491 call =(320487 call . this c"idxType") idxType)
    { scopeless
      const inds[320503] "const"(320502 call chpl__computeBlock(320498 call chpl__tuplify locid) targetLocDom boundingBox)
      (320506 'end of statement')
    }
    (320513 call = myChunk(320511 call chpl__buildDomainExpr(320509 'expand_tuple' inds)))
  }
  function _unknown[51].init[320523](arg _mt[320534]:_MT[238], arg this[320531] :
  LocBlock, param arg rank[320521]:_any[178](?), arg idxType[320525]:_any[178](?), param arg dummy[320528] :
  bool[10]) : _unknown[51] "method"
  {
    (320542 call =(320538 call . this c"rank") rank)
    (320551 call =(320547 call . this c"idxType") idxType)
  }
  where {
    dummy
  }
  function _unknown[51].dsiMyDist[320560](arg _mt[320565]:_MT[238], arg this[320562] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (320568 return dist)
    }
  }
  function _unknown[51].dsiDisplayRepresentation[320576](arg _mt[320581]:_MT[238], arg this[320578] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    (320603 call writeln "whole = " whole)
    {
      unknown _indexOfInterest[320657] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320658] "expr temp" "temp"
      (320667 'move' _iterator[320658](320665 call _getIterator(320608 call . dist c"targetLocDom")))
      Defer
      {
        {
          (320684 call _freeIterator _iterator[320658])
        }
      }
      { scopeless type
        (320673 'move' _indexOfInterest[320657](320670 call iteratorIndex _iterator[320658]))
      }
      ForLoop[320659]
      {
        unknown tli[320677] "index var" "insert auto destroy"
        (320679 'move' tli[320677] _indexOfInterest[320657])
        { scopeless
          (320655 call writeln "locDoms[" tli "].myBlock = "(320652 call .(320651 call locDoms tli) c"myBlock"))
        }
        label _continueLabel[320662]
        _indexOfInterest[320657]
        _iterator[320658]
      }
      label _breakLabel[320663]
    }
  }
  function _unknown[51].dsiDims[320696](arg _mt[320701]:_MT[238], arg this[320698] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (320709 return(320708 call(320704 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiDim[320721](arg _mt[320726]:_MT[238], arg this[320723] :
  BlockDom, arg d[320718] :
  int[13]) : _unknown[51] "method"
  {
    { scopeless
      (320735 return(320734 call(320729 call . whole c"dim") d))
    }
  }
  function _unknown[51].getLocDom[320745](arg _mt[320750]:_MT[238], arg this[320747] :
  BlockDom, arg localeIdx[320743]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (320756 return(320755 call locDoms localeIdx))
    }
  }
  function _matchArgsShape[320765](arg rangeType[320763]:_any[178](?), arg scalarType[320767]:_any[178](?), arg args[320769]:_any[178](?)) type : _unknown[51]
  {
    function helper[320777](param arg i[320774] :
    int[13]) type : _unknown[51]
    {
      if(320852 call _cond_test(320784 call == i(320781 call . args c"size")))
      {
        if(320803 call _cond_test(320792 call isCollapsedDimension(320790 call args i)))
        {
          { scopeless
            (320796 return(320794 call _build_tuple scalarType))
          }
        }
        {
          { scopeless
            (320801 return(320799 call _build_tuple rangeType))
          }
        }
      }
      {
        if(320845 call _cond_test(320816 call isCollapsedDimension(320814 call args i)))
        {
          { scopeless
            (320829 return(320827 call _build_tuple scalarType(320825 'expand_tuple'(320824 call helper(320821 call + i 1)))))
          }
        }
        {
          { scopeless
            (320843 return(320841 call _build_tuple rangeType(320839 'expand_tuple'(320838 call helper(320835 call + i 1)))))
          }
        }
      }
    }
    (320864 return(320863 call helper 0))
  }
  function _unknown[51].these[320871](arg _mt[320876]:_MT[238], arg this[320873] :
  BlockDom) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[320883] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320884] "expr temp" "temp"
      (320893 'move' _iterator[320884](320891 call _getIterator whole))
      Defer
      {
        {
          (320909 call _freeIterator _iterator[320884])
        }
      }
      { scopeless type
        (320898 'move' _indexOfInterest[320883](320895 call iteratorIndex _iterator[320884]))
      }
      ForLoop[320885]
      {
        unknown i[320902] "index var" "insert auto destroy"
        (320904 'move' i[320902] _indexOfInterest[320883])
        { scopeless
          (320881 yield i)
        }
        label _continueLabel[320888]
        _indexOfInterest[320883]
        _iterator[320884]
      }
      label _breakLabel[320889]
    }
  }
  function _unknown[51].these[320926](arg _mt[320931]:_MT[238], arg this[320928] :
  BlockDom, param arg tag[320923] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const maxTasks[320944] "const"(320941 call . dist c"dataParTasksPerLocale")
      (320947 'end of statement')
    }
    { scopeless
      const ignoreRunning[320953] "const"(320950 call . dist c"dataParIgnoreRunningTasks")
      (320956 'end of statement')
    }
    { scopeless
      const minSize[320961] "const"(320958 call . dist c"dataParMinGranularity")
      (320964 'end of statement')
    }
    { scopeless
      const wholeLow[320969] "const"(320966 call . whole c"low")
      (320972 'end of statement')
    }
    { scopeless
      const hereId[320977] "const"(320974 call . here c"id")
      (320980 'end of statement')
    }
    { scopeless
      const hereIgnoreRunning[320995] "const"(320992 IfExpr (320988 call ==(320986 call(320982 call . here c"runningTasks")) 1) then
      { scopeless
        1
      } else
      { scopeless
        ignoreRunning
      } )
      (320998 'end of statement')
    }
    {
      unknown tmpIter[321235] "expr temp" "maybe ref" "no copy" "temp"
      (321238 'move' tmpIter[321235] locDoms)
      unknown isRngDomArr[321571] "maybe param" "temp"
      (321586 'move' isRngDomArr[321571](321584 call ||(321573 call isBoundedRange tmpIter[321235])(321582 call ||(321576 call isDomain tmpIter[321235])(321579 call isArray tmpIter[321235]))))
      if isRngDomArr[321571]
      {
        const _coforallCount[321443] "const" "end count" "temp"
        (321508 'move' _coforallCount[321443](321505 call _endCountAlloc 0))
        unknown numTasks[321444] "temp"
        (321492 'move' numTasks[321444](321488 call . tmpIter[321235] c"size"))
        (321483 call _upEndCount _coforallCount[321443] 0 numTasks[321444])
        unknown _indexOfInterest[321450] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321451] "expr temp" "temp"
        (321460 'move' _iterator[321451](321458 call _getIterator tmpIter[321235]))
        Defer
        {
          {
            (321476 call _freeIterator _iterator[321451])
          }
        }
        { scopeless type
          (321465 'move' _indexOfInterest[321450](321462 call iteratorIndex _iterator[321451]))
        }
        ForLoop[321452]
        {
          unknown locDom[321469] "coforall index var" "index var" "insert auto destroy"
          (321471 'move' locDom[321469] _indexOfInterest[321450])
          { scopeless
            { scopeless
              const tmp[321241] "const" "temp"
              (321243 'move' tmp[321241](321245 'deref'(321246 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[321254] "const"(321266 IfExpr (321256 call ==(321258 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (321268 'end of statement')
                  }
                  unknown strType[321269] "type variable"(321271 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[321275] "const"(321283 call(321277 call .(321279 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (321286 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[321288](321290 call * rank idxType)
                    (321294 'end of statement')
                  }
                  {
                    unknown i[321296] 0
                    unknown tmp[321299] "maybe param" "temp"
                    (321301 'move' tmp[321299](321304 call chpl_compute_low_param_loop_bound 0(321307 call -(321309 call . tmpBlock c"rank") 1)))
                    unknown tmp[321313] "maybe param" "temp"
                    (321315 'move' tmp[321313](321318 call chpl_compute_high_param_loop_bound 0(321321 call -(321323 call . tmpBlock c"rank") 1)))
                    unknown tmp[321327] "maybe param" "temp"
                    (321329 'move' tmp[321327] 1)
                    ParamForLoop[321332]
                    { i[321296] tmp[321299] tmp[321313] tmp[321327]
                      {
                        { scopeless
                          const stride[321340] "const"(321342 call .(321347 call(321344 call . tmpBlock c"dim") i) c"stride")
                          (321351 'end of statement')
                        }
                        if(321353 call _cond_test(321355 call &&(321357 call < stride 0)(321361 call != strType idxType)))
                        {
                          { scopeless
                            (321367 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (321371 call =(321373 call locOffset i)(321376 call /(321378 call .(321383 call(321380 call . tmpBlock c"dim") i) c"first")(321387 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[321390]
                    label _breakLabel[321392]
                  }
                  {
                    unknown _indexOfInterest[321395] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321397] "expr temp" "temp"
                    (321399 'move' _iterator[321397](321402 call _getIterator(321407 call(321404 call . tmpBlock c"these")(321409 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321418 call _freeIterator _iterator[321397])
                      }
                    }
                    { scopeless type
                      (321422 'move' _indexOfInterest[321395](321425 call iteratorIndex _iterator[321397]))
                    }
                    ForLoop[321427]
                    {
                      unknown followThis[321430] "index var" "insert auto destroy"
                      (321432 'move' followThis[321430] _indexOfInterest[321395])
                      { scopeless
                        (321436 yield followThis)
                      }
                      label _continueLabel[321438]
                      _indexOfInterest[321395]
                      _iterator[321397]
                    }
                    label _breakLabel[321440]
                  }
                }
                (321445 call _downEndCount _coforallCount[321443] nil[44])
                (321249 'coforall on block' 0 tmp[321241])
              }
            }
          }
          label _continueLabel[321455]
          _indexOfInterest[321450]
          _iterator[321451]
        }
        label _breakLabel[321456]
        Defer
        {
          {
            (321495 call _endCountFree _coforallCount[321443])
          }
        }
        (321500 call _waitEndCount _coforallCount[321443] 0 numTasks[321444])
      }
      {
        const _coforallCount[321512] "const" "end count" "temp"
        (321568 'move' _coforallCount[321512](321565 call _endCountAlloc 0))
        unknown _indexOfInterest[321519] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321520] "expr temp" "temp"
        (321529 'move' _iterator[321520](321527 call _getIterator tmpIter[321235]))
        Defer
        {
          {
            (321545 call _freeIterator _iterator[321520])
          }
        }
        { scopeless type
          (321534 'move' _indexOfInterest[321519](321531 call iteratorIndex _iterator[321520]))
        }
        ForLoop[321521]
        {
          unknown locDom[321538] "coforall index var" "index var" "insert auto destroy"
          (321540 'move' locDom[321538] _indexOfInterest[321519])
          (321552 call _upEndCount _coforallCount[321512] 0)
          { scopeless
            { scopeless
              const tmp[321227] "const" "temp"
              (321229 'move' tmp[321227](321225 'deref'(321224 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[321014] "const"(321011 IfExpr (321007 call ==(321003 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (321017 'end of statement')
                  }
                  unknown strType[321023] "type variable"(321022 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[321036] "const"(321035 call(321030 call .(321027 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (321039 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[321044](321042 call * rank idxType)
                    (321047 'end of statement')
                  }
                  {
                    unknown i[321132] 0
                    unknown tmp[321133] "maybe param" "temp"
                    (321145 'move' tmp[321133](321143 call chpl_compute_low_param_loop_bound 0(321054 call -(321050 call . tmpBlock c"rank") 1)))
                    unknown tmp[321134] "maybe param" "temp"
                    (321158 'move' tmp[321134](321156 call chpl_compute_high_param_loop_bound 0(321150 call -(321152 call . tmpBlock c"rank") 1)))
                    unknown tmp[321135] "maybe param" "temp"
                    (321161 'move' tmp[321135] 1)
                    ParamForLoop[321163]
                    { i[321132] tmp[321133] tmp[321134] tmp[321135]
                      {
                        { scopeless
                          const stride[321068] "const"(321065 call .(321064 call(321059 call . tmpBlock c"dim") i) c"stride")
                          (321071 'end of statement')
                        }
                        if(321104 call _cond_test(321081 call &&(321075 call < stride 0)(321079 call != strType idxType)))
                        {
                          { scopeless
                            (321102 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (321129 call =(321112 call locOffset i)(321127 call /(321120 call .(321119 call(321114 call . tmpBlock c"dim") i) c"first")(321125 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[321137]
                    label _breakLabel[321136]
                  }
                  {
                    unknown _indexOfInterest[321190] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321191] "expr temp" "temp"
                    (321200 'move' _iterator[321191](321198 call _getIterator(321186 call(321174 call . tmpBlock c"these")(321178 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321217 call _freeIterator _iterator[321191])
                      }
                    }
                    { scopeless type
                      (321206 'move' _indexOfInterest[321190](321203 call iteratorIndex _iterator[321191]))
                    }
                    ForLoop[321192]
                    {
                      unknown followThis[321210] "index var" "insert auto destroy"
                      (321212 'move' followThis[321210] _indexOfInterest[321190])
                      { scopeless
                        (321188 yield followThis)
                      }
                      label _continueLabel[321195]
                      _indexOfInterest[321190]
                      _iterator[321191]
                    }
                    label _breakLabel[321196]
                  }
                }
                (321514 call _downEndCount _coforallCount[321512] nil[44])
                (321232 'coforall on block' 0 tmp[321227])
              }
            }
          }
          label _continueLabel[321524]
          _indexOfInterest[321519]
          _iterator[321520]
        }
        label _breakLabel[321525]
        Defer
        {
          {
            (321556 call _endCountFree _coforallCount[321512])
          }
        }
        (321561 call _waitEndCount _coforallCount[321512] 0)
      }
    }
  }
  where {
    (320938 call == tag(320935 call . iterKind c"leader"))
  }
  function _unknown[51].these[321600](arg _mt[321607]:_MT[238], arg this[321604] :
  BlockDom, param arg tag[321597] :
  iterKind, arg followThis[321602]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[321620](arg rangeTuple[321618]:_any[178](?), param arg i[321624] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (321665 return(321662 IfExpr (321636 call == i(321634 call -(321630 call . rangeTuple c"size") 1)) then
        { scopeless
          (321642 call .(321641 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (321660 call ||(321649 call .(321648 call rangeTuple i) c"stridable")(321659 call anyStridable rangeTuple(321657 call + i 1)))
        } ))
      }
    }
    if(321694 call _cond_test chpl__testParFlag)
    {
      { scopeless
        (321692 call chpl__testParWriteln "Block domain follower invoked on " followThis)
      }
    }
    { scopeless
      unknown t[321714](321712 call * rank(321711 call range idxType(stridable =(321708 call || stridable(321707 call anyStridable followThis)))))
      (321717 'end of statement')
    }
    unknown strType[321722] "type variable"(321721 call chpl__signedType idxType)
    {
      unknown i[321841] 0
      unknown tmp[321842] "maybe param" "temp"
      (321854 'move' tmp[321842](321852 call chpl_compute_low_param_loop_bound 0(321728 call - rank 1)))
      unknown tmp[321843] "maybe param" "temp"
      (321864 'move' tmp[321843](321862 call chpl_compute_high_param_loop_bound 0(321859 call - rank 1)))
      unknown tmp[321844] "maybe param" "temp"
      (321867 'move' tmp[321844] 1)
      ParamForLoop[321869]
      { i[321841] tmp[321842] tmp[321843] tmp[321844]
        {
          { scopeless
            unknown stride[321745](321743 call _cast strType(321739 call .(321738 call(321733 call . whole c"dim") i) c"stride"))
            (321748 'end of statement')
          }
          { scopeless
            unknown low[321766](321764 call _cast idxType(321761 call * stride(321759 call _cast strType(321755 call .(321754 call followThis i) c"low"))))
            (321769 'end of statement')
          }
          { scopeless
            unknown high[321786](321784 call _cast idxType(321781 call * stride(321779 call _cast strType(321775 call .(321774 call followThis i) c"high"))))
            (321789 'end of statement')
          }
          (321838 call =(321793 call t i)(321837 call(321828 call .(321826 call chpl_by(321814 call +(321802 call chpl_by(321796 call chpl_build_bounded_range low high)(321800 call _cast strType stride))(321811 call .(321810 call(321805 call . whole c"dim") i) c"alignedLow"))(321824 call _cast strType(321820 call .(321819 call followThis i) c"stride"))) c"safeCast")(321835 'typeof'(321834 call t i))))
        }
      }
      label _unused_continueLabel[321846]
      label _breakLabel[321845]
    }
    {
      unknown _indexOfInterest[321888] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[321889] "expr temp" "temp"
      (321898 'move' _iterator[321889](321896 call _getIterator(321882 call chpl__buildDomainExpr(321880 'expand_tuple' t))))
      Defer
      {
        {
          (321915 call _freeIterator _iterator[321889])
        }
      }
      { scopeless type
        (321904 'move' _indexOfInterest[321888](321901 call iteratorIndex _iterator[321889]))
      }
      ForLoop[321890]
      {
        unknown i[321908] "index var" "insert auto destroy"
        (321910 'move' i[321908] _indexOfInterest[321888])
        {
          (321885 yield i)
        }
        label _continueLabel[321893]
        _indexOfInterest[321888]
        _iterator[321889]
      }
      label _breakLabel[321894]
    }
  }
  where {
    (321614 call == tag(321611 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[321930](arg _mt[321935]:_MT[238], arg this[321932] :
  BlockDom, arg x[321928]:_any[178](?)) : _unknown[51] "method"
  {
    (321939 call <~> x whole)
  }
  function _unknown[51].dsiBuildArray[321950](arg _mt[321959]:_MT[238], arg this[321956] :
  BlockDom, arg eltType[321948]:_any[178](?), param arg initElts[321953] :
  bool[10]) : _unknown[51] "method"
  {
    { scopeless
      const dom[321962] "const" this
      (321965 'end of statement')
    }
    { scopeless
      const creationLocale[321971] "const"(321968 call . here c"id")
      (321974 'end of statement')
    }
    { scopeless
      const dummyLBD[321984] "const"(321977 'new'(_chpl_manager = unmanaged[220](?))(321983 call LocBlockDom rank idxType stridable))
      (321987 'end of statement')
    }
    { scopeless
      const dummyLBA[322000] "const"(321990 'new'(_chpl_manager = unmanaged[220](?))(321999 call LocBlockArr eltType rank idxType stridable dummyLBD 0))
      (322003 'end of statement')
    }
    { scopeless
      unknown locArrTemp[322025] dummyLBA(322022 call chpl__buildArrayRuntimeType(322020 call chpl__ensureDomainExpr(322008 call .(322005 call . dom c"dist") c"targetLocDom"))(322019 'to unmanaged class from unknown'(322018 call LocBlockArr eltType rank idxType stridable)))
      (322028 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[322038](322037 'to unmanaged class from unknown'(322036 'to nilable class from type'(322035 call LocBlockArr eltType rank idxType stridable)))
      (322041 'end of statement')
    }
    {
      unknown tmpIter[322131] "expr temp" "maybe ref" "no copy" "temp"
      (322134 'move' tmpIter[322131](322047 call .(322044 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[322332] "maybe param" "temp"
      (322347 'move' isRngDomArr[322332](322345 call ||(322334 call isBoundedRange tmpIter[322131])(322343 call ||(322337 call isDomain tmpIter[322131])(322340 call isArray tmpIter[322131]))))
      if isRngDomArr[322332]
      {
        const _coforallCount[322204] "const" "end count" "temp"
        (322269 'move' _coforallCount[322204](322266 call _endCountAlloc 0))
        unknown numTasks[322205] "temp"
        (322253 'move' numTasks[322205](322249 call . tmpIter[322131] c"size"))
        (322244 call _upEndCount _coforallCount[322204] 0 numTasks[322205])
        unknown _indexOfInterest[322211] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322212] "expr temp" "temp"
        (322221 'move' _iterator[322212](322219 call _getIterator tmpIter[322131]))
        Defer
        {
          {
            (322237 call _freeIterator _iterator[322212])
          }
        }
        { scopeless type
          (322226 'move' _indexOfInterest[322211](322223 call iteratorIndex _iterator[322212]))
        }
        ForLoop[322213]
        {
          unknown localeIdx[322230] "coforall index var" "index var" "insert auto destroy"
          (322232 'move' localeIdx[322230] _indexOfInterest[322211])
          { scopeless
            { scopeless
              const tmp[322140] "const" "temp"
              (322142 'move' tmp[322140](322144 'deref'(322145 '_wide_get_locale'(322153 call(322147 call .(322149 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[322161] "const"(322162 'new'(_chpl_manager = unmanaged[220](?))(322166 call LocBlockArr eltType rank idxType stridable(322175 call(322172 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (322180 'end of statement')
                  }
                  (322182 call =(322184 call locArrTemp localeIdx) LBA)
                  if(322188 call _cond_test(322190 call ==(322192 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (322199 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322206 call _downEndCount _coforallCount[322204] nil[44])
                (322156 'coforall on block' 0 tmp[322140])
                (322136 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322216]
          _indexOfInterest[322211]
          _iterator[322212]
        }
        label _breakLabel[322217]
        Defer
        {
          {
            (322256 call _endCountFree _coforallCount[322204])
          }
        }
        (322261 call _waitEndCount _coforallCount[322204] 0 numTasks[322205])
      }
      {
        const _coforallCount[322273] "const" "end count" "temp"
        (322329 'move' _coforallCount[322273](322326 call _endCountAlloc 0))
        unknown _indexOfInterest[322280] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322281] "expr temp" "temp"
        (322290 'move' _iterator[322281](322288 call _getIterator tmpIter[322131]))
        Defer
        {
          {
            (322306 call _freeIterator _iterator[322281])
          }
        }
        { scopeless type
          (322295 'move' _indexOfInterest[322280](322292 call iteratorIndex _iterator[322281]))
        }
        ForLoop[322282]
        {
          unknown localeIdx[322299] "coforall index var" "index var" "insert auto destroy"
          (322301 'move' localeIdx[322299] _indexOfInterest[322280])
          (322313 call _upEndCount _coforallCount[322273] 0)
          { scopeless
            { scopeless
              const tmp[322122] "const" "temp"
              (322124 'move' tmp[322122](322120 'deref'(322119 '_wide_get_locale'(322067 call(322062 call .(322059 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[322089] "const"(322070 'new'(_chpl_manager = unmanaged[220](?))(322088 call LocBlockArr eltType rank idxType stridable(322085 call(322080 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (322092 'end of statement')
                  }
                  (322099 call =(322097 call locArrTemp localeIdx) LBA)
                  if(322114 call _cond_test(322107 call ==(322103 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (322111 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322275 call _downEndCount _coforallCount[322273] nil[44])
                (322127 'coforall on block' 0 tmp[322122])
                (322055 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322285]
          _indexOfInterest[322280]
          _iterator[322281]
        }
        label _breakLabel[322286]
        Defer
        {
          {
            (322317 call _endCountFree _coforallCount[322273])
          }
        }
        (322322 call _waitEndCount _coforallCount[322273] 0)
      }
    }
    (322354 call chpl__delete dummyLBA dummyLBD)
    { scopeless
      unknown arr[322382](322359 'new'(_chpl_manager = unmanaged[220](?))(322381 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom =(322375 call _to_unmanaged dom))(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (322385 'end of statement')
    }
    if(322404 call _cond_test(322393 call &&(322389 call . arr c"doRADOpt") disableBlockLazyRAD))
    {
      { scopeless
        (322402 call(322398 call . arr c"setupRADOpt"))
      }
    }
    (322410 return arr)
  }
  function _unknown[51].dsiNumIndices[322417](arg _mt[322422]:_MT[238], arg this[322419] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322428 return(322425 call . whole c"size"))
    }
  }
  function _unknown[51].dsiLow[322436](arg _mt[322441]:_MT[238], arg this[322438] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322447 return(322444 call . whole c"low"))
    }
  }
  function _unknown[51].dsiHigh[322455](arg _mt[322460]:_MT[238], arg this[322457] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322466 return(322463 call . whole c"high"))
    }
  }
  function _unknown[51].dsiStride[322474](arg _mt[322479]:_MT[238], arg this[322476] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322485 return(322482 call . whole c"stride"))
    }
  }
  function _unknown[51].dsiAlignedLow[322493](arg _mt[322498]:_MT[238], arg this[322495] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322504 return(322501 call . whole c"alignedLow"))
    }
  }
  function _unknown[51].dsiAlignedHigh[322512](arg _mt[322517]:_MT[238], arg this[322514] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322523 return(322520 call . whole c"alignedHigh"))
    }
  }
  function _unknown[51].dsiAlignment[322531](arg _mt[322536]:_MT[238], arg this[322533] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322542 return(322539 call . whole c"alignment"))
    }
  }
  function _unknown[51].dsiSetIndices[322554](arg _mt[322559]:_MT[238], arg this[322556] :
  BlockDom, arg x[322551] :
  _domain) : _unknown[51] "method"
  {
    if(322573 call _cond_test(322566 call !=(322562 call . x c"rank") rank))
    {
      { scopeless
        (322571 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322594 call _cond_test(322587 call !=(322583 call .(322580 call . x c"_value") c"idxType") idxType))
    {
      { scopeless
        (322592 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322601 call = whole x)
    (322606 call setup)
    if(322635 call _cond_test debugBlockDist)
    {
      (322628 call writeln "Setting indices of Block domain:")
      (322633 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiSetIndices[322646](arg _mt[322651]:_MT[238], arg this[322648] :
  BlockDom, arg x[322644]:_any[178](?)) : _unknown[51] "method"
  {
    if(322665 call _cond_test(322658 call !=(322654 call . x c"size") rank))
    {
      { scopeless
        (322663 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322686 call _cond_test(322679 call !=(322675 call .(322674 call x 0) c"idxType") idxType))
    {
      { scopeless
        (322684 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322697 call(322692 call . whole c"setIndices") x)
    (322701 call setup)
    if(322714 call _cond_test debugBlockDist)
    {
      (322707 call writeln "Setting indices of Block domain:")
      (322712 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiGetIndices[322723](arg _mt[322728]:_MT[238], arg this[322725] :
  BlockDom) : _unknown[51] "method"
  {
    (322736 return(322735 call(322731 call . whole c"getIndices")))
  }
  function _unknown[51].dsiAssignDomain[322748](arg _mt[322757]:_MT[238], arg this[322754] :
  BlockDom, arg rhs[322745] :
  _domain, arg lhsPrivate[322751] :
  bool[10]) : _unknown[51] "method"
  {
    (322763 call chpl_assignDomainWithGetSetIndices this rhs)
  }
  function _unknown[51].dsiLocalSlice[322775](arg _mt[322782]:_MT[238], arg this[322779] :
  BlockDom, param arg stridable[322772] :
  bool[10], arg ranges[322777]:_any[178](?)) : _unknown[51] "method"
  {
    (322789 return(322788 call whole(322786 'expand_tuple' ranges)))
  }
  function _unknown[51].setup[322797](arg _mt[322802]:_MT[238], arg this[322799] :
  BlockDom) : _unknown[51] "method"
  {
    {
      unknown tmpIter[322846] "expr temp" "maybe ref" "no copy" "temp"
      (322849 'move' tmpIter[322846](322806 call . dist c"targetLocDom"))
      unknown isRngDomArr[323013] "maybe param" "temp"
      (323028 'move' isRngDomArr[323013](323026 call ||(323015 call isBoundedRange tmpIter[322846])(323024 call ||(323018 call isDomain tmpIter[322846])(323021 call isArray tmpIter[322846]))))
      if isRngDomArr[323013]
      {
        const _coforallCount[322885] "const" "end count" "temp"
        (322950 'move' _coforallCount[322885](322947 call _endCountAlloc 0))
        unknown numTasks[322886] "temp"
        (322934 'move' numTasks[322886](322930 call . tmpIter[322846] c"size"))
        (322925 call _upEndCount _coforallCount[322885] 0 numTasks[322886])
        unknown _indexOfInterest[322892] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322893] "expr temp" "temp"
        (322902 'move' _iterator[322893](322900 call _getIterator tmpIter[322846]))
        Defer
        {
          {
            (322918 call _freeIterator _iterator[322893])
          }
        }
        { scopeless type
          (322907 'move' _indexOfInterest[322892](322904 call iteratorIndex _iterator[322893]))
        }
        ForLoop[322894]
        {
          unknown localeIdx[322911] "coforall index var" "index var" "insert auto destroy"
          (322913 'move' localeIdx[322911] _indexOfInterest[322892])
          { scopeless
            { scopeless
              const tmp[322852] "const" "temp"
              (322854 'move' tmp[322852](322856 'deref'(322857 '_wide_get_locale'(322862 call(322859 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322870 call =(322872 call .(322874 call locDoms localeIdx) c"myBlock")(322881 call(322878 call . dist c"getChunk") whole localeIdx))
                }
                (322887 call _downEndCount _coforallCount[322885] nil[44])
                (322865 'coforall on block' 0 tmp[322852])
              }
            }
          }
          label _continueLabel[322897]
          _indexOfInterest[322892]
          _iterator[322893]
        }
        label _breakLabel[322898]
        Defer
        {
          {
            (322937 call _endCountFree _coforallCount[322885])
          }
        }
        (322942 call _waitEndCount _coforallCount[322885] 0 numTasks[322886])
      }
      {
        const _coforallCount[322954] "const" "end count" "temp"
        (323010 'move' _coforallCount[322954](323007 call _endCountAlloc 0))
        unknown _indexOfInterest[322961] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322962] "expr temp" "temp"
        (322971 'move' _iterator[322962](322969 call _getIterator tmpIter[322846]))
        Defer
        {
          {
            (322987 call _freeIterator _iterator[322962])
          }
        }
        { scopeless type
          (322976 'move' _indexOfInterest[322961](322973 call iteratorIndex _iterator[322962]))
        }
        ForLoop[322963]
        {
          unknown localeIdx[322980] "coforall index var" "index var" "insert auto destroy"
          (322982 'move' localeIdx[322980] _indexOfInterest[322961])
          (322994 call _upEndCount _coforallCount[322954] 0)
          { scopeless
            { scopeless
              const tmp[322837] "const" "temp"
              (322839 'move' tmp[322837](322835 'deref'(322834 '_wide_get_locale'(322815 call(322810 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322831 call =(322820 call .(322819 call locDoms localeIdx) c"myBlock")(322830 call(322824 call . dist c"getChunk") whole localeIdx))
                }
                (322956 call _downEndCount _coforallCount[322954] nil[44])
                (322842 'coforall on block' 0 tmp[322837])
              }
            }
          }
          label _continueLabel[322966]
          _indexOfInterest[322961]
          _iterator[322962]
        }
        label _breakLabel[322967]
        Defer
        {
          {
            (322998 call _endCountFree _coforallCount[322954])
          }
        }
        (323003 call _waitEndCount _coforallCount[322954] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyDom[323038](arg _mt[323043]:_MT[238], arg this[323040] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323074] "expr temp" "maybe ref" "no copy" "temp"
      (323077 'move' tmpIter[323074](323047 call . dist c"targetLocDom"))
      unknown isRngDomArr[323228] "maybe param" "temp"
      (323243 'move' isRngDomArr[323228](323241 call ||(323230 call isBoundedRange tmpIter[323074])(323239 call ||(323233 call isDomain tmpIter[323074])(323236 call isArray tmpIter[323074]))))
      if isRngDomArr[323228]
      {
        const _coforallCount[323100] "const" "end count" "temp"
        (323165 'move' _coforallCount[323100](323162 call _endCountAlloc 0))
        unknown numTasks[323101] "temp"
        (323149 'move' numTasks[323101](323145 call . tmpIter[323074] c"size"))
        (323140 call _upEndCount _coforallCount[323100] 0 numTasks[323101])
        unknown _indexOfInterest[323107] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323108] "expr temp" "temp"
        (323117 'move' _iterator[323108](323115 call _getIterator tmpIter[323074]))
        Defer
        {
          {
            (323133 call _freeIterator _iterator[323108])
          }
        }
        { scopeless type
          (323122 'move' _indexOfInterest[323107](323119 call iteratorIndex _iterator[323108]))
        }
        ForLoop[323109]
        {
          unknown localeIdx[323126] "coforall index var" "index var" "insert auto destroy"
          (323128 'move' localeIdx[323126] _indexOfInterest[323107])
          { scopeless
            { scopeless
              const tmp[323080] "const" "temp"
              (323082 'move' tmp[323080](323084 'deref'(323085 '_wide_get_locale'(323087 call locDoms localeIdx))))
              {
                { scopeless
                  (323095 call chpl__delete(323097 call locDoms localeIdx))
                }
                (323102 call _downEndCount _coforallCount[323100] nil[44])
                (323090 'coforall on block' 0 tmp[323080])
              }
            }
          }
          label _continueLabel[323112]
          _indexOfInterest[323107]
          _iterator[323108]
        }
        label _breakLabel[323113]
        Defer
        {
          {
            (323152 call _endCountFree _coforallCount[323100])
          }
        }
        (323157 call _waitEndCount _coforallCount[323100] 0 numTasks[323101])
      }
      {
        const _coforallCount[323169] "const" "end count" "temp"
        (323225 'move' _coforallCount[323169](323222 call _endCountAlloc 0))
        unknown _indexOfInterest[323176] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323177] "expr temp" "temp"
        (323186 'move' _iterator[323177](323184 call _getIterator tmpIter[323074]))
        Defer
        {
          {
            (323202 call _freeIterator _iterator[323177])
          }
        }
        { scopeless type
          (323191 'move' _indexOfInterest[323176](323188 call iteratorIndex _iterator[323177]))
        }
        ForLoop[323178]
        {
          unknown localeIdx[323195] "coforall index var" "index var" "insert auto destroy"
          (323197 'move' localeIdx[323195] _indexOfInterest[323176])
          (323209 call _upEndCount _coforallCount[323169] 0)
          { scopeless
            { scopeless
              const tmp[323065] "const" "temp"
              (323067 'move' tmp[323065](323063 'deref'(323062 '_wide_get_locale'(323053 call locDoms localeIdx))))
              {
                { scopeless
                  (323059 call chpl__delete(323057 call locDoms localeIdx))
                }
                (323171 call _downEndCount _coforallCount[323169] nil[44])
                (323070 'coforall on block' 0 tmp[323065])
              }
            }
          }
          label _continueLabel[323181]
          _indexOfInterest[323176]
          _iterator[323177]
        }
        label _breakLabel[323182]
        Defer
        {
          {
            (323213 call _endCountFree _coforallCount[323169])
          }
        }
        (323218 call _waitEndCount _coforallCount[323169] 0)
      }
    }
  }
  function _unknown[51].dsiMember[323255](arg _mt[323260]:_MT[238], arg this[323257] :
  BlockDom, arg i[323253]:_any[178](?)) : _unknown[51] "method"
  {
    (323269 return(323268 call(323263 call . whole c"contains") i))
  }
  function _unknown[51].dsiIndexOrder[323279](arg _mt[323284]:_MT[238], arg this[323281] :
  BlockDom, arg i[323277]:_any[178](?)) : _unknown[51] "method"
  {
    (323293 return(323292 call(323287 call . whole c"indexOrder") i))
  }
  function _unknown[51].contains[323303](arg _mt[323308]:_MT[238], arg this[323305] :
  LocBlockDom, arg i[323301]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (323317 return(323316 call(323311 call . myBlock c"contains") i))
    }
  }
  function _unknown[51].dsiDisplayRepresentation[323325](arg _mt[323330]:_MT[238], arg this[323327] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown _indexOfInterest[323438] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323439] "expr temp" "temp"
      (323448 'move' _iterator[323439](323446 call _getIterator(323337 call .(323334 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323465 call _freeIterator _iterator[323439])
        }
      }
      { scopeless type
        (323454 'move' _indexOfInterest[323438](323451 call iteratorIndex _iterator[323439]))
      }
      ForLoop[323440]
      {
        unknown tli[323458] "index var" "insert auto destroy"
        (323460 'move' tli[323458] _indexOfInterest[323438])
        {
          (323390 call writeln "locArr[" tli "].myElems = "(323386 for  e  in (323382 call .(323381 call locArr tli) c"myElems") do
          {
            e
          } ))
          if(323433 call _cond_test doRADOpt)
          {
            { scopeless
              (323431 call writeln "locArr[" tli "].locRAD = "(323428 call .(323424 call postfix!(323421 call .(323418 call locArr tli) c"locRAD")) c"RAD"))
            }
          }
        }
        label _continueLabel[323443]
        _indexOfInterest[323438]
        _iterator[323439]
      }
      label _breakLabel[323444]
    }
  }
  function _unknown[51].dsiGetBaseDom[323478](arg _mt[323483]:_MT[238], arg this[323480] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (323486 return dom)
    }
  }
  function _unknown[51].setupRADOpt[323494](arg _mt[323499]:_MT[238], arg this[323496] :
  BlockArr) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[323680] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323681] "expr temp" "temp"
      (323690 'move' _iterator[323681](323688 call _getIterator(323506 call .(323503 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323707 call _freeIterator _iterator[323681])
        }
      }
      { scopeless type
        (323696 'move' _indexOfInterest[323680](323693 call iteratorIndex _iterator[323681]))
      }
      ForLoop[323682]
      {
        unknown localeIdx[323700] "index var" "insert auto destroy"
        (323702 'move' localeIdx[323700] _indexOfInterest[323680])
        {
          { scopeless
            const tmp[323671] "const" "temp"
            (323673 'move' tmp[323671](323669 'deref'(323668 '_wide_get_locale'(323518 call(323513 call .(323510 call . dom c"dist") c"targetLocales") localeIdx))))
            {
              {
                { scopeless
                  const myLocArr[323523] "const"(323522 call locArr localeIdx)
                  (323526 'end of statement')
                }
                if(323552 call _cond_test(323533 call !=(323529 call . myLocArr c"locRAD") nil[44]))
                {
                  (323540 call chpl__delete(323536 call . myLocArr c"locRAD"))
                  (323549 call =(323545 call . myLocArr c"locRAD") nil[44])
                }
                if(323664 call _cond_test disableBlockLazyRAD)
                {
                  (323578 call =(323558 call . myLocArr c"locRAD")(323563 'new'(_chpl_manager = unmanaged[220](?))(323577 call LocRADCache eltType rank idxType stridable(323574 call .(323571 call . dom c"dist") c"targetLocDom"))))
                  {
                    unknown _indexOfInterest[323630] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[323631] "expr temp" "temp"
                    (323640 'move' _iterator[323631](323638 call _getIterator(323587 call .(323584 call . dom c"dist") c"targetLocDom")))
                    Defer
                    {
                      {
                        (323657 call _freeIterator _iterator[323631])
                      }
                    }
                    { scopeless type
                      (323646 'move' _indexOfInterest[323630](323643 call iteratorIndex _iterator[323631]))
                    }
                    ForLoop[323632]
                    {
                      unknown l[323650] "index var" "insert auto destroy"
                      (323652 'move' l[323650] _indexOfInterest[323630])
                      {
                        if(323625 call _cond_test(323592 call != l localeIdx))
                        {
                          (323621 call =(323605 call(323600 call .(323598 call postfix!(323595 call . myLocArr c"locRAD")) c"RAD") l)(323620 call(323616 call .(323613 call .(323610 call .(323609 call locArr l) c"myElems") c"_value") c"dsiGetRAD")))
                        }
                      }
                      label _continueLabel[323635]
                      _indexOfInterest[323630]
                      _iterator[323631]
                    }
                    label _breakLabel[323636]
                  }
                }
              }
              (323676 'on block' 0 tmp[323671])
            }
          }
        }
        label _continueLabel[323685]
        _indexOfInterest[323680]
        _iterator[323681]
      }
      label _breakLabel[323686]
    }
  }
  function _unknown[51].dsiElementInitializationComplete[323720](arg _mt[323725]:_MT[238], arg this[323722] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323765] "expr temp" "maybe ref" "no copy" "temp"
      (323768 'move' tmpIter[323765](323732 call .(323729 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[323924] "maybe param" "temp"
      (323939 'move' isRngDomArr[323924](323937 call ||(323926 call isBoundedRange tmpIter[323765])(323935 call ||(323929 call isDomain tmpIter[323765])(323932 call isArray tmpIter[323765]))))
      if isRngDomArr[323924]
      {
        const _coforallCount[323796] "const" "end count" "temp"
        (323861 'move' _coforallCount[323796](323858 call _endCountAlloc 0))
        unknown numTasks[323797] "temp"
        (323845 'move' numTasks[323797](323841 call . tmpIter[323765] c"size"))
        (323836 call _upEndCount _coforallCount[323796] 0 numTasks[323797])
        unknown _indexOfInterest[323803] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323804] "expr temp" "temp"
        (323813 'move' _iterator[323804](323811 call _getIterator tmpIter[323765]))
        Defer
        {
          {
            (323829 call _freeIterator _iterator[323804])
          }
        }
        { scopeless type
          (323818 'move' _indexOfInterest[323803](323815 call iteratorIndex _iterator[323804]))
        }
        ForLoop[323805]
        {
          unknown localeIdx[323822] "coforall index var" "index var" "insert auto destroy"
          (323824 'move' localeIdx[323822] _indexOfInterest[323803])
          { scopeless
            { scopeless
              const tmp[323771] "const" "temp"
              (323773 'move' tmp[323771](323775 'deref'(323776 '_wide_get_locale'(323778 call locArr localeIdx))))
              {
                {
                  (323794 call(323786 call .(323788 call .(323790 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323798 call _downEndCount _coforallCount[323796] nil[44])
                (323781 'coforall on block' 0 tmp[323771])
              }
            }
          }
          label _continueLabel[323808]
          _indexOfInterest[323803]
          _iterator[323804]
        }
        label _breakLabel[323809]
        Defer
        {
          {
            (323848 call _endCountFree _coforallCount[323796])
          }
        }
        (323853 call _waitEndCount _coforallCount[323796] 0 numTasks[323797])
      }
      {
        const _coforallCount[323865] "const" "end count" "temp"
        (323921 'move' _coforallCount[323865](323918 call _endCountAlloc 0))
        unknown _indexOfInterest[323872] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323873] "expr temp" "temp"
        (323882 'move' _iterator[323873](323880 call _getIterator tmpIter[323765]))
        Defer
        {
          {
            (323898 call _freeIterator _iterator[323873])
          }
        }
        { scopeless type
          (323887 'move' _indexOfInterest[323872](323884 call iteratorIndex _iterator[323873]))
        }
        ForLoop[323874]
        {
          unknown localeIdx[323891] "coforall index var" "index var" "insert auto destroy"
          (323893 'move' localeIdx[323891] _indexOfInterest[323872])
          (323905 call _upEndCount _coforallCount[323865] 0)
          { scopeless
            { scopeless
              const tmp[323756] "const" "temp"
              (323758 'move' tmp[323756](323754 'deref'(323753 '_wide_get_locale'(323738 call locArr localeIdx))))
              {
                {
                  (323750 call(323746 call .(323743 call .(323742 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323867 call _downEndCount _coforallCount[323865] nil[44])
                (323761 'coforall on block' 0 tmp[323756])
              }
            }
          }
          label _continueLabel[323877]
          _indexOfInterest[323872]
          _iterator[323873]
        }
        label _breakLabel[323878]
        Defer
        {
          {
            (323909 call _endCountFree _coforallCount[323865])
          }
        }
        (323914 call _waitEndCount _coforallCount[323865] 0)
      }
    }
  }
  function _unknown[51].dsiElementDeinitializationComplete[323949](arg _mt[323954]:_MT[238], arg this[323951] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323994] "expr temp" "maybe ref" "no copy" "temp"
      (323997 'move' tmpIter[323994](323961 call .(323958 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324153] "maybe param" "temp"
      (324168 'move' isRngDomArr[324153](324166 call ||(324155 call isBoundedRange tmpIter[323994])(324164 call ||(324158 call isDomain tmpIter[323994])(324161 call isArray tmpIter[323994]))))
      if isRngDomArr[324153]
      {
        const _coforallCount[324025] "const" "end count" "temp"
        (324090 'move' _coforallCount[324025](324087 call _endCountAlloc 0))
        unknown numTasks[324026] "temp"
        (324074 'move' numTasks[324026](324070 call . tmpIter[323994] c"size"))
        (324065 call _upEndCount _coforallCount[324025] 0 numTasks[324026])
        unknown _indexOfInterest[324032] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324033] "expr temp" "temp"
        (324042 'move' _iterator[324033](324040 call _getIterator tmpIter[323994]))
        Defer
        {
          {
            (324058 call _freeIterator _iterator[324033])
          }
        }
        { scopeless type
          (324047 'move' _indexOfInterest[324032](324044 call iteratorIndex _iterator[324033]))
        }
        ForLoop[324034]
        {
          unknown localeIdx[324051] "coforall index var" "index var" "insert auto destroy"
          (324053 'move' localeIdx[324051] _indexOfInterest[324032])
          { scopeless
            { scopeless
              const tmp[324000] "const" "temp"
              (324002 'move' tmp[324000](324004 'deref'(324005 '_wide_get_locale'(324007 call locArr localeIdx))))
              {
                {
                  (324023 call(324015 call .(324017 call .(324019 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (324027 call _downEndCount _coforallCount[324025] nil[44])
                (324010 'coforall on block' 0 tmp[324000])
              }
            }
          }
          label _continueLabel[324037]
          _indexOfInterest[324032]
          _iterator[324033]
        }
        label _breakLabel[324038]
        Defer
        {
          {
            (324077 call _endCountFree _coforallCount[324025])
          }
        }
        (324082 call _waitEndCount _coforallCount[324025] 0 numTasks[324026])
      }
      {
        const _coforallCount[324094] "const" "end count" "temp"
        (324150 'move' _coforallCount[324094](324147 call _endCountAlloc 0))
        unknown _indexOfInterest[324101] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324102] "expr temp" "temp"
        (324111 'move' _iterator[324102](324109 call _getIterator tmpIter[323994]))
        Defer
        {
          {
            (324127 call _freeIterator _iterator[324102])
          }
        }
        { scopeless type
          (324116 'move' _indexOfInterest[324101](324113 call iteratorIndex _iterator[324102]))
        }
        ForLoop[324103]
        {
          unknown localeIdx[324120] "coforall index var" "index var" "insert auto destroy"
          (324122 'move' localeIdx[324120] _indexOfInterest[324101])
          (324134 call _upEndCount _coforallCount[324094] 0)
          { scopeless
            { scopeless
              const tmp[323985] "const" "temp"
              (323987 'move' tmp[323985](323983 'deref'(323982 '_wide_get_locale'(323967 call locArr localeIdx))))
              {
                {
                  (323979 call(323975 call .(323972 call .(323971 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (324096 call _downEndCount _coforallCount[324094] nil[44])
                (323990 'coforall on block' 0 tmp[323985])
              }
            }
          }
          label _continueLabel[324106]
          _indexOfInterest[324101]
          _iterator[324102]
        }
        label _breakLabel[324107]
        Defer
        {
          {
            (324138 call _endCountFree _coforallCount[324094])
          }
        }
        (324143 call _waitEndCount _coforallCount[324094] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyArr[324182](arg _mt[324187]:_MT[238], arg this[324184] :
  BlockArr, arg deinitElts[324179] :
  bool[10]) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[324251] "expr temp" "maybe ref" "no copy" "temp"
      (324254 'move' tmpIter[324251](324194 call .(324191 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324430] "maybe param" "temp"
      (324445 'move' isRngDomArr[324430](324443 call ||(324432 call isBoundedRange tmpIter[324251])(324441 call ||(324435 call isDomain tmpIter[324251])(324438 call isArray tmpIter[324251]))))
      if isRngDomArr[324430]
      {
        const _coforallCount[324302] "const" "end count" "temp"
        (324367 'move' _coforallCount[324302](324364 call _endCountAlloc 0))
        unknown numTasks[324303] "temp"
        (324351 'move' numTasks[324303](324347 call . tmpIter[324251] c"size"))
        (324342 call _upEndCount _coforallCount[324302] 0 numTasks[324303])
        unknown _indexOfInterest[324309] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324310] "expr temp" "temp"
        (324319 'move' _iterator[324310](324317 call _getIterator tmpIter[324251]))
        Defer
        {
          {
            (324335 call _freeIterator _iterator[324310])
          }
        }
        { scopeless type
          (324324 'move' _indexOfInterest[324309](324321 call iteratorIndex _iterator[324310]))
        }
        ForLoop[324311]
        {
          unknown localeIdx[324328] "coforall index var" "index var" "insert auto destroy"
          (324330 'move' localeIdx[324328] _indexOfInterest[324309])
          { scopeless
            { scopeless
              const tmp[324257] "const" "temp"
              (324259 'move' tmp[324257](324261 'deref'(324262 '_wide_get_locale'(324264 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324272](324274 call locArr localeIdx)
                    (324277 'end of statement')
                  }
                  if(324279 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324284 call _deinitElements(324286 call . arr c"myElems"))
                    }
                  }
                  (324297 call(324291 call .(324293 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324299 call chpl__delete arr)
                }
                (324304 call _downEndCount _coforallCount[324302] nil[44])
                (324267 'coforall on block' 0 tmp[324257])
              }
            }
          }
          label _continueLabel[324314]
          _indexOfInterest[324309]
          _iterator[324310]
        }
        label _breakLabel[324315]
        Defer
        {
          {
            (324354 call _endCountFree _coforallCount[324302])
          }
        }
        (324359 call _waitEndCount _coforallCount[324302] 0 numTasks[324303])
      }
      {
        const _coforallCount[324371] "const" "end count" "temp"
        (324427 'move' _coforallCount[324371](324424 call _endCountAlloc 0))
        unknown _indexOfInterest[324378] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324379] "expr temp" "temp"
        (324388 'move' _iterator[324379](324386 call _getIterator tmpIter[324251]))
        Defer
        {
          {
            (324404 call _freeIterator _iterator[324379])
          }
        }
        { scopeless type
          (324393 'move' _indexOfInterest[324378](324390 call iteratorIndex _iterator[324379]))
        }
        ForLoop[324380]
        {
          unknown localeIdx[324397] "coforall index var" "index var" "insert auto destroy"
          (324399 'move' localeIdx[324397] _indexOfInterest[324378])
          (324411 call _upEndCount _coforallCount[324371] 0)
          { scopeless
            { scopeless
              const tmp[324242] "const" "temp"
              (324244 'move' tmp[324242](324240 'deref'(324239 '_wide_get_locale'(324200 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324205](324204 call locArr localeIdx)
                    (324208 'end of statement')
                  }
                  if(324219 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324217 call _deinitElements(324213 call . arr c"myElems"))
                    }
                  }
                  (324232 call(324228 call .(324225 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324236 call chpl__delete arr)
                }
                (324373 call _downEndCount _coforallCount[324371] nil[44])
                (324247 'coforall on block' 0 tmp[324242])
              }
            }
          }
          label _continueLabel[324383]
          _indexOfInterest[324378]
          _iterator[324379]
        }
        label _breakLabel[324384]
        Defer
        {
          {
            (324415 call _endCountFree _coforallCount[324371])
          }
        }
        (324420 call _waitEndCount _coforallCount[324371] 0)
      }
    }
  }
  function _unknown[51].dsiLocalAccess[324462](arg _mt[324467]:_MT[238], arg this[324464] :
  BlockArr, arg i[324459] :
  (324457 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    (324481 return(324480 call(324475 call .(324472 call _to_nonnil myLocArr) c"this") i))
  }
  function _unknown[51].dsiAccess[324496](arg _mt[324501]:_MT[238], arg this[324498] :
  BlockArr, const in arg idx[324493] :
  (324491 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    {
      {
        if(324534 call _cond_test(324520 call &&(324505 call != myLocArr nil[44])(324519 call(324514 call .(324511 call .(324510 call _to_nonnil myLocArr) c"locDom") c"contains") idx)))
        {
          { scopeless
            (324532 return(324531 call(324526 call .(324525 call _to_nonnil myLocArr) c"this") idx))
          }
        }
      }
      (324542 'local block')
    }
    (324548 return(324547 call nonLocalAccess idx))
  }
  function _unknown[51].dsiBoundsCheck[324562](arg _mt[324567]:_MT[238], arg this[324564] :
  BlockArr, arg i[324559] :
  (324557 call * rank idxType)) : _unknown[51] "inline" "method"
  {
    (324576 return(324575 call(324570 call . dom c"dsiMember") i))
  }
  function _unknown[51].nonLocalAccess[324591](arg _mt[324596]:_MT[238], arg this[324593] :
  BlockArr, arg i[324588] :
  (324586 call * rank idxType)) ref : _unknown[51] "method" "fn unordered safe"
  {
    if(324884 call _cond_test doRADOpt)
    {
      if(324879 call _cond_test(324602 call . this c"myLocArr"))
      {
        { scopeless
          const myLocArr[324612] "const"(324611 call _to_nonnil(324607 call . this c"myLocArr"))
          (324615 'end of statement')
        }
        { scopeless
          unknown rlocIdx[324629](324628 call(324623 call .(324618 call . dom c"dist") c"targetLocsIdx") i)
          (324632 'end of statement')
        }
        if(324815 call _cond_test(324634 call ! disableBlockLazyRAD))
        {
          if(324718 call _cond_test(324641 call ==(324637 call . myLocArr c"locRAD") nil[44]))
          {
            (324653 call(324649 call .(324646 call . myLocArr c"locRADLock") c"lock"))
            if(324704 call _cond_test(324661 call ==(324657 call . myLocArr c"locRAD") nil[44]))
            {
              { scopeless
                unknown tempLocRAD[324680](324665 'new'(_chpl_manager = unmanaged[220](?))(324679 call LocRADCache eltType rank idxType stridable(324676 call .(324673 call . dom c"dist") c"targetLocDom")))
                (324683 'end of statement')
              }
              (324693 call =(324689 call .(324686 call . tempLocRAD c"RAD") c"blk") SENTINEL)
              (324701 call =(324697 call . myLocArr c"locRAD") tempLocRAD)
            }
            (324716 call(324712 call .(324709 call . myLocArr c"locRADLock") c"unlock"))
          }
          { scopeless
            const locRAD[324730] "const"(324729 call _to_nonnil(324725 call . myLocArr c"locRAD"))
            (324733 'end of statement')
          }
          if(324811 call _cond_test(324745 call ==(324741 call .(324740 call(324735 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
          {
            (324755 call(324750 call . locRAD c"lockRAD") rlocIdx)
            if(324797 call _cond_test(324769 call ==(324765 call .(324764 call(324759 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
            {
              (324793 call =(324777 call(324772 call . locRAD c"RAD") rlocIdx)(324792 call(324788 call .(324785 call .(324782 call .(324781 call locArr rlocIdx) c"myElems") c"_value") c"dsiGetRAD")))
            }
            (324809 call(324804 call . locRAD c"unlockRAD") rlocIdx)
          }
        }
        { scopeless
          unknown myLocRAD[324823] "no auto destroy" "no copy"(324820 call . myLocArr c"locRAD")
          (324826 'end of statement')
        }
        { scopeless
          unknown radata[324834] "no auto destroy" "no copy"(324831 call .(324830 call _to_nonnil myLocRAD) c"RAD")
          (324837 'end of statement')
        }
        if(324875 call _cond_test(324846 call !=(324842 call .(324841 call radata rlocIdx) c"shiftedData") nil[44]))
        {
          { scopeless
            unknown dataIdx[324858](324857 call(324852 call .(324851 call radata rlocIdx) c"getDataIndex") i)
            (324861 'end of statement')
          }
          (324873 return(324872 call(324867 call .(324866 call radata rlocIdx) c"getDataElem") dataIdx))
        }
      }
    }
    (324905 return(324904 call(324901 call locArr(324899 call(324894 call .(324891 call . dom c"dist") c"targetLocsIdx") i)) i))
  }
  function _unknown[51].dsiAccess[324918](arg _mt[324923]:_MT[238], arg this[324920] :
  BlockArr, arg i[324914] ... :
  idxType) ref : _unknown[51] "method"
  {
    { scopeless
      (324929 return(324928 call dsiAccess i))
    }
  }
  function _unknown[51].these[324937](arg _mt[324942]:_MT[238], arg this[324939] :
  BlockArr) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[324952] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324953] "expr temp" "temp"
      (324962 'move' _iterator[324953](324960 call _getIterator dom))
      Defer
      {
        {
          (324978 call _freeIterator _iterator[324953])
        }
      }
      { scopeless type
        (324967 'move' _indexOfInterest[324952](324964 call iteratorIndex _iterator[324953]))
      }
      ForLoop[324954]
      {
        unknown i[324971] "index var" "insert auto destroy"
        (324973 'move' i[324971] _indexOfInterest[324952])
        { scopeless
          (324950 yield(324949 call dsiAccess i))
        }
        label _continueLabel[324957]
        _indexOfInterest[324952]
        _iterator[324953]
      }
      label _breakLabel[324958]
    }
  }
  function _unknown[51].these[324995](arg _mt[325000]:_MT[238], arg this[324997] :
  BlockArr, param arg tag[324992] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[325020] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[325021] "expr temp" "temp"
      (325030 'move' _iterator[325021](325028 call _getIterator(325016 call(325011 call . dom c"these") tag)))
      Defer
      {
        {
          (325047 call _freeIterator _iterator[325021])
        }
      }
      { scopeless type
        (325036 'move' _indexOfInterest[325020](325033 call iteratorIndex _iterator[325021]))
      }
      ForLoop[325022]
      {
        unknown followThis[325040] "index var" "insert auto destroy"
        (325042 'move' followThis[325040] _indexOfInterest[325020])
        { scopeless
          (325018 yield followThis)
        }
        label _continueLabel[325025]
        _indexOfInterest[325020]
        _iterator[325021]
      }
      label _breakLabel[325026]
    }
  }
  where {
    (325007 call == tag(325004 call . iterKind c"leader"))
  }
  function _unknown[51].dsiStaticFastFollowCheck[325063](arg _mt[325068]:_MT[238], arg this[325065] :
  BlockArr, arg leadType[325061]:_any[178](?)) param : _unknown[51] "method" "method overrides"
  {
    if(325121 call _cond_test(325074 call isSubtype leadType BlockArr))
    {
      { scopeless
        unknown x[325077](325076 'to nilable class from type' leadType)
        (325080 'end of statement')
      }
      (325102 return(325100 call ==(325091 call _to_borrowed(325089 'typeof'(325086 call .(325084 call postfix! x) c"dom")))(325099 call _to_borrowed(325097 'typeof'(325094 call . this c"dom")))))
    }
    {
      (325118 return(325116 call ==(325107 call _to_borrowed leadType)(325115 call _to_borrowed(325113 'typeof'(325110 call . this c"dom")))))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325137](arg _mt[325142]:_MT[238], arg this[325139] :
  BlockArr, arg lead[325134] :
  (325131 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method"
  {
    { scopeless
      (325154 return(325153 call(325145 call . this c"dsiDynamicFastFollowCheck")(325149 call . lead c"_dom")))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325166](arg _mt[325171]:_MT[238], arg this[325168] :
  BlockArr, arg lead[325163] :
  _domain) : _unknown[51] "method"
  {
    (325207 return(325205 call &&(325188 call(325177 call .(325174 call . lead c"dist") c"dsiEqualDMaps")(325184 call .(325181 call . this c"dom") c"dist"))(325203 call ==(325193 call .(325190 call . lead c"_value") c"whole")(325200 call .(325197 call . this c"dom") c"whole"))))
  }
  function _unknown[51].these[325219](arg _mt[325232]:_MT[238], arg this[325229] :
  BlockArr, param arg tag[325216] :
  iterKind, arg followThis[325221]:_any[178](?), param arg fast[325225] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[325245](arg rangeTuple[325243]:_any[178](?), param arg i[325249] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (325290 return(325287 IfExpr (325261 call == i(325259 call -(325255 call . rangeTuple c"size") 1)) then
        { scopeless
          (325267 call .(325266 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (325285 call ||(325274 call .(325273 call rangeTuple i) c"stridable")(325284 call anyStridable rangeTuple(325282 call + i 1)))
        } ))
      }
    }
    if(325349 call _cond_test chpl__testParFlag)
    {
      if(325342 call _cond_test fast)
      {
        { scopeless
          (325318 call chpl__testParWriteln "Block array fast follower invoked on " followThis)
        }
      }
      {
        { scopeless
          (325340 call chpl__testParWriteln "Block array non-fast follower invoked on " followThis)
        }
      }
    }
    if(325413 call _cond_test testFastFollowerOptimization)
    {
      { scopeless
        (325411 call writeln(325408 call +(325388 IfExpr  fast then
        { scopeless
          "fast"
        } else
        { scopeless
          "regular"
        } ) " follower invoked for Block array"))
      }
    }
    { scopeless
      unknown myFollowThis[325434](325432 call * rank(325431 call range(idxType = idxType)(stridable =(325428 call || stridable(325427 call anyStridable followThis)))))
      (325437 'end of statement')
    }
    { scopeless
      unknown lowIdx[325442](325440 call * rank idxType)
      (325445 'end of statement')
    }
    {
      unknown i[325573] 0
      unknown tmp[325574] "maybe param" "temp"
      (325586 'move' tmp[325574](325584 call chpl_compute_low_param_loop_bound 0(325449 call - rank 1)))
      unknown tmp[325575] "maybe param" "temp"
      (325596 'move' tmp[325575](325594 call chpl_compute_high_param_loop_bound 0(325591 call - rank 1)))
      unknown tmp[325576] "maybe param" "temp"
      (325599 'move' tmp[325576] 1)
      ParamForLoop[325601]
      { i[325573] tmp[325574] tmp[325575] tmp[325576]
        {
          { scopeless
            unknown stride[325466](325463 call .(325462 call(325457 call .(325454 call . dom c"whole") c"dim") i) c"stride")
            (325469 'end of statement')
          }
          { scopeless
            unknown low[325487](325485 call *(325475 call .(325474 call followThis i) c"low")(325483 call _cast idxType(325481 call abs stride)))
            (325490 'end of statement')
          }
          { scopeless
            unknown high[325507](325505 call *(325495 call .(325494 call followThis i) c"high")(325503 call _cast idxType(325501 call abs stride)))
            (325510 'end of statement')
          }
          (325556 call =(325514 call myFollowThis i)(325555 call(325546 call .(325544 call chpl_by(325535 call +(325520 call chpl_by(325517 call chpl_build_bounded_range low high) stride)(325532 call .(325531 call(325526 call .(325523 call . dom c"whole") c"dim") i) c"alignedLow"))(325541 call .(325540 call followThis i) c"stride")) c"safeCast")(325553 'typeof'(325552 call myFollowThis i))))
          (325570 call =(325562 call lowIdx i)(325567 call .(325566 call myFollowThis i) c"low"))
        }
      }
      label _unused_continueLabel[325578]
      label _breakLabel[325577]
    }
    { scopeless
      const myFollowThisDom[325615] "const"(325613 call chpl__buildDomainExpr(325611 'expand_tuple' myFollowThis))
      (325618 'end of statement')
    }
    if(325774 call _cond_test fast)
    {
      { scopeless
        unknown arrSection[325633](325632 call locArr(325630 call(325625 call .(325622 call . dom c"dist") c"targetLocsIdx") lowIdx))
        (325636 'end of statement')
      }
      if(325657 call _cond_test(325647 call !=(325642 '_wide_get_node' arrSection)(325644 call . here c"id")))
      {
        { scopeless
          (325654 call = arrSection(325653 call _to_nonnil myLocArr))
        }
      }
      {
        {
          { scopeless
            const narrowArrSection[325671] "const"(325669 call _cast(325668 'to nilable class from type'(325667 'typeof' arrSection))(325665 '_wide_get_addr' arrSection))
            (325674 'end of statement')
          }
          { scopeless
            unknown myElems[325683] "ref var"(325680 call .(325679 call _to_nonnil narrowArrSection) c"myElems")
            (325686 'end of statement')
          }
          {
            unknown _indexOfInterest[325695] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[325696] "expr temp" "temp"
            (325705 'move' _iterator[325696](325703 call _getIterator myFollowThisDom))
            Defer
            {
              {
                (325721 call _freeIterator _iterator[325696])
              }
            }
            { scopeless type
              (325710 'move' _indexOfInterest[325695](325707 call iteratorIndex _iterator[325696]))
            }
            ForLoop[325697]
            {
              unknown i[325714] "index var" "insert auto destroy"
              (325716 'move' i[325714] _indexOfInterest[325695])
              { scopeless
                (325693 yield(325692 call myElems i))
              }
              label _continueLabel[325700]
              _indexOfInterest[325695]
              _iterator[325696]
            }
            label _breakLabel[325701]
          }
        }
        (325730 'local block')
      }
    }
    {
      {
        unknown _indexOfInterest[325740] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325741] "expr temp" "temp"
        (325750 'move' _iterator[325741](325748 call _getIterator myFollowThisDom))
        Defer
        {
          {
            (325766 call _freeIterator _iterator[325741])
          }
        }
        { scopeless type
          (325755 'move' _indexOfInterest[325740](325752 call iteratorIndex _iterator[325741]))
        }
        ForLoop[325742]
        {
          unknown i[325759] "index var" "insert auto destroy"
          (325761 'move' i[325759] _indexOfInterest[325740])
          {
            (325737 yield(325736 call dsiAccess i))
          }
          label _continueLabel[325745]
          _indexOfInterest[325740]
          _iterator[325741]
        }
        label _breakLabel[325746]
      }
    }
  }
  where {
    (325239 call == tag(325236 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialRead[325786](arg _mt[325791]:_MT[238], arg this[325788] :
  BlockArr, arg f[325784]:_any[178](?)) : _unknown[51] "method"
  {
    (325797 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiSerialWrite[325807](arg _mt[325812]:_MT[238], arg this[325809] :
  BlockArr, arg f[325805]:_any[178](?)) : _unknown[51] "method"
  {
    (325818 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiLocalSlice[325828](arg _mt[325833]:_MT[238], arg this[325830] :
  BlockArr, arg ranges[325826]:_any[178](?)) : _unknown[51] "method" "no copy return"
  {
    { scopeless
      unknown low[325839](325837 call * rank idxType)
      (325842 'end of statement')
    }
    {
      unknown i[325866] 0
      unknown tmp[325867] "maybe param" "temp"
      (325879 'move' tmp[325867](325877 call chpl_compute_low_param_loop_bound 0(325847 call - rank 1)))
      unknown tmp[325868] "maybe param" "temp"
      (325889 'move' tmp[325868](325887 call chpl_compute_high_param_loop_bound 0(325884 call - rank 1)))
      unknown tmp[325869] "maybe param" "temp"
      (325892 'move' tmp[325869] 1)
      ParamForLoop[325894]
      { i[325866] tmp[325867] tmp[325868] tmp[325869]
        {
          (325862 call =(325854 call low i)(325859 call .(325858 call ranges i) c"alignedLow"))
        }
      }
      label _unused_continueLabel[325871]
      label _breakLabel[325870]
    }
    (325923 return(325922 call(325916 call .(325915 call locArr(325913 call(325908 call .(325905 call . dom c"dist") c"targetLocsIdx") low)) c"myElems")(325920 'expand_tuple' ranges)))
  }
  function _extendTuple[325931](arg t[325929]:_any[178](?), arg idx[325934] :
  _tuple, arg args[325937]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[325946](325944 call *(325940 call . args c"size") t)
      (325949 'end of statement')
    }
    { scopeless
      unknown j[325953] 1 int[13]
      (325956 'end of statement')
    }
    {
      unknown i[326008] 0
      unknown tmp[326009] "maybe param" "temp"
      (326021 'move' tmp[326009](326019 call chpl_compute_low_param_loop_bound 0(325963 call -(325959 call . args c"size") 1)))
      unknown tmp[326010] "maybe param" "temp"
      (326034 'move' tmp[326010](326032 call chpl_compute_high_param_loop_bound 0(326026 call -(326028 call . args c"size") 1)))
      unknown tmp[326011] "maybe param" "temp"
      (326037 'move' tmp[326011] 1)
      ParamForLoop[326039]
      { i[326008] tmp[326009] tmp[326010] tmp[326011]
        {
          if(326002 call _cond_test(325973 call isCollapsedDimension(325971 call args i)))
          {
            { scopeless
              (325982 call =(325977 call tup i)(325981 call args i))
            }
          }
          {
            (325993 call =(325988 call tup i)(325992 call idx j))
            (325999 call += j 1)
          }
        }
      }
      label _unused_continueLabel[326013]
      label _breakLabel[326012]
    }
    (326049 return tup)
  }
  function _extendTuple[326057](arg t[326055]:_any[178](?), arg idx[326059]:_any[178](?), arg args[326061]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[326070](326068 call *(326064 call . args c"size") t)
      (326073 'end of statement')
    }
    { scopeless
      unknown idxTup[326078](326076 call _build_tuple idx)
      (326081 'end of statement')
    }
    { scopeless
      unknown j[326084] 1 int[13]
      (326087 'end of statement')
    }
    {
      unknown i[326139] 0
      unknown tmp[326140] "maybe param" "temp"
      (326152 'move' tmp[326140](326150 call chpl_compute_low_param_loop_bound 0(326094 call -(326090 call . args c"size") 1)))
      unknown tmp[326141] "maybe param" "temp"
      (326165 'move' tmp[326141](326163 call chpl_compute_high_param_loop_bound 0(326157 call -(326159 call . args c"size") 1)))
      unknown tmp[326142] "maybe param" "temp"
      (326168 'move' tmp[326142] 1)
      ParamForLoop[326170]
      { i[326139] tmp[326140] tmp[326141] tmp[326142]
        {
          if(326133 call _cond_test(326104 call isCollapsedDimension(326102 call args i)))
          {
            { scopeless
              (326113 call =(326108 call tup i)(326112 call args i))
            }
          }
          {
            (326124 call =(326119 call tup i)(326123 call idxTup j))
            (326130 call += j 1)
          }
        }
      }
      label _unused_continueLabel[326144]
      label _breakLabel[326143]
    }
    (326180 return tup)
  }
  function _unknown[51].dsiReallocate[326202](arg _mt[326207]:_MT[238], arg this[326204] :
  BlockArr, arg bounds[326199] :
  (326197 call * rank(326196 call range idxType(326192 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiPostReallocate[326215](arg _mt[326220]:_MT[238], arg this[326217] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    if(326227 call _cond_test doRADOpt)
    {
      { scopeless
        (326225 call setupRADOpt)
      }
    }
  }
  function _unknown[51].setRADOpt[326242](arg _mt[326247]:_MT[238], arg this[326244] :
  BlockArr, arg val[326239] =
  1) : _unknown[51] "method"
  {
    (326251 call = doRADOpt val)
    if(326260 call _cond_test doRADOpt)
    {
      { scopeless
        (326258 call setupRADOpt)
      }
    }
  }
  function _unknown[51].this[326272](arg _mt[326277]:_MT[238], arg this[326274] :
  LocBlockArr, arg i[326270]:_any[178](?)) ref : _unknown[51] "inline" "method"
  {
    (326283 return(326282 call myElems i))
  }
  function _unknown[51].dsiSupportsAutoLocalAccess[326291](arg _mt[326296]:_MT[238], arg this[326293] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    (326299 return 1)
  }
  function _unknown[51].init[326311](arg _mt[326339]:_MT[238], arg this[326336] :
  Block, arg other[326308] :
  Block, arg privateData[326313]:_any[178](?), param arg rank[326319] =
  (326316 call . other c"rank"), arg idxType[326326]:_any[178](?) =
  (326323 call . other c"idxType"), arg sparseLayoutType[326333]:_any[178](?) =
  (326330 call . other c"sparseLayoutType")) : _unknown[51] "method"
  {
    (326346 call =(326342 call . this c"rank") rank)
    (326355 call =(326351 call . this c"idxType") idxType)
    (326367 call = boundingBox(326365 call chpl__buildDomainExpr(326363 'expand_tuple'(326362 call privateData 0))))
    (326379 call = targetLocDom(326377 call chpl__buildDomainExpr(326375 'expand_tuple'(326374 call privateData 1))))
    (326387 call = targetLocales(326384 call . other c"targetLocales"))
    (326395 call = locDist(326392 call . other c"locDist"))
    (326403 call = dataParTasksPerLocale(326402 call privateData 2))
    (326411 call = dataParIgnoreRunningTasks(326410 call privateData 3))
    (326419 call = dataParMinGranularity(326418 call privateData 4))
    (326427 call =(326423 call . this c"sparseLayoutType") sparseLayoutType)
  }
  function _unknown[51].dsiSupportsPrivatization[326435](arg _mt[326440]:_MT[238], arg this[326437] :
  Block) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326443 return 1)
    }
  }
  function _unknown[51].dsiGetPrivatizeData[326451](arg _mt[326456]:_MT[238], arg this[326453] :
  Block) : _unknown[51] "method"
  {
    (326476 return(326474 call _build_tuple(326463 call(326459 call . boundingBox c"dims"))(326469 call(326465 call . targetLocDom c"dims")) dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity))
  }
  function _unknown[51].dsiPrivatize[326486](arg _mt[326491]:_MT[238], arg this[326488] :
  Block, arg privatizeData[326484]:_any[178](?)) : _unknown[51] "method"
  {
    (326504 return(326495 'new'(_chpl_manager = unmanaged[220](?))(326503 call Block(326500 call _to_unmanaged this) privatizeData)))
  }
  function _unknown[51].dsiGetReprivatizeData[326512](arg _mt[326517]:_MT[238], arg this[326514] :
  Block) : _unknown[51] "method"
  {
    { scopeless
      (326525 return(326524 call(326520 call . boundingBox c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326535](arg _mt[326542]:_MT[238], arg this[326539] :
  Block, arg other[326533]:_any[178](?), arg reprivatizeData[326537]:_any[178](?)) : _unknown[51] "method"
  {
    (326550 call = boundingBox(326548 call chpl__buildDomainExpr(326546 'expand_tuple' reprivatizeData)))
    (326559 call = targetLocDom(326556 call . other c"targetLocDom"))
    (326567 call = targetLocales(326564 call . other c"targetLocales"))
    (326575 call = locDist(326572 call . other c"locDist"))
    (326583 call = dataParTasksPerLocale(326580 call . other c"dataParTasksPerLocale"))
    (326591 call = dataParIgnoreRunningTasks(326588 call . other c"dataParIgnoreRunningTasks"))
    (326599 call = dataParMinGranularity(326596 call . other c"dataParMinGranularity"))
  }
  function _unknown[51].chpl__serialize[326607](arg _mt[326612]:_MT[238], arg this[326609] :
  BlockDom) : _unknown[51] "method"
  {
    (326615 return pid)
  }
  function _unknown[51].chpl__deserialize[326625](arg _mt[326630]:_MT[238], arg this[326627] :
  BlockDom, arg data[326623]:_any[178](?)) : _unknown[51] "method"
  {
    (326660 return(326659 call chpl_getPrivatizedCopy(326656 'to unmanaged class from unknown'(326655 call BlockDom(rank =(326635 call . this c"rank"))(idxType =(326641 call . this c"idxType"))(stridable =(326646 call . this c"stridable"))(sparseLayoutType =(326651 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326668](arg _mt[326673]:_MT[238], arg this[326670] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326676 return 1)
    }
  }
  type BlockDomPrvData[326695](?) unknown distpid[326682] unknown dims[326686] unknown locdoms[326690]
  function _unknown[51].dsiGetPrivatizeData[326701](arg _mt[326706]:_MT[238], arg this[326703] :
  BlockDom) : _unknown[51] "method"
  {
    (326723 return(326708 'new'(326722 call BlockDomPrvData(326711 call . dist c"pid")(326720 call(326716 call . whole c"dims")) locDoms)))
  }
  function _unknown[51].dsiPrivatize[326733](arg _mt[326738]:_MT[238], arg this[326735] :
  BlockDom, arg privatizeData[326731]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdist[326751](326750 call chpl_getPrivatizedCopy(326742 'typeof' dist)(326747 call . privatizeData c"distpid"))
      (326754 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[326778](326775 call . privatizeData c"locdoms")(326770 call chpl__buildArrayRuntimeType(326768 call chpl__ensureDomainExpr(326757 call . privdist c"targetLocDom"))(326767 'to unmanaged class from unknown'(326766 call LocBlockDom rank idxType stridable)))
      (326781 'end of statement')
    }
    { scopeless
      const c[326805] "const"(326784 'new'(_chpl_manager = unmanaged[220](?))(326804 call BlockDom rank idxType stridable(326791 call . privdist c"sparseLayoutType") privdist locDomsTemp(326802 call chpl__buildDomainExpr(326800 'expand_tuple'(326797 call . privatizeData c"dims")))))
      (326808 'end of statement')
    }
    (326810 return c)
  }
  function _unknown[51].dsiGetReprivatizeData[326817](arg _mt[326822]:_MT[238], arg this[326819] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (326830 return(326829 call(326825 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326840](arg _mt[326847]:_MT[238], arg this[326844] :
  BlockDom, arg other[326838]:_any[178](?), arg reprivatizeData[326842]:_any[178](?)) : _unknown[51] "method"
  {
    (326856 call = locDoms(326853 call . other c"locDoms"))
    (326866 call = whole(326864 call chpl__buildDomainExpr(326862 'expand_tuple' reprivatizeData)))
  }
  function _unknown[51].chpl__serialize[326874](arg _mt[326879]:_MT[238], arg this[326876] :
  BlockArr) : _unknown[51] "method"
  {
    (326882 return pid)
  }
  function _unknown[51].chpl__deserialize[326892](arg _mt[326897]:_MT[238], arg this[326894] :
  BlockArr, arg data[326890]:_any[178](?)) : _unknown[51] "method"
  {
    (326932 return(326931 call chpl_getPrivatizedCopy(326928 'to unmanaged class from unknown'(326927 call BlockArr(rank =(326902 call . this c"rank"))(idxType =(326908 call . this c"idxType"))(stridable =(326913 call . this c"stridable"))(eltType =(326918 call . this c"eltType"))(sparseLayoutType =(326923 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326940](arg _mt[326945]:_MT[238], arg this[326942] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326948 return 1)
    }
  }
  type BlockArrPrvData[326963](?) unknown dompid[326954] unknown locarr[326958]
  function _unknown[51].dsiGetPrivatizeData[326969](arg _mt[326974]:_MT[238], arg this[326971] :
  BlockArr) : _unknown[51] "method"
  {
    (326985 return(326976 'new'(326984 call BlockArrPrvData(326979 call . dom c"pid") locArr)))
  }
  function _unknown[51].dsiPrivatize[326995](arg _mt[327000]:_MT[238], arg this[326997] :
  BlockArr, arg privatizeData[326993]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdom[327013](327012 call chpl_getPrivatizedCopy(327004 'typeof' dom)(327009 call . privatizeData c"dompid"))
      (327016 'end of statement')
    }
    { scopeless
      unknown locArrTemp[327044](327041 call . privatizeData c"locarr")(327036 call chpl__buildArrayRuntimeType(327034 call chpl__ensureDomainExpr(327022 call .(327019 call . privdom c"dist") c"targetLocDom"))(327033 'to unmanaged class from unknown'(327032 call LocBlockArr eltType rank idxType stridable)))
      (327047 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[327057](327056 'to unmanaged class from unknown'(327055 'to nilable class from type'(327054 call LocBlockArr eltType rank idxType stridable)))
      (327060 'end of statement')
    }
    {
      unknown _indexOfInterest[327096] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327097] "expr temp" "temp"
      (327106 'move' _iterator[327097](327104 call _getIterator(327066 call .(327063 call . privdom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (327123 call _freeIterator _iterator[327097])
        }
      }
      { scopeless type
        (327112 'move' _indexOfInterest[327096](327109 call iteratorIndex _iterator[327097]))
      }
      ForLoop[327098]
      {
        unknown localeIdx[327116] "index var" "insert auto destroy"
        (327118 'move' localeIdx[327116] _indexOfInterest[327096])
        { scopeless
          if(327091 call _cond_test(327081 call ==(327076 '_wide_get_node'(327072 call locArrTemp localeIdx))(327078 call . here c"id")))
          {
            { scopeless
              (327088 call = myLocArrTemp(327087 call locArrTemp localeIdx))
            }
          }
        }
        label _continueLabel[327101]
        _indexOfInterest[327096]
        _iterator[327097]
      }
      label _breakLabel[327102]
    }
    { scopeless
      const c[327152] "const"(327132 'new'(_chpl_manager = unmanaged[220](?))(327151 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom = privdom)(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (327155 'end of statement')
    }
    (327157 return c)
  }
  function _unknown[51].dsiTargetLocales[327164](arg _mt[327169]:_MT[238], arg this[327166] :
  BlockArr) : _unknown[51] "method"
  {
    (327178 return(327175 call .(327172 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327186](arg _mt[327191]:_MT[238], arg this[327188] :
  BlockDom) : _unknown[51] "method"
  {
    (327197 return(327194 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327205](arg _mt[327210]:_MT[238], arg this[327207] :
  Block) : _unknown[51] "method"
  {
    (327213 return targetLocales)
  }
  function _unknown[51].chpl__locToLocIdx[327225](arg _mt[327230]:_MT[238], arg this[327227] :
  Block, arg loc[327222] :
  locale[28]) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[327253] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327254] "expr temp" "temp"
      (327263 'move' _iterator[327254](327261 call _getIterator targetLocDom))
      Defer
      {
        {
          (327279 call _freeIterator _iterator[327254])
        }
      }
      { scopeless type
        (327268 'move' _indexOfInterest[327253](327265 call iteratorIndex _iterator[327254]))
      }
      ForLoop[327255]
      {
        unknown locIdx[327272] "index var" "insert auto destroy"
        (327274 'move' locIdx[327272] _indexOfInterest[327253])
        { scopeless
          if(327248 call _cond_test(327239 call ==(327237 call targetLocales locIdx) loc))
          {
            { scopeless
              (327246 return(327244 call _build_tuple 1 locIdx))
            }
          }
        }
        label _continueLabel[327258]
        _indexOfInterest[327253]
        _iterator[327254]
      }
      label _breakLabel[327259]
    }
    (327295 return(327293 call _build_tuple 0(327289 call . targetLocDom c"first")))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327302](arg _mt[327307]:_MT[238], arg this[327304] :
  BlockArr) param : _unknown[51] "method"
  {
    { scopeless
      (327310 return 1)
    }
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327318](arg _mt[327323]:_MT[238], arg this[327320] :
  BlockDom) param : _unknown[51] "method"
  {
    { scopeless
      (327326 return 1)
    }
  }
  function _unknown[51].dsiLocalSubdomain[327338](arg _mt[327343]:_MT[238], arg this[327340] :
  BlockArr, arg loc[327335] :
  locale[28]) : _unknown[51] "method"
  {
    if(327395 call _cond_test(327347 call == loc here))
    {
      if(327365 call _cond_test(327351 call != myLocArr nil[44]))
      {
        { scopeless
          (327363 return(327360 call .(327357 call .(327356 call _to_nonnil myLocArr) c"locDom") c"myBlock"))
        }
      }
      { scopeless
        unknown d[327378](327376 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327381 'end of statement')
      }
      (327383 return d)
    }
    {
      (327392 return(327391 call(327386 call . dom c"dsiLocalSubdomain") loc))
    }
  }
  function _unknown[51].dsiLocalSubdomain[327409](arg _mt[327414]:_MT[238], arg this[327411] :
  BlockDom, arg loc[327406] :
  locale[28]) : _unknown[51] "method"
  {
    { scopeless
      const tmp[327430] "const" "temp"(327429 call(327424 call . dist c"chpl__locToLocIdx") loc)
      (327437 call _check_tuple_var_decl tmp[327430] 2)
      const gotit[327416] "const"(327431 call tmp[327430] 0)
      const locid[327418] "const"(327434 call tmp[327430] 1)
      (327442 'end of statement')
    }
    if(327484 call _cond_test gotit)
    {
      { scopeless
        unknown inds[327457](327456 call chpl__computeBlock locid(327449 call . dist c"targetLocDom")(327453 call . dist c"boundingBox"))
        (327460 'end of statement')
      }
      (327467 return(327466 call whole(327464 'expand_tuple' inds)))
    }
    {
      { scopeless
        unknown d[327476](327474 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327479 'end of statement')
      }
      (327482 return d)
    }
  }
  function _unknown[51].numRemoteElems[327495](arg _mt[327504]:_MT[238], arg this[327501] :
  BlockDom, arg viewDom[327493]:_any[178](?), arg rlo[327497]:_any[178](?), arg rid[327499]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown blo[327506](327510 call . dist c"idxType")
      unknown bhi[327513](327517 'typeof' blo)
      (327518 'end of statement')
    }
    if(327656 call _cond_test(327540 call == rid(327538 call -(327534 call .(327533 call(327525 call .(327522 call . dist c"targetLocDom") c"dim")(327530 call - rank 1)) c"size") 1)))
    {
      { scopeless
        (327556 call = bhi(327553 call .(327552 call(327544 call . viewDom c"dim")(327549 call - rank 1)) c"high"))
      }
    }
    {
      (327652 call = bhi(327650 call -(327644 call +(327573 call .(327572 call(327564 call .(327561 call . dist c"boundingBox") c"dim")(327569 call - rank 1)) c"low")(327643 call intCeilXDivByY(327621 call *(327612 call +(327609 call -(327590 call .(327589 call(327581 call .(327578 call . dist c"boundingBox") c"dim")(327586 call - rank 1)) c"high")(327606 call .(327605 call(327597 call .(327594 call . dist c"boundingBox") c"dim")(327602 call - rank 1)) c"low")) 1)(327619 call _cast idxType(327616 call + rid 1)))(327641 call _cast idxType(327637 call .(327636 call(327628 call .(327625 call . dist c"targetLocDom") c"dim")(327633 call - rank 1)) c"size"))))(327648 call _cast idxType 1)))
    }
    (327671 return(327669 call - bhi(327667 call _cast idxType(327664 call - rlo 1))))
  }
  function canDoAnyToBlock[327679](arg Dest[327677]:_any[178](?), arg destDom[327681]:_any[178](?), arg Src[327683]:_any[178](?), arg srcDom[327685]:_any[178](?)) param : _unknown[51] "private"
  {
    if(327712 call _cond_test(327707 call &&(327695 call ==(327693 call(327689 call . Src c"doiCanBulkTransferRankChange")) 0)(327705 call !=(327698 call . Dest c"rank")(327702 call . Src c"rank"))))
    {
      { scopeless
        (327710 return 0)
      }
    }
    (327719 'use' Reflection)
    if(327758 call _cond_test(327752 call !(327751 call canResolveMethod Src "doiBulkTransferToKnown" srcDom(327747 call .(327744 call .(327743 call(327729 call . Dest c"locArr")(327739 call .(327736 call .(327733 call . Dest c"locArr") c"_dom") c"first")) c"myElems") c"_value") destDom)))
    {
      (327755 return 0)
    }
    (327765 return(327763 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[327775](arg _mt[327786]:_MT[238], arg this[327783] :
  BlockArr, arg srcDom[327773]:_any[178](?), arg destClass[327778] :
  BlockArr, arg destDom[327781]:_any[178](?)) : _unknown[51] "method"
  {
    (327818 call _doSimpleBlockTransfer destClass destDom this srcDom)
    (327822 return 1)
  }
  where {
    (327810 call &&(327805 call &&(327795 call ==(327790 call . this c"sparseLayoutType")(327794 'to unmanaged class from unknown' DefaultDist))(327803 call ==(327798 call . destClass c"sparseLayoutType")(327802 'to unmanaged class from unknown' DefaultDist)))(327808 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[327833](arg _mt[327844]:_MT[238], arg this[327841] :
  BlockArr, arg destDom[327831]:_any[178](?), arg srcClass[327836] :
  BlockArr, arg srcDom[327839]:_any[178](?)) : _unknown[51] "method"
  {
    (327876 call _doSimpleBlockTransfer this destDom srcClass srcDom)
    (327880 return 1)
  }
  where {
    (327868 call &&(327863 call &&(327853 call ==(327848 call . this c"sparseLayoutType")(327852 'to unmanaged class from unknown' DefaultDist))(327861 call ==(327856 call . srcClass c"sparseLayoutType")(327860 'to unmanaged class from unknown' DefaultDist)))(327866 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiSwap[327891](arg _mt[327896]:_MT[238], arg this[327893] :
  BlockArr, arg arr[327889]:_any[178](?)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[327950] "expr temp" "maybe ref" "no copy" "temp"
      (327953 'move' tmpIter[327950](327912 call _build_tuple(327904 call . this c"locArr")(327909 call . arr c"locArr")))
      unknown isRngDomArr[328145] "maybe param" "temp"
      (328160 'move' isRngDomArr[328145](328158 call ||(328147 call isBoundedRange tmpIter[327950])(328156 call ||(328150 call isDomain tmpIter[327950])(328153 call isArray tmpIter[327950]))))
      if isRngDomArr[328145]
      {
        const _coforallCount[327989] "const" "end count" "temp"
        (328068 'move' _coforallCount[327989](328065 call _endCountAlloc 0))
        unknown numTasks[327990] "temp"
        (328052 'move' numTasks[327990](328048 call . tmpIter[327950] c"size"))
        (328043 call _upEndCount _coforallCount[327989] 0 numTasks[327990])
        unknown _indexOfInterest[327996] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327997] "expr temp" "temp"
        (328006 'move' _iterator[327997](328004 call _getIteratorZip tmpIter[327950]))
        Defer
        {
          {
            (328036 call _freeIterator _iterator[327997])
          }
        }
        { scopeless type
          (328011 'move' _indexOfInterest[327996](328008 call iteratorIndex _iterator[327997]))
        }
        ForLoop[327998]
        {
          (328016 call _check_tuple_var_decl _indexOfInterest[327996] 2)
          unknown locarr1[328022] "coforall index var" "index var" "insert auto destroy"
          (328024 'move' locarr1[328022](328020 call _indexOfInterest[327996] 0))
          unknown locarr2[328029] "coforall index var" "index var" "insert auto destroy"
          (328031 'move' locarr2[328029](328027 call _indexOfInterest[327996] 1))
          { scopeless
            { scopeless
              const tmp[327956] "const" "temp"
              (327958 'move' tmp[327956](327960 'deref'(327961 '_wide_get_locale' locarr1)))
              {
                {
                  (327969 call <=>(327971 call . locarr1 c"myElems")(327975 call . locarr2 c"myElems"))
                  (327979 call <=>(327981 call . locarr1 c"locRAD")(327985 call . locarr2 c"locRAD"))
                }
                (327991 call _downEndCount _coforallCount[327989] nil[44])
                (327964 'coforall on block' 0 tmp[327956])
              }
            }
          }
          label _continueLabel[328001]
          _indexOfInterest[327996]
          _iterator[327997]
        }
        label _breakLabel[328002]
        Defer
        {
          {
            (328055 call _endCountFree _coforallCount[327989])
          }
        }
        (328060 call _waitEndCount _coforallCount[327989] 0 numTasks[327990])
      }
      {
        const _coforallCount[328072] "const" "end count" "temp"
        (328142 'move' _coforallCount[328072](328139 call _endCountAlloc 0))
        unknown _indexOfInterest[328079] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328080] "expr temp" "temp"
        (328089 'move' _iterator[328080](328087 call _getIteratorZip tmpIter[327950]))
        Defer
        {
          {
            (328119 call _freeIterator _iterator[328080])
          }
        }
        { scopeless type
          (328094 'move' _indexOfInterest[328079](328091 call iteratorIndex _iterator[328080]))
        }
        ForLoop[328081]
        {
          (328099 call _check_tuple_var_decl _indexOfInterest[328079] 2)
          unknown locarr1[328105] "coforall index var" "index var" "insert auto destroy"
          (328107 'move' locarr1[328105](328103 call _indexOfInterest[328079] 0))
          unknown locarr2[328112] "coforall index var" "index var" "insert auto destroy"
          (328114 'move' locarr2[328112](328110 call _indexOfInterest[328079] 1))
          (328126 call _upEndCount _coforallCount[328072] 0)
          { scopeless
            { scopeless
              const tmp[327940] "const" "temp"
              (327942 'move' tmp[327940](327938 'deref'(327937 '_wide_get_locale' locarr1)))
              {
                {
                  (327922 call <=>(327915 call . locarr1 c"myElems")(327919 call . locarr2 c"myElems"))
                  (327934 call <=>(327927 call . locarr1 c"locRAD")(327931 call . locarr2 c"locRAD"))
                }
                (328074 call _downEndCount _coforallCount[328072] nil[44])
                (327945 'coforall on block' 0 tmp[327940])
              }
            }
          }
          label _continueLabel[328084]
          _indexOfInterest[328079]
          _iterator[328080]
        }
        label _breakLabel[328085]
        Defer
        {
          {
            (328130 call _endCountFree _coforallCount[328072])
          }
        }
        (328135 call _waitEndCount _coforallCount[328072] 0)
      }
    }
  }
  function _doSimpleBlockTransfer[328171](arg Dest[328169]:_any[178](?), arg destDom[328173]:_any[178](?), arg Src[328175]:_any[178](?), arg srcDom[328177]:_any[178](?)) : _unknown[51] "private"
  {
    if(328221 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328219 call writeln "In Block=Block Bulk Transfer: Dest[" destDom "] = Src[" srcDom "]")
      }
    }
    { scopeless
      const DestPID[328231] "const"(328228 call . Dest c"pid")
      (328234 'end of statement')
    }
    { scopeless
      const SrcPID[328239] "const"(328236 call . Src c"pid")
      (328242 'end of statement')
    }
    {
      unknown tmpIter[328498] "expr temp" "maybe ref" "no copy" "temp"
      (328501 'move' tmpIter[328498](328258 call(328253 call .(328248 call .(328245 call . Dest c"dom") c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[328833] "maybe param" "temp"
      (328848 'move' isRngDomArr[328833](328846 call ||(328835 call isBoundedRange tmpIter[328498])(328844 call ||(328838 call isDomain tmpIter[328498])(328841 call isArray tmpIter[328498]))))
      if isRngDomArr[328833]
      {
        const _coforallCount[328705] "const" "end count" "temp"
        (328770 'move' _coforallCount[328705](328767 call _endCountAlloc 0))
        unknown numTasks[328706] "temp"
        (328754 'move' numTasks[328706](328750 call . tmpIter[328498] c"size"))
        (328745 call _upEndCount _coforallCount[328705] 0 numTasks[328706])
        unknown _indexOfInterest[328712] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328713] "expr temp" "temp"
        (328722 'move' _iterator[328713](328720 call _getIterator tmpIter[328498]))
        Defer
        {
          {
            (328738 call _freeIterator _iterator[328713])
          }
        }
        { scopeless type
          (328727 'move' _indexOfInterest[328712](328724 call iteratorIndex _iterator[328713]))
        }
        ForLoop[328714]
        {
          unknown i[328731] "coforall index var" "index var" "insert auto destroy"
          (328733 'move' i[328731] _indexOfInterest[328712])
          { scopeless
            { scopeless
              const tmp[328504] "const" "temp"
              (328506 'move' tmp[328504](328508 'deref'(328509 '_wide_get_locale'(328520 call(328511 call .(328513 call .(328515 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328528] "const"(328538 IfExpr  _privatization then
                    { scopeless
                      (328532 call chpl_getPrivatizedCopy(328533 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328540 'end of statement')
                  }
                  { scopeless
                    const src[328542] "const"(328552 IfExpr  _privatization then
                    { scopeless
                      (328546 call chpl_getPrivatizedCopy(328547 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328554 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328556] "const"(328569 call(328558 call .(328566 call(328560 call .(328562 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328572 'end of statement')
                  }
                  (328574 call assert(328576 call >(328578 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328583] "const"(328585 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328590 'end of statement')
                  }
                  if(328592 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328597 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328605] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328607] "expr temp" "temp"
                    (328609 'move' _iterator[328607](328612 call _getIterator(328623 call(328614 call .(328616 call .(328618 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328627 call _freeIterator _iterator[328607])
                      }
                    }
                    { scopeless type
                      (328631 'move' _indexOfInterest[328605](328634 call iteratorIndex _iterator[328607]))
                    }
                    ForLoop[328636]
                    {
                      unknown srcLoc[328639] "index var" "insert auto destroy"
                      (328641 'move' srcLoc[328639] _indexOfInterest[328605])
                      {
                        { scopeless
                          const localSrcChunk[328646] "const"(328648 call corSrcBlock(328650 call .(328658 call(328652 call .(328654 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328662 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328664] "const"(328666 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328671 'end of statement')
                        }
                        (328673 call chpl__bulkTransferArray(328675 call .(328677 call .(328682 call(328679 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328688 call .(328690 call .(328695 call(328692 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328700]
                      _indexOfInterest[328605]
                      _iterator[328607]
                    }
                    label _breakLabel[328702]
                  }
                }
                (328707 call _downEndCount _coforallCount[328705] nil[44])
                (328523 'coforall on block' 0 tmp[328504])
              }
            }
          }
          label _continueLabel[328717]
          _indexOfInterest[328712]
          _iterator[328713]
        }
        label _breakLabel[328718]
        Defer
        {
          {
            (328757 call _endCountFree _coforallCount[328705])
          }
        }
        (328762 call _waitEndCount _coforallCount[328705] 0 numTasks[328706])
      }
      {
        const _coforallCount[328774] "const" "end count" "temp"
        (328830 'move' _coforallCount[328774](328827 call _endCountAlloc 0))
        unknown _indexOfInterest[328781] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328782] "expr temp" "temp"
        (328791 'move' _iterator[328782](328789 call _getIterator tmpIter[328498]))
        Defer
        {
          {
            (328807 call _freeIterator _iterator[328782])
          }
        }
        { scopeless type
          (328796 'move' _indexOfInterest[328781](328793 call iteratorIndex _iterator[328782]))
        }
        ForLoop[328783]
        {
          unknown i[328800] "coforall index var" "index var" "insert auto destroy"
          (328802 'move' i[328800] _indexOfInterest[328781])
          (328814 call _upEndCount _coforallCount[328774] 0)
          { scopeless
            { scopeless
              const tmp[328489] "const" "temp"
              (328491 'move' tmp[328489](328487 'deref'(328486 '_wide_get_locale'(328271 call(328266 call .(328263 call .(328260 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328283] "const"(328280 IfExpr  _privatization then
                    { scopeless
                      (328278 call chpl_getPrivatizedCopy(328275 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328286 'end of statement')
                  }
                  { scopeless
                    const src[328299] "const"(328296 IfExpr  _privatization then
                    { scopeless
                      (328294 call chpl_getPrivatizedCopy(328291 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328302 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328319] "const"(328318 call(328313 call .(328312 call(328307 call .(328304 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328322 'end of statement')
                  }
                  (328332 call assert(328329 call >(328325 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328340] "const"(328339 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328343 'end of statement')
                  }
                  if(328370 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328368 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328452] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328453] "expr temp" "temp"
                    (328462 'move' _iterator[328453](328460 call _getIterator(328388 call(328383 call .(328380 call .(328377 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328479 call _freeIterator _iterator[328453])
                      }
                    }
                    { scopeless type
                      (328468 'move' _indexOfInterest[328452](328465 call iteratorIndex _iterator[328453]))
                    }
                    ForLoop[328454]
                    {
                      unknown srcLoc[328472] "index var" "insert auto destroy"
                      (328474 'move' srcLoc[328472] _indexOfInterest[328452])
                      {
                        { scopeless
                          const localSrcChunk[328405] "const"(328404 call corSrcBlock(328400 call .(328399 call(328394 call .(328391 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328408 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328416] "const"(328415 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328419 'end of statement')
                        }
                        (328450 call chpl__bulkTransferArray(328431 call .(328428 call .(328427 call(328422 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328446 call .(328443 call .(328442 call(328437 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328457]
                      _indexOfInterest[328452]
                      _iterator[328453]
                    }
                    label _breakLabel[328458]
                  }
                }
                (328776 call _downEndCount _coforallCount[328774] nil[44])
                (328494 'coforall on block' 0 tmp[328489])
              }
            }
          }
          label _continueLabel[328786]
          _indexOfInterest[328781]
          _iterator[328782]
        }
        label _breakLabel[328787]
        Defer
        {
          {
            (328818 call _endCountFree _coforallCount[328774])
          }
        }
        (328823 call _waitEndCount _coforallCount[328774] 0)
      }
    }
  }
  function _unknown[51].doiBulkTransferFromAny[328859](arg _mt[328868]:_MT[238], arg this[328865] :
  BlockArr, arg destDom[328857]:_any[178](?), arg Src[328861]:_any[178](?), arg srcDom[328863]:_any[178](?)) : _unknown[51] "method"
  {
    if(328900 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328898 call writeln "In BlockDist.doiBulkTransferFromAny")
      }
    }
    {
      unknown tmpIter[329054] "expr temp" "maybe ref" "no copy" "temp"
      (329057 'move' tmpIter[329054](328916 call(328911 call .(328908 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[329282] "maybe param" "temp"
      (329297 'move' isRngDomArr[329282](329295 call ||(329284 call isBoundedRange tmpIter[329054])(329293 call ||(329287 call isDomain tmpIter[329054])(329290 call isArray tmpIter[329054]))))
      if isRngDomArr[329282]
      {
        const _coforallCount[329154] "const" "end count" "temp"
        (329219 'move' _coforallCount[329154](329216 call _endCountAlloc 0))
        unknown numTasks[329155] "temp"
        (329203 'move' numTasks[329155](329199 call . tmpIter[329054] c"size"))
        (329194 call _upEndCount _coforallCount[329154] 0 numTasks[329155])
        unknown _indexOfInterest[329161] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329162] "expr temp" "temp"
        (329171 'move' _iterator[329162](329169 call _getIterator tmpIter[329054]))
        Defer
        {
          {
            (329187 call _freeIterator _iterator[329162])
          }
        }
        { scopeless type
          (329176 'move' _indexOfInterest[329161](329173 call iteratorIndex _iterator[329162]))
        }
        ForLoop[329163]
        {
          unknown j[329180] "coforall index var" "index var" "insert auto destroy"
          (329182 'move' j[329180] _indexOfInterest[329161])
          { scopeless
            { scopeless
              const tmp[329060] "const" "temp"
              (329062 'move' tmp[329060](329064 'deref'(329065 '_wide_get_locale'(329073 call(329067 call .(329069 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329081] "const"(329091 IfExpr  _privatization then
                    { scopeless
                      (329085 call chpl_getPrivatizedCopy(329086 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329093 'end of statement')
                  }
                  { scopeless
                    const inters[329095] "const"(329108 call(329097 call .(329105 call(329099 call .(329101 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329111 'end of statement')
                  }
                  { scopeless
                    const srcChunk[329113] "const"(329115 call bulkCommTranslateDomain inters destDom srcDom)
                    (329120 'end of statement')
                  }
                  if(329122 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329127 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (329137 call chpl__bulkTransferArray(329139 call .(329141 call .(329146 call(329143 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (329156 call _downEndCount _coforallCount[329154] nil[44])
                (329076 'coforall on block' 0 tmp[329060])
              }
            }
          }
          label _continueLabel[329166]
          _indexOfInterest[329161]
          _iterator[329162]
        }
        label _breakLabel[329167]
        Defer
        {
          {
            (329206 call _endCountFree _coforallCount[329154])
          }
        }
        (329211 call _waitEndCount _coforallCount[329154] 0 numTasks[329155])
      }
      {
        const _coforallCount[329223] "const" "end count" "temp"
        (329279 'move' _coforallCount[329223](329276 call _endCountAlloc 0))
        unknown _indexOfInterest[329230] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329231] "expr temp" "temp"
        (329240 'move' _iterator[329231](329238 call _getIterator tmpIter[329054]))
        Defer
        {
          {
            (329256 call _freeIterator _iterator[329231])
          }
        }
        { scopeless type
          (329245 'move' _indexOfInterest[329230](329242 call iteratorIndex _iterator[329231]))
        }
        ForLoop[329232]
        {
          unknown j[329249] "coforall index var" "index var" "insert auto destroy"
          (329251 'move' j[329249] _indexOfInterest[329230])
          (329263 call _upEndCount _coforallCount[329223] 0)
          { scopeless
            { scopeless
              const tmp[329045] "const" "temp"
              (329047 'move' tmp[329045](329043 'deref'(329042 '_wide_get_locale'(328926 call(328921 call .(328918 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[328938] "const"(328935 IfExpr  _privatization then
                    { scopeless
                      (328933 call chpl_getPrivatizedCopy(328930 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (328941 'end of statement')
                  }
                  { scopeless
                    const inters[328959] "const"(328958 call(328953 call .(328952 call(328947 call .(328944 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (328962 'end of statement')
                  }
                  { scopeless
                    const srcChunk[328969] "const"(328968 call bulkCommTranslateDomain inters destDom srcDom)
                    (328972 'end of statement')
                  }
                  if(329017 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329015 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (329040 call chpl__bulkTransferArray(329033 call .(329030 call .(329029 call(329024 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (329225 call _downEndCount _coforallCount[329223] nil[44])
                (329050 'coforall on block' 0 tmp[329045])
              }
            }
          }
          label _continueLabel[329235]
          _indexOfInterest[329230]
          _iterator[329231]
        }
        label _breakLabel[329236]
        Defer
        {
          {
            (329267 call _endCountFree _coforallCount[329223])
          }
        }
        (329272 call _waitEndCount _coforallCount[329223] 0)
      }
    }
    (329302 return 1)
  }
  where {
    (328877 call canDoAnyToBlock this destDom Src srcDom)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[329313](arg _mt[329324]:_MT[238], arg this[329321] :
  BlockArr, arg srcDom[329311]:_any[178](?), arg Dest[329316] :
  DefaultRectangularArr, arg destDom[329319]:_any[178](?)) : _unknown[51] "method"
  {
    if(329352 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329350 call writeln "In BlockDist.doiBulkTransferToKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329509] "expr temp" "maybe ref" "no copy" "temp"
      (329512 'move' tmpIter[329509](329368 call(329363 call .(329360 call . dom c"dist") c"activeTargetLocales") srcDom))
      unknown isRngDomArr[329740] "maybe param" "temp"
      (329755 'move' isRngDomArr[329740](329753 call ||(329742 call isBoundedRange tmpIter[329509])(329751 call ||(329745 call isDomain tmpIter[329509])(329748 call isArray tmpIter[329509]))))
      if isRngDomArr[329740]
      {
        const _coforallCount[329612] "const" "end count" "temp"
        (329677 'move' _coforallCount[329612](329674 call _endCountAlloc 0))
        unknown numTasks[329613] "temp"
        (329661 'move' numTasks[329613](329657 call . tmpIter[329509] c"size"))
        (329652 call _upEndCount _coforallCount[329612] 0 numTasks[329613])
        unknown _indexOfInterest[329619] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329620] "expr temp" "temp"
        (329629 'move' _iterator[329620](329627 call _getIterator tmpIter[329509]))
        Defer
        {
          {
            (329645 call _freeIterator _iterator[329620])
          }
        }
        { scopeless type
          (329634 'move' _indexOfInterest[329619](329631 call iteratorIndex _iterator[329620]))
        }
        ForLoop[329621]
        {
          unknown j[329638] "coforall index var" "index var" "insert auto destroy"
          (329640 'move' j[329638] _indexOfInterest[329619])
          { scopeless
            { scopeless
              const tmp[329515] "const" "temp"
              (329517 'move' tmp[329515](329519 'deref'(329520 '_wide_get_locale'(329528 call(329522 call .(329524 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329536] "const"(329546 IfExpr  _privatization then
                    { scopeless
                      (329540 call chpl_getPrivatizedCopy(329541 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329548 'end of statement')
                  }
                  { scopeless
                    const inters[329550] "const"(329563 call(329552 call .(329560 call(329554 call .(329556 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329566 'end of statement')
                  }
                  { scopeless
                    const destChunk[329568] "const"(329570 call bulkCommTranslateDomain inters srcDom destDom)
                    (329575 'end of statement')
                  }
                  if(329577 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329582 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329590] "const"(329592 call .(329594 call .(329599 call(329596 call . Src c"locArr") j) c"myElems") c"_value")
                    (329604 'end of statement')
                  }
                  (329606 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329614 call _downEndCount _coforallCount[329612] nil[44])
                (329531 'coforall on block' 0 tmp[329515])
              }
            }
          }
          label _continueLabel[329624]
          _indexOfInterest[329619]
          _iterator[329620]
        }
        label _breakLabel[329625]
        Defer
        {
          {
            (329664 call _endCountFree _coforallCount[329612])
          }
        }
        (329669 call _waitEndCount _coforallCount[329612] 0 numTasks[329613])
      }
      {
        const _coforallCount[329681] "const" "end count" "temp"
        (329737 'move' _coforallCount[329681](329734 call _endCountAlloc 0))
        unknown _indexOfInterest[329688] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329689] "expr temp" "temp"
        (329698 'move' _iterator[329689](329696 call _getIterator tmpIter[329509]))
        Defer
        {
          {
            (329714 call _freeIterator _iterator[329689])
          }
        }
        { scopeless type
          (329703 'move' _indexOfInterest[329688](329700 call iteratorIndex _iterator[329689]))
        }
        ForLoop[329690]
        {
          unknown j[329707] "coforall index var" "index var" "insert auto destroy"
          (329709 'move' j[329707] _indexOfInterest[329688])
          (329721 call _upEndCount _coforallCount[329681] 0)
          { scopeless
            { scopeless
              const tmp[329500] "const" "temp"
              (329502 'move' tmp[329500](329498 'deref'(329497 '_wide_get_locale'(329378 call(329373 call .(329370 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329390] "const"(329387 IfExpr  _privatization then
                    { scopeless
                      (329385 call chpl_getPrivatizedCopy(329382 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329393 'end of statement')
                  }
                  { scopeless
                    const inters[329411] "const"(329410 call(329405 call .(329404 call(329399 call .(329396 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329414 'end of statement')
                  }
                  { scopeless
                    const destChunk[329421] "const"(329420 call bulkCommTranslateDomain inters srcDom destDom)
                    (329424 'end of statement')
                  }
                  if(329467 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329465 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329485] "const"(329482 call .(329479 call .(329478 call(329473 call . Src c"locArr") j) c"myElems") c"_value")
                    (329488 'end of statement')
                  }
                  (329495 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329683 call _downEndCount _coforallCount[329681] nil[44])
                (329505 'coforall on block' 0 tmp[329500])
              }
            }
          }
          label _continueLabel[329693]
          _indexOfInterest[329688]
          _iterator[329689]
        }
        label _breakLabel[329694]
        Defer
        {
          {
            (329725 call _endCountFree _coforallCount[329681])
          }
        }
        (329730 call _waitEndCount _coforallCount[329681] 0)
      }
    }
    (329760 return 1)
  }
  where {
    (329328 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[329771](arg _mt[329782]:_MT[238], arg this[329779] :
  BlockArr, arg destDom[329769]:_any[178](?), arg Src[329774] :
  DefaultRectangularArr, arg srcDom[329777]:_any[178](?)) : _unknown[51] "method"
  {
    if(329810 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329808 call writeln "In BlockArr.doiBulkTransferFromKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329946] "expr temp" "maybe ref" "no copy" "temp"
      (329949 'move' tmpIter[329946](329826 call(329821 call .(329818 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[330186] "maybe param" "temp"
      (330201 'move' isRngDomArr[330186](330199 call ||(330188 call isBoundedRange tmpIter[329946])(330197 call ||(330191 call isDomain tmpIter[329946])(330194 call isArray tmpIter[329946]))))
      if isRngDomArr[330186]
      {
        const _coforallCount[330058] "const" "end count" "temp"
        (330123 'move' _coforallCount[330058](330120 call _endCountAlloc 0))
        unknown numTasks[330059] "temp"
        (330107 'move' numTasks[330059](330103 call . tmpIter[329946] c"size"))
        (330098 call _upEndCount _coforallCount[330058] 0 numTasks[330059])
        unknown _indexOfInterest[330065] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[330066] "expr temp" "temp"
        (330075 'move' _iterator[330066](330073 call _getIterator tmpIter[329946]))
        Defer
        {
          {
            (330091 call _freeIterator _iterator[330066])
          }
        }
        { scopeless type
          (330080 'move' _indexOfInterest[330065](330077 call iteratorIndex _iterator[330066]))
        }
        ForLoop[330067]
        {
          unknown j[330084] "coforall index var" "index var" "insert auto destroy"
          (330086 'move' j[330084] _indexOfInterest[330065])
          { scopeless
            { scopeless
              const tmp[329952] "const" "temp"
              (329954 'move' tmp[329952](329956 'deref'(329957 '_wide_get_locale'(329965 call(329959 call .(329961 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329973] "const"(329983 IfExpr  _privatization then
                    { scopeless
                      (329977 call chpl_getPrivatizedCopy(329978 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329985 'end of statement')
                  }
                  { scopeless
                    const inters[329987] "const"(330000 call(329989 call .(329997 call(329991 call .(329993 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (330003 'end of statement')
                  }
                  (330005 call assert(330007 call >(330009 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[330014] "const"(330016 call bulkCommTranslateDomain inters destDom srcDom)
                    (330021 'end of statement')
                  }
                  if(330023 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (330028 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[330036] "const"(330038 call .(330040 call .(330045 call(330042 call . Dest c"locArr") j) c"myElems") c"_value")
                    (330050 'end of statement')
                  }
                  (330052 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (330060 call _downEndCount _coforallCount[330058] nil[44])
                (329968 'coforall on block' 0 tmp[329952])
              }
            }
          }
          label _continueLabel[330070]
          _indexOfInterest[330065]
          _iterator[330066]
        }
        label _breakLabel[330071]
        Defer
        {
          {
            (330110 call _endCountFree _coforallCount[330058])
          }
        }
        (330115 call _waitEndCount _coforallCount[330058] 0 numTasks[330059])
      }
      {
        const _coforallCount[330127] "const" "end count" "temp"
        (330183 'move' _coforallCount[330127](330180 call _endCountAlloc 0))
        unknown _indexOfInterest[330134] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[330135] "expr temp" "temp"
        (330144 'move' _iterator[330135](330142 call _getIterator tmpIter[329946]))
        Defer
        {
          {
            (330160 call _freeIterator _iterator[330135])
          }
        }
        { scopeless type
          (330149 'move' _indexOfInterest[330134](330146 call iteratorIndex _iterator[330135]))
        }
        ForLoop[330136]
        {
          unknown j[330153] "coforall index var" "index var" "insert auto destroy"
          (330155 'move' j[330153] _indexOfInterest[330134])
          (330167 call _upEndCount _coforallCount[330127] 0)
          { scopeless
            { scopeless
              const tmp[329937] "const" "temp"
              (329939 'move' tmp[329937](329935 'deref'(329934 '_wide_get_locale'(329836 call(329831 call .(329828 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329848] "const"(329845 IfExpr  _privatization then
                    { scopeless
                      (329843 call chpl_getPrivatizedCopy(329840 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329851 'end of statement')
                  }
                  { scopeless
                    const inters[329869] "const"(329868 call(329863 call .(329862 call(329857 call .(329854 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329872 'end of statement')
                  }
                  (329882 call assert(329879 call >(329875 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[329890] "const"(329889 call bulkCommTranslateDomain inters destDom srcDom)
                    (329893 'end of statement')
                  }
                  if(329904 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329902 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[329922] "const"(329919 call .(329916 call .(329915 call(329910 call . Dest c"locArr") j) c"myElems") c"_value")
                    (329925 'end of statement')
                  }
                  (329932 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (330129 call _downEndCount _coforallCount[330127] nil[44])
                (329942 'coforall on block' 0 tmp[329937])
              }
            }
          }
          label _continueLabel[330139]
          _indexOfInterest[330134]
          _iterator[330135]
        }
        label _breakLabel[330140]
        Defer
        {
          {
            (330171 call _endCountFree _coforallCount[330127])
          }
        }
        (330176 call _waitEndCount _coforallCount[330127] 0)
      }
    }
    (330206 return 1)
  }
  where {
    (329786 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiCanBulkTransferRankChange[330215](arg _mt[330220]:_MT[238], arg this[330217] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (330223 return 1)
    }
  }
  { scopeless
    unknown debugBlockScan[330229] "config" "param" 0
    (330232 'end of statement')
  }
  function _unknown[51].doiScan[330238](arg _mt[330245]:_MT[238], arg this[330242] :
  BlockArr, arg op[330236]:_any[178](?), arg dom[330240]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[330264] "type variable"(330263 'typeof'(330262 call(330258 call . op c"generate")))
    { scopeless
      unknown res[330275](330273 call chpl__buildArrayRuntimeType(330271 call chpl__ensureDomainExpr dom) resType)
      (330278 'end of statement')
    }
    (330280 'use' ReplicatedDist)
    { scopeless
      unknown targetLocs[330288] "ref var"(330287 call(330283 call . this c"dsiTargetLocales"))
      (330291 'end of statement')
    }
    { scopeless
      const elemPerLocDom[330305] "const"(330303 call chpl__distributed(330302 call Replicated targetLocs)(330297 call chpl__buildDomainExpr(330294 call chpl_build_bounded_range 1 1)))
      (330308 'end of statement')
    }
    { scopeless
      unknown elemPerLoc[330316](330314 call chpl__buildArrayRuntimeType(330312 call chpl__ensureDomainExpr elemPerLocDom) resType)
      (330319 'end of statement')
    }
    { scopeless
      unknown inputReady$[330329](330327 call chpl__buildArrayRuntimeType(330325 call chpl__ensureDomainExpr elemPerLocDom)(330323 call _syncvar bool[10]))
      (330332 'end of statement')
    }
    { scopeless
      unknown outputReady$[330342](330340 call chpl__buildArrayRuntimeType(330338 call chpl__ensureDomainExpr elemPerLocDom)(330336 call _syncvar bool[10]))
      (330345 'end of statement')
    }
    {
      unknown tmpIter[330785] "expr temp" "maybe ref" "no copy" "temp"
      (330788 'move' tmpIter[330785](330351 call .(330348 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[331270] "maybe param" "temp"
      (331285 'move' isRngDomArr[331270](331283 call ||(331272 call isBoundedRange tmpIter[330785])(331281 call ||(331275 call isDomain tmpIter[330785])(331278 call isArray tmpIter[330785]))))
      if isRngDomArr[331270]
      {
        const _coforallCount[331142] "const" "end count" "temp"
        (331207 'move' _coforallCount[331142](331204 call _endCountAlloc 0))
        unknown numTasks[331143] "temp"
        (331191 'move' numTasks[331143](331187 call . tmpIter[330785] c"size"))
        (331182 call _upEndCount _coforallCount[331142] 0 numTasks[331143])
        unknown _indexOfInterest[331149] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331150] "expr temp" "temp"
        (331159 'move' _iterator[331150](331157 call _getIterator tmpIter[330785]))
        Defer
        {
          {
            (331175 call _freeIterator _iterator[331150])
          }
        }
        { scopeless type
          (331164 'move' _indexOfInterest[331149](331161 call iteratorIndex _iterator[331150]))
        }
        ForLoop[331151]
        {
          unknown locid[331168] "coforall index var" "index var" "insert auto destroy"
          (331170 'move' locid[331168] _indexOfInterest[331149])
          { scopeless
            { scopeless
              const tmp[330791] "const" "temp"
              (330793 'move' tmp[330791](330795 'deref'(330796 '_wide_get_locale'(330798 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330806] "const"(330811 call(330808 call . op c"clone"))
                    (330813 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330815] "ref var"(330817 call locArr locid)
                    (330820 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330822] "ref var"(330824 call . myLocArrDesc c"myElems")
                    (330828 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330830] "const" "ref var"(330832 call . myLocArr c"_dom")
                    (330836 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330838] "temp"(330846 call(330840 call .(330842 call . myLocArr c"_value") c"chpl__preScan") myop res(330850 call myLocDom dom))
                    (330854 call _check_tuple_var_decl tmp[330838] 4)
                    unknown numTasks[330857](330859 call tmp[330838] 0)
                    unknown rngs[330862](330864 call tmp[330838] 1)
                    unknown state[330867](330869 call tmp[330838] 2)
                    unknown tot[330872](330874 call tmp[330838] 3)
                    (330877 'end of statement')
                  }
                  if(330879 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330884 call writeln locid ": "(330888 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330895 call =(330897 call elemPerLoc 1) tot)
                  (330901 call =(330903 call inputReady$ 1) 1)
                  if(330907 call _cond_test(330909 call == locid(330912 call .(330914 call .(330916 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330923] "const"(330928 call(330925 call . op c"clone"))
                      (330930 'end of statement')
                    }
                    { scopeless
                      unknown next[330932](330934 call . metaop c"identity") resType
                      (330939 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330941] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330943] "expr temp" "temp"
                      (330945 'move' _iterator[330943](330948 call _getIterator(330950 call .(330952 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330958 call _freeIterator _iterator[330943])
                        }
                      }
                      { scopeless type
                        (330962 'move' _indexOfInterest[330941](330965 call iteratorIndex _iterator[330943]))
                      }
                      ForLoop[330967]
                      {
                        unknown locid[330970] "index var" "insert auto destroy"
                        (330972 'move' locid[330970] _indexOfInterest[330941])
                        {
                          { scopeless
                            const targetloc[330977] "const"(330979 call targetLocs locid)
                            (330982 'end of statement')
                          }
                          { scopeless
                            const locready[330984] "const"(330991 call(330989 call(330986 call . inputReady$ c"replicand") targetloc) 1)
                            (330994 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330996] "ref var"(331003 call(331001 call(330998 call . elemPerLoc c"replicand") targetloc) 1)
                            (331006 'end of statement')
                          }
                          (331008 call <=> locVal next)
                          (331012 call =(331019 call(331017 call(331014 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (331026 call(331023 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[331029]
                        _indexOfInterest[330941]
                        _iterator[330943]
                      }
                      label _breakLabel[331031]
                    }
                    (331034 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[331038] "const"(331040 call outputReady$ 1)
                    (331043 'end of statement')
                  }
                  { scopeless
                    const myadjust[331045] "const"(331047 call elemPerLoc 1)
                    (331050 'end of statement')
                  }
                  if(331052 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (331057 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[331063] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[331065] "expr temp" "temp"
                    (331067 'move' _iterator[331065](331070 call _getIterator state))
                    Defer
                    {
                      {
                        (331074 call _freeIterator _iterator[331065])
                      }
                    }
                    { scopeless type
                      (331078 'move' _indexOfInterest[331063](331081 call iteratorIndex _iterator[331065]))
                    }
                    ForLoop[331083]
                    {
                      unknown s[331086] "index var" "insert auto destroy"
                      (331088 'move' s[331086] _indexOfInterest[331063])
                      { scopeless
                        (331096 call(331093 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[331099]
                      _indexOfInterest[331063]
                      _iterator[331065]
                    }
                    label _breakLabel[331101]
                  }
                  if(331104 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (331109 call writeln locid ": state = " state)
                    }
                  }
                  (331121 call(331115 call .(331117 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(331128 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (331133 call writeln locid ": " myLocArr)
                    }
                  }
                  (331139 call chpl__delete myop)
                }
                (331144 call _downEndCount _coforallCount[331142] nil[44])
                (330801 'coforall on block' 0 tmp[330791])
              }
            }
          }
          label _continueLabel[331154]
          _indexOfInterest[331149]
          _iterator[331150]
        }
        label _breakLabel[331155]
        Defer
        {
          {
            (331194 call _endCountFree _coforallCount[331142])
          }
        }
        (331199 call _waitEndCount _coforallCount[331142] 0 numTasks[331143])
      }
      {
        const _coforallCount[331211] "const" "end count" "temp"
        (331267 'move' _coforallCount[331211](331264 call _endCountAlloc 0))
        unknown _indexOfInterest[331218] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331219] "expr temp" "temp"
        (331228 'move' _iterator[331219](331226 call _getIterator tmpIter[330785]))
        Defer
        {
          {
            (331244 call _freeIterator _iterator[331219])
          }
        }
        { scopeless type
          (331233 'move' _indexOfInterest[331218](331230 call iteratorIndex _iterator[331219]))
        }
        ForLoop[331220]
        {
          unknown locid[331237] "coforall index var" "index var" "insert auto destroy"
          (331239 'move' locid[331237] _indexOfInterest[331218])
          (331251 call _upEndCount _coforallCount[331211] 0)
          { scopeless
            { scopeless
              const tmp[330776] "const" "temp"
              (330778 'move' tmp[330776](330774 'deref'(330773 '_wide_get_locale'(330357 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330364] "const"(330363 call(330359 call . op c"clone"))
                    (330367 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330373] "ref var"(330372 call locArr locid)
                    (330376 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330381] "ref var"(330378 call . myLocArrDesc c"myElems")
                    (330384 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330389] "const" "ref var"(330386 call . myLocArr c"_dom")
                    (330392 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330417] "temp"(330416 call(330406 call .(330403 call . myLocArr c"_value") c"chpl__preScan") myop res(330415 call myLocDom dom))
                    (330430 call _check_tuple_var_decl tmp[330417] 4)
                    unknown numTasks[330393](330418 call tmp[330417] 0)
                    unknown rngs[330395](330421 call tmp[330417] 1)
                    unknown state[330397](330424 call tmp[330417] 2)
                    unknown tot[330399](330427 call tmp[330417] 3)
                    (330435 'end of statement')
                  }
                  if(330450 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330448 call writeln locid ": "(330446 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330460 call =(330458 call elemPerLoc 1) tot)
                  (330468 call =(330466 call inputReady$ 1) 1)
                  if(330618 call _cond_test(330482 call == locid(330479 call .(330476 call .(330473 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330490] "const"(330489 call(330485 call . op c"clone"))
                      (330493 'end of statement')
                    }
                    { scopeless
                      unknown next[330500](330497 call . metaop c"identity") resType
                      (330503 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330579] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330580] "expr temp" "temp"
                      (330589 'move' _iterator[330580](330587 call _getIterator(330509 call .(330506 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330606 call _freeIterator _iterator[330580])
                        }
                      }
                      { scopeless type
                        (330595 'move' _indexOfInterest[330579](330592 call iteratorIndex _iterator[330580]))
                      }
                      ForLoop[330581]
                      {
                        unknown locid[330599] "index var" "insert auto destroy"
                        (330601 'move' locid[330599] _indexOfInterest[330579])
                        {
                          { scopeless
                            const targetloc[330516] "const"(330515 call targetLocs locid)
                            (330519 'end of statement')
                          }
                          { scopeless
                            const locready[330533] "const"(330532 call(330529 call(330524 call . inputReady$ c"replicand") targetloc) 1)
                            (330536 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330547] "ref var"(330546 call(330543 call(330538 call . elemPerLoc c"replicand") targetloc) 1)
                            (330550 'end of statement')
                          }
                          (330553 call <=> locVal next)
                          (330567 call =(330565 call(330562 call(330557 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (330577 call(330571 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[330584]
                        _indexOfInterest[330579]
                        _iterator[330580]
                      }
                      label _breakLabel[330585]
                    }
                    (330615 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[330626] "const"(330625 call outputReady$ 1)
                    (330629 'end of statement')
                  }
                  { scopeless
                    const myadjust[330634] "const"(330633 call elemPerLoc 1)
                    (330637 'end of statement')
                  }
                  if(330662 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330660 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[330678] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330679] "expr temp" "temp"
                    (330688 'move' _iterator[330679](330686 call _getIterator state))
                    Defer
                    {
                      {
                        (330704 call _freeIterator _iterator[330679])
                      }
                    }
                    { scopeless type
                      (330693 'move' _indexOfInterest[330678](330690 call iteratorIndex _iterator[330679]))
                    }
                    ForLoop[330680]
                    {
                      unknown s[330697] "index var" "insert auto destroy"
                      (330699 'move' s[330697] _indexOfInterest[330678])
                      { scopeless
                        (330676 call(330670 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[330683]
                      _indexOfInterest[330678]
                      _iterator[330679]
                    }
                    label _breakLabel[330684]
                  }
                  if(330735 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330733 call writeln locid ": state = " state)
                    }
                  }
                  (330753 call(330744 call .(330741 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(330763 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330761 call writeln locid ": " myLocArr)
                    }
                  }
                  (330770 call chpl__delete myop)
                }
                (331213 call _downEndCount _coforallCount[331211] nil[44])
                (330781 'coforall on block' 0 tmp[330776])
              }
            }
          }
          label _continueLabel[331223]
          _indexOfInterest[331218]
          _iterator[331219]
        }
        label _breakLabel[331224]
        Defer
        {
          {
            (331255 call _endCountFree _coforallCount[331211])
          }
        }
        (331260 call _waitEndCount _coforallCount[331211] 0)
      }
    }
    (331291 call chpl__delete op)
    (331295 return res)
  }
  where {
    (330255 call &&(330249 call == rank 1)(330254 call chpl__scanStateResTypesMatch op))
  }
  function newBlockDom[331306](arg dom[331303] :
  _domain) : _unknown[51]
  {
    (331315 return(331313 call chpl__distributed(331312 call Block dom) dom))
  }
  function newBlockArr[331326](arg dom[331323] :
  _domain, arg eltType[331328]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown D[331334](331333 call newBlockDom dom)
      (331337 'end of statement')
    }
    { scopeless
      unknown A[331346](331344 call chpl__buildArrayRuntimeType(331342 call chpl__ensureDomainExpr D) eltType)
      (331349 'end of statement')
    }
    (331351 return A)
  }
  function newBlockDom[331363](arg rng[331359] ... :
  range) : _unknown[51]
  {
    (331373 return(331372 call newBlockDom(331369 call chpl__buildDomainExpr(331367 'expand_tuple' rng))))
  }
  function newBlockArr[331386](arg rng[331382] ... :
  range, arg eltType[331388]:_any[178](?)) : _unknown[51]
  {
    (331399 return(331398 call newBlockArr(331394 call chpl__buildDomainExpr(331392 'expand_tuple' rng)) eltType))
  }
}