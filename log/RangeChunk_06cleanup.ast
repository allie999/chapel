AST dump for RangeChunk after pass cleanup.
Module use list: 

{
  (353016 'use' ChapelStandard)
  type RemElems[266466] def Thru[266460]:RemElems[266466] def Pack[266462]:RemElems[266466] def Mod[266464]:RemElems[266466]
  (266471 'use' RemElems)
  (266474 'use' BoundedRangeType)
  function chunks[266489](arg r[266486] :
  (266485 call range unknown RT[266479] bounded unknown S[266483]), arg numChunks[266492] :
  integral, arg remPol[266497] :
  RemElems =
  Thru) : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[266561] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266562] "expr temp" "temp"
      (266571 'move' _iterator[266562](266569 call _getIterator(266517 call chunksOrder r numChunks remPol)))
      Defer
      {
        {
          (266602 call _freeIterator _iterator[266562])
        }
      }
      { scopeless type
        (266577 'move' _indexOfInterest[266561](266574 call iteratorIndex _iterator[266562]))
      }
      ForLoop[266563]
      {
        (266582 call _check_tuple_var_decl _indexOfInterest[266561] 2)
        unknown startOrder[266588] "index var" "insert auto destroy"
        (266590 'move' startOrder[266588](266586 call _indexOfInterest[266561] 0))
        unknown endOrder[266595] "index var" "insert auto destroy"
        (266597 'move' endOrder[266595](266593 call _indexOfInterest[266561] 1))
        {
          const start[266525] "const"(266524 call(266519 call . r c"orderToIndex") startOrder)
          (266528 'end of statement')
          const end[266537] "const"(266536 call(266531 call . r c"orderToIndex") endOrder)
          (266540 'end of statement')
          (266559 yield(266556 IfExpr  S then
          { scopeless
            (266550 call chpl_by(266544 call chpl_build_bounded_range start end)(266547 call . r c"stride"))
          } else
          { scopeless
            (266554 call chpl_build_bounded_range start end)
          } ))
        }
        label _continueLabel[266566]
        _indexOfInterest[266561]
        _iterator[266562]
      }
      label _breakLabel[266567]
    }
  }
  { scopeless type
    (266506 call range RT bounded S)
  }
  function chunk[266626](arg r[266623] :
  (266622 call range unknown RT[266616] bounded unknown S[266620]), arg numChunks[266629] :
  integral, arg idx[266633] :
  integral, arg remPol[266638] :
  RemElems =
  Thru) : _unknown[51]
  {
    const tmp[266660] "const" "temp"(266659 call chunkOrder r numChunks idx remPol)
    (266667 call _check_tuple_var_decl tmp[266660] 2)
    const startOrder[266648] "const"(266661 call tmp[266660] 0)
    const endOrder[266650] "const"(266664 call tmp[266660] 1)
    (266672 'end of statement')
    const start[266681] "const"(266680 call(266675 call . r c"orderToIndex") startOrder)
    (266684 'end of statement')
    const end[266692] "const"(266691 call(266686 call . r c"orderToIndex") endOrder)
    (266695 'end of statement')
    (266714 return(266711 IfExpr  S then
    { scopeless
      (266705 call chpl_by(266699 call chpl_build_bounded_range start end)(266702 call . r c"stride"))
    } else
    { scopeless
      (266709 call chpl_build_bounded_range start end)
    } ))
  }
  { scopeless type
    (266647 call range RT bounded S)
  }
  function blockCyclicChunks[266736](arg r[266733] :
  (266732 call range unknown t[266722](boundedType =(266726 call . BoundedRangeType c"bounded")) unknown strided[266730]), arg blockSize[266739] :
  integral, arg tid[266743] :
  integral, arg nTasks[266747] :
  integral) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(266794 call _cond_test(266752 call >= tid nTasks))
    {
      (266792 call halt(266789 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
    }
    if(266825 call _cond_test(266802 call <= blockSize 0))
    {
      (266823 call halt "blockSize must a positive number")
    }
    if(266855 call _cond_test(266832 call <= nTasks 0))
    {
      (266853 call halt "nTasks must be a positive number")
    }
    unknown rangeStride[266864](266861 call . r c"stride")
    (266867 'end of statement')
    unknown blockStride[266872](266870 call * blockSize rangeStride)
    (266875 'end of statement')
    unknown low[266880](266877 call . r c"low")
    (266883 'end of statement')
    unknown high[266888](266885 call . r c"high")
    (266891 'end of statement')
    unknown firstBlockStart[266913](266911 call +(266904 IfExpr (266894 call > rangeStride 0) then
    { scopeless
      (266897 call . r c"low")
    } else
    { scopeless
      (266901 call . r c"high")
    } )(266909 call * blockStride tid))
    (266916 'end of statement')
    if(266935 call _cond_test(266931 call ||(266922 call > firstBlockStart(266919 call . r c"high"))(266929 call < firstBlockStart(266926 call . r c"low"))))
    {
      (266933 return _void[55])
    }
    unknown strideToNextBlock[266944](266942 call * blockStride nTasks)
    (266947 'end of statement')
    if(267104 call _cond_test(266950 call > rangeStride 0))
    {
      {
        unknown _indexOfInterest[266985] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[266986] "expr temp" "temp"
        (266995 'move' _iterator[266986](266993 call _getIterator(267004 call chpl_direct_range_iter firstBlockStart high strideToNextBlock)))
        Defer
        {
          {
            (267020 call _freeIterator _iterator[266986])
          }
        }
        { scopeless type
          (267009 'move' _indexOfInterest[266985](267006 call iteratorIndex _iterator[266986]))
        }
        ForLoop[266987]
        {
          unknown blockStart[267013] "index var" "insert auto destroy"
          (267015 'move' blockStart[267013] _indexOfInterest[266985])
          {
            unknown blockEnd[266971](266970 call min high(266968 call -(266965 call + blockStart blockStride) 1))
            (266974 'end of statement')
            (266983 yield(266981 call chpl_by(266978 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[266990]
          _indexOfInterest[266985]
          _iterator[266986]
        }
        label _breakLabel[266991]
      }
    }
    {
      {
        unknown _indexOfInterest[267061] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267062] "expr temp" "temp"
        (267071 'move' _iterator[267062](267069 call _getIterator(267080 call chpl_direct_range_iter low firstBlockStart strideToNextBlock)))
        Defer
        {
          {
            (267096 call _freeIterator _iterator[267062])
          }
        }
        { scopeless type
          (267085 'move' _indexOfInterest[267061](267082 call iteratorIndex _iterator[267062]))
        }
        ForLoop[267063]
        {
          unknown blockEnd[267089] "index var" "insert auto destroy"
          (267091 'move' blockEnd[267089] _indexOfInterest[267061])
          {
            unknown blockStart[267047](267046 call max low(267044 call +(267041 call + blockEnd blockStride) 1))
            (267050 'end of statement')
            (267059 yield(267057 call chpl_by(267054 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[267066]
          _indexOfInterest[267061]
          _iterator[267062]
        }
        label _breakLabel[267067]
      }
    }
  }
  function chunksOrder[267122](arg r[267119] :
  (267118 call range unknown RT[267113] bounded ?[260]), arg numChunks[267125] :
  integral, arg remPol[267130] :
  RemElems =
  Thru) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(267153 call _cond_test(267149 call ||(267143 call ==(267139 call . r c"size") 0)(267147 call <= numChunks 0)))
    {
      (267151 return _void[55])
    }
    const nElems[267163] "const"(267160 call . r c"size")
    (267166 'end of statement')
    unknown nChunks[267175](267173 call _cast RT(267171 call min numChunks nElems))
    (267178 'end of statement')
    unknown chunkSize[267179] RT
    unknown rem[267183](267187 'typeof' chunkSize)
    (267188 'end of statement')
    {
      unknown tmp[267255] "expr temp" "maybe param" "maybe type" "temp"
      (267257 'move' tmp[267255] remPol)
      if(267262 call _cond_test(267259 call == tmp[267255] Pack))
      {
        (267198 call = chunkSize(267196 call / nElems nChunks))
        if(267224 call _cond_test(267207 call !=(267204 call * chunkSize nChunks) nElems))
        {
          (267211 call += chunkSize 1)
          (267221 call = nChunks(267220 call divceil nElems chunkSize))
        }
      }
      {
        if(267268 call _cond_test(267265 call == tmp[267255] Mod))
        {
          (267237 call = chunkSize(267235 call / nElems nChunks))
          (267249 call = rem(267247 call - nElems(267245 call * chunkSize nChunks)))
        }
      }
    }
    {
      unknown _indexOfInterest[267391] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267392] "expr temp" "temp"
      (267401 'move' _iterator[267392](267399 call _getIterator(267408 call chpl_direct_counted_range_iter 0 nChunks)))
      Defer
      {
        {
          (267424 call _freeIterator _iterator[267392])
        }
      }
      { scopeless type
        (267413 'move' _indexOfInterest[267391](267410 call iteratorIndex _iterator[267392]))
      }
      ForLoop[267393]
      {
        unknown i[267417] "index var" "insert auto destroy"
        (267419 'move' i[267417] _indexOfInterest[267391])
        {
          unknown chunk[267284](267282 call * 2 RT)
          (267287 'end of statement')
          {
            unknown tmp[267363] "expr temp" "maybe param" "maybe type" "temp"
            (267365 'move' tmp[267363] remPol)
            if(267370 call _cond_test(267367 call == tmp[267363] Thru))
            {
              (267300 call = chunk(267299 call chunkOrderThru nElems nChunks i))
            }
            {
              if(267376 call _cond_test(267373 call == tmp[267363] Pack))
              {
                (267315 call = chunk(267314 call chunkOrderPack chunkSize nElems i))
              }
              {
                if(267383 call _cond_test(267380 call == tmp[267363] Mod))
                {
                  (267332 call = chunk(267331 call chunkOrderMod chunkSize rem nElems nChunks i))
                }
                {
                  (267357 call halt "RangeChunk: unknown RemElems in chunksOrder")
                }
              }
            }
          }
          (267389 yield chunk)
        }
        label _continueLabel[267396]
        _indexOfInterest[267391]
        _iterator[267392]
      }
      label _breakLabel[267397]
    }
  }
  { scopeless type
    (267136 call * 2 RT)
  }
  function chunkOrder[267446](arg r[267443] :
  (267442 call range unknown RT[267437] bounded ?[260]), arg numChunks[267449] :
  integral, arg idx[267453] :
  integral, arg remPol[267458] :
  RemElems =
  Thru) : _unknown[51]
  {
    if(267504 call _cond_test(267489 call ||(267483 call ||(267477 call ||(267471 call ==(267467 call . r c"size") 0)(267475 call <= numChunks 0))(267481 call < idx 0))(267487 call >= idx numChunks)))
    {
      (267502 return(267500 call _build_tuple(267493 call _cast RT 1)(267497 call _cast RT 0)))
    }
    const nElems[267514] "const"(267511 call . r c"size")
    (267517 'end of statement')
    const nChunks[267526] "const"(267524 call _cast RT(267522 call min numChunks nElems))
    (267529 'end of statement')
    const i[267534] "const"(267532 call _cast RT idx)
    (267537 'end of statement')
    {
      unknown tmp[267650] "expr temp" "maybe param" "maybe type" "temp"
      (267652 'move' tmp[267650] remPol)
      if(267657 call _cond_test(267654 call == tmp[267650] Thru))
      {
        (267548 return(267547 call chunkOrderThru nElems nChunks i))
      }
      {
        if(267663 call _cond_test(267660 call == tmp[267650] Pack))
        {
          unknown chunkSize[267559](267557 call / nElems nChunks)
          (267562 'end of statement')
          if(267576 call _cond_test(267569 call !=(267566 call * chunkSize nChunks) nElems))
          {
            (267573 call += chunkSize 1)
          }
          (267587 return(267586 call chunkOrderPack chunkSize nElems i))
        }
        {
          if(267670 call _cond_test(267667 call == tmp[267650] Mod))
          {
            const chunkSize[267597] "const"(267595 call / nElems nChunks)
            (267600 'end of statement')
            const rem[267609] "const"(267607 call - nElems(267605 call * chunkSize nChunks))
            (267612 'end of statement')
            (267621 return(267620 call chunkOrderMod chunkSize rem nElems nChunks i))
          }
          {
            (267644 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267464 call * 2 RT)
  }
  function chunkOrderThru[267685](arg nElems[267682] :
  unknown I[267680], arg nChunks[267688] :
  I, arg i[267692] :
  I) : _unknown[51] "no doc" "private"
  {
    const m[267704] "const"(267702 call * nElems i)
    (267707 'end of statement')
    const start[267725] "const"(267722 IfExpr (267711 call == i 0) then
    { scopeless
      (267715 call _cast I 0)
    } else
    { scopeless
      (267721 call divceil m nChunks)
    } )
    (267728 'end of statement')
    const end[267754] "const"(267751 IfExpr (267734 call == i(267732 call - nChunks 1)) then
    { scopeless
      (267738 call - nElems 1)
    } else
    { scopeless
      (267749 call -(267747 call divceil(267743 call + m nElems) nChunks) 1)
    } )
    (267757 'end of statement')
    (267763 return(267761 call _build_tuple start end))
  }
  { scopeless type
    (267698 call _build_tuple I I)
  }
  function chunkOrderPack[267775](arg chunkSize[267772] :
  unknown I[267770], arg nElems[267778] :
  I, arg i[267782] :
  I) : _unknown[51] "no doc" "private"
  {
    const start[267794] "const"(267792 call * chunkSize i)
    (267797 'end of statement')
    if(267816 call _cond_test(267801 call >= start nElems))
    {
      (267814 return(267812 call _build_tuple(267805 call _cast I 1)(267809 call _cast I 0)))
    }
    unknown end[267828](267826 call -(267823 call + start chunkSize) 1)
    (267831 'end of statement')
    if(267844 call _cond_test(267834 call >= end nElems))
    {
      (267841 call = end(267839 call - nElems 1))
    }
    (267854 return(267852 call _build_tuple start end))
  }
  { scopeless type
    (267788 call _build_tuple I I)
  }
  function chunkOrderMod[267866](arg chunkSize[267863] :
  unknown I[267861], arg rem[267869] :
  I, arg nElems[267873] :
  I, arg nChunks[267877] :
  I, arg i[267881] :
  I) : _unknown[51] "no doc" "private"
  {
    unknown start[267889] I
    unknown end[267893](267897 'typeof' start)
    (267898 'end of statement')
    if(267950 call _cond_test(267902 call < i rem))
    {
      (267912 call = start(267910 call * i(267908 call + chunkSize 1)))
      (267921 call = end(267919 call + start chunkSize))
    }
    {
      (267935 call = start(267933 call - nElems(267931 call *(267928 call - nChunks i) chunkSize)))
      (267947 call = end(267945 call -(267942 call + start chunkSize) 1))
    }
    (267959 return(267957 call _build_tuple start end))
  }
  { scopeless type
    (267887 call _build_tuple I I)
  }
}