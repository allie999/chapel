AST dump for RangeChunk after pass cleanup.
Module use list: 

{
  (353073 'use' ChapelStandard)
  type RemElems[266383] def Thru[266377]:RemElems[266383] def Pack[266379]:RemElems[266383] def Mod[266381]:RemElems[266383]
  (266388 'use' RemElems)
  (266391 'use' BoundedRangeType)
  function chunks[266406](arg r[266403] :
  (266402 call range unknown RT[266396] bounded unknown S[266400]), arg numChunks[266409] :
  integral, arg remPol[266414] :
  RemElems =
  Thru) : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[266478] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266479] "expr temp" "temp"
      (266488 'move' _iterator[266479](266486 call _getIterator(266434 call chunksOrder r numChunks remPol)))
      Defer
      {
        {
          (266519 call _freeIterator _iterator[266479])
        }
      }
      { scopeless type
        (266494 'move' _indexOfInterest[266478](266491 call iteratorIndex _iterator[266479]))
      }
      ForLoop[266480]
      {
        (266499 call _check_tuple_var_decl _indexOfInterest[266478] 2)
        unknown startOrder[266505] "index var" "insert auto destroy"
        (266507 'move' startOrder[266505](266503 call _indexOfInterest[266478] 0))
        unknown endOrder[266512] "index var" "insert auto destroy"
        (266514 'move' endOrder[266512](266510 call _indexOfInterest[266478] 1))
        {
          const start[266442] "const"(266441 call(266436 call . r c"orderToIndex") startOrder)
          (266445 'end of statement')
          const end[266454] "const"(266453 call(266448 call . r c"orderToIndex") endOrder)
          (266457 'end of statement')
          (266476 yield(266473 IfExpr  S then
          { scopeless
            (266467 call chpl_by(266461 call chpl_build_bounded_range start end)(266464 call . r c"stride"))
          } else
          { scopeless
            (266471 call chpl_build_bounded_range start end)
          } ))
        }
        label _continueLabel[266483]
        _indexOfInterest[266478]
        _iterator[266479]
      }
      label _breakLabel[266484]
    }
  }
  { scopeless type
    (266423 call range RT bounded S)
  }
  function chunk[266543](arg r[266540] :
  (266539 call range unknown RT[266533] bounded unknown S[266537]), arg numChunks[266546] :
  integral, arg idx[266550] :
  integral, arg remPol[266555] :
  RemElems =
  Thru) : _unknown[51]
  {
    const tmp[266577] "const" "temp"(266576 call chunkOrder r numChunks idx remPol)
    (266584 call _check_tuple_var_decl tmp[266577] 2)
    const startOrder[266565] "const"(266578 call tmp[266577] 0)
    const endOrder[266567] "const"(266581 call tmp[266577] 1)
    (266589 'end of statement')
    const start[266598] "const"(266597 call(266592 call . r c"orderToIndex") startOrder)
    (266601 'end of statement')
    const end[266609] "const"(266608 call(266603 call . r c"orderToIndex") endOrder)
    (266612 'end of statement')
    (266631 return(266628 IfExpr  S then
    { scopeless
      (266622 call chpl_by(266616 call chpl_build_bounded_range start end)(266619 call . r c"stride"))
    } else
    { scopeless
      (266626 call chpl_build_bounded_range start end)
    } ))
  }
  { scopeless type
    (266564 call range RT bounded S)
  }
  function blockCyclicChunks[266653](arg r[266650] :
  (266649 call range unknown t[266639](boundedType =(266643 call . BoundedRangeType c"bounded")) unknown strided[266647]), arg blockSize[266656] :
  integral, arg tid[266660] :
  integral, arg nTasks[266664] :
  integral) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(266711 call _cond_test(266669 call >= tid nTasks))
    {
      (266709 call halt(266706 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
    }
    if(266742 call _cond_test(266719 call <= blockSize 0))
    {
      (266740 call halt "blockSize must a positive number")
    }
    if(266772 call _cond_test(266749 call <= nTasks 0))
    {
      (266770 call halt "nTasks must be a positive number")
    }
    unknown rangeStride[266781](266778 call . r c"stride")
    (266784 'end of statement')
    unknown blockStride[266789](266787 call * blockSize rangeStride)
    (266792 'end of statement')
    unknown low[266797](266794 call . r c"low")
    (266800 'end of statement')
    unknown high[266805](266802 call . r c"high")
    (266808 'end of statement')
    unknown firstBlockStart[266830](266828 call +(266821 IfExpr (266811 call > rangeStride 0) then
    { scopeless
      (266814 call . r c"low")
    } else
    { scopeless
      (266818 call . r c"high")
    } )(266826 call * blockStride tid))
    (266833 'end of statement')
    if(266852 call _cond_test(266848 call ||(266839 call > firstBlockStart(266836 call . r c"high"))(266846 call < firstBlockStart(266843 call . r c"low"))))
    {
      (266850 return _void[55])
    }
    unknown strideToNextBlock[266861](266859 call * blockStride nTasks)
    (266864 'end of statement')
    if(267021 call _cond_test(266867 call > rangeStride 0))
    {
      {
        unknown _indexOfInterest[266902] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[266903] "expr temp" "temp"
        (266912 'move' _iterator[266903](266910 call _getIterator(266921 call chpl_direct_range_iter firstBlockStart high strideToNextBlock)))
        Defer
        {
          {
            (266937 call _freeIterator _iterator[266903])
          }
        }
        { scopeless type
          (266926 'move' _indexOfInterest[266902](266923 call iteratorIndex _iterator[266903]))
        }
        ForLoop[266904]
        {
          unknown blockStart[266930] "index var" "insert auto destroy"
          (266932 'move' blockStart[266930] _indexOfInterest[266902])
          {
            unknown blockEnd[266888](266887 call min high(266885 call -(266882 call + blockStart blockStride) 1))
            (266891 'end of statement')
            (266900 yield(266898 call chpl_by(266895 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[266907]
          _indexOfInterest[266902]
          _iterator[266903]
        }
        label _breakLabel[266908]
      }
    }
    {
      {
        unknown _indexOfInterest[266978] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[266979] "expr temp" "temp"
        (266988 'move' _iterator[266979](266986 call _getIterator(266997 call chpl_direct_range_iter low firstBlockStart strideToNextBlock)))
        Defer
        {
          {
            (267013 call _freeIterator _iterator[266979])
          }
        }
        { scopeless type
          (267002 'move' _indexOfInterest[266978](266999 call iteratorIndex _iterator[266979]))
        }
        ForLoop[266980]
        {
          unknown blockEnd[267006] "index var" "insert auto destroy"
          (267008 'move' blockEnd[267006] _indexOfInterest[266978])
          {
            unknown blockStart[266964](266963 call max low(266961 call +(266958 call + blockEnd blockStride) 1))
            (266967 'end of statement')
            (266976 yield(266974 call chpl_by(266971 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[266983]
          _indexOfInterest[266978]
          _iterator[266979]
        }
        label _breakLabel[266984]
      }
    }
  }
  function chunksOrder[267039](arg r[267036] :
  (267035 call range unknown RT[267030] bounded ?[260]), arg numChunks[267042] :
  integral, arg remPol[267047] :
  RemElems =
  Thru) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(267070 call _cond_test(267066 call ||(267060 call ==(267056 call . r c"size") 0)(267064 call <= numChunks 0)))
    {
      (267068 return _void[55])
    }
    const nElems[267080] "const"(267077 call . r c"size")
    (267083 'end of statement')
    unknown nChunks[267092](267090 call _cast RT(267088 call min numChunks nElems))
    (267095 'end of statement')
    unknown chunkSize[267096] RT
    unknown rem[267100](267104 'typeof' chunkSize)
    (267105 'end of statement')
    {
      unknown tmp[267172] "expr temp" "maybe param" "maybe type" "temp"
      (267174 'move' tmp[267172] remPol)
      if(267179 call _cond_test(267176 call == tmp[267172] Pack))
      {
        (267115 call = chunkSize(267113 call / nElems nChunks))
        if(267141 call _cond_test(267124 call !=(267121 call * chunkSize nChunks) nElems))
        {
          (267128 call += chunkSize 1)
          (267138 call = nChunks(267137 call divceil nElems chunkSize))
        }
      }
      {
        if(267185 call _cond_test(267182 call == tmp[267172] Mod))
        {
          (267154 call = chunkSize(267152 call / nElems nChunks))
          (267166 call = rem(267164 call - nElems(267162 call * chunkSize nChunks)))
        }
      }
    }
    {
      unknown _indexOfInterest[267308] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267309] "expr temp" "temp"
      (267318 'move' _iterator[267309](267316 call _getIterator(267325 call chpl_direct_counted_range_iter 0 nChunks)))
      Defer
      {
        {
          (267341 call _freeIterator _iterator[267309])
        }
      }
      { scopeless type
        (267330 'move' _indexOfInterest[267308](267327 call iteratorIndex _iterator[267309]))
      }
      ForLoop[267310]
      {
        unknown i[267334] "index var" "insert auto destroy"
        (267336 'move' i[267334] _indexOfInterest[267308])
        {
          unknown chunk[267201](267199 call * 2 RT)
          (267204 'end of statement')
          {
            unknown tmp[267280] "expr temp" "maybe param" "maybe type" "temp"
            (267282 'move' tmp[267280] remPol)
            if(267287 call _cond_test(267284 call == tmp[267280] Thru))
            {
              (267217 call = chunk(267216 call chunkOrderThru nElems nChunks i))
            }
            {
              if(267293 call _cond_test(267290 call == tmp[267280] Pack))
              {
                (267232 call = chunk(267231 call chunkOrderPack chunkSize nElems i))
              }
              {
                if(267300 call _cond_test(267297 call == tmp[267280] Mod))
                {
                  (267249 call = chunk(267248 call chunkOrderMod chunkSize rem nElems nChunks i))
                }
                {
                  (267274 call halt "RangeChunk: unknown RemElems in chunksOrder")
                }
              }
            }
          }
          (267306 yield chunk)
        }
        label _continueLabel[267313]
        _indexOfInterest[267308]
        _iterator[267309]
      }
      label _breakLabel[267314]
    }
  }
  { scopeless type
    (267053 call * 2 RT)
  }
  function chunkOrder[267363](arg r[267360] :
  (267359 call range unknown RT[267354] bounded ?[260]), arg numChunks[267366] :
  integral, arg idx[267370] :
  integral, arg remPol[267375] :
  RemElems =
  Thru) : _unknown[51]
  {
    if(267421 call _cond_test(267406 call ||(267400 call ||(267394 call ||(267388 call ==(267384 call . r c"size") 0)(267392 call <= numChunks 0))(267398 call < idx 0))(267404 call >= idx numChunks)))
    {
      (267419 return(267417 call _build_tuple(267410 call _cast RT 1)(267414 call _cast RT 0)))
    }
    const nElems[267431] "const"(267428 call . r c"size")
    (267434 'end of statement')
    const nChunks[267443] "const"(267441 call _cast RT(267439 call min numChunks nElems))
    (267446 'end of statement')
    const i[267451] "const"(267449 call _cast RT idx)
    (267454 'end of statement')
    {
      unknown tmp[267567] "expr temp" "maybe param" "maybe type" "temp"
      (267569 'move' tmp[267567] remPol)
      if(267574 call _cond_test(267571 call == tmp[267567] Thru))
      {
        (267465 return(267464 call chunkOrderThru nElems nChunks i))
      }
      {
        if(267580 call _cond_test(267577 call == tmp[267567] Pack))
        {
          unknown chunkSize[267476](267474 call / nElems nChunks)
          (267479 'end of statement')
          if(267493 call _cond_test(267486 call !=(267483 call * chunkSize nChunks) nElems))
          {
            (267490 call += chunkSize 1)
          }
          (267504 return(267503 call chunkOrderPack chunkSize nElems i))
        }
        {
          if(267587 call _cond_test(267584 call == tmp[267567] Mod))
          {
            const chunkSize[267514] "const"(267512 call / nElems nChunks)
            (267517 'end of statement')
            const rem[267526] "const"(267524 call - nElems(267522 call * chunkSize nChunks))
            (267529 'end of statement')
            (267538 return(267537 call chunkOrderMod chunkSize rem nElems nChunks i))
          }
          {
            (267561 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267381 call * 2 RT)
  }
  function chunkOrderThru[267602](arg nElems[267599] :
  unknown I[267597], arg nChunks[267605] :
  I, arg i[267609] :
  I) : _unknown[51] "no doc" "private"
  {
    const m[267621] "const"(267619 call * nElems i)
    (267624 'end of statement')
    const start[267642] "const"(267639 IfExpr (267628 call == i 0) then
    { scopeless
      (267632 call _cast I 0)
    } else
    { scopeless
      (267638 call divceil m nChunks)
    } )
    (267645 'end of statement')
    const end[267671] "const"(267668 IfExpr (267651 call == i(267649 call - nChunks 1)) then
    { scopeless
      (267655 call - nElems 1)
    } else
    { scopeless
      (267666 call -(267664 call divceil(267660 call + m nElems) nChunks) 1)
    } )
    (267674 'end of statement')
    (267680 return(267678 call _build_tuple start end))
  }
  { scopeless type
    (267615 call _build_tuple I I)
  }
  function chunkOrderPack[267692](arg chunkSize[267689] :
  unknown I[267687], arg nElems[267695] :
  I, arg i[267699] :
  I) : _unknown[51] "no doc" "private"
  {
    const start[267711] "const"(267709 call * chunkSize i)
    (267714 'end of statement')
    if(267733 call _cond_test(267718 call >= start nElems))
    {
      (267731 return(267729 call _build_tuple(267722 call _cast I 1)(267726 call _cast I 0)))
    }
    unknown end[267745](267743 call -(267740 call + start chunkSize) 1)
    (267748 'end of statement')
    if(267761 call _cond_test(267751 call >= end nElems))
    {
      (267758 call = end(267756 call - nElems 1))
    }
    (267771 return(267769 call _build_tuple start end))
  }
  { scopeless type
    (267705 call _build_tuple I I)
  }
  function chunkOrderMod[267783](arg chunkSize[267780] :
  unknown I[267778], arg rem[267786] :
  I, arg nElems[267790] :
  I, arg nChunks[267794] :
  I, arg i[267798] :
  I) : _unknown[51] "no doc" "private"
  {
    unknown start[267806] I
    unknown end[267810](267814 'typeof' start)
    (267815 'end of statement')
    if(267867 call _cond_test(267819 call < i rem))
    {
      (267829 call = start(267827 call * i(267825 call + chunkSize 1)))
      (267838 call = end(267836 call + start chunkSize))
    }
    {
      (267852 call = start(267850 call - nElems(267848 call *(267845 call - nChunks i) chunkSize)))
      (267864 call = end(267862 call -(267859 call + start chunkSize) 1))
    }
    (267876 return(267874 call _build_tuple start end))
  }
  { scopeless type
    (267804 call _build_tuple I I)
  }
}