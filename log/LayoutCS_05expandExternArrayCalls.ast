AST dump for LayoutCS after pass expandExternArrayCalls.
Module use list: 

{
  (353120 'use' ChapelStandard)
  (336090 'import' RangeChunk)
  { scopeless
    unknown debugCS[336093] "config" "no doc" "param" 0
    (336096 'end of statement')
  }
  { scopeless
    unknown LayoutCSDefaultToSorted[336098] "config" "param" 1
    (336101 'end of statement')
  }
  type _ColumnComparator[336128] function _ColumnComparator[336128].key[336109](arg _mt[336132]:_MT[238], arg this[336130]:_ColumnComparator[336128], arg idx[336106] :
  _tuple) : _unknown[51] "method" "primary method"
  {
    (336122 return(336120 call _build_tuple(336114 call idx 1)(336118 call idx 0)))
  }
  { scopeless
    const _columnComparator[336136] "const" "no doc" _ColumnComparator
    (336139 'end of statement')
  }
  function isCSType[336144](arg t[336142]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (336154 return(336153 call isSubtype(336150 call _to_borrowed t) CS))
    }
  }
  type CS[336294](?) unknown compressRows[336164] "param" 1 bool[10] unknown sortedIndices[336170] "param" LayoutCSDefaultToSorted bool[10] function CS[336294](?).dsiNewSparseDom[336180](arg _mt[336298]:_MT[238], arg this[336296]:CS[336294](?), param arg rank[336177] :
  int[13], arg idxType[336182]:_any[178](?), arg dom[336185] :
  _domain) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336217 return(336190 'new'(_chpl_manager = unmanaged[220](?))(336216 call CSDom rank idxType(336198 call . this c"compressRows")(336204 call . this c"sortedIndices")(336208 call . dom c"stridable")(336214 call _to_unmanaged this) dom)))
  } function CS[336294](?).dsiClone[336224](arg _mt[336302]:_MT[238], arg this[336300]:CS[336294](?)) : _unknown[51] "method" "primary method"
  {
    (336242 return(336228 'new'(_chpl_manager = unmanaged[220](?))(336241 call CS(compressRows =(336231 call . this c"compressRows"))(sortedIndices =(336237 call . this c"sortedIndices")))))
  } function CS[336294](?).dsiEqualDMaps[336263](arg _mt[336306]:_MT[238], arg this[336304]:CS[336294](?), arg that[336260] :
  (336259 call CS(336251 call . this c"compressRows")(336256 call . this c"sortedIndices"))) param : _unknown[51] "method" "primary method"
  {
    (336266 return 1)
  } function CS[336294](?).dsiEqualDMaps[336275](arg _mt[336310]:_MT[238], arg this[336308]:CS[336294](?), arg that[336273]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (336278 return 0)
  } function CS[336294](?).dsiIsLayout[336285](arg _mt[336314]:_MT[238], arg this[336312]:CS[336294](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (336288 return 1)
  } BaseDist
  type CSDom[340956](?) unknown compressRows[336320] "param" unknown sortedIndices[336324] "param" unknown stridable[336328] "param" unknown dist[336338](336337 'to unmanaged class from unknown'(336336 call CS compressRows sortedIndices)) unknown rowRange[336348](336347 call range idxType(stridable = stridable)) unknown colRange[336358](336357 call range idxType(stridable = stridable)) unknown startIdxDom[336368](336366 call chpl__buildDomainRuntimeType defaultDist 1 idxType) unknown _nnz[336373] 0 unknown startIdx[336384] "local field"(336382 call chpl__buildArrayRuntimeType(336380 call chpl__ensureDomainExpr startIdxDom) idxType) unknown idx[336395] "local field"(336393 call chpl__buildArrayRuntimeType(336391 call chpl__ensureDomainExpr nnzDom) idxType) function CSDom[340956](?).init[336403](arg _mt[340960]:_MT[238], arg this[340958]:CSDom[340956](?), param arg rank[336401]:_any[178](?), arg idxType[336405]:_any[178](?), param arg compressRows[336407]:_any[178](?), param arg sortedIndices[336409]:_any[178](?), param arg stridable[336411]:_any[178](?), arg dist[336419] :
  (336418 'to unmanaged class from unknown'(336417 call CS compressRows sortedIndices)), arg parentDom[336423] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(336460 call _cond_test(336437 call ||(336428 call != rank 2)(336435 call !=(336431 call . parentDom c"rank") 2)))
    {
      { scopeless
        (336458 call compilerError "Only 2D sparse domains are supported by the CS distribution")
      }
    }
    if(336512 call _cond_test(336471 call !=(336467 call . parentDom c"idxType") idxType))
    {
      { scopeless
        (336510 call compilerError(336507 call +(336498 call +(336495 call + "idxType mismatch in CSDom.init(): "(336493 call _cast string[26] idxType)) " != ")(336505 call _cast string[26](336501 call . parentDom c"idxType"))))
      }
    }
    (336525 call(336518 call . super c"init") rank idxType parentDom)
    (336532 call =(336528 call . this c"compressRows") compressRows)
    (336540 call =(336536 call . this c"sortedIndices") sortedIndices)
    (336548 call =(336544 call . this c"stridable") stridable)
    (336556 call =(336552 call . this c"dist") dist)
    (336567 call = rowRange(336566 call(336561 call . parentDom c"dim") 0))
    (336578 call = colRange(336577 call(336572 call . parentDom c"dim") 1))
    (336618 call = startIdxDom(336615 IfExpr  compressRows then
    { scopeless
      (336597 call chpl__buildDomainExpr(336594 call chpl_build_bounded_range(336584 call . rowRange c"low")(336592 call +(336588 call . rowRange c"high") 1)))
    } else
    { scopeless
      (336613 call chpl__buildDomainExpr(336610 call chpl_build_bounded_range(336600 call . colRange c"low")(336608 call +(336604 call . colRange c"high") 1)))
    } ))
    (336626 call(336622 call . this c"complete"))
    (336636 call = nnzDom(336634 call chpl__buildDomainExpr(336631 call chpl_build_bounded_range 1 _nnz)))
    (336641 call dsiClear)
  } function CSDom[340956](?).getNNZ[336647](arg _mt[340964]:_MT[238], arg this[340962]:CSDom[340956](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (336651 return _nnz)
  }
  { scopeless type
    int[13]
  } function CSDom[340956](?).dsiMyDist[336659](arg _mt[340968]:_MT[238], arg this[340966]:CSDom[340956](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (336662 return dist)
    }
  } function CSDom[340956](?).dsiAssignDomain[336673](arg _mt[340972]:_MT[238], arg this[340970]:CSDom[340956](?), arg rhs[336670] :
  _domain, arg lhsPrivate[336676] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    if(336808 call _cond_test(336698 call &&(336689 call ==(336686 call _to_borrowed(336684 'typeof'(336681 call . rhs c"_instance")))(336688 'typeof' this))(336696 call ==(336692 call . this c"dsiNumIndices") 0)))
    {
      (336708 call =(336701 call . this c"_nnz")(336705 call . rhs c"_nnz"))
      (336720 call =(336713 call . this c"nnzDom")(336717 call . rhs c"nnzDom"))
      (336733 call =(336726 call . this c"startIdx")(336730 call . rhs c"startIdx"))
      (336744 call =(336737 call . this c"idx")(336741 call . rhs c"idx"))
    }
    {
      { scopeless
        if(336804 call _cond_test(336756 call <(336754 call _to_borrowed(336752 'typeof'(336749 call . rhs c"_instance"))) DefaultSparseDom))
        {
          (336794 call(336759 call . this c"dsiBulkAdd")(336785 call(336766 call .(336763 call . rhs c"_instance") c"_indices")(336782 call #(336776 call chpl_build_low_bounded_range(336773 call .(336770 call . rhs c"nnzDom") c"low"))(336779 call . rhs c"_nnz")))(dataSorted =(336788 call . this c"compressRows"))(isUnique = 1))
        }
        {
          (336801 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
        }
      }
    }
  } function CSDom[340956](?).dsiBuildArray[336820](arg _mt[340976]:_MT[238], arg this[340974]:CSDom[340956](?), arg eltType[336818]:_any[178](?), param arg initElts[336823] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (336845 return(336828 'new'(_chpl_manager = unmanaged[220](?))(336844 call CSArr(eltType = eltType)(rank = rank)(idxType = idxType)(dom =(336840 call _to_unmanaged this))(initElts = initElts))))
  } function CSDom[340956](?).dsiIndsIterSafeForRemoving[336852](arg _mt[340980]:_MT[238], arg this[340978]:CSDom[340956](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown cursor[336869](336866 IfExpr (336855 call . this c"compressRows") then
      { scopeless
        (336859 call . rowRange c"high")
      } else
      { scopeless
        (336863 call . colRange c"high")
      } )
      (336872 'end of statement')
    }
    {
      unknown _indexOfInterest[336959] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[336960] "expr temp" "temp"
      (336969 'move' _iterator[336960](336967 call _getIterator(336980 call chpl_direct_range_iter 1 _nnz(336976 call - 1))))
      Defer
      {
        {
          (336996 call _freeIterator _iterator[336960])
        }
      }
      { scopeless type
        (336985 'move' _indexOfInterest[336959](336982 call iteratorIndex _iterator[336960]))
      }
      ForLoop[336961]
      {
        unknown i[336989] "index var" "insert auto destroy"
        (336991 'move' i[336989] _indexOfInterest[336959])
        {
          {
            unknown tmp[336897] "temp"
            (336925 'move' tmp[336897](336918 call _cond_test(336920 call >(336922 call startIdx cursor) i)))
            WhileDo[336902]
            {
              {
                (336893 call -= cursor 1)
              }
              label _continueLabel[336900]
              (336913 'move' tmp[336897](336906 call _cond_test(336908 call >(336910 call startIdx cursor) i)))
              tmp[336897]
            }
            label _breakLabel[336901]
          }
          if(336955 call _cond_test(336930 call . this c"compressRows"))
          {
            (336941 yield(336939 call _build_tuple cursor(336937 call idx i)))
          }
          {
            (336952 yield(336950 call _build_tuple(336947 call idx i) cursor))
          }
        }
        label _continueLabel[336964]
        _indexOfInterest[336959]
        _iterator[336960]
      }
      label _breakLabel[336965]
    }
  } function CSDom[340956](?).these[337007](arg _mt[340984]:_MT[238], arg this[340982]:CSDom[340956](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown cursor[337024](337021 IfExpr (337010 call . this c"compressRows") then
      { scopeless
        (337014 call . rowRange c"low")
      } else
      { scopeless
        (337018 call . colRange c"low")
      } )
      (337027 'end of statement')
    }
    {
      unknown _indexOfInterest[337118] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337119] "expr temp" "temp"
      (337128 'move' _iterator[337119](337126 call _getIterator(337133 call chpl_direct_range_iter 1 _nnz 1)))
      Defer
      {
        {
          (337149 call _freeIterator _iterator[337119])
        }
      }
      { scopeless type
        (337138 'move' _indexOfInterest[337118](337135 call iteratorIndex _iterator[337119]))
      }
      ForLoop[337120]
      {
        unknown i[337142] "index var" "insert auto destroy"
        (337144 'move' i[337142] _indexOfInterest[337118])
        {
          {
            unknown tmp[337050] "temp"
            (337084 'move' tmp[337050](337074 call _cond_test(337076 call <=(337078 call startIdx(337080 call + cursor 1)) i)))
            WhileDo[337055]
            {
              {
                (337046 call += cursor 1)
              }
              label _continueLabel[337053]
              (337069 'move' tmp[337050](337059 call _cond_test(337061 call <=(337063 call startIdx(337065 call + cursor 1)) i)))
              tmp[337050]
            }
            label _breakLabel[337054]
          }
          if(337112 call _cond_test(337089 call . this c"compressRows"))
          {
            { scopeless
              (337100 yield(337098 call _build_tuple cursor(337096 call idx i)))
            }
          }
          {
            { scopeless
              (337110 yield(337108 call _build_tuple(337105 call idx i) cursor))
            }
          }
        }
        label _continueLabel[337123]
        _indexOfInterest[337118]
        _iterator[337119]
      }
      label _breakLabel[337124]
    }
  } function CSDom[340956](?).these[337164](arg _mt[340988]:_MT[238], arg this[340986]:CSDom[340956](?), param arg tag[337161] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (337174 'use' DSIUtil)
    { scopeless
      const numElems[337178] "const" _nnz
      (337181 'end of statement')
    }
    { scopeless
      const numChunks[337186] "const"(337185 call _computeNumChunks numElems)
      (337189 'end of statement')
    }
    if(337216 call _cond_test debugCS)
    {
      { scopeless
        (337214 call writeln "CSDom leader: " numChunks " chunks, " numElems " elems")
      }
    }
    if(337430 call _cond_test(337223 call == numChunks 1))
    {
      { scopeless
        (337231 yield(337229 call _build_tuple this 1 numElems))
      }
    }
    {
      unknown tmpIter[337259] "expr temp" "maybe ref" "no copy" "temp"
      (337262 'move' tmpIter[337259](337244 call(337235 call . RangeChunk c"chunks")(337240 call chpl_build_bounded_range 1 numElems) numChunks))
      unknown isRngDomArr[337411] "maybe param" "temp"
      (337426 'move' isRngDomArr[337411](337424 call ||(337413 call isBoundedRange tmpIter[337259])(337422 call ||(337416 call isDomain tmpIter[337259])(337419 call isArray tmpIter[337259]))))
      if isRngDomArr[337411]
      {
        const _coforallCount[337278] "const" "end count" "temp"
        (337347 'move' _coforallCount[337278](337344 call _endCountAlloc 1))
        unknown numTasks[337279] "temp"
        (337331 'move' numTasks[337279](337327 call . tmpIter[337259] c"size"))
        (337322 call _upEndCount _coforallCount[337278] 1 numTasks[337279])
        (337319 call chpl_resetTaskSpawn numTasks[337279])
        unknown _indexOfInterest[337286] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337287] "expr temp" "temp"
        (337296 'move' _iterator[337287](337294 call _getIterator tmpIter[337259]))
        Defer
        {
          {
            (337312 call _freeIterator _iterator[337287])
          }
        }
        { scopeless type
          (337301 'move' _indexOfInterest[337286](337298 call iteratorIndex _iterator[337287]))
        }
        ForLoop[337288]
        {
          unknown chunk[337305] "coforall index var" "index var" "insert auto destroy"
          (337307 'move' chunk[337305] _indexOfInterest[337286])
          {
            { scopeless
              (337265 yield(337267 call _build_tuple this(337270 call . chunk c"first")(337274 call . chunk c"last")))
            }
            (337281 call _downEndCount _coforallCount[337278] nil[44])
            (337280 'coforall loop')
          }
          label _continueLabel[337291]
          _indexOfInterest[337286]
          _iterator[337287]
        }
        label _breakLabel[337292]
        Defer
        {
          {
            (337334 call _endCountFree _coforallCount[337278])
          }
        }
        (337339 call _waitEndCount _coforallCount[337278] 1 numTasks[337279])
      }
      {
        const _coforallCount[337351] "const" "end count" "temp"
        (337408 'move' _coforallCount[337351](337405 call _endCountAlloc 1))
        unknown _indexOfInterest[337359] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[337360] "expr temp" "temp"
        (337369 'move' _iterator[337360](337367 call _getIterator tmpIter[337259]))
        Defer
        {
          {
            (337385 call _freeIterator _iterator[337360])
          }
        }
        { scopeless type
          (337374 'move' _indexOfInterest[337359](337371 call iteratorIndex _iterator[337360]))
        }
        ForLoop[337361]
        {
          unknown chunk[337378] "coforall index var" "index var" "insert auto destroy"
          (337380 'move' chunk[337378] _indexOfInterest[337359])
          (337392 call _upEndCount _coforallCount[337351] 1)
          {
            { scopeless
              (337257 yield(337255 call _build_tuple this(337247 call . chunk c"first")(337252 call . chunk c"last")))
            }
            (337354 call _downEndCount _coforallCount[337351] nil[44])
            (337353 'coforall loop')
          }
          label _continueLabel[337364]
          _indexOfInterest[337359]
          _iterator[337360]
        }
        label _breakLabel[337365]
        Defer
        {
          {
            (337396 call _endCountFree _coforallCount[337351])
          }
        }
        (337401 call _waitEndCount _coforallCount[337351] 1)
      }
    }
  }
  where {
    (337171 call == tag(337168 call . iterKind c"leader"))
  } function CSDom[340956](?).these[337444](arg _mt[340992]:_MT[238], arg this[340990]:CSDom[340956](?), param arg tag[337441] :
  iterKind, arg followThis[337452] :
  (337450 call _build_tuple ?[260] ?[260] ?[260])) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[337470] "temp" followThis
      (337480 call _check_tuple_var_decl tmp[337470] 3)
      unknown followThisDom[337462](337471 call tmp[337470] 0)
      unknown startIx[337464](337474 call tmp[337470] 1)
      unknown endIx[337466](337477 call tmp[337470] 2)
      (337485 'end of statement')
    }
    if(337513 call _cond_test boundsChecking)
    {
      { scopeless
        (337511 call assert(337491 call <= startIx endIx) "CSDom follower - got nothing to iterate over")
      }
    }
    if(337545 call _cond_test(337520 call != followThisDom this))
    {
      { scopeless
        (337543 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays (CS layout)")
      }
    }
    { scopeless
      unknown cursor[337554](337553 call _private_findStart startIx)
      (337557 'end of statement')
    }
    if(337622 call _cond_test debugCS)
    {
      { scopeless
        (337620 call writeln "CSDom follower: " startIx ".." endIx "  startIdx(" cursor ")="(337619 call startIdx cursor))
      }
    }
    {
      unknown _indexOfInterest[337715] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[337716] "expr temp" "temp"
      (337725 'move' _iterator[337716](337723 call _getIterator(337730 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (337746 call _freeIterator _iterator[337716])
        }
      }
      { scopeless type
        (337735 'move' _indexOfInterest[337715](337732 call iteratorIndex _iterator[337716]))
      }
      ForLoop[337717]
      {
        unknown i[337739] "index var" "insert auto destroy"
        (337741 'move' i[337739] _indexOfInterest[337715])
        {
          {
            unknown tmp[337647] "temp"
            (337681 'move' tmp[337647](337671 call _cond_test(337673 call <=(337675 call startIdx(337677 call + cursor 1)) i)))
            WhileDo[337652]
            {
              { scopeless
                (337644 call += cursor 1)
              }
              label _continueLabel[337650]
              (337666 'move' tmp[337647](337656 call _cond_test(337658 call <=(337660 call startIdx(337662 call + cursor 1)) i)))
              tmp[337647]
            }
            label _breakLabel[337651]
          }
          if(337709 call _cond_test(337686 call . this c"compressRows"))
          {
            { scopeless
              (337697 yield(337695 call _build_tuple cursor(337693 call idx i)))
            }
          }
          {
            { scopeless
              (337707 yield(337705 call _build_tuple(337702 call idx i) cursor))
            }
          }
        }
        label _continueLabel[337720]
        _indexOfInterest[337715]
        _iterator[337716]
      }
      label _breakLabel[337721]
    }
  }
  where {
    (337460 call == tag(337457 call . iterKind c"follower"))
  } function CSDom[340956](?).these[337762](arg _mt[340996]:_MT[238], arg this[340994]:CSDom[340956](?), param arg tag[337759] :
  iterKind, arg followThis[337764]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (337792 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (337796 yield 0)
  }
  where {
    (337771 call == tag(337768 call . iterKind c"follower"))
  } function CSDom[340956](?)._private_findStart[337805](arg _mt[341000]:_MT[238], arg this[340998]:CSDom[340956](?), arg startIx[337803]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (337819 return(337818 call _private_findStart startIx(337811 call . startIdxDom c"low")(337815 call . startIdxDom c"high")))
  } function CSDom[340956](?)._private_findStart[337828](arg _mt[341004]:_MT[238], arg this[341002]:CSDom[340956](?), arg startIx[337826]:_any[178](?), arg low[337830]:_any[178](?), arg high[337832]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown approx[337835] 2
      (337838 'end of statement')
    }
    { scopeless
      unknown l[337841] low
      unknown h[337845] high
      (337848 'end of statement')
    }
    {
      unknown tmp[337891] "temp"
      (337921 'move' tmp[337891](337913 call _cond_test(337915 call > h(337918 call + l approx))))
      WhileDo[337896]
      {
        {
          { scopeless
            unknown m[337863](337861 call /(337858 call + h l) 2)
            (337866 'end of statement')
          }
          if(337885 call _cond_test(337873 call <=(337871 call startIdx m) startIx))
          {
            { scopeless
              (337877 call = l m)
            }
          }
          {
            { scopeless
              (337882 call = h m)
            }
          }
        }
        label _continueLabel[337894]
        (337908 'move' tmp[337891](337900 call _cond_test(337902 call > h(337905 call + l approx))))
        tmp[337891]
      }
      label _breakLabel[337895]
    }
    { scopeless
      unknown hh[337932](337931 call min(337927 call + l approx) high)
      (337935 'end of statement')
    }
    if(337994 call _cond_test boundsChecking)
    {
      (337963 call assert(337943 call <=(337941 call startIdx l) startIx) "CSDom.findStart-1")
      (337992 call assert(337972 call < startIx(337971 call startIdx hh)) "CSDom.findStart-2")
    }
    (337999 return l)
  } function CSDom[340956](?).stopIdx[338007](arg _mt[341008]:_MT[238], arg this[341006]:CSDom[340956](?), arg i[338005]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (338019 return(338017 call -(338015 call startIdx(338012 call + i 1)) 1))
  } function CSDom[340956](?).find[338033](arg _mt[341012]:_MT[238], arg this[341010]:CSDom[340956](?), arg ind[338030] :
  (338028 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338036 'use' Search)
    { scopeless
      const tmp[338045] "const" "temp" ind
      (338052 call _check_tuple_var_decl tmp[338045] 2)
      const row[338039] "const"(338046 call tmp[338045] 0)
      const col[338041] "const"(338049 call tmp[338045] 1)
      (338057 'end of statement')
    }
    { scopeless
      unknown ret[338063](338061 call _build_tuple bool[10] idxType)
      (338066 'end of statement')
    }
    if(338169 call _cond_test(338068 call . this c"compressRows"))
    {
      if(338114 call _cond_test(338072 call . this c"sortedIndices"))
      {
        { scopeless
          (338091 call = ret(338090 call binarySearch idx col(lo =(338083 call startIdx row))(hi =(338088 call stopIdx row))))
        }
      }
      {
        (338110 call = ret(338109 call linearSearch idx col(lo =(338102 call startIdx row))(hi =(338107 call stopIdx row))))
      }
    }
    {
      if(338163 call _cond_test(338121 call . this c"sortedIndices"))
      {
        { scopeless
          (338140 call = ret(338139 call binarySearch idx row(lo =(338132 call startIdx col))(hi =(338137 call stopIdx col))))
        }
      }
      {
        (338159 call = ret(338158 call linearSearch idx row(lo =(338151 call startIdx col))(hi =(338156 call stopIdx col))))
      }
    }
    (338174 return ret)
  } function CSDom[340956](?).dsiMember[338187](arg _mt[341016]:_MT[238], arg this[341014]:CSDom[340956](?), arg ind[338184] :
  (338182 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(338222 call _cond_test(338195 call(338190 call . parentDom c"contains") ind))
    {
      { scopeless
        const tmp[338205] "const" "temp"(338204 call find ind)
        (338212 call _check_tuple_var_decl tmp[338205] 2)
        const found[338196] "const"(338206 call tmp[338205] 0)
        const loc[338198] "const"(338209 call tmp[338205] 1)
        (338217 'end of statement')
      }
      (338220 return found)
    }
    (338228 return 0)
  } function CSDom[340956](?).dsiFirst[338234](arg _mt[341020]:_MT[238], arg this[341018]:CSDom[340956](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338253 call _cond_test(338238 call == _nnz 0))
    {
      { scopeless
        (338251 return(338249 call -(338241 call . parentDom c"low")(338247 call _build_tuple 1 1)))
      }
    }
    { scopeless
      const _low[338263] "const"(338260 call . nnzDom c"low")
      (338266 'end of statement')
    }
    {
      unknown _indexOfInterest[338330] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338331] "expr temp" "temp"
      (338340 'move' _iterator[338331](338338 call _getIterator startIdxDom))
      Defer
      {
        {
          (338356 call _freeIterator _iterator[338331])
        }
      }
      { scopeless type
        (338345 'move' _indexOfInterest[338330](338342 call iteratorIndex _iterator[338331]))
      }
      ForLoop[338332]
      {
        unknown i[338349] "index var" "insert auto destroy"
        (338351 'move' i[338349] _indexOfInterest[338330])
        {
          if(338325 call _cond_test(338274 call >(338272 call startIdx i) _low))
          {
            if(338318 call _cond_test(338277 call . this c"compressRows"))
            {
              { scopeless
                (338297 return(338295 call _build_tuple(338282 call - i 1)(338293 call idx(338289 call .(338286 call . idx c"_dom") c"low"))))
              }
            }
            {
              { scopeless
                (338316 return(338314 call _build_tuple(338308 call idx(338304 call .(338301 call . idx c"_dom") c"low"))(338311 call - i 1)))
              }
            }
          }
        }
        label _continueLabel[338335]
        _indexOfInterest[338330]
        _iterator[338331]
      }
      label _breakLabel[338336]
    }
    (338382 call halt "Something went wrong in dsiFirst")
    (338389 return(338387 call _build_tuple 0 0))
  } function CSDom[340956](?).dsiLast[338395](arg _mt[341024]:_MT[238], arg this[341022]:CSDom[340956](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(338414 call _cond_test(338399 call == _nnz 0))
    {
      { scopeless
        (338412 return(338410 call -(338402 call . parentDom c"low")(338408 call _build_tuple 1 1)))
      }
    }
    { scopeless
      unknown _last[338430](338428 call -(338426 call(338421 call . parentDom c"low") 1) 1)
      (338433 'end of statement')
    }
    {
      unknown _indexOfInterest[338456] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338457] "expr temp" "temp"
      (338466 'move' _iterator[338457](338464 call _getIterator startIdxDom))
      Defer
      {
        {
          (338482 call _freeIterator _iterator[338457])
        }
      }
      { scopeless type
        (338471 'move' _indexOfInterest[338456](338468 call iteratorIndex _iterator[338457]))
      }
      ForLoop[338458]
      {
        unknown i[338475] "index var" "insert auto destroy"
        (338477 'move' i[338475] _indexOfInterest[338456])
        { scopeless
          if(338451 call _cond_test(338441 call >(338439 call startIdx i) _last))
          {
            { scopeless
              (338448 call = _last(338446 call - i 1))
            }
          }
        }
        label _continueLabel[338461]
        _indexOfInterest[338456]
        _iterator[338457]
      }
      label _breakLabel[338462]
    }
    if(338513 call _cond_test(338490 call . this c"compressRows"))
    {
      { scopeless
        (338501 return(338499 call _build_tuple _last(338497 call idx _nnz)))
      }
    }
    {
      { scopeless
        (338511 return(338509 call _build_tuple(338506 call idx _nnz) _last))
      }
    }
  } function CSDom[340956](?).dsiAdd[338530](arg _mt[341028]:_MT[238], arg this[341026]:CSDom[340956](?), arg ind[338527] :
  (338525 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (338535 call boundsCheck ind)
    { scopeless
      const tmp[338547] "const" "temp"(338546 call find ind)
      (338554 call _check_tuple_var_decl tmp[338547] 2)
      const found[338538] "const"(338548 call tmp[338547] 0)
      const insertPt[338540] "const"(338551 call tmp[338547] 1)
      (338559 'end of statement')
    }
    if(338564 call _cond_test found)
    {
      { scopeless
        (338562 return 0)
      }
    }
    (338571 call += _nnz 1)
    { scopeless
      unknown oldNNZDomSize[338578](338575 call . nnzDom c"size")
      (338581 'end of statement')
    }
    (338585 call _grow _nnz)
    { scopeless
      const tmp[338593] "const" "temp" ind
      (338600 call _check_tuple_var_decl tmp[338593] 2)
      const row[338587] "const"(338594 call tmp[338593] 0)
      const col[338589] "const"(338597 call tmp[338593] 1)
      (338605 'end of statement')
    }
    {
      unknown _indexOfInterest[338634] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338635] "expr temp" "temp"
      (338644 'move' _iterator[338635](338642 call _getIterator(338661 call chpl_direct_range_iter insertPt(338658 call - _nnz 1)(338654 call - 1))))
      Defer
      {
        {
          (338677 call _freeIterator _iterator[338635])
        }
      }
      { scopeless type
        (338666 'move' _indexOfInterest[338634](338663 call iteratorIndex _iterator[338635]))
      }
      ForLoop[338636]
      {
        unknown i[338670] "index var" "insert auto destroy"
        (338672 'move' i[338670] _indexOfInterest[338634])
        {
          (338630 call =(338625 call idx(338622 call + i 1))(338629 call idx i))
        }
        label _continueLabel[338639]
        _indexOfInterest[338634]
        _iterator[338635]
      }
      label _breakLabel[338640]
    }
    if(338704 call _cond_test(338685 call . this c"compressRows"))
    {
      { scopeless
        (338693 call =(338691 call idx insertPt) col)
      }
    }
    {
      { scopeless
        (338701 call =(338699 call idx insertPt) row)
      }
    }
    { scopeless
      unknown start[338719](338716 IfExpr (338711 call . this c"compressRows") then
      { scopeless
        row
      } else
      { scopeless
        col
      } )
      (338722 'end of statement')
    }
    {
      unknown _indexOfInterest[338743] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338744] "expr temp" "temp"
      (338753 'move' _iterator[338744](338751 call _getIterator(338764 call chpl_direct_range_iter(338757 call + start 1)(338761 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (338780 call _freeIterator _iterator[338744])
        }
      }
      { scopeless type
        (338769 'move' _indexOfInterest[338743](338766 call iteratorIndex _iterator[338744]))
      }
      ForLoop[338745]
      {
        unknown rc[338773] "index var" "insert auto destroy"
        (338775 'move' rc[338773] _indexOfInterest[338743])
        {
          (338739 call +=(338737 call startIdx rc) 1)
        }
        label _continueLabel[338748]
        _indexOfInterest[338743]
        _iterator[338744]
      }
      label _breakLabel[338749]
    }
    {
      unknown _indexOfInterest[338814] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[338815] "expr temp" "temp"
      (338824 'move' _iterator[338815](338822 call _getIterator _arrs))
      Defer
      {
        {
          (338840 call _freeIterator _iterator[338815])
        }
      }
      { scopeless type
        (338829 'move' _indexOfInterest[338814](338826 call iteratorIndex _iterator[338815]))
      }
      ForLoop[338816]
      {
        unknown a[338833] "index var" "insert auto destroy"
        (338835 'move' a[338833] _indexOfInterest[338814])
        {
          (338811 call(338790 call . a c"sparseShiftArray")(338798 call chpl_build_bounded_range insertPt(338796 call - _nnz 1))(338809 call chpl_build_bounded_range(338803 call + oldNNZDomSize 1)(338806 call . nnzDom c"size")))
        }
        label _continueLabel[338819]
        _indexOfInterest[338814]
        _iterator[338815]
      }
      label _breakLabel[338820]
    }
    (338848 return 1)
  } function CSDom[340956](?).bulkAdd_help[338866](arg _mt[341032]:_MT[238], arg this[341030]:CSDom[340956](?), arg inds[338863] :
  (338861 call chpl__buildArrayRuntimeType unknown indsDom[338854](338859 call * rank idxType)), arg dataSorted[338869] =
  0, arg isUnique[338873] =
  0, arg addOn[338877] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    (338881 'import' Sort)
    if(338922 call _cond_test(338886 call != addOn nilLocale))
    {
      if(338917 call _cond_test(338893 call != addOn(338891 call chpl_localeID_to_locale(338890 '_wide_get_locale' this))))
      {
        (338914 call halt "Bulk index addition is only possible on the locale where the\n            sparse domain is created")
      }
    }
    if(338952 call _cond_test(338927 call . this c"compressRows"))
    {
      { scopeless
        (338940 call bulkAdd_prepareInds inds dataSorted isUnique(cmp =(338936 call . Sort c"defaultComparator")))
      }
    }
    {
      (338949 call bulkAdd_prepareInds inds dataSorted isUnique(cmp = _columnComparator))
    }
    if(339385 call _cond_test(338959 call == _nnz 0))
    {
      { scopeless
        const dupCount[338970] "const"(338967 IfExpr  isUnique then
        { scopeless
          0
        } else
        { scopeless
          (338966 call _countDuplicates inds)
        } )
        (338973 'end of statement')
      }
      (338983 call += _nnz(338981 call -(338977 call . inds c"size") dupCount))
      (338988 call _bulkGrow)
      { scopeless
        unknown idxIdx[338991] 1
        (338994 'end of statement')
      }
      { scopeless
        unknown prevIdx[339006](339004 call -(338996 call . parentDom c"low")(339002 call _build_tuple 1 1))
        (339009 'end of statement')
      }
      { scopeless
        unknown current[339011] idxType
        (339014 'end of statement')
      }
      if(339047 call _cond_test(339016 call . this c"compressRows"))
      {
        { scopeless
          (339030 call = current(339027 call .(339026 call(339021 call . parentDom c"dim") 0) c"low"))
        }
      }
      {
        { scopeless
          (339044 call = current(339041 call .(339040 call(339035 call . parentDom c"dim") 1) c"low"))
        }
      }
      {
        unknown _indexOfInterest[339251] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339252] "expr temp" "temp"
        (339261 'move' _iterator[339252](339259 call _getIterator inds))
        Defer
        {
          {
            (339291 call _freeIterator _iterator[339252])
          }
        }
        { scopeless type
          (339266 'move' _indexOfInterest[339251](339263 call iteratorIndex _iterator[339252]))
        }
        ForLoop[339253]
        {
          (339271 call _check_tuple_var_decl _indexOfInterest[339251] 2)
          unknown i[339277] "index var" "insert auto destroy"
          (339279 'move' i[339277](339275 call _indexOfInterest[339251] 0))
          unknown j[339284] "index var" "insert auto destroy"
          (339286 'move' j[339284](339282 call _indexOfInterest[339251] 1))
          {
            if(339084 call _cond_test(339070 call &&(339060 call ! isUnique)(339068 call ==(339065 call _build_tuple i j) prevIdx)))
            {
              { scopeless
                continue nil[44]
              }
            }
            {
              { scopeless
                (339081 call = prevIdx(339079 call _build_tuple i j))
              }
            }
            if(339247 call _cond_test(339092 call . this c"compressRows"))
            {
              {
                unknown tmp[339119] "temp"
                (339143 'move' tmp[339119](339138 call _cond_test(339140 call != i current)))
                WhileDo[339124]
                {
                  {
                    (339101 call += current 1)
                    (339116 call =(339111 call startIdx(339108 call + current 1))(339115 call startIdx current))
                  }
                  label _continueLabel[339122]
                  (339133 'move' tmp[339119](339128 call _cond_test(339130 call != i current)))
                  tmp[339119]
                }
                label _breakLabel[339123]
              }
              (339155 call +=(339153 call startIdx(339150 call + i 1)) 1)
              (339163 call =(339161 call idx idxIdx) j)
              (339168 call += idxIdx 1)
            }
            {
              {
                unknown tmp[339195] "temp"
                (339219 'move' tmp[339195](339214 call _cond_test(339216 call != j current)))
                WhileDo[339200]
                {
                  {
                    (339177 call += current 1)
                    (339192 call =(339187 call startIdx(339184 call + current 1))(339191 call startIdx current))
                  }
                  label _continueLabel[339198]
                  (339209 'move' tmp[339195](339204 call _cond_test(339206 call != j current)))
                  tmp[339195]
                }
                label _breakLabel[339199]
              }
              (339231 call +=(339229 call startIdx(339226 call + j 1)) 1)
              (339239 call =(339237 call idx idxIdx) i)
              (339244 call += idxIdx 1)
            }
          }
          label _continueLabel[339256]
          _indexOfInterest[339251]
          _iterator[339252]
        }
        label _breakLabel[339257]
      }
      { scopeless
        const startIdxHigh[339305] "const"(339304 call startIdx(339301 call + current 1))
        (339308 'end of statement')
      }
      {
        unknown _indexOfInterest[339332] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[339333] "expr temp" "temp"
        (339342 'move' _iterator[339333](339340 call _getIterator(339356 call chpl_direct_range_iter(339346 call + current 2)(339350 call .(339352 call . startIdx c"_dom") c"high") 1)))
        Defer
        {
          {
            (339372 call _freeIterator _iterator[339333])
          }
        }
        { scopeless type
          (339361 'move' _indexOfInterest[339332](339358 call iteratorIndex _iterator[339333]))
        }
        ForLoop[339334]
        {
          unknown r[339365] "index var" "insert auto destroy"
          (339367 'move' r[339365] _indexOfInterest[339332])
          {
            (339328 call =(339326 call startIdx r) startIdxHigh)
          }
          label _continueLabel[339337]
          _indexOfInterest[339332]
          _iterator[339333]
        }
        label _breakLabel[339338]
      }
      (339383 return(339381 call - idxIdx 1))
    }
    { scopeless
      const tmp[339400] "const" "temp"(339399 call __getActualInsertPts this inds isUnique)
      (339407 call _check_tuple_var_decl tmp[339400] 2)
      const actualInsertPts[339389] "const"(339401 call tmp[339400] 0)
      const actualAddCnt[339391] "const"(339404 call tmp[339400] 1)
      (339412 'end of statement')
    }
    { scopeless
      const oldnnz[339414] "const" _nnz
      (339417 'end of statement')
    }
    (339420 call += _nnz actualAddCnt)
    (339425 call _bulkGrow)
    { scopeless
      unknown newIndIdx[339431](339428 call . indsDom c"high")
      (339434 'end of statement')
    }
    { scopeless
      unknown oldIndIdx[339436] oldnnz
      (339439 'end of statement')
    }
    { scopeless
      unknown newLoc[339444](339443 call actualInsertPts newIndIdx)
      (339447 'end of statement')
    }
    {
      unknown tmp[339486] "temp"
      (339514 'move' tmp[339486](339507 call _cond_test(339509 call == newLoc(339512 call - 1))))
      WhileDo[339491]
      {
        {
          (339456 call -= newIndIdx 1)
          if(339473 call _cond_test(339468 call == newIndIdx(339466 call -(339462 call . indsDom c"low") 1)))
          {
            { scopeless
              break nil[44]
            }
          }
          (339483 call = newLoc(339482 call actualInsertPts newIndIdx))
        }
        label _continueLabel[339489]
        (339502 'move' tmp[339486](339495 call _cond_test(339497 call == newLoc(339500 call - 1))))
        tmp[339486]
      }
      label _breakLabel[339490]
    }
    { scopeless
      unknown arrShiftMap[339530](339528 call chpl__buildArrayRuntimeType(339526 call chpl__ensureDomainExpr(339522 call chpl__buildDomainExpr(339519 call chpl_build_bounded_range 1 oldnnz))) int[13])
      (339533 'end of statement')
    }
    {
      unknown _indexOfInterest[339749] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339750] "expr temp" "temp"
      (339759 'move' _iterator[339750](339757 call _getIterator(339770 call chpl_direct_range_iter 1 _nnz(339766 call - 1))))
      Defer
      {
        {
          (339786 call _freeIterator _iterator[339750])
        }
      }
      { scopeless type
        (339775 'move' _indexOfInterest[339749](339772 call iteratorIndex _iterator[339750]))
      }
      ForLoop[339751]
      {
        unknown i[339779] "index var" "insert auto destroy"
        (339781 'move' i[339779] _indexOfInterest[339749])
        {
          if(339743 call _cond_test(339552 call &&(339546 call >= oldIndIdx 1)(339550 call > i newLoc)))
          {
            (339562 call =(339557 call idx i)(339561 call idx oldIndIdx))
            (339571 call =(339569 call arrShiftMap oldIndIdx) i)
            (339576 call -= oldIndIdx 1)
          }
          {
            { scopeless
              if(339738 call _cond_test(339590 call &&(339584 call >= newIndIdx(339581 call . indsDom c"low"))(339588 call == i newLoc)))
              {
                if(339626 call _cond_test(339593 call . this c"compressRows"))
                {
                  (339607 call =(339599 call idx i)(339606 call(339603 call inds newIndIdx) 1))
                }
                {
                  (339622 call =(339614 call idx i)(339621 call(339618 call inds newIndIdx) 0))
                }
                (339633 call -= newIndIdx 1)
                if(339658 call _cond_test(339641 call >= newIndIdx(339638 call . indsDom c"low")))
                {
                  { scopeless
                    (339648 call = newLoc(339647 call actualInsertPts newIndIdx))
                  }
                }
                {
                  { scopeless
                    (339655 call = newLoc(339653 call - 2))
                  }
                }
                {
                  unknown tmp[339702] "temp"
                  (339730 'move' tmp[339702](339723 call _cond_test(339725 call == newLoc(339728 call - 1))))
                  WhileDo[339707]
                  {
                    {
                      (339672 call -= newIndIdx 1)
                      if(339689 call _cond_test(339684 call == newIndIdx(339682 call -(339678 call . indsDom c"low") 1)))
                      {
                        { scopeless
                          break nil[44]
                        }
                      }
                      (339699 call = newLoc(339698 call actualInsertPts newIndIdx))
                    }
                    label _continueLabel[339705]
                    (339718 'move' tmp[339702](339711 call _cond_test(339713 call == newLoc(339716 call - 1))))
                    tmp[339702]
                  }
                  label _breakLabel[339706]
                }
              }
              {
                { scopeless
                  (339736 call halt "Something went wrong")
                }
              }
            }
          }
        }
        label _continueLabel[339754]
        _indexOfInterest[339749]
        _iterator[339750]
      }
      label _breakLabel[339755]
    }
    { scopeless
      unknown prevCursor[339820](339817 IfExpr (339794 call . this c"compressRows") then
      { scopeless
        (339804 call .(339803 call(339798 call . parentDom c"dim") 0) c"low")
      } else
      { scopeless
        (339814 call .(339813 call(339808 call . parentDom c"dim") 1) c"low")
      } )
      (339823 'end of statement')
    }
    { scopeless
      unknown cursor[339825] int[13]
      (339828 'end of statement')
    }
    { scopeless
      unknown cursorCnt[339830] 0
      (339833 'end of statement')
    }
    {
      unknown _indexOfInterest[339990] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[339991] "expr temp" "temp"
      (340005 'move' _iterator[339991](339842 call _build_tuple(340000 call _getIterator inds)(340003 call _getIterator actualInsertPts)))
      Defer
      {
        {
          (340035 call _freeIterator _iterator[339991])
        }
      }
      { scopeless type
        (340010 'move' _indexOfInterest[339990](340007 call iteratorIndex _iterator[339991]))
      }
      ForLoop[339992]
      {
        (340015 call _check_tuple_var_decl _indexOfInterest[339990] 2)
        unknown ind[340021] "index var" "insert auto destroy"
        (340023 'move' ind[340021](340019 call _indexOfInterest[339990] 0))
        unknown p[340028] "index var" "insert auto destroy"
        (340030 'move' p[340028](340026 call _indexOfInterest[339990] 1))
        {
          if(339852 call _cond_test(339847 call == p(339845 call - 1)))
          {
            { scopeless
              continue nil[44]
            }
          }
          if(339880 call _cond_test(339859 call . this c"compressRows"))
          {
            (339867 call = cursor(339866 call ind 0))
          }
          {
            (339876 call = cursor(339875 call ind 1))
          }
          if(339985 call _cond_test(339886 call == cursor prevCursor))
          {
            { scopeless
              (339890 call += cursorCnt 1)
            }
          }
          {
            (339901 call +=(339899 call startIdx(339896 call + prevCursor 1)) cursorCnt)
            if(339971 call _cond_test(339910 call >(339907 call - cursor prevCursor) 1))
            {
              {
                unknown _indexOfInterest[339929] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[339930] "expr temp" "temp"
                (339939 'move' _iterator[339930](339937 call _getIterator(339947 call chpl_direct_range_iter(339943 call + prevCursor 2) cursor 1)))
                Defer
                {
                  {
                    (339963 call _freeIterator _iterator[339930])
                  }
                }
                { scopeless type
                  (339952 'move' _indexOfInterest[339929](339949 call iteratorIndex _iterator[339930]))
                }
                ForLoop[339931]
                {
                  unknown i[339956] "index var" "insert auto destroy"
                  (339958 'move' i[339956] _indexOfInterest[339929])
                  {
                    (339925 call +=(339923 call startIdx i) cursorCnt)
                  }
                  label _continueLabel[339934]
                  _indexOfInterest[339929]
                  _iterator[339930]
                }
                label _breakLabel[339935]
              }
            }
            (339977 call += cursorCnt 1)
            (339982 call = prevCursor cursor)
          }
        }
        label _continueLabel[339995]
        _indexOfInterest[339990]
        _iterator[339991]
      }
      label _breakLabel[339996]
    }
    {
      unknown _indexOfInterest[340062] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340063] "expr temp" "temp"
      (340072 'move' _iterator[340063](340070 call _getIterator(340083 call chpl_direct_range_iter(340076 call + prevCursor 1)(340080 call . startIdxDom c"high") 1)))
      Defer
      {
        {
          (340099 call _freeIterator _iterator[340063])
        }
      }
      { scopeless type
        (340088 'move' _indexOfInterest[340062](340085 call iteratorIndex _iterator[340063]))
      }
      ForLoop[340064]
      {
        unknown i[340092] "index var" "insert auto destroy"
        (340094 'move' i[340092] _indexOfInterest[340062])
        {
          (340058 call +=(340056 call startIdx i) cursorCnt)
        }
        label _continueLabel[340067]
        _indexOfInterest[340062]
        _iterator[340063]
      }
      label _breakLabel[340068]
    }
    {
      unknown _indexOfInterest[340117] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340118] "expr temp" "temp"
      (340127 'move' _iterator[340118](340125 call _getIterator _arrs))
      Defer
      {
        {
          (340143 call _freeIterator _iterator[340118])
        }
      }
      { scopeless type
        (340132 'move' _indexOfInterest[340117](340129 call iteratorIndex _iterator[340118]))
      }
      ForLoop[340119]
      {
        unknown a[340136] "index var" "insert auto destroy"
        (340138 'move' a[340136] _indexOfInterest[340117])
        { scopeless
          (340115 call(340109 call . a c"sparseBulkShiftArray") arrShiftMap oldnnz)
        }
        label _continueLabel[340122]
        _indexOfInterest[340117]
        _iterator[340118]
      }
      label _breakLabel[340123]
    }
    (340151 return actualAddCnt)
  } function CSDom[340956](?).dsiRemove[340164](arg _mt[341036]:_MT[238], arg this[341034]:CSDom[340956](?), arg ind[340161] :
  (340159 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[340175] "const" "temp"(340174 call find ind)
      (340182 call _check_tuple_var_decl tmp[340175] 2)
      const found[340166] "const"(340176 call tmp[340175] 0)
      const insertPt[340168] "const"(340179 call tmp[340175] 1)
      (340187 'end of statement')
    }
    if(340195 call _cond_test(340190 call ! found))
    {
      { scopeless
        (340193 return 0)
      }
    }
    (340202 call -= _nnz 1)
    (340208 call _shrink _nnz)
    { scopeless
      const tmp[340216] "const" "temp" ind
      (340223 call _check_tuple_var_decl tmp[340216] 2)
      const row[340210] "const"(340217 call tmp[340216] 0)
      const col[340212] "const"(340220 call tmp[340216] 1)
      (340228 'end of statement')
    }
    {
      unknown _indexOfInterest[340249] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340250] "expr temp" "temp"
      (340259 'move' _iterator[340250](340257 call _getIterator(340264 call chpl_direct_range_iter insertPt _nnz 1)))
      Defer
      {
        {
          (340280 call _freeIterator _iterator[340250])
        }
      }
      { scopeless type
        (340269 'move' _indexOfInterest[340249](340266 call iteratorIndex _iterator[340250]))
      }
      ForLoop[340251]
      {
        unknown i[340273] "index var" "insert auto destroy"
        (340275 'move' i[340273] _indexOfInterest[340249])
        {
          (340245 call =(340237 call idx i)(340244 call idx(340241 call + i 1)))
        }
        label _continueLabel[340254]
        _indexOfInterest[340249]
        _iterator[340250]
      }
      label _breakLabel[340255]
    }
    if(340421 call _cond_test(340288 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340311] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340312] "expr temp" "temp"
        (340321 'move' _iterator[340312](340319 call _getIterator(340332 call chpl_direct_range_iter(340325 call + row 1)(340329 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340348 call _freeIterator _iterator[340312])
          }
        }
        { scopeless type
          (340337 'move' _indexOfInterest[340311](340334 call iteratorIndex _iterator[340312]))
        }
        ForLoop[340313]
        {
          unknown r[340341] "index var" "insert auto destroy"
          (340343 'move' r[340341] _indexOfInterest[340311])
          {
            (340307 call -=(340305 call startIdx r) 1)
          }
          label _continueLabel[340316]
          _indexOfInterest[340311]
          _iterator[340312]
        }
        label _breakLabel[340317]
      }
    }
    {
      {
        unknown _indexOfInterest[340376] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340377] "expr temp" "temp"
        (340386 'move' _iterator[340377](340384 call _getIterator(340397 call chpl_direct_range_iter(340390 call + col 1)(340394 call . startIdxDom c"high") 1)))
        Defer
        {
          {
            (340413 call _freeIterator _iterator[340377])
          }
        }
        { scopeless type
          (340402 'move' _indexOfInterest[340376](340399 call iteratorIndex _iterator[340377]))
        }
        ForLoop[340378]
        {
          unknown r[340406] "index var" "insert auto destroy"
          (340408 'move' r[340406] _indexOfInterest[340376])
          {
            (340372 call -=(340370 call startIdx r) 1)
          }
          label _continueLabel[340381]
          _indexOfInterest[340376]
          _iterator[340377]
        }
        label _breakLabel[340382]
      }
    }
    {
      unknown _indexOfInterest[340442] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340443] "expr temp" "temp"
      (340452 'move' _iterator[340443](340450 call _getIterator _arrs))
      Defer
      {
        {
          (340468 call _freeIterator _iterator[340443])
        }
      }
      { scopeless type
        (340457 'move' _indexOfInterest[340442](340454 call iteratorIndex _iterator[340443]))
      }
      ForLoop[340444]
      {
        unknown a[340461] "index var" "insert auto destroy"
        (340463 'move' a[340461] _indexOfInterest[340442])
        {
          (340439 call(340428 call . a c"sparseShiftArrayBack")(340436 call chpl_build_bounded_range insertPt(340434 call - _nnz 1)))
        }
        label _continueLabel[340447]
        _indexOfInterest[340442]
        _iterator[340443]
      }
      label _breakLabel[340448]
    }
    (340476 return 1)
  } function CSDom[340956](?).dsiClear[340482](arg _mt[341040]:_MT[238], arg this[341038]:CSDom[340956](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (340486 call = _nnz 0)
    (340492 call = startIdx 1)
  } function CSDom[340956](?).dimIter[340501](arg _mt[341044]:_MT[238], arg this[341042]:CSDom[340956](?), param arg d[340499]:_any[178](?), arg ind[340503]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(340575 call _cond_test(340513 call &&(340507 call != d 1)(340510 call . this c"compressRows")))
    {
      (340534 call compilerError "dimIter(0, ..) not supported on CS(compressRows=true) domains")
    }
    {
      { scopeless
        if(340571 call _cond_test(340547 call &&(340539 call != d 0)(340545 call !(340542 call . this c"compressRows"))))
        {
          (340568 call compilerError "dimIter(1, ..) not supported on CS(compressRows=false) domains")
        }
      }
    }
    {
      unknown _indexOfInterest[340598] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[340599] "expr temp" "temp"
      (340608 'move' _iterator[340599](340606 call _getIterator(340617 call chpl_direct_range_iter(340612 call startIdx ind)(340615 call stopIdx ind) 1)))
      Defer
      {
        {
          (340633 call _freeIterator _iterator[340599])
        }
      }
      { scopeless type
        (340622 'move' _indexOfInterest[340598](340619 call iteratorIndex _iterator[340599]))
      }
      ForLoop[340600]
      {
        unknown i[340626] "index var" "insert auto destroy"
        (340628 'move' i[340626] _indexOfInterest[340598])
        { scopeless
          (340596 yield(340595 call idx i))
        }
        label _continueLabel[340603]
        _indexOfInterest[340598]
        _iterator[340599]
      }
      label _breakLabel[340604]
    }
  } function CSDom[340956](?).dsiSerialWrite[340646](arg _mt[341048]:_MT[238], arg this[341046]:CSDom[340956](?), arg f[340644]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (340650 call <~> f "{\n")
    if(340944 call _cond_test(340655 call . this c"compressRows"))
    {
      {
        unknown _indexOfInterest[340767] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340768] "expr temp" "temp"
        (340777 'move' _iterator[340768](340775 call _getIterator rowRange))
        Defer
        {
          {
            (340793 call _freeIterator _iterator[340768])
          }
        }
        { scopeless type
          (340782 'move' _indexOfInterest[340767](340779 call iteratorIndex _iterator[340768]))
        }
        ForLoop[340769]
        {
          unknown r[340786] "index var" "insert auto destroy"
          (340788 'move' r[340786] _indexOfInterest[340767])
          {
            { scopeless
              const lo[340664] "const"(340663 call startIdx r)
              const hi[340671] "const"(340670 call stopIdx r)
              (340674 'end of statement')
            }
            {
              unknown _indexOfInterest[340729] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340730] "expr temp" "temp"
              (340739 'move' _iterator[340730](340737 call _getIterator(340744 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340760 call _freeIterator _iterator[340730])
                }
              }
              { scopeless type
                (340749 'move' _indexOfInterest[340729](340746 call iteratorIndex _iterator[340730]))
              }
              ForLoop[340731]
              {
                unknown c[340753] "index var" "insert auto destroy"
                (340755 'move' c[340753] _indexOfInterest[340729])
                {
                  (340725 call <~>(340698 call <~>(340695 call <~>(340689 call <~>(340686 call <~>(340683 call <~> f " (") r) ", ")(340694 call idx c)) ")")(340722 IfExpr (340702 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340734]
                _indexOfInterest[340729]
                _iterator[340730]
              }
              label _breakLabel[340735]
            }
          }
          label _continueLabel[340772]
          _indexOfInterest[340767]
          _iterator[340768]
        }
        label _breakLabel[340773]
      }
    }
    {
      {
        unknown _indexOfInterest[340910] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[340911] "expr temp" "temp"
        (340920 'move' _iterator[340911](340918 call _getIterator colRange))
        Defer
        {
          {
            (340936 call _freeIterator _iterator[340911])
          }
        }
        { scopeless type
          (340925 'move' _indexOfInterest[340910](340922 call iteratorIndex _iterator[340911]))
        }
        ForLoop[340912]
        {
          unknown c[340929] "index var" "insert auto destroy"
          (340931 'move' c[340929] _indexOfInterest[340910])
          {
            { scopeless
              const lo[340807] "const"(340806 call startIdx c)
              const hi[340814] "const"(340813 call stopIdx c)
              (340817 'end of statement')
            }
            {
              unknown _indexOfInterest[340872] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[340873] "expr temp" "temp"
              (340882 'move' _iterator[340873](340880 call _getIterator(340887 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (340903 call _freeIterator _iterator[340873])
                }
              }
              { scopeless type
                (340892 'move' _indexOfInterest[340872](340889 call iteratorIndex _iterator[340873]))
              }
              ForLoop[340874]
              {
                unknown r[340896] "index var" "insert auto destroy"
                (340898 'move' r[340896] _indexOfInterest[340872])
                {
                  (340868 call <~>(340841 call <~>(340838 call <~>(340835 call <~>(340832 call <~>(340826 call <~> f " (")(340831 call idx r)) ", ") c) ")")(340865 IfExpr (340845 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    ""
                  } ))
                }
                label _continueLabel[340877]
                _indexOfInterest[340872]
                _iterator[340873]
              }
              label _breakLabel[340878]
            }
          }
          label _continueLabel[340915]
          _indexOfInterest[340910]
          _iterator[340911]
        }
        label _breakLabel[340916]
      }
    }
    (340950 call <~> f "}\n")
  } BaseSparseDomImpl
  type CSArr[341884] function CSArr[341884].init[341058](arg _mt[341888]:_MT[238], arg this[341886]:CSArr[341884], arg eltType[341056]:_any[178](?), param arg rank[341061] :
  int[13], arg idxType[341064]:_any[178](?), arg dom[341066]:_any[178](?), param arg initElts[341069] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (341082 call(341073 call . super c"init") eltType rank idxType dom initElts)
  } function CSArr[341884].dsiAccess[341096](arg _mt[341892]:_MT[238], arg this[341890]:CSArr[341884], arg ind[341093] :
  (341091 call * rank idxType)) ref : _unknown[51] "method" "primary method"
  {
    (341104 call(341099 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341119] "const" "temp"(341118 call(341113 call . dom c"find") ind)
      (341126 call _check_tuple_var_decl tmp[341119] 2)
      const found[341107] "const"(341120 call tmp[341119] 0)
      const loc[341109] "const"(341123 call tmp[341119] 1)
      (341131 'end of statement')
    }
    if(341145 call _cond_test found)
    {
      { scopeless
        (341137 return(341136 call data loc))
      }
    }
    {
      { scopeless
        (341143 call halt "attempting to assign a 'zero' value in a sparse array: " ind)
      }
    }
  } function CSArr[341884].dsiAccess[341162](arg _mt[341896]:_MT[238], arg this[341894]:CSArr[341884], arg ind[341159] :
  (341157 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (341174 call(341169 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341189] "const" "temp"(341188 call(341183 call . dom c"find") ind)
      (341196 call _check_tuple_var_decl tmp[341189] 2)
      const found[341177] "const"(341190 call tmp[341189] 0)
      const loc[341179] "const"(341193 call tmp[341189] 1)
      (341201 'end of statement')
    }
    if(341212 call _cond_test found)
    {
      { scopeless
        (341207 return(341206 call data loc))
      }
    }
    {
      { scopeless
        (341210 return irv)
      }
    }
  }
  where {
    (341167 call shouldReturnRvalueByValue eltType)
  } function CSArr[341884].dsiAccess[341230](arg _mt[341900]:_MT[238], arg this[341898]:CSArr[341884], arg ind[341227] :
  (341225 call * rank idxType)) const ref : _unknown[51] "method" "primary method"
  {
    (341242 call(341237 call . dom c"boundsCheck") ind)
    { scopeless
      const tmp[341257] "const" "temp"(341256 call(341251 call . dom c"find") ind)
      (341264 call _check_tuple_var_decl tmp[341257] 2)
      const found[341245] "const"(341258 call tmp[341257] 0)
      const loc[341247] "const"(341261 call tmp[341257] 1)
      (341269 'end of statement')
    }
    if(341280 call _cond_test found)
    {
      { scopeless
        (341275 return(341274 call data loc))
      }
    }
    {
      { scopeless
        (341278 return irv)
      }
    }
  }
  where {
    (341235 call shouldReturnRvalueByConstRef eltType)
  } function CSArr[341884].these[341291](arg _mt[341904]:_MT[238], arg this[341902]:CSArr[341884]) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[341307] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341308] "expr temp" "temp"
      (341317 'move' _iterator[341308](341315 call _getIterator(341325 call chpl_direct_range_iter 1(341322 call . dom c"_nnz") 1)))
      Defer
      {
        {
          (341341 call _freeIterator _iterator[341308])
        }
      }
      { scopeless type
        (341330 'move' _indexOfInterest[341307](341327 call iteratorIndex _iterator[341308]))
      }
      ForLoop[341309]
      {
        unknown i[341334] "index var" "insert auto destroy"
        (341336 'move' i[341334] _indexOfInterest[341307])
        { scopeless
          (341305 yield(341304 call data i))
        }
        label _continueLabel[341312]
        _indexOfInterest[341307]
        _iterator[341308]
      }
      label _breakLabel[341313]
    }
  } function CSArr[341884].these[341357](arg _mt[341908]:_MT[238], arg this[341906]:CSArr[341884], param arg tag[341354] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[341377] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341378] "expr temp" "temp"
      (341387 'move' _iterator[341378](341385 call _getIterator(341373 call(341368 call . dom c"these") tag)))
      Defer
      {
        {
          (341404 call _freeIterator _iterator[341378])
        }
      }
      { scopeless type
        (341393 'move' _indexOfInterest[341377](341390 call iteratorIndex _iterator[341378]))
      }
      ForLoop[341379]
      {
        unknown followThis[341397] "index var" "insert auto destroy"
        (341399 'move' followThis[341397] _indexOfInterest[341377])
        { scopeless
          (341375 yield followThis)
        }
        label _continueLabel[341382]
        _indexOfInterest[341377]
        _iterator[341378]
      }
      label _breakLabel[341383]
    }
  }
  where {
    (341364 call == tag(341361 call . iterKind c"leader"))
  } function CSArr[341884].these[341421](arg _mt[341912]:_MT[238], arg this[341910]:CSArr[341884], param arg tag[341418] :
  iterKind, arg followThis[341429] :
  (341427 call _build_tuple ?[260] ?[260] ?[260])) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[341447] "temp" followThis
      (341457 call _check_tuple_var_decl tmp[341447] 3)
      unknown followThisDom[341439](341448 call tmp[341447] 0)
      unknown startIx[341441](341451 call tmp[341447] 1)
      unknown endIx[341443](341454 call tmp[341447] 2)
      (341462 'end of statement')
    }
    if(341492 call _cond_test(341469 call != followThisDom(341466 call . this c"dom")))
    {
      { scopeless
        (341490 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays (CS layout)")
      }
    }
    if(341522 call _cond_test debugCS)
    {
      { scopeless
        (341520 call writeln "CSArr follower: " startIx ".." endIx)
      }
    }
    {
      unknown _indexOfInterest[341538] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[341539] "expr temp" "temp"
      (341548 'move' _iterator[341539](341546 call _getIterator(341553 call chpl_direct_range_iter startIx endIx 1)))
      Defer
      {
        {
          (341569 call _freeIterator _iterator[341539])
        }
      }
      { scopeless type
        (341558 'move' _indexOfInterest[341538](341555 call iteratorIndex _iterator[341539]))
      }
      ForLoop[341540]
      {
        unknown i[341562] "index var" "insert auto destroy"
        (341564 'move' i[341562] _indexOfInterest[341538])
        { scopeless
          (341536 yield(341535 call data i))
        }
        label _continueLabel[341543]
        _indexOfInterest[341538]
        _iterator[341539]
      }
      label _breakLabel[341544]
    }
  }
  where {
    (341437 call == tag(341434 call . iterKind c"follower"))
  } function CSArr[341884].these[341585](arg _mt[341916]:_MT[238], arg this[341914]:CSArr[341884], param arg tag[341582] :
  iterKind, arg followThis[341587]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (341599 call compilerError "Sparse iterators can't yet be zippered with others (CS layout)")
    (341603 yield 0)
  }
  where {
    (341594 call == tag(341591 call . iterKind c"follower"))
  } function CSArr[341884].dsiSerialWrite[341612](arg _mt[341920]:_MT[238], arg this[341918]:CSArr[341884], arg f[341610]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(341876 call _cond_test(341615 call . dom c"compressRows"))
    {
      {
        unknown _indexOfInterest[341713] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341714] "expr temp" "temp"
        (341723 'move' _iterator[341714](341721 call _getIterator(341622 call . dom c"rowRange")))
        Defer
        {
          {
            (341740 call _freeIterator _iterator[341714])
          }
        }
        { scopeless type
          (341729 'move' _indexOfInterest[341713](341726 call iteratorIndex _iterator[341714]))
        }
        ForLoop[341715]
        {
          unknown r[341733] "index var" "insert auto destroy"
          (341735 'move' r[341733] _indexOfInterest[341713])
          {
            { scopeless
              const lo[341632] "const"(341631 call(341626 call . dom c"startIdx") r)
              (341635 'end of statement')
            }
            { scopeless
              const hi[341646] "const"(341645 call(341640 call . dom c"stopIdx") r)
              (341649 'end of statement')
            }
            {
              unknown _indexOfInterest[341675] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341676] "expr temp" "temp"
              (341685 'move' _iterator[341676](341683 call _getIterator(341690 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341706 call _freeIterator _iterator[341676])
                }
              }
              { scopeless type
                (341695 'move' _indexOfInterest[341675](341692 call iteratorIndex _iterator[341676]))
              }
              ForLoop[341677]
              {
                unknown c[341699] "index var" "insert auto destroy"
                (341701 'move' c[341699] _indexOfInterest[341675])
                {
                  (341671 call <~>(341660 call <~> f(341659 call data c))(341668 IfExpr (341664 call == c hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341680]
                _indexOfInterest[341675]
                _iterator[341676]
              }
              label _breakLabel[341681]
            }
          }
          label _continueLabel[341718]
          _indexOfInterest[341713]
          _iterator[341714]
        }
        label _breakLabel[341719]
      }
    }
    {
      {
        unknown _indexOfInterest[341841] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[341842] "expr temp" "temp"
        (341851 'move' _iterator[341842](341849 call _getIterator(341752 call . dom c"colRange")))
        Defer
        {
          {
            (341868 call _freeIterator _iterator[341842])
          }
        }
        { scopeless type
          (341857 'move' _indexOfInterest[341841](341854 call iteratorIndex _iterator[341842]))
        }
        ForLoop[341843]
        {
          unknown c[341861] "index var" "insert auto destroy"
          (341863 'move' c[341861] _indexOfInterest[341841])
          {
            { scopeless
              const lo[341762] "const"(341761 call(341756 call . dom c"startIdx") c)
              (341765 'end of statement')
            }
            { scopeless
              const hi[341774] "const"(341773 call(341768 call . dom c"stopIdx") c)
              (341777 'end of statement')
            }
            {
              unknown _indexOfInterest[341803] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[341804] "expr temp" "temp"
              (341813 'move' _iterator[341804](341811 call _getIterator(341818 call chpl_direct_range_iter lo hi 1)))
              Defer
              {
                {
                  (341834 call _freeIterator _iterator[341804])
                }
              }
              { scopeless type
                (341823 'move' _indexOfInterest[341803](341820 call iteratorIndex _iterator[341804]))
              }
              ForLoop[341805]
              {
                unknown r[341827] "index var" "insert auto destroy"
                (341829 'move' r[341827] _indexOfInterest[341803])
                {
                  (341799 call <~>(341788 call <~> f(341787 call data r))(341796 IfExpr (341792 call == r hi) then
                  { scopeless
                    "\n"
                  } else
                  { scopeless
                    " "
                  } ))
                }
                label _continueLabel[341808]
                _indexOfInterest[341803]
                _iterator[341804]
              }
              label _breakLabel[341809]
            }
          }
          label _continueLabel[341846]
          _indexOfInterest[341841]
          _iterator[341842]
        }
        label _breakLabel[341847]
      }
    }
  } BaseSparseArrImpl
}