AST dump for MemConsistency after pass buildDefaultFunctions.
Module use list: HaltWrappers 

{
  function chpl__init_MemConsistency[416082]() : void[4] "insert line file info" "module init"
  {
    { scopeless type extern
      (545466 'default init var' memory_order_relaxed[186972] memory_order[186653])
    }
    (186975 'end of statement')
    { scopeless type extern
      (545469 'default init var' memory_order_consume[186977] memory_order[186653])
    }
    (186980 'end of statement')
    { scopeless type extern
      (545472 'default init var' memory_order_acquire[186982] memory_order[186653])
    }
    (186985 'end of statement')
    { scopeless type extern
      (545475 'default init var' memory_order_release[186987] memory_order[186653])
    }
    (186990 'end of statement')
    { scopeless type extern
      (545478 'default init var' memory_order_acq_rel[186992] memory_order[186653])
    }
    (186995 'end of statement')
    { scopeless type extern
      (545481 'default init var' memory_order_seq_cst[186997] memory_order[186653])
    }
    (187000 'end of statement')
    (524047 return _void[55])
  }
  type memory_order[186653]
  function _defaultOf[186662](arg t[186659]:memory_order[186653]) : _unknown[51] "inline" "last resort" "no doc"
  {
    unknown ret[523953] "RVV" "temp"
    function _defaultOfMemoryOrder[186666]() : _unknown[51] "extern" "local args" "no fn body" "no doc" "no return value for void"
    {
      unknown ret[523947] "RVV" "temp"
      (523949 return ret[523947])
    }
    { scopeless type
      memory_order[186653]
    }
    unknown call_tmp[690360] "expr temp" "maybe param" "maybe type" "temp"
    (690363 'move' call_tmp[690360](186675 call _defaultOfMemoryOrder))
    (523958 'move' ret[523953](523957 'deref' call_tmp[690360]))
    (523955 return ret[523953])
  }
  function ==[186686](arg a[186683]:memory_order[186653], arg b[186689]:memory_order[186653]) : _unknown[51]
  {
    unknown ret[523962] "RVV" "temp"
    unknown call_tmp[690365] "expr temp" "maybe param" "maybe type" "temp"
    (690368 'move' call_tmp[690365](186697 '==' a[186683] b[186689]))
    (523968 'move' ret[523962](523967 'coerce' call_tmp[690365] bool[10]))
    (523964 return ret[523962])
  }
  { scopeless type
    bool[10]
  }
  function !=[186710](arg a[186707]:memory_order[186653], arg b[186713]:memory_order[186653]) : _unknown[51]
  {
    unknown ret[523972] "RVV" "temp"
    unknown call_tmp[690370] "expr temp" "maybe param" "maybe type" "temp"
    (690373 'move' call_tmp[690370](186721 '!=' a[186707] b[186713]))
    (523978 'move' ret[523972](523977 'coerce' call_tmp[690370] bool[10]))
    (523974 return ret[523972])
  }
  { scopeless type
    bool[10]
  }
  function =[186734](ref arg lhs[186731]:memory_order[186653], arg rhs[186737]:memory_order[186653]) : _unknown[51] "assignop" "no return value for void"
  {
    (186744 '=' lhs[186731] rhs[186737])
    (523980 return _void[55])
  }
  function memory_order[186653].writeThis[186754](arg _mt[186759]:_MT[238], arg this[186756]:memory_order[186653] :
  memory_order[186653], arg ch[186752]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown call_tmp[690375] "expr temp" "maybe param" "maybe type" "temp"
    (690378 'move' call_tmp[690375](186763 call == this[186756] memory_order_relaxed[186972]))
    unknown call_tmp[690380] "expr temp" "maybe param" "maybe type" "temp"
    (690383 'move' call_tmp[690380](186962 call _cond_test call_tmp[690375]))
    if call_tmp[690380]
    {
      (186783 call <~> ch[186752] "memory_order_relaxed")
    }
    {
      unknown call_tmp[690385] "expr temp" "maybe param" "maybe type" "temp"
      (690388 'move' call_tmp[690385](186788 call == this[186756] memory_order_consume[186977]))
      unknown call_tmp[690390] "expr temp" "maybe param" "maybe type" "temp"
      (690393 'move' call_tmp[690390](186956 call _cond_test call_tmp[690385]))
      if call_tmp[690390]
      {
        (186808 call <~> ch[186752] "memory_order_consume")
      }
      {
        unknown call_tmp[690395] "expr temp" "maybe param" "maybe type" "temp"
        (690398 'move' call_tmp[690395](186813 call == this[186756] memory_order_acquire[186982]))
        unknown call_tmp[690400] "expr temp" "maybe param" "maybe type" "temp"
        (690403 'move' call_tmp[690400](186950 call _cond_test call_tmp[690395]))
        if call_tmp[690400]
        {
          (186833 call <~> ch[186752] "memory_order_acquire")
        }
        {
          unknown call_tmp[690405] "expr temp" "maybe param" "maybe type" "temp"
          (690408 'move' call_tmp[690405](186838 call == this[186756] memory_order_release[186987]))
          unknown call_tmp[690410] "expr temp" "maybe param" "maybe type" "temp"
          (690413 'move' call_tmp[690410](186944 call _cond_test call_tmp[690405]))
          if call_tmp[690410]
          {
            (186858 call <~> ch[186752] "memory_order_release")
          }
          {
            unknown call_tmp[690415] "expr temp" "maybe param" "maybe type" "temp"
            (690418 'move' call_tmp[690415](186863 call == this[186756] memory_order_acq_rel[186992]))
            unknown call_tmp[690420] "expr temp" "maybe param" "maybe type" "temp"
            (690423 'move' call_tmp[690420](186938 call _cond_test call_tmp[690415]))
            if call_tmp[690420]
            {
              (186883 call <~> ch[186752] "memory_order_acq_rel")
            }
            {
              unknown call_tmp[690425] "expr temp" "maybe param" "maybe type" "temp"
              (690428 'move' call_tmp[690425](186888 call == this[186756] memory_order_seq_cst[186997]))
              unknown call_tmp[690430] "expr temp" "maybe param" "maybe type" "temp"
              (690433 'move' call_tmp[690430](186932 call _cond_test call_tmp[690425]))
              if call_tmp[690430]
              {
                (186908 call <~> ch[186752] "memory_order_seq_cst")
              }
              {
                (186929 call <~> ch[186752] "memory_order_unknown")
              }
            }
          }
        }
      }
    }
    (523982 return _void[55])
  }
  const memory_order_relaxed[186972] "dead at end of block" "const" "extern" "insert auto destroy"
  const memory_order_consume[186977] "dead at end of block" "const" "extern" "insert auto destroy"
  const memory_order_acquire[186982] "dead at end of block" "const" "extern" "insert auto destroy"
  const memory_order_release[186987] "dead at end of block" "const" "extern" "insert auto destroy"
  const memory_order_acq_rel[186992] "dead at end of block" "const" "extern" "insert auto destroy"
  const memory_order_seq_cst[186997] "dead at end of block" "const" "extern" "insert auto destroy"
  type memoryOrder[187012] def seqCst[187002]:memoryOrder[187012] def acqRel[187004]:memoryOrder[187012] def release[187006]:memoryOrder[187012] def acquire[187008]:memoryOrder[187012] def relaxed[187010]:memoryOrder[187012]
  function readableOrder[187021](param arg order[187018]:memoryOrder[187012]) param : _unknown[51]
  {
    unknown ret[523986] "RVV" "param" "temp"
    unknown tmp[429521] "maybe param" "temp"
    (429532 'move' tmp[429521](187028 call == order[187018] release[187006]))
    unknown call_tmp[690435] "expr temp" "maybe param" "maybe type" "temp"
    (690438 'move' call_tmp[690435](429534 call _cond_invalid tmp[429521]))
    if call_tmp[690435]
    {
      (429537 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[572089] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[572090] "maybe param" "temp"
    unknown call_tmp[690440] "expr temp" "maybe param" "maybe type" "temp"
    (690443 'move' call_tmp[690440](429522 call isTrue tmp[429521]))
    (572095 'move' tmp[572090](572093 call _cond_test call_tmp[690440]))
    if tmp[572090]
    {
      (572100 'move' tmp[572089](572097 '_paramFoldLogical' tmp[572090] 1))
    }
    {
      unknown tmp[572102] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[690445] "expr temp" "maybe param" "maybe type" "temp"
      (690448 'move' call_tmp[690445](187037 call == order[187018] acqRel[187004]))
      (572104 'move' tmp[572102](429526 call isTrue call_tmp[690445]))
      (572109 'move' tmp[572089](572106 '_paramFoldLogical' tmp[572090] tmp[572102]))
    }
    unknown call_tmp[690450] "expr temp" "maybe param" "maybe type" "temp"
    (690453 'move' call_tmp[690450](187052 call _cond_test tmp[572089]))
    if call_tmp[690450]
    {
      (523991 'move' ret[523986](523990 'deref' acquire[187008]))
      gotoReturn _end_readableOrder[523984] _end_readableOrder[523984]
    }
    {
      (523996 'move' ret[523986](523995 'deref' order[187018]))
      gotoReturn _end_readableOrder[523984] _end_readableOrder[523984]
    }
    label _end_readableOrder[523984]
    (523988 return ret[523986])
  }
  function c_memory_order[187065](param arg order[187062]:memoryOrder[187012]) : _unknown[51] "inline"
  {
    unknown ret[524002] "RVV" "temp"
    {
      unknown tmp[187158] "expr temp" "maybe param" "maybe type" "temp"
      (187160 'move' tmp[187158] order[187062])
      unknown call_tmp[690455] "expr temp" "maybe param" "maybe type" "temp"
      (690458 'move' call_tmp[690455](187162 call == tmp[187158] relaxed[187010]))
      unknown call_tmp[690460] "expr temp" "maybe param" "maybe type" "temp"
      (690463 'move' call_tmp[690460](187165 call _cond_test call_tmp[690455]))
      if call_tmp[690460]
      {
        (524007 'move' ret[524002](524006 'deref' memory_order_relaxed[186972]))
        gotoReturn _end_c_memory_order[524000] _end_c_memory_order[524000]
      }
      {
        unknown call_tmp[690465] "expr temp" "maybe param" "maybe type" "temp"
        (690468 'move' call_tmp[690465](187168 call == tmp[187158] acquire[187008]))
        unknown call_tmp[690470] "expr temp" "maybe param" "maybe type" "temp"
        (690473 'move' call_tmp[690470](187171 call _cond_test call_tmp[690465]))
        if call_tmp[690470]
        {
          (524012 'move' ret[524002](524011 'deref' memory_order_acquire[186982]))
          gotoReturn _end_c_memory_order[524000] _end_c_memory_order[524000]
        }
        {
          unknown call_tmp[690475] "expr temp" "maybe param" "maybe type" "temp"
          (690478 'move' call_tmp[690475](187175 call == tmp[187158] release[187006]))
          unknown call_tmp[690480] "expr temp" "maybe param" "maybe type" "temp"
          (690483 'move' call_tmp[690480](187178 call _cond_test call_tmp[690475]))
          if call_tmp[690480]
          {
            (524017 'move' ret[524002](524016 'deref' memory_order_release[186987]))
            gotoReturn _end_c_memory_order[524000] _end_c_memory_order[524000]
          }
          {
            unknown call_tmp[690485] "expr temp" "maybe param" "maybe type" "temp"
            (690488 'move' call_tmp[690485](187182 call == tmp[187158] acqRel[187004]))
            unknown call_tmp[690490] "expr temp" "maybe param" "maybe type" "temp"
            (690493 'move' call_tmp[690490](187185 call _cond_test call_tmp[690485]))
            if call_tmp[690490]
            {
              (524022 'move' ret[524002](524021 'deref' memory_order_acq_rel[186992]))
              gotoReturn _end_c_memory_order[524000] _end_c_memory_order[524000]
            }
            {
              unknown call_tmp[690495] "expr temp" "maybe param" "maybe type" "temp"
              (690498 'move' call_tmp[690495](187189 call == tmp[187158] seqCst[187002]))
              unknown call_tmp[690500] "expr temp" "maybe param" "maybe type" "temp"
              (690503 'move' call_tmp[690500](187192 call _cond_test call_tmp[690495]))
              if call_tmp[690500]
              {
                (524027 'move' ret[524002](524026 'deref' memory_order_seq_cst[186997]))
                gotoReturn _end_c_memory_order[524000] _end_c_memory_order[524000]
              }
              {
                (187152 call exhaustiveSelectHalt module=[255] HaltWrappers[210016] "Invalid memoryOrder")
                (361902 'referenced modules list' HaltWrappers[210016])
              }
            }
          }
        }
      }
    }
    label _end_c_memory_order[524000]
    (524004 return ret[524002])
    (355260 'used modules list'(187068 'import' HaltWrappers[210016]))
  }
  function chpl_rmem_consist_release[187201]() : void[4] "extern" "insert line file info" "local args" "no fn body" "no doc" "compiler added remote fence" "no return value for void"
  {
    (524031 return _void[55])
  }
  function chpl_rmem_consist_acquire[187207]() : void[4] "extern" "insert line file info" "local args" "no fn body" "no doc" "compiler added remote fence" "no return value for void"
  {
    (524033 return _void[55])
  }
  function chpl_rmem_consist_maybe_release[187217](arg order[187214]:memory_order[186653]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no doc" "compiler added remote fence" "no return value for void"
  {
    (524035 return _void[55])
  }
  function chpl_rmem_consist_maybe_release[187227](param arg order[187224]:memoryOrder[187012]) : _unknown[51] "compiler added remote fence" "no return value for void"
  {
    unknown call_tmp[690505] "expr temp" "maybe param" "maybe type" "temp"
    (690508 'move' call_tmp[690505](187233 call c_memory_order order[187224]))
    (187235 call chpl_rmem_consist_maybe_release call_tmp[690505])
    (524037 return _void[55])
  }
  function chpl_rmem_consist_maybe_acquire[187246](arg order[187243]:memory_order[186653]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no doc" "compiler added remote fence" "no return value for void"
  {
    (524039 return _void[55])
  }
  function chpl_rmem_consist_maybe_acquire[187256](param arg order[187253]:memoryOrder[187012]) : _unknown[51] "compiler added remote fence" "no return value for void"
  {
    unknown call_tmp[690510] "expr temp" "maybe param" "maybe type" "temp"
    (690513 'move' call_tmp[690510](187262 call c_memory_order order[187253]))
    (187264 call chpl_rmem_consist_maybe_acquire call_tmp[690510])
    (524041 return _void[55])
  }
  function chpl_rmem_consist_fence[187275](arg order[187272]:memory_order[186653]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no doc" "no return value for void"
  {
    (524043 return _void[55])
  }
  function chpl_rmem_consist_fence[187285](param arg order[187282]:memoryOrder[187012]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[690515] "expr temp" "maybe param" "maybe type" "temp"
    (690518 'move' call_tmp[690515](187291 call c_memory_order order[187282]))
    (187293 call chpl_rmem_consist_fence call_tmp[690515])
    (524045 return _void[55])
  }
}