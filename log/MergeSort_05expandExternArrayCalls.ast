AST dump for MergeSort after pass expandExternArrayCalls.
Module use list: 

{
  (353068 'use' ChapelStandard)
  (271217 'use' Sort)
  function mergeSort[271232](arg Data[271229] :
  (271227 call chpl__buildArrayRuntimeType unknown Dom[271222] unknown eltType[271225]), arg minlen[271235] =
  16, arg comparator[271241] :
  unknown rec[271238] =
  defaultComparator) : _unknown[51]
  {
    (271249 call chpl_check_comparator comparator eltType)
    if(271281 call _cond_test(271257 call !=(271253 call . Dom c"rank") 1))
    {
      (271278 call compilerError "mergeSort() requires 1-D array")
    }
    { scopeless
      unknown Scratch[271287](271286 'typeof' Data)
      (271290 'end of statement')
    }
    (271306 call _MergeSort Data Scratch(271296 call . Dom c"alignedLow")(271300 call . Dom c"alignedHigh") minlen comparator 0)
  }
  function _MergeSort[271320](arg Data[271317] :
  (271315 call chpl__buildArrayRuntimeType unknown Dom[271312]), arg Scratch[271325] :
  (271322 call chpl__buildArrayRuntimeType nil[44]), arg lo[271329] :
  int[13], arg hi[271333] :
  int[13], arg minlen[271337] =
  16, arg comparator[271343] :
  unknown rec[271340] =
  defaultComparator, arg depth[271348] :
  int[13]) : _unknown[51] "private"
  {
    (271364 'import'(271361 call . Sort c"InsertionSort"))
    { scopeless
      const stride[271382] "const"(271379 IfExpr (271368 call . Dom c"stridable") then
      { scopeless
        (271377 call abs(271373 call . Dom c"stride"))
      } else
      { scopeless
        1
      } )
      const size[271392] "const"(271390 call /(271387 call - hi lo) stride)
      const mid[271405] "const"(271403 call + lo(271401 call *(271398 call / size 2) stride))
      (271408 'end of statement')
    }
    if(271519 call _cond_test(271435 call ||(271414 call <(271411 call + size 1) minlen)(271433 call &&(271421 call ==(271418 call & depth 1) 0)(271431 call <(271425 call + size 1)(271429 call * 2 minlen)))))
    {
      (271449 call(271440 call . InsertionSort c"insertionSort") Data(comparator = comparator) lo hi)
      if(271513 call _cond_test(271454 call & depth 1))
      {
        if(271506 call _cond_test(271457 call . Dom c"stridable"))
        {
          { scopeless
            (271486 call =(271472 call Scratch(271469 call chpl_by(271463 call chpl_build_bounded_range lo hi)(271466 call . Dom c"stride")))(271485 call Data(271482 call chpl_by(271476 call chpl_build_bounded_range lo hi)(271479 call . Dom c"stride"))))
          }
        }
        {
          { scopeless
            (271503 call =(271495 call Scratch(271492 call chpl_build_bounded_range lo hi))(271502 call Data(271499 call chpl_build_bounded_range lo hi)))
          }
        }
      }
      (271517 return)
    }
    if(271640 call _cond_test(271537 call <(271528 call(271524 call . here c"runningTasks"))(271536 call(271530 call . here c"numPUs")(logical = 1))))
    {
      {
        const _cobeginCount[271573] "const" "end count" "temp"
        (271594 'move' _cobeginCount[271573](271591 call _endCountAlloc 1))
        (271586 call _upEndCount _cobeginCount[271573] 1 2)
        {
          {
            (271551 call _MergeSort Data Scratch lo mid minlen comparator(271549 call + depth 1))
          }
          (271576 call _downEndCount _cobeginCount[271573] nil[44])
          (271575 'cobegin block')
        }
        {
          {
            (271570 call _MergeSort Data Scratch(271561 call + mid stride) hi minlen comparator(271568 call + depth 1))
          }
          (271582 call _downEndCount _cobeginCount[271573] nil[44])
          (271581 'cobegin block')
        }
        Defer
        {
          {
            (271597 call _endCountFree _cobeginCount[271573])
          }
        }
        (271602 call _waitEndCount _cobeginCount[271573] 1 2)
      }
    }
    {
      (271620 call _MergeSort Data Scratch lo mid minlen comparator(271618 call + depth 1))
      (271638 call _MergeSort Data Scratch(271629 call + mid stride) hi minlen comparator(271636 call + depth 1))
    }
    if(271673 call _cond_test(271649 call ==(271646 call & depth 1) 0))
    {
      (271659 call _Merge Data Scratch lo mid hi comparator)
    }
    {
      (271670 call _Merge Scratch Data lo mid hi comparator)
    }
  }
  where {
    (271356 call ==(271352 call . Dom c"rank") 1)
  }
  function _Merge[271692](arg Dst[271689] :
  (271687 call chpl__buildArrayRuntimeType unknown Dom[271682] unknown eltType[271685]), arg Src[271697] :
  (271694 call chpl__buildArrayRuntimeType nil[44]), arg lo[271701] :
  int[13], arg mid[271705] :
  int[13], arg hi[271709] :
  int[13], arg comparator[271715] :
  unknown rec[271712] =
  defaultComparator) : _unknown[51] "private"
  {
    { scopeless
      const stride[271734] "const"(271731 IfExpr (271720 call . Dom c"stridable") then
      { scopeless
        (271729 call abs(271725 call . Dom c"stride"))
      } else
      { scopeless
        1
      } )
      (271737 'end of statement')
    }
    { scopeless
      const a1range[271757] "const"(271754 IfExpr (271740 call . Dom c"stridable") then
      { scopeless
        (271748 call chpl_by(271745 call chpl_build_bounded_range lo mid) stride)
      } else
      { scopeless
        (271752 call chpl_build_bounded_range lo mid)
      } )
      (271760 'end of statement')
    }
    { scopeless
      const a1max[271762] "const" mid
      (271765 'end of statement')
    }
    { scopeless
      const a2range[271790] "const"(271787 IfExpr (271767 call . Dom c"stridable") then
      { scopeless
        (271778 call chpl_by(271775 call chpl_build_bounded_range(271772 call + mid stride) hi) stride)
      } else
      { scopeless
        (271785 call chpl_build_bounded_range(271782 call + mid 1) hi)
      } )
      (271793 'end of statement')
    }
    { scopeless
      const a2max[271795] "const" hi
      (271798 'end of statement')
    }
    { scopeless
      unknown A1[271803] "ref var"(271802 call Src a1range)
      (271806 'end of statement')
    }
    { scopeless
      unknown A2[271811] "ref var"(271810 call Src a2range)
      (271814 'end of statement')
    }
    { scopeless
      unknown a1[271819](271816 call . a1range c"first")
      (271822 'end of statement')
    }
    { scopeless
      unknown a2[271827](271824 call . a2range c"first")
      (271830 'end of statement')
    }
    { scopeless
      unknown i[271832] lo
      (271835 'end of statement')
    }
    {
      unknown tmp[271910] "temp"
      (271946 'move' tmp[271910](271935 call _cond_test(271937 call &&(271939 call <= a1 a1max)(271943 call <= a2 a2max))))
      WhileDo[271915]
      {
        {
          if(271905 call _cond_test(271859 call <=(271857 call chpl_compare(271850 call A1 a1)(271855 call A2 a2) comparator) 0))
          {
            (271869 call =(271864 call Dst i)(271868 call A1 a1))
            (271875 call += a1 stride)
            (271880 call += i stride)
          }
          {
            (271891 call =(271886 call Dst i)(271890 call A2 a2))
            (271897 call += a2 stride)
            (271902 call += i stride)
          }
        }
        label _continueLabel[271913]
        (271930 'move' tmp[271910](271919 call _cond_test(271921 call &&(271923 call <= a1 a1max)(271927 call <= a2 a2max))))
        tmp[271910]
      }
      label _breakLabel[271914]
    }
    {
      unknown tmp[271975] "temp"
      (271999 'move' tmp[271975](271994 call _cond_test(271996 call <= a1 a1max)))
      WhileDo[271980]
      {
        {
          (271961 call =(271956 call Dst i)(271960 call A1 a1))
          (271967 call += a1 stride)
          (271972 call += i stride)
        }
        label _continueLabel[271978]
        (271989 'move' tmp[271975](271984 call _cond_test(271986 call <= a1 a1max)))
        tmp[271975]
      }
      label _breakLabel[271979]
    }
    {
      unknown tmp[272028] "temp"
      (272052 'move' tmp[272028](272047 call _cond_test(272049 call <= a2 a2max)))
      WhileDo[272033]
      {
        {
          (272014 call =(272009 call Dst i)(272013 call A2 a2))
          (272020 call += a2 stride)
          (272025 call += i stride)
        }
        label _continueLabel[272031]
        (272042 'move' tmp[272028](272037 call _cond_test(272039 call <= a2 a2max)))
        tmp[272028]
      }
      label _breakLabel[272032]
    }
  }
}