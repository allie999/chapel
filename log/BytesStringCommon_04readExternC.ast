AST dump for BytesStringCommon after pass readExternC.
Module use list: 

{
  (173628 'use' ChapelStandard)
  (173632 'use' SysCTypes)
  (173635 'use' ByteBufferHelpers)
  (173643 'use'(173640 call . String c"NVStringFactory"))
  type decodePolicy[173656] def strict[173646]:decodePolicy[173656] def replace[173648]:decodePolicy[173656] def drop[173650]:decodePolicy[173656] def escape[173652]:decodePolicy[173656] def ignore[173654]:decodePolicy[173656]
  type encodePolicy[173664] def unescape[173660]:encodePolicy[173664] def pass[173662]:encodePolicy[173664]
  {
  }
  { scopeless
    unknown showStringBytesInitDeprWarnings[173670] "config" "no doc" "param" 1
    (173673 'end of statement')
  }
  { scopeless
    unknown surrogateEscape[173680] "no doc" "param"(173678 call _cast byteType 220)
    (173683 'end of statement')
  }
  function isBytesOrStringType[173688](arg t[173686]:_any[178](?)) param : _unknown[51] "private"
  {
    (173701 return(173699 call ||(173693 call == t bytes[24])(173697 call == t string[26])))
  }
  { scopeless type
    bool[10]
  }
  function assertArgType[173711](arg t[173709]:_any[178](?), param arg methodName[173714] :
  string[26]) param : _unknown[51] "private"
  {
    if(173767 call _cond_test(173721 call !(173720 call isBytesOrStringType t)))
    {
      (173764 call compilerError(173761 call +(173742 call + "BytesStringCommon." methodName) " can only be called with bytes or string argument(s)"))
    }
  }
  function getCStr[173781](const  ref arg x[173778] :
  unknown t[173776]) : _unknown[51] "inline"
  {
    (173804 call assertArgType t "getCStr")
    function _cast[173813](arg t[173810] :
    c_string, arg b[173816] :
    bufferType) : _unknown[51] "inline"
    {
      (173824 return(173823 'cast' t b))
    }
    if(173869 call _cond_test(173840 call &&(173831 call == _local 0)(173838 call !=(173834 call . x c"locale_id") chpl_nodeID)))
    {
      { scopeless
        (173867 call halt(173864 call + "Cannot call .c_str() on a remote "(173862 call _cast string[26] t)))
      }
    }
    (173881 return(173879 call _cast c_string(173875 call . x c"buff")))
  }
  { scopeless type
    c_string
  }
  function decodeByteBuffer[173892](arg buff[173889] :
  bufferType, arg length[173895] :
  int[13], arg policy[173899] :
  decodePolicy) : _unknown[51] throws
  {
    (173903 'use' SysBasic)
    function qio_encode_char_buf[173912](arg dst[173909] :
    c_void_ptr, arg chr[173918] :
    (173917 call int[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      syserr
    }
    function qio_nbytes_char[173934](arg chr[173931] :
    (173930 call int[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    if(173963 call _cond_test(173942 call == length 0))
    {
      { scopeless
        (173961 return "")
      }
    }
    { scopeless
      unknown tmp[173980] "temp"(173979 call bufferAlloc(173976 call + length 1))
      (173987 call _check_tuple_var_decl tmp[173980] 2)
      unknown newBuff[173968](173981 call tmp[173980] 0)
      unknown allocSize[173970](173984 call tmp[173980] 1)
      (173992 'end of statement')
    }
    { scopeless
      unknown hasEscapes[173994] 0
      (173997 'end of statement')
    }
    { scopeless
      unknown numCodepoints[173999] 0
      (174002 'end of statement')
    }
    { scopeless
      unknown expectedSize[174004] allocSize
      (174007 'end of statement')
    }
    { scopeless
      unknown thisIdx[174009] 0
      (174012 'end of statement')
    }
    { scopeless
      unknown decodedIdx[174014] 0
      (174017 'end of statement')
    }
    {
      unknown tmp[174329] "temp"
      (174353 'move' tmp[174329](174348 call _cond_test(174350 call < thisIdx length)))
      WhileDo[174334]
      {
        {
          { scopeless
            const tmp[174037] "const" "temp"(174036 call decodeHelp buff length thisIdx(allowEsc = 0))
            (174047 call _check_tuple_var_decl tmp[174037] 3)
            const decodeRet[174022] "const"(174038 call tmp[174037] 0)
            const cp[174024] "const"(174041 call tmp[174037] 1)
            const nBytes[174026] "const"(174044 call tmp[174037] 2)
            (174052 'end of statement')
          }
          { scopeless
            unknown buffToDecode[174058](174056 call + buff thisIdx)
            (174061 'end of statement')
          }
          (174064 call += numCodepoints 1)
          if(174325 call _cond_test(174069 call != decodeRet 0))
          {
            if(174297 call _cond_test(174076 call == policy(174073 call . decodePolicy c"strict")))
            {
              (174081 call bufferFree newBuff)
              (174090 'throw'(174086 'new'(_chpl_manager = _owned[30](?))(174089 call DecodeError)))
            }
            {
              { scopeless
                const nInvalidBytes[174104] "const"(174101 IfExpr (174094 call == nBytes 1) then
                { scopeless
                  nBytes
                } else
                { scopeless
                  (174099 call - nBytes 1)
                } )
                (174107 'end of statement')
              }
              (174111 call += thisIdx nInvalidBytes)
              if(174292 call _cond_test(174119 call == policy(174116 call . decodePolicy c"replace")))
              {
                { scopeless
                  unknown replChar[174128] "param" 65533(174124 call int[13] 32)
                  (174131 'end of statement')
                }
                (174138 call += expectedSize(174136 call - 3 nInvalidBytes))
                (174152 call =(174144 call _build_tuple newBuff allocSize)(174151 call bufferEnsureSize newBuff allocSize expectedSize))
                (174162 call qio_encode_char_buf(174158 call + newBuff decodedIdx) replChar)
                (174166 call += decodedIdx 3)
              }
              {
                { scopeless
                  if(174288 call _cond_test(174176 call == policy(174173 call . decodePolicy c"escape")))
                  {
                    (174180 call = hasEscapes 1)
                    (174189 call += expectedSize(174187 call * 2 nInvalidBytes))
                    (174203 call =(174195 call _build_tuple newBuff allocSize)(174202 call bufferEnsureSize newBuff allocSize expectedSize))
                    {
                      unknown _indexOfInterest[174240] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[174241] "expr temp" "temp"
                      (174250 'move' _iterator[174241](174248 call _getIterator(174257 call chpl_direct_counted_range_iter 0 nInvalidBytes)))
                      Defer
                      {
                        {
                          (174273 call _freeIterator _iterator[174241])
                        }
                      }
                      { scopeless type
                        (174262 'move' _indexOfInterest[174240](174259 call iteratorIndex _iterator[174241]))
                      }
                      ForLoop[174242]
                      {
                        unknown i[174266] "index var" "insert auto destroy"
                        (174268 'move' i[174266] _indexOfInterest[174240])
                        {
                          (174232 call qio_encode_char_buf(174216 call + newBuff decodedIdx)(174230 call + 56320(174229 call buff(174226 call +(174223 call - thisIdx nInvalidBytes) i))))
                          (174237 call += decodedIdx 3)
                        }
                        label _continueLabel[174245]
                        _indexOfInterest[174240]
                        _iterator[174241]
                      }
                      label _breakLabel[174246]
                    }
                    (174285 call += numCodepoints(174283 call - nInvalidBytes 1))
                  }
                }
              }
            }
          }
          {
            (174312 call bufferMemcpyLocal(dst = newBuff)(src = buffToDecode)(len = nBytes)(dst_off = decodedIdx))
            (174317 call += thisIdx nBytes)
            (174322 call += decodedIdx nBytes)
          }
        }
        label _continueLabel[174332]
        (174343 'move' tmp[174329](174338 call _cond_test(174340 call < thisIdx length)))
        tmp[174329]
      }
      label _breakLabel[174333]
    }
    (174361 call =(174359 call newBuff decodedIdx) 0)
    { scopeless
      unknown ret[174375](174374 call chpl_createStringWithOwnedBufferNV(x = newBuff)(length = decodedIdx)(size = allocSize)(numCodepoints = numCodepoints))
      (174378 'end of statement')
    }
    (174386 call =(174382 call . ret c"hasEscapes") hasEscapes)
    (174390 return ret)
  }
  function decodeHelp[174406](arg buff[174403] :
  (174402 call c_ptr(174400 call uint[115] 8)), arg buffLen[174409] :
  int[13], arg offset[174413] :
  int[13], arg allowEsc[174417] :
  bool[10]) : _unknown[51]
  {
    (174421 'use' SysBasic)
    function qio_decode_char_buf[174433](ref arg chr[174430] :
    (174429 call int[13] 32), ref arg nBytes[174436] :
    c_int, arg buf[174440] :
    c_string, arg buflen[174444] :
    ssize_t) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      syserr
    }
    function qio_decode_char_buf_esc[174460](ref arg chr[174457] :
    (174456 call int[13] 32), ref arg nBytes[174463] :
    c_int, arg buf[174467] :
    c_string, arg buffLen[174471] :
    ssize_t) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      syserr
    }
    { scopeless
      unknown chr[174482](174481 call int[13] 32)
      (174485 'end of statement')
    }
    { scopeless
      unknown nBytes[174487] c_int
      (174490 'end of statement')
    }
    { scopeless
      unknown start[174495](174493 call _cast c_int offset)
      (174498 'end of statement')
    }
    { scopeless
      unknown multibytes[174506](174504 call _cast c_string(174501 call + buff start))
      (174509 'end of statement')
    }
    { scopeless
      unknown maxbytes[174517](174515 call _cast ssize_t(174512 call - buffLen start))
      (174520 'end of statement')
    }
    { scopeless
      unknown decodeRet[174522] syserr
      (174525 'end of statement')
    }
    if(174549 call _cond_test allowEsc)
    {
      { scopeless
        (174535 call = decodeRet(174534 call qio_decode_char_buf_esc chr nBytes multibytes maxbytes))
      }
    }
    {
      { scopeless
        (174546 call = decodeRet(174545 call qio_decode_char_buf chr nBytes multibytes maxbytes))
      }
    }
    (174561 return(174559 call _build_tuple decodeRet chr nBytes))
  }
  function initWithBorrowedBuffer[174572](ref arg x[174569] :
  unknown t[174567], arg other[174575] :
  t) : _unknown[51]
  {
    (174598 call assertArgType t "initWithBorrowedBuffer")
    (174606 call =(174602 call . x c"isOwned") 0)
    if(174624 call _cond_test(174611 call == t string[26]))
    {
      { scopeless
        (174621 call =(174614 call . x c"hasEscapes")(174618 call . other c"hasEscapes"))
      }
    }
    { scopeless
      const otherRemote[174636] "const"(174634 call !=(174630 call . other c"locale_id") chpl_nodeID)
      (174639 'end of statement')
    }
    { scopeless
      const otherLen[174644] "const"(174641 call . other c"numBytes")
      (174647 'end of statement')
    }
    if(174770 call _cond_test(174650 call > otherLen 0))
    {
      (174657 call =(174653 call . x c"buffLen") otherLen)
      if(174766 call _cond_test otherRemote)
      {
        (174667 call =(174663 call . x c"isOwned") 1)
        (174687 call =(174672 call . x c"buff")(174686 call bufferCopyRemote(174677 call . other c"locale_id")(174682 call . other c"buff") otherLen))
        (174698 call =(174691 call . x c"buffLen")(174696 call + otherLen 1))
        if(174716 call _cond_test(174703 call == t string[26]))
        {
          { scopeless
            (174713 call =(174706 call . x c"cachedNumCodepoints")(174710 call . other c"cachedNumCodepoints"))
          }
        }
      }
      {
        (174729 call =(174722 call . x c"buff")(174726 call . other c"buff"))
        (174743 call =(174736 call . x c"buffSize")(174740 call . other c"buffSize"))
        if(174761 call _cond_test(174748 call == t string[26]))
        {
          { scopeless
            (174758 call =(174751 call . x c"cachedNumCodepoints")(174755 call . other c"cachedNumCodepoints"))
          }
        }
      }
    }
  }
  function initWithBorrowedBuffer[174783](ref arg x[174780] :
  unknown t[174778], arg other[174786] :
  bufferType, arg length[174790] :
  int[13], arg size[174794] :
  int[13]) : _unknown[51]
  {
    (174801 call assertArgType t "initWithBorrowedBuffer")
    (174809 call =(174805 call . x c"isOwned") 0)
    (174817 call =(174813 call . x c"buff") other)
    (174825 call =(174821 call . x c"buffSize") size)
    (174833 call =(174829 call . x c"buffLen") length)
  }
  function initWithOwnedBuffer[174845](ref arg x[174842] :
  unknown t[174840], arg other[174848] :
  bufferType, arg length[174852] :
  int[13], arg size[174856] :
  int[13]) : _unknown[51] "inline"
  {
    (174879 call assertArgType t "initWithOwnedBuffer")
    (174887 call =(174883 call . x c"isOwned") 1)
    (174895 call =(174891 call . x c"buff") other)
    (174903 call =(174899 call . x c"buffSize") size)
    (174911 call =(174907 call . x c"buffLen") length)
  }
  function initWithNewBuffer[174923](ref arg x[174920] :
  unknown t[174918], arg other[174926] :
  t) : _unknown[51] "inline"
  {
    (174949 call assertArgType t "initWithNewBuffer")
    { scopeless
      const otherRemote[174959] "const"(174957 call !=(174953 call . other c"locale_id") chpl_nodeID)
      (174962 'end of statement')
    }
    { scopeless
      const otherLen[174967] "const"(174964 call . other c"numBytes")
      (174970 'end of statement')
    }
    (174976 call =(174972 call . x c"isOwned") 1)
    if(174994 call _cond_test(174981 call == t string[26]))
    {
      { scopeless
        (174991 call =(174984 call . x c"hasEscapes")(174988 call . other c"hasEscapes"))
      }
    }
    if(175014 call _cond_test(175001 call == t string[26]))
    {
      { scopeless
        (175011 call =(175004 call . x c"cachedNumCodepoints")(175008 call . other c"cachedNumCodepoints"))
      }
    }
    if(175130 call _cond_test(175021 call > otherLen 0))
    {
      (175028 call =(175024 call . x c"buffLen") otherLen)
      if(175126 call _cond_test(175036 call &&(175033 call ! _local) otherRemote))
      {
        (175054 call =(175039 call . x c"buff")(175053 call bufferCopyRemote(175044 call . other c"locale_id")(175049 call . other c"buff") otherLen))
        (175066 call =(175059 call . x c"buffSize")(175064 call + otherLen 1))
      }
      {
        { scopeless
          const tmp[175082] "const" "temp"(175081 call bufferCopyLocal(175076 call . other c"buff") otherLen)
          (175089 call _check_tuple_var_decl tmp[175082] 2)
          const buff[175069] "const"(175083 call tmp[175082] 0)
          const allocSize[175071] "const"(175086 call tmp[175082] 1)
          (175094 'end of statement')
        }
        (175101 call =(175097 call . x c"buff") buff)
        (175115 call =(175113 call(175105 call . x c"buff")(175109 call . x c"buffLen")) 0)
        (175123 call =(175119 call . x c"buffSize") allocSize)
      }
    }
  }
  function initWithNewBuffer[175143](ref arg x[175140] :
  unknown t[175138], arg other[175146] :
  bufferType, arg length[175150] :
  int[13], arg size[175154] :
  int[13]) : _unknown[51]
  {
    (175161 call assertArgType t "initWithNewBuffer")
    { scopeless
      const otherLen[175165] "const" length
      (175168 'end of statement')
    }
    (175174 call =(175170 call . x c"isOwned") 1)
    if(175246 call _cond_test(175179 call > otherLen 0))
    {
      { scopeless
        const tmp[175194] "const" "temp"(175193 call bufferCopyLocal(175189 call _cast bufferType other) otherLen)
        (175201 call _check_tuple_var_decl tmp[175194] 2)
        const buff[175181] "const"(175195 call tmp[175194] 0)
        const allocSize[175183] "const"(175198 call tmp[175194] 1)
        (175206 'end of statement')
      }
      (175213 call =(175209 call . x c"buff") buff)
      (175221 call =(175217 call . x c"buffLen") otherLen)
      (175235 call =(175233 call(175225 call . x c"buff")(175229 call . x c"buffLen")) 0)
      (175243 call =(175239 call . x c"buffSize") allocSize)
    }
  }
  function getView[175259](const  ref arg x[175256] :
  unknown t[175254], arg r[175265] :
  (175264 call range ?[260])) : _unknown[51]
  {
    (175288 call assertArgType t "getView")
    if(175326 call _cond_test(175302 call &&(175293 call == t bytes[24])(175300 call ==(175296 call . r c"idxType") codepointIndex)))
    {
      (175323 call compilerError "codepointIndex ranges cannot be used with bytes in getView")
    }
    function simpleCaseHelper[175332]() : _unknown[51]
    {
      { scopeless
        const intR[175349] "const"(175347 call _cast(175346 call range int[13](175339 call . r c"boundedType")(175343 call . r c"stridable")) r)
        (175352 'end of statement')
      }
      if(175441 call _cond_test boundsChecking)
      {
        if(175436 call _cond_test(175365 call !(175364 call(175359 call .(175356 call . x c"byteIndices") c"boundsCheck") intR)))
        {
          (175433 call halt "range " r(175427 call +(175408 call + " out of bounds for "(175406 call _cast string[26] t)) " with length ")(175430 call . x c"numBytes"))
        }
      }
      if(175490 call _cond_test(175450 call ==(175446 call . r c"idxType") byteIndex))
      {
        (175465 return(175463 call _build_tuple(175458 call intR(175454 call . x c"byteIndices"))(175460 call - 1)))
      }
      {
        { scopeless
          const retRange[175475] "const"(175474 call intR(175470 call . x c"byteIndices"))
          (175478 'end of statement')
        }
        (175488 return(175486 call _build_tuple retRange(175482 call . retRange c"size")))
      }
    }
    if(175881 call _cond_test(175507 call ||(175498 call == t bytes[24])(175505 call ==(175501 call . r c"idxType") byteIndex)))
    {
      (175512 return(175511 call simpleCaseHelper))
    }
    {
      { scopeless
        if(175877 call _cond_test(175525 call &&(175517 call == t string[26])(175524 call(175520 call . x c"isASCII"))))
        {
          (175530 return(175529 call simpleCaseHelper))
        }
        {
          if(175559 call _cond_test(175534 call . r c"stridable"))
          {
            (175556 call compilerError "string slicing doesn't support stridable codepoint ranges")
          }
          if(175584 call _cond_test(175569 call == r(175566 call . x c"indices")))
          {
            { scopeless
              (175582 return(175580 call _build_tuple(175572 call . x c"byteIndices")(175576 call . x c"cachedNumCodepoints")))
            }
          }
          { scopeless
            const intR[175604] "const"(175602 call _cast(175601 call range int[13](175594 call . r c"boundedType")(175598 call . r c"stridable")) r)
            (175607 'end of statement')
          }
          if(175638 call _cond_test boundsChecking)
          {
            if(175633 call _cond_test(175619 call !(175618 call(175613 call .(175610 call . x c"indices") c"boundsCheck") intR)))
            {
              (175630 call halt "range " r " out of bounds for string with length "(175627 call . x c"size"))
            }
          }
          { scopeless
            unknown cpCount[175643] 0
            (175646 'end of statement')
          }
          { scopeless
            const cpIdxLow[175676] "const"(175673 IfExpr (175663 call &&(175652 call(175648 call . intR c"hasLowBound"))(175661 call >=(175658 call _cast int[13](175654 call . intR c"alignedLow")) 0)) then
            { scopeless
              (175670 call _cast int[13](175666 call . intR c"alignedLow"))
            } else
            { scopeless
              0
            } )
            (175679 'end of statement')
          }
          { scopeless
            const cpIdxHigh[175703] "const"(175700 IfExpr (175685 call(175681 call . intR c"hasHighBound")) then
            { scopeless
              (175691 call _cast int[13](175687 call . intR c"alignedHigh"))
            } else
            { scopeless
              (175698 call -(175694 call . x c"buffLen") 1)
            } )
            (175706 'end of statement')
          }
          { scopeless
            unknown byteLow[175711](175708 call . x c"buffLen")
            (175714 'end of statement')
          }
          { scopeless
            unknown byteHigh[175722](175720 call -(175716 call . x c"buffLen") 1)
            (175725 'end of statement')
          }
          if(175857 call _cond_test(175728 call >= cpIdxHigh 0))
          {
            {
              unknown _indexOfInterest[175808] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[175809] "expr temp" "temp"
              (175818 'move' _iterator[175809](175816 call _getIterator(175742 call(175738 call . x c"_indexLen"))))
              Defer
              {
                {
                  (175849 call _freeIterator _iterator[175809])
                }
              }
              { scopeless type
                (175824 'move' _indexOfInterest[175808](175821 call iteratorIndex _iterator[175809]))
              }
              ForLoop[175810]
              {
                (175829 call _check_tuple_var_decl _indexOfInterest[175808] 2)
                unknown i[175835] "index var" "insert auto destroy"
                (175837 'move' i[175835](175833 call _indexOfInterest[175808] 0))
                unknown nBytes[175842] "index var" "insert auto destroy"
                (175844 'move' nBytes[175842](175840 call _indexOfInterest[175808] 1))
                {
                  if(175772 call _cond_test(175745 call == cpCount cpIdxLow))
                  {
                    (175752 call = byteLow(175750 call _cast int[13] i))
                    if(175767 call _cond_test(175762 call !(175761 call(175757 call . r c"hasHighBound"))))
                    {
                      { scopeless
                        break nil[44]
                      }
                    }
                  }
                  if(175799 call _cond_test(175779 call == cpCount cpIdxHigh))
                  {
                    (175792 call = byteHigh(175790 call -(175787 call +(175784 call _cast int[13] i) nBytes) 1))
                    break nil[44]
                  }
                  (175805 call += cpCount 1)
                }
                label _continueLabel[175813]
                _indexOfInterest[175808]
                _iterator[175809]
              }
              label _breakLabel[175814]
            }
          }
          (175875 return(175873 call _build_tuple(175863 call chpl_build_bounded_range byteLow byteHigh)(175870 call +(175867 call - cpIdxHigh cpIdxLow) 1)))
        }
      }
    }
  }
  function getSlice[175895](const  ref arg x[175892] :
  unknown t[175890], arg r[175901] :
  (175900 call range ?[260])) : _unknown[51]
  {
    (175924 call assertArgType t "getSlice")
    if(175942 call _cond_test(175932 call(175928 call . x c"isEmpty")))
    {
      { scopeless
        unknown ret[175934] t
        (175937 'end of statement')
      }
      (175940 return ret)
    }
    { scopeless
      const tmp[175956] "const" "temp"(175955 call getView x r)
      (175963 call _check_tuple_var_decl tmp[175956] 2)
      const r2[175946] "const"(175957 call tmp[175956] 0)
      const numChars[175948] "const"(175960 call tmp[175956] 1)
      (175968 'end of statement')
    }
    if(175985 call _cond_test(175974 call <=(175970 call . r2 c"size") 0))
    {
      { scopeless
        unknown ret[175977] t
        (175980 'end of statement')
      }
      (175983 return ret)
    }
    { scopeless
      unknown buff[175990] bufferType
      (175993 'end of statement')
    }
    { scopeless
      unknown buffSize[175995] int[13]
      (175998 'end of statement')
    }
    { scopeless
      const copyLen[176012] "const"(176010 call +(176007 call -(176000 call . r2 c"high")(176004 call . r2 c"low")) 1)
      (176015 'end of statement')
    }
    { scopeless
      unknown tmp[176041] "temp"(176040 call bufferCopy(buf =(176023 call . x c"buff"))(off =(176029 call . r2 c"low"))(len = copyLen)(loc =(176036 call . x c"locale_id")))
      (176048 call _check_tuple_var_decl tmp[176041] 2)
      unknown copyBuf[176016](176042 call tmp[176041] 0)
      unknown copySize[176018](176045 call tmp[176041] 1)
      (176053 'end of statement')
    }
    if(176200 call _cond_test(176059 call ==(176055 call . r2 c"stride") 1))
    {
      (176063 call = buff copyBuf)
      (176069 call = buffSize copySize)
    }
    {
      { scopeless
        unknown tmp[176087] "temp"(176086 call bufferAlloc(176083 call +(176079 call . r2 c"size") 1))
        (176094 call _check_tuple_var_decl tmp[176087] 2)
        unknown newBuff[176072](176088 call tmp[176087] 0)
        unknown allocSize[176074](176091 call tmp[176087] 1)
        (176099 'end of statement')
      }
      {
        unknown _indexOfInterest[176130] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[176131] "expr temp" "temp"
        (176148 'move' _iterator[176131](176111 call _build_tuple(176140 call _getIterator r2)(176145 call _getIterator(176143 call chpl_build_low_bounded_range 0))))
        Defer
        {
          {
            (176178 call _freeIterator _iterator[176131])
          }
        }
        { scopeless type
          (176153 'move' _indexOfInterest[176130](176150 call iteratorIndex _iterator[176131]))
        }
        ForLoop[176132]
        {
          (176158 call _check_tuple_var_decl _indexOfInterest[176130] 2)
          unknown r2_i[176164] "index var" "insert auto destroy"
          (176166 'move' r2_i[176164](176162 call _indexOfInterest[176130] 0))
          unknown i[176171] "index var" "insert auto destroy"
          (176173 'move' i[176171](176169 call _indexOfInterest[176130] 1))
          {
            (176126 call =(176115 call newBuff i)(176125 call copyBuf(176122 call - r2_i(176119 call . r2 c"low"))))
          }
          label _continueLabel[176135]
          _indexOfInterest[176130]
          _iterator[176131]
        }
        label _breakLabel[176136]
      }
      (176187 call = buff newBuff)
      (176192 call = buffSize allocSize)
      (176198 call bufferFree copyBuf)
    }
    { scopeless
      const buffLen[176208] "const"(176205 call . r2 c"size")
      (176211 'end of statement')
    }
    (176217 call =(176215 call buff buffLen) 0)
    if(176275 call _cond_test(176222 call == t string[26]))
    {
      { scopeless
        unknown numCodepoints[176225] numChars
        (176228 'end of statement')
      }
      if(176246 call _cond_test(176234 call == numCodepoints(176232 call - 1)))
      {
        (176242 call = numCodepoints(176241 call countNumCodepoints buff buffLen))
      }
      (176261 return(176260 call chpl_createStringWithOwnedBufferNV(x = buff)(length = buffLen)(size = buffSize)(numCodepoints = numCodepoints)))
    }
    {
      (176272 return(176271 call createBytesWithOwnedBuffer(x = buff)(length = buffLen)(size = buffSize)))
    }
  }
  function getIndexType[176285](arg t[176283]:_any[178](?)) type : _unknown[51]
  {
    if(176336 call _cond_test(176289 call == t bytes[24]))
    {
      { scopeless
        (176295 return(176292 call . Bytes c"idxType"))
      }
    }
    {
      { scopeless
        if(176330 call _cond_test(176299 call == t string[26]))
        {
          { scopeless
            (176307 return(176304 call . String c"byteIndex"))
          }
        }
        {
          { scopeless
            (176328 call compilerError "This function should only be used by bytes or string")
          }
        }
      }
    }
  }
  function doReplace[176352](const  ref arg x[176349] :
  unknown t[176347], arg needle[176355] :
  t, arg replacement[176359] :
  t, arg count[176366] :
  int[13] =
  (176364 call - 1)) : _unknown[51]
  {
    (176391 call assertArgType t "doReplace")
    unknown _idxt[176398] "type variable"(176397 call getIndexType t)
    { scopeless
      unknown result[176403] x t
      (176406 'end of statement')
    }
    { scopeless
      unknown found[176409] 0 int[13]
      (176412 'end of statement')
    }
    { scopeless
      unknown startIdx[176415] 0 _idxt
      (176418 'end of statement')
    }
    { scopeless
      const localNeedle[176426] "const"(176425 call(176421 call . needle c"localize")) t
      (176429 'end of statement')
    }
    { scopeless
      const localReplacement[176437] "const"(176436 call(176432 call . replacement c"localize")) t
      (176440 'end of statement')
    }
    {
      unknown tmp[176526] "temp"
      (176562 'move' tmp[176526](176551 call _cond_test(176553 call ||(176555 call < count 0)(176559 call < found count))))
      WhileDo[176531]
      {
        {
          { scopeless
            const idx[176461] "const"(176460 call(176452 call . result c"find") localNeedle(176458 call chpl_build_low_bounded_range startIdx))
            (176464 'end of statement')
          }
          if(176475 call _cond_test(176470 call == idx(176468 call - 1)))
          {
            { scopeless
              break nil[44]
            }
          }
          (176482 call += found 1)
          (176512 call = result(176510 call +(176496 call +(176494 call result(176491 call chpl_build_high_bounded_range(176489 call - idx 1))) localReplacement)(176509 call result(176506 call chpl_build_low_bounded_range(176504 call + idx(176501 call . localNeedle c"numBytes"))))))
          (176523 call = startIdx(176521 call + idx(176518 call . localReplacement c"numBytes")))
        }
        label _continueLabel[176529]
        (176546 'move' tmp[176526](176535 call _cond_test(176537 call ||(176539 call < count 0)(176543 call < found count))))
        tmp[176526]
      }
      label _breakLabel[176530]
    }
    (176566 return result)
  }
  { scopeless type
    t
  }
  function doSplit[176578](const  ref arg x[176575] :
  unknown t[176573], arg sep[176581] :
  t, arg maxsplit[176588] :
  int[13] =
  (176586 call - 1), arg ignoreEmpty[176594] :
  bool[10] =
  0) : _unknown[51] "iterator fn"
  {
    (176619 call assertArgType t "doSplit")
    unknown _idxt[176626] "type variable"(176625 call getIndexType t)
    if(176860 call _cond_test(176644 call !(176642 call &&(176634 call &&(176631 call == maxsplit 0) ignoreEmpty)(176641 call(176637 call . x c"isEmpty")))))
    {
      { scopeless
        const localThis[176653] "const"(176652 call(176648 call . x c"localize")) t
        (176656 'end of statement')
      }
      { scopeless
        const localSep[176665] "const"(176664 call(176660 call . sep c"localize")) t
        (176668 'end of statement')
      }
      { scopeless
        unknown splitAll[176674](176672 call <= maxsplit 0) bool[10]
        (176677 'end of statement')
      }
      { scopeless
        unknown splitCount[176680] 0 int[13]
        (176683 'end of statement')
      }
      { scopeless
        unknown start[176686] 0 _idxt
        (176689 'end of statement')
      }
      { scopeless
        unknown done[176692] 0 bool[10]
        (176695 'end of statement')
      }
      {
        unknown tmp[176835] "temp"
        (176857 'move' tmp[176835](176853 call _cond_test(176855 call ! done)))
        WhileDo[176840]
        {
          {
            { scopeless
              unknown chunk[176700] t
              (176703 'end of statement')
            }
            { scopeless
              unknown end[176709](176707 call - 1) _idxt
              (176712 'end of statement')
            }
            if(176796 call _cond_test(176715 call == maxsplit 0))
            {
              (176719 call = chunk localThis)
              (176725 call = done 1)
            }
            {
              if(176749 call _cond_test(176733 call || splitAll(176731 call < splitCount maxsplit)))
              {
                { scopeless
                  (176746 call = end(176745 call(176737 call . localThis c"find") localSep(176743 call chpl_build_low_bounded_range start)))
                }
              }
              if(176792 call _cond_test(176759 call == end(176757 call - 1)))
              {
                (176768 call = chunk(176767 call localThis(176764 call chpl_build_low_bounded_range start)))
                (176774 call = done 1)
              }
              {
                (176788 call = chunk(176787 call localThis(176784 call chpl_build_bounded_range start(176782 call - end 1))))
              }
            }
            if(176820 call _cond_test(176809 call !(176807 call && ignoreEmpty(176806 call(176802 call . chunk c"isEmpty")))))
            {
              (176812 yield chunk)
              (176817 call += splitCount 1)
            }
            (176832 call = start(176830 call + end(176827 call . localSep c"numBytes")))
          }
          label _continueLabel[176838]
          (176848 'move' tmp[176835](176844 call _cond_test(176846 call ! done)))
          tmp[176835]
        }
        label _breakLabel[176839]
      }
    }
  }
  { scopeless type
    t
  }
  function doSplitWSNoEnc[176874](const  ref arg x[176871] :
  unknown t[176869], arg maxsplit[176880] :
  int[13] =
  (176878 call - 1)) : _unknown[51] "iterator fn"
  {
    (176905 call assertArgType t "doSplitWSNoEnc")
    if(177291 call _cond_test(176914 call !(176913 call(176909 call . x c"isEmpty"))))
    {
      { scopeless
        const localx[176923] "const"(176922 call(176918 call . x c"localize")) t
        (176926 'end of statement')
      }
      { scopeless
        unknown done[176930] 0 bool[10]
        (176933 'end of statement')
      }
      { scopeless
        unknown yieldChunk[176936] 0 bool[10]
        (176939 'end of statement')
      }
      { scopeless
        unknown chunk[176941] t
        (176944 'end of statement')
      }
      { scopeless
        const noSplits[176950] "const"(176948 call == maxsplit 0) bool[10]
        (176953 'end of statement')
      }
      { scopeless
        const limitSplits[176959] "const"(176957 call > maxsplit 0) bool[10]
        (176962 'end of statement')
      }
      { scopeless
        unknown splitCount[176965] 0 int[13]
        (176968 'end of statement')
      }
      { scopeless
        const iEnd[176977] "const"(176975 call -(176971 call . localx c"buffLen") 2) idxType
        (176980 'end of statement')
      }
      { scopeless
        unknown inChunk[176983] 0 bool[10]
        (176986 'end of statement')
      }
      { scopeless
        unknown chunkStart[176988] idxType
        (176991 'end of statement')
      }
      {
        unknown _indexOfInterest[177230] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[177231] "expr temp" "temp"
        (177254 'move' _iterator[177231](177007 call _build_tuple(177243 call _getIterator(177240 call . x c"indices"))(177251 call _getIterator(177250 call(177247 call . localx c"chpl_bytes")))))
        Defer
        {
          {
            (177284 call _freeIterator _iterator[177231])
          }
        }
        { scopeless type
          (177259 'move' _indexOfInterest[177230](177256 call iteratorIndex _iterator[177231]))
        }
        ForLoop[177232]
        {
          (177264 call _check_tuple_var_decl _indexOfInterest[177230] 2)
          unknown i[177270] "index var" "insert auto destroy"
          (177272 'move' i[177270](177268 call _indexOfInterest[177230] 0))
          unknown c[177277] "index var" "insert auto destroy"
          (177279 'move' c[177277](177275 call _indexOfInterest[177230] 1))
          {
            if(177202 call _cond_test noSplits)
            {
              (177011 call = done 1)
              if(177034 call _cond_test(177021 call !(177020 call(177016 call . localx c"isSpace"))))
              {
                (177025 call = chunk localx)
                (177031 call = yieldChunk 1)
              }
            }
            {
              { scopeless
                unknown cSpace[177042](177041 call byte_isWhitespace c)
                (177045 'end of statement')
              }
              if(177197 call _cond_test(177051 call !(177049 call || inChunk cSpace)))
              {
                (177055 call = chunkStart i)
                (177061 call = inChunk 1)
                if(177089 call _cond_test(177066 call > i iEnd))
                {
                  (177075 call = chunk(177074 call localx(177071 call chpl_build_low_bounded_range chunkStart)))
                  (177081 call = yieldChunk 1)
                  (177086 call = done 1)
                }
              }
              {
                { scopeless
                  if(177193 call _cond_test inChunk)
                  {
                    if(177187 call _cond_test cSpace)
                    {
                      (177097 call += splitCount 1)
                      if(177154 call _cond_test(177106 call && limitSplits(177104 call > splitCount maxsplit)))
                      {
                        (177115 call = chunk(177114 call localx(177111 call chpl_build_low_bounded_range chunkStart)))
                        (177121 call = yieldChunk 1)
                        (177126 call = done 1)
                      }
                      {
                        (177140 call = chunk(177139 call localx(177136 call chpl_build_bounded_range chunkStart(177134 call - i 1))))
                        (177146 call = yieldChunk 1)
                        (177151 call = inChunk 0)
                      }
                    }
                    {
                      { scopeless
                        if(177183 call _cond_test(177160 call > i iEnd))
                        {
                          (177169 call = chunk(177168 call localx(177165 call chpl_build_low_bounded_range chunkStart)))
                          (177175 call = yieldChunk 1)
                          (177180 call = done 1)
                        }
                      }
                    }
                  }
                }
              }
            }
            if(177217 call _cond_test yieldChunk)
            {
              (177209 yield chunk)
              (177214 call = yieldChunk 0)
            }
            if(177225 call _cond_test done)
            {
              { scopeless
                break nil[44]
              }
            }
          }
          label _continueLabel[177235]
          _indexOfInterest[177230]
          _iterator[177231]
        }
        label _breakLabel[177236]
      }
    }
  }
  { scopeless type
    t
  }
  function doSearchNoEnc[177305](const  ref arg x[177302] :
  unknown t[177300], arg needle[177308] :
  t, arg region[177315] :
  (177314 call range ?[260]), param arg count[177319] :
  bool[10], param arg fromLeft[177324] :
  bool[10] =
  1) : _unknown[51]
  {
    (177348 call assertArgType t "doSearch")
    { scopeless
      unknown ret[177355](177353 call - 1) int[13]
      (177358 'end of statement')
    }
    { scopeless
      const tmp[177759] "const" "temp"
      (177761 'move' tmp[177759](177757 'deref'(177369 'chpl_on_locale_num'(177368 call chpl_buildLocaleID(177363 call . x c"locale_id") c_sublocid_any))))
      {
        {
          { scopeless
            unknown localRet[177374](177372 call - 2) int[13]
            (177377 'end of statement')
          }
          { scopeless
            const nLen[177383] "const"(177380 call . needle c"buffLen")
            (177386 'end of statement')
          }
          { scopeless
            const tmp[177397] "const" "temp"(177396 call getView x region)
            (177401 call _check_tuple_var_decl tmp[177397] 2)
            const view[177387] "const"(177398 call tmp[177397] 0)
            (177406 'end of statement')
          }
          { scopeless
            const xLen[177411] "const"(177408 call . view c"size")
            (177414 'end of statement')
          }
          if(177473 call _cond_test count)
          {
            if(177429 call _cond_test(177418 call == nLen 0))
            {
              (177425 call = localRet(177422 call . view c"size"))
            }
          }
          {
            if(177468 call _cond_test(177436 call == nLen 0))
            {
              if(177463 call _cond_test fromLeft)
              {
                (177443 call = localRet(177441 call - 1))
              }
              {
                (177459 call = localRet(177456 IfExpr (177450 call == xLen 0) then
                { scopeless
                  (177453 call - 1)
                } else
                { scopeless
                  xLen
                } ))
              }
            }
          }
          if(177489 call _cond_test(177479 call > nLen xLen))
          {
            (177485 call = localRet(177483 call - 1))
          }
          if(177737 call _cond_test(177497 call == localRet(177495 call - 2)))
          {
            (177503 call = localRet(177501 call - 1))
            { scopeless
              const localNeedle[177513] "const"(177512 call(177508 call . needle c"localize"))
              (177516 'end of statement')
            }
            { scopeless
              const needleLen[177521] "const"(177518 call . localNeedle c"buffLen")
              (177524 'end of statement')
            }
            { scopeless
              const numPossible[177532] "const"(177530 call +(177527 call - xLen nLen) 1)
              (177535 'end of statement')
            }
            { scopeless
              const searchSpace[177557] "const"(177554 IfExpr  fromLeft then
              { scopeless
                (177541 call #(177538 call chpl_build_low_bounded_range 0) numPossible)
              } else
              { scopeless
                (177552 call chpl_by(177547 call #(177544 call chpl_build_low_bounded_range 0) numPossible)(177550 call - 1))
              } )
              (177560 'end of statement')
            }
            {
              unknown _indexOfInterest[177704] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[177705] "expr temp" "temp"
              (177714 'move' _iterator[177705](177712 call _getIterator searchSpace))
              Defer
              {
                {
                  (177730 call _freeIterator _iterator[177705])
                }
              }
              { scopeless type
                (177719 'move' _indexOfInterest[177704](177716 call iteratorIndex _iterator[177705]))
              }
              ForLoop[177706]
              {
                unknown i[177723] "index var" "insert auto destroy"
                (177725 'move' i[177723] _indexOfInterest[177704])
                {
                  {
                    unknown _indexOfInterest[177644] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[177645] "expr temp" "temp"
                    (177654 'move' _iterator[177645](177652 call _getIterator(177661 call chpl_direct_counted_range_iter 0 nLen)))
                    Defer
                    {
                      {
                        (177677 call _freeIterator _iterator[177645])
                      }
                    }
                    { scopeless type
                      (177666 'move' _indexOfInterest[177644](177663 call iteratorIndex _iterator[177645]))
                    }
                    ForLoop[177646]
                    {
                      unknown j[177670] "index var" "insert auto destroy"
                      (177672 'move' j[177670] _indexOfInterest[177644])
                      {
                        { scopeless
                          const idx[177580] "const"(177579 call(177571 call . view c"orderToIndex")(177576 call + i j))
                          (177583 'end of statement')
                        }
                        if(177604 call _cond_test(177599 call !=(177591 call(177586 call . x c"buff") idx)(177598 call(177593 call . localNeedle c"buff") j)))
                        {
                          { scopeless
                            break nil[44]
                          }
                        }
                        if(177640 call _cond_test(177614 call == j(177612 call - nLen 1)))
                        {
                          if(177635 call _cond_test count)
                          {
                            (177619 call += localRet 1)
                          }
                          {
                            (177631 call = localRet(177630 call(177625 call . view c"orderToIndex") i))
                          }
                        }
                      }
                      label _continueLabel[177649]
                      _indexOfInterest[177644]
                      _iterator[177645]
                    }
                    label _breakLabel[177650]
                  }
                  if(177699 call _cond_test(177694 call &&(177686 call ! count)(177692 call != localRet(177690 call - 1))))
                  {
                    { scopeless
                      break nil[44]
                    }
                  }
                }
                label _continueLabel[177709]
                _indexOfInterest[177704]
                _iterator[177705]
              }
              label _breakLabel[177710]
            }
          }
          if(177747 call _cond_test count)
          {
            { scopeless
              (177744 call += localRet 1)
            }
          }
          (177754 call = ret localRet)
        }
        (177764 'on block' 0 tmp[177759])
      }
    }
    (177768 return ret)
  }
  function startsEndsWith[177779](const  ref arg x[177776] :
  unknown t[177774], arg needles[177781]:_any[178](?), param arg fromLeft[177784] :
  bool[10]) : _unknown[51] "inline" "no doc"
  {
    (177822 call assertArgType t "startsEndsWith")
    { scopeless
      unknown ret[177827] 0 bool[10]
      (177830 'end of statement')
    }
    { scopeless
      const tmp[178007] "const" "temp"
      (178009 'move' tmp[178007](178005 'deref'(177841 'chpl_on_locale_num'(177840 call chpl_buildLocaleID(177835 call . x c"locale_id") c_sublocid_any))))
      {
        {
          {
            unknown _indexOfInterest[177971] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[177972] "expr temp" "temp"
            (177981 'move' _iterator[177972](177979 call _getIterator needles))
            Defer
            {
              {
                (177997 call _freeIterator _iterator[177972])
              }
            }
            { scopeless type
              (177986 'move' _indexOfInterest[177971](177983 call iteratorIndex _iterator[177972]))
            }
            ForLoop[177973]
            {
              unknown needle[177990] "index var" "insert auto destroy"
              (177992 'move' needle[177990] _indexOfInterest[177971])
              {
                { scopeless
                  const needleLen[177848] "const"(177845 call . needle c"buffLen")
                  (177851 'end of statement')
                }
                if(177866 call _cond_test(177855 call == needleLen 0))
                {
                  (177859 call = ret 1)
                  break nil[44]
                }
                if(177880 call _cond_test(177875 call > needleLen(177872 call . x c"buffLen")))
                {
                  { scopeless
                    continue nil[44]
                  }
                }
                { scopeless
                  const localNeedle[177891] "const"(177890 call(177886 call . needle c"localize"))
                  (177894 'end of statement')
                }
                if(177955 call _cond_test fromLeft)
                {
                  (177916 call = ret(177915 call bufferEqualsLocal(buf1 =(177899 call . x c"buff"))(off1 = 0)(buf2 =(177907 call . localNeedle c"buff"))(off2 = 0)(len = needleLen)))
                }
                {
                  { scopeless
                    unknown offset[177927](177925 call -(177921 call . x c"buffLen") needleLen)
                    (177930 'end of statement')
                  }
                  (177952 call = ret(177951 call bufferEqualsLocal(buf1 =(177935 call . x c"buff"))(off1 = offset)(buf2 =(177943 call . localNeedle c"buff"))(off2 = 0)(len = needleLen)))
                }
                if(177966 call _cond_test(177961 call == ret 1))
                {
                  { scopeless
                    break nil[44]
                  }
                }
              }
              label _continueLabel[177976]
              _indexOfInterest[177971]
              _iterator[177972]
            }
            label _breakLabel[177977]
          }
        }
        (178012 'on block' 0 tmp[178007])
      }
    }
    (178016 return ret)
  }
  where {
    (177800 call &&(177791 call isHomogeneousTuple needles)(177798 call ==(177796 'typeof'(177795 call needles 0)) t))
  }
  { scopeless type
    bool[10]
  }
  function doJoinIterator[178029](const  ref arg x[178026] :
  unknown t[178024], arg ir[178032] :
  _iteratorRecord) : _unknown[51]
  {
    (178056 call assertArgType t "doJoinIterator")
    { scopeless
      unknown s[178060] t
      (178063 'end of statement')
    }
    { scopeless
      unknown first[178066] 1 bool[10]
      (178069 'end of statement')
    }
    {
      unknown _indexOfInterest[178095] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[178096] "expr temp" "temp"
      (178105 'move' _iterator[178096](178103 call _getIterator ir))
      Defer
      {
        {
          (178121 call _freeIterator _iterator[178096])
        }
      }
      { scopeless type
        (178110 'move' _indexOfInterest[178095](178107 call iteratorIndex _iterator[178096]))
      }
      ForLoop[178097]
      {
        unknown i[178114] "index var" "insert auto destroy"
        (178116 'move' i[178114] _indexOfInterest[178095])
        {
          if(178083 call _cond_test first)
          {
            { scopeless
              (178075 call = first 0)
            }
          }
          {
            { scopeless
              (178080 call += s x)
            }
          }
          (178092 call += s i)
        }
        label _continueLabel[178100]
        _indexOfInterest[178095]
        _iterator[178096]
      }
      label _breakLabel[178101]
    }
    (178129 return s)
  }
  { scopeless type
    t
  }
  function doJoin[178141](const  ref arg x[178138] :
  unknown t[178136], const  ref arg S[178143]:_any[178](?)) : _unknown[51]
  {
    (178176 call assertArgType t "doJoin")
    if(178598 call _cond_test(178184 call ==(178180 call . S c"size") 0))
    {
      (178206 return(178204 call _cast t ""))
    }
    {
      { scopeless
        if(178594 call _cond_test(178214 call ==(178210 call . S c"size") 1))
        {
          { scopeless
            unknown ret[178217] t
            (178220 'end of statement')
          }
          if(178250 call _cond_test(178225 call isArray S))
          {
            (178237 call = ret(178236 call S(178232 call .(178229 call . S c"_dom") c"first")))
          }
          {
            (178246 call = ret(178245 call S 0))
          }
          (178255 return ret)
        }
        {
          { scopeless
            unknown joinedSize[178271](178269 call *(178259 call . x c"buffLen")(178267 call -(178263 call . S c"size") 1)) int[13]
            (178274 'end of statement')
          }
          {
            unknown _indexOfInterest[178286] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[178287] "expr temp" "temp"
            (178296 'move' _iterator[178287](178294 call _getIterator S))
            Defer
            {
              {
                (178312 call _freeIterator _iterator[178287])
              }
            }
            { scopeless type
              (178301 'move' _indexOfInterest[178286](178298 call iteratorIndex _iterator[178287]))
            }
            ForLoop[178288]
            {
              unknown s[178305] "index var" "insert auto destroy"
              (178307 'move' s[178305] _indexOfInterest[178286])
              { scopeless
                (178283 call += joinedSize(178280 call . s c"numBytes"))
              }
              label _continueLabel[178291]
              _indexOfInterest[178286]
              _iterator[178287]
            }
            label _breakLabel[178292]
          }
          { scopeless
            unknown numCodepoints[178320] 0
            (178323 'end of statement')
          }
          if(178350 call _cond_test(178326 call == joinedSize 0))
          {
            { scopeless
              (178348 return(178346 call _cast t ""))
            }
          }
          { scopeless
            unknown tmp[178367] "temp"(178366 call bufferAlloc(178363 call + joinedSize 1))
            (178374 call _check_tuple_var_decl tmp[178367] 2)
            unknown newBuff[178355](178368 call tmp[178367] 0)
            unknown allocSize[178357](178371 call tmp[178367] 1)
            (178379 'end of statement')
          }
          { scopeless
            unknown first[178381] 1
            (178384 'end of statement')
          }
          { scopeless
            unknown offset[178386] 0
            (178389 'end of statement')
          }
          {
            unknown _indexOfInterest[178519] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[178520] "expr temp" "temp"
            (178529 'move' _iterator[178520](178527 call _getIterator S))
            Defer
            {
              {
                (178545 call _freeIterator _iterator[178520])
              }
            }
            { scopeless type
              (178534 'move' _indexOfInterest[178519](178531 call iteratorIndex _iterator[178520]))
            }
            ForLoop[178521]
            {
              unknown s[178538] "index var" "insert auto destroy"
              (178540 'move' s[178538] _indexOfInterest[178519])
              {
                { scopeless
                  const sLen[178396] "const"(178393 call . s c"buffLen")
                  (178399 'end of statement')
                }
                if(178463 call _cond_test first)
                {
                  (178404 call = first 0)
                }
                {
                  { scopeless
                    if(178459 call _cond_test(178413 call !=(178409 call . x c"buffLen") 0))
                    {
                      (178431 call bufferMemcpyLocal(dst = newBuff)(src =(178420 call . x c"buff"))(len =(178425 call . x c"buffLen"))(dst_off = offset))
                      (178439 call += offset(178436 call . x c"buffLen"))
                      if(178454 call _cond_test(178444 call == t string[26]))
                      {
                        { scopeless
                          (178451 call += numCodepoints(178448 call . x c"numCodepoints"))
                        }
                      }
                    }
                  }
                }
                if(178515 call _cond_test(178470 call != sLen 0))
                {
                  (178490 call bufferMemcpy(dst = newBuff)(dst_off = offset)(src_loc =(178479 call . s c"locale_id"))(src =(178484 call . s c"buff"))(len = sLen))
                  (178495 call += offset sLen)
                  if(178510 call _cond_test(178500 call == t string[26]))
                  {
                    { scopeless
                      (178507 call += numCodepoints(178504 call . s c"numCodepoints"))
                    }
                  }
                }
              }
              label _continueLabel[178524]
              _indexOfInterest[178519]
              _iterator[178520]
            }
            label _breakLabel[178525]
          }
          (178557 call =(178555 call newBuff joinedSize) 0)
          if(178590 call _cond_test(178562 call == t string[26]))
          {
            (178575 return(178574 call chpl_createStringWithOwnedBufferNV(x = newBuff)(length = joinedSize)(size = allocSize)(numCodepoints = numCodepoints)))
          }
          {
            (178587 return(178586 call createBytesWithOwnedBuffer(x = newBuff)(length = joinedSize)(size = allocSize)))
          }
        }
      }
    }
  }
  where {
    (178154 call ||(178149 call isTuple S)(178153 call isArray S))
  }
  { scopeless type
    t
  }
  function doPartition[178614](const  ref arg x[178611] :
  unknown t[178609], arg sep[178617] :
  t) : _unknown[51]
  {
    (178644 call assertArgType t "doPartition")
    { scopeless
      const idx[178654] "const"(178653 call(178648 call . x c"find") sep)
      (178657 'end of statement')
    }
    if(178739 call _cond_test(178662 call != idx(178660 call - 1)))
    {
      (178689 return(178687 call _build_tuple(178672 call x(178669 call chpl_build_high_bounded_range(178667 call - idx 1))) sep(178686 call x(178683 call chpl_build_low_bounded_range(178681 call + idx(178678 call . sep c"numBytes"))))))
    }
    {
      (178736 return(178734 call _build_tuple x(178711 call _cast t "")(178732 call _cast t "")))
    }
  }
  { scopeless type
    (178622 call * 3 t)
  }
  function doAppend[178753](ref arg lhs[178750] :
  unknown t[178748], const  ref arg rhs[178756] :
  t) : _unknown[51]
  {
    (178779 call assertArgType t "doAppend")
    if(178791 call _cond_test(178787 call ==(178783 call . rhs c"buffLen") 0))
    {
      { scopeless
        (178789 return)
      }
    }
    { scopeless
      const tmp[179075] "const" "temp"
      (179077 'move' tmp[179075](179073 'deref'(178806 'chpl_on_locale_num'(178805 call chpl_buildLocaleID(178800 call . lhs c"locale_id") c_sublocid_any))))
      {
        {
          if(178841 call _cond_test(178818 call !(178817 call safeAdd(178809 call . lhs c"buffLen")(178814 call . rhs c"buffLen"))))
          {
            { scopeless
              (178839 call halt "Buffer overflow allocating string copy data")
            }
          }
          { scopeless
            const newLength[178857] "const"(178855 call +(178848 call . lhs c"buffLen")(178852 call . rhs c"buffLen"))
            (178860 'end of statement')
          }
          if(179003 call _cond_test(178866 call <=(178862 call . lhs c"buffSize") newLength))
          {
            { scopeless
              const requestedSize[178885] "const"(178884 call max(178871 call + newLength 1)(178882 call _cast int[13](178879 call *(178875 call . lhs c"buffLen") chpl_stringGrowthFactor)))
              (178888 'end of statement')
            }
            if(178999 call _cond_test(178891 call . lhs c"isOwned"))
            {
              { scopeless
                unknown tmp[178907] "temp"(178906 call bufferRealloc(178901 call . lhs c"buff") requestedSize)
                (178914 call _check_tuple_var_decl tmp[178907] 2)
                unknown newBuff[178894](178908 call tmp[178907] 0)
                unknown allocSize[178896](178911 call tmp[178907] 1)
                (178919 'end of statement')
              }
              (178926 call =(178922 call . lhs c"buff") newBuff)
              (178934 call =(178930 call . lhs c"buffSize") allocSize)
            }
            {
              { scopeless
                unknown tmp[178946] "temp"(178945 call bufferAlloc requestedSize)
                (178953 call _check_tuple_var_decl tmp[178946] 2)
                unknown newBuff[178937](178947 call tmp[178946] 0)
                unknown allocSize[178939](178950 call tmp[178946] 1)
                (178958 'end of statement')
              }
              (178973 call bufferMemcpyLocal(dst = newBuff)(src =(178965 call . lhs c"buff"))(178970 call . lhs c"buffLen"))
              (178980 call =(178976 call . lhs c"buff") newBuff)
              (178988 call =(178984 call . lhs c"buffSize") allocSize)
              (178996 call =(178992 call . lhs c"isOwned") 1)
            }
          }
          (179032 call bufferMemcpy(dst =(179009 call . lhs c"buff"))(src_loc =(179015 call . rhs c"locale_id"))(179020 call . rhs c"buff")(179024 call . rhs c"buffLen")(dst_off =(179028 call . lhs c"buffLen")))
          (179039 call =(179035 call . lhs c"buffLen") newLength)
          (179050 call =(179048 call(179043 call . lhs c"buff") newLength) 0)
          if(179068 call _cond_test(179055 call == t string[26]))
          {
            { scopeless
              (179065 call +=(179058 call . lhs c"cachedNumCodepoints")(179062 call . rhs c"cachedNumCodepoints"))
            }
          }
        }
        (179080 'on block' 0 tmp[179075])
      }
    }
  }
  function reinitWithNewBuffer[179092](ref arg lhs[179089] :
  unknown t[179087], arg buff[179095] :
  bufferType, arg buffLen[179099] :
  int[13], arg buffSize[179103] :
  int[13], arg numCodepoints[179108] :
  int[13] =
  0) : _unknown[51]
  {
    if(179126 call _cond_test(179122 call &&(179117 call(179113 call . lhs c"isEmpty"))(179120 call == buff nil[44])))
    {
      { scopeless
        (179124 return)
      }
    }
    if(179301 call _cond_test(179134 call != buffLen 0))
    {
      if(179231 call _cond_test(179152 call ||(179140 call !(179137 call . lhs c"isOwned"))(179150 call >(179144 call + buffLen 1)(179147 call . lhs c"buffSize"))))
      {
        if(179176 call _cond_test(179166 call &&(179155 call . lhs c"isOwned")(179164 call !(179163 call(179159 call . lhs c"isEmpty")))))
        {
          { scopeless
            (179174 call bufferFree(179170 call . lhs c"buff"))
          }
        }
        { scopeless
          const tmp[179194] "const" "temp"(179193 call bufferAlloc(179190 call + buffLen 1))
          (179201 call _check_tuple_var_decl tmp[179194] 2)
          const buff[179182] "const"(179195 call tmp[179194] 0)
          const allocSize[179184] "const"(179198 call tmp[179194] 1)
          (179206 'end of statement')
        }
        (179212 call =(179208 call . lhs c"buff") buff)
        (179220 call =(179216 call . lhs c"buffSize") allocSize)
        (179228 call =(179224 call . lhs c"isOwned") 1)
      }
      (179244 call bufferMemmoveLocal(179238 call . lhs c"buff") buff buffLen)
      (179254 call =(179252 call(179247 call . lhs c"buff") buffLen) 0)
    }
    {
      if(179279 call _cond_test(179269 call &&(179258 call . lhs c"isOwned")(179267 call !(179266 call(179262 call . lhs c"isEmpty")))))
      {
        { scopeless
          (179277 call bufferFree(179273 call . lhs c"buff"))
        }
      }
      (179290 call =(179286 call . lhs c"buffSize") 0)
      (179298 call =(179294 call . lhs c"buff") nil[44])
    }
    (179310 call =(179306 call . lhs c"buffLen") buffLen)
    if(179325 call _cond_test(179315 call == t string[26]))
    {
      { scopeless
        (179322 call =(179318 call . lhs c"cachedNumCodepoints") numCodepoints)
      }
    }
  }
  function reinitWithOwnedBuffer[179339](ref arg lhs[179336] :
  unknown t[179334], arg buff[179342] :
  bufferType, arg buffLen[179346] :
  int[13], arg buffSize[179350] :
  int[13], arg numCodepoints[179355] :
  int[13] =
  0) : _unknown[51]
  {
    if(179373 call _cond_test(179369 call &&(179364 call(179360 call . lhs c"isEmpty"))(179367 call == buff nil[44])))
    {
      { scopeless
        (179371 return)
      }
    }
    if(179471 call _cond_test(179381 call != buffLen 0))
    {
      if(179405 call _cond_test(179395 call &&(179384 call . lhs c"isOwned")(179393 call !(179392 call(179388 call . lhs c"isEmpty")))))
      {
        { scopeless
          (179403 call bufferFree(179399 call . lhs c"buff"))
        }
      }
      (179416 call =(179412 call . lhs c"buff") buff)
      (179424 call =(179420 call . lhs c"buffSize") buffSize)
    }
    {
      if(179449 call _cond_test(179439 call &&(179428 call . lhs c"isOwned")(179437 call !(179436 call(179432 call . lhs c"isEmpty")))))
      {
        { scopeless
          (179447 call bufferFree(179443 call . lhs c"buff"))
        }
      }
      (179460 call =(179456 call . lhs c"buff") buff)
      (179468 call =(179464 call . lhs c"buffSize") 0)
    }
    (179480 call =(179476 call . lhs c"isOwned") 1)
    (179488 call =(179484 call . lhs c"buffLen") buffLen)
    if(179503 call _cond_test(179493 call == t string[26]))
    {
      { scopeless
        (179500 call =(179496 call . lhs c"cachedNumCodepoints") numCodepoints)
      }
    }
  }
  function doAssign[179517](ref arg lhs[179514] :
  unknown t[179512], arg rhs[179520] :
  t) : _unknown[51]
  {
    (179543 call assertArgType t "doAssign")
    function helpMe[179552](ref arg lhs[179549] :
    t, arg rhs[179555] :
    t) : _unknown[51] "inline"
    {
      if(179693 call _cond_test(179566 call || _local(179564 call ==(179560 call . rhs c"locale_id") chpl_nodeID)))
      {
        if(179612 call _cond_test(179570 call == t string[26]))
        {
          (179591 call reinitWithNewBuffer lhs(179576 call . rhs c"buff")(179580 call . rhs c"buffLen")(179584 call . rhs c"buffSize")(179588 call . rhs c"numCodepoints"))
        }
        {
          (179609 call reinitWithNewBuffer lhs(179598 call . rhs c"buff")(179602 call . rhs c"buffLen")(179606 call . rhs c"buffSize"))
        }
      }
      {
        { scopeless
          const len[179621] "const"(179618 call . rhs c"buffLen")
          (179624 'end of statement')
        }
        { scopeless
          unknown remote_buf[179628] nil[44] bufferType
          (179631 'end of statement')
        }
        if(179652 call _cond_test(179634 call != len 0))
        {
          { scopeless
            (179649 call = remote_buf(179648 call bufferCopyRemote(179639 call . rhs c"locale_id")(179644 call . rhs c"buff") len))
          }
        }
        if(179689 call _cond_test(179659 call == t string[26]))
        {
          (179674 call reinitWithOwnedBuffer lhs remote_buf len(179668 call + len 1)(179671 call . rhs c"cachedNumCodepoints"))
        }
        {
          (179686 call reinitWithOwnedBuffer lhs remote_buf len(179684 call + len 1))
        }
      }
    }
    if(179746 call _cond_test(179708 call || _local(179706 call ==(179702 call . lhs c"locale_id") chpl_nodeID)))
    {
      (179714 call helpMe lhs rhs)
    }
    {
      { scopeless
        const tmp[179737] "const" "temp"
        (179739 'move' tmp[179737](179735 'deref'(179727 'chpl_on_locale_num'(179726 call chpl_buildLocaleID(179721 call . lhs c"locale_id") c_sublocid_any))))
        {
          {
            (179732 call helpMe lhs rhs)
          }
          (179742 'on block' 0 tmp[179737])
        }
      }
    }
  }
  function doMultiply[179759](const  ref arg x[179756] :
  unknown t[179754], arg n[179762] :
  integral) : _unknown[51]
  {
    (179785 call assertArgType t "doMultiply")
    { scopeless
      const sLen[179792] "const"(179789 call . x c"numBytes")
      (179795 'end of statement')
    }
    if(179942 call _cond_test(179799 call isBytesType t))
    {
      if(179822 call _cond_test(179802 call <= n 0))
      {
        { scopeless
          (179820 return b"")
        }
      }
      if(179850 call _cond_test(179830 call == sLen 0))
      {
        { scopeless
          (179848 return b"")
        }
      }
    }
    {
      { scopeless
        if(179938 call _cond_test(179858 call isStringType t))
        {
          if(179882 call _cond_test(179861 call <= n 0))
          {
            { scopeless
              (179880 return "")
            }
          }
          if(179911 call _cond_test(179890 call == sLen 0))
          {
            { scopeless
              (179909 return "")
            }
          }
        }
        {
          (179935 call compilerError "Unexpected type")
        }
      }
    }
    if(179959 call _cond_test(179952 call !(179951 call safeMul sLen n)))
    {
      { scopeless
        (179957 call halt "Buffer overflow allocating string copy data")
      }
    }
    { scopeless
      const buffLen[179968] "const"(179966 call * sLen n)
      (179971 'end of statement')
    }
    { scopeless
      unknown tmp[179984] "temp"(179983 call bufferAlloc(179980 call + buffLen 1))
      (179991 call _check_tuple_var_decl tmp[179984] 2)
      unknown buff[179972](179985 call tmp[179984] 0)
      unknown allocSize[179974](179988 call tmp[179984] 1)
      (179996 'end of statement')
    }
    (180016 call bufferMemcpy(dst = buff)(src_loc =(180002 call . x c"locale_id"))(src =(180007 call . x c"buff"))(len =(180012 call . x c"buffLen")))
    { scopeless
      unknown offset[180019] sLen
      (180022 'end of statement')
    }
    {
      unknown _indexOfInterest[180052] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[180053] "expr temp" "temp"
      (180062 'move' _iterator[180053](180060 call _getIterator(180070 call chpl_direct_range_iter 1(180067 call - n 1) 1)))
      Defer
      {
        {
          (180086 call _freeIterator _iterator[180053])
        }
      }
      { scopeless type
        (180075 'move' _indexOfInterest[180052](180072 call iteratorIndex _iterator[180053]))
      }
      ForLoop[180054]
      {
        unknown i[180079] "index var" "insert auto destroy"
        (180081 'move' i[180079] _indexOfInterest[180052])
        {
          (180044 call bufferMemcpyLocal(dst = buff)(src = buff)(len =(180038 call . x c"buffLen"))(dst_off = offset))
          (180049 call += offset sLen)
        }
        label _continueLabel[180057]
        _indexOfInterest[180052]
        _iterator[180053]
      }
      label _breakLabel[180058]
    }
    (180098 call =(180096 call buff buffLen) 0)
    if(180130 call _cond_test(180103 call == t string[26]))
    {
      (180118 return(180117 call chpl_createStringWithOwnedBufferNV buff buffLen allocSize(180115 call *(180111 call . x c"cachedNumCodepoints") n)))
    }
    {
      (180127 return(180126 call createBytesWithOwnedBuffer buff buffLen allocSize))
    }
  }
  function doConcat[180143](arg s0[180140] :
  unknown t[180138], arg s1[180146] :
  t) : _unknown[51]
  {
    (180170 call assertArgType t "doConcat")
    { scopeless
      const s0len[180177] "const"(180174 call . s0 c"buffLen")
      (180180 'end of statement')
    }
    if(180191 call _cond_test(180183 call == s0len 0))
    {
      { scopeless
        (180189 return(180187 call _cast t s1))
      }
    }
    { scopeless
      const s1len[180200] "const"(180197 call . s1 c"buffLen")
      (180203 'end of statement')
    }
    if(180211 call _cond_test(180206 call == s1len 0))
    {
      { scopeless
        (180209 return s0)
      }
    }
    { scopeless
      const buffLen[180220] "const"(180218 call + s0len s1len)
      (180223 'end of statement')
    }
    { scopeless
      unknown tmp[180236] "temp"(180235 call bufferAlloc(180232 call + buffLen 1))
      (180243 call _check_tuple_var_decl tmp[180236] 2)
      unknown buff[180224](180237 call tmp[180236] 0)
      unknown buffSize[180226](180240 call tmp[180236] 1)
      (180248 'end of statement')
    }
    (180265 call bufferMemcpy(dst = buff)(src_loc =(180254 call . s0 c"locale_id"))(src =(180259 call . s0 c"buff"))(len = s0len))
    (180285 call bufferMemcpy(dst = buff)(src_loc =(180272 call . s1 c"locale_id"))(src =(180277 call . s1 c"buff"))(len = s1len)(dst_off = s0len))
    (180292 call =(180290 call buff buffLen) 0)
    { scopeless
      unknown ret[180296] t
      (180299 'end of statement')
    }
    if(180322 call _cond_test(180302 call == t string[26]))
    {
      (180318 call =(180305 call . ret c"cachedNumCodepoints")(180316 call +(180309 call . s0 c"cachedNumCodepoints")(180313 call . s1 c"cachedNumCodepoints")))
    }
    (180332 call initWithOwnedBuffer ret buff buffLen buffSize)
    (180335 return ret)
  }
  { scopeless type
    t
  }
  function doStripNoEnc[180347](const  ref arg x[180344] :
  unknown t[180342], arg chars[180350] :
  t, arg leading[180354] :
  bool[10], arg trailing[180358] :
  bool[10]) : _unknown[51]
  {
    if(180410 call _cond_test(180367 call(180363 call . x c"isEmpty")))
    {
      { scopeless
        (180408 return(180405 IfExpr (180370 call == t string[26]) then
        { scopeless
          ""
        } else
        { scopeless
          b""
        } ))
      }
    }
    if(180425 call _cond_test(180421 call(180417 call . chars c"isEmpty")))
    {
      { scopeless
        (180423 return x)
      }
    }
    { scopeless
      const localX[180437] "const"(180436 call(180432 call . x c"localize")) t
      (180440 'end of statement')
    }
    { scopeless
      const localChars[180448] "const"(180447 call(180443 call . chars c"localize")) t
      (180451 'end of statement')
    }
    { scopeless
      unknown start[180454] 0 idxType
      (180457 'end of statement')
    }
    { scopeless
      unknown end[180466](180464 call -(180460 call . localX c"buffLen") 1) idxType
      (180469 'end of statement')
    }
    if(180614 call _cond_test leading)
    {
      {
        unknown _indexOfInterest[180552] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[180553] "expr temp" "temp"
        (180576 'move' _iterator[180553](180486 call _build_tuple(180565 call _getIterator(180562 call . x c"indices"))(180573 call _getIterator(180572 call(180569 call . localX c"chpl_bytes")))))
        Defer
        {
          {
            (180606 call _freeIterator _iterator[180553])
          }
        }
        { scopeless type
          (180581 'move' _indexOfInterest[180552](180578 call iteratorIndex _iterator[180553]))
        }
        ForLoop[180554]
        {
          (180586 call _check_tuple_var_decl _indexOfInterest[180552] 2)
          unknown i[180592] "index var" "insert auto destroy"
          (180594 'move' i[180592](180590 call _indexOfInterest[180552] 0))
          unknown xChar[180599] "index var" "insert auto destroy"
          (180601 'move' xChar[180599](180597 call _indexOfInterest[180552] 1))
          {
            {
              unknown _indexOfInterest[180514] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[180515] "expr temp" "temp"
              (180524 'move' _iterator[180515](180522 call _getIterator(180492 call(180489 call . localChars c"chpl_bytes"))))
              Defer
              {
                {
                  (180541 call _freeIterator _iterator[180515])
                }
              }
              { scopeless type
                (180530 'move' _indexOfInterest[180514](180527 call iteratorIndex _iterator[180515]))
              }
              ForLoop[180516]
              {
                unknown removeChar[180534] "index var" "insert auto destroy"
                (180536 'move' removeChar[180534] _indexOfInterest[180514])
                {
                  if(180509 call _cond_test(180495 call == xChar removeChar))
                  {
                    (180502 call = start(180500 call + i 1))
                    continue outer
                  }
                }
                label _continueLabel[180519]
                _indexOfInterest[180514]
                _iterator[180515]
              }
              label _breakLabel[180520]
            }
            break nil[44]
          }
          label _continueLabel[180557]
          _indexOfInterest[180552]
          _iterator[180553]
        }
        label _breakLabel[180558]
      }
    }
    if(180763 call _cond_test trailing)
    {
      (180623 call = end(180621 call - 1))
      {
        unknown _indexOfInterest[180702] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[180703] "expr temp" "temp"
        (180726 'move' _iterator[180703](180642 call _build_tuple(180715 call _getIterator(180712 call . x c"indices"))(180723 call _getIterator(180722 call(180719 call . localX c"chpl_bytes")))))
        Defer
        {
          {
            (180756 call _freeIterator _iterator[180703])
          }
        }
        { scopeless type
          (180731 'move' _indexOfInterest[180702](180728 call iteratorIndex _iterator[180703]))
        }
        ForLoop[180704]
        {
          (180736 call _check_tuple_var_decl _indexOfInterest[180702] 2)
          unknown i[180742] "index var" "insert auto destroy"
          (180744 'move' i[180742](180740 call _indexOfInterest[180702] 0))
          unknown xChar[180749] "index var" "insert auto destroy"
          (180751 'move' xChar[180749](180747 call _indexOfInterest[180702] 1))
          {
            {
              unknown _indexOfInterest[180662] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[180663] "expr temp" "temp"
              (180672 'move' _iterator[180663](180670 call _getIterator(180648 call(180645 call . localChars c"chpl_bytes"))))
              Defer
              {
                {
                  (180689 call _freeIterator _iterator[180663])
                }
              }
              { scopeless type
                (180678 'move' _indexOfInterest[180662](180675 call iteratorIndex _iterator[180663]))
              }
              ForLoop[180664]
              {
                unknown removeChar[180682] "index var" "insert auto destroy"
                (180684 'move' removeChar[180682] _indexOfInterest[180662])
                {
                  if(180657 call _cond_test(180651 call == xChar removeChar))
                  {
                    continue outer
                  }
                }
                label _continueLabel[180667]
                _indexOfInterest[180662]
                _iterator[180663]
              }
              label _breakLabel[180668]
            }
            (180699 call = end i)
          }
          label _continueLabel[180707]
          _indexOfInterest[180702]
          _iterator[180703]
        }
        label _breakLabel[180708]
      }
    }
    (180774 return(180773 call localX(180770 call chpl_build_bounded_range start end)))
  }
  { scopeless type
    t
  }
  function doEq[180786](arg a[180783] :
  unknown t1[180781], arg b[180790] :
  unknown t2[180788]) : _unknown[51] "inline"
  {
    (180813 call assertArgType t1 "doEq")
    (180820 call assertArgType t2 "doEq")
    (180852 return(180850 call ==(180848 call _strcmp(180824 call . a c"buff")(180829 call . a c"buffLen")(180833 call . a c"locale_id")(180837 call . b c"buff")(180841 call . b c"buffLen")(180845 call . b c"locale_id")) 0))
  }
  function doLessThan[180863](arg a[180860] :
  unknown t1[180858], arg b[180867] :
  unknown t2[180865]) : _unknown[51] "inline"
  {
    (180874 call assertArgType t1 "doEq")
    (180881 call assertArgType t2 "doEq")
    (180913 return(180911 call <(180909 call _strcmp(180885 call . a c"buff")(180890 call . a c"buffLen")(180894 call . a c"locale_id")(180898 call . b c"buff")(180902 call . b c"buffLen")(180906 call . b c"locale_id")) 0))
  }
  function doGreaterThan[180924](arg a[180921] :
  unknown t1[180919], arg b[180928] :
  unknown t2[180926]) : _unknown[51] "inline"
  {
    (180935 call assertArgType t1 "doEq")
    (180942 call assertArgType t2 "doEq")
    (180974 return(180972 call >(180970 call _strcmp(180946 call . a c"buff")(180951 call . a c"buffLen")(180955 call . a c"locale_id")(180959 call . b c"buff")(180963 call . b c"buffLen")(180967 call . b c"locale_id")) 0))
  }
  function doLessThanOrEq[180985](arg a[180982] :
  unknown t1[180980], arg b[180989] :
  unknown t2[180987]) : _unknown[51] "inline"
  {
    (180996 call assertArgType t1 "doEq")
    (181003 call assertArgType t2 "doEq")
    (181035 return(181033 call <=(181031 call _strcmp(181007 call . a c"buff")(181012 call . a c"buffLen")(181016 call . a c"locale_id")(181020 call . b c"buff")(181024 call . b c"buffLen")(181028 call . b c"locale_id")) 0))
  }
  function doGreaterThanOrEq[181046](arg a[181043] :
  unknown t1[181041], arg b[181050] :
  unknown t2[181048]) : _unknown[51] "inline"
  {
    (181057 call assertArgType t1 "doEq")
    (181064 call assertArgType t2 "doEq")
    (181096 return(181094 call >=(181092 call _strcmp(181068 call . a c"buff")(181073 call . a c"buffLen")(181077 call . a c"locale_id")(181081 call . b c"buff")(181085 call . b c"buffLen")(181089 call . b c"locale_id")) 0))
  }
  function getHash[181107](arg x[181104] :
  unknown t[181102]) : _unknown[51] "inline"
  {
    (181129 call assertArgType t "getHash")
    { scopeless
      unknown hash[181136](181135 call int[13] 64)
      (181139 'end of statement')
    }
    { scopeless
      const tmp[181244] "const" "temp"
      (181246 'move' tmp[181244](181242 'deref'(181150 'chpl_on_locale_num'(181149 call chpl_buildLocaleID(181144 call . x c"locale_id") c_sublocid_any))))
      {
        {
          { scopeless
            unknown locHash[181158] 5381(181154 call int[13] 64)
            (181161 'end of statement')
          }
          {
            unknown _indexOfInterest[181194] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[181195] "expr temp" "temp"
            (181204 'move' _iterator[181195](181202 call _getIterator(181214 call chpl_direct_counted_range_iter 0(181210 call . x c"numBytes"))))
            Defer
            {
              {
                (181230 call _freeIterator _iterator[181195])
              }
            }
            { scopeless type
              (181219 'move' _indexOfInterest[181194](181216 call iteratorIndex _iterator[181195]))
            }
            ForLoop[181196]
            {
              unknown c[181223] "index var" "insert auto destroy"
              (181225 'move' c[181223] _indexOfInterest[181194])
              {
                (181190 call = locHash(181188 call ^(181179 call +(181176 call << locHash 5) locHash)(181187 call(181182 call . x c"buff") c)))
              }
              label _continueLabel[181199]
              _indexOfInterest[181194]
              _iterator[181195]
            }
            label _breakLabel[181200]
          }
          (181239 call = hash locHash)
        }
        (181249 'on block' 0 tmp[181244])
      }
    }
    (181256 return(181254 call _cast uint[115] hash))
  }
  function incrementCodepoints[181266](ref arg lhs[181263] :
  string[26], arg rhs[181269] :
  string[26]) : _unknown[51] "private"
  {
    if(181321 call _cond_test(181290 call ||(181279 call ==(181273 call . lhs c"cachedNumCodepoints")(181277 call - 1))(181288 call ==(181282 call . rhs c"cachedNumCodepoints")(181286 call - 1))))
    {
      (181299 call =(181293 call . lhs c"cachedNumCodepoints")(181297 call - 1))
    }
    {
      (181317 call =(181304 call . lhs c"cachedNumCodepoints")(181315 call +(181308 call . lhs c"cachedNumCodepoints")(181312 call . rhs c"cachedNumCodepoints")))
    }
  }
  function countNumCodepoints[181334](arg x[181331] :
  string[26]) : _unknown[51]
  {
    { scopeless
      unknown ret[181337] int[13]
      (181340 'end of statement')
    }
    { scopeless
      const tmp[181371] "const" "temp"
      (181373 'move' tmp[181371](181369 'deref'(181352 'chpl_on_locale_num'(181351 call chpl_buildLocaleID(181346 call . x c"locale_id") c_sublocid_any))))
      {
        {
          (181365 call = ret(181364 call countNumCodepoints(181356 call . x c"buff")(181361 call . x c"buffLen")))
        }
        (181376 'on block' 0 tmp[181371])
      }
    }
    (181380 return ret)
  }
  function countNumCodepoints[181390](arg buff[181387] :
  bufferType, arg buffLen[181393] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown n[181397] 0
      (181400 'end of statement')
    }
    { scopeless
      unknown i[181403] 0
      (181406 'end of statement')
    }
    {
      unknown tmp[181487] "temp"
      (181511 'move' tmp[181487](181506 call _cond_test(181508 call < i buffLen)))
      WhileDo[181492]
      {
        {
          (181413 call += i 1)
          {
            unknown tmp[181437] "temp"
            (181479 'move' tmp[181437](181465 call _cond_test(181467 call &&(181469 call < i buffLen)(181473 call !(181475 call isInitialByte(181477 call buff i))))))
            WhileDo[181442]
            {
              { scopeless
                (181434 call += i 1)
              }
              label _continueLabel[181440]
              (181460 'move' tmp[181437](181446 call _cond_test(181448 call &&(181450 call < i buffLen)(181454 call !(181456 call isInitialByte(181458 call buff i))))))
              tmp[181437]
            }
            label _breakLabel[181441]
          }
          (181484 call += n 1)
        }
        label _continueLabel[181490]
        (181501 'move' tmp[181487](181496 call _cond_test(181498 call < i buffLen)))
        tmp[181487]
      }
      label _breakLabel[181491]
    }
    (181515 return n)
  }
  function isInitialByte[181528](arg b[181525] :
  (181524 call uint[115] 8)) : _unknown[51] "inline" "no doc"
  {
    (181540 return(181538 call !=(181535 call & b 192) 128))
  }
  { scopeless type
    bool[10]
  }
  (181564 'require' "ctype.h")
  function byte_isAscii[181572](arg c[181569] :
  byteType) : _unknown[51] "inline"
  {
    function isascii[181581](arg c[181578] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181598 return(181596 call !=(181594 call isascii(181591 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isWhitespace[181609](arg c[181606] :
  byteType) : _unknown[51] "inline"
  {
    function isspace[181618](arg c[181615] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181635 return(181633 call !=(181631 call isspace(181628 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isPrintable[181646](arg c[181643] :
  byteType) : _unknown[51] "inline"
  {
    function isprint[181655](arg c[181652] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181672 return(181670 call !=(181668 call isprint(181665 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isAlpha[181683](arg c[181680] :
  byteType) : _unknown[51] "inline"
  {
    function isalpha[181692](arg c[181689] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181709 return(181707 call !=(181705 call isalpha(181702 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isUpper[181720](arg c[181717] :
  byteType) : _unknown[51] "inline"
  {
    function isupper[181729](arg c[181726] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181746 return(181744 call !=(181742 call isupper(181739 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isLower[181757](arg c[181754] :
  byteType) : _unknown[51] "inline"
  {
    function islower[181766](arg c[181763] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181783 return(181781 call !=(181779 call islower(181776 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isDigit[181794](arg c[181791] :
  byteType) : _unknown[51] "inline"
  {
    function isdigit[181803](arg c[181800] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181820 return(181818 call !=(181816 call isdigit(181813 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isAlnum[181831](arg c[181828] :
  byteType) : _unknown[51] "inline"
  {
    function isalnum[181840](arg c[181837] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181857 return(181855 call !=(181853 call isalnum(181850 call _cast c_int c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_toUpper[181868](arg c[181865] :
  byteType) : _unknown[51] "inline"
  {
    function toupper[181877](arg c[181874] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181894 return(181892 call _cast byteType(181890 call toupper(181887 call _cast c_int c))))
  }
  { scopeless type
    byteType
  }
  function byte_toLower[181905](arg c[181902] :
  byteType) : _unknown[51] "inline"
  {
    function tolower[181914](arg c[181911] :
    c_int) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (181931 return(181929 call _cast byteType(181927 call tolower(181924 call _cast c_int c))))
  }
  { scopeless type
    byteType
  }
}