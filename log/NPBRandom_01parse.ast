AST dump for NPBRandom after pass parse.
Module use list: 

{
  (353179 'use' ChapelStandard)
  (314485 'use'(314482 call . super c"RandomSupport"))
  (314489 'use' ChapelLocks)
  type NPBRandomStream[315477](?) unknown eltType[314496] "type variable"(314495 call real[16] 64) const seed[314503] "const"(314502 call int[13] 64) unknown parSafe[314509] "param" 1 bool[10] function NPBRandomStream[315477](?).init[314522](arg _mt[315481]:_MT[238], arg this[315479]:NPBRandomStream[315477](?), arg eltType[314519]:_any[178](?) =
  (314518 call real[16] 64), arg seed[314532] :
  (314527 call int[13] 64) =
  (314529 call . SeedGenerator c"oddCurrentTime"), param arg parSafe[314538] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    (314543 'use' HaltWrappers)
    (314551 call =(314547 call . this c"eltType") eltType)
    { scopeless
      unknown one[314559] 1(314557 call uint[115] 64)
      (314562 'end of statement')
    }
    { scopeless
      unknown two_46[314571](314569 call << one 46)(314566 call uint[115] 64)
      (314574 'end of statement')
    }
    { scopeless
      unknown two_46_mask[314583](314581 call - two_46 1)(314578 call uint[115] 64)
      (314586 'end of statement')
    }
    { scopeless
      unknown useed[314594](314592 call _cast(314591 call uint[115] 64) seed)
      (314597 'end of statement')
    }
    { scopeless
      unknown mod[314602](314601 call uint[115] 64)
      (314605 'end of statement')
    }
    if(314639 call _cond_test(314611 call ==(314608 call % useed 2) 0))
    {
      { scopeless
        (314637 call(314616 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer")
      }
    }
    (314649 call = mod(314647 call & useed two_46_mask))
    (314663 call =(314653 call . this c"seed")(314661 call _cast(314660 call int[13] 64) mod))
    (314671 call =(314667 call . this c"parSafe") parSafe)
    (314679 call(314675 call . this c"complete"))
    if(314739 call _cond_test(314713 call ||(314698 call ||(314689 call ==(314686 call %(314682 call . this c"seed") 2) 0)(314696 call <(314692 call . this c"seed") 1))(314711 call >(314701 call . this c"seed")(314709 call _cast(314708 call int[13] 64) two_46))))
    {
      { scopeless
        (314737 call(314716 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer between 0 and 2**46")
      }
    }
    (314746 call = NPBRandomStreamPrivate_cursor seed)
    (314751 call = NPBRandomStreamPrivate_count 1)
    if(314793 call _cond_test(314768 call ||(314762 call ||(314756 call == eltType real[16])(314760 call == eltType imag[130]))(314766 call == eltType complex[140])))
    {
    }
    {
      (314790 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }
  } function NPBRandomStream[315477](?).NPBRandomStreamPrivate_getNext_noLock[314801](arg _mt[315485]:_MT[238], arg this[315483]:NPBRandomStream[315477](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314819 call _cond_test(314805 call == eltType complex[140]))
    {
      (314809 call += NPBRandomStreamPrivate_count 2)
    }
    {
      (314815 call += NPBRandomStreamPrivate_count 1)
    }
    (314829 return(314828 call randlc eltType NPBRandomStreamPrivate_cursor))
  } function NPBRandomStream[315477](?).NPBRandomStreamPrivate_skipToNth_noLock[314839](arg _mt[315489]:_MT[238], arg this[315487]:NPBRandomStream[315477](?), in arg n[314836] :
  integral) : _unknown[51] "method" "primary method" "no doc"
  {
    (314843 call += n 1)
    if(314862 call _cond_test(314849 call == eltType complex[140]))
    {
      { scopeless
        (314859 call = n(314857 call -(314854 call * n 2) 1))
      }
    }
    (314869 call = NPBRandomStreamPrivate_count n)
    (314878 call = NPBRandomStreamPrivate_cursor(314877 call randlc_skipto seed n))
  } function NPBRandomStream[315477](?).getNext[314885](arg _mt[315493]:_MT[238], arg this[315491]:NPBRandomStream[315477](?)) : _unknown[51] "method" "primary method"
  {
    (314890 call _lock)
    { scopeless
      const result[314896] "const"(314895 call NPBRandomStreamPrivate_getNext_noLock)
      (314899 'end of statement')
    }
    (314902 call _unlock)
    (314905 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[315477](?).skipToNth[314916](arg _mt[315497]:_MT[238], arg this[315495]:NPBRandomStream[315477](?), arg n[314913] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(314953 call _cond_test(314920 call < n 0))
    {
      { scopeless
        (314951 'throw'(314924 'new'(_chpl_manager = _owned[30](?))(314950 call IllegalArgumentError(314947 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314945 call _cast string[26] n)))))
      }
    }
    (314961 call _lock)
    (314966 call NPBRandomStreamPrivate_skipToNth_noLock n)
    (314970 call _unlock)
  } function NPBRandomStream[315477](?).getNth[314980](arg _mt[315501]:_MT[238], arg this[315499]:NPBRandomStream[315477](?), arg n[314977] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(315018 call _cond_test(314985 call < n 0))
    {
      { scopeless
        (315016 'throw'(314989 'new'(_chpl_manager = _owned[30](?))(315015 call IllegalArgumentError(315012 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(315010 call _cast string[26] n)))))
      }
    }
    (315026 call _lock)
    (315031 call NPBRandomStreamPrivate_skipToNth_noLock n)
    { scopeless
      const result[315036] "const"(315035 call NPBRandomStreamPrivate_getNext_noLock)
      (315039 'end of statement')
    }
    (315042 call _unlock)
    (315045 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[315477](?).fillRandom[315059](arg _mt[315505]:_MT[238], arg this[315503]:NPBRandomStream[315477](?), arg arr[315056] :
  (315053 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown x[315086] "index var" "insert auto destroy"
        
        unknown r[315088] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (315078 call iterate(315070 call . arr c"_dom")(315075 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (315082 call = x r)
      }
    }
  } function NPBRandomStream[315477](?).fillRandom[315103](arg _mt[315509]:_MT[238], arg this[315507]:NPBRandomStream[315477](?), arg arr[315100] :
  (315097 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc"
  {
    (315133 call compilerError "NPBRandomStream(eltType="(315126 call _cast string[26] eltType) ") can only be used to fill arrays of "(315131 call _cast string[26] eltType))
  } function NPBRandomStream[315477](?).choice[315146](arg _mt[315513]:_MT[238], arg this[315511]:NPBRandomStream[315477](?), arg x[315143] :
  (315140 call chpl__buildArrayRuntimeType nil[44]), arg size[315151] :
  unknown sizeType[315148] =
  none[57], arg replace[315156] =
  1, arg prob[315162] :
  unknown probType[315159] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315185 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315477](?).choice[315200](arg _mt[315517]:_MT[238], arg this[315515]:NPBRandomStream[315477](?), arg x[315197] :
  (315196 call range(stridable = ?[260])), arg size[315205] :
  unknown sizeType[315202] =
  none[57], arg replace[315210] =
  1, arg prob[315216] :
  unknown probType[315213] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315223 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315477](?).choice[315234](arg _mt[315521]:_MT[238], arg this[315519]:NPBRandomStream[315477](?), arg x[315231] :
  _domain, arg size[315239] :
  unknown sizeType[315236] =
  none[57], arg replace[315244] =
  1, arg prob[315250] :
  unknown probType[315247] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315257 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315477](?).iterate[315268](arg _mt[315525]:_MT[238], arg this[315523]:NPBRandomStream[315477](?), arg D[315265] :
  _domain, arg resultType[315271]:_any[178](?) =
  real[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (315276 call _lock)
    { scopeless
      const start[315280] "const" NPBRandomStreamPrivate_count
      (315283 'end of statement')
    }
    (315298 call += NPBRandomStreamPrivate_count(315297 call(315289 call .(315286 call . D c"size") c"safeCast")(315295 call int[13] 64)))
    (315307 call NPBRandomStreamPrivate_skipToNth_noLock(315304 call - NPBRandomStreamPrivate_count 1))
    (315311 call _unlock)
    (315320 return(315319 call NPBRandomPrivate_iterate resultType D seed start))
  } function NPBRandomStream[315477](?).iterate[315330](arg _mt[315529]:_MT[238], arg this[315527]:NPBRandomStream[315477](?), arg D[315327] :
  _domain, arg resultType[315333]:_any[178](?) =
  real[16], param arg tag[315336]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    { scopeless
      const start[315346] "const" NPBRandomStreamPrivate_count
      (315349 'end of statement')
    }
    (315359 return(315358 call NPBRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (315343 call == tag(315340 call . iterKind c"leader"))
  } function NPBRandomStream[315477](?).writeThis[315368](arg _mt[315533]:_MT[238], arg this[315531]:NPBRandomStream[315477](?), arg f[315366]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides"
  {
    (315372 call <~> f "NPBRandomStream(eltType=")
    (315381 call <~> f(315379 call _cast string[26] eltType))
    (315386 call <~> f ", parSafe=")
    (315391 call <~> f parSafe)
    (315396 call <~> f ", seed=")
    (315401 call <~> f seed)
    (315406 call <~> f ")")
  } unknown _l[315417] "no doc"(315414 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) function NPBRandomStream[315477](?)._lock[315423](arg _mt[315537]:_MT[238], arg this[315535]:NPBRandomStream[315477](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(315433 call _cond_test parSafe)
    {
      { scopeless
        (315431 call(315427 call . _l c"lock"))
      }
    }
  } function NPBRandomStream[315477](?)._unlock[315443](arg _mt[315541]:_MT[238], arg this[315539]:NPBRandomStream[315477](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(315453 call _cond_test parSafe)
    {
      { scopeless
        (315451 call(315447 call . _l c"unlock"))
      }
    }
  } unknown NPBRandomStreamPrivate_cursor[315463] "no doc" seed real[16] unknown NPBRandomStreamPrivate_count[315472] "no doc" 1(315470 call int[13] 64)
  { scopeless
    const r23[315550] "const" "private"(315548 call ** 0.5 23)
    const t23[315557] "const" "private"(315555 call ** 2.0 23)
    const r46[315564] "const" "private"(315562 call ** 0.5 46)
    const t46[315571] "const" "private"(315569 call ** 2.0 46)
    const arand[315577] "const" "private" 1.2207e+09
    (315580 'end of statement')
  }
  function randlc[315587](inout arg x[315584] :
  real[16], arg a[315591] :
  real[16] =
  arand) : _unknown[51] "private"
  {
    { scopeless
      unknown t1[315599](315597 call * r23 a)
      (315602 'end of statement')
    }
    { scopeless
      const a1[315608] "const"(315607 call floor t1)
      const a2[315618] "const"(315616 call - a(315614 call * t23 a1))
      (315621 'end of statement')
    }
    (315627 call = t1(315625 call * r23 x))
    { scopeless
      const x1[315634] "const"(315633 call floor t1)
      const x2[315644] "const"(315642 call - x(315640 call * t23 x1))
      (315647 'end of statement')
    }
    (315659 call = t1(315657 call +(315651 call * a1 x2)(315655 call * a2 x1)))
    { scopeless
      const t2[315669] "const"(315668 call floor(315665 call * r23 t1))
      const z[315679] "const"(315677 call - t1(315675 call * t23 t2))
      const t3[315692] "const"(315690 call +(315684 call * t23 z)(315688 call * a2 x2))
      const t4[315702] "const"(315701 call floor(315698 call * r46 t3))
      const x3[315712] "const"(315710 call - t3(315708 call * t46 t4))
      (315715 'end of statement')
    }
    (315718 call = x x3)
    (315725 return(315723 call * r46 x3))
  }
  function randlc[315733](arg resultType[315731]:_any[178](?), inout arg x[315736] :
  real[16]) : _unknown[51] "private"
  {
    if(315784 call _cond_test(315741 call == resultType complex[140]))
    {
      { scopeless
        (315757 return(315755 call _cast complex[140](315752 call _build_tuple(315746 call randlc x)(315750 call randlc x))))
      }
    }
    {
      { scopeless
        if(315778 call _cond_test(315761 call == resultType imag[130]))
        {
          { scopeless
            (315770 return(315769 call _r2i(315767 call randlc x)))
          }
        }
        {
          { scopeless
            (315776 return(315775 call randlc x))
          }
        }
      }
    }
  }
  function randlc_skipto[315802](arg seed[315799] :
  (315798 call int[13] 64), in arg n[315805] :
  integral) : _unknown[51] "private"
  {
    { scopeless
      unknown cursor[315813](315811 call _cast real[16] seed)
      (315816 'end of statement')
    }
    (315820 call -= n 1)
    { scopeless
      unknown t[315824] arand
      (315827 'end of statement')
    }
    arand
    {
      unknown tmp[315890] "temp"
      (315914 'move' tmp[315890](315909 call _cond_test(315911 call != n 0)))
      WhileDo[315895]
      {
        {
          { scopeless
            const i[315838] "const"(315836 call / n 2)
            (315841 'end of statement')
          }
          if(315856 call _cond_test(315848 call !=(315845 call * 2 i) n))
          {
            { scopeless
              (315854 call randlc cursor t)
            }
          }
          if(315873 call _cond_test(315863 call == i 0))
          {
            { scopeless
              break nil[44]
            }
          }
          {
            { scopeless
              (315870 call = n i)
            }
          }
          (315883 call randlc t t)
          (315887 call = n i)
        }
        label _continueLabel[315893]
        (315904 'move' tmp[315890](315899 call _cond_test(315901 call != n 0)))
        tmp[315890]
      }
      label _breakLabel[315894]
    }
    (315918 return cursor)
  }
  { scopeless type
    real[16]
  }
  function outer[315927](arg ranges[315925]:_any[178](?), param arg dim[315931] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private"
  {
    if(316099 call _cond_test(315943 call ==(315937 call + dim 2)(315940 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[315955] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[315956] "expr temp" "temp"
        (315965 'move' _iterator[315956](315963 call _getIterator(315949 call ranges dim)))
        Defer
        {
          {
            (315982 call _freeIterator _iterator[315956])
          }
        }
        { scopeless type
          (315971 'move' _indexOfInterest[315955](315968 call iteratorIndex _iterator[315956]))
        }
        ForLoop[315957]
        {
          unknown i[315975] "index var" "insert auto destroy"
          (315977 'move' i[315975] _indexOfInterest[315955])
          { scopeless
            (315953 yield(315951 call _build_tuple i))
          }
          label _continueLabel[315960]
          _indexOfInterest[315955]
          _iterator[315956]
        }
        label _breakLabel[315961]
      }
    }
    {
      { scopeless
        if(316095 call _cond_test(315998 call <(315992 call + dim 2)(315995 call . ranges c"size")))
        {
          {
            unknown _indexOfInterest[316056] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[316057] "expr temp" "temp"
            (316066 'move' _iterator[316057](316064 call _getIterator(316004 call ranges dim)))
            Defer
            {
              {
                (316083 call _freeIterator _iterator[316057])
              }
            }
            { scopeless type
              (316072 'move' _indexOfInterest[316056](316069 call iteratorIndex _iterator[316057]))
            }
            ForLoop[316058]
            {
              unknown i[316076] "index var" "insert auto destroy"
              (316078 'move' i[316076] _indexOfInterest[316056])
              {
                unknown _indexOfInterest[316022] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[316023] "expr temp" "temp"
                (316032 'move' _iterator[316023](316030 call _getIterator(316013 call outer ranges(316011 call + dim 1))))
                Defer
                {
                  {
                    (316049 call _freeIterator _iterator[316023])
                  }
                }
                { scopeless type
                  (316038 'move' _indexOfInterest[316022](316035 call iteratorIndex _iterator[316023]))
                }
                ForLoop[316024]
                {
                  unknown j[316042] "index var" "insert auto destroy"
                  (316044 'move' j[316042] _indexOfInterest[316022])
                  { scopeless
                    (316020 yield(316018 call _build_tuple i(316016 'expand_tuple' j)))
                  }
                  label _continueLabel[316027]
                  _indexOfInterest[316022]
                  _iterator[316023]
                }
                label _breakLabel[316028]
              }
              label _continueLabel[316061]
              _indexOfInterest[316056]
              _iterator[316057]
            }
            label _breakLabel[316062]
          }
        }
        {
          (316092 yield 0)
        }
      }
    }
  }
  function NPBRandomPrivate_iterate[316111](arg resultType[316109]:_any[178](?), arg D[316114] :
  _domain, arg seed[316121] :
  (316120 call int[13] 64), arg start[316128] :
  (316127 call int[13] 64)) : _unknown[51] "iterator fn" "no doc"
  {
    { scopeless
      unknown cursor[316136](316135 call randlc_skipto seed start)
      (316139 'end of statement')
    }
    {
      unknown _indexOfInterest[316150] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316151] "expr temp" "temp"
      (316160 'move' _iterator[316151](316158 call _getIterator D))
      Defer
      {
        {
          (316176 call _freeIterator _iterator[316151])
        }
      }
      { scopeless type
        (316165 'move' _indexOfInterest[316150](316162 call iteratorIndex _iterator[316151]))
      }
      ForLoop[316152]
      {
        unknown i[316169] "index var" "insert auto destroy"
        (316171 'move' i[316169] _indexOfInterest[316150])
        { scopeless
          (316148 yield(316147 call randlc resultType cursor))
        }
        label _continueLabel[316155]
        _indexOfInterest[316150]
        _iterator[316151]
      }
      label _breakLabel[316156]
    }
  }
  function NPBRandomPrivate_iterate[316189](arg resultType[316187]:_any[178](?), arg D[316192] :
  _domain, arg seed[316199] :
  (316198 call int[13] 64), arg start[316206] :
  (316205 call int[13] 64), param arg tag[316210] :
  iterKind) : _unknown[51] "iterator fn" "no doc"
  {
    {
      unknown _indexOfInterest[316235] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316236] "expr temp" "temp"
      (316245 'move' _iterator[316236](316243 call _getIterator(316231 call(316222 call . D c"these")(tag =(316226 call . iterKind c"leader")))))
      Defer
      {
        {
          (316262 call _freeIterator _iterator[316236])
        }
      }
      { scopeless type
        (316251 'move' _indexOfInterest[316235](316248 call iteratorIndex _iterator[316236]))
      }
      ForLoop[316237]
      {
        unknown block[316255] "index var" "insert auto destroy"
        (316257 'move' block[316255] _indexOfInterest[316235])
        { scopeless
          (316233 yield block)
        }
        label _continueLabel[316240]
        _indexOfInterest[316235]
        _iterator[316236]
      }
      label _breakLabel[316241]
    }
  }
  where {
    (316218 call == tag(316215 call . iterKind c"leader"))
  }
  function NPBRandomPrivate_iterate[316277](arg resultType[316275]:_any[178](?), arg D[316280] :
  _domain, arg seed[316287] :
  (316286 call int[13] 64), arg start[316294] :
  (316293 call int[13] 64), param arg tag[316298] :
  iterKind, arg followThis[316301]:_any[178](?)) : _unknown[51] "iterator fn" "no doc"
  {
    (316311 'use' DSIUtil)
    { scopeless
      unknown multiplier[316323] "param"(316320 IfExpr (316316 call == resultType complex[140]) then
      { scopeless
        2
      } else
      { scopeless
        1
      } )
      (316326 'end of statement')
    }
    { scopeless
      const ZD[316331] "const"(316330 call computeZeroBasedDomain D)
      (316334 'end of statement')
    }
    { scopeless
      const innerRange[316345] "const"(316344 call followThis(316341 call -(316337 call . ZD c"rank") 1))
      (316348 'end of statement')
    }
    { scopeless
      unknown cursor[316350] real[16]
      (316353 'end of statement')
    }
    {
      unknown _indexOfInterest[316582] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316583] "expr temp" "temp"
      (316592 'move' _iterator[316583](316590 call _getIterator(316358 call outer followThis)))
      Defer
      {
        {
          (316609 call _freeIterator _iterator[316583])
        }
      }
      { scopeless type
        (316598 'move' _indexOfInterest[316582](316595 call iteratorIndex _iterator[316583]))
      }
      ForLoop[316584]
      {
        unknown outer[316602] "index var" "insert auto destroy"
        (316604 'move' outer[316602] _indexOfInterest[316582])
        {
          { scopeless
            unknown myStart[316360] start
            (316363 'end of statement')
          }
          if(316429 call _cond_test(316370 call >(316366 call . ZD c"rank") 1))
          {
            { scopeless
              (316400 call += myStart(316398 call * multiplier(316397 call(316389 call .(316388 call(316375 call . ZD c"indexOrder")(316385 call _build_tuple(316379 'expand_tuple' outer)(316381 call . innerRange c"low"))) c"safeCast")(316395 call int[13] 64))))
            }
          }
          {
            { scopeless
              (316426 call += myStart(316424 call * multiplier(316423 call(316415 call .(316414 call(316406 call . ZD c"indexOrder")(316410 call . innerRange c"low")) c"safeCast")(316421 call int[13] 64))))
            }
          }
          if(316578 call _cond_test(316439 call !(316436 call . innerRange c"stridable")))
          {
            (316447 call = cursor(316446 call randlc_skipto seed myStart))
            {
              unknown _indexOfInterest[316460] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316461] "expr temp" "temp"
              (316470 'move' _iterator[316461](316468 call _getIterator innerRange))
              Defer
              {
                {
                  (316486 call _freeIterator _iterator[316461])
                }
              }
              { scopeless type
                (316475 'move' _indexOfInterest[316460](316472 call iteratorIndex _iterator[316461]))
              }
              ForLoop[316462]
              {
                unknown i[316479] "index var" "insert auto destroy"
                (316481 'move' i[316479] _indexOfInterest[316460])
                { scopeless
                  (316458 yield(316457 call randlc resultType cursor))
                }
                label _continueLabel[316465]
                _indexOfInterest[316460]
                _iterator[316461]
              }
              label _breakLabel[316466]
            }
          }
          {
            (316507 call -= myStart(316506 call(316498 call .(316495 call . innerRange c"low") c"safeCast")(316504 call int[13] 64)))
            {
              unknown _indexOfInterest[316545] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316546] "expr temp" "temp"
              (316555 'move' _iterator[316546](316553 call _getIterator innerRange))
              Defer
              {
                {
                  (316571 call _freeIterator _iterator[316546])
                }
              }
              { scopeless type
                (316560 'move' _indexOfInterest[316545](316557 call iteratorIndex _iterator[316546]))
              }
              ForLoop[316547]
              {
                unknown i[316564] "index var" "insert auto destroy"
                (316566 'move' i[316564] _indexOfInterest[316545])
                {
                  (316534 call = cursor(316533 call randlc_skipto seed(316531 call + myStart(316529 call *(316527 call(316519 call . i c"safeCast")(316525 call int[13] 64)) multiplier))))
                  (316543 yield(316542 call randlc resultType cursor))
                }
                label _continueLabel[316550]
                _indexOfInterest[316545]
                _iterator[316546]
              }
              label _breakLabel[316551]
            }
          }
        }
        label _continueLabel[316587]
        _indexOfInterest[316582]
        _iterator[316583]
      }
      label _breakLabel[316588]
    }
  }
  where {
    (316308 call == tag(316305 call . iterKind c"follower"))
  }
}