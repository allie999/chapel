AST dump for DefaultRectangular after pass scopeResolve.
Module use list: DSIUtil ChapelArray ChapelDistribution ChapelRange SysBasic SysError SysCTypes ChapelDebugPrint ChapelLocks OwnedObject IO DefaultSparse DefaultAssociative ExternalArray RangeChunk 

{
  const dataParTasksPerLocale[93284] "config" "const" 0
  (93287 'end of statement')
  const dataParIgnoreRunningTasks[93290] "config" "const" 0
  (93293 'end of statement')
  const dataParMinGranularity[93296] "config" "const" 1 int(64)[13]
  (93299 'end of statement')
  if(93325 call _cond_test(93302 call < dataParTasksPerLocale[93284] 0))
  {
    (93323 call halt "dataParTasksPerLocale must be >= 0")
  }
  if(93355 call _cond_test(93332 call <= dataParMinGranularity[93296] 0))
  {
    (93353 call halt "dataParMinGranularity must be > 0")
  }
  unknown debugDefaultDist[93395] "config" "param" 0
  (93398 'end of statement')
  unknown debugDefaultDistBulkTransfer[93400] "config" "param" 0
  (93403 'end of statement')
  unknown debugDataPar[93405] "config" "param" 0
  (93408 'end of statement')
  unknown debugDataParNuma[93410] "config" "param" 0
  (93413 'end of statement')
  unknown disableArrRealloc[93415] "config" "param" 0
  (93418 'end of statement')
  unknown reportInPlaceRealloc[93420] "config" "param" 0
  (93423 'end of statement')
  unknown defaultDoRADOpt[93425] "config" "param" 1
  (93428 'end of statement')
  unknown defaultDisableLazyRADOpt[93430] "config" "param" 0
  (93433 'end of statement')
  unknown earlyShiftData[93435] "config" "param" 1
  (93438 'end of statement')
  unknown usePollyArrayIndex[93440] "config" "param" 0
  (93443 'end of statement')
  unknown defaultRectangularSupportsAutoLocalAccess[93445] "config" "param" 0
  (93448 'end of statement')
  type ArrayStorageOrder[93454] def RMO[93450]:ArrayStorageOrder[93454] def CMO[93452]:ArrayStorageOrder[93454]
  unknown defaultStorageOrder[93463] "config" "param" RMO[93450]
  (93466 'end of statement')
  unknown storageOrder[93468] "param" defaultStorageOrder[93463]
  (93471 'end of statement')
  function polly_array_index[93480](arg arguments[93476] ... :
  int(64)[13]) : _unknown[51] "lineno ok" "llvm readnone"
  {
    unknown rank[93493] "param"(93491 call /(93488 call -(93484 call . arguments[93476] c"size") 1) 2)
    (93496 'end of statement')
    unknown blkStart[93499] "param" 2
    (93502 'end of statement')
    unknown blkEnd[93510] "param"(93508 call -(93505 call + 2 rank[93493]) 1)
    (93513 'end of statement')
    unknown indStart[93518] "param"(93516 call + blkEnd[93510] 1)
    (93521 'end of statement')
    unknown indEnd[93529] "param"(93527 call -(93524 call + indStart[93518] rank[93493]) 1)
    (93532 'end of statement')
    unknown offset[93537](93536 call arguments[93476] 0)
    (93540 'end of statement')
    unknown blk[93545](93543 call * rank[93493] int(64)[13])
    (93548 'end of statement')
    unknown ind[93553](93551 call * rank[93493] int(64)[13])
    (93556 'end of statement')
    (93565 call =(93563 call blk[93545](93560 call - rank[93493] 1)) 1)
    {
      unknown i[93603] 0
      unknown tmp[93604] "maybe param" "temp"
      (93615 'move' tmp[93604](93613 call chpl_compute_low_param_loop_bound 0(93571 call - rank[93493] 2)))
      unknown tmp[93605] "maybe param" "temp"
      (93625 'move' tmp[93605](93623 call chpl_compute_high_param_loop_bound 0(93620 call - rank[93493] 2)))
      unknown tmp[93606] "maybe param" "temp"
      (93628 'move' tmp[93606](93576 call - 1))
      ParamForLoop[93630]
      { i[93603] tmp[93604] tmp[93605] tmp[93606]
        (93600 call =(93583 call blk[93545] i[93603])(93598 call *(93590 call blk[93545](93587 call + i[93603] 1))(93597 call arguments[93476](93594 call + blkStart[93499] i[93603]))))
      }
      label _unused_continueLabel[93608]
      label _breakLabel[93607]
    }
    {
      unknown j[93664] 0
      unknown tmp[93665] "maybe param" "temp"
      (93677 'move' tmp[93665](93675 call chpl_compute_low_param_loop_bound 0(93642 call - rank[93493] 1)))
      unknown tmp[93666] "maybe param" "temp"
      (93687 'move' tmp[93666](93685 call chpl_compute_high_param_loop_bound 0(93682 call - rank[93493] 1)))
      unknown tmp[93667] "maybe param" "temp"
      (93690 'move' tmp[93667] 1)
      ParamForLoop[93692]
      { j[93664] tmp[93665] tmp[93666] tmp[93667]
        {
          (93660 call =(93649 call ind[93553] j[93664])(93659 call arguments[93476](93656 call -(93653 call + indStart[93518] j[93664]) 1)))
        }
      }
      label _unused_continueLabel[93669]
      label _breakLabel[93668]
    }
    unknown ret[93703] offset[93537] int(64)[13]
    (93706 'end of statement')
    {
      unknown i[93729] 0
      unknown tmp[93730] "maybe param" "temp"
      (93742 'move' tmp[93730](93740 call chpl_compute_low_param_loop_bound 0(93710 call - rank[93493] 1)))
      unknown tmp[93731] "maybe param" "temp"
      (93752 'move' tmp[93731](93750 call chpl_compute_high_param_loop_bound 0(93747 call - rank[93493] 1)))
      unknown tmp[93732] "maybe param" "temp"
      (93755 'move' tmp[93732] 1)
      ParamForLoop[93757]
      { i[93729] tmp[93730] tmp[93731] tmp[93732]
        {
          (93725 call += ret[93703](93723 call *(93718 call ind[93553] i[93729])(93722 call blk[93545] i[93729])))
        }
      }
      label _unused_continueLabel[93734]
      label _breakLabel[93733]
    }
    (93767 return ret[93703])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultDist[93992].dsiNewRectangularDom[93781](arg _mt[93996]:_MT[238], arg this[93994]:DefaultDist[93992], param arg rank[93778] :
  int(64)[13], arg idxType[93783]:_any[178](?), param arg stridable[93786] :
  bool[10], arg inds[93789]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    const dom[93804] "const"(93793 'new'(_chpl_manager = unmanaged[220](?))(93803 call DefaultRectangularDom[372780](?) rank[93778] idxType[93783] stridable[93786](93802 call _to_unmanaged this[93994])))
    (93807 'end of statement')
    (93817 call(93812 call . dom[93804] c"dsiSetIndices") inds[93789])
    (93820 return dom[93804])
  }
  function DefaultDist[93992].dsiNewAssociativeDom[93828](arg _mt[94000]:_MT[238], arg this[93998]:DefaultDist[93992], arg idxType[93826]:_any[178](?), param arg parSafe[93831] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93846 return(93836 'new'(_chpl_manager = unmanaged[220](?))(93845 call DefaultAssociativeDom[378069](?) idxType[93826] parSafe[93831](93844 call _to_unmanaged this[93998]))))
  }
  function DefaultDist[93992].dsiNewSparseDom[93857](arg _mt[94004]:_MT[238], arg this[94002]:DefaultDist[93992], param arg rank[93854] :
  int(64)[13], arg idxType[93859]:_any[178](?), arg dom[93862] :
  _domain[125908](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93878 return(93867 'new'(_chpl_manager = unmanaged[220](?))(93877 call DefaultSparseDom[378077](?) rank[93854] idxType[93859](93875 call _to_unmanaged this[94002]) dom[93862])))
  }
  function DefaultDist[93992].dsiIndexToLocale[93887](arg _mt[94008]:_MT[238], arg this[94006]:DefaultDist[93992], arg ind[93885]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (93893 return(93891 call chpl_localeID_to_locale(93890 '_wide_get_locale' this[94006])))
  }
  function DefaultDist[93992].dsiClone[93900](arg _mt[94012]:_MT[238], arg this[94010]:DefaultDist[93992]) : _unknown[51] "method" "primary method"
  {
    (93906 return(93905 call _to_unmanaged this[94010]))
  }
  function DefaultDist[93992].dsiAssign[93919](arg _mt[94016]:_MT[238], arg this[94014]:DefaultDist[93992], arg other[93916] :
  (93915 'to unmanaged class from unknown'(93914 'typeof' this[94014]))) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function DefaultDist[93992].dsiEqualDMaps[93931](arg _mt[94020]:_MT[238], arg this[94018]:DefaultDist[93992], arg d[93928] :
  unmanaged DefaultDist[415487]) param : _unknown[51] "method" "primary method"
  {
    (93934 return 1)
  }
  function DefaultDist[93992].dsiEqualDMaps[93943](arg _mt[94024]:_MT[238], arg this[94022]:DefaultDist[93992], arg d[93941]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (93946 return 0)
  }
  function DefaultDist[93992].trackDomains[93953](arg _mt[94028]:_MT[238], arg this[94026]:DefaultDist[93992]) param : _unknown[51] "method" "primary method"
  {
    (93956 return 0)
  }
  function DefaultDist[93992].dsiTrackDomains[93963](arg _mt[94032]:_MT[238], arg this[94030]:DefaultDist[93992]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93966 return 0)
  }
  function DefaultDist[93992].singleton[93973](arg _mt[94036]:_MT[238], arg this[94034]:DefaultDist[93992]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93976 return 1)
  }
  function DefaultDist[93992].dsiIsLayout[93983](arg _mt[94040]:_MT[238], arg this[94038]:DefaultDist[93992]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93986 return 1)
  }
  type DefaultDist[93992] val super[355697]:BaseDist[145968] "super class"
  type unmanaged DefaultDist[415487]
  type DefaultDist[378088](?)
  unknown defaultDist[94053] "locale private"(94043 'new'(94052 call dmap[118245](94047 'new'(_chpl_manager = unmanaged[220](?))(94050 call DefaultDist[378088](?)))))
  (94056 'end of statement')
  function chpl_defaultDistInitPrivate[94059]() : _unknown[51] "no return value for void"
  {
    if(94099 call _cond_test(94066 call ==(94062 call . defaultDist[94053] c"_value") nil[44]))
    {
      const nd[94078] "const"(94068 'new'(94077 call dmap[118245](94072 'new'(_chpl_manager = unmanaged[220](?))(94075 call DefaultDist[378088](?)))))
      (94081 'end of statement')
      (94097 'move' defaultDist[94053](94096 call chpl__autoCopy(94094 call(94090 call . nd[94078] c"clone"))))
    }
  }
  function DefaultRectangularDom[100790](?).linksDistribution[94133](arg _mt[100794]:_MT[238], arg this[100792]:DefaultRectangularDom[100790](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94136 return 0)
  }
  function DefaultRectangularDom[100790](?).dsiLinksDistribution[94143](arg _mt[100798]:_MT[238], arg this[100796]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94146 return 0)
  }
  function DefaultRectangularDom[415337](?).isDefaultRectangular[94153](arg _mt[100802]:_MT[238], arg this[100800]:DefaultRectangularDom[415337](?)) param : _unknown[51] "method" "primary method"
  {
    (94156 return 1)
  }
  function DefaultRectangularDom[100790](?).isDefaultRectangular[94163](arg _mt[100806]:_MT[238], arg this[100804]:DefaultRectangularDom[100790](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94166 return 1)
  }
  function DefaultRectangularDom[100790](?).init[94175](arg _mt[100810]:_MT[238], arg this[100808]:DefaultRectangularDom[100790](?), param arg rank[94173]:_any[178](?), arg idxType[94177]:_any[178](?), param arg stridable[94179]:_any[178](?), arg dist[94181]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94191 call(94184 call .(358538 call . this[100808] c"super") c"init") rank[94173] idxType[94177] stridable[94179])
    (94201 call =(94197 call . this[100808] c"dist") dist[94181])
  }
  function DefaultRectangularDom[100790](?).intIdxType[94208](arg _mt[100814]:_MT[238], arg this[100812]:DefaultRectangularDom[100790](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (94214 return(94213 call chpl__idxTypeToIntIdxType(378107 call . this[100812] c"idxType")))
  }
  function DefaultRectangularDom[100790](?).dsiMyDist[94221](arg _mt[100818]:_MT[238], arg this[100816]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94224 return(378112 call . this[100816] c"dist"))
  }
  function DefaultRectangularDom[100790](?).chpl__serialize[94255](arg _mt[100822]:_MT[238], arg this[100820]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method"
  {
    (94268 return(94257 'new'(94267 call _serialized_domain[94250](?)(378120 call . this[100820] c"rank")(378125 call . this[100820] c"idxType")(378130 call . this[100820] c"stridable")(94265 call(378134 call . this[100820] c"dsiDims")) 1)))
  }
  function DefaultRectangularDom[415337](?).chpl__deserialize[94277](arg _mt[100826]:_MT[238], arg this[100824]:DefaultRectangularDom[415337](?), arg data[94275]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (94305 return(94304 call(94282 call . defaultDist[94053] c"newRectangularDom")(94286 call . data[94275] c"rank")(94291 call . data[94275] c"idxType")(94295 call . data[94275] c"stridable")(94301 call . data[94275] c"dims")))
  }
  function DefaultRectangularDom[100790](?).dsiDisplayRepresentation[94312](arg _mt[100830]:_MT[238], arg this[100828]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (94334 call writeln "ranges = "(378139 call . this[100828] c"ranges"))
  }
  function DefaultRectangularDom[100790](?).dsiGetIndices[94341](arg _mt[100834]:_MT[238], arg this[100832]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method"
  {
    (94344 return(378144 call . this[100832] c"ranges"))
  }
  function DefaultRectangularDom[100790](?).dsiSetIndices[94353](arg _mt[100838]:_MT[238], arg this[100836]:DefaultRectangularDom[100790](?), arg x[94351]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94357 call =(378149 call . this[100836] c"ranges") x[94351])
  }
  function DefaultRectangularDom[100790](?).dsiAssignDomain[94369](arg _mt[100842]:_MT[238], arg this[100840]:DefaultRectangularDom[100790](?), arg rhs[94366] :
  _domain[125908](?), arg lhsPrivate[94372] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94379 call chpl_assignDomainWithGetSetIndices this[100840] rhs[94366])
  }
  function DefaultRectangularDom[100790](?).these_help[94390](arg _mt[100846]:_MT[238], arg this[100844]:DefaultRectangularDom[100790](?), param arg d[94387] :
  int(64)[13]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94632 call _cond_test(94397 call == d[94387](94395 call -(378159 call . this[100844] c"rank") 1)))
    {
      {
        unknown _indexOfInterest[94407] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94408] "expr temp" "temp"
        (94417 'move' _iterator[94408](94415 call _getIterator(94403 call(378164 call . this[100844] c"ranges") d[94387])))
        Defer
        {
          {
            (94434 call _freeIterator _iterator[94408])
          }
        }
        { scopeless type
          (94423 'move' _indexOfInterest[94407](94420 call iteratorIndex _iterator[94408]))
        }
        ForLoop[94409]
        {
          unknown i[94427] "index var" "insert auto destroy"
          (94429 'move' i[94427] _indexOfInterest[94407])
          (94405 yield i[94427])
          label _continueLabel[94412]
          _indexOfInterest[94407]
          _iterator[94408]
        }
        label _breakLabel[94413]
      }
    }
    {
      if(94628 call _cond_test(94447 call == d[94387](94445 call -(378172 call . this[100844] c"rank") 2)))
      {
        {
          unknown _indexOfInterest[94503] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94504] "expr temp" "temp"
          (94513 'move' _iterator[94504](94511 call _getIterator(94453 call(378177 call . this[100844] c"ranges") d[94387])))
          Defer
          {
            {
              (94530 call _freeIterator _iterator[94504])
            }
          }
          { scopeless type
            (94519 'move' _indexOfInterest[94503](94516 call iteratorIndex _iterator[94504]))
          }
          ForLoop[94505]
          {
            unknown i[94523] "index var" "insert auto destroy"
            (94525 'move' i[94523] _indexOfInterest[94503])
            {
              unknown _indexOfInterest[94469] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94470] "expr temp" "temp"
              (94479 'move' _iterator[94470](94477 call _getIterator(94461 call(378184 call . this[100844] c"these_help")(94458 call -(378189 call . this[100844] c"rank") 1))))
              Defer
              {
                {
                  (94496 call _freeIterator _iterator[94470])
                }
              }
              { scopeless type
                (94485 'move' _indexOfInterest[94469](94482 call iteratorIndex _iterator[94470]))
              }
              ForLoop[94471]
              {
                unknown j[94489] "index var" "insert auto destroy"
                (94491 'move' j[94489] _indexOfInterest[94469])
                (94467 yield(94465 call _build_tuple i[94523] j[94489]))
                label _continueLabel[94474]
                _indexOfInterest[94469]
                _iterator[94470]
              }
              label _breakLabel[94475]
            }
            label _continueLabel[94508]
            _indexOfInterest[94503]
            _iterator[94504]
          }
          label _breakLabel[94509]
        }
      }
      {
        {
          unknown _indexOfInterest[94593] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94594] "expr temp" "temp"
          (94603 'move' _iterator[94594](94601 call _getIterator(94542 call(378196 call . this[100844] c"ranges") d[94387])))
          Defer
          {
            {
              (94620 call _freeIterator _iterator[94594])
            }
          }
          { scopeless type
            (94609 'move' _indexOfInterest[94593](94606 call iteratorIndex _iterator[94594]))
          }
          ForLoop[94595]
          {
            unknown i[94613] "index var" "insert auto destroy"
            (94615 'move' i[94613] _indexOfInterest[94593])
            {
              unknown _indexOfInterest[94559] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94560] "expr temp" "temp"
              (94569 'move' _iterator[94560](94567 call _getIterator(94550 call(378201 call . this[100844] c"these_help")(94547 call + d[94387] 1))))
              Defer
              {
                {
                  (94586 call _freeIterator _iterator[94560])
                }
              }
              { scopeless type
                (94575 'move' _indexOfInterest[94559](94572 call iteratorIndex _iterator[94560]))
              }
              ForLoop[94561]
              {
                unknown j[94579] "index var" "insert auto destroy"
                (94581 'move' j[94579] _indexOfInterest[94559])
                (94557 yield(94555 call _build_tuple i[94613](94553 'expand_tuple' j[94579])))
                label _continueLabel[94564]
                _indexOfInterest[94559]
                _iterator[94560]
              }
              label _breakLabel[94565]
            }
            label _continueLabel[94598]
            _indexOfInterest[94593]
            _iterator[94594]
          }
          label _breakLabel[94599]
        }
      }
    }
  }
  function DefaultRectangularDom[100790](?).these_help[94646](arg _mt[100850]:_MT[238], arg this[100848]:DefaultRectangularDom[100790](?), param arg d[94643] :
  int(64)[13], arg block[94648]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94901 call _cond_test(94658 call == d[94643](94656 call -(94652 call . block[94648] c"size") 1)))
    {
      {
        unknown _indexOfInterest[94668] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94669] "expr temp" "temp"
        (94678 'move' _iterator[94669](94676 call _getIterator(94664 call block[94648] d[94643])))
        Defer
        {
          {
            (94695 call _freeIterator _iterator[94669])
          }
        }
        { scopeless type
          (94684 'move' _indexOfInterest[94668](94681 call iteratorIndex _iterator[94669]))
        }
        ForLoop[94670]
        {
          unknown i[94688] "index var" "insert auto destroy"
          (94690 'move' i[94688] _indexOfInterest[94668])
          (94666 yield i[94688])
          label _continueLabel[94673]
          _indexOfInterest[94668]
          _iterator[94669]
        }
        label _breakLabel[94674]
      }
    }
    {
      if(94897 call _cond_test(94711 call == d[94643](94709 call -(94705 call . block[94648] c"size") 2)))
      {
        {
          unknown _indexOfInterest[94771] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94772] "expr temp" "temp"
          (94781 'move' _iterator[94772](94779 call _getIterator(94717 call block[94648] d[94643])))
          Defer
          {
            {
              (94798 call _freeIterator _iterator[94772])
            }
          }
          { scopeless type
            (94787 'move' _indexOfInterest[94771](94784 call iteratorIndex _iterator[94772]))
          }
          ForLoop[94773]
          {
            unknown i[94791] "index var" "insert auto destroy"
            (94793 'move' i[94791] _indexOfInterest[94771])
            {
              unknown _indexOfInterest[94737] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94738] "expr temp" "temp"
              (94747 'move' _iterator[94738](94745 call _getIterator(94729 call(378215 call . this[100848] c"these_help")(94725 call -(94721 call . block[94648] c"size") 1) block[94648])))
              Defer
              {
                {
                  (94764 call _freeIterator _iterator[94738])
                }
              }
              { scopeless type
                (94753 'move' _indexOfInterest[94737](94750 call iteratorIndex _iterator[94738]))
              }
              ForLoop[94739]
              {
                unknown j[94757] "index var" "insert auto destroy"
                (94759 'move' j[94757] _indexOfInterest[94737])
                (94735 yield(94733 call _build_tuple i[94791] j[94757]))
                label _continueLabel[94742]
                _indexOfInterest[94737]
                _iterator[94738]
              }
              label _breakLabel[94743]
            }
            label _continueLabel[94776]
            _indexOfInterest[94771]
            _iterator[94772]
          }
          label _breakLabel[94777]
        }
      }
      {
        {
          unknown _indexOfInterest[94862] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94863] "expr temp" "temp"
          (94872 'move' _iterator[94863](94870 call _getIterator(94810 call block[94648] d[94643])))
          Defer
          {
            {
              (94889 call _freeIterator _iterator[94863])
            }
          }
          { scopeless type
            (94878 'move' _indexOfInterest[94862](94875 call iteratorIndex _iterator[94863]))
          }
          ForLoop[94864]
          {
            unknown i[94882] "index var" "insert auto destroy"
            (94884 'move' i[94882] _indexOfInterest[94862])
            {
              unknown _indexOfInterest[94828] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94829] "expr temp" "temp"
              (94838 'move' _iterator[94829](94836 call _getIterator(94819 call(378224 call . this[100848] c"these_help")(94815 call + d[94643] 1) block[94648])))
              Defer
              {
                {
                  (94855 call _freeIterator _iterator[94829])
                }
              }
              { scopeless type
                (94844 'move' _indexOfInterest[94828](94841 call iteratorIndex _iterator[94829]))
              }
              ForLoop[94830]
              {
                unknown j[94848] "index var" "insert auto destroy"
                (94850 'move' j[94848] _indexOfInterest[94828])
                (94826 yield(94824 call _build_tuple i[94882](94822 'expand_tuple' j[94848])))
                label _continueLabel[94833]
                _indexOfInterest[94828]
                _iterator[94829]
              }
              label _breakLabel[94834]
            }
            label _continueLabel[94867]
            _indexOfInterest[94862]
            _iterator[94863]
          }
          label _breakLabel[94868]
        }
      }
    }
  }
  function DefaultRectangularDom[100790](?).these[94915](arg _mt[100854]:_MT[238], arg this[100852]:DefaultRectangularDom[100790](?), arg tasksPerLocale[94912] =
  dataParTasksPerLocale[93284], arg ignoreRunning[94918] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[94922] =
  dataParMinGranularity[93296], arg offset[94934] =
  (94933 call createTuple(378236 call . this[100852] c"rank")(378240 call . this[100852] c"intIdxType")(94931 call _cast(378244 call . this[100852] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95027 call _cond_test(94939 call ==(378249 call . this[100852] c"rank") 1))
    {
      {
        unknown _indexOfInterest[94949] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94950] "expr temp" "temp"
        (94959 'move' _iterator[94950](94957 call _getIterator(94945 call(378254 call . this[100852] c"ranges") 0)))
        Defer
        {
          {
            (94976 call _freeIterator _iterator[94950])
          }
        }
        { scopeless type
          (94965 'move' _indexOfInterest[94949](94962 call iteratorIndex _iterator[94950]))
        }
        ForLoop[94951]
        {
          unknown i[94969] "index var" "insert auto destroy"
          (94971 'move' i[94969] _indexOfInterest[94949])
          (94947 yield i[94969])
          label _continueLabel[94954]
          _indexOfInterest[94949]
          _iterator[94950]
        }
        label _breakLabel[94955]
      }
    }
    {
      {
        unknown _indexOfInterest[94992] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94993] "expr temp" "temp"
        (95002 'move' _iterator[94993](95000 call _getIterator(94988 call(378259 call . this[100852] c"these_help") 0)))
        Defer
        {
          {
            (95019 call _freeIterator _iterator[94993])
          }
        }
        { scopeless type
          (95008 'move' _indexOfInterest[94992](95005 call iteratorIndex _iterator[94993]))
        }
        ForLoop[94994]
        {
          unknown i[95012] "index var" "insert auto destroy"
          (95014 'move' i[95012] _indexOfInterest[94992])
          (94990 yield i[95012])
          label _continueLabel[94997]
          _indexOfInterest[94992]
          _iterator[94993]
        }
        label _breakLabel[94998]
      }
    }
  }
  function DefaultRectangularDom[100790](?).these[95040](arg _mt[100858]:_MT[238], arg this[100856]:DefaultRectangularDom[100790](?), param arg tag[95037] :
  iterKind[453], arg tasksPerLocale[95043] =
  dataParTasksPerLocale[93284], arg ignoreRunning[95047] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[95051] =
  dataParMinGranularity[93296], arg offset[95063] =
  (95062 call createTuple(378269 call . this[100856] c"rank")(378273 call . this[100856] c"intIdxType")(95060 call _cast(378277 call . this[100856] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95096 call _cond_test chpl__testParFlag[188346])
    {
      (95094 call chpl__testPar "default rectangular domain standalone invoked on "(378284 call . this[100856] c"ranges"))
    }
    if(95124 call _cond_test debugDefaultDist[93395])
    {
      (95122 call chpl_debug_writeln "*** In domain standalone code:")
    }
    const numTasks[95141] "const"(95138 IfExpr (95131 call == tasksPerLocale[95043] 0) then
    { scopeless
      (95134 call .(358551 call here[90438]) c"maxTaskPar")
    } else
    { scopeless
      tasksPerLocale[95043]
    } )
    (95144 'end of statement')
    if(95205 call _cond_test debugDefaultDist[93395])
    {
      (95202 call chpl_debug_writeln "    numTasks=" numTasks[95141] " (" ignoreRunning[95047] "), minIndicesPerTask=" minIndicesPerTask[95051])
    }
    const tmp[95234] "const" "temp"(95231 IfExpr (95216 'task_get_serial') then
    { scopeless
      (95222 call _build_tuple 1(95219 call - 1))
    } else
    { scopeless
      (95230 call _computeChunkStuff numTasks[95141] ignoreRunning[95047] minIndicesPerTask[95051](378299 call . this[100856] c"ranges"))
    } )
    (95241 call _check_tuple_var_decl tmp[95234] 2)
    const numChunks[95209] "const"(95235 call tmp[95234] 0)
    const parDim[95211] "const"(95238 call tmp[95234] 1)
    (95246 'end of statement')
    if(95331 call _cond_test debugDefaultDist[93395])
    {
      (95328 call chpl_debug_writeln "    numChunks=" numChunks[95209] " parDim=" parDim[95211] " ranges(" parDim[95211] ").size="(95325 call .(95324 call(378308 call . this[100856] c"ranges") parDim[95211]) c"size"))
    }
    if(95421 call _cond_test debugDataPar[93405])
    {
      (95418 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[95141] "\n" "### ignoreRunning = " ignoreRunning[95047] "\n" "### minIndicesPerTask = " minIndicesPerTask[95051] "\n" "### numChunks = " numChunks[95209] " (parDim = " parDim[95211] ")\n" "### nranges = "(378320 call . this[100856] c"ranges"))
    }
    if(96101 call _cond_test(95427 call <= numChunks[95209] 1))
    {
      {
        unknown _indexOfInterest[95438] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[95439] "expr temp" "temp"
        (95448 'move' _iterator[95439](95446 call _getIterator(95433 call(378325 call . this[100856] c"these_help") 0)))
        Defer
        {
          {
            (95465 call _freeIterator _iterator[95439])
          }
        }
        { scopeless type
          (95454 'move' _indexOfInterest[95438](95451 call iteratorIndex _iterator[95439]))
        }
        ForLoop[95440]
        {
          unknown i[95458] "index var" "insert auto destroy"
          (95460 'move' i[95458] _indexOfInterest[95438])
          {
            (95435 yield i[95458])
          }
          label _continueLabel[95443]
          _indexOfInterest[95438]
          _iterator[95439]
        }
        label _breakLabel[95444]
      }
    }
    {
      if(95497 call _cond_test debugDefaultDist[93395])
      {
        (95494 call chpl_debug_writeln "*** DI: ranges = "(378332 call . this[100856] c"ranges"))
      }
      {
        unknown tmpIter[95754] "expr temp" "maybe ref" "no copy" "temp"
        (95757 'move' tmpIter[95754](95507 call #(95504 call chpl_build_low_bounded_range 0) numChunks[95209]))
        unknown isRngDomArr[96082] "maybe param" "temp"
        (96097 'move' isRngDomArr[96082](96095 call ||(96084 call isBoundedRange tmpIter[95754])(96093 call ||(96087 call isDomain tmpIter[95754])(96090 call isArray tmpIter[95754]))))
        if isRngDomArr[96082]
        {
          const _coforallCount[95949] "const" "end count" "temp"
          (96018 'move' _coforallCount[95949](96015 call _endCountAlloc 1))
          unknown numTasks[95950] "temp"
          (96002 'move' numTasks[95950](95998 call . tmpIter[95754] c"size"))
          (95993 call _upEndCount _coforallCount[95949] 1 numTasks[95950])
          (95990 call chpl_resetTaskSpawn numTasks[95950])
          unknown _indexOfInterest[95957] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95958] "expr temp" "temp"
          (95967 'move' _iterator[95958](95965 call _getIterator tmpIter[95754]))
          Defer
          {
            {
              (95983 call _freeIterator _iterator[95958])
            }
          }
          { scopeless type
            (95972 'move' _indexOfInterest[95957](95969 call iteratorIndex _iterator[95958]))
          }
          ForLoop[95959]
          {
            unknown chunk[95976] "coforall index var" "index var" "insert auto destroy"
            (95978 'move' chunk[95976] _indexOfInterest[95957])
            {
              {
                unknown block[95761](378411 call . this[100856] c"ranges")
                (95764 'end of statement')
                const len[95766] "const"(95805 IfExpr (95768 call !(95770 call .(95772 call(378416 call . this[100856] c"ranges") parDim[95211]) c"stridable")) then
                { scopeless
                  (95777 call .(95779 call(378422 call . this[100856] c"ranges") parDim[95211]) c"size")
                } else
                { scopeless
                  (95784 call *(95786 call _cast uint(64)[115](95789 call .(95791 call(378428 call . this[100856] c"ranges") parDim[95211]) c"size"))(95795 call _cast uint(64)[115](95798 call abs(95800 call .(95802 call(378434 call . this[100856] c"ranges") parDim[95211]) c"stride"))))
                } )
                (95807 'end of statement')
                const tmp[95809] "const" "temp"(95811 call _computeBlock len[95766] numChunks[95209] chunk[95976](95816 call .(95818 call(378443 call . this[100856] c"ranges") parDim[95211]) c"_high")(95822 call .(95824 call(378449 call . this[100856] c"ranges") parDim[95211]) c"_low")(95828 call .(95830 call(378455 call . this[100856] c"ranges") parDim[95211]) c"_low"))
                (95835 call _check_tuple_var_decl tmp[95809] 2)
                const lo[95838] "const"(95840 call tmp[95809] 0)
                const hi[95843] "const"(95845 call tmp[95809] 1)
                (95848 'end of statement')
                if(95850 call _cond_test(95852 call .(95854 call block[95761] parDim[95211]) c"stridable"))
                {
                  (95860 call =(95862 call block[95761] parDim[95211])(95865 call chpl_align(95867 call chpl_by(95869 call chpl_build_bounded_range lo[95838] hi[95843])(95873 call .(95875 call block[95761] parDim[95211]) c"stride"))(95879 call chpl__idxToInt(95881 call .(95883 call block[95761] parDim[95211]) c"alignment"))))
                }
                {
                  (95889 call =(95891 call block[95761] parDim[95211])(95894 call chpl_build_bounded_range lo[95838] hi[95843]))
                }
                if(95899 call _cond_test debugDefaultDist[93395])
                {
                  (95903 call chpl_debug_writeln "*** DI[" chunk[95976] "]: block = " block[95761])
                }
                {
                  unknown _indexOfInterest[95910] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95912] "expr temp" "temp"
                  (95914 'move' _iterator[95912](95917 call _getIterator(95919 call(378477 call . this[100856] c"these_help") 0 block[95761])))
                  Defer
                  {
                    {
                      (95924 call _freeIterator _iterator[95912])
                    }
                  }
                  { scopeless type
                    (95928 'move' _indexOfInterest[95910](95931 call iteratorIndex _iterator[95912]))
                  }
                  ForLoop[95933]
                  {
                    unknown i[95936] "index var" "insert auto destroy"
                    (95938 'move' i[95936] _indexOfInterest[95910])
                    {
                      (95942 yield i[95936])
                    }
                    label _continueLabel[95944]
                    _indexOfInterest[95910]
                    _iterator[95912]
                  }
                  label _breakLabel[95946]
                }
              }
              (95952 call _downEndCount _coforallCount[95949] nil[44])
              (95951 'coforall loop')
            }
            label _continueLabel[95962]
            _indexOfInterest[95957]
            _iterator[95958]
          }
          label _breakLabel[95963]
          Defer
          {
            {
              (96005 call _endCountFree _coforallCount[95949])
            }
          }
          (96010 call _waitEndCount _coforallCount[95949] 1 numTasks[95950])
        }
        {
          const _coforallCount[96022] "const" "end count" "temp"
          (96079 'move' _coforallCount[96022](96076 call _endCountAlloc 1))
          unknown _indexOfInterest[96030] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[96031] "expr temp" "temp"
          (96040 'move' _iterator[96031](96038 call _getIterator tmpIter[95754]))
          Defer
          {
            {
              (96056 call _freeIterator _iterator[96031])
            }
          }
          { scopeless type
            (96045 'move' _indexOfInterest[96030](96042 call iteratorIndex _iterator[96031]))
          }
          ForLoop[96032]
          {
            unknown chunk[96049] "coforall index var" "index var" "insert auto destroy"
            (96051 'move' chunk[96049] _indexOfInterest[96030])
            (96063 call _upEndCount _coforallCount[96022] 1)
            {
              {
                unknown block[95510](378338 call . this[100856] c"ranges")
                (95513 'end of statement')
                const len[95559] "const"(95556 IfExpr (95522 call !(95519 call .(95518 call(378343 call . this[100856] c"ranges") parDim[95211]) c"stridable")) then
                { scopeless
                  (95528 call .(95527 call(378349 call . this[100856] c"ranges") parDim[95211]) c"size")
                } else
                { scopeless
                  (95554 call *(95539 call _cast uint(64)[115](95535 call .(95534 call(378355 call . this[100856] c"ranges") parDim[95211]) c"size"))(95552 call _cast uint(64)[115](95550 call abs(95546 call .(95545 call(378361 call . this[100856] c"ranges") parDim[95211]) c"stride"))))
                } )
                (95562 'end of statement')
                const tmp[95595] "const" "temp"(95594 call _computeBlock len[95559] numChunks[95209] chunk[96049](95577 call .(95576 call(378370 call . this[100856] c"ranges") parDim[95211]) c"_high")(95584 call .(95583 call(378376 call . this[100856] c"ranges") parDim[95211]) c"_low")(95591 call .(95590 call(378382 call . this[100856] c"ranges") parDim[95211]) c"_low"))
                (95602 call _check_tuple_var_decl tmp[95595] 2)
                const lo[95563] "const"(95596 call tmp[95595] 0)
                const hi[95565] "const"(95599 call tmp[95595] 1)
                (95607 'end of statement')
                if(95658 call _cond_test(95612 call .(95611 call block[95510] parDim[95211]) c"stridable"))
                {
                  (95644 call =(95618 call block[95510] parDim[95211])(95642 call chpl_align(95630 call chpl_by(95621 call chpl_build_bounded_range lo[95563] hi[95565])(95627 call .(95626 call block[95510] parDim[95211]) c"stride"))(95641 call chpl__idxToInt(95637 call .(95636 call block[95510] parDim[95211]) c"alignment"))))
                }
                {
                  (95655 call =(95650 call block[95510] parDim[95211])(95653 call chpl_build_bounded_range lo[95563] hi[95565]))
                }
                if(95706 call _cond_test debugDefaultDist[93395])
                {
                  (95703 call chpl_debug_writeln "*** DI[" chunk[96049] "]: block = " block[95510])
                }
                {
                  unknown _indexOfInterest[95720] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95721] "expr temp" "temp"
                  (95730 'move' _iterator[95721](95728 call _getIterator(95715 call(378404 call . this[100856] c"these_help") 0 block[95510])))
                  Defer
                  {
                    {
                      (95747 call _freeIterator _iterator[95721])
                    }
                  }
                  { scopeless type
                    (95736 'move' _indexOfInterest[95720](95733 call iteratorIndex _iterator[95721]))
                  }
                  ForLoop[95722]
                  {
                    unknown i[95740] "index var" "insert auto destroy"
                    (95742 'move' i[95740] _indexOfInterest[95720])
                    {
                      (95717 yield i[95740])
                    }
                    label _continueLabel[95725]
                    _indexOfInterest[95720]
                    _iterator[95721]
                  }
                  label _breakLabel[95726]
                }
              }
              (96025 call _downEndCount _coforallCount[96022] nil[44])
              (96024 'coforall loop')
            }
            label _continueLabel[96035]
            _indexOfInterest[96030]
            _iterator[96031]
          }
          label _breakLabel[96036]
          Defer
          {
            {
              (96067 call _endCountFree _coforallCount[96022])
            }
          }
          (96072 call _waitEndCount _coforallCount[96022] 1)
        }
      }
    }
  }
  where {
    (95071 call == tag[95037] standalone[451])
  }
  function DefaultRectangularDom[100790](?).these[96114](arg _mt[100862]:_MT[238], arg this[100860]:DefaultRectangularDom[100790](?), param arg tag[96111] :
  iterKind[453], arg tasksPerLocale[96117] =
  dataParTasksPerLocale[93284], arg ignoreRunning[96121] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[96125] =
  dataParMinGranularity[93296], arg offset[96137] =
  (96136 call createTuple(378488 call . this[100860] c"rank")(378492 call . this[100860] c"intIdxType")(96134 call _cast(378496 call . this[100860] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numSublocs[96153] "const"(96152 call(96148 call .(358554 call here[90438]) c"getChildCount"))
    (96156 'end of statement')
    if(98812 call _cond_test(96163 call && localeModelHasSublocales[187449](96161 call != numSublocs[96153] 0)))
    {
      unknown dptpl[96177](96174 IfExpr (96167 call == tasksPerLocale[96117] 0) then
      { scopeless
        (96170 call .(358556 call here[90438]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[96117]
      } )
      (96180 'end of statement')
      if(96218 call _cond_test(96183 call ! ignoreRunning[96121]))
      {
        const otherTasks[96194] "const"(96192 call -(96190 call(96186 call .(358558 call here[90438]) c"runningTasks")) 1)
        (96197 'end of statement')
        (96215 call = dptpl[96177](96212 IfExpr (96202 call < otherTasks[96194] dptpl[96177]) then
        { scopeless
          (96209 call _cast int(64)[13](96206 call - dptpl[96177] otherTasks[96194]))
        } else
        { scopeless
          1
        } ))
      }
      const numSublocTasks[96227] "const"(96226 call min numSublocs[96153] dptpl[96177])
      (96230 'end of statement')
      const tmp[96257] "const" "temp"(96254 IfExpr (96238 'task_get_serial') then
      { scopeless
        (96244 call _build_tuple 1(96241 call - 1))
      } else
      { scopeless
        (96253 call _computeChunkStuff numSublocTasks[96227](ignoreRunning = 1) minIndicesPerTask[96125](378516 call . this[100860] c"ranges"))
      } )
      (96264 call _check_tuple_var_decl tmp[96257] 2)
      const numChunks[96231] "const"(96258 call tmp[96257] 0)
      const parDim[96233] "const"(96261 call tmp[96257] 1)
      (96269 'end of statement')
      if(96295 call _cond_test debugDataParNuma[93410])
      {
        (96292 call chpl_debug_writeln "### numSublocs = " numSublocs[96153] "\n" "### numTasksPerSubloc = " numSublocTasks[96227] "\n" "### ignoreRunning = " ignoreRunning[96121] "\n" "### minIndicesPerTask = " minIndicesPerTask[96125] "\n" "### numChunks = " numChunks[96231] " (parDim = " parDim[96233] ")\n" "### nranges = "(378528 call . this[100860] c"ranges"))
      }
      if(98082 call _cond_test(96301 call == numChunks[96231] 1))
      {
        if(96408 call _cond_test(96305 call ==(378534 call . this[100860] c"rank") 1))
        {
          (96324 yield(96322 call _build_tuple(96320 call #(96311 call chpl_build_low_bounded_range(96310 call offset[96137] 0))(96317 call .(96316 call(378540 call . this[100860] c"ranges") 0) c"size"))))
        }
        {
          unknown block[96334](96332 call *(378545 call . this[100860] c"rank")(96331 call range[64319](?)(378550 call . this[100860] c"intIdxType")))
          (96337 'end of statement')
          {
            unknown i[96368] 0
            unknown tmp[96369] "maybe param" "temp"
            (96381 'move' tmp[96369](96379 call chpl_compute_low_param_loop_bound 0(96342 call -(378555 call . this[100860] c"rank") 1)))
            unknown tmp[96370] "maybe param" "temp"
            (96391 'move' tmp[96370](96389 call chpl_compute_high_param_loop_bound 0(96386 call -(378570 call . this[100860] c"rank") 1)))
            unknown tmp[96371] "maybe param" "temp"
            (96394 'move' tmp[96371] 1)
            ParamForLoop[96396]
            { i[96368] tmp[96369] tmp[96370] tmp[96371]
              (96365 call =(96349 call block[96334] i[96368])(96363 call #(96354 call chpl_build_low_bounded_range(96353 call offset[96137] i[96368]))(96360 call .(96359 call(378564 call . this[100860] c"ranges") i[96368]) c"size")))
            }
            label _unused_continueLabel[96373]
            label _breakLabel[96372]
          }
          (96406 yield block[96334])
        }
      }
      {
        {
          unknown tmpIter[97222] "expr temp" "maybe ref" "no copy" "temp"
          (97225 'move' tmpIter[97222](96418 call #(96415 call chpl_build_low_bounded_range 0) numChunks[96231]))
          unknown isRngDomArr[98062] "maybe param" "temp"
          (98077 'move' isRngDomArr[98062](98075 call ||(98064 call isBoundedRange tmpIter[97222])(98073 call ||(98067 call isDomain tmpIter[97222])(98070 call isArray tmpIter[97222]))))
          if isRngDomArr[98062]
          {
            const _coforallCount[97934] "const" "end count" "temp"
            (97999 'move' _coforallCount[97934](97996 call _endCountAlloc 0))
            unknown numTasks[97935] "temp"
            (97983 'move' numTasks[97935](97979 call . tmpIter[97222] c"size"))
            (97974 call _upEndCount _coforallCount[97934] 0 numTasks[97935])
            unknown _indexOfInterest[97941] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97942] "expr temp" "temp"
            (97951 'move' _iterator[97942](97949 call _getIterator tmpIter[97222]))
            Defer
            {
              {
                (97967 call _freeIterator _iterator[97942])
              }
            }
            { scopeless type
              (97956 'move' _indexOfInterest[97941](97953 call iteratorIndex _iterator[97942]))
            }
            ForLoop[97943]
            {
              unknown chunk[97960] "coforall index var" "index var" "insert auto destroy"
              (97962 'move' chunk[97960] _indexOfInterest[97941])
              const tmp[97228] "const" "temp"
              (97230 'move' tmp[97228](97232 'deref'(97233 '_wide_get_locale'(97238 call(97235 call .(358562 call here[90438]) c"getChild") chunk[97960]))))
              {
                {
                  if(97246 call _cond_test debugDataParNuma[93410])
                  {
                    if(97250 call _cond_test(97252 call != chunk[97960](97255 call chpl_getSubloc)))
                    {
                      (97259 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[97960] ", on "(97264 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[97269] "const"(97290 IfExpr (97271 call < chunk[97960](97274 call % dptpl[96177] numChunks[96231])) then
                  { scopeless
                    (97279 call +(97281 call / dptpl[96177] numChunks[96231]) 1)
                  } else
                  { scopeless
                    (97287 call / dptpl[96177] numChunks[96231])
                  } )
                  (97292 'end of statement')
                  unknown locBlock[97294](97296 call *(378774 call . this[100860] c"rank")(97299 call range[64319](?)(378779 call . this[100860] c"intIdxType")))
                  (97302 'end of statement')
                  {
                    unknown i[97304] 0
                    unknown tmp[97307] "maybe param" "temp"
                    (97309 'move' tmp[97307](97312 call chpl_compute_low_param_loop_bound 0(97315 call -(378784 call . this[100860] c"rank") 1)))
                    unknown tmp[97318] "maybe param" "temp"
                    (97320 'move' tmp[97318](97323 call chpl_compute_high_param_loop_bound 0(97326 call -(378789 call . this[100860] c"rank") 1)))
                    unknown tmp[97329] "maybe param" "temp"
                    (97331 'move' tmp[97329] 1)
                    ParamForLoop[97334]
                    { i[97304] tmp[97307] tmp[97318] tmp[97329]
                      (97342 call =(97344 call locBlock[97294] i[97304])(97347 call #(97349 call chpl_build_low_bounded_range(97351 call offset[96137] i[97304]))(97354 call .(97356 call(378798 call . this[100860] c"ranges") i[97304]) c"size")))
                    }
                    label _unused_continueLabel[97359]
                    label _breakLabel[97361]
                  }
                  unknown followMe[97364] locBlock[97294](97367 call *(378805 call . this[100860] c"rank")(97370 call range[64319](?)(378810 call . this[100860] c"intIdxType")))
                  (97373 'end of statement')
                  const tmp[97375] "const" "temp"(97377 call _computeBlock(97379 call .(97381 call locBlock[97294] parDim[96233]) c"size") numChunks[96231] chunk[97960](97387 call .(97389 call locBlock[97294] parDim[96233]) c"_high")(97393 call .(97395 call locBlock[97294] parDim[96233]) c"_low")(97399 call .(97401 call locBlock[97294] parDim[96233]) c"_low"))
                  (97406 call _check_tuple_var_decl tmp[97375] 2)
                  const lo[97409] "const"(97411 call tmp[97375] 0)
                  const hi[97414] "const"(97416 call tmp[97375] 1)
                  (97419 'end of statement')
                  (97421 call =(97423 call followMe[97364] parDim[96233])(97426 call chpl_build_bounded_range lo[97409] hi[97414]))
                  const tmp[97430] "const" "temp"(97432 call _computeChunkStuff numSublocTasks[97269](ignoreRunning = 1) minIndicesPerTask[96125] followMe[97364])
                  (97440 call _check_tuple_var_decl tmp[97430] 2)
                  const numChunks2[97443] "const"(97445 call tmp[97430] 0)
                  const parDim2[97448] "const"(97450 call tmp[97430] 1)
                  (97453 'end of statement')
                  {
                    unknown tmpIter[97455] "expr temp" "maybe ref" "no copy" "temp"
                    (97457 'move' tmpIter[97455](97460 call #(97462 call chpl_build_low_bounded_range 0) numChunks2[97443]))
                    unknown isRngDomArr[97465] "maybe param" "temp"
                    (97467 'move' isRngDomArr[97465](97470 call ||(97472 call isBoundedRange tmpIter[97455])(97475 call ||(97477 call isDomain tmpIter[97455])(97480 call isArray tmpIter[97455]))))
                    if isRngDomArr[97465]
                    {
                      const _coforallCount[97484] "const" "end count" "temp"
                      (97486 'move' _coforallCount[97484](97489 call _endCountAlloc 1))
                      unknown numTasks[97491] "temp"
                      (97493 'move' numTasks[97491](97496 call . tmpIter[97455] c"size"))
                      (97500 call _upEndCount _coforallCount[97484] 1 numTasks[97491])
                      (97505 call chpl_resetTaskSpawn numTasks[97491])
                      unknown _indexOfInterest[97507] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97509] "expr temp" "temp"
                      (97511 'move' _iterator[97509](97514 call _getIterator tmpIter[97455]))
                      Defer
                      {
                        {
                          (97518 call _freeIterator _iterator[97509])
                        }
                      }
                      { scopeless type
                        (97522 'move' _indexOfInterest[97507](97525 call iteratorIndex _iterator[97509]))
                      }
                      ForLoop[97527]
                      {
                        unknown chunk2[97530] "coforall index var" "index var" "insert auto destroy"
                        (97532 'move' chunk2[97530] _indexOfInterest[97507])
                        {
                          {
                            unknown locBlock2[97539](97541 call *(378833 call . this[100860] c"rank")(97544 call range[64319](?)(378838 call . this[100860] c"intIdxType")))
                            (97547 'end of statement')
                            {
                              unknown i[97549] 0
                              unknown tmp[97552] "maybe param" "temp"
                              (97554 'move' tmp[97552](97557 call chpl_compute_low_param_loop_bound 0(97560 call -(378843 call . this[100860] c"rank") 1)))
                              unknown tmp[97563] "maybe param" "temp"
                              (97565 'move' tmp[97563](97568 call chpl_compute_high_param_loop_bound 0(97571 call -(378848 call . this[100860] c"rank") 1)))
                              unknown tmp[97574] "maybe param" "temp"
                              (97576 'move' tmp[97574] 1)
                              ParamForLoop[97579]
                              { i[97549] tmp[97552] tmp[97563] tmp[97574]
                                (97587 call =(97589 call locBlock2[97539] i[97549])(97592 call chpl_build_bounded_range(97594 call .(97596 call followMe[97364] i[97549]) c"low")(97600 call .(97602 call followMe[97364] i[97549]) c"high")))
                              }
                              label _unused_continueLabel[97605]
                              label _breakLabel[97607]
                            }
                            unknown followMe2[97610] locBlock2[97539](97613 call *(378860 call . this[100860] c"rank")(97616 call range[64319](?)(378865 call . this[100860] c"intIdxType")))
                            (97619 'end of statement')
                            const low[97621] "const"(97623 call .(97625 call locBlock2[97539] parDim2[97448]) c"_low")
                            const high[97629] "const"(97631 call .(97633 call locBlock2[97539] parDim2[97448]) c"_high")
                            (97637 'end of statement')
                            const tmp[97639] "const" "temp"(97641 call _computeBlock(97643 call .(97645 call locBlock2[97539] parDim2[97448]) c"size") numChunks2[97443] chunk2[97530] high[97629] low[97621] low[97621])
                            (97655 call _check_tuple_var_decl tmp[97639] 2)
                            const lo[97658] "const"(97660 call tmp[97639] 0)
                            const hi[97663] "const"(97665 call tmp[97639] 1)
                            (97668 'end of statement')
                            (97670 call =(97672 call followMe2[97610] parDim2[97448])(97675 call chpl_build_bounded_range lo[97658] hi[97663]))
                            if(97679 call _cond_test debugDataParNuma[93410])
                            {
                              (97683 call chpl_debug_writeln "### chunk = " chunk[97960] "  chunk2 = " chunk2[97530] "  " "followMe = " followMe[97364] "  followMe2 = " followMe2[97610])
                            }
                            (97694 yield followMe2[97610])
                          }
                          (97697 call _downEndCount _coforallCount[97484] nil[44])
                          (97536 'coforall loop')
                        }
                        label _continueLabel[97700]
                        _indexOfInterest[97507]
                        _iterator[97509]
                      }
                      label _breakLabel[97702]
                      Defer
                      {
                        {
                          (97706 call _endCountFree _coforallCount[97484])
                        }
                      }
                      (97710 call _waitEndCount _coforallCount[97484] 1 numTasks[97491])
                    }
                    {
                      const _coforallCount[97715] "const" "end count" "temp"
                      (97717 'move' _coforallCount[97715](97720 call _endCountAlloc 1))
                      unknown _indexOfInterest[97722] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97724] "expr temp" "temp"
                      (97726 'move' _iterator[97724](97729 call _getIterator tmpIter[97455]))
                      Defer
                      {
                        {
                          (97733 call _freeIterator _iterator[97724])
                        }
                      }
                      { scopeless type
                        (97737 'move' _indexOfInterest[97722](97740 call iteratorIndex _iterator[97724]))
                      }
                      ForLoop[97742]
                      {
                        unknown chunk2[97745] "coforall index var" "index var" "insert auto destroy"
                        (97747 'move' chunk2[97745] _indexOfInterest[97722])
                        (97751 call _upEndCount _coforallCount[97715] 1)
                        {
                          {
                            unknown locBlock2[97758](97760 call *(378891 call . this[100860] c"rank")(97763 call range[64319](?)(378896 call . this[100860] c"intIdxType")))
                            (97766 'end of statement')
                            {
                              unknown i[97768] 0
                              unknown tmp[97771] "maybe param" "temp"
                              (97773 'move' tmp[97771](97776 call chpl_compute_low_param_loop_bound 0(97779 call -(378901 call . this[100860] c"rank") 1)))
                              unknown tmp[97782] "maybe param" "temp"
                              (97784 'move' tmp[97782](97787 call chpl_compute_high_param_loop_bound 0(97790 call -(378906 call . this[100860] c"rank") 1)))
                              unknown tmp[97793] "maybe param" "temp"
                              (97795 'move' tmp[97793] 1)
                              ParamForLoop[97798]
                              { i[97768] tmp[97771] tmp[97782] tmp[97793]
                                (97806 call =(97808 call locBlock2[97758] i[97768])(97811 call chpl_build_bounded_range(97813 call .(97815 call followMe[97364] i[97768]) c"low")(97819 call .(97821 call followMe[97364] i[97768]) c"high")))
                              }
                              label _unused_continueLabel[97824]
                              label _breakLabel[97826]
                            }
                            unknown followMe2[97829] locBlock2[97758](97832 call *(378918 call . this[100860] c"rank")(97835 call range[64319](?)(378923 call . this[100860] c"intIdxType")))
                            (97838 'end of statement')
                            const low[97840] "const"(97842 call .(97844 call locBlock2[97758] parDim2[97448]) c"_low")
                            const high[97848] "const"(97850 call .(97852 call locBlock2[97758] parDim2[97448]) c"_high")
                            (97856 'end of statement')
                            const tmp[97858] "const" "temp"(97860 call _computeBlock(97862 call .(97864 call locBlock2[97758] parDim2[97448]) c"size") numChunks2[97443] chunk2[97745] high[97848] low[97840] low[97840])
                            (97874 call _check_tuple_var_decl tmp[97858] 2)
                            const lo[97877] "const"(97879 call tmp[97858] 0)
                            const hi[97882] "const"(97884 call tmp[97858] 1)
                            (97887 'end of statement')
                            (97889 call =(97891 call followMe2[97829] parDim2[97448])(97894 call chpl_build_bounded_range lo[97877] hi[97882]))
                            if(97898 call _cond_test debugDataParNuma[93410])
                            {
                              (97902 call chpl_debug_writeln "### chunk = " chunk[97960] "  chunk2 = " chunk2[97745] "  " "followMe = " followMe[97364] "  followMe2 = " followMe2[97829])
                            }
                            (97913 yield followMe2[97829])
                          }
                          (97916 call _downEndCount _coforallCount[97715] nil[44])
                          (97755 'coforall loop')
                        }
                        label _continueLabel[97919]
                        _indexOfInterest[97722]
                        _iterator[97724]
                      }
                      label _breakLabel[97921]
                      Defer
                      {
                        {
                          (97925 call _endCountFree _coforallCount[97715])
                        }
                      }
                      (97929 call _waitEndCount _coforallCount[97715] 1)
                    }
                  }
                }
                (97936 call _downEndCount _coforallCount[97934] nil[44])
                (97241 'coforall on block' 1 tmp[97228])
              }
              label _continueLabel[97946]
              _indexOfInterest[97941]
              _iterator[97942]
            }
            label _breakLabel[97947]
            Defer
            {
              {
                (97986 call _endCountFree _coforallCount[97934])
              }
            }
            (97991 call _waitEndCount _coforallCount[97934] 0 numTasks[97935])
          }
          {
            const _coforallCount[98003] "const" "end count" "temp"
            (98059 'move' _coforallCount[98003](98056 call _endCountAlloc 0))
            unknown _indexOfInterest[98010] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98011] "expr temp" "temp"
            (98020 'move' _iterator[98011](98018 call _getIterator tmpIter[97222]))
            Defer
            {
              {
                (98036 call _freeIterator _iterator[98011])
              }
            }
            { scopeless type
              (98025 'move' _indexOfInterest[98010](98022 call iteratorIndex _iterator[98011]))
            }
            ForLoop[98012]
            {
              unknown chunk[98029] "coforall index var" "index var" "insert auto destroy"
              (98031 'move' chunk[98029] _indexOfInterest[98010])
              (98043 call _upEndCount _coforallCount[98003] 0)
              const tmp[97211] "const" "temp"
              (97213 'move' tmp[97211](97209 'deref'(97208 '_wide_get_locale'(96426 call(96421 call .(358560 call here[90438]) c"getChild") chunk[98029]))))
              {
                {
                  if(96451 call _cond_test debugDataParNuma[93410])
                  {
                    if(96445 call _cond_test(96432 call != chunk[98029](96431 call chpl_getSubloc)))
                    {
                      (96443 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[98029] ", on "(96441 call chpl_getSubloc) ") ***")
                    }
                  }
                  const numSublocTasks[96477] "const"(96474 IfExpr (96461 call < chunk[98029](96459 call % dptpl[96177] numChunks[96231])) then
                  { scopeless
                    (96468 call +(96465 call / dptpl[96177] numChunks[96231]) 1)
                  } else
                  { scopeless
                    (96472 call / dptpl[96177] numChunks[96231])
                  } )
                  (96480 'end of statement')
                  unknown locBlock[96488](96486 call *(378588 call . this[100860] c"rank")(96485 call range[64319](?)(378593 call . this[100860] c"intIdxType")))
                  (96491 'end of statement')
                  {
                    unknown i[96521] 0
                    unknown tmp[96522] "maybe param" "temp"
                    (96534 'move' tmp[96522](96532 call chpl_compute_low_param_loop_bound 0(96495 call -(378598 call . this[100860] c"rank") 1)))
                    unknown tmp[96523] "maybe param" "temp"
                    (96544 'move' tmp[96523](96542 call chpl_compute_high_param_loop_bound 0(96539 call -(378613 call . this[100860] c"rank") 1)))
                    unknown tmp[96524] "maybe param" "temp"
                    (96547 'move' tmp[96524] 1)
                    ParamForLoop[96549]
                    { i[96521] tmp[96522] tmp[96523] tmp[96524]
                      (96518 call =(96502 call locBlock[96488] i[96521])(96516 call #(96507 call chpl_build_low_bounded_range(96506 call offset[96137] i[96521]))(96513 call .(96512 call(378607 call . this[100860] c"ranges") i[96521]) c"size")))
                    }
                    label _unused_continueLabel[96526]
                    label _breakLabel[96525]
                  }
                  unknown followMe[96566] locBlock[96488](96563 call *(378618 call . this[100860] c"rank")(96562 call range[64319](?)(378623 call . this[100860] c"intIdxType")))
                  (96569 'end of statement')
                  const tmp[96608] "const" "temp"(96607 call _computeBlock(96580 call .(96579 call locBlock[96488] parDim[96233]) c"size") numChunks[96231] chunk[98029](96590 call .(96589 call locBlock[96488] parDim[96233]) c"_high")(96597 call .(96596 call locBlock[96488] parDim[96233]) c"_low")(96604 call .(96603 call locBlock[96488] parDim[96233]) c"_low"))
                  (96615 call _check_tuple_var_decl tmp[96608] 2)
                  const lo[96570] "const"(96609 call tmp[96608] 0)
                  const hi[96572] "const"(96612 call tmp[96608] 1)
                  (96620 'end of statement')
                  (96629 call =(96624 call followMe[96566] parDim[96233])(96627 call chpl_build_bounded_range lo[96570] hi[96572]))
                  const tmp[96645] "const" "temp"(96644 call _computeChunkStuff numSublocTasks[96477](ignoreRunning = 1) minIndicesPerTask[96125] followMe[96566])
                  (96652 call _check_tuple_var_decl tmp[96645] 2)
                  const numChunks2[96632] "const"(96646 call tmp[96645] 0)
                  const parDim2[96634] "const"(96649 call tmp[96645] 1)
                  (96657 'end of statement')
                  {
                    unknown tmpIter[96891] "expr temp" "maybe ref" "no copy" "temp"
                    (96894 'move' tmpIter[96891](96663 call #(96660 call chpl_build_low_bounded_range 0) numChunks2[96632]))
                    unknown isRngDomArr[97189] "maybe param" "temp"
                    (97204 'move' isRngDomArr[97189](97202 call ||(97191 call isBoundedRange tmpIter[96891])(97200 call ||(97194 call isDomain tmpIter[96891])(97197 call isArray tmpIter[96891]))))
                    if isRngDomArr[97189]
                    {
                      const _coforallCount[97056] "const" "end count" "temp"
                      (97125 'move' _coforallCount[97056](97122 call _endCountAlloc 1))
                      unknown numTasks[97057] "temp"
                      (97109 'move' numTasks[97057](97105 call . tmpIter[96891] c"size"))
                      (97100 call _upEndCount _coforallCount[97056] 1 numTasks[97057])
                      (97097 call chpl_resetTaskSpawn numTasks[97057])
                      unknown _indexOfInterest[97064] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97065] "expr temp" "temp"
                      (97074 'move' _iterator[97065](97072 call _getIterator tmpIter[96891]))
                      Defer
                      {
                        {
                          (97090 call _freeIterator _iterator[97065])
                        }
                      }
                      { scopeless type
                        (97079 'move' _indexOfInterest[97064](97076 call iteratorIndex _iterator[97065]))
                      }
                      ForLoop[97066]
                      {
                        unknown chunk2[97083] "coforall index var" "index var" "insert auto destroy"
                        (97085 'move' chunk2[97083] _indexOfInterest[97064])
                        {
                          {
                            unknown locBlock2[96898](96900 call *(378705 call . this[100860] c"rank")(96903 call range[64319](?)(378710 call . this[100860] c"intIdxType")))
                            (96906 'end of statement')
                            {
                              unknown i[96908] 0
                              unknown tmp[96911] "maybe param" "temp"
                              (96913 'move' tmp[96911](96916 call chpl_compute_low_param_loop_bound 0(96919 call -(378715 call . this[100860] c"rank") 1)))
                              unknown tmp[96922] "maybe param" "temp"
                              (96924 'move' tmp[96922](96927 call chpl_compute_high_param_loop_bound 0(96930 call -(378720 call . this[100860] c"rank") 1)))
                              unknown tmp[96933] "maybe param" "temp"
                              (96935 'move' tmp[96933] 1)
                              ParamForLoop[96938]
                              { i[96908] tmp[96911] tmp[96922] tmp[96933]
                                (96946 call =(96948 call locBlock2[96898] i[96908])(96951 call chpl_build_bounded_range(96953 call .(96955 call followMe[96566] i[96908]) c"low")(96959 call .(96961 call followMe[96566] i[96908]) c"high")))
                              }
                              label _unused_continueLabel[96964]
                              label _breakLabel[96966]
                            }
                            unknown followMe2[96969] locBlock2[96898](96972 call *(378732 call . this[100860] c"rank")(96975 call range[64319](?)(378737 call . this[100860] c"intIdxType")))
                            (96978 'end of statement')
                            const low[96980] "const"(96982 call .(96984 call locBlock2[96898] parDim2[96634]) c"_low")
                            const high[96988] "const"(96990 call .(96992 call locBlock2[96898] parDim2[96634]) c"_high")
                            (96996 'end of statement')
                            const tmp[96998] "const" "temp"(97000 call _computeBlock(97002 call .(97004 call locBlock2[96898] parDim2[96634]) c"size") numChunks2[96632] chunk2[97083] high[96988] low[96980] low[96980])
                            (97014 call _check_tuple_var_decl tmp[96998] 2)
                            const lo[97017] "const"(97019 call tmp[96998] 0)
                            const hi[97022] "const"(97024 call tmp[96998] 1)
                            (97027 'end of statement')
                            (97029 call =(97031 call followMe2[96969] parDim2[96634])(97034 call chpl_build_bounded_range lo[97017] hi[97022]))
                            if(97038 call _cond_test debugDataParNuma[93410])
                            {
                              (97042 call chpl_debug_writeln "### chunk = " chunk[98029] "  chunk2 = " chunk2[97083] "  " "followMe = " followMe[96566] "  followMe2 = " followMe2[96969])
                            }
                            (97053 yield followMe2[96969])
                          }
                          (97059 call _downEndCount _coforallCount[97056] nil[44])
                          (97058 'coforall loop')
                        }
                        label _continueLabel[97069]
                        _indexOfInterest[97064]
                        _iterator[97065]
                      }
                      label _breakLabel[97070]
                      Defer
                      {
                        {
                          (97112 call _endCountFree _coforallCount[97056])
                        }
                      }
                      (97117 call _waitEndCount _coforallCount[97056] 1 numTasks[97057])
                    }
                    {
                      const _coforallCount[97129] "const" "end count" "temp"
                      (97186 'move' _coforallCount[97129](97183 call _endCountAlloc 1))
                      unknown _indexOfInterest[97137] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[97138] "expr temp" "temp"
                      (97147 'move' _iterator[97138](97145 call _getIterator tmpIter[96891]))
                      Defer
                      {
                        {
                          (97163 call _freeIterator _iterator[97138])
                        }
                      }
                      { scopeless type
                        (97152 'move' _indexOfInterest[97137](97149 call iteratorIndex _iterator[97138]))
                      }
                      ForLoop[97139]
                      {
                        unknown chunk2[97156] "coforall index var" "index var" "insert auto destroy"
                        (97158 'move' chunk2[97156] _indexOfInterest[97137])
                        (97170 call _upEndCount _coforallCount[97129] 1)
                        {
                          {
                            unknown locBlock2[96672](96670 call *(378647 call . this[100860] c"rank")(96669 call range[64319](?)(378652 call . this[100860] c"intIdxType")))
                            (96675 'end of statement')
                            {
                              unknown i[96707] 0
                              unknown tmp[96708] "maybe param" "temp"
                              (96720 'move' tmp[96708](96718 call chpl_compute_low_param_loop_bound 0(96680 call -(378657 call . this[100860] c"rank") 1)))
                              unknown tmp[96709] "maybe param" "temp"
                              (96730 'move' tmp[96709](96728 call chpl_compute_high_param_loop_bound 0(96725 call -(378668 call . this[100860] c"rank") 1)))
                              unknown tmp[96710] "maybe param" "temp"
                              (96733 'move' tmp[96710] 1)
                              ParamForLoop[96735]
                              { i[96707] tmp[96708] tmp[96709] tmp[96710]
                                (96704 call =(96687 call locBlock2[96672] i[96707])(96702 call chpl_build_bounded_range(96692 call .(96691 call followMe[96566] i[96707]) c"low")(96699 call .(96698 call followMe[96566] i[96707]) c"high")))
                              }
                              label _unused_continueLabel[96712]
                              label _breakLabel[96711]
                            }
                            unknown followMe2[96752] locBlock2[96672](96749 call *(378673 call . this[100860] c"rank")(96748 call range[64319](?)(378678 call . this[100860] c"intIdxType")))
                            (96755 'end of statement')
                            const low[96763] "const"(96760 call .(96759 call locBlock2[96672] parDim2[96634]) c"_low")
                            const high[96773] "const"(96770 call .(96769 call locBlock2[96672] parDim2[96634]) c"_high")
                            (96776 'end of statement')
                            const tmp[96797] "const" "temp"(96796 call _computeBlock(96787 call .(96786 call locBlock2[96672] parDim2[96634]) c"size") numChunks2[96632] chunk2[97156] high[96773] low[96763] low[96763])
                            (96804 call _check_tuple_var_decl tmp[96797] 2)
                            const lo[96777] "const"(96798 call tmp[96797] 0)
                            const hi[96779] "const"(96801 call tmp[96797] 1)
                            (96809 'end of statement')
                            (96818 call =(96813 call followMe2[96752] parDim2[96634])(96816 call chpl_build_bounded_range lo[96777] hi[96779]))
                            if(96884 call _cond_test debugDataParNuma[93410])
                            {
                              (96881 call chpl_debug_writeln "### chunk = " chunk[98029] "  chunk2 = " chunk2[97156] "  " "followMe = " followMe[96566] "  followMe2 = " followMe2[96752])
                            }
                            (96889 yield followMe2[96752])
                          }
                          (97132 call _downEndCount _coforallCount[97129] nil[44])
                          (97131 'coforall loop')
                        }
                        label _continueLabel[97142]
                        _indexOfInterest[97137]
                        _iterator[97138]
                      }
                      label _breakLabel[97143]
                      Defer
                      {
                        {
                          (97174 call _endCountFree _coforallCount[97129])
                        }
                      }
                      (97179 call _waitEndCount _coforallCount[97129] 1)
                    }
                  }
                }
                (98005 call _downEndCount _coforallCount[98003] nil[44])
                (97216 'coforall on block' 1 tmp[97211])
              }
              label _continueLabel[98015]
              _indexOfInterest[98010]
              _iterator[98011]
            }
            label _breakLabel[98016]
            Defer
            {
              {
                (98047 call _endCountFree _coforallCount[98003])
              }
            }
            (98052 call _waitEndCount _coforallCount[98003] 0)
          }
        }
      }
    }
    {
      if(98108 call _cond_test debugDefaultDist[93395])
      {
        (98106 call chpl_debug_writeln "*** In domain/array leader code:")
      }
      const numTasks[98126] "const"(98123 IfExpr (98116 call == tasksPerLocale[96117] 0) then
      { scopeless
        (98119 call .(358564 call here[90438]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[96117]
      } )
      (98129 'end of statement')
      if(98141 call _cond_test debugDefaultDist[93395])
      {
        (98139 call chpl_debug_writeln "    numTasks=" numTasks[98126] " (" ignoreRunning[96121] "), minIndicesPerTask=" minIndicesPerTask[96125])
      }
      const tmp[98171] "const" "temp"(98168 IfExpr (98153 'task_get_serial') then
      { scopeless
        (98159 call _build_tuple 1(98156 call - 1))
      } else
      { scopeless
        (98167 call _computeChunkStuff numTasks[98126] ignoreRunning[96121] minIndicesPerTask[96125](378959 call . this[100860] c"ranges"))
      } )
      (98178 call _check_tuple_var_decl tmp[98171] 2)
      const numChunks[98146] "const"(98172 call tmp[98171] 0)
      const parDim[98148] "const"(98175 call tmp[98171] 1)
      (98183 'end of statement')
      if(98203 call _cond_test debugDefaultDist[93395])
      {
        (98201 call chpl_debug_writeln "    numChunks=" numChunks[98146] " parDim=" parDim[98148] " ranges(" parDim[98148] ").size="(98198 call .(98197 call(378968 call . this[100860] c"ranges") parDim[98148]) c"size"))
      }
      if(98230 call _cond_test debugDataPar[93405])
      {
        (98227 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[98126] "\n" "### ignoreRunning = " ignoreRunning[96121] "\n" "### minIndicesPerTask = " minIndicesPerTask[96125] "\n" "### numChunks = " numChunks[98146] " (parDim = " parDim[98148] ")\n" "### nranges = "(378980 call . this[100860] c"ranges"))
      }
      if(98808 call _cond_test(98236 call == numChunks[98146] 1))
      {
        if(98343 call _cond_test(98240 call ==(378986 call . this[100860] c"rank") 1))
        {
          (98259 yield(98257 call _build_tuple(98255 call #(98246 call chpl_build_low_bounded_range(98245 call offset[96137] 0))(98252 call .(98251 call(378992 call . this[100860] c"ranges") 0) c"size"))))
        }
        {
          unknown block[98269](98267 call *(378997 call . this[100860] c"rank")(98266 call range[64319](?)(379002 call . this[100860] c"intIdxType")))
          (98272 'end of statement')
          {
            unknown i[98303] 0
            unknown tmp[98304] "maybe param" "temp"
            (98316 'move' tmp[98304](98314 call chpl_compute_low_param_loop_bound 0(98277 call -(379007 call . this[100860] c"rank") 1)))
            unknown tmp[98305] "maybe param" "temp"
            (98326 'move' tmp[98305](98324 call chpl_compute_high_param_loop_bound 0(98321 call -(379022 call . this[100860] c"rank") 1)))
            unknown tmp[98306] "maybe param" "temp"
            (98329 'move' tmp[98306] 1)
            ParamForLoop[98331]
            { i[98303] tmp[98304] tmp[98305] tmp[98306]
              (98300 call =(98284 call block[98269] i[98303])(98298 call #(98289 call chpl_build_low_bounded_range(98288 call offset[96137] i[98303]))(98295 call .(98294 call(379016 call . this[100860] c"ranges") i[98303]) c"size")))
            }
            label _unused_continueLabel[98308]
            label _breakLabel[98307]
          }
          (98341 yield block[98269])
        }
      }
      {
        unknown locBlock[98355](98353 call *(379028 call . this[100860] c"rank")(98352 call range[64319](?)(379033 call . this[100860] c"intIdxType")))
        (98358 'end of statement')
        {
          unknown i[98389] 0
          unknown tmp[98390] "maybe param" "temp"
          (98402 'move' tmp[98390](98400 call chpl_compute_low_param_loop_bound 0(98363 call -(379038 call . this[100860] c"rank") 1)))
          unknown tmp[98391] "maybe param" "temp"
          (98412 'move' tmp[98391](98410 call chpl_compute_high_param_loop_bound 0(98407 call -(379053 call . this[100860] c"rank") 1)))
          unknown tmp[98392] "maybe param" "temp"
          (98415 'move' tmp[98392] 1)
          ParamForLoop[98417]
          { i[98389] tmp[98390] tmp[98391] tmp[98392]
            (98386 call =(98370 call locBlock[98355] i[98389])(98384 call #(98375 call chpl_build_low_bounded_range(98374 call offset[96137] i[98389]))(98381 call .(98380 call(379047 call . this[100860] c"ranges") i[98389]) c"size")))
          }
          label _unused_continueLabel[98394]
          label _breakLabel[98393]
        }
        if(98449 call _cond_test debugDefaultDist[93395])
        {
          (98447 call chpl_debug_writeln "*** DI: locBlock = " locBlock[98355])
        }
        {
          unknown tmpIter[98569] "expr temp" "maybe ref" "no copy" "temp"
          (98572 'move' tmpIter[98569](98459 call #(98456 call chpl_build_low_bounded_range 0) numChunks[98146]))
          unknown isRngDomArr[98789] "maybe param" "temp"
          (98804 'move' isRngDomArr[98789](98802 call ||(98791 call isBoundedRange tmpIter[98569])(98800 call ||(98794 call isDomain tmpIter[98569])(98797 call isArray tmpIter[98569]))))
          if isRngDomArr[98789]
          {
            const _coforallCount[98656] "const" "end count" "temp"
            (98725 'move' _coforallCount[98656](98722 call _endCountAlloc 1))
            unknown numTasks[98657] "temp"
            (98709 'move' numTasks[98657](98705 call . tmpIter[98569] c"size"))
            (98700 call _upEndCount _coforallCount[98656] 1 numTasks[98657])
            (98697 call chpl_resetTaskSpawn numTasks[98657])
            unknown _indexOfInterest[98664] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98665] "expr temp" "temp"
            (98674 'move' _iterator[98665](98672 call _getIterator tmpIter[98569]))
            Defer
            {
              {
                (98690 call _freeIterator _iterator[98665])
              }
            }
            { scopeless type
              (98679 'move' _indexOfInterest[98664](98676 call iteratorIndex _iterator[98665]))
            }
            ForLoop[98666]
            {
              unknown chunk[98683] "coforall index var" "index var" "insert auto destroy"
              (98685 'move' chunk[98683] _indexOfInterest[98664])
              {
                {
                  unknown followMe[98576] locBlock[98355](98579 call *(379091 call . this[100860] c"rank")(98582 call range[64319](?)(379096 call . this[100860] c"intIdxType")))
                  (98585 'end of statement')
                  const tmp[98587] "const" "temp"(98589 call _computeBlock(98591 call .(98593 call locBlock[98355] parDim[98148]) c"size") numChunks[98146] chunk[98683](98599 call .(98601 call locBlock[98355] parDim[98148]) c"_high")(98605 call .(98607 call locBlock[98355] parDim[98148]) c"_low")(98611 call .(98613 call locBlock[98355] parDim[98148]) c"_low"))
                  (98618 call _check_tuple_var_decl tmp[98587] 2)
                  const lo[98621] "const"(98623 call tmp[98587] 0)
                  const hi[98626] "const"(98628 call tmp[98587] 1)
                  (98631 'end of statement')
                  (98633 call =(98635 call followMe[98576] parDim[98148])(98638 call chpl_build_bounded_range lo[98621] hi[98626]))
                  if(98642 call _cond_test debugDefaultDist[93395])
                  {
                    (98647 call chpl_debug_writeln "*** DI[" chunk[98683] "]: followMe = " followMe[98576])
                  }
                  (98653 yield followMe[98576])
                }
                (98659 call _downEndCount _coforallCount[98656] nil[44])
                (98658 'coforall loop')
              }
              label _continueLabel[98669]
              _indexOfInterest[98664]
              _iterator[98665]
            }
            label _breakLabel[98670]
            Defer
            {
              {
                (98712 call _endCountFree _coforallCount[98656])
              }
            }
            (98717 call _waitEndCount _coforallCount[98656] 1 numTasks[98657])
          }
          {
            const _coforallCount[98729] "const" "end count" "temp"
            (98786 'move' _coforallCount[98729](98783 call _endCountAlloc 1))
            unknown _indexOfInterest[98737] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98738] "expr temp" "temp"
            (98747 'move' _iterator[98738](98745 call _getIterator tmpIter[98569]))
            Defer
            {
              {
                (98763 call _freeIterator _iterator[98738])
              }
            }
            { scopeless type
              (98752 'move' _indexOfInterest[98737](98749 call iteratorIndex _iterator[98738]))
            }
            ForLoop[98739]
            {
              unknown chunk[98756] "coforall index var" "index var" "insert auto destroy"
              (98758 'move' chunk[98756] _indexOfInterest[98737])
              (98770 call _upEndCount _coforallCount[98729] 1)
              {
                {
                  unknown followMe[98469] locBlock[98355](98466 call *(379061 call . this[100860] c"rank")(98465 call range[64319](?)(379066 call . this[100860] c"intIdxType")))
                  (98472 'end of statement')
                  const tmp[98512] "const" "temp"(98511 call _computeBlock(98484 call .(98483 call locBlock[98355] parDim[98148]) c"size") numChunks[98146] chunk[98756](98494 call .(98493 call locBlock[98355] parDim[98148]) c"_high")(98501 call .(98500 call locBlock[98355] parDim[98148]) c"_low")(98508 call .(98507 call locBlock[98355] parDim[98148]) c"_low"))
                  (98519 call _check_tuple_var_decl tmp[98512] 2)
                  const lo[98474] "const"(98513 call tmp[98512] 0)
                  const hi[98476] "const"(98516 call tmp[98512] 1)
                  (98524 'end of statement')
                  (98533 call =(98528 call followMe[98469] parDim[98148])(98531 call chpl_build_bounded_range lo[98474] hi[98476]))
                  if(98561 call _cond_test debugDefaultDist[93395])
                  {
                    (98559 call chpl_debug_writeln "*** DI[" chunk[98756] "]: followMe = " followMe[98469])
                  }
                  (98567 yield followMe[98469])
                }
                (98732 call _downEndCount _coforallCount[98729] nil[44])
                (98731 'coforall loop')
              }
              label _continueLabel[98742]
              _indexOfInterest[98737]
              _iterator[98738]
            }
            label _breakLabel[98743]
            Defer
            {
              {
                (98774 call _endCountFree _coforallCount[98729])
              }
            }
            (98779 call _waitEndCount _coforallCount[98729] 1)
          }
        }
      }
    }
  }
  where {
    (96145 call == tag[96111] leader[447])
  }
  function DefaultRectangularDom[100790](?).these[98825](arg _mt[100866]:_MT[238], arg this[100864]:DefaultRectangularDom[100790](?), param arg tag[98822] :
  iterKind[453], arg followThis[98827]:_any[178](?), arg tasksPerLocale[98830] =
  dataParTasksPerLocale[93284], arg ignoreRunning[98834] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[98838] =
  dataParMinGranularity[93296], arg offset[98850] =
  (98849 call createTuple(379123 call . this[100864] c"rank")(379127 call . this[100864] c"intIdxType")(98847 call _cast(379131 call . this[100864] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method"
  {
    function anyStridable[98864](arg rangeTuple[98862]:_any[178](?), param arg i[98868] :
    int(64)[13] =
    0) param : _unknown[51]
    {
      (98909 return(98906 IfExpr (98880 call == i[98868](98878 call -(98874 call . rangeTuple[98862] c"size") 1)) then
      { scopeless
        (98886 call .(98885 call rangeTuple[98862] i[98868]) c"stridable")
      } else
      { scopeless
        (98904 call ||(98893 call .(98892 call rangeTuple[98862] i[98868]) c"stridable")(98903 call anyStridable rangeTuple[98862](98901 call + i[98868] 1)))
      } ))
    }
    if(98938 call _cond_test chpl__testParFlag[188346])
    {
      (98936 call chpl__testPar "default rectangular domain follower invoked on " followThis[98827])
    }
    if(98966 call _cond_test debugDefaultDist[93395])
    {
      (98964 call chpl_debug_writeln "In domain follower code: Following " followThis[98827])
    }
    unknown stridable[98981] "param"(98979 call ||(98972 call . this[100864] c"stridable")(98978 call anyStridable followThis[98827]))
    (98984 'end of statement')
    unknown block[98995](98993 call *(379149 call . this[100864] c"rank")(98992 call range[64319](?)(idxType =(379154 call . this[100864] c"intIdxType"))(stridable = stridable[98981])))
    (98998 'end of statement')
    if(99343 call _cond_test stridable[98981])
    {
      unknown strType[99004] "type variable"(99003 call chpl__signedType(379160 call . this[100864] c"intIdxType"))
      {
        unknown i[99214] 0
        unknown tmp[99215] "maybe param" "temp"
        (99227 'move' tmp[99215](99225 call chpl_compute_low_param_loop_bound 0(99011 call -(379165 call . this[100864] c"rank") 1)))
        unknown tmp[99216] "maybe param" "temp"
        (99237 'move' tmp[99216](99235 call chpl_compute_high_param_loop_bound 0(99232 call -(379244 call . this[100864] c"rank") 1)))
        unknown tmp[99217] "maybe param" "temp"
        (99240 'move' tmp[99217] 1)
        ParamForLoop[99242]
        { i[99214] tmp[99215] tmp[99216] tmp[99217]
          {
            const rStride[99022] "const"(99019 call .(99018 call(379170 call . this[100864] c"ranges") i[99214]) c"stride")
            (99025 'end of statement')
            const rSignedStride[99031] "const"(99029 call _cast strType[99004] rStride[99022])
            const fSignedStride[99044] "const"(99042 call _cast strType[99004](99038 call .(99037 call followThis[98827] i[99214]) c"stride"))
            (99047 'end of statement')
            if(99210 call _cond_test(99050 call > rStride[99022] 0))
            {
              const riStride[99056] "const"(99054 call _cast(379182 call . this[100864] c"intIdxType") rStride[99022])
              (99059 'end of statement')
              const low[99080] "const"(99078 call +(99065 call .(99064 call(379187 call . this[100864] c"ranges") i[99214]) c"alignedLowAsInt")(99076 call *(99072 call .(99071 call followThis[98827] i[99214]) c"low") riStride[99056]))
              const high[99102] "const"(99100 call +(99087 call .(99086 call(379196 call . this[100864] c"ranges") i[99214]) c"alignedLowAsInt")(99098 call *(99094 call .(99093 call followThis[98827] i[99214]) c"high") riStride[99056]))
              const stride[99112] "const"(99110 call _cast strType[99004](99107 call * rSignedStride[99031] fSignedStride[99044]))
              (99115 'end of statement')
              (99127 call =(99119 call block[98995] i[99214])(99125 call chpl_by(99122 call chpl_build_bounded_range low[99080] high[99102]) stride[99112]))
            }
            {
              const irStride[99136] "const"(99134 call _cast(379213 call . this[100864] c"intIdxType")(99131 call - rStride[99022]))
              (99139 'end of statement')
              const low[99160] "const"(99158 call -(99145 call .(99144 call(379218 call . this[100864] c"ranges") i[99214]) c"alignedHighAsInt")(99156 call *(99152 call .(99151 call followThis[98827] i[99214]) c"high") irStride[99136]))
              const high[99182] "const"(99180 call -(99167 call .(99166 call(379227 call . this[100864] c"ranges") i[99214]) c"alignedHighAsInt")(99178 call *(99174 call .(99173 call followThis[98827] i[99214]) c"low") irStride[99136]))
              const stride[99192] "const"(99190 call _cast strType[99004](99187 call * rSignedStride[99031] fSignedStride[99044]))
              (99195 'end of statement')
              (99207 call =(99199 call block[98995] i[99214])(99205 call chpl_by(99202 call chpl_build_bounded_range low[99160] high[99182]) stride[99192]))
            }
          }
        }
        label _unused_continueLabel[99219]
        label _breakLabel[99218]
      }
    }
    {
      {
        unknown i[99305] 0
        unknown tmp[99306] "maybe param" "temp"
        (99318 'move' tmp[99306](99316 call chpl_compute_low_param_loop_bound 0(99254 call -(379249 call . this[100864] c"rank") 1)))
        unknown tmp[99307] "maybe param" "temp"
        (99328 'move' tmp[99307](99326 call chpl_compute_high_param_loop_bound 0(99323 call -(379280 call . this[100864] c"rank") 1)))
        unknown tmp[99308] "maybe param" "temp"
        (99331 'move' tmp[99308] 1)
        ParamForLoop[99333]
        { i[99305] tmp[99306] tmp[99307] tmp[99308]
          (99302 call =(99261 call block[98995] i[99305])(99300 call chpl_build_bounded_range(99279 call +(99266 call .(99265 call(379256 call . this[100864] c"ranges") i[99305]) c"_low")(99277 call _cast(379263 call . this[100864] c"intIdxType")(99273 call .(99272 call followThis[98827] i[99305]) c"low")))(99298 call +(99285 call .(99284 call(379268 call . this[100864] c"ranges") i[99305]) c"_low")(99296 call _cast(379275 call . this[100864] c"intIdxType")(99292 call .(99291 call followThis[98827] i[99305]) c"high")))))
        }
        label _unused_continueLabel[99310]
        label _breakLabel[99309]
      }
    }
    if(99444 call _cond_test(99349 call ==(379285 call . this[100864] c"rank") 1))
    {
      {
        unknown _indexOfInterest[99363] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99364] "expr temp" "temp"
        (99372 'move' _iterator[99364](99355 call _getIteratorZip block[98995]))
        Defer
        {
          {
            (99388 call _freeIterator _iterator[99364])
          }
        }
        { scopeless type
          (99377 'move' _indexOfInterest[99363](99374 call iteratorIndex _iterator[99364]))
        }
        ForLoop[99365]
        {
          unknown i[99381] "index var" "insert auto destroy"
          (99383 'move' i[99381] _indexOfInterest[99363])
          {
            (99360 yield(99359 call(379290 call . this[100864] c"chpl_intToIdx") i[99381]))
          }
          label _continueLabel[99368]
          _indexOfInterest[99363]
          _iterator[99364]
        }
        label _breakLabel[99369]
      }
    }
    {
      {
        unknown _indexOfInterest[99409] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99410] "expr temp" "temp"
        (99419 'move' _iterator[99410](99417 call _getIterator(99401 call(379295 call . this[100864] c"these_help") 0 block[98995])))
        Defer
        {
          {
            (99436 call _freeIterator _iterator[99410])
          }
        }
        { scopeless type
          (99425 'move' _indexOfInterest[99409](99422 call iteratorIndex _iterator[99410]))
        }
        ForLoop[99411]
        {
          unknown i[99429] "index var" "insert auto destroy"
          (99431 'move' i[99429] _indexOfInterest[99409])
          {
            (99406 yield(99405 call(379300 call . this[100864] c"chpl_intToIdx") i[99429]))
          }
          label _continueLabel[99414]
          _indexOfInterest[99409]
          _iterator[99410]
        }
        label _breakLabel[99415]
      }
    }
  }
  where {
    (98858 call == tag[98822] follower[449])
  }
  function DefaultRectangularDom[100790](?).dsiMember[99460](arg _mt[100870]:_MT[238], arg this[100868]:DefaultRectangularDom[100790](?), arg ind[99457] :
  (99455 call *(379306 call . this[100868] c"rank")(379311 call . this[100868] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    {
      unknown i[99492] 0
      unknown tmp[99493] "maybe param" "temp"
      (99505 'move' tmp[99493](99503 call chpl_compute_low_param_loop_bound 0(99465 call -(379316 call . this[100868] c"rank") 1)))
      unknown tmp[99494] "maybe param" "temp"
      (99515 'move' tmp[99494](99513 call chpl_compute_high_param_loop_bound 0(99510 call -(379329 call . this[100868] c"rank") 1)))
      unknown tmp[99495] "maybe param" "temp"
      (99518 'move' tmp[99495] 1)
      ParamForLoop[99520]
      { i[99492] tmp[99493] tmp[99494] tmp[99495]
        if(99487 call _cond_test(99482 call !(99481 call(99473 call .(99472 call(379321 call . this[100868] c"ranges") i[99492]) c"contains")(99479 call ind[99457] i[99492]))))
        {
          (99485 return 0)
        }
      }
      label _unused_continueLabel[99497]
      label _breakLabel[99496]
    }
    (99531 return 1)
  }
  function DefaultRectangularDom[100790](?).dsiIndexOrder[99544](arg _mt[100874]:_MT[238], arg this[100872]:DefaultRectangularDom[100790](?), arg ind[99541] :
  (99539 call *(379334 call . this[100872] c"rank")(379339 call . this[100872] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    unknown totOrder[99547](379343 call . this[100872] c"intIdxType")
    (99550 'end of statement')
    unknown blk[99554] 1(379347 call . this[100872] c"intIdxType")
    (99557 'end of statement')
    {
      unknown d[99626] 0
      unknown tmp[99627] "maybe param" "temp"
      (99638 'move' tmp[99627](99636 call chpl_compute_low_param_loop_bound 0(99561 call -(379352 call . this[100872] c"rank") 1)))
      unknown tmp[99628] "maybe param" "temp"
      (99648 'move' tmp[99628](99646 call chpl_compute_high_param_loop_bound 0(99643 call -(379381 call . this[100872] c"rank") 1)))
      unknown tmp[99629] "maybe param" "temp"
      (99651 'move' tmp[99629](99566 call - 1))
      ParamForLoop[99653]
      { d[99626] tmp[99627] tmp[99628] tmp[99629]
        {
          const orderD[99585] "const"(99584 call(99576 call .(99573 call(379357 call . this[100872] c"ranges") d[99626]) c"indexOrder")(99582 call ind[99541] d[99626]))
          (99588 'end of statement')
          if(99602 call _cond_test(99597 call == orderD[99585](99595 call _cast(379365 call . this[100872] c"intIdxType")(99592 call - 1))))
          {
            (99600 return orderD[99585])
          }
          (99612 call += totOrder[99547](99610 call * orderD[99585] blk[99554]))
          (99623 call *= blk[99554](99620 call .(99619 call(379375 call . this[100872] c"ranges") d[99626]) c"size"))
        }
      }
      label _unused_continueLabel[99631]
      label _breakLabel[99630]
    }
    (99663 return totOrder[99547])
  }
  function DefaultRectangularDom[100790](?).dsiDims[99669](arg _mt[100878]:_MT[238], arg this[100876]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method"
  {
    (99672 return(379387 call . this[100876] c"ranges"))
  }
  function DefaultRectangularDom[100790](?).dsiDim[99683](arg _mt[100882]:_MT[238], arg this[100880]:DefaultRectangularDom[100790](?), arg d[99680] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (99689 return(99688 call(379392 call . this[100880] c"ranges") d[99680]))
  }
  function DefaultRectangularDom[100790](?).dsiDim[99700](arg _mt[100886]:_MT[238], arg this[100884]:DefaultRectangularDom[100790](?), param arg d[99697] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (99706 return(99705 call(379398 call . this[100884] c"ranges") d[99697]))
  }
  function DefaultRectangularDom[100790](?).dsiNumIndices[99713](arg _mt[100890]:_MT[238], arg this[100888]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown sum[99719](99717 call _cast(379403 call . this[100888] c"intIdxType") 1)
    (99722 'end of statement')
    {
      unknown i[99742] 0
      unknown tmp[99743] "maybe param" "temp"
      (99755 'move' tmp[99743](99753 call chpl_compute_low_param_loop_bound 0(99727 call -(379408 call . this[100888] c"rank") 1)))
      unknown tmp[99744] "maybe param" "temp"
      (99765 'move' tmp[99744](99763 call chpl_compute_high_param_loop_bound 0(99760 call -(379420 call . this[100888] c"rank") 1)))
      unknown tmp[99745] "maybe param" "temp"
      (99768 'move' tmp[99745] 1)
      ParamForLoop[99770]
      { i[99742] tmp[99743] tmp[99744] tmp[99745]
        (99739 call *= sum[99719](99736 call .(99735 call(379414 call . this[100888] c"ranges") i[99742]) c"size"))
      }
      label _unused_continueLabel[99747]
      label _breakLabel[99746]
    }
    (99780 return sum[99719])
  }
  function DefaultRectangularDom[100790](?).dsiLow[99786](arg _mt[100894]:_MT[238], arg this[100892]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99872 call _cond_test(99790 call ==(379426 call . this[100892] c"rank") 1))
    {
      (99799 return(99796 call .(99795 call(379431 call . this[100892] c"ranges") 0) c"low"))
    }
    {
      unknown result[99806](99804 call *(379436 call . this[100892] c"rank")(379441 call . this[100892] c"idxType"))
      (99809 'end of statement')
      {
        unknown i[99832] 0
        unknown tmp[99833] "maybe param" "temp"
        (99845 'move' tmp[99833](99843 call chpl_compute_low_param_loop_bound 0(99814 call -(379446 call . this[100892] c"rank") 1)))
        unknown tmp[99834] "maybe param" "temp"
        (99855 'move' tmp[99834](99853 call chpl_compute_high_param_loop_bound 0(99850 call -(379459 call . this[100892] c"rank") 1)))
        unknown tmp[99835] "maybe param" "temp"
        (99858 'move' tmp[99835] 1)
        ParamForLoop[99860]
        { i[99832] tmp[99833] tmp[99834] tmp[99835]
          (99829 call =(99821 call result[99806] i[99832])(99826 call .(99825 call(379453 call . this[100892] c"ranges") i[99832]) c"low"))
        }
        label _unused_continueLabel[99837]
        label _breakLabel[99836]
      }
      (99870 return result[99806])
    }
  }
  function DefaultRectangularDom[100790](?).dsiHigh[99881](arg _mt[100898]:_MT[238], arg this[100896]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99967 call _cond_test(99885 call ==(379465 call . this[100896] c"rank") 1))
    {
      (99894 return(99891 call .(99890 call(379470 call . this[100896] c"ranges") 0) c"high"))
    }
    {
      unknown result[99901](99899 call *(379475 call . this[100896] c"rank")(379480 call . this[100896] c"idxType"))
      (99904 'end of statement')
      {
        unknown i[99927] 0
        unknown tmp[99928] "maybe param" "temp"
        (99940 'move' tmp[99928](99938 call chpl_compute_low_param_loop_bound 0(99909 call -(379485 call . this[100896] c"rank") 1)))
        unknown tmp[99929] "maybe param" "temp"
        (99950 'move' tmp[99929](99948 call chpl_compute_high_param_loop_bound 0(99945 call -(379498 call . this[100896] c"rank") 1)))
        unknown tmp[99930] "maybe param" "temp"
        (99953 'move' tmp[99930] 1)
        ParamForLoop[99955]
        { i[99927] tmp[99928] tmp[99929] tmp[99930]
          (99924 call =(99916 call result[99901] i[99927])(99921 call .(99920 call(379492 call . this[100896] c"ranges") i[99927]) c"high"))
        }
        label _unused_continueLabel[99932]
        label _breakLabel[99931]
      }
      (99965 return result[99901])
    }
  }
  function DefaultRectangularDom[100790](?).dsiAlignedLow[99976](arg _mt[100902]:_MT[238], arg this[100900]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100062 call _cond_test(99980 call ==(379504 call . this[100900] c"rank") 1))
    {
      (99989 return(99986 call .(99985 call(379509 call . this[100900] c"ranges") 0) c"alignedLow"))
    }
    {
      unknown result[99996](99994 call *(379514 call . this[100900] c"rank")(379519 call . this[100900] c"idxType"))
      (99999 'end of statement')
      {
        unknown i[100022] 0
        unknown tmp[100023] "maybe param" "temp"
        (100035 'move' tmp[100023](100033 call chpl_compute_low_param_loop_bound 0(100004 call -(379524 call . this[100900] c"rank") 1)))
        unknown tmp[100024] "maybe param" "temp"
        (100045 'move' tmp[100024](100043 call chpl_compute_high_param_loop_bound 0(100040 call -(379537 call . this[100900] c"rank") 1)))
        unknown tmp[100025] "maybe param" "temp"
        (100048 'move' tmp[100025] 1)
        ParamForLoop[100050]
        { i[100022] tmp[100023] tmp[100024] tmp[100025]
          (100019 call =(100011 call result[99996] i[100022])(100016 call .(100015 call(379531 call . this[100900] c"ranges") i[100022]) c"alignedLow"))
        }
        label _unused_continueLabel[100027]
        label _breakLabel[100026]
      }
      (100060 return result[99996])
    }
  }
  function DefaultRectangularDom[100790](?).dsiAlignedHigh[100071](arg _mt[100906]:_MT[238], arg this[100904]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100157 call _cond_test(100075 call ==(379543 call . this[100904] c"rank") 1))
    {
      (100084 return(100081 call .(100080 call(379548 call . this[100904] c"ranges") 0) c"alignedHigh"))
    }
    {
      unknown result[100091](100089 call *(379553 call . this[100904] c"rank")(379558 call . this[100904] c"idxType"))
      (100094 'end of statement')
      {
        unknown i[100117] 0
        unknown tmp[100118] "maybe param" "temp"
        (100130 'move' tmp[100118](100128 call chpl_compute_low_param_loop_bound 0(100099 call -(379563 call . this[100904] c"rank") 1)))
        unknown tmp[100119] "maybe param" "temp"
        (100140 'move' tmp[100119](100138 call chpl_compute_high_param_loop_bound 0(100135 call -(379576 call . this[100904] c"rank") 1)))
        unknown tmp[100120] "maybe param" "temp"
        (100143 'move' tmp[100120] 1)
        ParamForLoop[100145]
        { i[100117] tmp[100118] tmp[100119] tmp[100120]
          (100114 call =(100106 call result[100091] i[100117])(100111 call .(100110 call(379570 call . this[100904] c"ranges") i[100117]) c"alignedHigh"))
        }
        label _unused_continueLabel[100122]
        label _breakLabel[100121]
      }
      (100155 return result[100091])
    }
  }
  function DefaultRectangularDom[100790](?).dsiStride[100166](arg _mt[100910]:_MT[238], arg this[100908]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100255 call _cond_test(100170 call ==(379582 call . this[100908] c"rank") 1))
    {
      (100179 return(100176 call .(100175 call(379587 call . this[100908] c"ranges") 0) c"stride"))
    }
    {
      unknown result[100189](100187 call *(379592 call . this[100908] c"rank")(100186 call chpl__signedType(379596 call . this[100908] c"intIdxType")))
      (100192 'end of statement')
      {
        unknown i[100215] 0
        unknown tmp[100216] "maybe param" "temp"
        (100228 'move' tmp[100216](100226 call chpl_compute_low_param_loop_bound 0(100197 call -(379601 call . this[100908] c"rank") 1)))
        unknown tmp[100217] "maybe param" "temp"
        (100238 'move' tmp[100217](100236 call chpl_compute_high_param_loop_bound 0(100233 call -(379614 call . this[100908] c"rank") 1)))
        unknown tmp[100218] "maybe param" "temp"
        (100241 'move' tmp[100218] 1)
        ParamForLoop[100243]
        { i[100215] tmp[100216] tmp[100217] tmp[100218]
          (100212 call =(100204 call result[100189] i[100215])(100209 call .(100208 call(379608 call . this[100908] c"ranges") i[100215]) c"stride"))
        }
        label _unused_continueLabel[100220]
        label _breakLabel[100219]
      }
      (100253 return result[100189])
    }
  }
  function DefaultRectangularDom[100790](?).dsiAlignment[100264](arg _mt[100914]:_MT[238], arg this[100912]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100350 call _cond_test(100268 call ==(379620 call . this[100912] c"rank") 1))
    {
      (100277 return(100274 call .(100273 call(379625 call . this[100912] c"ranges") 0) c"alignment"))
    }
    {
      unknown result[100284](100282 call *(379630 call . this[100912] c"rank")(379635 call . this[100912] c"idxType"))
      (100287 'end of statement')
      {
        unknown i[100310] 0
        unknown tmp[100311] "maybe param" "temp"
        (100323 'move' tmp[100311](100321 call chpl_compute_low_param_loop_bound 0(100292 call -(379640 call . this[100912] c"rank") 1)))
        unknown tmp[100312] "maybe param" "temp"
        (100333 'move' tmp[100312](100331 call chpl_compute_high_param_loop_bound 0(100328 call -(379653 call . this[100912] c"rank") 1)))
        unknown tmp[100313] "maybe param" "temp"
        (100336 'move' tmp[100313] 1)
        ParamForLoop[100338]
        { i[100310] tmp[100311] tmp[100312] tmp[100313]
          (100307 call =(100299 call result[100284] i[100310])(100304 call .(100303 call(379647 call . this[100912] c"ranges") i[100310]) c"alignment"))
        }
        label _unused_continueLabel[100315]
        label _breakLabel[100314]
      }
      (100348 return result[100284])
    }
  }
  function DefaultRectangularDom[100790](?).dsiFirst[100359](arg _mt[100918]:_MT[238], arg this[100916]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100445 call _cond_test(100363 call ==(379659 call . this[100916] c"rank") 1))
    {
      (100372 return(100369 call .(100368 call(379664 call . this[100916] c"ranges") 0) c"first"))
    }
    {
      unknown result[100379](100377 call *(379669 call . this[100916] c"rank")(379674 call . this[100916] c"idxType"))
      (100382 'end of statement')
      {
        unknown i[100405] 0
        unknown tmp[100406] "maybe param" "temp"
        (100418 'move' tmp[100406](100416 call chpl_compute_low_param_loop_bound 0(100387 call -(379679 call . this[100916] c"rank") 1)))
        unknown tmp[100407] "maybe param" "temp"
        (100428 'move' tmp[100407](100426 call chpl_compute_high_param_loop_bound 0(100423 call -(379692 call . this[100916] c"rank") 1)))
        unknown tmp[100408] "maybe param" "temp"
        (100431 'move' tmp[100408] 1)
        ParamForLoop[100433]
        { i[100405] tmp[100406] tmp[100407] tmp[100408]
          (100402 call =(100394 call result[100379] i[100405])(100399 call .(100398 call(379686 call . this[100916] c"ranges") i[100405]) c"first"))
        }
        label _unused_continueLabel[100410]
        label _breakLabel[100409]
      }
      (100443 return result[100379])
    }
  }
  function DefaultRectangularDom[100790](?).dsiLast[100454](arg _mt[100922]:_MT[238], arg this[100920]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100540 call _cond_test(100458 call ==(379698 call . this[100920] c"rank") 1))
    {
      (100467 return(100464 call .(100463 call(379703 call . this[100920] c"ranges") 0) c"last"))
    }
    {
      unknown result[100474](100472 call *(379708 call . this[100920] c"rank")(379713 call . this[100920] c"idxType"))
      (100477 'end of statement')
      {
        unknown i[100500] 0
        unknown tmp[100501] "maybe param" "temp"
        (100513 'move' tmp[100501](100511 call chpl_compute_low_param_loop_bound 0(100482 call -(379718 call . this[100920] c"rank") 1)))
        unknown tmp[100502] "maybe param" "temp"
        (100523 'move' tmp[100502](100521 call chpl_compute_high_param_loop_bound 0(100518 call -(379731 call . this[100920] c"rank") 1)))
        unknown tmp[100503] "maybe param" "temp"
        (100526 'move' tmp[100503] 1)
        ParamForLoop[100528]
        { i[100500] tmp[100501] tmp[100502] tmp[100503]
          (100497 call =(100489 call result[100474] i[100500])(100494 call .(100493 call(379725 call . this[100920] c"ranges") i[100500]) c"last"))
        }
        label _unused_continueLabel[100505]
        label _breakLabel[100504]
      }
      (100538 return result[100474])
    }
  }
  function DefaultRectangularDom[100790](?).dsiBuildArray[100551](arg _mt[100926]:_MT[238], arg this[100924]:DefaultRectangularDom[100790](?), arg eltType[100549]:_any[178](?), param arg initElts[100554] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (100578 return(100559 'new'(_chpl_manager = unmanaged[220](?))(100577 call DefaultRectangularArr[379736](?)(eltType = eltType[100549])(rank =(379742 call . this[100924] c"rank"))(idxType =(379747 call . this[100924] c"idxType"))(stridable =(379752 call . this[100924] c"stridable"))(dom =(100573 call _to_unmanaged this[100924]))(initElts = initElts[100554]))))
  }
  function DefaultRectangularDom[100790](?).dsiBuildArrayWith[100587](arg _mt[100930]:_MT[238], arg this[100928]:DefaultRectangularDom[100790](?), arg eltType[100585]:_any[178](?), arg data[100593] :
  (100592 call _ddata[11696](?) eltType[100585]), arg allocSize[100597] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown allocRange[100616](100614 call #(100611 call chpl_build_low_bounded_range(100608 call .(100607 call(379767 call . this[100928] c"ranges") 0) c"low")) allocSize[100597])(100603 call range[64319](?)(379762 call . this[100928] c"idxType"))
    (100619 'end of statement')
    (100644 return(100623 'new'(_chpl_manager = unmanaged[220](?))(100643 call DefaultRectangularArr[379736](?)(eltType = eltType[100585])(rank =(379775 call . this[100928] c"rank"))(idxType =(379780 call . this[100928] c"idxType"))(stridable =(379785 call . this[100928] c"stridable"))(initElts = 1)(dom =(100639 call _to_unmanaged this[100928]))(data = data[100593]))))
  }
  function DefaultRectangularDom[100790](?).dsiLocalSlice[100652](arg _mt[100934]:_MT[238], arg this[100932]:DefaultRectangularDom[100790](?), arg ranges[100650]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (100675 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularDom[100790](?).dsiTargetLocales[100682](arg _mt[100938]:_MT[238], arg this[100936]:DefaultRectangularDom[100790](?)) : _unknown[51] "method" "primary method"
  {
    (100691 return(100689 call chpl__buildArrayExpr(100686 call chpl_localeID_to_locale(100685 '_wide_get_locale' this[100936]))))
  }
  function DefaultRectangularDom[100790](?).dsiHasSingleLocalSubdomain[100698](arg _mt[100942]:_MT[238], arg this[100940]:DefaultRectangularDom[100790](?)) param : _unknown[51] "method" "primary method"
  {
    (100701 return 1)
  }
  function DefaultRectangularDom[100790](?).dsiLocalSubdomain[100712](arg _mt[100946]:_MT[238], arg this[100944]:DefaultRectangularDom[100790](?), arg loc[100709] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(100746 call _cond_test(100719 call ==(100716 call chpl_localeID_to_locale(100715 '_wide_get_locale' this[100944])) loc[100709]))
    {
      (100728 return(100727 call _getDomain(100725 call _to_unmanaged this[100944])))
    }
    {
      unknown a[100738](100736 call chpl__buildDomainRuntimeType defaultDist[94053](379796 call . this[100944] c"rank")(379801 call . this[100944] c"idxType")(379806 call . this[100944] c"stridable"))
      (100741 'end of statement')
      (100744 return a[100738])
    }
  }
  function DefaultRectangularDom[100790](?).dsiLocalSubdomains[100759](arg _mt[100950]:_MT[238], arg this[100948]:DefaultRectangularDom[100790](?), arg loc[100756] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (100765 yield(100764 call(379812 call . this[100948] c"dsiLocalSubdomain") loc[100756]))
  }
  function DefaultRectangularDom[100790](?).chpl_intToIdx[100774](arg _mt[100954]:_MT[238], arg this[100952]:DefaultRectangularDom[100790](?), arg i[100772]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (100784 return(100783 call chpl__intToIdx(100778 call . this[100952] c"idxType") i[100772]))
  }
  type DefaultRectangularDom[100790](?) val super[355703]:BaseRectangularDom[146935](?) "super class" unknown dist[94111] unmanaged DefaultDist[415487] unknown ranges[94127](94125 call * rank[146854](94124 call range[64319](?) idxType[146858] bounded[64208] stridable[146862])) type _serialized_domain[94250](?) unknown rank[94230] "param" unknown idxType[94234] "type variable" unknown stridable[94237] "param" unknown dims[94241] unknown isDefaultRectangular[94245] "param"
  type unmanaged DefaultRectangularDom?[415535](?)
  type DefaultRectangularDom?[415532](?)
  type unmanaged DefaultRectangularDom[415445](?)
  type DefaultRectangularDom[415337](?)
  type DefaultRectangularDom[372780](?)
  function chpl__intToIdx[100961](arg idxType[100959]:_any[178](?), arg i[100964] :
  integral[199](?), arg j[100968]:_any[178](?) ...) : _unknown[51] "inline"
  {
    const first[100976] "const"(100975 call chpl__intToIdx idxType[100959] i[100964])
    (100979 'end of statement')
    const rest[100987] "const"(100986 call chpl__intToIdx idxType[100959](100985 'expand_tuple' j[100968]))
    (100990 'end of statement')
    (100997 return(100995 call _build_tuple first[100976](100993 'expand_tuple' rest[100987])))
  }
  function chpl__intToIdx[101005](arg idxType[101003]:_any[178](?), arg i[101008] :
  integral[199](?), arg j[101012] :
  integral[199](?)) : _unknown[51] "inline"
  {
    (101028 return(101026 call _build_tuple(101019 call chpl__intToIdx idxType[101003] i[101008])(101024 call chpl__intToIdx idxType[101003] j[101012])))
  }
  function chpl__intToIdx[101037](arg idxType[101035]:_any[178](?), arg i[101040] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    (101049 return(101048 call chpl__intToIdx idxType[101035](101047 'expand_tuple' i[101040])))
  }
  function _remoteAccessData[101221](?).theData[101144](arg _mt[101225]:_MT[238], arg this[101223]:_remoteAccessData[101221](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(101155 call _cond_test(379847 call . this[101223] c"stridable"))
    {
      (101148 return(379852 call . this[101223] c"data"))
    }
    {
      (101152 return(379857 call . this[101223] c"shiftedData"))
    }
  }
  function _remoteAccessData[101221](?).getDataElem[101166](arg _mt[101229]:_MT[238], arg this[101227]:_remoteAccessData[101221](?), arg i[101164]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    if(101183 call _cond_test(379862 call . this[101227] c"stridable"))
    {
      (101173 return(101172 call(379868 call . this[101227] c"dataElem") i[101164]))
    }
    {
      (101180 return(101179 call(379875 call . this[101227] c"shiftedDataElem") i[101164]))
    }
  }
  function _remoteAccessData[101221](?).dataElem[101194](arg _mt[101233]:_MT[238], arg this[101231]:_remoteAccessData[101221](?), arg i[101192]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101200 return(101199 call(379881 call . this[101231] c"data") i[101192]))
  }
  function _remoteAccessData[101221](?).shiftedDataElem[101209](arg _mt[101237]:_MT[238], arg this[101235]:_remoteAccessData[101221](?), arg i[101207]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101215 return(101214 call(379887 call . this[101235] c"shiftedData") i[101207]))
  }
  type _remoteAccessData[101221](?) unknown eltType[101055] "type variable" unknown rank[101059] "param" int(64)[13] unknown idxType[101063] "type variable" unknown stridable[101067] "param" bool[10] unknown blkChanged[101073] "param" 0 bool[10] unknown off[101081](101079 call * rank[101059] idxType[101063]) unknown blk[101092](101090 call * rank[101059](101089 call chpl__idxTypeToIntIdxType idxType[101063])) unknown str[101106](101104 call * rank[101059](101103 call chpl__signedType(101101 call chpl__idxTypeToIntIdxType idxType[101063]))) unknown origin[101114](101113 call chpl__idxTypeToIntIdxType idxType[101063]) unknown factoredOffs[101122](101121 call chpl__idxTypeToIntIdxType idxType[101063]) unknown data[101130](101129 call _ddata[11696](?) eltType[101055]) unknown shiftedData[101138](101137 call _ddata[11696](?) eltType[101055])
  function _remoteAccessData[101221](?).getDataIndex[101247](arg _mt[101252]:_MT[238], arg this[101249]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg ind[101244] :
  (379893 call . this[101249] c"idxType")) : _unknown[51] "inline" "method"
  {
    (101266 return(101265 call(101257 call . this[101249] c"getDataIndex")(101263 call chpl__tuplify ind[101244])))
  }
  function _remoteAccessData[101221](?).getDataIndex[101281](arg _mt[101286]:_MT[238], arg this[101283]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg ind[101278] :
  (101276 call *(379899 call . this[101283] c"rank")(379904 call . this[101283] c"idxType"))) : _unknown[51] "inline" "method"
  {
    if(101691 call _cond_test(379909 call . this[101283] c"stridable"))
    {
      unknown sum[101290](379914 call . this[101283] c"origin")
      (101293 'end of statement')
      {
        unknown i[101343] 0
        unknown tmp[101344] "maybe param" "temp"
        (101356 'move' tmp[101344](101354 call chpl_compute_low_param_loop_bound 0(101298 call -(379919 call . this[101283] c"rank") 1)))
        unknown tmp[101345] "maybe param" "temp"
        (101366 'move' tmp[101345](101364 call chpl_compute_high_param_loop_bound 0(101361 call -(379950 call . this[101283] c"rank") 1)))
        unknown tmp[101346] "maybe param" "temp"
        (101369 'move' tmp[101346] 1)
        ParamForLoop[101371]
        { i[101343] tmp[101344] tmp[101345] tmp[101346]
          (101340 call += sum[101290](101338 call /(101323 call *(101317 call -(101309 call chpl__idxToInt(101307 call ind[101278] i[101343]))(101316 call chpl__idxToInt(101314 call(379927 call . this[101283] c"off") i[101343])))(101322 call(379933 call . this[101283] c"blk") i[101343]))(101336 call _cast(101335 call chpl__idxTypeToIntIdxType(379945 call . this[101283] c"idxType"))(101331 call abs(101329 call(379939 call . this[101283] c"str") i[101343])))))
        }
        label _unused_continueLabel[101348]
        label _breakLabel[101347]
      }
      (101381 return sum[101290])
    }
    {
      if(101686 call _cond_test(101388 call &&(101385 call ==(379956 call . this[101283] c"rank") 1) earlyShiftData[93435]))
      {
        if(101417 call _cond_test(379962 call . this[101283] c"blkChanged"))
        {
          (101404 return(101402 call *(101397 call chpl__idxToInt(101395 call ind[101278] 0))(101401 call(379968 call . this[101283] c"blk") 0)))
        }
        {
          (101414 return(101413 call chpl__idxToInt(101411 call ind[101278] 0)))
        }
      }
      {
        unknown sum[101434](101431 IfExpr  earlyShiftData[93435] then
        { scopeless
          (101428 call _cast(101427 call chpl__idxTypeToIntIdxType(379975 call . this[101283] c"idxType")) 0)
        } else
        { scopeless
          (379980 call . this[101283] c"origin")
        } )
        (101437 'end of statement')
        if(101666 call _cond_test(379985 call . this[101283] c"blkChanged"))
        {
          {
            unknown i[101465] 0
            unknown tmp[101466] "maybe param" "temp"
            (101478 'move' tmp[101466](101476 call chpl_compute_low_param_loop_bound 0(101443 call -(379990 call . this[101283] c"rank") 1)))
            unknown tmp[101467] "maybe param" "temp"
            (101488 'move' tmp[101467](101486 call chpl_compute_high_param_loop_bound 0(101483 call -(380004 call . this[101283] c"rank") 1)))
            unknown tmp[101468] "maybe param" "temp"
            (101491 'move' tmp[101468] 1)
            ParamForLoop[101493]
            { i[101465] tmp[101466] tmp[101467] tmp[101468]
              {
                (101461 call += sum[101434](101459 call *(101454 call chpl__idxToInt(101452 call ind[101278] i[101465]))(101458 call(379998 call . this[101283] c"blk") i[101465])))
              }
            }
            label _unused_continueLabel[101470]
            label _breakLabel[101469]
          }
        }
        {
          if(101661 call _cond_test(101508 call == storageOrder[93468] RMO[93450]))
          {
            {
              unknown i[101535] 0
              unknown tmp[101536] "maybe param" "temp"
              (101548 'move' tmp[101536](101546 call chpl_compute_low_param_loop_bound 0(101513 call -(380010 call . this[101283] c"rank") 2)))
              unknown tmp[101537] "maybe param" "temp"
              (101558 'move' tmp[101537](101556 call chpl_compute_high_param_loop_bound 0(101553 call -(380024 call . this[101283] c"rank") 2)))
              unknown tmp[101538] "maybe param" "temp"
              (101561 'move' tmp[101538] 1)
              ParamForLoop[101563]
              { i[101535] tmp[101536] tmp[101537] tmp[101538]
                {
                  (101531 call += sum[101434](101529 call *(101524 call chpl__idxToInt(101522 call ind[101278] i[101535]))(101528 call(380018 call . this[101283] c"blk") i[101535])))
                }
              }
              label _unused_continueLabel[101540]
              label _breakLabel[101539]
            }
            (101584 call += sum[101434](101583 call chpl__idxToInt(101581 call ind[101278](101578 call -(380031 call . this[101283] c"rank") 1))))
          }
          {
            {
              unknown i[101612] 0
              unknown tmp[101613] "maybe param" "temp"
              (101625 'move' tmp[101613](101623 call chpl_compute_low_param_loop_bound 1(101590 call -(380036 call . this[101283] c"rank") 1)))
              unknown tmp[101614] "maybe param" "temp"
              (101635 'move' tmp[101614](101633 call chpl_compute_high_param_loop_bound 1(101630 call -(380050 call . this[101283] c"rank") 1)))
              unknown tmp[101615] "maybe param" "temp"
              (101638 'move' tmp[101615] 1)
              ParamForLoop[101640]
              { i[101612] tmp[101613] tmp[101614] tmp[101615]
                {
                  (101608 call += sum[101434](101606 call *(101601 call chpl__idxToInt(101599 call ind[101278] i[101612]))(101605 call(380044 call . this[101283] c"blk") i[101612])))
                }
              }
              label _unused_continueLabel[101617]
              label _breakLabel[101616]
            }
            (101658 call += sum[101434](101657 call chpl__idxToInt(101655 call ind[101278] 0)))
          }
        }
        if(101678 call _cond_test(101671 call ! earlyShiftData[93435]))
        {
          (101675 call -= sum[101434](380059 call . this[101283] c"factoredOffs"))
        }
        (101684 return sum[101434])
      }
    }
  }
  function _remoteAccessData[101221](?).computeFactoredOffs[101701](arg _mt[101706]:_MT[238], arg this[101703]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?)) : _unknown[51] "method" "no return value for void"
  {
    (101710 call =(380065 call . this[101703] c"factoredOffs") 0)
    {
      unknown i[101742] 0
      unknown tmp[101743] "maybe param" "temp"
      (101755 'move' tmp[101743](101753 call chpl_compute_low_param_loop_bound 0(101717 call -(380070 call . this[101703] c"rank") 1)))
      unknown tmp[101744] "maybe param" "temp"
      (101765 'move' tmp[101744](101763 call chpl_compute_high_param_loop_bound 0(101760 call -(380097 call . this[101703] c"rank") 1)))
      unknown tmp[101745] "maybe param" "temp"
      (101768 'move' tmp[101745] 1)
      ParamForLoop[101770]
      { i[101742] tmp[101743] tmp[101744] tmp[101745]
        {
          (101738 call =(380075 call . this[101703] c"factoredOffs")(101736 call +(380080 call . this[101703] c"factoredOffs")(101734 call *(101726 call(380085 call . this[101703] c"blk") i[101742])(101733 call chpl__idxToInt(101731 call(380091 call . this[101703] c"off") i[101742])))))
        }
      }
      label _unused_continueLabel[101747]
      label _breakLabel[101746]
    }
  }
  function _remoteAccessData[101221](?).initShiftedData[101784](arg _mt[101789]:_MT[238], arg this[101786]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?)) : _unknown[51] "method" "no return value for void"
  {
    if(101843 call _cond_test(101795 call && earlyShiftData[93435](101793 call !(380103 call . this[101786] c"stridable"))))
    {
      unknown idxSignedType[101804] "type variable"(101803 call chpl__signedType(101801 call chpl__idxTypeToIntIdxType(380108 call . this[101786] c"idxType")))
      const shiftDist[101829] "const"(101826 IfExpr (101811 call isIntType(380113 call . this[101786] c"idxType")) then
      { scopeless
        (101814 call -(380118 call . this[101786] c"origin")(380123 call . this[101786] c"factoredOffs"))
      } else
      { scopeless
        (101824 call -(101818 call _cast idxSignedType[101804](380128 call . this[101786] c"origin"))(101822 call _cast idxSignedType[101804](380134 call . this[101786] c"factoredOffs")))
      } )
      (101832 'end of statement')
      (101840 call =(380140 call . this[101786] c"shiftedData")(101839 call _ddata_shift(380145 call . this[101786] c"eltType")(380150 call . this[101786] c"data") shiftDist[101829]))
    }
  }
  function _remoteAccessData[101221](?).strideAlignUp[101855](arg _mt[101862]:_MT[238], arg this[101859]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg lo[101853]:_any[178](?), arg r[101857]:_any[178](?)) : _unknown[51] "method"
  {
    (101916 return(101914 call +(101865 call . r[101857] c"low")(101912 call *(101900 call /(101888 call -(101885 call +(101873 call - lo[101853](101870 call . r[101857] c"low"))(101883 call _cast(380157 call . this[101859] c"idxType")(101881 call abs(101877 call . r[101857] c"stride")))) 1)(101898 call _cast(380162 call . this[101859] c"idxType")(101896 call abs(101892 call . r[101857] c"stride"))))(101910 call _cast(380167 call . this[101859] c"idxType")(101908 call abs(101904 call . r[101857] c"stride"))))))
  }
  function _remoteAccessData[101221](?).strideAlignDown[101926](arg _mt[101933]:_MT[238], arg this[101930]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg hi[101924]:_any[178](?), arg r[101928]:_any[178](?)) : _unknown[51] "method"
  {
    (101957 return(101955 call - hi[101924](101953 call %(101941 call - hi[101924](101938 call . r[101928] c"low"))(101951 call _cast(380174 call . this[101930] c"idxType")(101949 call abs(101945 call . r[101928] c"stride"))))))
  }
  function _remoteAccessData[101221](?).initDataFrom[101969](arg _mt[101974]:_MT[238], arg this[101971]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg other[101966] :
  _remoteAccessData[101221](?)) : _unknown[51] "method" "no return value for void"
  {
    (101986 call =(101979 call . this[101971] c"data")(101983 call . other[101966] c"data"))
  }
  function _remoteAccessData[101221](?).toSlice[101997](arg _mt[102002]:_MT[238], arg this[101999]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg newDom[101995]:_any[178](?)) : _unknown[51] "method"
  {
    (102016 call compilerAssert(102013 call ==(102006 call . this[101999] c"rank")(102010 call . newDom[101995] c"rank")))
    unknown rad[102047](102046 call _remoteAccessData[101221](?)(380181 call . this[101999] c"eltType")(102023 call . newDom[101995] c"rank")(102027 call . newDom[101995] c"idxType")(102031 call . newDom[101995] c"stridable")(102044 call ||(102035 call . newDom[101995] c"stridable")(102041 call . this[101999] c"blkChanged")))
    (102050 'end of statement')
    (102059 call(102054 call . rad[102047] c"initDataFrom") this[101999])
    (102082 call =(102064 call . rad[102047] c"shiftedData")(102079 IfExpr (102068 call . newDom[101995] c"stridable") then
    { scopeless
      (102072 call . this[101999] c"data")
    } else
    { scopeless
      (102076 call . this[101999] c"shiftedData")
    } ))
    (102101 call =(102088 call . rad[102047] c"origin")(102099 call _cast(102096 call . newDom[101995] c"idxType")(102092 call . this[101999] c"origin")))
    (102119 call =(102107 call . rad[102047] c"off")(102118 call chpl__tuplify(102114 call . newDom[101995] c"dsiLow")))
    (102137 call =(102125 call . rad[102047] c"str")(102136 call chpl__tuplify(102132 call . newDom[101995] c"dsiStride")))
    {
      unknown i[102289] 0
      unknown tmp[102290] "maybe param" "temp"
      (102302 'move' tmp[102290](102300 call chpl_compute_low_param_loop_bound 0(102143 call -(380187 call . this[101999] c"rank") 1)))
      unknown tmp[102291] "maybe param" "temp"
      (102312 'move' tmp[102291](102310 call chpl_compute_high_param_loop_bound 0(102307 call -(380204 call . this[101999] c"rank") 1)))
      unknown tmp[102292] "maybe param" "temp"
      (102315 'move' tmp[102292] 1)
      ParamForLoop[102317]
      { i[102289] tmp[102290] tmp[102291] tmp[102292]
        {
          const shift[102203] "const"(102201 call /(102183 call *(102155 call(102150 call . this[101999] c"blk") i[102289])(102181 call -(102170 call chpl__idxToInt(102166 call .(102165 call(102160 call . newDom[101995] c"dsiDim") i[102289]) c"low"))(102180 call chpl__idxToInt(102178 call(102173 call . this[101999] c"off") i[102289]))))(102199 call _cast(102196 call . rad[102047] c"idxType")(102194 call abs(102192 call(102187 call . this[101999] c"str") i[102289]))))
          (102206 'end of statement')
          if(102236 call _cond_test(102216 call >(102214 call(102209 call . this[101999] c"str") i[102289]) 0))
          {
            (102223 call +=(102219 call . rad[102047] c"origin") shift[102203])
          }
          {
            (102232 call -=(102228 call . rad[102047] c"origin") shift[102203])
          }
          const mult[102265] "const"(102263 call _cast(102260 call . rad[102047] c"idxType")(102257 call /(102247 call .(102246 call(102241 call . newDom[101995] c"dsiDim") i[102289]) c"stride")(102256 call(102251 call . this[101999] c"str") i[102289])))
          (102268 'end of statement')
          (102286 call =(102275 call(102270 call . rad[102047] c"blk") i[102289])(102284 call *(102282 call(102277 call . this[101999] c"blk") i[102289]) mult[102265]))
        }
      }
      label _unused_continueLabel[102294]
      label _breakLabel[102293]
    }
    (102333 call(102329 call . rad[102047] c"computeFactoredOffs"))
    (102342 call(102338 call . rad[102047] c"initShiftedData"))
    (102345 return rad[102047])
  }
  function _remoteAccessData[101221](?).toReindex[102354](arg _mt[102359]:_MT[238], arg this[102356]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg newDom[102352]:_any[178](?)) : _unknown[51] "method"
  {
    (102373 call compilerAssert(102370 call ==(102363 call . this[102356] c"rank")(102367 call . newDom[102352] c"rank")))
    unknown rad[102393](102392 call _remoteAccessData[101221](?)(380211 call . this[102356] c"eltType")(102380 call . newDom[102352] c"rank")(102384 call . newDom[102352] c"idxType")(102388 call . newDom[102352] c"stridable")(380216 call . this[102356] c"blkChanged"))
    (102396 'end of statement')
    (102403 call(102398 call . rad[102393] c"initDataFrom") this[102356])
    (102424 call =(102406 call . rad[102393] c"shiftedData")(102421 IfExpr (102410 call . newDom[102352] c"stridable") then
    { scopeless
      (102414 call . this[102356] c"data")
    } else
    { scopeless
      (102418 call . this[102356] c"shiftedData")
    } ))
    (102441 call =(102428 call . rad[102393] c"origin")(102439 call _cast(102436 call . newDom[102352] c"intIdxType")(102432 call . this[102356] c"origin")))
    (102452 call =(102445 call . rad[102393] c"blk")(102449 call . this[102356] c"blk"))
    (102466 call =(102456 call . rad[102393] c"off")(102465 call chpl__tuplify(102461 call . newDom[102352] c"dsiLow")))
    (102480 call =(102470 call . rad[102393] c"str")(102479 call chpl__tuplify(102475 call . newDom[102352] c"dsiStride")))
    (102496 call =(102486 call . rad[102393] c"factoredOffs")(102494 call _cast(102491 call . newDom[102352] c"intIdxType") 0))
    (102504 call(102500 call . rad[102393] c"computeFactoredOffs"))
    (102511 call(102507 call . rad[102393] c"initShiftedData"))
    (102514 return rad[102393])
  }
  function _remoteAccessData[101221](?).toRankChange[102523](arg _mt[102532]:_MT[238], arg this[102529]:_remoteAccessData[101221](?) :
  _remoteAccessData[101221](?), arg newDom[102521]:_any[178](?), arg cd[102525]:_any[178](?), arg idx[102527]:_any[178](?)) : _unknown[51] "method"
  {
    (102558 call compilerAssert(102555 call &&(102543 call ==(102536 call . this[102529] c"rank")(102540 call . idx[102527] c"size"))(102553 call !=(102546 call . this[102529] c"rank")(102550 call . newDom[102521] c"rank"))))
    unknown intIdxType[102565] "type variable"(102562 call . newDom[102521] c"intIdxType")
    unknown idxSignedType[102572] "type variable"(102571 call chpl__signedType intIdxType[102565])
    unknown rad[102592](102591 call _remoteAccessData[101221](?)(380225 call . this[102529] c"eltType")(102579 call . newDom[102521] c"rank")(102583 call . newDom[102521] c"idxType")(102587 call . newDom[102521] c"stridable") 1)
    (102595 'end of statement')
    const collapsedDims[102600] "const"(102599 call chpl__tuplify cd[102525])
    (102603 'end of statement')
    (102610 call(102605 call . rad[102592] c"initDataFrom") this[102529])
    (102631 call =(102613 call . rad[102592] c"shiftedData")(102628 IfExpr (102617 call . newDom[102521] c"stridable") then
    { scopeless
      (102621 call . this[102529] c"data")
    } else
    { scopeless
      (102625 call . this[102529] c"shiftedData")
    } ))
    (102648 call =(102635 call . rad[102592] c"origin")(102646 call _cast(102643 call . newDom[102521] c"intIdxType")(102639 call . this[102529] c"origin")))
    unknown curDim[102652] 0
    (102655 'end of statement')
    {
      unknown j[102857] 0
      unknown tmp[102858] "maybe param" "temp"
      (102870 'move' tmp[102858](102868 call chpl_compute_low_param_loop_bound 0(102662 call -(102658 call . idx[102527] c"size") 1)))
      unknown tmp[102859] "maybe param" "temp"
      (102883 'move' tmp[102859](102881 call chpl_compute_high_param_loop_bound 0(102875 call -(102877 call . idx[102527] c"size") 1)))
      unknown tmp[102860] "maybe param" "temp"
      (102886 'move' tmp[102860] 1)
      ParamForLoop[102888]
      { j[102857] tmp[102858] tmp[102859] tmp[102860]
        {
          if(102852 call _cond_test(102670 call !(102669 call collapsedDims[102600] j[102857])))
          {
            (102689 call =(102678 call(102673 call . rad[102592] c"off") curDim[102652])(102686 call .(102685 call(102680 call . newDom[102521] c"dsiDim") curDim[102652]) c"low"))
            const off[102718] "const"(102716 call _cast idxSignedType[102572](102713 call -(102702 call chpl__idxToInt(102700 call(102695 call . rad[102592] c"off") curDim[102652]))(102712 call chpl__idxToInt(102710 call(102705 call . this[102529] c"off") j[102857]))))
            (102721 'end of statement')
            (102751 call +=(102723 call . rad[102592] c"origin")(102749 call _cast intIdxType[102565](102746 call /(102737 call *(102734 call _cast idxSignedType[102572](102732 call(102727 call . this[102529] c"blk") j[102857])) off[102718])(102745 call(102740 call . this[102529] c"str") j[102857]))))
            (102768 call =(102760 call(102755 call . rad[102592] c"blk") curDim[102652])(102767 call(102762 call . this[102529] c"blk") j[102857]))
            (102785 call =(102777 call(102772 call . rad[102592] c"str") curDim[102652])(102784 call(102779 call . this[102529] c"str") j[102857]))
            (102790 call += curDim[102652] 1)
          }
          {
            const off[102815] "const"(102813 call _cast idxSignedType[102572](102810 call -(102799 call chpl__idxToInt(102797 call idx[102527] j[102857]))(102809 call chpl__idxToInt(102807 call(102802 call . this[102529] c"off") j[102857]))))
            (102818 'end of statement')
            (102849 call +=(102821 call . rad[102592] c"origin")(102847 call _cast intIdxType[102565](102844 call /(102835 call *(102832 call _cast idxSignedType[102572](102830 call(102825 call . this[102529] c"blk") j[102857])) off[102815])(102843 call(102838 call . this[102529] c"str") j[102857]))))
          }
        }
      }
      label _unused_continueLabel[102862]
      label _breakLabel[102861]
    }
    (102902 call(102898 call . rad[102592] c"computeFactoredOffs"))
    (102909 call(102905 call . rad[102592] c"initShiftedData"))
    (102912 return rad[102592])
  }
  function LocRADCache[103073](?).init[102974](arg _mt[103077]:_MT[238], arg this[103075]:LocRADCache[103073](?), arg eltType[102972]:_any[178](?), param arg rank[102977] :
  int(64)[13], arg idxType[102980]:_any[178](?), param arg stridable[102983] :
  bool[10], arg newTargetLocDom[102991] :
  (102989 call chpl__buildDomainRuntimeType defaultDist[94053] rank[102977])) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (102999 call =(102995 call . this[103075] c"eltType") eltType[102972])
    (103008 call =(103004 call . this[103075] c"rank") rank[102977])
    (103016 call =(103012 call . this[103075] c"idxType") idxType[102980])
    (103024 call =(103020 call . this[103075] c"stridable") stridable[102983])
    (103029 call =(380275 call . this[103075] c"targetLocDom") newTargetLocDom[102991])
  }
  function LocRADCache[103073](?).lockRAD[103038](arg _mt[103081]:_MT[238], arg this[103079]:LocRADCache[103073](?), arg rlocIdx[103036]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103048 call(103044 call .(103043 call(380283 call . this[103079] c"RADLocks") rlocIdx[103036]) c"lock"))
  }
  function LocRADCache[103073](?).unlockRAD[103057](arg _mt[103085]:_MT[238], arg this[103083]:LocRADCache[103073](?), arg rlocIdx[103055]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103067 call(103063 call .(103062 call(380289 call . this[103083] c"RADLocks") rlocIdx[103055]) c"unlock"))
  }
  type LocRADCache[103073](?) val super[355705]:object[22] "super class" unknown eltType[102917] "type variable" unknown rank[102921] "param" int(64)[13] unknown idxType[102925] "type variable" unknown stridable[102929] "param" bool[10] unknown targetLocDom[102938](102936 call chpl__buildDomainRuntimeType defaultDist[94053] rank[102921]) unknown RAD[102955] "unsafe"(102953 call chpl__buildArrayRuntimeType(102951 call chpl__ensureDomainExpr targetLocDom[102938])(102950 call _remoteAccessData[101221](?) eltType[102917] rank[102921] idxType[102925] stridable[102929])) unknown RADLocks[102966](102964 call chpl__buildArrayRuntimeType(102962 call chpl__ensureDomainExpr targetLocDom[102938]) chpl_LocalSpinlock[187432])
  type unmanaged LocRADCache?[415595](?)
  type LocRADCache?[415592](?)
  type LocRADCache[408901](?)
  function DefaultRectangularArr[106846](?).init[103211](arg _mt[106850]:_MT[238], arg this[106848]:DefaultRectangularArr[106846](?), arg eltType[103209]:_any[178](?), param arg rank[103213]:_any[178](?), arg idxType[103215]:_any[178](?), param arg stridable[103217]:_any[178](?), arg dom[103229] :
  (103227 call unmanaged DefaultRectangularDom[415445](?)(rank = rank[103213])(idxType = idxType[103215])(stridable = stridable[103217])), param arg initElts[103233] =
  1, arg data[103241] :
  (103239 call _ddata[11696](?) eltType[103209]) =
  nil[44], arg externArr[103246] =
  0, arg _borrowed[103250] =
  0, arg externFreeFunc[103255] :
  c_void_ptr[149] =
  nil[44]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (103272 call(103260 call .(358679 call . this[106848] c"super") c"init")(eltType = eltType[103209])(rank = rank[103213])(idxType = idxType[103215])(stridable = stridable[103217]))
    (103280 call =(103276 call . this[106848] c"dom") dom[103229])
    (103288 call =(103284 call . this[106848] c"data") data[103241])
    (103298 call =(103294 call . this[106848] c"externFreeFunc") externFreeFunc[103255])
    (103308 call =(103304 call . this[106848] c"externArr") externArr[103246])
    (103318 call =(103314 call . this[106848] c"_borrowed") _borrowed[103250])
    (103328 call =(103324 call . this[106848] c"callPostAlloc") 0)
    (103338 call =(103334 call . this[106848] c"deinitElts") initElts[103233])
    (103346 call(103342 call . this[106848] c"complete"))
    (103356 call(103351 call . this[106848] c"setupFieldsAndAllocate") initElts[103233])
  }
  function DefaultRectangularArr[106846](?).intIdxType[103362](arg _mt[106854]:_MT[238], arg this[106852]:DefaultRectangularArr[106846](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (103368 return(103367 call chpl__idxTypeToIntIdxType(380332 call . this[106852] c"idxType")))
  }
  function DefaultRectangularArr[106846](?).dsiDisplayRepresentation[103375](arg _mt[106858]:_MT[238], arg this[106856]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103397 call writeln "off="(380337 call . this[106856] c"off"))
    (103420 call writeln "blk="(380342 call . this[106856] c"blk"))
    (103442 call writeln "str="(380347 call . this[106856] c"str"))
    (103464 call writeln "factoredOffs="(380352 call . this[106856] c"factoredOffs"))
  }
  function DefaultRectangularArr[106846](?).dsiGetBaseDom[103470](arg _mt[106862]:_MT[238], arg this[106860]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (103473 return(380357 call . this[106860] c"dom"))
  }
  function DefaultRectangularArr[106846](?).dsiElementInitializationComplete[103480](arg _mt[106866]:_MT[238], arg this[106864]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const size[103530] "const"(103527 IfExpr (103487 call == storageOrder[93468] RMO[93450]) then
    { scopeless
      (103503 call *(103492 call(380363 call . this[106864] c"blk") 0)(103500 call .(103499 call(103494 call .(358694 call . this[106864] c"dom") c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (103525 call *(103511 call(380368 call . this[106864] c"blk")(103508 call -(380373 call . this[106864] c"rank") 1))(103522 call .(103521 call(103513 call .(358699 call . this[106864] c"dom") c"dsiDim")(103518 call -(380378 call . this[106864] c"rank") 1)) c"size"))
    } )
    (103533 'end of statement')
    if(103564 call _cond_test debugDefaultDist[93395])
    {
      (103561 call chpl_debug_writeln "*** DR calling postalloc "(103557 call _cast string[26](380384 call . this[106864] c"eltType")) " " size[103530])
    }
    if(103581 call _cond_test(380390 call . this[106864] c"callPostAlloc"))
    {
      (103573 call _ddata_allocate_postalloc(380395 call . this[106864] c"data") size[103530])
      (103578 call =(380401 call . this[106864] c"callPostAlloc") 0)
    }
    (103587 call =(380406 call . this[106864] c"deinitElts") 1)
  }
  function DefaultRectangularArr[106846](?).dsiElementDeinitializationComplete[103594](arg _mt[106870]:_MT[238], arg this[106868]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103598 call =(380411 call . this[106868] c"deinitElts") 0)
  }
  function DefaultRectangularArr[106846](?).dsiDestroyArr[103610](arg _mt[106874]:_MT[238], arg this[106872]:DefaultRectangularArr[106846](?), arg deinitElts[103607] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(103639 call _cond_test debugDefaultDist[93395])
    {
      (103636 call chpl_debug_writeln "*** DR calling dealloc "(103634 call _cast string[26](380417 call . this[106872] c"eltType")))
    }
    if(103811 call _cond_test(380422 call . this[106872] c"externArr"))
    {
      if(103658 call _cond_test(103646 call !(380427 call . this[106872] c"_borrowed")))
      {
        (103655 call chpl_call_free_func(380432 call . this[106872] c"externFreeFunc")(103654 call c_ptrTo(380437 call . this[106872] c"data")))
      }
    }
    {
      unknown numInd[103669](103666 call .(358704 call . this[106872] c"dom") c"dsiNumIndices")
      (103672 'end of statement')
      unknown numElts[103676] numInd[103669](380441 call . this[106872] c"intIdxType")
      (103679 'end of statement')
      if(103801 call _cond_test(103691 call &&(103685 call && deinitElts[103607](103682 call . this[106872] c"deinitElts"))(103689 call > numInd[103669] 0)))
      {
        unknown needsDestroy[103703] "param"(103702 'needs auto destroy'(103701 'deref'(103700 call(380449 call . this[106872] c"data") 0)))
        (103706 'end of statement')
        if(103797 call _cond_test needsDestroy[103703])
        {
          if(103792 call _cond_test(103712 call _deinitElementsIsParallel(380455 call . this[106872] c"eltType")))
          {
            Forall {
              induction variables:
                
                unknown i[103730] "index var" "insert auto destroy"
              iterated expressions:
                (103718 call #(103715 call chpl_build_low_bounded_range 0) numElts[103676])
              shadow variables:
              other variables
                forall body
              {
                (103726 call chpl__autoDestroy(103724 call(380461 call . this[106872] c"data") i[103730]))
              }
            }
          }
          {
            {
              unknown _indexOfInterest[103751] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[103752] "expr temp" "temp"
              (103761 'move' _iterator[103752](103759 call _getIterator(103768 call chpl_direct_counted_range_iter 0 numElts[103676])))
              Defer
              {
                {
                  (103784 call _freeIterator _iterator[103752])
                }
              }
              { scopeless type
                (103773 'move' _indexOfInterest[103751](103770 call iteratorIndex _iterator[103752]))
              }
              ForLoop[103753]
              {
                unknown i[103777] "index var" "insert auto destroy"
                (103779 'move' i[103777] _indexOfInterest[103751])
                {
                  (103748 call chpl__autoDestroy(103746 call(380467 call . this[106872] c"data") i[103777]))
                }
                label _continueLabel[103756]
                _indexOfInterest[103751]
                _iterator[103752]
              }
              label _breakLabel[103757]
            }
          }
        }
      }
      (103809 call _ddata_free(380474 call . this[106872] c"data") numInd[103669])
    }
  }
  function DefaultRectangularArr[106846](?).theData[103819](arg _mt[106878]:_MT[238], arg this[106876]:DefaultRectangularArr[106846](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(103833 call _cond_test(103825 call && earlyShiftData[93435](103823 call !(380481 call . this[106876] c"stridable"))))
    {
      (103828 return(380486 call . this[106876] c"shiftedData"))
    }
    {
      (103831 return(380491 call . this[106876] c"data"))
    }
  }
  function DefaultRectangularArr[106846](?).these[103850](arg _mt[106882]:_MT[238], arg this[106880]:DefaultRectangularArr[106846](?), arg tasksPerLocale[103846] :
  int(64)[13] =
  dataParTasksPerLocale[93284], arg ignoreRunning[103854] :
  bool[10] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[103860] :
  int(64)[13] =
  dataParMinGranularity[93296]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103887 call _cond_test debugDefaultDist[93395])
    {
      (103884 call chpl_debug_writeln "*** In defRectArr simple-dd serial iterator")
    }
    {
      unknown _indexOfInterest[103901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[103902] "expr temp" "temp"
      (103911 'move' _iterator[103902](103909 call _getIterator(103897 call chpl__serialViewIter this[106880](380501 call . this[106880] c"dom"))))
      Defer
      {
        {
          (103928 call _freeIterator _iterator[103902])
        }
      }
      { scopeless type
        (103917 'move' _indexOfInterest[103901](103914 call iteratorIndex _iterator[103902]))
      }
      ForLoop[103903]
      {
        unknown elem[103921] "index var" "insert auto destroy"
        (103923 'move' elem[103921] _indexOfInterest[103901])
        (103899 yield elem[103921])
        label _continueLabel[103906]
        _indexOfInterest[103901]
        _iterator[103902]
      }
      label _breakLabel[103907]
    }
  }
  function DefaultRectangularArr[106846](?).these[103943](arg _mt[106886]:_MT[238], arg this[106884]:DefaultRectangularArr[106846](?), param arg tag[103940] :
  iterKind[453], arg tasksPerLocale[103946] =
  dataParTasksPerLocale[93284], arg ignoreRunning[103950] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[103954] =
  dataParMinGranularity[93296]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103987 call _cond_test debugDefaultDist[93395])
    {
      (103984 call chpl_debug_writeln "*** In defRectArr simple-dd standalone iterator")
    }
    {
      unknown _indexOfInterest[104010] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104011] "expr temp" "temp"
      (104020 'move' _iterator[104011](104018 call _getIterator(104002 call(103994 call .(358711 call . this[106884] c"dom") c"these") tag[103940] tasksPerLocale[103946] ignoreRunning[103950] minIndicesPerTask[103954])))
      Defer
      {
        {
          (104037 call _freeIterator _iterator[104011])
        }
      }
      { scopeless type
        (104026 'move' _indexOfInterest[104010](104023 call iteratorIndex _iterator[104011]))
      }
      ForLoop[104012]
      {
        unknown i[104030] "index var" "insert auto destroy"
        (104032 'move' i[104030] _indexOfInterest[104010])
        {
          (104007 yield(104006 call(380516 call . this[106884] c"dsiAccess") i[104030]))
        }
        label _continueLabel[104015]
        _indexOfInterest[104010]
        _iterator[104011]
      }
      label _breakLabel[104016]
    }
  }
  where {
    (103962 call == tag[103940] standalone[451])
  }
  function DefaultRectangularArr[106846](?).these[104053](arg _mt[106890]:_MT[238], arg this[106888]:DefaultRectangularArr[106846](?), param arg tag[104050] :
  iterKind[453], arg tasksPerLocale[104056] =
  dataParTasksPerLocale[93284], arg ignoreRunning[104060] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[104064] =
  dataParMinGranularity[93296]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104097 call _cond_test debugDefaultDist[93395])
    {
      (104094 call chpl_debug_writeln "*** In defRectArr simple-dd leader iterator")
    }
    {
      unknown _indexOfInterest[104116] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104117] "expr temp" "temp"
      (104126 'move' _iterator[104117](104124 call _getIterator(104112 call(104104 call .(358717 call . this[106888] c"dom") c"these") tag[104050] tasksPerLocale[104056] ignoreRunning[104060] minIndicesPerTask[104064])))
      Defer
      {
        {
          (104143 call _freeIterator _iterator[104117])
        }
      }
      { scopeless type
        (104132 'move' _indexOfInterest[104116](104129 call iteratorIndex _iterator[104117]))
      }
      ForLoop[104118]
      {
        unknown followThis[104136] "index var" "insert auto destroy"
        (104138 'move' followThis[104136] _indexOfInterest[104116])
        (104114 yield followThis[104136])
        label _continueLabel[104121]
        _indexOfInterest[104116]
        _iterator[104117]
      }
      label _breakLabel[104122]
    }
  }
  where {
    (104072 call == tag[104050] leader[447])
  }
  function DefaultRectangularArr[106846](?).these[104159](arg _mt[106894]:_MT[238], arg this[106892]:DefaultRectangularArr[106846](?), param arg tag[104156] :
  iterKind[453], arg followThis[104161]:_any[178](?), arg tasksPerLocale[104164] =
  dataParTasksPerLocale[93284], arg ignoreRunning[104168] =
  dataParIgnoreRunningTasks[93290], arg minIndicesPerTask[104172] =
  dataParMinGranularity[93296]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104206 call _cond_test debugDefaultDist[93395])
    {
      (104203 call chpl_debug_writeln "*** In defRectArr simple-dd follower iterator: " followThis[104161])
    }
    {
      unknown _indexOfInterest[104233] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104234] "expr temp" "temp"
      (104243 'move' _iterator[104234](104241 call _getIterator(104226 call(104213 call .(358723 call . this[106892] c"dom") c"these")(tag = follower[449]) followThis[104161] tasksPerLocale[104164] ignoreRunning[104168] minIndicesPerTask[104172])))
      Defer
      {
        {
          (104260 call _freeIterator _iterator[104234])
        }
      }
      { scopeless type
        (104249 'move' _indexOfInterest[104233](104246 call iteratorIndex _iterator[104234]))
      }
      ForLoop[104235]
      {
        unknown i[104253] "index var" "insert auto destroy"
        (104255 'move' i[104253] _indexOfInterest[104233])
        (104231 yield(104230 call(380543 call . this[106892] c"dsiAccess") i[104253]))
        label _continueLabel[104238]
        _indexOfInterest[104233]
        _iterator[104234]
      }
      label _breakLabel[104239]
    }
  }
  where {
    (104180 call == tag[104156] follower[449])
  }
  function DefaultRectangularArr[106846](?).computeFactoredOffs[104272](arg _mt[106898]:_MT[238], arg this[106896]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (104279 call =(380549 call . this[106896] c"factoredOffs")(104277 call _cast(380553 call . this[106896] c"intIdxType") 0))
    {
      unknown i[104311] 0
      unknown tmp[104312] "maybe param" "temp"
      (104324 'move' tmp[104312](104322 call chpl_compute_low_param_loop_bound 0(104286 call -(380558 call . this[106896] c"rank") 1)))
      unknown tmp[104313] "maybe param" "temp"
      (104334 'move' tmp[104313](104332 call chpl_compute_high_param_loop_bound 0(104329 call -(380585 call . this[106896] c"rank") 1)))
      unknown tmp[104314] "maybe param" "temp"
      (104337 'move' tmp[104314] 1)
      ParamForLoop[104339]
      { i[104311] tmp[104312] tmp[104313] tmp[104314]
        {
          (104307 call =(380563 call . this[106896] c"factoredOffs")(104305 call +(380568 call . this[106896] c"factoredOffs")(104303 call *(104295 call(380573 call . this[106896] c"blk") i[104311])(104302 call chpl__idxToInt(104300 call(380579 call . this[106896] c"off") i[104311])))))
        }
      }
      label _unused_continueLabel[104316]
      label _breakLabel[104315]
    }
  }
  function DefaultRectangularArr[106846](?).initShiftedData[104352](arg _mt[106902]:_MT[238], arg this[106900]:DefaultRectangularArr[106846](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(104411 call _cond_test(104358 call && earlyShiftData[93435](104356 call !(380591 call . this[106900] c"stridable"))))
    {
      if(104406 call _cond_test(104365 call >(104361 call .(358729 call . this[106900] c"dom") c"dsiNumIndices") 0))
      {
        const shiftDist[104391] "const"(104388 IfExpr (104370 call isIntType(380596 call . this[106900] c"idxType")) then
        { scopeless
          (104376 call -(104373 call _cast(380601 call . this[106900] c"idxType") 0)(380606 call . this[106900] c"factoredOffs"))
        } else
        { scopeless
          (104386 call -(104380 call _cast(380613 call . this[106900] c"idxSignedType") 0)(104384 call _cast(380623 call . this[106900] c"idxSignedType")(380618 call . this[106900] c"factoredOffs")))
        } )
        (104394 'end of statement')
        (104403 call =(380628 call . this[106900] c"shiftedData")(104402 call _ddata_shift(380633 call . this[106900] c"eltType")(380638 call . this[106900] c"data") shiftDist[104391]))
      }
    }
  }
  function DefaultRectangularArr[106846](?).setupFieldsAndAllocate[104422](arg _mt[106906]:_MT[238], arg this[106904]:DefaultRectangularArr[106846](?), param arg initElts[104420]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown dim[104466] 0
      unknown tmp[104467] "maybe param" "temp"
      (104479 'move' tmp[104467](104477 call chpl_compute_low_param_loop_bound 0(104427 call -(380644 call . this[106904] c"rank") 1)))
      unknown tmp[104468] "maybe param" "temp"
      (104489 'move' tmp[104468](104487 call chpl_compute_high_param_loop_bound 0(104484 call -(380663 call . this[106904] c"rank") 1)))
      unknown tmp[104469] "maybe param" "temp"
      (104492 'move' tmp[104469] 1)
      ParamForLoop[104494]
      { dim[104466] tmp[104467] tmp[104468] tmp[104469]
        {
          (104445 call =(104434 call(380649 call . this[106904] c"off") dim[104466])(104442 call .(104441 call(104436 call .(358734 call . this[106904] c"dom") c"dsiDim") dim[104466]) c"alignedLow"))
          (104463 call =(104452 call(380656 call . this[106904] c"str") dim[104466])(104460 call .(104459 call(104454 call .(358739 call . this[106904] c"dom") c"dsiDim") dim[104466]) c"stride"))
        }
      }
      label _unused_continueLabel[104471]
      label _breakLabel[104470]
    }
    if(104724 call _cond_test(104509 call == storageOrder[93468] RMO[93450]))
    {
      (104522 call =(104517 call(380669 call . this[106904] c"blk")(104514 call -(380674 call . this[106904] c"rank") 1))(104520 call _cast(380678 call . this[106904] c"intIdxType") 1))
      {
        unknown dim[104567] 0
        unknown tmp[104568] "maybe param" "temp"
        (104579 'move' tmp[104568](104577 call chpl_compute_low_param_loop_bound 0(104529 call -(380683 call . this[106904] c"rank") 2)))
        unknown tmp[104569] "maybe param" "temp"
        (104589 'move' tmp[104569](104587 call chpl_compute_high_param_loop_bound 0(104584 call -(380701 call . this[106904] c"rank") 2)))
        unknown tmp[104570] "maybe param" "temp"
        (104592 'move' tmp[104570](104534 call - 1))
        ParamForLoop[104594]
        { dim[104567] tmp[104568] tmp[104569] tmp[104570]
          (104564 call =(104541 call(380688 call . this[106904] c"blk") dim[104567])(104562 call *(104548 call(380694 call . this[106904] c"blk")(104545 call + dim[104567] 1))(104559 call .(104558 call(104550 call .(358745 call . this[106904] c"dom") c"dsiDim")(104555 call + dim[104567] 1)) c"size")))
        }
        label _unused_continueLabel[104572]
        label _breakLabel[104571]
      }
    }
    {
      if(104720 call _cond_test(104610 call == storageOrder[93468] CMO[93452]))
      {
        (104620 call =(104615 call(380707 call . this[106904] c"blk") 0)(104618 call _cast(380711 call . this[106904] c"intIdxType") 1))
        {
          unknown dim[104661] 0
          unknown tmp[104662] "maybe param" "temp"
          (104674 'move' tmp[104662](104672 call chpl_compute_low_param_loop_bound 1(104627 call -(380716 call . this[106904] c"rank") 1)))
          unknown tmp[104663] "maybe param" "temp"
          (104684 'move' tmp[104663](104682 call chpl_compute_high_param_loop_bound 1(104679 call -(380734 call . this[106904] c"rank") 1)))
          unknown tmp[104664] "maybe param" "temp"
          (104687 'move' tmp[104664] 1)
          ParamForLoop[104689]
          { dim[104661] tmp[104662] tmp[104663] tmp[104664]
            {
              (104657 call =(104634 call(380721 call . this[106904] c"blk") dim[104661])(104655 call *(104641 call(380727 call . this[106904] c"blk")(104638 call - dim[104661] 1))(104652 call .(104651 call(104643 call .(358751 call . this[106904] c"dom") c"dsiDim")(104648 call - dim[104661] 1)) c"size")))
            }
          }
          label _unused_continueLabel[104666]
          label _breakLabel[104665]
        }
      }
      {
        (104717 call halt "unknown array storage order")
      }
    }
    (104731 call(380738 call . this[106904] c"computeFactoredOffs"))
    const size[104781] "const"(104778 IfExpr (104738 call == storageOrder[93468] RMO[93450]) then
    { scopeless
      (104754 call *(104743 call(380744 call . this[106904] c"blk") 0)(104751 call .(104750 call(104745 call .(358757 call . this[106904] c"dom") c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (104776 call *(104762 call(380749 call . this[106904] c"blk")(104759 call -(380754 call . this[106904] c"rank") 1))(104773 call .(104772 call(104764 call .(358762 call . this[106904] c"dom") c"dsiDim")(104769 call -(380759 call . this[106904] c"rank") 1)) c"size"))
    } )
    (104784 'end of statement')
    if(104849 call _cond_test usePollyArrayIndex[93440])
    {
      {
        unknown dim[104811] 0
        unknown tmp[104812] "maybe param" "temp"
        (104824 'move' tmp[104812](104822 call chpl_compute_low_param_loop_bound 0(104789 call -(380765 call . this[106904] c"rank") 1)))
        unknown tmp[104813] "maybe param" "temp"
        (104834 'move' tmp[104813](104832 call chpl_compute_high_param_loop_bound 0(104829 call -(380779 call . this[106904] c"rank") 1)))
        unknown tmp[104814] "maybe param" "temp"
        (104837 'move' tmp[104814] 1)
        ParamForLoop[104839]
        { dim[104811] tmp[104812] tmp[104813] tmp[104814]
          {
            (104807 call =(104796 call(380772 call . this[106904] c"sizesPerDim") dim[104811])(104804 call .(104803 call(104798 call .(358767 call . this[106904] c"dom") c"dsiDim") dim[104811]) c"size"))
          }
        }
        label _unused_continueLabel[104816]
        label _breakLabel[104815]
      }
    }
    if(104952 call _cond_test(104855 call ==(380784 call . this[106904] c"data") nil[44]))
    {
      if(104886 call _cond_test debugDefaultDist[93395])
      {
        (104883 call chpl_debug_writeln "*** DR alloc "(104879 call _cast string[26](380790 call . this[106904] c"eltType")) " " size[104781])
      }
      if(104931 call _cond_test(104892 call ! localeModelHasSublocales[187449]))
      {
        (104901 call =(380797 call . this[106904] c"data")(104900 call _ddata_allocate_noinit(380802 call . this[106904] c"eltType") size[104781](380808 call . this[106904] c"callPostAlloc")))
      }
      {
        (104927 call =(380813 call . this[106904] c"data")(104926 call _ddata_allocate_noinit(380818 call . this[106904] c"eltType") size[104781](380824 call . this[106904] c"callPostAlloc")(subloc =(104922 IfExpr (104918 call >(104916 call(104912 call .(358770 call here[90438]) c"getChildCount")) 1) then
        { scopeless
          c_sublocid_all[89883]
        } else
        { scopeless
          c_sublocid_none[89873]
        } ))))
      }
      if(104948 call _cond_test initElts[104420])
      {
        (104941 call init_elts(380832 call . this[106904] c"data") size[104781](380838 call . this[106904] c"eltType"))
        (104946 call(380842 call . this[106904] c"dsiElementInitializationComplete"))
      }
    }
    (104958 call(380846 call . this[106904] c"initShiftedData"))
  }
  function DefaultRectangularArr[106846](?).getDataIndex[104970](arg _mt[106910]:_MT[238], arg this[106908]:DefaultRectangularArr[106846](?), arg ind[104966] ... :
  (380851 call . this[106908] c"idxType"), param arg getShifted[104973] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    (104986 return(104985 call(380860 call . this[106908] c"getDataIndex") ind[104966](getShifted = getShifted[104973])))
  }
  where {
    (104978 call ==(380856 call . this[106908] c"rank") 1)
  }
  function DefaultRectangularArr[106846](?).getDataIndex[105001](arg _mt[106914]:_MT[238], arg this[106912]:DefaultRectangularArr[106846](?), arg ind[104998] :
  (104996 call *(380867 call . this[106912] c"rank")(380872 call . this[106912] c"idxType")), param arg getShifted[105004] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    if(105428 call _cond_test(380877 call . this[106912] c"stridable"))
    {
      unknown sum[105012](105010 call _cast(380881 call . this[106912] c"intIdxType") 0)
      (105015 'end of statement')
      {
        unknown i[105062] 0
        unknown tmp[105063] "maybe param" "temp"
        (105075 'move' tmp[105063](105073 call chpl_compute_low_param_loop_bound 0(105020 call -(380886 call . this[106912] c"rank") 1)))
        unknown tmp[105064] "maybe param" "temp"
        (105085 'move' tmp[105064](105083 call chpl_compute_high_param_loop_bound 0(105080 call -(380916 call . this[106912] c"rank") 1)))
        unknown tmp[105065] "maybe param" "temp"
        (105088 'move' tmp[105065] 1)
        ParamForLoop[105090]
        { i[105062] tmp[105063] tmp[105064] tmp[105065]
          (105059 call += sum[105012](105057 call /(105045 call *(105039 call -(105031 call chpl__idxToInt(105029 call ind[104998] i[105062]))(105038 call chpl__idxToInt(105036 call(380894 call . this[106912] c"off") i[105062])))(105044 call(380900 call . this[106912] c"blk") i[105062]))(105055 call _cast(380911 call . this[106912] c"intIdxType")(105053 call abs(105051 call(380906 call . this[106912] c"str") i[105062])))))
        }
        label _unused_continueLabel[105067]
        label _breakLabel[105066]
      }
      (105100 return sum[105012])
    }
    {
      unknown wantShiftedIndex[105106] "param"(105104 call && getShifted[105004] earlyShiftData[93435])
      (105109 'end of statement')
      if(105424 call _cond_test(105116 call &&(105113 call ==(380924 call . this[106912] c"rank") 1) wantShiftedIndex[105106]))
      {
        (105125 return(105124 call chpl__idxToInt(105122 call ind[104998] 0)))
      }
      {
        unknown sum[105132](105130 call _cast(380930 call . this[106912] c"intIdxType") 0)
        (105135 'end of statement')
        unknown useInd[105138] ind[104998]
        (105141 'end of statement')
        unknown useOffset[105144] 0 int(64)[13]
        (105147 'end of statement')
        unknown useSizesPerDim[105149](380936 call . this[106912] c"sizesPerDim")
        (105152 'end of statement')
        if(105420 call _cond_test usePollyArrayIndex[93440])
        {
          if(105226 call _cond_test(105155 call ! wantShiftedIndex[105106]))
          {
            {
              unknown i[105188] 0
              unknown tmp[105189] "maybe param" "temp"
              (105201 'move' tmp[105189](105199 call chpl_compute_low_param_loop_bound 0(105160 call -(380943 call . this[106912] c"rank") 1)))
              unknown tmp[105190] "maybe param" "temp"
              (105211 'move' tmp[105190](105209 call chpl_compute_high_param_loop_bound 0(105206 call -(380958 call . this[106912] c"rank") 1)))
              unknown tmp[105191] "maybe param" "temp"
              (105214 'move' tmp[105191] 1)
              ParamForLoop[105216]
              { i[105188] tmp[105189] tmp[105190] tmp[105191]
                {
                  (105184 call =(105167 call useInd[105138] i[105188])(105182 call -(105174 call chpl__idxToInt(105172 call useInd[105138] i[105188]))(105181 call chpl__idxToInt(105179 call(380952 call . this[106912] c"off") i[105188]))))
                }
              }
              label _unused_continueLabel[105193]
              label _breakLabel[105192]
            }
          }
          (105239 return(105238 call polly_array_index useOffset[105144](105235 'expand_tuple' useSizesPerDim[105149])(105237 'expand_tuple' useInd[105138])))
        }
        {
          if(105399 call _cond_test(105246 call == storageOrder[93468] RMO[93450]))
          {
            {
              unknown i[105273] 0
              unknown tmp[105274] "maybe param" "temp"
              (105286 'move' tmp[105274](105284 call chpl_compute_low_param_loop_bound 0(105251 call -(380967 call . this[106912] c"rank") 2)))
              unknown tmp[105275] "maybe param" "temp"
              (105296 'move' tmp[105275](105294 call chpl_compute_high_param_loop_bound 0(105291 call -(380981 call . this[106912] c"rank") 2)))
              unknown tmp[105276] "maybe param" "temp"
              (105299 'move' tmp[105276] 1)
              ParamForLoop[105301]
              { i[105273] tmp[105274] tmp[105275] tmp[105276]
                {
                  (105269 call += sum[105132](105267 call *(105262 call chpl__idxToInt(105260 call ind[104998] i[105273]))(105266 call(380975 call . this[106912] c"blk") i[105273])))
                }
              }
              label _unused_continueLabel[105278]
              label _breakLabel[105277]
            }
            (105322 call += sum[105132](105321 call chpl__idxToInt(105319 call ind[104998](105316 call -(380988 call . this[106912] c"rank") 1))))
          }
          {
            {
              unknown i[105350] 0
              unknown tmp[105351] "maybe param" "temp"
              (105363 'move' tmp[105351](105361 call chpl_compute_low_param_loop_bound 1(105328 call -(380993 call . this[106912] c"rank") 1)))
              unknown tmp[105352] "maybe param" "temp"
              (105373 'move' tmp[105352](105371 call chpl_compute_high_param_loop_bound 1(105368 call -(381007 call . this[106912] c"rank") 1)))
              unknown tmp[105353] "maybe param" "temp"
              (105376 'move' tmp[105353] 1)
              ParamForLoop[105378]
              { i[105350] tmp[105351] tmp[105352] tmp[105353]
                {
                  (105346 call += sum[105132](105344 call *(105339 call chpl__idxToInt(105337 call ind[104998] i[105350]))(105343 call(381001 call . this[106912] c"blk") i[105350])))
                }
              }
              label _unused_continueLabel[105355]
              label _breakLabel[105354]
            }
            (105396 call += sum[105132](105395 call chpl__idxToInt(105393 call ind[104998] 0)))
          }
          if(105412 call _cond_test(105405 call ! wantShiftedIndex[105106]))
          {
            (105409 call -= sum[105132](381016 call . this[106912] c"factoredOffs"))
          }
          (105418 return sum[105132])
        }
      }
    }
  }
  function DefaultRectangularArr[106846](?).dsiAccess[105443](arg _mt[106918]:_MT[238], arg this[106916]:DefaultRectangularArr[106846](?), arg ind[105439] ... :
  (381022 call . this[106916] c"idxType")) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105453 return(105452 call(381031 call . this[106916] c"dsiAccess") ind[105439]))
  }
  where {
    (105447 call ==(381027 call . this[106916] c"rank") 1)
  }
  function DefaultRectangularArr[106846](?).dsiAccess[105467](arg _mt[106922]:_MT[238], arg this[106920]:DefaultRectangularArr[106846](?), arg ind[105463] ... :
  (381037 call . this[106920] c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (105483 return(105482 call(381051 call . this[106920] c"dsiAccess") ind[105463]))
  }
  where {
    (105477 call &&(105471 call ==(381042 call . this[106920] c"rank") 1)(105476 call shouldReturnRvalueByValue(381047 call . this[106920] c"eltType")))
  }
  function DefaultRectangularArr[106846](?).dsiAccess[105497](arg _mt[106926]:_MT[238], arg this[106924]:DefaultRectangularArr[106846](?), arg ind[105493] ... :
  (381057 call . this[106924] c"idxType")) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105513 return(105512 call(381071 call . this[106924] c"dsiAccess") ind[105493]))
  }
  where {
    (105507 call &&(105501 call ==(381062 call . this[106924] c"rank") 1)(105506 call shouldReturnRvalueByConstRef(381067 call . this[106924] c"eltType")))
  }
  function DefaultRectangularArr[106846](?).dsiAccess[105528](arg _mt[106930]:_MT[238], arg this[106928]:DefaultRectangularArr[106846](?), arg ind[105525] :
  (105523 call *(381077 call . this[106928] c"rank")(381082 call . this[106928] c"idxType"))) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105534](105533 call(381086 call . this[106928] c"getDataIndex") ind[105525])
    (105537 'end of statement')
    (105543 return(105542 call(381091 call . this[106928] c"theData") dataInd[105534]))
  }
  function DefaultRectangularArr[106846](?).dsiAccess[105556](arg _mt[106934]:_MT[238], arg this[106932]:DefaultRectangularArr[106846](?), arg ind[105553] :
  (105551 call *(381097 call . this[106932] c"rank")(381102 call . this[106932] c"idxType"))) : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105566](105565 call(381111 call . this[106932] c"getDataIndex") ind[105553])
    (105569 'end of statement')
    (105575 return(105574 call(381116 call . this[106932] c"theData") dataInd[105566]))
  }
  where {
    (105561 call shouldReturnRvalueByValue(381107 call . this[106932] c"eltType"))
  }
  function DefaultRectangularArr[106846](?).dsiAccess[105589](arg _mt[106938]:_MT[238], arg this[106936]:DefaultRectangularArr[106846](?), arg ind[105586] :
  (105584 call *(381122 call . this[106936] c"rank")(381127 call . this[106936] c"idxType"))) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105599](105598 call(381136 call . this[106936] c"getDataIndex") ind[105586])
    (105602 'end of statement')
    (105608 return(105607 call(381141 call . this[106936] c"theData") dataInd[105599]))
  }
  where {
    (105594 call shouldReturnRvalueByConstRef(381132 call . this[106936] c"eltType"))
  }
  function DefaultRectangularArr[106846](?).dsiLocalAccess[105617](arg _mt[106942]:_MT[238], arg this[106940]:DefaultRectangularArr[106846](?), arg i[105615]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105623 return(105622 call(381146 call . this[106940] c"dsiAccess") i[105615]))
  }
  function DefaultRectangularArr[106846](?).dsiLocalAccess[105632](arg _mt[106946]:_MT[238], arg this[106944]:DefaultRectangularArr[106846](?), arg i[105630]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105642 return(105641 call(381156 call . this[106944] c"dsiAccess") i[105630]))
  }
  where {
    (105637 call shouldReturnRvalueByValue(381152 call . this[106944] c"eltType"))
  }
  function DefaultRectangularArr[106846](?).dsiLocalAccess[105652](arg _mt[106950]:_MT[238], arg this[106948]:DefaultRectangularArr[106846](?), arg i[105650]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105662 return(105661 call(381166 call . this[106948] c"dsiAccess") i[105650]))
  }
  where {
    (105657 call shouldReturnRvalueByConstRef(381162 call . this[106948] c"eltType"))
  }
  function DefaultRectangularArr[106846](?).dsiBoundsCheck[105672](arg _mt[106954]:_MT[238], arg this[106952]:DefaultRectangularArr[106846](?), arg i[105670]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105683 return(105682 call(105677 call .(358775 call . this[106952] c"dom") c"dsiMember") i[105670]))
  }
  function DefaultRectangularArr[106846](?).adjustBlkOffStrForNewDomain[105695](arg _mt[106958]:_MT[238], arg this[106956]:DefaultRectangularArr[106846](?), arg d[105692] :
  unmanaged DefaultRectangularDom[415445](?), arg alias[105699] :
  unmanaged DefaultRectangularArr[415490](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[105884] 0
      unknown tmp[105885] "maybe param" "temp"
      (105897 'move' tmp[105885](105895 call chpl_compute_low_param_loop_bound 0(105705 call -(381175 call . this[106956] c"rank") 1)))
      unknown tmp[105886] "maybe param" "temp"
      (105907 'move' tmp[105886](105905 call chpl_compute_high_param_loop_bound 0(105902 call -(381237 call . this[106956] c"rank") 1)))
      unknown tmp[105887] "maybe param" "temp"
      (105910 'move' tmp[105887] 1)
      ParamForLoop[105912]
      { i[105884] tmp[105885] tmp[105886] tmp[105887]
        {
          unknown s[105710](381180 call . this[106956] c"idxType")
          (105713 'end of statement')
          if(105823 call _cond_test(105717 call ==(381185 call . this[106956] c"idxSignedType")(381190 call . this[106956] c"idxType")))
          {
            (105742 call = s[105710](105740 call _cast(105737 call . d[105692] c"idxType")(105734 call /(105727 call .(105726 call(105721 call .(358780 call . this[106956] c"dom") c"dsiDim") i[105884]) c"stride")(105733 call(381197 call . this[106956] c"str") i[105884]))))
          }
          {
            (105794 call assert(105791 call ||(105767 call &&(105758 call <(105754 call .(105753 call(105748 call .(358786 call . this[106956] c"dom") c"dsiDim") i[105884]) c"stride") 0)(105765 call <(105763 call(381204 call . this[106956] c"str") i[105884]) 0))(105789 call &&(105780 call >(105776 call .(105775 call(105770 call .(358791 call . this[106956] c"dom") c"dsiDim") i[105884]) c"stride") 0)(105787 call >(105785 call(381211 call . this[106956] c"str") i[105884]) 0))))
            (105820 call = s[105710](105818 call _cast(105815 call . d[105692] c"idxType")(105812 call /(105805 call .(105804 call(105799 call .(358796 call . this[106956] c"dom") c"dsiDim") i[105884]) c"stride")(105811 call(381219 call . this[106956] c"str") i[105884]))))
          }
          (105844 call =(105833 call(105828 call . alias[105699] c"off") i[105884])(105841 call .(105840 call(105835 call . d[105692] c"dsiDim") i[105884]) c"low"))
          (105861 call =(105853 call(105848 call . alias[105699] c"blk") i[105884])(105859 call *(105857 call(381228 call . this[106956] c"blk") i[105884]) s[105710]))
          (105881 call =(105870 call(105865 call . alias[105699] c"str") i[105884])(105878 call .(105877 call(105872 call . d[105692] c"dsiDim") i[105884]) c"stride"))
        }
      }
      label _unused_continueLabel[105889]
      label _breakLabel[105888]
    }
  }
  function DefaultRectangularArr[106846](?).adjustBlkOffStrForNewDomain[105931](arg _mt[106962]:_MT[238], arg this[106960]:DefaultRectangularArr[106846](?), arg d[105928] :
  unmanaged DefaultRectangularDom[415445](?), arg alias[105935] :
  unmanaged DefaultRectangularArr[415490](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[106016] 0
      unknown tmp[106017] "maybe param" "temp"
      (106029 'move' tmp[106017](106027 call chpl_compute_low_param_loop_bound 0(105957 call -(381244 call . this[106960] c"rank") 1)))
      unknown tmp[106018] "maybe param" "temp"
      (106039 'move' tmp[106018](106037 call chpl_compute_high_param_loop_bound 0(106034 call -(381260 call . this[106960] c"rank") 1)))
      unknown tmp[106019] "maybe param" "temp"
      (106042 'move' tmp[106019] 1)
      ParamForLoop[106044]
      { i[106016] tmp[106017] tmp[106018] tmp[106019]
        {
          (105978 call =(105967 call(105962 call . alias[105935] c"off") i[106016])(105975 call .(105974 call(105969 call . d[105928] c"dsiDim") i[106016]) c"low"))
          (105993 call =(105988 call(105983 call . alias[105935] c"blk") i[106016])(105992 call(381252 call . this[106960] c"blk") i[106016]))
          (106013 call =(106002 call(105997 call . alias[105935] c"str") i[106016])(106010 call .(106009 call(106004 call . d[105928] c"dsiDim") i[106016]) c"stride"))
        }
      }
      label _unused_continueLabel[106021]
      label _breakLabel[106020]
    }
  }
  where {
    (105952 call &&(105943 call ==(105939 call .(358807 call . this[106960] c"dom") c"stridable") 0)(105950 call ==(105946 call . this[106960] c"stridable") 0))
  }
  function DefaultRectangularArr[106846](?).dsiReallocate[106074](arg _mt[106966]:_MT[238], arg this[106964]:DefaultRectangularArr[106846](?), arg bounds[106071] :
  (106069 call *(381265 call . this[106964] c"rank")(106068 call range[64319](?)(381271 call . this[106964] c"idxType") bounded[64208](381276 call . this[106964] c"stridable")))) : _unknown[51] "method" "primary method" "method overrides" "ignore transfer errors" "no return value for void"
  {
    unknown actuallyResizing[106077] 0
    (106080 'end of statement')
    {
      unknown _indexOfInterest[106114] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[106115] "expr temp" "temp"
      (106124 'move' _iterator[106115](106122 call _getIterator(106084 call . bounds[106071] c"indices")))
      Defer
      {
        {
          (106141 call _freeIterator _iterator[106115])
        }
      }
      { scopeless type
        (106130 'move' _indexOfInterest[106114](106127 call iteratorIndex _iterator[106115]))
      }
      ForLoop[106116]
      {
        unknown i[106134] "index var" "insert auto destroy"
        (106136 'move' i[106134] _indexOfInterest[106114])
        {
          if(106109 call _cond_test(106098 call !=(106090 call bounds[106071] i[106134])(106097 call(106092 call .(358820 call . this[106964] c"dom") c"dsiDim") i[106134])))
          {
            (106102 call = actuallyResizing[106077] 1)
            break _breakLabel[106120] _breakLabel[106120]
          }
        }
        label _continueLabel[106119]
        _indexOfInterest[106114]
        _iterator[106115]
      }
      label _breakLabel[106120]
    }
    if(106153 call _cond_test(106149 call ! actuallyResizing[106077]))
    {
      (106151 return _void[55])
    }
    if(106186 call _cond_test(106162 call !(106161 call isDefaultInitializable(381286 call . this[106964] c"eltType"))))
    {
      (106183 call halt "Can't resize domains whose arrays' elements don't have default values")
    }
    if(106221 call _cond_test(106195 call !=(106192 call chpl_localeID_to_locale(106191 '_wide_get_locale' this[106964]))(381290 call here[90438])))
    {
      (106218 call halt "internal error: dsiReallocate() can only be called from an array's home locale")
    }
    {
      const reallocD[106230] "const"(106228 call chpl__buildDomainExpr(106226 'expand_tuple' bounds[106071]))
      (106233 'end of statement')
      if(106648 call _cond_test(106284 call &&(106275 call &&(106266 call &&(106254 call &&(106242 call &&(106236 call ! disableArrRealloc[93415])(106240 call ==(381296 call . this[106964] c"rank") 1))(106252 call ==(106245 call . reallocD[106230] c"low")(106249 call .(358826 call . this[106964] c"dom") c"dsiLow")))(106264 call ==(106257 call . reallocD[106230] c"stride")(106261 call .(358832 call . this[106964] c"dom") c"dsiStride")))(106273 call >(106269 call .(358837 call . this[106964] c"dom") c"dsiNumIndices") 0))(106282 call >(106278 call . reallocD[106230] c"size") 0)))
      {
        if(106308 call _cond_test reportInPlaceRealloc[93420])
        {
          (106306 call writeln "reallocating in-place")
        }
        (106328 call =(106317 call(381302 call . this[106964] c"sizesPerDim") 0)(106325 call .(106324 call(106319 call . reallocD[106230] c"dsiDim") 0) c"size"))
        (106347 call =(381307 call . this[106964] c"data")(106346 call _ddata_reallocate(381312 call . this[106964] c"data")(381317 call . this[106964] c"eltType")(oldSize =(106337 call .(358844 call . this[106964] c"dom") c"dsiNumIndices"))(newSize =(106342 call . reallocD[106230] c"size"))))
        (106352 call(381321 call . this[106964] c"initShiftedData"))
      }
      {
        unknown copy[106379](106356 'new'(_chpl_manager = unmanaged[220](?))(106378 call DefaultRectangularArr[379736](?)(eltType =(381327 call . this[106964] c"eltType"))(rank =(381332 call . this[106964] c"rank"))(idxType =(381337 call . this[106964] c"idxType"))(stridable =(106369 call .(106366 call . reallocD[106230] c"_value") c"stridable"))(dom =(106374 call . reallocD[106230] c"_value"))))
        (106382 'end of statement')
        unknown keep[106394](106393 call reallocD[106230](106391 'expand_tuple'(106388 call .(358852 call . this[106964] c"dom") c"ranges")))
        (106397 'end of statement')
        Forall {
          induction variables:
            
            unknown i[106429] "index var" "insert auto destroy"
          iterated expressions:
            keep[106394]
          shadow variables:
          other variables
            forall body
          {
            unknown dst[106409] "ref var"(106408 call(106403 call . copy[106379] c"dsiAccess") i[106429])
            (106412 'end of statement')
            const src[106418] "const" "ref var"(106417 call(381344 call . this[106964] c"dsiAccess") i[106429])
            (106421 'end of statement')
            (106426 '=' dst[106409] src[106418])
          }
        }
        unknown needsDestroy[106437] "param"(106436 'needs auto destroy'(381352 call . this[106964] c"eltType"))
        (106440 'end of statement')
        if(106556 call _cond_test needsDestroy[106437])
        {
          if(106551 call _cond_test(106450 call <(106443 call . reallocD[106230] c"size")(106447 call .(358859 call . this[106964] c"dom") c"dsiNumIndices")))
          {
            if(106546 call _cond_test(106455 call _deinitElementsIsParallel(381358 call . this[106964] c"eltType")))
            {
              Forall {
                induction variables:
                  
                  unknown i[106482] "index var" "insert auto destroy"
                iterated expressions:
                  (381363 call . this[106964] c"dom")
                shadow variables:
                other variables
                  forall body
                {
                  if(106476 call _cond_test(106465 call !(106464 call(106459 call . keep[106394] c"contains") i[106482])))
                  {
                    (106473 call chpl__autoDestroy(106471 call(381368 call . this[106964] c"dsiAccess") i[106482]))
                  }
                }
              }
            }
            {
              {
                unknown _indexOfInterest[106512] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[106513] "expr temp" "temp"
                (106522 'move' _iterator[106513](106520 call _getIterator(381374 call . this[106964] c"dom")))
                Defer
                {
                  {
                    (106538 call _freeIterator _iterator[106513])
                  }
                }
                { scopeless type
                  (106527 'move' _indexOfInterest[106512](106524 call iteratorIndex _iterator[106513]))
                }
                ForLoop[106514]
                {
                  unknown i[106531] "index var" "insert auto destroy"
                  (106533 'move' i[106531] _indexOfInterest[106512])
                  {
                    if(106507 call _cond_test(106496 call !(106495 call(106490 call . keep[106394] c"contains") i[106531])))
                    {
                      (106504 call chpl__autoDestroy(106502 call(381379 call . this[106964] c"dsiAccess") i[106531]))
                    }
                  }
                  label _continueLabel[106517]
                  _indexOfInterest[106512]
                  _iterator[106513]
                }
                label _breakLabel[106518]
              }
            }
          }
        }
        (106565 call =(381385 call . this[106964] c"off")(106562 call . copy[106379] c"off"))
        (106573 call =(381390 call . this[106964] c"blk")(106570 call . copy[106379] c"blk"))
        (106581 call =(381395 call . this[106964] c"str")(106578 call . copy[106379] c"str"))
        (106589 call =(381400 call . this[106964] c"factoredOffs")(106586 call . copy[106379] c"factoredOffs"))
        (106596 call(381404 call . this[106964] c"dsiDestroyArr")(deinitElts = 0))
        (106603 call =(381409 call . this[106964] c"data")(106600 call . copy[106379] c"data"))
        if(106639 call _cond_test(106616 call && earlyShiftData[93435](106614 call !(106611 call .(106608 call . reallocD[106230] c"_value") c"stridable"))))
        {
          if(106634 call _cond_test(106623 call >(106619 call . reallocD[106230] c"size") 0))
          {
            (106630 call =(381415 call . this[106964] c"shiftedData")(106627 call . copy[106379] c"shiftedData"))
          }
        }
        (106645 call chpl__delete copy[106379])
      }
    }
  }
  function DefaultRectangularArr[106846](?).dsiPostReallocate[106656](arg _mt[106970]:_MT[238], arg this[106968]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function DefaultRectangularArr[106846](?).dsiLocalSlice[106665](arg _mt[106974]:_MT[238], arg this[106972]:DefaultRectangularArr[106846](?), arg ranges[106663]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (106670 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularArr[106846](?).dsiGetRAD[106677](arg _mt[106978]:_MT[238], arg this[106976]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method"
  {
    unknown rad[106686](106685 call _remoteAccessData[101221](?)(381422 call . this[106976] c"eltType")(381427 call . this[106976] c"rank")(381432 call . this[106976] c"idxType")(381437 call . this[106976] c"stridable"))
    (106689 'end of statement')
    (106696 call =(106692 call . rad[106686] c"off")(381442 call . this[106976] c"off"))
    (106704 call =(106700 call . rad[106686] c"blk")(381447 call . this[106976] c"blk"))
    (106712 call =(106708 call . rad[106686] c"str")(381452 call . this[106976] c"str"))
    (106720 call =(106716 call . rad[106686] c"origin") 0)
    (106728 call =(106724 call . rad[106686] c"factoredOffs")(381457 call . this[106976] c"factoredOffs"))
    (106736 call =(106732 call . rad[106686] c"data")(381462 call . this[106976] c"data"))
    (106744 call =(106740 call . rad[106686] c"shiftedData")(381467 call . this[106976] c"shiftedData"))
    (106748 return rad[106686])
  }
  function DefaultRectangularArr[106846](?).dsiTargetLocales[106754](arg _mt[106982]:_MT[238], arg this[106980]:DefaultRectangularArr[106846](?)) : _unknown[51] "method" "primary method"
  {
    (106766 return(106764 call chpl__buildArrayExpr(106761 call chpl_localeID_to_locale(106760 '_wide_get_locale'(106757 call . this[106980] c"data")))))
  }
  function DefaultRectangularArr[106846](?).dsiHasSingleLocalSubdomain[106773](arg _mt[106986]:_MT[238], arg this[106984]:DefaultRectangularArr[106846](?)) param : _unknown[51] "method" "primary method"
  {
    (106776 return 1)
  }
  function DefaultRectangularArr[106846](?).dsiLocalSubdomain[106787](arg _mt[106990]:_MT[238], arg this[106988]:DefaultRectangularArr[106846](?), arg loc[106784] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(106821 call _cond_test(106797 call ==(106794 call chpl_localeID_to_locale(106793 '_wide_get_locale'(106790 call . this[106988] c"data"))) loc[106784]))
    {
      (106803 return(106802 call _getDomain(381474 call . this[106988] c"dom")))
    }
    {
      unknown a[106813](106811 call chpl__buildDomainRuntimeType defaultDist[94053](381479 call . this[106988] c"rank")(381484 call . this[106988] c"idxType")(381489 call . this[106988] c"stridable"))
      (106816 'end of statement')
      (106819 return a[106813])
    }
  }
  function DefaultRectangularArr[106846](?).dsiLocalSubdomains[106834](arg _mt[106994]:_MT[238], arg this[106992]:DefaultRectangularArr[106846](?), arg loc[106831] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (106840 yield(106839 call(381495 call . this[106992] c"dsiLocalSubdomain") loc[106831]))
  }
  type DefaultRectangularArr[106846](?) val super[355713]:BaseRectangularArr[149856](?) "super class" unknown idxSignedType[103098] "type variable"(103097 call chpl__signedType(103095 call chpl__idxTypeToIntIdxType idxType[149755])) unknown dom[103111](103109 call unmanaged DefaultRectangularDom[415445](?)(rank = rank[149751])(idxType = idxType[149755])(stridable = stridable[149759])) unknown off[103119](103117 call * rank[149751] idxType[149755]) unknown blk[103130](103128 call * rank[149751](103127 call chpl__idxTypeToIntIdxType idxType[149755])) unknown sizesPerDim[103141](103139 call * rank[149751](103138 call chpl__idxTypeToIntIdxType idxType[149755])) unknown str[103149](103147 call * rank[149751] idxSignedType[103098]) unknown factoredOffs[103157](103156 call chpl__idxTypeToIntIdxType idxType[149755]) unknown data[103166] "alias scope from this" "local field" nil[44](103164 call _ddata[11696](?) eltType[149823]) unknown shiftedData[103174] "alias scope from this" "local field"(103173 call _ddata[11696](?) eltType[149823]) unknown externFreeFunc[103179] c_void_ptr[149] unknown externArr[103185] 0 bool[10] unknown _borrowed[103191] 1 bool[10] unknown callPostAlloc[103197] 1 bool[10] unknown deinitElts[103203] 1 bool[10]
  type unmanaged DefaultRectangularArr[415490](?)
  type DefaultRectangularArr[415340](?)
  type DefaultRectangularArr[379736](?)
  function chpl__serialViewIter[107001](arg arr[106999]:_any[178](?), arg viewDom[107003]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown useCache[107023] "param"(107021 call &&(107012 call chpl__isArrayView arr[106999])(107020 call(107016 call . arr[106999] c"shouldUseIndexCache")))
    (107026 'end of statement')
    unknown info[107056](107053 IfExpr  useCache[107023] then
    { scopeless
      (107032 call . arr[106999] c"indexCache")
    } else
    { scopeless(107050 IfExpr (107042 call(107038 call . arr[106999] c"isSliceArrayView")) then
      { scopeless
        (107046 call . arr[106999] c"arr")
      } else
      { scopeless
        arr[106999]
      } )
    } )
    (107059 'end of statement')
    if(107486 call _cond_test(107065 call ==(107061 call . arr[106999] c"rank") 1))
    {
      if(107373 call _cond_test(107071 call !(107068 call . viewDom[107003] c"stridable")))
      {
        const first[107083] "const"(107082 call(107074 call . info[107056] c"getDataIndex")(107078 call . viewDom[107003] c"dsiLow"))
        (107086 'end of statement')
        const second[107110] "const"(107109 call(107089 call . info[107056] c"getDataIndex")(107107 call(107093 call . viewDom[107003] c"chpl_intToIdx")(107104 call +(107102 call chpl__idxToInt(107098 call . viewDom[107003] c"dsiLow")) 1)))
        (107113 'end of statement')
        const step[107118] "const"(107116 call - second[107110] first[107083])
        (107121 'end of statement')
        const last[107135] "const"(107133 call + first[107083](107131 call *(107128 call -(107124 call . viewDom[107003] c"dsiNumIndices") 1) step[107118]))
        (107138 'end of statement')
        {
          unknown _indexOfInterest[107156] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107157] "expr temp" "temp"
          (107166 'move' _iterator[107157](107164 call _getIterator(107145 call chpl_direct_pos_stride_range_iter first[107083] last[107135] step[107118])))
          Defer
          {
            {
              (107183 call _freeIterator _iterator[107157])
            }
          }
          { scopeless type
            (107172 'move' _indexOfInterest[107156](107169 call iteratorIndex _iterator[107157]))
          }
          ForLoop[107158]
          {
            unknown i[107176] "index var" "insert auto destroy"
            (107178 'move' i[107176] _indexOfInterest[107156])
            {
              (107153 yield(107152 call(107147 call . info[107056] c"theData") i[107176]))
            }
            label _continueLabel[107161]
            _indexOfInterest[107156]
            _iterator[107157]
          }
          label _breakLabel[107162]
        }
      }
      {
        const viewDomDim[107197] "const"(107196 call(107191 call . viewDom[107003] c"dsiDim") 0)
        const stride[107210] "const"(107208 call _cast(107205 call . viewDom[107003] c"intIdxType")(107201 call . viewDomDim[107197] c"stride"))
        const start[107217] "const"(107214 call . viewDomDim[107197] c"first")
        const second[107239] "const"(107238 call(107221 call . info[107056] c"getDataIndex")(107236 call(107225 call . viewDom[107003] c"chpl_intToIdx")(107233 call +(107229 call . viewDomDim[107197] c"firstAsInt") stride[107210])))
        (107242 'end of statement')
        unknown first[107251](107250 call(107245 call . info[107056] c"getDataIndex") start[107217])
        (107254 'end of statement')
        const step[107268] "const"(107266 call _cast(107265 call chpl__signedType(107261 call . viewDom[107003] c"intIdxType"))(107257 call - second[107239] first[107251]))
        (107271 'end of statement')
        unknown last[107291](107289 call + first[107251](107287 call *(107278 call -(107274 call . viewDomDim[107197] c"size") 1)(107285 call _cast(107282 call . viewDom[107003] c"intIdxType") step[107268])))
        (107294 'end of statement')
        if(107304 call _cond_test(107297 call < step[107268] 0))
        {
          (107301 call <=> last[107291] first[107251])
        }
        unknown data[107313](107310 call . info[107056] c"theData")
        (107316 'end of statement')
        {
          unknown _indexOfInterest[107331] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107332] "expr temp" "temp"
          (107341 'move' _iterator[107332](107339 call _getIterator(107350 call chpl_direct_range_iter first[107251] last[107291] step[107268])))
          Defer
          {
            {
              (107366 call _freeIterator _iterator[107332])
            }
          }
          { scopeless type
            (107355 'move' _indexOfInterest[107331](107352 call iteratorIndex _iterator[107332]))
          }
          ForLoop[107333]
          {
            unknown i[107359] "index var" "insert auto destroy"
            (107361 'move' i[107359] _indexOfInterest[107331])
            (107329 yield(107328 call data[107313] i[107359]))
            label _continueLabel[107336]
            _indexOfInterest[107331]
            _iterator[107332]
          }
          label _breakLabel[107337]
        }
      }
    }
    {
      if(107482 call _cond_test useCache[107023])
      {
        {
          unknown _indexOfInterest[107404] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107405] "expr temp" "temp"
          (107414 'move' _iterator[107405](107412 call _getIterator viewDom[107003]))
          Defer
          {
            {
              (107430 call _freeIterator _iterator[107405])
            }
          }
          { scopeless type
            (107419 'move' _indexOfInterest[107404](107416 call iteratorIndex _iterator[107405]))
          }
          ForLoop[107406]
          {
            unknown i[107423] "index var" "insert auto destroy"
            (107425 'move' i[107423] _indexOfInterest[107404])
            {
              const dataIdx[107388] "const"(107387 call(107382 call . info[107056] c"getDataIndex") i[107423])
              (107391 'end of statement')
              (107402 yield(107401 call(107396 call . info[107056] c"getDataElem") dataIdx[107388]))
            }
            label _continueLabel[107409]
            _indexOfInterest[107404]
            _iterator[107405]
          }
          label _breakLabel[107410]
        }
      }
      {
        {
          unknown _indexOfInterest[107447] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107448] "expr temp" "temp"
          (107457 'move' _iterator[107448](107455 call _getIterator(107443 call chpl__serialViewIterHelper arr[106999] viewDom[107003])))
          Defer
          {
            {
              (107474 call _freeIterator _iterator[107448])
            }
          }
          { scopeless type
            (107463 'move' _indexOfInterest[107447](107460 call iteratorIndex _iterator[107448]))
          }
          ForLoop[107449]
          {
            unknown elem[107467] "index var" "insert auto destroy"
            (107469 'move' elem[107467] _indexOfInterest[107447])
            (107445 yield elem[107467])
            label _continueLabel[107452]
            _indexOfInterest[107447]
            _iterator[107448]
          }
          label _breakLabel[107453]
        }
      }
    }
  }
  where {
    (107008 call chpl__isDROrDRView arr[106999])
  }
  function chpl__serialViewIter[107498](arg arr[107496]:_any[178](?), arg viewDom[107500]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107511] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107512] "expr temp" "temp"
      (107521 'move' _iterator[107512](107519 call _getIterator(107507 call chpl__serialViewIterHelper arr[107496] viewDom[107500])))
      Defer
      {
        {
          (107538 call _freeIterator _iterator[107512])
        }
      }
      { scopeless type
        (107527 'move' _indexOfInterest[107511](107524 call iteratorIndex _iterator[107512]))
      }
      ForLoop[107513]
      {
        unknown elem[107531] "index var" "insert auto destroy"
        (107533 'move' elem[107531] _indexOfInterest[107511])
        (107509 yield elem[107531])
        label _continueLabel[107516]
        _indexOfInterest[107511]
        _iterator[107512]
      }
      label _breakLabel[107517]
    }
  }
  function chpl__serialViewIterHelper[107552](arg arr[107550]:_any[178](?), arg viewDom[107554]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107642] "expr temp" "temp"
      (107651 'move' _iterator[107642](107649 call _getIterator viewDom[107554]))
      Defer
      {
        {
          (107667 call _freeIterator _iterator[107642])
        }
      }
      { scopeless type
        (107656 'move' _indexOfInterest[107641](107653 call iteratorIndex _iterator[107642]))
      }
      ForLoop[107643]
      {
        unknown i[107660] "index var" "insert auto destroy"
        (107662 'move' i[107660] _indexOfInterest[107641])
        {
          const dataIdx[107611] "const"(107608 IfExpr (107565 call(107561 call . arr[107550] c"isReindexArrayView")) then
          { scopeless
            (107579 call chpl_reindexConvertIdx i[107660](107570 call . arr[107550] c"dom")(107576 call . arr[107550] c"downdom"))
          } else
          { scopeless(107605 IfExpr (107587 call(107583 call . arr[107550] c"isRankChangeArrayView")) then
            { scopeless
              (107603 call chpl_rankChangeConvertIdx i[107660](107594 call . arr[107550] c"collapsedDim")(107600 call . arr[107550] c"idx"))
            } else
            { scopeless
              i[107660]
            } )
          } )
          (107614 'end of statement')
          const info[107628] "const"(107625 IfExpr (107619 call chpl__isArrayView arr[107550]) then
          { scopeless
            (107621 call . arr[107550] c"arr")
          } else
          { scopeless
            arr[107550]
          } )
          (107631 'end of statement')
          (107639 yield(107638 call(107633 call . info[107628] c"dsiAccess") dataIdx[107611]))
        }
        label _continueLabel[107646]
        _indexOfInterest[107641]
        _iterator[107642]
      }
      label _breakLabel[107647]
    }
  }
  function DefaultRectangularDom[100790](?).dsiSerialReadWrite[107682](arg _mt[107687]:_MT[238], arg this[107684]:DefaultRectangularDom[100790](?) :
  DefaultRectangularDom[100790](?), arg f[107680]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107717 call <~>(107711 call <~> f[107680](107690 'new'(107710 call ioLiteral[238774] "{")))(107716 call(381546 call . this[107684] c"ranges") 0))
    {
      unknown _indexOfInterest[107760] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107761] "expr temp" "temp"
      (107770 'move' _iterator[107761](107768 call _getIterator(107778 call chpl_direct_range_iter 1(107775 call -(381559 call . this[107684] c"rank") 1) 1)))
      Defer
      {
        {
          (107794 call _freeIterator _iterator[107761])
        }
      }
      { scopeless type
        (107783 'move' _indexOfInterest[107760](107780 call iteratorIndex _iterator[107761]))
      }
      ForLoop[107762]
      {
        unknown i[107787] "index var" "insert auto destroy"
        (107789 'move' i[107787] _indexOfInterest[107760])
        (107757 call <~>(107751 call <~> f[107680](107730 'new'(107750 call ioLiteral[238774] ", ")))(107756 call(381553 call . this[107684] c"ranges") i[107787]))
        label _continueLabel[107765]
        _indexOfInterest[107760]
        _iterator[107761]
      }
      label _breakLabel[107766]
    }
    (107823 call <~> f[107680](107802 'new'(107822 call ioLiteral[238774] "}")))
  }
  function DefaultRectangularDom[100790](?).dsiSerialWrite[107833](arg _mt[107838]:_MT[238], arg this[107835]:DefaultRectangularDom[100790](?) :
  DefaultRectangularDom[100790](?), arg f[107831]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107848 call(107843 call . this[107835] c"dsiSerialReadWrite") f[107831])
  }
  function DefaultRectangularDom[100790](?).dsiSerialRead[107858](arg _mt[107863]:_MT[238], arg this[107860]:DefaultRectangularDom[100790](?) :
  DefaultRectangularDom[100790](?), arg f[107856]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107871 call(107866 call . this[107860] c"dsiSerialReadWrite") f[107856])
  }
  function DefaultRectangularArr[106846](?).dsiSerialReadWrite[107881](arg _mt[107886]:_MT[238], arg this[107883]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg f[107879]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107892 call chpl_serialReadWriteRectangular f[107879] this[107883])
  }
  function DefaultRectangularDom[100790](?).dsiSupportsAutoLocalAccess[107900](arg _mt[107905]:_MT[238], arg this[107902]:DefaultRectangularDom[100790](?) :
  DefaultRectangularDom[100790](?)) param : _unknown[51] "method" "method overrides"
  {
    (107908 return defaultRectangularSupportsAutoLocalAccess[93445])
  }
  function chpl_serialReadWriteRectangular[107917](arg f[107915]:_any[178](?), arg arr[107919]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    (107929 call chpl_serialReadWriteRectangular f[107915] arr[107919](107926 call . arr[107919] c"dom"))
  }
  function chpl_serialReadWriteRectangular[107938](arg f[107936]:_any[178](?), arg arr[107940]:_any[178](?), arg dom[107942]:_any[178](?)) : _unknown[51] throws "last resort" "no return value for void"
  {
    (107949 call chpl_serialReadWriteRectangularHelper f[107936] arr[107940] dom[107942])
  }
  function chpl_serialReadWriteRectangularHelper[107958](arg f[107956]:_any[178](?), arg arr[107960]:_any[178](?), arg dom[107962]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    unknown rank[107968] "param"(107965 call . arr[107960] c"rank")
    (107971 'end of statement')
    unknown idxType[107977] "type variable"(107974 call . arr[107960] c"idxType")
    unknown idxSignedType[107987] "type variable"(107986 call chpl__signedType(107984 call chpl__idxTypeToIntIdxType idxType[107977]))
    const isNative[108002] "const"(108000 call _cast bool[10](107998 call(107993 call . f[107956] c"styleElement") QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER[19685]))
    (108005 'end of statement')
    function writeSpaces[108012](arg dim[108009] :
    int(64)[13]) : _unknown[51] throws "no return value for void"
    {
      {
        unknown _indexOfInterest[108029] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[108030] "expr temp" "temp"
        (108039 'move' _iterator[108030](108037 call _getIterator(108044 call chpl_direct_range_iter 1 dim[108009] 1)))
        Defer
        {
          {
            (108060 call _freeIterator _iterator[108030])
          }
        }
        { scopeless type
          (108049 'move' _indexOfInterest[108029](108046 call iteratorIndex _iterator[108030]))
        }
        ForLoop[108031]
        {
          unknown i[108053] "index var" "insert auto destroy"
          (108055 'move' i[108053] _indexOfInterest[108029])
          {
            (108025 call <~> f[107956](108020 'new'(108024 call ioLiteral[238774] " ")))
          }
          label _continueLabel[108034]
          _indexOfInterest[108029]
          _iterator[108030]
        }
        label _breakLabel[108035]
      }
    }
    function recursiveArrayWriter[108079](in arg idx[108076] :
    (108074 call * rank[107968] idxType[107977]), arg dim[108082] =
    0, in arg last[108086] =
    0) : _unknown[51] throws "no return value for void"
    {
      unknown binary[108097](108096 call(108092 call . f[107956] c"binary"))
      (108100 'end of statement')
      unknown arrayStyle[108109](108108 call(108103 call . f[107956] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19665])
      (108112 'end of statement')
      unknown isspace[108122](108120 call &&(108115 call == arrayStyle[108109] QIO_ARRAY_FORMAT_SPACE[19695])(108118 call ! binary[108097]))
      (108125 'end of statement')
      unknown isjson[108135](108133 call &&(108128 call == arrayStyle[108109] QIO_ARRAY_FORMAT_JSON[19705])(108131 call ! binary[108097]))
      (108138 'end of statement')
      unknown ischpl[108148](108146 call &&(108141 call == arrayStyle[108109] QIO_ARRAY_FORMAT_CHPL[19700])(108144 call ! binary[108097]))
      (108151 'end of statement')
      unknown strType[108153] "type variable" idxSignedType[107987]
      unknown makeStridePositive[108182](108179 IfExpr (108167 call >(108163 call .(108162 call(108157 call . dom[107962] c"dsiDim") dim[108082]) c"stride") 0) then
      { scopeless
        (108171 call _cast strType[108153] 1)
      } else
      { scopeless
        (108177 call _cast strType[108153](108174 call - 1))
      } )
      (108185 'end of statement')
      if(108262 call _cond_test(108188 call || isjson[108135] ischpl[108148]))
      {
        if(108256 call _cond_test(108195 call != dim[108082](108193 call - rank[107968] 1)))
        {
          (108219 call <~> f[107956](108198 'new'(108218 call ioLiteral[238774] "[\n")))
          (108229 call writeSpaces(108226 call + dim[108082] 1))
        }
        {
          (108253 call <~> f[107956](108232 'new'(108252 call ioLiteral[238774] "[")))
        }
      }
      if(108585 call _cond_test(108271 call == dim[108082](108269 call - rank[107968] 1)))
      {
        unknown first[108274] 1
        (108277 'end of statement')
        if(108304 call _cond_test(108286 call && debugDefaultDist[93395](108283 call . f[107956] c"writing")))
        {
          (108302 call(108291 call . f[107956] c"writeln")(108300 call(108295 call . dom[107962] c"dsiDim") dim[108082]))
        }
        {
          unknown _indexOfInterest[108386] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108387] "expr temp" "temp"
          (108396 'move' _iterator[108387](108394 call _getIterator(108318 call chpl_by(108316 call(108311 call . dom[107962] c"dsiDim") dim[108082]) makeStridePositive[108182])))
          Defer
          {
            {
              (108419 call _freeIterator _iterator[108387])
            }
          }
          { scopeless type
            (108408 'move' _indexOfInterest[108386](108405 call iteratorIndex _iterator[108387]))
          }
          ForLoop[108388]
          {
            unknown j[108412] "index var" "insert auto destroy"
            (108414 'move' j[108412] _indexOfInterest[108386])
            {
              if(108360 call _cond_test first[108274])
              {
                (108323 call = first[108274] 0)
              }
              {
                if(108354 call _cond_test isspace[108122])
                {
                  (108333 call <~> f[107956](108328 'new'(108332 call ioLiteral[238774] " ")))
                }
                {
                  if(108349 call _cond_test(108338 call || isjson[108135] ischpl[108148]))
                  {
                    (108346 call <~> f[107956](108341 'new'(108345 call ioLiteral[238774] ", ")))
                  }
                }
              }
              (108372 call =(108370 call idx[108076] dim[108082]) j[108412])
              (108383 call <~> f[107956](108382 call(108377 call . arr[107960] c"dsiAccess") idx[108076]))
            }
            label _continueLabel[108391]
            _indexOfInterest[108386]
            _iterator[108387]
          }
          label _breakLabel[108392]
        }
      }
      {
        {
          unknown _indexOfInterest[108544] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108545] "expr temp" "temp"
          (108554 'move' _iterator[108545](108552 call _getIterator(108435 call chpl_by(108433 call(108428 call . dom[107962] c"dsiDim") dim[108082]) makeStridePositive[108182])))
          Defer
          {
            {
              (108577 call _freeIterator _iterator[108545])
            }
          }
          { scopeless type
            (108566 'move' _indexOfInterest[108544](108563 call iteratorIndex _iterator[108545]))
          }
          ForLoop[108546]
          {
            unknown j[108570] "index var" "insert auto destroy"
            (108572 'move' j[108570] _indexOfInterest[108544])
            {
              unknown lastIdx[108447](108444 call .(108443 call(108438 call . dom[107962] c"dsiDim") dim[108082]) c"last")
              (108450 'end of statement')
              (108457 call =(108455 call idx[108076] dim[108082]) j[108570])
              (108491 call recursiveArrayWriter idx[108076](dim =(108465 call + dim[108082] 1))(last =(108488 call &&(108473 call || last[108086](108471 call == dim[108082] 0))(108486 call == j[108570](108483 call .(108482 call(108477 call . dom[107962] c"dsiDim") dim[108082]) c"alignedHigh")))))
              if(108540 call _cond_test(108495 call || isjson[108135] ischpl[108148]))
              {
                if(108535 call _cond_test(108499 call != j[108570] lastIdx[108447]))
                {
                  (108523 call <~> f[107956](108502 'new'(108522 call ioLiteral[238774] ",\n")))
                  (108533 call writeSpaces(108530 call + dim[108082] 1))
                }
              }
            }
            label _continueLabel[108549]
            _indexOfInterest[108544]
            _iterator[108545]
          }
          label _breakLabel[108550]
        }
      }
      if(108684 call _cond_test isspace[108122])
      {
        if(108609 call _cond_test(108597 call &&(108591 call ! last[108086])(108595 call != dim[108082] 0)))
        {
          (108605 call <~> f[107956](108600 'new'(108604 call ioLiteral[238774] "\n")))
        }
      }
      {
        if(108680 call _cond_test(108616 call || isjson[108135] ischpl[108148]))
        {
          if(108674 call _cond_test(108623 call != dim[108082](108621 call - rank[107968] 1)))
          {
            (108631 call <~> f[107956](108626 'new'(108630 call ioLiteral[238774] "\n")))
            (108638 call writeSpaces dim[108082])
            (108662 call <~> f[107956](108641 'new'(108661 call ioLiteral[238774] "]")))
          }
          {
            (108671 call <~> f[107956](108666 'new'(108670 call ioLiteral[238774] "]")))
          }
        }
      }
    }
    if(109435 call _cond_test(108743 call &&(108729 call &&(108714 call &&(108708 call &&(108698 call && 0(108696 call !(108693 call . f[107956] c"writing")))(108706 call !(108705 call(108701 call . f[107956] c"binary"))))(108712 call == rank[107968] 1))(108727 call ==(108723 call .(108722 call(108717 call . dom[107962] c"dsiDim") 0) c"stride") 1))(108741 call ==(108737 call .(108734 call . dom[107962] c"_arrs") c"size") 1)))
    {
      unknown binary[108751](108750 call(108746 call . f[107956] c"binary"))
      (108754 'end of statement')
      unknown arrayStyle[108763](108762 call(108757 call . f[107956] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19665])
      (108766 'end of statement')
      unknown isspace[108776](108774 call &&(108769 call == arrayStyle[108763] QIO_ARRAY_FORMAT_SPACE[19695])(108772 call ! binary[108751]))
      (108779 'end of statement')
      unknown isjson[108789](108787 call &&(108782 call == arrayStyle[108763] QIO_ARRAY_FORMAT_JSON[19705])(108785 call ! binary[108751]))
      (108792 'end of statement')
      unknown ischpl[108802](108800 call &&(108795 call == arrayStyle[108763] QIO_ARRAY_FORMAT_CHPL[19700])(108798 call ! binary[108751]))
      (108805 'end of statement')
      if(108820 call _cond_test(108808 call || isjson[108789] ischpl[108802]))
      {
        (108816 call <~> f[107956](108811 'new'(108815 call ioLiteral[238774] "[")))
      }
      unknown first[108825] 1
      (108828 'end of statement')
      unknown offset[108839](108836 call .(108835 call(108830 call . dom[107962] c"dsiDim") 0) c"low")
      (108842 'end of statement')
      unknown i[108844] 0
      (108847 'end of statement')
      unknown read_end[108849] 0
      (108852 'end of statement')
      {
        unknown tmp[109085] "temp"
        (109103 'move' tmp[109085](109101 call _cond_test 1))
        WhileDo[109090]
        {
          {
            if(108960 call _cond_test first[108825])
            {
              (108857 call = first[108825] 0)
              Try
              {
                {
                  if(108891 call _cond_test(108863 call || isjson[108789] ischpl[108802]))
                  {
                    (108871 call <~> f[107956](108866 'new'(108870 call ioLiteral[238774] "]")))
                  }
                  {
                    if(108887 call _cond_test isspace[108776])
                    {
                      (108883 call <~> f[107956](108877 'new'(108882 call ioNewline[238722](skipWhitespaceOnly = 1))))
                    }
                  }
                  (108899 call = read_end[108849] 1)
                  break _breakLabel[109089] _breakLabel[109089]
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354269] "temp"(354273 'dynamic_cast' unmanaged BadFormatError?[415649](354272 'current error'))
                if(354276 '!=' tmp[354269] nil[44])
                {
                  unknown err[354282](354287 'new'(354285 call _owned[30](?)(354283 'to non nilable class' tmp[354269])))
                  {
                  }
                }
                {
                }
              }
            }
            {
              Try
              {
                {
                  if(108941 call _cond_test isspace[108776])
                  {
                    (108920 call <~> f[107956](108915 'new'(108919 call ioLiteral[238774] " ")))
                  }
                  {
                    if(108936 call _cond_test(108925 call || isjson[108789] ischpl[108802]))
                    {
                      (108933 call <~> f[107956](108928 'new'(108932 call ioLiteral[238774] ",")))
                    }
                  }
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354290] "temp"(354294 'dynamic_cast' unmanaged BadFormatError?[415649](354293 'current error'))
                if(354297 '!=' tmp[354290] nil[44])
                {
                  unknown err[354303](354308 'new'(354306 call _owned[30](?)(354304 'to non nilable class' tmp[354290])))
                  {
                    break _breakLabel[109089] _breakLabel[109089]
                  }
                }
                {
                }
              }
            }
            if(109062 call _cond_test(108976 call >= i[108844](108973 call .(108972 call(108967 call . dom[107962] c"dsiDim") 0) c"size")))
            {
              unknown sz[108988](108985 call .(108984 call(108979 call . dom[107962] c"dsiDim") 0) c"size")
              (108991 'end of statement')
              if(109002 call _cond_test(108995 call < sz[108988] 4))
              {
                (108999 call = sz[108988] 4)
              }
              (109012 call = sz[108988](109010 call * 2 sz[108988]))
              const newDom[109024] "const"(109022 call chpl__buildDomainExpr(109019 call #(109016 call chpl_build_low_bounded_range offset[108839]) sz[108988]))
              (109027 'end of statement')
              (109036 call(109031 call . arr[107960] c"dsiReallocate") newDom[109024])
              (109051 call(109039 call . dom[107962] c"dsiSetIndices")(109049 call(109045 call . newDom[109024] c"getIndices")))
              (109060 call(109056 call . arr[107960] c"dsiPostReallocate"))
            }
            (109077 call <~> f[107956](109076 call(109068 call . arr[107960] c"dsiAccess")(109073 call + offset[108839] i[108844])))
            (109082 call += i[108844] 1)
          }
          label _continueLabel[109088]
          (109096 'move' tmp[109085](109094 call _cond_test 1))
          tmp[109085]
        }
        label _breakLabel[109089]
      }
      if(109128 call _cond_test(109107 call ! read_end[108849]))
      {
        if(109123 call _cond_test(109111 call || isjson[108789] ischpl[108802]))
        {
          (109119 call <~> f[107956](109114 'new'(109118 call ioLiteral[238774] "]")))
        }
      }
      {
        const newDom[109141] "const"(109139 call chpl__buildDomainExpr(109136 call #(109133 call chpl_build_low_bounded_range offset[108839]) i[108844]))
        (109144 'end of statement')
        (109152 call(109147 call . arr[107960] c"dsiReallocate") newDom[109141])
        (109165 call(109155 call . dom[107962] c"dsiSetIndices")(109163 call(109159 call . newDom[109141] c"getIndices")))
        (109172 call(109168 call . arr[107960] c"dsiPostReallocate"))
      }
    }
    {
      if(109431 call _cond_test(109219 call &&(109208 call &&(109205 call &&(109197 call &&(109188 call &&(109181 call(109177 call . arr[107960] c"isDefaultRectangular"))(109186 call !(109185 call chpl__isArrayView arr[107960])))(109196 call _isSimpleIoType(109192 call . arr[107960] c"eltType")))(109204 call(109200 call . f[107956] c"binary"))) isNative[108002])(109218 call(109213 call . arr[107960] c"isDataContiguous") dom[107962])))
      {
        const elemSize[109228] "const"(109227 call c_sizeof(109223 call . arr[107960] c"eltType"))
        (109231 'end of statement')
        if(109309 call _cond_test 1)
        {
          unknown rw[109243](109240 IfExpr (109235 call . f[107956] c"writing") then
          { scopeless
            "write"
          } else
          { scopeless
            "read"
          } )
          (109246 'end of statement')
          (109307 call assert(109269 call <=(109260 call *(109254 call _cast uint(64)[115](109250 call . dom[107962] c"dsiNumIndices"))(109258 call _cast uint(64)[115] elemSize[109228]))(109267 call _cast uint(64)[115](109265 call max ssize_t[20650]))) "length of array to " rw[109243] " is greater than ssize_t can hold")
        }
        const len[109317] "const"(109314 call . dom[107962] c"dsiNumIndices")
        (109320 'end of statement')
        const src[109325] "const"(109322 call . arr[107960] c"theData")
        (109328 'end of statement')
        const idx[109339] "const"(109338 call(109330 call . arr[107960] c"getDataIndex")(109334 call . dom[107962] c"dsiLow"))
        (109342 'end of statement')
        const size[109353] "const"(109351 call *(109345 call _cast ssize_t[20650] len[109317])(109349 call _cast ssize_t[20650] elemSize[109228]))
        (109356 'end of statement')
        Try
        {
          {
            if(109401 call _cond_test(109358 call . f[107956] c"writing"))
            {
              (109378 call(109364 call . f[107956] c"writeBytes")(109375 call _ddata_shift(109369 call . arr[107960] c"eltType") src[109325] idx[109339]) size[109353])
            }
            {
              (109398 call(109384 call . f[107956] c"readBytes")(109395 call _ddata_shift(109389 call . arr[107960] c"eltType") src[109325] idx[109339]) size[109353])
            }
          }
        }
        Catch err : Error
        {
          unknown tmp[354311] "temp"(354314 'current error')
          unknown err[354317](354322 'new'(354320 call _owned[30](?)(354318 'to non nilable class' tmp[354311])))
          {
            (109411 'throw' err[354317])
          }
        }
      }
      {
        const zeroTup[109421] "const"(109419 call * rank[107968] idxType[107977])
        (109424 'end of statement')
        (109429 call recursiveArrayWriter zeroTup[109421])
      }
    }
  }
  function DefaultRectangularArr[106846](?).dsiSerialWrite[109447](arg _mt[109452]:_MT[238], arg this[109449]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg f[109445]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109457 call(381739 call . this[109449] c"dsiSerialReadWrite") f[109445])
  }
  function DefaultRectangularArr[106846](?).dsiSerialRead[109467](arg _mt[109472]:_MT[238], arg this[109469]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg f[109465]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109477 call(381744 call . this[109469] c"dsiSerialReadWrite") f[109465])
  }
  function DefaultRectangularArr[106846](?).isDataContiguous[109487](arg _mt[109492]:_MT[238], arg this[109489]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg dom[109485]:_any[178](?)) : _unknown[51] "method"
  {
    if(109535 call _cond_test debugDefaultDistBulkTransfer[93400])
    {
      (109533 call chpl_debug_writeln "isDataContiguous(): off="(381751 call . this[109489] c"off") " blk="(381756 call . this[109489] c"blk"))
    }
    if(109554 call _cond_test(109549 call !=(109547 call(381761 call . this[109489] c"blk")(109544 call -(381766 call . this[109489] c"rank") 1)) 1))
    {
      (109552 return 0)
    }
    if(109657 call _cond_test(109561 call >=(381771 call . this[109489] c"rank") 2))
    {
      const domDims[109571] "const"(109570 call(109566 call . dom[109485] c"dsiDims"))
      (109574 'end of statement')
      {
        unknown dim[109621] 0
        unknown tmp[109622] "maybe param" "temp"
        (109633 'move' tmp[109622](109631 call chpl_compute_low_param_loop_bound 0(109579 call -(381776 call . this[109489] c"rank") 2)))
        unknown tmp[109623] "maybe param" "temp"
        (109643 'move' tmp[109623](109641 call chpl_compute_high_param_loop_bound 0(109638 call -(381795 call . this[109489] c"rank") 2)))
        unknown tmp[109624] "maybe param" "temp"
        (109646 'move' tmp[109624](109584 call - 1))
        ParamForLoop[109648]
        { dim[109621] tmp[109622] tmp[109623] tmp[109624]
          if(109616 call _cond_test(109611 call !=(109591 call(381781 call . this[109489] c"blk") dim[109621])(109609 call *(109598 call(381787 call . this[109489] c"blk")(109595 call + dim[109621] 1))(109606 call .(109605 call domDims[109571](109602 call + dim[109621] 1)) c"size"))))
          {
            (109614 return 0)
          }
        }
        label _unused_continueLabel[109626]
        label _breakLabel[109625]
      }
    }
    if(109683 call _cond_test debugDefaultDistBulkTransfer[93400])
    {
      (109681 call chpl_debug_writeln "\tYES!")
    }
    (109689 return 1)
  }
  function _canDoSimpleTransfer[109697](arg A[109695]:_any[178](?), arg aView[109699]:_any[178](?), arg B[109701]:_any[178](?), arg bView[109703]:_any[178](?)) : _unknown[51] "private"
  {
    if(109762 call _cond_test(109729 call ||(109715 call !(109714 call(109706 call . A[109695] c"isDataContiguous")(109710 call . aView[109699] c"_value")))(109727 call !(109726 call(109718 call . B[109701] c"isDataContiguous")(109722 call . bView[109703] c"_value")))))
    {
      if(109753 call _cond_test debugDefaultDistBulkTransfer[93400])
      {
        (109751 call chpl_debug_writeln "isDataContiguous return False")
      }
      (109760 return 0)
    }
    (109768 return 1)
  }
  function _canDoComplexTransfer[109776](arg A[109774]:_any[178](?), arg aView[109778]:_any[178](?), arg B[109780]:_any[178](?), arg bView[109782]:_any[178](?)) : _unknown[51] "private"
  {
    (109785 return useBulkTransferStride[113733])
  }
  function DefaultRectangularArr[106846](?).doiCanBulkTransferRankChange[109793](arg _mt[109798]:_MT[238], arg this[109795]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?)) param : _unknown[51] "method" "method overrides"
  {
    (109801 return 1)
  }
  function DefaultRectangularArr[106846](?).doiBulkTransferToKnown[109811](arg _mt[109822]:_MT[238], arg this[109819]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg srcDom[109809]:_any[178](?), arg destClass[109814] :
  DefaultRectangularArr[379736](?), arg destDom[109817]:_any[178](?)) : _unknown[51] "method"
  {
    (109832 return(109831 call transferHelper destClass[109814] destDom[109817] this[109819] srcDom[109809]))
  }
  { scopeless type
    bool[10]
  }
  function DefaultRectangularArr[106846](?).doiBulkTransferFromKnown[109843](arg _mt[109854]:_MT[238], arg this[109851]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg destDom[109841]:_any[178](?), arg srcClass[109846] :
  DefaultRectangularArr[379736](?), arg srcDom[109849]:_any[178](?)) : _unknown[51] "method"
  {
    (109864 return(109863 call transferHelper this[109851] destDom[109841] srcClass[109846] srcDom[109849]))
  }
  { scopeless type
    bool[10]
  }
  function transferHelper[109874](arg A[109872]:_any[178](?), arg aView[109876]:_any[178](?), arg B[109878]:_any[178](?), arg bView[109880]:_any[178](?)) : _unknown[51] "private"
  {
    if(110007 call _cond_test(109918 call &&(109909 call &&(109891 call ==(109884 call . A[109872] c"rank")(109888 call . B[109878] c"rank"))(109907 call &&(109898 call ==(109894 call . aView[109876] c"stridable") 0)(109905 call ==(109901 call . bView[109880] c"stridable") 0)))(109917 call _canDoSimpleTransfer A[109872] aView[109876] B[109878] bView[109880])))
    {
      if(109942 call _cond_test debugDefaultDistBulkTransfer[93400])
      {
        (109940 call chpl_debug_writeln "Performing simple DefaultRectangular transfer")
      }
      (109954 call _simpleTransfer A[109872] aView[109876] B[109878] bView[109880])
    }
    {
      if(110003 call _cond_test(109962 call _canDoComplexTransfer A[109872] aView[109876] B[109878] bView[109880]))
      {
        if(109985 call _cond_test debugDefaultDistBulkTransfer[93400])
        {
          (109983 call chpl_debug_writeln "Performing complex DefaultRectangular transfer")
        }
        (109997 call complexTransfer A[109872] aView[109876] B[109878] bView[109880])
      }
      {
        (110000 return 0)
      }
    }
    (110014 return 1)
  }
  { scopeless type
    bool[10]
  }
  function _simpleTransfer[110023](arg A[110021]:_any[178](?), arg aView[110025]:_any[178](?), arg B[110027]:_any[178](?), arg bView[110029]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown rank[110035] "param"(110032 call . A[110021] c"rank")
    (110038 'end of statement')
    unknown idxType[110044] "type variable"(110041 call . A[110021] c"idxType")
    const Adims[110053] "const"(110052 call(110048 call . aView[110025] c"dims"))
    (110056 'end of statement')
    unknown Alo[110064](110062 call * rank[110035](110059 call . aView[110025] c"idxType"))
    (110067 'end of statement')
    {
      unknown i[110089] 0
      unknown tmp[110090] "maybe param" "temp"
      (110102 'move' tmp[110090](110100 call chpl_compute_low_param_loop_bound 0(110071 call - rank[110035] 1)))
      unknown tmp[110091] "maybe param" "temp"
      (110112 'move' tmp[110091](110110 call chpl_compute_high_param_loop_bound 0(110107 call - rank[110035] 1)))
      unknown tmp[110092] "maybe param" "temp"
      (110115 'move' tmp[110092] 1)
      ParamForLoop[110117]
      { i[110089] tmp[110090] tmp[110091] tmp[110092]
        (110086 call =(110078 call Alo[110064] i[110089])(110083 call .(110082 call Adims[110053] i[110089]) c"first"))
      }
      label _unused_continueLabel[110094]
      label _breakLabel[110093]
    }
    const Bdims[110132] "const"(110131 call(110127 call . bView[110029] c"dims"))
    (110135 'end of statement')
    unknown Blo[110143](110141 call * rank[110035](110138 call . B[110027] c"idxType"))
    (110146 'end of statement')
    {
      unknown i[110168] 0
      unknown tmp[110169] "maybe param" "temp"
      (110181 'move' tmp[110169](110179 call chpl_compute_low_param_loop_bound 0(110150 call - rank[110035] 1)))
      unknown tmp[110170] "maybe param" "temp"
      (110191 'move' tmp[110170](110189 call chpl_compute_high_param_loop_bound 0(110186 call - rank[110035] 1)))
      unknown tmp[110171] "maybe param" "temp"
      (110194 'move' tmp[110171] 1)
      ParamForLoop[110196]
      { i[110168] tmp[110169] tmp[110170] tmp[110171]
        (110165 call =(110157 call Blo[110143] i[110168])(110162 call .(110161 call Bdims[110132] i[110168]) c"first"))
      }
      label _unused_continueLabel[110173]
      label _breakLabel[110172]
    }
    const len[110215] "const"(110214 call(110209 call .(110206 call . aView[110025] c"size") c"safeCast") size_t[20657])
    (110218 'end of statement')
    if(110225 call _cond_test(110221 call == len[110215] 0))
    {
      (110223 return _void[55])
    }
    if(110346 call _cond_test debugBulkTransfer[113723])
    {
      function sizeof[110235](arg x[110233]:_any[178](?)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
      {
      }
      { scopeless type
        int(64)[13]
      }
      const elemSize[110249] "const"(110248 call sizeof(110244 call . B[110027] c"eltType"))
      (110252 'end of statement')
      (110344 call chpl_debug_writeln "In DefaultRectangular._simpleTransfer():" " Alo=" Alo[110064] ", Blo=" Blo[110143] ", len=" len[110215] ", elemSize=" elemSize[110249])
    }
    const Aidx[110357] "const"(110356 call(110351 call . A[110021] c"getDataIndex") Alo[110064])
    (110360 'end of statement')
    const Adata[110373] "const"(110372 call _ddata_shift(110363 call . A[110021] c"eltType")(110368 call . A[110021] c"theData") Aidx[110357])
    (110376 'end of statement')
    const Bidx[110384] "const"(110383 call(110378 call . B[110027] c"getDataIndex") Blo[110143])
    (110387 'end of statement')
    const Bdata[110400] "const"(110399 call _ddata_shift(110390 call . B[110027] c"eltType")(110395 call . B[110027] c"theData") Bidx[110384])
    (110403 'end of statement')
    (110411 call _simpleTransferHelper A[110021] B[110027] Adata[110373] Bdata[110400] len[110215])
  }
  function _simpleTransferHelper[110419](arg A[110417]:_any[178](?), arg B[110421]:_any[178](?), arg Adata[110423]:_any[178](?), arg Bdata[110425]:_any[178](?), arg len[110427]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110435 call _cond_test(110431 call == Adata[110423] Bdata[110425]))
    {
      (110433 return _void[55])
    }
    if(110673 call _cond_test(110450 call ==(110445 '_wide_get_node' Adata[110423])(110447 call .(358990 call here[90438]) c"id")))
    {
      if(110479 call _cond_test debugDefaultDistBulkTransfer[93400])
      {
        (110477 call chpl_debug_writeln "\tlocal get() from "(110476 '_wide_get_node' B[110421]))
      }
      (110501 'chpl_comm_array_get'(110490 call Adata[110423] 0)(110495 '_wide_get_node' Bdata[110425])(110499 call Bdata[110425] 0) len[110427])
    }
    {
      if(110668 call _cond_test(110512 call ==(110507 '_wide_get_node' Bdata[110425])(110509 call .(358992 call here[90438]) c"id")))
      {
        if(110541 call _cond_test debugDefaultDistBulkTransfer[93400])
        {
          (110539 call chpl_debug_writeln "\tlocal put() to "(110538 '_wide_get_node' A[110417]))
        }
        (110579 'chpl_comm_array_put'(110568 call Bdata[110425] 0)(110573 '_wide_get_node' Adata[110423])(110577 call Adata[110423] 0) len[110427])
      }
      {
        const tmp[110660] "const" "temp"
        (110662 'move' tmp[110660](110658 'deref'(110657 '_wide_get_locale'(110583 call chpl_localeID_to_locale(110582 '_wide_get_locale' Adata[110423])))))
        {
          {
            if(110633 call _cond_test debugDefaultDistBulkTransfer[93400])
            {
              (110631 call chpl_debug_writeln "\tremote get() on "(110606 call .(358994 call here[90438]) c"id") " from "(110630 '_wide_get_node' B[110421]))
            }
            (110655 'chpl_comm_array_get'(110644 call Adata[110423] 0)(110649 '_wide_get_node' Bdata[110425])(110653 call Bdata[110425] 0) len[110427])
          }
          (110665 'on block' 0 tmp[110660])
        }
      }
    }
  }
  function complexTransfer[110684](arg A[110682]:_any[178](?), arg aView[110686]:_any[178](?), arg B[110688]:_any[178](?), arg bView[110690]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110792 call _cond_test(110720 call &&(110704 call !=(110699 '_wide_get_node'(110693 call . A[110682] c"data"))(110701 call .(358997 call here[90438]) c"id"))(110718 call !=(110713 '_wide_get_node'(110707 call . B[110688] c"data"))(110715 call .(359000 call here[90438]) c"id"))))
    {
      if(110755 call _cond_test debugDefaultDistBulkTransfer[93400])
      {
        (110752 call chpl_debug_writeln "BulkTransferStride: Both arrays on different locale, moving to locale of destination: LOCALE"(110751 '_wide_get_node'(110745 call . A[110682] c"data")))
      }
      const tmp[110775] "const" "temp"
      (110777 'move' tmp[110775](110773 'deref'(110772 '_wide_get_locale'(110761 call . A[110682] c"data"))))
      {
        (110770 call complexTransferCore A[110682] aView[110686] B[110688] bView[110690])
        (110780 'on block' 0 tmp[110775])
      }
    }
    {
      (110789 call complexTransferCore A[110682] aView[110686] B[110688] bView[110690])
    }
  }
  function complexTransferCore[110803](arg LHS[110801]:_any[178](?), arg LViewDom[110805]:_any[178](?), arg RHS[110807]:_any[178](?), arg RViewDom[110809]:_any[178](?)) : _unknown[51] "private"
  {
    unknown minRank[110822] "param"(110821 call min(110813 call . LHS[110801] c"rank")(110818 call . RHS[110807] c"rank"))
    (110825 'end of statement')
    unknown idxType[110831] "type variable"(110828 call . LHS[110801] c"idxType")
    unknown intIdxType[110838] "type variable"(110835 call . LHS[110801] c"intIdxType")
    if(110923 call _cond_test debugDefaultDistBulkTransfer[93400])
    {
      (110880 call writeln "Transferring views :" LViewDom[110805] " <-- " RViewDom[110809])
      (110921 call writeln "Original domains   :"(110910 call(110906 call .(110903 call . LHS[110801] c"dom") c"dsiDims")) " <-- "(110920 call(110916 call .(110913 call . RHS[110807] c"dom") c"dsiDims")))
    }
    const LeftDims[110933] "const"(110932 call(110928 call . LViewDom[110805] c"dims"))
    (110936 'end of statement')
    const RightDims[110943] "const"(110942 call(110938 call . RViewDom[110809] c"dims"))
    (110946 'end of statement')
    const tmp[110959] "const" "temp"(110958 call bulkCommComputeActiveDims LeftDims[110933] RightDims[110943])
    (110969 call _check_tuple_var_decl tmp[110959] 3)
    const LeftActives[110947] "const"(110960 call tmp[110959] 0)
    const RightActives[110949] "const"(110963 call tmp[110959] 1)
    const inferredRank[110951] "const"(110966 call tmp[110959] 2)
    (110974 'end of statement')
    unknown DimSizes[110992](110990 call chpl__buildArrayRuntimeType(110988 call chpl__ensureDomainExpr(110977 call chpl_build_bounded_range 1 inferredRank[110951]))(110987 'typeof'(110984 call .(110983 call LeftDims[110933] 0) c"size")))
    (110995 'end of statement')
    {
      unknown _indexOfInterest[111027] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111028] "expr temp" "temp"
      (111037 'move' _iterator[111028](111035 call _getIterator(111042 call chpl_direct_range_iter 1 inferredRank[110951] 1)))
      Defer
      {
        {
          (111058 call _freeIterator _iterator[111028])
        }
      }
      { scopeless type
        (111047 'move' _indexOfInterest[111027](111044 call iteratorIndex _iterator[111028]))
      }
      ForLoop[111029]
      {
        unknown i[111051] "index var" "insert auto destroy"
        (111053 'move' i[111051] _indexOfInterest[111027])
        {
          const dimIdx[111008] "const"(111007 call LeftActives[110947](111004 call - i[111051] 1))
          (111011 'end of statement')
          (111024 call =(111016 call DimSizes[110992] i[111051])(111021 call .(111020 call LeftDims[110933] dimIdx[111008]) c"size"))
        }
        label _continueLabel[111032]
        _indexOfInterest[111027]
        _iterator[111028]
      }
      label _breakLabel[111033]
    }
    if(111089 call _cond_test debugDefaultDistBulkTransfer[93400])
    {
      (111086 call writeln "inferredRank = " inferredRank[110951])
    }
    (111116 call assert(111096 call <= inferredRank[110951] minRank[110822]) "complex DR transfer: computed rank greater than minimum rank!")
    unknown LBlk[111118](111123 call * minRank[110822] intIdxType[110838])
    unknown RBlk[111125](111129 'typeof' LBlk[111118])
    (111130 'end of statement')
    {
      {
        unknown _indexOfInterest[111252] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111253] "expr temp" "temp"
        (111262 'move' _iterator[111253](111260 call _getIterator(111273 call chpl_direct_range_iter 1 inferredRank[110951](111269 call - 1))))
        Defer
        {
          {
            (111289 call _freeIterator _iterator[111253])
          }
        }
        { scopeless type
          (111278 'move' _indexOfInterest[111252](111275 call iteratorIndex _iterator[111253]))
        }
        ForLoop[111254]
        {
          unknown idx[111282] "index var" "insert auto destroy"
          (111284 'move' idx[111282] _indexOfInterest[111252])
          {
            const li[111148] "const"(111147 call LeftActives[110947](111144 call - idx[111282] 1))
            (111151 'end of statement')
            (111194 call =(111159 call LBlk[111118](111156 call - idx[111282] 1))(111192 call *(111166 call(111161 call . LHS[110801] c"blk") li[111148])(111190 call _cast intIdxType[110838](111187 call /(111171 call .(111170 call LeftDims[110933] li[111148]) c"stride")(111184 call .(111183 call(111178 call .(111175 call . LHS[110801] c"dom") c"dsiDim") li[111148]) c"stride")))))
            const ri[111204] "const"(111203 call RightActives[110949](111200 call - idx[111282] 1))
            (111207 'end of statement')
            (111249 call =(111214 call RBlk[111125](111211 call - idx[111282] 1))(111247 call *(111221 call(111216 call . RHS[110807] c"blk") ri[111204])(111245 call _cast intIdxType[110838](111242 call /(111226 call .(111225 call RightDims[110943] ri[111204]) c"stride")(111239 call .(111238 call(111233 call .(111230 call . RHS[110807] c"dom") c"dsiDim") ri[111204]) c"stride")))))
          }
          label _continueLabel[111257]
          _indexOfInterest[111252]
          _iterator[111253]
        }
        label _breakLabel[111258]
      }
    }
    if(111343 call _cond_test debugDefaultDistBulkTransfer[93400])
    {
      (111318 call writeln "LBlk = " LBlk[111118])
      (111341 call writeln "RBlk = " RBlk[111125])
    }
    unknown stridelevels[111348] 0
    (111351 'end of statement')
    unknown countDom[111362](111360 call chpl__buildDomainExpr(111357 call chpl_build_bounded_range 1(111355 call + inferredRank[110951] 1)))
    (111365 'end of statement')
    unknown count[111373](111371 call chpl__buildArrayRuntimeType(111369 call chpl__ensureDomainExpr countDom[111362]) size_t[20657])
    (111376 'end of statement')
    {
      unknown _indexOfInterest[111384] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111385] "expr temp" "temp"
      (111394 'move' _iterator[111385](111392 call _getIterator count[111373]))
      Defer
      {
        {
          (111410 call _freeIterator _iterator[111385])
        }
      }
      { scopeless type
        (111399 'move' _indexOfInterest[111384](111396 call iteratorIndex _iterator[111385]))
      }
      ForLoop[111386]
      {
        unknown c[111403] "index var" "insert auto destroy"
        (111405 'move' c[111403] _indexOfInterest[111384])
        (111381 call = c[111403] 1)
        label _continueLabel[111389]
        _indexOfInterest[111384]
        _iterator[111385]
      }
      label _breakLabel[111390]
    }
    unknown strideDom[111424](111422 call chpl__buildDomainExpr(111419 call chpl_build_bounded_range 1 inferredRank[110951]))
    (111427 'end of statement')
    unknown dstStride[111428](111436 call chpl__buildArrayRuntimeType(111434 call chpl__ensureDomainExpr strideDom[111424]) size_t[20657])
    unknown srcStride[111438](111442 'typeof' dstStride[111428])
    (111443 'end of statement')
    if(111520 call _cond_test(111464 call ||(111452 call >(111450 call LBlk[111118](111447 call - inferredRank[110951] 1)) 1)(111462 call >(111460 call RBlk[111125](111457 call - inferredRank[110951] 1)) 1)))
    {
      (111468 call += stridelevels[111348] 1)
      (111477 call =(111475 call count[111373] stridelevels[111348]) 1)
      (111497 call =(111483 call dstStride[111428] stridelevels[111348])(111496 call(111491 call .(111490 call LBlk[111118](111487 call - inferredRank[110951] 1)) c"safeCast") size_t[20657]))
      (111517 call =(111503 call srcStride[111438] stridelevels[111348])(111516 call(111511 call .(111510 call RBlk[111125](111507 call - inferredRank[110951] 1)) c"safeCast") size_t[20657]))
    }
    {
      unknown _indexOfInterest[111630] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111631] "expr temp" "temp"
      (111640 'move' _iterator[111631](111638 call _getIterator(111651 call chpl_direct_range_iter 2 inferredRank[110951](111647 call - 1))))
      Defer
      {
        {
          (111667 call _freeIterator _iterator[111631])
        }
      }
      { scopeless type
        (111656 'move' _indexOfInterest[111630](111653 call iteratorIndex _iterator[111631]))
      }
      ForLoop[111632]
      {
        unknown i[111660] "index var" "insert auto destroy"
        (111662 'move' i[111660] _indexOfInterest[111630])
        {
          (111551 call *=(111540 call count[111373](111537 call + stridelevels[111348] 1))(111550 call(111545 call .(111544 call DimSizes[110992] i[111660]) c"safeCast") size_t[20657]))
          const bothReuse[111573] "const"(111571 call &&(111562 call canReuseStride LBlk[111118] i[111660] stridelevels[111348] count[111373] dstStride[111428])(111570 call canReuseStride RBlk[111125] i[111660] stridelevels[111348] count[111373] srcStride[111438]))
          (111576 'end of statement')
          if(111626 call _cond_test(111578 call ! bothReuse[111573]))
          {
            (111582 call += stridelevels[111348] 1)
            (111603 call =(111589 call dstStride[111428] stridelevels[111348])(111602 call(111597 call .(111596 call LBlk[111118](111593 call - i[111660] 2)) c"safeCast") size_t[20657]))
            (111623 call =(111609 call srcStride[111438] stridelevels[111348])(111622 call(111617 call .(111616 call RBlk[111125](111613 call - i[111660] 2)) c"safeCast") size_t[20657]))
          }
        }
        label _continueLabel[111635]
        _indexOfInterest[111630]
        _iterator[111631]
      }
      label _breakLabel[111636]
    }
    (111691 call *=(111680 call count[111373](111677 call + stridelevels[111348] 1))(111690 call(111685 call .(111684 call DimSizes[110992] 1) c"safeCast") size_t[20657]))
    (111717 call assert(111697 call <= stridelevels[111348] inferredRank[110951]) "BulkTransferStride: stride levels greater than rank.")
    if(111779 call _cond_test(111721 call == stridelevels[111348] 0))
    {
      (111777 call assert(111732 call ==(111727 call count[111373] 1)(111729 call . LViewDom[110805] c"size")) "BulkTransferStride: bulk-count incorrect for stride level of 0: "(111755 call count[111373] 1) " != "(111774 call . LViewDom[110805] c"size"))
    }
    (111795 call = countDom[111362](111793 call chpl__buildDomainExpr(111790 call chpl_build_bounded_range 1(111788 call + stridelevels[111348] 1))))
    (111806 call = strideDom[111424](111804 call chpl__buildDomainExpr(111801 call chpl_build_bounded_range 1 stridelevels[111348])))
    function getFirstIdx[111813](arg dims[111811]:_any[178](?)) : _unknown[51]
    {
      unknown ret[111828](111826 call *(111816 call . dims[111811] c"size")(111823 call .(111822 call dims[111811] 0) c"idxType"))
      (111831 'end of statement')
      {
        unknown i[111877] 0
        unknown tmp[111878] "maybe param" "temp"
        (111890 'move' tmp[111878](111888 call chpl_compute_low_param_loop_bound 0(111839 call -(111835 call . dims[111811] c"size") 1)))
        unknown tmp[111879] "maybe param" "temp"
        (111903 'move' tmp[111879](111901 call chpl_compute_high_param_loop_bound 0(111895 call -(111897 call . dims[111811] c"size") 1)))
        unknown tmp[111880] "maybe param" "temp"
        (111906 'move' tmp[111880] 1)
        ParamForLoop[111908]
        { i[111877] tmp[111878] tmp[111879] tmp[111880]
          (111874 call =(111846 call ret[111828] i[111877])(111871 IfExpr (111855 call <(111851 call .(111850 call dims[111811] i[111877]) c"stride") 0) then
          { scopeless
            (111861 call .(111860 call dims[111811] i[111877]) c"last")
          } else
          { scopeless
            (111868 call .(111867 call dims[111811] i[111877]) c"first")
          } ))
        }
        label _unused_continueLabel[111882]
        label _breakLabel[111881]
      }
      (111918 return ret[111828])
    }
    const LFirst[111926] "const"(111925 call getFirstIdx LeftDims[110933])
    (111929 'end of statement')
    const RFirst[111934] "const"(111933 call getFirstIdx RightDims[110943])
    (111937 'end of statement')
    (111954 call complexTransferComm LHS[110801] RHS[110807](111947 call _cast(111946 call int(64)[13] 32) stridelevels[111348]) dstStride[111428] srcStride[111438] count[111373] LFirst[111926] RFirst[111934])
  }
  function complexTransferComm[111962](arg A[111960]:_any[178](?), arg B[111964]:_any[178](?), arg stridelevels[111970] :
  (111969 call int(64)[13] 32), arg dstStride[111973]:_any[178](?), arg srcStride[111975]:_any[178](?), arg count[111977]:_any[178](?), arg AFirst[111979]:_any[178](?), arg BFirst[111981]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(112118 call _cond_test debugDefaultDistBulkTransfer[93400])
    {
      (112115 call chpl_debug_writeln "BulkTransferStride with values:\n" "\tLocale        = "(112026 call stringify(112022 call .(359021 call here[90438]) c"id")) "\n" "\tStride levels = "(112048 call stringify stridelevels[111970]) "\n" "\tdstStride     = "(112070 call stringify dstStride[111973]) "\n" "\tsrcStride     = "(112092 call stringify srcStride[111975]) "\n" "\tcount         = "(112114 call stringify count[111977]))
    }
    const AO[112132] "const"(112131 call(112124 call . A[111960] c"getDataIndex") AFirst[111979](getShifted = 0))
    (112135 'end of statement')
    const BO[112145] "const"(112144 call(112137 call . B[111964] c"getDataIndex") BFirst[111981](getShifted = 0))
    (112148 'end of statement')
    const dest[112153] "const"(112150 call . A[111960] c"data")
    (112156 'end of statement')
    const src[112161] "const"(112158 call . B[111964] c"data")
    (112164 'end of statement')
    const dststr[112172] "const"(112169 call .(112166 call . dstStride[111973] c"_value") c"data")
    (112175 'end of statement')
    const srcstr[112183] "const"(112180 call .(112177 call . srcStride[111975] c"_value") c"data")
    (112186 'end of statement')
    const cnt[112194] "const"(112191 call .(112188 call . count[111977] c"_value") c"data")
    (112197 'end of statement')
    if(112445 call _cond_test(112207 call ==(112202 '_wide_get_node' dest[112153])(112204 call .(359030 call here[90438]) c"id")))
    {
      const srclocale[112220] "const"(112218 call _cast(112217 call int(64)[13] 32)(112213 '_wide_get_node' src[112161]))
      (112223 'end of statement')
      if(112249 call _cond_test debugBulkTransfer[113723])
      {
        (112246 call chpl_debug_writeln "BulkTransferStride: On LHS - GET from " srclocale[112220])
      }
      (112293 'chpl_comm_get_strd'(112274 call dest[112153] AO[112132])(112278 call dststr[112172] 0) srclocale[112220](112283 call src[112161] BO[112145])(112287 call srcstr[112183] 0)(112291 call cnt[112194] 0) stridelevels[111970])
    }
    {
      const destlocale[112306] "const"(112304 call _cast(112303 call int(64)[13] 32)(112299 '_wide_get_node' dest[112153]))
      (112309 'end of statement')
      if(112371 call _cond_test debugDefaultDistBulkTransfer[93400])
      {
        (112368 call assert(112322 call ==(112317 '_wide_get_node' src[112161])(112319 call .(359032 call here[90438]) c"id")) "BulkTransferStride: Expected to be on "(112346 '_wide_get_node' src[112161]) ", actually on "(112365 call .(359034 call here[90438]) c"id"))
      }
      if(112399 call _cond_test debugBulkTransfer[113723])
      {
        (112396 call chpl_debug_writeln "BulkTransferStride: On RHS - PUT to " destlocale[112306])
      }
      (112443 'chpl_comm_put_strd'(112424 call dest[112153] AO[112132])(112428 call dststr[112172] 0) destlocale[112306](112433 call src[112161] BO[112145])(112437 call srcstr[112183] 0)(112441 call cnt[112194] 0) stridelevels[111970])
    }
  }
  function DefaultRectangularArr[106846](?).isDefaultRectangular[112454](arg _mt[112459]:_MT[238], arg this[112456]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?)) param : _unknown[51] "method" "method overrides"
  {
    (112462 return 1)
  }
  function DefaultRectangularArr[415340](?).isDefaultRectangular[112470](arg _mt[112475]:_MT[238], arg this[112472]:DefaultRectangularArr[415340](?)) param : _unknown[51] "method"
  {
    (112478 return 1)
  }
  unknown debugDRScan[112484] "config" "param" 0
  (112487 'end of statement')
  function DefaultRectangularArr[106846](?).doiScan[112493](arg _mt[112500]:_MT[238], arg this[112497]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg op[112491]:_any[178](?), arg dom[112495]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[112523] "type variable"(112522 'typeof'(112521 call(112517 call . op[112491] c"generate")))
    unknown res[112533](112531 call chpl__buildArrayRuntimeType(112529 call chpl__ensureDomainExpr dom[112495]) resType[112523])
    (112536 'end of statement')
    unknown tmp[112557] "temp"(112556 call(112549 call . this[112497] c"chpl__preScan") op[112491] res[112533] dom[112495])
    (112567 call _check_tuple_var_decl tmp[112557] 4)
    unknown numTasks[112537](112558 call tmp[112557] 0)
    unknown rngs[112539](112561 call tmp[112557] 1)
    unknown state[112541](112564 call tmp[112557] 2)
    (112572 'end of statement')
    (112585 call(112576 call . this[112497] c"chpl__postScan") op[112491] res[112533] numTasks[112537] rngs[112539] state[112541])
    (112589 call chpl__delete op[112491])
    (112593 return res[112533])
    (355139 'used modules list'(112513 'use' RangeChunk[266479]))
  }
  where {
    (112510 call &&(112504 call ==(382058 call . this[112497] c"rank") 1)(112509 call chpl__scanStateResTypesMatch op[112491]))
  }
  function DefaultRectangularArr[106846](?).doiSwap[112603](arg _mt[112608]:_MT[238], arg this[112605]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg arr[112601]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (112618 call <=>(112611 call . this[112605] c"data")(112615 call . arr[112601] c"data"))
    (112627 call(112623 call . this[112605] c"initShiftedData"))
    (112634 call(112630 call . arr[112601] c"initShiftedData"))
  }
  function DefaultRectangularArr[106846](?).chpl__preScan[112643](arg _mt[112658]:_MT[238], arg this[112655]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg op[112641]:_any[178](?), arg res[112650] :
  (112647 call chpl__buildArrayRuntimeType nil[44] unknown resType[112645]), arg dom[112653]:_any[178](?)) : _unknown[51] "method"
  {
    const rng[112673] "const"(112672 call(112667 call . dom[112653] c"dim") 0)
    (112676 'end of statement')
    const numTasks[112691] "const"(112688 IfExpr (112679 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (112687 call _computeNumChunks(112683 call . rng[112673] c"size"))
    } )
    (112694 'end of statement')
    const rngs[112705] "const"(112704 call chunks module=[255] RangeChunk[266479] rng[112673] numTasks[112691])
    (112708 'end of statement')
    if(112772 call _cond_test debugDRScan[112484])
    {
      (112747 call writeln "Using " numTasks[112691] " tasks")
      (112770 call writeln "Whose chunks are: " rngs[112705])
    }
    unknown state[112786](112784 call chpl__buildArrayRuntimeType(112782 call chpl__ensureDomainExpr(112777 call . rngs[112705] c"indices")) resType[112645])
    (112789 'end of statement')
    if(112980 call _cond_test(112792 call == numTasks[112691] 1))
    {
      (112803 call preScanChunk(112799 call .(112796 call . rngs[112705] c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[112817] "expr temp" "maybe ref" "no copy" "temp"
        (112820 'move' tmpIter[112817](112808 call . rngs[112705] c"indices"))
        unknown isRngDomArr[112960] "maybe param" "temp"
        (112975 'move' isRngDomArr[112960](112973 call ||(112962 call isBoundedRange tmpIter[112817])(112971 call ||(112965 call isDomain tmpIter[112817])(112968 call isArray tmpIter[112817]))))
        if isRngDomArr[112960]
        {
          const _coforallCount[112827] "const" "end count" "temp"
          (112896 'move' _coforallCount[112827](112893 call _endCountAlloc 1))
          unknown numTasks[112828] "temp"
          (112880 'move' numTasks[112828](112876 call . tmpIter[112817] c"size"))
          (112871 call _upEndCount _coforallCount[112827] 1 numTasks[112828])
          (112868 call chpl_resetTaskSpawn numTasks[112828])
          unknown _indexOfInterest[112835] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112836] "expr temp" "temp"
          (112845 'move' _iterator[112836](112843 call _getIterator tmpIter[112817]))
          Defer
          {
            {
              (112861 call _freeIterator _iterator[112836])
            }
          }
          { scopeless type
            (112850 'move' _indexOfInterest[112835](112847 call iteratorIndex _iterator[112836]))
          }
          ForLoop[112837]
          {
            unknown tid[112854] "coforall index var" "index var" "insert auto destroy"
            (112856 'move' tid[112854] _indexOfInterest[112835])
            {
              {
                (112824 call preScanChunk tid[112854])
              }
              (112830 call _downEndCount _coforallCount[112827] nil[44])
              (112829 'coforall loop')
            }
            label _continueLabel[112840]
            _indexOfInterest[112835]
            _iterator[112836]
          }
          label _breakLabel[112841]
          Defer
          {
            {
              (112883 call _endCountFree _coforallCount[112827])
            }
          }
          (112888 call _waitEndCount _coforallCount[112827] 1 numTasks[112828])
        }
        {
          const _coforallCount[112900] "const" "end count" "temp"
          (112957 'move' _coforallCount[112900](112954 call _endCountAlloc 1))
          unknown _indexOfInterest[112908] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112909] "expr temp" "temp"
          (112918 'move' _iterator[112909](112916 call _getIterator tmpIter[112817]))
          Defer
          {
            {
              (112934 call _freeIterator _iterator[112909])
            }
          }
          { scopeless type
            (112923 'move' _indexOfInterest[112908](112920 call iteratorIndex _iterator[112909]))
          }
          ForLoop[112910]
          {
            unknown tid[112927] "coforall index var" "index var" "insert auto destroy"
            (112929 'move' tid[112927] _indexOfInterest[112908])
            (112941 call _upEndCount _coforallCount[112900] 1)
            {
              {
                (112814 call preScanChunk tid[112927])
              }
              (112903 call _downEndCount _coforallCount[112900] nil[44])
              (112902 'coforall loop')
            }
            label _continueLabel[112913]
            _indexOfInterest[112908]
            _iterator[112909]
          }
          label _breakLabel[112914]
          Defer
          {
            {
              (112945 call _endCountFree _coforallCount[112900])
            }
          }
          (112950 call _waitEndCount _coforallCount[112900] 1)
        }
      }
    }
    function preScanChunk[112988](arg tid[112986]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const current[112991] "const" resType[112645]
      (112994 'end of statement')
      const myop[113002] "const"(113001 call(112997 call . op[112641] c"clone"))
      (113005 'end of statement')
      {
        unknown _indexOfInterest[113041] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113042] "expr temp" "temp"
        (113051 'move' _iterator[113042](113049 call _getIterator(113010 call rngs[112705] tid[112986])))
        Defer
        {
          {
            (113068 call _freeIterator _iterator[113042])
          }
        }
        { scopeless type
          (113057 'move' _indexOfInterest[113041](113054 call iteratorIndex _iterator[113042]))
        }
        ForLoop[113043]
        {
          unknown i[113061] "index var" "insert auto destroy"
          (113063 'move' i[113061] _indexOfInterest[113041])
          {
            unknown elem[113015] "ref var"(113014 call(382087 call . this[112655] c"dsiAccess") i[113061])
            (113018 'end of statement')
            (113026 call(113021 call . myop[113002] c"accumulate") elem[113015])
            (113038 call =(113031 call res[112650] i[113061])(113037 call(113033 call . myop[113002] c"generate")))
          }
          label _continueLabel[113046]
          _indexOfInterest[113041]
          _iterator[113042]
        }
        label _breakLabel[113047]
      }
      (113089 call =(113078 call state[112786] tid[112986])(113088 call res[112650](113084 call .(113083 call rngs[112705] tid[112986]) c"high")))
      (113094 call chpl__delete myop[113002])
    }
    if(113145 call _cond_test debugDRScan[112484])
    {
      (113120 call writeln "res = " res[112650])
      (113143 call writeln "state = " state[112786])
    }
    const metaop[113155] "const"(113154 call(113150 call . op[112641] c"clone"))
    (113158 'end of statement')
    unknown next[113164](113161 call . metaop[113155] c"identity") resType[112645]
    (113167 'end of statement')
    {
      unknown _indexOfInterest[113196] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[113197] "expr temp" "temp"
      (113206 'move' _iterator[113197](113204 call _getIterator(113170 call . rngs[112705] c"indices")))
      Defer
      {
        {
          (113223 call _freeIterator _iterator[113197])
        }
      }
      { scopeless type
        (113212 'move' _indexOfInterest[113196](113209 call iteratorIndex _iterator[113197]))
      }
      ForLoop[113198]
      {
        unknown i[113216] "index var" "insert auto destroy"
        (113218 'move' i[113216] _indexOfInterest[113196])
        {
          (113178 call <=>(113176 call state[112786] i[113216]) next[113164])
          (113194 call(113185 call . metaop[113155] c"accumulateOntoState") next[113164](113193 call state[112786] i[113216]))
        }
        label _continueLabel[113201]
        _indexOfInterest[113196]
        _iterator[113197]
      }
      label _breakLabel[113202]
    }
    (113232 call chpl__delete metaop[113155])
    if(113242 call _cond_test debugDRScan[112484])
    {
      (113240 call writeln "state = " state[112786])
    }
    (113254 return(113252 call _build_tuple numTasks[112691] rngs[112705] state[112786] next[113164]))
    (355141 'used modules list'(112661 'import' RangeChunk[266479]))
    (359046 'referenced modules list' RangeChunk[266479])
  }
  function DefaultRectangularArr[106846](?).chpl__postScan[113263](arg _mt[113276]:_MT[238], arg this[113273]:DefaultRectangularArr[106846](?) :
  DefaultRectangularArr[106846](?), arg op[113261]:_any[178](?), arg res[113265]:_any[178](?), arg numTasks[113267]:_any[178](?), arg rngs[113269]:_any[178](?), arg state[113271]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(113468 call _cond_test(113280 call == numTasks[113267] 1))
    {
      (113291 call postScanChunk(113287 call .(113284 call . rngs[113269] c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[113305] "expr temp" "maybe ref" "no copy" "temp"
        (113308 'move' tmpIter[113305](113296 call . rngs[113269] c"indices"))
        unknown isRngDomArr[113448] "maybe param" "temp"
        (113463 'move' isRngDomArr[113448](113461 call ||(113450 call isBoundedRange tmpIter[113305])(113459 call ||(113453 call isDomain tmpIter[113305])(113456 call isArray tmpIter[113305]))))
        if isRngDomArr[113448]
        {
          const _coforallCount[113315] "const" "end count" "temp"
          (113384 'move' _coforallCount[113315](113381 call _endCountAlloc 1))
          unknown numTasks[113316] "temp"
          (113368 'move' numTasks[113316](113364 call . tmpIter[113305] c"size"))
          (113359 call _upEndCount _coforallCount[113315] 1 numTasks[113316])
          (113356 call chpl_resetTaskSpawn numTasks[113316])
          unknown _indexOfInterest[113323] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113324] "expr temp" "temp"
          (113333 'move' _iterator[113324](113331 call _getIterator tmpIter[113305]))
          Defer
          {
            {
              (113349 call _freeIterator _iterator[113324])
            }
          }
          { scopeless type
            (113338 'move' _indexOfInterest[113323](113335 call iteratorIndex _iterator[113324]))
          }
          ForLoop[113325]
          {
            unknown tid[113342] "coforall index var" "index var" "insert auto destroy"
            (113344 'move' tid[113342] _indexOfInterest[113323])
            {
              {
                (113312 call postScanChunk tid[113342])
              }
              (113318 call _downEndCount _coforallCount[113315] nil[44])
              (113317 'coforall loop')
            }
            label _continueLabel[113328]
            _indexOfInterest[113323]
            _iterator[113324]
          }
          label _breakLabel[113329]
          Defer
          {
            {
              (113371 call _endCountFree _coforallCount[113315])
            }
          }
          (113376 call _waitEndCount _coforallCount[113315] 1 numTasks[113316])
        }
        {
          const _coforallCount[113388] "const" "end count" "temp"
          (113445 'move' _coforallCount[113388](113442 call _endCountAlloc 1))
          unknown _indexOfInterest[113396] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113397] "expr temp" "temp"
          (113406 'move' _iterator[113397](113404 call _getIterator tmpIter[113305]))
          Defer
          {
            {
              (113422 call _freeIterator _iterator[113397])
            }
          }
          { scopeless type
            (113411 'move' _indexOfInterest[113396](113408 call iteratorIndex _iterator[113397]))
          }
          ForLoop[113398]
          {
            unknown tid[113415] "coforall index var" "index var" "insert auto destroy"
            (113417 'move' tid[113415] _indexOfInterest[113396])
            (113429 call _upEndCount _coforallCount[113388] 1)
            {
              {
                (113302 call postScanChunk tid[113415])
              }
              (113391 call _downEndCount _coforallCount[113388] nil[44])
              (113390 'coforall loop')
            }
            label _continueLabel[113401]
            _indexOfInterest[113396]
            _iterator[113397]
          }
          label _breakLabel[113402]
          Defer
          {
            {
              (113433 call _endCountFree _coforallCount[113388])
            }
          }
          (113438 call _waitEndCount _coforallCount[113388] 1)
        }
      }
    }
    function postScanChunk[113477](arg tid[113475]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const myadjust[113483] "const"(113482 call state[113271] tid[113475])
      (113486 'end of statement')
      {
        unknown _indexOfInterest[113506] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113507] "expr temp" "temp"
        (113516 'move' _iterator[113507](113514 call _getIterator(113492 call rngs[113269] tid[113475])))
        Defer
        {
          {
            (113533 call _freeIterator _iterator[113507])
          }
        }
        { scopeless type
          (113522 'move' _indexOfInterest[113506](113519 call iteratorIndex _iterator[113507]))
        }
        ForLoop[113508]
        {
          unknown i[113526] "index var" "insert auto destroy"
          (113528 'move' i[113526] _indexOfInterest[113506])
          {
            (113503 call(113494 call . op[113261] c"accumulateOntoState")(113500 call res[113265] i[113526]) myadjust[113483])
          }
          label _continueLabel[113511]
          _indexOfInterest[113506]
          _iterator[113507]
        }
        label _breakLabel[113512]
      }
    }
    if(113549 call _cond_test debugDRScan[112484])
    {
      (113547 call writeln "res = " res[113265])
    }
  }
  function canReuseStride[113560](arg blk[113558]:_any[178](?), arg curDim[113563] :
  int(64)[13], arg levels[113566]:_any[178](?), arg count[113568]:_any[178](?), arg stride[113570]:_any[178](?)) : _unknown[51] "private"
  {
    const lastCount[113579] "const"(113578 call count[113568](113575 call + levels[113566] 1))
    (113582 'end of statement')
    const curStride[113596] "const"(113593 IfExpr (113586 call < levels[113566] 1) then
    { scopeless
      1
    } else
    { scopeless
      (113592 call stride[113570] levels[113566])
    } )
    (113599 'end of statement')
    const lastIndex[113607] "const"(113605 call *(113602 call - lastCount[113579] 1) curStride[113596])
    (113610 'end of statement')
    const nextIndex[113615] "const"(113613 call + lastIndex[113607] curStride[113596])
    (113618 'end of statement')
    (113629 return(113627 call ==(113625 call blk[113558](113622 call - curDim[113563] 2)) nextIndex[113615]))
  }
  (355124 'used modules list'(93361 'use' DSIUtil[230909])(93364 'use' ChapelArray[113678])(93371 'use' ChapelDistribution[145457])(93373 'use' ChapelRange[64183])(93374 'use' SysBasic[223537])(93375 'use' SysError[264252])(93376 'use' SysCTypes[20943])(93381 'use' ChapelDebugPrint[188155])(93383 'use' ChapelLocks[187302])(93384 'use' OwnedObject[39586])(93385 'use' IO[230912])(93388 'use' DefaultSparse[161599])(93390 'use' DefaultAssociative[156279])(93392 'use' ExternalArray[188599]))
}