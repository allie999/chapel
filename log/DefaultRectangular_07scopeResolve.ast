AST dump for DefaultRectangular after pass scopeResolve.
Module use list: DSIUtil ChapelArray ChapelDistribution ChapelRange SysBasic SysError SysCTypes ChapelDebugPrint ChapelLocks OwnedObject IO DefaultSparse DefaultAssociative ExternalArray RangeChunk 

{
  const dataParTasksPerLocale[93289] "config" "const" 0
  (93292 'end of statement')
  const dataParIgnoreRunningTasks[93295] "config" "const" 0
  (93298 'end of statement')
  const dataParMinGranularity[93301] "config" "const" 1 int(64)[13]
  (93304 'end of statement')
  if(93330 call _cond_test(93307 call < dataParTasksPerLocale[93289] 0))
  {
    (93328 call halt "dataParTasksPerLocale must be >= 0")
  }
  if(93360 call _cond_test(93337 call <= dataParMinGranularity[93301] 0))
  {
    (93358 call halt "dataParMinGranularity must be > 0")
  }
  unknown debugDefaultDist[93400] "config" "param" 0
  (93403 'end of statement')
  unknown debugDefaultDistBulkTransfer[93405] "config" "param" 0
  (93408 'end of statement')
  unknown debugDataPar[93410] "config" "param" 0
  (93413 'end of statement')
  unknown debugDataParNuma[93415] "config" "param" 0
  (93418 'end of statement')
  unknown disableArrRealloc[93420] "config" "param" 0
  (93423 'end of statement')
  unknown reportInPlaceRealloc[93425] "config" "param" 0
  (93428 'end of statement')
  unknown defaultDoRADOpt[93430] "config" "param" 1
  (93433 'end of statement')
  unknown defaultDisableLazyRADOpt[93435] "config" "param" 0
  (93438 'end of statement')
  unknown earlyShiftData[93440] "config" "param" 1
  (93443 'end of statement')
  unknown usePollyArrayIndex[93445] "config" "param" 0
  (93448 'end of statement')
  unknown defaultRectangularSupportsAutoLocalAccess[93450] "config" "param" 0
  (93453 'end of statement')
  type ArrayStorageOrder[93459] def RMO[93455]:ArrayStorageOrder[93459] def CMO[93457]:ArrayStorageOrder[93459]
  unknown defaultStorageOrder[93468] "config" "param" RMO[93455]
  (93471 'end of statement')
  unknown storageOrder[93473] "param" defaultStorageOrder[93468]
  (93476 'end of statement')
  function polly_array_index[93485](arg arguments[93481] ... :
  int(64)[13]) : _unknown[51] "lineno ok" "llvm readnone"
  {
    unknown rank[93498] "param"(93496 call /(93493 call -(93489 call . arguments[93481] c"size") 1) 2)
    (93501 'end of statement')
    unknown blkStart[93504] "param" 2
    (93507 'end of statement')
    unknown blkEnd[93515] "param"(93513 call -(93510 call + 2 rank[93498]) 1)
    (93518 'end of statement')
    unknown indStart[93523] "param"(93521 call + blkEnd[93515] 1)
    (93526 'end of statement')
    unknown indEnd[93534] "param"(93532 call -(93529 call + indStart[93523] rank[93498]) 1)
    (93537 'end of statement')
    unknown offset[93542](93541 call arguments[93481] 0)
    (93545 'end of statement')
    unknown blk[93550](93548 call * rank[93498] int(64)[13])
    (93553 'end of statement')
    unknown ind[93558](93556 call * rank[93498] int(64)[13])
    (93561 'end of statement')
    (93570 call =(93568 call blk[93550](93565 call - rank[93498] 1)) 1)
    {
      unknown i[93608] 0
      unknown tmp[93609] "maybe param" "temp"
      (93620 'move' tmp[93609](93618 call chpl_compute_low_param_loop_bound 0(93576 call - rank[93498] 2)))
      unknown tmp[93610] "maybe param" "temp"
      (93630 'move' tmp[93610](93628 call chpl_compute_high_param_loop_bound 0(93625 call - rank[93498] 2)))
      unknown tmp[93611] "maybe param" "temp"
      (93633 'move' tmp[93611](93581 call - 1))
      ParamForLoop[93635]
      { i[93608] tmp[93609] tmp[93610] tmp[93611]
        (93605 call =(93588 call blk[93550] i[93608])(93603 call *(93595 call blk[93550](93592 call + i[93608] 1))(93602 call arguments[93481](93599 call + blkStart[93504] i[93608]))))
      }
      label _unused_continueLabel[93613]
      label _breakLabel[93612]
    }
    {
      unknown j[93669] 0
      unknown tmp[93670] "maybe param" "temp"
      (93682 'move' tmp[93670](93680 call chpl_compute_low_param_loop_bound 0(93647 call - rank[93498] 1)))
      unknown tmp[93671] "maybe param" "temp"
      (93692 'move' tmp[93671](93690 call chpl_compute_high_param_loop_bound 0(93687 call - rank[93498] 1)))
      unknown tmp[93672] "maybe param" "temp"
      (93695 'move' tmp[93672] 1)
      ParamForLoop[93697]
      { j[93669] tmp[93670] tmp[93671] tmp[93672]
        {
          (93665 call =(93654 call ind[93558] j[93669])(93664 call arguments[93481](93661 call -(93658 call + indStart[93523] j[93669]) 1)))
        }
      }
      label _unused_continueLabel[93674]
      label _breakLabel[93673]
    }
    unknown ret[93708] offset[93542] int(64)[13]
    (93711 'end of statement')
    {
      unknown i[93734] 0
      unknown tmp[93735] "maybe param" "temp"
      (93747 'move' tmp[93735](93745 call chpl_compute_low_param_loop_bound 0(93715 call - rank[93498] 1)))
      unknown tmp[93736] "maybe param" "temp"
      (93757 'move' tmp[93736](93755 call chpl_compute_high_param_loop_bound 0(93752 call - rank[93498] 1)))
      unknown tmp[93737] "maybe param" "temp"
      (93760 'move' tmp[93737] 1)
      ParamForLoop[93762]
      { i[93734] tmp[93735] tmp[93736] tmp[93737]
        {
          (93730 call += ret[93708](93728 call *(93723 call ind[93558] i[93734])(93727 call blk[93550] i[93734])))
        }
      }
      label _unused_continueLabel[93739]
      label _breakLabel[93738]
    }
    (93772 return ret[93708])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultDist[93997].dsiNewRectangularDom[93786](arg _mt[94001]:_MT[238], arg this[93999]:DefaultDist[93997], param arg rank[93783] :
  int(64)[13], arg idxType[93788]:_any[178](?), param arg stridable[93791] :
  bool[10], arg inds[93794]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    const dom[93809] "const"(93798 'new'(_chpl_manager = unmanaged[220](?))(93808 call DefaultRectangularDom[372794](?) rank[93783] idxType[93788] stridable[93791](93807 call _to_unmanaged this[93999])))
    (93812 'end of statement')
    (93822 call(93817 call . dom[93809] c"dsiSetIndices") inds[93794])
    (93825 return dom[93809])
  }
  function DefaultDist[93997].dsiNewAssociativeDom[93833](arg _mt[94005]:_MT[238], arg this[94003]:DefaultDist[93997], arg idxType[93831]:_any[178](?), param arg parSafe[93836] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93851 return(93841 'new'(_chpl_manager = unmanaged[220](?))(93850 call DefaultAssociativeDom[378083](?) idxType[93831] parSafe[93836](93849 call _to_unmanaged this[94003]))))
  }
  function DefaultDist[93997].dsiNewSparseDom[93862](arg _mt[94009]:_MT[238], arg this[94007]:DefaultDist[93997], param arg rank[93859] :
  int(64)[13], arg idxType[93864]:_any[178](?), arg dom[93867] :
  _domain[125914](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93883 return(93872 'new'(_chpl_manager = unmanaged[220](?))(93882 call DefaultSparseDom[378091](?) rank[93859] idxType[93864](93880 call _to_unmanaged this[94007]) dom[93867])))
  }
  function DefaultDist[93997].dsiIndexToLocale[93892](arg _mt[94013]:_MT[238], arg this[94011]:DefaultDist[93997], arg ind[93890]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (93898 return(93896 call chpl_localeID_to_locale(93895 '_wide_get_locale' this[94011])))
  }
  function DefaultDist[93997].dsiClone[93905](arg _mt[94017]:_MT[238], arg this[94015]:DefaultDist[93997]) : _unknown[51] "method" "primary method"
  {
    (93911 return(93910 call _to_unmanaged this[94015]))
  }
  function DefaultDist[93997].dsiAssign[93924](arg _mt[94021]:_MT[238], arg this[94019]:DefaultDist[93997], arg other[93921] :
  (93920 'to unmanaged class from unknown'(93919 'typeof' this[94019]))) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function DefaultDist[93997].dsiEqualDMaps[93936](arg _mt[94025]:_MT[238], arg this[94023]:DefaultDist[93997], arg d[93933] :
  unmanaged DefaultDist[415502]) param : _unknown[51] "method" "primary method"
  {
    (93939 return 1)
  }
  function DefaultDist[93997].dsiEqualDMaps[93948](arg _mt[94029]:_MT[238], arg this[94027]:DefaultDist[93997], arg d[93946]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (93951 return 0)
  }
  function DefaultDist[93997].trackDomains[93958](arg _mt[94033]:_MT[238], arg this[94031]:DefaultDist[93997]) param : _unknown[51] "method" "primary method"
  {
    (93961 return 0)
  }
  function DefaultDist[93997].dsiTrackDomains[93968](arg _mt[94037]:_MT[238], arg this[94035]:DefaultDist[93997]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (93971 return 0)
  }
  function DefaultDist[93997].singleton[93978](arg _mt[94041]:_MT[238], arg this[94039]:DefaultDist[93997]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93981 return 1)
  }
  function DefaultDist[93997].dsiIsLayout[93988](arg _mt[94045]:_MT[238], arg this[94043]:DefaultDist[93997]) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (93991 return 1)
  }
  type DefaultDist[93997] val super[355711]:BaseDist[145934] "super class"
  type unmanaged DefaultDist[415502]
  type DefaultDist[378102](?)
  unknown defaultDist[94058] "locale private"(94048 'new'(94057 call dmap[118251](94052 'new'(_chpl_manager = unmanaged[220](?))(94055 call DefaultDist[378102](?)))))
  (94061 'end of statement')
  function chpl_defaultDistInitPrivate[94064]() : _unknown[51] "no return value for void"
  {
    if(94104 call _cond_test(94071 call ==(94067 call . defaultDist[94058] c"_value") nil[44]))
    {
      const nd[94083] "const"(94073 'new'(94082 call dmap[118251](94077 'new'(_chpl_manager = unmanaged[220](?))(94080 call DefaultDist[378102](?)))))
      (94086 'end of statement')
      (94102 'move' defaultDist[94058](94101 call chpl__autoCopy(94099 call(94095 call . nd[94083] c"clone"))))
    }
  }
  function DefaultRectangularDom[100799](?).linksDistribution[94138](arg _mt[100803]:_MT[238], arg this[100801]:DefaultRectangularDom[100799](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94141 return 0)
  }
  function DefaultRectangularDom[100799](?).dsiLinksDistribution[94148](arg _mt[100807]:_MT[238], arg this[100805]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94151 return 0)
  }
  function DefaultRectangularDom[415352](?).isDefaultRectangular[94158](arg _mt[100811]:_MT[238], arg this[100809]:DefaultRectangularDom[415352](?)) param : _unknown[51] "method" "primary method"
  {
    (94161 return 1)
  }
  function DefaultRectangularDom[100799](?).isDefaultRectangular[94168](arg _mt[100815]:_MT[238], arg this[100813]:DefaultRectangularDom[100799](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (94171 return 1)
  }
  function DefaultRectangularDom[100799](?).init[94180](arg _mt[100819]:_MT[238], arg this[100817]:DefaultRectangularDom[100799](?), param arg rank[94178]:_any[178](?), arg idxType[94182]:_any[178](?), param arg stridable[94184]:_any[178](?), arg dist[94186]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94196 call(94189 call .(358552 call . this[100817] c"super") c"init") rank[94178] idxType[94182] stridable[94184])
    (94206 call =(94202 call . this[100817] c"dist") dist[94186])
  }
  function DefaultRectangularDom[100799](?).intIdxType[94213](arg _mt[100823]:_MT[238], arg this[100821]:DefaultRectangularDom[100799](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (94219 return(94218 call chpl__idxTypeToIntIdxType(378121 call . this[100821] c"idxType")))
  }
  function DefaultRectangularDom[100799](?).dsiMyDist[94226](arg _mt[100827]:_MT[238], arg this[100825]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (94229 return(378126 call . this[100825] c"dist"))
  }
  function DefaultRectangularDom[100799](?).chpl__serialize[94260](arg _mt[100831]:_MT[238], arg this[100829]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method"
  {
    (94273 return(94262 'new'(94272 call _serialized_domain[94255](?)(378134 call . this[100829] c"rank")(378139 call . this[100829] c"idxType")(378144 call . this[100829] c"stridable")(94270 call(378148 call . this[100829] c"dsiDims")) 1)))
  }
  function DefaultRectangularDom[415352](?).chpl__deserialize[94282](arg _mt[100835]:_MT[238], arg this[100833]:DefaultRectangularDom[415352](?), arg data[94280]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (94310 return(94309 call(94287 call . defaultDist[94058] c"newRectangularDom")(94291 call . data[94280] c"rank")(94296 call . data[94280] c"idxType")(94300 call . data[94280] c"stridable")(94306 call . data[94280] c"dims")))
  }
  function DefaultRectangularDom[100799](?).dsiDisplayRepresentation[94317](arg _mt[100839]:_MT[238], arg this[100837]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (94339 call writeln "ranges = "(378153 call . this[100837] c"ranges"))
  }
  function DefaultRectangularDom[100799](?).dsiGetIndices[94346](arg _mt[100843]:_MT[238], arg this[100841]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method"
  {
    (94349 return(378158 call . this[100841] c"ranges"))
  }
  function DefaultRectangularDom[100799](?).dsiSetIndices[94358](arg _mt[100847]:_MT[238], arg this[100845]:DefaultRectangularDom[100799](?), arg x[94356]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94362 call =(378163 call . this[100845] c"ranges") x[94356])
  }
  function DefaultRectangularDom[100799](?).dsiAssignDomain[94374](arg _mt[100851]:_MT[238], arg this[100849]:DefaultRectangularDom[100799](?), arg rhs[94371] :
  _domain[125914](?), arg lhsPrivate[94377] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (94384 call chpl_assignDomainWithGetSetIndices this[100849] rhs[94371])
  }
  function DefaultRectangularDom[100799](?).these_help[94395](arg _mt[100855]:_MT[238], arg this[100853]:DefaultRectangularDom[100799](?), param arg d[94392] :
  int(64)[13]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94637 call _cond_test(94402 call == d[94392](94400 call -(378173 call . this[100853] c"rank") 1)))
    {
      {
        unknown _indexOfInterest[94412] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94413] "expr temp" "temp"
        (94422 'move' _iterator[94413](94420 call _getIterator(94408 call(378178 call . this[100853] c"ranges") d[94392])))
        Defer
        {
          {
            (94439 call _freeIterator _iterator[94413])
          }
        }
        { scopeless type
          (94428 'move' _indexOfInterest[94412](94425 call iteratorIndex _iterator[94413]))
        }
        ForLoop[94414]
        {
          unknown i[94432] "index var" "insert auto destroy"
          (94434 'move' i[94432] _indexOfInterest[94412])
          (94410 yield i[94432])
          label _continueLabel[94417]
          _indexOfInterest[94412]
          _iterator[94413]
        }
        label _breakLabel[94418]
      }
    }
    {
      if(94633 call _cond_test(94452 call == d[94392](94450 call -(378186 call . this[100853] c"rank") 2)))
      {
        {
          unknown _indexOfInterest[94508] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94509] "expr temp" "temp"
          (94518 'move' _iterator[94509](94516 call _getIterator(94458 call(378191 call . this[100853] c"ranges") d[94392])))
          Defer
          {
            {
              (94535 call _freeIterator _iterator[94509])
            }
          }
          { scopeless type
            (94524 'move' _indexOfInterest[94508](94521 call iteratorIndex _iterator[94509]))
          }
          ForLoop[94510]
          {
            unknown i[94528] "index var" "insert auto destroy"
            (94530 'move' i[94528] _indexOfInterest[94508])
            {
              unknown _indexOfInterest[94474] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94475] "expr temp" "temp"
              (94484 'move' _iterator[94475](94482 call _getIterator(94466 call(378198 call . this[100853] c"these_help")(94463 call -(378203 call . this[100853] c"rank") 1))))
              Defer
              {
                {
                  (94501 call _freeIterator _iterator[94475])
                }
              }
              { scopeless type
                (94490 'move' _indexOfInterest[94474](94487 call iteratorIndex _iterator[94475]))
              }
              ForLoop[94476]
              {
                unknown j[94494] "index var" "insert auto destroy"
                (94496 'move' j[94494] _indexOfInterest[94474])
                (94472 yield(94470 call _build_tuple i[94528] j[94494]))
                label _continueLabel[94479]
                _indexOfInterest[94474]
                _iterator[94475]
              }
              label _breakLabel[94480]
            }
            label _continueLabel[94513]
            _indexOfInterest[94508]
            _iterator[94509]
          }
          label _breakLabel[94514]
        }
      }
      {
        {
          unknown _indexOfInterest[94598] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94599] "expr temp" "temp"
          (94608 'move' _iterator[94599](94606 call _getIterator(94547 call(378210 call . this[100853] c"ranges") d[94392])))
          Defer
          {
            {
              (94625 call _freeIterator _iterator[94599])
            }
          }
          { scopeless type
            (94614 'move' _indexOfInterest[94598](94611 call iteratorIndex _iterator[94599]))
          }
          ForLoop[94600]
          {
            unknown i[94618] "index var" "insert auto destroy"
            (94620 'move' i[94618] _indexOfInterest[94598])
            {
              unknown _indexOfInterest[94564] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94565] "expr temp" "temp"
              (94574 'move' _iterator[94565](94572 call _getIterator(94555 call(378215 call . this[100853] c"these_help")(94552 call + d[94392] 1))))
              Defer
              {
                {
                  (94591 call _freeIterator _iterator[94565])
                }
              }
              { scopeless type
                (94580 'move' _indexOfInterest[94564](94577 call iteratorIndex _iterator[94565]))
              }
              ForLoop[94566]
              {
                unknown j[94584] "index var" "insert auto destroy"
                (94586 'move' j[94584] _indexOfInterest[94564])
                (94562 yield(94560 call _build_tuple i[94618](94558 'expand_tuple' j[94584])))
                label _continueLabel[94569]
                _indexOfInterest[94564]
                _iterator[94565]
              }
              label _breakLabel[94570]
            }
            label _continueLabel[94603]
            _indexOfInterest[94598]
            _iterator[94599]
          }
          label _breakLabel[94604]
        }
      }
    }
  }
  function DefaultRectangularDom[100799](?).these_help[94651](arg _mt[100859]:_MT[238], arg this[100857]:DefaultRectangularDom[100799](?), param arg d[94648] :
  int(64)[13], arg block[94653]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94906 call _cond_test(94663 call == d[94648](94661 call -(94657 call . block[94653] c"size") 1)))
    {
      {
        unknown _indexOfInterest[94673] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94674] "expr temp" "temp"
        (94683 'move' _iterator[94674](94681 call _getIterator(94669 call block[94653] d[94648])))
        Defer
        {
          {
            (94700 call _freeIterator _iterator[94674])
          }
        }
        { scopeless type
          (94689 'move' _indexOfInterest[94673](94686 call iteratorIndex _iterator[94674]))
        }
        ForLoop[94675]
        {
          unknown i[94693] "index var" "insert auto destroy"
          (94695 'move' i[94693] _indexOfInterest[94673])
          (94671 yield i[94693])
          label _continueLabel[94678]
          _indexOfInterest[94673]
          _iterator[94674]
        }
        label _breakLabel[94679]
      }
    }
    {
      if(94902 call _cond_test(94716 call == d[94648](94714 call -(94710 call . block[94653] c"size") 2)))
      {
        {
          unknown _indexOfInterest[94776] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94777] "expr temp" "temp"
          (94786 'move' _iterator[94777](94784 call _getIterator(94722 call block[94653] d[94648])))
          Defer
          {
            {
              (94803 call _freeIterator _iterator[94777])
            }
          }
          { scopeless type
            (94792 'move' _indexOfInterest[94776](94789 call iteratorIndex _iterator[94777]))
          }
          ForLoop[94778]
          {
            unknown i[94796] "index var" "insert auto destroy"
            (94798 'move' i[94796] _indexOfInterest[94776])
            {
              unknown _indexOfInterest[94742] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94743] "expr temp" "temp"
              (94752 'move' _iterator[94743](94750 call _getIterator(94734 call(378229 call . this[100857] c"these_help")(94730 call -(94726 call . block[94653] c"size") 1) block[94653])))
              Defer
              {
                {
                  (94769 call _freeIterator _iterator[94743])
                }
              }
              { scopeless type
                (94758 'move' _indexOfInterest[94742](94755 call iteratorIndex _iterator[94743]))
              }
              ForLoop[94744]
              {
                unknown j[94762] "index var" "insert auto destroy"
                (94764 'move' j[94762] _indexOfInterest[94742])
                (94740 yield(94738 call _build_tuple i[94796] j[94762]))
                label _continueLabel[94747]
                _indexOfInterest[94742]
                _iterator[94743]
              }
              label _breakLabel[94748]
            }
            label _continueLabel[94781]
            _indexOfInterest[94776]
            _iterator[94777]
          }
          label _breakLabel[94782]
        }
      }
      {
        {
          unknown _indexOfInterest[94867] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94868] "expr temp" "temp"
          (94877 'move' _iterator[94868](94875 call _getIterator(94815 call block[94653] d[94648])))
          Defer
          {
            {
              (94894 call _freeIterator _iterator[94868])
            }
          }
          { scopeless type
            (94883 'move' _indexOfInterest[94867](94880 call iteratorIndex _iterator[94868]))
          }
          ForLoop[94869]
          {
            unknown i[94887] "index var" "insert auto destroy"
            (94889 'move' i[94887] _indexOfInterest[94867])
            {
              unknown _indexOfInterest[94833] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[94834] "expr temp" "temp"
              (94843 'move' _iterator[94834](94841 call _getIterator(94824 call(378238 call . this[100857] c"these_help")(94820 call + d[94648] 1) block[94653])))
              Defer
              {
                {
                  (94860 call _freeIterator _iterator[94834])
                }
              }
              { scopeless type
                (94849 'move' _indexOfInterest[94833](94846 call iteratorIndex _iterator[94834]))
              }
              ForLoop[94835]
              {
                unknown j[94853] "index var" "insert auto destroy"
                (94855 'move' j[94853] _indexOfInterest[94833])
                (94831 yield(94829 call _build_tuple i[94887](94827 'expand_tuple' j[94853])))
                label _continueLabel[94838]
                _indexOfInterest[94833]
                _iterator[94834]
              }
              label _breakLabel[94839]
            }
            label _continueLabel[94872]
            _indexOfInterest[94867]
            _iterator[94868]
          }
          label _breakLabel[94873]
        }
      }
    }
  }
  function DefaultRectangularDom[100799](?).these[94920](arg _mt[100863]:_MT[238], arg this[100861]:DefaultRectangularDom[100799](?), arg tasksPerLocale[94917] =
  dataParTasksPerLocale[93289], arg ignoreRunning[94923] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[94927] =
  dataParMinGranularity[93301], arg offset[94939] =
  (94938 call createTuple(378250 call . this[100861] c"rank")(378254 call . this[100861] c"intIdxType")(94936 call _cast(378258 call . this[100861] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95032 call _cond_test(94944 call ==(378263 call . this[100861] c"rank") 1))
    {
      {
        unknown _indexOfInterest[94954] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94955] "expr temp" "temp"
        (94964 'move' _iterator[94955](94962 call _getIterator(94950 call(378268 call . this[100861] c"ranges") 0)))
        Defer
        {
          {
            (94981 call _freeIterator _iterator[94955])
          }
        }
        { scopeless type
          (94970 'move' _indexOfInterest[94954](94967 call iteratorIndex _iterator[94955]))
        }
        ForLoop[94956]
        {
          unknown i[94974] "index var" "insert auto destroy"
          (94976 'move' i[94974] _indexOfInterest[94954])
          (94952 yield i[94974])
          label _continueLabel[94959]
          _indexOfInterest[94954]
          _iterator[94955]
        }
        label _breakLabel[94960]
      }
    }
    {
      {
        unknown _indexOfInterest[94997] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94998] "expr temp" "temp"
        (95007 'move' _iterator[94998](95005 call _getIterator(94993 call(378273 call . this[100861] c"these_help") 0)))
        Defer
        {
          {
            (95024 call _freeIterator _iterator[94998])
          }
        }
        { scopeless type
          (95013 'move' _indexOfInterest[94997](95010 call iteratorIndex _iterator[94998]))
        }
        ForLoop[94999]
        {
          unknown i[95017] "index var" "insert auto destroy"
          (95019 'move' i[95017] _indexOfInterest[94997])
          (94995 yield i[95017])
          label _continueLabel[95002]
          _indexOfInterest[94997]
          _iterator[94998]
        }
        label _breakLabel[95003]
      }
    }
  }
  function DefaultRectangularDom[100799](?).these[95045](arg _mt[100867]:_MT[238], arg this[100865]:DefaultRectangularDom[100799](?), param arg tag[95042] :
  iterKind[453], arg tasksPerLocale[95048] =
  dataParTasksPerLocale[93289], arg ignoreRunning[95052] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[95056] =
  dataParMinGranularity[93301], arg offset[95068] =
  (95067 call createTuple(378283 call . this[100865] c"rank")(378287 call . this[100865] c"intIdxType")(95065 call _cast(378291 call . this[100865] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(95101 call _cond_test chpl__testParFlag[188312])
    {
      (95099 call chpl__testPar "default rectangular domain standalone invoked on "(378298 call . this[100865] c"ranges"))
    }
    if(95129 call _cond_test debugDefaultDist[93400])
    {
      (95127 call chpl_debug_writeln "*** In domain standalone code:")
    }
    const numTasks[95146] "const"(95143 IfExpr (95136 call == tasksPerLocale[95048] 0) then
    { scopeless
      (95139 call .(358565 call here[90439]) c"maxTaskPar")
    } else
    { scopeless
      tasksPerLocale[95048]
    } )
    (95149 'end of statement')
    if(95210 call _cond_test debugDefaultDist[93400])
    {
      (95207 call chpl_debug_writeln "    numTasks=" numTasks[95146] " (" ignoreRunning[95052] "), minIndicesPerTask=" minIndicesPerTask[95056])
    }
    const tmp[95239] "const" "temp"(95236 IfExpr (95221 'task_get_serial') then
    { scopeless
      (95227 call _build_tuple 1(95224 call - 1))
    } else
    { scopeless
      (95235 call _computeChunkStuff numTasks[95146] ignoreRunning[95052] minIndicesPerTask[95056](378313 call . this[100865] c"ranges"))
    } )
    (95246 call _check_tuple_var_decl tmp[95239] 2)
    const numChunks[95214] "const"(95240 call tmp[95239] 0)
    const parDim[95216] "const"(95243 call tmp[95239] 1)
    (95251 'end of statement')
    if(95336 call _cond_test debugDefaultDist[93400])
    {
      (95333 call chpl_debug_writeln "    numChunks=" numChunks[95214] " parDim=" parDim[95216] " ranges(" parDim[95216] ").size="(95330 call .(95329 call(378322 call . this[100865] c"ranges") parDim[95216]) c"size"))
    }
    if(95426 call _cond_test debugDataPar[93410])
    {
      (95423 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[95146] "\n" "### ignoreRunning = " ignoreRunning[95052] "\n" "### minIndicesPerTask = " minIndicesPerTask[95056] "\n" "### numChunks = " numChunks[95214] " (parDim = " parDim[95216] ")\n" "### nranges = "(378334 call . this[100865] c"ranges"))
    }
    if(96106 call _cond_test(95432 call <= numChunks[95214] 1))
    {
      {
        unknown _indexOfInterest[95443] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[95444] "expr temp" "temp"
        (95453 'move' _iterator[95444](95451 call _getIterator(95438 call(378339 call . this[100865] c"these_help") 0)))
        Defer
        {
          {
            (95470 call _freeIterator _iterator[95444])
          }
        }
        { scopeless type
          (95459 'move' _indexOfInterest[95443](95456 call iteratorIndex _iterator[95444]))
        }
        ForLoop[95445]
        {
          unknown i[95463] "index var" "insert auto destroy"
          (95465 'move' i[95463] _indexOfInterest[95443])
          {
            (95440 yield i[95463])
          }
          label _continueLabel[95448]
          _indexOfInterest[95443]
          _iterator[95444]
        }
        label _breakLabel[95449]
      }
    }
    {
      if(95502 call _cond_test debugDefaultDist[93400])
      {
        (95499 call chpl_debug_writeln "*** DI: ranges = "(378346 call . this[100865] c"ranges"))
      }
      {
        unknown tmpIter[95759] "expr temp" "maybe ref" "no copy" "temp"
        (95762 'move' tmpIter[95759](95512 call #(95509 call chpl_build_low_bounded_range 0) numChunks[95214]))
        unknown isRngDomArr[96087] "maybe param" "temp"
        (96102 'move' isRngDomArr[96087](96100 call ||(96089 call isBoundedRange tmpIter[95759])(96098 call ||(96092 call isDomain tmpIter[95759])(96095 call isArray tmpIter[95759]))))
        if isRngDomArr[96087]
        {
          const _coforallCount[95954] "const" "end count" "temp"
          (96023 'move' _coforallCount[95954](96020 call _endCountAlloc 1))
          unknown numTasks[95955] "temp"
          (96007 'move' numTasks[95955](96003 call . tmpIter[95759] c"size"))
          (95998 call _upEndCount _coforallCount[95954] 1 numTasks[95955])
          (95995 call chpl_resetTaskSpawn numTasks[95955])
          unknown _indexOfInterest[95962] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95963] "expr temp" "temp"
          (95972 'move' _iterator[95963](95970 call _getIterator tmpIter[95759]))
          Defer
          {
            {
              (95988 call _freeIterator _iterator[95963])
            }
          }
          { scopeless type
            (95977 'move' _indexOfInterest[95962](95974 call iteratorIndex _iterator[95963]))
          }
          ForLoop[95964]
          {
            unknown chunk[95981] "coforall index var" "index var" "insert auto destroy"
            (95983 'move' chunk[95981] _indexOfInterest[95962])
            {
              {
                unknown block[95766](378425 call . this[100865] c"ranges")
                (95769 'end of statement')
                const len[95771] "const"(95810 IfExpr (95773 call !(95775 call .(95777 call(378430 call . this[100865] c"ranges") parDim[95216]) c"stridable")) then
                { scopeless
                  (95782 call .(95784 call(378436 call . this[100865] c"ranges") parDim[95216]) c"size")
                } else
                { scopeless
                  (95789 call *(95791 call _cast uint(64)[115](95794 call .(95796 call(378442 call . this[100865] c"ranges") parDim[95216]) c"size"))(95800 call _cast uint(64)[115](95803 call abs(95805 call .(95807 call(378448 call . this[100865] c"ranges") parDim[95216]) c"stride"))))
                } )
                (95812 'end of statement')
                const tmp[95814] "const" "temp"(95816 call _computeBlock len[95771] numChunks[95214] chunk[95981](95821 call .(95823 call(378457 call . this[100865] c"ranges") parDim[95216]) c"_high")(95827 call .(95829 call(378463 call . this[100865] c"ranges") parDim[95216]) c"_low")(95833 call .(95835 call(378469 call . this[100865] c"ranges") parDim[95216]) c"_low"))
                (95840 call _check_tuple_var_decl tmp[95814] 2)
                const lo[95843] "const"(95845 call tmp[95814] 0)
                const hi[95848] "const"(95850 call tmp[95814] 1)
                (95853 'end of statement')
                if(95855 call _cond_test(95857 call .(95859 call block[95766] parDim[95216]) c"stridable"))
                {
                  (95865 call =(95867 call block[95766] parDim[95216])(95870 call chpl_align(95872 call chpl_by(95874 call chpl_build_bounded_range lo[95843] hi[95848])(95878 call .(95880 call block[95766] parDim[95216]) c"stride"))(95884 call chpl__idxToInt(95886 call .(95888 call block[95766] parDim[95216]) c"alignment"))))
                }
                {
                  (95894 call =(95896 call block[95766] parDim[95216])(95899 call chpl_build_bounded_range lo[95843] hi[95848]))
                }
                if(95904 call _cond_test debugDefaultDist[93400])
                {
                  (95908 call chpl_debug_writeln "*** DI[" chunk[95981] "]: block = " block[95766])
                }
                {
                  unknown _indexOfInterest[95915] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95917] "expr temp" "temp"
                  (95919 'move' _iterator[95917](95922 call _getIterator(95924 call(378491 call . this[100865] c"these_help") 0 block[95766])))
                  Defer
                  {
                    {
                      (95929 call _freeIterator _iterator[95917])
                    }
                  }
                  { scopeless type
                    (95933 'move' _indexOfInterest[95915](95936 call iteratorIndex _iterator[95917]))
                  }
                  ForLoop[95938]
                  {
                    unknown i[95941] "index var" "insert auto destroy"
                    (95943 'move' i[95941] _indexOfInterest[95915])
                    {
                      (95947 yield i[95941])
                    }
                    label _continueLabel[95949]
                    _indexOfInterest[95915]
                    _iterator[95917]
                  }
                  label _breakLabel[95951]
                }
              }
              (95957 call _downEndCount _coforallCount[95954] nil[44])
              (95956 'coforall loop')
            }
            label _continueLabel[95967]
            _indexOfInterest[95962]
            _iterator[95963]
          }
          label _breakLabel[95968]
          Defer
          {
            {
              (96010 call _endCountFree _coforallCount[95954])
            }
          }
          (96015 call _waitEndCount _coforallCount[95954] 1 numTasks[95955])
        }
        {
          const _coforallCount[96027] "const" "end count" "temp"
          (96084 'move' _coforallCount[96027](96081 call _endCountAlloc 1))
          unknown _indexOfInterest[96035] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[96036] "expr temp" "temp"
          (96045 'move' _iterator[96036](96043 call _getIterator tmpIter[95759]))
          Defer
          {
            {
              (96061 call _freeIterator _iterator[96036])
            }
          }
          { scopeless type
            (96050 'move' _indexOfInterest[96035](96047 call iteratorIndex _iterator[96036]))
          }
          ForLoop[96037]
          {
            unknown chunk[96054] "coforall index var" "index var" "insert auto destroy"
            (96056 'move' chunk[96054] _indexOfInterest[96035])
            (96068 call _upEndCount _coforallCount[96027] 1)
            {
              {
                unknown block[95515](378352 call . this[100865] c"ranges")
                (95518 'end of statement')
                const len[95564] "const"(95561 IfExpr (95527 call !(95524 call .(95523 call(378357 call . this[100865] c"ranges") parDim[95216]) c"stridable")) then
                { scopeless
                  (95533 call .(95532 call(378363 call . this[100865] c"ranges") parDim[95216]) c"size")
                } else
                { scopeless
                  (95559 call *(95544 call _cast uint(64)[115](95540 call .(95539 call(378369 call . this[100865] c"ranges") parDim[95216]) c"size"))(95557 call _cast uint(64)[115](95555 call abs(95551 call .(95550 call(378375 call . this[100865] c"ranges") parDim[95216]) c"stride"))))
                } )
                (95567 'end of statement')
                const tmp[95600] "const" "temp"(95599 call _computeBlock len[95564] numChunks[95214] chunk[96054](95582 call .(95581 call(378384 call . this[100865] c"ranges") parDim[95216]) c"_high")(95589 call .(95588 call(378390 call . this[100865] c"ranges") parDim[95216]) c"_low")(95596 call .(95595 call(378396 call . this[100865] c"ranges") parDim[95216]) c"_low"))
                (95607 call _check_tuple_var_decl tmp[95600] 2)
                const lo[95568] "const"(95601 call tmp[95600] 0)
                const hi[95570] "const"(95604 call tmp[95600] 1)
                (95612 'end of statement')
                if(95663 call _cond_test(95617 call .(95616 call block[95515] parDim[95216]) c"stridable"))
                {
                  (95649 call =(95623 call block[95515] parDim[95216])(95647 call chpl_align(95635 call chpl_by(95626 call chpl_build_bounded_range lo[95568] hi[95570])(95632 call .(95631 call block[95515] parDim[95216]) c"stride"))(95646 call chpl__idxToInt(95642 call .(95641 call block[95515] parDim[95216]) c"alignment"))))
                }
                {
                  (95660 call =(95655 call block[95515] parDim[95216])(95658 call chpl_build_bounded_range lo[95568] hi[95570]))
                }
                if(95711 call _cond_test debugDefaultDist[93400])
                {
                  (95708 call chpl_debug_writeln "*** DI[" chunk[96054] "]: block = " block[95515])
                }
                {
                  unknown _indexOfInterest[95725] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95726] "expr temp" "temp"
                  (95735 'move' _iterator[95726](95733 call _getIterator(95720 call(378418 call . this[100865] c"these_help") 0 block[95515])))
                  Defer
                  {
                    {
                      (95752 call _freeIterator _iterator[95726])
                    }
                  }
                  { scopeless type
                    (95741 'move' _indexOfInterest[95725](95738 call iteratorIndex _iterator[95726]))
                  }
                  ForLoop[95727]
                  {
                    unknown i[95745] "index var" "insert auto destroy"
                    (95747 'move' i[95745] _indexOfInterest[95725])
                    {
                      (95722 yield i[95745])
                    }
                    label _continueLabel[95730]
                    _indexOfInterest[95725]
                    _iterator[95726]
                  }
                  label _breakLabel[95731]
                }
              }
              (96030 call _downEndCount _coforallCount[96027] nil[44])
              (96029 'coforall loop')
            }
            label _continueLabel[96040]
            _indexOfInterest[96035]
            _iterator[96036]
          }
          label _breakLabel[96041]
          Defer
          {
            {
              (96072 call _endCountFree _coforallCount[96027])
            }
          }
          (96077 call _waitEndCount _coforallCount[96027] 1)
        }
      }
    }
  }
  where {
    (95076 call == tag[95042] standalone[451])
  }
  function DefaultRectangularDom[100799](?).these[96119](arg _mt[100871]:_MT[238], arg this[100869]:DefaultRectangularDom[100799](?), param arg tag[96116] :
  iterKind[453], arg tasksPerLocale[96122] =
  dataParTasksPerLocale[93289], arg ignoreRunning[96126] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[96130] =
  dataParMinGranularity[93301], arg offset[96142] =
  (96141 call createTuple(378502 call . this[100869] c"rank")(378506 call . this[100869] c"intIdxType")(96139 call _cast(378510 call . this[100869] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numSublocs[96158] "const"(96157 call(96153 call .(358568 call here[90439]) c"getChildCount"))
    (96161 'end of statement')
    if(98821 call _cond_test(96168 call && localeModelHasSublocales[187415](96166 call != numSublocs[96158] 0)))
    {
      unknown dptpl[96182](96179 IfExpr (96172 call == tasksPerLocale[96122] 0) then
      { scopeless
        (96175 call .(358570 call here[90439]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[96122]
      } )
      (96185 'end of statement')
      if(96223 call _cond_test(96188 call ! ignoreRunning[96126]))
      {
        const otherTasks[96199] "const"(96197 call -(96195 call(96191 call .(358572 call here[90439]) c"runningTasks")) 1)
        (96202 'end of statement')
        (96220 call = dptpl[96182](96217 IfExpr (96207 call < otherTasks[96199] dptpl[96182]) then
        { scopeless
          (96214 call _cast int(64)[13](96211 call - dptpl[96182] otherTasks[96199]))
        } else
        { scopeless
          1
        } ))
      }
      const numSublocTasks[96232] "const"(96231 call min numSublocs[96158] dptpl[96182])
      (96235 'end of statement')
      const tmp[96262] "const" "temp"(96259 IfExpr (96243 'task_get_serial') then
      { scopeless
        (96249 call _build_tuple 1(96246 call - 1))
      } else
      { scopeless
        (96258 call _computeChunkStuff numSublocTasks[96232](ignoreRunning = 1) minIndicesPerTask[96130](378530 call . this[100869] c"ranges"))
      } )
      (96269 call _check_tuple_var_decl tmp[96262] 2)
      const numChunks[96236] "const"(96263 call tmp[96262] 0)
      const parDim[96238] "const"(96266 call tmp[96262] 1)
      (96274 'end of statement')
      if(96300 call _cond_test debugDataParNuma[93415])
      {
        (96297 call chpl_debug_writeln "### numSublocs = " numSublocs[96158] "\n" "### numTasksPerSubloc = " numSublocTasks[96232] "\n" "### ignoreRunning = " ignoreRunning[96126] "\n" "### minIndicesPerTask = " minIndicesPerTask[96130] "\n" "### numChunks = " numChunks[96236] " (parDim = " parDim[96238] ")\n" "### nranges = "(378542 call . this[100869] c"ranges"))
      }
      if(98091 call _cond_test(96306 call == numChunks[96236] 1))
      {
        if(96413 call _cond_test(96310 call ==(378548 call . this[100869] c"rank") 1))
        {
          (96329 yield(96327 call _build_tuple(96325 call #(96316 call chpl_build_low_bounded_range(96315 call offset[96142] 0))(96322 call .(96321 call(378554 call . this[100869] c"ranges") 0) c"size"))))
        }
        {
          unknown block[96339](96337 call *(378559 call . this[100869] c"rank")(96336 call range[64316](?)(378564 call . this[100869] c"intIdxType")))
          (96342 'end of statement')
          {
            unknown i[96373] 0
            unknown tmp[96374] "maybe param" "temp"
            (96386 'move' tmp[96374](96384 call chpl_compute_low_param_loop_bound 0(96347 call -(378569 call . this[100869] c"rank") 1)))
            unknown tmp[96375] "maybe param" "temp"
            (96396 'move' tmp[96375](96394 call chpl_compute_high_param_loop_bound 0(96391 call -(378584 call . this[100869] c"rank") 1)))
            unknown tmp[96376] "maybe param" "temp"
            (96399 'move' tmp[96376] 1)
            ParamForLoop[96401]
            { i[96373] tmp[96374] tmp[96375] tmp[96376]
              (96370 call =(96354 call block[96339] i[96373])(96368 call #(96359 call chpl_build_low_bounded_range(96358 call offset[96142] i[96373]))(96365 call .(96364 call(378578 call . this[100869] c"ranges") i[96373]) c"size")))
            }
            label _unused_continueLabel[96378]
            label _breakLabel[96377]
          }
          (96411 yield block[96339])
        }
      }
      {
        {
          unknown tmpIter[97226] "expr temp" "maybe ref" "no copy" "temp"
          (97229 'move' tmpIter[97226](96423 call #(96420 call chpl_build_low_bounded_range 0) numChunks[96236]))
          unknown isRngDomArr[98071] "maybe param" "temp"
          (98086 'move' isRngDomArr[98071](98084 call ||(98073 call isBoundedRange tmpIter[97226])(98082 call ||(98076 call isDomain tmpIter[97226])(98079 call isArray tmpIter[97226]))))
          if isRngDomArr[98071]
          {
            const _coforallCount[97938] "const" "end count" "temp"
            (98007 'move' _coforallCount[97938](98004 call _endCountAlloc 1))
            unknown numTasks[97939] "temp"
            (97991 'move' numTasks[97939](97987 call . tmpIter[97226] c"size"))
            (97982 call _upEndCount _coforallCount[97938] 1 numTasks[97939])
            (97979 call chpl_resetTaskSpawn numTasks[97939])
            unknown _indexOfInterest[97946] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97947] "expr temp" "temp"
            (97956 'move' _iterator[97947](97954 call _getIterator tmpIter[97226]))
            Defer
            {
              {
                (97972 call _freeIterator _iterator[97947])
              }
            }
            { scopeless type
              (97961 'move' _indexOfInterest[97946](97958 call iteratorIndex _iterator[97947]))
            }
            ForLoop[97948]
            {
              unknown chunk[97965] "coforall index var" "index var" "insert auto destroy"
              (97967 'move' chunk[97965] _indexOfInterest[97946])
              {
                {
                  const tmp[97236] "const" "temp"
                  (97238 'move' tmp[97236](97240 'deref'(97241 '_wide_get_locale'(97246 call(97243 call .(358576 call here[90439]) c"getChild") chunk[97965]))))
                  {
                    if(97250 call _cond_test debugDataParNuma[93415])
                    {
                      if(97254 call _cond_test(97256 call != chunk[97965](97259 call chpl_getSubloc)))
                      {
                        (97263 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[97965] ", on "(97268 call chpl_getSubloc) ") ***")
                      }
                    }
                    const numSublocTasks[97273] "const"(97294 IfExpr (97275 call < chunk[97965](97278 call % dptpl[96182] numChunks[96236])) then
                    { scopeless
                      (97283 call +(97285 call / dptpl[96182] numChunks[96236]) 1)
                    } else
                    { scopeless
                      (97291 call / dptpl[96182] numChunks[96236])
                    } )
                    (97296 'end of statement')
                    unknown locBlock[97298](97300 call *(378788 call . this[100869] c"rank")(97303 call range[64316](?)(378793 call . this[100869] c"intIdxType")))
                    (97306 'end of statement')
                    {
                      unknown i[97308] 0
                      unknown tmp[97311] "maybe param" "temp"
                      (97313 'move' tmp[97311](97316 call chpl_compute_low_param_loop_bound 0(97319 call -(378798 call . this[100869] c"rank") 1)))
                      unknown tmp[97322] "maybe param" "temp"
                      (97324 'move' tmp[97322](97327 call chpl_compute_high_param_loop_bound 0(97330 call -(378803 call . this[100869] c"rank") 1)))
                      unknown tmp[97333] "maybe param" "temp"
                      (97335 'move' tmp[97333] 1)
                      ParamForLoop[97338]
                      { i[97308] tmp[97311] tmp[97322] tmp[97333]
                        (97346 call =(97348 call locBlock[97298] i[97308])(97351 call #(97353 call chpl_build_low_bounded_range(97355 call offset[96142] i[97308]))(97358 call .(97360 call(378812 call . this[100869] c"ranges") i[97308]) c"size")))
                      }
                      label _unused_continueLabel[97363]
                      label _breakLabel[97365]
                    }
                    unknown followMe[97368] locBlock[97298](97371 call *(378819 call . this[100869] c"rank")(97374 call range[64316](?)(378824 call . this[100869] c"intIdxType")))
                    (97377 'end of statement')
                    const tmp[97379] "const" "temp"(97381 call _computeBlock(97383 call .(97385 call locBlock[97298] parDim[96238]) c"size") numChunks[96236] chunk[97965](97391 call .(97393 call locBlock[97298] parDim[96238]) c"_high")(97397 call .(97399 call locBlock[97298] parDim[96238]) c"_low")(97403 call .(97405 call locBlock[97298] parDim[96238]) c"_low"))
                    (97410 call _check_tuple_var_decl tmp[97379] 2)
                    const lo[97413] "const"(97415 call tmp[97379] 0)
                    const hi[97418] "const"(97420 call tmp[97379] 1)
                    (97423 'end of statement')
                    (97425 call =(97427 call followMe[97368] parDim[96238])(97430 call chpl_build_bounded_range lo[97413] hi[97418]))
                    const tmp[97434] "const" "temp"(97436 call _computeChunkStuff numSublocTasks[97273](ignoreRunning = 1) minIndicesPerTask[96130] followMe[97368])
                    (97444 call _check_tuple_var_decl tmp[97434] 2)
                    const numChunks2[97447] "const"(97449 call tmp[97434] 0)
                    const parDim2[97452] "const"(97454 call tmp[97434] 1)
                    (97457 'end of statement')
                    {
                      unknown tmpIter[97459] "expr temp" "maybe ref" "no copy" "temp"
                      (97461 'move' tmpIter[97459](97464 call #(97466 call chpl_build_low_bounded_range 0) numChunks2[97447]))
                      unknown isRngDomArr[97469] "maybe param" "temp"
                      (97471 'move' isRngDomArr[97469](97474 call ||(97476 call isBoundedRange tmpIter[97459])(97479 call ||(97481 call isDomain tmpIter[97459])(97484 call isArray tmpIter[97459]))))
                      if isRngDomArr[97469]
                      {
                        const _coforallCount[97488] "const" "end count" "temp"
                        (97490 'move' _coforallCount[97488](97493 call _endCountAlloc 1))
                        unknown numTasks[97495] "temp"
                        (97497 'move' numTasks[97495](97500 call . tmpIter[97459] c"size"))
                        (97504 call _upEndCount _coforallCount[97488] 1 numTasks[97495])
                        (97509 call chpl_resetTaskSpawn numTasks[97495])
                        unknown _indexOfInterest[97511] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[97513] "expr temp" "temp"
                        (97515 'move' _iterator[97513](97518 call _getIterator tmpIter[97459]))
                        Defer
                        {
                          {
                            (97522 call _freeIterator _iterator[97513])
                          }
                        }
                        { scopeless type
                          (97526 'move' _indexOfInterest[97511](97529 call iteratorIndex _iterator[97513]))
                        }
                        ForLoop[97531]
                        {
                          unknown chunk2[97534] "coforall index var" "index var" "insert auto destroy"
                          (97536 'move' chunk2[97534] _indexOfInterest[97511])
                          {
                            {
                              unknown locBlock2[97543](97545 call *(378847 call . this[100869] c"rank")(97548 call range[64316](?)(378852 call . this[100869] c"intIdxType")))
                              (97551 'end of statement')
                              {
                                unknown i[97553] 0
                                unknown tmp[97556] "maybe param" "temp"
                                (97558 'move' tmp[97556](97561 call chpl_compute_low_param_loop_bound 0(97564 call -(378857 call . this[100869] c"rank") 1)))
                                unknown tmp[97567] "maybe param" "temp"
                                (97569 'move' tmp[97567](97572 call chpl_compute_high_param_loop_bound 0(97575 call -(378862 call . this[100869] c"rank") 1)))
                                unknown tmp[97578] "maybe param" "temp"
                                (97580 'move' tmp[97578] 1)
                                ParamForLoop[97583]
                                { i[97553] tmp[97556] tmp[97567] tmp[97578]
                                  (97591 call =(97593 call locBlock2[97543] i[97553])(97596 call chpl_build_bounded_range(97598 call .(97600 call followMe[97368] i[97553]) c"low")(97604 call .(97606 call followMe[97368] i[97553]) c"high")))
                                }
                                label _unused_continueLabel[97609]
                                label _breakLabel[97611]
                              }
                              unknown followMe2[97614] locBlock2[97543](97617 call *(378874 call . this[100869] c"rank")(97620 call range[64316](?)(378879 call . this[100869] c"intIdxType")))
                              (97623 'end of statement')
                              const low[97625] "const"(97627 call .(97629 call locBlock2[97543] parDim2[97452]) c"_low")
                              const high[97633] "const"(97635 call .(97637 call locBlock2[97543] parDim2[97452]) c"_high")
                              (97641 'end of statement')
                              const tmp[97643] "const" "temp"(97645 call _computeBlock(97647 call .(97649 call locBlock2[97543] parDim2[97452]) c"size") numChunks2[97447] chunk2[97534] high[97633] low[97625] low[97625])
                              (97659 call _check_tuple_var_decl tmp[97643] 2)
                              const lo[97662] "const"(97664 call tmp[97643] 0)
                              const hi[97667] "const"(97669 call tmp[97643] 1)
                              (97672 'end of statement')
                              (97674 call =(97676 call followMe2[97614] parDim2[97452])(97679 call chpl_build_bounded_range lo[97662] hi[97667]))
                              if(97683 call _cond_test debugDataParNuma[93415])
                              {
                                (97687 call chpl_debug_writeln "### chunk = " chunk[97965] "  chunk2 = " chunk2[97534] "  " "followMe = " followMe[97368] "  followMe2 = " followMe2[97614])
                              }
                              (97698 yield followMe2[97614])
                            }
                            (97701 call _downEndCount _coforallCount[97488] nil[44])
                            (97540 'coforall loop')
                          }
                          label _continueLabel[97704]
                          _indexOfInterest[97511]
                          _iterator[97513]
                        }
                        label _breakLabel[97706]
                        Defer
                        {
                          {
                            (97710 call _endCountFree _coforallCount[97488])
                          }
                        }
                        (97714 call _waitEndCount _coforallCount[97488] 1 numTasks[97495])
                      }
                      {
                        const _coforallCount[97719] "const" "end count" "temp"
                        (97721 'move' _coforallCount[97719](97724 call _endCountAlloc 1))
                        unknown _indexOfInterest[97726] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[97728] "expr temp" "temp"
                        (97730 'move' _iterator[97728](97733 call _getIterator tmpIter[97459]))
                        Defer
                        {
                          {
                            (97737 call _freeIterator _iterator[97728])
                          }
                        }
                        { scopeless type
                          (97741 'move' _indexOfInterest[97726](97744 call iteratorIndex _iterator[97728]))
                        }
                        ForLoop[97746]
                        {
                          unknown chunk2[97749] "coforall index var" "index var" "insert auto destroy"
                          (97751 'move' chunk2[97749] _indexOfInterest[97726])
                          (97755 call _upEndCount _coforallCount[97719] 1)
                          {
                            {
                              unknown locBlock2[97762](97764 call *(378905 call . this[100869] c"rank")(97767 call range[64316](?)(378910 call . this[100869] c"intIdxType")))
                              (97770 'end of statement')
                              {
                                unknown i[97772] 0
                                unknown tmp[97775] "maybe param" "temp"
                                (97777 'move' tmp[97775](97780 call chpl_compute_low_param_loop_bound 0(97783 call -(378915 call . this[100869] c"rank") 1)))
                                unknown tmp[97786] "maybe param" "temp"
                                (97788 'move' tmp[97786](97791 call chpl_compute_high_param_loop_bound 0(97794 call -(378920 call . this[100869] c"rank") 1)))
                                unknown tmp[97797] "maybe param" "temp"
                                (97799 'move' tmp[97797] 1)
                                ParamForLoop[97802]
                                { i[97772] tmp[97775] tmp[97786] tmp[97797]
                                  (97810 call =(97812 call locBlock2[97762] i[97772])(97815 call chpl_build_bounded_range(97817 call .(97819 call followMe[97368] i[97772]) c"low")(97823 call .(97825 call followMe[97368] i[97772]) c"high")))
                                }
                                label _unused_continueLabel[97828]
                                label _breakLabel[97830]
                              }
                              unknown followMe2[97833] locBlock2[97762](97836 call *(378932 call . this[100869] c"rank")(97839 call range[64316](?)(378937 call . this[100869] c"intIdxType")))
                              (97842 'end of statement')
                              const low[97844] "const"(97846 call .(97848 call locBlock2[97762] parDim2[97452]) c"_low")
                              const high[97852] "const"(97854 call .(97856 call locBlock2[97762] parDim2[97452]) c"_high")
                              (97860 'end of statement')
                              const tmp[97862] "const" "temp"(97864 call _computeBlock(97866 call .(97868 call locBlock2[97762] parDim2[97452]) c"size") numChunks2[97447] chunk2[97749] high[97852] low[97844] low[97844])
                              (97878 call _check_tuple_var_decl tmp[97862] 2)
                              const lo[97881] "const"(97883 call tmp[97862] 0)
                              const hi[97886] "const"(97888 call tmp[97862] 1)
                              (97891 'end of statement')
                              (97893 call =(97895 call followMe2[97833] parDim2[97452])(97898 call chpl_build_bounded_range lo[97881] hi[97886]))
                              if(97902 call _cond_test debugDataParNuma[93415])
                              {
                                (97906 call chpl_debug_writeln "### chunk = " chunk[97965] "  chunk2 = " chunk2[97749] "  " "followMe = " followMe[97368] "  followMe2 = " followMe2[97833])
                              }
                              (97917 yield followMe2[97833])
                            }
                            (97920 call _downEndCount _coforallCount[97719] nil[44])
                            (97759 'coforall loop')
                          }
                          label _continueLabel[97923]
                          _indexOfInterest[97726]
                          _iterator[97728]
                        }
                        label _breakLabel[97925]
                        Defer
                        {
                          {
                            (97929 call _endCountFree _coforallCount[97719])
                          }
                        }
                        (97933 call _waitEndCount _coforallCount[97719] 1)
                      }
                    }
                  }
                  (97233 'elided on block' 0 tmp[97236])
                }
                (97941 call _downEndCount _coforallCount[97938] nil[44])
                (97940 'coforall loop')
              }
              label _continueLabel[97951]
              _indexOfInterest[97946]
              _iterator[97947]
            }
            label _breakLabel[97952]
            Defer
            {
              {
                (97994 call _endCountFree _coforallCount[97938])
              }
            }
            (97999 call _waitEndCount _coforallCount[97938] 1 numTasks[97939])
          }
          {
            const _coforallCount[98011] "const" "end count" "temp"
            (98068 'move' _coforallCount[98011](98065 call _endCountAlloc 1))
            unknown _indexOfInterest[98019] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98020] "expr temp" "temp"
            (98029 'move' _iterator[98020](98027 call _getIterator tmpIter[97226]))
            Defer
            {
              {
                (98045 call _freeIterator _iterator[98020])
              }
            }
            { scopeless type
              (98034 'move' _indexOfInterest[98019](98031 call iteratorIndex _iterator[98020]))
            }
            ForLoop[98021]
            {
              unknown chunk[98038] "coforall index var" "index var" "insert auto destroy"
              (98040 'move' chunk[98038] _indexOfInterest[98019])
              (98052 call _upEndCount _coforallCount[98011] 1)
              {
                {
                  const tmp[97216] "const" "temp"
                  (97217 'move' tmp[97216](97214 'deref'(97213 '_wide_get_locale'(96431 call(96426 call .(358574 call here[90439]) c"getChild") chunk[98038]))))
                  {
                    if(96456 call _cond_test debugDataParNuma[93415])
                    {
                      if(96450 call _cond_test(96437 call != chunk[98038](96436 call chpl_getSubloc)))
                      {
                        (96448 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[98038] ", on "(96446 call chpl_getSubloc) ") ***")
                      }
                    }
                    const numSublocTasks[96482] "const"(96479 IfExpr (96466 call < chunk[98038](96464 call % dptpl[96182] numChunks[96236])) then
                    { scopeless
                      (96473 call +(96470 call / dptpl[96182] numChunks[96236]) 1)
                    } else
                    { scopeless
                      (96477 call / dptpl[96182] numChunks[96236])
                    } )
                    (96485 'end of statement')
                    unknown locBlock[96493](96491 call *(378602 call . this[100869] c"rank")(96490 call range[64316](?)(378607 call . this[100869] c"intIdxType")))
                    (96496 'end of statement')
                    {
                      unknown i[96526] 0
                      unknown tmp[96527] "maybe param" "temp"
                      (96539 'move' tmp[96527](96537 call chpl_compute_low_param_loop_bound 0(96500 call -(378612 call . this[100869] c"rank") 1)))
                      unknown tmp[96528] "maybe param" "temp"
                      (96549 'move' tmp[96528](96547 call chpl_compute_high_param_loop_bound 0(96544 call -(378627 call . this[100869] c"rank") 1)))
                      unknown tmp[96529] "maybe param" "temp"
                      (96552 'move' tmp[96529] 1)
                      ParamForLoop[96554]
                      { i[96526] tmp[96527] tmp[96528] tmp[96529]
                        (96523 call =(96507 call locBlock[96493] i[96526])(96521 call #(96512 call chpl_build_low_bounded_range(96511 call offset[96142] i[96526]))(96518 call .(96517 call(378621 call . this[100869] c"ranges") i[96526]) c"size")))
                      }
                      label _unused_continueLabel[96531]
                      label _breakLabel[96530]
                    }
                    unknown followMe[96571] locBlock[96493](96568 call *(378632 call . this[100869] c"rank")(96567 call range[64316](?)(378637 call . this[100869] c"intIdxType")))
                    (96574 'end of statement')
                    const tmp[96613] "const" "temp"(96612 call _computeBlock(96585 call .(96584 call locBlock[96493] parDim[96238]) c"size") numChunks[96236] chunk[98038](96595 call .(96594 call locBlock[96493] parDim[96238]) c"_high")(96602 call .(96601 call locBlock[96493] parDim[96238]) c"_low")(96609 call .(96608 call locBlock[96493] parDim[96238]) c"_low"))
                    (96620 call _check_tuple_var_decl tmp[96613] 2)
                    const lo[96575] "const"(96614 call tmp[96613] 0)
                    const hi[96577] "const"(96617 call tmp[96613] 1)
                    (96625 'end of statement')
                    (96634 call =(96629 call followMe[96571] parDim[96238])(96632 call chpl_build_bounded_range lo[96575] hi[96577]))
                    const tmp[96650] "const" "temp"(96649 call _computeChunkStuff numSublocTasks[96482](ignoreRunning = 1) minIndicesPerTask[96130] followMe[96571])
                    (96657 call _check_tuple_var_decl tmp[96650] 2)
                    const numChunks2[96637] "const"(96651 call tmp[96650] 0)
                    const parDim2[96639] "const"(96654 call tmp[96650] 1)
                    (96662 'end of statement')
                    {
                      unknown tmpIter[96896] "expr temp" "maybe ref" "no copy" "temp"
                      (96899 'move' tmpIter[96896](96668 call #(96665 call chpl_build_low_bounded_range 0) numChunks2[96637]))
                      unknown isRngDomArr[97194] "maybe param" "temp"
                      (97209 'move' isRngDomArr[97194](97207 call ||(97196 call isBoundedRange tmpIter[96896])(97205 call ||(97199 call isDomain tmpIter[96896])(97202 call isArray tmpIter[96896]))))
                      if isRngDomArr[97194]
                      {
                        const _coforallCount[97061] "const" "end count" "temp"
                        (97130 'move' _coforallCount[97061](97127 call _endCountAlloc 1))
                        unknown numTasks[97062] "temp"
                        (97114 'move' numTasks[97062](97110 call . tmpIter[96896] c"size"))
                        (97105 call _upEndCount _coforallCount[97061] 1 numTasks[97062])
                        (97102 call chpl_resetTaskSpawn numTasks[97062])
                        unknown _indexOfInterest[97069] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[97070] "expr temp" "temp"
                        (97079 'move' _iterator[97070](97077 call _getIterator tmpIter[96896]))
                        Defer
                        {
                          {
                            (97095 call _freeIterator _iterator[97070])
                          }
                        }
                        { scopeless type
                          (97084 'move' _indexOfInterest[97069](97081 call iteratorIndex _iterator[97070]))
                        }
                        ForLoop[97071]
                        {
                          unknown chunk2[97088] "coforall index var" "index var" "insert auto destroy"
                          (97090 'move' chunk2[97088] _indexOfInterest[97069])
                          {
                            {
                              unknown locBlock2[96903](96905 call *(378719 call . this[100869] c"rank")(96908 call range[64316](?)(378724 call . this[100869] c"intIdxType")))
                              (96911 'end of statement')
                              {
                                unknown i[96913] 0
                                unknown tmp[96916] "maybe param" "temp"
                                (96918 'move' tmp[96916](96921 call chpl_compute_low_param_loop_bound 0(96924 call -(378729 call . this[100869] c"rank") 1)))
                                unknown tmp[96927] "maybe param" "temp"
                                (96929 'move' tmp[96927](96932 call chpl_compute_high_param_loop_bound 0(96935 call -(378734 call . this[100869] c"rank") 1)))
                                unknown tmp[96938] "maybe param" "temp"
                                (96940 'move' tmp[96938] 1)
                                ParamForLoop[96943]
                                { i[96913] tmp[96916] tmp[96927] tmp[96938]
                                  (96951 call =(96953 call locBlock2[96903] i[96913])(96956 call chpl_build_bounded_range(96958 call .(96960 call followMe[96571] i[96913]) c"low")(96964 call .(96966 call followMe[96571] i[96913]) c"high")))
                                }
                                label _unused_continueLabel[96969]
                                label _breakLabel[96971]
                              }
                              unknown followMe2[96974] locBlock2[96903](96977 call *(378746 call . this[100869] c"rank")(96980 call range[64316](?)(378751 call . this[100869] c"intIdxType")))
                              (96983 'end of statement')
                              const low[96985] "const"(96987 call .(96989 call locBlock2[96903] parDim2[96639]) c"_low")
                              const high[96993] "const"(96995 call .(96997 call locBlock2[96903] parDim2[96639]) c"_high")
                              (97001 'end of statement')
                              const tmp[97003] "const" "temp"(97005 call _computeBlock(97007 call .(97009 call locBlock2[96903] parDim2[96639]) c"size") numChunks2[96637] chunk2[97088] high[96993] low[96985] low[96985])
                              (97019 call _check_tuple_var_decl tmp[97003] 2)
                              const lo[97022] "const"(97024 call tmp[97003] 0)
                              const hi[97027] "const"(97029 call tmp[97003] 1)
                              (97032 'end of statement')
                              (97034 call =(97036 call followMe2[96974] parDim2[96639])(97039 call chpl_build_bounded_range lo[97022] hi[97027]))
                              if(97043 call _cond_test debugDataParNuma[93415])
                              {
                                (97047 call chpl_debug_writeln "### chunk = " chunk[98038] "  chunk2 = " chunk2[97088] "  " "followMe = " followMe[96571] "  followMe2 = " followMe2[96974])
                              }
                              (97058 yield followMe2[96974])
                            }
                            (97064 call _downEndCount _coforallCount[97061] nil[44])
                            (97063 'coforall loop')
                          }
                          label _continueLabel[97074]
                          _indexOfInterest[97069]
                          _iterator[97070]
                        }
                        label _breakLabel[97075]
                        Defer
                        {
                          {
                            (97117 call _endCountFree _coforallCount[97061])
                          }
                        }
                        (97122 call _waitEndCount _coforallCount[97061] 1 numTasks[97062])
                      }
                      {
                        const _coforallCount[97134] "const" "end count" "temp"
                        (97191 'move' _coforallCount[97134](97188 call _endCountAlloc 1))
                        unknown _indexOfInterest[97142] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[97143] "expr temp" "temp"
                        (97152 'move' _iterator[97143](97150 call _getIterator tmpIter[96896]))
                        Defer
                        {
                          {
                            (97168 call _freeIterator _iterator[97143])
                          }
                        }
                        { scopeless type
                          (97157 'move' _indexOfInterest[97142](97154 call iteratorIndex _iterator[97143]))
                        }
                        ForLoop[97144]
                        {
                          unknown chunk2[97161] "coforall index var" "index var" "insert auto destroy"
                          (97163 'move' chunk2[97161] _indexOfInterest[97142])
                          (97175 call _upEndCount _coforallCount[97134] 1)
                          {
                            {
                              unknown locBlock2[96677](96675 call *(378661 call . this[100869] c"rank")(96674 call range[64316](?)(378666 call . this[100869] c"intIdxType")))
                              (96680 'end of statement')
                              {
                                unknown i[96712] 0
                                unknown tmp[96713] "maybe param" "temp"
                                (96725 'move' tmp[96713](96723 call chpl_compute_low_param_loop_bound 0(96685 call -(378671 call . this[100869] c"rank") 1)))
                                unknown tmp[96714] "maybe param" "temp"
                                (96735 'move' tmp[96714](96733 call chpl_compute_high_param_loop_bound 0(96730 call -(378682 call . this[100869] c"rank") 1)))
                                unknown tmp[96715] "maybe param" "temp"
                                (96738 'move' tmp[96715] 1)
                                ParamForLoop[96740]
                                { i[96712] tmp[96713] tmp[96714] tmp[96715]
                                  (96709 call =(96692 call locBlock2[96677] i[96712])(96707 call chpl_build_bounded_range(96697 call .(96696 call followMe[96571] i[96712]) c"low")(96704 call .(96703 call followMe[96571] i[96712]) c"high")))
                                }
                                label _unused_continueLabel[96717]
                                label _breakLabel[96716]
                              }
                              unknown followMe2[96757] locBlock2[96677](96754 call *(378687 call . this[100869] c"rank")(96753 call range[64316](?)(378692 call . this[100869] c"intIdxType")))
                              (96760 'end of statement')
                              const low[96768] "const"(96765 call .(96764 call locBlock2[96677] parDim2[96639]) c"_low")
                              const high[96778] "const"(96775 call .(96774 call locBlock2[96677] parDim2[96639]) c"_high")
                              (96781 'end of statement')
                              const tmp[96802] "const" "temp"(96801 call _computeBlock(96792 call .(96791 call locBlock2[96677] parDim2[96639]) c"size") numChunks2[96637] chunk2[97161] high[96778] low[96768] low[96768])
                              (96809 call _check_tuple_var_decl tmp[96802] 2)
                              const lo[96782] "const"(96803 call tmp[96802] 0)
                              const hi[96784] "const"(96806 call tmp[96802] 1)
                              (96814 'end of statement')
                              (96823 call =(96818 call followMe2[96757] parDim2[96639])(96821 call chpl_build_bounded_range lo[96782] hi[96784]))
                              if(96889 call _cond_test debugDataParNuma[93415])
                              {
                                (96886 call chpl_debug_writeln "### chunk = " chunk[98038] "  chunk2 = " chunk2[97161] "  " "followMe = " followMe[96571] "  followMe2 = " followMe2[96757])
                              }
                              (96894 yield followMe2[96757])
                            }
                            (97137 call _downEndCount _coforallCount[97134] nil[44])
                            (97136 'coforall loop')
                          }
                          label _continueLabel[97147]
                          _indexOfInterest[97142]
                          _iterator[97143]
                        }
                        label _breakLabel[97148]
                        Defer
                        {
                          {
                            (97179 call _endCountFree _coforallCount[97134])
                          }
                        }
                        (97184 call _waitEndCount _coforallCount[97134] 1)
                      }
                    }
                  }
                  (97220 'elided on block' 0 tmp[97216])
                }
                (98014 call _downEndCount _coforallCount[98011] nil[44])
                (98013 'coforall loop')
              }
              label _continueLabel[98024]
              _indexOfInterest[98019]
              _iterator[98020]
            }
            label _breakLabel[98025]
            Defer
            {
              {
                (98056 call _endCountFree _coforallCount[98011])
              }
            }
            (98061 call _waitEndCount _coforallCount[98011] 1)
          }
        }
      }
    }
    {
      if(98117 call _cond_test debugDefaultDist[93400])
      {
        (98115 call chpl_debug_writeln "*** In domain/array leader code:")
      }
      const numTasks[98135] "const"(98132 IfExpr (98125 call == tasksPerLocale[96122] 0) then
      { scopeless
        (98128 call .(358578 call here[90439]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[96122]
      } )
      (98138 'end of statement')
      if(98150 call _cond_test debugDefaultDist[93400])
      {
        (98148 call chpl_debug_writeln "    numTasks=" numTasks[98135] " (" ignoreRunning[96126] "), minIndicesPerTask=" minIndicesPerTask[96130])
      }
      const tmp[98180] "const" "temp"(98177 IfExpr (98162 'task_get_serial') then
      { scopeless
        (98168 call _build_tuple 1(98165 call - 1))
      } else
      { scopeless
        (98176 call _computeChunkStuff numTasks[98135] ignoreRunning[96126] minIndicesPerTask[96130](378973 call . this[100869] c"ranges"))
      } )
      (98187 call _check_tuple_var_decl tmp[98180] 2)
      const numChunks[98155] "const"(98181 call tmp[98180] 0)
      const parDim[98157] "const"(98184 call tmp[98180] 1)
      (98192 'end of statement')
      if(98212 call _cond_test debugDefaultDist[93400])
      {
        (98210 call chpl_debug_writeln "    numChunks=" numChunks[98155] " parDim=" parDim[98157] " ranges(" parDim[98157] ").size="(98207 call .(98206 call(378982 call . this[100869] c"ranges") parDim[98157]) c"size"))
      }
      if(98239 call _cond_test debugDataPar[93410])
      {
        (98236 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[98135] "\n" "### ignoreRunning = " ignoreRunning[96126] "\n" "### minIndicesPerTask = " minIndicesPerTask[96130] "\n" "### numChunks = " numChunks[98155] " (parDim = " parDim[98157] ")\n" "### nranges = "(378994 call . this[100869] c"ranges"))
      }
      if(98817 call _cond_test(98245 call == numChunks[98155] 1))
      {
        if(98352 call _cond_test(98249 call ==(379000 call . this[100869] c"rank") 1))
        {
          (98268 yield(98266 call _build_tuple(98264 call #(98255 call chpl_build_low_bounded_range(98254 call offset[96142] 0))(98261 call .(98260 call(379006 call . this[100869] c"ranges") 0) c"size"))))
        }
        {
          unknown block[98278](98276 call *(379011 call . this[100869] c"rank")(98275 call range[64316](?)(379016 call . this[100869] c"intIdxType")))
          (98281 'end of statement')
          {
            unknown i[98312] 0
            unknown tmp[98313] "maybe param" "temp"
            (98325 'move' tmp[98313](98323 call chpl_compute_low_param_loop_bound 0(98286 call -(379021 call . this[100869] c"rank") 1)))
            unknown tmp[98314] "maybe param" "temp"
            (98335 'move' tmp[98314](98333 call chpl_compute_high_param_loop_bound 0(98330 call -(379036 call . this[100869] c"rank") 1)))
            unknown tmp[98315] "maybe param" "temp"
            (98338 'move' tmp[98315] 1)
            ParamForLoop[98340]
            { i[98312] tmp[98313] tmp[98314] tmp[98315]
              (98309 call =(98293 call block[98278] i[98312])(98307 call #(98298 call chpl_build_low_bounded_range(98297 call offset[96142] i[98312]))(98304 call .(98303 call(379030 call . this[100869] c"ranges") i[98312]) c"size")))
            }
            label _unused_continueLabel[98317]
            label _breakLabel[98316]
          }
          (98350 yield block[98278])
        }
      }
      {
        unknown locBlock[98364](98362 call *(379042 call . this[100869] c"rank")(98361 call range[64316](?)(379047 call . this[100869] c"intIdxType")))
        (98367 'end of statement')
        {
          unknown i[98398] 0
          unknown tmp[98399] "maybe param" "temp"
          (98411 'move' tmp[98399](98409 call chpl_compute_low_param_loop_bound 0(98372 call -(379052 call . this[100869] c"rank") 1)))
          unknown tmp[98400] "maybe param" "temp"
          (98421 'move' tmp[98400](98419 call chpl_compute_high_param_loop_bound 0(98416 call -(379067 call . this[100869] c"rank") 1)))
          unknown tmp[98401] "maybe param" "temp"
          (98424 'move' tmp[98401] 1)
          ParamForLoop[98426]
          { i[98398] tmp[98399] tmp[98400] tmp[98401]
            (98395 call =(98379 call locBlock[98364] i[98398])(98393 call #(98384 call chpl_build_low_bounded_range(98383 call offset[96142] i[98398]))(98390 call .(98389 call(379061 call . this[100869] c"ranges") i[98398]) c"size")))
          }
          label _unused_continueLabel[98403]
          label _breakLabel[98402]
        }
        if(98458 call _cond_test debugDefaultDist[93400])
        {
          (98456 call chpl_debug_writeln "*** DI: locBlock = " locBlock[98364])
        }
        {
          unknown tmpIter[98578] "expr temp" "maybe ref" "no copy" "temp"
          (98581 'move' tmpIter[98578](98468 call #(98465 call chpl_build_low_bounded_range 0) numChunks[98155]))
          unknown isRngDomArr[98798] "maybe param" "temp"
          (98813 'move' isRngDomArr[98798](98811 call ||(98800 call isBoundedRange tmpIter[98578])(98809 call ||(98803 call isDomain tmpIter[98578])(98806 call isArray tmpIter[98578]))))
          if isRngDomArr[98798]
          {
            const _coforallCount[98665] "const" "end count" "temp"
            (98734 'move' _coforallCount[98665](98731 call _endCountAlloc 1))
            unknown numTasks[98666] "temp"
            (98718 'move' numTasks[98666](98714 call . tmpIter[98578] c"size"))
            (98709 call _upEndCount _coforallCount[98665] 1 numTasks[98666])
            (98706 call chpl_resetTaskSpawn numTasks[98666])
            unknown _indexOfInterest[98673] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98674] "expr temp" "temp"
            (98683 'move' _iterator[98674](98681 call _getIterator tmpIter[98578]))
            Defer
            {
              {
                (98699 call _freeIterator _iterator[98674])
              }
            }
            { scopeless type
              (98688 'move' _indexOfInterest[98673](98685 call iteratorIndex _iterator[98674]))
            }
            ForLoop[98675]
            {
              unknown chunk[98692] "coforall index var" "index var" "insert auto destroy"
              (98694 'move' chunk[98692] _indexOfInterest[98673])
              {
                {
                  unknown followMe[98585] locBlock[98364](98588 call *(379105 call . this[100869] c"rank")(98591 call range[64316](?)(379110 call . this[100869] c"intIdxType")))
                  (98594 'end of statement')
                  const tmp[98596] "const" "temp"(98598 call _computeBlock(98600 call .(98602 call locBlock[98364] parDim[98157]) c"size") numChunks[98155] chunk[98692](98608 call .(98610 call locBlock[98364] parDim[98157]) c"_high")(98614 call .(98616 call locBlock[98364] parDim[98157]) c"_low")(98620 call .(98622 call locBlock[98364] parDim[98157]) c"_low"))
                  (98627 call _check_tuple_var_decl tmp[98596] 2)
                  const lo[98630] "const"(98632 call tmp[98596] 0)
                  const hi[98635] "const"(98637 call tmp[98596] 1)
                  (98640 'end of statement')
                  (98642 call =(98644 call followMe[98585] parDim[98157])(98647 call chpl_build_bounded_range lo[98630] hi[98635]))
                  if(98651 call _cond_test debugDefaultDist[93400])
                  {
                    (98656 call chpl_debug_writeln "*** DI[" chunk[98692] "]: followMe = " followMe[98585])
                  }
                  (98662 yield followMe[98585])
                }
                (98668 call _downEndCount _coforallCount[98665] nil[44])
                (98667 'coforall loop')
              }
              label _continueLabel[98678]
              _indexOfInterest[98673]
              _iterator[98674]
            }
            label _breakLabel[98679]
            Defer
            {
              {
                (98721 call _endCountFree _coforallCount[98665])
              }
            }
            (98726 call _waitEndCount _coforallCount[98665] 1 numTasks[98666])
          }
          {
            const _coforallCount[98738] "const" "end count" "temp"
            (98795 'move' _coforallCount[98738](98792 call _endCountAlloc 1))
            unknown _indexOfInterest[98746] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[98747] "expr temp" "temp"
            (98756 'move' _iterator[98747](98754 call _getIterator tmpIter[98578]))
            Defer
            {
              {
                (98772 call _freeIterator _iterator[98747])
              }
            }
            { scopeless type
              (98761 'move' _indexOfInterest[98746](98758 call iteratorIndex _iterator[98747]))
            }
            ForLoop[98748]
            {
              unknown chunk[98765] "coforall index var" "index var" "insert auto destroy"
              (98767 'move' chunk[98765] _indexOfInterest[98746])
              (98779 call _upEndCount _coforallCount[98738] 1)
              {
                {
                  unknown followMe[98478] locBlock[98364](98475 call *(379075 call . this[100869] c"rank")(98474 call range[64316](?)(379080 call . this[100869] c"intIdxType")))
                  (98481 'end of statement')
                  const tmp[98521] "const" "temp"(98520 call _computeBlock(98493 call .(98492 call locBlock[98364] parDim[98157]) c"size") numChunks[98155] chunk[98765](98503 call .(98502 call locBlock[98364] parDim[98157]) c"_high")(98510 call .(98509 call locBlock[98364] parDim[98157]) c"_low")(98517 call .(98516 call locBlock[98364] parDim[98157]) c"_low"))
                  (98528 call _check_tuple_var_decl tmp[98521] 2)
                  const lo[98483] "const"(98522 call tmp[98521] 0)
                  const hi[98485] "const"(98525 call tmp[98521] 1)
                  (98533 'end of statement')
                  (98542 call =(98537 call followMe[98478] parDim[98157])(98540 call chpl_build_bounded_range lo[98483] hi[98485]))
                  if(98570 call _cond_test debugDefaultDist[93400])
                  {
                    (98568 call chpl_debug_writeln "*** DI[" chunk[98765] "]: followMe = " followMe[98478])
                  }
                  (98576 yield followMe[98478])
                }
                (98741 call _downEndCount _coforallCount[98738] nil[44])
                (98740 'coforall loop')
              }
              label _continueLabel[98751]
              _indexOfInterest[98746]
              _iterator[98747]
            }
            label _breakLabel[98752]
            Defer
            {
              {
                (98783 call _endCountFree _coforallCount[98738])
              }
            }
            (98788 call _waitEndCount _coforallCount[98738] 1)
          }
        }
      }
    }
  }
  where {
    (96150 call == tag[96116] leader[447])
  }
  function DefaultRectangularDom[100799](?).these[98834](arg _mt[100875]:_MT[238], arg this[100873]:DefaultRectangularDom[100799](?), param arg tag[98831] :
  iterKind[453], arg followThis[98836]:_any[178](?), arg tasksPerLocale[98839] =
  dataParTasksPerLocale[93289], arg ignoreRunning[98843] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[98847] =
  dataParMinGranularity[93301], arg offset[98859] =
  (98858 call createTuple(379137 call . this[100873] c"rank")(379141 call . this[100873] c"intIdxType")(98856 call _cast(379145 call . this[100873] c"intIdxType") 0))) : _unknown[51] "iterator fn" "method" "primary method"
  {
    function anyStridable[98873](arg rangeTuple[98871]:_any[178](?), param arg i[98877] :
    int(64)[13] =
    0) param : _unknown[51]
    {
      (98918 return(98915 IfExpr (98889 call == i[98877](98887 call -(98883 call . rangeTuple[98871] c"size") 1)) then
      { scopeless
        (98895 call .(98894 call rangeTuple[98871] i[98877]) c"stridable")
      } else
      { scopeless
        (98913 call ||(98902 call .(98901 call rangeTuple[98871] i[98877]) c"stridable")(98912 call anyStridable rangeTuple[98871](98910 call + i[98877] 1)))
      } ))
    }
    if(98947 call _cond_test chpl__testParFlag[188312])
    {
      (98945 call chpl__testPar "default rectangular domain follower invoked on " followThis[98836])
    }
    if(98975 call _cond_test debugDefaultDist[93400])
    {
      (98973 call chpl_debug_writeln "In domain follower code: Following " followThis[98836])
    }
    unknown stridable[98990] "param"(98988 call ||(98981 call . this[100873] c"stridable")(98987 call anyStridable followThis[98836]))
    (98993 'end of statement')
    unknown block[99004](99002 call *(379163 call . this[100873] c"rank")(99001 call range[64316](?)(idxType =(379168 call . this[100873] c"intIdxType"))(stridable = stridable[98990])))
    (99007 'end of statement')
    if(99352 call _cond_test stridable[98990])
    {
      unknown strType[99013] "type variable"(99012 call chpl__signedType(379174 call . this[100873] c"intIdxType"))
      {
        unknown i[99223] 0
        unknown tmp[99224] "maybe param" "temp"
        (99236 'move' tmp[99224](99234 call chpl_compute_low_param_loop_bound 0(99020 call -(379179 call . this[100873] c"rank") 1)))
        unknown tmp[99225] "maybe param" "temp"
        (99246 'move' tmp[99225](99244 call chpl_compute_high_param_loop_bound 0(99241 call -(379258 call . this[100873] c"rank") 1)))
        unknown tmp[99226] "maybe param" "temp"
        (99249 'move' tmp[99226] 1)
        ParamForLoop[99251]
        { i[99223] tmp[99224] tmp[99225] tmp[99226]
          {
            const rStride[99031] "const"(99028 call .(99027 call(379184 call . this[100873] c"ranges") i[99223]) c"stride")
            (99034 'end of statement')
            const rSignedStride[99040] "const"(99038 call _cast strType[99013] rStride[99031])
            const fSignedStride[99053] "const"(99051 call _cast strType[99013](99047 call .(99046 call followThis[98836] i[99223]) c"stride"))
            (99056 'end of statement')
            if(99219 call _cond_test(99059 call > rStride[99031] 0))
            {
              const riStride[99065] "const"(99063 call _cast(379196 call . this[100873] c"intIdxType") rStride[99031])
              (99068 'end of statement')
              const low[99089] "const"(99087 call +(99074 call .(99073 call(379201 call . this[100873] c"ranges") i[99223]) c"alignedLowAsInt")(99085 call *(99081 call .(99080 call followThis[98836] i[99223]) c"low") riStride[99065]))
              const high[99111] "const"(99109 call +(99096 call .(99095 call(379210 call . this[100873] c"ranges") i[99223]) c"alignedLowAsInt")(99107 call *(99103 call .(99102 call followThis[98836] i[99223]) c"high") riStride[99065]))
              const stride[99121] "const"(99119 call _cast strType[99013](99116 call * rSignedStride[99040] fSignedStride[99053]))
              (99124 'end of statement')
              (99136 call =(99128 call block[99004] i[99223])(99134 call chpl_by(99131 call chpl_build_bounded_range low[99089] high[99111]) stride[99121]))
            }
            {
              const irStride[99145] "const"(99143 call _cast(379227 call . this[100873] c"intIdxType")(99140 call - rStride[99031]))
              (99148 'end of statement')
              const low[99169] "const"(99167 call -(99154 call .(99153 call(379232 call . this[100873] c"ranges") i[99223]) c"alignedHighAsInt")(99165 call *(99161 call .(99160 call followThis[98836] i[99223]) c"high") irStride[99145]))
              const high[99191] "const"(99189 call -(99176 call .(99175 call(379241 call . this[100873] c"ranges") i[99223]) c"alignedHighAsInt")(99187 call *(99183 call .(99182 call followThis[98836] i[99223]) c"low") irStride[99145]))
              const stride[99201] "const"(99199 call _cast strType[99013](99196 call * rSignedStride[99040] fSignedStride[99053]))
              (99204 'end of statement')
              (99216 call =(99208 call block[99004] i[99223])(99214 call chpl_by(99211 call chpl_build_bounded_range low[99169] high[99191]) stride[99201]))
            }
          }
        }
        label _unused_continueLabel[99228]
        label _breakLabel[99227]
      }
    }
    {
      {
        unknown i[99314] 0
        unknown tmp[99315] "maybe param" "temp"
        (99327 'move' tmp[99315](99325 call chpl_compute_low_param_loop_bound 0(99263 call -(379263 call . this[100873] c"rank") 1)))
        unknown tmp[99316] "maybe param" "temp"
        (99337 'move' tmp[99316](99335 call chpl_compute_high_param_loop_bound 0(99332 call -(379294 call . this[100873] c"rank") 1)))
        unknown tmp[99317] "maybe param" "temp"
        (99340 'move' tmp[99317] 1)
        ParamForLoop[99342]
        { i[99314] tmp[99315] tmp[99316] tmp[99317]
          (99311 call =(99270 call block[99004] i[99314])(99309 call chpl_build_bounded_range(99288 call +(99275 call .(99274 call(379270 call . this[100873] c"ranges") i[99314]) c"_low")(99286 call _cast(379277 call . this[100873] c"intIdxType")(99282 call .(99281 call followThis[98836] i[99314]) c"low")))(99307 call +(99294 call .(99293 call(379282 call . this[100873] c"ranges") i[99314]) c"_low")(99305 call _cast(379289 call . this[100873] c"intIdxType")(99301 call .(99300 call followThis[98836] i[99314]) c"high")))))
        }
        label _unused_continueLabel[99319]
        label _breakLabel[99318]
      }
    }
    if(99453 call _cond_test(99358 call ==(379299 call . this[100873] c"rank") 1))
    {
      {
        unknown _indexOfInterest[99372] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99373] "expr temp" "temp"
        (99381 'move' _iterator[99373](99364 call _getIteratorZip block[99004]))
        Defer
        {
          {
            (99397 call _freeIterator _iterator[99373])
          }
        }
        { scopeless type
          (99386 'move' _indexOfInterest[99372](99383 call iteratorIndex _iterator[99373]))
        }
        ForLoop[99374]
        {
          unknown i[99390] "index var" "insert auto destroy"
          (99392 'move' i[99390] _indexOfInterest[99372])
          {
            (99369 yield(99368 call(379304 call . this[100873] c"chpl_intToIdx") i[99390]))
          }
          label _continueLabel[99377]
          _indexOfInterest[99372]
          _iterator[99373]
        }
        label _breakLabel[99378]
      }
    }
    {
      {
        unknown _indexOfInterest[99418] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[99419] "expr temp" "temp"
        (99428 'move' _iterator[99419](99426 call _getIterator(99410 call(379309 call . this[100873] c"these_help") 0 block[99004])))
        Defer
        {
          {
            (99445 call _freeIterator _iterator[99419])
          }
        }
        { scopeless type
          (99434 'move' _indexOfInterest[99418](99431 call iteratorIndex _iterator[99419]))
        }
        ForLoop[99420]
        {
          unknown i[99438] "index var" "insert auto destroy"
          (99440 'move' i[99438] _indexOfInterest[99418])
          {
            (99415 yield(99414 call(379314 call . this[100873] c"chpl_intToIdx") i[99438]))
          }
          label _continueLabel[99423]
          _indexOfInterest[99418]
          _iterator[99419]
        }
        label _breakLabel[99424]
      }
    }
  }
  where {
    (98867 call == tag[98831] follower[449])
  }
  function DefaultRectangularDom[100799](?).dsiMember[99469](arg _mt[100879]:_MT[238], arg this[100877]:DefaultRectangularDom[100799](?), arg ind[99466] :
  (99464 call *(379320 call . this[100877] c"rank")(379325 call . this[100877] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    {
      unknown i[99501] 0
      unknown tmp[99502] "maybe param" "temp"
      (99514 'move' tmp[99502](99512 call chpl_compute_low_param_loop_bound 0(99474 call -(379330 call . this[100877] c"rank") 1)))
      unknown tmp[99503] "maybe param" "temp"
      (99524 'move' tmp[99503](99522 call chpl_compute_high_param_loop_bound 0(99519 call -(379343 call . this[100877] c"rank") 1)))
      unknown tmp[99504] "maybe param" "temp"
      (99527 'move' tmp[99504] 1)
      ParamForLoop[99529]
      { i[99501] tmp[99502] tmp[99503] tmp[99504]
        if(99496 call _cond_test(99491 call !(99490 call(99482 call .(99481 call(379335 call . this[100877] c"ranges") i[99501]) c"contains")(99488 call ind[99466] i[99501]))))
        {
          (99494 return 0)
        }
      }
      label _unused_continueLabel[99506]
      label _breakLabel[99505]
    }
    (99540 return 1)
  }
  function DefaultRectangularDom[100799](?).dsiIndexOrder[99553](arg _mt[100883]:_MT[238], arg this[100881]:DefaultRectangularDom[100799](?), arg ind[99550] :
  (99548 call *(379348 call . this[100881] c"rank")(379353 call . this[100881] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    unknown totOrder[99556](379357 call . this[100881] c"intIdxType")
    (99559 'end of statement')
    unknown blk[99563] 1(379361 call . this[100881] c"intIdxType")
    (99566 'end of statement')
    {
      unknown d[99635] 0
      unknown tmp[99636] "maybe param" "temp"
      (99647 'move' tmp[99636](99645 call chpl_compute_low_param_loop_bound 0(99570 call -(379366 call . this[100881] c"rank") 1)))
      unknown tmp[99637] "maybe param" "temp"
      (99657 'move' tmp[99637](99655 call chpl_compute_high_param_loop_bound 0(99652 call -(379395 call . this[100881] c"rank") 1)))
      unknown tmp[99638] "maybe param" "temp"
      (99660 'move' tmp[99638](99575 call - 1))
      ParamForLoop[99662]
      { d[99635] tmp[99636] tmp[99637] tmp[99638]
        {
          const orderD[99594] "const"(99593 call(99585 call .(99582 call(379371 call . this[100881] c"ranges") d[99635]) c"indexOrder")(99591 call ind[99550] d[99635]))
          (99597 'end of statement')
          if(99611 call _cond_test(99606 call == orderD[99594](99604 call _cast(379379 call . this[100881] c"intIdxType")(99601 call - 1))))
          {
            (99609 return orderD[99594])
          }
          (99621 call += totOrder[99556](99619 call * orderD[99594] blk[99563]))
          (99632 call *= blk[99563](99629 call .(99628 call(379389 call . this[100881] c"ranges") d[99635]) c"size"))
        }
      }
      label _unused_continueLabel[99640]
      label _breakLabel[99639]
    }
    (99672 return totOrder[99556])
  }
  function DefaultRectangularDom[100799](?).dsiDims[99678](arg _mt[100887]:_MT[238], arg this[100885]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method"
  {
    (99681 return(379401 call . this[100885] c"ranges"))
  }
  function DefaultRectangularDom[100799](?).dsiDim[99692](arg _mt[100891]:_MT[238], arg this[100889]:DefaultRectangularDom[100799](?), arg d[99689] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (99698 return(99697 call(379406 call . this[100889] c"ranges") d[99689]))
  }
  function DefaultRectangularDom[100799](?).dsiDim[99709](arg _mt[100895]:_MT[238], arg this[100893]:DefaultRectangularDom[100799](?), param arg d[99706] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (99715 return(99714 call(379412 call . this[100893] c"ranges") d[99706]))
  }
  function DefaultRectangularDom[100799](?).dsiNumIndices[99722](arg _mt[100899]:_MT[238], arg this[100897]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown sum[99728](99726 call _cast(379417 call . this[100897] c"intIdxType") 1)
    (99731 'end of statement')
    {
      unknown i[99751] 0
      unknown tmp[99752] "maybe param" "temp"
      (99764 'move' tmp[99752](99762 call chpl_compute_low_param_loop_bound 0(99736 call -(379422 call . this[100897] c"rank") 1)))
      unknown tmp[99753] "maybe param" "temp"
      (99774 'move' tmp[99753](99772 call chpl_compute_high_param_loop_bound 0(99769 call -(379434 call . this[100897] c"rank") 1)))
      unknown tmp[99754] "maybe param" "temp"
      (99777 'move' tmp[99754] 1)
      ParamForLoop[99779]
      { i[99751] tmp[99752] tmp[99753] tmp[99754]
        (99748 call *= sum[99728](99745 call .(99744 call(379428 call . this[100897] c"ranges") i[99751]) c"size"))
      }
      label _unused_continueLabel[99756]
      label _breakLabel[99755]
    }
    (99789 return sum[99728])
  }
  function DefaultRectangularDom[100799](?).dsiLow[99795](arg _mt[100903]:_MT[238], arg this[100901]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99881 call _cond_test(99799 call ==(379440 call . this[100901] c"rank") 1))
    {
      (99808 return(99805 call .(99804 call(379445 call . this[100901] c"ranges") 0) c"low"))
    }
    {
      unknown result[99815](99813 call *(379450 call . this[100901] c"rank")(379455 call . this[100901] c"idxType"))
      (99818 'end of statement')
      {
        unknown i[99841] 0
        unknown tmp[99842] "maybe param" "temp"
        (99854 'move' tmp[99842](99852 call chpl_compute_low_param_loop_bound 0(99823 call -(379460 call . this[100901] c"rank") 1)))
        unknown tmp[99843] "maybe param" "temp"
        (99864 'move' tmp[99843](99862 call chpl_compute_high_param_loop_bound 0(99859 call -(379473 call . this[100901] c"rank") 1)))
        unknown tmp[99844] "maybe param" "temp"
        (99867 'move' tmp[99844] 1)
        ParamForLoop[99869]
        { i[99841] tmp[99842] tmp[99843] tmp[99844]
          (99838 call =(99830 call result[99815] i[99841])(99835 call .(99834 call(379467 call . this[100901] c"ranges") i[99841]) c"low"))
        }
        label _unused_continueLabel[99846]
        label _breakLabel[99845]
      }
      (99879 return result[99815])
    }
  }
  function DefaultRectangularDom[100799](?).dsiHigh[99890](arg _mt[100907]:_MT[238], arg this[100905]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(99976 call _cond_test(99894 call ==(379479 call . this[100905] c"rank") 1))
    {
      (99903 return(99900 call .(99899 call(379484 call . this[100905] c"ranges") 0) c"high"))
    }
    {
      unknown result[99910](99908 call *(379489 call . this[100905] c"rank")(379494 call . this[100905] c"idxType"))
      (99913 'end of statement')
      {
        unknown i[99936] 0
        unknown tmp[99937] "maybe param" "temp"
        (99949 'move' tmp[99937](99947 call chpl_compute_low_param_loop_bound 0(99918 call -(379499 call . this[100905] c"rank") 1)))
        unknown tmp[99938] "maybe param" "temp"
        (99959 'move' tmp[99938](99957 call chpl_compute_high_param_loop_bound 0(99954 call -(379512 call . this[100905] c"rank") 1)))
        unknown tmp[99939] "maybe param" "temp"
        (99962 'move' tmp[99939] 1)
        ParamForLoop[99964]
        { i[99936] tmp[99937] tmp[99938] tmp[99939]
          (99933 call =(99925 call result[99910] i[99936])(99930 call .(99929 call(379506 call . this[100905] c"ranges") i[99936]) c"high"))
        }
        label _unused_continueLabel[99941]
        label _breakLabel[99940]
      }
      (99974 return result[99910])
    }
  }
  function DefaultRectangularDom[100799](?).dsiAlignedLow[99985](arg _mt[100911]:_MT[238], arg this[100909]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100071 call _cond_test(99989 call ==(379518 call . this[100909] c"rank") 1))
    {
      (99998 return(99995 call .(99994 call(379523 call . this[100909] c"ranges") 0) c"alignedLow"))
    }
    {
      unknown result[100005](100003 call *(379528 call . this[100909] c"rank")(379533 call . this[100909] c"idxType"))
      (100008 'end of statement')
      {
        unknown i[100031] 0
        unknown tmp[100032] "maybe param" "temp"
        (100044 'move' tmp[100032](100042 call chpl_compute_low_param_loop_bound 0(100013 call -(379538 call . this[100909] c"rank") 1)))
        unknown tmp[100033] "maybe param" "temp"
        (100054 'move' tmp[100033](100052 call chpl_compute_high_param_loop_bound 0(100049 call -(379551 call . this[100909] c"rank") 1)))
        unknown tmp[100034] "maybe param" "temp"
        (100057 'move' tmp[100034] 1)
        ParamForLoop[100059]
        { i[100031] tmp[100032] tmp[100033] tmp[100034]
          (100028 call =(100020 call result[100005] i[100031])(100025 call .(100024 call(379545 call . this[100909] c"ranges") i[100031]) c"alignedLow"))
        }
        label _unused_continueLabel[100036]
        label _breakLabel[100035]
      }
      (100069 return result[100005])
    }
  }
  function DefaultRectangularDom[100799](?).dsiAlignedHigh[100080](arg _mt[100915]:_MT[238], arg this[100913]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100166 call _cond_test(100084 call ==(379557 call . this[100913] c"rank") 1))
    {
      (100093 return(100090 call .(100089 call(379562 call . this[100913] c"ranges") 0) c"alignedHigh"))
    }
    {
      unknown result[100100](100098 call *(379567 call . this[100913] c"rank")(379572 call . this[100913] c"idxType"))
      (100103 'end of statement')
      {
        unknown i[100126] 0
        unknown tmp[100127] "maybe param" "temp"
        (100139 'move' tmp[100127](100137 call chpl_compute_low_param_loop_bound 0(100108 call -(379577 call . this[100913] c"rank") 1)))
        unknown tmp[100128] "maybe param" "temp"
        (100149 'move' tmp[100128](100147 call chpl_compute_high_param_loop_bound 0(100144 call -(379590 call . this[100913] c"rank") 1)))
        unknown tmp[100129] "maybe param" "temp"
        (100152 'move' tmp[100129] 1)
        ParamForLoop[100154]
        { i[100126] tmp[100127] tmp[100128] tmp[100129]
          (100123 call =(100115 call result[100100] i[100126])(100120 call .(100119 call(379584 call . this[100913] c"ranges") i[100126]) c"alignedHigh"))
        }
        label _unused_continueLabel[100131]
        label _breakLabel[100130]
      }
      (100164 return result[100100])
    }
  }
  function DefaultRectangularDom[100799](?).dsiStride[100175](arg _mt[100919]:_MT[238], arg this[100917]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100264 call _cond_test(100179 call ==(379596 call . this[100917] c"rank") 1))
    {
      (100188 return(100185 call .(100184 call(379601 call . this[100917] c"ranges") 0) c"stride"))
    }
    {
      unknown result[100198](100196 call *(379606 call . this[100917] c"rank")(100195 call chpl__signedType(379610 call . this[100917] c"intIdxType")))
      (100201 'end of statement')
      {
        unknown i[100224] 0
        unknown tmp[100225] "maybe param" "temp"
        (100237 'move' tmp[100225](100235 call chpl_compute_low_param_loop_bound 0(100206 call -(379615 call . this[100917] c"rank") 1)))
        unknown tmp[100226] "maybe param" "temp"
        (100247 'move' tmp[100226](100245 call chpl_compute_high_param_loop_bound 0(100242 call -(379628 call . this[100917] c"rank") 1)))
        unknown tmp[100227] "maybe param" "temp"
        (100250 'move' tmp[100227] 1)
        ParamForLoop[100252]
        { i[100224] tmp[100225] tmp[100226] tmp[100227]
          (100221 call =(100213 call result[100198] i[100224])(100218 call .(100217 call(379622 call . this[100917] c"ranges") i[100224]) c"stride"))
        }
        label _unused_continueLabel[100229]
        label _breakLabel[100228]
      }
      (100262 return result[100198])
    }
  }
  function DefaultRectangularDom[100799](?).dsiAlignment[100273](arg _mt[100923]:_MT[238], arg this[100921]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100359 call _cond_test(100277 call ==(379634 call . this[100921] c"rank") 1))
    {
      (100286 return(100283 call .(100282 call(379639 call . this[100921] c"ranges") 0) c"alignment"))
    }
    {
      unknown result[100293](100291 call *(379644 call . this[100921] c"rank")(379649 call . this[100921] c"idxType"))
      (100296 'end of statement')
      {
        unknown i[100319] 0
        unknown tmp[100320] "maybe param" "temp"
        (100332 'move' tmp[100320](100330 call chpl_compute_low_param_loop_bound 0(100301 call -(379654 call . this[100921] c"rank") 1)))
        unknown tmp[100321] "maybe param" "temp"
        (100342 'move' tmp[100321](100340 call chpl_compute_high_param_loop_bound 0(100337 call -(379667 call . this[100921] c"rank") 1)))
        unknown tmp[100322] "maybe param" "temp"
        (100345 'move' tmp[100322] 1)
        ParamForLoop[100347]
        { i[100319] tmp[100320] tmp[100321] tmp[100322]
          (100316 call =(100308 call result[100293] i[100319])(100313 call .(100312 call(379661 call . this[100921] c"ranges") i[100319]) c"alignment"))
        }
        label _unused_continueLabel[100324]
        label _breakLabel[100323]
      }
      (100357 return result[100293])
    }
  }
  function DefaultRectangularDom[100799](?).dsiFirst[100368](arg _mt[100927]:_MT[238], arg this[100925]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100454 call _cond_test(100372 call ==(379673 call . this[100925] c"rank") 1))
    {
      (100381 return(100378 call .(100377 call(379678 call . this[100925] c"ranges") 0) c"first"))
    }
    {
      unknown result[100388](100386 call *(379683 call . this[100925] c"rank")(379688 call . this[100925] c"idxType"))
      (100391 'end of statement')
      {
        unknown i[100414] 0
        unknown tmp[100415] "maybe param" "temp"
        (100427 'move' tmp[100415](100425 call chpl_compute_low_param_loop_bound 0(100396 call -(379693 call . this[100925] c"rank") 1)))
        unknown tmp[100416] "maybe param" "temp"
        (100437 'move' tmp[100416](100435 call chpl_compute_high_param_loop_bound 0(100432 call -(379706 call . this[100925] c"rank") 1)))
        unknown tmp[100417] "maybe param" "temp"
        (100440 'move' tmp[100417] 1)
        ParamForLoop[100442]
        { i[100414] tmp[100415] tmp[100416] tmp[100417]
          (100411 call =(100403 call result[100388] i[100414])(100408 call .(100407 call(379700 call . this[100925] c"ranges") i[100414]) c"first"))
        }
        label _unused_continueLabel[100419]
        label _breakLabel[100418]
      }
      (100452 return result[100388])
    }
  }
  function DefaultRectangularDom[100799](?).dsiLast[100463](arg _mt[100931]:_MT[238], arg this[100929]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    if(100549 call _cond_test(100467 call ==(379712 call . this[100929] c"rank") 1))
    {
      (100476 return(100473 call .(100472 call(379717 call . this[100929] c"ranges") 0) c"last"))
    }
    {
      unknown result[100483](100481 call *(379722 call . this[100929] c"rank")(379727 call . this[100929] c"idxType"))
      (100486 'end of statement')
      {
        unknown i[100509] 0
        unknown tmp[100510] "maybe param" "temp"
        (100522 'move' tmp[100510](100520 call chpl_compute_low_param_loop_bound 0(100491 call -(379732 call . this[100929] c"rank") 1)))
        unknown tmp[100511] "maybe param" "temp"
        (100532 'move' tmp[100511](100530 call chpl_compute_high_param_loop_bound 0(100527 call -(379745 call . this[100929] c"rank") 1)))
        unknown tmp[100512] "maybe param" "temp"
        (100535 'move' tmp[100512] 1)
        ParamForLoop[100537]
        { i[100509] tmp[100510] tmp[100511] tmp[100512]
          (100506 call =(100498 call result[100483] i[100509])(100503 call .(100502 call(379739 call . this[100929] c"ranges") i[100509]) c"last"))
        }
        label _unused_continueLabel[100514]
        label _breakLabel[100513]
      }
      (100547 return result[100483])
    }
  }
  function DefaultRectangularDom[100799](?).dsiBuildArray[100560](arg _mt[100935]:_MT[238], arg this[100933]:DefaultRectangularDom[100799](?), arg eltType[100558]:_any[178](?), param arg initElts[100563] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (100587 return(100568 'new'(_chpl_manager = unmanaged[220](?))(100586 call DefaultRectangularArr[379750](?)(eltType = eltType[100558])(rank =(379756 call . this[100933] c"rank"))(idxType =(379761 call . this[100933] c"idxType"))(stridable =(379766 call . this[100933] c"stridable"))(dom =(100582 call _to_unmanaged this[100933]))(initElts = initElts[100563]))))
  }
  function DefaultRectangularDom[100799](?).dsiBuildArrayWith[100596](arg _mt[100939]:_MT[238], arg this[100937]:DefaultRectangularDom[100799](?), arg eltType[100594]:_any[178](?), arg data[100602] :
  (100601 call _ddata[11695](?) eltType[100594]), arg allocSize[100606] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown allocRange[100625](100623 call #(100620 call chpl_build_low_bounded_range(100617 call .(100616 call(379781 call . this[100937] c"ranges") 0) c"low")) allocSize[100606])(100612 call range[64316](?)(379776 call . this[100937] c"idxType"))
    (100628 'end of statement')
    (100653 return(100632 'new'(_chpl_manager = unmanaged[220](?))(100652 call DefaultRectangularArr[379750](?)(eltType = eltType[100594])(rank =(379789 call . this[100937] c"rank"))(idxType =(379794 call . this[100937] c"idxType"))(stridable =(379799 call . this[100937] c"stridable"))(initElts = 1)(dom =(100648 call _to_unmanaged this[100937]))(data = data[100602]))))
  }
  function DefaultRectangularDom[100799](?).dsiLocalSlice[100661](arg _mt[100943]:_MT[238], arg this[100941]:DefaultRectangularDom[100799](?), arg ranges[100659]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (100684 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularDom[100799](?).dsiTargetLocales[100691](arg _mt[100947]:_MT[238], arg this[100945]:DefaultRectangularDom[100799](?)) : _unknown[51] "method" "primary method"
  {
    (100700 return(100698 call chpl__buildArrayExpr(100695 call chpl_localeID_to_locale(100694 '_wide_get_locale' this[100945]))))
  }
  function DefaultRectangularDom[100799](?).dsiHasSingleLocalSubdomain[100707](arg _mt[100951]:_MT[238], arg this[100949]:DefaultRectangularDom[100799](?)) param : _unknown[51] "method" "primary method"
  {
    (100710 return 1)
  }
  function DefaultRectangularDom[100799](?).dsiLocalSubdomain[100721](arg _mt[100955]:_MT[238], arg this[100953]:DefaultRectangularDom[100799](?), arg loc[100718] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(100755 call _cond_test(100728 call ==(100725 call chpl_localeID_to_locale(100724 '_wide_get_locale' this[100953])) loc[100718]))
    {
      (100737 return(100736 call _getDomain(100734 call _to_unmanaged this[100953])))
    }
    {
      unknown a[100747](100745 call chpl__buildDomainRuntimeType defaultDist[94058](379810 call . this[100953] c"rank")(379815 call . this[100953] c"idxType")(379820 call . this[100953] c"stridable"))
      (100750 'end of statement')
      (100753 return a[100747])
    }
  }
  function DefaultRectangularDom[100799](?).dsiLocalSubdomains[100768](arg _mt[100959]:_MT[238], arg this[100957]:DefaultRectangularDom[100799](?), arg loc[100765] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (100774 yield(100773 call(379826 call . this[100957] c"dsiLocalSubdomain") loc[100765]))
  }
  function DefaultRectangularDom[100799](?).chpl_intToIdx[100783](arg _mt[100963]:_MT[238], arg this[100961]:DefaultRectangularDom[100799](?), arg i[100781]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (100793 return(100792 call chpl__intToIdx(100787 call . this[100961] c"idxType") i[100781]))
  }
  type DefaultRectangularDom[100799](?) val super[355717]:BaseRectangularDom[146897](?) "super class" unknown dist[94116] unmanaged DefaultDist[415502] unknown ranges[94132](94130 call * rank[146816](94129 call range[64316](?) idxType[146820] bounded[64205] stridable[146824])) type _serialized_domain[94255](?) unknown rank[94235] "param" unknown idxType[94239] "type variable" unknown stridable[94242] "param" unknown dims[94246] unknown isDefaultRectangular[94250] "param"
  type unmanaged DefaultRectangularDom?[415550](?)
  type DefaultRectangularDom?[415547](?)
  type unmanaged DefaultRectangularDom[415460](?)
  type DefaultRectangularDom[415352](?)
  type DefaultRectangularDom[372794](?)
  function chpl__intToIdx[100970](arg idxType[100968]:_any[178](?), arg i[100973] :
  integral[199](?), arg j[100977]:_any[178](?) ...) : _unknown[51] "inline"
  {
    const first[100985] "const"(100984 call chpl__intToIdx idxType[100968] i[100973])
    (100988 'end of statement')
    const rest[100996] "const"(100995 call chpl__intToIdx idxType[100968](100994 'expand_tuple' j[100977]))
    (100999 'end of statement')
    (101006 return(101004 call _build_tuple first[100985](101002 'expand_tuple' rest[100996])))
  }
  function chpl__intToIdx[101014](arg idxType[101012]:_any[178](?), arg i[101017] :
  integral[199](?), arg j[101021] :
  integral[199](?)) : _unknown[51] "inline"
  {
    (101037 return(101035 call _build_tuple(101028 call chpl__intToIdx idxType[101012] i[101017])(101033 call chpl__intToIdx idxType[101012] j[101021])))
  }
  function chpl__intToIdx[101046](arg idxType[101044]:_any[178](?), arg i[101049] :
  _tuple[56199](?)) : _unknown[51] "inline"
  {
    (101058 return(101057 call chpl__intToIdx idxType[101044](101056 'expand_tuple' i[101049])))
  }
  function _remoteAccessData[101230](?).theData[101153](arg _mt[101234]:_MT[238], arg this[101232]:_remoteAccessData[101230](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(101164 call _cond_test(379861 call . this[101232] c"stridable"))
    {
      (101157 return(379866 call . this[101232] c"data"))
    }
    {
      (101161 return(379871 call . this[101232] c"shiftedData"))
    }
  }
  function _remoteAccessData[101230](?).getDataElem[101175](arg _mt[101238]:_MT[238], arg this[101236]:_remoteAccessData[101230](?), arg i[101173]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    if(101192 call _cond_test(379876 call . this[101236] c"stridable"))
    {
      (101182 return(101181 call(379882 call . this[101236] c"dataElem") i[101173]))
    }
    {
      (101189 return(101188 call(379889 call . this[101236] c"shiftedDataElem") i[101173]))
    }
  }
  function _remoteAccessData[101230](?).dataElem[101203](arg _mt[101242]:_MT[238], arg this[101240]:_remoteAccessData[101230](?), arg i[101201]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101209 return(101208 call(379895 call . this[101240] c"data") i[101201]))
  }
  function _remoteAccessData[101230](?).shiftedDataElem[101218](arg _mt[101246]:_MT[238], arg this[101244]:_remoteAccessData[101230](?), arg i[101216]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (101224 return(101223 call(379901 call . this[101244] c"shiftedData") i[101216]))
  }
  type _remoteAccessData[101230](?) unknown eltType[101064] "type variable" unknown rank[101068] "param" int(64)[13] unknown idxType[101072] "type variable" unknown stridable[101076] "param" bool[10] unknown blkChanged[101082] "param" 0 bool[10] unknown off[101090](101088 call * rank[101068] idxType[101072]) unknown blk[101101](101099 call * rank[101068](101098 call chpl__idxTypeToIntIdxType idxType[101072])) unknown str[101115](101113 call * rank[101068](101112 call chpl__signedType(101110 call chpl__idxTypeToIntIdxType idxType[101072]))) unknown origin[101123](101122 call chpl__idxTypeToIntIdxType idxType[101072]) unknown factoredOffs[101131](101130 call chpl__idxTypeToIntIdxType idxType[101072]) unknown data[101139](101138 call _ddata[11695](?) eltType[101064]) unknown shiftedData[101147](101146 call _ddata[11695](?) eltType[101064])
  function _remoteAccessData[101230](?).getDataIndex[101256](arg _mt[101261]:_MT[238], arg this[101258]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg ind[101253] :
  (379907 call . this[101258] c"idxType")) : _unknown[51] "inline" "method"
  {
    (101275 return(101274 call(101266 call . this[101258] c"getDataIndex")(101272 call chpl__tuplify ind[101253])))
  }
  function _remoteAccessData[101230](?).getDataIndex[101290](arg _mt[101295]:_MT[238], arg this[101292]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg ind[101287] :
  (101285 call *(379913 call . this[101292] c"rank")(379918 call . this[101292] c"idxType"))) : _unknown[51] "inline" "method"
  {
    if(101700 call _cond_test(379923 call . this[101292] c"stridable"))
    {
      unknown sum[101299](379928 call . this[101292] c"origin")
      (101302 'end of statement')
      {
        unknown i[101352] 0
        unknown tmp[101353] "maybe param" "temp"
        (101365 'move' tmp[101353](101363 call chpl_compute_low_param_loop_bound 0(101307 call -(379933 call . this[101292] c"rank") 1)))
        unknown tmp[101354] "maybe param" "temp"
        (101375 'move' tmp[101354](101373 call chpl_compute_high_param_loop_bound 0(101370 call -(379964 call . this[101292] c"rank") 1)))
        unknown tmp[101355] "maybe param" "temp"
        (101378 'move' tmp[101355] 1)
        ParamForLoop[101380]
        { i[101352] tmp[101353] tmp[101354] tmp[101355]
          (101349 call += sum[101299](101347 call /(101332 call *(101326 call -(101318 call chpl__idxToInt(101316 call ind[101287] i[101352]))(101325 call chpl__idxToInt(101323 call(379941 call . this[101292] c"off") i[101352])))(101331 call(379947 call . this[101292] c"blk") i[101352]))(101345 call _cast(101344 call chpl__idxTypeToIntIdxType(379959 call . this[101292] c"idxType"))(101340 call abs(101338 call(379953 call . this[101292] c"str") i[101352])))))
        }
        label _unused_continueLabel[101357]
        label _breakLabel[101356]
      }
      (101390 return sum[101299])
    }
    {
      if(101695 call _cond_test(101397 call &&(101394 call ==(379970 call . this[101292] c"rank") 1) earlyShiftData[93440]))
      {
        if(101426 call _cond_test(379976 call . this[101292] c"blkChanged"))
        {
          (101413 return(101411 call *(101406 call chpl__idxToInt(101404 call ind[101287] 0))(101410 call(379982 call . this[101292] c"blk") 0)))
        }
        {
          (101423 return(101422 call chpl__idxToInt(101420 call ind[101287] 0)))
        }
      }
      {
        unknown sum[101443](101440 IfExpr  earlyShiftData[93440] then
        { scopeless
          (101437 call _cast(101436 call chpl__idxTypeToIntIdxType(379989 call . this[101292] c"idxType")) 0)
        } else
        { scopeless
          (379994 call . this[101292] c"origin")
        } )
        (101446 'end of statement')
        if(101675 call _cond_test(379999 call . this[101292] c"blkChanged"))
        {
          {
            unknown i[101474] 0
            unknown tmp[101475] "maybe param" "temp"
            (101487 'move' tmp[101475](101485 call chpl_compute_low_param_loop_bound 0(101452 call -(380004 call . this[101292] c"rank") 1)))
            unknown tmp[101476] "maybe param" "temp"
            (101497 'move' tmp[101476](101495 call chpl_compute_high_param_loop_bound 0(101492 call -(380018 call . this[101292] c"rank") 1)))
            unknown tmp[101477] "maybe param" "temp"
            (101500 'move' tmp[101477] 1)
            ParamForLoop[101502]
            { i[101474] tmp[101475] tmp[101476] tmp[101477]
              {
                (101470 call += sum[101443](101468 call *(101463 call chpl__idxToInt(101461 call ind[101287] i[101474]))(101467 call(380012 call . this[101292] c"blk") i[101474])))
              }
            }
            label _unused_continueLabel[101479]
            label _breakLabel[101478]
          }
        }
        {
          if(101670 call _cond_test(101517 call == storageOrder[93473] RMO[93455]))
          {
            {
              unknown i[101544] 0
              unknown tmp[101545] "maybe param" "temp"
              (101557 'move' tmp[101545](101555 call chpl_compute_low_param_loop_bound 0(101522 call -(380024 call . this[101292] c"rank") 2)))
              unknown tmp[101546] "maybe param" "temp"
              (101567 'move' tmp[101546](101565 call chpl_compute_high_param_loop_bound 0(101562 call -(380038 call . this[101292] c"rank") 2)))
              unknown tmp[101547] "maybe param" "temp"
              (101570 'move' tmp[101547] 1)
              ParamForLoop[101572]
              { i[101544] tmp[101545] tmp[101546] tmp[101547]
                {
                  (101540 call += sum[101443](101538 call *(101533 call chpl__idxToInt(101531 call ind[101287] i[101544]))(101537 call(380032 call . this[101292] c"blk") i[101544])))
                }
              }
              label _unused_continueLabel[101549]
              label _breakLabel[101548]
            }
            (101593 call += sum[101443](101592 call chpl__idxToInt(101590 call ind[101287](101587 call -(380045 call . this[101292] c"rank") 1))))
          }
          {
            {
              unknown i[101621] 0
              unknown tmp[101622] "maybe param" "temp"
              (101634 'move' tmp[101622](101632 call chpl_compute_low_param_loop_bound 1(101599 call -(380050 call . this[101292] c"rank") 1)))
              unknown tmp[101623] "maybe param" "temp"
              (101644 'move' tmp[101623](101642 call chpl_compute_high_param_loop_bound 1(101639 call -(380064 call . this[101292] c"rank") 1)))
              unknown tmp[101624] "maybe param" "temp"
              (101647 'move' tmp[101624] 1)
              ParamForLoop[101649]
              { i[101621] tmp[101622] tmp[101623] tmp[101624]
                {
                  (101617 call += sum[101443](101615 call *(101610 call chpl__idxToInt(101608 call ind[101287] i[101621]))(101614 call(380058 call . this[101292] c"blk") i[101621])))
                }
              }
              label _unused_continueLabel[101626]
              label _breakLabel[101625]
            }
            (101667 call += sum[101443](101666 call chpl__idxToInt(101664 call ind[101287] 0)))
          }
        }
        if(101687 call _cond_test(101680 call ! earlyShiftData[93440]))
        {
          (101684 call -= sum[101443](380073 call . this[101292] c"factoredOffs"))
        }
        (101693 return sum[101443])
      }
    }
  }
  function _remoteAccessData[101230](?).computeFactoredOffs[101710](arg _mt[101715]:_MT[238], arg this[101712]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?)) : _unknown[51] "method" "no return value for void"
  {
    (101719 call =(380079 call . this[101712] c"factoredOffs") 0)
    {
      unknown i[101751] 0
      unknown tmp[101752] "maybe param" "temp"
      (101764 'move' tmp[101752](101762 call chpl_compute_low_param_loop_bound 0(101726 call -(380084 call . this[101712] c"rank") 1)))
      unknown tmp[101753] "maybe param" "temp"
      (101774 'move' tmp[101753](101772 call chpl_compute_high_param_loop_bound 0(101769 call -(380111 call . this[101712] c"rank") 1)))
      unknown tmp[101754] "maybe param" "temp"
      (101777 'move' tmp[101754] 1)
      ParamForLoop[101779]
      { i[101751] tmp[101752] tmp[101753] tmp[101754]
        {
          (101747 call =(380089 call . this[101712] c"factoredOffs")(101745 call +(380094 call . this[101712] c"factoredOffs")(101743 call *(101735 call(380099 call . this[101712] c"blk") i[101751])(101742 call chpl__idxToInt(101740 call(380105 call . this[101712] c"off") i[101751])))))
        }
      }
      label _unused_continueLabel[101756]
      label _breakLabel[101755]
    }
  }
  function _remoteAccessData[101230](?).initShiftedData[101793](arg _mt[101798]:_MT[238], arg this[101795]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?)) : _unknown[51] "method" "no return value for void"
  {
    if(101852 call _cond_test(101804 call && earlyShiftData[93440](101802 call !(380117 call . this[101795] c"stridable"))))
    {
      unknown idxSignedType[101813] "type variable"(101812 call chpl__signedType(101810 call chpl__idxTypeToIntIdxType(380122 call . this[101795] c"idxType")))
      const shiftDist[101838] "const"(101835 IfExpr (101820 call isIntType(380127 call . this[101795] c"idxType")) then
      { scopeless
        (101823 call -(380132 call . this[101795] c"origin")(380137 call . this[101795] c"factoredOffs"))
      } else
      { scopeless
        (101833 call -(101827 call _cast idxSignedType[101813](380142 call . this[101795] c"origin"))(101831 call _cast idxSignedType[101813](380148 call . this[101795] c"factoredOffs")))
      } )
      (101841 'end of statement')
      (101849 call =(380154 call . this[101795] c"shiftedData")(101848 call _ddata_shift(380159 call . this[101795] c"eltType")(380164 call . this[101795] c"data") shiftDist[101838]))
    }
  }
  function _remoteAccessData[101230](?).strideAlignUp[101864](arg _mt[101871]:_MT[238], arg this[101868]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg lo[101862]:_any[178](?), arg r[101866]:_any[178](?)) : _unknown[51] "method"
  {
    (101925 return(101923 call +(101874 call . r[101866] c"low")(101921 call *(101909 call /(101897 call -(101894 call +(101882 call - lo[101862](101879 call . r[101866] c"low"))(101892 call _cast(380171 call . this[101868] c"idxType")(101890 call abs(101886 call . r[101866] c"stride")))) 1)(101907 call _cast(380176 call . this[101868] c"idxType")(101905 call abs(101901 call . r[101866] c"stride"))))(101919 call _cast(380181 call . this[101868] c"idxType")(101917 call abs(101913 call . r[101866] c"stride"))))))
  }
  function _remoteAccessData[101230](?).strideAlignDown[101935](arg _mt[101942]:_MT[238], arg this[101939]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg hi[101933]:_any[178](?), arg r[101937]:_any[178](?)) : _unknown[51] "method"
  {
    (101966 return(101964 call - hi[101933](101962 call %(101950 call - hi[101933](101947 call . r[101937] c"low"))(101960 call _cast(380188 call . this[101939] c"idxType")(101958 call abs(101954 call . r[101937] c"stride"))))))
  }
  function _remoteAccessData[101230](?).initDataFrom[101978](arg _mt[101983]:_MT[238], arg this[101980]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg other[101975] :
  _remoteAccessData[101230](?)) : _unknown[51] "method" "no return value for void"
  {
    (101995 call =(101988 call . this[101980] c"data")(101992 call . other[101975] c"data"))
  }
  function _remoteAccessData[101230](?).toSlice[102006](arg _mt[102011]:_MT[238], arg this[102008]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg newDom[102004]:_any[178](?)) : _unknown[51] "method"
  {
    (102025 call compilerAssert(102022 call ==(102015 call . this[102008] c"rank")(102019 call . newDom[102004] c"rank")))
    unknown rad[102056](102055 call _remoteAccessData[101230](?)(380195 call . this[102008] c"eltType")(102032 call . newDom[102004] c"rank")(102036 call . newDom[102004] c"idxType")(102040 call . newDom[102004] c"stridable")(102053 call ||(102044 call . newDom[102004] c"stridable")(102050 call . this[102008] c"blkChanged")))
    (102059 'end of statement')
    (102068 call(102063 call . rad[102056] c"initDataFrom") this[102008])
    (102091 call =(102073 call . rad[102056] c"shiftedData")(102088 IfExpr (102077 call . newDom[102004] c"stridable") then
    { scopeless
      (102081 call . this[102008] c"data")
    } else
    { scopeless
      (102085 call . this[102008] c"shiftedData")
    } ))
    (102110 call =(102097 call . rad[102056] c"origin")(102108 call _cast(102105 call . newDom[102004] c"idxType")(102101 call . this[102008] c"origin")))
    (102128 call =(102116 call . rad[102056] c"off")(102127 call chpl__tuplify(102123 call . newDom[102004] c"dsiLow")))
    (102146 call =(102134 call . rad[102056] c"str")(102145 call chpl__tuplify(102141 call . newDom[102004] c"dsiStride")))
    {
      unknown i[102298] 0
      unknown tmp[102299] "maybe param" "temp"
      (102311 'move' tmp[102299](102309 call chpl_compute_low_param_loop_bound 0(102152 call -(380201 call . this[102008] c"rank") 1)))
      unknown tmp[102300] "maybe param" "temp"
      (102321 'move' tmp[102300](102319 call chpl_compute_high_param_loop_bound 0(102316 call -(380218 call . this[102008] c"rank") 1)))
      unknown tmp[102301] "maybe param" "temp"
      (102324 'move' tmp[102301] 1)
      ParamForLoop[102326]
      { i[102298] tmp[102299] tmp[102300] tmp[102301]
        {
          const shift[102212] "const"(102210 call /(102192 call *(102164 call(102159 call . this[102008] c"blk") i[102298])(102190 call -(102179 call chpl__idxToInt(102175 call .(102174 call(102169 call . newDom[102004] c"dsiDim") i[102298]) c"low"))(102189 call chpl__idxToInt(102187 call(102182 call . this[102008] c"off") i[102298]))))(102208 call _cast(102205 call . rad[102056] c"idxType")(102203 call abs(102201 call(102196 call . this[102008] c"str") i[102298]))))
          (102215 'end of statement')
          if(102245 call _cond_test(102225 call >(102223 call(102218 call . this[102008] c"str") i[102298]) 0))
          {
            (102232 call +=(102228 call . rad[102056] c"origin") shift[102212])
          }
          {
            (102241 call -=(102237 call . rad[102056] c"origin") shift[102212])
          }
          const mult[102274] "const"(102272 call _cast(102269 call . rad[102056] c"idxType")(102266 call /(102256 call .(102255 call(102250 call . newDom[102004] c"dsiDim") i[102298]) c"stride")(102265 call(102260 call . this[102008] c"str") i[102298])))
          (102277 'end of statement')
          (102295 call =(102284 call(102279 call . rad[102056] c"blk") i[102298])(102293 call *(102291 call(102286 call . this[102008] c"blk") i[102298]) mult[102274]))
        }
      }
      label _unused_continueLabel[102303]
      label _breakLabel[102302]
    }
    (102342 call(102338 call . rad[102056] c"computeFactoredOffs"))
    (102351 call(102347 call . rad[102056] c"initShiftedData"))
    (102354 return rad[102056])
  }
  function _remoteAccessData[101230](?).toReindex[102363](arg _mt[102368]:_MT[238], arg this[102365]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg newDom[102361]:_any[178](?)) : _unknown[51] "method"
  {
    (102382 call compilerAssert(102379 call ==(102372 call . this[102365] c"rank")(102376 call . newDom[102361] c"rank")))
    unknown rad[102402](102401 call _remoteAccessData[101230](?)(380225 call . this[102365] c"eltType")(102389 call . newDom[102361] c"rank")(102393 call . newDom[102361] c"idxType")(102397 call . newDom[102361] c"stridable")(380230 call . this[102365] c"blkChanged"))
    (102405 'end of statement')
    (102412 call(102407 call . rad[102402] c"initDataFrom") this[102365])
    (102433 call =(102415 call . rad[102402] c"shiftedData")(102430 IfExpr (102419 call . newDom[102361] c"stridable") then
    { scopeless
      (102423 call . this[102365] c"data")
    } else
    { scopeless
      (102427 call . this[102365] c"shiftedData")
    } ))
    (102450 call =(102437 call . rad[102402] c"origin")(102448 call _cast(102445 call . newDom[102361] c"intIdxType")(102441 call . this[102365] c"origin")))
    (102461 call =(102454 call . rad[102402] c"blk")(102458 call . this[102365] c"blk"))
    (102475 call =(102465 call . rad[102402] c"off")(102474 call chpl__tuplify(102470 call . newDom[102361] c"dsiLow")))
    (102489 call =(102479 call . rad[102402] c"str")(102488 call chpl__tuplify(102484 call . newDom[102361] c"dsiStride")))
    (102505 call =(102495 call . rad[102402] c"factoredOffs")(102503 call _cast(102500 call . newDom[102361] c"intIdxType") 0))
    (102513 call(102509 call . rad[102402] c"computeFactoredOffs"))
    (102520 call(102516 call . rad[102402] c"initShiftedData"))
    (102523 return rad[102402])
  }
  function _remoteAccessData[101230](?).toRankChange[102532](arg _mt[102541]:_MT[238], arg this[102538]:_remoteAccessData[101230](?) :
  _remoteAccessData[101230](?), arg newDom[102530]:_any[178](?), arg cd[102534]:_any[178](?), arg idx[102536]:_any[178](?)) : _unknown[51] "method"
  {
    (102567 call compilerAssert(102564 call &&(102552 call ==(102545 call . this[102538] c"rank")(102549 call . idx[102536] c"size"))(102562 call !=(102555 call . this[102538] c"rank")(102559 call . newDom[102530] c"rank"))))
    unknown intIdxType[102574] "type variable"(102571 call . newDom[102530] c"intIdxType")
    unknown idxSignedType[102581] "type variable"(102580 call chpl__signedType intIdxType[102574])
    unknown rad[102601](102600 call _remoteAccessData[101230](?)(380239 call . this[102538] c"eltType")(102588 call . newDom[102530] c"rank")(102592 call . newDom[102530] c"idxType")(102596 call . newDom[102530] c"stridable") 1)
    (102604 'end of statement')
    const collapsedDims[102609] "const"(102608 call chpl__tuplify cd[102534])
    (102612 'end of statement')
    (102619 call(102614 call . rad[102601] c"initDataFrom") this[102538])
    (102640 call =(102622 call . rad[102601] c"shiftedData")(102637 IfExpr (102626 call . newDom[102530] c"stridable") then
    { scopeless
      (102630 call . this[102538] c"data")
    } else
    { scopeless
      (102634 call . this[102538] c"shiftedData")
    } ))
    (102657 call =(102644 call . rad[102601] c"origin")(102655 call _cast(102652 call . newDom[102530] c"intIdxType")(102648 call . this[102538] c"origin")))
    unknown curDim[102661] 0
    (102664 'end of statement')
    {
      unknown j[102866] 0
      unknown tmp[102867] "maybe param" "temp"
      (102879 'move' tmp[102867](102877 call chpl_compute_low_param_loop_bound 0(102671 call -(102667 call . idx[102536] c"size") 1)))
      unknown tmp[102868] "maybe param" "temp"
      (102892 'move' tmp[102868](102890 call chpl_compute_high_param_loop_bound 0(102884 call -(102886 call . idx[102536] c"size") 1)))
      unknown tmp[102869] "maybe param" "temp"
      (102895 'move' tmp[102869] 1)
      ParamForLoop[102897]
      { j[102866] tmp[102867] tmp[102868] tmp[102869]
        {
          if(102861 call _cond_test(102679 call !(102678 call collapsedDims[102609] j[102866])))
          {
            (102698 call =(102687 call(102682 call . rad[102601] c"off") curDim[102661])(102695 call .(102694 call(102689 call . newDom[102530] c"dsiDim") curDim[102661]) c"low"))
            const off[102727] "const"(102725 call _cast idxSignedType[102581](102722 call -(102711 call chpl__idxToInt(102709 call(102704 call . rad[102601] c"off") curDim[102661]))(102721 call chpl__idxToInt(102719 call(102714 call . this[102538] c"off") j[102866]))))
            (102730 'end of statement')
            (102760 call +=(102732 call . rad[102601] c"origin")(102758 call _cast intIdxType[102574](102755 call /(102746 call *(102743 call _cast idxSignedType[102581](102741 call(102736 call . this[102538] c"blk") j[102866])) off[102727])(102754 call(102749 call . this[102538] c"str") j[102866]))))
            (102777 call =(102769 call(102764 call . rad[102601] c"blk") curDim[102661])(102776 call(102771 call . this[102538] c"blk") j[102866]))
            (102794 call =(102786 call(102781 call . rad[102601] c"str") curDim[102661])(102793 call(102788 call . this[102538] c"str") j[102866]))
            (102799 call += curDim[102661] 1)
          }
          {
            const off[102824] "const"(102822 call _cast idxSignedType[102581](102819 call -(102808 call chpl__idxToInt(102806 call idx[102536] j[102866]))(102818 call chpl__idxToInt(102816 call(102811 call . this[102538] c"off") j[102866]))))
            (102827 'end of statement')
            (102858 call +=(102830 call . rad[102601] c"origin")(102856 call _cast intIdxType[102574](102853 call /(102844 call *(102841 call _cast idxSignedType[102581](102839 call(102834 call . this[102538] c"blk") j[102866])) off[102824])(102852 call(102847 call . this[102538] c"str") j[102866]))))
          }
        }
      }
      label _unused_continueLabel[102871]
      label _breakLabel[102870]
    }
    (102911 call(102907 call . rad[102601] c"computeFactoredOffs"))
    (102918 call(102914 call . rad[102601] c"initShiftedData"))
    (102921 return rad[102601])
  }
  function LocRADCache[103082](?).init[102983](arg _mt[103086]:_MT[238], arg this[103084]:LocRADCache[103082](?), arg eltType[102981]:_any[178](?), param arg rank[102986] :
  int(64)[13], arg idxType[102989]:_any[178](?), param arg stridable[102992] :
  bool[10], arg newTargetLocDom[103000] :
  (102998 call chpl__buildDomainRuntimeType defaultDist[94058] rank[102986])) : _unknown[51] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (103008 call =(103004 call . this[103084] c"eltType") eltType[102981])
    (103017 call =(103013 call . this[103084] c"rank") rank[102986])
    (103025 call =(103021 call . this[103084] c"idxType") idxType[102989])
    (103033 call =(103029 call . this[103084] c"stridable") stridable[102992])
    (103038 call =(380289 call . this[103084] c"targetLocDom") newTargetLocDom[103000])
  }
  function LocRADCache[103082](?).lockRAD[103047](arg _mt[103090]:_MT[238], arg this[103088]:LocRADCache[103082](?), arg rlocIdx[103045]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103057 call(103053 call .(103052 call(380297 call . this[103088] c"RADLocks") rlocIdx[103045]) c"lock"))
  }
  function LocRADCache[103082](?).unlockRAD[103066](arg _mt[103094]:_MT[238], arg this[103092]:LocRADCache[103082](?), arg rlocIdx[103064]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (103076 call(103072 call .(103071 call(380303 call . this[103092] c"RADLocks") rlocIdx[103064]) c"unlock"))
  }
  type LocRADCache[103082](?) val super[355719]:object[22] "super class" unknown eltType[102926] "type variable" unknown rank[102930] "param" int(64)[13] unknown idxType[102934] "type variable" unknown stridable[102938] "param" bool[10] unknown targetLocDom[102947](102945 call chpl__buildDomainRuntimeType defaultDist[94058] rank[102930]) unknown RAD[102964] "unsafe"(102962 call chpl__buildArrayRuntimeType(102960 call chpl__ensureDomainExpr targetLocDom[102947])(102959 call _remoteAccessData[101230](?) eltType[102926] rank[102930] idxType[102934] stridable[102938])) unknown RADLocks[102975](102973 call chpl__buildArrayRuntimeType(102971 call chpl__ensureDomainExpr targetLocDom[102947]) chpl_LocalSpinlock[187398])
  type unmanaged LocRADCache?[415610](?)
  type LocRADCache?[415607](?)
  type LocRADCache[408916](?)
  function DefaultRectangularArr[106852](?).init[103220](arg _mt[106856]:_MT[238], arg this[106854]:DefaultRectangularArr[106852](?), arg eltType[103218]:_any[178](?), param arg rank[103222]:_any[178](?), arg idxType[103224]:_any[178](?), param arg stridable[103226]:_any[178](?), arg dom[103238] :
  (103236 call unmanaged DefaultRectangularDom[415460](?)(rank = rank[103222])(idxType = idxType[103224])(stridable = stridable[103226])), param arg initElts[103242] =
  1, arg data[103250] :
  (103248 call _ddata[11695](?) eltType[103218]) =
  nil[44], arg externArr[103255] =
  0, arg _borrowed[103259] =
  0, arg externFreeFunc[103264] :
  c_void_ptr[149] =
  nil[44]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (103281 call(103269 call .(358693 call . this[106854] c"super") c"init")(eltType = eltType[103218])(rank = rank[103222])(idxType = idxType[103224])(stridable = stridable[103226]))
    (103289 call =(103285 call . this[106854] c"dom") dom[103238])
    (103297 call =(103293 call . this[106854] c"data") data[103250])
    (103307 call =(103303 call . this[106854] c"externFreeFunc") externFreeFunc[103264])
    (103317 call =(103313 call . this[106854] c"externArr") externArr[103255])
    (103327 call =(103323 call . this[106854] c"_borrowed") _borrowed[103259])
    (103337 call =(103333 call . this[106854] c"callPostAlloc") 0)
    (103347 call =(103343 call . this[106854] c"deinitElts") initElts[103242])
    (103355 call(103351 call . this[106854] c"complete"))
    (103365 call(103360 call . this[106854] c"setupFieldsAndAllocate") initElts[103242])
  }
  function DefaultRectangularArr[106852](?).intIdxType[103371](arg _mt[106860]:_MT[238], arg this[106858]:DefaultRectangularArr[106852](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (103377 return(103376 call chpl__idxTypeToIntIdxType(380346 call . this[106858] c"idxType")))
  }
  function DefaultRectangularArr[106852](?).dsiDisplayRepresentation[103384](arg _mt[106864]:_MT[238], arg this[106862]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103406 call writeln "off="(380351 call . this[106862] c"off"))
    (103429 call writeln "blk="(380356 call . this[106862] c"blk"))
    (103451 call writeln "str="(380361 call . this[106862] c"str"))
    (103473 call writeln "factoredOffs="(380366 call . this[106862] c"factoredOffs"))
  }
  function DefaultRectangularArr[106852](?).dsiGetBaseDom[103479](arg _mt[106868]:_MT[238], arg this[106866]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (103482 return(380371 call . this[106866] c"dom"))
  }
  function DefaultRectangularArr[106852](?).dsiElementInitializationComplete[103489](arg _mt[106872]:_MT[238], arg this[106870]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const size[103539] "const"(103536 IfExpr (103496 call == storageOrder[93473] RMO[93455]) then
    { scopeless
      (103512 call *(103501 call(380377 call . this[106870] c"blk") 0)(103509 call .(103508 call(103503 call .(358708 call . this[106870] c"dom") c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (103534 call *(103520 call(380382 call . this[106870] c"blk")(103517 call -(380387 call . this[106870] c"rank") 1))(103531 call .(103530 call(103522 call .(358713 call . this[106870] c"dom") c"dsiDim")(103527 call -(380392 call . this[106870] c"rank") 1)) c"size"))
    } )
    (103542 'end of statement')
    if(103573 call _cond_test debugDefaultDist[93400])
    {
      (103570 call chpl_debug_writeln "*** DR calling postalloc "(103566 call _cast string[26](380398 call . this[106870] c"eltType")) " " size[103539])
    }
    if(103590 call _cond_test(380404 call . this[106870] c"callPostAlloc"))
    {
      (103582 call _ddata_allocate_postalloc(380409 call . this[106870] c"data") size[103539])
      (103587 call =(380415 call . this[106870] c"callPostAlloc") 0)
    }
    (103596 call =(380420 call . this[106870] c"deinitElts") 1)
  }
  function DefaultRectangularArr[106852](?).dsiElementDeinitializationComplete[103603](arg _mt[106876]:_MT[238], arg this[106874]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (103607 call =(380425 call . this[106874] c"deinitElts") 0)
  }
  function DefaultRectangularArr[106852](?).dsiDestroyArr[103619](arg _mt[106880]:_MT[238], arg this[106878]:DefaultRectangularArr[106852](?), arg deinitElts[103616] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(103648 call _cond_test debugDefaultDist[93400])
    {
      (103645 call chpl_debug_writeln "*** DR calling dealloc "(103643 call _cast string[26](380431 call . this[106878] c"eltType")))
    }
    if(103819 call _cond_test(380436 call . this[106878] c"externArr"))
    {
      if(103667 call _cond_test(103655 call !(380441 call . this[106878] c"_borrowed")))
      {
        (103664 call chpl_call_free_func(380446 call . this[106878] c"externFreeFunc")(103663 call c_ptrTo(380451 call . this[106878] c"data")))
      }
    }
    {
      unknown numInd[103678](103675 call .(358718 call . this[106878] c"dom") c"dsiNumIndices")
      (103681 'end of statement')
      unknown numElts[103685] numInd[103678](380455 call . this[106878] c"intIdxType")
      (103688 'end of statement')
      if(103809 call _cond_test(103700 call &&(103694 call && deinitElts[103616](103691 call . this[106878] c"deinitElts"))(103698 call > numInd[103678] 0)))
      {
        unknown needsDestroy[103712] "param"(103711 'needs auto destroy'(103710 'deref'(103709 call(380463 call . this[106878] c"data") 0)))
        (103715 'end of statement')
        if(103805 call _cond_test needsDestroy[103712])
        {
          if(103800 call _cond_test(103721 call _deinitElementsIsParallel(380469 call . this[106878] c"eltType")))
          {
            Forall {
              induction variables:
                
                unknown i[103739] "index var" "insert auto destroy"
              iterated expressions:
                (103727 call #(103724 call chpl_build_low_bounded_range 0) numElts[103685])
              shadow variables:
              other variables
                forall body
              {
                (103735 call chpl__autoDestroy(103733 call(380475 call . this[106878] c"data") i[103739]))
              }
            }
          }
          {
            {
              unknown _indexOfInterest[103759] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[103760] "expr temp" "temp"
              (103769 'move' _iterator[103760](103767 call _getIterator(103776 call chpl_direct_counted_range_iter 0 numElts[103685])))
              Defer
              {
                {
                  (103792 call _freeIterator _iterator[103760])
                }
              }
              { scopeless type
                (103781 'move' _indexOfInterest[103759](103778 call iteratorIndex _iterator[103760]))
              }
              ForLoop[103761]
              {
                unknown i[103785] "index var" "insert auto destroy"
                (103787 'move' i[103785] _indexOfInterest[103759])
                {
                  (103756 call chpl__autoDestroy(103754 call(380481 call . this[106878] c"data") i[103785]))
                }
                label _continueLabel[103764]
                _indexOfInterest[103759]
                _iterator[103760]
              }
              label _breakLabel[103765]
            }
          }
        }
      }
      (103817 call _ddata_free(380488 call . this[106878] c"data") numInd[103678])
    }
  }
  function DefaultRectangularArr[106852](?).theData[103827](arg _mt[106884]:_MT[238], arg this[106882]:DefaultRectangularArr[106852](?)) ref : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(103841 call _cond_test(103833 call && earlyShiftData[93440](103831 call !(380495 call . this[106882] c"stridable"))))
    {
      (103836 return(380500 call . this[106882] c"shiftedData"))
    }
    {
      (103839 return(380505 call . this[106882] c"data"))
    }
  }
  function DefaultRectangularArr[106852](?).these[103858](arg _mt[106888]:_MT[238], arg this[106886]:DefaultRectangularArr[106852](?), arg tasksPerLocale[103854] :
  int(64)[13] =
  dataParTasksPerLocale[93289], arg ignoreRunning[103862] :
  bool[10] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[103868] :
  int(64)[13] =
  dataParMinGranularity[93301]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103895 call _cond_test debugDefaultDist[93400])
    {
      (103892 call chpl_debug_writeln "*** In defRectArr simple-dd serial iterator")
    }
    {
      unknown _indexOfInterest[103909] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[103910] "expr temp" "temp"
      (103919 'move' _iterator[103910](103917 call _getIterator(103905 call chpl__serialViewIter this[106886](380515 call . this[106886] c"dom"))))
      Defer
      {
        {
          (103936 call _freeIterator _iterator[103910])
        }
      }
      { scopeless type
        (103925 'move' _indexOfInterest[103909](103922 call iteratorIndex _iterator[103910]))
      }
      ForLoop[103911]
      {
        unknown elem[103929] "index var" "insert auto destroy"
        (103931 'move' elem[103929] _indexOfInterest[103909])
        (103907 yield elem[103929])
        label _continueLabel[103914]
        _indexOfInterest[103909]
        _iterator[103910]
      }
      label _breakLabel[103915]
    }
  }
  function DefaultRectangularArr[106852](?).these[103951](arg _mt[106892]:_MT[238], arg this[106890]:DefaultRectangularArr[106852](?), param arg tag[103948] :
  iterKind[453], arg tasksPerLocale[103954] =
  dataParTasksPerLocale[93289], arg ignoreRunning[103958] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[103962] =
  dataParMinGranularity[93301]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(103995 call _cond_test debugDefaultDist[93400])
    {
      (103992 call chpl_debug_writeln "*** In defRectArr simple-dd standalone iterator")
    }
    {
      unknown _indexOfInterest[104018] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104019] "expr temp" "temp"
      (104028 'move' _iterator[104019](104026 call _getIterator(104010 call(104002 call .(358725 call . this[106890] c"dom") c"these") tag[103948] tasksPerLocale[103954] ignoreRunning[103958] minIndicesPerTask[103962])))
      Defer
      {
        {
          (104045 call _freeIterator _iterator[104019])
        }
      }
      { scopeless type
        (104034 'move' _indexOfInterest[104018](104031 call iteratorIndex _iterator[104019]))
      }
      ForLoop[104020]
      {
        unknown i[104038] "index var" "insert auto destroy"
        (104040 'move' i[104038] _indexOfInterest[104018])
        {
          (104015 yield(104014 call(380530 call . this[106890] c"dsiAccess") i[104038]))
        }
        label _continueLabel[104023]
        _indexOfInterest[104018]
        _iterator[104019]
      }
      label _breakLabel[104024]
    }
  }
  where {
    (103970 call == tag[103948] standalone[451])
  }
  function DefaultRectangularArr[106852](?).these[104061](arg _mt[106896]:_MT[238], arg this[106894]:DefaultRectangularArr[106852](?), param arg tag[104058] :
  iterKind[453], arg tasksPerLocale[104064] =
  dataParTasksPerLocale[93289], arg ignoreRunning[104068] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[104072] =
  dataParMinGranularity[93301]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104105 call _cond_test debugDefaultDist[93400])
    {
      (104102 call chpl_debug_writeln "*** In defRectArr simple-dd leader iterator")
    }
    {
      unknown _indexOfInterest[104124] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104125] "expr temp" "temp"
      (104134 'move' _iterator[104125](104132 call _getIterator(104120 call(104112 call .(358731 call . this[106894] c"dom") c"these") tag[104058] tasksPerLocale[104064] ignoreRunning[104068] minIndicesPerTask[104072])))
      Defer
      {
        {
          (104151 call _freeIterator _iterator[104125])
        }
      }
      { scopeless type
        (104140 'move' _indexOfInterest[104124](104137 call iteratorIndex _iterator[104125]))
      }
      ForLoop[104126]
      {
        unknown followThis[104144] "index var" "insert auto destroy"
        (104146 'move' followThis[104144] _indexOfInterest[104124])
        (104122 yield followThis[104144])
        label _continueLabel[104129]
        _indexOfInterest[104124]
        _iterator[104125]
      }
      label _breakLabel[104130]
    }
  }
  where {
    (104080 call == tag[104058] leader[447])
  }
  function DefaultRectangularArr[106852](?).these[104167](arg _mt[106900]:_MT[238], arg this[106898]:DefaultRectangularArr[106852](?), param arg tag[104164] :
  iterKind[453], arg followThis[104169]:_any[178](?), arg tasksPerLocale[104172] =
  dataParTasksPerLocale[93289], arg ignoreRunning[104176] =
  dataParIgnoreRunningTasks[93295], arg minIndicesPerTask[104180] =
  dataParMinGranularity[93301]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(104214 call _cond_test debugDefaultDist[93400])
    {
      (104211 call chpl_debug_writeln "*** In defRectArr simple-dd follower iterator: " followThis[104169])
    }
    {
      unknown _indexOfInterest[104241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[104242] "expr temp" "temp"
      (104251 'move' _iterator[104242](104249 call _getIterator(104234 call(104221 call .(358737 call . this[106898] c"dom") c"these")(tag = follower[449]) followThis[104169] tasksPerLocale[104172] ignoreRunning[104176] minIndicesPerTask[104180])))
      Defer
      {
        {
          (104268 call _freeIterator _iterator[104242])
        }
      }
      { scopeless type
        (104257 'move' _indexOfInterest[104241](104254 call iteratorIndex _iterator[104242]))
      }
      ForLoop[104243]
      {
        unknown i[104261] "index var" "insert auto destroy"
        (104263 'move' i[104261] _indexOfInterest[104241])
        (104239 yield(104238 call(380557 call . this[106898] c"dsiAccess") i[104261]))
        label _continueLabel[104246]
        _indexOfInterest[104241]
        _iterator[104242]
      }
      label _breakLabel[104247]
    }
  }
  where {
    (104188 call == tag[104164] follower[449])
  }
  function DefaultRectangularArr[106852](?).computeFactoredOffs[104280](arg _mt[106904]:_MT[238], arg this[106902]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (104287 call =(380563 call . this[106902] c"factoredOffs")(104285 call _cast(380567 call . this[106902] c"intIdxType") 0))
    {
      unknown i[104319] 0
      unknown tmp[104320] "maybe param" "temp"
      (104332 'move' tmp[104320](104330 call chpl_compute_low_param_loop_bound 0(104294 call -(380572 call . this[106902] c"rank") 1)))
      unknown tmp[104321] "maybe param" "temp"
      (104342 'move' tmp[104321](104340 call chpl_compute_high_param_loop_bound 0(104337 call -(380599 call . this[106902] c"rank") 1)))
      unknown tmp[104322] "maybe param" "temp"
      (104345 'move' tmp[104322] 1)
      ParamForLoop[104347]
      { i[104319] tmp[104320] tmp[104321] tmp[104322]
        {
          (104315 call =(380577 call . this[106902] c"factoredOffs")(104313 call +(380582 call . this[106902] c"factoredOffs")(104311 call *(104303 call(380587 call . this[106902] c"blk") i[104319])(104310 call chpl__idxToInt(104308 call(380593 call . this[106902] c"off") i[104319])))))
        }
      }
      label _unused_continueLabel[104324]
      label _breakLabel[104323]
    }
  }
  function DefaultRectangularArr[106852](?).initShiftedData[104360](arg _mt[106908]:_MT[238], arg this[106906]:DefaultRectangularArr[106852](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(104419 call _cond_test(104366 call && earlyShiftData[93440](104364 call !(380605 call . this[106906] c"stridable"))))
    {
      if(104414 call _cond_test(104373 call >(104369 call .(358743 call . this[106906] c"dom") c"dsiNumIndices") 0))
      {
        const shiftDist[104399] "const"(104396 IfExpr (104378 call isIntType(380610 call . this[106906] c"idxType")) then
        { scopeless
          (104384 call -(104381 call _cast(380615 call . this[106906] c"idxType") 0)(380620 call . this[106906] c"factoredOffs"))
        } else
        { scopeless
          (104394 call -(104388 call _cast(380627 call . this[106906] c"idxSignedType") 0)(104392 call _cast(380637 call . this[106906] c"idxSignedType")(380632 call . this[106906] c"factoredOffs")))
        } )
        (104402 'end of statement')
        (104411 call =(380642 call . this[106906] c"shiftedData")(104410 call _ddata_shift(380647 call . this[106906] c"eltType")(380652 call . this[106906] c"data") shiftDist[104399]))
      }
    }
  }
  function DefaultRectangularArr[106852](?).setupFieldsAndAllocate[104430](arg _mt[106912]:_MT[238], arg this[106910]:DefaultRectangularArr[106852](?), param arg initElts[104428]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown dim[104474] 0
      unknown tmp[104475] "maybe param" "temp"
      (104487 'move' tmp[104475](104485 call chpl_compute_low_param_loop_bound 0(104435 call -(380658 call . this[106910] c"rank") 1)))
      unknown tmp[104476] "maybe param" "temp"
      (104497 'move' tmp[104476](104495 call chpl_compute_high_param_loop_bound 0(104492 call -(380677 call . this[106910] c"rank") 1)))
      unknown tmp[104477] "maybe param" "temp"
      (104500 'move' tmp[104477] 1)
      ParamForLoop[104502]
      { dim[104474] tmp[104475] tmp[104476] tmp[104477]
        {
          (104453 call =(104442 call(380663 call . this[106910] c"off") dim[104474])(104450 call .(104449 call(104444 call .(358748 call . this[106910] c"dom") c"dsiDim") dim[104474]) c"alignedLow"))
          (104471 call =(104460 call(380670 call . this[106910] c"str") dim[104474])(104468 call .(104467 call(104462 call .(358753 call . this[106910] c"dom") c"dsiDim") dim[104474]) c"stride"))
        }
      }
      label _unused_continueLabel[104479]
      label _breakLabel[104478]
    }
    if(104732 call _cond_test(104517 call == storageOrder[93473] RMO[93455]))
    {
      (104530 call =(104525 call(380683 call . this[106910] c"blk")(104522 call -(380688 call . this[106910] c"rank") 1))(104528 call _cast(380692 call . this[106910] c"intIdxType") 1))
      {
        unknown dim[104575] 0
        unknown tmp[104576] "maybe param" "temp"
        (104587 'move' tmp[104576](104585 call chpl_compute_low_param_loop_bound 0(104537 call -(380697 call . this[106910] c"rank") 2)))
        unknown tmp[104577] "maybe param" "temp"
        (104597 'move' tmp[104577](104595 call chpl_compute_high_param_loop_bound 0(104592 call -(380715 call . this[106910] c"rank") 2)))
        unknown tmp[104578] "maybe param" "temp"
        (104600 'move' tmp[104578](104542 call - 1))
        ParamForLoop[104602]
        { dim[104575] tmp[104576] tmp[104577] tmp[104578]
          (104572 call =(104549 call(380702 call . this[106910] c"blk") dim[104575])(104570 call *(104556 call(380708 call . this[106910] c"blk")(104553 call + dim[104575] 1))(104567 call .(104566 call(104558 call .(358759 call . this[106910] c"dom") c"dsiDim")(104563 call + dim[104575] 1)) c"size")))
        }
        label _unused_continueLabel[104580]
        label _breakLabel[104579]
      }
    }
    {
      if(104728 call _cond_test(104618 call == storageOrder[93473] CMO[93457]))
      {
        (104628 call =(104623 call(380721 call . this[106910] c"blk") 0)(104626 call _cast(380725 call . this[106910] c"intIdxType") 1))
        {
          unknown dim[104669] 0
          unknown tmp[104670] "maybe param" "temp"
          (104682 'move' tmp[104670](104680 call chpl_compute_low_param_loop_bound 1(104635 call -(380730 call . this[106910] c"rank") 1)))
          unknown tmp[104671] "maybe param" "temp"
          (104692 'move' tmp[104671](104690 call chpl_compute_high_param_loop_bound 1(104687 call -(380748 call . this[106910] c"rank") 1)))
          unknown tmp[104672] "maybe param" "temp"
          (104695 'move' tmp[104672] 1)
          ParamForLoop[104697]
          { dim[104669] tmp[104670] tmp[104671] tmp[104672]
            {
              (104665 call =(104642 call(380735 call . this[106910] c"blk") dim[104669])(104663 call *(104649 call(380741 call . this[106910] c"blk")(104646 call - dim[104669] 1))(104660 call .(104659 call(104651 call .(358765 call . this[106910] c"dom") c"dsiDim")(104656 call - dim[104669] 1)) c"size")))
            }
          }
          label _unused_continueLabel[104674]
          label _breakLabel[104673]
        }
      }
      {
        (104725 call halt "unknown array storage order")
      }
    }
    (104739 call(380752 call . this[106910] c"computeFactoredOffs"))
    const size[104789] "const"(104786 IfExpr (104746 call == storageOrder[93473] RMO[93455]) then
    { scopeless
      (104762 call *(104751 call(380758 call . this[106910] c"blk") 0)(104759 call .(104758 call(104753 call .(358771 call . this[106910] c"dom") c"dsiDim") 0) c"size"))
    } else
    { scopeless
      (104784 call *(104770 call(380763 call . this[106910] c"blk")(104767 call -(380768 call . this[106910] c"rank") 1))(104781 call .(104780 call(104772 call .(358776 call . this[106910] c"dom") c"dsiDim")(104777 call -(380773 call . this[106910] c"rank") 1)) c"size"))
    } )
    (104792 'end of statement')
    if(104857 call _cond_test usePollyArrayIndex[93445])
    {
      {
        unknown dim[104819] 0
        unknown tmp[104820] "maybe param" "temp"
        (104832 'move' tmp[104820](104830 call chpl_compute_low_param_loop_bound 0(104797 call -(380779 call . this[106910] c"rank") 1)))
        unknown tmp[104821] "maybe param" "temp"
        (104842 'move' tmp[104821](104840 call chpl_compute_high_param_loop_bound 0(104837 call -(380793 call . this[106910] c"rank") 1)))
        unknown tmp[104822] "maybe param" "temp"
        (104845 'move' tmp[104822] 1)
        ParamForLoop[104847]
        { dim[104819] tmp[104820] tmp[104821] tmp[104822]
          {
            (104815 call =(104804 call(380786 call . this[106910] c"sizesPerDim") dim[104819])(104812 call .(104811 call(104806 call .(358781 call . this[106910] c"dom") c"dsiDim") dim[104819]) c"size"))
          }
        }
        label _unused_continueLabel[104824]
        label _breakLabel[104823]
      }
    }
    if(104960 call _cond_test(104863 call ==(380798 call . this[106910] c"data") nil[44]))
    {
      if(104894 call _cond_test debugDefaultDist[93400])
      {
        (104891 call chpl_debug_writeln "*** DR alloc "(104887 call _cast string[26](380804 call . this[106910] c"eltType")) " " size[104789])
      }
      if(104939 call _cond_test(104900 call ! localeModelHasSublocales[187415]))
      {
        (104909 call =(380811 call . this[106910] c"data")(104908 call _ddata_allocate_noinit(380816 call . this[106910] c"eltType") size[104789](380822 call . this[106910] c"callPostAlloc")))
      }
      {
        (104935 call =(380827 call . this[106910] c"data")(104934 call _ddata_allocate_noinit(380832 call . this[106910] c"eltType") size[104789](380838 call . this[106910] c"callPostAlloc")(subloc =(104930 IfExpr (104926 call >(104924 call(104920 call .(358784 call here[90439]) c"getChildCount")) 1) then
        { scopeless
          c_sublocid_all[89884]
        } else
        { scopeless
          c_sublocid_none[89874]
        } ))))
      }
      if(104956 call _cond_test initElts[104428])
      {
        (104949 call init_elts(380846 call . this[106910] c"data") size[104789](380852 call . this[106910] c"eltType"))
        (104954 call(380856 call . this[106910] c"dsiElementInitializationComplete"))
      }
    }
    (104966 call(380860 call . this[106910] c"initShiftedData"))
  }
  function DefaultRectangularArr[106852](?).getDataIndex[104978](arg _mt[106916]:_MT[238], arg this[106914]:DefaultRectangularArr[106852](?), arg ind[104974] ... :
  (380865 call . this[106914] c"idxType"), param arg getShifted[104981] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    (104994 return(104993 call(380874 call . this[106914] c"getDataIndex") ind[104974](getShifted = getShifted[104981])))
  }
  where {
    (104986 call ==(380870 call . this[106914] c"rank") 1)
  }
  function DefaultRectangularArr[106852](?).getDataIndex[105009](arg _mt[106920]:_MT[238], arg this[106918]:DefaultRectangularArr[106852](?), arg ind[105006] :
  (105004 call *(380881 call . this[106918] c"rank")(380886 call . this[106918] c"idxType")), param arg getShifted[105012] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    if(105436 call _cond_test(380891 call . this[106918] c"stridable"))
    {
      unknown sum[105020](105018 call _cast(380895 call . this[106918] c"intIdxType") 0)
      (105023 'end of statement')
      {
        unknown i[105070] 0
        unknown tmp[105071] "maybe param" "temp"
        (105083 'move' tmp[105071](105081 call chpl_compute_low_param_loop_bound 0(105028 call -(380900 call . this[106918] c"rank") 1)))
        unknown tmp[105072] "maybe param" "temp"
        (105093 'move' tmp[105072](105091 call chpl_compute_high_param_loop_bound 0(105088 call -(380930 call . this[106918] c"rank") 1)))
        unknown tmp[105073] "maybe param" "temp"
        (105096 'move' tmp[105073] 1)
        ParamForLoop[105098]
        { i[105070] tmp[105071] tmp[105072] tmp[105073]
          (105067 call += sum[105020](105065 call /(105053 call *(105047 call -(105039 call chpl__idxToInt(105037 call ind[105006] i[105070]))(105046 call chpl__idxToInt(105044 call(380908 call . this[106918] c"off") i[105070])))(105052 call(380914 call . this[106918] c"blk") i[105070]))(105063 call _cast(380925 call . this[106918] c"intIdxType")(105061 call abs(105059 call(380920 call . this[106918] c"str") i[105070])))))
        }
        label _unused_continueLabel[105075]
        label _breakLabel[105074]
      }
      (105108 return sum[105020])
    }
    {
      unknown wantShiftedIndex[105114] "param"(105112 call && getShifted[105012] earlyShiftData[93440])
      (105117 'end of statement')
      if(105432 call _cond_test(105124 call &&(105121 call ==(380938 call . this[106918] c"rank") 1) wantShiftedIndex[105114]))
      {
        (105133 return(105132 call chpl__idxToInt(105130 call ind[105006] 0)))
      }
      {
        unknown sum[105140](105138 call _cast(380944 call . this[106918] c"intIdxType") 0)
        (105143 'end of statement')
        unknown useInd[105146] ind[105006]
        (105149 'end of statement')
        unknown useOffset[105152] 0 int(64)[13]
        (105155 'end of statement')
        unknown useSizesPerDim[105157](380950 call . this[106918] c"sizesPerDim")
        (105160 'end of statement')
        if(105428 call _cond_test usePollyArrayIndex[93445])
        {
          if(105234 call _cond_test(105163 call ! wantShiftedIndex[105114]))
          {
            {
              unknown i[105196] 0
              unknown tmp[105197] "maybe param" "temp"
              (105209 'move' tmp[105197](105207 call chpl_compute_low_param_loop_bound 0(105168 call -(380957 call . this[106918] c"rank") 1)))
              unknown tmp[105198] "maybe param" "temp"
              (105219 'move' tmp[105198](105217 call chpl_compute_high_param_loop_bound 0(105214 call -(380972 call . this[106918] c"rank") 1)))
              unknown tmp[105199] "maybe param" "temp"
              (105222 'move' tmp[105199] 1)
              ParamForLoop[105224]
              { i[105196] tmp[105197] tmp[105198] tmp[105199]
                {
                  (105192 call =(105175 call useInd[105146] i[105196])(105190 call -(105182 call chpl__idxToInt(105180 call useInd[105146] i[105196]))(105189 call chpl__idxToInt(105187 call(380966 call . this[106918] c"off") i[105196]))))
                }
              }
              label _unused_continueLabel[105201]
              label _breakLabel[105200]
            }
          }
          (105247 return(105246 call polly_array_index useOffset[105152](105243 'expand_tuple' useSizesPerDim[105157])(105245 'expand_tuple' useInd[105146])))
        }
        {
          if(105407 call _cond_test(105254 call == storageOrder[93473] RMO[93455]))
          {
            {
              unknown i[105281] 0
              unknown tmp[105282] "maybe param" "temp"
              (105294 'move' tmp[105282](105292 call chpl_compute_low_param_loop_bound 0(105259 call -(380981 call . this[106918] c"rank") 2)))
              unknown tmp[105283] "maybe param" "temp"
              (105304 'move' tmp[105283](105302 call chpl_compute_high_param_loop_bound 0(105299 call -(380995 call . this[106918] c"rank") 2)))
              unknown tmp[105284] "maybe param" "temp"
              (105307 'move' tmp[105284] 1)
              ParamForLoop[105309]
              { i[105281] tmp[105282] tmp[105283] tmp[105284]
                {
                  (105277 call += sum[105140](105275 call *(105270 call chpl__idxToInt(105268 call ind[105006] i[105281]))(105274 call(380989 call . this[106918] c"blk") i[105281])))
                }
              }
              label _unused_continueLabel[105286]
              label _breakLabel[105285]
            }
            (105330 call += sum[105140](105329 call chpl__idxToInt(105327 call ind[105006](105324 call -(381002 call . this[106918] c"rank") 1))))
          }
          {
            {
              unknown i[105358] 0
              unknown tmp[105359] "maybe param" "temp"
              (105371 'move' tmp[105359](105369 call chpl_compute_low_param_loop_bound 1(105336 call -(381007 call . this[106918] c"rank") 1)))
              unknown tmp[105360] "maybe param" "temp"
              (105381 'move' tmp[105360](105379 call chpl_compute_high_param_loop_bound 1(105376 call -(381021 call . this[106918] c"rank") 1)))
              unknown tmp[105361] "maybe param" "temp"
              (105384 'move' tmp[105361] 1)
              ParamForLoop[105386]
              { i[105358] tmp[105359] tmp[105360] tmp[105361]
                {
                  (105354 call += sum[105140](105352 call *(105347 call chpl__idxToInt(105345 call ind[105006] i[105358]))(105351 call(381015 call . this[106918] c"blk") i[105358])))
                }
              }
              label _unused_continueLabel[105363]
              label _breakLabel[105362]
            }
            (105404 call += sum[105140](105403 call chpl__idxToInt(105401 call ind[105006] 0)))
          }
          if(105420 call _cond_test(105413 call ! wantShiftedIndex[105114]))
          {
            (105417 call -= sum[105140](381030 call . this[106918] c"factoredOffs"))
          }
          (105426 return sum[105140])
        }
      }
    }
  }
  function DefaultRectangularArr[106852](?).dsiAccess[105451](arg _mt[106924]:_MT[238], arg this[106922]:DefaultRectangularArr[106852](?), arg ind[105447] ... :
  (381036 call . this[106922] c"idxType")) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105461 return(105460 call(381045 call . this[106922] c"dsiAccess") ind[105447]))
  }
  where {
    (105455 call ==(381041 call . this[106922] c"rank") 1)
  }
  function DefaultRectangularArr[106852](?).dsiAccess[105475](arg _mt[106928]:_MT[238], arg this[106926]:DefaultRectangularArr[106852](?), arg ind[105471] ... :
  (381051 call . this[106926] c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (105491 return(105490 call(381065 call . this[106926] c"dsiAccess") ind[105471]))
  }
  where {
    (105485 call &&(105479 call ==(381056 call . this[106926] c"rank") 1)(105484 call shouldReturnRvalueByValue(381061 call . this[106926] c"eltType")))
  }
  function DefaultRectangularArr[106852](?).dsiAccess[105505](arg _mt[106932]:_MT[238], arg this[106930]:DefaultRectangularArr[106852](?), arg ind[105501] ... :
  (381071 call . this[106930] c"idxType")) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105521 return(105520 call(381085 call . this[106930] c"dsiAccess") ind[105501]))
  }
  where {
    (105515 call &&(105509 call ==(381076 call . this[106930] c"rank") 1)(105514 call shouldReturnRvalueByConstRef(381081 call . this[106930] c"eltType")))
  }
  function DefaultRectangularArr[106852](?).dsiAccess[105536](arg _mt[106936]:_MT[238], arg this[106934]:DefaultRectangularArr[106852](?), arg ind[105533] :
  (105531 call *(381091 call . this[106934] c"rank")(381096 call . this[106934] c"idxType"))) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105542](105541 call(381100 call . this[106934] c"getDataIndex") ind[105533])
    (105545 'end of statement')
    (105551 return(105550 call(381105 call . this[106934] c"theData") dataInd[105542]))
  }
  function DefaultRectangularArr[106852](?).dsiAccess[105564](arg _mt[106940]:_MT[238], arg this[106938]:DefaultRectangularArr[106852](?), arg ind[105561] :
  (105559 call *(381111 call . this[106938] c"rank")(381116 call . this[106938] c"idxType"))) : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105574](105573 call(381125 call . this[106938] c"getDataIndex") ind[105561])
    (105577 'end of statement')
    (105583 return(105582 call(381130 call . this[106938] c"theData") dataInd[105574]))
  }
  where {
    (105569 call shouldReturnRvalueByValue(381121 call . this[106938] c"eltType"))
  }
  function DefaultRectangularArr[106852](?).dsiAccess[105597](arg _mt[106944]:_MT[238], arg this[106942]:DefaultRectangularArr[106852](?), arg ind[105594] :
  (105592 call *(381136 call . this[106942] c"rank")(381141 call . this[106942] c"idxType"))) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown dataInd[105607](105606 call(381150 call . this[106942] c"getDataIndex") ind[105594])
    (105610 'end of statement')
    (105616 return(105615 call(381155 call . this[106942] c"theData") dataInd[105607]))
  }
  where {
    (105602 call shouldReturnRvalueByConstRef(381146 call . this[106942] c"eltType"))
  }
  function DefaultRectangularArr[106852](?).dsiLocalAccess[105625](arg _mt[106948]:_MT[238], arg this[106946]:DefaultRectangularArr[106852](?), arg i[105623]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (105631 return(105630 call(381160 call . this[106946] c"dsiAccess") i[105623]))
  }
  function DefaultRectangularArr[106852](?).dsiLocalAccess[105640](arg _mt[106952]:_MT[238], arg this[106950]:DefaultRectangularArr[106852](?), arg i[105638]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105650 return(105649 call(381170 call . this[106950] c"dsiAccess") i[105638]))
  }
  where {
    (105645 call shouldReturnRvalueByValue(381166 call . this[106950] c"eltType"))
  }
  function DefaultRectangularArr[106852](?).dsiLocalAccess[105660](arg _mt[106956]:_MT[238], arg this[106954]:DefaultRectangularArr[106852](?), arg i[105658]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (105670 return(105669 call(381180 call . this[106954] c"dsiAccess") i[105658]))
  }
  where {
    (105665 call shouldReturnRvalueByConstRef(381176 call . this[106954] c"eltType"))
  }
  function DefaultRectangularArr[106852](?).dsiBoundsCheck[105680](arg _mt[106960]:_MT[238], arg this[106958]:DefaultRectangularArr[106852](?), arg i[105678]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (105691 return(105690 call(105685 call .(358789 call . this[106958] c"dom") c"dsiMember") i[105678]))
  }
  function DefaultRectangularArr[106852](?).adjustBlkOffStrForNewDomain[105703](arg _mt[106964]:_MT[238], arg this[106962]:DefaultRectangularArr[106852](?), arg d[105700] :
  unmanaged DefaultRectangularDom[415460](?), arg alias[105707] :
  unmanaged DefaultRectangularArr[415505](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[105892] 0
      unknown tmp[105893] "maybe param" "temp"
      (105905 'move' tmp[105893](105903 call chpl_compute_low_param_loop_bound 0(105713 call -(381189 call . this[106962] c"rank") 1)))
      unknown tmp[105894] "maybe param" "temp"
      (105915 'move' tmp[105894](105913 call chpl_compute_high_param_loop_bound 0(105910 call -(381251 call . this[106962] c"rank") 1)))
      unknown tmp[105895] "maybe param" "temp"
      (105918 'move' tmp[105895] 1)
      ParamForLoop[105920]
      { i[105892] tmp[105893] tmp[105894] tmp[105895]
        {
          unknown s[105718](381194 call . this[106962] c"idxType")
          (105721 'end of statement')
          if(105831 call _cond_test(105725 call ==(381199 call . this[106962] c"idxSignedType")(381204 call . this[106962] c"idxType")))
          {
            (105750 call = s[105718](105748 call _cast(105745 call . d[105700] c"idxType")(105742 call /(105735 call .(105734 call(105729 call .(358794 call . this[106962] c"dom") c"dsiDim") i[105892]) c"stride")(105741 call(381211 call . this[106962] c"str") i[105892]))))
          }
          {
            (105802 call assert(105799 call ||(105775 call &&(105766 call <(105762 call .(105761 call(105756 call .(358800 call . this[106962] c"dom") c"dsiDim") i[105892]) c"stride") 0)(105773 call <(105771 call(381218 call . this[106962] c"str") i[105892]) 0))(105797 call &&(105788 call >(105784 call .(105783 call(105778 call .(358805 call . this[106962] c"dom") c"dsiDim") i[105892]) c"stride") 0)(105795 call >(105793 call(381225 call . this[106962] c"str") i[105892]) 0))))
            (105828 call = s[105718](105826 call _cast(105823 call . d[105700] c"idxType")(105820 call /(105813 call .(105812 call(105807 call .(358810 call . this[106962] c"dom") c"dsiDim") i[105892]) c"stride")(105819 call(381233 call . this[106962] c"str") i[105892]))))
          }
          (105852 call =(105841 call(105836 call . alias[105707] c"off") i[105892])(105849 call .(105848 call(105843 call . d[105700] c"dsiDim") i[105892]) c"low"))
          (105869 call =(105861 call(105856 call . alias[105707] c"blk") i[105892])(105867 call *(105865 call(381242 call . this[106962] c"blk") i[105892]) s[105718]))
          (105889 call =(105878 call(105873 call . alias[105707] c"str") i[105892])(105886 call .(105885 call(105880 call . d[105700] c"dsiDim") i[105892]) c"stride"))
        }
      }
      label _unused_continueLabel[105897]
      label _breakLabel[105896]
    }
  }
  function DefaultRectangularArr[106852](?).adjustBlkOffStrForNewDomain[105939](arg _mt[106968]:_MT[238], arg this[106966]:DefaultRectangularArr[106852](?), arg d[105936] :
  unmanaged DefaultRectangularDom[415460](?), arg alias[105943] :
  unmanaged DefaultRectangularArr[415505](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown i[106024] 0
      unknown tmp[106025] "maybe param" "temp"
      (106037 'move' tmp[106025](106035 call chpl_compute_low_param_loop_bound 0(105965 call -(381258 call . this[106966] c"rank") 1)))
      unknown tmp[106026] "maybe param" "temp"
      (106047 'move' tmp[106026](106045 call chpl_compute_high_param_loop_bound 0(106042 call -(381274 call . this[106966] c"rank") 1)))
      unknown tmp[106027] "maybe param" "temp"
      (106050 'move' tmp[106027] 1)
      ParamForLoop[106052]
      { i[106024] tmp[106025] tmp[106026] tmp[106027]
        {
          (105986 call =(105975 call(105970 call . alias[105943] c"off") i[106024])(105983 call .(105982 call(105977 call . d[105936] c"dsiDim") i[106024]) c"low"))
          (106001 call =(105996 call(105991 call . alias[105943] c"blk") i[106024])(106000 call(381266 call . this[106966] c"blk") i[106024]))
          (106021 call =(106010 call(106005 call . alias[105943] c"str") i[106024])(106018 call .(106017 call(106012 call . d[105936] c"dsiDim") i[106024]) c"stride"))
        }
      }
      label _unused_continueLabel[106029]
      label _breakLabel[106028]
    }
  }
  where {
    (105960 call &&(105951 call ==(105947 call .(358821 call . this[106966] c"dom") c"stridable") 0)(105958 call ==(105954 call . this[106966] c"stridable") 0))
  }
  function DefaultRectangularArr[106852](?).dsiReallocate[106082](arg _mt[106972]:_MT[238], arg this[106970]:DefaultRectangularArr[106852](?), arg bounds[106079] :
  (106077 call *(381279 call . this[106970] c"rank")(106076 call range[64316](?)(381285 call . this[106970] c"idxType") bounded[64205](381290 call . this[106970] c"stridable")))) : _unknown[51] "method" "primary method" "method overrides" "ignore transfer errors" "no return value for void"
  {
    unknown actuallyResizing[106085] 0
    (106088 'end of statement')
    {
      unknown _indexOfInterest[106122] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[106123] "expr temp" "temp"
      (106132 'move' _iterator[106123](106130 call _getIterator(106092 call . bounds[106079] c"indices")))
      Defer
      {
        {
          (106149 call _freeIterator _iterator[106123])
        }
      }
      { scopeless type
        (106138 'move' _indexOfInterest[106122](106135 call iteratorIndex _iterator[106123]))
      }
      ForLoop[106124]
      {
        unknown i[106142] "index var" "insert auto destroy"
        (106144 'move' i[106142] _indexOfInterest[106122])
        {
          if(106117 call _cond_test(106106 call !=(106098 call bounds[106079] i[106142])(106105 call(106100 call .(358834 call . this[106970] c"dom") c"dsiDim") i[106142])))
          {
            (106110 call = actuallyResizing[106085] 1)
            break _breakLabel[106128] _breakLabel[106128]
          }
        }
        label _continueLabel[106127]
        _indexOfInterest[106122]
        _iterator[106123]
      }
      label _breakLabel[106128]
    }
    if(106161 call _cond_test(106157 call ! actuallyResizing[106085]))
    {
      (106159 return _void[55])
    }
    if(106194 call _cond_test(106170 call !(106169 call isDefaultInitializable(381300 call . this[106970] c"eltType"))))
    {
      (106191 call halt "Can't resize domains whose arrays' elements don't have default values")
    }
    if(106229 call _cond_test(106203 call !=(106200 call chpl_localeID_to_locale(106199 '_wide_get_locale' this[106970]))(381304 call here[90439])))
    {
      (106226 call halt "internal error: dsiReallocate() can only be called from an array's home locale")
    }
    {
      const reallocD[106238] "const"(106236 call chpl__buildDomainExpr(106234 'expand_tuple' bounds[106079]))
      (106241 'end of statement')
      if(106654 call _cond_test(106292 call &&(106283 call &&(106274 call &&(106262 call &&(106250 call &&(106244 call ! disableArrRealloc[93420])(106248 call ==(381310 call . this[106970] c"rank") 1))(106260 call ==(106253 call . reallocD[106238] c"low")(106257 call .(358840 call . this[106970] c"dom") c"dsiLow")))(106272 call ==(106265 call . reallocD[106238] c"stride")(106269 call .(358846 call . this[106970] c"dom") c"dsiStride")))(106281 call >(106277 call .(358851 call . this[106970] c"dom") c"dsiNumIndices") 0))(106290 call >(106286 call . reallocD[106238] c"size") 0)))
      {
        if(106316 call _cond_test reportInPlaceRealloc[93425])
        {
          (106314 call writeln "reallocating in-place")
        }
        (106336 call =(106325 call(381316 call . this[106970] c"sizesPerDim") 0)(106333 call .(106332 call(106327 call . reallocD[106238] c"dsiDim") 0) c"size"))
        (106355 call =(381321 call . this[106970] c"data")(106354 call _ddata_reallocate(381326 call . this[106970] c"data")(381331 call . this[106970] c"eltType")(oldSize =(106345 call .(358858 call . this[106970] c"dom") c"dsiNumIndices"))(newSize =(106350 call . reallocD[106238] c"size"))))
        (106360 call(381335 call . this[106970] c"initShiftedData"))
      }
      {
        unknown copy[106387](106364 'new'(_chpl_manager = unmanaged[220](?))(106386 call DefaultRectangularArr[379750](?)(eltType =(381341 call . this[106970] c"eltType"))(rank =(381346 call . this[106970] c"rank"))(idxType =(381351 call . this[106970] c"idxType"))(stridable =(106377 call .(106374 call . reallocD[106238] c"_value") c"stridable"))(dom =(106382 call . reallocD[106238] c"_value"))))
        (106390 'end of statement')
        unknown keep[106402](106401 call reallocD[106238](106399 'expand_tuple'(106396 call .(358866 call . this[106970] c"dom") c"ranges")))
        (106405 'end of statement')
        Forall {
          induction variables:
            
            unknown i[106437] "index var" "insert auto destroy"
          iterated expressions:
            keep[106402]
          shadow variables:
          other variables
            forall body
          {
            unknown dst[106417] "ref var"(106416 call(106411 call . copy[106387] c"dsiAccess") i[106437])
            (106420 'end of statement')
            const src[106426] "const" "ref var"(106425 call(381358 call . this[106970] c"dsiAccess") i[106437])
            (106429 'end of statement')
            (106434 '=' dst[106417] src[106426])
          }
        }
        unknown needsDestroy[106444] "param"(106443 'needs auto destroy'(381366 call . this[106970] c"eltType"))
        (106447 'end of statement')
        if(106562 call _cond_test needsDestroy[106444])
        {
          if(106557 call _cond_test(106457 call <(106450 call . reallocD[106238] c"size")(106454 call .(358873 call . this[106970] c"dom") c"dsiNumIndices")))
          {
            if(106552 call _cond_test(106462 call _deinitElementsIsParallel(381372 call . this[106970] c"eltType")))
            {
              Forall {
                induction variables:
                  
                  unknown i[106489] "index var" "insert auto destroy"
                iterated expressions:
                  (381377 call . this[106970] c"dom")
                shadow variables:
                other variables
                  forall body
                {
                  if(106483 call _cond_test(106472 call !(106471 call(106466 call . keep[106402] c"contains") i[106489])))
                  {
                    (106480 call chpl__autoDestroy(106478 call(381382 call . this[106970] c"dsiAccess") i[106489]))
                  }
                }
              }
            }
            {
              {
                unknown _indexOfInterest[106518] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[106519] "expr temp" "temp"
                (106528 'move' _iterator[106519](106526 call _getIterator(381388 call . this[106970] c"dom")))
                Defer
                {
                  {
                    (106544 call _freeIterator _iterator[106519])
                  }
                }
                { scopeless type
                  (106533 'move' _indexOfInterest[106518](106530 call iteratorIndex _iterator[106519]))
                }
                ForLoop[106520]
                {
                  unknown i[106537] "index var" "insert auto destroy"
                  (106539 'move' i[106537] _indexOfInterest[106518])
                  {
                    if(106513 call _cond_test(106502 call !(106501 call(106496 call . keep[106402] c"contains") i[106537])))
                    {
                      (106510 call chpl__autoDestroy(106508 call(381393 call . this[106970] c"dsiAccess") i[106537]))
                    }
                  }
                  label _continueLabel[106523]
                  _indexOfInterest[106518]
                  _iterator[106519]
                }
                label _breakLabel[106524]
              }
            }
          }
        }
        (106571 call =(381399 call . this[106970] c"off")(106568 call . copy[106387] c"off"))
        (106579 call =(381404 call . this[106970] c"blk")(106576 call . copy[106387] c"blk"))
        (106587 call =(381409 call . this[106970] c"str")(106584 call . copy[106387] c"str"))
        (106595 call =(381414 call . this[106970] c"factoredOffs")(106592 call . copy[106387] c"factoredOffs"))
        (106602 call(381418 call . this[106970] c"dsiDestroyArr")(deinitElts = 0))
        (106609 call =(381423 call . this[106970] c"data")(106606 call . copy[106387] c"data"))
        if(106645 call _cond_test(106622 call && earlyShiftData[93440](106620 call !(106617 call .(106614 call . reallocD[106238] c"_value") c"stridable"))))
        {
          if(106640 call _cond_test(106629 call >(106625 call . reallocD[106238] c"size") 0))
          {
            (106636 call =(381429 call . this[106970] c"shiftedData")(106633 call . copy[106387] c"shiftedData"))
          }
        }
        (106651 call chpl__delete copy[106387])
      }
    }
  }
  function DefaultRectangularArr[106852](?).dsiPostReallocate[106662](arg _mt[106976]:_MT[238], arg this[106974]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function DefaultRectangularArr[106852](?).dsiLocalSlice[106671](arg _mt[106980]:_MT[238], arg this[106978]:DefaultRectangularArr[106852](?), arg ranges[106669]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (106676 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularArr[106852](?).dsiGetRAD[106683](arg _mt[106984]:_MT[238], arg this[106982]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method"
  {
    unknown rad[106692](106691 call _remoteAccessData[101230](?)(381436 call . this[106982] c"eltType")(381441 call . this[106982] c"rank")(381446 call . this[106982] c"idxType")(381451 call . this[106982] c"stridable"))
    (106695 'end of statement')
    (106702 call =(106698 call . rad[106692] c"off")(381456 call . this[106982] c"off"))
    (106710 call =(106706 call . rad[106692] c"blk")(381461 call . this[106982] c"blk"))
    (106718 call =(106714 call . rad[106692] c"str")(381466 call . this[106982] c"str"))
    (106726 call =(106722 call . rad[106692] c"origin") 0)
    (106734 call =(106730 call . rad[106692] c"factoredOffs")(381471 call . this[106982] c"factoredOffs"))
    (106742 call =(106738 call . rad[106692] c"data")(381476 call . this[106982] c"data"))
    (106750 call =(106746 call . rad[106692] c"shiftedData")(381481 call . this[106982] c"shiftedData"))
    (106754 return rad[106692])
  }
  function DefaultRectangularArr[106852](?).dsiTargetLocales[106760](arg _mt[106988]:_MT[238], arg this[106986]:DefaultRectangularArr[106852](?)) : _unknown[51] "method" "primary method"
  {
    (106772 return(106770 call chpl__buildArrayExpr(106767 call chpl_localeID_to_locale(106766 '_wide_get_locale'(106763 call . this[106986] c"data")))))
  }
  function DefaultRectangularArr[106852](?).dsiHasSingleLocalSubdomain[106779](arg _mt[106992]:_MT[238], arg this[106990]:DefaultRectangularArr[106852](?)) param : _unknown[51] "method" "primary method"
  {
    (106782 return 1)
  }
  function DefaultRectangularArr[106852](?).dsiLocalSubdomain[106793](arg _mt[106996]:_MT[238], arg this[106994]:DefaultRectangularArr[106852](?), arg loc[106790] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(106827 call _cond_test(106803 call ==(106800 call chpl_localeID_to_locale(106799 '_wide_get_locale'(106796 call . this[106994] c"data"))) loc[106790]))
    {
      (106809 return(106808 call _getDomain(381488 call . this[106994] c"dom")))
    }
    {
      unknown a[106819](106817 call chpl__buildDomainRuntimeType defaultDist[94058](381493 call . this[106994] c"rank")(381498 call . this[106994] c"idxType")(381503 call . this[106994] c"stridable"))
      (106822 'end of statement')
      (106825 return a[106819])
    }
  }
  function DefaultRectangularArr[106852](?).dsiLocalSubdomains[106840](arg _mt[107000]:_MT[238], arg this[106998]:DefaultRectangularArr[106852](?), arg loc[106837] :
  locale[28]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (106846 yield(106845 call(381509 call . this[106998] c"dsiLocalSubdomain") loc[106837]))
  }
  type DefaultRectangularArr[106852](?) val super[355727]:BaseRectangularArr[149817](?) "super class" unknown idxSignedType[103107] "type variable"(103106 call chpl__signedType(103104 call chpl__idxTypeToIntIdxType idxType[149716])) unknown dom[103120](103118 call unmanaged DefaultRectangularDom[415460](?)(rank = rank[149712])(idxType = idxType[149716])(stridable = stridable[149720])) unknown off[103128](103126 call * rank[149712] idxType[149716]) unknown blk[103139](103137 call * rank[149712](103136 call chpl__idxTypeToIntIdxType idxType[149716])) unknown sizesPerDim[103150](103148 call * rank[149712](103147 call chpl__idxTypeToIntIdxType idxType[149716])) unknown str[103158](103156 call * rank[149712] idxSignedType[103107]) unknown factoredOffs[103166](103165 call chpl__idxTypeToIntIdxType idxType[149716]) unknown data[103175] "alias scope from this" "local field" nil[44](103173 call _ddata[11695](?) eltType[149784]) unknown shiftedData[103183] "alias scope from this" "local field"(103182 call _ddata[11695](?) eltType[149784]) unknown externFreeFunc[103188] c_void_ptr[149] unknown externArr[103194] 0 bool[10] unknown _borrowed[103200] 1 bool[10] unknown callPostAlloc[103206] 1 bool[10] unknown deinitElts[103212] 1 bool[10]
  type unmanaged DefaultRectangularArr[415505](?)
  type DefaultRectangularArr[415355](?)
  type DefaultRectangularArr[379750](?)
  function chpl__serialViewIter[107007](arg arr[107005]:_any[178](?), arg viewDom[107009]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown useCache[107029] "param"(107027 call &&(107018 call chpl__isArrayView arr[107005])(107026 call(107022 call . arr[107005] c"shouldUseIndexCache")))
    (107032 'end of statement')
    unknown info[107062](107059 IfExpr  useCache[107029] then
    { scopeless
      (107038 call . arr[107005] c"indexCache")
    } else
    { scopeless(107056 IfExpr (107048 call(107044 call . arr[107005] c"isSliceArrayView")) then
      { scopeless
        (107052 call . arr[107005] c"arr")
      } else
      { scopeless
        arr[107005]
      } )
    } )
    (107065 'end of statement')
    if(107492 call _cond_test(107071 call ==(107067 call . arr[107005] c"rank") 1))
    {
      if(107379 call _cond_test(107077 call !(107074 call . viewDom[107009] c"stridable")))
      {
        const first[107089] "const"(107088 call(107080 call . info[107062] c"getDataIndex")(107084 call . viewDom[107009] c"dsiLow"))
        (107092 'end of statement')
        const second[107116] "const"(107115 call(107095 call . info[107062] c"getDataIndex")(107113 call(107099 call . viewDom[107009] c"chpl_intToIdx")(107110 call +(107108 call chpl__idxToInt(107104 call . viewDom[107009] c"dsiLow")) 1)))
        (107119 'end of statement')
        const step[107124] "const"(107122 call - second[107116] first[107089])
        (107127 'end of statement')
        const last[107141] "const"(107139 call + first[107089](107137 call *(107134 call -(107130 call . viewDom[107009] c"dsiNumIndices") 1) step[107124]))
        (107144 'end of statement')
        {
          unknown _indexOfInterest[107162] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107163] "expr temp" "temp"
          (107172 'move' _iterator[107163](107170 call _getIterator(107151 call chpl_direct_pos_stride_range_iter first[107089] last[107141] step[107124])))
          Defer
          {
            {
              (107189 call _freeIterator _iterator[107163])
            }
          }
          { scopeless type
            (107178 'move' _indexOfInterest[107162](107175 call iteratorIndex _iterator[107163]))
          }
          ForLoop[107164]
          {
            unknown i[107182] "index var" "insert auto destroy"
            (107184 'move' i[107182] _indexOfInterest[107162])
            {
              (107159 yield(107158 call(107153 call . info[107062] c"theData") i[107182]))
            }
            label _continueLabel[107167]
            _indexOfInterest[107162]
            _iterator[107163]
          }
          label _breakLabel[107168]
        }
      }
      {
        const viewDomDim[107203] "const"(107202 call(107197 call . viewDom[107009] c"dsiDim") 0)
        const stride[107216] "const"(107214 call _cast(107211 call . viewDom[107009] c"intIdxType")(107207 call . viewDomDim[107203] c"stride"))
        const start[107223] "const"(107220 call . viewDomDim[107203] c"first")
        const second[107245] "const"(107244 call(107227 call . info[107062] c"getDataIndex")(107242 call(107231 call . viewDom[107009] c"chpl_intToIdx")(107239 call +(107235 call . viewDomDim[107203] c"firstAsInt") stride[107216])))
        (107248 'end of statement')
        unknown first[107257](107256 call(107251 call . info[107062] c"getDataIndex") start[107223])
        (107260 'end of statement')
        const step[107274] "const"(107272 call _cast(107271 call chpl__signedType(107267 call . viewDom[107009] c"intIdxType"))(107263 call - second[107245] first[107257]))
        (107277 'end of statement')
        unknown last[107297](107295 call + first[107257](107293 call *(107284 call -(107280 call . viewDomDim[107203] c"size") 1)(107291 call _cast(107288 call . viewDom[107009] c"intIdxType") step[107274])))
        (107300 'end of statement')
        if(107310 call _cond_test(107303 call < step[107274] 0))
        {
          (107307 call <=> last[107297] first[107257])
        }
        unknown data[107319](107316 call . info[107062] c"theData")
        (107322 'end of statement')
        {
          unknown _indexOfInterest[107337] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107338] "expr temp" "temp"
          (107347 'move' _iterator[107338](107345 call _getIterator(107356 call chpl_direct_range_iter first[107257] last[107297] step[107274])))
          Defer
          {
            {
              (107372 call _freeIterator _iterator[107338])
            }
          }
          { scopeless type
            (107361 'move' _indexOfInterest[107337](107358 call iteratorIndex _iterator[107338]))
          }
          ForLoop[107339]
          {
            unknown i[107365] "index var" "insert auto destroy"
            (107367 'move' i[107365] _indexOfInterest[107337])
            (107335 yield(107334 call data[107319] i[107365]))
            label _continueLabel[107342]
            _indexOfInterest[107337]
            _iterator[107338]
          }
          label _breakLabel[107343]
        }
      }
    }
    {
      if(107488 call _cond_test useCache[107029])
      {
        {
          unknown _indexOfInterest[107410] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107411] "expr temp" "temp"
          (107420 'move' _iterator[107411](107418 call _getIterator viewDom[107009]))
          Defer
          {
            {
              (107436 call _freeIterator _iterator[107411])
            }
          }
          { scopeless type
            (107425 'move' _indexOfInterest[107410](107422 call iteratorIndex _iterator[107411]))
          }
          ForLoop[107412]
          {
            unknown i[107429] "index var" "insert auto destroy"
            (107431 'move' i[107429] _indexOfInterest[107410])
            {
              const dataIdx[107394] "const"(107393 call(107388 call . info[107062] c"getDataIndex") i[107429])
              (107397 'end of statement')
              (107408 yield(107407 call(107402 call . info[107062] c"getDataElem") dataIdx[107394]))
            }
            label _continueLabel[107415]
            _indexOfInterest[107410]
            _iterator[107411]
          }
          label _breakLabel[107416]
        }
      }
      {
        {
          unknown _indexOfInterest[107453] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[107454] "expr temp" "temp"
          (107463 'move' _iterator[107454](107461 call _getIterator(107449 call chpl__serialViewIterHelper arr[107005] viewDom[107009])))
          Defer
          {
            {
              (107480 call _freeIterator _iterator[107454])
            }
          }
          { scopeless type
            (107469 'move' _indexOfInterest[107453](107466 call iteratorIndex _iterator[107454]))
          }
          ForLoop[107455]
          {
            unknown elem[107473] "index var" "insert auto destroy"
            (107475 'move' elem[107473] _indexOfInterest[107453])
            (107451 yield elem[107473])
            label _continueLabel[107458]
            _indexOfInterest[107453]
            _iterator[107454]
          }
          label _breakLabel[107459]
        }
      }
    }
  }
  where {
    (107014 call chpl__isDROrDRView arr[107005])
  }
  function chpl__serialViewIter[107504](arg arr[107502]:_any[178](?), arg viewDom[107506]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107517] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107518] "expr temp" "temp"
      (107527 'move' _iterator[107518](107525 call _getIterator(107513 call chpl__serialViewIterHelper arr[107502] viewDom[107506])))
      Defer
      {
        {
          (107544 call _freeIterator _iterator[107518])
        }
      }
      { scopeless type
        (107533 'move' _indexOfInterest[107517](107530 call iteratorIndex _iterator[107518]))
      }
      ForLoop[107519]
      {
        unknown elem[107537] "index var" "insert auto destroy"
        (107539 'move' elem[107537] _indexOfInterest[107517])
        (107515 yield elem[107537])
        label _continueLabel[107522]
        _indexOfInterest[107517]
        _iterator[107518]
      }
      label _breakLabel[107523]
    }
  }
  function chpl__serialViewIterHelper[107558](arg arr[107556]:_any[178](?), arg viewDom[107560]:_any[178](?)) ref : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[107647] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107648] "expr temp" "temp"
      (107657 'move' _iterator[107648](107655 call _getIterator viewDom[107560]))
      Defer
      {
        {
          (107673 call _freeIterator _iterator[107648])
        }
      }
      { scopeless type
        (107662 'move' _indexOfInterest[107647](107659 call iteratorIndex _iterator[107648]))
      }
      ForLoop[107649]
      {
        unknown i[107666] "index var" "insert auto destroy"
        (107668 'move' i[107666] _indexOfInterest[107647])
        {
          const dataIdx[107617] "const"(107614 IfExpr (107571 call(107567 call . arr[107556] c"isReindexArrayView")) then
          { scopeless
            (107585 call chpl_reindexConvertIdx i[107666](107576 call . arr[107556] c"dom")(107582 call . arr[107556] c"downdom"))
          } else
          { scopeless(107611 IfExpr (107593 call(107589 call . arr[107556] c"isRankChangeArrayView")) then
            { scopeless
              (107609 call chpl_rankChangeConvertIdx i[107666](107600 call . arr[107556] c"collapsedDim")(107606 call . arr[107556] c"idx"))
            } else
            { scopeless
              i[107666]
            } )
          } )
          (107620 'end of statement')
          const info[107634] "const"(107631 IfExpr (107625 call chpl__isArrayView arr[107556]) then
          { scopeless
            (107627 call . arr[107556] c"arr")
          } else
          { scopeless
            arr[107556]
          } )
          (107637 'end of statement')
          (107645 yield(107644 call(107639 call . info[107634] c"dsiAccess") dataIdx[107617]))
        }
        label _continueLabel[107652]
        _indexOfInterest[107647]
        _iterator[107648]
      }
      label _breakLabel[107653]
    }
  }
  function DefaultRectangularDom[100799](?).dsiSerialReadWrite[107688](arg _mt[107693]:_MT[238], arg this[107690]:DefaultRectangularDom[100799](?) :
  DefaultRectangularDom[100799](?), arg f[107686]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107723 call <~>(107717 call <~> f[107686](107696 'new'(107716 call ioLiteral[238670] "{")))(107722 call(381560 call . this[107690] c"ranges") 0))
    {
      unknown _indexOfInterest[107766] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[107767] "expr temp" "temp"
      (107776 'move' _iterator[107767](107774 call _getIterator(107784 call chpl_direct_range_iter 1(107781 call -(381573 call . this[107690] c"rank") 1) 1)))
      Defer
      {
        {
          (107800 call _freeIterator _iterator[107767])
        }
      }
      { scopeless type
        (107789 'move' _indexOfInterest[107766](107786 call iteratorIndex _iterator[107767]))
      }
      ForLoop[107768]
      {
        unknown i[107793] "index var" "insert auto destroy"
        (107795 'move' i[107793] _indexOfInterest[107766])
        (107763 call <~>(107757 call <~> f[107686](107736 'new'(107756 call ioLiteral[238670] ", ")))(107762 call(381567 call . this[107690] c"ranges") i[107793]))
        label _continueLabel[107771]
        _indexOfInterest[107766]
        _iterator[107767]
      }
      label _breakLabel[107772]
    }
    (107829 call <~> f[107686](107808 'new'(107828 call ioLiteral[238670] "}")))
  }
  function DefaultRectangularDom[100799](?).dsiSerialWrite[107839](arg _mt[107844]:_MT[238], arg this[107841]:DefaultRectangularDom[100799](?) :
  DefaultRectangularDom[100799](?), arg f[107837]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107854 call(107849 call . this[107841] c"dsiSerialReadWrite") f[107837])
  }
  function DefaultRectangularDom[100799](?).dsiSerialRead[107864](arg _mt[107869]:_MT[238], arg this[107866]:DefaultRectangularDom[100799](?) :
  DefaultRectangularDom[100799](?), arg f[107862]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107877 call(107872 call . this[107866] c"dsiSerialReadWrite") f[107862])
  }
  function DefaultRectangularArr[106852](?).dsiSerialReadWrite[107887](arg _mt[107892]:_MT[238], arg this[107889]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg f[107885]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (107898 call chpl_serialReadWriteRectangular f[107885] this[107889])
  }
  function DefaultRectangularDom[100799](?).dsiSupportsAutoLocalAccess[107906](arg _mt[107911]:_MT[238], arg this[107908]:DefaultRectangularDom[100799](?) :
  DefaultRectangularDom[100799](?)) param : _unknown[51] "method" "method overrides"
  {
    (107914 return defaultRectangularSupportsAutoLocalAccess[93450])
  }
  function chpl_serialReadWriteRectangular[107923](arg f[107921]:_any[178](?), arg arr[107925]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    (107935 call chpl_serialReadWriteRectangular f[107921] arr[107925](107932 call . arr[107925] c"dom"))
  }
  function chpl_serialReadWriteRectangular[107944](arg f[107942]:_any[178](?), arg arr[107946]:_any[178](?), arg dom[107948]:_any[178](?)) : _unknown[51] throws "last resort" "no return value for void"
  {
    (107955 call chpl_serialReadWriteRectangularHelper f[107942] arr[107946] dom[107948])
  }
  function chpl_serialReadWriteRectangularHelper[107964](arg f[107962]:_any[178](?), arg arr[107966]:_any[178](?), arg dom[107968]:_any[178](?)) : _unknown[51] throws "no return value for void"
  {
    unknown rank[107974] "param"(107971 call . arr[107966] c"rank")
    (107977 'end of statement')
    unknown idxType[107983] "type variable"(107980 call . arr[107966] c"idxType")
    unknown idxSignedType[107993] "type variable"(107992 call chpl__signedType(107990 call chpl__idxTypeToIntIdxType idxType[107983]))
    const isNative[108008] "const"(108006 call _cast bool[10](108004 call(107999 call . f[107962] c"styleElement") QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER[19682]))
    (108011 'end of statement')
    function writeSpaces[108018](arg dim[108015] :
    int(64)[13]) : _unknown[51] throws "no return value for void"
    {
      {
        unknown _indexOfInterest[108035] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[108036] "expr temp" "temp"
        (108045 'move' _iterator[108036](108043 call _getIterator(108050 call chpl_direct_range_iter 1 dim[108015] 1)))
        Defer
        {
          {
            (108066 call _freeIterator _iterator[108036])
          }
        }
        { scopeless type
          (108055 'move' _indexOfInterest[108035](108052 call iteratorIndex _iterator[108036]))
        }
        ForLoop[108037]
        {
          unknown i[108059] "index var" "insert auto destroy"
          (108061 'move' i[108059] _indexOfInterest[108035])
          {
            (108031 call <~> f[107962](108026 'new'(108030 call ioLiteral[238670] " ")))
          }
          label _continueLabel[108040]
          _indexOfInterest[108035]
          _iterator[108036]
        }
        label _breakLabel[108041]
      }
    }
    function recursiveArrayWriter[108085](in arg idx[108082] :
    (108080 call * rank[107974] idxType[107983]), arg dim[108088] =
    0, in arg last[108092] =
    0) : _unknown[51] throws "no return value for void"
    {
      unknown binary[108103](108102 call(108098 call . f[107962] c"binary"))
      (108106 'end of statement')
      unknown arrayStyle[108115](108114 call(108109 call . f[107962] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19662])
      (108118 'end of statement')
      unknown isspace[108128](108126 call &&(108121 call == arrayStyle[108115] QIO_ARRAY_FORMAT_SPACE[19692])(108124 call ! binary[108103]))
      (108131 'end of statement')
      unknown isjson[108141](108139 call &&(108134 call == arrayStyle[108115] QIO_ARRAY_FORMAT_JSON[19702])(108137 call ! binary[108103]))
      (108144 'end of statement')
      unknown ischpl[108154](108152 call &&(108147 call == arrayStyle[108115] QIO_ARRAY_FORMAT_CHPL[19697])(108150 call ! binary[108103]))
      (108157 'end of statement')
      unknown strType[108159] "type variable" idxSignedType[107993]
      unknown makeStridePositive[108188](108185 IfExpr (108173 call >(108169 call .(108168 call(108163 call . dom[107968] c"dsiDim") dim[108088]) c"stride") 0) then
      { scopeless
        (108177 call _cast strType[108159] 1)
      } else
      { scopeless
        (108183 call _cast strType[108159](108180 call - 1))
      } )
      (108191 'end of statement')
      if(108268 call _cond_test(108194 call || isjson[108141] ischpl[108154]))
      {
        if(108262 call _cond_test(108201 call != dim[108088](108199 call - rank[107974] 1)))
        {
          (108225 call <~> f[107962](108204 'new'(108224 call ioLiteral[238670] "[\n")))
          (108235 call writeSpaces(108232 call + dim[108088] 1))
        }
        {
          (108259 call <~> f[107962](108238 'new'(108258 call ioLiteral[238670] "[")))
        }
      }
      if(108591 call _cond_test(108277 call == dim[108088](108275 call - rank[107974] 1)))
      {
        unknown first[108280] 1
        (108283 'end of statement')
        if(108310 call _cond_test(108292 call && debugDefaultDist[93400](108289 call . f[107962] c"writing")))
        {
          (108308 call(108297 call . f[107962] c"writeln")(108306 call(108301 call . dom[107968] c"dsiDim") dim[108088]))
        }
        {
          unknown _indexOfInterest[108392] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108393] "expr temp" "temp"
          (108402 'move' _iterator[108393](108400 call _getIterator(108324 call chpl_by(108322 call(108317 call . dom[107968] c"dsiDim") dim[108088]) makeStridePositive[108188])))
          Defer
          {
            {
              (108425 call _freeIterator _iterator[108393])
            }
          }
          { scopeless type
            (108414 'move' _indexOfInterest[108392](108411 call iteratorIndex _iterator[108393]))
          }
          ForLoop[108394]
          {
            unknown j[108418] "index var" "insert auto destroy"
            (108420 'move' j[108418] _indexOfInterest[108392])
            {
              if(108366 call _cond_test first[108280])
              {
                (108329 call = first[108280] 0)
              }
              {
                if(108360 call _cond_test isspace[108128])
                {
                  (108339 call <~> f[107962](108334 'new'(108338 call ioLiteral[238670] " ")))
                }
                {
                  if(108355 call _cond_test(108344 call || isjson[108141] ischpl[108154]))
                  {
                    (108352 call <~> f[107962](108347 'new'(108351 call ioLiteral[238670] ", ")))
                  }
                }
              }
              (108378 call =(108376 call idx[108082] dim[108088]) j[108418])
              (108389 call <~> f[107962](108388 call(108383 call . arr[107966] c"dsiAccess") idx[108082]))
            }
            label _continueLabel[108397]
            _indexOfInterest[108392]
            _iterator[108393]
          }
          label _breakLabel[108398]
        }
      }
      {
        {
          unknown _indexOfInterest[108550] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[108551] "expr temp" "temp"
          (108560 'move' _iterator[108551](108558 call _getIterator(108441 call chpl_by(108439 call(108434 call . dom[107968] c"dsiDim") dim[108088]) makeStridePositive[108188])))
          Defer
          {
            {
              (108583 call _freeIterator _iterator[108551])
            }
          }
          { scopeless type
            (108572 'move' _indexOfInterest[108550](108569 call iteratorIndex _iterator[108551]))
          }
          ForLoop[108552]
          {
            unknown j[108576] "index var" "insert auto destroy"
            (108578 'move' j[108576] _indexOfInterest[108550])
            {
              unknown lastIdx[108453](108450 call .(108449 call(108444 call . dom[107968] c"dsiDim") dim[108088]) c"last")
              (108456 'end of statement')
              (108463 call =(108461 call idx[108082] dim[108088]) j[108576])
              (108497 call recursiveArrayWriter idx[108082](dim =(108471 call + dim[108088] 1))(last =(108494 call &&(108479 call || last[108092](108477 call == dim[108088] 0))(108492 call == j[108576](108489 call .(108488 call(108483 call . dom[107968] c"dsiDim") dim[108088]) c"alignedHigh")))))
              if(108546 call _cond_test(108501 call || isjson[108141] ischpl[108154]))
              {
                if(108541 call _cond_test(108505 call != j[108576] lastIdx[108453]))
                {
                  (108529 call <~> f[107962](108508 'new'(108528 call ioLiteral[238670] ",\n")))
                  (108539 call writeSpaces(108536 call + dim[108088] 1))
                }
              }
            }
            label _continueLabel[108555]
            _indexOfInterest[108550]
            _iterator[108551]
          }
          label _breakLabel[108556]
        }
      }
      if(108690 call _cond_test isspace[108128])
      {
        if(108615 call _cond_test(108603 call &&(108597 call ! last[108092])(108601 call != dim[108088] 0)))
        {
          (108611 call <~> f[107962](108606 'new'(108610 call ioLiteral[238670] "\n")))
        }
      }
      {
        if(108686 call _cond_test(108622 call || isjson[108141] ischpl[108154]))
        {
          if(108680 call _cond_test(108629 call != dim[108088](108627 call - rank[107974] 1)))
          {
            (108637 call <~> f[107962](108632 'new'(108636 call ioLiteral[238670] "\n")))
            (108644 call writeSpaces dim[108088])
            (108668 call <~> f[107962](108647 'new'(108667 call ioLiteral[238670] "]")))
          }
          {
            (108677 call <~> f[107962](108672 'new'(108676 call ioLiteral[238670] "]")))
          }
        }
      }
    }
    if(109441 call _cond_test(108749 call &&(108735 call &&(108720 call &&(108714 call &&(108704 call && 0(108702 call !(108699 call . f[107962] c"writing")))(108712 call !(108711 call(108707 call . f[107962] c"binary"))))(108718 call == rank[107974] 1))(108733 call ==(108729 call .(108728 call(108723 call . dom[107968] c"dsiDim") 0) c"stride") 1))(108747 call ==(108743 call .(108740 call . dom[107968] c"_arrs") c"size") 1)))
    {
      unknown binary[108757](108756 call(108752 call . f[107962] c"binary"))
      (108760 'end of statement')
      unknown arrayStyle[108769](108768 call(108763 call . f[107962] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19662])
      (108772 'end of statement')
      unknown isspace[108782](108780 call &&(108775 call == arrayStyle[108769] QIO_ARRAY_FORMAT_SPACE[19692])(108778 call ! binary[108757]))
      (108785 'end of statement')
      unknown isjson[108795](108793 call &&(108788 call == arrayStyle[108769] QIO_ARRAY_FORMAT_JSON[19702])(108791 call ! binary[108757]))
      (108798 'end of statement')
      unknown ischpl[108808](108806 call &&(108801 call == arrayStyle[108769] QIO_ARRAY_FORMAT_CHPL[19697])(108804 call ! binary[108757]))
      (108811 'end of statement')
      if(108826 call _cond_test(108814 call || isjson[108795] ischpl[108808]))
      {
        (108822 call <~> f[107962](108817 'new'(108821 call ioLiteral[238670] "[")))
      }
      unknown first[108831] 1
      (108834 'end of statement')
      unknown offset[108845](108842 call .(108841 call(108836 call . dom[107968] c"dsiDim") 0) c"low")
      (108848 'end of statement')
      unknown i[108850] 0
      (108853 'end of statement')
      unknown read_end[108855] 0
      (108858 'end of statement')
      {
        unknown tmp[109091] "temp"
        (109109 'move' tmp[109091](109107 call _cond_test 1))
        WhileDo[109096]
        {
          {
            if(108966 call _cond_test first[108831])
            {
              (108863 call = first[108831] 0)
              Try
              {
                {
                  if(108897 call _cond_test(108869 call || isjson[108795] ischpl[108808]))
                  {
                    (108877 call <~> f[107962](108872 'new'(108876 call ioLiteral[238670] "]")))
                  }
                  {
                    if(108893 call _cond_test isspace[108782])
                    {
                      (108889 call <~> f[107962](108883 'new'(108888 call ioNewline[238618](skipWhitespaceOnly = 1))))
                    }
                  }
                  (108905 call = read_end[108855] 1)
                  break _breakLabel[109095] _breakLabel[109095]
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354284] "temp"(354288 'dynamic_cast' unmanaged BadFormatError?[415664](354287 'current error'))
                if(354291 '!=' tmp[354284] nil[44])
                {
                  unknown err[354297](354302 'new'(354300 call _owned[30](?)(354298 'to non nilable class' tmp[354284])))
                  {
                  }
                }
                {
                }
              }
            }
            {
              Try
              {
                {
                  if(108947 call _cond_test isspace[108782])
                  {
                    (108926 call <~> f[107962](108921 'new'(108925 call ioLiteral[238670] " ")))
                  }
                  {
                    if(108942 call _cond_test(108931 call || isjson[108795] ischpl[108808]))
                    {
                      (108939 call <~> f[107962](108934 'new'(108938 call ioLiteral[238670] ",")))
                    }
                  }
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354305] "temp"(354309 'dynamic_cast' unmanaged BadFormatError?[415664](354308 'current error'))
                if(354312 '!=' tmp[354305] nil[44])
                {
                  unknown err[354318](354323 'new'(354321 call _owned[30](?)(354319 'to non nilable class' tmp[354305])))
                  {
                    break _breakLabel[109095] _breakLabel[109095]
                  }
                }
                {
                }
              }
            }
            if(109068 call _cond_test(108982 call >= i[108850](108979 call .(108978 call(108973 call . dom[107968] c"dsiDim") 0) c"size")))
            {
              unknown sz[108994](108991 call .(108990 call(108985 call . dom[107968] c"dsiDim") 0) c"size")
              (108997 'end of statement')
              if(109008 call _cond_test(109001 call < sz[108994] 4))
              {
                (109005 call = sz[108994] 4)
              }
              (109018 call = sz[108994](109016 call * 2 sz[108994]))
              const newDom[109030] "const"(109028 call chpl__buildDomainExpr(109025 call #(109022 call chpl_build_low_bounded_range offset[108845]) sz[108994]))
              (109033 'end of statement')
              (109042 call(109037 call . arr[107966] c"dsiReallocate") newDom[109030])
              (109057 call(109045 call . dom[107968] c"dsiSetIndices")(109055 call(109051 call . newDom[109030] c"getIndices")))
              (109066 call(109062 call . arr[107966] c"dsiPostReallocate"))
            }
            (109083 call <~> f[107962](109082 call(109074 call . arr[107966] c"dsiAccess")(109079 call + offset[108845] i[108850])))
            (109088 call += i[108850] 1)
          }
          label _continueLabel[109094]
          (109102 'move' tmp[109091](109100 call _cond_test 1))
          tmp[109091]
        }
        label _breakLabel[109095]
      }
      if(109134 call _cond_test(109113 call ! read_end[108855]))
      {
        if(109129 call _cond_test(109117 call || isjson[108795] ischpl[108808]))
        {
          (109125 call <~> f[107962](109120 'new'(109124 call ioLiteral[238670] "]")))
        }
      }
      {
        const newDom[109147] "const"(109145 call chpl__buildDomainExpr(109142 call #(109139 call chpl_build_low_bounded_range offset[108845]) i[108850]))
        (109150 'end of statement')
        (109158 call(109153 call . arr[107966] c"dsiReallocate") newDom[109147])
        (109171 call(109161 call . dom[107968] c"dsiSetIndices")(109169 call(109165 call . newDom[109147] c"getIndices")))
        (109178 call(109174 call . arr[107966] c"dsiPostReallocate"))
      }
    }
    {
      if(109437 call _cond_test(109225 call &&(109214 call &&(109211 call &&(109203 call &&(109194 call &&(109187 call(109183 call . arr[107966] c"isDefaultRectangular"))(109192 call !(109191 call chpl__isArrayView arr[107966])))(109202 call _isSimpleIoType(109198 call . arr[107966] c"eltType")))(109210 call(109206 call . f[107962] c"binary"))) isNative[108008])(109224 call(109219 call . arr[107966] c"isDataContiguous") dom[107968])))
      {
        const elemSize[109234] "const"(109233 call c_sizeof(109229 call . arr[107966] c"eltType"))
        (109237 'end of statement')
        if(109315 call _cond_test 1)
        {
          unknown rw[109249](109246 IfExpr (109241 call . f[107962] c"writing") then
          { scopeless
            "write"
          } else
          { scopeless
            "read"
          } )
          (109252 'end of statement')
          (109313 call assert(109275 call <=(109266 call *(109260 call _cast uint(64)[115](109256 call . dom[107968] c"dsiNumIndices"))(109264 call _cast uint(64)[115] elemSize[109234]))(109273 call _cast uint(64)[115](109271 call max ssize_t[20647]))) "length of array to " rw[109249] " is greater than ssize_t can hold")
        }
        const len[109323] "const"(109320 call . dom[107968] c"dsiNumIndices")
        (109326 'end of statement')
        const src[109331] "const"(109328 call . arr[107966] c"theData")
        (109334 'end of statement')
        const idx[109345] "const"(109344 call(109336 call . arr[107966] c"getDataIndex")(109340 call . dom[107968] c"dsiLow"))
        (109348 'end of statement')
        const size[109359] "const"(109357 call *(109351 call _cast ssize_t[20647] len[109323])(109355 call _cast ssize_t[20647] elemSize[109234]))
        (109362 'end of statement')
        Try
        {
          {
            if(109407 call _cond_test(109364 call . f[107962] c"writing"))
            {
              (109384 call(109370 call . f[107962] c"writeBytes")(109381 call _ddata_shift(109375 call . arr[107966] c"eltType") src[109331] idx[109345]) size[109359])
            }
            {
              (109404 call(109390 call . f[107962] c"readBytes")(109401 call _ddata_shift(109395 call . arr[107966] c"eltType") src[109331] idx[109345]) size[109359])
            }
          }
        }
        Catch err : Error
        {
          unknown tmp[354326] "temp"(354329 'current error')
          unknown err[354332](354337 'new'(354335 call _owned[30](?)(354333 'to non nilable class' tmp[354326])))
          {
            (109417 'throw' err[354332])
          }
        }
      }
      {
        const zeroTup[109427] "const"(109425 call * rank[107974] idxType[107983])
        (109430 'end of statement')
        (109435 call recursiveArrayWriter zeroTup[109427])
      }
    }
  }
  function DefaultRectangularArr[106852](?).dsiSerialWrite[109453](arg _mt[109458]:_MT[238], arg this[109455]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg f[109451]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109463 call(381753 call . this[109455] c"dsiSerialReadWrite") f[109451])
  }
  function DefaultRectangularArr[106852](?).dsiSerialRead[109473](arg _mt[109478]:_MT[238], arg this[109475]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg f[109471]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (109483 call(381758 call . this[109475] c"dsiSerialReadWrite") f[109471])
  }
  function DefaultRectangularArr[106852](?).isDataContiguous[109493](arg _mt[109498]:_MT[238], arg this[109495]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg dom[109491]:_any[178](?)) : _unknown[51] "method"
  {
    if(109541 call _cond_test debugDefaultDistBulkTransfer[93405])
    {
      (109539 call chpl_debug_writeln "isDataContiguous(): off="(381765 call . this[109495] c"off") " blk="(381770 call . this[109495] c"blk"))
    }
    if(109560 call _cond_test(109555 call !=(109553 call(381775 call . this[109495] c"blk")(109550 call -(381780 call . this[109495] c"rank") 1)) 1))
    {
      (109558 return 0)
    }
    if(109663 call _cond_test(109567 call >=(381785 call . this[109495] c"rank") 2))
    {
      const domDims[109577] "const"(109576 call(109572 call . dom[109491] c"dsiDims"))
      (109580 'end of statement')
      {
        unknown dim[109627] 0
        unknown tmp[109628] "maybe param" "temp"
        (109639 'move' tmp[109628](109637 call chpl_compute_low_param_loop_bound 0(109585 call -(381790 call . this[109495] c"rank") 2)))
        unknown tmp[109629] "maybe param" "temp"
        (109649 'move' tmp[109629](109647 call chpl_compute_high_param_loop_bound 0(109644 call -(381809 call . this[109495] c"rank") 2)))
        unknown tmp[109630] "maybe param" "temp"
        (109652 'move' tmp[109630](109590 call - 1))
        ParamForLoop[109654]
        { dim[109627] tmp[109628] tmp[109629] tmp[109630]
          if(109622 call _cond_test(109617 call !=(109597 call(381795 call . this[109495] c"blk") dim[109627])(109615 call *(109604 call(381801 call . this[109495] c"blk")(109601 call + dim[109627] 1))(109612 call .(109611 call domDims[109577](109608 call + dim[109627] 1)) c"size"))))
          {
            (109620 return 0)
          }
        }
        label _unused_continueLabel[109632]
        label _breakLabel[109631]
      }
    }
    if(109689 call _cond_test debugDefaultDistBulkTransfer[93405])
    {
      (109687 call chpl_debug_writeln "\tYES!")
    }
    (109695 return 1)
  }
  function _canDoSimpleTransfer[109703](arg A[109701]:_any[178](?), arg aView[109705]:_any[178](?), arg B[109707]:_any[178](?), arg bView[109709]:_any[178](?)) : _unknown[51] "private"
  {
    if(109768 call _cond_test(109735 call ||(109721 call !(109720 call(109712 call . A[109701] c"isDataContiguous")(109716 call . aView[109705] c"_value")))(109733 call !(109732 call(109724 call . B[109707] c"isDataContiguous")(109728 call . bView[109709] c"_value")))))
    {
      if(109759 call _cond_test debugDefaultDistBulkTransfer[93405])
      {
        (109757 call chpl_debug_writeln "isDataContiguous return False")
      }
      (109766 return 0)
    }
    (109774 return 1)
  }
  function _canDoComplexTransfer[109782](arg A[109780]:_any[178](?), arg aView[109784]:_any[178](?), arg B[109786]:_any[178](?), arg bView[109788]:_any[178](?)) : _unknown[51] "private"
  {
    (109791 return useBulkTransferStride[113739])
  }
  function DefaultRectangularArr[106852](?).doiCanBulkTransferRankChange[109799](arg _mt[109804]:_MT[238], arg this[109801]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?)) param : _unknown[51] "method" "method overrides"
  {
    (109807 return 1)
  }
  function DefaultRectangularArr[106852](?).doiBulkTransferToKnown[109817](arg _mt[109828]:_MT[238], arg this[109825]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg srcDom[109815]:_any[178](?), arg destClass[109820] :
  DefaultRectangularArr[379750](?), arg destDom[109823]:_any[178](?)) : _unknown[51] "method"
  {
    (109838 return(109837 call transferHelper destClass[109820] destDom[109823] this[109825] srcDom[109815]))
  }
  { scopeless type
    bool[10]
  }
  function DefaultRectangularArr[106852](?).doiBulkTransferFromKnown[109849](arg _mt[109860]:_MT[238], arg this[109857]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg destDom[109847]:_any[178](?), arg srcClass[109852] :
  DefaultRectangularArr[379750](?), arg srcDom[109855]:_any[178](?)) : _unknown[51] "method"
  {
    (109870 return(109869 call transferHelper this[109857] destDom[109847] srcClass[109852] srcDom[109855]))
  }
  { scopeless type
    bool[10]
  }
  function transferHelper[109880](arg A[109878]:_any[178](?), arg aView[109882]:_any[178](?), arg B[109884]:_any[178](?), arg bView[109886]:_any[178](?)) : _unknown[51] "private"
  {
    if(110013 call _cond_test(109924 call &&(109915 call &&(109897 call ==(109890 call . A[109878] c"rank")(109894 call . B[109884] c"rank"))(109913 call &&(109904 call ==(109900 call . aView[109882] c"stridable") 0)(109911 call ==(109907 call . bView[109886] c"stridable") 0)))(109923 call _canDoSimpleTransfer A[109878] aView[109882] B[109884] bView[109886])))
    {
      if(109948 call _cond_test debugDefaultDistBulkTransfer[93405])
      {
        (109946 call chpl_debug_writeln "Performing simple DefaultRectangular transfer")
      }
      (109960 call _simpleTransfer A[109878] aView[109882] B[109884] bView[109886])
    }
    {
      if(110009 call _cond_test(109968 call _canDoComplexTransfer A[109878] aView[109882] B[109884] bView[109886]))
      {
        if(109991 call _cond_test debugDefaultDistBulkTransfer[93405])
        {
          (109989 call chpl_debug_writeln "Performing complex DefaultRectangular transfer")
        }
        (110003 call complexTransfer A[109878] aView[109882] B[109884] bView[109886])
      }
      {
        (110006 return 0)
      }
    }
    (110020 return 1)
  }
  { scopeless type
    bool[10]
  }
  function _simpleTransfer[110029](arg A[110027]:_any[178](?), arg aView[110031]:_any[178](?), arg B[110033]:_any[178](?), arg bView[110035]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown rank[110041] "param"(110038 call . A[110027] c"rank")
    (110044 'end of statement')
    unknown idxType[110050] "type variable"(110047 call . A[110027] c"idxType")
    const Adims[110059] "const"(110058 call(110054 call . aView[110031] c"dims"))
    (110062 'end of statement')
    unknown Alo[110070](110068 call * rank[110041](110065 call . aView[110031] c"idxType"))
    (110073 'end of statement')
    {
      unknown i[110095] 0
      unknown tmp[110096] "maybe param" "temp"
      (110108 'move' tmp[110096](110106 call chpl_compute_low_param_loop_bound 0(110077 call - rank[110041] 1)))
      unknown tmp[110097] "maybe param" "temp"
      (110118 'move' tmp[110097](110116 call chpl_compute_high_param_loop_bound 0(110113 call - rank[110041] 1)))
      unknown tmp[110098] "maybe param" "temp"
      (110121 'move' tmp[110098] 1)
      ParamForLoop[110123]
      { i[110095] tmp[110096] tmp[110097] tmp[110098]
        (110092 call =(110084 call Alo[110070] i[110095])(110089 call .(110088 call Adims[110059] i[110095]) c"first"))
      }
      label _unused_continueLabel[110100]
      label _breakLabel[110099]
    }
    const Bdims[110138] "const"(110137 call(110133 call . bView[110035] c"dims"))
    (110141 'end of statement')
    unknown Blo[110149](110147 call * rank[110041](110144 call . B[110033] c"idxType"))
    (110152 'end of statement')
    {
      unknown i[110174] 0
      unknown tmp[110175] "maybe param" "temp"
      (110187 'move' tmp[110175](110185 call chpl_compute_low_param_loop_bound 0(110156 call - rank[110041] 1)))
      unknown tmp[110176] "maybe param" "temp"
      (110197 'move' tmp[110176](110195 call chpl_compute_high_param_loop_bound 0(110192 call - rank[110041] 1)))
      unknown tmp[110177] "maybe param" "temp"
      (110200 'move' tmp[110177] 1)
      ParamForLoop[110202]
      { i[110174] tmp[110175] tmp[110176] tmp[110177]
        (110171 call =(110163 call Blo[110149] i[110174])(110168 call .(110167 call Bdims[110138] i[110174]) c"first"))
      }
      label _unused_continueLabel[110179]
      label _breakLabel[110178]
    }
    const len[110221] "const"(110220 call(110215 call .(110212 call . aView[110031] c"size") c"safeCast") size_t[20654])
    (110224 'end of statement')
    if(110231 call _cond_test(110227 call == len[110221] 0))
    {
      (110229 return _void[55])
    }
    if(110352 call _cond_test debugBulkTransfer[113729])
    {
      function sizeof[110241](arg x[110239]:_any[178](?)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
      {
      }
      { scopeless type
        int(64)[13]
      }
      const elemSize[110255] "const"(110254 call sizeof(110250 call . B[110033] c"eltType"))
      (110258 'end of statement')
      (110350 call chpl_debug_writeln "In DefaultRectangular._simpleTransfer():" " Alo=" Alo[110070] ", Blo=" Blo[110149] ", len=" len[110221] ", elemSize=" elemSize[110255])
    }
    const Aidx[110363] "const"(110362 call(110357 call . A[110027] c"getDataIndex") Alo[110070])
    (110366 'end of statement')
    const Adata[110379] "const"(110378 call _ddata_shift(110369 call . A[110027] c"eltType")(110374 call . A[110027] c"theData") Aidx[110363])
    (110382 'end of statement')
    const Bidx[110390] "const"(110389 call(110384 call . B[110033] c"getDataIndex") Blo[110149])
    (110393 'end of statement')
    const Bdata[110406] "const"(110405 call _ddata_shift(110396 call . B[110033] c"eltType")(110401 call . B[110033] c"theData") Bidx[110390])
    (110409 'end of statement')
    (110417 call _simpleTransferHelper A[110027] B[110033] Adata[110379] Bdata[110406] len[110221])
  }
  function _simpleTransferHelper[110425](arg A[110423]:_any[178](?), arg B[110427]:_any[178](?), arg Adata[110429]:_any[178](?), arg Bdata[110431]:_any[178](?), arg len[110433]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110441 call _cond_test(110437 call == Adata[110429] Bdata[110431]))
    {
      (110439 return _void[55])
    }
    if(110679 call _cond_test(110456 call ==(110451 '_wide_get_node' Adata[110429])(110453 call .(359004 call here[90439]) c"id")))
    {
      if(110485 call _cond_test debugDefaultDistBulkTransfer[93405])
      {
        (110483 call chpl_debug_writeln "\tlocal get() from "(110482 '_wide_get_node' B[110427]))
      }
      (110507 'chpl_comm_array_get'(110496 call Adata[110429] 0)(110501 '_wide_get_node' Bdata[110431])(110505 call Bdata[110431] 0) len[110433])
    }
    {
      if(110674 call _cond_test(110518 call ==(110513 '_wide_get_node' Bdata[110431])(110515 call .(359006 call here[90439]) c"id")))
      {
        if(110547 call _cond_test debugDefaultDistBulkTransfer[93405])
        {
          (110545 call chpl_debug_writeln "\tlocal put() to "(110544 '_wide_get_node' A[110423]))
        }
        (110585 'chpl_comm_array_put'(110574 call Bdata[110431] 0)(110579 '_wide_get_node' Adata[110429])(110583 call Adata[110429] 0) len[110433])
      }
      {
        {
          const tmp[110666] "const" "temp"
          (110667 'move' tmp[110666](110664 'deref'(110663 '_wide_get_locale'(110589 call chpl_localeID_to_locale(110588 '_wide_get_locale' Adata[110429])))))
          {
            if(110639 call _cond_test debugDefaultDistBulkTransfer[93405])
            {
              (110637 call chpl_debug_writeln "\tremote get() on "(110612 call .(359008 call here[90439]) c"id") " from "(110636 '_wide_get_node' B[110427]))
            }
            (110661 'chpl_comm_array_get'(110650 call Adata[110429] 0)(110655 '_wide_get_node' Bdata[110431])(110659 call Bdata[110431] 0) len[110433])
          }
          (110670 'elided on block' 0 tmp[110666])
        }
      }
    }
  }
  function complexTransfer[110690](arg A[110688]:_any[178](?), arg aView[110692]:_any[178](?), arg B[110694]:_any[178](?), arg bView[110696]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(110798 call _cond_test(110726 call &&(110710 call !=(110705 '_wide_get_node'(110699 call . A[110688] c"data"))(110707 call .(359011 call here[90439]) c"id"))(110724 call !=(110719 '_wide_get_node'(110713 call . B[110694] c"data"))(110721 call .(359014 call here[90439]) c"id"))))
    {
      if(110761 call _cond_test debugDefaultDistBulkTransfer[93405])
      {
        (110758 call chpl_debug_writeln "BulkTransferStride: Both arrays on different locale, moving to locale of destination: LOCALE"(110757 '_wide_get_node'(110751 call . A[110688] c"data")))
      }
      {
        const tmp[110781] "const" "temp"
        (110782 'move' tmp[110781](110779 'deref'(110778 '_wide_get_locale'(110767 call . A[110688] c"data"))))
        (110776 call complexTransferCore A[110688] aView[110692] B[110694] bView[110696])
        (110785 'elided on block' 0 tmp[110781])
      }
    }
    {
      (110795 call complexTransferCore A[110688] aView[110692] B[110694] bView[110696])
    }
  }
  function complexTransferCore[110809](arg LHS[110807]:_any[178](?), arg LViewDom[110811]:_any[178](?), arg RHS[110813]:_any[178](?), arg RViewDom[110815]:_any[178](?)) : _unknown[51] "private"
  {
    unknown minRank[110828] "param"(110827 call min(110819 call . LHS[110807] c"rank")(110824 call . RHS[110813] c"rank"))
    (110831 'end of statement')
    unknown idxType[110837] "type variable"(110834 call . LHS[110807] c"idxType")
    unknown intIdxType[110844] "type variable"(110841 call . LHS[110807] c"intIdxType")
    if(110929 call _cond_test debugDefaultDistBulkTransfer[93405])
    {
      (110886 call writeln "Transferring views :" LViewDom[110811] " <-- " RViewDom[110815])
      (110927 call writeln "Original domains   :"(110916 call(110912 call .(110909 call . LHS[110807] c"dom") c"dsiDims")) " <-- "(110926 call(110922 call .(110919 call . RHS[110813] c"dom") c"dsiDims")))
    }
    const LeftDims[110939] "const"(110938 call(110934 call . LViewDom[110811] c"dims"))
    (110942 'end of statement')
    const RightDims[110949] "const"(110948 call(110944 call . RViewDom[110815] c"dims"))
    (110952 'end of statement')
    const tmp[110965] "const" "temp"(110964 call bulkCommComputeActiveDims LeftDims[110939] RightDims[110949])
    (110975 call _check_tuple_var_decl tmp[110965] 3)
    const LeftActives[110953] "const"(110966 call tmp[110965] 0)
    const RightActives[110955] "const"(110969 call tmp[110965] 1)
    const inferredRank[110957] "const"(110972 call tmp[110965] 2)
    (110980 'end of statement')
    unknown DimSizes[110998](110996 call chpl__buildArrayRuntimeType(110994 call chpl__ensureDomainExpr(110983 call chpl_build_bounded_range 1 inferredRank[110957]))(110993 'typeof'(110990 call .(110989 call LeftDims[110939] 0) c"size")))
    (111001 'end of statement')
    {
      unknown _indexOfInterest[111033] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111034] "expr temp" "temp"
      (111043 'move' _iterator[111034](111041 call _getIterator(111048 call chpl_direct_range_iter 1 inferredRank[110957] 1)))
      Defer
      {
        {
          (111064 call _freeIterator _iterator[111034])
        }
      }
      { scopeless type
        (111053 'move' _indexOfInterest[111033](111050 call iteratorIndex _iterator[111034]))
      }
      ForLoop[111035]
      {
        unknown i[111057] "index var" "insert auto destroy"
        (111059 'move' i[111057] _indexOfInterest[111033])
        {
          const dimIdx[111014] "const"(111013 call LeftActives[110953](111010 call - i[111057] 1))
          (111017 'end of statement')
          (111030 call =(111022 call DimSizes[110998] i[111057])(111027 call .(111026 call LeftDims[110939] dimIdx[111014]) c"size"))
        }
        label _continueLabel[111038]
        _indexOfInterest[111033]
        _iterator[111034]
      }
      label _breakLabel[111039]
    }
    if(111095 call _cond_test debugDefaultDistBulkTransfer[93405])
    {
      (111092 call writeln "inferredRank = " inferredRank[110957])
    }
    (111122 call assert(111102 call <= inferredRank[110957] minRank[110828]) "complex DR transfer: computed rank greater than minimum rank!")
    unknown LBlk[111124](111129 call * minRank[110828] intIdxType[110844])
    unknown RBlk[111131](111135 'typeof' LBlk[111124])
    (111136 'end of statement')
    {
      {
        unknown _indexOfInterest[111258] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111259] "expr temp" "temp"
        (111268 'move' _iterator[111259](111266 call _getIterator(111279 call chpl_direct_range_iter 1 inferredRank[110957](111275 call - 1))))
        Defer
        {
          {
            (111295 call _freeIterator _iterator[111259])
          }
        }
        { scopeless type
          (111284 'move' _indexOfInterest[111258](111281 call iteratorIndex _iterator[111259]))
        }
        ForLoop[111260]
        {
          unknown idx[111288] "index var" "insert auto destroy"
          (111290 'move' idx[111288] _indexOfInterest[111258])
          {
            const li[111154] "const"(111153 call LeftActives[110953](111150 call - idx[111288] 1))
            (111157 'end of statement')
            (111200 call =(111165 call LBlk[111124](111162 call - idx[111288] 1))(111198 call *(111172 call(111167 call . LHS[110807] c"blk") li[111154])(111196 call _cast intIdxType[110844](111193 call /(111177 call .(111176 call LeftDims[110939] li[111154]) c"stride")(111190 call .(111189 call(111184 call .(111181 call . LHS[110807] c"dom") c"dsiDim") li[111154]) c"stride")))))
            const ri[111210] "const"(111209 call RightActives[110955](111206 call - idx[111288] 1))
            (111213 'end of statement')
            (111255 call =(111220 call RBlk[111131](111217 call - idx[111288] 1))(111253 call *(111227 call(111222 call . RHS[110813] c"blk") ri[111210])(111251 call _cast intIdxType[110844](111248 call /(111232 call .(111231 call RightDims[110949] ri[111210]) c"stride")(111245 call .(111244 call(111239 call .(111236 call . RHS[110813] c"dom") c"dsiDim") ri[111210]) c"stride")))))
          }
          label _continueLabel[111263]
          _indexOfInterest[111258]
          _iterator[111259]
        }
        label _breakLabel[111264]
      }
    }
    if(111349 call _cond_test debugDefaultDistBulkTransfer[93405])
    {
      (111324 call writeln "LBlk = " LBlk[111124])
      (111347 call writeln "RBlk = " RBlk[111131])
    }
    unknown stridelevels[111354] 0
    (111357 'end of statement')
    unknown countDom[111368](111366 call chpl__buildDomainExpr(111363 call chpl_build_bounded_range 1(111361 call + inferredRank[110957] 1)))
    (111371 'end of statement')
    unknown count[111379](111377 call chpl__buildArrayRuntimeType(111375 call chpl__ensureDomainExpr countDom[111368]) size_t[20654])
    (111382 'end of statement')
    {
      unknown _indexOfInterest[111390] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111391] "expr temp" "temp"
      (111400 'move' _iterator[111391](111398 call _getIterator count[111379]))
      Defer
      {
        {
          (111416 call _freeIterator _iterator[111391])
        }
      }
      { scopeless type
        (111405 'move' _indexOfInterest[111390](111402 call iteratorIndex _iterator[111391]))
      }
      ForLoop[111392]
      {
        unknown c[111409] "index var" "insert auto destroy"
        (111411 'move' c[111409] _indexOfInterest[111390])
        (111387 call = c[111409] 1)
        label _continueLabel[111395]
        _indexOfInterest[111390]
        _iterator[111391]
      }
      label _breakLabel[111396]
    }
    unknown strideDom[111430](111428 call chpl__buildDomainExpr(111425 call chpl_build_bounded_range 1 inferredRank[110957]))
    (111433 'end of statement')
    unknown dstStride[111434](111442 call chpl__buildArrayRuntimeType(111440 call chpl__ensureDomainExpr strideDom[111430]) size_t[20654])
    unknown srcStride[111444](111448 'typeof' dstStride[111434])
    (111449 'end of statement')
    if(111526 call _cond_test(111470 call ||(111458 call >(111456 call LBlk[111124](111453 call - inferredRank[110957] 1)) 1)(111468 call >(111466 call RBlk[111131](111463 call - inferredRank[110957] 1)) 1)))
    {
      (111474 call += stridelevels[111354] 1)
      (111483 call =(111481 call count[111379] stridelevels[111354]) 1)
      (111503 call =(111489 call dstStride[111434] stridelevels[111354])(111502 call(111497 call .(111496 call LBlk[111124](111493 call - inferredRank[110957] 1)) c"safeCast") size_t[20654]))
      (111523 call =(111509 call srcStride[111444] stridelevels[111354])(111522 call(111517 call .(111516 call RBlk[111131](111513 call - inferredRank[110957] 1)) c"safeCast") size_t[20654]))
    }
    {
      unknown _indexOfInterest[111636] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111637] "expr temp" "temp"
      (111646 'move' _iterator[111637](111644 call _getIterator(111657 call chpl_direct_range_iter 2 inferredRank[110957](111653 call - 1))))
      Defer
      {
        {
          (111673 call _freeIterator _iterator[111637])
        }
      }
      { scopeless type
        (111662 'move' _indexOfInterest[111636](111659 call iteratorIndex _iterator[111637]))
      }
      ForLoop[111638]
      {
        unknown i[111666] "index var" "insert auto destroy"
        (111668 'move' i[111666] _indexOfInterest[111636])
        {
          (111557 call *=(111546 call count[111379](111543 call + stridelevels[111354] 1))(111556 call(111551 call .(111550 call DimSizes[110998] i[111666]) c"safeCast") size_t[20654]))
          const bothReuse[111579] "const"(111577 call &&(111568 call canReuseStride LBlk[111124] i[111666] stridelevels[111354] count[111379] dstStride[111434])(111576 call canReuseStride RBlk[111131] i[111666] stridelevels[111354] count[111379] srcStride[111444]))
          (111582 'end of statement')
          if(111632 call _cond_test(111584 call ! bothReuse[111579]))
          {
            (111588 call += stridelevels[111354] 1)
            (111609 call =(111595 call dstStride[111434] stridelevels[111354])(111608 call(111603 call .(111602 call LBlk[111124](111599 call - i[111666] 2)) c"safeCast") size_t[20654]))
            (111629 call =(111615 call srcStride[111444] stridelevels[111354])(111628 call(111623 call .(111622 call RBlk[111131](111619 call - i[111666] 2)) c"safeCast") size_t[20654]))
          }
        }
        label _continueLabel[111641]
        _indexOfInterest[111636]
        _iterator[111637]
      }
      label _breakLabel[111642]
    }
    (111697 call *=(111686 call count[111379](111683 call + stridelevels[111354] 1))(111696 call(111691 call .(111690 call DimSizes[110998] 1) c"safeCast") size_t[20654]))
    (111723 call assert(111703 call <= stridelevels[111354] inferredRank[110957]) "BulkTransferStride: stride levels greater than rank.")
    if(111785 call _cond_test(111727 call == stridelevels[111354] 0))
    {
      (111783 call assert(111738 call ==(111733 call count[111379] 1)(111735 call . LViewDom[110811] c"size")) "BulkTransferStride: bulk-count incorrect for stride level of 0: "(111761 call count[111379] 1) " != "(111780 call . LViewDom[110811] c"size"))
    }
    (111801 call = countDom[111368](111799 call chpl__buildDomainExpr(111796 call chpl_build_bounded_range 1(111794 call + stridelevels[111354] 1))))
    (111812 call = strideDom[111430](111810 call chpl__buildDomainExpr(111807 call chpl_build_bounded_range 1 stridelevels[111354])))
    function getFirstIdx[111819](arg dims[111817]:_any[178](?)) : _unknown[51]
    {
      unknown ret[111834](111832 call *(111822 call . dims[111817] c"size")(111829 call .(111828 call dims[111817] 0) c"idxType"))
      (111837 'end of statement')
      {
        unknown i[111883] 0
        unknown tmp[111884] "maybe param" "temp"
        (111896 'move' tmp[111884](111894 call chpl_compute_low_param_loop_bound 0(111845 call -(111841 call . dims[111817] c"size") 1)))
        unknown tmp[111885] "maybe param" "temp"
        (111909 'move' tmp[111885](111907 call chpl_compute_high_param_loop_bound 0(111901 call -(111903 call . dims[111817] c"size") 1)))
        unknown tmp[111886] "maybe param" "temp"
        (111912 'move' tmp[111886] 1)
        ParamForLoop[111914]
        { i[111883] tmp[111884] tmp[111885] tmp[111886]
          (111880 call =(111852 call ret[111834] i[111883])(111877 IfExpr (111861 call <(111857 call .(111856 call dims[111817] i[111883]) c"stride") 0) then
          { scopeless
            (111867 call .(111866 call dims[111817] i[111883]) c"last")
          } else
          { scopeless
            (111874 call .(111873 call dims[111817] i[111883]) c"first")
          } ))
        }
        label _unused_continueLabel[111888]
        label _breakLabel[111887]
      }
      (111924 return ret[111834])
    }
    const LFirst[111932] "const"(111931 call getFirstIdx LeftDims[110939])
    (111935 'end of statement')
    const RFirst[111940] "const"(111939 call getFirstIdx RightDims[110949])
    (111943 'end of statement')
    (111960 call complexTransferComm LHS[110807] RHS[110813](111953 call _cast(111952 call int(64)[13] 32) stridelevels[111354]) dstStride[111434] srcStride[111444] count[111379] LFirst[111932] RFirst[111940])
  }
  function complexTransferComm[111968](arg A[111966]:_any[178](?), arg B[111970]:_any[178](?), arg stridelevels[111976] :
  (111975 call int(64)[13] 32), arg dstStride[111979]:_any[178](?), arg srcStride[111981]:_any[178](?), arg count[111983]:_any[178](?), arg AFirst[111985]:_any[178](?), arg BFirst[111987]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(112124 call _cond_test debugDefaultDistBulkTransfer[93405])
    {
      (112121 call chpl_debug_writeln "BulkTransferStride with values:\n" "\tLocale        = "(112032 call stringify(112028 call .(359035 call here[90439]) c"id")) "\n" "\tStride levels = "(112054 call stringify stridelevels[111976]) "\n" "\tdstStride     = "(112076 call stringify dstStride[111979]) "\n" "\tsrcStride     = "(112098 call stringify srcStride[111981]) "\n" "\tcount         = "(112120 call stringify count[111983]))
    }
    const AO[112138] "const"(112137 call(112130 call . A[111966] c"getDataIndex") AFirst[111985](getShifted = 0))
    (112141 'end of statement')
    const BO[112151] "const"(112150 call(112143 call . B[111970] c"getDataIndex") BFirst[111987](getShifted = 0))
    (112154 'end of statement')
    const dest[112159] "const"(112156 call . A[111966] c"data")
    (112162 'end of statement')
    const src[112167] "const"(112164 call . B[111970] c"data")
    (112170 'end of statement')
    const dststr[112178] "const"(112175 call .(112172 call . dstStride[111979] c"_value") c"data")
    (112181 'end of statement')
    const srcstr[112189] "const"(112186 call .(112183 call . srcStride[111981] c"_value") c"data")
    (112192 'end of statement')
    const cnt[112200] "const"(112197 call .(112194 call . count[111983] c"_value") c"data")
    (112203 'end of statement')
    if(112451 call _cond_test(112213 call ==(112208 '_wide_get_node' dest[112159])(112210 call .(359044 call here[90439]) c"id")))
    {
      const srclocale[112226] "const"(112224 call _cast(112223 call int(64)[13] 32)(112219 '_wide_get_node' src[112167]))
      (112229 'end of statement')
      if(112255 call _cond_test debugBulkTransfer[113729])
      {
        (112252 call chpl_debug_writeln "BulkTransferStride: On LHS - GET from " srclocale[112226])
      }
      (112299 'chpl_comm_get_strd'(112280 call dest[112159] AO[112138])(112284 call dststr[112178] 0) srclocale[112226](112289 call src[112167] BO[112151])(112293 call srcstr[112189] 0)(112297 call cnt[112200] 0) stridelevels[111976])
    }
    {
      const destlocale[112312] "const"(112310 call _cast(112309 call int(64)[13] 32)(112305 '_wide_get_node' dest[112159]))
      (112315 'end of statement')
      if(112377 call _cond_test debugDefaultDistBulkTransfer[93405])
      {
        (112374 call assert(112328 call ==(112323 '_wide_get_node' src[112167])(112325 call .(359046 call here[90439]) c"id")) "BulkTransferStride: Expected to be on "(112352 '_wide_get_node' src[112167]) ", actually on "(112371 call .(359048 call here[90439]) c"id"))
      }
      if(112405 call _cond_test debugBulkTransfer[113729])
      {
        (112402 call chpl_debug_writeln "BulkTransferStride: On RHS - PUT to " destlocale[112312])
      }
      (112449 'chpl_comm_put_strd'(112430 call dest[112159] AO[112138])(112434 call dststr[112178] 0) destlocale[112312](112439 call src[112167] BO[112151])(112443 call srcstr[112189] 0)(112447 call cnt[112200] 0) stridelevels[111976])
    }
  }
  function DefaultRectangularArr[106852](?).isDefaultRectangular[112460](arg _mt[112465]:_MT[238], arg this[112462]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?)) param : _unknown[51] "method" "method overrides"
  {
    (112468 return 1)
  }
  function DefaultRectangularArr[415355](?).isDefaultRectangular[112476](arg _mt[112481]:_MT[238], arg this[112478]:DefaultRectangularArr[415355](?)) param : _unknown[51] "method"
  {
    (112484 return 1)
  }
  unknown debugDRScan[112490] "config" "param" 0
  (112493 'end of statement')
  function DefaultRectangularArr[106852](?).doiScan[112499](arg _mt[112506]:_MT[238], arg this[112503]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg op[112497]:_any[178](?), arg dom[112501]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[112529] "type variable"(112528 'typeof'(112527 call(112523 call . op[112497] c"generate")))
    unknown res[112539](112537 call chpl__buildArrayRuntimeType(112535 call chpl__ensureDomainExpr dom[112501]) resType[112529])
    (112542 'end of statement')
    unknown tmp[112563] "temp"(112562 call(112555 call . this[112503] c"chpl__preScan") op[112497] res[112539] dom[112501])
    (112573 call _check_tuple_var_decl tmp[112563] 4)
    unknown numTasks[112543](112564 call tmp[112563] 0)
    unknown rngs[112545](112567 call tmp[112563] 1)
    unknown state[112547](112570 call tmp[112563] 2)
    (112578 'end of statement')
    (112591 call(112582 call . this[112503] c"chpl__postScan") op[112497] res[112539] numTasks[112543] rngs[112545] state[112547])
    (112595 call chpl__delete op[112497])
    (112599 return res[112539])
    (355153 'used modules list'(112519 'use' RangeChunk[266375]))
  }
  where {
    (112516 call &&(112510 call ==(382072 call . this[112503] c"rank") 1)(112515 call chpl__scanStateResTypesMatch op[112497]))
  }
  function DefaultRectangularArr[106852](?).doiSwap[112609](arg _mt[112614]:_MT[238], arg this[112611]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg arr[112607]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (112624 call <=>(112617 call . this[112611] c"data")(112621 call . arr[112607] c"data"))
    (112633 call(112629 call . this[112611] c"initShiftedData"))
    (112640 call(112636 call . arr[112607] c"initShiftedData"))
  }
  function DefaultRectangularArr[106852](?).chpl__preScan[112649](arg _mt[112664]:_MT[238], arg this[112661]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg op[112647]:_any[178](?), arg res[112656] :
  (112653 call chpl__buildArrayRuntimeType nil[44] unknown resType[112651]), arg dom[112659]:_any[178](?)) : _unknown[51] "method"
  {
    const rng[112679] "const"(112678 call(112673 call . dom[112659] c"dim") 0)
    (112682 'end of statement')
    const numTasks[112697] "const"(112694 IfExpr (112685 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (112693 call _computeNumChunks(112689 call . rng[112679] c"size"))
    } )
    (112700 'end of statement')
    const rngs[112711] "const"(112710 call chunks module=[255] RangeChunk[266375] rng[112679] numTasks[112697])
    (112714 'end of statement')
    if(112778 call _cond_test debugDRScan[112490])
    {
      (112753 call writeln "Using " numTasks[112697] " tasks")
      (112776 call writeln "Whose chunks are: " rngs[112711])
    }
    unknown state[112792](112790 call chpl__buildArrayRuntimeType(112788 call chpl__ensureDomainExpr(112783 call . rngs[112711] c"indices")) resType[112651])
    (112795 'end of statement')
    if(112986 call _cond_test(112798 call == numTasks[112697] 1))
    {
      (112809 call preScanChunk(112805 call .(112802 call . rngs[112711] c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[112823] "expr temp" "maybe ref" "no copy" "temp"
        (112826 'move' tmpIter[112823](112814 call . rngs[112711] c"indices"))
        unknown isRngDomArr[112966] "maybe param" "temp"
        (112981 'move' isRngDomArr[112966](112979 call ||(112968 call isBoundedRange tmpIter[112823])(112977 call ||(112971 call isDomain tmpIter[112823])(112974 call isArray tmpIter[112823]))))
        if isRngDomArr[112966]
        {
          const _coforallCount[112833] "const" "end count" "temp"
          (112902 'move' _coforallCount[112833](112899 call _endCountAlloc 1))
          unknown numTasks[112834] "temp"
          (112886 'move' numTasks[112834](112882 call . tmpIter[112823] c"size"))
          (112877 call _upEndCount _coforallCount[112833] 1 numTasks[112834])
          (112874 call chpl_resetTaskSpawn numTasks[112834])
          unknown _indexOfInterest[112841] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112842] "expr temp" "temp"
          (112851 'move' _iterator[112842](112849 call _getIterator tmpIter[112823]))
          Defer
          {
            {
              (112867 call _freeIterator _iterator[112842])
            }
          }
          { scopeless type
            (112856 'move' _indexOfInterest[112841](112853 call iteratorIndex _iterator[112842]))
          }
          ForLoop[112843]
          {
            unknown tid[112860] "coforall index var" "index var" "insert auto destroy"
            (112862 'move' tid[112860] _indexOfInterest[112841])
            {
              {
                (112830 call preScanChunk tid[112860])
              }
              (112836 call _downEndCount _coforallCount[112833] nil[44])
              (112835 'coforall loop')
            }
            label _continueLabel[112846]
            _indexOfInterest[112841]
            _iterator[112842]
          }
          label _breakLabel[112847]
          Defer
          {
            {
              (112889 call _endCountFree _coforallCount[112833])
            }
          }
          (112894 call _waitEndCount _coforallCount[112833] 1 numTasks[112834])
        }
        {
          const _coforallCount[112906] "const" "end count" "temp"
          (112963 'move' _coforallCount[112906](112960 call _endCountAlloc 1))
          unknown _indexOfInterest[112914] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[112915] "expr temp" "temp"
          (112924 'move' _iterator[112915](112922 call _getIterator tmpIter[112823]))
          Defer
          {
            {
              (112940 call _freeIterator _iterator[112915])
            }
          }
          { scopeless type
            (112929 'move' _indexOfInterest[112914](112926 call iteratorIndex _iterator[112915]))
          }
          ForLoop[112916]
          {
            unknown tid[112933] "coforall index var" "index var" "insert auto destroy"
            (112935 'move' tid[112933] _indexOfInterest[112914])
            (112947 call _upEndCount _coforallCount[112906] 1)
            {
              {
                (112820 call preScanChunk tid[112933])
              }
              (112909 call _downEndCount _coforallCount[112906] nil[44])
              (112908 'coforall loop')
            }
            label _continueLabel[112919]
            _indexOfInterest[112914]
            _iterator[112915]
          }
          label _breakLabel[112920]
          Defer
          {
            {
              (112951 call _endCountFree _coforallCount[112906])
            }
          }
          (112956 call _waitEndCount _coforallCount[112906] 1)
        }
      }
    }
    function preScanChunk[112994](arg tid[112992]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const current[112997] "const" resType[112651]
      (113000 'end of statement')
      const myop[113008] "const"(113007 call(113003 call . op[112647] c"clone"))
      (113011 'end of statement')
      {
        unknown _indexOfInterest[113047] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113048] "expr temp" "temp"
        (113057 'move' _iterator[113048](113055 call _getIterator(113016 call rngs[112711] tid[112992])))
        Defer
        {
          {
            (113074 call _freeIterator _iterator[113048])
          }
        }
        { scopeless type
          (113063 'move' _indexOfInterest[113047](113060 call iteratorIndex _iterator[113048]))
        }
        ForLoop[113049]
        {
          unknown i[113067] "index var" "insert auto destroy"
          (113069 'move' i[113067] _indexOfInterest[113047])
          {
            unknown elem[113021] "ref var"(113020 call(382101 call . this[112661] c"dsiAccess") i[113067])
            (113024 'end of statement')
            (113032 call(113027 call . myop[113008] c"accumulate") elem[113021])
            (113044 call =(113037 call res[112656] i[113067])(113043 call(113039 call . myop[113008] c"generate")))
          }
          label _continueLabel[113052]
          _indexOfInterest[113047]
          _iterator[113048]
        }
        label _breakLabel[113053]
      }
      (113095 call =(113084 call state[112792] tid[112992])(113094 call res[112656](113090 call .(113089 call rngs[112711] tid[112992]) c"high")))
      (113100 call chpl__delete myop[113008])
    }
    if(113151 call _cond_test debugDRScan[112490])
    {
      (113126 call writeln "res = " res[112656])
      (113149 call writeln "state = " state[112792])
    }
    const metaop[113161] "const"(113160 call(113156 call . op[112647] c"clone"))
    (113164 'end of statement')
    unknown next[113170](113167 call . metaop[113161] c"identity") resType[112651]
    (113173 'end of statement')
    {
      unknown _indexOfInterest[113202] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[113203] "expr temp" "temp"
      (113212 'move' _iterator[113203](113210 call _getIterator(113176 call . rngs[112711] c"indices")))
      Defer
      {
        {
          (113229 call _freeIterator _iterator[113203])
        }
      }
      { scopeless type
        (113218 'move' _indexOfInterest[113202](113215 call iteratorIndex _iterator[113203]))
      }
      ForLoop[113204]
      {
        unknown i[113222] "index var" "insert auto destroy"
        (113224 'move' i[113222] _indexOfInterest[113202])
        {
          (113184 call <=>(113182 call state[112792] i[113222]) next[113170])
          (113200 call(113191 call . metaop[113161] c"accumulateOntoState") next[113170](113199 call state[112792] i[113222]))
        }
        label _continueLabel[113207]
        _indexOfInterest[113202]
        _iterator[113203]
      }
      label _breakLabel[113208]
    }
    (113238 call chpl__delete metaop[113161])
    if(113248 call _cond_test debugDRScan[112490])
    {
      (113246 call writeln "state = " state[112792])
    }
    (113260 return(113258 call _build_tuple numTasks[112697] rngs[112711] state[112792] next[113170]))
    (355155 'used modules list'(112667 'import' RangeChunk[266375]))
    (359060 'referenced modules list' RangeChunk[266375])
  }
  function DefaultRectangularArr[106852](?).chpl__postScan[113269](arg _mt[113282]:_MT[238], arg this[113279]:DefaultRectangularArr[106852](?) :
  DefaultRectangularArr[106852](?), arg op[113267]:_any[178](?), arg res[113271]:_any[178](?), arg numTasks[113273]:_any[178](?), arg rngs[113275]:_any[178](?), arg state[113277]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(113474 call _cond_test(113286 call == numTasks[113273] 1))
    {
      (113297 call postScanChunk(113293 call .(113290 call . rngs[113275] c"indices") c"low"))
    }
    {
      {
        unknown tmpIter[113311] "expr temp" "maybe ref" "no copy" "temp"
        (113314 'move' tmpIter[113311](113302 call . rngs[113275] c"indices"))
        unknown isRngDomArr[113454] "maybe param" "temp"
        (113469 'move' isRngDomArr[113454](113467 call ||(113456 call isBoundedRange tmpIter[113311])(113465 call ||(113459 call isDomain tmpIter[113311])(113462 call isArray tmpIter[113311]))))
        if isRngDomArr[113454]
        {
          const _coforallCount[113321] "const" "end count" "temp"
          (113390 'move' _coforallCount[113321](113387 call _endCountAlloc 1))
          unknown numTasks[113322] "temp"
          (113374 'move' numTasks[113322](113370 call . tmpIter[113311] c"size"))
          (113365 call _upEndCount _coforallCount[113321] 1 numTasks[113322])
          (113362 call chpl_resetTaskSpawn numTasks[113322])
          unknown _indexOfInterest[113329] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113330] "expr temp" "temp"
          (113339 'move' _iterator[113330](113337 call _getIterator tmpIter[113311]))
          Defer
          {
            {
              (113355 call _freeIterator _iterator[113330])
            }
          }
          { scopeless type
            (113344 'move' _indexOfInterest[113329](113341 call iteratorIndex _iterator[113330]))
          }
          ForLoop[113331]
          {
            unknown tid[113348] "coforall index var" "index var" "insert auto destroy"
            (113350 'move' tid[113348] _indexOfInterest[113329])
            {
              {
                (113318 call postScanChunk tid[113348])
              }
              (113324 call _downEndCount _coforallCount[113321] nil[44])
              (113323 'coforall loop')
            }
            label _continueLabel[113334]
            _indexOfInterest[113329]
            _iterator[113330]
          }
          label _breakLabel[113335]
          Defer
          {
            {
              (113377 call _endCountFree _coforallCount[113321])
            }
          }
          (113382 call _waitEndCount _coforallCount[113321] 1 numTasks[113322])
        }
        {
          const _coforallCount[113394] "const" "end count" "temp"
          (113451 'move' _coforallCount[113394](113448 call _endCountAlloc 1))
          unknown _indexOfInterest[113402] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[113403] "expr temp" "temp"
          (113412 'move' _iterator[113403](113410 call _getIterator tmpIter[113311]))
          Defer
          {
            {
              (113428 call _freeIterator _iterator[113403])
            }
          }
          { scopeless type
            (113417 'move' _indexOfInterest[113402](113414 call iteratorIndex _iterator[113403]))
          }
          ForLoop[113404]
          {
            unknown tid[113421] "coforall index var" "index var" "insert auto destroy"
            (113423 'move' tid[113421] _indexOfInterest[113402])
            (113435 call _upEndCount _coforallCount[113394] 1)
            {
              {
                (113308 call postScanChunk tid[113421])
              }
              (113397 call _downEndCount _coforallCount[113394] nil[44])
              (113396 'coforall loop')
            }
            label _continueLabel[113407]
            _indexOfInterest[113402]
            _iterator[113403]
          }
          label _breakLabel[113408]
          Defer
          {
            {
              (113439 call _endCountFree _coforallCount[113394])
            }
          }
          (113444 call _waitEndCount _coforallCount[113394] 1)
        }
      }
    }
    function postScanChunk[113483](arg tid[113481]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      const myadjust[113489] "const"(113488 call state[113277] tid[113481])
      (113492 'end of statement')
      {
        unknown _indexOfInterest[113512] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[113513] "expr temp" "temp"
        (113522 'move' _iterator[113513](113520 call _getIterator(113498 call rngs[113275] tid[113481])))
        Defer
        {
          {
            (113539 call _freeIterator _iterator[113513])
          }
        }
        { scopeless type
          (113528 'move' _indexOfInterest[113512](113525 call iteratorIndex _iterator[113513]))
        }
        ForLoop[113514]
        {
          unknown i[113532] "index var" "insert auto destroy"
          (113534 'move' i[113532] _indexOfInterest[113512])
          {
            (113509 call(113500 call . op[113267] c"accumulateOntoState")(113506 call res[113271] i[113532]) myadjust[113489])
          }
          label _continueLabel[113517]
          _indexOfInterest[113512]
          _iterator[113513]
        }
        label _breakLabel[113518]
      }
    }
    if(113555 call _cond_test debugDRScan[112490])
    {
      (113553 call writeln "res = " res[113271])
    }
  }
  function canReuseStride[113566](arg blk[113564]:_any[178](?), arg curDim[113569] :
  int(64)[13], arg levels[113572]:_any[178](?), arg count[113574]:_any[178](?), arg stride[113576]:_any[178](?)) : _unknown[51] "private"
  {
    const lastCount[113585] "const"(113584 call count[113574](113581 call + levels[113572] 1))
    (113588 'end of statement')
    const curStride[113602] "const"(113599 IfExpr (113592 call < levels[113572] 1) then
    { scopeless
      1
    } else
    { scopeless
      (113598 call stride[113576] levels[113572])
    } )
    (113605 'end of statement')
    const lastIndex[113613] "const"(113611 call *(113608 call - lastCount[113585] 1) curStride[113602])
    (113616 'end of statement')
    const nextIndex[113621] "const"(113619 call + lastIndex[113613] curStride[113602])
    (113624 'end of statement')
    (113635 return(113633 call ==(113631 call blk[113564](113628 call - curDim[113569] 2)) nextIndex[113621]))
  }
  (355138 'used modules list'(93366 'use' DSIUtil[230805])(93369 'use' ChapelArray[113684])(93376 'use' ChapelDistribution[145427])(93378 'use' ChapelRange[64180])(93379 'use' SysBasic[223433])(93380 'use' SysError[264148])(93381 'use' SysCTypes[20940])(93386 'use' ChapelDebugPrint[188121])(93388 'use' ChapelLocks[187268])(93389 'use' OwnedObject[39583])(93390 'use' IO[230808])(93393 'use' DefaultSparse[161557])(93395 'use' DefaultAssociative[156239])(93397 'use' ExternalArray[188565]))
}