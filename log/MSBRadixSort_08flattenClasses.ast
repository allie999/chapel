AST dump for MSBRadixSort after pass flattenClasses.
Module use list: ChapelStandard Sort RadixSortHelp ShellSort 

{
  type MSBRadixSortSettings[288136](?) unknown DISTRIBUTE_BUFFER[288098] "param" 5 const sortSwitch[288103] "const" 256 const minForTask[288108] "const" 256 unknown CHECK_SORTS[288113] "param" 0 unknown progress[288118] "param" 0 const alwaysSerial[288123] "const" 0 const maxTasks[288131] "const"(288128 call .(364805 call here[90438]) c"maxTaskPar")
  function msbRadixSort[288147](arg Data[288144] :
  (288141 call chpl__buildArrayRuntimeType nil[44]), arg comparator[288152] :
  unknown rec[288149] =
  defaultComparator[268065]) : _unknown[51] "no return value for void"
  {
    unknown endbit[288157] int(64)[13]
    (288160 'end of statement')
    (288168 call = endbit[288157](288167 call msbRadixSortParamLastStartBit Data[288144] comparator[288152]))
    if(288183 call _cond_test(288173 call < endbit[288157] 0))
    {
      (288180 call = endbit[288157](288179 call max int(64)[13]))
    }
    (288217 call msbRadixSort(start_n =(288193 call .(288190 call . Data[288144] c"_dom") c"low"))(end_n =(288202 call .(288199 call . Data[288144] c"_dom") c"high")) Data[288144] comparator[288152](startbit = 0)(endbit = endbit[288157])(settings =(288212 'new'(288215 call MSBRadixSortSettings[288136](?)))))
  }
  function msbRadixSort[288227](arg start_n[288224] :
  int(64)[13], arg end_n[288230] :
  int(64)[13], arg A[288236] :
  (288233 call chpl__buildArrayRuntimeType nil[44]), arg criterion[288239]:_any[178](?), arg startbit[288242] :
  int(64)[13], arg endbit[288246] :
  int(64)[13], arg settings[288249]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(288257 call _cond_test(288253 call > startbit[288242] endbit[288246]))
    {
      (288255 return _void[55])
    }
    if(288310 call _cond_test(288273 call <(288265 call - end_n[288230] start_n[288224])(288270 call . settings[288249] c"sortSwitch")))
    {
      (288286 call shellSort module=[255] ShellSort[273610] A[288236] criterion[288239](start = start_n[288224])(end = end_n[288230]))
      if(288303 call _cond_test(288292 call . settings[288249] c"CHECK_SORTS"))
      {
        (288301 call checkSorted start_n[288224] end_n[288230] A[288236] criterion[288239])
      }
      (288308 return _void[55])
      (364811 'referenced modules list' ShellSort[273610])
    }
    if(288364 call _cond_test(288317 call . settings[288249] c"progress"))
    {
      (288362 call writeln "radix sort start=" start_n[288224] " end=" end_n[288230] " startbit=" startbit[288242] " endbit=" endbit[288246])
    }
    const radixbits[288370] "const" RADIX_BITS[276176]
    (288373 'end of statement')
    const radix[288381] "const"(288379 call +(288376 call << 1 radixbits[288370]) 1)
    (288384 'end of statement')
    unknown offsets[288395](288393 call chpl__buildArrayRuntimeType(288391 call chpl__ensureDomainExpr(288387 call chpl_build_bounded_range 0 radix[288381])) int(64)[13])
    (288398 'end of statement')
    unknown end_offsets[288409](288407 call chpl__buildArrayRuntimeType(288405 call chpl__ensureDomainExpr(288401 call chpl_build_bounded_range 0 radix[288381])) int(64)[13])
    (288412 'end of statement')
    unknown ubitsType[288426] "type variable"(288425 'typeof'(288424 call(288421 call binForRecord(288417 call A[288236] start_n[288224]) criterion[288239] startbit[288242]) 1))
    unknown min_ubits[288434](288433 call max ubitsType[288426]) ubitsType[288426]
    (288437 'end of statement')
    unknown max_ubits[288440] 0 ubitsType[288426]
    (288443 'end of statement')
    unknown min_bin[288448](288446 call + radix[288381] 1)
    (288451 'end of statement')
    unknown max_bin[288453] 0
    (288456 'end of statement')
    unknown any_ending[288458] 0
    (288461 'end of statement')
    if(288723 call _cond_test(288469 call ==(288465 call . settings[288249] c"alwaysSerial") 0))
    {
      Forall {
        induction variables:
          
          unknown i[288590] "index var" "insert auto destroy"
        iterated expressions:
          (288474 call chpl_build_bounded_range start_n[288224] end_n[288230])
        shadow variables:
          offsets[288478] 'reduce' intent outer var offsets[288395]
            init block
            {
            }
            deinit block
            {
            }
          min_ubits[288486] 'reduce' intent outer var min_ubits[288434]
            init block
            {
            }
            deinit block
            {
            }
          max_ubits[288493] 'reduce' intent outer var max_ubits[288440]
            init block
            {
            }
            deinit block
            {
            }
          any_ending[288500] 'reduce' intent outer var any_ending[288458]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          const tmp[288519] "const" "temp"(288518 call binForRecord(288514 call A[288236] i[288590]) criterion[288239] startbit[288242])
          (288526 call _check_tuple_var_decl tmp[288519] 2)
          const bin[288505] "const"(288520 call tmp[288519] 0)
          const ubits[288507] "const"(288523 call tmp[288519] 1)
          (288531 'end of statement')
          if(288542 call _cond_test(288535 call < ubits[288507] min_ubits[288486]))
          {
            (288539 call = min_ubits[288486] ubits[288507])
          }
          if(288556 call _cond_test(288549 call > ubits[288507] max_ubits[288493]))
          {
            (288553 call = max_ubits[288493] ubits[288507])
          }
          if(288576 call _cond_test(288569 call ||(288563 call == bin[288505] 0)(288567 call == bin[288505] radix[288381])))
          {
            (288573 call = any_ending[288500] 1)
          }
          (288586 call +=(288584 call offsets[288478] bin[288505]) 1)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[288684] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[288685] "expr temp" "temp"
        (288694 'move' _iterator[288685](288692 call _getIterator(288699 call chpl_direct_range_iter start_n[288224] end_n[288230] 1)))
        Defer
        {
          {
            (288715 call _freeIterator _iterator[288685])
          }
        }
        { scopeless type
          (288704 'move' _indexOfInterest[288684](288701 call iteratorIndex _iterator[288685]))
        }
        ForLoop[288686]
        {
          unknown i[288708] "index var" "insert auto destroy"
          (288710 'move' i[288708] _indexOfInterest[288684])
          {
            const tmp[288614] "const" "temp"(288613 call binForRecord(288609 call A[288236] i[288708]) criterion[288239] startbit[288242])
            (288621 call _check_tuple_var_decl tmp[288614] 2)
            const bin[288600] "const"(288615 call tmp[288614] 0)
            const ubits[288602] "const"(288618 call tmp[288614] 1)
            (288626 'end of statement')
            if(288637 call _cond_test(288630 call < ubits[288602] min_ubits[288434]))
            {
              (288634 call = min_ubits[288434] ubits[288602])
            }
            if(288651 call _cond_test(288644 call > ubits[288602] max_ubits[288440]))
            {
              (288648 call = max_ubits[288440] ubits[288602])
            }
            if(288671 call _cond_test(288664 call ||(288658 call == bin[288600] 0)(288662 call == bin[288600] radix[288381])))
            {
              (288668 call = any_ending[288458] 1)
            }
            (288681 call +=(288679 call offsets[288395] bin[288600]) 1)
          }
          label _continueLabel[288689]
          _indexOfInterest[288684]
          _iterator[288685]
        }
        label _breakLabel[288690]
      }
    }
    if(288764 call _cond_test(288729 call == any_ending[288458] 0))
    {
      unknown dataStartBit[288737](288736 call findDataStartBit startbit[288242] min_ubits[288434] max_ubits[288440])
      (288740 'end of statement')
      if(288760 call _cond_test(288744 call > dataStartBit[288737] startbit[288242]))
      {
        (288755 call msbRadixSort start_n[288224] end_n[288230] A[288236] criterion[288239] dataStartBit[288737] endbit[288246] settings[288249])
        (288758 return _void[55])
      }
    }
    if(288791 call _cond_test(288769 call . settings[288249] c"progress"))
    {
      (288789 call writeln "accumulate")
    }
    unknown sum[288797] 0
    (288800 'end of statement')
    {
      unknown _indexOfInterest[288842] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[288843] "expr temp" "temp"
      (288857 'move' _iterator[288843](288809 call _build_tuple(288852 call _getIterator offsets[288395])(288855 call _getIterator end_offsets[288409])))
      Defer
      {
        {
          (288887 call _freeIterator _iterator[288843])
        }
      }
      { scopeless type
        (288862 'move' _indexOfInterest[288842](288859 call iteratorIndex _iterator[288843]))
      }
      ForLoop[288844]
      {
        (288867 call _check_tuple_var_decl _indexOfInterest[288842] 2)
        unknown off[288873] "index var" "insert auto destroy"
        (288875 'move' off[288873](288871 call _indexOfInterest[288842] 0))
        unknown end[288880] "index var" "insert auto destroy"
        (288882 'move' end[288880](288878 call _indexOfInterest[288842] 1))
        {
          unknown binstart[288811] sum[288797]
          (288814 'end of statement')
          (288818 call += sum[288797] off[288873])
          unknown binend[288822] sum[288797]
          (288825 'end of statement')
          (288831 call = off[288873](288829 call + start_n[288224] binstart[288811]))
          (288839 call = end[288880](288837 call + start_n[288224] binend[288822]))
        }
        label _continueLabel[288847]
        _indexOfInterest[288842]
        _iterator[288843]
      }
      label _breakLabel[288848]
    }
    unknown curbin[288895] 0
    (288898 'end of statement')
    if(288924 call _cond_test(288900 call . settings[288249] c"progress"))
    {
      (288922 call writeln "shuffle")
    }
    {
      unknown tmp[289454] "temp"
      (289472 'move' tmp[289454](289470 call _cond_test 1))
      WhileDo[289459]
      {
        {
          {
            unknown tmp[288952] "temp"
            (288996 'move' tmp[288952](288981 call _cond_test(288983 call &&(288985 call <= curbin[288895] radix[288381])(288989 call ==(288991 call offsets[288395] curbin[288895])(288994 call end_offsets[288409] curbin[288895])))))
            WhileDo[288957]
            {
              {
                (288948 call += curbin[288895] 1)
              }
              label _continueLabel[288955]
              (288976 'move' tmp[288952](288961 call _cond_test(288963 call &&(288965 call <= curbin[288895] radix[288381])(288969 call ==(288971 call offsets[288395] curbin[288895])(288974 call end_offsets[288409] curbin[288895])))))
              tmp[288952]
            }
            label _breakLabel[288956]
          }
          if(289008 call _cond_test(289002 call > curbin[288895] radix[288381]))
          {
            break _breakLabel[289458] _breakLabel[289458]
          }
          unknown max_buf[289018] "param"(289015 call . settings[288249] c"DISTRIBUTE_BUFFER")
          (289021 'end of statement')
          unknown buf[289029](289027 call * max_buf[289018](289024 call . A[288236] c"eltType"))
          (289032 'end of statement')
          unknown used_buf[289034] 0
          (289037 'end of statement')
          unknown end[289042](289041 call end_offsets[288409] curbin[288895])
          (289045 'end of statement')
          unknown endfast[289063](289062 call max(289050 call offsets[288395] curbin[288895])(289060 call -(289055 call end_offsets[288409] curbin[288895])(289058 call * 2 max_buf[289018])))
          (289066 'end of statement')
          unknown bufstart[289081](289080 call max(289071 call offsets[288395] curbin[288895])(289078 call -(289076 call end_offsets[288409] curbin[288895]) max_buf[289018]))
          (289084 'end of statement')
          unknown i[289086] bufstart[289081]
          (289089 'end of statement')
          {
            unknown tmp[289116] "temp"
            (289140 'move' tmp[289116](289135 call _cond_test(289137 call < i[289086] end[289042])))
            WhileDo[289121]
            {
              {
                (289102 call <=>(289097 call buf[289029] used_buf[289034])(289101 call A[288236] i[289086]))
                (289108 call += used_buf[289034] 1)
                (289113 call += i[289086] 1)
              }
              label _continueLabel[289119]
              (289130 'move' tmp[289116](289125 call _cond_test(289127 call < i[289086] end[289042])))
              tmp[289116]
            }
            label _breakLabel[289120]
          }
          {
            unknown tmp[289242] "temp"
            (289270 'move' tmp[289242](289263 call _cond_test(289265 call <(289267 call offsets[288395] curbin[288895]) endfast[289063])))
            WhileDo[289247]
            {
              {
                {
                  unknown j[289204] 0
                  unknown tmp[289205] "maybe param" "temp"
                  (289217 'move' tmp[289205](289215 call chpl_compute_low_param_loop_bound 0(289153 call - max_buf[289018] 1)))
                  unknown tmp[289206] "maybe param" "temp"
                  (289227 'move' tmp[289206](289225 call chpl_compute_high_param_loop_bound 0(289222 call - max_buf[289018] 1)))
                  unknown tmp[289207] "maybe param" "temp"
                  (289230 'move' tmp[289207] 1)
                  ParamForLoop[289232]
                  { j[289204] tmp[289205] tmp[289206] tmp[289207]
                    {
                      const tmp[289171] "const" "temp"(289170 call binForRecord(289166 call buf[289029] j[289204]) criterion[288239] startbit[288242])
                      (289175 call _check_tuple_var_decl tmp[289171] 2)
                      const bin[289157] "const"(289172 call tmp[289171] 0)
                      (289180 'end of statement')
                      (289193 call <=>(289188 call A[288236](289186 call offsets[288395] bin[289157]))(289192 call buf[289029] j[289204]))
                      (289201 call +=(289199 call offsets[288395] bin[289157]) 1)
                    }
                  }
                  label _unused_continueLabel[289209]
                  label _breakLabel[289208]
                }
              }
              label _continueLabel[289245]
              (289258 'move' tmp[289242](289251 call _cond_test(289253 call <(289255 call offsets[288395] curbin[288895]) endfast[289063])))
              tmp[289242]
            }
            label _breakLabel[289246]
          }
          {
            unknown tmp[289423] "temp"
            (289451 'move' tmp[289423](289444 call _cond_test(289446 call <(289448 call offsets[288395] curbin[288895]) end[289042])))
            WhileDo[289428]
            {
              {
                unknown j[289281] 0
                (289284 'end of statement')
                {
                  unknown tmp[289384] "temp"
                  (289420 'move' tmp[289384](289409 call _cond_test(289411 call &&(289413 call >= used_buf[289034] 0)(289417 call < j[289281] used_buf[289034]))))
                  WhileDo[289389]
                  {
                    {
                      const tmp[289310] "const" "temp"(289309 call binForRecord(289305 call buf[289029] j[289281]) criterion[288239] startbit[288242])
                      (289314 call _check_tuple_var_decl tmp[289310] 2)
                      const bin[289296] "const"(289311 call tmp[289310] 0)
                      (289319 'end of statement')
                      unknown offset[289325](289324 call offsets[288395] bin[289296])
                      (289328 'end of statement')
                      (289337 call <=>(289332 call A[288236] offset[289325])(289336 call buf[289029] j[289281]))
                      (289345 call +=(289343 call offsets[288395] bin[289296]) 1)
                      if(289375 call _cond_test(289356 call &&(289350 call == bin[289296] curbin[288895])(289354 call >= offset[289325] bufstart[289081])))
                      {
                        (289360 call -= used_buf[289034] 1)
                        (289372 call <=>(289367 call buf[289029] j[289281])(289371 call buf[289029] used_buf[289034]))
                      }
                      (289381 call += j[289281] 1)
                    }
                    label _continueLabel[289387]
                    (289404 'move' tmp[289384](289393 call _cond_test(289395 call &&(289397 call >= used_buf[289034] 0)(289401 call < j[289281] used_buf[289034]))))
                    tmp[289384]
                  }
                  label _breakLabel[289388]
                }
              }
              label _continueLabel[289426]
              (289439 'move' tmp[289423](289432 call _cond_test(289434 call <(289436 call offsets[288395] curbin[288895]) end[289042])))
              tmp[289423]
            }
            label _breakLabel[289427]
          }
        }
        label _continueLabel[289457]
        (289465 'move' tmp[289454](289463 call _cond_test 1))
        tmp[289454]
      }
      label _breakLabel[289458]
    }
    if(289500 call _cond_test(289476 call . settings[288249] c"progress"))
    {
      (289498 call writeln "sort sub-problems")
    }
    (289510 call =(289508 call offsets[288395] 0) start_n[288224])
    {
      unknown _indexOfInterest[289533] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[289534] "expr temp" "temp"
      (289543 'move' _iterator[289534](289541 call _getIterator(289548 call chpl_direct_range_iter 1 radix[288381] 1)))
      Defer
      {
        {
          (289564 call _freeIterator _iterator[289534])
        }
      }
      { scopeless type
        (289553 'move' _indexOfInterest[289533](289550 call iteratorIndex _iterator[289534]))
      }
      ForLoop[289535]
      {
        unknown i[289557] "index var" "insert auto destroy"
        (289559 'move' i[289557] _indexOfInterest[289533])
        {
          (289529 call =(289521 call offsets[288395] i[289557])(289528 call end_offsets[288409](289525 call - i[289557] 1)))
        }
        label _continueLabel[289538]
        _indexOfInterest[289533]
        _iterator[289534]
      }
      label _breakLabel[289539]
    }
    if(289966 call _cond_test(289576 call ==(289572 call . settings[288249] c"alwaysSerial") 0))
    {
      const subbits[289582] "const"(289580 call + startbit[288242] radixbits[288370])
      (289585 'end of statement')
      unknown nbigsubs[289588] 0
      (289591 'end of statement')
      unknown bigsubs[289606](289604 call chpl__buildArrayRuntimeType(289602 call chpl__ensureDomainExpr(289594 call chpl_build_bounded_range 0 radix[288381]))(289600 call _build_tuple int(64)[13] int(64)[13]))
      (289609 'end of statement')
      const runningNow[289616] "const"(289615 call(289611 call .(364825 call here[90438]) c"runningTasks"))
      (289619 'end of statement')
      {
        unknown _indexOfInterest[289743] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289744] "expr temp" "temp"
        (289753 'move' _iterator[289744](289751 call _getIterator(289761 call chpl_direct_range_iter 1(289758 call - radix[288381] 1) 1)))
        Defer
        {
          {
            (289777 call _freeIterator _iterator[289744])
          }
        }
        { scopeless type
          (289766 'move' _indexOfInterest[289743](289763 call iteratorIndex _iterator[289744]))
        }
        ForLoop[289745]
        {
          unknown bin[289770] "index var" "insert auto destroy"
          (289772 'move' bin[289770] _indexOfInterest[289743])
          {
            const bin_start[289632] "const"(289631 call offsets[288395] bin[289770])
            (289635 'end of statement')
            const bin_end[289658] "const"(289655 IfExpr (289642 call <=(289639 call + bin[289770] 1) radix[288381]) then
            { scopeless
              (289652 call -(289650 call offsets[288395](289647 call + bin[289770] 1)) 1)
            } else
            { scopeless
              end_n[288230]
            } )
            (289661 'end of statement')
            const num[289669] "const"(289667 call -(289664 call + 1 bin_end[289658]) bin_start[289632])
            (289672 'end of statement')
            if(289738 call _cond_test(289681 call ||(289675 call <= num[289669] 1)(289679 call >= startbit[288242] endbit[288246])))
            {
            }
            {
              if(289734 call _cond_test(289702 call ||(289691 call < num[289669](289688 call . settings[288249] c"minForTask"))(289700 call >= runningNow[289616](289697 call . settings[288249] c"maxTasks"))))
              {
                (289713 call msbRadixSort bin_start[289632] bin_end[289658] A[288236] criterion[288239] subbits[289582] endbit[288246] settings[288249])
              }
              {
                (289725 call =(289719 call bigsubs[289606] nbigsubs[289588])(289723 call _build_tuple bin_start[289632] bin_end[289658]))
                (289731 call += nbigsubs[289588] 1)
              }
            }
          }
          label _continueLabel[289748]
          _indexOfInterest[289743]
          _iterator[289744]
        }
        label _breakLabel[289749]
      }
      Forall {
        induction variables:
          
          unknown bin[289815] "index var" "insert auto destroy"
          
          unknown chpl_idx_2[289817] "index var" "an _indexOfInterest or chpl__followIdx variable" "insert auto destroy" "temp"
        iterated expressions:
          (289797 call #(289794 call chpl_build_low_bounded_range 0) nbigsubs[289588])
          bigsubs[289606]
        shadow variables:
        other variables
          forall body
        {
          (289822 call _check_tuple_var_decl chpl_idx_2[289817] 2)
          unknown bin_start[289828] "index var" "insert auto destroy"
          (289830 'move' bin_start[289828](289826 call chpl_idx_2[289817] 0))
          unknown bin_end[289835] "index var" "insert auto destroy"
          (289837 'move' bin_end[289835](289833 call chpl_idx_2[289817] 1))
          (289811 call msbRadixSort bin_start[289828] bin_end[289835] A[288236] criterion[288239] subbits[289582] endbit[288246] settings[288249])
        }
      }
    }
    {
      {
        unknown _indexOfInterest[289924] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289925] "expr temp" "temp"
        (289934 'move' _iterator[289925](289932 call _getIterator(289942 call chpl_direct_range_iter 1(289939 call - radix[288381] 1) 1)))
        Defer
        {
          {
            (289958 call _freeIterator _iterator[289925])
          }
        }
        { scopeless type
          (289947 'move' _indexOfInterest[289924](289944 call iteratorIndex _iterator[289925]))
        }
        ForLoop[289926]
        {
          unknown bin[289951] "index var" "insert auto destroy"
          (289953 'move' bin[289951] _indexOfInterest[289924])
          {
            const bin_start[289853] "const"(289852 call offsets[288395] bin[289951])
            (289856 'end of statement')
            const bin_end[289879] "const"(289876 IfExpr (289863 call <=(289860 call + bin[289951] 1) radix[288381]) then
            { scopeless
              (289873 call -(289871 call offsets[288395](289868 call + bin[289951] 1)) 1)
            } else
            { scopeless
              end_n[288230]
            } )
            (289882 'end of statement')
            const num[289890] "const"(289888 call -(289885 call + 1 bin_end[289879]) bin_start[289853])
            (289893 'end of statement')
            if(289920 call _cond_test(289902 call ||(289896 call <= num[289890] 1)(289900 call >= startbit[288242] endbit[288246])))
            {
            }
            {
              (289917 call msbRadixSort bin_start[289853] bin_end[289879] A[288236] criterion[288239](289913 call + startbit[288242] radixbits[288370]) endbit[288246] settings[288249])
            }
          }
          label _continueLabel[289929]
          _indexOfInterest[289924]
          _iterator[289925]
        }
        label _breakLabel[289930]
      }
    }
    if(289982 call _cond_test(289971 call . settings[288249] c"CHECK_SORTS"))
    {
      (289980 call checkSorted start_n[288224] end_n[288230] A[288236] criterion[288239])
    }
  }
  (355510 'used modules list'(353161 'use' ChapelStandard[20267])(288087 'import' Sort[268056].{defaultComparator, ShellSort})(288094 'use' RadixSortHelp[276164]))
}