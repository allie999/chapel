AST dump for MSBRadixSort after pass flattenClasses.
Module use list: ChapelStandard Sort RadixSortHelp ShellSort 

{
  type MSBRadixSortSettings[288042](?) unknown DISTRIBUTE_BUFFER[288004] "param" 5 const sortSwitch[288009] "const" 256 const minForTask[288014] "const" 256 unknown CHECK_SORTS[288019] "param" 0 unknown progress[288024] "param" 0 const alwaysSerial[288029] "const" 0 const maxTasks[288037] "const"(288034 call .(364694 call here[90435]) c"maxTaskPar")
  function msbRadixSort[288053](arg Data[288050] :
  (288047 call chpl__buildArrayRuntimeType nil[44]), arg comparator[288058] :
  unknown rec[288055] =
  defaultComparator[267977]) : _unknown[51] "no return value for void"
  {
    unknown endbit[288063] int(64)[13]
    (288066 'end of statement')
    (288074 call = endbit[288063](288073 call msbRadixSortParamLastStartBit Data[288050] comparator[288058]))
    if(288089 call _cond_test(288079 call < endbit[288063] 0))
    {
      (288086 call = endbit[288063](288085 call max int(64)[13]))
    }
    (288123 call msbRadixSort(start_n =(288099 call .(288096 call . Data[288050] c"_dom") c"low"))(end_n =(288108 call .(288105 call . Data[288050] c"_dom") c"high")) Data[288050] comparator[288058](startbit = 0)(endbit = endbit[288063])(settings =(288118 'new'(288121 call MSBRadixSortSettings[288042](?)))))
  }
  function msbRadixSort[288133](arg start_n[288130] :
  int(64)[13], arg end_n[288136] :
  int(64)[13], arg A[288142] :
  (288139 call chpl__buildArrayRuntimeType nil[44]), arg criterion[288145]:_any[178](?), arg startbit[288148] :
  int(64)[13], arg endbit[288152] :
  int(64)[13], arg settings[288155]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    if(288163 call _cond_test(288159 call > startbit[288148] endbit[288152]))
    {
      (288161 return _void[55])
    }
    if(288216 call _cond_test(288179 call <(288171 call - end_n[288136] start_n[288130])(288176 call . settings[288155] c"sortSwitch")))
    {
      (288192 call shellSort module=[255] ShellSort[273520] A[288142] criterion[288145](start = start_n[288130])(end = end_n[288136]))
      if(288209 call _cond_test(288198 call . settings[288155] c"CHECK_SORTS"))
      {
        (288207 call checkSorted start_n[288130] end_n[288136] A[288142] criterion[288145])
      }
      (288214 return _void[55])
      (364700 'referenced modules list' ShellSort[273520])
    }
    if(288270 call _cond_test(288223 call . settings[288155] c"progress"))
    {
      (288268 call writeln "radix sort start=" start_n[288130] " end=" end_n[288136] " startbit=" startbit[288148] " endbit=" endbit[288152])
    }
    const radixbits[288276] "const" RADIX_BITS[276086]
    (288279 'end of statement')
    const radix[288287] "const"(288285 call +(288282 call << 1 radixbits[288276]) 1)
    (288290 'end of statement')
    unknown offsets[288301](288299 call chpl__buildArrayRuntimeType(288297 call chpl__ensureDomainExpr(288293 call chpl_build_bounded_range 0 radix[288287])) int(64)[13])
    (288304 'end of statement')
    unknown end_offsets[288315](288313 call chpl__buildArrayRuntimeType(288311 call chpl__ensureDomainExpr(288307 call chpl_build_bounded_range 0 radix[288287])) int(64)[13])
    (288318 'end of statement')
    unknown ubitsType[288332] "type variable"(288331 'typeof'(288330 call(288327 call binForRecord(288323 call A[288142] start_n[288130]) criterion[288145] startbit[288148]) 1))
    unknown min_ubits[288340](288339 call max ubitsType[288332]) ubitsType[288332]
    (288343 'end of statement')
    unknown max_ubits[288346] 0 ubitsType[288332]
    (288349 'end of statement')
    unknown min_bin[288354](288352 call + radix[288287] 1)
    (288357 'end of statement')
    unknown max_bin[288359] 0
    (288362 'end of statement')
    unknown any_ending[288364] 0
    (288367 'end of statement')
    if(288628 call _cond_test(288375 call ==(288371 call . settings[288155] c"alwaysSerial") 0))
    {
      Forall {
        induction variables:
          
          unknown i[288496] "index var" "insert auto destroy"
        iterated expressions:
          (288380 call chpl_build_bounded_range start_n[288130] end_n[288136])
        shadow variables:
          offsets[288384] 'reduce' intent outer var offsets[288301]
            init block
            {
            }
            deinit block
            {
            }
          min_ubits[288392] 'reduce' intent outer var min_ubits[288340]
            init block
            {
            }
            deinit block
            {
            }
          max_ubits[288399] 'reduce' intent outer var max_ubits[288346]
            init block
            {
            }
            deinit block
            {
            }
          any_ending[288406] 'reduce' intent outer var any_ending[288364]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          const tmp[288425] "const" "temp"(288424 call binForRecord(288420 call A[288142] i[288496]) criterion[288145] startbit[288148])
          (288432 call _check_tuple_var_decl tmp[288425] 2)
          const bin[288411] "const"(288426 call tmp[288425] 0)
          const ubits[288413] "const"(288429 call tmp[288425] 1)
          (288437 'end of statement')
          if(288448 call _cond_test(288441 call < ubits[288413] min_ubits[288392]))
          {
            (288445 call = min_ubits[288392] ubits[288413])
          }
          if(288462 call _cond_test(288455 call > ubits[288413] max_ubits[288399]))
          {
            (288459 call = max_ubits[288399] ubits[288413])
          }
          if(288482 call _cond_test(288475 call ||(288469 call == bin[288411] 0)(288473 call == bin[288411] radix[288287])))
          {
            (288479 call = any_ending[288406] 1)
          }
          (288492 call +=(288490 call offsets[288384] bin[288411]) 1)
        }
      }
    }
    {
      {
        unknown _indexOfInterest[288589] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[288590] "expr temp" "temp"
        (288599 'move' _iterator[288590](288597 call _getIterator(288604 call chpl_direct_range_iter start_n[288130] end_n[288136] 1)))
        Defer
        {
          {
            (288620 call _freeIterator _iterator[288590])
          }
        }
        { scopeless type
          (288609 'move' _indexOfInterest[288589](288606 call iteratorIndex _iterator[288590]))
        }
        ForLoop[288591]
        {
          unknown i[288613] "index var" "insert auto destroy"
          (288615 'move' i[288613] _indexOfInterest[288589])
          {
            const tmp[288519] "const" "temp"(288518 call binForRecord(288514 call A[288142] i[288613]) criterion[288145] startbit[288148])
            (288526 call _check_tuple_var_decl tmp[288519] 2)
            const bin[288505] "const"(288520 call tmp[288519] 0)
            const ubits[288507] "const"(288523 call tmp[288519] 1)
            (288531 'end of statement')
            if(288542 call _cond_test(288535 call < ubits[288507] min_ubits[288340]))
            {
              (288539 call = min_ubits[288340] ubits[288507])
            }
            if(288556 call _cond_test(288549 call > ubits[288507] max_ubits[288346]))
            {
              (288553 call = max_ubits[288346] ubits[288507])
            }
            if(288576 call _cond_test(288569 call ||(288563 call == bin[288505] 0)(288567 call == bin[288505] radix[288287])))
            {
              (288573 call = any_ending[288364] 1)
            }
            (288586 call +=(288584 call offsets[288301] bin[288505]) 1)
          }
          label _continueLabel[288594]
          _indexOfInterest[288589]
          _iterator[288590]
        }
        label _breakLabel[288595]
      }
    }
    if(288669 call _cond_test(288634 call == any_ending[288364] 0))
    {
      unknown dataStartBit[288642](288641 call findDataStartBit startbit[288148] min_ubits[288340] max_ubits[288346])
      (288645 'end of statement')
      if(288665 call _cond_test(288649 call > dataStartBit[288642] startbit[288148]))
      {
        (288660 call msbRadixSort start_n[288130] end_n[288136] A[288142] criterion[288145] dataStartBit[288642] endbit[288152] settings[288155])
        (288663 return _void[55])
      }
    }
    if(288696 call _cond_test(288674 call . settings[288155] c"progress"))
    {
      (288694 call writeln "accumulate")
    }
    unknown sum[288702] 0
    (288705 'end of statement')
    {
      unknown _indexOfInterest[288747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[288748] "expr temp" "temp"
      (288762 'move' _iterator[288748](288714 call _build_tuple(288757 call _getIterator offsets[288301])(288760 call _getIterator end_offsets[288315])))
      Defer
      {
        {
          (288792 call _freeIterator _iterator[288748])
        }
      }
      { scopeless type
        (288767 'move' _indexOfInterest[288747](288764 call iteratorIndex _iterator[288748]))
      }
      ForLoop[288749]
      {
        (288772 call _check_tuple_var_decl _indexOfInterest[288747] 2)
        unknown off[288778] "index var" "insert auto destroy"
        (288780 'move' off[288778](288776 call _indexOfInterest[288747] 0))
        unknown end[288785] "index var" "insert auto destroy"
        (288787 'move' end[288785](288783 call _indexOfInterest[288747] 1))
        {
          unknown binstart[288716] sum[288702]
          (288719 'end of statement')
          (288723 call += sum[288702] off[288778])
          unknown binend[288727] sum[288702]
          (288730 'end of statement')
          (288736 call = off[288778](288734 call + start_n[288130] binstart[288716]))
          (288744 call = end[288785](288742 call + start_n[288130] binend[288727]))
        }
        label _continueLabel[288752]
        _indexOfInterest[288747]
        _iterator[288748]
      }
      label _breakLabel[288753]
    }
    unknown curbin[288800] 0
    (288803 'end of statement')
    if(288829 call _cond_test(288805 call . settings[288155] c"progress"))
    {
      (288827 call writeln "shuffle")
    }
    {
      unknown tmp[289359] "temp"
      (289377 'move' tmp[289359](289375 call _cond_test 1))
      WhileDo[289364]
      {
        {
          {
            unknown tmp[288857] "temp"
            (288901 'move' tmp[288857](288886 call _cond_test(288888 call &&(288890 call <= curbin[288800] radix[288287])(288894 call ==(288896 call offsets[288301] curbin[288800])(288899 call end_offsets[288315] curbin[288800])))))
            WhileDo[288862]
            {
              {
                (288853 call += curbin[288800] 1)
              }
              label _continueLabel[288860]
              (288881 'move' tmp[288857](288866 call _cond_test(288868 call &&(288870 call <= curbin[288800] radix[288287])(288874 call ==(288876 call offsets[288301] curbin[288800])(288879 call end_offsets[288315] curbin[288800])))))
              tmp[288857]
            }
            label _breakLabel[288861]
          }
          if(288913 call _cond_test(288907 call > curbin[288800] radix[288287]))
          {
            break _breakLabel[289363] _breakLabel[289363]
          }
          unknown max_buf[288923] "param"(288920 call . settings[288155] c"DISTRIBUTE_BUFFER")
          (288926 'end of statement')
          unknown buf[288934](288932 call * max_buf[288923](288929 call . A[288142] c"eltType"))
          (288937 'end of statement')
          unknown used_buf[288939] 0
          (288942 'end of statement')
          unknown end[288947](288946 call end_offsets[288315] curbin[288800])
          (288950 'end of statement')
          unknown endfast[288968](288967 call max(288955 call offsets[288301] curbin[288800])(288965 call -(288960 call end_offsets[288315] curbin[288800])(288963 call * 2 max_buf[288923])))
          (288971 'end of statement')
          unknown bufstart[288986](288985 call max(288976 call offsets[288301] curbin[288800])(288983 call -(288981 call end_offsets[288315] curbin[288800]) max_buf[288923]))
          (288989 'end of statement')
          unknown i[288991] bufstart[288986]
          (288994 'end of statement')
          {
            unknown tmp[289021] "temp"
            (289045 'move' tmp[289021](289040 call _cond_test(289042 call < i[288991] end[288947])))
            WhileDo[289026]
            {
              {
                (289007 call <=>(289002 call buf[288934] used_buf[288939])(289006 call A[288142] i[288991]))
                (289013 call += used_buf[288939] 1)
                (289018 call += i[288991] 1)
              }
              label _continueLabel[289024]
              (289035 'move' tmp[289021](289030 call _cond_test(289032 call < i[288991] end[288947])))
              tmp[289021]
            }
            label _breakLabel[289025]
          }
          {
            unknown tmp[289147] "temp"
            (289175 'move' tmp[289147](289168 call _cond_test(289170 call <(289172 call offsets[288301] curbin[288800]) endfast[288968])))
            WhileDo[289152]
            {
              {
                {
                  unknown j[289109] 0
                  unknown tmp[289110] "maybe param" "temp"
                  (289122 'move' tmp[289110](289120 call chpl_compute_low_param_loop_bound 0(289058 call - max_buf[288923] 1)))
                  unknown tmp[289111] "maybe param" "temp"
                  (289132 'move' tmp[289111](289130 call chpl_compute_high_param_loop_bound 0(289127 call - max_buf[288923] 1)))
                  unknown tmp[289112] "maybe param" "temp"
                  (289135 'move' tmp[289112] 1)
                  ParamForLoop[289137]
                  { j[289109] tmp[289110] tmp[289111] tmp[289112]
                    {
                      const tmp[289076] "const" "temp"(289075 call binForRecord(289071 call buf[288934] j[289109]) criterion[288145] startbit[288148])
                      (289080 call _check_tuple_var_decl tmp[289076] 2)
                      const bin[289062] "const"(289077 call tmp[289076] 0)
                      (289085 'end of statement')
                      (289098 call <=>(289093 call A[288142](289091 call offsets[288301] bin[289062]))(289097 call buf[288934] j[289109]))
                      (289106 call +=(289104 call offsets[288301] bin[289062]) 1)
                    }
                  }
                  label _unused_continueLabel[289114]
                  label _breakLabel[289113]
                }
              }
              label _continueLabel[289150]
              (289163 'move' tmp[289147](289156 call _cond_test(289158 call <(289160 call offsets[288301] curbin[288800]) endfast[288968])))
              tmp[289147]
            }
            label _breakLabel[289151]
          }
          {
            unknown tmp[289328] "temp"
            (289356 'move' tmp[289328](289349 call _cond_test(289351 call <(289353 call offsets[288301] curbin[288800]) end[288947])))
            WhileDo[289333]
            {
              {
                unknown j[289186] 0
                (289189 'end of statement')
                {
                  unknown tmp[289289] "temp"
                  (289325 'move' tmp[289289](289314 call _cond_test(289316 call &&(289318 call >= used_buf[288939] 0)(289322 call < j[289186] used_buf[288939]))))
                  WhileDo[289294]
                  {
                    {
                      const tmp[289215] "const" "temp"(289214 call binForRecord(289210 call buf[288934] j[289186]) criterion[288145] startbit[288148])
                      (289219 call _check_tuple_var_decl tmp[289215] 2)
                      const bin[289201] "const"(289216 call tmp[289215] 0)
                      (289224 'end of statement')
                      unknown offset[289230](289229 call offsets[288301] bin[289201])
                      (289233 'end of statement')
                      (289242 call <=>(289237 call A[288142] offset[289230])(289241 call buf[288934] j[289186]))
                      (289250 call +=(289248 call offsets[288301] bin[289201]) 1)
                      if(289280 call _cond_test(289261 call &&(289255 call == bin[289201] curbin[288800])(289259 call >= offset[289230] bufstart[288986])))
                      {
                        (289265 call -= used_buf[288939] 1)
                        (289277 call <=>(289272 call buf[288934] j[289186])(289276 call buf[288934] used_buf[288939]))
                      }
                      (289286 call += j[289186] 1)
                    }
                    label _continueLabel[289292]
                    (289309 'move' tmp[289289](289298 call _cond_test(289300 call &&(289302 call >= used_buf[288939] 0)(289306 call < j[289186] used_buf[288939]))))
                    tmp[289289]
                  }
                  label _breakLabel[289293]
                }
              }
              label _continueLabel[289331]
              (289344 'move' tmp[289328](289337 call _cond_test(289339 call <(289341 call offsets[288301] curbin[288800]) end[288947])))
              tmp[289328]
            }
            label _breakLabel[289332]
          }
        }
        label _continueLabel[289362]
        (289370 'move' tmp[289359](289368 call _cond_test 1))
        tmp[289359]
      }
      label _breakLabel[289363]
    }
    if(289405 call _cond_test(289381 call . settings[288155] c"progress"))
    {
      (289403 call writeln "sort sub-problems")
    }
    (289415 call =(289413 call offsets[288301] 0) start_n[288130])
    {
      unknown _indexOfInterest[289438] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[289439] "expr temp" "temp"
      (289448 'move' _iterator[289439](289446 call _getIterator(289453 call chpl_direct_range_iter 1 radix[288287] 1)))
      Defer
      {
        {
          (289469 call _freeIterator _iterator[289439])
        }
      }
      { scopeless type
        (289458 'move' _indexOfInterest[289438](289455 call iteratorIndex _iterator[289439]))
      }
      ForLoop[289440]
      {
        unknown i[289462] "index var" "insert auto destroy"
        (289464 'move' i[289462] _indexOfInterest[289438])
        {
          (289434 call =(289426 call offsets[288301] i[289462])(289433 call end_offsets[288315](289430 call - i[289462] 1)))
        }
        label _continueLabel[289443]
        _indexOfInterest[289438]
        _iterator[289439]
      }
      label _breakLabel[289444]
    }
    if(289870 call _cond_test(289481 call ==(289477 call . settings[288155] c"alwaysSerial") 0))
    {
      const subbits[289487] "const"(289485 call + startbit[288148] radixbits[288276])
      (289490 'end of statement')
      unknown nbigsubs[289493] 0
      (289496 'end of statement')
      unknown bigsubs[289511](289509 call chpl__buildArrayRuntimeType(289507 call chpl__ensureDomainExpr(289499 call chpl_build_bounded_range 0 radix[288287]))(289505 call _build_tuple int(64)[13] int(64)[13]))
      (289514 'end of statement')
      const runningNow[289521] "const"(289520 call(289516 call .(364714 call here[90435]) c"runningTasks"))
      (289524 'end of statement')
      {
        unknown _indexOfInterest[289648] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289649] "expr temp" "temp"
        (289658 'move' _iterator[289649](289656 call _getIterator(289666 call chpl_direct_range_iter 1(289663 call - radix[288287] 1) 1)))
        Defer
        {
          {
            (289682 call _freeIterator _iterator[289649])
          }
        }
        { scopeless type
          (289671 'move' _indexOfInterest[289648](289668 call iteratorIndex _iterator[289649]))
        }
        ForLoop[289650]
        {
          unknown bin[289675] "index var" "insert auto destroy"
          (289677 'move' bin[289675] _indexOfInterest[289648])
          {
            const bin_start[289537] "const"(289536 call offsets[288301] bin[289675])
            (289540 'end of statement')
            const bin_end[289563] "const"(289560 IfExpr (289547 call <=(289544 call + bin[289675] 1) radix[288287]) then
            { scopeless
              (289557 call -(289555 call offsets[288301](289552 call + bin[289675] 1)) 1)
            } else
            { scopeless
              end_n[288136]
            } )
            (289566 'end of statement')
            const num[289574] "const"(289572 call -(289569 call + 1 bin_end[289563]) bin_start[289537])
            (289577 'end of statement')
            if(289643 call _cond_test(289586 call ||(289580 call <= num[289574] 1)(289584 call >= startbit[288148] endbit[288152])))
            {
            }
            {
              if(289639 call _cond_test(289607 call ||(289596 call < num[289574](289593 call . settings[288155] c"minForTask"))(289605 call >= runningNow[289521](289602 call . settings[288155] c"maxTasks"))))
              {
                (289618 call msbRadixSort bin_start[289537] bin_end[289563] A[288142] criterion[288145] subbits[289487] endbit[288152] settings[288155])
              }
              {
                (289630 call =(289624 call bigsubs[289511] nbigsubs[289493])(289628 call _build_tuple bin_start[289537] bin_end[289563]))
                (289636 call += nbigsubs[289493] 1)
              }
            }
          }
          label _continueLabel[289653]
          _indexOfInterest[289648]
          _iterator[289649]
        }
        label _breakLabel[289654]
      }
      Forall {
        induction variables:
          
          unknown bin[289720] "index var" "insert auto destroy"
          
          unknown chpl_idx_2[289722] "index var" "an _indexOfInterest or chpl__followIdx variable" "insert auto destroy" "temp"
        iterated expressions:
          (289702 call #(289699 call chpl_build_low_bounded_range 0) nbigsubs[289493])
          bigsubs[289511]
        shadow variables:
        other variables
          forall body
        {
          (289727 call _check_tuple_var_decl chpl_idx_2[289722] 2)
          unknown bin_start[289733] "index var" "insert auto destroy"
          (289735 'move' bin_start[289733](289731 call chpl_idx_2[289722] 0))
          unknown bin_end[289740] "index var" "insert auto destroy"
          (289742 'move' bin_end[289740](289738 call chpl_idx_2[289722] 1))
          (289716 call msbRadixSort bin_start[289733] bin_end[289740] A[288142] criterion[288145] subbits[289487] endbit[288152] settings[288155])
        }
      }
    }
    {
      {
        unknown _indexOfInterest[289828] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[289829] "expr temp" "temp"
        (289838 'move' _iterator[289829](289836 call _getIterator(289846 call chpl_direct_range_iter 1(289843 call - radix[288287] 1) 1)))
        Defer
        {
          {
            (289862 call _freeIterator _iterator[289829])
          }
        }
        { scopeless type
          (289851 'move' _indexOfInterest[289828](289848 call iteratorIndex _iterator[289829]))
        }
        ForLoop[289830]
        {
          unknown bin[289855] "index var" "insert auto destroy"
          (289857 'move' bin[289855] _indexOfInterest[289828])
          {
            const bin_start[289757] "const"(289756 call offsets[288301] bin[289855])
            (289760 'end of statement')
            const bin_end[289783] "const"(289780 IfExpr (289767 call <=(289764 call + bin[289855] 1) radix[288287]) then
            { scopeless
              (289777 call -(289775 call offsets[288301](289772 call + bin[289855] 1)) 1)
            } else
            { scopeless
              end_n[288136]
            } )
            (289786 'end of statement')
            const num[289794] "const"(289792 call -(289789 call + 1 bin_end[289783]) bin_start[289757])
            (289797 'end of statement')
            if(289824 call _cond_test(289806 call ||(289800 call <= num[289794] 1)(289804 call >= startbit[288148] endbit[288152])))
            {
            }
            {
              (289821 call msbRadixSort bin_start[289757] bin_end[289783] A[288142] criterion[288145](289817 call + startbit[288148] radixbits[288276]) endbit[288152] settings[288155])
            }
          }
          label _continueLabel[289833]
          _indexOfInterest[289828]
          _iterator[289829]
        }
        label _breakLabel[289834]
      }
    }
    if(289886 call _cond_test(289875 call . settings[288155] c"CHECK_SORTS"))
    {
      (289884 call checkSorted start_n[288130] end_n[288136] A[288142] criterion[288145])
    }
  }
  (355399 'used modules list'(353052 'use' ChapelStandard[20264])(287993 'import' Sort[267968].{defaultComparator, ShellSort})(288000 'use' RadixSortHelp[276074]))
}