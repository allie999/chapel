AST dump for PCGRandom after pass expandExternArrayCalls.
Module use list: 

{
  (353108 'use' ChapelStandard)
  (307582 'use'(307579 call . super c"RandomSupport"))
  (307586 'use' Random)
  (307589 'use' PCGRandomLib)
  (307592 'use' ChapelLocks)
  function numGenerators[307598](arg t[307596]:_any[178](?)) param : _unknown[51] "private"
  {
    if(307619 call _cond_test(307603 call isBoolType t))
    {
      { scopeless
        (307605 return 1)
      }
    }
    {
      { scopeless
        (307617 return(307615 call /(307612 call +(307610 call numBits t) 31) 32))
      }
    }
  }
  type PCGRandomStream[309153](?) unknown eltType[307629] "type variable" const seed[307636] "const"(307635 call int[13] 64) unknown parSafe[307642] "param" 1 bool[10] function PCGRandomStream[309153](?).init[307650](arg _mt[309157]:_MT[238], arg this[309155]:PCGRandomStream[309153](?), arg eltType[307648]:_any[178](?), arg seed[307662] :
  (307655 call int[13] 64) =
  (307659 call . SeedGenerator c"currentTime"), param arg parSafe[307668] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    (307677 call =(307673 call . this c"eltType") eltType)
    (307688 call =(307684 call . this c"seed") seed)
    (307696 call =(307692 call . this c"parSafe") parSafe)
    (307704 call(307700 call . this c"complete"))
    {
      unknown i[307748] 0
      unknown tmp[307749] "maybe param" "temp"
      (307761 'move' tmp[307749](307759 call chpl_compute_low_param_loop_bound 0(307712 call -(307710 call numGenerators eltType) 1)))
      unknown tmp[307750] "maybe param" "temp"
      (307773 'move' tmp[307750](307771 call chpl_compute_high_param_loop_bound 0(307766 call -(307768 call numGenerators eltType) 1)))
      unknown tmp[307751] "maybe param" "temp"
      (307776 'move' tmp[307751] 1)
      ParamForLoop[307778]
      { i[307748] tmp[307749] tmp[307750] tmp[307751]
        {
          { scopeless
            unknown inc[307723] "param"(307722 call pcg_getvalid_inc(307719 call + i 1))
            (307726 'end of statement')
          }
          (307746 call(307734 call .(307731 call PCGRandomStreamPrivate_rngs i) c"srandom")(307742 call _cast(307741 call uint[115] 64) seed) inc)
        }
      }
      label _unused_continueLabel[307753]
      label _breakLabel[307752]
    }
    (307789 call = PCGRandomStreamPrivate_count 1)
  } function PCGRandomStream[309153](?).PCGRandomStreamPrivate_getNext_noLock[307798](arg _mt[309161]:_MT[238], arg this[309159]:PCGRandomStream[309153](?), arg resultType[307796]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (307802 call += PCGRandomStreamPrivate_count 1)
    (307811 return(307810 call randlc resultType PCGRandomStreamPrivate_rngs))
  } function PCGRandomStream[309153](?).PCGRandomStreamPrivate_getNext_noLock[307819](arg _mt[309165]:_MT[238], arg this[309163]:PCGRandomStream[309153](?), arg resultType[307817]:_any[178](?), arg min[307822] :
  resultType, arg max[307826] :
  resultType) : _unknown[51] "method" "primary method" "no doc"
  {
    (307831 call += PCGRandomStreamPrivate_count 1)
    (307847 return(307846 call randlc_bounded resultType PCGRandomStreamPrivate_rngs seed(307842 call - PCGRandomStreamPrivate_count 1) min max))
  } function PCGRandomStream[309153](?).PCGRandomStreamPrivate_skipToNth_noLock[307857](arg _mt[309169]:_MT[238], arg this[309167]:PCGRandomStream[309153](?), in arg n[307854] :
  integral) : _unknown[51] "method" "primary method" "no doc"
  {
    (307864 call = PCGRandomStreamPrivate_count(307862 call + n 1))
    (307878 call = PCGRandomStreamPrivate_rngs(307877 call randlc_skipto eltType seed(307875 call + n 1)))
  } function PCGRandomStream[309153](?).getNext[307889](arg _mt[309173]:_MT[238], arg this[309171]:PCGRandomStream[309153](?), arg resultType[307886]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method"
  {
    (307894 call _lock)
    { scopeless
      const result[307901] "const"(307900 call PCGRandomStreamPrivate_getNext_noLock resultType)
      (307904 'end of statement')
    }
    (307907 call _unlock)
    (307910 return result)
  }
  { scopeless type
    resultType
  } function PCGRandomStream[309153](?).getNext[307921](arg _mt[309177]:_MT[238], arg this[309175]:PCGRandomStream[309153](?), arg min[307918] :
  eltType, arg max[307924] :
  eltType) : _unknown[51] "method" "primary method"
  {
    (307929 'use' HaltWrappers)
    (307934 call _lock)
    if(307985 call _cond_test(307941 call && boundsChecking(307939 call > min max)))
    {
      { scopeless
        (307983 call(307944 call . HaltWrappers c"boundsCheckHalt")(307980 call +(307977 call +(307971 call +(307968 call + "Cannot generate random numbers within empty range: ["(307966 call _cast string[26] min)) ", ")(307975 call _cast string[26] max)) "]"))
      }
    }
    { scopeless
      const result[307996] "const"(307995 call PCGRandomStreamPrivate_getNext_noLock eltType min max)
      (307999 'end of statement')
    }
    (308002 call _unlock)
    (308005 return result)
  }
  { scopeless type
    eltType
  } function PCGRandomStream[309153](?).getNext[308014](arg _mt[309181]:_MT[238], arg this[309179]:PCGRandomStream[309153](?), arg resultType[308012]:_any[178](?), arg min[308017] :
  resultType, arg max[308021] :
  resultType) : _unknown[51] "method" "primary method"
  {
    (308026 'use' HaltWrappers)
    (308031 call _lock)
    if(308066 call _cond_test(308038 call && boundsChecking(308036 call > min max)))
    {
      { scopeless
        (308064 call(308041 call . HaltWrappers c"boundsCheckHalt")(308061 call +(308058 call +(308052 call +(308049 call + "Cannot generate random numbers within empty range: ["(308047 call _cast string[26] min)) ", ")(308056 call _cast string[26] max)) "]"))
      }
    }
    { scopeless
      const result[308077] "const"(308076 call PCGRandomStreamPrivate_getNext_noLock resultType min max)
      (308080 'end of statement')
    }
    (308083 call _unlock)
    (308086 return result)
  }
  { scopeless type
    resultType
  } function PCGRandomStream[309153](?).skipToNth[308097](arg _mt[309185]:_MT[238], arg this[309183]:PCGRandomStream[309153](?), arg n[308094] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(308134 call _cond_test(308101 call < n 0))
    {
      { scopeless
        (308132 'throw'(308105 'new'(_chpl_manager = _owned[30](?))(308131 call IllegalArgumentError(308128 call + "PCGRandomStream.skipToNth(n) called with negative 'n' value "(308126 call _cast string[26] n)))))
      }
    }
    (308142 call _lock)
    (308147 call PCGRandomStreamPrivate_skipToNth_noLock n)
    (308151 call _unlock)
  } function PCGRandomStream[309153](?).getNth[308161](arg _mt[309189]:_MT[238], arg this[309187]:PCGRandomStream[309153](?), arg n[308158] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(308199 call _cond_test(308166 call < n 0))
    {
      { scopeless
        (308197 'throw'(308170 'new'(_chpl_manager = _owned[30](?))(308196 call IllegalArgumentError(308193 call + "PCGRandomStream.getNth(n) called with negative 'n' value "(308191 call _cast string[26] n)))))
      }
    }
    (308207 call _lock)
    (308212 call PCGRandomStreamPrivate_skipToNth_noLock n)
    { scopeless
      const result[308218] "const"(308217 call PCGRandomStreamPrivate_getNext_noLock eltType)
      (308221 'end of statement')
    }
    (308224 call _unlock)
    (308227 return result)
  }
  { scopeless type
    eltType
  } function PCGRandomStream[309153](?).fillRandom[308241](arg _mt[309193]:_MT[238], arg this[309191]:PCGRandomStream[309153](?), arg arr[308238] :
  (308235 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown x[308268] "index var" "insert auto destroy"
        
        unknown r[308270] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (308260 call iterate(308252 call . arr c"_dom")(308257 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (308264 call = x r)
      }
    }
  } function PCGRandomStream[309153](?).choice[308287](arg _mt[309197]:_MT[238], arg this[309195]:PCGRandomStream[309153](?), arg x[308284] :
  (308282 call chpl__buildArrayRuntimeType unknown dom[308279]), arg size[308292] :
  unknown sizeType[308289] =
  none[57], arg replace[308297] =
  1, arg prob[308303] :
  unknown probType[308300] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      unknown idx[308318](308317 call _choice this dom(size = size)(replace = replace)(prob = prob))
      (308321 'end of statement')
    }
    (308327 return(308326 call x idx))
  } function PCGRandomStream[309153](?).choice[308341](arg _mt[309201]:_MT[238], arg this[309199]:PCGRandomStream[309153](?), arg x[308338] :
  (308337 call range(stridable = ?[260])), arg size[308346] :
  unknown sizeType[308343] =
  none[57], arg replace[308351] =
  1, arg prob[308357] :
  unknown probType[308354] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      unknown dom[308368](308366 call chpl__buildDomainRuntimeType defaultDist 1(stridable = 1))
      (308371 'end of statement')
    }
    if(308425 call _cond_test(308377 call !(308376 call isBoundedRange x)))
    {
      (308402 'throw'(308381 'new'(_chpl_manager = _owned[30](?))(308401 call IllegalArgumentError "input range must be bounded")))
      (308413 call = dom(308411 call chpl__buildDomainExpr(308408 call chpl_build_bounded_range 1 2)))
    }
    {
      (308421 call = dom(308419 call chpl__buildDomainExpr x))
    }
    (308440 return(308439 call _choice this dom(size = size)(replace = replace)(prob = prob)))
  } function PCGRandomStream[309153](?).choice[308450](arg _mt[309205]:_MT[238], arg this[309203]:PCGRandomStream[309153](?), arg x[308447] :
  _domain, arg size[308455] :
  unknown sizeType[308452] =
  none[57], arg replace[308460] =
  1, arg prob[308466] :
  unknown probType[308463] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    (308481 return(308480 call _choice this x(size = size)(replace = replace)(prob = prob)))
  } function PCGRandomStream[309153](?).shuffle[308498](arg _mt[309209]:_MT[238], arg this[309207]:PCGRandomStream[309153](?), arg arr[308495] :
  (308493 call chpl__buildArrayRuntimeType unknown D[308488] unknown eltType[308491])) : _unknown[51] "method" "primary method"
  {
    if(308528 call _cond_test(308505 call !=(308501 call . D c"rank") 1))
    {
      { scopeless
        (308526 call compilerError "Shuffle requires 1-D array")
      }
    }
    { scopeless
      const low[308538] "const"(308535 call . D c"alignedLow")
      const stride[308548] "const"(308547 call abs(308543 call . D c"stride"))
      (308551 'end of statement')
    }
    (308554 call _lock)
    {
      unknown _indexOfInterest[308633] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308634] "expr temp" "temp"
      (308643 'move' _iterator[308634](308641 call _getIterator(308569 call chpl_by(308564 call #(308558 call chpl_build_low_bounded_range 0)(308561 call . D c"size"))(308567 call - 1))))
      Defer
      {
        {
          (308671 call _freeIterator _iterator[308634])
        }
      }
      { scopeless type
        (308660 'move' _indexOfInterest[308633](308657 call iteratorIndex _iterator[308634]))
      }
      ForLoop[308635]
      {
        unknown i[308664] "index var" "insert auto destroy"
        (308666 'move' i[308664] _indexOfInterest[308633])
        {
          { scopeless
            unknown k[308583](308582 call randlc_bounded(308573 call . D c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count 0 i)
            (308586 'end of statement')
          }
          { scopeless
            unknown j[308589] i
            (308592 'end of statement')
          }
          if(308608 call _cond_test(308595 call > stride 1))
          {
            (308599 call *= k stride)
            (308605 call *= j stride)
          }
          (308614 call += k low)
          (308619 call += j low)
          (308630 call <=>(308625 call arr k)(308629 call arr j))
        }
        label _continueLabel[308638]
        _indexOfInterest[308633]
        _iterator[308634]
      }
      label _breakLabel[308639]
    }
    (308683 call += PCGRandomStreamPrivate_count(308680 call . D c"size"))
    (308688 call _unlock)
  } function PCGRandomStream[309153](?).permutation[308701](arg _mt[309213]:_MT[238], arg this[309211]:PCGRandomStream[309153](?), arg arr[308698] :
  (308695 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown low[308716](308713 call .(308712 call(308707 call .(308704 call . arr c"_dom") c"dim") 0) c"low")
      (308719 'end of statement')
    }
    { scopeless
      unknown high[308734](308731 call .(308730 call(308725 call .(308722 call . arr c"_dom") c"dim") 0) c"high")
      (308737 'end of statement')
    }
    if(308769 call _cond_test(308746 call !=(308742 call .(308739 call . arr c"_dom") c"rank") 1))
    {
      { scopeless
        (308767 call compilerError "Permutation requires 1-D array")
      }
    }
    (308776 call _lock)
    {
      unknown _indexOfInterest[308822] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308823] "expr temp" "temp"
      (308832 'move' _iterator[308823](308830 call _getIterator(308837 call chpl_direct_range_iter low high 1)))
      Defer
      {
        {
          (308853 call _freeIterator _iterator[308823])
        }
      }
      { scopeless type
        (308842 'move' _indexOfInterest[308822](308839 call iteratorIndex _iterator[308823]))
      }
      ForLoop[308824]
      {
        unknown i[308846] "index var" "insert auto destroy"
        (308848 'move' i[308846] _indexOfInterest[308822])
        {
          { scopeless
            unknown j[308798](308797 call randlc_bounded(308788 call .(308785 call . arr c"_dom") c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count low i)
            (308801 'end of statement')
          }
          (308811 call =(308806 call arr i)(308810 call arr j))
          (308819 call =(308817 call arr j) i)
        }
        label _continueLabel[308827]
        _indexOfInterest[308822]
        _iterator[308823]
      }
      label _breakLabel[308828]
    }
    (308865 call += PCGRandomStreamPrivate_count(308863 call - high low))
    (308870 call _unlock)
  } function PCGRandomStream[309153](?).fillRandom[308882](arg _mt[309217]:_MT[238], arg this[309215]:PCGRandomStream[309153](?), arg arr[308879] :
  (308876 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc"
  {
    (308928 call compilerError "PCGRandomStream(eltType="(308905 call _cast string[26] eltType) ") can only be used to fill arrays of "(308926 call _cast string[26] eltType))
  } function PCGRandomStream[309153](?).iterate[308939](arg _mt[309221]:_MT[238], arg this[309219]:PCGRandomStream[309153](?), arg D[308936] :
  _domain, arg resultType[308942]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (308947 call _lock)
    { scopeless
      const start[308951] "const" PCGRandomStreamPrivate_count
      (308954 'end of statement')
    }
    (308969 call += PCGRandomStreamPrivate_count(308968 call(308960 call .(308957 call . D c"size") c"safeCast")(308966 call int[13] 64)))
    (308978 call PCGRandomStreamPrivate_skipToNth_noLock(308975 call - PCGRandomStreamPrivate_count 1))
    (308982 call _unlock)
    (308991 return(308990 call PCGRandomPrivate_iterate resultType D seed start))
  } function PCGRandomStream[309153](?).iterate[309001](arg _mt[309225]:_MT[238], arg this[309223]:PCGRandomStream[309153](?), arg D[308998] :
  _domain, arg resultType[309004]:_any[178](?) =
  eltType, param arg tag[309007]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    { scopeless
      const start[309017] "const" PCGRandomStreamPrivate_count
      (309020 'end of statement')
    }
    (309030 return(309029 call PCGRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (309014 call == tag(309011 call . iterKind c"leader"))
  } function PCGRandomStream[309153](?).writeThis[309039](arg _mt[309229]:_MT[238], arg this[309227]:PCGRandomStream[309153](?), arg f[309037]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides"
  {
    (309043 call <~> f "PCGRandomStream(eltType=")
    (309052 call <~> f(309050 call _cast string[26] eltType))
    (309057 call <~> f ", parSafe=")
    (309062 call <~> f parSafe)
    (309067 call <~> f ", seed=")
    (309072 call <~> f seed)
    (309077 call <~> f ")")
  } unknown _l[309088] "no doc"(309085 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) function PCGRandomStream[309153](?)._lock[309094](arg _mt[309233]:_MT[238], arg this[309231]:PCGRandomStream[309153](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(309104 call _cond_test parSafe)
    {
      { scopeless
        (309102 call(309098 call . _l c"lock"))
      }
    }
  } function PCGRandomStream[309153](?)._unlock[309114](arg _mt[309237]:_MT[238], arg this[309235]:PCGRandomStream[309153](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(309124 call _cond_test parSafe)
    {
      { scopeless
        (309122 call(309118 call . _l c"unlock"))
      }
    }
  } unknown PCGRandomStreamPrivate_rngs[309139] "no doc"(309137 call *(309135 call numGenerators eltType) pcg_setseq_64_xsh_rr_32_rng) unknown PCGRandomStreamPrivate_count[309148] "no doc" 1(309146 call int[13] 64)
  function randToReal64[309249](arg x[309246] :
  (309245 call uint[115] 64)) : _unknown[51] "inline" "private"
  {
    (309268 return(309267 call ldexp(309261 call _cast(309260 call real[16] 64) x)(309265 call - 64)))
  }
  { scopeless type
    (309254 call real[16] 64)
  }
  function randToReal64[309283](arg x[309280] :
  (309279 call uint[115] 64), arg min[309289] :
  (309288 call real[16] 64), arg max[309296] :
  (309295 call real[16] 64)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown normalized[309307](309306 call randToReal64 x)
      (309310 'end of statement')
    }
    (309322 return(309320 call +(309317 call *(309314 call - max min) normalized) min))
  }
  { scopeless type
    (309302 call real[16] 64)
  }
  function randToReal32[309336](arg x[309333] :
  (309332 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    (309351 return(309350 call ldexp(309344 call _cast(309343 call real[16] 32) x)(309348 call - 32)))
  }
  function randToReal32[309365](arg x[309362] :
  (309361 call uint[115] 32), arg min[309371] :
  (309370 call real[16] 32), arg max[309378] :
  (309377 call real[16] 32)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown normalized[309389](309388 call randToReal32 x)
      (309392 'end of statement')
    }
    (309404 return(309402 call +(309399 call *(309396 call - max min) normalized) min))
  }
  { scopeless type
    (309384 call real[16] 32)
  }
  function rand32_1[309413](ref arg states[309411]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309434 return(309433 call(309425 call .(309422 call states 0) c"random")(309431 call pcg_getvalid_inc 1)))
  }
  { scopeless type
    (309418 call uint[115] 32)
  }
  function rand32_2[309444](ref arg states[309442]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309463 return(309462 call(309454 call .(309453 call states 1) c"random")(309460 call pcg_getvalid_inc 2)))
  }
  { scopeless type
    (309449 call uint[115] 32)
  }
  function boundedrand32_1[309473](ref arg states[309471]:_any[178](?), arg seed[309479] :
  (309478 call int[13] 64), arg count[309486] :
  (309485 call int[13] 64), arg bound[309493] :
  (309492 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309556 call _cond_test(309508 call == bound(309507 call max(309505 call uint[115] 32))))
    {
      { scopeless
        (309514 return(309513 call rand32_1 states))
      }
    }
    {
      { scopeless
        (309554 return(309553 call(309522 call .(309519 call states 0) c"bounded_random_vary_inc")(309528 call pcg_getvalid_inc 1)(309532 call + bound 1)(309539 call _cast(309538 call uint[115] 64) seed)(309549 call _cast(309548 call uint[115] 64)(309543 call - count 1)) 101 4))
      }
    }
  }
  { scopeless type
    (309499 call uint[115] 32)
  }
  function boundedrand32_2[309570](ref arg states[309568]:_any[178](?), arg seed[309576] :
  (309575 call int[13] 64), arg count[309583] :
  (309582 call int[13] 64), arg bound[309590] :
  (309589 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309653 call _cond_test(309605 call == bound(309604 call max(309602 call uint[115] 32))))
    {
      { scopeless
        (309611 return(309610 call rand32_2 states))
      }
    }
    {
      { scopeless
        (309651 return(309650 call(309617 call .(309616 call states 1) c"bounded_random_vary_inc")(309623 call pcg_getvalid_inc 2)(309627 call + bound 1)(309634 call _cast(309633 call uint[115] 64) seed)(309644 call _cast(309643 call uint[115] 64)(309638 call - count 1)) 102 4))
      }
    }
  }
  { scopeless type
    (309596 call uint[115] 32)
  }
  function rand64_1[309667](ref arg states[309665]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown ret[309678] 0(309676 call uint[115] 64)
      (309681 'end of statement')
    }
    (309697 call |= ret(309696 call(309688 call .(309687 call states 0) c"random")(309694 call pcg_getvalid_inc 1)))
    (309702 call <<= ret 32)
    (309719 call |= ret(309718 call(309710 call .(309709 call states 1) c"random")(309716 call pcg_getvalid_inc 2)))
    (309723 return ret)
  }
  { scopeless type
    (309672 call uint[115] 64)
  }
  function rand64_2[309732](ref arg states[309730]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown ret[309743] 0(309741 call uint[115] 64)
      (309746 'end of statement')
    }
    (309762 call |= ret(309761 call(309753 call .(309752 call states 2) c"random")(309759 call pcg_getvalid_inc 3)))
    (309767 call <<= ret 32)
    (309784 call |= ret(309783 call(309775 call .(309774 call states 3) c"random")(309781 call pcg_getvalid_inc 4)))
    (309788 return ret)
  }
  { scopeless type
    (309737 call uint[115] 64)
  }
  function boundedrand64_1[309797](ref arg states[309795]:_any[178](?), arg seed[309803] :
  (309802 call int[13] 64), arg count[309810] :
  (309809 call int[13] 64), arg bound[309814] :
  uint[115]) : _unknown[51] "private"
  {
    if(309924 call _cond_test(309829 call > bound(309827 call _cast uint[115](309825 call max(309823 call uint[115] 32)))))
    {
      { scopeless
        unknown toprand[309835](309833 call _cast uint[115] 0)
        (309838 'end of statement')
      }
      { scopeless
        unknown botrand[309844](309842 call _cast uint[115] 0)
        (309847 'end of statement')
      }
      (309865 call = toprand(309864 call boundedrand32_1 states seed count(309862 call _cast(309861 call uint[115] 32)(309856 call >> bound 32))))
      (309891 call = botrand(309890 call boundedrand32_2 states seed count(309888 call _cast(309887 call uint[115] 32)(309882 call & bound(309881 call max(309879 call uint[115] 32))))))
      (309901 return(309899 call |(309896 call << toprand 32) botrand))
    }
    {
      (309906 call rand32_1 states)
      (309922 return(309921 call boundedrand32_2 states seed count(309919 call _cast(309918 call uint[115] 32) bound)))
    }
  }
  { scopeless type
    uint[115]
  }
  function checkSufficientBitsAndAdvanceOthers[309936](arg resultType[309934]:_any[178](?), ref arg states[309938]:_any[178](?)) : _unknown[51] "private"
  {
    { scopeless
      unknown numGenForResultType[309944] "param"(309943 call numGenerators resultType)
      (309947 'end of statement')
    }
    { scopeless
      unknown numGen[309953] "param"(309950 call . states c"size")
      (309956 'end of statement')
    }
    if(310063 call _cond_test(309959 call > numGenForResultType numGen))
    {
      { scopeless
        (310061 call compilerError(310058 call +(310039 call +(310030 call +(310011 call +(310002 call +(309983 call + "PCGRandomStream cannot produce "(309981 call _cast string[26] resultType)) " (requiring ")(310009 call _cast string[26](310006 call * 32 numGenForResultType))) " bits) from a stream configured for ")(310037 call _cast string[26](310034 call * 32 numGen))) " bits of output"))
      }
    }
    {
      unknown _indexOfInterest[310097] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[310098] "expr temp" "temp"
      (310107 'move' _iterator[310098](310105 call _getIterator(310115 call chpl_direct_range_iter(310111 call + numGenForResultType 1) numGen 1)))
      Defer
      {
        {
          (310131 call _freeIterator _iterator[310098])
        }
      }
      { scopeless type
        (310120 'move' _indexOfInterest[310097](310117 call iteratorIndex _iterator[310098]))
      }
      ForLoop[310099]
      {
        unknown i[310124] "index var" "insert auto destroy"
        (310126 'move' i[310124] _indexOfInterest[310097])
        {
          (310094 call(310083 call .(310082 call states(310079 call - i 1)) c"random")(310092 call pcg_getvalid_inc(310089 call _cast uint[115] i)))
        }
        label _continueLabel[310102]
        _indexOfInterest[310097]
        _iterator[310098]
      }
      label _breakLabel[310103]
    }
  }
  function randlc[310144](arg resultType[310142]:_any[178](?), ref arg states[310146]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310152 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(310471 call _cond_test(310160 call == resultType(310159 call complex[140] 128)))
    {
      (310185 return(310183 call _cast(310182 call complex[140] 128)(310177 call _build_tuple(310168 call randToReal64(310166 call rand64_1 states))(310175 call randToReal64(310173 call rand64_2 states)))))
    }
    {
      { scopeless
        if(310466 call _cond_test(310193 call == resultType(310192 call complex[140] 64)))
        {
          (310218 return(310216 call _cast(310215 call complex[140] 64)(310210 call _build_tuple(310201 call randToReal32(310199 call rand32_1 states))(310208 call randToReal32(310206 call rand32_2 states)))))
        }
        {
          { scopeless
            if(310461 call _cond_test(310226 call == resultType(310225 call imag[130] 64)))
            {
              (310238 return(310237 call _r2i(310235 call randToReal64(310233 call rand64_1 states))))
            }
            {
              { scopeless
                if(310456 call _cond_test(310246 call == resultType(310245 call imag[130] 32)))
                {
                  (310258 return(310257 call _r2i(310255 call randToReal32(310253 call rand32_1 states))))
                }
                {
                  { scopeless
                    if(310451 call _cond_test(310266 call == resultType(310265 call real[16] 64)))
                    {
                      (310275 return(310274 call randToReal64(310272 call rand64_1 states)))
                    }
                    {
                      { scopeless
                        if(310446 call _cond_test(310283 call == resultType(310282 call real[16] 32)))
                        {
                          (310292 return(310291 call randToReal32(310289 call rand32_1 states)))
                        }
                        {
                          { scopeless
                            if(310441 call _cond_test(310309 call ||(310300 call == resultType(310299 call uint[115] 64))(310307 call == resultType(310306 call int[13] 64))))
                            {
                              (310318 return(310316 call _cast resultType(310314 call rand64_1 states)))
                            }
                            {
                              { scopeless
                                if(310436 call _cond_test(310335 call ||(310326 call == resultType(310325 call uint[115] 32))(310333 call == resultType(310332 call int[13] 32))))
                                {
                                  (310344 return(310342 call _cast resultType(310340 call rand32_1 states)))
                                }
                                {
                                  { scopeless
                                    if(310431 call _cond_test(310361 call ||(310352 call == resultType(310351 call uint[115] 16))(310359 call == resultType(310358 call int[13] 16))))
                                    {
                                      (310373 return(310371 call _cast resultType(310368 call >>(310366 call rand32_1 states) 16)))
                                    }
                                    {
                                      { scopeless
                                        if(310426 call _cond_test(310390 call ||(310381 call == resultType(310380 call uint[115] 8))(310388 call == resultType(310387 call int[13] 8))))
                                        {
                                          (310402 return(310400 call _cast resultType(310397 call >>(310395 call rand32_1 states) 24)))
                                        }
                                        {
                                          { scopeless
                                            if(310422 call _cond_test(310408 call isBoolType resultType))
                                            {
                                              (310419 return(310417 call !=(310414 call >>(310412 call rand32_1 states) 31) 0))
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_bounded[310482](arg resultType[310480]:_any[178](?), ref arg states[310484]:_any[178](?), arg seed[310490] :
  (310489 call int[13] 64), arg count[310497] :
  (310496 call int[13] 64), arg min[310500]:_any[178](?), arg max[310502]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310508 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(310969 call _cond_test(310516 call == resultType(310515 call complex[140] 128)))
    {
      (310557 return(310555 call _cast(310554 call complex[140] 128)(310549 call _build_tuple(310532 call randToReal64(310522 call rand64_1 states)(310525 call . min c"re")(310529 call . max c"re"))(310547 call randToReal64(310537 call rand64_2 states)(310540 call . min c"im")(310544 call . max c"im")))))
    }
    {
      { scopeless
        if(310964 call _cond_test(310565 call == resultType(310564 call complex[140] 64)))
        {
          (310606 return(310604 call _cast(310603 call complex[140] 64)(310598 call _build_tuple(310581 call randToReal32(310571 call rand32_1 states)(310574 call . min c"re")(310578 call . max c"re"))(310596 call randToReal32(310586 call rand32_2 states)(310589 call . min c"im")(310593 call . max c"im")))))
        }
        {
          { scopeless
            if(310959 call _cond_test(310614 call == resultType(310613 call imag[130] 64)))
            {
              (310634 return(310633 call _r2i(310631 call randToReal64(310621 call rand64_1 states)(310626 call _i2r min)(310630 call _i2r max))))
            }
            {
              { scopeless
                if(310954 call _cond_test(310642 call == resultType(310641 call imag[130] 32)))
                {
                  (310662 return(310661 call _r2i(310659 call randToReal32(310649 call rand32_1 states)(310654 call _i2r min)(310658 call _i2r max))))
                }
                {
                  { scopeless
                    if(310949 call _cond_test(310670 call == resultType(310669 call real[16] 64)))
                    {
                      (310681 return(310680 call randToReal64(310676 call rand64_1 states) min max))
                    }
                    {
                      { scopeless
                        if(310944 call _cond_test(310689 call == resultType(310688 call real[16] 32)))
                        {
                          (310700 return(310699 call randToReal32(310695 call rand32_1 states) min max))
                        }
                        {
                          { scopeless
                            if(310939 call _cond_test(310717 call ||(310708 call == resultType(310707 call uint[115] 64))(310715 call == resultType(310714 call int[13] 64))))
                            {
                              (310747 return(310745 call _cast resultType(310742 call +(310734 call boundedrand64_1 states seed count(310732 call _cast(310731 call uint[115] 64)(310726 call - max min)))(310740 call _cast(310739 call uint[115] 64) min))))
                            }
                            {
                              { scopeless
                                if(310934 call _cond_test(310764 call ||(310755 call == resultType(310754 call uint[115] 32))(310762 call == resultType(310761 call int[13] 32))))
                                {
                                  (310794 return(310792 call _cast resultType(310789 call +(310781 call boundedrand32_1 states seed count(310779 call _cast(310778 call uint[115] 32)(310773 call - max min)))(310787 call _cast(310786 call uint[115] 32) min))))
                                }
                                {
                                  { scopeless
                                    if(310929 call _cond_test(310811 call ||(310802 call == resultType(310801 call uint[115] 16))(310809 call == resultType(310808 call int[13] 16))))
                                    {
                                      (310841 return(310839 call _cast resultType(310836 call +(310828 call boundedrand32_1 states seed count(310826 call _cast(310825 call uint[115] 32)(310820 call - max min)))(310834 call _cast(310833 call uint[115] 32) min))))
                                    }
                                    {
                                      { scopeless
                                        if(310924 call _cond_test(310858 call ||(310849 call == resultType(310848 call uint[115] 8))(310856 call == resultType(310855 call int[13] 8))))
                                        {
                                          (310888 return(310886 call _cast resultType(310883 call +(310875 call boundedrand32_1 states seed count(310873 call _cast(310872 call uint[115] 32)(310867 call - max min)))(310881 call _cast(310880 call uint[115] 32) min))))
                                        }
                                        {
                                          { scopeless
                                            if(310920 call _cond_test(310894 call isBoolType resultType))
                                            {
                                              (310914 call compilerError "bounded rand with boolean type")
                                              (310918 return 0)
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_skipto[310980](arg resultType[310978]:_any[178](?), arg seed[310986] :
  (310985 call int[13] 64), arg n[310990] :
  integral) : _unknown[51] "private"
  {
    { scopeless
      unknown states[311000](310998 call *(310996 call numGenerators resultType) pcg_setseq_64_xsh_rr_32_rng)
      (311003 'end of statement')
    }
    {
      unknown i[311066] 0
      unknown tmp[311067] "maybe param" "temp"
      (311079 'move' tmp[311067](311077 call chpl_compute_low_param_loop_bound 0(311011 call -(311007 call . states c"size") 1)))
      unknown tmp[311068] "maybe param" "temp"
      (311092 'move' tmp[311068](311090 call chpl_compute_high_param_loop_bound 0(311084 call -(311086 call . states c"size") 1)))
      unknown tmp[311069] "maybe param" "temp"
      (311095 'move' tmp[311069] 1)
      ParamForLoop[311097]
      { i[311066] tmp[311067] tmp[311068] tmp[311069]
        {
          { scopeless
            unknown inc[311022] "param"(311021 call pcg_getvalid_inc(311018 call + i 1))
            (311025 'end of statement')
          }
          (311043 call(311031 call .(311030 call states i) c"srandom")(311039 call _cast(311038 call uint[115] 64) seed) inc)
          (311064 call(311049 call .(311048 call states i) c"advance") inc(311062 call _cast(311061 call uint[115] 64)(311056 call - n 1)))
        }
      }
      label _unused_continueLabel[311071]
      label _breakLabel[311070]
    }
    (311107 return states)
  }
  function outer[311115](arg ranges[311113]:_any[178](?), param arg dim[311119] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private"
  {
    if(311287 call _cond_test(311131 call ==(311125 call + dim 2)(311128 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[311143] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[311144] "expr temp" "temp"
        (311153 'move' _iterator[311144](311151 call _getIterator(311137 call ranges dim)))
        Defer
        {
          {
            (311170 call _freeIterator _iterator[311144])
          }
        }
        { scopeless type
          (311159 'move' _indexOfInterest[311143](311156 call iteratorIndex _iterator[311144]))
        }
        ForLoop[311145]
        {
          unknown i[311163] "index var" "insert auto destroy"
          (311165 'move' i[311163] _indexOfInterest[311143])
          { scopeless
            (311141 yield(311139 call _build_tuple i))
          }
          label _continueLabel[311148]
          _indexOfInterest[311143]
          _iterator[311144]
        }
        label _breakLabel[311149]
      }
    }
    {
      { scopeless
        if(311283 call _cond_test(311186 call <(311180 call + dim 2)(311183 call . ranges c"size")))
        {
          {
            unknown _indexOfInterest[311244] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[311245] "expr temp" "temp"
            (311254 'move' _iterator[311245](311252 call _getIterator(311192 call ranges dim)))
            Defer
            {
              {
                (311271 call _freeIterator _iterator[311245])
              }
            }
            { scopeless type
              (311260 'move' _indexOfInterest[311244](311257 call iteratorIndex _iterator[311245]))
            }
            ForLoop[311246]
            {
              unknown i[311264] "index var" "insert auto destroy"
              (311266 'move' i[311264] _indexOfInterest[311244])
              {
                unknown _indexOfInterest[311210] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[311211] "expr temp" "temp"
                (311220 'move' _iterator[311211](311218 call _getIterator(311201 call outer ranges(311199 call + dim 1))))
                Defer
                {
                  {
                    (311237 call _freeIterator _iterator[311211])
                  }
                }
                { scopeless type
                  (311226 'move' _indexOfInterest[311210](311223 call iteratorIndex _iterator[311211]))
                }
                ForLoop[311212]
                {
                  unknown j[311230] "index var" "insert auto destroy"
                  (311232 'move' j[311230] _indexOfInterest[311210])
                  { scopeless
                    (311208 yield(311206 call _build_tuple i(311204 'expand_tuple' j)))
                  }
                  label _continueLabel[311215]
                  _indexOfInterest[311210]
                  _iterator[311211]
                }
                label _breakLabel[311216]
              }
              label _continueLabel[311249]
              _indexOfInterest[311244]
              _iterator[311245]
            }
            label _breakLabel[311250]
          }
        }
        {
          (311280 yield 0)
        }
      }
    }
  }
  function PCGRandomPrivate_iterate[311299](arg resultType[311297]:_any[178](?), arg D[311302] :
  _domain, arg seed[311309] :
  (311308 call int[13] 64), arg start[311316] :
  (311315 call int[13] 64)) : _unknown[51] "iterator fn" "no doc"
  {
    { scopeless
      unknown cursor[311325](311324 call randlc_skipto resultType seed start)
      (311328 'end of statement')
    }
    {
      unknown _indexOfInterest[311339] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311340] "expr temp" "temp"
      (311349 'move' _iterator[311340](311347 call _getIterator D))
      Defer
      {
        {
          (311365 call _freeIterator _iterator[311340])
        }
      }
      { scopeless type
        (311354 'move' _indexOfInterest[311339](311351 call iteratorIndex _iterator[311340]))
      }
      ForLoop[311341]
      {
        unknown i[311358] "index var" "insert auto destroy"
        (311360 'move' i[311358] _indexOfInterest[311339])
        { scopeless
          (311337 yield(311336 call randlc resultType cursor))
        }
        label _continueLabel[311344]
        _indexOfInterest[311339]
        _iterator[311340]
      }
      label _breakLabel[311345]
    }
  }
  function PCGRandomPrivate_iterate[311378](arg resultType[311376]:_any[178](?), arg D[311381] :
  _domain, arg seed[311388] :
  (311387 call int[13] 64), arg start[311395] :
  (311394 call int[13] 64), param arg tag[311399] :
  iterKind) : _unknown[51] "iterator fn" "no doc"
  {
    {
      unknown _indexOfInterest[311424] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311425] "expr temp" "temp"
      (311434 'move' _iterator[311425](311432 call _getIterator(311420 call(311411 call . D c"these")(tag =(311415 call . iterKind c"leader")))))
      Defer
      {
        {
          (311451 call _freeIterator _iterator[311425])
        }
      }
      { scopeless type
        (311440 'move' _indexOfInterest[311424](311437 call iteratorIndex _iterator[311425]))
      }
      ForLoop[311426]
      {
        unknown block[311444] "index var" "insert auto destroy"
        (311446 'move' block[311444] _indexOfInterest[311424])
        { scopeless
          (311422 yield block)
        }
        label _continueLabel[311429]
        _indexOfInterest[311424]
        _iterator[311425]
      }
      label _breakLabel[311430]
    }
  }
  where {
    (311407 call == tag(311404 call . iterKind c"leader"))
  }
  function PCGRandomPrivate_iterate[311466](arg resultType[311464]:_any[178](?), arg D[311469] :
  _domain, arg seed[311476] :
  (311475 call int[13] 64), arg start[311483] :
  (311482 call int[13] 64), param arg tag[311487] :
  iterKind, arg followThis[311490]:_any[178](?)) : _unknown[51] "iterator fn" "no doc"
  {
    (311500 'use' DSIUtil)
    { scopeless
      unknown multiplier[311504] "param" 1
      (311507 'end of statement')
    }
    { scopeless
      const ZD[311512] "const"(311511 call computeZeroBasedDomain D)
      (311515 'end of statement')
    }
    { scopeless
      const innerRange[311526] "const"(311525 call followThis(311522 call -(311518 call . ZD c"rank") 1))
      (311529 'end of statement')
    }
    {
      unknown _indexOfInterest[311760] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311761] "expr temp" "temp"
      (311770 'move' _iterator[311761](311768 call _getIterator(311534 call outer followThis)))
      Defer
      {
        {
          (311787 call _freeIterator _iterator[311761])
        }
      }
      { scopeless type
        (311776 'move' _indexOfInterest[311760](311773 call iteratorIndex _iterator[311761]))
      }
      ForLoop[311762]
      {
        unknown outer[311780] "index var" "insert auto destroy"
        (311782 'move' outer[311780] _indexOfInterest[311760])
        {
          { scopeless
            unknown myStart[311536] start
            (311539 'end of statement')
          }
          if(311605 call _cond_test(311546 call >(311542 call . ZD c"rank") 1))
          {
            { scopeless
              (311576 call += myStart(311574 call * multiplier(311573 call(311565 call .(311564 call(311551 call . ZD c"indexOrder")(311561 call _build_tuple(311555 'expand_tuple' outer)(311557 call . innerRange c"low"))) c"safeCast")(311571 call int[13] 64))))
            }
          }
          {
            { scopeless
              (311602 call += myStart(311600 call * multiplier(311599 call(311591 call .(311590 call(311582 call . ZD c"indexOrder")(311586 call . innerRange c"low")) c"safeCast")(311597 call int[13] 64))))
            }
          }
          if(311756 call _cond_test(311615 call !(311612 call . innerRange c"stridable")))
          {
            { scopeless
              unknown cursor[311623](311622 call randlc_skipto resultType seed myStart)
              (311626 'end of statement')
            }
            {
              unknown _indexOfInterest[311637] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311638] "expr temp" "temp"
              (311647 'move' _iterator[311638](311645 call _getIterator innerRange))
              Defer
              {
                {
                  (311663 call _freeIterator _iterator[311638])
                }
              }
              { scopeless type
                (311652 'move' _indexOfInterest[311637](311649 call iteratorIndex _iterator[311638]))
              }
              ForLoop[311639]
              {
                unknown i[311656] "index var" "insert auto destroy"
                (311658 'move' i[311656] _indexOfInterest[311637])
                { scopeless
                  (311635 yield(311634 call randlc resultType cursor))
                }
                label _continueLabel[311642]
                _indexOfInterest[311637]
                _iterator[311638]
              }
              label _breakLabel[311643]
            }
          }
          {
            (311684 call -= myStart(311683 call(311675 call .(311672 call . innerRange c"low") c"safeCast")(311681 call int[13] 64)))
            {
              unknown _indexOfInterest[311723] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311724] "expr temp" "temp"
              (311733 'move' _iterator[311724](311731 call _getIterator innerRange))
              Defer
              {
                {
                  (311749 call _freeIterator _iterator[311724])
                }
              }
              { scopeless type
                (311738 'move' _indexOfInterest[311723](311735 call iteratorIndex _iterator[311724]))
              }
              ForLoop[311725]
              {
                unknown i[311742] "index var" "insert auto destroy"
                (311744 'move' i[311742] _indexOfInterest[311723])
                {
                  { scopeless
                    unknown cursor[311711](311710 call randlc_skipto resultType seed(311708 call + myStart(311706 call *(311704 call(311696 call . i c"safeCast")(311702 call int[13] 64)) multiplier)))
                    (311714 'end of statement')
                  }
                  (311721 yield(311720 call randlc resultType cursor))
                }
                label _continueLabel[311728]
                _indexOfInterest[311723]
                _iterator[311724]
              }
              label _breakLabel[311729]
            }
          }
        }
        label _continueLabel[311765]
        _indexOfInterest[311760]
        _iterator[311761]
      }
      label _breakLabel[311766]
    }
  }
  where {
    (311497 call == tag(311494 call . iterKind c"follower"))
  }
}