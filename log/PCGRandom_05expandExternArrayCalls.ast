AST dump for PCGRandom after pass expandExternArrayCalls.
Module use list: 

{
  (353106 'use' ChapelStandard)
  (307580 'use'(307577 call . super c"RandomSupport"))
  (307584 'use' Random)
  (307587 'use' PCGRandomLib)
  (307590 'use' ChapelLocks)
  function numGenerators[307596](arg t[307594]:_any[178](?)) param : _unknown[51] "private"
  {
    if(307617 call _cond_test(307601 call isBoolType t))
    {
      { scopeless
        (307603 return 1)
      }
    }
    {
      { scopeless
        (307615 return(307613 call /(307610 call +(307608 call numBits t) 31) 32))
      }
    }
  }
  type PCGRandomStream[309151](?) unknown eltType[307627] "type variable" const seed[307634] "const"(307633 call int[13] 64) unknown parSafe[307640] "param" 1 bool[10] function PCGRandomStream[309151](?).init[307648](arg _mt[309155]:_MT[238], arg this[309153]:PCGRandomStream[309151](?), arg eltType[307646]:_any[178](?), arg seed[307660] :
  (307653 call int[13] 64) =
  (307657 call . SeedGenerator c"currentTime"), param arg parSafe[307666] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    (307675 call =(307671 call . this c"eltType") eltType)
    (307686 call =(307682 call . this c"seed") seed)
    (307694 call =(307690 call . this c"parSafe") parSafe)
    (307702 call(307698 call . this c"complete"))
    {
      unknown i[307746] 0
      unknown tmp[307747] "maybe param" "temp"
      (307759 'move' tmp[307747](307757 call chpl_compute_low_param_loop_bound 0(307710 call -(307708 call numGenerators eltType) 1)))
      unknown tmp[307748] "maybe param" "temp"
      (307771 'move' tmp[307748](307769 call chpl_compute_high_param_loop_bound 0(307764 call -(307766 call numGenerators eltType) 1)))
      unknown tmp[307749] "maybe param" "temp"
      (307774 'move' tmp[307749] 1)
      ParamForLoop[307776]
      { i[307746] tmp[307747] tmp[307748] tmp[307749]
        {
          { scopeless
            unknown inc[307721] "param"(307720 call pcg_getvalid_inc(307717 call + i 1))
            (307724 'end of statement')
          }
          (307744 call(307732 call .(307729 call PCGRandomStreamPrivate_rngs i) c"srandom")(307740 call _cast(307739 call uint[115] 64) seed) inc)
        }
      }
      label _unused_continueLabel[307751]
      label _breakLabel[307750]
    }
    (307787 call = PCGRandomStreamPrivate_count 1)
  } function PCGRandomStream[309151](?).PCGRandomStreamPrivate_getNext_noLock[307796](arg _mt[309159]:_MT[238], arg this[309157]:PCGRandomStream[309151](?), arg resultType[307794]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (307800 call += PCGRandomStreamPrivate_count 1)
    (307809 return(307808 call randlc resultType PCGRandomStreamPrivate_rngs))
  } function PCGRandomStream[309151](?).PCGRandomStreamPrivate_getNext_noLock[307817](arg _mt[309163]:_MT[238], arg this[309161]:PCGRandomStream[309151](?), arg resultType[307815]:_any[178](?), arg min[307820] :
  resultType, arg max[307824] :
  resultType) : _unknown[51] "method" "primary method" "no doc"
  {
    (307829 call += PCGRandomStreamPrivate_count 1)
    (307845 return(307844 call randlc_bounded resultType PCGRandomStreamPrivate_rngs seed(307840 call - PCGRandomStreamPrivate_count 1) min max))
  } function PCGRandomStream[309151](?).PCGRandomStreamPrivate_skipToNth_noLock[307855](arg _mt[309167]:_MT[238], arg this[309165]:PCGRandomStream[309151](?), in arg n[307852] :
  integral) : _unknown[51] "method" "primary method" "no doc"
  {
    (307862 call = PCGRandomStreamPrivate_count(307860 call + n 1))
    (307876 call = PCGRandomStreamPrivate_rngs(307875 call randlc_skipto eltType seed(307873 call + n 1)))
  } function PCGRandomStream[309151](?).getNext[307887](arg _mt[309171]:_MT[238], arg this[309169]:PCGRandomStream[309151](?), arg resultType[307884]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method"
  {
    (307892 call _lock)
    { scopeless
      const result[307899] "const"(307898 call PCGRandomStreamPrivate_getNext_noLock resultType)
      (307902 'end of statement')
    }
    (307905 call _unlock)
    (307908 return result)
  }
  { scopeless type
    resultType
  } function PCGRandomStream[309151](?).getNext[307919](arg _mt[309175]:_MT[238], arg this[309173]:PCGRandomStream[309151](?), arg min[307916] :
  eltType, arg max[307922] :
  eltType) : _unknown[51] "method" "primary method"
  {
    (307927 'use' HaltWrappers)
    (307932 call _lock)
    if(307983 call _cond_test(307939 call && boundsChecking(307937 call > min max)))
    {
      { scopeless
        (307981 call(307942 call . HaltWrappers c"boundsCheckHalt")(307978 call +(307975 call +(307969 call +(307966 call + "Cannot generate random numbers within empty range: ["(307964 call _cast string[26] min)) ", ")(307973 call _cast string[26] max)) "]"))
      }
    }
    { scopeless
      const result[307994] "const"(307993 call PCGRandomStreamPrivate_getNext_noLock eltType min max)
      (307997 'end of statement')
    }
    (308000 call _unlock)
    (308003 return result)
  }
  { scopeless type
    eltType
  } function PCGRandomStream[309151](?).getNext[308012](arg _mt[309179]:_MT[238], arg this[309177]:PCGRandomStream[309151](?), arg resultType[308010]:_any[178](?), arg min[308015] :
  resultType, arg max[308019] :
  resultType) : _unknown[51] "method" "primary method"
  {
    (308024 'use' HaltWrappers)
    (308029 call _lock)
    if(308064 call _cond_test(308036 call && boundsChecking(308034 call > min max)))
    {
      { scopeless
        (308062 call(308039 call . HaltWrappers c"boundsCheckHalt")(308059 call +(308056 call +(308050 call +(308047 call + "Cannot generate random numbers within empty range: ["(308045 call _cast string[26] min)) ", ")(308054 call _cast string[26] max)) "]"))
      }
    }
    { scopeless
      const result[308075] "const"(308074 call PCGRandomStreamPrivate_getNext_noLock resultType min max)
      (308078 'end of statement')
    }
    (308081 call _unlock)
    (308084 return result)
  }
  { scopeless type
    resultType
  } function PCGRandomStream[309151](?).skipToNth[308095](arg _mt[309183]:_MT[238], arg this[309181]:PCGRandomStream[309151](?), arg n[308092] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(308132 call _cond_test(308099 call < n 0))
    {
      { scopeless
        (308130 'throw'(308103 'new'(_chpl_manager = _owned[30](?))(308129 call IllegalArgumentError(308126 call + "PCGRandomStream.skipToNth(n) called with negative 'n' value "(308124 call _cast string[26] n)))))
      }
    }
    (308140 call _lock)
    (308145 call PCGRandomStreamPrivate_skipToNth_noLock n)
    (308149 call _unlock)
  } function PCGRandomStream[309151](?).getNth[308159](arg _mt[309187]:_MT[238], arg this[309185]:PCGRandomStream[309151](?), arg n[308156] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(308197 call _cond_test(308164 call < n 0))
    {
      { scopeless
        (308195 'throw'(308168 'new'(_chpl_manager = _owned[30](?))(308194 call IllegalArgumentError(308191 call + "PCGRandomStream.getNth(n) called with negative 'n' value "(308189 call _cast string[26] n)))))
      }
    }
    (308205 call _lock)
    (308210 call PCGRandomStreamPrivate_skipToNth_noLock n)
    { scopeless
      const result[308216] "const"(308215 call PCGRandomStreamPrivate_getNext_noLock eltType)
      (308219 'end of statement')
    }
    (308222 call _unlock)
    (308225 return result)
  }
  { scopeless type
    eltType
  } function PCGRandomStream[309151](?).fillRandom[308239](arg _mt[309191]:_MT[238], arg this[309189]:PCGRandomStream[309151](?), arg arr[308236] :
  (308233 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown x[308266] "index var" "insert auto destroy"
        
        unknown r[308268] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (308258 call iterate(308250 call . arr c"_dom")(308255 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (308262 call = x r)
      }
    }
  } function PCGRandomStream[309151](?).choice[308285](arg _mt[309195]:_MT[238], arg this[309193]:PCGRandomStream[309151](?), arg x[308282] :
  (308280 call chpl__buildArrayRuntimeType unknown dom[308277]), arg size[308290] :
  unknown sizeType[308287] =
  none[57], arg replace[308295] =
  1, arg prob[308301] :
  unknown probType[308298] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      unknown idx[308316](308315 call _choice this dom(size = size)(replace = replace)(prob = prob))
      (308319 'end of statement')
    }
    (308325 return(308324 call x idx))
  } function PCGRandomStream[309151](?).choice[308339](arg _mt[309199]:_MT[238], arg this[309197]:PCGRandomStream[309151](?), arg x[308336] :
  (308335 call range(stridable = ?[260])), arg size[308344] :
  unknown sizeType[308341] =
  none[57], arg replace[308349] =
  1, arg prob[308355] :
  unknown probType[308352] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      unknown dom[308366](308364 call chpl__buildDomainRuntimeType defaultDist 1(stridable = 1))
      (308369 'end of statement')
    }
    if(308423 call _cond_test(308375 call !(308374 call isBoundedRange x)))
    {
      (308400 'throw'(308379 'new'(_chpl_manager = _owned[30](?))(308399 call IllegalArgumentError "input range must be bounded")))
      (308411 call = dom(308409 call chpl__buildDomainExpr(308406 call chpl_build_bounded_range 1 2)))
    }
    {
      (308419 call = dom(308417 call chpl__buildDomainExpr x))
    }
    (308438 return(308437 call _choice this dom(size = size)(replace = replace)(prob = prob)))
  } function PCGRandomStream[309151](?).choice[308448](arg _mt[309203]:_MT[238], arg this[309201]:PCGRandomStream[309151](?), arg x[308445] :
  _domain, arg size[308453] :
  unknown sizeType[308450] =
  none[57], arg replace[308458] =
  1, arg prob[308464] :
  unknown probType[308461] =
  none[57]) : _unknown[51] throws "method" "primary method"
  {
    (308479 return(308478 call _choice this x(size = size)(replace = replace)(prob = prob)))
  } function PCGRandomStream[309151](?).shuffle[308496](arg _mt[309207]:_MT[238], arg this[309205]:PCGRandomStream[309151](?), arg arr[308493] :
  (308491 call chpl__buildArrayRuntimeType unknown D[308486] unknown eltType[308489])) : _unknown[51] "method" "primary method"
  {
    if(308526 call _cond_test(308503 call !=(308499 call . D c"rank") 1))
    {
      { scopeless
        (308524 call compilerError "Shuffle requires 1-D array")
      }
    }
    { scopeless
      const low[308536] "const"(308533 call . D c"alignedLow")
      const stride[308546] "const"(308545 call abs(308541 call . D c"stride"))
      (308549 'end of statement')
    }
    (308552 call _lock)
    {
      unknown _indexOfInterest[308631] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308632] "expr temp" "temp"
      (308641 'move' _iterator[308632](308639 call _getIterator(308567 call chpl_by(308562 call #(308556 call chpl_build_low_bounded_range 0)(308559 call . D c"size"))(308565 call - 1))))
      Defer
      {
        {
          (308669 call _freeIterator _iterator[308632])
        }
      }
      { scopeless type
        (308658 'move' _indexOfInterest[308631](308655 call iteratorIndex _iterator[308632]))
      }
      ForLoop[308633]
      {
        unknown i[308662] "index var" "insert auto destroy"
        (308664 'move' i[308662] _indexOfInterest[308631])
        {
          { scopeless
            unknown k[308581](308580 call randlc_bounded(308571 call . D c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count 0 i)
            (308584 'end of statement')
          }
          { scopeless
            unknown j[308587] i
            (308590 'end of statement')
          }
          if(308606 call _cond_test(308593 call > stride 1))
          {
            (308597 call *= k stride)
            (308603 call *= j stride)
          }
          (308612 call += k low)
          (308617 call += j low)
          (308628 call <=>(308623 call arr k)(308627 call arr j))
        }
        label _continueLabel[308636]
        _indexOfInterest[308631]
        _iterator[308632]
      }
      label _breakLabel[308637]
    }
    (308681 call += PCGRandomStreamPrivate_count(308678 call . D c"size"))
    (308686 call _unlock)
  } function PCGRandomStream[309151](?).permutation[308699](arg _mt[309211]:_MT[238], arg this[309209]:PCGRandomStream[309151](?), arg arr[308696] :
  (308693 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown low[308714](308711 call .(308710 call(308705 call .(308702 call . arr c"_dom") c"dim") 0) c"low")
      (308717 'end of statement')
    }
    { scopeless
      unknown high[308732](308729 call .(308728 call(308723 call .(308720 call . arr c"_dom") c"dim") 0) c"high")
      (308735 'end of statement')
    }
    if(308767 call _cond_test(308744 call !=(308740 call .(308737 call . arr c"_dom") c"rank") 1))
    {
      { scopeless
        (308765 call compilerError "Permutation requires 1-D array")
      }
    }
    (308774 call _lock)
    {
      unknown _indexOfInterest[308820] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[308821] "expr temp" "temp"
      (308830 'move' _iterator[308821](308828 call _getIterator(308835 call chpl_direct_range_iter low high 1)))
      Defer
      {
        {
          (308851 call _freeIterator _iterator[308821])
        }
      }
      { scopeless type
        (308840 'move' _indexOfInterest[308820](308837 call iteratorIndex _iterator[308821]))
      }
      ForLoop[308822]
      {
        unknown i[308844] "index var" "insert auto destroy"
        (308846 'move' i[308844] _indexOfInterest[308820])
        {
          { scopeless
            unknown j[308796](308795 call randlc_bounded(308786 call .(308783 call . arr c"_dom") c"idxType") PCGRandomStreamPrivate_rngs seed PCGRandomStreamPrivate_count low i)
            (308799 'end of statement')
          }
          (308809 call =(308804 call arr i)(308808 call arr j))
          (308817 call =(308815 call arr j) i)
        }
        label _continueLabel[308825]
        _indexOfInterest[308820]
        _iterator[308821]
      }
      label _breakLabel[308826]
    }
    (308863 call += PCGRandomStreamPrivate_count(308861 call - high low))
    (308868 call _unlock)
  } function PCGRandomStream[309151](?).fillRandom[308880](arg _mt[309215]:_MT[238], arg this[309213]:PCGRandomStream[309151](?), arg arr[308877] :
  (308874 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc"
  {
    (308926 call compilerError "PCGRandomStream(eltType="(308903 call _cast string[26] eltType) ") can only be used to fill arrays of "(308924 call _cast string[26] eltType))
  } function PCGRandomStream[309151](?).iterate[308937](arg _mt[309219]:_MT[238], arg this[309217]:PCGRandomStream[309151](?), arg D[308934] :
  _domain, arg resultType[308940]:_any[178](?) =
  eltType) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (308945 call _lock)
    { scopeless
      const start[308949] "const" PCGRandomStreamPrivate_count
      (308952 'end of statement')
    }
    (308967 call += PCGRandomStreamPrivate_count(308966 call(308958 call .(308955 call . D c"size") c"safeCast")(308964 call int[13] 64)))
    (308976 call PCGRandomStreamPrivate_skipToNth_noLock(308973 call - PCGRandomStreamPrivate_count 1))
    (308980 call _unlock)
    (308989 return(308988 call PCGRandomPrivate_iterate resultType D seed start))
  } function PCGRandomStream[309151](?).iterate[308999](arg _mt[309223]:_MT[238], arg this[309221]:PCGRandomStream[309151](?), arg D[308996] :
  _domain, arg resultType[309002]:_any[178](?) =
  eltType, param arg tag[309005]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    { scopeless
      const start[309015] "const" PCGRandomStreamPrivate_count
      (309018 'end of statement')
    }
    (309028 return(309027 call PCGRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (309012 call == tag(309009 call . iterKind c"leader"))
  } function PCGRandomStream[309151](?).writeThis[309037](arg _mt[309227]:_MT[238], arg this[309225]:PCGRandomStream[309151](?), arg f[309035]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides"
  {
    (309041 call <~> f "PCGRandomStream(eltType=")
    (309050 call <~> f(309048 call _cast string[26] eltType))
    (309055 call <~> f ", parSafe=")
    (309060 call <~> f parSafe)
    (309065 call <~> f ", seed=")
    (309070 call <~> f seed)
    (309075 call <~> f ")")
  } unknown _l[309086] "no doc"(309083 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) function PCGRandomStream[309151](?)._lock[309092](arg _mt[309231]:_MT[238], arg this[309229]:PCGRandomStream[309151](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(309102 call _cond_test parSafe)
    {
      { scopeless
        (309100 call(309096 call . _l c"lock"))
      }
    }
  } function PCGRandomStream[309151](?)._unlock[309112](arg _mt[309235]:_MT[238], arg this[309233]:PCGRandomStream[309151](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(309122 call _cond_test parSafe)
    {
      { scopeless
        (309120 call(309116 call . _l c"unlock"))
      }
    }
  } unknown PCGRandomStreamPrivate_rngs[309137] "no doc"(309135 call *(309133 call numGenerators eltType) pcg_setseq_64_xsh_rr_32_rng) unknown PCGRandomStreamPrivate_count[309146] "no doc" 1(309144 call int[13] 64)
  function randToReal64[309247](arg x[309244] :
  (309243 call uint[115] 64)) : _unknown[51] "inline" "private"
  {
    (309266 return(309265 call ldexp(309259 call _cast(309258 call real[16] 64) x)(309263 call - 64)))
  }
  { scopeless type
    (309252 call real[16] 64)
  }
  function randToReal64[309281](arg x[309278] :
  (309277 call uint[115] 64), arg min[309287] :
  (309286 call real[16] 64), arg max[309294] :
  (309293 call real[16] 64)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown normalized[309305](309304 call randToReal64 x)
      (309308 'end of statement')
    }
    (309320 return(309318 call +(309315 call *(309312 call - max min) normalized) min))
  }
  { scopeless type
    (309300 call real[16] 64)
  }
  function randToReal32[309334](arg x[309331] :
  (309330 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    (309349 return(309348 call ldexp(309342 call _cast(309341 call real[16] 32) x)(309346 call - 32)))
  }
  function randToReal32[309363](arg x[309360] :
  (309359 call uint[115] 32), arg min[309369] :
  (309368 call real[16] 32), arg max[309376] :
  (309375 call real[16] 32)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown normalized[309387](309386 call randToReal32 x)
      (309390 'end of statement')
    }
    (309402 return(309400 call +(309397 call *(309394 call - max min) normalized) min))
  }
  { scopeless type
    (309382 call real[16] 32)
  }
  function rand32_1[309411](ref arg states[309409]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309432 return(309431 call(309423 call .(309420 call states 0) c"random")(309429 call pcg_getvalid_inc 1)))
  }
  { scopeless type
    (309416 call uint[115] 32)
  }
  function rand32_2[309442](ref arg states[309440]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (309461 return(309460 call(309452 call .(309451 call states 1) c"random")(309458 call pcg_getvalid_inc 2)))
  }
  { scopeless type
    (309447 call uint[115] 32)
  }
  function boundedrand32_1[309471](ref arg states[309469]:_any[178](?), arg seed[309477] :
  (309476 call int[13] 64), arg count[309484] :
  (309483 call int[13] 64), arg bound[309491] :
  (309490 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309554 call _cond_test(309506 call == bound(309505 call max(309503 call uint[115] 32))))
    {
      { scopeless
        (309512 return(309511 call rand32_1 states))
      }
    }
    {
      { scopeless
        (309552 return(309551 call(309520 call .(309517 call states 0) c"bounded_random_vary_inc")(309526 call pcg_getvalid_inc 1)(309530 call + bound 1)(309537 call _cast(309536 call uint[115] 64) seed)(309547 call _cast(309546 call uint[115] 64)(309541 call - count 1)) 101 4))
      }
    }
  }
  { scopeless type
    (309497 call uint[115] 32)
  }
  function boundedrand32_2[309568](ref arg states[309566]:_any[178](?), arg seed[309574] :
  (309573 call int[13] 64), arg count[309581] :
  (309580 call int[13] 64), arg bound[309588] :
  (309587 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309651 call _cond_test(309603 call == bound(309602 call max(309600 call uint[115] 32))))
    {
      { scopeless
        (309609 return(309608 call rand32_2 states))
      }
    }
    {
      { scopeless
        (309649 return(309648 call(309615 call .(309614 call states 1) c"bounded_random_vary_inc")(309621 call pcg_getvalid_inc 2)(309625 call + bound 1)(309632 call _cast(309631 call uint[115] 64) seed)(309642 call _cast(309641 call uint[115] 64)(309636 call - count 1)) 102 4))
      }
    }
  }
  { scopeless type
    (309594 call uint[115] 32)
  }
  function rand64_1[309665](ref arg states[309663]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown ret[309676] 0(309674 call uint[115] 64)
      (309679 'end of statement')
    }
    (309695 call |= ret(309694 call(309686 call .(309685 call states 0) c"random")(309692 call pcg_getvalid_inc 1)))
    (309700 call <<= ret 32)
    (309717 call |= ret(309716 call(309708 call .(309707 call states 1) c"random")(309714 call pcg_getvalid_inc 2)))
    (309721 return ret)
  }
  { scopeless type
    (309670 call uint[115] 64)
  }
  function rand64_2[309730](ref arg states[309728]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    { scopeless
      unknown ret[309741] 0(309739 call uint[115] 64)
      (309744 'end of statement')
    }
    (309760 call |= ret(309759 call(309751 call .(309750 call states 2) c"random")(309757 call pcg_getvalid_inc 3)))
    (309765 call <<= ret 32)
    (309782 call |= ret(309781 call(309773 call .(309772 call states 3) c"random")(309779 call pcg_getvalid_inc 4)))
    (309786 return ret)
  }
  { scopeless type
    (309735 call uint[115] 64)
  }
  function boundedrand64_1[309795](ref arg states[309793]:_any[178](?), arg seed[309801] :
  (309800 call int[13] 64), arg count[309808] :
  (309807 call int[13] 64), arg bound[309812] :
  uint[115]) : _unknown[51] "private"
  {
    if(309922 call _cond_test(309827 call > bound(309825 call _cast uint[115](309823 call max(309821 call uint[115] 32)))))
    {
      { scopeless
        unknown toprand[309833](309831 call _cast uint[115] 0)
        (309836 'end of statement')
      }
      { scopeless
        unknown botrand[309842](309840 call _cast uint[115] 0)
        (309845 'end of statement')
      }
      (309863 call = toprand(309862 call boundedrand32_1 states seed count(309860 call _cast(309859 call uint[115] 32)(309854 call >> bound 32))))
      (309889 call = botrand(309888 call boundedrand32_2 states seed count(309886 call _cast(309885 call uint[115] 32)(309880 call & bound(309879 call max(309877 call uint[115] 32))))))
      (309899 return(309897 call |(309894 call << toprand 32) botrand))
    }
    {
      (309904 call rand32_1 states)
      (309920 return(309919 call boundedrand32_2 states seed count(309917 call _cast(309916 call uint[115] 32) bound)))
    }
  }
  { scopeless type
    uint[115]
  }
  function checkSufficientBitsAndAdvanceOthers[309934](arg resultType[309932]:_any[178](?), ref arg states[309936]:_any[178](?)) : _unknown[51] "private"
  {
    { scopeless
      unknown numGenForResultType[309942] "param"(309941 call numGenerators resultType)
      (309945 'end of statement')
    }
    { scopeless
      unknown numGen[309951] "param"(309948 call . states c"size")
      (309954 'end of statement')
    }
    if(310061 call _cond_test(309957 call > numGenForResultType numGen))
    {
      { scopeless
        (310059 call compilerError(310056 call +(310037 call +(310028 call +(310009 call +(310000 call +(309981 call + "PCGRandomStream cannot produce "(309979 call _cast string[26] resultType)) " (requiring ")(310007 call _cast string[26](310004 call * 32 numGenForResultType))) " bits) from a stream configured for ")(310035 call _cast string[26](310032 call * 32 numGen))) " bits of output"))
      }
    }
    {
      unknown _indexOfInterest[310095] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[310096] "expr temp" "temp"
      (310105 'move' _iterator[310096](310103 call _getIterator(310113 call chpl_direct_range_iter(310109 call + numGenForResultType 1) numGen 1)))
      Defer
      {
        {
          (310129 call _freeIterator _iterator[310096])
        }
      }
      { scopeless type
        (310118 'move' _indexOfInterest[310095](310115 call iteratorIndex _iterator[310096]))
      }
      ForLoop[310097]
      {
        unknown i[310122] "index var" "insert auto destroy"
        (310124 'move' i[310122] _indexOfInterest[310095])
        {
          (310092 call(310081 call .(310080 call states(310077 call - i 1)) c"random")(310090 call pcg_getvalid_inc(310087 call _cast uint[115] i)))
        }
        label _continueLabel[310100]
        _indexOfInterest[310095]
        _iterator[310096]
      }
      label _breakLabel[310101]
    }
  }
  function randlc[310142](arg resultType[310140]:_any[178](?), ref arg states[310144]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310150 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(310469 call _cond_test(310158 call == resultType(310157 call complex[140] 128)))
    {
      (310183 return(310181 call _cast(310180 call complex[140] 128)(310175 call _build_tuple(310166 call randToReal64(310164 call rand64_1 states))(310173 call randToReal64(310171 call rand64_2 states)))))
    }
    {
      { scopeless
        if(310464 call _cond_test(310191 call == resultType(310190 call complex[140] 64)))
        {
          (310216 return(310214 call _cast(310213 call complex[140] 64)(310208 call _build_tuple(310199 call randToReal32(310197 call rand32_1 states))(310206 call randToReal32(310204 call rand32_2 states)))))
        }
        {
          { scopeless
            if(310459 call _cond_test(310224 call == resultType(310223 call imag[130] 64)))
            {
              (310236 return(310235 call _r2i(310233 call randToReal64(310231 call rand64_1 states))))
            }
            {
              { scopeless
                if(310454 call _cond_test(310244 call == resultType(310243 call imag[130] 32)))
                {
                  (310256 return(310255 call _r2i(310253 call randToReal32(310251 call rand32_1 states))))
                }
                {
                  { scopeless
                    if(310449 call _cond_test(310264 call == resultType(310263 call real[16] 64)))
                    {
                      (310273 return(310272 call randToReal64(310270 call rand64_1 states)))
                    }
                    {
                      { scopeless
                        if(310444 call _cond_test(310281 call == resultType(310280 call real[16] 32)))
                        {
                          (310290 return(310289 call randToReal32(310287 call rand32_1 states)))
                        }
                        {
                          { scopeless
                            if(310439 call _cond_test(310307 call ||(310298 call == resultType(310297 call uint[115] 64))(310305 call == resultType(310304 call int[13] 64))))
                            {
                              (310316 return(310314 call _cast resultType(310312 call rand64_1 states)))
                            }
                            {
                              { scopeless
                                if(310434 call _cond_test(310333 call ||(310324 call == resultType(310323 call uint[115] 32))(310331 call == resultType(310330 call int[13] 32))))
                                {
                                  (310342 return(310340 call _cast resultType(310338 call rand32_1 states)))
                                }
                                {
                                  { scopeless
                                    if(310429 call _cond_test(310359 call ||(310350 call == resultType(310349 call uint[115] 16))(310357 call == resultType(310356 call int[13] 16))))
                                    {
                                      (310371 return(310369 call _cast resultType(310366 call >>(310364 call rand32_1 states) 16)))
                                    }
                                    {
                                      { scopeless
                                        if(310424 call _cond_test(310388 call ||(310379 call == resultType(310378 call uint[115] 8))(310386 call == resultType(310385 call int[13] 8))))
                                        {
                                          (310400 return(310398 call _cast resultType(310395 call >>(310393 call rand32_1 states) 24)))
                                        }
                                        {
                                          { scopeless
                                            if(310420 call _cond_test(310406 call isBoolType resultType))
                                            {
                                              (310417 return(310415 call !=(310412 call >>(310410 call rand32_1 states) 31) 0))
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_bounded[310480](arg resultType[310478]:_any[178](?), ref arg states[310482]:_any[178](?), arg seed[310488] :
  (310487 call int[13] 64), arg count[310495] :
  (310494 call int[13] 64), arg min[310498]:_any[178](?), arg max[310500]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    (310506 call checkSufficientBitsAndAdvanceOthers resultType states)
    if(310967 call _cond_test(310514 call == resultType(310513 call complex[140] 128)))
    {
      (310555 return(310553 call _cast(310552 call complex[140] 128)(310547 call _build_tuple(310530 call randToReal64(310520 call rand64_1 states)(310523 call . min c"re")(310527 call . max c"re"))(310545 call randToReal64(310535 call rand64_2 states)(310538 call . min c"im")(310542 call . max c"im")))))
    }
    {
      { scopeless
        if(310962 call _cond_test(310563 call == resultType(310562 call complex[140] 64)))
        {
          (310604 return(310602 call _cast(310601 call complex[140] 64)(310596 call _build_tuple(310579 call randToReal32(310569 call rand32_1 states)(310572 call . min c"re")(310576 call . max c"re"))(310594 call randToReal32(310584 call rand32_2 states)(310587 call . min c"im")(310591 call . max c"im")))))
        }
        {
          { scopeless
            if(310957 call _cond_test(310612 call == resultType(310611 call imag[130] 64)))
            {
              (310632 return(310631 call _r2i(310629 call randToReal64(310619 call rand64_1 states)(310624 call _i2r min)(310628 call _i2r max))))
            }
            {
              { scopeless
                if(310952 call _cond_test(310640 call == resultType(310639 call imag[130] 32)))
                {
                  (310660 return(310659 call _r2i(310657 call randToReal32(310647 call rand32_1 states)(310652 call _i2r min)(310656 call _i2r max))))
                }
                {
                  { scopeless
                    if(310947 call _cond_test(310668 call == resultType(310667 call real[16] 64)))
                    {
                      (310679 return(310678 call randToReal64(310674 call rand64_1 states) min max))
                    }
                    {
                      { scopeless
                        if(310942 call _cond_test(310687 call == resultType(310686 call real[16] 32)))
                        {
                          (310698 return(310697 call randToReal32(310693 call rand32_1 states) min max))
                        }
                        {
                          { scopeless
                            if(310937 call _cond_test(310715 call ||(310706 call == resultType(310705 call uint[115] 64))(310713 call == resultType(310712 call int[13] 64))))
                            {
                              (310745 return(310743 call _cast resultType(310740 call +(310732 call boundedrand64_1 states seed count(310730 call _cast(310729 call uint[115] 64)(310724 call - max min)))(310738 call _cast(310737 call uint[115] 64) min))))
                            }
                            {
                              { scopeless
                                if(310932 call _cond_test(310762 call ||(310753 call == resultType(310752 call uint[115] 32))(310760 call == resultType(310759 call int[13] 32))))
                                {
                                  (310792 return(310790 call _cast resultType(310787 call +(310779 call boundedrand32_1 states seed count(310777 call _cast(310776 call uint[115] 32)(310771 call - max min)))(310785 call _cast(310784 call uint[115] 32) min))))
                                }
                                {
                                  { scopeless
                                    if(310927 call _cond_test(310809 call ||(310800 call == resultType(310799 call uint[115] 16))(310807 call == resultType(310806 call int[13] 16))))
                                    {
                                      (310839 return(310837 call _cast resultType(310834 call +(310826 call boundedrand32_1 states seed count(310824 call _cast(310823 call uint[115] 32)(310818 call - max min)))(310832 call _cast(310831 call uint[115] 32) min))))
                                    }
                                    {
                                      { scopeless
                                        if(310922 call _cond_test(310856 call ||(310847 call == resultType(310846 call uint[115] 8))(310854 call == resultType(310853 call int[13] 8))))
                                        {
                                          (310886 return(310884 call _cast resultType(310881 call +(310873 call boundedrand32_1 states seed count(310871 call _cast(310870 call uint[115] 32)(310865 call - max min)))(310879 call _cast(310878 call uint[115] 32) min))))
                                        }
                                        {
                                          { scopeless
                                            if(310918 call _cond_test(310892 call isBoolType resultType))
                                            {
                                              (310912 call compilerError "bounded rand with boolean type")
                                              (310916 return 0)
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function randlc_skipto[310978](arg resultType[310976]:_any[178](?), arg seed[310984] :
  (310983 call int[13] 64), arg n[310988] :
  integral) : _unknown[51] "private"
  {
    { scopeless
      unknown states[310998](310996 call *(310994 call numGenerators resultType) pcg_setseq_64_xsh_rr_32_rng)
      (311001 'end of statement')
    }
    {
      unknown i[311064] 0
      unknown tmp[311065] "maybe param" "temp"
      (311077 'move' tmp[311065](311075 call chpl_compute_low_param_loop_bound 0(311009 call -(311005 call . states c"size") 1)))
      unknown tmp[311066] "maybe param" "temp"
      (311090 'move' tmp[311066](311088 call chpl_compute_high_param_loop_bound 0(311082 call -(311084 call . states c"size") 1)))
      unknown tmp[311067] "maybe param" "temp"
      (311093 'move' tmp[311067] 1)
      ParamForLoop[311095]
      { i[311064] tmp[311065] tmp[311066] tmp[311067]
        {
          { scopeless
            unknown inc[311020] "param"(311019 call pcg_getvalid_inc(311016 call + i 1))
            (311023 'end of statement')
          }
          (311041 call(311029 call .(311028 call states i) c"srandom")(311037 call _cast(311036 call uint[115] 64) seed) inc)
          (311062 call(311047 call .(311046 call states i) c"advance") inc(311060 call _cast(311059 call uint[115] 64)(311054 call - n 1)))
        }
      }
      label _unused_continueLabel[311069]
      label _breakLabel[311068]
    }
    (311105 return states)
  }
  function outer[311113](arg ranges[311111]:_any[178](?), param arg dim[311117] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private"
  {
    if(311285 call _cond_test(311129 call ==(311123 call + dim 2)(311126 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[311141] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[311142] "expr temp" "temp"
        (311151 'move' _iterator[311142](311149 call _getIterator(311135 call ranges dim)))
        Defer
        {
          {
            (311168 call _freeIterator _iterator[311142])
          }
        }
        { scopeless type
          (311157 'move' _indexOfInterest[311141](311154 call iteratorIndex _iterator[311142]))
        }
        ForLoop[311143]
        {
          unknown i[311161] "index var" "insert auto destroy"
          (311163 'move' i[311161] _indexOfInterest[311141])
          { scopeless
            (311139 yield(311137 call _build_tuple i))
          }
          label _continueLabel[311146]
          _indexOfInterest[311141]
          _iterator[311142]
        }
        label _breakLabel[311147]
      }
    }
    {
      { scopeless
        if(311281 call _cond_test(311184 call <(311178 call + dim 2)(311181 call . ranges c"size")))
        {
          {
            unknown _indexOfInterest[311242] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[311243] "expr temp" "temp"
            (311252 'move' _iterator[311243](311250 call _getIterator(311190 call ranges dim)))
            Defer
            {
              {
                (311269 call _freeIterator _iterator[311243])
              }
            }
            { scopeless type
              (311258 'move' _indexOfInterest[311242](311255 call iteratorIndex _iterator[311243]))
            }
            ForLoop[311244]
            {
              unknown i[311262] "index var" "insert auto destroy"
              (311264 'move' i[311262] _indexOfInterest[311242])
              {
                unknown _indexOfInterest[311208] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[311209] "expr temp" "temp"
                (311218 'move' _iterator[311209](311216 call _getIterator(311199 call outer ranges(311197 call + dim 1))))
                Defer
                {
                  {
                    (311235 call _freeIterator _iterator[311209])
                  }
                }
                { scopeless type
                  (311224 'move' _indexOfInterest[311208](311221 call iteratorIndex _iterator[311209]))
                }
                ForLoop[311210]
                {
                  unknown j[311228] "index var" "insert auto destroy"
                  (311230 'move' j[311228] _indexOfInterest[311208])
                  { scopeless
                    (311206 yield(311204 call _build_tuple i(311202 'expand_tuple' j)))
                  }
                  label _continueLabel[311213]
                  _indexOfInterest[311208]
                  _iterator[311209]
                }
                label _breakLabel[311214]
              }
              label _continueLabel[311247]
              _indexOfInterest[311242]
              _iterator[311243]
            }
            label _breakLabel[311248]
          }
        }
        {
          (311278 yield 0)
        }
      }
    }
  }
  function PCGRandomPrivate_iterate[311297](arg resultType[311295]:_any[178](?), arg D[311300] :
  _domain, arg seed[311307] :
  (311306 call int[13] 64), arg start[311314] :
  (311313 call int[13] 64)) : _unknown[51] "iterator fn" "no doc"
  {
    { scopeless
      unknown cursor[311323](311322 call randlc_skipto resultType seed start)
      (311326 'end of statement')
    }
    {
      unknown _indexOfInterest[311337] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311338] "expr temp" "temp"
      (311347 'move' _iterator[311338](311345 call _getIterator D))
      Defer
      {
        {
          (311363 call _freeIterator _iterator[311338])
        }
      }
      { scopeless type
        (311352 'move' _indexOfInterest[311337](311349 call iteratorIndex _iterator[311338]))
      }
      ForLoop[311339]
      {
        unknown i[311356] "index var" "insert auto destroy"
        (311358 'move' i[311356] _indexOfInterest[311337])
        { scopeless
          (311335 yield(311334 call randlc resultType cursor))
        }
        label _continueLabel[311342]
        _indexOfInterest[311337]
        _iterator[311338]
      }
      label _breakLabel[311343]
    }
  }
  function PCGRandomPrivate_iterate[311376](arg resultType[311374]:_any[178](?), arg D[311379] :
  _domain, arg seed[311386] :
  (311385 call int[13] 64), arg start[311393] :
  (311392 call int[13] 64), param arg tag[311397] :
  iterKind) : _unknown[51] "iterator fn" "no doc"
  {
    {
      unknown _indexOfInterest[311422] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311423] "expr temp" "temp"
      (311432 'move' _iterator[311423](311430 call _getIterator(311418 call(311409 call . D c"these")(tag =(311413 call . iterKind c"leader")))))
      Defer
      {
        {
          (311449 call _freeIterator _iterator[311423])
        }
      }
      { scopeless type
        (311438 'move' _indexOfInterest[311422](311435 call iteratorIndex _iterator[311423]))
      }
      ForLoop[311424]
      {
        unknown block[311442] "index var" "insert auto destroy"
        (311444 'move' block[311442] _indexOfInterest[311422])
        { scopeless
          (311420 yield block)
        }
        label _continueLabel[311427]
        _indexOfInterest[311422]
        _iterator[311423]
      }
      label _breakLabel[311428]
    }
  }
  where {
    (311405 call == tag(311402 call . iterKind c"leader"))
  }
  function PCGRandomPrivate_iterate[311464](arg resultType[311462]:_any[178](?), arg D[311467] :
  _domain, arg seed[311474] :
  (311473 call int[13] 64), arg start[311481] :
  (311480 call int[13] 64), param arg tag[311485] :
  iterKind, arg followThis[311488]:_any[178](?)) : _unknown[51] "iterator fn" "no doc"
  {
    (311498 'use' DSIUtil)
    { scopeless
      unknown multiplier[311502] "param" 1
      (311505 'end of statement')
    }
    { scopeless
      const ZD[311510] "const"(311509 call computeZeroBasedDomain D)
      (311513 'end of statement')
    }
    { scopeless
      const innerRange[311524] "const"(311523 call followThis(311520 call -(311516 call . ZD c"rank") 1))
      (311527 'end of statement')
    }
    {
      unknown _indexOfInterest[311758] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[311759] "expr temp" "temp"
      (311768 'move' _iterator[311759](311766 call _getIterator(311532 call outer followThis)))
      Defer
      {
        {
          (311785 call _freeIterator _iterator[311759])
        }
      }
      { scopeless type
        (311774 'move' _indexOfInterest[311758](311771 call iteratorIndex _iterator[311759]))
      }
      ForLoop[311760]
      {
        unknown outer[311778] "index var" "insert auto destroy"
        (311780 'move' outer[311778] _indexOfInterest[311758])
        {
          { scopeless
            unknown myStart[311534] start
            (311537 'end of statement')
          }
          if(311603 call _cond_test(311544 call >(311540 call . ZD c"rank") 1))
          {
            { scopeless
              (311574 call += myStart(311572 call * multiplier(311571 call(311563 call .(311562 call(311549 call . ZD c"indexOrder")(311559 call _build_tuple(311553 'expand_tuple' outer)(311555 call . innerRange c"low"))) c"safeCast")(311569 call int[13] 64))))
            }
          }
          {
            { scopeless
              (311600 call += myStart(311598 call * multiplier(311597 call(311589 call .(311588 call(311580 call . ZD c"indexOrder")(311584 call . innerRange c"low")) c"safeCast")(311595 call int[13] 64))))
            }
          }
          if(311754 call _cond_test(311613 call !(311610 call . innerRange c"stridable")))
          {
            { scopeless
              unknown cursor[311621](311620 call randlc_skipto resultType seed myStart)
              (311624 'end of statement')
            }
            {
              unknown _indexOfInterest[311635] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311636] "expr temp" "temp"
              (311645 'move' _iterator[311636](311643 call _getIterator innerRange))
              Defer
              {
                {
                  (311661 call _freeIterator _iterator[311636])
                }
              }
              { scopeless type
                (311650 'move' _indexOfInterest[311635](311647 call iteratorIndex _iterator[311636]))
              }
              ForLoop[311637]
              {
                unknown i[311654] "index var" "insert auto destroy"
                (311656 'move' i[311654] _indexOfInterest[311635])
                { scopeless
                  (311633 yield(311632 call randlc resultType cursor))
                }
                label _continueLabel[311640]
                _indexOfInterest[311635]
                _iterator[311636]
              }
              label _breakLabel[311641]
            }
          }
          {
            (311682 call -= myStart(311681 call(311673 call .(311670 call . innerRange c"low") c"safeCast")(311679 call int[13] 64)))
            {
              unknown _indexOfInterest[311721] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[311722] "expr temp" "temp"
              (311731 'move' _iterator[311722](311729 call _getIterator innerRange))
              Defer
              {
                {
                  (311747 call _freeIterator _iterator[311722])
                }
              }
              { scopeless type
                (311736 'move' _indexOfInterest[311721](311733 call iteratorIndex _iterator[311722]))
              }
              ForLoop[311723]
              {
                unknown i[311740] "index var" "insert auto destroy"
                (311742 'move' i[311740] _indexOfInterest[311721])
                {
                  { scopeless
                    unknown cursor[311709](311708 call randlc_skipto resultType seed(311706 call + myStart(311704 call *(311702 call(311694 call . i c"safeCast")(311700 call int[13] 64)) multiplier)))
                    (311712 'end of statement')
                  }
                  (311719 yield(311718 call randlc resultType cursor))
                }
                label _continueLabel[311726]
                _indexOfInterest[311721]
                _iterator[311722]
              }
              label _breakLabel[311727]
            }
          }
        }
        label _continueLabel[311763]
        _indexOfInterest[311758]
        _iterator[311759]
      }
      label _breakLabel[311764]
    }
  }
  where {
    (311495 call == tag(311492 call . iterKind c"follower"))
  }
}