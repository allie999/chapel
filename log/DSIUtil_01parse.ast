AST dump for DSIUtil after pass parse.
Module use list: 

{
  (353117 'use' ChapelStandard)
  function getDataParTasksPerLocale[226044]() : _unknown[51] "inline"
  {
    (226047 return dataParTasksPerLocale)
  }
  function getDataParIgnoreRunningTasks[226054]() : _unknown[51] "inline"
  {
    (226057 return dataParIgnoreRunningTasks)
  }
  function getDataParMinGranularity[226064]() : _unknown[51] "inline"
  {
    (226067 return dataParMinGranularity)
  }
  function createTuple[226076](param arg rank[226074]:_any[178](?), arg t[226078]:_any[178](?), arg val[226080]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[226086](226084 call * rank t)
      (226089 'end of statement')
    }
    {
      unknown i[226106] 0
      unknown tmp[226107] "maybe param" "temp"
      (226119 'move' tmp[226107](226117 call chpl_compute_low_param_loop_bound 0(226094 call - rank 1)))
      unknown tmp[226108] "maybe param" "temp"
      (226129 'move' tmp[226108](226127 call chpl_compute_high_param_loop_bound 0(226124 call - rank 1)))
      unknown tmp[226109] "maybe param" "temp"
      (226132 'move' tmp[226109] 1)
      ParamForLoop[226134]
      { i[226106] tmp[226107] tmp[226108] tmp[226109]
        { scopeless
          (226103 call =(226101 call tup i) val)
        }
      }
      label _unused_continueLabel[226111]
      label _breakLabel[226110]
    }
    (226144 return tup)
  }
  function _computeChunkStuff[226152](arg maxTasks[226150]:_any[178](?), arg ignoreRunning[226154]:_any[178](?), arg minSize[226156]:_any[178](?), arg ranges[226158]:_any[178](?), param arg adjustToOneDim[226161] =
  1) : _unknown[51]
  {
    { scopeless
      unknown rank[226173] "param"(226170 call . ranges c"size")
      (226176 'end of statement')
    }
    unknown EC[226179] "type variable" uint[115]
    { scopeless
      unknown numElems[226186](226184 call _cast EC 1)
      (226189 'end of statement')
    }
    {
      unknown i[226212] 0
      unknown tmp[226213] "maybe param" "temp"
      (226225 'move' tmp[226213](226223 call chpl_compute_low_param_loop_bound 0(226193 call - rank 1)))
      unknown tmp[226214] "maybe param" "temp"
      (226235 'move' tmp[226214](226233 call chpl_compute_high_param_loop_bound 0(226230 call - rank 1)))
      unknown tmp[226215] "maybe param" "temp"
      (226238 'move' tmp[226215] 1)
      ParamForLoop[226240]
      { i[226212] tmp[226213] tmp[226214] tmp[226215]
        {
          (226208 call *= numElems(226206 call _cast EC(226202 call .(226201 call ranges i) c"size")))
        }
      }
      label _unused_continueLabel[226217]
      label _breakLabel[226216]
    }
    { scopeless
      unknown numChunks[226256](226255 call _computeNumChunks maxTasks ignoreRunning minSize numElems)
      (226259 'end of statement')
    }
    if(226273 call _cond_test(226262 call == numChunks 0))
    {
      { scopeless
        (226271 return(226269 call _build_tuple 0(226266 call - 1)))
      }
    }
    (226284 call assert(226281 call > numChunks 0))
    { scopeless
      unknown parDim[226289](226287 call - 1)
      (226292 'end of statement')
    }
    { scopeless
      unknown maxDim[226296](226294 call - 1)
      (226299 'end of statement')
    }
    { scopeless
      unknown maxElems[226304](226303 call min EC)
      (226307 'end of statement')
    }
    {
      unknown _indexOfInterest[226370] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[226371] "expr temp" "temp"
      (226380 'move' _iterator[226371](226378 call _getIterator(226388 call chpl_direct_range_iter 0(226385 call - rank 1) 1)))
      Defer
      {
        {
          (226404 call _freeIterator _iterator[226371])
        }
      }
      { scopeless type
        (226393 'move' _indexOfInterest[226370](226390 call iteratorIndex _iterator[226371]))
      }
      ForLoop[226372]
      {
        unknown i[226397] "index var" "insert auto destroy"
        (226399 'move' i[226397] _indexOfInterest[226370])
        {
          { scopeless
            const curElems[226326] "const"(226324 call _cast EC(226320 call .(226319 call ranges i) c"size"))
            (226329 'end of statement')
          }
          if(226347 call _cond_test(226336 call >= curElems(226334 call _cast EC numChunks)))
          {
            (226340 call = parDim i)
            break nil[44]
          }
          if(226366 call _cond_test(226353 call > curElems maxElems))
          {
            (226357 call = maxElems curElems)
            (226363 call = maxDim i)
          }
        }
        label _continueLabel[226375]
        _indexOfInterest[226370]
        _iterator[226371]
      }
      label _breakLabel[226376]
    }
    if(226446 call _cond_test(226415 call == parDim(226413 call - 1)))
    {
      (226419 call = parDim maxDim)
      if(226441 call _cond_test(226431 call && adjustToOneDim(226429 call < maxElems(226427 call _cast EC numChunks))))
      {
        { scopeless
          (226438 call = numChunks(226436 call _cast int[13] maxElems))
        }
      }
    }
    (226455 return(226453 call _build_tuple numChunks parDim))
  }
  { scopeless type
    (226167 call _build_tuple int[13] int[13])
  }
  function _computeNumChunks[226464](arg maxTasks[226462]:_any[178](?), arg ignoreRunning[226466]:_any[178](?), arg minSize[226468]:_any[178](?), arg numElems[226470]:_any[178](?)) : _unknown[51]
  {
    if(226480 call _cond_test(226475 call <= numElems 0))
    {
      { scopeless
        (226478 return 0)
      }
    }
    unknown EC[226487] "type variable" uint[115]
    { scopeless
      const unumElems[226494] "const"(226492 call _cast EC numElems)
      (226497 'end of statement')
    }
    { scopeless
      unknown numChunks[226502](226500 call _cast int[13] maxTasks)
      (226505 'end of statement')
    }
    if(226542 call _cond_test(226507 call ! ignoreRunning))
    {
      { scopeless
        const otherTasks[226518] "const"(226516 call -(226514 call(226510 call . here c"runningTasks")) 1)
        (226521 'end of statement')
      }
      (226539 call = numChunks(226536 IfExpr (226526 call < otherTasks maxTasks) then
      { scopeless
        (226533 call _cast int[13](226530 call - maxTasks otherTasks))
      } else
      { scopeless
        1
      } ))
    }
    if(226623 call _cond_test(226548 call > minSize 0))
    {
      unknown tmp[226572] "temp"
      (226620 'move' tmp[226572](226603 call _cond_test(226605 call &&(226607 call < unumElems(226610 call _cast EC(226613 call * minSize numChunks)))(226617 call > numChunks 1))))
      WhileDo[226577]
      {
        {
          (226568 call -= numChunks 1)
        }
        label _continueLabel[226575]
        (226598 'move' tmp[226572](226581 call _cond_test(226583 call &&(226585 call < unumElems(226588 call _cast EC(226591 call * minSize numChunks)))(226595 call > numChunks 1))))
        tmp[226572]
      }
      label _breakLabel[226576]
    }
    if(226642 call _cond_test(226632 call >(226629 call _cast EC numChunks) unumElems))
    {
      { scopeless
        (226639 call = numChunks(226637 call _cast int[13] unumElems))
      }
    }
    (226648 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeNumChunks[226657](arg numElems[226655]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown numTasks[226672](226669 IfExpr (226662 call == dataParTasksPerLocale 0) then
      { scopeless
        (226665 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (226675 'end of statement')
    }
    { scopeless
      unknown ignoreRunning[226678] dataParIgnoreRunningTasks
      (226681 'end of statement')
    }
    { scopeless
      unknown minIndicesPerTask[226683] dataParMinGranularity
      (226686 'end of statement')
    }
    { scopeless
      unknown numChunks[226694](226693 call _computeNumChunks numTasks ignoreRunning minIndicesPerTask numElems)
      (226697 'end of statement')
    }
    (226699 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeChunkStartEnd[226708](arg nElems[226706]:_any[178](?), arg nChunks[226710]:_any[178](?), arg myCnk[226712]:_any[178](?)) : _unknown[51]
  {
    unknown IT[226729] "type variable"(226726 IfExpr (226722 call ==(226720 'typeof' nElems) uint[115]) then
    { scopeless
      uint[115]
    } else
    { scopeless
      int[13]
    } )
    { scopeless
      const tmp[226755] "const" "temp"(226753 call _build_tuple(226742 call _cast IT nElems)(226746 call _cast IT nChunks)(226751 call _cast IT myCnk))
      (226765 call _check_tuple_var_decl tmp[226755] 3)
      const numElems[226733] "const"(226756 call tmp[226755] 0)
      const numChunks[226735] "const"(226759 call tmp[226755] 1)
      const myChunk[226737] "const"(226762 call tmp[226755] 2)
      (226770 'end of statement')
    }
    unknown RT[226773] "type variable"(226772 'typeof' nElems)
    { scopeless
      unknown div[226780](226778 call / numElems numChunks)
      (226783 'end of statement')
    }
    { scopeless
      unknown rem[226788](226786 call % numElems numChunks)
      (226791 'end of statement')
    }
    (226804 call assert(226801 call &&(226795 call <= 1 myChunk)(226799 call <= myChunk numChunks)))
    if(226875 call _cond_test(226808 call <= myChunk rem))
    {
      { scopeless
        unknown endIx[226817](226815 call * myChunk(226813 call + div 1))
        (226820 'end of statement')
      }
      (226836 return(226834 call _build_tuple(226827 call _cast RT(226824 call - endIx div))(226831 call _cast RT endIx)))
    }
    {
      { scopeless
        unknown startIx1[226851](226849 call - numElems(226847 call *(226844 call +(226841 call - numChunks myChunk) 1) div))
        (226854 'end of statement')
      }
      (226873 return(226871 call _build_tuple(226861 call _cast RT(226858 call + startIx1 1))(226868 call _cast RT(226865 call + startIx1 div))))
    }
  }
  { scopeless type
    (226717 call * 2(226716 'typeof' nElems))
  }
  function intCeilXDivByY[226886](arg x[226884]:_any[178](?), arg y[226888]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      (226900 return(226898 call + 1(226896 call /(226893 call - x 1) y)))
    }
  }
  function _computeBlock[226909](arg numelems[226907]:_any[178](?), arg numblocks[226911]:_any[178](?), arg blocknum[226913]:_any[178](?), arg wayhi[226915]:_any[178](?), arg waylo[226922] =
  (226920 call _cast(226919 'typeof' wayhi) 0), arg lo[226930] =
  (226928 call _cast(226927 'typeof' wayhi) 0)) : _unknown[51]
  {
    if(226952 call _cond_test(226935 call == numelems 0))
    {
      { scopeless
        (226950 return(226948 call _build_tuple(226940 call _cast(226939 'typeof' lo) 1)(226945 call _cast(226944 'typeof' lo) 0)))
      }
    }
    { scopeless
      const blo[226990] "const"(226987 IfExpr (226960 call == blocknum 0) then
      { scopeless
        waylo
      } else
      { scopeless
        (226985 call + lo(226983 call _cast(226982 'typeof' lo)(226980 call intCeilXDivByY(226973 call *(226967 call _cast uint[115] numelems)(226971 call _cast uint[115] blocknum))(226978 call _cast uint[115] numblocks))))
      } )
      (226993 'end of statement')
    }
    { scopeless
      const bhi[227035] "const"(227032 IfExpr (226999 call == blocknum(226997 call - numblocks 1)) then
      { scopeless
        wayhi
      } else
      { scopeless
        (227030 call -(227027 call + lo(227025 call _cast(227024 'typeof' lo)(227022 call intCeilXDivByY(227015 call *(227006 call _cast uint[115] numelems)(227013 call _cast uint[115](227010 call + blocknum 1)))(227020 call _cast uint[115] numblocks)))) 1)
      } )
      (227038 'end of statement')
    }
    (227044 return(227042 call _build_tuple blo bhi))
  }
  function _factor[227054](param arg rank[227051] :
  int[13], arg value[227056]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown factors[227062](227060 call * rank int[13])
      (227065 'end of statement')
    }
    {
      unknown i[227082] 0
      unknown tmp[227083] "maybe param" "temp"
      (227095 'move' tmp[227083](227093 call chpl_compute_low_param_loop_bound 0(227070 call - rank 1)))
      unknown tmp[227084] "maybe param" "temp"
      (227105 'move' tmp[227084](227103 call chpl_compute_high_param_loop_bound 0(227100 call - rank 1)))
      unknown tmp[227085] "maybe param" "temp"
      (227108 'move' tmp[227085] 1)
      ParamForLoop[227110]
      { i[227082] tmp[227083] tmp[227084] tmp[227085]
        { scopeless
          (227079 call =(227077 call factors i) 1)
        }
      }
      label _unused_continueLabel[227087]
      label _breakLabel[227086]
    }
    if(227316 call _cond_test(227121 call >= value 1))
    {
      { scopeless
        unknown iv[227124] value
        (227127 'end of statement')
      }
      { scopeless
        unknown factor[227130] 1
        (227133 'end of statement')
      }
      {
        unknown tmp[227289] "temp"
        (227313 'move' tmp[227289](227308 call _cond_test(227310 call > iv 1)))
        WhileDo[227294]
        {
          {
            {
              unknown _indexOfInterest[227250] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[227251] "expr temp" "temp"
              (227260 'move' _iterator[227251](227258 call _getIterator(227265 call chpl_direct_range_iter 2 iv 1)))
              Defer
              {
                {
                  (227281 call _freeIterator _iterator[227251])
                }
              }
              { scopeless type
                (227270 'move' _indexOfInterest[227250](227267 call iteratorIndex _iterator[227251]))
              }
              ForLoop[227252]
              {
                unknown i[227274] "index var" "insert auto destroy"
                (227276 'move' i[227274] _indexOfInterest[227250])
                {
                  if(227245 call _cond_test(227148 call ==(227145 call % iv i) 0))
                  {
                    { scopeless
                      unknown j[227151] 0
                      (227154 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[227185] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[227186] "expr temp" "temp"
                      (227195 'move' _iterator[227186](227193 call _getIterator(227203 call chpl_direct_range_iter 1(227200 call - rank 1) 1)))
                      Defer
                      {
                        {
                          (227219 call _freeIterator _iterator[227186])
                        }
                      }
                      { scopeless type
                        (227208 'move' _indexOfInterest[227185](227205 call iteratorIndex _iterator[227186]))
                      }
                      ForLoop[227187]
                      {
                        unknown i[227212] "index var" "insert auto destroy"
                        (227214 'move' i[227212] _indexOfInterest[227185])
                        {
                          if(227179 call _cond_test(227172 call <(227167 call factors i)(227171 call factors j)))
                          {
                            { scopeless
                              (227176 call = j i)
                            }
                          }
                        }
                        label _continueLabel[227190]
                        _indexOfInterest[227185]
                        _iterator[227186]
                      }
                      label _breakLabel[227191]
                    }
                    (227231 call *=(227229 call factors j) i)
                    (227239 call = iv(227237 call / iv i))
                    break nil[44]
                  }
                }
                label _continueLabel[227255]
                _indexOfInterest[227250]
                _iterator[227251]
              }
              label _breakLabel[227256]
            }
          }
          label _continueLabel[227292]
          (227303 'move' tmp[227289](227298 call _cond_test(227300 call > iv 1)))
          tmp[227289]
        }
        label _breakLabel[227293]
      }
    }
    {
      unknown _indexOfInterest[227409] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[227410] "expr temp" "temp"
      (227419 'move' _iterator[227410](227417 call _getIterator(227427 call chpl_direct_range_iter 0(227424 call - rank 1) 1)))
      Defer
      {
        {
          (227443 call _freeIterator _iterator[227410])
        }
      }
      { scopeless type
        (227432 'move' _indexOfInterest[227409](227429 call iteratorIndex _iterator[227410]))
      }
      ForLoop[227411]
      {
        unknown i[227436] "index var" "insert auto destroy"
        (227438 'move' i[227436] _indexOfInterest[227409])
        {
          unknown _indexOfInterest[227365] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[227366] "expr temp" "temp"
          (227375 'move' _iterator[227366](227373 call _getIterator(227386 call chpl_direct_range_iter(227379 call + i 1)(227383 call - rank 1) 1)))
          Defer
          {
            {
              (227402 call _freeIterator _iterator[227366])
            }
          }
          { scopeless type
            (227391 'move' _indexOfInterest[227365](227388 call iteratorIndex _iterator[227366]))
          }
          ForLoop[227367]
          {
            unknown j[227395] "index var" "insert auto destroy"
            (227397 'move' j[227395] _indexOfInterest[227365])
            { scopeless
              if(227360 call _cond_test(227347 call <(227342 call factors i)(227346 call factors j)))
              {
                { scopeless
                  (227357 call <=>(227352 call factors i)(227356 call factors j))
                }
              }
            }
            label _continueLabel[227370]
            _indexOfInterest[227365]
            _iterator[227366]
          }
          label _breakLabel[227371]
        }
        label _continueLabel[227414]
        _indexOfInterest[227409]
        _iterator[227410]
      }
      label _breakLabel[227415]
    }
    (227451 return factors)
  }
  function computeZeroBasedDomain[227461](arg dom[227458] :
  _domain) : _unknown[51]
  {
    { scopeless
      (227476 return(227474 call chpl__buildDomainExpr(227472 'expand_tuple'(227471 call computeZeroBasedRanges(227469 call(227465 call . dom c"dims"))))))
    }
  }
  function computeZeroBasedRanges[227487](arg ranges[227484] :
  _tuple) : _unknown[51]
  {
    function helper[227493](arg idxType[227491]:_any[178](?), arg first[227495]:_any[178](?), arg rest[227498]:_any[178](?) ...) : _unknown[51]
    {
      if(227573 call _cond_test(227506 call >(227502 call . rest c"size") 1))
      {
        { scopeless
          (227533 return(227531 call _build_tuple(227521 call #(227512 call chpl_build_low_bounded_range(227510 call _cast idxType 0))(227519 call _cast idxType(227515 call . first c"size")))(227529 'expand_tuple'(227528 call helper idxType(227527 'expand_tuple' rest)))))
        }
      }
      {
        { scopeless
          (227571 return(227569 call _build_tuple(227548 call #(227539 call chpl_build_low_bounded_range(227537 call _cast idxType 0))(227546 call _cast idxType(227542 call . first c"size")))(227566 call #(227554 call chpl_build_low_bounded_range(227552 call _cast idxType 0))(227564 call _cast idxType(227560 call .(227559 call rest 0) c"size")))))
        }
      }
    }
    unknown idxType[227590] "type variable"(227587 call .(227586 call ranges 0) c"idxType")
    if(227630 call _cond_test(227598 call >(227594 call . ranges c"size") 1))
    {
      { scopeless
        (227606 return(227605 call helper idxType(227604 'expand_tuple' ranges)))
      }
    }
    {
      { scopeless
        (227628 return(227626 call _build_tuple(227624 call #(227612 call chpl_build_low_bounded_range(227610 call _cast idxType 0))(227622 call _cast idxType(227618 call .(227617 call ranges 0) c"size")))))
      }
    }
  }
  function densify[227644](arg sub[227641] :
  _domain, arg whole[227647] :
  _domain, arg userErrors[227651] =
  1) : _unknown[51]
  {
    unknown argtypes[227673] "type variable"(227672 'typeof'(227670 call _build_tuple sub whole))
    (227690 call _densiCheck(227686 call ==(227679 call . sub c"rank")(227683 call . whole c"rank")) argtypes)
    (227703 call _densiIdxCheck(227694 call . sub c"idxType")(227699 call . whole c"idxType") argtypes)
    (227725 return(227723 call chpl__buildDomainExpr(227721 'expand_tuple'(227720 call densify(227711 call(227707 call . sub c"dims"))(227718 call(227714 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (227665 call chpl__buildDomainRuntimeType defaultDist(227655 call . whole c"rank")(227660 call . whole c"idxType") 1)
  }
  function densify[227734](arg subs[227732]:_any[178](?), arg wholes[227736]:_any[178](?), arg userErrors[227739] =
  1) : _unknown[51]
  {
    unknown argtypes[227758] "type variable"(227757 'typeof'(227755 call _build_tuple subs wholes))
    (227775 call _densiCheck(227771 call ==(227764 call . wholes c"size")(227768 call . subs c"size")) argtypes)
    (227787 call _densiCheck(227784 call isRange(227782 call subs 0)) argtypes)
    (227799 call _densiCheck(227796 call isRange(227794 call wholes 0)) argtypes)
    (227807 call _densiEnsureBounded(227805 call subs 0))
    (227826 call _densiIdxCheck(227814 call .(227813 call subs 0) c"idxType")(227822 call .(227821 call wholes 0) c"idxType") argtypes)
    { scopeless
      unknown rank[227832] "param"(227829 call . wholes c"size")
      (227835 'end of statement')
    }
    unknown IT[227843] "type variable"(227840 call .(227839 call wholes 0) c"idxType")
    { scopeless
      unknown result[227858](227856 call * rank(227855 call range IT(227851 call . BoundedRangeType c"bounded") 1))
      (227861 'end of statement')
    }
    {
      unknown d[227953] 0
      unknown tmp[227954] "maybe param" "temp"
      (227966 'move' tmp[227954](227964 call chpl_compute_low_param_loop_bound 0(227865 call - rank 1)))
      unknown tmp[227955] "maybe param" "temp"
      (227976 'move' tmp[227955](227974 call chpl_compute_high_param_loop_bound 0(227971 call - rank 1)))
      unknown tmp[227956] "maybe param" "temp"
      (227979 'move' tmp[227956] 1)
      ParamForLoop[227981]
      { d[227953] tmp[227954] tmp[227955] tmp[227956]
        {
          (227879 call _densiCheck(227876 call isRange(227874 call subs d)) argtypes)
          (227892 call _densiCheck(227889 call isRange(227887 call wholes d)) argtypes)
          (227905 call _densiIdxCheck(227899 call .(227898 call wholes d) c"idxType") IT argtypes)
          (227913 call _densiEnsureBounded(227911 call subs d))
          (227932 call _densiIdxCheck(227920 call .(227919 call subs d) c"idxType")(227928 call .(227927 call wholes d) c"idxType") argtypes)
          (227950 call =(227937 call result d)(227949 call densify(227942 call subs d)(227947 call wholes d) userErrors))
        }
      }
      label _unused_continueLabel[227958]
      label _breakLabel[227957]
    }
    (227991 return result)
  }
  where {
    (227750 call &&(227745 call isTuple subs)(227749 call isTuple wholes))
  }
  function densify[228008](arg s[228005] :
  (228004 call range ?[260](boundedType = unknown B[228001])), arg w[228018] :
  (228017 call range unknown IT[228011] ?[260](stridable = 1)), arg userErrors[228022] =
  1) : _unknown[51]
  {
    (228034 call _densiEnsureBounded s)
    (228050 call _densiIdxCheck(228039 call . s c"idxType") IT(228049 'typeof'(228047 call _build_tuple s w)))
    function ensure[228056](arg cond[228054]:_any[178](?), arg args[228059]:_any[178](?) ...) : _unknown[51]
    {
      if(228085 call _cond_test userErrors)
      {
        if(228072 call _cond_test(228064 call ! cond))
        {
          { scopeless
            (228070 call halt(228068 'expand_tuple' args))
          }
        }
      }
      {
        { scopeless
          (228083 call assert cond(228082 'expand_tuple' args))
        }
      }
    }
    if(228409 call _cond_test(228098 call ==(228094 call . s c"size") 0))
    {
      (228110 return(228108 call chpl_build_bounded_range(228102 call _cast IT 1)(228106 call _cast IT 0)))
    }
    {
      (228175 call ensure(228119 call >(228115 call . w c"size") 0) "densify(s=" s ", w=" w "): w is empty while s is not")
      { scopeless
        unknown low[228189](228188 call(228180 call . w c"indexOrder")(228184 call . s c"first")) IT
        (228192 'end of statement')
      }
      (228220 call ensure(228196 call >= low 0) "densify(s=" s ", w=" w "): s.first is not in w")
      if(228405 call _cond_test(228227 call ==(228223 call . s c"size") 1))
      {
        (228233 return(228231 call chpl_build_bounded_range low low))
      }
      {
        { scopeless
          unknown high[228247](228246 call(228238 call . w c"indexOrder")(228242 call . s c"last")) IT
          (228250 'end of statement')
        }
        (228279 call ensure(228255 call >= high 0) "densify(s=" s ", w=" w "): s.last is not in w")
        (228317 call ensure(228293 call ==(228290 call %(228283 call . s c"stride")(228287 call . w c"stride")) 0) "densify(s=" s ", w=" w "): s.stride is not a multiple of w.stride")
        { scopeless
          const stride[228329] "const"(228327 call /(228320 call . s c"stride")(228324 call . w c"stride"))
          (228332 'end of statement')
        }
        if(228342 call _cond_test(228335 call < stride 0))
        {
          { scopeless
            (228339 call <=> low high)
          }
        }
        (228394 call assert(228350 call <= low high) "densify(s=" s ", w=" w "): got low (" low ") larger than high (" high ")")
        (228403 return(228401 call chpl_by(228398 call chpl_build_bounded_range low high) stride))
      }
    }
  }
  { scopeless type
    (228030 call range IT B 1)
  }
  function densify[228431](arg sArg[228428] :
  (228427 call range ?[260](boundedType = unknown B[228421])(stridable = unknown S[228424])), arg w[228441] :
  (228440 call range unknown IT[228434] ?[260](stridable = 0)), arg userErrors[228445] =
  1) : _unknown[51]
  {
    (228457 call _densiEnsureBounded sArg)
    (228473 call _densiIdxCheck(228462 call . sArg c"idxType") IT(228472 'typeof'(228470 call _build_tuple sArg w)))
    { scopeless
      const s[228484] "const"(228482 call _cast(228481 call range IT B S) sArg)
      (228487 'end of statement')
    }
    function ensure[228492](arg cond[228490]:_any[178](?)) : _unknown[51]
    {
      if(228513 call _cond_test userErrors)
      {
        if(228502 call _cond_test(228496 call ! cond))
        {
          { scopeless
            (228500 call halt)
          }
        }
      }
      {
        { scopeless
          (228511 call assert cond)
        }
      }
    }
    (228552 call ensure(228549 call ||(228527 call(228523 call . s c"isEmpty"))(228547 call <=(228529 call . w c"low")(228544 IfExpr (228535 call isIntType IT) then
    { scopeless
      (228537 call . s c"alignedLow")
    } else
    { scopeless
      (228541 call . s c"low")
    } ))))
    (228584 call ensure(228581 call ||(228569 call ||(228560 call(228556 call . s c"isEmpty"))(228567 call !(228566 call(228562 call . w c"hasHighBound"))))(228579 call <=(228572 call . s c"alignedHigh")(228576 call . w c"high"))))
    if(228610 call _cond_test(228596 call &&(228589 call isUintType IT)(228595 call(228591 call . s c"isEmpty"))))
    {
      { scopeless
        (228608 return(228606 call chpl_build_bounded_range(228600 call _cast IT 1)(228604 call _cast IT 0)))
      }
    }
    (228630 return(228628 call _cast(228627 call range IT B S)(228620 call - s(228617 call . w c"low"))))
  }
  { scopeless type
    (228453 call range IT B S)
  }
  function _densiEnsureBounded[228639](arg arg[228637]:_any[178](?)) : _unknown[51]
  {
    if(228669 call _cond_test(228645 call !(228644 call isBoundedRange arg)))
    {
      { scopeless
        (228667 call compilerError "densify() currently requires that sub-ranges be bounded" 2)
      }
    }
  }
  function _densiIdxCheck[228681](arg subIdxType[228679]:_any[178](?), arg wholeIdxType[228683]:_any[178](?), arg argtypes[228685]:_any[178](?)) : _unknown[51]
  {
    (228697 call _densiCheck(228692 call chpl__legalIntCoerce subIdxType wholeIdxType) argtypes(errlevel = 3))
  }
  function _densiCheck[228706](param arg cond[228704]:_any[178](?), arg argtypes[228708]:_any[178](?), param arg errlevel[228711] =
  2) : _unknown[51]
  {
    if(228745 call _cond_test(228715 call ! cond))
    {
      { scopeless
        (228743 call compilerError "densify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges (except stridability and range b(228740 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function unDensify[228759](arg dense[228756] :
  _domain, arg whole[228762] :
  _domain, arg userErrors[228766] =
  1) : _unknown[51]
  {
    unknown argtypes[228788] "type variable"(228787 'typeof'(228785 call _build_tuple dense whole))
    (228805 call _undensCheck(228801 call ==(228794 call . dense c"rank")(228798 call . whole c"rank")) argtypes)
    (228827 return(228825 call chpl__buildDomainExpr(228823 'expand_tuple'(228822 call unDensify(228813 call(228809 call . dense c"dims"))(228820 call(228816 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (228780 call chpl__buildDomainRuntimeType defaultDist(228770 call . whole c"rank")(228775 call . whole c"idxType") 1)
  }
  function unDensify[228836](arg denses[228834]:_any[178](?), arg wholes[228838]:_any[178](?), arg userErrors[228841] =
  1) : _unknown[51]
  {
    unknown argtypes[228860] "type variable"(228859 'typeof'(228857 call _build_tuple denses wholes))
    (228877 call _undensCheck(228873 call ==(228866 call . wholes c"size")(228870 call . denses c"size")) argtypes)
    (228889 call _undensCheck(228886 call isRange(228884 call denses 0)) argtypes)
    (228901 call _undensCheck(228898 call isRange(228896 call wholes 0)) argtypes)
    (228909 call _undensEnsureBounded(228907 call denses 0))
    { scopeless
      unknown rank[228915] "param"(228912 call . wholes c"size")
      (228918 'end of statement')
    }
    unknown IT[228926] "type variable"(228923 call .(228922 call wholes 0) c"idxType")
    { scopeless
      unknown result[228941](228939 call * rank(228938 call range IT(228934 call . BoundedRangeType c"bounded") 1))
      (228944 'end of statement')
    }
    {
      unknown d[229019] 0
      unknown tmp[229020] "maybe param" "temp"
      (229032 'move' tmp[229020](229030 call chpl_compute_low_param_loop_bound 0(228948 call - rank 1)))
      unknown tmp[229021] "maybe param" "temp"
      (229042 'move' tmp[229021](229040 call chpl_compute_high_param_loop_bound 0(229037 call - rank 1)))
      unknown tmp[229022] "maybe param" "temp"
      (229045 'move' tmp[229022] 1)
      ParamForLoop[229047]
      { d[229019] tmp[229020] tmp[229021] tmp[229022]
        {
          (228962 call _undensCheck(228959 call isRange(228957 call denses d)) argtypes)
          (228975 call _undensCheck(228972 call isRange(228970 call wholes d)) argtypes)
          (228991 call _undensCheck(228988 call chpl__legalIntCoerce(228983 call .(228982 call wholes d) c"idxType") IT) argtypes)
          (228999 call _undensEnsureBounded(228997 call denses d))
          (229016 call =(229004 call result d)(229015 call unDensify(229009 call denses d)(229014 call wholes d)))
        }
      }
      label _unused_continueLabel[229024]
      label _breakLabel[229023]
    }
    (229057 return result)
  }
  where {
    (228852 call &&(228847 call isTuple denses)(228851 call isTuple wholes))
  }
  function unDensify[229074](arg dense[229071] :
  (229070 call range ?[260](boundedType = unknown B[229067])), arg whole[229084] :
  (229083 call range unknown IT[229077] ?[260](stridable = 1))) : _unknown[51]
  {
    (229096 call _undensEnsureBounded dense)
    if(229130 call _cond_test(229107 call ==(229100 call . whole c"boundedType")(229104 call . BoundedRangeType c"boundedNone")))
    {
      { scopeless
        (229128 call compilerError "unDensify(): the 'whole' argument must have at least one bound")
      }
    }
    if(229154 call _cond_test(229140 call ==(229136 call . dense c"size") 0))
    {
      { scopeless
        (229152 return(229150 call chpl_build_bounded_range(229144 call _cast IT 1)(229148 call _cast IT 0)))
      }
    }
    if(229188 call _cond_test(229165 call !(229164 call(229160 call . whole c"hasFirst"))))
    {
      { scopeless
        (229186 call halt "unDensify() is invoked with the 'whole' range that has no first index")
      }
    }
    { scopeless
      unknown low[229204](229203 call(229195 call . whole c"orderToIndex")(229199 call . dense c"first")) IT
      (229207 'end of statement')
    }
    { scopeless
      const stride[229218] "const"(229216 call *(229209 call . whole c"stride")(229213 call . dense c"stride"))
      (229221 'end of statement')
    }
    { scopeless
      unknown high[229235](229234 call chpl__addRangeStrides low stride(229232 call -(229228 call . dense c"size") 1)) IT
      (229238 'end of statement')
    }
    (229254 call assert(229251 call == high(229250 call(229242 call . whole c"orderToIndex")(229246 call . dense c"last"))))
    if(229265 call _cond_test(229258 call < stride 0))
    {
      { scopeless
        (229262 call <=> low high)
      }
    }
    (229317 call assert(229273 call <= low high) "unDensify(dense=" dense ", whole=" whole "): got low (" low ") larger than high (" high ")")
    (229326 return(229324 call chpl_by(229321 call chpl_build_bounded_range low high) stride))
  }
  { scopeless type
    (229092 call range IT B 1)
  }
  function unDensify[229346](arg dense[229343] :
  (229342 call range ?[260](boundedType = unknown B[229336])(stridable = unknown S[229339])), arg whole[229356] :
  (229355 call range unknown IT[229349] ?[260](stridable = 0))) : _unknown[51]
  {
    if(229394 call _cond_test(229371 call !(229370 call(229366 call . whole c"hasLowBound"))))
    {
      { scopeless
        (229392 call compilerError "unDensify(): the 'whole' argument, when not stridable, must have a low bound")
      }
    }
    (229415 return(229413 call _cast(229412 call range IT B S)(229405 call + dense(229402 call . whole c"low"))))
  }
  { scopeless type
    (229364 call range IT B S)
  }
  function _undensEnsureBounded[229424](arg arg[229422]:_any[178](?)) : _unknown[51]
  {
    if(229454 call _cond_test(229430 call !(229429 call isBoundedRange arg)))
    {
      { scopeless
        (229452 call compilerError "unDensify() currently requires that the densified ranges be bounded" 2)
      }
    }
  }
  function _undensCheck[229466](param arg cond[229464]:_any[178](?), arg argtypes[229468]:_any[178](?), param arg errlevel[229471] =
  2) : _unknown[51]
  {
    if(229505 call _cond_test(229475 call ! cond))
    {
      { scopeless
        (229503 call compilerError "unDensify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges, but is invoked on "(229500 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function setupTargetLocalesArray[229517](ref arg targetLocDom[229515]:_any[178](?), arg targetLocArr[229519]:_any[178](?), arg specifiedLocArr[229521]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[229527] "param"(229524 call . targetLocDom c"rank")
      (229530 'end of statement')
    }
    if(229769 call _cond_test(229543 call &&(229534 call != rank 1)(229541 call ==(229537 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229553] "const"(229552 call _factor rank(229549 call . specifiedLocArr c"size"))
        (229556 'end of statement')
      }
      { scopeless
        unknown ranges[229562](229560 call * rank range)
        (229565 'end of statement')
      }
      {
        unknown i[229589] 0
        unknown tmp[229590] "maybe param" "temp"
        (229602 'move' tmp[229590](229600 call chpl_compute_low_param_loop_bound 0(229569 call - rank 1)))
        unknown tmp[229591] "maybe param" "temp"
        (229612 'move' tmp[229591](229610 call chpl_compute_high_param_loop_bound 0(229607 call - rank 1)))
        unknown tmp[229592] "maybe param" "temp"
        (229615 'move' tmp[229592] 1)
        ParamForLoop[229617]
        { i[229589] tmp[229590] tmp[229591] tmp[229592]
          { scopeless
            (229586 call =(229576 call ranges i)(229584 call #(229578 call chpl_build_low_bounded_range 0)(229583 call factors i)))
          }
        }
        label _unused_continueLabel[229594]
        label _breakLabel[229593]
      }
      (229632 call = targetLocDom(229630 call chpl__buildDomainExpr(229628 'expand_tuple' ranges)))
      (229641 call = targetLocArr(229640 call reshape specifiedLocArr targetLocDom))
    }
    {
      if(229672 call _cond_test(229649 call !=(229645 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229670 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      { scopeless
        unknown ranges[229682](229680 call * rank range)
        (229685 'end of statement')
      }
      {
        unknown i[229718] 0
        unknown tmp[229719] "maybe param" "temp"
        (229731 'move' tmp[229719](229729 call chpl_compute_low_param_loop_bound 0(229689 call - rank 1)))
        unknown tmp[229720] "maybe param" "temp"
        (229741 'move' tmp[229720](229739 call chpl_compute_high_param_loop_bound 0(229736 call - rank 1)))
        unknown tmp[229721] "maybe param" "temp"
        (229744 'move' tmp[229721] 1)
        ParamForLoop[229746]
        { i[229718] tmp[229719] tmp[229720] tmp[229721]
          { scopeless
            (229715 call =(229696 call ranges i)(229713 call #(229698 call chpl_build_low_bounded_range 0)(229710 call .(229709 call(229704 call .(229701 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229723]
        label _breakLabel[229722]
      }
      (229761 call = targetLocDom(229759 call chpl__buildDomainExpr(229757 'expand_tuple' ranges)))
      (229766 call = targetLocArr specifiedLocArr)
    }
  }
  function setupTargetLocRanges[229779](param arg rank[229777]:_any[178](?), arg specifiedLocArr[229781]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown ranges[229787](229785 call * rank range)
      (229790 'end of statement')
    }
    if(229965 call _cond_test(229803 call &&(229794 call != rank 1)(229801 call ==(229797 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229813] "const"(229812 call _factor rank(229809 call . specifiedLocArr c"size"))
        (229816 'end of statement')
      }
      {
        unknown i[229841] 0
        unknown tmp[229842] "maybe param" "temp"
        (229854 'move' tmp[229842](229852 call chpl_compute_low_param_loop_bound 0(229821 call - rank 1)))
        unknown tmp[229843] "maybe param" "temp"
        (229864 'move' tmp[229843](229862 call chpl_compute_high_param_loop_bound 0(229859 call - rank 1)))
        unknown tmp[229844] "maybe param" "temp"
        (229867 'move' tmp[229844] 1)
        ParamForLoop[229869]
        { i[229841] tmp[229842] tmp[229843] tmp[229844]
          { scopeless
            (229838 call =(229828 call ranges i)(229836 call #(229830 call chpl_build_low_bounded_range 0)(229835 call factors i)))
          }
        }
        label _unused_continueLabel[229846]
        label _breakLabel[229845]
      }
    }
    {
      if(229890 call _cond_test(229883 call !=(229879 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229888 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      {
        unknown i[229928] 0
        unknown tmp[229929] "maybe param" "temp"
        (229941 'move' tmp[229929](229939 call chpl_compute_low_param_loop_bound 0(229899 call - rank 1)))
        unknown tmp[229930] "maybe param" "temp"
        (229951 'move' tmp[229930](229949 call chpl_compute_high_param_loop_bound 0(229946 call - rank 1)))
        unknown tmp[229931] "maybe param" "temp"
        (229954 'move' tmp[229931] 1)
        ParamForLoop[229956]
        { i[229928] tmp[229929] tmp[229930] tmp[229931]
          { scopeless
            (229925 call =(229906 call ranges i)(229923 call #(229908 call chpl_build_low_bounded_range 0)(229920 call .(229919 call(229914 call .(229911 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229933]
        label _breakLabel[229932]
      }
    }
    (229970 return ranges)
  }
  function createWholeDomainForInds[229978](param arg rank[229976]:_any[178](?), arg idxType[229980]:_any[178](?), param arg stridable[229982]:_any[178](?), arg inds[229984]:_any[178](?)) : _unknown[51]
  {
    if(230017 call _cond_test(229989 call isDomain inds))
    {
      (229991 return inds)
    }
    {
      { scopeless
        unknown result[230001](229999 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (230004 'end of statement')
      }
      (230012 call(230007 call . result c"setIndices") inds)
      (230015 return result)
    }
  }
  function bulkCommComputeActiveDims[230028](arg LeftDims[230026]:_any[178](?), arg RightDims[230030]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown LeftRank[230036] "param"(230033 call . LeftDims c"size")
      (230039 'end of statement')
    }
    { scopeless
      unknown RightRank[230045] "param"(230042 call . RightDims c"size")
      (230048 'end of statement')
    }
    { scopeless
      unknown minRank[230054] "param"(230053 call min LeftRank RightRank)
      (230057 'end of statement')
    }
    { scopeless
      unknown inferredRank[230059] 0
      (230062 'end of statement')
    }
    { scopeless
      unknown LeftActives[230063](230068 call * minRank int[13])
      unknown RightActives[230070](230074 'typeof' LeftActives)
      (230075 'end of statement')
    }
    { scopeless
      unknown li[230077] 0
      unknown ri[230081] 0
      (230084 'end of statement')
    }
    function advance[230087]() : _unknown[51]
    {
      {
        unknown tmp[230122] "temp"
        (230188 'move' tmp[230122](230162 call _cond_test(230164 call &&(230166 call ==(230168 call .(230170 call LeftDims li) c"size") 1)(230175 call !=(230177 call .(230179 call LeftDims li) c"size")(230183 call .(230185 call RightDims ri) c"size")))))
        WhileDo[230127]
        {
          { scopeless
            (230119 call += li 1)
          }
          label _continueLabel[230125]
          (230157 'move' tmp[230122](230131 call _cond_test(230133 call &&(230135 call ==(230137 call .(230139 call LeftDims li) c"size") 1)(230144 call !=(230146 call .(230148 call LeftDims li) c"size")(230152 call .(230154 call RightDims ri) c"size")))))
          tmp[230122]
        }
        label _breakLabel[230126]
      }
      {
        unknown tmp[230225] "temp"
        (230291 'move' tmp[230225](230265 call _cond_test(230267 call &&(230269 call ==(230271 call .(230273 call RightDims ri) c"size") 1)(230278 call !=(230280 call .(230282 call RightDims ri) c"size")(230286 call .(230288 call LeftDims li) c"size")))))
        WhileDo[230230]
        {
          { scopeless
            (230222 call += ri 1)
          }
          label _continueLabel[230228]
          (230260 'move' tmp[230225](230234 call _cond_test(230236 call &&(230238 call ==(230240 call .(230242 call RightDims ri) c"size") 1)(230247 call !=(230249 call .(230251 call RightDims ri) c"size")(230255 call .(230257 call LeftDims li) c"size")))))
          tmp[230225]
        }
        label _breakLabel[230229]
      }
      (230312 call assert(230309 call ==(230299 call .(230298 call LeftDims li) c"size")(230306 call .(230305 call RightDims ri) c"size")))
    }
    {
      unknown tmp[230362] "temp"
      DoWhile[230383]
      {
        {
          (230318 call advance)
          (230326 call =(230324 call LeftActives inferredRank) li)
          (230334 call =(230332 call RightActives inferredRank) ri)
          (230339 call += inferredRank 1)
          (230344 call += li 1)
          (230349 call += ri 1)
          label _continueLabel[230365]
          (230381 'move' tmp[230362](230370 call _cond_test(230372 call &&(230374 call < li LeftRank)(230378 call < ri RightRank))))
        }
        tmp[230362]
      }
      label _breakLabel[230366]
    }
    (230393 return(230391 call _build_tuple LeftActives RightActives inferredRank))
  }
  function bulkCommTranslateDomain[230403](arg srcSlice[230400] :
  _domain, arg srcDom[230406] :
  _domain, arg targetDom[230410] :
  _domain) : _unknown[51]
  {
    if(230444 call _cond_test(230421 call !=(230414 call . srcSlice c"rank")(230418 call . srcDom c"rank")))
    {
      { scopeless
        (230442 call compilerError "bulkCommTranslateDomain: source slice and source domain must have identical rank")
      }
    }
    { scopeless
      const tmp[230472] "const" "temp"(230471 call bulkCommComputeActiveDims(230463 call(230459 call . srcDom c"dims"))(230470 call(230466 call . targetDom c"dims")))
      (230482 call _check_tuple_var_decl tmp[230472] 3)
      const SrcActives[230450] "const"(230473 call tmp[230472] 0)
      const TargetActives[230452] "const"(230476 call tmp[230472] 1)
      const inferredRank[230454] "const"(230479 call tmp[230472] 2)
      (230487 'end of statement')
    }
    { scopeless
      unknown needsStridable[230498] "param"(230496 call ||(230489 call . targetDom c"stridable")(230493 call . srcSlice c"stridable"))
      (230501 'end of statement')
    }
    { scopeless
      unknown rngs[230523](230522 call(230518 call . targetDom c"dims"))(230515 call *(230503 call . targetDom c"rank")(230514 call range(230508 call . targetDom c"idxType")(stridable = needsStridable)))
      (230526 'end of statement')
    }
    {
      unknown _indexOfInterest[230591] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[230592] "expr temp" "temp"
      (230601 'move' _iterator[230592](230599 call _getIterator(230609 call chpl_direct_range_iter 0(230606 call - inferredRank 1) 1)))
      Defer
      {
        {
          (230625 call _freeIterator _iterator[230592])
        }
      }
      { scopeless type
        (230614 'move' _indexOfInterest[230591](230611 call iteratorIndex _iterator[230592]))
      }
      ForLoop[230593]
      {
        unknown i[230618] "index var" "insert auto destroy"
        (230620 'move' i[230618] _indexOfInterest[230591])
        {
          { scopeless
            const SD[230539] "const"(230538 call SrcActives i)
            (230542 'end of statement')
          }
          { scopeless
            const TD[230548] "const"(230547 call TargetActives i)
            (230551 'end of statement')
          }
          { scopeless
            const dense[230569] "const"(230568 call densify(230559 call(230554 call . srcSlice c"dim") SD)(230567 call(230562 call . srcDom c"dim") SD))
            (230572 'end of statement')
          }
          (230588 call =(230576 call rngs TD)(230587 call unDensify dense(230586 call(230581 call . targetDom c"dim") TD)))
        }
        label _continueLabel[230596]
        _indexOfInterest[230591]
        _iterator[230592]
      }
      label _breakLabel[230597]
    }
    (230637 return(230635 call chpl__buildDomainExpr(230633 'expand_tuple' rngs)))
  }
  function bulkCommConvertCoordinate[230645](arg ind[230643]:_any[178](?), arg bView[230648] :
  _domain, arg aView[230652] :
  _domain) : _unknown[51]
  {
    if(230718 call _cond_test(230663 call !=(230656 call . bView c"rank")(230660 call . aView c"rank")))
    {
      (230715 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - domain ranks must match: bView.rank = "(230689 call _cast string[26](230685 call . bView c"rank")) ", aView.rank = "(230713 call _cast string[26](230709 call . aView c"rank")))
    }
    { scopeless
      unknown rank[230727] "param"(230724 call . aView c"rank")
      (230730 'end of statement')
    }
    { scopeless
      const b[230735] "const"(230734 call chpl__tuplify ind)
      (230738 'end of statement')
    }
    if(230829 call _cond_test(230744 call !=(230740 call . b c"size") rank))
    {
      { scopeless
        unknown plural[230774] "param"(230771 IfExpr (230751 call ==(230747 call . b c"size") 1) then
        { scopeless
          " element"
        } else
        { scopeless
          " elements"
        } )
        (230777 'end of statement')
      }
      (230827 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - expecting index with "(230800 call _cast string[26] rank) " elements, got "(230824 call _cast string[26](230820 call . b c"size")) plural)
    }
    unknown idxType[230837] "type variable"(230834 call . aView c"idxType")
    { scopeless
      const AD[230846] "const"(230845 call(230841 call . aView c"dims"))
      (230849 'end of statement')
    }
    { scopeless
      const BD[230856] "const"(230855 call(230851 call . bView c"dims"))
      (230859 'end of statement')
    }
    { scopeless
      unknown result[230864](230862 call * rank idxType)
      (230867 'end of statement')
    }
    {
      unknown i[230934] 0
      unknown tmp[230935] "maybe param" "temp"
      (230947 'move' tmp[230935](230945 call chpl_compute_low_param_loop_bound 0(230871 call - rank 1)))
      unknown tmp[230936] "maybe param" "temp"
      (230957 'move' tmp[230936](230955 call chpl_compute_high_param_loop_bound 0(230952 call - rank 1)))
      unknown tmp[230937] "maybe param" "temp"
      (230960 'move' tmp[230937] 1)
      ParamForLoop[230962]
      { i[230934] tmp[230935] tmp[230936] tmp[230937]
        {
          { scopeless
            const ar[230879] "const"(230878 call AD i)
            const br[230886] "const"(230885 call BD i)
            (230889 'end of statement')
          }
          if(230906 call _cond_test boundsChecking)
          {
            { scopeless
              (230904 call assert(230902 call(230894 call . br c"contains")(230900 call b i)))
            }
          }
          (230931 call =(230914 call result i)(230930 call(230916 call . ar c"orderToIndex")(230928 call(230920 call . br c"indexOrder")(230926 call b i))))
        }
      }
      label _unused_continueLabel[230939]
      label _breakLabel[230938]
    }
    (230972 return result)
  }
}