AST dump for DSIUtil after pass parse.
Module use list: 

{
  (353050 'use' ChapelStandard)
  function getDataParTasksPerLocale[225977]() : _unknown[51] "inline"
  {
    (225980 return dataParTasksPerLocale)
  }
  function getDataParIgnoreRunningTasks[225987]() : _unknown[51] "inline"
  {
    (225990 return dataParIgnoreRunningTasks)
  }
  function getDataParMinGranularity[225997]() : _unknown[51] "inline"
  {
    (226000 return dataParMinGranularity)
  }
  function createTuple[226009](param arg rank[226007]:_any[178](?), arg t[226011]:_any[178](?), arg val[226013]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[226019](226017 call * rank t)
      (226022 'end of statement')
    }
    {
      unknown i[226039] 0
      unknown tmp[226040] "maybe param" "temp"
      (226052 'move' tmp[226040](226050 call chpl_compute_low_param_loop_bound 0(226027 call - rank 1)))
      unknown tmp[226041] "maybe param" "temp"
      (226062 'move' tmp[226041](226060 call chpl_compute_high_param_loop_bound 0(226057 call - rank 1)))
      unknown tmp[226042] "maybe param" "temp"
      (226065 'move' tmp[226042] 1)
      ParamForLoop[226067]
      { i[226039] tmp[226040] tmp[226041] tmp[226042]
        { scopeless
          (226036 call =(226034 call tup i) val)
        }
      }
      label _unused_continueLabel[226044]
      label _breakLabel[226043]
    }
    (226077 return tup)
  }
  function _computeChunkStuff[226085](arg maxTasks[226083]:_any[178](?), arg ignoreRunning[226087]:_any[178](?), arg minSize[226089]:_any[178](?), arg ranges[226091]:_any[178](?), param arg adjustToOneDim[226094] =
  1) : _unknown[51]
  {
    { scopeless
      unknown rank[226106] "param"(226103 call . ranges c"size")
      (226109 'end of statement')
    }
    unknown EC[226112] "type variable" uint[115]
    { scopeless
      unknown numElems[226119](226117 call _cast EC 1)
      (226122 'end of statement')
    }
    {
      unknown i[226145] 0
      unknown tmp[226146] "maybe param" "temp"
      (226158 'move' tmp[226146](226156 call chpl_compute_low_param_loop_bound 0(226126 call - rank 1)))
      unknown tmp[226147] "maybe param" "temp"
      (226168 'move' tmp[226147](226166 call chpl_compute_high_param_loop_bound 0(226163 call - rank 1)))
      unknown tmp[226148] "maybe param" "temp"
      (226171 'move' tmp[226148] 1)
      ParamForLoop[226173]
      { i[226145] tmp[226146] tmp[226147] tmp[226148]
        {
          (226141 call *= numElems(226139 call _cast EC(226135 call .(226134 call ranges i) c"size")))
        }
      }
      label _unused_continueLabel[226150]
      label _breakLabel[226149]
    }
    { scopeless
      unknown numChunks[226189](226188 call _computeNumChunks maxTasks ignoreRunning minSize numElems)
      (226192 'end of statement')
    }
    if(226206 call _cond_test(226195 call == numChunks 0))
    {
      { scopeless
        (226204 return(226202 call _build_tuple 0(226199 call - 1)))
      }
    }
    (226217 call assert(226214 call > numChunks 0))
    { scopeless
      unknown parDim[226222](226220 call - 1)
      (226225 'end of statement')
    }
    { scopeless
      unknown maxDim[226229](226227 call - 1)
      (226232 'end of statement')
    }
    { scopeless
      unknown maxElems[226237](226236 call min EC)
      (226240 'end of statement')
    }
    {
      unknown _indexOfInterest[226303] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[226304] "expr temp" "temp"
      (226313 'move' _iterator[226304](226311 call _getIterator(226321 call chpl_direct_range_iter 0(226318 call - rank 1) 1)))
      Defer
      {
        {
          (226337 call _freeIterator _iterator[226304])
        }
      }
      { scopeless type
        (226326 'move' _indexOfInterest[226303](226323 call iteratorIndex _iterator[226304]))
      }
      ForLoop[226305]
      {
        unknown i[226330] "index var" "insert auto destroy"
        (226332 'move' i[226330] _indexOfInterest[226303])
        {
          { scopeless
            const curElems[226259] "const"(226257 call _cast EC(226253 call .(226252 call ranges i) c"size"))
            (226262 'end of statement')
          }
          if(226280 call _cond_test(226269 call >= curElems(226267 call _cast EC numChunks)))
          {
            (226273 call = parDim i)
            break nil[44]
          }
          if(226299 call _cond_test(226286 call > curElems maxElems))
          {
            (226290 call = maxElems curElems)
            (226296 call = maxDim i)
          }
        }
        label _continueLabel[226308]
        _indexOfInterest[226303]
        _iterator[226304]
      }
      label _breakLabel[226309]
    }
    if(226379 call _cond_test(226348 call == parDim(226346 call - 1)))
    {
      (226352 call = parDim maxDim)
      if(226374 call _cond_test(226364 call && adjustToOneDim(226362 call < maxElems(226360 call _cast EC numChunks))))
      {
        { scopeless
          (226371 call = numChunks(226369 call _cast int[13] maxElems))
        }
      }
    }
    (226388 return(226386 call _build_tuple numChunks parDim))
  }
  { scopeless type
    (226100 call _build_tuple int[13] int[13])
  }
  function _computeNumChunks[226397](arg maxTasks[226395]:_any[178](?), arg ignoreRunning[226399]:_any[178](?), arg minSize[226401]:_any[178](?), arg numElems[226403]:_any[178](?)) : _unknown[51]
  {
    if(226413 call _cond_test(226408 call <= numElems 0))
    {
      { scopeless
        (226411 return 0)
      }
    }
    unknown EC[226420] "type variable" uint[115]
    { scopeless
      const unumElems[226427] "const"(226425 call _cast EC numElems)
      (226430 'end of statement')
    }
    { scopeless
      unknown numChunks[226435](226433 call _cast int[13] maxTasks)
      (226438 'end of statement')
    }
    if(226475 call _cond_test(226440 call ! ignoreRunning))
    {
      { scopeless
        const otherTasks[226451] "const"(226449 call -(226447 call(226443 call . here c"runningTasks")) 1)
        (226454 'end of statement')
      }
      (226472 call = numChunks(226469 IfExpr (226459 call < otherTasks maxTasks) then
      { scopeless
        (226466 call _cast int[13](226463 call - maxTasks otherTasks))
      } else
      { scopeless
        1
      } ))
    }
    if(226556 call _cond_test(226481 call > minSize 0))
    {
      unknown tmp[226505] "temp"
      (226553 'move' tmp[226505](226536 call _cond_test(226538 call &&(226540 call < unumElems(226543 call _cast EC(226546 call * minSize numChunks)))(226550 call > numChunks 1))))
      WhileDo[226510]
      {
        {
          (226501 call -= numChunks 1)
        }
        label _continueLabel[226508]
        (226531 'move' tmp[226505](226514 call _cond_test(226516 call &&(226518 call < unumElems(226521 call _cast EC(226524 call * minSize numChunks)))(226528 call > numChunks 1))))
        tmp[226505]
      }
      label _breakLabel[226509]
    }
    if(226575 call _cond_test(226565 call >(226562 call _cast EC numChunks) unumElems))
    {
      { scopeless
        (226572 call = numChunks(226570 call _cast int[13] unumElems))
      }
    }
    (226581 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeNumChunks[226590](arg numElems[226588]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown numTasks[226605](226602 IfExpr (226595 call == dataParTasksPerLocale 0) then
      { scopeless
        (226598 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (226608 'end of statement')
    }
    { scopeless
      unknown ignoreRunning[226611] dataParIgnoreRunningTasks
      (226614 'end of statement')
    }
    { scopeless
      unknown minIndicesPerTask[226616] dataParMinGranularity
      (226619 'end of statement')
    }
    { scopeless
      unknown numChunks[226627](226626 call _computeNumChunks numTasks ignoreRunning minIndicesPerTask numElems)
      (226630 'end of statement')
    }
    (226632 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeChunkStartEnd[226641](arg nElems[226639]:_any[178](?), arg nChunks[226643]:_any[178](?), arg myCnk[226645]:_any[178](?)) : _unknown[51]
  {
    unknown IT[226662] "type variable"(226659 IfExpr (226655 call ==(226653 'typeof' nElems) uint[115]) then
    { scopeless
      uint[115]
    } else
    { scopeless
      int[13]
    } )
    { scopeless
      const tmp[226688] "const" "temp"(226686 call _build_tuple(226675 call _cast IT nElems)(226679 call _cast IT nChunks)(226684 call _cast IT myCnk))
      (226698 call _check_tuple_var_decl tmp[226688] 3)
      const numElems[226666] "const"(226689 call tmp[226688] 0)
      const numChunks[226668] "const"(226692 call tmp[226688] 1)
      const myChunk[226670] "const"(226695 call tmp[226688] 2)
      (226703 'end of statement')
    }
    unknown RT[226706] "type variable"(226705 'typeof' nElems)
    { scopeless
      unknown div[226713](226711 call / numElems numChunks)
      (226716 'end of statement')
    }
    { scopeless
      unknown rem[226721](226719 call % numElems numChunks)
      (226724 'end of statement')
    }
    (226737 call assert(226734 call &&(226728 call <= 1 myChunk)(226732 call <= myChunk numChunks)))
    if(226808 call _cond_test(226741 call <= myChunk rem))
    {
      { scopeless
        unknown endIx[226750](226748 call * myChunk(226746 call + div 1))
        (226753 'end of statement')
      }
      (226769 return(226767 call _build_tuple(226760 call _cast RT(226757 call - endIx div))(226764 call _cast RT endIx)))
    }
    {
      { scopeless
        unknown startIx1[226784](226782 call - numElems(226780 call *(226777 call +(226774 call - numChunks myChunk) 1) div))
        (226787 'end of statement')
      }
      (226806 return(226804 call _build_tuple(226794 call _cast RT(226791 call + startIx1 1))(226801 call _cast RT(226798 call + startIx1 div))))
    }
  }
  { scopeless type
    (226650 call * 2(226649 'typeof' nElems))
  }
  function intCeilXDivByY[226819](arg x[226817]:_any[178](?), arg y[226821]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      (226833 return(226831 call + 1(226829 call /(226826 call - x 1) y)))
    }
  }
  function _computeBlock[226842](arg numelems[226840]:_any[178](?), arg numblocks[226844]:_any[178](?), arg blocknum[226846]:_any[178](?), arg wayhi[226848]:_any[178](?), arg waylo[226855] =
  (226853 call _cast(226852 'typeof' wayhi) 0), arg lo[226863] =
  (226861 call _cast(226860 'typeof' wayhi) 0)) : _unknown[51]
  {
    if(226885 call _cond_test(226868 call == numelems 0))
    {
      { scopeless
        (226883 return(226881 call _build_tuple(226873 call _cast(226872 'typeof' lo) 1)(226878 call _cast(226877 'typeof' lo) 0)))
      }
    }
    { scopeless
      const blo[226923] "const"(226920 IfExpr (226893 call == blocknum 0) then
      { scopeless
        waylo
      } else
      { scopeless
        (226918 call + lo(226916 call _cast(226915 'typeof' lo)(226913 call intCeilXDivByY(226906 call *(226900 call _cast uint[115] numelems)(226904 call _cast uint[115] blocknum))(226911 call _cast uint[115] numblocks))))
      } )
      (226926 'end of statement')
    }
    { scopeless
      const bhi[226968] "const"(226965 IfExpr (226932 call == blocknum(226930 call - numblocks 1)) then
      { scopeless
        wayhi
      } else
      { scopeless
        (226963 call -(226960 call + lo(226958 call _cast(226957 'typeof' lo)(226955 call intCeilXDivByY(226948 call *(226939 call _cast uint[115] numelems)(226946 call _cast uint[115](226943 call + blocknum 1)))(226953 call _cast uint[115] numblocks)))) 1)
      } )
      (226971 'end of statement')
    }
    (226977 return(226975 call _build_tuple blo bhi))
  }
  function _factor[226987](param arg rank[226984] :
  int[13], arg value[226989]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown factors[226995](226993 call * rank int[13])
      (226998 'end of statement')
    }
    {
      unknown i[227015] 0
      unknown tmp[227016] "maybe param" "temp"
      (227028 'move' tmp[227016](227026 call chpl_compute_low_param_loop_bound 0(227003 call - rank 1)))
      unknown tmp[227017] "maybe param" "temp"
      (227038 'move' tmp[227017](227036 call chpl_compute_high_param_loop_bound 0(227033 call - rank 1)))
      unknown tmp[227018] "maybe param" "temp"
      (227041 'move' tmp[227018] 1)
      ParamForLoop[227043]
      { i[227015] tmp[227016] tmp[227017] tmp[227018]
        { scopeless
          (227012 call =(227010 call factors i) 1)
        }
      }
      label _unused_continueLabel[227020]
      label _breakLabel[227019]
    }
    if(227249 call _cond_test(227054 call >= value 1))
    {
      { scopeless
        unknown iv[227057] value
        (227060 'end of statement')
      }
      { scopeless
        unknown factor[227063] 1
        (227066 'end of statement')
      }
      {
        unknown tmp[227222] "temp"
        (227246 'move' tmp[227222](227241 call _cond_test(227243 call > iv 1)))
        WhileDo[227227]
        {
          {
            {
              unknown _indexOfInterest[227183] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[227184] "expr temp" "temp"
              (227193 'move' _iterator[227184](227191 call _getIterator(227198 call chpl_direct_range_iter 2 iv 1)))
              Defer
              {
                {
                  (227214 call _freeIterator _iterator[227184])
                }
              }
              { scopeless type
                (227203 'move' _indexOfInterest[227183](227200 call iteratorIndex _iterator[227184]))
              }
              ForLoop[227185]
              {
                unknown i[227207] "index var" "insert auto destroy"
                (227209 'move' i[227207] _indexOfInterest[227183])
                {
                  if(227178 call _cond_test(227081 call ==(227078 call % iv i) 0))
                  {
                    { scopeless
                      unknown j[227084] 0
                      (227087 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[227118] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[227119] "expr temp" "temp"
                      (227128 'move' _iterator[227119](227126 call _getIterator(227136 call chpl_direct_range_iter 1(227133 call - rank 1) 1)))
                      Defer
                      {
                        {
                          (227152 call _freeIterator _iterator[227119])
                        }
                      }
                      { scopeless type
                        (227141 'move' _indexOfInterest[227118](227138 call iteratorIndex _iterator[227119]))
                      }
                      ForLoop[227120]
                      {
                        unknown i[227145] "index var" "insert auto destroy"
                        (227147 'move' i[227145] _indexOfInterest[227118])
                        {
                          if(227112 call _cond_test(227105 call <(227100 call factors i)(227104 call factors j)))
                          {
                            { scopeless
                              (227109 call = j i)
                            }
                          }
                        }
                        label _continueLabel[227123]
                        _indexOfInterest[227118]
                        _iterator[227119]
                      }
                      label _breakLabel[227124]
                    }
                    (227164 call *=(227162 call factors j) i)
                    (227172 call = iv(227170 call / iv i))
                    break nil[44]
                  }
                }
                label _continueLabel[227188]
                _indexOfInterest[227183]
                _iterator[227184]
              }
              label _breakLabel[227189]
            }
          }
          label _continueLabel[227225]
          (227236 'move' tmp[227222](227231 call _cond_test(227233 call > iv 1)))
          tmp[227222]
        }
        label _breakLabel[227226]
      }
    }
    {
      unknown _indexOfInterest[227342] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[227343] "expr temp" "temp"
      (227352 'move' _iterator[227343](227350 call _getIterator(227360 call chpl_direct_range_iter 0(227357 call - rank 1) 1)))
      Defer
      {
        {
          (227376 call _freeIterator _iterator[227343])
        }
      }
      { scopeless type
        (227365 'move' _indexOfInterest[227342](227362 call iteratorIndex _iterator[227343]))
      }
      ForLoop[227344]
      {
        unknown i[227369] "index var" "insert auto destroy"
        (227371 'move' i[227369] _indexOfInterest[227342])
        {
          unknown _indexOfInterest[227298] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[227299] "expr temp" "temp"
          (227308 'move' _iterator[227299](227306 call _getIterator(227319 call chpl_direct_range_iter(227312 call + i 1)(227316 call - rank 1) 1)))
          Defer
          {
            {
              (227335 call _freeIterator _iterator[227299])
            }
          }
          { scopeless type
            (227324 'move' _indexOfInterest[227298](227321 call iteratorIndex _iterator[227299]))
          }
          ForLoop[227300]
          {
            unknown j[227328] "index var" "insert auto destroy"
            (227330 'move' j[227328] _indexOfInterest[227298])
            { scopeless
              if(227293 call _cond_test(227280 call <(227275 call factors i)(227279 call factors j)))
              {
                { scopeless
                  (227290 call <=>(227285 call factors i)(227289 call factors j))
                }
              }
            }
            label _continueLabel[227303]
            _indexOfInterest[227298]
            _iterator[227299]
          }
          label _breakLabel[227304]
        }
        label _continueLabel[227347]
        _indexOfInterest[227342]
        _iterator[227343]
      }
      label _breakLabel[227348]
    }
    (227384 return factors)
  }
  function computeZeroBasedDomain[227394](arg dom[227391] :
  _domain) : _unknown[51]
  {
    { scopeless
      (227409 return(227407 call chpl__buildDomainExpr(227405 'expand_tuple'(227404 call computeZeroBasedRanges(227402 call(227398 call . dom c"dims"))))))
    }
  }
  function computeZeroBasedRanges[227420](arg ranges[227417] :
  _tuple) : _unknown[51]
  {
    function helper[227426](arg idxType[227424]:_any[178](?), arg first[227428]:_any[178](?), arg rest[227431]:_any[178](?) ...) : _unknown[51]
    {
      if(227506 call _cond_test(227439 call >(227435 call . rest c"size") 1))
      {
        { scopeless
          (227466 return(227464 call _build_tuple(227454 call #(227445 call chpl_build_low_bounded_range(227443 call _cast idxType 0))(227452 call _cast idxType(227448 call . first c"size")))(227462 'expand_tuple'(227461 call helper idxType(227460 'expand_tuple' rest)))))
        }
      }
      {
        { scopeless
          (227504 return(227502 call _build_tuple(227481 call #(227472 call chpl_build_low_bounded_range(227470 call _cast idxType 0))(227479 call _cast idxType(227475 call . first c"size")))(227499 call #(227487 call chpl_build_low_bounded_range(227485 call _cast idxType 0))(227497 call _cast idxType(227493 call .(227492 call rest 0) c"size")))))
        }
      }
    }
    unknown idxType[227523] "type variable"(227520 call .(227519 call ranges 0) c"idxType")
    if(227563 call _cond_test(227531 call >(227527 call . ranges c"size") 1))
    {
      { scopeless
        (227539 return(227538 call helper idxType(227537 'expand_tuple' ranges)))
      }
    }
    {
      { scopeless
        (227561 return(227559 call _build_tuple(227557 call #(227545 call chpl_build_low_bounded_range(227543 call _cast idxType 0))(227555 call _cast idxType(227551 call .(227550 call ranges 0) c"size")))))
      }
    }
  }
  function densify[227577](arg sub[227574] :
  _domain, arg whole[227580] :
  _domain, arg userErrors[227584] =
  1) : _unknown[51]
  {
    unknown argtypes[227606] "type variable"(227605 'typeof'(227603 call _build_tuple sub whole))
    (227623 call _densiCheck(227619 call ==(227612 call . sub c"rank")(227616 call . whole c"rank")) argtypes)
    (227636 call _densiIdxCheck(227627 call . sub c"idxType")(227632 call . whole c"idxType") argtypes)
    (227658 return(227656 call chpl__buildDomainExpr(227654 'expand_tuple'(227653 call densify(227644 call(227640 call . sub c"dims"))(227651 call(227647 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (227598 call chpl__buildDomainRuntimeType defaultDist(227588 call . whole c"rank")(227593 call . whole c"idxType") 1)
  }
  function densify[227667](arg subs[227665]:_any[178](?), arg wholes[227669]:_any[178](?), arg userErrors[227672] =
  1) : _unknown[51]
  {
    unknown argtypes[227691] "type variable"(227690 'typeof'(227688 call _build_tuple subs wholes))
    (227708 call _densiCheck(227704 call ==(227697 call . wholes c"size")(227701 call . subs c"size")) argtypes)
    (227720 call _densiCheck(227717 call isRange(227715 call subs 0)) argtypes)
    (227732 call _densiCheck(227729 call isRange(227727 call wholes 0)) argtypes)
    (227740 call _densiEnsureBounded(227738 call subs 0))
    (227759 call _densiIdxCheck(227747 call .(227746 call subs 0) c"idxType")(227755 call .(227754 call wholes 0) c"idxType") argtypes)
    { scopeless
      unknown rank[227765] "param"(227762 call . wholes c"size")
      (227768 'end of statement')
    }
    unknown IT[227776] "type variable"(227773 call .(227772 call wholes 0) c"idxType")
    { scopeless
      unknown result[227791](227789 call * rank(227788 call range IT(227784 call . BoundedRangeType c"bounded") 1))
      (227794 'end of statement')
    }
    {
      unknown d[227886] 0
      unknown tmp[227887] "maybe param" "temp"
      (227899 'move' tmp[227887](227897 call chpl_compute_low_param_loop_bound 0(227798 call - rank 1)))
      unknown tmp[227888] "maybe param" "temp"
      (227909 'move' tmp[227888](227907 call chpl_compute_high_param_loop_bound 0(227904 call - rank 1)))
      unknown tmp[227889] "maybe param" "temp"
      (227912 'move' tmp[227889] 1)
      ParamForLoop[227914]
      { d[227886] tmp[227887] tmp[227888] tmp[227889]
        {
          (227812 call _densiCheck(227809 call isRange(227807 call subs d)) argtypes)
          (227825 call _densiCheck(227822 call isRange(227820 call wholes d)) argtypes)
          (227838 call _densiIdxCheck(227832 call .(227831 call wholes d) c"idxType") IT argtypes)
          (227846 call _densiEnsureBounded(227844 call subs d))
          (227865 call _densiIdxCheck(227853 call .(227852 call subs d) c"idxType")(227861 call .(227860 call wholes d) c"idxType") argtypes)
          (227883 call =(227870 call result d)(227882 call densify(227875 call subs d)(227880 call wholes d) userErrors))
        }
      }
      label _unused_continueLabel[227891]
      label _breakLabel[227890]
    }
    (227924 return result)
  }
  where {
    (227683 call &&(227678 call isTuple subs)(227682 call isTuple wholes))
  }
  function densify[227941](arg s[227938] :
  (227937 call range ?[260](boundedType = unknown B[227934])), arg w[227951] :
  (227950 call range unknown IT[227944] ?[260](stridable = 1)), arg userErrors[227955] =
  1) : _unknown[51]
  {
    (227967 call _densiEnsureBounded s)
    (227983 call _densiIdxCheck(227972 call . s c"idxType") IT(227982 'typeof'(227980 call _build_tuple s w)))
    function ensure[227989](arg cond[227987]:_any[178](?), arg args[227992]:_any[178](?) ...) : _unknown[51]
    {
      if(228018 call _cond_test userErrors)
      {
        if(228005 call _cond_test(227997 call ! cond))
        {
          { scopeless
            (228003 call halt(228001 'expand_tuple' args))
          }
        }
      }
      {
        { scopeless
          (228016 call assert cond(228015 'expand_tuple' args))
        }
      }
    }
    if(228342 call _cond_test(228031 call ==(228027 call . s c"size") 0))
    {
      (228043 return(228041 call chpl_build_bounded_range(228035 call _cast IT 1)(228039 call _cast IT 0)))
    }
    {
      (228108 call ensure(228052 call >(228048 call . w c"size") 0) "densify(s=" s ", w=" w "): w is empty while s is not")
      { scopeless
        unknown low[228122](228121 call(228113 call . w c"indexOrder")(228117 call . s c"first")) IT
        (228125 'end of statement')
      }
      (228153 call ensure(228129 call >= low 0) "densify(s=" s ", w=" w "): s.first is not in w")
      if(228338 call _cond_test(228160 call ==(228156 call . s c"size") 1))
      {
        (228166 return(228164 call chpl_build_bounded_range low low))
      }
      {
        { scopeless
          unknown high[228180](228179 call(228171 call . w c"indexOrder")(228175 call . s c"last")) IT
          (228183 'end of statement')
        }
        (228212 call ensure(228188 call >= high 0) "densify(s=" s ", w=" w "): s.last is not in w")
        (228250 call ensure(228226 call ==(228223 call %(228216 call . s c"stride")(228220 call . w c"stride")) 0) "densify(s=" s ", w=" w "): s.stride is not a multiple of w.stride")
        { scopeless
          const stride[228262] "const"(228260 call /(228253 call . s c"stride")(228257 call . w c"stride"))
          (228265 'end of statement')
        }
        if(228275 call _cond_test(228268 call < stride 0))
        {
          { scopeless
            (228272 call <=> low high)
          }
        }
        (228327 call assert(228283 call <= low high) "densify(s=" s ", w=" w "): got low (" low ") larger than high (" high ")")
        (228336 return(228334 call chpl_by(228331 call chpl_build_bounded_range low high) stride))
      }
    }
  }
  { scopeless type
    (227963 call range IT B 1)
  }
  function densify[228364](arg sArg[228361] :
  (228360 call range ?[260](boundedType = unknown B[228354])(stridable = unknown S[228357])), arg w[228374] :
  (228373 call range unknown IT[228367] ?[260](stridable = 0)), arg userErrors[228378] =
  1) : _unknown[51]
  {
    (228390 call _densiEnsureBounded sArg)
    (228406 call _densiIdxCheck(228395 call . sArg c"idxType") IT(228405 'typeof'(228403 call _build_tuple sArg w)))
    { scopeless
      const s[228417] "const"(228415 call _cast(228414 call range IT B S) sArg)
      (228420 'end of statement')
    }
    function ensure[228425](arg cond[228423]:_any[178](?)) : _unknown[51]
    {
      if(228446 call _cond_test userErrors)
      {
        if(228435 call _cond_test(228429 call ! cond))
        {
          { scopeless
            (228433 call halt)
          }
        }
      }
      {
        { scopeless
          (228444 call assert cond)
        }
      }
    }
    (228485 call ensure(228482 call ||(228460 call(228456 call . s c"isEmpty"))(228480 call <=(228462 call . w c"low")(228477 IfExpr (228468 call isIntType IT) then
    { scopeless
      (228470 call . s c"alignedLow")
    } else
    { scopeless
      (228474 call . s c"low")
    } ))))
    (228517 call ensure(228514 call ||(228502 call ||(228493 call(228489 call . s c"isEmpty"))(228500 call !(228499 call(228495 call . w c"hasHighBound"))))(228512 call <=(228505 call . s c"alignedHigh")(228509 call . w c"high"))))
    if(228543 call _cond_test(228529 call &&(228522 call isUintType IT)(228528 call(228524 call . s c"isEmpty"))))
    {
      { scopeless
        (228541 return(228539 call chpl_build_bounded_range(228533 call _cast IT 1)(228537 call _cast IT 0)))
      }
    }
    (228563 return(228561 call _cast(228560 call range IT B S)(228553 call - s(228550 call . w c"low"))))
  }
  { scopeless type
    (228386 call range IT B S)
  }
  function _densiEnsureBounded[228572](arg arg[228570]:_any[178](?)) : _unknown[51]
  {
    if(228602 call _cond_test(228578 call !(228577 call isBoundedRange arg)))
    {
      { scopeless
        (228600 call compilerError "densify() currently requires that sub-ranges be bounded" 2)
      }
    }
  }
  function _densiIdxCheck[228614](arg subIdxType[228612]:_any[178](?), arg wholeIdxType[228616]:_any[178](?), arg argtypes[228618]:_any[178](?)) : _unknown[51]
  {
    (228630 call _densiCheck(228625 call chpl__legalIntCoerce subIdxType wholeIdxType) argtypes(errlevel = 3))
  }
  function _densiCheck[228639](param arg cond[228637]:_any[178](?), arg argtypes[228641]:_any[178](?), param arg errlevel[228644] =
  2) : _unknown[51]
  {
    if(228678 call _cond_test(228648 call ! cond))
    {
      { scopeless
        (228676 call compilerError "densify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges (except stridability and range b(228673 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function unDensify[228692](arg dense[228689] :
  _domain, arg whole[228695] :
  _domain, arg userErrors[228699] =
  1) : _unknown[51]
  {
    unknown argtypes[228721] "type variable"(228720 'typeof'(228718 call _build_tuple dense whole))
    (228738 call _undensCheck(228734 call ==(228727 call . dense c"rank")(228731 call . whole c"rank")) argtypes)
    (228760 return(228758 call chpl__buildDomainExpr(228756 'expand_tuple'(228755 call unDensify(228746 call(228742 call . dense c"dims"))(228753 call(228749 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (228713 call chpl__buildDomainRuntimeType defaultDist(228703 call . whole c"rank")(228708 call . whole c"idxType") 1)
  }
  function unDensify[228769](arg denses[228767]:_any[178](?), arg wholes[228771]:_any[178](?), arg userErrors[228774] =
  1) : _unknown[51]
  {
    unknown argtypes[228793] "type variable"(228792 'typeof'(228790 call _build_tuple denses wholes))
    (228810 call _undensCheck(228806 call ==(228799 call . wholes c"size")(228803 call . denses c"size")) argtypes)
    (228822 call _undensCheck(228819 call isRange(228817 call denses 0)) argtypes)
    (228834 call _undensCheck(228831 call isRange(228829 call wholes 0)) argtypes)
    (228842 call _undensEnsureBounded(228840 call denses 0))
    { scopeless
      unknown rank[228848] "param"(228845 call . wholes c"size")
      (228851 'end of statement')
    }
    unknown IT[228859] "type variable"(228856 call .(228855 call wholes 0) c"idxType")
    { scopeless
      unknown result[228874](228872 call * rank(228871 call range IT(228867 call . BoundedRangeType c"bounded") 1))
      (228877 'end of statement')
    }
    {
      unknown d[228952] 0
      unknown tmp[228953] "maybe param" "temp"
      (228965 'move' tmp[228953](228963 call chpl_compute_low_param_loop_bound 0(228881 call - rank 1)))
      unknown tmp[228954] "maybe param" "temp"
      (228975 'move' tmp[228954](228973 call chpl_compute_high_param_loop_bound 0(228970 call - rank 1)))
      unknown tmp[228955] "maybe param" "temp"
      (228978 'move' tmp[228955] 1)
      ParamForLoop[228980]
      { d[228952] tmp[228953] tmp[228954] tmp[228955]
        {
          (228895 call _undensCheck(228892 call isRange(228890 call denses d)) argtypes)
          (228908 call _undensCheck(228905 call isRange(228903 call wholes d)) argtypes)
          (228924 call _undensCheck(228921 call chpl__legalIntCoerce(228916 call .(228915 call wholes d) c"idxType") IT) argtypes)
          (228932 call _undensEnsureBounded(228930 call denses d))
          (228949 call =(228937 call result d)(228948 call unDensify(228942 call denses d)(228947 call wholes d)))
        }
      }
      label _unused_continueLabel[228957]
      label _breakLabel[228956]
    }
    (228990 return result)
  }
  where {
    (228785 call &&(228780 call isTuple denses)(228784 call isTuple wholes))
  }
  function unDensify[229007](arg dense[229004] :
  (229003 call range ?[260](boundedType = unknown B[229000])), arg whole[229017] :
  (229016 call range unknown IT[229010] ?[260](stridable = 1))) : _unknown[51]
  {
    (229029 call _undensEnsureBounded dense)
    if(229063 call _cond_test(229040 call ==(229033 call . whole c"boundedType")(229037 call . BoundedRangeType c"boundedNone")))
    {
      { scopeless
        (229061 call compilerError "unDensify(): the 'whole' argument must have at least one bound")
      }
    }
    if(229087 call _cond_test(229073 call ==(229069 call . dense c"size") 0))
    {
      { scopeless
        (229085 return(229083 call chpl_build_bounded_range(229077 call _cast IT 1)(229081 call _cast IT 0)))
      }
    }
    if(229121 call _cond_test(229098 call !(229097 call(229093 call . whole c"hasFirst"))))
    {
      { scopeless
        (229119 call halt "unDensify() is invoked with the 'whole' range that has no first index")
      }
    }
    { scopeless
      unknown low[229137](229136 call(229128 call . whole c"orderToIndex")(229132 call . dense c"first")) IT
      (229140 'end of statement')
    }
    { scopeless
      const stride[229151] "const"(229149 call *(229142 call . whole c"stride")(229146 call . dense c"stride"))
      (229154 'end of statement')
    }
    { scopeless
      unknown high[229168](229167 call chpl__addRangeStrides low stride(229165 call -(229161 call . dense c"size") 1)) IT
      (229171 'end of statement')
    }
    (229187 call assert(229184 call == high(229183 call(229175 call . whole c"orderToIndex")(229179 call . dense c"last"))))
    if(229198 call _cond_test(229191 call < stride 0))
    {
      { scopeless
        (229195 call <=> low high)
      }
    }
    (229250 call assert(229206 call <= low high) "unDensify(dense=" dense ", whole=" whole "): got low (" low ") larger than high (" high ")")
    (229259 return(229257 call chpl_by(229254 call chpl_build_bounded_range low high) stride))
  }
  { scopeless type
    (229025 call range IT B 1)
  }
  function unDensify[229279](arg dense[229276] :
  (229275 call range ?[260](boundedType = unknown B[229269])(stridable = unknown S[229272])), arg whole[229289] :
  (229288 call range unknown IT[229282] ?[260](stridable = 0))) : _unknown[51]
  {
    if(229327 call _cond_test(229304 call !(229303 call(229299 call . whole c"hasLowBound"))))
    {
      { scopeless
        (229325 call compilerError "unDensify(): the 'whole' argument, when not stridable, must have a low bound")
      }
    }
    (229348 return(229346 call _cast(229345 call range IT B S)(229338 call + dense(229335 call . whole c"low"))))
  }
  { scopeless type
    (229297 call range IT B S)
  }
  function _undensEnsureBounded[229357](arg arg[229355]:_any[178](?)) : _unknown[51]
  {
    if(229387 call _cond_test(229363 call !(229362 call isBoundedRange arg)))
    {
      { scopeless
        (229385 call compilerError "unDensify() currently requires that the densified ranges be bounded" 2)
      }
    }
  }
  function _undensCheck[229399](param arg cond[229397]:_any[178](?), arg argtypes[229401]:_any[178](?), param arg errlevel[229404] =
  2) : _unknown[51]
  {
    if(229438 call _cond_test(229408 call ! cond))
    {
      { scopeless
        (229436 call compilerError "unDensify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges, but is invoked on "(229433 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function setupTargetLocalesArray[229450](ref arg targetLocDom[229448]:_any[178](?), arg targetLocArr[229452]:_any[178](?), arg specifiedLocArr[229454]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[229460] "param"(229457 call . targetLocDom c"rank")
      (229463 'end of statement')
    }
    if(229702 call _cond_test(229476 call &&(229467 call != rank 1)(229474 call ==(229470 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229486] "const"(229485 call _factor rank(229482 call . specifiedLocArr c"size"))
        (229489 'end of statement')
      }
      { scopeless
        unknown ranges[229495](229493 call * rank range)
        (229498 'end of statement')
      }
      {
        unknown i[229522] 0
        unknown tmp[229523] "maybe param" "temp"
        (229535 'move' tmp[229523](229533 call chpl_compute_low_param_loop_bound 0(229502 call - rank 1)))
        unknown tmp[229524] "maybe param" "temp"
        (229545 'move' tmp[229524](229543 call chpl_compute_high_param_loop_bound 0(229540 call - rank 1)))
        unknown tmp[229525] "maybe param" "temp"
        (229548 'move' tmp[229525] 1)
        ParamForLoop[229550]
        { i[229522] tmp[229523] tmp[229524] tmp[229525]
          { scopeless
            (229519 call =(229509 call ranges i)(229517 call #(229511 call chpl_build_low_bounded_range 0)(229516 call factors i)))
          }
        }
        label _unused_continueLabel[229527]
        label _breakLabel[229526]
      }
      (229565 call = targetLocDom(229563 call chpl__buildDomainExpr(229561 'expand_tuple' ranges)))
      (229574 call = targetLocArr(229573 call reshape specifiedLocArr targetLocDom))
    }
    {
      if(229605 call _cond_test(229582 call !=(229578 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229603 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      { scopeless
        unknown ranges[229615](229613 call * rank range)
        (229618 'end of statement')
      }
      {
        unknown i[229651] 0
        unknown tmp[229652] "maybe param" "temp"
        (229664 'move' tmp[229652](229662 call chpl_compute_low_param_loop_bound 0(229622 call - rank 1)))
        unknown tmp[229653] "maybe param" "temp"
        (229674 'move' tmp[229653](229672 call chpl_compute_high_param_loop_bound 0(229669 call - rank 1)))
        unknown tmp[229654] "maybe param" "temp"
        (229677 'move' tmp[229654] 1)
        ParamForLoop[229679]
        { i[229651] tmp[229652] tmp[229653] tmp[229654]
          { scopeless
            (229648 call =(229629 call ranges i)(229646 call #(229631 call chpl_build_low_bounded_range 0)(229643 call .(229642 call(229637 call .(229634 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229656]
        label _breakLabel[229655]
      }
      (229694 call = targetLocDom(229692 call chpl__buildDomainExpr(229690 'expand_tuple' ranges)))
      (229699 call = targetLocArr specifiedLocArr)
    }
  }
  function setupTargetLocRanges[229712](param arg rank[229710]:_any[178](?), arg specifiedLocArr[229714]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown ranges[229720](229718 call * rank range)
      (229723 'end of statement')
    }
    if(229898 call _cond_test(229736 call &&(229727 call != rank 1)(229734 call ==(229730 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229746] "const"(229745 call _factor rank(229742 call . specifiedLocArr c"size"))
        (229749 'end of statement')
      }
      {
        unknown i[229774] 0
        unknown tmp[229775] "maybe param" "temp"
        (229787 'move' tmp[229775](229785 call chpl_compute_low_param_loop_bound 0(229754 call - rank 1)))
        unknown tmp[229776] "maybe param" "temp"
        (229797 'move' tmp[229776](229795 call chpl_compute_high_param_loop_bound 0(229792 call - rank 1)))
        unknown tmp[229777] "maybe param" "temp"
        (229800 'move' tmp[229777] 1)
        ParamForLoop[229802]
        { i[229774] tmp[229775] tmp[229776] tmp[229777]
          { scopeless
            (229771 call =(229761 call ranges i)(229769 call #(229763 call chpl_build_low_bounded_range 0)(229768 call factors i)))
          }
        }
        label _unused_continueLabel[229779]
        label _breakLabel[229778]
      }
    }
    {
      if(229823 call _cond_test(229816 call !=(229812 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229821 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      {
        unknown i[229861] 0
        unknown tmp[229862] "maybe param" "temp"
        (229874 'move' tmp[229862](229872 call chpl_compute_low_param_loop_bound 0(229832 call - rank 1)))
        unknown tmp[229863] "maybe param" "temp"
        (229884 'move' tmp[229863](229882 call chpl_compute_high_param_loop_bound 0(229879 call - rank 1)))
        unknown tmp[229864] "maybe param" "temp"
        (229887 'move' tmp[229864] 1)
        ParamForLoop[229889]
        { i[229861] tmp[229862] tmp[229863] tmp[229864]
          { scopeless
            (229858 call =(229839 call ranges i)(229856 call #(229841 call chpl_build_low_bounded_range 0)(229853 call .(229852 call(229847 call .(229844 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229866]
        label _breakLabel[229865]
      }
    }
    (229903 return ranges)
  }
  function createWholeDomainForInds[229911](param arg rank[229909]:_any[178](?), arg idxType[229913]:_any[178](?), param arg stridable[229915]:_any[178](?), arg inds[229917]:_any[178](?)) : _unknown[51]
  {
    if(229950 call _cond_test(229922 call isDomain inds))
    {
      (229924 return inds)
    }
    {
      { scopeless
        unknown result[229934](229932 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (229937 'end of statement')
      }
      (229945 call(229940 call . result c"setIndices") inds)
      (229948 return result)
    }
  }
  function bulkCommComputeActiveDims[229961](arg LeftDims[229959]:_any[178](?), arg RightDims[229963]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown LeftRank[229969] "param"(229966 call . LeftDims c"size")
      (229972 'end of statement')
    }
    { scopeless
      unknown RightRank[229978] "param"(229975 call . RightDims c"size")
      (229981 'end of statement')
    }
    { scopeless
      unknown minRank[229987] "param"(229986 call min LeftRank RightRank)
      (229990 'end of statement')
    }
    { scopeless
      unknown inferredRank[229992] 0
      (229995 'end of statement')
    }
    { scopeless
      unknown LeftActives[229996](230001 call * minRank int[13])
      unknown RightActives[230003](230007 'typeof' LeftActives)
      (230008 'end of statement')
    }
    { scopeless
      unknown li[230010] 0
      unknown ri[230014] 0
      (230017 'end of statement')
    }
    function advance[230020]() : _unknown[51]
    {
      {
        unknown tmp[230055] "temp"
        (230121 'move' tmp[230055](230095 call _cond_test(230097 call &&(230099 call ==(230101 call .(230103 call LeftDims li) c"size") 1)(230108 call !=(230110 call .(230112 call LeftDims li) c"size")(230116 call .(230118 call RightDims ri) c"size")))))
        WhileDo[230060]
        {
          { scopeless
            (230052 call += li 1)
          }
          label _continueLabel[230058]
          (230090 'move' tmp[230055](230064 call _cond_test(230066 call &&(230068 call ==(230070 call .(230072 call LeftDims li) c"size") 1)(230077 call !=(230079 call .(230081 call LeftDims li) c"size")(230085 call .(230087 call RightDims ri) c"size")))))
          tmp[230055]
        }
        label _breakLabel[230059]
      }
      {
        unknown tmp[230158] "temp"
        (230224 'move' tmp[230158](230198 call _cond_test(230200 call &&(230202 call ==(230204 call .(230206 call RightDims ri) c"size") 1)(230211 call !=(230213 call .(230215 call RightDims ri) c"size")(230219 call .(230221 call LeftDims li) c"size")))))
        WhileDo[230163]
        {
          { scopeless
            (230155 call += ri 1)
          }
          label _continueLabel[230161]
          (230193 'move' tmp[230158](230167 call _cond_test(230169 call &&(230171 call ==(230173 call .(230175 call RightDims ri) c"size") 1)(230180 call !=(230182 call .(230184 call RightDims ri) c"size")(230188 call .(230190 call LeftDims li) c"size")))))
          tmp[230158]
        }
        label _breakLabel[230162]
      }
      (230245 call assert(230242 call ==(230232 call .(230231 call LeftDims li) c"size")(230239 call .(230238 call RightDims ri) c"size")))
    }
    {
      unknown tmp[230295] "temp"
      DoWhile[230316]
      {
        {
          (230251 call advance)
          (230259 call =(230257 call LeftActives inferredRank) li)
          (230267 call =(230265 call RightActives inferredRank) ri)
          (230272 call += inferredRank 1)
          (230277 call += li 1)
          (230282 call += ri 1)
          label _continueLabel[230298]
          (230314 'move' tmp[230295](230303 call _cond_test(230305 call &&(230307 call < li LeftRank)(230311 call < ri RightRank))))
        }
        tmp[230295]
      }
      label _breakLabel[230299]
    }
    (230326 return(230324 call _build_tuple LeftActives RightActives inferredRank))
  }
  function bulkCommTranslateDomain[230336](arg srcSlice[230333] :
  _domain, arg srcDom[230339] :
  _domain, arg targetDom[230343] :
  _domain) : _unknown[51]
  {
    if(230377 call _cond_test(230354 call !=(230347 call . srcSlice c"rank")(230351 call . srcDom c"rank")))
    {
      { scopeless
        (230375 call compilerError "bulkCommTranslateDomain: source slice and source domain must have identical rank")
      }
    }
    { scopeless
      const tmp[230405] "const" "temp"(230404 call bulkCommComputeActiveDims(230396 call(230392 call . srcDom c"dims"))(230403 call(230399 call . targetDom c"dims")))
      (230415 call _check_tuple_var_decl tmp[230405] 3)
      const SrcActives[230383] "const"(230406 call tmp[230405] 0)
      const TargetActives[230385] "const"(230409 call tmp[230405] 1)
      const inferredRank[230387] "const"(230412 call tmp[230405] 2)
      (230420 'end of statement')
    }
    { scopeless
      unknown needsStridable[230431] "param"(230429 call ||(230422 call . targetDom c"stridable")(230426 call . srcSlice c"stridable"))
      (230434 'end of statement')
    }
    { scopeless
      unknown rngs[230456](230455 call(230451 call . targetDom c"dims"))(230448 call *(230436 call . targetDom c"rank")(230447 call range(230441 call . targetDom c"idxType")(stridable = needsStridable)))
      (230459 'end of statement')
    }
    {
      unknown _indexOfInterest[230524] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[230525] "expr temp" "temp"
      (230534 'move' _iterator[230525](230532 call _getIterator(230542 call chpl_direct_range_iter 0(230539 call - inferredRank 1) 1)))
      Defer
      {
        {
          (230558 call _freeIterator _iterator[230525])
        }
      }
      { scopeless type
        (230547 'move' _indexOfInterest[230524](230544 call iteratorIndex _iterator[230525]))
      }
      ForLoop[230526]
      {
        unknown i[230551] "index var" "insert auto destroy"
        (230553 'move' i[230551] _indexOfInterest[230524])
        {
          { scopeless
            const SD[230472] "const"(230471 call SrcActives i)
            (230475 'end of statement')
          }
          { scopeless
            const TD[230481] "const"(230480 call TargetActives i)
            (230484 'end of statement')
          }
          { scopeless
            const dense[230502] "const"(230501 call densify(230492 call(230487 call . srcSlice c"dim") SD)(230500 call(230495 call . srcDom c"dim") SD))
            (230505 'end of statement')
          }
          (230521 call =(230509 call rngs TD)(230520 call unDensify dense(230519 call(230514 call . targetDom c"dim") TD)))
        }
        label _continueLabel[230529]
        _indexOfInterest[230524]
        _iterator[230525]
      }
      label _breakLabel[230530]
    }
    (230570 return(230568 call chpl__buildDomainExpr(230566 'expand_tuple' rngs)))
  }
  function bulkCommConvertCoordinate[230578](arg ind[230576]:_any[178](?), arg bView[230581] :
  _domain, arg aView[230585] :
  _domain) : _unknown[51]
  {
    if(230651 call _cond_test(230596 call !=(230589 call . bView c"rank")(230593 call . aView c"rank")))
    {
      (230648 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - domain ranks must match: bView.rank = "(230622 call _cast string[26](230618 call . bView c"rank")) ", aView.rank = "(230646 call _cast string[26](230642 call . aView c"rank")))
    }
    { scopeless
      unknown rank[230660] "param"(230657 call . aView c"rank")
      (230663 'end of statement')
    }
    { scopeless
      const b[230668] "const"(230667 call chpl__tuplify ind)
      (230671 'end of statement')
    }
    if(230762 call _cond_test(230677 call !=(230673 call . b c"size") rank))
    {
      { scopeless
        unknown plural[230707] "param"(230704 IfExpr (230684 call ==(230680 call . b c"size") 1) then
        { scopeless
          " element"
        } else
        { scopeless
          " elements"
        } )
        (230710 'end of statement')
      }
      (230760 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - expecting index with "(230733 call _cast string[26] rank) " elements, got "(230757 call _cast string[26](230753 call . b c"size")) plural)
    }
    unknown idxType[230770] "type variable"(230767 call . aView c"idxType")
    { scopeless
      const AD[230779] "const"(230778 call(230774 call . aView c"dims"))
      (230782 'end of statement')
    }
    { scopeless
      const BD[230789] "const"(230788 call(230784 call . bView c"dims"))
      (230792 'end of statement')
    }
    { scopeless
      unknown result[230797](230795 call * rank idxType)
      (230800 'end of statement')
    }
    {
      unknown i[230867] 0
      unknown tmp[230868] "maybe param" "temp"
      (230880 'move' tmp[230868](230878 call chpl_compute_low_param_loop_bound 0(230804 call - rank 1)))
      unknown tmp[230869] "maybe param" "temp"
      (230890 'move' tmp[230869](230888 call chpl_compute_high_param_loop_bound 0(230885 call - rank 1)))
      unknown tmp[230870] "maybe param" "temp"
      (230893 'move' tmp[230870] 1)
      ParamForLoop[230895]
      { i[230867] tmp[230868] tmp[230869] tmp[230870]
        {
          { scopeless
            const ar[230812] "const"(230811 call AD i)
            const br[230819] "const"(230818 call BD i)
            (230822 'end of statement')
          }
          if(230839 call _cond_test boundsChecking)
          {
            { scopeless
              (230837 call assert(230835 call(230827 call . br c"contains")(230833 call b i)))
            }
          }
          (230864 call =(230847 call result i)(230863 call(230849 call . ar c"orderToIndex")(230861 call(230853 call . br c"indexOrder")(230859 call b i))))
        }
      }
      label _unused_continueLabel[230872]
      label _breakLabel[230871]
    }
    (230905 return result)
  }
}