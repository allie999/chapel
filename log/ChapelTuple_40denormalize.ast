AST dump for ChapelTuple after pass denormalize.
Module use list: ChapelStandard DSIUtil 

{
  function chpl__init_ChapelTuple[415948](const in arg _ln[2476602]:int(64)[13], in arg _fn[2476604]:int(32)[95]) : void[4] "fast on" "insert line file info" "local fn" "module init" "resolved"
  {
    if chpl__init_ChapelTuple_p[2450580]
    {
      goto _exit_chpl__init_ChapelTuple[2450617] _exit_chpl__init_ChapelTuple[2450617]
    }
    ref refIndentLevel[2450603]:int(32)[95] "temp"
    (2450601 call printModuleInit[20426] c"%*s\n" c"ChapelTuple" 11 _ln[2476602] _fn[2476604])
    (2450607 'move' refIndentLevel[2450603](2450606 'addr of' moduleInitLevel[20416]))
    (2450610 '+=' refIndentLevel[2450603] 1)
    (2450586 'move' chpl__init_ChapelTuple_p[2450580] 1)
    {
      (2449644 call chpl__init_DSIUtil[416110] _ln[2476602] _fn[2476604])
    }
    (2450613 '-=' refIndentLevel[2450603] 1)
    label _exit_chpl__init_ChapelTuple[2450617]
    (508974 return _void[55])
  }
  function 57*int(64)[1210485]._local_this[2388884](ref arg this[2388886]:57*int(64)[1210485], const in arg i[2388888]:int(64)[13], const in arg _ln[2484490]:int(64)[13], in arg _fn[2484492]:int(32)[95]) ref : _ref(int(64))[936572] "instantiated generic" "invisible fn" "local fn" "method" "no doc" "reference to const when const this" "resolved" "star tuple accessor"
  {
    const-val local__str_literal_779[2388891]:string[26] "temp"
    (2388893 'move' local__str_literal_779[2388891] "tuple access out of bounds: ")
    val tmp[2388903]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if(2388900 '<' i[2388888] 0)
    {
      (2388907 'move' tmp[2388903] 1)
    }
    {
      (2388918 'move' tmp[2388903](2388915 '>' i[2388888] 56))
    }
    if tmp[2388903]
    {
      (2388925 call _local_halt[2391535] local__str_literal_779[2388891] i[2388888] _ln[2484490] _fn[2484492])
    }
    ref call_tmp[2388929]:int(64)[13] "dead after last mention" "maybe param" "temp"
    (2388931 'move' call_tmp[2388929](2388933 'get svec member' this[2388886] i[2388888]))
    (2388936 return call_tmp[2388929])
  }
  function 57*int(64)[1210485].this[1211603](ref arg this[1211609]:57*int(64)[1210485], const in arg i[1211611]:int(64)[13], const in arg _ln[2479062]:int(64)[13], in arg _fn[2479064]:int(32)[95]) ref : _ref(int(64))[936572] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "star tuple accessor"
  {
    const-val local__str_literal_779[2378934]:string[26] "temp"
    (2378935 'move' "tuple access out of bounds: " "tuple access out of bounds: ")
    val tmp[1211680]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if(2116096 '<' i[1211611] 0)
    {
      (1211698 'move' tmp[1211680] 1)
    }
    {
      (1211735 'move' tmp[1211680](2124396 '>' i[1211611] 56))
    }
    if tmp[1211680]
    {
      (1211751 call halt[1212252] "tuple access out of bounds: " i[1211611] _ln[2479062] _fn[2479064])
    }
    ref call_tmp[1211756]:int(64)[13] "dead after last mention" "maybe param" "temp"
    (1211758 'move' call_tmp[1211756](1211760 'get svec member' this[1211609] i[1211611]))
    (1211767 return call_tmp[1211756])
  }
  function 1*range(int(64),bounded,false)[1244696].this[1368641](wide-ref arg this[1368647]:1*range(int(64),bounded,false)[1244696], const in arg i[1368649]:int(64)[13], const in arg _ln[2479068]:int(64)[13], in arg _fn[2479070]:int(32)[95]) ref : __wide__ref_range_int64_t_bounded_F[2382449] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "fn synchronization free" "star tuple accessor"
  {
    const-val local__str_literal_779[2379526]:string[26] "temp"
    (2379527 'move' "tuple access out of bounds: " "tuple access out of bounds: ")
    val tmp[1368718]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if(2116146 '<' i[1368649] 0)
    {
      (1368736 'move' tmp[1368718] 1)
    }
    {
      (1368773 'move' tmp[1368718](2124726 '>' i[1368649] 0))
    }
    if tmp[1368718]
    {
      (1368789 call halt[1212252] "tuple access out of bounds: " i[1368649] _ln[2479068] _fn[2479070])
    }
    wide-ref call_tmp[1368794]:range(int(64),bounded,false)[1026814] "dead after last mention" "maybe param" "temp"
    (1368796 'move' call_tmp[1368794](1368798 'get svec member' this[1368647] i[1368649]))
    (1368805 return call_tmp[1368794])
  }
  function 1*int(64)[1256525].this[1421336](ref arg this[1421342]:1*int(64)[1256525], const in arg i[1421344]:int(64)[13], const in arg _ln[2479074]:int(64)[13], in arg _fn[2479076]:int(32)[95]) ref : _ref(int(64))[936572] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "fn synchronization free" "star tuple accessor"
  {
    const-val local__str_literal_779[2379828]:string[26] "temp"
    (2379829 'move' "tuple access out of bounds: " "tuple access out of bounds: ")
    val tmp[1421413]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if(2116166 '<' i[1421344] 0)
    {
      (1421431 'move' tmp[1421413] 1)
    }
    {
      (1421468 'move' tmp[1421413](2124831 '>' i[1421344] 0))
    }
    if tmp[1421413]
    {
      (1421484 call halt[1212252] "tuple access out of bounds: " i[1421344] _ln[2479074] _fn[2479076])
    }
    ref call_tmp[1421489]:int(64)[13] "dead after last mention" "maybe param" "temp"
    (1421491 'move' call_tmp[1421489](1421493 'get svec member' this[1421342] i[1421344]))
    (1421500 return call_tmp[1421489])
  }
  function 1*range(int(64),bounded,false)[1244696].indices[1771631](const  wide-ref arg this[1771637]:1*range(int(64),bounded,false)[1244696], ref arg _retArg[1841455]:range(int(64),bounded,false)[1026814], const in arg _ln[2491948]:int(64)[13], in arg _fn[2491950]:int(32)[95]) : void[4] "fn returns via _retArg" "instantiated generic" "invisible fn" "method" "no parens" "resolved"
  {
    const-val call_tmp[1771663]:range(int(64),bounded,false)[1026814] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[1831817]:range(int(64),bounded,false)[1026814] "temp"
    (1771668 call chpl_build_bounded_range[455137] 0 0 ret_tmp[1831817] _ln[2491948] _fn[2491950])
    (1831820 'move' call_tmp[1771663] ret_tmp[1831817])
    (1841457 '=' _retArg[1841455] call_tmp[1771663])
    (1841459 return _void[55])
  }
  type (c_ptr(uint(8)),int(64))[955208] val x0[955204]:c_ptr(uint(8))[937423] val x1[955206]:int(64)[13]
  type (syserr,int(32),int(32))[964620] val x0[964614]:syserr[223584] val x1[964616]:int(32)[95] val x2[964618]:int(32)[95]
  type 6*string[985051] const-ref x0[985039]:string[26] const-ref x1[985041]:string[26] const-ref x2[985043]:string[26] const-ref x3[985045]:string[26] const-ref x4[985047]:string[26] const-ref x5[985049]:string[26]
  type 6*string[985217] val x0[985205]:string[26] val x1[985207]:string[26] val x2[985209]:string[26] val x3[985211]:string[26] val x4[985213]:string[26] val x5[985215]:string[26]
  type 2*int(64)[1040056] val x0[1040052]:int(64)[13] val x1[1040054]:int(64)[13]
  type 1*byteIndex[1057081] wide-ref x0[1057079]:byteIndex[28170]
  type (range(int(64),bounded,false),int(64))[1084924] val x0[1084920]:range(int(64),bounded,false)[1026814] val x1[1084922]:int(64)[13]
  type (byteIndex,int(64))[1121233] const-ref x0[1121229]:byteIndex[28170] val x1[1121231]:int(64)[13]
  type (int(32),byteIndex,int(64))[1122142] val x0[1122136]:int(32)[95] const-ref x1[1122138]:byteIndex[28170] val x2[1122140]:int(64)[13]
  type (string,codepointIndex,string)[1158555] wide-ref x0[1158549]:string[26] wide-ref x1[1158551]:codepointIndex[28274] wide-ref x2[1158553]:string[26]
  type (string,codepointIndex,string,int(64))[1176520] wide-ref x0[1176512]:string[26] wide-ref x1[1176514]:codepointIndex[28274] wide-ref x2[1176516]:string[26] val x3[1176518]:int(64)[13]
  type 57*int(64)[1210485] val x0[1210371]:int(64)[13] val x1[1210373]:int(64)[13] val x2[1210375]:int(64)[13] val x3[1210377]:int(64)[13] val x4[1210379]:int(64)[13] val x5[1210381]:int(64)[13] val x6[1210383]:int(64)[13] val x7[1210385]:int(64)[13] val x8[1210387]:int(64)[13] val x9[1210389]:int(64)[13] val x10[1210391]:int(64)[13] val x11[1210393]:int(64)[13] val x12[1210395]:int(64)[13] val x13[1210397]:int(64)[13] val x14[1210399]:int(64)[13] val x15[1210401]:int(64)[13] val x16[1210403]:int(64)[13] val x17[1210405]:int(64)[13] val x18[1210407]:int(64)[13] val x19[1210409]:int(64)[13] val x20[1210411]:int(64)[13] val x21[1210413]:int(64)[13] val x22[1210415]:int(64)[13] val x23[1210417]:int(64)[13] val x24[1210419]:int(64)[13] val x25[1210421]:int(64)[13] val x26[1210423]:int(64)[13] val x27[1210425]:int(64)[13] val x28[1210427]:int(64)[13] val x29[1210429]:int(64)[13] val x30[1210431]:int(64)[13] val x31[1210433]:int(64)[13] val x32[1210435]:int(64)[13] val x33[1210437]:int(64)[13] val x34[1210439]:int(64)[13] val x35[1210441]:int(64)[13] val x36[1210443]:int(64)[13] val x37[1210445]:int(64)[13] val x38[1210447]:int(64)[13] val x39[1210449]:int(64)[13] val x40[1210451]:int(64)[13] val x41[1210453]:int(64)[13] val x42[1210455]:int(64)[13] val x43[1210457]:int(64)[13] val x44[1210459]:int(64)[13] val x45[1210461]:int(64)[13] val x46[1210463]:int(64)[13] val x47[1210465]:int(64)[13] val x48[1210467]:int(64)[13] val x49[1210469]:int(64)[13] val x50[1210471]:int(64)[13] val x51[1210473]:int(64)[13] val x52[1210475]:int(64)[13] val x53[1210477]:int(64)[13] val x54[1210479]:int(64)[13] val x55[1210481]:int(64)[13] val x56[1210483]:int(64)[13]
  type 1*range(int(64),bounded,false)[1244696] val x0[1244694]:range(int(64),bounded,false)[1026814]
  type 1*int(64)[1256525] val x0[1256523]:int(64)[13]
  type (bool,int(64))[1265132] val x0[1265128]:bool[10] val x1[1265130]:int(64)[13]
  type ([domain(1,int(64),false)] real(64),ioNewline)[1392594] val x0[1392590]:[domain(1,int(64),false)] real(64)[1365840] wide-ref x1[1392592]:ioNewline[238701]
  type (int(64),ioNewline)[1433256] val x0[1433252]:int(64)[13] wide-ref x1[1433254]:ioNewline[238701]
  type (BaseArr,unmanaged BaseDom?)[1444340] val x0[1444336]:__wide_BaseArr[2381116] val x1[1444338]:__wide_BaseDom[2381109]
  type (unmanaged BaseDom?,unmanaged BaseDist?)[1445134] val x0[1445130]:__wide_BaseDom[2381109] val x1[1445132]:__wide_BaseDist[2381102]
}