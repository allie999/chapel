AST dump for ChapelSyncvar after pass buildDefaultFunctions.
Module use list: ChapelStandard AlignedTSupport MemConsistency SyncVarRuntimeSupport 

{
  function chpl__init_ChapelSyncvar[415995]() : void[4] "insert line file info" "module init"
  {
    (541546 'init var' useNativeSyncVar[84492] 1)
    (84495 'end of statement')
    (513175 return _void[55])
  }
  function isSupported[84309](arg t[84307]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512709] "RVV" "param" "temp"
    unknown tmp[422066] "maybe param" "temp"
    unknown tmp[422087] "maybe param" "temp"
    unknown tmp[422108] "maybe param" "temp"
    unknown tmp[422129] "maybe param" "temp"
    unknown tmp[422150] "maybe param" "temp"
    unknown tmp[422171] "maybe param" "temp"
    unknown tmp[422192] "maybe param" "temp"
    unknown tmp[422213] "maybe param" "temp"
    (422224 'move' tmp[422213](84314 call isNothingType t[84307]))
    unknown call_tmp[629933] "expr temp" "maybe param" "maybe type" "temp"
    (629936 'move' call_tmp[629933](422226 call _cond_invalid tmp[422213]))
    if call_tmp[629933]
    {
      (422229 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560561] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560562] "maybe param" "temp"
    unknown call_tmp[629938] "expr temp" "maybe param" "maybe type" "temp"
    (629941 'move' call_tmp[629938](422214 call isTrue tmp[422213]))
    (560567 'move' tmp[560562](560565 call _cond_test call_tmp[629938]))
    if tmp[560562]
    {
      (560572 'move' tmp[560561](560569 '_paramFoldLogical' tmp[560562] 1))
    }
    {
      unknown tmp[560574] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629943] "expr temp" "maybe param" "maybe type" "temp"
      (629946 'move' call_tmp[629943](84318 call isBoolType t[84307]))
      (560576 'move' tmp[560574](422218 call isTrue call_tmp[629943]))
      (560581 'move' tmp[560561](560578 '_paramFoldLogical' tmp[560562] tmp[560574]))
    }
    (422203 'move' tmp[422192] tmp[560561])
    unknown call_tmp[629948] "expr temp" "maybe param" "maybe type" "temp"
    (629951 'move' call_tmp[629948](422205 call _cond_invalid tmp[422192]))
    if call_tmp[629948]
    {
      (422208 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560588] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560589] "maybe param" "temp"
    unknown call_tmp[629953] "expr temp" "maybe param" "maybe type" "temp"
    (629956 'move' call_tmp[629953](422193 call isTrue tmp[422192]))
    (560594 'move' tmp[560589](560592 call _cond_test call_tmp[629953]))
    if tmp[560589]
    {
      (560599 'move' tmp[560588](560596 '_paramFoldLogical' tmp[560589] 1))
    }
    {
      unknown tmp[560601] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629958] "expr temp" "maybe param" "maybe type" "temp"
      (629961 'move' call_tmp[629958](84324 call isIntegralType t[84307]))
      (560603 'move' tmp[560601](422197 call isTrue call_tmp[629958]))
      (560608 'move' tmp[560588](560605 '_paramFoldLogical' tmp[560589] tmp[560601]))
    }
    (422182 'move' tmp[422171] tmp[560588])
    unknown call_tmp[629963] "expr temp" "maybe param" "maybe type" "temp"
    (629966 'move' call_tmp[629963](422184 call _cond_invalid tmp[422171]))
    if call_tmp[629963]
    {
      (422187 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560615] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560616] "maybe param" "temp"
    unknown call_tmp[629968] "expr temp" "maybe param" "maybe type" "temp"
    (629971 'move' call_tmp[629968](422172 call isTrue tmp[422171]))
    (560621 'move' tmp[560616](560619 call _cond_test call_tmp[629968]))
    if tmp[560616]
    {
      (560626 'move' tmp[560615](560623 '_paramFoldLogical' tmp[560616] 1))
    }
    {
      unknown tmp[560628] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629973] "expr temp" "maybe param" "maybe type" "temp"
      (629976 'move' call_tmp[629973](84330 call isRealType t[84307]))
      (560630 'move' tmp[560628](422176 call isTrue call_tmp[629973]))
      (560635 'move' tmp[560615](560632 '_paramFoldLogical' tmp[560616] tmp[560628]))
    }
    (422161 'move' tmp[422150] tmp[560615])
    unknown call_tmp[629978] "expr temp" "maybe param" "maybe type" "temp"
    (629981 'move' call_tmp[629978](422163 call _cond_invalid tmp[422150]))
    if call_tmp[629978]
    {
      (422166 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560642] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560643] "maybe param" "temp"
    unknown call_tmp[629983] "expr temp" "maybe param" "maybe type" "temp"
    (629986 'move' call_tmp[629983](422151 call isTrue tmp[422150]))
    (560648 'move' tmp[560643](560646 call _cond_test call_tmp[629983]))
    if tmp[560643]
    {
      (560653 'move' tmp[560642](560650 '_paramFoldLogical' tmp[560643] 1))
    }
    {
      unknown tmp[560655] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629988] "expr temp" "maybe param" "maybe type" "temp"
      (629991 'move' call_tmp[629988](84336 call isImagType t[84307]))
      (560657 'move' tmp[560655](422155 call isTrue call_tmp[629988]))
      (560662 'move' tmp[560642](560659 '_paramFoldLogical' tmp[560643] tmp[560655]))
    }
    (422140 'move' tmp[422129] tmp[560642])
    unknown call_tmp[629993] "expr temp" "maybe param" "maybe type" "temp"
    (629996 'move' call_tmp[629993](422142 call _cond_invalid tmp[422129]))
    if call_tmp[629993]
    {
      (422145 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560669] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560670] "maybe param" "temp"
    unknown call_tmp[629998] "expr temp" "maybe param" "maybe type" "temp"
    (630001 'move' call_tmp[629998](422130 call isTrue tmp[422129]))
    (560675 'move' tmp[560670](560673 call _cond_test call_tmp[629998]))
    if tmp[560670]
    {
      (560680 'move' tmp[560669](560677 '_paramFoldLogical' tmp[560670] 1))
    }
    {
      unknown tmp[560682] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630003] "expr temp" "maybe param" "maybe type" "temp"
      (630006 'move' call_tmp[630003](84342 call isEnumType t[84307]))
      (560684 'move' tmp[560682](422134 call isTrue call_tmp[630003]))
      (560689 'move' tmp[560669](560686 '_paramFoldLogical' tmp[560670] tmp[560682]))
    }
    (422119 'move' tmp[422108] tmp[560669])
    unknown call_tmp[630008] "expr temp" "maybe param" "maybe type" "temp"
    (630011 'move' call_tmp[630008](422121 call _cond_invalid tmp[422108]))
    if call_tmp[630008]
    {
      (422124 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560696] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560697] "maybe param" "temp"
    unknown call_tmp[630013] "expr temp" "maybe param" "maybe type" "temp"
    (630016 'move' call_tmp[630013](422109 call isTrue tmp[422108]))
    (560702 'move' tmp[560697](560700 call _cond_test call_tmp[630013]))
    if tmp[560697]
    {
      (560707 'move' tmp[560696](560704 '_paramFoldLogical' tmp[560697] 1))
    }
    {
      unknown tmp[560709] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630018] "expr temp" "maybe param" "maybe type" "temp"
      (630021 'move' call_tmp[630018](84348 call isClassType t[84307]))
      (560711 'move' tmp[560709](422113 call isTrue call_tmp[630018]))
      (560716 'move' tmp[560696](560713 '_paramFoldLogical' tmp[560697] tmp[560709]))
    }
    (422098 'move' tmp[422087] tmp[560696])
    unknown call_tmp[630023] "expr temp" "maybe param" "maybe type" "temp"
    (630026 'move' call_tmp[630023](422100 call _cond_invalid tmp[422087]))
    if call_tmp[630023]
    {
      (422103 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560723] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560724] "maybe param" "temp"
    unknown call_tmp[630028] "expr temp" "maybe param" "maybe type" "temp"
    (630031 'move' call_tmp[630028](422088 call isTrue tmp[422087]))
    (560729 'move' tmp[560724](560727 call _cond_test call_tmp[630028]))
    if tmp[560724]
    {
      (560734 'move' tmp[560723](560731 '_paramFoldLogical' tmp[560724] 1))
    }
    {
      unknown tmp[560736] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630033] "expr temp" "maybe param" "maybe type" "temp"
      (630036 'move' call_tmp[630033](84354 call isStringType t[84307]))
      (560738 'move' tmp[560736](422092 call isTrue call_tmp[630033]))
      (560743 'move' tmp[560723](560740 '_paramFoldLogical' tmp[560724] tmp[560736]))
    }
    (422077 'move' tmp[422066] tmp[560723])
    unknown call_tmp[630038] "expr temp" "maybe param" "maybe type" "temp"
    (630041 'move' call_tmp[630038](422079 call _cond_invalid tmp[422066]))
    if call_tmp[630038]
    {
      (422082 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560750] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560751] "maybe param" "temp"
    unknown call_tmp[630043] "expr temp" "maybe param" "maybe type" "temp"
    (630046 'move' call_tmp[630043](422067 call isTrue tmp[422066]))
    (560756 'move' tmp[560751](560754 call _cond_test call_tmp[630043]))
    if tmp[560751]
    {
      (560761 'move' tmp[560750](560758 '_paramFoldLogical' tmp[560751] 1))
    }
    {
      unknown tmp[560763] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630048] "expr temp" "maybe param" "maybe type" "temp"
      (630051 'move' call_tmp[630048](84359 call == t[84307] chpl_taskID_t[163]))
      (560765 'move' tmp[560763](422071 call isTrue call_tmp[630048]))
      (560770 'move' tmp[560750](560767 '_paramFoldLogical' tmp[560751] tmp[560763]))
    }
    (512714 'move' ret[512709](512713 'deref' tmp[560750]))
    (512711 return ret[512709])
  }
  function ensureFEType[84372](arg t[84370]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[630053] "expr temp" "maybe param" "maybe type" "temp"
    (630056 'move' call_tmp[630053](84377 call isSupported t[84370]))
    unknown call_tmp[630058] "expr temp" "maybe param" "maybe type" "temp"
    (630061 'move' call_tmp[630058](84379 call == call_tmp[630053] 0))
    unknown call_tmp[630063] "expr temp" "maybe param" "maybe type" "temp"
    (630066 'move' call_tmp[630063](84423 call _cond_test call_tmp[630058]))
    if call_tmp[630063]
    {
      unknown call_tmp[630068] "expr temp" "maybe param" "maybe type" "temp"
      (630071 'move' call_tmp[630068](84402 call _cast string[26] t[84370]))
      (84421 call compilerError "sync/single types cannot contain type '" call_tmp[630068] "'")
    }
    unknown call_tmp[630073] "expr temp" "maybe param" "maybe type" "temp"
    (630076 'move' call_tmp[630073](84432 call isNonNilableClass t[84370]))
    unknown call_tmp[630078] "expr temp" "maybe param" "maybe type" "temp"
    (630081 'move' call_tmp[630078](84454 call _cond_test call_tmp[630073]))
    if call_tmp[630078]
    {
      (84452 call compilerError "sync/single types cannot contain non-nilable classes")
    }
    unknown call_tmp[630083] "expr temp" "maybe param" "maybe type" "temp"
    (630086 'move' call_tmp[630083](84462 call isGenericType t[84370]))
    unknown call_tmp[630088] "expr temp" "maybe param" "maybe type" "temp"
    (630091 'move' call_tmp[630088](84484 call _cond_test call_tmp[630083]))
    if call_tmp[630088]
    {
      (84482 call compilerError "sync/single types cannot contain generic types")
    }
    (512716 return _void[55])
  }
  unknown useNativeSyncVar[84492] "config" "no doc" "param"
  function getSyncClassType[84500](arg valType[84498]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512720] "RVV" "temp" "type variable"
    unknown tmp[422234] "maybe param" "temp"
    (422245 'move' tmp[422234] useNativeSyncVar[84492])
    unknown call_tmp[630093] "expr temp" "maybe param" "maybe type" "temp"
    (630096 'move' call_tmp[630093](422247 call _cond_invalid tmp[422234]))
    if call_tmp[630093]
    {
      (422250 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560777] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560778] "maybe param" "temp"
    unknown call_tmp[630098] "expr temp" "maybe param" "maybe type" "temp"
    (630101 'move' call_tmp[630098](422235 call isTrue tmp[422234]))
    (560783 'move' tmp[560778](560781 call _cond_test call_tmp[630098]))
    if tmp[560778]
    {
      unknown tmp[560785] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630103] "expr temp" "maybe param" "maybe type" "temp"
      (630106 'move' call_tmp[630103](84506 call supportsNativeSyncVar valType[84498]))
      (560787 'move' tmp[560785](422238 call isTrue call_tmp[630103]))
      (560792 'move' tmp[560777](560789 '_paramFoldLogical' tmp[560778] tmp[560785]))
    }
    {
      (560797 'move' tmp[560777](560794 '_paramFoldLogical' tmp[560778] 0))
    }
    unknown call_tmp[630108] "expr temp" "maybe param" "maybe type" "temp"
    (630111 'move' call_tmp[630108](84525 call _cond_test tmp[560777]))
    if call_tmp[630108]
    {
      unknown call_tmp[630113] "expr temp" "maybe param" "maybe type" "temp"
      (630116 'move' call_tmp[630113](84512 call unmanaged _qthreads_synccls[415446](?) valType[84498]))
      (512725 'move' ret[512720](512724 'deref' call_tmp[630113]))
      gotoReturn _end_getSyncClassType[512718] _end_getSyncClassType[512718]
    }
    {
      unknown call_tmp[630118] "expr temp" "maybe param" "maybe type" "temp"
      (630121 'move' call_tmp[630118](84520 call unmanaged _synccls[415449](?) valType[84498]))
      (512730 'move' ret[512720](512729 'deref' call_tmp[630118]))
      gotoReturn _end_getSyncClassType[512718] _end_getSyncClassType[512718]
    }
    label _end_getSyncClassType[512718]
    (512722 return ret[512720])
  }
  function chpl__readXX[84536](arg x[84534]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[512736] "RVV" "temp"
    (512741 'move' ret[512736](512740 'deref' x[84534]))
    (512738 return ret[512736])
  }
  function _syncvar[84947](?).init[84566](arg _mt[84951]:_MT[238], ref arg this[84949]:_syncvar[84947](?), arg valType[84564]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84571 call ensureFEType valType[84564])
    (476871 'end of statement')
    unknown tmp[459768] "temp" "type variable"
    (459770 'move' tmp[459768] valType[84564])
    (459772 'init field' this[84949] c"valType" tmp[459768])
    (476872 'end of statement')
    unknown call_tmp[630123] "expr temp" "maybe param" "maybe type" "temp"
    (630126 'move' call_tmp[630123](84594 call getSyncClassType valType[84564]))
    unknown call_tmp[630128] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630131 'move' call_tmp[630128](747825 'new' call_tmp[630123]))
    unknown call_tmp[630133] "expr temp" "maybe param" "maybe type" "temp"
    (630136 'move' call_tmp[630133](459787 '.v' this[84949] c"valType"))
    unknown call_tmp[630138] "maybe param" "maybe type" "temp"
    (630141 'move' call_tmp[630138](459779 call getSyncClassType call_tmp[630133]))
    unknown tmp[459776] "temp"
    (459781 'init var' tmp[459776] call_tmp[630128] call_tmp[630138])
    (459783 'init field' this[84949] c"wrapped" tmp[459776])
    (476873 'end of statement')
    unknown tmp[459792] "temp"
    (459795 'init var' tmp[459792] 1 bool[10])
    (459797 'init field' this[84949] c"isOwned" tmp[459792])
    (476874 'end of statement')
    (512743 return _void[55])
  }
  function _syncvar[84947](?).init[84608](arg _mt[84955]:_MT[238], ref arg this[84953]:_syncvar[84947](?), const arg other[84605]:_syncvar[84947](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[459801] "temp" "type variable"
    (459803 'move' tmp[459801](84615 call valType _mt[243] other[84605]))
    (459805 'init field' this[84953] c"valType" tmp[459801])
    (476875 'end of statement')
    unknown call_tmp[630147] "maybe param" "maybe type" "temp"
    (630150 'move' call_tmp[630147](84627 call wrapped _mt[243] other[84605]))
    unknown call_tmp[630152] "expr temp" "maybe param" "maybe type" "temp"
    (630155 'move' call_tmp[630152](459820 '.v' this[84953] c"valType"))
    unknown call_tmp[630157] "maybe param" "maybe type" "temp"
    (630160 'move' call_tmp[630157](459812 call getSyncClassType call_tmp[630152]))
    unknown tmp[459809] "temp"
    (459814 'init var' tmp[459809] call_tmp[630147] call_tmp[630157])
    (459816 'init field' this[84953] c"wrapped" tmp[459809])
    (476876 'end of statement')
    unknown tmp[459823] "temp"
    (459826 'init var' tmp[459823] 0 bool[10])
    (459828 'init field' this[84953] c"isOwned" tmp[459823])
    (476877 'end of statement')
    (512745 return _void[55])
  }
  function _syncvar[84947](?).init=[84651](arg _mt[84959]:_MT[238], ref arg this[84957]:_syncvar[84947](?), const arg other[84648]:_syncvar[84947](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630162] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630165 'move' call_tmp[630162](84660 'typeof' this[84957]))
    unknown call_tmp[630169] "expr temp" "maybe param" "maybe type" "temp"
    (630172 'move' call_tmp[630169](84661 call valType _mt[243] call_tmp[630162]))
    unknown call_tmp[630176] "expr temp" "maybe param" "maybe type" "temp"
    (630179 'move' call_tmp[630176](84655 call valType _mt[243] other[84648]))
    unknown call_tmp[630181] "expr temp" "maybe param" "maybe type" "temp"
    (630184 'move' call_tmp[630181](354263 'is_coercible' call_tmp[630169] call_tmp[630176]))
    unknown call_tmp[630186] "expr temp" "maybe param" "maybe type" "temp"
    (630189 'move' call_tmp[630186](84666 call == call_tmp[630181] 0))
    unknown call_tmp[630191] "expr temp" "maybe param" "maybe type" "temp"
    (630194 'move' call_tmp[630191](84796 call _cond_test call_tmp[630186]))
    if call_tmp[630191]
    {
      unknown call_tmp[630196] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630199 'move' call_tmp[630196](84670 'typeof' this[84957]))
      unknown call_tmp[630201] "expr temp" "maybe param" "maybe type" "temp"
      (630204 'move' call_tmp[630201](84672 call _cast string[26] call_tmp[630196]))
      unknown call_tmp[630206] "expr temp" "maybe param" "maybe type" "temp"
      (630209 'move' call_tmp[630206](84674 call + "'" call_tmp[630201]))
      unknown call_tmp[630211] "expr temp" "maybe param" "maybe type" "temp"
      (630214 'move' call_tmp[630211](84693 call + call_tmp[630206] "' from '"))
      unknown call_tmp[630216] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630219 'move' call_tmp[630216](84696 'typeof' other[84648]))
      unknown call_tmp[630221] "expr temp" "maybe param" "maybe type" "temp"
      (630224 'move' call_tmp[630221](84698 call _cast string[26] call_tmp[630216]))
      unknown call_tmp[630226] "expr temp" "maybe param" "maybe type" "temp"
      (630229 'move' call_tmp[630226](84700 call + call_tmp[630211] call_tmp[630221]))
      unknown call_tmp[630231] "maybe param" "maybe type" "temp"
      (630234 'move' call_tmp[630231](84703 call + call_tmp[630226] "'"))
      unknown theseTypes[84705] "dead at end of block" "param"
      (541548 'init var' theseTypes[84705] call_tmp[630231])
      (84708 'end of statement')
      unknown call_tmp[630238] "expr temp" "maybe param" "maybe type" "temp"
      (630241 'move' call_tmp[630238](84728 call valType _mt[243] other[84648]))
      unknown call_tmp[630243] "expr temp" "maybe param" "maybe type" "temp"
      (630246 'move' call_tmp[630243](84732 call _cast string[26] call_tmp[630238]))
      unknown call_tmp[630248] "expr temp" "maybe param" "maybe type" "temp"
      (630251 'move' call_tmp[630248](84734 call + "because '" call_tmp[630243]))
      unknown call_tmp[630253] "expr temp" "maybe param" "maybe type" "temp"
      (630256 'move' call_tmp[630253](84753 call + call_tmp[630248] "' is not coercible to '"))
      unknown call_tmp[630258] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630261 'move' call_tmp[630258](84756 'typeof' this[84957]))
      unknown call_tmp[630265] "expr temp" "maybe param" "maybe type" "temp"
      (630268 'move' call_tmp[630265](84757 call valType _mt[243] call_tmp[630258]))
      unknown call_tmp[630270] "expr temp" "maybe param" "maybe type" "temp"
      (630273 'move' call_tmp[630270](84761 call _cast string[26] call_tmp[630265]))
      unknown call_tmp[630275] "expr temp" "maybe param" "maybe type" "temp"
      (630278 'move' call_tmp[630275](84763 call + call_tmp[630253] call_tmp[630270]))
      unknown call_tmp[630280] "maybe param" "maybe type" "temp"
      (630283 'move' call_tmp[630280](84766 call + call_tmp[630275] "'"))
      unknown because[84768] "dead at end of block" "param"
      (541550 'init var' because[84768] call_tmp[630280])
      (84771 'end of statement')
      (84794 call compilerError "cannot initialize " theseTypes[84705] " " because[84768])
    }
    unknown call_tmp[630287] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630290 'move' call_tmp[630287](84806 'typeof' this[84957]))
    unknown call_tmp[630294] "expr temp" "maybe param" "maybe type" "temp"
    (630297 'move' call_tmp[630294](84807 call valType _mt[243] call_tmp[630287]))
    (84811 call(84802 call (partial) init _mt[243] this[84957]) call_tmp[630294])
    (476879 'end of statement')
    unknown call_tmp[630303] "expr temp" "maybe param" "maybe type" "temp"
    (630306 'move' call_tmp[630303](84824 call(84820 call (partial) readFE _mt[243] other[84648])))
    (84826 call(84816 call (partial) writeEF _mt[243] this[84957]) call_tmp[630303])
    (512747 return _void[55])
  }
  function _syncvar[84947](?).init=[84839](arg _mt[84963]:_MT[238], ref arg this[84961]:_syncvar[84947](?), const arg other[84836] :
  (84833 call valType _mt[243] this[84961])) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630312] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630315 'move' call_tmp[630312](84846 'typeof' other[84836]))
    (84848 call(84842 call (partial) init _mt[243] this[84961]) call_tmp[630312])
    (476881 'end of statement')
    (84857 call(84852 call (partial) writeEF _mt[243] this[84961]) other[84836])
    (512749 return _void[55])
  }
  function _syncvar[84947](?).deinit[84863](arg _mt[84967]:_MT[238], arg this[84965]:_syncvar[84947](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630321] "expr temp" "maybe param" "maybe type" "temp"
    (630324 'move' call_tmp[630321](376950 call isOwned _mt[243] this[84965]))
    unknown call_tmp[630326] "expr temp" "maybe param" "maybe type" "temp"
    (630329 'move' call_tmp[630326](84867 call == call_tmp[630321] 1))
    unknown call_tmp[630331] "expr temp" "maybe param" "maybe type" "temp"
    (630334 'move' call_tmp[630331](84874 call _cond_test call_tmp[630326]))
    if call_tmp[630331]
    {
      unknown call_tmp[630338] "expr temp" "maybe param" "maybe type" "temp"
      (630341 'move' call_tmp[630338](376955 call wrapped _mt[243] this[84965]))
      (84871 call chpl__delete call_tmp[630338])
    }
    (512751 return _void[55])
  }
  function _syncvar[84947](?).readThis[84886](arg _mt[84971]:_MT[238], arg this[84969]:_syncvar[84947](?), arg x[84884]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84909 call compilerError "sync variables cannot currently be read - use writeEF/writeFF instead")
    (512753 return _void[55])
  }
  function _syncvar[84947](?).writeThis[84918](arg _mt[84975]:_MT[238], arg this[84973]:_syncvar[84947](?), arg x[84916]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84941 call compilerError "sync variables cannot currently be written - apply readFE/readFF() to those variables first")
    (512755 return _void[55])
  }
  function _syncvar[84947](?).valType[775699](arg _mt[775701]:_MT[238], arg this[775703]:_syncvar[84947](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775722] "RVV" "temp" "type variable"
    unknown call_tmp[775736] "expr temp" "maybe param" "maybe type" "temp"
    (775739 'move' call_tmp[775736](775708 'is bound' this[775703] c"valType"))
    if call_tmp[775736]
    {
      unknown call_tmp[775741] "expr temp" "maybe param" "maybe type" "temp"
      (775744 'move' call_tmp[775741](775707 '.v' this[775703] c"valType"))
      (775727 'move' ret[775722](775726 'deref' call_tmp[775741]))
      gotoReturn _end_valType[775720] _end_valType[775720]
    }
    {
      (775732 'move' ret[775722](775731 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775720] _end_valType[775720]
    }
    label _end_valType[775720]
    (775724 return ret[775722])
  }
  function _syncvar[84947](?).valType[775746](arg _mt[775748]:_MT[238], arg this[775750]:_syncvar[84947](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775769] "RVV" "temp" "type variable"
    unknown call_tmp[775783] "expr temp" "maybe param" "maybe type" "temp"
    (775786 'move' call_tmp[775783](775755 'is bound' this[775750] c"valType"))
    if call_tmp[775783]
    {
      unknown call_tmp[775788] "expr temp" "maybe param" "maybe type" "temp"
      (775791 'move' call_tmp[775788](775754 '.v' this[775750] c"valType"))
      (775774 'move' ret[775769](775773 'deref' call_tmp[775788]))
      gotoReturn _end_valType[775767] _end_valType[775767]
    }
    {
      (775779 'move' ret[775769](775778 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775767] _end_valType[775767]
    }
    label _end_valType[775767]
    (775771 return ret[775769])
  }
  function _syncvar[84947](?).wrapped[775793](arg _mt[775795]:_MT[238], ref arg this[775797]:_syncvar[84947](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775807] "RVV" "temp"
    unknown call_tmp[775814] "expr temp" "maybe param" "maybe type" "temp"
    (775817 'move' call_tmp[775814](775801 '.' this[775797] c"wrapped"))
    (775812 'move' ret[775807](775811 'addr of' call_tmp[775814]))
    (775809 return ret[775807])
  }
  function _syncvar[84947](?).isOwned[775819](arg _mt[775821]:_MT[238], ref arg this[775823]:_syncvar[84947](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775833] "RVV" "temp"
    unknown call_tmp[775840] "expr temp" "maybe param" "maybe type" "temp"
    (775843 'move' call_tmp[775840](775827 '.' this[775823] c"isOwned"))
    (775838 'move' ret[775833](775837 'addr of' call_tmp[775840]))
    (775835 return ret[775833])
  }
  function chpl_fields_are_comparable[775857](arg _arg1[775859]:_syncvar[84947](?), arg _arg2[775860]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[775889]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[775896] "expr temp" "maybe param" "maybe type" "temp"
    (775899 'move' call_tmp[775896](775863 call wrapped _mt[243] _arg1[775859]))
    unknown call_tmp[775901] "expr temp" "maybe param" "maybe type" "temp"
    (775904 'move' call_tmp[775901](775867 call wrapped _mt[243] _arg2[775860]))
    unknown call_tmp[775906] "expr temp" "maybe param" "maybe type" "temp"
    (775909 'move' call_tmp[775906](775871 'call resolves' c"==" call_tmp[775896] call_tmp[775901]))
    unknown call_tmp[775911] "expr temp" "maybe param" "maybe type" "temp"
    (775914 'move' call_tmp[775911](775873 call isOwned _mt[243] _arg1[775859]))
    unknown call_tmp[775916] "expr temp" "maybe param" "maybe type" "temp"
    (775919 'move' call_tmp[775916](775877 call isOwned _mt[243] _arg2[775860]))
    unknown call_tmp[775921] "expr temp" "maybe param" "maybe type" "temp"
    (775924 'move' call_tmp[775921](775881 'call resolves' c"==" call_tmp[775911] call_tmp[775916]))
    unknown call_tmp[775926] "expr temp" "maybe param" "maybe type" "temp"
    (775929 'move' call_tmp[775926](775883 '&' call_tmp[775906] call_tmp[775921]))
    (775894 'move' ret[775889](775893 'deref' call_tmp[775926]))
    (775891 return ret[775889])
  }
  function ==[775845](arg _arg1[775847]:_syncvar[84947](?), arg _arg2[775848]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[775973]:bool[10] "RVV" "temp"
    unknown call_tmp[775990] "expr temp" "maybe param" "maybe type" "temp"
    (775993 'move' call_tmp[775990](775937 call wrapped _mt[243] _arg1[775847]))
    unknown call_tmp[775995] "expr temp" "maybe param" "maybe type" "temp"
    (775998 'move' call_tmp[775995](775941 call wrapped _mt[243] _arg2[775848]))
    unknown call_tmp[776000] "expr temp" "maybe param" "maybe type" "temp"
    (776003 'move' call_tmp[776000](775945 call != call_tmp[775990] call_tmp[775995]))
    if call_tmp[776000]
    {
      (775978 'move' ret[775973](775977 'deref' 0))
      gotoReturn _end_==[775971] _end_==[775971]
    }
    unknown call_tmp[776005] "expr temp" "maybe param" "maybe type" "temp"
    (776008 'move' call_tmp[776005](775951 call isOwned _mt[243] _arg1[775847]))
    unknown call_tmp[776010] "expr temp" "maybe param" "maybe type" "temp"
    (776013 'move' call_tmp[776010](775955 call isOwned _mt[243] _arg2[775848]))
    unknown call_tmp[776015] "expr temp" "maybe param" "maybe type" "temp"
    (776018 'move' call_tmp[776015](775959 call != call_tmp[776005] call_tmp[776010]))
    if call_tmp[776015]
    {
      (775983 'move' ret[775973](775982 'deref' 0))
      gotoReturn _end_==[775971] _end_==[775971]
    }
    (775988 'move' ret[775973](775987 'deref' 1))
    label _end_==[775971]
    (775975 return ret[775973])
  }
  where {
    unknown call_tmp[776020] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776023 'move' call_tmp[776020](775851 'typeof' _arg1[775847]))
    unknown call_tmp[776025] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776028 'move' call_tmp[776025](775853 'typeof' _arg2[775848]))
    unknown call_tmp[776030] "expr temp" "maybe param" "maybe type" "temp"
    (776033 'move' call_tmp[776030](775855 call == call_tmp[776020] call_tmp[776025]))
    unknown call_tmp[776035] "expr temp" "maybe param" "maybe type" "temp"
    (776038 'move' call_tmp[776035](775931 call chpl_fields_are_comparable[775857] _arg1[775847] _arg2[775848]))
    (775935 '&' call_tmp[776030] call_tmp[776035])
  }
  function chpl_fields_are_comparable[776052](arg _arg1[776054]:_syncvar[84947](?), arg _arg2[776055]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776084]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776091] "expr temp" "maybe param" "maybe type" "temp"
    (776094 'move' call_tmp[776091](776058 call wrapped _mt[243] _arg1[776054]))
    unknown call_tmp[776096] "expr temp" "maybe param" "maybe type" "temp"
    (776099 'move' call_tmp[776096](776062 call wrapped _mt[243] _arg2[776055]))
    unknown call_tmp[776101] "expr temp" "maybe param" "maybe type" "temp"
    (776104 'move' call_tmp[776101](776066 'call resolves' c"!=" call_tmp[776091] call_tmp[776096]))
    unknown call_tmp[776106] "expr temp" "maybe param" "maybe type" "temp"
    (776109 'move' call_tmp[776106](776068 call isOwned _mt[243] _arg1[776054]))
    unknown call_tmp[776111] "expr temp" "maybe param" "maybe type" "temp"
    (776114 'move' call_tmp[776111](776072 call isOwned _mt[243] _arg2[776055]))
    unknown call_tmp[776116] "expr temp" "maybe param" "maybe type" "temp"
    (776119 'move' call_tmp[776116](776076 'call resolves' c"!=" call_tmp[776106] call_tmp[776111]))
    unknown call_tmp[776121] "expr temp" "maybe param" "maybe type" "temp"
    (776124 'move' call_tmp[776121](776078 '&' call_tmp[776101] call_tmp[776116]))
    (776089 'move' ret[776084](776088 'deref' call_tmp[776121]))
    (776086 return ret[776084])
  }
  function !=[776040](arg _arg1[776042]:_syncvar[84947](?), arg _arg2[776043]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776168]:bool[10] "RVV" "temp"
    unknown call_tmp[776185] "expr temp" "maybe param" "maybe type" "temp"
    (776188 'move' call_tmp[776185](776132 call wrapped _mt[243] _arg1[776042]))
    unknown call_tmp[776190] "expr temp" "maybe param" "maybe type" "temp"
    (776193 'move' call_tmp[776190](776136 call wrapped _mt[243] _arg2[776043]))
    unknown call_tmp[776195] "expr temp" "maybe param" "maybe type" "temp"
    (776198 'move' call_tmp[776195](776140 call != call_tmp[776185] call_tmp[776190]))
    if call_tmp[776195]
    {
      (776173 'move' ret[776168](776172 'deref' 1))
      gotoReturn _end_!=[776166] _end_!=[776166]
    }
    unknown call_tmp[776200] "expr temp" "maybe param" "maybe type" "temp"
    (776203 'move' call_tmp[776200](776146 call isOwned _mt[243] _arg1[776042]))
    unknown call_tmp[776205] "expr temp" "maybe param" "maybe type" "temp"
    (776208 'move' call_tmp[776205](776150 call isOwned _mt[243] _arg2[776043]))
    unknown call_tmp[776210] "expr temp" "maybe param" "maybe type" "temp"
    (776213 'move' call_tmp[776210](776154 call != call_tmp[776200] call_tmp[776205]))
    if call_tmp[776210]
    {
      (776178 'move' ret[776168](776177 'deref' 1))
      gotoReturn _end_!=[776166] _end_!=[776166]
    }
    (776183 'move' ret[776168](776182 'deref' 0))
    label _end_!=[776166]
    (776170 return ret[776168])
  }
  where {
    unknown call_tmp[776215] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776218 'move' call_tmp[776215](776046 'typeof' _arg1[776042]))
    unknown call_tmp[776220] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776223 'move' call_tmp[776220](776048 'typeof' _arg2[776043]))
    unknown call_tmp[776225] "expr temp" "maybe param" "maybe type" "temp"
    (776228 'move' call_tmp[776225](776050 call == call_tmp[776215] call_tmp[776220]))
    unknown call_tmp[776230] "expr temp" "maybe param" "maybe type" "temp"
    (776233 'move' call_tmp[776230](776126 call chpl_fields_are_comparable[776052] _arg1[776042] _arg2[776043]))
    (776130 '&' call_tmp[776225] call_tmp[776230])
  }
  function chpl_fields_are_comparable[776247](arg _arg1[776249]:_syncvar[84947](?), arg _arg2[776250]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776279]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776286] "expr temp" "maybe param" "maybe type" "temp"
    (776289 'move' call_tmp[776286](776253 call wrapped _mt[243] _arg1[776249]))
    unknown call_tmp[776291] "expr temp" "maybe param" "maybe type" "temp"
    (776294 'move' call_tmp[776291](776257 call wrapped _mt[243] _arg2[776250]))
    unknown call_tmp[776296] "expr temp" "maybe param" "maybe type" "temp"
    (776299 'move' call_tmp[776296](776261 'call resolves' c"<" call_tmp[776286] call_tmp[776291]))
    unknown call_tmp[776301] "expr temp" "maybe param" "maybe type" "temp"
    (776304 'move' call_tmp[776301](776263 call isOwned _mt[243] _arg1[776249]))
    unknown call_tmp[776306] "expr temp" "maybe param" "maybe type" "temp"
    (776309 'move' call_tmp[776306](776267 call isOwned _mt[243] _arg2[776250]))
    unknown call_tmp[776311] "expr temp" "maybe param" "maybe type" "temp"
    (776314 'move' call_tmp[776311](776271 'call resolves' c"<" call_tmp[776301] call_tmp[776306]))
    unknown call_tmp[776316] "expr temp" "maybe param" "maybe type" "temp"
    (776319 'move' call_tmp[776316](776273 '&' call_tmp[776296] call_tmp[776311]))
    (776284 'move' ret[776279](776283 'deref' call_tmp[776316]))
    (776281 return ret[776279])
  }
  function <[776235](arg _arg1[776237]:_syncvar[84947](?), arg _arg2[776238]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776393]:bool[10] "RVV" "temp"
    unknown call_tmp[776420] "expr temp" "maybe param" "maybe type" "temp"
    (776423 'move' call_tmp[776420](776327 call wrapped _mt[243] _arg1[776237]))
    unknown call_tmp[776425] "expr temp" "maybe param" "maybe type" "temp"
    (776428 'move' call_tmp[776425](776331 call wrapped _mt[243] _arg2[776238]))
    unknown call_tmp[776430] "expr temp" "maybe param" "maybe type" "temp"
    (776433 'move' call_tmp[776430](776335 call < call_tmp[776420] call_tmp[776425]))
    if call_tmp[776430]
    {
      (776398 'move' ret[776393](776397 'deref' 1))
      gotoReturn _end_<[776391] _end_<[776391]
    }
    unknown call_tmp[776435] "expr temp" "maybe param" "maybe type" "temp"
    (776438 'move' call_tmp[776435](776341 call wrapped _mt[243] _arg1[776237]))
    unknown call_tmp[776440] "expr temp" "maybe param" "maybe type" "temp"
    (776443 'move' call_tmp[776440](776345 call wrapped _mt[243] _arg2[776238]))
    unknown call_tmp[776445] "expr temp" "maybe param" "maybe type" "temp"
    (776448 'move' call_tmp[776445](776349 call > call_tmp[776435] call_tmp[776440]))
    if call_tmp[776445]
    {
      (776403 'move' ret[776393](776402 'deref' 0))
      gotoReturn _end_<[776391] _end_<[776391]
    }
    unknown call_tmp[776450] "expr temp" "maybe param" "maybe type" "temp"
    (776453 'move' call_tmp[776450](776355 call isOwned _mt[243] _arg1[776237]))
    unknown call_tmp[776455] "expr temp" "maybe param" "maybe type" "temp"
    (776458 'move' call_tmp[776455](776359 call isOwned _mt[243] _arg2[776238]))
    unknown call_tmp[776460] "expr temp" "maybe param" "maybe type" "temp"
    (776463 'move' call_tmp[776460](776363 call < call_tmp[776450] call_tmp[776455]))
    if call_tmp[776460]
    {
      (776408 'move' ret[776393](776407 'deref' 1))
      gotoReturn _end_<[776391] _end_<[776391]
    }
    unknown call_tmp[776465] "expr temp" "maybe param" "maybe type" "temp"
    (776468 'move' call_tmp[776465](776369 call isOwned _mt[243] _arg1[776237]))
    unknown call_tmp[776470] "expr temp" "maybe param" "maybe type" "temp"
    (776473 'move' call_tmp[776470](776373 call isOwned _mt[243] _arg2[776238]))
    unknown call_tmp[776475] "expr temp" "maybe param" "maybe type" "temp"
    (776478 'move' call_tmp[776475](776377 call > call_tmp[776465] call_tmp[776470]))
    if call_tmp[776475]
    {
      (776413 'move' ret[776393](776412 'deref' 0))
      gotoReturn _end_<[776391] _end_<[776391]
    }
    (776418 'move' ret[776393](776417 'deref' 0))
    label _end_<[776391]
    (776395 return ret[776393])
  }
  where {
    unknown call_tmp[776480] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776483 'move' call_tmp[776480](776241 'typeof' _arg1[776237]))
    unknown call_tmp[776485] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776488 'move' call_tmp[776485](776243 'typeof' _arg2[776238]))
    unknown call_tmp[776490] "expr temp" "maybe param" "maybe type" "temp"
    (776493 'move' call_tmp[776490](776245 call == call_tmp[776480] call_tmp[776485]))
    unknown call_tmp[776495] "expr temp" "maybe param" "maybe type" "temp"
    (776498 'move' call_tmp[776495](776321 call chpl_fields_are_comparable[776247] _arg1[776237] _arg2[776238]))
    (776325 '&' call_tmp[776490] call_tmp[776495])
  }
  function chpl_fields_are_comparable[776512](arg _arg1[776514]:_syncvar[84947](?), arg _arg2[776515]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776544]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776551] "expr temp" "maybe param" "maybe type" "temp"
    (776554 'move' call_tmp[776551](776518 call wrapped _mt[243] _arg1[776514]))
    unknown call_tmp[776556] "expr temp" "maybe param" "maybe type" "temp"
    (776559 'move' call_tmp[776556](776522 call wrapped _mt[243] _arg2[776515]))
    unknown call_tmp[776561] "expr temp" "maybe param" "maybe type" "temp"
    (776564 'move' call_tmp[776561](776526 'call resolves' c"<=" call_tmp[776551] call_tmp[776556]))
    unknown call_tmp[776566] "expr temp" "maybe param" "maybe type" "temp"
    (776569 'move' call_tmp[776566](776528 call isOwned _mt[243] _arg1[776514]))
    unknown call_tmp[776571] "expr temp" "maybe param" "maybe type" "temp"
    (776574 'move' call_tmp[776571](776532 call isOwned _mt[243] _arg2[776515]))
    unknown call_tmp[776576] "expr temp" "maybe param" "maybe type" "temp"
    (776579 'move' call_tmp[776576](776536 'call resolves' c"<=" call_tmp[776566] call_tmp[776571]))
    unknown call_tmp[776581] "expr temp" "maybe param" "maybe type" "temp"
    (776584 'move' call_tmp[776581](776538 '&' call_tmp[776561] call_tmp[776576]))
    (776549 'move' ret[776544](776548 'deref' call_tmp[776581]))
    (776546 return ret[776544])
  }
  function <=[776500](arg _arg1[776502]:_syncvar[84947](?), arg _arg2[776503]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776658]:bool[10] "RVV" "temp"
    unknown call_tmp[776685] "expr temp" "maybe param" "maybe type" "temp"
    (776688 'move' call_tmp[776685](776592 call wrapped _mt[243] _arg1[776502]))
    unknown call_tmp[776690] "expr temp" "maybe param" "maybe type" "temp"
    (776693 'move' call_tmp[776690](776596 call wrapped _mt[243] _arg2[776503]))
    unknown call_tmp[776695] "expr temp" "maybe param" "maybe type" "temp"
    (776698 'move' call_tmp[776695](776600 call < call_tmp[776685] call_tmp[776690]))
    if call_tmp[776695]
    {
      (776663 'move' ret[776658](776662 'deref' 1))
      gotoReturn _end_<=[776656] _end_<=[776656]
    }
    unknown call_tmp[776700] "expr temp" "maybe param" "maybe type" "temp"
    (776703 'move' call_tmp[776700](776606 call wrapped _mt[243] _arg1[776502]))
    unknown call_tmp[776705] "expr temp" "maybe param" "maybe type" "temp"
    (776708 'move' call_tmp[776705](776610 call wrapped _mt[243] _arg2[776503]))
    unknown call_tmp[776710] "expr temp" "maybe param" "maybe type" "temp"
    (776713 'move' call_tmp[776710](776614 call > call_tmp[776700] call_tmp[776705]))
    if call_tmp[776710]
    {
      (776668 'move' ret[776658](776667 'deref' 0))
      gotoReturn _end_<=[776656] _end_<=[776656]
    }
    unknown call_tmp[776715] "expr temp" "maybe param" "maybe type" "temp"
    (776718 'move' call_tmp[776715](776620 call isOwned _mt[243] _arg1[776502]))
    unknown call_tmp[776720] "expr temp" "maybe param" "maybe type" "temp"
    (776723 'move' call_tmp[776720](776624 call isOwned _mt[243] _arg2[776503]))
    unknown call_tmp[776725] "expr temp" "maybe param" "maybe type" "temp"
    (776728 'move' call_tmp[776725](776628 call < call_tmp[776715] call_tmp[776720]))
    if call_tmp[776725]
    {
      (776673 'move' ret[776658](776672 'deref' 1))
      gotoReturn _end_<=[776656] _end_<=[776656]
    }
    unknown call_tmp[776730] "expr temp" "maybe param" "maybe type" "temp"
    (776733 'move' call_tmp[776730](776634 call isOwned _mt[243] _arg1[776502]))
    unknown call_tmp[776735] "expr temp" "maybe param" "maybe type" "temp"
    (776738 'move' call_tmp[776735](776638 call isOwned _mt[243] _arg2[776503]))
    unknown call_tmp[776740] "expr temp" "maybe param" "maybe type" "temp"
    (776743 'move' call_tmp[776740](776642 call > call_tmp[776730] call_tmp[776735]))
    if call_tmp[776740]
    {
      (776678 'move' ret[776658](776677 'deref' 0))
      gotoReturn _end_<=[776656] _end_<=[776656]
    }
    (776683 'move' ret[776658](776682 'deref' 1))
    label _end_<=[776656]
    (776660 return ret[776658])
  }
  where {
    unknown call_tmp[776745] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776748 'move' call_tmp[776745](776506 'typeof' _arg1[776502]))
    unknown call_tmp[776750] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776753 'move' call_tmp[776750](776508 'typeof' _arg2[776503]))
    unknown call_tmp[776755] "expr temp" "maybe param" "maybe type" "temp"
    (776758 'move' call_tmp[776755](776510 call == call_tmp[776745] call_tmp[776750]))
    unknown call_tmp[776760] "expr temp" "maybe param" "maybe type" "temp"
    (776763 'move' call_tmp[776760](776586 call chpl_fields_are_comparable[776512] _arg1[776502] _arg2[776503]))
    (776590 '&' call_tmp[776755] call_tmp[776760])
  }
  function chpl_fields_are_comparable[776777](arg _arg1[776779]:_syncvar[84947](?), arg _arg2[776780]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776809]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776816] "expr temp" "maybe param" "maybe type" "temp"
    (776819 'move' call_tmp[776816](776783 call wrapped _mt[243] _arg1[776779]))
    unknown call_tmp[776821] "expr temp" "maybe param" "maybe type" "temp"
    (776824 'move' call_tmp[776821](776787 call wrapped _mt[243] _arg2[776780]))
    unknown call_tmp[776826] "expr temp" "maybe param" "maybe type" "temp"
    (776829 'move' call_tmp[776826](776791 'call resolves' c">" call_tmp[776816] call_tmp[776821]))
    unknown call_tmp[776831] "expr temp" "maybe param" "maybe type" "temp"
    (776834 'move' call_tmp[776831](776793 call isOwned _mt[243] _arg1[776779]))
    unknown call_tmp[776836] "expr temp" "maybe param" "maybe type" "temp"
    (776839 'move' call_tmp[776836](776797 call isOwned _mt[243] _arg2[776780]))
    unknown call_tmp[776841] "expr temp" "maybe param" "maybe type" "temp"
    (776844 'move' call_tmp[776841](776801 'call resolves' c">" call_tmp[776831] call_tmp[776836]))
    unknown call_tmp[776846] "expr temp" "maybe param" "maybe type" "temp"
    (776849 'move' call_tmp[776846](776803 '&' call_tmp[776826] call_tmp[776841]))
    (776814 'move' ret[776809](776813 'deref' call_tmp[776846]))
    (776811 return ret[776809])
  }
  function >[776765](arg _arg1[776767]:_syncvar[84947](?), arg _arg2[776768]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776923]:bool[10] "RVV" "temp"
    unknown call_tmp[776950] "expr temp" "maybe param" "maybe type" "temp"
    (776953 'move' call_tmp[776950](776857 call wrapped _mt[243] _arg1[776767]))
    unknown call_tmp[776955] "expr temp" "maybe param" "maybe type" "temp"
    (776958 'move' call_tmp[776955](776861 call wrapped _mt[243] _arg2[776768]))
    unknown call_tmp[776960] "expr temp" "maybe param" "maybe type" "temp"
    (776963 'move' call_tmp[776960](776865 call > call_tmp[776950] call_tmp[776955]))
    if call_tmp[776960]
    {
      (776928 'move' ret[776923](776927 'deref' 1))
      gotoReturn _end_>[776921] _end_>[776921]
    }
    unknown call_tmp[776965] "expr temp" "maybe param" "maybe type" "temp"
    (776968 'move' call_tmp[776965](776871 call wrapped _mt[243] _arg1[776767]))
    unknown call_tmp[776970] "expr temp" "maybe param" "maybe type" "temp"
    (776973 'move' call_tmp[776970](776875 call wrapped _mt[243] _arg2[776768]))
    unknown call_tmp[776975] "expr temp" "maybe param" "maybe type" "temp"
    (776978 'move' call_tmp[776975](776879 call < call_tmp[776965] call_tmp[776970]))
    if call_tmp[776975]
    {
      (776933 'move' ret[776923](776932 'deref' 0))
      gotoReturn _end_>[776921] _end_>[776921]
    }
    unknown call_tmp[776980] "expr temp" "maybe param" "maybe type" "temp"
    (776983 'move' call_tmp[776980](776885 call isOwned _mt[243] _arg1[776767]))
    unknown call_tmp[776985] "expr temp" "maybe param" "maybe type" "temp"
    (776988 'move' call_tmp[776985](776889 call isOwned _mt[243] _arg2[776768]))
    unknown call_tmp[776990] "expr temp" "maybe param" "maybe type" "temp"
    (776993 'move' call_tmp[776990](776893 call > call_tmp[776980] call_tmp[776985]))
    if call_tmp[776990]
    {
      (776938 'move' ret[776923](776937 'deref' 1))
      gotoReturn _end_>[776921] _end_>[776921]
    }
    unknown call_tmp[776995] "expr temp" "maybe param" "maybe type" "temp"
    (776998 'move' call_tmp[776995](776899 call isOwned _mt[243] _arg1[776767]))
    unknown call_tmp[777000] "expr temp" "maybe param" "maybe type" "temp"
    (777003 'move' call_tmp[777000](776903 call isOwned _mt[243] _arg2[776768]))
    unknown call_tmp[777005] "expr temp" "maybe param" "maybe type" "temp"
    (777008 'move' call_tmp[777005](776907 call < call_tmp[776995] call_tmp[777000]))
    if call_tmp[777005]
    {
      (776943 'move' ret[776923](776942 'deref' 0))
      gotoReturn _end_>[776921] _end_>[776921]
    }
    (776948 'move' ret[776923](776947 'deref' 0))
    label _end_>[776921]
    (776925 return ret[776923])
  }
  where {
    unknown call_tmp[777010] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777013 'move' call_tmp[777010](776771 'typeof' _arg1[776767]))
    unknown call_tmp[777015] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777018 'move' call_tmp[777015](776773 'typeof' _arg2[776768]))
    unknown call_tmp[777020] "expr temp" "maybe param" "maybe type" "temp"
    (777023 'move' call_tmp[777020](776775 call == call_tmp[777010] call_tmp[777015]))
    unknown call_tmp[777025] "expr temp" "maybe param" "maybe type" "temp"
    (777028 'move' call_tmp[777025](776851 call chpl_fields_are_comparable[776777] _arg1[776767] _arg2[776768]))
    (776855 '&' call_tmp[777020] call_tmp[777025])
  }
  function chpl_fields_are_comparable[777042](arg _arg1[777044]:_syncvar[84947](?), arg _arg2[777045]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[777074]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[777081] "expr temp" "maybe param" "maybe type" "temp"
    (777084 'move' call_tmp[777081](777048 call wrapped _mt[243] _arg1[777044]))
    unknown call_tmp[777086] "expr temp" "maybe param" "maybe type" "temp"
    (777089 'move' call_tmp[777086](777052 call wrapped _mt[243] _arg2[777045]))
    unknown call_tmp[777091] "expr temp" "maybe param" "maybe type" "temp"
    (777094 'move' call_tmp[777091](777056 'call resolves' c">=" call_tmp[777081] call_tmp[777086]))
    unknown call_tmp[777096] "expr temp" "maybe param" "maybe type" "temp"
    (777099 'move' call_tmp[777096](777058 call isOwned _mt[243] _arg1[777044]))
    unknown call_tmp[777101] "expr temp" "maybe param" "maybe type" "temp"
    (777104 'move' call_tmp[777101](777062 call isOwned _mt[243] _arg2[777045]))
    unknown call_tmp[777106] "expr temp" "maybe param" "maybe type" "temp"
    (777109 'move' call_tmp[777106](777066 'call resolves' c">=" call_tmp[777096] call_tmp[777101]))
    unknown call_tmp[777111] "expr temp" "maybe param" "maybe type" "temp"
    (777114 'move' call_tmp[777111](777068 '&' call_tmp[777091] call_tmp[777106]))
    (777079 'move' ret[777074](777078 'deref' call_tmp[777111]))
    (777076 return ret[777074])
  }
  function >=[777030](arg _arg1[777032]:_syncvar[84947](?), arg _arg2[777033]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[777188]:bool[10] "RVV" "temp"
    unknown call_tmp[777215] "expr temp" "maybe param" "maybe type" "temp"
    (777218 'move' call_tmp[777215](777122 call wrapped _mt[243] _arg1[777032]))
    unknown call_tmp[777220] "expr temp" "maybe param" "maybe type" "temp"
    (777223 'move' call_tmp[777220](777126 call wrapped _mt[243] _arg2[777033]))
    unknown call_tmp[777225] "expr temp" "maybe param" "maybe type" "temp"
    (777228 'move' call_tmp[777225](777130 call > call_tmp[777215] call_tmp[777220]))
    if call_tmp[777225]
    {
      (777193 'move' ret[777188](777192 'deref' 1))
      gotoReturn _end_>=[777186] _end_>=[777186]
    }
    unknown call_tmp[777230] "expr temp" "maybe param" "maybe type" "temp"
    (777233 'move' call_tmp[777230](777136 call wrapped _mt[243] _arg1[777032]))
    unknown call_tmp[777235] "expr temp" "maybe param" "maybe type" "temp"
    (777238 'move' call_tmp[777235](777140 call wrapped _mt[243] _arg2[777033]))
    unknown call_tmp[777240] "expr temp" "maybe param" "maybe type" "temp"
    (777243 'move' call_tmp[777240](777144 call < call_tmp[777230] call_tmp[777235]))
    if call_tmp[777240]
    {
      (777198 'move' ret[777188](777197 'deref' 0))
      gotoReturn _end_>=[777186] _end_>=[777186]
    }
    unknown call_tmp[777245] "expr temp" "maybe param" "maybe type" "temp"
    (777248 'move' call_tmp[777245](777150 call isOwned _mt[243] _arg1[777032]))
    unknown call_tmp[777250] "expr temp" "maybe param" "maybe type" "temp"
    (777253 'move' call_tmp[777250](777154 call isOwned _mt[243] _arg2[777033]))
    unknown call_tmp[777255] "expr temp" "maybe param" "maybe type" "temp"
    (777258 'move' call_tmp[777255](777158 call > call_tmp[777245] call_tmp[777250]))
    if call_tmp[777255]
    {
      (777203 'move' ret[777188](777202 'deref' 1))
      gotoReturn _end_>=[777186] _end_>=[777186]
    }
    unknown call_tmp[777260] "expr temp" "maybe param" "maybe type" "temp"
    (777263 'move' call_tmp[777260](777164 call isOwned _mt[243] _arg1[777032]))
    unknown call_tmp[777265] "expr temp" "maybe param" "maybe type" "temp"
    (777268 'move' call_tmp[777265](777168 call isOwned _mt[243] _arg2[777033]))
    unknown call_tmp[777270] "expr temp" "maybe param" "maybe type" "temp"
    (777273 'move' call_tmp[777270](777172 call < call_tmp[777260] call_tmp[777265]))
    if call_tmp[777270]
    {
      (777208 'move' ret[777188](777207 'deref' 0))
      gotoReturn _end_>=[777186] _end_>=[777186]
    }
    (777213 'move' ret[777188](777212 'deref' 1))
    label _end_>=[777186]
    (777190 return ret[777188])
  }
  where {
    unknown call_tmp[777275] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777278 'move' call_tmp[777275](777036 'typeof' _arg1[777032]))
    unknown call_tmp[777280] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777283 'move' call_tmp[777280](777038 'typeof' _arg2[777033]))
    unknown call_tmp[777285] "expr temp" "maybe param" "maybe type" "temp"
    (777288 'move' call_tmp[777285](777040 call == call_tmp[777275] call_tmp[777280]))
    unknown call_tmp[777290] "expr temp" "maybe param" "maybe type" "temp"
    (777293 'move' call_tmp[777290](777116 call chpl_fields_are_comparable[777042] _arg1[777032] _arg2[777033]))
    (777120 '&' call_tmp[777285] call_tmp[777290])
  }
  function =[777295](ref arg _arg1[777297]:_syncvar[84947](?), const?  ref arg _arg2[777298]:_syncvar[84947](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[777335] "expr temp" "maybe param" "maybe type" "temp"
    (777338 'move' call_tmp[777335](777308 call wrapped _mt[243] _arg1[777297]))
    unknown call_tmp[777342] "expr temp" "maybe param" "maybe type" "temp"
    (777345 'move' call_tmp[777342](777312 call wrapped _mt[243] _arg2[777298]))
    (777316 call = call_tmp[777335] call_tmp[777342])
    (777329 'end of statement')
    unknown call_tmp[777349] "expr temp" "maybe param" "maybe type" "temp"
    (777352 'move' call_tmp[777349](777318 call isOwned _mt[243] _arg1[777297]))
    unknown call_tmp[777356] "expr temp" "maybe param" "maybe type" "temp"
    (777359 'move' call_tmp[777356](777322 call isOwned _mt[243] _arg2[777298]))
    (777326 call = call_tmp[777349] call_tmp[777356])
    (777331 return _void[55])
  }
  where {
    unknown call_tmp[777361] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777364 'move' call_tmp[777361](777301 'typeof' _arg1[777297]))
    unknown call_tmp[777366] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777369 'move' call_tmp[777366](777303 'typeof' _arg2[777298]))
    (777305 call == call_tmp[777361] call_tmp[777366])
  }
  function chpl__defaultHash[777371](arg r[777373]:_syncvar[84947](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[777404] "RVV" "temp"
    unknown call_tmp[777411] "expr temp" "maybe param" "maybe type" "temp"
    (777414 'move' call_tmp[777411](777390 call isOwned _mt[243] r[777373]))
    unknown call_tmp[777416] "expr temp" "maybe param" "maybe type" "temp"
    (777419 'move' call_tmp[777416](777394 call chpl__defaultHash call_tmp[777411]))
    unknown call_tmp[777421] "expr temp" "maybe param" "maybe type" "temp"
    (777424 'move' call_tmp[777421](777381 call wrapped _mt[243] r[777373]))
    unknown call_tmp[777426] "expr temp" "maybe param" "maybe type" "temp"
    (777429 'move' call_tmp[777426](777385 call chpl__defaultHash call_tmp[777421]))
    unknown call_tmp[777431] "expr temp" "maybe param" "maybe type" "temp"
    (777434 'move' call_tmp[777431](777375 call valType _mt[243] r[777373]))
    unknown call_tmp[777436] "expr temp" "maybe param" "maybe type" "temp"
    (777439 'move' call_tmp[777436](777379 call chpl__defaultHash call_tmp[777431]))
    unknown call_tmp[777441] "expr temp" "maybe param" "maybe type" "temp"
    (777444 'move' call_tmp[777441](777387 call chpl__defaultHashCombine call_tmp[777426] call_tmp[777436] 2))
    unknown call_tmp[777446] "expr temp" "maybe param" "maybe type" "temp"
    (777449 'move' call_tmp[777446](777396 call chpl__defaultHashCombine call_tmp[777416] call_tmp[777441] 3))
    (777409 'move' ret[777404](777408 'deref' call_tmp[777446]))
    (777406 return ret[777404])
  }
  sync type _syncvar[84947](?) unknown valType[84545] "type variable" unknown wrapped[84552](84551 call getSyncClassType valType[84545]) val isOwned[84558]:bool[10] 1 bool[10]
  function isSyncType[84984](arg t[84981]:_syncvar[84947](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512759] "RVV" "param" "temp"
    (512764 'move' ret[512759](512763 'deref' 1))
    (512761 return ret[512759])
  }
  function isSyncType[84996](arg t[84994]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512768] "RVV" "param" "temp"
    (512773 'move' ret[512768](512772 'deref' 0))
    (512770 return ret[512768])
  }
  function _syncvar[84947](?).readFE[85007](arg _mt[85012]:_MT[238], arg this[85009]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method"
  {
    unknown ret[512777] "RVV" "temp"
    unknown call_tmp[630345] "expr temp" "maybe param" "maybe type" "temp"
    (630348 'move' call_tmp[630345](358210 call wrapped _mt[243] this[85009]))
    unknown call_tmp[630352] "expr temp" "maybe param" "maybe type" "temp"
    (630355 'move' call_tmp[630352](85019 call(85015 call (partial) readFE _mt[243] call_tmp[630345])))
    (512782 'move' ret[512777](512781 'deref' call_tmp[630352]))
    (512779 return ret[512777])
  }
  function _syncvar[84947](?).readFF[85028](arg _mt[85033]:_MT[238], arg this[85030]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method"
  {
    unknown ret[512786] "RVV" "temp"
    unknown call_tmp[630359] "expr temp" "maybe param" "maybe type" "temp"
    (630362 'move' call_tmp[630359](358215 call wrapped _mt[243] this[85030]))
    unknown call_tmp[630366] "expr temp" "maybe param" "maybe type" "temp"
    (630369 'move' call_tmp[630366](85040 call(85036 call (partial) readFF _mt[243] call_tmp[630359])))
    (512791 'move' ret[512786](512790 'deref' call_tmp[630366]))
    (512788 return ret[512786])
  }
  function _syncvar[84947](?).readXX[85049](arg _mt[85054]:_MT[238], arg this[85051]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method"
  {
    unknown ret[512795] "RVV" "temp"
    (85058 call chpl_task_yield)
    (476890 'end of statement')
    unknown call_tmp[630373] "expr temp" "maybe param" "maybe type" "temp"
    (630376 'move' call_tmp[630373](358220 call wrapped _mt[243] this[85051]))
    unknown call_tmp[630380] "expr temp" "maybe param" "maybe type" "temp"
    (630383 'move' call_tmp[630380](85068 call(85064 call (partial) readXX _mt[243] call_tmp[630373])))
    (512800 'move' ret[512795](512799 'deref' call_tmp[630380]))
    (512797 return ret[512795])
  }
  function _syncvar[84947](?).writeEF[85080](arg _mt[85085]:_MT[238], arg this[85082]:_syncvar[84947](?) :
  _syncvar[84947](?), arg x[85077] :
  (376961 call valType _mt[243] this[85082])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630389] "expr temp" "maybe param" "maybe type" "temp"
    (630392 'move' call_tmp[630389](358225 call wrapped _mt[243] this[85082]))
    (85093 call(85088 call (partial) writeEF _mt[243] call_tmp[630389]) x[85077])
    (512802 return _void[55])
  }
  function _syncvar[84947](?).writeFF[85105](arg _mt[85110]:_MT[238], arg this[85107]:_syncvar[84947](?) :
  _syncvar[84947](?), arg x[85102] :
  (376967 call valType _mt[243] this[85107])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630400] "expr temp" "maybe param" "maybe type" "temp"
    (630403 'move' call_tmp[630400](358230 call wrapped _mt[243] this[85107]))
    (85120 call(85115 call (partial) writeFF _mt[243] call_tmp[630400]) x[85102])
    (512804 return _void[55])
  }
  function _syncvar[84947](?).writeXF[85132](arg _mt[85137]:_MT[238], arg this[85134]:_syncvar[84947](?) :
  _syncvar[84947](?), arg x[85129] :
  (376973 call valType _mt[243] this[85134])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630411] "expr temp" "maybe param" "maybe type" "temp"
    (630414 'move' call_tmp[630411](358235 call wrapped _mt[243] this[85134]))
    (85147 call(85142 call (partial) writeXF _mt[243] call_tmp[630411]) x[85129])
    (512806 return _void[55])
  }
  function _syncvar[84947](?).reset[85155](arg _mt[85160]:_MT[238], arg this[85157]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630420] "expr temp" "maybe param" "maybe type" "temp"
    (630423 'move' call_tmp[630420](358240 call wrapped _mt[243] this[85157]))
    (85169 call(85165 call (partial) reset _mt[243] call_tmp[630420]))
    (512808 return _void[55])
  }
  function _syncvar[84947](?).isFull[85177](arg _mt[85182]:_MT[238], arg this[85179]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[512812] "RVV" "temp"
    unknown call_tmp[630429] "expr temp" "maybe param" "maybe type" "temp"
    (630432 'move' call_tmp[630429](358245 call wrapped _mt[243] this[85179]))
    unknown call_tmp[630436] "expr temp" "maybe param" "maybe type" "temp"
    (630439 'move' call_tmp[630436](85187 call isFull _mt[243] call_tmp[630429]))
    (512817 'move' ret[512812](512816 'deref' call_tmp[630436]))
    (512814 return ret[512812])
  }
  function =[85205](ref arg lhs[85202]:_syncvar[84947](?), arg rhs[85208] :
  (459838 'query' lhs[85202] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630443] "expr temp" "maybe param" "maybe type" "temp"
    (630446 'move' call_tmp[630443](85212 call wrapped _mt[243] lhs[85202]))
    (85220 call(85215 call (partial) writeEF _mt[243] call_tmp[630443]) rhs[85208])
    (512819 return _void[55])
  }
  function +=[85235](ref arg lhs[85232]:_syncvar[84947](?), arg rhs[85238] :
  (459848 'query' lhs[85232] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630452] "expr temp" "maybe param" "maybe type" "temp"
    (630455 'move' call_tmp[630452](85242 call wrapped _mt[243] lhs[85232]))
    unknown call_tmp[630461] "expr temp" "maybe param" "maybe type" "temp"
    (630464 'move' call_tmp[630461](85249 call wrapped _mt[243] lhs[85232]))
    unknown call_tmp[630468] "expr temp" "maybe param" "maybe type" "temp"
    (630471 'move' call_tmp[630468](85256 call(85252 call (partial) readFE _mt[243] call_tmp[630461])))
    unknown call_tmp[630473] "expr temp" "maybe param" "maybe type" "temp"
    (630476 'move' call_tmp[630473](85258 call + call_tmp[630468] rhs[85238]))
    (85261 call(85245 call (partial) writeEF _mt[243] call_tmp[630452]) call_tmp[630473])
    (512821 return _void[55])
  }
  function -=[85276](ref arg lhs[85273]:_syncvar[84947](?), arg rhs[85279] :
  (459858 'query' lhs[85273] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630480] "expr temp" "maybe param" "maybe type" "temp"
    (630483 'move' call_tmp[630480](85283 call wrapped _mt[243] lhs[85273]))
    unknown call_tmp[630489] "expr temp" "maybe param" "maybe type" "temp"
    (630492 'move' call_tmp[630489](85290 call wrapped _mt[243] lhs[85273]))
    unknown call_tmp[630496] "expr temp" "maybe param" "maybe type" "temp"
    (630499 'move' call_tmp[630496](85297 call(85293 call (partial) readFE _mt[243] call_tmp[630489])))
    unknown call_tmp[630501] "expr temp" "maybe param" "maybe type" "temp"
    (630504 'move' call_tmp[630501](85299 call - call_tmp[630496] rhs[85279]))
    (85302 call(85286 call (partial) writeEF _mt[243] call_tmp[630480]) call_tmp[630501])
    (512823 return _void[55])
  }
  function *=[85317](ref arg lhs[85314]:_syncvar[84947](?), arg rhs[85320] :
  (459868 'query' lhs[85314] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630508] "expr temp" "maybe param" "maybe type" "temp"
    (630511 'move' call_tmp[630508](85324 call wrapped _mt[243] lhs[85314]))
    unknown call_tmp[630517] "expr temp" "maybe param" "maybe type" "temp"
    (630520 'move' call_tmp[630517](85331 call wrapped _mt[243] lhs[85314]))
    unknown call_tmp[630524] "expr temp" "maybe param" "maybe type" "temp"
    (630527 'move' call_tmp[630524](85338 call(85334 call (partial) readFE _mt[243] call_tmp[630517])))
    unknown call_tmp[630529] "expr temp" "maybe param" "maybe type" "temp"
    (630532 'move' call_tmp[630529](85340 call * call_tmp[630524] rhs[85320]))
    (85343 call(85327 call (partial) writeEF _mt[243] call_tmp[630508]) call_tmp[630529])
    (512825 return _void[55])
  }
  function /=[85358](ref arg lhs[85355]:_syncvar[84947](?), arg rhs[85361] :
  (459878 'query' lhs[85355] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630536] "expr temp" "maybe param" "maybe type" "temp"
    (630539 'move' call_tmp[630536](85365 call wrapped _mt[243] lhs[85355]))
    unknown call_tmp[630545] "expr temp" "maybe param" "maybe type" "temp"
    (630548 'move' call_tmp[630545](85372 call wrapped _mt[243] lhs[85355]))
    unknown call_tmp[630552] "expr temp" "maybe param" "maybe type" "temp"
    (630555 'move' call_tmp[630552](85379 call(85375 call (partial) readFE _mt[243] call_tmp[630545])))
    unknown call_tmp[630557] "expr temp" "maybe param" "maybe type" "temp"
    (630560 'move' call_tmp[630557](85381 call / call_tmp[630552] rhs[85361]))
    (85384 call(85368 call (partial) writeEF _mt[243] call_tmp[630536]) call_tmp[630557])
    (512827 return _void[55])
  }
  function %=[85399](ref arg lhs[85396]:_syncvar[84947](?), arg rhs[85402] :
  (459888 'query' lhs[85396] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630564] "expr temp" "maybe param" "maybe type" "temp"
    (630567 'move' call_tmp[630564](85406 call wrapped _mt[243] lhs[85396]))
    unknown call_tmp[630573] "expr temp" "maybe param" "maybe type" "temp"
    (630576 'move' call_tmp[630573](85413 call wrapped _mt[243] lhs[85396]))
    unknown call_tmp[630580] "expr temp" "maybe param" "maybe type" "temp"
    (630583 'move' call_tmp[630580](85420 call(85416 call (partial) readFE _mt[243] call_tmp[630573])))
    unknown call_tmp[630585] "expr temp" "maybe param" "maybe type" "temp"
    (630588 'move' call_tmp[630585](85422 call % call_tmp[630580] rhs[85402]))
    (85425 call(85409 call (partial) writeEF _mt[243] call_tmp[630564]) call_tmp[630585])
    (512829 return _void[55])
  }
  function **=[85440](ref arg lhs[85437]:_syncvar[84947](?), arg rhs[85443] :
  (459898 'query' lhs[85437] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630592] "expr temp" "maybe param" "maybe type" "temp"
    (630595 'move' call_tmp[630592](85447 call wrapped _mt[243] lhs[85437]))
    unknown call_tmp[630601] "expr temp" "maybe param" "maybe type" "temp"
    (630604 'move' call_tmp[630601](85454 call wrapped _mt[243] lhs[85437]))
    unknown call_tmp[630608] "expr temp" "maybe param" "maybe type" "temp"
    (630611 'move' call_tmp[630608](85461 call(85457 call (partial) readFE _mt[243] call_tmp[630601])))
    unknown call_tmp[630613] "expr temp" "maybe param" "maybe type" "temp"
    (630616 'move' call_tmp[630613](85463 call ** call_tmp[630608] rhs[85443]))
    (85466 call(85450 call (partial) writeEF _mt[243] call_tmp[630592]) call_tmp[630613])
    (512831 return _void[55])
  }
  function &=[85481](ref arg lhs[85478]:_syncvar[84947](?), arg rhs[85484] :
  (459908 'query' lhs[85478] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630620] "expr temp" "maybe param" "maybe type" "temp"
    (630623 'move' call_tmp[630620](85488 call wrapped _mt[243] lhs[85478]))
    unknown call_tmp[630629] "expr temp" "maybe param" "maybe type" "temp"
    (630632 'move' call_tmp[630629](85495 call wrapped _mt[243] lhs[85478]))
    unknown call_tmp[630636] "expr temp" "maybe param" "maybe type" "temp"
    (630639 'move' call_tmp[630636](85502 call(85498 call (partial) readFE _mt[243] call_tmp[630629])))
    unknown call_tmp[630641] "expr temp" "maybe param" "maybe type" "temp"
    (630644 'move' call_tmp[630641](85504 call & call_tmp[630636] rhs[85484]))
    (85507 call(85491 call (partial) writeEF _mt[243] call_tmp[630620]) call_tmp[630641])
    (512833 return _void[55])
  }
  function |=[85522](ref arg lhs[85519]:_syncvar[84947](?), arg rhs[85525] :
  (459918 'query' lhs[85519] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630648] "expr temp" "maybe param" "maybe type" "temp"
    (630651 'move' call_tmp[630648](85529 call wrapped _mt[243] lhs[85519]))
    unknown call_tmp[630657] "expr temp" "maybe param" "maybe type" "temp"
    (630660 'move' call_tmp[630657](85536 call wrapped _mt[243] lhs[85519]))
    unknown call_tmp[630664] "expr temp" "maybe param" "maybe type" "temp"
    (630667 'move' call_tmp[630664](85543 call(85539 call (partial) readFE _mt[243] call_tmp[630657])))
    unknown call_tmp[630669] "expr temp" "maybe param" "maybe type" "temp"
    (630672 'move' call_tmp[630669](85545 call | call_tmp[630664] rhs[85525]))
    (85548 call(85532 call (partial) writeEF _mt[243] call_tmp[630648]) call_tmp[630669])
    (512835 return _void[55])
  }
  function ^=[85563](ref arg lhs[85560]:_syncvar[84947](?), arg rhs[85566] :
  (459928 'query' lhs[85560] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630676] "expr temp" "maybe param" "maybe type" "temp"
    (630679 'move' call_tmp[630676](85570 call wrapped _mt[243] lhs[85560]))
    unknown call_tmp[630685] "expr temp" "maybe param" "maybe type" "temp"
    (630688 'move' call_tmp[630685](85577 call wrapped _mt[243] lhs[85560]))
    unknown call_tmp[630692] "expr temp" "maybe param" "maybe type" "temp"
    (630695 'move' call_tmp[630692](85584 call(85580 call (partial) readFE _mt[243] call_tmp[630685])))
    unknown call_tmp[630697] "expr temp" "maybe param" "maybe type" "temp"
    (630700 'move' call_tmp[630697](85586 call ^ call_tmp[630692] rhs[85566]))
    (85589 call(85573 call (partial) writeEF _mt[243] call_tmp[630676]) call_tmp[630697])
    (512837 return _void[55])
  }
  function >>=[85604](ref arg lhs[85601]:_syncvar[84947](?), arg rhs[85607] :
  (459938 'query' lhs[85601] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630704] "expr temp" "maybe param" "maybe type" "temp"
    (630707 'move' call_tmp[630704](85611 call wrapped _mt[243] lhs[85601]))
    unknown call_tmp[630713] "expr temp" "maybe param" "maybe type" "temp"
    (630716 'move' call_tmp[630713](85618 call wrapped _mt[243] lhs[85601]))
    unknown call_tmp[630720] "expr temp" "maybe param" "maybe type" "temp"
    (630723 'move' call_tmp[630720](85625 call(85621 call (partial) readFE _mt[243] call_tmp[630713])))
    unknown call_tmp[630725] "expr temp" "maybe param" "maybe type" "temp"
    (630728 'move' call_tmp[630725](85627 call >> call_tmp[630720] rhs[85607]))
    (85630 call(85614 call (partial) writeEF _mt[243] call_tmp[630704]) call_tmp[630725])
    (512839 return _void[55])
  }
  function <<=[85645](ref arg lhs[85642]:_syncvar[84947](?), arg rhs[85648] :
  (459948 'query' lhs[85642] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630732] "expr temp" "maybe param" "maybe type" "temp"
    (630735 'move' call_tmp[630732](85652 call wrapped _mt[243] lhs[85642]))
    unknown call_tmp[630741] "expr temp" "maybe param" "maybe type" "temp"
    (630744 'move' call_tmp[630741](85659 call wrapped _mt[243] lhs[85642]))
    unknown call_tmp[630748] "expr temp" "maybe param" "maybe type" "temp"
    (630751 'move' call_tmp[630748](85666 call(85662 call (partial) readFE _mt[243] call_tmp[630741])))
    unknown call_tmp[630753] "expr temp" "maybe param" "maybe type" "temp"
    (630756 'move' call_tmp[630753](85668 call << call_tmp[630748] rhs[85648]))
    (85671 call(85655 call (partial) writeEF _mt[243] call_tmp[630732]) call_tmp[630753])
    (512841 return _void[55])
  }
  function chpl__initCopy[85686](ref arg sv[85683]:_syncvar[84947](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[512845] "RVV" "temp"
    unknown call_tmp[630760] "expr temp" "maybe param" "maybe type" "temp"
    (630763 'move' call_tmp[630760](85693 call(85689 call (partial) readFE _mt[243] sv[85683])))
    (512850 'move' ret[512845](512849 'deref' call_tmp[630760]))
    (512847 return ret[512845])
  }
  function chpl__autoCopy[85705](const  ref arg rhs[85702]:_syncvar[84947](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[512854] "RVV" "temp"
    unknown call_tmp[630765] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630768 'move' call_tmp[630765](747826 'new' _syncvar[84947](?) rhs[85702]))
    (512859 'move' ret[512854](512858 'deref' call_tmp[630765]))
    (512856 return ret[512854])
  }
  function chpl__maybeAutoDestroyed[85727](arg x[85724]:_syncvar[84947](?)) param : _unknown[51] "inline"
  {
    unknown ret[512863] "RVV" "param" "temp"
    (512868 'move' ret[512863](512867 'deref' 1))
    (512865 return ret[512863])
  }
  function chpl__autoDestroy[85744](arg x[85741]:_syncvar[84947](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[630772] "expr temp" "maybe param" "maybe type" "temp"
    (630775 'move' call_tmp[630772](85747 call isOwned _mt[243] x[85741]))
    unknown call_tmp[630777] "expr temp" "maybe param" "maybe type" "temp"
    (630780 'move' call_tmp[630777](85751 call == call_tmp[630772] 1))
    unknown call_tmp[630782] "expr temp" "maybe param" "maybe type" "temp"
    (630785 'move' call_tmp[630782](85761 call _cond_test call_tmp[630777]))
    if call_tmp[630782]
    {
      unknown call_tmp[630789] "expr temp" "maybe param" "maybe type" "temp"
      (630792 'move' call_tmp[630789](85754 call wrapped _mt[243] x[85741]))
      (85758 call chpl__delete call_tmp[630789])
    }
    (512870 return _void[55])
  }
  function chpl__readXX[85778](const  ref arg x[85775]:_syncvar[84947](?)) : _unknown[51] "no doc"
  {
    unknown ret[512874] "RVV" "temp"
    unknown call_tmp[630796] "expr temp" "maybe param" "maybe type" "temp"
    (630799 'move' call_tmp[630796](85785 call(85781 call (partial) readXX _mt[243] x[85775])))
    (512879 'move' ret[512874](512878 'deref' call_tmp[630796]))
    (512876 return ret[512874])
  }
  function <=>[85797](arg lhs[85794]:_syncvar[84947](?), ref arg rhs[85799]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85802] "dead at end of block" "const" "insert auto destroy"
    (541552 'init var' tmp[85802] lhs[85794])
    (85805 'end of statement')
    (85809 call = lhs[85794] rhs[85799])
    (476914 'end of statement')
    (85814 call = rhs[85799] tmp[85802])
    (476915 'end of statement' tmp[85802])
    (512881 return _void[55])
  }
  function <=>[85823](ref arg lhs[85821]:_any[178](?), arg rhs[85826]:_syncvar[84947](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85830] "dead at end of block" "const" "insert auto destroy"
    (541554 'init var' tmp[85830] lhs[85821])
    (85833 'end of statement')
    (85837 call = lhs[85821] rhs[85826])
    (476917 'end of statement')
    (85842 call = rhs[85826] tmp[85830])
    (476918 'end of statement' tmp[85830])
    (512883 return _void[55])
  }
  function <=>[85853](arg lhs[85850]:_syncvar[84947](?), arg rhs[85856]:_syncvar[84947](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85860] "dead at end of block" "const" "insert auto destroy"
    (541556 'init var' tmp[85860] lhs[85850])
    (85863 'end of statement')
    (85867 call = lhs[85850] rhs[85856])
    (476920 'end of statement')
    (85872 call = rhs[85856] tmp[85860])
    (476921 'end of statement' tmp[85860])
    (512885 return _void[55])
  }
  function _synccls[86374](?).init[85895](arg _mt[86378]:_MT[238], arg this[86376]:_synccls[86374](?), arg valType[85893]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460031] "temporary of super field" "temp"
    (460039 'move' super_tmp[460031](460032 '.v' this[86376] c"super"))
    (460035 call init _mt[243] super_tmp[460031])
    (476923 'end of statement')
    unknown tmp[459984] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491974] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[630801] "expr temp" "maybe param" "maybe type" "temp"
      (630804 'move' call_tmp[630801](459986 '.v' this[86376] c"super"))
      (491978 'move' call_type_tmp[491974](459989 'typeof' call_tmp[630801]))
    }
    (459990 'move' tmp[459984] call_type_tmp[491974])
    unknown call_tmp[630806] "maybe param" "maybe type" "temp"
    (630809 'move' call_tmp[630806](459995 'cast' tmp[459984] this[86376]))
    unknown chpl__thisAsParent[459992] "dead at end of block" "insert auto destroy" "temp"
    (541558 'init var' chpl__thisAsParent[459992] call_tmp[630806] tmp[459984])
    (459998 'setcid' chpl__thisAsParent[459992])
    (476924 'end of statement')
    unknown tmp[460000] "temp" "type variable"
    (460002 'move' tmp[460000] valType[85893])
    (460004 'init field' this[86376] c"valType" tmp[460000])
    (476925 'end of statement')
    unknown tmp[460008] "temp"
    unknown call_tmp[630811] "expr temp" "maybe param" "maybe type" "temp"
    (630814 'move' call_tmp[630811](460017 '.v' this[86376] c"valType"))
    (460011 'default init var' tmp[460008] call_tmp[630811])
    (460013 '.=' this[86376] c"value" tmp[460008])
    (476926 'end of statement')
    val tmp[460020]:chpl_sync_aux_t[87955] "temp"
    (460023 'default init var' tmp[460020] chpl_sync_aux_t[87955])
    (460025 '.=' this[86376] c"syncAux" tmp[460020])
    (476927 'end of statement')
    (460030 'setcid' this[86376])
    (476928 'end of statement')
    unknown call_tmp[630818] "expr temp" "maybe param" "maybe type" "temp"
    (630821 'move' call_tmp[630818](377046 call syncAux _mt[243] this[86376]))
    (85916 call chpl_sync_initAux call_tmp[630818])
    (512887 return _void[55])
  }
  function _synccls[86374](?).deinit[85922](arg _mt[86382]:_MT[238], arg this[86380]:_synccls[86374](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630825] "expr temp" "maybe param" "maybe type" "temp"
    (630828 'move' call_tmp[630825](377051 call syncAux _mt[243] this[86380]))
    (85927 call chpl_sync_destroyAux call_tmp[630825])
    (512889 return _void[55])
  }
  function _synccls[86374](?).readFE[85934](arg _mt[86386]:_MT[238], arg this[86384]:_synccls[86374](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512893] "RVV" "temp"
    unknown ret[85937] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630832] "expr temp" "maybe param" "maybe type" "temp"
    (630835 'move' call_tmp[630832](377056 call valType _mt[243] this[86384]))
    (541560 'default init var' ret[85937] call_tmp[630832])
    (85940 'end of statement')
    const tmp[85980] "const" "temp"
    unknown call_tmp[630837] "expr temp" "maybe param" "maybe type" "temp"
    (630840 'move' call_tmp[630837](85977 '_wide_get_locale' this[86384]))
    (85982 'move' tmp[85980](85978 'deref' call_tmp[630837]))
    {
      {
        unknown localRet[85944] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541562] "maybe param" "maybe type" "temp"
        (541571 'move' type_tmp[541562](541568 call valType _mt[243] this[86384]))
        (541564 'init var split decl' localRet[85944] type_tmp[541562])
        (85947 'end of statement')
        (85951 call chpl_rmem_consist_release)
        (476931 'end of statement')
        unknown call_tmp[630846] "expr temp" "maybe param" "maybe type" "temp"
        (630849 'move' call_tmp[630846](377067 call syncAux _mt[243] this[86384]))
        (85956 call chpl_sync_waitFullAndLock call_tmp[630846])
        (476932 'end of statement')
        unknown call_tmp[630853] "maybe param" "maybe type" "temp"
        (630856 'move' call_tmp[630853](377073 call value _mt[243] this[86384]))
        (541573 'init var split init' localRet[85944] call_tmp[630853] type_tmp[541562])
        (476933 'end of statement' localRet[85944])
        unknown call_tmp[630860] "expr temp" "maybe param" "maybe type" "temp"
        (630863 'move' call_tmp[630860](377078 call syncAux _mt[243] this[86384]))
        (85966 call chpl_sync_markAndSignalEmpty call_tmp[630860])
        (476935 'end of statement')
        (85970 call chpl_rmem_consist_acquire)
        (476936 'end of statement')
        (85974 call = ret[85937] localRet[85944])
        (476937 'end of statement' ret[85937] localRet[85944])
      }
      (85985 'on block' 0 tmp[85980])
    }
    (512898 'move' ret[512893](512897 'deref' ret[85937]))
    gotoReturn _end_readFE[512891] _end_readFE[512891]
    (476940 'end of statement' ret[85937])
    label _end_readFE[512891]
    (512895 return ret[512893])
  }
  function _synccls[86374](?).readFF[85995](arg _mt[86390]:_MT[238], arg this[86388]:_synccls[86374](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512904] "RVV" "temp"
    unknown ret[85998] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630867] "expr temp" "maybe param" "maybe type" "temp"
    (630870 'move' call_tmp[630867](377086 call valType _mt[243] this[86388]))
    (541576 'default init var' ret[85998] call_tmp[630867])
    (86001 'end of statement')
    const tmp[86041] "const" "temp"
    unknown call_tmp[630872] "expr temp" "maybe param" "maybe type" "temp"
    (630875 'move' call_tmp[630872](86038 '_wide_get_locale' this[86388]))
    (86043 'move' tmp[86041](86039 'deref' call_tmp[630872]))
    {
      {
        unknown localRet[86005] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541578] "maybe param" "maybe type" "temp"
        (541587 'move' type_tmp[541578](541584 call valType _mt[243] this[86388]))
        (541580 'init var split decl' localRet[86005] type_tmp[541578])
        (86008 'end of statement')
        (86012 call chpl_rmem_consist_release)
        (476942 'end of statement')
        unknown call_tmp[630881] "expr temp" "maybe param" "maybe type" "temp"
        (630884 'move' call_tmp[630881](377097 call syncAux _mt[243] this[86388]))
        (86017 call chpl_sync_waitFullAndLock call_tmp[630881])
        (476943 'end of statement')
        unknown call_tmp[630888] "maybe param" "maybe type" "temp"
        (630891 'move' call_tmp[630888](377103 call value _mt[243] this[86388]))
        (541589 'init var split init' localRet[86005] call_tmp[630888] type_tmp[541578])
        (476944 'end of statement' localRet[86005])
        unknown call_tmp[630895] "expr temp" "maybe param" "maybe type" "temp"
        (630898 'move' call_tmp[630895](377108 call syncAux _mt[243] this[86388]))
        (86027 call chpl_sync_markAndSignalFull call_tmp[630895])
        (476946 'end of statement')
        (86031 call chpl_rmem_consist_acquire)
        (476947 'end of statement')
        (86035 call = ret[85998] localRet[86005])
        (476948 'end of statement' ret[85998] localRet[86005])
      }
      (86046 'on block' 0 tmp[86041])
    }
    (512909 'move' ret[512904](512908 'deref' ret[85998]))
    gotoReturn _end_readFF[512902] _end_readFF[512902]
    (476951 'end of statement' ret[85998])
    label _end_readFF[512902]
    (512906 return ret[512904])
  }
  function _synccls[86374](?).readXX[86056](arg _mt[86394]:_MT[238], arg this[86392]:_synccls[86374](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512915] "RVV" "temp"
    unknown ret[86059] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630902] "expr temp" "maybe param" "maybe type" "temp"
    (630905 'move' call_tmp[630902](377116 call valType _mt[243] this[86392]))
    (541592 'default init var' ret[86059] call_tmp[630902])
    (86062 'end of statement')
    const tmp[86102] "const" "temp"
    unknown call_tmp[630907] "expr temp" "maybe param" "maybe type" "temp"
    (630910 'move' call_tmp[630907](86099 '_wide_get_locale' this[86392]))
    (86104 'move' tmp[86102](86100 'deref' call_tmp[630907]))
    {
      {
        unknown localRet[86066] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541594] "maybe param" "maybe type" "temp"
        (541603 'move' type_tmp[541594](541600 call valType _mt[243] this[86392]))
        (541596 'init var split decl' localRet[86066] type_tmp[541594])
        (86069 'end of statement')
        (86073 call chpl_rmem_consist_release)
        (476953 'end of statement')
        unknown call_tmp[630916] "expr temp" "maybe param" "maybe type" "temp"
        (630919 'move' call_tmp[630916](377127 call syncAux _mt[243] this[86392]))
        (86078 call chpl_sync_lock call_tmp[630916])
        (476954 'end of statement')
        unknown call_tmp[630923] "maybe param" "maybe type" "temp"
        (630926 'move' call_tmp[630923](377133 call value _mt[243] this[86392]))
        (541605 'init var split init' localRet[86066] call_tmp[630923] type_tmp[541594])
        (476955 'end of statement' localRet[86066])
        unknown call_tmp[630930] "expr temp" "maybe param" "maybe type" "temp"
        (630933 'move' call_tmp[630930](377138 call syncAux _mt[243] this[86392]))
        (86088 call chpl_sync_unlock call_tmp[630930])
        (476957 'end of statement')
        (86092 call chpl_rmem_consist_acquire)
        (476958 'end of statement')
        (86096 call = ret[86059] localRet[86066])
        (476959 'end of statement' ret[86059] localRet[86066])
      }
      (86107 'on block' 0 tmp[86102])
    }
    (512920 'move' ret[512915](512919 'deref' ret[86059]))
    gotoReturn _end_readXX[512913] _end_readXX[512913]
    (476962 'end of statement' ret[86059])
    label _end_readXX[512913]
    (512917 return ret[512915])
  }
  function _synccls[86374](?).writeEF[86121](arg _mt[86398]:_MT[238], arg this[86396]:_synccls[86374](?), arg val[86118] :
  (377146 call valType _mt[243] this[86396])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86157] "const" "temp"
    unknown call_tmp[630937] "expr temp" "maybe param" "maybe type" "temp"
    (630940 'move' call_tmp[630937](86154 '_wide_get_locale' this[86396]))
    (86159 'move' tmp[86157](86155 'deref' call_tmp[630937]))
    {
      {
        (86132 call chpl_rmem_consist_release)
        (476964 'end of statement')
        unknown call_tmp[630944] "expr temp" "maybe param" "maybe type" "temp"
        (630947 'move' call_tmp[630944](377154 call syncAux _mt[243] this[86396]))
        (86138 call chpl_sync_waitEmptyAndLock call_tmp[630944])
        (476965 'end of statement')
        unknown call_tmp[630951] "expr temp" "maybe param" "maybe type" "temp"
        (630954 'move' call_tmp[630951](377159 call value _mt[243] this[86396]))
        (86142 call = call_tmp[630951] val[86118])
        (476966 'end of statement')
        unknown call_tmp[630958] "expr temp" "maybe param" "maybe type" "temp"
        (630961 'move' call_tmp[630958](377165 call syncAux _mt[243] this[86396]))
        (86148 call chpl_sync_markAndSignalFull call_tmp[630958])
        (476967 'end of statement')
        (86152 call chpl_rmem_consist_acquire)
      }
      (86162 'on block' 0 tmp[86157])
    }
    (512924 return _void[55])
  }
  {
    (86127 call <(86124 'lifetime_of' this[86396])(86126 'lifetime_of' val[86118]))
  }
  function _synccls[86374](?).writeFF[86175](arg _mt[86402]:_MT[238], arg this[86400]:_synccls[86374](?), arg val[86172] :
  (377170 call valType _mt[243] this[86400])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86211] "const" "temp"
    unknown call_tmp[630965] "expr temp" "maybe param" "maybe type" "temp"
    (630968 'move' call_tmp[630965](86208 '_wide_get_locale' this[86400]))
    (86213 'move' tmp[86211](86209 'deref' call_tmp[630965]))
    {
      {
        (86186 call chpl_rmem_consist_release)
        (476969 'end of statement')
        unknown call_tmp[630972] "expr temp" "maybe param" "maybe type" "temp"
        (630975 'move' call_tmp[630972](377178 call syncAux _mt[243] this[86400]))
        (86192 call chpl_sync_waitFullAndLock call_tmp[630972])
        (476970 'end of statement')
        unknown call_tmp[630979] "expr temp" "maybe param" "maybe type" "temp"
        (630982 'move' call_tmp[630979](377183 call value _mt[243] this[86400]))
        (86196 call = call_tmp[630979] val[86172])
        (476971 'end of statement')
        unknown call_tmp[630986] "expr temp" "maybe param" "maybe type" "temp"
        (630989 'move' call_tmp[630986](377189 call syncAux _mt[243] this[86400]))
        (86202 call chpl_sync_markAndSignalFull call_tmp[630986])
        (476972 'end of statement')
        (86206 call chpl_rmem_consist_acquire)
      }
      (86216 'on block' 0 tmp[86211])
    }
    (512926 return _void[55])
  }
  {
    (86181 call <(86178 'lifetime_of' this[86400])(86180 'lifetime_of' val[86172]))
  }
  function _synccls[86374](?).writeXF[86229](arg _mt[86406]:_MT[238], arg this[86404]:_synccls[86374](?), arg val[86226] :
  (377194 call valType _mt[243] this[86404])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86265] "const" "temp"
    unknown call_tmp[630993] "expr temp" "maybe param" "maybe type" "temp"
    (630996 'move' call_tmp[630993](86262 '_wide_get_locale' this[86404]))
    (86267 'move' tmp[86265](86263 'deref' call_tmp[630993]))
    {
      {
        (86240 call chpl_rmem_consist_release)
        (476974 'end of statement')
        unknown call_tmp[631000] "expr temp" "maybe param" "maybe type" "temp"
        (631003 'move' call_tmp[631000](377202 call syncAux _mt[243] this[86404]))
        (86246 call chpl_sync_lock call_tmp[631000])
        (476975 'end of statement')
        unknown call_tmp[631007] "expr temp" "maybe param" "maybe type" "temp"
        (631010 'move' call_tmp[631007](377207 call value _mt[243] this[86404]))
        (86250 call = call_tmp[631007] val[86226])
        (476976 'end of statement')
        unknown call_tmp[631014] "expr temp" "maybe param" "maybe type" "temp"
        (631017 'move' call_tmp[631014](377213 call syncAux _mt[243] this[86404]))
        (86256 call chpl_sync_markAndSignalFull call_tmp[631014])
        (476977 'end of statement')
        (86260 call chpl_rmem_consist_acquire)
      }
      (86270 'on block' 0 tmp[86265])
    }
    (512928 return _void[55])
  }
  {
    (86235 call <(86232 'lifetime_of' this[86404])(86234 'lifetime_of' val[86226]))
  }
  function _synccls[86374](?).reset[86279](arg _mt[86410]:_MT[238], arg this[86408]:_synccls[86374](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86314] "const" "temp"
    unknown call_tmp[631019] "expr temp" "maybe param" "maybe type" "temp"
    (631022 'move' call_tmp[631019](86311 '_wide_get_locale' this[86408]))
    (86316 'move' tmp[86314](86312 'deref' call_tmp[631019]))
    {
      {
        const defaultValue[86283] "dead at end of block" "const" "insert auto destroy"
        unknown call_tmp[631026] "expr temp" "maybe param" "maybe type" "temp"
        (631029 'move' call_tmp[631026](377219 call valType _mt[243] this[86408]))
        (541608 'default init var' defaultValue[86283] call_tmp[631026])
        (86286 'end of statement')
        (86290 call chpl_rmem_consist_release)
        (476979 'end of statement')
        unknown call_tmp[631033] "expr temp" "maybe param" "maybe type" "temp"
        (631036 'move' call_tmp[631033](377224 call syncAux _mt[243] this[86408]))
        (86295 call chpl_sync_lock call_tmp[631033])
        (476980 'end of statement')
        unknown call_tmp[631040] "expr temp" "maybe param" "maybe type" "temp"
        (631043 'move' call_tmp[631040](377229 call value _mt[243] this[86408]))
        (86299 call = call_tmp[631040] defaultValue[86283])
        (476981 'end of statement' defaultValue[86283])
        unknown call_tmp[631047] "expr temp" "maybe param" "maybe type" "temp"
        (631050 'move' call_tmp[631047](377235 call syncAux _mt[243] this[86408]))
        (86305 call chpl_sync_markAndSignalEmpty call_tmp[631047])
        (476983 'end of statement')
        (86309 call chpl_rmem_consist_acquire)
      }
      (86319 'on block' 0 tmp[86314])
    }
    (512930 return _void[55])
  }
  function _synccls[86374](?).isFull[86327](arg _mt[86414]:_MT[238], arg this[86412]:_synccls[86374](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512934] "RVV" "temp"
    unknown b[86330] "dead at end of block" "insert auto destroy"
    (541610 'default init var' b[86330] bool[10])
    (86333 'end of statement')
    const tmp[86360] "const" "temp"
    unknown call_tmp[631052] "expr temp" "maybe param" "maybe type" "temp"
    (631055 'move' call_tmp[631052](86357 '_wide_get_locale' this[86412]))
    (86362 'move' tmp[86360](86358 'deref' call_tmp[631052]))
    {
      {
        (86338 call chpl_rmem_consist_release)
        (476985 'end of statement')
        unknown call_tmp[631059] "expr temp" "maybe param" "maybe type" "temp"
        (631062 'move' call_tmp[631059](377242 call value _mt[243] this[86412]))
        unknown call_tmp[631064] "expr temp" "maybe param" "maybe type" "temp"
        (631067 'move' call_tmp[631064](86346 call c_ptrTo call_tmp[631059]))
        unknown call_tmp[631071] "expr temp" "maybe param" "maybe type" "temp"
        (631074 'move' call_tmp[631071](377247 call syncAux _mt[243] this[86412]))
        unknown call_tmp[631076] "expr temp" "maybe param" "maybe type" "temp"
        (631079 'move' call_tmp[631076](86349 call chpl_sync_isFull call_tmp[631064] call_tmp[631071]))
        (86350 call = b[86330] call_tmp[631076])
        (476986 'end of statement' b[86330])
        (86355 call chpl_rmem_consist_acquire)
      }
      (86365 'on block' 0 tmp[86360])
    }
    (512939 'move' ret[512934](512938 'deref' b[86330]))
    gotoReturn _end_isFull[512932] _end_isFull[512932]
    (476989 'end of statement' b[86330])
    label _end_isFull[512932]
    (512936 return ret[512934])
  }
  function _synccls[86374](?).super[777451](arg _mt[777453]:_MT[238], arg this[777455]:_synccls[86374](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777465] "RVV" "temp"
    unknown call_tmp[777472] "expr temp" "maybe param" "maybe type" "temp"
    (777475 'move' call_tmp[777472](777459 '.v' this[777455] c"super"))
    (777470 'move' ret[777465](777469 'deref' call_tmp[777472]))
    (777467 return ret[777465])
  }
  function _synccls[777482](?).valType[777477](arg _mt[777479]:_MT[238], arg this[777484]:_synccls[777482](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777533] "RVV" "temp" "type variable"
    unknown borrowOfThis[777486]
    (777525 'end of statement')
    (777488 'move' borrowOfThis[777486](777491 call _cast _borrowedNonNilable[214](?) this[777484]))
    (777526 'end of statement' borrowOfThis[777486])
    unknown call_tmp[777547] "expr temp" "maybe param" "maybe type" "temp"
    (777550 'move' call_tmp[777547](777515 'is bound' borrowOfThis[777486] c"valType"))
    if call_tmp[777547]
    {
      unknown call_tmp[777552] "expr temp" "maybe param" "maybe type" "temp"
      (777555 'move' call_tmp[777552](777496 '.v' borrowOfThis[777486] c"valType"))
      unknown call_tmp[777557] "expr temp" "maybe param" "maybe type" "temp"
      (777560 'move' call_tmp[777557](777511 call chpl_checkLegalTypeFieldAccessor this[777484] call_tmp[777552] "valType"))
      (777538 'move' ret[777533](777537 'deref' call_tmp[777557]))
      gotoReturn _end_valType[777531] _end_valType[777531]
      (777528 'end of statement' borrowOfThis[777486])
    }
    {
      (777543 'move' ret[777533](777542 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777531] _end_valType[777531]
    }
    label _end_valType[777531]
    (777535 return ret[777533])
  }
  function _synccls[777482](?).valType[777562](arg _mt[777564]:_MT[238], arg this[777566]:_synccls[777482](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777601] "RVV" "temp" "type variable"
    unknown borrowOfThis[777568] "type variable"
    (777593 'end of statement')
    (777570 'move' borrowOfThis[777568](777573 call _cast _borrowedNonNilable[214](?) this[777566]))
    (777594 'end of statement' borrowOfThis[777568])
    unknown call_tmp[777615] "expr temp" "maybe param" "maybe type" "temp"
    (777618 'move' call_tmp[777615](777583 'is bound' borrowOfThis[777568] c"valType"))
    if call_tmp[777615]
    {
      unknown call_tmp[777620] "expr temp" "maybe param" "maybe type" "temp"
      (777623 'move' call_tmp[777620](777578 '.v' borrowOfThis[777568] c"valType"))
      unknown call_tmp[777625] "expr temp" "maybe param" "maybe type" "temp"
      (777628 'move' call_tmp[777625](777579 call chpl_checkLegalTypeFieldAccessor this[777566] call_tmp[777620] "valType"))
      (777606 'move' ret[777601](777605 'deref' call_tmp[777625]))
      gotoReturn _end_valType[777599] _end_valType[777599]
      (777596 'end of statement' borrowOfThis[777568])
    }
    {
      (777611 'move' ret[777601](777610 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777599] _end_valType[777599]
    }
    label _end_valType[777599]
    (777603 return ret[777601])
  }
  function _synccls[86374](?).value[777630](arg _mt[777632]:_MT[238], arg this[777634]:_synccls[86374](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777644] "RVV" "temp"
    unknown call_tmp[777651] "expr temp" "maybe param" "maybe type" "temp"
    (777654 'move' call_tmp[777651](777638 '.' this[777634] c"value"))
    (777649 'move' ret[777644](777648 'addr of' call_tmp[777651]))
    (777646 return ret[777644])
  }
  function _synccls[86374](?).syncAux[777656](arg _mt[777658]:_MT[238], arg this[777660]:_synccls[86374](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777670] "RVV" "temp"
    unknown call_tmp[777677] "expr temp" "maybe param" "maybe type" "temp"
    (777680 'move' call_tmp[777677](777664 '.' this[777660] c"syncAux"))
    (777675 'move' ret[777670](777674 'addr of' call_tmp[777677]))
    (777672 return ret[777670])
  }
  function _synccls[86374](?).writeThis[777682](arg _mt[777686]:_MT[238], arg this[777684]:_synccls[86374](?), arg f[777685]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777691 call writeThisDefaultImpl f[777685] this[777684])
    (777696 return _void[55])
  }
  function _synccls[86374](?).readThis[777698](arg _mt[777702]:_MT[238], arg this[777700]:_synccls[86374](?), arg f[777701]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777706 call readThisDefaultImpl f[777701] this[777700])
    (777712 return _void[55])
  }
  type _synccls[86374](?) val super[355672]:object[22] "super class" unknown valType[85878] "type variable" unknown value[85882] valType[85878] val syncAux[85887]:chpl_sync_aux_t[87955] chpl_sync_aux_t[87955]
  type _synccls[777482](?)
  type unmanaged _synccls[415449](?)
  type _synccls[376928](?)
  function _qthreads_synccls[86865](?).init[86430](arg _mt[86869]:_MT[238], arg this[86867]:_qthreads_synccls[86865](?), arg valType[86428]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460081] "temporary of super field" "temp"
    (460089 'move' super_tmp[460081](460082 '.v' this[86867] c"super"))
    (460085 call init _mt[243] super_tmp[460081])
    (476991 'end of statement')
    unknown tmp[460046] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491980] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631081] "expr temp" "maybe param" "maybe type" "temp"
      (631084 'move' call_tmp[631081](460048 '.v' this[86867] c"super"))
      (491984 'move' call_type_tmp[491980](460051 'typeof' call_tmp[631081]))
    }
    (460052 'move' tmp[460046] call_type_tmp[491980])
    unknown call_tmp[631086] "maybe param" "maybe type" "temp"
    (631089 'move' call_tmp[631086](460057 'cast' tmp[460046] this[86867]))
    unknown chpl__thisAsParent[460054] "dead at end of block" "insert auto destroy" "temp"
    (541612 'init var' chpl__thisAsParent[460054] call_tmp[631086] tmp[460046])
    (460060 'setcid' chpl__thisAsParent[460054])
    (476992 'end of statement')
    unknown tmp[460062] "temp" "type variable"
    (460064 'move' tmp[460062] valType[86428])
    (460066 'init field' this[86867] c"valType" tmp[460062])
    (476993 'end of statement')
    val tmp[460070]:aligned_t[88362] "temp"
    (460073 'default init var' tmp[460070] aligned_t[88362])
    (460075 '.=' this[86867] c"alignedValue" tmp[460070])
    (476994 'end of statement')
    (460080 'setcid' this[86867])
    (476995 'end of statement')
    unknown call_tmp[631093] "expr temp" "maybe param" "maybe type" "temp"
    (631096 'move' call_tmp[631093](377257 call alignedValue _mt[243] this[86867]))
    unknown call_tmp[631098] "expr temp" "maybe param" "maybe type" "temp"
    (631101 'move' call_tmp[631098](86454 call defaultOfAlignedT valType[86428]))
    (86455 call qthread_purge_to call_tmp[631093] call_tmp[631098])
    (512943 return _void[55])
  }
  function _qthreads_synccls[86865](?).deinit[86461](arg _mt[86873]:_MT[238], arg this[86871]:_qthreads_synccls[86865](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631105] "expr temp" "maybe param" "maybe type" "temp"
    (631108 'move' call_tmp[631105](377263 call alignedValue _mt[243] this[86871]))
    (86466 call qthread_fill call_tmp[631105])
    (512945 return _void[55])
  }
  function _qthreads_synccls[86865](?).readFE[86473](arg _mt[86877]:_MT[238], arg this[86875]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512949] "RVV" "temp"
    unknown ret[86476] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631112] "expr temp" "maybe param" "maybe type" "temp"
    (631115 'move' call_tmp[631112](377268 call valType _mt[243] this[86875]))
    (541614 'default init var' ret[86476] call_tmp[631112])
    (86479 'end of statement')
    const tmp[86513] "const" "temp"
    unknown call_tmp[631117] "expr temp" "maybe param" "maybe type" "temp"
    (631120 'move' call_tmp[631117](86510 '_wide_get_locale' this[86875]))
    (86515 'move' tmp[86513](86511 'deref' call_tmp[631117]))
    {
      {
        unknown alignedLocalRet[86483] "dead at end of block" "insert auto destroy"
        (541616 'default init var' alignedLocalRet[86483] aligned_t[88362])
        (86486 'end of statement')
        (86490 call chpl_rmem_consist_release)
        (476998 'end of statement')
        unknown call_tmp[631124] "expr temp" "maybe param" "maybe type" "temp"
        (631127 'move' call_tmp[631124](377276 call alignedValue _mt[243] this[86875]))
        (86496 call qthread_readFE alignedLocalRet[86483] call_tmp[631124])
        (476999 'end of statement' alignedLocalRet[86483])
        (86500 call chpl_rmem_consist_acquire)
        (477001 'end of statement')
        unknown call_tmp[631131] "expr temp" "maybe param" "maybe type" "temp"
        (631134 'move' call_tmp[631131](377283 call valType _mt[243] this[86875]))
        unknown call_tmp[631136] "expr temp" "maybe param" "maybe type" "temp"
        (631139 'move' call_tmp[631136](86505 call _cast call_tmp[631131] alignedLocalRet[86483]))
        (86507 call = ret[86476] call_tmp[631136])
        (477002 'end of statement' ret[86476] alignedLocalRet[86483])
      }
      (86518 'on block' 0 tmp[86513])
    }
    (512954 'move' ret[512949](512953 'deref' ret[86476]))
    gotoReturn _end_readFE[512947] _end_readFE[512947]
    (477005 'end of statement' ret[86476])
    label _end_readFE[512947]
    (512951 return ret[512949])
  }
  function _qthreads_synccls[86865](?).readFF[86528](arg _mt[86881]:_MT[238], arg this[86879]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512960] "RVV" "temp"
    unknown ret[86531] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631143] "expr temp" "maybe param" "maybe type" "temp"
    (631146 'move' call_tmp[631143](377289 call valType _mt[243] this[86879]))
    (541618 'default init var' ret[86531] call_tmp[631143])
    (86534 'end of statement')
    const tmp[86568] "const" "temp"
    unknown call_tmp[631148] "expr temp" "maybe param" "maybe type" "temp"
    (631151 'move' call_tmp[631148](86565 '_wide_get_locale' this[86879]))
    (86570 'move' tmp[86568](86566 'deref' call_tmp[631148]))
    {
      {
        unknown alignedLocalRet[86538] "dead at end of block" "insert auto destroy"
        (541620 'default init var' alignedLocalRet[86538] aligned_t[88362])
        (86541 'end of statement')
        (86545 call chpl_rmem_consist_release)
        (477007 'end of statement')
        unknown call_tmp[631155] "expr temp" "maybe param" "maybe type" "temp"
        (631158 'move' call_tmp[631155](377297 call alignedValue _mt[243] this[86879]))
        (86551 call qthread_readFF alignedLocalRet[86538] call_tmp[631155])
        (477008 'end of statement' alignedLocalRet[86538])
        (86555 call chpl_rmem_consist_acquire)
        (477010 'end of statement')
        unknown call_tmp[631162] "expr temp" "maybe param" "maybe type" "temp"
        (631165 'move' call_tmp[631162](377304 call valType _mt[243] this[86879]))
        unknown call_tmp[631167] "expr temp" "maybe param" "maybe type" "temp"
        (631170 'move' call_tmp[631167](86560 call _cast call_tmp[631162] alignedLocalRet[86538]))
        (86562 call = ret[86531] call_tmp[631167])
        (477011 'end of statement' ret[86531] alignedLocalRet[86538])
      }
      (86573 'on block' 0 tmp[86568])
    }
    (512965 'move' ret[512960](512964 'deref' ret[86531]))
    gotoReturn _end_readFF[512958] _end_readFF[512958]
    (477014 'end of statement' ret[86531])
    label _end_readFF[512958]
    (512962 return ret[512960])
  }
  function _qthreads_synccls[86865](?).readXX[86583](arg _mt[86885]:_MT[238], arg this[86883]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512971] "RVV" "temp"
    unknown ret[86586] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631174] "expr temp" "maybe param" "maybe type" "temp"
    (631177 'move' call_tmp[631174](377310 call valType _mt[243] this[86883]))
    (541622 'default init var' ret[86586] call_tmp[631174])
    (86589 'end of statement')
    const tmp[86623] "const" "temp"
    unknown call_tmp[631179] "expr temp" "maybe param" "maybe type" "temp"
    (631182 'move' call_tmp[631179](86620 '_wide_get_locale' this[86883]))
    (86625 'move' tmp[86623](86621 'deref' call_tmp[631179]))
    {
      {
        unknown alignedLocalRet[86593] "dead at end of block" "insert auto destroy"
        (541624 'default init var' alignedLocalRet[86593] aligned_t[88362])
        (86596 'end of statement')
        (86600 call chpl_rmem_consist_release)
        (477016 'end of statement')
        unknown call_tmp[631186] "expr temp" "maybe param" "maybe type" "temp"
        (631189 'move' call_tmp[631186](377318 call alignedValue _mt[243] this[86883]))
        (86606 call qthread_readXX alignedLocalRet[86593] call_tmp[631186])
        (477017 'end of statement' alignedLocalRet[86593])
        (86610 call chpl_rmem_consist_acquire)
        (477019 'end of statement')
        unknown call_tmp[631193] "expr temp" "maybe param" "maybe type" "temp"
        (631196 'move' call_tmp[631193](377325 call valType _mt[243] this[86883]))
        unknown call_tmp[631198] "expr temp" "maybe param" "maybe type" "temp"
        (631201 'move' call_tmp[631198](86615 call _cast call_tmp[631193] alignedLocalRet[86593]))
        (86617 call = ret[86586] call_tmp[631198])
        (477020 'end of statement' ret[86586] alignedLocalRet[86593])
      }
      (86628 'on block' 0 tmp[86623])
    }
    (512976 'move' ret[512971](512975 'deref' ret[86586]))
    gotoReturn _end_readXX[512969] _end_readXX[512969]
    (477023 'end of statement' ret[86586])
    label _end_readXX[512969]
    (512973 return ret[512971])
  }
  function _qthreads_synccls[86865](?).writeEF[86642](arg _mt[86889]:_MT[238], arg this[86887]:_qthreads_synccls[86865](?), arg val[86639] :
  (377331 call valType _mt[243] this[86887])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86672] "const" "temp"
    unknown call_tmp[631205] "expr temp" "maybe param" "maybe type" "temp"
    (631208 'move' call_tmp[631205](86669 '_wide_get_locale' this[86887]))
    (86674 'move' tmp[86672](86670 'deref' call_tmp[631205]))
    {
      {
        (86653 call chpl_rmem_consist_release)
        (477025 'end of statement')
        unknown call_tmp[631212] "expr temp" "maybe param" "maybe type" "temp"
        (631215 'move' call_tmp[631212](377339 call alignedValue _mt[243] this[86887]))
        unknown call_tmp[631217] "expr temp" "maybe param" "maybe type" "temp"
        (631220 'move' call_tmp[631217](86661 call _cast aligned_t[88362] val[86639]))
        (86663 call qthread_writeEF call_tmp[631212] call_tmp[631217])
        (477026 'end of statement')
        (86667 call chpl_rmem_consist_acquire)
      }
      (86677 'on block' 0 tmp[86672])
    }
    (512980 return _void[55])
  }
  {
    (86648 call <(86645 'lifetime_of' this[86887])(86647 'lifetime_of' val[86639]))
  }
  function _qthreads_synccls[86865](?).writeFF[86690](arg _mt[86893]:_MT[238], arg this[86891]:_qthreads_synccls[86865](?), arg val[86687] :
  (377346 call valType _mt[243] this[86891])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86720] "const" "temp"
    unknown call_tmp[631224] "expr temp" "maybe param" "maybe type" "temp"
    (631227 'move' call_tmp[631224](86717 '_wide_get_locale' this[86891]))
    (86722 'move' tmp[86720](86718 'deref' call_tmp[631224]))
    {
      {
        (86701 call chpl_rmem_consist_release)
        (477028 'end of statement')
        unknown call_tmp[631231] "expr temp" "maybe param" "maybe type" "temp"
        (631234 'move' call_tmp[631231](377354 call alignedValue _mt[243] this[86891]))
        unknown call_tmp[631236] "expr temp" "maybe param" "maybe type" "temp"
        (631239 'move' call_tmp[631236](86709 call _cast aligned_t[88362] val[86687]))
        (86711 call qthread_writeFF call_tmp[631231] call_tmp[631236])
        (477029 'end of statement')
        (86715 call chpl_rmem_consist_acquire)
      }
      (86725 'on block' 0 tmp[86720])
    }
    (512982 return _void[55])
  }
  {
    (86696 call <(86693 'lifetime_of' this[86891])(86695 'lifetime_of' val[86687]))
  }
  function _qthreads_synccls[86865](?).writeXF[86738](arg _mt[86897]:_MT[238], arg this[86895]:_qthreads_synccls[86865](?), arg val[86735] :
  (377361 call valType _mt[243] this[86895])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86768] "const" "temp"
    unknown call_tmp[631243] "expr temp" "maybe param" "maybe type" "temp"
    (631246 'move' call_tmp[631243](86765 '_wide_get_locale' this[86895]))
    (86770 'move' tmp[86768](86766 'deref' call_tmp[631243]))
    {
      {
        (86749 call chpl_rmem_consist_release)
        (477031 'end of statement')
        unknown call_tmp[631250] "expr temp" "maybe param" "maybe type" "temp"
        (631253 'move' call_tmp[631250](377369 call alignedValue _mt[243] this[86895]))
        unknown call_tmp[631255] "expr temp" "maybe param" "maybe type" "temp"
        (631258 'move' call_tmp[631255](86757 call _cast aligned_t[88362] val[86735]))
        (86759 call qthread_writeF call_tmp[631250] call_tmp[631255])
        (477032 'end of statement')
        (86763 call chpl_rmem_consist_acquire)
      }
      (86773 'on block' 0 tmp[86768])
    }
    (512984 return _void[55])
  }
  {
    (86744 call <(86741 'lifetime_of' this[86895])(86743 'lifetime_of' val[86735]))
  }
  function _qthreads_synccls[86865](?).reset[86782](arg _mt[86901]:_MT[238], arg this[86899]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86806] "const" "temp"
    unknown call_tmp[631260] "expr temp" "maybe param" "maybe type" "temp"
    (631263 'move' call_tmp[631260](86803 '_wide_get_locale' this[86899]))
    (86808 'move' tmp[86806](86804 'deref' call_tmp[631260]))
    {
      {
        (86787 call chpl_rmem_consist_release)
        (477034 'end of statement')
        unknown call_tmp[631267] "expr temp" "maybe param" "maybe type" "temp"
        (631270 'move' call_tmp[631267](377377 call alignedValue _mt[243] this[86899]))
        unknown call_tmp[631274] "expr temp" "maybe param" "maybe type" "temp"
        (631277 'move' call_tmp[631274](377382 call valType _mt[243] this[86899]))
        unknown call_tmp[631279] "expr temp" "maybe param" "maybe type" "temp"
        (631282 'move' call_tmp[631279](86796 call defaultOfAlignedT call_tmp[631274]))
        (86797 call qthread_purge_to call_tmp[631267] call_tmp[631279])
        (477035 'end of statement')
        (86801 call chpl_rmem_consist_acquire)
      }
      (86811 'on block' 0 tmp[86806])
    }
    (512986 return _void[55])
  }
  function _qthreads_synccls[86865](?).isFull[86819](arg _mt[86905]:_MT[238], arg this[86903]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512990] "RVV" "temp"
    unknown b[86822] "dead at end of block" "insert auto destroy"
    (541626 'default init var' b[86822] bool[10])
    (86825 'end of statement')
    const tmp[86851] "const" "temp"
    unknown call_tmp[631284] "expr temp" "maybe param" "maybe type" "temp"
    (631287 'move' call_tmp[631284](86848 '_wide_get_locale' this[86903]))
    (86853 'move' tmp[86851](86849 'deref' call_tmp[631284]))
    {
      {
        (86830 call chpl_rmem_consist_release)
        (477037 'end of statement')
        unknown call_tmp[631291] "expr temp" "maybe param" "maybe type" "temp"
        (631294 'move' call_tmp[631291](377389 call alignedValue _mt[243] this[86903]))
        unknown call_tmp[631296] "expr temp" "maybe param" "maybe type" "temp"
        (631299 'move' call_tmp[631296](86837 call qthread_feb_status call_tmp[631291]))
        unknown call_tmp[631301] "expr temp" "maybe param" "maybe type" "temp"
        (631304 'move' call_tmp[631301](86839 call _cast bool[10] call_tmp[631296]))
        (86841 call = b[86822] call_tmp[631301])
        (477038 'end of statement' b[86822])
        (86846 call chpl_rmem_consist_acquire)
      }
      (86856 'on block' 0 tmp[86851])
    }
    (512995 'move' ret[512990](512994 'deref' b[86822]))
    gotoReturn _end_isFull[512988] _end_isFull[512988]
    (477041 'end of statement' b[86822])
    label _end_isFull[512988]
    (512992 return ret[512990])
  }
  function _qthreads_synccls[86865](?).super[777714](arg _mt[777716]:_MT[238], arg this[777718]:_qthreads_synccls[86865](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777728] "RVV" "temp"
    unknown call_tmp[777735] "expr temp" "maybe param" "maybe type" "temp"
    (777738 'move' call_tmp[777735](777722 '.v' this[777718] c"super"))
    (777733 'move' ret[777728](777732 'deref' call_tmp[777735]))
    (777730 return ret[777728])
  }
  function _qthreads_synccls[777745](?).valType[777740](arg _mt[777742]:_MT[238], arg this[777747]:_qthreads_synccls[777745](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777782] "RVV" "temp" "type variable"
    unknown borrowOfThis[777749]
    (777774 'end of statement')
    (777751 'move' borrowOfThis[777749](777754 call _cast _borrowedNonNilable[214](?) this[777747]))
    (777775 'end of statement' borrowOfThis[777749])
    unknown call_tmp[777796] "expr temp" "maybe param" "maybe type" "temp"
    (777799 'move' call_tmp[777796](777764 'is bound' borrowOfThis[777749] c"valType"))
    if call_tmp[777796]
    {
      unknown call_tmp[777801] "expr temp" "maybe param" "maybe type" "temp"
      (777804 'move' call_tmp[777801](777759 '.v' borrowOfThis[777749] c"valType"))
      unknown call_tmp[777806] "expr temp" "maybe param" "maybe type" "temp"
      (777809 'move' call_tmp[777806](777760 call chpl_checkLegalTypeFieldAccessor this[777747] call_tmp[777801] "valType"))
      (777787 'move' ret[777782](777786 'deref' call_tmp[777806]))
      gotoReturn _end_valType[777780] _end_valType[777780]
      (777777 'end of statement' borrowOfThis[777749])
    }
    {
      (777792 'move' ret[777782](777791 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777780] _end_valType[777780]
    }
    label _end_valType[777780]
    (777784 return ret[777782])
  }
  function _qthreads_synccls[777745](?).valType[777811](arg _mt[777813]:_MT[238], arg this[777815]:_qthreads_synccls[777745](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777850] "RVV" "temp" "type variable"
    unknown borrowOfThis[777817] "type variable"
    (777842 'end of statement')
    (777819 'move' borrowOfThis[777817](777822 call _cast _borrowedNonNilable[214](?) this[777815]))
    (777843 'end of statement' borrowOfThis[777817])
    unknown call_tmp[777864] "expr temp" "maybe param" "maybe type" "temp"
    (777867 'move' call_tmp[777864](777832 'is bound' borrowOfThis[777817] c"valType"))
    if call_tmp[777864]
    {
      unknown call_tmp[777869] "expr temp" "maybe param" "maybe type" "temp"
      (777872 'move' call_tmp[777869](777827 '.v' borrowOfThis[777817] c"valType"))
      unknown call_tmp[777874] "expr temp" "maybe param" "maybe type" "temp"
      (777877 'move' call_tmp[777874](777828 call chpl_checkLegalTypeFieldAccessor this[777815] call_tmp[777869] "valType"))
      (777855 'move' ret[777850](777854 'deref' call_tmp[777874]))
      gotoReturn _end_valType[777848] _end_valType[777848]
      (777845 'end of statement' borrowOfThis[777817])
    }
    {
      (777860 'move' ret[777850](777859 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777848] _end_valType[777848]
    }
    label _end_valType[777848]
    (777852 return ret[777850])
  }
  function _qthreads_synccls[86865](?).alignedValue[777879](arg _mt[777881]:_MT[238], arg this[777883]:_qthreads_synccls[86865](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777893] "RVV" "temp"
    unknown call_tmp[777900] "expr temp" "maybe param" "maybe type" "temp"
    (777903 'move' call_tmp[777900](777887 '.' this[777883] c"alignedValue"))
    (777898 'move' ret[777893](777897 'addr of' call_tmp[777900]))
    (777895 return ret[777893])
  }
  function _qthreads_synccls[86865](?).writeThis[777905](arg _mt[777909]:_MT[238], arg this[777907]:_qthreads_synccls[86865](?), arg f[777908]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777914 call writeThisDefaultImpl f[777908] this[777907])
    (777919 return _void[55])
  }
  function _qthreads_synccls[86865](?).readThis[777921](arg _mt[777925]:_MT[238], arg this[777923]:_qthreads_synccls[86865](?), arg f[777924]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777929 call readThisDefaultImpl f[777924] this[777923])
    (777935 return _void[55])
  }
  type _qthreads_synccls[86865](?) val super[355674]:object[22] "super class" unknown valType[86418] "type variable" val alignedValue[86422]:aligned_t[88362] aligned_t[88362]
  type _qthreads_synccls[777745](?)
  type unmanaged _qthreads_synccls[415446](?)
  type _qthreads_synccls[376923](?)
  function isSyncValue[86914](arg x[86911]:_syncvar[84947](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513001] "RVV" "param" "temp"
    (513006 'move' ret[513001](513005 'deref' 1))
    (513003 return ret[513001])
  }
  function isSyncValue[86926](arg x[86924]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513010] "RVV" "param" "temp"
    (513015 'move' ret[513010](513014 'deref' 0))
    (513012 return ret[513010])
  }
  function _singlevar[87256](?).init[86957](arg _mt[87260]:_MT[238], ref arg this[87258]:_singlevar[87256](?), arg valType[86955]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (86962 call ensureFEType valType[86955])
    (477045 'end of statement')
    unknown tmp[460092] "temp" "type variable"
    (460094 'move' tmp[460092] valType[86955])
    (460096 'init field' this[87258] c"valType" tmp[460092])
    (477046 'end of statement')
    unknown call_tmp[631306] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631309 'move' call_tmp[631306](747827 'new' _singlecls[377395](?) valType[86955](_chpl_manager = unmanaged[220](?))))
    unknown call_tmp[631311] "expr temp" "maybe param" "maybe type" "temp"
    (631314 'move' call_tmp[631311](460111 '.v' this[87258] c"valType"))
    unknown call_tmp[631316] "maybe param" "maybe type" "temp"
    (631319 'move' call_tmp[631316](460103 call unmanaged _singlecls[415452](?) call_tmp[631311]))
    unknown tmp[460100] "temp"
    (460105 'init var' tmp[460100] call_tmp[631306] call_tmp[631316])
    (460107 'init field' this[87258] c"wrapped" tmp[460100])
    (477047 'end of statement')
    unknown tmp[460116] "temp"
    (460119 'init var' tmp[460116] 1 bool[10])
    (460121 'init field' this[87258] c"isOwned" tmp[460116])
    (477048 'end of statement')
    (513017 return _void[55])
  }
  function _singlevar[87256](?).init[86992](arg _mt[87264]:_MT[238], ref arg this[87262]:_singlevar[87256](?), const arg other[86989]:_singlevar[87256](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[460125] "temp" "type variable"
    (460127 'move' tmp[460125](86999 call valType _mt[243] other[86989]))
    (460129 'init field' this[87262] c"valType" tmp[460125])
    (477049 'end of statement')
    unknown call_tmp[631325] "maybe param" "maybe type" "temp"
    (631328 'move' call_tmp[631325](87008 call wrapped _mt[243] other[86989]))
    unknown call_tmp[631330] "expr temp" "maybe param" "maybe type" "temp"
    (631333 'move' call_tmp[631330](460144 '.v' this[87262] c"valType"))
    unknown call_tmp[631335] "maybe param" "maybe type" "temp"
    (631338 'move' call_tmp[631335](460136 call unmanaged _singlecls[415452](?) call_tmp[631330]))
    unknown tmp[460133] "temp"
    (460138 'init var' tmp[460133] call_tmp[631325] call_tmp[631335])
    (460140 'init field' this[87262] c"wrapped" tmp[460133])
    (477050 'end of statement')
    unknown tmp[460147] "temp"
    (460150 'init var' tmp[460147] 0 bool[10])
    (460152 'init field' this[87262] c"isOwned" tmp[460147])
    (477051 'end of statement')
    (513019 return _void[55])
  }
  function _singlevar[87256](?).init=[87027](arg _mt[87268]:_MT[238], ref arg this[87266]:_singlevar[87256](?), const arg other[87024]:_singlevar[87256](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631340] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631343 'move' call_tmp[631340](87036 'typeof' this[87266]))
    unknown call_tmp[631347] "expr temp" "maybe param" "maybe type" "temp"
    (631350 'move' call_tmp[631347](87037 call valType _mt[243] call_tmp[631340]))
    unknown call_tmp[631354] "expr temp" "maybe param" "maybe type" "temp"
    (631357 'move' call_tmp[631354](87031 call valType _mt[243] other[87024]))
    unknown call_tmp[631359] "expr temp" "maybe param" "maybe type" "temp"
    (631362 'move' call_tmp[631359](354264 'is_coercible' call_tmp[631347] call_tmp[631354]))
    unknown call_tmp[631364] "expr temp" "maybe param" "maybe type" "temp"
    (631367 'move' call_tmp[631364](87042 call == call_tmp[631359] 0))
    unknown call_tmp[631369] "expr temp" "maybe param" "maybe type" "temp"
    (631372 'move' call_tmp[631369](87108 call _cond_test call_tmp[631364]))
    if call_tmp[631369]
    {
      unknown call_tmp[631374] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631377 'move' call_tmp[631374](87046 'typeof' this[87266]))
      unknown call_tmp[631379] "expr temp" "maybe param" "maybe type" "temp"
      (631382 'move' call_tmp[631379](87048 call _cast string[26] call_tmp[631374]))
      unknown call_tmp[631384] "expr temp" "maybe param" "maybe type" "temp"
      (631387 'move' call_tmp[631384](87050 call + "'" call_tmp[631379]))
      unknown call_tmp[631389] "expr temp" "maybe param" "maybe type" "temp"
      (631392 'move' call_tmp[631389](87053 call + call_tmp[631384] "' from '"))
      unknown call_tmp[631394] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631397 'move' call_tmp[631394](87056 'typeof' other[87024]))
      unknown call_tmp[631399] "expr temp" "maybe param" "maybe type" "temp"
      (631402 'move' call_tmp[631399](87058 call _cast string[26] call_tmp[631394]))
      unknown call_tmp[631404] "expr temp" "maybe param" "maybe type" "temp"
      (631407 'move' call_tmp[631404](87060 call + call_tmp[631389] call_tmp[631399]))
      unknown call_tmp[631409] "maybe param" "maybe type" "temp"
      (631412 'move' call_tmp[631409](87063 call + call_tmp[631404] "'"))
      unknown theseTypes[87065] "dead at end of block" "param"
      (541628 'init var' theseTypes[87065] call_tmp[631409])
      (87068 'end of statement')
      unknown call_tmp[631416] "expr temp" "maybe param" "maybe type" "temp"
      (631419 'move' call_tmp[631416](87072 call valType _mt[243] other[87024]))
      unknown call_tmp[631421] "expr temp" "maybe param" "maybe type" "temp"
      (631424 'move' call_tmp[631421](87076 call _cast string[26] call_tmp[631416]))
      unknown call_tmp[631426] "expr temp" "maybe param" "maybe type" "temp"
      (631429 'move' call_tmp[631426](87078 call + "because '" call_tmp[631421]))
      unknown call_tmp[631431] "expr temp" "maybe param" "maybe type" "temp"
      (631434 'move' call_tmp[631431](87081 call + call_tmp[631426] "' is not coercible to '"))
      unknown call_tmp[631436] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631439 'move' call_tmp[631436](87084 'typeof' this[87266]))
      unknown call_tmp[631443] "expr temp" "maybe param" "maybe type" "temp"
      (631446 'move' call_tmp[631443](87085 call valType _mt[243] call_tmp[631436]))
      unknown call_tmp[631448] "expr temp" "maybe param" "maybe type" "temp"
      (631451 'move' call_tmp[631448](87089 call _cast string[26] call_tmp[631443]))
      unknown call_tmp[631453] "expr temp" "maybe param" "maybe type" "temp"
      (631456 'move' call_tmp[631453](87091 call + call_tmp[631431] call_tmp[631448]))
      unknown call_tmp[631458] "maybe param" "maybe type" "temp"
      (631461 'move' call_tmp[631458](87094 call + call_tmp[631453] "'"))
      unknown because[87096] "dead at end of block" "param"
      (541630 'init var' because[87096] call_tmp[631458])
      (87099 'end of statement')
      (87106 call compilerError "cannot initialize " theseTypes[87065] " " because[87096])
    }
    unknown call_tmp[631465] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631468 'move' call_tmp[631465](87118 'typeof' this[87266]))
    unknown call_tmp[631472] "expr temp" "maybe param" "maybe type" "temp"
    (631475 'move' call_tmp[631472](87119 call valType _mt[243] call_tmp[631465]))
    (87123 call(87114 call (partial) init _mt[243] this[87266]) call_tmp[631472])
    (477053 'end of statement')
    unknown call_tmp[631481] "expr temp" "maybe param" "maybe type" "temp"
    (631484 'move' call_tmp[631481](87134 call(87130 call (partial) readFF _mt[243] other[87024])))
    (87136 call(87126 call (partial) writeEF _mt[243] this[87266]) call_tmp[631481])
    (513021 return _void[55])
  }
  function _singlevar[87256](?).init=[87150](arg _mt[87272]:_MT[238], ref arg this[87270]:_singlevar[87256](?), const arg other[87147] :
  unknown call_tmp[631486] "expr temp" "maybe param" "maybe type" "temp" "type variable") : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631495] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631498 'move' call_tmp[631495](87157 'typeof' other[87147]))
    (87159 call(87153 call (partial) init _mt[243] this[87270]) call_tmp[631495])
    (477055 'end of statement')
    (87168 call(87163 call (partial) writeEF _mt[243] this[87270]) other[87147])
    (513023 return _void[55])
  }
  function _singlevar[87256](?).deinit[87174](arg _mt[87276]:_MT[238], arg this[87274]:_singlevar[87256](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631504] "expr temp" "maybe param" "maybe type" "temp"
    (631507 'move' call_tmp[631504](377432 call isOwned _mt[243] this[87274]))
    unknown call_tmp[631509] "expr temp" "maybe param" "maybe type" "temp"
    (631512 'move' call_tmp[631509](87178 call == call_tmp[631504] 1))
    unknown call_tmp[631514] "expr temp" "maybe param" "maybe type" "temp"
    (631517 'move' call_tmp[631514](87185 call _cond_test call_tmp[631509]))
    if call_tmp[631514]
    {
      unknown call_tmp[631521] "expr temp" "maybe param" "maybe type" "temp"
      (631524 'move' call_tmp[631521](377437 call wrapped _mt[243] this[87274]))
      (87182 call chpl__delete call_tmp[631521])
    }
    (513025 return _void[55])
  }
  function _singlevar[87256](?).readThis[87197](arg _mt[87280]:_MT[238], arg this[87278]:_singlevar[87256](?), arg x[87195]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87218 call compilerError "single variables cannot currently be read - use writeEF instead")
    (513027 return _void[55])
  }
  function _singlevar[87256](?).writeThis[87227](arg _mt[87284]:_MT[238], arg this[87282]:_singlevar[87256](?), arg x[87225]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87250 call compilerError "single variables cannot currently be written - apply readFF() to those variables first")
    (513029 return _void[55])
  }
  function _singlevar[87256](?).valType[777937](arg _mt[777939]:_MT[238], arg this[777941]:_singlevar[87256](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[777960] "RVV" "temp" "type variable"
    unknown call_tmp[777974] "expr temp" "maybe param" "maybe type" "temp"
    (777977 'move' call_tmp[777974](777946 'is bound' this[777941] c"valType"))
    if call_tmp[777974]
    {
      unknown call_tmp[777979] "expr temp" "maybe param" "maybe type" "temp"
      (777982 'move' call_tmp[777979](777945 '.v' this[777941] c"valType"))
      (777965 'move' ret[777960](777964 'deref' call_tmp[777979]))
      gotoReturn _end_valType[777958] _end_valType[777958]
    }
    {
      (777970 'move' ret[777960](777969 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777958] _end_valType[777958]
    }
    label _end_valType[777958]
    (777962 return ret[777960])
  }
  function _singlevar[87256](?).valType[777984](arg _mt[777986]:_MT[238], arg this[777988]:_singlevar[87256](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[778007] "RVV" "temp" "type variable"
    unknown call_tmp[778021] "expr temp" "maybe param" "maybe type" "temp"
    (778024 'move' call_tmp[778021](777993 'is bound' this[777988] c"valType"))
    if call_tmp[778021]
    {
      unknown call_tmp[778026] "expr temp" "maybe param" "maybe type" "temp"
      (778029 'move' call_tmp[778026](777992 '.v' this[777988] c"valType"))
      (778012 'move' ret[778007](778011 'deref' call_tmp[778026]))
      gotoReturn _end_valType[778005] _end_valType[778005]
    }
    {
      (778017 'move' ret[778007](778016 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[778005] _end_valType[778005]
    }
    label _end_valType[778005]
    (778009 return ret[778007])
  }
  function _singlevar[87256](?).wrapped[778031](arg _mt[778033]:_MT[238], ref arg this[778035]:_singlevar[87256](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778045] "RVV" "temp"
    unknown call_tmp[778052] "expr temp" "maybe param" "maybe type" "temp"
    (778055 'move' call_tmp[778052](778039 '.' this[778035] c"wrapped"))
    (778050 'move' ret[778045](778049 'addr of' call_tmp[778052]))
    (778047 return ret[778045])
  }
  function _singlevar[87256](?).isOwned[778057](arg _mt[778059]:_MT[238], ref arg this[778061]:_singlevar[87256](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778071] "RVV" "temp"
    unknown call_tmp[778078] "expr temp" "maybe param" "maybe type" "temp"
    (778081 'move' call_tmp[778078](778065 '.' this[778061] c"isOwned"))
    (778076 'move' ret[778071](778075 'addr of' call_tmp[778078]))
    (778073 return ret[778071])
  }
  function chpl_fields_are_comparable[778095](arg _arg1[778097]:_singlevar[87256](?), arg _arg2[778098]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778127]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778134] "expr temp" "maybe param" "maybe type" "temp"
    (778137 'move' call_tmp[778134](778101 call wrapped _mt[243] _arg1[778097]))
    unknown call_tmp[778139] "expr temp" "maybe param" "maybe type" "temp"
    (778142 'move' call_tmp[778139](778105 call wrapped _mt[243] _arg2[778098]))
    unknown call_tmp[778144] "expr temp" "maybe param" "maybe type" "temp"
    (778147 'move' call_tmp[778144](778109 'call resolves' c"==" call_tmp[778134] call_tmp[778139]))
    unknown call_tmp[778149] "expr temp" "maybe param" "maybe type" "temp"
    (778152 'move' call_tmp[778149](778111 call isOwned _mt[243] _arg1[778097]))
    unknown call_tmp[778154] "expr temp" "maybe param" "maybe type" "temp"
    (778157 'move' call_tmp[778154](778115 call isOwned _mt[243] _arg2[778098]))
    unknown call_tmp[778159] "expr temp" "maybe param" "maybe type" "temp"
    (778162 'move' call_tmp[778159](778119 'call resolves' c"==" call_tmp[778149] call_tmp[778154]))
    unknown call_tmp[778164] "expr temp" "maybe param" "maybe type" "temp"
    (778167 'move' call_tmp[778164](778121 '&' call_tmp[778144] call_tmp[778159]))
    (778132 'move' ret[778127](778131 'deref' call_tmp[778164]))
    (778129 return ret[778127])
  }
  function ==[778083](arg _arg1[778085]:_singlevar[87256](?), arg _arg2[778086]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778211]:bool[10] "RVV" "temp"
    unknown call_tmp[778228] "expr temp" "maybe param" "maybe type" "temp"
    (778231 'move' call_tmp[778228](778175 call wrapped _mt[243] _arg1[778085]))
    unknown call_tmp[778233] "expr temp" "maybe param" "maybe type" "temp"
    (778236 'move' call_tmp[778233](778179 call wrapped _mt[243] _arg2[778086]))
    unknown call_tmp[778238] "expr temp" "maybe param" "maybe type" "temp"
    (778241 'move' call_tmp[778238](778183 call != call_tmp[778228] call_tmp[778233]))
    if call_tmp[778238]
    {
      (778216 'move' ret[778211](778215 'deref' 0))
      gotoReturn _end_==[778209] _end_==[778209]
    }
    unknown call_tmp[778243] "expr temp" "maybe param" "maybe type" "temp"
    (778246 'move' call_tmp[778243](778189 call isOwned _mt[243] _arg1[778085]))
    unknown call_tmp[778248] "expr temp" "maybe param" "maybe type" "temp"
    (778251 'move' call_tmp[778248](778193 call isOwned _mt[243] _arg2[778086]))
    unknown call_tmp[778253] "expr temp" "maybe param" "maybe type" "temp"
    (778256 'move' call_tmp[778253](778197 call != call_tmp[778243] call_tmp[778248]))
    if call_tmp[778253]
    {
      (778221 'move' ret[778211](778220 'deref' 0))
      gotoReturn _end_==[778209] _end_==[778209]
    }
    (778226 'move' ret[778211](778225 'deref' 1))
    label _end_==[778209]
    (778213 return ret[778211])
  }
  where {
    unknown call_tmp[778258] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778261 'move' call_tmp[778258](778089 'typeof' _arg1[778085]))
    unknown call_tmp[778263] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778266 'move' call_tmp[778263](778091 'typeof' _arg2[778086]))
    unknown call_tmp[778268] "expr temp" "maybe param" "maybe type" "temp"
    (778271 'move' call_tmp[778268](778093 call == call_tmp[778258] call_tmp[778263]))
    unknown call_tmp[778273] "expr temp" "maybe param" "maybe type" "temp"
    (778276 'move' call_tmp[778273](778169 call chpl_fields_are_comparable[778095] _arg1[778085] _arg2[778086]))
    (778173 '&' call_tmp[778268] call_tmp[778273])
  }
  function chpl_fields_are_comparable[778290](arg _arg1[778292]:_singlevar[87256](?), arg _arg2[778293]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778322]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778329] "expr temp" "maybe param" "maybe type" "temp"
    (778332 'move' call_tmp[778329](778296 call wrapped _mt[243] _arg1[778292]))
    unknown call_tmp[778334] "expr temp" "maybe param" "maybe type" "temp"
    (778337 'move' call_tmp[778334](778300 call wrapped _mt[243] _arg2[778293]))
    unknown call_tmp[778339] "expr temp" "maybe param" "maybe type" "temp"
    (778342 'move' call_tmp[778339](778304 'call resolves' c"!=" call_tmp[778329] call_tmp[778334]))
    unknown call_tmp[778344] "expr temp" "maybe param" "maybe type" "temp"
    (778347 'move' call_tmp[778344](778306 call isOwned _mt[243] _arg1[778292]))
    unknown call_tmp[778349] "expr temp" "maybe param" "maybe type" "temp"
    (778352 'move' call_tmp[778349](778310 call isOwned _mt[243] _arg2[778293]))
    unknown call_tmp[778354] "expr temp" "maybe param" "maybe type" "temp"
    (778357 'move' call_tmp[778354](778314 'call resolves' c"!=" call_tmp[778344] call_tmp[778349]))
    unknown call_tmp[778359] "expr temp" "maybe param" "maybe type" "temp"
    (778362 'move' call_tmp[778359](778316 '&' call_tmp[778339] call_tmp[778354]))
    (778327 'move' ret[778322](778326 'deref' call_tmp[778359]))
    (778324 return ret[778322])
  }
  function !=[778278](arg _arg1[778280]:_singlevar[87256](?), arg _arg2[778281]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778406]:bool[10] "RVV" "temp"
    unknown call_tmp[778423] "expr temp" "maybe param" "maybe type" "temp"
    (778426 'move' call_tmp[778423](778370 call wrapped _mt[243] _arg1[778280]))
    unknown call_tmp[778428] "expr temp" "maybe param" "maybe type" "temp"
    (778431 'move' call_tmp[778428](778374 call wrapped _mt[243] _arg2[778281]))
    unknown call_tmp[778433] "expr temp" "maybe param" "maybe type" "temp"
    (778436 'move' call_tmp[778433](778378 call != call_tmp[778423] call_tmp[778428]))
    if call_tmp[778433]
    {
      (778411 'move' ret[778406](778410 'deref' 1))
      gotoReturn _end_!=[778404] _end_!=[778404]
    }
    unknown call_tmp[778438] "expr temp" "maybe param" "maybe type" "temp"
    (778441 'move' call_tmp[778438](778384 call isOwned _mt[243] _arg1[778280]))
    unknown call_tmp[778443] "expr temp" "maybe param" "maybe type" "temp"
    (778446 'move' call_tmp[778443](778388 call isOwned _mt[243] _arg2[778281]))
    unknown call_tmp[778448] "expr temp" "maybe param" "maybe type" "temp"
    (778451 'move' call_tmp[778448](778392 call != call_tmp[778438] call_tmp[778443]))
    if call_tmp[778448]
    {
      (778416 'move' ret[778406](778415 'deref' 1))
      gotoReturn _end_!=[778404] _end_!=[778404]
    }
    (778421 'move' ret[778406](778420 'deref' 0))
    label _end_!=[778404]
    (778408 return ret[778406])
  }
  where {
    unknown call_tmp[778453] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778456 'move' call_tmp[778453](778284 'typeof' _arg1[778280]))
    unknown call_tmp[778458] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778461 'move' call_tmp[778458](778286 'typeof' _arg2[778281]))
    unknown call_tmp[778463] "expr temp" "maybe param" "maybe type" "temp"
    (778466 'move' call_tmp[778463](778288 call == call_tmp[778453] call_tmp[778458]))
    unknown call_tmp[778468] "expr temp" "maybe param" "maybe type" "temp"
    (778471 'move' call_tmp[778468](778364 call chpl_fields_are_comparable[778290] _arg1[778280] _arg2[778281]))
    (778368 '&' call_tmp[778463] call_tmp[778468])
  }
  function chpl_fields_are_comparable[778485](arg _arg1[778487]:_singlevar[87256](?), arg _arg2[778488]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778517]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778524] "expr temp" "maybe param" "maybe type" "temp"
    (778527 'move' call_tmp[778524](778491 call wrapped _mt[243] _arg1[778487]))
    unknown call_tmp[778529] "expr temp" "maybe param" "maybe type" "temp"
    (778532 'move' call_tmp[778529](778495 call wrapped _mt[243] _arg2[778488]))
    unknown call_tmp[778534] "expr temp" "maybe param" "maybe type" "temp"
    (778537 'move' call_tmp[778534](778499 'call resolves' c"<" call_tmp[778524] call_tmp[778529]))
    unknown call_tmp[778539] "expr temp" "maybe param" "maybe type" "temp"
    (778542 'move' call_tmp[778539](778501 call isOwned _mt[243] _arg1[778487]))
    unknown call_tmp[778544] "expr temp" "maybe param" "maybe type" "temp"
    (778547 'move' call_tmp[778544](778505 call isOwned _mt[243] _arg2[778488]))
    unknown call_tmp[778549] "expr temp" "maybe param" "maybe type" "temp"
    (778552 'move' call_tmp[778549](778509 'call resolves' c"<" call_tmp[778539] call_tmp[778544]))
    unknown call_tmp[778554] "expr temp" "maybe param" "maybe type" "temp"
    (778557 'move' call_tmp[778554](778511 '&' call_tmp[778534] call_tmp[778549]))
    (778522 'move' ret[778517](778521 'deref' call_tmp[778554]))
    (778519 return ret[778517])
  }
  function <[778473](arg _arg1[778475]:_singlevar[87256](?), arg _arg2[778476]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778631]:bool[10] "RVV" "temp"
    unknown call_tmp[778658] "expr temp" "maybe param" "maybe type" "temp"
    (778661 'move' call_tmp[778658](778565 call wrapped _mt[243] _arg1[778475]))
    unknown call_tmp[778663] "expr temp" "maybe param" "maybe type" "temp"
    (778666 'move' call_tmp[778663](778569 call wrapped _mt[243] _arg2[778476]))
    unknown call_tmp[778668] "expr temp" "maybe param" "maybe type" "temp"
    (778671 'move' call_tmp[778668](778573 call < call_tmp[778658] call_tmp[778663]))
    if call_tmp[778668]
    {
      (778636 'move' ret[778631](778635 'deref' 1))
      gotoReturn _end_<[778629] _end_<[778629]
    }
    unknown call_tmp[778673] "expr temp" "maybe param" "maybe type" "temp"
    (778676 'move' call_tmp[778673](778579 call wrapped _mt[243] _arg1[778475]))
    unknown call_tmp[778678] "expr temp" "maybe param" "maybe type" "temp"
    (778681 'move' call_tmp[778678](778583 call wrapped _mt[243] _arg2[778476]))
    unknown call_tmp[778683] "expr temp" "maybe param" "maybe type" "temp"
    (778686 'move' call_tmp[778683](778587 call > call_tmp[778673] call_tmp[778678]))
    if call_tmp[778683]
    {
      (778641 'move' ret[778631](778640 'deref' 0))
      gotoReturn _end_<[778629] _end_<[778629]
    }
    unknown call_tmp[778688] "expr temp" "maybe param" "maybe type" "temp"
    (778691 'move' call_tmp[778688](778593 call isOwned _mt[243] _arg1[778475]))
    unknown call_tmp[778693] "expr temp" "maybe param" "maybe type" "temp"
    (778696 'move' call_tmp[778693](778597 call isOwned _mt[243] _arg2[778476]))
    unknown call_tmp[778698] "expr temp" "maybe param" "maybe type" "temp"
    (778701 'move' call_tmp[778698](778601 call < call_tmp[778688] call_tmp[778693]))
    if call_tmp[778698]
    {
      (778646 'move' ret[778631](778645 'deref' 1))
      gotoReturn _end_<[778629] _end_<[778629]
    }
    unknown call_tmp[778703] "expr temp" "maybe param" "maybe type" "temp"
    (778706 'move' call_tmp[778703](778607 call isOwned _mt[243] _arg1[778475]))
    unknown call_tmp[778708] "expr temp" "maybe param" "maybe type" "temp"
    (778711 'move' call_tmp[778708](778611 call isOwned _mt[243] _arg2[778476]))
    unknown call_tmp[778713] "expr temp" "maybe param" "maybe type" "temp"
    (778716 'move' call_tmp[778713](778615 call > call_tmp[778703] call_tmp[778708]))
    if call_tmp[778713]
    {
      (778651 'move' ret[778631](778650 'deref' 0))
      gotoReturn _end_<[778629] _end_<[778629]
    }
    (778656 'move' ret[778631](778655 'deref' 0))
    label _end_<[778629]
    (778633 return ret[778631])
  }
  where {
    unknown call_tmp[778718] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778721 'move' call_tmp[778718](778479 'typeof' _arg1[778475]))
    unknown call_tmp[778723] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778726 'move' call_tmp[778723](778481 'typeof' _arg2[778476]))
    unknown call_tmp[778728] "expr temp" "maybe param" "maybe type" "temp"
    (778731 'move' call_tmp[778728](778483 call == call_tmp[778718] call_tmp[778723]))
    unknown call_tmp[778733] "expr temp" "maybe param" "maybe type" "temp"
    (778736 'move' call_tmp[778733](778559 call chpl_fields_are_comparable[778485] _arg1[778475] _arg2[778476]))
    (778563 '&' call_tmp[778728] call_tmp[778733])
  }
  function chpl_fields_are_comparable[778750](arg _arg1[778752]:_singlevar[87256](?), arg _arg2[778753]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778782]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778789] "expr temp" "maybe param" "maybe type" "temp"
    (778792 'move' call_tmp[778789](778756 call wrapped _mt[243] _arg1[778752]))
    unknown call_tmp[778794] "expr temp" "maybe param" "maybe type" "temp"
    (778797 'move' call_tmp[778794](778760 call wrapped _mt[243] _arg2[778753]))
    unknown call_tmp[778799] "expr temp" "maybe param" "maybe type" "temp"
    (778802 'move' call_tmp[778799](778764 'call resolves' c"<=" call_tmp[778789] call_tmp[778794]))
    unknown call_tmp[778804] "expr temp" "maybe param" "maybe type" "temp"
    (778807 'move' call_tmp[778804](778766 call isOwned _mt[243] _arg1[778752]))
    unknown call_tmp[778809] "expr temp" "maybe param" "maybe type" "temp"
    (778812 'move' call_tmp[778809](778770 call isOwned _mt[243] _arg2[778753]))
    unknown call_tmp[778814] "expr temp" "maybe param" "maybe type" "temp"
    (778817 'move' call_tmp[778814](778774 'call resolves' c"<=" call_tmp[778804] call_tmp[778809]))
    unknown call_tmp[778819] "expr temp" "maybe param" "maybe type" "temp"
    (778822 'move' call_tmp[778819](778776 '&' call_tmp[778799] call_tmp[778814]))
    (778787 'move' ret[778782](778786 'deref' call_tmp[778819]))
    (778784 return ret[778782])
  }
  function <=[778738](arg _arg1[778740]:_singlevar[87256](?), arg _arg2[778741]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778896]:bool[10] "RVV" "temp"
    unknown call_tmp[778923] "expr temp" "maybe param" "maybe type" "temp"
    (778926 'move' call_tmp[778923](778830 call wrapped _mt[243] _arg1[778740]))
    unknown call_tmp[778928] "expr temp" "maybe param" "maybe type" "temp"
    (778931 'move' call_tmp[778928](778834 call wrapped _mt[243] _arg2[778741]))
    unknown call_tmp[778933] "expr temp" "maybe param" "maybe type" "temp"
    (778936 'move' call_tmp[778933](778838 call < call_tmp[778923] call_tmp[778928]))
    if call_tmp[778933]
    {
      (778901 'move' ret[778896](778900 'deref' 1))
      gotoReturn _end_<=[778894] _end_<=[778894]
    }
    unknown call_tmp[778938] "expr temp" "maybe param" "maybe type" "temp"
    (778941 'move' call_tmp[778938](778844 call wrapped _mt[243] _arg1[778740]))
    unknown call_tmp[778943] "expr temp" "maybe param" "maybe type" "temp"
    (778946 'move' call_tmp[778943](778848 call wrapped _mt[243] _arg2[778741]))
    unknown call_tmp[778948] "expr temp" "maybe param" "maybe type" "temp"
    (778951 'move' call_tmp[778948](778852 call > call_tmp[778938] call_tmp[778943]))
    if call_tmp[778948]
    {
      (778906 'move' ret[778896](778905 'deref' 0))
      gotoReturn _end_<=[778894] _end_<=[778894]
    }
    unknown call_tmp[778953] "expr temp" "maybe param" "maybe type" "temp"
    (778956 'move' call_tmp[778953](778858 call isOwned _mt[243] _arg1[778740]))
    unknown call_tmp[778958] "expr temp" "maybe param" "maybe type" "temp"
    (778961 'move' call_tmp[778958](778862 call isOwned _mt[243] _arg2[778741]))
    unknown call_tmp[778963] "expr temp" "maybe param" "maybe type" "temp"
    (778966 'move' call_tmp[778963](778866 call < call_tmp[778953] call_tmp[778958]))
    if call_tmp[778963]
    {
      (778911 'move' ret[778896](778910 'deref' 1))
      gotoReturn _end_<=[778894] _end_<=[778894]
    }
    unknown call_tmp[778968] "expr temp" "maybe param" "maybe type" "temp"
    (778971 'move' call_tmp[778968](778872 call isOwned _mt[243] _arg1[778740]))
    unknown call_tmp[778973] "expr temp" "maybe param" "maybe type" "temp"
    (778976 'move' call_tmp[778973](778876 call isOwned _mt[243] _arg2[778741]))
    unknown call_tmp[778978] "expr temp" "maybe param" "maybe type" "temp"
    (778981 'move' call_tmp[778978](778880 call > call_tmp[778968] call_tmp[778973]))
    if call_tmp[778978]
    {
      (778916 'move' ret[778896](778915 'deref' 0))
      gotoReturn _end_<=[778894] _end_<=[778894]
    }
    (778921 'move' ret[778896](778920 'deref' 1))
    label _end_<=[778894]
    (778898 return ret[778896])
  }
  where {
    unknown call_tmp[778983] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778986 'move' call_tmp[778983](778744 'typeof' _arg1[778740]))
    unknown call_tmp[778988] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778991 'move' call_tmp[778988](778746 'typeof' _arg2[778741]))
    unknown call_tmp[778993] "expr temp" "maybe param" "maybe type" "temp"
    (778996 'move' call_tmp[778993](778748 call == call_tmp[778983] call_tmp[778988]))
    unknown call_tmp[778998] "expr temp" "maybe param" "maybe type" "temp"
    (779001 'move' call_tmp[778998](778824 call chpl_fields_are_comparable[778750] _arg1[778740] _arg2[778741]))
    (778828 '&' call_tmp[778993] call_tmp[778998])
  }
  function chpl_fields_are_comparable[779015](arg _arg1[779017]:_singlevar[87256](?), arg _arg2[779018]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779047]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779054] "expr temp" "maybe param" "maybe type" "temp"
    (779057 'move' call_tmp[779054](779021 call wrapped _mt[243] _arg1[779017]))
    unknown call_tmp[779059] "expr temp" "maybe param" "maybe type" "temp"
    (779062 'move' call_tmp[779059](779025 call wrapped _mt[243] _arg2[779018]))
    unknown call_tmp[779064] "expr temp" "maybe param" "maybe type" "temp"
    (779067 'move' call_tmp[779064](779029 'call resolves' c">" call_tmp[779054] call_tmp[779059]))
    unknown call_tmp[779069] "expr temp" "maybe param" "maybe type" "temp"
    (779072 'move' call_tmp[779069](779031 call isOwned _mt[243] _arg1[779017]))
    unknown call_tmp[779074] "expr temp" "maybe param" "maybe type" "temp"
    (779077 'move' call_tmp[779074](779035 call isOwned _mt[243] _arg2[779018]))
    unknown call_tmp[779079] "expr temp" "maybe param" "maybe type" "temp"
    (779082 'move' call_tmp[779079](779039 'call resolves' c">" call_tmp[779069] call_tmp[779074]))
    unknown call_tmp[779084] "expr temp" "maybe param" "maybe type" "temp"
    (779087 'move' call_tmp[779084](779041 '&' call_tmp[779064] call_tmp[779079]))
    (779052 'move' ret[779047](779051 'deref' call_tmp[779084]))
    (779049 return ret[779047])
  }
  function >[779003](arg _arg1[779005]:_singlevar[87256](?), arg _arg2[779006]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779161]:bool[10] "RVV" "temp"
    unknown call_tmp[779188] "expr temp" "maybe param" "maybe type" "temp"
    (779191 'move' call_tmp[779188](779095 call wrapped _mt[243] _arg1[779005]))
    unknown call_tmp[779193] "expr temp" "maybe param" "maybe type" "temp"
    (779196 'move' call_tmp[779193](779099 call wrapped _mt[243] _arg2[779006]))
    unknown call_tmp[779198] "expr temp" "maybe param" "maybe type" "temp"
    (779201 'move' call_tmp[779198](779103 call > call_tmp[779188] call_tmp[779193]))
    if call_tmp[779198]
    {
      (779166 'move' ret[779161](779165 'deref' 1))
      gotoReturn _end_>[779159] _end_>[779159]
    }
    unknown call_tmp[779203] "expr temp" "maybe param" "maybe type" "temp"
    (779206 'move' call_tmp[779203](779109 call wrapped _mt[243] _arg1[779005]))
    unknown call_tmp[779208] "expr temp" "maybe param" "maybe type" "temp"
    (779211 'move' call_tmp[779208](779113 call wrapped _mt[243] _arg2[779006]))
    unknown call_tmp[779213] "expr temp" "maybe param" "maybe type" "temp"
    (779216 'move' call_tmp[779213](779117 call < call_tmp[779203] call_tmp[779208]))
    if call_tmp[779213]
    {
      (779171 'move' ret[779161](779170 'deref' 0))
      gotoReturn _end_>[779159] _end_>[779159]
    }
    unknown call_tmp[779218] "expr temp" "maybe param" "maybe type" "temp"
    (779221 'move' call_tmp[779218](779123 call isOwned _mt[243] _arg1[779005]))
    unknown call_tmp[779223] "expr temp" "maybe param" "maybe type" "temp"
    (779226 'move' call_tmp[779223](779127 call isOwned _mt[243] _arg2[779006]))
    unknown call_tmp[779228] "expr temp" "maybe param" "maybe type" "temp"
    (779231 'move' call_tmp[779228](779131 call > call_tmp[779218] call_tmp[779223]))
    if call_tmp[779228]
    {
      (779176 'move' ret[779161](779175 'deref' 1))
      gotoReturn _end_>[779159] _end_>[779159]
    }
    unknown call_tmp[779233] "expr temp" "maybe param" "maybe type" "temp"
    (779236 'move' call_tmp[779233](779137 call isOwned _mt[243] _arg1[779005]))
    unknown call_tmp[779238] "expr temp" "maybe param" "maybe type" "temp"
    (779241 'move' call_tmp[779238](779141 call isOwned _mt[243] _arg2[779006]))
    unknown call_tmp[779243] "expr temp" "maybe param" "maybe type" "temp"
    (779246 'move' call_tmp[779243](779145 call < call_tmp[779233] call_tmp[779238]))
    if call_tmp[779243]
    {
      (779181 'move' ret[779161](779180 'deref' 0))
      gotoReturn _end_>[779159] _end_>[779159]
    }
    (779186 'move' ret[779161](779185 'deref' 0))
    label _end_>[779159]
    (779163 return ret[779161])
  }
  where {
    unknown call_tmp[779248] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779251 'move' call_tmp[779248](779009 'typeof' _arg1[779005]))
    unknown call_tmp[779253] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779256 'move' call_tmp[779253](779011 'typeof' _arg2[779006]))
    unknown call_tmp[779258] "expr temp" "maybe param" "maybe type" "temp"
    (779261 'move' call_tmp[779258](779013 call == call_tmp[779248] call_tmp[779253]))
    unknown call_tmp[779263] "expr temp" "maybe param" "maybe type" "temp"
    (779266 'move' call_tmp[779263](779089 call chpl_fields_are_comparable[779015] _arg1[779005] _arg2[779006]))
    (779093 '&' call_tmp[779258] call_tmp[779263])
  }
  function chpl_fields_are_comparable[779280](arg _arg1[779282]:_singlevar[87256](?), arg _arg2[779283]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779312]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779319] "expr temp" "maybe param" "maybe type" "temp"
    (779322 'move' call_tmp[779319](779286 call wrapped _mt[243] _arg1[779282]))
    unknown call_tmp[779324] "expr temp" "maybe param" "maybe type" "temp"
    (779327 'move' call_tmp[779324](779290 call wrapped _mt[243] _arg2[779283]))
    unknown call_tmp[779329] "expr temp" "maybe param" "maybe type" "temp"
    (779332 'move' call_tmp[779329](779294 'call resolves' c">=" call_tmp[779319] call_tmp[779324]))
    unknown call_tmp[779334] "expr temp" "maybe param" "maybe type" "temp"
    (779337 'move' call_tmp[779334](779296 call isOwned _mt[243] _arg1[779282]))
    unknown call_tmp[779339] "expr temp" "maybe param" "maybe type" "temp"
    (779342 'move' call_tmp[779339](779300 call isOwned _mt[243] _arg2[779283]))
    unknown call_tmp[779344] "expr temp" "maybe param" "maybe type" "temp"
    (779347 'move' call_tmp[779344](779304 'call resolves' c">=" call_tmp[779334] call_tmp[779339]))
    unknown call_tmp[779349] "expr temp" "maybe param" "maybe type" "temp"
    (779352 'move' call_tmp[779349](779306 '&' call_tmp[779329] call_tmp[779344]))
    (779317 'move' ret[779312](779316 'deref' call_tmp[779349]))
    (779314 return ret[779312])
  }
  function >=[779268](arg _arg1[779270]:_singlevar[87256](?), arg _arg2[779271]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779426]:bool[10] "RVV" "temp"
    unknown call_tmp[779453] "expr temp" "maybe param" "maybe type" "temp"
    (779456 'move' call_tmp[779453](779360 call wrapped _mt[243] _arg1[779270]))
    unknown call_tmp[779458] "expr temp" "maybe param" "maybe type" "temp"
    (779461 'move' call_tmp[779458](779364 call wrapped _mt[243] _arg2[779271]))
    unknown call_tmp[779463] "expr temp" "maybe param" "maybe type" "temp"
    (779466 'move' call_tmp[779463](779368 call > call_tmp[779453] call_tmp[779458]))
    if call_tmp[779463]
    {
      (779431 'move' ret[779426](779430 'deref' 1))
      gotoReturn _end_>=[779424] _end_>=[779424]
    }
    unknown call_tmp[779468] "expr temp" "maybe param" "maybe type" "temp"
    (779471 'move' call_tmp[779468](779374 call wrapped _mt[243] _arg1[779270]))
    unknown call_tmp[779473] "expr temp" "maybe param" "maybe type" "temp"
    (779476 'move' call_tmp[779473](779378 call wrapped _mt[243] _arg2[779271]))
    unknown call_tmp[779478] "expr temp" "maybe param" "maybe type" "temp"
    (779481 'move' call_tmp[779478](779382 call < call_tmp[779468] call_tmp[779473]))
    if call_tmp[779478]
    {
      (779436 'move' ret[779426](779435 'deref' 0))
      gotoReturn _end_>=[779424] _end_>=[779424]
    }
    unknown call_tmp[779483] "expr temp" "maybe param" "maybe type" "temp"
    (779486 'move' call_tmp[779483](779388 call isOwned _mt[243] _arg1[779270]))
    unknown call_tmp[779488] "expr temp" "maybe param" "maybe type" "temp"
    (779491 'move' call_tmp[779488](779392 call isOwned _mt[243] _arg2[779271]))
    unknown call_tmp[779493] "expr temp" "maybe param" "maybe type" "temp"
    (779496 'move' call_tmp[779493](779396 call > call_tmp[779483] call_tmp[779488]))
    if call_tmp[779493]
    {
      (779441 'move' ret[779426](779440 'deref' 1))
      gotoReturn _end_>=[779424] _end_>=[779424]
    }
    unknown call_tmp[779498] "expr temp" "maybe param" "maybe type" "temp"
    (779501 'move' call_tmp[779498](779402 call isOwned _mt[243] _arg1[779270]))
    unknown call_tmp[779503] "expr temp" "maybe param" "maybe type" "temp"
    (779506 'move' call_tmp[779503](779406 call isOwned _mt[243] _arg2[779271]))
    unknown call_tmp[779508] "expr temp" "maybe param" "maybe type" "temp"
    (779511 'move' call_tmp[779508](779410 call < call_tmp[779498] call_tmp[779503]))
    if call_tmp[779508]
    {
      (779446 'move' ret[779426](779445 'deref' 0))
      gotoReturn _end_>=[779424] _end_>=[779424]
    }
    (779451 'move' ret[779426](779450 'deref' 1))
    label _end_>=[779424]
    (779428 return ret[779426])
  }
  where {
    unknown call_tmp[779513] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779516 'move' call_tmp[779513](779274 'typeof' _arg1[779270]))
    unknown call_tmp[779518] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779521 'move' call_tmp[779518](779276 'typeof' _arg2[779271]))
    unknown call_tmp[779523] "expr temp" "maybe param" "maybe type" "temp"
    (779526 'move' call_tmp[779523](779278 call == call_tmp[779513] call_tmp[779518]))
    unknown call_tmp[779528] "expr temp" "maybe param" "maybe type" "temp"
    (779531 'move' call_tmp[779528](779354 call chpl_fields_are_comparable[779280] _arg1[779270] _arg2[779271]))
    (779358 '&' call_tmp[779523] call_tmp[779528])
  }
  function =[779533](ref arg _arg1[779535]:_singlevar[87256](?), const?  ref arg _arg2[779536]:_singlevar[87256](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[779573] "expr temp" "maybe param" "maybe type" "temp"
    (779576 'move' call_tmp[779573](779546 call wrapped _mt[243] _arg1[779535]))
    unknown call_tmp[779580] "expr temp" "maybe param" "maybe type" "temp"
    (779583 'move' call_tmp[779580](779550 call wrapped _mt[243] _arg2[779536]))
    (779554 call = call_tmp[779573] call_tmp[779580])
    (779567 'end of statement')
    unknown call_tmp[779587] "expr temp" "maybe param" "maybe type" "temp"
    (779590 'move' call_tmp[779587](779556 call isOwned _mt[243] _arg1[779535]))
    unknown call_tmp[779594] "expr temp" "maybe param" "maybe type" "temp"
    (779597 'move' call_tmp[779594](779560 call isOwned _mt[243] _arg2[779536]))
    (779564 call = call_tmp[779587] call_tmp[779594])
    (779569 return _void[55])
  }
  where {
    unknown call_tmp[779599] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779602 'move' call_tmp[779599](779539 'typeof' _arg1[779535]))
    unknown call_tmp[779604] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779607 'move' call_tmp[779604](779541 'typeof' _arg2[779536]))
    (779543 call == call_tmp[779599] call_tmp[779604])
  }
  function chpl__defaultHash[779609](arg r[779611]:_singlevar[87256](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[779642] "RVV" "temp"
    unknown call_tmp[779649] "expr temp" "maybe param" "maybe type" "temp"
    (779652 'move' call_tmp[779649](779628 call isOwned _mt[243] r[779611]))
    unknown call_tmp[779654] "expr temp" "maybe param" "maybe type" "temp"
    (779657 'move' call_tmp[779654](779632 call chpl__defaultHash call_tmp[779649]))
    unknown call_tmp[779659] "expr temp" "maybe param" "maybe type" "temp"
    (779662 'move' call_tmp[779659](779619 call wrapped _mt[243] r[779611]))
    unknown call_tmp[779664] "expr temp" "maybe param" "maybe type" "temp"
    (779667 'move' call_tmp[779664](779623 call chpl__defaultHash call_tmp[779659]))
    unknown call_tmp[779669] "expr temp" "maybe param" "maybe type" "temp"
    (779672 'move' call_tmp[779669](779613 call valType _mt[243] r[779611]))
    unknown call_tmp[779674] "expr temp" "maybe param" "maybe type" "temp"
    (779677 'move' call_tmp[779674](779617 call chpl__defaultHash call_tmp[779669]))
    unknown call_tmp[779679] "expr temp" "maybe param" "maybe type" "temp"
    (779682 'move' call_tmp[779679](779625 call chpl__defaultHashCombine call_tmp[779664] call_tmp[779674] 2))
    unknown call_tmp[779684] "expr temp" "maybe param" "maybe type" "temp"
    (779687 'move' call_tmp[779684](779634 call chpl__defaultHashCombine call_tmp[779654] call_tmp[779679] 3))
    (779647 'move' ret[779642](779646 'deref' call_tmp[779684]))
    (779644 return ret[779642])
  }
  single type _singlevar[87256](?) unknown valType[86935] "type variable" unknown wrapped[86943](86941 call unmanaged _singlecls[415452](?) valType[86935]) val isOwned[86949]:bool[10] 1 bool[10]
  function isSingleType[87293](arg t[87290]:_singlevar[87256](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513033] "RVV" "param" "temp"
    (513038 'move' ret[513033](513037 'deref' 1))
    (513035 return ret[513033])
  }
  function isSingleType[87305](arg t[87303]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513042] "RVV" "param" "temp"
    (513047 'move' ret[513042](513046 'deref' 0))
    (513044 return ret[513042])
  }
  function _singlevar[87256](?).readFF[87316](arg _mt[87321]:_MT[238], arg this[87318]:_singlevar[87256](?) :
  _singlevar[87256](?)) : _unknown[51] "method"
  {
    unknown ret[513051] "RVV" "temp"
    unknown call_tmp[631528] "expr temp" "maybe param" "maybe type" "temp"
    (631531 'move' call_tmp[631528](358292 call wrapped _mt[243] this[87318]))
    unknown call_tmp[631535] "expr temp" "maybe param" "maybe type" "temp"
    (631538 'move' call_tmp[631535](87328 call(87324 call (partial) readFF _mt[243] call_tmp[631528])))
    (513056 'move' ret[513051](513055 'deref' call_tmp[631535]))
    (513053 return ret[513051])
  }
  function _singlevar[87256](?).readXX[87337](arg _mt[87342]:_MT[238], arg this[87339]:_singlevar[87256](?) :
  _singlevar[87256](?)) : _unknown[51] "method"
  {
    unknown ret[513060] "RVV" "temp"
    (87346 call chpl_task_yield)
    (477063 'end of statement')
    unknown call_tmp[631542] "expr temp" "maybe param" "maybe type" "temp"
    (631545 'move' call_tmp[631542](358297 call wrapped _mt[243] this[87339]))
    unknown call_tmp[631549] "expr temp" "maybe param" "maybe type" "temp"
    (631552 'move' call_tmp[631549](87354 call(87350 call (partial) readXX _mt[243] call_tmp[631542])))
    (513065 'move' ret[513060](513064 'deref' call_tmp[631549]))
    (513062 return ret[513060])
  }
  function _singlevar[87256](?).writeEF[87366](arg _mt[87371]:_MT[238], arg this[87368]:_singlevar[87256](?) :
  _singlevar[87256](?), arg x[87363] :
  (377443 call valType _mt[243] this[87368])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[631558] "expr temp" "maybe param" "maybe type" "temp"
    (631561 'move' call_tmp[631558](358302 call wrapped _mt[243] this[87368]))
    (87379 call(87374 call (partial) writeEF _mt[243] call_tmp[631558]) x[87363])
    (513067 return _void[55])
  }
  function _singlevar[87256](?).isFull[87387](arg _mt[87392]:_MT[238], arg this[87389]:_singlevar[87256](?) :
  _singlevar[87256](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[513071] "RVV" "temp"
    unknown call_tmp[631567] "expr temp" "maybe param" "maybe type" "temp"
    (631570 'move' call_tmp[631567](358307 call wrapped _mt[243] this[87389]))
    unknown call_tmp[631574] "expr temp" "maybe param" "maybe type" "temp"
    (631577 'move' call_tmp[631574](87395 call isFull _mt[243] call_tmp[631567]))
    (513076 'move' ret[513071](513075 'deref' call_tmp[631574]))
    (513073 return ret[513071])
  }
  function =[87413](ref arg lhs[87410]:_singlevar[87256](?), arg rhs[87416] :
  (460162 'query' lhs[87410] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[631581] "expr temp" "maybe param" "maybe type" "temp"
    (631584 'move' call_tmp[631581](87420 call wrapped _mt[243] lhs[87410]))
    (87428 call(87423 call (partial) writeEF _mt[243] call_tmp[631581]) rhs[87416])
    (513078 return _void[55])
  }
  function chpl__initCopy[87443](ref arg sv[87440]:_singlevar[87256](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[513082] "RVV" "temp"
    unknown call_tmp[631590] "expr temp" "maybe param" "maybe type" "temp"
    (631593 'move' call_tmp[631590](87450 call(87446 call (partial) readFF _mt[243] sv[87440])))
    (513087 'move' ret[513082](513086 'deref' call_tmp[631590]))
    (513084 return ret[513082])
  }
  function chpl__autoCopy[87462](const  ref arg rhs[87459]:_singlevar[87256](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[513091] "RVV" "temp"
    unknown call_tmp[631595] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631598 'move' call_tmp[631595](747828 'new' _singlevar[87256](?) rhs[87459]))
    (513096 'move' ret[513091](513095 'deref' call_tmp[631595]))
    (513093 return ret[513091])
  }
  function chpl__maybeAutoDestroyed[87484](arg x[87481]:_singlevar[87256](?)) param : _unknown[51] "inline"
  {
    unknown ret[513100] "RVV" "param" "temp"
    (513105 'move' ret[513100](513104 'deref' 1))
    (513102 return ret[513100])
  }
  function chpl__autoDestroy[87501](arg x[87498]:_singlevar[87256](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[631602] "expr temp" "maybe param" "maybe type" "temp"
    (631605 'move' call_tmp[631602](87504 call isOwned _mt[243] x[87498]))
    unknown call_tmp[631607] "expr temp" "maybe param" "maybe type" "temp"
    (631610 'move' call_tmp[631607](87508 call == call_tmp[631602] 1))
    unknown call_tmp[631612] "expr temp" "maybe param" "maybe type" "temp"
    (631615 'move' call_tmp[631612](87518 call _cond_test call_tmp[631607]))
    if call_tmp[631612]
    {
      unknown call_tmp[631619] "expr temp" "maybe param" "maybe type" "temp"
      (631622 'move' call_tmp[631619](87511 call wrapped _mt[243] x[87498]))
      (87515 call chpl__delete call_tmp[631619])
    }
    (513107 return _void[55])
  }
  function chpl__readXX[87535](const  ref arg x[87532]:_singlevar[87256](?)) : _unknown[51] "no doc"
  {
    unknown ret[513111] "RVV" "temp"
    unknown call_tmp[631626] "expr temp" "maybe param" "maybe type" "temp"
    (631629 'move' call_tmp[631626](87542 call(87538 call (partial) readXX _mt[243] x[87532])))
    (513116 'move' ret[513111](513115 'deref' call_tmp[631626]))
    (513113 return ret[513111])
  }
  function _singlecls[87888](?).init[87566](arg _mt[87892]:_MT[238], arg this[87890]:_singlecls[87888](?), arg valType[87564]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460245] "temporary of super field" "temp"
    (460253 'move' super_tmp[460245](460246 '.v' this[87890] c"super"))
    (460249 call init _mt[243] super_tmp[460245])
    (477073 'end of statement')
    unknown tmp[460198] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491986] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631631] "expr temp" "maybe param" "maybe type" "temp"
      (631634 'move' call_tmp[631631](460200 '.v' this[87890] c"super"))
      (491990 'move' call_type_tmp[491986](460203 'typeof' call_tmp[631631]))
    }
    (460204 'move' tmp[460198] call_type_tmp[491986])
    unknown call_tmp[631636] "maybe param" "maybe type" "temp"
    (631639 'move' call_tmp[631636](460209 'cast' tmp[460198] this[87890]))
    unknown chpl__thisAsParent[460206] "dead at end of block" "insert auto destroy" "temp"
    (541632 'init var' chpl__thisAsParent[460206] call_tmp[631636] tmp[460198])
    (460212 'setcid' chpl__thisAsParent[460206])
    (477074 'end of statement')
    unknown tmp[460214] "temp" "type variable"
    (460216 'move' tmp[460214] valType[87564])
    (460218 'init field' this[87890] c"valType" tmp[460214])
    (477075 'end of statement')
    unknown tmp[460222] "temp"
    unknown call_tmp[631641] "expr temp" "maybe param" "maybe type" "temp"
    (631644 'move' call_tmp[631641](460231 '.v' this[87890] c"valType"))
    (460225 'default init var' tmp[460222] call_tmp[631641])
    (460227 '.=' this[87890] c"value" tmp[460222])
    (477076 'end of statement')
    val tmp[460234]:chpl_single_aux_t[88058] "temp"
    (460237 'default init var' tmp[460234] chpl_single_aux_t[88058])
    (460239 '.=' this[87890] c"singleAux" tmp[460234])
    (477077 'end of statement')
    (460244 'setcid' this[87890])
    (477078 'end of statement')
    unknown call_tmp[631648] "expr temp" "maybe param" "maybe type" "temp"
    (631651 'move' call_tmp[631648](377464 call singleAux _mt[243] this[87890]))
    (87587 call chpl_single_initAux call_tmp[631648])
    (513118 return _void[55])
  }
  function _singlecls[87888](?).deinit[87593](arg _mt[87896]:_MT[238], arg this[87894]:_singlecls[87888](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631655] "expr temp" "maybe param" "maybe type" "temp"
    (631658 'move' call_tmp[631655](377469 call singleAux _mt[243] this[87894]))
    (87598 call chpl_single_destroyAux call_tmp[631655])
    (513120 return _void[55])
  }
  function _singlecls[87888](?).readFF[87605](arg _mt[87900]:_MT[238], arg this[87898]:_singlecls[87888](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513124] "RVV" "temp"
    unknown ret[87608] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631662] "expr temp" "maybe param" "maybe type" "temp"
    (631665 'move' call_tmp[631662](377474 call valType _mt[243] this[87898]))
    (541634 'default init var' ret[87608] call_tmp[631662])
    (87611 'end of statement')
    const tmp[87666] "const" "temp"
    unknown call_tmp[631667] "expr temp" "maybe param" "maybe type" "temp"
    (631670 'move' call_tmp[631667](87663 '_wide_get_locale' this[87898]))
    (87668 'move' tmp[87666](87664 'deref' call_tmp[631667]))
    {
      {
        unknown localRet[87615] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541636] "maybe param" "maybe type" "temp"
        (541645 'move' type_tmp[541636](541642 call valType _mt[243] this[87898]))
        (541638 'init var split decl' localRet[87615] type_tmp[541636])
        (87618 'end of statement')
        (87622 call chpl_rmem_consist_release)
        (477081 'end of statement')
        unknown call_tmp[631676] "expr temp" "maybe param" "maybe type" "temp"
        (631679 'move' call_tmp[631676](87625 call isFull _mt[243] this[87898]))
        unknown call_tmp[631681] "expr temp" "maybe param" "maybe type" "temp"
        (631684 'move' call_tmp[631681](87649 call _cond_test call_tmp[631676]))
        if call_tmp[631681]
        {
          unknown call_tmp[631688] "maybe param" "maybe type" "temp"
          (631691 'move' call_tmp[631688](377486 call value _mt[243] this[87898]))
          (541647 'init var split init' localRet[87615] call_tmp[631688] type_tmp[541636])
          (477082 'end of statement' localRet[87615])
        }
        {
          unknown call_tmp[631695] "expr temp" "maybe param" "maybe type" "temp"
          (631698 'move' call_tmp[631695](377491 call singleAux _mt[243] this[87898]))
          (87636 call chpl_single_waitFullAndLock call_tmp[631695])
          (477084 'end of statement')
          unknown call_tmp[631702] "maybe param" "maybe type" "temp"
          (631705 'move' call_tmp[631702](377497 call value _mt[243] this[87898]))
          (541650 'init var split init' localRet[87615] call_tmp[631702] type_tmp[541636])
          (477085 'end of statement' localRet[87615])
          unknown call_tmp[631709] "expr temp" "maybe param" "maybe type" "temp"
          (631712 'move' call_tmp[631709](377502 call singleAux _mt[243] this[87898]))
          (87647 call chpl_single_markAndSignalFull call_tmp[631709])
        }
        (87656 call chpl_rmem_consist_acquire)
        (477088 'end of statement')
        (87660 call = ret[87608] localRet[87615])
        (477089 'end of statement' ret[87608] localRet[87615])
      }
      (87671 'on block' 0 tmp[87666])
    }
    (513129 'move' ret[513124](513128 'deref' ret[87608]))
    gotoReturn _end_readFF[513122] _end_readFF[513122]
    (477092 'end of statement' ret[87608])
    label _end_readFF[513122]
    (513126 return ret[513124])
  }
  function _singlecls[87888](?).readXX[87681](arg _mt[87904]:_MT[238], arg this[87902]:_singlecls[87888](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513135] "RVV" "temp"
    unknown ret[87684] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631716] "expr temp" "maybe param" "maybe type" "temp"
    (631719 'move' call_tmp[631716](377510 call valType _mt[243] this[87902]))
    (541653 'default init var' ret[87684] call_tmp[631716])
    (87687 'end of statement')
    const tmp[87742] "const" "temp"
    unknown call_tmp[631721] "expr temp" "maybe param" "maybe type" "temp"
    (631724 'move' call_tmp[631721](87739 '_wide_get_locale' this[87902]))
    (87744 'move' tmp[87742](87740 'deref' call_tmp[631721]))
    {
      {
        unknown localRet[87691] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541655] "maybe param" "maybe type" "temp"
        (541664 'move' type_tmp[541655](541661 call valType _mt[243] this[87902]))
        (541657 'init var split decl' localRet[87691] type_tmp[541655])
        (87694 'end of statement')
        (87698 call chpl_rmem_consist_release)
        (477094 'end of statement')
        unknown call_tmp[631730] "expr temp" "maybe param" "maybe type" "temp"
        (631733 'move' call_tmp[631730](87701 call isFull _mt[243] this[87902]))
        unknown call_tmp[631735] "expr temp" "maybe param" "maybe type" "temp"
        (631738 'move' call_tmp[631735](87725 call _cond_test call_tmp[631730]))
        if call_tmp[631735]
        {
          unknown call_tmp[631742] "maybe param" "maybe type" "temp"
          (631745 'move' call_tmp[631742](377522 call value _mt[243] this[87902]))
          (541666 'init var split init' localRet[87691] call_tmp[631742] type_tmp[541655])
          (477095 'end of statement' localRet[87691])
        }
        {
          unknown call_tmp[631749] "expr temp" "maybe param" "maybe type" "temp"
          (631752 'move' call_tmp[631749](377527 call singleAux _mt[243] this[87902]))
          (87712 call chpl_single_lock call_tmp[631749])
          (477097 'end of statement')
          unknown call_tmp[631756] "maybe param" "maybe type" "temp"
          (631759 'move' call_tmp[631756](377533 call value _mt[243] this[87902]))
          (541669 'init var split init' localRet[87691] call_tmp[631756] type_tmp[541655])
          (477098 'end of statement' localRet[87691])
          unknown call_tmp[631763] "expr temp" "maybe param" "maybe type" "temp"
          (631766 'move' call_tmp[631763](377538 call singleAux _mt[243] this[87902]))
          (87723 call chpl_single_unlock call_tmp[631763])
        }
        (87732 call chpl_rmem_consist_acquire)
        (477101 'end of statement')
        (87736 call = ret[87684] localRet[87691])
        (477102 'end of statement' ret[87684] localRet[87691])
      }
      (87747 'on block' 0 tmp[87742])
    }
    (513140 'move' ret[513135](513139 'deref' ret[87684]))
    gotoReturn _end_readXX[513133] _end_readXX[513133]
    (477105 'end of statement' ret[87684])
    label _end_readXX[513133]
    (513137 return ret[513135])
  }
  function _singlecls[87888](?).writeEF[87761](arg _mt[87908]:_MT[238], arg this[87906]:_singlecls[87888](?), arg val[87758] :
  (377546 call valType _mt[243] this[87906])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[87827] "const" "temp"
    unknown call_tmp[631770] "expr temp" "maybe param" "maybe type" "temp"
    (631773 'move' call_tmp[631770](87824 '_wide_get_locale' this[87906]))
    (87829 'move' tmp[87827](87825 'deref' call_tmp[631770]))
    {
      {
        (87772 call chpl_rmem_consist_release)
        (477107 'end of statement')
        unknown call_tmp[631777] "expr temp" "maybe param" "maybe type" "temp"
        (631780 'move' call_tmp[631777](377554 call singleAux _mt[243] this[87906]))
        (87778 call chpl_single_lock call_tmp[631777])
        (477108 'end of statement')
        unknown call_tmp[631784] "expr temp" "maybe param" "maybe type" "temp"
        (631787 'move' call_tmp[631784](87781 call isFull _mt[243] this[87906]))
        unknown call_tmp[631789] "expr temp" "maybe param" "maybe type" "temp"
        (631792 'move' call_tmp[631789](87805 call _cond_test call_tmp[631784]))
        if call_tmp[631789]
        {
          (87803 call halt "single var already defined")
        }
        unknown call_tmp[631796] "expr temp" "maybe param" "maybe type" "temp"
        (631799 'move' call_tmp[631796](377559 call value _mt[243] this[87906]))
        (87812 call = call_tmp[631796] val[87758])
        (477110 'end of statement')
        unknown call_tmp[631803] "expr temp" "maybe param" "maybe type" "temp"
        (631806 'move' call_tmp[631803](377565 call singleAux _mt[243] this[87906]))
        (87818 call chpl_single_markAndSignalFull call_tmp[631803])
        (477111 'end of statement')
        (87822 call chpl_rmem_consist_acquire)
      }
      (87832 'on block' 0 tmp[87827])
    }
    (513144 return _void[55])
  }
  {
    (87767 call <(87764 'lifetime_of' this[87906])(87766 'lifetime_of' val[87758]))
  }
  function _singlecls[87888](?).isFull[87841](arg _mt[87912]:_MT[238], arg this[87910]:_singlecls[87888](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513148] "RVV" "temp"
    unknown b[87844] "dead at end of block" "insert auto destroy"
    (541672 'default init var' b[87844] bool[10])
    (87847 'end of statement')
    const tmp[87874] "const" "temp"
    unknown call_tmp[631808] "expr temp" "maybe param" "maybe type" "temp"
    (631811 'move' call_tmp[631808](87871 '_wide_get_locale' this[87910]))
    (87876 'move' tmp[87874](87872 'deref' call_tmp[631808]))
    {
      {
        (87852 call chpl_rmem_consist_release)
        (477113 'end of statement')
        unknown call_tmp[631815] "expr temp" "maybe param" "maybe type" "temp"
        (631818 'move' call_tmp[631815](377572 call value _mt[243] this[87910]))
        unknown call_tmp[631820] "expr temp" "maybe param" "maybe type" "temp"
        (631823 'move' call_tmp[631820](87860 call c_ptrTo call_tmp[631815]))
        unknown call_tmp[631827] "expr temp" "maybe param" "maybe type" "temp"
        (631830 'move' call_tmp[631827](377577 call singleAux _mt[243] this[87910]))
        unknown call_tmp[631832] "expr temp" "maybe param" "maybe type" "temp"
        (631835 'move' call_tmp[631832](87863 call chpl_single_isFull call_tmp[631820] call_tmp[631827]))
        (87864 call = b[87844] call_tmp[631832])
        (477114 'end of statement' b[87844])
        (87869 call chpl_rmem_consist_acquire)
      }
      (87879 'on block' 0 tmp[87874])
    }
    (513153 'move' ret[513148](513152 'deref' b[87844]))
    gotoReturn _end_isFull[513146] _end_isFull[513146]
    (477117 'end of statement' b[87844])
    label _end_isFull[513146]
    (513150 return ret[513148])
  }
  function _singlecls[87888](?).super[779689](arg _mt[779691]:_MT[238], arg this[779693]:_singlecls[87888](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779703] "RVV" "temp"
    unknown call_tmp[779710] "expr temp" "maybe param" "maybe type" "temp"
    (779713 'move' call_tmp[779710](779697 '.v' this[779693] c"super"))
    (779708 'move' ret[779703](779707 'deref' call_tmp[779710]))
    (779705 return ret[779703])
  }
  function _singlecls[779720](?).valType[779715](arg _mt[779717]:_MT[238], arg this[779722]:_singlecls[779720](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779757] "RVV" "temp" "type variable"
    unknown borrowOfThis[779724]
    (779749 'end of statement')
    (779726 'move' borrowOfThis[779724](779729 call _cast _borrowedNonNilable[214](?) this[779722]))
    (779750 'end of statement' borrowOfThis[779724])
    unknown call_tmp[779771] "expr temp" "maybe param" "maybe type" "temp"
    (779774 'move' call_tmp[779771](779739 'is bound' borrowOfThis[779724] c"valType"))
    if call_tmp[779771]
    {
      unknown call_tmp[779776] "expr temp" "maybe param" "maybe type" "temp"
      (779779 'move' call_tmp[779776](779734 '.v' borrowOfThis[779724] c"valType"))
      unknown call_tmp[779781] "expr temp" "maybe param" "maybe type" "temp"
      (779784 'move' call_tmp[779781](779735 call chpl_checkLegalTypeFieldAccessor this[779722] call_tmp[779776] "valType"))
      (779762 'move' ret[779757](779761 'deref' call_tmp[779781]))
      gotoReturn _end_valType[779755] _end_valType[779755]
      (779752 'end of statement' borrowOfThis[779724])
    }
    {
      (779767 'move' ret[779757](779766 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779755] _end_valType[779755]
    }
    label _end_valType[779755]
    (779759 return ret[779757])
  }
  function _singlecls[779720](?).valType[779786](arg _mt[779788]:_MT[238], arg this[779790]:_singlecls[779720](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779825] "RVV" "temp" "type variable"
    unknown borrowOfThis[779792] "type variable"
    (779817 'end of statement')
    (779794 'move' borrowOfThis[779792](779797 call _cast _borrowedNonNilable[214](?) this[779790]))
    (779818 'end of statement' borrowOfThis[779792])
    unknown call_tmp[779839] "expr temp" "maybe param" "maybe type" "temp"
    (779842 'move' call_tmp[779839](779807 'is bound' borrowOfThis[779792] c"valType"))
    if call_tmp[779839]
    {
      unknown call_tmp[779844] "expr temp" "maybe param" "maybe type" "temp"
      (779847 'move' call_tmp[779844](779802 '.v' borrowOfThis[779792] c"valType"))
      unknown call_tmp[779849] "expr temp" "maybe param" "maybe type" "temp"
      (779852 'move' call_tmp[779849](779803 call chpl_checkLegalTypeFieldAccessor this[779790] call_tmp[779844] "valType"))
      (779830 'move' ret[779825](779829 'deref' call_tmp[779849]))
      gotoReturn _end_valType[779823] _end_valType[779823]
      (779820 'end of statement' borrowOfThis[779792])
    }
    {
      (779835 'move' ret[779825](779834 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779823] _end_valType[779823]
    }
    label _end_valType[779823]
    (779827 return ret[779825])
  }
  function _singlecls[87888](?).value[779854](arg _mt[779856]:_MT[238], arg this[779858]:_singlecls[87888](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779868] "RVV" "temp"
    unknown call_tmp[779875] "expr temp" "maybe param" "maybe type" "temp"
    (779878 'move' call_tmp[779875](779862 '.' this[779858] c"value"))
    (779873 'move' ret[779868](779872 'addr of' call_tmp[779875]))
    (779870 return ret[779868])
  }
  function _singlecls[87888](?).singleAux[779880](arg _mt[779882]:_MT[238], arg this[779884]:_singlecls[87888](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779894] "RVV" "temp"
    unknown call_tmp[779901] "expr temp" "maybe param" "maybe type" "temp"
    (779904 'move' call_tmp[779901](779888 '.' this[779884] c"singleAux"))
    (779899 'move' ret[779894](779898 'addr of' call_tmp[779901]))
    (779896 return ret[779894])
  }
  function _singlecls[87888](?).writeThis[779906](arg _mt[779910]:_MT[238], arg this[779908]:_singlecls[87888](?), arg f[779909]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779915 call writeThisDefaultImpl f[779909] this[779908])
    (779920 return _void[55])
  }
  function _singlecls[87888](?).readThis[779922](arg _mt[779926]:_MT[238], arg this[779924]:_singlecls[87888](?), arg f[779925]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779930 call readThisDefaultImpl f[779925] this[779924])
    (779936 return _void[55])
  }
  type _singlecls[87888](?) val super[355676]:object[22] "super class" unknown valType[87549] "type variable" unknown value[87553] valType[87549] val singleAux[87558]:chpl_single_aux_t[88058] chpl_single_aux_t[88058]
  type _singlecls[779720](?)
  type unmanaged _singlecls[415452](?)
  type _singlecls[377395](?)
  function isSingleValue[87921](arg x[87918]:_singlevar[87256](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513159] "RVV" "param" "temp"
    (513164 'move' ret[513159](513163 'deref' 1))
    (513161 return ret[513159])
  }
  function isSingleValue[87933](arg x[87931]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513168] "RVV" "param" "temp"
    (513173 'move' ret[513168](513172 'deref' 0))
    (513170 return ret[513168])
  }
  (355102 'used modules list'(84293 'use' ChapelStandard[20267])(84297 'use' AlignedTSupport[88357])(84300 'use' MemConsistency[186648])(84303 'use' SyncVarRuntimeSupport[87943]))
}