AST dump for ChapelSyncvar after pass buildDefaultFunctions.
Module use list: ChapelStandard AlignedTSupport MemConsistency SyncVarRuntimeSupport 

{
  function chpl__init_ChapelSyncvar[415957]() : void[4] "insert line file info" "module init"
  {
    (541505 'init var' useNativeSyncVar[84489] 1)
    (84492 'end of statement')
    (513134 return _void[55])
  }
  function isSupported[84306](arg t[84304]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512668] "RVV" "param" "temp"
    unknown tmp[422028] "maybe param" "temp"
    unknown tmp[422049] "maybe param" "temp"
    unknown tmp[422070] "maybe param" "temp"
    unknown tmp[422091] "maybe param" "temp"
    unknown tmp[422112] "maybe param" "temp"
    unknown tmp[422133] "maybe param" "temp"
    unknown tmp[422154] "maybe param" "temp"
    unknown tmp[422175] "maybe param" "temp"
    (422186 'move' tmp[422175](84311 call isNothingType t[84304]))
    unknown call_tmp[629894] "expr temp" "maybe param" "maybe type" "temp"
    (629897 'move' call_tmp[629894](422188 call _cond_invalid tmp[422175]))
    if call_tmp[629894]
    {
      (422191 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560522] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560523] "maybe param" "temp"
    unknown call_tmp[629899] "expr temp" "maybe param" "maybe type" "temp"
    (629902 'move' call_tmp[629899](422176 call isTrue tmp[422175]))
    (560528 'move' tmp[560523](560526 call _cond_test call_tmp[629899]))
    if tmp[560523]
    {
      (560533 'move' tmp[560522](560530 '_paramFoldLogical' tmp[560523] 1))
    }
    {
      unknown tmp[560535] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629904] "expr temp" "maybe param" "maybe type" "temp"
      (629907 'move' call_tmp[629904](84315 call isBoolType t[84304]))
      (560537 'move' tmp[560535](422180 call isTrue call_tmp[629904]))
      (560542 'move' tmp[560522](560539 '_paramFoldLogical' tmp[560523] tmp[560535]))
    }
    (422165 'move' tmp[422154] tmp[560522])
    unknown call_tmp[629909] "expr temp" "maybe param" "maybe type" "temp"
    (629912 'move' call_tmp[629909](422167 call _cond_invalid tmp[422154]))
    if call_tmp[629909]
    {
      (422170 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560549] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560550] "maybe param" "temp"
    unknown call_tmp[629914] "expr temp" "maybe param" "maybe type" "temp"
    (629917 'move' call_tmp[629914](422155 call isTrue tmp[422154]))
    (560555 'move' tmp[560550](560553 call _cond_test call_tmp[629914]))
    if tmp[560550]
    {
      (560560 'move' tmp[560549](560557 '_paramFoldLogical' tmp[560550] 1))
    }
    {
      unknown tmp[560562] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629919] "expr temp" "maybe param" "maybe type" "temp"
      (629922 'move' call_tmp[629919](84321 call isIntegralType t[84304]))
      (560564 'move' tmp[560562](422159 call isTrue call_tmp[629919]))
      (560569 'move' tmp[560549](560566 '_paramFoldLogical' tmp[560550] tmp[560562]))
    }
    (422144 'move' tmp[422133] tmp[560549])
    unknown call_tmp[629924] "expr temp" "maybe param" "maybe type" "temp"
    (629927 'move' call_tmp[629924](422146 call _cond_invalid tmp[422133]))
    if call_tmp[629924]
    {
      (422149 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560576] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560577] "maybe param" "temp"
    unknown call_tmp[629929] "expr temp" "maybe param" "maybe type" "temp"
    (629932 'move' call_tmp[629929](422134 call isTrue tmp[422133]))
    (560582 'move' tmp[560577](560580 call _cond_test call_tmp[629929]))
    if tmp[560577]
    {
      (560587 'move' tmp[560576](560584 '_paramFoldLogical' tmp[560577] 1))
    }
    {
      unknown tmp[560589] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629934] "expr temp" "maybe param" "maybe type" "temp"
      (629937 'move' call_tmp[629934](84327 call isRealType t[84304]))
      (560591 'move' tmp[560589](422138 call isTrue call_tmp[629934]))
      (560596 'move' tmp[560576](560593 '_paramFoldLogical' tmp[560577] tmp[560589]))
    }
    (422123 'move' tmp[422112] tmp[560576])
    unknown call_tmp[629939] "expr temp" "maybe param" "maybe type" "temp"
    (629942 'move' call_tmp[629939](422125 call _cond_invalid tmp[422112]))
    if call_tmp[629939]
    {
      (422128 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560603] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560604] "maybe param" "temp"
    unknown call_tmp[629944] "expr temp" "maybe param" "maybe type" "temp"
    (629947 'move' call_tmp[629944](422113 call isTrue tmp[422112]))
    (560609 'move' tmp[560604](560607 call _cond_test call_tmp[629944]))
    if tmp[560604]
    {
      (560614 'move' tmp[560603](560611 '_paramFoldLogical' tmp[560604] 1))
    }
    {
      unknown tmp[560616] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629949] "expr temp" "maybe param" "maybe type" "temp"
      (629952 'move' call_tmp[629949](84333 call isImagType t[84304]))
      (560618 'move' tmp[560616](422117 call isTrue call_tmp[629949]))
      (560623 'move' tmp[560603](560620 '_paramFoldLogical' tmp[560604] tmp[560616]))
    }
    (422102 'move' tmp[422091] tmp[560603])
    unknown call_tmp[629954] "expr temp" "maybe param" "maybe type" "temp"
    (629957 'move' call_tmp[629954](422104 call _cond_invalid tmp[422091]))
    if call_tmp[629954]
    {
      (422107 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560630] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560631] "maybe param" "temp"
    unknown call_tmp[629959] "expr temp" "maybe param" "maybe type" "temp"
    (629962 'move' call_tmp[629959](422092 call isTrue tmp[422091]))
    (560636 'move' tmp[560631](560634 call _cond_test call_tmp[629959]))
    if tmp[560631]
    {
      (560641 'move' tmp[560630](560638 '_paramFoldLogical' tmp[560631] 1))
    }
    {
      unknown tmp[560643] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629964] "expr temp" "maybe param" "maybe type" "temp"
      (629967 'move' call_tmp[629964](84339 call isEnumType t[84304]))
      (560645 'move' tmp[560643](422096 call isTrue call_tmp[629964]))
      (560650 'move' tmp[560630](560647 '_paramFoldLogical' tmp[560631] tmp[560643]))
    }
    (422081 'move' tmp[422070] tmp[560630])
    unknown call_tmp[629969] "expr temp" "maybe param" "maybe type" "temp"
    (629972 'move' call_tmp[629969](422083 call _cond_invalid tmp[422070]))
    if call_tmp[629969]
    {
      (422086 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560657] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560658] "maybe param" "temp"
    unknown call_tmp[629974] "expr temp" "maybe param" "maybe type" "temp"
    (629977 'move' call_tmp[629974](422071 call isTrue tmp[422070]))
    (560663 'move' tmp[560658](560661 call _cond_test call_tmp[629974]))
    if tmp[560658]
    {
      (560668 'move' tmp[560657](560665 '_paramFoldLogical' tmp[560658] 1))
    }
    {
      unknown tmp[560670] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629979] "expr temp" "maybe param" "maybe type" "temp"
      (629982 'move' call_tmp[629979](84345 call isClassType t[84304]))
      (560672 'move' tmp[560670](422075 call isTrue call_tmp[629979]))
      (560677 'move' tmp[560657](560674 '_paramFoldLogical' tmp[560658] tmp[560670]))
    }
    (422060 'move' tmp[422049] tmp[560657])
    unknown call_tmp[629984] "expr temp" "maybe param" "maybe type" "temp"
    (629987 'move' call_tmp[629984](422062 call _cond_invalid tmp[422049]))
    if call_tmp[629984]
    {
      (422065 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560684] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560685] "maybe param" "temp"
    unknown call_tmp[629989] "expr temp" "maybe param" "maybe type" "temp"
    (629992 'move' call_tmp[629989](422050 call isTrue tmp[422049]))
    (560690 'move' tmp[560685](560688 call _cond_test call_tmp[629989]))
    if tmp[560685]
    {
      (560695 'move' tmp[560684](560692 '_paramFoldLogical' tmp[560685] 1))
    }
    {
      unknown tmp[560697] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629994] "expr temp" "maybe param" "maybe type" "temp"
      (629997 'move' call_tmp[629994](84351 call isStringType t[84304]))
      (560699 'move' tmp[560697](422054 call isTrue call_tmp[629994]))
      (560704 'move' tmp[560684](560701 '_paramFoldLogical' tmp[560685] tmp[560697]))
    }
    (422039 'move' tmp[422028] tmp[560684])
    unknown call_tmp[629999] "expr temp" "maybe param" "maybe type" "temp"
    (630002 'move' call_tmp[629999](422041 call _cond_invalid tmp[422028]))
    if call_tmp[629999]
    {
      (422044 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560711] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560712] "maybe param" "temp"
    unknown call_tmp[630004] "expr temp" "maybe param" "maybe type" "temp"
    (630007 'move' call_tmp[630004](422029 call isTrue tmp[422028]))
    (560717 'move' tmp[560712](560715 call _cond_test call_tmp[630004]))
    if tmp[560712]
    {
      (560722 'move' tmp[560711](560719 '_paramFoldLogical' tmp[560712] 1))
    }
    {
      unknown tmp[560724] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630009] "expr temp" "maybe param" "maybe type" "temp"
      (630012 'move' call_tmp[630009](84356 call == t[84304] chpl_taskID_t[163]))
      (560726 'move' tmp[560724](422033 call isTrue call_tmp[630009]))
      (560731 'move' tmp[560711](560728 '_paramFoldLogical' tmp[560712] tmp[560724]))
    }
    (512673 'move' ret[512668](512672 'deref' tmp[560711]))
    (512670 return ret[512668])
  }
  function ensureFEType[84369](arg t[84367]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[630014] "expr temp" "maybe param" "maybe type" "temp"
    (630017 'move' call_tmp[630014](84374 call isSupported t[84367]))
    unknown call_tmp[630019] "expr temp" "maybe param" "maybe type" "temp"
    (630022 'move' call_tmp[630019](84376 call == call_tmp[630014] 0))
    unknown call_tmp[630024] "expr temp" "maybe param" "maybe type" "temp"
    (630027 'move' call_tmp[630024](84420 call _cond_test call_tmp[630019]))
    if call_tmp[630024]
    {
      unknown call_tmp[630029] "expr temp" "maybe param" "maybe type" "temp"
      (630032 'move' call_tmp[630029](84399 call _cast string[26] t[84367]))
      (84418 call compilerError "sync/single types cannot contain type '" call_tmp[630029] "'")
    }
    unknown call_tmp[630034] "expr temp" "maybe param" "maybe type" "temp"
    (630037 'move' call_tmp[630034](84429 call isNonNilableClass t[84367]))
    unknown call_tmp[630039] "expr temp" "maybe param" "maybe type" "temp"
    (630042 'move' call_tmp[630039](84451 call _cond_test call_tmp[630034]))
    if call_tmp[630039]
    {
      (84449 call compilerError "sync/single types cannot contain non-nilable classes")
    }
    unknown call_tmp[630044] "expr temp" "maybe param" "maybe type" "temp"
    (630047 'move' call_tmp[630044](84459 call isGenericType t[84367]))
    unknown call_tmp[630049] "expr temp" "maybe param" "maybe type" "temp"
    (630052 'move' call_tmp[630049](84481 call _cond_test call_tmp[630044]))
    if call_tmp[630049]
    {
      (84479 call compilerError "sync/single types cannot contain generic types")
    }
    (512675 return _void[55])
  }
  unknown useNativeSyncVar[84489] "config" "no doc" "param"
  function getSyncClassType[84497](arg valType[84495]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512679] "RVV" "temp" "type variable"
    unknown tmp[422196] "maybe param" "temp"
    (422207 'move' tmp[422196] useNativeSyncVar[84489])
    unknown call_tmp[630054] "expr temp" "maybe param" "maybe type" "temp"
    (630057 'move' call_tmp[630054](422209 call _cond_invalid tmp[422196]))
    if call_tmp[630054]
    {
      (422212 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560738] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560739] "maybe param" "temp"
    unknown call_tmp[630059] "expr temp" "maybe param" "maybe type" "temp"
    (630062 'move' call_tmp[630059](422197 call isTrue tmp[422196]))
    (560744 'move' tmp[560739](560742 call _cond_test call_tmp[630059]))
    if tmp[560739]
    {
      unknown tmp[560746] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630064] "expr temp" "maybe param" "maybe type" "temp"
      (630067 'move' call_tmp[630064](84503 call supportsNativeSyncVar valType[84495]))
      (560748 'move' tmp[560746](422200 call isTrue call_tmp[630064]))
      (560753 'move' tmp[560738](560750 '_paramFoldLogical' tmp[560739] tmp[560746]))
    }
    {
      (560758 'move' tmp[560738](560755 '_paramFoldLogical' tmp[560739] 0))
    }
    unknown call_tmp[630069] "expr temp" "maybe param" "maybe type" "temp"
    (630072 'move' call_tmp[630069](84522 call _cond_test tmp[560738]))
    if call_tmp[630069]
    {
      unknown call_tmp[630074] "expr temp" "maybe param" "maybe type" "temp"
      (630077 'move' call_tmp[630074](84509 call unmanaged _qthreads_synccls[415408](?) valType[84495]))
      (512684 'move' ret[512679](512683 'deref' call_tmp[630074]))
      gotoReturn _end_getSyncClassType[512677] _end_getSyncClassType[512677]
    }
    {
      unknown call_tmp[630079] "expr temp" "maybe param" "maybe type" "temp"
      (630082 'move' call_tmp[630079](84517 call unmanaged _synccls[415411](?) valType[84495]))
      (512689 'move' ret[512679](512688 'deref' call_tmp[630079]))
      gotoReturn _end_getSyncClassType[512677] _end_getSyncClassType[512677]
    }
    label _end_getSyncClassType[512677]
    (512681 return ret[512679])
  }
  function chpl__readXX[84533](arg x[84531]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[512695] "RVV" "temp"
    (512700 'move' ret[512695](512699 'deref' x[84531]))
    (512697 return ret[512695])
  }
  function _syncvar[84944](?).init[84563](arg _mt[84948]:_MT[238], ref arg this[84946]:_syncvar[84944](?), arg valType[84561]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84568 call ensureFEType valType[84561])
    (476829 'end of statement')
    unknown tmp[459730] "temp" "type variable"
    (459732 'move' tmp[459730] valType[84561])
    (459734 'init field' this[84946] c"valType" tmp[459730])
    (476830 'end of statement')
    unknown call_tmp[630084] "expr temp" "maybe param" "maybe type" "temp"
    (630087 'move' call_tmp[630084](84591 call getSyncClassType valType[84561]))
    unknown call_tmp[630089] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630092 'move' call_tmp[630089](747806 'new' call_tmp[630084]))
    unknown call_tmp[630094] "expr temp" "maybe param" "maybe type" "temp"
    (630097 'move' call_tmp[630094](459749 '.v' this[84946] c"valType"))
    unknown call_tmp[630099] "maybe param" "maybe type" "temp"
    (630102 'move' call_tmp[630099](459741 call getSyncClassType call_tmp[630094]))
    unknown tmp[459738] "temp"
    (459743 'init var' tmp[459738] call_tmp[630089] call_tmp[630099])
    (459745 'init field' this[84946] c"wrapped" tmp[459738])
    (476831 'end of statement')
    unknown tmp[459754] "temp"
    (459757 'init var' tmp[459754] 1 bool[10])
    (459759 'init field' this[84946] c"isOwned" tmp[459754])
    (476832 'end of statement')
    (512702 return _void[55])
  }
  function _syncvar[84944](?).init[84605](arg _mt[84952]:_MT[238], ref arg this[84950]:_syncvar[84944](?), const arg other[84602]:_syncvar[84944](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[459763] "temp" "type variable"
    (459765 'move' tmp[459763](84612 call valType _mt[243] other[84602]))
    (459767 'init field' this[84950] c"valType" tmp[459763])
    (476833 'end of statement')
    unknown call_tmp[630108] "maybe param" "maybe type" "temp"
    (630111 'move' call_tmp[630108](84624 call wrapped _mt[243] other[84602]))
    unknown call_tmp[630113] "expr temp" "maybe param" "maybe type" "temp"
    (630116 'move' call_tmp[630113](459782 '.v' this[84950] c"valType"))
    unknown call_tmp[630118] "maybe param" "maybe type" "temp"
    (630121 'move' call_tmp[630118](459774 call getSyncClassType call_tmp[630113]))
    unknown tmp[459771] "temp"
    (459776 'init var' tmp[459771] call_tmp[630108] call_tmp[630118])
    (459778 'init field' this[84950] c"wrapped" tmp[459771])
    (476834 'end of statement')
    unknown tmp[459785] "temp"
    (459788 'init var' tmp[459785] 0 bool[10])
    (459790 'init field' this[84950] c"isOwned" tmp[459785])
    (476835 'end of statement')
    (512704 return _void[55])
  }
  function _syncvar[84944](?).init=[84648](arg _mt[84956]:_MT[238], ref arg this[84954]:_syncvar[84944](?), const arg other[84645]:_syncvar[84944](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630123] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630126 'move' call_tmp[630123](84657 'typeof' this[84954]))
    unknown call_tmp[630130] "expr temp" "maybe param" "maybe type" "temp"
    (630133 'move' call_tmp[630130](84658 call valType _mt[243] call_tmp[630123]))
    unknown call_tmp[630137] "expr temp" "maybe param" "maybe type" "temp"
    (630140 'move' call_tmp[630137](84652 call valType _mt[243] other[84645]))
    unknown call_tmp[630142] "expr temp" "maybe param" "maybe type" "temp"
    (630145 'move' call_tmp[630142](354223 'is_coercible' call_tmp[630130] call_tmp[630137]))
    unknown call_tmp[630147] "expr temp" "maybe param" "maybe type" "temp"
    (630150 'move' call_tmp[630147](84663 call == call_tmp[630142] 0))
    unknown call_tmp[630152] "expr temp" "maybe param" "maybe type" "temp"
    (630155 'move' call_tmp[630152](84793 call _cond_test call_tmp[630147]))
    if call_tmp[630152]
    {
      unknown call_tmp[630157] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630160 'move' call_tmp[630157](84667 'typeof' this[84954]))
      unknown call_tmp[630162] "expr temp" "maybe param" "maybe type" "temp"
      (630165 'move' call_tmp[630162](84669 call _cast string[26] call_tmp[630157]))
      unknown call_tmp[630167] "expr temp" "maybe param" "maybe type" "temp"
      (630170 'move' call_tmp[630167](84671 call + "'" call_tmp[630162]))
      unknown call_tmp[630172] "expr temp" "maybe param" "maybe type" "temp"
      (630175 'move' call_tmp[630172](84690 call + call_tmp[630167] "' from '"))
      unknown call_tmp[630177] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630180 'move' call_tmp[630177](84693 'typeof' other[84645]))
      unknown call_tmp[630182] "expr temp" "maybe param" "maybe type" "temp"
      (630185 'move' call_tmp[630182](84695 call _cast string[26] call_tmp[630177]))
      unknown call_tmp[630187] "expr temp" "maybe param" "maybe type" "temp"
      (630190 'move' call_tmp[630187](84697 call + call_tmp[630172] call_tmp[630182]))
      unknown call_tmp[630192] "maybe param" "maybe type" "temp"
      (630195 'move' call_tmp[630192](84700 call + call_tmp[630187] "'"))
      unknown theseTypes[84702] "dead at end of block" "param"
      (541507 'init var' theseTypes[84702] call_tmp[630192])
      (84705 'end of statement')
      unknown call_tmp[630199] "expr temp" "maybe param" "maybe type" "temp"
      (630202 'move' call_tmp[630199](84725 call valType _mt[243] other[84645]))
      unknown call_tmp[630204] "expr temp" "maybe param" "maybe type" "temp"
      (630207 'move' call_tmp[630204](84729 call _cast string[26] call_tmp[630199]))
      unknown call_tmp[630209] "expr temp" "maybe param" "maybe type" "temp"
      (630212 'move' call_tmp[630209](84731 call + "because '" call_tmp[630204]))
      unknown call_tmp[630214] "expr temp" "maybe param" "maybe type" "temp"
      (630217 'move' call_tmp[630214](84750 call + call_tmp[630209] "' is not coercible to '"))
      unknown call_tmp[630219] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630222 'move' call_tmp[630219](84753 'typeof' this[84954]))
      unknown call_tmp[630226] "expr temp" "maybe param" "maybe type" "temp"
      (630229 'move' call_tmp[630226](84754 call valType _mt[243] call_tmp[630219]))
      unknown call_tmp[630231] "expr temp" "maybe param" "maybe type" "temp"
      (630234 'move' call_tmp[630231](84758 call _cast string[26] call_tmp[630226]))
      unknown call_tmp[630236] "expr temp" "maybe param" "maybe type" "temp"
      (630239 'move' call_tmp[630236](84760 call + call_tmp[630214] call_tmp[630231]))
      unknown call_tmp[630241] "maybe param" "maybe type" "temp"
      (630244 'move' call_tmp[630241](84763 call + call_tmp[630236] "'"))
      unknown because[84765] "dead at end of block" "param"
      (541509 'init var' because[84765] call_tmp[630241])
      (84768 'end of statement')
      (84791 call compilerError "cannot initialize " theseTypes[84702] " " because[84765])
    }
    unknown call_tmp[630248] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630251 'move' call_tmp[630248](84803 'typeof' this[84954]))
    unknown call_tmp[630255] "expr temp" "maybe param" "maybe type" "temp"
    (630258 'move' call_tmp[630255](84804 call valType _mt[243] call_tmp[630248]))
    (84808 call(84799 call (partial) init _mt[243] this[84954]) call_tmp[630255])
    (476837 'end of statement')
    unknown call_tmp[630264] "expr temp" "maybe param" "maybe type" "temp"
    (630267 'move' call_tmp[630264](84821 call(84817 call (partial) readFE _mt[243] other[84645])))
    (84823 call(84813 call (partial) writeEF _mt[243] this[84954]) call_tmp[630264])
    (512706 return _void[55])
  }
  function _syncvar[84944](?).init=[84836](arg _mt[84960]:_MT[238], ref arg this[84958]:_syncvar[84944](?), const arg other[84833] :
  (84830 call valType _mt[243] this[84958])) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630273] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630276 'move' call_tmp[630273](84843 'typeof' other[84833]))
    (84845 call(84839 call (partial) init _mt[243] this[84958]) call_tmp[630273])
    (476839 'end of statement')
    (84854 call(84849 call (partial) writeEF _mt[243] this[84958]) other[84833])
    (512708 return _void[55])
  }
  function _syncvar[84944](?).deinit[84860](arg _mt[84964]:_MT[238], arg this[84962]:_syncvar[84944](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630282] "expr temp" "maybe param" "maybe type" "temp"
    (630285 'move' call_tmp[630282](376910 call isOwned _mt[243] this[84962]))
    unknown call_tmp[630287] "expr temp" "maybe param" "maybe type" "temp"
    (630290 'move' call_tmp[630287](84864 call == call_tmp[630282] 1))
    unknown call_tmp[630292] "expr temp" "maybe param" "maybe type" "temp"
    (630295 'move' call_tmp[630292](84871 call _cond_test call_tmp[630287]))
    if call_tmp[630292]
    {
      unknown call_tmp[630299] "expr temp" "maybe param" "maybe type" "temp"
      (630302 'move' call_tmp[630299](376915 call wrapped _mt[243] this[84962]))
      (84868 call chpl__delete call_tmp[630299])
    }
    (512710 return _void[55])
  }
  function _syncvar[84944](?).readThis[84883](arg _mt[84968]:_MT[238], arg this[84966]:_syncvar[84944](?), arg x[84881]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84906 call compilerError "sync variables cannot currently be read - use writeEF/writeFF instead")
    (512712 return _void[55])
  }
  function _syncvar[84944](?).writeThis[84915](arg _mt[84972]:_MT[238], arg this[84970]:_syncvar[84944](?), arg x[84913]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84938 call compilerError "sync variables cannot currently be written - apply readFE/readFF() to those variables first")
    (512714 return _void[55])
  }
  function _syncvar[84944](?).valType[775680](arg _mt[775682]:_MT[238], arg this[775684]:_syncvar[84944](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775703] "RVV" "temp" "type variable"
    unknown call_tmp[775717] "expr temp" "maybe param" "maybe type" "temp"
    (775720 'move' call_tmp[775717](775689 'is bound' this[775684] c"valType"))
    if call_tmp[775717]
    {
      unknown call_tmp[775722] "expr temp" "maybe param" "maybe type" "temp"
      (775725 'move' call_tmp[775722](775688 '.v' this[775684] c"valType"))
      (775708 'move' ret[775703](775707 'deref' call_tmp[775722]))
      gotoReturn _end_valType[775701] _end_valType[775701]
    }
    {
      (775713 'move' ret[775703](775712 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775701] _end_valType[775701]
    }
    label _end_valType[775701]
    (775705 return ret[775703])
  }
  function _syncvar[84944](?).valType[775727](arg _mt[775729]:_MT[238], arg this[775731]:_syncvar[84944](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775750] "RVV" "temp" "type variable"
    unknown call_tmp[775764] "expr temp" "maybe param" "maybe type" "temp"
    (775767 'move' call_tmp[775764](775736 'is bound' this[775731] c"valType"))
    if call_tmp[775764]
    {
      unknown call_tmp[775769] "expr temp" "maybe param" "maybe type" "temp"
      (775772 'move' call_tmp[775769](775735 '.v' this[775731] c"valType"))
      (775755 'move' ret[775750](775754 'deref' call_tmp[775769]))
      gotoReturn _end_valType[775748] _end_valType[775748]
    }
    {
      (775760 'move' ret[775750](775759 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775748] _end_valType[775748]
    }
    label _end_valType[775748]
    (775752 return ret[775750])
  }
  function _syncvar[84944](?).wrapped[775774](arg _mt[775776]:_MT[238], ref arg this[775778]:_syncvar[84944](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775788] "RVV" "temp"
    unknown call_tmp[775795] "expr temp" "maybe param" "maybe type" "temp"
    (775798 'move' call_tmp[775795](775782 '.' this[775778] c"wrapped"))
    (775793 'move' ret[775788](775792 'addr of' call_tmp[775795]))
    (775790 return ret[775788])
  }
  function _syncvar[84944](?).isOwned[775800](arg _mt[775802]:_MT[238], ref arg this[775804]:_syncvar[84944](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775814] "RVV" "temp"
    unknown call_tmp[775821] "expr temp" "maybe param" "maybe type" "temp"
    (775824 'move' call_tmp[775821](775808 '.' this[775804] c"isOwned"))
    (775819 'move' ret[775814](775818 'addr of' call_tmp[775821]))
    (775816 return ret[775814])
  }
  function chpl_fields_are_comparable[775838](arg _arg1[775840]:_syncvar[84944](?), arg _arg2[775841]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[775870]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[775877] "expr temp" "maybe param" "maybe type" "temp"
    (775880 'move' call_tmp[775877](775844 call wrapped _mt[243] _arg1[775840]))
    unknown call_tmp[775882] "expr temp" "maybe param" "maybe type" "temp"
    (775885 'move' call_tmp[775882](775848 call wrapped _mt[243] _arg2[775841]))
    unknown call_tmp[775887] "expr temp" "maybe param" "maybe type" "temp"
    (775890 'move' call_tmp[775887](775852 'call resolves' c"==" call_tmp[775877] call_tmp[775882]))
    unknown call_tmp[775892] "expr temp" "maybe param" "maybe type" "temp"
    (775895 'move' call_tmp[775892](775854 call isOwned _mt[243] _arg1[775840]))
    unknown call_tmp[775897] "expr temp" "maybe param" "maybe type" "temp"
    (775900 'move' call_tmp[775897](775858 call isOwned _mt[243] _arg2[775841]))
    unknown call_tmp[775902] "expr temp" "maybe param" "maybe type" "temp"
    (775905 'move' call_tmp[775902](775862 'call resolves' c"==" call_tmp[775892] call_tmp[775897]))
    unknown call_tmp[775907] "expr temp" "maybe param" "maybe type" "temp"
    (775910 'move' call_tmp[775907](775864 '&' call_tmp[775887] call_tmp[775902]))
    (775875 'move' ret[775870](775874 'deref' call_tmp[775907]))
    (775872 return ret[775870])
  }
  function ==[775826](arg _arg1[775828]:_syncvar[84944](?), arg _arg2[775829]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[775954]:bool[10] "RVV" "temp"
    unknown call_tmp[775971] "expr temp" "maybe param" "maybe type" "temp"
    (775974 'move' call_tmp[775971](775918 call wrapped _mt[243] _arg1[775828]))
    unknown call_tmp[775976] "expr temp" "maybe param" "maybe type" "temp"
    (775979 'move' call_tmp[775976](775922 call wrapped _mt[243] _arg2[775829]))
    unknown call_tmp[775981] "expr temp" "maybe param" "maybe type" "temp"
    (775984 'move' call_tmp[775981](775926 call != call_tmp[775971] call_tmp[775976]))
    if call_tmp[775981]
    {
      (775959 'move' ret[775954](775958 'deref' 0))
      gotoReturn _end_==[775952] _end_==[775952]
    }
    unknown call_tmp[775986] "expr temp" "maybe param" "maybe type" "temp"
    (775989 'move' call_tmp[775986](775932 call isOwned _mt[243] _arg1[775828]))
    unknown call_tmp[775991] "expr temp" "maybe param" "maybe type" "temp"
    (775994 'move' call_tmp[775991](775936 call isOwned _mt[243] _arg2[775829]))
    unknown call_tmp[775996] "expr temp" "maybe param" "maybe type" "temp"
    (775999 'move' call_tmp[775996](775940 call != call_tmp[775986] call_tmp[775991]))
    if call_tmp[775996]
    {
      (775964 'move' ret[775954](775963 'deref' 0))
      gotoReturn _end_==[775952] _end_==[775952]
    }
    (775969 'move' ret[775954](775968 'deref' 1))
    label _end_==[775952]
    (775956 return ret[775954])
  }
  where {
    unknown call_tmp[776001] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776004 'move' call_tmp[776001](775832 'typeof' _arg1[775828]))
    unknown call_tmp[776006] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776009 'move' call_tmp[776006](775834 'typeof' _arg2[775829]))
    unknown call_tmp[776011] "expr temp" "maybe param" "maybe type" "temp"
    (776014 'move' call_tmp[776011](775836 call == call_tmp[776001] call_tmp[776006]))
    unknown call_tmp[776016] "expr temp" "maybe param" "maybe type" "temp"
    (776019 'move' call_tmp[776016](775912 call chpl_fields_are_comparable[775838] _arg1[775828] _arg2[775829]))
    (775916 '&' call_tmp[776011] call_tmp[776016])
  }
  function chpl_fields_are_comparable[776033](arg _arg1[776035]:_syncvar[84944](?), arg _arg2[776036]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776065]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776072] "expr temp" "maybe param" "maybe type" "temp"
    (776075 'move' call_tmp[776072](776039 call wrapped _mt[243] _arg1[776035]))
    unknown call_tmp[776077] "expr temp" "maybe param" "maybe type" "temp"
    (776080 'move' call_tmp[776077](776043 call wrapped _mt[243] _arg2[776036]))
    unknown call_tmp[776082] "expr temp" "maybe param" "maybe type" "temp"
    (776085 'move' call_tmp[776082](776047 'call resolves' c"!=" call_tmp[776072] call_tmp[776077]))
    unknown call_tmp[776087] "expr temp" "maybe param" "maybe type" "temp"
    (776090 'move' call_tmp[776087](776049 call isOwned _mt[243] _arg1[776035]))
    unknown call_tmp[776092] "expr temp" "maybe param" "maybe type" "temp"
    (776095 'move' call_tmp[776092](776053 call isOwned _mt[243] _arg2[776036]))
    unknown call_tmp[776097] "expr temp" "maybe param" "maybe type" "temp"
    (776100 'move' call_tmp[776097](776057 'call resolves' c"!=" call_tmp[776087] call_tmp[776092]))
    unknown call_tmp[776102] "expr temp" "maybe param" "maybe type" "temp"
    (776105 'move' call_tmp[776102](776059 '&' call_tmp[776082] call_tmp[776097]))
    (776070 'move' ret[776065](776069 'deref' call_tmp[776102]))
    (776067 return ret[776065])
  }
  function !=[776021](arg _arg1[776023]:_syncvar[84944](?), arg _arg2[776024]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776149]:bool[10] "RVV" "temp"
    unknown call_tmp[776166] "expr temp" "maybe param" "maybe type" "temp"
    (776169 'move' call_tmp[776166](776113 call wrapped _mt[243] _arg1[776023]))
    unknown call_tmp[776171] "expr temp" "maybe param" "maybe type" "temp"
    (776174 'move' call_tmp[776171](776117 call wrapped _mt[243] _arg2[776024]))
    unknown call_tmp[776176] "expr temp" "maybe param" "maybe type" "temp"
    (776179 'move' call_tmp[776176](776121 call != call_tmp[776166] call_tmp[776171]))
    if call_tmp[776176]
    {
      (776154 'move' ret[776149](776153 'deref' 1))
      gotoReturn _end_!=[776147] _end_!=[776147]
    }
    unknown call_tmp[776181] "expr temp" "maybe param" "maybe type" "temp"
    (776184 'move' call_tmp[776181](776127 call isOwned _mt[243] _arg1[776023]))
    unknown call_tmp[776186] "expr temp" "maybe param" "maybe type" "temp"
    (776189 'move' call_tmp[776186](776131 call isOwned _mt[243] _arg2[776024]))
    unknown call_tmp[776191] "expr temp" "maybe param" "maybe type" "temp"
    (776194 'move' call_tmp[776191](776135 call != call_tmp[776181] call_tmp[776186]))
    if call_tmp[776191]
    {
      (776159 'move' ret[776149](776158 'deref' 1))
      gotoReturn _end_!=[776147] _end_!=[776147]
    }
    (776164 'move' ret[776149](776163 'deref' 0))
    label _end_!=[776147]
    (776151 return ret[776149])
  }
  where {
    unknown call_tmp[776196] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776199 'move' call_tmp[776196](776027 'typeof' _arg1[776023]))
    unknown call_tmp[776201] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776204 'move' call_tmp[776201](776029 'typeof' _arg2[776024]))
    unknown call_tmp[776206] "expr temp" "maybe param" "maybe type" "temp"
    (776209 'move' call_tmp[776206](776031 call == call_tmp[776196] call_tmp[776201]))
    unknown call_tmp[776211] "expr temp" "maybe param" "maybe type" "temp"
    (776214 'move' call_tmp[776211](776107 call chpl_fields_are_comparable[776033] _arg1[776023] _arg2[776024]))
    (776111 '&' call_tmp[776206] call_tmp[776211])
  }
  function chpl_fields_are_comparable[776228](arg _arg1[776230]:_syncvar[84944](?), arg _arg2[776231]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776260]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776267] "expr temp" "maybe param" "maybe type" "temp"
    (776270 'move' call_tmp[776267](776234 call wrapped _mt[243] _arg1[776230]))
    unknown call_tmp[776272] "expr temp" "maybe param" "maybe type" "temp"
    (776275 'move' call_tmp[776272](776238 call wrapped _mt[243] _arg2[776231]))
    unknown call_tmp[776277] "expr temp" "maybe param" "maybe type" "temp"
    (776280 'move' call_tmp[776277](776242 'call resolves' c"<" call_tmp[776267] call_tmp[776272]))
    unknown call_tmp[776282] "expr temp" "maybe param" "maybe type" "temp"
    (776285 'move' call_tmp[776282](776244 call isOwned _mt[243] _arg1[776230]))
    unknown call_tmp[776287] "expr temp" "maybe param" "maybe type" "temp"
    (776290 'move' call_tmp[776287](776248 call isOwned _mt[243] _arg2[776231]))
    unknown call_tmp[776292] "expr temp" "maybe param" "maybe type" "temp"
    (776295 'move' call_tmp[776292](776252 'call resolves' c"<" call_tmp[776282] call_tmp[776287]))
    unknown call_tmp[776297] "expr temp" "maybe param" "maybe type" "temp"
    (776300 'move' call_tmp[776297](776254 '&' call_tmp[776277] call_tmp[776292]))
    (776265 'move' ret[776260](776264 'deref' call_tmp[776297]))
    (776262 return ret[776260])
  }
  function <[776216](arg _arg1[776218]:_syncvar[84944](?), arg _arg2[776219]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776374]:bool[10] "RVV" "temp"
    unknown call_tmp[776401] "expr temp" "maybe param" "maybe type" "temp"
    (776404 'move' call_tmp[776401](776308 call wrapped _mt[243] _arg1[776218]))
    unknown call_tmp[776406] "expr temp" "maybe param" "maybe type" "temp"
    (776409 'move' call_tmp[776406](776312 call wrapped _mt[243] _arg2[776219]))
    unknown call_tmp[776411] "expr temp" "maybe param" "maybe type" "temp"
    (776414 'move' call_tmp[776411](776316 call < call_tmp[776401] call_tmp[776406]))
    if call_tmp[776411]
    {
      (776379 'move' ret[776374](776378 'deref' 1))
      gotoReturn _end_<[776372] _end_<[776372]
    }
    unknown call_tmp[776416] "expr temp" "maybe param" "maybe type" "temp"
    (776419 'move' call_tmp[776416](776322 call wrapped _mt[243] _arg1[776218]))
    unknown call_tmp[776421] "expr temp" "maybe param" "maybe type" "temp"
    (776424 'move' call_tmp[776421](776326 call wrapped _mt[243] _arg2[776219]))
    unknown call_tmp[776426] "expr temp" "maybe param" "maybe type" "temp"
    (776429 'move' call_tmp[776426](776330 call > call_tmp[776416] call_tmp[776421]))
    if call_tmp[776426]
    {
      (776384 'move' ret[776374](776383 'deref' 0))
      gotoReturn _end_<[776372] _end_<[776372]
    }
    unknown call_tmp[776431] "expr temp" "maybe param" "maybe type" "temp"
    (776434 'move' call_tmp[776431](776336 call isOwned _mt[243] _arg1[776218]))
    unknown call_tmp[776436] "expr temp" "maybe param" "maybe type" "temp"
    (776439 'move' call_tmp[776436](776340 call isOwned _mt[243] _arg2[776219]))
    unknown call_tmp[776441] "expr temp" "maybe param" "maybe type" "temp"
    (776444 'move' call_tmp[776441](776344 call < call_tmp[776431] call_tmp[776436]))
    if call_tmp[776441]
    {
      (776389 'move' ret[776374](776388 'deref' 1))
      gotoReturn _end_<[776372] _end_<[776372]
    }
    unknown call_tmp[776446] "expr temp" "maybe param" "maybe type" "temp"
    (776449 'move' call_tmp[776446](776350 call isOwned _mt[243] _arg1[776218]))
    unknown call_tmp[776451] "expr temp" "maybe param" "maybe type" "temp"
    (776454 'move' call_tmp[776451](776354 call isOwned _mt[243] _arg2[776219]))
    unknown call_tmp[776456] "expr temp" "maybe param" "maybe type" "temp"
    (776459 'move' call_tmp[776456](776358 call > call_tmp[776446] call_tmp[776451]))
    if call_tmp[776456]
    {
      (776394 'move' ret[776374](776393 'deref' 0))
      gotoReturn _end_<[776372] _end_<[776372]
    }
    (776399 'move' ret[776374](776398 'deref' 0))
    label _end_<[776372]
    (776376 return ret[776374])
  }
  where {
    unknown call_tmp[776461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776464 'move' call_tmp[776461](776222 'typeof' _arg1[776218]))
    unknown call_tmp[776466] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776469 'move' call_tmp[776466](776224 'typeof' _arg2[776219]))
    unknown call_tmp[776471] "expr temp" "maybe param" "maybe type" "temp"
    (776474 'move' call_tmp[776471](776226 call == call_tmp[776461] call_tmp[776466]))
    unknown call_tmp[776476] "expr temp" "maybe param" "maybe type" "temp"
    (776479 'move' call_tmp[776476](776302 call chpl_fields_are_comparable[776228] _arg1[776218] _arg2[776219]))
    (776306 '&' call_tmp[776471] call_tmp[776476])
  }
  function chpl_fields_are_comparable[776493](arg _arg1[776495]:_syncvar[84944](?), arg _arg2[776496]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776525]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776532] "expr temp" "maybe param" "maybe type" "temp"
    (776535 'move' call_tmp[776532](776499 call wrapped _mt[243] _arg1[776495]))
    unknown call_tmp[776537] "expr temp" "maybe param" "maybe type" "temp"
    (776540 'move' call_tmp[776537](776503 call wrapped _mt[243] _arg2[776496]))
    unknown call_tmp[776542] "expr temp" "maybe param" "maybe type" "temp"
    (776545 'move' call_tmp[776542](776507 'call resolves' c"<=" call_tmp[776532] call_tmp[776537]))
    unknown call_tmp[776547] "expr temp" "maybe param" "maybe type" "temp"
    (776550 'move' call_tmp[776547](776509 call isOwned _mt[243] _arg1[776495]))
    unknown call_tmp[776552] "expr temp" "maybe param" "maybe type" "temp"
    (776555 'move' call_tmp[776552](776513 call isOwned _mt[243] _arg2[776496]))
    unknown call_tmp[776557] "expr temp" "maybe param" "maybe type" "temp"
    (776560 'move' call_tmp[776557](776517 'call resolves' c"<=" call_tmp[776547] call_tmp[776552]))
    unknown call_tmp[776562] "expr temp" "maybe param" "maybe type" "temp"
    (776565 'move' call_tmp[776562](776519 '&' call_tmp[776542] call_tmp[776557]))
    (776530 'move' ret[776525](776529 'deref' call_tmp[776562]))
    (776527 return ret[776525])
  }
  function <=[776481](arg _arg1[776483]:_syncvar[84944](?), arg _arg2[776484]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776639]:bool[10] "RVV" "temp"
    unknown call_tmp[776666] "expr temp" "maybe param" "maybe type" "temp"
    (776669 'move' call_tmp[776666](776573 call wrapped _mt[243] _arg1[776483]))
    unknown call_tmp[776671] "expr temp" "maybe param" "maybe type" "temp"
    (776674 'move' call_tmp[776671](776577 call wrapped _mt[243] _arg2[776484]))
    unknown call_tmp[776676] "expr temp" "maybe param" "maybe type" "temp"
    (776679 'move' call_tmp[776676](776581 call < call_tmp[776666] call_tmp[776671]))
    if call_tmp[776676]
    {
      (776644 'move' ret[776639](776643 'deref' 1))
      gotoReturn _end_<=[776637] _end_<=[776637]
    }
    unknown call_tmp[776681] "expr temp" "maybe param" "maybe type" "temp"
    (776684 'move' call_tmp[776681](776587 call wrapped _mt[243] _arg1[776483]))
    unknown call_tmp[776686] "expr temp" "maybe param" "maybe type" "temp"
    (776689 'move' call_tmp[776686](776591 call wrapped _mt[243] _arg2[776484]))
    unknown call_tmp[776691] "expr temp" "maybe param" "maybe type" "temp"
    (776694 'move' call_tmp[776691](776595 call > call_tmp[776681] call_tmp[776686]))
    if call_tmp[776691]
    {
      (776649 'move' ret[776639](776648 'deref' 0))
      gotoReturn _end_<=[776637] _end_<=[776637]
    }
    unknown call_tmp[776696] "expr temp" "maybe param" "maybe type" "temp"
    (776699 'move' call_tmp[776696](776601 call isOwned _mt[243] _arg1[776483]))
    unknown call_tmp[776701] "expr temp" "maybe param" "maybe type" "temp"
    (776704 'move' call_tmp[776701](776605 call isOwned _mt[243] _arg2[776484]))
    unknown call_tmp[776706] "expr temp" "maybe param" "maybe type" "temp"
    (776709 'move' call_tmp[776706](776609 call < call_tmp[776696] call_tmp[776701]))
    if call_tmp[776706]
    {
      (776654 'move' ret[776639](776653 'deref' 1))
      gotoReturn _end_<=[776637] _end_<=[776637]
    }
    unknown call_tmp[776711] "expr temp" "maybe param" "maybe type" "temp"
    (776714 'move' call_tmp[776711](776615 call isOwned _mt[243] _arg1[776483]))
    unknown call_tmp[776716] "expr temp" "maybe param" "maybe type" "temp"
    (776719 'move' call_tmp[776716](776619 call isOwned _mt[243] _arg2[776484]))
    unknown call_tmp[776721] "expr temp" "maybe param" "maybe type" "temp"
    (776724 'move' call_tmp[776721](776623 call > call_tmp[776711] call_tmp[776716]))
    if call_tmp[776721]
    {
      (776659 'move' ret[776639](776658 'deref' 0))
      gotoReturn _end_<=[776637] _end_<=[776637]
    }
    (776664 'move' ret[776639](776663 'deref' 1))
    label _end_<=[776637]
    (776641 return ret[776639])
  }
  where {
    unknown call_tmp[776726] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776729 'move' call_tmp[776726](776487 'typeof' _arg1[776483]))
    unknown call_tmp[776731] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776734 'move' call_tmp[776731](776489 'typeof' _arg2[776484]))
    unknown call_tmp[776736] "expr temp" "maybe param" "maybe type" "temp"
    (776739 'move' call_tmp[776736](776491 call == call_tmp[776726] call_tmp[776731]))
    unknown call_tmp[776741] "expr temp" "maybe param" "maybe type" "temp"
    (776744 'move' call_tmp[776741](776567 call chpl_fields_are_comparable[776493] _arg1[776483] _arg2[776484]))
    (776571 '&' call_tmp[776736] call_tmp[776741])
  }
  function chpl_fields_are_comparable[776758](arg _arg1[776760]:_syncvar[84944](?), arg _arg2[776761]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776790]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776797] "expr temp" "maybe param" "maybe type" "temp"
    (776800 'move' call_tmp[776797](776764 call wrapped _mt[243] _arg1[776760]))
    unknown call_tmp[776802] "expr temp" "maybe param" "maybe type" "temp"
    (776805 'move' call_tmp[776802](776768 call wrapped _mt[243] _arg2[776761]))
    unknown call_tmp[776807] "expr temp" "maybe param" "maybe type" "temp"
    (776810 'move' call_tmp[776807](776772 'call resolves' c">" call_tmp[776797] call_tmp[776802]))
    unknown call_tmp[776812] "expr temp" "maybe param" "maybe type" "temp"
    (776815 'move' call_tmp[776812](776774 call isOwned _mt[243] _arg1[776760]))
    unknown call_tmp[776817] "expr temp" "maybe param" "maybe type" "temp"
    (776820 'move' call_tmp[776817](776778 call isOwned _mt[243] _arg2[776761]))
    unknown call_tmp[776822] "expr temp" "maybe param" "maybe type" "temp"
    (776825 'move' call_tmp[776822](776782 'call resolves' c">" call_tmp[776812] call_tmp[776817]))
    unknown call_tmp[776827] "expr temp" "maybe param" "maybe type" "temp"
    (776830 'move' call_tmp[776827](776784 '&' call_tmp[776807] call_tmp[776822]))
    (776795 'move' ret[776790](776794 'deref' call_tmp[776827]))
    (776792 return ret[776790])
  }
  function >[776746](arg _arg1[776748]:_syncvar[84944](?), arg _arg2[776749]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776904]:bool[10] "RVV" "temp"
    unknown call_tmp[776931] "expr temp" "maybe param" "maybe type" "temp"
    (776934 'move' call_tmp[776931](776838 call wrapped _mt[243] _arg1[776748]))
    unknown call_tmp[776936] "expr temp" "maybe param" "maybe type" "temp"
    (776939 'move' call_tmp[776936](776842 call wrapped _mt[243] _arg2[776749]))
    unknown call_tmp[776941] "expr temp" "maybe param" "maybe type" "temp"
    (776944 'move' call_tmp[776941](776846 call > call_tmp[776931] call_tmp[776936]))
    if call_tmp[776941]
    {
      (776909 'move' ret[776904](776908 'deref' 1))
      gotoReturn _end_>[776902] _end_>[776902]
    }
    unknown call_tmp[776946] "expr temp" "maybe param" "maybe type" "temp"
    (776949 'move' call_tmp[776946](776852 call wrapped _mt[243] _arg1[776748]))
    unknown call_tmp[776951] "expr temp" "maybe param" "maybe type" "temp"
    (776954 'move' call_tmp[776951](776856 call wrapped _mt[243] _arg2[776749]))
    unknown call_tmp[776956] "expr temp" "maybe param" "maybe type" "temp"
    (776959 'move' call_tmp[776956](776860 call < call_tmp[776946] call_tmp[776951]))
    if call_tmp[776956]
    {
      (776914 'move' ret[776904](776913 'deref' 0))
      gotoReturn _end_>[776902] _end_>[776902]
    }
    unknown call_tmp[776961] "expr temp" "maybe param" "maybe type" "temp"
    (776964 'move' call_tmp[776961](776866 call isOwned _mt[243] _arg1[776748]))
    unknown call_tmp[776966] "expr temp" "maybe param" "maybe type" "temp"
    (776969 'move' call_tmp[776966](776870 call isOwned _mt[243] _arg2[776749]))
    unknown call_tmp[776971] "expr temp" "maybe param" "maybe type" "temp"
    (776974 'move' call_tmp[776971](776874 call > call_tmp[776961] call_tmp[776966]))
    if call_tmp[776971]
    {
      (776919 'move' ret[776904](776918 'deref' 1))
      gotoReturn _end_>[776902] _end_>[776902]
    }
    unknown call_tmp[776976] "expr temp" "maybe param" "maybe type" "temp"
    (776979 'move' call_tmp[776976](776880 call isOwned _mt[243] _arg1[776748]))
    unknown call_tmp[776981] "expr temp" "maybe param" "maybe type" "temp"
    (776984 'move' call_tmp[776981](776884 call isOwned _mt[243] _arg2[776749]))
    unknown call_tmp[776986] "expr temp" "maybe param" "maybe type" "temp"
    (776989 'move' call_tmp[776986](776888 call < call_tmp[776976] call_tmp[776981]))
    if call_tmp[776986]
    {
      (776924 'move' ret[776904](776923 'deref' 0))
      gotoReturn _end_>[776902] _end_>[776902]
    }
    (776929 'move' ret[776904](776928 'deref' 0))
    label _end_>[776902]
    (776906 return ret[776904])
  }
  where {
    unknown call_tmp[776991] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776994 'move' call_tmp[776991](776752 'typeof' _arg1[776748]))
    unknown call_tmp[776996] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776999 'move' call_tmp[776996](776754 'typeof' _arg2[776749]))
    unknown call_tmp[777001] "expr temp" "maybe param" "maybe type" "temp"
    (777004 'move' call_tmp[777001](776756 call == call_tmp[776991] call_tmp[776996]))
    unknown call_tmp[777006] "expr temp" "maybe param" "maybe type" "temp"
    (777009 'move' call_tmp[777006](776832 call chpl_fields_are_comparable[776758] _arg1[776748] _arg2[776749]))
    (776836 '&' call_tmp[777001] call_tmp[777006])
  }
  function chpl_fields_are_comparable[777023](arg _arg1[777025]:_syncvar[84944](?), arg _arg2[777026]:_syncvar[84944](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[777055]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[777062] "expr temp" "maybe param" "maybe type" "temp"
    (777065 'move' call_tmp[777062](777029 call wrapped _mt[243] _arg1[777025]))
    unknown call_tmp[777067] "expr temp" "maybe param" "maybe type" "temp"
    (777070 'move' call_tmp[777067](777033 call wrapped _mt[243] _arg2[777026]))
    unknown call_tmp[777072] "expr temp" "maybe param" "maybe type" "temp"
    (777075 'move' call_tmp[777072](777037 'call resolves' c">=" call_tmp[777062] call_tmp[777067]))
    unknown call_tmp[777077] "expr temp" "maybe param" "maybe type" "temp"
    (777080 'move' call_tmp[777077](777039 call isOwned _mt[243] _arg1[777025]))
    unknown call_tmp[777082] "expr temp" "maybe param" "maybe type" "temp"
    (777085 'move' call_tmp[777082](777043 call isOwned _mt[243] _arg2[777026]))
    unknown call_tmp[777087] "expr temp" "maybe param" "maybe type" "temp"
    (777090 'move' call_tmp[777087](777047 'call resolves' c">=" call_tmp[777077] call_tmp[777082]))
    unknown call_tmp[777092] "expr temp" "maybe param" "maybe type" "temp"
    (777095 'move' call_tmp[777092](777049 '&' call_tmp[777072] call_tmp[777087]))
    (777060 'move' ret[777055](777059 'deref' call_tmp[777092]))
    (777057 return ret[777055])
  }
  function >=[777011](arg _arg1[777013]:_syncvar[84944](?), arg _arg2[777014]:_syncvar[84944](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[777169]:bool[10] "RVV" "temp"
    unknown call_tmp[777196] "expr temp" "maybe param" "maybe type" "temp"
    (777199 'move' call_tmp[777196](777103 call wrapped _mt[243] _arg1[777013]))
    unknown call_tmp[777201] "expr temp" "maybe param" "maybe type" "temp"
    (777204 'move' call_tmp[777201](777107 call wrapped _mt[243] _arg2[777014]))
    unknown call_tmp[777206] "expr temp" "maybe param" "maybe type" "temp"
    (777209 'move' call_tmp[777206](777111 call > call_tmp[777196] call_tmp[777201]))
    if call_tmp[777206]
    {
      (777174 'move' ret[777169](777173 'deref' 1))
      gotoReturn _end_>=[777167] _end_>=[777167]
    }
    unknown call_tmp[777211] "expr temp" "maybe param" "maybe type" "temp"
    (777214 'move' call_tmp[777211](777117 call wrapped _mt[243] _arg1[777013]))
    unknown call_tmp[777216] "expr temp" "maybe param" "maybe type" "temp"
    (777219 'move' call_tmp[777216](777121 call wrapped _mt[243] _arg2[777014]))
    unknown call_tmp[777221] "expr temp" "maybe param" "maybe type" "temp"
    (777224 'move' call_tmp[777221](777125 call < call_tmp[777211] call_tmp[777216]))
    if call_tmp[777221]
    {
      (777179 'move' ret[777169](777178 'deref' 0))
      gotoReturn _end_>=[777167] _end_>=[777167]
    }
    unknown call_tmp[777226] "expr temp" "maybe param" "maybe type" "temp"
    (777229 'move' call_tmp[777226](777131 call isOwned _mt[243] _arg1[777013]))
    unknown call_tmp[777231] "expr temp" "maybe param" "maybe type" "temp"
    (777234 'move' call_tmp[777231](777135 call isOwned _mt[243] _arg2[777014]))
    unknown call_tmp[777236] "expr temp" "maybe param" "maybe type" "temp"
    (777239 'move' call_tmp[777236](777139 call > call_tmp[777226] call_tmp[777231]))
    if call_tmp[777236]
    {
      (777184 'move' ret[777169](777183 'deref' 1))
      gotoReturn _end_>=[777167] _end_>=[777167]
    }
    unknown call_tmp[777241] "expr temp" "maybe param" "maybe type" "temp"
    (777244 'move' call_tmp[777241](777145 call isOwned _mt[243] _arg1[777013]))
    unknown call_tmp[777246] "expr temp" "maybe param" "maybe type" "temp"
    (777249 'move' call_tmp[777246](777149 call isOwned _mt[243] _arg2[777014]))
    unknown call_tmp[777251] "expr temp" "maybe param" "maybe type" "temp"
    (777254 'move' call_tmp[777251](777153 call < call_tmp[777241] call_tmp[777246]))
    if call_tmp[777251]
    {
      (777189 'move' ret[777169](777188 'deref' 0))
      gotoReturn _end_>=[777167] _end_>=[777167]
    }
    (777194 'move' ret[777169](777193 'deref' 1))
    label _end_>=[777167]
    (777171 return ret[777169])
  }
  where {
    unknown call_tmp[777256] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777259 'move' call_tmp[777256](777017 'typeof' _arg1[777013]))
    unknown call_tmp[777261] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777264 'move' call_tmp[777261](777019 'typeof' _arg2[777014]))
    unknown call_tmp[777266] "expr temp" "maybe param" "maybe type" "temp"
    (777269 'move' call_tmp[777266](777021 call == call_tmp[777256] call_tmp[777261]))
    unknown call_tmp[777271] "expr temp" "maybe param" "maybe type" "temp"
    (777274 'move' call_tmp[777271](777097 call chpl_fields_are_comparable[777023] _arg1[777013] _arg2[777014]))
    (777101 '&' call_tmp[777266] call_tmp[777271])
  }
  function =[777276](ref arg _arg1[777278]:_syncvar[84944](?), const?  ref arg _arg2[777279]:_syncvar[84944](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[777316] "expr temp" "maybe param" "maybe type" "temp"
    (777319 'move' call_tmp[777316](777289 call wrapped _mt[243] _arg1[777278]))
    unknown call_tmp[777323] "expr temp" "maybe param" "maybe type" "temp"
    (777326 'move' call_tmp[777323](777293 call wrapped _mt[243] _arg2[777279]))
    (777297 call = call_tmp[777316] call_tmp[777323])
    (777310 'end of statement')
    unknown call_tmp[777330] "expr temp" "maybe param" "maybe type" "temp"
    (777333 'move' call_tmp[777330](777299 call isOwned _mt[243] _arg1[777278]))
    unknown call_tmp[777337] "expr temp" "maybe param" "maybe type" "temp"
    (777340 'move' call_tmp[777337](777303 call isOwned _mt[243] _arg2[777279]))
    (777307 call = call_tmp[777330] call_tmp[777337])
    (777312 return _void[55])
  }
  where {
    unknown call_tmp[777342] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777345 'move' call_tmp[777342](777282 'typeof' _arg1[777278]))
    unknown call_tmp[777347] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777350 'move' call_tmp[777347](777284 'typeof' _arg2[777279]))
    (777286 call == call_tmp[777342] call_tmp[777347])
  }
  function chpl__defaultHash[777352](arg r[777354]:_syncvar[84944](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[777385] "RVV" "temp"
    unknown call_tmp[777392] "expr temp" "maybe param" "maybe type" "temp"
    (777395 'move' call_tmp[777392](777371 call isOwned _mt[243] r[777354]))
    unknown call_tmp[777397] "expr temp" "maybe param" "maybe type" "temp"
    (777400 'move' call_tmp[777397](777375 call chpl__defaultHash call_tmp[777392]))
    unknown call_tmp[777402] "expr temp" "maybe param" "maybe type" "temp"
    (777405 'move' call_tmp[777402](777362 call wrapped _mt[243] r[777354]))
    unknown call_tmp[777407] "expr temp" "maybe param" "maybe type" "temp"
    (777410 'move' call_tmp[777407](777366 call chpl__defaultHash call_tmp[777402]))
    unknown call_tmp[777412] "expr temp" "maybe param" "maybe type" "temp"
    (777415 'move' call_tmp[777412](777356 call valType _mt[243] r[777354]))
    unknown call_tmp[777417] "expr temp" "maybe param" "maybe type" "temp"
    (777420 'move' call_tmp[777417](777360 call chpl__defaultHash call_tmp[777412]))
    unknown call_tmp[777422] "expr temp" "maybe param" "maybe type" "temp"
    (777425 'move' call_tmp[777422](777368 call chpl__defaultHashCombine call_tmp[777407] call_tmp[777417] 2))
    unknown call_tmp[777427] "expr temp" "maybe param" "maybe type" "temp"
    (777430 'move' call_tmp[777427](777377 call chpl__defaultHashCombine call_tmp[777397] call_tmp[777422] 3))
    (777390 'move' ret[777385](777389 'deref' call_tmp[777427]))
    (777387 return ret[777385])
  }
  sync type _syncvar[84944](?) unknown valType[84542] "type variable" unknown wrapped[84549](84548 call getSyncClassType valType[84542]) val isOwned[84555]:bool[10] 1 bool[10]
  function isSyncType[84981](arg t[84978]:_syncvar[84944](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512718] "RVV" "param" "temp"
    (512723 'move' ret[512718](512722 'deref' 1))
    (512720 return ret[512718])
  }
  function isSyncType[84993](arg t[84991]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512727] "RVV" "param" "temp"
    (512732 'move' ret[512727](512731 'deref' 0))
    (512729 return ret[512727])
  }
  function _syncvar[84944](?).readFE[85004](arg _mt[85009]:_MT[238], arg this[85006]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method"
  {
    unknown ret[512736] "RVV" "temp"
    unknown call_tmp[630306] "expr temp" "maybe param" "maybe type" "temp"
    (630309 'move' call_tmp[630306](358170 call wrapped _mt[243] this[85006]))
    unknown call_tmp[630313] "expr temp" "maybe param" "maybe type" "temp"
    (630316 'move' call_tmp[630313](85016 call(85012 call (partial) readFE _mt[243] call_tmp[630306])))
    (512741 'move' ret[512736](512740 'deref' call_tmp[630313]))
    (512738 return ret[512736])
  }
  function _syncvar[84944](?).readFF[85025](arg _mt[85030]:_MT[238], arg this[85027]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method"
  {
    unknown ret[512745] "RVV" "temp"
    unknown call_tmp[630320] "expr temp" "maybe param" "maybe type" "temp"
    (630323 'move' call_tmp[630320](358175 call wrapped _mt[243] this[85027]))
    unknown call_tmp[630327] "expr temp" "maybe param" "maybe type" "temp"
    (630330 'move' call_tmp[630327](85037 call(85033 call (partial) readFF _mt[243] call_tmp[630320])))
    (512750 'move' ret[512745](512749 'deref' call_tmp[630327]))
    (512747 return ret[512745])
  }
  function _syncvar[84944](?).readXX[85046](arg _mt[85051]:_MT[238], arg this[85048]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method"
  {
    unknown ret[512754] "RVV" "temp"
    (85055 call chpl_task_yield)
    (476848 'end of statement')
    unknown call_tmp[630334] "expr temp" "maybe param" "maybe type" "temp"
    (630337 'move' call_tmp[630334](358180 call wrapped _mt[243] this[85048]))
    unknown call_tmp[630341] "expr temp" "maybe param" "maybe type" "temp"
    (630344 'move' call_tmp[630341](85065 call(85061 call (partial) readXX _mt[243] call_tmp[630334])))
    (512759 'move' ret[512754](512758 'deref' call_tmp[630341]))
    (512756 return ret[512754])
  }
  function _syncvar[84944](?).writeEF[85077](arg _mt[85082]:_MT[238], arg this[85079]:_syncvar[84944](?) :
  _syncvar[84944](?), arg x[85074] :
  (376921 call valType _mt[243] this[85079])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630350] "expr temp" "maybe param" "maybe type" "temp"
    (630353 'move' call_tmp[630350](358185 call wrapped _mt[243] this[85079]))
    (85090 call(85085 call (partial) writeEF _mt[243] call_tmp[630350]) x[85074])
    (512761 return _void[55])
  }
  function _syncvar[84944](?).writeFF[85102](arg _mt[85107]:_MT[238], arg this[85104]:_syncvar[84944](?) :
  _syncvar[84944](?), arg x[85099] :
  (376927 call valType _mt[243] this[85104])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630361] "expr temp" "maybe param" "maybe type" "temp"
    (630364 'move' call_tmp[630361](358190 call wrapped _mt[243] this[85104]))
    (85117 call(85112 call (partial) writeFF _mt[243] call_tmp[630361]) x[85099])
    (512763 return _void[55])
  }
  function _syncvar[84944](?).writeXF[85129](arg _mt[85134]:_MT[238], arg this[85131]:_syncvar[84944](?) :
  _syncvar[84944](?), arg x[85126] :
  (376933 call valType _mt[243] this[85131])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630372] "expr temp" "maybe param" "maybe type" "temp"
    (630375 'move' call_tmp[630372](358195 call wrapped _mt[243] this[85131]))
    (85144 call(85139 call (partial) writeXF _mt[243] call_tmp[630372]) x[85126])
    (512765 return _void[55])
  }
  function _syncvar[84944](?).reset[85152](arg _mt[85157]:_MT[238], arg this[85154]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630381] "expr temp" "maybe param" "maybe type" "temp"
    (630384 'move' call_tmp[630381](358200 call wrapped _mt[243] this[85154]))
    (85166 call(85162 call (partial) reset _mt[243] call_tmp[630381]))
    (512767 return _void[55])
  }
  function _syncvar[84944](?).isFull[85174](arg _mt[85179]:_MT[238], arg this[85176]:_syncvar[84944](?) :
  _syncvar[84944](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[512771] "RVV" "temp"
    unknown call_tmp[630390] "expr temp" "maybe param" "maybe type" "temp"
    (630393 'move' call_tmp[630390](358205 call wrapped _mt[243] this[85176]))
    unknown call_tmp[630397] "expr temp" "maybe param" "maybe type" "temp"
    (630400 'move' call_tmp[630397](85184 call isFull _mt[243] call_tmp[630390]))
    (512776 'move' ret[512771](512775 'deref' call_tmp[630397]))
    (512773 return ret[512771])
  }
  function =[85202](ref arg lhs[85199]:_syncvar[84944](?), arg rhs[85205] :
  (459800 'query' lhs[85199] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630404] "expr temp" "maybe param" "maybe type" "temp"
    (630407 'move' call_tmp[630404](85209 call wrapped _mt[243] lhs[85199]))
    (85217 call(85212 call (partial) writeEF _mt[243] call_tmp[630404]) rhs[85205])
    (512778 return _void[55])
  }
  function +=[85232](ref arg lhs[85229]:_syncvar[84944](?), arg rhs[85235] :
  (459810 'query' lhs[85229] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630413] "expr temp" "maybe param" "maybe type" "temp"
    (630416 'move' call_tmp[630413](85239 call wrapped _mt[243] lhs[85229]))
    unknown call_tmp[630422] "expr temp" "maybe param" "maybe type" "temp"
    (630425 'move' call_tmp[630422](85246 call wrapped _mt[243] lhs[85229]))
    unknown call_tmp[630429] "expr temp" "maybe param" "maybe type" "temp"
    (630432 'move' call_tmp[630429](85253 call(85249 call (partial) readFE _mt[243] call_tmp[630422])))
    unknown call_tmp[630434] "expr temp" "maybe param" "maybe type" "temp"
    (630437 'move' call_tmp[630434](85255 call + call_tmp[630429] rhs[85235]))
    (85258 call(85242 call (partial) writeEF _mt[243] call_tmp[630413]) call_tmp[630434])
    (512780 return _void[55])
  }
  function -=[85273](ref arg lhs[85270]:_syncvar[84944](?), arg rhs[85276] :
  (459820 'query' lhs[85270] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630441] "expr temp" "maybe param" "maybe type" "temp"
    (630444 'move' call_tmp[630441](85280 call wrapped _mt[243] lhs[85270]))
    unknown call_tmp[630450] "expr temp" "maybe param" "maybe type" "temp"
    (630453 'move' call_tmp[630450](85287 call wrapped _mt[243] lhs[85270]))
    unknown call_tmp[630457] "expr temp" "maybe param" "maybe type" "temp"
    (630460 'move' call_tmp[630457](85294 call(85290 call (partial) readFE _mt[243] call_tmp[630450])))
    unknown call_tmp[630462] "expr temp" "maybe param" "maybe type" "temp"
    (630465 'move' call_tmp[630462](85296 call - call_tmp[630457] rhs[85276]))
    (85299 call(85283 call (partial) writeEF _mt[243] call_tmp[630441]) call_tmp[630462])
    (512782 return _void[55])
  }
  function *=[85314](ref arg lhs[85311]:_syncvar[84944](?), arg rhs[85317] :
  (459830 'query' lhs[85311] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630469] "expr temp" "maybe param" "maybe type" "temp"
    (630472 'move' call_tmp[630469](85321 call wrapped _mt[243] lhs[85311]))
    unknown call_tmp[630478] "expr temp" "maybe param" "maybe type" "temp"
    (630481 'move' call_tmp[630478](85328 call wrapped _mt[243] lhs[85311]))
    unknown call_tmp[630485] "expr temp" "maybe param" "maybe type" "temp"
    (630488 'move' call_tmp[630485](85335 call(85331 call (partial) readFE _mt[243] call_tmp[630478])))
    unknown call_tmp[630490] "expr temp" "maybe param" "maybe type" "temp"
    (630493 'move' call_tmp[630490](85337 call * call_tmp[630485] rhs[85317]))
    (85340 call(85324 call (partial) writeEF _mt[243] call_tmp[630469]) call_tmp[630490])
    (512784 return _void[55])
  }
  function /=[85355](ref arg lhs[85352]:_syncvar[84944](?), arg rhs[85358] :
  (459840 'query' lhs[85352] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630497] "expr temp" "maybe param" "maybe type" "temp"
    (630500 'move' call_tmp[630497](85362 call wrapped _mt[243] lhs[85352]))
    unknown call_tmp[630506] "expr temp" "maybe param" "maybe type" "temp"
    (630509 'move' call_tmp[630506](85369 call wrapped _mt[243] lhs[85352]))
    unknown call_tmp[630513] "expr temp" "maybe param" "maybe type" "temp"
    (630516 'move' call_tmp[630513](85376 call(85372 call (partial) readFE _mt[243] call_tmp[630506])))
    unknown call_tmp[630518] "expr temp" "maybe param" "maybe type" "temp"
    (630521 'move' call_tmp[630518](85378 call / call_tmp[630513] rhs[85358]))
    (85381 call(85365 call (partial) writeEF _mt[243] call_tmp[630497]) call_tmp[630518])
    (512786 return _void[55])
  }
  function %=[85396](ref arg lhs[85393]:_syncvar[84944](?), arg rhs[85399] :
  (459850 'query' lhs[85393] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630525] "expr temp" "maybe param" "maybe type" "temp"
    (630528 'move' call_tmp[630525](85403 call wrapped _mt[243] lhs[85393]))
    unknown call_tmp[630534] "expr temp" "maybe param" "maybe type" "temp"
    (630537 'move' call_tmp[630534](85410 call wrapped _mt[243] lhs[85393]))
    unknown call_tmp[630541] "expr temp" "maybe param" "maybe type" "temp"
    (630544 'move' call_tmp[630541](85417 call(85413 call (partial) readFE _mt[243] call_tmp[630534])))
    unknown call_tmp[630546] "expr temp" "maybe param" "maybe type" "temp"
    (630549 'move' call_tmp[630546](85419 call % call_tmp[630541] rhs[85399]))
    (85422 call(85406 call (partial) writeEF _mt[243] call_tmp[630525]) call_tmp[630546])
    (512788 return _void[55])
  }
  function **=[85437](ref arg lhs[85434]:_syncvar[84944](?), arg rhs[85440] :
  (459860 'query' lhs[85434] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630553] "expr temp" "maybe param" "maybe type" "temp"
    (630556 'move' call_tmp[630553](85444 call wrapped _mt[243] lhs[85434]))
    unknown call_tmp[630562] "expr temp" "maybe param" "maybe type" "temp"
    (630565 'move' call_tmp[630562](85451 call wrapped _mt[243] lhs[85434]))
    unknown call_tmp[630569] "expr temp" "maybe param" "maybe type" "temp"
    (630572 'move' call_tmp[630569](85458 call(85454 call (partial) readFE _mt[243] call_tmp[630562])))
    unknown call_tmp[630574] "expr temp" "maybe param" "maybe type" "temp"
    (630577 'move' call_tmp[630574](85460 call ** call_tmp[630569] rhs[85440]))
    (85463 call(85447 call (partial) writeEF _mt[243] call_tmp[630553]) call_tmp[630574])
    (512790 return _void[55])
  }
  function &=[85478](ref arg lhs[85475]:_syncvar[84944](?), arg rhs[85481] :
  (459870 'query' lhs[85475] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630581] "expr temp" "maybe param" "maybe type" "temp"
    (630584 'move' call_tmp[630581](85485 call wrapped _mt[243] lhs[85475]))
    unknown call_tmp[630590] "expr temp" "maybe param" "maybe type" "temp"
    (630593 'move' call_tmp[630590](85492 call wrapped _mt[243] lhs[85475]))
    unknown call_tmp[630597] "expr temp" "maybe param" "maybe type" "temp"
    (630600 'move' call_tmp[630597](85499 call(85495 call (partial) readFE _mt[243] call_tmp[630590])))
    unknown call_tmp[630602] "expr temp" "maybe param" "maybe type" "temp"
    (630605 'move' call_tmp[630602](85501 call & call_tmp[630597] rhs[85481]))
    (85504 call(85488 call (partial) writeEF _mt[243] call_tmp[630581]) call_tmp[630602])
    (512792 return _void[55])
  }
  function |=[85519](ref arg lhs[85516]:_syncvar[84944](?), arg rhs[85522] :
  (459880 'query' lhs[85516] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630609] "expr temp" "maybe param" "maybe type" "temp"
    (630612 'move' call_tmp[630609](85526 call wrapped _mt[243] lhs[85516]))
    unknown call_tmp[630618] "expr temp" "maybe param" "maybe type" "temp"
    (630621 'move' call_tmp[630618](85533 call wrapped _mt[243] lhs[85516]))
    unknown call_tmp[630625] "expr temp" "maybe param" "maybe type" "temp"
    (630628 'move' call_tmp[630625](85540 call(85536 call (partial) readFE _mt[243] call_tmp[630618])))
    unknown call_tmp[630630] "expr temp" "maybe param" "maybe type" "temp"
    (630633 'move' call_tmp[630630](85542 call | call_tmp[630625] rhs[85522]))
    (85545 call(85529 call (partial) writeEF _mt[243] call_tmp[630609]) call_tmp[630630])
    (512794 return _void[55])
  }
  function ^=[85560](ref arg lhs[85557]:_syncvar[84944](?), arg rhs[85563] :
  (459890 'query' lhs[85557] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630637] "expr temp" "maybe param" "maybe type" "temp"
    (630640 'move' call_tmp[630637](85567 call wrapped _mt[243] lhs[85557]))
    unknown call_tmp[630646] "expr temp" "maybe param" "maybe type" "temp"
    (630649 'move' call_tmp[630646](85574 call wrapped _mt[243] lhs[85557]))
    unknown call_tmp[630653] "expr temp" "maybe param" "maybe type" "temp"
    (630656 'move' call_tmp[630653](85581 call(85577 call (partial) readFE _mt[243] call_tmp[630646])))
    unknown call_tmp[630658] "expr temp" "maybe param" "maybe type" "temp"
    (630661 'move' call_tmp[630658](85583 call ^ call_tmp[630653] rhs[85563]))
    (85586 call(85570 call (partial) writeEF _mt[243] call_tmp[630637]) call_tmp[630658])
    (512796 return _void[55])
  }
  function >>=[85601](ref arg lhs[85598]:_syncvar[84944](?), arg rhs[85604] :
  (459900 'query' lhs[85598] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630665] "expr temp" "maybe param" "maybe type" "temp"
    (630668 'move' call_tmp[630665](85608 call wrapped _mt[243] lhs[85598]))
    unknown call_tmp[630674] "expr temp" "maybe param" "maybe type" "temp"
    (630677 'move' call_tmp[630674](85615 call wrapped _mt[243] lhs[85598]))
    unknown call_tmp[630681] "expr temp" "maybe param" "maybe type" "temp"
    (630684 'move' call_tmp[630681](85622 call(85618 call (partial) readFE _mt[243] call_tmp[630674])))
    unknown call_tmp[630686] "expr temp" "maybe param" "maybe type" "temp"
    (630689 'move' call_tmp[630686](85624 call >> call_tmp[630681] rhs[85604]))
    (85627 call(85611 call (partial) writeEF _mt[243] call_tmp[630665]) call_tmp[630686])
    (512798 return _void[55])
  }
  function <<=[85642](ref arg lhs[85639]:_syncvar[84944](?), arg rhs[85645] :
  (459910 'query' lhs[85639] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630693] "expr temp" "maybe param" "maybe type" "temp"
    (630696 'move' call_tmp[630693](85649 call wrapped _mt[243] lhs[85639]))
    unknown call_tmp[630702] "expr temp" "maybe param" "maybe type" "temp"
    (630705 'move' call_tmp[630702](85656 call wrapped _mt[243] lhs[85639]))
    unknown call_tmp[630709] "expr temp" "maybe param" "maybe type" "temp"
    (630712 'move' call_tmp[630709](85663 call(85659 call (partial) readFE _mt[243] call_tmp[630702])))
    unknown call_tmp[630714] "expr temp" "maybe param" "maybe type" "temp"
    (630717 'move' call_tmp[630714](85665 call << call_tmp[630709] rhs[85645]))
    (85668 call(85652 call (partial) writeEF _mt[243] call_tmp[630693]) call_tmp[630714])
    (512800 return _void[55])
  }
  function chpl__initCopy[85683](ref arg sv[85680]:_syncvar[84944](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[512804] "RVV" "temp"
    unknown call_tmp[630721] "expr temp" "maybe param" "maybe type" "temp"
    (630724 'move' call_tmp[630721](85690 call(85686 call (partial) readFE _mt[243] sv[85680])))
    (512809 'move' ret[512804](512808 'deref' call_tmp[630721]))
    (512806 return ret[512804])
  }
  function chpl__autoCopy[85702](const  ref arg rhs[85699]:_syncvar[84944](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[512813] "RVV" "temp"
    unknown call_tmp[630726] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630729 'move' call_tmp[630726](747807 'new' _syncvar[84944](?) rhs[85699]))
    (512818 'move' ret[512813](512817 'deref' call_tmp[630726]))
    (512815 return ret[512813])
  }
  function chpl__maybeAutoDestroyed[85724](arg x[85721]:_syncvar[84944](?)) param : _unknown[51] "inline"
  {
    unknown ret[512822] "RVV" "param" "temp"
    (512827 'move' ret[512822](512826 'deref' 1))
    (512824 return ret[512822])
  }
  function chpl__autoDestroy[85741](arg x[85738]:_syncvar[84944](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[630733] "expr temp" "maybe param" "maybe type" "temp"
    (630736 'move' call_tmp[630733](85744 call isOwned _mt[243] x[85738]))
    unknown call_tmp[630738] "expr temp" "maybe param" "maybe type" "temp"
    (630741 'move' call_tmp[630738](85748 call == call_tmp[630733] 1))
    unknown call_tmp[630743] "expr temp" "maybe param" "maybe type" "temp"
    (630746 'move' call_tmp[630743](85758 call _cond_test call_tmp[630738]))
    if call_tmp[630743]
    {
      unknown call_tmp[630750] "expr temp" "maybe param" "maybe type" "temp"
      (630753 'move' call_tmp[630750](85751 call wrapped _mt[243] x[85738]))
      (85755 call chpl__delete call_tmp[630750])
    }
    (512829 return _void[55])
  }
  function chpl__readXX[85775](const  ref arg x[85772]:_syncvar[84944](?)) : _unknown[51] "no doc"
  {
    unknown ret[512833] "RVV" "temp"
    unknown call_tmp[630757] "expr temp" "maybe param" "maybe type" "temp"
    (630760 'move' call_tmp[630757](85782 call(85778 call (partial) readXX _mt[243] x[85772])))
    (512838 'move' ret[512833](512837 'deref' call_tmp[630757]))
    (512835 return ret[512833])
  }
  function <=>[85794](arg lhs[85791]:_syncvar[84944](?), ref arg rhs[85796]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85799] "dead at end of block" "const" "insert auto destroy"
    (541511 'init var' tmp[85799] lhs[85791])
    (85802 'end of statement')
    (85806 call = lhs[85791] rhs[85796])
    (476872 'end of statement')
    (85811 call = rhs[85796] tmp[85799])
    (476873 'end of statement' tmp[85799])
    (512840 return _void[55])
  }
  function <=>[85820](ref arg lhs[85818]:_any[178](?), arg rhs[85823]:_syncvar[84944](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85827] "dead at end of block" "const" "insert auto destroy"
    (541513 'init var' tmp[85827] lhs[85818])
    (85830 'end of statement')
    (85834 call = lhs[85818] rhs[85823])
    (476875 'end of statement')
    (85839 call = rhs[85823] tmp[85827])
    (476876 'end of statement' tmp[85827])
    (512842 return _void[55])
  }
  function <=>[85850](arg lhs[85847]:_syncvar[84944](?), arg rhs[85853]:_syncvar[84944](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85857] "dead at end of block" "const" "insert auto destroy"
    (541515 'init var' tmp[85857] lhs[85847])
    (85860 'end of statement')
    (85864 call = lhs[85847] rhs[85853])
    (476878 'end of statement')
    (85869 call = rhs[85853] tmp[85857])
    (476879 'end of statement' tmp[85857])
    (512844 return _void[55])
  }
  function _synccls[86371](?).init[85892](arg _mt[86375]:_MT[238], arg this[86373]:_synccls[86371](?), arg valType[85890]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[459993] "temporary of super field" "temp"
    (460001 'move' super_tmp[459993](459994 '.v' this[86373] c"super"))
    (459997 call init _mt[243] super_tmp[459993])
    (476881 'end of statement')
    unknown tmp[459946] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491933] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[630762] "expr temp" "maybe param" "maybe type" "temp"
      (630765 'move' call_tmp[630762](459948 '.v' this[86373] c"super"))
      (491937 'move' call_type_tmp[491933](459951 'typeof' call_tmp[630762]))
    }
    (459952 'move' tmp[459946] call_type_tmp[491933])
    unknown call_tmp[630767] "maybe param" "maybe type" "temp"
    (630770 'move' call_tmp[630767](459957 'cast' tmp[459946] this[86373]))
    unknown chpl__thisAsParent[459954] "dead at end of block" "insert auto destroy" "temp"
    (541517 'init var' chpl__thisAsParent[459954] call_tmp[630767] tmp[459946])
    (459960 'setcid' chpl__thisAsParent[459954])
    (476882 'end of statement')
    unknown tmp[459962] "temp" "type variable"
    (459964 'move' tmp[459962] valType[85890])
    (459966 'init field' this[86373] c"valType" tmp[459962])
    (476883 'end of statement')
    unknown tmp[459970] "temp"
    unknown call_tmp[630772] "expr temp" "maybe param" "maybe type" "temp"
    (630775 'move' call_tmp[630772](459979 '.v' this[86373] c"valType"))
    (459973 'default init var' tmp[459970] call_tmp[630772])
    (459975 '.=' this[86373] c"value" tmp[459970])
    (476884 'end of statement')
    val tmp[459982]:chpl_sync_aux_t[87952] "temp"
    (459985 'default init var' tmp[459982] chpl_sync_aux_t[87952])
    (459987 '.=' this[86373] c"syncAux" tmp[459982])
    (476885 'end of statement')
    (459992 'setcid' this[86373])
    (476886 'end of statement')
    unknown call_tmp[630779] "expr temp" "maybe param" "maybe type" "temp"
    (630782 'move' call_tmp[630779](377006 call syncAux _mt[243] this[86373]))
    (85913 call chpl_sync_initAux call_tmp[630779])
    (512846 return _void[55])
  }
  function _synccls[86371](?).deinit[85919](arg _mt[86379]:_MT[238], arg this[86377]:_synccls[86371](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630786] "expr temp" "maybe param" "maybe type" "temp"
    (630789 'move' call_tmp[630786](377011 call syncAux _mt[243] this[86377]))
    (85924 call chpl_sync_destroyAux call_tmp[630786])
    (512848 return _void[55])
  }
  function _synccls[86371](?).readFE[85931](arg _mt[86383]:_MT[238], arg this[86381]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512852] "RVV" "temp"
    unknown ret[85934] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630793] "expr temp" "maybe param" "maybe type" "temp"
    (630796 'move' call_tmp[630793](377016 call valType _mt[243] this[86381]))
    (541519 'default init var' ret[85934] call_tmp[630793])
    (85937 'end of statement')
    const tmp[85977] "const" "temp"
    unknown call_tmp[630798] "expr temp" "maybe param" "maybe type" "temp"
    (630801 'move' call_tmp[630798](85974 '_wide_get_locale' this[86381]))
    (85979 'move' tmp[85977](85975 'deref' call_tmp[630798]))
    {
      {
        unknown localRet[85941] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541521] "maybe param" "maybe type" "temp"
        (541530 'move' type_tmp[541521](541527 call valType _mt[243] this[86381]))
        (541523 'init var split decl' localRet[85941] type_tmp[541521])
        (85944 'end of statement')
        (85948 call chpl_rmem_consist_release)
        (476889 'end of statement')
        unknown call_tmp[630807] "expr temp" "maybe param" "maybe type" "temp"
        (630810 'move' call_tmp[630807](377027 call syncAux _mt[243] this[86381]))
        (85953 call chpl_sync_waitFullAndLock call_tmp[630807])
        (476890 'end of statement')
        unknown call_tmp[630814] "maybe param" "maybe type" "temp"
        (630817 'move' call_tmp[630814](377033 call value _mt[243] this[86381]))
        (541532 'init var split init' localRet[85941] call_tmp[630814] type_tmp[541521])
        (476891 'end of statement' localRet[85941])
        unknown call_tmp[630821] "expr temp" "maybe param" "maybe type" "temp"
        (630824 'move' call_tmp[630821](377038 call syncAux _mt[243] this[86381]))
        (85963 call chpl_sync_markAndSignalEmpty call_tmp[630821])
        (476893 'end of statement')
        (85967 call chpl_rmem_consist_acquire)
        (476894 'end of statement')
        (85971 call = ret[85934] localRet[85941])
        (476895 'end of statement' ret[85934] localRet[85941])
      }
      (85982 'on block' 0 tmp[85977])
    }
    (512857 'move' ret[512852](512856 'deref' ret[85934]))
    gotoReturn _end_readFE[512850] _end_readFE[512850]
    (476898 'end of statement' ret[85934])
    label _end_readFE[512850]
    (512854 return ret[512852])
  }
  function _synccls[86371](?).readFF[85992](arg _mt[86387]:_MT[238], arg this[86385]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512863] "RVV" "temp"
    unknown ret[85995] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630828] "expr temp" "maybe param" "maybe type" "temp"
    (630831 'move' call_tmp[630828](377046 call valType _mt[243] this[86385]))
    (541535 'default init var' ret[85995] call_tmp[630828])
    (85998 'end of statement')
    const tmp[86038] "const" "temp"
    unknown call_tmp[630833] "expr temp" "maybe param" "maybe type" "temp"
    (630836 'move' call_tmp[630833](86035 '_wide_get_locale' this[86385]))
    (86040 'move' tmp[86038](86036 'deref' call_tmp[630833]))
    {
      {
        unknown localRet[86002] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541537] "maybe param" "maybe type" "temp"
        (541546 'move' type_tmp[541537](541543 call valType _mt[243] this[86385]))
        (541539 'init var split decl' localRet[86002] type_tmp[541537])
        (86005 'end of statement')
        (86009 call chpl_rmem_consist_release)
        (476900 'end of statement')
        unknown call_tmp[630842] "expr temp" "maybe param" "maybe type" "temp"
        (630845 'move' call_tmp[630842](377057 call syncAux _mt[243] this[86385]))
        (86014 call chpl_sync_waitFullAndLock call_tmp[630842])
        (476901 'end of statement')
        unknown call_tmp[630849] "maybe param" "maybe type" "temp"
        (630852 'move' call_tmp[630849](377063 call value _mt[243] this[86385]))
        (541548 'init var split init' localRet[86002] call_tmp[630849] type_tmp[541537])
        (476902 'end of statement' localRet[86002])
        unknown call_tmp[630856] "expr temp" "maybe param" "maybe type" "temp"
        (630859 'move' call_tmp[630856](377068 call syncAux _mt[243] this[86385]))
        (86024 call chpl_sync_markAndSignalFull call_tmp[630856])
        (476904 'end of statement')
        (86028 call chpl_rmem_consist_acquire)
        (476905 'end of statement')
        (86032 call = ret[85995] localRet[86002])
        (476906 'end of statement' ret[85995] localRet[86002])
      }
      (86043 'on block' 0 tmp[86038])
    }
    (512868 'move' ret[512863](512867 'deref' ret[85995]))
    gotoReturn _end_readFF[512861] _end_readFF[512861]
    (476909 'end of statement' ret[85995])
    label _end_readFF[512861]
    (512865 return ret[512863])
  }
  function _synccls[86371](?).readXX[86053](arg _mt[86391]:_MT[238], arg this[86389]:_synccls[86371](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512874] "RVV" "temp"
    unknown ret[86056] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630863] "expr temp" "maybe param" "maybe type" "temp"
    (630866 'move' call_tmp[630863](377076 call valType _mt[243] this[86389]))
    (541551 'default init var' ret[86056] call_tmp[630863])
    (86059 'end of statement')
    const tmp[86099] "const" "temp"
    unknown call_tmp[630868] "expr temp" "maybe param" "maybe type" "temp"
    (630871 'move' call_tmp[630868](86096 '_wide_get_locale' this[86389]))
    (86101 'move' tmp[86099](86097 'deref' call_tmp[630868]))
    {
      {
        unknown localRet[86063] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541553] "maybe param" "maybe type" "temp"
        (541562 'move' type_tmp[541553](541559 call valType _mt[243] this[86389]))
        (541555 'init var split decl' localRet[86063] type_tmp[541553])
        (86066 'end of statement')
        (86070 call chpl_rmem_consist_release)
        (476911 'end of statement')
        unknown call_tmp[630877] "expr temp" "maybe param" "maybe type" "temp"
        (630880 'move' call_tmp[630877](377087 call syncAux _mt[243] this[86389]))
        (86075 call chpl_sync_lock call_tmp[630877])
        (476912 'end of statement')
        unknown call_tmp[630884] "maybe param" "maybe type" "temp"
        (630887 'move' call_tmp[630884](377093 call value _mt[243] this[86389]))
        (541564 'init var split init' localRet[86063] call_tmp[630884] type_tmp[541553])
        (476913 'end of statement' localRet[86063])
        unknown call_tmp[630891] "expr temp" "maybe param" "maybe type" "temp"
        (630894 'move' call_tmp[630891](377098 call syncAux _mt[243] this[86389]))
        (86085 call chpl_sync_unlock call_tmp[630891])
        (476915 'end of statement')
        (86089 call chpl_rmem_consist_acquire)
        (476916 'end of statement')
        (86093 call = ret[86056] localRet[86063])
        (476917 'end of statement' ret[86056] localRet[86063])
      }
      (86104 'on block' 0 tmp[86099])
    }
    (512879 'move' ret[512874](512878 'deref' ret[86056]))
    gotoReturn _end_readXX[512872] _end_readXX[512872]
    (476920 'end of statement' ret[86056])
    label _end_readXX[512872]
    (512876 return ret[512874])
  }
  function _synccls[86371](?).writeEF[86118](arg _mt[86395]:_MT[238], arg this[86393]:_synccls[86371](?), arg val[86115] :
  (377106 call valType _mt[243] this[86393])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86154] "const" "temp"
    unknown call_tmp[630898] "expr temp" "maybe param" "maybe type" "temp"
    (630901 'move' call_tmp[630898](86151 '_wide_get_locale' this[86393]))
    (86156 'move' tmp[86154](86152 'deref' call_tmp[630898]))
    {
      {
        (86129 call chpl_rmem_consist_release)
        (476922 'end of statement')
        unknown call_tmp[630905] "expr temp" "maybe param" "maybe type" "temp"
        (630908 'move' call_tmp[630905](377114 call syncAux _mt[243] this[86393]))
        (86135 call chpl_sync_waitEmptyAndLock call_tmp[630905])
        (476923 'end of statement')
        unknown call_tmp[630912] "expr temp" "maybe param" "maybe type" "temp"
        (630915 'move' call_tmp[630912](377119 call value _mt[243] this[86393]))
        (86139 call = call_tmp[630912] val[86115])
        (476924 'end of statement')
        unknown call_tmp[630919] "expr temp" "maybe param" "maybe type" "temp"
        (630922 'move' call_tmp[630919](377125 call syncAux _mt[243] this[86393]))
        (86145 call chpl_sync_markAndSignalFull call_tmp[630919])
        (476925 'end of statement')
        (86149 call chpl_rmem_consist_acquire)
      }
      (86159 'on block' 0 tmp[86154])
    }
    (512883 return _void[55])
  }
  {
    (86124 call <(86121 'lifetime_of' this[86393])(86123 'lifetime_of' val[86115]))
  }
  function _synccls[86371](?).writeFF[86172](arg _mt[86399]:_MT[238], arg this[86397]:_synccls[86371](?), arg val[86169] :
  (377130 call valType _mt[243] this[86397])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86208] "const" "temp"
    unknown call_tmp[630926] "expr temp" "maybe param" "maybe type" "temp"
    (630929 'move' call_tmp[630926](86205 '_wide_get_locale' this[86397]))
    (86210 'move' tmp[86208](86206 'deref' call_tmp[630926]))
    {
      {
        (86183 call chpl_rmem_consist_release)
        (476927 'end of statement')
        unknown call_tmp[630933] "expr temp" "maybe param" "maybe type" "temp"
        (630936 'move' call_tmp[630933](377138 call syncAux _mt[243] this[86397]))
        (86189 call chpl_sync_waitFullAndLock call_tmp[630933])
        (476928 'end of statement')
        unknown call_tmp[630940] "expr temp" "maybe param" "maybe type" "temp"
        (630943 'move' call_tmp[630940](377143 call value _mt[243] this[86397]))
        (86193 call = call_tmp[630940] val[86169])
        (476929 'end of statement')
        unknown call_tmp[630947] "expr temp" "maybe param" "maybe type" "temp"
        (630950 'move' call_tmp[630947](377149 call syncAux _mt[243] this[86397]))
        (86199 call chpl_sync_markAndSignalFull call_tmp[630947])
        (476930 'end of statement')
        (86203 call chpl_rmem_consist_acquire)
      }
      (86213 'on block' 0 tmp[86208])
    }
    (512885 return _void[55])
  }
  {
    (86178 call <(86175 'lifetime_of' this[86397])(86177 'lifetime_of' val[86169]))
  }
  function _synccls[86371](?).writeXF[86226](arg _mt[86403]:_MT[238], arg this[86401]:_synccls[86371](?), arg val[86223] :
  (377154 call valType _mt[243] this[86401])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86262] "const" "temp"
    unknown call_tmp[630954] "expr temp" "maybe param" "maybe type" "temp"
    (630957 'move' call_tmp[630954](86259 '_wide_get_locale' this[86401]))
    (86264 'move' tmp[86262](86260 'deref' call_tmp[630954]))
    {
      {
        (86237 call chpl_rmem_consist_release)
        (476932 'end of statement')
        unknown call_tmp[630961] "expr temp" "maybe param" "maybe type" "temp"
        (630964 'move' call_tmp[630961](377162 call syncAux _mt[243] this[86401]))
        (86243 call chpl_sync_lock call_tmp[630961])
        (476933 'end of statement')
        unknown call_tmp[630968] "expr temp" "maybe param" "maybe type" "temp"
        (630971 'move' call_tmp[630968](377167 call value _mt[243] this[86401]))
        (86247 call = call_tmp[630968] val[86223])
        (476934 'end of statement')
        unknown call_tmp[630975] "expr temp" "maybe param" "maybe type" "temp"
        (630978 'move' call_tmp[630975](377173 call syncAux _mt[243] this[86401]))
        (86253 call chpl_sync_markAndSignalFull call_tmp[630975])
        (476935 'end of statement')
        (86257 call chpl_rmem_consist_acquire)
      }
      (86267 'on block' 0 tmp[86262])
    }
    (512887 return _void[55])
  }
  {
    (86232 call <(86229 'lifetime_of' this[86401])(86231 'lifetime_of' val[86223]))
  }
  function _synccls[86371](?).reset[86276](arg _mt[86407]:_MT[238], arg this[86405]:_synccls[86371](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86311] "const" "temp"
    unknown call_tmp[630980] "expr temp" "maybe param" "maybe type" "temp"
    (630983 'move' call_tmp[630980](86308 '_wide_get_locale' this[86405]))
    (86313 'move' tmp[86311](86309 'deref' call_tmp[630980]))
    {
      {
        const defaultValue[86280] "dead at end of block" "const" "insert auto destroy"
        unknown call_tmp[630987] "expr temp" "maybe param" "maybe type" "temp"
        (630990 'move' call_tmp[630987](377179 call valType _mt[243] this[86405]))
        (541567 'default init var' defaultValue[86280] call_tmp[630987])
        (86283 'end of statement')
        (86287 call chpl_rmem_consist_release)
        (476937 'end of statement')
        unknown call_tmp[630994] "expr temp" "maybe param" "maybe type" "temp"
        (630997 'move' call_tmp[630994](377184 call syncAux _mt[243] this[86405]))
        (86292 call chpl_sync_lock call_tmp[630994])
        (476938 'end of statement')
        unknown call_tmp[631001] "expr temp" "maybe param" "maybe type" "temp"
        (631004 'move' call_tmp[631001](377189 call value _mt[243] this[86405]))
        (86296 call = call_tmp[631001] defaultValue[86280])
        (476939 'end of statement' defaultValue[86280])
        unknown call_tmp[631008] "expr temp" "maybe param" "maybe type" "temp"
        (631011 'move' call_tmp[631008](377195 call syncAux _mt[243] this[86405]))
        (86302 call chpl_sync_markAndSignalEmpty call_tmp[631008])
        (476941 'end of statement')
        (86306 call chpl_rmem_consist_acquire)
      }
      (86316 'on block' 0 tmp[86311])
    }
    (512889 return _void[55])
  }
  function _synccls[86371](?).isFull[86324](arg _mt[86411]:_MT[238], arg this[86409]:_synccls[86371](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512893] "RVV" "temp"
    unknown b[86327] "dead at end of block" "insert auto destroy"
    (541569 'default init var' b[86327] bool[10])
    (86330 'end of statement')
    const tmp[86357] "const" "temp"
    unknown call_tmp[631013] "expr temp" "maybe param" "maybe type" "temp"
    (631016 'move' call_tmp[631013](86354 '_wide_get_locale' this[86409]))
    (86359 'move' tmp[86357](86355 'deref' call_tmp[631013]))
    {
      {
        (86335 call chpl_rmem_consist_release)
        (476943 'end of statement')
        unknown call_tmp[631020] "expr temp" "maybe param" "maybe type" "temp"
        (631023 'move' call_tmp[631020](377202 call value _mt[243] this[86409]))
        unknown call_tmp[631025] "expr temp" "maybe param" "maybe type" "temp"
        (631028 'move' call_tmp[631025](86343 call c_ptrTo call_tmp[631020]))
        unknown call_tmp[631032] "expr temp" "maybe param" "maybe type" "temp"
        (631035 'move' call_tmp[631032](377207 call syncAux _mt[243] this[86409]))
        unknown call_tmp[631037] "expr temp" "maybe param" "maybe type" "temp"
        (631040 'move' call_tmp[631037](86346 call chpl_sync_isFull call_tmp[631025] call_tmp[631032]))
        (86347 call = b[86327] call_tmp[631037])
        (476944 'end of statement' b[86327])
        (86352 call chpl_rmem_consist_acquire)
      }
      (86362 'on block' 0 tmp[86357])
    }
    (512898 'move' ret[512893](512897 'deref' b[86327]))
    gotoReturn _end_isFull[512891] _end_isFull[512891]
    (476947 'end of statement' b[86327])
    label _end_isFull[512891]
    (512895 return ret[512893])
  }
  function _synccls[86371](?).super[777432](arg _mt[777434]:_MT[238], arg this[777436]:_synccls[86371](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777446] "RVV" "temp"
    unknown call_tmp[777453] "expr temp" "maybe param" "maybe type" "temp"
    (777456 'move' call_tmp[777453](777440 '.v' this[777436] c"super"))
    (777451 'move' ret[777446](777450 'deref' call_tmp[777453]))
    (777448 return ret[777446])
  }
  function _synccls[777463](?).valType[777458](arg _mt[777460]:_MT[238], arg this[777465]:_synccls[777463](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777514] "RVV" "temp" "type variable"
    unknown borrowOfThis[777467]
    (777506 'end of statement')
    (777469 'move' borrowOfThis[777467](777472 call _cast _borrowedNonNilable[214](?) this[777465]))
    (777507 'end of statement' borrowOfThis[777467])
    unknown call_tmp[777528] "expr temp" "maybe param" "maybe type" "temp"
    (777531 'move' call_tmp[777528](777496 'is bound' borrowOfThis[777467] c"valType"))
    if call_tmp[777528]
    {
      unknown call_tmp[777533] "expr temp" "maybe param" "maybe type" "temp"
      (777536 'move' call_tmp[777533](777477 '.v' borrowOfThis[777467] c"valType"))
      unknown call_tmp[777538] "expr temp" "maybe param" "maybe type" "temp"
      (777541 'move' call_tmp[777538](777492 call chpl_checkLegalTypeFieldAccessor this[777465] call_tmp[777533] "valType"))
      (777519 'move' ret[777514](777518 'deref' call_tmp[777538]))
      gotoReturn _end_valType[777512] _end_valType[777512]
      (777509 'end of statement' borrowOfThis[777467])
    }
    {
      (777524 'move' ret[777514](777523 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777512] _end_valType[777512]
    }
    label _end_valType[777512]
    (777516 return ret[777514])
  }
  function _synccls[777463](?).valType[777543](arg _mt[777545]:_MT[238], arg this[777547]:_synccls[777463](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777582] "RVV" "temp" "type variable"
    unknown borrowOfThis[777549] "type variable"
    (777574 'end of statement')
    (777551 'move' borrowOfThis[777549](777554 call _cast _borrowedNonNilable[214](?) this[777547]))
    (777575 'end of statement' borrowOfThis[777549])
    unknown call_tmp[777596] "expr temp" "maybe param" "maybe type" "temp"
    (777599 'move' call_tmp[777596](777564 'is bound' borrowOfThis[777549] c"valType"))
    if call_tmp[777596]
    {
      unknown call_tmp[777601] "expr temp" "maybe param" "maybe type" "temp"
      (777604 'move' call_tmp[777601](777559 '.v' borrowOfThis[777549] c"valType"))
      unknown call_tmp[777606] "expr temp" "maybe param" "maybe type" "temp"
      (777609 'move' call_tmp[777606](777560 call chpl_checkLegalTypeFieldAccessor this[777547] call_tmp[777601] "valType"))
      (777587 'move' ret[777582](777586 'deref' call_tmp[777606]))
      gotoReturn _end_valType[777580] _end_valType[777580]
      (777577 'end of statement' borrowOfThis[777549])
    }
    {
      (777592 'move' ret[777582](777591 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777580] _end_valType[777580]
    }
    label _end_valType[777580]
    (777584 return ret[777582])
  }
  function _synccls[86371](?).value[777611](arg _mt[777613]:_MT[238], arg this[777615]:_synccls[86371](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777625] "RVV" "temp"
    unknown call_tmp[777632] "expr temp" "maybe param" "maybe type" "temp"
    (777635 'move' call_tmp[777632](777619 '.' this[777615] c"value"))
    (777630 'move' ret[777625](777629 'addr of' call_tmp[777632]))
    (777627 return ret[777625])
  }
  function _synccls[86371](?).syncAux[777637](arg _mt[777639]:_MT[238], arg this[777641]:_synccls[86371](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777651] "RVV" "temp"
    unknown call_tmp[777658] "expr temp" "maybe param" "maybe type" "temp"
    (777661 'move' call_tmp[777658](777645 '.' this[777641] c"syncAux"))
    (777656 'move' ret[777651](777655 'addr of' call_tmp[777658]))
    (777653 return ret[777651])
  }
  function _synccls[86371](?).writeThis[777663](arg _mt[777667]:_MT[238], arg this[777665]:_synccls[86371](?), arg f[777666]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777672 call writeThisDefaultImpl f[777666] this[777665])
    (777677 return _void[55])
  }
  function _synccls[86371](?).readThis[777679](arg _mt[777683]:_MT[238], arg this[777681]:_synccls[86371](?), arg f[777682]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777687 call readThisDefaultImpl f[777682] this[777681])
    (777693 return _void[55])
  }
  type _synccls[86371](?) val super[355632]:object[22] "super class" unknown valType[85875] "type variable" unknown value[85879] valType[85875] val syncAux[85884]:chpl_sync_aux_t[87952] chpl_sync_aux_t[87952]
  type _synccls[777463](?)
  type unmanaged _synccls[415411](?)
  type _synccls[376888](?)
  function _qthreads_synccls[86862](?).init[86427](arg _mt[86866]:_MT[238], arg this[86864]:_qthreads_synccls[86862](?), arg valType[86425]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460043] "temporary of super field" "temp"
    (460051 'move' super_tmp[460043](460044 '.v' this[86864] c"super"))
    (460047 call init _mt[243] super_tmp[460043])
    (476949 'end of statement')
    unknown tmp[460008] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491939] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631042] "expr temp" "maybe param" "maybe type" "temp"
      (631045 'move' call_tmp[631042](460010 '.v' this[86864] c"super"))
      (491943 'move' call_type_tmp[491939](460013 'typeof' call_tmp[631042]))
    }
    (460014 'move' tmp[460008] call_type_tmp[491939])
    unknown call_tmp[631047] "maybe param" "maybe type" "temp"
    (631050 'move' call_tmp[631047](460019 'cast' tmp[460008] this[86864]))
    unknown chpl__thisAsParent[460016] "dead at end of block" "insert auto destroy" "temp"
    (541571 'init var' chpl__thisAsParent[460016] call_tmp[631047] tmp[460008])
    (460022 'setcid' chpl__thisAsParent[460016])
    (476950 'end of statement')
    unknown tmp[460024] "temp" "type variable"
    (460026 'move' tmp[460024] valType[86425])
    (460028 'init field' this[86864] c"valType" tmp[460024])
    (476951 'end of statement')
    val tmp[460032]:aligned_t[88359] "temp"
    (460035 'default init var' tmp[460032] aligned_t[88359])
    (460037 '.=' this[86864] c"alignedValue" tmp[460032])
    (476952 'end of statement')
    (460042 'setcid' this[86864])
    (476953 'end of statement')
    unknown call_tmp[631054] "expr temp" "maybe param" "maybe type" "temp"
    (631057 'move' call_tmp[631054](377217 call alignedValue _mt[243] this[86864]))
    unknown call_tmp[631059] "expr temp" "maybe param" "maybe type" "temp"
    (631062 'move' call_tmp[631059](86451 call defaultOfAlignedT valType[86425]))
    (86452 call qthread_purge_to call_tmp[631054] call_tmp[631059])
    (512902 return _void[55])
  }
  function _qthreads_synccls[86862](?).deinit[86458](arg _mt[86870]:_MT[238], arg this[86868]:_qthreads_synccls[86862](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631066] "expr temp" "maybe param" "maybe type" "temp"
    (631069 'move' call_tmp[631066](377223 call alignedValue _mt[243] this[86868]))
    (86463 call qthread_fill call_tmp[631066])
    (512904 return _void[55])
  }
  function _qthreads_synccls[86862](?).readFE[86470](arg _mt[86874]:_MT[238], arg this[86872]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512908] "RVV" "temp"
    unknown ret[86473] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631073] "expr temp" "maybe param" "maybe type" "temp"
    (631076 'move' call_tmp[631073](377228 call valType _mt[243] this[86872]))
    (541573 'default init var' ret[86473] call_tmp[631073])
    (86476 'end of statement')
    const tmp[86510] "const" "temp"
    unknown call_tmp[631078] "expr temp" "maybe param" "maybe type" "temp"
    (631081 'move' call_tmp[631078](86507 '_wide_get_locale' this[86872]))
    (86512 'move' tmp[86510](86508 'deref' call_tmp[631078]))
    {
      {
        unknown alignedLocalRet[86480] "dead at end of block" "insert auto destroy"
        (541575 'default init var' alignedLocalRet[86480] aligned_t[88359])
        (86483 'end of statement')
        (86487 call chpl_rmem_consist_release)
        (476956 'end of statement')
        unknown call_tmp[631085] "expr temp" "maybe param" "maybe type" "temp"
        (631088 'move' call_tmp[631085](377236 call alignedValue _mt[243] this[86872]))
        (86493 call qthread_readFE alignedLocalRet[86480] call_tmp[631085])
        (476957 'end of statement' alignedLocalRet[86480])
        (86497 call chpl_rmem_consist_acquire)
        (476959 'end of statement')
        unknown call_tmp[631092] "expr temp" "maybe param" "maybe type" "temp"
        (631095 'move' call_tmp[631092](377243 call valType _mt[243] this[86872]))
        unknown call_tmp[631097] "expr temp" "maybe param" "maybe type" "temp"
        (631100 'move' call_tmp[631097](86502 call _cast call_tmp[631092] alignedLocalRet[86480]))
        (86504 call = ret[86473] call_tmp[631097])
        (476960 'end of statement' ret[86473] alignedLocalRet[86480])
      }
      (86515 'on block' 0 tmp[86510])
    }
    (512913 'move' ret[512908](512912 'deref' ret[86473]))
    gotoReturn _end_readFE[512906] _end_readFE[512906]
    (476963 'end of statement' ret[86473])
    label _end_readFE[512906]
    (512910 return ret[512908])
  }
  function _qthreads_synccls[86862](?).readFF[86525](arg _mt[86878]:_MT[238], arg this[86876]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512919] "RVV" "temp"
    unknown ret[86528] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631104] "expr temp" "maybe param" "maybe type" "temp"
    (631107 'move' call_tmp[631104](377249 call valType _mt[243] this[86876]))
    (541577 'default init var' ret[86528] call_tmp[631104])
    (86531 'end of statement')
    const tmp[86565] "const" "temp"
    unknown call_tmp[631109] "expr temp" "maybe param" "maybe type" "temp"
    (631112 'move' call_tmp[631109](86562 '_wide_get_locale' this[86876]))
    (86567 'move' tmp[86565](86563 'deref' call_tmp[631109]))
    {
      {
        unknown alignedLocalRet[86535] "dead at end of block" "insert auto destroy"
        (541579 'default init var' alignedLocalRet[86535] aligned_t[88359])
        (86538 'end of statement')
        (86542 call chpl_rmem_consist_release)
        (476965 'end of statement')
        unknown call_tmp[631116] "expr temp" "maybe param" "maybe type" "temp"
        (631119 'move' call_tmp[631116](377257 call alignedValue _mt[243] this[86876]))
        (86548 call qthread_readFF alignedLocalRet[86535] call_tmp[631116])
        (476966 'end of statement' alignedLocalRet[86535])
        (86552 call chpl_rmem_consist_acquire)
        (476968 'end of statement')
        unknown call_tmp[631123] "expr temp" "maybe param" "maybe type" "temp"
        (631126 'move' call_tmp[631123](377264 call valType _mt[243] this[86876]))
        unknown call_tmp[631128] "expr temp" "maybe param" "maybe type" "temp"
        (631131 'move' call_tmp[631128](86557 call _cast call_tmp[631123] alignedLocalRet[86535]))
        (86559 call = ret[86528] call_tmp[631128])
        (476969 'end of statement' ret[86528] alignedLocalRet[86535])
      }
      (86570 'on block' 0 tmp[86565])
    }
    (512924 'move' ret[512919](512923 'deref' ret[86528]))
    gotoReturn _end_readFF[512917] _end_readFF[512917]
    (476972 'end of statement' ret[86528])
    label _end_readFF[512917]
    (512921 return ret[512919])
  }
  function _qthreads_synccls[86862](?).readXX[86580](arg _mt[86882]:_MT[238], arg this[86880]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512930] "RVV" "temp"
    unknown ret[86583] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631135] "expr temp" "maybe param" "maybe type" "temp"
    (631138 'move' call_tmp[631135](377270 call valType _mt[243] this[86880]))
    (541581 'default init var' ret[86583] call_tmp[631135])
    (86586 'end of statement')
    const tmp[86620] "const" "temp"
    unknown call_tmp[631140] "expr temp" "maybe param" "maybe type" "temp"
    (631143 'move' call_tmp[631140](86617 '_wide_get_locale' this[86880]))
    (86622 'move' tmp[86620](86618 'deref' call_tmp[631140]))
    {
      {
        unknown alignedLocalRet[86590] "dead at end of block" "insert auto destroy"
        (541583 'default init var' alignedLocalRet[86590] aligned_t[88359])
        (86593 'end of statement')
        (86597 call chpl_rmem_consist_release)
        (476974 'end of statement')
        unknown call_tmp[631147] "expr temp" "maybe param" "maybe type" "temp"
        (631150 'move' call_tmp[631147](377278 call alignedValue _mt[243] this[86880]))
        (86603 call qthread_readXX alignedLocalRet[86590] call_tmp[631147])
        (476975 'end of statement' alignedLocalRet[86590])
        (86607 call chpl_rmem_consist_acquire)
        (476977 'end of statement')
        unknown call_tmp[631154] "expr temp" "maybe param" "maybe type" "temp"
        (631157 'move' call_tmp[631154](377285 call valType _mt[243] this[86880]))
        unknown call_tmp[631159] "expr temp" "maybe param" "maybe type" "temp"
        (631162 'move' call_tmp[631159](86612 call _cast call_tmp[631154] alignedLocalRet[86590]))
        (86614 call = ret[86583] call_tmp[631159])
        (476978 'end of statement' ret[86583] alignedLocalRet[86590])
      }
      (86625 'on block' 0 tmp[86620])
    }
    (512935 'move' ret[512930](512934 'deref' ret[86583]))
    gotoReturn _end_readXX[512928] _end_readXX[512928]
    (476981 'end of statement' ret[86583])
    label _end_readXX[512928]
    (512932 return ret[512930])
  }
  function _qthreads_synccls[86862](?).writeEF[86639](arg _mt[86886]:_MT[238], arg this[86884]:_qthreads_synccls[86862](?), arg val[86636] :
  (377291 call valType _mt[243] this[86884])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86669] "const" "temp"
    unknown call_tmp[631166] "expr temp" "maybe param" "maybe type" "temp"
    (631169 'move' call_tmp[631166](86666 '_wide_get_locale' this[86884]))
    (86671 'move' tmp[86669](86667 'deref' call_tmp[631166]))
    {
      {
        (86650 call chpl_rmem_consist_release)
        (476983 'end of statement')
        unknown call_tmp[631173] "expr temp" "maybe param" "maybe type" "temp"
        (631176 'move' call_tmp[631173](377299 call alignedValue _mt[243] this[86884]))
        unknown call_tmp[631178] "expr temp" "maybe param" "maybe type" "temp"
        (631181 'move' call_tmp[631178](86658 call _cast aligned_t[88359] val[86636]))
        (86660 call qthread_writeEF call_tmp[631173] call_tmp[631178])
        (476984 'end of statement')
        (86664 call chpl_rmem_consist_acquire)
      }
      (86674 'on block' 0 tmp[86669])
    }
    (512939 return _void[55])
  }
  {
    (86645 call <(86642 'lifetime_of' this[86884])(86644 'lifetime_of' val[86636]))
  }
  function _qthreads_synccls[86862](?).writeFF[86687](arg _mt[86890]:_MT[238], arg this[86888]:_qthreads_synccls[86862](?), arg val[86684] :
  (377306 call valType _mt[243] this[86888])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86717] "const" "temp"
    unknown call_tmp[631185] "expr temp" "maybe param" "maybe type" "temp"
    (631188 'move' call_tmp[631185](86714 '_wide_get_locale' this[86888]))
    (86719 'move' tmp[86717](86715 'deref' call_tmp[631185]))
    {
      {
        (86698 call chpl_rmem_consist_release)
        (476986 'end of statement')
        unknown call_tmp[631192] "expr temp" "maybe param" "maybe type" "temp"
        (631195 'move' call_tmp[631192](377314 call alignedValue _mt[243] this[86888]))
        unknown call_tmp[631197] "expr temp" "maybe param" "maybe type" "temp"
        (631200 'move' call_tmp[631197](86706 call _cast aligned_t[88359] val[86684]))
        (86708 call qthread_writeFF call_tmp[631192] call_tmp[631197])
        (476987 'end of statement')
        (86712 call chpl_rmem_consist_acquire)
      }
      (86722 'on block' 0 tmp[86717])
    }
    (512941 return _void[55])
  }
  {
    (86693 call <(86690 'lifetime_of' this[86888])(86692 'lifetime_of' val[86684]))
  }
  function _qthreads_synccls[86862](?).writeXF[86735](arg _mt[86894]:_MT[238], arg this[86892]:_qthreads_synccls[86862](?), arg val[86732] :
  (377321 call valType _mt[243] this[86892])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86765] "const" "temp"
    unknown call_tmp[631204] "expr temp" "maybe param" "maybe type" "temp"
    (631207 'move' call_tmp[631204](86762 '_wide_get_locale' this[86892]))
    (86767 'move' tmp[86765](86763 'deref' call_tmp[631204]))
    {
      {
        (86746 call chpl_rmem_consist_release)
        (476989 'end of statement')
        unknown call_tmp[631211] "expr temp" "maybe param" "maybe type" "temp"
        (631214 'move' call_tmp[631211](377329 call alignedValue _mt[243] this[86892]))
        unknown call_tmp[631216] "expr temp" "maybe param" "maybe type" "temp"
        (631219 'move' call_tmp[631216](86754 call _cast aligned_t[88359] val[86732]))
        (86756 call qthread_writeF call_tmp[631211] call_tmp[631216])
        (476990 'end of statement')
        (86760 call chpl_rmem_consist_acquire)
      }
      (86770 'on block' 0 tmp[86765])
    }
    (512943 return _void[55])
  }
  {
    (86741 call <(86738 'lifetime_of' this[86892])(86740 'lifetime_of' val[86732]))
  }
  function _qthreads_synccls[86862](?).reset[86779](arg _mt[86898]:_MT[238], arg this[86896]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86803] "const" "temp"
    unknown call_tmp[631221] "expr temp" "maybe param" "maybe type" "temp"
    (631224 'move' call_tmp[631221](86800 '_wide_get_locale' this[86896]))
    (86805 'move' tmp[86803](86801 'deref' call_tmp[631221]))
    {
      {
        (86784 call chpl_rmem_consist_release)
        (476992 'end of statement')
        unknown call_tmp[631228] "expr temp" "maybe param" "maybe type" "temp"
        (631231 'move' call_tmp[631228](377337 call alignedValue _mt[243] this[86896]))
        unknown call_tmp[631235] "expr temp" "maybe param" "maybe type" "temp"
        (631238 'move' call_tmp[631235](377342 call valType _mt[243] this[86896]))
        unknown call_tmp[631240] "expr temp" "maybe param" "maybe type" "temp"
        (631243 'move' call_tmp[631240](86793 call defaultOfAlignedT call_tmp[631235]))
        (86794 call qthread_purge_to call_tmp[631228] call_tmp[631240])
        (476993 'end of statement')
        (86798 call chpl_rmem_consist_acquire)
      }
      (86808 'on block' 0 tmp[86803])
    }
    (512945 return _void[55])
  }
  function _qthreads_synccls[86862](?).isFull[86816](arg _mt[86902]:_MT[238], arg this[86900]:_qthreads_synccls[86862](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512949] "RVV" "temp"
    unknown b[86819] "dead at end of block" "insert auto destroy"
    (541585 'default init var' b[86819] bool[10])
    (86822 'end of statement')
    const tmp[86848] "const" "temp"
    unknown call_tmp[631245] "expr temp" "maybe param" "maybe type" "temp"
    (631248 'move' call_tmp[631245](86845 '_wide_get_locale' this[86900]))
    (86850 'move' tmp[86848](86846 'deref' call_tmp[631245]))
    {
      {
        (86827 call chpl_rmem_consist_release)
        (476995 'end of statement')
        unknown call_tmp[631252] "expr temp" "maybe param" "maybe type" "temp"
        (631255 'move' call_tmp[631252](377349 call alignedValue _mt[243] this[86900]))
        unknown call_tmp[631257] "expr temp" "maybe param" "maybe type" "temp"
        (631260 'move' call_tmp[631257](86834 call qthread_feb_status call_tmp[631252]))
        unknown call_tmp[631262] "expr temp" "maybe param" "maybe type" "temp"
        (631265 'move' call_tmp[631262](86836 call _cast bool[10] call_tmp[631257]))
        (86838 call = b[86819] call_tmp[631262])
        (476996 'end of statement' b[86819])
        (86843 call chpl_rmem_consist_acquire)
      }
      (86853 'on block' 0 tmp[86848])
    }
    (512954 'move' ret[512949](512953 'deref' b[86819]))
    gotoReturn _end_isFull[512947] _end_isFull[512947]
    (476999 'end of statement' b[86819])
    label _end_isFull[512947]
    (512951 return ret[512949])
  }
  function _qthreads_synccls[86862](?).super[777695](arg _mt[777697]:_MT[238], arg this[777699]:_qthreads_synccls[86862](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777709] "RVV" "temp"
    unknown call_tmp[777716] "expr temp" "maybe param" "maybe type" "temp"
    (777719 'move' call_tmp[777716](777703 '.v' this[777699] c"super"))
    (777714 'move' ret[777709](777713 'deref' call_tmp[777716]))
    (777711 return ret[777709])
  }
  function _qthreads_synccls[777726](?).valType[777721](arg _mt[777723]:_MT[238], arg this[777728]:_qthreads_synccls[777726](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777763] "RVV" "temp" "type variable"
    unknown borrowOfThis[777730]
    (777755 'end of statement')
    (777732 'move' borrowOfThis[777730](777735 call _cast _borrowedNonNilable[214](?) this[777728]))
    (777756 'end of statement' borrowOfThis[777730])
    unknown call_tmp[777777] "expr temp" "maybe param" "maybe type" "temp"
    (777780 'move' call_tmp[777777](777745 'is bound' borrowOfThis[777730] c"valType"))
    if call_tmp[777777]
    {
      unknown call_tmp[777782] "expr temp" "maybe param" "maybe type" "temp"
      (777785 'move' call_tmp[777782](777740 '.v' borrowOfThis[777730] c"valType"))
      unknown call_tmp[777787] "expr temp" "maybe param" "maybe type" "temp"
      (777790 'move' call_tmp[777787](777741 call chpl_checkLegalTypeFieldAccessor this[777728] call_tmp[777782] "valType"))
      (777768 'move' ret[777763](777767 'deref' call_tmp[777787]))
      gotoReturn _end_valType[777761] _end_valType[777761]
      (777758 'end of statement' borrowOfThis[777730])
    }
    {
      (777773 'move' ret[777763](777772 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777761] _end_valType[777761]
    }
    label _end_valType[777761]
    (777765 return ret[777763])
  }
  function _qthreads_synccls[777726](?).valType[777792](arg _mt[777794]:_MT[238], arg this[777796]:_qthreads_synccls[777726](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777831] "RVV" "temp" "type variable"
    unknown borrowOfThis[777798] "type variable"
    (777823 'end of statement')
    (777800 'move' borrowOfThis[777798](777803 call _cast _borrowedNonNilable[214](?) this[777796]))
    (777824 'end of statement' borrowOfThis[777798])
    unknown call_tmp[777845] "expr temp" "maybe param" "maybe type" "temp"
    (777848 'move' call_tmp[777845](777813 'is bound' borrowOfThis[777798] c"valType"))
    if call_tmp[777845]
    {
      unknown call_tmp[777850] "expr temp" "maybe param" "maybe type" "temp"
      (777853 'move' call_tmp[777850](777808 '.v' borrowOfThis[777798] c"valType"))
      unknown call_tmp[777855] "expr temp" "maybe param" "maybe type" "temp"
      (777858 'move' call_tmp[777855](777809 call chpl_checkLegalTypeFieldAccessor this[777796] call_tmp[777850] "valType"))
      (777836 'move' ret[777831](777835 'deref' call_tmp[777855]))
      gotoReturn _end_valType[777829] _end_valType[777829]
      (777826 'end of statement' borrowOfThis[777798])
    }
    {
      (777841 'move' ret[777831](777840 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777829] _end_valType[777829]
    }
    label _end_valType[777829]
    (777833 return ret[777831])
  }
  function _qthreads_synccls[86862](?).alignedValue[777860](arg _mt[777862]:_MT[238], arg this[777864]:_qthreads_synccls[86862](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777874] "RVV" "temp"
    unknown call_tmp[777881] "expr temp" "maybe param" "maybe type" "temp"
    (777884 'move' call_tmp[777881](777868 '.' this[777864] c"alignedValue"))
    (777879 'move' ret[777874](777878 'addr of' call_tmp[777881]))
    (777876 return ret[777874])
  }
  function _qthreads_synccls[86862](?).writeThis[777886](arg _mt[777890]:_MT[238], arg this[777888]:_qthreads_synccls[86862](?), arg f[777889]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777895 call writeThisDefaultImpl f[777889] this[777888])
    (777900 return _void[55])
  }
  function _qthreads_synccls[86862](?).readThis[777902](arg _mt[777906]:_MT[238], arg this[777904]:_qthreads_synccls[86862](?), arg f[777905]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777910 call readThisDefaultImpl f[777905] this[777904])
    (777916 return _void[55])
  }
  type _qthreads_synccls[86862](?) val super[355634]:object[22] "super class" unknown valType[86415] "type variable" val alignedValue[86419]:aligned_t[88359] aligned_t[88359]
  type _qthreads_synccls[777726](?)
  type unmanaged _qthreads_synccls[415408](?)
  type _qthreads_synccls[376883](?)
  function isSyncValue[86911](arg x[86908]:_syncvar[84944](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512960] "RVV" "param" "temp"
    (512965 'move' ret[512960](512964 'deref' 1))
    (512962 return ret[512960])
  }
  function isSyncValue[86923](arg x[86921]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512969] "RVV" "param" "temp"
    (512974 'move' ret[512969](512973 'deref' 0))
    (512971 return ret[512969])
  }
  function _singlevar[87253](?).init[86954](arg _mt[87257]:_MT[238], ref arg this[87255]:_singlevar[87253](?), arg valType[86952]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (86959 call ensureFEType valType[86952])
    (477003 'end of statement')
    unknown tmp[460054] "temp" "type variable"
    (460056 'move' tmp[460054] valType[86952])
    (460058 'init field' this[87255] c"valType" tmp[460054])
    (477004 'end of statement')
    unknown call_tmp[631267] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631270 'move' call_tmp[631267](747808 'new' _singlecls[377355](?) valType[86952](_chpl_manager = unmanaged[220](?))))
    unknown call_tmp[631272] "expr temp" "maybe param" "maybe type" "temp"
    (631275 'move' call_tmp[631272](460073 '.v' this[87255] c"valType"))
    unknown call_tmp[631277] "maybe param" "maybe type" "temp"
    (631280 'move' call_tmp[631277](460065 call unmanaged _singlecls[415414](?) call_tmp[631272]))
    unknown tmp[460062] "temp"
    (460067 'init var' tmp[460062] call_tmp[631267] call_tmp[631277])
    (460069 'init field' this[87255] c"wrapped" tmp[460062])
    (477005 'end of statement')
    unknown tmp[460078] "temp"
    (460081 'init var' tmp[460078] 1 bool[10])
    (460083 'init field' this[87255] c"isOwned" tmp[460078])
    (477006 'end of statement')
    (512976 return _void[55])
  }
  function _singlevar[87253](?).init[86989](arg _mt[87261]:_MT[238], ref arg this[87259]:_singlevar[87253](?), const arg other[86986]:_singlevar[87253](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[460087] "temp" "type variable"
    (460089 'move' tmp[460087](86996 call valType _mt[243] other[86986]))
    (460091 'init field' this[87259] c"valType" tmp[460087])
    (477007 'end of statement')
    unknown call_tmp[631286] "maybe param" "maybe type" "temp"
    (631289 'move' call_tmp[631286](87005 call wrapped _mt[243] other[86986]))
    unknown call_tmp[631291] "expr temp" "maybe param" "maybe type" "temp"
    (631294 'move' call_tmp[631291](460106 '.v' this[87259] c"valType"))
    unknown call_tmp[631296] "maybe param" "maybe type" "temp"
    (631299 'move' call_tmp[631296](460098 call unmanaged _singlecls[415414](?) call_tmp[631291]))
    unknown tmp[460095] "temp"
    (460100 'init var' tmp[460095] call_tmp[631286] call_tmp[631296])
    (460102 'init field' this[87259] c"wrapped" tmp[460095])
    (477008 'end of statement')
    unknown tmp[460109] "temp"
    (460112 'init var' tmp[460109] 0 bool[10])
    (460114 'init field' this[87259] c"isOwned" tmp[460109])
    (477009 'end of statement')
    (512978 return _void[55])
  }
  function _singlevar[87253](?).init=[87024](arg _mt[87265]:_MT[238], ref arg this[87263]:_singlevar[87253](?), const arg other[87021]:_singlevar[87253](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631301] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631304 'move' call_tmp[631301](87033 'typeof' this[87263]))
    unknown call_tmp[631308] "expr temp" "maybe param" "maybe type" "temp"
    (631311 'move' call_tmp[631308](87034 call valType _mt[243] call_tmp[631301]))
    unknown call_tmp[631315] "expr temp" "maybe param" "maybe type" "temp"
    (631318 'move' call_tmp[631315](87028 call valType _mt[243] other[87021]))
    unknown call_tmp[631320] "expr temp" "maybe param" "maybe type" "temp"
    (631323 'move' call_tmp[631320](354224 'is_coercible' call_tmp[631308] call_tmp[631315]))
    unknown call_tmp[631325] "expr temp" "maybe param" "maybe type" "temp"
    (631328 'move' call_tmp[631325](87039 call == call_tmp[631320] 0))
    unknown call_tmp[631330] "expr temp" "maybe param" "maybe type" "temp"
    (631333 'move' call_tmp[631330](87105 call _cond_test call_tmp[631325]))
    if call_tmp[631330]
    {
      unknown call_tmp[631335] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631338 'move' call_tmp[631335](87043 'typeof' this[87263]))
      unknown call_tmp[631340] "expr temp" "maybe param" "maybe type" "temp"
      (631343 'move' call_tmp[631340](87045 call _cast string[26] call_tmp[631335]))
      unknown call_tmp[631345] "expr temp" "maybe param" "maybe type" "temp"
      (631348 'move' call_tmp[631345](87047 call + "'" call_tmp[631340]))
      unknown call_tmp[631350] "expr temp" "maybe param" "maybe type" "temp"
      (631353 'move' call_tmp[631350](87050 call + call_tmp[631345] "' from '"))
      unknown call_tmp[631355] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631358 'move' call_tmp[631355](87053 'typeof' other[87021]))
      unknown call_tmp[631360] "expr temp" "maybe param" "maybe type" "temp"
      (631363 'move' call_tmp[631360](87055 call _cast string[26] call_tmp[631355]))
      unknown call_tmp[631365] "expr temp" "maybe param" "maybe type" "temp"
      (631368 'move' call_tmp[631365](87057 call + call_tmp[631350] call_tmp[631360]))
      unknown call_tmp[631370] "maybe param" "maybe type" "temp"
      (631373 'move' call_tmp[631370](87060 call + call_tmp[631365] "'"))
      unknown theseTypes[87062] "dead at end of block" "param"
      (541587 'init var' theseTypes[87062] call_tmp[631370])
      (87065 'end of statement')
      unknown call_tmp[631377] "expr temp" "maybe param" "maybe type" "temp"
      (631380 'move' call_tmp[631377](87069 call valType _mt[243] other[87021]))
      unknown call_tmp[631382] "expr temp" "maybe param" "maybe type" "temp"
      (631385 'move' call_tmp[631382](87073 call _cast string[26] call_tmp[631377]))
      unknown call_tmp[631387] "expr temp" "maybe param" "maybe type" "temp"
      (631390 'move' call_tmp[631387](87075 call + "because '" call_tmp[631382]))
      unknown call_tmp[631392] "expr temp" "maybe param" "maybe type" "temp"
      (631395 'move' call_tmp[631392](87078 call + call_tmp[631387] "' is not coercible to '"))
      unknown call_tmp[631397] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631400 'move' call_tmp[631397](87081 'typeof' this[87263]))
      unknown call_tmp[631404] "expr temp" "maybe param" "maybe type" "temp"
      (631407 'move' call_tmp[631404](87082 call valType _mt[243] call_tmp[631397]))
      unknown call_tmp[631409] "expr temp" "maybe param" "maybe type" "temp"
      (631412 'move' call_tmp[631409](87086 call _cast string[26] call_tmp[631404]))
      unknown call_tmp[631414] "expr temp" "maybe param" "maybe type" "temp"
      (631417 'move' call_tmp[631414](87088 call + call_tmp[631392] call_tmp[631409]))
      unknown call_tmp[631419] "maybe param" "maybe type" "temp"
      (631422 'move' call_tmp[631419](87091 call + call_tmp[631414] "'"))
      unknown because[87093] "dead at end of block" "param"
      (541589 'init var' because[87093] call_tmp[631419])
      (87096 'end of statement')
      (87103 call compilerError "cannot initialize " theseTypes[87062] " " because[87093])
    }
    unknown call_tmp[631426] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631429 'move' call_tmp[631426](87115 'typeof' this[87263]))
    unknown call_tmp[631433] "expr temp" "maybe param" "maybe type" "temp"
    (631436 'move' call_tmp[631433](87116 call valType _mt[243] call_tmp[631426]))
    (87120 call(87111 call (partial) init _mt[243] this[87263]) call_tmp[631433])
    (477011 'end of statement')
    unknown call_tmp[631442] "expr temp" "maybe param" "maybe type" "temp"
    (631445 'move' call_tmp[631442](87131 call(87127 call (partial) readFF _mt[243] other[87021])))
    (87133 call(87123 call (partial) writeEF _mt[243] this[87263]) call_tmp[631442])
    (512980 return _void[55])
  }
  function _singlevar[87253](?).init=[87147](arg _mt[87269]:_MT[238], ref arg this[87267]:_singlevar[87253](?), const arg other[87144] :
  unknown call_tmp[631447] "expr temp" "maybe param" "maybe type" "temp" "type variable") : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631456] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631459 'move' call_tmp[631456](87154 'typeof' other[87144]))
    (87156 call(87150 call (partial) init _mt[243] this[87267]) call_tmp[631456])
    (477013 'end of statement')
    (87165 call(87160 call (partial) writeEF _mt[243] this[87267]) other[87144])
    (512982 return _void[55])
  }
  function _singlevar[87253](?).deinit[87171](arg _mt[87273]:_MT[238], arg this[87271]:_singlevar[87253](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631465] "expr temp" "maybe param" "maybe type" "temp"
    (631468 'move' call_tmp[631465](377392 call isOwned _mt[243] this[87271]))
    unknown call_tmp[631470] "expr temp" "maybe param" "maybe type" "temp"
    (631473 'move' call_tmp[631470](87175 call == call_tmp[631465] 1))
    unknown call_tmp[631475] "expr temp" "maybe param" "maybe type" "temp"
    (631478 'move' call_tmp[631475](87182 call _cond_test call_tmp[631470]))
    if call_tmp[631475]
    {
      unknown call_tmp[631482] "expr temp" "maybe param" "maybe type" "temp"
      (631485 'move' call_tmp[631482](377397 call wrapped _mt[243] this[87271]))
      (87179 call chpl__delete call_tmp[631482])
    }
    (512984 return _void[55])
  }
  function _singlevar[87253](?).readThis[87194](arg _mt[87277]:_MT[238], arg this[87275]:_singlevar[87253](?), arg x[87192]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87215 call compilerError "single variables cannot currently be read - use writeEF instead")
    (512986 return _void[55])
  }
  function _singlevar[87253](?).writeThis[87224](arg _mt[87281]:_MT[238], arg this[87279]:_singlevar[87253](?), arg x[87222]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87247 call compilerError "single variables cannot currently be written - apply readFF() to those variables first")
    (512988 return _void[55])
  }
  function _singlevar[87253](?).valType[777918](arg _mt[777920]:_MT[238], arg this[777922]:_singlevar[87253](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[777941] "RVV" "temp" "type variable"
    unknown call_tmp[777955] "expr temp" "maybe param" "maybe type" "temp"
    (777958 'move' call_tmp[777955](777927 'is bound' this[777922] c"valType"))
    if call_tmp[777955]
    {
      unknown call_tmp[777960] "expr temp" "maybe param" "maybe type" "temp"
      (777963 'move' call_tmp[777960](777926 '.v' this[777922] c"valType"))
      (777946 'move' ret[777941](777945 'deref' call_tmp[777960]))
      gotoReturn _end_valType[777939] _end_valType[777939]
    }
    {
      (777951 'move' ret[777941](777950 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777939] _end_valType[777939]
    }
    label _end_valType[777939]
    (777943 return ret[777941])
  }
  function _singlevar[87253](?).valType[777965](arg _mt[777967]:_MT[238], arg this[777969]:_singlevar[87253](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777988] "RVV" "temp" "type variable"
    unknown call_tmp[778002] "expr temp" "maybe param" "maybe type" "temp"
    (778005 'move' call_tmp[778002](777974 'is bound' this[777969] c"valType"))
    if call_tmp[778002]
    {
      unknown call_tmp[778007] "expr temp" "maybe param" "maybe type" "temp"
      (778010 'move' call_tmp[778007](777973 '.v' this[777969] c"valType"))
      (777993 'move' ret[777988](777992 'deref' call_tmp[778007]))
      gotoReturn _end_valType[777986] _end_valType[777986]
    }
    {
      (777998 'move' ret[777988](777997 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777986] _end_valType[777986]
    }
    label _end_valType[777986]
    (777990 return ret[777988])
  }
  function _singlevar[87253](?).wrapped[778012](arg _mt[778014]:_MT[238], ref arg this[778016]:_singlevar[87253](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778026] "RVV" "temp"
    unknown call_tmp[778033] "expr temp" "maybe param" "maybe type" "temp"
    (778036 'move' call_tmp[778033](778020 '.' this[778016] c"wrapped"))
    (778031 'move' ret[778026](778030 'addr of' call_tmp[778033]))
    (778028 return ret[778026])
  }
  function _singlevar[87253](?).isOwned[778038](arg _mt[778040]:_MT[238], ref arg this[778042]:_singlevar[87253](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778052] "RVV" "temp"
    unknown call_tmp[778059] "expr temp" "maybe param" "maybe type" "temp"
    (778062 'move' call_tmp[778059](778046 '.' this[778042] c"isOwned"))
    (778057 'move' ret[778052](778056 'addr of' call_tmp[778059]))
    (778054 return ret[778052])
  }
  function chpl_fields_are_comparable[778076](arg _arg1[778078]:_singlevar[87253](?), arg _arg2[778079]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778108]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778115] "expr temp" "maybe param" "maybe type" "temp"
    (778118 'move' call_tmp[778115](778082 call wrapped _mt[243] _arg1[778078]))
    unknown call_tmp[778120] "expr temp" "maybe param" "maybe type" "temp"
    (778123 'move' call_tmp[778120](778086 call wrapped _mt[243] _arg2[778079]))
    unknown call_tmp[778125] "expr temp" "maybe param" "maybe type" "temp"
    (778128 'move' call_tmp[778125](778090 'call resolves' c"==" call_tmp[778115] call_tmp[778120]))
    unknown call_tmp[778130] "expr temp" "maybe param" "maybe type" "temp"
    (778133 'move' call_tmp[778130](778092 call isOwned _mt[243] _arg1[778078]))
    unknown call_tmp[778135] "expr temp" "maybe param" "maybe type" "temp"
    (778138 'move' call_tmp[778135](778096 call isOwned _mt[243] _arg2[778079]))
    unknown call_tmp[778140] "expr temp" "maybe param" "maybe type" "temp"
    (778143 'move' call_tmp[778140](778100 'call resolves' c"==" call_tmp[778130] call_tmp[778135]))
    unknown call_tmp[778145] "expr temp" "maybe param" "maybe type" "temp"
    (778148 'move' call_tmp[778145](778102 '&' call_tmp[778125] call_tmp[778140]))
    (778113 'move' ret[778108](778112 'deref' call_tmp[778145]))
    (778110 return ret[778108])
  }
  function ==[778064](arg _arg1[778066]:_singlevar[87253](?), arg _arg2[778067]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778192]:bool[10] "RVV" "temp"
    unknown call_tmp[778209] "expr temp" "maybe param" "maybe type" "temp"
    (778212 'move' call_tmp[778209](778156 call wrapped _mt[243] _arg1[778066]))
    unknown call_tmp[778214] "expr temp" "maybe param" "maybe type" "temp"
    (778217 'move' call_tmp[778214](778160 call wrapped _mt[243] _arg2[778067]))
    unknown call_tmp[778219] "expr temp" "maybe param" "maybe type" "temp"
    (778222 'move' call_tmp[778219](778164 call != call_tmp[778209] call_tmp[778214]))
    if call_tmp[778219]
    {
      (778197 'move' ret[778192](778196 'deref' 0))
      gotoReturn _end_==[778190] _end_==[778190]
    }
    unknown call_tmp[778224] "expr temp" "maybe param" "maybe type" "temp"
    (778227 'move' call_tmp[778224](778170 call isOwned _mt[243] _arg1[778066]))
    unknown call_tmp[778229] "expr temp" "maybe param" "maybe type" "temp"
    (778232 'move' call_tmp[778229](778174 call isOwned _mt[243] _arg2[778067]))
    unknown call_tmp[778234] "expr temp" "maybe param" "maybe type" "temp"
    (778237 'move' call_tmp[778234](778178 call != call_tmp[778224] call_tmp[778229]))
    if call_tmp[778234]
    {
      (778202 'move' ret[778192](778201 'deref' 0))
      gotoReturn _end_==[778190] _end_==[778190]
    }
    (778207 'move' ret[778192](778206 'deref' 1))
    label _end_==[778190]
    (778194 return ret[778192])
  }
  where {
    unknown call_tmp[778239] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778242 'move' call_tmp[778239](778070 'typeof' _arg1[778066]))
    unknown call_tmp[778244] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778247 'move' call_tmp[778244](778072 'typeof' _arg2[778067]))
    unknown call_tmp[778249] "expr temp" "maybe param" "maybe type" "temp"
    (778252 'move' call_tmp[778249](778074 call == call_tmp[778239] call_tmp[778244]))
    unknown call_tmp[778254] "expr temp" "maybe param" "maybe type" "temp"
    (778257 'move' call_tmp[778254](778150 call chpl_fields_are_comparable[778076] _arg1[778066] _arg2[778067]))
    (778154 '&' call_tmp[778249] call_tmp[778254])
  }
  function chpl_fields_are_comparable[778271](arg _arg1[778273]:_singlevar[87253](?), arg _arg2[778274]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778303]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778310] "expr temp" "maybe param" "maybe type" "temp"
    (778313 'move' call_tmp[778310](778277 call wrapped _mt[243] _arg1[778273]))
    unknown call_tmp[778315] "expr temp" "maybe param" "maybe type" "temp"
    (778318 'move' call_tmp[778315](778281 call wrapped _mt[243] _arg2[778274]))
    unknown call_tmp[778320] "expr temp" "maybe param" "maybe type" "temp"
    (778323 'move' call_tmp[778320](778285 'call resolves' c"!=" call_tmp[778310] call_tmp[778315]))
    unknown call_tmp[778325] "expr temp" "maybe param" "maybe type" "temp"
    (778328 'move' call_tmp[778325](778287 call isOwned _mt[243] _arg1[778273]))
    unknown call_tmp[778330] "expr temp" "maybe param" "maybe type" "temp"
    (778333 'move' call_tmp[778330](778291 call isOwned _mt[243] _arg2[778274]))
    unknown call_tmp[778335] "expr temp" "maybe param" "maybe type" "temp"
    (778338 'move' call_tmp[778335](778295 'call resolves' c"!=" call_tmp[778325] call_tmp[778330]))
    unknown call_tmp[778340] "expr temp" "maybe param" "maybe type" "temp"
    (778343 'move' call_tmp[778340](778297 '&' call_tmp[778320] call_tmp[778335]))
    (778308 'move' ret[778303](778307 'deref' call_tmp[778340]))
    (778305 return ret[778303])
  }
  function !=[778259](arg _arg1[778261]:_singlevar[87253](?), arg _arg2[778262]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778387]:bool[10] "RVV" "temp"
    unknown call_tmp[778404] "expr temp" "maybe param" "maybe type" "temp"
    (778407 'move' call_tmp[778404](778351 call wrapped _mt[243] _arg1[778261]))
    unknown call_tmp[778409] "expr temp" "maybe param" "maybe type" "temp"
    (778412 'move' call_tmp[778409](778355 call wrapped _mt[243] _arg2[778262]))
    unknown call_tmp[778414] "expr temp" "maybe param" "maybe type" "temp"
    (778417 'move' call_tmp[778414](778359 call != call_tmp[778404] call_tmp[778409]))
    if call_tmp[778414]
    {
      (778392 'move' ret[778387](778391 'deref' 1))
      gotoReturn _end_!=[778385] _end_!=[778385]
    }
    unknown call_tmp[778419] "expr temp" "maybe param" "maybe type" "temp"
    (778422 'move' call_tmp[778419](778365 call isOwned _mt[243] _arg1[778261]))
    unknown call_tmp[778424] "expr temp" "maybe param" "maybe type" "temp"
    (778427 'move' call_tmp[778424](778369 call isOwned _mt[243] _arg2[778262]))
    unknown call_tmp[778429] "expr temp" "maybe param" "maybe type" "temp"
    (778432 'move' call_tmp[778429](778373 call != call_tmp[778419] call_tmp[778424]))
    if call_tmp[778429]
    {
      (778397 'move' ret[778387](778396 'deref' 1))
      gotoReturn _end_!=[778385] _end_!=[778385]
    }
    (778402 'move' ret[778387](778401 'deref' 0))
    label _end_!=[778385]
    (778389 return ret[778387])
  }
  where {
    unknown call_tmp[778434] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778437 'move' call_tmp[778434](778265 'typeof' _arg1[778261]))
    unknown call_tmp[778439] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778442 'move' call_tmp[778439](778267 'typeof' _arg2[778262]))
    unknown call_tmp[778444] "expr temp" "maybe param" "maybe type" "temp"
    (778447 'move' call_tmp[778444](778269 call == call_tmp[778434] call_tmp[778439]))
    unknown call_tmp[778449] "expr temp" "maybe param" "maybe type" "temp"
    (778452 'move' call_tmp[778449](778345 call chpl_fields_are_comparable[778271] _arg1[778261] _arg2[778262]))
    (778349 '&' call_tmp[778444] call_tmp[778449])
  }
  function chpl_fields_are_comparable[778466](arg _arg1[778468]:_singlevar[87253](?), arg _arg2[778469]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778498]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778505] "expr temp" "maybe param" "maybe type" "temp"
    (778508 'move' call_tmp[778505](778472 call wrapped _mt[243] _arg1[778468]))
    unknown call_tmp[778510] "expr temp" "maybe param" "maybe type" "temp"
    (778513 'move' call_tmp[778510](778476 call wrapped _mt[243] _arg2[778469]))
    unknown call_tmp[778515] "expr temp" "maybe param" "maybe type" "temp"
    (778518 'move' call_tmp[778515](778480 'call resolves' c"<" call_tmp[778505] call_tmp[778510]))
    unknown call_tmp[778520] "expr temp" "maybe param" "maybe type" "temp"
    (778523 'move' call_tmp[778520](778482 call isOwned _mt[243] _arg1[778468]))
    unknown call_tmp[778525] "expr temp" "maybe param" "maybe type" "temp"
    (778528 'move' call_tmp[778525](778486 call isOwned _mt[243] _arg2[778469]))
    unknown call_tmp[778530] "expr temp" "maybe param" "maybe type" "temp"
    (778533 'move' call_tmp[778530](778490 'call resolves' c"<" call_tmp[778520] call_tmp[778525]))
    unknown call_tmp[778535] "expr temp" "maybe param" "maybe type" "temp"
    (778538 'move' call_tmp[778535](778492 '&' call_tmp[778515] call_tmp[778530]))
    (778503 'move' ret[778498](778502 'deref' call_tmp[778535]))
    (778500 return ret[778498])
  }
  function <[778454](arg _arg1[778456]:_singlevar[87253](?), arg _arg2[778457]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778612]:bool[10] "RVV" "temp"
    unknown call_tmp[778639] "expr temp" "maybe param" "maybe type" "temp"
    (778642 'move' call_tmp[778639](778546 call wrapped _mt[243] _arg1[778456]))
    unknown call_tmp[778644] "expr temp" "maybe param" "maybe type" "temp"
    (778647 'move' call_tmp[778644](778550 call wrapped _mt[243] _arg2[778457]))
    unknown call_tmp[778649] "expr temp" "maybe param" "maybe type" "temp"
    (778652 'move' call_tmp[778649](778554 call < call_tmp[778639] call_tmp[778644]))
    if call_tmp[778649]
    {
      (778617 'move' ret[778612](778616 'deref' 1))
      gotoReturn _end_<[778610] _end_<[778610]
    }
    unknown call_tmp[778654] "expr temp" "maybe param" "maybe type" "temp"
    (778657 'move' call_tmp[778654](778560 call wrapped _mt[243] _arg1[778456]))
    unknown call_tmp[778659] "expr temp" "maybe param" "maybe type" "temp"
    (778662 'move' call_tmp[778659](778564 call wrapped _mt[243] _arg2[778457]))
    unknown call_tmp[778664] "expr temp" "maybe param" "maybe type" "temp"
    (778667 'move' call_tmp[778664](778568 call > call_tmp[778654] call_tmp[778659]))
    if call_tmp[778664]
    {
      (778622 'move' ret[778612](778621 'deref' 0))
      gotoReturn _end_<[778610] _end_<[778610]
    }
    unknown call_tmp[778669] "expr temp" "maybe param" "maybe type" "temp"
    (778672 'move' call_tmp[778669](778574 call isOwned _mt[243] _arg1[778456]))
    unknown call_tmp[778674] "expr temp" "maybe param" "maybe type" "temp"
    (778677 'move' call_tmp[778674](778578 call isOwned _mt[243] _arg2[778457]))
    unknown call_tmp[778679] "expr temp" "maybe param" "maybe type" "temp"
    (778682 'move' call_tmp[778679](778582 call < call_tmp[778669] call_tmp[778674]))
    if call_tmp[778679]
    {
      (778627 'move' ret[778612](778626 'deref' 1))
      gotoReturn _end_<[778610] _end_<[778610]
    }
    unknown call_tmp[778684] "expr temp" "maybe param" "maybe type" "temp"
    (778687 'move' call_tmp[778684](778588 call isOwned _mt[243] _arg1[778456]))
    unknown call_tmp[778689] "expr temp" "maybe param" "maybe type" "temp"
    (778692 'move' call_tmp[778689](778592 call isOwned _mt[243] _arg2[778457]))
    unknown call_tmp[778694] "expr temp" "maybe param" "maybe type" "temp"
    (778697 'move' call_tmp[778694](778596 call > call_tmp[778684] call_tmp[778689]))
    if call_tmp[778694]
    {
      (778632 'move' ret[778612](778631 'deref' 0))
      gotoReturn _end_<[778610] _end_<[778610]
    }
    (778637 'move' ret[778612](778636 'deref' 0))
    label _end_<[778610]
    (778614 return ret[778612])
  }
  where {
    unknown call_tmp[778699] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778702 'move' call_tmp[778699](778460 'typeof' _arg1[778456]))
    unknown call_tmp[778704] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778707 'move' call_tmp[778704](778462 'typeof' _arg2[778457]))
    unknown call_tmp[778709] "expr temp" "maybe param" "maybe type" "temp"
    (778712 'move' call_tmp[778709](778464 call == call_tmp[778699] call_tmp[778704]))
    unknown call_tmp[778714] "expr temp" "maybe param" "maybe type" "temp"
    (778717 'move' call_tmp[778714](778540 call chpl_fields_are_comparable[778466] _arg1[778456] _arg2[778457]))
    (778544 '&' call_tmp[778709] call_tmp[778714])
  }
  function chpl_fields_are_comparable[778731](arg _arg1[778733]:_singlevar[87253](?), arg _arg2[778734]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778763]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778770] "expr temp" "maybe param" "maybe type" "temp"
    (778773 'move' call_tmp[778770](778737 call wrapped _mt[243] _arg1[778733]))
    unknown call_tmp[778775] "expr temp" "maybe param" "maybe type" "temp"
    (778778 'move' call_tmp[778775](778741 call wrapped _mt[243] _arg2[778734]))
    unknown call_tmp[778780] "expr temp" "maybe param" "maybe type" "temp"
    (778783 'move' call_tmp[778780](778745 'call resolves' c"<=" call_tmp[778770] call_tmp[778775]))
    unknown call_tmp[778785] "expr temp" "maybe param" "maybe type" "temp"
    (778788 'move' call_tmp[778785](778747 call isOwned _mt[243] _arg1[778733]))
    unknown call_tmp[778790] "expr temp" "maybe param" "maybe type" "temp"
    (778793 'move' call_tmp[778790](778751 call isOwned _mt[243] _arg2[778734]))
    unknown call_tmp[778795] "expr temp" "maybe param" "maybe type" "temp"
    (778798 'move' call_tmp[778795](778755 'call resolves' c"<=" call_tmp[778785] call_tmp[778790]))
    unknown call_tmp[778800] "expr temp" "maybe param" "maybe type" "temp"
    (778803 'move' call_tmp[778800](778757 '&' call_tmp[778780] call_tmp[778795]))
    (778768 'move' ret[778763](778767 'deref' call_tmp[778800]))
    (778765 return ret[778763])
  }
  function <=[778719](arg _arg1[778721]:_singlevar[87253](?), arg _arg2[778722]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778877]:bool[10] "RVV" "temp"
    unknown call_tmp[778904] "expr temp" "maybe param" "maybe type" "temp"
    (778907 'move' call_tmp[778904](778811 call wrapped _mt[243] _arg1[778721]))
    unknown call_tmp[778909] "expr temp" "maybe param" "maybe type" "temp"
    (778912 'move' call_tmp[778909](778815 call wrapped _mt[243] _arg2[778722]))
    unknown call_tmp[778914] "expr temp" "maybe param" "maybe type" "temp"
    (778917 'move' call_tmp[778914](778819 call < call_tmp[778904] call_tmp[778909]))
    if call_tmp[778914]
    {
      (778882 'move' ret[778877](778881 'deref' 1))
      gotoReturn _end_<=[778875] _end_<=[778875]
    }
    unknown call_tmp[778919] "expr temp" "maybe param" "maybe type" "temp"
    (778922 'move' call_tmp[778919](778825 call wrapped _mt[243] _arg1[778721]))
    unknown call_tmp[778924] "expr temp" "maybe param" "maybe type" "temp"
    (778927 'move' call_tmp[778924](778829 call wrapped _mt[243] _arg2[778722]))
    unknown call_tmp[778929] "expr temp" "maybe param" "maybe type" "temp"
    (778932 'move' call_tmp[778929](778833 call > call_tmp[778919] call_tmp[778924]))
    if call_tmp[778929]
    {
      (778887 'move' ret[778877](778886 'deref' 0))
      gotoReturn _end_<=[778875] _end_<=[778875]
    }
    unknown call_tmp[778934] "expr temp" "maybe param" "maybe type" "temp"
    (778937 'move' call_tmp[778934](778839 call isOwned _mt[243] _arg1[778721]))
    unknown call_tmp[778939] "expr temp" "maybe param" "maybe type" "temp"
    (778942 'move' call_tmp[778939](778843 call isOwned _mt[243] _arg2[778722]))
    unknown call_tmp[778944] "expr temp" "maybe param" "maybe type" "temp"
    (778947 'move' call_tmp[778944](778847 call < call_tmp[778934] call_tmp[778939]))
    if call_tmp[778944]
    {
      (778892 'move' ret[778877](778891 'deref' 1))
      gotoReturn _end_<=[778875] _end_<=[778875]
    }
    unknown call_tmp[778949] "expr temp" "maybe param" "maybe type" "temp"
    (778952 'move' call_tmp[778949](778853 call isOwned _mt[243] _arg1[778721]))
    unknown call_tmp[778954] "expr temp" "maybe param" "maybe type" "temp"
    (778957 'move' call_tmp[778954](778857 call isOwned _mt[243] _arg2[778722]))
    unknown call_tmp[778959] "expr temp" "maybe param" "maybe type" "temp"
    (778962 'move' call_tmp[778959](778861 call > call_tmp[778949] call_tmp[778954]))
    if call_tmp[778959]
    {
      (778897 'move' ret[778877](778896 'deref' 0))
      gotoReturn _end_<=[778875] _end_<=[778875]
    }
    (778902 'move' ret[778877](778901 'deref' 1))
    label _end_<=[778875]
    (778879 return ret[778877])
  }
  where {
    unknown call_tmp[778964] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778967 'move' call_tmp[778964](778725 'typeof' _arg1[778721]))
    unknown call_tmp[778969] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778972 'move' call_tmp[778969](778727 'typeof' _arg2[778722]))
    unknown call_tmp[778974] "expr temp" "maybe param" "maybe type" "temp"
    (778977 'move' call_tmp[778974](778729 call == call_tmp[778964] call_tmp[778969]))
    unknown call_tmp[778979] "expr temp" "maybe param" "maybe type" "temp"
    (778982 'move' call_tmp[778979](778805 call chpl_fields_are_comparable[778731] _arg1[778721] _arg2[778722]))
    (778809 '&' call_tmp[778974] call_tmp[778979])
  }
  function chpl_fields_are_comparable[778996](arg _arg1[778998]:_singlevar[87253](?), arg _arg2[778999]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779028]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779035] "expr temp" "maybe param" "maybe type" "temp"
    (779038 'move' call_tmp[779035](779002 call wrapped _mt[243] _arg1[778998]))
    unknown call_tmp[779040] "expr temp" "maybe param" "maybe type" "temp"
    (779043 'move' call_tmp[779040](779006 call wrapped _mt[243] _arg2[778999]))
    unknown call_tmp[779045] "expr temp" "maybe param" "maybe type" "temp"
    (779048 'move' call_tmp[779045](779010 'call resolves' c">" call_tmp[779035] call_tmp[779040]))
    unknown call_tmp[779050] "expr temp" "maybe param" "maybe type" "temp"
    (779053 'move' call_tmp[779050](779012 call isOwned _mt[243] _arg1[778998]))
    unknown call_tmp[779055] "expr temp" "maybe param" "maybe type" "temp"
    (779058 'move' call_tmp[779055](779016 call isOwned _mt[243] _arg2[778999]))
    unknown call_tmp[779060] "expr temp" "maybe param" "maybe type" "temp"
    (779063 'move' call_tmp[779060](779020 'call resolves' c">" call_tmp[779050] call_tmp[779055]))
    unknown call_tmp[779065] "expr temp" "maybe param" "maybe type" "temp"
    (779068 'move' call_tmp[779065](779022 '&' call_tmp[779045] call_tmp[779060]))
    (779033 'move' ret[779028](779032 'deref' call_tmp[779065]))
    (779030 return ret[779028])
  }
  function >[778984](arg _arg1[778986]:_singlevar[87253](?), arg _arg2[778987]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779142]:bool[10] "RVV" "temp"
    unknown call_tmp[779169] "expr temp" "maybe param" "maybe type" "temp"
    (779172 'move' call_tmp[779169](779076 call wrapped _mt[243] _arg1[778986]))
    unknown call_tmp[779174] "expr temp" "maybe param" "maybe type" "temp"
    (779177 'move' call_tmp[779174](779080 call wrapped _mt[243] _arg2[778987]))
    unknown call_tmp[779179] "expr temp" "maybe param" "maybe type" "temp"
    (779182 'move' call_tmp[779179](779084 call > call_tmp[779169] call_tmp[779174]))
    if call_tmp[779179]
    {
      (779147 'move' ret[779142](779146 'deref' 1))
      gotoReturn _end_>[779140] _end_>[779140]
    }
    unknown call_tmp[779184] "expr temp" "maybe param" "maybe type" "temp"
    (779187 'move' call_tmp[779184](779090 call wrapped _mt[243] _arg1[778986]))
    unknown call_tmp[779189] "expr temp" "maybe param" "maybe type" "temp"
    (779192 'move' call_tmp[779189](779094 call wrapped _mt[243] _arg2[778987]))
    unknown call_tmp[779194] "expr temp" "maybe param" "maybe type" "temp"
    (779197 'move' call_tmp[779194](779098 call < call_tmp[779184] call_tmp[779189]))
    if call_tmp[779194]
    {
      (779152 'move' ret[779142](779151 'deref' 0))
      gotoReturn _end_>[779140] _end_>[779140]
    }
    unknown call_tmp[779199] "expr temp" "maybe param" "maybe type" "temp"
    (779202 'move' call_tmp[779199](779104 call isOwned _mt[243] _arg1[778986]))
    unknown call_tmp[779204] "expr temp" "maybe param" "maybe type" "temp"
    (779207 'move' call_tmp[779204](779108 call isOwned _mt[243] _arg2[778987]))
    unknown call_tmp[779209] "expr temp" "maybe param" "maybe type" "temp"
    (779212 'move' call_tmp[779209](779112 call > call_tmp[779199] call_tmp[779204]))
    if call_tmp[779209]
    {
      (779157 'move' ret[779142](779156 'deref' 1))
      gotoReturn _end_>[779140] _end_>[779140]
    }
    unknown call_tmp[779214] "expr temp" "maybe param" "maybe type" "temp"
    (779217 'move' call_tmp[779214](779118 call isOwned _mt[243] _arg1[778986]))
    unknown call_tmp[779219] "expr temp" "maybe param" "maybe type" "temp"
    (779222 'move' call_tmp[779219](779122 call isOwned _mt[243] _arg2[778987]))
    unknown call_tmp[779224] "expr temp" "maybe param" "maybe type" "temp"
    (779227 'move' call_tmp[779224](779126 call < call_tmp[779214] call_tmp[779219]))
    if call_tmp[779224]
    {
      (779162 'move' ret[779142](779161 'deref' 0))
      gotoReturn _end_>[779140] _end_>[779140]
    }
    (779167 'move' ret[779142](779166 'deref' 0))
    label _end_>[779140]
    (779144 return ret[779142])
  }
  where {
    unknown call_tmp[779229] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779232 'move' call_tmp[779229](778990 'typeof' _arg1[778986]))
    unknown call_tmp[779234] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779237 'move' call_tmp[779234](778992 'typeof' _arg2[778987]))
    unknown call_tmp[779239] "expr temp" "maybe param" "maybe type" "temp"
    (779242 'move' call_tmp[779239](778994 call == call_tmp[779229] call_tmp[779234]))
    unknown call_tmp[779244] "expr temp" "maybe param" "maybe type" "temp"
    (779247 'move' call_tmp[779244](779070 call chpl_fields_are_comparable[778996] _arg1[778986] _arg2[778987]))
    (779074 '&' call_tmp[779239] call_tmp[779244])
  }
  function chpl_fields_are_comparable[779261](arg _arg1[779263]:_singlevar[87253](?), arg _arg2[779264]:_singlevar[87253](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779293]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779300] "expr temp" "maybe param" "maybe type" "temp"
    (779303 'move' call_tmp[779300](779267 call wrapped _mt[243] _arg1[779263]))
    unknown call_tmp[779305] "expr temp" "maybe param" "maybe type" "temp"
    (779308 'move' call_tmp[779305](779271 call wrapped _mt[243] _arg2[779264]))
    unknown call_tmp[779310] "expr temp" "maybe param" "maybe type" "temp"
    (779313 'move' call_tmp[779310](779275 'call resolves' c">=" call_tmp[779300] call_tmp[779305]))
    unknown call_tmp[779315] "expr temp" "maybe param" "maybe type" "temp"
    (779318 'move' call_tmp[779315](779277 call isOwned _mt[243] _arg1[779263]))
    unknown call_tmp[779320] "expr temp" "maybe param" "maybe type" "temp"
    (779323 'move' call_tmp[779320](779281 call isOwned _mt[243] _arg2[779264]))
    unknown call_tmp[779325] "expr temp" "maybe param" "maybe type" "temp"
    (779328 'move' call_tmp[779325](779285 'call resolves' c">=" call_tmp[779315] call_tmp[779320]))
    unknown call_tmp[779330] "expr temp" "maybe param" "maybe type" "temp"
    (779333 'move' call_tmp[779330](779287 '&' call_tmp[779310] call_tmp[779325]))
    (779298 'move' ret[779293](779297 'deref' call_tmp[779330]))
    (779295 return ret[779293])
  }
  function >=[779249](arg _arg1[779251]:_singlevar[87253](?), arg _arg2[779252]:_singlevar[87253](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779407]:bool[10] "RVV" "temp"
    unknown call_tmp[779434] "expr temp" "maybe param" "maybe type" "temp"
    (779437 'move' call_tmp[779434](779341 call wrapped _mt[243] _arg1[779251]))
    unknown call_tmp[779439] "expr temp" "maybe param" "maybe type" "temp"
    (779442 'move' call_tmp[779439](779345 call wrapped _mt[243] _arg2[779252]))
    unknown call_tmp[779444] "expr temp" "maybe param" "maybe type" "temp"
    (779447 'move' call_tmp[779444](779349 call > call_tmp[779434] call_tmp[779439]))
    if call_tmp[779444]
    {
      (779412 'move' ret[779407](779411 'deref' 1))
      gotoReturn _end_>=[779405] _end_>=[779405]
    }
    unknown call_tmp[779449] "expr temp" "maybe param" "maybe type" "temp"
    (779452 'move' call_tmp[779449](779355 call wrapped _mt[243] _arg1[779251]))
    unknown call_tmp[779454] "expr temp" "maybe param" "maybe type" "temp"
    (779457 'move' call_tmp[779454](779359 call wrapped _mt[243] _arg2[779252]))
    unknown call_tmp[779459] "expr temp" "maybe param" "maybe type" "temp"
    (779462 'move' call_tmp[779459](779363 call < call_tmp[779449] call_tmp[779454]))
    if call_tmp[779459]
    {
      (779417 'move' ret[779407](779416 'deref' 0))
      gotoReturn _end_>=[779405] _end_>=[779405]
    }
    unknown call_tmp[779464] "expr temp" "maybe param" "maybe type" "temp"
    (779467 'move' call_tmp[779464](779369 call isOwned _mt[243] _arg1[779251]))
    unknown call_tmp[779469] "expr temp" "maybe param" "maybe type" "temp"
    (779472 'move' call_tmp[779469](779373 call isOwned _mt[243] _arg2[779252]))
    unknown call_tmp[779474] "expr temp" "maybe param" "maybe type" "temp"
    (779477 'move' call_tmp[779474](779377 call > call_tmp[779464] call_tmp[779469]))
    if call_tmp[779474]
    {
      (779422 'move' ret[779407](779421 'deref' 1))
      gotoReturn _end_>=[779405] _end_>=[779405]
    }
    unknown call_tmp[779479] "expr temp" "maybe param" "maybe type" "temp"
    (779482 'move' call_tmp[779479](779383 call isOwned _mt[243] _arg1[779251]))
    unknown call_tmp[779484] "expr temp" "maybe param" "maybe type" "temp"
    (779487 'move' call_tmp[779484](779387 call isOwned _mt[243] _arg2[779252]))
    unknown call_tmp[779489] "expr temp" "maybe param" "maybe type" "temp"
    (779492 'move' call_tmp[779489](779391 call < call_tmp[779479] call_tmp[779484]))
    if call_tmp[779489]
    {
      (779427 'move' ret[779407](779426 'deref' 0))
      gotoReturn _end_>=[779405] _end_>=[779405]
    }
    (779432 'move' ret[779407](779431 'deref' 1))
    label _end_>=[779405]
    (779409 return ret[779407])
  }
  where {
    unknown call_tmp[779494] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779497 'move' call_tmp[779494](779255 'typeof' _arg1[779251]))
    unknown call_tmp[779499] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779502 'move' call_tmp[779499](779257 'typeof' _arg2[779252]))
    unknown call_tmp[779504] "expr temp" "maybe param" "maybe type" "temp"
    (779507 'move' call_tmp[779504](779259 call == call_tmp[779494] call_tmp[779499]))
    unknown call_tmp[779509] "expr temp" "maybe param" "maybe type" "temp"
    (779512 'move' call_tmp[779509](779335 call chpl_fields_are_comparable[779261] _arg1[779251] _arg2[779252]))
    (779339 '&' call_tmp[779504] call_tmp[779509])
  }
  function =[779514](ref arg _arg1[779516]:_singlevar[87253](?), const?  ref arg _arg2[779517]:_singlevar[87253](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[779554] "expr temp" "maybe param" "maybe type" "temp"
    (779557 'move' call_tmp[779554](779527 call wrapped _mt[243] _arg1[779516]))
    unknown call_tmp[779561] "expr temp" "maybe param" "maybe type" "temp"
    (779564 'move' call_tmp[779561](779531 call wrapped _mt[243] _arg2[779517]))
    (779535 call = call_tmp[779554] call_tmp[779561])
    (779548 'end of statement')
    unknown call_tmp[779568] "expr temp" "maybe param" "maybe type" "temp"
    (779571 'move' call_tmp[779568](779537 call isOwned _mt[243] _arg1[779516]))
    unknown call_tmp[779575] "expr temp" "maybe param" "maybe type" "temp"
    (779578 'move' call_tmp[779575](779541 call isOwned _mt[243] _arg2[779517]))
    (779545 call = call_tmp[779568] call_tmp[779575])
    (779550 return _void[55])
  }
  where {
    unknown call_tmp[779580] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779583 'move' call_tmp[779580](779520 'typeof' _arg1[779516]))
    unknown call_tmp[779585] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779588 'move' call_tmp[779585](779522 'typeof' _arg2[779517]))
    (779524 call == call_tmp[779580] call_tmp[779585])
  }
  function chpl__defaultHash[779590](arg r[779592]:_singlevar[87253](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[779623] "RVV" "temp"
    unknown call_tmp[779630] "expr temp" "maybe param" "maybe type" "temp"
    (779633 'move' call_tmp[779630](779609 call isOwned _mt[243] r[779592]))
    unknown call_tmp[779635] "expr temp" "maybe param" "maybe type" "temp"
    (779638 'move' call_tmp[779635](779613 call chpl__defaultHash call_tmp[779630]))
    unknown call_tmp[779640] "expr temp" "maybe param" "maybe type" "temp"
    (779643 'move' call_tmp[779640](779600 call wrapped _mt[243] r[779592]))
    unknown call_tmp[779645] "expr temp" "maybe param" "maybe type" "temp"
    (779648 'move' call_tmp[779645](779604 call chpl__defaultHash call_tmp[779640]))
    unknown call_tmp[779650] "expr temp" "maybe param" "maybe type" "temp"
    (779653 'move' call_tmp[779650](779594 call valType _mt[243] r[779592]))
    unknown call_tmp[779655] "expr temp" "maybe param" "maybe type" "temp"
    (779658 'move' call_tmp[779655](779598 call chpl__defaultHash call_tmp[779650]))
    unknown call_tmp[779660] "expr temp" "maybe param" "maybe type" "temp"
    (779663 'move' call_tmp[779660](779606 call chpl__defaultHashCombine call_tmp[779645] call_tmp[779655] 2))
    unknown call_tmp[779665] "expr temp" "maybe param" "maybe type" "temp"
    (779668 'move' call_tmp[779665](779615 call chpl__defaultHashCombine call_tmp[779635] call_tmp[779660] 3))
    (779628 'move' ret[779623](779627 'deref' call_tmp[779665]))
    (779625 return ret[779623])
  }
  single type _singlevar[87253](?) unknown valType[86932] "type variable" unknown wrapped[86940](86938 call unmanaged _singlecls[415414](?) valType[86932]) val isOwned[86946]:bool[10] 1 bool[10]
  function isSingleType[87290](arg t[87287]:_singlevar[87253](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512992] "RVV" "param" "temp"
    (512997 'move' ret[512992](512996 'deref' 1))
    (512994 return ret[512992])
  }
  function isSingleType[87302](arg t[87300]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513001] "RVV" "param" "temp"
    (513006 'move' ret[513001](513005 'deref' 0))
    (513003 return ret[513001])
  }
  function _singlevar[87253](?).readFF[87313](arg _mt[87318]:_MT[238], arg this[87315]:_singlevar[87253](?) :
  _singlevar[87253](?)) : _unknown[51] "method"
  {
    unknown ret[513010] "RVV" "temp"
    unknown call_tmp[631489] "expr temp" "maybe param" "maybe type" "temp"
    (631492 'move' call_tmp[631489](358252 call wrapped _mt[243] this[87315]))
    unknown call_tmp[631496] "expr temp" "maybe param" "maybe type" "temp"
    (631499 'move' call_tmp[631496](87325 call(87321 call (partial) readFF _mt[243] call_tmp[631489])))
    (513015 'move' ret[513010](513014 'deref' call_tmp[631496]))
    (513012 return ret[513010])
  }
  function _singlevar[87253](?).readXX[87334](arg _mt[87339]:_MT[238], arg this[87336]:_singlevar[87253](?) :
  _singlevar[87253](?)) : _unknown[51] "method"
  {
    unknown ret[513019] "RVV" "temp"
    (87343 call chpl_task_yield)
    (477021 'end of statement')
    unknown call_tmp[631503] "expr temp" "maybe param" "maybe type" "temp"
    (631506 'move' call_tmp[631503](358257 call wrapped _mt[243] this[87336]))
    unknown call_tmp[631510] "expr temp" "maybe param" "maybe type" "temp"
    (631513 'move' call_tmp[631510](87351 call(87347 call (partial) readXX _mt[243] call_tmp[631503])))
    (513024 'move' ret[513019](513023 'deref' call_tmp[631510]))
    (513021 return ret[513019])
  }
  function _singlevar[87253](?).writeEF[87363](arg _mt[87368]:_MT[238], arg this[87365]:_singlevar[87253](?) :
  _singlevar[87253](?), arg x[87360] :
  (377403 call valType _mt[243] this[87365])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[631519] "expr temp" "maybe param" "maybe type" "temp"
    (631522 'move' call_tmp[631519](358262 call wrapped _mt[243] this[87365]))
    (87376 call(87371 call (partial) writeEF _mt[243] call_tmp[631519]) x[87360])
    (513026 return _void[55])
  }
  function _singlevar[87253](?).isFull[87384](arg _mt[87389]:_MT[238], arg this[87386]:_singlevar[87253](?) :
  _singlevar[87253](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[513030] "RVV" "temp"
    unknown call_tmp[631528] "expr temp" "maybe param" "maybe type" "temp"
    (631531 'move' call_tmp[631528](358267 call wrapped _mt[243] this[87386]))
    unknown call_tmp[631535] "expr temp" "maybe param" "maybe type" "temp"
    (631538 'move' call_tmp[631535](87392 call isFull _mt[243] call_tmp[631528]))
    (513035 'move' ret[513030](513034 'deref' call_tmp[631535]))
    (513032 return ret[513030])
  }
  function =[87410](ref arg lhs[87407]:_singlevar[87253](?), arg rhs[87413] :
  (460124 'query' lhs[87407] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[631542] "expr temp" "maybe param" "maybe type" "temp"
    (631545 'move' call_tmp[631542](87417 call wrapped _mt[243] lhs[87407]))
    (87425 call(87420 call (partial) writeEF _mt[243] call_tmp[631542]) rhs[87413])
    (513037 return _void[55])
  }
  function chpl__initCopy[87440](ref arg sv[87437]:_singlevar[87253](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[513041] "RVV" "temp"
    unknown call_tmp[631551] "expr temp" "maybe param" "maybe type" "temp"
    (631554 'move' call_tmp[631551](87447 call(87443 call (partial) readFF _mt[243] sv[87437])))
    (513046 'move' ret[513041](513045 'deref' call_tmp[631551]))
    (513043 return ret[513041])
  }
  function chpl__autoCopy[87459](const  ref arg rhs[87456]:_singlevar[87253](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[513050] "RVV" "temp"
    unknown call_tmp[631556] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631559 'move' call_tmp[631556](747809 'new' _singlevar[87253](?) rhs[87456]))
    (513055 'move' ret[513050](513054 'deref' call_tmp[631556]))
    (513052 return ret[513050])
  }
  function chpl__maybeAutoDestroyed[87481](arg x[87478]:_singlevar[87253](?)) param : _unknown[51] "inline"
  {
    unknown ret[513059] "RVV" "param" "temp"
    (513064 'move' ret[513059](513063 'deref' 1))
    (513061 return ret[513059])
  }
  function chpl__autoDestroy[87498](arg x[87495]:_singlevar[87253](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[631563] "expr temp" "maybe param" "maybe type" "temp"
    (631566 'move' call_tmp[631563](87501 call isOwned _mt[243] x[87495]))
    unknown call_tmp[631568] "expr temp" "maybe param" "maybe type" "temp"
    (631571 'move' call_tmp[631568](87505 call == call_tmp[631563] 1))
    unknown call_tmp[631573] "expr temp" "maybe param" "maybe type" "temp"
    (631576 'move' call_tmp[631573](87515 call _cond_test call_tmp[631568]))
    if call_tmp[631573]
    {
      unknown call_tmp[631580] "expr temp" "maybe param" "maybe type" "temp"
      (631583 'move' call_tmp[631580](87508 call wrapped _mt[243] x[87495]))
      (87512 call chpl__delete call_tmp[631580])
    }
    (513066 return _void[55])
  }
  function chpl__readXX[87532](const  ref arg x[87529]:_singlevar[87253](?)) : _unknown[51] "no doc"
  {
    unknown ret[513070] "RVV" "temp"
    unknown call_tmp[631587] "expr temp" "maybe param" "maybe type" "temp"
    (631590 'move' call_tmp[631587](87539 call(87535 call (partial) readXX _mt[243] x[87529])))
    (513075 'move' ret[513070](513074 'deref' call_tmp[631587]))
    (513072 return ret[513070])
  }
  function _singlecls[87885](?).init[87563](arg _mt[87889]:_MT[238], arg this[87887]:_singlecls[87885](?), arg valType[87561]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460207] "temporary of super field" "temp"
    (460215 'move' super_tmp[460207](460208 '.v' this[87887] c"super"))
    (460211 call init _mt[243] super_tmp[460207])
    (477031 'end of statement')
    unknown tmp[460160] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491945] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631592] "expr temp" "maybe param" "maybe type" "temp"
      (631595 'move' call_tmp[631592](460162 '.v' this[87887] c"super"))
      (491949 'move' call_type_tmp[491945](460165 'typeof' call_tmp[631592]))
    }
    (460166 'move' tmp[460160] call_type_tmp[491945])
    unknown call_tmp[631597] "maybe param" "maybe type" "temp"
    (631600 'move' call_tmp[631597](460171 'cast' tmp[460160] this[87887]))
    unknown chpl__thisAsParent[460168] "dead at end of block" "insert auto destroy" "temp"
    (541591 'init var' chpl__thisAsParent[460168] call_tmp[631597] tmp[460160])
    (460174 'setcid' chpl__thisAsParent[460168])
    (477032 'end of statement')
    unknown tmp[460176] "temp" "type variable"
    (460178 'move' tmp[460176] valType[87561])
    (460180 'init field' this[87887] c"valType" tmp[460176])
    (477033 'end of statement')
    unknown tmp[460184] "temp"
    unknown call_tmp[631602] "expr temp" "maybe param" "maybe type" "temp"
    (631605 'move' call_tmp[631602](460193 '.v' this[87887] c"valType"))
    (460187 'default init var' tmp[460184] call_tmp[631602])
    (460189 '.=' this[87887] c"value" tmp[460184])
    (477034 'end of statement')
    val tmp[460196]:chpl_single_aux_t[88055] "temp"
    (460199 'default init var' tmp[460196] chpl_single_aux_t[88055])
    (460201 '.=' this[87887] c"singleAux" tmp[460196])
    (477035 'end of statement')
    (460206 'setcid' this[87887])
    (477036 'end of statement')
    unknown call_tmp[631609] "expr temp" "maybe param" "maybe type" "temp"
    (631612 'move' call_tmp[631609](377424 call singleAux _mt[243] this[87887]))
    (87584 call chpl_single_initAux call_tmp[631609])
    (513077 return _void[55])
  }
  function _singlecls[87885](?).deinit[87590](arg _mt[87893]:_MT[238], arg this[87891]:_singlecls[87885](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631616] "expr temp" "maybe param" "maybe type" "temp"
    (631619 'move' call_tmp[631616](377429 call singleAux _mt[243] this[87891]))
    (87595 call chpl_single_destroyAux call_tmp[631616])
    (513079 return _void[55])
  }
  function _singlecls[87885](?).readFF[87602](arg _mt[87897]:_MT[238], arg this[87895]:_singlecls[87885](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513083] "RVV" "temp"
    unknown ret[87605] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631623] "expr temp" "maybe param" "maybe type" "temp"
    (631626 'move' call_tmp[631623](377434 call valType _mt[243] this[87895]))
    (541593 'default init var' ret[87605] call_tmp[631623])
    (87608 'end of statement')
    const tmp[87663] "const" "temp"
    unknown call_tmp[631628] "expr temp" "maybe param" "maybe type" "temp"
    (631631 'move' call_tmp[631628](87660 '_wide_get_locale' this[87895]))
    (87665 'move' tmp[87663](87661 'deref' call_tmp[631628]))
    {
      {
        unknown localRet[87612] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541595] "maybe param" "maybe type" "temp"
        (541604 'move' type_tmp[541595](541601 call valType _mt[243] this[87895]))
        (541597 'init var split decl' localRet[87612] type_tmp[541595])
        (87615 'end of statement')
        (87619 call chpl_rmem_consist_release)
        (477039 'end of statement')
        unknown call_tmp[631637] "expr temp" "maybe param" "maybe type" "temp"
        (631640 'move' call_tmp[631637](87622 call isFull _mt[243] this[87895]))
        unknown call_tmp[631642] "expr temp" "maybe param" "maybe type" "temp"
        (631645 'move' call_tmp[631642](87646 call _cond_test call_tmp[631637]))
        if call_tmp[631642]
        {
          unknown call_tmp[631649] "maybe param" "maybe type" "temp"
          (631652 'move' call_tmp[631649](377446 call value _mt[243] this[87895]))
          (541606 'init var split init' localRet[87612] call_tmp[631649] type_tmp[541595])
          (477040 'end of statement' localRet[87612])
        }
        {
          unknown call_tmp[631656] "expr temp" "maybe param" "maybe type" "temp"
          (631659 'move' call_tmp[631656](377451 call singleAux _mt[243] this[87895]))
          (87633 call chpl_single_waitFullAndLock call_tmp[631656])
          (477042 'end of statement')
          unknown call_tmp[631663] "maybe param" "maybe type" "temp"
          (631666 'move' call_tmp[631663](377457 call value _mt[243] this[87895]))
          (541609 'init var split init' localRet[87612] call_tmp[631663] type_tmp[541595])
          (477043 'end of statement' localRet[87612])
          unknown call_tmp[631670] "expr temp" "maybe param" "maybe type" "temp"
          (631673 'move' call_tmp[631670](377462 call singleAux _mt[243] this[87895]))
          (87644 call chpl_single_markAndSignalFull call_tmp[631670])
        }
        (87653 call chpl_rmem_consist_acquire)
        (477046 'end of statement')
        (87657 call = ret[87605] localRet[87612])
        (477047 'end of statement' ret[87605] localRet[87612])
      }
      (87668 'on block' 0 tmp[87663])
    }
    (513088 'move' ret[513083](513087 'deref' ret[87605]))
    gotoReturn _end_readFF[513081] _end_readFF[513081]
    (477050 'end of statement' ret[87605])
    label _end_readFF[513081]
    (513085 return ret[513083])
  }
  function _singlecls[87885](?).readXX[87678](arg _mt[87901]:_MT[238], arg this[87899]:_singlecls[87885](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513094] "RVV" "temp"
    unknown ret[87681] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631677] "expr temp" "maybe param" "maybe type" "temp"
    (631680 'move' call_tmp[631677](377470 call valType _mt[243] this[87899]))
    (541612 'default init var' ret[87681] call_tmp[631677])
    (87684 'end of statement')
    const tmp[87739] "const" "temp"
    unknown call_tmp[631682] "expr temp" "maybe param" "maybe type" "temp"
    (631685 'move' call_tmp[631682](87736 '_wide_get_locale' this[87899]))
    (87741 'move' tmp[87739](87737 'deref' call_tmp[631682]))
    {
      {
        unknown localRet[87688] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541614] "maybe param" "maybe type" "temp"
        (541623 'move' type_tmp[541614](541620 call valType _mt[243] this[87899]))
        (541616 'init var split decl' localRet[87688] type_tmp[541614])
        (87691 'end of statement')
        (87695 call chpl_rmem_consist_release)
        (477052 'end of statement')
        unknown call_tmp[631691] "expr temp" "maybe param" "maybe type" "temp"
        (631694 'move' call_tmp[631691](87698 call isFull _mt[243] this[87899]))
        unknown call_tmp[631696] "expr temp" "maybe param" "maybe type" "temp"
        (631699 'move' call_tmp[631696](87722 call _cond_test call_tmp[631691]))
        if call_tmp[631696]
        {
          unknown call_tmp[631703] "maybe param" "maybe type" "temp"
          (631706 'move' call_tmp[631703](377482 call value _mt[243] this[87899]))
          (541625 'init var split init' localRet[87688] call_tmp[631703] type_tmp[541614])
          (477053 'end of statement' localRet[87688])
        }
        {
          unknown call_tmp[631710] "expr temp" "maybe param" "maybe type" "temp"
          (631713 'move' call_tmp[631710](377487 call singleAux _mt[243] this[87899]))
          (87709 call chpl_single_lock call_tmp[631710])
          (477055 'end of statement')
          unknown call_tmp[631717] "maybe param" "maybe type" "temp"
          (631720 'move' call_tmp[631717](377493 call value _mt[243] this[87899]))
          (541628 'init var split init' localRet[87688] call_tmp[631717] type_tmp[541614])
          (477056 'end of statement' localRet[87688])
          unknown call_tmp[631724] "expr temp" "maybe param" "maybe type" "temp"
          (631727 'move' call_tmp[631724](377498 call singleAux _mt[243] this[87899]))
          (87720 call chpl_single_unlock call_tmp[631724])
        }
        (87729 call chpl_rmem_consist_acquire)
        (477059 'end of statement')
        (87733 call = ret[87681] localRet[87688])
        (477060 'end of statement' ret[87681] localRet[87688])
      }
      (87744 'on block' 0 tmp[87739])
    }
    (513099 'move' ret[513094](513098 'deref' ret[87681]))
    gotoReturn _end_readXX[513092] _end_readXX[513092]
    (477063 'end of statement' ret[87681])
    label _end_readXX[513092]
    (513096 return ret[513094])
  }
  function _singlecls[87885](?).writeEF[87758](arg _mt[87905]:_MT[238], arg this[87903]:_singlecls[87885](?), arg val[87755] :
  (377506 call valType _mt[243] this[87903])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[87824] "const" "temp"
    unknown call_tmp[631731] "expr temp" "maybe param" "maybe type" "temp"
    (631734 'move' call_tmp[631731](87821 '_wide_get_locale' this[87903]))
    (87826 'move' tmp[87824](87822 'deref' call_tmp[631731]))
    {
      {
        (87769 call chpl_rmem_consist_release)
        (477065 'end of statement')
        unknown call_tmp[631738] "expr temp" "maybe param" "maybe type" "temp"
        (631741 'move' call_tmp[631738](377514 call singleAux _mt[243] this[87903]))
        (87775 call chpl_single_lock call_tmp[631738])
        (477066 'end of statement')
        unknown call_tmp[631745] "expr temp" "maybe param" "maybe type" "temp"
        (631748 'move' call_tmp[631745](87778 call isFull _mt[243] this[87903]))
        unknown call_tmp[631750] "expr temp" "maybe param" "maybe type" "temp"
        (631753 'move' call_tmp[631750](87802 call _cond_test call_tmp[631745]))
        if call_tmp[631750]
        {
          (87800 call halt "single var already defined")
        }
        unknown call_tmp[631757] "expr temp" "maybe param" "maybe type" "temp"
        (631760 'move' call_tmp[631757](377519 call value _mt[243] this[87903]))
        (87809 call = call_tmp[631757] val[87755])
        (477068 'end of statement')
        unknown call_tmp[631764] "expr temp" "maybe param" "maybe type" "temp"
        (631767 'move' call_tmp[631764](377525 call singleAux _mt[243] this[87903]))
        (87815 call chpl_single_markAndSignalFull call_tmp[631764])
        (477069 'end of statement')
        (87819 call chpl_rmem_consist_acquire)
      }
      (87829 'on block' 0 tmp[87824])
    }
    (513103 return _void[55])
  }
  {
    (87764 call <(87761 'lifetime_of' this[87903])(87763 'lifetime_of' val[87755]))
  }
  function _singlecls[87885](?).isFull[87838](arg _mt[87909]:_MT[238], arg this[87907]:_singlecls[87885](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513107] "RVV" "temp"
    unknown b[87841] "dead at end of block" "insert auto destroy"
    (541631 'default init var' b[87841] bool[10])
    (87844 'end of statement')
    const tmp[87871] "const" "temp"
    unknown call_tmp[631769] "expr temp" "maybe param" "maybe type" "temp"
    (631772 'move' call_tmp[631769](87868 '_wide_get_locale' this[87907]))
    (87873 'move' tmp[87871](87869 'deref' call_tmp[631769]))
    {
      {
        (87849 call chpl_rmem_consist_release)
        (477071 'end of statement')
        unknown call_tmp[631776] "expr temp" "maybe param" "maybe type" "temp"
        (631779 'move' call_tmp[631776](377532 call value _mt[243] this[87907]))
        unknown call_tmp[631781] "expr temp" "maybe param" "maybe type" "temp"
        (631784 'move' call_tmp[631781](87857 call c_ptrTo call_tmp[631776]))
        unknown call_tmp[631788] "expr temp" "maybe param" "maybe type" "temp"
        (631791 'move' call_tmp[631788](377537 call singleAux _mt[243] this[87907]))
        unknown call_tmp[631793] "expr temp" "maybe param" "maybe type" "temp"
        (631796 'move' call_tmp[631793](87860 call chpl_single_isFull call_tmp[631781] call_tmp[631788]))
        (87861 call = b[87841] call_tmp[631793])
        (477072 'end of statement' b[87841])
        (87866 call chpl_rmem_consist_acquire)
      }
      (87876 'on block' 0 tmp[87871])
    }
    (513112 'move' ret[513107](513111 'deref' b[87841]))
    gotoReturn _end_isFull[513105] _end_isFull[513105]
    (477075 'end of statement' b[87841])
    label _end_isFull[513105]
    (513109 return ret[513107])
  }
  function _singlecls[87885](?).super[779670](arg _mt[779672]:_MT[238], arg this[779674]:_singlecls[87885](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779684] "RVV" "temp"
    unknown call_tmp[779691] "expr temp" "maybe param" "maybe type" "temp"
    (779694 'move' call_tmp[779691](779678 '.v' this[779674] c"super"))
    (779689 'move' ret[779684](779688 'deref' call_tmp[779691]))
    (779686 return ret[779684])
  }
  function _singlecls[779701](?).valType[779696](arg _mt[779698]:_MT[238], arg this[779703]:_singlecls[779701](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779738] "RVV" "temp" "type variable"
    unknown borrowOfThis[779705]
    (779730 'end of statement')
    (779707 'move' borrowOfThis[779705](779710 call _cast _borrowedNonNilable[214](?) this[779703]))
    (779731 'end of statement' borrowOfThis[779705])
    unknown call_tmp[779752] "expr temp" "maybe param" "maybe type" "temp"
    (779755 'move' call_tmp[779752](779720 'is bound' borrowOfThis[779705] c"valType"))
    if call_tmp[779752]
    {
      unknown call_tmp[779757] "expr temp" "maybe param" "maybe type" "temp"
      (779760 'move' call_tmp[779757](779715 '.v' borrowOfThis[779705] c"valType"))
      unknown call_tmp[779762] "expr temp" "maybe param" "maybe type" "temp"
      (779765 'move' call_tmp[779762](779716 call chpl_checkLegalTypeFieldAccessor this[779703] call_tmp[779757] "valType"))
      (779743 'move' ret[779738](779742 'deref' call_tmp[779762]))
      gotoReturn _end_valType[779736] _end_valType[779736]
      (779733 'end of statement' borrowOfThis[779705])
    }
    {
      (779748 'move' ret[779738](779747 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779736] _end_valType[779736]
    }
    label _end_valType[779736]
    (779740 return ret[779738])
  }
  function _singlecls[779701](?).valType[779767](arg _mt[779769]:_MT[238], arg this[779771]:_singlecls[779701](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779806] "RVV" "temp" "type variable"
    unknown borrowOfThis[779773] "type variable"
    (779798 'end of statement')
    (779775 'move' borrowOfThis[779773](779778 call _cast _borrowedNonNilable[214](?) this[779771]))
    (779799 'end of statement' borrowOfThis[779773])
    unknown call_tmp[779820] "expr temp" "maybe param" "maybe type" "temp"
    (779823 'move' call_tmp[779820](779788 'is bound' borrowOfThis[779773] c"valType"))
    if call_tmp[779820]
    {
      unknown call_tmp[779825] "expr temp" "maybe param" "maybe type" "temp"
      (779828 'move' call_tmp[779825](779783 '.v' borrowOfThis[779773] c"valType"))
      unknown call_tmp[779830] "expr temp" "maybe param" "maybe type" "temp"
      (779833 'move' call_tmp[779830](779784 call chpl_checkLegalTypeFieldAccessor this[779771] call_tmp[779825] "valType"))
      (779811 'move' ret[779806](779810 'deref' call_tmp[779830]))
      gotoReturn _end_valType[779804] _end_valType[779804]
      (779801 'end of statement' borrowOfThis[779773])
    }
    {
      (779816 'move' ret[779806](779815 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779804] _end_valType[779804]
    }
    label _end_valType[779804]
    (779808 return ret[779806])
  }
  function _singlecls[87885](?).value[779835](arg _mt[779837]:_MT[238], arg this[779839]:_singlecls[87885](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779849] "RVV" "temp"
    unknown call_tmp[779856] "expr temp" "maybe param" "maybe type" "temp"
    (779859 'move' call_tmp[779856](779843 '.' this[779839] c"value"))
    (779854 'move' ret[779849](779853 'addr of' call_tmp[779856]))
    (779851 return ret[779849])
  }
  function _singlecls[87885](?).singleAux[779861](arg _mt[779863]:_MT[238], arg this[779865]:_singlecls[87885](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779875] "RVV" "temp"
    unknown call_tmp[779882] "expr temp" "maybe param" "maybe type" "temp"
    (779885 'move' call_tmp[779882](779869 '.' this[779865] c"singleAux"))
    (779880 'move' ret[779875](779879 'addr of' call_tmp[779882]))
    (779877 return ret[779875])
  }
  function _singlecls[87885](?).writeThis[779887](arg _mt[779891]:_MT[238], arg this[779889]:_singlecls[87885](?), arg f[779890]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779896 call writeThisDefaultImpl f[779890] this[779889])
    (779901 return _void[55])
  }
  function _singlecls[87885](?).readThis[779903](arg _mt[779907]:_MT[238], arg this[779905]:_singlecls[87885](?), arg f[779906]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779911 call readThisDefaultImpl f[779906] this[779905])
    (779917 return _void[55])
  }
  type _singlecls[87885](?) val super[355636]:object[22] "super class" unknown valType[87546] "type variable" unknown value[87550] valType[87546] val singleAux[87555]:chpl_single_aux_t[88055] chpl_single_aux_t[88055]
  type _singlecls[779701](?)
  type unmanaged _singlecls[415414](?)
  type _singlecls[377355](?)
  function isSingleValue[87918](arg x[87915]:_singlevar[87253](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513118] "RVV" "param" "temp"
    (513123 'move' ret[513118](513122 'deref' 1))
    (513120 return ret[513118])
  }
  function isSingleValue[87930](arg x[87928]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513127] "RVV" "param" "temp"
    (513132 'move' ret[513127](513131 'deref' 0))
    (513129 return ret[513127])
  }
  (355062 'used modules list'(84290 'use' ChapelStandard[20264])(84294 'use' AlignedTSupport[88354])(84297 'use' MemConsistency[186602])(84300 'use' SyncVarRuntimeSupport[87940]))
}