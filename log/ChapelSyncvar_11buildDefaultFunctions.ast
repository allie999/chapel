AST dump for ChapelSyncvar after pass buildDefaultFunctions.
Module use list: ChapelStandard AlignedTSupport MemConsistency SyncVarRuntimeSupport 

{
  function chpl__init_ChapelSyncvar[416015]() : void[4] "insert line file info" "module init"
  {
    (541569 'init var' useNativeSyncVar[84493] 1)
    (84496 'end of statement')
    (513198 return _void[55])
  }
  function isSupported[84310](arg t[84308]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512732] "RVV" "param" "temp"
    unknown tmp[422086] "maybe param" "temp"
    unknown tmp[422107] "maybe param" "temp"
    unknown tmp[422128] "maybe param" "temp"
    unknown tmp[422149] "maybe param" "temp"
    unknown tmp[422170] "maybe param" "temp"
    unknown tmp[422191] "maybe param" "temp"
    unknown tmp[422212] "maybe param" "temp"
    unknown tmp[422233] "maybe param" "temp"
    (422244 'move' tmp[422233](84315 call isNothingType t[84308]))
    unknown call_tmp[629958] "expr temp" "maybe param" "maybe type" "temp"
    (629961 'move' call_tmp[629958](422246 call _cond_invalid tmp[422233]))
    if call_tmp[629958]
    {
      (422249 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560586] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560587] "maybe param" "temp"
    unknown call_tmp[629963] "expr temp" "maybe param" "maybe type" "temp"
    (629966 'move' call_tmp[629963](422234 call isTrue tmp[422233]))
    (560592 'move' tmp[560587](560590 call _cond_test call_tmp[629963]))
    if tmp[560587]
    {
      (560597 'move' tmp[560586](560594 '_paramFoldLogical' tmp[560587] 1))
    }
    {
      unknown tmp[560599] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629968] "expr temp" "maybe param" "maybe type" "temp"
      (629971 'move' call_tmp[629968](84319 call isBoolType t[84308]))
      (560601 'move' tmp[560599](422238 call isTrue call_tmp[629968]))
      (560606 'move' tmp[560586](560603 '_paramFoldLogical' tmp[560587] tmp[560599]))
    }
    (422223 'move' tmp[422212] tmp[560586])
    unknown call_tmp[629973] "expr temp" "maybe param" "maybe type" "temp"
    (629976 'move' call_tmp[629973](422225 call _cond_invalid tmp[422212]))
    if call_tmp[629973]
    {
      (422228 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560613] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560614] "maybe param" "temp"
    unknown call_tmp[629978] "expr temp" "maybe param" "maybe type" "temp"
    (629981 'move' call_tmp[629978](422213 call isTrue tmp[422212]))
    (560619 'move' tmp[560614](560617 call _cond_test call_tmp[629978]))
    if tmp[560614]
    {
      (560624 'move' tmp[560613](560621 '_paramFoldLogical' tmp[560614] 1))
    }
    {
      unknown tmp[560626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629983] "expr temp" "maybe param" "maybe type" "temp"
      (629986 'move' call_tmp[629983](84325 call isIntegralType t[84308]))
      (560628 'move' tmp[560626](422217 call isTrue call_tmp[629983]))
      (560633 'move' tmp[560613](560630 '_paramFoldLogical' tmp[560614] tmp[560626]))
    }
    (422202 'move' tmp[422191] tmp[560613])
    unknown call_tmp[629988] "expr temp" "maybe param" "maybe type" "temp"
    (629991 'move' call_tmp[629988](422204 call _cond_invalid tmp[422191]))
    if call_tmp[629988]
    {
      (422207 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560640] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560641] "maybe param" "temp"
    unknown call_tmp[629993] "expr temp" "maybe param" "maybe type" "temp"
    (629996 'move' call_tmp[629993](422192 call isTrue tmp[422191]))
    (560646 'move' tmp[560641](560644 call _cond_test call_tmp[629993]))
    if tmp[560641]
    {
      (560651 'move' tmp[560640](560648 '_paramFoldLogical' tmp[560641] 1))
    }
    {
      unknown tmp[560653] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629998] "expr temp" "maybe param" "maybe type" "temp"
      (630001 'move' call_tmp[629998](84331 call isRealType t[84308]))
      (560655 'move' tmp[560653](422196 call isTrue call_tmp[629998]))
      (560660 'move' tmp[560640](560657 '_paramFoldLogical' tmp[560641] tmp[560653]))
    }
    (422181 'move' tmp[422170] tmp[560640])
    unknown call_tmp[630003] "expr temp" "maybe param" "maybe type" "temp"
    (630006 'move' call_tmp[630003](422183 call _cond_invalid tmp[422170]))
    if call_tmp[630003]
    {
      (422186 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560667] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560668] "maybe param" "temp"
    unknown call_tmp[630008] "expr temp" "maybe param" "maybe type" "temp"
    (630011 'move' call_tmp[630008](422171 call isTrue tmp[422170]))
    (560673 'move' tmp[560668](560671 call _cond_test call_tmp[630008]))
    if tmp[560668]
    {
      (560678 'move' tmp[560667](560675 '_paramFoldLogical' tmp[560668] 1))
    }
    {
      unknown tmp[560680] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630013] "expr temp" "maybe param" "maybe type" "temp"
      (630016 'move' call_tmp[630013](84337 call isImagType t[84308]))
      (560682 'move' tmp[560680](422175 call isTrue call_tmp[630013]))
      (560687 'move' tmp[560667](560684 '_paramFoldLogical' tmp[560668] tmp[560680]))
    }
    (422160 'move' tmp[422149] tmp[560667])
    unknown call_tmp[630018] "expr temp" "maybe param" "maybe type" "temp"
    (630021 'move' call_tmp[630018](422162 call _cond_invalid tmp[422149]))
    if call_tmp[630018]
    {
      (422165 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560694] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560695] "maybe param" "temp"
    unknown call_tmp[630023] "expr temp" "maybe param" "maybe type" "temp"
    (630026 'move' call_tmp[630023](422150 call isTrue tmp[422149]))
    (560700 'move' tmp[560695](560698 call _cond_test call_tmp[630023]))
    if tmp[560695]
    {
      (560705 'move' tmp[560694](560702 '_paramFoldLogical' tmp[560695] 1))
    }
    {
      unknown tmp[560707] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630028] "expr temp" "maybe param" "maybe type" "temp"
      (630031 'move' call_tmp[630028](84343 call isEnumType t[84308]))
      (560709 'move' tmp[560707](422154 call isTrue call_tmp[630028]))
      (560714 'move' tmp[560694](560711 '_paramFoldLogical' tmp[560695] tmp[560707]))
    }
    (422139 'move' tmp[422128] tmp[560694])
    unknown call_tmp[630033] "expr temp" "maybe param" "maybe type" "temp"
    (630036 'move' call_tmp[630033](422141 call _cond_invalid tmp[422128]))
    if call_tmp[630033]
    {
      (422144 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560721] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560722] "maybe param" "temp"
    unknown call_tmp[630038] "expr temp" "maybe param" "maybe type" "temp"
    (630041 'move' call_tmp[630038](422129 call isTrue tmp[422128]))
    (560727 'move' tmp[560722](560725 call _cond_test call_tmp[630038]))
    if tmp[560722]
    {
      (560732 'move' tmp[560721](560729 '_paramFoldLogical' tmp[560722] 1))
    }
    {
      unknown tmp[560734] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630043] "expr temp" "maybe param" "maybe type" "temp"
      (630046 'move' call_tmp[630043](84349 call isClassType t[84308]))
      (560736 'move' tmp[560734](422133 call isTrue call_tmp[630043]))
      (560741 'move' tmp[560721](560738 '_paramFoldLogical' tmp[560722] tmp[560734]))
    }
    (422118 'move' tmp[422107] tmp[560721])
    unknown call_tmp[630048] "expr temp" "maybe param" "maybe type" "temp"
    (630051 'move' call_tmp[630048](422120 call _cond_invalid tmp[422107]))
    if call_tmp[630048]
    {
      (422123 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560748] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560749] "maybe param" "temp"
    unknown call_tmp[630053] "expr temp" "maybe param" "maybe type" "temp"
    (630056 'move' call_tmp[630053](422108 call isTrue tmp[422107]))
    (560754 'move' tmp[560749](560752 call _cond_test call_tmp[630053]))
    if tmp[560749]
    {
      (560759 'move' tmp[560748](560756 '_paramFoldLogical' tmp[560749] 1))
    }
    {
      unknown tmp[560761] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630058] "expr temp" "maybe param" "maybe type" "temp"
      (630061 'move' call_tmp[630058](84355 call isStringType t[84308]))
      (560763 'move' tmp[560761](422112 call isTrue call_tmp[630058]))
      (560768 'move' tmp[560748](560765 '_paramFoldLogical' tmp[560749] tmp[560761]))
    }
    (422097 'move' tmp[422086] tmp[560748])
    unknown call_tmp[630063] "expr temp" "maybe param" "maybe type" "temp"
    (630066 'move' call_tmp[630063](422099 call _cond_invalid tmp[422086]))
    if call_tmp[630063]
    {
      (422102 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560775] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560776] "maybe param" "temp"
    unknown call_tmp[630068] "expr temp" "maybe param" "maybe type" "temp"
    (630071 'move' call_tmp[630068](422087 call isTrue tmp[422086]))
    (560781 'move' tmp[560776](560779 call _cond_test call_tmp[630068]))
    if tmp[560776]
    {
      (560786 'move' tmp[560775](560783 '_paramFoldLogical' tmp[560776] 1))
    }
    {
      unknown tmp[560788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630073] "expr temp" "maybe param" "maybe type" "temp"
      (630076 'move' call_tmp[630073](84360 call == t[84308] chpl_taskID_t[163]))
      (560790 'move' tmp[560788](422091 call isTrue call_tmp[630073]))
      (560795 'move' tmp[560775](560792 '_paramFoldLogical' tmp[560776] tmp[560788]))
    }
    (512737 'move' ret[512732](512736 'deref' tmp[560775]))
    (512734 return ret[512732])
  }
  function ensureFEType[84373](arg t[84371]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[630078] "expr temp" "maybe param" "maybe type" "temp"
    (630081 'move' call_tmp[630078](84378 call isSupported t[84371]))
    unknown call_tmp[630083] "expr temp" "maybe param" "maybe type" "temp"
    (630086 'move' call_tmp[630083](84380 call == call_tmp[630078] 0))
    unknown call_tmp[630088] "expr temp" "maybe param" "maybe type" "temp"
    (630091 'move' call_tmp[630088](84424 call _cond_test call_tmp[630083]))
    if call_tmp[630088]
    {
      unknown call_tmp[630093] "expr temp" "maybe param" "maybe type" "temp"
      (630096 'move' call_tmp[630093](84403 call _cast string[26] t[84371]))
      (84422 call compilerError "sync/single types cannot contain type '" call_tmp[630093] "'")
    }
    unknown call_tmp[630098] "expr temp" "maybe param" "maybe type" "temp"
    (630101 'move' call_tmp[630098](84433 call isNonNilableClass t[84371]))
    unknown call_tmp[630103] "expr temp" "maybe param" "maybe type" "temp"
    (630106 'move' call_tmp[630103](84455 call _cond_test call_tmp[630098]))
    if call_tmp[630103]
    {
      (84453 call compilerError "sync/single types cannot contain non-nilable classes")
    }
    unknown call_tmp[630108] "expr temp" "maybe param" "maybe type" "temp"
    (630111 'move' call_tmp[630108](84463 call isGenericType t[84371]))
    unknown call_tmp[630113] "expr temp" "maybe param" "maybe type" "temp"
    (630116 'move' call_tmp[630113](84485 call _cond_test call_tmp[630108]))
    if call_tmp[630113]
    {
      (84483 call compilerError "sync/single types cannot contain generic types")
    }
    (512739 return _void[55])
  }
  unknown useNativeSyncVar[84493] "config" "no doc" "param"
  function getSyncClassType[84501](arg valType[84499]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512743] "RVV" "temp" "type variable"
    unknown tmp[422254] "maybe param" "temp"
    (422265 'move' tmp[422254] useNativeSyncVar[84493])
    unknown call_tmp[630118] "expr temp" "maybe param" "maybe type" "temp"
    (630121 'move' call_tmp[630118](422267 call _cond_invalid tmp[422254]))
    if call_tmp[630118]
    {
      (422270 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560802] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560803] "maybe param" "temp"
    unknown call_tmp[630123] "expr temp" "maybe param" "maybe type" "temp"
    (630126 'move' call_tmp[630123](422255 call isTrue tmp[422254]))
    (560808 'move' tmp[560803](560806 call _cond_test call_tmp[630123]))
    if tmp[560803]
    {
      unknown tmp[560810] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630128] "expr temp" "maybe param" "maybe type" "temp"
      (630131 'move' call_tmp[630128](84507 call supportsNativeSyncVar valType[84499]))
      (560812 'move' tmp[560810](422258 call isTrue call_tmp[630128]))
      (560817 'move' tmp[560802](560814 '_paramFoldLogical' tmp[560803] tmp[560810]))
    }
    {
      (560822 'move' tmp[560802](560819 '_paramFoldLogical' tmp[560803] 0))
    }
    unknown call_tmp[630133] "expr temp" "maybe param" "maybe type" "temp"
    (630136 'move' call_tmp[630133](84526 call _cond_test tmp[560802]))
    if call_tmp[630133]
    {
      unknown call_tmp[630138] "expr temp" "maybe param" "maybe type" "temp"
      (630141 'move' call_tmp[630138](84513 call unmanaged _qthreads_synccls[415466](?) valType[84499]))
      (512748 'move' ret[512743](512747 'deref' call_tmp[630138]))
      gotoReturn _end_getSyncClassType[512741] _end_getSyncClassType[512741]
    }
    {
      unknown call_tmp[630143] "expr temp" "maybe param" "maybe type" "temp"
      (630146 'move' call_tmp[630143](84521 call unmanaged _synccls[415469](?) valType[84499]))
      (512753 'move' ret[512743](512752 'deref' call_tmp[630143]))
      gotoReturn _end_getSyncClassType[512741] _end_getSyncClassType[512741]
    }
    label _end_getSyncClassType[512741]
    (512745 return ret[512743])
  }
  function chpl__readXX[84537](arg x[84535]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[512759] "RVV" "temp"
    (512764 'move' ret[512759](512763 'deref' x[84535]))
    (512761 return ret[512759])
  }
  function _syncvar[84948](?).init[84567](arg _mt[84952]:_MT[238], ref arg this[84950]:_syncvar[84948](?), arg valType[84565]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84572 call ensureFEType valType[84565])
    (476888 'end of statement')
    unknown tmp[459788] "temp" "type variable"
    (459790 'move' tmp[459788] valType[84565])
    (459792 'init field' this[84950] c"valType" tmp[459788])
    (476889 'end of statement')
    unknown call_tmp[630148] "expr temp" "maybe param" "maybe type" "temp"
    (630151 'move' call_tmp[630148](84595 call getSyncClassType valType[84565]))
    unknown call_tmp[630153] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630156 'move' call_tmp[630153](747845 'new' call_tmp[630148]))
    unknown call_tmp[630158] "expr temp" "maybe param" "maybe type" "temp"
    (630161 'move' call_tmp[630158](459807 '.v' this[84950] c"valType"))
    unknown call_tmp[630163] "maybe param" "maybe type" "temp"
    (630166 'move' call_tmp[630163](459799 call getSyncClassType call_tmp[630158]))
    unknown tmp[459796] "temp"
    (459801 'init var' tmp[459796] call_tmp[630153] call_tmp[630163])
    (459803 'init field' this[84950] c"wrapped" tmp[459796])
    (476890 'end of statement')
    unknown tmp[459812] "temp"
    (459815 'init var' tmp[459812] 1 bool[10])
    (459817 'init field' this[84950] c"isOwned" tmp[459812])
    (476891 'end of statement')
    (512766 return _void[55])
  }
  function _syncvar[84948](?).init[84609](arg _mt[84956]:_MT[238], ref arg this[84954]:_syncvar[84948](?), const arg other[84606]:_syncvar[84948](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[459821] "temp" "type variable"
    (459823 'move' tmp[459821](84616 call valType _mt[243] other[84606]))
    (459825 'init field' this[84954] c"valType" tmp[459821])
    (476892 'end of statement')
    unknown call_tmp[630172] "maybe param" "maybe type" "temp"
    (630175 'move' call_tmp[630172](84628 call wrapped _mt[243] other[84606]))
    unknown call_tmp[630177] "expr temp" "maybe param" "maybe type" "temp"
    (630180 'move' call_tmp[630177](459840 '.v' this[84954] c"valType"))
    unknown call_tmp[630182] "maybe param" "maybe type" "temp"
    (630185 'move' call_tmp[630182](459832 call getSyncClassType call_tmp[630177]))
    unknown tmp[459829] "temp"
    (459834 'init var' tmp[459829] call_tmp[630172] call_tmp[630182])
    (459836 'init field' this[84954] c"wrapped" tmp[459829])
    (476893 'end of statement')
    unknown tmp[459843] "temp"
    (459846 'init var' tmp[459843] 0 bool[10])
    (459848 'init field' this[84954] c"isOwned" tmp[459843])
    (476894 'end of statement')
    (512768 return _void[55])
  }
  function _syncvar[84948](?).init=[84652](arg _mt[84960]:_MT[238], ref arg this[84958]:_syncvar[84948](?), const arg other[84649]:_syncvar[84948](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630187] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630190 'move' call_tmp[630187](84661 'typeof' this[84958]))
    unknown call_tmp[630194] "expr temp" "maybe param" "maybe type" "temp"
    (630197 'move' call_tmp[630194](84662 call valType _mt[243] call_tmp[630187]))
    unknown call_tmp[630201] "expr temp" "maybe param" "maybe type" "temp"
    (630204 'move' call_tmp[630201](84656 call valType _mt[243] other[84649]))
    unknown call_tmp[630206] "expr temp" "maybe param" "maybe type" "temp"
    (630209 'move' call_tmp[630206](354280 'is_coercible' call_tmp[630194] call_tmp[630201]))
    unknown call_tmp[630211] "expr temp" "maybe param" "maybe type" "temp"
    (630214 'move' call_tmp[630211](84667 call == call_tmp[630206] 0))
    unknown call_tmp[630216] "expr temp" "maybe param" "maybe type" "temp"
    (630219 'move' call_tmp[630216](84797 call _cond_test call_tmp[630211]))
    if call_tmp[630216]
    {
      unknown call_tmp[630221] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630224 'move' call_tmp[630221](84671 'typeof' this[84958]))
      unknown call_tmp[630226] "expr temp" "maybe param" "maybe type" "temp"
      (630229 'move' call_tmp[630226](84673 call _cast string[26] call_tmp[630221]))
      unknown call_tmp[630231] "expr temp" "maybe param" "maybe type" "temp"
      (630234 'move' call_tmp[630231](84675 call + "'" call_tmp[630226]))
      unknown call_tmp[630236] "expr temp" "maybe param" "maybe type" "temp"
      (630239 'move' call_tmp[630236](84694 call + call_tmp[630231] "' from '"))
      unknown call_tmp[630241] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630244 'move' call_tmp[630241](84697 'typeof' other[84649]))
      unknown call_tmp[630246] "expr temp" "maybe param" "maybe type" "temp"
      (630249 'move' call_tmp[630246](84699 call _cast string[26] call_tmp[630241]))
      unknown call_tmp[630251] "expr temp" "maybe param" "maybe type" "temp"
      (630254 'move' call_tmp[630251](84701 call + call_tmp[630236] call_tmp[630246]))
      unknown call_tmp[630256] "maybe param" "maybe type" "temp"
      (630259 'move' call_tmp[630256](84704 call + call_tmp[630251] "'"))
      unknown theseTypes[84706] "dead at end of block" "param"
      (541571 'init var' theseTypes[84706] call_tmp[630256])
      (84709 'end of statement')
      unknown call_tmp[630263] "expr temp" "maybe param" "maybe type" "temp"
      (630266 'move' call_tmp[630263](84729 call valType _mt[243] other[84649]))
      unknown call_tmp[630268] "expr temp" "maybe param" "maybe type" "temp"
      (630271 'move' call_tmp[630268](84733 call _cast string[26] call_tmp[630263]))
      unknown call_tmp[630273] "expr temp" "maybe param" "maybe type" "temp"
      (630276 'move' call_tmp[630273](84735 call + "because '" call_tmp[630268]))
      unknown call_tmp[630278] "expr temp" "maybe param" "maybe type" "temp"
      (630281 'move' call_tmp[630278](84754 call + call_tmp[630273] "' is not coercible to '"))
      unknown call_tmp[630283] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630286 'move' call_tmp[630283](84757 'typeof' this[84958]))
      unknown call_tmp[630290] "expr temp" "maybe param" "maybe type" "temp"
      (630293 'move' call_tmp[630290](84758 call valType _mt[243] call_tmp[630283]))
      unknown call_tmp[630295] "expr temp" "maybe param" "maybe type" "temp"
      (630298 'move' call_tmp[630295](84762 call _cast string[26] call_tmp[630290]))
      unknown call_tmp[630300] "expr temp" "maybe param" "maybe type" "temp"
      (630303 'move' call_tmp[630300](84764 call + call_tmp[630278] call_tmp[630295]))
      unknown call_tmp[630305] "maybe param" "maybe type" "temp"
      (630308 'move' call_tmp[630305](84767 call + call_tmp[630300] "'"))
      unknown because[84769] "dead at end of block" "param"
      (541573 'init var' because[84769] call_tmp[630305])
      (84772 'end of statement')
      (84795 call compilerError "cannot initialize " theseTypes[84706] " " because[84769])
    }
    unknown call_tmp[630312] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630315 'move' call_tmp[630312](84807 'typeof' this[84958]))
    unknown call_tmp[630319] "expr temp" "maybe param" "maybe type" "temp"
    (630322 'move' call_tmp[630319](84808 call valType _mt[243] call_tmp[630312]))
    (84812 call(84803 call (partial) init _mt[243] this[84958]) call_tmp[630319])
    (476896 'end of statement')
    unknown call_tmp[630328] "expr temp" "maybe param" "maybe type" "temp"
    (630331 'move' call_tmp[630328](84825 call(84821 call (partial) readFE _mt[243] other[84649])))
    (84827 call(84817 call (partial) writeEF _mt[243] this[84958]) call_tmp[630328])
    (512770 return _void[55])
  }
  function _syncvar[84948](?).init=[84840](arg _mt[84964]:_MT[238], ref arg this[84962]:_syncvar[84948](?), const arg other[84837] :
  (84834 call valType _mt[243] this[84962])) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630337] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630340 'move' call_tmp[630337](84847 'typeof' other[84837]))
    (84849 call(84843 call (partial) init _mt[243] this[84962]) call_tmp[630337])
    (476898 'end of statement')
    (84858 call(84853 call (partial) writeEF _mt[243] this[84962]) other[84837])
    (512772 return _void[55])
  }
  function _syncvar[84948](?).deinit[84864](arg _mt[84968]:_MT[238], arg this[84966]:_syncvar[84948](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630346] "expr temp" "maybe param" "maybe type" "temp"
    (630349 'move' call_tmp[630346](376967 call isOwned _mt[243] this[84966]))
    unknown call_tmp[630351] "expr temp" "maybe param" "maybe type" "temp"
    (630354 'move' call_tmp[630351](84868 call == call_tmp[630346] 1))
    unknown call_tmp[630356] "expr temp" "maybe param" "maybe type" "temp"
    (630359 'move' call_tmp[630356](84875 call _cond_test call_tmp[630351]))
    if call_tmp[630356]
    {
      unknown call_tmp[630363] "expr temp" "maybe param" "maybe type" "temp"
      (630366 'move' call_tmp[630363](376972 call wrapped _mt[243] this[84966]))
      (84872 call chpl__delete call_tmp[630363])
    }
    (512774 return _void[55])
  }
  function _syncvar[84948](?).readThis[84887](arg _mt[84972]:_MT[238], arg this[84970]:_syncvar[84948](?), arg x[84885]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84910 call compilerError "sync variables cannot currently be read - use writeEF/writeFF instead")
    (512776 return _void[55])
  }
  function _syncvar[84948](?).writeThis[84919](arg _mt[84976]:_MT[238], arg this[84974]:_syncvar[84948](?), arg x[84917]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84942 call compilerError "sync variables cannot currently be written - apply readFE/readFF() to those variables first")
    (512778 return _void[55])
  }
  function _syncvar[84948](?).valType[775719](arg _mt[775721]:_MT[238], arg this[775723]:_syncvar[84948](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775742] "RVV" "temp" "type variable"
    unknown call_tmp[775756] "expr temp" "maybe param" "maybe type" "temp"
    (775759 'move' call_tmp[775756](775728 'is bound' this[775723] c"valType"))
    if call_tmp[775756]
    {
      unknown call_tmp[775761] "expr temp" "maybe param" "maybe type" "temp"
      (775764 'move' call_tmp[775761](775727 '.v' this[775723] c"valType"))
      (775747 'move' ret[775742](775746 'deref' call_tmp[775761]))
      gotoReturn _end_valType[775740] _end_valType[775740]
    }
    {
      (775752 'move' ret[775742](775751 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775740] _end_valType[775740]
    }
    label _end_valType[775740]
    (775744 return ret[775742])
  }
  function _syncvar[84948](?).valType[775766](arg _mt[775768]:_MT[238], arg this[775770]:_syncvar[84948](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775789] "RVV" "temp" "type variable"
    unknown call_tmp[775803] "expr temp" "maybe param" "maybe type" "temp"
    (775806 'move' call_tmp[775803](775775 'is bound' this[775770] c"valType"))
    if call_tmp[775803]
    {
      unknown call_tmp[775808] "expr temp" "maybe param" "maybe type" "temp"
      (775811 'move' call_tmp[775808](775774 '.v' this[775770] c"valType"))
      (775794 'move' ret[775789](775793 'deref' call_tmp[775808]))
      gotoReturn _end_valType[775787] _end_valType[775787]
    }
    {
      (775799 'move' ret[775789](775798 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775787] _end_valType[775787]
    }
    label _end_valType[775787]
    (775791 return ret[775789])
  }
  function _syncvar[84948](?).wrapped[775813](arg _mt[775815]:_MT[238], ref arg this[775817]:_syncvar[84948](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775827] "RVV" "temp"
    unknown call_tmp[775834] "expr temp" "maybe param" "maybe type" "temp"
    (775837 'move' call_tmp[775834](775821 '.' this[775817] c"wrapped"))
    (775832 'move' ret[775827](775831 'addr of' call_tmp[775834]))
    (775829 return ret[775827])
  }
  function _syncvar[84948](?).isOwned[775839](arg _mt[775841]:_MT[238], ref arg this[775843]:_syncvar[84948](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775853] "RVV" "temp"
    unknown call_tmp[775860] "expr temp" "maybe param" "maybe type" "temp"
    (775863 'move' call_tmp[775860](775847 '.' this[775843] c"isOwned"))
    (775858 'move' ret[775853](775857 'addr of' call_tmp[775860]))
    (775855 return ret[775853])
  }
  function chpl_fields_are_comparable[775877](arg _arg1[775879]:_syncvar[84948](?), arg _arg2[775880]:_syncvar[84948](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[775909]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[775916] "expr temp" "maybe param" "maybe type" "temp"
    (775919 'move' call_tmp[775916](775883 call wrapped _mt[243] _arg1[775879]))
    unknown call_tmp[775921] "expr temp" "maybe param" "maybe type" "temp"
    (775924 'move' call_tmp[775921](775887 call wrapped _mt[243] _arg2[775880]))
    unknown call_tmp[775926] "expr temp" "maybe param" "maybe type" "temp"
    (775929 'move' call_tmp[775926](775891 'call resolves' c"==" call_tmp[775916] call_tmp[775921]))
    unknown call_tmp[775931] "expr temp" "maybe param" "maybe type" "temp"
    (775934 'move' call_tmp[775931](775893 call isOwned _mt[243] _arg1[775879]))
    unknown call_tmp[775936] "expr temp" "maybe param" "maybe type" "temp"
    (775939 'move' call_tmp[775936](775897 call isOwned _mt[243] _arg2[775880]))
    unknown call_tmp[775941] "expr temp" "maybe param" "maybe type" "temp"
    (775944 'move' call_tmp[775941](775901 'call resolves' c"==" call_tmp[775931] call_tmp[775936]))
    unknown call_tmp[775946] "expr temp" "maybe param" "maybe type" "temp"
    (775949 'move' call_tmp[775946](775903 '&' call_tmp[775926] call_tmp[775941]))
    (775914 'move' ret[775909](775913 'deref' call_tmp[775946]))
    (775911 return ret[775909])
  }
  function ==[775865](arg _arg1[775867]:_syncvar[84948](?), arg _arg2[775868]:_syncvar[84948](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[775993]:bool[10] "RVV" "temp"
    unknown call_tmp[776010] "expr temp" "maybe param" "maybe type" "temp"
    (776013 'move' call_tmp[776010](775957 call wrapped _mt[243] _arg1[775867]))
    unknown call_tmp[776015] "expr temp" "maybe param" "maybe type" "temp"
    (776018 'move' call_tmp[776015](775961 call wrapped _mt[243] _arg2[775868]))
    unknown call_tmp[776020] "expr temp" "maybe param" "maybe type" "temp"
    (776023 'move' call_tmp[776020](775965 call != call_tmp[776010] call_tmp[776015]))
    if call_tmp[776020]
    {
      (775998 'move' ret[775993](775997 'deref' 0))
      gotoReturn _end_==[775991] _end_==[775991]
    }
    unknown call_tmp[776025] "expr temp" "maybe param" "maybe type" "temp"
    (776028 'move' call_tmp[776025](775971 call isOwned _mt[243] _arg1[775867]))
    unknown call_tmp[776030] "expr temp" "maybe param" "maybe type" "temp"
    (776033 'move' call_tmp[776030](775975 call isOwned _mt[243] _arg2[775868]))
    unknown call_tmp[776035] "expr temp" "maybe param" "maybe type" "temp"
    (776038 'move' call_tmp[776035](775979 call != call_tmp[776025] call_tmp[776030]))
    if call_tmp[776035]
    {
      (776003 'move' ret[775993](776002 'deref' 0))
      gotoReturn _end_==[775991] _end_==[775991]
    }
    (776008 'move' ret[775993](776007 'deref' 1))
    label _end_==[775991]
    (775995 return ret[775993])
  }
  where {
    unknown call_tmp[776040] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776043 'move' call_tmp[776040](775871 'typeof' _arg1[775867]))
    unknown call_tmp[776045] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776048 'move' call_tmp[776045](775873 'typeof' _arg2[775868]))
    unknown call_tmp[776050] "expr temp" "maybe param" "maybe type" "temp"
    (776053 'move' call_tmp[776050](775875 call == call_tmp[776040] call_tmp[776045]))
    unknown call_tmp[776055] "expr temp" "maybe param" "maybe type" "temp"
    (776058 'move' call_tmp[776055](775951 call chpl_fields_are_comparable[775877] _arg1[775867] _arg2[775868]))
    (775955 '&' call_tmp[776050] call_tmp[776055])
  }
  function chpl_fields_are_comparable[776072](arg _arg1[776074]:_syncvar[84948](?), arg _arg2[776075]:_syncvar[84948](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776104]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776111] "expr temp" "maybe param" "maybe type" "temp"
    (776114 'move' call_tmp[776111](776078 call wrapped _mt[243] _arg1[776074]))
    unknown call_tmp[776116] "expr temp" "maybe param" "maybe type" "temp"
    (776119 'move' call_tmp[776116](776082 call wrapped _mt[243] _arg2[776075]))
    unknown call_tmp[776121] "expr temp" "maybe param" "maybe type" "temp"
    (776124 'move' call_tmp[776121](776086 'call resolves' c"!=" call_tmp[776111] call_tmp[776116]))
    unknown call_tmp[776126] "expr temp" "maybe param" "maybe type" "temp"
    (776129 'move' call_tmp[776126](776088 call isOwned _mt[243] _arg1[776074]))
    unknown call_tmp[776131] "expr temp" "maybe param" "maybe type" "temp"
    (776134 'move' call_tmp[776131](776092 call isOwned _mt[243] _arg2[776075]))
    unknown call_tmp[776136] "expr temp" "maybe param" "maybe type" "temp"
    (776139 'move' call_tmp[776136](776096 'call resolves' c"!=" call_tmp[776126] call_tmp[776131]))
    unknown call_tmp[776141] "expr temp" "maybe param" "maybe type" "temp"
    (776144 'move' call_tmp[776141](776098 '&' call_tmp[776121] call_tmp[776136]))
    (776109 'move' ret[776104](776108 'deref' call_tmp[776141]))
    (776106 return ret[776104])
  }
  function !=[776060](arg _arg1[776062]:_syncvar[84948](?), arg _arg2[776063]:_syncvar[84948](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776188]:bool[10] "RVV" "temp"
    unknown call_tmp[776205] "expr temp" "maybe param" "maybe type" "temp"
    (776208 'move' call_tmp[776205](776152 call wrapped _mt[243] _arg1[776062]))
    unknown call_tmp[776210] "expr temp" "maybe param" "maybe type" "temp"
    (776213 'move' call_tmp[776210](776156 call wrapped _mt[243] _arg2[776063]))
    unknown call_tmp[776215] "expr temp" "maybe param" "maybe type" "temp"
    (776218 'move' call_tmp[776215](776160 call != call_tmp[776205] call_tmp[776210]))
    if call_tmp[776215]
    {
      (776193 'move' ret[776188](776192 'deref' 1))
      gotoReturn _end_!=[776186] _end_!=[776186]
    }
    unknown call_tmp[776220] "expr temp" "maybe param" "maybe type" "temp"
    (776223 'move' call_tmp[776220](776166 call isOwned _mt[243] _arg1[776062]))
    unknown call_tmp[776225] "expr temp" "maybe param" "maybe type" "temp"
    (776228 'move' call_tmp[776225](776170 call isOwned _mt[243] _arg2[776063]))
    unknown call_tmp[776230] "expr temp" "maybe param" "maybe type" "temp"
    (776233 'move' call_tmp[776230](776174 call != call_tmp[776220] call_tmp[776225]))
    if call_tmp[776230]
    {
      (776198 'move' ret[776188](776197 'deref' 1))
      gotoReturn _end_!=[776186] _end_!=[776186]
    }
    (776203 'move' ret[776188](776202 'deref' 0))
    label _end_!=[776186]
    (776190 return ret[776188])
  }
  where {
    unknown call_tmp[776235] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776238 'move' call_tmp[776235](776066 'typeof' _arg1[776062]))
    unknown call_tmp[776240] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776243 'move' call_tmp[776240](776068 'typeof' _arg2[776063]))
    unknown call_tmp[776245] "expr temp" "maybe param" "maybe type" "temp"
    (776248 'move' call_tmp[776245](776070 call == call_tmp[776235] call_tmp[776240]))
    unknown call_tmp[776250] "expr temp" "maybe param" "maybe type" "temp"
    (776253 'move' call_tmp[776250](776146 call chpl_fields_are_comparable[776072] _arg1[776062] _arg2[776063]))
    (776150 '&' call_tmp[776245] call_tmp[776250])
  }
  function chpl_fields_are_comparable[776267](arg _arg1[776269]:_syncvar[84948](?), arg _arg2[776270]:_syncvar[84948](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776299]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776306] "expr temp" "maybe param" "maybe type" "temp"
    (776309 'move' call_tmp[776306](776273 call wrapped _mt[243] _arg1[776269]))
    unknown call_tmp[776311] "expr temp" "maybe param" "maybe type" "temp"
    (776314 'move' call_tmp[776311](776277 call wrapped _mt[243] _arg2[776270]))
    unknown call_tmp[776316] "expr temp" "maybe param" "maybe type" "temp"
    (776319 'move' call_tmp[776316](776281 'call resolves' c"<" call_tmp[776306] call_tmp[776311]))
    unknown call_tmp[776321] "expr temp" "maybe param" "maybe type" "temp"
    (776324 'move' call_tmp[776321](776283 call isOwned _mt[243] _arg1[776269]))
    unknown call_tmp[776326] "expr temp" "maybe param" "maybe type" "temp"
    (776329 'move' call_tmp[776326](776287 call isOwned _mt[243] _arg2[776270]))
    unknown call_tmp[776331] "expr temp" "maybe param" "maybe type" "temp"
    (776334 'move' call_tmp[776331](776291 'call resolves' c"<" call_tmp[776321] call_tmp[776326]))
    unknown call_tmp[776336] "expr temp" "maybe param" "maybe type" "temp"
    (776339 'move' call_tmp[776336](776293 '&' call_tmp[776316] call_tmp[776331]))
    (776304 'move' ret[776299](776303 'deref' call_tmp[776336]))
    (776301 return ret[776299])
  }
  function <[776255](arg _arg1[776257]:_syncvar[84948](?), arg _arg2[776258]:_syncvar[84948](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776413]:bool[10] "RVV" "temp"
    unknown call_tmp[776440] "expr temp" "maybe param" "maybe type" "temp"
    (776443 'move' call_tmp[776440](776347 call wrapped _mt[243] _arg1[776257]))
    unknown call_tmp[776445] "expr temp" "maybe param" "maybe type" "temp"
    (776448 'move' call_tmp[776445](776351 call wrapped _mt[243] _arg2[776258]))
    unknown call_tmp[776450] "expr temp" "maybe param" "maybe type" "temp"
    (776453 'move' call_tmp[776450](776355 call < call_tmp[776440] call_tmp[776445]))
    if call_tmp[776450]
    {
      (776418 'move' ret[776413](776417 'deref' 1))
      gotoReturn _end_<[776411] _end_<[776411]
    }
    unknown call_tmp[776455] "expr temp" "maybe param" "maybe type" "temp"
    (776458 'move' call_tmp[776455](776361 call wrapped _mt[243] _arg1[776257]))
    unknown call_tmp[776460] "expr temp" "maybe param" "maybe type" "temp"
    (776463 'move' call_tmp[776460](776365 call wrapped _mt[243] _arg2[776258]))
    unknown call_tmp[776465] "expr temp" "maybe param" "maybe type" "temp"
    (776468 'move' call_tmp[776465](776369 call > call_tmp[776455] call_tmp[776460]))
    if call_tmp[776465]
    {
      (776423 'move' ret[776413](776422 'deref' 0))
      gotoReturn _end_<[776411] _end_<[776411]
    }
    unknown call_tmp[776470] "expr temp" "maybe param" "maybe type" "temp"
    (776473 'move' call_tmp[776470](776375 call isOwned _mt[243] _arg1[776257]))
    unknown call_tmp[776475] "expr temp" "maybe param" "maybe type" "temp"
    (776478 'move' call_tmp[776475](776379 call isOwned _mt[243] _arg2[776258]))
    unknown call_tmp[776480] "expr temp" "maybe param" "maybe type" "temp"
    (776483 'move' call_tmp[776480](776383 call < call_tmp[776470] call_tmp[776475]))
    if call_tmp[776480]
    {
      (776428 'move' ret[776413](776427 'deref' 1))
      gotoReturn _end_<[776411] _end_<[776411]
    }
    unknown call_tmp[776485] "expr temp" "maybe param" "maybe type" "temp"
    (776488 'move' call_tmp[776485](776389 call isOwned _mt[243] _arg1[776257]))
    unknown call_tmp[776490] "expr temp" "maybe param" "maybe type" "temp"
    (776493 'move' call_tmp[776490](776393 call isOwned _mt[243] _arg2[776258]))
    unknown call_tmp[776495] "expr temp" "maybe param" "maybe type" "temp"
    (776498 'move' call_tmp[776495](776397 call > call_tmp[776485] call_tmp[776490]))
    if call_tmp[776495]
    {
      (776433 'move' ret[776413](776432 'deref' 0))
      gotoReturn _end_<[776411] _end_<[776411]
    }
    (776438 'move' ret[776413](776437 'deref' 0))
    label _end_<[776411]
    (776415 return ret[776413])
  }
  where {
    unknown call_tmp[776500] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776503 'move' call_tmp[776500](776261 'typeof' _arg1[776257]))
    unknown call_tmp[776505] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776508 'move' call_tmp[776505](776263 'typeof' _arg2[776258]))
    unknown call_tmp[776510] "expr temp" "maybe param" "maybe type" "temp"
    (776513 'move' call_tmp[776510](776265 call == call_tmp[776500] call_tmp[776505]))
    unknown call_tmp[776515] "expr temp" "maybe param" "maybe type" "temp"
    (776518 'move' call_tmp[776515](776341 call chpl_fields_are_comparable[776267] _arg1[776257] _arg2[776258]))
    (776345 '&' call_tmp[776510] call_tmp[776515])
  }
  function chpl_fields_are_comparable[776532](arg _arg1[776534]:_syncvar[84948](?), arg _arg2[776535]:_syncvar[84948](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776564]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776571] "expr temp" "maybe param" "maybe type" "temp"
    (776574 'move' call_tmp[776571](776538 call wrapped _mt[243] _arg1[776534]))
    unknown call_tmp[776576] "expr temp" "maybe param" "maybe type" "temp"
    (776579 'move' call_tmp[776576](776542 call wrapped _mt[243] _arg2[776535]))
    unknown call_tmp[776581] "expr temp" "maybe param" "maybe type" "temp"
    (776584 'move' call_tmp[776581](776546 'call resolves' c"<=" call_tmp[776571] call_tmp[776576]))
    unknown call_tmp[776586] "expr temp" "maybe param" "maybe type" "temp"
    (776589 'move' call_tmp[776586](776548 call isOwned _mt[243] _arg1[776534]))
    unknown call_tmp[776591] "expr temp" "maybe param" "maybe type" "temp"
    (776594 'move' call_tmp[776591](776552 call isOwned _mt[243] _arg2[776535]))
    unknown call_tmp[776596] "expr temp" "maybe param" "maybe type" "temp"
    (776599 'move' call_tmp[776596](776556 'call resolves' c"<=" call_tmp[776586] call_tmp[776591]))
    unknown call_tmp[776601] "expr temp" "maybe param" "maybe type" "temp"
    (776604 'move' call_tmp[776601](776558 '&' call_tmp[776581] call_tmp[776596]))
    (776569 'move' ret[776564](776568 'deref' call_tmp[776601]))
    (776566 return ret[776564])
  }
  function <=[776520](arg _arg1[776522]:_syncvar[84948](?), arg _arg2[776523]:_syncvar[84948](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776678]:bool[10] "RVV" "temp"
    unknown call_tmp[776705] "expr temp" "maybe param" "maybe type" "temp"
    (776708 'move' call_tmp[776705](776612 call wrapped _mt[243] _arg1[776522]))
    unknown call_tmp[776710] "expr temp" "maybe param" "maybe type" "temp"
    (776713 'move' call_tmp[776710](776616 call wrapped _mt[243] _arg2[776523]))
    unknown call_tmp[776715] "expr temp" "maybe param" "maybe type" "temp"
    (776718 'move' call_tmp[776715](776620 call < call_tmp[776705] call_tmp[776710]))
    if call_tmp[776715]
    {
      (776683 'move' ret[776678](776682 'deref' 1))
      gotoReturn _end_<=[776676] _end_<=[776676]
    }
    unknown call_tmp[776720] "expr temp" "maybe param" "maybe type" "temp"
    (776723 'move' call_tmp[776720](776626 call wrapped _mt[243] _arg1[776522]))
    unknown call_tmp[776725] "expr temp" "maybe param" "maybe type" "temp"
    (776728 'move' call_tmp[776725](776630 call wrapped _mt[243] _arg2[776523]))
    unknown call_tmp[776730] "expr temp" "maybe param" "maybe type" "temp"
    (776733 'move' call_tmp[776730](776634 call > call_tmp[776720] call_tmp[776725]))
    if call_tmp[776730]
    {
      (776688 'move' ret[776678](776687 'deref' 0))
      gotoReturn _end_<=[776676] _end_<=[776676]
    }
    unknown call_tmp[776735] "expr temp" "maybe param" "maybe type" "temp"
    (776738 'move' call_tmp[776735](776640 call isOwned _mt[243] _arg1[776522]))
    unknown call_tmp[776740] "expr temp" "maybe param" "maybe type" "temp"
    (776743 'move' call_tmp[776740](776644 call isOwned _mt[243] _arg2[776523]))
    unknown call_tmp[776745] "expr temp" "maybe param" "maybe type" "temp"
    (776748 'move' call_tmp[776745](776648 call < call_tmp[776735] call_tmp[776740]))
    if call_tmp[776745]
    {
      (776693 'move' ret[776678](776692 'deref' 1))
      gotoReturn _end_<=[776676] _end_<=[776676]
    }
    unknown call_tmp[776750] "expr temp" "maybe param" "maybe type" "temp"
    (776753 'move' call_tmp[776750](776654 call isOwned _mt[243] _arg1[776522]))
    unknown call_tmp[776755] "expr temp" "maybe param" "maybe type" "temp"
    (776758 'move' call_tmp[776755](776658 call isOwned _mt[243] _arg2[776523]))
    unknown call_tmp[776760] "expr temp" "maybe param" "maybe type" "temp"
    (776763 'move' call_tmp[776760](776662 call > call_tmp[776750] call_tmp[776755]))
    if call_tmp[776760]
    {
      (776698 'move' ret[776678](776697 'deref' 0))
      gotoReturn _end_<=[776676] _end_<=[776676]
    }
    (776703 'move' ret[776678](776702 'deref' 1))
    label _end_<=[776676]
    (776680 return ret[776678])
  }
  where {
    unknown call_tmp[776765] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776768 'move' call_tmp[776765](776526 'typeof' _arg1[776522]))
    unknown call_tmp[776770] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776773 'move' call_tmp[776770](776528 'typeof' _arg2[776523]))
    unknown call_tmp[776775] "expr temp" "maybe param" "maybe type" "temp"
    (776778 'move' call_tmp[776775](776530 call == call_tmp[776765] call_tmp[776770]))
    unknown call_tmp[776780] "expr temp" "maybe param" "maybe type" "temp"
    (776783 'move' call_tmp[776780](776606 call chpl_fields_are_comparable[776532] _arg1[776522] _arg2[776523]))
    (776610 '&' call_tmp[776775] call_tmp[776780])
  }
  function chpl_fields_are_comparable[776797](arg _arg1[776799]:_syncvar[84948](?), arg _arg2[776800]:_syncvar[84948](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776829]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776836] "expr temp" "maybe param" "maybe type" "temp"
    (776839 'move' call_tmp[776836](776803 call wrapped _mt[243] _arg1[776799]))
    unknown call_tmp[776841] "expr temp" "maybe param" "maybe type" "temp"
    (776844 'move' call_tmp[776841](776807 call wrapped _mt[243] _arg2[776800]))
    unknown call_tmp[776846] "expr temp" "maybe param" "maybe type" "temp"
    (776849 'move' call_tmp[776846](776811 'call resolves' c">" call_tmp[776836] call_tmp[776841]))
    unknown call_tmp[776851] "expr temp" "maybe param" "maybe type" "temp"
    (776854 'move' call_tmp[776851](776813 call isOwned _mt[243] _arg1[776799]))
    unknown call_tmp[776856] "expr temp" "maybe param" "maybe type" "temp"
    (776859 'move' call_tmp[776856](776817 call isOwned _mt[243] _arg2[776800]))
    unknown call_tmp[776861] "expr temp" "maybe param" "maybe type" "temp"
    (776864 'move' call_tmp[776861](776821 'call resolves' c">" call_tmp[776851] call_tmp[776856]))
    unknown call_tmp[776866] "expr temp" "maybe param" "maybe type" "temp"
    (776869 'move' call_tmp[776866](776823 '&' call_tmp[776846] call_tmp[776861]))
    (776834 'move' ret[776829](776833 'deref' call_tmp[776866]))
    (776831 return ret[776829])
  }
  function >[776785](arg _arg1[776787]:_syncvar[84948](?), arg _arg2[776788]:_syncvar[84948](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776943]:bool[10] "RVV" "temp"
    unknown call_tmp[776970] "expr temp" "maybe param" "maybe type" "temp"
    (776973 'move' call_tmp[776970](776877 call wrapped _mt[243] _arg1[776787]))
    unknown call_tmp[776975] "expr temp" "maybe param" "maybe type" "temp"
    (776978 'move' call_tmp[776975](776881 call wrapped _mt[243] _arg2[776788]))
    unknown call_tmp[776980] "expr temp" "maybe param" "maybe type" "temp"
    (776983 'move' call_tmp[776980](776885 call > call_tmp[776970] call_tmp[776975]))
    if call_tmp[776980]
    {
      (776948 'move' ret[776943](776947 'deref' 1))
      gotoReturn _end_>[776941] _end_>[776941]
    }
    unknown call_tmp[776985] "expr temp" "maybe param" "maybe type" "temp"
    (776988 'move' call_tmp[776985](776891 call wrapped _mt[243] _arg1[776787]))
    unknown call_tmp[776990] "expr temp" "maybe param" "maybe type" "temp"
    (776993 'move' call_tmp[776990](776895 call wrapped _mt[243] _arg2[776788]))
    unknown call_tmp[776995] "expr temp" "maybe param" "maybe type" "temp"
    (776998 'move' call_tmp[776995](776899 call < call_tmp[776985] call_tmp[776990]))
    if call_tmp[776995]
    {
      (776953 'move' ret[776943](776952 'deref' 0))
      gotoReturn _end_>[776941] _end_>[776941]
    }
    unknown call_tmp[777000] "expr temp" "maybe param" "maybe type" "temp"
    (777003 'move' call_tmp[777000](776905 call isOwned _mt[243] _arg1[776787]))
    unknown call_tmp[777005] "expr temp" "maybe param" "maybe type" "temp"
    (777008 'move' call_tmp[777005](776909 call isOwned _mt[243] _arg2[776788]))
    unknown call_tmp[777010] "expr temp" "maybe param" "maybe type" "temp"
    (777013 'move' call_tmp[777010](776913 call > call_tmp[777000] call_tmp[777005]))
    if call_tmp[777010]
    {
      (776958 'move' ret[776943](776957 'deref' 1))
      gotoReturn _end_>[776941] _end_>[776941]
    }
    unknown call_tmp[777015] "expr temp" "maybe param" "maybe type" "temp"
    (777018 'move' call_tmp[777015](776919 call isOwned _mt[243] _arg1[776787]))
    unknown call_tmp[777020] "expr temp" "maybe param" "maybe type" "temp"
    (777023 'move' call_tmp[777020](776923 call isOwned _mt[243] _arg2[776788]))
    unknown call_tmp[777025] "expr temp" "maybe param" "maybe type" "temp"
    (777028 'move' call_tmp[777025](776927 call < call_tmp[777015] call_tmp[777020]))
    if call_tmp[777025]
    {
      (776963 'move' ret[776943](776962 'deref' 0))
      gotoReturn _end_>[776941] _end_>[776941]
    }
    (776968 'move' ret[776943](776967 'deref' 0))
    label _end_>[776941]
    (776945 return ret[776943])
  }
  where {
    unknown call_tmp[777030] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777033 'move' call_tmp[777030](776791 'typeof' _arg1[776787]))
    unknown call_tmp[777035] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777038 'move' call_tmp[777035](776793 'typeof' _arg2[776788]))
    unknown call_tmp[777040] "expr temp" "maybe param" "maybe type" "temp"
    (777043 'move' call_tmp[777040](776795 call == call_tmp[777030] call_tmp[777035]))
    unknown call_tmp[777045] "expr temp" "maybe param" "maybe type" "temp"
    (777048 'move' call_tmp[777045](776871 call chpl_fields_are_comparable[776797] _arg1[776787] _arg2[776788]))
    (776875 '&' call_tmp[777040] call_tmp[777045])
  }
  function chpl_fields_are_comparable[777062](arg _arg1[777064]:_syncvar[84948](?), arg _arg2[777065]:_syncvar[84948](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[777094]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[777101] "expr temp" "maybe param" "maybe type" "temp"
    (777104 'move' call_tmp[777101](777068 call wrapped _mt[243] _arg1[777064]))
    unknown call_tmp[777106] "expr temp" "maybe param" "maybe type" "temp"
    (777109 'move' call_tmp[777106](777072 call wrapped _mt[243] _arg2[777065]))
    unknown call_tmp[777111] "expr temp" "maybe param" "maybe type" "temp"
    (777114 'move' call_tmp[777111](777076 'call resolves' c">=" call_tmp[777101] call_tmp[777106]))
    unknown call_tmp[777116] "expr temp" "maybe param" "maybe type" "temp"
    (777119 'move' call_tmp[777116](777078 call isOwned _mt[243] _arg1[777064]))
    unknown call_tmp[777121] "expr temp" "maybe param" "maybe type" "temp"
    (777124 'move' call_tmp[777121](777082 call isOwned _mt[243] _arg2[777065]))
    unknown call_tmp[777126] "expr temp" "maybe param" "maybe type" "temp"
    (777129 'move' call_tmp[777126](777086 'call resolves' c">=" call_tmp[777116] call_tmp[777121]))
    unknown call_tmp[777131] "expr temp" "maybe param" "maybe type" "temp"
    (777134 'move' call_tmp[777131](777088 '&' call_tmp[777111] call_tmp[777126]))
    (777099 'move' ret[777094](777098 'deref' call_tmp[777131]))
    (777096 return ret[777094])
  }
  function >=[777050](arg _arg1[777052]:_syncvar[84948](?), arg _arg2[777053]:_syncvar[84948](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[777208]:bool[10] "RVV" "temp"
    unknown call_tmp[777235] "expr temp" "maybe param" "maybe type" "temp"
    (777238 'move' call_tmp[777235](777142 call wrapped _mt[243] _arg1[777052]))
    unknown call_tmp[777240] "expr temp" "maybe param" "maybe type" "temp"
    (777243 'move' call_tmp[777240](777146 call wrapped _mt[243] _arg2[777053]))
    unknown call_tmp[777245] "expr temp" "maybe param" "maybe type" "temp"
    (777248 'move' call_tmp[777245](777150 call > call_tmp[777235] call_tmp[777240]))
    if call_tmp[777245]
    {
      (777213 'move' ret[777208](777212 'deref' 1))
      gotoReturn _end_>=[777206] _end_>=[777206]
    }
    unknown call_tmp[777250] "expr temp" "maybe param" "maybe type" "temp"
    (777253 'move' call_tmp[777250](777156 call wrapped _mt[243] _arg1[777052]))
    unknown call_tmp[777255] "expr temp" "maybe param" "maybe type" "temp"
    (777258 'move' call_tmp[777255](777160 call wrapped _mt[243] _arg2[777053]))
    unknown call_tmp[777260] "expr temp" "maybe param" "maybe type" "temp"
    (777263 'move' call_tmp[777260](777164 call < call_tmp[777250] call_tmp[777255]))
    if call_tmp[777260]
    {
      (777218 'move' ret[777208](777217 'deref' 0))
      gotoReturn _end_>=[777206] _end_>=[777206]
    }
    unknown call_tmp[777265] "expr temp" "maybe param" "maybe type" "temp"
    (777268 'move' call_tmp[777265](777170 call isOwned _mt[243] _arg1[777052]))
    unknown call_tmp[777270] "expr temp" "maybe param" "maybe type" "temp"
    (777273 'move' call_tmp[777270](777174 call isOwned _mt[243] _arg2[777053]))
    unknown call_tmp[777275] "expr temp" "maybe param" "maybe type" "temp"
    (777278 'move' call_tmp[777275](777178 call > call_tmp[777265] call_tmp[777270]))
    if call_tmp[777275]
    {
      (777223 'move' ret[777208](777222 'deref' 1))
      gotoReturn _end_>=[777206] _end_>=[777206]
    }
    unknown call_tmp[777280] "expr temp" "maybe param" "maybe type" "temp"
    (777283 'move' call_tmp[777280](777184 call isOwned _mt[243] _arg1[777052]))
    unknown call_tmp[777285] "expr temp" "maybe param" "maybe type" "temp"
    (777288 'move' call_tmp[777285](777188 call isOwned _mt[243] _arg2[777053]))
    unknown call_tmp[777290] "expr temp" "maybe param" "maybe type" "temp"
    (777293 'move' call_tmp[777290](777192 call < call_tmp[777280] call_tmp[777285]))
    if call_tmp[777290]
    {
      (777228 'move' ret[777208](777227 'deref' 0))
      gotoReturn _end_>=[777206] _end_>=[777206]
    }
    (777233 'move' ret[777208](777232 'deref' 1))
    label _end_>=[777206]
    (777210 return ret[777208])
  }
  where {
    unknown call_tmp[777295] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777298 'move' call_tmp[777295](777056 'typeof' _arg1[777052]))
    unknown call_tmp[777300] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777303 'move' call_tmp[777300](777058 'typeof' _arg2[777053]))
    unknown call_tmp[777305] "expr temp" "maybe param" "maybe type" "temp"
    (777308 'move' call_tmp[777305](777060 call == call_tmp[777295] call_tmp[777300]))
    unknown call_tmp[777310] "expr temp" "maybe param" "maybe type" "temp"
    (777313 'move' call_tmp[777310](777136 call chpl_fields_are_comparable[777062] _arg1[777052] _arg2[777053]))
    (777140 '&' call_tmp[777305] call_tmp[777310])
  }
  function =[777315](ref arg _arg1[777317]:_syncvar[84948](?), const?  ref arg _arg2[777318]:_syncvar[84948](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[777355] "expr temp" "maybe param" "maybe type" "temp"
    (777358 'move' call_tmp[777355](777328 call wrapped _mt[243] _arg1[777317]))
    unknown call_tmp[777362] "expr temp" "maybe param" "maybe type" "temp"
    (777365 'move' call_tmp[777362](777332 call wrapped _mt[243] _arg2[777318]))
    (777336 call = call_tmp[777355] call_tmp[777362])
    (777349 'end of statement')
    unknown call_tmp[777369] "expr temp" "maybe param" "maybe type" "temp"
    (777372 'move' call_tmp[777369](777338 call isOwned _mt[243] _arg1[777317]))
    unknown call_tmp[777376] "expr temp" "maybe param" "maybe type" "temp"
    (777379 'move' call_tmp[777376](777342 call isOwned _mt[243] _arg2[777318]))
    (777346 call = call_tmp[777369] call_tmp[777376])
    (777351 return _void[55])
  }
  where {
    unknown call_tmp[777381] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777384 'move' call_tmp[777381](777321 'typeof' _arg1[777317]))
    unknown call_tmp[777386] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777389 'move' call_tmp[777386](777323 'typeof' _arg2[777318]))
    (777325 call == call_tmp[777381] call_tmp[777386])
  }
  function chpl__defaultHash[777391](arg r[777393]:_syncvar[84948](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[777424] "RVV" "temp"
    unknown call_tmp[777431] "expr temp" "maybe param" "maybe type" "temp"
    (777434 'move' call_tmp[777431](777410 call isOwned _mt[243] r[777393]))
    unknown call_tmp[777436] "expr temp" "maybe param" "maybe type" "temp"
    (777439 'move' call_tmp[777436](777414 call chpl__defaultHash call_tmp[777431]))
    unknown call_tmp[777441] "expr temp" "maybe param" "maybe type" "temp"
    (777444 'move' call_tmp[777441](777401 call wrapped _mt[243] r[777393]))
    unknown call_tmp[777446] "expr temp" "maybe param" "maybe type" "temp"
    (777449 'move' call_tmp[777446](777405 call chpl__defaultHash call_tmp[777441]))
    unknown call_tmp[777451] "expr temp" "maybe param" "maybe type" "temp"
    (777454 'move' call_tmp[777451](777395 call valType _mt[243] r[777393]))
    unknown call_tmp[777456] "expr temp" "maybe param" "maybe type" "temp"
    (777459 'move' call_tmp[777456](777399 call chpl__defaultHash call_tmp[777451]))
    unknown call_tmp[777461] "expr temp" "maybe param" "maybe type" "temp"
    (777464 'move' call_tmp[777461](777407 call chpl__defaultHashCombine call_tmp[777446] call_tmp[777456] 2))
    unknown call_tmp[777466] "expr temp" "maybe param" "maybe type" "temp"
    (777469 'move' call_tmp[777466](777416 call chpl__defaultHashCombine call_tmp[777436] call_tmp[777461] 3))
    (777429 'move' ret[777424](777428 'deref' call_tmp[777466]))
    (777426 return ret[777424])
  }
  sync type _syncvar[84948](?) unknown valType[84546] "type variable" unknown wrapped[84553](84552 call getSyncClassType valType[84546]) val isOwned[84559]:bool[10] 1 bool[10]
  function isSyncType[84985](arg t[84982]:_syncvar[84948](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512782] "RVV" "param" "temp"
    (512787 'move' ret[512782](512786 'deref' 1))
    (512784 return ret[512782])
  }
  function isSyncType[84997](arg t[84995]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512791] "RVV" "param" "temp"
    (512796 'move' ret[512791](512795 'deref' 0))
    (512793 return ret[512791])
  }
  function _syncvar[84948](?).readFE[85008](arg _mt[85013]:_MT[238], arg this[85010]:_syncvar[84948](?) :
  _syncvar[84948](?)) : _unknown[51] "method"
  {
    unknown ret[512800] "RVV" "temp"
    unknown call_tmp[630370] "expr temp" "maybe param" "maybe type" "temp"
    (630373 'move' call_tmp[630370](358227 call wrapped _mt[243] this[85010]))
    unknown call_tmp[630377] "expr temp" "maybe param" "maybe type" "temp"
    (630380 'move' call_tmp[630377](85020 call(85016 call (partial) readFE _mt[243] call_tmp[630370])))
    (512805 'move' ret[512800](512804 'deref' call_tmp[630377]))
    (512802 return ret[512800])
  }
  function _syncvar[84948](?).readFF[85029](arg _mt[85034]:_MT[238], arg this[85031]:_syncvar[84948](?) :
  _syncvar[84948](?)) : _unknown[51] "method"
  {
    unknown ret[512809] "RVV" "temp"
    unknown call_tmp[630384] "expr temp" "maybe param" "maybe type" "temp"
    (630387 'move' call_tmp[630384](358232 call wrapped _mt[243] this[85031]))
    unknown call_tmp[630391] "expr temp" "maybe param" "maybe type" "temp"
    (630394 'move' call_tmp[630391](85041 call(85037 call (partial) readFF _mt[243] call_tmp[630384])))
    (512814 'move' ret[512809](512813 'deref' call_tmp[630391]))
    (512811 return ret[512809])
  }
  function _syncvar[84948](?).readXX[85050](arg _mt[85055]:_MT[238], arg this[85052]:_syncvar[84948](?) :
  _syncvar[84948](?)) : _unknown[51] "method"
  {
    unknown ret[512818] "RVV" "temp"
    (85059 call chpl_task_yield)
    (476907 'end of statement')
    unknown call_tmp[630398] "expr temp" "maybe param" "maybe type" "temp"
    (630401 'move' call_tmp[630398](358237 call wrapped _mt[243] this[85052]))
    unknown call_tmp[630405] "expr temp" "maybe param" "maybe type" "temp"
    (630408 'move' call_tmp[630405](85069 call(85065 call (partial) readXX _mt[243] call_tmp[630398])))
    (512823 'move' ret[512818](512822 'deref' call_tmp[630405]))
    (512820 return ret[512818])
  }
  function _syncvar[84948](?).writeEF[85081](arg _mt[85086]:_MT[238], arg this[85083]:_syncvar[84948](?) :
  _syncvar[84948](?), arg x[85078] :
  (376978 call valType _mt[243] this[85083])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630414] "expr temp" "maybe param" "maybe type" "temp"
    (630417 'move' call_tmp[630414](358242 call wrapped _mt[243] this[85083]))
    (85094 call(85089 call (partial) writeEF _mt[243] call_tmp[630414]) x[85078])
    (512825 return _void[55])
  }
  function _syncvar[84948](?).writeFF[85106](arg _mt[85111]:_MT[238], arg this[85108]:_syncvar[84948](?) :
  _syncvar[84948](?), arg x[85103] :
  (376984 call valType _mt[243] this[85108])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630425] "expr temp" "maybe param" "maybe type" "temp"
    (630428 'move' call_tmp[630425](358247 call wrapped _mt[243] this[85108]))
    (85121 call(85116 call (partial) writeFF _mt[243] call_tmp[630425]) x[85103])
    (512827 return _void[55])
  }
  function _syncvar[84948](?).writeXF[85133](arg _mt[85138]:_MT[238], arg this[85135]:_syncvar[84948](?) :
  _syncvar[84948](?), arg x[85130] :
  (376990 call valType _mt[243] this[85135])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630436] "expr temp" "maybe param" "maybe type" "temp"
    (630439 'move' call_tmp[630436](358252 call wrapped _mt[243] this[85135]))
    (85148 call(85143 call (partial) writeXF _mt[243] call_tmp[630436]) x[85130])
    (512829 return _void[55])
  }
  function _syncvar[84948](?).reset[85156](arg _mt[85161]:_MT[238], arg this[85158]:_syncvar[84948](?) :
  _syncvar[84948](?)) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630445] "expr temp" "maybe param" "maybe type" "temp"
    (630448 'move' call_tmp[630445](358257 call wrapped _mt[243] this[85158]))
    (85170 call(85166 call (partial) reset _mt[243] call_tmp[630445]))
    (512831 return _void[55])
  }
  function _syncvar[84948](?).isFull[85178](arg _mt[85183]:_MT[238], arg this[85180]:_syncvar[84948](?) :
  _syncvar[84948](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[512835] "RVV" "temp"
    unknown call_tmp[630454] "expr temp" "maybe param" "maybe type" "temp"
    (630457 'move' call_tmp[630454](358262 call wrapped _mt[243] this[85180]))
    unknown call_tmp[630461] "expr temp" "maybe param" "maybe type" "temp"
    (630464 'move' call_tmp[630461](85188 call isFull _mt[243] call_tmp[630454]))
    (512840 'move' ret[512835](512839 'deref' call_tmp[630461]))
    (512837 return ret[512835])
  }
  function =[85206](ref arg lhs[85203]:_syncvar[84948](?), arg rhs[85209] :
  (459858 'query' lhs[85203] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630468] "expr temp" "maybe param" "maybe type" "temp"
    (630471 'move' call_tmp[630468](85213 call wrapped _mt[243] lhs[85203]))
    (85221 call(85216 call (partial) writeEF _mt[243] call_tmp[630468]) rhs[85209])
    (512842 return _void[55])
  }
  function +=[85236](ref arg lhs[85233]:_syncvar[84948](?), arg rhs[85239] :
  (459868 'query' lhs[85233] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630477] "expr temp" "maybe param" "maybe type" "temp"
    (630480 'move' call_tmp[630477](85243 call wrapped _mt[243] lhs[85233]))
    unknown call_tmp[630486] "expr temp" "maybe param" "maybe type" "temp"
    (630489 'move' call_tmp[630486](85250 call wrapped _mt[243] lhs[85233]))
    unknown call_tmp[630493] "expr temp" "maybe param" "maybe type" "temp"
    (630496 'move' call_tmp[630493](85257 call(85253 call (partial) readFE _mt[243] call_tmp[630486])))
    unknown call_tmp[630498] "expr temp" "maybe param" "maybe type" "temp"
    (630501 'move' call_tmp[630498](85259 call + call_tmp[630493] rhs[85239]))
    (85262 call(85246 call (partial) writeEF _mt[243] call_tmp[630477]) call_tmp[630498])
    (512844 return _void[55])
  }
  function -=[85277](ref arg lhs[85274]:_syncvar[84948](?), arg rhs[85280] :
  (459878 'query' lhs[85274] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630505] "expr temp" "maybe param" "maybe type" "temp"
    (630508 'move' call_tmp[630505](85284 call wrapped _mt[243] lhs[85274]))
    unknown call_tmp[630514] "expr temp" "maybe param" "maybe type" "temp"
    (630517 'move' call_tmp[630514](85291 call wrapped _mt[243] lhs[85274]))
    unknown call_tmp[630521] "expr temp" "maybe param" "maybe type" "temp"
    (630524 'move' call_tmp[630521](85298 call(85294 call (partial) readFE _mt[243] call_tmp[630514])))
    unknown call_tmp[630526] "expr temp" "maybe param" "maybe type" "temp"
    (630529 'move' call_tmp[630526](85300 call - call_tmp[630521] rhs[85280]))
    (85303 call(85287 call (partial) writeEF _mt[243] call_tmp[630505]) call_tmp[630526])
    (512846 return _void[55])
  }
  function *=[85318](ref arg lhs[85315]:_syncvar[84948](?), arg rhs[85321] :
  (459888 'query' lhs[85315] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630533] "expr temp" "maybe param" "maybe type" "temp"
    (630536 'move' call_tmp[630533](85325 call wrapped _mt[243] lhs[85315]))
    unknown call_tmp[630542] "expr temp" "maybe param" "maybe type" "temp"
    (630545 'move' call_tmp[630542](85332 call wrapped _mt[243] lhs[85315]))
    unknown call_tmp[630549] "expr temp" "maybe param" "maybe type" "temp"
    (630552 'move' call_tmp[630549](85339 call(85335 call (partial) readFE _mt[243] call_tmp[630542])))
    unknown call_tmp[630554] "expr temp" "maybe param" "maybe type" "temp"
    (630557 'move' call_tmp[630554](85341 call * call_tmp[630549] rhs[85321]))
    (85344 call(85328 call (partial) writeEF _mt[243] call_tmp[630533]) call_tmp[630554])
    (512848 return _void[55])
  }
  function /=[85359](ref arg lhs[85356]:_syncvar[84948](?), arg rhs[85362] :
  (459898 'query' lhs[85356] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630561] "expr temp" "maybe param" "maybe type" "temp"
    (630564 'move' call_tmp[630561](85366 call wrapped _mt[243] lhs[85356]))
    unknown call_tmp[630570] "expr temp" "maybe param" "maybe type" "temp"
    (630573 'move' call_tmp[630570](85373 call wrapped _mt[243] lhs[85356]))
    unknown call_tmp[630577] "expr temp" "maybe param" "maybe type" "temp"
    (630580 'move' call_tmp[630577](85380 call(85376 call (partial) readFE _mt[243] call_tmp[630570])))
    unknown call_tmp[630582] "expr temp" "maybe param" "maybe type" "temp"
    (630585 'move' call_tmp[630582](85382 call / call_tmp[630577] rhs[85362]))
    (85385 call(85369 call (partial) writeEF _mt[243] call_tmp[630561]) call_tmp[630582])
    (512850 return _void[55])
  }
  function %=[85400](ref arg lhs[85397]:_syncvar[84948](?), arg rhs[85403] :
  (459908 'query' lhs[85397] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630589] "expr temp" "maybe param" "maybe type" "temp"
    (630592 'move' call_tmp[630589](85407 call wrapped _mt[243] lhs[85397]))
    unknown call_tmp[630598] "expr temp" "maybe param" "maybe type" "temp"
    (630601 'move' call_tmp[630598](85414 call wrapped _mt[243] lhs[85397]))
    unknown call_tmp[630605] "expr temp" "maybe param" "maybe type" "temp"
    (630608 'move' call_tmp[630605](85421 call(85417 call (partial) readFE _mt[243] call_tmp[630598])))
    unknown call_tmp[630610] "expr temp" "maybe param" "maybe type" "temp"
    (630613 'move' call_tmp[630610](85423 call % call_tmp[630605] rhs[85403]))
    (85426 call(85410 call (partial) writeEF _mt[243] call_tmp[630589]) call_tmp[630610])
    (512852 return _void[55])
  }
  function **=[85441](ref arg lhs[85438]:_syncvar[84948](?), arg rhs[85444] :
  (459918 'query' lhs[85438] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630617] "expr temp" "maybe param" "maybe type" "temp"
    (630620 'move' call_tmp[630617](85448 call wrapped _mt[243] lhs[85438]))
    unknown call_tmp[630626] "expr temp" "maybe param" "maybe type" "temp"
    (630629 'move' call_tmp[630626](85455 call wrapped _mt[243] lhs[85438]))
    unknown call_tmp[630633] "expr temp" "maybe param" "maybe type" "temp"
    (630636 'move' call_tmp[630633](85462 call(85458 call (partial) readFE _mt[243] call_tmp[630626])))
    unknown call_tmp[630638] "expr temp" "maybe param" "maybe type" "temp"
    (630641 'move' call_tmp[630638](85464 call ** call_tmp[630633] rhs[85444]))
    (85467 call(85451 call (partial) writeEF _mt[243] call_tmp[630617]) call_tmp[630638])
    (512854 return _void[55])
  }
  function &=[85482](ref arg lhs[85479]:_syncvar[84948](?), arg rhs[85485] :
  (459928 'query' lhs[85479] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630645] "expr temp" "maybe param" "maybe type" "temp"
    (630648 'move' call_tmp[630645](85489 call wrapped _mt[243] lhs[85479]))
    unknown call_tmp[630654] "expr temp" "maybe param" "maybe type" "temp"
    (630657 'move' call_tmp[630654](85496 call wrapped _mt[243] lhs[85479]))
    unknown call_tmp[630661] "expr temp" "maybe param" "maybe type" "temp"
    (630664 'move' call_tmp[630661](85503 call(85499 call (partial) readFE _mt[243] call_tmp[630654])))
    unknown call_tmp[630666] "expr temp" "maybe param" "maybe type" "temp"
    (630669 'move' call_tmp[630666](85505 call & call_tmp[630661] rhs[85485]))
    (85508 call(85492 call (partial) writeEF _mt[243] call_tmp[630645]) call_tmp[630666])
    (512856 return _void[55])
  }
  function |=[85523](ref arg lhs[85520]:_syncvar[84948](?), arg rhs[85526] :
  (459938 'query' lhs[85520] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630673] "expr temp" "maybe param" "maybe type" "temp"
    (630676 'move' call_tmp[630673](85530 call wrapped _mt[243] lhs[85520]))
    unknown call_tmp[630682] "expr temp" "maybe param" "maybe type" "temp"
    (630685 'move' call_tmp[630682](85537 call wrapped _mt[243] lhs[85520]))
    unknown call_tmp[630689] "expr temp" "maybe param" "maybe type" "temp"
    (630692 'move' call_tmp[630689](85544 call(85540 call (partial) readFE _mt[243] call_tmp[630682])))
    unknown call_tmp[630694] "expr temp" "maybe param" "maybe type" "temp"
    (630697 'move' call_tmp[630694](85546 call | call_tmp[630689] rhs[85526]))
    (85549 call(85533 call (partial) writeEF _mt[243] call_tmp[630673]) call_tmp[630694])
    (512858 return _void[55])
  }
  function ^=[85564](ref arg lhs[85561]:_syncvar[84948](?), arg rhs[85567] :
  (459948 'query' lhs[85561] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630701] "expr temp" "maybe param" "maybe type" "temp"
    (630704 'move' call_tmp[630701](85571 call wrapped _mt[243] lhs[85561]))
    unknown call_tmp[630710] "expr temp" "maybe param" "maybe type" "temp"
    (630713 'move' call_tmp[630710](85578 call wrapped _mt[243] lhs[85561]))
    unknown call_tmp[630717] "expr temp" "maybe param" "maybe type" "temp"
    (630720 'move' call_tmp[630717](85585 call(85581 call (partial) readFE _mt[243] call_tmp[630710])))
    unknown call_tmp[630722] "expr temp" "maybe param" "maybe type" "temp"
    (630725 'move' call_tmp[630722](85587 call ^ call_tmp[630717] rhs[85567]))
    (85590 call(85574 call (partial) writeEF _mt[243] call_tmp[630701]) call_tmp[630722])
    (512860 return _void[55])
  }
  function >>=[85605](ref arg lhs[85602]:_syncvar[84948](?), arg rhs[85608] :
  (459958 'query' lhs[85602] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630729] "expr temp" "maybe param" "maybe type" "temp"
    (630732 'move' call_tmp[630729](85612 call wrapped _mt[243] lhs[85602]))
    unknown call_tmp[630738] "expr temp" "maybe param" "maybe type" "temp"
    (630741 'move' call_tmp[630738](85619 call wrapped _mt[243] lhs[85602]))
    unknown call_tmp[630745] "expr temp" "maybe param" "maybe type" "temp"
    (630748 'move' call_tmp[630745](85626 call(85622 call (partial) readFE _mt[243] call_tmp[630738])))
    unknown call_tmp[630750] "expr temp" "maybe param" "maybe type" "temp"
    (630753 'move' call_tmp[630750](85628 call >> call_tmp[630745] rhs[85608]))
    (85631 call(85615 call (partial) writeEF _mt[243] call_tmp[630729]) call_tmp[630750])
    (512862 return _void[55])
  }
  function <<=[85646](ref arg lhs[85643]:_syncvar[84948](?), arg rhs[85649] :
  (459968 'query' lhs[85643] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630757] "expr temp" "maybe param" "maybe type" "temp"
    (630760 'move' call_tmp[630757](85653 call wrapped _mt[243] lhs[85643]))
    unknown call_tmp[630766] "expr temp" "maybe param" "maybe type" "temp"
    (630769 'move' call_tmp[630766](85660 call wrapped _mt[243] lhs[85643]))
    unknown call_tmp[630773] "expr temp" "maybe param" "maybe type" "temp"
    (630776 'move' call_tmp[630773](85667 call(85663 call (partial) readFE _mt[243] call_tmp[630766])))
    unknown call_tmp[630778] "expr temp" "maybe param" "maybe type" "temp"
    (630781 'move' call_tmp[630778](85669 call << call_tmp[630773] rhs[85649]))
    (85672 call(85656 call (partial) writeEF _mt[243] call_tmp[630757]) call_tmp[630778])
    (512864 return _void[55])
  }
  function chpl__initCopy[85687](ref arg sv[85684]:_syncvar[84948](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[512868] "RVV" "temp"
    unknown call_tmp[630785] "expr temp" "maybe param" "maybe type" "temp"
    (630788 'move' call_tmp[630785](85694 call(85690 call (partial) readFE _mt[243] sv[85684])))
    (512873 'move' ret[512868](512872 'deref' call_tmp[630785]))
    (512870 return ret[512868])
  }
  function chpl__autoCopy[85706](const  ref arg rhs[85703]:_syncvar[84948](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[512877] "RVV" "temp"
    unknown call_tmp[630790] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630793 'move' call_tmp[630790](747846 'new' _syncvar[84948](?) rhs[85703]))
    (512882 'move' ret[512877](512881 'deref' call_tmp[630790]))
    (512879 return ret[512877])
  }
  function chpl__maybeAutoDestroyed[85728](arg x[85725]:_syncvar[84948](?)) param : _unknown[51] "inline"
  {
    unknown ret[512886] "RVV" "param" "temp"
    (512891 'move' ret[512886](512890 'deref' 1))
    (512888 return ret[512886])
  }
  function chpl__autoDestroy[85745](arg x[85742]:_syncvar[84948](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[630797] "expr temp" "maybe param" "maybe type" "temp"
    (630800 'move' call_tmp[630797](85748 call isOwned _mt[243] x[85742]))
    unknown call_tmp[630802] "expr temp" "maybe param" "maybe type" "temp"
    (630805 'move' call_tmp[630802](85752 call == call_tmp[630797] 1))
    unknown call_tmp[630807] "expr temp" "maybe param" "maybe type" "temp"
    (630810 'move' call_tmp[630807](85762 call _cond_test call_tmp[630802]))
    if call_tmp[630807]
    {
      unknown call_tmp[630814] "expr temp" "maybe param" "maybe type" "temp"
      (630817 'move' call_tmp[630814](85755 call wrapped _mt[243] x[85742]))
      (85759 call chpl__delete call_tmp[630814])
    }
    (512893 return _void[55])
  }
  function chpl__readXX[85779](const  ref arg x[85776]:_syncvar[84948](?)) : _unknown[51] "no doc"
  {
    unknown ret[512897] "RVV" "temp"
    unknown call_tmp[630821] "expr temp" "maybe param" "maybe type" "temp"
    (630824 'move' call_tmp[630821](85786 call(85782 call (partial) readXX _mt[243] x[85776])))
    (512902 'move' ret[512897](512901 'deref' call_tmp[630821]))
    (512899 return ret[512897])
  }
  function <=>[85798](arg lhs[85795]:_syncvar[84948](?), ref arg rhs[85800]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85803] "dead at end of block" "const" "insert auto destroy"
    (541575 'init var' tmp[85803] lhs[85795])
    (85806 'end of statement')
    (85810 call = lhs[85795] rhs[85800])
    (476931 'end of statement')
    (85815 call = rhs[85800] tmp[85803])
    (476932 'end of statement' tmp[85803])
    (512904 return _void[55])
  }
  function <=>[85824](ref arg lhs[85822]:_any[178](?), arg rhs[85827]:_syncvar[84948](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85831] "dead at end of block" "const" "insert auto destroy"
    (541577 'init var' tmp[85831] lhs[85822])
    (85834 'end of statement')
    (85838 call = lhs[85822] rhs[85827])
    (476934 'end of statement')
    (85843 call = rhs[85827] tmp[85831])
    (476935 'end of statement' tmp[85831])
    (512906 return _void[55])
  }
  function <=>[85854](arg lhs[85851]:_syncvar[84948](?), arg rhs[85857]:_syncvar[84948](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85861] "dead at end of block" "const" "insert auto destroy"
    (541579 'init var' tmp[85861] lhs[85851])
    (85864 'end of statement')
    (85868 call = lhs[85851] rhs[85857])
    (476937 'end of statement')
    (85873 call = rhs[85857] tmp[85861])
    (476938 'end of statement' tmp[85861])
    (512908 return _void[55])
  }
  function _synccls[86375](?).init[85896](arg _mt[86379]:_MT[238], arg this[86377]:_synccls[86375](?), arg valType[85894]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460051] "temporary of super field" "temp"
    (460059 'move' super_tmp[460051](460052 '.v' this[86377] c"super"))
    (460055 call init _mt[243] super_tmp[460051])
    (476940 'end of statement')
    unknown tmp[460004] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491997] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[630826] "expr temp" "maybe param" "maybe type" "temp"
      (630829 'move' call_tmp[630826](460006 '.v' this[86377] c"super"))
      (492001 'move' call_type_tmp[491997](460009 'typeof' call_tmp[630826]))
    }
    (460010 'move' tmp[460004] call_type_tmp[491997])
    unknown call_tmp[630831] "maybe param" "maybe type" "temp"
    (630834 'move' call_tmp[630831](460015 'cast' tmp[460004] this[86377]))
    unknown chpl__thisAsParent[460012] "dead at end of block" "insert auto destroy" "temp"
    (541581 'init var' chpl__thisAsParent[460012] call_tmp[630831] tmp[460004])
    (460018 'setcid' chpl__thisAsParent[460012])
    (476941 'end of statement')
    unknown tmp[460020] "temp" "type variable"
    (460022 'move' tmp[460020] valType[85894])
    (460024 'init field' this[86377] c"valType" tmp[460020])
    (476942 'end of statement')
    unknown tmp[460028] "temp"
    unknown call_tmp[630836] "expr temp" "maybe param" "maybe type" "temp"
    (630839 'move' call_tmp[630836](460037 '.v' this[86377] c"valType"))
    (460031 'default init var' tmp[460028] call_tmp[630836])
    (460033 '.=' this[86377] c"value" tmp[460028])
    (476943 'end of statement')
    val tmp[460040]:chpl_sync_aux_t[87956] "temp"
    (460043 'default init var' tmp[460040] chpl_sync_aux_t[87956])
    (460045 '.=' this[86377] c"syncAux" tmp[460040])
    (476944 'end of statement')
    (460050 'setcid' this[86377])
    (476945 'end of statement')
    unknown call_tmp[630843] "expr temp" "maybe param" "maybe type" "temp"
    (630846 'move' call_tmp[630843](377063 call syncAux _mt[243] this[86377]))
    (85917 call chpl_sync_initAux call_tmp[630843])
    (512910 return _void[55])
  }
  function _synccls[86375](?).deinit[85923](arg _mt[86383]:_MT[238], arg this[86381]:_synccls[86375](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630850] "expr temp" "maybe param" "maybe type" "temp"
    (630853 'move' call_tmp[630850](377068 call syncAux _mt[243] this[86381]))
    (85928 call chpl_sync_destroyAux call_tmp[630850])
    (512912 return _void[55])
  }
  function _synccls[86375](?).readFE[85935](arg _mt[86387]:_MT[238], arg this[86385]:_synccls[86375](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512916] "RVV" "temp"
    unknown ret[85938] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630857] "expr temp" "maybe param" "maybe type" "temp"
    (630860 'move' call_tmp[630857](377073 call valType _mt[243] this[86385]))
    (541583 'default init var' ret[85938] call_tmp[630857])
    (85941 'end of statement')
    {
      const tmp[85981] "const" "temp"
      unknown call_tmp[630862] "expr temp" "maybe param" "maybe type" "temp"
      (630865 'move' call_tmp[630862](85978 '_wide_get_locale' this[86385]))
      (85982 'move' tmp[85981](85979 'deref' call_tmp[630862]))
      {
        unknown localRet[85945] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541585] "maybe param" "maybe type" "temp"
        (541594 'move' type_tmp[541585](541591 call valType _mt[243] this[86385]))
        (541587 'init var split decl' localRet[85945] type_tmp[541585])
        (85948 'end of statement')
        (85952 call chpl_rmem_consist_release)
        (476948 'end of statement')
        unknown call_tmp[630871] "expr temp" "maybe param" "maybe type" "temp"
        (630874 'move' call_tmp[630871](377084 call syncAux _mt[243] this[86385]))
        (85957 call chpl_sync_waitFullAndLock call_tmp[630871])
        (476949 'end of statement')
        unknown call_tmp[630878] "maybe param" "maybe type" "temp"
        (630881 'move' call_tmp[630878](377090 call value _mt[243] this[86385]))
        (541596 'init var split init' localRet[85945] call_tmp[630878] type_tmp[541585])
        (476950 'end of statement' localRet[85945])
        unknown call_tmp[630885] "expr temp" "maybe param" "maybe type" "temp"
        (630888 'move' call_tmp[630885](377095 call syncAux _mt[243] this[86385]))
        (85967 call chpl_sync_markAndSignalEmpty call_tmp[630885])
        (476952 'end of statement')
        (85971 call chpl_rmem_consist_acquire)
        (476953 'end of statement')
        (85975 call = ret[85938] localRet[85945])
        (476954 'end of statement' ret[85938] localRet[85945])
      }
      (85985 'elided on block' 0 tmp[85981])
    }
    (512921 'move' ret[512916](512920 'deref' ret[85938]))
    gotoReturn _end_readFE[512914] _end_readFE[512914]
    (476957 'end of statement' ret[85938])
    label _end_readFE[512914]
    (512918 return ret[512916])
  }
  function _synccls[86375](?).readFF[85996](arg _mt[86391]:_MT[238], arg this[86389]:_synccls[86375](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512927] "RVV" "temp"
    unknown ret[85999] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630892] "expr temp" "maybe param" "maybe type" "temp"
    (630895 'move' call_tmp[630892](377103 call valType _mt[243] this[86389]))
    (541599 'default init var' ret[85999] call_tmp[630892])
    (86002 'end of statement')
    {
      const tmp[86042] "const" "temp"
      unknown call_tmp[630897] "expr temp" "maybe param" "maybe type" "temp"
      (630900 'move' call_tmp[630897](86039 '_wide_get_locale' this[86389]))
      (86043 'move' tmp[86042](86040 'deref' call_tmp[630897]))
      {
        unknown localRet[86006] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541601] "maybe param" "maybe type" "temp"
        (541610 'move' type_tmp[541601](541607 call valType _mt[243] this[86389]))
        (541603 'init var split decl' localRet[86006] type_tmp[541601])
        (86009 'end of statement')
        (86013 call chpl_rmem_consist_release)
        (476959 'end of statement')
        unknown call_tmp[630906] "expr temp" "maybe param" "maybe type" "temp"
        (630909 'move' call_tmp[630906](377114 call syncAux _mt[243] this[86389]))
        (86018 call chpl_sync_waitFullAndLock call_tmp[630906])
        (476960 'end of statement')
        unknown call_tmp[630913] "maybe param" "maybe type" "temp"
        (630916 'move' call_tmp[630913](377120 call value _mt[243] this[86389]))
        (541612 'init var split init' localRet[86006] call_tmp[630913] type_tmp[541601])
        (476961 'end of statement' localRet[86006])
        unknown call_tmp[630920] "expr temp" "maybe param" "maybe type" "temp"
        (630923 'move' call_tmp[630920](377125 call syncAux _mt[243] this[86389]))
        (86028 call chpl_sync_markAndSignalFull call_tmp[630920])
        (476963 'end of statement')
        (86032 call chpl_rmem_consist_acquire)
        (476964 'end of statement')
        (86036 call = ret[85999] localRet[86006])
        (476965 'end of statement' ret[85999] localRet[86006])
      }
      (86046 'elided on block' 0 tmp[86042])
    }
    (512932 'move' ret[512927](512931 'deref' ret[85999]))
    gotoReturn _end_readFF[512925] _end_readFF[512925]
    (476968 'end of statement' ret[85999])
    label _end_readFF[512925]
    (512929 return ret[512927])
  }
  function _synccls[86375](?).readXX[86057](arg _mt[86395]:_MT[238], arg this[86393]:_synccls[86375](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512938] "RVV" "temp"
    unknown ret[86060] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630927] "expr temp" "maybe param" "maybe type" "temp"
    (630930 'move' call_tmp[630927](377133 call valType _mt[243] this[86393]))
    (541615 'default init var' ret[86060] call_tmp[630927])
    (86063 'end of statement')
    {
      const tmp[86103] "const" "temp"
      unknown call_tmp[630932] "expr temp" "maybe param" "maybe type" "temp"
      (630935 'move' call_tmp[630932](86100 '_wide_get_locale' this[86393]))
      (86104 'move' tmp[86103](86101 'deref' call_tmp[630932]))
      {
        unknown localRet[86067] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541617] "maybe param" "maybe type" "temp"
        (541626 'move' type_tmp[541617](541623 call valType _mt[243] this[86393]))
        (541619 'init var split decl' localRet[86067] type_tmp[541617])
        (86070 'end of statement')
        (86074 call chpl_rmem_consist_release)
        (476970 'end of statement')
        unknown call_tmp[630941] "expr temp" "maybe param" "maybe type" "temp"
        (630944 'move' call_tmp[630941](377144 call syncAux _mt[243] this[86393]))
        (86079 call chpl_sync_lock call_tmp[630941])
        (476971 'end of statement')
        unknown call_tmp[630948] "maybe param" "maybe type" "temp"
        (630951 'move' call_tmp[630948](377150 call value _mt[243] this[86393]))
        (541628 'init var split init' localRet[86067] call_tmp[630948] type_tmp[541617])
        (476972 'end of statement' localRet[86067])
        unknown call_tmp[630955] "expr temp" "maybe param" "maybe type" "temp"
        (630958 'move' call_tmp[630955](377155 call syncAux _mt[243] this[86393]))
        (86089 call chpl_sync_unlock call_tmp[630955])
        (476974 'end of statement')
        (86093 call chpl_rmem_consist_acquire)
        (476975 'end of statement')
        (86097 call = ret[86060] localRet[86067])
        (476976 'end of statement' ret[86060] localRet[86067])
      }
      (86107 'elided on block' 0 tmp[86103])
    }
    (512943 'move' ret[512938](512942 'deref' ret[86060]))
    gotoReturn _end_readXX[512936] _end_readXX[512936]
    (476979 'end of statement' ret[86060])
    label _end_readXX[512936]
    (512940 return ret[512938])
  }
  function _synccls[86375](?).writeEF[86122](arg _mt[86399]:_MT[238], arg this[86397]:_synccls[86375](?), arg val[86119] :
  (377163 call valType _mt[243] this[86397])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86158] "const" "temp"
      unknown call_tmp[630962] "expr temp" "maybe param" "maybe type" "temp"
      (630965 'move' call_tmp[630962](86155 '_wide_get_locale' this[86397]))
      (86159 'move' tmp[86158](86156 'deref' call_tmp[630962]))
      {
        (86133 call chpl_rmem_consist_release)
        (476981 'end of statement')
        unknown call_tmp[630969] "expr temp" "maybe param" "maybe type" "temp"
        (630972 'move' call_tmp[630969](377171 call syncAux _mt[243] this[86397]))
        (86139 call chpl_sync_waitEmptyAndLock call_tmp[630969])
        (476982 'end of statement')
        unknown call_tmp[630976] "expr temp" "maybe param" "maybe type" "temp"
        (630979 'move' call_tmp[630976](377176 call value _mt[243] this[86397]))
        (86143 call = call_tmp[630976] val[86119])
        (476983 'end of statement')
        unknown call_tmp[630983] "expr temp" "maybe param" "maybe type" "temp"
        (630986 'move' call_tmp[630983](377182 call syncAux _mt[243] this[86397]))
        (86149 call chpl_sync_markAndSignalFull call_tmp[630983])
        (476984 'end of statement')
        (86153 call chpl_rmem_consist_acquire)
      }
      (86162 'elided on block' 0 tmp[86158])
    }
    (512947 return _void[55])
  }
  {
    (86128 call <(86125 'lifetime_of' this[86397])(86127 'lifetime_of' val[86119]))
  }
  function _synccls[86375](?).writeFF[86176](arg _mt[86403]:_MT[238], arg this[86401]:_synccls[86375](?), arg val[86173] :
  (377187 call valType _mt[243] this[86401])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86212] "const" "temp"
      unknown call_tmp[630990] "expr temp" "maybe param" "maybe type" "temp"
      (630993 'move' call_tmp[630990](86209 '_wide_get_locale' this[86401]))
      (86213 'move' tmp[86212](86210 'deref' call_tmp[630990]))
      {
        (86187 call chpl_rmem_consist_release)
        (476986 'end of statement')
        unknown call_tmp[630997] "expr temp" "maybe param" "maybe type" "temp"
        (631000 'move' call_tmp[630997](377195 call syncAux _mt[243] this[86401]))
        (86193 call chpl_sync_waitFullAndLock call_tmp[630997])
        (476987 'end of statement')
        unknown call_tmp[631004] "expr temp" "maybe param" "maybe type" "temp"
        (631007 'move' call_tmp[631004](377200 call value _mt[243] this[86401]))
        (86197 call = call_tmp[631004] val[86173])
        (476988 'end of statement')
        unknown call_tmp[631011] "expr temp" "maybe param" "maybe type" "temp"
        (631014 'move' call_tmp[631011](377206 call syncAux _mt[243] this[86401]))
        (86203 call chpl_sync_markAndSignalFull call_tmp[631011])
        (476989 'end of statement')
        (86207 call chpl_rmem_consist_acquire)
      }
      (86216 'elided on block' 0 tmp[86212])
    }
    (512949 return _void[55])
  }
  {
    (86182 call <(86179 'lifetime_of' this[86401])(86181 'lifetime_of' val[86173]))
  }
  function _synccls[86375](?).writeXF[86230](arg _mt[86407]:_MT[238], arg this[86405]:_synccls[86375](?), arg val[86227] :
  (377211 call valType _mt[243] this[86405])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86266] "const" "temp"
      unknown call_tmp[631018] "expr temp" "maybe param" "maybe type" "temp"
      (631021 'move' call_tmp[631018](86263 '_wide_get_locale' this[86405]))
      (86267 'move' tmp[86266](86264 'deref' call_tmp[631018]))
      {
        (86241 call chpl_rmem_consist_release)
        (476991 'end of statement')
        unknown call_tmp[631025] "expr temp" "maybe param" "maybe type" "temp"
        (631028 'move' call_tmp[631025](377219 call syncAux _mt[243] this[86405]))
        (86247 call chpl_sync_lock call_tmp[631025])
        (476992 'end of statement')
        unknown call_tmp[631032] "expr temp" "maybe param" "maybe type" "temp"
        (631035 'move' call_tmp[631032](377224 call value _mt[243] this[86405]))
        (86251 call = call_tmp[631032] val[86227])
        (476993 'end of statement')
        unknown call_tmp[631039] "expr temp" "maybe param" "maybe type" "temp"
        (631042 'move' call_tmp[631039](377230 call syncAux _mt[243] this[86405]))
        (86257 call chpl_sync_markAndSignalFull call_tmp[631039])
        (476994 'end of statement')
        (86261 call chpl_rmem_consist_acquire)
      }
      (86270 'elided on block' 0 tmp[86266])
    }
    (512951 return _void[55])
  }
  {
    (86236 call <(86233 'lifetime_of' this[86405])(86235 'lifetime_of' val[86227]))
  }
  function _synccls[86375](?).reset[86280](arg _mt[86411]:_MT[238], arg this[86409]:_synccls[86375](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86315] "const" "temp"
      unknown call_tmp[631044] "expr temp" "maybe param" "maybe type" "temp"
      (631047 'move' call_tmp[631044](86312 '_wide_get_locale' this[86409]))
      (86316 'move' tmp[86315](86313 'deref' call_tmp[631044]))
      {
        const defaultValue[86284] "dead at end of block" "const" "insert auto destroy"
        unknown call_tmp[631051] "expr temp" "maybe param" "maybe type" "temp"
        (631054 'move' call_tmp[631051](377236 call valType _mt[243] this[86409]))
        (541631 'default init var' defaultValue[86284] call_tmp[631051])
        (86287 'end of statement')
        (86291 call chpl_rmem_consist_release)
        (476996 'end of statement')
        unknown call_tmp[631058] "expr temp" "maybe param" "maybe type" "temp"
        (631061 'move' call_tmp[631058](377241 call syncAux _mt[243] this[86409]))
        (86296 call chpl_sync_lock call_tmp[631058])
        (476997 'end of statement')
        unknown call_tmp[631065] "expr temp" "maybe param" "maybe type" "temp"
        (631068 'move' call_tmp[631065](377246 call value _mt[243] this[86409]))
        (86300 call = call_tmp[631065] defaultValue[86284])
        (476998 'end of statement' defaultValue[86284])
        unknown call_tmp[631072] "expr temp" "maybe param" "maybe type" "temp"
        (631075 'move' call_tmp[631072](377252 call syncAux _mt[243] this[86409]))
        (86306 call chpl_sync_markAndSignalEmpty call_tmp[631072])
        (477000 'end of statement')
        (86310 call chpl_rmem_consist_acquire)
      }
      (86319 'elided on block' 0 tmp[86315])
    }
    (512953 return _void[55])
  }
  function _synccls[86375](?).isFull[86328](arg _mt[86415]:_MT[238], arg this[86413]:_synccls[86375](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512957] "RVV" "temp"
    unknown b[86331] "dead at end of block" "insert auto destroy"
    (541633 'default init var' b[86331] bool[10])
    (86334 'end of statement')
    {
      const tmp[86361] "const" "temp"
      unknown call_tmp[631077] "expr temp" "maybe param" "maybe type" "temp"
      (631080 'move' call_tmp[631077](86358 '_wide_get_locale' this[86413]))
      (86362 'move' tmp[86361](86359 'deref' call_tmp[631077]))
      {
        (86339 call chpl_rmem_consist_release)
        (477002 'end of statement')
        unknown call_tmp[631084] "expr temp" "maybe param" "maybe type" "temp"
        (631087 'move' call_tmp[631084](377259 call value _mt[243] this[86413]))
        unknown call_tmp[631089] "expr temp" "maybe param" "maybe type" "temp"
        (631092 'move' call_tmp[631089](86347 call c_ptrTo call_tmp[631084]))
        unknown call_tmp[631096] "expr temp" "maybe param" "maybe type" "temp"
        (631099 'move' call_tmp[631096](377264 call syncAux _mt[243] this[86413]))
        unknown call_tmp[631101] "expr temp" "maybe param" "maybe type" "temp"
        (631104 'move' call_tmp[631101](86350 call chpl_sync_isFull call_tmp[631089] call_tmp[631096]))
        (86351 call = b[86331] call_tmp[631101])
        (477003 'end of statement' b[86331])
        (86356 call chpl_rmem_consist_acquire)
      }
      (86365 'elided on block' 0 tmp[86361])
    }
    (512962 'move' ret[512957](512961 'deref' b[86331]))
    gotoReturn _end_isFull[512955] _end_isFull[512955]
    (477006 'end of statement' b[86331])
    label _end_isFull[512955]
    (512959 return ret[512957])
  }
  function _synccls[86375](?).super[777471](arg _mt[777473]:_MT[238], arg this[777475]:_synccls[86375](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777485] "RVV" "temp"
    unknown call_tmp[777492] "expr temp" "maybe param" "maybe type" "temp"
    (777495 'move' call_tmp[777492](777479 '.v' this[777475] c"super"))
    (777490 'move' ret[777485](777489 'deref' call_tmp[777492]))
    (777487 return ret[777485])
  }
  function _synccls[777502](?).valType[777497](arg _mt[777499]:_MT[238], arg this[777504]:_synccls[777502](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777553] "RVV" "temp" "type variable"
    unknown borrowOfThis[777506]
    (777545 'end of statement')
    (777508 'move' borrowOfThis[777506](777511 call _cast _borrowedNonNilable[214](?) this[777504]))
    (777546 'end of statement' borrowOfThis[777506])
    unknown call_tmp[777567] "expr temp" "maybe param" "maybe type" "temp"
    (777570 'move' call_tmp[777567](777535 'is bound' borrowOfThis[777506] c"valType"))
    if call_tmp[777567]
    {
      unknown call_tmp[777572] "expr temp" "maybe param" "maybe type" "temp"
      (777575 'move' call_tmp[777572](777516 '.v' borrowOfThis[777506] c"valType"))
      unknown call_tmp[777577] "expr temp" "maybe param" "maybe type" "temp"
      (777580 'move' call_tmp[777577](777531 call chpl_checkLegalTypeFieldAccessor this[777504] call_tmp[777572] "valType"))
      (777558 'move' ret[777553](777557 'deref' call_tmp[777577]))
      gotoReturn _end_valType[777551] _end_valType[777551]
      (777548 'end of statement' borrowOfThis[777506])
    }
    {
      (777563 'move' ret[777553](777562 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777551] _end_valType[777551]
    }
    label _end_valType[777551]
    (777555 return ret[777553])
  }
  function _synccls[777502](?).valType[777582](arg _mt[777584]:_MT[238], arg this[777586]:_synccls[777502](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777621] "RVV" "temp" "type variable"
    unknown borrowOfThis[777588] "type variable"
    (777613 'end of statement')
    (777590 'move' borrowOfThis[777588](777593 call _cast _borrowedNonNilable[214](?) this[777586]))
    (777614 'end of statement' borrowOfThis[777588])
    unknown call_tmp[777635] "expr temp" "maybe param" "maybe type" "temp"
    (777638 'move' call_tmp[777635](777603 'is bound' borrowOfThis[777588] c"valType"))
    if call_tmp[777635]
    {
      unknown call_tmp[777640] "expr temp" "maybe param" "maybe type" "temp"
      (777643 'move' call_tmp[777640](777598 '.v' borrowOfThis[777588] c"valType"))
      unknown call_tmp[777645] "expr temp" "maybe param" "maybe type" "temp"
      (777648 'move' call_tmp[777645](777599 call chpl_checkLegalTypeFieldAccessor this[777586] call_tmp[777640] "valType"))
      (777626 'move' ret[777621](777625 'deref' call_tmp[777645]))
      gotoReturn _end_valType[777619] _end_valType[777619]
      (777616 'end of statement' borrowOfThis[777588])
    }
    {
      (777631 'move' ret[777621](777630 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777619] _end_valType[777619]
    }
    label _end_valType[777619]
    (777623 return ret[777621])
  }
  function _synccls[86375](?).value[777650](arg _mt[777652]:_MT[238], arg this[777654]:_synccls[86375](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777664] "RVV" "temp"
    unknown call_tmp[777671] "expr temp" "maybe param" "maybe type" "temp"
    (777674 'move' call_tmp[777671](777658 '.' this[777654] c"value"))
    (777669 'move' ret[777664](777668 'addr of' call_tmp[777671]))
    (777666 return ret[777664])
  }
  function _synccls[86375](?).syncAux[777676](arg _mt[777678]:_MT[238], arg this[777680]:_synccls[86375](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777690] "RVV" "temp"
    unknown call_tmp[777697] "expr temp" "maybe param" "maybe type" "temp"
    (777700 'move' call_tmp[777697](777684 '.' this[777680] c"syncAux"))
    (777695 'move' ret[777690](777694 'addr of' call_tmp[777697]))
    (777692 return ret[777690])
  }
  function _synccls[86375](?).writeThis[777702](arg _mt[777706]:_MT[238], arg this[777704]:_synccls[86375](?), arg f[777705]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777711 call writeThisDefaultImpl f[777705] this[777704])
    (777716 return _void[55])
  }
  function _synccls[86375](?).readThis[777718](arg _mt[777722]:_MT[238], arg this[777720]:_synccls[86375](?), arg f[777721]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777726 call readThisDefaultImpl f[777721] this[777720])
    (777732 return _void[55])
  }
  type _synccls[86375](?) val super[355689]:object[22] "super class" unknown valType[85879] "type variable" unknown value[85883] valType[85879] val syncAux[85888]:chpl_sync_aux_t[87956] chpl_sync_aux_t[87956]
  type _synccls[777502](?)
  type unmanaged _synccls[415469](?)
  type _synccls[376945](?)
  function _qthreads_synccls[86866](?).init[86431](arg _mt[86870]:_MT[238], arg this[86868]:_qthreads_synccls[86866](?), arg valType[86429]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460101] "temporary of super field" "temp"
    (460109 'move' super_tmp[460101](460102 '.v' this[86868] c"super"))
    (460105 call init _mt[243] super_tmp[460101])
    (477008 'end of statement')
    unknown tmp[460066] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492003] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631106] "expr temp" "maybe param" "maybe type" "temp"
      (631109 'move' call_tmp[631106](460068 '.v' this[86868] c"super"))
      (492007 'move' call_type_tmp[492003](460071 'typeof' call_tmp[631106]))
    }
    (460072 'move' tmp[460066] call_type_tmp[492003])
    unknown call_tmp[631111] "maybe param" "maybe type" "temp"
    (631114 'move' call_tmp[631111](460077 'cast' tmp[460066] this[86868]))
    unknown chpl__thisAsParent[460074] "dead at end of block" "insert auto destroy" "temp"
    (541635 'init var' chpl__thisAsParent[460074] call_tmp[631111] tmp[460066])
    (460080 'setcid' chpl__thisAsParent[460074])
    (477009 'end of statement')
    unknown tmp[460082] "temp" "type variable"
    (460084 'move' tmp[460082] valType[86429])
    (460086 'init field' this[86868] c"valType" tmp[460082])
    (477010 'end of statement')
    val tmp[460090]:aligned_t[88363] "temp"
    (460093 'default init var' tmp[460090] aligned_t[88363])
    (460095 '.=' this[86868] c"alignedValue" tmp[460090])
    (477011 'end of statement')
    (460100 'setcid' this[86868])
    (477012 'end of statement')
    unknown call_tmp[631118] "expr temp" "maybe param" "maybe type" "temp"
    (631121 'move' call_tmp[631118](377274 call alignedValue _mt[243] this[86868]))
    unknown call_tmp[631123] "expr temp" "maybe param" "maybe type" "temp"
    (631126 'move' call_tmp[631123](86455 call defaultOfAlignedT valType[86429]))
    (86456 call qthread_purge_to call_tmp[631118] call_tmp[631123])
    (512966 return _void[55])
  }
  function _qthreads_synccls[86866](?).deinit[86462](arg _mt[86874]:_MT[238], arg this[86872]:_qthreads_synccls[86866](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631130] "expr temp" "maybe param" "maybe type" "temp"
    (631133 'move' call_tmp[631130](377280 call alignedValue _mt[243] this[86872]))
    (86467 call qthread_fill call_tmp[631130])
    (512968 return _void[55])
  }
  function _qthreads_synccls[86866](?).readFE[86474](arg _mt[86878]:_MT[238], arg this[86876]:_qthreads_synccls[86866](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512972] "RVV" "temp"
    unknown ret[86477] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631137] "expr temp" "maybe param" "maybe type" "temp"
    (631140 'move' call_tmp[631137](377285 call valType _mt[243] this[86876]))
    (541637 'default init var' ret[86477] call_tmp[631137])
    (86480 'end of statement')
    {
      const tmp[86514] "const" "temp"
      unknown call_tmp[631142] "expr temp" "maybe param" "maybe type" "temp"
      (631145 'move' call_tmp[631142](86511 '_wide_get_locale' this[86876]))
      (86515 'move' tmp[86514](86512 'deref' call_tmp[631142]))
      {
        unknown alignedLocalRet[86484] "dead at end of block" "insert auto destroy"
        (541639 'default init var' alignedLocalRet[86484] aligned_t[88363])
        (86487 'end of statement')
        (86491 call chpl_rmem_consist_release)
        (477015 'end of statement')
        unknown call_tmp[631149] "expr temp" "maybe param" "maybe type" "temp"
        (631152 'move' call_tmp[631149](377293 call alignedValue _mt[243] this[86876]))
        (86497 call qthread_readFE alignedLocalRet[86484] call_tmp[631149])
        (477016 'end of statement' alignedLocalRet[86484])
        (86501 call chpl_rmem_consist_acquire)
        (477018 'end of statement')
        unknown call_tmp[631156] "expr temp" "maybe param" "maybe type" "temp"
        (631159 'move' call_tmp[631156](377300 call valType _mt[243] this[86876]))
        unknown call_tmp[631161] "expr temp" "maybe param" "maybe type" "temp"
        (631164 'move' call_tmp[631161](86506 call _cast call_tmp[631156] alignedLocalRet[86484]))
        (86508 call = ret[86477] call_tmp[631161])
        (477019 'end of statement' ret[86477] alignedLocalRet[86484])
      }
      (86518 'elided on block' 0 tmp[86514])
    }
    (512977 'move' ret[512972](512976 'deref' ret[86477]))
    gotoReturn _end_readFE[512970] _end_readFE[512970]
    (477022 'end of statement' ret[86477])
    label _end_readFE[512970]
    (512974 return ret[512972])
  }
  function _qthreads_synccls[86866](?).readFF[86529](arg _mt[86882]:_MT[238], arg this[86880]:_qthreads_synccls[86866](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512983] "RVV" "temp"
    unknown ret[86532] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631168] "expr temp" "maybe param" "maybe type" "temp"
    (631171 'move' call_tmp[631168](377306 call valType _mt[243] this[86880]))
    (541641 'default init var' ret[86532] call_tmp[631168])
    (86535 'end of statement')
    {
      const tmp[86569] "const" "temp"
      unknown call_tmp[631173] "expr temp" "maybe param" "maybe type" "temp"
      (631176 'move' call_tmp[631173](86566 '_wide_get_locale' this[86880]))
      (86570 'move' tmp[86569](86567 'deref' call_tmp[631173]))
      {
        unknown alignedLocalRet[86539] "dead at end of block" "insert auto destroy"
        (541643 'default init var' alignedLocalRet[86539] aligned_t[88363])
        (86542 'end of statement')
        (86546 call chpl_rmem_consist_release)
        (477024 'end of statement')
        unknown call_tmp[631180] "expr temp" "maybe param" "maybe type" "temp"
        (631183 'move' call_tmp[631180](377314 call alignedValue _mt[243] this[86880]))
        (86552 call qthread_readFF alignedLocalRet[86539] call_tmp[631180])
        (477025 'end of statement' alignedLocalRet[86539])
        (86556 call chpl_rmem_consist_acquire)
        (477027 'end of statement')
        unknown call_tmp[631187] "expr temp" "maybe param" "maybe type" "temp"
        (631190 'move' call_tmp[631187](377321 call valType _mt[243] this[86880]))
        unknown call_tmp[631192] "expr temp" "maybe param" "maybe type" "temp"
        (631195 'move' call_tmp[631192](86561 call _cast call_tmp[631187] alignedLocalRet[86539]))
        (86563 call = ret[86532] call_tmp[631192])
        (477028 'end of statement' ret[86532] alignedLocalRet[86539])
      }
      (86573 'elided on block' 0 tmp[86569])
    }
    (512988 'move' ret[512983](512987 'deref' ret[86532]))
    gotoReturn _end_readFF[512981] _end_readFF[512981]
    (477031 'end of statement' ret[86532])
    label _end_readFF[512981]
    (512985 return ret[512983])
  }
  function _qthreads_synccls[86866](?).readXX[86584](arg _mt[86886]:_MT[238], arg this[86884]:_qthreads_synccls[86866](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512994] "RVV" "temp"
    unknown ret[86587] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631199] "expr temp" "maybe param" "maybe type" "temp"
    (631202 'move' call_tmp[631199](377327 call valType _mt[243] this[86884]))
    (541645 'default init var' ret[86587] call_tmp[631199])
    (86590 'end of statement')
    {
      const tmp[86624] "const" "temp"
      unknown call_tmp[631204] "expr temp" "maybe param" "maybe type" "temp"
      (631207 'move' call_tmp[631204](86621 '_wide_get_locale' this[86884]))
      (86625 'move' tmp[86624](86622 'deref' call_tmp[631204]))
      {
        unknown alignedLocalRet[86594] "dead at end of block" "insert auto destroy"
        (541647 'default init var' alignedLocalRet[86594] aligned_t[88363])
        (86597 'end of statement')
        (86601 call chpl_rmem_consist_release)
        (477033 'end of statement')
        unknown call_tmp[631211] "expr temp" "maybe param" "maybe type" "temp"
        (631214 'move' call_tmp[631211](377335 call alignedValue _mt[243] this[86884]))
        (86607 call qthread_readXX alignedLocalRet[86594] call_tmp[631211])
        (477034 'end of statement' alignedLocalRet[86594])
        (86611 call chpl_rmem_consist_acquire)
        (477036 'end of statement')
        unknown call_tmp[631218] "expr temp" "maybe param" "maybe type" "temp"
        (631221 'move' call_tmp[631218](377342 call valType _mt[243] this[86884]))
        unknown call_tmp[631223] "expr temp" "maybe param" "maybe type" "temp"
        (631226 'move' call_tmp[631223](86616 call _cast call_tmp[631218] alignedLocalRet[86594]))
        (86618 call = ret[86587] call_tmp[631223])
        (477037 'end of statement' ret[86587] alignedLocalRet[86594])
      }
      (86628 'elided on block' 0 tmp[86624])
    }
    (512999 'move' ret[512994](512998 'deref' ret[86587]))
    gotoReturn _end_readXX[512992] _end_readXX[512992]
    (477040 'end of statement' ret[86587])
    label _end_readXX[512992]
    (512996 return ret[512994])
  }
  function _qthreads_synccls[86866](?).writeEF[86643](arg _mt[86890]:_MT[238], arg this[86888]:_qthreads_synccls[86866](?), arg val[86640] :
  (377348 call valType _mt[243] this[86888])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86673] "const" "temp"
      unknown call_tmp[631230] "expr temp" "maybe param" "maybe type" "temp"
      (631233 'move' call_tmp[631230](86670 '_wide_get_locale' this[86888]))
      (86674 'move' tmp[86673](86671 'deref' call_tmp[631230]))
      {
        (86654 call chpl_rmem_consist_release)
        (477042 'end of statement')
        unknown call_tmp[631237] "expr temp" "maybe param" "maybe type" "temp"
        (631240 'move' call_tmp[631237](377356 call alignedValue _mt[243] this[86888]))
        unknown call_tmp[631242] "expr temp" "maybe param" "maybe type" "temp"
        (631245 'move' call_tmp[631242](86662 call _cast aligned_t[88363] val[86640]))
        (86664 call qthread_writeEF call_tmp[631237] call_tmp[631242])
        (477043 'end of statement')
        (86668 call chpl_rmem_consist_acquire)
      }
      (86677 'elided on block' 0 tmp[86673])
    }
    (513003 return _void[55])
  }
  {
    (86649 call <(86646 'lifetime_of' this[86888])(86648 'lifetime_of' val[86640]))
  }
  function _qthreads_synccls[86866](?).writeFF[86691](arg _mt[86894]:_MT[238], arg this[86892]:_qthreads_synccls[86866](?), arg val[86688] :
  (377363 call valType _mt[243] this[86892])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86721] "const" "temp"
      unknown call_tmp[631249] "expr temp" "maybe param" "maybe type" "temp"
      (631252 'move' call_tmp[631249](86718 '_wide_get_locale' this[86892]))
      (86722 'move' tmp[86721](86719 'deref' call_tmp[631249]))
      {
        (86702 call chpl_rmem_consist_release)
        (477045 'end of statement')
        unknown call_tmp[631256] "expr temp" "maybe param" "maybe type" "temp"
        (631259 'move' call_tmp[631256](377371 call alignedValue _mt[243] this[86892]))
        unknown call_tmp[631261] "expr temp" "maybe param" "maybe type" "temp"
        (631264 'move' call_tmp[631261](86710 call _cast aligned_t[88363] val[86688]))
        (86712 call qthread_writeFF call_tmp[631256] call_tmp[631261])
        (477046 'end of statement')
        (86716 call chpl_rmem_consist_acquire)
      }
      (86725 'elided on block' 0 tmp[86721])
    }
    (513005 return _void[55])
  }
  {
    (86697 call <(86694 'lifetime_of' this[86892])(86696 'lifetime_of' val[86688]))
  }
  function _qthreads_synccls[86866](?).writeXF[86739](arg _mt[86898]:_MT[238], arg this[86896]:_qthreads_synccls[86866](?), arg val[86736] :
  (377378 call valType _mt[243] this[86896])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86769] "const" "temp"
      unknown call_tmp[631268] "expr temp" "maybe param" "maybe type" "temp"
      (631271 'move' call_tmp[631268](86766 '_wide_get_locale' this[86896]))
      (86770 'move' tmp[86769](86767 'deref' call_tmp[631268]))
      {
        (86750 call chpl_rmem_consist_release)
        (477048 'end of statement')
        unknown call_tmp[631275] "expr temp" "maybe param" "maybe type" "temp"
        (631278 'move' call_tmp[631275](377386 call alignedValue _mt[243] this[86896]))
        unknown call_tmp[631280] "expr temp" "maybe param" "maybe type" "temp"
        (631283 'move' call_tmp[631280](86758 call _cast aligned_t[88363] val[86736]))
        (86760 call qthread_writeF call_tmp[631275] call_tmp[631280])
        (477049 'end of statement')
        (86764 call chpl_rmem_consist_acquire)
      }
      (86773 'elided on block' 0 tmp[86769])
    }
    (513007 return _void[55])
  }
  {
    (86745 call <(86742 'lifetime_of' this[86896])(86744 'lifetime_of' val[86736]))
  }
  function _qthreads_synccls[86866](?).reset[86783](arg _mt[86902]:_MT[238], arg this[86900]:_qthreads_synccls[86866](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86807] "const" "temp"
      unknown call_tmp[631285] "expr temp" "maybe param" "maybe type" "temp"
      (631288 'move' call_tmp[631285](86804 '_wide_get_locale' this[86900]))
      (86808 'move' tmp[86807](86805 'deref' call_tmp[631285]))
      {
        (86788 call chpl_rmem_consist_release)
        (477051 'end of statement')
        unknown call_tmp[631292] "expr temp" "maybe param" "maybe type" "temp"
        (631295 'move' call_tmp[631292](377394 call alignedValue _mt[243] this[86900]))
        unknown call_tmp[631299] "expr temp" "maybe param" "maybe type" "temp"
        (631302 'move' call_tmp[631299](377399 call valType _mt[243] this[86900]))
        unknown call_tmp[631304] "expr temp" "maybe param" "maybe type" "temp"
        (631307 'move' call_tmp[631304](86797 call defaultOfAlignedT call_tmp[631299]))
        (86798 call qthread_purge_to call_tmp[631292] call_tmp[631304])
        (477052 'end of statement')
        (86802 call chpl_rmem_consist_acquire)
      }
      (86811 'elided on block' 0 tmp[86807])
    }
    (513009 return _void[55])
  }
  function _qthreads_synccls[86866](?).isFull[86820](arg _mt[86906]:_MT[238], arg this[86904]:_qthreads_synccls[86866](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513013] "RVV" "temp"
    unknown b[86823] "dead at end of block" "insert auto destroy"
    (541649 'default init var' b[86823] bool[10])
    (86826 'end of statement')
    {
      const tmp[86852] "const" "temp"
      unknown call_tmp[631309] "expr temp" "maybe param" "maybe type" "temp"
      (631312 'move' call_tmp[631309](86849 '_wide_get_locale' this[86904]))
      (86853 'move' tmp[86852](86850 'deref' call_tmp[631309]))
      {
        (86831 call chpl_rmem_consist_release)
        (477054 'end of statement')
        unknown call_tmp[631316] "expr temp" "maybe param" "maybe type" "temp"
        (631319 'move' call_tmp[631316](377406 call alignedValue _mt[243] this[86904]))
        unknown call_tmp[631321] "expr temp" "maybe param" "maybe type" "temp"
        (631324 'move' call_tmp[631321](86838 call qthread_feb_status call_tmp[631316]))
        unknown call_tmp[631326] "expr temp" "maybe param" "maybe type" "temp"
        (631329 'move' call_tmp[631326](86840 call _cast bool[10] call_tmp[631321]))
        (86842 call = b[86823] call_tmp[631326])
        (477055 'end of statement' b[86823])
        (86847 call chpl_rmem_consist_acquire)
      }
      (86856 'elided on block' 0 tmp[86852])
    }
    (513018 'move' ret[513013](513017 'deref' b[86823]))
    gotoReturn _end_isFull[513011] _end_isFull[513011]
    (477058 'end of statement' b[86823])
    label _end_isFull[513011]
    (513015 return ret[513013])
  }
  function _qthreads_synccls[86866](?).super[777734](arg _mt[777736]:_MT[238], arg this[777738]:_qthreads_synccls[86866](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777748] "RVV" "temp"
    unknown call_tmp[777755] "expr temp" "maybe param" "maybe type" "temp"
    (777758 'move' call_tmp[777755](777742 '.v' this[777738] c"super"))
    (777753 'move' ret[777748](777752 'deref' call_tmp[777755]))
    (777750 return ret[777748])
  }
  function _qthreads_synccls[777765](?).valType[777760](arg _mt[777762]:_MT[238], arg this[777767]:_qthreads_synccls[777765](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777802] "RVV" "temp" "type variable"
    unknown borrowOfThis[777769]
    (777794 'end of statement')
    (777771 'move' borrowOfThis[777769](777774 call _cast _borrowedNonNilable[214](?) this[777767]))
    (777795 'end of statement' borrowOfThis[777769])
    unknown call_tmp[777816] "expr temp" "maybe param" "maybe type" "temp"
    (777819 'move' call_tmp[777816](777784 'is bound' borrowOfThis[777769] c"valType"))
    if call_tmp[777816]
    {
      unknown call_tmp[777821] "expr temp" "maybe param" "maybe type" "temp"
      (777824 'move' call_tmp[777821](777779 '.v' borrowOfThis[777769] c"valType"))
      unknown call_tmp[777826] "expr temp" "maybe param" "maybe type" "temp"
      (777829 'move' call_tmp[777826](777780 call chpl_checkLegalTypeFieldAccessor this[777767] call_tmp[777821] "valType"))
      (777807 'move' ret[777802](777806 'deref' call_tmp[777826]))
      gotoReturn _end_valType[777800] _end_valType[777800]
      (777797 'end of statement' borrowOfThis[777769])
    }
    {
      (777812 'move' ret[777802](777811 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777800] _end_valType[777800]
    }
    label _end_valType[777800]
    (777804 return ret[777802])
  }
  function _qthreads_synccls[777765](?).valType[777831](arg _mt[777833]:_MT[238], arg this[777835]:_qthreads_synccls[777765](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777870] "RVV" "temp" "type variable"
    unknown borrowOfThis[777837] "type variable"
    (777862 'end of statement')
    (777839 'move' borrowOfThis[777837](777842 call _cast _borrowedNonNilable[214](?) this[777835]))
    (777863 'end of statement' borrowOfThis[777837])
    unknown call_tmp[777884] "expr temp" "maybe param" "maybe type" "temp"
    (777887 'move' call_tmp[777884](777852 'is bound' borrowOfThis[777837] c"valType"))
    if call_tmp[777884]
    {
      unknown call_tmp[777889] "expr temp" "maybe param" "maybe type" "temp"
      (777892 'move' call_tmp[777889](777847 '.v' borrowOfThis[777837] c"valType"))
      unknown call_tmp[777894] "expr temp" "maybe param" "maybe type" "temp"
      (777897 'move' call_tmp[777894](777848 call chpl_checkLegalTypeFieldAccessor this[777835] call_tmp[777889] "valType"))
      (777875 'move' ret[777870](777874 'deref' call_tmp[777894]))
      gotoReturn _end_valType[777868] _end_valType[777868]
      (777865 'end of statement' borrowOfThis[777837])
    }
    {
      (777880 'move' ret[777870](777879 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777868] _end_valType[777868]
    }
    label _end_valType[777868]
    (777872 return ret[777870])
  }
  function _qthreads_synccls[86866](?).alignedValue[777899](arg _mt[777901]:_MT[238], arg this[777903]:_qthreads_synccls[86866](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777913] "RVV" "temp"
    unknown call_tmp[777920] "expr temp" "maybe param" "maybe type" "temp"
    (777923 'move' call_tmp[777920](777907 '.' this[777903] c"alignedValue"))
    (777918 'move' ret[777913](777917 'addr of' call_tmp[777920]))
    (777915 return ret[777913])
  }
  function _qthreads_synccls[86866](?).writeThis[777925](arg _mt[777929]:_MT[238], arg this[777927]:_qthreads_synccls[86866](?), arg f[777928]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777934 call writeThisDefaultImpl f[777928] this[777927])
    (777939 return _void[55])
  }
  function _qthreads_synccls[86866](?).readThis[777941](arg _mt[777945]:_MT[238], arg this[777943]:_qthreads_synccls[86866](?), arg f[777944]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777949 call readThisDefaultImpl f[777944] this[777943])
    (777955 return _void[55])
  }
  type _qthreads_synccls[86866](?) val super[355691]:object[22] "super class" unknown valType[86419] "type variable" val alignedValue[86423]:aligned_t[88363] aligned_t[88363]
  type _qthreads_synccls[777765](?)
  type unmanaged _qthreads_synccls[415466](?)
  type _qthreads_synccls[376940](?)
  function isSyncValue[86915](arg x[86912]:_syncvar[84948](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513024] "RVV" "param" "temp"
    (513029 'move' ret[513024](513028 'deref' 1))
    (513026 return ret[513024])
  }
  function isSyncValue[86927](arg x[86925]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513033] "RVV" "param" "temp"
    (513038 'move' ret[513033](513037 'deref' 0))
    (513035 return ret[513033])
  }
  function _singlevar[87257](?).init[86958](arg _mt[87261]:_MT[238], ref arg this[87259]:_singlevar[87257](?), arg valType[86956]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (86963 call ensureFEType valType[86956])
    (477062 'end of statement')
    unknown tmp[460112] "temp" "type variable"
    (460114 'move' tmp[460112] valType[86956])
    (460116 'init field' this[87259] c"valType" tmp[460112])
    (477063 'end of statement')
    unknown call_tmp[631331] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631334 'move' call_tmp[631331](747847 'new' _singlecls[377412](?) valType[86956](_chpl_manager = unmanaged[220](?))))
    unknown call_tmp[631336] "expr temp" "maybe param" "maybe type" "temp"
    (631339 'move' call_tmp[631336](460131 '.v' this[87259] c"valType"))
    unknown call_tmp[631341] "maybe param" "maybe type" "temp"
    (631344 'move' call_tmp[631341](460123 call unmanaged _singlecls[415472](?) call_tmp[631336]))
    unknown tmp[460120] "temp"
    (460125 'init var' tmp[460120] call_tmp[631331] call_tmp[631341])
    (460127 'init field' this[87259] c"wrapped" tmp[460120])
    (477064 'end of statement')
    unknown tmp[460136] "temp"
    (460139 'init var' tmp[460136] 1 bool[10])
    (460141 'init field' this[87259] c"isOwned" tmp[460136])
    (477065 'end of statement')
    (513040 return _void[55])
  }
  function _singlevar[87257](?).init[86993](arg _mt[87265]:_MT[238], ref arg this[87263]:_singlevar[87257](?), const arg other[86990]:_singlevar[87257](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[460145] "temp" "type variable"
    (460147 'move' tmp[460145](87000 call valType _mt[243] other[86990]))
    (460149 'init field' this[87263] c"valType" tmp[460145])
    (477066 'end of statement')
    unknown call_tmp[631350] "maybe param" "maybe type" "temp"
    (631353 'move' call_tmp[631350](87009 call wrapped _mt[243] other[86990]))
    unknown call_tmp[631355] "expr temp" "maybe param" "maybe type" "temp"
    (631358 'move' call_tmp[631355](460164 '.v' this[87263] c"valType"))
    unknown call_tmp[631360] "maybe param" "maybe type" "temp"
    (631363 'move' call_tmp[631360](460156 call unmanaged _singlecls[415472](?) call_tmp[631355]))
    unknown tmp[460153] "temp"
    (460158 'init var' tmp[460153] call_tmp[631350] call_tmp[631360])
    (460160 'init field' this[87263] c"wrapped" tmp[460153])
    (477067 'end of statement')
    unknown tmp[460167] "temp"
    (460170 'init var' tmp[460167] 0 bool[10])
    (460172 'init field' this[87263] c"isOwned" tmp[460167])
    (477068 'end of statement')
    (513042 return _void[55])
  }
  function _singlevar[87257](?).init=[87028](arg _mt[87269]:_MT[238], ref arg this[87267]:_singlevar[87257](?), const arg other[87025]:_singlevar[87257](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631365] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631368 'move' call_tmp[631365](87037 'typeof' this[87267]))
    unknown call_tmp[631372] "expr temp" "maybe param" "maybe type" "temp"
    (631375 'move' call_tmp[631372](87038 call valType _mt[243] call_tmp[631365]))
    unknown call_tmp[631379] "expr temp" "maybe param" "maybe type" "temp"
    (631382 'move' call_tmp[631379](87032 call valType _mt[243] other[87025]))
    unknown call_tmp[631384] "expr temp" "maybe param" "maybe type" "temp"
    (631387 'move' call_tmp[631384](354281 'is_coercible' call_tmp[631372] call_tmp[631379]))
    unknown call_tmp[631389] "expr temp" "maybe param" "maybe type" "temp"
    (631392 'move' call_tmp[631389](87043 call == call_tmp[631384] 0))
    unknown call_tmp[631394] "expr temp" "maybe param" "maybe type" "temp"
    (631397 'move' call_tmp[631394](87109 call _cond_test call_tmp[631389]))
    if call_tmp[631394]
    {
      unknown call_tmp[631399] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631402 'move' call_tmp[631399](87047 'typeof' this[87267]))
      unknown call_tmp[631404] "expr temp" "maybe param" "maybe type" "temp"
      (631407 'move' call_tmp[631404](87049 call _cast string[26] call_tmp[631399]))
      unknown call_tmp[631409] "expr temp" "maybe param" "maybe type" "temp"
      (631412 'move' call_tmp[631409](87051 call + "'" call_tmp[631404]))
      unknown call_tmp[631414] "expr temp" "maybe param" "maybe type" "temp"
      (631417 'move' call_tmp[631414](87054 call + call_tmp[631409] "' from '"))
      unknown call_tmp[631419] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631422 'move' call_tmp[631419](87057 'typeof' other[87025]))
      unknown call_tmp[631424] "expr temp" "maybe param" "maybe type" "temp"
      (631427 'move' call_tmp[631424](87059 call _cast string[26] call_tmp[631419]))
      unknown call_tmp[631429] "expr temp" "maybe param" "maybe type" "temp"
      (631432 'move' call_tmp[631429](87061 call + call_tmp[631414] call_tmp[631424]))
      unknown call_tmp[631434] "maybe param" "maybe type" "temp"
      (631437 'move' call_tmp[631434](87064 call + call_tmp[631429] "'"))
      unknown theseTypes[87066] "dead at end of block" "param"
      (541651 'init var' theseTypes[87066] call_tmp[631434])
      (87069 'end of statement')
      unknown call_tmp[631441] "expr temp" "maybe param" "maybe type" "temp"
      (631444 'move' call_tmp[631441](87073 call valType _mt[243] other[87025]))
      unknown call_tmp[631446] "expr temp" "maybe param" "maybe type" "temp"
      (631449 'move' call_tmp[631446](87077 call _cast string[26] call_tmp[631441]))
      unknown call_tmp[631451] "expr temp" "maybe param" "maybe type" "temp"
      (631454 'move' call_tmp[631451](87079 call + "because '" call_tmp[631446]))
      unknown call_tmp[631456] "expr temp" "maybe param" "maybe type" "temp"
      (631459 'move' call_tmp[631456](87082 call + call_tmp[631451] "' is not coercible to '"))
      unknown call_tmp[631461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631464 'move' call_tmp[631461](87085 'typeof' this[87267]))
      unknown call_tmp[631468] "expr temp" "maybe param" "maybe type" "temp"
      (631471 'move' call_tmp[631468](87086 call valType _mt[243] call_tmp[631461]))
      unknown call_tmp[631473] "expr temp" "maybe param" "maybe type" "temp"
      (631476 'move' call_tmp[631473](87090 call _cast string[26] call_tmp[631468]))
      unknown call_tmp[631478] "expr temp" "maybe param" "maybe type" "temp"
      (631481 'move' call_tmp[631478](87092 call + call_tmp[631456] call_tmp[631473]))
      unknown call_tmp[631483] "maybe param" "maybe type" "temp"
      (631486 'move' call_tmp[631483](87095 call + call_tmp[631478] "'"))
      unknown because[87097] "dead at end of block" "param"
      (541653 'init var' because[87097] call_tmp[631483])
      (87100 'end of statement')
      (87107 call compilerError "cannot initialize " theseTypes[87066] " " because[87097])
    }
    unknown call_tmp[631490] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631493 'move' call_tmp[631490](87119 'typeof' this[87267]))
    unknown call_tmp[631497] "expr temp" "maybe param" "maybe type" "temp"
    (631500 'move' call_tmp[631497](87120 call valType _mt[243] call_tmp[631490]))
    (87124 call(87115 call (partial) init _mt[243] this[87267]) call_tmp[631497])
    (477070 'end of statement')
    unknown call_tmp[631506] "expr temp" "maybe param" "maybe type" "temp"
    (631509 'move' call_tmp[631506](87135 call(87131 call (partial) readFF _mt[243] other[87025])))
    (87137 call(87127 call (partial) writeEF _mt[243] this[87267]) call_tmp[631506])
    (513044 return _void[55])
  }
  function _singlevar[87257](?).init=[87151](arg _mt[87273]:_MT[238], ref arg this[87271]:_singlevar[87257](?), const arg other[87148] :
  unknown call_tmp[631511] "expr temp" "maybe param" "maybe type" "temp" "type variable") : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631520] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631523 'move' call_tmp[631520](87158 'typeof' other[87148]))
    (87160 call(87154 call (partial) init _mt[243] this[87271]) call_tmp[631520])
    (477072 'end of statement')
    (87169 call(87164 call (partial) writeEF _mt[243] this[87271]) other[87148])
    (513046 return _void[55])
  }
  function _singlevar[87257](?).deinit[87175](arg _mt[87277]:_MT[238], arg this[87275]:_singlevar[87257](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631529] "expr temp" "maybe param" "maybe type" "temp"
    (631532 'move' call_tmp[631529](377449 call isOwned _mt[243] this[87275]))
    unknown call_tmp[631534] "expr temp" "maybe param" "maybe type" "temp"
    (631537 'move' call_tmp[631534](87179 call == call_tmp[631529] 1))
    unknown call_tmp[631539] "expr temp" "maybe param" "maybe type" "temp"
    (631542 'move' call_tmp[631539](87186 call _cond_test call_tmp[631534]))
    if call_tmp[631539]
    {
      unknown call_tmp[631546] "expr temp" "maybe param" "maybe type" "temp"
      (631549 'move' call_tmp[631546](377454 call wrapped _mt[243] this[87275]))
      (87183 call chpl__delete call_tmp[631546])
    }
    (513048 return _void[55])
  }
  function _singlevar[87257](?).readThis[87198](arg _mt[87281]:_MT[238], arg this[87279]:_singlevar[87257](?), arg x[87196]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87219 call compilerError "single variables cannot currently be read - use writeEF instead")
    (513050 return _void[55])
  }
  function _singlevar[87257](?).writeThis[87228](arg _mt[87285]:_MT[238], arg this[87283]:_singlevar[87257](?), arg x[87226]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87251 call compilerError "single variables cannot currently be written - apply readFF() to those variables first")
    (513052 return _void[55])
  }
  function _singlevar[87257](?).valType[777957](arg _mt[777959]:_MT[238], arg this[777961]:_singlevar[87257](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[777980] "RVV" "temp" "type variable"
    unknown call_tmp[777994] "expr temp" "maybe param" "maybe type" "temp"
    (777997 'move' call_tmp[777994](777966 'is bound' this[777961] c"valType"))
    if call_tmp[777994]
    {
      unknown call_tmp[777999] "expr temp" "maybe param" "maybe type" "temp"
      (778002 'move' call_tmp[777999](777965 '.v' this[777961] c"valType"))
      (777985 'move' ret[777980](777984 'deref' call_tmp[777999]))
      gotoReturn _end_valType[777978] _end_valType[777978]
    }
    {
      (777990 'move' ret[777980](777989 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777978] _end_valType[777978]
    }
    label _end_valType[777978]
    (777982 return ret[777980])
  }
  function _singlevar[87257](?).valType[778004](arg _mt[778006]:_MT[238], arg this[778008]:_singlevar[87257](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[778027] "RVV" "temp" "type variable"
    unknown call_tmp[778041] "expr temp" "maybe param" "maybe type" "temp"
    (778044 'move' call_tmp[778041](778013 'is bound' this[778008] c"valType"))
    if call_tmp[778041]
    {
      unknown call_tmp[778046] "expr temp" "maybe param" "maybe type" "temp"
      (778049 'move' call_tmp[778046](778012 '.v' this[778008] c"valType"))
      (778032 'move' ret[778027](778031 'deref' call_tmp[778046]))
      gotoReturn _end_valType[778025] _end_valType[778025]
    }
    {
      (778037 'move' ret[778027](778036 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[778025] _end_valType[778025]
    }
    label _end_valType[778025]
    (778029 return ret[778027])
  }
  function _singlevar[87257](?).wrapped[778051](arg _mt[778053]:_MT[238], ref arg this[778055]:_singlevar[87257](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778065] "RVV" "temp"
    unknown call_tmp[778072] "expr temp" "maybe param" "maybe type" "temp"
    (778075 'move' call_tmp[778072](778059 '.' this[778055] c"wrapped"))
    (778070 'move' ret[778065](778069 'addr of' call_tmp[778072]))
    (778067 return ret[778065])
  }
  function _singlevar[87257](?).isOwned[778077](arg _mt[778079]:_MT[238], ref arg this[778081]:_singlevar[87257](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778091] "RVV" "temp"
    unknown call_tmp[778098] "expr temp" "maybe param" "maybe type" "temp"
    (778101 'move' call_tmp[778098](778085 '.' this[778081] c"isOwned"))
    (778096 'move' ret[778091](778095 'addr of' call_tmp[778098]))
    (778093 return ret[778091])
  }
  function chpl_fields_are_comparable[778115](arg _arg1[778117]:_singlevar[87257](?), arg _arg2[778118]:_singlevar[87257](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778147]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778154] "expr temp" "maybe param" "maybe type" "temp"
    (778157 'move' call_tmp[778154](778121 call wrapped _mt[243] _arg1[778117]))
    unknown call_tmp[778159] "expr temp" "maybe param" "maybe type" "temp"
    (778162 'move' call_tmp[778159](778125 call wrapped _mt[243] _arg2[778118]))
    unknown call_tmp[778164] "expr temp" "maybe param" "maybe type" "temp"
    (778167 'move' call_tmp[778164](778129 'call resolves' c"==" call_tmp[778154] call_tmp[778159]))
    unknown call_tmp[778169] "expr temp" "maybe param" "maybe type" "temp"
    (778172 'move' call_tmp[778169](778131 call isOwned _mt[243] _arg1[778117]))
    unknown call_tmp[778174] "expr temp" "maybe param" "maybe type" "temp"
    (778177 'move' call_tmp[778174](778135 call isOwned _mt[243] _arg2[778118]))
    unknown call_tmp[778179] "expr temp" "maybe param" "maybe type" "temp"
    (778182 'move' call_tmp[778179](778139 'call resolves' c"==" call_tmp[778169] call_tmp[778174]))
    unknown call_tmp[778184] "expr temp" "maybe param" "maybe type" "temp"
    (778187 'move' call_tmp[778184](778141 '&' call_tmp[778164] call_tmp[778179]))
    (778152 'move' ret[778147](778151 'deref' call_tmp[778184]))
    (778149 return ret[778147])
  }
  function ==[778103](arg _arg1[778105]:_singlevar[87257](?), arg _arg2[778106]:_singlevar[87257](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778231]:bool[10] "RVV" "temp"
    unknown call_tmp[778248] "expr temp" "maybe param" "maybe type" "temp"
    (778251 'move' call_tmp[778248](778195 call wrapped _mt[243] _arg1[778105]))
    unknown call_tmp[778253] "expr temp" "maybe param" "maybe type" "temp"
    (778256 'move' call_tmp[778253](778199 call wrapped _mt[243] _arg2[778106]))
    unknown call_tmp[778258] "expr temp" "maybe param" "maybe type" "temp"
    (778261 'move' call_tmp[778258](778203 call != call_tmp[778248] call_tmp[778253]))
    if call_tmp[778258]
    {
      (778236 'move' ret[778231](778235 'deref' 0))
      gotoReturn _end_==[778229] _end_==[778229]
    }
    unknown call_tmp[778263] "expr temp" "maybe param" "maybe type" "temp"
    (778266 'move' call_tmp[778263](778209 call isOwned _mt[243] _arg1[778105]))
    unknown call_tmp[778268] "expr temp" "maybe param" "maybe type" "temp"
    (778271 'move' call_tmp[778268](778213 call isOwned _mt[243] _arg2[778106]))
    unknown call_tmp[778273] "expr temp" "maybe param" "maybe type" "temp"
    (778276 'move' call_tmp[778273](778217 call != call_tmp[778263] call_tmp[778268]))
    if call_tmp[778273]
    {
      (778241 'move' ret[778231](778240 'deref' 0))
      gotoReturn _end_==[778229] _end_==[778229]
    }
    (778246 'move' ret[778231](778245 'deref' 1))
    label _end_==[778229]
    (778233 return ret[778231])
  }
  where {
    unknown call_tmp[778278] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778281 'move' call_tmp[778278](778109 'typeof' _arg1[778105]))
    unknown call_tmp[778283] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778286 'move' call_tmp[778283](778111 'typeof' _arg2[778106]))
    unknown call_tmp[778288] "expr temp" "maybe param" "maybe type" "temp"
    (778291 'move' call_tmp[778288](778113 call == call_tmp[778278] call_tmp[778283]))
    unknown call_tmp[778293] "expr temp" "maybe param" "maybe type" "temp"
    (778296 'move' call_tmp[778293](778189 call chpl_fields_are_comparable[778115] _arg1[778105] _arg2[778106]))
    (778193 '&' call_tmp[778288] call_tmp[778293])
  }
  function chpl_fields_are_comparable[778310](arg _arg1[778312]:_singlevar[87257](?), arg _arg2[778313]:_singlevar[87257](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778342]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778349] "expr temp" "maybe param" "maybe type" "temp"
    (778352 'move' call_tmp[778349](778316 call wrapped _mt[243] _arg1[778312]))
    unknown call_tmp[778354] "expr temp" "maybe param" "maybe type" "temp"
    (778357 'move' call_tmp[778354](778320 call wrapped _mt[243] _arg2[778313]))
    unknown call_tmp[778359] "expr temp" "maybe param" "maybe type" "temp"
    (778362 'move' call_tmp[778359](778324 'call resolves' c"!=" call_tmp[778349] call_tmp[778354]))
    unknown call_tmp[778364] "expr temp" "maybe param" "maybe type" "temp"
    (778367 'move' call_tmp[778364](778326 call isOwned _mt[243] _arg1[778312]))
    unknown call_tmp[778369] "expr temp" "maybe param" "maybe type" "temp"
    (778372 'move' call_tmp[778369](778330 call isOwned _mt[243] _arg2[778313]))
    unknown call_tmp[778374] "expr temp" "maybe param" "maybe type" "temp"
    (778377 'move' call_tmp[778374](778334 'call resolves' c"!=" call_tmp[778364] call_tmp[778369]))
    unknown call_tmp[778379] "expr temp" "maybe param" "maybe type" "temp"
    (778382 'move' call_tmp[778379](778336 '&' call_tmp[778359] call_tmp[778374]))
    (778347 'move' ret[778342](778346 'deref' call_tmp[778379]))
    (778344 return ret[778342])
  }
  function !=[778298](arg _arg1[778300]:_singlevar[87257](?), arg _arg2[778301]:_singlevar[87257](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778426]:bool[10] "RVV" "temp"
    unknown call_tmp[778443] "expr temp" "maybe param" "maybe type" "temp"
    (778446 'move' call_tmp[778443](778390 call wrapped _mt[243] _arg1[778300]))
    unknown call_tmp[778448] "expr temp" "maybe param" "maybe type" "temp"
    (778451 'move' call_tmp[778448](778394 call wrapped _mt[243] _arg2[778301]))
    unknown call_tmp[778453] "expr temp" "maybe param" "maybe type" "temp"
    (778456 'move' call_tmp[778453](778398 call != call_tmp[778443] call_tmp[778448]))
    if call_tmp[778453]
    {
      (778431 'move' ret[778426](778430 'deref' 1))
      gotoReturn _end_!=[778424] _end_!=[778424]
    }
    unknown call_tmp[778458] "expr temp" "maybe param" "maybe type" "temp"
    (778461 'move' call_tmp[778458](778404 call isOwned _mt[243] _arg1[778300]))
    unknown call_tmp[778463] "expr temp" "maybe param" "maybe type" "temp"
    (778466 'move' call_tmp[778463](778408 call isOwned _mt[243] _arg2[778301]))
    unknown call_tmp[778468] "expr temp" "maybe param" "maybe type" "temp"
    (778471 'move' call_tmp[778468](778412 call != call_tmp[778458] call_tmp[778463]))
    if call_tmp[778468]
    {
      (778436 'move' ret[778426](778435 'deref' 1))
      gotoReturn _end_!=[778424] _end_!=[778424]
    }
    (778441 'move' ret[778426](778440 'deref' 0))
    label _end_!=[778424]
    (778428 return ret[778426])
  }
  where {
    unknown call_tmp[778473] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778476 'move' call_tmp[778473](778304 'typeof' _arg1[778300]))
    unknown call_tmp[778478] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778481 'move' call_tmp[778478](778306 'typeof' _arg2[778301]))
    unknown call_tmp[778483] "expr temp" "maybe param" "maybe type" "temp"
    (778486 'move' call_tmp[778483](778308 call == call_tmp[778473] call_tmp[778478]))
    unknown call_tmp[778488] "expr temp" "maybe param" "maybe type" "temp"
    (778491 'move' call_tmp[778488](778384 call chpl_fields_are_comparable[778310] _arg1[778300] _arg2[778301]))
    (778388 '&' call_tmp[778483] call_tmp[778488])
  }
  function chpl_fields_are_comparable[778505](arg _arg1[778507]:_singlevar[87257](?), arg _arg2[778508]:_singlevar[87257](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778537]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778544] "expr temp" "maybe param" "maybe type" "temp"
    (778547 'move' call_tmp[778544](778511 call wrapped _mt[243] _arg1[778507]))
    unknown call_tmp[778549] "expr temp" "maybe param" "maybe type" "temp"
    (778552 'move' call_tmp[778549](778515 call wrapped _mt[243] _arg2[778508]))
    unknown call_tmp[778554] "expr temp" "maybe param" "maybe type" "temp"
    (778557 'move' call_tmp[778554](778519 'call resolves' c"<" call_tmp[778544] call_tmp[778549]))
    unknown call_tmp[778559] "expr temp" "maybe param" "maybe type" "temp"
    (778562 'move' call_tmp[778559](778521 call isOwned _mt[243] _arg1[778507]))
    unknown call_tmp[778564] "expr temp" "maybe param" "maybe type" "temp"
    (778567 'move' call_tmp[778564](778525 call isOwned _mt[243] _arg2[778508]))
    unknown call_tmp[778569] "expr temp" "maybe param" "maybe type" "temp"
    (778572 'move' call_tmp[778569](778529 'call resolves' c"<" call_tmp[778559] call_tmp[778564]))
    unknown call_tmp[778574] "expr temp" "maybe param" "maybe type" "temp"
    (778577 'move' call_tmp[778574](778531 '&' call_tmp[778554] call_tmp[778569]))
    (778542 'move' ret[778537](778541 'deref' call_tmp[778574]))
    (778539 return ret[778537])
  }
  function <[778493](arg _arg1[778495]:_singlevar[87257](?), arg _arg2[778496]:_singlevar[87257](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778651]:bool[10] "RVV" "temp"
    unknown call_tmp[778678] "expr temp" "maybe param" "maybe type" "temp"
    (778681 'move' call_tmp[778678](778585 call wrapped _mt[243] _arg1[778495]))
    unknown call_tmp[778683] "expr temp" "maybe param" "maybe type" "temp"
    (778686 'move' call_tmp[778683](778589 call wrapped _mt[243] _arg2[778496]))
    unknown call_tmp[778688] "expr temp" "maybe param" "maybe type" "temp"
    (778691 'move' call_tmp[778688](778593 call < call_tmp[778678] call_tmp[778683]))
    if call_tmp[778688]
    {
      (778656 'move' ret[778651](778655 'deref' 1))
      gotoReturn _end_<[778649] _end_<[778649]
    }
    unknown call_tmp[778693] "expr temp" "maybe param" "maybe type" "temp"
    (778696 'move' call_tmp[778693](778599 call wrapped _mt[243] _arg1[778495]))
    unknown call_tmp[778698] "expr temp" "maybe param" "maybe type" "temp"
    (778701 'move' call_tmp[778698](778603 call wrapped _mt[243] _arg2[778496]))
    unknown call_tmp[778703] "expr temp" "maybe param" "maybe type" "temp"
    (778706 'move' call_tmp[778703](778607 call > call_tmp[778693] call_tmp[778698]))
    if call_tmp[778703]
    {
      (778661 'move' ret[778651](778660 'deref' 0))
      gotoReturn _end_<[778649] _end_<[778649]
    }
    unknown call_tmp[778708] "expr temp" "maybe param" "maybe type" "temp"
    (778711 'move' call_tmp[778708](778613 call isOwned _mt[243] _arg1[778495]))
    unknown call_tmp[778713] "expr temp" "maybe param" "maybe type" "temp"
    (778716 'move' call_tmp[778713](778617 call isOwned _mt[243] _arg2[778496]))
    unknown call_tmp[778718] "expr temp" "maybe param" "maybe type" "temp"
    (778721 'move' call_tmp[778718](778621 call < call_tmp[778708] call_tmp[778713]))
    if call_tmp[778718]
    {
      (778666 'move' ret[778651](778665 'deref' 1))
      gotoReturn _end_<[778649] _end_<[778649]
    }
    unknown call_tmp[778723] "expr temp" "maybe param" "maybe type" "temp"
    (778726 'move' call_tmp[778723](778627 call isOwned _mt[243] _arg1[778495]))
    unknown call_tmp[778728] "expr temp" "maybe param" "maybe type" "temp"
    (778731 'move' call_tmp[778728](778631 call isOwned _mt[243] _arg2[778496]))
    unknown call_tmp[778733] "expr temp" "maybe param" "maybe type" "temp"
    (778736 'move' call_tmp[778733](778635 call > call_tmp[778723] call_tmp[778728]))
    if call_tmp[778733]
    {
      (778671 'move' ret[778651](778670 'deref' 0))
      gotoReturn _end_<[778649] _end_<[778649]
    }
    (778676 'move' ret[778651](778675 'deref' 0))
    label _end_<[778649]
    (778653 return ret[778651])
  }
  where {
    unknown call_tmp[778738] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778741 'move' call_tmp[778738](778499 'typeof' _arg1[778495]))
    unknown call_tmp[778743] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778746 'move' call_tmp[778743](778501 'typeof' _arg2[778496]))
    unknown call_tmp[778748] "expr temp" "maybe param" "maybe type" "temp"
    (778751 'move' call_tmp[778748](778503 call == call_tmp[778738] call_tmp[778743]))
    unknown call_tmp[778753] "expr temp" "maybe param" "maybe type" "temp"
    (778756 'move' call_tmp[778753](778579 call chpl_fields_are_comparable[778505] _arg1[778495] _arg2[778496]))
    (778583 '&' call_tmp[778748] call_tmp[778753])
  }
  function chpl_fields_are_comparable[778770](arg _arg1[778772]:_singlevar[87257](?), arg _arg2[778773]:_singlevar[87257](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778802]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778809] "expr temp" "maybe param" "maybe type" "temp"
    (778812 'move' call_tmp[778809](778776 call wrapped _mt[243] _arg1[778772]))
    unknown call_tmp[778814] "expr temp" "maybe param" "maybe type" "temp"
    (778817 'move' call_tmp[778814](778780 call wrapped _mt[243] _arg2[778773]))
    unknown call_tmp[778819] "expr temp" "maybe param" "maybe type" "temp"
    (778822 'move' call_tmp[778819](778784 'call resolves' c"<=" call_tmp[778809] call_tmp[778814]))
    unknown call_tmp[778824] "expr temp" "maybe param" "maybe type" "temp"
    (778827 'move' call_tmp[778824](778786 call isOwned _mt[243] _arg1[778772]))
    unknown call_tmp[778829] "expr temp" "maybe param" "maybe type" "temp"
    (778832 'move' call_tmp[778829](778790 call isOwned _mt[243] _arg2[778773]))
    unknown call_tmp[778834] "expr temp" "maybe param" "maybe type" "temp"
    (778837 'move' call_tmp[778834](778794 'call resolves' c"<=" call_tmp[778824] call_tmp[778829]))
    unknown call_tmp[778839] "expr temp" "maybe param" "maybe type" "temp"
    (778842 'move' call_tmp[778839](778796 '&' call_tmp[778819] call_tmp[778834]))
    (778807 'move' ret[778802](778806 'deref' call_tmp[778839]))
    (778804 return ret[778802])
  }
  function <=[778758](arg _arg1[778760]:_singlevar[87257](?), arg _arg2[778761]:_singlevar[87257](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778916]:bool[10] "RVV" "temp"
    unknown call_tmp[778943] "expr temp" "maybe param" "maybe type" "temp"
    (778946 'move' call_tmp[778943](778850 call wrapped _mt[243] _arg1[778760]))
    unknown call_tmp[778948] "expr temp" "maybe param" "maybe type" "temp"
    (778951 'move' call_tmp[778948](778854 call wrapped _mt[243] _arg2[778761]))
    unknown call_tmp[778953] "expr temp" "maybe param" "maybe type" "temp"
    (778956 'move' call_tmp[778953](778858 call < call_tmp[778943] call_tmp[778948]))
    if call_tmp[778953]
    {
      (778921 'move' ret[778916](778920 'deref' 1))
      gotoReturn _end_<=[778914] _end_<=[778914]
    }
    unknown call_tmp[778958] "expr temp" "maybe param" "maybe type" "temp"
    (778961 'move' call_tmp[778958](778864 call wrapped _mt[243] _arg1[778760]))
    unknown call_tmp[778963] "expr temp" "maybe param" "maybe type" "temp"
    (778966 'move' call_tmp[778963](778868 call wrapped _mt[243] _arg2[778761]))
    unknown call_tmp[778968] "expr temp" "maybe param" "maybe type" "temp"
    (778971 'move' call_tmp[778968](778872 call > call_tmp[778958] call_tmp[778963]))
    if call_tmp[778968]
    {
      (778926 'move' ret[778916](778925 'deref' 0))
      gotoReturn _end_<=[778914] _end_<=[778914]
    }
    unknown call_tmp[778973] "expr temp" "maybe param" "maybe type" "temp"
    (778976 'move' call_tmp[778973](778878 call isOwned _mt[243] _arg1[778760]))
    unknown call_tmp[778978] "expr temp" "maybe param" "maybe type" "temp"
    (778981 'move' call_tmp[778978](778882 call isOwned _mt[243] _arg2[778761]))
    unknown call_tmp[778983] "expr temp" "maybe param" "maybe type" "temp"
    (778986 'move' call_tmp[778983](778886 call < call_tmp[778973] call_tmp[778978]))
    if call_tmp[778983]
    {
      (778931 'move' ret[778916](778930 'deref' 1))
      gotoReturn _end_<=[778914] _end_<=[778914]
    }
    unknown call_tmp[778988] "expr temp" "maybe param" "maybe type" "temp"
    (778991 'move' call_tmp[778988](778892 call isOwned _mt[243] _arg1[778760]))
    unknown call_tmp[778993] "expr temp" "maybe param" "maybe type" "temp"
    (778996 'move' call_tmp[778993](778896 call isOwned _mt[243] _arg2[778761]))
    unknown call_tmp[778998] "expr temp" "maybe param" "maybe type" "temp"
    (779001 'move' call_tmp[778998](778900 call > call_tmp[778988] call_tmp[778993]))
    if call_tmp[778998]
    {
      (778936 'move' ret[778916](778935 'deref' 0))
      gotoReturn _end_<=[778914] _end_<=[778914]
    }
    (778941 'move' ret[778916](778940 'deref' 1))
    label _end_<=[778914]
    (778918 return ret[778916])
  }
  where {
    unknown call_tmp[779003] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779006 'move' call_tmp[779003](778764 'typeof' _arg1[778760]))
    unknown call_tmp[779008] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779011 'move' call_tmp[779008](778766 'typeof' _arg2[778761]))
    unknown call_tmp[779013] "expr temp" "maybe param" "maybe type" "temp"
    (779016 'move' call_tmp[779013](778768 call == call_tmp[779003] call_tmp[779008]))
    unknown call_tmp[779018] "expr temp" "maybe param" "maybe type" "temp"
    (779021 'move' call_tmp[779018](778844 call chpl_fields_are_comparable[778770] _arg1[778760] _arg2[778761]))
    (778848 '&' call_tmp[779013] call_tmp[779018])
  }
  function chpl_fields_are_comparable[779035](arg _arg1[779037]:_singlevar[87257](?), arg _arg2[779038]:_singlevar[87257](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779067]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779074] "expr temp" "maybe param" "maybe type" "temp"
    (779077 'move' call_tmp[779074](779041 call wrapped _mt[243] _arg1[779037]))
    unknown call_tmp[779079] "expr temp" "maybe param" "maybe type" "temp"
    (779082 'move' call_tmp[779079](779045 call wrapped _mt[243] _arg2[779038]))
    unknown call_tmp[779084] "expr temp" "maybe param" "maybe type" "temp"
    (779087 'move' call_tmp[779084](779049 'call resolves' c">" call_tmp[779074] call_tmp[779079]))
    unknown call_tmp[779089] "expr temp" "maybe param" "maybe type" "temp"
    (779092 'move' call_tmp[779089](779051 call isOwned _mt[243] _arg1[779037]))
    unknown call_tmp[779094] "expr temp" "maybe param" "maybe type" "temp"
    (779097 'move' call_tmp[779094](779055 call isOwned _mt[243] _arg2[779038]))
    unknown call_tmp[779099] "expr temp" "maybe param" "maybe type" "temp"
    (779102 'move' call_tmp[779099](779059 'call resolves' c">" call_tmp[779089] call_tmp[779094]))
    unknown call_tmp[779104] "expr temp" "maybe param" "maybe type" "temp"
    (779107 'move' call_tmp[779104](779061 '&' call_tmp[779084] call_tmp[779099]))
    (779072 'move' ret[779067](779071 'deref' call_tmp[779104]))
    (779069 return ret[779067])
  }
  function >[779023](arg _arg1[779025]:_singlevar[87257](?), arg _arg2[779026]:_singlevar[87257](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779181]:bool[10] "RVV" "temp"
    unknown call_tmp[779208] "expr temp" "maybe param" "maybe type" "temp"
    (779211 'move' call_tmp[779208](779115 call wrapped _mt[243] _arg1[779025]))
    unknown call_tmp[779213] "expr temp" "maybe param" "maybe type" "temp"
    (779216 'move' call_tmp[779213](779119 call wrapped _mt[243] _arg2[779026]))
    unknown call_tmp[779218] "expr temp" "maybe param" "maybe type" "temp"
    (779221 'move' call_tmp[779218](779123 call > call_tmp[779208] call_tmp[779213]))
    if call_tmp[779218]
    {
      (779186 'move' ret[779181](779185 'deref' 1))
      gotoReturn _end_>[779179] _end_>[779179]
    }
    unknown call_tmp[779223] "expr temp" "maybe param" "maybe type" "temp"
    (779226 'move' call_tmp[779223](779129 call wrapped _mt[243] _arg1[779025]))
    unknown call_tmp[779228] "expr temp" "maybe param" "maybe type" "temp"
    (779231 'move' call_tmp[779228](779133 call wrapped _mt[243] _arg2[779026]))
    unknown call_tmp[779233] "expr temp" "maybe param" "maybe type" "temp"
    (779236 'move' call_tmp[779233](779137 call < call_tmp[779223] call_tmp[779228]))
    if call_tmp[779233]
    {
      (779191 'move' ret[779181](779190 'deref' 0))
      gotoReturn _end_>[779179] _end_>[779179]
    }
    unknown call_tmp[779238] "expr temp" "maybe param" "maybe type" "temp"
    (779241 'move' call_tmp[779238](779143 call isOwned _mt[243] _arg1[779025]))
    unknown call_tmp[779243] "expr temp" "maybe param" "maybe type" "temp"
    (779246 'move' call_tmp[779243](779147 call isOwned _mt[243] _arg2[779026]))
    unknown call_tmp[779248] "expr temp" "maybe param" "maybe type" "temp"
    (779251 'move' call_tmp[779248](779151 call > call_tmp[779238] call_tmp[779243]))
    if call_tmp[779248]
    {
      (779196 'move' ret[779181](779195 'deref' 1))
      gotoReturn _end_>[779179] _end_>[779179]
    }
    unknown call_tmp[779253] "expr temp" "maybe param" "maybe type" "temp"
    (779256 'move' call_tmp[779253](779157 call isOwned _mt[243] _arg1[779025]))
    unknown call_tmp[779258] "expr temp" "maybe param" "maybe type" "temp"
    (779261 'move' call_tmp[779258](779161 call isOwned _mt[243] _arg2[779026]))
    unknown call_tmp[779263] "expr temp" "maybe param" "maybe type" "temp"
    (779266 'move' call_tmp[779263](779165 call < call_tmp[779253] call_tmp[779258]))
    if call_tmp[779263]
    {
      (779201 'move' ret[779181](779200 'deref' 0))
      gotoReturn _end_>[779179] _end_>[779179]
    }
    (779206 'move' ret[779181](779205 'deref' 0))
    label _end_>[779179]
    (779183 return ret[779181])
  }
  where {
    unknown call_tmp[779268] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779271 'move' call_tmp[779268](779029 'typeof' _arg1[779025]))
    unknown call_tmp[779273] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779276 'move' call_tmp[779273](779031 'typeof' _arg2[779026]))
    unknown call_tmp[779278] "expr temp" "maybe param" "maybe type" "temp"
    (779281 'move' call_tmp[779278](779033 call == call_tmp[779268] call_tmp[779273]))
    unknown call_tmp[779283] "expr temp" "maybe param" "maybe type" "temp"
    (779286 'move' call_tmp[779283](779109 call chpl_fields_are_comparable[779035] _arg1[779025] _arg2[779026]))
    (779113 '&' call_tmp[779278] call_tmp[779283])
  }
  function chpl_fields_are_comparable[779300](arg _arg1[779302]:_singlevar[87257](?), arg _arg2[779303]:_singlevar[87257](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779332]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779339] "expr temp" "maybe param" "maybe type" "temp"
    (779342 'move' call_tmp[779339](779306 call wrapped _mt[243] _arg1[779302]))
    unknown call_tmp[779344] "expr temp" "maybe param" "maybe type" "temp"
    (779347 'move' call_tmp[779344](779310 call wrapped _mt[243] _arg2[779303]))
    unknown call_tmp[779349] "expr temp" "maybe param" "maybe type" "temp"
    (779352 'move' call_tmp[779349](779314 'call resolves' c">=" call_tmp[779339] call_tmp[779344]))
    unknown call_tmp[779354] "expr temp" "maybe param" "maybe type" "temp"
    (779357 'move' call_tmp[779354](779316 call isOwned _mt[243] _arg1[779302]))
    unknown call_tmp[779359] "expr temp" "maybe param" "maybe type" "temp"
    (779362 'move' call_tmp[779359](779320 call isOwned _mt[243] _arg2[779303]))
    unknown call_tmp[779364] "expr temp" "maybe param" "maybe type" "temp"
    (779367 'move' call_tmp[779364](779324 'call resolves' c">=" call_tmp[779354] call_tmp[779359]))
    unknown call_tmp[779369] "expr temp" "maybe param" "maybe type" "temp"
    (779372 'move' call_tmp[779369](779326 '&' call_tmp[779349] call_tmp[779364]))
    (779337 'move' ret[779332](779336 'deref' call_tmp[779369]))
    (779334 return ret[779332])
  }
  function >=[779288](arg _arg1[779290]:_singlevar[87257](?), arg _arg2[779291]:_singlevar[87257](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779446]:bool[10] "RVV" "temp"
    unknown call_tmp[779473] "expr temp" "maybe param" "maybe type" "temp"
    (779476 'move' call_tmp[779473](779380 call wrapped _mt[243] _arg1[779290]))
    unknown call_tmp[779478] "expr temp" "maybe param" "maybe type" "temp"
    (779481 'move' call_tmp[779478](779384 call wrapped _mt[243] _arg2[779291]))
    unknown call_tmp[779483] "expr temp" "maybe param" "maybe type" "temp"
    (779486 'move' call_tmp[779483](779388 call > call_tmp[779473] call_tmp[779478]))
    if call_tmp[779483]
    {
      (779451 'move' ret[779446](779450 'deref' 1))
      gotoReturn _end_>=[779444] _end_>=[779444]
    }
    unknown call_tmp[779488] "expr temp" "maybe param" "maybe type" "temp"
    (779491 'move' call_tmp[779488](779394 call wrapped _mt[243] _arg1[779290]))
    unknown call_tmp[779493] "expr temp" "maybe param" "maybe type" "temp"
    (779496 'move' call_tmp[779493](779398 call wrapped _mt[243] _arg2[779291]))
    unknown call_tmp[779498] "expr temp" "maybe param" "maybe type" "temp"
    (779501 'move' call_tmp[779498](779402 call < call_tmp[779488] call_tmp[779493]))
    if call_tmp[779498]
    {
      (779456 'move' ret[779446](779455 'deref' 0))
      gotoReturn _end_>=[779444] _end_>=[779444]
    }
    unknown call_tmp[779503] "expr temp" "maybe param" "maybe type" "temp"
    (779506 'move' call_tmp[779503](779408 call isOwned _mt[243] _arg1[779290]))
    unknown call_tmp[779508] "expr temp" "maybe param" "maybe type" "temp"
    (779511 'move' call_tmp[779508](779412 call isOwned _mt[243] _arg2[779291]))
    unknown call_tmp[779513] "expr temp" "maybe param" "maybe type" "temp"
    (779516 'move' call_tmp[779513](779416 call > call_tmp[779503] call_tmp[779508]))
    if call_tmp[779513]
    {
      (779461 'move' ret[779446](779460 'deref' 1))
      gotoReturn _end_>=[779444] _end_>=[779444]
    }
    unknown call_tmp[779518] "expr temp" "maybe param" "maybe type" "temp"
    (779521 'move' call_tmp[779518](779422 call isOwned _mt[243] _arg1[779290]))
    unknown call_tmp[779523] "expr temp" "maybe param" "maybe type" "temp"
    (779526 'move' call_tmp[779523](779426 call isOwned _mt[243] _arg2[779291]))
    unknown call_tmp[779528] "expr temp" "maybe param" "maybe type" "temp"
    (779531 'move' call_tmp[779528](779430 call < call_tmp[779518] call_tmp[779523]))
    if call_tmp[779528]
    {
      (779466 'move' ret[779446](779465 'deref' 0))
      gotoReturn _end_>=[779444] _end_>=[779444]
    }
    (779471 'move' ret[779446](779470 'deref' 1))
    label _end_>=[779444]
    (779448 return ret[779446])
  }
  where {
    unknown call_tmp[779533] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779536 'move' call_tmp[779533](779294 'typeof' _arg1[779290]))
    unknown call_tmp[779538] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779541 'move' call_tmp[779538](779296 'typeof' _arg2[779291]))
    unknown call_tmp[779543] "expr temp" "maybe param" "maybe type" "temp"
    (779546 'move' call_tmp[779543](779298 call == call_tmp[779533] call_tmp[779538]))
    unknown call_tmp[779548] "expr temp" "maybe param" "maybe type" "temp"
    (779551 'move' call_tmp[779548](779374 call chpl_fields_are_comparable[779300] _arg1[779290] _arg2[779291]))
    (779378 '&' call_tmp[779543] call_tmp[779548])
  }
  function =[779553](ref arg _arg1[779555]:_singlevar[87257](?), const?  ref arg _arg2[779556]:_singlevar[87257](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[779593] "expr temp" "maybe param" "maybe type" "temp"
    (779596 'move' call_tmp[779593](779566 call wrapped _mt[243] _arg1[779555]))
    unknown call_tmp[779600] "expr temp" "maybe param" "maybe type" "temp"
    (779603 'move' call_tmp[779600](779570 call wrapped _mt[243] _arg2[779556]))
    (779574 call = call_tmp[779593] call_tmp[779600])
    (779587 'end of statement')
    unknown call_tmp[779607] "expr temp" "maybe param" "maybe type" "temp"
    (779610 'move' call_tmp[779607](779576 call isOwned _mt[243] _arg1[779555]))
    unknown call_tmp[779614] "expr temp" "maybe param" "maybe type" "temp"
    (779617 'move' call_tmp[779614](779580 call isOwned _mt[243] _arg2[779556]))
    (779584 call = call_tmp[779607] call_tmp[779614])
    (779589 return _void[55])
  }
  where {
    unknown call_tmp[779619] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779622 'move' call_tmp[779619](779559 'typeof' _arg1[779555]))
    unknown call_tmp[779624] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779627 'move' call_tmp[779624](779561 'typeof' _arg2[779556]))
    (779563 call == call_tmp[779619] call_tmp[779624])
  }
  function chpl__defaultHash[779629](arg r[779631]:_singlevar[87257](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[779662] "RVV" "temp"
    unknown call_tmp[779669] "expr temp" "maybe param" "maybe type" "temp"
    (779672 'move' call_tmp[779669](779648 call isOwned _mt[243] r[779631]))
    unknown call_tmp[779674] "expr temp" "maybe param" "maybe type" "temp"
    (779677 'move' call_tmp[779674](779652 call chpl__defaultHash call_tmp[779669]))
    unknown call_tmp[779679] "expr temp" "maybe param" "maybe type" "temp"
    (779682 'move' call_tmp[779679](779639 call wrapped _mt[243] r[779631]))
    unknown call_tmp[779684] "expr temp" "maybe param" "maybe type" "temp"
    (779687 'move' call_tmp[779684](779643 call chpl__defaultHash call_tmp[779679]))
    unknown call_tmp[779689] "expr temp" "maybe param" "maybe type" "temp"
    (779692 'move' call_tmp[779689](779633 call valType _mt[243] r[779631]))
    unknown call_tmp[779694] "expr temp" "maybe param" "maybe type" "temp"
    (779697 'move' call_tmp[779694](779637 call chpl__defaultHash call_tmp[779689]))
    unknown call_tmp[779699] "expr temp" "maybe param" "maybe type" "temp"
    (779702 'move' call_tmp[779699](779645 call chpl__defaultHashCombine call_tmp[779684] call_tmp[779694] 2))
    unknown call_tmp[779704] "expr temp" "maybe param" "maybe type" "temp"
    (779707 'move' call_tmp[779704](779654 call chpl__defaultHashCombine call_tmp[779674] call_tmp[779699] 3))
    (779667 'move' ret[779662](779666 'deref' call_tmp[779704]))
    (779664 return ret[779662])
  }
  single type _singlevar[87257](?) unknown valType[86936] "type variable" unknown wrapped[86944](86942 call unmanaged _singlecls[415472](?) valType[86936]) val isOwned[86950]:bool[10] 1 bool[10]
  function isSingleType[87294](arg t[87291]:_singlevar[87257](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513056] "RVV" "param" "temp"
    (513061 'move' ret[513056](513060 'deref' 1))
    (513058 return ret[513056])
  }
  function isSingleType[87306](arg t[87304]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513065] "RVV" "param" "temp"
    (513070 'move' ret[513065](513069 'deref' 0))
    (513067 return ret[513065])
  }
  function _singlevar[87257](?).readFF[87317](arg _mt[87322]:_MT[238], arg this[87319]:_singlevar[87257](?) :
  _singlevar[87257](?)) : _unknown[51] "method"
  {
    unknown ret[513074] "RVV" "temp"
    unknown call_tmp[631553] "expr temp" "maybe param" "maybe type" "temp"
    (631556 'move' call_tmp[631553](358309 call wrapped _mt[243] this[87319]))
    unknown call_tmp[631560] "expr temp" "maybe param" "maybe type" "temp"
    (631563 'move' call_tmp[631560](87329 call(87325 call (partial) readFF _mt[243] call_tmp[631553])))
    (513079 'move' ret[513074](513078 'deref' call_tmp[631560]))
    (513076 return ret[513074])
  }
  function _singlevar[87257](?).readXX[87338](arg _mt[87343]:_MT[238], arg this[87340]:_singlevar[87257](?) :
  _singlevar[87257](?)) : _unknown[51] "method"
  {
    unknown ret[513083] "RVV" "temp"
    (87347 call chpl_task_yield)
    (477080 'end of statement')
    unknown call_tmp[631567] "expr temp" "maybe param" "maybe type" "temp"
    (631570 'move' call_tmp[631567](358314 call wrapped _mt[243] this[87340]))
    unknown call_tmp[631574] "expr temp" "maybe param" "maybe type" "temp"
    (631577 'move' call_tmp[631574](87355 call(87351 call (partial) readXX _mt[243] call_tmp[631567])))
    (513088 'move' ret[513083](513087 'deref' call_tmp[631574]))
    (513085 return ret[513083])
  }
  function _singlevar[87257](?).writeEF[87367](arg _mt[87372]:_MT[238], arg this[87369]:_singlevar[87257](?) :
  _singlevar[87257](?), arg x[87364] :
  (377460 call valType _mt[243] this[87369])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[631583] "expr temp" "maybe param" "maybe type" "temp"
    (631586 'move' call_tmp[631583](358319 call wrapped _mt[243] this[87369]))
    (87380 call(87375 call (partial) writeEF _mt[243] call_tmp[631583]) x[87364])
    (513090 return _void[55])
  }
  function _singlevar[87257](?).isFull[87388](arg _mt[87393]:_MT[238], arg this[87390]:_singlevar[87257](?) :
  _singlevar[87257](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[513094] "RVV" "temp"
    unknown call_tmp[631592] "expr temp" "maybe param" "maybe type" "temp"
    (631595 'move' call_tmp[631592](358324 call wrapped _mt[243] this[87390]))
    unknown call_tmp[631599] "expr temp" "maybe param" "maybe type" "temp"
    (631602 'move' call_tmp[631599](87396 call isFull _mt[243] call_tmp[631592]))
    (513099 'move' ret[513094](513098 'deref' call_tmp[631599]))
    (513096 return ret[513094])
  }
  function =[87414](ref arg lhs[87411]:_singlevar[87257](?), arg rhs[87417] :
  (460182 'query' lhs[87411] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[631606] "expr temp" "maybe param" "maybe type" "temp"
    (631609 'move' call_tmp[631606](87421 call wrapped _mt[243] lhs[87411]))
    (87429 call(87424 call (partial) writeEF _mt[243] call_tmp[631606]) rhs[87417])
    (513101 return _void[55])
  }
  function chpl__initCopy[87444](ref arg sv[87441]:_singlevar[87257](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[513105] "RVV" "temp"
    unknown call_tmp[631615] "expr temp" "maybe param" "maybe type" "temp"
    (631618 'move' call_tmp[631615](87451 call(87447 call (partial) readFF _mt[243] sv[87441])))
    (513110 'move' ret[513105](513109 'deref' call_tmp[631615]))
    (513107 return ret[513105])
  }
  function chpl__autoCopy[87463](const  ref arg rhs[87460]:_singlevar[87257](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[513114] "RVV" "temp"
    unknown call_tmp[631620] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631623 'move' call_tmp[631620](747848 'new' _singlevar[87257](?) rhs[87460]))
    (513119 'move' ret[513114](513118 'deref' call_tmp[631620]))
    (513116 return ret[513114])
  }
  function chpl__maybeAutoDestroyed[87485](arg x[87482]:_singlevar[87257](?)) param : _unknown[51] "inline"
  {
    unknown ret[513123] "RVV" "param" "temp"
    (513128 'move' ret[513123](513127 'deref' 1))
    (513125 return ret[513123])
  }
  function chpl__autoDestroy[87502](arg x[87499]:_singlevar[87257](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[631627] "expr temp" "maybe param" "maybe type" "temp"
    (631630 'move' call_tmp[631627](87505 call isOwned _mt[243] x[87499]))
    unknown call_tmp[631632] "expr temp" "maybe param" "maybe type" "temp"
    (631635 'move' call_tmp[631632](87509 call == call_tmp[631627] 1))
    unknown call_tmp[631637] "expr temp" "maybe param" "maybe type" "temp"
    (631640 'move' call_tmp[631637](87519 call _cond_test call_tmp[631632]))
    if call_tmp[631637]
    {
      unknown call_tmp[631644] "expr temp" "maybe param" "maybe type" "temp"
      (631647 'move' call_tmp[631644](87512 call wrapped _mt[243] x[87499]))
      (87516 call chpl__delete call_tmp[631644])
    }
    (513130 return _void[55])
  }
  function chpl__readXX[87536](const  ref arg x[87533]:_singlevar[87257](?)) : _unknown[51] "no doc"
  {
    unknown ret[513134] "RVV" "temp"
    unknown call_tmp[631651] "expr temp" "maybe param" "maybe type" "temp"
    (631654 'move' call_tmp[631651](87543 call(87539 call (partial) readXX _mt[243] x[87533])))
    (513139 'move' ret[513134](513138 'deref' call_tmp[631651]))
    (513136 return ret[513134])
  }
  function _singlecls[87889](?).init[87567](arg _mt[87893]:_MT[238], arg this[87891]:_singlecls[87889](?), arg valType[87565]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460265] "temporary of super field" "temp"
    (460273 'move' super_tmp[460265](460266 '.v' this[87891] c"super"))
    (460269 call init _mt[243] super_tmp[460265])
    (477090 'end of statement')
    unknown tmp[460218] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492009] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631656] "expr temp" "maybe param" "maybe type" "temp"
      (631659 'move' call_tmp[631656](460220 '.v' this[87891] c"super"))
      (492013 'move' call_type_tmp[492009](460223 'typeof' call_tmp[631656]))
    }
    (460224 'move' tmp[460218] call_type_tmp[492009])
    unknown call_tmp[631661] "maybe param" "maybe type" "temp"
    (631664 'move' call_tmp[631661](460229 'cast' tmp[460218] this[87891]))
    unknown chpl__thisAsParent[460226] "dead at end of block" "insert auto destroy" "temp"
    (541655 'init var' chpl__thisAsParent[460226] call_tmp[631661] tmp[460218])
    (460232 'setcid' chpl__thisAsParent[460226])
    (477091 'end of statement')
    unknown tmp[460234] "temp" "type variable"
    (460236 'move' tmp[460234] valType[87565])
    (460238 'init field' this[87891] c"valType" tmp[460234])
    (477092 'end of statement')
    unknown tmp[460242] "temp"
    unknown call_tmp[631666] "expr temp" "maybe param" "maybe type" "temp"
    (631669 'move' call_tmp[631666](460251 '.v' this[87891] c"valType"))
    (460245 'default init var' tmp[460242] call_tmp[631666])
    (460247 '.=' this[87891] c"value" tmp[460242])
    (477093 'end of statement')
    val tmp[460254]:chpl_single_aux_t[88059] "temp"
    (460257 'default init var' tmp[460254] chpl_single_aux_t[88059])
    (460259 '.=' this[87891] c"singleAux" tmp[460254])
    (477094 'end of statement')
    (460264 'setcid' this[87891])
    (477095 'end of statement')
    unknown call_tmp[631673] "expr temp" "maybe param" "maybe type" "temp"
    (631676 'move' call_tmp[631673](377481 call singleAux _mt[243] this[87891]))
    (87588 call chpl_single_initAux call_tmp[631673])
    (513141 return _void[55])
  }
  function _singlecls[87889](?).deinit[87594](arg _mt[87897]:_MT[238], arg this[87895]:_singlecls[87889](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631680] "expr temp" "maybe param" "maybe type" "temp"
    (631683 'move' call_tmp[631680](377486 call singleAux _mt[243] this[87895]))
    (87599 call chpl_single_destroyAux call_tmp[631680])
    (513143 return _void[55])
  }
  function _singlecls[87889](?).readFF[87606](arg _mt[87901]:_MT[238], arg this[87899]:_singlecls[87889](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513147] "RVV" "temp"
    unknown ret[87609] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631687] "expr temp" "maybe param" "maybe type" "temp"
    (631690 'move' call_tmp[631687](377491 call valType _mt[243] this[87899]))
    (541657 'default init var' ret[87609] call_tmp[631687])
    (87612 'end of statement')
    {
      const tmp[87667] "const" "temp"
      unknown call_tmp[631692] "expr temp" "maybe param" "maybe type" "temp"
      (631695 'move' call_tmp[631692](87664 '_wide_get_locale' this[87899]))
      (87668 'move' tmp[87667](87665 'deref' call_tmp[631692]))
      {
        unknown localRet[87616] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541659] "maybe param" "maybe type" "temp"
        (541668 'move' type_tmp[541659](541665 call valType _mt[243] this[87899]))
        (541661 'init var split decl' localRet[87616] type_tmp[541659])
        (87619 'end of statement')
        (87623 call chpl_rmem_consist_release)
        (477098 'end of statement')
        unknown call_tmp[631701] "expr temp" "maybe param" "maybe type" "temp"
        (631704 'move' call_tmp[631701](87626 call isFull _mt[243] this[87899]))
        unknown call_tmp[631706] "expr temp" "maybe param" "maybe type" "temp"
        (631709 'move' call_tmp[631706](87650 call _cond_test call_tmp[631701]))
        if call_tmp[631706]
        {
          unknown call_tmp[631713] "maybe param" "maybe type" "temp"
          (631716 'move' call_tmp[631713](377503 call value _mt[243] this[87899]))
          (541670 'init var split init' localRet[87616] call_tmp[631713] type_tmp[541659])
          (477099 'end of statement' localRet[87616])
        }
        {
          unknown call_tmp[631720] "expr temp" "maybe param" "maybe type" "temp"
          (631723 'move' call_tmp[631720](377508 call singleAux _mt[243] this[87899]))
          (87637 call chpl_single_waitFullAndLock call_tmp[631720])
          (477101 'end of statement')
          unknown call_tmp[631727] "maybe param" "maybe type" "temp"
          (631730 'move' call_tmp[631727](377514 call value _mt[243] this[87899]))
          (541673 'init var split init' localRet[87616] call_tmp[631727] type_tmp[541659])
          (477102 'end of statement' localRet[87616])
          unknown call_tmp[631734] "expr temp" "maybe param" "maybe type" "temp"
          (631737 'move' call_tmp[631734](377519 call singleAux _mt[243] this[87899]))
          (87648 call chpl_single_markAndSignalFull call_tmp[631734])
        }
        (87657 call chpl_rmem_consist_acquire)
        (477105 'end of statement')
        (87661 call = ret[87609] localRet[87616])
        (477106 'end of statement' ret[87609] localRet[87616])
      }
      (87671 'elided on block' 0 tmp[87667])
    }
    (513152 'move' ret[513147](513151 'deref' ret[87609]))
    gotoReturn _end_readFF[513145] _end_readFF[513145]
    (477109 'end of statement' ret[87609])
    label _end_readFF[513145]
    (513149 return ret[513147])
  }
  function _singlecls[87889](?).readXX[87682](arg _mt[87905]:_MT[238], arg this[87903]:_singlecls[87889](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513158] "RVV" "temp"
    unknown ret[87685] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631741] "expr temp" "maybe param" "maybe type" "temp"
    (631744 'move' call_tmp[631741](377527 call valType _mt[243] this[87903]))
    (541676 'default init var' ret[87685] call_tmp[631741])
    (87688 'end of statement')
    {
      const tmp[87743] "const" "temp"
      unknown call_tmp[631746] "expr temp" "maybe param" "maybe type" "temp"
      (631749 'move' call_tmp[631746](87740 '_wide_get_locale' this[87903]))
      (87744 'move' tmp[87743](87741 'deref' call_tmp[631746]))
      {
        unknown localRet[87692] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541678] "maybe param" "maybe type" "temp"
        (541687 'move' type_tmp[541678](541684 call valType _mt[243] this[87903]))
        (541680 'init var split decl' localRet[87692] type_tmp[541678])
        (87695 'end of statement')
        (87699 call chpl_rmem_consist_release)
        (477111 'end of statement')
        unknown call_tmp[631755] "expr temp" "maybe param" "maybe type" "temp"
        (631758 'move' call_tmp[631755](87702 call isFull _mt[243] this[87903]))
        unknown call_tmp[631760] "expr temp" "maybe param" "maybe type" "temp"
        (631763 'move' call_tmp[631760](87726 call _cond_test call_tmp[631755]))
        if call_tmp[631760]
        {
          unknown call_tmp[631767] "maybe param" "maybe type" "temp"
          (631770 'move' call_tmp[631767](377539 call value _mt[243] this[87903]))
          (541689 'init var split init' localRet[87692] call_tmp[631767] type_tmp[541678])
          (477112 'end of statement' localRet[87692])
        }
        {
          unknown call_tmp[631774] "expr temp" "maybe param" "maybe type" "temp"
          (631777 'move' call_tmp[631774](377544 call singleAux _mt[243] this[87903]))
          (87713 call chpl_single_lock call_tmp[631774])
          (477114 'end of statement')
          unknown call_tmp[631781] "maybe param" "maybe type" "temp"
          (631784 'move' call_tmp[631781](377550 call value _mt[243] this[87903]))
          (541692 'init var split init' localRet[87692] call_tmp[631781] type_tmp[541678])
          (477115 'end of statement' localRet[87692])
          unknown call_tmp[631788] "expr temp" "maybe param" "maybe type" "temp"
          (631791 'move' call_tmp[631788](377555 call singleAux _mt[243] this[87903]))
          (87724 call chpl_single_unlock call_tmp[631788])
        }
        (87733 call chpl_rmem_consist_acquire)
        (477118 'end of statement')
        (87737 call = ret[87685] localRet[87692])
        (477119 'end of statement' ret[87685] localRet[87692])
      }
      (87747 'elided on block' 0 tmp[87743])
    }
    (513163 'move' ret[513158](513162 'deref' ret[87685]))
    gotoReturn _end_readXX[513156] _end_readXX[513156]
    (477122 'end of statement' ret[87685])
    label _end_readXX[513156]
    (513160 return ret[513158])
  }
  function _singlecls[87889](?).writeEF[87762](arg _mt[87909]:_MT[238], arg this[87907]:_singlecls[87889](?), arg val[87759] :
  (377563 call valType _mt[243] this[87907])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[87828] "const" "temp"
      unknown call_tmp[631795] "expr temp" "maybe param" "maybe type" "temp"
      (631798 'move' call_tmp[631795](87825 '_wide_get_locale' this[87907]))
      (87829 'move' tmp[87828](87826 'deref' call_tmp[631795]))
      {
        (87773 call chpl_rmem_consist_release)
        (477124 'end of statement')
        unknown call_tmp[631802] "expr temp" "maybe param" "maybe type" "temp"
        (631805 'move' call_tmp[631802](377571 call singleAux _mt[243] this[87907]))
        (87779 call chpl_single_lock call_tmp[631802])
        (477125 'end of statement')
        unknown call_tmp[631809] "expr temp" "maybe param" "maybe type" "temp"
        (631812 'move' call_tmp[631809](87782 call isFull _mt[243] this[87907]))
        unknown call_tmp[631814] "expr temp" "maybe param" "maybe type" "temp"
        (631817 'move' call_tmp[631814](87806 call _cond_test call_tmp[631809]))
        if call_tmp[631814]
        {
          (87804 call halt "single var already defined")
        }
        unknown call_tmp[631821] "expr temp" "maybe param" "maybe type" "temp"
        (631824 'move' call_tmp[631821](377576 call value _mt[243] this[87907]))
        (87813 call = call_tmp[631821] val[87759])
        (477127 'end of statement')
        unknown call_tmp[631828] "expr temp" "maybe param" "maybe type" "temp"
        (631831 'move' call_tmp[631828](377582 call singleAux _mt[243] this[87907]))
        (87819 call chpl_single_markAndSignalFull call_tmp[631828])
        (477128 'end of statement')
        (87823 call chpl_rmem_consist_acquire)
      }
      (87832 'elided on block' 0 tmp[87828])
    }
    (513167 return _void[55])
  }
  {
    (87768 call <(87765 'lifetime_of' this[87907])(87767 'lifetime_of' val[87759]))
  }
  function _singlecls[87889](?).isFull[87842](arg _mt[87913]:_MT[238], arg this[87911]:_singlecls[87889](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513171] "RVV" "temp"
    unknown b[87845] "dead at end of block" "insert auto destroy"
    (541695 'default init var' b[87845] bool[10])
    (87848 'end of statement')
    {
      const tmp[87875] "const" "temp"
      unknown call_tmp[631833] "expr temp" "maybe param" "maybe type" "temp"
      (631836 'move' call_tmp[631833](87872 '_wide_get_locale' this[87911]))
      (87876 'move' tmp[87875](87873 'deref' call_tmp[631833]))
      {
        (87853 call chpl_rmem_consist_release)
        (477130 'end of statement')
        unknown call_tmp[631840] "expr temp" "maybe param" "maybe type" "temp"
        (631843 'move' call_tmp[631840](377589 call value _mt[243] this[87911]))
        unknown call_tmp[631845] "expr temp" "maybe param" "maybe type" "temp"
        (631848 'move' call_tmp[631845](87861 call c_ptrTo call_tmp[631840]))
        unknown call_tmp[631852] "expr temp" "maybe param" "maybe type" "temp"
        (631855 'move' call_tmp[631852](377594 call singleAux _mt[243] this[87911]))
        unknown call_tmp[631857] "expr temp" "maybe param" "maybe type" "temp"
        (631860 'move' call_tmp[631857](87864 call chpl_single_isFull call_tmp[631845] call_tmp[631852]))
        (87865 call = b[87845] call_tmp[631857])
        (477131 'end of statement' b[87845])
        (87870 call chpl_rmem_consist_acquire)
      }
      (87879 'elided on block' 0 tmp[87875])
    }
    (513176 'move' ret[513171](513175 'deref' b[87845]))
    gotoReturn _end_isFull[513169] _end_isFull[513169]
    (477134 'end of statement' b[87845])
    label _end_isFull[513169]
    (513173 return ret[513171])
  }
  function _singlecls[87889](?).super[779709](arg _mt[779711]:_MT[238], arg this[779713]:_singlecls[87889](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779723] "RVV" "temp"
    unknown call_tmp[779730] "expr temp" "maybe param" "maybe type" "temp"
    (779733 'move' call_tmp[779730](779717 '.v' this[779713] c"super"))
    (779728 'move' ret[779723](779727 'deref' call_tmp[779730]))
    (779725 return ret[779723])
  }
  function _singlecls[779740](?).valType[779735](arg _mt[779737]:_MT[238], arg this[779742]:_singlecls[779740](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779777] "RVV" "temp" "type variable"
    unknown borrowOfThis[779744]
    (779769 'end of statement')
    (779746 'move' borrowOfThis[779744](779749 call _cast _borrowedNonNilable[214](?) this[779742]))
    (779770 'end of statement' borrowOfThis[779744])
    unknown call_tmp[779791] "expr temp" "maybe param" "maybe type" "temp"
    (779794 'move' call_tmp[779791](779759 'is bound' borrowOfThis[779744] c"valType"))
    if call_tmp[779791]
    {
      unknown call_tmp[779796] "expr temp" "maybe param" "maybe type" "temp"
      (779799 'move' call_tmp[779796](779754 '.v' borrowOfThis[779744] c"valType"))
      unknown call_tmp[779801] "expr temp" "maybe param" "maybe type" "temp"
      (779804 'move' call_tmp[779801](779755 call chpl_checkLegalTypeFieldAccessor this[779742] call_tmp[779796] "valType"))
      (779782 'move' ret[779777](779781 'deref' call_tmp[779801]))
      gotoReturn _end_valType[779775] _end_valType[779775]
      (779772 'end of statement' borrowOfThis[779744])
    }
    {
      (779787 'move' ret[779777](779786 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779775] _end_valType[779775]
    }
    label _end_valType[779775]
    (779779 return ret[779777])
  }
  function _singlecls[779740](?).valType[779806](arg _mt[779808]:_MT[238], arg this[779810]:_singlecls[779740](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779845] "RVV" "temp" "type variable"
    unknown borrowOfThis[779812] "type variable"
    (779837 'end of statement')
    (779814 'move' borrowOfThis[779812](779817 call _cast _borrowedNonNilable[214](?) this[779810]))
    (779838 'end of statement' borrowOfThis[779812])
    unknown call_tmp[779859] "expr temp" "maybe param" "maybe type" "temp"
    (779862 'move' call_tmp[779859](779827 'is bound' borrowOfThis[779812] c"valType"))
    if call_tmp[779859]
    {
      unknown call_tmp[779864] "expr temp" "maybe param" "maybe type" "temp"
      (779867 'move' call_tmp[779864](779822 '.v' borrowOfThis[779812] c"valType"))
      unknown call_tmp[779869] "expr temp" "maybe param" "maybe type" "temp"
      (779872 'move' call_tmp[779869](779823 call chpl_checkLegalTypeFieldAccessor this[779810] call_tmp[779864] "valType"))
      (779850 'move' ret[779845](779849 'deref' call_tmp[779869]))
      gotoReturn _end_valType[779843] _end_valType[779843]
      (779840 'end of statement' borrowOfThis[779812])
    }
    {
      (779855 'move' ret[779845](779854 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779843] _end_valType[779843]
    }
    label _end_valType[779843]
    (779847 return ret[779845])
  }
  function _singlecls[87889](?).value[779874](arg _mt[779876]:_MT[238], arg this[779878]:_singlecls[87889](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779888] "RVV" "temp"
    unknown call_tmp[779895] "expr temp" "maybe param" "maybe type" "temp"
    (779898 'move' call_tmp[779895](779882 '.' this[779878] c"value"))
    (779893 'move' ret[779888](779892 'addr of' call_tmp[779895]))
    (779890 return ret[779888])
  }
  function _singlecls[87889](?).singleAux[779900](arg _mt[779902]:_MT[238], arg this[779904]:_singlecls[87889](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779914] "RVV" "temp"
    unknown call_tmp[779921] "expr temp" "maybe param" "maybe type" "temp"
    (779924 'move' call_tmp[779921](779908 '.' this[779904] c"singleAux"))
    (779919 'move' ret[779914](779918 'addr of' call_tmp[779921]))
    (779916 return ret[779914])
  }
  function _singlecls[87889](?).writeThis[779926](arg _mt[779930]:_MT[238], arg this[779928]:_singlecls[87889](?), arg f[779929]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779935 call writeThisDefaultImpl f[779929] this[779928])
    (779940 return _void[55])
  }
  function _singlecls[87889](?).readThis[779942](arg _mt[779946]:_MT[238], arg this[779944]:_singlecls[87889](?), arg f[779945]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779950 call readThisDefaultImpl f[779945] this[779944])
    (779956 return _void[55])
  }
  type _singlecls[87889](?) val super[355693]:object[22] "super class" unknown valType[87550] "type variable" unknown value[87554] valType[87550] val singleAux[87559]:chpl_single_aux_t[88059] chpl_single_aux_t[88059]
  type _singlecls[779740](?)
  type unmanaged _singlecls[415472](?)
  type _singlecls[377412](?)
  function isSingleValue[87922](arg x[87919]:_singlevar[87257](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513182] "RVV" "param" "temp"
    (513187 'move' ret[513182](513186 'deref' 1))
    (513184 return ret[513182])
  }
  function isSingleValue[87934](arg x[87932]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513191] "RVV" "param" "temp"
    (513196 'move' ret[513191](513195 'deref' 0))
    (513193 return ret[513191])
  }
  (355119 'used modules list'(84294 'use' ChapelStandard[20264])(84298 'use' AlignedTSupport[88358])(84301 'use' MemConsistency[186614])(84304 'use' SyncVarRuntimeSupport[87944]))
}