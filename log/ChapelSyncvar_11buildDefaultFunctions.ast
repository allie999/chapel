AST dump for ChapelSyncvar after pass buildDefaultFunctions.
Module use list: ChapelStandard AlignedTSupport MemConsistency SyncVarRuntimeSupport 

{
  function chpl__init_ChapelSyncvar[416000]() : void[4] "insert line file info" "module init"
  {
    (541560 'init var' useNativeSyncVar[84492] 1)
    (84495 'end of statement')
    (513180 return _void[55])
  }
  function isSupported[84309](arg t[84307]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512714] "RVV" "param" "temp"
    unknown tmp[422071] "maybe param" "temp"
    unknown tmp[422092] "maybe param" "temp"
    unknown tmp[422113] "maybe param" "temp"
    unknown tmp[422134] "maybe param" "temp"
    unknown tmp[422155] "maybe param" "temp"
    unknown tmp[422176] "maybe param" "temp"
    unknown tmp[422197] "maybe param" "temp"
    unknown tmp[422218] "maybe param" "temp"
    (422229 'move' tmp[422218](84314 call isNothingType t[84307]))
    unknown call_tmp[629949] "expr temp" "maybe param" "maybe type" "temp"
    (629952 'move' call_tmp[629949](422231 call _cond_invalid tmp[422218]))
    if call_tmp[629949]
    {
      (422234 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560577] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560578] "maybe param" "temp"
    unknown call_tmp[629954] "expr temp" "maybe param" "maybe type" "temp"
    (629957 'move' call_tmp[629954](422219 call isTrue tmp[422218]))
    (560583 'move' tmp[560578](560581 call _cond_test call_tmp[629954]))
    if tmp[560578]
    {
      (560588 'move' tmp[560577](560585 '_paramFoldLogical' tmp[560578] 1))
    }
    {
      unknown tmp[560590] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629959] "expr temp" "maybe param" "maybe type" "temp"
      (629962 'move' call_tmp[629959](84318 call isBoolType t[84307]))
      (560592 'move' tmp[560590](422223 call isTrue call_tmp[629959]))
      (560597 'move' tmp[560577](560594 '_paramFoldLogical' tmp[560578] tmp[560590]))
    }
    (422208 'move' tmp[422197] tmp[560577])
    unknown call_tmp[629964] "expr temp" "maybe param" "maybe type" "temp"
    (629967 'move' call_tmp[629964](422210 call _cond_invalid tmp[422197]))
    if call_tmp[629964]
    {
      (422213 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560604] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560605] "maybe param" "temp"
    unknown call_tmp[629969] "expr temp" "maybe param" "maybe type" "temp"
    (629972 'move' call_tmp[629969](422198 call isTrue tmp[422197]))
    (560610 'move' tmp[560605](560608 call _cond_test call_tmp[629969]))
    if tmp[560605]
    {
      (560615 'move' tmp[560604](560612 '_paramFoldLogical' tmp[560605] 1))
    }
    {
      unknown tmp[560617] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629974] "expr temp" "maybe param" "maybe type" "temp"
      (629977 'move' call_tmp[629974](84324 call isIntegralType t[84307]))
      (560619 'move' tmp[560617](422202 call isTrue call_tmp[629974]))
      (560624 'move' tmp[560604](560621 '_paramFoldLogical' tmp[560605] tmp[560617]))
    }
    (422187 'move' tmp[422176] tmp[560604])
    unknown call_tmp[629979] "expr temp" "maybe param" "maybe type" "temp"
    (629982 'move' call_tmp[629979](422189 call _cond_invalid tmp[422176]))
    if call_tmp[629979]
    {
      (422192 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560631] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560632] "maybe param" "temp"
    unknown call_tmp[629984] "expr temp" "maybe param" "maybe type" "temp"
    (629987 'move' call_tmp[629984](422177 call isTrue tmp[422176]))
    (560637 'move' tmp[560632](560635 call _cond_test call_tmp[629984]))
    if tmp[560632]
    {
      (560642 'move' tmp[560631](560639 '_paramFoldLogical' tmp[560632] 1))
    }
    {
      unknown tmp[560644] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[629989] "expr temp" "maybe param" "maybe type" "temp"
      (629992 'move' call_tmp[629989](84330 call isRealType t[84307]))
      (560646 'move' tmp[560644](422181 call isTrue call_tmp[629989]))
      (560651 'move' tmp[560631](560648 '_paramFoldLogical' tmp[560632] tmp[560644]))
    }
    (422166 'move' tmp[422155] tmp[560631])
    unknown call_tmp[629994] "expr temp" "maybe param" "maybe type" "temp"
    (629997 'move' call_tmp[629994](422168 call _cond_invalid tmp[422155]))
    if call_tmp[629994]
    {
      (422171 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560658] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560659] "maybe param" "temp"
    unknown call_tmp[629999] "expr temp" "maybe param" "maybe type" "temp"
    (630002 'move' call_tmp[629999](422156 call isTrue tmp[422155]))
    (560664 'move' tmp[560659](560662 call _cond_test call_tmp[629999]))
    if tmp[560659]
    {
      (560669 'move' tmp[560658](560666 '_paramFoldLogical' tmp[560659] 1))
    }
    {
      unknown tmp[560671] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630004] "expr temp" "maybe param" "maybe type" "temp"
      (630007 'move' call_tmp[630004](84336 call isImagType t[84307]))
      (560673 'move' tmp[560671](422160 call isTrue call_tmp[630004]))
      (560678 'move' tmp[560658](560675 '_paramFoldLogical' tmp[560659] tmp[560671]))
    }
    (422145 'move' tmp[422134] tmp[560658])
    unknown call_tmp[630009] "expr temp" "maybe param" "maybe type" "temp"
    (630012 'move' call_tmp[630009](422147 call _cond_invalid tmp[422134]))
    if call_tmp[630009]
    {
      (422150 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560685] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560686] "maybe param" "temp"
    unknown call_tmp[630014] "expr temp" "maybe param" "maybe type" "temp"
    (630017 'move' call_tmp[630014](422135 call isTrue tmp[422134]))
    (560691 'move' tmp[560686](560689 call _cond_test call_tmp[630014]))
    if tmp[560686]
    {
      (560696 'move' tmp[560685](560693 '_paramFoldLogical' tmp[560686] 1))
    }
    {
      unknown tmp[560698] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630019] "expr temp" "maybe param" "maybe type" "temp"
      (630022 'move' call_tmp[630019](84342 call isEnumType t[84307]))
      (560700 'move' tmp[560698](422139 call isTrue call_tmp[630019]))
      (560705 'move' tmp[560685](560702 '_paramFoldLogical' tmp[560686] tmp[560698]))
    }
    (422124 'move' tmp[422113] tmp[560685])
    unknown call_tmp[630024] "expr temp" "maybe param" "maybe type" "temp"
    (630027 'move' call_tmp[630024](422126 call _cond_invalid tmp[422113]))
    if call_tmp[630024]
    {
      (422129 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560712] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560713] "maybe param" "temp"
    unknown call_tmp[630029] "expr temp" "maybe param" "maybe type" "temp"
    (630032 'move' call_tmp[630029](422114 call isTrue tmp[422113]))
    (560718 'move' tmp[560713](560716 call _cond_test call_tmp[630029]))
    if tmp[560713]
    {
      (560723 'move' tmp[560712](560720 '_paramFoldLogical' tmp[560713] 1))
    }
    {
      unknown tmp[560725] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630034] "expr temp" "maybe param" "maybe type" "temp"
      (630037 'move' call_tmp[630034](84348 call isClassType t[84307]))
      (560727 'move' tmp[560725](422118 call isTrue call_tmp[630034]))
      (560732 'move' tmp[560712](560729 '_paramFoldLogical' tmp[560713] tmp[560725]))
    }
    (422103 'move' tmp[422092] tmp[560712])
    unknown call_tmp[630039] "expr temp" "maybe param" "maybe type" "temp"
    (630042 'move' call_tmp[630039](422105 call _cond_invalid tmp[422092]))
    if call_tmp[630039]
    {
      (422108 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560739] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560740] "maybe param" "temp"
    unknown call_tmp[630044] "expr temp" "maybe param" "maybe type" "temp"
    (630047 'move' call_tmp[630044](422093 call isTrue tmp[422092]))
    (560745 'move' tmp[560740](560743 call _cond_test call_tmp[630044]))
    if tmp[560740]
    {
      (560750 'move' tmp[560739](560747 '_paramFoldLogical' tmp[560740] 1))
    }
    {
      unknown tmp[560752] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630049] "expr temp" "maybe param" "maybe type" "temp"
      (630052 'move' call_tmp[630049](84354 call isStringType t[84307]))
      (560754 'move' tmp[560752](422097 call isTrue call_tmp[630049]))
      (560759 'move' tmp[560739](560756 '_paramFoldLogical' tmp[560740] tmp[560752]))
    }
    (422082 'move' tmp[422071] tmp[560739])
    unknown call_tmp[630054] "expr temp" "maybe param" "maybe type" "temp"
    (630057 'move' call_tmp[630054](422084 call _cond_invalid tmp[422071]))
    if call_tmp[630054]
    {
      (422087 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560766] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560767] "maybe param" "temp"
    unknown call_tmp[630059] "expr temp" "maybe param" "maybe type" "temp"
    (630062 'move' call_tmp[630059](422072 call isTrue tmp[422071]))
    (560772 'move' tmp[560767](560770 call _cond_test call_tmp[630059]))
    if tmp[560767]
    {
      (560777 'move' tmp[560766](560774 '_paramFoldLogical' tmp[560767] 1))
    }
    {
      unknown tmp[560779] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630064] "expr temp" "maybe param" "maybe type" "temp"
      (630067 'move' call_tmp[630064](84359 call == t[84307] chpl_taskID_t[163]))
      (560781 'move' tmp[560779](422076 call isTrue call_tmp[630064]))
      (560786 'move' tmp[560766](560783 '_paramFoldLogical' tmp[560767] tmp[560779]))
    }
    (512719 'move' ret[512714](512718 'deref' tmp[560766]))
    (512716 return ret[512714])
  }
  function ensureFEType[84372](arg t[84370]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[630069] "expr temp" "maybe param" "maybe type" "temp"
    (630072 'move' call_tmp[630069](84377 call isSupported t[84370]))
    unknown call_tmp[630074] "expr temp" "maybe param" "maybe type" "temp"
    (630077 'move' call_tmp[630074](84379 call == call_tmp[630069] 0))
    unknown call_tmp[630079] "expr temp" "maybe param" "maybe type" "temp"
    (630082 'move' call_tmp[630079](84423 call _cond_test call_tmp[630074]))
    if call_tmp[630079]
    {
      unknown call_tmp[630084] "expr temp" "maybe param" "maybe type" "temp"
      (630087 'move' call_tmp[630084](84402 call _cast string[26] t[84370]))
      (84421 call compilerError "sync/single types cannot contain type '" call_tmp[630084] "'")
    }
    unknown call_tmp[630089] "expr temp" "maybe param" "maybe type" "temp"
    (630092 'move' call_tmp[630089](84432 call isNonNilableClass t[84370]))
    unknown call_tmp[630094] "expr temp" "maybe param" "maybe type" "temp"
    (630097 'move' call_tmp[630094](84454 call _cond_test call_tmp[630089]))
    if call_tmp[630094]
    {
      (84452 call compilerError "sync/single types cannot contain non-nilable classes")
    }
    unknown call_tmp[630099] "expr temp" "maybe param" "maybe type" "temp"
    (630102 'move' call_tmp[630099](84462 call isGenericType t[84370]))
    unknown call_tmp[630104] "expr temp" "maybe param" "maybe type" "temp"
    (630107 'move' call_tmp[630104](84484 call _cond_test call_tmp[630099]))
    if call_tmp[630104]
    {
      (84482 call compilerError "sync/single types cannot contain generic types")
    }
    (512721 return _void[55])
  }
  unknown useNativeSyncVar[84492] "config" "no doc" "param"
  function getSyncClassType[84500](arg valType[84498]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512725] "RVV" "temp" "type variable"
    unknown tmp[422239] "maybe param" "temp"
    (422250 'move' tmp[422239] useNativeSyncVar[84492])
    unknown call_tmp[630109] "expr temp" "maybe param" "maybe type" "temp"
    (630112 'move' call_tmp[630109](422252 call _cond_invalid tmp[422239]))
    if call_tmp[630109]
    {
      (422255 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560793] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560794] "maybe param" "temp"
    unknown call_tmp[630114] "expr temp" "maybe param" "maybe type" "temp"
    (630117 'move' call_tmp[630114](422240 call isTrue tmp[422239]))
    (560799 'move' tmp[560794](560797 call _cond_test call_tmp[630114]))
    if tmp[560794]
    {
      unknown tmp[560801] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[630119] "expr temp" "maybe param" "maybe type" "temp"
      (630122 'move' call_tmp[630119](84506 call supportsNativeSyncVar valType[84498]))
      (560803 'move' tmp[560801](422243 call isTrue call_tmp[630119]))
      (560808 'move' tmp[560793](560805 '_paramFoldLogical' tmp[560794] tmp[560801]))
    }
    {
      (560813 'move' tmp[560793](560810 '_paramFoldLogical' tmp[560794] 0))
    }
    unknown call_tmp[630124] "expr temp" "maybe param" "maybe type" "temp"
    (630127 'move' call_tmp[630124](84525 call _cond_test tmp[560793]))
    if call_tmp[630124]
    {
      unknown call_tmp[630129] "expr temp" "maybe param" "maybe type" "temp"
      (630132 'move' call_tmp[630129](84512 call unmanaged _qthreads_synccls[415451](?) valType[84498]))
      (512730 'move' ret[512725](512729 'deref' call_tmp[630129]))
      gotoReturn _end_getSyncClassType[512723] _end_getSyncClassType[512723]
    }
    {
      unknown call_tmp[630134] "expr temp" "maybe param" "maybe type" "temp"
      (630137 'move' call_tmp[630134](84520 call unmanaged _synccls[415454](?) valType[84498]))
      (512735 'move' ret[512725](512734 'deref' call_tmp[630134]))
      gotoReturn _end_getSyncClassType[512723] _end_getSyncClassType[512723]
    }
    label _end_getSyncClassType[512723]
    (512727 return ret[512725])
  }
  function chpl__readXX[84536](arg x[84534]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[512741] "RVV" "temp"
    (512746 'move' ret[512741](512745 'deref' x[84534]))
    (512743 return ret[512741])
  }
  function _syncvar[84947](?).init[84566](arg _mt[84951]:_MT[238], ref arg this[84949]:_syncvar[84947](?), arg valType[84564]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (84571 call ensureFEType valType[84564])
    (476874 'end of statement')
    unknown tmp[459773] "temp" "type variable"
    (459775 'move' tmp[459773] valType[84564])
    (459777 'init field' this[84949] c"valType" tmp[459773])
    (476875 'end of statement')
    unknown call_tmp[630139] "expr temp" "maybe param" "maybe type" "temp"
    (630142 'move' call_tmp[630139](84594 call getSyncClassType valType[84564]))
    unknown call_tmp[630144] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630147 'move' call_tmp[630144](747866 'new' call_tmp[630139]))
    unknown call_tmp[630149] "expr temp" "maybe param" "maybe type" "temp"
    (630152 'move' call_tmp[630149](459792 '.v' this[84949] c"valType"))
    unknown call_tmp[630154] "maybe param" "maybe type" "temp"
    (630157 'move' call_tmp[630154](459784 call getSyncClassType call_tmp[630149]))
    unknown tmp[459781] "temp"
    (459786 'init var' tmp[459781] call_tmp[630144] call_tmp[630154])
    (459788 'init field' this[84949] c"wrapped" tmp[459781])
    (476876 'end of statement')
    unknown tmp[459797] "temp"
    (459800 'init var' tmp[459797] 1 bool[10])
    (459802 'init field' this[84949] c"isOwned" tmp[459797])
    (476877 'end of statement')
    (512748 return _void[55])
  }
  function _syncvar[84947](?).init[84608](arg _mt[84955]:_MT[238], ref arg this[84953]:_syncvar[84947](?), const arg other[84605]:_syncvar[84947](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[459806] "temp" "type variable"
    (459808 'move' tmp[459806](84615 call valType _mt[243] other[84605]))
    (459810 'init field' this[84953] c"valType" tmp[459806])
    (476878 'end of statement')
    unknown call_tmp[630163] "maybe param" "maybe type" "temp"
    (630166 'move' call_tmp[630163](84627 call wrapped _mt[243] other[84605]))
    unknown call_tmp[630168] "expr temp" "maybe param" "maybe type" "temp"
    (630171 'move' call_tmp[630168](459825 '.v' this[84953] c"valType"))
    unknown call_tmp[630173] "maybe param" "maybe type" "temp"
    (630176 'move' call_tmp[630173](459817 call getSyncClassType call_tmp[630168]))
    unknown tmp[459814] "temp"
    (459819 'init var' tmp[459814] call_tmp[630163] call_tmp[630173])
    (459821 'init field' this[84953] c"wrapped" tmp[459814])
    (476879 'end of statement')
    unknown tmp[459828] "temp"
    (459831 'init var' tmp[459828] 0 bool[10])
    (459833 'init field' this[84953] c"isOwned" tmp[459828])
    (476880 'end of statement')
    (512750 return _void[55])
  }
  function _syncvar[84947](?).init=[84651](arg _mt[84959]:_MT[238], ref arg this[84957]:_syncvar[84947](?), const arg other[84648]:_syncvar[84947](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630178] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630181 'move' call_tmp[630178](84660 'typeof' this[84957]))
    unknown call_tmp[630185] "expr temp" "maybe param" "maybe type" "temp"
    (630188 'move' call_tmp[630185](84661 call valType _mt[243] call_tmp[630178]))
    unknown call_tmp[630192] "expr temp" "maybe param" "maybe type" "temp"
    (630195 'move' call_tmp[630192](84655 call valType _mt[243] other[84648]))
    unknown call_tmp[630197] "expr temp" "maybe param" "maybe type" "temp"
    (630200 'move' call_tmp[630197](354265 'is_coercible' call_tmp[630185] call_tmp[630192]))
    unknown call_tmp[630202] "expr temp" "maybe param" "maybe type" "temp"
    (630205 'move' call_tmp[630202](84666 call == call_tmp[630197] 0))
    unknown call_tmp[630207] "expr temp" "maybe param" "maybe type" "temp"
    (630210 'move' call_tmp[630207](84796 call _cond_test call_tmp[630202]))
    if call_tmp[630207]
    {
      unknown call_tmp[630212] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630215 'move' call_tmp[630212](84670 'typeof' this[84957]))
      unknown call_tmp[630217] "expr temp" "maybe param" "maybe type" "temp"
      (630220 'move' call_tmp[630217](84672 call _cast string[26] call_tmp[630212]))
      unknown call_tmp[630222] "expr temp" "maybe param" "maybe type" "temp"
      (630225 'move' call_tmp[630222](84674 call + "'" call_tmp[630217]))
      unknown call_tmp[630227] "expr temp" "maybe param" "maybe type" "temp"
      (630230 'move' call_tmp[630227](84693 call + call_tmp[630222] "' from '"))
      unknown call_tmp[630232] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630235 'move' call_tmp[630232](84696 'typeof' other[84648]))
      unknown call_tmp[630237] "expr temp" "maybe param" "maybe type" "temp"
      (630240 'move' call_tmp[630237](84698 call _cast string[26] call_tmp[630232]))
      unknown call_tmp[630242] "expr temp" "maybe param" "maybe type" "temp"
      (630245 'move' call_tmp[630242](84700 call + call_tmp[630227] call_tmp[630237]))
      unknown call_tmp[630247] "maybe param" "maybe type" "temp"
      (630250 'move' call_tmp[630247](84703 call + call_tmp[630242] "'"))
      unknown theseTypes[84705] "dead at end of block" "param"
      (541562 'init var' theseTypes[84705] call_tmp[630247])
      (84708 'end of statement')
      unknown call_tmp[630254] "expr temp" "maybe param" "maybe type" "temp"
      (630257 'move' call_tmp[630254](84728 call valType _mt[243] other[84648]))
      unknown call_tmp[630259] "expr temp" "maybe param" "maybe type" "temp"
      (630262 'move' call_tmp[630259](84732 call _cast string[26] call_tmp[630254]))
      unknown call_tmp[630264] "expr temp" "maybe param" "maybe type" "temp"
      (630267 'move' call_tmp[630264](84734 call + "because '" call_tmp[630259]))
      unknown call_tmp[630269] "expr temp" "maybe param" "maybe type" "temp"
      (630272 'move' call_tmp[630269](84753 call + call_tmp[630264] "' is not coercible to '"))
      unknown call_tmp[630274] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (630277 'move' call_tmp[630274](84756 'typeof' this[84957]))
      unknown call_tmp[630281] "expr temp" "maybe param" "maybe type" "temp"
      (630284 'move' call_tmp[630281](84757 call valType _mt[243] call_tmp[630274]))
      unknown call_tmp[630286] "expr temp" "maybe param" "maybe type" "temp"
      (630289 'move' call_tmp[630286](84761 call _cast string[26] call_tmp[630281]))
      unknown call_tmp[630291] "expr temp" "maybe param" "maybe type" "temp"
      (630294 'move' call_tmp[630291](84763 call + call_tmp[630269] call_tmp[630286]))
      unknown call_tmp[630296] "maybe param" "maybe type" "temp"
      (630299 'move' call_tmp[630296](84766 call + call_tmp[630291] "'"))
      unknown because[84768] "dead at end of block" "param"
      (541564 'init var' because[84768] call_tmp[630296])
      (84771 'end of statement')
      (84794 call compilerError "cannot initialize " theseTypes[84705] " " because[84768])
    }
    unknown call_tmp[630303] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630306 'move' call_tmp[630303](84806 'typeof' this[84957]))
    unknown call_tmp[630310] "expr temp" "maybe param" "maybe type" "temp"
    (630313 'move' call_tmp[630310](84807 call valType _mt[243] call_tmp[630303]))
    (84811 call(84802 call (partial) init _mt[243] this[84957]) call_tmp[630310])
    (476882 'end of statement')
    unknown call_tmp[630319] "expr temp" "maybe param" "maybe type" "temp"
    (630322 'move' call_tmp[630319](84824 call(84820 call (partial) readFE _mt[243] other[84648])))
    (84826 call(84816 call (partial) writeEF _mt[243] this[84957]) call_tmp[630319])
    (512752 return _void[55])
  }
  function _syncvar[84947](?).init=[84839](arg _mt[84963]:_MT[238], ref arg this[84961]:_syncvar[84947](?), const arg other[84836] :
  (84833 call valType _mt[243] this[84961])) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630328] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (630331 'move' call_tmp[630328](84846 'typeof' other[84836]))
    (84848 call(84842 call (partial) init _mt[243] this[84961]) call_tmp[630328])
    (476884 'end of statement')
    (84857 call(84852 call (partial) writeEF _mt[243] this[84961]) other[84836])
    (512754 return _void[55])
  }
  function _syncvar[84947](?).deinit[84863](arg _mt[84967]:_MT[238], arg this[84965]:_syncvar[84947](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630337] "expr temp" "maybe param" "maybe type" "temp"
    (630340 'move' call_tmp[630337](376953 call isOwned _mt[243] this[84965]))
    unknown call_tmp[630342] "expr temp" "maybe param" "maybe type" "temp"
    (630345 'move' call_tmp[630342](84867 call == call_tmp[630337] 1))
    unknown call_tmp[630347] "expr temp" "maybe param" "maybe type" "temp"
    (630350 'move' call_tmp[630347](84874 call _cond_test call_tmp[630342]))
    if call_tmp[630347]
    {
      unknown call_tmp[630354] "expr temp" "maybe param" "maybe type" "temp"
      (630357 'move' call_tmp[630354](376958 call wrapped _mt[243] this[84965]))
      (84871 call chpl__delete call_tmp[630354])
    }
    (512756 return _void[55])
  }
  function _syncvar[84947](?).readThis[84886](arg _mt[84971]:_MT[238], arg this[84969]:_syncvar[84947](?), arg x[84884]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84909 call compilerError "sync variables cannot currently be read - use writeEF/writeFF instead")
    (512758 return _void[55])
  }
  function _syncvar[84947](?).writeThis[84918](arg _mt[84975]:_MT[238], arg this[84973]:_syncvar[84947](?), arg x[84916]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (84941 call compilerError "sync variables cannot currently be written - apply readFE/readFF() to those variables first")
    (512760 return _void[55])
  }
  function _syncvar[84947](?).valType[775741](arg _mt[775743]:_MT[238], arg this[775745]:_syncvar[84947](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775764] "RVV" "temp" "type variable"
    unknown call_tmp[775778] "expr temp" "maybe param" "maybe type" "temp"
    (775781 'move' call_tmp[775778](775750 'is bound' this[775745] c"valType"))
    if call_tmp[775778]
    {
      unknown call_tmp[775783] "expr temp" "maybe param" "maybe type" "temp"
      (775786 'move' call_tmp[775783](775749 '.v' this[775745] c"valType"))
      (775769 'move' ret[775764](775768 'deref' call_tmp[775783]))
      gotoReturn _end_valType[775762] _end_valType[775762]
    }
    {
      (775774 'move' ret[775764](775773 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775762] _end_valType[775762]
    }
    label _end_valType[775762]
    (775766 return ret[775764])
  }
  function _syncvar[84947](?).valType[775788](arg _mt[775790]:_MT[238], arg this[775792]:_syncvar[84947](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775811] "RVV" "temp" "type variable"
    unknown call_tmp[775825] "expr temp" "maybe param" "maybe type" "temp"
    (775828 'move' call_tmp[775825](775797 'is bound' this[775792] c"valType"))
    if call_tmp[775825]
    {
      unknown call_tmp[775830] "expr temp" "maybe param" "maybe type" "temp"
      (775833 'move' call_tmp[775830](775796 '.v' this[775792] c"valType"))
      (775816 'move' ret[775811](775815 'deref' call_tmp[775830]))
      gotoReturn _end_valType[775809] _end_valType[775809]
    }
    {
      (775821 'move' ret[775811](775820 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[775809] _end_valType[775809]
    }
    label _end_valType[775809]
    (775813 return ret[775811])
  }
  function _syncvar[84947](?).wrapped[775835](arg _mt[775837]:_MT[238], ref arg this[775839]:_syncvar[84947](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775849] "RVV" "temp"
    unknown call_tmp[775856] "expr temp" "maybe param" "maybe type" "temp"
    (775859 'move' call_tmp[775856](775843 '.' this[775839] c"wrapped"))
    (775854 'move' ret[775849](775853 'addr of' call_tmp[775856]))
    (775851 return ret[775849])
  }
  function _syncvar[84947](?).isOwned[775861](arg _mt[775863]:_MT[238], ref arg this[775865]:_syncvar[84947](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[775875] "RVV" "temp"
    unknown call_tmp[775882] "expr temp" "maybe param" "maybe type" "temp"
    (775885 'move' call_tmp[775882](775869 '.' this[775865] c"isOwned"))
    (775880 'move' ret[775875](775879 'addr of' call_tmp[775882]))
    (775877 return ret[775875])
  }
  function chpl_fields_are_comparable[775899](arg _arg1[775901]:_syncvar[84947](?), arg _arg2[775902]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[775931]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[775938] "expr temp" "maybe param" "maybe type" "temp"
    (775941 'move' call_tmp[775938](775905 call wrapped _mt[243] _arg1[775901]))
    unknown call_tmp[775943] "expr temp" "maybe param" "maybe type" "temp"
    (775946 'move' call_tmp[775943](775909 call wrapped _mt[243] _arg2[775902]))
    unknown call_tmp[775948] "expr temp" "maybe param" "maybe type" "temp"
    (775951 'move' call_tmp[775948](775913 'call resolves' c"==" call_tmp[775938] call_tmp[775943]))
    unknown call_tmp[775953] "expr temp" "maybe param" "maybe type" "temp"
    (775956 'move' call_tmp[775953](775915 call isOwned _mt[243] _arg1[775901]))
    unknown call_tmp[775958] "expr temp" "maybe param" "maybe type" "temp"
    (775961 'move' call_tmp[775958](775919 call isOwned _mt[243] _arg2[775902]))
    unknown call_tmp[775963] "expr temp" "maybe param" "maybe type" "temp"
    (775966 'move' call_tmp[775963](775923 'call resolves' c"==" call_tmp[775953] call_tmp[775958]))
    unknown call_tmp[775968] "expr temp" "maybe param" "maybe type" "temp"
    (775971 'move' call_tmp[775968](775925 '&' call_tmp[775948] call_tmp[775963]))
    (775936 'move' ret[775931](775935 'deref' call_tmp[775968]))
    (775933 return ret[775931])
  }
  function ==[775887](arg _arg1[775889]:_syncvar[84947](?), arg _arg2[775890]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776015]:bool[10] "RVV" "temp"
    unknown call_tmp[776032] "expr temp" "maybe param" "maybe type" "temp"
    (776035 'move' call_tmp[776032](775979 call wrapped _mt[243] _arg1[775889]))
    unknown call_tmp[776037] "expr temp" "maybe param" "maybe type" "temp"
    (776040 'move' call_tmp[776037](775983 call wrapped _mt[243] _arg2[775890]))
    unknown call_tmp[776042] "expr temp" "maybe param" "maybe type" "temp"
    (776045 'move' call_tmp[776042](775987 call != call_tmp[776032] call_tmp[776037]))
    if call_tmp[776042]
    {
      (776020 'move' ret[776015](776019 'deref' 0))
      gotoReturn _end_==[776013] _end_==[776013]
    }
    unknown call_tmp[776047] "expr temp" "maybe param" "maybe type" "temp"
    (776050 'move' call_tmp[776047](775993 call isOwned _mt[243] _arg1[775889]))
    unknown call_tmp[776052] "expr temp" "maybe param" "maybe type" "temp"
    (776055 'move' call_tmp[776052](775997 call isOwned _mt[243] _arg2[775890]))
    unknown call_tmp[776057] "expr temp" "maybe param" "maybe type" "temp"
    (776060 'move' call_tmp[776057](776001 call != call_tmp[776047] call_tmp[776052]))
    if call_tmp[776057]
    {
      (776025 'move' ret[776015](776024 'deref' 0))
      gotoReturn _end_==[776013] _end_==[776013]
    }
    (776030 'move' ret[776015](776029 'deref' 1))
    label _end_==[776013]
    (776017 return ret[776015])
  }
  where {
    unknown call_tmp[776062] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776065 'move' call_tmp[776062](775893 'typeof' _arg1[775889]))
    unknown call_tmp[776067] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776070 'move' call_tmp[776067](775895 'typeof' _arg2[775890]))
    unknown call_tmp[776072] "expr temp" "maybe param" "maybe type" "temp"
    (776075 'move' call_tmp[776072](775897 call == call_tmp[776062] call_tmp[776067]))
    unknown call_tmp[776077] "expr temp" "maybe param" "maybe type" "temp"
    (776080 'move' call_tmp[776077](775973 call chpl_fields_are_comparable[775899] _arg1[775889] _arg2[775890]))
    (775977 '&' call_tmp[776072] call_tmp[776077])
  }
  function chpl_fields_are_comparable[776094](arg _arg1[776096]:_syncvar[84947](?), arg _arg2[776097]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776126]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776133] "expr temp" "maybe param" "maybe type" "temp"
    (776136 'move' call_tmp[776133](776100 call wrapped _mt[243] _arg1[776096]))
    unknown call_tmp[776138] "expr temp" "maybe param" "maybe type" "temp"
    (776141 'move' call_tmp[776138](776104 call wrapped _mt[243] _arg2[776097]))
    unknown call_tmp[776143] "expr temp" "maybe param" "maybe type" "temp"
    (776146 'move' call_tmp[776143](776108 'call resolves' c"!=" call_tmp[776133] call_tmp[776138]))
    unknown call_tmp[776148] "expr temp" "maybe param" "maybe type" "temp"
    (776151 'move' call_tmp[776148](776110 call isOwned _mt[243] _arg1[776096]))
    unknown call_tmp[776153] "expr temp" "maybe param" "maybe type" "temp"
    (776156 'move' call_tmp[776153](776114 call isOwned _mt[243] _arg2[776097]))
    unknown call_tmp[776158] "expr temp" "maybe param" "maybe type" "temp"
    (776161 'move' call_tmp[776158](776118 'call resolves' c"!=" call_tmp[776148] call_tmp[776153]))
    unknown call_tmp[776163] "expr temp" "maybe param" "maybe type" "temp"
    (776166 'move' call_tmp[776163](776120 '&' call_tmp[776143] call_tmp[776158]))
    (776131 'move' ret[776126](776130 'deref' call_tmp[776163]))
    (776128 return ret[776126])
  }
  function !=[776082](arg _arg1[776084]:_syncvar[84947](?), arg _arg2[776085]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776210]:bool[10] "RVV" "temp"
    unknown call_tmp[776227] "expr temp" "maybe param" "maybe type" "temp"
    (776230 'move' call_tmp[776227](776174 call wrapped _mt[243] _arg1[776084]))
    unknown call_tmp[776232] "expr temp" "maybe param" "maybe type" "temp"
    (776235 'move' call_tmp[776232](776178 call wrapped _mt[243] _arg2[776085]))
    unknown call_tmp[776237] "expr temp" "maybe param" "maybe type" "temp"
    (776240 'move' call_tmp[776237](776182 call != call_tmp[776227] call_tmp[776232]))
    if call_tmp[776237]
    {
      (776215 'move' ret[776210](776214 'deref' 1))
      gotoReturn _end_!=[776208] _end_!=[776208]
    }
    unknown call_tmp[776242] "expr temp" "maybe param" "maybe type" "temp"
    (776245 'move' call_tmp[776242](776188 call isOwned _mt[243] _arg1[776084]))
    unknown call_tmp[776247] "expr temp" "maybe param" "maybe type" "temp"
    (776250 'move' call_tmp[776247](776192 call isOwned _mt[243] _arg2[776085]))
    unknown call_tmp[776252] "expr temp" "maybe param" "maybe type" "temp"
    (776255 'move' call_tmp[776252](776196 call != call_tmp[776242] call_tmp[776247]))
    if call_tmp[776252]
    {
      (776220 'move' ret[776210](776219 'deref' 1))
      gotoReturn _end_!=[776208] _end_!=[776208]
    }
    (776225 'move' ret[776210](776224 'deref' 0))
    label _end_!=[776208]
    (776212 return ret[776210])
  }
  where {
    unknown call_tmp[776257] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776260 'move' call_tmp[776257](776088 'typeof' _arg1[776084]))
    unknown call_tmp[776262] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776265 'move' call_tmp[776262](776090 'typeof' _arg2[776085]))
    unknown call_tmp[776267] "expr temp" "maybe param" "maybe type" "temp"
    (776270 'move' call_tmp[776267](776092 call == call_tmp[776257] call_tmp[776262]))
    unknown call_tmp[776272] "expr temp" "maybe param" "maybe type" "temp"
    (776275 'move' call_tmp[776272](776168 call chpl_fields_are_comparable[776094] _arg1[776084] _arg2[776085]))
    (776172 '&' call_tmp[776267] call_tmp[776272])
  }
  function chpl_fields_are_comparable[776289](arg _arg1[776291]:_syncvar[84947](?), arg _arg2[776292]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776321]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776328] "expr temp" "maybe param" "maybe type" "temp"
    (776331 'move' call_tmp[776328](776295 call wrapped _mt[243] _arg1[776291]))
    unknown call_tmp[776333] "expr temp" "maybe param" "maybe type" "temp"
    (776336 'move' call_tmp[776333](776299 call wrapped _mt[243] _arg2[776292]))
    unknown call_tmp[776338] "expr temp" "maybe param" "maybe type" "temp"
    (776341 'move' call_tmp[776338](776303 'call resolves' c"<" call_tmp[776328] call_tmp[776333]))
    unknown call_tmp[776343] "expr temp" "maybe param" "maybe type" "temp"
    (776346 'move' call_tmp[776343](776305 call isOwned _mt[243] _arg1[776291]))
    unknown call_tmp[776348] "expr temp" "maybe param" "maybe type" "temp"
    (776351 'move' call_tmp[776348](776309 call isOwned _mt[243] _arg2[776292]))
    unknown call_tmp[776353] "expr temp" "maybe param" "maybe type" "temp"
    (776356 'move' call_tmp[776353](776313 'call resolves' c"<" call_tmp[776343] call_tmp[776348]))
    unknown call_tmp[776358] "expr temp" "maybe param" "maybe type" "temp"
    (776361 'move' call_tmp[776358](776315 '&' call_tmp[776338] call_tmp[776353]))
    (776326 'move' ret[776321](776325 'deref' call_tmp[776358]))
    (776323 return ret[776321])
  }
  function <[776277](arg _arg1[776279]:_syncvar[84947](?), arg _arg2[776280]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776435]:bool[10] "RVV" "temp"
    unknown call_tmp[776462] "expr temp" "maybe param" "maybe type" "temp"
    (776465 'move' call_tmp[776462](776369 call wrapped _mt[243] _arg1[776279]))
    unknown call_tmp[776467] "expr temp" "maybe param" "maybe type" "temp"
    (776470 'move' call_tmp[776467](776373 call wrapped _mt[243] _arg2[776280]))
    unknown call_tmp[776472] "expr temp" "maybe param" "maybe type" "temp"
    (776475 'move' call_tmp[776472](776377 call < call_tmp[776462] call_tmp[776467]))
    if call_tmp[776472]
    {
      (776440 'move' ret[776435](776439 'deref' 1))
      gotoReturn _end_<[776433] _end_<[776433]
    }
    unknown call_tmp[776477] "expr temp" "maybe param" "maybe type" "temp"
    (776480 'move' call_tmp[776477](776383 call wrapped _mt[243] _arg1[776279]))
    unknown call_tmp[776482] "expr temp" "maybe param" "maybe type" "temp"
    (776485 'move' call_tmp[776482](776387 call wrapped _mt[243] _arg2[776280]))
    unknown call_tmp[776487] "expr temp" "maybe param" "maybe type" "temp"
    (776490 'move' call_tmp[776487](776391 call > call_tmp[776477] call_tmp[776482]))
    if call_tmp[776487]
    {
      (776445 'move' ret[776435](776444 'deref' 0))
      gotoReturn _end_<[776433] _end_<[776433]
    }
    unknown call_tmp[776492] "expr temp" "maybe param" "maybe type" "temp"
    (776495 'move' call_tmp[776492](776397 call isOwned _mt[243] _arg1[776279]))
    unknown call_tmp[776497] "expr temp" "maybe param" "maybe type" "temp"
    (776500 'move' call_tmp[776497](776401 call isOwned _mt[243] _arg2[776280]))
    unknown call_tmp[776502] "expr temp" "maybe param" "maybe type" "temp"
    (776505 'move' call_tmp[776502](776405 call < call_tmp[776492] call_tmp[776497]))
    if call_tmp[776502]
    {
      (776450 'move' ret[776435](776449 'deref' 1))
      gotoReturn _end_<[776433] _end_<[776433]
    }
    unknown call_tmp[776507] "expr temp" "maybe param" "maybe type" "temp"
    (776510 'move' call_tmp[776507](776411 call isOwned _mt[243] _arg1[776279]))
    unknown call_tmp[776512] "expr temp" "maybe param" "maybe type" "temp"
    (776515 'move' call_tmp[776512](776415 call isOwned _mt[243] _arg2[776280]))
    unknown call_tmp[776517] "expr temp" "maybe param" "maybe type" "temp"
    (776520 'move' call_tmp[776517](776419 call > call_tmp[776507] call_tmp[776512]))
    if call_tmp[776517]
    {
      (776455 'move' ret[776435](776454 'deref' 0))
      gotoReturn _end_<[776433] _end_<[776433]
    }
    (776460 'move' ret[776435](776459 'deref' 0))
    label _end_<[776433]
    (776437 return ret[776435])
  }
  where {
    unknown call_tmp[776522] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776525 'move' call_tmp[776522](776283 'typeof' _arg1[776279]))
    unknown call_tmp[776527] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776530 'move' call_tmp[776527](776285 'typeof' _arg2[776280]))
    unknown call_tmp[776532] "expr temp" "maybe param" "maybe type" "temp"
    (776535 'move' call_tmp[776532](776287 call == call_tmp[776522] call_tmp[776527]))
    unknown call_tmp[776537] "expr temp" "maybe param" "maybe type" "temp"
    (776540 'move' call_tmp[776537](776363 call chpl_fields_are_comparable[776289] _arg1[776279] _arg2[776280]))
    (776367 '&' call_tmp[776532] call_tmp[776537])
  }
  function chpl_fields_are_comparable[776554](arg _arg1[776556]:_syncvar[84947](?), arg _arg2[776557]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776586]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776593] "expr temp" "maybe param" "maybe type" "temp"
    (776596 'move' call_tmp[776593](776560 call wrapped _mt[243] _arg1[776556]))
    unknown call_tmp[776598] "expr temp" "maybe param" "maybe type" "temp"
    (776601 'move' call_tmp[776598](776564 call wrapped _mt[243] _arg2[776557]))
    unknown call_tmp[776603] "expr temp" "maybe param" "maybe type" "temp"
    (776606 'move' call_tmp[776603](776568 'call resolves' c"<=" call_tmp[776593] call_tmp[776598]))
    unknown call_tmp[776608] "expr temp" "maybe param" "maybe type" "temp"
    (776611 'move' call_tmp[776608](776570 call isOwned _mt[243] _arg1[776556]))
    unknown call_tmp[776613] "expr temp" "maybe param" "maybe type" "temp"
    (776616 'move' call_tmp[776613](776574 call isOwned _mt[243] _arg2[776557]))
    unknown call_tmp[776618] "expr temp" "maybe param" "maybe type" "temp"
    (776621 'move' call_tmp[776618](776578 'call resolves' c"<=" call_tmp[776608] call_tmp[776613]))
    unknown call_tmp[776623] "expr temp" "maybe param" "maybe type" "temp"
    (776626 'move' call_tmp[776623](776580 '&' call_tmp[776603] call_tmp[776618]))
    (776591 'move' ret[776586](776590 'deref' call_tmp[776623]))
    (776588 return ret[776586])
  }
  function <=[776542](arg _arg1[776544]:_syncvar[84947](?), arg _arg2[776545]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776700]:bool[10] "RVV" "temp"
    unknown call_tmp[776727] "expr temp" "maybe param" "maybe type" "temp"
    (776730 'move' call_tmp[776727](776634 call wrapped _mt[243] _arg1[776544]))
    unknown call_tmp[776732] "expr temp" "maybe param" "maybe type" "temp"
    (776735 'move' call_tmp[776732](776638 call wrapped _mt[243] _arg2[776545]))
    unknown call_tmp[776737] "expr temp" "maybe param" "maybe type" "temp"
    (776740 'move' call_tmp[776737](776642 call < call_tmp[776727] call_tmp[776732]))
    if call_tmp[776737]
    {
      (776705 'move' ret[776700](776704 'deref' 1))
      gotoReturn _end_<=[776698] _end_<=[776698]
    }
    unknown call_tmp[776742] "expr temp" "maybe param" "maybe type" "temp"
    (776745 'move' call_tmp[776742](776648 call wrapped _mt[243] _arg1[776544]))
    unknown call_tmp[776747] "expr temp" "maybe param" "maybe type" "temp"
    (776750 'move' call_tmp[776747](776652 call wrapped _mt[243] _arg2[776545]))
    unknown call_tmp[776752] "expr temp" "maybe param" "maybe type" "temp"
    (776755 'move' call_tmp[776752](776656 call > call_tmp[776742] call_tmp[776747]))
    if call_tmp[776752]
    {
      (776710 'move' ret[776700](776709 'deref' 0))
      gotoReturn _end_<=[776698] _end_<=[776698]
    }
    unknown call_tmp[776757] "expr temp" "maybe param" "maybe type" "temp"
    (776760 'move' call_tmp[776757](776662 call isOwned _mt[243] _arg1[776544]))
    unknown call_tmp[776762] "expr temp" "maybe param" "maybe type" "temp"
    (776765 'move' call_tmp[776762](776666 call isOwned _mt[243] _arg2[776545]))
    unknown call_tmp[776767] "expr temp" "maybe param" "maybe type" "temp"
    (776770 'move' call_tmp[776767](776670 call < call_tmp[776757] call_tmp[776762]))
    if call_tmp[776767]
    {
      (776715 'move' ret[776700](776714 'deref' 1))
      gotoReturn _end_<=[776698] _end_<=[776698]
    }
    unknown call_tmp[776772] "expr temp" "maybe param" "maybe type" "temp"
    (776775 'move' call_tmp[776772](776676 call isOwned _mt[243] _arg1[776544]))
    unknown call_tmp[776777] "expr temp" "maybe param" "maybe type" "temp"
    (776780 'move' call_tmp[776777](776680 call isOwned _mt[243] _arg2[776545]))
    unknown call_tmp[776782] "expr temp" "maybe param" "maybe type" "temp"
    (776785 'move' call_tmp[776782](776684 call > call_tmp[776772] call_tmp[776777]))
    if call_tmp[776782]
    {
      (776720 'move' ret[776700](776719 'deref' 0))
      gotoReturn _end_<=[776698] _end_<=[776698]
    }
    (776725 'move' ret[776700](776724 'deref' 1))
    label _end_<=[776698]
    (776702 return ret[776700])
  }
  where {
    unknown call_tmp[776787] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776790 'move' call_tmp[776787](776548 'typeof' _arg1[776544]))
    unknown call_tmp[776792] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (776795 'move' call_tmp[776792](776550 'typeof' _arg2[776545]))
    unknown call_tmp[776797] "expr temp" "maybe param" "maybe type" "temp"
    (776800 'move' call_tmp[776797](776552 call == call_tmp[776787] call_tmp[776792]))
    unknown call_tmp[776802] "expr temp" "maybe param" "maybe type" "temp"
    (776805 'move' call_tmp[776802](776628 call chpl_fields_are_comparable[776554] _arg1[776544] _arg2[776545]))
    (776632 '&' call_tmp[776797] call_tmp[776802])
  }
  function chpl_fields_are_comparable[776819](arg _arg1[776821]:_syncvar[84947](?), arg _arg2[776822]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[776851]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[776858] "expr temp" "maybe param" "maybe type" "temp"
    (776861 'move' call_tmp[776858](776825 call wrapped _mt[243] _arg1[776821]))
    unknown call_tmp[776863] "expr temp" "maybe param" "maybe type" "temp"
    (776866 'move' call_tmp[776863](776829 call wrapped _mt[243] _arg2[776822]))
    unknown call_tmp[776868] "expr temp" "maybe param" "maybe type" "temp"
    (776871 'move' call_tmp[776868](776833 'call resolves' c">" call_tmp[776858] call_tmp[776863]))
    unknown call_tmp[776873] "expr temp" "maybe param" "maybe type" "temp"
    (776876 'move' call_tmp[776873](776835 call isOwned _mt[243] _arg1[776821]))
    unknown call_tmp[776878] "expr temp" "maybe param" "maybe type" "temp"
    (776881 'move' call_tmp[776878](776839 call isOwned _mt[243] _arg2[776822]))
    unknown call_tmp[776883] "expr temp" "maybe param" "maybe type" "temp"
    (776886 'move' call_tmp[776883](776843 'call resolves' c">" call_tmp[776873] call_tmp[776878]))
    unknown call_tmp[776888] "expr temp" "maybe param" "maybe type" "temp"
    (776891 'move' call_tmp[776888](776845 '&' call_tmp[776868] call_tmp[776883]))
    (776856 'move' ret[776851](776855 'deref' call_tmp[776888]))
    (776853 return ret[776851])
  }
  function >[776807](arg _arg1[776809]:_syncvar[84947](?), arg _arg2[776810]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[776965]:bool[10] "RVV" "temp"
    unknown call_tmp[776992] "expr temp" "maybe param" "maybe type" "temp"
    (776995 'move' call_tmp[776992](776899 call wrapped _mt[243] _arg1[776809]))
    unknown call_tmp[776997] "expr temp" "maybe param" "maybe type" "temp"
    (777000 'move' call_tmp[776997](776903 call wrapped _mt[243] _arg2[776810]))
    unknown call_tmp[777002] "expr temp" "maybe param" "maybe type" "temp"
    (777005 'move' call_tmp[777002](776907 call > call_tmp[776992] call_tmp[776997]))
    if call_tmp[777002]
    {
      (776970 'move' ret[776965](776969 'deref' 1))
      gotoReturn _end_>[776963] _end_>[776963]
    }
    unknown call_tmp[777007] "expr temp" "maybe param" "maybe type" "temp"
    (777010 'move' call_tmp[777007](776913 call wrapped _mt[243] _arg1[776809]))
    unknown call_tmp[777012] "expr temp" "maybe param" "maybe type" "temp"
    (777015 'move' call_tmp[777012](776917 call wrapped _mt[243] _arg2[776810]))
    unknown call_tmp[777017] "expr temp" "maybe param" "maybe type" "temp"
    (777020 'move' call_tmp[777017](776921 call < call_tmp[777007] call_tmp[777012]))
    if call_tmp[777017]
    {
      (776975 'move' ret[776965](776974 'deref' 0))
      gotoReturn _end_>[776963] _end_>[776963]
    }
    unknown call_tmp[777022] "expr temp" "maybe param" "maybe type" "temp"
    (777025 'move' call_tmp[777022](776927 call isOwned _mt[243] _arg1[776809]))
    unknown call_tmp[777027] "expr temp" "maybe param" "maybe type" "temp"
    (777030 'move' call_tmp[777027](776931 call isOwned _mt[243] _arg2[776810]))
    unknown call_tmp[777032] "expr temp" "maybe param" "maybe type" "temp"
    (777035 'move' call_tmp[777032](776935 call > call_tmp[777022] call_tmp[777027]))
    if call_tmp[777032]
    {
      (776980 'move' ret[776965](776979 'deref' 1))
      gotoReturn _end_>[776963] _end_>[776963]
    }
    unknown call_tmp[777037] "expr temp" "maybe param" "maybe type" "temp"
    (777040 'move' call_tmp[777037](776941 call isOwned _mt[243] _arg1[776809]))
    unknown call_tmp[777042] "expr temp" "maybe param" "maybe type" "temp"
    (777045 'move' call_tmp[777042](776945 call isOwned _mt[243] _arg2[776810]))
    unknown call_tmp[777047] "expr temp" "maybe param" "maybe type" "temp"
    (777050 'move' call_tmp[777047](776949 call < call_tmp[777037] call_tmp[777042]))
    if call_tmp[777047]
    {
      (776985 'move' ret[776965](776984 'deref' 0))
      gotoReturn _end_>[776963] _end_>[776963]
    }
    (776990 'move' ret[776965](776989 'deref' 0))
    label _end_>[776963]
    (776967 return ret[776965])
  }
  where {
    unknown call_tmp[777052] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777055 'move' call_tmp[777052](776813 'typeof' _arg1[776809]))
    unknown call_tmp[777057] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777060 'move' call_tmp[777057](776815 'typeof' _arg2[776810]))
    unknown call_tmp[777062] "expr temp" "maybe param" "maybe type" "temp"
    (777065 'move' call_tmp[777062](776817 call == call_tmp[777052] call_tmp[777057]))
    unknown call_tmp[777067] "expr temp" "maybe param" "maybe type" "temp"
    (777070 'move' call_tmp[777067](776893 call chpl_fields_are_comparable[776819] _arg1[776809] _arg2[776810]))
    (776897 '&' call_tmp[777062] call_tmp[777067])
  }
  function chpl_fields_are_comparable[777084](arg _arg1[777086]:_syncvar[84947](?), arg _arg2[777087]:_syncvar[84947](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[777116]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[777123] "expr temp" "maybe param" "maybe type" "temp"
    (777126 'move' call_tmp[777123](777090 call wrapped _mt[243] _arg1[777086]))
    unknown call_tmp[777128] "expr temp" "maybe param" "maybe type" "temp"
    (777131 'move' call_tmp[777128](777094 call wrapped _mt[243] _arg2[777087]))
    unknown call_tmp[777133] "expr temp" "maybe param" "maybe type" "temp"
    (777136 'move' call_tmp[777133](777098 'call resolves' c">=" call_tmp[777123] call_tmp[777128]))
    unknown call_tmp[777138] "expr temp" "maybe param" "maybe type" "temp"
    (777141 'move' call_tmp[777138](777100 call isOwned _mt[243] _arg1[777086]))
    unknown call_tmp[777143] "expr temp" "maybe param" "maybe type" "temp"
    (777146 'move' call_tmp[777143](777104 call isOwned _mt[243] _arg2[777087]))
    unknown call_tmp[777148] "expr temp" "maybe param" "maybe type" "temp"
    (777151 'move' call_tmp[777148](777108 'call resolves' c">=" call_tmp[777138] call_tmp[777143]))
    unknown call_tmp[777153] "expr temp" "maybe param" "maybe type" "temp"
    (777156 'move' call_tmp[777153](777110 '&' call_tmp[777133] call_tmp[777148]))
    (777121 'move' ret[777116](777120 'deref' call_tmp[777153]))
    (777118 return ret[777116])
  }
  function >=[777072](arg _arg1[777074]:_syncvar[84947](?), arg _arg2[777075]:_syncvar[84947](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[777230]:bool[10] "RVV" "temp"
    unknown call_tmp[777257] "expr temp" "maybe param" "maybe type" "temp"
    (777260 'move' call_tmp[777257](777164 call wrapped _mt[243] _arg1[777074]))
    unknown call_tmp[777262] "expr temp" "maybe param" "maybe type" "temp"
    (777265 'move' call_tmp[777262](777168 call wrapped _mt[243] _arg2[777075]))
    unknown call_tmp[777267] "expr temp" "maybe param" "maybe type" "temp"
    (777270 'move' call_tmp[777267](777172 call > call_tmp[777257] call_tmp[777262]))
    if call_tmp[777267]
    {
      (777235 'move' ret[777230](777234 'deref' 1))
      gotoReturn _end_>=[777228] _end_>=[777228]
    }
    unknown call_tmp[777272] "expr temp" "maybe param" "maybe type" "temp"
    (777275 'move' call_tmp[777272](777178 call wrapped _mt[243] _arg1[777074]))
    unknown call_tmp[777277] "expr temp" "maybe param" "maybe type" "temp"
    (777280 'move' call_tmp[777277](777182 call wrapped _mt[243] _arg2[777075]))
    unknown call_tmp[777282] "expr temp" "maybe param" "maybe type" "temp"
    (777285 'move' call_tmp[777282](777186 call < call_tmp[777272] call_tmp[777277]))
    if call_tmp[777282]
    {
      (777240 'move' ret[777230](777239 'deref' 0))
      gotoReturn _end_>=[777228] _end_>=[777228]
    }
    unknown call_tmp[777287] "expr temp" "maybe param" "maybe type" "temp"
    (777290 'move' call_tmp[777287](777192 call isOwned _mt[243] _arg1[777074]))
    unknown call_tmp[777292] "expr temp" "maybe param" "maybe type" "temp"
    (777295 'move' call_tmp[777292](777196 call isOwned _mt[243] _arg2[777075]))
    unknown call_tmp[777297] "expr temp" "maybe param" "maybe type" "temp"
    (777300 'move' call_tmp[777297](777200 call > call_tmp[777287] call_tmp[777292]))
    if call_tmp[777297]
    {
      (777245 'move' ret[777230](777244 'deref' 1))
      gotoReturn _end_>=[777228] _end_>=[777228]
    }
    unknown call_tmp[777302] "expr temp" "maybe param" "maybe type" "temp"
    (777305 'move' call_tmp[777302](777206 call isOwned _mt[243] _arg1[777074]))
    unknown call_tmp[777307] "expr temp" "maybe param" "maybe type" "temp"
    (777310 'move' call_tmp[777307](777210 call isOwned _mt[243] _arg2[777075]))
    unknown call_tmp[777312] "expr temp" "maybe param" "maybe type" "temp"
    (777315 'move' call_tmp[777312](777214 call < call_tmp[777302] call_tmp[777307]))
    if call_tmp[777312]
    {
      (777250 'move' ret[777230](777249 'deref' 0))
      gotoReturn _end_>=[777228] _end_>=[777228]
    }
    (777255 'move' ret[777230](777254 'deref' 1))
    label _end_>=[777228]
    (777232 return ret[777230])
  }
  where {
    unknown call_tmp[777317] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777320 'move' call_tmp[777317](777078 'typeof' _arg1[777074]))
    unknown call_tmp[777322] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777325 'move' call_tmp[777322](777080 'typeof' _arg2[777075]))
    unknown call_tmp[777327] "expr temp" "maybe param" "maybe type" "temp"
    (777330 'move' call_tmp[777327](777082 call == call_tmp[777317] call_tmp[777322]))
    unknown call_tmp[777332] "expr temp" "maybe param" "maybe type" "temp"
    (777335 'move' call_tmp[777332](777158 call chpl_fields_are_comparable[777084] _arg1[777074] _arg2[777075]))
    (777162 '&' call_tmp[777327] call_tmp[777332])
  }
  function =[777337](ref arg _arg1[777339]:_syncvar[84947](?), const?  ref arg _arg2[777340]:_syncvar[84947](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[777377] "expr temp" "maybe param" "maybe type" "temp"
    (777380 'move' call_tmp[777377](777350 call wrapped _mt[243] _arg1[777339]))
    unknown call_tmp[777384] "expr temp" "maybe param" "maybe type" "temp"
    (777387 'move' call_tmp[777384](777354 call wrapped _mt[243] _arg2[777340]))
    (777358 call = call_tmp[777377] call_tmp[777384])
    (777371 'end of statement')
    unknown call_tmp[777391] "expr temp" "maybe param" "maybe type" "temp"
    (777394 'move' call_tmp[777391](777360 call isOwned _mt[243] _arg1[777339]))
    unknown call_tmp[777398] "expr temp" "maybe param" "maybe type" "temp"
    (777401 'move' call_tmp[777398](777364 call isOwned _mt[243] _arg2[777340]))
    (777368 call = call_tmp[777391] call_tmp[777398])
    (777373 return _void[55])
  }
  where {
    unknown call_tmp[777403] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777406 'move' call_tmp[777403](777343 'typeof' _arg1[777339]))
    unknown call_tmp[777408] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (777411 'move' call_tmp[777408](777345 'typeof' _arg2[777340]))
    (777347 call == call_tmp[777403] call_tmp[777408])
  }
  function chpl__defaultHash[777413](arg r[777415]:_syncvar[84947](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[777446] "RVV" "temp"
    unknown call_tmp[777453] "expr temp" "maybe param" "maybe type" "temp"
    (777456 'move' call_tmp[777453](777432 call isOwned _mt[243] r[777415]))
    unknown call_tmp[777458] "expr temp" "maybe param" "maybe type" "temp"
    (777461 'move' call_tmp[777458](777436 call chpl__defaultHash call_tmp[777453]))
    unknown call_tmp[777463] "expr temp" "maybe param" "maybe type" "temp"
    (777466 'move' call_tmp[777463](777423 call wrapped _mt[243] r[777415]))
    unknown call_tmp[777468] "expr temp" "maybe param" "maybe type" "temp"
    (777471 'move' call_tmp[777468](777427 call chpl__defaultHash call_tmp[777463]))
    unknown call_tmp[777473] "expr temp" "maybe param" "maybe type" "temp"
    (777476 'move' call_tmp[777473](777417 call valType _mt[243] r[777415]))
    unknown call_tmp[777478] "expr temp" "maybe param" "maybe type" "temp"
    (777481 'move' call_tmp[777478](777421 call chpl__defaultHash call_tmp[777473]))
    unknown call_tmp[777483] "expr temp" "maybe param" "maybe type" "temp"
    (777486 'move' call_tmp[777483](777429 call chpl__defaultHashCombine call_tmp[777468] call_tmp[777478] 2))
    unknown call_tmp[777488] "expr temp" "maybe param" "maybe type" "temp"
    (777491 'move' call_tmp[777488](777438 call chpl__defaultHashCombine call_tmp[777458] call_tmp[777483] 3))
    (777451 'move' ret[777446](777450 'deref' call_tmp[777488]))
    (777448 return ret[777446])
  }
  sync type _syncvar[84947](?) unknown valType[84545] "type variable" unknown wrapped[84552](84551 call getSyncClassType valType[84545]) val isOwned[84558]:bool[10] 1 bool[10]
  function isSyncType[84984](arg t[84981]:_syncvar[84947](?)) param : _unknown[51] "no doc"
  {
    unknown ret[512764] "RVV" "param" "temp"
    (512769 'move' ret[512764](512768 'deref' 1))
    (512766 return ret[512764])
  }
  function isSyncType[84996](arg t[84994]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512773] "RVV" "param" "temp"
    (512778 'move' ret[512773](512777 'deref' 0))
    (512775 return ret[512773])
  }
  function _syncvar[84947](?).readFE[85007](arg _mt[85012]:_MT[238], arg this[85009]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method"
  {
    unknown ret[512782] "RVV" "temp"
    unknown call_tmp[630361] "expr temp" "maybe param" "maybe type" "temp"
    (630364 'move' call_tmp[630361](358213 call wrapped _mt[243] this[85009]))
    unknown call_tmp[630368] "expr temp" "maybe param" "maybe type" "temp"
    (630371 'move' call_tmp[630368](85019 call(85015 call (partial) readFE _mt[243] call_tmp[630361])))
    (512787 'move' ret[512782](512786 'deref' call_tmp[630368]))
    (512784 return ret[512782])
  }
  function _syncvar[84947](?).readFF[85028](arg _mt[85033]:_MT[238], arg this[85030]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method"
  {
    unknown ret[512791] "RVV" "temp"
    unknown call_tmp[630375] "expr temp" "maybe param" "maybe type" "temp"
    (630378 'move' call_tmp[630375](358218 call wrapped _mt[243] this[85030]))
    unknown call_tmp[630382] "expr temp" "maybe param" "maybe type" "temp"
    (630385 'move' call_tmp[630382](85040 call(85036 call (partial) readFF _mt[243] call_tmp[630375])))
    (512796 'move' ret[512791](512795 'deref' call_tmp[630382]))
    (512793 return ret[512791])
  }
  function _syncvar[84947](?).readXX[85049](arg _mt[85054]:_MT[238], arg this[85051]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method"
  {
    unknown ret[512800] "RVV" "temp"
    (85058 call chpl_task_yield)
    (476893 'end of statement')
    unknown call_tmp[630389] "expr temp" "maybe param" "maybe type" "temp"
    (630392 'move' call_tmp[630389](358223 call wrapped _mt[243] this[85051]))
    unknown call_tmp[630396] "expr temp" "maybe param" "maybe type" "temp"
    (630399 'move' call_tmp[630396](85068 call(85064 call (partial) readXX _mt[243] call_tmp[630389])))
    (512805 'move' ret[512800](512804 'deref' call_tmp[630396]))
    (512802 return ret[512800])
  }
  function _syncvar[84947](?).writeEF[85080](arg _mt[85085]:_MT[238], arg this[85082]:_syncvar[84947](?) :
  _syncvar[84947](?), arg x[85077] :
  (376964 call valType _mt[243] this[85082])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630405] "expr temp" "maybe param" "maybe type" "temp"
    (630408 'move' call_tmp[630405](358228 call wrapped _mt[243] this[85082]))
    (85093 call(85088 call (partial) writeEF _mt[243] call_tmp[630405]) x[85077])
    (512807 return _void[55])
  }
  function _syncvar[84947](?).writeFF[85105](arg _mt[85110]:_MT[238], arg this[85107]:_syncvar[84947](?) :
  _syncvar[84947](?), arg x[85102] :
  (376970 call valType _mt[243] this[85107])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630416] "expr temp" "maybe param" "maybe type" "temp"
    (630419 'move' call_tmp[630416](358233 call wrapped _mt[243] this[85107]))
    (85120 call(85115 call (partial) writeFF _mt[243] call_tmp[630416]) x[85102])
    (512809 return _void[55])
  }
  function _syncvar[84947](?).writeXF[85132](arg _mt[85137]:_MT[238], arg this[85134]:_syncvar[84947](?) :
  _syncvar[84947](?), arg x[85129] :
  (376976 call valType _mt[243] this[85134])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630427] "expr temp" "maybe param" "maybe type" "temp"
    (630430 'move' call_tmp[630427](358238 call wrapped _mt[243] this[85134]))
    (85147 call(85142 call (partial) writeXF _mt[243] call_tmp[630427]) x[85129])
    (512811 return _void[55])
  }
  function _syncvar[84947](?).reset[85155](arg _mt[85160]:_MT[238], arg this[85157]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[630436] "expr temp" "maybe param" "maybe type" "temp"
    (630439 'move' call_tmp[630436](358243 call wrapped _mt[243] this[85157]))
    (85169 call(85165 call (partial) reset _mt[243] call_tmp[630436]))
    (512813 return _void[55])
  }
  function _syncvar[84947](?).isFull[85177](arg _mt[85182]:_MT[238], arg this[85179]:_syncvar[84947](?) :
  _syncvar[84947](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[512817] "RVV" "temp"
    unknown call_tmp[630445] "expr temp" "maybe param" "maybe type" "temp"
    (630448 'move' call_tmp[630445](358248 call wrapped _mt[243] this[85179]))
    unknown call_tmp[630452] "expr temp" "maybe param" "maybe type" "temp"
    (630455 'move' call_tmp[630452](85187 call isFull _mt[243] call_tmp[630445]))
    (512822 'move' ret[512817](512821 'deref' call_tmp[630452]))
    (512819 return ret[512817])
  }
  function =[85205](ref arg lhs[85202]:_syncvar[84947](?), arg rhs[85208] :
  (459843 'query' lhs[85202] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630459] "expr temp" "maybe param" "maybe type" "temp"
    (630462 'move' call_tmp[630459](85212 call wrapped _mt[243] lhs[85202]))
    (85220 call(85215 call (partial) writeEF _mt[243] call_tmp[630459]) rhs[85208])
    (512824 return _void[55])
  }
  function +=[85235](ref arg lhs[85232]:_syncvar[84947](?), arg rhs[85238] :
  (459853 'query' lhs[85232] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630468] "expr temp" "maybe param" "maybe type" "temp"
    (630471 'move' call_tmp[630468](85242 call wrapped _mt[243] lhs[85232]))
    unknown call_tmp[630477] "expr temp" "maybe param" "maybe type" "temp"
    (630480 'move' call_tmp[630477](85249 call wrapped _mt[243] lhs[85232]))
    unknown call_tmp[630484] "expr temp" "maybe param" "maybe type" "temp"
    (630487 'move' call_tmp[630484](85256 call(85252 call (partial) readFE _mt[243] call_tmp[630477])))
    unknown call_tmp[630489] "expr temp" "maybe param" "maybe type" "temp"
    (630492 'move' call_tmp[630489](85258 call + call_tmp[630484] rhs[85238]))
    (85261 call(85245 call (partial) writeEF _mt[243] call_tmp[630468]) call_tmp[630489])
    (512826 return _void[55])
  }
  function -=[85276](ref arg lhs[85273]:_syncvar[84947](?), arg rhs[85279] :
  (459863 'query' lhs[85273] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630496] "expr temp" "maybe param" "maybe type" "temp"
    (630499 'move' call_tmp[630496](85283 call wrapped _mt[243] lhs[85273]))
    unknown call_tmp[630505] "expr temp" "maybe param" "maybe type" "temp"
    (630508 'move' call_tmp[630505](85290 call wrapped _mt[243] lhs[85273]))
    unknown call_tmp[630512] "expr temp" "maybe param" "maybe type" "temp"
    (630515 'move' call_tmp[630512](85297 call(85293 call (partial) readFE _mt[243] call_tmp[630505])))
    unknown call_tmp[630517] "expr temp" "maybe param" "maybe type" "temp"
    (630520 'move' call_tmp[630517](85299 call - call_tmp[630512] rhs[85279]))
    (85302 call(85286 call (partial) writeEF _mt[243] call_tmp[630496]) call_tmp[630517])
    (512828 return _void[55])
  }
  function *=[85317](ref arg lhs[85314]:_syncvar[84947](?), arg rhs[85320] :
  (459873 'query' lhs[85314] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630524] "expr temp" "maybe param" "maybe type" "temp"
    (630527 'move' call_tmp[630524](85324 call wrapped _mt[243] lhs[85314]))
    unknown call_tmp[630533] "expr temp" "maybe param" "maybe type" "temp"
    (630536 'move' call_tmp[630533](85331 call wrapped _mt[243] lhs[85314]))
    unknown call_tmp[630540] "expr temp" "maybe param" "maybe type" "temp"
    (630543 'move' call_tmp[630540](85338 call(85334 call (partial) readFE _mt[243] call_tmp[630533])))
    unknown call_tmp[630545] "expr temp" "maybe param" "maybe type" "temp"
    (630548 'move' call_tmp[630545](85340 call * call_tmp[630540] rhs[85320]))
    (85343 call(85327 call (partial) writeEF _mt[243] call_tmp[630524]) call_tmp[630545])
    (512830 return _void[55])
  }
  function /=[85358](ref arg lhs[85355]:_syncvar[84947](?), arg rhs[85361] :
  (459883 'query' lhs[85355] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630552] "expr temp" "maybe param" "maybe type" "temp"
    (630555 'move' call_tmp[630552](85365 call wrapped _mt[243] lhs[85355]))
    unknown call_tmp[630561] "expr temp" "maybe param" "maybe type" "temp"
    (630564 'move' call_tmp[630561](85372 call wrapped _mt[243] lhs[85355]))
    unknown call_tmp[630568] "expr temp" "maybe param" "maybe type" "temp"
    (630571 'move' call_tmp[630568](85379 call(85375 call (partial) readFE _mt[243] call_tmp[630561])))
    unknown call_tmp[630573] "expr temp" "maybe param" "maybe type" "temp"
    (630576 'move' call_tmp[630573](85381 call / call_tmp[630568] rhs[85361]))
    (85384 call(85368 call (partial) writeEF _mt[243] call_tmp[630552]) call_tmp[630573])
    (512832 return _void[55])
  }
  function %=[85399](ref arg lhs[85396]:_syncvar[84947](?), arg rhs[85402] :
  (459893 'query' lhs[85396] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630580] "expr temp" "maybe param" "maybe type" "temp"
    (630583 'move' call_tmp[630580](85406 call wrapped _mt[243] lhs[85396]))
    unknown call_tmp[630589] "expr temp" "maybe param" "maybe type" "temp"
    (630592 'move' call_tmp[630589](85413 call wrapped _mt[243] lhs[85396]))
    unknown call_tmp[630596] "expr temp" "maybe param" "maybe type" "temp"
    (630599 'move' call_tmp[630596](85420 call(85416 call (partial) readFE _mt[243] call_tmp[630589])))
    unknown call_tmp[630601] "expr temp" "maybe param" "maybe type" "temp"
    (630604 'move' call_tmp[630601](85422 call % call_tmp[630596] rhs[85402]))
    (85425 call(85409 call (partial) writeEF _mt[243] call_tmp[630580]) call_tmp[630601])
    (512834 return _void[55])
  }
  function **=[85440](ref arg lhs[85437]:_syncvar[84947](?), arg rhs[85443] :
  (459903 'query' lhs[85437] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630608] "expr temp" "maybe param" "maybe type" "temp"
    (630611 'move' call_tmp[630608](85447 call wrapped _mt[243] lhs[85437]))
    unknown call_tmp[630617] "expr temp" "maybe param" "maybe type" "temp"
    (630620 'move' call_tmp[630617](85454 call wrapped _mt[243] lhs[85437]))
    unknown call_tmp[630624] "expr temp" "maybe param" "maybe type" "temp"
    (630627 'move' call_tmp[630624](85461 call(85457 call (partial) readFE _mt[243] call_tmp[630617])))
    unknown call_tmp[630629] "expr temp" "maybe param" "maybe type" "temp"
    (630632 'move' call_tmp[630629](85463 call ** call_tmp[630624] rhs[85443]))
    (85466 call(85450 call (partial) writeEF _mt[243] call_tmp[630608]) call_tmp[630629])
    (512836 return _void[55])
  }
  function &=[85481](ref arg lhs[85478]:_syncvar[84947](?), arg rhs[85484] :
  (459913 'query' lhs[85478] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630636] "expr temp" "maybe param" "maybe type" "temp"
    (630639 'move' call_tmp[630636](85488 call wrapped _mt[243] lhs[85478]))
    unknown call_tmp[630645] "expr temp" "maybe param" "maybe type" "temp"
    (630648 'move' call_tmp[630645](85495 call wrapped _mt[243] lhs[85478]))
    unknown call_tmp[630652] "expr temp" "maybe param" "maybe type" "temp"
    (630655 'move' call_tmp[630652](85502 call(85498 call (partial) readFE _mt[243] call_tmp[630645])))
    unknown call_tmp[630657] "expr temp" "maybe param" "maybe type" "temp"
    (630660 'move' call_tmp[630657](85504 call & call_tmp[630652] rhs[85484]))
    (85507 call(85491 call (partial) writeEF _mt[243] call_tmp[630636]) call_tmp[630657])
    (512838 return _void[55])
  }
  function |=[85522](ref arg lhs[85519]:_syncvar[84947](?), arg rhs[85525] :
  (459923 'query' lhs[85519] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630664] "expr temp" "maybe param" "maybe type" "temp"
    (630667 'move' call_tmp[630664](85529 call wrapped _mt[243] lhs[85519]))
    unknown call_tmp[630673] "expr temp" "maybe param" "maybe type" "temp"
    (630676 'move' call_tmp[630673](85536 call wrapped _mt[243] lhs[85519]))
    unknown call_tmp[630680] "expr temp" "maybe param" "maybe type" "temp"
    (630683 'move' call_tmp[630680](85543 call(85539 call (partial) readFE _mt[243] call_tmp[630673])))
    unknown call_tmp[630685] "expr temp" "maybe param" "maybe type" "temp"
    (630688 'move' call_tmp[630685](85545 call | call_tmp[630680] rhs[85525]))
    (85548 call(85532 call (partial) writeEF _mt[243] call_tmp[630664]) call_tmp[630685])
    (512840 return _void[55])
  }
  function ^=[85563](ref arg lhs[85560]:_syncvar[84947](?), arg rhs[85566] :
  (459933 'query' lhs[85560] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630692] "expr temp" "maybe param" "maybe type" "temp"
    (630695 'move' call_tmp[630692](85570 call wrapped _mt[243] lhs[85560]))
    unknown call_tmp[630701] "expr temp" "maybe param" "maybe type" "temp"
    (630704 'move' call_tmp[630701](85577 call wrapped _mt[243] lhs[85560]))
    unknown call_tmp[630708] "expr temp" "maybe param" "maybe type" "temp"
    (630711 'move' call_tmp[630708](85584 call(85580 call (partial) readFE _mt[243] call_tmp[630701])))
    unknown call_tmp[630713] "expr temp" "maybe param" "maybe type" "temp"
    (630716 'move' call_tmp[630713](85586 call ^ call_tmp[630708] rhs[85566]))
    (85589 call(85573 call (partial) writeEF _mt[243] call_tmp[630692]) call_tmp[630713])
    (512842 return _void[55])
  }
  function >>=[85604](ref arg lhs[85601]:_syncvar[84947](?), arg rhs[85607] :
  (459943 'query' lhs[85601] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630720] "expr temp" "maybe param" "maybe type" "temp"
    (630723 'move' call_tmp[630720](85611 call wrapped _mt[243] lhs[85601]))
    unknown call_tmp[630729] "expr temp" "maybe param" "maybe type" "temp"
    (630732 'move' call_tmp[630729](85618 call wrapped _mt[243] lhs[85601]))
    unknown call_tmp[630736] "expr temp" "maybe param" "maybe type" "temp"
    (630739 'move' call_tmp[630736](85625 call(85621 call (partial) readFE _mt[243] call_tmp[630729])))
    unknown call_tmp[630741] "expr temp" "maybe param" "maybe type" "temp"
    (630744 'move' call_tmp[630741](85627 call >> call_tmp[630736] rhs[85607]))
    (85630 call(85614 call (partial) writeEF _mt[243] call_tmp[630720]) call_tmp[630741])
    (512844 return _void[55])
  }
  function <<=[85645](ref arg lhs[85642]:_syncvar[84947](?), arg rhs[85648] :
  (459953 'query' lhs[85642] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[630748] "expr temp" "maybe param" "maybe type" "temp"
    (630751 'move' call_tmp[630748](85652 call wrapped _mt[243] lhs[85642]))
    unknown call_tmp[630757] "expr temp" "maybe param" "maybe type" "temp"
    (630760 'move' call_tmp[630757](85659 call wrapped _mt[243] lhs[85642]))
    unknown call_tmp[630764] "expr temp" "maybe param" "maybe type" "temp"
    (630767 'move' call_tmp[630764](85666 call(85662 call (partial) readFE _mt[243] call_tmp[630757])))
    unknown call_tmp[630769] "expr temp" "maybe param" "maybe type" "temp"
    (630772 'move' call_tmp[630769](85668 call << call_tmp[630764] rhs[85648]))
    (85671 call(85655 call (partial) writeEF _mt[243] call_tmp[630748]) call_tmp[630769])
    (512846 return _void[55])
  }
  function chpl__initCopy[85686](ref arg sv[85683]:_syncvar[84947](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[512850] "RVV" "temp"
    unknown call_tmp[630776] "expr temp" "maybe param" "maybe type" "temp"
    (630779 'move' call_tmp[630776](85693 call(85689 call (partial) readFE _mt[243] sv[85683])))
    (512855 'move' ret[512850](512854 'deref' call_tmp[630776]))
    (512852 return ret[512850])
  }
  function chpl__autoCopy[85705](const  ref arg rhs[85702]:_syncvar[84947](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[512859] "RVV" "temp"
    unknown call_tmp[630781] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (630784 'move' call_tmp[630781](747867 'new' _syncvar[84947](?) rhs[85702]))
    (512864 'move' ret[512859](512863 'deref' call_tmp[630781]))
    (512861 return ret[512859])
  }
  function chpl__maybeAutoDestroyed[85727](arg x[85724]:_syncvar[84947](?)) param : _unknown[51] "inline"
  {
    unknown ret[512868] "RVV" "param" "temp"
    (512873 'move' ret[512868](512872 'deref' 1))
    (512870 return ret[512868])
  }
  function chpl__autoDestroy[85744](arg x[85741]:_syncvar[84947](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[630788] "expr temp" "maybe param" "maybe type" "temp"
    (630791 'move' call_tmp[630788](85747 call isOwned _mt[243] x[85741]))
    unknown call_tmp[630793] "expr temp" "maybe param" "maybe type" "temp"
    (630796 'move' call_tmp[630793](85751 call == call_tmp[630788] 1))
    unknown call_tmp[630798] "expr temp" "maybe param" "maybe type" "temp"
    (630801 'move' call_tmp[630798](85761 call _cond_test call_tmp[630793]))
    if call_tmp[630798]
    {
      unknown call_tmp[630805] "expr temp" "maybe param" "maybe type" "temp"
      (630808 'move' call_tmp[630805](85754 call wrapped _mt[243] x[85741]))
      (85758 call chpl__delete call_tmp[630805])
    }
    (512875 return _void[55])
  }
  function chpl__readXX[85778](const  ref arg x[85775]:_syncvar[84947](?)) : _unknown[51] "no doc"
  {
    unknown ret[512879] "RVV" "temp"
    unknown call_tmp[630812] "expr temp" "maybe param" "maybe type" "temp"
    (630815 'move' call_tmp[630812](85785 call(85781 call (partial) readXX _mt[243] x[85775])))
    (512884 'move' ret[512879](512883 'deref' call_tmp[630812]))
    (512881 return ret[512879])
  }
  function <=>[85797](arg lhs[85794]:_syncvar[84947](?), ref arg rhs[85799]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85802] "dead at end of block" "const" "insert auto destroy"
    (541566 'init var' tmp[85802] lhs[85794])
    (85805 'end of statement')
    (85809 call = lhs[85794] rhs[85799])
    (476917 'end of statement')
    (85814 call = rhs[85799] tmp[85802])
    (476918 'end of statement' tmp[85802])
    (512886 return _void[55])
  }
  function <=>[85823](ref arg lhs[85821]:_any[178](?), arg rhs[85826]:_syncvar[84947](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85830] "dead at end of block" "const" "insert auto destroy"
    (541568 'init var' tmp[85830] lhs[85821])
    (85833 'end of statement')
    (85837 call = lhs[85821] rhs[85826])
    (476920 'end of statement')
    (85842 call = rhs[85826] tmp[85830])
    (476921 'end of statement' tmp[85830])
    (512888 return _void[55])
  }
  function <=>[85853](arg lhs[85850]:_syncvar[84947](?), arg rhs[85856]:_syncvar[84947](?)) : _unknown[51] "no return value for void"
  {
    const tmp[85860] "dead at end of block" "const" "insert auto destroy"
    (541570 'init var' tmp[85860] lhs[85850])
    (85863 'end of statement')
    (85867 call = lhs[85850] rhs[85856])
    (476923 'end of statement')
    (85872 call = rhs[85856] tmp[85860])
    (476924 'end of statement' tmp[85860])
    (512890 return _void[55])
  }
  function _synccls[86374](?).init[85895](arg _mt[86378]:_MT[238], arg this[86376]:_synccls[86374](?), arg valType[85893]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460036] "temporary of super field" "temp"
    (460044 'move' super_tmp[460036](460037 '.v' this[86376] c"super"))
    (460040 call init _mt[243] super_tmp[460036])
    (476926 'end of statement')
    unknown tmp[459989] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491979] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[630817] "expr temp" "maybe param" "maybe type" "temp"
      (630820 'move' call_tmp[630817](459991 '.v' this[86376] c"super"))
      (491983 'move' call_type_tmp[491979](459994 'typeof' call_tmp[630817]))
    }
    (459995 'move' tmp[459989] call_type_tmp[491979])
    unknown call_tmp[630822] "maybe param" "maybe type" "temp"
    (630825 'move' call_tmp[630822](460000 'cast' tmp[459989] this[86376]))
    unknown chpl__thisAsParent[459997] "dead at end of block" "insert auto destroy" "temp"
    (541572 'init var' chpl__thisAsParent[459997] call_tmp[630822] tmp[459989])
    (460003 'setcid' chpl__thisAsParent[459997])
    (476927 'end of statement')
    unknown tmp[460005] "temp" "type variable"
    (460007 'move' tmp[460005] valType[85893])
    (460009 'init field' this[86376] c"valType" tmp[460005])
    (476928 'end of statement')
    unknown tmp[460013] "temp"
    unknown call_tmp[630827] "expr temp" "maybe param" "maybe type" "temp"
    (630830 'move' call_tmp[630827](460022 '.v' this[86376] c"valType"))
    (460016 'default init var' tmp[460013] call_tmp[630827])
    (460018 '.=' this[86376] c"value" tmp[460013])
    (476929 'end of statement')
    val tmp[460025]:chpl_sync_aux_t[87955] "temp"
    (460028 'default init var' tmp[460025] chpl_sync_aux_t[87955])
    (460030 '.=' this[86376] c"syncAux" tmp[460025])
    (476930 'end of statement')
    (460035 'setcid' this[86376])
    (476931 'end of statement')
    unknown call_tmp[630834] "expr temp" "maybe param" "maybe type" "temp"
    (630837 'move' call_tmp[630834](377049 call syncAux _mt[243] this[86376]))
    (85916 call chpl_sync_initAux call_tmp[630834])
    (512892 return _void[55])
  }
  function _synccls[86374](?).deinit[85922](arg _mt[86382]:_MT[238], arg this[86380]:_synccls[86374](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[630841] "expr temp" "maybe param" "maybe type" "temp"
    (630844 'move' call_tmp[630841](377054 call syncAux _mt[243] this[86380]))
    (85927 call chpl_sync_destroyAux call_tmp[630841])
    (512894 return _void[55])
  }
  function _synccls[86374](?).readFE[85934](arg _mt[86386]:_MT[238], arg this[86384]:_synccls[86374](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512898] "RVV" "temp"
    unknown ret[85937] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630848] "expr temp" "maybe param" "maybe type" "temp"
    (630851 'move' call_tmp[630848](377059 call valType _mt[243] this[86384]))
    (541574 'default init var' ret[85937] call_tmp[630848])
    (85940 'end of statement')
    const tmp[85980] "const" "temp"
    unknown call_tmp[630853] "expr temp" "maybe param" "maybe type" "temp"
    (630856 'move' call_tmp[630853](85977 '_wide_get_locale' this[86384]))
    (85982 'move' tmp[85980](85978 'deref' call_tmp[630853]))
    {
      {
        unknown localRet[85944] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541576] "maybe param" "maybe type" "temp"
        (541585 'move' type_tmp[541576](541582 call valType _mt[243] this[86384]))
        (541578 'init var split decl' localRet[85944] type_tmp[541576])
        (85947 'end of statement')
        (85951 call chpl_rmem_consist_release)
        (476934 'end of statement')
        unknown call_tmp[630862] "expr temp" "maybe param" "maybe type" "temp"
        (630865 'move' call_tmp[630862](377070 call syncAux _mt[243] this[86384]))
        (85956 call chpl_sync_waitFullAndLock call_tmp[630862])
        (476935 'end of statement')
        unknown call_tmp[630869] "maybe param" "maybe type" "temp"
        (630872 'move' call_tmp[630869](377076 call value _mt[243] this[86384]))
        (541587 'init var split init' localRet[85944] call_tmp[630869] type_tmp[541576])
        (476936 'end of statement' localRet[85944])
        unknown call_tmp[630876] "expr temp" "maybe param" "maybe type" "temp"
        (630879 'move' call_tmp[630876](377081 call syncAux _mt[243] this[86384]))
        (85966 call chpl_sync_markAndSignalEmpty call_tmp[630876])
        (476938 'end of statement')
        (85970 call chpl_rmem_consist_acquire)
        (476939 'end of statement')
        (85974 call = ret[85937] localRet[85944])
        (476940 'end of statement' ret[85937] localRet[85944])
      }
      (85985 'on block' 0 tmp[85980])
    }
    (512903 'move' ret[512898](512902 'deref' ret[85937]))
    gotoReturn _end_readFE[512896] _end_readFE[512896]
    (476943 'end of statement' ret[85937])
    label _end_readFE[512896]
    (512900 return ret[512898])
  }
  function _synccls[86374](?).readFF[85995](arg _mt[86390]:_MT[238], arg this[86388]:_synccls[86374](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512909] "RVV" "temp"
    unknown ret[85998] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630883] "expr temp" "maybe param" "maybe type" "temp"
    (630886 'move' call_tmp[630883](377089 call valType _mt[243] this[86388]))
    (541590 'default init var' ret[85998] call_tmp[630883])
    (86001 'end of statement')
    const tmp[86041] "const" "temp"
    unknown call_tmp[630888] "expr temp" "maybe param" "maybe type" "temp"
    (630891 'move' call_tmp[630888](86038 '_wide_get_locale' this[86388]))
    (86043 'move' tmp[86041](86039 'deref' call_tmp[630888]))
    {
      {
        unknown localRet[86005] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541592] "maybe param" "maybe type" "temp"
        (541601 'move' type_tmp[541592](541598 call valType _mt[243] this[86388]))
        (541594 'init var split decl' localRet[86005] type_tmp[541592])
        (86008 'end of statement')
        (86012 call chpl_rmem_consist_release)
        (476945 'end of statement')
        unknown call_tmp[630897] "expr temp" "maybe param" "maybe type" "temp"
        (630900 'move' call_tmp[630897](377100 call syncAux _mt[243] this[86388]))
        (86017 call chpl_sync_waitFullAndLock call_tmp[630897])
        (476946 'end of statement')
        unknown call_tmp[630904] "maybe param" "maybe type" "temp"
        (630907 'move' call_tmp[630904](377106 call value _mt[243] this[86388]))
        (541603 'init var split init' localRet[86005] call_tmp[630904] type_tmp[541592])
        (476947 'end of statement' localRet[86005])
        unknown call_tmp[630911] "expr temp" "maybe param" "maybe type" "temp"
        (630914 'move' call_tmp[630911](377111 call syncAux _mt[243] this[86388]))
        (86027 call chpl_sync_markAndSignalFull call_tmp[630911])
        (476949 'end of statement')
        (86031 call chpl_rmem_consist_acquire)
        (476950 'end of statement')
        (86035 call = ret[85998] localRet[86005])
        (476951 'end of statement' ret[85998] localRet[86005])
      }
      (86046 'on block' 0 tmp[86041])
    }
    (512914 'move' ret[512909](512913 'deref' ret[85998]))
    gotoReturn _end_readFF[512907] _end_readFF[512907]
    (476954 'end of statement' ret[85998])
    label _end_readFF[512907]
    (512911 return ret[512909])
  }
  function _synccls[86374](?).readXX[86056](arg _mt[86394]:_MT[238], arg this[86392]:_synccls[86374](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512920] "RVV" "temp"
    unknown ret[86059] "dead at end of block" "insert auto destroy"
    unknown call_tmp[630918] "expr temp" "maybe param" "maybe type" "temp"
    (630921 'move' call_tmp[630918](377119 call valType _mt[243] this[86392]))
    (541606 'default init var' ret[86059] call_tmp[630918])
    (86062 'end of statement')
    const tmp[86102] "const" "temp"
    unknown call_tmp[630923] "expr temp" "maybe param" "maybe type" "temp"
    (630926 'move' call_tmp[630923](86099 '_wide_get_locale' this[86392]))
    (86104 'move' tmp[86102](86100 'deref' call_tmp[630923]))
    {
      {
        unknown localRet[86066] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541608] "maybe param" "maybe type" "temp"
        (541617 'move' type_tmp[541608](541614 call valType _mt[243] this[86392]))
        (541610 'init var split decl' localRet[86066] type_tmp[541608])
        (86069 'end of statement')
        (86073 call chpl_rmem_consist_release)
        (476956 'end of statement')
        unknown call_tmp[630932] "expr temp" "maybe param" "maybe type" "temp"
        (630935 'move' call_tmp[630932](377130 call syncAux _mt[243] this[86392]))
        (86078 call chpl_sync_lock call_tmp[630932])
        (476957 'end of statement')
        unknown call_tmp[630939] "maybe param" "maybe type" "temp"
        (630942 'move' call_tmp[630939](377136 call value _mt[243] this[86392]))
        (541619 'init var split init' localRet[86066] call_tmp[630939] type_tmp[541608])
        (476958 'end of statement' localRet[86066])
        unknown call_tmp[630946] "expr temp" "maybe param" "maybe type" "temp"
        (630949 'move' call_tmp[630946](377141 call syncAux _mt[243] this[86392]))
        (86088 call chpl_sync_unlock call_tmp[630946])
        (476960 'end of statement')
        (86092 call chpl_rmem_consist_acquire)
        (476961 'end of statement')
        (86096 call = ret[86059] localRet[86066])
        (476962 'end of statement' ret[86059] localRet[86066])
      }
      (86107 'on block' 0 tmp[86102])
    }
    (512925 'move' ret[512920](512924 'deref' ret[86059]))
    gotoReturn _end_readXX[512918] _end_readXX[512918]
    (476965 'end of statement' ret[86059])
    label _end_readXX[512918]
    (512922 return ret[512920])
  }
  function _synccls[86374](?).writeEF[86121](arg _mt[86398]:_MT[238], arg this[86396]:_synccls[86374](?), arg val[86118] :
  (377149 call valType _mt[243] this[86396])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86157] "const" "temp"
    unknown call_tmp[630953] "expr temp" "maybe param" "maybe type" "temp"
    (630956 'move' call_tmp[630953](86154 '_wide_get_locale' this[86396]))
    (86159 'move' tmp[86157](86155 'deref' call_tmp[630953]))
    {
      {
        (86132 call chpl_rmem_consist_release)
        (476967 'end of statement')
        unknown call_tmp[630960] "expr temp" "maybe param" "maybe type" "temp"
        (630963 'move' call_tmp[630960](377157 call syncAux _mt[243] this[86396]))
        (86138 call chpl_sync_waitEmptyAndLock call_tmp[630960])
        (476968 'end of statement')
        unknown call_tmp[630967] "expr temp" "maybe param" "maybe type" "temp"
        (630970 'move' call_tmp[630967](377162 call value _mt[243] this[86396]))
        (86142 call = call_tmp[630967] val[86118])
        (476969 'end of statement')
        unknown call_tmp[630974] "expr temp" "maybe param" "maybe type" "temp"
        (630977 'move' call_tmp[630974](377168 call syncAux _mt[243] this[86396]))
        (86148 call chpl_sync_markAndSignalFull call_tmp[630974])
        (476970 'end of statement')
        (86152 call chpl_rmem_consist_acquire)
      }
      (86162 'on block' 0 tmp[86157])
    }
    (512929 return _void[55])
  }
  {
    (86127 call <(86124 'lifetime_of' this[86396])(86126 'lifetime_of' val[86118]))
  }
  function _synccls[86374](?).writeFF[86175](arg _mt[86402]:_MT[238], arg this[86400]:_synccls[86374](?), arg val[86172] :
  (377173 call valType _mt[243] this[86400])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86211] "const" "temp"
    unknown call_tmp[630981] "expr temp" "maybe param" "maybe type" "temp"
    (630984 'move' call_tmp[630981](86208 '_wide_get_locale' this[86400]))
    (86213 'move' tmp[86211](86209 'deref' call_tmp[630981]))
    {
      {
        (86186 call chpl_rmem_consist_release)
        (476972 'end of statement')
        unknown call_tmp[630988] "expr temp" "maybe param" "maybe type" "temp"
        (630991 'move' call_tmp[630988](377181 call syncAux _mt[243] this[86400]))
        (86192 call chpl_sync_waitFullAndLock call_tmp[630988])
        (476973 'end of statement')
        unknown call_tmp[630995] "expr temp" "maybe param" "maybe type" "temp"
        (630998 'move' call_tmp[630995](377186 call value _mt[243] this[86400]))
        (86196 call = call_tmp[630995] val[86172])
        (476974 'end of statement')
        unknown call_tmp[631002] "expr temp" "maybe param" "maybe type" "temp"
        (631005 'move' call_tmp[631002](377192 call syncAux _mt[243] this[86400]))
        (86202 call chpl_sync_markAndSignalFull call_tmp[631002])
        (476975 'end of statement')
        (86206 call chpl_rmem_consist_acquire)
      }
      (86216 'on block' 0 tmp[86211])
    }
    (512931 return _void[55])
  }
  {
    (86181 call <(86178 'lifetime_of' this[86400])(86180 'lifetime_of' val[86172]))
  }
  function _synccls[86374](?).writeXF[86229](arg _mt[86406]:_MT[238], arg this[86404]:_synccls[86374](?), arg val[86226] :
  (377197 call valType _mt[243] this[86404])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86265] "const" "temp"
    unknown call_tmp[631009] "expr temp" "maybe param" "maybe type" "temp"
    (631012 'move' call_tmp[631009](86262 '_wide_get_locale' this[86404]))
    (86267 'move' tmp[86265](86263 'deref' call_tmp[631009]))
    {
      {
        (86240 call chpl_rmem_consist_release)
        (476977 'end of statement')
        unknown call_tmp[631016] "expr temp" "maybe param" "maybe type" "temp"
        (631019 'move' call_tmp[631016](377205 call syncAux _mt[243] this[86404]))
        (86246 call chpl_sync_lock call_tmp[631016])
        (476978 'end of statement')
        unknown call_tmp[631023] "expr temp" "maybe param" "maybe type" "temp"
        (631026 'move' call_tmp[631023](377210 call value _mt[243] this[86404]))
        (86250 call = call_tmp[631023] val[86226])
        (476979 'end of statement')
        unknown call_tmp[631030] "expr temp" "maybe param" "maybe type" "temp"
        (631033 'move' call_tmp[631030](377216 call syncAux _mt[243] this[86404]))
        (86256 call chpl_sync_markAndSignalFull call_tmp[631030])
        (476980 'end of statement')
        (86260 call chpl_rmem_consist_acquire)
      }
      (86270 'on block' 0 tmp[86265])
    }
    (512933 return _void[55])
  }
  {
    (86235 call <(86232 'lifetime_of' this[86404])(86234 'lifetime_of' val[86226]))
  }
  function _synccls[86374](?).reset[86279](arg _mt[86410]:_MT[238], arg this[86408]:_synccls[86374](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86314] "const" "temp"
    unknown call_tmp[631035] "expr temp" "maybe param" "maybe type" "temp"
    (631038 'move' call_tmp[631035](86311 '_wide_get_locale' this[86408]))
    (86316 'move' tmp[86314](86312 'deref' call_tmp[631035]))
    {
      {
        const defaultValue[86283] "dead at end of block" "const" "insert auto destroy"
        unknown call_tmp[631042] "expr temp" "maybe param" "maybe type" "temp"
        (631045 'move' call_tmp[631042](377222 call valType _mt[243] this[86408]))
        (541622 'default init var' defaultValue[86283] call_tmp[631042])
        (86286 'end of statement')
        (86290 call chpl_rmem_consist_release)
        (476982 'end of statement')
        unknown call_tmp[631049] "expr temp" "maybe param" "maybe type" "temp"
        (631052 'move' call_tmp[631049](377227 call syncAux _mt[243] this[86408]))
        (86295 call chpl_sync_lock call_tmp[631049])
        (476983 'end of statement')
        unknown call_tmp[631056] "expr temp" "maybe param" "maybe type" "temp"
        (631059 'move' call_tmp[631056](377232 call value _mt[243] this[86408]))
        (86299 call = call_tmp[631056] defaultValue[86283])
        (476984 'end of statement' defaultValue[86283])
        unknown call_tmp[631063] "expr temp" "maybe param" "maybe type" "temp"
        (631066 'move' call_tmp[631063](377238 call syncAux _mt[243] this[86408]))
        (86305 call chpl_sync_markAndSignalEmpty call_tmp[631063])
        (476986 'end of statement')
        (86309 call chpl_rmem_consist_acquire)
      }
      (86319 'on block' 0 tmp[86314])
    }
    (512935 return _void[55])
  }
  function _synccls[86374](?).isFull[86327](arg _mt[86414]:_MT[238], arg this[86412]:_synccls[86374](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512939] "RVV" "temp"
    unknown b[86330] "dead at end of block" "insert auto destroy"
    (541624 'default init var' b[86330] bool[10])
    (86333 'end of statement')
    const tmp[86360] "const" "temp"
    unknown call_tmp[631068] "expr temp" "maybe param" "maybe type" "temp"
    (631071 'move' call_tmp[631068](86357 '_wide_get_locale' this[86412]))
    (86362 'move' tmp[86360](86358 'deref' call_tmp[631068]))
    {
      {
        (86338 call chpl_rmem_consist_release)
        (476988 'end of statement')
        unknown call_tmp[631075] "expr temp" "maybe param" "maybe type" "temp"
        (631078 'move' call_tmp[631075](377245 call value _mt[243] this[86412]))
        unknown call_tmp[631080] "expr temp" "maybe param" "maybe type" "temp"
        (631083 'move' call_tmp[631080](86346 call c_ptrTo call_tmp[631075]))
        unknown call_tmp[631087] "expr temp" "maybe param" "maybe type" "temp"
        (631090 'move' call_tmp[631087](377250 call syncAux _mt[243] this[86412]))
        unknown call_tmp[631092] "expr temp" "maybe param" "maybe type" "temp"
        (631095 'move' call_tmp[631092](86349 call chpl_sync_isFull call_tmp[631080] call_tmp[631087]))
        (86350 call = b[86330] call_tmp[631092])
        (476989 'end of statement' b[86330])
        (86355 call chpl_rmem_consist_acquire)
      }
      (86365 'on block' 0 tmp[86360])
    }
    (512944 'move' ret[512939](512943 'deref' b[86330]))
    gotoReturn _end_isFull[512937] _end_isFull[512937]
    (476992 'end of statement' b[86330])
    label _end_isFull[512937]
    (512941 return ret[512939])
  }
  function _synccls[86374](?).super[777493](arg _mt[777495]:_MT[238], arg this[777497]:_synccls[86374](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777507] "RVV" "temp"
    unknown call_tmp[777514] "expr temp" "maybe param" "maybe type" "temp"
    (777517 'move' call_tmp[777514](777501 '.v' this[777497] c"super"))
    (777512 'move' ret[777507](777511 'deref' call_tmp[777514]))
    (777509 return ret[777507])
  }
  function _synccls[777524](?).valType[777519](arg _mt[777521]:_MT[238], arg this[777526]:_synccls[777524](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777575] "RVV" "temp" "type variable"
    unknown borrowOfThis[777528]
    (777567 'end of statement')
    (777530 'move' borrowOfThis[777528](777533 call _cast _borrowedNonNilable[214](?) this[777526]))
    (777568 'end of statement' borrowOfThis[777528])
    unknown call_tmp[777589] "expr temp" "maybe param" "maybe type" "temp"
    (777592 'move' call_tmp[777589](777557 'is bound' borrowOfThis[777528] c"valType"))
    if call_tmp[777589]
    {
      unknown call_tmp[777594] "expr temp" "maybe param" "maybe type" "temp"
      (777597 'move' call_tmp[777594](777538 '.v' borrowOfThis[777528] c"valType"))
      unknown call_tmp[777599] "expr temp" "maybe param" "maybe type" "temp"
      (777602 'move' call_tmp[777599](777553 call chpl_checkLegalTypeFieldAccessor this[777526] call_tmp[777594] "valType"))
      (777580 'move' ret[777575](777579 'deref' call_tmp[777599]))
      gotoReturn _end_valType[777573] _end_valType[777573]
      (777570 'end of statement' borrowOfThis[777528])
    }
    {
      (777585 'move' ret[777575](777584 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777573] _end_valType[777573]
    }
    label _end_valType[777573]
    (777577 return ret[777575])
  }
  function _synccls[777524](?).valType[777604](arg _mt[777606]:_MT[238], arg this[777608]:_synccls[777524](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777643] "RVV" "temp" "type variable"
    unknown borrowOfThis[777610] "type variable"
    (777635 'end of statement')
    (777612 'move' borrowOfThis[777610](777615 call _cast _borrowedNonNilable[214](?) this[777608]))
    (777636 'end of statement' borrowOfThis[777610])
    unknown call_tmp[777657] "expr temp" "maybe param" "maybe type" "temp"
    (777660 'move' call_tmp[777657](777625 'is bound' borrowOfThis[777610] c"valType"))
    if call_tmp[777657]
    {
      unknown call_tmp[777662] "expr temp" "maybe param" "maybe type" "temp"
      (777665 'move' call_tmp[777662](777620 '.v' borrowOfThis[777610] c"valType"))
      unknown call_tmp[777667] "expr temp" "maybe param" "maybe type" "temp"
      (777670 'move' call_tmp[777667](777621 call chpl_checkLegalTypeFieldAccessor this[777608] call_tmp[777662] "valType"))
      (777648 'move' ret[777643](777647 'deref' call_tmp[777667]))
      gotoReturn _end_valType[777641] _end_valType[777641]
      (777638 'end of statement' borrowOfThis[777610])
    }
    {
      (777653 'move' ret[777643](777652 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777641] _end_valType[777641]
    }
    label _end_valType[777641]
    (777645 return ret[777643])
  }
  function _synccls[86374](?).value[777672](arg _mt[777674]:_MT[238], arg this[777676]:_synccls[86374](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777686] "RVV" "temp"
    unknown call_tmp[777693] "expr temp" "maybe param" "maybe type" "temp"
    (777696 'move' call_tmp[777693](777680 '.' this[777676] c"value"))
    (777691 'move' ret[777686](777690 'addr of' call_tmp[777693]))
    (777688 return ret[777686])
  }
  function _synccls[86374](?).syncAux[777698](arg _mt[777700]:_MT[238], arg this[777702]:_synccls[86374](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777712] "RVV" "temp"
    unknown call_tmp[777719] "expr temp" "maybe param" "maybe type" "temp"
    (777722 'move' call_tmp[777719](777706 '.' this[777702] c"syncAux"))
    (777717 'move' ret[777712](777716 'addr of' call_tmp[777719]))
    (777714 return ret[777712])
  }
  function _synccls[86374](?).writeThis[777724](arg _mt[777728]:_MT[238], arg this[777726]:_synccls[86374](?), arg f[777727]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777733 call writeThisDefaultImpl f[777727] this[777726])
    (777738 return _void[55])
  }
  function _synccls[86374](?).readThis[777740](arg _mt[777744]:_MT[238], arg this[777742]:_synccls[86374](?), arg f[777743]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777748 call readThisDefaultImpl f[777743] this[777742])
    (777754 return _void[55])
  }
  type _synccls[86374](?) val super[355675]:object[22] "super class" unknown valType[85878] "type variable" unknown value[85882] valType[85878] val syncAux[85887]:chpl_sync_aux_t[87955] chpl_sync_aux_t[87955]
  type _synccls[777524](?)
  type unmanaged _synccls[415454](?)
  type _synccls[376931](?)
  function _qthreads_synccls[86865](?).init[86430](arg _mt[86869]:_MT[238], arg this[86867]:_qthreads_synccls[86865](?), arg valType[86428]:_any[178](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460086] "temporary of super field" "temp"
    (460094 'move' super_tmp[460086](460087 '.v' this[86867] c"super"))
    (460090 call init _mt[243] super_tmp[460086])
    (476994 'end of statement')
    unknown tmp[460051] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491985] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631097] "expr temp" "maybe param" "maybe type" "temp"
      (631100 'move' call_tmp[631097](460053 '.v' this[86867] c"super"))
      (491989 'move' call_type_tmp[491985](460056 'typeof' call_tmp[631097]))
    }
    (460057 'move' tmp[460051] call_type_tmp[491985])
    unknown call_tmp[631102] "maybe param" "maybe type" "temp"
    (631105 'move' call_tmp[631102](460062 'cast' tmp[460051] this[86867]))
    unknown chpl__thisAsParent[460059] "dead at end of block" "insert auto destroy" "temp"
    (541626 'init var' chpl__thisAsParent[460059] call_tmp[631102] tmp[460051])
    (460065 'setcid' chpl__thisAsParent[460059])
    (476995 'end of statement')
    unknown tmp[460067] "temp" "type variable"
    (460069 'move' tmp[460067] valType[86428])
    (460071 'init field' this[86867] c"valType" tmp[460067])
    (476996 'end of statement')
    val tmp[460075]:aligned_t[88362] "temp"
    (460078 'default init var' tmp[460075] aligned_t[88362])
    (460080 '.=' this[86867] c"alignedValue" tmp[460075])
    (476997 'end of statement')
    (460085 'setcid' this[86867])
    (476998 'end of statement')
    unknown call_tmp[631109] "expr temp" "maybe param" "maybe type" "temp"
    (631112 'move' call_tmp[631109](377260 call alignedValue _mt[243] this[86867]))
    unknown call_tmp[631114] "expr temp" "maybe param" "maybe type" "temp"
    (631117 'move' call_tmp[631114](86454 call defaultOfAlignedT valType[86428]))
    (86455 call qthread_purge_to call_tmp[631109] call_tmp[631114])
    (512948 return _void[55])
  }
  function _qthreads_synccls[86865](?).deinit[86461](arg _mt[86873]:_MT[238], arg this[86871]:_qthreads_synccls[86865](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631121] "expr temp" "maybe param" "maybe type" "temp"
    (631124 'move' call_tmp[631121](377266 call alignedValue _mt[243] this[86871]))
    (86466 call qthread_fill call_tmp[631121])
    (512950 return _void[55])
  }
  function _qthreads_synccls[86865](?).readFE[86473](arg _mt[86877]:_MT[238], arg this[86875]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512954] "RVV" "temp"
    unknown ret[86476] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631128] "expr temp" "maybe param" "maybe type" "temp"
    (631131 'move' call_tmp[631128](377271 call valType _mt[243] this[86875]))
    (541628 'default init var' ret[86476] call_tmp[631128])
    (86479 'end of statement')
    const tmp[86513] "const" "temp"
    unknown call_tmp[631133] "expr temp" "maybe param" "maybe type" "temp"
    (631136 'move' call_tmp[631133](86510 '_wide_get_locale' this[86875]))
    (86515 'move' tmp[86513](86511 'deref' call_tmp[631133]))
    {
      {
        unknown alignedLocalRet[86483] "dead at end of block" "insert auto destroy"
        (541630 'default init var' alignedLocalRet[86483] aligned_t[88362])
        (86486 'end of statement')
        (86490 call chpl_rmem_consist_release)
        (477001 'end of statement')
        unknown call_tmp[631140] "expr temp" "maybe param" "maybe type" "temp"
        (631143 'move' call_tmp[631140](377279 call alignedValue _mt[243] this[86875]))
        (86496 call qthread_readFE alignedLocalRet[86483] call_tmp[631140])
        (477002 'end of statement' alignedLocalRet[86483])
        (86500 call chpl_rmem_consist_acquire)
        (477004 'end of statement')
        unknown call_tmp[631147] "expr temp" "maybe param" "maybe type" "temp"
        (631150 'move' call_tmp[631147](377286 call valType _mt[243] this[86875]))
        unknown call_tmp[631152] "expr temp" "maybe param" "maybe type" "temp"
        (631155 'move' call_tmp[631152](86505 call _cast call_tmp[631147] alignedLocalRet[86483]))
        (86507 call = ret[86476] call_tmp[631152])
        (477005 'end of statement' ret[86476] alignedLocalRet[86483])
      }
      (86518 'on block' 0 tmp[86513])
    }
    (512959 'move' ret[512954](512958 'deref' ret[86476]))
    gotoReturn _end_readFE[512952] _end_readFE[512952]
    (477008 'end of statement' ret[86476])
    label _end_readFE[512952]
    (512956 return ret[512954])
  }
  function _qthreads_synccls[86865](?).readFF[86528](arg _mt[86881]:_MT[238], arg this[86879]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512965] "RVV" "temp"
    unknown ret[86531] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631159] "expr temp" "maybe param" "maybe type" "temp"
    (631162 'move' call_tmp[631159](377292 call valType _mt[243] this[86879]))
    (541632 'default init var' ret[86531] call_tmp[631159])
    (86534 'end of statement')
    const tmp[86568] "const" "temp"
    unknown call_tmp[631164] "expr temp" "maybe param" "maybe type" "temp"
    (631167 'move' call_tmp[631164](86565 '_wide_get_locale' this[86879]))
    (86570 'move' tmp[86568](86566 'deref' call_tmp[631164]))
    {
      {
        unknown alignedLocalRet[86538] "dead at end of block" "insert auto destroy"
        (541634 'default init var' alignedLocalRet[86538] aligned_t[88362])
        (86541 'end of statement')
        (86545 call chpl_rmem_consist_release)
        (477010 'end of statement')
        unknown call_tmp[631171] "expr temp" "maybe param" "maybe type" "temp"
        (631174 'move' call_tmp[631171](377300 call alignedValue _mt[243] this[86879]))
        (86551 call qthread_readFF alignedLocalRet[86538] call_tmp[631171])
        (477011 'end of statement' alignedLocalRet[86538])
        (86555 call chpl_rmem_consist_acquire)
        (477013 'end of statement')
        unknown call_tmp[631178] "expr temp" "maybe param" "maybe type" "temp"
        (631181 'move' call_tmp[631178](377307 call valType _mt[243] this[86879]))
        unknown call_tmp[631183] "expr temp" "maybe param" "maybe type" "temp"
        (631186 'move' call_tmp[631183](86560 call _cast call_tmp[631178] alignedLocalRet[86538]))
        (86562 call = ret[86531] call_tmp[631183])
        (477014 'end of statement' ret[86531] alignedLocalRet[86538])
      }
      (86573 'on block' 0 tmp[86568])
    }
    (512970 'move' ret[512965](512969 'deref' ret[86531]))
    gotoReturn _end_readFF[512963] _end_readFF[512963]
    (477017 'end of statement' ret[86531])
    label _end_readFF[512963]
    (512967 return ret[512965])
  }
  function _qthreads_synccls[86865](?).readXX[86583](arg _mt[86885]:_MT[238], arg this[86883]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512976] "RVV" "temp"
    unknown ret[86586] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631190] "expr temp" "maybe param" "maybe type" "temp"
    (631193 'move' call_tmp[631190](377313 call valType _mt[243] this[86883]))
    (541636 'default init var' ret[86586] call_tmp[631190])
    (86589 'end of statement')
    const tmp[86623] "const" "temp"
    unknown call_tmp[631195] "expr temp" "maybe param" "maybe type" "temp"
    (631198 'move' call_tmp[631195](86620 '_wide_get_locale' this[86883]))
    (86625 'move' tmp[86623](86621 'deref' call_tmp[631195]))
    {
      {
        unknown alignedLocalRet[86593] "dead at end of block" "insert auto destroy"
        (541638 'default init var' alignedLocalRet[86593] aligned_t[88362])
        (86596 'end of statement')
        (86600 call chpl_rmem_consist_release)
        (477019 'end of statement')
        unknown call_tmp[631202] "expr temp" "maybe param" "maybe type" "temp"
        (631205 'move' call_tmp[631202](377321 call alignedValue _mt[243] this[86883]))
        (86606 call qthread_readXX alignedLocalRet[86593] call_tmp[631202])
        (477020 'end of statement' alignedLocalRet[86593])
        (86610 call chpl_rmem_consist_acquire)
        (477022 'end of statement')
        unknown call_tmp[631209] "expr temp" "maybe param" "maybe type" "temp"
        (631212 'move' call_tmp[631209](377328 call valType _mt[243] this[86883]))
        unknown call_tmp[631214] "expr temp" "maybe param" "maybe type" "temp"
        (631217 'move' call_tmp[631214](86615 call _cast call_tmp[631209] alignedLocalRet[86593]))
        (86617 call = ret[86586] call_tmp[631214])
        (477023 'end of statement' ret[86586] alignedLocalRet[86593])
      }
      (86628 'on block' 0 tmp[86623])
    }
    (512981 'move' ret[512976](512980 'deref' ret[86586]))
    gotoReturn _end_readXX[512974] _end_readXX[512974]
    (477026 'end of statement' ret[86586])
    label _end_readXX[512974]
    (512978 return ret[512976])
  }
  function _qthreads_synccls[86865](?).writeEF[86642](arg _mt[86889]:_MT[238], arg this[86887]:_qthreads_synccls[86865](?), arg val[86639] :
  (377334 call valType _mt[243] this[86887])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86672] "const" "temp"
    unknown call_tmp[631221] "expr temp" "maybe param" "maybe type" "temp"
    (631224 'move' call_tmp[631221](86669 '_wide_get_locale' this[86887]))
    (86674 'move' tmp[86672](86670 'deref' call_tmp[631221]))
    {
      {
        (86653 call chpl_rmem_consist_release)
        (477028 'end of statement')
        unknown call_tmp[631228] "expr temp" "maybe param" "maybe type" "temp"
        (631231 'move' call_tmp[631228](377342 call alignedValue _mt[243] this[86887]))
        unknown call_tmp[631233] "expr temp" "maybe param" "maybe type" "temp"
        (631236 'move' call_tmp[631233](86661 call _cast aligned_t[88362] val[86639]))
        (86663 call qthread_writeEF call_tmp[631228] call_tmp[631233])
        (477029 'end of statement')
        (86667 call chpl_rmem_consist_acquire)
      }
      (86677 'on block' 0 tmp[86672])
    }
    (512985 return _void[55])
  }
  {
    (86648 call <(86645 'lifetime_of' this[86887])(86647 'lifetime_of' val[86639]))
  }
  function _qthreads_synccls[86865](?).writeFF[86690](arg _mt[86893]:_MT[238], arg this[86891]:_qthreads_synccls[86865](?), arg val[86687] :
  (377349 call valType _mt[243] this[86891])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86720] "const" "temp"
    unknown call_tmp[631240] "expr temp" "maybe param" "maybe type" "temp"
    (631243 'move' call_tmp[631240](86717 '_wide_get_locale' this[86891]))
    (86722 'move' tmp[86720](86718 'deref' call_tmp[631240]))
    {
      {
        (86701 call chpl_rmem_consist_release)
        (477031 'end of statement')
        unknown call_tmp[631247] "expr temp" "maybe param" "maybe type" "temp"
        (631250 'move' call_tmp[631247](377357 call alignedValue _mt[243] this[86891]))
        unknown call_tmp[631252] "expr temp" "maybe param" "maybe type" "temp"
        (631255 'move' call_tmp[631252](86709 call _cast aligned_t[88362] val[86687]))
        (86711 call qthread_writeFF call_tmp[631247] call_tmp[631252])
        (477032 'end of statement')
        (86715 call chpl_rmem_consist_acquire)
      }
      (86725 'on block' 0 tmp[86720])
    }
    (512987 return _void[55])
  }
  {
    (86696 call <(86693 'lifetime_of' this[86891])(86695 'lifetime_of' val[86687]))
  }
  function _qthreads_synccls[86865](?).writeXF[86738](arg _mt[86897]:_MT[238], arg this[86895]:_qthreads_synccls[86865](?), arg val[86735] :
  (377364 call valType _mt[243] this[86895])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86768] "const" "temp"
    unknown call_tmp[631259] "expr temp" "maybe param" "maybe type" "temp"
    (631262 'move' call_tmp[631259](86765 '_wide_get_locale' this[86895]))
    (86770 'move' tmp[86768](86766 'deref' call_tmp[631259]))
    {
      {
        (86749 call chpl_rmem_consist_release)
        (477034 'end of statement')
        unknown call_tmp[631266] "expr temp" "maybe param" "maybe type" "temp"
        (631269 'move' call_tmp[631266](377372 call alignedValue _mt[243] this[86895]))
        unknown call_tmp[631271] "expr temp" "maybe param" "maybe type" "temp"
        (631274 'move' call_tmp[631271](86757 call _cast aligned_t[88362] val[86735]))
        (86759 call qthread_writeF call_tmp[631266] call_tmp[631271])
        (477035 'end of statement')
        (86763 call chpl_rmem_consist_acquire)
      }
      (86773 'on block' 0 tmp[86768])
    }
    (512989 return _void[55])
  }
  {
    (86744 call <(86741 'lifetime_of' this[86895])(86743 'lifetime_of' val[86735]))
  }
  function _qthreads_synccls[86865](?).reset[86782](arg _mt[86901]:_MT[238], arg this[86899]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[86806] "const" "temp"
    unknown call_tmp[631276] "expr temp" "maybe param" "maybe type" "temp"
    (631279 'move' call_tmp[631276](86803 '_wide_get_locale' this[86899]))
    (86808 'move' tmp[86806](86804 'deref' call_tmp[631276]))
    {
      {
        (86787 call chpl_rmem_consist_release)
        (477037 'end of statement')
        unknown call_tmp[631283] "expr temp" "maybe param" "maybe type" "temp"
        (631286 'move' call_tmp[631283](377380 call alignedValue _mt[243] this[86899]))
        unknown call_tmp[631290] "expr temp" "maybe param" "maybe type" "temp"
        (631293 'move' call_tmp[631290](377385 call valType _mt[243] this[86899]))
        unknown call_tmp[631295] "expr temp" "maybe param" "maybe type" "temp"
        (631298 'move' call_tmp[631295](86796 call defaultOfAlignedT call_tmp[631290]))
        (86797 call qthread_purge_to call_tmp[631283] call_tmp[631295])
        (477038 'end of statement')
        (86801 call chpl_rmem_consist_acquire)
      }
      (86811 'on block' 0 tmp[86806])
    }
    (512991 return _void[55])
  }
  function _qthreads_synccls[86865](?).isFull[86819](arg _mt[86905]:_MT[238], arg this[86903]:_qthreads_synccls[86865](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512995] "RVV" "temp"
    unknown b[86822] "dead at end of block" "insert auto destroy"
    (541640 'default init var' b[86822] bool[10])
    (86825 'end of statement')
    const tmp[86851] "const" "temp"
    unknown call_tmp[631300] "expr temp" "maybe param" "maybe type" "temp"
    (631303 'move' call_tmp[631300](86848 '_wide_get_locale' this[86903]))
    (86853 'move' tmp[86851](86849 'deref' call_tmp[631300]))
    {
      {
        (86830 call chpl_rmem_consist_release)
        (477040 'end of statement')
        unknown call_tmp[631307] "expr temp" "maybe param" "maybe type" "temp"
        (631310 'move' call_tmp[631307](377392 call alignedValue _mt[243] this[86903]))
        unknown call_tmp[631312] "expr temp" "maybe param" "maybe type" "temp"
        (631315 'move' call_tmp[631312](86837 call qthread_feb_status call_tmp[631307]))
        unknown call_tmp[631317] "expr temp" "maybe param" "maybe type" "temp"
        (631320 'move' call_tmp[631317](86839 call _cast bool[10] call_tmp[631312]))
        (86841 call = b[86822] call_tmp[631317])
        (477041 'end of statement' b[86822])
        (86846 call chpl_rmem_consist_acquire)
      }
      (86856 'on block' 0 tmp[86851])
    }
    (513000 'move' ret[512995](512999 'deref' b[86822]))
    gotoReturn _end_isFull[512993] _end_isFull[512993]
    (477044 'end of statement' b[86822])
    label _end_isFull[512993]
    (512997 return ret[512995])
  }
  function _qthreads_synccls[86865](?).super[777756](arg _mt[777758]:_MT[238], arg this[777760]:_qthreads_synccls[86865](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777770] "RVV" "temp"
    unknown call_tmp[777777] "expr temp" "maybe param" "maybe type" "temp"
    (777780 'move' call_tmp[777777](777764 '.v' this[777760] c"super"))
    (777775 'move' ret[777770](777774 'deref' call_tmp[777777]))
    (777772 return ret[777770])
  }
  function _qthreads_synccls[777787](?).valType[777782](arg _mt[777784]:_MT[238], arg this[777789]:_qthreads_synccls[777787](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777824] "RVV" "temp" "type variable"
    unknown borrowOfThis[777791]
    (777816 'end of statement')
    (777793 'move' borrowOfThis[777791](777796 call _cast _borrowedNonNilable[214](?) this[777789]))
    (777817 'end of statement' borrowOfThis[777791])
    unknown call_tmp[777838] "expr temp" "maybe param" "maybe type" "temp"
    (777841 'move' call_tmp[777838](777806 'is bound' borrowOfThis[777791] c"valType"))
    if call_tmp[777838]
    {
      unknown call_tmp[777843] "expr temp" "maybe param" "maybe type" "temp"
      (777846 'move' call_tmp[777843](777801 '.v' borrowOfThis[777791] c"valType"))
      unknown call_tmp[777848] "expr temp" "maybe param" "maybe type" "temp"
      (777851 'move' call_tmp[777848](777802 call chpl_checkLegalTypeFieldAccessor this[777789] call_tmp[777843] "valType"))
      (777829 'move' ret[777824](777828 'deref' call_tmp[777848]))
      gotoReturn _end_valType[777822] _end_valType[777822]
      (777819 'end of statement' borrowOfThis[777791])
    }
    {
      (777834 'move' ret[777824](777833 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777822] _end_valType[777822]
    }
    label _end_valType[777822]
    (777826 return ret[777824])
  }
  function _qthreads_synccls[777787](?).valType[777853](arg _mt[777855]:_MT[238], arg this[777857]:_qthreads_synccls[777787](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777892] "RVV" "temp" "type variable"
    unknown borrowOfThis[777859] "type variable"
    (777884 'end of statement')
    (777861 'move' borrowOfThis[777859](777864 call _cast _borrowedNonNilable[214](?) this[777857]))
    (777885 'end of statement' borrowOfThis[777859])
    unknown call_tmp[777906] "expr temp" "maybe param" "maybe type" "temp"
    (777909 'move' call_tmp[777906](777874 'is bound' borrowOfThis[777859] c"valType"))
    if call_tmp[777906]
    {
      unknown call_tmp[777911] "expr temp" "maybe param" "maybe type" "temp"
      (777914 'move' call_tmp[777911](777869 '.v' borrowOfThis[777859] c"valType"))
      unknown call_tmp[777916] "expr temp" "maybe param" "maybe type" "temp"
      (777919 'move' call_tmp[777916](777870 call chpl_checkLegalTypeFieldAccessor this[777857] call_tmp[777911] "valType"))
      (777897 'move' ret[777892](777896 'deref' call_tmp[777916]))
      gotoReturn _end_valType[777890] _end_valType[777890]
      (777887 'end of statement' borrowOfThis[777859])
    }
    {
      (777902 'move' ret[777892](777901 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[777890] _end_valType[777890]
    }
    label _end_valType[777890]
    (777894 return ret[777892])
  }
  function _qthreads_synccls[86865](?).alignedValue[777921](arg _mt[777923]:_MT[238], arg this[777925]:_qthreads_synccls[86865](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[777935] "RVV" "temp"
    unknown call_tmp[777942] "expr temp" "maybe param" "maybe type" "temp"
    (777945 'move' call_tmp[777942](777929 '.' this[777925] c"alignedValue"))
    (777940 'move' ret[777935](777939 'addr of' call_tmp[777942]))
    (777937 return ret[777935])
  }
  function _qthreads_synccls[86865](?).writeThis[777947](arg _mt[777951]:_MT[238], arg this[777949]:_qthreads_synccls[86865](?), arg f[777950]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777956 call writeThisDefaultImpl f[777950] this[777949])
    (777961 return _void[55])
  }
  function _qthreads_synccls[86865](?).readThis[777963](arg _mt[777967]:_MT[238], arg this[777965]:_qthreads_synccls[86865](?), arg f[777966]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (777971 call readThisDefaultImpl f[777966] this[777965])
    (777977 return _void[55])
  }
  type _qthreads_synccls[86865](?) val super[355677]:object[22] "super class" unknown valType[86418] "type variable" val alignedValue[86422]:aligned_t[88362] aligned_t[88362]
  type _qthreads_synccls[777787](?)
  type unmanaged _qthreads_synccls[415451](?)
  type _qthreads_synccls[376926](?)
  function isSyncValue[86914](arg x[86911]:_syncvar[84947](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513006] "RVV" "param" "temp"
    (513011 'move' ret[513006](513010 'deref' 1))
    (513008 return ret[513006])
  }
  function isSyncValue[86926](arg x[86924]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513015] "RVV" "param" "temp"
    (513020 'move' ret[513015](513019 'deref' 0))
    (513017 return ret[513015])
  }
  function _singlevar[87256](?).init[86957](arg _mt[87260]:_MT[238], ref arg this[87258]:_singlevar[87256](?), arg valType[86955]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (86962 call ensureFEType valType[86955])
    (477048 'end of statement')
    unknown tmp[460097] "temp" "type variable"
    (460099 'move' tmp[460097] valType[86955])
    (460101 'init field' this[87258] c"valType" tmp[460097])
    (477049 'end of statement')
    unknown call_tmp[631322] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631325 'move' call_tmp[631322](747868 'new' _singlecls[377398](?) valType[86955](_chpl_manager = unmanaged[220](?))))
    unknown call_tmp[631327] "expr temp" "maybe param" "maybe type" "temp"
    (631330 'move' call_tmp[631327](460116 '.v' this[87258] c"valType"))
    unknown call_tmp[631332] "maybe param" "maybe type" "temp"
    (631335 'move' call_tmp[631332](460108 call unmanaged _singlecls[415457](?) call_tmp[631327]))
    unknown tmp[460105] "temp"
    (460110 'init var' tmp[460105] call_tmp[631322] call_tmp[631332])
    (460112 'init field' this[87258] c"wrapped" tmp[460105])
    (477050 'end of statement')
    unknown tmp[460121] "temp"
    (460124 'init var' tmp[460121] 1 bool[10])
    (460126 'init field' this[87258] c"isOwned" tmp[460121])
    (477051 'end of statement')
    (513022 return _void[55])
  }
  function _singlevar[87256](?).init[86992](arg _mt[87264]:_MT[238], ref arg this[87262]:_singlevar[87256](?), const arg other[86989]:_singlevar[87256](?)) : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown tmp[460130] "temp" "type variable"
    (460132 'move' tmp[460130](86999 call valType _mt[243] other[86989]))
    (460134 'init field' this[87262] c"valType" tmp[460130])
    (477052 'end of statement')
    unknown call_tmp[631341] "maybe param" "maybe type" "temp"
    (631344 'move' call_tmp[631341](87008 call wrapped _mt[243] other[86989]))
    unknown call_tmp[631346] "expr temp" "maybe param" "maybe type" "temp"
    (631349 'move' call_tmp[631346](460149 '.v' this[87262] c"valType"))
    unknown call_tmp[631351] "maybe param" "maybe type" "temp"
    (631354 'move' call_tmp[631351](460141 call unmanaged _singlecls[415457](?) call_tmp[631346]))
    unknown tmp[460138] "temp"
    (460143 'init var' tmp[460138] call_tmp[631341] call_tmp[631351])
    (460145 'init field' this[87262] c"wrapped" tmp[460138])
    (477053 'end of statement')
    unknown tmp[460152] "temp"
    (460155 'init var' tmp[460152] 0 bool[10])
    (460157 'init field' this[87262] c"isOwned" tmp[460152])
    (477054 'end of statement')
    (513024 return _void[55])
  }
  function _singlevar[87256](?).init=[87027](arg _mt[87268]:_MT[238], ref arg this[87266]:_singlevar[87256](?), const arg other[87024]:_singlevar[87256](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631356] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631359 'move' call_tmp[631356](87036 'typeof' this[87266]))
    unknown call_tmp[631363] "expr temp" "maybe param" "maybe type" "temp"
    (631366 'move' call_tmp[631363](87037 call valType _mt[243] call_tmp[631356]))
    unknown call_tmp[631370] "expr temp" "maybe param" "maybe type" "temp"
    (631373 'move' call_tmp[631370](87031 call valType _mt[243] other[87024]))
    unknown call_tmp[631375] "expr temp" "maybe param" "maybe type" "temp"
    (631378 'move' call_tmp[631375](354266 'is_coercible' call_tmp[631363] call_tmp[631370]))
    unknown call_tmp[631380] "expr temp" "maybe param" "maybe type" "temp"
    (631383 'move' call_tmp[631380](87042 call == call_tmp[631375] 0))
    unknown call_tmp[631385] "expr temp" "maybe param" "maybe type" "temp"
    (631388 'move' call_tmp[631385](87108 call _cond_test call_tmp[631380]))
    if call_tmp[631385]
    {
      unknown call_tmp[631390] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631393 'move' call_tmp[631390](87046 'typeof' this[87266]))
      unknown call_tmp[631395] "expr temp" "maybe param" "maybe type" "temp"
      (631398 'move' call_tmp[631395](87048 call _cast string[26] call_tmp[631390]))
      unknown call_tmp[631400] "expr temp" "maybe param" "maybe type" "temp"
      (631403 'move' call_tmp[631400](87050 call + "'" call_tmp[631395]))
      unknown call_tmp[631405] "expr temp" "maybe param" "maybe type" "temp"
      (631408 'move' call_tmp[631405](87053 call + call_tmp[631400] "' from '"))
      unknown call_tmp[631410] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631413 'move' call_tmp[631410](87056 'typeof' other[87024]))
      unknown call_tmp[631415] "expr temp" "maybe param" "maybe type" "temp"
      (631418 'move' call_tmp[631415](87058 call _cast string[26] call_tmp[631410]))
      unknown call_tmp[631420] "expr temp" "maybe param" "maybe type" "temp"
      (631423 'move' call_tmp[631420](87060 call + call_tmp[631405] call_tmp[631415]))
      unknown call_tmp[631425] "maybe param" "maybe type" "temp"
      (631428 'move' call_tmp[631425](87063 call + call_tmp[631420] "'"))
      unknown theseTypes[87065] "dead at end of block" "param"
      (541642 'init var' theseTypes[87065] call_tmp[631425])
      (87068 'end of statement')
      unknown call_tmp[631432] "expr temp" "maybe param" "maybe type" "temp"
      (631435 'move' call_tmp[631432](87072 call valType _mt[243] other[87024]))
      unknown call_tmp[631437] "expr temp" "maybe param" "maybe type" "temp"
      (631440 'move' call_tmp[631437](87076 call _cast string[26] call_tmp[631432]))
      unknown call_tmp[631442] "expr temp" "maybe param" "maybe type" "temp"
      (631445 'move' call_tmp[631442](87078 call + "because '" call_tmp[631437]))
      unknown call_tmp[631447] "expr temp" "maybe param" "maybe type" "temp"
      (631450 'move' call_tmp[631447](87081 call + call_tmp[631442] "' is not coercible to '"))
      unknown call_tmp[631452] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (631455 'move' call_tmp[631452](87084 'typeof' this[87266]))
      unknown call_tmp[631459] "expr temp" "maybe param" "maybe type" "temp"
      (631462 'move' call_tmp[631459](87085 call valType _mt[243] call_tmp[631452]))
      unknown call_tmp[631464] "expr temp" "maybe param" "maybe type" "temp"
      (631467 'move' call_tmp[631464](87089 call _cast string[26] call_tmp[631459]))
      unknown call_tmp[631469] "expr temp" "maybe param" "maybe type" "temp"
      (631472 'move' call_tmp[631469](87091 call + call_tmp[631447] call_tmp[631464]))
      unknown call_tmp[631474] "maybe param" "maybe type" "temp"
      (631477 'move' call_tmp[631474](87094 call + call_tmp[631469] "'"))
      unknown because[87096] "dead at end of block" "param"
      (541644 'init var' because[87096] call_tmp[631474])
      (87099 'end of statement')
      (87106 call compilerError "cannot initialize " theseTypes[87065] " " because[87096])
    }
    unknown call_tmp[631481] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631484 'move' call_tmp[631481](87118 'typeof' this[87266]))
    unknown call_tmp[631488] "expr temp" "maybe param" "maybe type" "temp"
    (631491 'move' call_tmp[631488](87119 call valType _mt[243] call_tmp[631481]))
    (87123 call(87114 call (partial) init _mt[243] this[87266]) call_tmp[631488])
    (477056 'end of statement')
    unknown call_tmp[631497] "expr temp" "maybe param" "maybe type" "temp"
    (631500 'move' call_tmp[631497](87134 call(87130 call (partial) readFF _mt[243] other[87024])))
    (87136 call(87126 call (partial) writeEF _mt[243] this[87266]) call_tmp[631497])
    (513026 return _void[55])
  }
  function _singlevar[87256](?).init=[87150](arg _mt[87272]:_MT[238], ref arg this[87270]:_singlevar[87256](?), const arg other[87147] :
  unknown call_tmp[631502] "expr temp" "maybe param" "maybe type" "temp" "type variable") : void[4] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631511] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (631514 'move' call_tmp[631511](87157 'typeof' other[87147]))
    (87159 call(87153 call (partial) init _mt[243] this[87270]) call_tmp[631511])
    (477058 'end of statement')
    (87168 call(87163 call (partial) writeEF _mt[243] this[87270]) other[87147])
    (513028 return _void[55])
  }
  function _singlevar[87256](?).deinit[87174](arg _mt[87276]:_MT[238], arg this[87274]:_singlevar[87256](?)) : _unknown[51] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631520] "expr temp" "maybe param" "maybe type" "temp"
    (631523 'move' call_tmp[631520](377435 call isOwned _mt[243] this[87274]))
    unknown call_tmp[631525] "expr temp" "maybe param" "maybe type" "temp"
    (631528 'move' call_tmp[631525](87178 call == call_tmp[631520] 1))
    unknown call_tmp[631530] "expr temp" "maybe param" "maybe type" "temp"
    (631533 'move' call_tmp[631530](87185 call _cond_test call_tmp[631525]))
    if call_tmp[631530]
    {
      unknown call_tmp[631537] "expr temp" "maybe param" "maybe type" "temp"
      (631540 'move' call_tmp[631537](377440 call wrapped _mt[243] this[87274]))
      (87182 call chpl__delete call_tmp[631537])
    }
    (513030 return _void[55])
  }
  function _singlevar[87256](?).readThis[87197](arg _mt[87280]:_MT[238], arg this[87278]:_singlevar[87256](?), arg x[87195]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87218 call compilerError "single variables cannot currently be read - use writeEF instead")
    (513032 return _void[55])
  }
  function _singlevar[87256](?).writeThis[87227](arg _mt[87284]:_MT[238], arg this[87282]:_singlevar[87256](?), arg x[87225]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (87250 call compilerError "single variables cannot currently be written - apply readFF() to those variables first")
    (513034 return _void[55])
  }
  function _singlevar[87256](?).valType[777979](arg _mt[777981]:_MT[238], arg this[777983]:_singlevar[87256](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778002] "RVV" "temp" "type variable"
    unknown call_tmp[778016] "expr temp" "maybe param" "maybe type" "temp"
    (778019 'move' call_tmp[778016](777988 'is bound' this[777983] c"valType"))
    if call_tmp[778016]
    {
      unknown call_tmp[778021] "expr temp" "maybe param" "maybe type" "temp"
      (778024 'move' call_tmp[778021](777987 '.v' this[777983] c"valType"))
      (778007 'move' ret[778002](778006 'deref' call_tmp[778021]))
      gotoReturn _end_valType[778000] _end_valType[778000]
    }
    {
      (778012 'move' ret[778002](778011 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[778000] _end_valType[778000]
    }
    label _end_valType[778000]
    (778004 return ret[778002])
  }
  function _singlevar[87256](?).valType[778026](arg _mt[778028]:_MT[238], arg this[778030]:_singlevar[87256](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[778049] "RVV" "temp" "type variable"
    unknown call_tmp[778063] "expr temp" "maybe param" "maybe type" "temp"
    (778066 'move' call_tmp[778063](778035 'is bound' this[778030] c"valType"))
    if call_tmp[778063]
    {
      unknown call_tmp[778068] "expr temp" "maybe param" "maybe type" "temp"
      (778071 'move' call_tmp[778068](778034 '.v' this[778030] c"valType"))
      (778054 'move' ret[778049](778053 'deref' call_tmp[778068]))
      gotoReturn _end_valType[778047] _end_valType[778047]
    }
    {
      (778059 'move' ret[778049](778058 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[778047] _end_valType[778047]
    }
    label _end_valType[778047]
    (778051 return ret[778049])
  }
  function _singlevar[87256](?).wrapped[778073](arg _mt[778075]:_MT[238], ref arg this[778077]:_singlevar[87256](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778087] "RVV" "temp"
    unknown call_tmp[778094] "expr temp" "maybe param" "maybe type" "temp"
    (778097 'move' call_tmp[778094](778081 '.' this[778077] c"wrapped"))
    (778092 'move' ret[778087](778091 'addr of' call_tmp[778094]))
    (778089 return ret[778087])
  }
  function _singlevar[87256](?).isOwned[778099](arg _mt[778101]:_MT[238], ref arg this[778103]:_singlevar[87256](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[778113] "RVV" "temp"
    unknown call_tmp[778120] "expr temp" "maybe param" "maybe type" "temp"
    (778123 'move' call_tmp[778120](778107 '.' this[778103] c"isOwned"))
    (778118 'move' ret[778113](778117 'addr of' call_tmp[778120]))
    (778115 return ret[778113])
  }
  function chpl_fields_are_comparable[778137](arg _arg1[778139]:_singlevar[87256](?), arg _arg2[778140]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778169]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778176] "expr temp" "maybe param" "maybe type" "temp"
    (778179 'move' call_tmp[778176](778143 call wrapped _mt[243] _arg1[778139]))
    unknown call_tmp[778181] "expr temp" "maybe param" "maybe type" "temp"
    (778184 'move' call_tmp[778181](778147 call wrapped _mt[243] _arg2[778140]))
    unknown call_tmp[778186] "expr temp" "maybe param" "maybe type" "temp"
    (778189 'move' call_tmp[778186](778151 'call resolves' c"==" call_tmp[778176] call_tmp[778181]))
    unknown call_tmp[778191] "expr temp" "maybe param" "maybe type" "temp"
    (778194 'move' call_tmp[778191](778153 call isOwned _mt[243] _arg1[778139]))
    unknown call_tmp[778196] "expr temp" "maybe param" "maybe type" "temp"
    (778199 'move' call_tmp[778196](778157 call isOwned _mt[243] _arg2[778140]))
    unknown call_tmp[778201] "expr temp" "maybe param" "maybe type" "temp"
    (778204 'move' call_tmp[778201](778161 'call resolves' c"==" call_tmp[778191] call_tmp[778196]))
    unknown call_tmp[778206] "expr temp" "maybe param" "maybe type" "temp"
    (778209 'move' call_tmp[778206](778163 '&' call_tmp[778186] call_tmp[778201]))
    (778174 'move' ret[778169](778173 'deref' call_tmp[778206]))
    (778171 return ret[778169])
  }
  function ==[778125](arg _arg1[778127]:_singlevar[87256](?), arg _arg2[778128]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778253]:bool[10] "RVV" "temp"
    unknown call_tmp[778270] "expr temp" "maybe param" "maybe type" "temp"
    (778273 'move' call_tmp[778270](778217 call wrapped _mt[243] _arg1[778127]))
    unknown call_tmp[778275] "expr temp" "maybe param" "maybe type" "temp"
    (778278 'move' call_tmp[778275](778221 call wrapped _mt[243] _arg2[778128]))
    unknown call_tmp[778280] "expr temp" "maybe param" "maybe type" "temp"
    (778283 'move' call_tmp[778280](778225 call != call_tmp[778270] call_tmp[778275]))
    if call_tmp[778280]
    {
      (778258 'move' ret[778253](778257 'deref' 0))
      gotoReturn _end_==[778251] _end_==[778251]
    }
    unknown call_tmp[778285] "expr temp" "maybe param" "maybe type" "temp"
    (778288 'move' call_tmp[778285](778231 call isOwned _mt[243] _arg1[778127]))
    unknown call_tmp[778290] "expr temp" "maybe param" "maybe type" "temp"
    (778293 'move' call_tmp[778290](778235 call isOwned _mt[243] _arg2[778128]))
    unknown call_tmp[778295] "expr temp" "maybe param" "maybe type" "temp"
    (778298 'move' call_tmp[778295](778239 call != call_tmp[778285] call_tmp[778290]))
    if call_tmp[778295]
    {
      (778263 'move' ret[778253](778262 'deref' 0))
      gotoReturn _end_==[778251] _end_==[778251]
    }
    (778268 'move' ret[778253](778267 'deref' 1))
    label _end_==[778251]
    (778255 return ret[778253])
  }
  where {
    unknown call_tmp[778300] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778303 'move' call_tmp[778300](778131 'typeof' _arg1[778127]))
    unknown call_tmp[778305] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778308 'move' call_tmp[778305](778133 'typeof' _arg2[778128]))
    unknown call_tmp[778310] "expr temp" "maybe param" "maybe type" "temp"
    (778313 'move' call_tmp[778310](778135 call == call_tmp[778300] call_tmp[778305]))
    unknown call_tmp[778315] "expr temp" "maybe param" "maybe type" "temp"
    (778318 'move' call_tmp[778315](778211 call chpl_fields_are_comparable[778137] _arg1[778127] _arg2[778128]))
    (778215 '&' call_tmp[778310] call_tmp[778315])
  }
  function chpl_fields_are_comparable[778332](arg _arg1[778334]:_singlevar[87256](?), arg _arg2[778335]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778364]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778371] "expr temp" "maybe param" "maybe type" "temp"
    (778374 'move' call_tmp[778371](778338 call wrapped _mt[243] _arg1[778334]))
    unknown call_tmp[778376] "expr temp" "maybe param" "maybe type" "temp"
    (778379 'move' call_tmp[778376](778342 call wrapped _mt[243] _arg2[778335]))
    unknown call_tmp[778381] "expr temp" "maybe param" "maybe type" "temp"
    (778384 'move' call_tmp[778381](778346 'call resolves' c"!=" call_tmp[778371] call_tmp[778376]))
    unknown call_tmp[778386] "expr temp" "maybe param" "maybe type" "temp"
    (778389 'move' call_tmp[778386](778348 call isOwned _mt[243] _arg1[778334]))
    unknown call_tmp[778391] "expr temp" "maybe param" "maybe type" "temp"
    (778394 'move' call_tmp[778391](778352 call isOwned _mt[243] _arg2[778335]))
    unknown call_tmp[778396] "expr temp" "maybe param" "maybe type" "temp"
    (778399 'move' call_tmp[778396](778356 'call resolves' c"!=" call_tmp[778386] call_tmp[778391]))
    unknown call_tmp[778401] "expr temp" "maybe param" "maybe type" "temp"
    (778404 'move' call_tmp[778401](778358 '&' call_tmp[778381] call_tmp[778396]))
    (778369 'move' ret[778364](778368 'deref' call_tmp[778401]))
    (778366 return ret[778364])
  }
  function !=[778320](arg _arg1[778322]:_singlevar[87256](?), arg _arg2[778323]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778448]:bool[10] "RVV" "temp"
    unknown call_tmp[778465] "expr temp" "maybe param" "maybe type" "temp"
    (778468 'move' call_tmp[778465](778412 call wrapped _mt[243] _arg1[778322]))
    unknown call_tmp[778470] "expr temp" "maybe param" "maybe type" "temp"
    (778473 'move' call_tmp[778470](778416 call wrapped _mt[243] _arg2[778323]))
    unknown call_tmp[778475] "expr temp" "maybe param" "maybe type" "temp"
    (778478 'move' call_tmp[778475](778420 call != call_tmp[778465] call_tmp[778470]))
    if call_tmp[778475]
    {
      (778453 'move' ret[778448](778452 'deref' 1))
      gotoReturn _end_!=[778446] _end_!=[778446]
    }
    unknown call_tmp[778480] "expr temp" "maybe param" "maybe type" "temp"
    (778483 'move' call_tmp[778480](778426 call isOwned _mt[243] _arg1[778322]))
    unknown call_tmp[778485] "expr temp" "maybe param" "maybe type" "temp"
    (778488 'move' call_tmp[778485](778430 call isOwned _mt[243] _arg2[778323]))
    unknown call_tmp[778490] "expr temp" "maybe param" "maybe type" "temp"
    (778493 'move' call_tmp[778490](778434 call != call_tmp[778480] call_tmp[778485]))
    if call_tmp[778490]
    {
      (778458 'move' ret[778448](778457 'deref' 1))
      gotoReturn _end_!=[778446] _end_!=[778446]
    }
    (778463 'move' ret[778448](778462 'deref' 0))
    label _end_!=[778446]
    (778450 return ret[778448])
  }
  where {
    unknown call_tmp[778495] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778498 'move' call_tmp[778495](778326 'typeof' _arg1[778322]))
    unknown call_tmp[778500] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778503 'move' call_tmp[778500](778328 'typeof' _arg2[778323]))
    unknown call_tmp[778505] "expr temp" "maybe param" "maybe type" "temp"
    (778508 'move' call_tmp[778505](778330 call == call_tmp[778495] call_tmp[778500]))
    unknown call_tmp[778510] "expr temp" "maybe param" "maybe type" "temp"
    (778513 'move' call_tmp[778510](778406 call chpl_fields_are_comparable[778332] _arg1[778322] _arg2[778323]))
    (778410 '&' call_tmp[778505] call_tmp[778510])
  }
  function chpl_fields_are_comparable[778527](arg _arg1[778529]:_singlevar[87256](?), arg _arg2[778530]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778559]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778566] "expr temp" "maybe param" "maybe type" "temp"
    (778569 'move' call_tmp[778566](778533 call wrapped _mt[243] _arg1[778529]))
    unknown call_tmp[778571] "expr temp" "maybe param" "maybe type" "temp"
    (778574 'move' call_tmp[778571](778537 call wrapped _mt[243] _arg2[778530]))
    unknown call_tmp[778576] "expr temp" "maybe param" "maybe type" "temp"
    (778579 'move' call_tmp[778576](778541 'call resolves' c"<" call_tmp[778566] call_tmp[778571]))
    unknown call_tmp[778581] "expr temp" "maybe param" "maybe type" "temp"
    (778584 'move' call_tmp[778581](778543 call isOwned _mt[243] _arg1[778529]))
    unknown call_tmp[778586] "expr temp" "maybe param" "maybe type" "temp"
    (778589 'move' call_tmp[778586](778547 call isOwned _mt[243] _arg2[778530]))
    unknown call_tmp[778591] "expr temp" "maybe param" "maybe type" "temp"
    (778594 'move' call_tmp[778591](778551 'call resolves' c"<" call_tmp[778581] call_tmp[778586]))
    unknown call_tmp[778596] "expr temp" "maybe param" "maybe type" "temp"
    (778599 'move' call_tmp[778596](778553 '&' call_tmp[778576] call_tmp[778591]))
    (778564 'move' ret[778559](778563 'deref' call_tmp[778596]))
    (778561 return ret[778559])
  }
  function <[778515](arg _arg1[778517]:_singlevar[87256](?), arg _arg2[778518]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778673]:bool[10] "RVV" "temp"
    unknown call_tmp[778700] "expr temp" "maybe param" "maybe type" "temp"
    (778703 'move' call_tmp[778700](778607 call wrapped _mt[243] _arg1[778517]))
    unknown call_tmp[778705] "expr temp" "maybe param" "maybe type" "temp"
    (778708 'move' call_tmp[778705](778611 call wrapped _mt[243] _arg2[778518]))
    unknown call_tmp[778710] "expr temp" "maybe param" "maybe type" "temp"
    (778713 'move' call_tmp[778710](778615 call < call_tmp[778700] call_tmp[778705]))
    if call_tmp[778710]
    {
      (778678 'move' ret[778673](778677 'deref' 1))
      gotoReturn _end_<[778671] _end_<[778671]
    }
    unknown call_tmp[778715] "expr temp" "maybe param" "maybe type" "temp"
    (778718 'move' call_tmp[778715](778621 call wrapped _mt[243] _arg1[778517]))
    unknown call_tmp[778720] "expr temp" "maybe param" "maybe type" "temp"
    (778723 'move' call_tmp[778720](778625 call wrapped _mt[243] _arg2[778518]))
    unknown call_tmp[778725] "expr temp" "maybe param" "maybe type" "temp"
    (778728 'move' call_tmp[778725](778629 call > call_tmp[778715] call_tmp[778720]))
    if call_tmp[778725]
    {
      (778683 'move' ret[778673](778682 'deref' 0))
      gotoReturn _end_<[778671] _end_<[778671]
    }
    unknown call_tmp[778730] "expr temp" "maybe param" "maybe type" "temp"
    (778733 'move' call_tmp[778730](778635 call isOwned _mt[243] _arg1[778517]))
    unknown call_tmp[778735] "expr temp" "maybe param" "maybe type" "temp"
    (778738 'move' call_tmp[778735](778639 call isOwned _mt[243] _arg2[778518]))
    unknown call_tmp[778740] "expr temp" "maybe param" "maybe type" "temp"
    (778743 'move' call_tmp[778740](778643 call < call_tmp[778730] call_tmp[778735]))
    if call_tmp[778740]
    {
      (778688 'move' ret[778673](778687 'deref' 1))
      gotoReturn _end_<[778671] _end_<[778671]
    }
    unknown call_tmp[778745] "expr temp" "maybe param" "maybe type" "temp"
    (778748 'move' call_tmp[778745](778649 call isOwned _mt[243] _arg1[778517]))
    unknown call_tmp[778750] "expr temp" "maybe param" "maybe type" "temp"
    (778753 'move' call_tmp[778750](778653 call isOwned _mt[243] _arg2[778518]))
    unknown call_tmp[778755] "expr temp" "maybe param" "maybe type" "temp"
    (778758 'move' call_tmp[778755](778657 call > call_tmp[778745] call_tmp[778750]))
    if call_tmp[778755]
    {
      (778693 'move' ret[778673](778692 'deref' 0))
      gotoReturn _end_<[778671] _end_<[778671]
    }
    (778698 'move' ret[778673](778697 'deref' 0))
    label _end_<[778671]
    (778675 return ret[778673])
  }
  where {
    unknown call_tmp[778760] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778763 'move' call_tmp[778760](778521 'typeof' _arg1[778517]))
    unknown call_tmp[778765] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (778768 'move' call_tmp[778765](778523 'typeof' _arg2[778518]))
    unknown call_tmp[778770] "expr temp" "maybe param" "maybe type" "temp"
    (778773 'move' call_tmp[778770](778525 call == call_tmp[778760] call_tmp[778765]))
    unknown call_tmp[778775] "expr temp" "maybe param" "maybe type" "temp"
    (778778 'move' call_tmp[778775](778601 call chpl_fields_are_comparable[778527] _arg1[778517] _arg2[778518]))
    (778605 '&' call_tmp[778770] call_tmp[778775])
  }
  function chpl_fields_are_comparable[778792](arg _arg1[778794]:_singlevar[87256](?), arg _arg2[778795]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[778824]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[778831] "expr temp" "maybe param" "maybe type" "temp"
    (778834 'move' call_tmp[778831](778798 call wrapped _mt[243] _arg1[778794]))
    unknown call_tmp[778836] "expr temp" "maybe param" "maybe type" "temp"
    (778839 'move' call_tmp[778836](778802 call wrapped _mt[243] _arg2[778795]))
    unknown call_tmp[778841] "expr temp" "maybe param" "maybe type" "temp"
    (778844 'move' call_tmp[778841](778806 'call resolves' c"<=" call_tmp[778831] call_tmp[778836]))
    unknown call_tmp[778846] "expr temp" "maybe param" "maybe type" "temp"
    (778849 'move' call_tmp[778846](778808 call isOwned _mt[243] _arg1[778794]))
    unknown call_tmp[778851] "expr temp" "maybe param" "maybe type" "temp"
    (778854 'move' call_tmp[778851](778812 call isOwned _mt[243] _arg2[778795]))
    unknown call_tmp[778856] "expr temp" "maybe param" "maybe type" "temp"
    (778859 'move' call_tmp[778856](778816 'call resolves' c"<=" call_tmp[778846] call_tmp[778851]))
    unknown call_tmp[778861] "expr temp" "maybe param" "maybe type" "temp"
    (778864 'move' call_tmp[778861](778818 '&' call_tmp[778841] call_tmp[778856]))
    (778829 'move' ret[778824](778828 'deref' call_tmp[778861]))
    (778826 return ret[778824])
  }
  function <=[778780](arg _arg1[778782]:_singlevar[87256](?), arg _arg2[778783]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[778938]:bool[10] "RVV" "temp"
    unknown call_tmp[778965] "expr temp" "maybe param" "maybe type" "temp"
    (778968 'move' call_tmp[778965](778872 call wrapped _mt[243] _arg1[778782]))
    unknown call_tmp[778970] "expr temp" "maybe param" "maybe type" "temp"
    (778973 'move' call_tmp[778970](778876 call wrapped _mt[243] _arg2[778783]))
    unknown call_tmp[778975] "expr temp" "maybe param" "maybe type" "temp"
    (778978 'move' call_tmp[778975](778880 call < call_tmp[778965] call_tmp[778970]))
    if call_tmp[778975]
    {
      (778943 'move' ret[778938](778942 'deref' 1))
      gotoReturn _end_<=[778936] _end_<=[778936]
    }
    unknown call_tmp[778980] "expr temp" "maybe param" "maybe type" "temp"
    (778983 'move' call_tmp[778980](778886 call wrapped _mt[243] _arg1[778782]))
    unknown call_tmp[778985] "expr temp" "maybe param" "maybe type" "temp"
    (778988 'move' call_tmp[778985](778890 call wrapped _mt[243] _arg2[778783]))
    unknown call_tmp[778990] "expr temp" "maybe param" "maybe type" "temp"
    (778993 'move' call_tmp[778990](778894 call > call_tmp[778980] call_tmp[778985]))
    if call_tmp[778990]
    {
      (778948 'move' ret[778938](778947 'deref' 0))
      gotoReturn _end_<=[778936] _end_<=[778936]
    }
    unknown call_tmp[778995] "expr temp" "maybe param" "maybe type" "temp"
    (778998 'move' call_tmp[778995](778900 call isOwned _mt[243] _arg1[778782]))
    unknown call_tmp[779000] "expr temp" "maybe param" "maybe type" "temp"
    (779003 'move' call_tmp[779000](778904 call isOwned _mt[243] _arg2[778783]))
    unknown call_tmp[779005] "expr temp" "maybe param" "maybe type" "temp"
    (779008 'move' call_tmp[779005](778908 call < call_tmp[778995] call_tmp[779000]))
    if call_tmp[779005]
    {
      (778953 'move' ret[778938](778952 'deref' 1))
      gotoReturn _end_<=[778936] _end_<=[778936]
    }
    unknown call_tmp[779010] "expr temp" "maybe param" "maybe type" "temp"
    (779013 'move' call_tmp[779010](778914 call isOwned _mt[243] _arg1[778782]))
    unknown call_tmp[779015] "expr temp" "maybe param" "maybe type" "temp"
    (779018 'move' call_tmp[779015](778918 call isOwned _mt[243] _arg2[778783]))
    unknown call_tmp[779020] "expr temp" "maybe param" "maybe type" "temp"
    (779023 'move' call_tmp[779020](778922 call > call_tmp[779010] call_tmp[779015]))
    if call_tmp[779020]
    {
      (778958 'move' ret[778938](778957 'deref' 0))
      gotoReturn _end_<=[778936] _end_<=[778936]
    }
    (778963 'move' ret[778938](778962 'deref' 1))
    label _end_<=[778936]
    (778940 return ret[778938])
  }
  where {
    unknown call_tmp[779025] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779028 'move' call_tmp[779025](778786 'typeof' _arg1[778782]))
    unknown call_tmp[779030] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779033 'move' call_tmp[779030](778788 'typeof' _arg2[778783]))
    unknown call_tmp[779035] "expr temp" "maybe param" "maybe type" "temp"
    (779038 'move' call_tmp[779035](778790 call == call_tmp[779025] call_tmp[779030]))
    unknown call_tmp[779040] "expr temp" "maybe param" "maybe type" "temp"
    (779043 'move' call_tmp[779040](778866 call chpl_fields_are_comparable[778792] _arg1[778782] _arg2[778783]))
    (778870 '&' call_tmp[779035] call_tmp[779040])
  }
  function chpl_fields_are_comparable[779057](arg _arg1[779059]:_singlevar[87256](?), arg _arg2[779060]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779089]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779096] "expr temp" "maybe param" "maybe type" "temp"
    (779099 'move' call_tmp[779096](779063 call wrapped _mt[243] _arg1[779059]))
    unknown call_tmp[779101] "expr temp" "maybe param" "maybe type" "temp"
    (779104 'move' call_tmp[779101](779067 call wrapped _mt[243] _arg2[779060]))
    unknown call_tmp[779106] "expr temp" "maybe param" "maybe type" "temp"
    (779109 'move' call_tmp[779106](779071 'call resolves' c">" call_tmp[779096] call_tmp[779101]))
    unknown call_tmp[779111] "expr temp" "maybe param" "maybe type" "temp"
    (779114 'move' call_tmp[779111](779073 call isOwned _mt[243] _arg1[779059]))
    unknown call_tmp[779116] "expr temp" "maybe param" "maybe type" "temp"
    (779119 'move' call_tmp[779116](779077 call isOwned _mt[243] _arg2[779060]))
    unknown call_tmp[779121] "expr temp" "maybe param" "maybe type" "temp"
    (779124 'move' call_tmp[779121](779081 'call resolves' c">" call_tmp[779111] call_tmp[779116]))
    unknown call_tmp[779126] "expr temp" "maybe param" "maybe type" "temp"
    (779129 'move' call_tmp[779126](779083 '&' call_tmp[779106] call_tmp[779121]))
    (779094 'move' ret[779089](779093 'deref' call_tmp[779126]))
    (779091 return ret[779089])
  }
  function >[779045](arg _arg1[779047]:_singlevar[87256](?), arg _arg2[779048]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779203]:bool[10] "RVV" "temp"
    unknown call_tmp[779230] "expr temp" "maybe param" "maybe type" "temp"
    (779233 'move' call_tmp[779230](779137 call wrapped _mt[243] _arg1[779047]))
    unknown call_tmp[779235] "expr temp" "maybe param" "maybe type" "temp"
    (779238 'move' call_tmp[779235](779141 call wrapped _mt[243] _arg2[779048]))
    unknown call_tmp[779240] "expr temp" "maybe param" "maybe type" "temp"
    (779243 'move' call_tmp[779240](779145 call > call_tmp[779230] call_tmp[779235]))
    if call_tmp[779240]
    {
      (779208 'move' ret[779203](779207 'deref' 1))
      gotoReturn _end_>[779201] _end_>[779201]
    }
    unknown call_tmp[779245] "expr temp" "maybe param" "maybe type" "temp"
    (779248 'move' call_tmp[779245](779151 call wrapped _mt[243] _arg1[779047]))
    unknown call_tmp[779250] "expr temp" "maybe param" "maybe type" "temp"
    (779253 'move' call_tmp[779250](779155 call wrapped _mt[243] _arg2[779048]))
    unknown call_tmp[779255] "expr temp" "maybe param" "maybe type" "temp"
    (779258 'move' call_tmp[779255](779159 call < call_tmp[779245] call_tmp[779250]))
    if call_tmp[779255]
    {
      (779213 'move' ret[779203](779212 'deref' 0))
      gotoReturn _end_>[779201] _end_>[779201]
    }
    unknown call_tmp[779260] "expr temp" "maybe param" "maybe type" "temp"
    (779263 'move' call_tmp[779260](779165 call isOwned _mt[243] _arg1[779047]))
    unknown call_tmp[779265] "expr temp" "maybe param" "maybe type" "temp"
    (779268 'move' call_tmp[779265](779169 call isOwned _mt[243] _arg2[779048]))
    unknown call_tmp[779270] "expr temp" "maybe param" "maybe type" "temp"
    (779273 'move' call_tmp[779270](779173 call > call_tmp[779260] call_tmp[779265]))
    if call_tmp[779270]
    {
      (779218 'move' ret[779203](779217 'deref' 1))
      gotoReturn _end_>[779201] _end_>[779201]
    }
    unknown call_tmp[779275] "expr temp" "maybe param" "maybe type" "temp"
    (779278 'move' call_tmp[779275](779179 call isOwned _mt[243] _arg1[779047]))
    unknown call_tmp[779280] "expr temp" "maybe param" "maybe type" "temp"
    (779283 'move' call_tmp[779280](779183 call isOwned _mt[243] _arg2[779048]))
    unknown call_tmp[779285] "expr temp" "maybe param" "maybe type" "temp"
    (779288 'move' call_tmp[779285](779187 call < call_tmp[779275] call_tmp[779280]))
    if call_tmp[779285]
    {
      (779223 'move' ret[779203](779222 'deref' 0))
      gotoReturn _end_>[779201] _end_>[779201]
    }
    (779228 'move' ret[779203](779227 'deref' 0))
    label _end_>[779201]
    (779205 return ret[779203])
  }
  where {
    unknown call_tmp[779290] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779293 'move' call_tmp[779290](779051 'typeof' _arg1[779047]))
    unknown call_tmp[779295] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779298 'move' call_tmp[779295](779053 'typeof' _arg2[779048]))
    unknown call_tmp[779300] "expr temp" "maybe param" "maybe type" "temp"
    (779303 'move' call_tmp[779300](779055 call == call_tmp[779290] call_tmp[779295]))
    unknown call_tmp[779305] "expr temp" "maybe param" "maybe type" "temp"
    (779308 'move' call_tmp[779305](779131 call chpl_fields_are_comparable[779057] _arg1[779047] _arg2[779048]))
    (779135 '&' call_tmp[779300] call_tmp[779305])
  }
  function chpl_fields_are_comparable[779322](arg _arg1[779324]:_singlevar[87256](?), arg _arg2[779325]:_singlevar[87256](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[779354]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[779361] "expr temp" "maybe param" "maybe type" "temp"
    (779364 'move' call_tmp[779361](779328 call wrapped _mt[243] _arg1[779324]))
    unknown call_tmp[779366] "expr temp" "maybe param" "maybe type" "temp"
    (779369 'move' call_tmp[779366](779332 call wrapped _mt[243] _arg2[779325]))
    unknown call_tmp[779371] "expr temp" "maybe param" "maybe type" "temp"
    (779374 'move' call_tmp[779371](779336 'call resolves' c">=" call_tmp[779361] call_tmp[779366]))
    unknown call_tmp[779376] "expr temp" "maybe param" "maybe type" "temp"
    (779379 'move' call_tmp[779376](779338 call isOwned _mt[243] _arg1[779324]))
    unknown call_tmp[779381] "expr temp" "maybe param" "maybe type" "temp"
    (779384 'move' call_tmp[779381](779342 call isOwned _mt[243] _arg2[779325]))
    unknown call_tmp[779386] "expr temp" "maybe param" "maybe type" "temp"
    (779389 'move' call_tmp[779386](779346 'call resolves' c">=" call_tmp[779376] call_tmp[779381]))
    unknown call_tmp[779391] "expr temp" "maybe param" "maybe type" "temp"
    (779394 'move' call_tmp[779391](779348 '&' call_tmp[779371] call_tmp[779386]))
    (779359 'move' ret[779354](779358 'deref' call_tmp[779391]))
    (779356 return ret[779354])
  }
  function >=[779310](arg _arg1[779312]:_singlevar[87256](?), arg _arg2[779313]:_singlevar[87256](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[779468]:bool[10] "RVV" "temp"
    unknown call_tmp[779495] "expr temp" "maybe param" "maybe type" "temp"
    (779498 'move' call_tmp[779495](779402 call wrapped _mt[243] _arg1[779312]))
    unknown call_tmp[779500] "expr temp" "maybe param" "maybe type" "temp"
    (779503 'move' call_tmp[779500](779406 call wrapped _mt[243] _arg2[779313]))
    unknown call_tmp[779505] "expr temp" "maybe param" "maybe type" "temp"
    (779508 'move' call_tmp[779505](779410 call > call_tmp[779495] call_tmp[779500]))
    if call_tmp[779505]
    {
      (779473 'move' ret[779468](779472 'deref' 1))
      gotoReturn _end_>=[779466] _end_>=[779466]
    }
    unknown call_tmp[779510] "expr temp" "maybe param" "maybe type" "temp"
    (779513 'move' call_tmp[779510](779416 call wrapped _mt[243] _arg1[779312]))
    unknown call_tmp[779515] "expr temp" "maybe param" "maybe type" "temp"
    (779518 'move' call_tmp[779515](779420 call wrapped _mt[243] _arg2[779313]))
    unknown call_tmp[779520] "expr temp" "maybe param" "maybe type" "temp"
    (779523 'move' call_tmp[779520](779424 call < call_tmp[779510] call_tmp[779515]))
    if call_tmp[779520]
    {
      (779478 'move' ret[779468](779477 'deref' 0))
      gotoReturn _end_>=[779466] _end_>=[779466]
    }
    unknown call_tmp[779525] "expr temp" "maybe param" "maybe type" "temp"
    (779528 'move' call_tmp[779525](779430 call isOwned _mt[243] _arg1[779312]))
    unknown call_tmp[779530] "expr temp" "maybe param" "maybe type" "temp"
    (779533 'move' call_tmp[779530](779434 call isOwned _mt[243] _arg2[779313]))
    unknown call_tmp[779535] "expr temp" "maybe param" "maybe type" "temp"
    (779538 'move' call_tmp[779535](779438 call > call_tmp[779525] call_tmp[779530]))
    if call_tmp[779535]
    {
      (779483 'move' ret[779468](779482 'deref' 1))
      gotoReturn _end_>=[779466] _end_>=[779466]
    }
    unknown call_tmp[779540] "expr temp" "maybe param" "maybe type" "temp"
    (779543 'move' call_tmp[779540](779444 call isOwned _mt[243] _arg1[779312]))
    unknown call_tmp[779545] "expr temp" "maybe param" "maybe type" "temp"
    (779548 'move' call_tmp[779545](779448 call isOwned _mt[243] _arg2[779313]))
    unknown call_tmp[779550] "expr temp" "maybe param" "maybe type" "temp"
    (779553 'move' call_tmp[779550](779452 call < call_tmp[779540] call_tmp[779545]))
    if call_tmp[779550]
    {
      (779488 'move' ret[779468](779487 'deref' 0))
      gotoReturn _end_>=[779466] _end_>=[779466]
    }
    (779493 'move' ret[779468](779492 'deref' 1))
    label _end_>=[779466]
    (779470 return ret[779468])
  }
  where {
    unknown call_tmp[779555] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779558 'move' call_tmp[779555](779316 'typeof' _arg1[779312]))
    unknown call_tmp[779560] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779563 'move' call_tmp[779560](779318 'typeof' _arg2[779313]))
    unknown call_tmp[779565] "expr temp" "maybe param" "maybe type" "temp"
    (779568 'move' call_tmp[779565](779320 call == call_tmp[779555] call_tmp[779560]))
    unknown call_tmp[779570] "expr temp" "maybe param" "maybe type" "temp"
    (779573 'move' call_tmp[779570](779396 call chpl_fields_are_comparable[779322] _arg1[779312] _arg2[779313]))
    (779400 '&' call_tmp[779565] call_tmp[779570])
  }
  function =[779575](ref arg _arg1[779577]:_singlevar[87256](?), const?  ref arg _arg2[779578]:_singlevar[87256](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[779615] "expr temp" "maybe param" "maybe type" "temp"
    (779618 'move' call_tmp[779615](779588 call wrapped _mt[243] _arg1[779577]))
    unknown call_tmp[779622] "expr temp" "maybe param" "maybe type" "temp"
    (779625 'move' call_tmp[779622](779592 call wrapped _mt[243] _arg2[779578]))
    (779596 call = call_tmp[779615] call_tmp[779622])
    (779609 'end of statement')
    unknown call_tmp[779629] "expr temp" "maybe param" "maybe type" "temp"
    (779632 'move' call_tmp[779629](779598 call isOwned _mt[243] _arg1[779577]))
    unknown call_tmp[779636] "expr temp" "maybe param" "maybe type" "temp"
    (779639 'move' call_tmp[779636](779602 call isOwned _mt[243] _arg2[779578]))
    (779606 call = call_tmp[779629] call_tmp[779636])
    (779611 return _void[55])
  }
  where {
    unknown call_tmp[779641] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779644 'move' call_tmp[779641](779581 'typeof' _arg1[779577]))
    unknown call_tmp[779646] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (779649 'move' call_tmp[779646](779583 'typeof' _arg2[779578]))
    (779585 call == call_tmp[779641] call_tmp[779646])
  }
  function chpl__defaultHash[779651](arg r[779653]:_singlevar[87256](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[779684] "RVV" "temp"
    unknown call_tmp[779691] "expr temp" "maybe param" "maybe type" "temp"
    (779694 'move' call_tmp[779691](779670 call isOwned _mt[243] r[779653]))
    unknown call_tmp[779696] "expr temp" "maybe param" "maybe type" "temp"
    (779699 'move' call_tmp[779696](779674 call chpl__defaultHash call_tmp[779691]))
    unknown call_tmp[779701] "expr temp" "maybe param" "maybe type" "temp"
    (779704 'move' call_tmp[779701](779661 call wrapped _mt[243] r[779653]))
    unknown call_tmp[779706] "expr temp" "maybe param" "maybe type" "temp"
    (779709 'move' call_tmp[779706](779665 call chpl__defaultHash call_tmp[779701]))
    unknown call_tmp[779711] "expr temp" "maybe param" "maybe type" "temp"
    (779714 'move' call_tmp[779711](779655 call valType _mt[243] r[779653]))
    unknown call_tmp[779716] "expr temp" "maybe param" "maybe type" "temp"
    (779719 'move' call_tmp[779716](779659 call chpl__defaultHash call_tmp[779711]))
    unknown call_tmp[779721] "expr temp" "maybe param" "maybe type" "temp"
    (779724 'move' call_tmp[779721](779667 call chpl__defaultHashCombine call_tmp[779706] call_tmp[779716] 2))
    unknown call_tmp[779726] "expr temp" "maybe param" "maybe type" "temp"
    (779729 'move' call_tmp[779726](779676 call chpl__defaultHashCombine call_tmp[779696] call_tmp[779721] 3))
    (779689 'move' ret[779684](779688 'deref' call_tmp[779726]))
    (779686 return ret[779684])
  }
  single type _singlevar[87256](?) unknown valType[86935] "type variable" unknown wrapped[86943](86941 call unmanaged _singlecls[415457](?) valType[86935]) val isOwned[86949]:bool[10] 1 bool[10]
  function isSingleType[87293](arg t[87290]:_singlevar[87256](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513038] "RVV" "param" "temp"
    (513043 'move' ret[513038](513042 'deref' 1))
    (513040 return ret[513038])
  }
  function isSingleType[87305](arg t[87303]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[513047] "RVV" "param" "temp"
    (513052 'move' ret[513047](513051 'deref' 0))
    (513049 return ret[513047])
  }
  function _singlevar[87256](?).readFF[87316](arg _mt[87321]:_MT[238], arg this[87318]:_singlevar[87256](?) :
  _singlevar[87256](?)) : _unknown[51] "method"
  {
    unknown ret[513056] "RVV" "temp"
    unknown call_tmp[631544] "expr temp" "maybe param" "maybe type" "temp"
    (631547 'move' call_tmp[631544](358295 call wrapped _mt[243] this[87318]))
    unknown call_tmp[631551] "expr temp" "maybe param" "maybe type" "temp"
    (631554 'move' call_tmp[631551](87328 call(87324 call (partial) readFF _mt[243] call_tmp[631544])))
    (513061 'move' ret[513056](513060 'deref' call_tmp[631551]))
    (513058 return ret[513056])
  }
  function _singlevar[87256](?).readXX[87337](arg _mt[87342]:_MT[238], arg this[87339]:_singlevar[87256](?) :
  _singlevar[87256](?)) : _unknown[51] "method"
  {
    unknown ret[513065] "RVV" "temp"
    (87346 call chpl_task_yield)
    (477066 'end of statement')
    unknown call_tmp[631558] "expr temp" "maybe param" "maybe type" "temp"
    (631561 'move' call_tmp[631558](358300 call wrapped _mt[243] this[87339]))
    unknown call_tmp[631565] "expr temp" "maybe param" "maybe type" "temp"
    (631568 'move' call_tmp[631565](87354 call(87350 call (partial) readXX _mt[243] call_tmp[631558])))
    (513070 'move' ret[513065](513069 'deref' call_tmp[631565]))
    (513067 return ret[513065])
  }
  function _singlevar[87256](?).writeEF[87366](arg _mt[87371]:_MT[238], arg this[87368]:_singlevar[87256](?) :
  _singlevar[87256](?), arg x[87363] :
  (377446 call valType _mt[243] this[87368])) : _unknown[51] "method" "no return value for void"
  {
    unknown call_tmp[631574] "expr temp" "maybe param" "maybe type" "temp"
    (631577 'move' call_tmp[631574](358305 call wrapped _mt[243] this[87368]))
    (87379 call(87374 call (partial) writeEF _mt[243] call_tmp[631574]) x[87363])
    (513072 return _void[55])
  }
  function _singlevar[87256](?).isFull[87387](arg _mt[87392]:_MT[238], arg this[87389]:_singlevar[87256](?) :
  _singlevar[87256](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[513076] "RVV" "temp"
    unknown call_tmp[631583] "expr temp" "maybe param" "maybe type" "temp"
    (631586 'move' call_tmp[631583](358310 call wrapped _mt[243] this[87389]))
    unknown call_tmp[631590] "expr temp" "maybe param" "maybe type" "temp"
    (631593 'move' call_tmp[631590](87395 call isFull _mt[243] call_tmp[631583]))
    (513081 'move' ret[513076](513080 'deref' call_tmp[631590]))
    (513078 return ret[513076])
  }
  function =[87413](ref arg lhs[87410]:_singlevar[87256](?), arg rhs[87416] :
  (460167 'query' lhs[87410] 1)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[631597] "expr temp" "maybe param" "maybe type" "temp"
    (631600 'move' call_tmp[631597](87420 call wrapped _mt[243] lhs[87410]))
    (87428 call(87423 call (partial) writeEF _mt[243] call_tmp[631597]) rhs[87416])
    (513083 return _void[55])
  }
  function chpl__initCopy[87443](ref arg sv[87440]:_singlevar[87256](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[513087] "RVV" "temp"
    unknown call_tmp[631606] "expr temp" "maybe param" "maybe type" "temp"
    (631609 'move' call_tmp[631606](87450 call(87446 call (partial) readFF _mt[243] sv[87440])))
    (513092 'move' ret[513087](513091 'deref' call_tmp[631606]))
    (513089 return ret[513087])
  }
  function chpl__autoCopy[87462](const  ref arg rhs[87459]:_singlevar[87256](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[513096] "RVV" "temp"
    unknown call_tmp[631611] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (631614 'move' call_tmp[631611](747869 'new' _singlevar[87256](?) rhs[87459]))
    (513101 'move' ret[513096](513100 'deref' call_tmp[631611]))
    (513098 return ret[513096])
  }
  function chpl__maybeAutoDestroyed[87484](arg x[87481]:_singlevar[87256](?)) param : _unknown[51] "inline"
  {
    unknown ret[513105] "RVV" "param" "temp"
    (513110 'move' ret[513105](513109 'deref' 1))
    (513107 return ret[513105])
  }
  function chpl__autoDestroy[87501](arg x[87498]:_singlevar[87256](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[631618] "expr temp" "maybe param" "maybe type" "temp"
    (631621 'move' call_tmp[631618](87504 call isOwned _mt[243] x[87498]))
    unknown call_tmp[631623] "expr temp" "maybe param" "maybe type" "temp"
    (631626 'move' call_tmp[631623](87508 call == call_tmp[631618] 1))
    unknown call_tmp[631628] "expr temp" "maybe param" "maybe type" "temp"
    (631631 'move' call_tmp[631628](87518 call _cond_test call_tmp[631623]))
    if call_tmp[631628]
    {
      unknown call_tmp[631635] "expr temp" "maybe param" "maybe type" "temp"
      (631638 'move' call_tmp[631635](87511 call wrapped _mt[243] x[87498]))
      (87515 call chpl__delete call_tmp[631635])
    }
    (513112 return _void[55])
  }
  function chpl__readXX[87535](const  ref arg x[87532]:_singlevar[87256](?)) : _unknown[51] "no doc"
  {
    unknown ret[513116] "RVV" "temp"
    unknown call_tmp[631642] "expr temp" "maybe param" "maybe type" "temp"
    (631645 'move' call_tmp[631642](87542 call(87538 call (partial) readXX _mt[243] x[87532])))
    (513121 'move' ret[513116](513120 'deref' call_tmp[631642]))
    (513118 return ret[513116])
  }
  function _singlecls[87888](?).init[87566](arg _mt[87892]:_MT[238], arg this[87890]:_singlecls[87888](?), arg valType[87564]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460250] "temporary of super field" "temp"
    (460258 'move' super_tmp[460250](460251 '.v' this[87890] c"super"))
    (460254 call init _mt[243] super_tmp[460250])
    (477076 'end of statement')
    unknown tmp[460203] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491991] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[631647] "expr temp" "maybe param" "maybe type" "temp"
      (631650 'move' call_tmp[631647](460205 '.v' this[87890] c"super"))
      (491995 'move' call_type_tmp[491991](460208 'typeof' call_tmp[631647]))
    }
    (460209 'move' tmp[460203] call_type_tmp[491991])
    unknown call_tmp[631652] "maybe param" "maybe type" "temp"
    (631655 'move' call_tmp[631652](460214 'cast' tmp[460203] this[87890]))
    unknown chpl__thisAsParent[460211] "dead at end of block" "insert auto destroy" "temp"
    (541646 'init var' chpl__thisAsParent[460211] call_tmp[631652] tmp[460203])
    (460217 'setcid' chpl__thisAsParent[460211])
    (477077 'end of statement')
    unknown tmp[460219] "temp" "type variable"
    (460221 'move' tmp[460219] valType[87564])
    (460223 'init field' this[87890] c"valType" tmp[460219])
    (477078 'end of statement')
    unknown tmp[460227] "temp"
    unknown call_tmp[631657] "expr temp" "maybe param" "maybe type" "temp"
    (631660 'move' call_tmp[631657](460236 '.v' this[87890] c"valType"))
    (460230 'default init var' tmp[460227] call_tmp[631657])
    (460232 '.=' this[87890] c"value" tmp[460227])
    (477079 'end of statement')
    val tmp[460239]:chpl_single_aux_t[88058] "temp"
    (460242 'default init var' tmp[460239] chpl_single_aux_t[88058])
    (460244 '.=' this[87890] c"singleAux" tmp[460239])
    (477080 'end of statement')
    (460249 'setcid' this[87890])
    (477081 'end of statement')
    unknown call_tmp[631664] "expr temp" "maybe param" "maybe type" "temp"
    (631667 'move' call_tmp[631664](377467 call singleAux _mt[243] this[87890]))
    (87587 call chpl_single_initAux call_tmp[631664])
    (513123 return _void[55])
  }
  function _singlecls[87888](?).deinit[87593](arg _mt[87896]:_MT[238], arg this[87894]:_singlecls[87888](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[631671] "expr temp" "maybe param" "maybe type" "temp"
    (631674 'move' call_tmp[631671](377472 call singleAux _mt[243] this[87894]))
    (87598 call chpl_single_destroyAux call_tmp[631671])
    (513125 return _void[55])
  }
  function _singlecls[87888](?).readFF[87605](arg _mt[87900]:_MT[238], arg this[87898]:_singlecls[87888](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513129] "RVV" "temp"
    unknown ret[87608] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631678] "expr temp" "maybe param" "maybe type" "temp"
    (631681 'move' call_tmp[631678](377477 call valType _mt[243] this[87898]))
    (541648 'default init var' ret[87608] call_tmp[631678])
    (87611 'end of statement')
    const tmp[87666] "const" "temp"
    unknown call_tmp[631683] "expr temp" "maybe param" "maybe type" "temp"
    (631686 'move' call_tmp[631683](87663 '_wide_get_locale' this[87898]))
    (87668 'move' tmp[87666](87664 'deref' call_tmp[631683]))
    {
      {
        unknown localRet[87615] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541650] "maybe param" "maybe type" "temp"
        (541659 'move' type_tmp[541650](541656 call valType _mt[243] this[87898]))
        (541652 'init var split decl' localRet[87615] type_tmp[541650])
        (87618 'end of statement')
        (87622 call chpl_rmem_consist_release)
        (477084 'end of statement')
        unknown call_tmp[631692] "expr temp" "maybe param" "maybe type" "temp"
        (631695 'move' call_tmp[631692](87625 call isFull _mt[243] this[87898]))
        unknown call_tmp[631697] "expr temp" "maybe param" "maybe type" "temp"
        (631700 'move' call_tmp[631697](87649 call _cond_test call_tmp[631692]))
        if call_tmp[631697]
        {
          unknown call_tmp[631704] "maybe param" "maybe type" "temp"
          (631707 'move' call_tmp[631704](377489 call value _mt[243] this[87898]))
          (541661 'init var split init' localRet[87615] call_tmp[631704] type_tmp[541650])
          (477085 'end of statement' localRet[87615])
        }
        {
          unknown call_tmp[631711] "expr temp" "maybe param" "maybe type" "temp"
          (631714 'move' call_tmp[631711](377494 call singleAux _mt[243] this[87898]))
          (87636 call chpl_single_waitFullAndLock call_tmp[631711])
          (477087 'end of statement')
          unknown call_tmp[631718] "maybe param" "maybe type" "temp"
          (631721 'move' call_tmp[631718](377500 call value _mt[243] this[87898]))
          (541664 'init var split init' localRet[87615] call_tmp[631718] type_tmp[541650])
          (477088 'end of statement' localRet[87615])
          unknown call_tmp[631725] "expr temp" "maybe param" "maybe type" "temp"
          (631728 'move' call_tmp[631725](377505 call singleAux _mt[243] this[87898]))
          (87647 call chpl_single_markAndSignalFull call_tmp[631725])
        }
        (87656 call chpl_rmem_consist_acquire)
        (477091 'end of statement')
        (87660 call = ret[87608] localRet[87615])
        (477092 'end of statement' ret[87608] localRet[87615])
      }
      (87671 'on block' 0 tmp[87666])
    }
    (513134 'move' ret[513129](513133 'deref' ret[87608]))
    gotoReturn _end_readFF[513127] _end_readFF[513127]
    (477095 'end of statement' ret[87608])
    label _end_readFF[513127]
    (513131 return ret[513129])
  }
  function _singlecls[87888](?).readXX[87681](arg _mt[87904]:_MT[238], arg this[87902]:_singlecls[87888](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[513140] "RVV" "temp"
    unknown ret[87684] "dead at end of block" "insert auto destroy"
    unknown call_tmp[631732] "expr temp" "maybe param" "maybe type" "temp"
    (631735 'move' call_tmp[631732](377513 call valType _mt[243] this[87902]))
    (541667 'default init var' ret[87684] call_tmp[631732])
    (87687 'end of statement')
    const tmp[87742] "const" "temp"
    unknown call_tmp[631737] "expr temp" "maybe param" "maybe type" "temp"
    (631740 'move' call_tmp[631737](87739 '_wide_get_locale' this[87902]))
    (87744 'move' tmp[87742](87740 'deref' call_tmp[631737]))
    {
      {
        unknown localRet[87691] "dead at end of block" "insert auto destroy" "split inited"
        unknown type_tmp[541669] "maybe param" "maybe type" "temp"
        (541678 'move' type_tmp[541669](541675 call valType _mt[243] this[87902]))
        (541671 'init var split decl' localRet[87691] type_tmp[541669])
        (87694 'end of statement')
        (87698 call chpl_rmem_consist_release)
        (477097 'end of statement')
        unknown call_tmp[631746] "expr temp" "maybe param" "maybe type" "temp"
        (631749 'move' call_tmp[631746](87701 call isFull _mt[243] this[87902]))
        unknown call_tmp[631751] "expr temp" "maybe param" "maybe type" "temp"
        (631754 'move' call_tmp[631751](87725 call _cond_test call_tmp[631746]))
        if call_tmp[631751]
        {
          unknown call_tmp[631758] "maybe param" "maybe type" "temp"
          (631761 'move' call_tmp[631758](377525 call value _mt[243] this[87902]))
          (541680 'init var split init' localRet[87691] call_tmp[631758] type_tmp[541669])
          (477098 'end of statement' localRet[87691])
        }
        {
          unknown call_tmp[631765] "expr temp" "maybe param" "maybe type" "temp"
          (631768 'move' call_tmp[631765](377530 call singleAux _mt[243] this[87902]))
          (87712 call chpl_single_lock call_tmp[631765])
          (477100 'end of statement')
          unknown call_tmp[631772] "maybe param" "maybe type" "temp"
          (631775 'move' call_tmp[631772](377536 call value _mt[243] this[87902]))
          (541683 'init var split init' localRet[87691] call_tmp[631772] type_tmp[541669])
          (477101 'end of statement' localRet[87691])
          unknown call_tmp[631779] "expr temp" "maybe param" "maybe type" "temp"
          (631782 'move' call_tmp[631779](377541 call singleAux _mt[243] this[87902]))
          (87723 call chpl_single_unlock call_tmp[631779])
        }
        (87732 call chpl_rmem_consist_acquire)
        (477104 'end of statement')
        (87736 call = ret[87684] localRet[87691])
        (477105 'end of statement' ret[87684] localRet[87691])
      }
      (87747 'on block' 0 tmp[87742])
    }
    (513145 'move' ret[513140](513144 'deref' ret[87684]))
    gotoReturn _end_readXX[513138] _end_readXX[513138]
    (477108 'end of statement' ret[87684])
    label _end_readXX[513138]
    (513142 return ret[513140])
  }
  function _singlecls[87888](?).writeEF[87761](arg _mt[87908]:_MT[238], arg this[87906]:_singlecls[87888](?), arg val[87758] :
  (377549 call valType _mt[243] this[87906])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[87827] "const" "temp"
    unknown call_tmp[631786] "expr temp" "maybe param" "maybe type" "temp"
    (631789 'move' call_tmp[631786](87824 '_wide_get_locale' this[87906]))
    (87829 'move' tmp[87827](87825 'deref' call_tmp[631786]))
    {
      {
        (87772 call chpl_rmem_consist_release)
        (477110 'end of statement')
        unknown call_tmp[631793] "expr temp" "maybe param" "maybe type" "temp"
        (631796 'move' call_tmp[631793](377557 call singleAux _mt[243] this[87906]))
        (87778 call chpl_single_lock call_tmp[631793])
        (477111 'end of statement')
        unknown call_tmp[631800] "expr temp" "maybe param" "maybe type" "temp"
        (631803 'move' call_tmp[631800](87781 call isFull _mt[243] this[87906]))
        unknown call_tmp[631805] "expr temp" "maybe param" "maybe type" "temp"
        (631808 'move' call_tmp[631805](87805 call _cond_test call_tmp[631800]))
        if call_tmp[631805]
        {
          (87803 call halt "single var already defined")
        }
        unknown call_tmp[631812] "expr temp" "maybe param" "maybe type" "temp"
        (631815 'move' call_tmp[631812](377562 call value _mt[243] this[87906]))
        (87812 call = call_tmp[631812] val[87758])
        (477113 'end of statement')
        unknown call_tmp[631819] "expr temp" "maybe param" "maybe type" "temp"
        (631822 'move' call_tmp[631819](377568 call singleAux _mt[243] this[87906]))
        (87818 call chpl_single_markAndSignalFull call_tmp[631819])
        (477114 'end of statement')
        (87822 call chpl_rmem_consist_acquire)
      }
      (87832 'on block' 0 tmp[87827])
    }
    (513149 return _void[55])
  }
  {
    (87767 call <(87764 'lifetime_of' this[87906])(87766 'lifetime_of' val[87758]))
  }
  function _singlecls[87888](?).isFull[87841](arg _mt[87912]:_MT[238], arg this[87910]:_singlecls[87888](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513153] "RVV" "temp"
    unknown b[87844] "dead at end of block" "insert auto destroy"
    (541686 'default init var' b[87844] bool[10])
    (87847 'end of statement')
    const tmp[87874] "const" "temp"
    unknown call_tmp[631824] "expr temp" "maybe param" "maybe type" "temp"
    (631827 'move' call_tmp[631824](87871 '_wide_get_locale' this[87910]))
    (87876 'move' tmp[87874](87872 'deref' call_tmp[631824]))
    {
      {
        (87852 call chpl_rmem_consist_release)
        (477116 'end of statement')
        unknown call_tmp[631831] "expr temp" "maybe param" "maybe type" "temp"
        (631834 'move' call_tmp[631831](377575 call value _mt[243] this[87910]))
        unknown call_tmp[631836] "expr temp" "maybe param" "maybe type" "temp"
        (631839 'move' call_tmp[631836](87860 call c_ptrTo call_tmp[631831]))
        unknown call_tmp[631843] "expr temp" "maybe param" "maybe type" "temp"
        (631846 'move' call_tmp[631843](377580 call singleAux _mt[243] this[87910]))
        unknown call_tmp[631848] "expr temp" "maybe param" "maybe type" "temp"
        (631851 'move' call_tmp[631848](87863 call chpl_single_isFull call_tmp[631836] call_tmp[631843]))
        (87864 call = b[87844] call_tmp[631848])
        (477117 'end of statement' b[87844])
        (87869 call chpl_rmem_consist_acquire)
      }
      (87879 'on block' 0 tmp[87874])
    }
    (513158 'move' ret[513153](513157 'deref' b[87844]))
    gotoReturn _end_isFull[513151] _end_isFull[513151]
    (477120 'end of statement' b[87844])
    label _end_isFull[513151]
    (513155 return ret[513153])
  }
  function _singlecls[87888](?).super[779731](arg _mt[779733]:_MT[238], arg this[779735]:_singlecls[87888](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779745] "RVV" "temp"
    unknown call_tmp[779752] "expr temp" "maybe param" "maybe type" "temp"
    (779755 'move' call_tmp[779752](779739 '.v' this[779735] c"super"))
    (779750 'move' ret[779745](779749 'deref' call_tmp[779752]))
    (779747 return ret[779745])
  }
  function _singlecls[779762](?).valType[779757](arg _mt[779759]:_MT[238], arg this[779764]:_singlecls[779762](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779799] "RVV" "temp" "type variable"
    unknown borrowOfThis[779766]
    (779791 'end of statement')
    (779768 'move' borrowOfThis[779766](779771 call _cast _borrowedNonNilable[214](?) this[779764]))
    (779792 'end of statement' borrowOfThis[779766])
    unknown call_tmp[779813] "expr temp" "maybe param" "maybe type" "temp"
    (779816 'move' call_tmp[779813](779781 'is bound' borrowOfThis[779766] c"valType"))
    if call_tmp[779813]
    {
      unknown call_tmp[779818] "expr temp" "maybe param" "maybe type" "temp"
      (779821 'move' call_tmp[779818](779776 '.v' borrowOfThis[779766] c"valType"))
      unknown call_tmp[779823] "expr temp" "maybe param" "maybe type" "temp"
      (779826 'move' call_tmp[779823](779777 call chpl_checkLegalTypeFieldAccessor this[779764] call_tmp[779818] "valType"))
      (779804 'move' ret[779799](779803 'deref' call_tmp[779823]))
      gotoReturn _end_valType[779797] _end_valType[779797]
      (779794 'end of statement' borrowOfThis[779766])
    }
    {
      (779809 'move' ret[779799](779808 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779797] _end_valType[779797]
    }
    label _end_valType[779797]
    (779801 return ret[779799])
  }
  function _singlecls[779762](?).valType[779828](arg _mt[779830]:_MT[238], arg this[779832]:_singlecls[779762](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779867] "RVV" "temp" "type variable"
    unknown borrowOfThis[779834] "type variable"
    (779859 'end of statement')
    (779836 'move' borrowOfThis[779834](779839 call _cast _borrowedNonNilable[214](?) this[779832]))
    (779860 'end of statement' borrowOfThis[779834])
    unknown call_tmp[779881] "expr temp" "maybe param" "maybe type" "temp"
    (779884 'move' call_tmp[779881](779849 'is bound' borrowOfThis[779834] c"valType"))
    if call_tmp[779881]
    {
      unknown call_tmp[779886] "expr temp" "maybe param" "maybe type" "temp"
      (779889 'move' call_tmp[779886](779844 '.v' borrowOfThis[779834] c"valType"))
      unknown call_tmp[779891] "expr temp" "maybe param" "maybe type" "temp"
      (779894 'move' call_tmp[779891](779845 call chpl_checkLegalTypeFieldAccessor this[779832] call_tmp[779886] "valType"))
      (779872 'move' ret[779867](779871 'deref' call_tmp[779891]))
      gotoReturn _end_valType[779865] _end_valType[779865]
      (779862 'end of statement' borrowOfThis[779834])
    }
    {
      (779877 'move' ret[779867](779876 'deref' _uninstantiated[258]))
      gotoReturn _end_valType[779865] _end_valType[779865]
    }
    label _end_valType[779865]
    (779869 return ret[779867])
  }
  function _singlecls[87888](?).value[779896](arg _mt[779898]:_MT[238], arg this[779900]:_singlecls[87888](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779910] "RVV" "temp"
    unknown call_tmp[779917] "expr temp" "maybe param" "maybe type" "temp"
    (779920 'move' call_tmp[779917](779904 '.' this[779900] c"value"))
    (779915 'move' ret[779910](779914 'addr of' call_tmp[779917]))
    (779912 return ret[779910])
  }
  function _singlecls[87888](?).singleAux[779922](arg _mt[779924]:_MT[238], arg this[779926]:_singlecls[87888](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[779936] "RVV" "temp"
    unknown call_tmp[779943] "expr temp" "maybe param" "maybe type" "temp"
    (779946 'move' call_tmp[779943](779930 '.' this[779926] c"singleAux"))
    (779941 'move' ret[779936](779940 'addr of' call_tmp[779943]))
    (779938 return ret[779936])
  }
  function _singlecls[87888](?).writeThis[779948](arg _mt[779952]:_MT[238], arg this[779950]:_singlecls[87888](?), arg f[779951]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779957 call writeThisDefaultImpl f[779951] this[779950])
    (779962 return _void[55])
  }
  function _singlecls[87888](?).readThis[779964](arg _mt[779968]:_MT[238], arg this[779966]:_singlecls[87888](?), arg f[779967]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (779972 call readThisDefaultImpl f[779967] this[779966])
    (779978 return _void[55])
  }
  type _singlecls[87888](?) val super[355679]:object[22] "super class" unknown valType[87549] "type variable" unknown value[87553] valType[87549] val singleAux[87558]:chpl_single_aux_t[88058] chpl_single_aux_t[88058]
  type _singlecls[779762](?)
  type unmanaged _singlecls[415457](?)
  type _singlecls[377398](?)
  function isSingleValue[87921](arg x[87918]:_singlevar[87256](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513164] "RVV" "param" "temp"
    (513169 'move' ret[513164](513168 'deref' 1))
    (513166 return ret[513164])
  }
  function isSingleValue[87933](arg x[87931]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[513173] "RVV" "param" "temp"
    (513178 'move' ret[513173](513177 'deref' 0))
    (513175 return ret[513173])
  }
  (355105 'used modules list'(84293 'use' ChapelStandard[20267])(84297 'use' AlignedTSupport[88357])(84300 'use' MemConsistency[186648])(84303 'use' SyncVarRuntimeSupport[87943]))
}