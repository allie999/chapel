AST dump for BlockDist after pass parse.
Module use list: 

{
  (352984 'use' ChapelStandard)
  (316440 'use' DSIUtil)
  (316443 'use' ChapelUtil)
  (316446 'use' CommDiagnostics)
  (316449 'use' ChapelLocks)
  (316452 'use' ChapelDebugPrint)
  (316455 'use' LayoutCS)
  (316458 'use' SparseBlockDist)
  { scopeless
    unknown debugBlockDist[316461] "config" "param" 0
    (316464 'end of statement')
  }
  { scopeless
    unknown debugBlockDistBulkTransfer[316466] "config" "param" 0
    (316469 'end of statement')
  }
  { scopeless
    const disableAliasedBulkTransfer[316471] "config" "const" 1
    (316474 'end of statement')
  }
  { scopeless
    unknown disableBlockDistBulkTransfer[316476] "config" "param" 0
    (316479 'end of statement')
  }
  { scopeless
    unknown sanityCheckDistribution[316481] "config" "param" 0
    (316484 'end of statement')
  }
  { scopeless
    unknown testFastFollowerOptimization[316486] "config" "param" 0
    (316489 'end of statement')
  }
  { scopeless
    unknown disableBlockLazyRAD[316491] "config" "param" defaultDisableLazyRADOpt
    (316494 'end of statement')
  }
  type Block[316574](?) unknown rank[316499] "param" int[13] unknown idxType[316504] "type variable" int[13] unknown boundingBox[316513](316511 call chpl__buildDomainRuntimeType defaultDist rank idxType) unknown targetLocDom[316522](316520 call chpl__buildDomainRuntimeType defaultDist rank) unknown targetLocales[316533](316531 call chpl__buildArrayRuntimeType(316529 call chpl__ensureDomainExpr targetLocDom) locale[28]) unknown locDist[316549](316547 call chpl__buildArrayRuntimeType(316545 call chpl__ensureDomainExpr targetLocDom)(316544 'to unmanaged class from unknown'(316543 call LocBlock rank idxType))) unknown dataParTasksPerLocale[316554] int[13] unknown dataParIgnoreRunningTasks[316559] bool[10] unknown dataParMinGranularity[316564] int[13] unknown sparseLayoutType[316570] "type variable"(316569 'to unmanaged class from unknown' DefaultDist) BaseDist
  type LocBlock[316597](?) unknown rank[316579] "param" int[13] unknown idxType[316583] "type variable" const myChunk[316592] "const"(316590 call chpl__buildDomainRuntimeType defaultDist rank idxType)
  type BlockDom[316654](?) unknown sparseLayoutType[316603] "type variable" const dist[316613] "const"(316612 'to unmanaged class from unknown'(316611 call Block rank idxType sparseLayoutType)) unknown locDoms[316635](316633 call chpl__buildArrayRuntimeType(316631 call chpl__ensureDomainExpr(316620 call . dist c"targetLocDom"))(316630 'to unmanaged class from unknown'(316629 call LocBlockDom rank idxType stridable))) unknown whole[316649](316647 call chpl__buildDomainRuntimeType defaultDist(rank = rank)(idxType = idxType)(stridable = stridable)) BaseRectangularDom
  type LocBlockDom[316683](?) unknown rank[316659] "param" int[13] unknown idxType[316663] "type variable" unknown stridable[316667] "param" bool[10] unknown myBlock[316678](316676 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  type BlockArr[316759](?) unknown sparseLayoutType[316689] "type variable" unknown doRADOpt[316694] defaultDoRADOpt bool[10] unknown dom[316706](316705 'to unmanaged class from unknown'(316704 call BlockDom rank idxType stridable sparseLayoutType)) unknown locArr[316730](316728 call chpl__buildArrayRuntimeType(316726 call chpl__ensureDomainExpr(316714 call .(316711 call . dom c"dist") c"targetLocDom"))(316725 'to unmanaged class from unknown'(316724 call LocBlockArr eltType rank idxType stridable))) unknown myLocArr[316743] "local field"(316742 'to unmanaged class from unknown'(316741 'to nilable class from type'(316740 call LocBlockArr eltType rank idxType stridable))) const SENTINEL[316754] "const"(316753 call max(316750 call * rank idxType)) BaseRectangularArr
  type LocBlockArr[316975](?) unknown eltType[316763] "type variable" unknown rank[316767] "param" int[13] unknown idxType[316771] "type variable" unknown stridable[316775] "param" bool[10] const locDom[316786] "const"(316785 'to unmanaged class from unknown'(316784 call LocBlockDom rank idxType stridable)) unknown locRAD[316799](316798 'to unmanaged class from unknown'(316797 'to nilable class from type'(316796 call LocRADCache eltType rank idxType stridable))) unknown myElems[316815] "local field" "unsafe"(316813 call chpl__buildArrayRuntimeType(316811 call chpl__ensureDomainExpr(316806 call . locDom c"myBlock")) eltType) unknown locRADLock[316820] chpl_LocalSpinlock function LocBlockArr[316975](?).init[316828](arg _mt[316979]:_MT[238], arg this[316977]:LocBlockArr[316975](?), arg eltType[316826]:_any[178](?), param arg rank[316831] :
  int[13], arg idxType[316834]:_any[178](?), param arg stridable[316837] :
  bool[10], const arg locDom[316847] :
  (316846 'to unmanaged class from unknown'(316845 call LocBlockDom rank idxType stridable)), param arg initElts[316851] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (316859 call =(316855 call . this c"eltType") eltType)
    (316868 call =(316864 call . this c"rank") rank)
    (316876 call =(316872 call . this c"idxType") idxType)
    (316884 call =(316880 call . this c"stridable") stridable)
    (316894 call =(316890 call . this c"locDom") locDom)
    (316918 call =(316900 call . this c"myElems")(316917 call(316910 call .(316907 call .(316904 call . this c"locDom") c"myBlock") c"buildArray") eltType(initElts = initElts)))
  } function LocBlockArr[316975](?).writeThis[316927](arg _mt[316983]:_MT[238], arg this[316981]:LocBlockArr[316975](?), arg f[316925]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (316948 call halt "LocBlockArr.writeThis() is not implemented / should not be needed")
  } function LocBlockArr[316975](?).deinit[316955](arg _mt[316987]:_MT[238], arg this[316985]:LocBlockArr[316975](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    if(316966 call _cond_test(316959 call != locRAD nil[44]))
    {
      { scopeless
        (316963 call chpl__delete locRAD)
      }
    }
  }
  function _unknown[51].init[316997](arg _mt[317048]:_MT[238], arg this[317045] :
  Block, arg boundingBox[316994] :
  _domain, arg targetLocales[317004] :
  (317000 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg dataParTasksPerLocale[317011] =
  (317010 call getDataParTasksPerLocale), arg dataParIgnoreRunningTasks[317017] =
  (317016 call getDataParIgnoreRunningTasks), arg dataParMinGranularity[317023] =
  (317022 call getDataParMinGranularity), param arg rank[317030] =
  (317027 call . boundingBox c"rank"), arg idxType[317037]:_any[178](?) =
  (317034 call . boundingBox c"idxType"), arg sparseLayoutType[317042]:_any[178](?) =
  (317041 'to unmanaged class from unknown' DefaultDist)) : _unknown[51] "method"
  {
    (317055 call =(317051 call . this c"rank") rank)
    (317064 call =(317060 call . this c"idxType") idxType)
    if(317095 call _cond_test(317072 call != rank(317069 call . boundingBox c"rank")))
    {
      { scopeless
        (317093 call compilerError "specified Block rank != rank of specified bounding box")
      }
    }
    if(317128 call _cond_test(317105 call != idxType(317102 call . boundingBox c"idxType")))
    {
      { scopeless
        (317126 call compilerError "specified Block index type != index type of specified bounding box")
      }
    }
    if(317164 call _cond_test(317141 call &&(317135 call != rank 2)(317140 call isCSType sparseLayoutType)))
    {
      { scopeless
        (317162 call compilerError "CS layout is only supported for 2 dimensional domains")
      }
    }
    if(317197 call _cond_test(317174 call ==(317170 call . boundingBox c"size") 0))
    {
      { scopeless
        (317195 call halt "Block() requires a non-empty boundingBox")
      }
    }
    (317219 call =(317205 call . this c"boundingBox")(317217 call _cast(317215 call chpl__buildDomainRuntimeType defaultDist rank idxType(stridable = 0)) boundingBox))
    { scopeless
      const ranges[317227] "const"(317226 call setupTargetLocRanges rank targetLocales)
      (317230 'end of statement')
    }
    (317240 call =(317232 call . this c"targetLocDom")(317238 call chpl__buildDomainExpr(317236 'expand_tuple' ranges)))
    (317255 call =(317244 call . this c"targetLocales")(317254 call reshape targetLocales(317251 call . this c"targetLocDom")))
    { scopeless
      const dummyLB[317268] "const"(317260 'new'(_chpl_manager = unmanaged[220](?))(317267 call LocBlock rank idxType(dummy = 1)))
      (317271 'end of statement')
    }
    { scopeless
      unknown locDistTemp[317285] dummyLB(317282 call chpl__buildArrayRuntimeType(317280 call chpl__ensureDomainExpr targetLocDom)(317279 'to unmanaged class from unknown'(317278 call LocBlock rank idxType)))
      (317288 'end of statement')
    }
    {
      unknown tmpIter[317327] "expr temp" "maybe ref" "no copy" "temp"
      (317330 'move' tmpIter[317327] targetLocDom)
      unknown isRngDomArr[317494] "maybe param" "temp"
      (317509 'move' isRngDomArr[317494](317507 call ||(317496 call isBoundedRange tmpIter[317327])(317505 call ||(317499 call isDomain tmpIter[317327])(317502 call isArray tmpIter[317327]))))
      if isRngDomArr[317494]
      {
        const _coforallCount[317366] "const" "end count" "temp"
        (317431 'move' _coforallCount[317366](317428 call _endCountAlloc 0))
        unknown numTasks[317367] "temp"
        (317415 'move' numTasks[317367](317411 call . tmpIter[317327] c"size"))
        (317406 call _upEndCount _coforallCount[317366] 0 numTasks[317367])
        unknown _indexOfInterest[317373] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317374] "expr temp" "temp"
        (317383 'move' _iterator[317374](317381 call _getIterator tmpIter[317327]))
        Defer
        {
          {
            (317399 call _freeIterator _iterator[317374])
          }
        }
        { scopeless type
          (317388 'move' _indexOfInterest[317373](317385 call iteratorIndex _iterator[317374]))
        }
        ForLoop[317375]
        {
          unknown locid[317392] "coforall index var" "index var" "insert auto destroy"
          (317394 'move' locid[317392] _indexOfInterest[317373])
          { scopeless
            { scopeless
              const tmp[317333] "const" "temp"
              (317335 'move' tmp[317333](317337 'deref'(317338 '_wide_get_locale'(317343 call(317340 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317351 call =(317353 call locDistTemp locid)(317355 'new'(_chpl_manager = unmanaged[220](?))(317359 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317368 call _downEndCount _coforallCount[317366] nil[44])
                (317346 'coforall on block' 0 tmp[317333])
              }
            }
          }
          label _continueLabel[317378]
          _indexOfInterest[317373]
          _iterator[317374]
        }
        label _breakLabel[317379]
        Defer
        {
          {
            (317418 call _endCountFree _coforallCount[317366])
          }
        }
        (317423 call _waitEndCount _coforallCount[317366] 0 numTasks[317367])
      }
      {
        const _coforallCount[317435] "const" "end count" "temp"
        (317491 'move' _coforallCount[317435](317488 call _endCountAlloc 0))
        unknown _indexOfInterest[317442] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317443] "expr temp" "temp"
        (317452 'move' _iterator[317443](317450 call _getIterator tmpIter[317327]))
        Defer
        {
          {
            (317468 call _freeIterator _iterator[317443])
          }
        }
        { scopeless type
          (317457 'move' _indexOfInterest[317442](317454 call iteratorIndex _iterator[317443]))
        }
        ForLoop[317444]
        {
          unknown locid[317461] "coforall index var" "index var" "insert auto destroy"
          (317463 'move' locid[317461] _indexOfInterest[317442])
          (317475 call _upEndCount _coforallCount[317435] 0)
          { scopeless
            { scopeless
              const tmp[317319] "const" "temp"
              (317321 'move' tmp[317319](317317 'deref'(317316 '_wide_get_locale'(317297 call(317292 call . this c"targetLocales") locid))))
              {
                { scopeless
                  (317313 call =(317301 call locDistTemp locid)(317304 'new'(_chpl_manager = unmanaged[220](?))(317312 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317437 call _downEndCount _coforallCount[317435] nil[44])
                (317324 'coforall on block' 0 tmp[317319])
              }
            }
          }
          label _continueLabel[317447]
          _indexOfInterest[317442]
          _iterator[317443]
        }
        label _breakLabel[317448]
        Defer
        {
          {
            (317479 call _endCountFree _coforallCount[317435])
          }
        }
        (317484 call _waitEndCount _coforallCount[317435] 0)
      }
    }
    (317515 call chpl__delete dummyLB)
    (317525 call =(317521 call . this c"locDist") locDistTemp)
    (317546 call =(317531 call . this c"dataParTasksPerLocale")(317543 IfExpr (317536 call == dataParTasksPerLocale 0) then
    { scopeless
      (317539 call . here c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale
    } ))
    (317556 call =(317552 call . this c"dataParIgnoreRunningTasks") dataParIgnoreRunningTasks)
    (317566 call =(317562 call . this c"dataParMinGranularity") dataParMinGranularity)
    (317579 call =(317572 call . this c"sparseLayoutType")(317578 call _to_unmanaged sparseLayoutType))
    (317587 call(317583 call . this c"complete"))
    if(317616 call _cond_test debugBlockDist)
    {
      (317609 call writeln "Creating new Block distribution:")
      (317614 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiAssign[317630](arg _mt[317635]:_MT[238], arg this[317632] :
  Block, arg other[317627] :
  (317626 'typeof' this)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[317662] "expr temp" "maybe ref" "no copy" "temp"
      (317665 'move' tmpIter[317662] targetLocDom)
      unknown isRngDomArr[317816] "maybe param" "temp"
      (317831 'move' isRngDomArr[317816](317829 call ||(317818 call isBoundedRange tmpIter[317662])(317827 call ||(317821 call isDomain tmpIter[317662])(317824 call isArray tmpIter[317662]))))
      if isRngDomArr[317816]
      {
        const _coforallCount[317688] "const" "end count" "temp"
        (317753 'move' _coforallCount[317688](317750 call _endCountAlloc 0))
        unknown numTasks[317689] "temp"
        (317737 'move' numTasks[317689](317733 call . tmpIter[317662] c"size"))
        (317728 call _upEndCount _coforallCount[317688] 0 numTasks[317689])
        unknown _indexOfInterest[317695] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317696] "expr temp" "temp"
        (317705 'move' _iterator[317696](317703 call _getIterator tmpIter[317662]))
        Defer
        {
          {
            (317721 call _freeIterator _iterator[317696])
          }
        }
        { scopeless type
          (317710 'move' _indexOfInterest[317695](317707 call iteratorIndex _iterator[317696]))
        }
        ForLoop[317697]
        {
          unknown locid[317714] "coforall index var" "index var" "insert auto destroy"
          (317716 'move' locid[317714] _indexOfInterest[317695])
          { scopeless
            { scopeless
              const tmp[317668] "const" "temp"
              (317670 'move' tmp[317668](317672 'deref'(317673 '_wide_get_locale'(317675 call targetLocales locid))))
              {
                { scopeless
                  (317683 call chpl__delete(317685 call locDist locid))
                }
                (317690 call _downEndCount _coforallCount[317688] nil[44])
                (317678 'coforall on block' 0 tmp[317668])
              }
            }
          }
          label _continueLabel[317700]
          _indexOfInterest[317695]
          _iterator[317696]
        }
        label _breakLabel[317701]
        Defer
        {
          {
            (317740 call _endCountFree _coforallCount[317688])
          }
        }
        (317745 call _waitEndCount _coforallCount[317688] 0 numTasks[317689])
      }
      {
        const _coforallCount[317757] "const" "end count" "temp"
        (317813 'move' _coforallCount[317757](317810 call _endCountAlloc 0))
        unknown _indexOfInterest[317764] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317765] "expr temp" "temp"
        (317774 'move' _iterator[317765](317772 call _getIterator tmpIter[317662]))
        Defer
        {
          {
            (317790 call _freeIterator _iterator[317765])
          }
        }
        { scopeless type
          (317779 'move' _indexOfInterest[317764](317776 call iteratorIndex _iterator[317765]))
        }
        ForLoop[317766]
        {
          unknown locid[317783] "coforall index var" "index var" "insert auto destroy"
          (317785 'move' locid[317783] _indexOfInterest[317764])
          (317797 call _upEndCount _coforallCount[317757] 0)
          { scopeless
            { scopeless
              const tmp[317654] "const" "temp"
              (317656 'move' tmp[317654](317652 'deref'(317651 '_wide_get_locale'(317642 call targetLocales locid))))
              {
                { scopeless
                  (317648 call chpl__delete(317646 call locDist locid))
                }
                (317759 call _downEndCount _coforallCount[317757] nil[44])
                (317659 'coforall on block' 0 tmp[317654])
              }
            }
          }
          label _continueLabel[317769]
          _indexOfInterest[317764]
          _iterator[317765]
        }
        label _breakLabel[317770]
        Defer
        {
          {
            (317801 call _endCountFree _coforallCount[317757])
          }
        }
        (317806 call _waitEndCount _coforallCount[317757] 0)
      }
    }
    (317841 call = boundingBox(317838 call . other c"boundingBox"))
    (317849 call = targetLocDom(317846 call . other c"targetLocDom"))
    (317857 call = targetLocales(317854 call . other c"targetLocales"))
    (317865 call = dataParTasksPerLocale(317862 call . other c"dataParTasksPerLocale"))
    (317873 call = dataParIgnoreRunningTasks(317870 call . other c"dataParIgnoreRunningTasks"))
    (317881 call = dataParMinGranularity(317878 call . other c"dataParMinGranularity"))
    {
      unknown tmpIter[317919] "expr temp" "maybe ref" "no copy" "temp"
      (317922 'move' tmpIter[317919] targetLocDom)
      unknown isRngDomArr[318083] "maybe param" "temp"
      (318098 'move' isRngDomArr[318083](318096 call ||(318085 call isBoundedRange tmpIter[317919])(318094 call ||(318088 call isDomain tmpIter[317919])(318091 call isArray tmpIter[317919]))))
      if isRngDomArr[318083]
      {
        const _coforallCount[317955] "const" "end count" "temp"
        (318020 'move' _coforallCount[317955](318017 call _endCountAlloc 0))
        unknown numTasks[317956] "temp"
        (318004 'move' numTasks[317956](318000 call . tmpIter[317919] c"size"))
        (317995 call _upEndCount _coforallCount[317955] 0 numTasks[317956])
        unknown _indexOfInterest[317962] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317963] "expr temp" "temp"
        (317972 'move' _iterator[317963](317970 call _getIterator tmpIter[317919]))
        Defer
        {
          {
            (317988 call _freeIterator _iterator[317963])
          }
        }
        { scopeless type
          (317977 'move' _indexOfInterest[317962](317974 call iteratorIndex _iterator[317963]))
        }
        ForLoop[317964]
        {
          unknown locid[317981] "coforall index var" "index var" "insert auto destroy"
          (317983 'move' locid[317981] _indexOfInterest[317962])
          { scopeless
            { scopeless
              const tmp[317925] "const" "temp"
              (317927 'move' tmp[317925](317929 'deref'(317930 '_wide_get_locale'(317932 call targetLocales locid))))
              {
                { scopeless
                  (317940 call =(317942 call locDist locid)(317944 'new'(_chpl_manager = unmanaged[220](?))(317948 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (317957 call _downEndCount _coforallCount[317955] nil[44])
                (317935 'coforall on block' 0 tmp[317925])
              }
            }
          }
          label _continueLabel[317967]
          _indexOfInterest[317962]
          _iterator[317963]
        }
        label _breakLabel[317968]
        Defer
        {
          {
            (318007 call _endCountFree _coforallCount[317955])
          }
        }
        (318012 call _waitEndCount _coforallCount[317955] 0 numTasks[317956])
      }
      {
        const _coforallCount[318024] "const" "end count" "temp"
        (318080 'move' _coforallCount[318024](318077 call _endCountAlloc 0))
        unknown _indexOfInterest[318031] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318032] "expr temp" "temp"
        (318041 'move' _iterator[318032](318039 call _getIterator tmpIter[317919]))
        Defer
        {
          {
            (318057 call _freeIterator _iterator[318032])
          }
        }
        { scopeless type
          (318046 'move' _indexOfInterest[318031](318043 call iteratorIndex _iterator[318032]))
        }
        ForLoop[318033]
        {
          unknown locid[318050] "coforall index var" "index var" "insert auto destroy"
          (318052 'move' locid[318050] _indexOfInterest[318031])
          (318064 call _upEndCount _coforallCount[318024] 0)
          { scopeless
            { scopeless
              const tmp[317911] "const" "temp"
              (317913 'move' tmp[317911](317909 'deref'(317908 '_wide_get_locale'(317889 call targetLocales locid))))
              {
                { scopeless
                  (317905 call =(317893 call locDist locid)(317896 'new'(_chpl_manager = unmanaged[220](?))(317904 call LocBlock rank idxType locid boundingBox targetLocDom)))
                }
                (318026 call _downEndCount _coforallCount[318024] nil[44])
                (317916 'coforall on block' 0 tmp[317911])
              }
            }
          }
          label _continueLabel[318036]
          _indexOfInterest[318031]
          _iterator[318032]
        }
        label _breakLabel[318037]
        Defer
        {
          {
            (318068 call _endCountFree _coforallCount[318024])
          }
        }
        (318073 call _waitEndCount _coforallCount[318024] 0)
      }
    }
  }
  function _unknown[51].dsiEqualDMaps[318114](arg _mt[318119]:_MT[238], arg this[318116] :
  Block, arg that[318111] :
  (318110 call Block ?[260])) : _unknown[51] "method"
  {
    (318158 return(318156 call &&(318141 call &&(318129 call ==(318122 call . this c"rank")(318126 call . that c"rank"))(318139 call ==(318132 call . this c"boundingBox")(318136 call . that c"boundingBox")))(318155 call(318147 call .(318144 call . this c"targetLocales") c"equals")(318151 call . that c"targetLocales"))))
  }
  function _unknown[51].dsiEqualDMaps[318168](arg _mt[318173]:_MT[238], arg this[318170] :
  Block, arg that[318166]:_any[178](?)) param : _unknown[51] "method"
  {
    (318176 return 0)
  }
  function _unknown[51].dsiClone[318184](arg _mt[318189]:_MT[238], arg this[318186] :
  Block) : _unknown[51] "method"
  {
    (318205 return(318193 'new'(_chpl_manager = unmanaged[220](?))(318204 call Block boundingBox targetLocales dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity rank idxType sparseLayoutType)))
  }
  function _unknown[51].dsiDestroyDist[318213](arg _mt[318218]:_MT[238], arg this[318215] :
  Block) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[318240] "expr temp" "maybe ref" "no copy" "temp"
      (318243 'move' tmpIter[318240] locDist)
      unknown isRngDomArr[318390] "maybe param" "temp"
      (318405 'move' isRngDomArr[318390](318403 call ||(318392 call isBoundedRange tmpIter[318240])(318401 call ||(318395 call isDomain tmpIter[318240])(318398 call isArray tmpIter[318240]))))
      if isRngDomArr[318390]
      {
        const _coforallCount[318262] "const" "end count" "temp"
        (318327 'move' _coforallCount[318262](318324 call _endCountAlloc 0))
        unknown numTasks[318263] "temp"
        (318311 'move' numTasks[318263](318307 call . tmpIter[318240] c"size"))
        (318302 call _upEndCount _coforallCount[318262] 0 numTasks[318263])
        unknown _indexOfInterest[318269] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318270] "expr temp" "temp"
        (318279 'move' _iterator[318270](318277 call _getIterator tmpIter[318240]))
        Defer
        {
          {
            (318295 call _freeIterator _iterator[318270])
          }
        }
        { scopeless type
          (318284 'move' _indexOfInterest[318269](318281 call iteratorIndex _iterator[318270]))
        }
        ForLoop[318271]
        {
          unknown ld[318288] "coforall index var" "index var" "insert auto destroy"
          (318290 'move' ld[318288] _indexOfInterest[318269])
          { scopeless
            { scopeless
              const tmp[318246] "const" "temp"
              (318248 'move' tmp[318246](318250 'deref'(318251 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318259 call chpl__delete ld)
                }
                (318264 call _downEndCount _coforallCount[318262] nil[44])
                (318254 'coforall on block' 0 tmp[318246])
              }
            }
          }
          label _continueLabel[318274]
          _indexOfInterest[318269]
          _iterator[318270]
        }
        label _breakLabel[318275]
        Defer
        {
          {
            (318314 call _endCountFree _coforallCount[318262])
          }
        }
        (318319 call _waitEndCount _coforallCount[318262] 0 numTasks[318263])
      }
      {
        const _coforallCount[318331] "const" "end count" "temp"
        (318387 'move' _coforallCount[318331](318384 call _endCountAlloc 0))
        unknown _indexOfInterest[318338] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318339] "expr temp" "temp"
        (318348 'move' _iterator[318339](318346 call _getIterator tmpIter[318240]))
        Defer
        {
          {
            (318364 call _freeIterator _iterator[318339])
          }
        }
        { scopeless type
          (318353 'move' _indexOfInterest[318338](318350 call iteratorIndex _iterator[318339]))
        }
        ForLoop[318340]
        {
          unknown ld[318357] "coforall index var" "index var" "insert auto destroy"
          (318359 'move' ld[318357] _indexOfInterest[318338])
          (318371 call _upEndCount _coforallCount[318331] 0)
          { scopeless
            { scopeless
              const tmp[318231] "const" "temp"
              (318233 'move' tmp[318231](318229 'deref'(318228 '_wide_get_locale' ld)))
              {
                { scopeless
                  (318225 call chpl__delete ld)
                }
                (318333 call _downEndCount _coforallCount[318331] nil[44])
                (318236 'coforall on block' 0 tmp[318231])
              }
            }
          }
          label _continueLabel[318343]
          _indexOfInterest[318338]
          _iterator[318339]
        }
        label _breakLabel[318344]
        Defer
        {
          {
            (318375 call _endCountFree _coforallCount[318331])
          }
        }
        (318380 call _waitEndCount _coforallCount[318331] 0)
      }
    }
  }
  function _unknown[51].dsiDisplayRepresentation[318415](arg _mt[318420]:_MT[238], arg this[318417] :
  Block) : _unknown[51] "method" "method overrides"
  {
    (318442 call writeln "boundingBox = " boundingBox)
    (318465 call writeln "targetLocDom = " targetLocDom)
    (318496 call writeln "targetLocales = "(318492 for  tl  in  targetLocales do
    {
      (318489 call . tl c"id")
    } ))
    (318518 call writeln "dataParTasksPerLocale = " dataParTasksPerLocale)
    (318540 call writeln "dataParIgnoreRunningTasks = " dataParIgnoreRunningTasks)
    (318562 call writeln "dataParMinGranularity = " dataParMinGranularity)
    {
      unknown _indexOfInterest[318614] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[318615] "expr temp" "temp"
      (318624 'move' _iterator[318615](318622 call _getIterator targetLocDom))
      Defer
      {
        {
          (318640 call _freeIterator _iterator[318615])
        }
      }
      { scopeless type
        (318629 'move' _indexOfInterest[318614](318626 call iteratorIndex _iterator[318615]))
      }
      ForLoop[318616]
      {
        unknown tli[318633] "index var" "insert auto destroy"
        (318635 'move' tli[318633] _indexOfInterest[318614])
        { scopeless
          (318612 call writeln "locDist[" tli "].myChunk = "(318609 call .(318606 call locDist tli) c"myChunk"))
        }
        label _continueLabel[318619]
        _indexOfInterest[318614]
        _iterator[318615]
      }
      label _breakLabel[318620]
    }
  }
  function _unknown[51].dsiNewRectangularDom[318656](arg _mt[318669]:_MT[238], arg this[318666] :
  Block, param arg rank[318653] :
  int[13], arg idxType[318658]:_any[178](?), param arg stridable[318661] :
  bool[10], arg inds[318664]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(318699 call _cond_test(318676 call != idxType(318673 call . this c"idxType")))
    {
      { scopeless
        (318697 call compilerError "Block domain index type does not match distribution's")
      }
    }
    if(318733 call _cond_test(318710 call != rank(318707 call . this c"rank")))
    {
      { scopeless
        (318731 call compilerError "Block domain rank does not match distribution's")
      }
    }
    { scopeless
      const whole[318745] "const"(318744 call createWholeDomainForInds rank idxType stridable inds)
      (318748 'end of statement')
    }
    { scopeless
      const dummyLBD[318758] "const"(318751 'new'(_chpl_manager = unmanaged[220](?))(318757 call LocBlockDom rank idxType stridable))
      (318761 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[318779] dummyLBD(318776 call chpl__buildArrayRuntimeType(318774 call chpl__ensureDomainExpr(318763 call . this c"targetLocDom"))(318773 'to unmanaged class from unknown'(318772 call LocBlockDom rank idxType stridable)))
      (318782 'end of statement')
    }
    {
      unknown tmpIter[318830] "expr temp" "maybe ref" "no copy" "temp"
      (318833 'move' tmpIter[318830](318785 call . this c"targetLocDom"))
      unknown isRngDomArr[319002] "maybe param" "temp"
      (319017 'move' isRngDomArr[319002](319015 call ||(319004 call isBoundedRange tmpIter[318830])(319013 call ||(319007 call isDomain tmpIter[318830])(319010 call isArray tmpIter[318830]))))
      if isRngDomArr[319002]
      {
        const _coforallCount[318874] "const" "end count" "temp"
        (318939 'move' _coforallCount[318874](318936 call _endCountAlloc 0))
        unknown numTasks[318875] "temp"
        (318923 'move' numTasks[318875](318919 call . tmpIter[318830] c"size"))
        (318914 call _upEndCount _coforallCount[318874] 0 numTasks[318875])
        unknown _indexOfInterest[318881] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318882] "expr temp" "temp"
        (318891 'move' _iterator[318882](318889 call _getIterator tmpIter[318830]))
        Defer
        {
          {
            (318907 call _freeIterator _iterator[318882])
          }
        }
        { scopeless type
          (318896 'move' _indexOfInterest[318881](318893 call iteratorIndex _iterator[318882]))
        }
        ForLoop[318883]
        {
          unknown localeIdx[318900] "coforall index var" "index var" "insert auto destroy"
          (318902 'move' localeIdx[318900] _indexOfInterest[318881])
          { scopeless
            { scopeless
              const tmp[318836] "const" "temp"
              (318838 'move' tmp[318836](318840 'deref'(318841 '_wide_get_locale'(318846 call(318843 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (318854 call =(318856 call locDomsTemp localeIdx)(318858 'new'(_chpl_manager = unmanaged[220](?))(318862 call LocBlockDom rank idxType stridable(318870 call(318867 call . this c"getChunk") whole localeIdx))))
                }
                (318876 call _downEndCount _coforallCount[318874] nil[44])
                (318849 'coforall on block' 0 tmp[318836])
              }
            }
          }
          label _continueLabel[318886]
          _indexOfInterest[318881]
          _iterator[318882]
        }
        label _breakLabel[318887]
        Defer
        {
          {
            (318926 call _endCountFree _coforallCount[318874])
          }
        }
        (318931 call _waitEndCount _coforallCount[318874] 0 numTasks[318875])
      }
      {
        const _coforallCount[318943] "const" "end count" "temp"
        (318999 'move' _coforallCount[318943](318996 call _endCountAlloc 0))
        unknown _indexOfInterest[318950] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318951] "expr temp" "temp"
        (318960 'move' _iterator[318951](318958 call _getIterator tmpIter[318830]))
        Defer
        {
          {
            (318976 call _freeIterator _iterator[318951])
          }
        }
        { scopeless type
          (318965 'move' _indexOfInterest[318950](318962 call iteratorIndex _iterator[318951]))
        }
        ForLoop[318952]
        {
          unknown localeIdx[318969] "coforall index var" "index var" "insert auto destroy"
          (318971 'move' localeIdx[318969] _indexOfInterest[318950])
          (318983 call _upEndCount _coforallCount[318943] 0)
          { scopeless
            { scopeless
              const tmp[318822] "const" "temp"
              (318824 'move' tmp[318822](318820 'deref'(318819 '_wide_get_locale'(318794 call(318789 call . this c"targetLocales") localeIdx))))
              {
                { scopeless
                  (318816 call =(318798 call locDomsTemp localeIdx)(318801 'new'(_chpl_manager = unmanaged[220](?))(318815 call LocBlockDom rank idxType stridable(318814 call(318808 call . this c"getChunk") whole localeIdx))))
                }
                (318945 call _downEndCount _coforallCount[318943] nil[44])
                (318827 'coforall on block' 0 tmp[318822])
              }
            }
          }
          label _continueLabel[318955]
          _indexOfInterest[318950]
          _iterator[318951]
        }
        label _breakLabel[318956]
        Defer
        {
          {
            (318987 call _endCountFree _coforallCount[318943])
          }
        }
        (318992 call _waitEndCount _coforallCount[318943] 0)
      }
    }
    (319023 call chpl__delete dummyLBD)
    { scopeless
      unknown dom[319042](319028 'new'(_chpl_manager = unmanaged[220](?))(319041 call BlockDom rank idxType stridable sparseLayoutType(319037 call _cast unmanaged[220](?) this) locDomsTemp whole))
      (319045 'end of statement')
    }
    if(319076 call _cond_test debugBlockDist)
    {
      (319066 call writeln "Creating new Block domain:")
      (319074 call(319070 call . dom c"dsiDisplayRepresentation"))
    }
    (319081 return dom)
  }
  function _unknown[51].dsiNewSparseDom[319092](arg _mt[319103]:_MT[238], arg this[319100] :
  Block, param arg rank[319089] :
  int[13], arg idxType[319094]:_any[178](?), arg dom[319097] :
  _domain) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      unknown ret[319139](319107 'new'(_chpl_manager = unmanaged[220](?))(319138 call SparseBlockDom(rank = rank)(idxType = idxType)(sparseLayoutType = sparseLayoutType)(stridable =(319117 call . dom c"stridable"))(dist =(319124 call _to_unmanaged this))(whole =(319132 call .(319127 call . dom c"_value") c"whole"))(parentDom = dom)))
      (319142 'end of statement')
    }
    (319149 call(319145 call . ret c"setup"))
    (319152 return ret)
  }
  function _unknown[51].writeThis[319161](arg _mt[319166]:_MT[238], arg this[319163] :
  Block, arg x[319159]:_any[178](?)) : _unknown[51] throws "method"
  {
    (319189 call <~>(319186 call <~> x "Block") "\n")
    (319214 call <~>(319211 call <~> x "-------") "\n")
    (319241 call <~>(319238 call <~>(319235 call <~> x "distributes: ") boundingBox) "\n")
    (319268 call <~>(319265 call <~>(319262 call <~> x "across locales: ") targetLocales) "\n")
    (319295 call <~>(319292 call <~>(319289 call <~> x "indexed via: ") targetLocDom) "\n")
    (319319 call <~>(319316 call <~> x "resulting in: ") "\n")
    {
      unknown _indexOfInterest[319408] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[319409] "expr temp" "temp"
      (319418 'move' _iterator[319409](319416 call _getIterator targetLocDom))
      Defer
      {
        {
          (319434 call _freeIterator _iterator[319409])
        }
      }
      { scopeless type
        (319423 'move' _indexOfInterest[319408](319420 call iteratorIndex _iterator[319409]))
      }
      ForLoop[319410]
      {
        unknown locid[319427] "index var" "insert auto destroy"
        (319429 'move' locid[319427] _indexOfInterest[319408])
        { scopeless
          (319405 call <~>(319402 call <~>(319393 call <~>(319374 call <~>(319364 call <~>(319345 call <~>(319342 call <~> x "  [") locid) "] locale ")(319373 '_wide_get_node'(319369 call locDist locid))) " owns chunk: ")(319399 call .(319398 call locDist locid) c"myChunk")) "\n")
        }
        label _continueLabel[319413]
        _indexOfInterest[319408]
        _iterator[319409]
      }
      label _breakLabel[319414]
    }
  }
  function _unknown[51].dsiIndexToLocale[319450](arg _mt[319455]:_MT[238], arg this[319452] :
  Block, arg ind[319447] :
  idxType) : _unknown[51] "method"
  {
    (319468 return(319467 call targetLocales(319465 call targetLocsIdx ind)))
  }
  where {
    (319459 call == rank 1)
  }
  function _unknown[51].dsiIndexToLocale[319484](arg _mt[319489]:_MT[238], arg this[319486] :
  Block, arg ind[319481] :
  (319479 call * rank idxType)) : _unknown[51] "method"
  {
    (319498 return(319497 call targetLocales(319495 call targetLocsIdx ind)))
  }
  function _unknown[51].getChunk[319508](arg _mt[319515]:_MT[238], arg this[319512] :
  Block, arg inds[319506]:_any[178](?), arg locid[319510]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      const chunk[319533] "const"(319532 call(319521 call .(319520 call locDist locid) c"myChunk")(319530 'expand_tuple'(319529 call(319525 call . inds c"getIndices"))))
      (319536 'end of statement')
    }
    if(319657 call _cond_test sanityCheckDistribution)
    {
      { scopeless
        if(319653 call _cond_test(319544 call >(319540 call . chunk c"size") 0))
        {
          if(319610 call _cond_test(319554 call !=(319552 call targetLocsIdx(319548 call . chunk c"low")) locid))
          {
            { scopeless
              (319608 call writeln "["(319560 call . here c"id") "] "(319581 call . chunk c"low") " is in my chunk but maps to "(319607 call targetLocsIdx(319603 call . chunk c"low")))
            }
          }
          if(319648 call _cond_test(319624 call !=(319622 call targetLocsIdx(319618 call . chunk c"high")) locid))
          {
            { scopeless
              (319646 call writeln "["(319630 call . here c"id") "] "(319635 call . chunk c"high") " is in my chunk but maps to "(319645 call targetLocsIdx(319641 call . chunk c"high")))
            }
          }
        }
      }
    }
    (319663 return chunk)
  }
  function _unknown[51].targetLocsIdx[319674](arg _mt[319679]:_MT[238], arg this[319676] :
  Block, arg ind[319671] :
  idxType) : _unknown[51] "method"
  {
    (319691 return(319690 call targetLocsIdx(319687 call _build_tuple ind)))
  }
  where {
    (319683 call == rank 1)
  }
  function _unknown[51].targetLocsIdx[319707](arg _mt[319712]:_MT[238], arg this[319709] :
  Block, arg ind[319704] :
  (319702 call * rank idxType)) : _unknown[51] "method"
  {
    { scopeless
      unknown result[319718](319716 call * rank int[13])
      (319721 'end of statement')
    }
    {
      unknown i[319806] 0
      unknown tmp[319807] "maybe param" "temp"
      (319819 'move' tmp[319807](319817 call chpl_compute_low_param_loop_bound 0(319726 call - rank 1)))
      unknown tmp[319808] "maybe param" "temp"
      (319829 'move' tmp[319808](319827 call chpl_compute_high_param_loop_bound 0(319824 call - rank 1)))
      unknown tmp[319809] "maybe param" "temp"
      (319832 'move' tmp[319809] 1)
      ParamForLoop[319834]
      { i[319806] tmp[319807] tmp[319808] tmp[319809]
        { scopeless
          (319803 call =(319733 call result i)(319802 call max 0(319801 call min(319752 call _cast int[13](319749 call -(319745 call .(319744 call(319739 call . targetLocDom c"dim") i) c"size") 1))(319799 call _cast int[13](319796 call /(319784 call *(319769 call -(319758 call ind i)(319766 call .(319765 call(319760 call . boundingBox c"dim") i) c"low"))(319782 call _cast idxType(319778 call .(319777 call(319772 call . targetLocDom c"dim") i) c"size")))(319793 call .(319792 call(319787 call . boundingBox c"dim") i) c"size"))))))
        }
      }
      label _unused_continueLabel[319811]
      label _breakLabel[319810]
    }
    (319855 return(319852 IfExpr (319845 call == rank 1) then
    { scopeless
      (319850 call result 0)
    } else
    { scopeless
      result
    } ))
  }
  function _unknown[51].activeTargetLocales[319868](arg _mt[319873]:_MT[238], arg this[319870] :
  Block, const arg space[319864] :
  _domain =
  boundingBox) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const locSpace[319885] "const"(319883 call chpl__buildDomainExpr(319881 'expand_tuple'(319880 call(319876 call . space c"dims"))))
      (319888 'end of statement')
    }
    { scopeless
      const low[319900] "const"(319899 call chpl__tuplify(319897 call targetLocsIdx(319893 call . locSpace c"first")))
      (319903 'end of statement')
    }
    { scopeless
      const high[319914] "const"(319913 call chpl__tuplify(319911 call targetLocsIdx(319907 call . locSpace c"last")))
      (319917 'end of statement')
    }
    { scopeless
      unknown dims[319929](319927 call * rank(319926 call range(319924 'typeof'(319923 call low 0))))
      (319932 'end of statement')
    }
    {
      unknown i[319958] 0
      unknown tmp[319959] "maybe param" "temp"
      (319971 'move' tmp[319959](319969 call chpl_compute_low_param_loop_bound 0(319936 call - rank 1)))
      unknown tmp[319960] "maybe param" "temp"
      (319981 'move' tmp[319960](319979 call chpl_compute_high_param_loop_bound 0(319976 call - rank 1)))
      unknown tmp[319961] "maybe param" "temp"
      (319984 'move' tmp[319961] 1)
      ParamForLoop[319986]
      { i[319958] tmp[319959] tmp[319960] tmp[319961]
        {
          (319954 call =(319943 call dims i)(319952 call chpl_build_bounded_range(319947 call low i)(319951 call high i)))
        }
      }
      label _unused_continueLabel[319963]
      label _breakLabel[319962]
    }
    {
      unknown _indexOfInterest[320031] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320032] "expr temp" "temp"
      (320041 'move' _iterator[320032](320039 call _getIterator(319999 call chpl__buildDomainExpr(319997 'expand_tuple' dims))))
      Defer
      {
        {
          (320058 call _freeIterator _iterator[320032])
        }
      }
      { scopeless type
        (320047 'move' _indexOfInterest[320031](320044 call iteratorIndex _iterator[320032]))
      }
      ForLoop[320033]
      {
        unknown i[320051] "index var" "insert auto destroy"
        (320053 'move' i[320051] _indexOfInterest[320031])
        {
          { scopeless
            const chunk[320007] "const"(320006 call chpl__computeBlock i targetLocDom boundingBox)
            (320010 'end of statement')
          }
          if(320026 call _cond_test(320021 call >(320017 call .(320016 call locSpace(320014 'expand_tuple' chunk)) c"size") 0))
          {
            { scopeless
              (320024 yield i)
            }
          }
        }
        label _continueLabel[320036]
        _indexOfInterest[320031]
        _iterator[320032]
      }
      label _breakLabel[320037]
    }
  }
  function chpl__computeBlock[320071](arg locid[320069]:_any[178](?), arg targetLocBox[320073]:_any[178](?), arg boundingBox[320075]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[320081] "param"(320078 call . targetLocBox c"rank")
      (320084 'end of statement')
    }
    unknown idxType[320096] "type variable"(320093 call .(320092 call(320089 call chpl__tuplify boundingBox) 0) c"idxType")
    { scopeless
      unknown inds[320106](320104 call * rank(320103 call range idxType))
      (320109 'end of statement')
    }
    {
      unknown i[320221] 0
      unknown tmp[320222] "maybe param" "temp"
      (320234 'move' tmp[320222](320232 call chpl_compute_low_param_loop_bound 0(320113 call - rank 1)))
      unknown tmp[320223] "maybe param" "temp"
      (320244 'move' tmp[320223](320242 call chpl_compute_high_param_loop_bound 0(320239 call - rank 1)))
      unknown tmp[320224] "maybe param" "temp"
      (320247 'move' tmp[320224] 1)
      ParamForLoop[320249]
      { i[320221] tmp[320222] tmp[320223] tmp[320224]
        {
          { scopeless
            const lo[320127] "const"(320124 call .(320123 call(320118 call . boundingBox c"dim") i) c"low")
            (320130 'end of statement')
          }
          { scopeless
            const hi[320142] "const"(320139 call .(320138 call(320133 call . boundingBox c"dim") i) c"high")
            (320145 'end of statement')
          }
          { scopeless
            const numelems[320153] "const"(320151 call +(320148 call - hi lo) 1)
            (320156 'end of statement')
          }
          { scopeless
            const numlocs[320167] "const"(320164 call .(320163 call(320158 call . targetLocBox c"dim") i) c"size")
            (320170 'end of statement')
          }
          { scopeless
            const tmp[320197] "const" "temp"(320196 call _computeBlock numelems numlocs(320186 call(320183 call chpl__tuplify locid) i)(320190 call max idxType)(320194 call min idxType) lo)
            (320204 call _check_tuple_var_decl tmp[320197] 2)
            const blo[320171] "const"(320198 call tmp[320197] 0)
            const bhi[320173] "const"(320201 call tmp[320197] 1)
            (320209 'end of statement')
          }
          (320218 call =(320213 call inds i)(320216 call chpl_build_bounded_range blo bhi))
        }
      }
      label _unused_continueLabel[320226]
      label _breakLabel[320225]
    }
    (320259 return inds)
  }
  function _unknown[51].init[320270](arg _mt[320289]:_MT[238], arg this[320286] :
  LocBlock, param arg rank[320267] :
  int[13], arg idxType[320272]:_any[178](?), arg locid[320274]:_any[178](?), arg boundingBox[320276]:_any[178](?), arg targetLocDom[320283] :
  (320281 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[51] "method"
  {
    (320296 call =(320292 call . this c"rank") rank)
    (320305 call =(320301 call . this c"idxType") idxType)
    { scopeless
      const inds[320317] "const"(320316 call chpl__computeBlock(320312 call chpl__tuplify locid) targetLocDom boundingBox)
      (320320 'end of statement')
    }
    (320327 call = myChunk(320325 call chpl__buildDomainExpr(320323 'expand_tuple' inds)))
  }
  function _unknown[51].init[320337](arg _mt[320348]:_MT[238], arg this[320345] :
  LocBlock, param arg rank[320335]:_any[178](?), arg idxType[320339]:_any[178](?), param arg dummy[320342] :
  bool[10]) : _unknown[51] "method"
  {
    (320356 call =(320352 call . this c"rank") rank)
    (320365 call =(320361 call . this c"idxType") idxType)
  }
  where {
    dummy
  }
  function _unknown[51].dsiMyDist[320374](arg _mt[320379]:_MT[238], arg this[320376] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (320382 return dist)
    }
  }
  function _unknown[51].dsiDisplayRepresentation[320390](arg _mt[320395]:_MT[238], arg this[320392] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    (320417 call writeln "whole = " whole)
    {
      unknown _indexOfInterest[320471] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320472] "expr temp" "temp"
      (320481 'move' _iterator[320472](320479 call _getIterator(320422 call . dist c"targetLocDom")))
      Defer
      {
        {
          (320498 call _freeIterator _iterator[320472])
        }
      }
      { scopeless type
        (320487 'move' _indexOfInterest[320471](320484 call iteratorIndex _iterator[320472]))
      }
      ForLoop[320473]
      {
        unknown tli[320491] "index var" "insert auto destroy"
        (320493 'move' tli[320491] _indexOfInterest[320471])
        { scopeless
          (320469 call writeln "locDoms[" tli "].myBlock = "(320466 call .(320465 call locDoms tli) c"myBlock"))
        }
        label _continueLabel[320476]
        _indexOfInterest[320471]
        _iterator[320472]
      }
      label _breakLabel[320477]
    }
  }
  function _unknown[51].dsiDims[320510](arg _mt[320515]:_MT[238], arg this[320512] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (320523 return(320522 call(320518 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiDim[320535](arg _mt[320540]:_MT[238], arg this[320537] :
  BlockDom, arg d[320532] :
  int[13]) : _unknown[51] "method"
  {
    { scopeless
      (320549 return(320548 call(320543 call . whole c"dim") d))
    }
  }
  function _unknown[51].getLocDom[320559](arg _mt[320564]:_MT[238], arg this[320561] :
  BlockDom, arg localeIdx[320557]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (320570 return(320569 call locDoms localeIdx))
    }
  }
  function _matchArgsShape[320579](arg rangeType[320577]:_any[178](?), arg scalarType[320581]:_any[178](?), arg args[320583]:_any[178](?)) type : _unknown[51]
  {
    function helper[320591](param arg i[320588] :
    int[13]) type : _unknown[51]
    {
      if(320666 call _cond_test(320598 call == i(320595 call . args c"size")))
      {
        if(320617 call _cond_test(320606 call isCollapsedDimension(320604 call args i)))
        {
          { scopeless
            (320610 return(320608 call _build_tuple scalarType))
          }
        }
        {
          { scopeless
            (320615 return(320613 call _build_tuple rangeType))
          }
        }
      }
      {
        if(320659 call _cond_test(320630 call isCollapsedDimension(320628 call args i)))
        {
          { scopeless
            (320643 return(320641 call _build_tuple scalarType(320639 'expand_tuple'(320638 call helper(320635 call + i 1)))))
          }
        }
        {
          { scopeless
            (320657 return(320655 call _build_tuple rangeType(320653 'expand_tuple'(320652 call helper(320649 call + i 1)))))
          }
        }
      }
    }
    (320678 return(320677 call helper 0))
  }
  function _unknown[51].these[320685](arg _mt[320690]:_MT[238], arg this[320687] :
  BlockDom) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[320697] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320698] "expr temp" "temp"
      (320707 'move' _iterator[320698](320705 call _getIterator whole))
      Defer
      {
        {
          (320723 call _freeIterator _iterator[320698])
        }
      }
      { scopeless type
        (320712 'move' _indexOfInterest[320697](320709 call iteratorIndex _iterator[320698]))
      }
      ForLoop[320699]
      {
        unknown i[320716] "index var" "insert auto destroy"
        (320718 'move' i[320716] _indexOfInterest[320697])
        { scopeless
          (320695 yield i)
        }
        label _continueLabel[320702]
        _indexOfInterest[320697]
        _iterator[320698]
      }
      label _breakLabel[320703]
    }
  }
  function _unknown[51].these[320740](arg _mt[320745]:_MT[238], arg this[320742] :
  BlockDom, param arg tag[320737] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      const maxTasks[320758] "const"(320755 call . dist c"dataParTasksPerLocale")
      (320761 'end of statement')
    }
    { scopeless
      const ignoreRunning[320767] "const"(320764 call . dist c"dataParIgnoreRunningTasks")
      (320770 'end of statement')
    }
    { scopeless
      const minSize[320775] "const"(320772 call . dist c"dataParMinGranularity")
      (320778 'end of statement')
    }
    { scopeless
      const wholeLow[320783] "const"(320780 call . whole c"low")
      (320786 'end of statement')
    }
    { scopeless
      const hereId[320791] "const"(320788 call . here c"id")
      (320794 'end of statement')
    }
    { scopeless
      const hereIgnoreRunning[320809] "const"(320806 IfExpr (320802 call ==(320800 call(320796 call . here c"runningTasks")) 1) then
      { scopeless
        1
      } else
      { scopeless
        ignoreRunning
      } )
      (320812 'end of statement')
    }
    {
      unknown tmpIter[321049] "expr temp" "maybe ref" "no copy" "temp"
      (321052 'move' tmpIter[321049] locDoms)
      unknown isRngDomArr[321385] "maybe param" "temp"
      (321400 'move' isRngDomArr[321385](321398 call ||(321387 call isBoundedRange tmpIter[321049])(321396 call ||(321390 call isDomain tmpIter[321049])(321393 call isArray tmpIter[321049]))))
      if isRngDomArr[321385]
      {
        const _coforallCount[321257] "const" "end count" "temp"
        (321322 'move' _coforallCount[321257](321319 call _endCountAlloc 0))
        unknown numTasks[321258] "temp"
        (321306 'move' numTasks[321258](321302 call . tmpIter[321049] c"size"))
        (321297 call _upEndCount _coforallCount[321257] 0 numTasks[321258])
        unknown _indexOfInterest[321264] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321265] "expr temp" "temp"
        (321274 'move' _iterator[321265](321272 call _getIterator tmpIter[321049]))
        Defer
        {
          {
            (321290 call _freeIterator _iterator[321265])
          }
        }
        { scopeless type
          (321279 'move' _indexOfInterest[321264](321276 call iteratorIndex _iterator[321265]))
        }
        ForLoop[321266]
        {
          unknown locDom[321283] "coforall index var" "index var" "insert auto destroy"
          (321285 'move' locDom[321283] _indexOfInterest[321264])
          { scopeless
            { scopeless
              const tmp[321055] "const" "temp"
              (321057 'move' tmp[321055](321059 'deref'(321060 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[321068] "const"(321080 IfExpr (321070 call ==(321072 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (321082 'end of statement')
                  }
                  unknown strType[321083] "type variable"(321085 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[321089] "const"(321097 call(321091 call .(321093 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (321100 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[321102](321104 call * rank idxType)
                    (321108 'end of statement')
                  }
                  {
                    unknown i[321110] 0
                    unknown tmp[321113] "maybe param" "temp"
                    (321115 'move' tmp[321113](321118 call chpl_compute_low_param_loop_bound 0(321121 call -(321123 call . tmpBlock c"rank") 1)))
                    unknown tmp[321127] "maybe param" "temp"
                    (321129 'move' tmp[321127](321132 call chpl_compute_high_param_loop_bound 0(321135 call -(321137 call . tmpBlock c"rank") 1)))
                    unknown tmp[321141] "maybe param" "temp"
                    (321143 'move' tmp[321141] 1)
                    ParamForLoop[321146]
                    { i[321110] tmp[321113] tmp[321127] tmp[321141]
                      {
                        { scopeless
                          const stride[321154] "const"(321156 call .(321161 call(321158 call . tmpBlock c"dim") i) c"stride")
                          (321165 'end of statement')
                        }
                        if(321167 call _cond_test(321169 call &&(321171 call < stride 0)(321175 call != strType idxType)))
                        {
                          { scopeless
                            (321181 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (321185 call =(321187 call locOffset i)(321190 call /(321192 call .(321197 call(321194 call . tmpBlock c"dim") i) c"first")(321201 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[321204]
                    label _breakLabel[321206]
                  }
                  {
                    unknown _indexOfInterest[321209] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321211] "expr temp" "temp"
                    (321213 'move' _iterator[321211](321216 call _getIterator(321221 call(321218 call . tmpBlock c"these")(321223 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321232 call _freeIterator _iterator[321211])
                      }
                    }
                    { scopeless type
                      (321236 'move' _indexOfInterest[321209](321239 call iteratorIndex _iterator[321211]))
                    }
                    ForLoop[321241]
                    {
                      unknown followThis[321244] "index var" "insert auto destroy"
                      (321246 'move' followThis[321244] _indexOfInterest[321209])
                      { scopeless
                        (321250 yield followThis)
                      }
                      label _continueLabel[321252]
                      _indexOfInterest[321209]
                      _iterator[321211]
                    }
                    label _breakLabel[321254]
                  }
                }
                (321259 call _downEndCount _coforallCount[321257] nil[44])
                (321063 'coforall on block' 0 tmp[321055])
              }
            }
          }
          label _continueLabel[321269]
          _indexOfInterest[321264]
          _iterator[321265]
        }
        label _breakLabel[321270]
        Defer
        {
          {
            (321309 call _endCountFree _coforallCount[321257])
          }
        }
        (321314 call _waitEndCount _coforallCount[321257] 0 numTasks[321258])
      }
      {
        const _coforallCount[321326] "const" "end count" "temp"
        (321382 'move' _coforallCount[321326](321379 call _endCountAlloc 0))
        unknown _indexOfInterest[321333] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321334] "expr temp" "temp"
        (321343 'move' _iterator[321334](321341 call _getIterator tmpIter[321049]))
        Defer
        {
          {
            (321359 call _freeIterator _iterator[321334])
          }
        }
        { scopeless type
          (321348 'move' _indexOfInterest[321333](321345 call iteratorIndex _iterator[321334]))
        }
        ForLoop[321335]
        {
          unknown locDom[321352] "coforall index var" "index var" "insert auto destroy"
          (321354 'move' locDom[321352] _indexOfInterest[321333])
          (321366 call _upEndCount _coforallCount[321326] 0)
          { scopeless
            { scopeless
              const tmp[321041] "const" "temp"
              (321043 'move' tmp[321041](321039 'deref'(321038 '_wide_get_locale' locDom)))
              {
                {
                  { scopeless
                    const myIgnoreRunning[320828] "const"(320825 IfExpr (320821 call ==(320817 call . here c"id") hereId) then
                    { scopeless
                      hereIgnoreRunning
                    } else
                    { scopeless
                      ignoreRunning
                    } )
                    (320831 'end of statement')
                  }
                  unknown strType[320837] "type variable"(320836 call chpl__signedType idxType)
                  { scopeless
                    const tmpBlock[320850] "const"(320849 call(320844 call .(320841 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                    (320853 'end of statement')
                  }
                  { scopeless
                    unknown locOffset[320858](320856 call * rank idxType)
                    (320861 'end of statement')
                  }
                  {
                    unknown i[320946] 0
                    unknown tmp[320947] "maybe param" "temp"
                    (320959 'move' tmp[320947](320957 call chpl_compute_low_param_loop_bound 0(320868 call -(320864 call . tmpBlock c"rank") 1)))
                    unknown tmp[320948] "maybe param" "temp"
                    (320972 'move' tmp[320948](320970 call chpl_compute_high_param_loop_bound 0(320964 call -(320966 call . tmpBlock c"rank") 1)))
                    unknown tmp[320949] "maybe param" "temp"
                    (320975 'move' tmp[320949] 1)
                    ParamForLoop[320977]
                    { i[320946] tmp[320947] tmp[320948] tmp[320949]
                      {
                        { scopeless
                          const stride[320882] "const"(320879 call .(320878 call(320873 call . tmpBlock c"dim") i) c"stride")
                          (320885 'end of statement')
                        }
                        if(320918 call _cond_test(320895 call &&(320889 call < stride 0)(320893 call != strType idxType)))
                        {
                          { scopeless
                            (320916 call halt "negative stride not supported with unsigned idxType")
                          }
                        }
                        (320943 call =(320926 call locOffset i)(320941 call /(320934 call .(320933 call(320928 call . tmpBlock c"dim") i) c"first")(320939 call _cast idxType stride)))
                      }
                    }
                    label _unused_continueLabel[320951]
                    label _breakLabel[320950]
                  }
                  {
                    unknown _indexOfInterest[321004] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[321005] "expr temp" "temp"
                    (321014 'move' _iterator[321005](321012 call _getIterator(321000 call(320988 call . tmpBlock c"these")(320992 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                    Defer
                    {
                      {
                        (321031 call _freeIterator _iterator[321005])
                      }
                    }
                    { scopeless type
                      (321020 'move' _indexOfInterest[321004](321017 call iteratorIndex _iterator[321005]))
                    }
                    ForLoop[321006]
                    {
                      unknown followThis[321024] "index var" "insert auto destroy"
                      (321026 'move' followThis[321024] _indexOfInterest[321004])
                      { scopeless
                        (321002 yield followThis)
                      }
                      label _continueLabel[321009]
                      _indexOfInterest[321004]
                      _iterator[321005]
                    }
                    label _breakLabel[321010]
                  }
                }
                (321328 call _downEndCount _coforallCount[321326] nil[44])
                (321046 'coforall on block' 0 tmp[321041])
              }
            }
          }
          label _continueLabel[321338]
          _indexOfInterest[321333]
          _iterator[321334]
        }
        label _breakLabel[321339]
        Defer
        {
          {
            (321370 call _endCountFree _coforallCount[321326])
          }
        }
        (321375 call _waitEndCount _coforallCount[321326] 0)
      }
    }
  }
  where {
    (320752 call == tag(320749 call . iterKind c"leader"))
  }
  function _unknown[51].these[321414](arg _mt[321421]:_MT[238], arg this[321418] :
  BlockDom, param arg tag[321411] :
  iterKind, arg followThis[321416]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[321434](arg rangeTuple[321432]:_any[178](?), param arg i[321438] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (321479 return(321476 IfExpr (321450 call == i(321448 call -(321444 call . rangeTuple c"size") 1)) then
        { scopeless
          (321456 call .(321455 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (321474 call ||(321463 call .(321462 call rangeTuple i) c"stridable")(321473 call anyStridable rangeTuple(321471 call + i 1)))
        } ))
      }
    }
    if(321508 call _cond_test chpl__testParFlag)
    {
      { scopeless
        (321506 call chpl__testParWriteln "Block domain follower invoked on " followThis)
      }
    }
    { scopeless
      unknown t[321528](321526 call * rank(321525 call range idxType(stridable =(321522 call || stridable(321521 call anyStridable followThis)))))
      (321531 'end of statement')
    }
    unknown strType[321536] "type variable"(321535 call chpl__signedType idxType)
    {
      unknown i[321655] 0
      unknown tmp[321656] "maybe param" "temp"
      (321668 'move' tmp[321656](321666 call chpl_compute_low_param_loop_bound 0(321542 call - rank 1)))
      unknown tmp[321657] "maybe param" "temp"
      (321678 'move' tmp[321657](321676 call chpl_compute_high_param_loop_bound 0(321673 call - rank 1)))
      unknown tmp[321658] "maybe param" "temp"
      (321681 'move' tmp[321658] 1)
      ParamForLoop[321683]
      { i[321655] tmp[321656] tmp[321657] tmp[321658]
        {
          { scopeless
            unknown stride[321559](321557 call _cast strType(321553 call .(321552 call(321547 call . whole c"dim") i) c"stride"))
            (321562 'end of statement')
          }
          { scopeless
            unknown low[321580](321578 call _cast idxType(321575 call * stride(321573 call _cast strType(321569 call .(321568 call followThis i) c"low"))))
            (321583 'end of statement')
          }
          { scopeless
            unknown high[321600](321598 call _cast idxType(321595 call * stride(321593 call _cast strType(321589 call .(321588 call followThis i) c"high"))))
            (321603 'end of statement')
          }
          (321652 call =(321607 call t i)(321651 call(321642 call .(321640 call chpl_by(321628 call +(321616 call chpl_by(321610 call chpl_build_bounded_range low high)(321614 call _cast strType stride))(321625 call .(321624 call(321619 call . whole c"dim") i) c"alignedLow"))(321638 call _cast strType(321634 call .(321633 call followThis i) c"stride"))) c"safeCast")(321649 'typeof'(321648 call t i))))
        }
      }
      label _unused_continueLabel[321660]
      label _breakLabel[321659]
    }
    {
      unknown _indexOfInterest[321702] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[321703] "expr temp" "temp"
      (321712 'move' _iterator[321703](321710 call _getIterator(321696 call chpl__buildDomainExpr(321694 'expand_tuple' t))))
      Defer
      {
        {
          (321729 call _freeIterator _iterator[321703])
        }
      }
      { scopeless type
        (321718 'move' _indexOfInterest[321702](321715 call iteratorIndex _iterator[321703]))
      }
      ForLoop[321704]
      {
        unknown i[321722] "index var" "insert auto destroy"
        (321724 'move' i[321722] _indexOfInterest[321702])
        {
          (321699 yield i)
        }
        label _continueLabel[321707]
        _indexOfInterest[321702]
        _iterator[321703]
      }
      label _breakLabel[321708]
    }
  }
  where {
    (321428 call == tag(321425 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[321744](arg _mt[321749]:_MT[238], arg this[321746] :
  BlockDom, arg x[321742]:_any[178](?)) : _unknown[51] "method"
  {
    (321753 call <~> x whole)
  }
  function _unknown[51].dsiBuildArray[321764](arg _mt[321773]:_MT[238], arg this[321770] :
  BlockDom, arg eltType[321762]:_any[178](?), param arg initElts[321767] :
  bool[10]) : _unknown[51] "method"
  {
    { scopeless
      const dom[321776] "const" this
      (321779 'end of statement')
    }
    { scopeless
      const creationLocale[321785] "const"(321782 call . here c"id")
      (321788 'end of statement')
    }
    { scopeless
      const dummyLBD[321798] "const"(321791 'new'(_chpl_manager = unmanaged[220](?))(321797 call LocBlockDom rank idxType stridable))
      (321801 'end of statement')
    }
    { scopeless
      const dummyLBA[321814] "const"(321804 'new'(_chpl_manager = unmanaged[220](?))(321813 call LocBlockArr eltType rank idxType stridable dummyLBD 0))
      (321817 'end of statement')
    }
    { scopeless
      unknown locArrTemp[321839] dummyLBA(321836 call chpl__buildArrayRuntimeType(321834 call chpl__ensureDomainExpr(321822 call .(321819 call . dom c"dist") c"targetLocDom"))(321833 'to unmanaged class from unknown'(321832 call LocBlockArr eltType rank idxType stridable)))
      (321842 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[321852](321851 'to unmanaged class from unknown'(321850 'to nilable class from type'(321849 call LocBlockArr eltType rank idxType stridable)))
      (321855 'end of statement')
    }
    {
      unknown tmpIter[321945] "expr temp" "maybe ref" "no copy" "temp"
      (321948 'move' tmpIter[321945](321861 call .(321858 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[322146] "maybe param" "temp"
      (322161 'move' isRngDomArr[322146](322159 call ||(322148 call isBoundedRange tmpIter[321945])(322157 call ||(322151 call isDomain tmpIter[321945])(322154 call isArray tmpIter[321945]))))
      if isRngDomArr[322146]
      {
        const _coforallCount[322018] "const" "end count" "temp"
        (322083 'move' _coforallCount[322018](322080 call _endCountAlloc 0))
        unknown numTasks[322019] "temp"
        (322067 'move' numTasks[322019](322063 call . tmpIter[321945] c"size"))
        (322058 call _upEndCount _coforallCount[322018] 0 numTasks[322019])
        unknown _indexOfInterest[322025] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322026] "expr temp" "temp"
        (322035 'move' _iterator[322026](322033 call _getIterator tmpIter[321945]))
        Defer
        {
          {
            (322051 call _freeIterator _iterator[322026])
          }
        }
        { scopeless type
          (322040 'move' _indexOfInterest[322025](322037 call iteratorIndex _iterator[322026]))
        }
        ForLoop[322027]
        {
          unknown localeIdx[322044] "coforall index var" "index var" "insert auto destroy"
          (322046 'move' localeIdx[322044] _indexOfInterest[322025])
          { scopeless
            { scopeless
              const tmp[321954] "const" "temp"
              (321956 'move' tmp[321954](321958 'deref'(321959 '_wide_get_locale'(321967 call(321961 call .(321963 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[321975] "const"(321976 'new'(_chpl_manager = unmanaged[220](?))(321980 call LocBlockArr eltType rank idxType stridable(321989 call(321986 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (321994 'end of statement')
                  }
                  (321996 call =(321998 call locArrTemp localeIdx) LBA)
                  if(322002 call _cond_test(322004 call ==(322006 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (322013 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322020 call _downEndCount _coforallCount[322018] nil[44])
                (321970 'coforall on block' 0 tmp[321954])
                (321950 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322030]
          _indexOfInterest[322025]
          _iterator[322026]
        }
        label _breakLabel[322031]
        Defer
        {
          {
            (322070 call _endCountFree _coforallCount[322018])
          }
        }
        (322075 call _waitEndCount _coforallCount[322018] 0 numTasks[322019])
      }
      {
        const _coforallCount[322087] "const" "end count" "temp"
        (322143 'move' _coforallCount[322087](322140 call _endCountAlloc 0))
        unknown _indexOfInterest[322094] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322095] "expr temp" "temp"
        (322104 'move' _iterator[322095](322102 call _getIterator tmpIter[321945]))
        Defer
        {
          {
            (322120 call _freeIterator _iterator[322095])
          }
        }
        { scopeless type
          (322109 'move' _indexOfInterest[322094](322106 call iteratorIndex _iterator[322095]))
        }
        ForLoop[322096]
        {
          unknown localeIdx[322113] "coforall index var" "index var" "insert auto destroy"
          (322115 'move' localeIdx[322113] _indexOfInterest[322094])
          (322127 call _upEndCount _coforallCount[322087] 0)
          { scopeless
            { scopeless
              const tmp[321936] "const" "temp"
              (321938 'move' tmp[321936](321934 'deref'(321933 '_wide_get_locale'(321881 call(321876 call .(321873 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                {
                  { scopeless
                    const LBA[321903] "const"(321884 'new'(_chpl_manager = unmanaged[220](?))(321902 call LocBlockArr eltType rank idxType stridable(321899 call(321894 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                    (321906 'end of statement')
                  }
                  (321913 call =(321911 call locArrTemp localeIdx) LBA)
                  if(321928 call _cond_test(321921 call ==(321917 call . here c"id") creationLocale))
                  {
                    { scopeless
                      (321925 call = myLocArrTemp LBA)
                    }
                  }
                }
                (322089 call _downEndCount _coforallCount[322087] nil[44])
                (321941 'coforall on block' 0 tmp[321936])
                (321869 'actuals list' tiMarkRef[294] myLocArrTemp)
              }
            }
          }
          label _continueLabel[322099]
          _indexOfInterest[322094]
          _iterator[322095]
        }
        label _breakLabel[322100]
        Defer
        {
          {
            (322131 call _endCountFree _coforallCount[322087])
          }
        }
        (322136 call _waitEndCount _coforallCount[322087] 0)
      }
    }
    (322168 call chpl__delete dummyLBA dummyLBD)
    { scopeless
      unknown arr[322196](322173 'new'(_chpl_manager = unmanaged[220](?))(322195 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom =(322189 call _to_unmanaged dom))(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (322199 'end of statement')
    }
    if(322218 call _cond_test(322207 call &&(322203 call . arr c"doRADOpt") disableBlockLazyRAD))
    {
      { scopeless
        (322216 call(322212 call . arr c"setupRADOpt"))
      }
    }
    (322224 return arr)
  }
  function _unknown[51].dsiNumIndices[322231](arg _mt[322236]:_MT[238], arg this[322233] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322242 return(322239 call . whole c"size"))
    }
  }
  function _unknown[51].dsiLow[322250](arg _mt[322255]:_MT[238], arg this[322252] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322261 return(322258 call . whole c"low"))
    }
  }
  function _unknown[51].dsiHigh[322269](arg _mt[322274]:_MT[238], arg this[322271] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322280 return(322277 call . whole c"high"))
    }
  }
  function _unknown[51].dsiStride[322288](arg _mt[322293]:_MT[238], arg this[322290] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322299 return(322296 call . whole c"stride"))
    }
  }
  function _unknown[51].dsiAlignedLow[322307](arg _mt[322312]:_MT[238], arg this[322309] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322318 return(322315 call . whole c"alignedLow"))
    }
  }
  function _unknown[51].dsiAlignedHigh[322326](arg _mt[322331]:_MT[238], arg this[322328] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322337 return(322334 call . whole c"alignedHigh"))
    }
  }
  function _unknown[51].dsiAlignment[322345](arg _mt[322350]:_MT[238], arg this[322347] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (322356 return(322353 call . whole c"alignment"))
    }
  }
  function _unknown[51].dsiSetIndices[322368](arg _mt[322373]:_MT[238], arg this[322370] :
  BlockDom, arg x[322365] :
  _domain) : _unknown[51] "method"
  {
    if(322387 call _cond_test(322380 call !=(322376 call . x c"rank") rank))
    {
      { scopeless
        (322385 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322408 call _cond_test(322401 call !=(322397 call .(322394 call . x c"_value") c"idxType") idxType))
    {
      { scopeless
        (322406 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322415 call = whole x)
    (322420 call setup)
    if(322449 call _cond_test debugBlockDist)
    {
      (322442 call writeln "Setting indices of Block domain:")
      (322447 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiSetIndices[322460](arg _mt[322465]:_MT[238], arg this[322462] :
  BlockDom, arg x[322458]:_any[178](?)) : _unknown[51] "method"
  {
    if(322479 call _cond_test(322472 call !=(322468 call . x c"size") rank))
    {
      { scopeless
        (322477 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(322500 call _cond_test(322493 call !=(322489 call .(322488 call x 0) c"idxType") idxType))
    {
      { scopeless
        (322498 call compilerError "index type mismatch in domain assignment")
      }
    }
    (322511 call(322506 call . whole c"setIndices") x)
    (322515 call setup)
    if(322528 call _cond_test debugBlockDist)
    {
      (322521 call writeln "Setting indices of Block domain:")
      (322526 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiGetIndices[322537](arg _mt[322542]:_MT[238], arg this[322539] :
  BlockDom) : _unknown[51] "method"
  {
    (322550 return(322549 call(322545 call . whole c"getIndices")))
  }
  function _unknown[51].dsiAssignDomain[322562](arg _mt[322571]:_MT[238], arg this[322568] :
  BlockDom, arg rhs[322559] :
  _domain, arg lhsPrivate[322565] :
  bool[10]) : _unknown[51] "method"
  {
    (322577 call chpl_assignDomainWithGetSetIndices this rhs)
  }
  function _unknown[51].dsiLocalSlice[322589](arg _mt[322596]:_MT[238], arg this[322593] :
  BlockDom, param arg stridable[322586] :
  bool[10], arg ranges[322591]:_any[178](?)) : _unknown[51] "method"
  {
    (322603 return(322602 call whole(322600 'expand_tuple' ranges)))
  }
  function _unknown[51].setup[322611](arg _mt[322616]:_MT[238], arg this[322613] :
  BlockDom) : _unknown[51] "method"
  {
    {
      unknown tmpIter[322660] "expr temp" "maybe ref" "no copy" "temp"
      (322663 'move' tmpIter[322660](322620 call . dist c"targetLocDom"))
      unknown isRngDomArr[322827] "maybe param" "temp"
      (322842 'move' isRngDomArr[322827](322840 call ||(322829 call isBoundedRange tmpIter[322660])(322838 call ||(322832 call isDomain tmpIter[322660])(322835 call isArray tmpIter[322660]))))
      if isRngDomArr[322827]
      {
        const _coforallCount[322699] "const" "end count" "temp"
        (322764 'move' _coforallCount[322699](322761 call _endCountAlloc 0))
        unknown numTasks[322700] "temp"
        (322748 'move' numTasks[322700](322744 call . tmpIter[322660] c"size"))
        (322739 call _upEndCount _coforallCount[322699] 0 numTasks[322700])
        unknown _indexOfInterest[322706] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322707] "expr temp" "temp"
        (322716 'move' _iterator[322707](322714 call _getIterator tmpIter[322660]))
        Defer
        {
          {
            (322732 call _freeIterator _iterator[322707])
          }
        }
        { scopeless type
          (322721 'move' _indexOfInterest[322706](322718 call iteratorIndex _iterator[322707]))
        }
        ForLoop[322708]
        {
          unknown localeIdx[322725] "coforall index var" "index var" "insert auto destroy"
          (322727 'move' localeIdx[322725] _indexOfInterest[322706])
          { scopeless
            { scopeless
              const tmp[322666] "const" "temp"
              (322668 'move' tmp[322666](322670 'deref'(322671 '_wide_get_locale'(322676 call(322673 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322684 call =(322686 call .(322688 call locDoms localeIdx) c"myBlock")(322695 call(322692 call . dist c"getChunk") whole localeIdx))
                }
                (322701 call _downEndCount _coforallCount[322699] nil[44])
                (322679 'coforall on block' 0 tmp[322666])
              }
            }
          }
          label _continueLabel[322711]
          _indexOfInterest[322706]
          _iterator[322707]
        }
        label _breakLabel[322712]
        Defer
        {
          {
            (322751 call _endCountFree _coforallCount[322699])
          }
        }
        (322756 call _waitEndCount _coforallCount[322699] 0 numTasks[322700])
      }
      {
        const _coforallCount[322768] "const" "end count" "temp"
        (322824 'move' _coforallCount[322768](322821 call _endCountAlloc 0))
        unknown _indexOfInterest[322775] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322776] "expr temp" "temp"
        (322785 'move' _iterator[322776](322783 call _getIterator tmpIter[322660]))
        Defer
        {
          {
            (322801 call _freeIterator _iterator[322776])
          }
        }
        { scopeless type
          (322790 'move' _indexOfInterest[322775](322787 call iteratorIndex _iterator[322776]))
        }
        ForLoop[322777]
        {
          unknown localeIdx[322794] "coforall index var" "index var" "insert auto destroy"
          (322796 'move' localeIdx[322794] _indexOfInterest[322775])
          (322808 call _upEndCount _coforallCount[322768] 0)
          { scopeless
            { scopeless
              const tmp[322651] "const" "temp"
              (322653 'move' tmp[322651](322649 'deref'(322648 '_wide_get_locale'(322629 call(322624 call . dist c"targetLocales") localeIdx))))
              {
                { scopeless
                  (322645 call =(322634 call .(322633 call locDoms localeIdx) c"myBlock")(322644 call(322638 call . dist c"getChunk") whole localeIdx))
                }
                (322770 call _downEndCount _coforallCount[322768] nil[44])
                (322656 'coforall on block' 0 tmp[322651])
              }
            }
          }
          label _continueLabel[322780]
          _indexOfInterest[322775]
          _iterator[322776]
        }
        label _breakLabel[322781]
        Defer
        {
          {
            (322812 call _endCountFree _coforallCount[322768])
          }
        }
        (322817 call _waitEndCount _coforallCount[322768] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyDom[322852](arg _mt[322857]:_MT[238], arg this[322854] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[322888] "expr temp" "maybe ref" "no copy" "temp"
      (322891 'move' tmpIter[322888](322861 call . dist c"targetLocDom"))
      unknown isRngDomArr[323042] "maybe param" "temp"
      (323057 'move' isRngDomArr[323042](323055 call ||(323044 call isBoundedRange tmpIter[322888])(323053 call ||(323047 call isDomain tmpIter[322888])(323050 call isArray tmpIter[322888]))))
      if isRngDomArr[323042]
      {
        const _coforallCount[322914] "const" "end count" "temp"
        (322979 'move' _coforallCount[322914](322976 call _endCountAlloc 0))
        unknown numTasks[322915] "temp"
        (322963 'move' numTasks[322915](322959 call . tmpIter[322888] c"size"))
        (322954 call _upEndCount _coforallCount[322914] 0 numTasks[322915])
        unknown _indexOfInterest[322921] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322922] "expr temp" "temp"
        (322931 'move' _iterator[322922](322929 call _getIterator tmpIter[322888]))
        Defer
        {
          {
            (322947 call _freeIterator _iterator[322922])
          }
        }
        { scopeless type
          (322936 'move' _indexOfInterest[322921](322933 call iteratorIndex _iterator[322922]))
        }
        ForLoop[322923]
        {
          unknown localeIdx[322940] "coforall index var" "index var" "insert auto destroy"
          (322942 'move' localeIdx[322940] _indexOfInterest[322921])
          { scopeless
            { scopeless
              const tmp[322894] "const" "temp"
              (322896 'move' tmp[322894](322898 'deref'(322899 '_wide_get_locale'(322901 call locDoms localeIdx))))
              {
                { scopeless
                  (322909 call chpl__delete(322911 call locDoms localeIdx))
                }
                (322916 call _downEndCount _coforallCount[322914] nil[44])
                (322904 'coforall on block' 0 tmp[322894])
              }
            }
          }
          label _continueLabel[322926]
          _indexOfInterest[322921]
          _iterator[322922]
        }
        label _breakLabel[322927]
        Defer
        {
          {
            (322966 call _endCountFree _coforallCount[322914])
          }
        }
        (322971 call _waitEndCount _coforallCount[322914] 0 numTasks[322915])
      }
      {
        const _coforallCount[322983] "const" "end count" "temp"
        (323039 'move' _coforallCount[322983](323036 call _endCountAlloc 0))
        unknown _indexOfInterest[322990] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322991] "expr temp" "temp"
        (323000 'move' _iterator[322991](322998 call _getIterator tmpIter[322888]))
        Defer
        {
          {
            (323016 call _freeIterator _iterator[322991])
          }
        }
        { scopeless type
          (323005 'move' _indexOfInterest[322990](323002 call iteratorIndex _iterator[322991]))
        }
        ForLoop[322992]
        {
          unknown localeIdx[323009] "coforall index var" "index var" "insert auto destroy"
          (323011 'move' localeIdx[323009] _indexOfInterest[322990])
          (323023 call _upEndCount _coforallCount[322983] 0)
          { scopeless
            { scopeless
              const tmp[322879] "const" "temp"
              (322881 'move' tmp[322879](322877 'deref'(322876 '_wide_get_locale'(322867 call locDoms localeIdx))))
              {
                { scopeless
                  (322873 call chpl__delete(322871 call locDoms localeIdx))
                }
                (322985 call _downEndCount _coforallCount[322983] nil[44])
                (322884 'coforall on block' 0 tmp[322879])
              }
            }
          }
          label _continueLabel[322995]
          _indexOfInterest[322990]
          _iterator[322991]
        }
        label _breakLabel[322996]
        Defer
        {
          {
            (323027 call _endCountFree _coforallCount[322983])
          }
        }
        (323032 call _waitEndCount _coforallCount[322983] 0)
      }
    }
  }
  function _unknown[51].dsiMember[323069](arg _mt[323074]:_MT[238], arg this[323071] :
  BlockDom, arg i[323067]:_any[178](?)) : _unknown[51] "method"
  {
    (323083 return(323082 call(323077 call . whole c"contains") i))
  }
  function _unknown[51].dsiIndexOrder[323093](arg _mt[323098]:_MT[238], arg this[323095] :
  BlockDom, arg i[323091]:_any[178](?)) : _unknown[51] "method"
  {
    (323107 return(323106 call(323101 call . whole c"indexOrder") i))
  }
  function _unknown[51].contains[323117](arg _mt[323122]:_MT[238], arg this[323119] :
  LocBlockDom, arg i[323115]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (323131 return(323130 call(323125 call . myBlock c"contains") i))
    }
  }
  function _unknown[51].dsiDisplayRepresentation[323139](arg _mt[323144]:_MT[238], arg this[323141] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown _indexOfInterest[323252] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323253] "expr temp" "temp"
      (323262 'move' _iterator[323253](323260 call _getIterator(323151 call .(323148 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323279 call _freeIterator _iterator[323253])
        }
      }
      { scopeless type
        (323268 'move' _indexOfInterest[323252](323265 call iteratorIndex _iterator[323253]))
      }
      ForLoop[323254]
      {
        unknown tli[323272] "index var" "insert auto destroy"
        (323274 'move' tli[323272] _indexOfInterest[323252])
        {
          (323204 call writeln "locArr[" tli "].myElems = "(323200 for  e  in (323196 call .(323195 call locArr tli) c"myElems") do
          {
            e
          } ))
          if(323247 call _cond_test doRADOpt)
          {
            { scopeless
              (323245 call writeln "locArr[" tli "].locRAD = "(323242 call .(323238 call postfix!(323235 call .(323232 call locArr tli) c"locRAD")) c"RAD"))
            }
          }
        }
        label _continueLabel[323257]
        _indexOfInterest[323252]
        _iterator[323253]
      }
      label _breakLabel[323258]
    }
  }
  function _unknown[51].dsiGetBaseDom[323292](arg _mt[323297]:_MT[238], arg this[323294] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (323300 return dom)
    }
  }
  function _unknown[51].setupRADOpt[323308](arg _mt[323313]:_MT[238], arg this[323310] :
  BlockArr) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[323494] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323495] "expr temp" "temp"
      (323504 'move' _iterator[323495](323502 call _getIterator(323320 call .(323317 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323521 call _freeIterator _iterator[323495])
        }
      }
      { scopeless type
        (323510 'move' _indexOfInterest[323494](323507 call iteratorIndex _iterator[323495]))
      }
      ForLoop[323496]
      {
        unknown localeIdx[323514] "index var" "insert auto destroy"
        (323516 'move' localeIdx[323514] _indexOfInterest[323494])
        {
          { scopeless
            const tmp[323485] "const" "temp"
            (323487 'move' tmp[323485](323483 'deref'(323482 '_wide_get_locale'(323332 call(323327 call .(323324 call . dom c"dist") c"targetLocales") localeIdx))))
            {
              {
                { scopeless
                  const myLocArr[323337] "const"(323336 call locArr localeIdx)
                  (323340 'end of statement')
                }
                if(323366 call _cond_test(323347 call !=(323343 call . myLocArr c"locRAD") nil[44]))
                {
                  (323354 call chpl__delete(323350 call . myLocArr c"locRAD"))
                  (323363 call =(323359 call . myLocArr c"locRAD") nil[44])
                }
                if(323478 call _cond_test disableBlockLazyRAD)
                {
                  (323392 call =(323372 call . myLocArr c"locRAD")(323377 'new'(_chpl_manager = unmanaged[220](?))(323391 call LocRADCache eltType rank idxType stridable(323388 call .(323385 call . dom c"dist") c"targetLocDom"))))
                  {
                    unknown _indexOfInterest[323444] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[323445] "expr temp" "temp"
                    (323454 'move' _iterator[323445](323452 call _getIterator(323401 call .(323398 call . dom c"dist") c"targetLocDom")))
                    Defer
                    {
                      {
                        (323471 call _freeIterator _iterator[323445])
                      }
                    }
                    { scopeless type
                      (323460 'move' _indexOfInterest[323444](323457 call iteratorIndex _iterator[323445]))
                    }
                    ForLoop[323446]
                    {
                      unknown l[323464] "index var" "insert auto destroy"
                      (323466 'move' l[323464] _indexOfInterest[323444])
                      {
                        if(323439 call _cond_test(323406 call != l localeIdx))
                        {
                          (323435 call =(323419 call(323414 call .(323412 call postfix!(323409 call . myLocArr c"locRAD")) c"RAD") l)(323434 call(323430 call .(323427 call .(323424 call .(323423 call locArr l) c"myElems") c"_value") c"dsiGetRAD")))
                        }
                      }
                      label _continueLabel[323449]
                      _indexOfInterest[323444]
                      _iterator[323445]
                    }
                    label _breakLabel[323450]
                  }
                }
              }
              (323490 'on block' 0 tmp[323485])
            }
          }
        }
        label _continueLabel[323499]
        _indexOfInterest[323494]
        _iterator[323495]
      }
      label _breakLabel[323500]
    }
  }
  function _unknown[51].dsiElementInitializationComplete[323534](arg _mt[323539]:_MT[238], arg this[323536] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323579] "expr temp" "maybe ref" "no copy" "temp"
      (323582 'move' tmpIter[323579](323546 call .(323543 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[323738] "maybe param" "temp"
      (323753 'move' isRngDomArr[323738](323751 call ||(323740 call isBoundedRange tmpIter[323579])(323749 call ||(323743 call isDomain tmpIter[323579])(323746 call isArray tmpIter[323579]))))
      if isRngDomArr[323738]
      {
        const _coforallCount[323610] "const" "end count" "temp"
        (323675 'move' _coforallCount[323610](323672 call _endCountAlloc 0))
        unknown numTasks[323611] "temp"
        (323659 'move' numTasks[323611](323655 call . tmpIter[323579] c"size"))
        (323650 call _upEndCount _coforallCount[323610] 0 numTasks[323611])
        unknown _indexOfInterest[323617] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323618] "expr temp" "temp"
        (323627 'move' _iterator[323618](323625 call _getIterator tmpIter[323579]))
        Defer
        {
          {
            (323643 call _freeIterator _iterator[323618])
          }
        }
        { scopeless type
          (323632 'move' _indexOfInterest[323617](323629 call iteratorIndex _iterator[323618]))
        }
        ForLoop[323619]
        {
          unknown localeIdx[323636] "coforall index var" "index var" "insert auto destroy"
          (323638 'move' localeIdx[323636] _indexOfInterest[323617])
          { scopeless
            { scopeless
              const tmp[323585] "const" "temp"
              (323587 'move' tmp[323585](323589 'deref'(323590 '_wide_get_locale'(323592 call locArr localeIdx))))
              {
                {
                  (323608 call(323600 call .(323602 call .(323604 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323612 call _downEndCount _coforallCount[323610] nil[44])
                (323595 'coforall on block' 0 tmp[323585])
              }
            }
          }
          label _continueLabel[323622]
          _indexOfInterest[323617]
          _iterator[323618]
        }
        label _breakLabel[323623]
        Defer
        {
          {
            (323662 call _endCountFree _coforallCount[323610])
          }
        }
        (323667 call _waitEndCount _coforallCount[323610] 0 numTasks[323611])
      }
      {
        const _coforallCount[323679] "const" "end count" "temp"
        (323735 'move' _coforallCount[323679](323732 call _endCountAlloc 0))
        unknown _indexOfInterest[323686] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323687] "expr temp" "temp"
        (323696 'move' _iterator[323687](323694 call _getIterator tmpIter[323579]))
        Defer
        {
          {
            (323712 call _freeIterator _iterator[323687])
          }
        }
        { scopeless type
          (323701 'move' _indexOfInterest[323686](323698 call iteratorIndex _iterator[323687]))
        }
        ForLoop[323688]
        {
          unknown localeIdx[323705] "coforall index var" "index var" "insert auto destroy"
          (323707 'move' localeIdx[323705] _indexOfInterest[323686])
          (323719 call _upEndCount _coforallCount[323679] 0)
          { scopeless
            { scopeless
              const tmp[323570] "const" "temp"
              (323572 'move' tmp[323570](323568 'deref'(323567 '_wide_get_locale'(323552 call locArr localeIdx))))
              {
                {
                  (323564 call(323560 call .(323557 call .(323556 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
                }
                (323681 call _downEndCount _coforallCount[323679] nil[44])
                (323575 'coforall on block' 0 tmp[323570])
              }
            }
          }
          label _continueLabel[323691]
          _indexOfInterest[323686]
          _iterator[323687]
        }
        label _breakLabel[323692]
        Defer
        {
          {
            (323723 call _endCountFree _coforallCount[323679])
          }
        }
        (323728 call _waitEndCount _coforallCount[323679] 0)
      }
    }
  }
  function _unknown[51].dsiElementDeinitializationComplete[323763](arg _mt[323768]:_MT[238], arg this[323765] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[323808] "expr temp" "maybe ref" "no copy" "temp"
      (323811 'move' tmpIter[323808](323775 call .(323772 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[323967] "maybe param" "temp"
      (323982 'move' isRngDomArr[323967](323980 call ||(323969 call isBoundedRange tmpIter[323808])(323978 call ||(323972 call isDomain tmpIter[323808])(323975 call isArray tmpIter[323808]))))
      if isRngDomArr[323967]
      {
        const _coforallCount[323839] "const" "end count" "temp"
        (323904 'move' _coforallCount[323839](323901 call _endCountAlloc 0))
        unknown numTasks[323840] "temp"
        (323888 'move' numTasks[323840](323884 call . tmpIter[323808] c"size"))
        (323879 call _upEndCount _coforallCount[323839] 0 numTasks[323840])
        unknown _indexOfInterest[323846] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323847] "expr temp" "temp"
        (323856 'move' _iterator[323847](323854 call _getIterator tmpIter[323808]))
        Defer
        {
          {
            (323872 call _freeIterator _iterator[323847])
          }
        }
        { scopeless type
          (323861 'move' _indexOfInterest[323846](323858 call iteratorIndex _iterator[323847]))
        }
        ForLoop[323848]
        {
          unknown localeIdx[323865] "coforall index var" "index var" "insert auto destroy"
          (323867 'move' localeIdx[323865] _indexOfInterest[323846])
          { scopeless
            { scopeless
              const tmp[323814] "const" "temp"
              (323816 'move' tmp[323814](323818 'deref'(323819 '_wide_get_locale'(323821 call locArr localeIdx))))
              {
                {
                  (323837 call(323829 call .(323831 call .(323833 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (323841 call _downEndCount _coforallCount[323839] nil[44])
                (323824 'coforall on block' 0 tmp[323814])
              }
            }
          }
          label _continueLabel[323851]
          _indexOfInterest[323846]
          _iterator[323847]
        }
        label _breakLabel[323852]
        Defer
        {
          {
            (323891 call _endCountFree _coforallCount[323839])
          }
        }
        (323896 call _waitEndCount _coforallCount[323839] 0 numTasks[323840])
      }
      {
        const _coforallCount[323908] "const" "end count" "temp"
        (323964 'move' _coforallCount[323908](323961 call _endCountAlloc 0))
        unknown _indexOfInterest[323915] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323916] "expr temp" "temp"
        (323925 'move' _iterator[323916](323923 call _getIterator tmpIter[323808]))
        Defer
        {
          {
            (323941 call _freeIterator _iterator[323916])
          }
        }
        { scopeless type
          (323930 'move' _indexOfInterest[323915](323927 call iteratorIndex _iterator[323916]))
        }
        ForLoop[323917]
        {
          unknown localeIdx[323934] "coforall index var" "index var" "insert auto destroy"
          (323936 'move' localeIdx[323934] _indexOfInterest[323915])
          (323948 call _upEndCount _coforallCount[323908] 0)
          { scopeless
            { scopeless
              const tmp[323799] "const" "temp"
              (323801 'move' tmp[323799](323797 'deref'(323796 '_wide_get_locale'(323781 call locArr localeIdx))))
              {
                {
                  (323793 call(323789 call .(323786 call .(323785 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
                }
                (323910 call _downEndCount _coforallCount[323908] nil[44])
                (323804 'coforall on block' 0 tmp[323799])
              }
            }
          }
          label _continueLabel[323920]
          _indexOfInterest[323915]
          _iterator[323916]
        }
        label _breakLabel[323921]
        Defer
        {
          {
            (323952 call _endCountFree _coforallCount[323908])
          }
        }
        (323957 call _waitEndCount _coforallCount[323908] 0)
      }
    }
  }
  function _unknown[51].dsiDestroyArr[323996](arg _mt[324001]:_MT[238], arg this[323998] :
  BlockArr, arg deinitElts[323993] :
  bool[10]) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[324065] "expr temp" "maybe ref" "no copy" "temp"
      (324068 'move' tmpIter[324065](324008 call .(324005 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324244] "maybe param" "temp"
      (324259 'move' isRngDomArr[324244](324257 call ||(324246 call isBoundedRange tmpIter[324065])(324255 call ||(324249 call isDomain tmpIter[324065])(324252 call isArray tmpIter[324065]))))
      if isRngDomArr[324244]
      {
        const _coforallCount[324116] "const" "end count" "temp"
        (324181 'move' _coforallCount[324116](324178 call _endCountAlloc 0))
        unknown numTasks[324117] "temp"
        (324165 'move' numTasks[324117](324161 call . tmpIter[324065] c"size"))
        (324156 call _upEndCount _coforallCount[324116] 0 numTasks[324117])
        unknown _indexOfInterest[324123] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324124] "expr temp" "temp"
        (324133 'move' _iterator[324124](324131 call _getIterator tmpIter[324065]))
        Defer
        {
          {
            (324149 call _freeIterator _iterator[324124])
          }
        }
        { scopeless type
          (324138 'move' _indexOfInterest[324123](324135 call iteratorIndex _iterator[324124]))
        }
        ForLoop[324125]
        {
          unknown localeIdx[324142] "coforall index var" "index var" "insert auto destroy"
          (324144 'move' localeIdx[324142] _indexOfInterest[324123])
          { scopeless
            { scopeless
              const tmp[324071] "const" "temp"
              (324073 'move' tmp[324071](324075 'deref'(324076 '_wide_get_locale'(324078 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324086](324088 call locArr localeIdx)
                    (324091 'end of statement')
                  }
                  if(324093 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324098 call _deinitElements(324100 call . arr c"myElems"))
                    }
                  }
                  (324111 call(324105 call .(324107 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324113 call chpl__delete arr)
                }
                (324118 call _downEndCount _coforallCount[324116] nil[44])
                (324081 'coforall on block' 0 tmp[324071])
              }
            }
          }
          label _continueLabel[324128]
          _indexOfInterest[324123]
          _iterator[324124]
        }
        label _breakLabel[324129]
        Defer
        {
          {
            (324168 call _endCountFree _coforallCount[324116])
          }
        }
        (324173 call _waitEndCount _coforallCount[324116] 0 numTasks[324117])
      }
      {
        const _coforallCount[324185] "const" "end count" "temp"
        (324241 'move' _coforallCount[324185](324238 call _endCountAlloc 0))
        unknown _indexOfInterest[324192] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324193] "expr temp" "temp"
        (324202 'move' _iterator[324193](324200 call _getIterator tmpIter[324065]))
        Defer
        {
          {
            (324218 call _freeIterator _iterator[324193])
          }
        }
        { scopeless type
          (324207 'move' _indexOfInterest[324192](324204 call iteratorIndex _iterator[324193]))
        }
        ForLoop[324194]
        {
          unknown localeIdx[324211] "coforall index var" "index var" "insert auto destroy"
          (324213 'move' localeIdx[324211] _indexOfInterest[324192])
          (324225 call _upEndCount _coforallCount[324185] 0)
          { scopeless
            { scopeless
              const tmp[324056] "const" "temp"
              (324058 'move' tmp[324056](324054 'deref'(324053 '_wide_get_locale'(324014 call locArr localeIdx))))
              {
                {
                  { scopeless
                    unknown arr[324019](324018 call locArr localeIdx)
                    (324022 'end of statement')
                  }
                  if(324033 call _cond_test deinitElts)
                  {
                    { scopeless
                      (324031 call _deinitElements(324027 call . arr c"myElems"))
                    }
                  }
                  (324046 call(324042 call .(324039 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                  (324050 call chpl__delete arr)
                }
                (324187 call _downEndCount _coforallCount[324185] nil[44])
                (324061 'coforall on block' 0 tmp[324056])
              }
            }
          }
          label _continueLabel[324197]
          _indexOfInterest[324192]
          _iterator[324193]
        }
        label _breakLabel[324198]
        Defer
        {
          {
            (324229 call _endCountFree _coforallCount[324185])
          }
        }
        (324234 call _waitEndCount _coforallCount[324185] 0)
      }
    }
  }
  function _unknown[51].dsiLocalAccess[324276](arg _mt[324281]:_MT[238], arg this[324278] :
  BlockArr, arg i[324273] :
  (324271 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    (324295 return(324294 call(324289 call .(324286 call _to_nonnil myLocArr) c"this") i))
  }
  function _unknown[51].dsiAccess[324310](arg _mt[324315]:_MT[238], arg this[324312] :
  BlockArr, const in arg idx[324307] :
  (324305 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    {
      {
        if(324348 call _cond_test(324334 call &&(324319 call != myLocArr nil[44])(324333 call(324328 call .(324325 call .(324324 call _to_nonnil myLocArr) c"locDom") c"contains") idx)))
        {
          { scopeless
            (324346 return(324345 call(324340 call .(324339 call _to_nonnil myLocArr) c"this") idx))
          }
        }
      }
      (324356 'local block')
    }
    (324362 return(324361 call nonLocalAccess idx))
  }
  function _unknown[51].dsiBoundsCheck[324376](arg _mt[324381]:_MT[238], arg this[324378] :
  BlockArr, arg i[324373] :
  (324371 call * rank idxType)) : _unknown[51] "inline" "method"
  {
    (324390 return(324389 call(324384 call . dom c"dsiMember") i))
  }
  function _unknown[51].nonLocalAccess[324405](arg _mt[324410]:_MT[238], arg this[324407] :
  BlockArr, arg i[324402] :
  (324400 call * rank idxType)) ref : _unknown[51] "method" "fn unordered safe"
  {
    if(324698 call _cond_test doRADOpt)
    {
      if(324693 call _cond_test(324416 call . this c"myLocArr"))
      {
        { scopeless
          const myLocArr[324426] "const"(324425 call _to_nonnil(324421 call . this c"myLocArr"))
          (324429 'end of statement')
        }
        { scopeless
          unknown rlocIdx[324443](324442 call(324437 call .(324432 call . dom c"dist") c"targetLocsIdx") i)
          (324446 'end of statement')
        }
        if(324629 call _cond_test(324448 call ! disableBlockLazyRAD))
        {
          if(324532 call _cond_test(324455 call ==(324451 call . myLocArr c"locRAD") nil[44]))
          {
            (324467 call(324463 call .(324460 call . myLocArr c"locRADLock") c"lock"))
            if(324518 call _cond_test(324475 call ==(324471 call . myLocArr c"locRAD") nil[44]))
            {
              { scopeless
                unknown tempLocRAD[324494](324479 'new'(_chpl_manager = unmanaged[220](?))(324493 call LocRADCache eltType rank idxType stridable(324490 call .(324487 call . dom c"dist") c"targetLocDom")))
                (324497 'end of statement')
              }
              (324507 call =(324503 call .(324500 call . tempLocRAD c"RAD") c"blk") SENTINEL)
              (324515 call =(324511 call . myLocArr c"locRAD") tempLocRAD)
            }
            (324530 call(324526 call .(324523 call . myLocArr c"locRADLock") c"unlock"))
          }
          { scopeless
            const locRAD[324544] "const"(324543 call _to_nonnil(324539 call . myLocArr c"locRAD"))
            (324547 'end of statement')
          }
          if(324625 call _cond_test(324559 call ==(324555 call .(324554 call(324549 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
          {
            (324569 call(324564 call . locRAD c"lockRAD") rlocIdx)
            if(324611 call _cond_test(324583 call ==(324579 call .(324578 call(324573 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
            {
              (324607 call =(324591 call(324586 call . locRAD c"RAD") rlocIdx)(324606 call(324602 call .(324599 call .(324596 call .(324595 call locArr rlocIdx) c"myElems") c"_value") c"dsiGetRAD")))
            }
            (324623 call(324618 call . locRAD c"unlockRAD") rlocIdx)
          }
        }
        { scopeless
          unknown myLocRAD[324637] "no auto destroy" "no copy"(324634 call . myLocArr c"locRAD")
          (324640 'end of statement')
        }
        { scopeless
          unknown radata[324648] "no auto destroy" "no copy"(324645 call .(324644 call _to_nonnil myLocRAD) c"RAD")
          (324651 'end of statement')
        }
        if(324689 call _cond_test(324660 call !=(324656 call .(324655 call radata rlocIdx) c"shiftedData") nil[44]))
        {
          { scopeless
            unknown dataIdx[324672](324671 call(324666 call .(324665 call radata rlocIdx) c"getDataIndex") i)
            (324675 'end of statement')
          }
          (324687 return(324686 call(324681 call .(324680 call radata rlocIdx) c"getDataElem") dataIdx))
        }
      }
    }
    (324719 return(324718 call(324715 call locArr(324713 call(324708 call .(324705 call . dom c"dist") c"targetLocsIdx") i)) i))
  }
  function _unknown[51].dsiAccess[324732](arg _mt[324737]:_MT[238], arg this[324734] :
  BlockArr, arg i[324728] ... :
  idxType) ref : _unknown[51] "method"
  {
    { scopeless
      (324743 return(324742 call dsiAccess i))
    }
  }
  function _unknown[51].these[324751](arg _mt[324756]:_MT[238], arg this[324753] :
  BlockArr) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[324766] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324767] "expr temp" "temp"
      (324776 'move' _iterator[324767](324774 call _getIterator dom))
      Defer
      {
        {
          (324792 call _freeIterator _iterator[324767])
        }
      }
      { scopeless type
        (324781 'move' _indexOfInterest[324766](324778 call iteratorIndex _iterator[324767]))
      }
      ForLoop[324768]
      {
        unknown i[324785] "index var" "insert auto destroy"
        (324787 'move' i[324785] _indexOfInterest[324766])
        { scopeless
          (324764 yield(324763 call dsiAccess i))
        }
        label _continueLabel[324771]
        _indexOfInterest[324766]
        _iterator[324767]
      }
      label _breakLabel[324772]
    }
  }
  function _unknown[51].these[324809](arg _mt[324814]:_MT[238], arg this[324811] :
  BlockArr, param arg tag[324806] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[324834] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324835] "expr temp" "temp"
      (324844 'move' _iterator[324835](324842 call _getIterator(324830 call(324825 call . dom c"these") tag)))
      Defer
      {
        {
          (324861 call _freeIterator _iterator[324835])
        }
      }
      { scopeless type
        (324850 'move' _indexOfInterest[324834](324847 call iteratorIndex _iterator[324835]))
      }
      ForLoop[324836]
      {
        unknown followThis[324854] "index var" "insert auto destroy"
        (324856 'move' followThis[324854] _indexOfInterest[324834])
        { scopeless
          (324832 yield followThis)
        }
        label _continueLabel[324839]
        _indexOfInterest[324834]
        _iterator[324835]
      }
      label _breakLabel[324840]
    }
  }
  where {
    (324821 call == tag(324818 call . iterKind c"leader"))
  }
  function _unknown[51].dsiStaticFastFollowCheck[324877](arg _mt[324882]:_MT[238], arg this[324879] :
  BlockArr, arg leadType[324875]:_any[178](?)) param : _unknown[51] "method" "method overrides"
  {
    if(324935 call _cond_test(324888 call isSubtype leadType BlockArr))
    {
      { scopeless
        unknown x[324891](324890 'to nilable class from type' leadType)
        (324894 'end of statement')
      }
      (324916 return(324914 call ==(324905 call _to_borrowed(324903 'typeof'(324900 call .(324898 call postfix! x) c"dom")))(324913 call _to_borrowed(324911 'typeof'(324908 call . this c"dom")))))
    }
    {
      (324932 return(324930 call ==(324921 call _to_borrowed leadType)(324929 call _to_borrowed(324927 'typeof'(324924 call . this c"dom")))))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[324951](arg _mt[324956]:_MT[238], arg this[324953] :
  BlockArr, arg lead[324948] :
  (324945 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method"
  {
    { scopeless
      (324968 return(324967 call(324959 call . this c"dsiDynamicFastFollowCheck")(324963 call . lead c"_dom")))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[324980](arg _mt[324985]:_MT[238], arg this[324982] :
  BlockArr, arg lead[324977] :
  _domain) : _unknown[51] "method"
  {
    (325021 return(325019 call &&(325002 call(324991 call .(324988 call . lead c"dist") c"dsiEqualDMaps")(324998 call .(324995 call . this c"dom") c"dist"))(325017 call ==(325007 call .(325004 call . lead c"_value") c"whole")(325014 call .(325011 call . this c"dom") c"whole"))))
  }
  function _unknown[51].these[325033](arg _mt[325046]:_MT[238], arg this[325043] :
  BlockArr, param arg tag[325030] :
  iterKind, arg followThis[325035]:_any[178](?), param arg fast[325039] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[325059](arg rangeTuple[325057]:_any[178](?), param arg i[325063] :
    int[13] =
    0) param : _unknown[51]
    {
      { scopeless
        (325104 return(325101 IfExpr (325075 call == i(325073 call -(325069 call . rangeTuple c"size") 1)) then
        { scopeless
          (325081 call .(325080 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (325099 call ||(325088 call .(325087 call rangeTuple i) c"stridable")(325098 call anyStridable rangeTuple(325096 call + i 1)))
        } ))
      }
    }
    if(325163 call _cond_test chpl__testParFlag)
    {
      if(325156 call _cond_test fast)
      {
        { scopeless
          (325132 call chpl__testParWriteln "Block array fast follower invoked on " followThis)
        }
      }
      {
        { scopeless
          (325154 call chpl__testParWriteln "Block array non-fast follower invoked on " followThis)
        }
      }
    }
    if(325227 call _cond_test testFastFollowerOptimization)
    {
      { scopeless
        (325225 call writeln(325222 call +(325202 IfExpr  fast then
        { scopeless
          "fast"
        } else
        { scopeless
          "regular"
        } ) " follower invoked for Block array"))
      }
    }
    { scopeless
      unknown myFollowThis[325248](325246 call * rank(325245 call range(idxType = idxType)(stridable =(325242 call || stridable(325241 call anyStridable followThis)))))
      (325251 'end of statement')
    }
    { scopeless
      unknown lowIdx[325256](325254 call * rank idxType)
      (325259 'end of statement')
    }
    {
      unknown i[325387] 0
      unknown tmp[325388] "maybe param" "temp"
      (325400 'move' tmp[325388](325398 call chpl_compute_low_param_loop_bound 0(325263 call - rank 1)))
      unknown tmp[325389] "maybe param" "temp"
      (325410 'move' tmp[325389](325408 call chpl_compute_high_param_loop_bound 0(325405 call - rank 1)))
      unknown tmp[325390] "maybe param" "temp"
      (325413 'move' tmp[325390] 1)
      ParamForLoop[325415]
      { i[325387] tmp[325388] tmp[325389] tmp[325390]
        {
          { scopeless
            unknown stride[325280](325277 call .(325276 call(325271 call .(325268 call . dom c"whole") c"dim") i) c"stride")
            (325283 'end of statement')
          }
          { scopeless
            unknown low[325301](325299 call *(325289 call .(325288 call followThis i) c"low")(325297 call _cast idxType(325295 call abs stride)))
            (325304 'end of statement')
          }
          { scopeless
            unknown high[325321](325319 call *(325309 call .(325308 call followThis i) c"high")(325317 call _cast idxType(325315 call abs stride)))
            (325324 'end of statement')
          }
          (325370 call =(325328 call myFollowThis i)(325369 call(325360 call .(325358 call chpl_by(325349 call +(325334 call chpl_by(325331 call chpl_build_bounded_range low high) stride)(325346 call .(325345 call(325340 call .(325337 call . dom c"whole") c"dim") i) c"alignedLow"))(325355 call .(325354 call followThis i) c"stride")) c"safeCast")(325367 'typeof'(325366 call myFollowThis i))))
          (325384 call =(325376 call lowIdx i)(325381 call .(325380 call myFollowThis i) c"low"))
        }
      }
      label _unused_continueLabel[325392]
      label _breakLabel[325391]
    }
    { scopeless
      const myFollowThisDom[325429] "const"(325427 call chpl__buildDomainExpr(325425 'expand_tuple' myFollowThis))
      (325432 'end of statement')
    }
    if(325588 call _cond_test fast)
    {
      { scopeless
        unknown arrSection[325447](325446 call locArr(325444 call(325439 call .(325436 call . dom c"dist") c"targetLocsIdx") lowIdx))
        (325450 'end of statement')
      }
      if(325471 call _cond_test(325461 call !=(325456 '_wide_get_node' arrSection)(325458 call . here c"id")))
      {
        { scopeless
          (325468 call = arrSection(325467 call _to_nonnil myLocArr))
        }
      }
      {
        {
          { scopeless
            const narrowArrSection[325485] "const"(325483 call _cast(325482 'to nilable class from type'(325481 'typeof' arrSection))(325479 '_wide_get_addr' arrSection))
            (325488 'end of statement')
          }
          { scopeless
            unknown myElems[325497] "ref var"(325494 call .(325493 call _to_nonnil narrowArrSection) c"myElems")
            (325500 'end of statement')
          }
          {
            unknown _indexOfInterest[325509] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[325510] "expr temp" "temp"
            (325519 'move' _iterator[325510](325517 call _getIterator myFollowThisDom))
            Defer
            {
              {
                (325535 call _freeIterator _iterator[325510])
              }
            }
            { scopeless type
              (325524 'move' _indexOfInterest[325509](325521 call iteratorIndex _iterator[325510]))
            }
            ForLoop[325511]
            {
              unknown i[325528] "index var" "insert auto destroy"
              (325530 'move' i[325528] _indexOfInterest[325509])
              { scopeless
                (325507 yield(325506 call myElems i))
              }
              label _continueLabel[325514]
              _indexOfInterest[325509]
              _iterator[325510]
            }
            label _breakLabel[325515]
          }
        }
        (325544 'local block')
      }
    }
    {
      {
        unknown _indexOfInterest[325554] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325555] "expr temp" "temp"
        (325564 'move' _iterator[325555](325562 call _getIterator myFollowThisDom))
        Defer
        {
          {
            (325580 call _freeIterator _iterator[325555])
          }
        }
        { scopeless type
          (325569 'move' _indexOfInterest[325554](325566 call iteratorIndex _iterator[325555]))
        }
        ForLoop[325556]
        {
          unknown i[325573] "index var" "insert auto destroy"
          (325575 'move' i[325573] _indexOfInterest[325554])
          {
            (325551 yield(325550 call dsiAccess i))
          }
          label _continueLabel[325559]
          _indexOfInterest[325554]
          _iterator[325555]
        }
        label _breakLabel[325560]
      }
    }
  }
  where {
    (325053 call == tag(325050 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialRead[325600](arg _mt[325605]:_MT[238], arg this[325602] :
  BlockArr, arg f[325598]:_any[178](?)) : _unknown[51] "method"
  {
    (325611 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiSerialWrite[325621](arg _mt[325626]:_MT[238], arg this[325623] :
  BlockArr, arg f[325619]:_any[178](?)) : _unknown[51] "method"
  {
    (325632 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiLocalSlice[325642](arg _mt[325647]:_MT[238], arg this[325644] :
  BlockArr, arg ranges[325640]:_any[178](?)) : _unknown[51] "method" "no copy return"
  {
    { scopeless
      unknown low[325653](325651 call * rank idxType)
      (325656 'end of statement')
    }
    {
      unknown i[325680] 0
      unknown tmp[325681] "maybe param" "temp"
      (325693 'move' tmp[325681](325691 call chpl_compute_low_param_loop_bound 0(325661 call - rank 1)))
      unknown tmp[325682] "maybe param" "temp"
      (325703 'move' tmp[325682](325701 call chpl_compute_high_param_loop_bound 0(325698 call - rank 1)))
      unknown tmp[325683] "maybe param" "temp"
      (325706 'move' tmp[325683] 1)
      ParamForLoop[325708]
      { i[325680] tmp[325681] tmp[325682] tmp[325683]
        {
          (325676 call =(325668 call low i)(325673 call .(325672 call ranges i) c"alignedLow"))
        }
      }
      label _unused_continueLabel[325685]
      label _breakLabel[325684]
    }
    (325737 return(325736 call(325730 call .(325729 call locArr(325727 call(325722 call .(325719 call . dom c"dist") c"targetLocsIdx") low)) c"myElems")(325734 'expand_tuple' ranges)))
  }
  function _extendTuple[325745](arg t[325743]:_any[178](?), arg idx[325748] :
  _tuple, arg args[325751]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[325760](325758 call *(325754 call . args c"size") t)
      (325763 'end of statement')
    }
    { scopeless
      unknown j[325767] 1 int[13]
      (325770 'end of statement')
    }
    {
      unknown i[325822] 0
      unknown tmp[325823] "maybe param" "temp"
      (325835 'move' tmp[325823](325833 call chpl_compute_low_param_loop_bound 0(325777 call -(325773 call . args c"size") 1)))
      unknown tmp[325824] "maybe param" "temp"
      (325848 'move' tmp[325824](325846 call chpl_compute_high_param_loop_bound 0(325840 call -(325842 call . args c"size") 1)))
      unknown tmp[325825] "maybe param" "temp"
      (325851 'move' tmp[325825] 1)
      ParamForLoop[325853]
      { i[325822] tmp[325823] tmp[325824] tmp[325825]
        {
          if(325816 call _cond_test(325787 call isCollapsedDimension(325785 call args i)))
          {
            { scopeless
              (325796 call =(325791 call tup i)(325795 call args i))
            }
          }
          {
            (325807 call =(325802 call tup i)(325806 call idx j))
            (325813 call += j 1)
          }
        }
      }
      label _unused_continueLabel[325827]
      label _breakLabel[325826]
    }
    (325863 return tup)
  }
  function _extendTuple[325871](arg t[325869]:_any[178](?), arg idx[325873]:_any[178](?), arg args[325875]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[325884](325882 call *(325878 call . args c"size") t)
      (325887 'end of statement')
    }
    { scopeless
      unknown idxTup[325892](325890 call _build_tuple idx)
      (325895 'end of statement')
    }
    { scopeless
      unknown j[325898] 1 int[13]
      (325901 'end of statement')
    }
    {
      unknown i[325953] 0
      unknown tmp[325954] "maybe param" "temp"
      (325966 'move' tmp[325954](325964 call chpl_compute_low_param_loop_bound 0(325908 call -(325904 call . args c"size") 1)))
      unknown tmp[325955] "maybe param" "temp"
      (325979 'move' tmp[325955](325977 call chpl_compute_high_param_loop_bound 0(325971 call -(325973 call . args c"size") 1)))
      unknown tmp[325956] "maybe param" "temp"
      (325982 'move' tmp[325956] 1)
      ParamForLoop[325984]
      { i[325953] tmp[325954] tmp[325955] tmp[325956]
        {
          if(325947 call _cond_test(325918 call isCollapsedDimension(325916 call args i)))
          {
            { scopeless
              (325927 call =(325922 call tup i)(325926 call args i))
            }
          }
          {
            (325938 call =(325933 call tup i)(325937 call idxTup j))
            (325944 call += j 1)
          }
        }
      }
      label _unused_continueLabel[325958]
      label _breakLabel[325957]
    }
    (325994 return tup)
  }
  function _unknown[51].dsiReallocate[326016](arg _mt[326021]:_MT[238], arg this[326018] :
  BlockArr, arg bounds[326013] :
  (326011 call * rank(326010 call range idxType(326006 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiPostReallocate[326029](arg _mt[326034]:_MT[238], arg this[326031] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    if(326041 call _cond_test doRADOpt)
    {
      { scopeless
        (326039 call setupRADOpt)
      }
    }
  }
  function _unknown[51].setRADOpt[326056](arg _mt[326061]:_MT[238], arg this[326058] :
  BlockArr, arg val[326053] =
  1) : _unknown[51] "method"
  {
    (326065 call = doRADOpt val)
    if(326074 call _cond_test doRADOpt)
    {
      { scopeless
        (326072 call setupRADOpt)
      }
    }
  }
  function _unknown[51].this[326086](arg _mt[326091]:_MT[238], arg this[326088] :
  LocBlockArr, arg i[326084]:_any[178](?)) ref : _unknown[51] "inline" "method"
  {
    (326097 return(326096 call myElems i))
  }
  function _unknown[51].dsiSupportsAutoLocalAccess[326105](arg _mt[326110]:_MT[238], arg this[326107] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    (326113 return 1)
  }
  function _unknown[51].init[326125](arg _mt[326153]:_MT[238], arg this[326150] :
  Block, arg other[326122] :
  Block, arg privateData[326127]:_any[178](?), param arg rank[326133] =
  (326130 call . other c"rank"), arg idxType[326140]:_any[178](?) =
  (326137 call . other c"idxType"), arg sparseLayoutType[326147]:_any[178](?) =
  (326144 call . other c"sparseLayoutType")) : _unknown[51] "method"
  {
    (326160 call =(326156 call . this c"rank") rank)
    (326169 call =(326165 call . this c"idxType") idxType)
    (326181 call = boundingBox(326179 call chpl__buildDomainExpr(326177 'expand_tuple'(326176 call privateData 0))))
    (326193 call = targetLocDom(326191 call chpl__buildDomainExpr(326189 'expand_tuple'(326188 call privateData 1))))
    (326201 call = targetLocales(326198 call . other c"targetLocales"))
    (326209 call = locDist(326206 call . other c"locDist"))
    (326217 call = dataParTasksPerLocale(326216 call privateData 2))
    (326225 call = dataParIgnoreRunningTasks(326224 call privateData 3))
    (326233 call = dataParMinGranularity(326232 call privateData 4))
    (326241 call =(326237 call . this c"sparseLayoutType") sparseLayoutType)
  }
  function _unknown[51].dsiSupportsPrivatization[326249](arg _mt[326254]:_MT[238], arg this[326251] :
  Block) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326257 return 1)
    }
  }
  function _unknown[51].dsiGetPrivatizeData[326265](arg _mt[326270]:_MT[238], arg this[326267] :
  Block) : _unknown[51] "method"
  {
    (326290 return(326288 call _build_tuple(326277 call(326273 call . boundingBox c"dims"))(326283 call(326279 call . targetLocDom c"dims")) dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity))
  }
  function _unknown[51].dsiPrivatize[326300](arg _mt[326305]:_MT[238], arg this[326302] :
  Block, arg privatizeData[326298]:_any[178](?)) : _unknown[51] "method"
  {
    (326318 return(326309 'new'(_chpl_manager = unmanaged[220](?))(326317 call Block(326314 call _to_unmanaged this) privatizeData)))
  }
  function _unknown[51].dsiGetReprivatizeData[326326](arg _mt[326331]:_MT[238], arg this[326328] :
  Block) : _unknown[51] "method"
  {
    { scopeless
      (326339 return(326338 call(326334 call . boundingBox c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326349](arg _mt[326356]:_MT[238], arg this[326353] :
  Block, arg other[326347]:_any[178](?), arg reprivatizeData[326351]:_any[178](?)) : _unknown[51] "method"
  {
    (326364 call = boundingBox(326362 call chpl__buildDomainExpr(326360 'expand_tuple' reprivatizeData)))
    (326373 call = targetLocDom(326370 call . other c"targetLocDom"))
    (326381 call = targetLocales(326378 call . other c"targetLocales"))
    (326389 call = locDist(326386 call . other c"locDist"))
    (326397 call = dataParTasksPerLocale(326394 call . other c"dataParTasksPerLocale"))
    (326405 call = dataParIgnoreRunningTasks(326402 call . other c"dataParIgnoreRunningTasks"))
    (326413 call = dataParMinGranularity(326410 call . other c"dataParMinGranularity"))
  }
  function _unknown[51].chpl__serialize[326421](arg _mt[326426]:_MT[238], arg this[326423] :
  BlockDom) : _unknown[51] "method"
  {
    (326429 return pid)
  }
  function _unknown[51].chpl__deserialize[326439](arg _mt[326444]:_MT[238], arg this[326441] :
  BlockDom, arg data[326437]:_any[178](?)) : _unknown[51] "method"
  {
    (326474 return(326473 call chpl_getPrivatizedCopy(326470 'to unmanaged class from unknown'(326469 call BlockDom(rank =(326449 call . this c"rank"))(idxType =(326455 call . this c"idxType"))(stridable =(326460 call . this c"stridable"))(sparseLayoutType =(326465 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326482](arg _mt[326487]:_MT[238], arg this[326484] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326490 return 1)
    }
  }
  type BlockDomPrvData[326509](?) unknown distpid[326496] unknown dims[326500] unknown locdoms[326504]
  function _unknown[51].dsiGetPrivatizeData[326515](arg _mt[326520]:_MT[238], arg this[326517] :
  BlockDom) : _unknown[51] "method"
  {
    (326537 return(326522 'new'(326536 call BlockDomPrvData(326525 call . dist c"pid")(326534 call(326530 call . whole c"dims")) locDoms)))
  }
  function _unknown[51].dsiPrivatize[326547](arg _mt[326552]:_MT[238], arg this[326549] :
  BlockDom, arg privatizeData[326545]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdist[326565](326564 call chpl_getPrivatizedCopy(326556 'typeof' dist)(326561 call . privatizeData c"distpid"))
      (326568 'end of statement')
    }
    { scopeless
      unknown locDomsTemp[326592](326589 call . privatizeData c"locdoms")(326584 call chpl__buildArrayRuntimeType(326582 call chpl__ensureDomainExpr(326571 call . privdist c"targetLocDom"))(326581 'to unmanaged class from unknown'(326580 call LocBlockDom rank idxType stridable)))
      (326595 'end of statement')
    }
    { scopeless
      const c[326619] "const"(326598 'new'(_chpl_manager = unmanaged[220](?))(326618 call BlockDom rank idxType stridable(326605 call . privdist c"sparseLayoutType") privdist locDomsTemp(326616 call chpl__buildDomainExpr(326614 'expand_tuple'(326611 call . privatizeData c"dims")))))
      (326622 'end of statement')
    }
    (326624 return c)
  }
  function _unknown[51].dsiGetReprivatizeData[326631](arg _mt[326636]:_MT[238], arg this[326633] :
  BlockDom) : _unknown[51] "method"
  {
    { scopeless
      (326644 return(326643 call(326639 call . whole c"dims")))
    }
  }
  function _unknown[51].dsiReprivatize[326654](arg _mt[326661]:_MT[238], arg this[326658] :
  BlockDom, arg other[326652]:_any[178](?), arg reprivatizeData[326656]:_any[178](?)) : _unknown[51] "method"
  {
    (326670 call = locDoms(326667 call . other c"locDoms"))
    (326680 call = whole(326678 call chpl__buildDomainExpr(326676 'expand_tuple' reprivatizeData)))
  }
  function _unknown[51].chpl__serialize[326688](arg _mt[326693]:_MT[238], arg this[326690] :
  BlockArr) : _unknown[51] "method"
  {
    (326696 return pid)
  }
  function _unknown[51].chpl__deserialize[326706](arg _mt[326711]:_MT[238], arg this[326708] :
  BlockArr, arg data[326704]:_any[178](?)) : _unknown[51] "method"
  {
    (326746 return(326745 call chpl_getPrivatizedCopy(326742 'to unmanaged class from unknown'(326741 call BlockArr(rank =(326716 call . this c"rank"))(idxType =(326722 call . this c"idxType"))(stridable =(326727 call . this c"stridable"))(eltType =(326732 call . this c"eltType"))(sparseLayoutType =(326737 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326754](arg _mt[326759]:_MT[238], arg this[326756] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (326762 return 1)
    }
  }
  type BlockArrPrvData[326777](?) unknown dompid[326768] unknown locarr[326772]
  function _unknown[51].dsiGetPrivatizeData[326783](arg _mt[326788]:_MT[238], arg this[326785] :
  BlockArr) : _unknown[51] "method"
  {
    (326799 return(326790 'new'(326798 call BlockArrPrvData(326793 call . dom c"pid") locArr)))
  }
  function _unknown[51].dsiPrivatize[326809](arg _mt[326814]:_MT[238], arg this[326811] :
  BlockArr, arg privatizeData[326807]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown privdom[326827](326826 call chpl_getPrivatizedCopy(326818 'typeof' dom)(326823 call . privatizeData c"dompid"))
      (326830 'end of statement')
    }
    { scopeless
      unknown locArrTemp[326858](326855 call . privatizeData c"locarr")(326850 call chpl__buildArrayRuntimeType(326848 call chpl__ensureDomainExpr(326836 call .(326833 call . privdom c"dist") c"targetLocDom"))(326847 'to unmanaged class from unknown'(326846 call LocBlockArr eltType rank idxType stridable)))
      (326861 'end of statement')
    }
    { scopeless
      unknown myLocArrTemp[326871](326870 'to unmanaged class from unknown'(326869 'to nilable class from type'(326868 call LocBlockArr eltType rank idxType stridable)))
      (326874 'end of statement')
    }
    {
      unknown _indexOfInterest[326910] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[326911] "expr temp" "temp"
      (326920 'move' _iterator[326911](326918 call _getIterator(326880 call .(326877 call . privdom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (326937 call _freeIterator _iterator[326911])
        }
      }
      { scopeless type
        (326926 'move' _indexOfInterest[326910](326923 call iteratorIndex _iterator[326911]))
      }
      ForLoop[326912]
      {
        unknown localeIdx[326930] "index var" "insert auto destroy"
        (326932 'move' localeIdx[326930] _indexOfInterest[326910])
        { scopeless
          if(326905 call _cond_test(326895 call ==(326890 '_wide_get_node'(326886 call locArrTemp localeIdx))(326892 call . here c"id")))
          {
            { scopeless
              (326902 call = myLocArrTemp(326901 call locArrTemp localeIdx))
            }
          }
        }
        label _continueLabel[326915]
        _indexOfInterest[326910]
        _iterator[326911]
      }
      label _breakLabel[326916]
    }
    { scopeless
      const c[326966] "const"(326946 'new'(_chpl_manager = unmanaged[220](?))(326965 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom = privdom)(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
      (326969 'end of statement')
    }
    (326971 return c)
  }
  function _unknown[51].dsiTargetLocales[326978](arg _mt[326983]:_MT[238], arg this[326980] :
  BlockArr) : _unknown[51] "method"
  {
    (326992 return(326989 call .(326986 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327000](arg _mt[327005]:_MT[238], arg this[327002] :
  BlockDom) : _unknown[51] "method"
  {
    (327011 return(327008 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327019](arg _mt[327024]:_MT[238], arg this[327021] :
  Block) : _unknown[51] "method"
  {
    (327027 return targetLocales)
  }
  function _unknown[51].chpl__locToLocIdx[327039](arg _mt[327044]:_MT[238], arg this[327041] :
  Block, arg loc[327036] :
  locale[28]) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[327067] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327068] "expr temp" "temp"
      (327077 'move' _iterator[327068](327075 call _getIterator targetLocDom))
      Defer
      {
        {
          (327093 call _freeIterator _iterator[327068])
        }
      }
      { scopeless type
        (327082 'move' _indexOfInterest[327067](327079 call iteratorIndex _iterator[327068]))
      }
      ForLoop[327069]
      {
        unknown locIdx[327086] "index var" "insert auto destroy"
        (327088 'move' locIdx[327086] _indexOfInterest[327067])
        { scopeless
          if(327062 call _cond_test(327053 call ==(327051 call targetLocales locIdx) loc))
          {
            { scopeless
              (327060 return(327058 call _build_tuple 1 locIdx))
            }
          }
        }
        label _continueLabel[327072]
        _indexOfInterest[327067]
        _iterator[327068]
      }
      label _breakLabel[327073]
    }
    (327109 return(327107 call _build_tuple 0(327103 call . targetLocDom c"first")))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327116](arg _mt[327121]:_MT[238], arg this[327118] :
  BlockArr) param : _unknown[51] "method"
  {
    { scopeless
      (327124 return 1)
    }
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327132](arg _mt[327137]:_MT[238], arg this[327134] :
  BlockDom) param : _unknown[51] "method"
  {
    { scopeless
      (327140 return 1)
    }
  }
  function _unknown[51].dsiLocalSubdomain[327152](arg _mt[327157]:_MT[238], arg this[327154] :
  BlockArr, arg loc[327149] :
  locale[28]) : _unknown[51] "method"
  {
    if(327209 call _cond_test(327161 call == loc here))
    {
      if(327179 call _cond_test(327165 call != myLocArr nil[44]))
      {
        { scopeless
          (327177 return(327174 call .(327171 call .(327170 call _to_nonnil myLocArr) c"locDom") c"myBlock"))
        }
      }
      { scopeless
        unknown d[327192](327190 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327195 'end of statement')
      }
      (327197 return d)
    }
    {
      (327206 return(327205 call(327200 call . dom c"dsiLocalSubdomain") loc))
    }
  }
  function _unknown[51].dsiLocalSubdomain[327223](arg _mt[327228]:_MT[238], arg this[327225] :
  BlockDom, arg loc[327220] :
  locale[28]) : _unknown[51] "method"
  {
    { scopeless
      const tmp[327244] "const" "temp"(327243 call(327238 call . dist c"chpl__locToLocIdx") loc)
      (327251 call _check_tuple_var_decl tmp[327244] 2)
      const gotit[327230] "const"(327245 call tmp[327244] 0)
      const locid[327232] "const"(327248 call tmp[327244] 1)
      (327256 'end of statement')
    }
    if(327298 call _cond_test gotit)
    {
      { scopeless
        unknown inds[327271](327270 call chpl__computeBlock locid(327263 call . dist c"targetLocDom")(327267 call . dist c"boundingBox"))
        (327274 'end of statement')
      }
      (327281 return(327280 call whole(327278 'expand_tuple' inds)))
    }
    {
      { scopeless
        unknown d[327290](327288 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (327293 'end of statement')
      }
      (327296 return d)
    }
  }
  function _unknown[51].numRemoteElems[327309](arg _mt[327318]:_MT[238], arg this[327315] :
  BlockDom, arg viewDom[327307]:_any[178](?), arg rlo[327311]:_any[178](?), arg rid[327313]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      unknown blo[327320](327324 call . dist c"idxType")
      unknown bhi[327327](327331 'typeof' blo)
      (327332 'end of statement')
    }
    if(327470 call _cond_test(327354 call == rid(327352 call -(327348 call .(327347 call(327339 call .(327336 call . dist c"targetLocDom") c"dim")(327344 call - rank 1)) c"size") 1)))
    {
      { scopeless
        (327370 call = bhi(327367 call .(327366 call(327358 call . viewDom c"dim")(327363 call - rank 1)) c"high"))
      }
    }
    {
      (327466 call = bhi(327464 call -(327458 call +(327387 call .(327386 call(327378 call .(327375 call . dist c"boundingBox") c"dim")(327383 call - rank 1)) c"low")(327457 call intCeilXDivByY(327435 call *(327426 call +(327423 call -(327404 call .(327403 call(327395 call .(327392 call . dist c"boundingBox") c"dim")(327400 call - rank 1)) c"high")(327420 call .(327419 call(327411 call .(327408 call . dist c"boundingBox") c"dim")(327416 call - rank 1)) c"low")) 1)(327433 call _cast idxType(327430 call + rid 1)))(327455 call _cast idxType(327451 call .(327450 call(327442 call .(327439 call . dist c"targetLocDom") c"dim")(327447 call - rank 1)) c"size"))))(327462 call _cast idxType 1)))
    }
    (327485 return(327483 call - bhi(327481 call _cast idxType(327478 call - rlo 1))))
  }
  function canDoAnyToBlock[327493](arg Dest[327491]:_any[178](?), arg destDom[327495]:_any[178](?), arg Src[327497]:_any[178](?), arg srcDom[327499]:_any[178](?)) param : _unknown[51] "private"
  {
    if(327526 call _cond_test(327521 call &&(327509 call ==(327507 call(327503 call . Src c"doiCanBulkTransferRankChange")) 0)(327519 call !=(327512 call . Dest c"rank")(327516 call . Src c"rank"))))
    {
      { scopeless
        (327524 return 0)
      }
    }
    (327533 'use' Reflection)
    if(327572 call _cond_test(327566 call !(327565 call canResolveMethod Src "doiBulkTransferToKnown" srcDom(327561 call .(327558 call .(327557 call(327543 call . Dest c"locArr")(327553 call .(327550 call .(327547 call . Dest c"locArr") c"_dom") c"first")) c"myElems") c"_value") destDom)))
    {
      (327569 return 0)
    }
    (327579 return(327577 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[327589](arg _mt[327600]:_MT[238], arg this[327597] :
  BlockArr, arg srcDom[327587]:_any[178](?), arg destClass[327592] :
  BlockArr, arg destDom[327595]:_any[178](?)) : _unknown[51] "method"
  {
    (327632 call _doSimpleBlockTransfer destClass destDom this srcDom)
    (327636 return 1)
  }
  where {
    (327624 call &&(327619 call &&(327609 call ==(327604 call . this c"sparseLayoutType")(327608 'to unmanaged class from unknown' DefaultDist))(327617 call ==(327612 call . destClass c"sparseLayoutType")(327616 'to unmanaged class from unknown' DefaultDist)))(327622 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[327647](arg _mt[327658]:_MT[238], arg this[327655] :
  BlockArr, arg destDom[327645]:_any[178](?), arg srcClass[327650] :
  BlockArr, arg srcDom[327653]:_any[178](?)) : _unknown[51] "method"
  {
    (327690 call _doSimpleBlockTransfer this destDom srcClass srcDom)
    (327694 return 1)
  }
  where {
    (327682 call &&(327677 call &&(327667 call ==(327662 call . this c"sparseLayoutType")(327666 'to unmanaged class from unknown' DefaultDist))(327675 call ==(327670 call . srcClass c"sparseLayoutType")(327674 'to unmanaged class from unknown' DefaultDist)))(327680 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiSwap[327705](arg _mt[327710]:_MT[238], arg this[327707] :
  BlockArr, arg arr[327703]:_any[178](?)) : _unknown[51] "method"
  {
    {
      unknown tmpIter[327764] "expr temp" "maybe ref" "no copy" "temp"
      (327767 'move' tmpIter[327764](327726 call _build_tuple(327718 call . this c"locArr")(327723 call . arr c"locArr")))
      unknown isRngDomArr[327959] "maybe param" "temp"
      (327974 'move' isRngDomArr[327959](327972 call ||(327961 call isBoundedRange tmpIter[327764])(327970 call ||(327964 call isDomain tmpIter[327764])(327967 call isArray tmpIter[327764]))))
      if isRngDomArr[327959]
      {
        const _coforallCount[327803] "const" "end count" "temp"
        (327882 'move' _coforallCount[327803](327879 call _endCountAlloc 0))
        unknown numTasks[327804] "temp"
        (327866 'move' numTasks[327804](327862 call . tmpIter[327764] c"size"))
        (327857 call _upEndCount _coforallCount[327803] 0 numTasks[327804])
        unknown _indexOfInterest[327810] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327811] "expr temp" "temp"
        (327820 'move' _iterator[327811](327818 call _getIteratorZip tmpIter[327764]))
        Defer
        {
          {
            (327850 call _freeIterator _iterator[327811])
          }
        }
        { scopeless type
          (327825 'move' _indexOfInterest[327810](327822 call iteratorIndex _iterator[327811]))
        }
        ForLoop[327812]
        {
          (327830 call _check_tuple_var_decl _indexOfInterest[327810] 2)
          unknown locarr1[327836] "coforall index var" "index var" "insert auto destroy"
          (327838 'move' locarr1[327836](327834 call _indexOfInterest[327810] 0))
          unknown locarr2[327843] "coforall index var" "index var" "insert auto destroy"
          (327845 'move' locarr2[327843](327841 call _indexOfInterest[327810] 1))
          { scopeless
            { scopeless
              const tmp[327770] "const" "temp"
              (327772 'move' tmp[327770](327774 'deref'(327775 '_wide_get_locale' locarr1)))
              {
                {
                  (327783 call <=>(327785 call . locarr1 c"myElems")(327789 call . locarr2 c"myElems"))
                  (327793 call <=>(327795 call . locarr1 c"locRAD")(327799 call . locarr2 c"locRAD"))
                }
                (327805 call _downEndCount _coforallCount[327803] nil[44])
                (327778 'coforall on block' 0 tmp[327770])
              }
            }
          }
          label _continueLabel[327815]
          _indexOfInterest[327810]
          _iterator[327811]
        }
        label _breakLabel[327816]
        Defer
        {
          {
            (327869 call _endCountFree _coforallCount[327803])
          }
        }
        (327874 call _waitEndCount _coforallCount[327803] 0 numTasks[327804])
      }
      {
        const _coforallCount[327886] "const" "end count" "temp"
        (327956 'move' _coforallCount[327886](327953 call _endCountAlloc 0))
        unknown _indexOfInterest[327893] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327894] "expr temp" "temp"
        (327903 'move' _iterator[327894](327901 call _getIteratorZip tmpIter[327764]))
        Defer
        {
          {
            (327933 call _freeIterator _iterator[327894])
          }
        }
        { scopeless type
          (327908 'move' _indexOfInterest[327893](327905 call iteratorIndex _iterator[327894]))
        }
        ForLoop[327895]
        {
          (327913 call _check_tuple_var_decl _indexOfInterest[327893] 2)
          unknown locarr1[327919] "coforall index var" "index var" "insert auto destroy"
          (327921 'move' locarr1[327919](327917 call _indexOfInterest[327893] 0))
          unknown locarr2[327926] "coforall index var" "index var" "insert auto destroy"
          (327928 'move' locarr2[327926](327924 call _indexOfInterest[327893] 1))
          (327940 call _upEndCount _coforallCount[327886] 0)
          { scopeless
            { scopeless
              const tmp[327754] "const" "temp"
              (327756 'move' tmp[327754](327752 'deref'(327751 '_wide_get_locale' locarr1)))
              {
                {
                  (327736 call <=>(327729 call . locarr1 c"myElems")(327733 call . locarr2 c"myElems"))
                  (327748 call <=>(327741 call . locarr1 c"locRAD")(327745 call . locarr2 c"locRAD"))
                }
                (327888 call _downEndCount _coforallCount[327886] nil[44])
                (327759 'coforall on block' 0 tmp[327754])
              }
            }
          }
          label _continueLabel[327898]
          _indexOfInterest[327893]
          _iterator[327894]
        }
        label _breakLabel[327899]
        Defer
        {
          {
            (327944 call _endCountFree _coforallCount[327886])
          }
        }
        (327949 call _waitEndCount _coforallCount[327886] 0)
      }
    }
  }
  function _doSimpleBlockTransfer[327985](arg Dest[327983]:_any[178](?), arg destDom[327987]:_any[178](?), arg Src[327989]:_any[178](?), arg srcDom[327991]:_any[178](?)) : _unknown[51] "private"
  {
    if(328035 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328033 call writeln "In Block=Block Bulk Transfer: Dest[" destDom "] = Src[" srcDom "]")
      }
    }
    { scopeless
      const DestPID[328045] "const"(328042 call . Dest c"pid")
      (328048 'end of statement')
    }
    { scopeless
      const SrcPID[328053] "const"(328050 call . Src c"pid")
      (328056 'end of statement')
    }
    {
      unknown tmpIter[328312] "expr temp" "maybe ref" "no copy" "temp"
      (328315 'move' tmpIter[328312](328072 call(328067 call .(328062 call .(328059 call . Dest c"dom") c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[328647] "maybe param" "temp"
      (328662 'move' isRngDomArr[328647](328660 call ||(328649 call isBoundedRange tmpIter[328312])(328658 call ||(328652 call isDomain tmpIter[328312])(328655 call isArray tmpIter[328312]))))
      if isRngDomArr[328647]
      {
        const _coforallCount[328519] "const" "end count" "temp"
        (328584 'move' _coforallCount[328519](328581 call _endCountAlloc 0))
        unknown numTasks[328520] "temp"
        (328568 'move' numTasks[328520](328564 call . tmpIter[328312] c"size"))
        (328559 call _upEndCount _coforallCount[328519] 0 numTasks[328520])
        unknown _indexOfInterest[328526] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328527] "expr temp" "temp"
        (328536 'move' _iterator[328527](328534 call _getIterator tmpIter[328312]))
        Defer
        {
          {
            (328552 call _freeIterator _iterator[328527])
          }
        }
        { scopeless type
          (328541 'move' _indexOfInterest[328526](328538 call iteratorIndex _iterator[328527]))
        }
        ForLoop[328528]
        {
          unknown i[328545] "coforall index var" "index var" "insert auto destroy"
          (328547 'move' i[328545] _indexOfInterest[328526])
          { scopeless
            { scopeless
              const tmp[328318] "const" "temp"
              (328320 'move' tmp[328318](328322 'deref'(328323 '_wide_get_locale'(328334 call(328325 call .(328327 call .(328329 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328342] "const"(328352 IfExpr  _privatization then
                    { scopeless
                      (328346 call chpl_getPrivatizedCopy(328347 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328354 'end of statement')
                  }
                  { scopeless
                    const src[328356] "const"(328366 IfExpr  _privatization then
                    { scopeless
                      (328360 call chpl_getPrivatizedCopy(328361 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328368 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328370] "const"(328383 call(328372 call .(328380 call(328374 call .(328376 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328386 'end of statement')
                  }
                  (328388 call assert(328390 call >(328392 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328397] "const"(328399 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328404 'end of statement')
                  }
                  if(328406 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328411 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328419] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328421] "expr temp" "temp"
                    (328423 'move' _iterator[328421](328426 call _getIterator(328437 call(328428 call .(328430 call .(328432 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328441 call _freeIterator _iterator[328421])
                      }
                    }
                    { scopeless type
                      (328445 'move' _indexOfInterest[328419](328448 call iteratorIndex _iterator[328421]))
                    }
                    ForLoop[328450]
                    {
                      unknown srcLoc[328453] "index var" "insert auto destroy"
                      (328455 'move' srcLoc[328453] _indexOfInterest[328419])
                      {
                        { scopeless
                          const localSrcChunk[328460] "const"(328462 call corSrcBlock(328464 call .(328472 call(328466 call .(328468 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328476 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328478] "const"(328480 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328485 'end of statement')
                        }
                        (328487 call chpl__bulkTransferArray(328489 call .(328491 call .(328496 call(328493 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328502 call .(328504 call .(328509 call(328506 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328514]
                      _indexOfInterest[328419]
                      _iterator[328421]
                    }
                    label _breakLabel[328516]
                  }
                }
                (328521 call _downEndCount _coforallCount[328519] nil[44])
                (328337 'coforall on block' 0 tmp[328318])
              }
            }
          }
          label _continueLabel[328531]
          _indexOfInterest[328526]
          _iterator[328527]
        }
        label _breakLabel[328532]
        Defer
        {
          {
            (328571 call _endCountFree _coforallCount[328519])
          }
        }
        (328576 call _waitEndCount _coforallCount[328519] 0 numTasks[328520])
      }
      {
        const _coforallCount[328588] "const" "end count" "temp"
        (328644 'move' _coforallCount[328588](328641 call _endCountAlloc 0))
        unknown _indexOfInterest[328595] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328596] "expr temp" "temp"
        (328605 'move' _iterator[328596](328603 call _getIterator tmpIter[328312]))
        Defer
        {
          {
            (328621 call _freeIterator _iterator[328596])
          }
        }
        { scopeless type
          (328610 'move' _indexOfInterest[328595](328607 call iteratorIndex _iterator[328596]))
        }
        ForLoop[328597]
        {
          unknown i[328614] "coforall index var" "index var" "insert auto destroy"
          (328616 'move' i[328614] _indexOfInterest[328595])
          (328628 call _upEndCount _coforallCount[328588] 0)
          { scopeless
            { scopeless
              const tmp[328303] "const" "temp"
              (328305 'move' tmp[328303](328301 'deref'(328300 '_wide_get_locale'(328085 call(328080 call .(328077 call .(328074 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                {
                  { scopeless
                    const dst[328097] "const"(328094 IfExpr  _privatization then
                    { scopeless
                      (328092 call chpl_getPrivatizedCopy(328089 'typeof' Dest) DestPID)
                    } else
                    { scopeless
                      Dest
                    } )
                    (328100 'end of statement')
                  }
                  { scopeless
                    const src[328113] "const"(328110 IfExpr  _privatization then
                    { scopeless
                      (328108 call chpl_getPrivatizedCopy(328105 'typeof' Src) SrcPID)
                    } else
                    { scopeless
                      Src
                    } )
                    (328116 'end of statement')
                  }
                  { scopeless
                    const localDestBlock[328133] "const"(328132 call(328127 call .(328126 call(328121 call .(328118 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                    (328136 'end of statement')
                  }
                  (328146 call assert(328143 call >(328139 call . localDestBlock c"size") 0))
                  { scopeless
                    const corSrcBlock[328154] "const"(328153 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                    (328157 'end of statement')
                  }
                  if(328184 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328182 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                    }
                  }
                  {
                    unknown _indexOfInterest[328266] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[328267] "expr temp" "temp"
                    (328276 'move' _iterator[328267](328274 call _getIterator(328202 call(328197 call .(328194 call .(328191 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                    Defer
                    {
                      {
                        (328293 call _freeIterator _iterator[328267])
                      }
                    }
                    { scopeless type
                      (328282 'move' _indexOfInterest[328266](328279 call iteratorIndex _iterator[328267]))
                    }
                    ForLoop[328268]
                    {
                      unknown srcLoc[328286] "index var" "insert auto destroy"
                      (328288 'move' srcLoc[328286] _indexOfInterest[328266])
                      {
                        { scopeless
                          const localSrcChunk[328219] "const"(328218 call corSrcBlock(328214 call .(328213 call(328208 call .(328205 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                          (328222 'end of statement')
                        }
                        { scopeless
                          const localDestChunk[328230] "const"(328229 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                          (328233 'end of statement')
                        }
                        (328264 call chpl__bulkTransferArray(328245 call .(328242 call .(328241 call(328236 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328260 call .(328257 call .(328256 call(328251 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                      }
                      label _continueLabel[328271]
                      _indexOfInterest[328266]
                      _iterator[328267]
                    }
                    label _breakLabel[328272]
                  }
                }
                (328590 call _downEndCount _coforallCount[328588] nil[44])
                (328308 'coforall on block' 0 tmp[328303])
              }
            }
          }
          label _continueLabel[328600]
          _indexOfInterest[328595]
          _iterator[328596]
        }
        label _breakLabel[328601]
        Defer
        {
          {
            (328632 call _endCountFree _coforallCount[328588])
          }
        }
        (328637 call _waitEndCount _coforallCount[328588] 0)
      }
    }
  }
  function _unknown[51].doiBulkTransferFromAny[328673](arg _mt[328682]:_MT[238], arg this[328679] :
  BlockArr, arg destDom[328671]:_any[178](?), arg Src[328675]:_any[178](?), arg srcDom[328677]:_any[178](?)) : _unknown[51] "method"
  {
    if(328714 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (328712 call writeln "In BlockDist.doiBulkTransferFromAny")
      }
    }
    {
      unknown tmpIter[328868] "expr temp" "maybe ref" "no copy" "temp"
      (328871 'move' tmpIter[328868](328730 call(328725 call .(328722 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[329096] "maybe param" "temp"
      (329111 'move' isRngDomArr[329096](329109 call ||(329098 call isBoundedRange tmpIter[328868])(329107 call ||(329101 call isDomain tmpIter[328868])(329104 call isArray tmpIter[328868]))))
      if isRngDomArr[329096]
      {
        const _coforallCount[328968] "const" "end count" "temp"
        (329033 'move' _coforallCount[328968](329030 call _endCountAlloc 0))
        unknown numTasks[328969] "temp"
        (329017 'move' numTasks[328969](329013 call . tmpIter[328868] c"size"))
        (329008 call _upEndCount _coforallCount[328968] 0 numTasks[328969])
        unknown _indexOfInterest[328975] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328976] "expr temp" "temp"
        (328985 'move' _iterator[328976](328983 call _getIterator tmpIter[328868]))
        Defer
        {
          {
            (329001 call _freeIterator _iterator[328976])
          }
        }
        { scopeless type
          (328990 'move' _indexOfInterest[328975](328987 call iteratorIndex _iterator[328976]))
        }
        ForLoop[328977]
        {
          unknown j[328994] "coforall index var" "index var" "insert auto destroy"
          (328996 'move' j[328994] _indexOfInterest[328975])
          { scopeless
            { scopeless
              const tmp[328874] "const" "temp"
              (328876 'move' tmp[328874](328878 'deref'(328879 '_wide_get_locale'(328887 call(328881 call .(328883 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[328895] "const"(328905 IfExpr  _privatization then
                    { scopeless
                      (328899 call chpl_getPrivatizedCopy(328900 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (328907 'end of statement')
                  }
                  { scopeless
                    const inters[328909] "const"(328922 call(328911 call .(328919 call(328913 call .(328915 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (328925 'end of statement')
                  }
                  { scopeless
                    const srcChunk[328927] "const"(328929 call bulkCommTranslateDomain inters destDom srcDom)
                    (328934 'end of statement')
                  }
                  if(328936 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328941 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (328951 call chpl__bulkTransferArray(328953 call .(328955 call .(328960 call(328957 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (328970 call _downEndCount _coforallCount[328968] nil[44])
                (328890 'coforall on block' 0 tmp[328874])
              }
            }
          }
          label _continueLabel[328980]
          _indexOfInterest[328975]
          _iterator[328976]
        }
        label _breakLabel[328981]
        Defer
        {
          {
            (329020 call _endCountFree _coforallCount[328968])
          }
        }
        (329025 call _waitEndCount _coforallCount[328968] 0 numTasks[328969])
      }
      {
        const _coforallCount[329037] "const" "end count" "temp"
        (329093 'move' _coforallCount[329037](329090 call _endCountAlloc 0))
        unknown _indexOfInterest[329044] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329045] "expr temp" "temp"
        (329054 'move' _iterator[329045](329052 call _getIterator tmpIter[328868]))
        Defer
        {
          {
            (329070 call _freeIterator _iterator[329045])
          }
        }
        { scopeless type
          (329059 'move' _indexOfInterest[329044](329056 call iteratorIndex _iterator[329045]))
        }
        ForLoop[329046]
        {
          unknown j[329063] "coforall index var" "index var" "insert auto destroy"
          (329065 'move' j[329063] _indexOfInterest[329044])
          (329077 call _upEndCount _coforallCount[329037] 0)
          { scopeless
            { scopeless
              const tmp[328859] "const" "temp"
              (328861 'move' tmp[328859](328857 'deref'(328856 '_wide_get_locale'(328740 call(328735 call .(328732 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[328752] "const"(328749 IfExpr  _privatization then
                    { scopeless
                      (328747 call chpl_getPrivatizedCopy(328744 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (328755 'end of statement')
                  }
                  { scopeless
                    const inters[328773] "const"(328772 call(328767 call .(328766 call(328761 call .(328758 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (328776 'end of statement')
                  }
                  { scopeless
                    const srcChunk[328783] "const"(328782 call bulkCommTranslateDomain inters destDom srcDom)
                    (328786 'end of statement')
                  }
                  if(328831 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (328829 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                    }
                  }
                  (328854 call chpl__bulkTransferArray(328847 call .(328844 call .(328843 call(328838 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
                }
                (329039 call _downEndCount _coforallCount[329037] nil[44])
                (328864 'coforall on block' 0 tmp[328859])
              }
            }
          }
          label _continueLabel[329049]
          _indexOfInterest[329044]
          _iterator[329045]
        }
        label _breakLabel[329050]
        Defer
        {
          {
            (329081 call _endCountFree _coforallCount[329037])
          }
        }
        (329086 call _waitEndCount _coforallCount[329037] 0)
      }
    }
    (329116 return 1)
  }
  where {
    (328691 call canDoAnyToBlock this destDom Src srcDom)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[329127](arg _mt[329138]:_MT[238], arg this[329135] :
  BlockArr, arg srcDom[329125]:_any[178](?), arg Dest[329130] :
  DefaultRectangularArr, arg destDom[329133]:_any[178](?)) : _unknown[51] "method"
  {
    if(329166 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329164 call writeln "In BlockDist.doiBulkTransferToKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329323] "expr temp" "maybe ref" "no copy" "temp"
      (329326 'move' tmpIter[329323](329182 call(329177 call .(329174 call . dom c"dist") c"activeTargetLocales") srcDom))
      unknown isRngDomArr[329554] "maybe param" "temp"
      (329569 'move' isRngDomArr[329554](329567 call ||(329556 call isBoundedRange tmpIter[329323])(329565 call ||(329559 call isDomain tmpIter[329323])(329562 call isArray tmpIter[329323]))))
      if isRngDomArr[329554]
      {
        const _coforallCount[329426] "const" "end count" "temp"
        (329491 'move' _coforallCount[329426](329488 call _endCountAlloc 0))
        unknown numTasks[329427] "temp"
        (329475 'move' numTasks[329427](329471 call . tmpIter[329323] c"size"))
        (329466 call _upEndCount _coforallCount[329426] 0 numTasks[329427])
        unknown _indexOfInterest[329433] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329434] "expr temp" "temp"
        (329443 'move' _iterator[329434](329441 call _getIterator tmpIter[329323]))
        Defer
        {
          {
            (329459 call _freeIterator _iterator[329434])
          }
        }
        { scopeless type
          (329448 'move' _indexOfInterest[329433](329445 call iteratorIndex _iterator[329434]))
        }
        ForLoop[329435]
        {
          unknown j[329452] "coforall index var" "index var" "insert auto destroy"
          (329454 'move' j[329452] _indexOfInterest[329433])
          { scopeless
            { scopeless
              const tmp[329329] "const" "temp"
              (329331 'move' tmp[329329](329333 'deref'(329334 '_wide_get_locale'(329342 call(329336 call .(329338 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329350] "const"(329360 IfExpr  _privatization then
                    { scopeless
                      (329354 call chpl_getPrivatizedCopy(329355 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329362 'end of statement')
                  }
                  { scopeless
                    const inters[329364] "const"(329377 call(329366 call .(329374 call(329368 call .(329370 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329380 'end of statement')
                  }
                  { scopeless
                    const destChunk[329382] "const"(329384 call bulkCommTranslateDomain inters srcDom destDom)
                    (329389 'end of statement')
                  }
                  if(329391 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329396 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329404] "const"(329406 call .(329408 call .(329413 call(329410 call . Src c"locArr") j) c"myElems") c"_value")
                    (329418 'end of statement')
                  }
                  (329420 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329428 call _downEndCount _coforallCount[329426] nil[44])
                (329345 'coforall on block' 0 tmp[329329])
              }
            }
          }
          label _continueLabel[329438]
          _indexOfInterest[329433]
          _iterator[329434]
        }
        label _breakLabel[329439]
        Defer
        {
          {
            (329478 call _endCountFree _coforallCount[329426])
          }
        }
        (329483 call _waitEndCount _coforallCount[329426] 0 numTasks[329427])
      }
      {
        const _coforallCount[329495] "const" "end count" "temp"
        (329551 'move' _coforallCount[329495](329548 call _endCountAlloc 0))
        unknown _indexOfInterest[329502] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329503] "expr temp" "temp"
        (329512 'move' _iterator[329503](329510 call _getIterator tmpIter[329323]))
        Defer
        {
          {
            (329528 call _freeIterator _iterator[329503])
          }
        }
        { scopeless type
          (329517 'move' _indexOfInterest[329502](329514 call iteratorIndex _iterator[329503]))
        }
        ForLoop[329504]
        {
          unknown j[329521] "coforall index var" "index var" "insert auto destroy"
          (329523 'move' j[329521] _indexOfInterest[329502])
          (329535 call _upEndCount _coforallCount[329495] 0)
          { scopeless
            { scopeless
              const tmp[329314] "const" "temp"
              (329316 'move' tmp[329314](329312 'deref'(329311 '_wide_get_locale'(329192 call(329187 call .(329184 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Src[329204] "const"(329201 IfExpr  _privatization then
                    { scopeless
                      (329199 call chpl_getPrivatizedCopy(329196 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329207 'end of statement')
                  }
                  { scopeless
                    const inters[329225] "const"(329224 call(329219 call .(329218 call(329213 call .(329210 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                    (329228 'end of statement')
                  }
                  { scopeless
                    const destChunk[329235] "const"(329234 call bulkCommTranslateDomain inters srcDom destDom)
                    (329238 'end of statement')
                  }
                  if(329281 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329279 call writeln "  A[" destChunk "] = B[" inters "]")
                    }
                  }
                  { scopeless
                    const elemActual[329299] "const"(329296 call .(329293 call .(329292 call(329287 call . Src c"locArr") j) c"myElems") c"_value")
                    (329302 'end of statement')
                  }
                  (329309 call chpl__bulkTransferArray Dest destChunk elemActual inters)
                }
                (329497 call _downEndCount _coforallCount[329495] nil[44])
                (329319 'coforall on block' 0 tmp[329314])
              }
            }
          }
          label _continueLabel[329507]
          _indexOfInterest[329502]
          _iterator[329503]
        }
        label _breakLabel[329508]
        Defer
        {
          {
            (329539 call _endCountFree _coforallCount[329495])
          }
        }
        (329544 call _waitEndCount _coforallCount[329495] 0)
      }
    }
    (329574 return 1)
  }
  where {
    (329142 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[329585](arg _mt[329596]:_MT[238], arg this[329593] :
  BlockArr, arg destDom[329583]:_any[178](?), arg Src[329588] :
  DefaultRectangularArr, arg srcDom[329591]:_any[178](?)) : _unknown[51] "method"
  {
    if(329624 call _cond_test debugBlockDistBulkTransfer)
    {
      { scopeless
        (329622 call writeln "In BlockArr.doiBulkTransferFromKnown(DefaultRectangular)")
      }
    }
    {
      unknown tmpIter[329760] "expr temp" "maybe ref" "no copy" "temp"
      (329763 'move' tmpIter[329760](329640 call(329635 call .(329632 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[330000] "maybe param" "temp"
      (330015 'move' isRngDomArr[330000](330013 call ||(330002 call isBoundedRange tmpIter[329760])(330011 call ||(330005 call isDomain tmpIter[329760])(330008 call isArray tmpIter[329760]))))
      if isRngDomArr[330000]
      {
        const _coforallCount[329872] "const" "end count" "temp"
        (329937 'move' _coforallCount[329872](329934 call _endCountAlloc 0))
        unknown numTasks[329873] "temp"
        (329921 'move' numTasks[329873](329917 call . tmpIter[329760] c"size"))
        (329912 call _upEndCount _coforallCount[329872] 0 numTasks[329873])
        unknown _indexOfInterest[329879] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329880] "expr temp" "temp"
        (329889 'move' _iterator[329880](329887 call _getIterator tmpIter[329760]))
        Defer
        {
          {
            (329905 call _freeIterator _iterator[329880])
          }
        }
        { scopeless type
          (329894 'move' _indexOfInterest[329879](329891 call iteratorIndex _iterator[329880]))
        }
        ForLoop[329881]
        {
          unknown j[329898] "coforall index var" "index var" "insert auto destroy"
          (329900 'move' j[329898] _indexOfInterest[329879])
          { scopeless
            { scopeless
              const tmp[329766] "const" "temp"
              (329768 'move' tmp[329766](329770 'deref'(329771 '_wide_get_locale'(329779 call(329773 call .(329775 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329787] "const"(329797 IfExpr  _privatization then
                    { scopeless
                      (329791 call chpl_getPrivatizedCopy(329792 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329799 'end of statement')
                  }
                  { scopeless
                    const inters[329801] "const"(329814 call(329803 call .(329811 call(329805 call .(329807 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329817 'end of statement')
                  }
                  (329819 call assert(329821 call >(329823 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[329828] "const"(329830 call bulkCommTranslateDomain inters destDom srcDom)
                    (329835 'end of statement')
                  }
                  if(329837 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329842 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[329850] "const"(329852 call .(329854 call .(329859 call(329856 call . Dest c"locArr") j) c"myElems") c"_value")
                    (329864 'end of statement')
                  }
                  (329866 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (329874 call _downEndCount _coforallCount[329872] nil[44])
                (329782 'coforall on block' 0 tmp[329766])
              }
            }
          }
          label _continueLabel[329884]
          _indexOfInterest[329879]
          _iterator[329880]
        }
        label _breakLabel[329885]
        Defer
        {
          {
            (329924 call _endCountFree _coforallCount[329872])
          }
        }
        (329929 call _waitEndCount _coforallCount[329872] 0 numTasks[329873])
      }
      {
        const _coforallCount[329941] "const" "end count" "temp"
        (329997 'move' _coforallCount[329941](329994 call _endCountAlloc 0))
        unknown _indexOfInterest[329948] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329949] "expr temp" "temp"
        (329958 'move' _iterator[329949](329956 call _getIterator tmpIter[329760]))
        Defer
        {
          {
            (329974 call _freeIterator _iterator[329949])
          }
        }
        { scopeless type
          (329963 'move' _indexOfInterest[329948](329960 call iteratorIndex _iterator[329949]))
        }
        ForLoop[329950]
        {
          unknown j[329967] "coforall index var" "index var" "insert auto destroy"
          (329969 'move' j[329967] _indexOfInterest[329948])
          (329981 call _upEndCount _coforallCount[329941] 0)
          { scopeless
            { scopeless
              const tmp[329751] "const" "temp"
              (329753 'move' tmp[329751](329749 'deref'(329748 '_wide_get_locale'(329650 call(329645 call .(329642 call . dom c"dist") c"targetLocales") j))))
              {
                {
                  { scopeless
                    const Dest[329662] "const"(329659 IfExpr  _privatization then
                    { scopeless
                      (329657 call chpl_getPrivatizedCopy(329654 'typeof' this) pid)
                    } else
                    { scopeless
                      this
                    } )
                    (329665 'end of statement')
                  }
                  { scopeless
                    const inters[329683] "const"(329682 call(329677 call .(329676 call(329671 call .(329668 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                    (329686 'end of statement')
                  }
                  (329696 call assert(329693 call >(329689 call . inters c"size") 0))
                  { scopeless
                    const srcChunk[329704] "const"(329703 call bulkCommTranslateDomain inters destDom srcDom)
                    (329707 'end of statement')
                  }
                  if(329718 call _cond_test debugBlockDistBulkTransfer)
                  {
                    { scopeless
                      (329716 call writeln "  A[" inters "] = B[" srcChunk "]")
                    }
                  }
                  { scopeless
                    const elemActual[329736] "const"(329733 call .(329730 call .(329729 call(329724 call . Dest c"locArr") j) c"myElems") c"_value")
                    (329739 'end of statement')
                  }
                  (329746 call chpl__bulkTransferArray elemActual inters Src srcChunk)
                }
                (329943 call _downEndCount _coforallCount[329941] nil[44])
                (329756 'coforall on block' 0 tmp[329751])
              }
            }
          }
          label _continueLabel[329953]
          _indexOfInterest[329948]
          _iterator[329949]
        }
        label _breakLabel[329954]
        Defer
        {
          {
            (329985 call _endCountFree _coforallCount[329941])
          }
        }
        (329990 call _waitEndCount _coforallCount[329941] 0)
      }
    }
    (330020 return 1)
  }
  where {
    (329600 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiCanBulkTransferRankChange[330029](arg _mt[330034]:_MT[238], arg this[330031] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (330037 return 1)
    }
  }
  { scopeless
    unknown debugBlockScan[330043] "config" "param" 0
    (330046 'end of statement')
  }
  function _unknown[51].doiScan[330052](arg _mt[330059]:_MT[238], arg this[330056] :
  BlockArr, arg op[330050]:_any[178](?), arg dom[330054]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[330078] "type variable"(330077 'typeof'(330076 call(330072 call . op c"generate")))
    { scopeless
      unknown res[330089](330087 call chpl__buildArrayRuntimeType(330085 call chpl__ensureDomainExpr dom) resType)
      (330092 'end of statement')
    }
    (330094 'use' ReplicatedDist)
    { scopeless
      unknown targetLocs[330102] "ref var"(330101 call(330097 call . this c"dsiTargetLocales"))
      (330105 'end of statement')
    }
    { scopeless
      const elemPerLocDom[330119] "const"(330117 call chpl__distributed(330116 call Replicated targetLocs)(330111 call chpl__buildDomainExpr(330108 call chpl_build_bounded_range 1 1)))
      (330122 'end of statement')
    }
    { scopeless
      unknown elemPerLoc[330130](330128 call chpl__buildArrayRuntimeType(330126 call chpl__ensureDomainExpr elemPerLocDom) resType)
      (330133 'end of statement')
    }
    { scopeless
      unknown inputReady$[330143](330141 call chpl__buildArrayRuntimeType(330139 call chpl__ensureDomainExpr elemPerLocDom)(330137 call _syncvar bool[10]))
      (330146 'end of statement')
    }
    { scopeless
      unknown outputReady$[330156](330154 call chpl__buildArrayRuntimeType(330152 call chpl__ensureDomainExpr elemPerLocDom)(330150 call _syncvar bool[10]))
      (330159 'end of statement')
    }
    {
      unknown tmpIter[330599] "expr temp" "maybe ref" "no copy" "temp"
      (330602 'move' tmpIter[330599](330165 call .(330162 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[331084] "maybe param" "temp"
      (331099 'move' isRngDomArr[331084](331097 call ||(331086 call isBoundedRange tmpIter[330599])(331095 call ||(331089 call isDomain tmpIter[330599])(331092 call isArray tmpIter[330599]))))
      if isRngDomArr[331084]
      {
        const _coforallCount[330956] "const" "end count" "temp"
        (331021 'move' _coforallCount[330956](331018 call _endCountAlloc 0))
        unknown numTasks[330957] "temp"
        (331005 'move' numTasks[330957](331001 call . tmpIter[330599] c"size"))
        (330996 call _upEndCount _coforallCount[330956] 0 numTasks[330957])
        unknown _indexOfInterest[330963] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[330964] "expr temp" "temp"
        (330973 'move' _iterator[330964](330971 call _getIterator tmpIter[330599]))
        Defer
        {
          {
            (330989 call _freeIterator _iterator[330964])
          }
        }
        { scopeless type
          (330978 'move' _indexOfInterest[330963](330975 call iteratorIndex _iterator[330964]))
        }
        ForLoop[330965]
        {
          unknown locid[330982] "coforall index var" "index var" "insert auto destroy"
          (330984 'move' locid[330982] _indexOfInterest[330963])
          { scopeless
            { scopeless
              const tmp[330605] "const" "temp"
              (330607 'move' tmp[330605](330609 'deref'(330610 '_wide_get_locale'(330612 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330620] "const"(330625 call(330622 call . op c"clone"))
                    (330627 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330629] "ref var"(330631 call locArr locid)
                    (330634 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330636] "ref var"(330638 call . myLocArrDesc c"myElems")
                    (330642 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330644] "const" "ref var"(330646 call . myLocArr c"_dom")
                    (330650 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330652] "temp"(330660 call(330654 call .(330656 call . myLocArr c"_value") c"chpl__preScan") myop res(330664 call myLocDom dom))
                    (330668 call _check_tuple_var_decl tmp[330652] 4)
                    unknown numTasks[330671](330673 call tmp[330652] 0)
                    unknown rngs[330676](330678 call tmp[330652] 1)
                    unknown state[330681](330683 call tmp[330652] 2)
                    unknown tot[330686](330688 call tmp[330652] 3)
                    (330691 'end of statement')
                  }
                  if(330693 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330698 call writeln locid ": "(330702 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330709 call =(330711 call elemPerLoc 1) tot)
                  (330715 call =(330717 call inputReady$ 1) 1)
                  if(330721 call _cond_test(330723 call == locid(330726 call .(330728 call .(330730 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330737] "const"(330742 call(330739 call . op c"clone"))
                      (330744 'end of statement')
                    }
                    { scopeless
                      unknown next[330746](330748 call . metaop c"identity") resType
                      (330753 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330755] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330757] "expr temp" "temp"
                      (330759 'move' _iterator[330757](330762 call _getIterator(330764 call .(330766 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330772 call _freeIterator _iterator[330757])
                        }
                      }
                      { scopeless type
                        (330776 'move' _indexOfInterest[330755](330779 call iteratorIndex _iterator[330757]))
                      }
                      ForLoop[330781]
                      {
                        unknown locid[330784] "index var" "insert auto destroy"
                        (330786 'move' locid[330784] _indexOfInterest[330755])
                        {
                          { scopeless
                            const targetloc[330791] "const"(330793 call targetLocs locid)
                            (330796 'end of statement')
                          }
                          { scopeless
                            const locready[330798] "const"(330805 call(330803 call(330800 call . inputReady$ c"replicand") targetloc) 1)
                            (330808 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330810] "ref var"(330817 call(330815 call(330812 call . elemPerLoc c"replicand") targetloc) 1)
                            (330820 'end of statement')
                          }
                          (330822 call <=> locVal next)
                          (330826 call =(330833 call(330831 call(330828 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (330840 call(330837 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[330843]
                        _indexOfInterest[330755]
                        _iterator[330757]
                      }
                      label _breakLabel[330845]
                    }
                    (330848 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[330852] "const"(330854 call outputReady$ 1)
                    (330857 'end of statement')
                  }
                  { scopeless
                    const myadjust[330859] "const"(330861 call elemPerLoc 1)
                    (330864 'end of statement')
                  }
                  if(330866 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330871 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[330877] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330879] "expr temp" "temp"
                    (330881 'move' _iterator[330879](330884 call _getIterator state))
                    Defer
                    {
                      {
                        (330888 call _freeIterator _iterator[330879])
                      }
                    }
                    { scopeless type
                      (330892 'move' _indexOfInterest[330877](330895 call iteratorIndex _iterator[330879]))
                    }
                    ForLoop[330897]
                    {
                      unknown s[330900] "index var" "insert auto destroy"
                      (330902 'move' s[330900] _indexOfInterest[330877])
                      { scopeless
                        (330910 call(330907 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[330913]
                      _indexOfInterest[330877]
                      _iterator[330879]
                    }
                    label _breakLabel[330915]
                  }
                  if(330918 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330923 call writeln locid ": state = " state)
                    }
                  }
                  (330935 call(330929 call .(330931 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(330942 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330947 call writeln locid ": " myLocArr)
                    }
                  }
                  (330953 call chpl__delete myop)
                }
                (330958 call _downEndCount _coforallCount[330956] nil[44])
                (330615 'coforall on block' 0 tmp[330605])
              }
            }
          }
          label _continueLabel[330968]
          _indexOfInterest[330963]
          _iterator[330964]
        }
        label _breakLabel[330969]
        Defer
        {
          {
            (331008 call _endCountFree _coforallCount[330956])
          }
        }
        (331013 call _waitEndCount _coforallCount[330956] 0 numTasks[330957])
      }
      {
        const _coforallCount[331025] "const" "end count" "temp"
        (331081 'move' _coforallCount[331025](331078 call _endCountAlloc 0))
        unknown _indexOfInterest[331032] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331033] "expr temp" "temp"
        (331042 'move' _iterator[331033](331040 call _getIterator tmpIter[330599]))
        Defer
        {
          {
            (331058 call _freeIterator _iterator[331033])
          }
        }
        { scopeless type
          (331047 'move' _indexOfInterest[331032](331044 call iteratorIndex _iterator[331033]))
        }
        ForLoop[331034]
        {
          unknown locid[331051] "coforall index var" "index var" "insert auto destroy"
          (331053 'move' locid[331051] _indexOfInterest[331032])
          (331065 call _upEndCount _coforallCount[331025] 0)
          { scopeless
            { scopeless
              const tmp[330590] "const" "temp"
              (330592 'move' tmp[330590](330588 'deref'(330587 '_wide_get_locale'(330171 call targetLocs locid))))
              {
                {
                  { scopeless
                    const myop[330178] "const"(330177 call(330173 call . op c"clone"))
                    (330181 'end of statement')
                  }
                  { scopeless
                    unknown myLocArrDesc[330187] "ref var"(330186 call locArr locid)
                    (330190 'end of statement')
                  }
                  { scopeless
                    unknown myLocArr[330195] "ref var"(330192 call . myLocArrDesc c"myElems")
                    (330198 'end of statement')
                  }
                  { scopeless
                    const myLocDom[330203] "const" "ref var"(330200 call . myLocArr c"_dom")
                    (330206 'end of statement')
                  }
                  { scopeless
                    unknown tmp[330231] "temp"(330230 call(330220 call .(330217 call . myLocArr c"_value") c"chpl__preScan") myop res(330229 call myLocDom dom))
                    (330244 call _check_tuple_var_decl tmp[330231] 4)
                    unknown numTasks[330207](330232 call tmp[330231] 0)
                    unknown rngs[330209](330235 call tmp[330231] 1)
                    unknown state[330211](330238 call tmp[330231] 2)
                    unknown tot[330213](330241 call tmp[330231] 3)
                    (330249 'end of statement')
                  }
                  if(330264 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330262 call writeln locid ": "(330260 call _build_tuple numTasks rngs state tot))
                    }
                  }
                  (330274 call =(330272 call elemPerLoc 1) tot)
                  (330282 call =(330280 call inputReady$ 1) 1)
                  if(330432 call _cond_test(330296 call == locid(330293 call .(330290 call .(330287 call . dom c"dist") c"targetLocDom") c"low")))
                  {
                    { scopeless
                      const metaop[330304] "const"(330303 call(330299 call . op c"clone"))
                      (330307 'end of statement')
                    }
                    { scopeless
                      unknown next[330314](330311 call . metaop c"identity") resType
                      (330317 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[330393] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[330394] "expr temp" "temp"
                      (330403 'move' _iterator[330394](330401 call _getIterator(330323 call .(330320 call . dom c"dist") c"targetLocDom")))
                      Defer
                      {
                        {
                          (330420 call _freeIterator _iterator[330394])
                        }
                      }
                      { scopeless type
                        (330409 'move' _indexOfInterest[330393](330406 call iteratorIndex _iterator[330394]))
                      }
                      ForLoop[330395]
                      {
                        unknown locid[330413] "index var" "insert auto destroy"
                        (330415 'move' locid[330413] _indexOfInterest[330393])
                        {
                          { scopeless
                            const targetloc[330330] "const"(330329 call targetLocs locid)
                            (330333 'end of statement')
                          }
                          { scopeless
                            const locready[330347] "const"(330346 call(330343 call(330338 call . inputReady$ c"replicand") targetloc) 1)
                            (330350 'end of statement')
                          }
                          { scopeless
                            unknown locVal[330361] "ref var"(330360 call(330357 call(330352 call . elemPerLoc c"replicand") targetloc) 1)
                            (330364 'end of statement')
                          }
                          (330367 call <=> locVal next)
                          (330381 call =(330379 call(330376 call(330371 call . outputReady$ c"replicand") targetloc) 1) 1)
                          (330391 call(330385 call . metaop c"accumulateOntoState") next locVal)
                        }
                        label _continueLabel[330398]
                        _indexOfInterest[330393]
                        _iterator[330394]
                      }
                      label _breakLabel[330399]
                    }
                    (330429 call chpl__delete metaop)
                  }
                  { scopeless
                    const resready[330440] "const"(330439 call outputReady$ 1)
                    (330443 'end of statement')
                  }
                  { scopeless
                    const myadjust[330448] "const"(330447 call elemPerLoc 1)
                    (330451 'end of statement')
                  }
                  if(330476 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330474 call writeln locid ": myadjust = " myadjust)
                    }
                  }
                  {
                    unknown _indexOfInterest[330492] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330493] "expr temp" "temp"
                    (330502 'move' _iterator[330493](330500 call _getIterator state))
                    Defer
                    {
                      {
                        (330518 call _freeIterator _iterator[330493])
                      }
                    }
                    { scopeless type
                      (330507 'move' _indexOfInterest[330492](330504 call iteratorIndex _iterator[330493]))
                    }
                    ForLoop[330494]
                    {
                      unknown s[330511] "index var" "insert auto destroy"
                      (330513 'move' s[330511] _indexOfInterest[330492])
                      { scopeless
                        (330490 call(330484 call . myop c"accumulateOntoState") s myadjust)
                      }
                      label _continueLabel[330497]
                      _indexOfInterest[330492]
                      _iterator[330493]
                    }
                    label _breakLabel[330498]
                  }
                  if(330549 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330547 call writeln locid ": state = " state)
                    }
                  }
                  (330567 call(330558 call .(330555 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                  if(330577 call _cond_test debugBlockScan)
                  {
                    { scopeless
                      (330575 call writeln locid ": " myLocArr)
                    }
                  }
                  (330584 call chpl__delete myop)
                }
                (331027 call _downEndCount _coforallCount[331025] nil[44])
                (330595 'coforall on block' 0 tmp[330590])
              }
            }
          }
          label _continueLabel[331037]
          _indexOfInterest[331032]
          _iterator[331033]
        }
        label _breakLabel[331038]
        Defer
        {
          {
            (331069 call _endCountFree _coforallCount[331025])
          }
        }
        (331074 call _waitEndCount _coforallCount[331025] 0)
      }
    }
    (331105 call chpl__delete op)
    (331109 return res)
  }
  where {
    (330069 call &&(330063 call == rank 1)(330068 call chpl__scanStateResTypesMatch op))
  }
  function newBlockDom[331120](arg dom[331117] :
  _domain) : _unknown[51]
  {
    (331129 return(331127 call chpl__distributed(331126 call Block dom) dom))
  }
  function newBlockArr[331140](arg dom[331137] :
  _domain, arg eltType[331142]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown D[331148](331147 call newBlockDom dom)
      (331151 'end of statement')
    }
    { scopeless
      unknown A[331160](331158 call chpl__buildArrayRuntimeType(331156 call chpl__ensureDomainExpr D) eltType)
      (331163 'end of statement')
    }
    (331165 return A)
  }
  function newBlockDom[331177](arg rng[331173] ... :
  range) : _unknown[51]
  {
    (331187 return(331186 call newBlockDom(331183 call chpl__buildDomainExpr(331181 'expand_tuple' rng))))
  }
  function newBlockArr[331200](arg rng[331196] ... :
  range, arg eltType[331202]:_any[178](?)) : _unknown[51]
  {
    (331213 return(331212 call newBlockArr(331208 call chpl__buildDomainExpr(331206 'expand_tuple' rng)) eltType))
  }
}