AST dump for ChapelUtil after pass prune.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelUtil[416057]() : void[4] "insert line file info" "module init" "resolved"
  {
    (522130 return _void[55])
  }
  function safeAdd[979790](const in arg a[979792]:int(64)[13], const in arg b[979797]:int(64)[13]) : bool[10] "instantiated generic" "invisible fn" "resolved"
  {
    val ret[979799]:bool[10] "dead after last mention" "RVV" "temp"
    val call_tmp[979807]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
    const-val call_tmp[979840]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (979842 'move' call_tmp[979840](979845 call <[948459] a[979792]))
    const-val call_tmp[979848]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (979850 'move' call_tmp[979848] call_tmp[979840])
    if call_tmp[979848]
    {
      const-val call_tmp[979857]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979859 'move' call_tmp[979857](979862 call >=[980037] b[979797]))
      const-val call_tmp[979865]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979867 'move' call_tmp[979865] call_tmp[979857])
      if call_tmp[979865]
      {
        (979874 'move' ret[979799] 1)
        gotoReturn _end_safeAdd[980013] _end_safeAdd[980013]
      }
      {
        val call_tmp[979881]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
        const-val call_tmp[979894]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (979896 'move' call_tmp[979894](979899 call -[980261] a[979792]))
        const-val call_tmp[979902]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979904 'move' call_tmp[979902](979907 call <[437495] b[979797] call_tmp[979894]))
        const-val call_tmp[979910]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979912 'move' call_tmp[979910] call_tmp[979902])
        if call_tmp[979910]
        {
          (979919 'move' ret[979799] 0)
          gotoReturn _end_safeAdd[980013] _end_safeAdd[980013]
        }
        {
          (979926 'move' ret[979799] 1)
          gotoReturn _end_safeAdd[980013] _end_safeAdd[980013]
        }
      }
    }
    {
      const-val call_tmp[979935]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979937 'move' call_tmp[979935](979940 call <=[437055] b[979797] 0))
      const-val call_tmp[979943]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (979945 'move' call_tmp[979943] call_tmp[979935])
      if call_tmp[979943]
      {
        (979952 'move' ret[979799] 1)
        gotoReturn _end_safeAdd[980013] _end_safeAdd[980013]
      }
      {
        val call_tmp[979959]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp" "type variable"
        const-val call_tmp[979972]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (979974 'move' call_tmp[979972](979977 call -[980409] a[979792]))
        const-val call_tmp[979980]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979982 'move' call_tmp[979980](979985 call >[437715] b[979797] call_tmp[979972]))
        const-val call_tmp[979988]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (979990 'move' call_tmp[979988] call_tmp[979980])
        if call_tmp[979988]
        {
          (979997 'move' ret[979799] 0)
          gotoReturn _end_safeAdd[980013] _end_safeAdd[980013]
        }
        {
          (980004 'move' ret[979799] 1)
          gotoReturn _end_safeAdd[980013] _end_safeAdd[980013]
        }
      }
    }
    label _end_safeAdd[980013]
    (980015 return ret[979799])
  }
  type chpl_main_argument[167416] val argc[167403]:int(64)[13] val return_value[167411]:int(32)[95]
  function chpl_rt_preUserCodeHook[167714]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522116 return _void[55])
  }
  function chpl_rt_postUserCodeHook[167720]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522118 return _void[55])
  }
  function chpl_addModule[167735](const in arg moduleName[167732]:c_string[19], const in arg deinitFun[167738]:c_fn_ptr[152]) : void[4] "resolved" "no return value for void"
  {
    val call_tmp[679395]:chpl_ModuleDeinit[19827] "dead after last mention" "insert auto destroy for explicit new" "maybe param" "temp"
    val new_temp[1553794]:chpl_ModuleDeinit[19827] "dead after last mention" "temp"
    val tmp[2146911]:chpl_ModuleDeinit[19827] "temp"
    (2146916 'move' tmp[2146911](2146913 '.v' chpl_moduleDeinitFuns[19840] value[2146877]))
    (1553796 'move' new_temp[1553794](1553665 call _new[1553730] moduleName[167732] deinitFun[167738] tmp[2146911]))
    (679398 'move' call_tmp[679395] new_temp[1553794])
    val coerce_tmp[1553812]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1553818 'move' coerce_tmp[1553812] call_tmp[679395])
    ref tmp[2146887]:chpl_ModuleDeinit[19827] "temp"
    (2146892 'move' tmp[2146887](2146889 '.' chpl_moduleDeinitFuns[19840] value[2146877]))
    (167751 call =[1552475] tmp[2146887] coerce_tmp[1553812])
    (522120 return _void[55])
  }
  function chpl_deinitModules[167759]() : void[4] "export" "local args" "resolved" "no return value for void"
  {
    val prev[167810]:chpl_ModuleDeinit[19827] "dead at end of block" "insert auto destroy"
    val tmp[2146903]:chpl_ModuleDeinit[19827] "temp"
    (2146908 'move' tmp[2146903](2146905 '.v' chpl_moduleDeinitFuns[19840] value[2146877]))
    (544605 'move' prev[167810](1552084 call chpl__initCopy[981947] tmp[2146903]))
    {
      val tmp[167867]:bool[10] "dead after last mention" "temp"
      val coerce_tmp[1552094]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1552099 'move' coerce_tmp[1552094](1552096 'cast' object[22] prev[167810]))
      (167885 'move' tmp[167867](167883 call _cond_test[9881] coerce_tmp[1552094]))
      WhileDo[167872] hazard
      {
        {
          val call_tmp[679405]:chpl_ModuleDeinit[19827] "dead at end of block" "maybe param" "temp"
          (679408 'move' call_tmp[679405](167816 call postfix![1552102] prev[167810]))
          const curr[167818]:chpl_ModuleDeinit[19827] "dead at end of block" "const" "insert auto destroy"
          (544607 'move' curr[167818](1552417 call chpl__initCopy[1552398] call_tmp[679405]))
          ref call_tmp[679424]:_ref(c_fn_ptr)[948925] "dead after last mention" "maybe param" "reference to a const" "temp"
          val coerce_tmp[1552424]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1552429 'move' coerce_tmp[1552424] curr[167818])
          (679427 'move' call_tmp[679424](167846 call deinitFun[752689] coerce_tmp[1552424]))
          const-val coerce_tmp[1552432]:c_fn_ptr[152] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1552436 'move' coerce_tmp[1552432](1552434 'deref' call_tmp[679424]))
          (167850 call chpl_execute_module_deinit[167792] coerce_tmp[1552432])
          ref call_tmp[679431]:_ref(chpl_ModuleDeinit)[981928] "dead after last mention" "maybe param" "reference to a const" "temp"
          val coerce_tmp[1552439]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1552444 'move' coerce_tmp[1552439] curr[167818])
          (679434 'move' call_tmp[679431](167856 call prevModule[752715] coerce_tmp[1552439]))
          val coerce_tmp[1552510]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
          (1552514 'move' coerce_tmp[1552510](1552512 'deref' call_tmp[679431]))
          (167859 call =[1552475] prev[167810] coerce_tmp[1552510])
          (167864 call chpl__delete[1552517] curr[167818])
        }
        label _continueLabel[167870]
        val coerce_tmp[1553576]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (1553581 'move' coerce_tmp[1553576](1553578 'cast' object[22] prev[167810]))
        (167878 'move' tmp[167867](167876 call _cond_test[9881] coerce_tmp[1553576]))
        tmp[167867]
      }
      label _breakLabel[167871]
    }
    ref tmp[2146895]:chpl_ModuleDeinit[19827] "temp"
    (2146900 'move' tmp[2146895](2146897 '.' chpl_moduleDeinitFuns[19840] value[2146877]))
    (167890 call =[1553612] tmp[2146895] nil[44])
    (522128 return _void[55])
  }
  function chpl_execute_module_deinit[167792](const in arg deinitFun[167789]:c_fn_ptr[152]) : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522126 return _void[55])
  }
}