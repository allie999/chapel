AST dump for AtomicsCommon after pass normalize.
Module use list: ChapelStandard 

{
  function chpl__init_AtomicsCommon[415939]() : void[4] "insert line file info" "module init"
  {
    (506858 return _void[55])
  }
  function atomic_refcnt[52099].inc[51959](arg _mt[52103]:_MT[238], arg this[52101]:atomic_refcnt[52099], arg cnt[51956] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609172] "expr temp" "maybe param" "maybe type" "temp"
    (609175 'move' call_tmp[609172](51983 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609172]
    {
      unknown call_tmp[609179] "expr temp" "maybe param" "maybe type" "temp"
      (609182 'move' call_tmp[609179](357196 call _cnt _mt[243] this[52101]))
      (51973 call(51963 call (partial) add _mt[243] call_tmp[609179]) cnt[51956](order = relaxed[186964]))
    }
    {
      unknown call_tmp[609188] "expr temp" "maybe param" "maybe type" "temp"
      (609191 'move' call_tmp[609188](357202 call _cnt _mt[243] this[52101]))
      (51981 call(51976 call (partial) add _mt[243] call_tmp[609188]) cnt[51956])
    }
    (506814 return _void[55])
  }
  function atomic_refcnt[52099].dec[51994](arg _mt[52107]:_MT[238], arg this[52105]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506818] "RVV" "temp"
    unknown got[52004] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[540701] "maybe param" "maybe type" "temp"
    (540709 'move' type_tmp[540701](540707 call int(64)[13] 64))
    (540703 'init var split decl' got[52004] type_tmp[540701])
    (52007 'end of statement')
    unknown call_tmp[609195] "expr temp" "maybe param" "maybe type" "temp"
    (609198 'move' call_tmp[609195](52071 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609195]
    {
      unknown call_tmp[609202] "expr temp" "maybe param" "maybe type" "temp"
      (609205 'move' call_tmp[609202](357207 call _cnt _mt[243] this[52105]))
      unknown call_tmp[609209] "maybe param" "maybe type" "temp"
      (609212 'move' call_tmp[609209](52022 call(52012 call (partial) fetchSub _mt[243] call_tmp[609202]) 1(order = release[186960])))
      (540711 'init var split init' got[52004] call_tmp[609209] type_tmp[540701])
      (474533 'end of statement' got[52004])
      unknown call_tmp[609214] "expr temp" "maybe param" "maybe type" "temp"
      (609217 'move' call_tmp[609214](52029 call == got[52004] 1))
      unknown call_tmp[609219] "expr temp" "maybe param" "maybe type" "temp"
      (609222 'move' call_tmp[609219](52043 call _cond_test call_tmp[609214]))
      if call_tmp[609219]
      {
        (52037 call atomicFence acquire[186962])
        (474535 'end of statement')
        unknown call_tmp[609224] "expr temp" "maybe param" "maybe type" "temp"
        (609227 'move' call_tmp[609224](506823 call int(64)[13] 64))
        (506826 'move' ret[506818](506825 'coerce' 0 call_tmp[609224]))
        gotoReturn _end_dec[506816] _end_dec[506816]
      }
      unknown call_tmp[609229] "expr temp" "maybe param" "maybe type" "temp"
      (609232 'move' call_tmp[609229](52049 call - got[52004] 1))
      unknown call_tmp[609234] "expr temp" "maybe param" "maybe type" "temp"
      (609237 'move' call_tmp[609234](506831 call int(64)[13] 64))
      (506834 'move' ret[506818](506833 'coerce' call_tmp[609229] call_tmp[609234]))
      gotoReturn _end_dec[506816] _end_dec[506816]
      (474537 'end of statement' got[52004])
    }
    {
      unknown call_tmp[609241] "expr temp" "maybe param" "maybe type" "temp"
      (609244 'move' call_tmp[609241](357214 call _cnt _mt[243] this[52105]))
      unknown call_tmp[609248] "maybe param" "maybe type" "temp"
      (609251 'move' call_tmp[609248](52060 call(52055 call (partial) fetchSub _mt[243] call_tmp[609241]) 1))
      (540714 'init var split init' got[52004] call_tmp[609248] type_tmp[540701])
      (474539 'end of statement' got[52004])
      unknown call_tmp[609253] "expr temp" "maybe param" "maybe type" "temp"
      (609256 'move' call_tmp[609253](52067 call - got[52004] 1))
      unknown call_tmp[609258] "expr temp" "maybe param" "maybe type" "temp"
      (609261 'move' call_tmp[609258](506839 call int(64)[13] 64))
      (506842 'move' ret[506818](506841 'coerce' call_tmp[609253] call_tmp[609258]))
      gotoReturn _end_dec[506816] _end_dec[506816]
      (474541 'end of statement' got[52004])
    }
    label _end_dec[506816]
    (506820 return ret[506818])
  }
  { scopeless type
    (51999 call int(64)[13] 64)
  }
  function atomic_refcnt[52099].read[52080](arg _mt[52111]:_MT[238], arg this[52109]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506848] "RVV" "temp"
    unknown call_tmp[609265] "expr temp" "maybe param" "maybe type" "temp"
    (609268 'move' call_tmp[609265](357219 call _cnt _mt[243] this[52109]))
    unknown call_tmp[609272] "expr temp" "maybe param" "maybe type" "temp"
    (609275 'move' call_tmp[609272](52091 call(52087 call (partial) read _mt[243] call_tmp[609265])))
    unknown call_tmp[609277] "expr temp" "maybe param" "maybe type" "temp"
    (609280 'move' call_tmp[609277](506853 call int(64)[13] 64))
    (506856 'move' ret[506848](506855 'coerce' call_tmp[609272] call_tmp[609277]))
    (506850 return ret[506848])
  }
  { scopeless type
    (52085 call int(64)[13] 64)
  }
  type atomic_refcnt[52099] unknown _cnt[51949](51948 call chpl__processorAtomicType int(64)[13])
  (355041 'used modules list'(51941 'use' ChapelStandard[20264]))
}