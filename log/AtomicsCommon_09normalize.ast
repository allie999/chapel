AST dump for AtomicsCommon after pass normalize.
Module use list: ChapelStandard 

{
  function chpl__init_AtomicsCommon[415850]() : void[4] "insert line file info" "module init"
  {
    (506767 return _void[55])
  }
  function atomic_refcnt[52099].inc[51959](arg _mt[52103]:_MT[238], arg this[52101]:atomic_refcnt[52099], arg cnt[51956] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609098] "expr temp" "maybe param" "maybe type" "temp"
    (609101 'move' call_tmp[609098](51983 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609098]
    {
      unknown call_tmp[609105] "expr temp" "maybe param" "maybe type" "temp"
      (609108 'move' call_tmp[609105](357108 call _cnt _mt[243] this[52101]))
      (51973 call(51963 call (partial) add _mt[243] call_tmp[609105]) cnt[51956](order = relaxed[186964]))
    }
    {
      unknown call_tmp[609114] "expr temp" "maybe param" "maybe type" "temp"
      (609117 'move' call_tmp[609114](357114 call _cnt _mt[243] this[52101]))
      (51981 call(51976 call (partial) add _mt[243] call_tmp[609114]) cnt[51956])
    }
    (506723 return _void[55])
  }
  function atomic_refcnt[52099].dec[51994](arg _mt[52107]:_MT[238], arg this[52105]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506727] "RVV" "temp"
    unknown got[52004] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[540610] "maybe param" "maybe type" "temp"
    (540618 'move' type_tmp[540610](540616 call int(64)[13] 64))
    (540612 'init var split decl' got[52004] type_tmp[540610])
    (52007 'end of statement')
    unknown call_tmp[609121] "expr temp" "maybe param" "maybe type" "temp"
    (609124 'move' call_tmp[609121](52071 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609121]
    {
      unknown call_tmp[609128] "expr temp" "maybe param" "maybe type" "temp"
      (609131 'move' call_tmp[609128](357119 call _cnt _mt[243] this[52105]))
      unknown call_tmp[609135] "maybe param" "maybe type" "temp"
      (609138 'move' call_tmp[609135](52022 call(52012 call (partial) fetchSub _mt[243] call_tmp[609128]) 1(order = release[186960])))
      (540620 'init var split init' got[52004] call_tmp[609135] type_tmp[540610])
      (474444 'end of statement' got[52004])
      unknown call_tmp[609140] "expr temp" "maybe param" "maybe type" "temp"
      (609143 'move' call_tmp[609140](52029 call == got[52004] 1))
      unknown call_tmp[609145] "expr temp" "maybe param" "maybe type" "temp"
      (609148 'move' call_tmp[609145](52043 call _cond_test call_tmp[609140]))
      if call_tmp[609145]
      {
        (52037 call atomicFence acquire[186962])
        (474446 'end of statement')
        unknown call_tmp[609150] "expr temp" "maybe param" "maybe type" "temp"
        (609153 'move' call_tmp[609150](506732 call int(64)[13] 64))
        (506735 'move' ret[506727](506734 'coerce' 0 call_tmp[609150]))
        gotoReturn _end_dec[506725] _end_dec[506725]
      }
      unknown call_tmp[609155] "expr temp" "maybe param" "maybe type" "temp"
      (609158 'move' call_tmp[609155](52049 call - got[52004] 1))
      unknown call_tmp[609160] "expr temp" "maybe param" "maybe type" "temp"
      (609163 'move' call_tmp[609160](506740 call int(64)[13] 64))
      (506743 'move' ret[506727](506742 'coerce' call_tmp[609155] call_tmp[609160]))
      gotoReturn _end_dec[506725] _end_dec[506725]
      (474448 'end of statement' got[52004])
    }
    {
      unknown call_tmp[609167] "expr temp" "maybe param" "maybe type" "temp"
      (609170 'move' call_tmp[609167](357126 call _cnt _mt[243] this[52105]))
      unknown call_tmp[609174] "maybe param" "maybe type" "temp"
      (609177 'move' call_tmp[609174](52060 call(52055 call (partial) fetchSub _mt[243] call_tmp[609167]) 1))
      (540623 'init var split init' got[52004] call_tmp[609174] type_tmp[540610])
      (474450 'end of statement' got[52004])
      unknown call_tmp[609179] "expr temp" "maybe param" "maybe type" "temp"
      (609182 'move' call_tmp[609179](52067 call - got[52004] 1))
      unknown call_tmp[609184] "expr temp" "maybe param" "maybe type" "temp"
      (609187 'move' call_tmp[609184](506748 call int(64)[13] 64))
      (506751 'move' ret[506727](506750 'coerce' call_tmp[609179] call_tmp[609184]))
      gotoReturn _end_dec[506725] _end_dec[506725]
      (474452 'end of statement' got[52004])
    }
    label _end_dec[506725]
    (506729 return ret[506727])
  }
  { scopeless type
    (51999 call int(64)[13] 64)
  }
  function atomic_refcnt[52099].read[52080](arg _mt[52111]:_MT[238], arg this[52109]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506757] "RVV" "temp"
    unknown call_tmp[609191] "expr temp" "maybe param" "maybe type" "temp"
    (609194 'move' call_tmp[609191](357131 call _cnt _mt[243] this[52109]))
    unknown call_tmp[609198] "expr temp" "maybe param" "maybe type" "temp"
    (609201 'move' call_tmp[609198](52091 call(52087 call (partial) read _mt[243] call_tmp[609191])))
    unknown call_tmp[609203] "expr temp" "maybe param" "maybe type" "temp"
    (609206 'move' call_tmp[609203](506762 call int(64)[13] 64))
    (506765 'move' ret[506757](506764 'coerce' call_tmp[609198] call_tmp[609203]))
    (506759 return ret[506757])
  }
  { scopeless type
    (52085 call int(64)[13] 64)
  }
  type atomic_refcnt[52099] unknown _cnt[51949](51948 call chpl__processorAtomicType int(64)[13])
  (354953 'used modules list'(51941 'use' ChapelStandard[20264]))
}