AST dump for AtomicsCommon after pass normalize.
Module use list: ChapelStandard 

{
  function chpl__init_AtomicsCommon[415997]() : void[4] "insert line file info" "module init"
  {
    (506922 return _void[55])
  }
  function atomic_refcnt[52099].inc[51959](arg _mt[52103]:_MT[238], arg this[52101]:atomic_refcnt[52099], arg cnt[51956] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609236] "expr temp" "maybe param" "maybe type" "temp"
    (609239 'move' call_tmp[609236](51983 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609236]
    {
      unknown call_tmp[609243] "expr temp" "maybe param" "maybe type" "temp"
      (609246 'move' call_tmp[609243](357253 call _cnt _mt[243] this[52101]))
      (51973 call(51963 call (partial) add _mt[243] call_tmp[609243]) cnt[51956](order = relaxed[186976]))
    }
    {
      unknown call_tmp[609252] "expr temp" "maybe param" "maybe type" "temp"
      (609255 'move' call_tmp[609252](357259 call _cnt _mt[243] this[52101]))
      (51981 call(51976 call (partial) add _mt[243] call_tmp[609252]) cnt[51956])
    }
    (506878 return _void[55])
  }
  function atomic_refcnt[52099].dec[51994](arg _mt[52107]:_MT[238], arg this[52105]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506882] "RVV" "temp"
    unknown got[52004] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[540765] "maybe param" "maybe type" "temp"
    (540773 'move' type_tmp[540765](540771 call int(64)[13] 64))
    (540767 'init var split decl' got[52004] type_tmp[540765])
    (52007 'end of statement')
    unknown call_tmp[609259] "expr temp" "maybe param" "maybe type" "temp"
    (609262 'move' call_tmp[609259](52071 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609259]
    {
      unknown call_tmp[609266] "expr temp" "maybe param" "maybe type" "temp"
      (609269 'move' call_tmp[609266](357264 call _cnt _mt[243] this[52105]))
      unknown call_tmp[609273] "maybe param" "maybe type" "temp"
      (609276 'move' call_tmp[609273](52022 call(52012 call (partial) fetchSub _mt[243] call_tmp[609266]) 1(order = release[186972])))
      (540775 'init var split init' got[52004] call_tmp[609273] type_tmp[540765])
      (474591 'end of statement' got[52004])
      unknown call_tmp[609278] "expr temp" "maybe param" "maybe type" "temp"
      (609281 'move' call_tmp[609278](52029 call == got[52004] 1))
      unknown call_tmp[609283] "expr temp" "maybe param" "maybe type" "temp"
      (609286 'move' call_tmp[609283](52043 call _cond_test call_tmp[609278]))
      if call_tmp[609283]
      {
        (52037 call atomicFence acquire[186974])
        (474593 'end of statement')
        unknown call_tmp[609288] "expr temp" "maybe param" "maybe type" "temp"
        (609291 'move' call_tmp[609288](506887 call int(64)[13] 64))
        (506890 'move' ret[506882](506889 'coerce' 0 call_tmp[609288]))
        gotoReturn _end_dec[506880] _end_dec[506880]
      }
      unknown call_tmp[609293] "expr temp" "maybe param" "maybe type" "temp"
      (609296 'move' call_tmp[609293](52049 call - got[52004] 1))
      unknown call_tmp[609298] "expr temp" "maybe param" "maybe type" "temp"
      (609301 'move' call_tmp[609298](506895 call int(64)[13] 64))
      (506898 'move' ret[506882](506897 'coerce' call_tmp[609293] call_tmp[609298]))
      gotoReturn _end_dec[506880] _end_dec[506880]
      (474595 'end of statement' got[52004])
    }
    {
      unknown call_tmp[609305] "expr temp" "maybe param" "maybe type" "temp"
      (609308 'move' call_tmp[609305](357271 call _cnt _mt[243] this[52105]))
      unknown call_tmp[609312] "maybe param" "maybe type" "temp"
      (609315 'move' call_tmp[609312](52060 call(52055 call (partial) fetchSub _mt[243] call_tmp[609305]) 1))
      (540778 'init var split init' got[52004] call_tmp[609312] type_tmp[540765])
      (474597 'end of statement' got[52004])
      unknown call_tmp[609317] "expr temp" "maybe param" "maybe type" "temp"
      (609320 'move' call_tmp[609317](52067 call - got[52004] 1))
      unknown call_tmp[609322] "expr temp" "maybe param" "maybe type" "temp"
      (609325 'move' call_tmp[609322](506903 call int(64)[13] 64))
      (506906 'move' ret[506882](506905 'coerce' call_tmp[609317] call_tmp[609322]))
      gotoReturn _end_dec[506880] _end_dec[506880]
      (474599 'end of statement' got[52004])
    }
    label _end_dec[506880]
    (506884 return ret[506882])
  }
  { scopeless type
    (51999 call int(64)[13] 64)
  }
  function atomic_refcnt[52099].read[52080](arg _mt[52111]:_MT[238], arg this[52109]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506912] "RVV" "temp"
    unknown call_tmp[609329] "expr temp" "maybe param" "maybe type" "temp"
    (609332 'move' call_tmp[609329](357276 call _cnt _mt[243] this[52109]))
    unknown call_tmp[609336] "expr temp" "maybe param" "maybe type" "temp"
    (609339 'move' call_tmp[609336](52091 call(52087 call (partial) read _mt[243] call_tmp[609329])))
    unknown call_tmp[609341] "expr temp" "maybe param" "maybe type" "temp"
    (609344 'move' call_tmp[609341](506917 call int(64)[13] 64))
    (506920 'move' ret[506912](506919 'coerce' call_tmp[609336] call_tmp[609341]))
    (506914 return ret[506912])
  }
  { scopeless type
    (52085 call int(64)[13] 64)
  }
  type atomic_refcnt[52099] unknown _cnt[51949](51948 call chpl__processorAtomicType int(64)[13])
  (355098 'used modules list'(51941 'use' ChapelStandard[20264]))
}