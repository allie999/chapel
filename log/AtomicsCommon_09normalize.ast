AST dump for AtomicsCommon after pass normalize.
Module use list: ChapelStandard 

{
  function chpl__init_AtomicsCommon[415977]() : void[4] "insert line file info" "module init"
  {
    (506899 return _void[55])
  }
  function atomic_refcnt[52102].inc[51962](arg _mt[52106]:_MT[238], arg this[52104]:atomic_refcnt[52102], arg cnt[51959] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609211] "expr temp" "maybe param" "maybe type" "temp"
    (609214 'move' call_tmp[609211](51986 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609211]
    {
      unknown call_tmp[609218] "expr temp" "maybe param" "maybe type" "temp"
      (609221 'move' call_tmp[609218](357236 call _cnt _mt[243] this[52104]))
      (51976 call(51966 call (partial) add _mt[243] call_tmp[609218]) cnt[51959](order = relaxed[187010]))
    }
    {
      unknown call_tmp[609227] "expr temp" "maybe param" "maybe type" "temp"
      (609230 'move' call_tmp[609227](357242 call _cnt _mt[243] this[52104]))
      (51984 call(51979 call (partial) add _mt[243] call_tmp[609227]) cnt[51959])
    }
    (506855 return _void[55])
  }
  function atomic_refcnt[52102].dec[51997](arg _mt[52110]:_MT[238], arg this[52108]:atomic_refcnt[52102]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506859] "RVV" "temp"
    unknown got[52007] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[540742] "maybe param" "maybe type" "temp"
    (540750 'move' type_tmp[540742](540748 call int(64)[13] 64))
    (540744 'init var split decl' got[52007] type_tmp[540742])
    (52010 'end of statement')
    unknown call_tmp[609234] "expr temp" "maybe param" "maybe type" "temp"
    (609237 'move' call_tmp[609234](52074 call _cond_test CHPL_CACHE_REMOTE[367]))
    if call_tmp[609234]
    {
      unknown call_tmp[609241] "expr temp" "maybe param" "maybe type" "temp"
      (609244 'move' call_tmp[609241](357247 call _cnt _mt[243] this[52108]))
      unknown call_tmp[609248] "maybe param" "maybe type" "temp"
      (609251 'move' call_tmp[609248](52025 call(52015 call (partial) fetchSub _mt[243] call_tmp[609241]) 1(order = release[187006])))
      (540752 'init var split init' got[52007] call_tmp[609248] type_tmp[540742])
      (474575 'end of statement' got[52007])
      unknown call_tmp[609253] "expr temp" "maybe param" "maybe type" "temp"
      (609256 'move' call_tmp[609253](52032 call == got[52007] 1))
      unknown call_tmp[609258] "expr temp" "maybe param" "maybe type" "temp"
      (609261 'move' call_tmp[609258](52046 call _cond_test call_tmp[609253]))
      if call_tmp[609258]
      {
        (52040 call atomicFence acquire[187008])
        (474577 'end of statement')
        unknown call_tmp[609263] "expr temp" "maybe param" "maybe type" "temp"
        (609266 'move' call_tmp[609263](506864 call int(64)[13] 64))
        (506867 'move' ret[506859](506866 'coerce' 0 call_tmp[609263]))
        gotoReturn _end_dec[506857] _end_dec[506857]
      }
      unknown call_tmp[609268] "expr temp" "maybe param" "maybe type" "temp"
      (609271 'move' call_tmp[609268](52052 call - got[52007] 1))
      unknown call_tmp[609273] "expr temp" "maybe param" "maybe type" "temp"
      (609276 'move' call_tmp[609273](506872 call int(64)[13] 64))
      (506875 'move' ret[506859](506874 'coerce' call_tmp[609268] call_tmp[609273]))
      gotoReturn _end_dec[506857] _end_dec[506857]
      (474579 'end of statement' got[52007])
    }
    {
      unknown call_tmp[609280] "expr temp" "maybe param" "maybe type" "temp"
      (609283 'move' call_tmp[609280](357254 call _cnt _mt[243] this[52108]))
      unknown call_tmp[609287] "maybe param" "maybe type" "temp"
      (609290 'move' call_tmp[609287](52063 call(52058 call (partial) fetchSub _mt[243] call_tmp[609280]) 1))
      (540755 'init var split init' got[52007] call_tmp[609287] type_tmp[540742])
      (474581 'end of statement' got[52007])
      unknown call_tmp[609292] "expr temp" "maybe param" "maybe type" "temp"
      (609295 'move' call_tmp[609292](52070 call - got[52007] 1))
      unknown call_tmp[609297] "expr temp" "maybe param" "maybe type" "temp"
      (609300 'move' call_tmp[609297](506880 call int(64)[13] 64))
      (506883 'move' ret[506859](506882 'coerce' call_tmp[609292] call_tmp[609297]))
      gotoReturn _end_dec[506857] _end_dec[506857]
      (474583 'end of statement' got[52007])
    }
    label _end_dec[506857]
    (506861 return ret[506859])
  }
  { scopeless type
    (52002 call int(64)[13] 64)
  }
  function atomic_refcnt[52102].read[52083](arg _mt[52114]:_MT[238], arg this[52112]:atomic_refcnt[52102]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[506889] "RVV" "temp"
    unknown call_tmp[609304] "expr temp" "maybe param" "maybe type" "temp"
    (609307 'move' call_tmp[609304](357259 call _cnt _mt[243] this[52112]))
    unknown call_tmp[609311] "expr temp" "maybe param" "maybe type" "temp"
    (609314 'move' call_tmp[609311](52094 call(52090 call (partial) read _mt[243] call_tmp[609304])))
    unknown call_tmp[609316] "expr temp" "maybe param" "maybe type" "temp"
    (609319 'move' call_tmp[609316](506894 call int(64)[13] 64))
    (506897 'move' ret[506889](506896 'coerce' call_tmp[609311] call_tmp[609316]))
    (506891 return ret[506889])
  }
  { scopeless type
    (52088 call int(64)[13] 64)
  }
  type atomic_refcnt[52102] unknown _cnt[51952](51951 call chpl__processorAtomicType int(64)[13])
  (355081 'used modules list'(51944 'use' ChapelStandard[20267]))
}