AST dump for SequentialInPlacePartitioning after pass expandExternArrayCalls.
Module use list: 

{
  (353151 'use' ChapelStandard)
  { scopeless
    unknown DISTRIBUTE_BUFFER[278188] "param" "private" 5
    (278191 'end of statement')
  }
  function bucketize[278199](arg start_n[278196] :
  int[13], arg end_n[278202] :
  int[13], arg A[278208] :
  (278205 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[278211]:_any[178](?), arg criterion[278213]:_any[178](?), arg startbit[278216] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown nBuckets[278227](278226 call(278222 call . bucketizer c"getNumBuckets"))
      (278230 'end of statement')
    }
    { scopeless
      const nTasks[278244] "const"(278241 IfExpr (278234 call > dataParTasksPerLocale 0) then
      { scopeless
        dataParTasksPerLocale
      } else
      { scopeless
        (278238 call . here c"maxTaskPar")
      } )
      (278247 'end of statement')
    }
    { scopeless
      const countsSize[278252] "const"(278250 call * nTasks nBuckets)
      (278255 'end of statement')
    }
    { scopeless
      const n[278263] "const"(278261 call +(278258 call - end_n start_n) 1)
      (278266 'end of statement')
    }
    { scopeless
      const blockSize[278272] "const"(278271 call divceil n nTasks)
      (278275 'end of statement')
    }
    { scopeless
      const nBlocks[278281] "const"(278280 call divceil n blockSize)
      (278284 'end of statement')
    }
    { scopeless
      unknown counts[278297](278295 call chpl__buildArrayRuntimeType(278293 call chpl__ensureDomainExpr(278289 call #(278286 call chpl_build_low_bounded_range 0) nBuckets)) int[13])
      (278300 'end of statement')
    }
    {
      unknown tmpIter[278429] "expr temp" "maybe ref" "no copy" "temp"
      (278432 'move' tmpIter[278429](278306 call #(278303 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[278668] "maybe param" "temp"
      (278683 'move' isRngDomArr[278668](278681 call ||(278670 call isBoundedRange tmpIter[278429])(278679 call ||(278673 call isDomain tmpIter[278429])(278676 call isArray tmpIter[278429]))))
      if isRngDomArr[278668]
      {
        const _coforallCount[278535] "const" "end count" "temp"
        (278604 'move' _coforallCount[278535](278601 call _endCountAlloc 1))
        unknown numTasks[278536] "temp"
        (278588 'move' numTasks[278536](278584 call . tmpIter[278429] c"size"))
        (278579 call _upEndCount _coforallCount[278535] 1 numTasks[278536])
        (278576 call chpl_resetTaskSpawn numTasks[278536])
        unknown _indexOfInterest[278543] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[278544] "expr temp" "temp"
        (278553 'move' _iterator[278544](278551 call _getIterator tmpIter[278429]))
        Defer
        {
          {
            (278569 call _freeIterator _iterator[278544])
          }
        }
        { scopeless type
          (278558 'move' _indexOfInterest[278543](278555 call iteratorIndex _iterator[278544]))
        }
        ForLoop[278545]
        {
          unknown tid[278562] "coforall index var" "index var" "insert auto destroy"
          (278564 'move' tid[278562] _indexOfInterest[278543])
          {
            {
              { scopeless
                unknown start[278439](278441 call + start_n(278444 call * tid blockSize))
                (278448 'end of statement')
              }
              { scopeless
                unknown end[278450](278452 call -(278454 call + start blockSize) 1)
                (278459 'end of statement')
              }
              if(278461 call _cond_test(278463 call > end end_n))
              {
                (278468 call = end end_n)
              }
              {
                unknown _indexOfInterest[278473] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[278475] "expr temp" "temp"
                (278477 'move' _iterator[278475](278480 call _getIterator(278485 call(278482 call . bucketizer c"classify") A start end criterion startbit)))
                Defer
                {
                  {
                    (278493 call _freeIterator _iterator[278475])
                  }
                }
                { scopeless type
                  (278497 'move' _indexOfInterest[278473](278500 call iteratorIndex _iterator[278475]))
                }
                ForLoop[278502]
                {
                  (278506 call _check_tuple_var_decl _indexOfInterest[278473] 2)
                  unknown i[278509] "index var" "insert auto destroy"
                  (278511 'move' i[278509](278514 call _indexOfInterest[278473] 0))
                  unknown bin[278516] "index var" "insert auto destroy"
                  (278518 'move' bin[278516](278521 call _indexOfInterest[278473] 1))
                  {
                    (278525 call +=(278527 call counts bin) 1)
                  }
                  label _continueLabel[278530]
                  _indexOfInterest[278473]
                  _iterator[278475]
                }
                label _breakLabel[278532]
              }
            }
            (278538 call _downEndCount _coforallCount[278535] nil[44])
            (278537 'coforall loop')
            (278434 'actuals list' SumReduceScanOp counts)
          }
          label _continueLabel[278548]
          _indexOfInterest[278543]
          _iterator[278544]
        }
        label _breakLabel[278549]
        Defer
        {
          {
            (278591 call _endCountFree _coforallCount[278535])
          }
        }
        (278596 call _waitEndCount _coforallCount[278535] 1 numTasks[278536])
      }
      {
        const _coforallCount[278608] "const" "end count" "temp"
        (278665 'move' _coforallCount[278608](278662 call _endCountAlloc 1))
        unknown _indexOfInterest[278616] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[278617] "expr temp" "temp"
        (278626 'move' _iterator[278617](278624 call _getIterator tmpIter[278429]))
        Defer
        {
          {
            (278642 call _freeIterator _iterator[278617])
          }
        }
        { scopeless type
          (278631 'move' _indexOfInterest[278616](278628 call iteratorIndex _iterator[278617]))
        }
        ForLoop[278618]
        {
          unknown tid[278635] "coforall index var" "index var" "insert auto destroy"
          (278637 'move' tid[278635] _indexOfInterest[278616])
          (278649 call _upEndCount _coforallCount[278608] 1)
          {
            {
              { scopeless
                unknown start[278324](278322 call + start_n(278320 call * tid blockSize))
                (278327 'end of statement')
              }
              { scopeless
                unknown end[278336](278334 call -(278331 call + start blockSize) 1)
                (278339 'end of statement')
              }
              if(278350 call _cond_test(278342 call > end end_n))
              {
                (278346 call = end end_n)
              }
              {
                unknown _indexOfInterest[278381] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[278382] "expr temp" "temp"
                (278391 'move' _iterator[278382](278389 call _getIterator(278371 call(278362 call . bucketizer c"classify") A start end criterion startbit)))
                Defer
                {
                  {
                    (278422 call _freeIterator _iterator[278382])
                  }
                }
                { scopeless type
                  (278397 'move' _indexOfInterest[278381](278394 call iteratorIndex _iterator[278382]))
                }
                ForLoop[278383]
                {
                  (278402 call _check_tuple_var_decl _indexOfInterest[278381] 2)
                  unknown i[278408] "index var" "insert auto destroy"
                  (278410 'move' i[278408](278406 call _indexOfInterest[278381] 0))
                  unknown bin[278415] "index var" "insert auto destroy"
                  (278417 'move' bin[278415](278413 call _indexOfInterest[278381] 1))
                  {
                    (278377 call +=(278375 call counts bin) 1)
                  }
                  label _continueLabel[278386]
                  _indexOfInterest[278381]
                  _iterator[278382]
                }
                label _breakLabel[278387]
              }
            }
            (278611 call _downEndCount _coforallCount[278608] nil[44])
            (278610 'coforall loop')
            (278315 'actuals list' SumReduceScanOp counts)
          }
          label _continueLabel[278621]
          _indexOfInterest[278616]
          _iterator[278617]
        }
        label _breakLabel[278622]
        Defer
        {
          {
            (278653 call _endCountFree _coforallCount[278608])
          }
        }
        (278658 call _waitEndCount _coforallCount[278608] 1)
      }
    }
    { scopeless
      unknown end_offsets[278726](278724 call +(278722 call function chpl__scan3[278689](arg chpl_toScan[278691]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
      {
        unknown chpl_eltType[278693] "maybe type" "temp"
        { scopeless type
          (278697 'move' chpl_eltType[278693](278699 'typeof'(278701 call chpl__initCopy(278703 call iteratorIndex(278705 call _getIterator chpl_toScan[278691])))))
        }
        const tmp[278694] "const" "temp"
        (278714 'move' tmp[278694](278713 'new'(278712 call SumReduceScanOp(eltType = chpl_eltType[278693])(_chpl_manager = unmanaged[220](?)))))
        (278716 return(278718 call chpl__scanIterator tmp[278694] chpl_toScan[278691]))
      } counts) start_n)
      (278729 'end of statement')
    }
    { scopeless
      unknown offsets[278734](278732 call - end_offsets counts)
      (278737 'end of statement')
    }
    { scopeless
      unknown curbin[278739] 0
      (278742 'end of statement')
    }
    {
      unknown tmp[279256] "temp"
      (279274 'move' tmp[279256](279272 call _cond_test 1))
      WhileDo[279261]
      {
        {
          {
            unknown tmp[278766] "temp"
            (278810 'move' tmp[278766](278795 call _cond_test(278797 call &&(278799 call < curbin nBuckets)(278803 call ==(278805 call offsets curbin)(278808 call end_offsets curbin)))))
            WhileDo[278771]
            {
              {
                (278762 call += curbin 1)
              }
              label _continueLabel[278769]
              (278790 'move' tmp[278766](278775 call _cond_test(278777 call &&(278779 call < curbin nBuckets)(278783 call ==(278785 call offsets curbin)(278788 call end_offsets curbin)))))
              tmp[278766]
            }
            label _breakLabel[278770]
          }
          if(278822 call _cond_test(278816 call >= curbin nBuckets))
          {
            break nil[44]
          }
          { scopeless
            unknown max_buf[278827] "param" DISTRIBUTE_BUFFER
            (278830 'end of statement')
          }
          { scopeless
            unknown buf[278838](278836 call * max_buf(278833 call . A c"eltType"))
            (278841 'end of statement')
          }
          { scopeless
            unknown used_buf[278843] 0
            (278846 'end of statement')
          }
          { scopeless
            unknown end[278851](278850 call end_offsets curbin)
            (278854 'end of statement')
          }
          { scopeless
            unknown endfast[278872](278871 call max(278859 call offsets curbin)(278869 call -(278864 call end_offsets curbin)(278867 call * 2 max_buf)))
            (278875 'end of statement')
          }
          { scopeless
            unknown bufstart[278890](278889 call max(278880 call offsets curbin)(278887 call -(278885 call end_offsets curbin) max_buf))
            (278893 'end of statement')
          }
          { scopeless
            unknown i[278895] bufstart
            (278898 'end of statement')
          }
          {
            unknown tmp[278925] "temp"
            (278949 'move' tmp[278925](278944 call _cond_test(278946 call < i end)))
            WhileDo[278930]
            {
              {
                (278911 call <=>(278906 call buf used_buf)(278910 call A i))
                (278917 call += used_buf 1)
                (278922 call += i 1)
              }
              label _continueLabel[278928]
              (278939 'move' tmp[278925](278934 call _cond_test(278936 call < i end)))
              tmp[278925]
            }
            label _breakLabel[278929]
          }
          {
            unknown tmp[279050] "temp"
            (279078 'move' tmp[279050](279071 call _cond_test(279073 call <(279075 call offsets curbin) endfast)))
            WhileDo[279055]
            {
              {
                {
                  unknown _indexOfInterest[279001] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[279002] "expr temp" "temp"
                  (279011 'move' _iterator[279002](279009 call _getIterator(278977 call(278965 call . bucketizer c"classify") buf 0(278973 call - max_buf 1) criterion startbit)))
                  Defer
                  {
                    {
                      (279042 call _freeIterator _iterator[279002])
                    }
                  }
                  { scopeless type
                    (279017 'move' _indexOfInterest[279001](279014 call iteratorIndex _iterator[279002]))
                  }
                  ForLoop[279003]
                  {
                    (279022 call _check_tuple_var_decl _indexOfInterest[279001] 2)
                    unknown idx[279028] "index var" "insert auto destroy"
                    (279030 'move' idx[279028](279026 call _indexOfInterest[279001] 0))
                    unknown bin[279035] "index var" "insert auto destroy"
                    (279037 'move' bin[279035](279033 call _indexOfInterest[279001] 1))
                    {
                      (278989 call <=>(278984 call A(278982 call offsets bin))(278988 call buf idx))
                      (278998 call +=(278996 call offsets bin) 1)
                    }
                    label _continueLabel[279006]
                    _indexOfInterest[279001]
                    _iterator[279002]
                  }
                  label _breakLabel[279007]
                }
              }
              label _continueLabel[279053]
              (279066 'move' tmp[279050](279059 call _cond_test(279061 call <(279063 call offsets curbin) endfast)))
              tmp[279050]
            }
            label _breakLabel[279054]
          }
          {
            unknown tmp[279225] "temp"
            (279253 'move' tmp[279225](279246 call _cond_test(279248 call <(279250 call offsets curbin) end)))
            WhileDo[279230]
            {
              {
                { scopeless
                  unknown j[279089] 0
                  (279092 'end of statement')
                }
                {
                  unknown tmp[279186] "temp"
                  (279222 'move' tmp[279186](279211 call _cond_test(279213 call &&(279215 call >= used_buf 0)(279219 call < j used_buf))))
                  WhileDo[279191]
                  {
                    {
                      { scopeless
                        const bin[279118] "const"(279117 call(279107 call . bucketizer c"bucketForRecord")(279113 call buf j) criterion startbit)
                        (279121 'end of statement')
                      }
                      { scopeless
                        unknown offset[279127](279126 call offsets bin)
                        (279130 'end of statement')
                      }
                      (279139 call <=>(279134 call A offset)(279138 call buf j))
                      (279147 call +=(279145 call offsets bin) 1)
                      if(279177 call _cond_test(279158 call &&(279152 call == bin curbin)(279156 call >= offset bufstart)))
                      {
                        (279162 call -= used_buf 1)
                        (279174 call <=>(279169 call buf j)(279173 call buf used_buf))
                      }
                      (279183 call += j 1)
                    }
                    label _continueLabel[279189]
                    (279206 'move' tmp[279186](279195 call _cond_test(279197 call &&(279199 call >= used_buf 0)(279203 call < j used_buf))))
                    tmp[279186]
                  }
                  label _breakLabel[279190]
                }
              }
              label _continueLabel[279228]
              (279241 'move' tmp[279225](279234 call _cond_test(279236 call <(279238 call offsets curbin) end)))
              tmp[279225]
            }
            label _breakLabel[279229]
          }
        }
        label _continueLabel[279259]
        (279267 'move' tmp[279256](279265 call _cond_test 1))
        tmp[279256]
      }
      label _breakLabel[279260]
    }
    (279278 return counts)
  }
}