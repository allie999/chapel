AST dump for Reflection after pass scopeResolve.
Module use list: ChapelStandard 

{
  function checkQueryT[224799](arg t[224797]:_any[178](?)) type : _unknown[51] "private"
  {
    if(224857 call _cond_test(224804 call isClassType t[224797]))
    {
      (224810 return(224808 call _cast _borrowedNonNilable[214](?) t[224797]))
    }
    {
      if(224851 call _cond_test(224820 call ||(224815 call isRecordType t[224797])(224819 call isUnionType t[224797])))
      {
        (224823 return t[224797])
      }
      {
        (224849 call compilerError(224828 call _cast string[26] t[224797]) " is not a class, record, or union type" 2)
      }
    }
  }
  function numFields[224871](arg t[224869]:_any[178](?)) param : _unknown[51]
  {
    (224881 return(224880 'num fields'(224879 call checkQueryT t[224869])))
  }
  { scopeless type
    int(64)[13]
  }
  function getFieldName[224891](arg t[224889]:_any[178](?), param arg i[224894] :
  int(64)[13]) param : _unknown[51]
  {
    (224909 return(224908 'field num to name'(224903 call checkQueryT t[224889])(224906 call + i[224894] 1)))
  }
  { scopeless type
    string[26]
  }
  function getField[224922](const  ref arg x[224919] :
  unknown t[224917], param arg i[224925] :
  int(64)[13]) param : _unknown[51]
  {
    (224962 return(224961 'field by num' x[224919](224959 call + i[224925] 1)))
  }
  where {
    (224952 call &&(224939 call &&(224930 call >= i[224925] 0)(224937 call < i[224925](224936 call numFields t[224917])))(224951 call isParam(224949 'field by num' x[224919](224947 call + i[224925] 1))))
  }
  function getField[224975](const  ref arg x[224972] :
  unknown t[224970], param arg i[224978] :
  int(64)[13]) type : _unknown[51]
  {
    (225015 return(225014 'field by num' x[224972](225012 call + i[224978] 1)))
  }
  where {
    (225005 call &&(224992 call &&(224983 call >= i[224978] 0)(224990 call < i[224978](224989 call numFields t[224970])))(225004 call isType(225002 'field by num' x[224972](225000 call + i[224978] 1))))
  }
  function getField[225028](const  ref arg x[225025] :
  unknown t[225023], param arg i[225031] :
  int(64)[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    (225042 return(225041 'field by num' x[225025](225039 call + i[225031] 1)))
  }
  function getField[225054](const  ref arg x[225051] :
  unknown t[225049], param arg s[225057] :
  string[26]) param : _unknown[51]
  {
    (225093 return(225092 call getField x[225051](225091 call getFieldIndex t[225049] s[225057])))
  }
  where {
    (225082 call &&(225068 call !=(225064 call getFieldIndex t[225049] s[225057])(225066 call - 1))(225081 call isParam(225079 call getField x[225051](225078 call getFieldIndex t[225049] s[225057]))))
  }
  function getField[225106](const  ref arg x[225103] :
  unknown t[225101], param arg s[225109] :
  string[26]) type : _unknown[51]
  {
    (225145 return(225144 call getField x[225103](225143 call getFieldIndex t[225101] s[225109])))
  }
  where {
    (225134 call &&(225120 call !=(225116 call getFieldIndex t[225101] s[225109])(225118 call - 1))(225133 call isType(225131 call getField x[225103](225130 call getFieldIndex t[225101] s[225109]))))
  }
  function getField[225158](const  ref arg x[225155] :
  unknown t[225153], param arg s[225161] :
  string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown i[225185] "param"(225184 'field name to num' t[225153] s[225161])
    (225188 'end of statement')
    if(225237 call _cond_test(225192 call == i[225185] 0))
    {
      (225235 call compilerError "field " s[225161] " not found in "(225233 call _cast string[26] t[225153]))
    }
    (225247 return(225246 'field by num' x[225155] i[225185]))
  }
  function isImplementedWithRecords[225255](arg t[225253]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (225267 return(225265 call ||(225260 call isRangeType t[225253])(225264 call isStringType t[225253])))
  }
  function numImplementationFields[225276](arg t[225274]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (225287 return(225286 'num fields' t[225274]))
  }
  where {
    (225282 call isImplementedWithRecords t[225274])
  }
  { scopeless type
    int(64)[13]
  }
  function getImplementationField[225301](const  ref arg x[225298] :
  unknown t[225296], param arg i[225304] :
  int(64)[13]) type : _unknown[51] "no doc"
  {
    (225326 return(225325 'field by num' x[225298] i[225304]))
  }
  where {
    (225319 call &&(225310 call isImplementedWithRecords t[225296])(225318 call isType(225316 'field by num' x[225298] i[225304])))
  }
  function getImplementationField[225339](const  ref arg x[225336] :
  unknown t[225334], param arg i[225342] :
  int(64)[13]) param : _unknown[51] "no doc"
  {
    (225364 return(225363 'field by num' x[225336] i[225342]))
  }
  where {
    (225357 call &&(225348 call isImplementedWithRecords t[225334])(225356 call isParam(225354 'field by num' x[225336] i[225342])))
  }
  function getImplementationField[225377](const  ref arg x[225374] :
  unknown t[225372], param arg i[225380] :
  int(64)[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    if(225431 call _cond_test(225387 call !(225386 call isImplementedWithRecords t[225372])))
    {
      (225429 call compilerError "an argument of the type "(225410 call _cast string[26] t[225372]) " is not valid for getImplementationField()")
    }
    (225442 return(225441 'field by num' x[225374] i[225380]))
  }
  function getFieldRef[225453](ref arg x[225450] :
  unknown t[225448], param arg i[225456] :
  int(64)[13]) ref : _unknown[51] "inline" "unsafe"
  {
    (225467 return(225466 'field by num' x[225450](225464 call + i[225456] 1)))
  }
  function getFieldRef[225479](ref arg x[225476] :
  unknown t[225474], param arg s[225482] :
  string[26]) ref : _unknown[51] "unsafe"
  {
    unknown i[225490] "param"(225489 'field name to num' t[225474] s[225482])
    (225493 'end of statement')
    if(225510 call _cond_test(225497 call == i[225490] 0))
    {
      (225508 call compilerError "field " s[225482] " not found in "(225506 call _cast string[26] t[225474]))
    }
    (225520 return(225519 'field by num' x[225476] i[225490]))
  }
  function getFieldIndex[225528](arg t[225526]:_any[178](?), param arg s[225531] :
  string[26]) param : _unknown[51]
  {
    (225546 return(225544 call -(225542 'field name to num'(225540 call checkQueryT t[225526]) s[225531]) 1))
  }
  { scopeless type
    int(64)[13]
  }
  function hasField[225556](arg t[225554]:_any[178](?), param arg s[225559] :
  string[26]) param : _unknown[51]
  {
    (225571 return(225569 call >=(225567 call getFieldIndex t[225554] s[225559]) 0))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225581](arg t[225579]:_any[178](?), param arg i[225584] :
  int(64)[13]) param : _unknown[51]
  {
    (225619 return(225618 'is bound'(225609 call checkQueryT t[225579])(225617 call getFieldName(225614 call checkQueryT t[225579]) i[225584])))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225629](arg t[225627]:_any[178](?), param arg s[225632] :
  string[26]) param : _unknown[51]
  {
    (225644 return(225643 'is bound'(225641 call checkQueryT t[225627]) s[225632]))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225656](param arg fname[225653] :
  string[26]) param : _unknown[51]
  {
    (225679 return(225678 'call and fn resolves' fname[225653]))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225691](param arg fname[225688] :
  string[26], arg args[225694]:_any[178](?) ...) param : _unknown[51]
  {
    (225704 return(225703 'call and fn resolves' fname[225688](225702 'expand_tuple' args[225694])))
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225714](arg obj[225712]:_any[178](?), param arg fname[225717] :
  string[26]) param : _unknown[51]
  {
    (225742 return(225741 'method call and fn resolves' obj[225712] fname[225717]))
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225752](arg obj[225750]:_any[178](?), param arg fname[225755] :
  string[26], arg args[225759]:_any[178](?) ...) param : _unknown[51]
  {
    (225770 return(225769 'method call and fn resolves' obj[225750] fname[225755](225768 'expand_tuple' args[225759])))
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225780](arg t[225778]:_any[178](?), param arg fname[225783] :
  string[26]) param : _unknown[51]
  {
    (225792 return(225791 'method call and fn resolves' t[225778] fname[225783]))
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225802](arg t[225800]:_any[178](?), param arg fname[225805] :
  string[26], arg args[225809]:_any[178](?) ...) param : _unknown[51]
  {
    (225820 return(225819 'method call and fn resolves' t[225800] fname[225805](225818 'expand_tuple' args[225809])))
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225828]() param : _unknown[51] "get line number" "no return value for void"
  {
  }
  { scopeless type
    int(64)[13]
  }
  function getFileName[225837]() param : _unknown[51] "get file name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225846]() param : _unknown[51] "get function name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225855]() param : _unknown[51] "get module name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  (355211 'used modules list'(352918 'use' ChapelStandard[20264]))
}