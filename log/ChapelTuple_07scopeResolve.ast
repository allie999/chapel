AST dump for ChapelTuple after pass scopeResolve.
Module use list: ChapelStandard DSIUtil 

{
  type _tuple[56202](?) unknown size[56197] "param" int(64)[13]
  function chpl__init_tuple[56211](param arg size[56208] :
  int(64)[13]) : _unknown[51] "tuple init fn" "inline" "no return value for void"
  {
  }
  function _build_tuple[56222](arg t[56219]:_any[178](?) ...) type : _unknown[51] "build tuple" "build tuple type" "inline" "no return value for void"
  {
  }
  function _build_tuple[56233](arg x[56230]:_any[178](?) ...) : _unknown[51] "build tuple" "inline"
  {
    (56236 return x[56230])
  }
  function _build_tuple_noref[56247](arg t[56244]:_any[178](?) ...) type : _unknown[51] "do not allow ref" "build tuple" "build tuple type" "inline" "no return value for void"
  {
  }
  function _build_tuple_always_allow_ref[56258](arg x[56255]:_any[178](?) ...) : _unknown[51] "allow ref" "build tuple" "inline" "suppress lvalue error"
  {
    (56261 return x[56255])
  }
  function chpl__unref[56270](arg t[56268]:_any[178](?)) type : _unknown[51] "inline"
  {
    if(56286 call _cond_test(56275 call isTupleType t[56268]))
    {
      (56281 return(56280 call _build_tuple_noref(56278 'expand_tuple' t[56268])))
    }
    {
      (56284 return t[56268])
    }
  }
  function *[56301](param arg p[56298] :
  int(64)[13], arg t[56303]:_any[178](?)) type : _unknown[51] "build tuple" "build tuple type" "star tuple" "no return value for void"
  {
  }
  function *[56314](param arg p[56311] :
  uint(64)[115], arg t[56316]:_any[178](?)) type : _unknown[51] "no doc"
  {
    if(56374 call _cond_test(56323 call > p[56311](56322 call max int(64)[13])))
    {
      (56372 call compilerError(56369 call +(56350 call + "Tuples of size >"(56348 call _cast string[26](56346 call max int(64)[13]))) " are not currently supported"))
    }
    unknown pAsInt[56384] "param"(56382 call _cast int(64)[13] p[56311])
    (56387 'end of statement')
    (56392 return(56390 call * pAsInt[56384] t[56316]))
  }
  function *[56402](param arg p[56399] :
  bool[10], arg t[56404]:_any[178](?)) type : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    (56425 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function *[56436](arg p[56433] :
  bool[10], arg t[56438]:_any[178](?)) type : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    (56443 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function _build_star_tuple_noref[56454](param arg p[56451] :
  int(64)[13], arg t[56456]:_any[178](?)) type : _unknown[51] "do not allow ref" "build tuple" "build tuple type" "star tuple" "no return value for void"
  {
  }
  function *[56465](arg t[56463]:_any[178](?), param arg p[56468] :
  int(64)[13]) : _unknown[51] "last resort" "no return value for void"
  {
    (56492 call compilerError "<type>*<param int> not supported.  If you're trying to specify a homogeneous tuple type, use <param int>*<type>.")
  }
  function *[56503](arg p[56500] :
  integral[199](?), arg t[56505]:_any[178](?)) type : _unknown[51] "last resort" "no return value for void"
  {
    (56526 call compilerError "tuple size must be known at compile-time")
  }
  function chpl__tuplify[56535](arg x[56533]:_any[178](?)) : _unknown[51] "inline"
  {
    if(56549 call _cond_test(56540 call isTuple x[56533]))
    {
      (56542 return x[56533])
    }
    {
      (56547 return(56545 call _build_tuple x[56533]))
    }
  }
  function isTupleValue[56564](arg x[56561] :
  _tuple[56202](?)) param : _unknown[51] "no doc"
  {
    (56567 return 1)
  }
  function isTupleValue[56576](arg x[56574]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (56579 return 0)
  }
  function isHomogeneousTupleValue[56588](arg x[56586]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (56610 return(56609 'is star tuple type' x[56586]))
  }
  function _check_tuple_var_decl[56621](arg x[56618] :
  _tuple[56202](?), param arg p[56623]:_any[178](?)) param : _unknown[51] "no doc"
  {
    if(56714 call _cond_test(56630 call == p[56623](56627 call . x[56618] c"size")))
    {
      (56633 return 1)
    }
    {
      (56708 call compilerError(56705 call +(56686 call +(56680 call +(56661 call + "tuple size ("(56659 call _cast string[26](56655 call . x[56618] c"size"))) ") must match the number of grouped variables (")(56684 call _cast string[26] p[56623])) ")"))
      (56712 return 0)
    }
  }
  function _check_tuple_var_decl[56725](arg x[56723]:_any[178](?), param arg p[56727]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (56748 call compilerError "illegal tuple variable declaration with non-tuple initializer")
    (56752 return 0)
  }
  function isTupleType[56760](arg t[56758]:_any[178](?)) param : _unknown[51]
  {
    (56782 return(56781 'is tuple type' t[56758]))
  }
  function isHomogeneousTupleType[56791](arg t[56789]:_any[178](?)) param : _unknown[51]
  {
    (56797 return(56796 'is star tuple type' t[56789]))
  }
  function =[56808](ref arg x[56805] :
  _tuple[56202](?), arg y[56811] :
  _tuple[56202](?)) : _unknown[51] "assignop" "compiler generated" "inline" "last resort" "no return value for void"
  {
    {
      unknown i[56845] 0
      unknown tmp[56846] "maybe param" "temp"
      (56858 'move' tmp[56846](56856 call chpl_compute_low_param_loop_bound 0(56830 call -(56826 call . x[56805] c"size") 1)))
      unknown tmp[56847] "maybe param" "temp"
      (56871 'move' tmp[56847](56869 call chpl_compute_high_param_loop_bound 0(56863 call -(56865 call . x[56805] c"size") 1)))
      unknown tmp[56848] "maybe param" "temp"
      (56874 'move' tmp[56848] 1)
      ParamForLoop[56876]
      { i[56845] tmp[56846] tmp[56847] tmp[56848]
        (56842 call =(56837 call x[56805] i[56845])(56841 call y[56811] i[56845]))
      }
      label _unused_continueLabel[56850]
      label _breakLabel[56849]
    }
  }
  where {
    (56822 call ==(56815 call . x[56805] c"size")(56819 call . y[56811] c"size"))
  }
  function _tuple[56202](?).this[56896](arg _mt[56901]:_MT[238], arg this[56898]:_tuple[56202](?) :
  _tuple[56202](?), arg i[56893] :
  integral[199](?)) ref : _unknown[51] "method" "no doc" "reference to const when const this" "star tuple accessor"
  {
    if(56932 call _cond_test(56907 call !(56906 call isHomogeneousTuple this[56898])))
    {
      (56930 call compilerError "invalid access of non-homogeneous tuple by runtime value")
    }
    if(56979 call _cond_test 1)
    {
      if(56974 call _cond_test(56950 call ||(56941 call < i[56893] 0)(56948 call > i[56893](56946 call -(373105 call . this[56898] c"size") 1))))
      {
        (56972 call halt "tuple access out of bounds: " i[56893])
      }
    }
    (57005 return(57004 'get svec member' this[56898] i[56893]))
  }
  unknown CHPL_WARN_TUPLE_ITERATION[57026] "config" "no doc" "param" "unset"
  (57029 'end of statement')
  function _tuple[56202](?).these[57033](arg _mt[57038]:_MT[238], arg this[57035]:_tuple[56202](?) :
  _tuple[56202](?)) ref : _unknown[51] "iterator fn" "method" "no doc" "reference to const when const this" "no return value for void"
  {
    if(57067 call _cond_test(57044 call !(57043 call isHomogeneousTuple this[57035])))
    {
      (57065 call compilerError "Heterogeneous tuples don't support this style of loop yet")
    }
    if(57116 call _cond_test(57091 call == CHPL_WARN_TUPLE_ITERATION[57026] "true"))
    {
      (57114 call compilerWarning "Iterating over tuples. If you intended to use zippered iteration, add the new keyword 'zip' before the tuple of iteratable exp)
    }
    {
      unknown _indexOfInterest[57138] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57139] "expr temp" "temp"
      (57148 'move' _iterator[57139](57146 call _getIterator(57158 call chpl_direct_counted_range_iter 0(57154 call . this[57035] c"size"))))
      Defer
      {
        {
          (57174 call _freeIterator _iterator[57139])
        }
      }
      { scopeless type
        (57163 'move' _indexOfInterest[57138](57160 call iteratorIndex _iterator[57139]))
      }
      ForLoop[57140]
      {
        unknown i[57167] "index var" "insert auto destroy"
        (57169 'move' i[57167] _indexOfInterest[57138])
        {
          (57135 yield(57134 call this[57035] i[57167]))
        }
        label _continueLabel[57143]
        _indexOfInterest[57138]
        _iterator[57139]
      }
      label _breakLabel[57144]
    }
  }
  function _tuple[56202](?).these[57190](arg _mt[57195]:_MT[238], arg this[57192]:_tuple[56202](?) :
  _tuple[56202](?), param arg tag[57187] :
  iterKind[453]) ref : _unknown[51] "iterator fn" "method" "no doc" "reference to const when const this" "no return value for void"
  {
    const numTasks[57216] "const"(57213 IfExpr (57206 call == dataParTasksPerLocale[93284] 0) then
    { scopeless
      (57209 call .(357342 call here[90438]) c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale[93284]
    } )
    (57219 'end of statement')
    const ignoreRunning[57222] "const" dataParIgnoreRunningTasks[93290]
    (57225 'end of statement')
    const minIndicesPerTask[57227] "const" dataParMinGranularity[93296]
    (57230 'end of statement')
    const length[57235] "const"(57232 call . this[57192] c"size")
    (57238 'end of statement')
    const myRange[57247] "const"(57245 call _build_tuple(57243 call #(57240 call chpl_build_low_bounded_range 0) length[57235]))
    (57250 'end of statement')
    unknown tmp[57263] "temp"(57262 call _computeChunkStuff numTasks[57216] ignoreRunning[57222] minIndicesPerTask[57227] myRange[57247])
    (57267 call _check_tuple_var_decl tmp[57263] 2)
    unknown numChunks[57251](57264 call tmp[57263] 0)
    (57272 'end of statement')
    if(57519 call _cond_test(57275 call == numChunks[57251] 1))
    {
      (57278 yield myRange[57247])
    }
    {
      {
        unknown tmpIter[57325] "expr temp" "maybe ref" "no copy" "temp"
        (57328 'move' tmpIter[57325](57286 call #(57283 call chpl_build_low_bounded_range 0) numChunks[57251]))
        unknown isRngDomArr[57499] "maybe param" "temp"
        (57514 'move' isRngDomArr[57499](57512 call ||(57501 call isBoundedRange tmpIter[57325])(57510 call ||(57504 call isDomain tmpIter[57325])(57507 call isArray tmpIter[57325]))))
        if isRngDomArr[57499]
        {
          const _coforallCount[57366] "const" "end count" "temp"
          (57435 'move' _coforallCount[57366](57432 call _endCountAlloc 1))
          unknown numTasks[57367] "temp"
          (57419 'move' numTasks[57367](57415 call . tmpIter[57325] c"size"))
          (57410 call _upEndCount _coforallCount[57366] 1 numTasks[57367])
          (57407 call chpl_resetTaskSpawn numTasks[57367])
          unknown _indexOfInterest[57374] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[57375] "expr temp" "temp"
          (57384 'move' _iterator[57375](57382 call _getIterator tmpIter[57325]))
          Defer
          {
            {
              (57400 call _freeIterator _iterator[57375])
            }
          }
          { scopeless type
            (57389 'move' _indexOfInterest[57374](57386 call iteratorIndex _iterator[57375]))
          }
          ForLoop[57376]
          {
            unknown chunk[57393] "coforall index var" "index var" "insert auto destroy"
            (57395 'move' chunk[57393] _indexOfInterest[57374])
            {
              {
                const tmp[57332] "const" "temp"(57334 call _computeBlock length[57235] numChunks[57251] chunk[57393](57339 call - length[57235] 1))
                (57344 call _check_tuple_var_decl tmp[57332] 2)
                const lo[57347] "const"(57349 call tmp[57332] 0)
                const hi[57352] "const"(57354 call tmp[57332] 1)
                (57357 'end of statement')
                (57358 yield(57360 call _build_tuple(57362 call chpl_build_bounded_range lo[57347] hi[57352])))
              }
              (57369 call _downEndCount _coforallCount[57366] nil[44])
              (57368 'coforall loop')
            }
            label _continueLabel[57379]
            _indexOfInterest[57374]
            _iterator[57375]
          }
          label _breakLabel[57380]
          Defer
          {
            {
              (57422 call _endCountFree _coforallCount[57366])
            }
          }
          (57427 call _waitEndCount _coforallCount[57366] 1 numTasks[57367])
        }
        {
          const _coforallCount[57439] "const" "end count" "temp"
          (57496 'move' _coforallCount[57439](57493 call _endCountAlloc 1))
          unknown _indexOfInterest[57447] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[57448] "expr temp" "temp"
          (57457 'move' _iterator[57448](57455 call _getIterator tmpIter[57325]))
          Defer
          {
            {
              (57473 call _freeIterator _iterator[57448])
            }
          }
          { scopeless type
            (57462 'move' _indexOfInterest[57447](57459 call iteratorIndex _iterator[57448]))
          }
          ForLoop[57449]
          {
            unknown chunk[57466] "coforall index var" "index var" "insert auto destroy"
            (57468 'move' chunk[57466] _indexOfInterest[57447])
            (57480 call _upEndCount _coforallCount[57439] 1)
            {
              {
                const tmp[57303] "const" "temp"(57302 call _computeBlock length[57235] numChunks[57251] chunk[57466](57300 call - length[57235] 1))
                (57310 call _check_tuple_var_decl tmp[57303] 2)
                const lo[57288] "const"(57304 call tmp[57303] 0)
                const hi[57290] "const"(57307 call tmp[57303] 1)
                (57315 'end of statement')
                (57323 yield(57321 call _build_tuple(57319 call chpl_build_bounded_range lo[57288] hi[57290])))
              }
              (57442 call _downEndCount _coforallCount[57439] nil[44])
              (57441 'coforall loop')
            }
            label _continueLabel[57452]
            _indexOfInterest[57447]
            _iterator[57448]
          }
          label _breakLabel[57453]
          Defer
          {
            {
              (57484 call _endCountFree _coforallCount[57439])
            }
          }
          (57489 call _waitEndCount _coforallCount[57439] 1)
        }
      }
    }
  }
  where {
    (57202 call == tag[57187] leader[447])
  }
  function _tuple[56202](?).these[57533](arg _mt[57542]:_MT[238], arg this[57539]:_tuple[56202](?) :
  _tuple[56202](?), param arg tag[57530] :
  iterKind[453], arg followThis[57536] :
  _tuple[56202](?)) ref : _unknown[51] "iterator fn" "method" "no doc" "reference to const when const this" "no return value for void"
  {
    if(57579 call _cond_test(57556 call !=(57552 call . followThis[57536] c"size") 1))
    {
      (57577 call compilerError "Tuple zipped with incompatible iterator expression.")
    }
    unknown fThis[57589](57588 call followThis[57536] 0)
    (57592 'end of statement')
    {
      unknown _indexOfInterest[57602] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57603] "expr temp" "temp"
      (57612 'move' _iterator[57603](57610 call _getIterator fThis[57589]))
      Defer
      {
        {
          (57628 call _freeIterator _iterator[57603])
        }
      }
      { scopeless type
        (57617 'move' _indexOfInterest[57602](57614 call iteratorIndex _iterator[57603]))
      }
      ForLoop[57604]
      {
        unknown i[57621] "index var" "insert auto destroy"
        (57623 'move' i[57621] _indexOfInterest[57602])
        {
          (57599 yield(57598 call this[57539] i[57621]))
        }
        label _continueLabel[57607]
        _indexOfInterest[57602]
        _iterator[57603]
      }
      label _breakLabel[57608]
    }
  }
  where {
    (57549 call == tag[57530] follower[449])
  }
  function _tuple[56202](?).indices[57641](arg _mt[57646]:_MT[238], arg this[57643]:_tuple[56202](?) :
  _tuple[56202](?)) : _unknown[51] "method" "no parens"
  {
    (57658 return(57656 call chpl_build_bounded_range 0(57654 call -(57650 call . this[57643] c"size") 1)))
  }
  function _cast[57672](arg t[57669] :
  (57668 call complex(128)[140] 64), arg x[57679] :
  (57677 call _build_tuple ?[260] ?[260])) : _unknown[51] "inline"
  {
    function _chpl_complex64[57691](arg re[57688] :
    (57687 call real(64)[16] 32), arg im[57697] :
    (57696 call real(64)[16] 32)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      (57703 call complex(128)[140] 64)
    }
    (57731 return(57730 call _chpl_complex64(57717 call _cast(57716 call real(64)[16] 32)(57712 call x[57679] 0))(57728 call _cast(57727 call real(64)[16] 32)(57723 call x[57679] 1))))
  }
  function _cast[57744](arg t[57741] :
  (57740 call complex(128)[140] 128), arg x[57751] :
  (57749 call _build_tuple ?[260] ?[260])) : _unknown[51] "inline"
  {
    function _chpl_complex128[57763](arg re[57760] :
    (57759 call real(64)[16] 64), arg im[57769] :
    (57768 call real(64)[16] 64)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      (57775 call complex(128)[140] 128)
    }
    (57803 return(57802 call _chpl_complex128(57789 call _cast(57788 call real(64)[16] 64)(57784 call x[57751] 0))(57800 call _cast(57799 call real(64)[16] 64)(57795 call x[57751] 1))))
  }
  function _cast[57813](arg t[57810] :
  _tuple[56202](?), arg x[57816] :
  _tuple[56202](?)) : _unknown[51] "inline" "tuple cast fn" "unsafe" "no return value for void"
  {
  }
  function chpl__tupleRest[57828](arg t[57825] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    function chpl__tupleRestHelper[57834](arg first[57832]:_any[178](?), arg rest[57837]:_any[178](?) ...) : _unknown[51] "inline"
    {
      (57841 return rest[57837])
    }
    (57852 return(57851 call chpl__tupleRestHelper(57849 'expand_tuple' t[57825])))
  }
  function +[57862](arg a[57859] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[57866](57865 'typeof' a[57859])
    (57869 'end of statement')
    {
      unknown d[57894] 0
      unknown tmp[57895] "maybe param" "temp"
      (57907 'move' tmp[57895](57905 call chpl_compute_low_param_loop_bound 0(57877 call -(57873 call . a[57859] c"size") 1)))
      unknown tmp[57896] "maybe param" "temp"
      (57920 'move' tmp[57896](57918 call chpl_compute_high_param_loop_bound 0(57912 call -(57914 call . a[57859] c"size") 1)))
      unknown tmp[57897] "maybe param" "temp"
      (57923 'move' tmp[57897] 1)
      ParamForLoop[57925]
      { d[57894] tmp[57895] tmp[57896] tmp[57897]
        (57891 call =(57884 call result[57866] d[57894])(57889 call +(57888 call a[57859] d[57894])))
      }
      label _unused_continueLabel[57899]
      label _breakLabel[57898]
    }
    (57935 return result[57866])
  }
  function -[57945](arg a[57942] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[57949](57948 'typeof' a[57942])
    (57952 'end of statement')
    {
      unknown d[57977] 0
      unknown tmp[57978] "maybe param" "temp"
      (57990 'move' tmp[57978](57988 call chpl_compute_low_param_loop_bound 0(57960 call -(57956 call . a[57942] c"size") 1)))
      unknown tmp[57979] "maybe param" "temp"
      (58003 'move' tmp[57979](58001 call chpl_compute_high_param_loop_bound 0(57995 call -(57997 call . a[57942] c"size") 1)))
      unknown tmp[57980] "maybe param" "temp"
      (58006 'move' tmp[57980] 1)
      ParamForLoop[58008]
      { d[57977] tmp[57978] tmp[57979] tmp[57980]
        (57974 call =(57967 call result[57949] d[57977])(57972 call -(57971 call a[57942] d[57977])))
      }
      label _unused_continueLabel[57982]
      label _breakLabel[57981]
    }
    (58018 return result[57949])
  }
  function ~[58028](arg a[58025] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[58032](58031 'typeof' a[58025])
    (58035 'end of statement')
    {
      unknown d[58060] 0
      unknown tmp[58061] "maybe param" "temp"
      (58073 'move' tmp[58061](58071 call chpl_compute_low_param_loop_bound 0(58043 call -(58039 call . a[58025] c"size") 1)))
      unknown tmp[58062] "maybe param" "temp"
      (58086 'move' tmp[58062](58084 call chpl_compute_high_param_loop_bound 0(58078 call -(58080 call . a[58025] c"size") 1)))
      unknown tmp[58063] "maybe param" "temp"
      (58089 'move' tmp[58063] 1)
      ParamForLoop[58091]
      { d[58060] tmp[58061] tmp[58062] tmp[58063]
        (58057 call =(58050 call result[58032] d[58060])(58055 call ~(58054 call a[58025] d[58060])))
      }
      label _unused_continueLabel[58065]
      label _breakLabel[58064]
    }
    (58101 return result[58032])
  }
  function ![58111](arg a[58108] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[58115](58114 'typeof' a[58108])
    (58118 'end of statement')
    {
      unknown d[58143] 0
      unknown tmp[58144] "maybe param" "temp"
      (58156 'move' tmp[58144](58154 call chpl_compute_low_param_loop_bound 0(58126 call -(58122 call . a[58108] c"size") 1)))
      unknown tmp[58145] "maybe param" "temp"
      (58169 'move' tmp[58145](58167 call chpl_compute_high_param_loop_bound 0(58161 call -(58163 call . a[58108] c"size") 1)))
      unknown tmp[58146] "maybe param" "temp"
      (58172 'move' tmp[58146] 1)
      ParamForLoop[58174]
      { d[58143] tmp[58144] tmp[58145] tmp[58146]
        (58140 call =(58133 call result[58115] d[58143])(58138 call !(58137 call a[58108] d[58143])))
      }
      label _unused_continueLabel[58148]
      label _breakLabel[58147]
    }
    (58184 return result[58115])
  }
  function max[58192](arg t[58190]:_any[178](?)) : _unknown[51]
  {
    unknown result[58200] t[58190]
    (58203 'end of statement')
    {
      unknown i[58230] 0
      unknown tmp[58231] "maybe param" "temp"
      (58243 'move' tmp[58231](58241 call chpl_compute_low_param_loop_bound 0(58211 call -(58207 call . result[58200] c"size") 1)))
      unknown tmp[58232] "maybe param" "temp"
      (58256 'move' tmp[58232](58254 call chpl_compute_high_param_loop_bound 0(58248 call -(58250 call . result[58200] c"size") 1)))
      unknown tmp[58233] "maybe param" "temp"
      (58259 'move' tmp[58233] 1)
      ParamForLoop[58261]
      { i[58230] tmp[58231] tmp[58232] tmp[58233]
        {
          (58226 call =(58218 call result[58200] i[58230])(58225 call max(58223 call t[58190] i[58230])))
        }
      }
      label _unused_continueLabel[58235]
      label _breakLabel[58234]
    }
    (58271 return result[58200])
  }
  where {
    (58198 call isTupleType t[58190])
  }
  { scopeless type
    t[58190]
  }
  function min[58281](arg t[58279]:_any[178](?)) : _unknown[51]
  {
    unknown result[58289] t[58279]
    (58292 'end of statement')
    {
      unknown i[58319] 0
      unknown tmp[58320] "maybe param" "temp"
      (58332 'move' tmp[58320](58330 call chpl_compute_low_param_loop_bound 0(58300 call -(58296 call . result[58289] c"size") 1)))
      unknown tmp[58321] "maybe param" "temp"
      (58345 'move' tmp[58321](58343 call chpl_compute_high_param_loop_bound 0(58337 call -(58339 call . result[58289] c"size") 1)))
      unknown tmp[58322] "maybe param" "temp"
      (58348 'move' tmp[58322] 1)
      ParamForLoop[58350]
      { i[58319] tmp[58320] tmp[58321] tmp[58322]
        {
          (58315 call =(58307 call result[58289] i[58319])(58314 call min(58312 call t[58279] i[58319])))
        }
      }
      label _unused_continueLabel[58324]
      label _breakLabel[58323]
    }
    (58360 return result[58289])
  }
  where {
    (58287 call isTupleType t[58279])
  }
  { scopeless type
    t[58279]
  }
  function chpl_TwoHomogTuples[58370](arg t1[58368]:_any[178](?), arg t2[58372]:_any[178](?)) param : _unknown[51]
  {
    (58384 return(58382 call &&(58377 call isHomogeneousTuple t1[58368])(58381 call isHomogeneousTuple t2[58372])))
  }
  function +[58395](arg a[58392] :
  _tuple[56202](?), arg b[58398] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(58437 call _cond_test(58414 call !=(58407 call . a[58392] c"size")(58411 call . b[58398] c"size")))
    {
      (58435 call compilerError "tuple operands to + have different sizes")
    }
    unknown result[58460](58458 call *(58444 call . a[58392] c"size")(58457 'typeof'(58455 call +(58450 call a[58392] 0)(58454 call b[58398] 0))))
    (58463 'end of statement')
    {
      unknown d[58491] 0
      unknown tmp[58492] "maybe param" "temp"
      (58504 'move' tmp[58492](58502 call chpl_compute_low_param_loop_bound 0(58470 call -(58466 call . a[58392] c"size") 1)))
      unknown tmp[58493] "maybe param" "temp"
      (58517 'move' tmp[58493](58515 call chpl_compute_high_param_loop_bound 0(58509 call -(58511 call . a[58392] c"size") 1)))
      unknown tmp[58494] "maybe param" "temp"
      (58520 'move' tmp[58494] 1)
      ParamForLoop[58522]
      { d[58491] tmp[58492] tmp[58493] tmp[58494]
        (58488 call =(58477 call result[58460] d[58491])(58486 call +(58481 call a[58392] d[58491])(58485 call b[58398] d[58491])))
      }
      label _unused_continueLabel[58496]
      label _breakLabel[58495]
    }
    (58532 return result[58460])
  }
  where {
    (58405 call chpl_TwoHomogTuples a[58392] b[58398])
  }
  function +[58543](arg a[58540] :
  _tuple[56202](?), arg b[58546] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(58564 call _cond_test(58557 call !=(58550 call . a[58540] c"size")(58554 call . b[58546] c"size")))
    {
      (58562 call compilerError "tuple operands to + have different sizes")
    }
    if(58617 call _cond_test(58575 call ==(58571 call . a[58540] c"size") 1))
    {
      (58589 return(58587 call _build_tuple(58585 call +(58580 call a[58540] 0)(58584 call b[58546] 0))))
    }
    {
      (58615 return(58613 call _build_tuple(58599 call +(58594 call a[58540] 0)(58598 call b[58546] 0))(58611 'expand_tuple'(58609 call +(58604 call chpl__tupleRest a[58540])(58608 call chpl__tupleRest b[58546])))))
    }
  }
  function -[58631](arg a[58628] :
  _tuple[56202](?), arg b[58634] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(58673 call _cond_test(58650 call !=(58643 call . a[58628] c"size")(58647 call . b[58634] c"size")))
    {
      (58671 call compilerError "tuple operands to - have different sizes")
    }
    unknown result[58696](58694 call *(58680 call . a[58628] c"size")(58693 'typeof'(58691 call -(58686 call a[58628] 0)(58690 call b[58634] 0))))
    (58699 'end of statement')
    {
      unknown d[58727] 0
      unknown tmp[58728] "maybe param" "temp"
      (58740 'move' tmp[58728](58738 call chpl_compute_low_param_loop_bound 0(58706 call -(58702 call . a[58628] c"size") 1)))
      unknown tmp[58729] "maybe param" "temp"
      (58753 'move' tmp[58729](58751 call chpl_compute_high_param_loop_bound 0(58745 call -(58747 call . a[58628] c"size") 1)))
      unknown tmp[58730] "maybe param" "temp"
      (58756 'move' tmp[58730] 1)
      ParamForLoop[58758]
      { d[58727] tmp[58728] tmp[58729] tmp[58730]
        (58724 call =(58713 call result[58696] d[58727])(58722 call -(58717 call a[58628] d[58727])(58721 call b[58634] d[58727])))
      }
      label _unused_continueLabel[58732]
      label _breakLabel[58731]
    }
    (58768 return result[58696])
  }
  where {
    (58641 call chpl_TwoHomogTuples a[58628] b[58634])
  }
  function -[58779](arg a[58776] :
  _tuple[56202](?), arg b[58782] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(58800 call _cond_test(58793 call !=(58786 call . a[58776] c"size")(58790 call . b[58782] c"size")))
    {
      (58798 call compilerError "tuple operands to - have different sizes")
    }
    if(58853 call _cond_test(58811 call ==(58807 call . a[58776] c"size") 1))
    {
      (58825 return(58823 call _build_tuple(58821 call -(58816 call a[58776] 0)(58820 call b[58782] 0))))
    }
    {
      (58851 return(58849 call _build_tuple(58835 call -(58830 call a[58776] 0)(58834 call b[58782] 0))(58847 'expand_tuple'(58845 call -(58840 call chpl__tupleRest a[58776])(58844 call chpl__tupleRest b[58782])))))
    }
  }
  function *[58867](arg a[58864] :
  _tuple[56202](?), arg b[58870] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(58909 call _cond_test(58886 call !=(58879 call . a[58864] c"size")(58883 call . b[58870] c"size")))
    {
      (58907 call compilerError "tuple operands to * have different sizes")
    }
    unknown result[58932](58930 call *(58916 call . a[58864] c"size")(58929 'typeof'(58927 call *(58922 call a[58864] 0)(58926 call b[58870] 0))))
    (58935 'end of statement')
    {
      unknown d[58963] 0
      unknown tmp[58964] "maybe param" "temp"
      (58976 'move' tmp[58964](58974 call chpl_compute_low_param_loop_bound 0(58942 call -(58938 call . a[58864] c"size") 1)))
      unknown tmp[58965] "maybe param" "temp"
      (58989 'move' tmp[58965](58987 call chpl_compute_high_param_loop_bound 0(58981 call -(58983 call . a[58864] c"size") 1)))
      unknown tmp[58966] "maybe param" "temp"
      (58992 'move' tmp[58966] 1)
      ParamForLoop[58994]
      { d[58963] tmp[58964] tmp[58965] tmp[58966]
        (58960 call =(58949 call result[58932] d[58963])(58958 call *(58953 call a[58864] d[58963])(58957 call b[58870] d[58963])))
      }
      label _unused_continueLabel[58968]
      label _breakLabel[58967]
    }
    (59004 return result[58932])
  }
  where {
    (58877 call chpl_TwoHomogTuples a[58864] b[58870])
  }
  function *[59015](arg a[59012] :
  _tuple[56202](?), arg b[59018] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59036 call _cond_test(59029 call !=(59022 call . a[59012] c"size")(59026 call . b[59018] c"size")))
    {
      (59034 call compilerError "tuple operands to * have different sizes")
    }
    if(59089 call _cond_test(59047 call ==(59043 call . a[59012] c"size") 1))
    {
      (59061 return(59059 call _build_tuple(59057 call *(59052 call a[59012] 0)(59056 call b[59018] 0))))
    }
    {
      (59087 return(59085 call _build_tuple(59071 call *(59066 call a[59012] 0)(59070 call b[59018] 0))(59083 'expand_tuple'(59081 call *(59076 call chpl__tupleRest a[59012])(59080 call chpl__tupleRest b[59018])))))
    }
  }
  function /[59103](arg a[59100] :
  _tuple[56202](?), arg b[59106] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59145 call _cond_test(59122 call !=(59115 call . a[59100] c"size")(59119 call . b[59106] c"size")))
    {
      (59143 call compilerError "tuple operands to / have different sizes")
    }
    unknown result[59168](59166 call *(59152 call . a[59100] c"size")(59165 'typeof'(59163 call /(59158 call a[59100] 0)(59162 call b[59106] 0))))
    (59171 'end of statement')
    {
      unknown d[59199] 0
      unknown tmp[59200] "maybe param" "temp"
      (59212 'move' tmp[59200](59210 call chpl_compute_low_param_loop_bound 0(59178 call -(59174 call . a[59100] c"size") 1)))
      unknown tmp[59201] "maybe param" "temp"
      (59225 'move' tmp[59201](59223 call chpl_compute_high_param_loop_bound 0(59217 call -(59219 call . a[59100] c"size") 1)))
      unknown tmp[59202] "maybe param" "temp"
      (59228 'move' tmp[59202] 1)
      ParamForLoop[59230]
      { d[59199] tmp[59200] tmp[59201] tmp[59202]
        (59196 call =(59185 call result[59168] d[59199])(59194 call /(59189 call a[59100] d[59199])(59193 call b[59106] d[59199])))
      }
      label _unused_continueLabel[59204]
      label _breakLabel[59203]
    }
    (59240 return result[59168])
  }
  where {
    (59113 call chpl_TwoHomogTuples a[59100] b[59106])
  }
  function /[59251](arg a[59248] :
  _tuple[56202](?), arg b[59254] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59272 call _cond_test(59265 call !=(59258 call . a[59248] c"size")(59262 call . b[59254] c"size")))
    {
      (59270 call compilerError "tuple operands to / have different sizes")
    }
    if(59325 call _cond_test(59283 call ==(59279 call . a[59248] c"size") 1))
    {
      (59297 return(59295 call _build_tuple(59293 call /(59288 call a[59248] 0)(59292 call b[59254] 0))))
    }
    {
      (59323 return(59321 call _build_tuple(59307 call /(59302 call a[59248] 0)(59306 call b[59254] 0))(59319 'expand_tuple'(59317 call /(59312 call chpl__tupleRest a[59248])(59316 call chpl__tupleRest b[59254])))))
    }
  }
  function %[59339](arg a[59336] :
  _tuple[56202](?), arg b[59342] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59381 call _cond_test(59358 call !=(59351 call . a[59336] c"size")(59355 call . b[59342] c"size")))
    {
      (59379 call compilerError "tuple operands to % have different sizes")
    }
    unknown result[59404](59402 call *(59388 call . a[59336] c"size")(59401 'typeof'(59399 call %(59394 call a[59336] 0)(59398 call b[59342] 0))))
    (59407 'end of statement')
    {
      unknown d[59435] 0
      unknown tmp[59436] "maybe param" "temp"
      (59448 'move' tmp[59436](59446 call chpl_compute_low_param_loop_bound 0(59414 call -(59410 call . a[59336] c"size") 1)))
      unknown tmp[59437] "maybe param" "temp"
      (59461 'move' tmp[59437](59459 call chpl_compute_high_param_loop_bound 0(59453 call -(59455 call . a[59336] c"size") 1)))
      unknown tmp[59438] "maybe param" "temp"
      (59464 'move' tmp[59438] 1)
      ParamForLoop[59466]
      { d[59435] tmp[59436] tmp[59437] tmp[59438]
        (59432 call =(59421 call result[59404] d[59435])(59430 call %(59425 call a[59336] d[59435])(59429 call b[59342] d[59435])))
      }
      label _unused_continueLabel[59440]
      label _breakLabel[59439]
    }
    (59476 return result[59404])
  }
  where {
    (59349 call chpl_TwoHomogTuples a[59336] b[59342])
  }
  function %[59487](arg a[59484] :
  _tuple[56202](?), arg b[59490] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59508 call _cond_test(59501 call !=(59494 call . a[59484] c"size")(59498 call . b[59490] c"size")))
    {
      (59506 call compilerError "tuple operands to % have different sizes")
    }
    if(59561 call _cond_test(59519 call ==(59515 call . a[59484] c"size") 1))
    {
      (59533 return(59531 call _build_tuple(59529 call %(59524 call a[59484] 0)(59528 call b[59490] 0))))
    }
    {
      (59559 return(59557 call _build_tuple(59543 call %(59538 call a[59484] 0)(59542 call b[59490] 0))(59555 'expand_tuple'(59553 call %(59548 call chpl__tupleRest a[59484])(59552 call chpl__tupleRest b[59490])))))
    }
  }
  function **[59575](arg a[59572] :
  _tuple[56202](?), arg b[59578] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59617 call _cond_test(59594 call !=(59587 call . a[59572] c"size")(59591 call . b[59578] c"size")))
    {
      (59615 call compilerError "tuple operands to ** have different sizes")
    }
    unknown result[59640](59638 call *(59624 call . a[59572] c"size")(59637 'typeof'(59635 call **(59630 call a[59572] 0)(59634 call b[59578] 0))))
    (59643 'end of statement')
    {
      unknown d[59671] 0
      unknown tmp[59672] "maybe param" "temp"
      (59684 'move' tmp[59672](59682 call chpl_compute_low_param_loop_bound 0(59650 call -(59646 call . a[59572] c"size") 1)))
      unknown tmp[59673] "maybe param" "temp"
      (59697 'move' tmp[59673](59695 call chpl_compute_high_param_loop_bound 0(59689 call -(59691 call . a[59572] c"size") 1)))
      unknown tmp[59674] "maybe param" "temp"
      (59700 'move' tmp[59674] 1)
      ParamForLoop[59702]
      { d[59671] tmp[59672] tmp[59673] tmp[59674]
        (59668 call =(59657 call result[59640] d[59671])(59666 call **(59661 call a[59572] d[59671])(59665 call b[59578] d[59671])))
      }
      label _unused_continueLabel[59676]
      label _breakLabel[59675]
    }
    (59712 return result[59640])
  }
  where {
    (59585 call chpl_TwoHomogTuples a[59572] b[59578])
  }
  function **[59723](arg a[59720] :
  _tuple[56202](?), arg b[59726] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59744 call _cond_test(59737 call !=(59730 call . a[59720] c"size")(59734 call . b[59726] c"size")))
    {
      (59742 call compilerError "tuple operands to ** have different sizes")
    }
    if(59797 call _cond_test(59755 call ==(59751 call . a[59720] c"size") 1))
    {
      (59769 return(59767 call _build_tuple(59765 call **(59760 call a[59720] 0)(59764 call b[59726] 0))))
    }
    {
      (59795 return(59793 call _build_tuple(59779 call **(59774 call a[59720] 0)(59778 call b[59726] 0))(59791 'expand_tuple'(59789 call **(59784 call chpl__tupleRest a[59720])(59788 call chpl__tupleRest b[59726])))))
    }
  }
  function &[59811](arg a[59808] :
  _tuple[56202](?), arg b[59814] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59853 call _cond_test(59830 call !=(59823 call . a[59808] c"size")(59827 call . b[59814] c"size")))
    {
      (59851 call compilerError "tuple operands to & have different sizes")
    }
    unknown result[59876](59874 call *(59860 call . a[59808] c"size")(59873 'typeof'(59871 call &(59866 call a[59808] 0)(59870 call b[59814] 0))))
    (59879 'end of statement')
    {
      unknown d[59907] 0
      unknown tmp[59908] "maybe param" "temp"
      (59920 'move' tmp[59908](59918 call chpl_compute_low_param_loop_bound 0(59886 call -(59882 call . a[59808] c"size") 1)))
      unknown tmp[59909] "maybe param" "temp"
      (59933 'move' tmp[59909](59931 call chpl_compute_high_param_loop_bound 0(59925 call -(59927 call . a[59808] c"size") 1)))
      unknown tmp[59910] "maybe param" "temp"
      (59936 'move' tmp[59910] 1)
      ParamForLoop[59938]
      { d[59907] tmp[59908] tmp[59909] tmp[59910]
        (59904 call =(59893 call result[59876] d[59907])(59902 call &(59897 call a[59808] d[59907])(59901 call b[59814] d[59907])))
      }
      label _unused_continueLabel[59912]
      label _breakLabel[59911]
    }
    (59948 return result[59876])
  }
  where {
    (59821 call chpl_TwoHomogTuples a[59808] b[59814])
  }
  function &[59959](arg a[59956] :
  _tuple[56202](?), arg b[59962] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(59980 call _cond_test(59973 call !=(59966 call . a[59956] c"size")(59970 call . b[59962] c"size")))
    {
      (59978 call compilerError "tuple operands to & have different sizes")
    }
    if(60033 call _cond_test(59991 call ==(59987 call . a[59956] c"size") 1))
    {
      (60005 return(60003 call _build_tuple(60001 call &(59996 call a[59956] 0)(60000 call b[59962] 0))))
    }
    {
      (60031 return(60029 call _build_tuple(60015 call &(60010 call a[59956] 0)(60014 call b[59962] 0))(60027 'expand_tuple'(60025 call &(60020 call chpl__tupleRest a[59956])(60024 call chpl__tupleRest b[59962])))))
    }
  }
  function |[60047](arg a[60044] :
  _tuple[56202](?), arg b[60050] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60089 call _cond_test(60066 call !=(60059 call . a[60044] c"size")(60063 call . b[60050] c"size")))
    {
      (60087 call compilerError "tuple operands to | have different sizes")
    }
    unknown result[60112](60110 call *(60096 call . a[60044] c"size")(60109 'typeof'(60107 call |(60102 call a[60044] 0)(60106 call b[60050] 0))))
    (60115 'end of statement')
    {
      unknown d[60143] 0
      unknown tmp[60144] "maybe param" "temp"
      (60156 'move' tmp[60144](60154 call chpl_compute_low_param_loop_bound 0(60122 call -(60118 call . a[60044] c"size") 1)))
      unknown tmp[60145] "maybe param" "temp"
      (60169 'move' tmp[60145](60167 call chpl_compute_high_param_loop_bound 0(60161 call -(60163 call . a[60044] c"size") 1)))
      unknown tmp[60146] "maybe param" "temp"
      (60172 'move' tmp[60146] 1)
      ParamForLoop[60174]
      { d[60143] tmp[60144] tmp[60145] tmp[60146]
        (60140 call =(60129 call result[60112] d[60143])(60138 call |(60133 call a[60044] d[60143])(60137 call b[60050] d[60143])))
      }
      label _unused_continueLabel[60148]
      label _breakLabel[60147]
    }
    (60184 return result[60112])
  }
  where {
    (60057 call chpl_TwoHomogTuples a[60044] b[60050])
  }
  function |[60195](arg a[60192] :
  _tuple[56202](?), arg b[60198] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60216 call _cond_test(60209 call !=(60202 call . a[60192] c"size")(60206 call . b[60198] c"size")))
    {
      (60214 call compilerError "tuple operands to | have different sizes")
    }
    if(60269 call _cond_test(60227 call ==(60223 call . a[60192] c"size") 1))
    {
      (60241 return(60239 call _build_tuple(60237 call |(60232 call a[60192] 0)(60236 call b[60198] 0))))
    }
    {
      (60267 return(60265 call _build_tuple(60251 call |(60246 call a[60192] 0)(60250 call b[60198] 0))(60263 'expand_tuple'(60261 call |(60256 call chpl__tupleRest a[60192])(60260 call chpl__tupleRest b[60198])))))
    }
  }
  function ^[60283](arg a[60280] :
  _tuple[56202](?), arg b[60286] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60325 call _cond_test(60302 call !=(60295 call . a[60280] c"size")(60299 call . b[60286] c"size")))
    {
      (60323 call compilerError "tuple operands to ^ have different sizes")
    }
    unknown result[60348](60346 call *(60332 call . a[60280] c"size")(60345 'typeof'(60343 call ^(60338 call a[60280] 0)(60342 call b[60286] 0))))
    (60351 'end of statement')
    {
      unknown d[60379] 0
      unknown tmp[60380] "maybe param" "temp"
      (60392 'move' tmp[60380](60390 call chpl_compute_low_param_loop_bound 0(60358 call -(60354 call . a[60280] c"size") 1)))
      unknown tmp[60381] "maybe param" "temp"
      (60405 'move' tmp[60381](60403 call chpl_compute_high_param_loop_bound 0(60397 call -(60399 call . a[60280] c"size") 1)))
      unknown tmp[60382] "maybe param" "temp"
      (60408 'move' tmp[60382] 1)
      ParamForLoop[60410]
      { d[60379] tmp[60380] tmp[60381] tmp[60382]
        (60376 call =(60365 call result[60348] d[60379])(60374 call ^(60369 call a[60280] d[60379])(60373 call b[60286] d[60379])))
      }
      label _unused_continueLabel[60384]
      label _breakLabel[60383]
    }
    (60420 return result[60348])
  }
  where {
    (60293 call chpl_TwoHomogTuples a[60280] b[60286])
  }
  function ^[60431](arg a[60428] :
  _tuple[56202](?), arg b[60434] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60452 call _cond_test(60445 call !=(60438 call . a[60428] c"size")(60442 call . b[60434] c"size")))
    {
      (60450 call compilerError "tuple operands to ^ have different sizes")
    }
    if(60505 call _cond_test(60463 call ==(60459 call . a[60428] c"size") 1))
    {
      (60477 return(60475 call _build_tuple(60473 call ^(60468 call a[60428] 0)(60472 call b[60434] 0))))
    }
    {
      (60503 return(60501 call _build_tuple(60487 call ^(60482 call a[60428] 0)(60486 call b[60434] 0))(60499 'expand_tuple'(60497 call ^(60492 call chpl__tupleRest a[60428])(60496 call chpl__tupleRest b[60434])))))
    }
  }
  function <<[60519](arg a[60516] :
  _tuple[56202](?), arg b[60522] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60561 call _cond_test(60538 call !=(60531 call . a[60516] c"size")(60535 call . b[60522] c"size")))
    {
      (60559 call compilerError "tuple operands to << have different sizes")
    }
    unknown result[60584](60582 call *(60568 call . a[60516] c"size")(60581 'typeof'(60579 call <<(60574 call a[60516] 0)(60578 call b[60522] 0))))
    (60587 'end of statement')
    {
      unknown d[60615] 0
      unknown tmp[60616] "maybe param" "temp"
      (60628 'move' tmp[60616](60626 call chpl_compute_low_param_loop_bound 0(60594 call -(60590 call . a[60516] c"size") 1)))
      unknown tmp[60617] "maybe param" "temp"
      (60641 'move' tmp[60617](60639 call chpl_compute_high_param_loop_bound 0(60633 call -(60635 call . a[60516] c"size") 1)))
      unknown tmp[60618] "maybe param" "temp"
      (60644 'move' tmp[60618] 1)
      ParamForLoop[60646]
      { d[60615] tmp[60616] tmp[60617] tmp[60618]
        (60612 call =(60601 call result[60584] d[60615])(60610 call <<(60605 call a[60516] d[60615])(60609 call b[60522] d[60615])))
      }
      label _unused_continueLabel[60620]
      label _breakLabel[60619]
    }
    (60656 return result[60584])
  }
  where {
    (60529 call chpl_TwoHomogTuples a[60516] b[60522])
  }
  function <<[60667](arg a[60664] :
  _tuple[56202](?), arg b[60670] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60688 call _cond_test(60681 call !=(60674 call . a[60664] c"size")(60678 call . b[60670] c"size")))
    {
      (60686 call compilerError "tuple operands to << have different sizes")
    }
    if(60741 call _cond_test(60699 call ==(60695 call . a[60664] c"size") 1))
    {
      (60713 return(60711 call _build_tuple(60709 call <<(60704 call a[60664] 0)(60708 call b[60670] 0))))
    }
    {
      (60739 return(60737 call _build_tuple(60723 call <<(60718 call a[60664] 0)(60722 call b[60670] 0))(60735 'expand_tuple'(60733 call <<(60728 call chpl__tupleRest a[60664])(60732 call chpl__tupleRest b[60670])))))
    }
  }
  function >>[60755](arg a[60752] :
  _tuple[56202](?), arg b[60758] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60797 call _cond_test(60774 call !=(60767 call . a[60752] c"size")(60771 call . b[60758] c"size")))
    {
      (60795 call compilerError "tuple operands to >> have different sizes")
    }
    unknown result[60820](60818 call *(60804 call . a[60752] c"size")(60817 'typeof'(60815 call >>(60810 call a[60752] 0)(60814 call b[60758] 0))))
    (60823 'end of statement')
    {
      unknown d[60851] 0
      unknown tmp[60852] "maybe param" "temp"
      (60864 'move' tmp[60852](60862 call chpl_compute_low_param_loop_bound 0(60830 call -(60826 call . a[60752] c"size") 1)))
      unknown tmp[60853] "maybe param" "temp"
      (60877 'move' tmp[60853](60875 call chpl_compute_high_param_loop_bound 0(60869 call -(60871 call . a[60752] c"size") 1)))
      unknown tmp[60854] "maybe param" "temp"
      (60880 'move' tmp[60854] 1)
      ParamForLoop[60882]
      { d[60851] tmp[60852] tmp[60853] tmp[60854]
        (60848 call =(60837 call result[60820] d[60851])(60846 call >>(60841 call a[60752] d[60851])(60845 call b[60758] d[60851])))
      }
      label _unused_continueLabel[60856]
      label _breakLabel[60855]
    }
    (60892 return result[60820])
  }
  where {
    (60765 call chpl_TwoHomogTuples a[60752] b[60758])
  }
  function >>[60903](arg a[60900] :
  _tuple[56202](?), arg b[60906] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(60924 call _cond_test(60917 call !=(60910 call . a[60900] c"size")(60914 call . b[60906] c"size")))
    {
      (60922 call compilerError "tuple operands to >> have different sizes")
    }
    if(60977 call _cond_test(60935 call ==(60931 call . a[60900] c"size") 1))
    {
      (60949 return(60947 call _build_tuple(60945 call >>(60940 call a[60900] 0)(60944 call b[60906] 0))))
    }
    {
      (60975 return(60973 call _build_tuple(60959 call >>(60954 call a[60900] 0)(60958 call b[60906] 0))(60971 'expand_tuple'(60969 call >>(60964 call chpl__tupleRest a[60900])(60968 call chpl__tupleRest b[60906])))))
    }
  }
  function >[60991](arg a[60988] :
  _tuple[56202](?), arg b[60994] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(61028 call _cond_test(61005 call !=(60998 call . a[60988] c"size")(61002 call . b[60994] c"size")))
    {
      (61026 call compilerError "tuple operands to > have different sizes")
    }
    {
      unknown i[61081] 0
      unknown tmp[61082] "maybe param" "temp"
      (61094 'move' tmp[61082](61092 call chpl_compute_low_param_loop_bound 0(61040 call -(61036 call . a[60988] c"size") 1)))
      unknown tmp[61083] "maybe param" "temp"
      (61107 'move' tmp[61083](61105 call chpl_compute_high_param_loop_bound 0(61099 call -(61101 call . a[60988] c"size") 1)))
      unknown tmp[61084] "maybe param" "temp"
      (61110 'move' tmp[61084] 1)
      ParamForLoop[61112]
      { i[61081] tmp[61082] tmp[61083] tmp[61084]
        if(61075 call _cond_test(61052 call >(61047 call a[60988] i[61081])(61051 call b[60994] i[61081])))
        {
          (61055 return 1)
        }
        {
          if(61070 call _cond_test(61065 call <(61060 call a[60988] i[61081])(61064 call b[60994] i[61081])))
          {
            (61068 return 0)
          }
        }
      }
      label _unused_continueLabel[61086]
      label _breakLabel[61085]
    }
    (61122 return 0)
  }
  function >=[61132](arg a[61129] :
  _tuple[56202](?), arg b[61135] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(61169 call _cond_test(61146 call !=(61139 call . a[61129] c"size")(61143 call . b[61135] c"size")))
    {
      (61167 call compilerError "tuple operands to >= have different sizes")
    }
    {
      unknown i[61222] 0
      unknown tmp[61223] "maybe param" "temp"
      (61235 'move' tmp[61223](61233 call chpl_compute_low_param_loop_bound 0(61181 call -(61177 call . a[61129] c"size") 1)))
      unknown tmp[61224] "maybe param" "temp"
      (61248 'move' tmp[61224](61246 call chpl_compute_high_param_loop_bound 0(61240 call -(61242 call . a[61129] c"size") 1)))
      unknown tmp[61225] "maybe param" "temp"
      (61251 'move' tmp[61225] 1)
      ParamForLoop[61253]
      { i[61222] tmp[61223] tmp[61224] tmp[61225]
        if(61216 call _cond_test(61193 call >(61188 call a[61129] i[61222])(61192 call b[61135] i[61222])))
        {
          (61196 return 1)
        }
        {
          if(61211 call _cond_test(61206 call <(61201 call a[61129] i[61222])(61205 call b[61135] i[61222])))
          {
            (61209 return 0)
          }
        }
      }
      label _unused_continueLabel[61227]
      label _breakLabel[61226]
    }
    (61263 return 1)
  }
  function <[61273](arg a[61270] :
  _tuple[56202](?), arg b[61276] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(61310 call _cond_test(61287 call !=(61280 call . a[61270] c"size")(61284 call . b[61276] c"size")))
    {
      (61308 call compilerError "tuple operands to < have different sizes")
    }
    {
      unknown i[61363] 0
      unknown tmp[61364] "maybe param" "temp"
      (61376 'move' tmp[61364](61374 call chpl_compute_low_param_loop_bound 0(61322 call -(61318 call . a[61270] c"size") 1)))
      unknown tmp[61365] "maybe param" "temp"
      (61389 'move' tmp[61365](61387 call chpl_compute_high_param_loop_bound 0(61381 call -(61383 call . a[61270] c"size") 1)))
      unknown tmp[61366] "maybe param" "temp"
      (61392 'move' tmp[61366] 1)
      ParamForLoop[61394]
      { i[61363] tmp[61364] tmp[61365] tmp[61366]
        if(61357 call _cond_test(61334 call <(61329 call a[61270] i[61363])(61333 call b[61276] i[61363])))
        {
          (61337 return 1)
        }
        {
          if(61352 call _cond_test(61347 call >(61342 call a[61270] i[61363])(61346 call b[61276] i[61363])))
          {
            (61350 return 0)
          }
        }
      }
      label _unused_continueLabel[61368]
      label _breakLabel[61367]
    }
    (61404 return 0)
  }
  function <=[61414](arg a[61411] :
  _tuple[56202](?), arg b[61417] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(61451 call _cond_test(61428 call !=(61421 call . a[61411] c"size")(61425 call . b[61417] c"size")))
    {
      (61449 call compilerError "tuple operands to <= have different sizes")
    }
    {
      unknown i[61504] 0
      unknown tmp[61505] "maybe param" "temp"
      (61517 'move' tmp[61505](61515 call chpl_compute_low_param_loop_bound 0(61463 call -(61459 call . a[61411] c"size") 1)))
      unknown tmp[61506] "maybe param" "temp"
      (61530 'move' tmp[61506](61528 call chpl_compute_high_param_loop_bound 0(61522 call -(61524 call . a[61411] c"size") 1)))
      unknown tmp[61507] "maybe param" "temp"
      (61533 'move' tmp[61507] 1)
      ParamForLoop[61535]
      { i[61504] tmp[61505] tmp[61506] tmp[61507]
        if(61498 call _cond_test(61475 call <(61470 call a[61411] i[61504])(61474 call b[61417] i[61504])))
        {
          (61478 return 1)
        }
        {
          if(61493 call _cond_test(61488 call >(61483 call a[61411] i[61504])(61487 call b[61417] i[61504])))
          {
            (61491 return 0)
          }
        }
      }
      label _unused_continueLabel[61509]
      label _breakLabel[61508]
    }
    (61545 return 1)
  }
  function ==[61555](arg a[61552] :
  _tuple[56202](?), arg b[61558] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(61644 call _cond_test(61569 call !=(61562 call . a[61552] c"size")(61566 call . b[61558] c"size")))
    {
      (61572 return 0)
    }
    {
      {
        unknown i[61603] 0
        unknown tmp[61604] "maybe param" "temp"
        (61616 'move' tmp[61604](61614 call chpl_compute_low_param_loop_bound 0(61581 call -(61577 call . a[61552] c"size") 1)))
        unknown tmp[61605] "maybe param" "temp"
        (61629 'move' tmp[61605](61627 call chpl_compute_high_param_loop_bound 0(61621 call -(61623 call . a[61552] c"size") 1)))
        unknown tmp[61606] "maybe param" "temp"
        (61632 'move' tmp[61606] 1)
        ParamForLoop[61634]
        { i[61603] tmp[61604] tmp[61605] tmp[61606]
          if(61598 call _cond_test(61593 call !=(61588 call a[61552] i[61603])(61592 call b[61558] i[61603])))
          {
            (61596 return 0)
          }
        }
        label _unused_continueLabel[61608]
        label _breakLabel[61607]
      }
    }
    (61650 return 1)
  }
  function !=[61660](arg a[61657] :
  _tuple[56202](?), arg b[61663] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    if(61749 call _cond_test(61674 call !=(61667 call . a[61657] c"size")(61671 call . b[61663] c"size")))
    {
      (61677 return 1)
    }
    {
      {
        unknown i[61708] 0
        unknown tmp[61709] "maybe param" "temp"
        (61721 'move' tmp[61709](61719 call chpl_compute_low_param_loop_bound 0(61686 call -(61682 call . a[61657] c"size") 1)))
        unknown tmp[61710] "maybe param" "temp"
        (61734 'move' tmp[61710](61732 call chpl_compute_high_param_loop_bound 0(61726 call -(61728 call . a[61657] c"size") 1)))
        unknown tmp[61711] "maybe param" "temp"
        (61737 'move' tmp[61711] 1)
        ParamForLoop[61739]
        { i[61708] tmp[61709] tmp[61710] tmp[61711]
          if(61703 call _cond_test(61698 call !=(61693 call a[61657] i[61708])(61697 call b[61663] i[61708])))
          {
            (61701 return 1)
          }
        }
        label _unused_continueLabel[61713]
        label _breakLabel[61712]
      }
    }
    (61755 return 0)
  }
  function +[61765](arg x[61762] :
  _tuple[56202](?), arg y[61772] :
  (61771 'typeof'(61770 call x[61762] 0))) : _unknown[51] "inline"
  {
    unknown result[61790](61788 call *(61780 call . x[61762] c"size")(61787 'typeof'(61786 call x[61762] 0)))
    (61793 'end of statement')
    {
      unknown d[61819] 0
      unknown tmp[61820] "maybe param" "temp"
      (61832 'move' tmp[61820](61830 call chpl_compute_low_param_loop_bound 0(61801 call -(61797 call . x[61762] c"size") 1)))
      unknown tmp[61821] "maybe param" "temp"
      (61845 'move' tmp[61821](61843 call chpl_compute_high_param_loop_bound 0(61837 call -(61839 call . x[61762] c"size") 1)))
      unknown tmp[61822] "maybe param" "temp"
      (61848 'move' tmp[61822] 1)
      ParamForLoop[61850]
      { d[61819] tmp[61820] tmp[61821] tmp[61822]
        (61816 call =(61808 call result[61790] d[61819])(61814 call +(61812 call x[61762] d[61819]) y[61772]))
      }
      label _unused_continueLabel[61824]
      label _breakLabel[61823]
    }
    (61860 return result[61790])
  }
  where {
    (61778 call isHomogeneousTuple x[61762])
  }
  function +[61872](arg x[61869] :
  unknown t[61867], arg y[61875] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[61904](61902 call *(61894 call . y[61875] c"size")(61901 'typeof'(61900 call y[61875] 0)))
    (61907 'end of statement')
    {
      unknown d[61933] 0
      unknown tmp[61934] "maybe param" "temp"
      (61946 'move' tmp[61934](61944 call chpl_compute_low_param_loop_bound 0(61915 call -(61911 call . y[61875] c"size") 1)))
      unknown tmp[61935] "maybe param" "temp"
      (61959 'move' tmp[61935](61957 call chpl_compute_high_param_loop_bound 0(61951 call -(61953 call . y[61875] c"size") 1)))
      unknown tmp[61936] "maybe param" "temp"
      (61962 'move' tmp[61936] 1)
      ParamForLoop[61964]
      { d[61933] tmp[61934] tmp[61935] tmp[61936]
        (61930 call =(61922 call result[61904] d[61933])(61928 call + x[61869](61927 call y[61875] d[61933])))
      }
      label _unused_continueLabel[61938]
      label _breakLabel[61937]
    }
    (61974 return result[61904])
  }
  where {
    (61891 call &&(61881 call isHomogeneousTuple y[61875])(354252 'is_subtype'(61889 'typeof'(61888 call y[61875] 0)) t[61867]))
  }
  function -[61985](arg x[61982] :
  _tuple[56202](?), arg y[61992] :
  (61991 'typeof'(61990 call x[61982] 0))) : _unknown[51] "inline"
  {
    unknown result[62010](62008 call *(62000 call . x[61982] c"size")(62007 'typeof'(62006 call x[61982] 0)))
    (62013 'end of statement')
    {
      unknown d[62039] 0
      unknown tmp[62040] "maybe param" "temp"
      (62052 'move' tmp[62040](62050 call chpl_compute_low_param_loop_bound 0(62021 call -(62017 call . x[61982] c"size") 1)))
      unknown tmp[62041] "maybe param" "temp"
      (62065 'move' tmp[62041](62063 call chpl_compute_high_param_loop_bound 0(62057 call -(62059 call . x[61982] c"size") 1)))
      unknown tmp[62042] "maybe param" "temp"
      (62068 'move' tmp[62042] 1)
      ParamForLoop[62070]
      { d[62039] tmp[62040] tmp[62041] tmp[62042]
        (62036 call =(62028 call result[62010] d[62039])(62034 call -(62032 call x[61982] d[62039]) y[61992]))
      }
      label _unused_continueLabel[62044]
      label _breakLabel[62043]
    }
    (62080 return result[62010])
  }
  where {
    (61998 call isHomogeneousTuple x[61982])
  }
  function -[62092](arg x[62089] :
  unknown t[62087], arg y[62095] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[62124](62122 call *(62114 call . y[62095] c"size")(62121 'typeof'(62120 call y[62095] 0)))
    (62127 'end of statement')
    {
      unknown d[62153] 0
      unknown tmp[62154] "maybe param" "temp"
      (62166 'move' tmp[62154](62164 call chpl_compute_low_param_loop_bound 0(62135 call -(62131 call . y[62095] c"size") 1)))
      unknown tmp[62155] "maybe param" "temp"
      (62179 'move' tmp[62155](62177 call chpl_compute_high_param_loop_bound 0(62171 call -(62173 call . y[62095] c"size") 1)))
      unknown tmp[62156] "maybe param" "temp"
      (62182 'move' tmp[62156] 1)
      ParamForLoop[62184]
      { d[62153] tmp[62154] tmp[62155] tmp[62156]
        (62150 call =(62142 call result[62124] d[62153])(62148 call - x[62089](62147 call y[62095] d[62153])))
      }
      label _unused_continueLabel[62158]
      label _breakLabel[62157]
    }
    (62194 return result[62124])
  }
  where {
    (62111 call &&(62101 call isHomogeneousTuple y[62095])(354253 'is_subtype'(62109 'typeof'(62108 call y[62095] 0)) t[62087]))
  }
  function *[62205](arg x[62202] :
  _tuple[56202](?), arg y[62212] :
  (62211 'typeof'(62210 call x[62202] 0))) : _unknown[51] "inline"
  {
    unknown result[62230](62228 call *(62220 call . x[62202] c"size")(62227 'typeof'(62226 call x[62202] 0)))
    (62233 'end of statement')
    {
      unknown d[62259] 0
      unknown tmp[62260] "maybe param" "temp"
      (62272 'move' tmp[62260](62270 call chpl_compute_low_param_loop_bound 0(62241 call -(62237 call . x[62202] c"size") 1)))
      unknown tmp[62261] "maybe param" "temp"
      (62285 'move' tmp[62261](62283 call chpl_compute_high_param_loop_bound 0(62277 call -(62279 call . x[62202] c"size") 1)))
      unknown tmp[62262] "maybe param" "temp"
      (62288 'move' tmp[62262] 1)
      ParamForLoop[62290]
      { d[62259] tmp[62260] tmp[62261] tmp[62262]
        (62256 call =(62248 call result[62230] d[62259])(62254 call *(62252 call x[62202] d[62259]) y[62212]))
      }
      label _unused_continueLabel[62264]
      label _breakLabel[62263]
    }
    (62300 return result[62230])
  }
  where {
    (62218 call isHomogeneousTuple x[62202])
  }
  function *[62312](arg x[62309] :
  unknown t[62307], arg y[62315] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[62344](62342 call *(62334 call . y[62315] c"size")(62341 'typeof'(62340 call y[62315] 0)))
    (62347 'end of statement')
    {
      unknown d[62373] 0
      unknown tmp[62374] "maybe param" "temp"
      (62386 'move' tmp[62374](62384 call chpl_compute_low_param_loop_bound 0(62355 call -(62351 call . y[62315] c"size") 1)))
      unknown tmp[62375] "maybe param" "temp"
      (62399 'move' tmp[62375](62397 call chpl_compute_high_param_loop_bound 0(62391 call -(62393 call . y[62315] c"size") 1)))
      unknown tmp[62376] "maybe param" "temp"
      (62402 'move' tmp[62376] 1)
      ParamForLoop[62404]
      { d[62373] tmp[62374] tmp[62375] tmp[62376]
        (62370 call =(62362 call result[62344] d[62373])(62368 call * x[62309](62367 call y[62315] d[62373])))
      }
      label _unused_continueLabel[62378]
      label _breakLabel[62377]
    }
    (62414 return result[62344])
  }
  where {
    (62331 call &&(62321 call isHomogeneousTuple y[62315])(354254 'is_subtype'(62329 'typeof'(62328 call y[62315] 0)) t[62307]))
  }
  function /[62425](arg x[62422] :
  _tuple[56202](?), arg y[62432] :
  (62431 'typeof'(62430 call x[62422] 0))) : _unknown[51] "inline"
  {
    unknown result[62450](62448 call *(62440 call . x[62422] c"size")(62447 'typeof'(62446 call x[62422] 0)))
    (62453 'end of statement')
    {
      unknown d[62479] 0
      unknown tmp[62480] "maybe param" "temp"
      (62492 'move' tmp[62480](62490 call chpl_compute_low_param_loop_bound 0(62461 call -(62457 call . x[62422] c"size") 1)))
      unknown tmp[62481] "maybe param" "temp"
      (62505 'move' tmp[62481](62503 call chpl_compute_high_param_loop_bound 0(62497 call -(62499 call . x[62422] c"size") 1)))
      unknown tmp[62482] "maybe param" "temp"
      (62508 'move' tmp[62482] 1)
      ParamForLoop[62510]
      { d[62479] tmp[62480] tmp[62481] tmp[62482]
        (62476 call =(62468 call result[62450] d[62479])(62474 call /(62472 call x[62422] d[62479]) y[62432]))
      }
      label _unused_continueLabel[62484]
      label _breakLabel[62483]
    }
    (62520 return result[62450])
  }
  where {
    (62438 call isHomogeneousTuple x[62422])
  }
  function /[62532](arg x[62529] :
  unknown t[62527], arg y[62535] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[62564](62562 call *(62554 call . y[62535] c"size")(62561 'typeof'(62560 call y[62535] 0)))
    (62567 'end of statement')
    {
      unknown d[62593] 0
      unknown tmp[62594] "maybe param" "temp"
      (62606 'move' tmp[62594](62604 call chpl_compute_low_param_loop_bound 0(62575 call -(62571 call . y[62535] c"size") 1)))
      unknown tmp[62595] "maybe param" "temp"
      (62619 'move' tmp[62595](62617 call chpl_compute_high_param_loop_bound 0(62611 call -(62613 call . y[62535] c"size") 1)))
      unknown tmp[62596] "maybe param" "temp"
      (62622 'move' tmp[62596] 1)
      ParamForLoop[62624]
      { d[62593] tmp[62594] tmp[62595] tmp[62596]
        (62590 call =(62582 call result[62564] d[62593])(62588 call / x[62529](62587 call y[62535] d[62593])))
      }
      label _unused_continueLabel[62598]
      label _breakLabel[62597]
    }
    (62634 return result[62564])
  }
  where {
    (62551 call &&(62541 call isHomogeneousTuple y[62535])(354255 'is_subtype'(62549 'typeof'(62548 call y[62535] 0)) t[62527]))
  }
  function %[62645](arg x[62642] :
  _tuple[56202](?), arg y[62652] :
  (62651 'typeof'(62650 call x[62642] 0))) : _unknown[51] "inline"
  {
    unknown result[62670](62668 call *(62660 call . x[62642] c"size")(62667 'typeof'(62666 call x[62642] 0)))
    (62673 'end of statement')
    {
      unknown d[62699] 0
      unknown tmp[62700] "maybe param" "temp"
      (62712 'move' tmp[62700](62710 call chpl_compute_low_param_loop_bound 0(62681 call -(62677 call . x[62642] c"size") 1)))
      unknown tmp[62701] "maybe param" "temp"
      (62725 'move' tmp[62701](62723 call chpl_compute_high_param_loop_bound 0(62717 call -(62719 call . x[62642] c"size") 1)))
      unknown tmp[62702] "maybe param" "temp"
      (62728 'move' tmp[62702] 1)
      ParamForLoop[62730]
      { d[62699] tmp[62700] tmp[62701] tmp[62702]
        (62696 call =(62688 call result[62670] d[62699])(62694 call %(62692 call x[62642] d[62699]) y[62652]))
      }
      label _unused_continueLabel[62704]
      label _breakLabel[62703]
    }
    (62740 return result[62670])
  }
  where {
    (62658 call isHomogeneousTuple x[62642])
  }
  function %[62752](arg x[62749] :
  unknown t[62747], arg y[62755] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[62784](62782 call *(62774 call . y[62755] c"size")(62781 'typeof'(62780 call y[62755] 0)))
    (62787 'end of statement')
    {
      unknown d[62813] 0
      unknown tmp[62814] "maybe param" "temp"
      (62826 'move' tmp[62814](62824 call chpl_compute_low_param_loop_bound 0(62795 call -(62791 call . y[62755] c"size") 1)))
      unknown tmp[62815] "maybe param" "temp"
      (62839 'move' tmp[62815](62837 call chpl_compute_high_param_loop_bound 0(62831 call -(62833 call . y[62755] c"size") 1)))
      unknown tmp[62816] "maybe param" "temp"
      (62842 'move' tmp[62816] 1)
      ParamForLoop[62844]
      { d[62813] tmp[62814] tmp[62815] tmp[62816]
        (62810 call =(62802 call result[62784] d[62813])(62808 call % x[62749](62807 call y[62755] d[62813])))
      }
      label _unused_continueLabel[62818]
      label _breakLabel[62817]
    }
    (62854 return result[62784])
  }
  where {
    (62771 call &&(62761 call isHomogeneousTuple y[62755])(354256 'is_subtype'(62769 'typeof'(62768 call y[62755] 0)) t[62747]))
  }
  function **[62865](arg x[62862] :
  _tuple[56202](?), arg y[62872] :
  (62871 'typeof'(62870 call x[62862] 0))) : _unknown[51] "inline"
  {
    unknown result[62890](62888 call *(62880 call . x[62862] c"size")(62887 'typeof'(62886 call x[62862] 0)))
    (62893 'end of statement')
    {
      unknown d[62919] 0
      unknown tmp[62920] "maybe param" "temp"
      (62932 'move' tmp[62920](62930 call chpl_compute_low_param_loop_bound 0(62901 call -(62897 call . x[62862] c"size") 1)))
      unknown tmp[62921] "maybe param" "temp"
      (62945 'move' tmp[62921](62943 call chpl_compute_high_param_loop_bound 0(62937 call -(62939 call . x[62862] c"size") 1)))
      unknown tmp[62922] "maybe param" "temp"
      (62948 'move' tmp[62922] 1)
      ParamForLoop[62950]
      { d[62919] tmp[62920] tmp[62921] tmp[62922]
        (62916 call =(62908 call result[62890] d[62919])(62914 call **(62912 call x[62862] d[62919]) y[62872]))
      }
      label _unused_continueLabel[62924]
      label _breakLabel[62923]
    }
    (62960 return result[62890])
  }
  where {
    (62878 call isHomogeneousTuple x[62862])
  }
  function **[62972](arg x[62969] :
  unknown t[62967], arg y[62975] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[63004](63002 call *(62994 call . y[62975] c"size")(63001 'typeof'(63000 call y[62975] 0)))
    (63007 'end of statement')
    {
      unknown d[63033] 0
      unknown tmp[63034] "maybe param" "temp"
      (63046 'move' tmp[63034](63044 call chpl_compute_low_param_loop_bound 0(63015 call -(63011 call . y[62975] c"size") 1)))
      unknown tmp[63035] "maybe param" "temp"
      (63059 'move' tmp[63035](63057 call chpl_compute_high_param_loop_bound 0(63051 call -(63053 call . y[62975] c"size") 1)))
      unknown tmp[63036] "maybe param" "temp"
      (63062 'move' tmp[63036] 1)
      ParamForLoop[63064]
      { d[63033] tmp[63034] tmp[63035] tmp[63036]
        (63030 call =(63022 call result[63004] d[63033])(63028 call ** x[62969](63027 call y[62975] d[63033])))
      }
      label _unused_continueLabel[63038]
      label _breakLabel[63037]
    }
    (63074 return result[63004])
  }
  where {
    (62991 call &&(62981 call isHomogeneousTuple y[62975])(354257 'is_subtype'(62989 'typeof'(62988 call y[62975] 0)) t[62967]))
  }
  function &[63085](arg x[63082] :
  _tuple[56202](?), arg y[63092] :
  (63091 'typeof'(63090 call x[63082] 0))) : _unknown[51] "inline"
  {
    unknown result[63110](63108 call *(63100 call . x[63082] c"size")(63107 'typeof'(63106 call x[63082] 0)))
    (63113 'end of statement')
    {
      unknown d[63139] 0
      unknown tmp[63140] "maybe param" "temp"
      (63152 'move' tmp[63140](63150 call chpl_compute_low_param_loop_bound 0(63121 call -(63117 call . x[63082] c"size") 1)))
      unknown tmp[63141] "maybe param" "temp"
      (63165 'move' tmp[63141](63163 call chpl_compute_high_param_loop_bound 0(63157 call -(63159 call . x[63082] c"size") 1)))
      unknown tmp[63142] "maybe param" "temp"
      (63168 'move' tmp[63142] 1)
      ParamForLoop[63170]
      { d[63139] tmp[63140] tmp[63141] tmp[63142]
        (63136 call =(63128 call result[63110] d[63139])(63134 call &(63132 call x[63082] d[63139]) y[63092]))
      }
      label _unused_continueLabel[63144]
      label _breakLabel[63143]
    }
    (63180 return result[63110])
  }
  where {
    (63098 call isHomogeneousTuple x[63082])
  }
  function &[63192](arg x[63189] :
  unknown t[63187], arg y[63195] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[63224](63222 call *(63214 call . y[63195] c"size")(63221 'typeof'(63220 call y[63195] 0)))
    (63227 'end of statement')
    {
      unknown d[63253] 0
      unknown tmp[63254] "maybe param" "temp"
      (63266 'move' tmp[63254](63264 call chpl_compute_low_param_loop_bound 0(63235 call -(63231 call . y[63195] c"size") 1)))
      unknown tmp[63255] "maybe param" "temp"
      (63279 'move' tmp[63255](63277 call chpl_compute_high_param_loop_bound 0(63271 call -(63273 call . y[63195] c"size") 1)))
      unknown tmp[63256] "maybe param" "temp"
      (63282 'move' tmp[63256] 1)
      ParamForLoop[63284]
      { d[63253] tmp[63254] tmp[63255] tmp[63256]
        (63250 call =(63242 call result[63224] d[63253])(63248 call & x[63189](63247 call y[63195] d[63253])))
      }
      label _unused_continueLabel[63258]
      label _breakLabel[63257]
    }
    (63294 return result[63224])
  }
  where {
    (63211 call &&(63201 call isHomogeneousTuple y[63195])(354258 'is_subtype'(63209 'typeof'(63208 call y[63195] 0)) t[63187]))
  }
  function |[63305](arg x[63302] :
  _tuple[56202](?), arg y[63312] :
  (63311 'typeof'(63310 call x[63302] 0))) : _unknown[51] "inline"
  {
    unknown result[63330](63328 call *(63320 call . x[63302] c"size")(63327 'typeof'(63326 call x[63302] 0)))
    (63333 'end of statement')
    {
      unknown d[63359] 0
      unknown tmp[63360] "maybe param" "temp"
      (63372 'move' tmp[63360](63370 call chpl_compute_low_param_loop_bound 0(63341 call -(63337 call . x[63302] c"size") 1)))
      unknown tmp[63361] "maybe param" "temp"
      (63385 'move' tmp[63361](63383 call chpl_compute_high_param_loop_bound 0(63377 call -(63379 call . x[63302] c"size") 1)))
      unknown tmp[63362] "maybe param" "temp"
      (63388 'move' tmp[63362] 1)
      ParamForLoop[63390]
      { d[63359] tmp[63360] tmp[63361] tmp[63362]
        (63356 call =(63348 call result[63330] d[63359])(63354 call |(63352 call x[63302] d[63359]) y[63312]))
      }
      label _unused_continueLabel[63364]
      label _breakLabel[63363]
    }
    (63400 return result[63330])
  }
  where {
    (63318 call isHomogeneousTuple x[63302])
  }
  function |[63412](arg x[63409] :
  unknown t[63407], arg y[63415] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[63444](63442 call *(63434 call . y[63415] c"size")(63441 'typeof'(63440 call y[63415] 0)))
    (63447 'end of statement')
    {
      unknown d[63473] 0
      unknown tmp[63474] "maybe param" "temp"
      (63486 'move' tmp[63474](63484 call chpl_compute_low_param_loop_bound 0(63455 call -(63451 call . y[63415] c"size") 1)))
      unknown tmp[63475] "maybe param" "temp"
      (63499 'move' tmp[63475](63497 call chpl_compute_high_param_loop_bound 0(63491 call -(63493 call . y[63415] c"size") 1)))
      unknown tmp[63476] "maybe param" "temp"
      (63502 'move' tmp[63476] 1)
      ParamForLoop[63504]
      { d[63473] tmp[63474] tmp[63475] tmp[63476]
        (63470 call =(63462 call result[63444] d[63473])(63468 call | x[63409](63467 call y[63415] d[63473])))
      }
      label _unused_continueLabel[63478]
      label _breakLabel[63477]
    }
    (63514 return result[63444])
  }
  where {
    (63431 call &&(63421 call isHomogeneousTuple y[63415])(354259 'is_subtype'(63429 'typeof'(63428 call y[63415] 0)) t[63407]))
  }
  function ^[63525](arg x[63522] :
  _tuple[56202](?), arg y[63532] :
  (63531 'typeof'(63530 call x[63522] 0))) : _unknown[51] "inline"
  {
    unknown result[63550](63548 call *(63540 call . x[63522] c"size")(63547 'typeof'(63546 call x[63522] 0)))
    (63553 'end of statement')
    {
      unknown d[63579] 0
      unknown tmp[63580] "maybe param" "temp"
      (63592 'move' tmp[63580](63590 call chpl_compute_low_param_loop_bound 0(63561 call -(63557 call . x[63522] c"size") 1)))
      unknown tmp[63581] "maybe param" "temp"
      (63605 'move' tmp[63581](63603 call chpl_compute_high_param_loop_bound 0(63597 call -(63599 call . x[63522] c"size") 1)))
      unknown tmp[63582] "maybe param" "temp"
      (63608 'move' tmp[63582] 1)
      ParamForLoop[63610]
      { d[63579] tmp[63580] tmp[63581] tmp[63582]
        (63576 call =(63568 call result[63550] d[63579])(63574 call ^(63572 call x[63522] d[63579]) y[63532]))
      }
      label _unused_continueLabel[63584]
      label _breakLabel[63583]
    }
    (63620 return result[63550])
  }
  where {
    (63538 call isHomogeneousTuple x[63522])
  }
  function ^[63632](arg x[63629] :
  unknown t[63627], arg y[63635] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[63664](63662 call *(63654 call . y[63635] c"size")(63661 'typeof'(63660 call y[63635] 0)))
    (63667 'end of statement')
    {
      unknown d[63693] 0
      unknown tmp[63694] "maybe param" "temp"
      (63706 'move' tmp[63694](63704 call chpl_compute_low_param_loop_bound 0(63675 call -(63671 call . y[63635] c"size") 1)))
      unknown tmp[63695] "maybe param" "temp"
      (63719 'move' tmp[63695](63717 call chpl_compute_high_param_loop_bound 0(63711 call -(63713 call . y[63635] c"size") 1)))
      unknown tmp[63696] "maybe param" "temp"
      (63722 'move' tmp[63696] 1)
      ParamForLoop[63724]
      { d[63693] tmp[63694] tmp[63695] tmp[63696]
        (63690 call =(63682 call result[63664] d[63693])(63688 call ^ x[63629](63687 call y[63635] d[63693])))
      }
      label _unused_continueLabel[63698]
      label _breakLabel[63697]
    }
    (63734 return result[63664])
  }
  where {
    (63651 call &&(63641 call isHomogeneousTuple y[63635])(354260 'is_subtype'(63649 'typeof'(63648 call y[63635] 0)) t[63627]))
  }
  function <<[63745](arg x[63742] :
  _tuple[56202](?), arg y[63752] :
  (63751 'typeof'(63750 call x[63742] 0))) : _unknown[51] "inline"
  {
    unknown result[63770](63768 call *(63760 call . x[63742] c"size")(63767 'typeof'(63766 call x[63742] 0)))
    (63773 'end of statement')
    {
      unknown d[63799] 0
      unknown tmp[63800] "maybe param" "temp"
      (63812 'move' tmp[63800](63810 call chpl_compute_low_param_loop_bound 0(63781 call -(63777 call . x[63742] c"size") 1)))
      unknown tmp[63801] "maybe param" "temp"
      (63825 'move' tmp[63801](63823 call chpl_compute_high_param_loop_bound 0(63817 call -(63819 call . x[63742] c"size") 1)))
      unknown tmp[63802] "maybe param" "temp"
      (63828 'move' tmp[63802] 1)
      ParamForLoop[63830]
      { d[63799] tmp[63800] tmp[63801] tmp[63802]
        (63796 call =(63788 call result[63770] d[63799])(63794 call <<(63792 call x[63742] d[63799]) y[63752]))
      }
      label _unused_continueLabel[63804]
      label _breakLabel[63803]
    }
    (63840 return result[63770])
  }
  where {
    (63758 call isHomogeneousTuple x[63742])
  }
  function <<[63852](arg x[63849] :
  unknown t[63847], arg y[63855] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[63884](63882 call *(63874 call . y[63855] c"size")(63881 'typeof'(63880 call y[63855] 0)))
    (63887 'end of statement')
    {
      unknown d[63913] 0
      unknown tmp[63914] "maybe param" "temp"
      (63926 'move' tmp[63914](63924 call chpl_compute_low_param_loop_bound 0(63895 call -(63891 call . y[63855] c"size") 1)))
      unknown tmp[63915] "maybe param" "temp"
      (63939 'move' tmp[63915](63937 call chpl_compute_high_param_loop_bound 0(63931 call -(63933 call . y[63855] c"size") 1)))
      unknown tmp[63916] "maybe param" "temp"
      (63942 'move' tmp[63916] 1)
      ParamForLoop[63944]
      { d[63913] tmp[63914] tmp[63915] tmp[63916]
        (63910 call =(63902 call result[63884] d[63913])(63908 call << x[63849](63907 call y[63855] d[63913])))
      }
      label _unused_continueLabel[63918]
      label _breakLabel[63917]
    }
    (63954 return result[63884])
  }
  where {
    (63871 call &&(63861 call isHomogeneousTuple y[63855])(354261 'is_subtype'(63869 'typeof'(63868 call y[63855] 0)) t[63847]))
  }
  function >>[63965](arg x[63962] :
  _tuple[56202](?), arg y[63972] :
  (63971 'typeof'(63970 call x[63962] 0))) : _unknown[51] "inline"
  {
    unknown result[63990](63988 call *(63980 call . x[63962] c"size")(63987 'typeof'(63986 call x[63962] 0)))
    (63993 'end of statement')
    {
      unknown d[64019] 0
      unknown tmp[64020] "maybe param" "temp"
      (64032 'move' tmp[64020](64030 call chpl_compute_low_param_loop_bound 0(64001 call -(63997 call . x[63962] c"size") 1)))
      unknown tmp[64021] "maybe param" "temp"
      (64045 'move' tmp[64021](64043 call chpl_compute_high_param_loop_bound 0(64037 call -(64039 call . x[63962] c"size") 1)))
      unknown tmp[64022] "maybe param" "temp"
      (64048 'move' tmp[64022] 1)
      ParamForLoop[64050]
      { d[64019] tmp[64020] tmp[64021] tmp[64022]
        (64016 call =(64008 call result[63990] d[64019])(64014 call >>(64012 call x[63962] d[64019]) y[63972]))
      }
      label _unused_continueLabel[64024]
      label _breakLabel[64023]
    }
    (64060 return result[63990])
  }
  where {
    (63978 call isHomogeneousTuple x[63962])
  }
  function >>[64072](arg x[64069] :
  unknown t[64067], arg y[64075] :
  _tuple[56202](?)) : _unknown[51] "inline"
  {
    unknown result[64104](64102 call *(64094 call . y[64075] c"size")(64101 'typeof'(64100 call y[64075] 0)))
    (64107 'end of statement')
    {
      unknown d[64133] 0
      unknown tmp[64134] "maybe param" "temp"
      (64146 'move' tmp[64134](64144 call chpl_compute_low_param_loop_bound 0(64115 call -(64111 call . y[64075] c"size") 1)))
      unknown tmp[64135] "maybe param" "temp"
      (64159 'move' tmp[64135](64157 call chpl_compute_high_param_loop_bound 0(64151 call -(64153 call . y[64075] c"size") 1)))
      unknown tmp[64136] "maybe param" "temp"
      (64162 'move' tmp[64136] 1)
      ParamForLoop[64164]
      { d[64133] tmp[64134] tmp[64135] tmp[64136]
        (64130 call =(64122 call result[64104] d[64133])(64128 call >> x[64069](64127 call y[64075] d[64133])))
      }
      label _unused_continueLabel[64138]
      label _breakLabel[64137]
    }
    (64174 return result[64104])
  }
  where {
    (64091 call &&(64081 call isHomogeneousTuple y[64075])(354262 'is_subtype'(64089 'typeof'(64088 call y[64075] 0)) t[64067]))
  }
  (355086 'used modules list'(56191 'use' ChapelStandard[20267])(56193 'use' DSIUtil[230907]))
}