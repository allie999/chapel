AST dump for ReplicatedDist after pass expandExternArrayCalls.
Module use list: 

{
  (353139 'use' ChapelStandard)
  { scopeless
    unknown traceReplicatedDist[348553] "config" "param" 0
    (348556 'end of statement')
  }
  type Replicated[348585] unknown targetLocDom[348569](348567 call chpl__buildDomainRuntimeType defaultDist(348564 'typeof'(348561 call . here c"id"))) const targetLocales[348580] "const"(348578 call chpl__buildArrayRuntimeType(348576 call chpl__ensureDomainExpr targetLocDom) locale[28]) BaseDist
  function _unknown[51].init[348600](arg _mt[348627]:_MT[238], arg this[348624] :
  Replicated, arg targetLocales[348596] :
  (348592 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg purposeMessage[348620] :
  string[26] =
  "used to create a Replicated") : _unknown[51] "method"
  {
    (348634 call(348630 call . this c"complete"))
    {
      unknown _indexOfInterest[348668] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[348669] "expr temp" "temp"
      (348678 'move' _iterator[348669](348676 call _getIterator targetLocales))
      Defer
      {
        {
          (348694 call _freeIterator _iterator[348669])
        }
      }
      { scopeless type
        (348683 'move' _indexOfInterest[348668](348680 call iteratorIndex _iterator[348669]))
      }
      ForLoop[348670]
      {
        unknown loc[348687] "index var" "insert auto destroy"
        (348689 'move' loc[348687] _indexOfInterest[348668])
        {
          (348651 call(348643 call .(348640 call . this c"targetLocDom") c"add")(348647 call . loc c"id"))
          (348665 call =(348663 call(348655 call . this c"targetLocales")(348659 call . loc c"id")) loc)
        }
        label _continueLabel[348673]
        _indexOfInterest[348668]
        _iterator[348669]
      }
      label _breakLabel[348674]
    }
    if(348724 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (348722 call writeln "Replicated initializer over " targetLocales)
      }
    }
  }
  function _unknown[51].dsiEqualDMaps[348741](arg _mt[348746]:_MT[238], arg this[348743] :
  Replicated, arg that[348738] :
  (348737 call Replicated ?[260])) : _unknown[51] "method"
  {
    (348761 return(348760 call(348752 call .(348749 call . this c"targetLocales") c"equals")(348756 call . that c"targetLocales")))
  }
  function _unknown[51].dsiEqualDMaps[348771](arg _mt[348776]:_MT[238], arg this[348773] :
  Replicated, arg that[348769]:_any[178](?)) param : _unknown[51] "method"
  {
    (348779 return 0)
  }
  function _unknown[51].dsiDestroyDist[348787](arg _mt[348792]:_MT[238], arg this[348789] :
  Replicated) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiSupportsPrivatization[348800](arg _mt[348805]:_MT[238], arg this[348802] :
  Replicated) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (348808 return 1)
    }
  }
  function _unknown[51].dsiGetPrivatizeData[348816](arg _mt[348821]:_MT[238], arg this[348818] :
  Replicated) : _unknown[51] "method"
  {
    if(348845 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (348843 call writeln "Replicated.dsiGetPrivatizeData")
      }
    }
    (348852 return 0)
  }
  function _unknown[51].dsiPrivatize[348861](arg _mt[348866]:_MT[238], arg this[348863] :
  Replicated, arg privatizeData[348859]:_any[178](?)) : _unknown[51] "method"
  {
    if(348891 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (348889 call writeln "Replicated.dsiPrivatize on " here)
      }
    }
    { scopeless
      const otherTargetLocales[348901] "const"(348898 call . this c"targetLocales")
      (348904 'end of statement')
    }
    { scopeless
      const privDom[348909] "const"(348906 call . otherTargetLocales c"_dom")
      (348912 'end of statement')
    }
    { scopeless
      const privTargetLocales[348921] "const" otherTargetLocales(348918 call chpl__buildArrayRuntimeType(348916 call chpl__ensureDomainExpr privDom) locale[28])
      (348924 'end of statement')
    }
    { scopeless
      const nonNilWrapper[348947] "const"(348943 for  loc  in  otherTargetLocales do
      {
        loc
      } )(348938 call chpl__buildArrayRuntimeType(348936 call chpl__ensureDomainExpr(348932 call #(348926 call chpl_build_low_bounded_range 0)(348929 call . privTargetLocales c"size"))) locale[28])
      (348950 'end of statement')
    }
    (348975 return(348953 'new'(_chpl_manager = unmanaged[220](?))(348974 call Replicated nonNilWrapper "used during privatization")))
  }
  type ReplicatedDom[349120] const dist[348984] "const"(348983 'to unmanaged class from unknown' Replicated) unknown domRep[348995](348993 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable) unknown localDoms[349016](349014 call chpl__buildArrayRuntimeType(349012 call chpl__ensureDomainExpr(349000 call . dist c"targetLocDom"))(349011 'to unmanaged class from unknown'(349010 'to nilable class from type'(349009 call LocReplicatedDom rank idxType stridable)))) function ReplicatedDom[349120].numReplicands[349022](arg _mt[349124]:_MT[238], arg this[349122]:ReplicatedDom[349120]) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (349028 return(349025 call . localDoms c"size"))
    }
  } function ReplicatedDom[349120].chpl_myLocDom[349035](arg _mt[349128]:_MT[238], arg this[349126]:ReplicatedDom[349120]) : _unknown[51] "method" "primary method" "no doc"
  {
    if(349100 call _cond_test boundsChecking)
    {
      { scopeless
        if(349095 call _cond_test(349051 call !(349050 call(349042 call .(349039 call . dist c"targetLocDom") c"contains")(349046 call . here c"id"))))
        {
          { scopeless
            (349093 call halt "locale "(349073 call . here c"id") " has no local replicand")
          }
        }
      }
    }
    (349115 return(349113 call postfix!(349112 call localDoms(349108 call . here c"id"))))
  } BaseRectangularDom
  type LocReplicatedDom[349157](?) unknown rank[349133] "param" int[13] unknown idxType[349137] "type variable" unknown stridable[349141] "param" bool[10] unknown domLocalRep[349152](349150 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  function _unknown[51].redirectee[349163](arg _mt[349168]:_MT[238], arg this[349165] :
  ReplicatedDom) : _unknown[51] "method"
  {
    { scopeless
      (349178 return domRep)
    }
  }
  { scopeless type
    (349175 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  }
  function _unknown[51].dsiMyDist[349187](arg _mt[349192]:_MT[238], arg this[349189] :
  ReplicatedDom) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (349195 return dist)
    }
  }
  function _unknown[51].dsiSupportsPrivatization[349203](arg _mt[349208]:_MT[238], arg this[349205] :
  ReplicatedDom) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (349211 return 1)
    }
  }
  type ReplicatedDomPrvData[349230](?) unknown distpid[349217] unknown domRep[349221] unknown localDoms[349225]
  function _unknown[51].dsiGetPrivatizeData[349236](arg _mt[349241]:_MT[238], arg this[349238] :
  ReplicatedDom) : _unknown[51] "method"
  {
    if(349265 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349263 call writeln "ReplicatedDom.dsiGetPrivatizeData")
      }
    }
    (349281 return(349271 'new'(349280 call ReplicatedDomPrvData(349274 call . dist c"pid") domRep localDoms)))
  }
  function _unknown[51].dsiPrivatize[349290](arg _mt[349295]:_MT[238], arg this[349292] :
  ReplicatedDom, arg privatizeData[349288]:_any[178](?)) : _unknown[51] "method"
  {
    if(349320 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349318 call writeln "ReplicatedDom.dsiPrivatize on " here)
      }
    }
    { scopeless
      unknown privdist[349338](349337 call chpl_getPrivatizedCopy(349331 'typeof'(349328 call . this c"dist"))(349334 call . privatizeData c"distpid"))
      (349341 'end of statement')
    }
    (349370 return(349344 'new'(_chpl_manager = unmanaged[220](?))(349369 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist = privdist)(domRep =(349358 call . privatizeData c"domRep"))(localDoms =(349365 call . privatizeData c"localDoms")))))
  }
  function _unknown[51].dsiGetReprivatizeData[349377](arg _mt[349382]:_MT[238], arg this[349379] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (349385 return domRep)
  }
  function _unknown[51].dsiReprivatize[349395](arg _mt[349402]:_MT[238], arg this[349399] :
  ReplicatedDom, arg other[349393]:_any[178](?), arg reprivatizeData[349397]:_any[178](?)) : _unknown[51] "method"
  {
    (349441 call assert(349438 call &&(349426 call &&(349414 call ==(349407 call . this c"rank")(349411 call . other c"rank"))(349424 call ==(349417 call . this c"idxType")(349421 call . other c"idxType")))(349436 call ==(349429 call . this c"stridable")(349433 call . other c"stridable"))))
    (349449 call =(349445 call . this c"domRep") reprivatizeData)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiClone[349458](arg _mt[349463]:_MT[238], arg this[349460] :
  Replicated) : _unknown[51] "method"
  {
    if(349492 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349490 call writeln "Replicated.dsiClone")
      }
    }
    { scopeless
      unknown nonNilWrapper[349520](349516 for  loc  in  targetLocales do
      {
        loc
      } )(349511 call chpl__buildArrayRuntimeType(349509 call chpl__ensureDomainExpr(349505 call #(349499 call chpl_build_low_bounded_range 0)(349502 call . targetLocales c"size"))) locale[28])
      (349523 'end of statement')
    }
    (349531 return(349526 'new'(_chpl_manager = unmanaged[220](?))(349530 call Replicated nonNilWrapper)))
  }
  { scopeless type
    (349469 call _to_unmanaged(349467 'typeof' this))
  }
  function _unknown[51].dsiNewRectangularDom[349543](arg _mt[349556]:_MT[238], arg this[349553] :
  Replicated, param arg rank[349540] :
  int[13], arg idxType[349545]:_any[178](?), param arg stridable[349548] :
  bool[10], arg inds[349551]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349590 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349588 call writeln "Replicated.dsiNewRectangularDom "(349586 call _build_tuple rank(349581 call _cast string[26] idxType) stridable inds))
      }
    }
    { scopeless
      unknown result[349613](349598 'new'(_chpl_manager = unmanaged[220](?))(349612 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist =(349610 call _to_unmanaged this))))
      (349616 'end of statement')
    }
    {
      unknown tmpIter[349655] "expr temp" "maybe ref" "no copy" "temp"
      (349658 'move' tmpIter[349655](349628 call _build_tuple targetLocales(349625 call . result c"localDoms")))
      unknown isRngDomArr[349845] "maybe param" "temp"
      (349860 'move' isRngDomArr[349845](349858 call ||(349847 call isBoundedRange tmpIter[349655])(349856 call ||(349850 call isDomain tmpIter[349655])(349853 call isArray tmpIter[349655]))))
      if isRngDomArr[349845]
      {
        const _coforallCount[349684] "const" "end count" "temp"
        (349767 'move' _coforallCount[349684](349764 call _endCountAlloc 1))
        unknown numTasks[349685] "temp"
        (349751 'move' numTasks[349685](349747 call . tmpIter[349655] c"size"))
        (349742 call _upEndCount _coforallCount[349684] 1 numTasks[349685])
        (349739 call chpl_resetTaskSpawn numTasks[349685])
        unknown _indexOfInterest[349692] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[349693] "expr temp" "temp"
        (349702 'move' _iterator[349693](349700 call _getIteratorZip tmpIter[349655]))
        Defer
        {
          {
            (349732 call _freeIterator _iterator[349693])
          }
        }
        { scopeless type
          (349707 'move' _indexOfInterest[349692](349704 call iteratorIndex _iterator[349693]))
        }
        ForLoop[349694]
        {
          (349712 call _check_tuple_var_decl _indexOfInterest[349692] 2)
          unknown loc[349718] "coforall index var" "index var" "insert auto destroy"
          (349720 'move' loc[349718](349716 call _indexOfInterest[349692] 0))
          unknown locDom[349725] "coforall index var" "index var" "insert auto destroy"
          (349727 'move' locDom[349725](349723 call _indexOfInterest[349692] 1))
          {
            {
              const tmp[349664] "const" "temp"
              (349666 'move' tmp[349664](349668 'deref'(349669 '_wide_get_locale' loc)))
              { scopeless
                (349673 call = locDom(349675 'new'(_chpl_manager = unmanaged[220](?))(349679 call LocReplicatedDom rank idxType stridable)))
              }
              (349661 'elided on block' 0 tmp[349664])
            }
            (349687 call _downEndCount _coforallCount[349684] nil[44])
            (349686 'coforall loop')
          }
          label _continueLabel[349697]
          _indexOfInterest[349692]
          _iterator[349693]
        }
        label _breakLabel[349698]
        Defer
        {
          {
            (349754 call _endCountFree _coforallCount[349684])
          }
        }
        (349759 call _waitEndCount _coforallCount[349684] 1 numTasks[349685])
      }
      {
        const _coforallCount[349771] "const" "end count" "temp"
        (349842 'move' _coforallCount[349771](349839 call _endCountAlloc 1))
        unknown _indexOfInterest[349779] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[349780] "expr temp" "temp"
        (349789 'move' _iterator[349780](349787 call _getIteratorZip tmpIter[349655]))
        Defer
        {
          {
            (349819 call _freeIterator _iterator[349780])
          }
        }
        { scopeless type
          (349794 'move' _indexOfInterest[349779](349791 call iteratorIndex _iterator[349780]))
        }
        ForLoop[349781]
        {
          (349799 call _check_tuple_var_decl _indexOfInterest[349779] 2)
          unknown loc[349805] "coforall index var" "index var" "insert auto destroy"
          (349807 'move' loc[349805](349803 call _indexOfInterest[349779] 0))
          unknown locDom[349812] "coforall index var" "index var" "insert auto destroy"
          (349814 'move' locDom[349812](349810 call _indexOfInterest[349779] 1))
          (349826 call _upEndCount _coforallCount[349771] 1)
          {
            {
              const tmp[349646] "const" "temp"
              (349647 'move' tmp[349646](349644 'deref'(349643 '_wide_get_locale' loc)))
              { scopeless
                (349640 call = locDom(349633 'new'(_chpl_manager = unmanaged[220](?))(349639 call LocReplicatedDom rank idxType stridable)))
              }
              (349650 'elided on block' 0 tmp[349646])
            }
            (349774 call _downEndCount _coforallCount[349771] nil[44])
            (349773 'coforall loop')
          }
          label _continueLabel[349784]
          _indexOfInterest[349779]
          _iterator[349780]
        }
        label _breakLabel[349785]
        Defer
        {
          {
            (349830 call _endCountFree _coforallCount[349771])
          }
        }
        (349835 call _waitEndCount _coforallCount[349771] 1)
      }
    }
    (349870 call(349865 call . result c"dsiSetIndices") inds)
    (349873 return result)
  }
  function _unknown[51].dsiIndexToLocale[349882](arg _mt[349887]:_MT[238], arg this[349884] :
  Replicated, arg indexx[349880]:_any[178](?)) : _unknown[51] "method"
  {
    (349891 return here)
  }
  { scopeless type
    locale[28]
  }
  function _unknown[51].dsiSetIndices[349902](arg _mt[349907]:_MT[238], arg this[349904] :
  ReplicatedDom, arg x[349900]:_any[178](?)) : _unknown[51] "method"
  {
    if(349951 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (349949 call writeln "ReplicatedDom.dsiSetIndices on "(349945 call _cast string[26](349943 'typeof' x)) ": " x)
      }
    }
    (349964 call dsiSetIndices(349961 call chpl__buildDomainExpr(349959 'expand_tuple' x)))
  }
  where {
    (349920 call &&(349912 call isTuple x)(349919 call isRange(349917 call x 0)))
  }
  function _unknown[51].dsiSetIndices[349976](arg _mt[349981]:_MT[238], arg this[349978] :
  ReplicatedDom, arg domArg[349973] :
  _domain) : _unknown[51] "method"
  {
    if(350007 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (350005 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg)
      }
    }
    (350015 call = domRep domArg)
    {
      unknown tmpIter[350044] "expr temp" "maybe ref" "no copy" "temp"
      (350047 'move' tmpIter[350044] localDoms)
      unknown isRngDomArr[350204] "maybe param" "temp"
      (350219 'move' isRngDomArr[350204](350217 call ||(350206 call isBoundedRange tmpIter[350044])(350215 call ||(350209 call isDomain tmpIter[350044])(350212 call isArray tmpIter[350044]))))
      if isRngDomArr[350204]
      {
        const _coforallCount[350071] "const" "end count" "temp"
        (350140 'move' _coforallCount[350071](350137 call _endCountAlloc 1))
        unknown numTasks[350072] "temp"
        (350124 'move' numTasks[350072](350120 call . tmpIter[350044] c"size"))
        (350115 call _upEndCount _coforallCount[350071] 1 numTasks[350072])
        (350112 call chpl_resetTaskSpawn numTasks[350072])
        unknown _indexOfInterest[350079] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350080] "expr temp" "temp"
        (350089 'move' _iterator[350080](350087 call _getIterator tmpIter[350044]))
        Defer
        {
          {
            (350105 call _freeIterator _iterator[350080])
          }
        }
        { scopeless type
          (350094 'move' _indexOfInterest[350079](350091 call iteratorIndex _iterator[350080]))
        }
        ForLoop[350081]
        {
          unknown locDom[350098] "coforall index var" "index var" "insert auto destroy"
          (350100 'move' locDom[350098] _indexOfInterest[350079])
          {
            {
              const tmp[350053] "const" "temp"
              (350055 'move' tmp[350053](350057 'deref'(350058 '_wide_get_locale' locDom)))
              { scopeless
                (350062 call =(350064 call .(350066 call postfix! locDom) c"domLocalRep") domArg)
              }
              (350050 'elided on block' 0 tmp[350053])
            }
            (350074 call _downEndCount _coforallCount[350071] nil[44])
            (350073 'coforall loop')
          }
          label _continueLabel[350084]
          _indexOfInterest[350079]
          _iterator[350080]
        }
        label _breakLabel[350085]
        Defer
        {
          {
            (350127 call _endCountFree _coforallCount[350071])
          }
        }
        (350132 call _waitEndCount _coforallCount[350071] 1 numTasks[350072])
      }
      {
        const _coforallCount[350144] "const" "end count" "temp"
        (350201 'move' _coforallCount[350144](350198 call _endCountAlloc 1))
        unknown _indexOfInterest[350152] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350153] "expr temp" "temp"
        (350162 'move' _iterator[350153](350160 call _getIterator tmpIter[350044]))
        Defer
        {
          {
            (350178 call _freeIterator _iterator[350153])
          }
        }
        { scopeless type
          (350167 'move' _indexOfInterest[350152](350164 call iteratorIndex _iterator[350153]))
        }
        ForLoop[350154]
        {
          unknown locDom[350171] "coforall index var" "index var" "insert auto destroy"
          (350173 'move' locDom[350171] _indexOfInterest[350152])
          (350185 call _upEndCount _coforallCount[350144] 1)
          {
            {
              const tmp[350036] "const" "temp"
              (350037 'move' tmp[350036](350034 'deref'(350033 '_wide_get_locale' locDom)))
              { scopeless
                (350030 call =(350026 call .(350022 call postfix! locDom) c"domLocalRep") domArg)
              }
              (350040 'elided on block' 0 tmp[350036])
            }
            (350147 call _downEndCount _coforallCount[350144] nil[44])
            (350146 'coforall loop')
          }
          label _continueLabel[350157]
          _indexOfInterest[350152]
          _iterator[350153]
        }
        label _breakLabel[350158]
        Defer
        {
          {
            (350189 call _endCountFree _coforallCount[350144])
          }
        }
        (350194 call _waitEndCount _coforallCount[350144] 1)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiGetIndices[350229](arg _mt[350234]:_MT[238], arg this[350231] :
  ReplicatedDom) : _unknown[51] "method"
  {
    if(350270 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (350268 call writeln "ReplicatedDom.dsiGetIndices")
      }
    }
    (350284 return(350283 call(350279 call .(350278 call redirectee) c"getIndices")))
  }
  { scopeless type
    (350246 call * rank(350245 call range idxType(350241 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[51].these[350292](arg _mt[350297]:_MT[238], arg this[350294] :
  ReplicatedDom) : _unknown[51] "iterator fn" "method"
  {
    { scopeless
      unknown dom[350302](350301 call redirectee)
      (350305 'end of statement')
    }
    {
      unknown _indexOfInterest[350312] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350313] "expr temp" "temp"
      (350322 'move' _iterator[350313](350320 call _getIterator dom))
      Defer
      {
        {
          (350338 call _freeIterator _iterator[350313])
        }
      }
      { scopeless type
        (350327 'move' _indexOfInterest[350312](350324 call iteratorIndex _iterator[350313]))
      }
      ForLoop[350314]
      {
        unknown i[350331] "index var" "insert auto destroy"
        (350333 'move' i[350331] _indexOfInterest[350312])
        { scopeless
          (350310 yield i)
        }
        label _continueLabel[350317]
        _indexOfInterest[350312]
        _iterator[350313]
      }
      label _breakLabel[350318]
    }
  }
  function _unknown[51].these[350354](arg _mt[350359]:_MT[238], arg this[350356] :
  ReplicatedDom, param arg tag[350351] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[350384] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350385] "expr temp" "temp"
      (350394 'move' _iterator[350385](350392 call _getIterator(350380 call(350375 call .(350372 call .(350371 call chpl_myLocDom) c"domLocalRep") c"these") tag)))
      Defer
      {
        {
          (350411 call _freeIterator _iterator[350385])
        }
      }
      { scopeless type
        (350400 'move' _indexOfInterest[350384](350397 call iteratorIndex _iterator[350385]))
      }
      ForLoop[350386]
      {
        unknown follow[350404] "index var" "insert auto destroy"
        (350406 'move' follow[350404] _indexOfInterest[350384])
        { scopeless
          (350382 yield follow)
        }
        label _continueLabel[350389]
        _indexOfInterest[350384]
        _iterator[350385]
      }
      label _breakLabel[350390]
    }
  }
  where {
    (350366 call == tag(350363 call . iterKind c"leader"))
  }
  function _unknown[51].these[350429](arg _mt[350436]:_MT[238], arg this[350433] :
  ReplicatedDom, param arg tag[350426] :
  iterKind, arg followThis[350431]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[350459] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[350460] "expr temp" "temp"
      (350469 'move' _iterator[350460](350467 call _getIterator(350455 call(350449 call .(350448 call redirectee) c"these") tag followThis)))
      Defer
      {
        {
          (350486 call _freeIterator _iterator[350460])
        }
      }
      { scopeless type
        (350475 'move' _indexOfInterest[350459](350472 call iteratorIndex _iterator[350460]))
      }
      ForLoop[350461]
      {
        unknown i[350479] "index var" "insert auto destroy"
        (350481 'move' i[350479] _indexOfInterest[350459])
        { scopeless
          (350457 yield i)
        }
        label _continueLabel[350464]
        _indexOfInterest[350459]
        _iterator[350460]
      }
      label _breakLabel[350465]
    }
  }
  where {
    (350443 call == tag(350440 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[350502](arg _mt[350507]:_MT[238], arg this[350504] :
  ReplicatedDom, arg f[350500]:_any[178](?)) : _unknown[51] "method"
  {
    (350521 call(350516 call .(350513 call .(350512 call redirectee) c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiDims[350530](arg _mt[350535]:_MT[238], arg this[350532] :
  ReplicatedDom) : _unknown[51] "method"
  {
    { scopeless
      (350557 return(350556 call(350552 call .(350551 call redirectee) c"dims")))
    }
  }
  { scopeless type
    (350547 call * rank(350546 call range idxType(350542 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[51].dsiDim[350570](arg _mt[350575]:_MT[238], arg this[350572] :
  ReplicatedDom, arg dim[350567] :
  int[13]) : _unknown[51] "method"
  {
    { scopeless
      (350595 return(350594 call(350589 call .(350588 call redirectee) c"dim") dim))
    }
  }
  { scopeless type
    (350585 call range idxType(350581 call . BoundedRangeType c"bounded") stridable)
  }
  function _unknown[51].dsiLow[350604](arg _mt[350609]:_MT[238], arg this[350606] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350617 return(350614 call .(350613 call redirectee) c"low"))
    }
  }
  function _unknown[51].dsiHigh[350625](arg _mt[350630]:_MT[238], arg this[350627] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350638 return(350635 call .(350634 call redirectee) c"high"))
    }
  }
  function _unknown[51].dsiStride[350646](arg _mt[350651]:_MT[238], arg this[350648] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350659 return(350656 call .(350655 call redirectee) c"stride"))
    }
  }
  function _unknown[51].dsiAlignedLow[350667](arg _mt[350672]:_MT[238], arg this[350669] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350680 return(350677 call .(350676 call redirectee) c"alignedLow"))
    }
  }
  function _unknown[51].dsiAlignedHigh[350688](arg _mt[350693]:_MT[238], arg this[350690] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350701 return(350698 call .(350697 call redirectee) c"alignedHigh"))
    }
  }
  function _unknown[51].dsiAlignment[350709](arg _mt[350714]:_MT[238], arg this[350711] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350722 return(350719 call .(350718 call redirectee) c"alignment"))
    }
  }
  function _unknown[51].dsiNumIndices[350730](arg _mt[350735]:_MT[238], arg this[350732] :
  ReplicatedDom) : _unknown[51] "method" "no parens"
  {
    { scopeless
      (350743 return(350740 call .(350739 call redirectee) c"size"))
    }
  }
  function _unknown[51].dsiMember[350753](arg _mt[350758]:_MT[238], arg this[350755] :
  ReplicatedDom, arg indexx[350751]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (350769 return(350768 call(350763 call .(350762 call redirectee) c"contains") indexx))
    }
  }
  function _unknown[51].dsiIndexOrder[350779](arg _mt[350784]:_MT[238], arg this[350781] :
  ReplicatedDom, arg indexx[350777]:_any[178](?)) : _unknown[51] "method"
  {
    { scopeless
      (350795 return(350794 call(350789 call .(350788 call redirectee) c"dsiIndexOrder") indexx))
    }
  }
  function _unknown[51].dsiDestroyDom[350803](arg _mt[350808]:_MT[238], arg this[350805] :
  ReplicatedDom) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[350842] "expr temp" "maybe ref" "no copy" "temp"
      (350845 'move' tmpIter[350842](350812 call . dist c"targetLocDom"))
      unknown isRngDomArr[351003] "maybe param" "temp"
      (351018 'move' isRngDomArr[351003](351016 call ||(351005 call isBoundedRange tmpIter[350842])(351014 call ||(351008 call isDomain tmpIter[350842])(351011 call isArray tmpIter[350842]))))
      if isRngDomArr[351003]
      {
        const _coforallCount[350870] "const" "end count" "temp"
        (350939 'move' _coforallCount[350870](350936 call _endCountAlloc 1))
        unknown numTasks[350871] "temp"
        (350923 'move' numTasks[350871](350919 call . tmpIter[350842] c"size"))
        (350914 call _upEndCount _coforallCount[350870] 1 numTasks[350871])
        (350911 call chpl_resetTaskSpawn numTasks[350871])
        unknown _indexOfInterest[350878] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350879] "expr temp" "temp"
        (350888 'move' _iterator[350879](350886 call _getIterator tmpIter[350842]))
        Defer
        {
          {
            (350904 call _freeIterator _iterator[350879])
          }
        }
        { scopeless type
          (350893 'move' _indexOfInterest[350878](350890 call iteratorIndex _iterator[350879]))
        }
        ForLoop[350880]
        {
          unknown localeIdx[350897] "coforall index var" "index var" "insert auto destroy"
          (350899 'move' localeIdx[350897] _indexOfInterest[350878])
          {
            {
              const tmp[350851] "const" "temp"
              (350853 'move' tmp[350851](350855 'deref'(350856 '_wide_get_locale'(350861 call(350858 call . dist c"targetLocales") localeIdx))))
              { scopeless
                (350865 call chpl__delete(350867 call localDoms localeIdx))
              }
              (350848 'elided on block' 0 tmp[350851])
            }
            (350873 call _downEndCount _coforallCount[350870] nil[44])
            (350872 'coforall loop')
          }
          label _continueLabel[350883]
          _indexOfInterest[350878]
          _iterator[350879]
        }
        label _breakLabel[350884]
        Defer
        {
          {
            (350926 call _endCountFree _coforallCount[350870])
          }
        }
        (350931 call _waitEndCount _coforallCount[350870] 1 numTasks[350871])
      }
      {
        const _coforallCount[350943] "const" "end count" "temp"
        (351000 'move' _coforallCount[350943](350997 call _endCountAlloc 1))
        unknown _indexOfInterest[350951] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[350952] "expr temp" "temp"
        (350961 'move' _iterator[350952](350959 call _getIterator tmpIter[350842]))
        Defer
        {
          {
            (350977 call _freeIterator _iterator[350952])
          }
        }
        { scopeless type
          (350966 'move' _indexOfInterest[350951](350963 call iteratorIndex _iterator[350952]))
        }
        ForLoop[350953]
        {
          unknown localeIdx[350970] "coforall index var" "index var" "insert auto destroy"
          (350972 'move' localeIdx[350970] _indexOfInterest[350951])
          (350984 call _upEndCount _coforallCount[350943] 1)
          {
            {
              const tmp[350833] "const" "temp"
              (350834 'move' tmp[350833](350831 'deref'(350830 '_wide_get_locale'(350821 call(350816 call . dist c"targetLocales") localeIdx))))
              { scopeless
                (350827 call chpl__delete(350825 call localDoms localeIdx))
              }
              (350837 'elided on block' 0 tmp[350833])
            }
            (350946 call _downEndCount _coforallCount[350943] nil[44])
            (350945 'coforall loop')
          }
          label _continueLabel[350956]
          _indexOfInterest[350951]
          _iterator[350952]
        }
        label _breakLabel[350957]
        Defer
        {
          {
            (350988 call _endCountFree _coforallCount[350943])
          }
        }
        (350993 call _waitEndCount _coforallCount[350943] 1)
      }
    }
  }
  function _unknown[51].dsiAssignDomain[351032](arg _mt[351041]:_MT[238], arg this[351038] :
  ReplicatedDom, arg rhs[351029] :
  _domain, arg lhsPrivate[351035] :
  bool[10]) : _unknown[51] "method"
  {
    (351054 call(351044 call . this c"dsiSetIndices")(351052 call(351048 call . rhs c"getIndices")))
  }
  type ReplicatedArr[351185](?) const dom[351062] "const" unknown localArrs[351096](351094 call chpl__buildArrayRuntimeType(351092 call chpl__ensureDomainExpr(351070 call .(351067 call . dom c"dist") c"targetLocDom"))(351091 'to unmanaged class from unknown'(351090 'to nilable class from type'(351089 call LocReplicatedArr eltType(351078 call . dom c"rank")(351082 call . dom c"idxType")(351086 call . dom c"stridable"))))) function ReplicatedArr[351185](?).chpl_myLocArr[351102](arg _mt[351189]:_MT[238], arg this[351187]:ReplicatedArr[351185](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351138 call _cond_test boundsChecking)
    {
      { scopeless
        if(351133 call _cond_test(351121 call !(351120 call(351112 call .(351109 call .(351106 call . dom c"dist") c"targetLocDom") c"contains")(351116 call . here c"id"))))
        {
          { scopeless
            (351131 call halt "locale "(351127 call . here c"id") " has no local replicand")
          }
        }
      }
    }
    (351153 return(351151 call postfix!(351150 call localArrs(351146 call . here c"id"))))
  } function ReplicatedArr[351185](?).replicand[351163](arg _mt[351193]:_MT[238], arg this[351191]:ReplicatedArr[351185](?), arg loc[351160] :
  locale[28]) ref : _unknown[51] "method" "primary method"
  {
    (351179 return(351176 call .(351172 call postfix!(351171 call localArrs(351167 call . loc c"id"))) c"arrLocalRep"))
  } AbsBaseArr
  function _unknown[51].replicand[351203](arg _mt[351208]:_MT[238], arg this[351205] :
  _array, arg loc[351200] :
  locale[28]) ref : _unknown[51] "method" "no doc"
  {
    (351217 return(351216 call(351211 call . _value c"replicand") loc))
  }
  type LocReplicatedArr[351469](?) unknown eltType[351223] "type variable" unknown rank[351227] "param" int[13] unknown idxType[351231] "type variable" unknown stridable[351235] "param" bool[10] unknown myDom[351246](351245 'to unmanaged class from unknown'(351244 call LocReplicatedDom rank idxType stridable)) unknown arrLocalRep[351260] "local field" "no auto destroy" "unsafe"(351258 call chpl__buildArrayRuntimeType(351256 call chpl__ensureDomainExpr(351251 call . myDom c"domLocalRep")) eltType) function LocReplicatedArr[351469](?).init[351268](arg _mt[351473]:_MT[238], arg this[351471]:LocReplicatedArr[351469](?), arg eltType[351266]:_any[178](?), param arg rank[351271] :
  int[13], arg idxType[351274]:_any[178](?), param arg stridable[351277] :
  bool[10], arg myDom[351287] :
  (351286 'to unmanaged class from unknown'(351285 call LocReplicatedDom rank idxType stridable)), param arg initElts[351291] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (351299 call =(351295 call . this c"eltType") eltType)
    (351308 call =(351304 call . this c"rank") rank)
    (351316 call =(351312 call . this c"idxType") idxType)
    (351324 call =(351320 call . this c"stridable") stridable)
    (351334 call =(351330 call . this c"myDom") myDom)
    (351356 call =(351338 call . this c"arrLocalRep")(351355 call(351348 call .(351345 call .(351342 call . this c"myDom") c"domLocalRep") c"buildArray") eltType(initElts = 1)))
    if(351418 call _cond_test(351369 call &&(351361 call == initElts 0)(351367 call !(351366 call isPODType eltType))))
    {
      (351415 call compilerError(351412 call +(351393 call + "ReplicatedDist array initialization is not currently supported for element type "(351391 call _cast string[26] eltType)) " - please default-initialize the array"))
    }
  } function LocReplicatedArr[351469](?).deinit[351426](arg _mt[351477]:_MT[238], arg this[351475]:LocReplicatedArr[351469](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    (351433 call _do_destroy_array arrLocalRep(deinitElts = 1))
  } function LocReplicatedArr[351469](?).writeThis[351442](arg _mt[351481]:_MT[238], arg this[351479]:LocReplicatedArr[351469](?), arg f[351440]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (351463 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  }
  function _unknown[51].init[351489](arg _mt[351496]:_MT[238], arg this[351493] :
  ReplicatedArr, arg eltType[351487]:_any[178](?), arg dom[351491]:_any[178](?)) : _unknown[51] "method"
  {
    (351505 call(351499 call . super c"init")(eltType = eltType))
    (351513 call =(351509 call . this c"dom") dom)
  }
  function _unknown[51].stridable[351521](arg _mt[351526]:_MT[238], arg this[351523] :
  ReplicatedArr) param : _unknown[51] "method" "no parens"
  {
    (351532 return(351529 call . dom c"stridable"))
  }
  function _unknown[51].idxType[351540](arg _mt[351545]:_MT[238], arg this[351542] :
  ReplicatedArr) type : _unknown[51] "method" "no parens"
  {
    (351551 return(351548 call . dom c"idxType"))
  }
  function _unknown[51].rank[351559](arg _mt[351564]:_MT[238], arg this[351561] :
  ReplicatedArr) param : _unknown[51] "method" "no parens"
  {
    (351570 return(351567 call . dom c"rank"))
  }
  function _unknown[51].dsiGetBaseDom[351578](arg _mt[351583]:_MT[238], arg this[351580] :
  ReplicatedArr) : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (351586 return dom)
    }
  }
  function _unknown[51].dsiSupportsPrivatization[351594](arg _mt[351599]:_MT[238], arg this[351596] :
  ReplicatedArr) param : _unknown[51] "method" "method overrides"
  {
    { scopeless
      (351602 return 1)
    }
  }
  type ReplicatedArrPrvData[351617](?) unknown dompid[351608] unknown localArrs[351612]
  function _unknown[51].dsiGetPrivatizeData[351623](arg _mt[351628]:_MT[238], arg this[351625] :
  ReplicatedArr) : _unknown[51] "method"
  {
    if(351652 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (351650 call writeln "ReplicatedArr.dsiGetPrivatizeData")
      }
    }
    (351667 return(351658 'new'(351666 call ReplicatedArrPrvData(351661 call . dom c"pid") localArrs)))
  }
  function _unknown[51].dsiPrivatize[351676](arg _mt[351681]:_MT[238], arg this[351678] :
  ReplicatedArr, arg privatizeData[351674]:_any[178](?)) : _unknown[51] "method"
  {
    if(351706 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (351704 call writeln "ReplicatedArr.dsiPrivatize on " here)
      }
    }
    { scopeless
      unknown privdom[351724](351723 call chpl_getPrivatizedCopy(351717 'typeof'(351714 call . this c"dom"))(351720 call . privatizeData c"dompid"))
      (351727 'end of statement')
    }
    { scopeless
      unknown result[351736](351730 'new'(_chpl_manager = unmanaged[220](?))(351735 call ReplicatedArr eltType privdom))
      (351739 'end of statement')
    }
    (351750 call =(351743 call . result c"localArrs")(351747 call . privatizeData c"localArrs"))
    (351754 return result)
  }
  function _unknown[51].dsiBuildArray[351763](arg _mt[351772]:_MT[238], arg this[351769] :
  ReplicatedDom, arg eltType[351761]:_any[178](?), param arg initElts[351766] :
  bool[10]) : _unknown[51] "method"
  {
    if(351806 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (351804 call writeln "ReplicatedDom.dsiBuildArray")
      }
    }
    { scopeless
      unknown result[351823](351814 'new'(_chpl_manager = unmanaged[220](?))(351822 call ReplicatedArr eltType(351821 call _to_unmanaged this)))
      (351826 'end of statement')
    }
    {
      unknown tmpIter[351876] "expr temp" "maybe ref" "no copy" "temp"
      (351879 'move' tmpIter[351876](351843 call _build_tuple(351834 call . dist c"targetLocales") localDoms(351840 call . result c"localArrs")))
      unknown isRngDomArr[352086] "maybe param" "temp"
      (352101 'move' isRngDomArr[352086](352099 call ||(352088 call isBoundedRange tmpIter[351876])(352097 call ||(352091 call isDomain tmpIter[351876])(352094 call isArray tmpIter[351876]))))
      if isRngDomArr[352086]
      {
        const _coforallCount[351911] "const" "end count" "temp"
        (352001 'move' _coforallCount[351911](351998 call _endCountAlloc 1))
        unknown numTasks[351912] "temp"
        (351985 'move' numTasks[351912](351981 call . tmpIter[351876] c"size"))
        (351976 call _upEndCount _coforallCount[351911] 1 numTasks[351912])
        (351973 call chpl_resetTaskSpawn numTasks[351912])
        unknown _indexOfInterest[351919] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[351920] "expr temp" "temp"
        (351929 'move' _iterator[351920](351927 call _getIteratorZip tmpIter[351876]))
        Defer
        {
          {
            (351966 call _freeIterator _iterator[351920])
          }
        }
        { scopeless type
          (351934 'move' _indexOfInterest[351919](351931 call iteratorIndex _iterator[351920]))
        }
        ForLoop[351921]
        {
          (351939 call _check_tuple_var_decl _indexOfInterest[351919] 3)
          unknown loc[351945] "coforall index var" "index var" "insert auto destroy"
          (351947 'move' loc[351945](351943 call _indexOfInterest[351919] 0))
          unknown locDom[351952] "coforall index var" "index var" "insert auto destroy"
          (351954 'move' locDom[351952](351950 call _indexOfInterest[351919] 1))
          unknown locArr[351959] "coforall index var" "index var" "insert auto destroy"
          (351961 'move' locArr[351959](351957 call _indexOfInterest[351919] 2))
          {
            {
              const tmp[351885] "const" "temp"
              (351887 'move' tmp[351885](351889 'deref'(351890 '_wide_get_locale' loc)))
              { scopeless
                (351894 call = locArr(351896 'new'(_chpl_manager = unmanaged[220](?))(351900 call LocReplicatedArr eltType rank idxType stridable(351906 call postfix! locDom)(initElts = initElts))))
              }
              (351882 'elided on block' 0 tmp[351885])
            }
            (351914 call _downEndCount _coforallCount[351911] nil[44])
            (351913 'coforall loop')
          }
          label _continueLabel[351924]
          _indexOfInterest[351919]
          _iterator[351920]
        }
        label _breakLabel[351925]
        Defer
        {
          {
            (351988 call _endCountFree _coforallCount[351911])
          }
        }
        (351993 call _waitEndCount _coforallCount[351911] 1 numTasks[351912])
      }
      {
        const _coforallCount[352005] "const" "end count" "temp"
        (352083 'move' _coforallCount[352005](352080 call _endCountAlloc 1))
        unknown _indexOfInterest[352013] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352014] "expr temp" "temp"
        (352023 'move' _iterator[352014](352021 call _getIteratorZip tmpIter[351876]))
        Defer
        {
          {
            (352060 call _freeIterator _iterator[352014])
          }
        }
        { scopeless type
          (352028 'move' _indexOfInterest[352013](352025 call iteratorIndex _iterator[352014]))
        }
        ForLoop[352015]
        {
          (352033 call _check_tuple_var_decl _indexOfInterest[352013] 3)
          unknown loc[352039] "coforall index var" "index var" "insert auto destroy"
          (352041 'move' loc[352039](352037 call _indexOfInterest[352013] 0))
          unknown locDom[352046] "coforall index var" "index var" "insert auto destroy"
          (352048 'move' locDom[352046](352044 call _indexOfInterest[352013] 1))
          unknown locArr[352053] "coforall index var" "index var" "insert auto destroy"
          (352055 'move' locArr[352053](352051 call _indexOfInterest[352013] 2))
          (352067 call _upEndCount _coforallCount[352005] 1)
          {
            {
              const tmp[351867] "const" "temp"
              (351868 'move' tmp[351867](351865 'deref'(351864 '_wide_get_locale' loc)))
              { scopeless
                (351861 call = locArr(351848 'new'(_chpl_manager = unmanaged[220](?))(351860 call LocReplicatedArr eltType rank idxType stridable(351856 call postfix! locDom)(initElts = initElts))))
              }
              (351871 'elided on block' 0 tmp[351867])
            }
            (352008 call _downEndCount _coforallCount[352005] nil[44])
            (352007 'coforall loop')
          }
          label _continueLabel[352018]
          _indexOfInterest[352013]
          _iterator[352014]
        }
        label _breakLabel[352019]
        Defer
        {
          {
            (352071 call _endCountFree _coforallCount[352005])
          }
        }
        (352076 call _waitEndCount _coforallCount[352005] 1)
      }
    }
    (352106 return result)
  }
  { scopeless type
    (351783 'to unmanaged class from unknown'(351782 call ReplicatedArr eltType(351781 call _to_unmanaged(351779 'typeof' this))))
  }
  function _unknown[51].dsiAccess[352116](arg _mt[352121]:_MT[238], arg this[352118] :
  ReplicatedArr, arg indexx[352114]:_any[178](?)) ref : _unknown[51] "method"
  {
    (352132 return(352131 call(352126 call .(352125 call chpl_myLocArr) c"arrLocalRep") indexx))
  }
  function _unknown[51].dsiBoundsCheck[352142](arg _mt[352147]:_MT[238], arg this[352144] :
  ReplicatedArr, arg indexx[352140]:_any[178](?)) : _unknown[51] "method"
  {
    (352165 return(352164 call(352156 call .(352153 call .(352150 call . dom c"dist") c"targetLocDom") c"contains")(352160 call . here c"id")))
  }
  function _unknown[51].dsiSerialWrite[352175](arg _mt[352180]:_MT[238], arg this[352177] :
  ReplicatedArr, arg f[352173]:_any[178](?)) : _unknown[51] "method"
  {
    (352208 call(352203 call .(352200 call .(352197 call .(352195 call postfix!(352194 call localArrs(352190 call .(352189 call(352185 call . f c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[51].dsiSerialRead[352219](arg _mt[352226]:_MT[238], arg this[352223] :
  ReplicatedArr, arg f[352217]:_any[178](?), arg loc[352221]:_any[178](?)) : _unknown[51] "method"
  {
    (352254 call(352249 call .(352246 call .(352243 call .(352241 call postfix!(352240 call localArrs(352236 call .(352235 call(352231 call . f c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f)
  }
  { scopeless type
    void[4]
  }
  function isReplicatedArr[352264](arg arr[352262]:_any[178](?)) param : _unknown[51]
  {
    (352278 return(352277 call isSubtype(352274 'typeof'(352273 call _to_borrowed(352271 call chpl__getActualArray arr))) ReplicatedArr))
  }
  function chpl_serialReadWriteRectangular[352287](arg f[352285]:_any[178](?), arg arr[352289]:_any[178](?), arg dom[352291]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      const origloc[352303] "const"(352302 call(352298 call . f c"readWriteThisFromLocale"))
      (352306 'end of statement')
    }
    {
      const tmp[352319] "const" "temp"
      (352320 'move' tmp[352319](352317 'deref'(352316 '_wide_get_locale' origloc)))
      { scopeless
        (352314 call chpl_serialReadWriteRectangularHelper f arr dom)
      }
      (352323 'elided on block' 0 tmp[352319])
    }
  }
  where {
    (352296 call isReplicatedArr arr)
  }
  function _unknown[51].dsiElementInitializationComplete[352333](arg _mt[352338]:_MT[238], arg this[352335] :
  ReplicatedArr) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiElementDeinitializationComplete[352346](arg _mt[352351]:_MT[238], arg this[352348] :
  ReplicatedArr) : _unknown[51] "method" "method overrides"
  {
  }
  function _unknown[51].dsiDestroyArr[352363](arg _mt[352368]:_MT[238], arg this[352365] :
  ReplicatedArr, arg deinitElts[352360] :
  bool[10]) : _unknown[51] "method" "method overrides"
  {
    {
      unknown tmpIter[352405] "expr temp" "maybe ref" "no copy" "temp"
      (352408 'move' tmpIter[352405](352384 call _build_tuple(352379 call .(352376 call . dom c"dist") c"targetLocales") localArrs))
      unknown isRngDomArr[352587] "maybe param" "temp"
      (352602 'move' isRngDomArr[352587](352600 call ||(352589 call isBoundedRange tmpIter[352405])(352598 call ||(352592 call isDomain tmpIter[352405])(352595 call isArray tmpIter[352405]))))
      if isRngDomArr[352587]
      {
        const _coforallCount[352426] "const" "end count" "temp"
        (352509 'move' _coforallCount[352426](352506 call _endCountAlloc 1))
        unknown numTasks[352427] "temp"
        (352493 'move' numTasks[352427](352489 call . tmpIter[352405] c"size"))
        (352484 call _upEndCount _coforallCount[352426] 1 numTasks[352427])
        (352481 call chpl_resetTaskSpawn numTasks[352427])
        unknown _indexOfInterest[352434] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352435] "expr temp" "temp"
        (352444 'move' _iterator[352435](352442 call _getIteratorZip tmpIter[352405]))
        Defer
        {
          {
            (352474 call _freeIterator _iterator[352435])
          }
        }
        { scopeless type
          (352449 'move' _indexOfInterest[352434](352446 call iteratorIndex _iterator[352435]))
        }
        ForLoop[352436]
        {
          (352454 call _check_tuple_var_decl _indexOfInterest[352434] 2)
          unknown loc[352460] "coforall index var" "index var" "insert auto destroy"
          (352462 'move' loc[352460](352458 call _indexOfInterest[352434] 0))
          unknown locArr[352467] "coforall index var" "index var" "insert auto destroy"
          (352469 'move' locArr[352467](352465 call _indexOfInterest[352434] 1))
          {
            {
              const tmp[352414] "const" "temp"
              (352416 'move' tmp[352414](352418 'deref'(352419 '_wide_get_locale' loc)))
              {
                (352423 call chpl__delete locArr)
              }
              (352411 'elided on block' 0 tmp[352414])
            }
            (352429 call _downEndCount _coforallCount[352426] nil[44])
            (352428 'coforall loop')
          }
          label _continueLabel[352439]
          _indexOfInterest[352434]
          _iterator[352435]
        }
        label _breakLabel[352440]
        Defer
        {
          {
            (352496 call _endCountFree _coforallCount[352426])
          }
        }
        (352501 call _waitEndCount _coforallCount[352426] 1 numTasks[352427])
      }
      {
        const _coforallCount[352513] "const" "end count" "temp"
        (352584 'move' _coforallCount[352513](352581 call _endCountAlloc 1))
        unknown _indexOfInterest[352521] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[352522] "expr temp" "temp"
        (352531 'move' _iterator[352522](352529 call _getIteratorZip tmpIter[352405]))
        Defer
        {
          {
            (352561 call _freeIterator _iterator[352522])
          }
        }
        { scopeless type
          (352536 'move' _indexOfInterest[352521](352533 call iteratorIndex _iterator[352522]))
        }
        ForLoop[352523]
        {
          (352541 call _check_tuple_var_decl _indexOfInterest[352521] 2)
          unknown loc[352547] "coforall index var" "index var" "insert auto destroy"
          (352549 'move' loc[352547](352545 call _indexOfInterest[352521] 0))
          unknown locArr[352554] "coforall index var" "index var" "insert auto destroy"
          (352556 'move' locArr[352554](352552 call _indexOfInterest[352521] 1))
          (352568 call _upEndCount _coforallCount[352513] 1)
          {
            {
              const tmp[352395] "const" "temp"
              (352396 'move' tmp[352395](352393 'deref'(352392 '_wide_get_locale' loc)))
              {
                (352388 call chpl__delete locArr)
              }
              (352399 'elided on block' 0 tmp[352395])
            }
            (352516 call _downEndCount _coforallCount[352513] nil[44])
            (352515 'coforall loop')
          }
          label _continueLabel[352526]
          _indexOfInterest[352521]
          _iterator[352522]
        }
        label _breakLabel[352527]
        Defer
        {
          {
            (352572 call _endCountFree _coforallCount[352513])
          }
        }
        (352577 call _waitEndCount _coforallCount[352513] 1)
      }
    }
  }
  function _unknown[51].these[352612](arg _mt[352617]:_MT[238], arg this[352614] :
  ReplicatedArr) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[352630] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352631] "expr temp" "temp"
      (352640 'move' _iterator[352631](352638 call _getIterator(352624 call .(352623 call chpl_myLocArr) c"arrLocalRep")))
      Defer
      {
        {
          (352657 call _freeIterator _iterator[352631])
        }
      }
      { scopeless type
        (352646 'move' _indexOfInterest[352630](352643 call iteratorIndex _iterator[352631]))
      }
      ForLoop[352632]
      {
        unknown a[352650] "index var" "insert auto destroy"
        (352652 'move' a[352650] _indexOfInterest[352630])
        { scopeless
          (352628 yield a)
        }
        label _continueLabel[352635]
        _indexOfInterest[352630]
        _iterator[352631]
      }
      label _breakLabel[352636]
    }
  }
  { scopeless type
    eltType
  }
  function _unknown[51].these[352675](arg _mt[352680]:_MT[238], arg this[352677] :
  ReplicatedArr, param arg tag[352672] :
  iterKind) : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[352700] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352701] "expr temp" "temp"
      (352710 'move' _iterator[352701](352708 call _getIterator(352696 call(352691 call . dom c"these") tag)))
      Defer
      {
        {
          (352727 call _freeIterator _iterator[352701])
        }
      }
      { scopeless type
        (352716 'move' _indexOfInterest[352700](352713 call iteratorIndex _iterator[352701]))
      }
      ForLoop[352702]
      {
        unknown follow[352720] "index var" "insert auto destroy"
        (352722 'move' follow[352720] _indexOfInterest[352700])
        { scopeless
          (352698 yield follow)
        }
        label _continueLabel[352705]
        _indexOfInterest[352700]
        _iterator[352701]
      }
      label _breakLabel[352706]
    }
  }
  where {
    (352687 call == tag(352684 call . iterKind c"leader"))
  }
  function _unknown[51].these[352745](arg _mt[352752]:_MT[238], arg this[352749] :
  ReplicatedArr, param arg tag[352742] :
  iterKind, arg followThis[352747]:_any[178](?)) ref : _unknown[51] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[352778] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[352779] "expr temp" "temp"
      (352788 'move' _iterator[352779](352786 call _getIterator(352774 call(352768 call .(352765 call .(352764 call chpl_myLocArr) c"arrLocalRep") c"these") tag followThis)))
      Defer
      {
        {
          (352805 call _freeIterator _iterator[352779])
        }
      }
      { scopeless type
        (352794 'move' _indexOfInterest[352778](352791 call iteratorIndex _iterator[352779]))
      }
      ForLoop[352780]
      {
        unknown a[352798] "index var" "insert auto destroy"
        (352800 'move' a[352798] _indexOfInterest[352778])
        { scopeless
          (352776 yield a)
        }
        label _continueLabel[352783]
        _indexOfInterest[352778]
        _iterator[352779]
      }
      label _breakLabel[352784]
    }
  }
  where {
    (352759 call == tag(352756 call . iterKind c"follower"))
  }
  function _unknown[51].dsiTargetLocales[352819](arg _mt[352824]:_MT[238], arg this[352821] :
  Replicated) : _unknown[51] "method"
  {
    (352827 return targetLocales)
  }
  function _unknown[51].dsiTargetLocales[352835](arg _mt[352840]:_MT[238], arg this[352837] :
  ReplicatedDom) : _unknown[51] "method"
  {
    (352846 return(352843 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[352854](arg _mt[352859]:_MT[238], arg this[352856] :
  ReplicatedArr) : _unknown[51] "method"
  {
    (352868 return(352865 call .(352862 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[352876](arg _mt[352881]:_MT[238], arg this[352878] :
  ReplicatedDom) param : _unknown[51] "method"
  {
    { scopeless
      (352884 return 1)
    }
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[352892](arg _mt[352897]:_MT[238], arg this[352894] :
  ReplicatedArr) param : _unknown[51] "method"
  {
    { scopeless
      (352900 return 1)
    }
  }
  function _unknown[51].dsiLocalSubdomain[352912](arg _mt[352917]:_MT[238], arg this[352914] :
  ReplicatedDom, arg loc[352909] :
  locale[28]) : _unknown[51] "method"
  {
    if(352950 call _cond_test(352931 call(352923 call .(352920 call . localDoms c"_dom") c"contains")(352927 call . loc c"id")))
    {
      { scopeless
        (352933 return domRep)
      }
    }
    {
      { scopeless
        unknown d[352942](352940 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (352945 'end of statement')
      }
      (352948 return d)
    }
  }
  function _unknown[51].dsiLocalSubdomain[352965](arg _mt[352970]:_MT[238], arg this[352967] :
  ReplicatedArr, arg loc[352962] :
  locale[28]) : _unknown[51] "method"
  {
    if(353006 call _cond_test(352984 call(352976 call .(352973 call . localArrs c"_dom") c"contains")(352980 call . loc c"id")))
    {
      { scopeless
        (352989 return(352986 call . dom c"domRep"))
      }
    }
    {
      { scopeless
        unknown d[352998](352996 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (353001 'end of statement')
      }
      (353004 return d)
    }
  }
  function _unknown[51].dsiLocalSlice[353019](arg _mt[353024]:_MT[238], arg this[353021] :
  ReplicatedArr, arg ranges[353017]:_any[178](?)) : _unknown[51] "method"
  {
    (353036 return(353035 call(353029 call .(353028 call chpl_myLocArr) c"arrLocalRep")(353033 'expand_tuple' ranges)))
  }
}