AST dump for OwnedObject after pass cleanup.
Module use list: 

{
  (39588 'use' ChapelStandard)
  function _owned[30](?).chpl_forwarding_expr1[39606](arg _mt[40583]:_MT[238], arg this[40581]:_owned[30](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (39608 return(39605 call borrow))
  }
  function _owned[30](?).init[39616](arg _mt[40587]:_MT[238], arg this[40585]:_owned[30](?), arg chpl_t[39614]:_any[178](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    if(39645 call _cond_test(39622 call !(39621 call isClass chpl_t)))
    {
      (39643 call compilerError "owned only works with classes")
    }
    (39661 call =(39654 call . this c"chpl_t")(39660 call _to_borrowed chpl_t))
    (39671 call =(39667 call . this c"chpl_p") nil[44])
  }
  function _owned[30](?).init[39682](arg _mt[40591]:_MT[238], arg this[40589]:_owned[30](?), arg p[39679] :
  borrowed[211](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (39703 call compilerError "cannot initialize owned from a borrow")
    (39717 call(39709 call . this c"init")(39715 call _to_unmanaged p))
  }
  function _owned[30](?).init[39727](arg _mt[40595]:_MT[238], arg this[40593]:_owned[30](?), arg p[39724] :
  unmanaged[220](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (39738 call =(39730 call . this c"chpl_t")(39737 call _to_borrowed(39735 'typeof' p)))
    (39750 call =(39743 call . this c"chpl_p")(39749 call _to_borrowed p))
  }
  function _owned[30](?).init[39762](arg _mt[40599]:_MT[238], arg this[40597]:_owned[30](?), arg p[39759] :
  unknown T[39757]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (39793 call compilerError "owned only works with classes")
    (39801 call =(39797 call . this c"chpl_t") T)
    (39809 call =(39805 call . this c"chpl_p") p)
  }
  where {
    (39788 call &&(39779 call &&(39769 call ==(39767 call isClass T) 0)(39777 call ==(354228 'is_subtype' _owned T) 0))(39786 call ==(39784 call isIterator p) 0))
  }
  function _owned[30](?).init=[39821](arg _mt[40603]:_MT[238], arg this[40601]:_owned[30](?), ref arg src[39818] :
  _owned) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(39857 call _cond_test(39832 call &&(39827 call isNonNilableClass(39825 'typeof' this))(39831 call isNilableClass src)))
    {
      (39855 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
    }
    if(39943 call _cond_test(39876 call ==(354229 'is_coercible'(39871 call .(39870 'typeof' this) c"chpl_t")(39865 call . src c"chpl_t")) 0))
    {
      (39941 call compilerError "cannot coerce '"(39900 call _cast string[26](39898 'typeof' src)) "' to '"(39922 call _cast string[26](39920 'typeof' this)) "' in initialization")
    }
    (39957 call =(39949 call . this c"chpl_t")(39954 call .(39953 'typeof' this) c"chpl_t"))
    (39970 call =(39961 call . this c"chpl_p")(39969 call(39965 call . src c"release")))
    (39978 call(39974 call . this c"complete"))
  }
  function _owned[30](?).init=[39988](arg _mt[40607]:_MT[238], arg this[40605]:_owned[30](?), arg src[39985] :
  _shared) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (40009 call compilerError "cannot create an owned variable from a shared class instance")
    (40017 call =(40013 call . this c"chpl_t") int[13])
  }
  function _owned[30](?).init=[40028](arg _mt[40611]:_MT[238], arg this[40609]:_owned[30](?), arg src[40025] :
  borrowed[211](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (40051 call compilerError "cannot create an owned variable from a borrowed class instance")
    (40059 call =(40055 call . this c"chpl_t") int[13])
  }
  function _owned[30](?).init=[40070](arg _mt[40615]:_MT[238], arg this[40613]:_owned[30](?), arg src[40067] :
  unmanaged[220](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (40091 call compilerError "cannot create an owned variable from an unmanaged class instance")
    (40099 call =(40095 call . this c"chpl_t") int[13])
  }
  function _owned[30](?).init=[40110](arg _mt[40619]:_MT[238], arg this[40617]:_owned[30](?), arg src[40107] :
  _nilType) : _unknown[51] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    (40122 call(40113 call . this c"init")(40118 call .(40117 'typeof' this) c"chpl_t"))
    if(40150 call _cond_test(40128 call isNonNilableClass chpl_t))
    {
      (40148 call compilerError "Assigning non-nilable owned to nil")
    }
  }
  function _owned[30](?).init[40163](arg _mt[40623]:_MT[238], arg this[40621]:_owned[30](?), ref arg src[40160] :
  _owned) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (40173 call =(40166 call . this c"chpl_t")(40170 call . src c"chpl_t"))
    (40187 call =(40178 call . this c"chpl_p")(40186 call(40182 call . src c"release")))
  }
  function _owned[30](?).create[40196](arg _mt[40627]:_MT[238], arg this[40625]:_owned[30](?), arg source[40194]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (40222 call compilerError "cannot create an 'owned' from "(40220 call _cast string[26](40218 'typeof' source)))
  }
  function _owned[30](?).create[40233](arg _mt[40631]:_MT[238], arg this[40629]:_owned[30](?), in arg take[40230] :
  _owned) : _unknown[51] "inline" "method" "primary method"
  {
    (40236 return take)
  }
  function _owned[30](?).create[40247](arg _mt[40635]:_MT[238], arg this[40633]:_owned[30](?), arg p[40244] :
  unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown result[40254](40252 call _cast _owned(40250 'typeof' p))
    (40257 'end of statement')
    (40267 call(40262 call . result c"retain") p)
    (40270 return result)
  }
  function _owned[30](?).deinit[40276](arg _mt[40639]:_MT[238], arg this[40637]:_owned[30](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(40300 call _cond_test(40281 call isClass chpl_p))
    {
      if(40294 call _cond_test(40284 call != chpl_p nil[44]))
      {
        (40291 call chpl__delete(40289 call _to_unmanaged chpl_p))
      }
    }
  }
  function _owned[30](?).clear[40309](arg _mt[40643]:_MT[238], ref arg this[40641]:_owned[30](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    if(40329 call _cond_test(40313 call != chpl_p nil[44]))
    {
      (40320 call chpl__delete(40318 call _to_unmanaged chpl_p))
      (40326 call = chpl_p nil[44])
    }
  }
  function _owned[30](?).retain[40342](arg _mt[40647]:_MT[238], ref arg this[40645]:_owned[30](?), arg newPtr[40339] :
  unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(40446 call _cond_test(40350 call !(354230 'is_coercible' chpl_t(40346 'typeof' newPtr))))
    {
      (40444 call compilerError(40441 call +(40422 call +(40413 call +(40394 call +(40375 call + "cannot retain '"(40373 call _cast string[26](40371 'typeof' newPtr))) "' ") "(expected '")(40420 call _cast string[26](40418 call _to_unmanaged chpl_t))) "')"))
    }
    unknown oldPtr[40453] chpl_p
    (40456 'end of statement')
    (40459 call = chpl_p newPtr)
    if(40471 call _cond_test oldPtr)
    {
      (40468 call chpl__delete(40466 call _to_unmanaged oldPtr))
    }
  }
  function _owned[30](?).release[40480](arg _mt[40651]:_MT[238], ref arg this[40649]:_owned[30](?)) : _unknown[51] "leaves this nil" "nil from this" "method" "primary method"
  {
    unknown oldPtr[40483] chpl_p
    (40486 'end of statement')
    (40490 call = chpl_p nil[44])
    if(40516 call _cond_test(40498 call ==(40496 call _to_nilable chpl_t) chpl_t))
    {
      (40504 return(40503 call _to_unmanaged oldPtr))
    }
    {
      (40513 return(40512 call _to_unmanaged(40509 call postfix! oldPtr)))
    }
  }
  function _owned[30](?).borrow[40524](arg _mt[40655]:_MT[238], arg this[40653]:_owned[30](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    if(40543 call _cond_test(40531 call ==(40529 call _to_nilable chpl_t) chpl_t))
    {
      (40534 return chpl_p)
    }
    {
      (40540 return(40538 call postfix! chpl_p))
    }
  }
  function _owned[30](?).borrow[40552](arg _mt[40659]:_MT[238], arg this[40657]:_owned[30](?)) type : _unknown[51] "method" "primary method"
  {
    if(40572 call _cond_test(40559 call ==(40557 call _to_nilable chpl_t) chpl_t))
    {
      (40562 return chpl_t)
    }
    {
      (40569 return(40568 call _to_nonnil chpl_t))
    }
  }
  type _owned[30](?) unknown chpl_t[39592] "no doc" "type variable" unknown chpl_p[39599] "no doc" "owned"(39598 'to nilable class' chpl_t) forwarding ( )
  function =[40668](ref arg lhs[40665] :
  _owned, ref arg rhs[40671] :
  _owned) : _unknown[51] "assignop" "no return value for void"
  {
    (40687 'import' HaltWrappers)
    if(40708 call _cond_test(40704 call &&(40695 call ==(40691 call . lhs c"chpl_p") nil[44])(40702 call ==(40698 call . rhs c"chpl_p") nil[44])))
    {
      (40706 return _void[55])
    }
    if(40766 call _cond_test(40715 call || chpl_checkNilDereferences enablePostfixBangChecks))
    {
      if(40761 call _cond_test(40723 call isNonNilableClass(40719 call . lhs c"chpl_t")))
      {
        if(40756 call _cond_test(40729 call ==(40725 call . rhs c"chpl_p") nil[44]))
        {
          (40753 call(40732 call . HaltWrappers c"nilCheckHalt") "assigning nil to non-nilable owned")
        }
      }
    }
    (40781 call(40771 call . lhs c"retain")(40779 call(40775 call . rhs c"release")))
  }
  where {
    (40684 call !(40682 call &&(40677 call isNonNilableClass lhs)(40681 call isNilableClass rhs)))
  }
  function =[40792](ref arg lhs[40789] :
  _owned, arg rhs[40795] :
  _nilType) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (40811 call(40807 call . lhs c"clear"))
  }
  where {
    (40802 call !(40801 call isNonNilableClass lhs))
  }
  function <=>[40823](ref arg lhs[40820] :
  _owned, ref arg rhs[40827] :
  (40826 'typeof' lhs)) : _unknown[51] "no return value for void"
  {
    (40838 call <=>(40831 call . lhs c"chpl_p")(40835 call . rhs c"chpl_p"))
  }
  function chpl__initCopy[40850](ref arg src[40847] :
  _owned) : _unknown[51] "init copy fn" "no doc"
  {
    unknown ret[40857](40852 'new'(40856 call _owned src))
    (40860 'end of statement')
    (40863 return ret)
  }
  function chpl__autoCopy[40873](ref arg src[40870] :
  _owned) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[40880](40875 'new'(40879 call _owned src))
    (40883 'end of statement')
    (40886 return ret)
  }
  function chpl__autoDestroy[40896](ref arg x[40893] :
  _owned) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    (40904 'call destructor'(40903 'deref' x))
  }
  function _unknown[51].readWriteThis[40914](arg _mt[40919]:_MT[238], arg this[40916] :
  _owned, arg f[40912]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    (40926 call <~> f(40923 call . this c"chpl_p"))
  }
  function _cast[40941](arg t[40938] :
  (40936 call _owned(40935 'to nilable class from type' class[232](?))), in arg x[40946] :
  (40944 call _owned class[232](?))) : _unknown[51] "inline" "no doc"
  {
    unknown castPtr[40979](40977 call _cast(40976 call _to_nilable(40974 call _to_unmanaged(40970 call . t c"chpl_t")))(40964 call . x c"chpl_p"))
    (40982 'end of statement')
    (40989 call =(40985 call . x c"chpl_p") nil[44])
    (40997 return(40992 'new'(40996 call _owned castPtr)))
  }
  where {
    (354232 'is_subtype'(40961 call _to_nonnil(40957 call . t c"chpl_t"))(40951 call . x c"chpl_t"))
  }
  function _cast[41011](arg t[41008] :
  (41006 call _owned(41005 'to nilable class from type' class[232](?))), in arg x[41017] :
  (41015 call _owned(41014 'to nilable class from type' class[232](?)))) : _unknown[51] "inline" "no doc"
  {
    unknown castPtr[41047](41045 call _cast(41044 call _to_nilable(41042 call _to_unmanaged(41038 call . t c"chpl_t")))(41032 call . x c"chpl_p"))
    (41050 'end of statement')
    (41057 call =(41053 call . x c"chpl_p") nil[44])
    (41065 return(41060 'new'(41064 call _owned castPtr)))
  }
  where {
    (354233 'is_subtype'(41027 call . t c"chpl_t")(41022 call . x c"chpl_t"))
  }
  function _cast[41078](arg t[41075] :
  (41073 call _owned class[232](?)), in arg x[41083] :
  (41081 call _owned class[232](?))) : _unknown[51] "inline" "no doc"
  {
    unknown castPtr[41113](41111 call _cast(41110 call _to_nilable(41108 call _to_unmanaged(41104 call . t c"chpl_t")))(41098 call . x c"chpl_p"))
    (41116 'end of statement')
    (41123 call =(41119 call . x c"chpl_p") nil[44])
    (41133 return(41126 'new'(41132 call _owned(41129 call postfix! castPtr))))
  }
  where {
    (354234 'is_subtype'(41093 call . t c"chpl_t")(41088 call . x c"chpl_t"))
  }
  function _cast[41146](arg t[41143] :
  (41141 call _owned class[232](?)), in arg x[41152] :
  (41150 call _owned(41149 'to nilable class from type' class[232](?)))) : _unknown[51] throws "inline" "no doc"
  {
    unknown castPtr[41185](41183 call _cast(41182 call _to_nilable(41180 call _to_unmanaged(41176 call . t c"chpl_t")))(41170 call . x c"chpl_p"))
    (41188 'end of statement')
    if(41203 call _cond_test(41192 call == castPtr nil[44]))
    {
      (41200 'throw'(41196 'new'(_chpl_manager = _owned[30](?))(41199 call NilClassError)))
    }
    (41212 call =(41208 call . x c"chpl_p") nil[44])
    (41222 return(41215 'new'(41221 call _owned(41218 call postfix! castPtr))))
  }
  where {
    (354235 'is_subtype'(41165 call . t c"chpl_t")(41162 call _to_nonnil(41158 call . x c"chpl_t")))
  }
  function _cast[41235](arg t[41232] :
  (41230 call _owned class[232](?)), ref arg x[41241] :
  (41239 call _owned(41238 'to nilable class from type' class[232](?)))) : _unknown[51] throws "inline" "no doc"
  {
    if(41274 call _cond_test(41263 call ==(41259 call . x c"chpl_p") nil[44]))
    {
      (41271 'throw'(41267 'new'(_chpl_manager = _owned[30](?))(41270 call NilClassError)))
    }
    unknown castPtr[41296](41295 'try-expr'(41293 call _cast(41292 call _to_nonnil(41290 call _to_unmanaged(41286 call . t c"chpl_t")))(41280 call . x c"chpl_p")))
    (41299 'end of statement')
    (41305 call =(41301 call . x c"chpl_p") nil[44])
    (41313 return(41308 'new'(41312 call _owned castPtr)))
  }
  where {
    (354236 'is_proper_subtype'(41256 call _to_nonnil(41252 call . x c"chpl_t"))(41246 call . t c"chpl_t"))
  }
  function _cast[41326](arg t[41323] :
  (41321 call _owned class[232](?)), ref arg x[41331] :
  (41329 call _owned class[232](?))) : _unknown[51] throws "inline" "no doc"
  {
    unknown castPtr[41362](41361 'try-expr'(41359 call _cast(41358 call _to_nonnil(41356 call _to_unmanaged(41352 call . t c"chpl_t")))(41346 call . x c"chpl_p")))
    (41365 'end of statement')
    (41372 call =(41368 call . x c"chpl_p") nil[44])
    (41380 return(41375 'new'(41379 call _owned castPtr)))
  }
  where {
    (354237 'is_proper_subtype'(41341 call . x c"chpl_t")(41336 call . t c"chpl_t"))
  }
  function _cast[41394](arg t[41391] :
  (41389 call _owned(41388 'to nilable class from type' class[232](?))), ref arg x[41400] :
  (41398 call _owned(41397 'to nilable class from type' class[232](?)))) : _unknown[51] "inline" "no doc"
  {
    unknown castPtr[41430](41428 call _cast(41427 call _to_nilable(41425 call _to_unmanaged(41421 call . t c"chpl_t")))(41415 call . x c"chpl_p"))
    (41433 'end of statement')
    if(41448 call _cond_test(41437 call != castPtr nil[44]))
    {
      (41444 call =(41440 call . x c"chpl_p") nil[44])
    }
    (41457 return(41452 'new'(41456 call _owned castPtr)))
  }
  where {
    (354238 'is_proper_subtype'(41410 call . x c"chpl_t")(41405 call . t c"chpl_t"))
  }
  function _cast[41471](arg t[41468] :
  (41466 call _owned(41465 'to nilable class from type' class[232](?))), ref arg x[41476] :
  (41474 call _owned class[232](?))) : _unknown[51] "inline" "no doc"
  {
    unknown castPtr[41509](41507 call _cast(41506 call _to_nilable(41504 call _to_unmanaged(41500 call . t c"chpl_t")))(41494 call . x c"chpl_p"))
    (41512 'end of statement')
    if(41527 call _cond_test(41516 call != castPtr nil[44]))
    {
      (41523 call =(41519 call . x c"chpl_p") nil[44])
    }
    (41536 return(41531 'new'(41535 call _owned castPtr)))
  }
  where {
    (354239 'is_proper_subtype'(41489 call . x c"chpl_t")(41486 call _to_nonnil(41482 call . t c"chpl_t")))
  }
  function _cast[41547](arg t[41544] :
  _owned, arg x[41550] :
  _nilType) : _unknown[51] "inline" "no doc"
  {
    if(41581 call _cond_test(41559 call isNonNilableClass(41555 call . t c"chpl_t")))
    {
      (41579 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown tmp[41588] t
    (41591 'end of statement')
    (41593 return tmp)
  }
  function postfix![41603](const  ref arg x[41600] :
  _owned) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    (41606 'import' HaltWrappers)
    if(41649 call _cond_test chpl_checkNilDereferences)
    {
      if(41644 call _cond_test(41621 call ==(41616 call _to_nilable(41612 call . x c"chpl_t"))(41618 call . x c"chpl_t")))
      {
        if(41639 call _cond_test(41628 call ==(41624 call . x c"chpl_p") nil[44]))
        {
          (41636 call(41631 call . HaltWrappers c"nilCheckHalt") "argument to ! is nil")
        }
      }
    }
    (41660 return(41659 call _to_nonnil(41655 call . x c"chpl_p")))
  }
}