AST dump for ChapelLocks after pass normalize.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416090]() : void[4] "insert line file info" "module init"
  {
    (524058 return _void[55])
  }
  function chpl_LocalSpinlock[187432].lock[187323](arg _mt[187436]:_MT[238], arg this[187434]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187402] "const" "temp"
    unknown call_tmp[690536] "expr temp" "maybe param" "maybe type" "temp"
    (690539 'move' call_tmp[690536](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402](187400 'deref' call_tmp[690536]))
    {
      {
        unknown tmp[187348] "temp"
        unknown tmp[429568] "maybe param" "temp"
        unknown call_tmp[690543] "expr temp" "maybe param" "maybe type" "temp"
        (690546 'move' call_tmp[690543](361923 call l _mt[243] this[187434]))
        (429579 'move' tmp[429568](187386 call(187383 call (partial) read _mt[243] call_tmp[690543])))
        unknown call_tmp[690550] "expr temp" "maybe param" "maybe type" "temp"
        (690553 'move' call_tmp[690550](429581 call _cond_invalid tmp[429568]))
        if call_tmp[690550]
        {
          (429584 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572132] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572133] "maybe param" "temp"
        unknown call_tmp[690555] "expr temp" "maybe param" "maybe type" "temp"
        (690558 'move' call_tmp[690555](429569 call isTrue tmp[429568]))
        (572138 'move' tmp[572133](572136 call _cond_test call_tmp[690555]))
        if tmp[572133]
        {
          (572143 'move' tmp[572132](572140 '_paramFoldLogical' tmp[572133] 1))
        }
        {
          unknown tmp[572145] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690562] "expr temp" "maybe param" "maybe type" "temp"
          (690565 'move' call_tmp[690562](361928 call l _mt[243] this[187434]))
          unknown call_tmp[690569] "expr temp" "maybe param" "maybe type" "temp"
          (690572 'move' call_tmp[690569](187391 call(187388 call (partial) testAndSet _mt[243] call_tmp[690562]) acquire[187008]))
          (572147 'move' tmp[572145](429573 call isTrue call_tmp[690569]))
          (572152 'move' tmp[572132](572149 '_paramFoldLogical' tmp[572133] tmp[572145]))
        }
        (187396 'move' tmp[187348](187379 call _cond_test tmp[572132]))
        WhileDo[187353]
        {
          (187346 call chpl_task_yield)
          (484541 'end of statement')
          label _continueLabel[187351]
          unknown tmp[429547] "maybe param" "temp"
          unknown call_tmp[690576] "expr temp" "maybe param" "maybe type" "temp"
          (690579 'move' call_tmp[690576](361912 call l _mt[243] this[187434]))
          (429558 'move' tmp[429547](187364 call(187361 call (partial) read _mt[243] call_tmp[690576])))
          unknown call_tmp[690583] "expr temp" "maybe param" "maybe type" "temp"
          (690586 'move' call_tmp[690583](429560 call _cond_invalid tmp[429547]))
          if call_tmp[690583]
          {
            (429563 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572159] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572160] "maybe param" "temp"
          unknown call_tmp[690588] "expr temp" "maybe param" "maybe type" "temp"
          (690591 'move' call_tmp[690588](429548 call isTrue tmp[429547]))
          (572165 'move' tmp[572160](572163 call _cond_test call_tmp[690588]))
          if tmp[572160]
          {
            (572170 'move' tmp[572159](572167 '_paramFoldLogical' tmp[572160] 1))
          }
          {
            unknown tmp[572172] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690595] "expr temp" "maybe param" "maybe type" "temp"
            (690598 'move' call_tmp[690595](361917 call l _mt[243] this[187434]))
            unknown call_tmp[690602] "expr temp" "maybe param" "maybe type" "temp"
            (690605 'move' call_tmp[690602](187369 call(187366 call (partial) testAndSet _mt[243] call_tmp[690595]) acquire[187008]))
            (572174 'move' tmp[572172](429552 call isTrue call_tmp[690602]))
            (572179 'move' tmp[572159](572176 '_paramFoldLogical' tmp[572160] tmp[572172]))
          }
          (187374 'move' tmp[187348](187357 call _cond_test tmp[572159]))
          tmp[187348]
        }
        label _breakLabel[187352]
      }
      (187407 'on block' 0 tmp[187402])
    }
    (524054 return _void[55])
  }
  function chpl_LocalSpinlock[187432].unlock[187415](arg _mt[187440]:_MT[238], arg this[187438]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690609] "expr temp" "maybe param" "maybe type" "temp"
    (690612 'move' call_tmp[690609](361934 call l _mt[243] this[187438]))
    (187426 call(187418 call (partial) clear _mt[243] call_tmp[690609]) release[187006])
    (524056 return _void[55])
  }
  type chpl_LocalSpinlock[187432] unknown l[187317](187316 call chpl__processorAtomicType bool[10])
  (355265 'used modules list'(187305 'use' Atomics[43964])(187307 'use' ChapelBase[307])(187310 'use' MemConsistency[186648]))
}