AST dump for ChapelLocks after pass normalize.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[415958]() : void[4] "insert line file info" "module init"
  {
    (523921 return _void[55])
  }
  function chpl_LocalSpinlock[187386].lock[187277](arg _mt[187390]:_MT[238], arg this[187388]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187356] "const" "temp"
    unknown call_tmp[690407] "expr temp" "maybe param" "maybe type" "temp"
    (690410 'move' call_tmp[690407](187353 '_wide_get_locale' this[187388]))
    (187358 'move' tmp[187356](187354 'deref' call_tmp[690407]))
    {
      {
        unknown tmp[187302] "temp"
        unknown tmp[429436] "maybe param" "temp"
        unknown call_tmp[690414] "expr temp" "maybe param" "maybe type" "temp"
        (690417 'move' call_tmp[690414](361792 call l _mt[243] this[187388]))
        (429447 'move' tmp[429436](187340 call(187337 call (partial) read _mt[243] call_tmp[690414])))
        unknown call_tmp[690421] "expr temp" "maybe param" "maybe type" "temp"
        (690424 'move' call_tmp[690421](429449 call _cond_invalid tmp[429436]))
        if call_tmp[690421]
        {
          (429452 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572003] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572004] "maybe param" "temp"
        unknown call_tmp[690426] "expr temp" "maybe param" "maybe type" "temp"
        (690429 'move' call_tmp[690426](429437 call isTrue tmp[429436]))
        (572009 'move' tmp[572004](572007 call _cond_test call_tmp[690426]))
        if tmp[572004]
        {
          (572014 'move' tmp[572003](572011 '_paramFoldLogical' tmp[572004] 1))
        }
        {
          unknown tmp[572016] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690433] "expr temp" "maybe param" "maybe type" "temp"
          (690436 'move' call_tmp[690433](361797 call l _mt[243] this[187388]))
          unknown call_tmp[690440] "expr temp" "maybe param" "maybe type" "temp"
          (690443 'move' call_tmp[690440](187345 call(187342 call (partial) testAndSet _mt[243] call_tmp[690433]) acquire[186962]))
          (572018 'move' tmp[572016](429441 call isTrue call_tmp[690440]))
          (572023 'move' tmp[572003](572020 '_paramFoldLogical' tmp[572004] tmp[572016]))
        }
        (187350 'move' tmp[187302](187333 call _cond_test tmp[572003]))
        WhileDo[187307]
        {
          (187300 call chpl_task_yield)
          (484407 'end of statement')
          label _continueLabel[187305]
          unknown tmp[429415] "maybe param" "temp"
          unknown call_tmp[690447] "expr temp" "maybe param" "maybe type" "temp"
          (690450 'move' call_tmp[690447](361781 call l _mt[243] this[187388]))
          (429426 'move' tmp[429415](187318 call(187315 call (partial) read _mt[243] call_tmp[690447])))
          unknown call_tmp[690454] "expr temp" "maybe param" "maybe type" "temp"
          (690457 'move' call_tmp[690454](429428 call _cond_invalid tmp[429415]))
          if call_tmp[690454]
          {
            (429431 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572030] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572031] "maybe param" "temp"
          unknown call_tmp[690459] "expr temp" "maybe param" "maybe type" "temp"
          (690462 'move' call_tmp[690459](429416 call isTrue tmp[429415]))
          (572036 'move' tmp[572031](572034 call _cond_test call_tmp[690459]))
          if tmp[572031]
          {
            (572041 'move' tmp[572030](572038 '_paramFoldLogical' tmp[572031] 1))
          }
          {
            unknown tmp[572043] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690466] "expr temp" "maybe param" "maybe type" "temp"
            (690469 'move' call_tmp[690466](361786 call l _mt[243] this[187388]))
            unknown call_tmp[690473] "expr temp" "maybe param" "maybe type" "temp"
            (690476 'move' call_tmp[690473](187323 call(187320 call (partial) testAndSet _mt[243] call_tmp[690466]) acquire[186962]))
            (572045 'move' tmp[572043](429420 call isTrue call_tmp[690473]))
            (572050 'move' tmp[572030](572047 '_paramFoldLogical' tmp[572031] tmp[572043]))
          }
          (187328 'move' tmp[187302](187311 call _cond_test tmp[572030]))
          tmp[187302]
        }
        label _breakLabel[187306]
      }
      (187361 'on block' 0 tmp[187356])
    }
    (523917 return _void[55])
  }
  function chpl_LocalSpinlock[187386].unlock[187369](arg _mt[187394]:_MT[238], arg this[187392]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690480] "expr temp" "maybe param" "maybe type" "temp"
    (690483 'move' call_tmp[690480](361803 call l _mt[243] this[187392]))
    (187380 call(187372 call (partial) clear _mt[243] call_tmp[690480]) release[186960])
    (523919 return _void[55])
  }
  type chpl_LocalSpinlock[187386] unknown l[187271](187270 call chpl__processorAtomicType bool[10])
  (355134 'used modules list'(187259 'use' Atomics[43961])(187261 'use' ChapelBase[307])(187264 'use' MemConsistency[186602]))
}