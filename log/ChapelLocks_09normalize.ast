AST dump for ChapelLocks after pass normalize.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416085]() : void[4] "insert line file info" "module init"
  {
    (524053 return _void[55])
  }
  function chpl_LocalSpinlock[187432].lock[187323](arg _mt[187436]:_MT[238], arg this[187434]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187402] "const" "temp"
    unknown call_tmp[690520] "expr temp" "maybe param" "maybe type" "temp"
    (690523 'move' call_tmp[690520](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402](187400 'deref' call_tmp[690520]))
    {
      {
        unknown tmp[187348] "temp"
        unknown tmp[429563] "maybe param" "temp"
        unknown call_tmp[690527] "expr temp" "maybe param" "maybe type" "temp"
        (690530 'move' call_tmp[690527](361920 call l _mt[243] this[187434]))
        (429574 'move' tmp[429563](187386 call(187383 call (partial) read _mt[243] call_tmp[690527])))
        unknown call_tmp[690534] "expr temp" "maybe param" "maybe type" "temp"
        (690537 'move' call_tmp[690534](429576 call _cond_invalid tmp[429563]))
        if call_tmp[690534]
        {
          (429579 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572116] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572117] "maybe param" "temp"
        unknown call_tmp[690539] "expr temp" "maybe param" "maybe type" "temp"
        (690542 'move' call_tmp[690539](429564 call isTrue tmp[429563]))
        (572122 'move' tmp[572117](572120 call _cond_test call_tmp[690539]))
        if tmp[572117]
        {
          (572127 'move' tmp[572116](572124 '_paramFoldLogical' tmp[572117] 1))
        }
        {
          unknown tmp[572129] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690546] "expr temp" "maybe param" "maybe type" "temp"
          (690549 'move' call_tmp[690546](361925 call l _mt[243] this[187434]))
          unknown call_tmp[690553] "expr temp" "maybe param" "maybe type" "temp"
          (690556 'move' call_tmp[690553](187391 call(187388 call (partial) testAndSet _mt[243] call_tmp[690546]) acquire[187008]))
          (572131 'move' tmp[572129](429568 call isTrue call_tmp[690553]))
          (572136 'move' tmp[572116](572133 '_paramFoldLogical' tmp[572117] tmp[572129]))
        }
        (187396 'move' tmp[187348](187379 call _cond_test tmp[572116]))
        WhileDo[187353]
        {
          (187346 call chpl_task_yield)
          (484538 'end of statement')
          label _continueLabel[187351]
          unknown tmp[429542] "maybe param" "temp"
          unknown call_tmp[690560] "expr temp" "maybe param" "maybe type" "temp"
          (690563 'move' call_tmp[690560](361909 call l _mt[243] this[187434]))
          (429553 'move' tmp[429542](187364 call(187361 call (partial) read _mt[243] call_tmp[690560])))
          unknown call_tmp[690567] "expr temp" "maybe param" "maybe type" "temp"
          (690570 'move' call_tmp[690567](429555 call _cond_invalid tmp[429542]))
          if call_tmp[690567]
          {
            (429558 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572143] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572144] "maybe param" "temp"
          unknown call_tmp[690572] "expr temp" "maybe param" "maybe type" "temp"
          (690575 'move' call_tmp[690572](429543 call isTrue tmp[429542]))
          (572149 'move' tmp[572144](572147 call _cond_test call_tmp[690572]))
          if tmp[572144]
          {
            (572154 'move' tmp[572143](572151 '_paramFoldLogical' tmp[572144] 1))
          }
          {
            unknown tmp[572156] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690579] "expr temp" "maybe param" "maybe type" "temp"
            (690582 'move' call_tmp[690579](361914 call l _mt[243] this[187434]))
            unknown call_tmp[690586] "expr temp" "maybe param" "maybe type" "temp"
            (690589 'move' call_tmp[690586](187369 call(187366 call (partial) testAndSet _mt[243] call_tmp[690579]) acquire[187008]))
            (572158 'move' tmp[572156](429547 call isTrue call_tmp[690586]))
            (572163 'move' tmp[572143](572160 '_paramFoldLogical' tmp[572144] tmp[572156]))
          }
          (187374 'move' tmp[187348](187357 call _cond_test tmp[572143]))
          tmp[187348]
        }
        label _breakLabel[187352]
      }
      (187407 'on block' 0 tmp[187402])
    }
    (524049 return _void[55])
  }
  function chpl_LocalSpinlock[187432].unlock[187415](arg _mt[187440]:_MT[238], arg this[187438]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690593] "expr temp" "maybe param" "maybe type" "temp"
    (690596 'move' call_tmp[690593](361931 call l _mt[243] this[187438]))
    (187426 call(187418 call (partial) clear _mt[243] call_tmp[690593]) release[187006])
    (524051 return _void[55])
  }
  type chpl_LocalSpinlock[187432] unknown l[187317](187316 call chpl__processorAtomicType bool[10])
  (355262 'used modules list'(187305 'use' Atomics[43964])(187307 'use' ChapelBase[307])(187310 'use' MemConsistency[186648]))
}