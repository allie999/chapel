AST dump for ChapelLocks after pass normalize.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416163]() : void[4] "insert line file info" "module init"
  {
    (524136 return _void[55])
  }
  function chpl_LocalSpinlock[187432].lock[187323](arg _mt[187436]:_MT[238], arg this[187434]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187402] "const" "temp"
    unknown call_tmp[690623] "expr temp" "maybe param" "maybe type" "temp"
    (690626 'move' call_tmp[690623](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402](187400 'deref' call_tmp[690623]))
    {
      {
        unknown tmp[187348] "temp"
        unknown tmp[429641] "maybe param" "temp"
        unknown call_tmp[690630] "expr temp" "maybe param" "maybe type" "temp"
        (690633 'move' call_tmp[690630](361991 call l _mt[243] this[187434]))
        (429652 'move' tmp[429641](187386 call(187383 call (partial) read _mt[243] call_tmp[690630])))
        unknown call_tmp[690637] "expr temp" "maybe param" "maybe type" "temp"
        (690640 'move' call_tmp[690637](429654 call _cond_invalid tmp[429641]))
        if call_tmp[690637]
        {
          (429657 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572219] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572220] "maybe param" "temp"
        unknown call_tmp[690642] "expr temp" "maybe param" "maybe type" "temp"
        (690645 'move' call_tmp[690642](429642 call isTrue tmp[429641]))
        (572225 'move' tmp[572220](572223 call _cond_test call_tmp[690642]))
        if tmp[572220]
        {
          (572230 'move' tmp[572219](572227 '_paramFoldLogical' tmp[572220] 1))
        }
        {
          unknown tmp[572232] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690649] "expr temp" "maybe param" "maybe type" "temp"
          (690652 'move' call_tmp[690649](361996 call l _mt[243] this[187434]))
          unknown call_tmp[690656] "expr temp" "maybe param" "maybe type" "temp"
          (690659 'move' call_tmp[690656](187391 call(187388 call (partial) testAndSet _mt[243] call_tmp[690649]) acquire[187008]))
          (572234 'move' tmp[572232](429646 call isTrue call_tmp[690656]))
          (572239 'move' tmp[572219](572236 '_paramFoldLogical' tmp[572220] tmp[572232]))
        }
        (187396 'move' tmp[187348](187379 call _cond_test tmp[572219]))
        WhileDo[187353]
        {
          (187346 call chpl_task_yield)
          (484614 'end of statement')
          label _continueLabel[187351]
          unknown tmp[429620] "maybe param" "temp"
          unknown call_tmp[690663] "expr temp" "maybe param" "maybe type" "temp"
          (690666 'move' call_tmp[690663](361980 call l _mt[243] this[187434]))
          (429631 'move' tmp[429620](187364 call(187361 call (partial) read _mt[243] call_tmp[690663])))
          unknown call_tmp[690670] "expr temp" "maybe param" "maybe type" "temp"
          (690673 'move' call_tmp[690670](429633 call _cond_invalid tmp[429620]))
          if call_tmp[690670]
          {
            (429636 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572246] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572247] "maybe param" "temp"
          unknown call_tmp[690675] "expr temp" "maybe param" "maybe type" "temp"
          (690678 'move' call_tmp[690675](429621 call isTrue tmp[429620]))
          (572252 'move' tmp[572247](572250 call _cond_test call_tmp[690675]))
          if tmp[572247]
          {
            (572257 'move' tmp[572246](572254 '_paramFoldLogical' tmp[572247] 1))
          }
          {
            unknown tmp[572259] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690682] "expr temp" "maybe param" "maybe type" "temp"
            (690685 'move' call_tmp[690682](361985 call l _mt[243] this[187434]))
            unknown call_tmp[690689] "expr temp" "maybe param" "maybe type" "temp"
            (690692 'move' call_tmp[690689](187369 call(187366 call (partial) testAndSet _mt[243] call_tmp[690682]) acquire[187008]))
            (572261 'move' tmp[572259](429625 call isTrue call_tmp[690689]))
            (572266 'move' tmp[572246](572263 '_paramFoldLogical' tmp[572247] tmp[572259]))
          }
          (187374 'move' tmp[187348](187357 call _cond_test tmp[572246]))
          tmp[187348]
        }
        label _breakLabel[187352]
      }
      (187407 'on block' 0 tmp[187402])
    }
    (524132 return _void[55])
  }
  function chpl_LocalSpinlock[187432].unlock[187415](arg _mt[187440]:_MT[238], arg this[187438]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690696] "expr temp" "maybe param" "maybe type" "temp"
    (690699 'move' call_tmp[690696](362002 call l _mt[243] this[187438]))
    (187426 call(187418 call (partial) clear _mt[243] call_tmp[690696]) release[187006])
    (524134 return _void[55])
  }
  type chpl_LocalSpinlock[187432] unknown l[187317](187316 call chpl__processorAtomicType bool[10])
  (355333 'used modules list'(187305 'use' Atomics[43964])(187307 'use' ChapelBase[307])(187310 'use' MemConsistency[186648]))
}