AST dump for ChapelLocks after pass normalize.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416047]() : void[4] "insert line file info" "module init"
  {
    (524012 return _void[55])
  }
  function chpl_LocalSpinlock[187386].lock[187277](arg _mt[187390]:_MT[238], arg this[187388]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187356] "const" "temp"
    unknown call_tmp[690481] "expr temp" "maybe param" "maybe type" "temp"
    (690484 'move' call_tmp[690481](187353 '_wide_get_locale' this[187388]))
    (187358 'move' tmp[187356](187354 'deref' call_tmp[690481]))
    {
      {
        unknown tmp[187302] "temp"
        unknown tmp[429525] "maybe param" "temp"
        unknown call_tmp[690488] "expr temp" "maybe param" "maybe type" "temp"
        (690491 'move' call_tmp[690488](361880 call l _mt[243] this[187388]))
        (429536 'move' tmp[429525](187340 call(187337 call (partial) read _mt[243] call_tmp[690488])))
        unknown call_tmp[690495] "expr temp" "maybe param" "maybe type" "temp"
        (690498 'move' call_tmp[690495](429538 call _cond_invalid tmp[429525]))
        if call_tmp[690495]
        {
          (429541 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572077] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572078] "maybe param" "temp"
        unknown call_tmp[690500] "expr temp" "maybe param" "maybe type" "temp"
        (690503 'move' call_tmp[690500](429526 call isTrue tmp[429525]))
        (572083 'move' tmp[572078](572081 call _cond_test call_tmp[690500]))
        if tmp[572078]
        {
          (572088 'move' tmp[572077](572085 '_paramFoldLogical' tmp[572078] 1))
        }
        {
          unknown tmp[572090] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690507] "expr temp" "maybe param" "maybe type" "temp"
          (690510 'move' call_tmp[690507](361885 call l _mt[243] this[187388]))
          unknown call_tmp[690514] "expr temp" "maybe param" "maybe type" "temp"
          (690517 'move' call_tmp[690514](187345 call(187342 call (partial) testAndSet _mt[243] call_tmp[690507]) acquire[186962]))
          (572092 'move' tmp[572090](429530 call isTrue call_tmp[690514]))
          (572097 'move' tmp[572077](572094 '_paramFoldLogical' tmp[572078] tmp[572090]))
        }
        (187350 'move' tmp[187302](187333 call _cond_test tmp[572077]))
        WhileDo[187307]
        {
          (187300 call chpl_task_yield)
          (484496 'end of statement')
          label _continueLabel[187305]
          unknown tmp[429504] "maybe param" "temp"
          unknown call_tmp[690521] "expr temp" "maybe param" "maybe type" "temp"
          (690524 'move' call_tmp[690521](361869 call l _mt[243] this[187388]))
          (429515 'move' tmp[429504](187318 call(187315 call (partial) read _mt[243] call_tmp[690521])))
          unknown call_tmp[690528] "expr temp" "maybe param" "maybe type" "temp"
          (690531 'move' call_tmp[690528](429517 call _cond_invalid tmp[429504]))
          if call_tmp[690528]
          {
            (429520 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572104] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572105] "maybe param" "temp"
          unknown call_tmp[690533] "expr temp" "maybe param" "maybe type" "temp"
          (690536 'move' call_tmp[690533](429505 call isTrue tmp[429504]))
          (572110 'move' tmp[572105](572108 call _cond_test call_tmp[690533]))
          if tmp[572105]
          {
            (572115 'move' tmp[572104](572112 '_paramFoldLogical' tmp[572105] 1))
          }
          {
            unknown tmp[572117] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690540] "expr temp" "maybe param" "maybe type" "temp"
            (690543 'move' call_tmp[690540](361874 call l _mt[243] this[187388]))
            unknown call_tmp[690547] "expr temp" "maybe param" "maybe type" "temp"
            (690550 'move' call_tmp[690547](187323 call(187320 call (partial) testAndSet _mt[243] call_tmp[690540]) acquire[186962]))
            (572119 'move' tmp[572117](429509 call isTrue call_tmp[690547]))
            (572124 'move' tmp[572104](572121 '_paramFoldLogical' tmp[572105] tmp[572117]))
          }
          (187328 'move' tmp[187302](187311 call _cond_test tmp[572104]))
          tmp[187302]
        }
        label _breakLabel[187306]
      }
      (187361 'on block' 0 tmp[187356])
    }
    (524008 return _void[55])
  }
  function chpl_LocalSpinlock[187386].unlock[187369](arg _mt[187394]:_MT[238], arg this[187392]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690554] "expr temp" "maybe param" "maybe type" "temp"
    (690557 'move' call_tmp[690554](361891 call l _mt[243] this[187392]))
    (187380 call(187372 call (partial) clear _mt[243] call_tmp[690554]) release[186960])
    (524010 return _void[55])
  }
  type chpl_LocalSpinlock[187386] unknown l[187271](187270 call chpl__processorAtomicType bool[10])
  (355222 'used modules list'(187259 'use' Atomics[43961])(187261 'use' ChapelBase[307])(187264 'use' MemConsistency[186602]))
}