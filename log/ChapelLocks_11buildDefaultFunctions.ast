AST dump for ChapelLocks after pass buildDefaultFunctions.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416047]() : void[4] "insert line file info" "module init"
  {
    (524012 return _void[55])
  }
  function chpl_LocalSpinlock[187386].lock[187277](arg _mt[187390]:_MT[238], arg this[187388]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187356] "const" "temp"
    unknown call_tmp[690481] "expr temp" "maybe param" "maybe type" "temp"
    (690484 'move' call_tmp[690481](187353 '_wide_get_locale' this[187388]))
    (187358 'move' tmp[187356](187354 'deref' call_tmp[690481]))
    {
      {
        unknown tmp[187302] "temp"
        unknown tmp[429525] "maybe param" "temp"
        unknown call_tmp[690488] "expr temp" "maybe param" "maybe type" "temp"
        (690491 'move' call_tmp[690488](361880 call l _mt[243] this[187388]))
        (429536 'move' tmp[429525](187340 call(187337 call (partial) read _mt[243] call_tmp[690488])))
        unknown call_tmp[690495] "expr temp" "maybe param" "maybe type" "temp"
        (690498 'move' call_tmp[690495](429538 call _cond_invalid tmp[429525]))
        if call_tmp[690495]
        {
          (429541 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572077] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572078] "maybe param" "temp"
        unknown call_tmp[690500] "expr temp" "maybe param" "maybe type" "temp"
        (690503 'move' call_tmp[690500](429526 call isTrue tmp[429525]))
        (572083 'move' tmp[572078](572081 call _cond_test call_tmp[690500]))
        if tmp[572078]
        {
          (572088 'move' tmp[572077](572085 '_paramFoldLogical' tmp[572078] 1))
        }
        {
          unknown tmp[572090] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690507] "expr temp" "maybe param" "maybe type" "temp"
          (690510 'move' call_tmp[690507](361885 call l _mt[243] this[187388]))
          unknown call_tmp[690514] "expr temp" "maybe param" "maybe type" "temp"
          (690517 'move' call_tmp[690514](187345 call(187342 call (partial) testAndSet _mt[243] call_tmp[690507]) acquire[186962]))
          (572092 'move' tmp[572090](429530 call isTrue call_tmp[690514]))
          (572097 'move' tmp[572077](572094 '_paramFoldLogical' tmp[572078] tmp[572090]))
        }
        (187350 'move' tmp[187302](187333 call _cond_test tmp[572077]))
        WhileDo[187307]
        {
          (187300 call chpl_task_yield)
          (484496 'end of statement')
          label _continueLabel[187305]
          unknown tmp[429504] "maybe param" "temp"
          unknown call_tmp[690521] "expr temp" "maybe param" "maybe type" "temp"
          (690524 'move' call_tmp[690521](361869 call l _mt[243] this[187388]))
          (429515 'move' tmp[429504](187318 call(187315 call (partial) read _mt[243] call_tmp[690521])))
          unknown call_tmp[690528] "expr temp" "maybe param" "maybe type" "temp"
          (690531 'move' call_tmp[690528](429517 call _cond_invalid tmp[429504]))
          if call_tmp[690528]
          {
            (429520 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572104] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572105] "maybe param" "temp"
          unknown call_tmp[690533] "expr temp" "maybe param" "maybe type" "temp"
          (690536 'move' call_tmp[690533](429505 call isTrue tmp[429504]))
          (572110 'move' tmp[572105](572108 call _cond_test call_tmp[690533]))
          if tmp[572105]
          {
            (572115 'move' tmp[572104](572112 '_paramFoldLogical' tmp[572105] 1))
          }
          {
            unknown tmp[572117] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690540] "expr temp" "maybe param" "maybe type" "temp"
            (690543 'move' call_tmp[690540](361874 call l _mt[243] this[187388]))
            unknown call_tmp[690547] "expr temp" "maybe param" "maybe type" "temp"
            (690550 'move' call_tmp[690547](187323 call(187320 call (partial) testAndSet _mt[243] call_tmp[690540]) acquire[186962]))
            (572119 'move' tmp[572117](429509 call isTrue call_tmp[690547]))
            (572124 'move' tmp[572104](572121 '_paramFoldLogical' tmp[572105] tmp[572117]))
          }
          (187328 'move' tmp[187302](187311 call _cond_test tmp[572104]))
          tmp[187302]
        }
        label _breakLabel[187306]
      }
      (187361 'on block' 0 tmp[187356])
    }
    (524008 return _void[55])
  }
  function chpl_LocalSpinlock[187386].unlock[187369](arg _mt[187394]:_MT[238], arg this[187392]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690554] "expr temp" "maybe param" "maybe type" "temp"
    (690557 'move' call_tmp[690554](361891 call l _mt[243] this[187392]))
    (187380 call(187372 call (partial) clear _mt[243] call_tmp[690554]) release[186960])
    (524010 return _void[55])
  }
  function chpl_LocalSpinlock[187386].l[820295](arg _mt[820297]:_MT[238], ref arg this[820299]:chpl_LocalSpinlock[187386]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[820309] "RVV" "temp"
    unknown call_tmp[820316] "expr temp" "maybe param" "maybe type" "temp"
    (820319 'move' call_tmp[820316](820303 '.' this[820299] c"l"))
    (820314 'move' ret[820309](820313 'addr of' call_tmp[820316]))
    (820311 return ret[820309])
  }
  function chpl_LocalSpinlock[187386].init[820321](arg _mt[820323]:_MT[238], ref arg this[820324]:chpl_LocalSpinlock[187386], in arg l[820327] :
  (820330 call chpl__processorAtomicType bool[10]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (820343 'init field' this[820324] c"l" l[820327])
    (820347 return _void[55])
  }
  function chpl_LocalSpinlock[187386].init=[820349](arg _mt[820352]:_MT[238], ref arg this[820353]:chpl_LocalSpinlock[187386], arg other[820354]:chpl_LocalSpinlock[187386]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[820384] "maybe param" "maybe type" "temp"
    (820387 'move' call_tmp[820384](820362 call l _mt[243] other[820354]))
    unknown call_tmp[820389] "maybe param" "maybe type" "temp"
    (820392 'move' call_tmp[820389](820371 call chpl__processorAtomicType bool[10]))
    unknown tmp[820368] "temp"
    (820373 'init var' tmp[820368] call_tmp[820384] call_tmp[820389])
    (820375 'init field' this[820353] c"l" tmp[820368])
    (820379 'end of statement')
    (820380 return _void[55])
  }
  function chpl_LocalSpinlock[187386].deinit[820394](arg _mt[820396]:_MT[238], arg this[820398]:chpl_LocalSpinlock[187386]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (820406 return _void[55])
  }
  function chpl_LocalSpinlock[187386].writeThis[820408](arg _mt[820412]:_MT[238], arg this[820410]:chpl_LocalSpinlock[187386], arg f[820411]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820417 call writeThisDefaultImpl f[820411] this[820410])
    (820422 return _void[55])
  }
  function chpl_LocalSpinlock[187386].readThis[820424](arg _mt[820428]:_MT[238], arg this[820426]:chpl_LocalSpinlock[187386], arg f[820427]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820432 call readThisDefaultImpl f[820427] this[820426])
    (820438 return _void[55])
  }
  function chpl_fields_are_comparable[820452](arg _arg1[820454]:chpl_LocalSpinlock[187386], arg _arg2[820455]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820473]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820480] "expr temp" "maybe param" "maybe type" "temp"
    (820483 'move' call_tmp[820480](820458 call l _mt[243] _arg1[820454]))
    unknown call_tmp[820485] "expr temp" "maybe param" "maybe type" "temp"
    (820488 'move' call_tmp[820485](820462 call l _mt[243] _arg2[820455]))
    unknown call_tmp[820490] "expr temp" "maybe param" "maybe type" "temp"
    (820493 'move' call_tmp[820490](820466 'call resolves' c"==" call_tmp[820480] call_tmp[820485]))
    (820478 'move' ret[820473](820477 'deref' call_tmp[820490]))
    (820475 return ret[820473])
  }
  function ==[820440](arg _arg1[820442]:chpl_LocalSpinlock[187386], arg _arg2[820443]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820522]:bool[10] "RVV" "temp"
    unknown call_tmp[820534] "expr temp" "maybe param" "maybe type" "temp"
    (820537 'move' call_tmp[820534](820501 call l _mt[243] _arg1[820442]))
    unknown call_tmp[820539] "expr temp" "maybe param" "maybe type" "temp"
    (820542 'move' call_tmp[820539](820505 call l _mt[243] _arg2[820443]))
    unknown call_tmp[820544] "expr temp" "maybe param" "maybe type" "temp"
    (820547 'move' call_tmp[820544](820509 call != call_tmp[820534] call_tmp[820539]))
    if call_tmp[820544]
    {
      (820527 'move' ret[820522](820526 'deref' 0))
      gotoReturn _end_==[820520] _end_==[820520]
    }
    (820532 'move' ret[820522](820531 'deref' 1))
    label _end_==[820520]
    (820524 return ret[820522])
  }
  where {
    unknown call_tmp[820549] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820552 'move' call_tmp[820549](820446 'typeof' _arg1[820442]))
    unknown call_tmp[820554] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820557 'move' call_tmp[820554](820448 'typeof' _arg2[820443]))
    unknown call_tmp[820559] "expr temp" "maybe param" "maybe type" "temp"
    (820562 'move' call_tmp[820559](820450 call == call_tmp[820549] call_tmp[820554]))
    unknown call_tmp[820564] "expr temp" "maybe param" "maybe type" "temp"
    (820567 'move' call_tmp[820564](820495 call chpl_fields_are_comparable[820452] _arg1[820442] _arg2[820443]))
    (820499 '&' call_tmp[820559] call_tmp[820564])
  }
  function chpl_fields_are_comparable[820581](arg _arg1[820583]:chpl_LocalSpinlock[187386], arg _arg2[820584]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820602]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820609] "expr temp" "maybe param" "maybe type" "temp"
    (820612 'move' call_tmp[820609](820587 call l _mt[243] _arg1[820583]))
    unknown call_tmp[820614] "expr temp" "maybe param" "maybe type" "temp"
    (820617 'move' call_tmp[820614](820591 call l _mt[243] _arg2[820584]))
    unknown call_tmp[820619] "expr temp" "maybe param" "maybe type" "temp"
    (820622 'move' call_tmp[820619](820595 'call resolves' c"!=" call_tmp[820609] call_tmp[820614]))
    (820607 'move' ret[820602](820606 'deref' call_tmp[820619]))
    (820604 return ret[820602])
  }
  function !=[820569](arg _arg1[820571]:chpl_LocalSpinlock[187386], arg _arg2[820572]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820651]:bool[10] "RVV" "temp"
    unknown call_tmp[820663] "expr temp" "maybe param" "maybe type" "temp"
    (820666 'move' call_tmp[820663](820630 call l _mt[243] _arg1[820571]))
    unknown call_tmp[820668] "expr temp" "maybe param" "maybe type" "temp"
    (820671 'move' call_tmp[820668](820634 call l _mt[243] _arg2[820572]))
    unknown call_tmp[820673] "expr temp" "maybe param" "maybe type" "temp"
    (820676 'move' call_tmp[820673](820638 call != call_tmp[820663] call_tmp[820668]))
    if call_tmp[820673]
    {
      (820656 'move' ret[820651](820655 'deref' 1))
      gotoReturn _end_!=[820649] _end_!=[820649]
    }
    (820661 'move' ret[820651](820660 'deref' 0))
    label _end_!=[820649]
    (820653 return ret[820651])
  }
  where {
    unknown call_tmp[820678] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820681 'move' call_tmp[820678](820575 'typeof' _arg1[820571]))
    unknown call_tmp[820683] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820686 'move' call_tmp[820683](820577 'typeof' _arg2[820572]))
    unknown call_tmp[820688] "expr temp" "maybe param" "maybe type" "temp"
    (820691 'move' call_tmp[820688](820579 call == call_tmp[820678] call_tmp[820683]))
    unknown call_tmp[820693] "expr temp" "maybe param" "maybe type" "temp"
    (820696 'move' call_tmp[820693](820624 call chpl_fields_are_comparable[820581] _arg1[820571] _arg2[820572]))
    (820628 '&' call_tmp[820688] call_tmp[820693])
  }
  function chpl_fields_are_comparable[820710](arg _arg1[820712]:chpl_LocalSpinlock[187386], arg _arg2[820713]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820731]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820738] "expr temp" "maybe param" "maybe type" "temp"
    (820741 'move' call_tmp[820738](820716 call l _mt[243] _arg1[820712]))
    unknown call_tmp[820743] "expr temp" "maybe param" "maybe type" "temp"
    (820746 'move' call_tmp[820743](820720 call l _mt[243] _arg2[820713]))
    unknown call_tmp[820748] "expr temp" "maybe param" "maybe type" "temp"
    (820751 'move' call_tmp[820748](820724 'call resolves' c"<" call_tmp[820738] call_tmp[820743]))
    (820736 'move' ret[820731](820735 'deref' call_tmp[820748]))
    (820733 return ret[820731])
  }
  function <[820698](arg _arg1[820700]:chpl_LocalSpinlock[187386], arg _arg2[820701]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820795]:bool[10] "RVV" "temp"
    unknown call_tmp[820812] "expr temp" "maybe param" "maybe type" "temp"
    (820815 'move' call_tmp[820812](820759 call l _mt[243] _arg1[820700]))
    unknown call_tmp[820817] "expr temp" "maybe param" "maybe type" "temp"
    (820820 'move' call_tmp[820817](820763 call l _mt[243] _arg2[820701]))
    unknown call_tmp[820822] "expr temp" "maybe param" "maybe type" "temp"
    (820825 'move' call_tmp[820822](820767 call < call_tmp[820812] call_tmp[820817]))
    if call_tmp[820822]
    {
      (820800 'move' ret[820795](820799 'deref' 1))
      gotoReturn _end_<[820793] _end_<[820793]
    }
    unknown call_tmp[820827] "expr temp" "maybe param" "maybe type" "temp"
    (820830 'move' call_tmp[820827](820773 call l _mt[243] _arg1[820700]))
    unknown call_tmp[820832] "expr temp" "maybe param" "maybe type" "temp"
    (820835 'move' call_tmp[820832](820777 call l _mt[243] _arg2[820701]))
    unknown call_tmp[820837] "expr temp" "maybe param" "maybe type" "temp"
    (820840 'move' call_tmp[820837](820781 call > call_tmp[820827] call_tmp[820832]))
    if call_tmp[820837]
    {
      (820805 'move' ret[820795](820804 'deref' 0))
      gotoReturn _end_<[820793] _end_<[820793]
    }
    (820810 'move' ret[820795](820809 'deref' 0))
    label _end_<[820793]
    (820797 return ret[820795])
  }
  where {
    unknown call_tmp[820842] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820845 'move' call_tmp[820842](820704 'typeof' _arg1[820700]))
    unknown call_tmp[820847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820850 'move' call_tmp[820847](820706 'typeof' _arg2[820701]))
    unknown call_tmp[820852] "expr temp" "maybe param" "maybe type" "temp"
    (820855 'move' call_tmp[820852](820708 call == call_tmp[820842] call_tmp[820847]))
    unknown call_tmp[820857] "expr temp" "maybe param" "maybe type" "temp"
    (820860 'move' call_tmp[820857](820753 call chpl_fields_are_comparable[820710] _arg1[820700] _arg2[820701]))
    (820757 '&' call_tmp[820852] call_tmp[820857])
  }
  function chpl_fields_are_comparable[820874](arg _arg1[820876]:chpl_LocalSpinlock[187386], arg _arg2[820877]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820895]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820902] "expr temp" "maybe param" "maybe type" "temp"
    (820905 'move' call_tmp[820902](820880 call l _mt[243] _arg1[820876]))
    unknown call_tmp[820907] "expr temp" "maybe param" "maybe type" "temp"
    (820910 'move' call_tmp[820907](820884 call l _mt[243] _arg2[820877]))
    unknown call_tmp[820912] "expr temp" "maybe param" "maybe type" "temp"
    (820915 'move' call_tmp[820912](820888 'call resolves' c"<=" call_tmp[820902] call_tmp[820907]))
    (820900 'move' ret[820895](820899 'deref' call_tmp[820912]))
    (820897 return ret[820895])
  }
  function <=[820862](arg _arg1[820864]:chpl_LocalSpinlock[187386], arg _arg2[820865]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820959]:bool[10] "RVV" "temp"
    unknown call_tmp[820976] "expr temp" "maybe param" "maybe type" "temp"
    (820979 'move' call_tmp[820976](820923 call l _mt[243] _arg1[820864]))
    unknown call_tmp[820981] "expr temp" "maybe param" "maybe type" "temp"
    (820984 'move' call_tmp[820981](820927 call l _mt[243] _arg2[820865]))
    unknown call_tmp[820986] "expr temp" "maybe param" "maybe type" "temp"
    (820989 'move' call_tmp[820986](820931 call < call_tmp[820976] call_tmp[820981]))
    if call_tmp[820986]
    {
      (820964 'move' ret[820959](820963 'deref' 1))
      gotoReturn _end_<=[820957] _end_<=[820957]
    }
    unknown call_tmp[820991] "expr temp" "maybe param" "maybe type" "temp"
    (820994 'move' call_tmp[820991](820937 call l _mt[243] _arg1[820864]))
    unknown call_tmp[820996] "expr temp" "maybe param" "maybe type" "temp"
    (820999 'move' call_tmp[820996](820941 call l _mt[243] _arg2[820865]))
    unknown call_tmp[821001] "expr temp" "maybe param" "maybe type" "temp"
    (821004 'move' call_tmp[821001](820945 call > call_tmp[820991] call_tmp[820996]))
    if call_tmp[821001]
    {
      (820969 'move' ret[820959](820968 'deref' 0))
      gotoReturn _end_<=[820957] _end_<=[820957]
    }
    (820974 'move' ret[820959](820973 'deref' 1))
    label _end_<=[820957]
    (820961 return ret[820959])
  }
  where {
    unknown call_tmp[821006] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821009 'move' call_tmp[821006](820868 'typeof' _arg1[820864]))
    unknown call_tmp[821011] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821014 'move' call_tmp[821011](820870 'typeof' _arg2[820865]))
    unknown call_tmp[821016] "expr temp" "maybe param" "maybe type" "temp"
    (821019 'move' call_tmp[821016](820872 call == call_tmp[821006] call_tmp[821011]))
    unknown call_tmp[821021] "expr temp" "maybe param" "maybe type" "temp"
    (821024 'move' call_tmp[821021](820917 call chpl_fields_are_comparable[820874] _arg1[820864] _arg2[820865]))
    (820921 '&' call_tmp[821016] call_tmp[821021])
  }
  function chpl_fields_are_comparable[821038](arg _arg1[821040]:chpl_LocalSpinlock[187386], arg _arg2[821041]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821059]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821066] "expr temp" "maybe param" "maybe type" "temp"
    (821069 'move' call_tmp[821066](821044 call l _mt[243] _arg1[821040]))
    unknown call_tmp[821071] "expr temp" "maybe param" "maybe type" "temp"
    (821074 'move' call_tmp[821071](821048 call l _mt[243] _arg2[821041]))
    unknown call_tmp[821076] "expr temp" "maybe param" "maybe type" "temp"
    (821079 'move' call_tmp[821076](821052 'call resolves' c">" call_tmp[821066] call_tmp[821071]))
    (821064 'move' ret[821059](821063 'deref' call_tmp[821076]))
    (821061 return ret[821059])
  }
  function >[821026](arg _arg1[821028]:chpl_LocalSpinlock[187386], arg _arg2[821029]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821123]:bool[10] "RVV" "temp"
    unknown call_tmp[821140] "expr temp" "maybe param" "maybe type" "temp"
    (821143 'move' call_tmp[821140](821087 call l _mt[243] _arg1[821028]))
    unknown call_tmp[821145] "expr temp" "maybe param" "maybe type" "temp"
    (821148 'move' call_tmp[821145](821091 call l _mt[243] _arg2[821029]))
    unknown call_tmp[821150] "expr temp" "maybe param" "maybe type" "temp"
    (821153 'move' call_tmp[821150](821095 call > call_tmp[821140] call_tmp[821145]))
    if call_tmp[821150]
    {
      (821128 'move' ret[821123](821127 'deref' 1))
      gotoReturn _end_>[821121] _end_>[821121]
    }
    unknown call_tmp[821155] "expr temp" "maybe param" "maybe type" "temp"
    (821158 'move' call_tmp[821155](821101 call l _mt[243] _arg1[821028]))
    unknown call_tmp[821160] "expr temp" "maybe param" "maybe type" "temp"
    (821163 'move' call_tmp[821160](821105 call l _mt[243] _arg2[821029]))
    unknown call_tmp[821165] "expr temp" "maybe param" "maybe type" "temp"
    (821168 'move' call_tmp[821165](821109 call < call_tmp[821155] call_tmp[821160]))
    if call_tmp[821165]
    {
      (821133 'move' ret[821123](821132 'deref' 0))
      gotoReturn _end_>[821121] _end_>[821121]
    }
    (821138 'move' ret[821123](821137 'deref' 0))
    label _end_>[821121]
    (821125 return ret[821123])
  }
  where {
    unknown call_tmp[821170] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821173 'move' call_tmp[821170](821032 'typeof' _arg1[821028]))
    unknown call_tmp[821175] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821178 'move' call_tmp[821175](821034 'typeof' _arg2[821029]))
    unknown call_tmp[821180] "expr temp" "maybe param" "maybe type" "temp"
    (821183 'move' call_tmp[821180](821036 call == call_tmp[821170] call_tmp[821175]))
    unknown call_tmp[821185] "expr temp" "maybe param" "maybe type" "temp"
    (821188 'move' call_tmp[821185](821081 call chpl_fields_are_comparable[821038] _arg1[821028] _arg2[821029]))
    (821085 '&' call_tmp[821180] call_tmp[821185])
  }
  function chpl_fields_are_comparable[821202](arg _arg1[821204]:chpl_LocalSpinlock[187386], arg _arg2[821205]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821223]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821230] "expr temp" "maybe param" "maybe type" "temp"
    (821233 'move' call_tmp[821230](821208 call l _mt[243] _arg1[821204]))
    unknown call_tmp[821235] "expr temp" "maybe param" "maybe type" "temp"
    (821238 'move' call_tmp[821235](821212 call l _mt[243] _arg2[821205]))
    unknown call_tmp[821240] "expr temp" "maybe param" "maybe type" "temp"
    (821243 'move' call_tmp[821240](821216 'call resolves' c">=" call_tmp[821230] call_tmp[821235]))
    (821228 'move' ret[821223](821227 'deref' call_tmp[821240]))
    (821225 return ret[821223])
  }
  function >=[821190](arg _arg1[821192]:chpl_LocalSpinlock[187386], arg _arg2[821193]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821287]:bool[10] "RVV" "temp"
    unknown call_tmp[821304] "expr temp" "maybe param" "maybe type" "temp"
    (821307 'move' call_tmp[821304](821251 call l _mt[243] _arg1[821192]))
    unknown call_tmp[821309] "expr temp" "maybe param" "maybe type" "temp"
    (821312 'move' call_tmp[821309](821255 call l _mt[243] _arg2[821193]))
    unknown call_tmp[821314] "expr temp" "maybe param" "maybe type" "temp"
    (821317 'move' call_tmp[821314](821259 call > call_tmp[821304] call_tmp[821309]))
    if call_tmp[821314]
    {
      (821292 'move' ret[821287](821291 'deref' 1))
      gotoReturn _end_>=[821285] _end_>=[821285]
    }
    unknown call_tmp[821319] "expr temp" "maybe param" "maybe type" "temp"
    (821322 'move' call_tmp[821319](821265 call l _mt[243] _arg1[821192]))
    unknown call_tmp[821324] "expr temp" "maybe param" "maybe type" "temp"
    (821327 'move' call_tmp[821324](821269 call l _mt[243] _arg2[821193]))
    unknown call_tmp[821329] "expr temp" "maybe param" "maybe type" "temp"
    (821332 'move' call_tmp[821329](821273 call < call_tmp[821319] call_tmp[821324]))
    if call_tmp[821329]
    {
      (821297 'move' ret[821287](821296 'deref' 0))
      gotoReturn _end_>=[821285] _end_>=[821285]
    }
    (821302 'move' ret[821287](821301 'deref' 1))
    label _end_>=[821285]
    (821289 return ret[821287])
  }
  where {
    unknown call_tmp[821334] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821337 'move' call_tmp[821334](821196 'typeof' _arg1[821192]))
    unknown call_tmp[821339] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821342 'move' call_tmp[821339](821198 'typeof' _arg2[821193]))
    unknown call_tmp[821344] "expr temp" "maybe param" "maybe type" "temp"
    (821347 'move' call_tmp[821344](821200 call == call_tmp[821334] call_tmp[821339]))
    unknown call_tmp[821349] "expr temp" "maybe param" "maybe type" "temp"
    (821352 'move' call_tmp[821349](821245 call chpl_fields_are_comparable[821202] _arg1[821192] _arg2[821193]))
    (821249 '&' call_tmp[821344] call_tmp[821349])
  }
  function =[821354](ref arg _arg1[821356]:chpl_LocalSpinlock[187386], const?  ref arg _arg2[821357]:chpl_LocalSpinlock[187386]) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[821383] "expr temp" "maybe param" "maybe type" "temp"
    (821386 'move' call_tmp[821383](821367 call l _mt[243] _arg1[821356]))
    unknown call_tmp[821390] "expr temp" "maybe param" "maybe type" "temp"
    (821393 'move' call_tmp[821390](821371 call l _mt[243] _arg2[821357]))
    (821375 call = call_tmp[821383] call_tmp[821390])
    (821379 return _void[55])
  }
  where {
    unknown call_tmp[821395] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821398 'move' call_tmp[821395](821360 'typeof' _arg1[821356]))
    unknown call_tmp[821400] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821403 'move' call_tmp[821400](821362 'typeof' _arg2[821357]))
    (821364 call == call_tmp[821395] call_tmp[821400])
  }
  function chpl__defaultHash[821405](arg r[821407]:chpl_LocalSpinlock[187386]) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[821420] "RVV" "temp"
    unknown call_tmp[821427] "expr temp" "maybe param" "maybe type" "temp"
    (821430 'move' call_tmp[821427](821409 call l _mt[243] r[821407]))
    unknown call_tmp[821432] "expr temp" "maybe param" "maybe type" "temp"
    (821435 'move' call_tmp[821432](821413 call chpl__defaultHash call_tmp[821427]))
    (821425 'move' ret[821420](821424 'deref' call_tmp[821432]))
    (821422 return ret[821420])
  }
  type chpl_LocalSpinlock[187386] unknown l[187271](187270 call chpl__processorAtomicType bool[10])
  (355222 'used modules list'(187259 'use' Atomics[43961])(187261 'use' ChapelBase[307])(187264 'use' MemConsistency[186602]))
}