AST dump for ChapelLocks after pass buildDefaultFunctions.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[415958]() : void[4] "insert line file info" "module init"
  {
    (523921 return _void[55])
  }
  function chpl_LocalSpinlock[187386].lock[187277](arg _mt[187390]:_MT[238], arg this[187388]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187356] "const" "temp"
    unknown call_tmp[690407] "expr temp" "maybe param" "maybe type" "temp"
    (690410 'move' call_tmp[690407](187353 '_wide_get_locale' this[187388]))
    (187358 'move' tmp[187356](187354 'deref' call_tmp[690407]))
    {
      {
        unknown tmp[187302] "temp"
        unknown tmp[429436] "maybe param" "temp"
        unknown call_tmp[690414] "expr temp" "maybe param" "maybe type" "temp"
        (690417 'move' call_tmp[690414](361792 call l _mt[243] this[187388]))
        (429447 'move' tmp[429436](187340 call(187337 call (partial) read _mt[243] call_tmp[690414])))
        unknown call_tmp[690421] "expr temp" "maybe param" "maybe type" "temp"
        (690424 'move' call_tmp[690421](429449 call _cond_invalid tmp[429436]))
        if call_tmp[690421]
        {
          (429452 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572003] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572004] "maybe param" "temp"
        unknown call_tmp[690426] "expr temp" "maybe param" "maybe type" "temp"
        (690429 'move' call_tmp[690426](429437 call isTrue tmp[429436]))
        (572009 'move' tmp[572004](572007 call _cond_test call_tmp[690426]))
        if tmp[572004]
        {
          (572014 'move' tmp[572003](572011 '_paramFoldLogical' tmp[572004] 1))
        }
        {
          unknown tmp[572016] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690433] "expr temp" "maybe param" "maybe type" "temp"
          (690436 'move' call_tmp[690433](361797 call l _mt[243] this[187388]))
          unknown call_tmp[690440] "expr temp" "maybe param" "maybe type" "temp"
          (690443 'move' call_tmp[690440](187345 call(187342 call (partial) testAndSet _mt[243] call_tmp[690433]) acquire[186962]))
          (572018 'move' tmp[572016](429441 call isTrue call_tmp[690440]))
          (572023 'move' tmp[572003](572020 '_paramFoldLogical' tmp[572004] tmp[572016]))
        }
        (187350 'move' tmp[187302](187333 call _cond_test tmp[572003]))
        WhileDo[187307]
        {
          (187300 call chpl_task_yield)
          (484407 'end of statement')
          label _continueLabel[187305]
          unknown tmp[429415] "maybe param" "temp"
          unknown call_tmp[690447] "expr temp" "maybe param" "maybe type" "temp"
          (690450 'move' call_tmp[690447](361781 call l _mt[243] this[187388]))
          (429426 'move' tmp[429415](187318 call(187315 call (partial) read _mt[243] call_tmp[690447])))
          unknown call_tmp[690454] "expr temp" "maybe param" "maybe type" "temp"
          (690457 'move' call_tmp[690454](429428 call _cond_invalid tmp[429415]))
          if call_tmp[690454]
          {
            (429431 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572030] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572031] "maybe param" "temp"
          unknown call_tmp[690459] "expr temp" "maybe param" "maybe type" "temp"
          (690462 'move' call_tmp[690459](429416 call isTrue tmp[429415]))
          (572036 'move' tmp[572031](572034 call _cond_test call_tmp[690459]))
          if tmp[572031]
          {
            (572041 'move' tmp[572030](572038 '_paramFoldLogical' tmp[572031] 1))
          }
          {
            unknown tmp[572043] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690466] "expr temp" "maybe param" "maybe type" "temp"
            (690469 'move' call_tmp[690466](361786 call l _mt[243] this[187388]))
            unknown call_tmp[690473] "expr temp" "maybe param" "maybe type" "temp"
            (690476 'move' call_tmp[690473](187323 call(187320 call (partial) testAndSet _mt[243] call_tmp[690466]) acquire[186962]))
            (572045 'move' tmp[572043](429420 call isTrue call_tmp[690473]))
            (572050 'move' tmp[572030](572047 '_paramFoldLogical' tmp[572031] tmp[572043]))
          }
          (187328 'move' tmp[187302](187311 call _cond_test tmp[572030]))
          tmp[187302]
        }
        label _breakLabel[187306]
      }
      (187361 'on block' 0 tmp[187356])
    }
    (523917 return _void[55])
  }
  function chpl_LocalSpinlock[187386].unlock[187369](arg _mt[187394]:_MT[238], arg this[187392]:chpl_LocalSpinlock[187386]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690480] "expr temp" "maybe param" "maybe type" "temp"
    (690483 'move' call_tmp[690480](361803 call l _mt[243] this[187392]))
    (187380 call(187372 call (partial) clear _mt[243] call_tmp[690480]) release[186960])
    (523919 return _void[55])
  }
  function chpl_LocalSpinlock[187386].l[820206](arg _mt[820208]:_MT[238], ref arg this[820210]:chpl_LocalSpinlock[187386]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[820220] "RVV" "temp"
    unknown call_tmp[820227] "expr temp" "maybe param" "maybe type" "temp"
    (820230 'move' call_tmp[820227](820214 '.' this[820210] c"l"))
    (820225 'move' ret[820220](820224 'addr of' call_tmp[820227]))
    (820222 return ret[820220])
  }
  function chpl_LocalSpinlock[187386].init[820232](arg _mt[820234]:_MT[238], ref arg this[820235]:chpl_LocalSpinlock[187386], in arg l[820238] :
  (820241 call chpl__processorAtomicType bool[10]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (820254 'init field' this[820235] c"l" l[820238])
    (820258 return _void[55])
  }
  function chpl_LocalSpinlock[187386].init=[820260](arg _mt[820263]:_MT[238], ref arg this[820264]:chpl_LocalSpinlock[187386], arg other[820265]:chpl_LocalSpinlock[187386]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[820295] "maybe param" "maybe type" "temp"
    (820298 'move' call_tmp[820295](820273 call l _mt[243] other[820265]))
    unknown call_tmp[820300] "maybe param" "maybe type" "temp"
    (820303 'move' call_tmp[820300](820282 call chpl__processorAtomicType bool[10]))
    unknown tmp[820279] "temp"
    (820284 'init var' tmp[820279] call_tmp[820295] call_tmp[820300])
    (820286 'init field' this[820264] c"l" tmp[820279])
    (820290 'end of statement')
    (820291 return _void[55])
  }
  function chpl_LocalSpinlock[187386].deinit[820305](arg _mt[820307]:_MT[238], arg this[820309]:chpl_LocalSpinlock[187386]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (820317 return _void[55])
  }
  function chpl_LocalSpinlock[187386].writeThis[820319](arg _mt[820323]:_MT[238], arg this[820321]:chpl_LocalSpinlock[187386], arg f[820322]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820328 call writeThisDefaultImpl f[820322] this[820321])
    (820333 return _void[55])
  }
  function chpl_LocalSpinlock[187386].readThis[820335](arg _mt[820339]:_MT[238], arg this[820337]:chpl_LocalSpinlock[187386], arg f[820338]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820343 call readThisDefaultImpl f[820338] this[820337])
    (820349 return _void[55])
  }
  function chpl_fields_are_comparable[820363](arg _arg1[820365]:chpl_LocalSpinlock[187386], arg _arg2[820366]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820384]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820391] "expr temp" "maybe param" "maybe type" "temp"
    (820394 'move' call_tmp[820391](820369 call l _mt[243] _arg1[820365]))
    unknown call_tmp[820396] "expr temp" "maybe param" "maybe type" "temp"
    (820399 'move' call_tmp[820396](820373 call l _mt[243] _arg2[820366]))
    unknown call_tmp[820401] "expr temp" "maybe param" "maybe type" "temp"
    (820404 'move' call_tmp[820401](820377 'call resolves' c"==" call_tmp[820391] call_tmp[820396]))
    (820389 'move' ret[820384](820388 'deref' call_tmp[820401]))
    (820386 return ret[820384])
  }
  function ==[820351](arg _arg1[820353]:chpl_LocalSpinlock[187386], arg _arg2[820354]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820433]:bool[10] "RVV" "temp"
    unknown call_tmp[820445] "expr temp" "maybe param" "maybe type" "temp"
    (820448 'move' call_tmp[820445](820412 call l _mt[243] _arg1[820353]))
    unknown call_tmp[820450] "expr temp" "maybe param" "maybe type" "temp"
    (820453 'move' call_tmp[820450](820416 call l _mt[243] _arg2[820354]))
    unknown call_tmp[820455] "expr temp" "maybe param" "maybe type" "temp"
    (820458 'move' call_tmp[820455](820420 call != call_tmp[820445] call_tmp[820450]))
    if call_tmp[820455]
    {
      (820438 'move' ret[820433](820437 'deref' 0))
      gotoReturn _end_==[820431] _end_==[820431]
    }
    (820443 'move' ret[820433](820442 'deref' 1))
    label _end_==[820431]
    (820435 return ret[820433])
  }
  where {
    unknown call_tmp[820460] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820463 'move' call_tmp[820460](820357 'typeof' _arg1[820353]))
    unknown call_tmp[820465] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820468 'move' call_tmp[820465](820359 'typeof' _arg2[820354]))
    unknown call_tmp[820470] "expr temp" "maybe param" "maybe type" "temp"
    (820473 'move' call_tmp[820470](820361 call == call_tmp[820460] call_tmp[820465]))
    unknown call_tmp[820475] "expr temp" "maybe param" "maybe type" "temp"
    (820478 'move' call_tmp[820475](820406 call chpl_fields_are_comparable[820363] _arg1[820353] _arg2[820354]))
    (820410 '&' call_tmp[820470] call_tmp[820475])
  }
  function chpl_fields_are_comparable[820492](arg _arg1[820494]:chpl_LocalSpinlock[187386], arg _arg2[820495]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820513]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820520] "expr temp" "maybe param" "maybe type" "temp"
    (820523 'move' call_tmp[820520](820498 call l _mt[243] _arg1[820494]))
    unknown call_tmp[820525] "expr temp" "maybe param" "maybe type" "temp"
    (820528 'move' call_tmp[820525](820502 call l _mt[243] _arg2[820495]))
    unknown call_tmp[820530] "expr temp" "maybe param" "maybe type" "temp"
    (820533 'move' call_tmp[820530](820506 'call resolves' c"!=" call_tmp[820520] call_tmp[820525]))
    (820518 'move' ret[820513](820517 'deref' call_tmp[820530]))
    (820515 return ret[820513])
  }
  function !=[820480](arg _arg1[820482]:chpl_LocalSpinlock[187386], arg _arg2[820483]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820562]:bool[10] "RVV" "temp"
    unknown call_tmp[820574] "expr temp" "maybe param" "maybe type" "temp"
    (820577 'move' call_tmp[820574](820541 call l _mt[243] _arg1[820482]))
    unknown call_tmp[820579] "expr temp" "maybe param" "maybe type" "temp"
    (820582 'move' call_tmp[820579](820545 call l _mt[243] _arg2[820483]))
    unknown call_tmp[820584] "expr temp" "maybe param" "maybe type" "temp"
    (820587 'move' call_tmp[820584](820549 call != call_tmp[820574] call_tmp[820579]))
    if call_tmp[820584]
    {
      (820567 'move' ret[820562](820566 'deref' 1))
      gotoReturn _end_!=[820560] _end_!=[820560]
    }
    (820572 'move' ret[820562](820571 'deref' 0))
    label _end_!=[820560]
    (820564 return ret[820562])
  }
  where {
    unknown call_tmp[820589] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820592 'move' call_tmp[820589](820486 'typeof' _arg1[820482]))
    unknown call_tmp[820594] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820597 'move' call_tmp[820594](820488 'typeof' _arg2[820483]))
    unknown call_tmp[820599] "expr temp" "maybe param" "maybe type" "temp"
    (820602 'move' call_tmp[820599](820490 call == call_tmp[820589] call_tmp[820594]))
    unknown call_tmp[820604] "expr temp" "maybe param" "maybe type" "temp"
    (820607 'move' call_tmp[820604](820535 call chpl_fields_are_comparable[820492] _arg1[820482] _arg2[820483]))
    (820539 '&' call_tmp[820599] call_tmp[820604])
  }
  function chpl_fields_are_comparable[820621](arg _arg1[820623]:chpl_LocalSpinlock[187386], arg _arg2[820624]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820642]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820649] "expr temp" "maybe param" "maybe type" "temp"
    (820652 'move' call_tmp[820649](820627 call l _mt[243] _arg1[820623]))
    unknown call_tmp[820654] "expr temp" "maybe param" "maybe type" "temp"
    (820657 'move' call_tmp[820654](820631 call l _mt[243] _arg2[820624]))
    unknown call_tmp[820659] "expr temp" "maybe param" "maybe type" "temp"
    (820662 'move' call_tmp[820659](820635 'call resolves' c"<" call_tmp[820649] call_tmp[820654]))
    (820647 'move' ret[820642](820646 'deref' call_tmp[820659]))
    (820644 return ret[820642])
  }
  function <[820609](arg _arg1[820611]:chpl_LocalSpinlock[187386], arg _arg2[820612]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820706]:bool[10] "RVV" "temp"
    unknown call_tmp[820723] "expr temp" "maybe param" "maybe type" "temp"
    (820726 'move' call_tmp[820723](820670 call l _mt[243] _arg1[820611]))
    unknown call_tmp[820728] "expr temp" "maybe param" "maybe type" "temp"
    (820731 'move' call_tmp[820728](820674 call l _mt[243] _arg2[820612]))
    unknown call_tmp[820733] "expr temp" "maybe param" "maybe type" "temp"
    (820736 'move' call_tmp[820733](820678 call < call_tmp[820723] call_tmp[820728]))
    if call_tmp[820733]
    {
      (820711 'move' ret[820706](820710 'deref' 1))
      gotoReturn _end_<[820704] _end_<[820704]
    }
    unknown call_tmp[820738] "expr temp" "maybe param" "maybe type" "temp"
    (820741 'move' call_tmp[820738](820684 call l _mt[243] _arg1[820611]))
    unknown call_tmp[820743] "expr temp" "maybe param" "maybe type" "temp"
    (820746 'move' call_tmp[820743](820688 call l _mt[243] _arg2[820612]))
    unknown call_tmp[820748] "expr temp" "maybe param" "maybe type" "temp"
    (820751 'move' call_tmp[820748](820692 call > call_tmp[820738] call_tmp[820743]))
    if call_tmp[820748]
    {
      (820716 'move' ret[820706](820715 'deref' 0))
      gotoReturn _end_<[820704] _end_<[820704]
    }
    (820721 'move' ret[820706](820720 'deref' 0))
    label _end_<[820704]
    (820708 return ret[820706])
  }
  where {
    unknown call_tmp[820753] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820756 'move' call_tmp[820753](820615 'typeof' _arg1[820611]))
    unknown call_tmp[820758] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820761 'move' call_tmp[820758](820617 'typeof' _arg2[820612]))
    unknown call_tmp[820763] "expr temp" "maybe param" "maybe type" "temp"
    (820766 'move' call_tmp[820763](820619 call == call_tmp[820753] call_tmp[820758]))
    unknown call_tmp[820768] "expr temp" "maybe param" "maybe type" "temp"
    (820771 'move' call_tmp[820768](820664 call chpl_fields_are_comparable[820621] _arg1[820611] _arg2[820612]))
    (820668 '&' call_tmp[820763] call_tmp[820768])
  }
  function chpl_fields_are_comparable[820785](arg _arg1[820787]:chpl_LocalSpinlock[187386], arg _arg2[820788]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820806]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820813] "expr temp" "maybe param" "maybe type" "temp"
    (820816 'move' call_tmp[820813](820791 call l _mt[243] _arg1[820787]))
    unknown call_tmp[820818] "expr temp" "maybe param" "maybe type" "temp"
    (820821 'move' call_tmp[820818](820795 call l _mt[243] _arg2[820788]))
    unknown call_tmp[820823] "expr temp" "maybe param" "maybe type" "temp"
    (820826 'move' call_tmp[820823](820799 'call resolves' c"<=" call_tmp[820813] call_tmp[820818]))
    (820811 'move' ret[820806](820810 'deref' call_tmp[820823]))
    (820808 return ret[820806])
  }
  function <=[820773](arg _arg1[820775]:chpl_LocalSpinlock[187386], arg _arg2[820776]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820870]:bool[10] "RVV" "temp"
    unknown call_tmp[820887] "expr temp" "maybe param" "maybe type" "temp"
    (820890 'move' call_tmp[820887](820834 call l _mt[243] _arg1[820775]))
    unknown call_tmp[820892] "expr temp" "maybe param" "maybe type" "temp"
    (820895 'move' call_tmp[820892](820838 call l _mt[243] _arg2[820776]))
    unknown call_tmp[820897] "expr temp" "maybe param" "maybe type" "temp"
    (820900 'move' call_tmp[820897](820842 call < call_tmp[820887] call_tmp[820892]))
    if call_tmp[820897]
    {
      (820875 'move' ret[820870](820874 'deref' 1))
      gotoReturn _end_<=[820868] _end_<=[820868]
    }
    unknown call_tmp[820902] "expr temp" "maybe param" "maybe type" "temp"
    (820905 'move' call_tmp[820902](820848 call l _mt[243] _arg1[820775]))
    unknown call_tmp[820907] "expr temp" "maybe param" "maybe type" "temp"
    (820910 'move' call_tmp[820907](820852 call l _mt[243] _arg2[820776]))
    unknown call_tmp[820912] "expr temp" "maybe param" "maybe type" "temp"
    (820915 'move' call_tmp[820912](820856 call > call_tmp[820902] call_tmp[820907]))
    if call_tmp[820912]
    {
      (820880 'move' ret[820870](820879 'deref' 0))
      gotoReturn _end_<=[820868] _end_<=[820868]
    }
    (820885 'move' ret[820870](820884 'deref' 1))
    label _end_<=[820868]
    (820872 return ret[820870])
  }
  where {
    unknown call_tmp[820917] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820920 'move' call_tmp[820917](820779 'typeof' _arg1[820775]))
    unknown call_tmp[820922] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820925 'move' call_tmp[820922](820781 'typeof' _arg2[820776]))
    unknown call_tmp[820927] "expr temp" "maybe param" "maybe type" "temp"
    (820930 'move' call_tmp[820927](820783 call == call_tmp[820917] call_tmp[820922]))
    unknown call_tmp[820932] "expr temp" "maybe param" "maybe type" "temp"
    (820935 'move' call_tmp[820932](820828 call chpl_fields_are_comparable[820785] _arg1[820775] _arg2[820776]))
    (820832 '&' call_tmp[820927] call_tmp[820932])
  }
  function chpl_fields_are_comparable[820949](arg _arg1[820951]:chpl_LocalSpinlock[187386], arg _arg2[820952]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820970]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820977] "expr temp" "maybe param" "maybe type" "temp"
    (820980 'move' call_tmp[820977](820955 call l _mt[243] _arg1[820951]))
    unknown call_tmp[820982] "expr temp" "maybe param" "maybe type" "temp"
    (820985 'move' call_tmp[820982](820959 call l _mt[243] _arg2[820952]))
    unknown call_tmp[820987] "expr temp" "maybe param" "maybe type" "temp"
    (820990 'move' call_tmp[820987](820963 'call resolves' c">" call_tmp[820977] call_tmp[820982]))
    (820975 'move' ret[820970](820974 'deref' call_tmp[820987]))
    (820972 return ret[820970])
  }
  function >[820937](arg _arg1[820939]:chpl_LocalSpinlock[187386], arg _arg2[820940]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821034]:bool[10] "RVV" "temp"
    unknown call_tmp[821051] "expr temp" "maybe param" "maybe type" "temp"
    (821054 'move' call_tmp[821051](820998 call l _mt[243] _arg1[820939]))
    unknown call_tmp[821056] "expr temp" "maybe param" "maybe type" "temp"
    (821059 'move' call_tmp[821056](821002 call l _mt[243] _arg2[820940]))
    unknown call_tmp[821061] "expr temp" "maybe param" "maybe type" "temp"
    (821064 'move' call_tmp[821061](821006 call > call_tmp[821051] call_tmp[821056]))
    if call_tmp[821061]
    {
      (821039 'move' ret[821034](821038 'deref' 1))
      gotoReturn _end_>[821032] _end_>[821032]
    }
    unknown call_tmp[821066] "expr temp" "maybe param" "maybe type" "temp"
    (821069 'move' call_tmp[821066](821012 call l _mt[243] _arg1[820939]))
    unknown call_tmp[821071] "expr temp" "maybe param" "maybe type" "temp"
    (821074 'move' call_tmp[821071](821016 call l _mt[243] _arg2[820940]))
    unknown call_tmp[821076] "expr temp" "maybe param" "maybe type" "temp"
    (821079 'move' call_tmp[821076](821020 call < call_tmp[821066] call_tmp[821071]))
    if call_tmp[821076]
    {
      (821044 'move' ret[821034](821043 'deref' 0))
      gotoReturn _end_>[821032] _end_>[821032]
    }
    (821049 'move' ret[821034](821048 'deref' 0))
    label _end_>[821032]
    (821036 return ret[821034])
  }
  where {
    unknown call_tmp[821081] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821084 'move' call_tmp[821081](820943 'typeof' _arg1[820939]))
    unknown call_tmp[821086] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821089 'move' call_tmp[821086](820945 'typeof' _arg2[820940]))
    unknown call_tmp[821091] "expr temp" "maybe param" "maybe type" "temp"
    (821094 'move' call_tmp[821091](820947 call == call_tmp[821081] call_tmp[821086]))
    unknown call_tmp[821096] "expr temp" "maybe param" "maybe type" "temp"
    (821099 'move' call_tmp[821096](820992 call chpl_fields_are_comparable[820949] _arg1[820939] _arg2[820940]))
    (820996 '&' call_tmp[821091] call_tmp[821096])
  }
  function chpl_fields_are_comparable[821113](arg _arg1[821115]:chpl_LocalSpinlock[187386], arg _arg2[821116]:chpl_LocalSpinlock[187386]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821134]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821141] "expr temp" "maybe param" "maybe type" "temp"
    (821144 'move' call_tmp[821141](821119 call l _mt[243] _arg1[821115]))
    unknown call_tmp[821146] "expr temp" "maybe param" "maybe type" "temp"
    (821149 'move' call_tmp[821146](821123 call l _mt[243] _arg2[821116]))
    unknown call_tmp[821151] "expr temp" "maybe param" "maybe type" "temp"
    (821154 'move' call_tmp[821151](821127 'call resolves' c">=" call_tmp[821141] call_tmp[821146]))
    (821139 'move' ret[821134](821138 'deref' call_tmp[821151]))
    (821136 return ret[821134])
  }
  function >=[821101](arg _arg1[821103]:chpl_LocalSpinlock[187386], arg _arg2[821104]:chpl_LocalSpinlock[187386]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821198]:bool[10] "RVV" "temp"
    unknown call_tmp[821215] "expr temp" "maybe param" "maybe type" "temp"
    (821218 'move' call_tmp[821215](821162 call l _mt[243] _arg1[821103]))
    unknown call_tmp[821220] "expr temp" "maybe param" "maybe type" "temp"
    (821223 'move' call_tmp[821220](821166 call l _mt[243] _arg2[821104]))
    unknown call_tmp[821225] "expr temp" "maybe param" "maybe type" "temp"
    (821228 'move' call_tmp[821225](821170 call > call_tmp[821215] call_tmp[821220]))
    if call_tmp[821225]
    {
      (821203 'move' ret[821198](821202 'deref' 1))
      gotoReturn _end_>=[821196] _end_>=[821196]
    }
    unknown call_tmp[821230] "expr temp" "maybe param" "maybe type" "temp"
    (821233 'move' call_tmp[821230](821176 call l _mt[243] _arg1[821103]))
    unknown call_tmp[821235] "expr temp" "maybe param" "maybe type" "temp"
    (821238 'move' call_tmp[821235](821180 call l _mt[243] _arg2[821104]))
    unknown call_tmp[821240] "expr temp" "maybe param" "maybe type" "temp"
    (821243 'move' call_tmp[821240](821184 call < call_tmp[821230] call_tmp[821235]))
    if call_tmp[821240]
    {
      (821208 'move' ret[821198](821207 'deref' 0))
      gotoReturn _end_>=[821196] _end_>=[821196]
    }
    (821213 'move' ret[821198](821212 'deref' 1))
    label _end_>=[821196]
    (821200 return ret[821198])
  }
  where {
    unknown call_tmp[821245] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821248 'move' call_tmp[821245](821107 'typeof' _arg1[821103]))
    unknown call_tmp[821250] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821253 'move' call_tmp[821250](821109 'typeof' _arg2[821104]))
    unknown call_tmp[821255] "expr temp" "maybe param" "maybe type" "temp"
    (821258 'move' call_tmp[821255](821111 call == call_tmp[821245] call_tmp[821250]))
    unknown call_tmp[821260] "expr temp" "maybe param" "maybe type" "temp"
    (821263 'move' call_tmp[821260](821156 call chpl_fields_are_comparable[821113] _arg1[821103] _arg2[821104]))
    (821160 '&' call_tmp[821255] call_tmp[821260])
  }
  function =[821265](ref arg _arg1[821267]:chpl_LocalSpinlock[187386], const?  ref arg _arg2[821268]:chpl_LocalSpinlock[187386]) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[821294] "expr temp" "maybe param" "maybe type" "temp"
    (821297 'move' call_tmp[821294](821278 call l _mt[243] _arg1[821267]))
    unknown call_tmp[821301] "expr temp" "maybe param" "maybe type" "temp"
    (821304 'move' call_tmp[821301](821282 call l _mt[243] _arg2[821268]))
    (821286 call = call_tmp[821294] call_tmp[821301])
    (821290 return _void[55])
  }
  where {
    unknown call_tmp[821306] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821309 'move' call_tmp[821306](821271 'typeof' _arg1[821267]))
    unknown call_tmp[821311] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821314 'move' call_tmp[821311](821273 'typeof' _arg2[821268]))
    (821275 call == call_tmp[821306] call_tmp[821311])
  }
  function chpl__defaultHash[821316](arg r[821318]:chpl_LocalSpinlock[187386]) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[821331] "RVV" "temp"
    unknown call_tmp[821338] "expr temp" "maybe param" "maybe type" "temp"
    (821341 'move' call_tmp[821338](821320 call l _mt[243] r[821318]))
    unknown call_tmp[821343] "expr temp" "maybe param" "maybe type" "temp"
    (821346 'move' call_tmp[821343](821324 call chpl__defaultHash call_tmp[821338]))
    (821336 'move' ret[821331](821335 'deref' call_tmp[821343]))
    (821333 return ret[821331])
  }
  type chpl_LocalSpinlock[187386] unknown l[187271](187270 call chpl__processorAtomicType bool[10])
  (355134 'used modules list'(187259 'use' Atomics[43961])(187261 'use' ChapelBase[307])(187264 'use' MemConsistency[186602]))
}