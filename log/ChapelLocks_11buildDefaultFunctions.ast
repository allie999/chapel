AST dump for ChapelLocks after pass buildDefaultFunctions.
Module use list: Atomics ChapelBase MemConsistency 

{
  function chpl__init_ChapelLocks[416090]() : void[4] "insert line file info" "module init"
  {
    (524058 return _void[55])
  }
  function chpl_LocalSpinlock[187432].lock[187323](arg _mt[187436]:_MT[238], arg this[187434]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[187402] "const" "temp"
    unknown call_tmp[690536] "expr temp" "maybe param" "maybe type" "temp"
    (690539 'move' call_tmp[690536](187399 '_wide_get_locale' this[187434]))
    (187404 'move' tmp[187402](187400 'deref' call_tmp[690536]))
    {
      {
        unknown tmp[187348] "temp"
        unknown tmp[429568] "maybe param" "temp"
        unknown call_tmp[690543] "expr temp" "maybe param" "maybe type" "temp"
        (690546 'move' call_tmp[690543](361923 call l _mt[243] this[187434]))
        (429579 'move' tmp[429568](187386 call(187383 call (partial) read _mt[243] call_tmp[690543])))
        unknown call_tmp[690550] "expr temp" "maybe param" "maybe type" "temp"
        (690553 'move' call_tmp[690550](429581 call _cond_invalid tmp[429568]))
        if call_tmp[690550]
        {
          (429584 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[572132] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[572133] "maybe param" "temp"
        unknown call_tmp[690555] "expr temp" "maybe param" "maybe type" "temp"
        (690558 'move' call_tmp[690555](429569 call isTrue tmp[429568]))
        (572138 'move' tmp[572133](572136 call _cond_test call_tmp[690555]))
        if tmp[572133]
        {
          (572143 'move' tmp[572132](572140 '_paramFoldLogical' tmp[572133] 1))
        }
        {
          unknown tmp[572145] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[690562] "expr temp" "maybe param" "maybe type" "temp"
          (690565 'move' call_tmp[690562](361928 call l _mt[243] this[187434]))
          unknown call_tmp[690569] "expr temp" "maybe param" "maybe type" "temp"
          (690572 'move' call_tmp[690569](187391 call(187388 call (partial) testAndSet _mt[243] call_tmp[690562]) acquire[187008]))
          (572147 'move' tmp[572145](429573 call isTrue call_tmp[690569]))
          (572152 'move' tmp[572132](572149 '_paramFoldLogical' tmp[572133] tmp[572145]))
        }
        (187396 'move' tmp[187348](187379 call _cond_test tmp[572132]))
        WhileDo[187353]
        {
          (187346 call chpl_task_yield)
          (484541 'end of statement')
          label _continueLabel[187351]
          unknown tmp[429547] "maybe param" "temp"
          unknown call_tmp[690576] "expr temp" "maybe param" "maybe type" "temp"
          (690579 'move' call_tmp[690576](361912 call l _mt[243] this[187434]))
          (429558 'move' tmp[429547](187364 call(187361 call (partial) read _mt[243] call_tmp[690576])))
          unknown call_tmp[690583] "expr temp" "maybe param" "maybe type" "temp"
          (690586 'move' call_tmp[690583](429560 call _cond_invalid tmp[429547]))
          if call_tmp[690583]
          {
            (429563 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[572159] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[572160] "maybe param" "temp"
          unknown call_tmp[690588] "expr temp" "maybe param" "maybe type" "temp"
          (690591 'move' call_tmp[690588](429548 call isTrue tmp[429547]))
          (572165 'move' tmp[572160](572163 call _cond_test call_tmp[690588]))
          if tmp[572160]
          {
            (572170 'move' tmp[572159](572167 '_paramFoldLogical' tmp[572160] 1))
          }
          {
            unknown tmp[572172] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[690595] "expr temp" "maybe param" "maybe type" "temp"
            (690598 'move' call_tmp[690595](361917 call l _mt[243] this[187434]))
            unknown call_tmp[690602] "expr temp" "maybe param" "maybe type" "temp"
            (690605 'move' call_tmp[690602](187369 call(187366 call (partial) testAndSet _mt[243] call_tmp[690595]) acquire[187008]))
            (572174 'move' tmp[572172](429552 call isTrue call_tmp[690602]))
            (572179 'move' tmp[572159](572176 '_paramFoldLogical' tmp[572160] tmp[572172]))
          }
          (187374 'move' tmp[187348](187357 call _cond_test tmp[572159]))
          tmp[187348]
        }
        label _breakLabel[187352]
      }
      (187407 'on block' 0 tmp[187402])
    }
    (524054 return _void[55])
  }
  function chpl_LocalSpinlock[187432].unlock[187415](arg _mt[187440]:_MT[238], arg this[187438]:chpl_LocalSpinlock[187432]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[690609] "expr temp" "maybe param" "maybe type" "temp"
    (690612 'move' call_tmp[690609](361934 call l _mt[243] this[187438]))
    (187426 call(187418 call (partial) clear _mt[243] call_tmp[690609]) release[187006])
    (524056 return _void[55])
  }
  function chpl_LocalSpinlock[187432].l[820356](arg _mt[820358]:_MT[238], ref arg this[820360]:chpl_LocalSpinlock[187432]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[820370] "RVV" "temp"
    unknown call_tmp[820377] "expr temp" "maybe param" "maybe type" "temp"
    (820380 'move' call_tmp[820377](820364 '.' this[820360] c"l"))
    (820375 'move' ret[820370](820374 'addr of' call_tmp[820377]))
    (820372 return ret[820370])
  }
  function chpl_LocalSpinlock[187432].init[820382](arg _mt[820384]:_MT[238], ref arg this[820385]:chpl_LocalSpinlock[187432], in arg l[820388] :
  (820391 call chpl__processorAtomicType bool[10]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (820404 'init field' this[820385] c"l" l[820388])
    (820408 return _void[55])
  }
  function chpl_LocalSpinlock[187432].init=[820410](arg _mt[820413]:_MT[238], ref arg this[820414]:chpl_LocalSpinlock[187432], arg other[820415]:chpl_LocalSpinlock[187432]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[820445] "maybe param" "maybe type" "temp"
    (820448 'move' call_tmp[820445](820423 call l _mt[243] other[820415]))
    unknown call_tmp[820450] "maybe param" "maybe type" "temp"
    (820453 'move' call_tmp[820450](820432 call chpl__processorAtomicType bool[10]))
    unknown tmp[820429] "temp"
    (820434 'init var' tmp[820429] call_tmp[820445] call_tmp[820450])
    (820436 'init field' this[820414] c"l" tmp[820429])
    (820440 'end of statement')
    (820441 return _void[55])
  }
  function chpl_LocalSpinlock[187432].deinit[820455](arg _mt[820457]:_MT[238], arg this[820459]:chpl_LocalSpinlock[187432]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (820467 return _void[55])
  }
  function chpl_LocalSpinlock[187432].writeThis[820469](arg _mt[820473]:_MT[238], arg this[820471]:chpl_LocalSpinlock[187432], arg f[820472]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820478 call writeThisDefaultImpl f[820472] this[820471])
    (820483 return _void[55])
  }
  function chpl_LocalSpinlock[187432].readThis[820485](arg _mt[820489]:_MT[238], arg this[820487]:chpl_LocalSpinlock[187432], arg f[820488]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (820493 call readThisDefaultImpl f[820488] this[820487])
    (820499 return _void[55])
  }
  function chpl_fields_are_comparable[820513](arg _arg1[820515]:chpl_LocalSpinlock[187432], arg _arg2[820516]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820534]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820541] "expr temp" "maybe param" "maybe type" "temp"
    (820544 'move' call_tmp[820541](820519 call l _mt[243] _arg1[820515]))
    unknown call_tmp[820546] "expr temp" "maybe param" "maybe type" "temp"
    (820549 'move' call_tmp[820546](820523 call l _mt[243] _arg2[820516]))
    unknown call_tmp[820551] "expr temp" "maybe param" "maybe type" "temp"
    (820554 'move' call_tmp[820551](820527 'call resolves' c"==" call_tmp[820541] call_tmp[820546]))
    (820539 'move' ret[820534](820538 'deref' call_tmp[820551]))
    (820536 return ret[820534])
  }
  function ==[820501](arg _arg1[820503]:chpl_LocalSpinlock[187432], arg _arg2[820504]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820583]:bool[10] "RVV" "temp"
    unknown call_tmp[820595] "expr temp" "maybe param" "maybe type" "temp"
    (820598 'move' call_tmp[820595](820562 call l _mt[243] _arg1[820503]))
    unknown call_tmp[820600] "expr temp" "maybe param" "maybe type" "temp"
    (820603 'move' call_tmp[820600](820566 call l _mt[243] _arg2[820504]))
    unknown call_tmp[820605] "expr temp" "maybe param" "maybe type" "temp"
    (820608 'move' call_tmp[820605](820570 call != call_tmp[820595] call_tmp[820600]))
    if call_tmp[820605]
    {
      (820588 'move' ret[820583](820587 'deref' 0))
      gotoReturn _end_==[820581] _end_==[820581]
    }
    (820593 'move' ret[820583](820592 'deref' 1))
    label _end_==[820581]
    (820585 return ret[820583])
  }
  where {
    unknown call_tmp[820610] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820613 'move' call_tmp[820610](820507 'typeof' _arg1[820503]))
    unknown call_tmp[820615] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820618 'move' call_tmp[820615](820509 'typeof' _arg2[820504]))
    unknown call_tmp[820620] "expr temp" "maybe param" "maybe type" "temp"
    (820623 'move' call_tmp[820620](820511 call == call_tmp[820610] call_tmp[820615]))
    unknown call_tmp[820625] "expr temp" "maybe param" "maybe type" "temp"
    (820628 'move' call_tmp[820625](820556 call chpl_fields_are_comparable[820513] _arg1[820503] _arg2[820504]))
    (820560 '&' call_tmp[820620] call_tmp[820625])
  }
  function chpl_fields_are_comparable[820642](arg _arg1[820644]:chpl_LocalSpinlock[187432], arg _arg2[820645]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820663]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820670] "expr temp" "maybe param" "maybe type" "temp"
    (820673 'move' call_tmp[820670](820648 call l _mt[243] _arg1[820644]))
    unknown call_tmp[820675] "expr temp" "maybe param" "maybe type" "temp"
    (820678 'move' call_tmp[820675](820652 call l _mt[243] _arg2[820645]))
    unknown call_tmp[820680] "expr temp" "maybe param" "maybe type" "temp"
    (820683 'move' call_tmp[820680](820656 'call resolves' c"!=" call_tmp[820670] call_tmp[820675]))
    (820668 'move' ret[820663](820667 'deref' call_tmp[820680]))
    (820665 return ret[820663])
  }
  function !=[820630](arg _arg1[820632]:chpl_LocalSpinlock[187432], arg _arg2[820633]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820712]:bool[10] "RVV" "temp"
    unknown call_tmp[820724] "expr temp" "maybe param" "maybe type" "temp"
    (820727 'move' call_tmp[820724](820691 call l _mt[243] _arg1[820632]))
    unknown call_tmp[820729] "expr temp" "maybe param" "maybe type" "temp"
    (820732 'move' call_tmp[820729](820695 call l _mt[243] _arg2[820633]))
    unknown call_tmp[820734] "expr temp" "maybe param" "maybe type" "temp"
    (820737 'move' call_tmp[820734](820699 call != call_tmp[820724] call_tmp[820729]))
    if call_tmp[820734]
    {
      (820717 'move' ret[820712](820716 'deref' 1))
      gotoReturn _end_!=[820710] _end_!=[820710]
    }
    (820722 'move' ret[820712](820721 'deref' 0))
    label _end_!=[820710]
    (820714 return ret[820712])
  }
  where {
    unknown call_tmp[820739] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820742 'move' call_tmp[820739](820636 'typeof' _arg1[820632]))
    unknown call_tmp[820744] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820747 'move' call_tmp[820744](820638 'typeof' _arg2[820633]))
    unknown call_tmp[820749] "expr temp" "maybe param" "maybe type" "temp"
    (820752 'move' call_tmp[820749](820640 call == call_tmp[820739] call_tmp[820744]))
    unknown call_tmp[820754] "expr temp" "maybe param" "maybe type" "temp"
    (820757 'move' call_tmp[820754](820685 call chpl_fields_are_comparable[820642] _arg1[820632] _arg2[820633]))
    (820689 '&' call_tmp[820749] call_tmp[820754])
  }
  function chpl_fields_are_comparable[820771](arg _arg1[820773]:chpl_LocalSpinlock[187432], arg _arg2[820774]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820792]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820799] "expr temp" "maybe param" "maybe type" "temp"
    (820802 'move' call_tmp[820799](820777 call l _mt[243] _arg1[820773]))
    unknown call_tmp[820804] "expr temp" "maybe param" "maybe type" "temp"
    (820807 'move' call_tmp[820804](820781 call l _mt[243] _arg2[820774]))
    unknown call_tmp[820809] "expr temp" "maybe param" "maybe type" "temp"
    (820812 'move' call_tmp[820809](820785 'call resolves' c"<" call_tmp[820799] call_tmp[820804]))
    (820797 'move' ret[820792](820796 'deref' call_tmp[820809]))
    (820794 return ret[820792])
  }
  function <[820759](arg _arg1[820761]:chpl_LocalSpinlock[187432], arg _arg2[820762]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[820856]:bool[10] "RVV" "temp"
    unknown call_tmp[820873] "expr temp" "maybe param" "maybe type" "temp"
    (820876 'move' call_tmp[820873](820820 call l _mt[243] _arg1[820761]))
    unknown call_tmp[820878] "expr temp" "maybe param" "maybe type" "temp"
    (820881 'move' call_tmp[820878](820824 call l _mt[243] _arg2[820762]))
    unknown call_tmp[820883] "expr temp" "maybe param" "maybe type" "temp"
    (820886 'move' call_tmp[820883](820828 call < call_tmp[820873] call_tmp[820878]))
    if call_tmp[820883]
    {
      (820861 'move' ret[820856](820860 'deref' 1))
      gotoReturn _end_<[820854] _end_<[820854]
    }
    unknown call_tmp[820888] "expr temp" "maybe param" "maybe type" "temp"
    (820891 'move' call_tmp[820888](820834 call l _mt[243] _arg1[820761]))
    unknown call_tmp[820893] "expr temp" "maybe param" "maybe type" "temp"
    (820896 'move' call_tmp[820893](820838 call l _mt[243] _arg2[820762]))
    unknown call_tmp[820898] "expr temp" "maybe param" "maybe type" "temp"
    (820901 'move' call_tmp[820898](820842 call > call_tmp[820888] call_tmp[820893]))
    if call_tmp[820898]
    {
      (820866 'move' ret[820856](820865 'deref' 0))
      gotoReturn _end_<[820854] _end_<[820854]
    }
    (820871 'move' ret[820856](820870 'deref' 0))
    label _end_<[820854]
    (820858 return ret[820856])
  }
  where {
    unknown call_tmp[820903] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820906 'move' call_tmp[820903](820765 'typeof' _arg1[820761]))
    unknown call_tmp[820908] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (820911 'move' call_tmp[820908](820767 'typeof' _arg2[820762]))
    unknown call_tmp[820913] "expr temp" "maybe param" "maybe type" "temp"
    (820916 'move' call_tmp[820913](820769 call == call_tmp[820903] call_tmp[820908]))
    unknown call_tmp[820918] "expr temp" "maybe param" "maybe type" "temp"
    (820921 'move' call_tmp[820918](820814 call chpl_fields_are_comparable[820771] _arg1[820761] _arg2[820762]))
    (820818 '&' call_tmp[820913] call_tmp[820918])
  }
  function chpl_fields_are_comparable[820935](arg _arg1[820937]:chpl_LocalSpinlock[187432], arg _arg2[820938]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[820956]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[820963] "expr temp" "maybe param" "maybe type" "temp"
    (820966 'move' call_tmp[820963](820941 call l _mt[243] _arg1[820937]))
    unknown call_tmp[820968] "expr temp" "maybe param" "maybe type" "temp"
    (820971 'move' call_tmp[820968](820945 call l _mt[243] _arg2[820938]))
    unknown call_tmp[820973] "expr temp" "maybe param" "maybe type" "temp"
    (820976 'move' call_tmp[820973](820949 'call resolves' c"<=" call_tmp[820963] call_tmp[820968]))
    (820961 'move' ret[820956](820960 'deref' call_tmp[820973]))
    (820958 return ret[820956])
  }
  function <=[820923](arg _arg1[820925]:chpl_LocalSpinlock[187432], arg _arg2[820926]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821020]:bool[10] "RVV" "temp"
    unknown call_tmp[821037] "expr temp" "maybe param" "maybe type" "temp"
    (821040 'move' call_tmp[821037](820984 call l _mt[243] _arg1[820925]))
    unknown call_tmp[821042] "expr temp" "maybe param" "maybe type" "temp"
    (821045 'move' call_tmp[821042](820988 call l _mt[243] _arg2[820926]))
    unknown call_tmp[821047] "expr temp" "maybe param" "maybe type" "temp"
    (821050 'move' call_tmp[821047](820992 call < call_tmp[821037] call_tmp[821042]))
    if call_tmp[821047]
    {
      (821025 'move' ret[821020](821024 'deref' 1))
      gotoReturn _end_<=[821018] _end_<=[821018]
    }
    unknown call_tmp[821052] "expr temp" "maybe param" "maybe type" "temp"
    (821055 'move' call_tmp[821052](820998 call l _mt[243] _arg1[820925]))
    unknown call_tmp[821057] "expr temp" "maybe param" "maybe type" "temp"
    (821060 'move' call_tmp[821057](821002 call l _mt[243] _arg2[820926]))
    unknown call_tmp[821062] "expr temp" "maybe param" "maybe type" "temp"
    (821065 'move' call_tmp[821062](821006 call > call_tmp[821052] call_tmp[821057]))
    if call_tmp[821062]
    {
      (821030 'move' ret[821020](821029 'deref' 0))
      gotoReturn _end_<=[821018] _end_<=[821018]
    }
    (821035 'move' ret[821020](821034 'deref' 1))
    label _end_<=[821018]
    (821022 return ret[821020])
  }
  where {
    unknown call_tmp[821067] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821070 'move' call_tmp[821067](820929 'typeof' _arg1[820925]))
    unknown call_tmp[821072] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821075 'move' call_tmp[821072](820931 'typeof' _arg2[820926]))
    unknown call_tmp[821077] "expr temp" "maybe param" "maybe type" "temp"
    (821080 'move' call_tmp[821077](820933 call == call_tmp[821067] call_tmp[821072]))
    unknown call_tmp[821082] "expr temp" "maybe param" "maybe type" "temp"
    (821085 'move' call_tmp[821082](820978 call chpl_fields_are_comparable[820935] _arg1[820925] _arg2[820926]))
    (820982 '&' call_tmp[821077] call_tmp[821082])
  }
  function chpl_fields_are_comparable[821099](arg _arg1[821101]:chpl_LocalSpinlock[187432], arg _arg2[821102]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821120]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821127] "expr temp" "maybe param" "maybe type" "temp"
    (821130 'move' call_tmp[821127](821105 call l _mt[243] _arg1[821101]))
    unknown call_tmp[821132] "expr temp" "maybe param" "maybe type" "temp"
    (821135 'move' call_tmp[821132](821109 call l _mt[243] _arg2[821102]))
    unknown call_tmp[821137] "expr temp" "maybe param" "maybe type" "temp"
    (821140 'move' call_tmp[821137](821113 'call resolves' c">" call_tmp[821127] call_tmp[821132]))
    (821125 'move' ret[821120](821124 'deref' call_tmp[821137]))
    (821122 return ret[821120])
  }
  function >[821087](arg _arg1[821089]:chpl_LocalSpinlock[187432], arg _arg2[821090]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821184]:bool[10] "RVV" "temp"
    unknown call_tmp[821201] "expr temp" "maybe param" "maybe type" "temp"
    (821204 'move' call_tmp[821201](821148 call l _mt[243] _arg1[821089]))
    unknown call_tmp[821206] "expr temp" "maybe param" "maybe type" "temp"
    (821209 'move' call_tmp[821206](821152 call l _mt[243] _arg2[821090]))
    unknown call_tmp[821211] "expr temp" "maybe param" "maybe type" "temp"
    (821214 'move' call_tmp[821211](821156 call > call_tmp[821201] call_tmp[821206]))
    if call_tmp[821211]
    {
      (821189 'move' ret[821184](821188 'deref' 1))
      gotoReturn _end_>[821182] _end_>[821182]
    }
    unknown call_tmp[821216] "expr temp" "maybe param" "maybe type" "temp"
    (821219 'move' call_tmp[821216](821162 call l _mt[243] _arg1[821089]))
    unknown call_tmp[821221] "expr temp" "maybe param" "maybe type" "temp"
    (821224 'move' call_tmp[821221](821166 call l _mt[243] _arg2[821090]))
    unknown call_tmp[821226] "expr temp" "maybe param" "maybe type" "temp"
    (821229 'move' call_tmp[821226](821170 call < call_tmp[821216] call_tmp[821221]))
    if call_tmp[821226]
    {
      (821194 'move' ret[821184](821193 'deref' 0))
      gotoReturn _end_>[821182] _end_>[821182]
    }
    (821199 'move' ret[821184](821198 'deref' 0))
    label _end_>[821182]
    (821186 return ret[821184])
  }
  where {
    unknown call_tmp[821231] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821234 'move' call_tmp[821231](821093 'typeof' _arg1[821089]))
    unknown call_tmp[821236] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821239 'move' call_tmp[821236](821095 'typeof' _arg2[821090]))
    unknown call_tmp[821241] "expr temp" "maybe param" "maybe type" "temp"
    (821244 'move' call_tmp[821241](821097 call == call_tmp[821231] call_tmp[821236]))
    unknown call_tmp[821246] "expr temp" "maybe param" "maybe type" "temp"
    (821249 'move' call_tmp[821246](821142 call chpl_fields_are_comparable[821099] _arg1[821089] _arg2[821090]))
    (821146 '&' call_tmp[821241] call_tmp[821246])
  }
  function chpl_fields_are_comparable[821263](arg _arg1[821265]:chpl_LocalSpinlock[187432], arg _arg2[821266]:chpl_LocalSpinlock[187432]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[821284]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[821291] "expr temp" "maybe param" "maybe type" "temp"
    (821294 'move' call_tmp[821291](821269 call l _mt[243] _arg1[821265]))
    unknown call_tmp[821296] "expr temp" "maybe param" "maybe type" "temp"
    (821299 'move' call_tmp[821296](821273 call l _mt[243] _arg2[821266]))
    unknown call_tmp[821301] "expr temp" "maybe param" "maybe type" "temp"
    (821304 'move' call_tmp[821301](821277 'call resolves' c">=" call_tmp[821291] call_tmp[821296]))
    (821289 'move' ret[821284](821288 'deref' call_tmp[821301]))
    (821286 return ret[821284])
  }
  function >=[821251](arg _arg1[821253]:chpl_LocalSpinlock[187432], arg _arg2[821254]:chpl_LocalSpinlock[187432]) : bool[10] "compiler generated" "last resort"
  {
    val ret[821348]:bool[10] "RVV" "temp"
    unknown call_tmp[821365] "expr temp" "maybe param" "maybe type" "temp"
    (821368 'move' call_tmp[821365](821312 call l _mt[243] _arg1[821253]))
    unknown call_tmp[821370] "expr temp" "maybe param" "maybe type" "temp"
    (821373 'move' call_tmp[821370](821316 call l _mt[243] _arg2[821254]))
    unknown call_tmp[821375] "expr temp" "maybe param" "maybe type" "temp"
    (821378 'move' call_tmp[821375](821320 call > call_tmp[821365] call_tmp[821370]))
    if call_tmp[821375]
    {
      (821353 'move' ret[821348](821352 'deref' 1))
      gotoReturn _end_>=[821346] _end_>=[821346]
    }
    unknown call_tmp[821380] "expr temp" "maybe param" "maybe type" "temp"
    (821383 'move' call_tmp[821380](821326 call l _mt[243] _arg1[821253]))
    unknown call_tmp[821385] "expr temp" "maybe param" "maybe type" "temp"
    (821388 'move' call_tmp[821385](821330 call l _mt[243] _arg2[821254]))
    unknown call_tmp[821390] "expr temp" "maybe param" "maybe type" "temp"
    (821393 'move' call_tmp[821390](821334 call < call_tmp[821380] call_tmp[821385]))
    if call_tmp[821390]
    {
      (821358 'move' ret[821348](821357 'deref' 0))
      gotoReturn _end_>=[821346] _end_>=[821346]
    }
    (821363 'move' ret[821348](821362 'deref' 1))
    label _end_>=[821346]
    (821350 return ret[821348])
  }
  where {
    unknown call_tmp[821395] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821398 'move' call_tmp[821395](821257 'typeof' _arg1[821253]))
    unknown call_tmp[821400] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821403 'move' call_tmp[821400](821259 'typeof' _arg2[821254]))
    unknown call_tmp[821405] "expr temp" "maybe param" "maybe type" "temp"
    (821408 'move' call_tmp[821405](821261 call == call_tmp[821395] call_tmp[821400]))
    unknown call_tmp[821410] "expr temp" "maybe param" "maybe type" "temp"
    (821413 'move' call_tmp[821410](821306 call chpl_fields_are_comparable[821263] _arg1[821253] _arg2[821254]))
    (821310 '&' call_tmp[821405] call_tmp[821410])
  }
  function =[821415](ref arg _arg1[821417]:chpl_LocalSpinlock[187432], const?  ref arg _arg2[821418]:chpl_LocalSpinlock[187432]) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[821444] "expr temp" "maybe param" "maybe type" "temp"
    (821447 'move' call_tmp[821444](821428 call l _mt[243] _arg1[821417]))
    unknown call_tmp[821451] "expr temp" "maybe param" "maybe type" "temp"
    (821454 'move' call_tmp[821451](821432 call l _mt[243] _arg2[821418]))
    (821436 call = call_tmp[821444] call_tmp[821451])
    (821440 return _void[55])
  }
  where {
    unknown call_tmp[821456] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821459 'move' call_tmp[821456](821421 'typeof' _arg1[821417]))
    unknown call_tmp[821461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (821464 'move' call_tmp[821461](821423 'typeof' _arg2[821418]))
    (821425 call == call_tmp[821456] call_tmp[821461])
  }
  function chpl__defaultHash[821466](arg r[821468]:chpl_LocalSpinlock[187432]) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[821481] "RVV" "temp"
    unknown call_tmp[821488] "expr temp" "maybe param" "maybe type" "temp"
    (821491 'move' call_tmp[821488](821470 call l _mt[243] r[821468]))
    unknown call_tmp[821493] "expr temp" "maybe param" "maybe type" "temp"
    (821496 'move' call_tmp[821493](821474 call chpl__defaultHash call_tmp[821488]))
    (821486 'move' ret[821481](821485 'deref' call_tmp[821493]))
    (821483 return ret[821481])
  }
  type chpl_LocalSpinlock[187432] unknown l[187317](187316 call chpl__processorAtomicType bool[10])
  (355265 'used modules list'(187305 'use' Atomics[43964])(187307 'use' ChapelBase[307])(187310 'use' MemConsistency[186648]))
}