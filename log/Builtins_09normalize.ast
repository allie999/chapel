AST dump for Builtins after pass normalize.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416208]() : void[4] "insert line file info" "module init"
  {
    (527982 return _void[55])
  }
  function assert[210432](arg test[210429]:bool[10]) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704949] "expr temp" "maybe param" "maybe type" "temp"
    (704952 'move' call_tmp[704949](210435 call ! test[210429]))
    unknown call_tmp[704954] "expr temp" "maybe param" "maybe type" "temp"
    (704957 'move' call_tmp[704954](210444 call _cond_test call_tmp[704949]))
    if call_tmp[704954]
    {
      (210442 'chpl_error' c"assert failed")
    }
    (527960 return _void[55])
  }
  function assert[210459](arg test[210456]:bool[10], arg args[210463]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704959] "expr temp" "maybe param" "maybe type" "temp"
    (704962 'move' call_tmp[704959](210472 call ! test[210456]))
    unknown call_tmp[704964] "expr temp" "maybe param" "maybe type" "temp"
    (704967 'move' call_tmp[704964](210513 call _cond_test call_tmp[704959]))
    if call_tmp[704964]
    {
      unknown call_tmp[704969] "expr temp" "maybe param" "maybe type" "temp"
      (704972 'move' call_tmp[704969](210495 call stringify(210493 'expand_tuple' args[210463])))
      unknown call_tmp[704974] "maybe param" "maybe type" "temp"
      (704977 'move' call_tmp[704974](210496 call + "assert failed - " call_tmp[704969]))
      unknown tmpstring[210498] "dead at end of block" "insert auto destroy"
      (546141 'init var' tmpstring[210498] call_tmp[704974])
      (210501 'end of statement')
      unknown call_tmp[704981] "expr temp" "maybe param" "maybe type" "temp"
      (704984 'move' call_tmp[704981](210510 call(210506 call (partial) c_str _mt[243] tmpstring[210498])))
      (210511 'chpl_error' call_tmp[704981])
      (486071 'end of statement' tmpstring[210498])
    }
    (527962 return _void[55])
    (355392 'used modules list'(210468 'use' IO[230979] 'only' stringify))
  }
  function compilerError[210528](param arg msg[210524]:string[26] ..., param arg errorDepth[210531]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210552 'error')
    (527964 return _void[55])
  }
  function compilerError[210566](param arg msg[210562]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210570 'error')
    (527966 return _void[55])
  }
  function compilerWarning[210584](param arg msg[210580]:string[26] ..., param arg errorDepth[210587]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210608 'warning')
    (527968 return _void[55])
  }
  function compilerWarning[210622](param arg msg[210618]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210626 'warning')
    (527970 return _void[55])
  }
  function compilerAssert[210637](param arg test[210634]:bool[10]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704986] "expr temp" "maybe param" "maybe type" "temp"
    (704989 'move' call_tmp[704986](210640 call ! test[210634]))
    unknown call_tmp[704991] "expr temp" "maybe param" "maybe type" "temp"
    (704994 'move' call_tmp[704991](210661 call _cond_test call_tmp[704986]))
    if call_tmp[704991]
    {
      (210659 call compilerError "assert failed")
    }
    (527972 return _void[55])
  }
  function compilerAssert[210675](param arg test[210672]:bool[10], param arg errorDepth[210678]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704996] "expr temp" "maybe param" "maybe type" "temp"
    (704999 'move' call_tmp[704996](210682 call ! test[210672]))
    unknown call_tmp[705001] "expr temp" "maybe param" "maybe type" "temp"
    (705004 'move' call_tmp[705001](210693 call _cond_test call_tmp[704996]))
    if call_tmp[705001]
    {
      unknown call_tmp[705006] "expr temp" "maybe param" "maybe type" "temp"
      (705009 'move' call_tmp[705006](210689 call + errorDepth[210678] 1))
      (210691 call compilerError "assert failed" call_tmp[705006])
    }
    (527974 return _void[55])
  }
  function compilerAssert[210707](param arg test[210704]:bool[10], param arg msg[210712]:string[26] ...) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[705011] "expr temp" "maybe param" "maybe type" "temp"
    (705014 'move' call_tmp[705011](210717 call ! test[210704]))
    unknown call_tmp[705016] "expr temp" "maybe param" "maybe type" "temp"
    (705019 'move' call_tmp[705016](210726 call _cond_test call_tmp[705011]))
    if call_tmp[705016]
    {
      (210724 call compilerError "assert failed - "(210723 'expand_tuple' msg[210712]))
    }
    (527976 return _void[55])
  }
  function compilerAssert[210740](param arg test[210737]:bool[10], param arg msg[210745]:string[26] ..., param arg errorDepth[210750]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[705021] "expr temp" "maybe param" "maybe type" "temp"
    (705024 'move' call_tmp[705021](210754 call ! test[210737]))
    unknown call_tmp[705026] "expr temp" "maybe param" "maybe type" "temp"
    (705029 'move' call_tmp[705026](210767 call _cond_test call_tmp[705021]))
    if call_tmp[705026]
    {
      unknown call_tmp[705031] "expr temp" "maybe param" "maybe type" "temp"
      (705034 'move' call_tmp[705031](210763 call + errorDepth[210750] 1))
      (210765 call compilerError "assert failed - "(210760 'expand_tuple' msg[210745]) call_tmp[705031])
    }
    (527978 return _void[55])
  }
  function exit[210783](arg status[210779]:int(64)[13] =
  0) : _unknown[51] "function terminates program" "inline" "no return value for void"
  {
    (210804 'chpl_exit_any' status[210779])
    (527980 return _void[55])
  }
  (355390 'used modules list'(353105 'use' ChapelStandard[20267]))
}