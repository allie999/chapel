AST dump for Builtins after pass normalize.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416092]() : void[4] "insert line file info" "module init"
  {
    (527840 return _void[55])
  }
  function assert[210345](arg test[210342]:bool[10]) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704762] "expr temp" "maybe param" "maybe type" "temp"
    (704765 'move' call_tmp[704762](210348 call ! test[210342]))
    unknown call_tmp[704767] "expr temp" "maybe param" "maybe type" "temp"
    (704770 'move' call_tmp[704767](210357 call _cond_test call_tmp[704762]))
    if call_tmp[704767]
    {
      (210355 'chpl_error' c"assert failed")
    }
    (527818 return _void[55])
  }
  function assert[210372](arg test[210369]:bool[10], arg args[210376]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704772] "expr temp" "maybe param" "maybe type" "temp"
    (704775 'move' call_tmp[704772](210385 call ! test[210369]))
    unknown call_tmp[704777] "expr temp" "maybe param" "maybe type" "temp"
    (704780 'move' call_tmp[704777](210426 call _cond_test call_tmp[704772]))
    if call_tmp[704777]
    {
      unknown call_tmp[704782] "expr temp" "maybe param" "maybe type" "temp"
      (704785 'move' call_tmp[704782](210408 call stringify(210406 'expand_tuple' args[210376])))
      unknown call_tmp[704787] "maybe param" "maybe type" "temp"
      (704790 'move' call_tmp[704787](210409 call + "assert failed - " call_tmp[704782]))
      unknown tmpstring[210411] "dead at end of block" "insert auto destroy"
      (545999 'init var' tmpstring[210411] call_tmp[704787])
      (210414 'end of statement')
      unknown call_tmp[704794] "expr temp" "maybe param" "maybe type" "temp"
      (704797 'move' call_tmp[704794](210423 call(210419 call (partial) c_str _mt[243] tmpstring[210411])))
      (210424 'chpl_error' call_tmp[704794])
      (485947 'end of statement' tmpstring[210411])
    }
    (527820 return _void[55])
    (355281 'used modules list'(210381 'use' IO[230891] 'only' stringify))
  }
  function compilerError[210441](param arg msg[210437]:string[26] ..., param arg errorDepth[210444]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210465 'error')
    (527822 return _void[55])
  }
  function compilerError[210479](param arg msg[210475]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210483 'error')
    (527824 return _void[55])
  }
  function compilerWarning[210497](param arg msg[210493]:string[26] ..., param arg errorDepth[210500]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210521 'warning')
    (527826 return _void[55])
  }
  function compilerWarning[210535](param arg msg[210531]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210539 'warning')
    (527828 return _void[55])
  }
  function compilerAssert[210550](param arg test[210547]:bool[10]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704799] "expr temp" "maybe param" "maybe type" "temp"
    (704802 'move' call_tmp[704799](210553 call ! test[210547]))
    unknown call_tmp[704804] "expr temp" "maybe param" "maybe type" "temp"
    (704807 'move' call_tmp[704804](210574 call _cond_test call_tmp[704799]))
    if call_tmp[704804]
    {
      (210572 call compilerError "assert failed")
    }
    (527830 return _void[55])
  }
  function compilerAssert[210588](param arg test[210585]:bool[10], param arg errorDepth[210591]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704809] "expr temp" "maybe param" "maybe type" "temp"
    (704812 'move' call_tmp[704809](210595 call ! test[210585]))
    unknown call_tmp[704814] "expr temp" "maybe param" "maybe type" "temp"
    (704817 'move' call_tmp[704814](210606 call _cond_test call_tmp[704809]))
    if call_tmp[704814]
    {
      unknown call_tmp[704819] "expr temp" "maybe param" "maybe type" "temp"
      (704822 'move' call_tmp[704819](210602 call + errorDepth[210591] 1))
      (210604 call compilerError "assert failed" call_tmp[704819])
    }
    (527832 return _void[55])
  }
  function compilerAssert[210620](param arg test[210617]:bool[10], param arg msg[210625]:string[26] ...) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704824] "expr temp" "maybe param" "maybe type" "temp"
    (704827 'move' call_tmp[704824](210630 call ! test[210617]))
    unknown call_tmp[704829] "expr temp" "maybe param" "maybe type" "temp"
    (704832 'move' call_tmp[704829](210639 call _cond_test call_tmp[704824]))
    if call_tmp[704829]
    {
      (210637 call compilerError "assert failed - "(210636 'expand_tuple' msg[210625]))
    }
    (527834 return _void[55])
  }
  function compilerAssert[210653](param arg test[210650]:bool[10], param arg msg[210658]:string[26] ..., param arg errorDepth[210663]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704834] "expr temp" "maybe param" "maybe type" "temp"
    (704837 'move' call_tmp[704834](210667 call ! test[210650]))
    unknown call_tmp[704839] "expr temp" "maybe param" "maybe type" "temp"
    (704842 'move' call_tmp[704839](210680 call _cond_test call_tmp[704834]))
    if call_tmp[704839]
    {
      unknown call_tmp[704844] "expr temp" "maybe param" "maybe type" "temp"
      (704847 'move' call_tmp[704844](210676 call + errorDepth[210663] 1))
      (210678 call compilerError "assert failed - "(210673 'expand_tuple' msg[210658]) call_tmp[704844])
    }
    (527836 return _void[55])
  }
  function exit[210696](arg status[210692]:int(64)[13] =
  0) : _unknown[51] "function terminates program" "inline" "no return value for void"
  {
    (210717 'chpl_exit_any' status[210692])
    (527838 return _void[55])
  }
  (355279 'used modules list'(352996 'use' ChapelStandard[20264]))
}