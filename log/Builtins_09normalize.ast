AST dump for Builtins after pass normalize.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416135]() : void[4] "insert line file info" "module init"
  {
    (527895 return _void[55])
  }
  function assert[210365](arg test[210362]:bool[10]) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704822] "expr temp" "maybe param" "maybe type" "temp"
    (704825 'move' call_tmp[704822](210368 call ! test[210362]))
    unknown call_tmp[704827] "expr temp" "maybe param" "maybe type" "temp"
    (704830 'move' call_tmp[704827](210377 call _cond_test call_tmp[704822]))
    if call_tmp[704827]
    {
      (210375 'chpl_error' c"assert failed")
    }
    (527873 return _void[55])
  }
  function assert[210392](arg test[210389]:bool[10], arg args[210396]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704832] "expr temp" "maybe param" "maybe type" "temp"
    (704835 'move' call_tmp[704832](210405 call ! test[210389]))
    unknown call_tmp[704837] "expr temp" "maybe param" "maybe type" "temp"
    (704840 'move' call_tmp[704837](210446 call _cond_test call_tmp[704832]))
    if call_tmp[704837]
    {
      unknown call_tmp[704842] "expr temp" "maybe param" "maybe type" "temp"
      (704845 'move' call_tmp[704842](210428 call stringify(210426 'expand_tuple' args[210396])))
      unknown call_tmp[704847] "maybe param" "maybe type" "temp"
      (704850 'move' call_tmp[704847](210429 call + "assert failed - " call_tmp[704842]))
      unknown tmpstring[210431] "dead at end of block" "insert auto destroy"
      (546054 'init var' tmpstring[210431] call_tmp[704847])
      (210434 'end of statement')
      unknown call_tmp[704854] "expr temp" "maybe param" "maybe type" "temp"
      (704857 'move' call_tmp[704854](210443 call(210439 call (partial) c_str _mt[243] tmpstring[210431])))
      (210444 'chpl_error' call_tmp[704854])
      (485993 'end of statement' tmpstring[210431])
    }
    (527875 return _void[55])
    (355324 'used modules list'(210401 'use' IO[230912] 'only' stringify))
  }
  function compilerError[210461](param arg msg[210457]:string[26] ..., param arg errorDepth[210464]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210485 'error')
    (527877 return _void[55])
  }
  function compilerError[210499](param arg msg[210495]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210503 'error')
    (527879 return _void[55])
  }
  function compilerWarning[210517](param arg msg[210513]:string[26] ..., param arg errorDepth[210520]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210541 'warning')
    (527881 return _void[55])
  }
  function compilerWarning[210555](param arg msg[210551]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210559 'warning')
    (527883 return _void[55])
  }
  function compilerAssert[210570](param arg test[210567]:bool[10]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704859] "expr temp" "maybe param" "maybe type" "temp"
    (704862 'move' call_tmp[704859](210573 call ! test[210567]))
    unknown call_tmp[704864] "expr temp" "maybe param" "maybe type" "temp"
    (704867 'move' call_tmp[704864](210594 call _cond_test call_tmp[704859]))
    if call_tmp[704864]
    {
      (210592 call compilerError "assert failed")
    }
    (527885 return _void[55])
  }
  function compilerAssert[210608](param arg test[210605]:bool[10], param arg errorDepth[210611]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704869] "expr temp" "maybe param" "maybe type" "temp"
    (704872 'move' call_tmp[704869](210615 call ! test[210605]))
    unknown call_tmp[704874] "expr temp" "maybe param" "maybe type" "temp"
    (704877 'move' call_tmp[704874](210626 call _cond_test call_tmp[704869]))
    if call_tmp[704874]
    {
      unknown call_tmp[704879] "expr temp" "maybe param" "maybe type" "temp"
      (704882 'move' call_tmp[704879](210622 call + errorDepth[210611] 1))
      (210624 call compilerError "assert failed" call_tmp[704879])
    }
    (527887 return _void[55])
  }
  function compilerAssert[210640](param arg test[210637]:bool[10], param arg msg[210645]:string[26] ...) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704884] "expr temp" "maybe param" "maybe type" "temp"
    (704887 'move' call_tmp[704884](210650 call ! test[210637]))
    unknown call_tmp[704889] "expr temp" "maybe param" "maybe type" "temp"
    (704892 'move' call_tmp[704889](210659 call _cond_test call_tmp[704884]))
    if call_tmp[704889]
    {
      (210657 call compilerError "assert failed - "(210656 'expand_tuple' msg[210645]))
    }
    (527889 return _void[55])
  }
  function compilerAssert[210673](param arg test[210670]:bool[10], param arg msg[210678]:string[26] ..., param arg errorDepth[210683]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704894] "expr temp" "maybe param" "maybe type" "temp"
    (704897 'move' call_tmp[704894](210687 call ! test[210670]))
    unknown call_tmp[704899] "expr temp" "maybe param" "maybe type" "temp"
    (704902 'move' call_tmp[704899](210700 call _cond_test call_tmp[704894]))
    if call_tmp[704899]
    {
      unknown call_tmp[704904] "expr temp" "maybe param" "maybe type" "temp"
      (704907 'move' call_tmp[704904](210696 call + errorDepth[210683] 1))
      (210698 call compilerError "assert failed - "(210693 'expand_tuple' msg[210678]) call_tmp[704904])
    }
    (527891 return _void[55])
  }
  function exit[210716](arg status[210712]:int(64)[13] =
  0) : _unknown[51] "function terminates program" "inline" "no return value for void"
  {
    (210737 'chpl_exit_any' status[210712])
    (527893 return _void[55])
  }
  (355322 'used modules list'(353038 'use' ChapelStandard[20267]))
}