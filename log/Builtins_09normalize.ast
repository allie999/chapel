AST dump for Builtins after pass normalize.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416130]() : void[4] "insert line file info" "module init"
  {
    (527881 return _void[55])
  }
  function assert[210363](arg test[210360]:bool[10]) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704781] "expr temp" "maybe param" "maybe type" "temp"
    (704784 'move' call_tmp[704781](210366 call ! test[210360]))
    unknown call_tmp[704786] "expr temp" "maybe param" "maybe type" "temp"
    (704789 'move' call_tmp[704786](210375 call _cond_test call_tmp[704781]))
    if call_tmp[704786]
    {
      (210373 'chpl_error' c"assert failed")
    }
    (527859 return _void[55])
  }
  function assert[210390](arg test[210387]:bool[10], arg args[210394]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704791] "expr temp" "maybe param" "maybe type" "temp"
    (704794 'move' call_tmp[704791](210403 call ! test[210387]))
    unknown call_tmp[704796] "expr temp" "maybe param" "maybe type" "temp"
    (704799 'move' call_tmp[704796](210444 call _cond_test call_tmp[704791]))
    if call_tmp[704796]
    {
      unknown call_tmp[704801] "expr temp" "maybe param" "maybe type" "temp"
      (704804 'move' call_tmp[704801](210426 call stringify(210424 'expand_tuple' args[210394])))
      unknown call_tmp[704806] "maybe param" "maybe type" "temp"
      (704809 'move' call_tmp[704806](210427 call + "assert failed - " call_tmp[704801]))
      unknown tmpstring[210429] "dead at end of block" "insert auto destroy"
      (546038 'init var' tmpstring[210429] call_tmp[704806])
      (210432 'end of statement')
      unknown call_tmp[704813] "expr temp" "maybe param" "maybe type" "temp"
      (704816 'move' call_tmp[704813](210441 call(210437 call (partial) c_str _mt[243] tmpstring[210429])))
      (210442 'chpl_error' call_tmp[704813])
      (485988 'end of statement' tmpstring[210429])
    }
    (527861 return _void[55])
    (355321 'used modules list'(210399 'use' IO[230910] 'only' stringify))
  }
  function compilerError[210459](param arg msg[210455]:string[26] ..., param arg errorDepth[210462]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210483 'error')
    (527863 return _void[55])
  }
  function compilerError[210497](param arg msg[210493]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210501 'error')
    (527865 return _void[55])
  }
  function compilerWarning[210515](param arg msg[210511]:string[26] ..., param arg errorDepth[210518]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210539 'warning')
    (527867 return _void[55])
  }
  function compilerWarning[210553](param arg msg[210549]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210557 'warning')
    (527869 return _void[55])
  }
  function compilerAssert[210568](param arg test[210565]:bool[10]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704818] "expr temp" "maybe param" "maybe type" "temp"
    (704821 'move' call_tmp[704818](210571 call ! test[210565]))
    unknown call_tmp[704823] "expr temp" "maybe param" "maybe type" "temp"
    (704826 'move' call_tmp[704823](210592 call _cond_test call_tmp[704818]))
    if call_tmp[704823]
    {
      (210590 call compilerError "assert failed")
    }
    (527871 return _void[55])
  }
  function compilerAssert[210606](param arg test[210603]:bool[10], param arg errorDepth[210609]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704828] "expr temp" "maybe param" "maybe type" "temp"
    (704831 'move' call_tmp[704828](210613 call ! test[210603]))
    unknown call_tmp[704833] "expr temp" "maybe param" "maybe type" "temp"
    (704836 'move' call_tmp[704833](210624 call _cond_test call_tmp[704828]))
    if call_tmp[704833]
    {
      unknown call_tmp[704838] "expr temp" "maybe param" "maybe type" "temp"
      (704841 'move' call_tmp[704838](210620 call + errorDepth[210609] 1))
      (210622 call compilerError "assert failed" call_tmp[704838])
    }
    (527873 return _void[55])
  }
  function compilerAssert[210638](param arg test[210635]:bool[10], param arg msg[210643]:string[26] ...) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704843] "expr temp" "maybe param" "maybe type" "temp"
    (704846 'move' call_tmp[704843](210648 call ! test[210635]))
    unknown call_tmp[704848] "expr temp" "maybe param" "maybe type" "temp"
    (704851 'move' call_tmp[704848](210657 call _cond_test call_tmp[704843]))
    if call_tmp[704848]
    {
      (210655 call compilerError "assert failed - "(210654 'expand_tuple' msg[210643]))
    }
    (527875 return _void[55])
  }
  function compilerAssert[210671](param arg test[210668]:bool[10], param arg msg[210676]:string[26] ..., param arg errorDepth[210681]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704853] "expr temp" "maybe param" "maybe type" "temp"
    (704856 'move' call_tmp[704853](210685 call ! test[210668]))
    unknown call_tmp[704858] "expr temp" "maybe param" "maybe type" "temp"
    (704861 'move' call_tmp[704858](210698 call _cond_test call_tmp[704853]))
    if call_tmp[704858]
    {
      unknown call_tmp[704863] "expr temp" "maybe param" "maybe type" "temp"
      (704866 'move' call_tmp[704863](210694 call + errorDepth[210681] 1))
      (210696 call compilerError "assert failed - "(210691 'expand_tuple' msg[210676]) call_tmp[704863])
    }
    (527877 return _void[55])
  }
  function exit[210714](arg status[210710]:int(64)[13] =
  0) : _unknown[51] "function terminates program" "inline" "no return value for void"
  {
    (210735 'chpl_exit_any' status[210710])
    (527879 return _void[55])
  }
  (355319 'used modules list'(353036 'use' ChapelStandard[20267]))
}