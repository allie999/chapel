AST dump for ChapelUtil after pass returnStarTuplesByRefArgs.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelUtil[415925]() : void[4] "insert line file info" "module init" "resolved"
  {
    (521993 return _void[55])
  }
  function safeAdd[979640](const in arg a[979642]:int(64)[13], const in arg b[979647]:int(64)[13]) : bool[10] "instantiated generic" "invisible fn" "resolved"
  {
    val ret[979649]:bool[10] "dead after last mention" "RVV" "temp"
    const-val call_tmp[2062155]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2062157 'move' call_tmp[2062155](2062159 '<' a[979642] 0))
    if call_tmp[2062155]
    {
      const-val call_tmp[2165783]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2165785 'move' call_tmp[2165783](2165787 '>=' b[979647] 0))
      if call_tmp[2165783]
      {
        (979724 'move' ret[979649] 1)
        gotoReturn _end_safeAdd[979863] _end_safeAdd[979863]
      }
      {
        const-val call_tmp[2165843]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2165845 'move' call_tmp[2165843](2165847 '-' -9223372036854775808 a[979642]))
        const-val call_tmp[2074649]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2074651 'move' call_tmp[2074649](2074653 '<' b[979647] call_tmp[2165843]))
        if call_tmp[2074649]
        {
          (979769 'move' ret[979649] 0)
          gotoReturn _end_safeAdd[979863] _end_safeAdd[979863]
        }
        {
          (979776 'move' ret[979649] 1)
          gotoReturn _end_safeAdd[979863] _end_safeAdd[979863]
        }
      }
    }
    {
      const-val call_tmp[2117225]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2117227 'move' call_tmp[2117225](2117229 '<=' b[979647] 0))
      if call_tmp[2117225]
      {
        (979802 'move' ret[979649] 1)
        gotoReturn _end_safeAdd[979863] _end_safeAdd[979863]
      }
      {
        const-val call_tmp[2165873]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2165875 'move' call_tmp[2165873](2165877 '-' 9223372036854775807 a[979642]))
        const-val call_tmp[2070604]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2070606 'move' call_tmp[2070604](2070608 '>' b[979647] call_tmp[2165873]))
        if call_tmp[2070604]
        {
          (979847 'move' ret[979649] 0)
          gotoReturn _end_safeAdd[979863] _end_safeAdd[979863]
        }
        {
          (979854 'move' ret[979649] 1)
          gotoReturn _end_safeAdd[979863] _end_safeAdd[979863]
        }
      }
    }
    label _end_safeAdd[979863]
    (979865 return ret[979649])
  }
  type chpl_main_argument[167370] val argc[167357]:int(64)[13] val return_value[167365]:int(32)[95]
  function chpl_rt_preUserCodeHook[167668]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (521979 return _void[55])
  }
  function chpl_rt_postUserCodeHook[167674]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (521981 return _void[55])
  }
  function chpl_addModule[167689](const in arg moduleName[167686]:c_string[19], const in arg deinitFun[167692]:c_fn_ptr[152]) : void[4] "resolved" "no return value for void"
  {
    val new_temp[1485993]:chpl_ModuleDeinit[19824] "dead after last mention" "temp"
    val tmp[2033638]:chpl_ModuleDeinit[19824] "temp"
    (2033643 'move' tmp[2033638](2033640 '.v' chpl_moduleDeinitFuns[19837] value[2033604]))
    (1485995 'move' new_temp[1485993](1485864 call _new[1485929] moduleName[167686] deinitFun[167692] tmp[2033638]))
    (2323681 '.=' chpl_moduleDeinitFuns[19837] value[2033604] new_temp[1485993])
    (521983 return _void[55])
  }
  function chpl_deinitModules[167713]() : void[4] "export" "local args" "resolved" "no return value for void"
  {
    const-val local__str_literal_129[2334101]:string[26] "temp"
    (2334102 'move' "argument to ! is nil" "argument to ! is nil")
    val prev[167764]:chpl_ModuleDeinit[19824] "dead at end of block" "insert auto destroy"
    val tmp[2033630]:chpl_ModuleDeinit[19824] "temp"
    (2033635 'move' tmp[2033630](2033632 '.v' chpl_moduleDeinitFuns[19837] value[2033604]))
    (544459 'move' prev[167764] tmp[2033630])
    val tmp[167821]:bool[10] "dead after last mention" "temp"
    val coerce_tmp[1484293]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1484298 'move' coerce_tmp[1484293](1484295 'cast' object[22] tmp[2033630]))
    const-val call_tmp[2061398]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2061400 'move' call_tmp[2061398](2061402 'ptr_neq' coerce_tmp[1484293] nil[44]))
    (167839 'move' tmp[167821] call_tmp[2061398])
    WhileDo[167826] hazard
    {
      val coerce_tmp[2282529]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2282531 'move' coerce_tmp[2282529](2282533 'cast' object[22] prev[167764]))
      const-val call_tmp[2282536]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2282538 'move' call_tmp[2282536](2282540 'ptr_eq' coerce_tmp[2282529] nil[44]))
      if call_tmp[2282536]
      {
        (2282546 call nilCheckHalt[210063] "argument to ! is nil")
      }
      const curr[167772]:chpl_ModuleDeinit[19824] "dead at end of block" "const" "insert auto destroy"
      (544461 'move' curr[167772] prev[167764])
      val coerce_tmp[1484623]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1484628 'move' coerce_tmp[1484623] prev[167764])
      const-val coerce_tmp[1484631]:c_fn_ptr[152] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1484635 'move' coerce_tmp[1484631](2323689 '.v' coerce_tmp[1484623] deinitFun[19743]))
      (167804 call chpl_execute_module_deinit[167746] coerce_tmp[1484631])
      val coerce_tmp[1484638]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1484643 'move' coerce_tmp[1484638] prev[167764])
      val coerce_tmp[1484709]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1484713 'move' coerce_tmp[1484709](2323695 '.v' coerce_tmp[1484638] prevModule[19750]))
      (2282558 '=' prev[167764] coerce_tmp[1484709])
      val coerce_tmp[2282570]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2282572 'move' coerce_tmp[2282570](2282574 'cast' object[22] curr[167772]))
      const-val call_tmp[2282577]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2282579 'move' call_tmp[2282577](2282581 'ptr_neq' coerce_tmp[2282570] nil[44]))
      if call_tmp[2282577]
      {
        const-val call_tmp[2282593]:chpl_localeID_t[209294] "dead after last mention" "expr temp" "maybe param" "temp"
        (2282595 'move' call_tmp[2282593](2282597 '_wide_get_locale' curr[167772]))
        val isdirect[2282602]:bool[10] "temp"
        (2282604 'move' isdirect[2282602](2282607 call chpl_doDirectExecuteOn[187423] call_tmp[2282593]))
        if isdirect[2282602]
        {
          (2282612 call on_fn[1484975] curr[167772])
        }
        {
          val _args_foron_fn[2282615]:_class_localson_fn[2043938] "temp"
          (2282617 'move' _args_foron_fn[2282615](2282619 'stack allocate class' _class_localson_fn[2043938]))
          (2282621 '.=' _args_foron_fn[2282615] _0_tmp[2043941] call_tmp[2282593])
          (2282625 '.=' _args_foron_fn[2282615] _1_arg[2043943] curr[167772])
          val _args_vforon_fn[2282629]:c_void_ptr[149] "temp"
          (2282631 'move' _args_vforon_fn[2282629](2282633 'cast_to_void_star' _args_foron_fn[2282615]))
          val _args_sizeon_fn[2282635]:int(64)[13] "temp"
          (2282637 'move' _args_sizeon_fn[2282635](2282639 'sizeof_bundle' _class_localson_fn[2043938]))
          on(2282642 call wrapon_fn[2043972] call_tmp[2282593] _args_vforon_fn[2282629] _args_sizeon_fn[2282635] _args_foron_fn[2282615])
        }
      }
      val coerce_tmp[1485775]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1485780 'move' coerce_tmp[1485775](1485777 'cast' object[22] coerce_tmp[1484709]))
      const-val call_tmp[2061408]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2061410 'move' call_tmp[2061408](2061412 'ptr_neq' coerce_tmp[1485775] nil[44]))
      (167832 'move' tmp[167821] call_tmp[2061408])
      tmp[167821]
    }
    val tmp[2323697]:chpl_ModuleDeinit[19824] "temp"
    (2323699 'move' tmp[2323697](2282654 'cast' chpl_ModuleDeinit[19824] nil[44]))
    (2323703 '.=' chpl_moduleDeinitFuns[19837] value[2033604] tmp[2323697])
    (521991 return _void[55])
  }
  function chpl_execute_module_deinit[167746](const in arg deinitFun[167743]:c_fn_ptr[152]) : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (521989 return _void[55])
  }
}