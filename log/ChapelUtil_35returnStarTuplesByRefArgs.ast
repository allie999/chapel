AST dump for ChapelUtil after pass returnStarTuplesByRefArgs.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelUtil[416130]() : void[4] "insert line file info" "module init" "resolved"
  {
    (522208 return _void[55])
  }
  function safeAdd[979918](const in arg a[979920]:int(64)[13], const in arg b[979925]:int(64)[13]) : bool[10] "instantiated generic" "invisible fn" "resolved" "fn synchronization free"
  {
    val ret[979927]:bool[10] "dead after last mention" "RVV" "temp"
    const-val call_tmp[2230498]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2230500 'move' call_tmp[2230498](2230502 '<' a[979920] 0))
    if call_tmp[2230498]
    {
      const-val call_tmp[2335460]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2335462 'move' call_tmp[2335460](2335464 '>=' b[979925] 0))
      if call_tmp[2335460]
      {
        (980002 'move' ret[979927] 1)
        gotoReturn _end_safeAdd[980141] _end_safeAdd[980141]
      }
      {
        const-val call_tmp[2342692]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2342694 'move' call_tmp[2342692](2342696 '-' -9223372036854775808 a[979920]))
        const-val call_tmp[2244708]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2244710 'move' call_tmp[2244708](2244712 '<' b[979925] call_tmp[2342692]))
        if call_tmp[2244708]
        {
          (980047 'move' ret[979927] 0)
          gotoReturn _end_safeAdd[980141] _end_safeAdd[980141]
        }
        {
          (980054 'move' ret[979927] 1)
          gotoReturn _end_safeAdd[980141] _end_safeAdd[980141]
        }
      }
    }
    {
      const-val call_tmp[2290174]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2290176 'move' call_tmp[2290174](2290178 '<=' b[979925] 0))
      if call_tmp[2290174]
      {
        (980080 'move' ret[979927] 1)
        gotoReturn _end_safeAdd[980141] _end_safeAdd[980141]
      }
      {
        const-val call_tmp[2342722]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2342724 'move' call_tmp[2342722](2342726 '-' 9223372036854775807 a[979920]))
        const-val call_tmp[2240233]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2240235 'move' call_tmp[2240233](2240237 '>' b[979925] call_tmp[2342722]))
        if call_tmp[2240233]
        {
          (980125 'move' ret[979927] 0)
          gotoReturn _end_safeAdd[980141] _end_safeAdd[980141]
        }
        {
          (980132 'move' ret[979927] 1)
          gotoReturn _end_safeAdd[980141] _end_safeAdd[980141]
        }
      }
    }
    label _end_safeAdd[980141]
    (980143 return ret[979927])
  }
  type chpl_main_argument[167416] val argc[167403]:int(64)[13] val return_value[167411]:int(32)[95]
  function chpl_rt_preUserCodeHook[167714]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522194 return _void[55])
  }
  function chpl_rt_postUserCodeHook[167720]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522196 return _void[55])
  }
  function chpl_addModule[167735](const in arg moduleName[167732]:c_string[19], const in arg deinitFun[167738]:c_fn_ptr[152]) : void[4] "resolved" "no return value for void"
  {
    val new_temp[1593239]:chpl_ModuleDeinit[19827] "dead after last mention" "temp"
    val tmp[2197456]:chpl_ModuleDeinit[19827] "temp"
    (2197461 'move' tmp[2197456](2197458 '.v' chpl_moduleDeinitFuns[19840] value[2197422]))
    (1593241 'move' new_temp[1593239](1593110 call _new[1593175] moduleName[167732] deinitFun[167738] tmp[2197456]))
    (2564133 '.=' chpl_moduleDeinitFuns[19840] value[2197422] new_temp[1593239])
    (522198 return _void[55])
  }
  function chpl_deinitModules[167759]() : void[4] "export" "local args" "resolved" "no return value for void"
  {
    const-val local__str_literal_129[2576775]:string[26] "temp"
    (2576776 'move' "argument to ! is nil" "argument to ! is nil")
    val prev[167810]:chpl_ModuleDeinit[19827] "dead at end of block" "insert auto destroy"
    val tmp[2197448]:chpl_ModuleDeinit[19827] "temp"
    (2197453 'move' tmp[2197448](2197450 '.v' chpl_moduleDeinitFuns[19840] value[2197422]))
    (544692 'move' prev[167810] tmp[2197448])
    val tmp[167867]:bool[10] "dead after last mention" "temp"
    val coerce_tmp[1591539]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1591544 'move' coerce_tmp[1591539](1591541 'cast' object[22] tmp[2197448]))
    const-val call_tmp[2229581]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2229583 'move' call_tmp[2229581](2229585 'ptr_neq' coerce_tmp[1591539] nil[44]))
    (167885 'move' tmp[167867] call_tmp[2229581])
    WhileDo[167872] hazard
    {
      val coerce_tmp[2512023]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2512025 'move' coerce_tmp[2512023](2512027 'cast' object[22] prev[167810]))
      const-val call_tmp[2512030]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2512032 'move' call_tmp[2512030](2512034 'ptr_eq' coerce_tmp[2512023] nil[44]))
      if call_tmp[2512030]
      {
        (2512040 call nilCheckHalt[210238] "argument to ! is nil")
      }
      const curr[167818]:chpl_ModuleDeinit[19827] "dead at end of block" "const" "insert auto destroy"
      (544694 'move' curr[167818] prev[167810])
      val coerce_tmp[1591869]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1591874 'move' coerce_tmp[1591869] prev[167810])
      const-val coerce_tmp[1591877]:c_fn_ptr[152] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1591881 'move' coerce_tmp[1591877](2564141 '.v' coerce_tmp[1591869] deinitFun[19746]))
      (167850 call chpl_execute_module_deinit[167792] coerce_tmp[1591877])
      val coerce_tmp[1591884]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1591889 'move' coerce_tmp[1591884] prev[167810])
      val coerce_tmp[1591955]:chpl_ModuleDeinit[19827] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1591959 'move' coerce_tmp[1591955](2564147 '.v' coerce_tmp[1591884] prevModule[19753]))
      (2512052 '=' prev[167810] coerce_tmp[1591955])
      val coerce_tmp[2512064]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2512066 'move' coerce_tmp[2512064](2512068 'cast' object[22] curr[167818]))
      const-val call_tmp[2512071]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2512073 'move' call_tmp[2512071](2512075 'ptr_neq' coerce_tmp[2512064] nil[44]))
      if call_tmp[2512071]
      {
        const-val call_tmp[2512087]:chpl_localeID_t[209352] "dead after last mention" "expr temp" "maybe param" "temp"
        (2512089 'move' call_tmp[2512087](2512091 '_wide_get_locale' curr[167818]))
        val isdirect[2512096]:bool[10] "temp"
        (2512098 'move' isdirect[2512096](2512101 call chpl_doDirectExecuteOn[187469] call_tmp[2512087]))
        if isdirect[2512096]
        {
          (2512106 call on_fn[1592221] curr[167818])
        }
        {
          val _args_foron_fn[2512109]:_class_localson_fn[2209849] "temp"
          (2512111 'move' _args_foron_fn[2512109](2512113 'stack allocate class' _class_localson_fn[2209849]))
          (2512115 '.=' _args_foron_fn[2512109] _0_tmp[2209852] call_tmp[2512087])
          (2512119 '.=' _args_foron_fn[2512109] _1_arg[2209854] curr[167818])
          val _args_vforon_fn[2512123]:c_void_ptr[149] "temp"
          (2512125 'move' _args_vforon_fn[2512123](2512127 'cast_to_void_star' _args_foron_fn[2512109]))
          val _args_sizeon_fn[2512129]:int(64)[13] "temp"
          (2512131 'move' _args_sizeon_fn[2512129](2512133 'sizeof_bundle' _class_localson_fn[2209849]))
          on(2512136 call wrapon_fn[2209883] call_tmp[2512087] _args_vforon_fn[2512123] _args_sizeon_fn[2512129] _args_foron_fn[2512109])
        }
      }
      val coerce_tmp[1593021]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1593026 'move' coerce_tmp[1593021](1593023 'cast' object[22] coerce_tmp[1591955]))
      const-val call_tmp[2229591]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2229593 'move' call_tmp[2229591](2229595 'ptr_neq' coerce_tmp[1593021] nil[44]))
      (167878 'move' tmp[167867] call_tmp[2229591])
      tmp[167867]
    }
    val tmp[2564149]:chpl_ModuleDeinit[19827] "temp"
    (2564151 'move' tmp[2564149](2512148 'cast' chpl_ModuleDeinit[19827] nil[44]))
    (2564155 '.=' chpl_moduleDeinitFuns[19840] value[2197422] tmp[2564149])
    (522206 return _void[55])
  }
  function chpl_execute_module_deinit[167792](const in arg deinitFun[167789]:c_fn_ptr[152]) : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522204 return _void[55])
  }
}