AST dump for ChapelHashtable after pass flattenClasses.
Module use list: ChapelBase DSIUtil 

{
  type chpl__hash_status[200461] def empty[200455]:chpl__hash_status[200461] 0 def full[200457]:chpl__hash_status[200461] def deleted[200459]:chpl__hash_status[200461]
  {
  }
  function chpl_TableEntry[200504](?).isFull[200486](arg _mt[200508]:_MT[238], arg this[200506]:chpl_TableEntry[200504](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (200498 return(200496 call ==(200489 call . this[200506] c"status") full[200457]))
  }
  type chpl_TableEntry[200504](?) unknown status[200472] empty[200455] chpl__hash_status[200461] unknown key[200476] unknown val[200480]
  function chpl__primes[200513]() : _unknown[51] "inline" "no parens" "private"
  {
    (200681 return(200679 call _build_tuple 0 23 53 89 191 383 761 1531 3067 6143 12281 24571 49139 98299 196597 393209 786431 1572853 3145721 6291449 12582893 25165813 50331599 100663291 201326557 402653171 805306357 1610612711 3221225461 6442450939 12884901877 25769803751 51539607551 103079215087 206158430183 412316860387 824633720831 1649267441651 3298534883309 6597069766631 13194139533299 26388279066623 52776558133177 105553116266489 211106232532969 422212465065953 844424930131963 1688849860263901 3377699720527861 6755399441055731 13510798882111483 27021597764222939 54043195528445869 108086391056891903 216172782113783773 432345564227567561 864691128455135207))
  }
  function _moveToReturn[200690](const  ref arg arg[200688]:_any[178](?)) : _unknown[51] "private"
  {
    if(200717 call _cond_test(200695 call ==(200693 'typeof' arg[200688]) nothing[7]))
    {
      (200698 return none[57])
    }
    {
      unknown moved[200703] "no auto destroy" "no copy" "no init"(200702 'typeof' arg[200688])
      (200706 'end of statement')
      (200712 '=' moved[200703] arg[200688])
      (200715 return moved[200703])
    }
  }
  function _moveInit[200728](ref arg lhs[200726]:_any[178](?), in arg rhs[200730]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(200760 call _cond_test(200736 call !=(200733 'typeof' lhs[200726])(200735 'typeof' rhs[200730])))
    {
      (200757 call compilerError "type mismatch in _moveInit")
    }
    if(200778 call _cond_test(200768 call ==(200766 'typeof' lhs[200726]) nothing[7]))
    {
    }
    {
      (200775 '=' lhs[200726] rhs[200730])
    }
  }
  function _allocateData[200790](arg size[200787] :
  int(64)[13], arg tableEltType[200792]:_any[178](?)) : _unknown[51] "private"
  {
    if(200819 call _cond_test(200796 call == size[200787] 0))
    {
      (200817 call halt "attempt to allocate hashtable with size 0")
    }
    unknown callPostAlloc[200826] bool[10]
    (200829 'end of statement')
    unknown ret[200836](200835 call _ddata_allocate_noinit tableEltType[200792] size[200787] callPostAlloc[200826])
    (200839 'end of statement')
    unknown initMethod[200845](200844 call init_elts_method size[200787] tableEltType[200792])
    (200848 'end of statement')
    const sizeofElement[200853] "const"(200852 call _ddata_sizeof_element ret[200836])
    (200856 'end of statement')
    function ptrTo[200861](ref arg x[200859]:_any[178](?)) : _unknown[51] "inline"
    {
      (200867 return(200866 call c_pointer_return x[200859]))
    }
    {
      unknown tmp[200996] "expr temp" "maybe param" "maybe type" "temp"
      (200998 'move' tmp[200996] initMethod[200845])
      if(201003 call _cond_test(201000 call == tmp[200996] noInit[11146]))
      {
      }
      {
        if(201009 call _cond_test(201006 call == tmp[200996] serialInit[11148]))
        {
          {
            unknown _indexOfInterest[200912] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[200913] "expr temp" "temp"
            (200922 'move' _iterator[200913](200920 call _getIterator(200891 call _allSlots size[200787])))
            Defer
            {
              {
                (200939 call _freeIterator _iterator[200913])
              }
            }
            { scopeless type
              (200928 'move' _indexOfInterest[200912](200925 call iteratorIndex _iterator[200913]))
            }
            ForLoop[200914]
            {
              unknown slot[200932] "index var" "insert auto destroy"
              (200934 'move' slot[200932] _indexOfInterest[200912])
              {
                (200909 call c_memset(200899 call ptrTo(200897 call ret[200836] slot[200932]))(200906 call _cast(200905 call uint(64)[115] 8) 0) sizeofElement[200853])
              }
              label _continueLabel[200917]
              _indexOfInterest[200912]
              _iterator[200913]
            }
            label _breakLabel[200918]
          }
        }
        {
          if(201016 call _cond_test(201013 call == tmp[200996] parallelInit[11150]))
          {
            Forall {
              induction variables:
                
                unknown slot[200980] "index var" "insert auto destroy"
              iterated expressions:
                (200958 call _allSlots size[200787])
              shadow variables:
              other variables
                forall body
              {
                (200976 call c_memset(200966 call ptrTo(200964 call ret[200836] slot[200980]))(200973 call _cast(200972 call uint(64)[115] 8) 0) sizeofElement[200853])
              }
            }
          }
          {
            (200990 call halt "ArrayInit.heuristicInit should have been made concrete")
          }
        }
      }
    }
    if(201029 call _cond_test callPostAlloc[200826])
    {
      (201026 call _ddata_allocate_postalloc ret[200836] size[200787])
    }
    (201034 return ret[200836])
  }
  function _freeData[201042](arg data[201040]:_any[178](?), arg size[201045] :
  int(64)[13]) : _unknown[51] "private" "no return value for void"
  {
    if(201059 call _cond_test(201050 call != data[201040] nil[44]))
    {
      (201056 call _ddata_free data[201040] size[201045])
    }
  }
  function _typeNeedsDeinit[201070](arg t[201068]:_any[178](?)) param : _unknown[51] "private"
  {
    (201076 return(201075 'needs auto destroy' t[201068]))
  }
  function _deinitSlot[201087](ref arg aSlot[201084] :
  chpl_TableEntry[200504](?)) : _unknown[51] "private" "no return value for void"
  {
    if(201106 call _cond_test(201096 call _typeNeedsDeinit(201094 'typeof'(201091 call . aSlot[201084] c"key"))))
    {
      (201103 call chpl__autoDestroy(201099 call . aSlot[201084] c"key"))
    }
    if(201130 call _cond_test(201120 call _typeNeedsDeinit(201118 'typeof'(201115 call . aSlot[201084] c"val"))))
    {
      (201127 call chpl__autoDestroy(201123 call . aSlot[201084] c"val"))
    }
  }
  function _isSlotFull[201142](const  ref arg aSlot[201139] :
  chpl_TableEntry[200504](?)) : _unknown[51] "inline" "private"
  {
    (201155 return(201153 call ==(201146 call . aSlot[201139] c"status") full[200457]))
  }
  { scopeless type
    bool[10]
  }
  function _allSlotsNumChunks[201167](arg size[201164] :
  int(64)[13]) : _unknown[51] "private"
  {
    const numTasks[201181] "const"(201178 IfExpr (201171 call == dataParTasksPerLocale[93284] 0) then
    { scopeless
      (201174 call .(362855 call here[90438]) c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale[93284]
    } )
    (201184 'end of statement')
    const ignoreRunning[201187] "const" dataParIgnoreRunningTasks[93290]
    (201190 'end of statement')
    const minSizePerTask[201192] "const" dataParMinGranularity[93296]
    (201195 'end of statement')
    if(201248 call _cond_test debugAssocDataPar[156314])
    {
      (201217 call writeln "### numTasks = " numTasks[201181])
      (201224 call writeln "### ignoreRunning = " ignoreRunning[201187])
      (201246 call writeln "### minSizePerTask = " minSizePerTask[201192])
    }
    unknown numChunks[201259](201258 call _computeNumChunks numTasks[201181] ignoreRunning[201187] minSizePerTask[201192] size[201164])
    (201262 'end of statement')
    if(201305 call _cond_test debugAssocDataPar[156314])
    {
      (201302 call writeln "### numChunks=" numChunks[201259] ", size=" size[201164])
    }
    (201310 return numChunks[201259])
  }
  function _allSlots[201320](arg size[201317] :
  int(64)[13]) : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[201333] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[201334] "expr temp" "temp"
      (201343 'move' _iterator[201334](201341 call _getIterator(201350 call chpl_direct_counted_range_iter 0 size[201317])))
      Defer
      {
        {
          (201366 call _freeIterator _iterator[201334])
        }
      }
      { scopeless type
        (201355 'move' _indexOfInterest[201333](201352 call iteratorIndex _iterator[201334]))
      }
      ForLoop[201335]
      {
        unknown slot[201359] "index var" "insert auto destroy"
        (201361 'move' slot[201359] _indexOfInterest[201333])
        {
          (201330 yield slot[201359])
        }
        label _continueLabel[201338]
        _indexOfInterest[201333]
        _iterator[201334]
      }
      label _breakLabel[201339]
    }
  }
  function _allSlots[201382](arg size[201379] :
  int(64)[13], param arg tag[201385] :
  iterKind[453]) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(201418 call _cond_test debugDefaultAssoc[156309])
    {
      (201415 call writeln "*** In associative domain _allSlots standalone iterator")
    }
    const numChunks[201427] "const"(201426 call _allSlotsNumChunks size[201379])
    (201430 'end of statement')
    if(201861 call _cond_test(201433 call == numChunks[201427] 1))
    {
      {
        unknown _indexOfInterest[201446] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[201447] "expr temp" "temp"
        (201456 'move' _iterator[201447](201454 call _getIterator(201463 call chpl_direct_counted_range_iter 0 size[201379])))
        Defer
        {
          {
            (201479 call _freeIterator _iterator[201447])
          }
        }
        { scopeless type
          (201468 'move' _indexOfInterest[201446](201465 call iteratorIndex _iterator[201447]))
        }
        ForLoop[201448]
        {
          unknown slot[201472] "index var" "insert auto destroy"
          (201474 'move' slot[201472] _indexOfInterest[201446])
          {
            (201443 yield slot[201472])
          }
          label _continueLabel[201451]
          _indexOfInterest[201446]
          _iterator[201447]
        }
        label _breakLabel[201452]
      }
    }
    {
      {
        unknown tmpIter[201619] "expr temp" "maybe ref" "no copy" "temp"
        (201622 'move' tmpIter[201619](201492 call #(201489 call chpl_build_low_bounded_range 0) numChunks[201427]))
        unknown isRngDomArr[201841] "maybe param" "temp"
        (201856 'move' isRngDomArr[201841](201854 call ||(201843 call isBoundedRange tmpIter[201619])(201852 call ||(201846 call isDomain tmpIter[201619])(201849 call isArray tmpIter[201619]))))
        if isRngDomArr[201841]
        {
          const _coforallCount[201708] "const" "end count" "temp"
          (201777 'move' _coforallCount[201708](201774 call _endCountAlloc 1))
          unknown numTasks[201709] "temp"
          (201761 'move' numTasks[201709](201757 call . tmpIter[201619] c"size"))
          (201752 call _upEndCount _coforallCount[201708] 1 numTasks[201709])
          (201749 call chpl_resetTaskSpawn numTasks[201709])
          unknown _indexOfInterest[201716] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[201717] "expr temp" "temp"
          (201726 'move' _iterator[201717](201724 call _getIterator tmpIter[201619]))
          Defer
          {
            {
              (201742 call _freeIterator _iterator[201717])
            }
          }
          { scopeless type
            (201731 'move' _indexOfInterest[201716](201728 call iteratorIndex _iterator[201717]))
          }
          ForLoop[201718]
          {
            unknown chunk[201735] "coforall index var" "index var" "insert auto destroy"
            (201737 'move' chunk[201735] _indexOfInterest[201716])
            {
              {
                const tmp[201626] "const" "temp"(201628 call _computeBlock size[201379] numChunks[201427] chunk[201735](201633 call - size[201379] 1))
                (201638 call _check_tuple_var_decl tmp[201626] 2)
                const lo[201641] "const"(201643 call tmp[201626] 0)
                const hi[201646] "const"(201648 call tmp[201626] 1)
                (201651 'end of statement')
                if(201653 call _cond_test debugAssocDataPar[156314])
                {
                  (201658 call writeln "*** chunk: " chunk[201735] " owns "(201663 call chpl_build_bounded_range lo[201641] hi[201646]))
                }
                {
                  unknown _indexOfInterest[201668] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[201670] "expr temp" "temp"
                  (201672 'move' _iterator[201670](201675 call _getIterator(201677 call chpl_direct_range_iter lo[201641] hi[201646] 1)))
                  Defer
                  {
                    {
                      (201683 call _freeIterator _iterator[201670])
                    }
                  }
                  { scopeless type
                    (201687 'move' _indexOfInterest[201668](201690 call iteratorIndex _iterator[201670]))
                  }
                  ForLoop[201692]
                  {
                    unknown slot[201695] "index var" "insert auto destroy"
                    (201697 'move' slot[201695] _indexOfInterest[201668])
                    {
                      (201701 yield slot[201695])
                    }
                    label _continueLabel[201703]
                    _indexOfInterest[201668]
                    _iterator[201670]
                  }
                  label _breakLabel[201705]
                }
              }
              (201711 call _downEndCount _coforallCount[201708] nil[44])
              (201710 'coforall loop')
            }
            label _continueLabel[201721]
            _indexOfInterest[201716]
            _iterator[201717]
          }
          label _breakLabel[201722]
          Defer
          {
            {
              (201764 call _endCountFree _coforallCount[201708])
            }
          }
          (201769 call _waitEndCount _coforallCount[201708] 1 numTasks[201709])
        }
        {
          const _coforallCount[201781] "const" "end count" "temp"
          (201838 'move' _coforallCount[201781](201835 call _endCountAlloc 1))
          unknown _indexOfInterest[201789] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[201790] "expr temp" "temp"
          (201799 'move' _iterator[201790](201797 call _getIterator tmpIter[201619]))
          Defer
          {
            {
              (201815 call _freeIterator _iterator[201790])
            }
          }
          { scopeless type
            (201804 'move' _indexOfInterest[201789](201801 call iteratorIndex _iterator[201790]))
          }
          ForLoop[201791]
          {
            unknown chunk[201808] "coforall index var" "index var" "insert auto destroy"
            (201810 'move' chunk[201808] _indexOfInterest[201789])
            (201822 call _upEndCount _coforallCount[201781] 1)
            {
              {
                const tmp[201509] "const" "temp"(201508 call _computeBlock size[201379] numChunks[201427] chunk[201808](201506 call - size[201379] 1))
                (201516 call _check_tuple_var_decl tmp[201509] 2)
                const lo[201494] "const"(201510 call tmp[201509] 0)
                const hi[201496] "const"(201513 call tmp[201509] 1)
                (201521 'end of statement')
                if(201567 call _cond_test debugAssocDataPar[156314])
                {
                  (201565 call writeln "*** chunk: " chunk[201808] " owns "(201563 call chpl_build_bounded_range lo[201494] hi[201496]))
                }
                {
                  unknown _indexOfInterest[201581] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[201582] "expr temp" "temp"
                  (201591 'move' _iterator[201582](201589 call _getIterator(201596 call chpl_direct_range_iter lo[201494] hi[201496] 1)))
                  Defer
                  {
                    {
                      (201612 call _freeIterator _iterator[201582])
                    }
                  }
                  { scopeless type
                    (201601 'move' _indexOfInterest[201581](201598 call iteratorIndex _iterator[201582]))
                  }
                  ForLoop[201583]
                  {
                    unknown slot[201605] "index var" "insert auto destroy"
                    (201607 'move' slot[201605] _indexOfInterest[201581])
                    {
                      (201578 yield slot[201605])
                    }
                    label _continueLabel[201586]
                    _indexOfInterest[201581]
                    _iterator[201582]
                  }
                  label _breakLabel[201587]
                }
              }
              (201784 call _downEndCount _coforallCount[201781] nil[44])
              (201783 'coforall loop')
            }
            label _continueLabel[201794]
            _indexOfInterest[201789]
            _iterator[201790]
          }
          label _breakLabel[201795]
          Defer
          {
            {
              (201826 call _endCountFree _coforallCount[201781])
            }
          }
          (201831 call _waitEndCount _coforallCount[201781] 1)
        }
      }
    }
  }
  where {
    (201393 call == tag[201385] standalone[451])
  }
  function _allSlots[201874](arg size[201871] :
  int(64)[13], param arg tag[201877] :
  iterKind[453]) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(201909 call _cond_test debugDefaultAssoc[156309])
    {
      (201907 call writeln "*** In associative domain _allSlots leader iterator:")
    }
    const numChunks[201919] "const"(201918 call _allSlotsNumChunks size[201871])
    (201922 'end of statement')
    if(202222 call _cond_test(201925 call == numChunks[201919] 1))
    {
      (201933 yield(201931 call #(201928 call chpl_build_low_bounded_range 0) size[201871]))
    }
    {
      {
        unknown tmpIter[202013] "expr temp" "maybe ref" "no copy" "temp"
        (202016 'move' tmpIter[202013](201941 call #(201938 call chpl_build_low_bounded_range 0) numChunks[201919]))
        unknown isRngDomArr[202202] "maybe param" "temp"
        (202217 'move' isRngDomArr[202202](202215 call ||(202204 call isBoundedRange tmpIter[202013])(202213 call ||(202207 call isDomain tmpIter[202013])(202210 call isArray tmpIter[202013]))))
        if isRngDomArr[202202]
        {
          const _coforallCount[202069] "const" "end count" "temp"
          (202138 'move' _coforallCount[202069](202135 call _endCountAlloc 1))
          unknown numTasks[202070] "temp"
          (202122 'move' numTasks[202070](202118 call . tmpIter[202013] c"size"))
          (202113 call _upEndCount _coforallCount[202069] 1 numTasks[202070])
          (202110 call chpl_resetTaskSpawn numTasks[202070])
          unknown _indexOfInterest[202077] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[202078] "expr temp" "temp"
          (202087 'move' _iterator[202078](202085 call _getIterator tmpIter[202013]))
          Defer
          {
            {
              (202103 call _freeIterator _iterator[202078])
            }
          }
          { scopeless type
            (202092 'move' _indexOfInterest[202077](202089 call iteratorIndex _iterator[202078]))
          }
          ForLoop[202079]
          {
            unknown chunk[202096] "coforall index var" "index var" "insert auto destroy"
            (202098 'move' chunk[202096] _indexOfInterest[202077])
            {
              {
                const tmp[202020] "const" "temp"(202022 call _computeBlock size[201871] numChunks[201919] chunk[202096](202027 call - size[201871] 1))
                (202032 call _check_tuple_var_decl tmp[202020] 2)
                const lo[202035] "const"(202037 call tmp[202020] 0)
                const hi[202040] "const"(202042 call tmp[202020] 1)
                (202045 'end of statement')
                if(202047 call _cond_test debugDefaultAssoc[156309])
                {
                  (202052 call writeln "*** DI[" chunk[202096] "]: tuple = "(202057 call _build_tuple(202059 call chpl_build_bounded_range lo[202035] hi[202040])))
                }
                (202063 yield(202065 call chpl_build_bounded_range lo[202035] hi[202040]))
              }
              (202072 call _downEndCount _coforallCount[202069] nil[44])
              (202071 'coforall loop')
            }
            label _continueLabel[202082]
            _indexOfInterest[202077]
            _iterator[202078]
          }
          label _breakLabel[202083]
          Defer
          {
            {
              (202125 call _endCountFree _coforallCount[202069])
            }
          }
          (202130 call _waitEndCount _coforallCount[202069] 1 numTasks[202070])
        }
        {
          const _coforallCount[202142] "const" "end count" "temp"
          (202199 'move' _coforallCount[202142](202196 call _endCountAlloc 1))
          unknown _indexOfInterest[202150] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[202151] "expr temp" "temp"
          (202160 'move' _iterator[202151](202158 call _getIterator tmpIter[202013]))
          Defer
          {
            {
              (202176 call _freeIterator _iterator[202151])
            }
          }
          { scopeless type
            (202165 'move' _indexOfInterest[202150](202162 call iteratorIndex _iterator[202151]))
          }
          ForLoop[202152]
          {
            unknown chunk[202169] "coforall index var" "index var" "insert auto destroy"
            (202171 'move' chunk[202169] _indexOfInterest[202150])
            (202183 call _upEndCount _coforallCount[202142] 1)
            {
              {
                const tmp[201958] "const" "temp"(201957 call _computeBlock size[201871] numChunks[201919] chunk[202169](201955 call - size[201871] 1))
                (201965 call _check_tuple_var_decl tmp[201958] 2)
                const lo[201943] "const"(201959 call tmp[201958] 0)
                const hi[201945] "const"(201962 call tmp[201958] 1)
                (201970 'end of statement')
                if(202002 call _cond_test debugDefaultAssoc[156309])
                {
                  (202000 call writeln "*** DI[" chunk[202169] "]: tuple = "(201998 call _build_tuple(201996 call chpl_build_bounded_range lo[201943] hi[201945])))
                }
                (202011 yield(202009 call chpl_build_bounded_range lo[201943] hi[201945]))
              }
              (202145 call _downEndCount _coforallCount[202142] nil[44])
              (202144 'coforall loop')
            }
            label _continueLabel[202155]
            _indexOfInterest[202150]
            _iterator[202151]
          }
          label _breakLabel[202156]
          Defer
          {
            {
              (202187 call _endCountFree _coforallCount[202142])
            }
          }
          (202192 call _waitEndCount _coforallCount[202142] 1)
        }
      }
    }
  }
  where {
    (201885 call == tag[201877] leader[447])
  }
  function _allSlots[202235](arg size[202232] :
  int(64)[13], arg followThis[202237]:_any[178](?), param arg tag[202240] :
  iterKind[453]) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    unknown tmp[202256] "temp" followThis[202237]
    (202263 call _check_tuple_var_decl tmp[202256] 2)
    unknown chunk[202250](202257 call tmp[202256] 0)
    unknown followThisDom[202252](202260 call tmp[202256] 1)
    (202268 'end of statement')
    if(202310 call _cond_test debugDefaultAssoc[156309])
    {
      (202308 call writeln "In associative domain _allSlots follower iterator: " "Following " chunk[202250])
    }
    {
      unknown _indexOfInterest[202321] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202322] "expr temp" "temp"
      (202331 'move' _iterator[202322](202329 call _getIterator chunk[202250]))
      Defer
      {
        {
          (202347 call _freeIterator _iterator[202322])
        }
      }
      { scopeless type
        (202336 'move' _indexOfInterest[202321](202333 call iteratorIndex _iterator[202322]))
      }
      ForLoop[202323]
      {
        unknown slot[202340] "index var" "insert auto destroy"
        (202342 'move' slot[202340] _indexOfInterest[202321])
        {
          (202318 yield slot[202340])
        }
        label _continueLabel[202326]
        _indexOfInterest[202321]
        _iterator[202322]
      }
      label _breakLabel[202327]
    }
  }
  where {
    (202248 call == tag[202240] follower[449])
  }
  function chpl__rehashHelpers[202396].startRehash[202364](arg _mt[202400]:_MT[238], arg this[202398]:chpl__rehashHelpers[202396], arg newSize[202361] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function chpl__rehashHelpers[202396].moveElementDuringRehash[202375](arg _mt[202404]:_MT[238], arg this[202402]:chpl__rehashHelpers[202396], arg oldSlot[202372] :
  int(64)[13], arg newSlot[202378] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function chpl__rehashHelpers[202396].finishRehash[202390](arg _mt[202408]:_MT[238], arg this[202406]:chpl__rehashHelpers[202396], arg oldSize[202387] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  type chpl__rehashHelpers[202396] val super[355727]:object[22] "super class"
  type borrowed chpl__rehashHelpers?[415541]
  type chpl__rehashHelpers?[415538](?)
  type chpl__rehashHelpers[392953](?)
  function chpl__hashtable[204564](?).init[202467](arg _mt[204568]:_MT[238], arg this[204566]:chpl__hashtable[204564](?), arg keyType[202465]:_any[178](?), arg valType[202469]:_any[178](?), in arg rehashHelpers[202476] :
  (202473 call _owned[30](?) borrowed chpl__rehashHelpers?[415541]) =
  nil[44]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (202487 call =(202483 call . this[204566] c"keyType") keyType[202465])
    (202496 call =(202492 call . this[204566] c"valType") valType[202469])
    (202506 call =(202502 call . this[204566] c"tableNumFullSlots") 0)
    (202516 call =(202512 call . this[204566] c"tableNumDeletedSlots") 0)
    (202526 call =(202522 call . this[204566] c"tableSizeNum") 0)
    (202537 call =(202530 call . this[204566] c"tableSize")(202536 call(392961 call chpl__primes[200513])(392965 call . this[204566] c"tableSizeNum")))
    (202545 call =(202541 call . this[204566] c"rehashHelpers") rehashHelpers[202476])
    (202553 call =(202549 call . this[204566] c"postponeResize") 0)
    (202561 call(202557 call . this[204566] c"complete"))
    (202574 call =(202564 call . this[204566] c"table")(202573 call(392972 call . this[204566] c"allocateTable")(202569 call . this[204566] c"tableSize")))
  }
  function chpl__hashtable[204564](?).deinit[202581](arg _mt[204572]:_MT[238], arg this[204570]:chpl__hashtable[204564](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(202705 call _cond_test(202591 call ||(202586 call _typeNeedsDeinit(392977 call . this[204570] c"keyType"))(202590 call _typeNeedsDeinit(392982 call . this[204570] c"valType"))))
    {
      if(202700 call _cond_test(202601 call &&(202596 call _deinitElementsIsParallel(392987 call . this[204570] c"keyType"))(202600 call _deinitElementsIsParallel(392992 call . this[204570] c"valType"))))
      {
        Forall {
          induction variables:
            
            unknown slot[202632] "index var" "insert auto destroy"
          iterated expressions:
            (202607 call _allSlots(392997 call . this[204570] c"tableSize"))
          shadow variables:
          other variables
            forall body
          {
            unknown aSlot[202612] "ref var"(202611 call(393002 call . this[204570] c"table") slot[202632])
            (202615 'end of statement')
            if(202627 call _cond_test(202620 call _isSlotFull aSlot[202612]))
            {
              (202624 call _deinitSlot aSlot[202612])
            }
          }
        }
      }
      {
        {
          unknown _indexOfInterest[202665] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[202666] "expr temp" "temp"
          (202675 'move' _iterator[202666](202673 call _getIterator(202641 call _allSlots(393010 call . this[204570] c"tableSize"))))
          Defer
          {
            {
              (202692 call _freeIterator _iterator[202666])
            }
          }
          { scopeless type
            (202681 'move' _indexOfInterest[202665](202678 call iteratorIndex _iterator[202666]))
          }
          ForLoop[202667]
          {
            unknown slot[202685] "index var" "insert auto destroy"
            (202687 'move' slot[202685] _indexOfInterest[202665])
            {
              unknown aSlot[202646] "ref var"(202645 call(393015 call . this[204570] c"table") slot[202685])
              (202649 'end of statement')
              if(202661 call _cond_test(202654 call _isSlotFull aSlot[202646]))
              {
                (202658 call _deinitSlot aSlot[202646])
              }
            }
            label _continueLabel[202670]
            _indexOfInterest[202665]
            _iterator[202666]
          }
          label _breakLabel[202671]
        }
      }
    }
    (202714 call _freeData(393023 call . this[204570] c"table")(393028 call . this[204570] c"tableSize"))
  }
  function chpl__hashtable[204564](?).isSlotFull[202724](arg _mt[204576]:_MT[238], arg this[204574]:chpl__hashtable[204564](?), arg slot[202721] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (202740 return(202738 call ==(202731 call .(202730 call(393033 call . this[204574] c"table") slot[202721]) c"status") full[200457]))
  }
  { scopeless type
    bool[10]
  }
  function chpl__hashtable[204564](?).allSlots[202748](arg _mt[204580]:_MT[238], arg this[204578]:chpl__hashtable[204564](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[202759] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202760] "expr temp" "temp"
      (202769 'move' _iterator[202760](202767 call _getIterator(202754 call _allSlots(393039 call . this[204578] c"tableSize"))))
      Defer
      {
        {
          (202786 call _freeIterator _iterator[202760])
        }
      }
      { scopeless type
        (202775 'move' _indexOfInterest[202759](202772 call iteratorIndex _iterator[202760]))
      }
      ForLoop[202761]
      {
        unknown slot[202779] "index var" "insert auto destroy"
        (202781 'move' slot[202779] _indexOfInterest[202759])
        {
          (202756 yield slot[202779])
        }
        label _continueLabel[202764]
        _indexOfInterest[202759]
        _iterator[202760]
      }
      label _breakLabel[202765]
    }
  }
  function chpl__hashtable[204564](?).allSlots[202802](arg _mt[204584]:_MT[238], arg this[204582]:chpl__hashtable[204564](?), param arg tag[202799] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[202822] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202823] "expr temp" "temp"
      (202832 'move' _iterator[202823](202830 call _getIterator(202817 call _allSlots(393047 call . this[204582] c"tableSize")(tag = tag[202799]))))
      Defer
      {
        {
          (202849 call _freeIterator _iterator[202823])
        }
      }
      { scopeless type
        (202838 'move' _indexOfInterest[202822](202835 call iteratorIndex _iterator[202823]))
      }
      ForLoop[202824]
      {
        unknown slot[202842] "index var" "insert auto destroy"
        (202844 'move' slot[202842] _indexOfInterest[202822])
        {
          (202819 yield slot[202842])
        }
        label _continueLabel[202827]
        _indexOfInterest[202822]
        _iterator[202823]
      }
      label _breakLabel[202828]
    }
  }
  where {
    (202809 call == tag[202799] standalone[451])
  }
  function chpl__hashtable[204564](?).allSlots[202866](arg _mt[204588]:_MT[238], arg this[204586]:chpl__hashtable[204564](?), param arg tag[202863] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[202886] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202887] "expr temp" "temp"
      (202896 'move' _iterator[202887](202894 call _getIterator(202881 call _allSlots(393056 call . this[204586] c"tableSize")(tag = tag[202863]))))
      Defer
      {
        {
          (202913 call _freeIterator _iterator[202887])
        }
      }
      { scopeless type
        (202902 'move' _indexOfInterest[202886](202899 call iteratorIndex _iterator[202887]))
      }
      ForLoop[202888]
      {
        unknown followThis[202906] "index var" "insert auto destroy"
        (202908 'move' followThis[202906] _indexOfInterest[202886])
        {
          (202883 yield followThis[202906])
        }
        label _continueLabel[202891]
        _indexOfInterest[202886]
        _iterator[202887]
      }
      label _breakLabel[202892]
    }
  }
  where {
    (202873 call == tag[202863] leader[447])
  }
  function chpl__hashtable[204564](?).allSlots[202928](arg _mt[204592]:_MT[238], arg this[204590]:chpl__hashtable[204564](?), arg followThis[202926]:_any[178](?), param arg tag[202931] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[202953] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202954] "expr temp" "temp"
      (202963 'move' _iterator[202954](202961 call _getIterator(202948 call _allSlots(393065 call . this[204590] c"tableSize") followThis[202926](tag = tag[202931]))))
      Defer
      {
        {
          (202980 call _freeIterator _iterator[202954])
        }
      }
      { scopeless type
        (202969 'move' _indexOfInterest[202953](202966 call iteratorIndex _iterator[202954]))
      }
      ForLoop[202955]
      {
        unknown i[202973] "index var" "insert auto destroy"
        (202975 'move' i[202973] _indexOfInterest[202953])
        {
          (202950 yield i[202973])
        }
        label _continueLabel[202958]
        _indexOfInterest[202953]
        _iterator[202954]
      }
      label _breakLabel[202959]
    }
  }
  where {
    (202939 call == tag[202931] follower[449])
  }
  function chpl__hashtable[204564](?)._findSlot[202997](arg _mt[204596]:_MT[238], arg this[204594]:chpl__hashtable[204564](?), arg key[202994] :
  (393073 call . this[204594] c"keyType")) : _unknown[51] "method" "primary method"
  {
    unknown firstOpen[203007](203005 call - 1)
    (203010 'end of statement')
    {
      unknown _indexOfInterest[203116] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[203117] "expr temp" "temp"
      (203126 'move' _iterator[203117](203124 call _getIterator(203016 call(393079 call . this[204594] c"_lookForSlots") key[202994])))
      Defer
      {
        {
          (203143 call _freeIterator _iterator[203117])
        }
      }
      { scopeless type
        (203132 'move' _indexOfInterest[203116](203129 call iteratorIndex _iterator[203117]))
      }
      ForLoop[203118]
      {
        unknown slotNum[203136] "index var" "insert auto destroy"
        (203138 'move' slotNum[203136] _indexOfInterest[203116])
        {
          const slotStatus[203024] "const"(203021 call .(203020 call(393085 call . this[204594] c"table") slotNum[203136]) c"status")
          (203027 'end of statement')
          if(203111 call _cond_test(203034 call == slotStatus[203024] empty[200455]))
          {
            if(203047 call _cond_test(203040 call == firstOpen[203007](203038 call - 1)))
            {
              (203044 call = firstOpen[203007] slotNum[203136])
            }
            (203058 return(203056 call _build_tuple 0 firstOpen[203007]))
          }
          {
            if(203107 call _cond_test(203065 call == slotStatus[203024] full[200457]))
            {
              if(203085 call _cond_test(203075 call ==(203071 call .(203070 call(393097 call . this[204594] c"table") slotNum[203136]) c"key") key[202994]))
              {
                (203082 return(203080 call _build_tuple 1 slotNum[203136]))
              }
            }
            {
              if(203101 call _cond_test(203094 call == firstOpen[203007](203092 call - 1)))
              {
                (203098 call = firstOpen[203007] slotNum[203136])
              }
            }
          }
        }
        label _continueLabel[203121]
        _indexOfInterest[203116]
        _iterator[203117]
      }
      label _breakLabel[203122]
    }
    (203157 return(203155 call _build_tuple 0(203152 call - 1)))
  }
  { scopeless type
    (203002 call _build_tuple bool[10] int(64)[13])
  }
  function chpl__hashtable[204564](?)._lookForSlots[203168](arg _mt[204600]:_MT[238], arg this[204598]:chpl__hashtable[204564](?), arg key[203165] :
  (393108 call . this[204598] c"keyType"), arg numSlots[203171] =
  (393113 call . this[204598] c"tableSize")) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    const baseSlot[203181] "const"(203179 call _cast uint(64)[115](203177 call chpl__defaultHashWrapper key[203165]))
    (203184 'end of statement')
    if(203192 call _cond_test(203188 call == numSlots[203171] 0))
    {
      (203190 return _void[55])
    }
    {
      unknown _indexOfInterest[203237] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[203238] "expr temp" "temp"
      (203247 'move' _iterator[203238](203245 call _getIterator(203255 call chpl_direct_range_iter 0(203252 call / numSlots[203171] 2) 1)))
      Defer
      {
        {
          (203271 call _freeIterator _iterator[203238])
        }
      }
      { scopeless type
        (203260 'move' _indexOfInterest[203237](203257 call iteratorIndex _iterator[203238]))
      }
      ForLoop[203239]
      {
        unknown probe[203264] "index var" "insert auto destroy"
        (203266 'move' probe[203264] _indexOfInterest[203237])
        {
          unknown uprobe[203209](203207 call _cast uint(64)[115] probe[203264])
          (203212 'end of statement')
          unknown n[203218](203216 call _cast uint(64)[115] numSlots[203171])
          (203221 'end of statement')
          (203235 yield(203233 call _cast int(64)[13](203230 call %(203227 call + baseSlot[203181](203225 call ** uprobe[203209] 2)) n[203218])))
        }
        label _continueLabel[203242]
        _indexOfInterest[203237]
        _iterator[203238]
      }
      label _breakLabel[203243]
    }
  }
  function chpl__hashtable[204564](?).findAvailableSlot[203286](arg _mt[204604]:_MT[238], arg this[204602]:chpl__hashtable[204564](?), arg key[203283] :
  (393126 call . this[204602] c"keyType")) : _unknown[51] "method" "primary method"
  {
    unknown slotNum[203296](203294 call - 1)
    (203299 'end of statement')
    unknown foundSlot[203302] 0
    (203305 'end of statement')
    if(203326 call _cond_test(203317 call >(203314 call *(203311 call +(203308 call +(393131 call . this[204602] c"tableNumFullSlots")(393136 call . this[204602] c"tableNumDeletedSlots")) 1) 2)(393141 call . this[204602] c"tableSize")))
    {
      (203323 call(393147 call . this[204602] c"resize")(grow = 1))
    }
    (203339 call =(203333 call _build_tuple foundSlot[203302] slotNum[203296])(203338 call(393155 call . this[204602] c"_findSlot") key[203283]))
    if(203455 call _cond_test(203344 call >= slotNum[203296] 0))
    {
      (203351 return(203349 call _build_tuple foundSlot[203302] slotNum[203296]))
    }
    {
      (203358 call(393165 call . this[204602] c"rehash")(393170 call . this[204602] c"tableSizeNum")(393175 call . this[204602] c"tableSize"))
      (203370 call =(203364 call _build_tuple foundSlot[203302] slotNum[203296])(203369 call(393181 call . this[204602] c"_findSlot") key[203283]))
      if(203444 call _cond_test(203375 call < slotNum[203296] 0))
      {
        (203432 call halt "couldn't add key -- "(393188 call . this[204602] c"tableNumFullSlots") " / "(393193 call . this[204602] c"tableSize") " taken")
        (203442 return(203440 call _build_tuple 0(203437 call - 1)))
      }
      (203453 return(203451 call _build_tuple foundSlot[203302] slotNum[203296]))
    }
  }
  { scopeless type
    (203291 call _build_tuple bool[10] int(64)[13])
  }
  function chpl__hashtable[204564](?).fillSlot[203472](arg _mt[204608]:_MT[238], arg this[204606]:chpl__hashtable[204564](?), ref arg tableEntry[203469] :
  (203468 call chpl_TableEntry[200504](?)(393201 call . this[204606] c"keyType")(393206 call . this[204606] c"valType")), in arg key[203475] :
  (393211 call . this[204606] c"keyType"), in arg val[203479] :
  (393216 call . this[204606] c"valType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(203526 call _cond_test(203490 call ==(203483 call . tableEntry[203469] c"status") full[200457]))
    {
      (203495 call _deinitSlot tableEntry[203469])
    }
    {
      if(203516 call _cond_test(203508 call ==(203499 call . tableEntry[203469] c"status") deleted[200459]))
      {
        (203512 call -=(393222 call . this[204606] c"tableNumDeletedSlots") 1)
      }
      (203523 call +=(393227 call . this[204606] c"tableNumFullSlots") 1)
    }
    (203539 call =(203532 call . tableEntry[203469] c"status") full[200457])
    (203549 call _moveInit(203544 call . tableEntry[203469] c"key") key[203475])
    (203558 call _moveInit(203553 call . tableEntry[203469] c"val") val[203479])
  }
  function chpl__hashtable[204564](?).fillSlot[203568](arg _mt[204612]:_MT[238], arg this[204610]:chpl__hashtable[204564](?), arg slotNum[203565] :
  int(64)[13], in arg key[203571] :
  (393234 call . this[204610] c"keyType"), in arg val[203575] :
  (393239 call . this[204610] c"valType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tableEntry[203582] "ref var"(203581 call(393244 call . this[204610] c"table") slotNum[203565])
    (203585 'end of statement')
    (203592 call(393249 call . this[204610] c"fillSlot") tableEntry[203582] key[203571] val[203575])
  }
  function chpl__hashtable[204564](?).findFullSlot[203602](arg _mt[204616]:_MT[238], arg this[204614]:chpl__hashtable[204564](?), arg key[203599] :
  (393257 call . this[204614] c"keyType")) : _unknown[51] "method" "primary method"
  {
    unknown slotNum[203612](203610 call - 1)
    (203615 'end of statement')
    unknown foundSlot[203618] 0
    (203621 'end of statement')
    (203631 call =(203625 call _build_tuple foundSlot[203618] slotNum[203612])(203630 call(393263 call . this[204614] c"_findSlot") key[203599]))
    (203639 return(203637 call _build_tuple foundSlot[203618] slotNum[203612]))
  }
  { scopeless type
    (203607 call _build_tuple bool[10] int(64)[13])
  }
  function chpl__hashtable[204564](?).clearSlot[203654](arg _mt[204620]:_MT[238], arg this[204618]:chpl__hashtable[204564](?), ref arg tableEntry[203651] :
  (203650 call chpl_TableEntry[200504](?)(393272 call . this[204618] c"keyType")(393277 call . this[204618] c"valType")), out arg key[203657] :
  (393282 call . this[204618] c"keyType"), out arg val[203661] :
  (393287 call . this[204618] c"valType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (203672 call = key[203657](203671 call _moveToReturn(203667 call . tableEntry[203651] c"key")))
    (203684 call = val[203661](203683 call _moveToReturn(203679 call . tableEntry[203651] c"val")))
    (203695 call =(203688 call . tableEntry[203651] c"status") deleted[200459])
    (203700 call -=(393294 call . this[204618] c"tableNumFullSlots") 1)
    (203705 call +=(393299 call . this[204618] c"tableNumDeletedSlots") 1)
  }
  function chpl__hashtable[204564](?).clearSlot[203716](arg _mt[204624]:_MT[238], arg this[204622]:chpl__hashtable[204564](?), arg slotNum[203713] :
  int(64)[13], out arg key[203719] :
  (393304 call . this[204622] c"keyType"), out arg val[203723] :
  (393309 call . this[204622] c"valType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tableEntry[203730] "ref var"(203729 call(393314 call . this[204622] c"table") slotNum[203713])
    (203733 'end of statement')
    (203740 call(393319 call . this[204622] c"clearSlot") tableEntry[203730] key[203719] val[203723])
  }
  function chpl__hashtable[204564](?).maybeShrinkAfterRemove[203746](arg _mt[204628]:_MT[238], arg this[204626]:chpl__hashtable[204564](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(203768 call _cond_test(203759 call &&(203753 call <(203750 call *(393327 call . this[204626] c"tableNumFullSlots") 8)(393332 call . this[204626] c"tableSize"))(203757 call >(393337 call . this[204626] c"tableSizeNum") 0)))
    {
      (203765 call(393341 call . this[204626] c"resize")(grow = 0))
    }
  }
  function chpl__hashtable[204564](?)._findPrimeSizeIndex[203781](arg _mt[204632]:_MT[238], arg this[204630]:chpl__hashtable[204564](?), arg numKeys[203778] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown threshold[203790](203788 call *(203785 call + numKeys[203778] 1) 2)
    (203793 'end of statement')
    unknown prime[203796] 0
    (203799 'end of statement')
    unknown primeLoc[203801] 0
    (203804 'end of statement')
    {
      unknown _indexOfInterest[203844] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[203845] "expr temp" "temp"
      (203854 'move' _iterator[203845](203852 call _getIterator(203864 call chpl_direct_counted_range_iter 0(203860 call .(362889 call chpl__primes[200513]) c"size"))))
      Defer
      {
        {
          (203880 call _freeIterator _iterator[203845])
        }
      }
      { scopeless type
        (203869 'move' _indexOfInterest[203844](203866 call iteratorIndex _iterator[203845]))
      }
      ForLoop[203846]
      {
        unknown i[203873] "index var" "insert auto destroy"
        (203875 'move' i[203873] _indexOfInterest[203844])
        {
          if(203839 call _cond_test(203820 call >(203818 call(393345 call chpl__primes[200513]) i[203873]) threshold[203790]))
          {
            (203827 call = prime[203796](203826 call(393350 call chpl__primes[200513]) i[203873]))
            (203833 call = primeLoc[203801] i[203873])
            break _breakLabel[203850] _breakLabel[203850]
          }
        }
        label _continueLabel[203849]
        _indexOfInterest[203844]
        _iterator[203845]
      }
      label _breakLabel[203850]
    }
    if(203915 call _cond_test(203889 call == prime[203796] 0))
    {
      (203912 call halt "Requested capacity (" numKeys[203778] ") exceeds maximum size")
    }
    (203920 return primeLoc[203801])
  }
  function chpl__hashtable[204564](?).allocateData[203930](arg _mt[204636]:_MT[238], arg this[204634]:chpl__hashtable[204564](?), arg size[203927] :
  int(64)[13], arg tableEltType[203932]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(203950 call _cond_test(203936 call == size[203927] 0))
    {
      (203939 return nil[44])
    }
    {
      (203947 return(203946 call _allocateData size[203927] tableEltType[203932]))
    }
  }
  function chpl__hashtable[204564](?).allocateTable[203963](arg _mt[204640]:_MT[238], arg this[204638]:chpl__hashtable[204564](?), arg size[203960] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    if(203985 call _cond_test(203967 call == size[203960] 0))
    {
      (203970 return nil[44])
    }
    {
      (203982 return(203981 call _allocateData size[203960](203980 call chpl_TableEntry[200504](?)(393366 call . this[204638] c"keyType")(393371 call . this[204638] c"valType"))))
    }
  }
  function chpl__hashtable[204564](?).rehash[203998](arg _mt[204644]:_MT[238], arg this[204642]:chpl__hashtable[204564](?), arg newSizeNum[203995] :
  int(64)[13], arg newSize[204001] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown oldSize[204005](393376 call . this[204642] c"tableSize")
    (204008 'end of statement')
    unknown oldTable[204011](393381 call . this[204642] c"table")
    (204014 'end of statement')
    (204017 call =(393386 call . this[204642] c"tableSizeNum") newSizeNum[203995])
    (204022 call =(393392 call . this[204642] c"tableSize") newSize[204001])
    unknown entries[204026](393398 call . this[204642] c"tableNumFullSlots")
    (204029 'end of statement')
    if(204412 call _cond_test(204032 call > entries[204026] 0))
    {
      if(204060 call _cond_test(204036 call == newSize[204001] 0))
      {
        (204057 call halt "attempt to resize to 0 a table that is not empty")
      }
      (204070 call =(393405 call . this[204642] c"table")(204069 call(393409 call . this[204642] c"allocateTable")(393414 call . this[204642] c"tableSize")))
      if(204089 call _cond_test(204075 call !=(393419 call . this[204642] c"rehashHelpers") nil[44]))
      {
        (204087 call(204082 call .(204078 call postfix!(393424 call . this[204642] c"rehashHelpers")) c"startRehash")(393429 call . this[204642] c"tableSize"))
      }
      (204096 call =(393434 call . this[204642] c"tableNumDeletedSlots") 0)
      {
        unknown _indexOfInterest[204302] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[204303] "expr temp" "temp"
        (204312 'move' _iterator[204303](204310 call _getIterator(204103 call _allSlots oldSize[204005])))
        Defer
        {
          {
            (204329 call _freeIterator _iterator[204303])
          }
        }
        { scopeless type
          (204318 'move' _indexOfInterest[204302](204315 call iteratorIndex _iterator[204303]))
        }
        ForLoop[204304]
        {
          unknown oldslot[204322] "index var" "insert auto destroy"
          (204324 'move' oldslot[204322] _indexOfInterest[204302])
          {
            if(204297 call _cond_test(204115 call ==(204108 call .(204107 call oldTable[204011] oldslot[204322]) c"status") full[200457]))
            {
              unknown oldEntry[204121] "ref var"(204120 call oldTable[204011] oldslot[204322])
              (204124 'end of statement')
              unknown tmp[204138] "temp"(204137 call(393443 call . this[204642] c"_findSlot")(204133 call . oldEntry[204121] c"key"))
              (204145 call _check_tuple_var_decl tmp[204138] 2)
              unknown foundSlot[204126](204139 call tmp[204138] 0)
              unknown newslot[204128](204142 call tmp[204138] 1)
              (204150 'end of statement')
              if(204174 call _cond_test foundSlot[204126])
              {
                (204171 call halt "duplicate element found while resizing for key")
              }
              if(204222 call _cond_test(204180 call < newslot[204128] 0))
              {
                (204219 call halt "couldn't add element during resize - got slot " newslot[204128] " for key")
              }
              unknown dstSlot[204230] "ref var"(204229 call(393451 call . this[204642] c"table") newslot[204128])
              (204233 'end of statement')
              (204242 call =(204235 call . dstSlot[204230] c"status") full[200457])
              (204258 call _moveInit(204247 call . dstSlot[204230] c"key")(204257 call _moveToReturn(204253 call . oldEntry[204121] c"key")))
              (204273 call _moveInit(204262 call . dstSlot[204230] c"val")(204272 call _moveToReturn(204268 call . oldEntry[204121] c"val")))
              if(204292 call _cond_test(204277 call !=(393457 call . this[204642] c"rehashHelpers") nil[44]))
              {
                (204290 call(204284 call .(204280 call postfix!(393462 call . this[204642] c"rehashHelpers")) c"moveElementDuringRehash") oldslot[204322] newslot[204128])
              }
            }
          }
          label _continueLabel[204307]
          _indexOfInterest[204302]
          _iterator[204303]
        }
        label _breakLabel[204308]
      }
      if(204352 call _cond_test(204338 call !=(393469 call . this[204642] c"rehashHelpers") nil[44]))
      {
        (204350 call(204345 call .(204341 call postfix!(393474 call . this[204642] c"rehashHelpers")) c"finishRehash") oldSize[204005])
      }
      (204361 call _freeData oldTable[204011] oldSize[204005])
    }
    {
      if(204388 call _cond_test(204365 call !=(393482 call . this[204642] c"rehashHelpers") nil[44]))
      {
        (204375 call(204370 call .(204368 call postfix!(393487 call . this[204642] c"rehashHelpers")) c"startRehash")(393492 call . this[204642] c"tableSize"))
        (204386 call(204381 call .(204379 call postfix!(393497 call . this[204642] c"rehashHelpers")) c"finishRehash") oldSize[204005])
      }
      (204397 call _freeData oldTable[204011] oldSize[204005])
      (204404 call =(393505 call . this[204642] c"table")(204403 call(393509 call . this[204642] c"allocateTable")(393514 call . this[204642] c"tableSize")))
      (204409 call =(393519 call . this[204642] c"tableNumDeletedSlots") 0)
    }
  }
  function chpl__hashtable[204564](?).requestCapacity[204424](arg _mt[204648]:_MT[238], arg this[204646]:chpl__hashtable[204564](?), arg numKeys[204421] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(204453 call _cond_test(204428 call <(393524 call . this[204646] c"tableNumFullSlots") numKeys[204421]))
    {
      unknown primeLoc[204434](204433 call(393531 call . this[204646] c"_findPrimeSizeIndex") numKeys[204421])
      (204437 'end of statement')
      unknown prime[204443](204442 call(393535 call chpl__primes[200513]) primeLoc[204434])
      (204446 'end of statement')
      (204451 call(393539 call . this[204646] c"rehash") primeLoc[204434] prime[204443])
    }
  }
  function chpl__hashtable[204564](?).resize[204466](arg _mt[204652]:_MT[238], arg this[204650]:chpl__hashtable[204564](?), arg grow[204463] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(204471 call _cond_test(393546 call . this[204650] c"postponeResize"))
    {
      (204469 return _void[55])
    }
    unknown newSizeNum[204478](393551 call . this[204650] c"tableSizeNum")
    (204481 'end of statement')
    (204491 call += newSizeNum[204478](204488 IfExpr  grow[204463] then
    { scopeless
      1
    } else
    { scopeless
      (204486 call - 1)
    } ))
    if(204522 call _cond_test(204499 call > newSizeNum[204478](204496 call .(362899 call chpl__primes[200513]) c"size")))
    {
      (204520 call halt "associative array exceeds maximum size")
    }
    unknown newSize[204531](204530 call(393557 call chpl__primes[200513]) newSizeNum[204478])
    (204534 'end of statement')
    if(204551 call _cond_test(204546 call &&(204537 call == grow[204463] 0)(204544 call >(204541 call * 2(393563 call . this[204650] c"tableNumFullSlots")) newSize[204531])))
    {
      (204548 return _void[55])
    }
    (204559 call(393568 call . this[204650] c"rehash") newSizeNum[204478] newSize[204531])
  }
  type chpl__hashtable[204564](?) unknown keyType[202412] "type variable" unknown valType[202415] "type variable" unknown tableNumFullSlots[202419] int(64)[13] unknown tableNumDeletedSlots[202424] int(64)[13] unknown tableSizeNum[202429] int(64)[13] unknown tableSize[202434] int(64)[13] unknown table[202446](202445 call _ddata[11696](?)(202443 call chpl_TableEntry[200504](?) keyType[202412] valType[202415])) unknown rehashHelpers[202454](202452 call _owned[30](?) borrowed chpl__rehashHelpers?[415541]) unknown postponeResize[202459] bool[10]
  function chpl__simpleSet[204962](?).size[204670](arg _mt[204966]:_MT[238], arg this[204964]:chpl__simpleSet[204962](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (204676 return(204673 call .(362903 call . this[204964] c"table") c"tableNumFullSlots"))
  }
  function chpl__simpleSet[204962](?).add[204685](arg _mt[204970]:_MT[238], arg this[204968]:chpl__simpleSet[204962](?), arg elem[204683]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[204699] "temp"(204698 call(204693 call .(362908 call . this[204968] c"table") c"findAvailableSlot") elem[204683])
    (204706 call _check_tuple_var_decl tmp[204699] 2)
    unknown isFullSlot[204687](204700 call tmp[204699] 0)
    unknown idx[204689](204703 call tmp[204699] 1)
    (204711 'end of statement')
    (204718 call assert(204715 call ! isFullSlot[204687]))
    (204728 call(204721 call .(362913 call . this[204968] c"table") c"fillSlot") idx[204689] elem[204683] none[57])
  }
  function chpl__simpleSet[204962](?).remove[204736](arg _mt[204974]:_MT[238], arg this[204972]:chpl__simpleSet[204962](?), arg elem[204734]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[204750] "temp"(204749 call(204744 call .(362918 call . this[204972] c"table") c"findFullSlot") elem[204734])
    (204757 call _check_tuple_var_decl tmp[204750] 2)
    unknown hasFoundSlot[204738](204751 call tmp[204750] 0)
    unknown idx[204740](204754 call tmp[204750] 1)
    (204762 'end of statement')
    if(204792 call _cond_test hasFoundSlot[204738])
    {
      unknown key[204766](393583 call . this[204972] c"eltType")
      unknown val[204770] nothing[7]
      (204773 'end of statement')
      (204783 call(204776 call .(362923 call . this[204972] c"table") c"clearSlot") idx[204740] key[204766] val[204770])
      (204790 call(204786 call .(362928 call . this[204972] c"table") c"maybeShrinkAfterRemove"))
    }
  }
  function chpl__simpleSet[204962](?).these[204800](arg _mt[204978]:_MT[238], arg this[204976]:chpl__simpleSet[204962](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[204833] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[204834] "expr temp" "temp"
      (204843 'move' _iterator[204834](204841 call _getIterator(204808 call(204804 call .(362933 call . this[204976] c"table") c"allSlots"))))
      Defer
      {
        {
          (204860 call _freeIterator _iterator[204834])
        }
      }
      { scopeless type
        (204849 'move' _indexOfInterest[204833](204846 call iteratorIndex _iterator[204834]))
      }
      ForLoop[204835]
      {
        unknown slot[204853] "index var" "insert auto destroy"
        (204855 'move' slot[204853] _indexOfInterest[204833])
        if(204828 call _cond_test(204815 call(204810 call .(362938 call . this[204976] c"table") c"isSlotFull") slot[204853]))
        {
          (204826 yield(204823 call .(204822 call(204817 call .(362943 call . this[204976] c"table") c"table") slot[204853]) c"key"))
        }
        label _continueLabel[204838]
        _indexOfInterest[204833]
        _iterator[204834]
      }
      label _breakLabel[204839]
    }
  }
  function chpl__simpleSet[204962](?).writeThis[204874](arg _mt[204982]:_MT[238], arg this[204980]:chpl__simpleSet[204962](?), arg f[204872]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown count[204877] 1
    (204880 'end of statement')
    (204884 call <~> f[204872] "{")
    {
      unknown _indexOfInterest[204921] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[204922] "expr temp" "temp"
      (204931 'move' _iterator[204922](204929 call _getIterator this[204980]))
      Defer
      {
        {
          (204947 call _freeIterator _iterator[204922])
        }
      }
      { scopeless type
        (204936 'move' _indexOfInterest[204921](204933 call iteratorIndex _iterator[204922]))
      }
      ForLoop[204923]
      {
        unknown e[204940] "index var" "insert auto destroy"
        (204942 'move' e[204940] _indexOfInterest[204921])
        {
          if(204916 call _cond_test(204894 call <= count[204877](204892 call -(393595 call . this[204980] c"size") 1)))
          {
            (204898 call += count[204877] 1)
            (204907 call <~>(204904 call <~> f[204872] e[204940]) ", ")
          }
          {
            (204912 call <~> f[204872] e[204940])
          }
        }
        label _continueLabel[204926]
        _indexOfInterest[204921]
        _iterator[204922]
      }
      label _breakLabel[204927]
    }
    (204956 call <~> f[204872] "}")
  }
  type chpl__simpleSet[204962](?) unknown eltType[204656] "type variable" unknown table[204664](204663 call chpl__hashtable[204564](?) eltType[204656] nothing[7])
  (355294 'used modules list'(200449 'use' ChapelBase[307])(200451 'use' DSIUtil[230909]))
}