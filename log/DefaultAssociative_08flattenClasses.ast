AST dump for DefaultAssociative after pass flattenClasses.
Module use list: DSIUtil ChapelDistribution ChapelRange SysBasic ChapelArray ChapelBase ChapelLocks IO ChapelHashing ChapelHashtable SysError Sort 

{
  unknown debugDefaultAssoc[156265] "config" "param" 0
  (156268 'end of statement')
  unknown debugAssocDataPar[156270] "config" "param" 0
  (156273 'end of statement')
  function DefaultAssociativeDomRehashHelper[156472](?).startRehash[156289](arg _mt[156476]:_MT[238], arg this[156474]:DefaultAssociativeDomRehashHelper[156472](?), arg newSize[156286] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156307] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156308] "expr temp" "temp"
      (156317 'move' _iterator[156308](156315 call _getIterator(156293 call .(360795 call . this[156474] c"dom") c"_arrs")))
      Defer
      {
        {
          (156334 call _freeIterator _iterator[156308])
        }
      }
      { scopeless type
        (156323 'move' _indexOfInterest[156307](156320 call iteratorIndex _iterator[156308]))
      }
      ForLoop[156309]
      {
        unknown arr[156327] "index var" "insert auto destroy"
        (156329 'move' arr[156327] _indexOfInterest[156307])
        {
          (156304 call(156299 call . arr[156327] c"_startRehash") newSize[156286])
        }
        label _continueLabel[156312]
        _indexOfInterest[156307]
        _iterator[156308]
      }
      label _breakLabel[156313]
    }
  }
  function DefaultAssociativeDomRehashHelper[156472](?).moveElementDuringRehash[156350](arg _mt[156480]:_MT[238], arg this[156478]:DefaultAssociativeDomRehashHelper[156472](?), arg oldSlot[156347] :
  int(64)[13], arg newSlot[156353] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156373] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156374] "expr temp" "temp"
      (156383 'move' _iterator[156374](156381 call _getIterator(156358 call .(360801 call . this[156478] c"dom") c"_arrs")))
      Defer
      {
        {
          (156400 call _freeIterator _iterator[156374])
        }
      }
      { scopeless type
        (156389 'move' _indexOfInterest[156373](156386 call iteratorIndex _iterator[156374]))
      }
      ForLoop[156375]
      {
        unknown arr[156393] "index var" "insert auto destroy"
        (156395 'move' arr[156393] _indexOfInterest[156373])
        {
          (156370 call(156364 call . arr[156393] c"_moveElementDuringRehash") oldSlot[156347] newSlot[156353])
        }
        label _continueLabel[156378]
        _indexOfInterest[156373]
        _iterator[156374]
      }
      label _breakLabel[156379]
    }
  }
  function DefaultAssociativeDomRehashHelper[156472](?).finishRehash[156416](arg _mt[156484]:_MT[238], arg this[156482]:DefaultAssociativeDomRehashHelper[156472](?), arg oldSize[156413] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156434] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156435] "expr temp" "temp"
      (156444 'move' _iterator[156435](156442 call _getIterator(156420 call .(360807 call . this[156482] c"dom") c"_arrs")))
      Defer
      {
        {
          (156461 call _freeIterator _iterator[156435])
        }
      }
      { scopeless type
        (156450 'move' _indexOfInterest[156434](156447 call iteratorIndex _iterator[156435]))
      }
      ForLoop[156436]
      {
        unknown arr[156454] "index var" "insert auto destroy"
        (156456 'move' arr[156454] _indexOfInterest[156434])
        {
          (156431 call(156426 call . arr[156454] c"_finishRehash") oldSize[156413])
        }
        label _continueLabel[156439]
        _indexOfInterest[156434]
        _iterator[156435]
      }
      label _breakLabel[156440]
    }
  }
  type DefaultAssociativeDomRehashHelper[156472](?) val super[355686]:chpl__rehashHelpers[202342] "super class" unknown dom[156279] unmanaged DefaultAssociativeDom[415471](?)
  type DefaultAssociativeDomRehashHelper[386693](?)
  function DefaultAssociativeDom[158856](?).lockTable[156533](arg _mt[158860]:_MT[238], arg this[158858]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(156543 call _cond_test(386676 call . this[158858] c"parSafe"))
    {
      (156541 call(156537 call .(360815 call . this[158858] c"tableLock") c"lock"))
    }
  }
  function DefaultAssociativeDom[158856](?).unlockTable[156553](arg _mt[158864]:_MT[238], arg this[158862]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(156563 call _cond_test(386681 call . this[158862] c"parSafe"))
    {
      (156561 call(156557 call .(360820 call . this[158862] c"tableLock") c"unlock"))
    }
  }
  function DefaultAssociativeDom[158856](?).linksDistribution[156573](arg _mt[158868]:_MT[238], arg this[158866]:DefaultAssociativeDom[158856](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    (156576 return 0)
  }
  function DefaultAssociativeDom[158856](?).dsiLinksDistribution[156583](arg _mt[158872]:_MT[238], arg this[158870]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (156586 return 0)
  }
  function DefaultAssociativeDom[158856](?).init[156595](arg _mt[158876]:_MT[238], arg this[158874]:DefaultAssociativeDom[158856](?), arg idxType[156593]:_any[178](?), param arg parSafe[156598] :
  bool[10], arg dist[156603] :
  unmanaged DefaultDist[415444]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(156655 call _cond_test(156610 call !(156609 call chpl__validDefaultAssocDomIdxType idxType[156593])))
    {
      (156653 call compilerError "Default Associative domains with idxType="(156633 call _cast string[26] idxType[156593]) " are not allowed" 2)
    }
    (156666 call =(156662 call . this[158874] c"idxType") idxType[156593])
    (156674 call =(156670 call . this[158874] c"parSafe") parSafe[156598])
    (156682 call =(156678 call . this[158874] c"dist") dist[156603])
    (156697 call =(156688 call . this[158874] c"table")(156691 'new'(156696 call chpl__hashtable[204509](?) idxType[156593] nothing[7])))
    (156705 call(156701 call . this[158874] c"complete"))
    (156725 call =(156713 call .(156708 call . this[158874] c"table") c"rehashHelpers")(156716 'new'(156724 call DefaultAssociativeDomRehashHelper[386693](?)(156721 call _cast _unmanagedNonNilable[223](?) this[158874]))))
  }
  function DefaultAssociativeDom[158856](?).deinit[156732](arg _mt[158880]:_MT[238], arg this[158878]:DefaultAssociativeDom[158856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function DefaultAssociativeDom[158856](?).dsiBuildArray[156741](arg _mt[158884]:_MT[238], arg this[158882]:DefaultAssociativeDom[158856](?), arg eltType[156739]:_any[178](?), param arg initElts[156744] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (156766 return(156749 'new'(_chpl_manager = unmanaged[220](?))(156765 call DefaultAssociativeArr[386698](?)(eltType = eltType[156739])(idxType =(386704 call . this[158882] c"idxType"))(parSafeDom =(386709 call . this[158882] c"parSafe"))(dom =(156761 call _to_unmanaged this[158882]))(initElts = initElts[156744]))))
  }
  function DefaultAssociativeDom[158856](?).dsiSerialReadWrite[156775](arg _mt[158888]:_MT[238], arg this[158886]:DefaultAssociativeDom[158856](?), arg f[156773]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown binary[156783](156782 call(156778 call . f[156773] c"binary"))
    (156786 'end of statement')
    if(157124 call _cond_test(156789 call . f[156773] c"writing"))
    {
      if(156932 call _cond_test binary[156783])
      {
        unknown numIndices[156795](386716 call . this[158886] c"dsiNumIndices") int(64)[13]
        (156798 'end of statement')
        (156802 call <~> f[156773] numIndices[156795])
        {
          unknown _indexOfInterest[156813] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156814] "expr temp" "temp"
          (156823 'move' _iterator[156814](156821 call _getIterator this[158886]))
          Defer
          {
            {
              (156839 call _freeIterator _iterator[156814])
            }
          }
          { scopeless type
            (156828 'move' _indexOfInterest[156813](156825 call iteratorIndex _iterator[156814]))
          }
          ForLoop[156815]
          {
            unknown idx[156832] "index var" "insert auto destroy"
            (156834 'move' idx[156832] _indexOfInterest[156813])
            {
              (156809 call <~> f[156773] idx[156832])
            }
            label _continueLabel[156818]
            _indexOfInterest[156813]
            _iterator[156814]
          }
          label _breakLabel[156819]
        }
      }
      {
        unknown first[156847] 1
        (156850 'end of statement')
        (156858 call <~> f[156773](156853 'new'(156857 call ioLiteral[238753] "{")))
        {
          unknown _indexOfInterest[156890] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156891] "expr temp" "temp"
          (156900 'move' _iterator[156891](156898 call _getIterator this[158886]))
          Defer
          {
            {
              (156916 call _freeIterator _iterator[156891])
            }
          }
          { scopeless type
            (156905 'move' _indexOfInterest[156890](156902 call iteratorIndex _iterator[156891]))
          }
          ForLoop[156892]
          {
            unknown idx[156909] "index var" "insert auto destroy"
            (156911 'move' idx[156909] _indexOfInterest[156890])
            {
              if(156878 call _cond_test first[156847])
              {
                (156866 call = first[156847] 0)
              }
              {
                (156875 call <~> f[156773](156870 'new'(156874 call ioLiteral[238753] ", ")))
              }
              (156887 call <~> f[156773] idx[156909])
            }
            label _continueLabel[156895]
            _indexOfInterest[156890]
            _iterator[156891]
          }
          label _breakLabel[156896]
        }
        (156929 call <~> f[156773](156924 'new'(156928 call ioLiteral[238753] "}")))
      }
    }
    {
      (156939 call(386736 call . this[158886] c"dsiClear"))
      if(157120 call _cond_test binary[156783])
      {
        unknown numIndices[156944] int(64)[13]
        (156947 'end of statement')
        (156951 call <~> f[156773] numIndices[156944])
        {
          unknown _indexOfInterest[156975] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156976] "expr temp" "temp"
          (156985 'move' _iterator[156976](156983 call _getIterator(156990 call chpl_direct_range_iter 1 numIndices[156944] 1)))
          Defer
          {
            {
              (157006 call _freeIterator _iterator[156976])
            }
          }
          { scopeless type
            (156995 'move' _indexOfInterest[156975](156992 call iteratorIndex _iterator[156976]))
          }
          ForLoop[156977]
          {
            unknown i[156999] "index var" "insert auto destroy"
            (157001 'move' i[156999] _indexOfInterest[156975])
            {
              unknown idx[156960](386744 call . this[158886] c"idxType")
              (156963 'end of statement')
              (156967 call <~> f[156773] idx[156960])
              (156973 call(386750 call . this[158886] c"dsiAdd") idx[156960])
            }
            label _continueLabel[156980]
            _indexOfInterest[156975]
            _iterator[156976]
          }
          label _breakLabel[156981]
        }
      }
      {
        (157019 call <~> f[156773](157014 'new'(157018 call ioLiteral[238753] "{")))
        unknown first[157024] 1
        (157027 'end of statement')
        unknown comma[157034](157028 'new'(157033 call ioLiteral[238753] "," 1))
        (157037 'end of statement')
        unknown end[157043](157038 'new'(157042 call ioLiteral[238753] "}"))
        (157046 'end of statement')
        {
          unknown tmp[157099] "temp"
          (157117 'move' tmp[157099](157115 call _cond_test 1))
          WhileDo[157104]
          {
            {
              Try
              {
                {
                  (157050 call <~> f[156773] end[157043])
                  break _breakLabel[157103] _breakLabel[157103]
                }
              }
              Catch err : BadFormatError
              {
                unknown tmp[354455] "temp"(354459 'dynamic_cast' unmanaged BadFormatError?[415606](354458 'current error'))
                if(354462 '!=' tmp[354455] nil[44])
                {
                  unknown err[354468](354473 'new'(354471 call _owned[30](?)(354469 'to non nilable class' tmp[354455])))
                  {
                  }
                }
                {
                }
              }
              if(157074 call _cond_test(157067 call ! first[157024]))
              {
                (157071 call <~> f[156773] comma[157034])
              }
              (157081 call = first[157024] 0)
              unknown idx[157085](386768 call . this[158886] c"idxType")
              (157088 'end of statement')
              (157091 call <~> f[156773] idx[157085])
              (157097 call(386774 call . this[158886] c"dsiAdd") idx[157085])
            }
            label _continueLabel[157102]
            (157110 'move' tmp[157099](157108 call _cond_test 1))
            tmp[157099]
          }
          label _breakLabel[157103]
        }
      }
    }
  }
  function DefaultAssociativeDom[158856](?).dsiSerialWrite[157134](arg _mt[158892]:_MT[238], arg this[158890]:DefaultAssociativeDom[158856](?), arg f[157132]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157142 call(157137 call . this[158890] c"dsiSerialReadWrite") f[157132])
  }
  function DefaultAssociativeDom[158856](?).dsiSerialRead[157151](arg _mt[158896]:_MT[238], arg this[158894]:DefaultAssociativeDom[158856](?), arg f[157149]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157159 call(157154 call . this[158894] c"dsiSerialReadWrite") f[157149])
  }
  function DefaultAssociativeDom[158856](?).dsiAssignDomain[157170](arg _mt[158900]:_MT[238], arg this[158898]:DefaultAssociativeDom[158856](?), arg rhs[157167] :
  _domain[125902](?), arg lhsPrivate[157173] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (157180 call chpl_assignDomainWithIndsIterSafeForRemoving this[158898] rhs[157167])
  }
  function DefaultAssociativeDom[158856](?).dsiNumIndices[157187](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (157195 return(157194 call(157190 call .(360837 call . this[158902] c"numEntries") c"read")))
  }
  function DefaultAssociativeDom[158856](?).dsiIndsIterSafeForRemoving[157202](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    (157211 call =(157207 call .(360842 call . this[158906] c"table") c"postponeResize") 1)
    {
      unknown _indexOfInterest[157225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157226] "expr temp" "temp"
      (157235 'move' _iterator[157226](157233 call _getIterator(157221 call(157217 call . this[158906] c"these"))))
      Defer
      {
        {
          (157252 call _freeIterator _iterator[157226])
        }
      }
      { scopeless type
        (157241 'move' _indexOfInterest[157225](157238 call iteratorIndex _iterator[157226]))
      }
      ForLoop[157227]
      {
        unknown i[157245] "index var" "insert auto destroy"
        (157247 'move' i[157245] _indexOfInterest[157225])
        (157223 yield i[157245])
        label _continueLabel[157230]
        _indexOfInterest[157225]
        _iterator[157226]
      }
      label _breakLabel[157231]
    }
    const tmp[157292] "const" "temp"
    (157294 'move' tmp[157292](157290 'deref'(157289 '_wide_get_locale' this[158906])))
    {
      {
        (157265 call =(157261 call .(360848 call . this[158906] c"table") c"postponeResize") 0)
        (157271 call(386788 call . this[158906] c"lockTable"))
        Defer
        {
          {
            (157275 call(386794 call . this[158906] c"unlockTable"))
          }
        }
        (157287 call(157283 call .(360853 call . this[158906] c"table") c"maybeShrinkAfterRemove"))
      }
      (157297 'on block' 0 tmp[157292])
    }
  }
  function DefaultAssociativeDom[158856](?)._isSlotFull[157308](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158856](?), arg slot[157305] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (157323 return(157322 call(157318 call .(157317 call(157312 call .(360858 call . this[158910] c"table") c"table") slot[157305]) c"isFull")))
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158856](?).these[157331](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[157381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157382] "expr temp" "temp"
      (157391 'move' _iterator[157382](157389 call _getIterator(157341 call(157337 call .(360863 call . this[158914] c"table") c"allSlots"))))
      Defer
      {
        {
          (157408 call _freeIterator _iterator[157382])
        }
      }
      { scopeless type
        (157397 'move' _indexOfInterest[157381](157394 call iteratorIndex _iterator[157382]))
      }
      ForLoop[157383]
      {
        unknown slot[157401] "index var" "insert auto destroy"
        (157403 'move' slot[157401] _indexOfInterest[157381])
        {
          unknown aSlot[157349] "ref var"(157348 call(157343 call .(360868 call . this[158914] c"table") c"table") slot[157401])
          (157352 'end of statement')
          if(157377 call _cond_test(157366 call ==(157357 call . aSlot[157349] c"status") full[200404]))
          {
            (157374 yield(157371 call . aSlot[157349] c"key"))
          }
        }
        label _continueLabel[157386]
        _indexOfInterest[157381]
        _iterator[157382]
      }
      label _breakLabel[157387]
    }
  }
  function DefaultAssociativeDom[158856](?).these[157424](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158856](?), param arg tag[157421] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(157456 call _cond_test debugDefaultAssoc[156265])
    {
      (157453 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157503] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157504] "expr temp" "temp"
      (157513 'move' _iterator[157504](157511 call _getIterator(157469 call(157463 call .(360877 call . this[158918] c"table") c"allSlots")(tag = tag[157421]))))
      Defer
      {
        {
          (157530 call _freeIterator _iterator[157504])
        }
      }
      { scopeless type
        (157519 'move' _indexOfInterest[157503](157516 call iteratorIndex _iterator[157504]))
      }
      ForLoop[157505]
      {
        unknown slot[157523] "index var" "insert auto destroy"
        (157525 'move' slot[157523] _indexOfInterest[157503])
        {
          unknown aSlot[157477] "ref var"(157476 call(157471 call .(360882 call . this[158918] c"table") c"table") slot[157523])
          (157480 'end of statement')
          if(157499 call _cond_test(157490 call ==(157483 call . aSlot[157477] c"status") full[200404]))
          {
            (157496 yield(157493 call . aSlot[157477] c"key"))
          }
        }
        label _continueLabel[157508]
        _indexOfInterest[157503]
        _iterator[157504]
      }
      label _breakLabel[157509]
    }
  }
  where {
    (157431 call == tag[157421] standalone[451])
  }
  function DefaultAssociativeDom[158856](?).these[157546](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158856](?), param arg tag[157543] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(157577 call _cond_test debugDefaultAssoc[156265])
    {
      (157575 call writeln "*** In associative domain leader iterator")
    }
    {
      unknown _indexOfInterest[157599] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157600] "expr temp" "temp"
      (157609 'move' _iterator[157600](157607 call _getIterator(157591 call(157585 call .(360891 call . this[158922] c"table") c"allSlots")(tag = tag[157543]))))
      Defer
      {
        {
          (157626 call _freeIterator _iterator[157600])
        }
      }
      { scopeless type
        (157615 'move' _indexOfInterest[157599](157612 call iteratorIndex _iterator[157600]))
      }
      ForLoop[157601]
      {
        unknown chunk[157619] "index var" "insert auto destroy"
        (157621 'move' chunk[157619] _indexOfInterest[157599])
        (157597 yield(157595 call _build_tuple chunk[157619] this[158922]))
        label _continueLabel[157604]
        _indexOfInterest[157599]
        _iterator[157600]
      }
      label _breakLabel[157605]
    }
  }
  where {
    (157553 call == tag[157543] leader[447])
  }
  function DefaultAssociativeDom[158856](?).these[157642](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158856](?), param arg tag[157639] :
  iterKind[453], arg followThis[157644]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[157659] "temp" followThis[157644]
    (157666 call _check_tuple_var_decl tmp[157659] 2)
    unknown chunk[157653](157660 call tmp[157659] 0)
    unknown followThisDom[157655](157663 call tmp[157659] 1)
    (157671 'end of statement')
    if(157695 call _cond_test debugDefaultAssoc[156265])
    {
      (157693 call writeln "In associative domain follower code")
    }
    const sameDom[157704] "const"(157702 call == followThisDom[157655] this[158926])
    (157707 'end of statement')
    if(157747 call _cond_test(157709 call ! sameDom[157704]))
    {
      if(157742 call _cond_test(157719 call !=(157712 call . followThisDom[157655] c"dsiNumIndices")(157716 call . this[158926] c"dsiNumIndices")))
      {
        (157740 call halt "zippered associative domains do not match")
      }
    }
    const otherTable[157759] "const"(157756 call .(157753 call . followThisDom[157655] c"table") c"table")
    (157762 'end of statement')
    {
      unknown _indexOfInterest[157858] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157859] "expr temp" "temp"
      (157868 'move' _iterator[157859](157866 call _getIterator chunk[157653]))
      Defer
      {
        {
          (157884 call _freeIterator _iterator[157859])
        }
      }
      { scopeless type
        (157873 'move' _indexOfInterest[157858](157870 call iteratorIndex _iterator[157859]))
      }
      ForLoop[157860]
      {
        unknown slot[157877] "index var" "insert auto destroy"
        (157879 'move' slot[157877] _indexOfInterest[157858])
        {
          const aSlot[157769] "const" "ref var"(157768 call otherTable[157759] slot[157877])
          (157772 'end of statement')
          if(157854 call _cond_test(157779 call(157775 call . aSlot[157769] c"isFull")))
          {
            unknown idx[157781] slot[157877]
            (157784 'end of statement')
            if(157838 call _cond_test(157787 call ! sameDom[157704]))
            {
              const tmp[157806] "const" "temp"(157805 call(157797 call .(360901 call . this[158926] c"table") c"findFullSlot")(157801 call . aSlot[157769] c"key"))
              (157813 call _check_tuple_var_decl tmp[157806] 2)
              const match[157789] "const"(157807 call tmp[157806] 0)
              const loc[157791] "const"(157810 call tmp[157806] 1)
              (157818 'end of statement')
              if(157828 call _cond_test(157821 call ! match[157789]))
              {
                (157826 call halt "zippered associative domains do not match")
              }
              (157835 call = idx[157781] loc[157791])
            }
            (157852 yield(157849 call .(157848 call(157843 call .(360907 call . this[158926] c"table") c"table") idx[157781]) c"key"))
          }
        }
        label _continueLabel[157863]
        _indexOfInterest[157858]
        _iterator[157859]
      }
      label _breakLabel[157864]
    }
  }
  where {
    (157651 call == tag[157639] follower[449])
  }
  function DefaultAssociativeDom[158856](?).dsiMyDist[157896](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (157901 return(386829 call . this[158930] c"dist"))
  }
  { scopeless type
    unmanaged BaseDist[415468]
  }
  function DefaultAssociativeDom[158856](?).dsiClear[157909](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const tmp[158088] "const" "temp"
    (158090 'move' tmp[158088](158086 'deref'(158085 '_wide_get_locale' this[158934])))
    {
      {
        (157914 call(386834 call . this[158934] c"lockTable"))
        {
          unknown _indexOfInterest[158032] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158033] "expr temp" "temp"
          (158042 'move' _iterator[158033](158040 call _getIterator(157923 call(157919 call .(360912 call . this[158934] c"table") c"allSlots"))))
          Defer
          {
            {
              (158059 call _freeIterator _iterator[158033])
            }
          }
          { scopeless type
            (158048 'move' _indexOfInterest[158032](158045 call iteratorIndex _iterator[158033]))
          }
          ForLoop[158034]
          {
            unknown slot[158052] "index var" "insert auto destroy"
            (158054 'move' slot[158052] _indexOfInterest[158032])
            {
              unknown aSlot[157931] "ref var"(157930 call(157925 call .(360917 call . this[158934] c"table") c"table") slot[158052])
              (157934 'end of statement')
              if(158011 call _cond_test(157941 call(157937 call . aSlot[157931] c"isFull")))
              {
                unknown tmpKey[157943](386840 call . this[158934] c"idxType")
                (157946 'end of statement')
                unknown tmpVal[157949] nothing[7]
                (157952 'end of statement')
                (157963 call(157956 call .(360923 call . this[158934] c"table") c"clearSlot") aSlot[157931] tmpKey[157943] tmpVal[157949])
                {
                  unknown _indexOfInterest[157978] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[157979] "expr temp" "temp"
                  (157988 'move' _iterator[157979](157986 call _getIterator(386848 call . this[158934] c"_arrs")))
                  Defer
                  {
                    {
                      (158004 call _freeIterator _iterator[157979])
                    }
                  }
                  { scopeless type
                    (157993 'move' _indexOfInterest[157978](157990 call iteratorIndex _iterator[157979]))
                  }
                  ForLoop[157980]
                  {
                    unknown arr[157997] "index var" "insert auto destroy"
                    (157999 'move' arr[157997] _indexOfInterest[157978])
                    {
                      (157975 call(157970 call . arr[157997] c"_deinitSlot") slot[158052])
                    }
                    label _continueLabel[157983]
                    _indexOfInterest[157978]
                    _iterator[157979]
                  }
                  label _breakLabel[157984]
                }
              }
              (158029 call =(158022 call .(158021 call(158016 call .(360929 call . this[158934] c"table") c"table") slot[158052]) c"status") empty[200402])
            }
            label _continueLabel[158037]
            _indexOfInterest[158032]
            _iterator[158033]
          }
          label _breakLabel[158038]
        }
        (158072 call(158067 call .(360935 call . this[158934] c"numEntries") c"write") 0)
        (158079 call(158075 call .(360940 call . this[158934] c"table") c"maybeShrinkAfterRemove"))
        (158083 call(386854 call . this[158934] c"unlockTable"))
      }
      (158093 'on block' 0 tmp[158088])
    }
  }
  function DefaultAssociativeDom[158856](?).dsiMember[158105](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158856](?), arg idx[158102] :
  (386859 call . this[158938] c"idxType")) : _unknown[51] "method" "primary method"
  {
    (158110 call(386863 call . this[158938] c"lockTable"))
    Defer
    {
      {
        (158115 call(386867 call . this[158938] c"unlockTable"))
      }
    }
    unknown tmp[158132] "temp"(158131 call(158126 call .(360945 call . this[158938] c"table") c"findFullSlot") idx[158102])
    (158139 call _check_tuple_var_decl tmp[158132] 2)
    unknown foundFullSlot[158120](158133 call tmp[158132] 0)
    unknown slotNum[158122](158136 call tmp[158132] 1)
    (158144 'end of statement')
    (158146 return foundFullSlot[158120])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158856](?).dsiAdd[158155](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158856](?), in arg idx[158153]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    const numInds[158164] "const"(158163 call(158160 call(386875 call . this[158942] c"_addWrapper") idx[158153]) 1)
    (158167 'end of statement')
    (158170 return numInds[158164])
  }
  function DefaultAssociativeDom[158856](?)._addWrapper[158180](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158856](?), in arg idx[158177] :
  (386882 call . this[158946] c"idxType")) : _unknown[51] "method" "primary method"
  {
    unknown slotNum[158185](158183 call - 1)
    (158188 'end of statement')
    unknown retVal[158191] 0
    (158194 'end of statement')
    const tmp[158223] "const" "temp"
    (158225 'move' tmp[158223](158221 'deref'(158220 '_wide_get_locale' this[158946])))
    {
      {
        (158198 call(386887 call . this[158946] c"lockTable"))
        Defer
        {
          {
            (158203 call(386891 call . this[158946] c"unlockTable"))
          }
        }
        (158217 call =(158211 call _build_tuple slotNum[158185] retVal[158191])(158216 call(386899 call . this[158946] c"_add") idx[158177]))
      }
      (158228 'on block' 0 tmp[158223])
    }
    (158236 return(158234 call _build_tuple slotNum[158185] retVal[158191]))
  }
  function DefaultAssociativeDom[158856](?)._add[158246](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158856](?), in arg idx[158243] :
  (386907 call . this[158950] c"idxType")) : _unknown[51] "method" "primary method"
  {
    unknown foundFullSlot[158249] 0
    (158252 'end of statement')
    unknown slotNum[158257](158255 call - 1)
    (158260 'end of statement')
    (158275 call =(158264 call _build_tuple foundFullSlot[158249] slotNum[158257])(158274 call(158269 call .(360950 call . this[158950] c"table") c"findAvailableSlot") idx[158243]))
    if(158361 call _cond_test foundFullSlot[158249])
    {
      (158284 return(158282 call _build_tuple slotNum[158257] 0))
    }
    {
      (158297 call(158290 call .(360955 call . this[158950] c"table") c"fillSlot") slotNum[158257] idx[158243] none[57])
      (158306 call(158301 call .(360960 call . this[158950] c"numEntries") c"add") 1)
      {
        unknown _indexOfInterest[158321] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158322] "expr temp" "temp"
        (158331 'move' _iterator[158322](158329 call _getIterator(386919 call . this[158950] c"_arrs")))
        Defer
        {
          {
            (158347 call _freeIterator _iterator[158322])
          }
        }
        { scopeless type
          (158336 'move' _indexOfInterest[158321](158333 call iteratorIndex _iterator[158322]))
        }
        ForLoop[158323]
        {
          unknown arr[158340] "index var" "insert auto destroy"
          (158342 'move' arr[158340] _indexOfInterest[158321])
          {
            (158318 call(158313 call . arr[158340] c"_defaultInitSlot") slotNum[158257])
          }
          label _continueLabel[158326]
          _indexOfInterest[158321]
          _iterator[158322]
        }
        label _breakLabel[158327]
      }
      (158359 return(158357 call _build_tuple slotNum[158257] 1))
    }
  }
  function DefaultAssociativeDom[158856](?).dsiRemove[158373](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158856](?), arg idx[158370] :
  (386926 call . this[158954] c"idxType")) : _unknown[51] "method" "primary method"
  {
    unknown retval[158376] int(64)[13]
    (158379 'end of statement')
    const tmp[158518] "const" "temp"
    (158520 'move' tmp[158518](158516 'deref'(158515 '_wide_get_locale' this[158954])))
    {
      {
        (158384 call(386931 call . this[158954] c"lockTable"))
        Defer
        {
          {
            (158389 call(386935 call . this[158954] c"unlockTable"))
          }
        }
        const tmp[158406] "const" "temp"(158405 call(158400 call .(360966 call . this[158954] c"table") c"findFullSlot") idx[158370])
        (158413 call _check_tuple_var_decl tmp[158406] 2)
        const foundSlot[158394] "const"(158407 call tmp[158406] 0)
        const slotNum[158396] "const"(158410 call tmp[158406] 1)
        (158418 'end of statement')
        if(158504 call _cond_test foundSlot[158394])
        {
          unknown tmpIdx[158421](386942 call . this[158954] c"idxType")
          (158424 'end of statement')
          unknown tmpVal[158427] nothing[7]
          (158430 'end of statement')
          (158439 call(158432 call .(360971 call . this[158954] c"table") c"clearSlot") slotNum[158396] tmpIdx[158421] tmpVal[158427])
          (158447 call(158442 call .(360976 call . this[158954] c"numEntries") c"sub") 1)
          {
            unknown _indexOfInterest[158460] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158461] "expr temp" "temp"
            (158470 'move' _iterator[158461](158468 call _getIterator(386950 call . this[158954] c"_arrs")))
            Defer
            {
              {
                (158486 call _freeIterator _iterator[158461])
              }
            }
            { scopeless type
              (158475 'move' _indexOfInterest[158460](158472 call iteratorIndex _iterator[158461]))
            }
            ForLoop[158462]
            {
              unknown arr[158479] "index var" "insert auto destroy"
              (158481 'move' arr[158479] _indexOfInterest[158460])
              {
                (158457 call(158452 call . arr[158479] c"_deinitSlot") slotNum[158396])
              }
              label _continueLabel[158465]
              _indexOfInterest[158460]
              _iterator[158461]
            }
            label _breakLabel[158466]
          }
          (158495 call = retval[158376] 1)
        }
        {
          (158500 call = retval[158376] 0)
        }
        (158513 call(158509 call .(360982 call . this[158954] c"table") c"maybeShrinkAfterRemove"))
      }
      (158523 'on block' 0 tmp[158518])
    }
    (158527 return retval[158376])
  }
  function DefaultAssociativeDom[158856](?).dsiRequestCapacity[158537](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158856](?), arg numKeys[158534] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[158625] "const" "temp"
    (158627 'move' tmp[158625](158623 'deref'(158622 '_wide_get_locale' this[158958])))
    {
      {
        unknown entries[158546](158545 call(158541 call .(360987 call . this[158958] c"numEntries") c"read"))
        (158549 'end of statement')
        if(158618 call _cond_test(158553 call < entries[158546] numKeys[158534]))
        {
          (158557 call(386961 call . this[158958] c"lockTable"))
          Defer
          {
            {
              (158562 call(386965 call . this[158958] c"unlockTable"))
            }
          }
          (158573 call(158568 call .(360992 call . this[158958] c"table") c"requestCapacity") numKeys[158534])
        }
        {
          (158615 call warning "Requested capacity (" numKeys[158534] ") " "is less than current size (" entries[158546] ")")
        }
      }
      (158630 'on block' 0 tmp[158625])
    }
  }
  function DefaultAssociativeDom[158856](?).dsiSorted[158640](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158856](?), arg comparator[158638]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tableCopy[158681](158677 for  slot[158679]  in (158666 call(386978 call . this[158962] c"_fullSlots")) do
    {
      (158674 call .(158673 call(158668 call .(361002 call . this[158962] c"table") c"table") slot[158679]) c"key")
    } )(158661 call chpl__buildArrayRuntimeType(158659 call chpl__ensureDomainExpr(158655 call #(158647 call chpl_build_low_bounded_range 0)(158654 call(158650 call .(360997 call . this[158962] c"numEntries") c"read"))))(386973 call . this[158962] c"idxType"))
    (158684 'end of statement')
    (158690 call sort tableCopy[158681](comparator = comparator[158638]))
    {
      unknown _indexOfInterest[158697] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158698] "expr temp" "temp"
      (158707 'move' _iterator[158698](158705 call _getIterator tableCopy[158681]))
      Defer
      {
        {
          (158723 call _freeIterator _iterator[158698])
        }
      }
      { scopeless type
        (158712 'move' _indexOfInterest[158697](158709 call iteratorIndex _iterator[158698]))
      }
      ForLoop[158699]
      {
        unknown ind[158716] "index var" "insert auto destroy"
        (158718 'move' ind[158716] _indexOfInterest[158697])
        (158695 yield ind[158716])
        label _continueLabel[158702]
        _indexOfInterest[158697]
        _iterator[158698]
      }
      label _breakLabel[158703]
    }
    (355157 'used modules list'(158643 'use' Sort[267968]))
  }
  function DefaultAssociativeDom[158856](?)._fullSlots[158734](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[158761] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158762] "expr temp" "temp"
      (158771 'move' _iterator[158762](158769 call _getIterator(158742 call(158738 call .(361007 call . this[158966] c"table") c"allSlots"))))
      Defer
      {
        {
          (158788 call _freeIterator _iterator[158762])
        }
      }
      { scopeless type
        (158777 'move' _indexOfInterest[158761](158774 call iteratorIndex _iterator[158762]))
      }
      ForLoop[158763]
      {
        unknown slot[158781] "index var" "insert auto destroy"
        (158783 'move' slot[158781] _indexOfInterest[158761])
        {
          if(158756 call _cond_test(158751 call(158746 call .(361012 call . this[158966] c"table") c"isSlotFull") slot[158781]))
          {
            (158753 yield slot[158781])
          }
        }
        label _continueLabel[158766]
        _indexOfInterest[158761]
        _iterator[158762]
      }
      label _breakLabel[158767]
    }
  }
  function DefaultAssociativeDom[158856](?).dsiHasSingleLocalSubdomain[158800](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158856](?)) param : _unknown[51] "method" "primary method"
  {
    (158803 return 1)
  }
  function DefaultAssociativeDom[158856](?).dsiLocalSubdomain[158814](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158856](?), arg loc[158811] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(158848 call _cond_test(158821 call ==(158818 call chpl_localeID_to_locale(158817 '_wide_get_locale' this[158974])) loc[158811]))
    {
      (158830 return(158829 call _getDomain(158827 call _to_unmanaged this[158974])))
    }
    {
      unknown a[158840](158838 call chpl__buildDomainRuntimeType defaultDist[94050](386993 call . this[158974] c"idxType")(parSafe =(386998 call . this[158974] c"parSafe")))
      (158843 'end of statement')
      (158846 return a[158840])
    }
  }
  type DefaultAssociativeDom[158856](?) val super[355688]:BaseAssociativeDom[148812] "super class" unknown idxType[156490] "type variable" unknown parSafe[156494] "param" bool[10] unknown dist[156500] unmanaged DefaultDist[415444] unknown numEntries[156508](156507 call chpl__processorAtomicType int(64)[13]) unknown tableLock[156518](156515 IfExpr  parSafe[156494] then
  { scopeless
    chpl_LocalSpinlock[187386]
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156527](156526 call chpl__hashtable[204509](?) idxType[156490] nothing[7])
  type unmanaged DefaultAssociativeDom[415471](?)
  type DefaultAssociativeDom[378026](?)
  function DefaultAssociativeArr[161418](?).init[159031](arg _mt[161422]:_MT[238], arg this[161420]:DefaultAssociativeArr[161418](?), arg eltType[159029]:_any[178](?), arg idxType[159033]:_any[178](?), param arg parSafeDom[159035]:_any[178](?), arg dom[159044] :
  (159042 call unmanaged DefaultAssociativeDom[415471](?) idxType[159033](parSafe = parSafeDom[159035])), param arg initElts[159047]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (159056 call(159050 call .(361017 call . this[161420] c"super") c"init")(eltType = eltType[159029]))
    (159064 call =(159060 call . this[161420] c"idxType") idxType[159033])
    (159074 call =(159070 call . this[161420] c"parSafeDom") parSafeDom[159035])
    (159082 call =(159078 call . this[161420] c"dom") dom[159044])
    unknown tableSize[159094](159091 call .(159086 call . dom[159044] c"table") c"tableSize")
    (159097 'end of statement')
    (159115 call =(159099 call . this[161420] c"data")(159114 call(159108 call .(159103 call . dom[159044] c"table") c"allocateData") tableSize[159094] eltType[159029]))
    (159125 call =(159121 call . this[161420] c"tmpData") nil[44])
    (159135 call =(159131 call . this[161420] c"eltsNeedDeinit") initElts[159047])
    (159143 call(159139 call . this[161420] c"complete"))
    if(159282 call _cond_test initElts[159047])
    {
      if(159276 call _cond_test(159152 call isNonNilableClass(159148 call . this[161420] c"eltType")))
      {
        unknown msg[159214] "param"(159212 call +(159193 call +(159187 call + "Cannot default initialize associative array because" " element type ")(159191 call _cast string[26] eltType[159029])) " is a non-nilable class")
        (159217 'end of statement')
        (159222 call compilerError msg[159214])
      }
      {
        if(159272 call _cond_test(159231 call !(159230 call isDefaultInitializable(159226 call . this[161420] c"eltType"))))
        {
          unknown msg[159262] "param"(159260 call +(159241 call +(159235 call + "Cannot default initialize associative array because" " element type ")(159239 call _cast string[26] eltType[159029])) " cannot be default initialized")
          (159265 'end of statement')
          (159270 call compilerError msg[159262])
        }
      }
    }
    if(159457 call _cond_test initElts[159047])
    {
      unknown initMethod[159292](159291 call init_elts_method tableSize[159094] eltType[159029])
      (159295 'end of statement')
      {
        unknown tmp[159432] "expr temp" "maybe param" "maybe type" "temp"
        (159434 'move' tmp[159432] initMethod[159292])
        if(159439 call _cond_test(159436 call == tmp[159432] noInit[11146]))
        {
        }
        {
          if(159445 call _cond_test(159442 call == tmp[159432] serialInit[11148]))
          {
            {
              unknown _indexOfInterest[159344] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159345] "expr temp" "temp"
              (159354 'move' _iterator[159345](159352 call _getIterator(159321 call(159317 call .(159314 call . dom[159044] c"table") c"allSlots"))))
              Defer
              {
                {
                  (159371 call _freeIterator _iterator[159345])
                }
              }
              { scopeless type
                (159360 'move' _indexOfInterest[159344](159357 call iteratorIndex _iterator[159345]))
              }
              ForLoop[159346]
              {
                unknown slot[159364] "index var" "insert auto destroy"
                (159366 'move' slot[159364] _indexOfInterest[159344])
                {
                  if(159339 call _cond_test(159330 call(159325 call . dom[159044] c"_isSlotFull") slot[159364]))
                  {
                    (159336 call(387033 call . this[161420] c"_doDefaultInitSlot") slot[159364](inAdd = 0))
                  }
                }
                label _continueLabel[159349]
                _indexOfInterest[159344]
                _iterator[159345]
              }
              label _breakLabel[159350]
            }
          }
          {
            if(159452 call _cond_test(159449 call == tmp[159432] parallelInit[11150]))
            {
              Forall {
                induction variables:
                  
                  unknown slot[159417] "index var" "insert auto destroy"
                iterated expressions:
                  (159395 call(159391 call .(159388 call . dom[159044] c"table") c"allSlots"))
                shadow variables:
                other variables
                  forall body
                {
                  if(159411 call _cond_test(159402 call(159397 call . dom[159044] c"_isSlotFull") slot[159417]))
                  {
                    (159408 call(387039 call . this[161420] c"_doDefaultInitSlot") slot[159417](inAdd = 0))
                  }
                }
              }
            }
            {
              (159426 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
  }
  function DefaultAssociativeArr[161418](?).deinit[159465](arg _mt[161426]:_MT[238], arg this[161424]:DefaultAssociativeArr[161418](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (159477 call _ddata_free(387045 call . this[161424] c"data")(159474 call .(159471 call .(361040 call . this[161424] c"dom") c"table") c"tableSize"))
  }
  function DefaultAssociativeArr[161418](?).dsiGetBaseDom[159484](arg _mt[161430]:_MT[238], arg this[161428]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (159487 return(387050 call . this[161428] c"dom"))
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159498](arg _mt[161434]:_MT[238], arg this[161432]:DefaultAssociativeArr[161418](?), arg idx[159495] :
  (387055 call . this[161432] c"idxType")) ref : _unknown[51] "method" "primary method"
  {
    unknown tmp[159515] "temp"(159514 call(159509 call .(159506 call .(361045 call . this[161432] c"dom") c"table") c"findFullSlot") idx[159495])
    (159522 call _check_tuple_var_decl tmp[159515] 2)
    unknown found[159500](159516 call tmp[159515] 0)
    unknown slotNum[159502](159519 call tmp[159515] 1)
    (159527 'end of statement')
    if(159560 call _cond_test found[159500])
    {
      (159534 return(159533 call(387062 call . this[161432] c"data") slotNum[159502]))
    }
    {
      (159557 call halt "array index out of bounds: " idx[159495])
    }
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159572](arg _mt[161438]:_MT[238], arg this[161436]:DefaultAssociativeArr[161418](?), arg idx[159569] :
  (387069 call . this[161436] c"idxType")) : _unknown[51] "method" "primary method"
  {
    unknown tmp[159593] "temp"(159592 call(159587 call .(159584 call .(361050 call . this[161436] c"dom") c"table") c"findFullSlot") idx[159569])
    (159600 call _check_tuple_var_decl tmp[159593] 2)
    unknown found[159578](159594 call tmp[159593] 0)
    unknown slotNum[159580](159597 call tmp[159593] 1)
    (159605 'end of statement')
    if(159628 call _cond_test found[159578])
    {
      (159612 return(159611 call(387081 call . this[161436] c"data") slotNum[159580]))
    }
    {
      (159619 call halt "array index out of bounds: " idx[159569])
      (159626 return(159625 call(387088 call . this[161436] c"data") 0))
    }
  }
  where {
    (159577 call shouldReturnRvalueByValue(387074 call . this[161436] c"eltType"))
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159641](arg _mt[161442]:_MT[238], arg this[161440]:DefaultAssociativeArr[161418](?), arg idx[159638] :
  (387093 call . this[161440] c"idxType")) const ref : _unknown[51] "method" "primary method"
  {
    unknown tmp[159662] "temp"(159661 call(159656 call .(159653 call .(361055 call . this[161440] c"dom") c"table") c"findFullSlot") idx[159638])
    (159669 call _check_tuple_var_decl tmp[159662] 2)
    unknown found[159647](159663 call tmp[159662] 0)
    unknown slotNum[159649](159666 call tmp[159662] 1)
    (159674 'end of statement')
    if(159697 call _cond_test found[159647])
    {
      (159681 return(159680 call(387105 call . this[161440] c"data") slotNum[159649]))
    }
    {
      (159688 call halt "array index out of bounds: " idx[159638])
      (159695 return(159694 call(387112 call . this[161440] c"data") 0))
    }
  }
  where {
    (159646 call shouldReturnRvalueByConstRef(387098 call . this[161440] c"eltType"))
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159708](arg _mt[161446]:_MT[238], arg this[161444]:DefaultAssociativeArr[161418](?), arg i[159706]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    (159714 return(159713 call(387116 call . this[161444] c"dsiAccess") i[159706]))
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159723](arg _mt[161450]:_MT[238], arg this[161448]:DefaultAssociativeArr[161418](?), arg i[159721]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (159733 return(159732 call(387126 call . this[161448] c"dsiAccess") i[159721]))
  }
  where {
    (159728 call shouldReturnRvalueByValue(387122 call . this[161448] c"eltType"))
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159743](arg _mt[161454]:_MT[238], arg this[161452]:DefaultAssociativeArr[161418](?), arg i[159741]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (159753 return(159752 call(387136 call . this[161452] c"dsiAccess") i[159741]))
  }
  where {
    (159748 call shouldReturnRvalueByConstRef(387132 call . this[161452] c"eltType"))
  }
  function DefaultAssociativeArr[161418](?).these[159761](arg _mt[161458]:_MT[238], arg this[161456]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[159792] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159793] "expr temp" "temp"
      (159802 'move' _iterator[159793](159800 call _getIterator(159772 call(159768 call .(159765 call .(361060 call . this[161456] c"dom") c"table") c"allSlots"))))
      Defer
      {
        {
          (159819 call _freeIterator _iterator[159793])
        }
      }
      { scopeless type
        (159808 'move' _indexOfInterest[159792](159805 call iteratorIndex _iterator[159793]))
      }
      ForLoop[159794]
      {
        unknown slot[159812] "index var" "insert auto destroy"
        (159814 'move' slot[159812] _indexOfInterest[159792])
        {
          if(159787 call _cond_test(159779 call(159774 call .(361065 call . this[161456] c"dom") c"_isSlotFull") slot[159812]))
          {
            (159784 yield(159783 call(387143 call . this[161456] c"data") slot[159812]))
          }
        }
        label _continueLabel[159797]
        _indexOfInterest[159792]
        _iterator[159793]
      }
      label _breakLabel[159798]
    }
  }
  function DefaultAssociativeArr[161418](?).these[159835](arg _mt[161462]:_MT[238], arg this[161460]:DefaultAssociativeArr[161418](?), param arg tag[159832] :
  iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(159867 call _cond_test debugDefaultAssoc[156265])
    {
      (159864 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159903] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159904] "expr temp" "temp"
      (159913 'move' _iterator[159904](159911 call _getIterator(159883 call(159877 call .(159874 call .(361071 call . this[161460] c"dom") c"table") c"allSlots")(tag = tag[159832]))))
      Defer
      {
        {
          (159930 call _freeIterator _iterator[159904])
        }
      }
      { scopeless type
        (159919 'move' _indexOfInterest[159903](159916 call iteratorIndex _iterator[159904]))
      }
      ForLoop[159905]
      {
        unknown slot[159923] "index var" "insert auto destroy"
        (159925 'move' slot[159923] _indexOfInterest[159903])
        {
          if(159898 call _cond_test(159890 call(159885 call .(361076 call . this[161460] c"dom") c"_isSlotFull") slot[159923]))
          {
            (159895 yield(159894 call(387154 call . this[161460] c"data") slot[159923]))
          }
        }
        label _continueLabel[159908]
        _indexOfInterest[159903]
        _iterator[159904]
      }
      label _breakLabel[159909]
    }
  }
  where {
    (159842 call == tag[159832] standalone[451])
  }
  function DefaultAssociativeArr[161418](?).these[159946](arg _mt[161466]:_MT[238], arg this[161464]:DefaultAssociativeArr[161418](?), param arg tag[159943] :
  iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[159966] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159967] "expr temp" "temp"
      (159976 'move' _iterator[159967](159974 call _getIterator(159962 call(159957 call .(361082 call . this[161464] c"dom") c"these") tag[159943])))
      Defer
      {
        {
          (159993 call _freeIterator _iterator[159967])
        }
      }
      { scopeless type
        (159982 'move' _indexOfInterest[159966](159979 call iteratorIndex _iterator[159967]))
      }
      ForLoop[159968]
      {
        unknown followThis[159986] "index var" "insert auto destroy"
        (159988 'move' followThis[159986] _indexOfInterest[159966])
        (159964 yield followThis[159986])
        label _continueLabel[159971]
        _indexOfInterest[159966]
        _iterator[159967]
      }
      label _breakLabel[159972]
    }
  }
  where {
    (159953 call == tag[159943] leader[447])
  }
  function DefaultAssociativeArr[161418](?).these[160010](arg _mt[161470]:_MT[238], arg this[161468]:DefaultAssociativeArr[161418](?), param arg tag[160007] :
  iterKind[453], arg followThis[160012]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[160027] "temp" followThis[160012]
    (160034 call _check_tuple_var_decl tmp[160027] 2)
    unknown chunk[160021](160028 call tmp[160027] 0)
    unknown followThisDom[160023](160031 call tmp[160027] 1)
    (160039 'end of statement')
    if(160064 call _cond_test debugDefaultAssoc[156265])
    {
      (160062 call writeln "In array follower code: Following " chunk[160021])
    }
    const sameDom[160076] "const"(160074 call == followThisDom[160023](160071 call . this[161468] c"dom"))
    (160079 'end of statement')
    if(160122 call _cond_test(160081 call ! sameDom[160076]))
    {
      if(160117 call _cond_test(160094 call !=(160084 call . followThisDom[160023] c"dsiNumIndices")(160091 call .(160088 call . this[161468] c"dom") c"dsiNumIndices")))
      {
        (160115 call halt "zippered associative array does not match the iterated domain")
      }
    }
    const otherTable[160134] "const"(160131 call .(160128 call . followThisDom[160023] c"table") c"table")
    (160137 'end of statement')
    {
      unknown _indexOfInterest[160228] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160229] "expr temp" "temp"
      (160238 'move' _iterator[160229](160236 call _getIterator chunk[160021]))
      Defer
      {
        {
          (160254 call _freeIterator _iterator[160229])
        }
      }
      { scopeless type
        (160243 'move' _indexOfInterest[160228](160240 call iteratorIndex _iterator[160229]))
      }
      ForLoop[160230]
      {
        unknown slot[160247] "index var" "insert auto destroy"
        (160249 'move' slot[160247] _indexOfInterest[160228])
        {
          const aSlot[160144] "const" "ref var"(160143 call otherTable[160134] slot[160247])
          (160147 'end of statement')
          if(160224 call _cond_test(160154 call(160150 call . aSlot[160144] c"isFull")))
          {
            unknown idx[160156] slot[160247]
            (160159 'end of statement')
            if(160214 call _cond_test(160162 call ! sameDom[160076]))
            {
              const tmp[160182] "const" "temp"(160181 call(160173 call .(160170 call .(361093 call . this[161468] c"dom") c"table") c"findFullSlot")(160177 call . aSlot[160144] c"key"))
              (160189 call _check_tuple_var_decl tmp[160182] 2)
              const match[160164] "const"(160183 call tmp[160182] 0)
              const loc[160166] "const"(160186 call tmp[160182] 1)
              (160194 'end of statement')
              if(160204 call _cond_test(160197 call ! match[160164]))
              {
                (160202 call halt "zippered associative array does not match the iterated domain")
              }
              (160211 call = idx[160156] loc[160166])
            }
            (160222 yield(160221 call(387179 call . this[161468] c"data") idx[160156]))
          }
        }
        label _continueLabel[160233]
        _indexOfInterest[160228]
        _iterator[160229]
      }
      label _breakLabel[160234]
    }
  }
  where {
    (160019 call == tag[160007] follower[449])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialReadWrite[160268](arg _mt[161474]:_MT[238], arg this[161472]:DefaultAssociativeArr[161418](?), arg f[160266]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown binary[160276](160275 call(160271 call . f[160266] c"binary"))
    (160279 'end of statement')
    unknown arrayStyle[160288](160287 call(160282 call . f[160266] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19662])
    (160291 'end of statement')
    unknown isspace[160301](160299 call &&(160294 call == arrayStyle[160288] QIO_ARRAY_FORMAT_SPACE[19692])(160297 call ! binary[160276]))
    (160304 'end of statement')
    unknown isjson[160314](160312 call &&(160307 call == arrayStyle[160288] QIO_ARRAY_FORMAT_JSON[19702])(160310 call ! binary[160276]))
    (160317 'end of statement')
    unknown ischpl[160327](160325 call &&(160320 call == arrayStyle[160288] QIO_ARRAY_FORMAT_CHPL[19697])(160323 call ! binary[160276]))
    (160330 'end of statement')
    if(160353 call _cond_test(160338 call &&(160335 call !(160332 call . f[160266] c"writing")) ischpl[160327]))
    {
      (160348 call(160343 call . this[161472] c"readChapelStyleAssocArray") f[160266])
      (160351 return _void[55])
    }
    if(160370 call _cond_test(160359 call || isjson[160314] ischpl[160327]))
    {
      (160367 call <~> f[160266](160362 'new'(160366 call ioLiteral[238753] "[")))
    }
    unknown first[160376] 1
    (160379 'end of statement')
    {
      unknown _indexOfInterest[160486] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160487] "expr temp" "temp"
      (160505 'move' _iterator[160487](160391 call _build_tuple(160499 call _getIterator(160496 call . this[161472] c"dom"))(160503 call _getIterator this[161472])))
      Defer
      {
        {
          (160535 call _freeIterator _iterator[160487])
        }
      }
      { scopeless type
        (160510 'move' _indexOfInterest[160486](160507 call iteratorIndex _iterator[160487]))
      }
      ForLoop[160488]
      {
        (160515 call _check_tuple_var_decl _indexOfInterest[160486] 2)
        unknown key[160521] "index var" "insert auto destroy"
        (160523 'move' key[160521](160519 call _indexOfInterest[160486] 0))
        unknown val[160528] "index var" "insert auto destroy"
        (160530 'move' val[160528](160526 call _indexOfInterest[160486] 1))
        {
          if(160432 call _cond_test first[160376])
          {
            (160395 call = first[160376] 0)
          }
          {
            if(160426 call _cond_test isspace[160301])
            {
              (160405 call <~> f[160266](160400 'new'(160404 call ioLiteral[238753] " ")))
            }
            {
              if(160421 call _cond_test(160410 call || isjson[160314] ischpl[160327]))
              {
                (160418 call <~> f[160266](160413 'new'(160417 call ioLiteral[238753] ", ")))
              }
            }
          }
          if(160477 call _cond_test(160444 call &&(160440 call . f[160266] c"writing") ischpl[160327]))
          {
            (160448 call <~> f[160266] key[160521])
            (160474 call <~> f[160266](160453 'new'(160473 call ioLiteral[238753] " => ")))
          }
          (160483 call <~> f[160266] val[160528])
        }
        label _continueLabel[160491]
        _indexOfInterest[160486]
        _iterator[160487]
      }
      label _breakLabel[160492]
    }
    if(160555 call _cond_test(160544 call || isjson[160314] ischpl[160327]))
    {
      (160552 call <~> f[160266](160547 'new'(160551 call ioLiteral[238753] "]")))
    }
  }
  function DefaultAssociativeArr[161418](?).readChapelStyleAssocArray[160566](arg _mt[161478]:_MT[238], arg this[161476]:DefaultAssociativeArr[161418](?), arg f[160564]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    const openBracket[160573] "const"(160568 'new'(160572 call ioLiteral[238753] "["))
    (160576 'end of statement')
    const closedBracket[160583] "const"(160578 'new'(160582 call ioLiteral[238753] "]"))
    (160586 'end of statement')
    unknown first[160588] 1
    (160591 'end of statement')
    unknown readEnd[160593] 0
    (160596 'end of statement')
    (160599 call <~> f[160564] openBracket[160573])
    {
      unknown tmp[160702] "temp"
      (160720 'move' tmp[160702](160718 call _cond_test 1))
      WhileDo[160707]
      {
        {
          if(160654 call _cond_test first[160588])
          {
            (160606 call = first[160588] 0)
            Try
            {
              {
                (160612 call <~> f[160564] closedBracket[160583])
                (160618 call = readEnd[160593] 1)
                break _breakLabel[160706] _breakLabel[160706]
              }
            }
            Catch err : BadFormatError
            {
              unknown tmp[354477] "temp"(354481 'dynamic_cast' unmanaged BadFormatError?[415606](354480 'current error'))
              if(354484 '!=' tmp[354477] nil[44])
              {
                unknown err[354490](354495 'new'(354493 call _owned[30](?)(354491 'to non nilable class' tmp[354477])))
                {
                }
              }
              {
              }
            }
          }
          {
            Try
            {
              {
                (160638 call <~> f[160564](160633 'new'(160637 call ioLiteral[238753] ",")))
              }
            }
            Catch err : BadFormatError
            {
              unknown tmp[354498] "temp"(354502 'dynamic_cast' unmanaged BadFormatError?[415606](354501 'current error'))
              if(354505 '!=' tmp[354498] nil[44])
              {
                unknown err[354511](354516 'new'(354514 call _owned[30](?)(354512 'to non nilable class' tmp[354498])))
                {
                  break _breakLabel[160706] _breakLabel[160706]
                }
              }
              {
              }
            }
          }
          unknown key[160660](387235 call . this[161476] c"idxType")
          (160663 'end of statement')
          (160666 call <~> f[160564] key[160660])
          (160691 call <~> f[160564](160670 'new'(160690 call ioLiteral[238753] "=>")))
          (160699 call <~> f[160564](160698 call(387244 call . this[161476] c"dsiAccess") key[160660]))
        }
        label _continueLabel[160705]
        (160713 'move' tmp[160702](160711 call _cond_test 1))
        tmp[160702]
      }
      label _breakLabel[160706]
    }
    if(160731 call _cond_test(160724 call ! readEnd[160593]))
    {
      (160728 call <~> f[160564] closedBracket[160583])
    }
  }
  function DefaultAssociativeArr[161418](?).dsiSerialWrite[160742](arg _mt[161482]:_MT[238], arg this[161480]:DefaultAssociativeArr[161418](?), arg f[160740]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160750 call(160745 call . this[161480] c"dsiSerialReadWrite") f[160740])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialRead[160759](arg _mt[161486]:_MT[238], arg this[161484]:DefaultAssociativeArr[161418](?), arg f[160757]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160767 call(160762 call . this[161484] c"dsiSerialReadWrite") f[160757])
  }
  function DefaultAssociativeArr[161418](?).dsiSorted[160776](arg _mt[161490]:_MT[238], arg this[161488]:DefaultAssociativeArr[161418](?), arg comparator[160774]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tableCopy[160814](160810 for  slot[160812]  in (160805 call(160801 call .(361112 call . this[161488] c"dom") c"_fullSlots")) do
    {
      (160809 call(387261 call . this[161488] c"data") slot[160812])
    } )(160795 call chpl__buildArrayRuntimeType(160793 call chpl__ensureDomainExpr(160789 call #(160783 call chpl_build_low_bounded_range 0)(160786 call .(361107 call . this[161488] c"dom") c"dsiNumIndices")))(387255 call . this[161488] c"eltType"))
    (160817 'end of statement')
    (160823 call sort tableCopy[160814](comparator = comparator[160774]))
    {
      unknown _indexOfInterest[160830] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160831] "expr temp" "temp"
      (160840 'move' _iterator[160831](160838 call _getIterator tableCopy[160814]))
      Defer
      {
        {
          (160856 call _freeIterator _iterator[160831])
        }
      }
      { scopeless type
        (160845 'move' _indexOfInterest[160830](160842 call iteratorIndex _iterator[160831]))
      }
      ForLoop[160832]
      {
        unknown elem[160849] "index var" "insert auto destroy"
        (160851 'move' elem[160849] _indexOfInterest[160830])
        (160828 yield elem[160849])
        label _continueLabel[160835]
        _indexOfInterest[160830]
        _iterator[160831]
      }
      label _breakLabel[160836]
    }
    (355159 'used modules list'(160779 'use' Sort[267968]))
  }
  function DefaultAssociativeArr[161418](?)._doDefaultInitSlot[160871](arg _mt[161494]:_MT[238], arg this[161492]:DefaultAssociativeArr[161418](?), arg slot[160868] :
  int(64)[13], arg inAdd[160874] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(160991 call _cond_test(160881 call !(160880 call isDefaultInitializable(387271 call . this[161492] c"eltType"))))
    {
      if(160966 call _cond_test inAdd[160874])
      {
        (160922 call halt(160919 call + "Can't resize domains whose arrays' elements don't " "have default values"))
      }
      {
        (160963 call halt(160960 call + "Can't default initialize associative arrays whose " "elements have no default value"))
      }
    }
    {
      unknown initval[160972] "no auto destroy"(387277 call . this[161492] c"eltType")
      (160975 'end of statement')
      unknown dst[160981] "ref var"(160980 call(387282 call . this[161492] c"data") slot[160868])
      (160984 'end of statement')
      (160989 '=' dst[160981] initval[160972])
    }
  }
  function DefaultAssociativeArr[161418](?)._defaultInitSlot[161004](arg _mt[161498]:_MT[238], arg this[161496]:DefaultAssociativeArr[161418](?), arg slot[161001] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161011 call(387289 call . this[161496] c"_doDefaultInitSlot") slot[161001](inAdd = 1))
  }
  function DefaultAssociativeArr[161418](?)._deinitSlot[161022](arg _mt[161502]:_MT[238], arg this[161500]:DefaultAssociativeArr[161418](?), arg slot[161019] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161030 call(387296 call . this[161500] c"_deinitElement")(161028 call(387301 call . this[161500] c"data") slot[161019]))
  }
  function DefaultAssociativeArr[161418](?)._elementNeedsDeinit[161037](arg _mt[161506]:_MT[238], arg this[161504]:DefaultAssociativeArr[161418](?)) param : _unknown[51] "method" "primary method"
  {
    (161043 return(161042 'needs auto destroy'(387307 call . this[161504] c"eltType")))
  }
  function DefaultAssociativeArr[161418](?)._deinitElement[161054](arg _mt[161510]:_MT[238], arg this[161508]:DefaultAssociativeArr[161418](?), ref arg elt[161051] :
  (387312 call . this[161508] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(161065 call _cond_test(161058 call(387318 call . this[161508] c"_elementNeedsDeinit")))
    {
      (161062 call chpl__autoDestroy elt[161051])
    }
  }
  function DefaultAssociativeArr[161418](?)._startRehash[161078](arg _mt[161514]:_MT[238], arg this[161512]:DefaultAssociativeArr[161418](?), arg newSize[161075] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161082 call =(387324 call . this[161512] c"tmpData")(387329 call . this[161512] c"data"))
    (161098 call =(387334 call . this[161512] c"data")(161097 call(161091 call .(161088 call .(361117 call . this[161512] c"dom") c"table") c"allocateData") newSize[161075](387340 call . this[161512] c"eltType")))
  }
  function DefaultAssociativeArr[161418](?)._finishRehash[161109](arg _mt[161518]:_MT[238], arg this[161516]:DefaultAssociativeArr[161418](?), arg oldSize[161106] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161115 call _ddata_free(387345 call . this[161516] c"tmpData") oldSize[161106])
    (161120 call =(387351 call . this[161516] c"tmpData") nil[44])
  }
  function DefaultAssociativeArr[161418](?)._moveElementDuringRehash[161131](arg _mt[161522]:_MT[238], arg this[161520]:DefaultAssociativeArr[161418](?), arg oldslot[161128] :
  int(64)[13], arg newslot[161134] :
  int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const src[161141] "const" "ref var"(161140 call(387356 call . this[161520] c"tmpData") oldslot[161128])
    (161144 'end of statement')
    unknown dst[161150] "ref var"(161149 call(387362 call . this[161520] c"data") newslot[161134])
    (161153 'end of statement')
    (161158 '=' dst[161150] src[161141])
  }
  function DefaultAssociativeArr[161418](?).dsiTargetLocales[161164](arg _mt[161526]:_MT[238], arg this[161524]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method"
  {
    (161173 return(161171 call chpl__buildArrayExpr(161168 call chpl_localeID_to_locale(161167 '_wide_get_locale' this[161524]))))
  }
  function DefaultAssociativeArr[161418](?).dsiHasSingleLocalSubdomain[161180](arg _mt[161530]:_MT[238], arg this[161528]:DefaultAssociativeArr[161418](?)) param : _unknown[51] "method" "primary method"
  {
    (161183 return 1)
  }
  function DefaultAssociativeArr[161418](?).dsiLocalSubdomain[161194](arg _mt[161534]:_MT[238], arg this[161532]:DefaultAssociativeArr[161418](?), arg loc[161191] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(161231 call _cond_test(161201 call ==(161198 call chpl_localeID_to_locale(161197 '_wide_get_locale' this[161532])) loc[161191]))
    {
      (161207 return(161206 call _getDomain(387373 call . this[161532] c"dom")))
    }
    {
      unknown a[161223](161221 call chpl__buildDomainRuntimeType defaultDist[94050](161211 call .(361122 call . this[161532] c"dom") c"idxType")(parSafe =(161216 call .(361127 call . this[161532] c"dom") c"parSafe")))
      (161226 'end of statement')
      (161229 return a[161223])
    }
  }
  function DefaultAssociativeArr[161418](?).dsiElementInitializationComplete[161240](arg _mt[161538]:_MT[238], arg this[161536]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161247 call =(161243 call . this[161536] c"eltsNeedDeinit") 1)
  }
  function DefaultAssociativeArr[161418](?).dsiElementDeinitializationComplete[161255](arg _mt[161542]:_MT[238], arg this[161540]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161262 call =(161258 call . this[161540] c"eltsNeedDeinit") 0)
  }
  function DefaultAssociativeArr[161418](?).dsiDestroyArr[161274](arg _mt[161546]:_MT[238], arg this[161544]:DefaultAssociativeArr[161418](?), arg deinitElts[161271] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(161402 call _cond_test(161281 call && deinitElts[161271](161278 call . this[161544] c"eltsNeedDeinit")))
    {
      if(161397 call _cond_test(161285 call(387380 call . this[161544] c"_elementNeedsDeinit")))
      {
        if(161392 call _cond_test(161289 call _deinitElementsIsParallel(387385 call . this[161544] c"eltType")))
        {
          Forall {
            induction variables:
              
              unknown slot[161322] "index var" "insert auto destroy"
            iterated expressions:
              (161299 call(161295 call .(161292 call .(361135 call . this[161544] c"dom") c"table") c"allSlots"))
            shadow variables:
            other variables
              forall body
            {
              if(161316 call _cond_test(161306 call(161301 call .(361140 call . this[161544] c"dom") c"_isSlotFull") slot[161322]))
              {
                (161313 call(387390 call . this[161544] c"_deinitElement")(161311 call(387395 call . this[161544] c"data") slot[161322]))
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161357] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161358] "expr temp" "temp"
            (161367 'move' _iterator[161358](161365 call _getIterator(161335 call(161331 call .(161328 call .(361145 call . this[161544] c"dom") c"table") c"allSlots"))))
            Defer
            {
              {
                (161384 call _freeIterator _iterator[161358])
              }
            }
            { scopeless type
              (161373 'move' _indexOfInterest[161357](161370 call iteratorIndex _iterator[161358]))
            }
            ForLoop[161359]
            {
              unknown slot[161377] "index var" "insert auto destroy"
              (161379 'move' slot[161377] _indexOfInterest[161357])
              {
                if(161352 call _cond_test(161342 call(161337 call .(361150 call . this[161544] c"dom") c"_isSlotFull") slot[161377]))
                {
                  (161349 call(387401 call . this[161544] c"_deinitElement")(161347 call(387406 call . this[161544] c"data") slot[161377]))
                }
              }
              label _continueLabel[161362]
              _indexOfInterest[161357]
              _iterator[161358]
            }
            label _breakLabel[161363]
          }
        }
      }
    }
    (161412 call =(161408 call . this[161544] c"eltsNeedDeinit") 0)
  }
  type DefaultAssociativeArr[161418](?) val super[355690]:AbsBaseArr[149697](?) "super class" unknown idxType[158982] "type variable" unknown parSafeDom[158986] "param" bool[10] unknown dom[158997](158995 call unmanaged DefaultAssociativeDom[415471](?) idxType[158982](parSafe = parSafeDom[158986])) unknown dataSize[159002] int(64)[13] unknown data[159010](159009 call _ddata[11695](?) eltType[149671]) unknown tmpData[159018](159017 call _ddata[11695](?) eltType[149671]) unknown eltsNeedDeinit[159023] 1
  type DefaultAssociativeArr[386698](?)
  (355145 'used modules list'(156237 'use' DSIUtil[230888])(156244 'use' ChapelDistribution[145415])(156246 'use' ChapelRange[64180])(156247 'use' SysBasic[223516])(156248 'use' ChapelArray[113672])(156252 'use' ChapelBase[307])(156254 'use' ChapelLocks[187256])(156255 'use' IO[230891])(156258 'use' ChapelHashing[155365])(156260 'use' ChapelHashtable[200393])(156262 'use' SysError[264231]))
}