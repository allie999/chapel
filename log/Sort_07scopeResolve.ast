AST dump for Sort after pass scopeResolve.
Module use list: ChapelStandard List Reflection MSBRadixSort QuickSort 

{
  const defaultComparator[267977] "const" DefaultComparator[290537]
  (267980 'end of statement')
  const reverseComparator[267985] "const"(267984 call ReverseComparator[291174](?) DefaultComparator[290537])
  (267988 'end of statement')
  function compareByPart[267996](arg a[267993] :
  unknown t[267991], arg b[267999] :
  t[267991], arg comparator[268004] :
  unknown rec[268002]) : _unknown[51] "inline" "private"
  {
    unknown curPart[268008] 0
    (268011 'end of statement')
    {
      unknown tmp[268121] "temp"
      (268139 'move' tmp[268121](268137 call _cond_test 1))
      WhileDo[268126]
      {
        {
          unknown tmp[268029] "temp"(268028 call(268022 call . comparator[268004] c"keyPart") a[267993] curPart[268008])
          (268036 call _check_tuple_var_decl tmp[268029] 2)
          unknown aSection[268014](268030 call tmp[268029] 0)
          unknown aPart[268016](268033 call tmp[268029] 1)
          (268041 'end of statement')
          unknown tmp[268056] "temp"(268055 call(268049 call . comparator[268004] c"keyPart") b[267999] curPart[268008])
          (268063 call _check_tuple_var_decl tmp[268056] 2)
          unknown bSection[268043](268057 call tmp[268056] 0)
          unknown bPart[268045](268060 call tmp[268056] 1)
          (268068 'end of statement')
          if(268086 call _cond_test(268077 call ||(268071 call != aSection[268014] 0)(268075 call != bSection[268043] 0)))
          {
            (268083 return(268081 call - aSection[268014] bSection[268043]))
          }
          if(268100 call _cond_test(268092 call < aPart[268016] bPart[268045]))
          {
            (268097 return(268095 call - 1))
          }
          if(268112 call _cond_test(268106 call > aPart[268016] bPart[268045]))
          {
            (268109 return 1)
          }
          (268118 call += curPart[268008] 1)
        }
        label _continueLabel[268124]
        (268132 'move' tmp[268121](268130 call _cond_test 1))
        tmp[268121]
      }
      label _breakLabel[268125]
    }
    (268143 return 1)
  }
  function chpl_compare[268154](arg a[268151] :
  unknown t[268149], arg b[268157] :
  t[268149], arg comparator[268162] :
  unknown rec[268160]) : _unknown[51] "inline" "no doc"
  {
    if(268329 call _cond_test(268184 call canResolveMethod comparator[268162] "key" a[268151]))
    {
      (268207 return(268206 call(268188 call . defaultComparator[267977] c"compare")(268197 call(268192 call . comparator[268162] c"key") a[268151])(268205 call(268200 call . comparator[268162] c"key") b[268157])))
    }
    {
      if(268324 call _cond_test(268230 call canResolveMethod comparator[268162] "compare" a[268151] b[268157]))
      {
        (268239 return(268238 call(268232 call . comparator[268162] c"compare") a[268151] b[268157]))
      }
      {
        if(268320 call _cond_test(268262 call canResolveMethod comparator[268162] "keyPart" a[268151] 0))
        {
          (268269 return(268268 call compareByPart a[268151] b[268157] comparator[268162]))
        }
        {
          (268317 call compilerError(268314 call +(268295 call + "The comparator "(268293 call _cast string[26](268291 'typeof' comparator[268162]))) " requires a 'key(a)', 'compare(a, b)', or 'keyPart(a, i)' method"))
        }
      }
    }
  }
  function chpl_check_comparator[268341](arg comparator[268339]:_any[178](?), arg eltType[268343]:_any[178](?)) param : _unknown[51] "no doc" "unsafe"
  {
    const data[268346] "const" eltType[268343]
    (268349 'end of statement')
    unknown errorDepth[268352] "param" 2
    (268355 'end of statement')
    if(268887 call _cond_test(268359 call ==(268357 'typeof' comparator[268339]) DefaultComparator[290537]))
    {
    }
    {
      if(268882 call _cond_test(268367 call canResolveMethod comparator[268339] "key" data[268346]))
      {
        const keydata[268375] "const"(268374 call(268369 call . comparator[268339] c"key") data[268346])
        (268378 'end of statement')
        unknown keytype[268382] "type variable"(268381 'typeof' keydata[268375])
        if(268443 call _cond_test(268391 call !(268390 call canResolve "<" keydata[268375] keydata[268375])))
        {
          (268441 call compilerError(errorDepth = errorDepth[268352]) "The key method in "(268417 call _cast string[26](268415 'typeof' comparator[268339])) " must return an object that supports the '<' function when used with "(268438 call _cast string[26] eltType[268343]) " elements")
        }
        if(268484 call _cond_test(268454 call canResolveMethod comparator[268339] "compare" data[268346] data[268346]))
        {
          (268481 call compilerError(errorDepth = errorDepth[268352])(268462 call _cast string[26](268460 'typeof' comparator[268339])) " contains both a key method and a compare method")
        }
        if(268524 call _cond_test(268494 call canResolveMethod comparator[268339] "keyPart" data[268346] 0))
        {
          (268521 call compilerError(errorDepth = errorDepth[268352])(268502 call _cast string[26](268500 'typeof' comparator[268339])) " contains both a key method and a keyPart method")
        }
      }
      {
        if(268877 call _cond_test(268534 call canResolveMethod comparator[268339] "compare" data[268346] data[268346]))
        {
          unknown comparetype[268544] "type variable"(268543 'typeof'(268542 call(268536 call . comparator[268339] c"compare") data[268346] data[268346]))
          if(268604 call _cond_test(268552 call !(268551 call isNumericType comparetype[268544])))
          {
            (268602 call compilerError(errorDepth = errorDepth[268352]) "The compare method in "(268578 call _cast string[26](268576 'typeof' comparator[268339])) " must return a numeric type when used with "(268599 call _cast string[26] eltType[268343]) " elements")
          }
        }
        {
          if(268873 call _cond_test(268615 call canResolveMethod comparator[268339] "keyPart" data[268346] 0))
          {
            unknown idx[268618] 0 int(64)[13]
            (268621 'end of statement')
            unknown partType[268632] "type variable"(268631 'typeof'(268630 call(268624 call . comparator[268339] c"keyPart") data[268346] idx[268618]))
            if(268691 call _cond_test(268639 call !(268638 call isTupleType partType[268632])))
            {
              (268689 call compilerError(errorDepth = errorDepth[268352]) "The keyPart method in "(268665 call _cast string[26](268663 'typeof' comparator[268339])) " must return a tuple when used with "(268686 call _cast string[26] eltType[268343]) " elements")
            }
            unknown tmp[268697] partType[268632]
            (268700 'end of statement')
            unknown expectInt[268705](268704 call tmp[268697] 0)
            (268708 'end of statement')
            unknown expectIntUint[268713](268712 call tmp[268697] 1)
            (268716 'end of statement')
            if(268758 call _cond_test(268722 call !(268721 call isInt(268719 'typeof' expectInt[268705]))))
            {
              (268756 call compilerError(errorDepth = errorDepth[268352]) "The keyPart method in "(268732 call _cast string[26](268730 'typeof' comparator[268339])) " must return a tuple with element 0 of type int(\?) when used with "(268753 call _cast string[26] eltType[268343]) " elements")
            }
            if(268809 call _cond_test(268773 call !(268771 call ||(268766 call isInt expectIntUint[268713])(268770 call isUint expectIntUint[268713]))))
            {
              (268807 call compilerError(errorDepth = errorDepth[268352]) "The keyPart method in "(268783 call _cast string[26](268781 'typeof' comparator[268339])) " must return a tuple with element 1 of type  int(\?) or uint(\?) when used with "(268804 call _cast string[26] eltType[268343]) " elements")
            }
          }
          {
            (268870 call compilerError(errorDepth = errorDepth[268352])(268868 call +(268862 call +(268843 call +(268824 call + "The comparator "(268822 call _cast string[26](268820 'typeof' comparator[268339]))) " requires a 'key(a)', 'compare(a, b)', or 'keyPart(a, i)' method ") " for element type ")(268866 call _cast string[26] eltType[268343])))
          }
        }
      }
    }
    (268893 return 1)
  }
  function radixSortOk[268909](arg Data[268906] :
  (268904 call chpl__buildArrayRuntimeType unknown Dom[268899] unknown eltType[268902]), arg comparator[268911]:_any[178](?)) param : _unknown[51] "private" "unsafe"
  {
    if(268986 call _cond_test(268917 call !(268914 call . Dom[268899] c"stridable")))
    {
      unknown tmp[268927](268926 'typeof'(268925 call Data[268906](268921 call . Dom[268899] c"alignedLow")))
      (268930 'end of statement')
      if(268981 call _cond_test(268938 call canResolveMethod comparator[268911] "keyPart" tmp[268927] 0))
      {
        (268940 return 1)
      }
      {
        if(268977 call _cond_test(268948 call canResolveMethod comparator[268911] "key" tmp[268927]))
        {
          unknown key[268957](268956 'typeof'(268955 call(268950 call . comparator[268911] c"key") tmp[268927]))
          (268960 'end of statement')
          if(268972 call _cond_test(268968 call canResolveMethod defaultComparator[267977] "keyPart" key[268957] 0))
          {
            (268970 return 1)
          }
        }
      }
    }
    (268992 return 0)
  }
  function sort[269008](arg Data[269005] :
  (269003 call chpl__buildArrayRuntimeType unknown Dom[268998] unknown eltType[269001]), arg comparator[269013] :
  unknown rec[269010] =
  defaultComparator[267977]) : _unknown[51] "no return value for void"
  {
    (269021 call chpl_check_comparator comparator[269013] eltType[269001])
    if(269036 call _cond_test(269032 call >=(269025 call . Dom[268998] c"low")(269029 call . Dom[268998] c"high")))
    {
      (269034 return _void[55])
    }
    if(269072 call _cond_test(269045 call radixSortOk Data[269005] comparator[269013]))
    {
      (269056 call msbRadixSort module=[255] MSBRadixSort[287989] Data[269005](comparator = comparator[269013]))
      (364109 'referenced modules list' MSBRadixSort[287989])
    }
    {
      (269069 call quickSort module=[255] QuickSort[272039] Data[269005](comparator = comparator[269013]))
      (364115 'referenced modules list' QuickSort[272039])
    }
  }
  function sort[269090](arg Data[269087] :
  (269085 call chpl__buildArrayRuntimeType unknown Dom[269080] unknown eltType[269083]), arg comparator[269095] :
  unknown rec[269092] =
  defaultComparator[267977]) : _unknown[51] "no doc" "no return value for void"
  {
    (269125 call compilerError "sort() requires 1-D array")
  }
  where {
    (269104 call !=(269100 call . Dom[269080] c"rank") 1)
  }
  function isSorted[269143](arg Data[269140] :
  (269138 call chpl__buildArrayRuntimeType unknown Dom[269133] unknown eltType[269136]), arg comparator[269148] :
  unknown rec[269145] =
  defaultComparator[267977]) : _unknown[51]
  {
    (269157 call chpl_check_comparator comparator[269148] eltType[269136])
    const stride[269175] "const"(269172 IfExpr (269161 call . Dom[269133] c"stridable") then
    { scopeless
      (269170 call abs(269166 call . Dom[269133] c"stride"))
    } else
    { scopeless
      1
    } )
    (269178 'end of statement')
    unknown sorted[269180] 1
    (269183 'end of statement')
    Forall {
      induction variables:
        
        unknown element[269243] "index var" "insert auto destroy"
        
        unknown i[269245] "index var" "insert auto destroy"
      iterated expressions:
        Data[269140]
        Dom[269133]
      shadow variables:
        sorted[269195] 'reduce' intent outer var sorted[269180]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        if(269237 call _cond_test(269206 call > i[269245](269203 call . Dom[269133] c"alignedLow")))
        {
          {
            unknown tmp[269225] "temp"
            (269228 'move' tmp[269225](269227 'addr of' sorted[269195]))
            (269233 call = tmp[269225](269230 call && tmp[269225](269222 call <=(269220 call chpl_compare(269216 call Data[269140](269213 call - i[269245] stride[269175])) element[269243] comparator[269148]) 0)))
          }
        }
      }
    }
    (269249 return sorted[269180])
  }
  { scopeless type
    bool[10]
  }
  function isSorted[269266](arg Data[269263] :
  (269261 call chpl__buildArrayRuntimeType unknown Dom[269256] unknown eltType[269259]), arg comparator[269271] :
  unknown rec[269268] =
  defaultComparator[267977]) : _unknown[51] "no doc" "no return value for void"
  {
    (269301 call compilerError "isSorted() requires 1-D array")
  }
  where {
    (269280 call !=(269276 call . Dom[269256] c"rank") 1)
  }
  function sorted[269311](arg x[269309]:_any[178](?), arg comparator[269316] :
  unknown rec[269313] =
  defaultComparator[267977]) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown y[269321] x[269309]
    (269324 'end of statement')
    if(269353 call _cond_test(269330 call !(269329 call isArrayValue y[269321])))
    {
      (269351 call compilerError "Sort.sorted called on non-iterable")
    }
    (269363 call sort y[269321](comparator = comparator[269316]))
    {
      unknown _indexOfInterest[269370] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[269371] "expr temp" "temp"
      (269380 'move' _iterator[269371](269378 call _getIterator y[269321]))
      Defer
      {
        {
          (269396 call _freeIterator _iterator[269371])
        }
      }
      { scopeless type
        (269385 'move' _indexOfInterest[269370](269382 call iteratorIndex _iterator[269371]))
      }
      ForLoop[269372]
      {
        unknown i[269389] "index var" "insert auto destroy"
        (269391 'move' i[269389] _indexOfInterest[269370])
        (269368 yield i[269389])
        label _continueLabel[269375]
        _indexOfInterest[269370]
        _iterator[269371]
      }
      label _breakLabel[269376]
    }
  }
  def module InsertionSort[270092]  
  def module QuickSort[272039]  
  def module ShellSort[273520]  
  def module RadixSortHelp[276074]  
  def module ShallowCopy[277381]  
  def module MSBRadixSort[287989]  
  function DefaultComparator[290537].compare[289900](arg _mt[290541]:_MT[238], arg this[290539]:DefaultComparator[290537], arg a[289898]:_any[178](?), arg b[289902]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    if(289930 call _cond_test(289906 call < a[289898] b[289902]))
    {
      (289911 return(289909 call - 1))
    }
    {
      if(289925 call _cond_test(289916 call < b[289902] a[289898]))
      {
        (289919 return 1)
      }
      {
        (289923 return 0)
      }
    }
  }
  function DefaultComparator[290537].keyPart[289944](arg _mt[290545]:_MT[238], arg this[290543]:DefaultComparator[290537], arg x[289941] :
  integral[199](?), arg i[289947] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown section[289986](289983 IfExpr (289965 call > i[289947] 0) then
    { scopeless
      (289974 call -(289972 call _cast(289971 call int(64)[13] 8) 1))
    } else
    { scopeless
      (289981 call _cast(289980 call int(64)[13] 8) 0)
    } )(289962 call int(64)[13] 8)
    (289989 'end of statement')
    (289996 return(289994 call _build_tuple section[289986] x[289941]))
  }
  { scopeless type
    (289957 call _build_tuple(289953 call int(64)[13] 8)(289955 'typeof' x[289941]))
  }
  function DefaultComparator[290537].keyPart[290007](arg _mt[290549]:_MT[238], arg this[290547]:DefaultComparator[290537], arg x[290004] :
  chpl_anyreal[193](?), arg i[290010] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown section[290055](290052 IfExpr (290034 call > i[290010] 0) then
    { scopeless
      (290043 call -(290041 call _cast(290040 call int(64)[13] 8) 1))
    } else
    { scopeless
      (290050 call _cast(290049 call int(64)[13] 8) 0)
    } )(290031 call int(64)[13] 8)
    (290058 'end of statement')
    unknown nbits[290065] "param"(290064 call numBits(290062 'typeof' x[290004]))
    (290068 'end of statement')
    unknown src[290070] x[290004]
    (290073 'end of statement')
    unknown dst[290078](290077 call uint(64)[115] nbits[290065])
    (290081 'end of statement')
    (290097 call c_memcpy(290086 call c_ptrTo dst[290078])(290091 call c_ptrTo src[290070])(290096 call c_sizeof(290094 'typeof' src[290070])))
    if(290141 call _cond_test(290107 call ==(290104 call >> dst[290078](290102 call - nbits[290065] 1)) 1))
    {
      (290113 call = dst[290078](290111 call ~ dst[290078]))
    }
    {
      const one[290122] "const" 1(290120 call uint(64)[115] nbits[290065])
      (290125 'end of statement')
      (290138 call = dst[290078](290136 call ^ dst[290078](290134 call << one[290122](290132 call - nbits[290065] 1))))
    }
    (290150 return(290148 call _build_tuple section[290055] dst[290078]))
  }
  { scopeless type
    (290026 call _build_tuple(290016 call int(64)[13] 8)(290024 call uint(64)[115](290022 call numBits(290020 'typeof' x[290004]))))
  }
  function DefaultComparator[290537].keyPart[290161](arg _mt[290553]:_MT[238], arg this[290551]:DefaultComparator[290537], arg x[290158] :
  chpl_anyimag[190](?), arg i[290164] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (290197 return(290196 call(404015 call . this[290551] c"keyPart")(290192 call _cast(290191 call real(64)[16](290189 call numBits(290187 'typeof' x[290158]))) x[290158]) i[290164]))
  }
  { scopeless type
    (290180 call _build_tuple(290170 call int(64)[13] 8)(290178 call uint(64)[115](290176 call numBits(290174 'typeof' x[290158]))))
  }
  function DefaultComparator[290537].keyPart[290209](arg _mt[290557]:_MT[238], arg this[290555]:DefaultComparator[290537], arg x[290206] :
  _tuple[56199](?), arg i[290212] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    const tmp[290271] "const" "temp"(290270 call(290261 call . this[290555] c"keyPart")(290267 call x[290206] i[290212]) 1)
    (290275 call _check_tuple_var_decl tmp[290271] 2)
    const part[290257] "const"(290272 call tmp[290271] 1)
    (290280 'end of statement')
    if(290309 call _cond_test(290287 call >= i[290212](290284 call . x[290206] c"size")))
    {
      (290300 return(290298 call _build_tuple(290290 call - 1)(290295 call _cast(290294 'typeof' part[290257]) 0)))
    }
    {
      (290307 return(290305 call _build_tuple 0 part[290257]))
    }
  }
  where {
    (290253 call &&(290218 call isHomogeneousTuple x[290206])(290251 call ||(290242 call ||(290233 call ||(290225 call isInt(290223 call x[290206] 0))(290232 call isUint(290230 call x[290206] 0)))(290241 call isReal(290239 call x[290206] 0)))(290250 call isImag(290248 call x[290206] 0))))
  }
  function DefaultComparator[290537].keyPart[290324](arg _mt[290561]:_MT[238], arg this[290559]:DefaultComparator[290537], arg x[290321] :
  string[26], arg i[290327] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    if(290356 call _cond_test 1)
    {
      (290354 call assert(290351 call ==(290344 call . x[290321] c"locale_id")(290348 call .(364722 call here[90435]) c"id")))
    }
    unknown ptr[290377](290375 call _cast(290374 call c_ptr[205045](?)(290372 call uint(64)[115] 8))(290367 call(290363 call . x[290321] c"c_str")))
    (290380 'end of statement')
    unknown len[290385](290382 call . x[290321] c"numBytes")
    (290388 'end of statement')
    unknown section[290412](290409 IfExpr (290391 call < i[290327] len[290385]) then
    { scopeless
      (290398 call _cast(290397 call int(64)[13] 8) 0)
    } else
    { scopeless
      (290407 call -(290405 call _cast(290404 call int(64)[13] 8) 1))
    } )
    (290415 'end of statement')
    unknown part[290434](290431 IfExpr (290418 call < i[290327] len[290385]) then
    { scopeless
      (290423 call ptr[290377] i[290327])
    } else
    { scopeless
      (290429 call _cast(290428 call uint(64)[115] 8) 0)
    } )
    (290437 'end of statement')
    (290443 return(290441 call _build_tuple section[290412] part[290434]))
  }
  { scopeless type
    (290339 call _build_tuple(290333 call int(64)[13] 8)(290337 call uint(64)[115] 8))
  }
  function DefaultComparator[290537].keyPart[290454](arg _mt[290565]:_MT[238], arg this[290563]:DefaultComparator[290537], arg x[290451] :
  c_string[19], arg i[290457] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ptr[290481](290479 call _cast(290478 call c_ptr[205045](?)(290476 call uint(64)[115] 8)) x[290451])
    (290484 'end of statement')
    unknown byte[290490](290489 call ptr[290481] i[290457])
    (290493 'end of statement')
    unknown section[290517](290514 IfExpr (290496 call != byte[290490] 0) then
    { scopeless
      (290503 call _cast(290502 call int(64)[13] 8) 0)
    } else
    { scopeless
      (290512 call -(290510 call _cast(290509 call int(64)[13] 8) 1))
    } )
    (290520 'end of statement')
    unknown part[290522] byte[290490]
    (290525 'end of statement')
    (290531 return(290529 call _build_tuple section[290517] part[290522]))
  }
  { scopeless type
    (290469 call _build_tuple(290463 call int(64)[13] 8)(290467 call uint(64)[115] 8))
  }
  type DefaultComparator[290537]
  function ReverseComparator[291174](?).init[290575](arg _mt[291178]:_MT[238], arg this[291176]:ReverseComparator[291174](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (290584 call =(290580 call . this[291176] c"comparator") defaultComparator[267977])
  }
  function ReverseComparator[291174](?).init[290594](arg _mt[291182]:_MT[238], arg this[291180]:ReverseComparator[291174](?), arg comparator[290592]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (290601 call =(290597 call . this[291180] c"comparator") comparator[290592])
  }
  function ReverseComparator[291174](?).init=[290616](arg _mt[291186]:_MT[238], arg this[291184]:ReverseComparator[291174](?), arg revcomp[290613] :
  (290612 call ReverseComparator[291174](?) ?[260])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (290626 call =(290619 call . this[291184] c"comparator")(290623 call . revcomp[290613] c"comparator"))
  }
  function ReverseComparator[291174](?).typeIsBitReversible[290636](arg _mt[291190]:_MT[238], arg this[291188]:ReverseComparator[291174](?), arg t[290634]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290658 call _cond_test(290641 call isHomogeneousTupleType t[290634]))
    {
      unknown tmp[290643] t[290634]
      (290646 'end of statement')
      (290656 return(290655 call(404059 call . this[291188] c"typeIsBitReversible")(290653 'typeof'(290652 call tmp[290643] 0))))
    }
    if(290670 call _cond_test(290666 call isUintType t[290634]))
    {
      (290668 return 1)
    }
    if(290682 call _cond_test(290678 call isIntType t[290634]))
    {
      (290680 return 1)
    }
    (290688 return 0)
  }
  function ReverseComparator[291174](?).typeIsNegateReversible[290696](arg _mt[291194]:_MT[238], arg this[291192]:ReverseComparator[291174](?), arg t[290694]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290718 call _cond_test(290701 call isHomogeneousTupleType t[290694]))
    {
      unknown tmp[290703] t[290694]
      (290706 'end of statement')
      (290716 return(290715 call(404070 call . this[291192] c"typeIsNegateReversible")(290713 'typeof'(290712 call tmp[290703] 0))))
    }
    if(290736 call _cond_test(290731 call ||(290726 call isIntType t[290694])(290730 call isUintType t[290694])))
    {
      (290734 return 0)
    }
    if(290748 call _cond_test(290744 call isNumericType t[290694]))
    {
      (290746 return 1)
    }
    (290754 return 0)
  }
  function ReverseComparator[291174](?).hasKeyPart[290762](arg _mt[291198]:_MT[238], arg this[291196]:ReverseComparator[291174](?), arg a[290760]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    (290774 return(290773 call canResolveMethod(290766 call . this[291196] c"comparator") "keyPart" a[290760] 0))
  }
  function ReverseComparator[291174](?).hasKeyPartFromKey[290783](arg _mt[291202]:_MT[238], arg this[291200]:ReverseComparator[291174](?), arg a[290781]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290816 call _cond_test(290793 call canResolveMethod(290787 call . this[291200] c"comparator") "key" a[290781]))
    {
      unknown key[290802](290801 'typeof'(290800 call(290795 call .(364734 call . this[291200] c"comparator") c"key") a[290781]))
      (290805 'end of statement')
      (290814 return(290813 call canResolveMethod defaultComparator[267977] "keyPart" key[290802] 0))
    }
    (290822 return 0)
  }
  function ReverseComparator[291174](?).hasCompare[290830](arg _mt[291206]:_MT[238], arg this[291204]:ReverseComparator[291174](?), arg a[290828]:_any[178](?), arg b[290832]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    (290844 return(290843 call canResolveMethod(290836 call . this[291204] c"comparator") "compare" a[290828] b[290832]))
  }
  function ReverseComparator[291174](?).hasCompareFromKey[290853](arg _mt[291210]:_MT[238], arg this[291208]:ReverseComparator[291174](?), arg a[290851]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290886 call _cond_test(290863 call canResolveMethod(290857 call . this[291208] c"comparator") "key" a[290851]))
    {
      unknown key[290872](290871 'typeof'(290870 call(290865 call .(364741 call . this[291208] c"comparator") c"key") a[290851]))
      (290875 'end of statement')
      (290884 return(290883 call canResolveMethod defaultComparator[267977] "compare" key[290872] key[290872]))
    }
    (290892 return 0)
  }
  function ReverseComparator[291174](?).getKeyPart[290900](arg _mt[291214]:_MT[238], arg this[291212]:ReverseComparator[291174](?), arg cmp[290898]:_any[178](?), arg a[290902]:_any[178](?), arg i[290904]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown tmp[290919] "temp"(290918 call(290912 call . cmp[290898] c"keyPart") a[290902] i[290904])
    (290926 call _check_tuple_var_decl tmp[290919] 2)
    unknown section[290906](290920 call tmp[290919] 0)
    unknown part[290908](290923 call tmp[290919] 1)
    (290931 'end of statement')
    if(290993 call _cond_test(290937 call(404092 call . this[291212] c"typeIsBitReversible")(290935 'typeof' part[290908])))
    {
      (290947 return(290945 call _build_tuple(290939 call - section[290906])(290942 call ~ part[290908])))
    }
    {
      if(290989 call _cond_test(290954 call(404099 call . this[291212] c"typeIsNegateReversible")(290952 'typeof' part[290908])))
      {
        (290964 return(290962 call _build_tuple(290956 call - section[290906])(290959 call - part[290908])))
      }
      {
        (290986 call compilerError "keyPart must return int or uint")
      }
    }
  }
  function ReverseComparator[291174](?).keyPart[291004](arg _mt[291218]:_MT[238], arg this[291216]:ReverseComparator[291174](?), arg a[291002]:_any[178](?), arg i[291006]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (291026 call chpl_check_comparator(291020 call . this[291216] c"comparator")(291025 'typeof' a[291002]))
    if(291063 call _cond_test(291032 call(404121 call . this[291216] c"hasKeyPartFromKey") a[291002]))
    {
      (291048 return(291047 call(404128 call . this[291216] c"getKeyPart") defaultComparator[267977](291045 call(291040 call .(291037 call . this[291216] c"comparator") c"key") a[291002]) i[291006]))
    }
    {
      (291060 return(291059 call(404135 call . this[291216] c"getKeyPart")(291053 call . this[291216] c"comparator") a[291002] i[291006]))
    }
  }
  where {
    (291016 call ||(291011 call(404108 call . this[291216] c"hasKeyPart") a[291002])(291015 call(404115 call . this[291216] c"hasKeyPartFromKey") a[291002]))
  }
  function ReverseComparator[291174](?).doCompare[291074](arg _mt[291222]:_MT[238], arg this[291220]:ReverseComparator[291174](?), arg cmp[291072]:_any[178](?), arg a[291076]:_any[178](?), arg b[291078]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (291088 return(291087 call(291081 call . cmp[291072] c"compare") b[291078] a[291076]))
  }
  function ReverseComparator[291174](?).compare[291097](arg _mt[291226]:_MT[238], arg this[291224]:ReverseComparator[291174](?), arg a[291095]:_any[178](?), arg b[291099]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (291120 call chpl_check_comparator(291114 call . this[291224] c"comparator")(291119 'typeof' a[291095]))
    if(291166 call _cond_test(291126 call(404159 call . this[291224] c"hasCompareFromKey") a[291095]))
    {
      (291151 return(291150 call(404166 call . this[291224] c"doCompare") defaultComparator[267977](291139 call(291134 call .(291131 call . this[291224] c"comparator") c"key") a[291095])(291149 call(291144 call .(291141 call . this[291224] c"comparator") c"key") b[291099])))
    }
    {
      (291163 return(291162 call(404173 call . this[291224] c"doCompare")(291156 call . this[291224] c"comparator") a[291095] b[291099]))
    }
  }
  where {
    (291110 call ||(291105 call(404145 call . this[291224] c"hasCompare") a[291095] b[291099])(291109 call(404153 call . this[291224] c"hasCompareFromKey") a[291095]))
  }
  type ReverseComparator[291174](?) unknown comparator[290569]
  (355328 'used modules list'(353018 'use' ChapelStandard[20264])(267970 'use' List[298216])(267974 'use' Reflection[224882]))
}