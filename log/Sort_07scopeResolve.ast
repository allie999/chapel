AST dump for Sort after pass scopeResolve.
Module use list: ChapelStandard List Reflection MSBRadixSort QuickSort 

{
  const defaultComparator[267998] "const" DefaultComparator[290566]
  (268001 'end of statement')
  const reverseComparator[268006] "const"(268005 call ReverseComparator[291203](?) DefaultComparator[290566])
  (268009 'end of statement')
  function compareByPart[268017](arg a[268014] :
  unknown t[268012], arg b[268020] :
  t[268012], arg comparator[268025] :
  unknown rec[268023]) : _unknown[51] "inline" "private"
  {
    unknown curPart[268029] 0
    (268032 'end of statement')
    {
      unknown tmp[268142] "temp"
      (268160 'move' tmp[268142](268158 call _cond_test 1))
      WhileDo[268147]
      {
        {
          unknown tmp[268050] "temp"(268049 call(268043 call . comparator[268025] c"keyPart") a[268014] curPart[268029])
          (268057 call _check_tuple_var_decl tmp[268050] 2)
          unknown aSection[268035](268051 call tmp[268050] 0)
          unknown aPart[268037](268054 call tmp[268050] 1)
          (268062 'end of statement')
          unknown tmp[268077] "temp"(268076 call(268070 call . comparator[268025] c"keyPart") b[268020] curPart[268029])
          (268084 call _check_tuple_var_decl tmp[268077] 2)
          unknown bSection[268064](268078 call tmp[268077] 0)
          unknown bPart[268066](268081 call tmp[268077] 1)
          (268089 'end of statement')
          if(268107 call _cond_test(268098 call ||(268092 call != aSection[268035] 0)(268096 call != bSection[268064] 0)))
          {
            (268104 return(268102 call - aSection[268035] bSection[268064]))
          }
          if(268121 call _cond_test(268113 call < aPart[268037] bPart[268066]))
          {
            (268118 return(268116 call - 1))
          }
          if(268133 call _cond_test(268127 call > aPart[268037] bPart[268066]))
          {
            (268130 return 1)
          }
          (268139 call += curPart[268029] 1)
        }
        label _continueLabel[268145]
        (268153 'move' tmp[268142](268151 call _cond_test 1))
        tmp[268142]
      }
      label _breakLabel[268146]
    }
    (268164 return 1)
  }
  function chpl_compare[268175](arg a[268172] :
  unknown t[268170], arg b[268178] :
  t[268170], arg comparator[268183] :
  unknown rec[268181]) : _unknown[51] "inline" "no doc"
  {
    if(268350 call _cond_test(268205 call canResolveMethod comparator[268183] "key" a[268172]))
    {
      (268228 return(268227 call(268209 call . defaultComparator[267998] c"compare")(268218 call(268213 call . comparator[268183] c"key") a[268172])(268226 call(268221 call . comparator[268183] c"key") b[268178])))
    }
    {
      if(268345 call _cond_test(268251 call canResolveMethod comparator[268183] "compare" a[268172] b[268178]))
      {
        (268260 return(268259 call(268253 call . comparator[268183] c"compare") a[268172] b[268178]))
      }
      {
        if(268341 call _cond_test(268283 call canResolveMethod comparator[268183] "keyPart" a[268172] 0))
        {
          (268290 return(268289 call compareByPart a[268172] b[268178] comparator[268183]))
        }
        {
          (268338 call compilerError(268335 call +(268316 call + "The comparator "(268314 call _cast string[26](268312 'typeof' comparator[268183]))) " requires a 'key(a)', 'compare(a, b)', or 'keyPart(a, i)' method"))
        }
      }
    }
  }
  function chpl_check_comparator[268362](arg comparator[268360]:_any[178](?), arg eltType[268364]:_any[178](?)) param : _unknown[51] "no doc" "unsafe"
  {
    const data[268367] "const" eltType[268364]
    (268370 'end of statement')
    unknown errorDepth[268373] "param" 2
    (268376 'end of statement')
    if(268908 call _cond_test(268380 call ==(268378 'typeof' comparator[268360]) DefaultComparator[290566]))
    {
    }
    {
      if(268903 call _cond_test(268388 call canResolveMethod comparator[268360] "key" data[268367]))
      {
        const keydata[268396] "const"(268395 call(268390 call . comparator[268360] c"key") data[268367])
        (268399 'end of statement')
        unknown keytype[268403] "type variable"(268402 'typeof' keydata[268396])
        if(268464 call _cond_test(268412 call !(268411 call canResolve "<" keydata[268396] keydata[268396])))
        {
          (268462 call compilerError(errorDepth = errorDepth[268373]) "The key method in "(268438 call _cast string[26](268436 'typeof' comparator[268360])) " must return an object that supports the '<' function when used with "(268459 call _cast string[26] eltType[268364]) " elements")
        }
        if(268505 call _cond_test(268475 call canResolveMethod comparator[268360] "compare" data[268367] data[268367]))
        {
          (268502 call compilerError(errorDepth = errorDepth[268373])(268483 call _cast string[26](268481 'typeof' comparator[268360])) " contains both a key method and a compare method")
        }
        if(268545 call _cond_test(268515 call canResolveMethod comparator[268360] "keyPart" data[268367] 0))
        {
          (268542 call compilerError(errorDepth = errorDepth[268373])(268523 call _cast string[26](268521 'typeof' comparator[268360])) " contains both a key method and a keyPart method")
        }
      }
      {
        if(268898 call _cond_test(268555 call canResolveMethod comparator[268360] "compare" data[268367] data[268367]))
        {
          unknown comparetype[268565] "type variable"(268564 'typeof'(268563 call(268557 call . comparator[268360] c"compare") data[268367] data[268367]))
          if(268625 call _cond_test(268573 call !(268572 call isNumericType comparetype[268565])))
          {
            (268623 call compilerError(errorDepth = errorDepth[268373]) "The compare method in "(268599 call _cast string[26](268597 'typeof' comparator[268360])) " must return a numeric type when used with "(268620 call _cast string[26] eltType[268364]) " elements")
          }
        }
        {
          if(268894 call _cond_test(268636 call canResolveMethod comparator[268360] "keyPart" data[268367] 0))
          {
            unknown idx[268639] 0 int(64)[13]
            (268642 'end of statement')
            unknown partType[268653] "type variable"(268652 'typeof'(268651 call(268645 call . comparator[268360] c"keyPart") data[268367] idx[268639]))
            if(268712 call _cond_test(268660 call !(268659 call isTupleType partType[268653])))
            {
              (268710 call compilerError(errorDepth = errorDepth[268373]) "The keyPart method in "(268686 call _cast string[26](268684 'typeof' comparator[268360])) " must return a tuple when used with "(268707 call _cast string[26] eltType[268364]) " elements")
            }
            unknown tmp[268718] partType[268653]
            (268721 'end of statement')
            unknown expectInt[268726](268725 call tmp[268718] 0)
            (268729 'end of statement')
            unknown expectIntUint[268734](268733 call tmp[268718] 1)
            (268737 'end of statement')
            if(268779 call _cond_test(268743 call !(268742 call isInt(268740 'typeof' expectInt[268726]))))
            {
              (268777 call compilerError(errorDepth = errorDepth[268373]) "The keyPart method in "(268753 call _cast string[26](268751 'typeof' comparator[268360])) " must return a tuple with element 0 of type int(\?) when used with "(268774 call _cast string[26] eltType[268364]) " elements")
            }
            if(268830 call _cond_test(268794 call !(268792 call ||(268787 call isInt expectIntUint[268734])(268791 call isUint expectIntUint[268734]))))
            {
              (268828 call compilerError(errorDepth = errorDepth[268373]) "The keyPart method in "(268804 call _cast string[26](268802 'typeof' comparator[268360])) " must return a tuple with element 1 of type  int(\?) or uint(\?) when used with "(268825 call _cast string[26] eltType[268364]) " elements")
            }
          }
          {
            (268891 call compilerError(errorDepth = errorDepth[268373])(268889 call +(268883 call +(268864 call +(268845 call + "The comparator "(268843 call _cast string[26](268841 'typeof' comparator[268360]))) " requires a 'key(a)', 'compare(a, b)', or 'keyPart(a, i)' method ") " for element type ")(268887 call _cast string[26] eltType[268364])))
          }
        }
      }
    }
    (268914 return 1)
  }
  function radixSortOk[268930](arg Data[268927] :
  (268925 call chpl__buildArrayRuntimeType unknown Dom[268920] unknown eltType[268923]), arg comparator[268932]:_any[178](?)) param : _unknown[51] "private" "unsafe"
  {
    if(269007 call _cond_test(268938 call !(268935 call . Dom[268920] c"stridable")))
    {
      unknown tmp[268948](268947 'typeof'(268946 call Data[268927](268942 call . Dom[268920] c"alignedLow")))
      (268951 'end of statement')
      if(269002 call _cond_test(268959 call canResolveMethod comparator[268932] "keyPart" tmp[268948] 0))
      {
        (268961 return 1)
      }
      {
        if(268998 call _cond_test(268969 call canResolveMethod comparator[268932] "key" tmp[268948]))
        {
          unknown key[268978](268977 'typeof'(268976 call(268971 call . comparator[268932] c"key") tmp[268948]))
          (268981 'end of statement')
          if(268993 call _cond_test(268989 call canResolveMethod defaultComparator[267998] "keyPart" key[268978] 0))
          {
            (268991 return 1)
          }
        }
      }
    }
    (269013 return 0)
  }
  function sort[269029](arg Data[269026] :
  (269024 call chpl__buildArrayRuntimeType unknown Dom[269019] unknown eltType[269022]), arg comparator[269034] :
  unknown rec[269031] =
  defaultComparator[267998]) : _unknown[51] "no return value for void"
  {
    (269042 call chpl_check_comparator comparator[269034] eltType[269022])
    if(269057 call _cond_test(269053 call >=(269046 call . Dom[269019] c"low")(269050 call . Dom[269019] c"high")))
    {
      (269055 return _void[55])
    }
    if(269093 call _cond_test(269066 call radixSortOk Data[269026] comparator[269034]))
    {
      (269077 call msbRadixSort module=[255] MSBRadixSort[288016] Data[269026](comparator = comparator[269034]))
      (364152 'referenced modules list' MSBRadixSort[288016])
    }
    {
      (269090 call quickSort module=[255] QuickSort[272061] Data[269026](comparator = comparator[269034]))
      (364158 'referenced modules list' QuickSort[272061])
    }
  }
  function sort[269111](arg Data[269108] :
  (269106 call chpl__buildArrayRuntimeType unknown Dom[269101] unknown eltType[269104]), arg comparator[269116] :
  unknown rec[269113] =
  defaultComparator[267998]) : _unknown[51] "no doc" "no return value for void"
  {
    (269146 call compilerError "sort() requires 1-D array")
  }
  where {
    (269125 call !=(269121 call . Dom[269101] c"rank") 1)
  }
  function isSorted[269164](arg Data[269161] :
  (269159 call chpl__buildArrayRuntimeType unknown Dom[269154] unknown eltType[269157]), arg comparator[269169] :
  unknown rec[269166] =
  defaultComparator[267998]) : _unknown[51]
  {
    (269178 call chpl_check_comparator comparator[269169] eltType[269157])
    const stride[269196] "const"(269193 IfExpr (269182 call . Dom[269154] c"stridable") then
    { scopeless
      (269191 call abs(269187 call . Dom[269154] c"stride"))
    } else
    { scopeless
      1
    } )
    (269199 'end of statement')
    unknown sorted[269201] 1
    (269204 'end of statement')
    Forall {
      induction variables:
        
        unknown element[269264] "index var" "insert auto destroy"
        
        unknown i[269266] "index var" "insert auto destroy"
      iterated expressions:
        Data[269161]
        Dom[269154]
      shadow variables:
        sorted[269216] 'reduce' intent outer var sorted[269201]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        if(269258 call _cond_test(269227 call > i[269266](269224 call . Dom[269154] c"alignedLow")))
        {
          {
            unknown tmp[269246] "temp"
            (269249 'move' tmp[269246](269248 'addr of' sorted[269216]))
            (269254 call = tmp[269246](269251 call && tmp[269246](269243 call <=(269241 call chpl_compare(269237 call Data[269161](269234 call - i[269266] stride[269196])) element[269264] comparator[269169]) 0)))
          }
        }
      }
    }
    (269271 return sorted[269201])
  }
  { scopeless type
    bool[10]
  }
  function isSorted[269288](arg Data[269285] :
  (269283 call chpl__buildArrayRuntimeType unknown Dom[269278] unknown eltType[269281]), arg comparator[269293] :
  unknown rec[269290] =
  defaultComparator[267998]) : _unknown[51] "no doc" "no return value for void"
  {
    (269323 call compilerError "isSorted() requires 1-D array")
  }
  where {
    (269302 call !=(269298 call . Dom[269278] c"rank") 1)
  }
  function sorted[269333](arg x[269331]:_any[178](?), arg comparator[269338] :
  unknown rec[269335] =
  defaultComparator[267998]) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown y[269343] x[269331]
    (269346 'end of statement')
    if(269375 call _cond_test(269352 call !(269351 call isArrayValue y[269343])))
    {
      (269373 call compilerError "Sort.sorted called on non-iterable")
    }
    (269385 call sort y[269343](comparator = comparator[269338]))
    {
      unknown _indexOfInterest[269392] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[269393] "expr temp" "temp"
      (269402 'move' _iterator[269393](269400 call _getIterator y[269343]))
      Defer
      {
        {
          (269418 call _freeIterator _iterator[269393])
        }
      }
      { scopeless type
        (269407 'move' _indexOfInterest[269392](269404 call iteratorIndex _iterator[269393]))
      }
      ForLoop[269394]
      {
        unknown i[269411] "index var" "insert auto destroy"
        (269413 'move' i[269411] _indexOfInterest[269392])
        (269390 yield i[269411])
        label _continueLabel[269397]
        _indexOfInterest[269392]
        _iterator[269393]
      }
      label _breakLabel[269398]
    }
  }
  def module InsertionSort[270114]  
  def module QuickSort[272061]  
  def module ShellSort[273543]  
  def module RadixSortHelp[276097]  
  def module ShallowCopy[277404]  
  def module MSBRadixSort[288016]  
  function DefaultComparator[290566].compare[289929](arg _mt[290570]:_MT[238], arg this[290568]:DefaultComparator[290566], arg a[289927]:_any[178](?), arg b[289931]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    if(289959 call _cond_test(289935 call < a[289927] b[289931]))
    {
      (289940 return(289938 call - 1))
    }
    {
      if(289954 call _cond_test(289945 call < b[289931] a[289927]))
      {
        (289948 return 1)
      }
      {
        (289952 return 0)
      }
    }
  }
  function DefaultComparator[290566].keyPart[289973](arg _mt[290574]:_MT[238], arg this[290572]:DefaultComparator[290566], arg x[289970] :
  integral[199](?), arg i[289976] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown section[290015](290012 IfExpr (289994 call > i[289976] 0) then
    { scopeless
      (290003 call -(290001 call _cast(290000 call int(64)[13] 8) 1))
    } else
    { scopeless
      (290010 call _cast(290009 call int(64)[13] 8) 0)
    } )(289991 call int(64)[13] 8)
    (290018 'end of statement')
    (290025 return(290023 call _build_tuple section[290015] x[289970]))
  }
  { scopeless type
    (289986 call _build_tuple(289982 call int(64)[13] 8)(289984 'typeof' x[289970]))
  }
  function DefaultComparator[290566].keyPart[290036](arg _mt[290578]:_MT[238], arg this[290576]:DefaultComparator[290566], arg x[290033] :
  chpl_anyreal[193](?), arg i[290039] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown section[290084](290081 IfExpr (290063 call > i[290039] 0) then
    { scopeless
      (290072 call -(290070 call _cast(290069 call int(64)[13] 8) 1))
    } else
    { scopeless
      (290079 call _cast(290078 call int(64)[13] 8) 0)
    } )(290060 call int(64)[13] 8)
    (290087 'end of statement')
    unknown nbits[290094] "param"(290093 call numBits(290091 'typeof' x[290033]))
    (290097 'end of statement')
    unknown src[290099] x[290033]
    (290102 'end of statement')
    unknown dst[290107](290106 call uint(64)[115] nbits[290094])
    (290110 'end of statement')
    (290126 call c_memcpy(290115 call c_ptrTo dst[290107])(290120 call c_ptrTo src[290099])(290125 call c_sizeof(290123 'typeof' src[290099])))
    if(290170 call _cond_test(290136 call ==(290133 call >> dst[290107](290131 call - nbits[290094] 1)) 1))
    {
      (290142 call = dst[290107](290140 call ~ dst[290107]))
    }
    {
      const one[290151] "const" 1(290149 call uint(64)[115] nbits[290094])
      (290154 'end of statement')
      (290167 call = dst[290107](290165 call ^ dst[290107](290163 call << one[290151](290161 call - nbits[290094] 1))))
    }
    (290179 return(290177 call _build_tuple section[290084] dst[290107]))
  }
  { scopeless type
    (290055 call _build_tuple(290045 call int(64)[13] 8)(290053 call uint(64)[115](290051 call numBits(290049 'typeof' x[290033]))))
  }
  function DefaultComparator[290566].keyPart[290190](arg _mt[290582]:_MT[238], arg this[290580]:DefaultComparator[290566], arg x[290187] :
  chpl_anyimag[190](?), arg i[290193] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (290226 return(290225 call(404058 call . this[290580] c"keyPart")(290221 call _cast(290220 call real(64)[16](290218 call numBits(290216 'typeof' x[290187]))) x[290187]) i[290193]))
  }
  { scopeless type
    (290209 call _build_tuple(290199 call int(64)[13] 8)(290207 call uint(64)[115](290205 call numBits(290203 'typeof' x[290187]))))
  }
  function DefaultComparator[290566].keyPart[290238](arg _mt[290586]:_MT[238], arg this[290584]:DefaultComparator[290566], arg x[290235] :
  _tuple[56202](?), arg i[290241] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    const tmp[290300] "const" "temp"(290299 call(290290 call . this[290584] c"keyPart")(290296 call x[290235] i[290241]) 1)
    (290304 call _check_tuple_var_decl tmp[290300] 2)
    const part[290286] "const"(290301 call tmp[290300] 1)
    (290309 'end of statement')
    if(290338 call _cond_test(290316 call >= i[290241](290313 call . x[290235] c"size")))
    {
      (290329 return(290327 call _build_tuple(290319 call - 1)(290324 call _cast(290323 'typeof' part[290286]) 0)))
    }
    {
      (290336 return(290334 call _build_tuple 0 part[290286]))
    }
  }
  where {
    (290282 call &&(290247 call isHomogeneousTuple x[290235])(290280 call ||(290271 call ||(290262 call ||(290254 call isInt(290252 call x[290235] 0))(290261 call isUint(290259 call x[290235] 0)))(290270 call isReal(290268 call x[290235] 0)))(290279 call isImag(290277 call x[290235] 0))))
  }
  function DefaultComparator[290566].keyPart[290353](arg _mt[290590]:_MT[238], arg this[290588]:DefaultComparator[290566], arg x[290350] :
  string[26], arg i[290356] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    if(290385 call _cond_test 1)
    {
      (290383 call assert(290380 call ==(290373 call . x[290350] c"locale_id")(290377 call .(364765 call here[90438]) c"id")))
    }
    unknown ptr[290406](290404 call _cast(290403 call c_ptr[205100](?)(290401 call uint(64)[115] 8))(290396 call(290392 call . x[290350] c"c_str")))
    (290409 'end of statement')
    unknown len[290414](290411 call . x[290350] c"numBytes")
    (290417 'end of statement')
    unknown section[290441](290438 IfExpr (290420 call < i[290356] len[290414]) then
    { scopeless
      (290427 call _cast(290426 call int(64)[13] 8) 0)
    } else
    { scopeless
      (290436 call -(290434 call _cast(290433 call int(64)[13] 8) 1))
    } )
    (290444 'end of statement')
    unknown part[290463](290460 IfExpr (290447 call < i[290356] len[290414]) then
    { scopeless
      (290452 call ptr[290406] i[290356])
    } else
    { scopeless
      (290458 call _cast(290457 call uint(64)[115] 8) 0)
    } )
    (290466 'end of statement')
    (290472 return(290470 call _build_tuple section[290441] part[290463]))
  }
  { scopeless type
    (290368 call _build_tuple(290362 call int(64)[13] 8)(290366 call uint(64)[115] 8))
  }
  function DefaultComparator[290566].keyPart[290483](arg _mt[290594]:_MT[238], arg this[290592]:DefaultComparator[290566], arg x[290480] :
  c_string[19], arg i[290486] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ptr[290510](290508 call _cast(290507 call c_ptr[205100](?)(290505 call uint(64)[115] 8)) x[290480])
    (290513 'end of statement')
    unknown byte[290519](290518 call ptr[290510] i[290486])
    (290522 'end of statement')
    unknown section[290546](290543 IfExpr (290525 call != byte[290519] 0) then
    { scopeless
      (290532 call _cast(290531 call int(64)[13] 8) 0)
    } else
    { scopeless
      (290541 call -(290539 call _cast(290538 call int(64)[13] 8) 1))
    } )
    (290549 'end of statement')
    unknown part[290551] byte[290519]
    (290554 'end of statement')
    (290560 return(290558 call _build_tuple section[290546] part[290551]))
  }
  { scopeless type
    (290498 call _build_tuple(290492 call int(64)[13] 8)(290496 call uint(64)[115] 8))
  }
  type DefaultComparator[290566]
  function ReverseComparator[291203](?).init[290604](arg _mt[291207]:_MT[238], arg this[291205]:ReverseComparator[291203](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (290613 call =(290609 call . this[291205] c"comparator") defaultComparator[267998])
  }
  function ReverseComparator[291203](?).init[290623](arg _mt[291211]:_MT[238], arg this[291209]:ReverseComparator[291203](?), arg comparator[290621]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (290630 call =(290626 call . this[291209] c"comparator") comparator[290621])
  }
  function ReverseComparator[291203](?).init=[290645](arg _mt[291215]:_MT[238], arg this[291213]:ReverseComparator[291203](?), arg revcomp[290642] :
  (290641 call ReverseComparator[291203](?) ?[260])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (290655 call =(290648 call . this[291213] c"comparator")(290652 call . revcomp[290642] c"comparator"))
  }
  function ReverseComparator[291203](?).typeIsBitReversible[290665](arg _mt[291219]:_MT[238], arg this[291217]:ReverseComparator[291203](?), arg t[290663]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290687 call _cond_test(290670 call isHomogeneousTupleType t[290663]))
    {
      unknown tmp[290672] t[290663]
      (290675 'end of statement')
      (290685 return(290684 call(404102 call . this[291217] c"typeIsBitReversible")(290682 'typeof'(290681 call tmp[290672] 0))))
    }
    if(290699 call _cond_test(290695 call isUintType t[290663]))
    {
      (290697 return 1)
    }
    if(290711 call _cond_test(290707 call isIntType t[290663]))
    {
      (290709 return 1)
    }
    (290717 return 0)
  }
  function ReverseComparator[291203](?).typeIsNegateReversible[290725](arg _mt[291223]:_MT[238], arg this[291221]:ReverseComparator[291203](?), arg t[290723]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290747 call _cond_test(290730 call isHomogeneousTupleType t[290723]))
    {
      unknown tmp[290732] t[290723]
      (290735 'end of statement')
      (290745 return(290744 call(404113 call . this[291221] c"typeIsNegateReversible")(290742 'typeof'(290741 call tmp[290732] 0))))
    }
    if(290765 call _cond_test(290760 call ||(290755 call isIntType t[290723])(290759 call isUintType t[290723])))
    {
      (290763 return 0)
    }
    if(290777 call _cond_test(290773 call isNumericType t[290723]))
    {
      (290775 return 1)
    }
    (290783 return 0)
  }
  function ReverseComparator[291203](?).hasKeyPart[290791](arg _mt[291227]:_MT[238], arg this[291225]:ReverseComparator[291203](?), arg a[290789]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    (290803 return(290802 call canResolveMethod(290795 call . this[291225] c"comparator") "keyPart" a[290789] 0))
  }
  function ReverseComparator[291203](?).hasKeyPartFromKey[290812](arg _mt[291231]:_MT[238], arg this[291229]:ReverseComparator[291203](?), arg a[290810]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290845 call _cond_test(290822 call canResolveMethod(290816 call . this[291229] c"comparator") "key" a[290810]))
    {
      unknown key[290831](290830 'typeof'(290829 call(290824 call .(364777 call . this[291229] c"comparator") c"key") a[290810]))
      (290834 'end of statement')
      (290843 return(290842 call canResolveMethod defaultComparator[267998] "keyPart" key[290831] 0))
    }
    (290851 return 0)
  }
  function ReverseComparator[291203](?).hasCompare[290859](arg _mt[291235]:_MT[238], arg this[291233]:ReverseComparator[291203](?), arg a[290857]:_any[178](?), arg b[290861]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    (290873 return(290872 call canResolveMethod(290865 call . this[291233] c"comparator") "compare" a[290857] b[290861]))
  }
  function ReverseComparator[291203](?).hasCompareFromKey[290882](arg _mt[291239]:_MT[238], arg this[291237]:ReverseComparator[291203](?), arg a[290880]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290915 call _cond_test(290892 call canResolveMethod(290886 call . this[291237] c"comparator") "key" a[290880]))
    {
      unknown key[290901](290900 'typeof'(290899 call(290894 call .(364784 call . this[291237] c"comparator") c"key") a[290880]))
      (290904 'end of statement')
      (290913 return(290912 call canResolveMethod defaultComparator[267998] "compare" key[290901] key[290901]))
    }
    (290921 return 0)
  }
  function ReverseComparator[291203](?).getKeyPart[290929](arg _mt[291243]:_MT[238], arg this[291241]:ReverseComparator[291203](?), arg cmp[290927]:_any[178](?), arg a[290931]:_any[178](?), arg i[290933]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown tmp[290948] "temp"(290947 call(290941 call . cmp[290927] c"keyPart") a[290931] i[290933])
    (290955 call _check_tuple_var_decl tmp[290948] 2)
    unknown section[290935](290949 call tmp[290948] 0)
    unknown part[290937](290952 call tmp[290948] 1)
    (290960 'end of statement')
    if(291022 call _cond_test(290966 call(404135 call . this[291241] c"typeIsBitReversible")(290964 'typeof' part[290937])))
    {
      (290976 return(290974 call _build_tuple(290968 call - section[290935])(290971 call ~ part[290937])))
    }
    {
      if(291018 call _cond_test(290983 call(404142 call . this[291241] c"typeIsNegateReversible")(290981 'typeof' part[290937])))
      {
        (290993 return(290991 call _build_tuple(290985 call - section[290935])(290988 call - part[290937])))
      }
      {
        (291015 call compilerError "keyPart must return int or uint")
      }
    }
  }
  function ReverseComparator[291203](?).keyPart[291033](arg _mt[291247]:_MT[238], arg this[291245]:ReverseComparator[291203](?), arg a[291031]:_any[178](?), arg i[291035]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (291055 call chpl_check_comparator(291049 call . this[291245] c"comparator")(291054 'typeof' a[291031]))
    if(291092 call _cond_test(291061 call(404164 call . this[291245] c"hasKeyPartFromKey") a[291031]))
    {
      (291077 return(291076 call(404171 call . this[291245] c"getKeyPart") defaultComparator[267998](291074 call(291069 call .(291066 call . this[291245] c"comparator") c"key") a[291031]) i[291035]))
    }
    {
      (291089 return(291088 call(404178 call . this[291245] c"getKeyPart")(291082 call . this[291245] c"comparator") a[291031] i[291035]))
    }
  }
  where {
    (291045 call ||(291040 call(404151 call . this[291245] c"hasKeyPart") a[291031])(291044 call(404158 call . this[291245] c"hasKeyPartFromKey") a[291031]))
  }
  function ReverseComparator[291203](?).doCompare[291103](arg _mt[291251]:_MT[238], arg this[291249]:ReverseComparator[291203](?), arg cmp[291101]:_any[178](?), arg a[291105]:_any[178](?), arg b[291107]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (291117 return(291116 call(291110 call . cmp[291101] c"compare") b[291107] a[291105]))
  }
  function ReverseComparator[291203](?).compare[291126](arg _mt[291255]:_MT[238], arg this[291253]:ReverseComparator[291203](?), arg a[291124]:_any[178](?), arg b[291128]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (291149 call chpl_check_comparator(291143 call . this[291253] c"comparator")(291148 'typeof' a[291124]))
    if(291195 call _cond_test(291155 call(404202 call . this[291253] c"hasCompareFromKey") a[291124]))
    {
      (291180 return(291179 call(404209 call . this[291253] c"doCompare") defaultComparator[267998](291168 call(291163 call .(291160 call . this[291253] c"comparator") c"key") a[291124])(291178 call(291173 call .(291170 call . this[291253] c"comparator") c"key") b[291128])))
    }
    {
      (291192 return(291191 call(404216 call . this[291253] c"doCompare")(291185 call . this[291253] c"comparator") a[291124] b[291128]))
    }
  }
  where {
    (291139 call ||(291134 call(404188 call . this[291253] c"hasCompare") a[291124] b[291128])(291138 call(404196 call . this[291253] c"hasCompareFromKey") a[291124]))
  }
  type ReverseComparator[291203](?) unknown comparator[290598]
  (355371 'used modules list'(353060 'use' ChapelStandard[20267])(267991 'use' List[298245])(267995 'use' Reflection[224903]))
}