AST dump for Sort after pass scopeResolve.
Module use list: ChapelStandard List Reflection MSBRadixSort QuickSort 

{
  const defaultComparator[267889] "const" DefaultComparator[290449]
  (267892 'end of statement')
  const reverseComparator[267897] "const"(267896 call ReverseComparator[291086](?) DefaultComparator[290449])
  (267900 'end of statement')
  function compareByPart[267908](arg a[267905] :
  unknown t[267903], arg b[267911] :
  t[267903], arg comparator[267916] :
  unknown rec[267914]) : _unknown[51] "inline" "private"
  {
    unknown curPart[267920] 0
    (267923 'end of statement')
    {
      unknown tmp[268033] "temp"
      (268051 'move' tmp[268033](268049 call _cond_test 1))
      WhileDo[268038]
      {
        {
          unknown tmp[267941] "temp"(267940 call(267934 call . comparator[267916] c"keyPart") a[267905] curPart[267920])
          (267948 call _check_tuple_var_decl tmp[267941] 2)
          unknown aSection[267926](267942 call tmp[267941] 0)
          unknown aPart[267928](267945 call tmp[267941] 1)
          (267953 'end of statement')
          unknown tmp[267968] "temp"(267967 call(267961 call . comparator[267916] c"keyPart") b[267911] curPart[267920])
          (267975 call _check_tuple_var_decl tmp[267968] 2)
          unknown bSection[267955](267969 call tmp[267968] 0)
          unknown bPart[267957](267972 call tmp[267968] 1)
          (267980 'end of statement')
          if(267998 call _cond_test(267989 call ||(267983 call != aSection[267926] 0)(267987 call != bSection[267955] 0)))
          {
            (267995 return(267993 call - aSection[267926] bSection[267955]))
          }
          if(268012 call _cond_test(268004 call < aPart[267928] bPart[267957]))
          {
            (268009 return(268007 call - 1))
          }
          if(268024 call _cond_test(268018 call > aPart[267928] bPart[267957]))
          {
            (268021 return 1)
          }
          (268030 call += curPart[267920] 1)
        }
        label _continueLabel[268036]
        (268044 'move' tmp[268033](268042 call _cond_test 1))
        tmp[268033]
      }
      label _breakLabel[268037]
    }
    (268055 return 1)
  }
  function chpl_compare[268066](arg a[268063] :
  unknown t[268061], arg b[268069] :
  t[268061], arg comparator[268074] :
  unknown rec[268072]) : _unknown[51] "inline" "no doc"
  {
    if(268241 call _cond_test(268096 call canResolveMethod comparator[268074] "key" a[268063]))
    {
      (268119 return(268118 call(268100 call . defaultComparator[267889] c"compare")(268109 call(268104 call . comparator[268074] c"key") a[268063])(268117 call(268112 call . comparator[268074] c"key") b[268069])))
    }
    {
      if(268236 call _cond_test(268142 call canResolveMethod comparator[268074] "compare" a[268063] b[268069]))
      {
        (268151 return(268150 call(268144 call . comparator[268074] c"compare") a[268063] b[268069]))
      }
      {
        if(268232 call _cond_test(268174 call canResolveMethod comparator[268074] "keyPart" a[268063] 0))
        {
          (268181 return(268180 call compareByPart a[268063] b[268069] comparator[268074]))
        }
        {
          (268229 call compilerError(268226 call +(268207 call + "The comparator "(268205 call _cast string[26](268203 'typeof' comparator[268074]))) " requires a 'key(a)', 'compare(a, b)', or 'keyPart(a, i)' method"))
        }
      }
    }
  }
  function chpl_check_comparator[268253](arg comparator[268251]:_any[178](?), arg eltType[268255]:_any[178](?)) param : _unknown[51] "no doc" "unsafe"
  {
    const data[268258] "const" eltType[268255]
    (268261 'end of statement')
    unknown errorDepth[268264] "param" 2
    (268267 'end of statement')
    if(268799 call _cond_test(268271 call ==(268269 'typeof' comparator[268251]) DefaultComparator[290449]))
    {
    }
    {
      if(268794 call _cond_test(268279 call canResolveMethod comparator[268251] "key" data[268258]))
      {
        const keydata[268287] "const"(268286 call(268281 call . comparator[268251] c"key") data[268258])
        (268290 'end of statement')
        unknown keytype[268294] "type variable"(268293 'typeof' keydata[268287])
        if(268355 call _cond_test(268303 call !(268302 call canResolve "<" keydata[268287] keydata[268287])))
        {
          (268353 call compilerError(errorDepth = errorDepth[268264]) "The key method in "(268329 call _cast string[26](268327 'typeof' comparator[268251])) " must return an object that supports the '<' function when used with "(268350 call _cast string[26] eltType[268255]) " elements")
        }
        if(268396 call _cond_test(268366 call canResolveMethod comparator[268251] "compare" data[268258] data[268258]))
        {
          (268393 call compilerError(errorDepth = errorDepth[268264])(268374 call _cast string[26](268372 'typeof' comparator[268251])) " contains both a key method and a compare method")
        }
        if(268436 call _cond_test(268406 call canResolveMethod comparator[268251] "keyPart" data[268258] 0))
        {
          (268433 call compilerError(errorDepth = errorDepth[268264])(268414 call _cast string[26](268412 'typeof' comparator[268251])) " contains both a key method and a keyPart method")
        }
      }
      {
        if(268789 call _cond_test(268446 call canResolveMethod comparator[268251] "compare" data[268258] data[268258]))
        {
          unknown comparetype[268456] "type variable"(268455 'typeof'(268454 call(268448 call . comparator[268251] c"compare") data[268258] data[268258]))
          if(268516 call _cond_test(268464 call !(268463 call isNumericType comparetype[268456])))
          {
            (268514 call compilerError(errorDepth = errorDepth[268264]) "The compare method in "(268490 call _cast string[26](268488 'typeof' comparator[268251])) " must return a numeric type when used with "(268511 call _cast string[26] eltType[268255]) " elements")
          }
        }
        {
          if(268785 call _cond_test(268527 call canResolveMethod comparator[268251] "keyPart" data[268258] 0))
          {
            unknown idx[268530] 0 int(64)[13]
            (268533 'end of statement')
            unknown partType[268544] "type variable"(268543 'typeof'(268542 call(268536 call . comparator[268251] c"keyPart") data[268258] idx[268530]))
            if(268603 call _cond_test(268551 call !(268550 call isTupleType partType[268544])))
            {
              (268601 call compilerError(errorDepth = errorDepth[268264]) "The keyPart method in "(268577 call _cast string[26](268575 'typeof' comparator[268251])) " must return a tuple when used with "(268598 call _cast string[26] eltType[268255]) " elements")
            }
            unknown tmp[268609] partType[268544]
            (268612 'end of statement')
            unknown expectInt[268617](268616 call tmp[268609] 0)
            (268620 'end of statement')
            unknown expectIntUint[268625](268624 call tmp[268609] 1)
            (268628 'end of statement')
            if(268670 call _cond_test(268634 call !(268633 call isInt(268631 'typeof' expectInt[268617]))))
            {
              (268668 call compilerError(errorDepth = errorDepth[268264]) "The keyPart method in "(268644 call _cast string[26](268642 'typeof' comparator[268251])) " must return a tuple with element 0 of type int(\?) when used with "(268665 call _cast string[26] eltType[268255]) " elements")
            }
            if(268721 call _cond_test(268685 call !(268683 call ||(268678 call isInt expectIntUint[268625])(268682 call isUint expectIntUint[268625]))))
            {
              (268719 call compilerError(errorDepth = errorDepth[268264]) "The keyPart method in "(268695 call _cast string[26](268693 'typeof' comparator[268251])) " must return a tuple with element 1 of type  int(\?) or uint(\?) when used with "(268716 call _cast string[26] eltType[268255]) " elements")
            }
          }
          {
            (268782 call compilerError(errorDepth = errorDepth[268264])(268780 call +(268774 call +(268755 call +(268736 call + "The comparator "(268734 call _cast string[26](268732 'typeof' comparator[268251]))) " requires a 'key(a)', 'compare(a, b)', or 'keyPart(a, i)' method ") " for element type ")(268778 call _cast string[26] eltType[268255])))
          }
        }
      }
    }
    (268805 return 1)
  }
  function radixSortOk[268821](arg Data[268818] :
  (268816 call chpl__buildArrayRuntimeType unknown Dom[268811] unknown eltType[268814]), arg comparator[268823]:_any[178](?)) param : _unknown[51] "private" "unsafe"
  {
    if(268898 call _cond_test(268829 call !(268826 call . Dom[268811] c"stridable")))
    {
      unknown tmp[268839](268838 'typeof'(268837 call Data[268818](268833 call . Dom[268811] c"alignedLow")))
      (268842 'end of statement')
      if(268893 call _cond_test(268850 call canResolveMethod comparator[268823] "keyPart" tmp[268839] 0))
      {
        (268852 return 1)
      }
      {
        if(268889 call _cond_test(268860 call canResolveMethod comparator[268823] "key" tmp[268839]))
        {
          unknown key[268869](268868 'typeof'(268867 call(268862 call . comparator[268823] c"key") tmp[268839]))
          (268872 'end of statement')
          if(268884 call _cond_test(268880 call canResolveMethod defaultComparator[267889] "keyPart" key[268869] 0))
          {
            (268882 return 1)
          }
        }
      }
    }
    (268904 return 0)
  }
  function sort[268920](arg Data[268917] :
  (268915 call chpl__buildArrayRuntimeType unknown Dom[268910] unknown eltType[268913]), arg comparator[268925] :
  unknown rec[268922] =
  defaultComparator[267889]) : _unknown[51] "no return value for void"
  {
    (268933 call chpl_check_comparator comparator[268925] eltType[268913])
    if(268948 call _cond_test(268944 call >=(268937 call . Dom[268910] c"low")(268941 call . Dom[268910] c"high")))
    {
      (268946 return _void[55])
    }
    if(268984 call _cond_test(268957 call radixSortOk Data[268917] comparator[268925]))
    {
      (268968 call msbRadixSort module=[255] MSBRadixSort[287901] Data[268917](comparator = comparator[268925]))
      (364021 'referenced modules list' MSBRadixSort[287901])
    }
    {
      (268981 call quickSort module=[255] QuickSort[271951] Data[268917](comparator = comparator[268925]))
      (364027 'referenced modules list' QuickSort[271951])
    }
  }
  function sort[269002](arg Data[268999] :
  (268997 call chpl__buildArrayRuntimeType unknown Dom[268992] unknown eltType[268995]), arg comparator[269007] :
  unknown rec[269004] =
  defaultComparator[267889]) : _unknown[51] "no doc" "no return value for void"
  {
    (269037 call compilerError "sort() requires 1-D array")
  }
  where {
    (269016 call !=(269012 call . Dom[268992] c"rank") 1)
  }
  function isSorted[269055](arg Data[269052] :
  (269050 call chpl__buildArrayRuntimeType unknown Dom[269045] unknown eltType[269048]), arg comparator[269060] :
  unknown rec[269057] =
  defaultComparator[267889]) : _unknown[51]
  {
    (269069 call chpl_check_comparator comparator[269060] eltType[269048])
    const stride[269087] "const"(269084 IfExpr (269073 call . Dom[269045] c"stridable") then
    { scopeless
      (269082 call abs(269078 call . Dom[269045] c"stride"))
    } else
    { scopeless
      1
    } )
    (269090 'end of statement')
    unknown sorted[269092] 1
    (269095 'end of statement')
    Forall {
      induction variables:
        
        unknown element[269155] "index var" "insert auto destroy"
        
        unknown i[269157] "index var" "insert auto destroy"
      iterated expressions:
        Data[269052]
        Dom[269045]
      shadow variables:
        sorted[269107] 'reduce' intent outer var sorted[269092]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        if(269149 call _cond_test(269118 call > i[269157](269115 call . Dom[269045] c"alignedLow")))
        {
          {
            unknown tmp[269137] "temp"
            (269140 'move' tmp[269137](269139 'addr of' sorted[269107]))
            (269145 call = tmp[269137](269142 call && tmp[269137](269134 call <=(269132 call chpl_compare(269128 call Data[269052](269125 call - i[269157] stride[269087])) element[269155] comparator[269060]) 0)))
          }
        }
      }
    }
    (269161 return sorted[269092])
  }
  { scopeless type
    bool[10]
  }
  function isSorted[269178](arg Data[269175] :
  (269173 call chpl__buildArrayRuntimeType unknown Dom[269168] unknown eltType[269171]), arg comparator[269183] :
  unknown rec[269180] =
  defaultComparator[267889]) : _unknown[51] "no doc" "no return value for void"
  {
    (269213 call compilerError "isSorted() requires 1-D array")
  }
  where {
    (269192 call !=(269188 call . Dom[269168] c"rank") 1)
  }
  function sorted[269223](arg x[269221]:_any[178](?), arg comparator[269228] :
  unknown rec[269225] =
  defaultComparator[267889]) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown y[269233] x[269221]
    (269236 'end of statement')
    if(269265 call _cond_test(269242 call !(269241 call isArrayValue y[269233])))
    {
      (269263 call compilerError "Sort.sorted called on non-iterable")
    }
    (269275 call sort y[269233](comparator = comparator[269228]))
    {
      unknown _indexOfInterest[269282] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[269283] "expr temp" "temp"
      (269292 'move' _iterator[269283](269290 call _getIterator y[269233]))
      Defer
      {
        {
          (269308 call _freeIterator _iterator[269283])
        }
      }
      { scopeless type
        (269297 'move' _indexOfInterest[269282](269294 call iteratorIndex _iterator[269283]))
      }
      ForLoop[269284]
      {
        unknown i[269301] "index var" "insert auto destroy"
        (269303 'move' i[269301] _indexOfInterest[269282])
        (269280 yield i[269301])
        label _continueLabel[269287]
        _indexOfInterest[269282]
        _iterator[269283]
      }
      label _breakLabel[269288]
    }
  }
  def module InsertionSort[270004]  
  def module QuickSort[271951]  
  def module ShellSort[273432]  
  def module RadixSortHelp[275986]  
  def module ShallowCopy[277293]  
  def module MSBRadixSort[287901]  
  function DefaultComparator[290449].compare[289812](arg _mt[290453]:_MT[238], arg this[290451]:DefaultComparator[290449], arg a[289810]:_any[178](?), arg b[289814]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    if(289842 call _cond_test(289818 call < a[289810] b[289814]))
    {
      (289823 return(289821 call - 1))
    }
    {
      if(289837 call _cond_test(289828 call < b[289814] a[289810]))
      {
        (289831 return 1)
      }
      {
        (289835 return 0)
      }
    }
  }
  function DefaultComparator[290449].keyPart[289856](arg _mt[290457]:_MT[238], arg this[290455]:DefaultComparator[290449], arg x[289853] :
  integral[199](?), arg i[289859] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown section[289898](289895 IfExpr (289877 call > i[289859] 0) then
    { scopeless
      (289886 call -(289884 call _cast(289883 call int(64)[13] 8) 1))
    } else
    { scopeless
      (289893 call _cast(289892 call int(64)[13] 8) 0)
    } )(289874 call int(64)[13] 8)
    (289901 'end of statement')
    (289908 return(289906 call _build_tuple section[289898] x[289853]))
  }
  { scopeless type
    (289869 call _build_tuple(289865 call int(64)[13] 8)(289867 'typeof' x[289853]))
  }
  function DefaultComparator[290449].keyPart[289919](arg _mt[290461]:_MT[238], arg this[290459]:DefaultComparator[290449], arg x[289916] :
  chpl_anyreal[193](?), arg i[289922] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown section[289967](289964 IfExpr (289946 call > i[289922] 0) then
    { scopeless
      (289955 call -(289953 call _cast(289952 call int(64)[13] 8) 1))
    } else
    { scopeless
      (289962 call _cast(289961 call int(64)[13] 8) 0)
    } )(289943 call int(64)[13] 8)
    (289970 'end of statement')
    unknown nbits[289977] "param"(289976 call numBits(289974 'typeof' x[289916]))
    (289980 'end of statement')
    unknown src[289982] x[289916]
    (289985 'end of statement')
    unknown dst[289990](289989 call uint(64)[115] nbits[289977])
    (289993 'end of statement')
    (290009 call c_memcpy(289998 call c_ptrTo dst[289990])(290003 call c_ptrTo src[289982])(290008 call c_sizeof(290006 'typeof' src[289982])))
    if(290053 call _cond_test(290019 call ==(290016 call >> dst[289990](290014 call - nbits[289977] 1)) 1))
    {
      (290025 call = dst[289990](290023 call ~ dst[289990]))
    }
    {
      const one[290034] "const" 1(290032 call uint(64)[115] nbits[289977])
      (290037 'end of statement')
      (290050 call = dst[289990](290048 call ^ dst[289990](290046 call << one[290034](290044 call - nbits[289977] 1))))
    }
    (290062 return(290060 call _build_tuple section[289967] dst[289990]))
  }
  { scopeless type
    (289938 call _build_tuple(289928 call int(64)[13] 8)(289936 call uint(64)[115](289934 call numBits(289932 'typeof' x[289916]))))
  }
  function DefaultComparator[290449].keyPart[290073](arg _mt[290465]:_MT[238], arg this[290463]:DefaultComparator[290449], arg x[290070] :
  chpl_anyimag[190](?), arg i[290076] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (290109 return(290108 call(403926 call . this[290463] c"keyPart")(290104 call _cast(290103 call real(64)[16](290101 call numBits(290099 'typeof' x[290070]))) x[290070]) i[290076]))
  }
  { scopeless type
    (290092 call _build_tuple(290082 call int(64)[13] 8)(290090 call uint(64)[115](290088 call numBits(290086 'typeof' x[290070]))))
  }
  function DefaultComparator[290449].keyPart[290121](arg _mt[290469]:_MT[238], arg this[290467]:DefaultComparator[290449], arg x[290118] :
  _tuple[56199](?), arg i[290124] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    const tmp[290183] "const" "temp"(290182 call(290173 call . this[290467] c"keyPart")(290179 call x[290118] i[290124]) 1)
    (290187 call _check_tuple_var_decl tmp[290183] 2)
    const part[290169] "const"(290184 call tmp[290183] 1)
    (290192 'end of statement')
    if(290221 call _cond_test(290199 call >= i[290124](290196 call . x[290118] c"size")))
    {
      (290212 return(290210 call _build_tuple(290202 call - 1)(290207 call _cast(290206 'typeof' part[290169]) 0)))
    }
    {
      (290219 return(290217 call _build_tuple 0 part[290169]))
    }
  }
  where {
    (290165 call &&(290130 call isHomogeneousTuple x[290118])(290163 call ||(290154 call ||(290145 call ||(290137 call isInt(290135 call x[290118] 0))(290144 call isUint(290142 call x[290118] 0)))(290153 call isReal(290151 call x[290118] 0)))(290162 call isImag(290160 call x[290118] 0))))
  }
  function DefaultComparator[290449].keyPart[290236](arg _mt[290473]:_MT[238], arg this[290471]:DefaultComparator[290449], arg x[290233] :
  string[26], arg i[290239] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    if(290268 call _cond_test 1)
    {
      (290266 call assert(290263 call ==(290256 call . x[290233] c"locale_id")(290260 call .(364634 call here[90435]) c"id")))
    }
    unknown ptr[290289](290287 call _cast(290286 call c_ptr[205045](?)(290284 call uint(64)[115] 8))(290279 call(290275 call . x[290233] c"c_str")))
    (290292 'end of statement')
    unknown len[290297](290294 call . x[290233] c"numBytes")
    (290300 'end of statement')
    unknown section[290324](290321 IfExpr (290303 call < i[290239] len[290297]) then
    { scopeless
      (290310 call _cast(290309 call int(64)[13] 8) 0)
    } else
    { scopeless
      (290319 call -(290317 call _cast(290316 call int(64)[13] 8) 1))
    } )
    (290327 'end of statement')
    unknown part[290346](290343 IfExpr (290330 call < i[290239] len[290297]) then
    { scopeless
      (290335 call ptr[290289] i[290239])
    } else
    { scopeless
      (290341 call _cast(290340 call uint(64)[115] 8) 0)
    } )
    (290349 'end of statement')
    (290355 return(290353 call _build_tuple section[290324] part[290346]))
  }
  { scopeless type
    (290251 call _build_tuple(290245 call int(64)[13] 8)(290249 call uint(64)[115] 8))
  }
  function DefaultComparator[290449].keyPart[290366](arg _mt[290477]:_MT[238], arg this[290475]:DefaultComparator[290449], arg x[290363] :
  c_string[19], arg i[290369] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ptr[290393](290391 call _cast(290390 call c_ptr[205045](?)(290388 call uint(64)[115] 8)) x[290363])
    (290396 'end of statement')
    unknown byte[290402](290401 call ptr[290393] i[290369])
    (290405 'end of statement')
    unknown section[290429](290426 IfExpr (290408 call != byte[290402] 0) then
    { scopeless
      (290415 call _cast(290414 call int(64)[13] 8) 0)
    } else
    { scopeless
      (290424 call -(290422 call _cast(290421 call int(64)[13] 8) 1))
    } )
    (290432 'end of statement')
    unknown part[290434] byte[290402]
    (290437 'end of statement')
    (290443 return(290441 call _build_tuple section[290429] part[290434]))
  }
  { scopeless type
    (290381 call _build_tuple(290375 call int(64)[13] 8)(290379 call uint(64)[115] 8))
  }
  type DefaultComparator[290449]
  function ReverseComparator[291086](?).init[290487](arg _mt[291090]:_MT[238], arg this[291088]:ReverseComparator[291086](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (290496 call =(290492 call . this[291088] c"comparator") defaultComparator[267889])
  }
  function ReverseComparator[291086](?).init[290506](arg _mt[291094]:_MT[238], arg this[291092]:ReverseComparator[291086](?), arg comparator[290504]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (290513 call =(290509 call . this[291092] c"comparator") comparator[290504])
  }
  function ReverseComparator[291086](?).init=[290528](arg _mt[291098]:_MT[238], arg this[291096]:ReverseComparator[291086](?), arg revcomp[290525] :
  (290524 call ReverseComparator[291086](?) ?[260])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (290538 call =(290531 call . this[291096] c"comparator")(290535 call . revcomp[290525] c"comparator"))
  }
  function ReverseComparator[291086](?).typeIsBitReversible[290548](arg _mt[291102]:_MT[238], arg this[291100]:ReverseComparator[291086](?), arg t[290546]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290570 call _cond_test(290553 call isHomogeneousTupleType t[290546]))
    {
      unknown tmp[290555] t[290546]
      (290558 'end of statement')
      (290568 return(290567 call(403970 call . this[291100] c"typeIsBitReversible")(290565 'typeof'(290564 call tmp[290555] 0))))
    }
    if(290582 call _cond_test(290578 call isUintType t[290546]))
    {
      (290580 return 1)
    }
    if(290594 call _cond_test(290590 call isIntType t[290546]))
    {
      (290592 return 1)
    }
    (290600 return 0)
  }
  function ReverseComparator[291086](?).typeIsNegateReversible[290608](arg _mt[291106]:_MT[238], arg this[291104]:ReverseComparator[291086](?), arg t[290606]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290630 call _cond_test(290613 call isHomogeneousTupleType t[290606]))
    {
      unknown tmp[290615] t[290606]
      (290618 'end of statement')
      (290628 return(290627 call(403981 call . this[291104] c"typeIsNegateReversible")(290625 'typeof'(290624 call tmp[290615] 0))))
    }
    if(290648 call _cond_test(290643 call ||(290638 call isIntType t[290606])(290642 call isUintType t[290606])))
    {
      (290646 return 0)
    }
    if(290660 call _cond_test(290656 call isNumericType t[290606]))
    {
      (290658 return 1)
    }
    (290666 return 0)
  }
  function ReverseComparator[291086](?).hasKeyPart[290674](arg _mt[291110]:_MT[238], arg this[291108]:ReverseComparator[291086](?), arg a[290672]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    (290686 return(290685 call canResolveMethod(290678 call . this[291108] c"comparator") "keyPart" a[290672] 0))
  }
  function ReverseComparator[291086](?).hasKeyPartFromKey[290695](arg _mt[291114]:_MT[238], arg this[291112]:ReverseComparator[291086](?), arg a[290693]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290728 call _cond_test(290705 call canResolveMethod(290699 call . this[291112] c"comparator") "key" a[290693]))
    {
      unknown key[290714](290713 'typeof'(290712 call(290707 call .(364646 call . this[291112] c"comparator") c"key") a[290693]))
      (290717 'end of statement')
      (290726 return(290725 call canResolveMethod defaultComparator[267889] "keyPart" key[290714] 0))
    }
    (290734 return 0)
  }
  function ReverseComparator[291086](?).hasCompare[290742](arg _mt[291118]:_MT[238], arg this[291116]:ReverseComparator[291086](?), arg a[290740]:_any[178](?), arg b[290744]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    (290756 return(290755 call canResolveMethod(290748 call . this[291116] c"comparator") "compare" a[290740] b[290744]))
  }
  function ReverseComparator[291086](?).hasCompareFromKey[290765](arg _mt[291122]:_MT[238], arg this[291120]:ReverseComparator[291086](?), arg a[290763]:_any[178](?)) param : _unknown[51] "method" "primary method" "no doc"
  {
    if(290798 call _cond_test(290775 call canResolveMethod(290769 call . this[291120] c"comparator") "key" a[290763]))
    {
      unknown key[290784](290783 'typeof'(290782 call(290777 call .(364653 call . this[291120] c"comparator") c"key") a[290763]))
      (290787 'end of statement')
      (290796 return(290795 call canResolveMethod defaultComparator[267889] "compare" key[290784] key[290784]))
    }
    (290804 return 0)
  }
  function ReverseComparator[291086](?).getKeyPart[290812](arg _mt[291126]:_MT[238], arg this[291124]:ReverseComparator[291086](?), arg cmp[290810]:_any[178](?), arg a[290814]:_any[178](?), arg i[290816]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown tmp[290831] "temp"(290830 call(290824 call . cmp[290810] c"keyPart") a[290814] i[290816])
    (290838 call _check_tuple_var_decl tmp[290831] 2)
    unknown section[290818](290832 call tmp[290831] 0)
    unknown part[290820](290835 call tmp[290831] 1)
    (290843 'end of statement')
    if(290905 call _cond_test(290849 call(404003 call . this[291124] c"typeIsBitReversible")(290847 'typeof' part[290820])))
    {
      (290859 return(290857 call _build_tuple(290851 call - section[290818])(290854 call ~ part[290820])))
    }
    {
      if(290901 call _cond_test(290866 call(404010 call . this[291124] c"typeIsNegateReversible")(290864 'typeof' part[290820])))
      {
        (290876 return(290874 call _build_tuple(290868 call - section[290818])(290871 call - part[290820])))
      }
      {
        (290898 call compilerError "keyPart must return int or uint")
      }
    }
  }
  function ReverseComparator[291086](?).keyPart[290916](arg _mt[291130]:_MT[238], arg this[291128]:ReverseComparator[291086](?), arg a[290914]:_any[178](?), arg i[290918]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (290938 call chpl_check_comparator(290932 call . this[291128] c"comparator")(290937 'typeof' a[290914]))
    if(290975 call _cond_test(290944 call(404032 call . this[291128] c"hasKeyPartFromKey") a[290914]))
    {
      (290960 return(290959 call(404039 call . this[291128] c"getKeyPart") defaultComparator[267889](290957 call(290952 call .(290949 call . this[291128] c"comparator") c"key") a[290914]) i[290918]))
    }
    {
      (290972 return(290971 call(404046 call . this[291128] c"getKeyPart")(290965 call . this[291128] c"comparator") a[290914] i[290918]))
    }
  }
  where {
    (290928 call ||(290923 call(404019 call . this[291128] c"hasKeyPart") a[290914])(290927 call(404026 call . this[291128] c"hasKeyPartFromKey") a[290914]))
  }
  function ReverseComparator[291086](?).doCompare[290986](arg _mt[291134]:_MT[238], arg this[291132]:ReverseComparator[291086](?), arg cmp[290984]:_any[178](?), arg a[290988]:_any[178](?), arg b[290990]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (291000 return(290999 call(290993 call . cmp[290984] c"compare") b[290990] a[290988]))
  }
  function ReverseComparator[291086](?).compare[291009](arg _mt[291138]:_MT[238], arg this[291136]:ReverseComparator[291086](?), arg a[291007]:_any[178](?), arg b[291011]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (291032 call chpl_check_comparator(291026 call . this[291136] c"comparator")(291031 'typeof' a[291007]))
    if(291078 call _cond_test(291038 call(404070 call . this[291136] c"hasCompareFromKey") a[291007]))
    {
      (291063 return(291062 call(404077 call . this[291136] c"doCompare") defaultComparator[267889](291051 call(291046 call .(291043 call . this[291136] c"comparator") c"key") a[291007])(291061 call(291056 call .(291053 call . this[291136] c"comparator") c"key") b[291011])))
    }
    {
      (291075 return(291074 call(404084 call . this[291136] c"doCompare")(291068 call . this[291136] c"comparator") a[291007] b[291011]))
    }
  }
  where {
    (291022 call ||(291017 call(404056 call . this[291136] c"hasCompare") a[291007] b[291011])(291021 call(404064 call . this[291136] c"hasCompareFromKey") a[291007]))
  }
  type ReverseComparator[291086](?) unknown comparator[290481]
  (355240 'used modules list'(352930 'use' ChapelStandard[20264])(267882 'use' List[298128])(267886 'use' Reflection[224794]))
}