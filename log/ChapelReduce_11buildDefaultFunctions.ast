AST dump for ChapelReduce after pass buildDefaultFunctions.
Module use list: ChapelStandard ChapelLocks Reflection 

{
  function chpl__init_ChapelReduce[415865]() : void[4] "insert line file info" "module init"
  {
    (512573 return _void[55])
  }
  function chpl__scanStateResTypesMatch[81787](arg op[81785]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512034] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[491824] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628454] "expr temp" "maybe param" "maybe type" "temp"
      (628457 'move' call_tmp[628454](81796 call(81792 call (partial) generate _mt[243] op[81785])))
      (491828 'move' call_type_tmp[491824](81797 'typeof' call_tmp[628454]))
    }
    unknown resType[81798] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491824]
    (541370 'move' resType[81798] call_type_tmp[491824])
    (476589 'end of statement')
    { scopeless type
      unknown call_type_tmp[491830] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[628461] "expr temp" "maybe param" "maybe type" "temp"
      (628464 'move' call_tmp[628461](81805 call identity _mt[243] op[81785]))
      (491834 'move' call_type_tmp[491830](81808 'typeof' call_tmp[628461]))
    }
    unknown stateType[81809] "dead at end of block" "insert auto destroy" "type variable" call_type_tmp[491830]
    (541373 'move' stateType[81809] call_type_tmp[491830])
    (476590 'end of statement')
    unknown call_tmp[628466] "expr temp" "maybe param" "maybe type" "temp"
    (628469 'move' call_tmp[628466](81814 call == resType[81798] stateType[81809]))
    (512039 'move' ret[512034](512038 'deref' call_tmp[628466]))
    gotoReturn _end_chpl__scanStateResTypesMatch[512032] _end_chpl__scanStateResTypesMatch[512032]
    (476591 'end of statement' resType[81798] stateType[81809])
    label _end_chpl__scanStateResTypesMatch[512032]
    (512036 return ret[512034])
  }
  function chpl__scanIteratorZip[81824](arg op[81822]:_any[178](?), arg data[81826]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512045] "RVV" "temp"
    (81847 call compilerWarning "scan has been serialized (see issue #12482)")
    (476594 'end of statement')
    unknown arr[81865] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter1[581409](arg iterator[581411]:_any[178](?), arg op[581447]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[581458] "RVV" "temp"
      {
        unknown _indexOfInterest[581416] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[581417] "expr temp" "temp"
        (581426 'move' _iterator[581417](581424 call _getIteratorZip iterator[581411]))
        Defer
        {
          {
            (581440 call _freeIterator _iterator[581417])
          }
        }
        { scopeless type
          (581431 'move' _indexOfInterest[581416](581428 call iteratorIndex _iterator[581417]))
        }
        ForLoop[581418] for-expr
        {
          unknown d[81863] "index var" "insert auto destroy" "no doc"
          (581451 'end of statement')
          (581435 'move' d[81863] _indexOfInterest[581416])
          (581452 'end of statement' d[81863])
          {
            {
              unknown yret[581462] "YVV" "temp"
              unknown call_tmp[581469] "expr temp" "maybe param" "maybe type" "temp"
              (581472 'move' call_tmp[581469](81859 call chpl__accumgen op[581447] d[81863]))
              (581465 'move' yret[581462](581464 'deref' call_tmp[581469]))
              (581467 yield yret[581462])
              (581454 'end of statement' d[81863])
            }
          }
          label _continueLabel[581421]
          _indexOfInterest[581416]
          _iterator[581417]
        }
        label _breakLabel[581422]
      }
      (581460 return ret[581458])
    }
    function chpl__forexpr1[581389](arg iterExpr[581392]:_any[178](?), arg op[581396]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[581477] "RVV" "temp"
      unknown _iterator[581399] "expr temp" "maybe ref" "temp"
      (581401 'move' _iterator[581399] iterExpr[581392])
      unknown call_tmp[581484] "expr temp" "maybe param" "maybe type" "temp"
      (581487 'move' call_tmp[581484](581404 call chpl__loopexpr_iter1 _iterator[581399] op[581396]))
      (581482 'move' ret[581477](581481 'deref' call_tmp[581484]))
      (581479 return ret[581477])
    }
    unknown call_tmp[581489] "expr temp" "maybe param" "maybe type" "temp"
    (581492 'move' call_tmp[581489](81854 call _build_tuple(81852 'expand_tuple' data[81826])))
    unknown call_tmp[581494] "maybe param" "maybe type" "temp"
    (581497 'move' call_tmp[581494](581394 call chpl__forexpr1 call_tmp[581489] op[81822]))
    (581502 'iterator record set shape' call_tmp[581494](581500 'expand_tuple' data[81826]) 1)
    (541375 'init var' arr[81865] call_tmp[581494])
    (81868 'end of statement')
    (81871 call chpl__delete op[81822])
    (476595 'end of statement')
    (512050 'move' ret[512045](512049 'deref' arr[81865]))
    gotoReturn _end_chpl__scanIteratorZip[512043] _end_chpl__scanIteratorZip[512043]
    (476596 'end of statement' arr[81865])
    label _end_chpl__scanIteratorZip[512043]
    (512047 return ret[512045])
  }
  function chpl__scanIterator[81883](arg op[81881]:_any[178](?), arg data[81885]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512056] "RVV" "temp"
    unknown tmp[421561] "maybe param" "temp"
    (421572 'move' tmp[421561](81894 call isArray data[81885]))
    unknown call_tmp[628471] "expr temp" "maybe param" "maybe type" "temp"
    (628474 'move' call_tmp[628471](421574 call _cond_invalid tmp[421561]))
    if call_tmp[628471]
    {
      (421577 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown supportsPar[81919] "dead at end of block" "param"
    unknown tmp[559962] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559963] "maybe param" "temp"
    unknown call_tmp[628476] "expr temp" "maybe param" "maybe type" "temp"
    (628479 'move' call_tmp[628476](421562 call isTrue tmp[421561]))
    (559968 'move' tmp[559963](559966 call _cond_test call_tmp[628476]))
    if tmp[559963]
    {
      unknown tmp[559970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628481] "expr temp" "maybe param" "maybe type" "temp"
      (628484 'move' call_tmp[628481](81916 call canResolveMethod data[81885] "_scan" op[81881]))
      (559972 'move' tmp[559970](421565 call isTrue call_tmp[628481]))
      (559977 'move' tmp[559962](559974 '_paramFoldLogical' tmp[559963] tmp[559970]))
    }
    {
      (559982 'move' tmp[559962](559979 '_paramFoldLogical' tmp[559963] 0))
    }
    (541377 'init var' supportsPar[81919] tmp[559962])
    (81922 'end of statement')
    unknown call_tmp[628486] "expr temp" "maybe param" "maybe type" "temp"
    (628489 'move' call_tmp[628486](81963 call _cond_test supportsPar[81919]))
    if call_tmp[628486]
    {
      unknown call_tmp[628493] "expr temp" "maybe param" "maybe type" "temp"
      (628496 'move' call_tmp[628493](81930 call(81925 call (partial) _scan _mt[243] data[81885]) op[81881]))
      (512061 'move' ret[512056](512060 'deref' call_tmp[628493]))
      gotoReturn _end_chpl__scanIterator[512054] _end_chpl__scanIterator[512054]
    }
    {
      (81937 call compilerWarning "scan has been serialized (see issue #12482)")
      (476600 'end of statement')
      unknown arr[81951] "dead at end of block" "insert auto destroy"
      function chpl__loopexpr_iter2[581524](arg iterator[581526]:_any[178](?), arg op[581562]:_any[178](?)) : _unknown[51] "iterator fn"
      {
        unknown ret[581573] "RVV" "temp"
        {
          unknown _indexOfInterest[581531] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[581532] "expr temp" "temp"
          (581541 'move' _iterator[581532](581539 call _getIterator iterator[581526]))
          Defer
          {
            {
              (581555 call _freeIterator _iterator[581532])
            }
          }
          { scopeless type
            (581546 'move' _indexOfInterest[581531](581543 call iteratorIndex _iterator[581532]))
          }
          ForLoop[581533] for-expr
          {
            unknown d[81949] "index var" "insert auto destroy" "no doc"
            (581566 'end of statement')
            (581550 'move' d[81949] _indexOfInterest[581531])
            (581567 'end of statement' d[81949])
            {
              {
                unknown yret[581577] "YVV" "temp"
                unknown call_tmp[581584] "expr temp" "maybe param" "maybe type" "temp"
                (581587 'move' call_tmp[581584](81946 call chpl__accumgen op[581562] d[81949]))
                (581580 'move' yret[581577](581579 'deref' call_tmp[581584]))
                (581582 yield yret[581577])
                (581569 'end of statement' d[81949])
              }
            }
            label _continueLabel[581536]
            _indexOfInterest[581531]
            _iterator[581532]
          }
          label _breakLabel[581537]
        }
        (581575 return ret[581573])
      }
      function chpl__forexpr2[581504](arg iterExpr[581507]:_any[178](?), arg op[581511]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
      {
        unknown ret[581592] "RVV" "temp"
        unknown _iterator[581514] "expr temp" "maybe ref" "temp"
        (581516 'move' _iterator[581514] iterExpr[581507])
        unknown call_tmp[581599] "expr temp" "maybe param" "maybe type" "temp"
        (581602 'move' call_tmp[581599](581519 call chpl__loopexpr_iter2 _iterator[581514] op[581511]))
        (581597 'move' ret[581592](581596 'deref' call_tmp[581599]))
        (581594 return ret[581592])
      }
      unknown call_tmp[581604] "maybe param" "maybe type" "temp"
      (581607 'move' call_tmp[581604](581509 call chpl__forexpr2 data[81885] op[81881]))
      (581611 'iterator record set shape' call_tmp[581604] data[81885] 1)
      (541379 'init var' arr[81951] call_tmp[581604])
      (81954 'end of statement')
      (81957 call chpl__delete op[81881])
      (476601 'end of statement')
      (512066 'move' ret[512056](512065 'deref' arr[81951]))
      gotoReturn _end_chpl__scanIterator[512054] _end_chpl__scanIterator[512054]
      (476602 'end of statement' arr[81951])
    }
    label _end_chpl__scanIterator[512054]
    (512058 return ret[512056])
    (354970 'used modules list'(81888 'use' Reflection[224794]))
  }
  function chpl__accumgen[81973](arg op[81971]:_any[178](?), arg d[81975]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512072] "RVV" "temp"
    (81985 call(81980 call (partial) accumulate _mt[243] op[81971]) d[81975])
    (476604 'end of statement')
    unknown call_tmp[628502] "expr temp" "maybe param" "maybe type" "temp"
    (628505 'move' call_tmp[628502](81993 call(81989 call (partial) generate _mt[243] op[81971])))
    (512077 'move' ret[512072](512076 'deref' call_tmp[628502]))
    (512074 return ret[512072])
  }
  function chpl__reduceCombine[82002](arg globalOp[82000]:_any[178](?), arg localOp[82004]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    const tmp[82047] "const" "temp"
    unknown call_tmp[628507] "expr temp" "maybe param" "maybe type" "temp"
    (628510 'move' call_tmp[628507](82044 '_wide_get_locale' globalOp[82000]))
    (82049 'move' tmp[82047](82045 'deref' call_tmp[628507]))
    {
      {
        unknown call_tmp[628514] "expr temp" "maybe param" "maybe type" "temp"
        (628517 'move' call_tmp[628514](82010 call l _mt[243] globalOp[82000]))
        (82019 call(82015 call (partial) lock _mt[243] call_tmp[628514]))
        (476606 'end of statement')
        (82030 call(82025 call (partial) combine _mt[243] globalOp[82000]) localOp[82004])
        (476607 'end of statement')
        unknown call_tmp[628525] "expr temp" "maybe param" "maybe type" "temp"
        (628528 'move' call_tmp[628525](82033 call l _mt[243] globalOp[82000]))
        (82042 call(82038 call (partial) unlock _mt[243] call_tmp[628525]))
      }
      (82052 'on block' 0 tmp[82047])
    }
    (512079 return _void[55])
  }
  function chpl__cleanupLocalOp[82062](arg globalOp[82060]:_any[178](?), arg localOp[82064]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (82068 call chpl__delete localOp[82064])
    (512081 return _void[55])
  }
  function chpl_sumTypeIsSame[82078](arg eltType[82076]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[512085] "RVV" "param" "temp"
    unknown tmp[421582] "maybe param" "temp"
    (421593 'move' tmp[421582](82083 call isNumeric eltType[82076]))
    unknown call_tmp[628532] "expr temp" "maybe param" "maybe type" "temp"
    (628535 'move' call_tmp[628532](421595 call _cond_invalid tmp[421582]))
    if call_tmp[628532]
    {
      (421598 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[559989] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559990] "maybe param" "temp"
    unknown call_tmp[628537] "expr temp" "maybe param" "maybe type" "temp"
    (628540 'move' call_tmp[628537](421583 call isTrue tmp[421582]))
    (559995 'move' tmp[559990](559993 call _cond_test call_tmp[628537]))
    if tmp[559990]
    {
      (560000 'move' tmp[559989](559997 '_paramFoldLogical' tmp[559990] 1))
    }
    {
      unknown tmp[560002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[628542] "expr temp" "maybe param" "maybe type" "temp"
      (628545 'move' call_tmp[628542](82087 call isString eltType[82076]))
      (560004 'move' tmp[560002](421587 call isTrue call_tmp[628542]))
      (560009 'move' tmp[559989](560006 '_paramFoldLogical' tmp[559990] tmp[560002]))
    }
    unknown call_tmp[628547] "expr temp" "maybe param" "maybe type" "temp"
    (628550 'move' call_tmp[628547](82160 call _cond_test tmp[559989]))
    if call_tmp[628547]
    {
      (512090 'move' ret[512085](512089 'deref' 1))
      gotoReturn _end_chpl_sumTypeIsSame[512083] _end_chpl_sumTypeIsSame[512083]
    }
    {
      unknown call_tmp[628552] "expr temp" "maybe param" "maybe type" "temp"
      (628555 'move' call_tmp[628552](82097 call isDomain eltType[82076]))
      unknown call_tmp[628557] "expr temp" "maybe param" "maybe type" "temp"
      (628560 'move' call_tmp[628557](82155 call _cond_test call_tmp[628552]))
      if call_tmp[628557]
      {
        unknown d[82099] "dead at end of block" "insert auto destroy"
        (541381 'default init var' d[82099] eltType[82076])
        (82102 'end of statement')
        unknown call_tmp[628562] "expr temp" "maybe param" "maybe type" "temp"
        (628565 'move' call_tmp[628562](82107 call isAssociativeDom d[82099]))
        (512095 'move' ret[512085](512094 'deref' call_tmp[628562]))
        gotoReturn _end_chpl_sumTypeIsSame[512083] _end_chpl_sumTypeIsSame[512083]
        (476612 'end of statement' d[82099])
      }
      {
        unknown call_tmp[628567] "expr temp" "maybe param" "maybe type" "temp"
        (628570 'move' call_tmp[628567](82113 call isArray eltType[82076]))
        unknown call_tmp[628572] "expr temp" "maybe param" "maybe type" "temp"
        (628575 'move' call_tmp[628572](82151 call _cond_test call_tmp[628567]))
        if call_tmp[628572]
        {
          unknown arrInstType[82119] "dead at end of block" "insert auto destroy" "type variable"(82118 'static field type' eltType[82076] "_instance")
          (541386 'move' arrInstType[82119](541383 'static field type' eltType[82076] "_instance"))
          unknown instanceObj[82125] "dead at end of block" "insert auto destroy"
          unknown call_tmp[628577] "expr temp" "maybe param" "maybe type" "temp"
          (628580 'move' call_tmp[628577](82124 'to nilable class from type' arrInstType[82119]))
          (541388 'default init var' instanceObj[82125] call_tmp[628577])
          (82128 'end of statement' arrInstType[82119])
          unknown call_tmp[628582] "expr temp" "maybe param" "maybe type" "temp"
          (628585 'move' call_tmp[628582](82132 call postfix! instanceObj[82125]))
          unknown call_tmp[628589] "expr temp" "maybe param" "maybe type" "temp"
          (628592 'move' call_tmp[628589](82134 call eltType _mt[243] call_tmp[628582]))
          unknown instanceEltType[82138] "dead at end of block" "insert auto destroy" "type variable"(82137 'static typeof' call_tmp[628589])
          unknown call_tmp[628594] "expr temp" "maybe param" "maybe type" "temp"
          (628597 'move' call_tmp[628594](541394 call postfix! instanceObj[82125]))
          unknown call_tmp[628601] "expr temp" "maybe param" "maybe type" "temp"
          (628604 'move' call_tmp[628601](541392 call eltType _mt[243] call_tmp[628594]))
          (541397 'move' instanceEltType[82138](541390 'static typeof' call_tmp[628601]))
          (476615 'end of statement' instanceObj[82125])
          unknown call_tmp[628606] "expr temp" "maybe param" "maybe type" "temp"
          (628609 'move' call_tmp[628606](82144 call chpl_sumTypeIsSame instanceEltType[82138]))
          (512100 'move' ret[512085](512099 'deref' call_tmp[628606]))
          gotoReturn _end_chpl_sumTypeIsSame[512083] _end_chpl_sumTypeIsSame[512083]
          (476617 'end of statement' instanceEltType[82138])
        }
        {
          (512105 'move' ret[512085](512104 'deref' 0))
          gotoReturn _end_chpl_sumTypeIsSame[512083] _end_chpl_sumTypeIsSame[512083]
        }
      }
    }
    label _end_chpl_sumTypeIsSame[512083]
    (512087 return ret[512085])
  }
  function chpl__sumType[82172](arg eltType[82170]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[512111] "RVV" "temp" "type variable"
    unknown call_tmp[628611] "expr temp" "maybe param" "maybe type" "temp"
    (628614 'move' call_tmp[628611](82177 call chpl_sumTypeIsSame eltType[82170]))
    unknown call_tmp[628616] "expr temp" "maybe param" "maybe type" "temp"
    (628619 'move' call_tmp[628616](82283 call _cond_test call_tmp[628611]))
    if call_tmp[628616]
    {
      (512116 'move' ret[512111](512115 'deref' eltType[82170]))
      gotoReturn _end_chpl__sumType[512109] _end_chpl__sumType[512109]
    }
    {
      unknown x[82183] "dead at end of block" "insert auto destroy"
      (541399 'default init var' x[82183] eltType[82170])
      (82186 'end of statement')
      unknown call_tmp[628621] "expr temp" "maybe param" "maybe type" "temp"
      (628624 'move' call_tmp[628621](82191 call isArray x[82183]))
      unknown call_tmp[628626] "expr temp" "maybe param" "maybe type" "temp"
      (628629 'move' call_tmp[628626](82279 call _cond_test call_tmp[628621]))
      if call_tmp[628626]
      {
        unknown xET[82196] "dead at end of block" "insert auto destroy" "type variable"(82193 call eltType _mt[243] x[82183])
        (541405 'move' xET[82196](541402 call eltType _mt[243] x[82183]))
        (476621 'end of statement' x[82183])
        unknown xST[82204] "dead at end of block" "insert auto destroy" "type variable"(82203 call chpl__sumType xET[82196])
        (541410 'move' xST[82204](541408 call chpl__sumType xET[82196]))
        (476623 'end of statement' xET[82196])
        unknown call_tmp[628635] "expr temp" "maybe param" "maybe type" "temp"
        (628638 'move' call_tmp[628635](82209 call == xET[82196] xST[82204]))
        unknown call_tmp[628640] "expr temp" "maybe param" "maybe type" "temp"
        (628643 'move' call_tmp[628640](82224 call _cond_test call_tmp[628635]))
        if call_tmp[628640]
        {
          (512121 'move' ret[512111](512120 'deref' eltType[82170]))
          gotoReturn _end_chpl__sumType[512109] _end_chpl__sumType[512109]
        }
        {
          function chpl__loopexpr_iter3[581700](arg iterator[581702]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[581840] "RVV" "temp"
            {
              unknown _indexOfInterest[581707] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581708] "expr temp" "temp"
              (581717 'move' _iterator[581708](581715 call _getIterator iterator[581702]))
              Defer
              {
                {
                  (581734 call _freeIterator _iterator[581708])
                }
              }
              { scopeless type
                (581722 'move' _indexOfInterest[581707](581719 call iteratorIndex _iterator[581708]))
              }
              ForLoop[581709] for-expr
              {
                unknown chpl__elidedIdx[581727] "index var" "insert auto destroy"
                (581834 'end of statement')
                (581729 'move' chpl__elidedIdx[581727] _indexOfInterest[581707])
                (581835 'end of statement' chpl__elidedIdx[581727])
                {
                  {
                    unknown yret[581844] "YVV" "temp"
                    (581847 'move' yret[581844](581846 'deref' xST[82204]))
                    (581849 yield yret[581844])
                  }
                }
                label _continueLabel[581712]
                _indexOfInterest[581707]
                _iterator[581708]
              }
              label _breakLabel[581713]
            }
            (581842 return ret[581840])
          }
          function chpl__loopexpr_iter3[581741](param arg tag[581745]:iterKind[453], arg iterator[581748]:_any[178](?)) : _unknown[51] "fn returns iterator"
          {
            unknown ret[581876] "RVV" "temp"
            const _leaderIterator[581760] "const" "expr temp" "temp"
            (581765 'move' _leaderIterator[581760](581762 call _toLeader iterator[581748]))
            (581881 'move' ret[581876](581880 'deref' _leaderIterator[581760]))
            (581878 return ret[581876])
          }
          where {
            unknown tmp[581852] "maybe param" "temp"
            (581863 'move' tmp[581852](581750 call == tag[581745] leader[447]))
            unknown call_tmp[581910] "expr temp" "maybe param" "maybe type" "temp"
            (581913 'move' call_tmp[581910](581865 call _cond_invalid tmp[581852]))
            if call_tmp[581910]
            {
              (581868 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[581883] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[581884] "maybe param" "temp"
            unknown call_tmp[581915] "expr temp" "maybe param" "maybe type" "temp"
            (581918 'move' call_tmp[581915](581853 call isTrue tmp[581852]))
            (581889 'move' tmp[581884](581887 call _cond_test call_tmp[581915]))
            if tmp[581884]
            {
              unknown tmp[581891] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[581920] "expr temp" "maybe param" "maybe type" "temp"
              (581923 'move' call_tmp[581920](581754 'call resolves' "_toLeader" iterator[581748]))
              (581893 'move' tmp[581891](581856 call isTrue call_tmp[581920]))
              (581898 'move' tmp[581883](581895 '_paramFoldLogical' tmp[581884] tmp[581891]))
            }
            {
              (581903 'move' tmp[581883](581900 '_paramFoldLogical' tmp[581884] 0))
            }
            (748333 call chpl_statementLevelSymbol tmp[581883])
          }
          function chpl__loopexpr_iter3[581769](param arg tag[581773]:iterKind[453], arg followThis[581776]:_any[178](?), arg iterator[581778]:_any[178](?)) : _unknown[51] "iterator fn"
          {
            unknown ret[581933] "RVV" "temp"
            const _followerIterator[581785] "const" "expr temp" "temp"
            (581791 'move' _followerIterator[581785](581787 call _toFollower iterator[581778] followThis[581776]))
            {
              unknown _indexOfInterest[581798] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[581799] "expr temp" "temp"
              (581808 'move' _iterator[581799](581806 call _getIterator _followerIterator[581785]))
              Defer
              {
                {
                  (581825 call _freeIterator _iterator[581799])
                }
              }
              { scopeless type
                (581813 'move' _indexOfInterest[581798](581810 call iteratorIndex _iterator[581799]))
              }
              ForLoop[581800] lowered-forall for-expr
              {
                unknown chpl__elidedIdx[581818] "index var" "insert auto destroy"
                (581927 'end of statement')
                (581820 'move' chpl__elidedIdx[581818] _indexOfInterest[581798])
                (581928 'end of statement' chpl__elidedIdx[581818])
                {
                  {
                    unknown yret[581937] "YVV" "temp"
                    (581940 'move' yret[581937](581939 'deref' xST[82204]))
                    (581942 yield yret[581937])
                  }
                }
                label _continueLabel[581803]
                _indexOfInterest[581798]
                _iterator[581799]
              }
              label _breakLabel[581804]
            }
            (581935 return ret[581933])
          }
          where {
            (581781 call == tag[581773] follower[449])
          }
          function chpl__forallexpr3[581613](arg iterExpr[581616]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "maybe type" "fn returns iterator"
          {
            unknown ret[581954] "RVV" "maybe type" "temp"
            function _isArrayTypeFn[581622]() : _unknown[51] "inline"
            {
              unknown _iterator[581627] "temp"
              (581632 'move' _iterator[581627](581629 call _getIterator iterExpr[581616]))
              unknown _indexOfInterest[581634] "an _indexOfInterest or chpl__followIdx variable" "temp"
              (581639 'move' _indexOfInterest[581634](581636 call iteratorIndex _iterator[581627]))
              unknown chpl__elidedIdx[581645] "index var" "insert auto destroy"
              (581944 'end of statement')
              (581647 'move' chpl__elidedIdx[581645] _indexOfInterest[581634])
              (581945 'end of statement' chpl__elidedIdx[581645])
              unknown isType_result[581649] "param" "temp"
              {
                (581655 'move' isType_result[581649](581653 call isType xST[82204]))
              }
              if isType_result[581649]
              {
                (581658 'move' _isArrayType[581625] 1)
              }
              {
                (581661 'move' _isArrayType[581625] 0)
              }
              (581950 return _void[55])
            }
            unknown _isArrayType[581625] "maybe param" "temp"
            { scopeless type
              (581668 call _isArrayTypeFn[581622])
            }
            if _isArrayType[581625]
            {
              unknown _arrayType[581670] "expr temp" "maybe type" "temp"
              unknown _domain[581673] "expr temp" "no auto destroy" "temp"
              (581678 'move' _domain[581673](581675 call chpl__ensureDomainExpr iterExpr[581616]))
              {
                (581685 'move' _arrayType[581670](581682 call chpl__buildArrayRuntimeType _domain[581673] xST[82204]))
              }
              (581959 'move' ret[581954](581958 'deref' _arrayType[581670]))
              gotoReturn _end_chpl__forallexpr3[581952] _end_chpl__forallexpr3[581952]
            }
            {
              unknown _iterator[581691] "expr temp" "maybe ref" "temp"
              (581693 'move' _iterator[581691] iterExpr[581616])
              unknown call_tmp[581968] "expr temp" "maybe param" "maybe type" "temp"
              (581971 'move' call_tmp[581968](581696 call chpl__loopexpr_iter3 _iterator[581691]))
              (581964 'move' ret[581954](581963 'deref' call_tmp[581968]))
              gotoReturn _end_chpl__forallexpr3[581952] _end_chpl__forallexpr3[581952]
            }
            label _end_chpl__forallexpr3[581952]
            (581956 return ret[581954])
          }
          unknown call_tmp[581975] "expr temp" "maybe param" "maybe type" "temp"
          (581978 'move' call_tmp[581975](82215 call _dom _mt[243] x[82183]))
          unknown call_tmp[581980] "expr temp" "maybe param" "maybe type" "temp"
          (581983 'move' call_tmp[581980](581618 call chpl__forallexpr3 call_tmp[581975]))
          (581987 'iterator record set shape' call_tmp[581980] call_tmp[581975] 0)
          (512126 'move' ret[512111](512125 'deref' call_tmp[581980]))
          gotoReturn _end_chpl__sumType[512109] _end_chpl__sumType[512109]
          (476626 'end of statement' x[82183] xST[82204])
        }
      }
      {
        unknown call_tmp[628645] "expr temp" "maybe param" "maybe type" "temp"
        (628648 'move' call_tmp[628645](82239 call canResolve "+" x[82183] x[82183]))
        unknown call_tmp[628650] "expr temp" "maybe param" "maybe type" "temp"
        (628653 'move' call_tmp[628650](82240 call ! call_tmp[628645]))
        unknown call_tmp[628655] "expr temp" "maybe param" "maybe type" "temp"
        (628658 'move' call_tmp[628655](82267 call _cond_test call_tmp[628650]))
        if call_tmp[628655]
        {
          unknown call_tmp[628660] "expr temp" "maybe param" "maybe type" "temp"
          (628663 'move' call_tmp[628660](82263 call _cast string[26] eltType[82170]))
          (82265 call compilerError "+ reduce cannot be used on values of the type " call_tmp[628660])
        }
        { scopeless type
          unknown call_type_tmp[491836] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[628665] "expr temp" "maybe param" "maybe type" "temp"
          (628668 'move' call_tmp[628665](82274 call + x[82183] x[82183]))
          (491840 'move' call_type_tmp[491836](82276 'typeof' call_tmp[628665]))
        }
        (512131 'move' ret[512111](512130 'deref' call_type_tmp[491836]))
        gotoReturn _end_chpl__sumType[512109] _end_chpl__sumType[512109]
        (476630 'end of statement' x[82183] x[82183])
        (354972 'used modules list'(82231 'use' Reflection[224794]))
      }
    }
    label _end_chpl__sumType[512109]
    (512113 return ret[512111])
  }
  function ReduceScanOp[82297].super[771317](arg _mt[771319]:_MT[238], arg this[771321]:ReduceScanOp[82297]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771331] "RVV" "temp"
    unknown call_tmp[771338] "expr temp" "maybe param" "maybe type" "temp"
    (771341 'move' call_tmp[771338](771325 '.v' this[771321] c"super"))
    (771336 'move' ret[771331](771335 'deref' call_tmp[771338]))
    (771333 return ret[771331])
  }
  function ReduceScanOp[82297].l[771343](arg _mt[771345]:_MT[238], arg this[771347]:ReduceScanOp[82297]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771357] "RVV" "temp"
    unknown call_tmp[771364] "expr temp" "maybe param" "maybe type" "temp"
    (771367 'move' call_tmp[771364](771351 '.' this[771347] c"l"))
    (771362 'move' ret[771357](771361 'addr of' call_tmp[771364]))
    (771359 return ret[771357])
  }
  function ReduceScanOp[82297].init[771369](arg _mt[771371]:_MT[238], arg this[771372]:ReduceScanOp[82297], in arg l[771383]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[771398] "temporary of super field" "temp"
    (771400 'move' super_tmp[771398](771397 '.v' this[771372] c"super"))
    (771382 call(771380 call (partial) init _mt[243] super_tmp[771398]))
    (771424 'end of statement')
    unknown tmp[771403] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[771427] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[771439] "expr temp" "maybe param" "maybe type" "temp"
      (771442 'move' call_tmp[771439](771405 '.v' this[771372] c"super"))
      (771431 'move' call_type_tmp[771427](771408 'typeof' call_tmp[771439]))
    }
    (771409 'move' tmp[771403] call_type_tmp[771427])
    unknown call_tmp[771444] "maybe param" "maybe type" "temp"
    (771447 'move' call_tmp[771444](771414 'cast' tmp[771403] this[771372]))
    unknown chpl__thisAsParent[771411] "dead at end of block" "insert auto destroy" "temp"
    (771435 'init var' chpl__thisAsParent[771411] call_tmp[771444] tmp[771403])
    (771417 'setcid' chpl__thisAsParent[771411])
    (771419 'init field' this[771372] c"l" l[771383])
    (771425 'end of statement')
    (771422 'setcid' this[771372])
    (771433 return _void[55])
  }
  function ReduceScanOp[82297].deinit[771449](arg _mt[771451]:_MT[238], arg this[771453]:ReduceScanOp[82297]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (771461 return _void[55])
  }
  function ReduceScanOp[82297].writeThis[771463](arg _mt[771467]:_MT[238], arg this[771465]:ReduceScanOp[82297], arg f[771466]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771472 call writeThisDefaultImpl f[771466] this[771465])
    (771477 return _void[55])
  }
  function ReduceScanOp[82297].readThis[771479](arg _mt[771483]:_MT[238], arg this[771481]:ReduceScanOp[82297], arg f[771482]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771487 call readThisDefaultImpl f[771482] this[771481])
    (771493 return _void[55])
  }
  type ReduceScanOp[82297] val super[355518]:object[22] "super class" val l[82292]:chpl_LocalSpinlock[187386] chpl_LocalSpinlock[187386]
  function SumReduceScanOp[82409](?).identity[82316](arg _mt[82413]:_MT[238], arg this[82411]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[512137] "RVV" "temp"
    unknown x[82322] "dead at end of block" "insert auto destroy"
    unknown call_tmp[628672] "expr temp" "maybe param" "maybe type" "temp"
    (628675 'move' call_tmp[628672](376261 call eltType _mt[243] this[82411]))
    unknown call_tmp[628677] "expr temp" "maybe param" "maybe type" "temp"
    (628680 'move' call_tmp[628677](82321 call chpl__sumType call_tmp[628672]))
    (541412 'default init var' x[82322] call_tmp[628677])
    (82325 'end of statement')
    (512142 'move' ret[512137](512141 'deref' x[82322]))
    gotoReturn _end_identity[512135] _end_identity[512135]
    (476633 'end of statement' x[82322])
    label _end_identity[512135]
    (512139 return ret[512137])
  }
  function SumReduceScanOp[82409](?).accumulate[82336](arg _mt[82417]:_MT[238], arg this[82415]:SumReduceScanOp[82409](?), arg x[82334]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628684] "expr temp" "maybe param" "maybe type" "temp"
    (628687 'move' call_tmp[628684](376267 call value _mt[243] this[82415]))
    (82340 call += call_tmp[628684] x[82334])
    (512146 return _void[55])
  }
  function SumReduceScanOp[82409](?).accumulateOntoState[82350](arg _mt[82421]:_MT[238], arg this[82419]:SumReduceScanOp[82409](?), ref arg state[82348]:_any[178](?), arg x[82352]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (82356 call += state[82348] x[82352])
    (512148 return _void[55])
  }
  function SumReduceScanOp[82409](?).combine[82366](arg _mt[82425]:_MT[238], arg this[82423]:SumReduceScanOp[82409](?), arg x[82364]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628691] "expr temp" "maybe param" "maybe type" "temp"
    (628694 'move' call_tmp[628691](376275 call value _mt[243] this[82423]))
    unknown call_tmp[628698] "expr temp" "maybe param" "maybe type" "temp"
    (628701 'move' call_tmp[628698](82372 call value _mt[243] x[82364]))
    (82375 call += call_tmp[628691] call_tmp[628698])
    (512150 return _void[55])
  }
  function SumReduceScanOp[82409](?).generate[82383](arg _mt[82429]:_MT[238], arg this[82427]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512154] "RVV" "temp"
    unknown call_tmp[628705] "expr temp" "maybe param" "maybe type" "temp"
    (628708 'move' call_tmp[628705](376280 call value _mt[243] this[82427]))
    (512159 'move' ret[512154](512158 'deref' call_tmp[628705]))
    (512156 return ret[512154])
  }
  function SumReduceScanOp[82409](?).clone[82393](arg _mt[82433]:_MT[238], arg this[82431]:SumReduceScanOp[82409](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[512163] "RVV" "temp"
    unknown call_tmp[628712] "expr temp" "maybe param" "maybe type" "temp"
    (628715 'move' call_tmp[628712](376289 call eltType _mt[243] this[82431]))
    unknown call_tmp[628717] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628720 'move' call_tmp[628717](747705 'new' SumReduceScanOp[376284](?)(eltType = call_tmp[628712])(_chpl_manager = unmanaged[220](?))))
    (512168 'move' ret[512163](512167 'deref' call_tmp[628717]))
    (512165 return ret[512163])
  }
  function SumReduceScanOp[82409](?).super[771495](arg _mt[771497]:_MT[238], arg this[771499]:SumReduceScanOp[82409](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771509] "RVV" "temp"
    unknown call_tmp[771516] "expr temp" "maybe param" "maybe type" "temp"
    (771519 'move' call_tmp[771516](771503 '.v' this[771499] c"super"))
    (771514 'move' ret[771509](771513 'deref' call_tmp[771516]))
    (771511 return ret[771509])
  }
  function SumReduceScanOp[771526](?).eltType[771521](arg _mt[771523]:_MT[238], arg this[771528]:SumReduceScanOp[771526](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771563] "RVV" "temp" "type variable"
    unknown borrowOfThis[771530]
    (771555 'end of statement')
    (771532 'move' borrowOfThis[771530](771535 call _cast _borrowedNonNilable[214](?) this[771528]))
    (771556 'end of statement' borrowOfThis[771530])
    unknown call_tmp[771577] "expr temp" "maybe param" "maybe type" "temp"
    (771580 'move' call_tmp[771577](771545 'is bound' borrowOfThis[771530] c"eltType"))
    if call_tmp[771577]
    {
      unknown call_tmp[771582] "expr temp" "maybe param" "maybe type" "temp"
      (771585 'move' call_tmp[771582](771540 '.v' borrowOfThis[771530] c"eltType"))
      unknown call_tmp[771587] "expr temp" "maybe param" "maybe type" "temp"
      (771590 'move' call_tmp[771587](771541 call chpl_checkLegalTypeFieldAccessor this[771528] call_tmp[771582] "eltType"))
      (771568 'move' ret[771563](771567 'deref' call_tmp[771587]))
      gotoReturn _end_eltType[771561] _end_eltType[771561]
      (771558 'end of statement' borrowOfThis[771530])
    }
    {
      (771573 'move' ret[771563](771572 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771561] _end_eltType[771561]
    }
    label _end_eltType[771561]
    (771565 return ret[771563])
  }
  function SumReduceScanOp[771526](?).eltType[771592](arg _mt[771594]:_MT[238], arg this[771596]:SumReduceScanOp[771526](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771631] "RVV" "temp" "type variable"
    unknown borrowOfThis[771598] "type variable"
    (771623 'end of statement')
    (771600 'move' borrowOfThis[771598](771603 call _cast _borrowedNonNilable[214](?) this[771596]))
    (771624 'end of statement' borrowOfThis[771598])
    unknown call_tmp[771645] "expr temp" "maybe param" "maybe type" "temp"
    (771648 'move' call_tmp[771645](771613 'is bound' borrowOfThis[771598] c"eltType"))
    if call_tmp[771645]
    {
      unknown call_tmp[771650] "expr temp" "maybe param" "maybe type" "temp"
      (771653 'move' call_tmp[771650](771608 '.v' borrowOfThis[771598] c"eltType"))
      unknown call_tmp[771655] "expr temp" "maybe param" "maybe type" "temp"
      (771658 'move' call_tmp[771655](771609 call chpl_checkLegalTypeFieldAccessor this[771596] call_tmp[771650] "eltType"))
      (771636 'move' ret[771631](771635 'deref' call_tmp[771655]))
      gotoReturn _end_eltType[771629] _end_eltType[771629]
      (771626 'end of statement' borrowOfThis[771598])
    }
    {
      (771641 'move' ret[771631](771640 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771629] _end_eltType[771629]
    }
    label _end_eltType[771629]
    (771633 return ret[771631])
  }
  function SumReduceScanOp[82409](?).value[771660](arg _mt[771662]:_MT[238], arg this[771664]:SumReduceScanOp[82409](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771674] "RVV" "temp"
    unknown call_tmp[771681] "expr temp" "maybe param" "maybe type" "temp"
    (771684 'move' call_tmp[771681](771668 '.' this[771664] c"value"))
    (771679 'move' ret[771674](771678 'addr of' call_tmp[771681]))
    (771676 return ret[771674])
  }
  function SumReduceScanOp[82409](?).init[771686](arg _mt[771688]:_MT[238], arg this[771689]:SumReduceScanOp[82409](?), in arg l[771702]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[771705]:_any[178](?), in arg value[771714] :
  (771717 call chpl__sumType eltType[771705]) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[771731] "temporary of super field" "temp"
    (771733 'move' super_tmp[771731](771730 '.v' this[771689] c"super"))
    (771699 call(771697 call (partial) init _mt[243] super_tmp[771731]) l[771702])
    (771760 'end of statement')
    unknown tmp[771736] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[771764] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[771776] "expr temp" "maybe param" "maybe type" "temp"
      (771779 'move' call_tmp[771776](771738 '.v' this[771689] c"super"))
      (771768 'move' call_type_tmp[771764](771741 'typeof' call_tmp[771776]))
    }
    (771742 'move' tmp[771736] call_type_tmp[771764])
    unknown call_tmp[771781] "maybe param" "maybe type" "temp"
    (771784 'move' call_tmp[771781](771747 'cast' tmp[771736] this[771689]))
    unknown chpl__thisAsParent[771744] "dead at end of block" "insert auto destroy" "temp"
    (771772 'init var' chpl__thisAsParent[771744] call_tmp[771781] tmp[771736])
    (771750 'setcid' chpl__thisAsParent[771744])
    (771752 'init field' this[771689] c"eltType" eltType[771705])
    (771761 'end of statement')
    (771755 'init field' this[771689] c"value" value[771714])
    (771762 'end of statement')
    (771758 'setcid' this[771689])
    (771770 return _void[55])
  }
  function SumReduceScanOp[82409](?).deinit[771786](arg _mt[771788]:_MT[238], arg this[771790]:SumReduceScanOp[82409](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (771798 return _void[55])
  }
  function SumReduceScanOp[82409](?).writeThis[771800](arg _mt[771804]:_MT[238], arg this[771802]:SumReduceScanOp[82409](?), arg f[771803]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771809 call writeThisDefaultImpl f[771803] this[771802])
    (771814 return _void[55])
  }
  function SumReduceScanOp[82409](?).readThis[771816](arg _mt[771820]:_MT[238], arg this[771818]:SumReduceScanOp[82409](?), arg f[771819]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (771824 call readThisDefaultImpl f[771819] this[771818])
    (771830 return _void[55])
  }
  type SumReduceScanOp[82409](?) val super[355520]:ReduceScanOp[82297] "super class" unknown eltType[82303] "type variable" unknown value[82310](82309 call chpl__sumType eltType[82303])
  type SumReduceScanOp[771526](?)
  type SumReduceScanOp[376284](?)
  function ProductReduceScanOp[82538](?).identity[82452](arg _mt[82542]:_MT[238], arg this[82540]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512172] "RVV" "temp"
    unknown call_tmp[628724] "expr temp" "maybe param" "maybe type" "temp"
    (628727 'move' call_tmp[628724](376295 call eltType _mt[243] this[82540]))
    unknown call_tmp[628729] "expr temp" "maybe param" "maybe type" "temp"
    (628732 'move' call_tmp[628729](82457 call _prod_id call_tmp[628724]))
    (512177 'move' ret[512172](512176 'deref' call_tmp[628729]))
    (512174 return ret[512172])
  }
  function ProductReduceScanOp[82538](?).accumulate[82467](arg _mt[82546]:_MT[238], arg this[82544]:ProductReduceScanOp[82538](?), arg x[82465]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628736] "expr temp" "maybe param" "maybe type" "temp"
    (628739 'move' call_tmp[628736](376300 call value _mt[243] this[82544]))
    (82471 call *= call_tmp[628736] x[82465])
    (512179 return _void[55])
  }
  function ProductReduceScanOp[82538](?).accumulateOntoState[82481](arg _mt[82550]:_MT[238], arg this[82548]:ProductReduceScanOp[82538](?), ref arg state[82479]:_any[178](?), arg x[82483]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (82487 call *= state[82479] x[82483])
    (512181 return _void[55])
  }
  function ProductReduceScanOp[82538](?).combine[82497](arg _mt[82554]:_MT[238], arg this[82552]:ProductReduceScanOp[82538](?), arg x[82495]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628743] "expr temp" "maybe param" "maybe type" "temp"
    (628746 'move' call_tmp[628743](376308 call value _mt[243] this[82552]))
    unknown call_tmp[628750] "expr temp" "maybe param" "maybe type" "temp"
    (628753 'move' call_tmp[628750](82501 call value _mt[243] x[82495]))
    (82504 call *= call_tmp[628743] call_tmp[628750])
    (512183 return _void[55])
  }
  function ProductReduceScanOp[82538](?).generate[82512](arg _mt[82558]:_MT[238], arg this[82556]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512187] "RVV" "temp"
    unknown call_tmp[628757] "expr temp" "maybe param" "maybe type" "temp"
    (628760 'move' call_tmp[628757](376313 call value _mt[243] this[82556]))
    (512192 'move' ret[512187](512191 'deref' call_tmp[628757]))
    (512189 return ret[512187])
  }
  function ProductReduceScanOp[82538](?).clone[82522](arg _mt[82562]:_MT[238], arg this[82560]:ProductReduceScanOp[82538](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512196] "RVV" "temp"
    unknown call_tmp[628764] "expr temp" "maybe param" "maybe type" "temp"
    (628767 'move' call_tmp[628764](376322 call eltType _mt[243] this[82560]))
    unknown call_tmp[628769] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628772 'move' call_tmp[628769](747706 'new' ProductReduceScanOp[376317](?)(eltType = call_tmp[628764])(_chpl_manager = unmanaged[220](?))))
    (512201 'move' ret[512196](512200 'deref' call_tmp[628769]))
    (512198 return ret[512196])
  }
  function ProductReduceScanOp[82538](?).super[771832](arg _mt[771834]:_MT[238], arg this[771836]:ProductReduceScanOp[82538](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771846] "RVV" "temp"
    unknown call_tmp[771853] "expr temp" "maybe param" "maybe type" "temp"
    (771856 'move' call_tmp[771853](771840 '.v' this[771836] c"super"))
    (771851 'move' ret[771846](771850 'deref' call_tmp[771853]))
    (771848 return ret[771846])
  }
  function ProductReduceScanOp[771863](?).eltType[771858](arg _mt[771860]:_MT[238], arg this[771865]:ProductReduceScanOp[771863](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771900] "RVV" "temp" "type variable"
    unknown borrowOfThis[771867]
    (771892 'end of statement')
    (771869 'move' borrowOfThis[771867](771872 call _cast _borrowedNonNilable[214](?) this[771865]))
    (771893 'end of statement' borrowOfThis[771867])
    unknown call_tmp[771914] "expr temp" "maybe param" "maybe type" "temp"
    (771917 'move' call_tmp[771914](771882 'is bound' borrowOfThis[771867] c"eltType"))
    if call_tmp[771914]
    {
      unknown call_tmp[771919] "expr temp" "maybe param" "maybe type" "temp"
      (771922 'move' call_tmp[771919](771877 '.v' borrowOfThis[771867] c"eltType"))
      unknown call_tmp[771924] "expr temp" "maybe param" "maybe type" "temp"
      (771927 'move' call_tmp[771924](771878 call chpl_checkLegalTypeFieldAccessor this[771865] call_tmp[771919] "eltType"))
      (771905 'move' ret[771900](771904 'deref' call_tmp[771924]))
      gotoReturn _end_eltType[771898] _end_eltType[771898]
      (771895 'end of statement' borrowOfThis[771867])
    }
    {
      (771910 'move' ret[771900](771909 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771898] _end_eltType[771898]
    }
    label _end_eltType[771898]
    (771902 return ret[771900])
  }
  function ProductReduceScanOp[771863](?).eltType[771929](arg _mt[771931]:_MT[238], arg this[771933]:ProductReduceScanOp[771863](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[771968] "RVV" "temp" "type variable"
    unknown borrowOfThis[771935] "type variable"
    (771960 'end of statement')
    (771937 'move' borrowOfThis[771935](771940 call _cast _borrowedNonNilable[214](?) this[771933]))
    (771961 'end of statement' borrowOfThis[771935])
    unknown call_tmp[771982] "expr temp" "maybe param" "maybe type" "temp"
    (771985 'move' call_tmp[771982](771950 'is bound' borrowOfThis[771935] c"eltType"))
    if call_tmp[771982]
    {
      unknown call_tmp[771987] "expr temp" "maybe param" "maybe type" "temp"
      (771990 'move' call_tmp[771987](771945 '.v' borrowOfThis[771935] c"eltType"))
      unknown call_tmp[771992] "expr temp" "maybe param" "maybe type" "temp"
      (771995 'move' call_tmp[771992](771946 call chpl_checkLegalTypeFieldAccessor this[771933] call_tmp[771987] "eltType"))
      (771973 'move' ret[771968](771972 'deref' call_tmp[771992]))
      gotoReturn _end_eltType[771966] _end_eltType[771966]
      (771963 'end of statement' borrowOfThis[771935])
    }
    {
      (771978 'move' ret[771968](771977 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[771966] _end_eltType[771966]
    }
    label _end_eltType[771966]
    (771970 return ret[771968])
  }
  function ProductReduceScanOp[82538](?).value[771997](arg _mt[771999]:_MT[238], arg this[772001]:ProductReduceScanOp[82538](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772011] "RVV" "temp"
    unknown call_tmp[772018] "expr temp" "maybe param" "maybe type" "temp"
    (772021 'move' call_tmp[772018](772005 '.' this[772001] c"value"))
    (772016 'move' ret[772011](772015 'addr of' call_tmp[772018]))
    (772013 return ret[772011])
  }
  function ProductReduceScanOp[82538](?).init[772023](arg _mt[772025]:_MT[238], arg this[772026]:ProductReduceScanOp[82538](?), in arg l[772039]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[772042]:_any[178](?), in arg value[772051] :
  (772058 call _prod_id eltType[772042]) =
  (772053 call _prod_id eltType[772042])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772070] "temporary of super field" "temp"
    (772072 'move' super_tmp[772070](772069 '.v' this[772026] c"super"))
    (772036 call(772034 call (partial) init _mt[243] super_tmp[772070]) l[772039])
    (772099 'end of statement')
    unknown tmp[772075] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772103] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772115] "expr temp" "maybe param" "maybe type" "temp"
      (772118 'move' call_tmp[772115](772077 '.v' this[772026] c"super"))
      (772107 'move' call_type_tmp[772103](772080 'typeof' call_tmp[772115]))
    }
    (772081 'move' tmp[772075] call_type_tmp[772103])
    unknown call_tmp[772120] "maybe param" "maybe type" "temp"
    (772123 'move' call_tmp[772120](772086 'cast' tmp[772075] this[772026]))
    unknown chpl__thisAsParent[772083] "dead at end of block" "insert auto destroy" "temp"
    (772111 'init var' chpl__thisAsParent[772083] call_tmp[772120] tmp[772075])
    (772089 'setcid' chpl__thisAsParent[772083])
    (772091 'init field' this[772026] c"eltType" eltType[772042])
    (772100 'end of statement')
    (772094 '.=' this[772026] c"value" value[772051])
    (772101 'end of statement')
    (772097 'setcid' this[772026])
    (772109 return _void[55])
  }
  function ProductReduceScanOp[82538](?).deinit[772125](arg _mt[772127]:_MT[238], arg this[772129]:ProductReduceScanOp[82538](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772137 return _void[55])
  }
  function ProductReduceScanOp[82538](?).writeThis[772139](arg _mt[772143]:_MT[238], arg this[772141]:ProductReduceScanOp[82538](?), arg f[772142]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772148 call writeThisDefaultImpl f[772142] this[772141])
    (772153 return _void[55])
  }
  function ProductReduceScanOp[82538](?).readThis[772155](arg _mt[772159]:_MT[238], arg this[772157]:ProductReduceScanOp[82538](?), arg f[772158]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772163 call readThisDefaultImpl f[772158] this[772157])
    (772169 return _void[55])
  }
  type ProductReduceScanOp[82538](?) val super[355522]:ReduceScanOp[82297] "super class" unknown eltType[82439] "type variable" unknown value[82446](82445 call _prod_id eltType[82439])
  type ProductReduceScanOp[771863](?)
  type ProductReduceScanOp[376317](?)
  function MaxReduceScanOp[82679](?).identity[82581](arg _mt[82683]:_MT[238], arg this[82681]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512205] "RVV" "temp"
    unknown call_tmp[628776] "expr temp" "maybe param" "maybe type" "temp"
    (628779 'move' call_tmp[628776](376328 call eltType _mt[243] this[82681]))
    unknown call_tmp[628781] "expr temp" "maybe param" "maybe type" "temp"
    (628784 'move' call_tmp[628781](82586 call min call_tmp[628776]))
    (512210 'move' ret[512205](512209 'deref' call_tmp[628781]))
    (512207 return ret[512205])
  }
  function MaxReduceScanOp[82679](?).accumulate[82596](arg _mt[82687]:_MT[238], arg this[82685]:MaxReduceScanOp[82679](?), arg x[82594]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628788] "expr temp" "maybe param" "maybe type" "temp"
    (628791 'move' call_tmp[628788](376333 call value _mt[243] this[82685]))
    unknown call_tmp[628795] "expr temp" "maybe param" "maybe type" "temp"
    (628798 'move' call_tmp[628795](376339 call value _mt[243] this[82685]))
    unknown call_tmp[628800] "expr temp" "maybe param" "maybe type" "temp"
    (628803 'move' call_tmp[628800](82603 call max x[82594] call_tmp[628795]))
    (82604 call = call_tmp[628788] call_tmp[628800])
    (512212 return _void[55])
  }
  function MaxReduceScanOp[82679](?).accumulateOntoState[82614](arg _mt[82691]:_MT[238], arg this[82689]:MaxReduceScanOp[82679](?), ref arg state[82612]:_any[178](?), arg x[82616]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628805] "expr temp" "maybe param" "maybe type" "temp"
    (628808 'move' call_tmp[628805](82623 call max state[82612] x[82616]))
    (82624 call = state[82612] call_tmp[628805])
    (512214 return _void[55])
  }
  function MaxReduceScanOp[82679](?).combine[82634](arg _mt[82695]:_MT[238], arg this[82693]:MaxReduceScanOp[82679](?), arg x[82632]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628812] "expr temp" "maybe param" "maybe type" "temp"
    (628815 'move' call_tmp[628812](376347 call value _mt[243] this[82693]))
    unknown call_tmp[628819] "expr temp" "maybe param" "maybe type" "temp"
    (628822 'move' call_tmp[628819](376352 call value _mt[243] this[82693]))
    unknown call_tmp[628826] "expr temp" "maybe param" "maybe type" "temp"
    (628829 'move' call_tmp[628826](82641 call value _mt[243] x[82632]))
    unknown call_tmp[628831] "expr temp" "maybe param" "maybe type" "temp"
    (628834 'move' call_tmp[628831](82644 call max call_tmp[628819] call_tmp[628826]))
    (82645 call = call_tmp[628812] call_tmp[628831])
    (512216 return _void[55])
  }
  function MaxReduceScanOp[82679](?).generate[82653](arg _mt[82699]:_MT[238], arg this[82697]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512220] "RVV" "temp"
    unknown call_tmp[628838] "expr temp" "maybe param" "maybe type" "temp"
    (628841 'move' call_tmp[628838](376357 call value _mt[243] this[82697]))
    (512225 'move' ret[512220](512224 'deref' call_tmp[628838]))
    (512222 return ret[512220])
  }
  function MaxReduceScanOp[82679](?).clone[82663](arg _mt[82703]:_MT[238], arg this[82701]:MaxReduceScanOp[82679](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512229] "RVV" "temp"
    unknown call_tmp[628845] "expr temp" "maybe param" "maybe type" "temp"
    (628848 'move' call_tmp[628845](376366 call eltType _mt[243] this[82701]))
    unknown call_tmp[628850] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628853 'move' call_tmp[628850](747707 'new' MaxReduceScanOp[376361](?)(eltType = call_tmp[628845])(_chpl_manager = unmanaged[220](?))))
    (512234 'move' ret[512229](512233 'deref' call_tmp[628850]))
    (512231 return ret[512229])
  }
  function MaxReduceScanOp[82679](?).super[772171](arg _mt[772173]:_MT[238], arg this[772175]:MaxReduceScanOp[82679](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772185] "RVV" "temp"
    unknown call_tmp[772192] "expr temp" "maybe param" "maybe type" "temp"
    (772195 'move' call_tmp[772192](772179 '.v' this[772175] c"super"))
    (772190 'move' ret[772185](772189 'deref' call_tmp[772192]))
    (772187 return ret[772185])
  }
  function MaxReduceScanOp[772202](?).eltType[772197](arg _mt[772199]:_MT[238], arg this[772204]:MaxReduceScanOp[772202](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772239] "RVV" "temp" "type variable"
    unknown borrowOfThis[772206]
    (772231 'end of statement')
    (772208 'move' borrowOfThis[772206](772211 call _cast _borrowedNonNilable[214](?) this[772204]))
    (772232 'end of statement' borrowOfThis[772206])
    unknown call_tmp[772253] "expr temp" "maybe param" "maybe type" "temp"
    (772256 'move' call_tmp[772253](772221 'is bound' borrowOfThis[772206] c"eltType"))
    if call_tmp[772253]
    {
      unknown call_tmp[772258] "expr temp" "maybe param" "maybe type" "temp"
      (772261 'move' call_tmp[772258](772216 '.v' borrowOfThis[772206] c"eltType"))
      unknown call_tmp[772263] "expr temp" "maybe param" "maybe type" "temp"
      (772266 'move' call_tmp[772263](772217 call chpl_checkLegalTypeFieldAccessor this[772204] call_tmp[772258] "eltType"))
      (772244 'move' ret[772239](772243 'deref' call_tmp[772263]))
      gotoReturn _end_eltType[772237] _end_eltType[772237]
      (772234 'end of statement' borrowOfThis[772206])
    }
    {
      (772249 'move' ret[772239](772248 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772237] _end_eltType[772237]
    }
    label _end_eltType[772237]
    (772241 return ret[772239])
  }
  function MaxReduceScanOp[772202](?).eltType[772268](arg _mt[772270]:_MT[238], arg this[772272]:MaxReduceScanOp[772202](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772307] "RVV" "temp" "type variable"
    unknown borrowOfThis[772274] "type variable"
    (772299 'end of statement')
    (772276 'move' borrowOfThis[772274](772279 call _cast _borrowedNonNilable[214](?) this[772272]))
    (772300 'end of statement' borrowOfThis[772274])
    unknown call_tmp[772321] "expr temp" "maybe param" "maybe type" "temp"
    (772324 'move' call_tmp[772321](772289 'is bound' borrowOfThis[772274] c"eltType"))
    if call_tmp[772321]
    {
      unknown call_tmp[772326] "expr temp" "maybe param" "maybe type" "temp"
      (772329 'move' call_tmp[772326](772284 '.v' borrowOfThis[772274] c"eltType"))
      unknown call_tmp[772331] "expr temp" "maybe param" "maybe type" "temp"
      (772334 'move' call_tmp[772331](772285 call chpl_checkLegalTypeFieldAccessor this[772272] call_tmp[772326] "eltType"))
      (772312 'move' ret[772307](772311 'deref' call_tmp[772331]))
      gotoReturn _end_eltType[772305] _end_eltType[772305]
      (772302 'end of statement' borrowOfThis[772274])
    }
    {
      (772317 'move' ret[772307](772316 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772305] _end_eltType[772305]
    }
    label _end_eltType[772305]
    (772309 return ret[772307])
  }
  function MaxReduceScanOp[82679](?).value[772336](arg _mt[772338]:_MT[238], arg this[772340]:MaxReduceScanOp[82679](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772350] "RVV" "temp"
    unknown call_tmp[772357] "expr temp" "maybe param" "maybe type" "temp"
    (772360 'move' call_tmp[772357](772344 '.' this[772340] c"value"))
    (772355 'move' ret[772350](772354 'addr of' call_tmp[772357]))
    (772352 return ret[772350])
  }
  function MaxReduceScanOp[82679](?).init[772362](arg _mt[772364]:_MT[238], arg this[772365]:MaxReduceScanOp[82679](?), in arg l[772378]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[772381]:_any[178](?), in arg value[772390] :
  (772397 call min eltType[772381]) =
  (772392 call min eltType[772381])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772409] "temporary of super field" "temp"
    (772411 'move' super_tmp[772409](772408 '.v' this[772365] c"super"))
    (772375 call(772373 call (partial) init _mt[243] super_tmp[772409]) l[772378])
    (772438 'end of statement')
    unknown tmp[772414] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772442] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772454] "expr temp" "maybe param" "maybe type" "temp"
      (772457 'move' call_tmp[772454](772416 '.v' this[772365] c"super"))
      (772446 'move' call_type_tmp[772442](772419 'typeof' call_tmp[772454]))
    }
    (772420 'move' tmp[772414] call_type_tmp[772442])
    unknown call_tmp[772459] "maybe param" "maybe type" "temp"
    (772462 'move' call_tmp[772459](772425 'cast' tmp[772414] this[772365]))
    unknown chpl__thisAsParent[772422] "dead at end of block" "insert auto destroy" "temp"
    (772450 'init var' chpl__thisAsParent[772422] call_tmp[772459] tmp[772414])
    (772428 'setcid' chpl__thisAsParent[772422])
    (772430 'init field' this[772365] c"eltType" eltType[772381])
    (772439 'end of statement')
    (772433 '.=' this[772365] c"value" value[772390])
    (772440 'end of statement')
    (772436 'setcid' this[772365])
    (772448 return _void[55])
  }
  function MaxReduceScanOp[82679](?).deinit[772464](arg _mt[772466]:_MT[238], arg this[772468]:MaxReduceScanOp[82679](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772476 return _void[55])
  }
  function MaxReduceScanOp[82679](?).writeThis[772478](arg _mt[772482]:_MT[238], arg this[772480]:MaxReduceScanOp[82679](?), arg f[772481]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772487 call writeThisDefaultImpl f[772481] this[772480])
    (772492 return _void[55])
  }
  function MaxReduceScanOp[82679](?).readThis[772494](arg _mt[772498]:_MT[238], arg this[772496]:MaxReduceScanOp[82679](?), arg f[772497]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772502 call readThisDefaultImpl f[772497] this[772496])
    (772508 return _void[55])
  }
  type MaxReduceScanOp[82679](?) val super[355524]:ReduceScanOp[82297] "super class" unknown eltType[82568] "type variable" unknown value[82575](82574 call min eltType[82568])
  type MaxReduceScanOp[772202](?)
  type MaxReduceScanOp[376361](?)
  function MinReduceScanOp[82820](?).identity[82722](arg _mt[82824]:_MT[238], arg this[82822]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512238] "RVV" "temp"
    unknown call_tmp[628857] "expr temp" "maybe param" "maybe type" "temp"
    (628860 'move' call_tmp[628857](376372 call eltType _mt[243] this[82822]))
    unknown call_tmp[628862] "expr temp" "maybe param" "maybe type" "temp"
    (628865 'move' call_tmp[628862](82727 call max call_tmp[628857]))
    (512243 'move' ret[512238](512242 'deref' call_tmp[628862]))
    (512240 return ret[512238])
  }
  function MinReduceScanOp[82820](?).accumulate[82737](arg _mt[82828]:_MT[238], arg this[82826]:MinReduceScanOp[82820](?), arg x[82735]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628869] "expr temp" "maybe param" "maybe type" "temp"
    (628872 'move' call_tmp[628869](376377 call value _mt[243] this[82826]))
    unknown call_tmp[628876] "expr temp" "maybe param" "maybe type" "temp"
    (628879 'move' call_tmp[628876](376383 call value _mt[243] this[82826]))
    unknown call_tmp[628881] "expr temp" "maybe param" "maybe type" "temp"
    (628884 'move' call_tmp[628881](82744 call min x[82735] call_tmp[628876]))
    (82745 call = call_tmp[628869] call_tmp[628881])
    (512245 return _void[55])
  }
  function MinReduceScanOp[82820](?).accumulateOntoState[82755](arg _mt[82832]:_MT[238], arg this[82830]:MinReduceScanOp[82820](?), ref arg state[82753]:_any[178](?), arg x[82757]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628886] "expr temp" "maybe param" "maybe type" "temp"
    (628889 'move' call_tmp[628886](82764 call min state[82753] x[82757]))
    (82765 call = state[82753] call_tmp[628886])
    (512247 return _void[55])
  }
  function MinReduceScanOp[82820](?).combine[82775](arg _mt[82836]:_MT[238], arg this[82834]:MinReduceScanOp[82820](?), arg x[82773]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628893] "expr temp" "maybe param" "maybe type" "temp"
    (628896 'move' call_tmp[628893](376391 call value _mt[243] this[82834]))
    unknown call_tmp[628900] "expr temp" "maybe param" "maybe type" "temp"
    (628903 'move' call_tmp[628900](376396 call value _mt[243] this[82834]))
    unknown call_tmp[628907] "expr temp" "maybe param" "maybe type" "temp"
    (628910 'move' call_tmp[628907](82782 call value _mt[243] x[82773]))
    unknown call_tmp[628912] "expr temp" "maybe param" "maybe type" "temp"
    (628915 'move' call_tmp[628912](82785 call min call_tmp[628900] call_tmp[628907]))
    (82786 call = call_tmp[628893] call_tmp[628912])
    (512249 return _void[55])
  }
  function MinReduceScanOp[82820](?).generate[82794](arg _mt[82840]:_MT[238], arg this[82838]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512253] "RVV" "temp"
    unknown call_tmp[628919] "expr temp" "maybe param" "maybe type" "temp"
    (628922 'move' call_tmp[628919](376401 call value _mt[243] this[82838]))
    (512258 'move' ret[512253](512257 'deref' call_tmp[628919]))
    (512255 return ret[512253])
  }
  function MinReduceScanOp[82820](?).clone[82804](arg _mt[82844]:_MT[238], arg this[82842]:MinReduceScanOp[82820](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512262] "RVV" "temp"
    unknown call_tmp[628926] "expr temp" "maybe param" "maybe type" "temp"
    (628929 'move' call_tmp[628926](376410 call eltType _mt[243] this[82842]))
    unknown call_tmp[628931] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (628934 'move' call_tmp[628931](747708 'new' MinReduceScanOp[376405](?)(eltType = call_tmp[628926])(_chpl_manager = unmanaged[220](?))))
    (512267 'move' ret[512262](512266 'deref' call_tmp[628931]))
    (512264 return ret[512262])
  }
  function MinReduceScanOp[82820](?).super[772510](arg _mt[772512]:_MT[238], arg this[772514]:MinReduceScanOp[82820](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772524] "RVV" "temp"
    unknown call_tmp[772531] "expr temp" "maybe param" "maybe type" "temp"
    (772534 'move' call_tmp[772531](772518 '.v' this[772514] c"super"))
    (772529 'move' ret[772524](772528 'deref' call_tmp[772531]))
    (772526 return ret[772524])
  }
  function MinReduceScanOp[772541](?).eltType[772536](arg _mt[772538]:_MT[238], arg this[772543]:MinReduceScanOp[772541](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772578] "RVV" "temp" "type variable"
    unknown borrowOfThis[772545]
    (772570 'end of statement')
    (772547 'move' borrowOfThis[772545](772550 call _cast _borrowedNonNilable[214](?) this[772543]))
    (772571 'end of statement' borrowOfThis[772545])
    unknown call_tmp[772592] "expr temp" "maybe param" "maybe type" "temp"
    (772595 'move' call_tmp[772592](772560 'is bound' borrowOfThis[772545] c"eltType"))
    if call_tmp[772592]
    {
      unknown call_tmp[772597] "expr temp" "maybe param" "maybe type" "temp"
      (772600 'move' call_tmp[772597](772555 '.v' borrowOfThis[772545] c"eltType"))
      unknown call_tmp[772602] "expr temp" "maybe param" "maybe type" "temp"
      (772605 'move' call_tmp[772602](772556 call chpl_checkLegalTypeFieldAccessor this[772543] call_tmp[772597] "eltType"))
      (772583 'move' ret[772578](772582 'deref' call_tmp[772602]))
      gotoReturn _end_eltType[772576] _end_eltType[772576]
      (772573 'end of statement' borrowOfThis[772545])
    }
    {
      (772588 'move' ret[772578](772587 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772576] _end_eltType[772576]
    }
    label _end_eltType[772576]
    (772580 return ret[772578])
  }
  function MinReduceScanOp[772541](?).eltType[772607](arg _mt[772609]:_MT[238], arg this[772611]:MinReduceScanOp[772541](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772646] "RVV" "temp" "type variable"
    unknown borrowOfThis[772613] "type variable"
    (772638 'end of statement')
    (772615 'move' borrowOfThis[772613](772618 call _cast _borrowedNonNilable[214](?) this[772611]))
    (772639 'end of statement' borrowOfThis[772613])
    unknown call_tmp[772660] "expr temp" "maybe param" "maybe type" "temp"
    (772663 'move' call_tmp[772660](772628 'is bound' borrowOfThis[772613] c"eltType"))
    if call_tmp[772660]
    {
      unknown call_tmp[772665] "expr temp" "maybe param" "maybe type" "temp"
      (772668 'move' call_tmp[772665](772623 '.v' borrowOfThis[772613] c"eltType"))
      unknown call_tmp[772670] "expr temp" "maybe param" "maybe type" "temp"
      (772673 'move' call_tmp[772670](772624 call chpl_checkLegalTypeFieldAccessor this[772611] call_tmp[772665] "eltType"))
      (772651 'move' ret[772646](772650 'deref' call_tmp[772670]))
      gotoReturn _end_eltType[772644] _end_eltType[772644]
      (772641 'end of statement' borrowOfThis[772613])
    }
    {
      (772656 'move' ret[772646](772655 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772644] _end_eltType[772644]
    }
    label _end_eltType[772644]
    (772648 return ret[772646])
  }
  function MinReduceScanOp[82820](?).value[772675](arg _mt[772677]:_MT[238], arg this[772679]:MinReduceScanOp[82820](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772689] "RVV" "temp"
    unknown call_tmp[772696] "expr temp" "maybe param" "maybe type" "temp"
    (772699 'move' call_tmp[772696](772683 '.' this[772679] c"value"))
    (772694 'move' ret[772689](772693 'addr of' call_tmp[772696]))
    (772691 return ret[772689])
  }
  function MinReduceScanOp[82820](?).init[772701](arg _mt[772703]:_MT[238], arg this[772704]:MinReduceScanOp[82820](?), in arg l[772717]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[772720]:_any[178](?), in arg value[772729] :
  (772736 call max eltType[772720]) =
  (772731 call max eltType[772720])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[772748] "temporary of super field" "temp"
    (772750 'move' super_tmp[772748](772747 '.v' this[772704] c"super"))
    (772714 call(772712 call (partial) init _mt[243] super_tmp[772748]) l[772717])
    (772777 'end of statement')
    unknown tmp[772753] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[772781] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[772793] "expr temp" "maybe param" "maybe type" "temp"
      (772796 'move' call_tmp[772793](772755 '.v' this[772704] c"super"))
      (772785 'move' call_type_tmp[772781](772758 'typeof' call_tmp[772793]))
    }
    (772759 'move' tmp[772753] call_type_tmp[772781])
    unknown call_tmp[772798] "maybe param" "maybe type" "temp"
    (772801 'move' call_tmp[772798](772764 'cast' tmp[772753] this[772704]))
    unknown chpl__thisAsParent[772761] "dead at end of block" "insert auto destroy" "temp"
    (772789 'init var' chpl__thisAsParent[772761] call_tmp[772798] tmp[772753])
    (772767 'setcid' chpl__thisAsParent[772761])
    (772769 'init field' this[772704] c"eltType" eltType[772720])
    (772778 'end of statement')
    (772772 '.=' this[772704] c"value" value[772729])
    (772779 'end of statement')
    (772775 'setcid' this[772704])
    (772787 return _void[55])
  }
  function MinReduceScanOp[82820](?).deinit[772803](arg _mt[772805]:_MT[238], arg this[772807]:MinReduceScanOp[82820](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (772815 return _void[55])
  }
  function MinReduceScanOp[82820](?).writeThis[772817](arg _mt[772821]:_MT[238], arg this[772819]:MinReduceScanOp[82820](?), arg f[772820]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772826 call writeThisDefaultImpl f[772820] this[772819])
    (772831 return _void[55])
  }
  function MinReduceScanOp[82820](?).readThis[772833](arg _mt[772837]:_MT[238], arg this[772835]:MinReduceScanOp[82820](?), arg f[772836]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (772841 call readThisDefaultImpl f[772836] this[772835])
    (772847 return _void[55])
  }
  type MinReduceScanOp[82820](?) val super[355526]:ReduceScanOp[82297] "super class" unknown eltType[82709] "type variable" unknown value[82716](82715 call max eltType[82709])
  type MinReduceScanOp[772541](?)
  type MinReduceScanOp[376405](?)
  function minmax[83071](?).identity[82870](arg _mt[83075]:_MT[238], arg this[83073]:minmax[83071](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512271] "RVV" "temp"
    unknown call_tmp[628938] "expr temp" "maybe param" "maybe type" "temp"
    (628941 'move' call_tmp[628938](376417 call eltType _mt[243] this[83073]))
    unknown call_tmp[628943] "expr temp" "maybe param" "maybe type" "temp"
    (628946 'move' call_tmp[628943](82875 call max call_tmp[628938]))
    unknown call_tmp[628950] "expr temp" "maybe param" "maybe type" "temp"
    (628953 'move' call_tmp[628950](376422 call eltType _mt[243] this[83073]))
    unknown call_tmp[628955] "expr temp" "maybe param" "maybe type" "temp"
    (628958 'move' call_tmp[628955](82879 call min call_tmp[628950]))
    unknown call_tmp[628960] "expr temp" "maybe param" "maybe type" "temp"
    (628963 'move' call_tmp[628960](82881 call _build_tuple call_tmp[628943] call_tmp[628955]))
    (512276 'move' ret[512271](512275 'deref' call_tmp[628960]))
    (512273 return ret[512271])
  }
  function minmax[83071](?).accumulateOntoState[82892](arg _mt[83079]:_MT[238], arg this[83077]:minmax[83071](?), ref arg state[82890]:_any[178](?), arg x[82895] :
  (376427 call eltType _mt[243] this[83077])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[628967] "expr temp" "maybe param" "maybe type" "temp"
    (628970 'move' call_tmp[628967](82901 call state[82890] 0))
    unknown call_tmp[628972] "expr temp" "maybe param" "maybe type" "temp"
    (628975 'move' call_tmp[628972](82906 call state[82890] 0))
    unknown call_tmp[628977] "expr temp" "maybe param" "maybe type" "temp"
    (628980 'move' call_tmp[628977](82909 call min call_tmp[628972] x[82895]))
    (82910 call = call_tmp[628967] call_tmp[628977])
    (476659 'end of statement')
    unknown call_tmp[628982] "expr temp" "maybe param" "maybe type" "temp"
    (628985 'move' call_tmp[628982](82917 call state[82890] 1))
    unknown call_tmp[628987] "expr temp" "maybe param" "maybe type" "temp"
    (628990 'move' call_tmp[628987](82922 call state[82890] 1))
    unknown call_tmp[628992] "expr temp" "maybe param" "maybe type" "temp"
    (628995 'move' call_tmp[628992](82925 call max call_tmp[628987] x[82895]))
    (82926 call = call_tmp[628982] call_tmp[628992])
    (512278 return _void[55])
  }
  function minmax[83071](?).accumulateOntoState[82935](arg _mt[83083]:_MT[238], arg this[83081]:minmax[83071](?), ref arg state[82933]:_any[178](?), arg other[82941] :
  unknown call_tmp[628999] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629004] "expr temp" "maybe param" "maybe type" "temp"
    (629007 'move' call_tmp[629004](82947 call state[82933] 0))
    unknown call_tmp[629009] "expr temp" "maybe param" "maybe type" "temp"
    (629012 'move' call_tmp[629009](82952 call state[82933] 0))
    unknown call_tmp[629014] "expr temp" "maybe param" "maybe type" "temp"
    (629017 'move' call_tmp[629014](82957 call other[82941] 0))
    unknown call_tmp[629019] "expr temp" "maybe param" "maybe type" "temp"
    (629022 'move' call_tmp[629019](82958 call min call_tmp[629009] call_tmp[629014]))
    (82959 call = call_tmp[629004] call_tmp[629019])
    (476661 'end of statement')
    unknown call_tmp[629024] "expr temp" "maybe param" "maybe type" "temp"
    (629027 'move' call_tmp[629024](82966 call state[82933] 1))
    unknown call_tmp[629029] "expr temp" "maybe param" "maybe type" "temp"
    (629032 'move' call_tmp[629029](82971 call state[82933] 1))
    unknown call_tmp[629034] "expr temp" "maybe param" "maybe type" "temp"
    (629037 'move' call_tmp[629034](82976 call other[82941] 1))
    unknown call_tmp[629039] "expr temp" "maybe param" "maybe type" "temp"
    (629042 'move' call_tmp[629039](82977 call max call_tmp[629029] call_tmp[629034]))
    (82978 call = call_tmp[629024] call_tmp[629039])
    (512280 return _void[55])
  }
  function minmax[83071](?).accumulate[82989](arg _mt[83087]:_MT[238], arg this[83085]:minmax[83071](?), arg x[82986] :
  (376449 call eltType _mt[243] this[83085])) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629050] "expr temp" "maybe param" "maybe type" "temp"
    (629053 'move' call_tmp[629050](376458 call value _mt[243] this[83085]))
    (82995 call(376453 call (partial) accumulateOntoState _mt[243] this[83085]) call_tmp[629050] x[82986])
    (512282 return _void[55])
  }
  function minmax[83071](?).accumulate[83009](arg _mt[83091]:_MT[238], arg this[83089]:minmax[83071](?), arg state[83006] :
  unknown call_tmp[629057] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629066] "expr temp" "maybe param" "maybe type" "temp"
    (629069 'move' call_tmp[629066](376473 call value _mt[243] this[83089]))
    (83015 call(376468 call (partial) accumulateOntoState _mt[243] this[83089]) call_tmp[629066] state[83006])
    (512284 return _void[55])
  }
  function minmax[83071](?).combine[83029](arg _mt[83095]:_MT[238], arg this[83093]:minmax[83071](?), arg other[83026] :
  unknown call_tmp[629073] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629082] "expr temp" "maybe param" "maybe type" "temp"
    (629085 'move' call_tmp[629082](376492 call value _mt[243] this[83093]))
    unknown call_tmp[629089] "expr temp" "maybe param" "maybe type" "temp"
    (629092 'move' call_tmp[629089](83035 call value _mt[243] other[83026]))
    (83038 call(376487 call (partial) accumulateOntoState _mt[243] this[83093]) call_tmp[629082] call_tmp[629089])
    (512286 return _void[55])
  }
  function minmax[83071](?).generate[83045](arg _mt[83099]:_MT[238], arg this[83097]:minmax[83071](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512290] "RVV" "temp"
    unknown call_tmp[629096] "expr temp" "maybe param" "maybe type" "temp"
    (629099 'move' call_tmp[629096](376497 call value _mt[243] this[83097]))
    (512295 'move' ret[512290](512294 'deref' call_tmp[629096]))
    (512292 return ret[512290])
  }
  function minmax[83071](?).clone[83055](arg _mt[83103]:_MT[238], arg this[83101]:minmax[83071](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512299] "RVV" "temp"
    unknown call_tmp[629103] "expr temp" "maybe param" "maybe type" "temp"
    (629106 'move' call_tmp[629103](376503 call eltType _mt[243] this[83101]))
    unknown call_tmp[629108] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629111 'move' call_tmp[629108](747709 'new' minmax[376478](?)(eltType = call_tmp[629103])(_chpl_manager = unmanaged[220](?))))
    (512304 'move' ret[512299](512303 'deref' call_tmp[629108]))
    (512301 return ret[512299])
  }
  function minmax[83071](?).super[772849](arg _mt[772851]:_MT[238], arg this[772853]:minmax[83071](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772863] "RVV" "temp"
    unknown call_tmp[772870] "expr temp" "maybe param" "maybe type" "temp"
    (772873 'move' call_tmp[772870](772857 '.v' this[772853] c"super"))
    (772868 'move' ret[772863](772867 'deref' call_tmp[772870]))
    (772865 return ret[772863])
  }
  function minmax[772880](?).eltType[772875](arg _mt[772877]:_MT[238], arg this[772882]:minmax[772880](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772917] "RVV" "temp" "type variable"
    unknown borrowOfThis[772884]
    (772909 'end of statement')
    (772886 'move' borrowOfThis[772884](772889 call _cast _borrowedNonNilable[214](?) this[772882]))
    (772910 'end of statement' borrowOfThis[772884])
    unknown call_tmp[772931] "expr temp" "maybe param" "maybe type" "temp"
    (772934 'move' call_tmp[772931](772899 'is bound' borrowOfThis[772884] c"eltType"))
    if call_tmp[772931]
    {
      unknown call_tmp[772936] "expr temp" "maybe param" "maybe type" "temp"
      (772939 'move' call_tmp[772936](772894 '.v' borrowOfThis[772884] c"eltType"))
      unknown call_tmp[772941] "expr temp" "maybe param" "maybe type" "temp"
      (772944 'move' call_tmp[772941](772895 call chpl_checkLegalTypeFieldAccessor this[772882] call_tmp[772936] "eltType"))
      (772922 'move' ret[772917](772921 'deref' call_tmp[772941]))
      gotoReturn _end_eltType[772915] _end_eltType[772915]
      (772912 'end of statement' borrowOfThis[772884])
    }
    {
      (772927 'move' ret[772917](772926 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772915] _end_eltType[772915]
    }
    label _end_eltType[772915]
    (772919 return ret[772917])
  }
  function minmax[772880](?).eltType[772946](arg _mt[772948]:_MT[238], arg this[772950]:minmax[772880](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[772985] "RVV" "temp" "type variable"
    unknown borrowOfThis[772952] "type variable"
    (772977 'end of statement')
    (772954 'move' borrowOfThis[772952](772957 call _cast _borrowedNonNilable[214](?) this[772950]))
    (772978 'end of statement' borrowOfThis[772952])
    unknown call_tmp[772999] "expr temp" "maybe param" "maybe type" "temp"
    (773002 'move' call_tmp[772999](772967 'is bound' borrowOfThis[772952] c"eltType"))
    if call_tmp[772999]
    {
      unknown call_tmp[773004] "expr temp" "maybe param" "maybe type" "temp"
      (773007 'move' call_tmp[773004](772962 '.v' borrowOfThis[772952] c"eltType"))
      unknown call_tmp[773009] "expr temp" "maybe param" "maybe type" "temp"
      (773012 'move' call_tmp[773009](772963 call chpl_checkLegalTypeFieldAccessor this[772950] call_tmp[773004] "eltType"))
      (772990 'move' ret[772985](772989 'deref' call_tmp[773009]))
      gotoReturn _end_eltType[772983] _end_eltType[772983]
      (772980 'end of statement' borrowOfThis[772952])
    }
    {
      (772995 'move' ret[772985](772994 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[772983] _end_eltType[772983]
    }
    label _end_eltType[772983]
    (772987 return ret[772985])
  }
  function minmax[83071](?).value[773014](arg _mt[773016]:_MT[238], arg this[773018]:minmax[83071](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773028] "RVV" "temp"
    unknown call_tmp[773035] "expr temp" "maybe param" "maybe type" "temp"
    (773038 'move' call_tmp[773035](773022 '.' this[773018] c"value"))
    (773033 'move' ret[773028](773032 'addr of' call_tmp[773035]))
    (773030 return ret[773028])
  }
  function minmax[83071](?).init[773040](arg _mt[773042]:_MT[238], arg this[773043]:minmax[83071](?), in arg l[773056]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[773059]:_any[178](?), in arg value[773068] :
  unknown call_tmp[773140] "expr temp" "maybe param" "maybe type" "temp" =
  unknown call_tmp[773150] "expr temp" "maybe param" "maybe type" "temp") : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773097] "temporary of super field" "temp"
    (773099 'move' super_tmp[773097](773096 '.v' this[773043] c"super"))
    (773053 call(773051 call (partial) init _mt[243] super_tmp[773097]) l[773056])
    (773126 'end of statement')
    unknown tmp[773102] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773130] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773162] "expr temp" "maybe param" "maybe type" "temp"
      (773165 'move' call_tmp[773162](773104 '.v' this[773043] c"super"))
      (773134 'move' call_type_tmp[773130](773107 'typeof' call_tmp[773162]))
    }
    (773108 'move' tmp[773102] call_type_tmp[773130])
    unknown call_tmp[773167] "maybe param" "maybe type" "temp"
    (773170 'move' call_tmp[773167](773113 'cast' tmp[773102] this[773043]))
    unknown chpl__thisAsParent[773110] "dead at end of block" "insert auto destroy" "temp"
    (773138 'init var' chpl__thisAsParent[773110] call_tmp[773167] tmp[773102])
    (773116 'setcid' chpl__thisAsParent[773110])
    (773118 'init field' this[773043] c"eltType" eltType[773059])
    (773127 'end of statement')
    (773121 '.=' this[773043] c"value" value[773068])
    (773128 'end of statement')
    (773124 'setcid' this[773043])
    (773136 return _void[55])
  }
  function minmax[83071](?).deinit[773172](arg _mt[773174]:_MT[238], arg this[773176]:minmax[83071](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773184 return _void[55])
  }
  function minmax[83071](?).writeThis[773186](arg _mt[773190]:_MT[238], arg this[773188]:minmax[83071](?), arg f[773189]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773195 call writeThisDefaultImpl f[773189] this[773188])
    (773200 return _void[55])
  }
  function minmax[83071](?).readThis[773202](arg _mt[773206]:_MT[238], arg this[773204]:minmax[83071](?), arg f[773205]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773210 call readThisDefaultImpl f[773205] this[773204])
    (773216 return _void[55])
  }
  type minmax[83071](?) val super[355528]:ReduceScanOp[82297] "super class" unknown eltType[82850] "type variable" unknown value[82864](82862 call _build_tuple(82856 call max eltType[82850])(82860 call min eltType[82850]))
  type minmax[772880](?)
  type minmax[376478](?)
  function LogicalAndReduceScanOp[83235](?).identity[83122](arg _mt[83239]:_MT[238], arg this[83237]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512308] "RVV" "temp"
    unknown call_tmp[629115] "expr temp" "maybe param" "maybe type" "temp"
    (629118 'move' call_tmp[629115](376509 call eltType _mt[243] this[83237]))
    unknown call_tmp[629120] "expr temp" "maybe param" "maybe type" "temp"
    (629123 'move' call_tmp[629120](83127 call _land_id call_tmp[629115]))
    (512313 'move' ret[512308](512312 'deref' call_tmp[629120]))
    (512310 return ret[512308])
  }
  function LogicalAndReduceScanOp[83235](?).accumulate[83137](arg _mt[83243]:_MT[238], arg this[83241]:LogicalAndReduceScanOp[83235](?), arg x[83135]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83142] "temp"
      unknown call_tmp[629127] "expr temp" "maybe param" "maybe type" "temp"
      (629130 'move' call_tmp[629127](376514 call value _mt[243] this[83241]))
      (83145 'move' tmp[83142](83144 'addr of' call_tmp[629127]))
      unknown tmp[421603] "maybe param" "temp"
      (421614 'move' tmp[421603] tmp[83142])
      unknown call_tmp[629132] "expr temp" "maybe param" "maybe type" "temp"
      (629135 'move' call_tmp[629132](421616 call _cond_invalid tmp[421603]))
      if call_tmp[629132]
      {
        (421619 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560016] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560017] "maybe param" "temp"
      unknown call_tmp[629137] "expr temp" "maybe param" "maybe type" "temp"
      (629140 'move' call_tmp[629137](421604 call isTrue tmp[421603]))
      (560022 'move' tmp[560017](560020 call _cond_test call_tmp[629137]))
      if tmp[560017]
      {
        unknown tmp[560024] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560026 'move' tmp[560024](421607 call isTrue x[83135]))
        (560031 'move' tmp[560016](560028 '_paramFoldLogical' tmp[560017] tmp[560024]))
      }
      {
        (560036 'move' tmp[560016](560033 '_paramFoldLogical' tmp[560017] 0))
      }
      (83150 call = tmp[83142] tmp[560016])
    }
    (512315 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).accumulateOntoState[83160](arg _mt[83247]:_MT[238], arg this[83245]:LogicalAndReduceScanOp[83235](?), ref arg state[83158]:_any[178](?), arg x[83162]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83167] "temp"
      (83170 'move' tmp[83167](83169 'addr of' state[83158]))
      unknown tmp[421624] "maybe param" "temp"
      (421635 'move' tmp[421624] tmp[83167])
      unknown call_tmp[629142] "expr temp" "maybe param" "maybe type" "temp"
      (629145 'move' call_tmp[629142](421637 call _cond_invalid tmp[421624]))
      if call_tmp[629142]
      {
        (421640 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560043] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560044] "maybe param" "temp"
      unknown call_tmp[629147] "expr temp" "maybe param" "maybe type" "temp"
      (629150 'move' call_tmp[629147](421625 call isTrue tmp[421624]))
      (560049 'move' tmp[560044](560047 call _cond_test call_tmp[629147]))
      if tmp[560044]
      {
        unknown tmp[560051] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560053 'move' tmp[560051](421628 call isTrue x[83162]))
        (560058 'move' tmp[560043](560055 '_paramFoldLogical' tmp[560044] tmp[560051]))
      }
      {
        (560063 'move' tmp[560043](560060 '_paramFoldLogical' tmp[560044] 0))
      }
      (83175 call = tmp[83167] tmp[560043])
    }
    (512317 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).combine[83185](arg _mt[83251]:_MT[238], arg this[83249]:LogicalAndReduceScanOp[83235](?), arg x[83183]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83193] "temp"
      unknown call_tmp[629154] "expr temp" "maybe param" "maybe type" "temp"
      (629157 'move' call_tmp[629154](376522 call value _mt[243] this[83249]))
      (83196 'move' tmp[83193](83195 'addr of' call_tmp[629154]))
      unknown tmp[421645] "maybe param" "temp"
      (421656 'move' tmp[421645] tmp[83193])
      unknown call_tmp[629159] "expr temp" "maybe param" "maybe type" "temp"
      (629162 'move' call_tmp[629159](421658 call _cond_invalid tmp[421645]))
      if call_tmp[629159]
      {
        (421661 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560070] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560071] "maybe param" "temp"
      unknown call_tmp[629164] "expr temp" "maybe param" "maybe type" "temp"
      (629167 'move' call_tmp[629164](421646 call isTrue tmp[421645]))
      (560076 'move' tmp[560071](560074 call _cond_test call_tmp[629164]))
      if tmp[560071]
      {
        unknown tmp[560078] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629171] "expr temp" "maybe param" "maybe type" "temp"
        (629174 'move' call_tmp[629171](83189 call value _mt[243] x[83183]))
        (560080 'move' tmp[560078](421649 call isTrue call_tmp[629171]))
        (560085 'move' tmp[560070](560082 '_paramFoldLogical' tmp[560071] tmp[560078]))
      }
      {
        (560090 'move' tmp[560070](560087 '_paramFoldLogical' tmp[560071] 0))
      }
      (83201 call = tmp[83193] tmp[560070])
    }
    (512319 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).generate[83209](arg _mt[83255]:_MT[238], arg this[83253]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512323] "RVV" "temp"
    unknown call_tmp[629178] "expr temp" "maybe param" "maybe type" "temp"
    (629181 'move' call_tmp[629178](376527 call value _mt[243] this[83253]))
    (512328 'move' ret[512323](512327 'deref' call_tmp[629178]))
    (512325 return ret[512323])
  }
  function LogicalAndReduceScanOp[83235](?).clone[83219](arg _mt[83259]:_MT[238], arg this[83257]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512332] "RVV" "temp"
    unknown call_tmp[629185] "expr temp" "maybe param" "maybe type" "temp"
    (629188 'move' call_tmp[629185](376536 call eltType _mt[243] this[83257]))
    unknown call_tmp[629190] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629193 'move' call_tmp[629190](747710 'new' LogicalAndReduceScanOp[376531](?)(eltType = call_tmp[629185])(_chpl_manager = unmanaged[220](?))))
    (512337 'move' ret[512332](512336 'deref' call_tmp[629190]))
    (512334 return ret[512332])
  }
  function LogicalAndReduceScanOp[83235](?).super[773218](arg _mt[773220]:_MT[238], arg this[773222]:LogicalAndReduceScanOp[83235](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773232] "RVV" "temp"
    unknown call_tmp[773239] "expr temp" "maybe param" "maybe type" "temp"
    (773242 'move' call_tmp[773239](773226 '.v' this[773222] c"super"))
    (773237 'move' ret[773232](773236 'deref' call_tmp[773239]))
    (773234 return ret[773232])
  }
  function LogicalAndReduceScanOp[773249](?).eltType[773244](arg _mt[773246]:_MT[238], arg this[773251]:LogicalAndReduceScanOp[773249](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773286] "RVV" "temp" "type variable"
    unknown borrowOfThis[773253]
    (773278 'end of statement')
    (773255 'move' borrowOfThis[773253](773258 call _cast _borrowedNonNilable[214](?) this[773251]))
    (773279 'end of statement' borrowOfThis[773253])
    unknown call_tmp[773300] "expr temp" "maybe param" "maybe type" "temp"
    (773303 'move' call_tmp[773300](773268 'is bound' borrowOfThis[773253] c"eltType"))
    if call_tmp[773300]
    {
      unknown call_tmp[773305] "expr temp" "maybe param" "maybe type" "temp"
      (773308 'move' call_tmp[773305](773263 '.v' borrowOfThis[773253] c"eltType"))
      unknown call_tmp[773310] "expr temp" "maybe param" "maybe type" "temp"
      (773313 'move' call_tmp[773310](773264 call chpl_checkLegalTypeFieldAccessor this[773251] call_tmp[773305] "eltType"))
      (773291 'move' ret[773286](773290 'deref' call_tmp[773310]))
      gotoReturn _end_eltType[773284] _end_eltType[773284]
      (773281 'end of statement' borrowOfThis[773253])
    }
    {
      (773296 'move' ret[773286](773295 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773284] _end_eltType[773284]
    }
    label _end_eltType[773284]
    (773288 return ret[773286])
  }
  function LogicalAndReduceScanOp[773249](?).eltType[773315](arg _mt[773317]:_MT[238], arg this[773319]:LogicalAndReduceScanOp[773249](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773354] "RVV" "temp" "type variable"
    unknown borrowOfThis[773321] "type variable"
    (773346 'end of statement')
    (773323 'move' borrowOfThis[773321](773326 call _cast _borrowedNonNilable[214](?) this[773319]))
    (773347 'end of statement' borrowOfThis[773321])
    unknown call_tmp[773368] "expr temp" "maybe param" "maybe type" "temp"
    (773371 'move' call_tmp[773368](773336 'is bound' borrowOfThis[773321] c"eltType"))
    if call_tmp[773368]
    {
      unknown call_tmp[773373] "expr temp" "maybe param" "maybe type" "temp"
      (773376 'move' call_tmp[773373](773331 '.v' borrowOfThis[773321] c"eltType"))
      unknown call_tmp[773378] "expr temp" "maybe param" "maybe type" "temp"
      (773381 'move' call_tmp[773378](773332 call chpl_checkLegalTypeFieldAccessor this[773319] call_tmp[773373] "eltType"))
      (773359 'move' ret[773354](773358 'deref' call_tmp[773378]))
      gotoReturn _end_eltType[773352] _end_eltType[773352]
      (773349 'end of statement' borrowOfThis[773321])
    }
    {
      (773364 'move' ret[773354](773363 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773352] _end_eltType[773352]
    }
    label _end_eltType[773352]
    (773356 return ret[773354])
  }
  function LogicalAndReduceScanOp[83235](?).value[773383](arg _mt[773385]:_MT[238], arg this[773387]:LogicalAndReduceScanOp[83235](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773397] "RVV" "temp"
    unknown call_tmp[773404] "expr temp" "maybe param" "maybe type" "temp"
    (773407 'move' call_tmp[773404](773391 '.' this[773387] c"value"))
    (773402 'move' ret[773397](773401 'addr of' call_tmp[773404]))
    (773399 return ret[773397])
  }
  function LogicalAndReduceScanOp[83235](?).init[773409](arg _mt[773411]:_MT[238], arg this[773412]:LogicalAndReduceScanOp[83235](?), in arg l[773425]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[773428]:_any[178](?), in arg value[773437] :
  (773444 call _land_id eltType[773428]) =
  (773439 call _land_id eltType[773428])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773456] "temporary of super field" "temp"
    (773458 'move' super_tmp[773456](773455 '.v' this[773412] c"super"))
    (773422 call(773420 call (partial) init _mt[243] super_tmp[773456]) l[773425])
    (773485 'end of statement')
    unknown tmp[773461] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773489] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773501] "expr temp" "maybe param" "maybe type" "temp"
      (773504 'move' call_tmp[773501](773463 '.v' this[773412] c"super"))
      (773493 'move' call_type_tmp[773489](773466 'typeof' call_tmp[773501]))
    }
    (773467 'move' tmp[773461] call_type_tmp[773489])
    unknown call_tmp[773506] "maybe param" "maybe type" "temp"
    (773509 'move' call_tmp[773506](773472 'cast' tmp[773461] this[773412]))
    unknown chpl__thisAsParent[773469] "dead at end of block" "insert auto destroy" "temp"
    (773497 'init var' chpl__thisAsParent[773469] call_tmp[773506] tmp[773461])
    (773475 'setcid' chpl__thisAsParent[773469])
    (773477 'init field' this[773412] c"eltType" eltType[773428])
    (773486 'end of statement')
    (773480 '.=' this[773412] c"value" value[773437])
    (773487 'end of statement')
    (773483 'setcid' this[773412])
    (773495 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).deinit[773511](arg _mt[773513]:_MT[238], arg this[773515]:LogicalAndReduceScanOp[83235](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773523 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).writeThis[773525](arg _mt[773529]:_MT[238], arg this[773527]:LogicalAndReduceScanOp[83235](?), arg f[773528]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773534 call writeThisDefaultImpl f[773528] this[773527])
    (773539 return _void[55])
  }
  function LogicalAndReduceScanOp[83235](?).readThis[773541](arg _mt[773545]:_MT[238], arg this[773543]:LogicalAndReduceScanOp[83235](?), arg f[773544]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773549 call readThisDefaultImpl f[773544] this[773543])
    (773555 return _void[55])
  }
  type LogicalAndReduceScanOp[83235](?) val super[355530]:ReduceScanOp[82297] "super class" unknown eltType[83109] "type variable" unknown value[83116](83115 call _land_id eltType[83109])
  type LogicalAndReduceScanOp[773249](?)
  type LogicalAndReduceScanOp[376531](?)
  function LogicalOrReduceScanOp[83391](?).identity[83278](arg _mt[83395]:_MT[238], arg this[83393]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512341] "RVV" "temp"
    unknown call_tmp[629197] "expr temp" "maybe param" "maybe type" "temp"
    (629200 'move' call_tmp[629197](376542 call eltType _mt[243] this[83393]))
    unknown call_tmp[629202] "expr temp" "maybe param" "maybe type" "temp"
    (629205 'move' call_tmp[629202](83283 call _lor_id call_tmp[629197]))
    (512346 'move' ret[512341](512345 'deref' call_tmp[629202]))
    (512343 return ret[512341])
  }
  function LogicalOrReduceScanOp[83391](?).accumulate[83293](arg _mt[83399]:_MT[238], arg this[83397]:LogicalOrReduceScanOp[83391](?), arg x[83291]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83298] "temp"
      unknown call_tmp[629209] "expr temp" "maybe param" "maybe type" "temp"
      (629212 'move' call_tmp[629209](376547 call value _mt[243] this[83397]))
      (83301 'move' tmp[83298](83300 'addr of' call_tmp[629209]))
      unknown tmp[421666] "maybe param" "temp"
      (421677 'move' tmp[421666] tmp[83298])
      unknown call_tmp[629214] "expr temp" "maybe param" "maybe type" "temp"
      (629217 'move' call_tmp[629214](421679 call _cond_invalid tmp[421666]))
      if call_tmp[629214]
      {
        (421682 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560097] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560098] "maybe param" "temp"
      unknown call_tmp[629219] "expr temp" "maybe param" "maybe type" "temp"
      (629222 'move' call_tmp[629219](421667 call isTrue tmp[421666]))
      (560103 'move' tmp[560098](560101 call _cond_test call_tmp[629219]))
      if tmp[560098]
      {
        (560108 'move' tmp[560097](560105 '_paramFoldLogical' tmp[560098] 1))
      }
      {
        unknown tmp[560110] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560112 'move' tmp[560110](421671 call isTrue x[83291]))
        (560117 'move' tmp[560097](560114 '_paramFoldLogical' tmp[560098] tmp[560110]))
      }
      (83306 call = tmp[83298] tmp[560097])
    }
    (512348 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).accumulateOntoState[83316](arg _mt[83403]:_MT[238], arg this[83401]:LogicalOrReduceScanOp[83391](?), ref arg state[83314]:_any[178](?), arg x[83318]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83323] "temp"
      (83326 'move' tmp[83323](83325 'addr of' state[83314]))
      unknown tmp[421687] "maybe param" "temp"
      (421698 'move' tmp[421687] tmp[83323])
      unknown call_tmp[629224] "expr temp" "maybe param" "maybe type" "temp"
      (629227 'move' call_tmp[629224](421700 call _cond_invalid tmp[421687]))
      if call_tmp[629224]
      {
        (421703 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560124] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560125] "maybe param" "temp"
      unknown call_tmp[629229] "expr temp" "maybe param" "maybe type" "temp"
      (629232 'move' call_tmp[629229](421688 call isTrue tmp[421687]))
      (560130 'move' tmp[560125](560128 call _cond_test call_tmp[629229]))
      if tmp[560125]
      {
        (560135 'move' tmp[560124](560132 '_paramFoldLogical' tmp[560125] 1))
      }
      {
        unknown tmp[560137] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560139 'move' tmp[560137](421692 call isTrue x[83318]))
        (560144 'move' tmp[560124](560141 '_paramFoldLogical' tmp[560125] tmp[560137]))
      }
      (83331 call = tmp[83323] tmp[560124])
    }
    (512350 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).combine[83341](arg _mt[83407]:_MT[238], arg this[83405]:LogicalOrReduceScanOp[83391](?), arg x[83339]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[83349] "temp"
      unknown call_tmp[629236] "expr temp" "maybe param" "maybe type" "temp"
      (629239 'move' call_tmp[629236](376555 call value _mt[243] this[83405]))
      (83352 'move' tmp[83349](83351 'addr of' call_tmp[629236]))
      unknown tmp[421708] "maybe param" "temp"
      (421719 'move' tmp[421708] tmp[83349])
      unknown call_tmp[629241] "expr temp" "maybe param" "maybe type" "temp"
      (629244 'move' call_tmp[629241](421721 call _cond_invalid tmp[421708]))
      if call_tmp[629241]
      {
        (421724 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560151] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560152] "maybe param" "temp"
      unknown call_tmp[629246] "expr temp" "maybe param" "maybe type" "temp"
      (629249 'move' call_tmp[629246](421709 call isTrue tmp[421708]))
      (560157 'move' tmp[560152](560155 call _cond_test call_tmp[629246]))
      if tmp[560152]
      {
        (560162 'move' tmp[560151](560159 '_paramFoldLogical' tmp[560152] 1))
      }
      {
        unknown tmp[560164] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629253] "expr temp" "maybe param" "maybe type" "temp"
        (629256 'move' call_tmp[629253](83345 call value _mt[243] x[83339]))
        (560166 'move' tmp[560164](421713 call isTrue call_tmp[629253]))
        (560171 'move' tmp[560151](560168 '_paramFoldLogical' tmp[560152] tmp[560164]))
      }
      (83357 call = tmp[83349] tmp[560151])
    }
    (512352 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).generate[83365](arg _mt[83411]:_MT[238], arg this[83409]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512356] "RVV" "temp"
    unknown call_tmp[629260] "expr temp" "maybe param" "maybe type" "temp"
    (629263 'move' call_tmp[629260](376560 call value _mt[243] this[83409]))
    (512361 'move' ret[512356](512360 'deref' call_tmp[629260]))
    (512358 return ret[512356])
  }
  function LogicalOrReduceScanOp[83391](?).clone[83375](arg _mt[83415]:_MT[238], arg this[83413]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512365] "RVV" "temp"
    unknown call_tmp[629267] "expr temp" "maybe param" "maybe type" "temp"
    (629270 'move' call_tmp[629267](376569 call eltType _mt[243] this[83413]))
    unknown call_tmp[629272] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629275 'move' call_tmp[629272](747711 'new' LogicalOrReduceScanOp[376564](?)(eltType = call_tmp[629267])(_chpl_manager = unmanaged[220](?))))
    (512370 'move' ret[512365](512369 'deref' call_tmp[629272]))
    (512367 return ret[512365])
  }
  function LogicalOrReduceScanOp[83391](?).super[773557](arg _mt[773559]:_MT[238], arg this[773561]:LogicalOrReduceScanOp[83391](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773571] "RVV" "temp"
    unknown call_tmp[773578] "expr temp" "maybe param" "maybe type" "temp"
    (773581 'move' call_tmp[773578](773565 '.v' this[773561] c"super"))
    (773576 'move' ret[773571](773575 'deref' call_tmp[773578]))
    (773573 return ret[773571])
  }
  function LogicalOrReduceScanOp[773588](?).eltType[773583](arg _mt[773585]:_MT[238], arg this[773590]:LogicalOrReduceScanOp[773588](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773625] "RVV" "temp" "type variable"
    unknown borrowOfThis[773592]
    (773617 'end of statement')
    (773594 'move' borrowOfThis[773592](773597 call _cast _borrowedNonNilable[214](?) this[773590]))
    (773618 'end of statement' borrowOfThis[773592])
    unknown call_tmp[773639] "expr temp" "maybe param" "maybe type" "temp"
    (773642 'move' call_tmp[773639](773607 'is bound' borrowOfThis[773592] c"eltType"))
    if call_tmp[773639]
    {
      unknown call_tmp[773644] "expr temp" "maybe param" "maybe type" "temp"
      (773647 'move' call_tmp[773644](773602 '.v' borrowOfThis[773592] c"eltType"))
      unknown call_tmp[773649] "expr temp" "maybe param" "maybe type" "temp"
      (773652 'move' call_tmp[773649](773603 call chpl_checkLegalTypeFieldAccessor this[773590] call_tmp[773644] "eltType"))
      (773630 'move' ret[773625](773629 'deref' call_tmp[773649]))
      gotoReturn _end_eltType[773623] _end_eltType[773623]
      (773620 'end of statement' borrowOfThis[773592])
    }
    {
      (773635 'move' ret[773625](773634 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773623] _end_eltType[773623]
    }
    label _end_eltType[773623]
    (773627 return ret[773625])
  }
  function LogicalOrReduceScanOp[773588](?).eltType[773654](arg _mt[773656]:_MT[238], arg this[773658]:LogicalOrReduceScanOp[773588](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773693] "RVV" "temp" "type variable"
    unknown borrowOfThis[773660] "type variable"
    (773685 'end of statement')
    (773662 'move' borrowOfThis[773660](773665 call _cast _borrowedNonNilable[214](?) this[773658]))
    (773686 'end of statement' borrowOfThis[773660])
    unknown call_tmp[773707] "expr temp" "maybe param" "maybe type" "temp"
    (773710 'move' call_tmp[773707](773675 'is bound' borrowOfThis[773660] c"eltType"))
    if call_tmp[773707]
    {
      unknown call_tmp[773712] "expr temp" "maybe param" "maybe type" "temp"
      (773715 'move' call_tmp[773712](773670 '.v' borrowOfThis[773660] c"eltType"))
      unknown call_tmp[773717] "expr temp" "maybe param" "maybe type" "temp"
      (773720 'move' call_tmp[773717](773671 call chpl_checkLegalTypeFieldAccessor this[773658] call_tmp[773712] "eltType"))
      (773698 'move' ret[773693](773697 'deref' call_tmp[773717]))
      gotoReturn _end_eltType[773691] _end_eltType[773691]
      (773688 'end of statement' borrowOfThis[773660])
    }
    {
      (773703 'move' ret[773693](773702 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773691] _end_eltType[773691]
    }
    label _end_eltType[773691]
    (773695 return ret[773693])
  }
  function LogicalOrReduceScanOp[83391](?).value[773722](arg _mt[773724]:_MT[238], arg this[773726]:LogicalOrReduceScanOp[83391](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773736] "RVV" "temp"
    unknown call_tmp[773743] "expr temp" "maybe param" "maybe type" "temp"
    (773746 'move' call_tmp[773743](773730 '.' this[773726] c"value"))
    (773741 'move' ret[773736](773740 'addr of' call_tmp[773743]))
    (773738 return ret[773736])
  }
  function LogicalOrReduceScanOp[83391](?).init[773748](arg _mt[773750]:_MT[238], arg this[773751]:LogicalOrReduceScanOp[83391](?), in arg l[773764]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[773767]:_any[178](?), in arg value[773776] :
  (773783 call _lor_id eltType[773767]) =
  (773778 call _lor_id eltType[773767])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[773795] "temporary of super field" "temp"
    (773797 'move' super_tmp[773795](773794 '.v' this[773751] c"super"))
    (773761 call(773759 call (partial) init _mt[243] super_tmp[773795]) l[773764])
    (773824 'end of statement')
    unknown tmp[773800] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[773828] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[773840] "expr temp" "maybe param" "maybe type" "temp"
      (773843 'move' call_tmp[773840](773802 '.v' this[773751] c"super"))
      (773832 'move' call_type_tmp[773828](773805 'typeof' call_tmp[773840]))
    }
    (773806 'move' tmp[773800] call_type_tmp[773828])
    unknown call_tmp[773845] "maybe param" "maybe type" "temp"
    (773848 'move' call_tmp[773845](773811 'cast' tmp[773800] this[773751]))
    unknown chpl__thisAsParent[773808] "dead at end of block" "insert auto destroy" "temp"
    (773836 'init var' chpl__thisAsParent[773808] call_tmp[773845] tmp[773800])
    (773814 'setcid' chpl__thisAsParent[773808])
    (773816 'init field' this[773751] c"eltType" eltType[773767])
    (773825 'end of statement')
    (773819 '.=' this[773751] c"value" value[773776])
    (773826 'end of statement')
    (773822 'setcid' this[773751])
    (773834 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).deinit[773850](arg _mt[773852]:_MT[238], arg this[773854]:LogicalOrReduceScanOp[83391](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (773862 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).writeThis[773864](arg _mt[773868]:_MT[238], arg this[773866]:LogicalOrReduceScanOp[83391](?), arg f[773867]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773873 call writeThisDefaultImpl f[773867] this[773866])
    (773878 return _void[55])
  }
  function LogicalOrReduceScanOp[83391](?).readThis[773880](arg _mt[773884]:_MT[238], arg this[773882]:LogicalOrReduceScanOp[83391](?), arg f[773883]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (773888 call readThisDefaultImpl f[773883] this[773882])
    (773894 return _void[55])
  }
  type LogicalOrReduceScanOp[83391](?) val super[355532]:ReduceScanOp[82297] "super class" unknown eltType[83265] "type variable" unknown value[83272](83271 call _lor_id eltType[83265])
  type LogicalOrReduceScanOp[773588](?)
  type LogicalOrReduceScanOp[376564](?)
  function BitwiseAndReduceScanOp[83520](?).identity[83434](arg _mt[83524]:_MT[238], arg this[83522]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512374] "RVV" "temp"
    unknown call_tmp[629279] "expr temp" "maybe param" "maybe type" "temp"
    (629282 'move' call_tmp[629279](376575 call eltType _mt[243] this[83522]))
    unknown call_tmp[629284] "expr temp" "maybe param" "maybe type" "temp"
    (629287 'move' call_tmp[629284](83439 call _band_id call_tmp[629279]))
    (512379 'move' ret[512374](512378 'deref' call_tmp[629284]))
    (512376 return ret[512374])
  }
  function BitwiseAndReduceScanOp[83520](?).accumulate[83449](arg _mt[83528]:_MT[238], arg this[83526]:BitwiseAndReduceScanOp[83520](?), arg x[83447]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629291] "expr temp" "maybe param" "maybe type" "temp"
    (629294 'move' call_tmp[629291](376580 call value _mt[243] this[83526]))
    (83453 call &= call_tmp[629291] x[83447])
    (512381 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).accumulateOntoState[83463](arg _mt[83532]:_MT[238], arg this[83530]:BitwiseAndReduceScanOp[83520](?), ref arg state[83461]:_any[178](?), arg x[83465]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83469 call &= state[83461] x[83465])
    (512383 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).combine[83479](arg _mt[83536]:_MT[238], arg this[83534]:BitwiseAndReduceScanOp[83520](?), arg x[83477]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629298] "expr temp" "maybe param" "maybe type" "temp"
    (629301 'move' call_tmp[629298](376588 call value _mt[243] this[83534]))
    unknown call_tmp[629305] "expr temp" "maybe param" "maybe type" "temp"
    (629308 'move' call_tmp[629305](83483 call value _mt[243] x[83477]))
    (83486 call &= call_tmp[629298] call_tmp[629305])
    (512385 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).generate[83494](arg _mt[83540]:_MT[238], arg this[83538]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512389] "RVV" "temp"
    unknown call_tmp[629312] "expr temp" "maybe param" "maybe type" "temp"
    (629315 'move' call_tmp[629312](376593 call value _mt[243] this[83538]))
    (512394 'move' ret[512389](512393 'deref' call_tmp[629312]))
    (512391 return ret[512389])
  }
  function BitwiseAndReduceScanOp[83520](?).clone[83504](arg _mt[83544]:_MT[238], arg this[83542]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512398] "RVV" "temp"
    unknown call_tmp[629319] "expr temp" "maybe param" "maybe type" "temp"
    (629322 'move' call_tmp[629319](376602 call eltType _mt[243] this[83542]))
    unknown call_tmp[629324] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629327 'move' call_tmp[629324](747712 'new' BitwiseAndReduceScanOp[376597](?)(eltType = call_tmp[629319])(_chpl_manager = unmanaged[220](?))))
    (512403 'move' ret[512398](512402 'deref' call_tmp[629324]))
    (512400 return ret[512398])
  }
  function BitwiseAndReduceScanOp[83520](?).super[773896](arg _mt[773898]:_MT[238], arg this[773900]:BitwiseAndReduceScanOp[83520](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773910] "RVV" "temp"
    unknown call_tmp[773917] "expr temp" "maybe param" "maybe type" "temp"
    (773920 'move' call_tmp[773917](773904 '.v' this[773900] c"super"))
    (773915 'move' ret[773910](773914 'deref' call_tmp[773917]))
    (773912 return ret[773910])
  }
  function BitwiseAndReduceScanOp[773927](?).eltType[773922](arg _mt[773924]:_MT[238], arg this[773929]:BitwiseAndReduceScanOp[773927](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[773964] "RVV" "temp" "type variable"
    unknown borrowOfThis[773931]
    (773956 'end of statement')
    (773933 'move' borrowOfThis[773931](773936 call _cast _borrowedNonNilable[214](?) this[773929]))
    (773957 'end of statement' borrowOfThis[773931])
    unknown call_tmp[773978] "expr temp" "maybe param" "maybe type" "temp"
    (773981 'move' call_tmp[773978](773946 'is bound' borrowOfThis[773931] c"eltType"))
    if call_tmp[773978]
    {
      unknown call_tmp[773983] "expr temp" "maybe param" "maybe type" "temp"
      (773986 'move' call_tmp[773983](773941 '.v' borrowOfThis[773931] c"eltType"))
      unknown call_tmp[773988] "expr temp" "maybe param" "maybe type" "temp"
      (773991 'move' call_tmp[773988](773942 call chpl_checkLegalTypeFieldAccessor this[773929] call_tmp[773983] "eltType"))
      (773969 'move' ret[773964](773968 'deref' call_tmp[773988]))
      gotoReturn _end_eltType[773962] _end_eltType[773962]
      (773959 'end of statement' borrowOfThis[773931])
    }
    {
      (773974 'move' ret[773964](773973 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[773962] _end_eltType[773962]
    }
    label _end_eltType[773962]
    (773966 return ret[773964])
  }
  function BitwiseAndReduceScanOp[773927](?).eltType[773993](arg _mt[773995]:_MT[238], arg this[773997]:BitwiseAndReduceScanOp[773927](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774032] "RVV" "temp" "type variable"
    unknown borrowOfThis[773999] "type variable"
    (774024 'end of statement')
    (774001 'move' borrowOfThis[773999](774004 call _cast _borrowedNonNilable[214](?) this[773997]))
    (774025 'end of statement' borrowOfThis[773999])
    unknown call_tmp[774046] "expr temp" "maybe param" "maybe type" "temp"
    (774049 'move' call_tmp[774046](774014 'is bound' borrowOfThis[773999] c"eltType"))
    if call_tmp[774046]
    {
      unknown call_tmp[774051] "expr temp" "maybe param" "maybe type" "temp"
      (774054 'move' call_tmp[774051](774009 '.v' borrowOfThis[773999] c"eltType"))
      unknown call_tmp[774056] "expr temp" "maybe param" "maybe type" "temp"
      (774059 'move' call_tmp[774056](774010 call chpl_checkLegalTypeFieldAccessor this[773997] call_tmp[774051] "eltType"))
      (774037 'move' ret[774032](774036 'deref' call_tmp[774056]))
      gotoReturn _end_eltType[774030] _end_eltType[774030]
      (774027 'end of statement' borrowOfThis[773999])
    }
    {
      (774042 'move' ret[774032](774041 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774030] _end_eltType[774030]
    }
    label _end_eltType[774030]
    (774034 return ret[774032])
  }
  function BitwiseAndReduceScanOp[83520](?).value[774061](arg _mt[774063]:_MT[238], arg this[774065]:BitwiseAndReduceScanOp[83520](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774075] "RVV" "temp"
    unknown call_tmp[774082] "expr temp" "maybe param" "maybe type" "temp"
    (774085 'move' call_tmp[774082](774069 '.' this[774065] c"value"))
    (774080 'move' ret[774075](774079 'addr of' call_tmp[774082]))
    (774077 return ret[774075])
  }
  function BitwiseAndReduceScanOp[83520](?).init[774087](arg _mt[774089]:_MT[238], arg this[774090]:BitwiseAndReduceScanOp[83520](?), in arg l[774103]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[774106]:_any[178](?), in arg value[774115] :
  (774122 call _band_id eltType[774106]) =
  (774117 call _band_id eltType[774106])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774134] "temporary of super field" "temp"
    (774136 'move' super_tmp[774134](774133 '.v' this[774090] c"super"))
    (774100 call(774098 call (partial) init _mt[243] super_tmp[774134]) l[774103])
    (774163 'end of statement')
    unknown tmp[774139] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774167] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774179] "expr temp" "maybe param" "maybe type" "temp"
      (774182 'move' call_tmp[774179](774141 '.v' this[774090] c"super"))
      (774171 'move' call_type_tmp[774167](774144 'typeof' call_tmp[774179]))
    }
    (774145 'move' tmp[774139] call_type_tmp[774167])
    unknown call_tmp[774184] "maybe param" "maybe type" "temp"
    (774187 'move' call_tmp[774184](774150 'cast' tmp[774139] this[774090]))
    unknown chpl__thisAsParent[774147] "dead at end of block" "insert auto destroy" "temp"
    (774175 'init var' chpl__thisAsParent[774147] call_tmp[774184] tmp[774139])
    (774153 'setcid' chpl__thisAsParent[774147])
    (774155 'init field' this[774090] c"eltType" eltType[774106])
    (774164 'end of statement')
    (774158 '.=' this[774090] c"value" value[774115])
    (774165 'end of statement')
    (774161 'setcid' this[774090])
    (774173 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).deinit[774189](arg _mt[774191]:_MT[238], arg this[774193]:BitwiseAndReduceScanOp[83520](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774201 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).writeThis[774203](arg _mt[774207]:_MT[238], arg this[774205]:BitwiseAndReduceScanOp[83520](?), arg f[774206]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774212 call writeThisDefaultImpl f[774206] this[774205])
    (774217 return _void[55])
  }
  function BitwiseAndReduceScanOp[83520](?).readThis[774219](arg _mt[774223]:_MT[238], arg this[774221]:BitwiseAndReduceScanOp[83520](?), arg f[774222]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774227 call readThisDefaultImpl f[774222] this[774221])
    (774233 return _void[55])
  }
  type BitwiseAndReduceScanOp[83520](?) val super[355534]:ReduceScanOp[82297] "super class" unknown eltType[83421] "type variable" unknown value[83428](83427 call _band_id eltType[83421])
  type BitwiseAndReduceScanOp[773927](?)
  type BitwiseAndReduceScanOp[376597](?)
  function BitwiseOrReduceScanOp[83649](?).identity[83563](arg _mt[83653]:_MT[238], arg this[83651]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512407] "RVV" "temp"
    unknown call_tmp[629331] "expr temp" "maybe param" "maybe type" "temp"
    (629334 'move' call_tmp[629331](376608 call eltType _mt[243] this[83651]))
    unknown call_tmp[629336] "expr temp" "maybe param" "maybe type" "temp"
    (629339 'move' call_tmp[629336](83568 call _bor_id call_tmp[629331]))
    (512412 'move' ret[512407](512411 'deref' call_tmp[629336]))
    (512409 return ret[512407])
  }
  function BitwiseOrReduceScanOp[83649](?).accumulate[83578](arg _mt[83657]:_MT[238], arg this[83655]:BitwiseOrReduceScanOp[83649](?), arg x[83576]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629343] "expr temp" "maybe param" "maybe type" "temp"
    (629346 'move' call_tmp[629343](376613 call value _mt[243] this[83655]))
    (83582 call |= call_tmp[629343] x[83576])
    (512414 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).accumulateOntoState[83592](arg _mt[83661]:_MT[238], arg this[83659]:BitwiseOrReduceScanOp[83649](?), ref arg state[83590]:_any[178](?), arg x[83594]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83598 call |= state[83590] x[83594])
    (512416 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).combine[83608](arg _mt[83665]:_MT[238], arg this[83663]:BitwiseOrReduceScanOp[83649](?), arg x[83606]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629350] "expr temp" "maybe param" "maybe type" "temp"
    (629353 'move' call_tmp[629350](376621 call value _mt[243] this[83663]))
    unknown call_tmp[629357] "expr temp" "maybe param" "maybe type" "temp"
    (629360 'move' call_tmp[629357](83612 call value _mt[243] x[83606]))
    (83615 call |= call_tmp[629350] call_tmp[629357])
    (512418 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).generate[83623](arg _mt[83669]:_MT[238], arg this[83667]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512422] "RVV" "temp"
    unknown call_tmp[629364] "expr temp" "maybe param" "maybe type" "temp"
    (629367 'move' call_tmp[629364](376626 call value _mt[243] this[83667]))
    (512427 'move' ret[512422](512426 'deref' call_tmp[629364]))
    (512424 return ret[512422])
  }
  function BitwiseOrReduceScanOp[83649](?).clone[83633](arg _mt[83673]:_MT[238], arg this[83671]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512431] "RVV" "temp"
    unknown call_tmp[629371] "expr temp" "maybe param" "maybe type" "temp"
    (629374 'move' call_tmp[629371](376635 call eltType _mt[243] this[83671]))
    unknown call_tmp[629376] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629379 'move' call_tmp[629376](747713 'new' BitwiseOrReduceScanOp[376630](?)(eltType = call_tmp[629371])(_chpl_manager = unmanaged[220](?))))
    (512436 'move' ret[512431](512435 'deref' call_tmp[629376]))
    (512433 return ret[512431])
  }
  function BitwiseOrReduceScanOp[83649](?).super[774235](arg _mt[774237]:_MT[238], arg this[774239]:BitwiseOrReduceScanOp[83649](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774249] "RVV" "temp"
    unknown call_tmp[774256] "expr temp" "maybe param" "maybe type" "temp"
    (774259 'move' call_tmp[774256](774243 '.v' this[774239] c"super"))
    (774254 'move' ret[774249](774253 'deref' call_tmp[774256]))
    (774251 return ret[774249])
  }
  function BitwiseOrReduceScanOp[774266](?).eltType[774261](arg _mt[774263]:_MT[238], arg this[774268]:BitwiseOrReduceScanOp[774266](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774303] "RVV" "temp" "type variable"
    unknown borrowOfThis[774270]
    (774295 'end of statement')
    (774272 'move' borrowOfThis[774270](774275 call _cast _borrowedNonNilable[214](?) this[774268]))
    (774296 'end of statement' borrowOfThis[774270])
    unknown call_tmp[774317] "expr temp" "maybe param" "maybe type" "temp"
    (774320 'move' call_tmp[774317](774285 'is bound' borrowOfThis[774270] c"eltType"))
    if call_tmp[774317]
    {
      unknown call_tmp[774322] "expr temp" "maybe param" "maybe type" "temp"
      (774325 'move' call_tmp[774322](774280 '.v' borrowOfThis[774270] c"eltType"))
      unknown call_tmp[774327] "expr temp" "maybe param" "maybe type" "temp"
      (774330 'move' call_tmp[774327](774281 call chpl_checkLegalTypeFieldAccessor this[774268] call_tmp[774322] "eltType"))
      (774308 'move' ret[774303](774307 'deref' call_tmp[774327]))
      gotoReturn _end_eltType[774301] _end_eltType[774301]
      (774298 'end of statement' borrowOfThis[774270])
    }
    {
      (774313 'move' ret[774303](774312 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774301] _end_eltType[774301]
    }
    label _end_eltType[774301]
    (774305 return ret[774303])
  }
  function BitwiseOrReduceScanOp[774266](?).eltType[774332](arg _mt[774334]:_MT[238], arg this[774336]:BitwiseOrReduceScanOp[774266](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774371] "RVV" "temp" "type variable"
    unknown borrowOfThis[774338] "type variable"
    (774363 'end of statement')
    (774340 'move' borrowOfThis[774338](774343 call _cast _borrowedNonNilable[214](?) this[774336]))
    (774364 'end of statement' borrowOfThis[774338])
    unknown call_tmp[774385] "expr temp" "maybe param" "maybe type" "temp"
    (774388 'move' call_tmp[774385](774353 'is bound' borrowOfThis[774338] c"eltType"))
    if call_tmp[774385]
    {
      unknown call_tmp[774390] "expr temp" "maybe param" "maybe type" "temp"
      (774393 'move' call_tmp[774390](774348 '.v' borrowOfThis[774338] c"eltType"))
      unknown call_tmp[774395] "expr temp" "maybe param" "maybe type" "temp"
      (774398 'move' call_tmp[774395](774349 call chpl_checkLegalTypeFieldAccessor this[774336] call_tmp[774390] "eltType"))
      (774376 'move' ret[774371](774375 'deref' call_tmp[774395]))
      gotoReturn _end_eltType[774369] _end_eltType[774369]
      (774366 'end of statement' borrowOfThis[774338])
    }
    {
      (774381 'move' ret[774371](774380 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774369] _end_eltType[774369]
    }
    label _end_eltType[774369]
    (774373 return ret[774371])
  }
  function BitwiseOrReduceScanOp[83649](?).value[774400](arg _mt[774402]:_MT[238], arg this[774404]:BitwiseOrReduceScanOp[83649](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774414] "RVV" "temp"
    unknown call_tmp[774421] "expr temp" "maybe param" "maybe type" "temp"
    (774424 'move' call_tmp[774421](774408 '.' this[774404] c"value"))
    (774419 'move' ret[774414](774418 'addr of' call_tmp[774421]))
    (774416 return ret[774414])
  }
  function BitwiseOrReduceScanOp[83649](?).init[774426](arg _mt[774428]:_MT[238], arg this[774429]:BitwiseOrReduceScanOp[83649](?), in arg l[774442]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[774445]:_any[178](?), in arg value[774454] :
  (774461 call _bor_id eltType[774445]) =
  (774456 call _bor_id eltType[774445])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774473] "temporary of super field" "temp"
    (774475 'move' super_tmp[774473](774472 '.v' this[774429] c"super"))
    (774439 call(774437 call (partial) init _mt[243] super_tmp[774473]) l[774442])
    (774502 'end of statement')
    unknown tmp[774478] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774506] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774518] "expr temp" "maybe param" "maybe type" "temp"
      (774521 'move' call_tmp[774518](774480 '.v' this[774429] c"super"))
      (774510 'move' call_type_tmp[774506](774483 'typeof' call_tmp[774518]))
    }
    (774484 'move' tmp[774478] call_type_tmp[774506])
    unknown call_tmp[774523] "maybe param" "maybe type" "temp"
    (774526 'move' call_tmp[774523](774489 'cast' tmp[774478] this[774429]))
    unknown chpl__thisAsParent[774486] "dead at end of block" "insert auto destroy" "temp"
    (774514 'init var' chpl__thisAsParent[774486] call_tmp[774523] tmp[774478])
    (774492 'setcid' chpl__thisAsParent[774486])
    (774494 'init field' this[774429] c"eltType" eltType[774445])
    (774503 'end of statement')
    (774497 '.=' this[774429] c"value" value[774454])
    (774504 'end of statement')
    (774500 'setcid' this[774429])
    (774512 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).deinit[774528](arg _mt[774530]:_MT[238], arg this[774532]:BitwiseOrReduceScanOp[83649](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774540 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).writeThis[774542](arg _mt[774546]:_MT[238], arg this[774544]:BitwiseOrReduceScanOp[83649](?), arg f[774545]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774551 call writeThisDefaultImpl f[774545] this[774544])
    (774556 return _void[55])
  }
  function BitwiseOrReduceScanOp[83649](?).readThis[774558](arg _mt[774562]:_MT[238], arg this[774560]:BitwiseOrReduceScanOp[83649](?), arg f[774561]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774566 call readThisDefaultImpl f[774561] this[774560])
    (774572 return _void[55])
  }
  type BitwiseOrReduceScanOp[83649](?) val super[355536]:ReduceScanOp[82297] "super class" unknown eltType[83550] "type variable" unknown value[83557](83556 call _bor_id eltType[83550])
  type BitwiseOrReduceScanOp[774266](?)
  type BitwiseOrReduceScanOp[376630](?)
  function BitwiseXorReduceScanOp[83778](?).identity[83692](arg _mt[83782]:_MT[238], arg this[83780]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512440] "RVV" "temp"
    unknown call_tmp[629383] "expr temp" "maybe param" "maybe type" "temp"
    (629386 'move' call_tmp[629383](376641 call eltType _mt[243] this[83780]))
    unknown call_tmp[629388] "expr temp" "maybe param" "maybe type" "temp"
    (629391 'move' call_tmp[629388](83697 call _bxor_id call_tmp[629383]))
    (512445 'move' ret[512440](512444 'deref' call_tmp[629388]))
    (512442 return ret[512440])
  }
  function BitwiseXorReduceScanOp[83778](?).accumulate[83707](arg _mt[83786]:_MT[238], arg this[83784]:BitwiseXorReduceScanOp[83778](?), arg x[83705]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629395] "expr temp" "maybe param" "maybe type" "temp"
    (629398 'move' call_tmp[629395](376646 call value _mt[243] this[83784]))
    (83711 call ^= call_tmp[629395] x[83705])
    (512447 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).accumulateOntoState[83721](arg _mt[83790]:_MT[238], arg this[83788]:BitwiseXorReduceScanOp[83778](?), ref arg state[83719]:_any[178](?), arg x[83723]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (83727 call ^= state[83719] x[83723])
    (512449 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).combine[83737](arg _mt[83794]:_MT[238], arg this[83792]:BitwiseXorReduceScanOp[83778](?), arg x[83735]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629402] "expr temp" "maybe param" "maybe type" "temp"
    (629405 'move' call_tmp[629402](376654 call value _mt[243] this[83792]))
    unknown call_tmp[629409] "expr temp" "maybe param" "maybe type" "temp"
    (629412 'move' call_tmp[629409](83741 call value _mt[243] x[83735]))
    (83744 call ^= call_tmp[629402] call_tmp[629409])
    (512451 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).generate[83752](arg _mt[83798]:_MT[238], arg this[83796]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512455] "RVV" "temp"
    unknown call_tmp[629416] "expr temp" "maybe param" "maybe type" "temp"
    (629419 'move' call_tmp[629416](376659 call value _mt[243] this[83796]))
    (512460 'move' ret[512455](512459 'deref' call_tmp[629416]))
    (512457 return ret[512455])
  }
  function BitwiseXorReduceScanOp[83778](?).clone[83762](arg _mt[83802]:_MT[238], arg this[83800]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512464] "RVV" "temp"
    unknown call_tmp[629423] "expr temp" "maybe param" "maybe type" "temp"
    (629426 'move' call_tmp[629423](376668 call eltType _mt[243] this[83800]))
    unknown call_tmp[629428] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629431 'move' call_tmp[629428](747714 'new' BitwiseXorReduceScanOp[376663](?)(eltType = call_tmp[629423])(_chpl_manager = unmanaged[220](?))))
    (512469 'move' ret[512464](512468 'deref' call_tmp[629428]))
    (512466 return ret[512464])
  }
  function BitwiseXorReduceScanOp[83778](?).super[774574](arg _mt[774576]:_MT[238], arg this[774578]:BitwiseXorReduceScanOp[83778](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774588] "RVV" "temp"
    unknown call_tmp[774595] "expr temp" "maybe param" "maybe type" "temp"
    (774598 'move' call_tmp[774595](774582 '.v' this[774578] c"super"))
    (774593 'move' ret[774588](774592 'deref' call_tmp[774595]))
    (774590 return ret[774588])
  }
  function BitwiseXorReduceScanOp[774605](?).eltType[774600](arg _mt[774602]:_MT[238], arg this[774607]:BitwiseXorReduceScanOp[774605](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774642] "RVV" "temp" "type variable"
    unknown borrowOfThis[774609]
    (774634 'end of statement')
    (774611 'move' borrowOfThis[774609](774614 call _cast _borrowedNonNilable[214](?) this[774607]))
    (774635 'end of statement' borrowOfThis[774609])
    unknown call_tmp[774656] "expr temp" "maybe param" "maybe type" "temp"
    (774659 'move' call_tmp[774656](774624 'is bound' borrowOfThis[774609] c"eltType"))
    if call_tmp[774656]
    {
      unknown call_tmp[774661] "expr temp" "maybe param" "maybe type" "temp"
      (774664 'move' call_tmp[774661](774619 '.v' borrowOfThis[774609] c"eltType"))
      unknown call_tmp[774666] "expr temp" "maybe param" "maybe type" "temp"
      (774669 'move' call_tmp[774666](774620 call chpl_checkLegalTypeFieldAccessor this[774607] call_tmp[774661] "eltType"))
      (774647 'move' ret[774642](774646 'deref' call_tmp[774666]))
      gotoReturn _end_eltType[774640] _end_eltType[774640]
      (774637 'end of statement' borrowOfThis[774609])
    }
    {
      (774652 'move' ret[774642](774651 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774640] _end_eltType[774640]
    }
    label _end_eltType[774640]
    (774644 return ret[774642])
  }
  function BitwiseXorReduceScanOp[774605](?).eltType[774671](arg _mt[774673]:_MT[238], arg this[774675]:BitwiseXorReduceScanOp[774605](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774710] "RVV" "temp" "type variable"
    unknown borrowOfThis[774677] "type variable"
    (774702 'end of statement')
    (774679 'move' borrowOfThis[774677](774682 call _cast _borrowedNonNilable[214](?) this[774675]))
    (774703 'end of statement' borrowOfThis[774677])
    unknown call_tmp[774724] "expr temp" "maybe param" "maybe type" "temp"
    (774727 'move' call_tmp[774724](774692 'is bound' borrowOfThis[774677] c"eltType"))
    if call_tmp[774724]
    {
      unknown call_tmp[774729] "expr temp" "maybe param" "maybe type" "temp"
      (774732 'move' call_tmp[774729](774687 '.v' borrowOfThis[774677] c"eltType"))
      unknown call_tmp[774734] "expr temp" "maybe param" "maybe type" "temp"
      (774737 'move' call_tmp[774734](774688 call chpl_checkLegalTypeFieldAccessor this[774675] call_tmp[774729] "eltType"))
      (774715 'move' ret[774710](774714 'deref' call_tmp[774734]))
      gotoReturn _end_eltType[774708] _end_eltType[774708]
      (774705 'end of statement' borrowOfThis[774677])
    }
    {
      (774720 'move' ret[774710](774719 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774708] _end_eltType[774708]
    }
    label _end_eltType[774708]
    (774712 return ret[774710])
  }
  function BitwiseXorReduceScanOp[83778](?).value[774739](arg _mt[774741]:_MT[238], arg this[774743]:BitwiseXorReduceScanOp[83778](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774753] "RVV" "temp"
    unknown call_tmp[774760] "expr temp" "maybe param" "maybe type" "temp"
    (774763 'move' call_tmp[774760](774747 '.' this[774743] c"value"))
    (774758 'move' ret[774753](774757 'addr of' call_tmp[774760]))
    (774755 return ret[774753])
  }
  function BitwiseXorReduceScanOp[83778](?).init[774765](arg _mt[774767]:_MT[238], arg this[774768]:BitwiseXorReduceScanOp[83778](?), in arg l[774781]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[774784]:_any[178](?), in arg value[774793] :
  (774800 call _bxor_id eltType[774784]) =
  (774795 call _bxor_id eltType[774784])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[774812] "temporary of super field" "temp"
    (774814 'move' super_tmp[774812](774811 '.v' this[774768] c"super"))
    (774778 call(774776 call (partial) init _mt[243] super_tmp[774812]) l[774781])
    (774841 'end of statement')
    unknown tmp[774817] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[774845] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[774857] "expr temp" "maybe param" "maybe type" "temp"
      (774860 'move' call_tmp[774857](774819 '.v' this[774768] c"super"))
      (774849 'move' call_type_tmp[774845](774822 'typeof' call_tmp[774857]))
    }
    (774823 'move' tmp[774817] call_type_tmp[774845])
    unknown call_tmp[774862] "maybe param" "maybe type" "temp"
    (774865 'move' call_tmp[774862](774828 'cast' tmp[774817] this[774768]))
    unknown chpl__thisAsParent[774825] "dead at end of block" "insert auto destroy" "temp"
    (774853 'init var' chpl__thisAsParent[774825] call_tmp[774862] tmp[774817])
    (774831 'setcid' chpl__thisAsParent[774825])
    (774833 'init field' this[774768] c"eltType" eltType[774784])
    (774842 'end of statement')
    (774836 '.=' this[774768] c"value" value[774793])
    (774843 'end of statement')
    (774839 'setcid' this[774768])
    (774851 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).deinit[774867](arg _mt[774869]:_MT[238], arg this[774871]:BitwiseXorReduceScanOp[83778](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (774879 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).writeThis[774881](arg _mt[774885]:_MT[238], arg this[774883]:BitwiseXorReduceScanOp[83778](?), arg f[774884]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774890 call writeThisDefaultImpl f[774884] this[774883])
    (774895 return _void[55])
  }
  function BitwiseXorReduceScanOp[83778](?).readThis[774897](arg _mt[774901]:_MT[238], arg this[774899]:BitwiseXorReduceScanOp[83778](?), arg f[774900]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (774905 call readThisDefaultImpl f[774900] this[774899])
    (774911 return _void[55])
  }
  type BitwiseXorReduceScanOp[83778](?) val super[355538]:ReduceScanOp[82297] "super class" unknown eltType[83679] "type variable" unknown value[83686](83685 call _bxor_id eltType[83679])
  type BitwiseXorReduceScanOp[774605](?)
  type BitwiseXorReduceScanOp[376663](?)
  function _maxloc_id[83809](arg eltType[83807]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512473] "RVV" "temp"
    unknown call_tmp[629433] "expr temp" "maybe param" "maybe type" "temp"
    (629436 'move' call_tmp[629433](83815 call eltType[83807] 0))
    unknown call_tmp[629438] "expr temp" "maybe param" "maybe type" "temp"
    (629441 'move' call_tmp[629438](83817 call min call_tmp[629433]))
    unknown call_tmp[629443] "expr temp" "maybe param" "maybe type" "temp"
    (629446 'move' call_tmp[629443](83822 call eltType[83807] 1))
    unknown call_tmp[629448] "expr temp" "maybe param" "maybe type" "temp"
    (629451 'move' call_tmp[629448](83824 call max call_tmp[629443]))
    unknown call_tmp[629453] "expr temp" "maybe param" "maybe type" "temp"
    (629456 'move' call_tmp[629453](83826 call _build_tuple call_tmp[629438] call_tmp[629448]))
    (512478 'move' ret[512473](512477 'deref' call_tmp[629453]))
    (512475 return ret[512473])
  }
  function _minloc_id[83837](arg eltType[83835]:_any[178](?)) : _unknown[51]
  {
    unknown ret[512482] "RVV" "temp"
    unknown call_tmp[629458] "expr temp" "maybe param" "maybe type" "temp"
    (629461 'move' call_tmp[629458](83842 call max eltType[83835]))
    (512487 'move' ret[512482](512486 'deref' call_tmp[629458]))
    (512484 return ret[512482])
  }
  function maxloc[84023](?).identity[83864](arg _mt[84027]:_MT[238], arg this[84025]:maxloc[84023](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512491] "RVV" "temp"
    unknown call_tmp[629465] "expr temp" "maybe param" "maybe type" "temp"
    (629468 'move' call_tmp[629465](376677 call eltType _mt[243] this[84025]))
    unknown call_tmp[629470] "expr temp" "maybe param" "maybe type" "temp"
    (629473 'move' call_tmp[629470](83869 call _maxloc_id call_tmp[629465]))
    (512496 'move' ret[512491](512495 'deref' call_tmp[629470]))
    (512493 return ret[512491])
  }
  function maxloc[84023](?).accumulate[83879](arg _mt[84031]:_MT[238], arg this[84029]:maxloc[84023](?), arg x[83877]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629479] "expr temp" "maybe param" "maybe type" "temp"
    (629482 'move' call_tmp[629479](376686 call value _mt[243] this[84029]))
    (83885 call(376681 call (partial) accumulateOntoState _mt[243] this[84029]) call_tmp[629479] x[83877])
    (512498 return _void[55])
  }
  function maxloc[84023](?).accumulateOntoState[83894](arg _mt[84035]:_MT[238], arg this[84033]:maxloc[84023](?), ref arg state[83892]:_any[178](?), arg x[83896]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421729] "maybe param" "temp"
    unknown tmp[421750] "maybe param" "temp"
    unknown call_tmp[629484] "expr temp" "maybe param" "maybe type" "temp"
    (629487 'move' call_tmp[629484](83901 call x[83896] 0))
    unknown call_tmp[629489] "expr temp" "maybe param" "maybe type" "temp"
    (629492 'move' call_tmp[629489](83905 call state[83892] 0))
    (421761 'move' tmp[421750](83906 call > call_tmp[629484] call_tmp[629489]))
    unknown call_tmp[629494] "expr temp" "maybe param" "maybe type" "temp"
    (629497 'move' call_tmp[629494](421763 call _cond_invalid tmp[421750]))
    if call_tmp[629494]
    {
      (421766 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560205] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560206] "maybe param" "temp"
    unknown call_tmp[629499] "expr temp" "maybe param" "maybe type" "temp"
    (629502 'move' call_tmp[629499](421751 call isTrue tmp[421750]))
    (560211 'move' tmp[560206](560209 call _cond_test call_tmp[629499]))
    if tmp[560206]
    {
      (560216 'move' tmp[560205](560213 '_paramFoldLogical' tmp[560206] 1))
    }
    {
      unknown tmp[421771] "maybe param" "temp"
      unknown call_tmp[629504] "expr temp" "maybe param" "maybe type" "temp"
      (629507 'move' call_tmp[629504](83911 call x[83896] 0))
      unknown call_tmp[629509] "expr temp" "maybe param" "maybe type" "temp"
      (629512 'move' call_tmp[629509](83915 call state[83892] 0))
      (421782 'move' tmp[421771](83916 call == call_tmp[629504] call_tmp[629509]))
      unknown call_tmp[629514] "expr temp" "maybe param" "maybe type" "temp"
      (629517 'move' call_tmp[629514](421784 call _cond_invalid tmp[421771]))
      if call_tmp[629514]
      {
        (421787 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560178] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560179] "maybe param" "temp"
      unknown call_tmp[629519] "expr temp" "maybe param" "maybe type" "temp"
      (629522 'move' call_tmp[629519](421772 call isTrue tmp[421771]))
      (560184 'move' tmp[560179](560182 call _cond_test call_tmp[629519]))
      if tmp[560179]
      {
        unknown tmp[560186] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629524] "expr temp" "maybe param" "maybe type" "temp"
        (629527 'move' call_tmp[629524](83921 call x[83896] 1))
        unknown call_tmp[629529] "expr temp" "maybe param" "maybe type" "temp"
        (629532 'move' call_tmp[629529](83925 call state[83892] 1))
        unknown call_tmp[629534] "expr temp" "maybe param" "maybe type" "temp"
        (629537 'move' call_tmp[629534](83926 call < call_tmp[629524] call_tmp[629529]))
        (560188 'move' tmp[560186](421775 call isTrue call_tmp[629534]))
        (560193 'move' tmp[560178](560190 '_paramFoldLogical' tmp[560179] tmp[560186]))
      }
      {
        (560198 'move' tmp[560178](560195 '_paramFoldLogical' tmp[560179] 0))
      }
      unknown tmp[560218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560220 'move' tmp[560218](421755 call isTrue tmp[560178]))
      (560225 'move' tmp[560205](560222 '_paramFoldLogical' tmp[560206] tmp[560218]))
    }
    (421740 'move' tmp[421729] tmp[560205])
    unknown call_tmp[629539] "expr temp" "maybe param" "maybe type" "temp"
    (629542 'move' call_tmp[629539](421742 call _cond_invalid tmp[421729]))
    if call_tmp[629539]
    {
      (421745 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560286] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560287] "maybe param" "temp"
    unknown call_tmp[629544] "expr temp" "maybe param" "maybe type" "temp"
    (629547 'move' call_tmp[629544](421730 call isTrue tmp[421729]))
    (560292 'move' tmp[560287](560290 call _cond_test call_tmp[629544]))
    if tmp[560287]
    {
      (560297 'move' tmp[560286](560294 '_paramFoldLogical' tmp[560287] 1))
    }
    {
      unknown tmp[421792] "maybe param" "temp"
      unknown call_tmp[629549] "expr temp" "maybe param" "maybe type" "temp"
      (629552 'move' call_tmp[629549](83936 call x[83896] 0))
      (421803 'move' tmp[421792](83938 call gotNaN call_tmp[629549]))
      unknown call_tmp[629554] "expr temp" "maybe param" "maybe type" "temp"
      (629557 'move' call_tmp[629554](421805 call _cond_invalid tmp[421792]))
      if call_tmp[629554]
      {
        (421808 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560259] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560260] "maybe param" "temp"
      unknown call_tmp[629559] "expr temp" "maybe param" "maybe type" "temp"
      (629562 'move' call_tmp[629559](421793 call isTrue tmp[421792]))
      (560265 'move' tmp[560260](560263 call _cond_test call_tmp[629559]))
      if tmp[560260]
      {
        unknown tmp[421813] "maybe param" "temp"
        unknown call_tmp[629564] "expr temp" "maybe param" "maybe type" "temp"
        (629567 'move' call_tmp[629564](83943 call state[83892] 0))
        unknown call_tmp[629569] "expr temp" "maybe param" "maybe type" "temp"
        (629572 'move' call_tmp[629569](83945 call gotNaN call_tmp[629564]))
        (421824 'move' tmp[421813](83946 call ! call_tmp[629569]))
        unknown call_tmp[629574] "expr temp" "maybe param" "maybe type" "temp"
        (629577 'move' call_tmp[629574](421826 call _cond_invalid tmp[421813]))
        if call_tmp[629574]
        {
          (421829 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560232] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560233] "maybe param" "temp"
        unknown call_tmp[629579] "expr temp" "maybe param" "maybe type" "temp"
        (629582 'move' call_tmp[629579](421814 call isTrue tmp[421813]))
        (560238 'move' tmp[560233](560236 call _cond_test call_tmp[629579]))
        if tmp[560233]
        {
          (560243 'move' tmp[560232](560240 '_paramFoldLogical' tmp[560233] 1))
        }
        {
          unknown tmp[560245] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629584] "expr temp" "maybe param" "maybe type" "temp"
          (629587 'move' call_tmp[629584](83951 call x[83896] 1))
          unknown call_tmp[629589] "expr temp" "maybe param" "maybe type" "temp"
          (629592 'move' call_tmp[629589](83955 call state[83892] 1))
          unknown call_tmp[629594] "expr temp" "maybe param" "maybe type" "temp"
          (629597 'move' call_tmp[629594](83956 call < call_tmp[629584] call_tmp[629589]))
          (560247 'move' tmp[560245](421818 call isTrue call_tmp[629594]))
          (560252 'move' tmp[560232](560249 '_paramFoldLogical' tmp[560233] tmp[560245]))
        }
        unknown tmp[560267] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560269 'move' tmp[560267](421796 call isTrue tmp[560232]))
        (560274 'move' tmp[560259](560271 '_paramFoldLogical' tmp[560260] tmp[560267]))
      }
      {
        (560279 'move' tmp[560259](560276 '_paramFoldLogical' tmp[560260] 0))
      }
      unknown tmp[560299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560301 'move' tmp[560299](421734 call isTrue tmp[560259]))
      (560306 'move' tmp[560286](560303 '_paramFoldLogical' tmp[560287] tmp[560299]))
    }
    unknown call_tmp[629599] "expr temp" "maybe param" "maybe type" "temp"
    (629602 'move' call_tmp[629599](83969 call _cond_test tmp[560286]))
    if call_tmp[629599]
    {
      (83966 call = state[83892] x[83896])
    }
    (512500 return _void[55])
  }
  function maxloc[84023](?).combine[83981](arg _mt[84039]:_MT[238], arg this[84037]:maxloc[84023](?), arg x[83979]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629608] "expr temp" "maybe param" "maybe type" "temp"
    (629611 'move' call_tmp[629608](376708 call value _mt[243] this[84037]))
    unknown call_tmp[629615] "expr temp" "maybe param" "maybe type" "temp"
    (629618 'move' call_tmp[629615](83987 call value _mt[243] x[83979]))
    (83990 call(376703 call (partial) accumulateOntoState _mt[243] this[84037]) call_tmp[629608] call_tmp[629615])
    (512502 return _void[55])
  }
  function maxloc[84023](?).generate[83997](arg _mt[84043]:_MT[238], arg this[84041]:maxloc[84023](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512506] "RVV" "temp"
    unknown call_tmp[629622] "expr temp" "maybe param" "maybe type" "temp"
    (629625 'move' call_tmp[629622](376713 call value _mt[243] this[84041]))
    (512511 'move' ret[512506](512510 'deref' call_tmp[629622]))
    (512508 return ret[512506])
  }
  function maxloc[84023](?).clone[84007](arg _mt[84047]:_MT[238], arg this[84045]:maxloc[84023](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512515] "RVV" "temp"
    unknown call_tmp[629629] "expr temp" "maybe param" "maybe type" "temp"
    (629632 'move' call_tmp[629629](376722 call eltType _mt[243] this[84045]))
    unknown call_tmp[629634] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629637 'move' call_tmp[629634](747715 'new' maxloc[376717](?)(eltType = call_tmp[629629])(_chpl_manager = unmanaged[220](?))))
    (512520 'move' ret[512515](512519 'deref' call_tmp[629634]))
    (512517 return ret[512515])
  }
  function maxloc[84023](?).super[774913](arg _mt[774915]:_MT[238], arg this[774917]:maxloc[84023](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774927] "RVV" "temp"
    unknown call_tmp[774934] "expr temp" "maybe param" "maybe type" "temp"
    (774937 'move' call_tmp[774934](774921 '.v' this[774917] c"super"))
    (774932 'move' ret[774927](774931 'deref' call_tmp[774934]))
    (774929 return ret[774927])
  }
  function maxloc[774944](?).eltType[774939](arg _mt[774941]:_MT[238], arg this[774946]:maxloc[774944](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[774981] "RVV" "temp" "type variable"
    unknown borrowOfThis[774948]
    (774973 'end of statement')
    (774950 'move' borrowOfThis[774948](774953 call _cast _borrowedNonNilable[214](?) this[774946]))
    (774974 'end of statement' borrowOfThis[774948])
    unknown call_tmp[774995] "expr temp" "maybe param" "maybe type" "temp"
    (774998 'move' call_tmp[774995](774963 'is bound' borrowOfThis[774948] c"eltType"))
    if call_tmp[774995]
    {
      unknown call_tmp[775000] "expr temp" "maybe param" "maybe type" "temp"
      (775003 'move' call_tmp[775000](774958 '.v' borrowOfThis[774948] c"eltType"))
      unknown call_tmp[775005] "expr temp" "maybe param" "maybe type" "temp"
      (775008 'move' call_tmp[775005](774959 call chpl_checkLegalTypeFieldAccessor this[774946] call_tmp[775000] "eltType"))
      (774986 'move' ret[774981](774985 'deref' call_tmp[775005]))
      gotoReturn _end_eltType[774979] _end_eltType[774979]
      (774976 'end of statement' borrowOfThis[774948])
    }
    {
      (774991 'move' ret[774981](774990 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[774979] _end_eltType[774979]
    }
    label _end_eltType[774979]
    (774983 return ret[774981])
  }
  function maxloc[774944](?).eltType[775010](arg _mt[775012]:_MT[238], arg this[775014]:maxloc[774944](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775049] "RVV" "temp" "type variable"
    unknown borrowOfThis[775016] "type variable"
    (775041 'end of statement')
    (775018 'move' borrowOfThis[775016](775021 call _cast _borrowedNonNilable[214](?) this[775014]))
    (775042 'end of statement' borrowOfThis[775016])
    unknown call_tmp[775063] "expr temp" "maybe param" "maybe type" "temp"
    (775066 'move' call_tmp[775063](775031 'is bound' borrowOfThis[775016] c"eltType"))
    if call_tmp[775063]
    {
      unknown call_tmp[775068] "expr temp" "maybe param" "maybe type" "temp"
      (775071 'move' call_tmp[775068](775026 '.v' borrowOfThis[775016] c"eltType"))
      unknown call_tmp[775073] "expr temp" "maybe param" "maybe type" "temp"
      (775076 'move' call_tmp[775073](775027 call chpl_checkLegalTypeFieldAccessor this[775014] call_tmp[775068] "eltType"))
      (775054 'move' ret[775049](775053 'deref' call_tmp[775073]))
      gotoReturn _end_eltType[775047] _end_eltType[775047]
      (775044 'end of statement' borrowOfThis[775016])
    }
    {
      (775059 'move' ret[775049](775058 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775047] _end_eltType[775047]
    }
    label _end_eltType[775047]
    (775051 return ret[775049])
  }
  function maxloc[84023](?).value[775078](arg _mt[775080]:_MT[238], arg this[775082]:maxloc[84023](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775092] "RVV" "temp"
    unknown call_tmp[775099] "expr temp" "maybe param" "maybe type" "temp"
    (775102 'move' call_tmp[775099](775086 '.' this[775082] c"value"))
    (775097 'move' ret[775092](775096 'addr of' call_tmp[775099]))
    (775094 return ret[775092])
  }
  function maxloc[84023](?).init[775104](arg _mt[775106]:_MT[238], arg this[775107]:maxloc[84023](?), in arg l[775120]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[775123]:_any[178](?), in arg value[775132] :
  (775139 call _maxloc_id eltType[775123]) =
  (775134 call _maxloc_id eltType[775123])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[775151] "temporary of super field" "temp"
    (775153 'move' super_tmp[775151](775150 '.v' this[775107] c"super"))
    (775117 call(775115 call (partial) init _mt[243] super_tmp[775151]) l[775120])
    (775180 'end of statement')
    unknown tmp[775156] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[775184] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[775196] "expr temp" "maybe param" "maybe type" "temp"
      (775199 'move' call_tmp[775196](775158 '.v' this[775107] c"super"))
      (775188 'move' call_type_tmp[775184](775161 'typeof' call_tmp[775196]))
    }
    (775162 'move' tmp[775156] call_type_tmp[775184])
    unknown call_tmp[775201] "maybe param" "maybe type" "temp"
    (775204 'move' call_tmp[775201](775167 'cast' tmp[775156] this[775107]))
    unknown chpl__thisAsParent[775164] "dead at end of block" "insert auto destroy" "temp"
    (775192 'init var' chpl__thisAsParent[775164] call_tmp[775201] tmp[775156])
    (775170 'setcid' chpl__thisAsParent[775164])
    (775172 'init field' this[775107] c"eltType" eltType[775123])
    (775181 'end of statement')
    (775175 '.=' this[775107] c"value" value[775132])
    (775182 'end of statement')
    (775178 'setcid' this[775107])
    (775190 return _void[55])
  }
  function maxloc[84023](?).deinit[775206](arg _mt[775208]:_MT[238], arg this[775210]:maxloc[84023](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (775218 return _void[55])
  }
  function maxloc[84023](?).writeThis[775220](arg _mt[775224]:_MT[238], arg this[775222]:maxloc[84023](?), arg f[775223]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775229 call writeThisDefaultImpl f[775223] this[775222])
    (775234 return _void[55])
  }
  function maxloc[84023](?).readThis[775236](arg _mt[775240]:_MT[238], arg this[775238]:maxloc[84023](?), arg f[775239]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775244 call readThisDefaultImpl f[775239] this[775238])
    (775250 return _void[55])
  }
  type maxloc[84023](?) val super[355540]:ReduceScanOp[82297] "super class" unknown eltType[83851] "type variable" unknown value[83858](83857 call _maxloc_id eltType[83851])
  type maxloc[774944](?)
  type maxloc[376717](?)
  function minloc[84225](?).identity[84066](arg _mt[84229]:_MT[238], arg this[84227]:minloc[84225](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[512524] "RVV" "temp"
    unknown call_tmp[629641] "expr temp" "maybe param" "maybe type" "temp"
    (629644 'move' call_tmp[629641](376728 call eltType _mt[243] this[84227]))
    unknown call_tmp[629646] "expr temp" "maybe param" "maybe type" "temp"
    (629649 'move' call_tmp[629646](84071 call _minloc_id call_tmp[629641]))
    (512529 'move' ret[512524](512528 'deref' call_tmp[629646]))
    (512526 return ret[512524])
  }
  function minloc[84225](?).accumulate[84081](arg _mt[84233]:_MT[238], arg this[84231]:minloc[84225](?), arg x[84079]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629655] "expr temp" "maybe param" "maybe type" "temp"
    (629658 'move' call_tmp[629655](376737 call value _mt[243] this[84231]))
    (84087 call(376732 call (partial) accumulateOntoState _mt[243] this[84231]) call_tmp[629655] x[84079])
    (512531 return _void[55])
  }
  function minloc[84225](?).accumulateOntoState[84096](arg _mt[84237]:_MT[238], arg this[84235]:minloc[84225](?), ref arg state[84094]:_any[178](?), arg x[84098]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown tmp[421834] "maybe param" "temp"
    unknown tmp[421855] "maybe param" "temp"
    unknown call_tmp[629660] "expr temp" "maybe param" "maybe type" "temp"
    (629663 'move' call_tmp[629660](84103 call x[84098] 0))
    unknown call_tmp[629665] "expr temp" "maybe param" "maybe type" "temp"
    (629668 'move' call_tmp[629665](84107 call state[84094] 0))
    (421866 'move' tmp[421855](84108 call < call_tmp[629660] call_tmp[629665]))
    unknown call_tmp[629670] "expr temp" "maybe param" "maybe type" "temp"
    (629673 'move' call_tmp[629670](421868 call _cond_invalid tmp[421855]))
    if call_tmp[629670]
    {
      (421871 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560340] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560341] "maybe param" "temp"
    unknown call_tmp[629675] "expr temp" "maybe param" "maybe type" "temp"
    (629678 'move' call_tmp[629675](421856 call isTrue tmp[421855]))
    (560346 'move' tmp[560341](560344 call _cond_test call_tmp[629675]))
    if tmp[560341]
    {
      (560351 'move' tmp[560340](560348 '_paramFoldLogical' tmp[560341] 1))
    }
    {
      unknown tmp[421876] "maybe param" "temp"
      unknown call_tmp[629680] "expr temp" "maybe param" "maybe type" "temp"
      (629683 'move' call_tmp[629680](84113 call x[84098] 0))
      unknown call_tmp[629685] "expr temp" "maybe param" "maybe type" "temp"
      (629688 'move' call_tmp[629685](84117 call state[84094] 0))
      (421887 'move' tmp[421876](84118 call == call_tmp[629680] call_tmp[629685]))
      unknown call_tmp[629690] "expr temp" "maybe param" "maybe type" "temp"
      (629693 'move' call_tmp[629690](421889 call _cond_invalid tmp[421876]))
      if call_tmp[629690]
      {
        (421892 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560313] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560314] "maybe param" "temp"
      unknown call_tmp[629695] "expr temp" "maybe param" "maybe type" "temp"
      (629698 'move' call_tmp[629695](421877 call isTrue tmp[421876]))
      (560319 'move' tmp[560314](560317 call _cond_test call_tmp[629695]))
      if tmp[560314]
      {
        unknown tmp[560321] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[629700] "expr temp" "maybe param" "maybe type" "temp"
        (629703 'move' call_tmp[629700](84123 call x[84098] 1))
        unknown call_tmp[629705] "expr temp" "maybe param" "maybe type" "temp"
        (629708 'move' call_tmp[629705](84127 call state[84094] 1))
        unknown call_tmp[629710] "expr temp" "maybe param" "maybe type" "temp"
        (629713 'move' call_tmp[629710](84128 call < call_tmp[629700] call_tmp[629705]))
        (560323 'move' tmp[560321](421880 call isTrue call_tmp[629710]))
        (560328 'move' tmp[560313](560325 '_paramFoldLogical' tmp[560314] tmp[560321]))
      }
      {
        (560333 'move' tmp[560313](560330 '_paramFoldLogical' tmp[560314] 0))
      }
      unknown tmp[560353] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560355 'move' tmp[560353](421860 call isTrue tmp[560313]))
      (560360 'move' tmp[560340](560357 '_paramFoldLogical' tmp[560341] tmp[560353]))
    }
    (421845 'move' tmp[421834] tmp[560340])
    unknown call_tmp[629715] "expr temp" "maybe param" "maybe type" "temp"
    (629718 'move' call_tmp[629715](421847 call _cond_invalid tmp[421834]))
    if call_tmp[629715]
    {
      (421850 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[560421] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560422] "maybe param" "temp"
    unknown call_tmp[629720] "expr temp" "maybe param" "maybe type" "temp"
    (629723 'move' call_tmp[629720](421835 call isTrue tmp[421834]))
    (560427 'move' tmp[560422](560425 call _cond_test call_tmp[629720]))
    if tmp[560422]
    {
      (560432 'move' tmp[560421](560429 '_paramFoldLogical' tmp[560422] 1))
    }
    {
      unknown tmp[421897] "maybe param" "temp"
      unknown call_tmp[629725] "expr temp" "maybe param" "maybe type" "temp"
      (629728 'move' call_tmp[629725](84138 call x[84098] 0))
      (421908 'move' tmp[421897](84140 call gotNaN call_tmp[629725]))
      unknown call_tmp[629730] "expr temp" "maybe param" "maybe type" "temp"
      (629733 'move' call_tmp[629730](421910 call _cond_invalid tmp[421897]))
      if call_tmp[629730]
      {
        (421913 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[560394] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560395] "maybe param" "temp"
      unknown call_tmp[629735] "expr temp" "maybe param" "maybe type" "temp"
      (629738 'move' call_tmp[629735](421898 call isTrue tmp[421897]))
      (560400 'move' tmp[560395](560398 call _cond_test call_tmp[629735]))
      if tmp[560395]
      {
        unknown tmp[421918] "maybe param" "temp"
        unknown call_tmp[629740] "expr temp" "maybe param" "maybe type" "temp"
        (629743 'move' call_tmp[629740](84145 call state[84094] 0))
        unknown call_tmp[629745] "expr temp" "maybe param" "maybe type" "temp"
        (629748 'move' call_tmp[629745](84147 call gotNaN call_tmp[629740]))
        (421929 'move' tmp[421918](84148 call ! call_tmp[629745]))
        unknown call_tmp[629750] "expr temp" "maybe param" "maybe type" "temp"
        (629753 'move' call_tmp[629750](421931 call _cond_invalid tmp[421918]))
        if call_tmp[629750]
        {
          (421934 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[560367] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[560368] "maybe param" "temp"
        unknown call_tmp[629755] "expr temp" "maybe param" "maybe type" "temp"
        (629758 'move' call_tmp[629755](421919 call isTrue tmp[421918]))
        (560373 'move' tmp[560368](560371 call _cond_test call_tmp[629755]))
        if tmp[560368]
        {
          (560378 'move' tmp[560367](560375 '_paramFoldLogical' tmp[560368] 1))
        }
        {
          unknown tmp[560380] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[629760] "expr temp" "maybe param" "maybe type" "temp"
          (629763 'move' call_tmp[629760](84153 call x[84098] 1))
          unknown call_tmp[629765] "expr temp" "maybe param" "maybe type" "temp"
          (629768 'move' call_tmp[629765](84157 call state[84094] 1))
          unknown call_tmp[629770] "expr temp" "maybe param" "maybe type" "temp"
          (629773 'move' call_tmp[629770](84158 call < call_tmp[629760] call_tmp[629765]))
          (560382 'move' tmp[560380](421923 call isTrue call_tmp[629770]))
          (560387 'move' tmp[560367](560384 '_paramFoldLogical' tmp[560368] tmp[560380]))
        }
        unknown tmp[560402] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560404 'move' tmp[560402](421901 call isTrue tmp[560367]))
        (560409 'move' tmp[560394](560406 '_paramFoldLogical' tmp[560395] tmp[560402]))
      }
      {
        (560414 'move' tmp[560394](560411 '_paramFoldLogical' tmp[560395] 0))
      }
      unknown tmp[560434] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (560436 'move' tmp[560434](421839 call isTrue tmp[560394]))
      (560441 'move' tmp[560421](560438 '_paramFoldLogical' tmp[560422] tmp[560434]))
    }
    unknown call_tmp[629775] "expr temp" "maybe param" "maybe type" "temp"
    (629778 'move' call_tmp[629775](84171 call _cond_test tmp[560421]))
    if call_tmp[629775]
    {
      (84168 call = state[84094] x[84098])
    }
    (512533 return _void[55])
  }
  function minloc[84225](?).combine[84183](arg _mt[84241]:_MT[238], arg this[84239]:minloc[84225](?), arg x[84181]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[629784] "expr temp" "maybe param" "maybe type" "temp"
    (629787 'move' call_tmp[629784](376759 call value _mt[243] this[84239]))
    unknown call_tmp[629791] "expr temp" "maybe param" "maybe type" "temp"
    (629794 'move' call_tmp[629791](84189 call value _mt[243] x[84181]))
    (84192 call(376754 call (partial) accumulateOntoState _mt[243] this[84239]) call_tmp[629784] call_tmp[629791])
    (512535 return _void[55])
  }
  function minloc[84225](?).generate[84199](arg _mt[84245]:_MT[238], arg this[84243]:minloc[84225](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512539] "RVV" "temp"
    unknown call_tmp[629798] "expr temp" "maybe param" "maybe type" "temp"
    (629801 'move' call_tmp[629798](376764 call value _mt[243] this[84243]))
    (512544 'move' ret[512539](512543 'deref' call_tmp[629798]))
    (512541 return ret[512539])
  }
  function minloc[84225](?).clone[84209](arg _mt[84249]:_MT[238], arg this[84247]:minloc[84225](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[512548] "RVV" "temp"
    unknown call_tmp[629805] "expr temp" "maybe param" "maybe type" "temp"
    (629808 'move' call_tmp[629805](376773 call eltType _mt[243] this[84247]))
    unknown call_tmp[629810] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (629813 'move' call_tmp[629810](747716 'new' minloc[376768](?)(eltType = call_tmp[629805])(_chpl_manager = unmanaged[220](?))))
    (512553 'move' ret[512548](512552 'deref' call_tmp[629810]))
    (512550 return ret[512548])
  }
  function minloc[84225](?).super[775252](arg _mt[775254]:_MT[238], arg this[775256]:minloc[84225](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775266] "RVV" "temp"
    unknown call_tmp[775273] "expr temp" "maybe param" "maybe type" "temp"
    (775276 'move' call_tmp[775273](775260 '.v' this[775256] c"super"))
    (775271 'move' ret[775266](775270 'deref' call_tmp[775273]))
    (775268 return ret[775266])
  }
  function minloc[775283](?).eltType[775278](arg _mt[775280]:_MT[238], arg this[775285]:minloc[775283](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775320] "RVV" "temp" "type variable"
    unknown borrowOfThis[775287]
    (775312 'end of statement')
    (775289 'move' borrowOfThis[775287](775292 call _cast _borrowedNonNilable[214](?) this[775285]))
    (775313 'end of statement' borrowOfThis[775287])
    unknown call_tmp[775334] "expr temp" "maybe param" "maybe type" "temp"
    (775337 'move' call_tmp[775334](775302 'is bound' borrowOfThis[775287] c"eltType"))
    if call_tmp[775334]
    {
      unknown call_tmp[775339] "expr temp" "maybe param" "maybe type" "temp"
      (775342 'move' call_tmp[775339](775297 '.v' borrowOfThis[775287] c"eltType"))
      unknown call_tmp[775344] "expr temp" "maybe param" "maybe type" "temp"
      (775347 'move' call_tmp[775344](775298 call chpl_checkLegalTypeFieldAccessor this[775285] call_tmp[775339] "eltType"))
      (775325 'move' ret[775320](775324 'deref' call_tmp[775344]))
      gotoReturn _end_eltType[775318] _end_eltType[775318]
      (775315 'end of statement' borrowOfThis[775287])
    }
    {
      (775330 'move' ret[775320](775329 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775318] _end_eltType[775318]
    }
    label _end_eltType[775318]
    (775322 return ret[775320])
  }
  function minloc[775283](?).eltType[775349](arg _mt[775351]:_MT[238], arg this[775353]:minloc[775283](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775388] "RVV" "temp" "type variable"
    unknown borrowOfThis[775355] "type variable"
    (775380 'end of statement')
    (775357 'move' borrowOfThis[775355](775360 call _cast _borrowedNonNilable[214](?) this[775353]))
    (775381 'end of statement' borrowOfThis[775355])
    unknown call_tmp[775402] "expr temp" "maybe param" "maybe type" "temp"
    (775405 'move' call_tmp[775402](775370 'is bound' borrowOfThis[775355] c"eltType"))
    if call_tmp[775402]
    {
      unknown call_tmp[775407] "expr temp" "maybe param" "maybe type" "temp"
      (775410 'move' call_tmp[775407](775365 '.v' borrowOfThis[775355] c"eltType"))
      unknown call_tmp[775412] "expr temp" "maybe param" "maybe type" "temp"
      (775415 'move' call_tmp[775412](775366 call chpl_checkLegalTypeFieldAccessor this[775353] call_tmp[775407] "eltType"))
      (775393 'move' ret[775388](775392 'deref' call_tmp[775412]))
      gotoReturn _end_eltType[775386] _end_eltType[775386]
      (775383 'end of statement' borrowOfThis[775355])
    }
    {
      (775398 'move' ret[775388](775397 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[775386] _end_eltType[775386]
    }
    label _end_eltType[775386]
    (775390 return ret[775388])
  }
  function minloc[84225](?).value[775417](arg _mt[775419]:_MT[238], arg this[775421]:minloc[84225](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[775431] "RVV" "temp"
    unknown call_tmp[775438] "expr temp" "maybe param" "maybe type" "temp"
    (775441 'move' call_tmp[775438](775425 '.' this[775421] c"value"))
    (775436 'move' ret[775431](775435 'addr of' call_tmp[775438]))
    (775433 return ret[775431])
  }
  function minloc[84225](?).init[775443](arg _mt[775445]:_MT[238], arg this[775446]:minloc[84225](?), in arg l[775459]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], arg eltType[775462]:_any[178](?), in arg value[775471] :
  (775478 call _minloc_id eltType[775462]) =
  (775473 call _minloc_id eltType[775462])) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[775490] "temporary of super field" "temp"
    (775492 'move' super_tmp[775490](775489 '.v' this[775446] c"super"))
    (775456 call(775454 call (partial) init _mt[243] super_tmp[775490]) l[775459])
    (775519 'end of statement')
    unknown tmp[775495] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[775523] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[775535] "expr temp" "maybe param" "maybe type" "temp"
      (775538 'move' call_tmp[775535](775497 '.v' this[775446] c"super"))
      (775527 'move' call_type_tmp[775523](775500 'typeof' call_tmp[775535]))
    }
    (775501 'move' tmp[775495] call_type_tmp[775523])
    unknown call_tmp[775540] "maybe param" "maybe type" "temp"
    (775543 'move' call_tmp[775540](775506 'cast' tmp[775495] this[775446]))
    unknown chpl__thisAsParent[775503] "dead at end of block" "insert auto destroy" "temp"
    (775531 'init var' chpl__thisAsParent[775503] call_tmp[775540] tmp[775495])
    (775509 'setcid' chpl__thisAsParent[775503])
    (775511 'init field' this[775446] c"eltType" eltType[775462])
    (775520 'end of statement')
    (775514 '.=' this[775446] c"value" value[775471])
    (775521 'end of statement')
    (775517 'setcid' this[775446])
    (775529 return _void[55])
  }
  function minloc[84225](?).deinit[775545](arg _mt[775547]:_MT[238], arg this[775549]:minloc[84225](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (775557 return _void[55])
  }
  function minloc[84225](?).writeThis[775559](arg _mt[775563]:_MT[238], arg this[775561]:minloc[84225](?), arg f[775562]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775568 call writeThisDefaultImpl f[775562] this[775561])
    (775573 return _void[55])
  }
  function minloc[84225](?).readThis[775575](arg _mt[775579]:_MT[238], arg this[775577]:minloc[84225](?), arg f[775578]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (775583 call readThisDefaultImpl f[775578] this[775577])
    (775589 return _void[55])
  }
  type minloc[84225](?) val super[355542]:ReduceScanOp[82297] "super class" unknown eltType[84053] "type variable" unknown value[84060](84059 call _minloc_id eltType[84053])
  type minloc[775283](?)
  type minloc[376768](?)
  function gotNaN[84256](arg value[84254]:_any[178](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[512557] "RVV" "temp"
    unknown call_tmp[629815] "expr temp" "maybe param" "maybe type" "temp"
    (629818 'move' call_tmp[629815](84265 call isnan value[84254]))
    (512562 'move' ret[512557](512561 'deref' call_tmp[629815]))
    (512559 return ret[512557])
  }
  where {
    (84261 call isReal value[84254])
  }
  function gotNaN[84276](arg value[84274]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[512566] "RVV" "param" "temp"
    (512571 'move' ret[512566](512570 'deref' 0))
    (512568 return ret[512566])
  }
  (354967 'used modules list'(81777 'use' ChapelStandard[20264])(81781 'use' ChapelLocks[187256]))
}