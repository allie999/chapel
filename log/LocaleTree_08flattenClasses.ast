AST dump for LocaleTree after pass flattenClasses.
Module use list: ChapelLocale 

{
  type chpl_localeTreeRecord[155228] unknown left[155217] locale[28] unknown right[155221](155225 'typeof' left[155217])
  unknown chpl_localeTree[155232] "locale private" chpl_localeTreeRecord[155228]
  (155235 'end of statement')
  function chpl_initLocaleTree[155238]() : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[155365] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155366] "expr temp" "temp"
      (155375 'move' _iterator[155366](155373 call _getIterator LocaleSpace[113670]))
      Defer
      {
        {
          (155391 call _freeIterator _iterator[155366])
        }
      }
      { scopeless type
        (155380 'move' _indexOfInterest[155365](155377 call iteratorIndex _iterator[155366]))
      }
      ForLoop[155367]
      {
        unknown i[155384] "index var" "insert auto destroy"
        (155386 'move' i[155384] _indexOfInterest[155365])
        {
          unknown left[155246] nil[44] unmanaged BaseLocale?[415539]
          (155249 'end of statement')
          unknown right[155255] nil[44] unmanaged BaseLocale?[415539]
          (155258 'end of statement')
          unknown child[155269](155267 call -(155264 call *(155261 call + i[155384] 1) 2) 1)
          (155272 'end of statement')
          if(155320 call _cond_test(155275 call < child[155269] numLocales[209892]))
          {
            (155288 call = left[155246](155285 call .(155284 call(155279 call . rootLocale[91514] c"getChild") child[155269]) c"_instance"))
            (155294 call += child[155269] 1)
            if(155315 call _cond_test(155299 call < child[155269] numLocales[209892]))
            {
              (155312 call = right[155255](155309 call .(155308 call(155303 call . rootLocale[91514] c"getChild") child[155269]) c"_instance"))
            }
          }
          const tmp[155357] "const" "temp"
          (155359 'move' tmp[155357](155355 'deref'(155354 '_wide_get_locale'(155330 call(155325 call . rootLocale[91514] c"getChild") i[155384]))))
          {
            {
              (155339 call =(155335 call .(155332 call . chpl_localeTree[155232] c"left") c"_instance") left[155246])
              (155351 call =(155347 call .(155344 call . chpl_localeTree[155232] c"right") c"_instance") right[155255])
            }
            (155362 'on block' 0 tmp[155357])
          }
        }
        label _continueLabel[155370]
        _indexOfInterest[155365]
        _iterator[155366]
      }
      label _breakLabel[155371]
    }
  }
  (155403 call chpl_initLocaleTree)
  (355250 'used modules list'(155213 'use' ChapelLocale[89847]))
}