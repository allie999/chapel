AST dump for Builtins after pass buildDefaultFunctions.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416150]() : void[4] "insert line file info" "module init"
  {
    (527904 return _void[55])
  }
  function assert[210262](arg test[210259]:bool[10]) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704801] "expr temp" "maybe param" "maybe type" "temp"
    (704804 'move' call_tmp[704801](210265 call ! test[210259]))
    unknown call_tmp[704806] "expr temp" "maybe param" "maybe type" "temp"
    (704809 'move' call_tmp[704806](210274 call _cond_test call_tmp[704801]))
    if call_tmp[704806]
    {
      (210272 'chpl_error' c"assert failed")
    }
    (527882 return _void[55])
  }
  function assert[210289](arg test[210286]:bool[10], arg args[210293]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704811] "expr temp" "maybe param" "maybe type" "temp"
    (704814 'move' call_tmp[704811](210302 call ! test[210286]))
    unknown call_tmp[704816] "expr temp" "maybe param" "maybe type" "temp"
    (704819 'move' call_tmp[704816](210343 call _cond_test call_tmp[704811]))
    if call_tmp[704816]
    {
      unknown call_tmp[704821] "expr temp" "maybe param" "maybe type" "temp"
      (704824 'move' call_tmp[704821](210325 call stringify(210323 'expand_tuple' args[210293])))
      unknown call_tmp[704826] "maybe param" "maybe type" "temp"
      (704829 'move' call_tmp[704826](210326 call + "assert failed - " call_tmp[704821]))
      unknown tmpstring[210328] "dead at end of block" "insert auto destroy"
      (546063 'init var' tmpstring[210328] call_tmp[704826])
      (210331 'end of statement')
      unknown call_tmp[704833] "expr temp" "maybe param" "maybe type" "temp"
      (704836 'move' call_tmp[704833](210340 call(210336 call (partial) c_str _mt[243] tmpstring[210328])))
      (210341 'chpl_error' call_tmp[704833])
      (486011 'end of statement' tmpstring[210328])
    }
    (527884 return _void[55])
    (355338 'used modules list'(210298 'use' IO[230808] 'only' stringify))
  }
  function compilerError[210358](param arg msg[210354]:string[26] ..., param arg errorDepth[210361]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210382 'error')
    (527886 return _void[55])
  }
  function compilerError[210396](param arg msg[210392]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210400 'error')
    (527888 return _void[55])
  }
  function compilerWarning[210414](param arg msg[210410]:string[26] ..., param arg errorDepth[210417]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210438 'warning')
    (527890 return _void[55])
  }
  function compilerWarning[210452](param arg msg[210448]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210456 'warning')
    (527892 return _void[55])
  }
  function compilerAssert[210467](param arg test[210464]:bool[10]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704838] "expr temp" "maybe param" "maybe type" "temp"
    (704841 'move' call_tmp[704838](210470 call ! test[210464]))
    unknown call_tmp[704843] "expr temp" "maybe param" "maybe type" "temp"
    (704846 'move' call_tmp[704843](210491 call _cond_test call_tmp[704838]))
    if call_tmp[704843]
    {
      (210489 call compilerError "assert failed")
    }
    (527894 return _void[55])
  }
  function compilerAssert[210505](param arg test[210502]:bool[10], param arg errorDepth[210508]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704848] "expr temp" "maybe param" "maybe type" "temp"
    (704851 'move' call_tmp[704848](210512 call ! test[210502]))
    unknown call_tmp[704853] "expr temp" "maybe param" "maybe type" "temp"
    (704856 'move' call_tmp[704853](210523 call _cond_test call_tmp[704848]))
    if call_tmp[704853]
    {
      unknown call_tmp[704858] "expr temp" "maybe param" "maybe type" "temp"
      (704861 'move' call_tmp[704858](210519 call + errorDepth[210508] 1))
      (210521 call compilerError "assert failed" call_tmp[704858])
    }
    (527896 return _void[55])
  }
  function compilerAssert[210537](param arg test[210534]:bool[10], param arg msg[210542]:string[26] ...) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704863] "expr temp" "maybe param" "maybe type" "temp"
    (704866 'move' call_tmp[704863](210547 call ! test[210534]))
    unknown call_tmp[704868] "expr temp" "maybe param" "maybe type" "temp"
    (704871 'move' call_tmp[704868](210556 call _cond_test call_tmp[704863]))
    if call_tmp[704868]
    {
      (210554 call compilerError "assert failed - "(210553 'expand_tuple' msg[210542]))
    }
    (527898 return _void[55])
  }
  function compilerAssert[210570](param arg test[210567]:bool[10], param arg msg[210575]:string[26] ..., param arg errorDepth[210580]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704873] "expr temp" "maybe param" "maybe type" "temp"
    (704876 'move' call_tmp[704873](210584 call ! test[210567]))
    unknown call_tmp[704878] "expr temp" "maybe param" "maybe type" "temp"
    (704881 'move' call_tmp[704878](210597 call _cond_test call_tmp[704873]))
    if call_tmp[704878]
    {
      unknown call_tmp[704883] "expr temp" "maybe param" "maybe type" "temp"
      (704886 'move' call_tmp[704883](210593 call + errorDepth[210580] 1))
      (210595 call compilerError "assert failed - "(210590 'expand_tuple' msg[210575]) call_tmp[704883])
    }
    (527900 return _void[55])
  }
  function exit[210613](arg status[210609]:int(64)[13] =
  0) : _unknown[51] "function terminates program" "inline" "no return value for void"
  {
    (210634 'chpl_exit_any' status[210609])
    (527902 return _void[55])
  }
  (355336 'used modules list'(353053 'use' ChapelStandard[20264]))
}