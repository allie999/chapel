AST dump for RangeChunk after pass flattenClasses.
Module use list: ChapelStandard 

{
  type RemElems[266554] def Thru[266548]:RemElems[266554] def Pack[266550]:RemElems[266554] def Mod[266552]:RemElems[266554]
  function chunks[266577](arg r[266574] :
  (266573 call range[64319](?) unknown RT[266567] bounded[64208] unknown S[266571]), arg numChunks[266580] :
  integral[199](?), arg remPol[266585] :
  RemElems[266554] =
  Thru[266548]) : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[266649] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266650] "expr temp" "temp"
      (266659 'move' _iterator[266650](266657 call _getIterator(266605 call chunksOrder r[266574] numChunks[266580] remPol[266585])))
      Defer
      {
        {
          (266690 call _freeIterator _iterator[266650])
        }
      }
      { scopeless type
        (266665 'move' _indexOfInterest[266649](266662 call iteratorIndex _iterator[266650]))
      }
      ForLoop[266651]
      {
        (266670 call _check_tuple_var_decl _indexOfInterest[266649] 2)
        unknown startOrder[266676] "index var" "insert auto destroy"
        (266678 'move' startOrder[266676](266674 call _indexOfInterest[266649] 0))
        unknown endOrder[266683] "index var" "insert auto destroy"
        (266685 'move' endOrder[266683](266681 call _indexOfInterest[266649] 1))
        {
          const start[266613] "const"(266612 call(266607 call . r[266574] c"orderToIndex") startOrder[266676])
          (266616 'end of statement')
          const end[266625] "const"(266624 call(266619 call . r[266574] c"orderToIndex") endOrder[266683])
          (266628 'end of statement')
          (266647 yield(266644 IfExpr  S[266571] then
          { scopeless
            (266638 call chpl_by(266632 call chpl_build_bounded_range start[266613] end[266625])(266635 call . r[266574] c"stride"))
          } else
          { scopeless
            (266642 call chpl_build_bounded_range start[266613] end[266625])
          } ))
        }
        label _continueLabel[266654]
        _indexOfInterest[266649]
        _iterator[266650]
      }
      label _breakLabel[266655]
    }
  }
  { scopeless type
    (266594 call range[64319](?) RT[266567] bounded[64208] S[266571])
  }
  function chunk[266714](arg r[266711] :
  (266710 call range[64319](?) unknown RT[266704] bounded[64208] unknown S[266708]), arg numChunks[266717] :
  integral[199](?), arg idx[266721] :
  integral[199](?), arg remPol[266726] :
  RemElems[266554] =
  Thru[266548]) : _unknown[51]
  {
    const tmp[266748] "const" "temp"(266747 call chunkOrder r[266711] numChunks[266717] idx[266721] remPol[266726])
    (266755 call _check_tuple_var_decl tmp[266748] 2)
    const startOrder[266736] "const"(266749 call tmp[266748] 0)
    const endOrder[266738] "const"(266752 call tmp[266748] 1)
    (266760 'end of statement')
    const start[266769] "const"(266768 call(266763 call . r[266711] c"orderToIndex") startOrder[266736])
    (266772 'end of statement')
    const end[266780] "const"(266779 call(266774 call . r[266711] c"orderToIndex") endOrder[266738])
    (266783 'end of statement')
    (266802 return(266799 IfExpr  S[266708] then
    { scopeless
      (266793 call chpl_by(266787 call chpl_build_bounded_range start[266769] end[266780])(266790 call . r[266711] c"stride"))
    } else
    { scopeless
      (266797 call chpl_build_bounded_range start[266769] end[266780])
    } ))
  }
  { scopeless type
    (266735 call range[64319](?) RT[266704] bounded[64208] S[266708])
  }
  function blockCyclicChunks[266824](arg r[266821] :
  (266820 call range[64319](?) unknown t[266810](boundedType = bounded[64208]) unknown strided[266818]), arg blockSize[266827] :
  integral[199](?), arg tid[266831] :
  integral[199](?), arg nTasks[266835] :
  integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(266882 call _cond_test(266840 call >= tid[266831] nTasks[266835]))
    {
      (266880 call halt(266877 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
    }
    if(266913 call _cond_test(266890 call <= blockSize[266827] 0))
    {
      (266911 call halt "blockSize must a positive number")
    }
    if(266943 call _cond_test(266920 call <= nTasks[266835] 0))
    {
      (266941 call halt "nTasks must be a positive number")
    }
    unknown rangeStride[266952](266949 call . r[266821] c"stride")
    (266955 'end of statement')
    unknown blockStride[266960](266958 call * blockSize[266827] rangeStride[266952])
    (266963 'end of statement')
    unknown low[266968](266965 call . r[266821] c"low")
    (266971 'end of statement')
    unknown high[266976](266973 call . r[266821] c"high")
    (266979 'end of statement')
    unknown firstBlockStart[267001](266999 call +(266992 IfExpr (266982 call > rangeStride[266952] 0) then
    { scopeless
      (266985 call . r[266821] c"low")
    } else
    { scopeless
      (266989 call . r[266821] c"high")
    } )(266997 call * blockStride[266960] tid[266831]))
    (267004 'end of statement')
    if(267023 call _cond_test(267019 call ||(267010 call > firstBlockStart[267001](267007 call . r[266821] c"high"))(267017 call < firstBlockStart[267001](267014 call . r[266821] c"low"))))
    {
      (267021 return _void[55])
    }
    unknown strideToNextBlock[267032](267030 call * blockStride[266960] nTasks[266835])
    (267035 'end of statement')
    if(267192 call _cond_test(267038 call > rangeStride[266952] 0))
    {
      {
        unknown _indexOfInterest[267073] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267074] "expr temp" "temp"
        (267083 'move' _iterator[267074](267081 call _getIterator(267092 call chpl_direct_range_iter firstBlockStart[267001] high[266976] strideToNextBlock[267032])))
        Defer
        {
          {
            (267108 call _freeIterator _iterator[267074])
          }
        }
        { scopeless type
          (267097 'move' _indexOfInterest[267073](267094 call iteratorIndex _iterator[267074]))
        }
        ForLoop[267075]
        {
          unknown blockStart[267101] "index var" "insert auto destroy"
          (267103 'move' blockStart[267101] _indexOfInterest[267073])
          {
            unknown blockEnd[267059](267058 call min high[266976](267056 call -(267053 call + blockStart[267101] blockStride[266960]) 1))
            (267062 'end of statement')
            (267071 yield(267069 call chpl_by(267066 call chpl_build_bounded_range blockStart[267101] blockEnd[267059]) rangeStride[266952]))
          }
          label _continueLabel[267078]
          _indexOfInterest[267073]
          _iterator[267074]
        }
        label _breakLabel[267079]
      }
    }
    {
      {
        unknown _indexOfInterest[267149] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267150] "expr temp" "temp"
        (267159 'move' _iterator[267150](267157 call _getIterator(267168 call chpl_direct_range_iter low[266968] firstBlockStart[267001] strideToNextBlock[267032])))
        Defer
        {
          {
            (267184 call _freeIterator _iterator[267150])
          }
        }
        { scopeless type
          (267173 'move' _indexOfInterest[267149](267170 call iteratorIndex _iterator[267150]))
        }
        ForLoop[267151]
        {
          unknown blockEnd[267177] "index var" "insert auto destroy"
          (267179 'move' blockEnd[267177] _indexOfInterest[267149])
          {
            unknown blockStart[267135](267134 call max low[266968](267132 call +(267129 call + blockEnd[267177] blockStride[266960]) 1))
            (267138 'end of statement')
            (267147 yield(267145 call chpl_by(267142 call chpl_build_bounded_range blockStart[267135] blockEnd[267177]) rangeStride[266952]))
          }
          label _continueLabel[267154]
          _indexOfInterest[267149]
          _iterator[267150]
        }
        label _breakLabel[267155]
      }
    }
  }
  function chunksOrder[267210](arg r[267207] :
  (267206 call range[64319](?) unknown RT[267201] bounded[64208] ?[260]), arg numChunks[267213] :
  integral[199](?), arg remPol[267218] :
  RemElems[266554] =
  Thru[266548]) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(267241 call _cond_test(267237 call ||(267231 call ==(267227 call . r[267207] c"size") 0)(267235 call <= numChunks[267213] 0)))
    {
      (267239 return _void[55])
    }
    const nElems[267251] "const"(267248 call . r[267207] c"size")
    (267254 'end of statement')
    unknown nChunks[267263](267261 call _cast RT[267201](267259 call min numChunks[267213] nElems[267251]))
    (267266 'end of statement')
    unknown chunkSize[267267] RT[267201]
    unknown rem[267271](267275 'typeof' chunkSize[267267])
    (267276 'end of statement')
    {
      unknown tmp[267343] "expr temp" "maybe param" "maybe type" "temp"
      (267345 'move' tmp[267343] remPol[267218])
      if(267350 call _cond_test(267347 call == tmp[267343] Pack[266550]))
      {
        (267286 call = chunkSize[267267](267284 call / nElems[267251] nChunks[267263]))
        if(267312 call _cond_test(267295 call !=(267292 call * chunkSize[267267] nChunks[267263]) nElems[267251]))
        {
          (267299 call += chunkSize[267267] 1)
          (267309 call = nChunks[267263](267308 call divceil nElems[267251] chunkSize[267267]))
        }
      }
      {
        if(267356 call _cond_test(267353 call == tmp[267343] Mod[266552]))
        {
          (267325 call = chunkSize[267267](267323 call / nElems[267251] nChunks[267263]))
          (267337 call = rem[267271](267335 call - nElems[267251](267333 call * chunkSize[267267] nChunks[267263])))
        }
      }
    }
    {
      unknown _indexOfInterest[267479] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267480] "expr temp" "temp"
      (267489 'move' _iterator[267480](267487 call _getIterator(267496 call chpl_direct_counted_range_iter 0 nChunks[267263])))
      Defer
      {
        {
          (267512 call _freeIterator _iterator[267480])
        }
      }
      { scopeless type
        (267501 'move' _indexOfInterest[267479](267498 call iteratorIndex _iterator[267480]))
      }
      ForLoop[267481]
      {
        unknown i[267505] "index var" "insert auto destroy"
        (267507 'move' i[267505] _indexOfInterest[267479])
        {
          unknown chunk[267372](267370 call * 2 RT[267201])
          (267375 'end of statement')
          {
            unknown tmp[267451] "expr temp" "maybe param" "maybe type" "temp"
            (267453 'move' tmp[267451] remPol[267218])
            if(267458 call _cond_test(267455 call == tmp[267451] Thru[266548]))
            {
              (267388 call = chunk[267372](267387 call chunkOrderThru nElems[267251] nChunks[267263] i[267505]))
            }
            {
              if(267464 call _cond_test(267461 call == tmp[267451] Pack[266550]))
              {
                (267403 call = chunk[267372](267402 call chunkOrderPack chunkSize[267267] nElems[267251] i[267505]))
              }
              {
                if(267471 call _cond_test(267468 call == tmp[267451] Mod[266552]))
                {
                  (267420 call = chunk[267372](267419 call chunkOrderMod chunkSize[267267] rem[267271] nElems[267251] nChunks[267263] i[267505]))
                }
                {
                  (267445 call halt "RangeChunk: unknown RemElems in chunksOrder")
                }
              }
            }
          }
          (267477 yield chunk[267372])
        }
        label _continueLabel[267484]
        _indexOfInterest[267479]
        _iterator[267480]
      }
      label _breakLabel[267485]
    }
  }
  { scopeless type
    (267224 call * 2 RT[267201])
  }
  function chunkOrder[267534](arg r[267531] :
  (267530 call range[64319](?) unknown RT[267525] bounded[64208] ?[260]), arg numChunks[267537] :
  integral[199](?), arg idx[267541] :
  integral[199](?), arg remPol[267546] :
  RemElems[266554] =
  Thru[266548]) : _unknown[51]
  {
    if(267592 call _cond_test(267577 call ||(267571 call ||(267565 call ||(267559 call ==(267555 call . r[267531] c"size") 0)(267563 call <= numChunks[267537] 0))(267569 call < idx[267541] 0))(267575 call >= idx[267541] numChunks[267537])))
    {
      (267590 return(267588 call _build_tuple(267581 call _cast RT[267525] 1)(267585 call _cast RT[267525] 0)))
    }
    const nElems[267602] "const"(267599 call . r[267531] c"size")
    (267605 'end of statement')
    const nChunks[267614] "const"(267612 call _cast RT[267525](267610 call min numChunks[267537] nElems[267602]))
    (267617 'end of statement')
    const i[267622] "const"(267620 call _cast RT[267525] idx[267541])
    (267625 'end of statement')
    {
      unknown tmp[267738] "expr temp" "maybe param" "maybe type" "temp"
      (267740 'move' tmp[267738] remPol[267546])
      if(267745 call _cond_test(267742 call == tmp[267738] Thru[266548]))
      {
        (267636 return(267635 call chunkOrderThru nElems[267602] nChunks[267614] i[267622]))
      }
      {
        if(267751 call _cond_test(267748 call == tmp[267738] Pack[266550]))
        {
          unknown chunkSize[267647](267645 call / nElems[267602] nChunks[267614])
          (267650 'end of statement')
          if(267664 call _cond_test(267657 call !=(267654 call * chunkSize[267647] nChunks[267614]) nElems[267602]))
          {
            (267661 call += chunkSize[267647] 1)
          }
          (267675 return(267674 call chunkOrderPack chunkSize[267647] nElems[267602] i[267622]))
        }
        {
          if(267758 call _cond_test(267755 call == tmp[267738] Mod[266552]))
          {
            const chunkSize[267685] "const"(267683 call / nElems[267602] nChunks[267614])
            (267688 'end of statement')
            const rem[267697] "const"(267695 call - nElems[267602](267693 call * chunkSize[267685] nChunks[267614]))
            (267700 'end of statement')
            (267709 return(267708 call chunkOrderMod chunkSize[267685] rem[267697] nElems[267602] nChunks[267614] i[267622]))
          }
          {
            (267732 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267552 call * 2 RT[267525])
  }
  function chunkOrderThru[267773](arg nElems[267770] :
  unknown I[267768], arg nChunks[267776] :
  I[267768], arg i[267780] :
  I[267768]) : _unknown[51] "no doc" "private"
  {
    const m[267792] "const"(267790 call * nElems[267770] i[267780])
    (267795 'end of statement')
    const start[267813] "const"(267810 IfExpr (267799 call == i[267780] 0) then
    { scopeless
      (267803 call _cast I[267768] 0)
    } else
    { scopeless
      (267809 call divceil m[267792] nChunks[267776])
    } )
    (267816 'end of statement')
    const end[267842] "const"(267839 IfExpr (267822 call == i[267780](267820 call - nChunks[267776] 1)) then
    { scopeless
      (267826 call - nElems[267770] 1)
    } else
    { scopeless
      (267837 call -(267835 call divceil(267831 call + m[267792] nElems[267770]) nChunks[267776]) 1)
    } )
    (267845 'end of statement')
    (267851 return(267849 call _build_tuple start[267813] end[267842]))
  }
  { scopeless type
    (267786 call _build_tuple I[267768] I[267768])
  }
  function chunkOrderPack[267863](arg chunkSize[267860] :
  unknown I[267858], arg nElems[267866] :
  I[267858], arg i[267870] :
  I[267858]) : _unknown[51] "no doc" "private"
  {
    const start[267882] "const"(267880 call * chunkSize[267860] i[267870])
    (267885 'end of statement')
    if(267904 call _cond_test(267889 call >= start[267882] nElems[267866]))
    {
      (267902 return(267900 call _build_tuple(267893 call _cast I[267858] 1)(267897 call _cast I[267858] 0)))
    }
    unknown end[267916](267914 call -(267911 call + start[267882] chunkSize[267860]) 1)
    (267919 'end of statement')
    if(267932 call _cond_test(267922 call >= end[267916] nElems[267866]))
    {
      (267929 call = end[267916](267927 call - nElems[267866] 1))
    }
    (267942 return(267940 call _build_tuple start[267882] end[267916]))
  }
  { scopeless type
    (267876 call _build_tuple I[267858] I[267858])
  }
  function chunkOrderMod[267954](arg chunkSize[267951] :
  unknown I[267949], arg rem[267957] :
  I[267949], arg nElems[267961] :
  I[267949], arg nChunks[267965] :
  I[267949], arg i[267969] :
  I[267949]) : _unknown[51] "no doc" "private"
  {
    unknown start[267977] I[267949]
    unknown end[267981](267985 'typeof' start[267977])
    (267986 'end of statement')
    if(268038 call _cond_test(267990 call < i[267969] rem[267957]))
    {
      (268000 call = start[267977](267998 call * i[267969](267996 call + chunkSize[267951] 1)))
      (268009 call = end[267981](268007 call + start[267977] chunkSize[267951]))
    }
    {
      (268023 call = start[267977](268021 call - nElems[267961](268019 call *(268016 call - nChunks[267965] i[267969]) chunkSize[267951])))
      (268035 call = end[267981](268033 call -(268030 call + start[267977] chunkSize[267951]) 1))
    }
    (268047 return(268045 call _build_tuple start[267977] end[267981]))
  }
  { scopeless type
    (267975 call _build_tuple I[267949] I[267949])
  }
  (355435 'used modules list'(353125 'use' ChapelStandard[20267])(266559 'use' RemElems[266554])(266562 'use' BoundedRangeType[64216]))
}