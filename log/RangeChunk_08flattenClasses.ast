AST dump for RangeChunk after pass flattenClasses.
Module use list: ChapelStandard 

{
  type RemElems[266378] def Thru[266372]:RemElems[266378] def Pack[266374]:RemElems[266378] def Mod[266376]:RemElems[266378]
  function chunks[266401](arg r[266398] :
  (266397 call range[64316](?) unknown RT[266391] bounded[64205] unknown S[266395]), arg numChunks[266404] :
  integral[199](?), arg remPol[266409] :
  RemElems[266378] =
  Thru[266372]) : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[266473] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266474] "expr temp" "temp"
      (266483 'move' _iterator[266474](266481 call _getIterator(266429 call chunksOrder r[266398] numChunks[266404] remPol[266409])))
      Defer
      {
        {
          (266514 call _freeIterator _iterator[266474])
        }
      }
      { scopeless type
        (266489 'move' _indexOfInterest[266473](266486 call iteratorIndex _iterator[266474]))
      }
      ForLoop[266475]
      {
        (266494 call _check_tuple_var_decl _indexOfInterest[266473] 2)
        unknown startOrder[266500] "index var" "insert auto destroy"
        (266502 'move' startOrder[266500](266498 call _indexOfInterest[266473] 0))
        unknown endOrder[266507] "index var" "insert auto destroy"
        (266509 'move' endOrder[266507](266505 call _indexOfInterest[266473] 1))
        {
          const start[266437] "const"(266436 call(266431 call . r[266398] c"orderToIndex") startOrder[266500])
          (266440 'end of statement')
          const end[266449] "const"(266448 call(266443 call . r[266398] c"orderToIndex") endOrder[266507])
          (266452 'end of statement')
          (266471 yield(266468 IfExpr  S[266395] then
          { scopeless
            (266462 call chpl_by(266456 call chpl_build_bounded_range start[266437] end[266449])(266459 call . r[266398] c"stride"))
          } else
          { scopeless
            (266466 call chpl_build_bounded_range start[266437] end[266449])
          } ))
        }
        label _continueLabel[266478]
        _indexOfInterest[266473]
        _iterator[266474]
      }
      label _breakLabel[266479]
    }
  }
  { scopeless type
    (266418 call range[64316](?) RT[266391] bounded[64205] S[266395])
  }
  function chunk[266538](arg r[266535] :
  (266534 call range[64316](?) unknown RT[266528] bounded[64205] unknown S[266532]), arg numChunks[266541] :
  integral[199](?), arg idx[266545] :
  integral[199](?), arg remPol[266550] :
  RemElems[266378] =
  Thru[266372]) : _unknown[51]
  {
    const tmp[266572] "const" "temp"(266571 call chunkOrder r[266535] numChunks[266541] idx[266545] remPol[266550])
    (266579 call _check_tuple_var_decl tmp[266572] 2)
    const startOrder[266560] "const"(266573 call tmp[266572] 0)
    const endOrder[266562] "const"(266576 call tmp[266572] 1)
    (266584 'end of statement')
    const start[266593] "const"(266592 call(266587 call . r[266535] c"orderToIndex") startOrder[266560])
    (266596 'end of statement')
    const end[266604] "const"(266603 call(266598 call . r[266535] c"orderToIndex") endOrder[266562])
    (266607 'end of statement')
    (266626 return(266623 IfExpr  S[266532] then
    { scopeless
      (266617 call chpl_by(266611 call chpl_build_bounded_range start[266593] end[266604])(266614 call . r[266535] c"stride"))
    } else
    { scopeless
      (266621 call chpl_build_bounded_range start[266593] end[266604])
    } ))
  }
  { scopeless type
    (266559 call range[64316](?) RT[266528] bounded[64205] S[266532])
  }
  function blockCyclicChunks[266648](arg r[266645] :
  (266644 call range[64316](?) unknown t[266634](boundedType = bounded[64205]) unknown strided[266642]), arg blockSize[266651] :
  integral[199](?), arg tid[266655] :
  integral[199](?), arg nTasks[266659] :
  integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(266706 call _cond_test(266664 call >= tid[266655] nTasks[266659]))
    {
      (266704 call halt(266701 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
    }
    if(266737 call _cond_test(266714 call <= blockSize[266651] 0))
    {
      (266735 call halt "blockSize must a positive number")
    }
    if(266767 call _cond_test(266744 call <= nTasks[266659] 0))
    {
      (266765 call halt "nTasks must be a positive number")
    }
    unknown rangeStride[266776](266773 call . r[266645] c"stride")
    (266779 'end of statement')
    unknown blockStride[266784](266782 call * blockSize[266651] rangeStride[266776])
    (266787 'end of statement')
    unknown low[266792](266789 call . r[266645] c"low")
    (266795 'end of statement')
    unknown high[266800](266797 call . r[266645] c"high")
    (266803 'end of statement')
    unknown firstBlockStart[266825](266823 call +(266816 IfExpr (266806 call > rangeStride[266776] 0) then
    { scopeless
      (266809 call . r[266645] c"low")
    } else
    { scopeless
      (266813 call . r[266645] c"high")
    } )(266821 call * blockStride[266784] tid[266655]))
    (266828 'end of statement')
    if(266847 call _cond_test(266843 call ||(266834 call > firstBlockStart[266825](266831 call . r[266645] c"high"))(266841 call < firstBlockStart[266825](266838 call . r[266645] c"low"))))
    {
      (266845 return _void[55])
    }
    unknown strideToNextBlock[266856](266854 call * blockStride[266784] nTasks[266659])
    (266859 'end of statement')
    if(267016 call _cond_test(266862 call > rangeStride[266776] 0))
    {
      {
        unknown _indexOfInterest[266897] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[266898] "expr temp" "temp"
        (266907 'move' _iterator[266898](266905 call _getIterator(266916 call chpl_direct_range_iter firstBlockStart[266825] high[266800] strideToNextBlock[266856])))
        Defer
        {
          {
            (266932 call _freeIterator _iterator[266898])
          }
        }
        { scopeless type
          (266921 'move' _indexOfInterest[266897](266918 call iteratorIndex _iterator[266898]))
        }
        ForLoop[266899]
        {
          unknown blockStart[266925] "index var" "insert auto destroy"
          (266927 'move' blockStart[266925] _indexOfInterest[266897])
          {
            unknown blockEnd[266883](266882 call min high[266800](266880 call -(266877 call + blockStart[266925] blockStride[266784]) 1))
            (266886 'end of statement')
            (266895 yield(266893 call chpl_by(266890 call chpl_build_bounded_range blockStart[266925] blockEnd[266883]) rangeStride[266776]))
          }
          label _continueLabel[266902]
          _indexOfInterest[266897]
          _iterator[266898]
        }
        label _breakLabel[266903]
      }
    }
    {
      {
        unknown _indexOfInterest[266973] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[266974] "expr temp" "temp"
        (266983 'move' _iterator[266974](266981 call _getIterator(266992 call chpl_direct_range_iter low[266792] firstBlockStart[266825] strideToNextBlock[266856])))
        Defer
        {
          {
            (267008 call _freeIterator _iterator[266974])
          }
        }
        { scopeless type
          (266997 'move' _indexOfInterest[266973](266994 call iteratorIndex _iterator[266974]))
        }
        ForLoop[266975]
        {
          unknown blockEnd[267001] "index var" "insert auto destroy"
          (267003 'move' blockEnd[267001] _indexOfInterest[266973])
          {
            unknown blockStart[266959](266958 call max low[266792](266956 call +(266953 call + blockEnd[267001] blockStride[266784]) 1))
            (266962 'end of statement')
            (266971 yield(266969 call chpl_by(266966 call chpl_build_bounded_range blockStart[266959] blockEnd[267001]) rangeStride[266776]))
          }
          label _continueLabel[266978]
          _indexOfInterest[266973]
          _iterator[266974]
        }
        label _breakLabel[266979]
      }
    }
  }
  function chunksOrder[267034](arg r[267031] :
  (267030 call range[64316](?) unknown RT[267025] bounded[64205] ?[260]), arg numChunks[267037] :
  integral[199](?), arg remPol[267042] :
  RemElems[266378] =
  Thru[266372]) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(267065 call _cond_test(267061 call ||(267055 call ==(267051 call . r[267031] c"size") 0)(267059 call <= numChunks[267037] 0)))
    {
      (267063 return _void[55])
    }
    const nElems[267075] "const"(267072 call . r[267031] c"size")
    (267078 'end of statement')
    unknown nChunks[267087](267085 call _cast RT[267025](267083 call min numChunks[267037] nElems[267075]))
    (267090 'end of statement')
    unknown chunkSize[267091] RT[267025]
    unknown rem[267095](267099 'typeof' chunkSize[267091])
    (267100 'end of statement')
    {
      unknown tmp[267167] "expr temp" "maybe param" "maybe type" "temp"
      (267169 'move' tmp[267167] remPol[267042])
      if(267174 call _cond_test(267171 call == tmp[267167] Pack[266374]))
      {
        (267110 call = chunkSize[267091](267108 call / nElems[267075] nChunks[267087]))
        if(267136 call _cond_test(267119 call !=(267116 call * chunkSize[267091] nChunks[267087]) nElems[267075]))
        {
          (267123 call += chunkSize[267091] 1)
          (267133 call = nChunks[267087](267132 call divceil nElems[267075] chunkSize[267091]))
        }
      }
      {
        if(267180 call _cond_test(267177 call == tmp[267167] Mod[266376]))
        {
          (267149 call = chunkSize[267091](267147 call / nElems[267075] nChunks[267087]))
          (267161 call = rem[267095](267159 call - nElems[267075](267157 call * chunkSize[267091] nChunks[267087])))
        }
      }
    }
    {
      unknown _indexOfInterest[267303] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267304] "expr temp" "temp"
      (267313 'move' _iterator[267304](267311 call _getIterator(267320 call chpl_direct_counted_range_iter 0 nChunks[267087])))
      Defer
      {
        {
          (267336 call _freeIterator _iterator[267304])
        }
      }
      { scopeless type
        (267325 'move' _indexOfInterest[267303](267322 call iteratorIndex _iterator[267304]))
      }
      ForLoop[267305]
      {
        unknown i[267329] "index var" "insert auto destroy"
        (267331 'move' i[267329] _indexOfInterest[267303])
        {
          unknown chunk[267196](267194 call * 2 RT[267025])
          (267199 'end of statement')
          {
            unknown tmp[267275] "expr temp" "maybe param" "maybe type" "temp"
            (267277 'move' tmp[267275] remPol[267042])
            if(267282 call _cond_test(267279 call == tmp[267275] Thru[266372]))
            {
              (267212 call = chunk[267196](267211 call chunkOrderThru nElems[267075] nChunks[267087] i[267329]))
            }
            {
              if(267288 call _cond_test(267285 call == tmp[267275] Pack[266374]))
              {
                (267227 call = chunk[267196](267226 call chunkOrderPack chunkSize[267091] nElems[267075] i[267329]))
              }
              {
                if(267295 call _cond_test(267292 call == tmp[267275] Mod[266376]))
                {
                  (267244 call = chunk[267196](267243 call chunkOrderMod chunkSize[267091] rem[267095] nElems[267075] nChunks[267087] i[267329]))
                }
                {
                  (267269 call halt "RangeChunk: unknown RemElems in chunksOrder")
                }
              }
            }
          }
          (267301 yield chunk[267196])
        }
        label _continueLabel[267308]
        _indexOfInterest[267303]
        _iterator[267304]
      }
      label _breakLabel[267309]
    }
  }
  { scopeless type
    (267048 call * 2 RT[267025])
  }
  function chunkOrder[267358](arg r[267355] :
  (267354 call range[64316](?) unknown RT[267349] bounded[64205] ?[260]), arg numChunks[267361] :
  integral[199](?), arg idx[267365] :
  integral[199](?), arg remPol[267370] :
  RemElems[266378] =
  Thru[266372]) : _unknown[51]
  {
    if(267416 call _cond_test(267401 call ||(267395 call ||(267389 call ||(267383 call ==(267379 call . r[267355] c"size") 0)(267387 call <= numChunks[267361] 0))(267393 call < idx[267365] 0))(267399 call >= idx[267365] numChunks[267361])))
    {
      (267414 return(267412 call _build_tuple(267405 call _cast RT[267349] 1)(267409 call _cast RT[267349] 0)))
    }
    const nElems[267426] "const"(267423 call . r[267355] c"size")
    (267429 'end of statement')
    const nChunks[267438] "const"(267436 call _cast RT[267349](267434 call min numChunks[267361] nElems[267426]))
    (267441 'end of statement')
    const i[267446] "const"(267444 call _cast RT[267349] idx[267365])
    (267449 'end of statement')
    {
      unknown tmp[267562] "expr temp" "maybe param" "maybe type" "temp"
      (267564 'move' tmp[267562] remPol[267370])
      if(267569 call _cond_test(267566 call == tmp[267562] Thru[266372]))
      {
        (267460 return(267459 call chunkOrderThru nElems[267426] nChunks[267438] i[267446]))
      }
      {
        if(267575 call _cond_test(267572 call == tmp[267562] Pack[266374]))
        {
          unknown chunkSize[267471](267469 call / nElems[267426] nChunks[267438])
          (267474 'end of statement')
          if(267488 call _cond_test(267481 call !=(267478 call * chunkSize[267471] nChunks[267438]) nElems[267426]))
          {
            (267485 call += chunkSize[267471] 1)
          }
          (267499 return(267498 call chunkOrderPack chunkSize[267471] nElems[267426] i[267446]))
        }
        {
          if(267582 call _cond_test(267579 call == tmp[267562] Mod[266376]))
          {
            const chunkSize[267509] "const"(267507 call / nElems[267426] nChunks[267438])
            (267512 'end of statement')
            const rem[267521] "const"(267519 call - nElems[267426](267517 call * chunkSize[267509] nChunks[267438]))
            (267524 'end of statement')
            (267533 return(267532 call chunkOrderMod chunkSize[267509] rem[267521] nElems[267426] nChunks[267438] i[267446]))
          }
          {
            (267556 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267376 call * 2 RT[267349])
  }
  function chunkOrderThru[267597](arg nElems[267594] :
  unknown I[267592], arg nChunks[267600] :
  I[267592], arg i[267604] :
  I[267592]) : _unknown[51] "no doc" "private"
  {
    const m[267616] "const"(267614 call * nElems[267594] i[267604])
    (267619 'end of statement')
    const start[267637] "const"(267634 IfExpr (267623 call == i[267604] 0) then
    { scopeless
      (267627 call _cast I[267592] 0)
    } else
    { scopeless
      (267633 call divceil m[267616] nChunks[267600])
    } )
    (267640 'end of statement')
    const end[267666] "const"(267663 IfExpr (267646 call == i[267604](267644 call - nChunks[267600] 1)) then
    { scopeless
      (267650 call - nElems[267594] 1)
    } else
    { scopeless
      (267661 call -(267659 call divceil(267655 call + m[267616] nElems[267594]) nChunks[267600]) 1)
    } )
    (267669 'end of statement')
    (267675 return(267673 call _build_tuple start[267637] end[267666]))
  }
  { scopeless type
    (267610 call _build_tuple I[267592] I[267592])
  }
  function chunkOrderPack[267687](arg chunkSize[267684] :
  unknown I[267682], arg nElems[267690] :
  I[267682], arg i[267694] :
  I[267682]) : _unknown[51] "no doc" "private"
  {
    const start[267706] "const"(267704 call * chunkSize[267684] i[267694])
    (267709 'end of statement')
    if(267728 call _cond_test(267713 call >= start[267706] nElems[267690]))
    {
      (267726 return(267724 call _build_tuple(267717 call _cast I[267682] 1)(267721 call _cast I[267682] 0)))
    }
    unknown end[267740](267738 call -(267735 call + start[267706] chunkSize[267684]) 1)
    (267743 'end of statement')
    if(267756 call _cond_test(267746 call >= end[267740] nElems[267690]))
    {
      (267753 call = end[267740](267751 call - nElems[267690] 1))
    }
    (267766 return(267764 call _build_tuple start[267706] end[267740]))
  }
  { scopeless type
    (267700 call _build_tuple I[267682] I[267682])
  }
  function chunkOrderMod[267778](arg chunkSize[267775] :
  unknown I[267773], arg rem[267781] :
  I[267773], arg nElems[267785] :
  I[267773], arg nChunks[267789] :
  I[267773], arg i[267793] :
  I[267773]) : _unknown[51] "no doc" "private"
  {
    unknown start[267801] I[267773]
    unknown end[267805](267809 'typeof' start[267801])
    (267810 'end of statement')
    if(267862 call _cond_test(267814 call < i[267793] rem[267781]))
    {
      (267824 call = start[267801](267822 call * i[267793](267820 call + chunkSize[267775] 1)))
      (267833 call = end[267805](267831 call + start[267801] chunkSize[267775]))
    }
    {
      (267847 call = start[267801](267845 call - nElems[267785](267843 call *(267840 call - nChunks[267789] i[267793]) chunkSize[267775])))
      (267859 call = end[267805](267857 call -(267854 call + start[267801] chunkSize[267775]) 1))
    }
    (267871 return(267869 call _build_tuple start[267801] end[267805]))
  }
  { scopeless type
    (267799 call _build_tuple I[267773] I[267773])
  }
  (355236 'used modules list'(352928 'use' ChapelStandard[20264])(266383 'use' RemElems[266378])(266386 'use' BoundedRangeType[64213]))
}