AST dump for RangeChunk after pass flattenClasses.
Module use list: ChapelStandard 

{
  type RemElems[266485] def Thru[266479]:RemElems[266485] def Pack[266481]:RemElems[266485] def Mod[266483]:RemElems[266485]
  function chunks[266508](arg r[266505] :
  (266504 call range[64319](?) unknown RT[266498] bounded[64208] unknown S[266502]), arg numChunks[266511] :
  integral[199](?), arg remPol[266516] :
  RemElems[266485] =
  Thru[266479]) : _unknown[51] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[266580] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266581] "expr temp" "temp"
      (266590 'move' _iterator[266581](266588 call _getIterator(266536 call chunksOrder r[266505] numChunks[266511] remPol[266516])))
      Defer
      {
        {
          (266621 call _freeIterator _iterator[266581])
        }
      }
      { scopeless type
        (266596 'move' _indexOfInterest[266580](266593 call iteratorIndex _iterator[266581]))
      }
      ForLoop[266582]
      {
        (266601 call _check_tuple_var_decl _indexOfInterest[266580] 2)
        unknown startOrder[266607] "index var" "insert auto destroy"
        (266609 'move' startOrder[266607](266605 call _indexOfInterest[266580] 0))
        unknown endOrder[266614] "index var" "insert auto destroy"
        (266616 'move' endOrder[266614](266612 call _indexOfInterest[266580] 1))
        {
          const start[266544] "const"(266543 call(266538 call . r[266505] c"orderToIndex") startOrder[266607])
          (266547 'end of statement')
          const end[266556] "const"(266555 call(266550 call . r[266505] c"orderToIndex") endOrder[266614])
          (266559 'end of statement')
          (266578 yield(266575 IfExpr  S[266502] then
          { scopeless
            (266569 call chpl_by(266563 call chpl_build_bounded_range start[266544] end[266556])(266566 call . r[266505] c"stride"))
          } else
          { scopeless
            (266573 call chpl_build_bounded_range start[266544] end[266556])
          } ))
        }
        label _continueLabel[266585]
        _indexOfInterest[266580]
        _iterator[266581]
      }
      label _breakLabel[266586]
    }
  }
  { scopeless type
    (266525 call range[64319](?) RT[266498] bounded[64208] S[266502])
  }
  function chunk[266645](arg r[266642] :
  (266641 call range[64319](?) unknown RT[266635] bounded[64208] unknown S[266639]), arg numChunks[266648] :
  integral[199](?), arg idx[266652] :
  integral[199](?), arg remPol[266657] :
  RemElems[266485] =
  Thru[266479]) : _unknown[51]
  {
    const tmp[266679] "const" "temp"(266678 call chunkOrder r[266642] numChunks[266648] idx[266652] remPol[266657])
    (266686 call _check_tuple_var_decl tmp[266679] 2)
    const startOrder[266667] "const"(266680 call tmp[266679] 0)
    const endOrder[266669] "const"(266683 call tmp[266679] 1)
    (266691 'end of statement')
    const start[266700] "const"(266699 call(266694 call . r[266642] c"orderToIndex") startOrder[266667])
    (266703 'end of statement')
    const end[266711] "const"(266710 call(266705 call . r[266642] c"orderToIndex") endOrder[266669])
    (266714 'end of statement')
    (266733 return(266730 IfExpr  S[266639] then
    { scopeless
      (266724 call chpl_by(266718 call chpl_build_bounded_range start[266700] end[266711])(266721 call . r[266642] c"stride"))
    } else
    { scopeless
      (266728 call chpl_build_bounded_range start[266700] end[266711])
    } ))
  }
  { scopeless type
    (266666 call range[64319](?) RT[266635] bounded[64208] S[266639])
  }
  function blockCyclicChunks[266755](arg r[266752] :
  (266751 call range[64319](?) unknown t[266741](boundedType = bounded[64208]) unknown strided[266749]), arg blockSize[266758] :
  integral[199](?), arg tid[266762] :
  integral[199](?), arg nTasks[266766] :
  integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(266813 call _cond_test(266771 call >= tid[266762] nTasks[266766]))
    {
      (266811 call halt(266808 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
    }
    if(266844 call _cond_test(266821 call <= blockSize[266758] 0))
    {
      (266842 call halt "blockSize must a positive number")
    }
    if(266874 call _cond_test(266851 call <= nTasks[266766] 0))
    {
      (266872 call halt "nTasks must be a positive number")
    }
    unknown rangeStride[266883](266880 call . r[266752] c"stride")
    (266886 'end of statement')
    unknown blockStride[266891](266889 call * blockSize[266758] rangeStride[266883])
    (266894 'end of statement')
    unknown low[266899](266896 call . r[266752] c"low")
    (266902 'end of statement')
    unknown high[266907](266904 call . r[266752] c"high")
    (266910 'end of statement')
    unknown firstBlockStart[266932](266930 call +(266923 IfExpr (266913 call > rangeStride[266883] 0) then
    { scopeless
      (266916 call . r[266752] c"low")
    } else
    { scopeless
      (266920 call . r[266752] c"high")
    } )(266928 call * blockStride[266891] tid[266762]))
    (266935 'end of statement')
    if(266954 call _cond_test(266950 call ||(266941 call > firstBlockStart[266932](266938 call . r[266752] c"high"))(266948 call < firstBlockStart[266932](266945 call . r[266752] c"low"))))
    {
      (266952 return _void[55])
    }
    unknown strideToNextBlock[266963](266961 call * blockStride[266891] nTasks[266766])
    (266966 'end of statement')
    if(267123 call _cond_test(266969 call > rangeStride[266883] 0))
    {
      {
        unknown _indexOfInterest[267004] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267005] "expr temp" "temp"
        (267014 'move' _iterator[267005](267012 call _getIterator(267023 call chpl_direct_range_iter firstBlockStart[266932] high[266907] strideToNextBlock[266963])))
        Defer
        {
          {
            (267039 call _freeIterator _iterator[267005])
          }
        }
        { scopeless type
          (267028 'move' _indexOfInterest[267004](267025 call iteratorIndex _iterator[267005]))
        }
        ForLoop[267006]
        {
          unknown blockStart[267032] "index var" "insert auto destroy"
          (267034 'move' blockStart[267032] _indexOfInterest[267004])
          {
            unknown blockEnd[266990](266989 call min high[266907](266987 call -(266984 call + blockStart[267032] blockStride[266891]) 1))
            (266993 'end of statement')
            (267002 yield(267000 call chpl_by(266997 call chpl_build_bounded_range blockStart[267032] blockEnd[266990]) rangeStride[266883]))
          }
          label _continueLabel[267009]
          _indexOfInterest[267004]
          _iterator[267005]
        }
        label _breakLabel[267010]
      }
    }
    {
      {
        unknown _indexOfInterest[267080] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267081] "expr temp" "temp"
        (267090 'move' _iterator[267081](267088 call _getIterator(267099 call chpl_direct_range_iter low[266899] firstBlockStart[266932] strideToNextBlock[266963])))
        Defer
        {
          {
            (267115 call _freeIterator _iterator[267081])
          }
        }
        { scopeless type
          (267104 'move' _indexOfInterest[267080](267101 call iteratorIndex _iterator[267081]))
        }
        ForLoop[267082]
        {
          unknown blockEnd[267108] "index var" "insert auto destroy"
          (267110 'move' blockEnd[267108] _indexOfInterest[267080])
          {
            unknown blockStart[267066](267065 call max low[266899](267063 call +(267060 call + blockEnd[267108] blockStride[266891]) 1))
            (267069 'end of statement')
            (267078 yield(267076 call chpl_by(267073 call chpl_build_bounded_range blockStart[267066] blockEnd[267108]) rangeStride[266883]))
          }
          label _continueLabel[267085]
          _indexOfInterest[267080]
          _iterator[267081]
        }
        label _breakLabel[267086]
      }
    }
  }
  function chunksOrder[267141](arg r[267138] :
  (267137 call range[64319](?) unknown RT[267132] bounded[64208] ?[260]), arg numChunks[267144] :
  integral[199](?), arg remPol[267149] :
  RemElems[266485] =
  Thru[266479]) : _unknown[51] "iterator fn" "no return value for void"
  {
    if(267172 call _cond_test(267168 call ||(267162 call ==(267158 call . r[267138] c"size") 0)(267166 call <= numChunks[267144] 0)))
    {
      (267170 return _void[55])
    }
    const nElems[267182] "const"(267179 call . r[267138] c"size")
    (267185 'end of statement')
    unknown nChunks[267194](267192 call _cast RT[267132](267190 call min numChunks[267144] nElems[267182]))
    (267197 'end of statement')
    unknown chunkSize[267198] RT[267132]
    unknown rem[267202](267206 'typeof' chunkSize[267198])
    (267207 'end of statement')
    {
      unknown tmp[267274] "expr temp" "maybe param" "maybe type" "temp"
      (267276 'move' tmp[267274] remPol[267149])
      if(267281 call _cond_test(267278 call == tmp[267274] Pack[266481]))
      {
        (267217 call = chunkSize[267198](267215 call / nElems[267182] nChunks[267194]))
        if(267243 call _cond_test(267226 call !=(267223 call * chunkSize[267198] nChunks[267194]) nElems[267182]))
        {
          (267230 call += chunkSize[267198] 1)
          (267240 call = nChunks[267194](267239 call divceil nElems[267182] chunkSize[267198]))
        }
      }
      {
        if(267287 call _cond_test(267284 call == tmp[267274] Mod[266483]))
        {
          (267256 call = chunkSize[267198](267254 call / nElems[267182] nChunks[267194]))
          (267268 call = rem[267202](267266 call - nElems[267182](267264 call * chunkSize[267198] nChunks[267194])))
        }
      }
    }
    {
      unknown _indexOfInterest[267410] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267411] "expr temp" "temp"
      (267420 'move' _iterator[267411](267418 call _getIterator(267427 call chpl_direct_counted_range_iter 0 nChunks[267194])))
      Defer
      {
        {
          (267443 call _freeIterator _iterator[267411])
        }
      }
      { scopeless type
        (267432 'move' _indexOfInterest[267410](267429 call iteratorIndex _iterator[267411]))
      }
      ForLoop[267412]
      {
        unknown i[267436] "index var" "insert auto destroy"
        (267438 'move' i[267436] _indexOfInterest[267410])
        {
          unknown chunk[267303](267301 call * 2 RT[267132])
          (267306 'end of statement')
          {
            unknown tmp[267382] "expr temp" "maybe param" "maybe type" "temp"
            (267384 'move' tmp[267382] remPol[267149])
            if(267389 call _cond_test(267386 call == tmp[267382] Thru[266479]))
            {
              (267319 call = chunk[267303](267318 call chunkOrderThru nElems[267182] nChunks[267194] i[267436]))
            }
            {
              if(267395 call _cond_test(267392 call == tmp[267382] Pack[266481]))
              {
                (267334 call = chunk[267303](267333 call chunkOrderPack chunkSize[267198] nElems[267182] i[267436]))
              }
              {
                if(267402 call _cond_test(267399 call == tmp[267382] Mod[266483]))
                {
                  (267351 call = chunk[267303](267350 call chunkOrderMod chunkSize[267198] rem[267202] nElems[267182] nChunks[267194] i[267436]))
                }
                {
                  (267376 call halt "RangeChunk: unknown RemElems in chunksOrder")
                }
              }
            }
          }
          (267408 yield chunk[267303])
        }
        label _continueLabel[267415]
        _indexOfInterest[267410]
        _iterator[267411]
      }
      label _breakLabel[267416]
    }
  }
  { scopeless type
    (267155 call * 2 RT[267132])
  }
  function chunkOrder[267465](arg r[267462] :
  (267461 call range[64319](?) unknown RT[267456] bounded[64208] ?[260]), arg numChunks[267468] :
  integral[199](?), arg idx[267472] :
  integral[199](?), arg remPol[267477] :
  RemElems[266485] =
  Thru[266479]) : _unknown[51]
  {
    if(267523 call _cond_test(267508 call ||(267502 call ||(267496 call ||(267490 call ==(267486 call . r[267462] c"size") 0)(267494 call <= numChunks[267468] 0))(267500 call < idx[267472] 0))(267506 call >= idx[267472] numChunks[267468])))
    {
      (267521 return(267519 call _build_tuple(267512 call _cast RT[267456] 1)(267516 call _cast RT[267456] 0)))
    }
    const nElems[267533] "const"(267530 call . r[267462] c"size")
    (267536 'end of statement')
    const nChunks[267545] "const"(267543 call _cast RT[267456](267541 call min numChunks[267468] nElems[267533]))
    (267548 'end of statement')
    const i[267553] "const"(267551 call _cast RT[267456] idx[267472])
    (267556 'end of statement')
    {
      unknown tmp[267669] "expr temp" "maybe param" "maybe type" "temp"
      (267671 'move' tmp[267669] remPol[267477])
      if(267676 call _cond_test(267673 call == tmp[267669] Thru[266479]))
      {
        (267567 return(267566 call chunkOrderThru nElems[267533] nChunks[267545] i[267553]))
      }
      {
        if(267682 call _cond_test(267679 call == tmp[267669] Pack[266481]))
        {
          unknown chunkSize[267578](267576 call / nElems[267533] nChunks[267545])
          (267581 'end of statement')
          if(267595 call _cond_test(267588 call !=(267585 call * chunkSize[267578] nChunks[267545]) nElems[267533]))
          {
            (267592 call += chunkSize[267578] 1)
          }
          (267606 return(267605 call chunkOrderPack chunkSize[267578] nElems[267533] i[267553]))
        }
        {
          if(267689 call _cond_test(267686 call == tmp[267669] Mod[266483]))
          {
            const chunkSize[267616] "const"(267614 call / nElems[267533] nChunks[267545])
            (267619 'end of statement')
            const rem[267628] "const"(267626 call - nElems[267533](267624 call * chunkSize[267616] nChunks[267545]))
            (267631 'end of statement')
            (267640 return(267639 call chunkOrderMod chunkSize[267616] rem[267628] nElems[267533] nChunks[267545] i[267553]))
          }
          {
            (267663 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267483 call * 2 RT[267456])
  }
  function chunkOrderThru[267704](arg nElems[267701] :
  unknown I[267699], arg nChunks[267707] :
  I[267699], arg i[267711] :
  I[267699]) : _unknown[51] "no doc" "private"
  {
    const m[267723] "const"(267721 call * nElems[267701] i[267711])
    (267726 'end of statement')
    const start[267744] "const"(267741 IfExpr (267730 call == i[267711] 0) then
    { scopeless
      (267734 call _cast I[267699] 0)
    } else
    { scopeless
      (267740 call divceil m[267723] nChunks[267707])
    } )
    (267747 'end of statement')
    const end[267773] "const"(267770 IfExpr (267753 call == i[267711](267751 call - nChunks[267707] 1)) then
    { scopeless
      (267757 call - nElems[267701] 1)
    } else
    { scopeless
      (267768 call -(267766 call divceil(267762 call + m[267723] nElems[267701]) nChunks[267707]) 1)
    } )
    (267776 'end of statement')
    (267782 return(267780 call _build_tuple start[267744] end[267773]))
  }
  { scopeless type
    (267717 call _build_tuple I[267699] I[267699])
  }
  function chunkOrderPack[267794](arg chunkSize[267791] :
  unknown I[267789], arg nElems[267797] :
  I[267789], arg i[267801] :
  I[267789]) : _unknown[51] "no doc" "private"
  {
    const start[267813] "const"(267811 call * chunkSize[267791] i[267801])
    (267816 'end of statement')
    if(267835 call _cond_test(267820 call >= start[267813] nElems[267797]))
    {
      (267833 return(267831 call _build_tuple(267824 call _cast I[267789] 1)(267828 call _cast I[267789] 0)))
    }
    unknown end[267847](267845 call -(267842 call + start[267813] chunkSize[267791]) 1)
    (267850 'end of statement')
    if(267863 call _cond_test(267853 call >= end[267847] nElems[267797]))
    {
      (267860 call = end[267847](267858 call - nElems[267797] 1))
    }
    (267873 return(267871 call _build_tuple start[267813] end[267847]))
  }
  { scopeless type
    (267807 call _build_tuple I[267789] I[267789])
  }
  function chunkOrderMod[267885](arg chunkSize[267882] :
  unknown I[267880], arg rem[267888] :
  I[267880], arg nElems[267892] :
  I[267880], arg nChunks[267896] :
  I[267880], arg i[267900] :
  I[267880]) : _unknown[51] "no doc" "private"
  {
    unknown start[267908] I[267880]
    unknown end[267912](267916 'typeof' start[267908])
    (267917 'end of statement')
    if(267969 call _cond_test(267921 call < i[267900] rem[267888]))
    {
      (267931 call = start[267908](267929 call * i[267900](267927 call + chunkSize[267882] 1)))
      (267940 call = end[267912](267938 call + start[267908] chunkSize[267882]))
    }
    {
      (267954 call = start[267908](267952 call - nElems[267892](267950 call *(267947 call - nChunks[267896] i[267900]) chunkSize[267882])))
      (267966 call = end[267912](267964 call -(267961 call + start[267908] chunkSize[267882]) 1))
    }
    (267978 return(267976 call _build_tuple start[267908] end[267912]))
  }
  { scopeless type
    (267906 call _build_tuple I[267880] I[267880])
  }
  (355364 'used modules list'(353056 'use' ChapelStandard[20267])(266490 'use' RemElems[266485])(266493 'use' BoundedRangeType[64216]))
}