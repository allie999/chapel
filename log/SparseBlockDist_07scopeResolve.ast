AST dump for SparseBlockDist after pass scopeResolve.
Module use list: ChapelStandard DSIUtil ChapelUtil BlockDist RangeChunk HaltWrappers LayoutCS Sort Search 

{ unknown debugSparseBlockDist[341817] "config" "param" 0(341820 'end of statement') unknown debugSparseBlockDistBulkTransfer[341822] "config" "param" 0(341825 'end of statement') function TargetLocaleComparator[341942](?).key[341858](arg _mt[341946]:_MT[238], arg this[341944]:TargetLocaleComparator[341942](?), arg a[341855] :(341853 call chpl__buildIndexType(412956 call . this[341944] c"rank")(412961 call . this[341944] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(341934 call _cond_test(341862 call ==(412966 call . this[341944] c"rank") 2))
    {
      if(341913 call _cond_test(341871 call ==(412971 call . this[341944] c"sparseLayoutType")(341869 call unmanaged CS[415469](?)(compressRows = 0))))
      {(341891 return(341889 call _build_tuple(341879 call(341874 call .(366354 call . this[341944] c"dist") c"targetLocsIdx") a[341855])(341883 call a[341855] 1)(341888 call a[341855] 0)))
      }
      {(341911 return(341909 call _build_tuple(341899 call(341894 call .(366359 call . this[341944] c"dist") c"targetLocsIdx") a[341855])(341903 call a[341855] 0)(341908 call a[341855] 1)))
      }
    }
    {(341931 return(341929 call _build_tuple(341926 call(341921 call .(366364 call . this[341944] c"dist") c"targetLocsIdx") a[341855]) a[341855]))
    }
  } type TargetLocaleComparator[341942](?) unknown rank[341827] "param" unknown idxType[341831] "type variable" unknown sparseLayoutType[341834] "type variable" unknown dist[341844](341842 call unmanaged Block[415442](?) rank[341827] idxType[341831] sparseLayoutType[341834]) function SparseBlockDom[344770](?).setup[342023](arg _mt[344774]:_MT[238], arg this[344772]:SparseBlockDom[344770](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[342030](342029 '_wide_get_node' this[344772])(342033 'end of statement')
    if(342351 call _cond_test(342046 call ==(342044 call(413007 call . this[344772] c"locDoms")(342040 call .(342037 call .(366370 call . this[344772] c"dist") c"targetLocDom") c"low")) nil[44]))
    {
      { unknown tmpIter[342118] "expr temp" "maybe ref" "no copy" "temp"(342121 'move' tmpIter[342118](342050 call .(366375 call . this[344772] c"dist") c"targetLocDom")) unknown isRngDomArr[342309] "maybe param" "temp"(342324 'move' isRngDomArr[342309](342322 call ||(342311 call isBoundedRange tmpIter[342118])(342320 call ||(342314 call isDomain tmpIter[342118])(342317 call isArray tmpIter[342118]))))
        if isRngDomArr[342309]
        { const _coforallCount[342181] "const" "end count" "temp"(342246 'move' _coforallCount[342181](342243 call _endCountAlloc 0)) unknown numTasks[342182] "temp"(342230 'move' numTasks[342182](342226 call . tmpIter[342118] c"size"))(342221 call _upEndCount _coforallCount[342181] 0 numTasks[342182]) unknown _indexOfInterest[342188] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342189] "expr temp" "temp"(342198 'move' _iterator[342189](342196 call _getIterator tmpIter[342118]))
          Defer
          {
            {(342214 call _freeIterator _iterator[342189])
            }
          }
          { scopeless type(342203 'move' _indexOfInterest[342188](342200 call iteratorIndex _iterator[342189]))
          }
          ForLoop[342190]
          { unknown localeIdx[342207] "coforall index var" "index var" "insert auto destroy"(342209 'move' localeIdx[342207] _indexOfInterest[342188]) const tmp[342124] "const" "temp"(342126 'move' tmp[342124](342128 'deref'(342129 '_wide_get_locale'(342134 call(342131 call .(366392 call . this[344772] c"dist") c"targetLocales") localeIdx[342207]))))
            {
              {(342142 call =(342144 call(413059 call . this[344772] c"locDoms") localeIdx[342207])(342146 'new'(_chpl_manager = unmanaged[220](?))(342150 call LocSparseBlockDom[412992](?)(413066 call . this[344772] c"rank")(413071 call . this[344772] c"idxType")(413076 call . this[344772] c"stridable")(413081 call . this[344772] c"sparseLayoutType")(342159 call(342156 call .(366397 call . this[344772] c"dist") c"getChunk")(413086 call . this[344772] c"whole") localeIdx[342207]))))
                if(342163 call _cond_test(342165 call == thisid[342030](342168 call .(366400 call here[90435]) c"id")))
                {(342174 call =(413093 call . this[344772] c"myLocDom")(342177 call(413098 call . this[344772] c"locDoms") localeIdx[342207]))
                }
              }(342183 call _downEndCount _coforallCount[342181] nil[44])(342137 'coforall on block' 0 tmp[342124])
            } label _continueLabel[342193] _indexOfInterest[342188] _iterator[342189]
          } label _breakLabel[342194]
          Defer
          {
            {(342233 call _endCountFree _coforallCount[342181])
            }
          }(342238 call _waitEndCount _coforallCount[342181] 0 numTasks[342182])
        }
        { const _coforallCount[342250] "const" "end count" "temp"(342306 'move' _coforallCount[342250](342303 call _endCountAlloc 0)) unknown _indexOfInterest[342257] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342258] "expr temp" "temp"(342267 'move' _iterator[342258](342265 call _getIterator tmpIter[342118]))
          Defer
          {
            {(342283 call _freeIterator _iterator[342258])
            }
          }
          { scopeless type(342272 'move' _indexOfInterest[342257](342269 call iteratorIndex _iterator[342258]))
          }
          ForLoop[342259]
          { unknown localeIdx[342276] "coforall index var" "index var" "insert auto destroy"(342278 'move' localeIdx[342276] _indexOfInterest[342257])(342290 call _upEndCount _coforallCount[342250] 0) const tmp[342109] "const" "temp"(342111 'move' tmp[342109](342107 'deref'(342106 '_wide_get_locale'(342059 call(342054 call .(366380 call . this[344772] c"dist") c"targetLocales") localeIdx[342276]))))
            {
              {(342082 call =(342063 call(413013 call . this[344772] c"locDoms") localeIdx[342276])(342066 'new'(_chpl_manager = unmanaged[220](?))(342081 call LocSparseBlockDom[412992](?)(413020 call . this[344772] c"rank")(413025 call . this[344772] c"idxType")(413030 call . this[344772] c"stridable")(413035 call . this[344772] c"sparseLayoutType")(342080 call(342074 call .(366385 call . this[344772] c"dist") c"getChunk")(413040 call . this[344772] c"whole") localeIdx[342276]))))
                if(342101 call _cond_test(342091 call == thisid[342030](342088 call .(366388 call here[90435]) c"id")))
                {(342098 call =(413047 call . this[344772] c"myLocDom")(342097 call(413052 call . this[344772] c"locDoms") localeIdx[342276]))
                }
              }(342252 call _downEndCount _coforallCount[342250] nil[44])(342114 'coforall on block' 0 tmp[342109])
            } label _continueLabel[342262] _indexOfInterest[342257] _iterator[342258]
          } label _breakLabel[342263]
          Defer
          {
            {(342294 call _endCountFree _coforallCount[342250])
            }
          }(342299 call _waitEndCount _coforallCount[342250] 0)
        }
      }
    }
    {(342348 call halt "Don't know how to reallocate yet")
    }
  } function SparseBlockDom[344770](?).dsiDestroyDom[342359](arg _mt[344778]:_MT[238], arg this[344776]:SparseBlockDom[344770](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[342390] "expr temp" "maybe ref" "no copy" "temp"(342393 'move' tmpIter[342390](342363 call .(366404 call . this[344776] c"dist") c"targetLocDom")) unknown isRngDomArr[342544] "maybe param" "temp"(342559 'move' isRngDomArr[342544](342557 call ||(342546 call isBoundedRange tmpIter[342390])(342555 call ||(342549 call isDomain tmpIter[342390])(342552 call isArray tmpIter[342390]))))
      if isRngDomArr[342544]
      { const _coforallCount[342416] "const" "end count" "temp"(342481 'move' _coforallCount[342416](342478 call _endCountAlloc 0)) unknown numTasks[342417] "temp"(342465 'move' numTasks[342417](342461 call . tmpIter[342390] c"size"))(342456 call _upEndCount _coforallCount[342416] 0 numTasks[342417]) unknown _indexOfInterest[342423] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342424] "expr temp" "temp"(342433 'move' _iterator[342424](342431 call _getIterator tmpIter[342390]))
        Defer
        {
          {(342449 call _freeIterator _iterator[342424])
          }
        }
        { scopeless type(342438 'move' _indexOfInterest[342423](342435 call iteratorIndex _iterator[342424]))
        }
        ForLoop[342425]
        { unknown localeIdx[342442] "coforall index var" "index var" "insert auto destroy"(342444 'move' localeIdx[342442] _indexOfInterest[342423]) const tmp[342396] "const" "temp"(342398 'move' tmp[342396](342400 'deref'(342401 '_wide_get_locale'(342403 call(413116 call . this[344776] c"locDoms") localeIdx[342442]))))
          {(342411 call chpl__delete(342413 call(413122 call . this[344776] c"locDoms") localeIdx[342442]))(342418 call _downEndCount _coforallCount[342416] nil[44])(342406 'coforall on block' 0 tmp[342396])
          } label _continueLabel[342428] _indexOfInterest[342423] _iterator[342424]
        } label _breakLabel[342429]
        Defer
        {
          {(342468 call _endCountFree _coforallCount[342416])
          }
        }(342473 call _waitEndCount _coforallCount[342416] 0 numTasks[342417])
      }
      { const _coforallCount[342485] "const" "end count" "temp"(342541 'move' _coforallCount[342485](342538 call _endCountAlloc 0)) unknown _indexOfInterest[342492] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342493] "expr temp" "temp"(342502 'move' _iterator[342493](342500 call _getIterator tmpIter[342390]))
        Defer
        {
          {(342518 call _freeIterator _iterator[342493])
          }
        }
        { scopeless type(342507 'move' _indexOfInterest[342492](342504 call iteratorIndex _iterator[342493]))
        }
        ForLoop[342494]
        { unknown localeIdx[342511] "coforall index var" "index var" "insert auto destroy"(342513 'move' localeIdx[342511] _indexOfInterest[342492])(342525 call _upEndCount _coforallCount[342485] 0) const tmp[342381] "const" "temp"(342383 'move' tmp[342381](342379 'deref'(342378 '_wide_get_locale'(342369 call(413104 call . this[344776] c"locDoms") localeIdx[342511]))))
          {(342375 call chpl__delete(342373 call(413110 call . this[344776] c"locDoms") localeIdx[342511]))(342487 call _downEndCount _coforallCount[342485] nil[44])(342386 'coforall on block' 0 tmp[342381])
          } label _continueLabel[342497] _indexOfInterest[342492] _iterator[342493]
        } label _breakLabel[342498]
        Defer
        {
          {(342529 call _endCountFree _coforallCount[342485])
          }
        }(342534 call _waitEndCount _coforallCount[342485] 0)
      }
    }
  } function SparseBlockDom[344770](?).getNNZ[342568](arg _mt[344782]:_MT[238], arg this[344780]:SparseBlockDom[344770](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(342591 return(342589 'reduce' SumReduceScanOp[376284](?)(342585 [  ld[342587]  in (413130 call . this[344780] c"locDoms") ]
    {(342582 call .(342579 call .(342575 call postfix! ld[342587]) c"mySparseBlock") c"size")
    } ) 0))
  } function SparseBlockDom[344770](?).dsiAdd[342605](arg _mt[344786]:_MT[238], arg this[344784]:SparseBlockDom[344770](?), arg ind[342602] :(342600 call *(413136 call . this[344784] c"rank")(413141 call . this[344784] c"idxType"))) : _unknown[51] "method" "primary method"
  { unknown _retval[342608] 0(342611 'end of statement') const tmp[342646] "const" "temp"(342648 'move' tmp[342646](342644 'deref'(342643 '_wide_get_locale'(342619 call(342614 call .(366409 call . this[344784] c"dist") c"dsiIndexToLocale") ind[342602]))))
    {
      {(342639 call = _retval[342608](342638 call(342633 call .(342631 call postfix!(342630 call(413148 call . this[344784] c"locDoms")(342628 call(342623 call .(366414 call . this[344784] c"dist") c"targetLocsIdx") ind[342602]))) c"dsiAdd") ind[342602]))
      }(342651 'on block' 0 tmp[342646])
    }(342655 return _retval[342608])
  } function SparseBlockDom[344770](?).dsiAdd[342665](arg _mt[344790]:_MT[238], arg this[344788]:SparseBlockDom[344770](?), arg ind[342662] :(413156 call . this[344788] c"idxType")) : _unknown[51] "method" "primary method"
  {(342680 return(342679 call(413160 call . this[344788] c"dsiAdd")(342676 call _build_tuple ind[342662])))
  }
  {(342672 call ==(342668 call . this[344788] c"rank") 1)
  } function SparseBlockDom[344770](?).dsiFirst[342688](arg _mt[344794]:_MT[238], arg this[344792]:SparseBlockDom[344770](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342709 return(342707 'reduce' MinReduceScanOp[376405](?)(342703 [  l[342705]  in (413168 call . this[344792] c"locDoms") ]
    {(342700 call .(342697 call .(342695 call postfix! l[342705]) c"mySparseBlock") c"first")
    } ) 0))
  } function SparseBlockDom[344770](?).dsiLast[342716](arg _mt[344798]:_MT[238], arg this[344796]:SparseBlockDom[344770](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342737 return(342735 'reduce' MaxReduceScanOp[376361](?)(342731 [  l[342733]  in (413176 call . this[344796] c"locDoms") ]
    {(342728 call .(342725 call .(342723 call postfix! l[342733]) c"mySparseBlock") c"last")
    } ) 0))
  } function SparseBlockDom[344770](?).bulkAdd_help[342757](arg _mt[344802]:_MT[238], arg this[344800]:SparseBlockDom[344770](?), arg inds[342754] :(342752 call chpl__buildArrayRuntimeType unknown indsDom[342744](342750 call chpl__buildIndexType(413182 call . this[344800] c"rank")(413187 call . this[344800] c"idxType"))), arg dataSorted[342760] = 0, arg isUnique[342764] = 0, arg addOn[342768] = nilLocale[89939]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(342857 call _cond_test(342780 call != addOn[342768] nilLocale[89939]))
    { unknown retval[342783] 0(342786 'end of statement') const tmp[342846] "const" "temp"(342848 'move' tmp[342846](342844 'deref'(342843 '_wide_get_locale' addOn[342768])))
      {
        {
          if(342838 call _cond_test(342794 call ==(342791 call chpl_localeID_to_locale(342790 '_wide_get_locale' inds[342754]))(413195 call here[90435])))
          {(342803 call = retval[342783](342802 call(413201 call . this[344800] c"bulkAddHere_help") inds[342754] dataSorted[342760] isUnique[342764]))
          }
          { unknown _local_inds[342818](342816 call chpl__buildArrayRuntimeType(342814 call chpl__ensureDomainExpr indsDom[342744])(342812 call chpl__buildIndexType(413210 call . this[344800] c"rank")(413215 call . this[344800] c"idxType")))(342821 'end of statement')(342825 call = _local_inds[342818] inds[342754])(342835 call = retval[342783](342834 call(413222 call . this[344800] c"bulkAddHere_help") _local_inds[342818] dataSorted[342760] isUnique[342764]))
          }
        }(342851 'on block' 0 tmp[342846])
      }(342855 return retval[342783])
    } unknown comp[342873](342861 'new'(342872 call TargetLocaleComparator[341942](?)(rank =(413232 call . this[344800] c"rank"))(idxType =(413237 call . this[344800] c"idxType"))(sparseLayoutType =(413242 call . this[344800] c"sparseLayoutType"))(dist =(413247 call . this[344800] c"dist"))))(342876 'end of statement')
    if(342887 call _cond_test(342878 call ! dataSorted[342760]))
    {(342885 call sort inds[342754](comparator = comp[342873]))
    } unknown localeRanges[342902](342900 call chpl__buildArrayRuntimeType(342898 call chpl__ensureDomainExpr(342893 call .(366420 call . this[344800] c"dist") c"targetLocDom")) range[64316](?))(342905 'end of statement') const tmp[343113] "const" "temp"(343115 'move' tmp[343113](343111 'deref'(343110 '_wide_get_locale' inds[342754])))
    {
      {
        { unknown _indexOfInterest[343075] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343076] "expr temp" "temp"(343085 'move' _iterator[343076](343083 call _getIterator(342909 call .(366425 call . this[344800] c"dist") c"targetLocDom")))
          Defer
          {
            {(343102 call _freeIterator _iterator[343076])
            }
          }
          { scopeless type(343091 'move' _indexOfInterest[343075](343088 call iteratorIndex _iterator[343076]))
          }
          ForLoop[343077]
          { unknown l[343095] "index var" "insert auto destroy"(343097 'move' l[343095] _indexOfInterest[343075])
            { const blockval[342924] "const"(342921 call .(342918 call .(342916 call postfix!(342915 call(413257 call . this[344800] c"locDoms") l[343095])) c"mySparseBlock") c"_value")(342927 'end of statement') const _first[342936] "const"(342933 call .(342930 call . blockval[342924] c"parentDom") c"first")(342939 'end of statement') const _last[342947] "const"(342944 call .(342941 call . blockval[342924] c"parentDom") c"last")(342950 'end of statement') unknown tmp[342962] "temp"(342961 call binarySearch inds[342754] _first[342936] comp[342873])(342969 call _check_tuple_var_decl tmp[342962] 2) unknown foundFirst[342951](342963 call tmp[342962] 0) unknown locFirst[342953](342966 call tmp[342962] 1)(342974 'end of statement') unknown tmp[342986] "temp"(342985 call binarySearch inds[342754] _last[342947] comp[342873])(342993 call _check_tuple_var_decl tmp[342986] 2) unknown foundLast[342975](342987 call tmp[342986] 0) unknown locLast[342977](342990 call tmp[342986] 1)(342998 'end of statement')
              if(343007 call _cond_test(343000 call ! foundLast[342975]))
              {(343004 call -= locLast[342977] 1)
              }
              if(343033 call _cond_test(343020 call ==(343016 call .(343013 call .(366432 call . this[344800] c"dist") c"targetLocDom") c"first") l[343095]))
              {(343030 call = locFirst[342953](343027 call .(343024 call . inds[342754] c"_dom") c"first"))
              }
              if(343059 call _cond_test(343046 call ==(343042 call .(343039 call .(366438 call . this[344800] c"dist") c"targetLocDom") c"last") l[343095]))
              {(343056 call = locLast[342977](343053 call .(343050 call . inds[342754] c"_dom") c"last"))
              }(343072 call =(343067 call localeRanges[342902] l[343095])(343070 call chpl_build_bounded_range locFirst[342953] locLast[342977]))
            } label _continueLabel[343080] _indexOfInterest[343075] _iterator[343076]
          } label _breakLabel[343081]
        }
      }(343118 'on block' 0 tmp[343113])
    } unknown _totalAdded[343124](343122 call chpl__atomicType int(64)[13])(343127 'end of statement')
    { unknown tmpIter[343191] "expr temp" "maybe ref" "no copy" "temp"(343194 'move' tmpIter[343191](343130 call .(366444 call . this[344800] c"dist") c"targetLocDom")) unknown isRngDomArr[343374] "maybe param" "temp"(343389 'move' isRngDomArr[343374](343387 call ||(343376 call isBoundedRange tmpIter[343191])(343385 call ||(343379 call isDomain tmpIter[343191])(343382 call isArray tmpIter[343191]))))
      if isRngDomArr[343374]
      { const _coforallCount[343246] "const" "end count" "temp"(343311 'move' _coforallCount[343246](343308 call _endCountAlloc 0)) unknown numTasks[343247] "temp"(343295 'move' numTasks[343247](343291 call . tmpIter[343191] c"size"))(343286 call _upEndCount _coforallCount[343246] 0 numTasks[343247]) unknown _indexOfInterest[343253] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343254] "expr temp" "temp"(343263 'move' _iterator[343254](343261 call _getIterator tmpIter[343191]))
        Defer
        {
          {(343279 call _freeIterator _iterator[343254])
          }
        }
        { scopeless type(343268 'move' _indexOfInterest[343253](343265 call iteratorIndex _iterator[343254]))
        }
        ForLoop[343255]
        { unknown l[343272] "coforall index var" "index var" "insert auto destroy"(343274 'move' l[343272] _indexOfInterest[343253]) const tmp[343197] "const" "temp"(343199 'move' tmp[343197](343201 'deref'(343202 '_wide_get_locale'(343207 call(343204 call .(366455 call . this[344800] c"dist") c"targetLocales") l[343272]))))
          {
            { const _retval[343215] "const"(343227 call(343217 call .(343219 call .(343221 call postfix!(343223 call(413291 call . this[344800] c"locDoms") l[343272])) c"mySparseBlock") c"bulkAdd")(343229 call inds[342754](343231 call localeRanges[342902] l[343272]))(dataSorted = 1)(isUnique = 0))(343238 'end of statement')(343243 call(343240 call . _totalAdded[343124] c"add") _retval[343215])
            }(343248 call _downEndCount _coforallCount[343246] nil[44])(343210 'coforall on block' 0 tmp[343197])
          } label _continueLabel[343258] _indexOfInterest[343253] _iterator[343254]
        } label _breakLabel[343259]
        Defer
        {
          {(343298 call _endCountFree _coforallCount[343246])
          }
        }(343303 call _waitEndCount _coforallCount[343246] 0 numTasks[343247])
      }
      { const _coforallCount[343315] "const" "end count" "temp"(343371 'move' _coforallCount[343315](343368 call _endCountAlloc 0)) unknown _indexOfInterest[343322] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343323] "expr temp" "temp"(343332 'move' _iterator[343323](343330 call _getIterator tmpIter[343191]))
        Defer
        {
          {(343348 call _freeIterator _iterator[343323])
          }
        }
        { scopeless type(343337 'move' _indexOfInterest[343322](343334 call iteratorIndex _iterator[343323]))
        }
        ForLoop[343324]
        { unknown l[343341] "coforall index var" "index var" "insert auto destroy"(343343 'move' l[343341] _indexOfInterest[343322])(343355 call _upEndCount _coforallCount[343315] 0) const tmp[343183] "const" "temp"(343185 'move' tmp[343183](343181 'deref'(343180 '_wide_get_locale'(343139 call(343134 call .(366449 call . this[344800] c"dist") c"targetLocales") l[343341]))))
          {
            { const _retval[343167] "const"(343166 call(343151 call .(343146 call .(343144 call postfix!(343143 call(413280 call . this[344800] c"locDoms") l[343341])) c"mySparseBlock") c"bulkAdd")(343160 call inds[342754](343158 call localeRanges[342902] l[343341]))(dataSorted = 1)(isUnique = 0))(343170 'end of statement')(343178 call(343173 call . _totalAdded[343124] c"add") _retval[343167])
            }(343317 call _downEndCount _coforallCount[343315] nil[44])(343188 'coforall on block' 0 tmp[343183])
          } label _continueLabel[343327] _indexOfInterest[343322] _iterator[343323]
        } label _breakLabel[343328]
        Defer
        {
          {(343359 call _endCountFree _coforallCount[343315])
          }
        }(343364 call _waitEndCount _coforallCount[343315] 0)
      }
    } const _retval[343399] "const"(343398 call(343394 call . _totalAdded[343124] c"read"))(343402 'end of statement')(343404 return _retval[343399])(355506 'used modules list'(342772 'use' Sort[267880])(342776 'use' Search[291145]))
  } function SparseBlockDom[344770](?).bulkAddHere_help[343421](arg _mt[344806]:_MT[238], arg this[344804]:SparseBlockDom[344770](?), arg inds[343418] :(343415 call chpl__buildArrayRuntimeType nil[44](343413 call chpl__buildIndexType(413302 call . this[344804] c"rank")(413307 call . this[344804] c"idxType"))), arg dataSorted[343424] = 0, arg isUnique[343428] = 0) : _unknown[51] "method" "primary method"
  { const _retval[343447] "const"(343446 call(343437 call .(343434 call .(343432 call postfix!(413312 call . this[344804] c"myLocDom")) c"mySparseBlock") c"bulkAdd") inds[343418](dataSorted = 1)(isUnique = 0))(343450 'end of statement')(343453 return _retval[343447])
  } function SparseBlockDom[344770](?).dsiSerialWrite[343461](arg _mt[344810]:_MT[238], arg this[344808]:SparseBlockDom[344770](?), arg f[343459]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(343562 call _cond_test(343465 call ==(413319 call . this[344808] c"rank") 1))
    {(343469 call <~> f[343459] "{")
      { unknown _indexOfInterest[343502] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343503] "expr temp" "temp"(343512 'move' _iterator[343503](343510 call _getIterator(413325 call . this[344808] c"locDoms")))
        Defer
        {
          {(343528 call _freeIterator _iterator[343503])
          }
        }
        { scopeless type(343517 'move' _indexOfInterest[343502](343514 call iteratorIndex _iterator[343503]))
        }
        ForLoop[343504]
        { unknown locdom[343521] "index var" "insert auto destroy"(343523 'move' locdom[343521] _indexOfInterest[343502])
          {
            if(343497 call _cond_test(343478 call .(343476 call postfix! locdom[343521]) c"dsiNumIndices"))
            {(343483 call <~> f[343459] " ")(343495 call(343490 call .(343488 call postfix! locdom[343521]) c"dsiSerialWrite") f[343459])
            }
          } label _continueLabel[343507] _indexOfInterest[343502] _iterator[343503]
        } label _breakLabel[343508]
      }(343537 call <~> f[343459] "}")
    }
    {(343559 call compilerError "Can't write out multidimensional sparse distributed domains yet")
    }
  } function SparseBlockDom[344770](?).dsiBuildArray[343573](arg _mt[344814]:_MT[238], arg this[344812]:SparseBlockDom[344770](?), arg eltType[343571]:_any[178](?), param arg initElts[343576] : bool[10]) : _unknown[51] "method" "primary method"
  { unknown arr[343600](343581 'new'(_chpl_manager = unmanaged[220](?))(343599 call SparseBlockArr[413334](?)(eltType = eltType[343571])(rank =(413340 call . this[344812] c"rank"))(idxType =(413345 call . this[344812] c"idxType"))(stridable =(413350 call . this[344812] c"stridable"))(sparseLayoutType =(413355 call . this[344812] c"sparseLayoutType"))(dom =(343597 call _to_unmanaged this[344812]))))(343603 'end of statement')(343611 call(343606 call . arr[343600] c"setup") initElts[343576])(343614 return arr[343600])
  } function SparseBlockDom[344770](?).getLocDom[343622](arg _mt[344818]:_MT[238], arg this[344816]:SparseBlockDom[344770](?), arg localeIdx[343620]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(343630 return(343628 call postfix!(343627 call(413363 call . this[344816] c"locDoms") localeIdx[343620])))
  } function SparseBlockDom[344770](?).these[343637](arg _mt[344822]:_MT[238], arg this[344820]:SparseBlockDom[344770](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[343690] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343691] "expr temp" "temp"(343700 'move' _iterator[343691](343698 call _getIterator(413369 call . this[344820] c"locDoms")))
      Defer
      {
        {(343716 call _freeIterator _iterator[343691])
        }
      }
      { scopeless type(343705 'move' _indexOfInterest[343690](343702 call iteratorIndex _iterator[343691]))
      }
      ForLoop[343692]
      { unknown locDom[343709] "index var" "insert auto destroy"(343711 'move' locDom[343709] _indexOfInterest[343690])
        { unknown _indexOfInterest[343656] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343657] "expr temp" "temp"(343666 'move' _iterator[343657](343664 call _getIterator(343652 call(343648 call .(343645 call .(343643 call postfix! locDom[343709]) c"mySparseBlock") c"these"))))
          Defer
          {
            {(343683 call _freeIterator _iterator[343657])
            }
          }
          { scopeless type(343672 'move' _indexOfInterest[343656](343669 call iteratorIndex _iterator[343657]))
          }
          ForLoop[343658]
          { unknown x[343676] "index var" "insert auto destroy"(343678 'move' x[343676] _indexOfInterest[343656])(343654 yield x[343676]) label _continueLabel[343661] _indexOfInterest[343656] _iterator[343657]
          } label _breakLabel[343662]
        } label _continueLabel[343695] _indexOfInterest[343690] _iterator[343691]
      } label _breakLabel[343696]
    }
  } function SparseBlockDom[344770](?).these[343732](arg _mt[344826]:_MT[238], arg this[344824]:SparseBlockDom[344770](?), param arg tag[343729] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[343823] "expr temp" "maybe ref" "no copy" "temp"(343826 'move' tmpIter[343823](343752 call _build_tuple(413378 call . this[344824] c"locDoms")(343749 call .(366464 call . this[344824] c"dist") c"targetLocDom"))) unknown isRngDomArr[344047] "maybe param" "temp"(344062 'move' isRngDomArr[344047](344060 call ||(344049 call isBoundedRange tmpIter[343823])(344058 call ||(344052 call isDomain tmpIter[343823])(344055 call isArray tmpIter[343823]))))
      if isRngDomArr[344047]
      { const _coforallCount[343891] "const" "end count" "temp"(343970 'move' _coforallCount[343891](343967 call _endCountAlloc 0)) unknown numTasks[343892] "temp"(343954 'move' numTasks[343892](343950 call . tmpIter[343823] c"size"))(343945 call _upEndCount _coforallCount[343891] 0 numTasks[343892]) unknown _indexOfInterest[343898] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343899] "expr temp" "temp"(343908 'move' _iterator[343899](343906 call _getIteratorZip tmpIter[343823]))
        Defer
        {
          {(343938 call _freeIterator _iterator[343899])
          }
        }
        { scopeless type(343913 'move' _indexOfInterest[343898](343910 call iteratorIndex _iterator[343899]))
        }
        ForLoop[343900]
        {(343918 call _check_tuple_var_decl _indexOfInterest[343898] 2) unknown locDom[343924] "coforall index var" "index var" "insert auto destroy"(343926 'move' locDom[343924](343922 call _indexOfInterest[343898] 0)) unknown localeIndex[343931] "coforall index var" "index var" "insert auto destroy"(343933 'move' localeIndex[343931](343929 call _indexOfInterest[343898] 1)) const tmp[343829] "const" "temp"(343831 'move' tmp[343829](343833 'deref'(343834 '_wide_get_locale' locDom[343924])))
          {
            {
              { unknown _indexOfInterest[343842] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343844] "expr temp" "temp"(343846 'move' _iterator[343844](343849 call _getIterator(343859 call(343851 call .(343853 call .(343855 call postfix! locDom[343924]) c"mySparseBlock") c"these") tag[343729])))
                Defer
                {
                  {(343863 call _freeIterator _iterator[343844])
                  }
                }
                { scopeless type(343867 'move' _indexOfInterest[343842](343870 call iteratorIndex _iterator[343844]))
                }
                ForLoop[343872]
                { unknown followThis[343875] "index var" "insert auto destroy"(343877 'move' followThis[343875] _indexOfInterest[343842])
                  {(343881 yield(343883 call _build_tuple followThis[343875] localeIndex[343931]))
                  } label _continueLabel[343886] _indexOfInterest[343842] _iterator[343844]
                } label _breakLabel[343888]
              }
            }(343893 call _downEndCount _coforallCount[343891] nil[44])(343837 'coforall on block' 0 tmp[343829])
          } label _continueLabel[343903] _indexOfInterest[343898] _iterator[343899]
        } label _breakLabel[343904]
        Defer
        {
          {(343957 call _endCountFree _coforallCount[343891])
          }
        }(343962 call _waitEndCount _coforallCount[343891] 0 numTasks[343892])
      }
      { const _coforallCount[343974] "const" "end count" "temp"(344044 'move' _coforallCount[343974](344041 call _endCountAlloc 0)) unknown _indexOfInterest[343981] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343982] "expr temp" "temp"(343991 'move' _iterator[343982](343989 call _getIteratorZip tmpIter[343823]))
        Defer
        {
          {(344021 call _freeIterator _iterator[343982])
          }
        }
        { scopeless type(343996 'move' _indexOfInterest[343981](343993 call iteratorIndex _iterator[343982]))
        }
        ForLoop[343983]
        {(344001 call _check_tuple_var_decl _indexOfInterest[343981] 2) unknown locDom[344007] "coforall index var" "index var" "insert auto destroy"(344009 'move' locDom[344007](344005 call _indexOfInterest[343981] 0)) unknown localeIndex[344014] "coforall index var" "index var" "insert auto destroy"(344016 'move' localeIndex[344014](344012 call _indexOfInterest[343981] 1))(344028 call _upEndCount _coforallCount[343974] 0) const tmp[343813] "const" "temp"(343815 'move' tmp[343813](343811 'deref'(343810 '_wide_get_locale' locDom[344007])))
          {
            {
              { unknown _indexOfInterest[343775] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343776] "expr temp" "temp"(343785 'move' _iterator[343776](343783 call _getIterator(343766 call(343761 call .(343758 call .(343756 call postfix! locDom[344007]) c"mySparseBlock") c"these") tag[343729])))
                Defer
                {
                  {(343802 call _freeIterator _iterator[343776])
                  }
                }
                { scopeless type(343791 'move' _indexOfInterest[343775](343788 call iteratorIndex _iterator[343776]))
                }
                ForLoop[343777]
                { unknown followThis[343795] "index var" "insert auto destroy"(343797 'move' followThis[343795] _indexOfInterest[343775])
                  {(343772 yield(343770 call _build_tuple followThis[343795] localeIndex[344014]))
                  } label _continueLabel[343780] _indexOfInterest[343775] _iterator[343776]
                } label _breakLabel[343781]
              }
            }(343976 call _downEndCount _coforallCount[343974] nil[44])(343818 'coforall on block' 0 tmp[343813])
          } label _continueLabel[343986] _indexOfInterest[343981] _iterator[343982]
        } label _breakLabel[343987]
        Defer
        {
          {(344032 call _endCountFree _coforallCount[343974])
          }
        }(344037 call _waitEndCount _coforallCount[343974] 0)
      }
    }
  }
  {(343739 call == tag[343729] leader[447])
  } function SparseBlockDom[344770](?).these[344076](arg _mt[344830]:_MT[238], arg this[344828]:SparseBlockDom[344770](?), param arg tag[344073] : iterKind[453], arg followThis[344078]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[344093] "temp" followThis[344078](344100 call _check_tuple_var_decl tmp[344093] 2) unknown locFollowThis[344087](344094 call tmp[344093] 0) unknown localeIndex[344089](344097 call tmp[344093] 1)(344105 'end of statement')
    { unknown _indexOfInterest[344122] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344123] "expr temp" "temp"(344132 'move' _iterator[344123](344130 call _getIterator(344118 call(344112 call .(344111 call locFollowThis[344087] 0) c"these") tag[344073] locFollowThis[344087])))
      Defer
      {
        {(344149 call _freeIterator _iterator[344123])
        }
      }
      { scopeless type(344138 'move' _indexOfInterest[344122](344135 call iteratorIndex _iterator[344123]))
      }
      ForLoop[344124]
      { unknown i[344142] "index var" "insert auto destroy"(344144 'move' i[344142] _indexOfInterest[344122])(344120 yield i[344142]) label _continueLabel[344127] _indexOfInterest[344122] _iterator[344123]
      } label _breakLabel[344128]
    }
  }
  {(344085 call == tag[344073] follower[449])
  } function SparseBlockDom[344770](?).these[344165](arg _mt[344834]:_MT[238], arg this[344832]:SparseBlockDom[344770](?), param arg tag[344162] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[344229] "expr temp" "maybe ref" "no copy" "temp"(344232 'move' tmpIter[344229](413413 call . this[344832] c"locDoms")) unknown isRngDomArr[344388] "maybe param" "temp"(344403 'move' isRngDomArr[344388](344401 call ||(344390 call isBoundedRange tmpIter[344229])(344399 call ||(344393 call isDomain tmpIter[344229])(344396 call isArray tmpIter[344229]))))
      if isRngDomArr[344388]
      { const _coforallCount[344260] "const" "end count" "temp"(344325 'move' _coforallCount[344260](344322 call _endCountAlloc 0)) unknown numTasks[344261] "temp"(344309 'move' numTasks[344261](344305 call . tmpIter[344229] c"size"))(344300 call _upEndCount _coforallCount[344260] 0 numTasks[344261]) unknown _indexOfInterest[344267] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344268] "expr temp" "temp"(344277 'move' _iterator[344268](344275 call _getIterator tmpIter[344229]))
        Defer
        {
          {(344293 call _freeIterator _iterator[344268])
          }
        }
        { scopeless type(344282 'move' _indexOfInterest[344267](344279 call iteratorIndex _iterator[344268]))
        }
        ForLoop[344269]
        { unknown locDom[344286] "coforall index var" "index var" "insert auto destroy"(344288 'move' locDom[344286] _indexOfInterest[344267]) const tmp[344235] "const" "temp"(344237 'move' tmp[344235](344239 'deref'(344240 '_wide_get_locale' locDom[344286])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344251] "index var" "insert auto destroy"
                iterated expressions:
                  (344254 call .(344256 call postfix! locDom[344286]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344248 yield i[344251])
                }
              }
            }(344262 call _downEndCount _coforallCount[344260] nil[44])(344243 'coforall on block' 0 tmp[344235])
          } label _continueLabel[344272] _indexOfInterest[344267] _iterator[344268]
        } label _breakLabel[344273]
        Defer
        {
          {(344312 call _endCountFree _coforallCount[344260])
          }
        }(344317 call _waitEndCount _coforallCount[344260] 0 numTasks[344261])
      }
      { const _coforallCount[344329] "const" "end count" "temp"(344385 'move' _coforallCount[344329](344382 call _endCountAlloc 0)) unknown _indexOfInterest[344336] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344337] "expr temp" "temp"(344346 'move' _iterator[344337](344344 call _getIterator tmpIter[344229]))
        Defer
        {
          {(344362 call _freeIterator _iterator[344337])
          }
        }
        { scopeless type(344351 'move' _indexOfInterest[344336](344348 call iteratorIndex _iterator[344337]))
        }
        ForLoop[344338]
        { unknown locDom[344355] "coforall index var" "index var" "insert auto destroy"(344357 'move' locDom[344355] _indexOfInterest[344336])(344369 call _upEndCount _coforallCount[344329] 0) const tmp[344220] "const" "temp"(344222 'move' tmp[344220](344218 'deref'(344217 '_wide_get_locale' locDom[344355])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344213] "index var" "insert auto destroy"
                iterated expressions:
                  (344205 call .(344203 call postfix! locDom[344355]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344209 yield i[344213])
                }
              }
            }(344331 call _downEndCount _coforallCount[344329] nil[44])(344225 'coforall on block' 0 tmp[344220])
          } label _continueLabel[344341] _indexOfInterest[344336] _iterator[344337]
        } label _breakLabel[344342]
        Defer
        {
          {(344373 call _endCountFree _coforallCount[344329])
          }
        }(344378 call _waitEndCount _coforallCount[344329] 0)
      }
    }
  }
  {(344196 call &&(344172 call == tag[344162] standalone[451])(344195 'method call resolves'(344190 call .(344187 call .(344185 call postfix!(344184 call(413402 call . this[344832] c"locDoms")(344182 call createTuple(413407 call . this[344832] c"rank") int(64)[13] 0))) c"mySparseBlock") c"_value") "these" tag[344162]))
  } function SparseBlockDom[344770](?).dsiMember[344415](arg _mt[344838]:_MT[238], arg this[344836]:SparseBlockDom[344770](?), arg ind[344413]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown _retval[344420] 0 bool[10](344423 'end of statement') const tmp[344458] "const" "temp"(344460 'move' tmp[344458](344456 'deref'(344455 '_wide_get_locale'(344431 call(344426 call .(366471 call . this[344836] c"dist") c"dsiIndexToLocale") ind[344413]))))
    {
      {(344451 call = _retval[344420](344450 call(344445 call .(344443 call postfix!(344442 call(413426 call . this[344836] c"locDoms")(344440 call(344435 call .(366476 call . this[344836] c"dist") c"targetLocsIdx") ind[344413]))) c"dsiMember") ind[344413]))
      }(344463 'on block' 0 tmp[344458])
    }(344467 return _retval[344420])
  }
  { scopeless type bool[10]
  } function SparseBlockDom[344770](?).dsiClear[344474](arg _mt[344842]:_MT[238], arg this[344840]:SparseBlockDom[344770](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[344499] "expr temp" "maybe ref" "no copy" "temp"(344502 'move' tmpIter[344499](413434 call . this[344840] c"locDoms")) unknown isRngDomArr[344653] "maybe param" "temp"(344668 'move' isRngDomArr[344653](344666 call ||(344655 call isBoundedRange tmpIter[344499])(344664 call ||(344658 call isDomain tmpIter[344499])(344661 call isArray tmpIter[344499]))))
      if isRngDomArr[344653]
      { const _coforallCount[344525] "const" "end count" "temp"(344590 'move' _coforallCount[344525](344587 call _endCountAlloc 0)) unknown numTasks[344526] "temp"(344574 'move' numTasks[344526](344570 call . tmpIter[344499] c"size"))(344565 call _upEndCount _coforallCount[344525] 0 numTasks[344526]) unknown _indexOfInterest[344532] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344533] "expr temp" "temp"(344542 'move' _iterator[344533](344540 call _getIterator tmpIter[344499]))
        Defer
        {
          {(344558 call _freeIterator _iterator[344533])
          }
        }
        { scopeless type(344547 'move' _indexOfInterest[344532](344544 call iteratorIndex _iterator[344533]))
        }
        ForLoop[344534]
        { unknown locDom[344551] "coforall index var" "index var" "insert auto destroy"(344553 'move' locDom[344551] _indexOfInterest[344532]) const tmp[344505] "const" "temp"(344507 'move' tmp[344505](344509 'deref'(344510 '_wide_get_locale' locDom[344551])))
          {(344523 call(344518 call .(344520 call postfix! locDom[344551]) c"dsiClear"))(344527 call _downEndCount _coforallCount[344525] nil[44])(344513 'coforall on block' 0 tmp[344505])
          } label _continueLabel[344537] _indexOfInterest[344532] _iterator[344533]
        } label _breakLabel[344538]
        Defer
        {
          {(344577 call _endCountFree _coforallCount[344525])
          }
        }(344582 call _waitEndCount _coforallCount[344525] 0 numTasks[344526])
      }
      { const _coforallCount[344594] "const" "end count" "temp"(344650 'move' _coforallCount[344594](344647 call _endCountAlloc 0)) unknown _indexOfInterest[344601] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344602] "expr temp" "temp"(344611 'move' _iterator[344602](344609 call _getIterator tmpIter[344499]))
        Defer
        {
          {(344627 call _freeIterator _iterator[344602])
          }
        }
        { scopeless type(344616 'move' _indexOfInterest[344601](344613 call iteratorIndex _iterator[344602]))
        }
        ForLoop[344603]
        { unknown locDom[344620] "coforall index var" "index var" "insert auto destroy"(344622 'move' locDom[344620] _indexOfInterest[344601])(344634 call _upEndCount _coforallCount[344594] 0) const tmp[344491] "const" "temp"(344493 'move' tmp[344491](344489 'deref'(344488 '_wide_get_locale' locDom[344620])))
          {(344486 call(344482 call .(344480 call postfix! locDom[344620]) c"dsiClear"))(344596 call _downEndCount _coforallCount[344594] nil[44])(344496 'coforall on block' 0 tmp[344491])
          } label _continueLabel[344606] _indexOfInterest[344601] _iterator[344602]
        } label _breakLabel[344607]
        Defer
        {
          {(344638 call _endCountFree _coforallCount[344594])
          }
        }(344643 call _waitEndCount _coforallCount[344594] 0)
      }
    }
  } function SparseBlockDom[344770](?).dsiMyDist[344677](arg _mt[344846]:_MT[238], arg this[344844]:SparseBlockDom[344770](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(344680 return(413443 call . this[344844] c"dist"))
  } function SparseBlockDom[344770](?).dsiAssignDomain[344691](arg _mt[344850]:_MT[238], arg this[344848]:SparseBlockDom[344770](?), arg rhs[344688] : _domain[125902](?), arg lhsPrivate[344694] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(344721 call _cond_test(344698 call ! lhsPrivate[344694]))
    {(344719 call halt "SparseBlock domain assignment not yet supported")
    }
    { unknown _indexOfInterest[344734] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344735] "expr temp" "temp"(344744 'move' _iterator[344735](344742 call _getIterator rhs[344688]))
      Defer
      {
        {(344760 call _freeIterator _iterator[344735])
        }
      }
      { scopeless type(344749 'move' _indexOfInterest[344734](344746 call iteratorIndex _iterator[344735]))
      }
      ForLoop[344736]
      { unknown i[344753] "index var" "insert auto destroy"(344755 'move' i[344753] _indexOfInterest[344734])(344732 call(413450 call . this[344848] c"dsiAdd") i[344753]) label _continueLabel[344739] _indexOfInterest[344734] _iterator[344735]
      } label _breakLabel[344740]
    }
  } type SparseBlockDom[344770](?) val super[355712]:BaseSparseDomImpl[147961](?) "super class" unknown sparseLayoutType[341952] "type variable" unknown stridable[341957] "param" 0 bool[10] const dist[341968] "const"(341966 call unmanaged Block[415442](?) rank[148211] idxType[148215] sparseLayoutType[341952]) unknown whole[341982](341980 call chpl__buildDomainRuntimeType defaultDist[94050](rank = rank[148211])(idxType = idxType[148215])(stridable = stridable[341957])) unknown locDoms[342004](342002 call chpl__buildArrayRuntimeType(342000 call chpl__ensureDomainExpr(341987 call . dist[341968] c"targetLocDom"))(341997 call unmanaged LocSparseBlockDom?[415475](?) rank[148211] idxType[148215] stridable[341957] sparseLayoutType[341952])) unknown myLocDom[342017](342014 call unmanaged LocSparseBlockDom?[415475](?) rank[148211] idxType[148215] stridable[341957] sparseLayoutType[341952]) type SparseBlockDom[409148](?) function getDefaultSparseDist[344857](arg sparseLayoutType[344855]:_any[178](?)) : _unknown[51] "private"
  {
    if(344882 call _cond_test(354846 'is_subtype' DefaultDist[377957](?)(344863 call _to_nonnil sparseLayoutType[344855])))
    {(344868 return defaultDist[94050])
    }
    {(344879 return(344871 'new'(344878 call dmap[118239](344873 'new'(344876 call sparseLayoutType[344855])))))
    }
  } function LocSparseBlockDom[345039](?).dsiAdd[344952](arg _mt[345043]:_MT[238], arg this[345041]:LocSparseBlockDom[345039](?), arg ind[344949] :(344947 call *(413468 call . this[345041] c"rank")(413473 call . this[345041] c"idxType"))) : _unknown[51] "method" "primary method"
  {(344961 return(344960 call(344955 call .(366482 call . this[345041] c"mySparseBlock") c"add") ind[344949]))
  } function LocSparseBlockDom[345039](?).dsiMember[344975](arg _mt[345047]:_MT[238], arg this[345045]:LocSparseBlockDom[345039](?), arg ind[344972] :(344970 call *(413479 call . this[345045] c"rank")(413484 call . this[345045] c"idxType"))) : _unknown[51] "method" "primary method"
  {(344984 return(344983 call(344978 call .(366487 call . this[345045] c"mySparseBlock") c"contains") ind[344972]))
  } function LocSparseBlockDom[345039](?).dsiClear[344991](arg _mt[345051]:_MT[238], arg this[345049]:LocSparseBlockDom[345039](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(344998 call(344994 call .(366492 call . this[345049] c"mySparseBlock") c"clear"))
  } function LocSparseBlockDom[345039](?).dsiSerialWrite[345007](arg _mt[345055]:_MT[238], arg this[345053]:LocSparseBlockDom[345039](?), arg w[345005]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345020 call(345013 call .(345010 call .(366497 call . this[345053] c"mySparseBlock") c"_value") c"dsiSerialWrite") w[345005](printBrackets = 0))
  } function LocSparseBlockDom[345039](?).dsiNumIndices[345027](arg _mt[345059]:_MT[238], arg this[345057]:LocSparseBlockDom[345039](?)) : _unknown[51] "method" "primary method" "no parens"
  {(345033 return(345030 call .(366502 call . this[345057] c"mySparseBlock") c"size"))
  } type LocSparseBlockDom[345039](?) val super[355714]:object[22] "super class" unknown rank[344891] "param" int(64)[13] unknown idxType[344895] "type variable" unknown stridable[344899] "param" bool[10] unknown sparseLayoutType[344903] "type variable" unknown parentDom[344913](344911 call chpl__buildDomainRuntimeType defaultDist[94050] rank[344891] idxType[344895] stridable[344899]) unknown sparseDist[344921](344920 call getDefaultSparseDist sparseLayoutType[344903]) unknown mySparseBlock[344939](344937 call chpl__distributed sparseDist[344921](344934 call chpl__buildSparseDomainRuntimeType(344931 call . parentDom[344913] c"defaultSparseDist") parentDom[344913])) type unmanaged LocSparseBlockDom[415484](?) type unmanaged LocSparseBlockDom?[415475](?) type LocSparseBlockDom?[415472](?) type LocSparseBlockDom[412992](?) function SparseBlockArr[347097](?).init[345123](arg _mt[347101]:_MT[238], arg this[347099]:SparseBlockArr[347097](?), arg eltType[345121]:_any[178](?), param arg rank[345125]:_any[178](?), arg idxType[345127]:_any[178](?), param arg stridable[345129]:_any[178](?), arg sparseLayoutType[345131]:_any[178](?), arg dom[345133]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345148 call(345136 call .(366507 call . this[347099] c"super") c"init")(eltType = eltType[345121])(rank = rank[345125])(idxType = idxType[345127])(dom = dom[345133]))(345156 call =(345152 call . this[347099] c"stridable") stridable[345129])(345164 call =(345160 call . this[347099] c"sparseLayoutType") sparseLayoutType[345131])(345180 call =(345170 call . this[347099] c"locArrDom")(345177 call .(345174 call . dom[345133] c"dist") c"targetLocDom"))
  } function SparseBlockArr[347097](?).setup[345189](arg _mt[347105]:_MT[238], arg this[347103]:SparseBlockArr[347097](?), param arg initElts[345187]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[345196](345195 '_wide_get_node' this[347103])(345199 'end of statement')
    { unknown tmpIter[345284] "expr temp" "maybe ref" "no copy" "temp"(345287 'move' tmpIter[345284](345206 call .(345203 call .(366516 call . this[347103] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345485] "maybe param" "temp"(345500 'move' isRngDomArr[345485](345498 call ||(345487 call isBoundedRange tmpIter[345284])(345496 call ||(345490 call isDomain tmpIter[345284])(345493 call isArray tmpIter[345284]))))
      if isRngDomArr[345485]
      { const _coforallCount[345357] "const" "end count" "temp"(345422 'move' _coforallCount[345357](345419 call _endCountAlloc 0)) unknown numTasks[345358] "temp"(345406 'move' numTasks[345358](345402 call . tmpIter[345284] c"size"))(345397 call _upEndCount _coforallCount[345357] 0 numTasks[345358]) unknown _indexOfInterest[345364] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345365] "expr temp" "temp"(345374 'move' _iterator[345365](345372 call _getIterator tmpIter[345284]))
        Defer
        {
          {(345390 call _freeIterator _iterator[345365])
          }
        }
        { scopeless type(345379 'move' _indexOfInterest[345364](345376 call iteratorIndex _iterator[345365]))
        }
        ForLoop[345366]
        { unknown localeIdx[345383] "coforall index var" "index var" "insert auto destroy"(345385 'move' localeIdx[345383] _indexOfInterest[345364]) const tmp[345290] "const" "temp"(345292 'move' tmp[345290](345294 'deref'(345295 '_wide_get_locale'(345303 call(345297 call .(345299 call .(366533 call . this[347103] c"dom") c"dist") c"targetLocales") localeIdx[345383]))))
          {
            { const locDom[345311] "const"(345316 call(345313 call .(366538 call . this[347103] c"dom") c"getLocDom") localeIdx[345383])(345319 'end of statement')(345321 call =(345323 call(413568 call . this[347103] c"locArr") localeIdx[345383])(345325 'new'(_chpl_manager = unmanaged[220](?))(345329 call LocSparseBlockArr[413495](?)(413575 call . this[347103] c"eltType")(413580 call . this[347103] c"rank")(413585 call . this[347103] c"idxType")(413590 call . this[347103] c"stridable")(413595 call . this[347103] c"sparseLayoutType") locDom[345311](initElts = initElts[345187]))))
              if(345339 call _cond_test(345341 call == thisid[345196](345344 call .(366541 call here[90435]) c"id")))
              {(345350 call =(413603 call . this[347103] c"myLocArr")(345353 call(413608 call . this[347103] c"locArr") localeIdx[345383]))
              }
            }(345359 call _downEndCount _coforallCount[345357] nil[44])(345306 'coforall on block' 0 tmp[345290])
          } label _continueLabel[345369] _indexOfInterest[345364] _iterator[345365]
        } label _breakLabel[345370]
        Defer
        {
          {(345409 call _endCountFree _coforallCount[345357])
          }
        }(345414 call _waitEndCount _coforallCount[345357] 0 numTasks[345358])
      }
      { const _coforallCount[345426] "const" "end count" "temp"(345482 'move' _coforallCount[345426](345479 call _endCountAlloc 0)) unknown _indexOfInterest[345433] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345434] "expr temp" "temp"(345443 'move' _iterator[345434](345441 call _getIterator tmpIter[345284]))
        Defer
        {
          {(345459 call _freeIterator _iterator[345434])
          }
        }
        { scopeless type(345448 'move' _indexOfInterest[345433](345445 call iteratorIndex _iterator[345434]))
        }
        ForLoop[345435]
        { unknown localeIdx[345452] "coforall index var" "index var" "insert auto destroy"(345454 'move' localeIdx[345452] _indexOfInterest[345433])(345466 call _upEndCount _coforallCount[345426] 0) const tmp[345275] "const" "temp"(345277 'move' tmp[345275](345273 'deref'(345272 '_wide_get_locale'(345218 call(345213 call .(345210 call .(366521 call . this[347103] c"dom") c"dist") c"targetLocales") localeIdx[345452]))))
          {
            { const locDom[345226] "const"(345225 call(345220 call .(366526 call . this[347103] c"dom") c"getLocDom") localeIdx[345452])(345229 'end of statement')(345249 call =(345234 call(413520 call . this[347103] c"locArr") localeIdx[345452])(345237 'new'(_chpl_manager = unmanaged[220](?))(345248 call LocSparseBlockArr[413495](?)(413527 call . this[347103] c"eltType")(413532 call . this[347103] c"rank")(413537 call . this[347103] c"idxType")(413542 call . this[347103] c"stridable")(413547 call . this[347103] c"sparseLayoutType") locDom[345226](initElts = initElts[345187]))))
              if(345267 call _cond_test(345257 call == thisid[345196](345254 call .(366529 call here[90435]) c"id")))
              {(345264 call =(413555 call . this[347103] c"myLocArr")(345263 call(413560 call . this[347103] c"locArr") localeIdx[345452]))
              }
            }(345428 call _downEndCount _coforallCount[345426] nil[44])(345280 'coforall on block' 0 tmp[345275])
          } label _continueLabel[345438] _indexOfInterest[345433] _iterator[345434]
        } label _breakLabel[345439]
        Defer
        {
          {(345470 call _endCountFree _coforallCount[345426])
          }
        }(345475 call _waitEndCount _coforallCount[345426] 0)
      }
    }
  } function SparseBlockArr[347097](?).dsiElementInitializationComplete[345508](arg _mt[347109]:_MT[238], arg this[347107]:SparseBlockArr[347097](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345550] "expr temp" "maybe ref" "no copy" "temp"(345553 'move' tmpIter[345550](345515 call .(345512 call .(366545 call . this[347107] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345711] "maybe param" "temp"(345726 'move' isRngDomArr[345711](345724 call ||(345713 call isBoundedRange tmpIter[345550])(345722 call ||(345716 call isDomain tmpIter[345550])(345719 call isArray tmpIter[345550]))))
      if isRngDomArr[345711]
      { const _coforallCount[345583] "const" "end count" "temp"(345648 'move' _coforallCount[345583](345645 call _endCountAlloc 0)) unknown numTasks[345584] "temp"(345632 'move' numTasks[345584](345628 call . tmpIter[345550] c"size"))(345623 call _upEndCount _coforallCount[345583] 0 numTasks[345584]) unknown _indexOfInterest[345590] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345591] "expr temp" "temp"(345600 'move' _iterator[345591](345598 call _getIterator tmpIter[345550]))
        Defer
        {
          {(345616 call _freeIterator _iterator[345591])
          }
        }
        { scopeless type(345605 'move' _indexOfInterest[345590](345602 call iteratorIndex _iterator[345591]))
        }
        ForLoop[345592]
        { unknown localeIdx[345609] "coforall index var" "index var" "insert auto destroy"(345611 'move' localeIdx[345609] _indexOfInterest[345590]) const tmp[345556] "const" "temp"(345558 'move' tmp[345556](345560 'deref'(345561 '_wide_get_locale'(345563 call(413626 call . this[347107] c"locArr") localeIdx[345609]))))
          {
            {(345581 call(345571 call .(345573 call .(345575 call postfix!(345577 call(413632 call . this[347107] c"locArr") localeIdx[345609])) c"myElems") c"dsiElementInitializationComplete"))
            }(345585 call _downEndCount _coforallCount[345583] nil[44])(345566 'coforall on block' 0 tmp[345556])
          } label _continueLabel[345595] _indexOfInterest[345590] _iterator[345591]
        } label _breakLabel[345596]
        Defer
        {
          {(345635 call _endCountFree _coforallCount[345583])
          }
        }(345640 call _waitEndCount _coforallCount[345583] 0 numTasks[345584])
      }
      { const _coforallCount[345652] "const" "end count" "temp"(345708 'move' _coforallCount[345652](345705 call _endCountAlloc 0)) unknown _indexOfInterest[345659] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345660] "expr temp" "temp"(345669 'move' _iterator[345660](345667 call _getIterator tmpIter[345550]))
        Defer
        {
          {(345685 call _freeIterator _iterator[345660])
          }
        }
        { scopeless type(345674 'move' _indexOfInterest[345659](345671 call iteratorIndex _iterator[345660]))
        }
        ForLoop[345661]
        { unknown localeIdx[345678] "coforall index var" "index var" "insert auto destroy"(345680 'move' localeIdx[345678] _indexOfInterest[345659])(345692 call _upEndCount _coforallCount[345652] 0) const tmp[345541] "const" "temp"(345543 'move' tmp[345541](345539 'deref'(345538 '_wide_get_locale'(345521 call(413614 call . this[347107] c"locArr") localeIdx[345678]))))
          {
            {(345535 call(345531 call .(345528 call .(345526 call postfix!(345525 call(413620 call . this[347107] c"locArr") localeIdx[345678])) c"myElems") c"dsiElementInitializationComplete"))
            }(345654 call _downEndCount _coforallCount[345652] nil[44])(345546 'coforall on block' 0 tmp[345541])
          } label _continueLabel[345664] _indexOfInterest[345659] _iterator[345660]
        } label _breakLabel[345665]
        Defer
        {
          {(345696 call _endCountFree _coforallCount[345652])
          }
        }(345701 call _waitEndCount _coforallCount[345652] 0)
      }
    }
  } function SparseBlockArr[347097](?).dsiElementDeinitializationComplete[345735](arg _mt[347113]:_MT[238], arg this[347111]:SparseBlockArr[347097](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345777] "expr temp" "maybe ref" "no copy" "temp"(345780 'move' tmpIter[345777](345742 call .(345739 call .(366550 call . this[347111] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345938] "maybe param" "temp"(345953 'move' isRngDomArr[345938](345951 call ||(345940 call isBoundedRange tmpIter[345777])(345949 call ||(345943 call isDomain tmpIter[345777])(345946 call isArray tmpIter[345777]))))
      if isRngDomArr[345938]
      { const _coforallCount[345810] "const" "end count" "temp"(345875 'move' _coforallCount[345810](345872 call _endCountAlloc 0)) unknown numTasks[345811] "temp"(345859 'move' numTasks[345811](345855 call . tmpIter[345777] c"size"))(345850 call _upEndCount _coforallCount[345810] 0 numTasks[345811]) unknown _indexOfInterest[345817] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345818] "expr temp" "temp"(345827 'move' _iterator[345818](345825 call _getIterator tmpIter[345777]))
        Defer
        {
          {(345843 call _freeIterator _iterator[345818])
          }
        }
        { scopeless type(345832 'move' _indexOfInterest[345817](345829 call iteratorIndex _iterator[345818]))
        }
        ForLoop[345819]
        { unknown localeIdx[345836] "coforall index var" "index var" "insert auto destroy"(345838 'move' localeIdx[345836] _indexOfInterest[345817]) const tmp[345783] "const" "temp"(345785 'move' tmp[345783](345787 'deref'(345788 '_wide_get_locale'(345790 call(413650 call . this[347111] c"locArr") localeIdx[345836]))))
          {
            {(345808 call(345798 call .(345800 call .(345802 call postfix!(345804 call(413656 call . this[347111] c"locArr") localeIdx[345836])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(345812 call _downEndCount _coforallCount[345810] nil[44])(345793 'coforall on block' 0 tmp[345783])
          } label _continueLabel[345822] _indexOfInterest[345817] _iterator[345818]
        } label _breakLabel[345823]
        Defer
        {
          {(345862 call _endCountFree _coforallCount[345810])
          }
        }(345867 call _waitEndCount _coforallCount[345810] 0 numTasks[345811])
      }
      { const _coforallCount[345879] "const" "end count" "temp"(345935 'move' _coforallCount[345879](345932 call _endCountAlloc 0)) unknown _indexOfInterest[345886] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345887] "expr temp" "temp"(345896 'move' _iterator[345887](345894 call _getIterator tmpIter[345777]))
        Defer
        {
          {(345912 call _freeIterator _iterator[345887])
          }
        }
        { scopeless type(345901 'move' _indexOfInterest[345886](345898 call iteratorIndex _iterator[345887]))
        }
        ForLoop[345888]
        { unknown localeIdx[345905] "coforall index var" "index var" "insert auto destroy"(345907 'move' localeIdx[345905] _indexOfInterest[345886])(345919 call _upEndCount _coforallCount[345879] 0) const tmp[345768] "const" "temp"(345770 'move' tmp[345768](345766 'deref'(345765 '_wide_get_locale'(345748 call(413638 call . this[347111] c"locArr") localeIdx[345905]))))
          {
            {(345762 call(345758 call .(345755 call .(345753 call postfix!(345752 call(413644 call . this[347111] c"locArr") localeIdx[345905])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(345881 call _downEndCount _coforallCount[345879] nil[44])(345773 'coforall on block' 0 tmp[345768])
          } label _continueLabel[345891] _indexOfInterest[345886] _iterator[345887]
        } label _breakLabel[345892]
        Defer
        {
          {(345923 call _endCountFree _coforallCount[345879])
          }
        }(345928 call _waitEndCount _coforallCount[345879] 0)
      }
    }
  } function SparseBlockArr[347097](?).dsiDestroyArr[345966](arg _mt[347117]:_MT[238], arg this[347115]:SparseBlockArr[347097](?), arg deinitElts[345963] : bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[346034] "expr temp" "maybe ref" "no copy" "temp"(346037 'move' tmpIter[346034](345973 call .(345970 call .(366555 call . this[347115] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[346217] "maybe param" "temp"(346232 'move' isRngDomArr[346217](346230 call ||(346219 call isBoundedRange tmpIter[346034])(346228 call ||(346222 call isDomain tmpIter[346034])(346225 call isArray tmpIter[346034]))))
      if isRngDomArr[346217]
      { const _coforallCount[346089] "const" "end count" "temp"(346154 'move' _coforallCount[346089](346151 call _endCountAlloc 0)) unknown numTasks[346090] "temp"(346138 'move' numTasks[346090](346134 call . tmpIter[346034] c"size"))(346129 call _upEndCount _coforallCount[346089] 0 numTasks[346090]) unknown _indexOfInterest[346096] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346097] "expr temp" "temp"(346106 'move' _iterator[346097](346104 call _getIterator tmpIter[346034]))
        Defer
        {
          {(346122 call _freeIterator _iterator[346097])
          }
        }
        { scopeless type(346111 'move' _indexOfInterest[346096](346108 call iteratorIndex _iterator[346097]))
        }
        ForLoop[346098]
        { unknown localeIdx[346115] "coforall index var" "index var" "insert auto destroy"(346117 'move' localeIdx[346115] _indexOfInterest[346096]) const tmp[346040] "const" "temp"(346042 'move' tmp[346040](346044 'deref'(346045 '_wide_get_locale'(346047 call(413678 call . this[347115] c"locArr") localeIdx[346115]))))
          {
            { unknown arr[346055](346057 call(413684 call . this[347115] c"locArr") localeIdx[346115])(346060 'end of statement')
              if(346062 call _cond_test deinitElts[345963])
              {(346067 call _deinitElements(346069 call .(346071 call postfix! arr[346055]) c"myElems"))
              }(346084 call(346076 call .(346078 call .(346080 call postfix! arr[346055]) c"myElems") c"dsiElementDeinitializationComplete"))(346086 call chpl__delete arr[346055])
            }(346091 call _downEndCount _coforallCount[346089] nil[44])(346050 'coforall on block' 0 tmp[346040])
          } label _continueLabel[346101] _indexOfInterest[346096] _iterator[346097]
        } label _breakLabel[346102]
        Defer
        {
          {(346141 call _endCountFree _coforallCount[346089])
          }
        }(346146 call _waitEndCount _coforallCount[346089] 0 numTasks[346090])
      }
      { const _coforallCount[346158] "const" "end count" "temp"(346214 'move' _coforallCount[346158](346211 call _endCountAlloc 0)) unknown _indexOfInterest[346165] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346166] "expr temp" "temp"(346175 'move' _iterator[346166](346173 call _getIterator tmpIter[346034]))
        Defer
        {
          {(346191 call _freeIterator _iterator[346166])
          }
        }
        { scopeless type(346180 'move' _indexOfInterest[346165](346177 call iteratorIndex _iterator[346166]))
        }
        ForLoop[346167]
        { unknown localeIdx[346184] "coforall index var" "index var" "insert auto destroy"(346186 'move' localeIdx[346184] _indexOfInterest[346165])(346198 call _upEndCount _coforallCount[346158] 0) const tmp[346025] "const" "temp"(346027 'move' tmp[346025](346023 'deref'(346022 '_wide_get_locale'(345979 call(413662 call . this[347115] c"locArr") localeIdx[346184]))))
          {
            { unknown arr[345984](345983 call(413668 call . this[347115] c"locArr") localeIdx[346184])(345987 'end of statement')
              if(346000 call _cond_test deinitElts[345963])
              {(345998 call _deinitElements(345994 call .(345992 call postfix! arr[345984]) c"myElems"))
              }(346015 call(346011 call .(346008 call .(346006 call postfix! arr[345984]) c"myElems") c"dsiElementDeinitializationComplete"))(346019 call chpl__delete arr[345984])
            }(346160 call _downEndCount _coforallCount[346158] nil[44])(346030 'coforall on block' 0 tmp[346025])
          } label _continueLabel[346170] _indexOfInterest[346165] _iterator[346166]
        } label _breakLabel[346171]
        Defer
        {
          {(346202 call _endCountFree _coforallCount[346158])
          }
        }(346207 call _waitEndCount _coforallCount[346158] 0)
      }
    }
  } function SparseBlockArr[347097](?).these[346241](arg _mt[347121]:_MT[238], arg this[347119]:SparseBlockArr[347097](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346324] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346325] "expr temp" "temp"(346334 'move' _iterator[346325](346332 call _getIterator(346248 call .(346245 call .(366560 call . this[347119] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(346351 call _freeIterator _iterator[346325])
        }
      }
      { scopeless type(346340 'move' _indexOfInterest[346324](346337 call iteratorIndex _iterator[346325]))
      }
      ForLoop[346326]
      { unknown locI[346344] "index var" "insert auto destroy"(346346 'move' locI[346344] _indexOfInterest[346324])
        { unknown locDom[346260](346258 call postfix!(346257 call(346252 call .(366565 call . this[347119] c"dom") c"locDoms") locI[346344]))(346263 'end of statement') unknown locArrI[346271](346269 call postfix!(346268 call(413695 call . this[347119] c"locArr") locI[346344]))(346274 'end of statement')
          { unknown _indexOfInterest[346290] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346291] "expr temp" "temp"(346300 'move' _iterator[346291](346298 call _getIterator(346277 call . locDom[346260] c"mySparseBlock")))
            Defer
            {
              {(346317 call _freeIterator _iterator[346291])
              }
            }
            { scopeless type(346306 'move' _indexOfInterest[346290](346303 call iteratorIndex _iterator[346291]))
            }
            ForLoop[346292]
            { unknown x[346310] "index var" "insert auto destroy"(346312 'move' x[346310] _indexOfInterest[346290])
              {(346287 yield(346286 call(346281 call . locArrI[346271] c"myElems") x[346310]))
              } label _continueLabel[346295] _indexOfInterest[346290] _iterator[346291]
            } label _breakLabel[346296]
          }
        } label _continueLabel[346329] _indexOfInterest[346324] _iterator[346325]
      } label _breakLabel[346330]
    }
  } function SparseBlockArr[347097](?).these[346367](arg _mt[347125]:_MT[238], arg this[347123]:SparseBlockArr[347097](?), param arg tag[346364] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346387] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346388] "expr temp" "temp"(346397 'move' _iterator[346388](346395 call _getIterator(346383 call(346378 call .(366573 call . this[347123] c"dom") c"these") tag[346364])))
      Defer
      {
        {(346414 call _freeIterator _iterator[346388])
        }
      }
      { scopeless type(346403 'move' _indexOfInterest[346387](346400 call iteratorIndex _iterator[346388]))
      }
      ForLoop[346389]
      { unknown followThis[346407] "index var" "insert auto destroy"(346409 'move' followThis[346407] _indexOfInterest[346387])(346385 yield followThis[346407]) label _continueLabel[346392] _indexOfInterest[346387] _iterator[346388]
      } label _breakLabel[346393]
    }
  }
  {(346374 call == tag[346364] leader[447])
  } function SparseBlockArr[347097](?).these[346431](arg _mt[347129]:_MT[238], arg this[347127]:SparseBlockArr[347097](?), param arg tag[346428] : iterKind[453], arg followThis[346433]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[346448] "temp" followThis[346433](346455 call _check_tuple_var_decl tmp[346448] 2) unknown locFollowThis[346442](346449 call tmp[346448] 0) unknown localeIndex[346444](346452 call tmp[346448] 1)(346460 'end of statement')
    { unknown _indexOfInterest[346489] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346490] "expr temp" "temp"(346499 'move' _iterator[346490](346497 call _getIterator(346473 call(346467 call .(346466 call locFollowThis[346442] 0) c"these") tag[346428] locFollowThis[346442])))
      Defer
      {
        {(346516 call _freeIterator _iterator[346490])
        }
      }
      { scopeless type(346505 'move' _indexOfInterest[346489](346502 call iteratorIndex _iterator[346490]))
      }
      ForLoop[346491]
      { unknown i[346509] "index var" "insert auto destroy"(346511 'move' i[346509] _indexOfInterest[346489])
        {(346486 yield(346485 call(346480 call .(346478 call postfix!(346477 call(413712 call . this[347127] c"locArr") localeIndex[346444])) c"dsiAccess") i[346509]))
        } label _continueLabel[346494] _indexOfInterest[346489] _iterator[346490]
      } label _breakLabel[346495]
    }
  }
  {(346440 call == tag[346428] follower[449])
  } function SparseBlockArr[347097](?).these[346532](arg _mt[347133]:_MT[238], arg this[347131]:SparseBlockArr[347097](?), param arg tag[346529] : iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[346593] "expr temp" "maybe ref" "no copy" "temp"(346596 'move' tmpIter[346593](413727 call . this[347131] c"locArr")) unknown isRngDomArr[346752] "maybe param" "temp"(346767 'move' isRngDomArr[346752](346765 call ||(346754 call isBoundedRange tmpIter[346593])(346763 call ||(346757 call isDomain tmpIter[346593])(346760 call isArray tmpIter[346593]))))
      if isRngDomArr[346752]
      { const _coforallCount[346624] "const" "end count" "temp"(346689 'move' _coforallCount[346624](346686 call _endCountAlloc 0)) unknown numTasks[346625] "temp"(346673 'move' numTasks[346625](346669 call . tmpIter[346593] c"size"))(346664 call _upEndCount _coforallCount[346624] 0 numTasks[346625]) unknown _indexOfInterest[346631] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346632] "expr temp" "temp"(346641 'move' _iterator[346632](346639 call _getIterator tmpIter[346593]))
        Defer
        {
          {(346657 call _freeIterator _iterator[346632])
          }
        }
        { scopeless type(346646 'move' _indexOfInterest[346631](346643 call iteratorIndex _iterator[346632]))
        }
        ForLoop[346633]
        { unknown locA[346650] "coforall index var" "index var" "insert auto destroy"(346652 'move' locA[346650] _indexOfInterest[346631]) const tmp[346599] "const" "temp"(346601 'move' tmp[346599](346603 'deref'(346604 '_wide_get_locale' locA[346650])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346615] "index var" "insert auto destroy"
                iterated expressions:
                  (346618 call .(346620 call postfix! locA[346650]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346612 yield i[346615])
                }
              }
            }(346626 call _downEndCount _coforallCount[346624] nil[44])(346607 'coforall on block' 0 tmp[346599])
          } label _continueLabel[346636] _indexOfInterest[346631] _iterator[346632]
        } label _breakLabel[346637]
        Defer
        {
          {(346676 call _endCountFree _coforallCount[346624])
          }
        }(346681 call _waitEndCount _coforallCount[346624] 0 numTasks[346625])
      }
      { const _coforallCount[346693] "const" "end count" "temp"(346749 'move' _coforallCount[346693](346746 call _endCountAlloc 0)) unknown _indexOfInterest[346700] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346701] "expr temp" "temp"(346710 'move' _iterator[346701](346708 call _getIterator tmpIter[346593]))
        Defer
        {
          {(346726 call _freeIterator _iterator[346701])
          }
        }
        { scopeless type(346715 'move' _indexOfInterest[346700](346712 call iteratorIndex _iterator[346701]))
        }
        ForLoop[346702]
        { unknown locA[346719] "coforall index var" "index var" "insert auto destroy"(346721 'move' locA[346719] _indexOfInterest[346700])(346733 call _upEndCount _coforallCount[346693] 0) const tmp[346585] "const" "temp"(346587 'move' tmp[346585](346583 'deref'(346582 '_wide_get_locale' locA[346719])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346578] "index var" "insert auto destroy"
                iterated expressions:
                  (346570 call .(346568 call postfix! locA[346719]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346574 yield i[346578])
                }
              }
            }(346695 call _downEndCount _coforallCount[346693] nil[44])(346590 'coforall on block' 0 tmp[346585])
          } label _continueLabel[346705] _indexOfInterest[346700] _iterator[346701]
        } label _breakLabel[346706]
        Defer
        {
          {(346737 call _endCountFree _coforallCount[346693])
          }
        }(346742 call _waitEndCount _coforallCount[346693] 0)
      }
    }
  }
  {(346561 call &&(346539 call == tag[346529] standalone[451])(346560 'method call resolves'(346555 call .(346552 call .(346550 call postfix!(346549 call(413721 call . this[347131] c"locArr")(346545 call .(366580 call . this[347131] c"locArrDom") c"low"))) c"myElems") c"_value") "these" tag[346529]))
  } function SparseBlockArr[347097](?).dsiAccess[346784](arg _mt[347137]:_MT[238], arg this[347135]:SparseBlockArr[347097](?), arg i[346781] :(346779 call *(413738 call . this[347135] c"rank")(413743 call . this[347135] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(346819 call _cond_test(346805 call &&(346788 call !=(413748 call . this[347135] c"myLocArr") nil[44])(346804 call(346799 call .(346796 call .(346793 call .(346791 call postfix!(413753 call . this[347135] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346781])))
        {(346816 return(346815 call(346810 call .(346808 call postfix!(413759 call . this[347135] c"myLocArr")) c"dsiAccess") i[346781]))
        }
      }(346826 'local block')
    }(346849 return(346848 call(346843 call .(346841 call postfix!(346840 call(413765 call . this[347135] c"locArr")(346838 call(346833 call .(346830 call .(366585 call . this[347135] c"dom") c"dist") c"targetLocsIdx") i[346781]))) c"dsiAccess") i[346781]))
  } function SparseBlockArr[347097](?).dsiAccess[346862](arg _mt[347141]:_MT[238], arg this[347139]:SparseBlockArr[347097](?), arg i[346859] :(346857 call *(413772 call . this[347139] c"rank")(413777 call . this[347139] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    {
      {
        if(346901 call _cond_test(346887 call &&(346870 call !=(413787 call . this[347139] c"myLocArr") nil[44])(346886 call(346881 call .(346878 call .(346875 call .(346873 call postfix!(413792 call . this[347139] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346859])))
        {(346898 return(346897 call(346892 call .(346890 call postfix!(413798 call . this[347139] c"myLocArr")) c"dsiAccess") i[346859]))
        }
      }(346908 'local block')
    }(346931 return(346930 call(346925 call .(346923 call postfix!(346922 call(413804 call . this[347139] c"locArr")(346920 call(346915 call .(346912 call .(366590 call . this[347139] c"dom") c"dist") c"targetLocsIdx") i[346859]))) c"dsiAccess") i[346859]))
  }
  {(346867 call shouldReturnRvalueByValue(413782 call . this[347139] c"eltType"))
  } function SparseBlockArr[347097](?).dsiAccess[346945](arg _mt[347145]:_MT[238], arg this[347143]:SparseBlockArr[347097](?), arg i[346942] :(346940 call *(413811 call . this[347143] c"rank")(413816 call . this[347143] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(346984 call _cond_test(346970 call &&(346953 call !=(413826 call . this[347143] c"myLocArr") nil[44])(346969 call(346964 call .(346961 call .(346958 call .(346956 call postfix!(413831 call . this[347143] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346942])))
        {(346981 return(346980 call(346975 call .(346973 call postfix!(413837 call . this[347143] c"myLocArr")) c"dsiAccess") i[346942]))
        }
      }(346991 'local block')
    }(347014 return(347013 call(347008 call .(347006 call postfix!(347005 call(413843 call . this[347143] c"locArr")(347003 call(346998 call .(346995 call .(366595 call . this[347143] c"dom") c"dist") c"targetLocsIdx") i[346942]))) c"dsiAccess") i[346942]))
  }
  {(346950 call shouldReturnRvalueByConstRef(413821 call . this[347143] c"eltType"))
  } function SparseBlockArr[347097](?).dsiAccess[347027](arg _mt[347149]:_MT[238], arg this[347147]:SparseBlockArr[347097](?), arg i[347023] ... :(413850 call . this[347147] c"idxType")) ref : _unknown[51] "method" "primary method"
  {(347033 return(347032 call(413859 call . this[347147] c"dsiAccess") i[347023]))
  } function SparseBlockArr[347097](?).dsiAccess[347046](arg _mt[347153]:_MT[238], arg this[347151]:SparseBlockArr[347097](?), arg i[347042] ... :(413865 call . this[347151] c"idxType")) : _unknown[51] "method" "primary method"
  {(347056 return(347055 call(413879 call . this[347151] c"dsiAccess") i[347042]))
  }
  {(347051 call shouldReturnRvalueByValue(413875 call . this[347151] c"eltType"))
  } function SparseBlockArr[347097](?).dsiAccess[347070](arg _mt[347157]:_MT[238], arg this[347155]:SparseBlockArr[347097](?), arg i[347066] ... :(413885 call . this[347155] c"idxType")) const ref : _unknown[51] "method" "primary method"
  {(347080 return(347079 call(413899 call . this[347155] c"dsiAccess") i[347066]))
  }
  {(347075 call shouldReturnRvalueByConstRef(413895 call . this[347155] c"eltType"))
  } function SparseBlockArr[347097](?).dsiGetBaseDom[347088](arg _mt[347161]:_MT[238], arg this[347159]:SparseBlockArr[347097](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(347091 return(413905 call . this[347159] c"dom"))
  } type SparseBlockArr[347097](?) val super[355716]:BaseSparseArr[149857](?) "super class" unknown stridable[345066] "param" bool[10] unknown sparseLayoutType[345072] "type variable" unmanaged DefaultDist[415355] unknown locArrDom[345081](345079 call chpl__buildDomainRuntimeType defaultDist[94050] rank[149828] idxType[149832]) unknown locArr[345101](345099 call chpl__buildArrayRuntimeType(345097 call chpl__ensureDomainExpr locArrDom[345081])(345094 call unmanaged LocSparseBlockArr?[415481](?) eltType[149671] rank[149828] idxType[149832] stridable[345066] sparseLayoutType[345072])) unknown myLocArr[345115](345112 call unmanaged LocSparseBlockArr?[415481](?) eltType[149671] rank[149828] idxType[149832] stridable[345066] sparseLayoutType[345072]) type SparseBlockArr[413334](?) function LocSparseBlockArr[347406](?).init[347214](arg _mt[347410]:_MT[238], arg this[347408]:LocSparseBlockArr[347406](?), arg eltType[347212]:_any[178](?), param arg rank[347217] : int(64)[13], arg idxType[347220]:_any[178](?), param arg stridable[347223] : bool[10], arg sparseLayoutType[347226]:_any[178](?), const arg locDom[347236] :(347234 call unmanaged LocSparseBlockDom[415484](?) rank[347217] idxType[347220] stridable[347223] sparseLayoutType[347226]), param arg initElts[347240] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(347248 call =(347244 call . this[347408] c"eltType") eltType[347212])(347257 call =(347253 call . this[347408] c"rank") rank[347217])(347265 call =(347261 call . this[347408] c"idxType") idxType[347220])(347273 call =(347269 call . this[347408] c"stridable") stridable[347223])(347281 call =(347277 call . this[347408] c"sparseLayoutType") sparseLayoutType[347226])(347289 call =(347285 call . this[347408] c"locDom") locDom[347236])(347308 call =(347293 call . this[347408] c"myElems")(347307 call(347300 call .(347297 call . locDom[347236] c"mySparseBlock") c"buildArray") eltType[347212](initElts = initElts[347240])))
  } function LocSparseBlockArr[347406](?).deinit[347315](arg _mt[347414]:_MT[238], arg this[347412]:LocSparseBlockArr[347406](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  } function LocSparseBlockArr[347406](?).dsiAccess[347324](arg _mt[347418]:_MT[238], arg this[347416]:LocSparseBlockArr[347406](?), arg i[347322]:_any[178](?)) ref : _unknown[51] "method" "primary method"
  {(347330 return(347329 call(413929 call . this[347416] c"myElems") i[347322]))
  } function LocSparseBlockArr[347406](?).dsiAccess[347339](arg _mt[347422]:_MT[238], arg this[347420]:LocSparseBlockArr[347406](?), arg i[347337]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(347349 return(347348 call(413940 call . this[347420] c"myElems") i[347337]))
  }
  {(347344 call shouldReturnRvalueByValue(413935 call . this[347420] c"eltType"))
  } function LocSparseBlockArr[347406](?).dsiAccess[347359](arg _mt[347426]:_MT[238], arg this[347424]:LocSparseBlockArr[347406](?), arg i[347357]:_any[178](?)) const ref : _unknown[51] "method" "primary method"
  {(347369 return(347368 call(413951 call . this[347424] c"myElems") i[347357]))
  }
  {(347364 call shouldReturnRvalueByConstRef(413946 call . this[347424] c"eltType"))
  } function LocSparseBlockArr[347406](?).writeThis[347379](arg _mt[347430]:_MT[238], arg this[347428]:LocSparseBlockArr[347406](?), arg f[347377]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(347400 call halt "LocSparseBlockArr.writeThis() is not implemented / should not be needed")
  } type LocSparseBlockArr[347406](?) val super[355718]:object[22] "super class" unknown eltType[347165] "type variable" unknown rank[347169] "param" int(64)[13] unknown idxType[347173] "type variable" unknown stridable[347177] "param" bool[10] unknown sparseLayoutType[347181] "type variable" const locDom[347192] "const"(347190 call unmanaged LocSparseBlockDom[415484](?) rank[347169] idxType[347173] stridable[347177] sparseLayoutType[347181]) unknown myElems[347206] "local field" "unsafe"(347204 call chpl__buildArrayRuntimeType(347202 call chpl__ensureDomainExpr(347197 call . locDom[347192] c"mySparseBlock")) eltType[347165]) type unmanaged LocSparseBlockArr?[415481](?) type LocSparseBlockArr?[415478](?) type LocSparseBlockArr[413495](?) function SparseBlockArr[347097](?).dsiSerialWrite[347438](arg _mt[347443]:_MT[238], arg this[347440]:SparseBlockArr[347097](?) : SparseBlockArr[347097](?), arg f[347436]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(347547 call _cond_test(347447 call ==(413957 call . this[347440] c"rank") 1))
    {(347451 call <~> f[347436] "[")
      { unknown _indexOfInterest[347487] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347488] "expr temp" "temp"(347497 'move' _iterator[347488](347495 call _getIterator(413963 call . this[347440] c"locArr")))
        Defer
        {
          {(347513 call _freeIterator _iterator[347488])
          }
        }
        { scopeless type(347502 'move' _indexOfInterest[347487](347499 call iteratorIndex _iterator[347488]))
        }
        ForLoop[347489]
        { unknown locarr[347506] "index var" "insert auto destroy"(347508 'move' locarr[347506] _indexOfInterest[347487])
          {
            if(347482 call _cond_test(347463 call .(347460 call .(347458 call postfix! locarr[347506]) c"locDom") c"dsiNumIndices"))
            {(347468 call <~> f[347436] " ")(347480 call(347475 call .(347473 call postfix! locarr[347506]) c"dsiSerialWrite") f[347436])
            }
          } label _continueLabel[347492] _indexOfInterest[347487] _iterator[347488]
        } label _breakLabel[347493]
      }(347522 call <~> f[347436] "]")
    }
    {(347544 call compilerError "Can't write out multidimensional sparse distributed arrays yet")
    }
  } function LocSparseBlockArr[347406](?).dsiSerialWrite[347559](arg _mt[347564]:_MT[238], arg this[347561]:LocSparseBlockArr[347406](?) : LocSparseBlockArr[347406](?), arg f[347557]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(347575 call(347570 call .(347567 call .(366609 call . this[347561] c"myElems") c"_value") c"dsiSerialWrite") f[347557])
  } function SparseBlockDom[344770](?).dsiSupportsPrivatization[347583](arg _mt[347588]:_MT[238], arg this[347585]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?)) param : _unknown[51] "method" "method overrides"
  {(347591 return 1)
  } function SparseBlockDom[344770](?).dsiGetPrivatizeData[347599](arg _mt[347604]:_MT[238], arg this[347601]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?)) : _unknown[51] "method"
  {(347619 return(347617 call _build_tuple(347607 call .(366614 call . this[347601] c"dist") c"pid")(347615 call(347611 call .(366619 call . this[347601] c"whole") c"dims"))))
  } function SparseBlockDom[344770](?).dsiPrivatize[347629](arg _mt[347634]:_MT[238], arg this[347631]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?), arg privatizeData[347627]:_any[178](?)) : _unknown[51] "method"
  { unknown privdist[347645](347644 call chpl_getPrivatizedCopy(347638 'typeof'(413974 call . this[347631] c"dist"))(347643 call privatizeData[347627] 0))(347648 'end of statement') unknown c[347673](347652 'new'(_chpl_manager = unmanaged[220](?))(347672 call SparseBlockDom[409148](?)(rank =(413981 call . this[347631] c"rank"))(idxType =(413986 call . this[347631] c"idxType"))(sparseLayoutType =(413991 call . this[347631] c"sparseLayoutType"))(stridable =(347662 call .(366624 call . this[347631] c"parentDom") c"stridable"))(dist = privdist[347645])(whole =(413997 call . this[347631] c"whole"))(parentDom =(414002 call . this[347631] c"parentDom"))))(347676 'end of statement')
    { unknown _indexOfInterest[347738] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347739] "expr temp" "temp"(347748 'move' _iterator[347739](347746 call _getIterator(347682 call .(347679 call . c[347673] c"dist") c"targetLocDom")))
      Defer
      {
        {(347765 call _freeIterator _iterator[347739])
        }
      }
      { scopeless type(347754 'move' _indexOfInterest[347738](347751 call iteratorIndex _iterator[347739]))
      }
      ForLoop[347740]
      { unknown i[347758] "index var" "insert auto destroy"(347760 'move' i[347758] _indexOfInterest[347738])
        {(347696 call =(347691 call(347686 call . c[347673] c"locDoms") i[347758])(347695 call(414008 call . this[347631] c"locDoms") i[347758]))
          if(347733 call _cond_test(347715 call ==(347710 '_wide_get_node'(347706 call(347701 call . c[347673] c"locDoms") i[347758]))(347712 call .(366630 call here[90435]) c"id")))
          {(347730 call =(347720 call . c[347673] c"myLocDom")(347729 call(347724 call . c[347673] c"locDoms") i[347758]))
          }
        } label _continueLabel[347743] _indexOfInterest[347738] _iterator[347739]
      } label _breakLabel[347744]
    }(347784 call =(347773 call . c[347673] c"whole")(347782 call chpl__buildDomainExpr(347780 'expand_tuple'(347779 call privatizeData[347627] 1))))(347788 return c[347673])
  } function SparseBlockDom[344770](?).dsiGetReprivatizeData[347795](arg _mt[347800]:_MT[238], arg this[347797]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?)) : _unknown[51] "method"
  {(347808 return(347807 call(347803 call .(366637 call . this[347797] c"whole") c"dims")))
  } function SparseBlockDom[344770](?).dsiReprivatize[347818](arg _mt[347825]:_MT[238], arg this[347822]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?), arg other[347816]:_any[178](?), arg reprivatizeData[347820]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown _indexOfInterest[347846] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347847] "expr temp" "temp"(347856 'move' _iterator[347847](347854 call _getIterator(347829 call .(366642 call . this[347822] c"dist") c"targetLocDom")))
      Defer
      {
        {(347873 call _freeIterator _iterator[347847])
        }
      }
      { scopeless type(347862 'move' _indexOfInterest[347846](347859 call iteratorIndex _iterator[347847]))
      }
      ForLoop[347848]
      { unknown i[347866] "index var" "insert auto destroy"(347868 'move' i[347866] _indexOfInterest[347846])(347843 call =(347835 call(414018 call . this[347822] c"locDoms") i[347866])(347842 call(347837 call . other[347816] c"locDoms") i[347866])) label _continueLabel[347851] _indexOfInterest[347846] _iterator[347847]
      } label _breakLabel[347852]
    }(347887 call =(414025 call . this[347822] c"whole")(347885 call chpl__buildDomainExpr(347883 'expand_tuple' reprivatizeData[347820])))
  } function SparseBlockArr[347097](?).dsiSupportsPrivatization[347895](arg _mt[347900]:_MT[238], arg this[347897]:SparseBlockArr[347097](?) : SparseBlockArr[347097](?)) param : _unknown[51] "method" "method overrides"
  {(347903 return 1)
  } function SparseBlockArr[347097](?).dsiGetPrivatizeData[347911](arg _mt[347916]:_MT[238], arg this[347913]:SparseBlockArr[347097](?) : SparseBlockArr[347097](?)) : _unknown[51] "method"
  {(347922 return(347919 call .(366648 call . this[347913] c"dom") c"pid"))
  } function SparseBlockArr[347097](?).dsiPrivatize[347932](arg _mt[347937]:_MT[238], arg this[347934]:SparseBlockArr[347097](?) : SparseBlockArr[347097](?), arg privatizeData[347930]:_any[178](?)) : _unknown[51] "method"
  { unknown privdom[347945](347944 call chpl_getPrivatizedCopy(347941 'typeof'(414031 call . this[347934] c"dom")) privatizeData[347930])(347948 'end of statement') unknown c[347968](347952 'new'(_chpl_manager = unmanaged[220](?))(347967 call SparseBlockArr[413334](?)(sparseLayoutType =(414038 call . this[347934] c"sparseLayoutType"))(eltType =(414043 call . this[347934] c"eltType"))(rank =(414048 call . this[347934] c"rank"))(idxType =(414053 call . this[347934] c"idxType"))(stridable =(414058 call . this[347934] c"stridable"))(dom = privdom[347945])))(347971 'end of statement')
    { unknown _indexOfInterest[348036] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348037] "expr temp" "temp"(348046 'move' _iterator[348037](348044 call _getIterator(347980 call .(347977 call .(347974 call . c[347968] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(348063 call _freeIterator _iterator[348037])
        }
      }
      { scopeless type(348052 'move' _indexOfInterest[348036](348049 call iteratorIndex _iterator[348037]))
      }
      ForLoop[348038]
      { unknown localeIdx[348056] "index var" "insert auto destroy"(348058 'move' localeIdx[348056] _indexOfInterest[348036])
        {(347994 call =(347989 call(347984 call . c[347968] c"locArr") localeIdx[348056])(347993 call(414065 call . this[347934] c"locArr") localeIdx[348056]))
          if(348031 call _cond_test(348015 call ==(348010 '_wide_get_node'(348005 call postfix!(348004 call(347999 call . c[347968] c"locArr") localeIdx[348056])))(348012 call .(366654 call here[90435]) c"id")))
          {(348028 call =(348018 call . c[347968] c"myLocArr")(348027 call(348022 call . c[347968] c"locArr") localeIdx[348056]))
          }
        } label _continueLabel[348041] _indexOfInterest[348036] _iterator[348037]
      } label _breakLabel[348042]
    }(348071 return c[347968])
  } function SparseBlockDom[344770](?).numRemoteElems[348080](arg _mt[348087]:_MT[238], arg this[348084]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?), arg rlo[348078]:_any[178](?), arg rid[348082]:_any[178](?)) : _unknown[51] "method"
  { unknown blo[348089](348093 call .(366660 call . this[348084] c"dist") c"idxType") unknown bhi[348096](348100 'typeof' blo[348089])(348101 'end of statement')
    if(348229 call _cond_test(348123 call == rid[348082](348121 call -(348117 call .(348116 call(348108 call .(348105 call .(366665 call . this[348084] c"dist") c"targetLocDom") c"dim")(348113 call -(414076 call . this[348084] c"rank") 1)) c"size") 1)))
    {(348139 call = bhi[348096](348136 call .(348135 call(348127 call .(366670 call . this[348084] c"whole") c"dim")(348132 call -(414082 call . this[348084] c"rank") 1)) c"high"))
    }
    {(348226 call = bhi[348096](348224 call -(348221 call +(348156 call .(348155 call(348147 call .(348144 call .(366675 call . this[348084] c"dist") c"boundingBox") c"dim")(348152 call -(414088 call . this[348084] c"rank") 1)) c"low")(348220 call intCeilXDivByY(348201 call *(348195 call +(348192 call -(348173 call .(348172 call(348164 call .(348161 call .(366680 call . this[348084] c"dist") c"boundingBox") c"dim")(348169 call -(414093 call . this[348084] c"rank") 1)) c"high")(348189 call .(348188 call(348180 call .(348177 call .(366685 call . this[348084] c"dist") c"boundingBox") c"dim")(348185 call -(414098 call . this[348084] c"rank") 1)) c"low")) 1)(348199 call + rid[348082] 1))(348217 call .(348216 call(348208 call .(348205 call .(366690 call . this[348084] c"dist") c"targetLocDom") c"dim")(348213 call -(414104 call . this[348084] c"rank") 1)) c"size"))) 1))
    }(348242 return(348240 call +(348237 call - bhi[348096] rlo[348078]) 1))
  } function SparseBlockDom[344770](?).dsiHasSingleLocalSubdomain[348249](arg _mt[348254]:_MT[238], arg this[348251]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?)) param : _unknown[51] "method"
  {(348257 return 1)
  } function SparseBlockArr[347097](?).dsiHasSingleLocalSubdomain[348265](arg _mt[348270]:_MT[238], arg this[348267]:SparseBlockArr[347097](?) : SparseBlockArr[347097](?)) param : _unknown[51] "method"
  {(348273 return 1)
  } function SparseBlockDom[344770](?).dsiLocalSubdomain[348285](arg _mt[348290]:_MT[238], arg this[348287]:SparseBlockDom[344770](?) : SparseBlockDom[344770](?), arg loc[348282] : locale[28]) : _unknown[51] "method"
  {
    if(348334 call _cond_test(348294 call != loc[348282](414110 call here[90435])))
    {(348332 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    } const tmp[348355] "const" "temp"(348354 call(348349 call .(348346 call .(366695 call . this[348287] c"dist") c"targetLocales") c"find")(414112 call here[90435]))(348362 call _check_tuple_var_decl tmp[348355] 2) const found[348340] "const"(348356 call tmp[348355] 0) const targetIdx[348342] "const"(348359 call tmp[348355] 1)(348367 'end of statement')(348377 return(348374 call .(348372 call postfix!(348371 call(414116 call . this[348287] c"locDoms") targetIdx[348342])) c"mySparseBlock"))
  } function SparseBlockArr[347097](?).dsiLocalSubdomain[348388](arg _mt[348393]:_MT[238], arg this[348390]:SparseBlockArr[347097](?) : SparseBlockArr[347097](?), arg loc[348385] : locale[28]) : _unknown[51] "method"
  {
    if(348405 call _cond_test(348397 call != loc[348385](414121 call here[90435])))
    {(348403 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    }(348420 return(348417 call .(348414 call .(348412 call postfix!(414125 call . this[348390] c"myLocArr")) c"locDom") c"mySparseBlock"))
  }(355498 'used modules list'(352992 'use' ChapelStandard[20264])(341799 'use' DSIUtil[230800])(341802 'use' ChapelUtil[166918])(341805 'use' BlockDist[331218])(341808 'use' RangeChunk[266370])(341811 'use' HaltWrappers[209910])(341814 'use' LayoutCS[341795]))
}