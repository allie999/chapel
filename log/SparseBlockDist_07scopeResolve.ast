AST dump for SparseBlockDist after pass scopeResolve.
Module use list: ChapelStandard DSIUtil ChapelUtil BlockDist RangeChunk HaltWrappers LayoutCS Sort Search 

{ unknown debugSparseBlockDist[341945] "config" "param" 0(341948 'end of statement') unknown debugSparseBlockDistBulkTransfer[341950] "config" "param" 0(341953 'end of statement') function TargetLocaleComparator[342070](?).key[341986](arg _mt[342074]:_MT[238], arg this[342072]:TargetLocaleComparator[342070](?), arg a[341983] :(341981 call chpl__buildIndexType(413088 call . this[342072] c"rank")(413093 call . this[342072] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(342062 call _cond_test(341990 call ==(413098 call . this[342072] c"rank") 2))
    {
      if(342041 call _cond_test(341999 call ==(413103 call . this[342072] c"sparseLayoutType")(341997 call unmanaged CS[415601](?)(compressRows = 0))))
      {(342019 return(342017 call _build_tuple(342007 call(342002 call .(366485 call . this[342072] c"dist") c"targetLocsIdx") a[341983])(342011 call a[341983] 1)(342016 call a[341983] 0)))
      }
      {(342039 return(342037 call _build_tuple(342027 call(342022 call .(366490 call . this[342072] c"dist") c"targetLocsIdx") a[341983])(342031 call a[341983] 0)(342036 call a[341983] 1)))
      }
    }
    {(342059 return(342057 call _build_tuple(342054 call(342049 call .(366495 call . this[342072] c"dist") c"targetLocsIdx") a[341983]) a[341983]))
    }
  } type TargetLocaleComparator[342070](?) unknown rank[341955] "param" unknown idxType[341959] "type variable" unknown sparseLayoutType[341962] "type variable" unknown dist[341972](341970 call unmanaged Block[415574](?) rank[341955] idxType[341959] sparseLayoutType[341962]) function SparseBlockDom[344899](?).setup[342151](arg _mt[344903]:_MT[238], arg this[344901]:SparseBlockDom[344899](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[342158](342157 '_wide_get_node' this[344901])(342161 'end of statement')
    if(342479 call _cond_test(342174 call ==(342172 call(413139 call . this[344901] c"locDoms")(342168 call .(342165 call .(366501 call . this[344901] c"dist") c"targetLocDom") c"low")) nil[44]))
    {
      { unknown tmpIter[342246] "expr temp" "maybe ref" "no copy" "temp"(342249 'move' tmpIter[342246](342178 call .(366506 call . this[344901] c"dist") c"targetLocDom")) unknown isRngDomArr[342437] "maybe param" "temp"(342452 'move' isRngDomArr[342437](342450 call ||(342439 call isBoundedRange tmpIter[342246])(342448 call ||(342442 call isDomain tmpIter[342246])(342445 call isArray tmpIter[342246]))))
        if isRngDomArr[342437]
        { const _coforallCount[342309] "const" "end count" "temp"(342374 'move' _coforallCount[342309](342371 call _endCountAlloc 0)) unknown numTasks[342310] "temp"(342358 'move' numTasks[342310](342354 call . tmpIter[342246] c"size"))(342349 call _upEndCount _coforallCount[342309] 0 numTasks[342310]) unknown _indexOfInterest[342316] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342317] "expr temp" "temp"(342326 'move' _iterator[342317](342324 call _getIterator tmpIter[342246]))
          Defer
          {
            {(342342 call _freeIterator _iterator[342317])
            }
          }
          { scopeless type(342331 'move' _indexOfInterest[342316](342328 call iteratorIndex _iterator[342317]))
          }
          ForLoop[342318]
          { unknown localeIdx[342335] "coforall index var" "index var" "insert auto destroy"(342337 'move' localeIdx[342335] _indexOfInterest[342316]) const tmp[342252] "const" "temp"(342254 'move' tmp[342252](342256 'deref'(342257 '_wide_get_locale'(342262 call(342259 call .(366523 call . this[344901] c"dist") c"targetLocales") localeIdx[342335]))))
            {
              {(342270 call =(342272 call(413191 call . this[344901] c"locDoms") localeIdx[342335])(342274 'new'(_chpl_manager = unmanaged[220](?))(342278 call LocSparseBlockDom[413124](?)(413198 call . this[344901] c"rank")(413203 call . this[344901] c"idxType")(413208 call . this[344901] c"stridable")(413213 call . this[344901] c"sparseLayoutType")(342287 call(342284 call .(366528 call . this[344901] c"dist") c"getChunk")(413218 call . this[344901] c"whole") localeIdx[342335]))))
                if(342291 call _cond_test(342293 call == thisid[342158](342296 call .(366531 call here[90438]) c"id")))
                {(342302 call =(413225 call . this[344901] c"myLocDom")(342305 call(413230 call . this[344901] c"locDoms") localeIdx[342335]))
                }
              }(342311 call _downEndCount _coforallCount[342309] nil[44])(342265 'coforall on block' 0 tmp[342252])
            } label _continueLabel[342321] _indexOfInterest[342316] _iterator[342317]
          } label _breakLabel[342322]
          Defer
          {
            {(342361 call _endCountFree _coforallCount[342309])
            }
          }(342366 call _waitEndCount _coforallCount[342309] 0 numTasks[342310])
        }
        { const _coforallCount[342378] "const" "end count" "temp"(342434 'move' _coforallCount[342378](342431 call _endCountAlloc 0)) unknown _indexOfInterest[342385] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342386] "expr temp" "temp"(342395 'move' _iterator[342386](342393 call _getIterator tmpIter[342246]))
          Defer
          {
            {(342411 call _freeIterator _iterator[342386])
            }
          }
          { scopeless type(342400 'move' _indexOfInterest[342385](342397 call iteratorIndex _iterator[342386]))
          }
          ForLoop[342387]
          { unknown localeIdx[342404] "coforall index var" "index var" "insert auto destroy"(342406 'move' localeIdx[342404] _indexOfInterest[342385])(342418 call _upEndCount _coforallCount[342378] 0) const tmp[342237] "const" "temp"(342239 'move' tmp[342237](342235 'deref'(342234 '_wide_get_locale'(342187 call(342182 call .(366511 call . this[344901] c"dist") c"targetLocales") localeIdx[342404]))))
            {
              {(342210 call =(342191 call(413145 call . this[344901] c"locDoms") localeIdx[342404])(342194 'new'(_chpl_manager = unmanaged[220](?))(342209 call LocSparseBlockDom[413124](?)(413152 call . this[344901] c"rank")(413157 call . this[344901] c"idxType")(413162 call . this[344901] c"stridable")(413167 call . this[344901] c"sparseLayoutType")(342208 call(342202 call .(366516 call . this[344901] c"dist") c"getChunk")(413172 call . this[344901] c"whole") localeIdx[342404]))))
                if(342229 call _cond_test(342219 call == thisid[342158](342216 call .(366519 call here[90438]) c"id")))
                {(342226 call =(413179 call . this[344901] c"myLocDom")(342225 call(413184 call . this[344901] c"locDoms") localeIdx[342404]))
                }
              }(342380 call _downEndCount _coforallCount[342378] nil[44])(342242 'coforall on block' 0 tmp[342237])
            } label _continueLabel[342390] _indexOfInterest[342385] _iterator[342386]
          } label _breakLabel[342391]
          Defer
          {
            {(342422 call _endCountFree _coforallCount[342378])
            }
          }(342427 call _waitEndCount _coforallCount[342378] 0)
        }
      }
    }
    {(342476 call halt "Don't know how to reallocate yet")
    }
  } function SparseBlockDom[344899](?).dsiDestroyDom[342487](arg _mt[344907]:_MT[238], arg this[344905]:SparseBlockDom[344899](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[342518] "expr temp" "maybe ref" "no copy" "temp"(342521 'move' tmpIter[342518](342491 call .(366535 call . this[344905] c"dist") c"targetLocDom")) unknown isRngDomArr[342672] "maybe param" "temp"(342687 'move' isRngDomArr[342672](342685 call ||(342674 call isBoundedRange tmpIter[342518])(342683 call ||(342677 call isDomain tmpIter[342518])(342680 call isArray tmpIter[342518]))))
      if isRngDomArr[342672]
      { const _coforallCount[342544] "const" "end count" "temp"(342609 'move' _coforallCount[342544](342606 call _endCountAlloc 0)) unknown numTasks[342545] "temp"(342593 'move' numTasks[342545](342589 call . tmpIter[342518] c"size"))(342584 call _upEndCount _coforallCount[342544] 0 numTasks[342545]) unknown _indexOfInterest[342551] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342552] "expr temp" "temp"(342561 'move' _iterator[342552](342559 call _getIterator tmpIter[342518]))
        Defer
        {
          {(342577 call _freeIterator _iterator[342552])
          }
        }
        { scopeless type(342566 'move' _indexOfInterest[342551](342563 call iteratorIndex _iterator[342552]))
        }
        ForLoop[342553]
        { unknown localeIdx[342570] "coforall index var" "index var" "insert auto destroy"(342572 'move' localeIdx[342570] _indexOfInterest[342551]) const tmp[342524] "const" "temp"(342526 'move' tmp[342524](342528 'deref'(342529 '_wide_get_locale'(342531 call(413248 call . this[344905] c"locDoms") localeIdx[342570]))))
          {(342539 call chpl__delete(342541 call(413254 call . this[344905] c"locDoms") localeIdx[342570]))(342546 call _downEndCount _coforallCount[342544] nil[44])(342534 'coforall on block' 0 tmp[342524])
          } label _continueLabel[342556] _indexOfInterest[342551] _iterator[342552]
        } label _breakLabel[342557]
        Defer
        {
          {(342596 call _endCountFree _coforallCount[342544])
          }
        }(342601 call _waitEndCount _coforallCount[342544] 0 numTasks[342545])
      }
      { const _coforallCount[342613] "const" "end count" "temp"(342669 'move' _coforallCount[342613](342666 call _endCountAlloc 0)) unknown _indexOfInterest[342620] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342621] "expr temp" "temp"(342630 'move' _iterator[342621](342628 call _getIterator tmpIter[342518]))
        Defer
        {
          {(342646 call _freeIterator _iterator[342621])
          }
        }
        { scopeless type(342635 'move' _indexOfInterest[342620](342632 call iteratorIndex _iterator[342621]))
        }
        ForLoop[342622]
        { unknown localeIdx[342639] "coforall index var" "index var" "insert auto destroy"(342641 'move' localeIdx[342639] _indexOfInterest[342620])(342653 call _upEndCount _coforallCount[342613] 0) const tmp[342509] "const" "temp"(342511 'move' tmp[342509](342507 'deref'(342506 '_wide_get_locale'(342497 call(413236 call . this[344905] c"locDoms") localeIdx[342639]))))
          {(342503 call chpl__delete(342501 call(413242 call . this[344905] c"locDoms") localeIdx[342639]))(342615 call _downEndCount _coforallCount[342613] nil[44])(342514 'coforall on block' 0 tmp[342509])
          } label _continueLabel[342625] _indexOfInterest[342620] _iterator[342621]
        } label _breakLabel[342626]
        Defer
        {
          {(342657 call _endCountFree _coforallCount[342613])
          }
        }(342662 call _waitEndCount _coforallCount[342613] 0)
      }
    }
  } function SparseBlockDom[344899](?).getNNZ[342696](arg _mt[344911]:_MT[238], arg this[344909]:SparseBlockDom[344899](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(342719 return(342717 'reduce' SumReduceScanOp[376415](?)(342713 [  ld[342715]  in (413262 call . this[344909] c"locDoms") ]
    {(342710 call .(342707 call .(342703 call postfix! ld[342715]) c"mySparseBlock") c"size")
    } ) 0))
  } function SparseBlockDom[344899](?).dsiAdd[342733](arg _mt[344915]:_MT[238], arg this[344913]:SparseBlockDom[344899](?), arg ind[342730] :(342728 call *(413268 call . this[344913] c"rank")(413273 call . this[344913] c"idxType"))) : _unknown[51] "method" "primary method"
  { unknown _retval[342736] 0(342739 'end of statement') const tmp[342774] "const" "temp"(342776 'move' tmp[342774](342772 'deref'(342771 '_wide_get_locale'(342747 call(342742 call .(366540 call . this[344913] c"dist") c"dsiIndexToLocale") ind[342730]))))
    {
      {(342767 call = _retval[342736](342766 call(342761 call .(342759 call postfix!(342758 call(413280 call . this[344913] c"locDoms")(342756 call(342751 call .(366545 call . this[344913] c"dist") c"targetLocsIdx") ind[342730]))) c"dsiAdd") ind[342730]))
      }(342779 'on block' 0 tmp[342774])
    }(342783 return _retval[342736])
  } function SparseBlockDom[344899](?).dsiAdd[342793](arg _mt[344919]:_MT[238], arg this[344917]:SparseBlockDom[344899](?), arg ind[342790] :(413288 call . this[344917] c"idxType")) : _unknown[51] "method" "primary method"
  {(342808 return(342807 call(413292 call . this[344917] c"dsiAdd")(342804 call _build_tuple ind[342790])))
  }
  {(342800 call ==(342796 call . this[344917] c"rank") 1)
  } function SparseBlockDom[344899](?).dsiFirst[342816](arg _mt[344923]:_MT[238], arg this[344921]:SparseBlockDom[344899](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342837 return(342835 'reduce' MinReduceScanOp[376536](?)(342831 [  l[342833]  in (413300 call . this[344921] c"locDoms") ]
    {(342828 call .(342825 call .(342823 call postfix! l[342833]) c"mySparseBlock") c"first")
    } ) 0))
  } function SparseBlockDom[344899](?).dsiLast[342844](arg _mt[344927]:_MT[238], arg this[344925]:SparseBlockDom[344899](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342865 return(342863 'reduce' MaxReduceScanOp[376492](?)(342859 [  l[342861]  in (413308 call . this[344925] c"locDoms") ]
    {(342856 call .(342853 call .(342851 call postfix! l[342861]) c"mySparseBlock") c"last")
    } ) 0))
  } function SparseBlockDom[344899](?).bulkAdd_help[342885](arg _mt[344931]:_MT[238], arg this[344929]:SparseBlockDom[344899](?), arg inds[342882] :(342880 call chpl__buildArrayRuntimeType unknown indsDom[342872](342878 call chpl__buildIndexType(413314 call . this[344929] c"rank")(413319 call . this[344929] c"idxType"))), arg dataSorted[342888] = 0, arg isUnique[342892] = 0, arg addOn[342896] = nilLocale[89942]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(342985 call _cond_test(342908 call != addOn[342896] nilLocale[89942]))
    { unknown retval[342911] 0(342914 'end of statement') const tmp[342974] "const" "temp"(342976 'move' tmp[342974](342972 'deref'(342971 '_wide_get_locale' addOn[342896])))
      {
        {
          if(342966 call _cond_test(342922 call ==(342919 call chpl_localeID_to_locale(342918 '_wide_get_locale' inds[342882]))(413327 call here[90438])))
          {(342931 call = retval[342911](342930 call(413333 call . this[344929] c"bulkAddHere_help") inds[342882] dataSorted[342888] isUnique[342892]))
          }
          { unknown _local_inds[342946](342944 call chpl__buildArrayRuntimeType(342942 call chpl__ensureDomainExpr indsDom[342872])(342940 call chpl__buildIndexType(413342 call . this[344929] c"rank")(413347 call . this[344929] c"idxType")))(342949 'end of statement')(342953 call = _local_inds[342946] inds[342882])(342963 call = retval[342911](342962 call(413354 call . this[344929] c"bulkAddHere_help") _local_inds[342946] dataSorted[342888] isUnique[342892]))
          }
        }(342979 'on block' 0 tmp[342974])
      }(342983 return retval[342911])
    } unknown comp[343001](342989 'new'(343000 call TargetLocaleComparator[342070](?)(rank =(413364 call . this[344929] c"rank"))(idxType =(413369 call . this[344929] c"idxType"))(sparseLayoutType =(413374 call . this[344929] c"sparseLayoutType"))(dist =(413379 call . this[344929] c"dist"))))(343004 'end of statement')
    if(343015 call _cond_test(343006 call ! dataSorted[342888]))
    {(343013 call sort inds[342882](comparator = comp[343001]))
    } unknown localeRanges[343030](343028 call chpl__buildArrayRuntimeType(343026 call chpl__ensureDomainExpr(343021 call .(366551 call . this[344929] c"dist") c"targetLocDom")) range[64319](?))(343033 'end of statement') const tmp[343241] "const" "temp"(343243 'move' tmp[343241](343239 'deref'(343238 '_wide_get_locale' inds[342882])))
    {
      {
        { unknown _indexOfInterest[343203] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343204] "expr temp" "temp"(343213 'move' _iterator[343204](343211 call _getIterator(343037 call .(366556 call . this[344929] c"dist") c"targetLocDom")))
          Defer
          {
            {(343230 call _freeIterator _iterator[343204])
            }
          }
          { scopeless type(343219 'move' _indexOfInterest[343203](343216 call iteratorIndex _iterator[343204]))
          }
          ForLoop[343205]
          { unknown l[343223] "index var" "insert auto destroy"(343225 'move' l[343223] _indexOfInterest[343203])
            { const blockval[343052] "const"(343049 call .(343046 call .(343044 call postfix!(343043 call(413389 call . this[344929] c"locDoms") l[343223])) c"mySparseBlock") c"_value")(343055 'end of statement') const _first[343064] "const"(343061 call .(343058 call . blockval[343052] c"parentDom") c"first")(343067 'end of statement') const _last[343075] "const"(343072 call .(343069 call . blockval[343052] c"parentDom") c"last")(343078 'end of statement') unknown tmp[343090] "temp"(343089 call binarySearch inds[342882] _first[343064] comp[343001])(343097 call _check_tuple_var_decl tmp[343090] 2) unknown foundFirst[343079](343091 call tmp[343090] 0) unknown locFirst[343081](343094 call tmp[343090] 1)(343102 'end of statement') unknown tmp[343114] "temp"(343113 call binarySearch inds[342882] _last[343075] comp[343001])(343121 call _check_tuple_var_decl tmp[343114] 2) unknown foundLast[343103](343115 call tmp[343114] 0) unknown locLast[343105](343118 call tmp[343114] 1)(343126 'end of statement')
              if(343135 call _cond_test(343128 call ! foundLast[343103]))
              {(343132 call -= locLast[343105] 1)
              }
              if(343161 call _cond_test(343148 call ==(343144 call .(343141 call .(366563 call . this[344929] c"dist") c"targetLocDom") c"first") l[343223]))
              {(343158 call = locFirst[343081](343155 call .(343152 call . inds[342882] c"_dom") c"first"))
              }
              if(343187 call _cond_test(343174 call ==(343170 call .(343167 call .(366569 call . this[344929] c"dist") c"targetLocDom") c"last") l[343223]))
              {(343184 call = locLast[343105](343181 call .(343178 call . inds[342882] c"_dom") c"last"))
              }(343200 call =(343195 call localeRanges[343030] l[343223])(343198 call chpl_build_bounded_range locFirst[343081] locLast[343105]))
            } label _continueLabel[343208] _indexOfInterest[343203] _iterator[343204]
          } label _breakLabel[343209]
        }
      }(343246 'on block' 0 tmp[343241])
    } unknown _totalAdded[343252](343250 call chpl__atomicType int(64)[13])(343255 'end of statement')
    { unknown tmpIter[343319] "expr temp" "maybe ref" "no copy" "temp"(343322 'move' tmpIter[343319](343258 call .(366575 call . this[344929] c"dist") c"targetLocDom")) unknown isRngDomArr[343502] "maybe param" "temp"(343517 'move' isRngDomArr[343502](343515 call ||(343504 call isBoundedRange tmpIter[343319])(343513 call ||(343507 call isDomain tmpIter[343319])(343510 call isArray tmpIter[343319]))))
      if isRngDomArr[343502]
      { const _coforallCount[343374] "const" "end count" "temp"(343439 'move' _coforallCount[343374](343436 call _endCountAlloc 0)) unknown numTasks[343375] "temp"(343423 'move' numTasks[343375](343419 call . tmpIter[343319] c"size"))(343414 call _upEndCount _coforallCount[343374] 0 numTasks[343375]) unknown _indexOfInterest[343381] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343382] "expr temp" "temp"(343391 'move' _iterator[343382](343389 call _getIterator tmpIter[343319]))
        Defer
        {
          {(343407 call _freeIterator _iterator[343382])
          }
        }
        { scopeless type(343396 'move' _indexOfInterest[343381](343393 call iteratorIndex _iterator[343382]))
        }
        ForLoop[343383]
        { unknown l[343400] "coforall index var" "index var" "insert auto destroy"(343402 'move' l[343400] _indexOfInterest[343381]) const tmp[343325] "const" "temp"(343327 'move' tmp[343325](343329 'deref'(343330 '_wide_get_locale'(343335 call(343332 call .(366586 call . this[344929] c"dist") c"targetLocales") l[343400]))))
          {
            { const _retval[343343] "const"(343355 call(343345 call .(343347 call .(343349 call postfix!(343351 call(413423 call . this[344929] c"locDoms") l[343400])) c"mySparseBlock") c"bulkAdd")(343357 call inds[342882](343359 call localeRanges[343030] l[343400]))(dataSorted = 1)(isUnique = 0))(343366 'end of statement')(343371 call(343368 call . _totalAdded[343252] c"add") _retval[343343])
            }(343376 call _downEndCount _coforallCount[343374] nil[44])(343338 'coforall on block' 0 tmp[343325])
          } label _continueLabel[343386] _indexOfInterest[343381] _iterator[343382]
        } label _breakLabel[343387]
        Defer
        {
          {(343426 call _endCountFree _coforallCount[343374])
          }
        }(343431 call _waitEndCount _coforallCount[343374] 0 numTasks[343375])
      }
      { const _coforallCount[343443] "const" "end count" "temp"(343499 'move' _coforallCount[343443](343496 call _endCountAlloc 0)) unknown _indexOfInterest[343450] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343451] "expr temp" "temp"(343460 'move' _iterator[343451](343458 call _getIterator tmpIter[343319]))
        Defer
        {
          {(343476 call _freeIterator _iterator[343451])
          }
        }
        { scopeless type(343465 'move' _indexOfInterest[343450](343462 call iteratorIndex _iterator[343451]))
        }
        ForLoop[343452]
        { unknown l[343469] "coforall index var" "index var" "insert auto destroy"(343471 'move' l[343469] _indexOfInterest[343450])(343483 call _upEndCount _coforallCount[343443] 0) const tmp[343311] "const" "temp"(343313 'move' tmp[343311](343309 'deref'(343308 '_wide_get_locale'(343267 call(343262 call .(366580 call . this[344929] c"dist") c"targetLocales") l[343469]))))
          {
            { const _retval[343295] "const"(343294 call(343279 call .(343274 call .(343272 call postfix!(343271 call(413412 call . this[344929] c"locDoms") l[343469])) c"mySparseBlock") c"bulkAdd")(343288 call inds[342882](343286 call localeRanges[343030] l[343469]))(dataSorted = 1)(isUnique = 0))(343298 'end of statement')(343306 call(343301 call . _totalAdded[343252] c"add") _retval[343295])
            }(343445 call _downEndCount _coforallCount[343443] nil[44])(343316 'coforall on block' 0 tmp[343311])
          } label _continueLabel[343455] _indexOfInterest[343450] _iterator[343451]
        } label _breakLabel[343456]
        Defer
        {
          {(343487 call _endCountFree _coforallCount[343443])
          }
        }(343492 call _waitEndCount _coforallCount[343443] 0)
      }
    } const _retval[343527] "const"(343526 call(343522 call . _totalAdded[343252] c"read"))(343530 'end of statement')(343532 return _retval[343527])(355637 'used modules list'(342900 'use' Sort[267989])(342904 'use' Search[291262]))
  } function SparseBlockDom[344899](?).bulkAddHere_help[343549](arg _mt[344935]:_MT[238], arg this[344933]:SparseBlockDom[344899](?), arg inds[343546] :(343543 call chpl__buildArrayRuntimeType nil[44](343541 call chpl__buildIndexType(413434 call . this[344933] c"rank")(413439 call . this[344933] c"idxType"))), arg dataSorted[343552] = 0, arg isUnique[343556] = 0) : _unknown[51] "method" "primary method"
  { const _retval[343575] "const"(343574 call(343565 call .(343562 call .(343560 call postfix!(413444 call . this[344933] c"myLocDom")) c"mySparseBlock") c"bulkAdd") inds[343546](dataSorted = 1)(isUnique = 0))(343578 'end of statement')(343581 return _retval[343575])
  } function SparseBlockDom[344899](?).dsiSerialWrite[343589](arg _mt[344939]:_MT[238], arg this[344937]:SparseBlockDom[344899](?), arg f[343587]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(343690 call _cond_test(343593 call ==(413451 call . this[344937] c"rank") 1))
    {(343597 call <~> f[343587] "{")
      { unknown _indexOfInterest[343630] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343631] "expr temp" "temp"(343640 'move' _iterator[343631](343638 call _getIterator(413457 call . this[344937] c"locDoms")))
        Defer
        {
          {(343656 call _freeIterator _iterator[343631])
          }
        }
        { scopeless type(343645 'move' _indexOfInterest[343630](343642 call iteratorIndex _iterator[343631]))
        }
        ForLoop[343632]
        { unknown locdom[343649] "index var" "insert auto destroy"(343651 'move' locdom[343649] _indexOfInterest[343630])
          {
            if(343625 call _cond_test(343606 call .(343604 call postfix! locdom[343649]) c"dsiNumIndices"))
            {(343611 call <~> f[343587] " ")(343623 call(343618 call .(343616 call postfix! locdom[343649]) c"dsiSerialWrite") f[343587])
            }
          } label _continueLabel[343635] _indexOfInterest[343630] _iterator[343631]
        } label _breakLabel[343636]
      }(343665 call <~> f[343587] "}")
    }
    {(343687 call compilerError "Can't write out multidimensional sparse distributed domains yet")
    }
  } function SparseBlockDom[344899](?).dsiBuildArray[343701](arg _mt[344943]:_MT[238], arg this[344941]:SparseBlockDom[344899](?), arg eltType[343699]:_any[178](?), param arg initElts[343704] : bool[10]) : _unknown[51] "method" "primary method"
  { unknown arr[343728](343709 'new'(_chpl_manager = unmanaged[220](?))(343727 call SparseBlockArr[413466](?)(eltType = eltType[343699])(rank =(413472 call . this[344941] c"rank"))(idxType =(413477 call . this[344941] c"idxType"))(stridable =(413482 call . this[344941] c"stridable"))(sparseLayoutType =(413487 call . this[344941] c"sparseLayoutType"))(dom =(343725 call _to_unmanaged this[344941]))))(343731 'end of statement')(343739 call(343734 call . arr[343728] c"setup") initElts[343704])(343742 return arr[343728])
  } function SparseBlockDom[344899](?).getLocDom[343750](arg _mt[344947]:_MT[238], arg this[344945]:SparseBlockDom[344899](?), arg localeIdx[343748]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(343758 return(343756 call postfix!(343755 call(413495 call . this[344945] c"locDoms") localeIdx[343748])))
  } function SparseBlockDom[344899](?).these[343765](arg _mt[344951]:_MT[238], arg this[344949]:SparseBlockDom[344899](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[343818] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343819] "expr temp" "temp"(343828 'move' _iterator[343819](343826 call _getIterator(413501 call . this[344949] c"locDoms")))
      Defer
      {
        {(343844 call _freeIterator _iterator[343819])
        }
      }
      { scopeless type(343833 'move' _indexOfInterest[343818](343830 call iteratorIndex _iterator[343819]))
      }
      ForLoop[343820]
      { unknown locDom[343837] "index var" "insert auto destroy"(343839 'move' locDom[343837] _indexOfInterest[343818])
        { unknown _indexOfInterest[343784] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343785] "expr temp" "temp"(343794 'move' _iterator[343785](343792 call _getIterator(343780 call(343776 call .(343773 call .(343771 call postfix! locDom[343837]) c"mySparseBlock") c"these"))))
          Defer
          {
            {(343811 call _freeIterator _iterator[343785])
            }
          }
          { scopeless type(343800 'move' _indexOfInterest[343784](343797 call iteratorIndex _iterator[343785]))
          }
          ForLoop[343786]
          { unknown x[343804] "index var" "insert auto destroy"(343806 'move' x[343804] _indexOfInterest[343784])(343782 yield x[343804]) label _continueLabel[343789] _indexOfInterest[343784] _iterator[343785]
          } label _breakLabel[343790]
        } label _continueLabel[343823] _indexOfInterest[343818] _iterator[343819]
      } label _breakLabel[343824]
    }
  } function SparseBlockDom[344899](?).these[343860](arg _mt[344955]:_MT[238], arg this[344953]:SparseBlockDom[344899](?), param arg tag[343857] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[343951] "expr temp" "maybe ref" "no copy" "temp"(343954 'move' tmpIter[343951](343880 call _build_tuple(413510 call . this[344953] c"locDoms")(343877 call .(366595 call . this[344953] c"dist") c"targetLocDom"))) unknown isRngDomArr[344175] "maybe param" "temp"(344190 'move' isRngDomArr[344175](344188 call ||(344177 call isBoundedRange tmpIter[343951])(344186 call ||(344180 call isDomain tmpIter[343951])(344183 call isArray tmpIter[343951]))))
      if isRngDomArr[344175]
      { const _coforallCount[344019] "const" "end count" "temp"(344098 'move' _coforallCount[344019](344095 call _endCountAlloc 0)) unknown numTasks[344020] "temp"(344082 'move' numTasks[344020](344078 call . tmpIter[343951] c"size"))(344073 call _upEndCount _coforallCount[344019] 0 numTasks[344020]) unknown _indexOfInterest[344026] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344027] "expr temp" "temp"(344036 'move' _iterator[344027](344034 call _getIteratorZip tmpIter[343951]))
        Defer
        {
          {(344066 call _freeIterator _iterator[344027])
          }
        }
        { scopeless type(344041 'move' _indexOfInterest[344026](344038 call iteratorIndex _iterator[344027]))
        }
        ForLoop[344028]
        {(344046 call _check_tuple_var_decl _indexOfInterest[344026] 2) unknown locDom[344052] "coforall index var" "index var" "insert auto destroy"(344054 'move' locDom[344052](344050 call _indexOfInterest[344026] 0)) unknown localeIndex[344059] "coforall index var" "index var" "insert auto destroy"(344061 'move' localeIndex[344059](344057 call _indexOfInterest[344026] 1)) const tmp[343957] "const" "temp"(343959 'move' tmp[343957](343961 'deref'(343962 '_wide_get_locale' locDom[344052])))
          {
            {
              { unknown _indexOfInterest[343970] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343972] "expr temp" "temp"(343974 'move' _iterator[343972](343977 call _getIterator(343987 call(343979 call .(343981 call .(343983 call postfix! locDom[344052]) c"mySparseBlock") c"these") tag[343857])))
                Defer
                {
                  {(343991 call _freeIterator _iterator[343972])
                  }
                }
                { scopeless type(343995 'move' _indexOfInterest[343970](343998 call iteratorIndex _iterator[343972]))
                }
                ForLoop[344000]
                { unknown followThis[344003] "index var" "insert auto destroy"(344005 'move' followThis[344003] _indexOfInterest[343970])
                  {(344009 yield(344011 call _build_tuple followThis[344003] localeIndex[344059]))
                  } label _continueLabel[344014] _indexOfInterest[343970] _iterator[343972]
                } label _breakLabel[344016]
              }
            }(344021 call _downEndCount _coforallCount[344019] nil[44])(343965 'coforall on block' 0 tmp[343957])
          } label _continueLabel[344031] _indexOfInterest[344026] _iterator[344027]
        } label _breakLabel[344032]
        Defer
        {
          {(344085 call _endCountFree _coforallCount[344019])
          }
        }(344090 call _waitEndCount _coforallCount[344019] 0 numTasks[344020])
      }
      { const _coforallCount[344102] "const" "end count" "temp"(344172 'move' _coforallCount[344102](344169 call _endCountAlloc 0)) unknown _indexOfInterest[344109] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344110] "expr temp" "temp"(344119 'move' _iterator[344110](344117 call _getIteratorZip tmpIter[343951]))
        Defer
        {
          {(344149 call _freeIterator _iterator[344110])
          }
        }
        { scopeless type(344124 'move' _indexOfInterest[344109](344121 call iteratorIndex _iterator[344110]))
        }
        ForLoop[344111]
        {(344129 call _check_tuple_var_decl _indexOfInterest[344109] 2) unknown locDom[344135] "coforall index var" "index var" "insert auto destroy"(344137 'move' locDom[344135](344133 call _indexOfInterest[344109] 0)) unknown localeIndex[344142] "coforall index var" "index var" "insert auto destroy"(344144 'move' localeIndex[344142](344140 call _indexOfInterest[344109] 1))(344156 call _upEndCount _coforallCount[344102] 0) const tmp[343941] "const" "temp"(343943 'move' tmp[343941](343939 'deref'(343938 '_wide_get_locale' locDom[344135])))
          {
            {
              { unknown _indexOfInterest[343903] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343904] "expr temp" "temp"(343913 'move' _iterator[343904](343911 call _getIterator(343894 call(343889 call .(343886 call .(343884 call postfix! locDom[344135]) c"mySparseBlock") c"these") tag[343857])))
                Defer
                {
                  {(343930 call _freeIterator _iterator[343904])
                  }
                }
                { scopeless type(343919 'move' _indexOfInterest[343903](343916 call iteratorIndex _iterator[343904]))
                }
                ForLoop[343905]
                { unknown followThis[343923] "index var" "insert auto destroy"(343925 'move' followThis[343923] _indexOfInterest[343903])
                  {(343900 yield(343898 call _build_tuple followThis[343923] localeIndex[344142]))
                  } label _continueLabel[343908] _indexOfInterest[343903] _iterator[343904]
                } label _breakLabel[343909]
              }
            }(344104 call _downEndCount _coforallCount[344102] nil[44])(343946 'coforall on block' 0 tmp[343941])
          } label _continueLabel[344114] _indexOfInterest[344109] _iterator[344110]
        } label _breakLabel[344115]
        Defer
        {
          {(344160 call _endCountFree _coforallCount[344102])
          }
        }(344165 call _waitEndCount _coforallCount[344102] 0)
      }
    }
  }
  {(343867 call == tag[343857] leader[447])
  } function SparseBlockDom[344899](?).these[344204](arg _mt[344959]:_MT[238], arg this[344957]:SparseBlockDom[344899](?), param arg tag[344201] : iterKind[453], arg followThis[344206]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[344221] "temp" followThis[344206](344228 call _check_tuple_var_decl tmp[344221] 2) unknown locFollowThis[344215](344222 call tmp[344221] 0) unknown localeIndex[344217](344225 call tmp[344221] 1)(344233 'end of statement')
    { unknown _indexOfInterest[344250] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344251] "expr temp" "temp"(344260 'move' _iterator[344251](344258 call _getIterator(344246 call(344240 call .(344239 call locFollowThis[344215] 0) c"these") tag[344201] locFollowThis[344215])))
      Defer
      {
        {(344277 call _freeIterator _iterator[344251])
        }
      }
      { scopeless type(344266 'move' _indexOfInterest[344250](344263 call iteratorIndex _iterator[344251]))
      }
      ForLoop[344252]
      { unknown i[344270] "index var" "insert auto destroy"(344272 'move' i[344270] _indexOfInterest[344250])(344248 yield i[344270]) label _continueLabel[344255] _indexOfInterest[344250] _iterator[344251]
      } label _breakLabel[344256]
    }
  }
  {(344213 call == tag[344201] follower[449])
  } function SparseBlockDom[344899](?).these[344293](arg _mt[344963]:_MT[238], arg this[344961]:SparseBlockDom[344899](?), param arg tag[344290] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[344358] "expr temp" "maybe ref" "no copy" "temp"(344361 'move' tmpIter[344358](413545 call . this[344961] c"locDoms")) unknown isRngDomArr[344517] "maybe param" "temp"(344532 'move' isRngDomArr[344517](344530 call ||(344519 call isBoundedRange tmpIter[344358])(344528 call ||(344522 call isDomain tmpIter[344358])(344525 call isArray tmpIter[344358]))))
      if isRngDomArr[344517]
      { const _coforallCount[344389] "const" "end count" "temp"(344454 'move' _coforallCount[344389](344451 call _endCountAlloc 0)) unknown numTasks[344390] "temp"(344438 'move' numTasks[344390](344434 call . tmpIter[344358] c"size"))(344429 call _upEndCount _coforallCount[344389] 0 numTasks[344390]) unknown _indexOfInterest[344396] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344397] "expr temp" "temp"(344406 'move' _iterator[344397](344404 call _getIterator tmpIter[344358]))
        Defer
        {
          {(344422 call _freeIterator _iterator[344397])
          }
        }
        { scopeless type(344411 'move' _indexOfInterest[344396](344408 call iteratorIndex _iterator[344397]))
        }
        ForLoop[344398]
        { unknown locDom[344415] "coforall index var" "index var" "insert auto destroy"(344417 'move' locDom[344415] _indexOfInterest[344396]) const tmp[344364] "const" "temp"(344366 'move' tmp[344364](344368 'deref'(344369 '_wide_get_locale' locDom[344415])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344380] "index var" "insert auto destroy"
                iterated expressions:
                  (344383 call .(344385 call postfix! locDom[344415]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344377 yield i[344380])
                }
              }
            }(344391 call _downEndCount _coforallCount[344389] nil[44])(344372 'coforall on block' 0 tmp[344364])
          } label _continueLabel[344401] _indexOfInterest[344396] _iterator[344397]
        } label _breakLabel[344402]
        Defer
        {
          {(344441 call _endCountFree _coforallCount[344389])
          }
        }(344446 call _waitEndCount _coforallCount[344389] 0 numTasks[344390])
      }
      { const _coforallCount[344458] "const" "end count" "temp"(344514 'move' _coforallCount[344458](344511 call _endCountAlloc 0)) unknown _indexOfInterest[344465] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344466] "expr temp" "temp"(344475 'move' _iterator[344466](344473 call _getIterator tmpIter[344358]))
        Defer
        {
          {(344491 call _freeIterator _iterator[344466])
          }
        }
        { scopeless type(344480 'move' _indexOfInterest[344465](344477 call iteratorIndex _iterator[344466]))
        }
        ForLoop[344467]
        { unknown locDom[344484] "coforall index var" "index var" "insert auto destroy"(344486 'move' locDom[344484] _indexOfInterest[344465])(344498 call _upEndCount _coforallCount[344458] 0) const tmp[344349] "const" "temp"(344351 'move' tmp[344349](344347 'deref'(344346 '_wide_get_locale' locDom[344484])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344341] "index var" "insert auto destroy"
                iterated expressions:
                  (344333 call .(344331 call postfix! locDom[344484]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344337 yield i[344341])
                }
              }
            }(344460 call _downEndCount _coforallCount[344458] nil[44])(344354 'coforall on block' 0 tmp[344349])
          } label _continueLabel[344470] _indexOfInterest[344465] _iterator[344466]
        } label _breakLabel[344471]
        Defer
        {
          {(344502 call _endCountFree _coforallCount[344458])
          }
        }(344507 call _waitEndCount _coforallCount[344458] 0)
      }
    }
  }
  {(344324 call &&(344300 call == tag[344290] standalone[451])(344323 'method call resolves'(344318 call .(344315 call .(344313 call postfix!(344312 call(413534 call . this[344961] c"locDoms")(344310 call createTuple(413539 call . this[344961] c"rank") int(64)[13] 0))) c"mySparseBlock") c"_value") "these" tag[344290]))
  } function SparseBlockDom[344899](?).dsiMember[344544](arg _mt[344967]:_MT[238], arg this[344965]:SparseBlockDom[344899](?), arg ind[344542]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown _retval[344549] 0 bool[10](344552 'end of statement') const tmp[344587] "const" "temp"(344589 'move' tmp[344587](344585 'deref'(344584 '_wide_get_locale'(344560 call(344555 call .(366602 call . this[344965] c"dist") c"dsiIndexToLocale") ind[344542]))))
    {
      {(344580 call = _retval[344549](344579 call(344574 call .(344572 call postfix!(344571 call(413558 call . this[344965] c"locDoms")(344569 call(344564 call .(366607 call . this[344965] c"dist") c"targetLocsIdx") ind[344542]))) c"dsiMember") ind[344542]))
      }(344592 'on block' 0 tmp[344587])
    }(344596 return _retval[344549])
  }
  { scopeless type bool[10]
  } function SparseBlockDom[344899](?).dsiClear[344603](arg _mt[344971]:_MT[238], arg this[344969]:SparseBlockDom[344899](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[344628] "expr temp" "maybe ref" "no copy" "temp"(344631 'move' tmpIter[344628](413566 call . this[344969] c"locDoms")) unknown isRngDomArr[344782] "maybe param" "temp"(344797 'move' isRngDomArr[344782](344795 call ||(344784 call isBoundedRange tmpIter[344628])(344793 call ||(344787 call isDomain tmpIter[344628])(344790 call isArray tmpIter[344628]))))
      if isRngDomArr[344782]
      { const _coforallCount[344654] "const" "end count" "temp"(344719 'move' _coforallCount[344654](344716 call _endCountAlloc 0)) unknown numTasks[344655] "temp"(344703 'move' numTasks[344655](344699 call . tmpIter[344628] c"size"))(344694 call _upEndCount _coforallCount[344654] 0 numTasks[344655]) unknown _indexOfInterest[344661] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344662] "expr temp" "temp"(344671 'move' _iterator[344662](344669 call _getIterator tmpIter[344628]))
        Defer
        {
          {(344687 call _freeIterator _iterator[344662])
          }
        }
        { scopeless type(344676 'move' _indexOfInterest[344661](344673 call iteratorIndex _iterator[344662]))
        }
        ForLoop[344663]
        { unknown locDom[344680] "coforall index var" "index var" "insert auto destroy"(344682 'move' locDom[344680] _indexOfInterest[344661]) const tmp[344634] "const" "temp"(344636 'move' tmp[344634](344638 'deref'(344639 '_wide_get_locale' locDom[344680])))
          {(344652 call(344647 call .(344649 call postfix! locDom[344680]) c"dsiClear"))(344656 call _downEndCount _coforallCount[344654] nil[44])(344642 'coforall on block' 0 tmp[344634])
          } label _continueLabel[344666] _indexOfInterest[344661] _iterator[344662]
        } label _breakLabel[344667]
        Defer
        {
          {(344706 call _endCountFree _coforallCount[344654])
          }
        }(344711 call _waitEndCount _coforallCount[344654] 0 numTasks[344655])
      }
      { const _coforallCount[344723] "const" "end count" "temp"(344779 'move' _coforallCount[344723](344776 call _endCountAlloc 0)) unknown _indexOfInterest[344730] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344731] "expr temp" "temp"(344740 'move' _iterator[344731](344738 call _getIterator tmpIter[344628]))
        Defer
        {
          {(344756 call _freeIterator _iterator[344731])
          }
        }
        { scopeless type(344745 'move' _indexOfInterest[344730](344742 call iteratorIndex _iterator[344731]))
        }
        ForLoop[344732]
        { unknown locDom[344749] "coforall index var" "index var" "insert auto destroy"(344751 'move' locDom[344749] _indexOfInterest[344730])(344763 call _upEndCount _coforallCount[344723] 0) const tmp[344620] "const" "temp"(344622 'move' tmp[344620](344618 'deref'(344617 '_wide_get_locale' locDom[344749])))
          {(344615 call(344611 call .(344609 call postfix! locDom[344749]) c"dsiClear"))(344725 call _downEndCount _coforallCount[344723] nil[44])(344625 'coforall on block' 0 tmp[344620])
          } label _continueLabel[344735] _indexOfInterest[344730] _iterator[344731]
        } label _breakLabel[344736]
        Defer
        {
          {(344767 call _endCountFree _coforallCount[344723])
          }
        }(344772 call _waitEndCount _coforallCount[344723] 0)
      }
    }
  } function SparseBlockDom[344899](?).dsiMyDist[344806](arg _mt[344975]:_MT[238], arg this[344973]:SparseBlockDom[344899](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(344809 return(413575 call . this[344973] c"dist"))
  } function SparseBlockDom[344899](?).dsiAssignDomain[344820](arg _mt[344979]:_MT[238], arg this[344977]:SparseBlockDom[344899](?), arg rhs[344817] : _domain[125908](?), arg lhsPrivate[344823] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(344850 call _cond_test(344827 call ! lhsPrivate[344823]))
    {(344848 call halt "SparseBlock domain assignment not yet supported")
    }
    { unknown _indexOfInterest[344863] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344864] "expr temp" "temp"(344873 'move' _iterator[344864](344871 call _getIterator rhs[344817]))
      Defer
      {
        {(344889 call _freeIterator _iterator[344864])
        }
      }
      { scopeless type(344878 'move' _indexOfInterest[344863](344875 call iteratorIndex _iterator[344864]))
      }
      ForLoop[344865]
      { unknown i[344882] "index var" "insert auto destroy"(344884 'move' i[344882] _indexOfInterest[344863])(344861 call(413582 call . this[344977] c"dsiAdd") i[344882]) label _continueLabel[344868] _indexOfInterest[344863] _iterator[344864]
      } label _breakLabel[344869]
    }
  } type SparseBlockDom[344899](?) val super[355843]:BaseSparseDomImpl[148004](?) "super class" unknown sparseLayoutType[342080] "type variable" unknown stridable[342085] "param" 0 bool[10] const dist[342096] "const"(342094 call unmanaged Block[415574](?) rank[148254] idxType[148258] sparseLayoutType[342080]) unknown whole[342110](342108 call chpl__buildDomainRuntimeType defaultDist[94053](rank = rank[148254])(idxType = idxType[148258])(stridable = stridable[342085])) unknown locDoms[342132](342130 call chpl__buildArrayRuntimeType(342128 call chpl__ensureDomainExpr(342115 call . dist[342096] c"targetLocDom"))(342125 call unmanaged LocSparseBlockDom?[415607](?) rank[148254] idxType[148258] stridable[342085] sparseLayoutType[342080])) unknown myLocDom[342145](342142 call unmanaged LocSparseBlockDom?[415607](?) rank[148254] idxType[148258] stridable[342085] sparseLayoutType[342080]) type SparseBlockDom[409280](?) function getDefaultSparseDist[344986](arg sparseLayoutType[344984]:_any[178](?)) : _unknown[51] "private"
  {
    if(345011 call _cond_test(354977 'is_subtype' DefaultDist[378088](?)(344992 call _to_nonnil sparseLayoutType[344984])))
    {(344997 return defaultDist[94053])
    }
    {(345008 return(345000 'new'(345007 call dmap[118245](345002 'new'(345005 call sparseLayoutType[344984])))))
    }
  } function LocSparseBlockDom[345168](?).dsiAdd[345081](arg _mt[345172]:_MT[238], arg this[345170]:LocSparseBlockDom[345168](?), arg ind[345078] :(345076 call *(413600 call . this[345170] c"rank")(413605 call . this[345170] c"idxType"))) : _unknown[51] "method" "primary method"
  {(345090 return(345089 call(345084 call .(366613 call . this[345170] c"mySparseBlock") c"add") ind[345078]))
  } function LocSparseBlockDom[345168](?).dsiMember[345104](arg _mt[345176]:_MT[238], arg this[345174]:LocSparseBlockDom[345168](?), arg ind[345101] :(345099 call *(413611 call . this[345174] c"rank")(413616 call . this[345174] c"idxType"))) : _unknown[51] "method" "primary method"
  {(345113 return(345112 call(345107 call .(366618 call . this[345174] c"mySparseBlock") c"contains") ind[345101]))
  } function LocSparseBlockDom[345168](?).dsiClear[345120](arg _mt[345180]:_MT[238], arg this[345178]:LocSparseBlockDom[345168](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345127 call(345123 call .(366623 call . this[345178] c"mySparseBlock") c"clear"))
  } function LocSparseBlockDom[345168](?).dsiSerialWrite[345136](arg _mt[345184]:_MT[238], arg this[345182]:LocSparseBlockDom[345168](?), arg w[345134]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345149 call(345142 call .(345139 call .(366628 call . this[345182] c"mySparseBlock") c"_value") c"dsiSerialWrite") w[345134](printBrackets = 0))
  } function LocSparseBlockDom[345168](?).dsiNumIndices[345156](arg _mt[345188]:_MT[238], arg this[345186]:LocSparseBlockDom[345168](?)) : _unknown[51] "method" "primary method" "no parens"
  {(345162 return(345159 call .(366633 call . this[345186] c"mySparseBlock") c"size"))
  } type LocSparseBlockDom[345168](?) val super[355845]:object[22] "super class" unknown rank[345020] "param" int(64)[13] unknown idxType[345024] "type variable" unknown stridable[345028] "param" bool[10] unknown sparseLayoutType[345032] "type variable" unknown parentDom[345042](345040 call chpl__buildDomainRuntimeType defaultDist[94053] rank[345020] idxType[345024] stridable[345028]) unknown sparseDist[345050](345049 call getDefaultSparseDist sparseLayoutType[345032]) unknown mySparseBlock[345068](345066 call chpl__distributed sparseDist[345050](345063 call chpl__buildSparseDomainRuntimeType(345060 call . parentDom[345042] c"defaultSparseDist") parentDom[345042])) type unmanaged LocSparseBlockDom[415616](?) type unmanaged LocSparseBlockDom?[415607](?) type LocSparseBlockDom?[415604](?) type LocSparseBlockDom[413124](?) function SparseBlockArr[347227](?).init[345252](arg _mt[347231]:_MT[238], arg this[347229]:SparseBlockArr[347227](?), arg eltType[345250]:_any[178](?), param arg rank[345254]:_any[178](?), arg idxType[345256]:_any[178](?), param arg stridable[345258]:_any[178](?), arg sparseLayoutType[345260]:_any[178](?), arg dom[345262]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345277 call(345265 call .(366638 call . this[347229] c"super") c"init")(eltType = eltType[345250])(rank = rank[345254])(idxType = idxType[345256])(dom = dom[345262]))(345285 call =(345281 call . this[347229] c"stridable") stridable[345258])(345293 call =(345289 call . this[347229] c"sparseLayoutType") sparseLayoutType[345260])(345309 call =(345299 call . this[347229] c"locArrDom")(345306 call .(345303 call . dom[345262] c"dist") c"targetLocDom"))
  } function SparseBlockArr[347227](?).setup[345318](arg _mt[347235]:_MT[238], arg this[347233]:SparseBlockArr[347227](?), param arg initElts[345316]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[345325](345324 '_wide_get_node' this[347233])(345328 'end of statement')
    { unknown tmpIter[345413] "expr temp" "maybe ref" "no copy" "temp"(345416 'move' tmpIter[345413](345335 call .(345332 call .(366647 call . this[347233] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345614] "maybe param" "temp"(345629 'move' isRngDomArr[345614](345627 call ||(345616 call isBoundedRange tmpIter[345413])(345625 call ||(345619 call isDomain tmpIter[345413])(345622 call isArray tmpIter[345413]))))
      if isRngDomArr[345614]
      { const _coforallCount[345486] "const" "end count" "temp"(345551 'move' _coforallCount[345486](345548 call _endCountAlloc 0)) unknown numTasks[345487] "temp"(345535 'move' numTasks[345487](345531 call . tmpIter[345413] c"size"))(345526 call _upEndCount _coforallCount[345486] 0 numTasks[345487]) unknown _indexOfInterest[345493] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345494] "expr temp" "temp"(345503 'move' _iterator[345494](345501 call _getIterator tmpIter[345413]))
        Defer
        {
          {(345519 call _freeIterator _iterator[345494])
          }
        }
        { scopeless type(345508 'move' _indexOfInterest[345493](345505 call iteratorIndex _iterator[345494]))
        }
        ForLoop[345495]
        { unknown localeIdx[345512] "coforall index var" "index var" "insert auto destroy"(345514 'move' localeIdx[345512] _indexOfInterest[345493]) const tmp[345419] "const" "temp"(345421 'move' tmp[345419](345423 'deref'(345424 '_wide_get_locale'(345432 call(345426 call .(345428 call .(366664 call . this[347233] c"dom") c"dist") c"targetLocales") localeIdx[345512]))))
          {
            { const locDom[345440] "const"(345445 call(345442 call .(366669 call . this[347233] c"dom") c"getLocDom") localeIdx[345512])(345448 'end of statement')(345450 call =(345452 call(413700 call . this[347233] c"locArr") localeIdx[345512])(345454 'new'(_chpl_manager = unmanaged[220](?))(345458 call LocSparseBlockArr[413627](?)(413707 call . this[347233] c"eltType")(413712 call . this[347233] c"rank")(413717 call . this[347233] c"idxType")(413722 call . this[347233] c"stridable")(413727 call . this[347233] c"sparseLayoutType") locDom[345440](initElts = initElts[345316]))))
              if(345468 call _cond_test(345470 call == thisid[345325](345473 call .(366672 call here[90438]) c"id")))
              {(345479 call =(413735 call . this[347233] c"myLocArr")(345482 call(413740 call . this[347233] c"locArr") localeIdx[345512]))
              }
            }(345488 call _downEndCount _coforallCount[345486] nil[44])(345435 'coforall on block' 0 tmp[345419])
          } label _continueLabel[345498] _indexOfInterest[345493] _iterator[345494]
        } label _breakLabel[345499]
        Defer
        {
          {(345538 call _endCountFree _coforallCount[345486])
          }
        }(345543 call _waitEndCount _coforallCount[345486] 0 numTasks[345487])
      }
      { const _coforallCount[345555] "const" "end count" "temp"(345611 'move' _coforallCount[345555](345608 call _endCountAlloc 0)) unknown _indexOfInterest[345562] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345563] "expr temp" "temp"(345572 'move' _iterator[345563](345570 call _getIterator tmpIter[345413]))
        Defer
        {
          {(345588 call _freeIterator _iterator[345563])
          }
        }
        { scopeless type(345577 'move' _indexOfInterest[345562](345574 call iteratorIndex _iterator[345563]))
        }
        ForLoop[345564]
        { unknown localeIdx[345581] "coforall index var" "index var" "insert auto destroy"(345583 'move' localeIdx[345581] _indexOfInterest[345562])(345595 call _upEndCount _coforallCount[345555] 0) const tmp[345404] "const" "temp"(345406 'move' tmp[345404](345402 'deref'(345401 '_wide_get_locale'(345347 call(345342 call .(345339 call .(366652 call . this[347233] c"dom") c"dist") c"targetLocales") localeIdx[345581]))))
          {
            { const locDom[345355] "const"(345354 call(345349 call .(366657 call . this[347233] c"dom") c"getLocDom") localeIdx[345581])(345358 'end of statement')(345378 call =(345363 call(413652 call . this[347233] c"locArr") localeIdx[345581])(345366 'new'(_chpl_manager = unmanaged[220](?))(345377 call LocSparseBlockArr[413627](?)(413659 call . this[347233] c"eltType")(413664 call . this[347233] c"rank")(413669 call . this[347233] c"idxType")(413674 call . this[347233] c"stridable")(413679 call . this[347233] c"sparseLayoutType") locDom[345355](initElts = initElts[345316]))))
              if(345396 call _cond_test(345386 call == thisid[345325](345383 call .(366660 call here[90438]) c"id")))
              {(345393 call =(413687 call . this[347233] c"myLocArr")(345392 call(413692 call . this[347233] c"locArr") localeIdx[345581]))
              }
            }(345557 call _downEndCount _coforallCount[345555] nil[44])(345409 'coforall on block' 0 tmp[345404])
          } label _continueLabel[345567] _indexOfInterest[345562] _iterator[345563]
        } label _breakLabel[345568]
        Defer
        {
          {(345599 call _endCountFree _coforallCount[345555])
          }
        }(345604 call _waitEndCount _coforallCount[345555] 0)
      }
    }
  } function SparseBlockArr[347227](?).dsiElementInitializationComplete[345637](arg _mt[347239]:_MT[238], arg this[347237]:SparseBlockArr[347227](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345679] "expr temp" "maybe ref" "no copy" "temp"(345682 'move' tmpIter[345679](345644 call .(345641 call .(366676 call . this[347237] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345840] "maybe param" "temp"(345855 'move' isRngDomArr[345840](345853 call ||(345842 call isBoundedRange tmpIter[345679])(345851 call ||(345845 call isDomain tmpIter[345679])(345848 call isArray tmpIter[345679]))))
      if isRngDomArr[345840]
      { const _coforallCount[345712] "const" "end count" "temp"(345777 'move' _coforallCount[345712](345774 call _endCountAlloc 0)) unknown numTasks[345713] "temp"(345761 'move' numTasks[345713](345757 call . tmpIter[345679] c"size"))(345752 call _upEndCount _coforallCount[345712] 0 numTasks[345713]) unknown _indexOfInterest[345719] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345720] "expr temp" "temp"(345729 'move' _iterator[345720](345727 call _getIterator tmpIter[345679]))
        Defer
        {
          {(345745 call _freeIterator _iterator[345720])
          }
        }
        { scopeless type(345734 'move' _indexOfInterest[345719](345731 call iteratorIndex _iterator[345720]))
        }
        ForLoop[345721]
        { unknown localeIdx[345738] "coforall index var" "index var" "insert auto destroy"(345740 'move' localeIdx[345738] _indexOfInterest[345719]) const tmp[345685] "const" "temp"(345687 'move' tmp[345685](345689 'deref'(345690 '_wide_get_locale'(345692 call(413758 call . this[347237] c"locArr") localeIdx[345738]))))
          {
            {(345710 call(345700 call .(345702 call .(345704 call postfix!(345706 call(413764 call . this[347237] c"locArr") localeIdx[345738])) c"myElems") c"dsiElementInitializationComplete"))
            }(345714 call _downEndCount _coforallCount[345712] nil[44])(345695 'coforall on block' 0 tmp[345685])
          } label _continueLabel[345724] _indexOfInterest[345719] _iterator[345720]
        } label _breakLabel[345725]
        Defer
        {
          {(345764 call _endCountFree _coforallCount[345712])
          }
        }(345769 call _waitEndCount _coforallCount[345712] 0 numTasks[345713])
      }
      { const _coforallCount[345781] "const" "end count" "temp"(345837 'move' _coforallCount[345781](345834 call _endCountAlloc 0)) unknown _indexOfInterest[345788] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345789] "expr temp" "temp"(345798 'move' _iterator[345789](345796 call _getIterator tmpIter[345679]))
        Defer
        {
          {(345814 call _freeIterator _iterator[345789])
          }
        }
        { scopeless type(345803 'move' _indexOfInterest[345788](345800 call iteratorIndex _iterator[345789]))
        }
        ForLoop[345790]
        { unknown localeIdx[345807] "coforall index var" "index var" "insert auto destroy"(345809 'move' localeIdx[345807] _indexOfInterest[345788])(345821 call _upEndCount _coforallCount[345781] 0) const tmp[345670] "const" "temp"(345672 'move' tmp[345670](345668 'deref'(345667 '_wide_get_locale'(345650 call(413746 call . this[347237] c"locArr") localeIdx[345807]))))
          {
            {(345664 call(345660 call .(345657 call .(345655 call postfix!(345654 call(413752 call . this[347237] c"locArr") localeIdx[345807])) c"myElems") c"dsiElementInitializationComplete"))
            }(345783 call _downEndCount _coforallCount[345781] nil[44])(345675 'coforall on block' 0 tmp[345670])
          } label _continueLabel[345793] _indexOfInterest[345788] _iterator[345789]
        } label _breakLabel[345794]
        Defer
        {
          {(345825 call _endCountFree _coforallCount[345781])
          }
        }(345830 call _waitEndCount _coforallCount[345781] 0)
      }
    }
  } function SparseBlockArr[347227](?).dsiElementDeinitializationComplete[345864](arg _mt[347243]:_MT[238], arg this[347241]:SparseBlockArr[347227](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345906] "expr temp" "maybe ref" "no copy" "temp"(345909 'move' tmpIter[345906](345871 call .(345868 call .(366681 call . this[347241] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[346067] "maybe param" "temp"(346082 'move' isRngDomArr[346067](346080 call ||(346069 call isBoundedRange tmpIter[345906])(346078 call ||(346072 call isDomain tmpIter[345906])(346075 call isArray tmpIter[345906]))))
      if isRngDomArr[346067]
      { const _coforallCount[345939] "const" "end count" "temp"(346004 'move' _coforallCount[345939](346001 call _endCountAlloc 0)) unknown numTasks[345940] "temp"(345988 'move' numTasks[345940](345984 call . tmpIter[345906] c"size"))(345979 call _upEndCount _coforallCount[345939] 0 numTasks[345940]) unknown _indexOfInterest[345946] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345947] "expr temp" "temp"(345956 'move' _iterator[345947](345954 call _getIterator tmpIter[345906]))
        Defer
        {
          {(345972 call _freeIterator _iterator[345947])
          }
        }
        { scopeless type(345961 'move' _indexOfInterest[345946](345958 call iteratorIndex _iterator[345947]))
        }
        ForLoop[345948]
        { unknown localeIdx[345965] "coforall index var" "index var" "insert auto destroy"(345967 'move' localeIdx[345965] _indexOfInterest[345946]) const tmp[345912] "const" "temp"(345914 'move' tmp[345912](345916 'deref'(345917 '_wide_get_locale'(345919 call(413782 call . this[347241] c"locArr") localeIdx[345965]))))
          {
            {(345937 call(345927 call .(345929 call .(345931 call postfix!(345933 call(413788 call . this[347241] c"locArr") localeIdx[345965])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(345941 call _downEndCount _coforallCount[345939] nil[44])(345922 'coforall on block' 0 tmp[345912])
          } label _continueLabel[345951] _indexOfInterest[345946] _iterator[345947]
        } label _breakLabel[345952]
        Defer
        {
          {(345991 call _endCountFree _coforallCount[345939])
          }
        }(345996 call _waitEndCount _coforallCount[345939] 0 numTasks[345940])
      }
      { const _coforallCount[346008] "const" "end count" "temp"(346064 'move' _coforallCount[346008](346061 call _endCountAlloc 0)) unknown _indexOfInterest[346015] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346016] "expr temp" "temp"(346025 'move' _iterator[346016](346023 call _getIterator tmpIter[345906]))
        Defer
        {
          {(346041 call _freeIterator _iterator[346016])
          }
        }
        { scopeless type(346030 'move' _indexOfInterest[346015](346027 call iteratorIndex _iterator[346016]))
        }
        ForLoop[346017]
        { unknown localeIdx[346034] "coforall index var" "index var" "insert auto destroy"(346036 'move' localeIdx[346034] _indexOfInterest[346015])(346048 call _upEndCount _coforallCount[346008] 0) const tmp[345897] "const" "temp"(345899 'move' tmp[345897](345895 'deref'(345894 '_wide_get_locale'(345877 call(413770 call . this[347241] c"locArr") localeIdx[346034]))))
          {
            {(345891 call(345887 call .(345884 call .(345882 call postfix!(345881 call(413776 call . this[347241] c"locArr") localeIdx[346034])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(346010 call _downEndCount _coforallCount[346008] nil[44])(345902 'coforall on block' 0 tmp[345897])
          } label _continueLabel[346020] _indexOfInterest[346015] _iterator[346016]
        } label _breakLabel[346021]
        Defer
        {
          {(346052 call _endCountFree _coforallCount[346008])
          }
        }(346057 call _waitEndCount _coforallCount[346008] 0)
      }
    }
  } function SparseBlockArr[347227](?).dsiDestroyArr[346095](arg _mt[347247]:_MT[238], arg this[347245]:SparseBlockArr[347227](?), arg deinitElts[346092] : bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[346163] "expr temp" "maybe ref" "no copy" "temp"(346166 'move' tmpIter[346163](346102 call .(346099 call .(366686 call . this[347245] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[346346] "maybe param" "temp"(346361 'move' isRngDomArr[346346](346359 call ||(346348 call isBoundedRange tmpIter[346163])(346357 call ||(346351 call isDomain tmpIter[346163])(346354 call isArray tmpIter[346163]))))
      if isRngDomArr[346346]
      { const _coforallCount[346218] "const" "end count" "temp"(346283 'move' _coforallCount[346218](346280 call _endCountAlloc 0)) unknown numTasks[346219] "temp"(346267 'move' numTasks[346219](346263 call . tmpIter[346163] c"size"))(346258 call _upEndCount _coforallCount[346218] 0 numTasks[346219]) unknown _indexOfInterest[346225] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346226] "expr temp" "temp"(346235 'move' _iterator[346226](346233 call _getIterator tmpIter[346163]))
        Defer
        {
          {(346251 call _freeIterator _iterator[346226])
          }
        }
        { scopeless type(346240 'move' _indexOfInterest[346225](346237 call iteratorIndex _iterator[346226]))
        }
        ForLoop[346227]
        { unknown localeIdx[346244] "coforall index var" "index var" "insert auto destroy"(346246 'move' localeIdx[346244] _indexOfInterest[346225]) const tmp[346169] "const" "temp"(346171 'move' tmp[346169](346173 'deref'(346174 '_wide_get_locale'(346176 call(413810 call . this[347245] c"locArr") localeIdx[346244]))))
          {
            { unknown arr[346184](346186 call(413816 call . this[347245] c"locArr") localeIdx[346244])(346189 'end of statement')
              if(346191 call _cond_test deinitElts[346092])
              {(346196 call _deinitElements(346198 call .(346200 call postfix! arr[346184]) c"myElems"))
              }(346213 call(346205 call .(346207 call .(346209 call postfix! arr[346184]) c"myElems") c"dsiElementDeinitializationComplete"))(346215 call chpl__delete arr[346184])
            }(346220 call _downEndCount _coforallCount[346218] nil[44])(346179 'coforall on block' 0 tmp[346169])
          } label _continueLabel[346230] _indexOfInterest[346225] _iterator[346226]
        } label _breakLabel[346231]
        Defer
        {
          {(346270 call _endCountFree _coforallCount[346218])
          }
        }(346275 call _waitEndCount _coforallCount[346218] 0 numTasks[346219])
      }
      { const _coforallCount[346287] "const" "end count" "temp"(346343 'move' _coforallCount[346287](346340 call _endCountAlloc 0)) unknown _indexOfInterest[346294] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346295] "expr temp" "temp"(346304 'move' _iterator[346295](346302 call _getIterator tmpIter[346163]))
        Defer
        {
          {(346320 call _freeIterator _iterator[346295])
          }
        }
        { scopeless type(346309 'move' _indexOfInterest[346294](346306 call iteratorIndex _iterator[346295]))
        }
        ForLoop[346296]
        { unknown localeIdx[346313] "coforall index var" "index var" "insert auto destroy"(346315 'move' localeIdx[346313] _indexOfInterest[346294])(346327 call _upEndCount _coforallCount[346287] 0) const tmp[346154] "const" "temp"(346156 'move' tmp[346154](346152 'deref'(346151 '_wide_get_locale'(346108 call(413794 call . this[347245] c"locArr") localeIdx[346313]))))
          {
            { unknown arr[346113](346112 call(413800 call . this[347245] c"locArr") localeIdx[346313])(346116 'end of statement')
              if(346129 call _cond_test deinitElts[346092])
              {(346127 call _deinitElements(346123 call .(346121 call postfix! arr[346113]) c"myElems"))
              }(346144 call(346140 call .(346137 call .(346135 call postfix! arr[346113]) c"myElems") c"dsiElementDeinitializationComplete"))(346148 call chpl__delete arr[346113])
            }(346289 call _downEndCount _coforallCount[346287] nil[44])(346159 'coforall on block' 0 tmp[346154])
          } label _continueLabel[346299] _indexOfInterest[346294] _iterator[346295]
        } label _breakLabel[346300]
        Defer
        {
          {(346331 call _endCountFree _coforallCount[346287])
          }
        }(346336 call _waitEndCount _coforallCount[346287] 0)
      }
    }
  } function SparseBlockArr[347227](?).these[346370](arg _mt[347251]:_MT[238], arg this[347249]:SparseBlockArr[347227](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346453] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346454] "expr temp" "temp"(346463 'move' _iterator[346454](346461 call _getIterator(346377 call .(346374 call .(366691 call . this[347249] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(346480 call _freeIterator _iterator[346454])
        }
      }
      { scopeless type(346469 'move' _indexOfInterest[346453](346466 call iteratorIndex _iterator[346454]))
      }
      ForLoop[346455]
      { unknown locI[346473] "index var" "insert auto destroy"(346475 'move' locI[346473] _indexOfInterest[346453])
        { unknown locDom[346389](346387 call postfix!(346386 call(346381 call .(366696 call . this[347249] c"dom") c"locDoms") locI[346473]))(346392 'end of statement') unknown locArrI[346400](346398 call postfix!(346397 call(413827 call . this[347249] c"locArr") locI[346473]))(346403 'end of statement')
          { unknown _indexOfInterest[346419] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346420] "expr temp" "temp"(346429 'move' _iterator[346420](346427 call _getIterator(346406 call . locDom[346389] c"mySparseBlock")))
            Defer
            {
              {(346446 call _freeIterator _iterator[346420])
              }
            }
            { scopeless type(346435 'move' _indexOfInterest[346419](346432 call iteratorIndex _iterator[346420]))
            }
            ForLoop[346421]
            { unknown x[346439] "index var" "insert auto destroy"(346441 'move' x[346439] _indexOfInterest[346419])
              {(346416 yield(346415 call(346410 call . locArrI[346400] c"myElems") x[346439]))
              } label _continueLabel[346424] _indexOfInterest[346419] _iterator[346420]
            } label _breakLabel[346425]
          }
        } label _continueLabel[346458] _indexOfInterest[346453] _iterator[346454]
      } label _breakLabel[346459]
    }
  } function SparseBlockArr[347227](?).these[346496](arg _mt[347255]:_MT[238], arg this[347253]:SparseBlockArr[347227](?), param arg tag[346493] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346516] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346517] "expr temp" "temp"(346526 'move' _iterator[346517](346524 call _getIterator(346512 call(346507 call .(366704 call . this[347253] c"dom") c"these") tag[346493])))
      Defer
      {
        {(346543 call _freeIterator _iterator[346517])
        }
      }
      { scopeless type(346532 'move' _indexOfInterest[346516](346529 call iteratorIndex _iterator[346517]))
      }
      ForLoop[346518]
      { unknown followThis[346536] "index var" "insert auto destroy"(346538 'move' followThis[346536] _indexOfInterest[346516])(346514 yield followThis[346536]) label _continueLabel[346521] _indexOfInterest[346516] _iterator[346517]
      } label _breakLabel[346522]
    }
  }
  {(346503 call == tag[346493] leader[447])
  } function SparseBlockArr[347227](?).these[346560](arg _mt[347259]:_MT[238], arg this[347257]:SparseBlockArr[347227](?), param arg tag[346557] : iterKind[453], arg followThis[346562]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[346577] "temp" followThis[346562](346584 call _check_tuple_var_decl tmp[346577] 2) unknown locFollowThis[346571](346578 call tmp[346577] 0) unknown localeIndex[346573](346581 call tmp[346577] 1)(346589 'end of statement')
    { unknown _indexOfInterest[346618] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346619] "expr temp" "temp"(346628 'move' _iterator[346619](346626 call _getIterator(346602 call(346596 call .(346595 call locFollowThis[346571] 0) c"these") tag[346557] locFollowThis[346571])))
      Defer
      {
        {(346645 call _freeIterator _iterator[346619])
        }
      }
      { scopeless type(346634 'move' _indexOfInterest[346618](346631 call iteratorIndex _iterator[346619]))
      }
      ForLoop[346620]
      { unknown i[346638] "index var" "insert auto destroy"(346640 'move' i[346638] _indexOfInterest[346618])
        {(346615 yield(346614 call(346609 call .(346607 call postfix!(346606 call(413844 call . this[347257] c"locArr") localeIndex[346573])) c"dsiAccess") i[346638]))
        } label _continueLabel[346623] _indexOfInterest[346618] _iterator[346619]
      } label _breakLabel[346624]
    }
  }
  {(346569 call == tag[346557] follower[449])
  } function SparseBlockArr[347227](?).these[346661](arg _mt[347263]:_MT[238], arg this[347261]:SparseBlockArr[347227](?), param arg tag[346658] : iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[346723] "expr temp" "maybe ref" "no copy" "temp"(346726 'move' tmpIter[346723](413859 call . this[347261] c"locArr")) unknown isRngDomArr[346882] "maybe param" "temp"(346897 'move' isRngDomArr[346882](346895 call ||(346884 call isBoundedRange tmpIter[346723])(346893 call ||(346887 call isDomain tmpIter[346723])(346890 call isArray tmpIter[346723]))))
      if isRngDomArr[346882]
      { const _coforallCount[346754] "const" "end count" "temp"(346819 'move' _coforallCount[346754](346816 call _endCountAlloc 0)) unknown numTasks[346755] "temp"(346803 'move' numTasks[346755](346799 call . tmpIter[346723] c"size"))(346794 call _upEndCount _coforallCount[346754] 0 numTasks[346755]) unknown _indexOfInterest[346761] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346762] "expr temp" "temp"(346771 'move' _iterator[346762](346769 call _getIterator tmpIter[346723]))
        Defer
        {
          {(346787 call _freeIterator _iterator[346762])
          }
        }
        { scopeless type(346776 'move' _indexOfInterest[346761](346773 call iteratorIndex _iterator[346762]))
        }
        ForLoop[346763]
        { unknown locA[346780] "coforall index var" "index var" "insert auto destroy"(346782 'move' locA[346780] _indexOfInterest[346761]) const tmp[346729] "const" "temp"(346731 'move' tmp[346729](346733 'deref'(346734 '_wide_get_locale' locA[346780])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346745] "index var" "insert auto destroy"
                iterated expressions:
                  (346748 call .(346750 call postfix! locA[346780]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346742 yield i[346745])
                }
              }
            }(346756 call _downEndCount _coforallCount[346754] nil[44])(346737 'coforall on block' 0 tmp[346729])
          } label _continueLabel[346766] _indexOfInterest[346761] _iterator[346762]
        } label _breakLabel[346767]
        Defer
        {
          {(346806 call _endCountFree _coforallCount[346754])
          }
        }(346811 call _waitEndCount _coforallCount[346754] 0 numTasks[346755])
      }
      { const _coforallCount[346823] "const" "end count" "temp"(346879 'move' _coforallCount[346823](346876 call _endCountAlloc 0)) unknown _indexOfInterest[346830] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346831] "expr temp" "temp"(346840 'move' _iterator[346831](346838 call _getIterator tmpIter[346723]))
        Defer
        {
          {(346856 call _freeIterator _iterator[346831])
          }
        }
        { scopeless type(346845 'move' _indexOfInterest[346830](346842 call iteratorIndex _iterator[346831]))
        }
        ForLoop[346832]
        { unknown locA[346849] "coforall index var" "index var" "insert auto destroy"(346851 'move' locA[346849] _indexOfInterest[346830])(346863 call _upEndCount _coforallCount[346823] 0) const tmp[346715] "const" "temp"(346717 'move' tmp[346715](346713 'deref'(346712 '_wide_get_locale' locA[346849])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346707] "index var" "insert auto destroy"
                iterated expressions:
                  (346699 call .(346697 call postfix! locA[346849]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346703 yield i[346707])
                }
              }
            }(346825 call _downEndCount _coforallCount[346823] nil[44])(346720 'coforall on block' 0 tmp[346715])
          } label _continueLabel[346835] _indexOfInterest[346830] _iterator[346831]
        } label _breakLabel[346836]
        Defer
        {
          {(346867 call _endCountFree _coforallCount[346823])
          }
        }(346872 call _waitEndCount _coforallCount[346823] 0)
      }
    }
  }
  {(346690 call &&(346668 call == tag[346658] standalone[451])(346689 'method call resolves'(346684 call .(346681 call .(346679 call postfix!(346678 call(413853 call . this[347261] c"locArr")(346674 call .(366711 call . this[347261] c"locArrDom") c"low"))) c"myElems") c"_value") "these" tag[346658]))
  } function SparseBlockArr[347227](?).dsiAccess[346914](arg _mt[347267]:_MT[238], arg this[347265]:SparseBlockArr[347227](?), arg i[346911] :(346909 call *(413870 call . this[347265] c"rank")(413875 call . this[347265] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(346949 call _cond_test(346935 call &&(346918 call !=(413880 call . this[347265] c"myLocArr") nil[44])(346934 call(346929 call .(346926 call .(346923 call .(346921 call postfix!(413885 call . this[347265] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346911])))
        {(346946 return(346945 call(346940 call .(346938 call postfix!(413891 call . this[347265] c"myLocArr")) c"dsiAccess") i[346911]))
        }
      }(346956 'local block')
    }(346979 return(346978 call(346973 call .(346971 call postfix!(346970 call(413897 call . this[347265] c"locArr")(346968 call(346963 call .(346960 call .(366716 call . this[347265] c"dom") c"dist") c"targetLocsIdx") i[346911]))) c"dsiAccess") i[346911]))
  } function SparseBlockArr[347227](?).dsiAccess[346992](arg _mt[347271]:_MT[238], arg this[347269]:SparseBlockArr[347227](?), arg i[346989] :(346987 call *(413904 call . this[347269] c"rank")(413909 call . this[347269] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347031 call _cond_test(347017 call &&(347000 call !=(413919 call . this[347269] c"myLocArr") nil[44])(347016 call(347011 call .(347008 call .(347005 call .(347003 call postfix!(413924 call . this[347269] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346989])))
        {(347028 return(347027 call(347022 call .(347020 call postfix!(413930 call . this[347269] c"myLocArr")) c"dsiAccess") i[346989]))
        }
      }(347038 'local block')
    }(347061 return(347060 call(347055 call .(347053 call postfix!(347052 call(413936 call . this[347269] c"locArr")(347050 call(347045 call .(347042 call .(366721 call . this[347269] c"dom") c"dist") c"targetLocsIdx") i[346989]))) c"dsiAccess") i[346989]))
  }
  {(346997 call shouldReturnRvalueByValue(413914 call . this[347269] c"eltType"))
  } function SparseBlockArr[347227](?).dsiAccess[347075](arg _mt[347275]:_MT[238], arg this[347273]:SparseBlockArr[347227](?), arg i[347072] :(347070 call *(413943 call . this[347273] c"rank")(413948 call . this[347273] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347114 call _cond_test(347100 call &&(347083 call !=(413958 call . this[347273] c"myLocArr") nil[44])(347099 call(347094 call .(347091 call .(347088 call .(347086 call postfix!(413963 call . this[347273] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[347072])))
        {(347111 return(347110 call(347105 call .(347103 call postfix!(413969 call . this[347273] c"myLocArr")) c"dsiAccess") i[347072]))
        }
      }(347121 'local block')
    }(347144 return(347143 call(347138 call .(347136 call postfix!(347135 call(413975 call . this[347273] c"locArr")(347133 call(347128 call .(347125 call .(366726 call . this[347273] c"dom") c"dist") c"targetLocsIdx") i[347072]))) c"dsiAccess") i[347072]))
  }
  {(347080 call shouldReturnRvalueByConstRef(413953 call . this[347273] c"eltType"))
  } function SparseBlockArr[347227](?).dsiAccess[347157](arg _mt[347279]:_MT[238], arg this[347277]:SparseBlockArr[347227](?), arg i[347153] ... :(413982 call . this[347277] c"idxType")) ref : _unknown[51] "method" "primary method"
  {(347163 return(347162 call(413991 call . this[347277] c"dsiAccess") i[347153]))
  } function SparseBlockArr[347227](?).dsiAccess[347176](arg _mt[347283]:_MT[238], arg this[347281]:SparseBlockArr[347227](?), arg i[347172] ... :(413997 call . this[347281] c"idxType")) : _unknown[51] "method" "primary method"
  {(347186 return(347185 call(414011 call . this[347281] c"dsiAccess") i[347172]))
  }
  {(347181 call shouldReturnRvalueByValue(414007 call . this[347281] c"eltType"))
  } function SparseBlockArr[347227](?).dsiAccess[347200](arg _mt[347287]:_MT[238], arg this[347285]:SparseBlockArr[347227](?), arg i[347196] ... :(414017 call . this[347285] c"idxType")) const ref : _unknown[51] "method" "primary method"
  {(347210 return(347209 call(414031 call . this[347285] c"dsiAccess") i[347196]))
  }
  {(347205 call shouldReturnRvalueByConstRef(414027 call . this[347285] c"eltType"))
  } function SparseBlockArr[347227](?).dsiGetBaseDom[347218](arg _mt[347291]:_MT[238], arg this[347289]:SparseBlockArr[347227](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(347221 return(414037 call . this[347289] c"dom"))
  } type SparseBlockArr[347227](?) val super[355847]:BaseSparseArr[149900](?) "super class" unknown stridable[345195] "param" bool[10] unknown sparseLayoutType[345201] "type variable" unmanaged DefaultDist[415487] unknown locArrDom[345210](345208 call chpl__buildDomainRuntimeType defaultDist[94053] rank[149871] idxType[149875]) unknown locArr[345230](345228 call chpl__buildArrayRuntimeType(345226 call chpl__ensureDomainExpr locArrDom[345210])(345223 call unmanaged LocSparseBlockArr?[415613](?) eltType[149714] rank[149871] idxType[149875] stridable[345195] sparseLayoutType[345201])) unknown myLocArr[345244](345241 call unmanaged LocSparseBlockArr?[415613](?) eltType[149714] rank[149871] idxType[149875] stridable[345195] sparseLayoutType[345201]) type SparseBlockArr[413466](?) function LocSparseBlockArr[347536](?).init[347344](arg _mt[347540]:_MT[238], arg this[347538]:LocSparseBlockArr[347536](?), arg eltType[347342]:_any[178](?), param arg rank[347347] : int(64)[13], arg idxType[347350]:_any[178](?), param arg stridable[347353] : bool[10], arg sparseLayoutType[347356]:_any[178](?), const arg locDom[347366] :(347364 call unmanaged LocSparseBlockDom[415616](?) rank[347347] idxType[347350] stridable[347353] sparseLayoutType[347356]), param arg initElts[347370] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(347378 call =(347374 call . this[347538] c"eltType") eltType[347342])(347387 call =(347383 call . this[347538] c"rank") rank[347347])(347395 call =(347391 call . this[347538] c"idxType") idxType[347350])(347403 call =(347399 call . this[347538] c"stridable") stridable[347353])(347411 call =(347407 call . this[347538] c"sparseLayoutType") sparseLayoutType[347356])(347419 call =(347415 call . this[347538] c"locDom") locDom[347366])(347438 call =(347423 call . this[347538] c"myElems")(347437 call(347430 call .(347427 call . locDom[347366] c"mySparseBlock") c"buildArray") eltType[347342](initElts = initElts[347370])))
  } function LocSparseBlockArr[347536](?).deinit[347445](arg _mt[347544]:_MT[238], arg this[347542]:LocSparseBlockArr[347536](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  } function LocSparseBlockArr[347536](?).dsiAccess[347454](arg _mt[347548]:_MT[238], arg this[347546]:LocSparseBlockArr[347536](?), arg i[347452]:_any[178](?)) ref : _unknown[51] "method" "primary method"
  {(347460 return(347459 call(414061 call . this[347546] c"myElems") i[347452]))
  } function LocSparseBlockArr[347536](?).dsiAccess[347469](arg _mt[347552]:_MT[238], arg this[347550]:LocSparseBlockArr[347536](?), arg i[347467]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(347479 return(347478 call(414072 call . this[347550] c"myElems") i[347467]))
  }
  {(347474 call shouldReturnRvalueByValue(414067 call . this[347550] c"eltType"))
  } function LocSparseBlockArr[347536](?).dsiAccess[347489](arg _mt[347556]:_MT[238], arg this[347554]:LocSparseBlockArr[347536](?), arg i[347487]:_any[178](?)) const ref : _unknown[51] "method" "primary method"
  {(347499 return(347498 call(414083 call . this[347554] c"myElems") i[347487]))
  }
  {(347494 call shouldReturnRvalueByConstRef(414078 call . this[347554] c"eltType"))
  } function LocSparseBlockArr[347536](?).writeThis[347509](arg _mt[347560]:_MT[238], arg this[347558]:LocSparseBlockArr[347536](?), arg f[347507]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(347530 call halt "LocSparseBlockArr.writeThis() is not implemented / should not be needed")
  } type LocSparseBlockArr[347536](?) val super[355849]:object[22] "super class" unknown eltType[347295] "type variable" unknown rank[347299] "param" int(64)[13] unknown idxType[347303] "type variable" unknown stridable[347307] "param" bool[10] unknown sparseLayoutType[347311] "type variable" const locDom[347322] "const"(347320 call unmanaged LocSparseBlockDom[415616](?) rank[347299] idxType[347303] stridable[347307] sparseLayoutType[347311]) unknown myElems[347336] "local field" "unsafe"(347334 call chpl__buildArrayRuntimeType(347332 call chpl__ensureDomainExpr(347327 call . locDom[347322] c"mySparseBlock")) eltType[347295]) type unmanaged LocSparseBlockArr?[415613](?) type LocSparseBlockArr?[415610](?) type LocSparseBlockArr[413627](?) function SparseBlockArr[347227](?).dsiSerialWrite[347568](arg _mt[347573]:_MT[238], arg this[347570]:SparseBlockArr[347227](?) : SparseBlockArr[347227](?), arg f[347566]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(347677 call _cond_test(347577 call ==(414089 call . this[347570] c"rank") 1))
    {(347581 call <~> f[347566] "[")
      { unknown _indexOfInterest[347617] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347618] "expr temp" "temp"(347627 'move' _iterator[347618](347625 call _getIterator(414095 call . this[347570] c"locArr")))
        Defer
        {
          {(347643 call _freeIterator _iterator[347618])
          }
        }
        { scopeless type(347632 'move' _indexOfInterest[347617](347629 call iteratorIndex _iterator[347618]))
        }
        ForLoop[347619]
        { unknown locarr[347636] "index var" "insert auto destroy"(347638 'move' locarr[347636] _indexOfInterest[347617])
          {
            if(347612 call _cond_test(347593 call .(347590 call .(347588 call postfix! locarr[347636]) c"locDom") c"dsiNumIndices"))
            {(347598 call <~> f[347566] " ")(347610 call(347605 call .(347603 call postfix! locarr[347636]) c"dsiSerialWrite") f[347566])
            }
          } label _continueLabel[347622] _indexOfInterest[347617] _iterator[347618]
        } label _breakLabel[347623]
      }(347652 call <~> f[347566] "]")
    }
    {(347674 call compilerError "Can't write out multidimensional sparse distributed arrays yet")
    }
  } function LocSparseBlockArr[347536](?).dsiSerialWrite[347689](arg _mt[347694]:_MT[238], arg this[347691]:LocSparseBlockArr[347536](?) : LocSparseBlockArr[347536](?), arg f[347687]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(347705 call(347700 call .(347697 call .(366740 call . this[347691] c"myElems") c"_value") c"dsiSerialWrite") f[347687])
  } function SparseBlockDom[344899](?).dsiSupportsPrivatization[347713](arg _mt[347718]:_MT[238], arg this[347715]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?)) param : _unknown[51] "method" "method overrides"
  {(347721 return 1)
  } function SparseBlockDom[344899](?).dsiGetPrivatizeData[347729](arg _mt[347734]:_MT[238], arg this[347731]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?)) : _unknown[51] "method"
  {(347749 return(347747 call _build_tuple(347737 call .(366745 call . this[347731] c"dist") c"pid")(347745 call(347741 call .(366750 call . this[347731] c"whole") c"dims"))))
  } function SparseBlockDom[344899](?).dsiPrivatize[347759](arg _mt[347764]:_MT[238], arg this[347761]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?), arg privatizeData[347757]:_any[178](?)) : _unknown[51] "method"
  { unknown privdist[347775](347774 call chpl_getPrivatizedCopy(347768 'typeof'(414106 call . this[347761] c"dist"))(347773 call privatizeData[347757] 0))(347778 'end of statement') unknown c[347803](347782 'new'(_chpl_manager = unmanaged[220](?))(347802 call SparseBlockDom[409280](?)(rank =(414113 call . this[347761] c"rank"))(idxType =(414118 call . this[347761] c"idxType"))(sparseLayoutType =(414123 call . this[347761] c"sparseLayoutType"))(stridable =(347792 call .(366755 call . this[347761] c"parentDom") c"stridable"))(dist = privdist[347775])(whole =(414129 call . this[347761] c"whole"))(parentDom =(414134 call . this[347761] c"parentDom"))))(347806 'end of statement')
    { unknown _indexOfInterest[347868] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347869] "expr temp" "temp"(347878 'move' _iterator[347869](347876 call _getIterator(347812 call .(347809 call . c[347803] c"dist") c"targetLocDom")))
      Defer
      {
        {(347895 call _freeIterator _iterator[347869])
        }
      }
      { scopeless type(347884 'move' _indexOfInterest[347868](347881 call iteratorIndex _iterator[347869]))
      }
      ForLoop[347870]
      { unknown i[347888] "index var" "insert auto destroy"(347890 'move' i[347888] _indexOfInterest[347868])
        {(347826 call =(347821 call(347816 call . c[347803] c"locDoms") i[347888])(347825 call(414140 call . this[347761] c"locDoms") i[347888]))
          if(347863 call _cond_test(347845 call ==(347840 '_wide_get_node'(347836 call(347831 call . c[347803] c"locDoms") i[347888]))(347842 call .(366761 call here[90438]) c"id")))
          {(347860 call =(347850 call . c[347803] c"myLocDom")(347859 call(347854 call . c[347803] c"locDoms") i[347888]))
          }
        } label _continueLabel[347873] _indexOfInterest[347868] _iterator[347869]
      } label _breakLabel[347874]
    }(347914 call =(347903 call . c[347803] c"whole")(347912 call chpl__buildDomainExpr(347910 'expand_tuple'(347909 call privatizeData[347757] 1))))(347918 return c[347803])
  } function SparseBlockDom[344899](?).dsiGetReprivatizeData[347925](arg _mt[347930]:_MT[238], arg this[347927]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?)) : _unknown[51] "method"
  {(347938 return(347937 call(347933 call .(366768 call . this[347927] c"whole") c"dims")))
  } function SparseBlockDom[344899](?).dsiReprivatize[347948](arg _mt[347955]:_MT[238], arg this[347952]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?), arg other[347946]:_any[178](?), arg reprivatizeData[347950]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown _indexOfInterest[347976] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347977] "expr temp" "temp"(347986 'move' _iterator[347977](347984 call _getIterator(347959 call .(366773 call . this[347952] c"dist") c"targetLocDom")))
      Defer
      {
        {(348003 call _freeIterator _iterator[347977])
        }
      }
      { scopeless type(347992 'move' _indexOfInterest[347976](347989 call iteratorIndex _iterator[347977]))
      }
      ForLoop[347978]
      { unknown i[347996] "index var" "insert auto destroy"(347998 'move' i[347996] _indexOfInterest[347976])(347973 call =(347965 call(414150 call . this[347952] c"locDoms") i[347996])(347972 call(347967 call . other[347946] c"locDoms") i[347996])) label _continueLabel[347981] _indexOfInterest[347976] _iterator[347977]
      } label _breakLabel[347982]
    }(348017 call =(414157 call . this[347952] c"whole")(348015 call chpl__buildDomainExpr(348013 'expand_tuple' reprivatizeData[347950])))
  } function SparseBlockArr[347227](?).dsiSupportsPrivatization[348025](arg _mt[348030]:_MT[238], arg this[348027]:SparseBlockArr[347227](?) : SparseBlockArr[347227](?)) param : _unknown[51] "method" "method overrides"
  {(348033 return 1)
  } function SparseBlockArr[347227](?).dsiGetPrivatizeData[348041](arg _mt[348046]:_MT[238], arg this[348043]:SparseBlockArr[347227](?) : SparseBlockArr[347227](?)) : _unknown[51] "method"
  {(348052 return(348049 call .(366779 call . this[348043] c"dom") c"pid"))
  } function SparseBlockArr[347227](?).dsiPrivatize[348062](arg _mt[348067]:_MT[238], arg this[348064]:SparseBlockArr[347227](?) : SparseBlockArr[347227](?), arg privatizeData[348060]:_any[178](?)) : _unknown[51] "method"
  { unknown privdom[348075](348074 call chpl_getPrivatizedCopy(348071 'typeof'(414163 call . this[348064] c"dom")) privatizeData[348060])(348078 'end of statement') unknown c[348098](348082 'new'(_chpl_manager = unmanaged[220](?))(348097 call SparseBlockArr[413466](?)(sparseLayoutType =(414170 call . this[348064] c"sparseLayoutType"))(eltType =(414175 call . this[348064] c"eltType"))(rank =(414180 call . this[348064] c"rank"))(idxType =(414185 call . this[348064] c"idxType"))(stridable =(414190 call . this[348064] c"stridable"))(dom = privdom[348075])))(348101 'end of statement')
    { unknown _indexOfInterest[348166] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348167] "expr temp" "temp"(348176 'move' _iterator[348167](348174 call _getIterator(348110 call .(348107 call .(348104 call . c[348098] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(348193 call _freeIterator _iterator[348167])
        }
      }
      { scopeless type(348182 'move' _indexOfInterest[348166](348179 call iteratorIndex _iterator[348167]))
      }
      ForLoop[348168]
      { unknown localeIdx[348186] "index var" "insert auto destroy"(348188 'move' localeIdx[348186] _indexOfInterest[348166])
        {(348124 call =(348119 call(348114 call . c[348098] c"locArr") localeIdx[348186])(348123 call(414197 call . this[348064] c"locArr") localeIdx[348186]))
          if(348161 call _cond_test(348145 call ==(348140 '_wide_get_node'(348135 call postfix!(348134 call(348129 call . c[348098] c"locArr") localeIdx[348186])))(348142 call .(366785 call here[90438]) c"id")))
          {(348158 call =(348148 call . c[348098] c"myLocArr")(348157 call(348152 call . c[348098] c"locArr") localeIdx[348186]))
          }
        } label _continueLabel[348171] _indexOfInterest[348166] _iterator[348167]
      } label _breakLabel[348172]
    }(348201 return c[348098])
  } function SparseBlockDom[344899](?).numRemoteElems[348210](arg _mt[348217]:_MT[238], arg this[348214]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?), arg rlo[348208]:_any[178](?), arg rid[348212]:_any[178](?)) : _unknown[51] "method"
  { unknown blo[348219](348223 call .(366791 call . this[348214] c"dist") c"idxType") unknown bhi[348226](348230 'typeof' blo[348219])(348231 'end of statement')
    if(348359 call _cond_test(348253 call == rid[348212](348251 call -(348247 call .(348246 call(348238 call .(348235 call .(366796 call . this[348214] c"dist") c"targetLocDom") c"dim")(348243 call -(414208 call . this[348214] c"rank") 1)) c"size") 1)))
    {(348269 call = bhi[348226](348266 call .(348265 call(348257 call .(366801 call . this[348214] c"whole") c"dim")(348262 call -(414214 call . this[348214] c"rank") 1)) c"high"))
    }
    {(348356 call = bhi[348226](348354 call -(348351 call +(348286 call .(348285 call(348277 call .(348274 call .(366806 call . this[348214] c"dist") c"boundingBox") c"dim")(348282 call -(414220 call . this[348214] c"rank") 1)) c"low")(348350 call intCeilXDivByY(348331 call *(348325 call +(348322 call -(348303 call .(348302 call(348294 call .(348291 call .(366811 call . this[348214] c"dist") c"boundingBox") c"dim")(348299 call -(414225 call . this[348214] c"rank") 1)) c"high")(348319 call .(348318 call(348310 call .(348307 call .(366816 call . this[348214] c"dist") c"boundingBox") c"dim")(348315 call -(414230 call . this[348214] c"rank") 1)) c"low")) 1)(348329 call + rid[348212] 1))(348347 call .(348346 call(348338 call .(348335 call .(366821 call . this[348214] c"dist") c"targetLocDom") c"dim")(348343 call -(414236 call . this[348214] c"rank") 1)) c"size"))) 1))
    }(348372 return(348370 call +(348367 call - bhi[348226] rlo[348208]) 1))
  } function SparseBlockDom[344899](?).dsiHasSingleLocalSubdomain[348379](arg _mt[348384]:_MT[238], arg this[348381]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?)) param : _unknown[51] "method"
  {(348387 return 1)
  } function SparseBlockArr[347227](?).dsiHasSingleLocalSubdomain[348395](arg _mt[348400]:_MT[238], arg this[348397]:SparseBlockArr[347227](?) : SparseBlockArr[347227](?)) param : _unknown[51] "method"
  {(348403 return 1)
  } function SparseBlockDom[344899](?).dsiLocalSubdomain[348415](arg _mt[348420]:_MT[238], arg this[348417]:SparseBlockDom[344899](?) : SparseBlockDom[344899](?), arg loc[348412] : locale[28]) : _unknown[51] "method"
  {
    if(348464 call _cond_test(348424 call != loc[348412](414242 call here[90438])))
    {(348462 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    } const tmp[348485] "const" "temp"(348484 call(348479 call .(348476 call .(366826 call . this[348417] c"dist") c"targetLocales") c"find")(414244 call here[90438]))(348492 call _check_tuple_var_decl tmp[348485] 2) const found[348470] "const"(348486 call tmp[348485] 0) const targetIdx[348472] "const"(348489 call tmp[348485] 1)(348497 'end of statement')(348507 return(348504 call .(348502 call postfix!(348501 call(414248 call . this[348417] c"locDoms") targetIdx[348472])) c"mySparseBlock"))
  } function SparseBlockArr[347227](?).dsiLocalSubdomain[348518](arg _mt[348523]:_MT[238], arg this[348520]:SparseBlockArr[347227](?) : SparseBlockArr[347227](?), arg loc[348515] : locale[28]) : _unknown[51] "method"
  {
    if(348535 call _cond_test(348527 call != loc[348515](414253 call here[90438])))
    {(348533 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    }(348550 return(348547 call .(348544 call .(348542 call postfix!(414257 call . this[348520] c"myLocArr")) c"locDom") c"mySparseBlock"))
  }(355629 'used modules list'(353122 'use' ChapelStandard[20267])(341927 'use' DSIUtil[230909])(341930 'use' ChapelUtil[166964])(341933 'use' BlockDist[331337])(341936 'use' RangeChunk[266479])(341939 'use' HaltWrappers[210018])(341942 'use' LayoutCS[341923]))
}