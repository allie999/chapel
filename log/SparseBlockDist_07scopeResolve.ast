AST dump for SparseBlockDist after pass scopeResolve.
Module use list: ChapelStandard DSIUtil ChapelUtil BlockDist RangeChunk HaltWrappers LayoutCS Sort Search 

{ unknown debugSparseBlockDist[341905] "config" "param" 0(341908 'end of statement') unknown debugSparseBlockDistBulkTransfer[341910] "config" "param" 0(341913 'end of statement') function TargetLocaleComparator[342030](?).key[341946](arg _mt[342034]:_MT[238], arg this[342032]:TargetLocaleComparator[342030](?), arg a[341943] :(341941 call chpl__buildIndexType(413045 call . this[342032] c"rank")(413050 call . this[342032] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(342022 call _cond_test(341950 call ==(413055 call . this[342032] c"rank") 2))
    {
      if(342001 call _cond_test(341959 call ==(413060 call . this[342032] c"sparseLayoutType")(341957 call unmanaged CS[415558](?)(compressRows = 0))))
      {(341979 return(341977 call _build_tuple(341967 call(341962 call .(366442 call . this[342032] c"dist") c"targetLocsIdx") a[341943])(341971 call a[341943] 1)(341976 call a[341943] 0)))
      }
      {(341999 return(341997 call _build_tuple(341987 call(341982 call .(366447 call . this[342032] c"dist") c"targetLocsIdx") a[341943])(341991 call a[341943] 0)(341996 call a[341943] 1)))
      }
    }
    {(342019 return(342017 call _build_tuple(342014 call(342009 call .(366452 call . this[342032] c"dist") c"targetLocsIdx") a[341943]) a[341943]))
    }
  } type TargetLocaleComparator[342030](?) unknown rank[341915] "param" unknown idxType[341919] "type variable" unknown sparseLayoutType[341922] "type variable" unknown dist[341932](341930 call unmanaged Block[415531](?) rank[341915] idxType[341919] sparseLayoutType[341922]) function SparseBlockDom[344858](?).setup[342111](arg _mt[344862]:_MT[238], arg this[344860]:SparseBlockDom[344858](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[342118](342117 '_wide_get_node' this[344860])(342121 'end of statement')
    if(342439 call _cond_test(342134 call ==(342132 call(413096 call . this[344860] c"locDoms")(342128 call .(342125 call .(366458 call . this[344860] c"dist") c"targetLocDom") c"low")) nil[44]))
    {
      { unknown tmpIter[342206] "expr temp" "maybe ref" "no copy" "temp"(342209 'move' tmpIter[342206](342138 call .(366463 call . this[344860] c"dist") c"targetLocDom")) unknown isRngDomArr[342397] "maybe param" "temp"(342412 'move' isRngDomArr[342397](342410 call ||(342399 call isBoundedRange tmpIter[342206])(342408 call ||(342402 call isDomain tmpIter[342206])(342405 call isArray tmpIter[342206]))))
        if isRngDomArr[342397]
        { const _coforallCount[342269] "const" "end count" "temp"(342334 'move' _coforallCount[342269](342331 call _endCountAlloc 0)) unknown numTasks[342270] "temp"(342318 'move' numTasks[342270](342314 call . tmpIter[342206] c"size"))(342309 call _upEndCount _coforallCount[342269] 0 numTasks[342270]) unknown _indexOfInterest[342276] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342277] "expr temp" "temp"(342286 'move' _iterator[342277](342284 call _getIterator tmpIter[342206]))
          Defer
          {
            {(342302 call _freeIterator _iterator[342277])
            }
          }
          { scopeless type(342291 'move' _indexOfInterest[342276](342288 call iteratorIndex _iterator[342277]))
          }
          ForLoop[342278]
          { unknown localeIdx[342295] "coforall index var" "index var" "insert auto destroy"(342297 'move' localeIdx[342295] _indexOfInterest[342276]) const tmp[342212] "const" "temp"(342214 'move' tmp[342212](342216 'deref'(342217 '_wide_get_locale'(342222 call(342219 call .(366480 call . this[344860] c"dist") c"targetLocales") localeIdx[342295]))))
            {
              {(342230 call =(342232 call(413148 call . this[344860] c"locDoms") localeIdx[342295])(342234 'new'(_chpl_manager = unmanaged[220](?))(342238 call LocSparseBlockDom[413081](?)(413155 call . this[344860] c"rank")(413160 call . this[344860] c"idxType")(413165 call . this[344860] c"stridable")(413170 call . this[344860] c"sparseLayoutType")(342247 call(342244 call .(366485 call . this[344860] c"dist") c"getChunk")(413175 call . this[344860] c"whole") localeIdx[342295]))))
                if(342251 call _cond_test(342253 call == thisid[342118](342256 call .(366488 call here[90435]) c"id")))
                {(342262 call =(413182 call . this[344860] c"myLocDom")(342265 call(413187 call . this[344860] c"locDoms") localeIdx[342295]))
                }
              }(342271 call _downEndCount _coforallCount[342269] nil[44])(342225 'coforall on block' 0 tmp[342212])
            } label _continueLabel[342281] _indexOfInterest[342276] _iterator[342277]
          } label _breakLabel[342282]
          Defer
          {
            {(342321 call _endCountFree _coforallCount[342269])
            }
          }(342326 call _waitEndCount _coforallCount[342269] 0 numTasks[342270])
        }
        { const _coforallCount[342338] "const" "end count" "temp"(342394 'move' _coforallCount[342338](342391 call _endCountAlloc 0)) unknown _indexOfInterest[342345] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342346] "expr temp" "temp"(342355 'move' _iterator[342346](342353 call _getIterator tmpIter[342206]))
          Defer
          {
            {(342371 call _freeIterator _iterator[342346])
            }
          }
          { scopeless type(342360 'move' _indexOfInterest[342345](342357 call iteratorIndex _iterator[342346]))
          }
          ForLoop[342347]
          { unknown localeIdx[342364] "coforall index var" "index var" "insert auto destroy"(342366 'move' localeIdx[342364] _indexOfInterest[342345])(342378 call _upEndCount _coforallCount[342338] 0) const tmp[342197] "const" "temp"(342199 'move' tmp[342197](342195 'deref'(342194 '_wide_get_locale'(342147 call(342142 call .(366468 call . this[344860] c"dist") c"targetLocales") localeIdx[342364]))))
            {
              {(342170 call =(342151 call(413102 call . this[344860] c"locDoms") localeIdx[342364])(342154 'new'(_chpl_manager = unmanaged[220](?))(342169 call LocSparseBlockDom[413081](?)(413109 call . this[344860] c"rank")(413114 call . this[344860] c"idxType")(413119 call . this[344860] c"stridable")(413124 call . this[344860] c"sparseLayoutType")(342168 call(342162 call .(366473 call . this[344860] c"dist") c"getChunk")(413129 call . this[344860] c"whole") localeIdx[342364]))))
                if(342189 call _cond_test(342179 call == thisid[342118](342176 call .(366476 call here[90435]) c"id")))
                {(342186 call =(413136 call . this[344860] c"myLocDom")(342185 call(413141 call . this[344860] c"locDoms") localeIdx[342364]))
                }
              }(342340 call _downEndCount _coforallCount[342338] nil[44])(342202 'coforall on block' 0 tmp[342197])
            } label _continueLabel[342350] _indexOfInterest[342345] _iterator[342346]
          } label _breakLabel[342351]
          Defer
          {
            {(342382 call _endCountFree _coforallCount[342338])
            }
          }(342387 call _waitEndCount _coforallCount[342338] 0)
        }
      }
    }
    {(342436 call halt "Don't know how to reallocate yet")
    }
  } function SparseBlockDom[344858](?).dsiDestroyDom[342447](arg _mt[344866]:_MT[238], arg this[344864]:SparseBlockDom[344858](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[342478] "expr temp" "maybe ref" "no copy" "temp"(342481 'move' tmpIter[342478](342451 call .(366492 call . this[344864] c"dist") c"targetLocDom")) unknown isRngDomArr[342632] "maybe param" "temp"(342647 'move' isRngDomArr[342632](342645 call ||(342634 call isBoundedRange tmpIter[342478])(342643 call ||(342637 call isDomain tmpIter[342478])(342640 call isArray tmpIter[342478]))))
      if isRngDomArr[342632]
      { const _coforallCount[342504] "const" "end count" "temp"(342569 'move' _coforallCount[342504](342566 call _endCountAlloc 0)) unknown numTasks[342505] "temp"(342553 'move' numTasks[342505](342549 call . tmpIter[342478] c"size"))(342544 call _upEndCount _coforallCount[342504] 0 numTasks[342505]) unknown _indexOfInterest[342511] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342512] "expr temp" "temp"(342521 'move' _iterator[342512](342519 call _getIterator tmpIter[342478]))
        Defer
        {
          {(342537 call _freeIterator _iterator[342512])
          }
        }
        { scopeless type(342526 'move' _indexOfInterest[342511](342523 call iteratorIndex _iterator[342512]))
        }
        ForLoop[342513]
        { unknown localeIdx[342530] "coforall index var" "index var" "insert auto destroy"(342532 'move' localeIdx[342530] _indexOfInterest[342511]) const tmp[342484] "const" "temp"(342486 'move' tmp[342484](342488 'deref'(342489 '_wide_get_locale'(342491 call(413205 call . this[344864] c"locDoms") localeIdx[342530]))))
          {(342499 call chpl__delete(342501 call(413211 call . this[344864] c"locDoms") localeIdx[342530]))(342506 call _downEndCount _coforallCount[342504] nil[44])(342494 'coforall on block' 0 tmp[342484])
          } label _continueLabel[342516] _indexOfInterest[342511] _iterator[342512]
        } label _breakLabel[342517]
        Defer
        {
          {(342556 call _endCountFree _coforallCount[342504])
          }
        }(342561 call _waitEndCount _coforallCount[342504] 0 numTasks[342505])
      }
      { const _coforallCount[342573] "const" "end count" "temp"(342629 'move' _coforallCount[342573](342626 call _endCountAlloc 0)) unknown _indexOfInterest[342580] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342581] "expr temp" "temp"(342590 'move' _iterator[342581](342588 call _getIterator tmpIter[342478]))
        Defer
        {
          {(342606 call _freeIterator _iterator[342581])
          }
        }
        { scopeless type(342595 'move' _indexOfInterest[342580](342592 call iteratorIndex _iterator[342581]))
        }
        ForLoop[342582]
        { unknown localeIdx[342599] "coforall index var" "index var" "insert auto destroy"(342601 'move' localeIdx[342599] _indexOfInterest[342580])(342613 call _upEndCount _coforallCount[342573] 0) const tmp[342469] "const" "temp"(342471 'move' tmp[342469](342467 'deref'(342466 '_wide_get_locale'(342457 call(413193 call . this[344864] c"locDoms") localeIdx[342599]))))
          {(342463 call chpl__delete(342461 call(413199 call . this[344864] c"locDoms") localeIdx[342599]))(342575 call _downEndCount _coforallCount[342573] nil[44])(342474 'coforall on block' 0 tmp[342469])
          } label _continueLabel[342585] _indexOfInterest[342580] _iterator[342581]
        } label _breakLabel[342586]
        Defer
        {
          {(342617 call _endCountFree _coforallCount[342573])
          }
        }(342622 call _waitEndCount _coforallCount[342573] 0)
      }
    }
  } function SparseBlockDom[344858](?).getNNZ[342656](arg _mt[344870]:_MT[238], arg this[344868]:SparseBlockDom[344858](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(342679 return(342677 'reduce' SumReduceScanOp[376372](?)(342673 [  ld[342675]  in (413219 call . this[344868] c"locDoms") ]
    {(342670 call .(342667 call .(342663 call postfix! ld[342675]) c"mySparseBlock") c"size")
    } ) 0))
  } function SparseBlockDom[344858](?).dsiAdd[342693](arg _mt[344874]:_MT[238], arg this[344872]:SparseBlockDom[344858](?), arg ind[342690] :(342688 call *(413225 call . this[344872] c"rank")(413230 call . this[344872] c"idxType"))) : _unknown[51] "method" "primary method"
  { unknown _retval[342696] 0(342699 'end of statement') const tmp[342734] "const" "temp"(342736 'move' tmp[342734](342732 'deref'(342731 '_wide_get_locale'(342707 call(342702 call .(366497 call . this[344872] c"dist") c"dsiIndexToLocale") ind[342690]))))
    {
      {(342727 call = _retval[342696](342726 call(342721 call .(342719 call postfix!(342718 call(413237 call . this[344872] c"locDoms")(342716 call(342711 call .(366502 call . this[344872] c"dist") c"targetLocsIdx") ind[342690]))) c"dsiAdd") ind[342690]))
      }(342739 'on block' 0 tmp[342734])
    }(342743 return _retval[342696])
  } function SparseBlockDom[344858](?).dsiAdd[342753](arg _mt[344878]:_MT[238], arg this[344876]:SparseBlockDom[344858](?), arg ind[342750] :(413245 call . this[344876] c"idxType")) : _unknown[51] "method" "primary method"
  {(342768 return(342767 call(413249 call . this[344876] c"dsiAdd")(342764 call _build_tuple ind[342750])))
  }
  {(342760 call ==(342756 call . this[344876] c"rank") 1)
  } function SparseBlockDom[344858](?).dsiFirst[342776](arg _mt[344882]:_MT[238], arg this[344880]:SparseBlockDom[344858](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342797 return(342795 'reduce' MinReduceScanOp[376493](?)(342791 [  l[342793]  in (413257 call . this[344880] c"locDoms") ]
    {(342788 call .(342785 call .(342783 call postfix! l[342793]) c"mySparseBlock") c"first")
    } ) 0))
  } function SparseBlockDom[344858](?).dsiLast[342804](arg _mt[344886]:_MT[238], arg this[344884]:SparseBlockDom[344858](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342825 return(342823 'reduce' MaxReduceScanOp[376449](?)(342819 [  l[342821]  in (413265 call . this[344884] c"locDoms") ]
    {(342816 call .(342813 call .(342811 call postfix! l[342821]) c"mySparseBlock") c"last")
    } ) 0))
  } function SparseBlockDom[344858](?).bulkAdd_help[342845](arg _mt[344890]:_MT[238], arg this[344888]:SparseBlockDom[344858](?), arg inds[342842] :(342840 call chpl__buildArrayRuntimeType unknown indsDom[342832](342838 call chpl__buildIndexType(413271 call . this[344888] c"rank")(413276 call . this[344888] c"idxType"))), arg dataSorted[342848] = 0, arg isUnique[342852] = 0, arg addOn[342856] = nilLocale[89939]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(342945 call _cond_test(342868 call != addOn[342856] nilLocale[89939]))
    { unknown retval[342871] 0(342874 'end of statement') const tmp[342934] "const" "temp"(342936 'move' tmp[342934](342932 'deref'(342931 '_wide_get_locale' addOn[342856])))
      {
        {
          if(342926 call _cond_test(342882 call ==(342879 call chpl_localeID_to_locale(342878 '_wide_get_locale' inds[342842]))(413284 call here[90435])))
          {(342891 call = retval[342871](342890 call(413290 call . this[344888] c"bulkAddHere_help") inds[342842] dataSorted[342848] isUnique[342852]))
          }
          { unknown _local_inds[342906](342904 call chpl__buildArrayRuntimeType(342902 call chpl__ensureDomainExpr indsDom[342832])(342900 call chpl__buildIndexType(413299 call . this[344888] c"rank")(413304 call . this[344888] c"idxType")))(342909 'end of statement')(342913 call = _local_inds[342906] inds[342842])(342923 call = retval[342871](342922 call(413311 call . this[344888] c"bulkAddHere_help") _local_inds[342906] dataSorted[342848] isUnique[342852]))
          }
        }(342939 'on block' 0 tmp[342934])
      }(342943 return retval[342871])
    } unknown comp[342961](342949 'new'(342960 call TargetLocaleComparator[342030](?)(rank =(413321 call . this[344888] c"rank"))(idxType =(413326 call . this[344888] c"idxType"))(sparseLayoutType =(413331 call . this[344888] c"sparseLayoutType"))(dist =(413336 call . this[344888] c"dist"))))(342964 'end of statement')
    if(342975 call _cond_test(342966 call ! dataSorted[342848]))
    {(342973 call sort inds[342842](comparator = comp[342961]))
    } unknown localeRanges[342990](342988 call chpl__buildArrayRuntimeType(342986 call chpl__ensureDomainExpr(342981 call .(366508 call . this[344888] c"dist") c"targetLocDom")) range[64316](?))(342993 'end of statement') const tmp[343201] "const" "temp"(343203 'move' tmp[343201](343199 'deref'(343198 '_wide_get_locale' inds[342842])))
    {
      {
        { unknown _indexOfInterest[343163] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343164] "expr temp" "temp"(343173 'move' _iterator[343164](343171 call _getIterator(342997 call .(366513 call . this[344888] c"dist") c"targetLocDom")))
          Defer
          {
            {(343190 call _freeIterator _iterator[343164])
            }
          }
          { scopeless type(343179 'move' _indexOfInterest[343163](343176 call iteratorIndex _iterator[343164]))
          }
          ForLoop[343165]
          { unknown l[343183] "index var" "insert auto destroy"(343185 'move' l[343183] _indexOfInterest[343163])
            { const blockval[343012] "const"(343009 call .(343006 call .(343004 call postfix!(343003 call(413346 call . this[344888] c"locDoms") l[343183])) c"mySparseBlock") c"_value")(343015 'end of statement') const _first[343024] "const"(343021 call .(343018 call . blockval[343012] c"parentDom") c"first")(343027 'end of statement') const _last[343035] "const"(343032 call .(343029 call . blockval[343012] c"parentDom") c"last")(343038 'end of statement') unknown tmp[343050] "temp"(343049 call binarySearch inds[342842] _first[343024] comp[342961])(343057 call _check_tuple_var_decl tmp[343050] 2) unknown foundFirst[343039](343051 call tmp[343050] 0) unknown locFirst[343041](343054 call tmp[343050] 1)(343062 'end of statement') unknown tmp[343074] "temp"(343073 call binarySearch inds[342842] _last[343035] comp[342961])(343081 call _check_tuple_var_decl tmp[343074] 2) unknown foundLast[343063](343075 call tmp[343074] 0) unknown locLast[343065](343078 call tmp[343074] 1)(343086 'end of statement')
              if(343095 call _cond_test(343088 call ! foundLast[343063]))
              {(343092 call -= locLast[343065] 1)
              }
              if(343121 call _cond_test(343108 call ==(343104 call .(343101 call .(366520 call . this[344888] c"dist") c"targetLocDom") c"first") l[343183]))
              {(343118 call = locFirst[343041](343115 call .(343112 call . inds[342842] c"_dom") c"first"))
              }
              if(343147 call _cond_test(343134 call ==(343130 call .(343127 call .(366526 call . this[344888] c"dist") c"targetLocDom") c"last") l[343183]))
              {(343144 call = locLast[343065](343141 call .(343138 call . inds[342842] c"_dom") c"last"))
              }(343160 call =(343155 call localeRanges[342990] l[343183])(343158 call chpl_build_bounded_range locFirst[343041] locLast[343065]))
            } label _continueLabel[343168] _indexOfInterest[343163] _iterator[343164]
          } label _breakLabel[343169]
        }
      }(343206 'on block' 0 tmp[343201])
    } unknown _totalAdded[343212](343210 call chpl__atomicType int(64)[13])(343215 'end of statement')
    { unknown tmpIter[343279] "expr temp" "maybe ref" "no copy" "temp"(343282 'move' tmpIter[343279](343218 call .(366532 call . this[344888] c"dist") c"targetLocDom")) unknown isRngDomArr[343462] "maybe param" "temp"(343477 'move' isRngDomArr[343462](343475 call ||(343464 call isBoundedRange tmpIter[343279])(343473 call ||(343467 call isDomain tmpIter[343279])(343470 call isArray tmpIter[343279]))))
      if isRngDomArr[343462]
      { const _coforallCount[343334] "const" "end count" "temp"(343399 'move' _coforallCount[343334](343396 call _endCountAlloc 0)) unknown numTasks[343335] "temp"(343383 'move' numTasks[343335](343379 call . tmpIter[343279] c"size"))(343374 call _upEndCount _coforallCount[343334] 0 numTasks[343335]) unknown _indexOfInterest[343341] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343342] "expr temp" "temp"(343351 'move' _iterator[343342](343349 call _getIterator tmpIter[343279]))
        Defer
        {
          {(343367 call _freeIterator _iterator[343342])
          }
        }
        { scopeless type(343356 'move' _indexOfInterest[343341](343353 call iteratorIndex _iterator[343342]))
        }
        ForLoop[343343]
        { unknown l[343360] "coforall index var" "index var" "insert auto destroy"(343362 'move' l[343360] _indexOfInterest[343341]) const tmp[343285] "const" "temp"(343287 'move' tmp[343285](343289 'deref'(343290 '_wide_get_locale'(343295 call(343292 call .(366543 call . this[344888] c"dist") c"targetLocales") l[343360]))))
          {
            { const _retval[343303] "const"(343315 call(343305 call .(343307 call .(343309 call postfix!(343311 call(413380 call . this[344888] c"locDoms") l[343360])) c"mySparseBlock") c"bulkAdd")(343317 call inds[342842](343319 call localeRanges[342990] l[343360]))(dataSorted = 1)(isUnique = 0))(343326 'end of statement')(343331 call(343328 call . _totalAdded[343212] c"add") _retval[343303])
            }(343336 call _downEndCount _coforallCount[343334] nil[44])(343298 'coforall on block' 0 tmp[343285])
          } label _continueLabel[343346] _indexOfInterest[343341] _iterator[343342]
        } label _breakLabel[343347]
        Defer
        {
          {(343386 call _endCountFree _coforallCount[343334])
          }
        }(343391 call _waitEndCount _coforallCount[343334] 0 numTasks[343335])
      }
      { const _coforallCount[343403] "const" "end count" "temp"(343459 'move' _coforallCount[343403](343456 call _endCountAlloc 0)) unknown _indexOfInterest[343410] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343411] "expr temp" "temp"(343420 'move' _iterator[343411](343418 call _getIterator tmpIter[343279]))
        Defer
        {
          {(343436 call _freeIterator _iterator[343411])
          }
        }
        { scopeless type(343425 'move' _indexOfInterest[343410](343422 call iteratorIndex _iterator[343411]))
        }
        ForLoop[343412]
        { unknown l[343429] "coforall index var" "index var" "insert auto destroy"(343431 'move' l[343429] _indexOfInterest[343410])(343443 call _upEndCount _coforallCount[343403] 0) const tmp[343271] "const" "temp"(343273 'move' tmp[343271](343269 'deref'(343268 '_wide_get_locale'(343227 call(343222 call .(366537 call . this[344888] c"dist") c"targetLocales") l[343429]))))
          {
            { const _retval[343255] "const"(343254 call(343239 call .(343234 call .(343232 call postfix!(343231 call(413369 call . this[344888] c"locDoms") l[343429])) c"mySparseBlock") c"bulkAdd")(343248 call inds[342842](343246 call localeRanges[342990] l[343429]))(dataSorted = 1)(isUnique = 0))(343258 'end of statement')(343266 call(343261 call . _totalAdded[343212] c"add") _retval[343255])
            }(343405 call _downEndCount _coforallCount[343403] nil[44])(343276 'coforall on block' 0 tmp[343271])
          } label _continueLabel[343415] _indexOfInterest[343410] _iterator[343411]
        } label _breakLabel[343416]
        Defer
        {
          {(343447 call _endCountFree _coforallCount[343403])
          }
        }(343452 call _waitEndCount _coforallCount[343403] 0)
      }
    } const _retval[343487] "const"(343486 call(343482 call . _totalAdded[343212] c"read"))(343490 'end of statement')(343492 return _retval[343487])(355594 'used modules list'(342860 'use' Sort[267968])(342864 'use' Search[291233]))
  } function SparseBlockDom[344858](?).bulkAddHere_help[343509](arg _mt[344894]:_MT[238], arg this[344892]:SparseBlockDom[344858](?), arg inds[343506] :(343503 call chpl__buildArrayRuntimeType nil[44](343501 call chpl__buildIndexType(413391 call . this[344892] c"rank")(413396 call . this[344892] c"idxType"))), arg dataSorted[343512] = 0, arg isUnique[343516] = 0) : _unknown[51] "method" "primary method"
  { const _retval[343535] "const"(343534 call(343525 call .(343522 call .(343520 call postfix!(413401 call . this[344892] c"myLocDom")) c"mySparseBlock") c"bulkAdd") inds[343506](dataSorted = 1)(isUnique = 0))(343538 'end of statement')(343541 return _retval[343535])
  } function SparseBlockDom[344858](?).dsiSerialWrite[343549](arg _mt[344898]:_MT[238], arg this[344896]:SparseBlockDom[344858](?), arg f[343547]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(343650 call _cond_test(343553 call ==(413408 call . this[344896] c"rank") 1))
    {(343557 call <~> f[343547] "{")
      { unknown _indexOfInterest[343590] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343591] "expr temp" "temp"(343600 'move' _iterator[343591](343598 call _getIterator(413414 call . this[344896] c"locDoms")))
        Defer
        {
          {(343616 call _freeIterator _iterator[343591])
          }
        }
        { scopeless type(343605 'move' _indexOfInterest[343590](343602 call iteratorIndex _iterator[343591]))
        }
        ForLoop[343592]
        { unknown locdom[343609] "index var" "insert auto destroy"(343611 'move' locdom[343609] _indexOfInterest[343590])
          {
            if(343585 call _cond_test(343566 call .(343564 call postfix! locdom[343609]) c"dsiNumIndices"))
            {(343571 call <~> f[343547] " ")(343583 call(343578 call .(343576 call postfix! locdom[343609]) c"dsiSerialWrite") f[343547])
            }
          } label _continueLabel[343595] _indexOfInterest[343590] _iterator[343591]
        } label _breakLabel[343596]
      }(343625 call <~> f[343547] "}")
    }
    {(343647 call compilerError "Can't write out multidimensional sparse distributed domains yet")
    }
  } function SparseBlockDom[344858](?).dsiBuildArray[343661](arg _mt[344902]:_MT[238], arg this[344900]:SparseBlockDom[344858](?), arg eltType[343659]:_any[178](?), param arg initElts[343664] : bool[10]) : _unknown[51] "method" "primary method"
  { unknown arr[343688](343669 'new'(_chpl_manager = unmanaged[220](?))(343687 call SparseBlockArr[413423](?)(eltType = eltType[343659])(rank =(413429 call . this[344900] c"rank"))(idxType =(413434 call . this[344900] c"idxType"))(stridable =(413439 call . this[344900] c"stridable"))(sparseLayoutType =(413444 call . this[344900] c"sparseLayoutType"))(dom =(343685 call _to_unmanaged this[344900]))))(343691 'end of statement')(343699 call(343694 call . arr[343688] c"setup") initElts[343664])(343702 return arr[343688])
  } function SparseBlockDom[344858](?).getLocDom[343710](arg _mt[344906]:_MT[238], arg this[344904]:SparseBlockDom[344858](?), arg localeIdx[343708]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(343718 return(343716 call postfix!(343715 call(413452 call . this[344904] c"locDoms") localeIdx[343708])))
  } function SparseBlockDom[344858](?).these[343725](arg _mt[344910]:_MT[238], arg this[344908]:SparseBlockDom[344858](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[343778] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343779] "expr temp" "temp"(343788 'move' _iterator[343779](343786 call _getIterator(413458 call . this[344908] c"locDoms")))
      Defer
      {
        {(343804 call _freeIterator _iterator[343779])
        }
      }
      { scopeless type(343793 'move' _indexOfInterest[343778](343790 call iteratorIndex _iterator[343779]))
      }
      ForLoop[343780]
      { unknown locDom[343797] "index var" "insert auto destroy"(343799 'move' locDom[343797] _indexOfInterest[343778])
        { unknown _indexOfInterest[343744] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343745] "expr temp" "temp"(343754 'move' _iterator[343745](343752 call _getIterator(343740 call(343736 call .(343733 call .(343731 call postfix! locDom[343797]) c"mySparseBlock") c"these"))))
          Defer
          {
            {(343771 call _freeIterator _iterator[343745])
            }
          }
          { scopeless type(343760 'move' _indexOfInterest[343744](343757 call iteratorIndex _iterator[343745]))
          }
          ForLoop[343746]
          { unknown x[343764] "index var" "insert auto destroy"(343766 'move' x[343764] _indexOfInterest[343744])(343742 yield x[343764]) label _continueLabel[343749] _indexOfInterest[343744] _iterator[343745]
          } label _breakLabel[343750]
        } label _continueLabel[343783] _indexOfInterest[343778] _iterator[343779]
      } label _breakLabel[343784]
    }
  } function SparseBlockDom[344858](?).these[343820](arg _mt[344914]:_MT[238], arg this[344912]:SparseBlockDom[344858](?), param arg tag[343817] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[343911] "expr temp" "maybe ref" "no copy" "temp"(343914 'move' tmpIter[343911](343840 call _build_tuple(413467 call . this[344912] c"locDoms")(343837 call .(366552 call . this[344912] c"dist") c"targetLocDom"))) unknown isRngDomArr[344135] "maybe param" "temp"(344150 'move' isRngDomArr[344135](344148 call ||(344137 call isBoundedRange tmpIter[343911])(344146 call ||(344140 call isDomain tmpIter[343911])(344143 call isArray tmpIter[343911]))))
      if isRngDomArr[344135]
      { const _coforallCount[343979] "const" "end count" "temp"(344058 'move' _coforallCount[343979](344055 call _endCountAlloc 0)) unknown numTasks[343980] "temp"(344042 'move' numTasks[343980](344038 call . tmpIter[343911] c"size"))(344033 call _upEndCount _coforallCount[343979] 0 numTasks[343980]) unknown _indexOfInterest[343986] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343987] "expr temp" "temp"(343996 'move' _iterator[343987](343994 call _getIteratorZip tmpIter[343911]))
        Defer
        {
          {(344026 call _freeIterator _iterator[343987])
          }
        }
        { scopeless type(344001 'move' _indexOfInterest[343986](343998 call iteratorIndex _iterator[343987]))
        }
        ForLoop[343988]
        {(344006 call _check_tuple_var_decl _indexOfInterest[343986] 2) unknown locDom[344012] "coforall index var" "index var" "insert auto destroy"(344014 'move' locDom[344012](344010 call _indexOfInterest[343986] 0)) unknown localeIndex[344019] "coforall index var" "index var" "insert auto destroy"(344021 'move' localeIndex[344019](344017 call _indexOfInterest[343986] 1)) const tmp[343917] "const" "temp"(343919 'move' tmp[343917](343921 'deref'(343922 '_wide_get_locale' locDom[344012])))
          {
            {
              { unknown _indexOfInterest[343930] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343932] "expr temp" "temp"(343934 'move' _iterator[343932](343937 call _getIterator(343947 call(343939 call .(343941 call .(343943 call postfix! locDom[344012]) c"mySparseBlock") c"these") tag[343817])))
                Defer
                {
                  {(343951 call _freeIterator _iterator[343932])
                  }
                }
                { scopeless type(343955 'move' _indexOfInterest[343930](343958 call iteratorIndex _iterator[343932]))
                }
                ForLoop[343960]
                { unknown followThis[343963] "index var" "insert auto destroy"(343965 'move' followThis[343963] _indexOfInterest[343930])
                  {(343969 yield(343971 call _build_tuple followThis[343963] localeIndex[344019]))
                  } label _continueLabel[343974] _indexOfInterest[343930] _iterator[343932]
                } label _breakLabel[343976]
              }
            }(343981 call _downEndCount _coforallCount[343979] nil[44])(343925 'coforall on block' 0 tmp[343917])
          } label _continueLabel[343991] _indexOfInterest[343986] _iterator[343987]
        } label _breakLabel[343992]
        Defer
        {
          {(344045 call _endCountFree _coforallCount[343979])
          }
        }(344050 call _waitEndCount _coforallCount[343979] 0 numTasks[343980])
      }
      { const _coforallCount[344062] "const" "end count" "temp"(344132 'move' _coforallCount[344062](344129 call _endCountAlloc 0)) unknown _indexOfInterest[344069] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344070] "expr temp" "temp"(344079 'move' _iterator[344070](344077 call _getIteratorZip tmpIter[343911]))
        Defer
        {
          {(344109 call _freeIterator _iterator[344070])
          }
        }
        { scopeless type(344084 'move' _indexOfInterest[344069](344081 call iteratorIndex _iterator[344070]))
        }
        ForLoop[344071]
        {(344089 call _check_tuple_var_decl _indexOfInterest[344069] 2) unknown locDom[344095] "coforall index var" "index var" "insert auto destroy"(344097 'move' locDom[344095](344093 call _indexOfInterest[344069] 0)) unknown localeIndex[344102] "coforall index var" "index var" "insert auto destroy"(344104 'move' localeIndex[344102](344100 call _indexOfInterest[344069] 1))(344116 call _upEndCount _coforallCount[344062] 0) const tmp[343901] "const" "temp"(343903 'move' tmp[343901](343899 'deref'(343898 '_wide_get_locale' locDom[344095])))
          {
            {
              { unknown _indexOfInterest[343863] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343864] "expr temp" "temp"(343873 'move' _iterator[343864](343871 call _getIterator(343854 call(343849 call .(343846 call .(343844 call postfix! locDom[344095]) c"mySparseBlock") c"these") tag[343817])))
                Defer
                {
                  {(343890 call _freeIterator _iterator[343864])
                  }
                }
                { scopeless type(343879 'move' _indexOfInterest[343863](343876 call iteratorIndex _iterator[343864]))
                }
                ForLoop[343865]
                { unknown followThis[343883] "index var" "insert auto destroy"(343885 'move' followThis[343883] _indexOfInterest[343863])
                  {(343860 yield(343858 call _build_tuple followThis[343883] localeIndex[344102]))
                  } label _continueLabel[343868] _indexOfInterest[343863] _iterator[343864]
                } label _breakLabel[343869]
              }
            }(344064 call _downEndCount _coforallCount[344062] nil[44])(343906 'coforall on block' 0 tmp[343901])
          } label _continueLabel[344074] _indexOfInterest[344069] _iterator[344070]
        } label _breakLabel[344075]
        Defer
        {
          {(344120 call _endCountFree _coforallCount[344062])
          }
        }(344125 call _waitEndCount _coforallCount[344062] 0)
      }
    }
  }
  {(343827 call == tag[343817] leader[447])
  } function SparseBlockDom[344858](?).these[344164](arg _mt[344918]:_MT[238], arg this[344916]:SparseBlockDom[344858](?), param arg tag[344161] : iterKind[453], arg followThis[344166]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[344181] "temp" followThis[344166](344188 call _check_tuple_var_decl tmp[344181] 2) unknown locFollowThis[344175](344182 call tmp[344181] 0) unknown localeIndex[344177](344185 call tmp[344181] 1)(344193 'end of statement')
    { unknown _indexOfInterest[344210] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344211] "expr temp" "temp"(344220 'move' _iterator[344211](344218 call _getIterator(344206 call(344200 call .(344199 call locFollowThis[344175] 0) c"these") tag[344161] locFollowThis[344175])))
      Defer
      {
        {(344237 call _freeIterator _iterator[344211])
        }
      }
      { scopeless type(344226 'move' _indexOfInterest[344210](344223 call iteratorIndex _iterator[344211]))
      }
      ForLoop[344212]
      { unknown i[344230] "index var" "insert auto destroy"(344232 'move' i[344230] _indexOfInterest[344210])(344208 yield i[344230]) label _continueLabel[344215] _indexOfInterest[344210] _iterator[344211]
      } label _breakLabel[344216]
    }
  }
  {(344173 call == tag[344161] follower[449])
  } function SparseBlockDom[344858](?).these[344253](arg _mt[344922]:_MT[238], arg this[344920]:SparseBlockDom[344858](?), param arg tag[344250] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[344317] "expr temp" "maybe ref" "no copy" "temp"(344320 'move' tmpIter[344317](413502 call . this[344920] c"locDoms")) unknown isRngDomArr[344476] "maybe param" "temp"(344491 'move' isRngDomArr[344476](344489 call ||(344478 call isBoundedRange tmpIter[344317])(344487 call ||(344481 call isDomain tmpIter[344317])(344484 call isArray tmpIter[344317]))))
      if isRngDomArr[344476]
      { const _coforallCount[344348] "const" "end count" "temp"(344413 'move' _coforallCount[344348](344410 call _endCountAlloc 0)) unknown numTasks[344349] "temp"(344397 'move' numTasks[344349](344393 call . tmpIter[344317] c"size"))(344388 call _upEndCount _coforallCount[344348] 0 numTasks[344349]) unknown _indexOfInterest[344355] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344356] "expr temp" "temp"(344365 'move' _iterator[344356](344363 call _getIterator tmpIter[344317]))
        Defer
        {
          {(344381 call _freeIterator _iterator[344356])
          }
        }
        { scopeless type(344370 'move' _indexOfInterest[344355](344367 call iteratorIndex _iterator[344356]))
        }
        ForLoop[344357]
        { unknown locDom[344374] "coforall index var" "index var" "insert auto destroy"(344376 'move' locDom[344374] _indexOfInterest[344355]) const tmp[344323] "const" "temp"(344325 'move' tmp[344323](344327 'deref'(344328 '_wide_get_locale' locDom[344374])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344339] "index var" "insert auto destroy"
                iterated expressions:
                  (344342 call .(344344 call postfix! locDom[344374]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344336 yield i[344339])
                }
              }
            }(344350 call _downEndCount _coforallCount[344348] nil[44])(344331 'coforall on block' 0 tmp[344323])
          } label _continueLabel[344360] _indexOfInterest[344355] _iterator[344356]
        } label _breakLabel[344361]
        Defer
        {
          {(344400 call _endCountFree _coforallCount[344348])
          }
        }(344405 call _waitEndCount _coforallCount[344348] 0 numTasks[344349])
      }
      { const _coforallCount[344417] "const" "end count" "temp"(344473 'move' _coforallCount[344417](344470 call _endCountAlloc 0)) unknown _indexOfInterest[344424] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344425] "expr temp" "temp"(344434 'move' _iterator[344425](344432 call _getIterator tmpIter[344317]))
        Defer
        {
          {(344450 call _freeIterator _iterator[344425])
          }
        }
        { scopeless type(344439 'move' _indexOfInterest[344424](344436 call iteratorIndex _iterator[344425]))
        }
        ForLoop[344426]
        { unknown locDom[344443] "coforall index var" "index var" "insert auto destroy"(344445 'move' locDom[344443] _indexOfInterest[344424])(344457 call _upEndCount _coforallCount[344417] 0) const tmp[344308] "const" "temp"(344310 'move' tmp[344308](344306 'deref'(344305 '_wide_get_locale' locDom[344443])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344301] "index var" "insert auto destroy"
                iterated expressions:
                  (344293 call .(344291 call postfix! locDom[344443]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344297 yield i[344301])
                }
              }
            }(344419 call _downEndCount _coforallCount[344417] nil[44])(344313 'coforall on block' 0 tmp[344308])
          } label _continueLabel[344429] _indexOfInterest[344424] _iterator[344425]
        } label _breakLabel[344430]
        Defer
        {
          {(344461 call _endCountFree _coforallCount[344417])
          }
        }(344466 call _waitEndCount _coforallCount[344417] 0)
      }
    }
  }
  {(344284 call &&(344260 call == tag[344250] standalone[451])(344283 'method call resolves'(344278 call .(344275 call .(344273 call postfix!(344272 call(413491 call . this[344920] c"locDoms")(344270 call createTuple(413496 call . this[344920] c"rank") int(64)[13] 0))) c"mySparseBlock") c"_value") "these" tag[344250]))
  } function SparseBlockDom[344858](?).dsiMember[344503](arg _mt[344926]:_MT[238], arg this[344924]:SparseBlockDom[344858](?), arg ind[344501]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown _retval[344508] 0 bool[10](344511 'end of statement') const tmp[344546] "const" "temp"(344548 'move' tmp[344546](344544 'deref'(344543 '_wide_get_locale'(344519 call(344514 call .(366559 call . this[344924] c"dist") c"dsiIndexToLocale") ind[344501]))))
    {
      {(344539 call = _retval[344508](344538 call(344533 call .(344531 call postfix!(344530 call(413515 call . this[344924] c"locDoms")(344528 call(344523 call .(366564 call . this[344924] c"dist") c"targetLocsIdx") ind[344501]))) c"dsiMember") ind[344501]))
      }(344551 'on block' 0 tmp[344546])
    }(344555 return _retval[344508])
  }
  { scopeless type bool[10]
  } function SparseBlockDom[344858](?).dsiClear[344562](arg _mt[344930]:_MT[238], arg this[344928]:SparseBlockDom[344858](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[344587] "expr temp" "maybe ref" "no copy" "temp"(344590 'move' tmpIter[344587](413523 call . this[344928] c"locDoms")) unknown isRngDomArr[344741] "maybe param" "temp"(344756 'move' isRngDomArr[344741](344754 call ||(344743 call isBoundedRange tmpIter[344587])(344752 call ||(344746 call isDomain tmpIter[344587])(344749 call isArray tmpIter[344587]))))
      if isRngDomArr[344741]
      { const _coforallCount[344613] "const" "end count" "temp"(344678 'move' _coforallCount[344613](344675 call _endCountAlloc 0)) unknown numTasks[344614] "temp"(344662 'move' numTasks[344614](344658 call . tmpIter[344587] c"size"))(344653 call _upEndCount _coforallCount[344613] 0 numTasks[344614]) unknown _indexOfInterest[344620] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344621] "expr temp" "temp"(344630 'move' _iterator[344621](344628 call _getIterator tmpIter[344587]))
        Defer
        {
          {(344646 call _freeIterator _iterator[344621])
          }
        }
        { scopeless type(344635 'move' _indexOfInterest[344620](344632 call iteratorIndex _iterator[344621]))
        }
        ForLoop[344622]
        { unknown locDom[344639] "coforall index var" "index var" "insert auto destroy"(344641 'move' locDom[344639] _indexOfInterest[344620]) const tmp[344593] "const" "temp"(344595 'move' tmp[344593](344597 'deref'(344598 '_wide_get_locale' locDom[344639])))
          {(344611 call(344606 call .(344608 call postfix! locDom[344639]) c"dsiClear"))(344615 call _downEndCount _coforallCount[344613] nil[44])(344601 'coforall on block' 0 tmp[344593])
          } label _continueLabel[344625] _indexOfInterest[344620] _iterator[344621]
        } label _breakLabel[344626]
        Defer
        {
          {(344665 call _endCountFree _coforallCount[344613])
          }
        }(344670 call _waitEndCount _coforallCount[344613] 0 numTasks[344614])
      }
      { const _coforallCount[344682] "const" "end count" "temp"(344738 'move' _coforallCount[344682](344735 call _endCountAlloc 0)) unknown _indexOfInterest[344689] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344690] "expr temp" "temp"(344699 'move' _iterator[344690](344697 call _getIterator tmpIter[344587]))
        Defer
        {
          {(344715 call _freeIterator _iterator[344690])
          }
        }
        { scopeless type(344704 'move' _indexOfInterest[344689](344701 call iteratorIndex _iterator[344690]))
        }
        ForLoop[344691]
        { unknown locDom[344708] "coforall index var" "index var" "insert auto destroy"(344710 'move' locDom[344708] _indexOfInterest[344689])(344722 call _upEndCount _coforallCount[344682] 0) const tmp[344579] "const" "temp"(344581 'move' tmp[344579](344577 'deref'(344576 '_wide_get_locale' locDom[344708])))
          {(344574 call(344570 call .(344568 call postfix! locDom[344708]) c"dsiClear"))(344684 call _downEndCount _coforallCount[344682] nil[44])(344584 'coforall on block' 0 tmp[344579])
          } label _continueLabel[344694] _indexOfInterest[344689] _iterator[344690]
        } label _breakLabel[344695]
        Defer
        {
          {(344726 call _endCountFree _coforallCount[344682])
          }
        }(344731 call _waitEndCount _coforallCount[344682] 0)
      }
    }
  } function SparseBlockDom[344858](?).dsiMyDist[344765](arg _mt[344934]:_MT[238], arg this[344932]:SparseBlockDom[344858](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(344768 return(413532 call . this[344932] c"dist"))
  } function SparseBlockDom[344858](?).dsiAssignDomain[344779](arg _mt[344938]:_MT[238], arg this[344936]:SparseBlockDom[344858](?), arg rhs[344776] : _domain[125902](?), arg lhsPrivate[344782] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(344809 call _cond_test(344786 call ! lhsPrivate[344782]))
    {(344807 call halt "SparseBlock domain assignment not yet supported")
    }
    { unknown _indexOfInterest[344822] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344823] "expr temp" "temp"(344832 'move' _iterator[344823](344830 call _getIterator rhs[344776]))
      Defer
      {
        {(344848 call _freeIterator _iterator[344823])
        }
      }
      { scopeless type(344837 'move' _indexOfInterest[344822](344834 call iteratorIndex _iterator[344823]))
      }
      ForLoop[344824]
      { unknown i[344841] "index var" "insert auto destroy"(344843 'move' i[344841] _indexOfInterest[344822])(344820 call(413539 call . this[344936] c"dsiAdd") i[344841]) label _continueLabel[344827] _indexOfInterest[344822] _iterator[344823]
      } label _breakLabel[344828]
    }
  } type SparseBlockDom[344858](?) val super[355800]:BaseSparseDomImpl[147961](?) "super class" unknown sparseLayoutType[342040] "type variable" unknown stridable[342045] "param" 0 bool[10] const dist[342056] "const"(342054 call unmanaged Block[415531](?) rank[148211] idxType[148215] sparseLayoutType[342040]) unknown whole[342070](342068 call chpl__buildDomainRuntimeType defaultDist[94050](rank = rank[148211])(idxType = idxType[148215])(stridable = stridable[342045])) unknown locDoms[342092](342090 call chpl__buildArrayRuntimeType(342088 call chpl__ensureDomainExpr(342075 call . dist[342056] c"targetLocDom"))(342085 call unmanaged LocSparseBlockDom?[415564](?) rank[148211] idxType[148215] stridable[342045] sparseLayoutType[342040])) unknown myLocDom[342105](342102 call unmanaged LocSparseBlockDom?[415564](?) rank[148211] idxType[148215] stridable[342045] sparseLayoutType[342040]) type SparseBlockDom[409237](?) function getDefaultSparseDist[344945](arg sparseLayoutType[344943]:_any[178](?)) : _unknown[51] "private"
  {
    if(344970 call _cond_test(354934 'is_subtype' DefaultDist[378045](?)(344951 call _to_nonnil sparseLayoutType[344943])))
    {(344956 return defaultDist[94050])
    }
    {(344967 return(344959 'new'(344966 call dmap[118239](344961 'new'(344964 call sparseLayoutType[344943])))))
    }
  } function LocSparseBlockDom[345127](?).dsiAdd[345040](arg _mt[345131]:_MT[238], arg this[345129]:LocSparseBlockDom[345127](?), arg ind[345037] :(345035 call *(413557 call . this[345129] c"rank")(413562 call . this[345129] c"idxType"))) : _unknown[51] "method" "primary method"
  {(345049 return(345048 call(345043 call .(366570 call . this[345129] c"mySparseBlock") c"add") ind[345037]))
  } function LocSparseBlockDom[345127](?).dsiMember[345063](arg _mt[345135]:_MT[238], arg this[345133]:LocSparseBlockDom[345127](?), arg ind[345060] :(345058 call *(413568 call . this[345133] c"rank")(413573 call . this[345133] c"idxType"))) : _unknown[51] "method" "primary method"
  {(345072 return(345071 call(345066 call .(366575 call . this[345133] c"mySparseBlock") c"contains") ind[345060]))
  } function LocSparseBlockDom[345127](?).dsiClear[345079](arg _mt[345139]:_MT[238], arg this[345137]:LocSparseBlockDom[345127](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345086 call(345082 call .(366580 call . this[345137] c"mySparseBlock") c"clear"))
  } function LocSparseBlockDom[345127](?).dsiSerialWrite[345095](arg _mt[345143]:_MT[238], arg this[345141]:LocSparseBlockDom[345127](?), arg w[345093]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345108 call(345101 call .(345098 call .(366585 call . this[345141] c"mySparseBlock") c"_value") c"dsiSerialWrite") w[345093](printBrackets = 0))
  } function LocSparseBlockDom[345127](?).dsiNumIndices[345115](arg _mt[345147]:_MT[238], arg this[345145]:LocSparseBlockDom[345127](?)) : _unknown[51] "method" "primary method" "no parens"
  {(345121 return(345118 call .(366590 call . this[345145] c"mySparseBlock") c"size"))
  } type LocSparseBlockDom[345127](?) val super[355802]:object[22] "super class" unknown rank[344979] "param" int(64)[13] unknown idxType[344983] "type variable" unknown stridable[344987] "param" bool[10] unknown sparseLayoutType[344991] "type variable" unknown parentDom[345001](344999 call chpl__buildDomainRuntimeType defaultDist[94050] rank[344979] idxType[344983] stridable[344987]) unknown sparseDist[345009](345008 call getDefaultSparseDist sparseLayoutType[344991]) unknown mySparseBlock[345027](345025 call chpl__distributed sparseDist[345009](345022 call chpl__buildSparseDomainRuntimeType(345019 call . parentDom[345001] c"defaultSparseDist") parentDom[345001])) type unmanaged LocSparseBlockDom[415573](?) type unmanaged LocSparseBlockDom?[415564](?) type LocSparseBlockDom?[415561](?) type LocSparseBlockDom[413081](?) function SparseBlockArr[347185](?).init[345211](arg _mt[347189]:_MT[238], arg this[347187]:SparseBlockArr[347185](?), arg eltType[345209]:_any[178](?), param arg rank[345213]:_any[178](?), arg idxType[345215]:_any[178](?), param arg stridable[345217]:_any[178](?), arg sparseLayoutType[345219]:_any[178](?), arg dom[345221]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345236 call(345224 call .(366595 call . this[347187] c"super") c"init")(eltType = eltType[345209])(rank = rank[345213])(idxType = idxType[345215])(dom = dom[345221]))(345244 call =(345240 call . this[347187] c"stridable") stridable[345217])(345252 call =(345248 call . this[347187] c"sparseLayoutType") sparseLayoutType[345219])(345268 call =(345258 call . this[347187] c"locArrDom")(345265 call .(345262 call . dom[345221] c"dist") c"targetLocDom"))
  } function SparseBlockArr[347185](?).setup[345277](arg _mt[347193]:_MT[238], arg this[347191]:SparseBlockArr[347185](?), param arg initElts[345275]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[345284](345283 '_wide_get_node' this[347191])(345287 'end of statement')
    { unknown tmpIter[345372] "expr temp" "maybe ref" "no copy" "temp"(345375 'move' tmpIter[345372](345294 call .(345291 call .(366604 call . this[347191] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345573] "maybe param" "temp"(345588 'move' isRngDomArr[345573](345586 call ||(345575 call isBoundedRange tmpIter[345372])(345584 call ||(345578 call isDomain tmpIter[345372])(345581 call isArray tmpIter[345372]))))
      if isRngDomArr[345573]
      { const _coforallCount[345445] "const" "end count" "temp"(345510 'move' _coforallCount[345445](345507 call _endCountAlloc 0)) unknown numTasks[345446] "temp"(345494 'move' numTasks[345446](345490 call . tmpIter[345372] c"size"))(345485 call _upEndCount _coforallCount[345445] 0 numTasks[345446]) unknown _indexOfInterest[345452] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345453] "expr temp" "temp"(345462 'move' _iterator[345453](345460 call _getIterator tmpIter[345372]))
        Defer
        {
          {(345478 call _freeIterator _iterator[345453])
          }
        }
        { scopeless type(345467 'move' _indexOfInterest[345452](345464 call iteratorIndex _iterator[345453]))
        }
        ForLoop[345454]
        { unknown localeIdx[345471] "coforall index var" "index var" "insert auto destroy"(345473 'move' localeIdx[345471] _indexOfInterest[345452]) const tmp[345378] "const" "temp"(345380 'move' tmp[345378](345382 'deref'(345383 '_wide_get_locale'(345391 call(345385 call .(345387 call .(366621 call . this[347191] c"dom") c"dist") c"targetLocales") localeIdx[345471]))))
          {
            { const locDom[345399] "const"(345404 call(345401 call .(366626 call . this[347191] c"dom") c"getLocDom") localeIdx[345471])(345407 'end of statement')(345409 call =(345411 call(413657 call . this[347191] c"locArr") localeIdx[345471])(345413 'new'(_chpl_manager = unmanaged[220](?))(345417 call LocSparseBlockArr[413584](?)(413664 call . this[347191] c"eltType")(413669 call . this[347191] c"rank")(413674 call . this[347191] c"idxType")(413679 call . this[347191] c"stridable")(413684 call . this[347191] c"sparseLayoutType") locDom[345399](initElts = initElts[345275]))))
              if(345427 call _cond_test(345429 call == thisid[345284](345432 call .(366629 call here[90435]) c"id")))
              {(345438 call =(413692 call . this[347191] c"myLocArr")(345441 call(413697 call . this[347191] c"locArr") localeIdx[345471]))
              }
            }(345447 call _downEndCount _coforallCount[345445] nil[44])(345394 'coforall on block' 0 tmp[345378])
          } label _continueLabel[345457] _indexOfInterest[345452] _iterator[345453]
        } label _breakLabel[345458]
        Defer
        {
          {(345497 call _endCountFree _coforallCount[345445])
          }
        }(345502 call _waitEndCount _coforallCount[345445] 0 numTasks[345446])
      }
      { const _coforallCount[345514] "const" "end count" "temp"(345570 'move' _coforallCount[345514](345567 call _endCountAlloc 0)) unknown _indexOfInterest[345521] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345522] "expr temp" "temp"(345531 'move' _iterator[345522](345529 call _getIterator tmpIter[345372]))
        Defer
        {
          {(345547 call _freeIterator _iterator[345522])
          }
        }
        { scopeless type(345536 'move' _indexOfInterest[345521](345533 call iteratorIndex _iterator[345522]))
        }
        ForLoop[345523]
        { unknown localeIdx[345540] "coforall index var" "index var" "insert auto destroy"(345542 'move' localeIdx[345540] _indexOfInterest[345521])(345554 call _upEndCount _coforallCount[345514] 0) const tmp[345363] "const" "temp"(345365 'move' tmp[345363](345361 'deref'(345360 '_wide_get_locale'(345306 call(345301 call .(345298 call .(366609 call . this[347191] c"dom") c"dist") c"targetLocales") localeIdx[345540]))))
          {
            { const locDom[345314] "const"(345313 call(345308 call .(366614 call . this[347191] c"dom") c"getLocDom") localeIdx[345540])(345317 'end of statement')(345337 call =(345322 call(413609 call . this[347191] c"locArr") localeIdx[345540])(345325 'new'(_chpl_manager = unmanaged[220](?))(345336 call LocSparseBlockArr[413584](?)(413616 call . this[347191] c"eltType")(413621 call . this[347191] c"rank")(413626 call . this[347191] c"idxType")(413631 call . this[347191] c"stridable")(413636 call . this[347191] c"sparseLayoutType") locDom[345314](initElts = initElts[345275]))))
              if(345355 call _cond_test(345345 call == thisid[345284](345342 call .(366617 call here[90435]) c"id")))
              {(345352 call =(413644 call . this[347191] c"myLocArr")(345351 call(413649 call . this[347191] c"locArr") localeIdx[345540]))
              }
            }(345516 call _downEndCount _coforallCount[345514] nil[44])(345368 'coforall on block' 0 tmp[345363])
          } label _continueLabel[345526] _indexOfInterest[345521] _iterator[345522]
        } label _breakLabel[345527]
        Defer
        {
          {(345558 call _endCountFree _coforallCount[345514])
          }
        }(345563 call _waitEndCount _coforallCount[345514] 0)
      }
    }
  } function SparseBlockArr[347185](?).dsiElementInitializationComplete[345596](arg _mt[347197]:_MT[238], arg this[347195]:SparseBlockArr[347185](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345638] "expr temp" "maybe ref" "no copy" "temp"(345641 'move' tmpIter[345638](345603 call .(345600 call .(366633 call . this[347195] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345799] "maybe param" "temp"(345814 'move' isRngDomArr[345799](345812 call ||(345801 call isBoundedRange tmpIter[345638])(345810 call ||(345804 call isDomain tmpIter[345638])(345807 call isArray tmpIter[345638]))))
      if isRngDomArr[345799]
      { const _coforallCount[345671] "const" "end count" "temp"(345736 'move' _coforallCount[345671](345733 call _endCountAlloc 0)) unknown numTasks[345672] "temp"(345720 'move' numTasks[345672](345716 call . tmpIter[345638] c"size"))(345711 call _upEndCount _coforallCount[345671] 0 numTasks[345672]) unknown _indexOfInterest[345678] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345679] "expr temp" "temp"(345688 'move' _iterator[345679](345686 call _getIterator tmpIter[345638]))
        Defer
        {
          {(345704 call _freeIterator _iterator[345679])
          }
        }
        { scopeless type(345693 'move' _indexOfInterest[345678](345690 call iteratorIndex _iterator[345679]))
        }
        ForLoop[345680]
        { unknown localeIdx[345697] "coforall index var" "index var" "insert auto destroy"(345699 'move' localeIdx[345697] _indexOfInterest[345678]) const tmp[345644] "const" "temp"(345646 'move' tmp[345644](345648 'deref'(345649 '_wide_get_locale'(345651 call(413715 call . this[347195] c"locArr") localeIdx[345697]))))
          {
            {(345669 call(345659 call .(345661 call .(345663 call postfix!(345665 call(413721 call . this[347195] c"locArr") localeIdx[345697])) c"myElems") c"dsiElementInitializationComplete"))
            }(345673 call _downEndCount _coforallCount[345671] nil[44])(345654 'coforall on block' 0 tmp[345644])
          } label _continueLabel[345683] _indexOfInterest[345678] _iterator[345679]
        } label _breakLabel[345684]
        Defer
        {
          {(345723 call _endCountFree _coforallCount[345671])
          }
        }(345728 call _waitEndCount _coforallCount[345671] 0 numTasks[345672])
      }
      { const _coforallCount[345740] "const" "end count" "temp"(345796 'move' _coforallCount[345740](345793 call _endCountAlloc 0)) unknown _indexOfInterest[345747] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345748] "expr temp" "temp"(345757 'move' _iterator[345748](345755 call _getIterator tmpIter[345638]))
        Defer
        {
          {(345773 call _freeIterator _iterator[345748])
          }
        }
        { scopeless type(345762 'move' _indexOfInterest[345747](345759 call iteratorIndex _iterator[345748]))
        }
        ForLoop[345749]
        { unknown localeIdx[345766] "coforall index var" "index var" "insert auto destroy"(345768 'move' localeIdx[345766] _indexOfInterest[345747])(345780 call _upEndCount _coforallCount[345740] 0) const tmp[345629] "const" "temp"(345631 'move' tmp[345629](345627 'deref'(345626 '_wide_get_locale'(345609 call(413703 call . this[347195] c"locArr") localeIdx[345766]))))
          {
            {(345623 call(345619 call .(345616 call .(345614 call postfix!(345613 call(413709 call . this[347195] c"locArr") localeIdx[345766])) c"myElems") c"dsiElementInitializationComplete"))
            }(345742 call _downEndCount _coforallCount[345740] nil[44])(345634 'coforall on block' 0 tmp[345629])
          } label _continueLabel[345752] _indexOfInterest[345747] _iterator[345748]
        } label _breakLabel[345753]
        Defer
        {
          {(345784 call _endCountFree _coforallCount[345740])
          }
        }(345789 call _waitEndCount _coforallCount[345740] 0)
      }
    }
  } function SparseBlockArr[347185](?).dsiElementDeinitializationComplete[345823](arg _mt[347201]:_MT[238], arg this[347199]:SparseBlockArr[347185](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345865] "expr temp" "maybe ref" "no copy" "temp"(345868 'move' tmpIter[345865](345830 call .(345827 call .(366638 call . this[347199] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[346026] "maybe param" "temp"(346041 'move' isRngDomArr[346026](346039 call ||(346028 call isBoundedRange tmpIter[345865])(346037 call ||(346031 call isDomain tmpIter[345865])(346034 call isArray tmpIter[345865]))))
      if isRngDomArr[346026]
      { const _coforallCount[345898] "const" "end count" "temp"(345963 'move' _coforallCount[345898](345960 call _endCountAlloc 0)) unknown numTasks[345899] "temp"(345947 'move' numTasks[345899](345943 call . tmpIter[345865] c"size"))(345938 call _upEndCount _coforallCount[345898] 0 numTasks[345899]) unknown _indexOfInterest[345905] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345906] "expr temp" "temp"(345915 'move' _iterator[345906](345913 call _getIterator tmpIter[345865]))
        Defer
        {
          {(345931 call _freeIterator _iterator[345906])
          }
        }
        { scopeless type(345920 'move' _indexOfInterest[345905](345917 call iteratorIndex _iterator[345906]))
        }
        ForLoop[345907]
        { unknown localeIdx[345924] "coforall index var" "index var" "insert auto destroy"(345926 'move' localeIdx[345924] _indexOfInterest[345905]) const tmp[345871] "const" "temp"(345873 'move' tmp[345871](345875 'deref'(345876 '_wide_get_locale'(345878 call(413739 call . this[347199] c"locArr") localeIdx[345924]))))
          {
            {(345896 call(345886 call .(345888 call .(345890 call postfix!(345892 call(413745 call . this[347199] c"locArr") localeIdx[345924])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(345900 call _downEndCount _coforallCount[345898] nil[44])(345881 'coforall on block' 0 tmp[345871])
          } label _continueLabel[345910] _indexOfInterest[345905] _iterator[345906]
        } label _breakLabel[345911]
        Defer
        {
          {(345950 call _endCountFree _coforallCount[345898])
          }
        }(345955 call _waitEndCount _coforallCount[345898] 0 numTasks[345899])
      }
      { const _coforallCount[345967] "const" "end count" "temp"(346023 'move' _coforallCount[345967](346020 call _endCountAlloc 0)) unknown _indexOfInterest[345974] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345975] "expr temp" "temp"(345984 'move' _iterator[345975](345982 call _getIterator tmpIter[345865]))
        Defer
        {
          {(346000 call _freeIterator _iterator[345975])
          }
        }
        { scopeless type(345989 'move' _indexOfInterest[345974](345986 call iteratorIndex _iterator[345975]))
        }
        ForLoop[345976]
        { unknown localeIdx[345993] "coforall index var" "index var" "insert auto destroy"(345995 'move' localeIdx[345993] _indexOfInterest[345974])(346007 call _upEndCount _coforallCount[345967] 0) const tmp[345856] "const" "temp"(345858 'move' tmp[345856](345854 'deref'(345853 '_wide_get_locale'(345836 call(413727 call . this[347199] c"locArr") localeIdx[345993]))))
          {
            {(345850 call(345846 call .(345843 call .(345841 call postfix!(345840 call(413733 call . this[347199] c"locArr") localeIdx[345993])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(345969 call _downEndCount _coforallCount[345967] nil[44])(345861 'coforall on block' 0 tmp[345856])
          } label _continueLabel[345979] _indexOfInterest[345974] _iterator[345975]
        } label _breakLabel[345980]
        Defer
        {
          {(346011 call _endCountFree _coforallCount[345967])
          }
        }(346016 call _waitEndCount _coforallCount[345967] 0)
      }
    }
  } function SparseBlockArr[347185](?).dsiDestroyArr[346054](arg _mt[347205]:_MT[238], arg this[347203]:SparseBlockArr[347185](?), arg deinitElts[346051] : bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[346122] "expr temp" "maybe ref" "no copy" "temp"(346125 'move' tmpIter[346122](346061 call .(346058 call .(366643 call . this[347203] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[346305] "maybe param" "temp"(346320 'move' isRngDomArr[346305](346318 call ||(346307 call isBoundedRange tmpIter[346122])(346316 call ||(346310 call isDomain tmpIter[346122])(346313 call isArray tmpIter[346122]))))
      if isRngDomArr[346305]
      { const _coforallCount[346177] "const" "end count" "temp"(346242 'move' _coforallCount[346177](346239 call _endCountAlloc 0)) unknown numTasks[346178] "temp"(346226 'move' numTasks[346178](346222 call . tmpIter[346122] c"size"))(346217 call _upEndCount _coforallCount[346177] 0 numTasks[346178]) unknown _indexOfInterest[346184] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346185] "expr temp" "temp"(346194 'move' _iterator[346185](346192 call _getIterator tmpIter[346122]))
        Defer
        {
          {(346210 call _freeIterator _iterator[346185])
          }
        }
        { scopeless type(346199 'move' _indexOfInterest[346184](346196 call iteratorIndex _iterator[346185]))
        }
        ForLoop[346186]
        { unknown localeIdx[346203] "coforall index var" "index var" "insert auto destroy"(346205 'move' localeIdx[346203] _indexOfInterest[346184]) const tmp[346128] "const" "temp"(346130 'move' tmp[346128](346132 'deref'(346133 '_wide_get_locale'(346135 call(413767 call . this[347203] c"locArr") localeIdx[346203]))))
          {
            { unknown arr[346143](346145 call(413773 call . this[347203] c"locArr") localeIdx[346203])(346148 'end of statement')
              if(346150 call _cond_test deinitElts[346051])
              {(346155 call _deinitElements(346157 call .(346159 call postfix! arr[346143]) c"myElems"))
              }(346172 call(346164 call .(346166 call .(346168 call postfix! arr[346143]) c"myElems") c"dsiElementDeinitializationComplete"))(346174 call chpl__delete arr[346143])
            }(346179 call _downEndCount _coforallCount[346177] nil[44])(346138 'coforall on block' 0 tmp[346128])
          } label _continueLabel[346189] _indexOfInterest[346184] _iterator[346185]
        } label _breakLabel[346190]
        Defer
        {
          {(346229 call _endCountFree _coforallCount[346177])
          }
        }(346234 call _waitEndCount _coforallCount[346177] 0 numTasks[346178])
      }
      { const _coforallCount[346246] "const" "end count" "temp"(346302 'move' _coforallCount[346246](346299 call _endCountAlloc 0)) unknown _indexOfInterest[346253] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346254] "expr temp" "temp"(346263 'move' _iterator[346254](346261 call _getIterator tmpIter[346122]))
        Defer
        {
          {(346279 call _freeIterator _iterator[346254])
          }
        }
        { scopeless type(346268 'move' _indexOfInterest[346253](346265 call iteratorIndex _iterator[346254]))
        }
        ForLoop[346255]
        { unknown localeIdx[346272] "coforall index var" "index var" "insert auto destroy"(346274 'move' localeIdx[346272] _indexOfInterest[346253])(346286 call _upEndCount _coforallCount[346246] 0) const tmp[346113] "const" "temp"(346115 'move' tmp[346113](346111 'deref'(346110 '_wide_get_locale'(346067 call(413751 call . this[347203] c"locArr") localeIdx[346272]))))
          {
            { unknown arr[346072](346071 call(413757 call . this[347203] c"locArr") localeIdx[346272])(346075 'end of statement')
              if(346088 call _cond_test deinitElts[346051])
              {(346086 call _deinitElements(346082 call .(346080 call postfix! arr[346072]) c"myElems"))
              }(346103 call(346099 call .(346096 call .(346094 call postfix! arr[346072]) c"myElems") c"dsiElementDeinitializationComplete"))(346107 call chpl__delete arr[346072])
            }(346248 call _downEndCount _coforallCount[346246] nil[44])(346118 'coforall on block' 0 tmp[346113])
          } label _continueLabel[346258] _indexOfInterest[346253] _iterator[346254]
        } label _breakLabel[346259]
        Defer
        {
          {(346290 call _endCountFree _coforallCount[346246])
          }
        }(346295 call _waitEndCount _coforallCount[346246] 0)
      }
    }
  } function SparseBlockArr[347185](?).these[346329](arg _mt[347209]:_MT[238], arg this[347207]:SparseBlockArr[347185](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346412] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346413] "expr temp" "temp"(346422 'move' _iterator[346413](346420 call _getIterator(346336 call .(346333 call .(366648 call . this[347207] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(346439 call _freeIterator _iterator[346413])
        }
      }
      { scopeless type(346428 'move' _indexOfInterest[346412](346425 call iteratorIndex _iterator[346413]))
      }
      ForLoop[346414]
      { unknown locI[346432] "index var" "insert auto destroy"(346434 'move' locI[346432] _indexOfInterest[346412])
        { unknown locDom[346348](346346 call postfix!(346345 call(346340 call .(366653 call . this[347207] c"dom") c"locDoms") locI[346432]))(346351 'end of statement') unknown locArrI[346359](346357 call postfix!(346356 call(413784 call . this[347207] c"locArr") locI[346432]))(346362 'end of statement')
          { unknown _indexOfInterest[346378] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346379] "expr temp" "temp"(346388 'move' _iterator[346379](346386 call _getIterator(346365 call . locDom[346348] c"mySparseBlock")))
            Defer
            {
              {(346405 call _freeIterator _iterator[346379])
              }
            }
            { scopeless type(346394 'move' _indexOfInterest[346378](346391 call iteratorIndex _iterator[346379]))
            }
            ForLoop[346380]
            { unknown x[346398] "index var" "insert auto destroy"(346400 'move' x[346398] _indexOfInterest[346378])
              {(346375 yield(346374 call(346369 call . locArrI[346359] c"myElems") x[346398]))
              } label _continueLabel[346383] _indexOfInterest[346378] _iterator[346379]
            } label _breakLabel[346384]
          }
        } label _continueLabel[346417] _indexOfInterest[346412] _iterator[346413]
      } label _breakLabel[346418]
    }
  } function SparseBlockArr[347185](?).these[346455](arg _mt[347213]:_MT[238], arg this[347211]:SparseBlockArr[347185](?), param arg tag[346452] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346475] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346476] "expr temp" "temp"(346485 'move' _iterator[346476](346483 call _getIterator(346471 call(346466 call .(366661 call . this[347211] c"dom") c"these") tag[346452])))
      Defer
      {
        {(346502 call _freeIterator _iterator[346476])
        }
      }
      { scopeless type(346491 'move' _indexOfInterest[346475](346488 call iteratorIndex _iterator[346476]))
      }
      ForLoop[346477]
      { unknown followThis[346495] "index var" "insert auto destroy"(346497 'move' followThis[346495] _indexOfInterest[346475])(346473 yield followThis[346495]) label _continueLabel[346480] _indexOfInterest[346475] _iterator[346476]
      } label _breakLabel[346481]
    }
  }
  {(346462 call == tag[346452] leader[447])
  } function SparseBlockArr[347185](?).these[346519](arg _mt[347217]:_MT[238], arg this[347215]:SparseBlockArr[347185](?), param arg tag[346516] : iterKind[453], arg followThis[346521]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[346536] "temp" followThis[346521](346543 call _check_tuple_var_decl tmp[346536] 2) unknown locFollowThis[346530](346537 call tmp[346536] 0) unknown localeIndex[346532](346540 call tmp[346536] 1)(346548 'end of statement')
    { unknown _indexOfInterest[346577] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346578] "expr temp" "temp"(346587 'move' _iterator[346578](346585 call _getIterator(346561 call(346555 call .(346554 call locFollowThis[346530] 0) c"these") tag[346516] locFollowThis[346530])))
      Defer
      {
        {(346604 call _freeIterator _iterator[346578])
        }
      }
      { scopeless type(346593 'move' _indexOfInterest[346577](346590 call iteratorIndex _iterator[346578]))
      }
      ForLoop[346579]
      { unknown i[346597] "index var" "insert auto destroy"(346599 'move' i[346597] _indexOfInterest[346577])
        {(346574 yield(346573 call(346568 call .(346566 call postfix!(346565 call(413801 call . this[347215] c"locArr") localeIndex[346532])) c"dsiAccess") i[346597]))
        } label _continueLabel[346582] _indexOfInterest[346577] _iterator[346578]
      } label _breakLabel[346583]
    }
  }
  {(346528 call == tag[346516] follower[449])
  } function SparseBlockArr[347185](?).these[346620](arg _mt[347221]:_MT[238], arg this[347219]:SparseBlockArr[347185](?), param arg tag[346617] : iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[346681] "expr temp" "maybe ref" "no copy" "temp"(346684 'move' tmpIter[346681](413816 call . this[347219] c"locArr")) unknown isRngDomArr[346840] "maybe param" "temp"(346855 'move' isRngDomArr[346840](346853 call ||(346842 call isBoundedRange tmpIter[346681])(346851 call ||(346845 call isDomain tmpIter[346681])(346848 call isArray tmpIter[346681]))))
      if isRngDomArr[346840]
      { const _coforallCount[346712] "const" "end count" "temp"(346777 'move' _coforallCount[346712](346774 call _endCountAlloc 0)) unknown numTasks[346713] "temp"(346761 'move' numTasks[346713](346757 call . tmpIter[346681] c"size"))(346752 call _upEndCount _coforallCount[346712] 0 numTasks[346713]) unknown _indexOfInterest[346719] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346720] "expr temp" "temp"(346729 'move' _iterator[346720](346727 call _getIterator tmpIter[346681]))
        Defer
        {
          {(346745 call _freeIterator _iterator[346720])
          }
        }
        { scopeless type(346734 'move' _indexOfInterest[346719](346731 call iteratorIndex _iterator[346720]))
        }
        ForLoop[346721]
        { unknown locA[346738] "coforall index var" "index var" "insert auto destroy"(346740 'move' locA[346738] _indexOfInterest[346719]) const tmp[346687] "const" "temp"(346689 'move' tmp[346687](346691 'deref'(346692 '_wide_get_locale' locA[346738])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346703] "index var" "insert auto destroy"
                iterated expressions:
                  (346706 call .(346708 call postfix! locA[346738]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346700 yield i[346703])
                }
              }
            }(346714 call _downEndCount _coforallCount[346712] nil[44])(346695 'coforall on block' 0 tmp[346687])
          } label _continueLabel[346724] _indexOfInterest[346719] _iterator[346720]
        } label _breakLabel[346725]
        Defer
        {
          {(346764 call _endCountFree _coforallCount[346712])
          }
        }(346769 call _waitEndCount _coforallCount[346712] 0 numTasks[346713])
      }
      { const _coforallCount[346781] "const" "end count" "temp"(346837 'move' _coforallCount[346781](346834 call _endCountAlloc 0)) unknown _indexOfInterest[346788] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346789] "expr temp" "temp"(346798 'move' _iterator[346789](346796 call _getIterator tmpIter[346681]))
        Defer
        {
          {(346814 call _freeIterator _iterator[346789])
          }
        }
        { scopeless type(346803 'move' _indexOfInterest[346788](346800 call iteratorIndex _iterator[346789]))
        }
        ForLoop[346790]
        { unknown locA[346807] "coforall index var" "index var" "insert auto destroy"(346809 'move' locA[346807] _indexOfInterest[346788])(346821 call _upEndCount _coforallCount[346781] 0) const tmp[346673] "const" "temp"(346675 'move' tmp[346673](346671 'deref'(346670 '_wide_get_locale' locA[346807])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346666] "index var" "insert auto destroy"
                iterated expressions:
                  (346658 call .(346656 call postfix! locA[346807]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346662 yield i[346666])
                }
              }
            }(346783 call _downEndCount _coforallCount[346781] nil[44])(346678 'coforall on block' 0 tmp[346673])
          } label _continueLabel[346793] _indexOfInterest[346788] _iterator[346789]
        } label _breakLabel[346794]
        Defer
        {
          {(346825 call _endCountFree _coforallCount[346781])
          }
        }(346830 call _waitEndCount _coforallCount[346781] 0)
      }
    }
  }
  {(346649 call &&(346627 call == tag[346617] standalone[451])(346648 'method call resolves'(346643 call .(346640 call .(346638 call postfix!(346637 call(413810 call . this[347219] c"locArr")(346633 call .(366668 call . this[347219] c"locArrDom") c"low"))) c"myElems") c"_value") "these" tag[346617]))
  } function SparseBlockArr[347185](?).dsiAccess[346872](arg _mt[347225]:_MT[238], arg this[347223]:SparseBlockArr[347185](?), arg i[346869] :(346867 call *(413827 call . this[347223] c"rank")(413832 call . this[347223] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(346907 call _cond_test(346893 call &&(346876 call !=(413837 call . this[347223] c"myLocArr") nil[44])(346892 call(346887 call .(346884 call .(346881 call .(346879 call postfix!(413842 call . this[347223] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346869])))
        {(346904 return(346903 call(346898 call .(346896 call postfix!(413848 call . this[347223] c"myLocArr")) c"dsiAccess") i[346869]))
        }
      }(346914 'local block')
    }(346937 return(346936 call(346931 call .(346929 call postfix!(346928 call(413854 call . this[347223] c"locArr")(346926 call(346921 call .(346918 call .(366673 call . this[347223] c"dom") c"dist") c"targetLocsIdx") i[346869]))) c"dsiAccess") i[346869]))
  } function SparseBlockArr[347185](?).dsiAccess[346950](arg _mt[347229]:_MT[238], arg this[347227]:SparseBlockArr[347185](?), arg i[346947] :(346945 call *(413861 call . this[347227] c"rank")(413866 call . this[347227] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    {
      {
        if(346989 call _cond_test(346975 call &&(346958 call !=(413876 call . this[347227] c"myLocArr") nil[44])(346974 call(346969 call .(346966 call .(346963 call .(346961 call postfix!(413881 call . this[347227] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346947])))
        {(346986 return(346985 call(346980 call .(346978 call postfix!(413887 call . this[347227] c"myLocArr")) c"dsiAccess") i[346947]))
        }
      }(346996 'local block')
    }(347019 return(347018 call(347013 call .(347011 call postfix!(347010 call(413893 call . this[347227] c"locArr")(347008 call(347003 call .(347000 call .(366678 call . this[347227] c"dom") c"dist") c"targetLocsIdx") i[346947]))) c"dsiAccess") i[346947]))
  }
  {(346955 call shouldReturnRvalueByValue(413871 call . this[347227] c"eltType"))
  } function SparseBlockArr[347185](?).dsiAccess[347033](arg _mt[347233]:_MT[238], arg this[347231]:SparseBlockArr[347185](?), arg i[347030] :(347028 call *(413900 call . this[347231] c"rank")(413905 call . this[347231] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347072 call _cond_test(347058 call &&(347041 call !=(413915 call . this[347231] c"myLocArr") nil[44])(347057 call(347052 call .(347049 call .(347046 call .(347044 call postfix!(413920 call . this[347231] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[347030])))
        {(347069 return(347068 call(347063 call .(347061 call postfix!(413926 call . this[347231] c"myLocArr")) c"dsiAccess") i[347030]))
        }
      }(347079 'local block')
    }(347102 return(347101 call(347096 call .(347094 call postfix!(347093 call(413932 call . this[347231] c"locArr")(347091 call(347086 call .(347083 call .(366683 call . this[347231] c"dom") c"dist") c"targetLocsIdx") i[347030]))) c"dsiAccess") i[347030]))
  }
  {(347038 call shouldReturnRvalueByConstRef(413910 call . this[347231] c"eltType"))
  } function SparseBlockArr[347185](?).dsiAccess[347115](arg _mt[347237]:_MT[238], arg this[347235]:SparseBlockArr[347185](?), arg i[347111] ... :(413939 call . this[347235] c"idxType")) ref : _unknown[51] "method" "primary method"
  {(347121 return(347120 call(413948 call . this[347235] c"dsiAccess") i[347111]))
  } function SparseBlockArr[347185](?).dsiAccess[347134](arg _mt[347241]:_MT[238], arg this[347239]:SparseBlockArr[347185](?), arg i[347130] ... :(413954 call . this[347239] c"idxType")) : _unknown[51] "method" "primary method"
  {(347144 return(347143 call(413968 call . this[347239] c"dsiAccess") i[347130]))
  }
  {(347139 call shouldReturnRvalueByValue(413964 call . this[347239] c"eltType"))
  } function SparseBlockArr[347185](?).dsiAccess[347158](arg _mt[347245]:_MT[238], arg this[347243]:SparseBlockArr[347185](?), arg i[347154] ... :(413974 call . this[347243] c"idxType")) const ref : _unknown[51] "method" "primary method"
  {(347168 return(347167 call(413988 call . this[347243] c"dsiAccess") i[347154]))
  }
  {(347163 call shouldReturnRvalueByConstRef(413984 call . this[347243] c"eltType"))
  } function SparseBlockArr[347185](?).dsiGetBaseDom[347176](arg _mt[347249]:_MT[238], arg this[347247]:SparseBlockArr[347185](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(347179 return(413994 call . this[347247] c"dom"))
  } type SparseBlockArr[347185](?) val super[355804]:BaseSparseArr[149857](?) "super class" unknown stridable[345154] "param" bool[10] unknown sparseLayoutType[345160] "type variable" unmanaged DefaultDist[415444] unknown locArrDom[345169](345167 call chpl__buildDomainRuntimeType defaultDist[94050] rank[149828] idxType[149832]) unknown locArr[345189](345187 call chpl__buildArrayRuntimeType(345185 call chpl__ensureDomainExpr locArrDom[345169])(345182 call unmanaged LocSparseBlockArr?[415570](?) eltType[149671] rank[149828] idxType[149832] stridable[345154] sparseLayoutType[345160])) unknown myLocArr[345203](345200 call unmanaged LocSparseBlockArr?[415570](?) eltType[149671] rank[149828] idxType[149832] stridable[345154] sparseLayoutType[345160]) type SparseBlockArr[413423](?) function LocSparseBlockArr[347494](?).init[347302](arg _mt[347498]:_MT[238], arg this[347496]:LocSparseBlockArr[347494](?), arg eltType[347300]:_any[178](?), param arg rank[347305] : int(64)[13], arg idxType[347308]:_any[178](?), param arg stridable[347311] : bool[10], arg sparseLayoutType[347314]:_any[178](?), const arg locDom[347324] :(347322 call unmanaged LocSparseBlockDom[415573](?) rank[347305] idxType[347308] stridable[347311] sparseLayoutType[347314]), param arg initElts[347328] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(347336 call =(347332 call . this[347496] c"eltType") eltType[347300])(347345 call =(347341 call . this[347496] c"rank") rank[347305])(347353 call =(347349 call . this[347496] c"idxType") idxType[347308])(347361 call =(347357 call . this[347496] c"stridable") stridable[347311])(347369 call =(347365 call . this[347496] c"sparseLayoutType") sparseLayoutType[347314])(347377 call =(347373 call . this[347496] c"locDom") locDom[347324])(347396 call =(347381 call . this[347496] c"myElems")(347395 call(347388 call .(347385 call . locDom[347324] c"mySparseBlock") c"buildArray") eltType[347300](initElts = initElts[347328])))
  } function LocSparseBlockArr[347494](?).deinit[347403](arg _mt[347502]:_MT[238], arg this[347500]:LocSparseBlockArr[347494](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  } function LocSparseBlockArr[347494](?).dsiAccess[347412](arg _mt[347506]:_MT[238], arg this[347504]:LocSparseBlockArr[347494](?), arg i[347410]:_any[178](?)) ref : _unknown[51] "method" "primary method"
  {(347418 return(347417 call(414018 call . this[347504] c"myElems") i[347410]))
  } function LocSparseBlockArr[347494](?).dsiAccess[347427](arg _mt[347510]:_MT[238], arg this[347508]:LocSparseBlockArr[347494](?), arg i[347425]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(347437 return(347436 call(414029 call . this[347508] c"myElems") i[347425]))
  }
  {(347432 call shouldReturnRvalueByValue(414024 call . this[347508] c"eltType"))
  } function LocSparseBlockArr[347494](?).dsiAccess[347447](arg _mt[347514]:_MT[238], arg this[347512]:LocSparseBlockArr[347494](?), arg i[347445]:_any[178](?)) const ref : _unknown[51] "method" "primary method"
  {(347457 return(347456 call(414040 call . this[347512] c"myElems") i[347445]))
  }
  {(347452 call shouldReturnRvalueByConstRef(414035 call . this[347512] c"eltType"))
  } function LocSparseBlockArr[347494](?).writeThis[347467](arg _mt[347518]:_MT[238], arg this[347516]:LocSparseBlockArr[347494](?), arg f[347465]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(347488 call halt "LocSparseBlockArr.writeThis() is not implemented / should not be needed")
  } type LocSparseBlockArr[347494](?) val super[355806]:object[22] "super class" unknown eltType[347253] "type variable" unknown rank[347257] "param" int(64)[13] unknown idxType[347261] "type variable" unknown stridable[347265] "param" bool[10] unknown sparseLayoutType[347269] "type variable" const locDom[347280] "const"(347278 call unmanaged LocSparseBlockDom[415573](?) rank[347257] idxType[347261] stridable[347265] sparseLayoutType[347269]) unknown myElems[347294] "local field" "unsafe"(347292 call chpl__buildArrayRuntimeType(347290 call chpl__ensureDomainExpr(347285 call . locDom[347280] c"mySparseBlock")) eltType[347253]) type unmanaged LocSparseBlockArr?[415570](?) type LocSparseBlockArr?[415567](?) type LocSparseBlockArr[413584](?) function SparseBlockArr[347185](?).dsiSerialWrite[347526](arg _mt[347531]:_MT[238], arg this[347528]:SparseBlockArr[347185](?) : SparseBlockArr[347185](?), arg f[347524]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(347635 call _cond_test(347535 call ==(414046 call . this[347528] c"rank") 1))
    {(347539 call <~> f[347524] "[")
      { unknown _indexOfInterest[347575] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347576] "expr temp" "temp"(347585 'move' _iterator[347576](347583 call _getIterator(414052 call . this[347528] c"locArr")))
        Defer
        {
          {(347601 call _freeIterator _iterator[347576])
          }
        }
        { scopeless type(347590 'move' _indexOfInterest[347575](347587 call iteratorIndex _iterator[347576]))
        }
        ForLoop[347577]
        { unknown locarr[347594] "index var" "insert auto destroy"(347596 'move' locarr[347594] _indexOfInterest[347575])
          {
            if(347570 call _cond_test(347551 call .(347548 call .(347546 call postfix! locarr[347594]) c"locDom") c"dsiNumIndices"))
            {(347556 call <~> f[347524] " ")(347568 call(347563 call .(347561 call postfix! locarr[347594]) c"dsiSerialWrite") f[347524])
            }
          } label _continueLabel[347580] _indexOfInterest[347575] _iterator[347576]
        } label _breakLabel[347581]
      }(347610 call <~> f[347524] "]")
    }
    {(347632 call compilerError "Can't write out multidimensional sparse distributed arrays yet")
    }
  } function LocSparseBlockArr[347494](?).dsiSerialWrite[347647](arg _mt[347652]:_MT[238], arg this[347649]:LocSparseBlockArr[347494](?) : LocSparseBlockArr[347494](?), arg f[347645]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(347663 call(347658 call .(347655 call .(366697 call . this[347649] c"myElems") c"_value") c"dsiSerialWrite") f[347645])
  } function SparseBlockDom[344858](?).dsiSupportsPrivatization[347671](arg _mt[347676]:_MT[238], arg this[347673]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?)) param : _unknown[51] "method" "method overrides"
  {(347679 return 1)
  } function SparseBlockDom[344858](?).dsiGetPrivatizeData[347687](arg _mt[347692]:_MT[238], arg this[347689]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?)) : _unknown[51] "method"
  {(347707 return(347705 call _build_tuple(347695 call .(366702 call . this[347689] c"dist") c"pid")(347703 call(347699 call .(366707 call . this[347689] c"whole") c"dims"))))
  } function SparseBlockDom[344858](?).dsiPrivatize[347717](arg _mt[347722]:_MT[238], arg this[347719]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?), arg privatizeData[347715]:_any[178](?)) : _unknown[51] "method"
  { unknown privdist[347733](347732 call chpl_getPrivatizedCopy(347726 'typeof'(414063 call . this[347719] c"dist"))(347731 call privatizeData[347715] 0))(347736 'end of statement') unknown c[347761](347740 'new'(_chpl_manager = unmanaged[220](?))(347760 call SparseBlockDom[409237](?)(rank =(414070 call . this[347719] c"rank"))(idxType =(414075 call . this[347719] c"idxType"))(sparseLayoutType =(414080 call . this[347719] c"sparseLayoutType"))(stridable =(347750 call .(366712 call . this[347719] c"parentDom") c"stridable"))(dist = privdist[347733])(whole =(414086 call . this[347719] c"whole"))(parentDom =(414091 call . this[347719] c"parentDom"))))(347764 'end of statement')
    { unknown _indexOfInterest[347826] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347827] "expr temp" "temp"(347836 'move' _iterator[347827](347834 call _getIterator(347770 call .(347767 call . c[347761] c"dist") c"targetLocDom")))
      Defer
      {
        {(347853 call _freeIterator _iterator[347827])
        }
      }
      { scopeless type(347842 'move' _indexOfInterest[347826](347839 call iteratorIndex _iterator[347827]))
      }
      ForLoop[347828]
      { unknown i[347846] "index var" "insert auto destroy"(347848 'move' i[347846] _indexOfInterest[347826])
        {(347784 call =(347779 call(347774 call . c[347761] c"locDoms") i[347846])(347783 call(414097 call . this[347719] c"locDoms") i[347846]))
          if(347821 call _cond_test(347803 call ==(347798 '_wide_get_node'(347794 call(347789 call . c[347761] c"locDoms") i[347846]))(347800 call .(366718 call here[90435]) c"id")))
          {(347818 call =(347808 call . c[347761] c"myLocDom")(347817 call(347812 call . c[347761] c"locDoms") i[347846]))
          }
        } label _continueLabel[347831] _indexOfInterest[347826] _iterator[347827]
      } label _breakLabel[347832]
    }(347872 call =(347861 call . c[347761] c"whole")(347870 call chpl__buildDomainExpr(347868 'expand_tuple'(347867 call privatizeData[347715] 1))))(347876 return c[347761])
  } function SparseBlockDom[344858](?).dsiGetReprivatizeData[347883](arg _mt[347888]:_MT[238], arg this[347885]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?)) : _unknown[51] "method"
  {(347896 return(347895 call(347891 call .(366725 call . this[347885] c"whole") c"dims")))
  } function SparseBlockDom[344858](?).dsiReprivatize[347906](arg _mt[347913]:_MT[238], arg this[347910]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?), arg other[347904]:_any[178](?), arg reprivatizeData[347908]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown _indexOfInterest[347934] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347935] "expr temp" "temp"(347944 'move' _iterator[347935](347942 call _getIterator(347917 call .(366730 call . this[347910] c"dist") c"targetLocDom")))
      Defer
      {
        {(347961 call _freeIterator _iterator[347935])
        }
      }
      { scopeless type(347950 'move' _indexOfInterest[347934](347947 call iteratorIndex _iterator[347935]))
      }
      ForLoop[347936]
      { unknown i[347954] "index var" "insert auto destroy"(347956 'move' i[347954] _indexOfInterest[347934])(347931 call =(347923 call(414107 call . this[347910] c"locDoms") i[347954])(347930 call(347925 call . other[347904] c"locDoms") i[347954])) label _continueLabel[347939] _indexOfInterest[347934] _iterator[347935]
      } label _breakLabel[347940]
    }(347975 call =(414114 call . this[347910] c"whole")(347973 call chpl__buildDomainExpr(347971 'expand_tuple' reprivatizeData[347908])))
  } function SparseBlockArr[347185](?).dsiSupportsPrivatization[347983](arg _mt[347988]:_MT[238], arg this[347985]:SparseBlockArr[347185](?) : SparseBlockArr[347185](?)) param : _unknown[51] "method" "method overrides"
  {(347991 return 1)
  } function SparseBlockArr[347185](?).dsiGetPrivatizeData[347999](arg _mt[348004]:_MT[238], arg this[348001]:SparseBlockArr[347185](?) : SparseBlockArr[347185](?)) : _unknown[51] "method"
  {(348010 return(348007 call .(366736 call . this[348001] c"dom") c"pid"))
  } function SparseBlockArr[347185](?).dsiPrivatize[348020](arg _mt[348025]:_MT[238], arg this[348022]:SparseBlockArr[347185](?) : SparseBlockArr[347185](?), arg privatizeData[348018]:_any[178](?)) : _unknown[51] "method"
  { unknown privdom[348033](348032 call chpl_getPrivatizedCopy(348029 'typeof'(414120 call . this[348022] c"dom")) privatizeData[348018])(348036 'end of statement') unknown c[348056](348040 'new'(_chpl_manager = unmanaged[220](?))(348055 call SparseBlockArr[413423](?)(sparseLayoutType =(414127 call . this[348022] c"sparseLayoutType"))(eltType =(414132 call . this[348022] c"eltType"))(rank =(414137 call . this[348022] c"rank"))(idxType =(414142 call . this[348022] c"idxType"))(stridable =(414147 call . this[348022] c"stridable"))(dom = privdom[348033])))(348059 'end of statement')
    { unknown _indexOfInterest[348124] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348125] "expr temp" "temp"(348134 'move' _iterator[348125](348132 call _getIterator(348068 call .(348065 call .(348062 call . c[348056] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(348151 call _freeIterator _iterator[348125])
        }
      }
      { scopeless type(348140 'move' _indexOfInterest[348124](348137 call iteratorIndex _iterator[348125]))
      }
      ForLoop[348126]
      { unknown localeIdx[348144] "index var" "insert auto destroy"(348146 'move' localeIdx[348144] _indexOfInterest[348124])
        {(348082 call =(348077 call(348072 call . c[348056] c"locArr") localeIdx[348144])(348081 call(414154 call . this[348022] c"locArr") localeIdx[348144]))
          if(348119 call _cond_test(348103 call ==(348098 '_wide_get_node'(348093 call postfix!(348092 call(348087 call . c[348056] c"locArr") localeIdx[348144])))(348100 call .(366742 call here[90435]) c"id")))
          {(348116 call =(348106 call . c[348056] c"myLocArr")(348115 call(348110 call . c[348056] c"locArr") localeIdx[348144]))
          }
        } label _continueLabel[348129] _indexOfInterest[348124] _iterator[348125]
      } label _breakLabel[348130]
    }(348159 return c[348056])
  } function SparseBlockDom[344858](?).numRemoteElems[348168](arg _mt[348175]:_MT[238], arg this[348172]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?), arg rlo[348166]:_any[178](?), arg rid[348170]:_any[178](?)) : _unknown[51] "method"
  { unknown blo[348177](348181 call .(366748 call . this[348172] c"dist") c"idxType") unknown bhi[348184](348188 'typeof' blo[348177])(348189 'end of statement')
    if(348317 call _cond_test(348211 call == rid[348170](348209 call -(348205 call .(348204 call(348196 call .(348193 call .(366753 call . this[348172] c"dist") c"targetLocDom") c"dim")(348201 call -(414165 call . this[348172] c"rank") 1)) c"size") 1)))
    {(348227 call = bhi[348184](348224 call .(348223 call(348215 call .(366758 call . this[348172] c"whole") c"dim")(348220 call -(414171 call . this[348172] c"rank") 1)) c"high"))
    }
    {(348314 call = bhi[348184](348312 call -(348309 call +(348244 call .(348243 call(348235 call .(348232 call .(366763 call . this[348172] c"dist") c"boundingBox") c"dim")(348240 call -(414177 call . this[348172] c"rank") 1)) c"low")(348308 call intCeilXDivByY(348289 call *(348283 call +(348280 call -(348261 call .(348260 call(348252 call .(348249 call .(366768 call . this[348172] c"dist") c"boundingBox") c"dim")(348257 call -(414182 call . this[348172] c"rank") 1)) c"high")(348277 call .(348276 call(348268 call .(348265 call .(366773 call . this[348172] c"dist") c"boundingBox") c"dim")(348273 call -(414187 call . this[348172] c"rank") 1)) c"low")) 1)(348287 call + rid[348170] 1))(348305 call .(348304 call(348296 call .(348293 call .(366778 call . this[348172] c"dist") c"targetLocDom") c"dim")(348301 call -(414193 call . this[348172] c"rank") 1)) c"size"))) 1))
    }(348330 return(348328 call +(348325 call - bhi[348184] rlo[348166]) 1))
  } function SparseBlockDom[344858](?).dsiHasSingleLocalSubdomain[348337](arg _mt[348342]:_MT[238], arg this[348339]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?)) param : _unknown[51] "method"
  {(348345 return 1)
  } function SparseBlockArr[347185](?).dsiHasSingleLocalSubdomain[348353](arg _mt[348358]:_MT[238], arg this[348355]:SparseBlockArr[347185](?) : SparseBlockArr[347185](?)) param : _unknown[51] "method"
  {(348361 return 1)
  } function SparseBlockDom[344858](?).dsiLocalSubdomain[348373](arg _mt[348378]:_MT[238], arg this[348375]:SparseBlockDom[344858](?) : SparseBlockDom[344858](?), arg loc[348370] : locale[28]) : _unknown[51] "method"
  {
    if(348422 call _cond_test(348382 call != loc[348370](414199 call here[90435])))
    {(348420 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    } const tmp[348443] "const" "temp"(348442 call(348437 call .(348434 call .(366783 call . this[348375] c"dist") c"targetLocales") c"find")(414201 call here[90435]))(348450 call _check_tuple_var_decl tmp[348443] 2) const found[348428] "const"(348444 call tmp[348443] 0) const targetIdx[348430] "const"(348447 call tmp[348443] 1)(348455 'end of statement')(348465 return(348462 call .(348460 call postfix!(348459 call(414205 call . this[348375] c"locDoms") targetIdx[348430])) c"mySparseBlock"))
  } function SparseBlockArr[347185](?).dsiLocalSubdomain[348476](arg _mt[348481]:_MT[238], arg this[348478]:SparseBlockArr[347185](?) : SparseBlockArr[347185](?), arg loc[348473] : locale[28]) : _unknown[51] "method"
  {
    if(348493 call _cond_test(348485 call != loc[348473](414210 call here[90435])))
    {(348491 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    }(348508 return(348505 call .(348502 call .(348500 call postfix!(414214 call . this[348478] c"myLocArr")) c"locDom") c"mySparseBlock"))
  }(355586 'used modules list'(353080 'use' ChapelStandard[20264])(341887 'use' DSIUtil[230888])(341890 'use' ChapelUtil[166918])(341893 'use' BlockDist[331306])(341896 'use' RangeChunk[266458])(341899 'use' HaltWrappers[209998])(341902 'use' LayoutCS[341883]))
}