AST dump for SparseBlockDist after pass scopeResolve.
Module use list: ChapelStandard DSIUtil ChapelUtil BlockDist RangeChunk HaltWrappers LayoutCS Sort Search 

{ unknown debugSparseBlockDist[342012] "config" "param" 0(342015 'end of statement') unknown debugSparseBlockDistBulkTransfer[342017] "config" "param" 0(342020 'end of statement') function TargetLocaleComparator[342137](?).key[342053](arg _mt[342141]:_MT[238], arg this[342139]:TargetLocaleComparator[342137](?), arg a[342050] :(342048 call chpl__buildIndexType(413161 call . this[342139] c"rank")(413166 call . this[342139] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    if(342129 call _cond_test(342057 call ==(413171 call . this[342139] c"rank") 2))
    {
      if(342108 call _cond_test(342066 call ==(413176 call . this[342139] c"sparseLayoutType")(342064 call unmanaged CS[415674](?)(compressRows = 0))))
      {(342086 return(342084 call _build_tuple(342074 call(342069 call .(366553 call . this[342139] c"dist") c"targetLocsIdx") a[342050])(342078 call a[342050] 1)(342083 call a[342050] 0)))
      }
      {(342106 return(342104 call _build_tuple(342094 call(342089 call .(366558 call . this[342139] c"dist") c"targetLocsIdx") a[342050])(342098 call a[342050] 0)(342103 call a[342050] 1)))
      }
    }
    {(342126 return(342124 call _build_tuple(342121 call(342116 call .(366563 call . this[342139] c"dist") c"targetLocsIdx") a[342050]) a[342050]))
    }
  } type TargetLocaleComparator[342137](?) unknown rank[342022] "param" unknown idxType[342026] "type variable" unknown sparseLayoutType[342029] "type variable" unknown dist[342039](342037 call unmanaged Block[415647](?) rank[342022] idxType[342026] sparseLayoutType[342029]) function SparseBlockDom[344966](?).setup[342218](arg _mt[344970]:_MT[238], arg this[344968]:SparseBlockDom[344966](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[342225](342224 '_wide_get_node' this[344968])(342228 'end of statement')
    if(342546 call _cond_test(342241 call ==(342239 call(413212 call . this[344968] c"locDoms")(342235 call .(342232 call .(366569 call . this[344968] c"dist") c"targetLocDom") c"low")) nil[44]))
    {
      { unknown tmpIter[342313] "expr temp" "maybe ref" "no copy" "temp"(342316 'move' tmpIter[342313](342245 call .(366574 call . this[344968] c"dist") c"targetLocDom")) unknown isRngDomArr[342504] "maybe param" "temp"(342519 'move' isRngDomArr[342504](342517 call ||(342506 call isBoundedRange tmpIter[342313])(342515 call ||(342509 call isDomain tmpIter[342313])(342512 call isArray tmpIter[342313]))))
        if isRngDomArr[342504]
        { const _coforallCount[342376] "const" "end count" "temp"(342441 'move' _coforallCount[342376](342438 call _endCountAlloc 0)) unknown numTasks[342377] "temp"(342425 'move' numTasks[342377](342421 call . tmpIter[342313] c"size"))(342416 call _upEndCount _coforallCount[342376] 0 numTasks[342377]) unknown _indexOfInterest[342383] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342384] "expr temp" "temp"(342393 'move' _iterator[342384](342391 call _getIterator tmpIter[342313]))
          Defer
          {
            {(342409 call _freeIterator _iterator[342384])
            }
          }
          { scopeless type(342398 'move' _indexOfInterest[342383](342395 call iteratorIndex _iterator[342384]))
          }
          ForLoop[342385]
          { unknown localeIdx[342402] "coforall index var" "index var" "insert auto destroy"(342404 'move' localeIdx[342402] _indexOfInterest[342383]) const tmp[342319] "const" "temp"(342321 'move' tmp[342319](342323 'deref'(342324 '_wide_get_locale'(342329 call(342326 call .(366591 call . this[344968] c"dist") c"targetLocales") localeIdx[342402]))))
            {
              {(342337 call =(342339 call(413264 call . this[344968] c"locDoms") localeIdx[342402])(342341 'new'(_chpl_manager = unmanaged[220](?))(342345 call LocSparseBlockDom[413197](?)(413271 call . this[344968] c"rank")(413276 call . this[344968] c"idxType")(413281 call . this[344968] c"stridable")(413286 call . this[344968] c"sparseLayoutType")(342354 call(342351 call .(366596 call . this[344968] c"dist") c"getChunk")(413291 call . this[344968] c"whole") localeIdx[342402]))))
                if(342358 call _cond_test(342360 call == thisid[342225](342363 call .(366599 call here[90438]) c"id")))
                {(342369 call =(413298 call . this[344968] c"myLocDom")(342372 call(413303 call . this[344968] c"locDoms") localeIdx[342402]))
                }
              }(342378 call _downEndCount _coforallCount[342376] nil[44])(342332 'coforall on block' 0 tmp[342319])
            } label _continueLabel[342388] _indexOfInterest[342383] _iterator[342384]
          } label _breakLabel[342389]
          Defer
          {
            {(342428 call _endCountFree _coforallCount[342376])
            }
          }(342433 call _waitEndCount _coforallCount[342376] 0 numTasks[342377])
        }
        { const _coforallCount[342445] "const" "end count" "temp"(342501 'move' _coforallCount[342445](342498 call _endCountAlloc 0)) unknown _indexOfInterest[342452] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342453] "expr temp" "temp"(342462 'move' _iterator[342453](342460 call _getIterator tmpIter[342313]))
          Defer
          {
            {(342478 call _freeIterator _iterator[342453])
            }
          }
          { scopeless type(342467 'move' _indexOfInterest[342452](342464 call iteratorIndex _iterator[342453]))
          }
          ForLoop[342454]
          { unknown localeIdx[342471] "coforall index var" "index var" "insert auto destroy"(342473 'move' localeIdx[342471] _indexOfInterest[342452])(342485 call _upEndCount _coforallCount[342445] 0) const tmp[342304] "const" "temp"(342306 'move' tmp[342304](342302 'deref'(342301 '_wide_get_locale'(342254 call(342249 call .(366579 call . this[344968] c"dist") c"targetLocales") localeIdx[342471]))))
            {
              {(342277 call =(342258 call(413218 call . this[344968] c"locDoms") localeIdx[342471])(342261 'new'(_chpl_manager = unmanaged[220](?))(342276 call LocSparseBlockDom[413197](?)(413225 call . this[344968] c"rank")(413230 call . this[344968] c"idxType")(413235 call . this[344968] c"stridable")(413240 call . this[344968] c"sparseLayoutType")(342275 call(342269 call .(366584 call . this[344968] c"dist") c"getChunk")(413245 call . this[344968] c"whole") localeIdx[342471]))))
                if(342296 call _cond_test(342286 call == thisid[342225](342283 call .(366587 call here[90438]) c"id")))
                {(342293 call =(413252 call . this[344968] c"myLocDom")(342292 call(413257 call . this[344968] c"locDoms") localeIdx[342471]))
                }
              }(342447 call _downEndCount _coforallCount[342445] nil[44])(342309 'coforall on block' 0 tmp[342304])
            } label _continueLabel[342457] _indexOfInterest[342452] _iterator[342453]
          } label _breakLabel[342458]
          Defer
          {
            {(342489 call _endCountFree _coforallCount[342445])
            }
          }(342494 call _waitEndCount _coforallCount[342445] 0)
        }
      }
    }
    {(342543 call halt "Don't know how to reallocate yet")
    }
  } function SparseBlockDom[344966](?).dsiDestroyDom[342554](arg _mt[344974]:_MT[238], arg this[344972]:SparseBlockDom[344966](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[342585] "expr temp" "maybe ref" "no copy" "temp"(342588 'move' tmpIter[342585](342558 call .(366603 call . this[344972] c"dist") c"targetLocDom")) unknown isRngDomArr[342739] "maybe param" "temp"(342754 'move' isRngDomArr[342739](342752 call ||(342741 call isBoundedRange tmpIter[342585])(342750 call ||(342744 call isDomain tmpIter[342585])(342747 call isArray tmpIter[342585]))))
      if isRngDomArr[342739]
      { const _coforallCount[342611] "const" "end count" "temp"(342676 'move' _coforallCount[342611](342673 call _endCountAlloc 0)) unknown numTasks[342612] "temp"(342660 'move' numTasks[342612](342656 call . tmpIter[342585] c"size"))(342651 call _upEndCount _coforallCount[342611] 0 numTasks[342612]) unknown _indexOfInterest[342618] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342619] "expr temp" "temp"(342628 'move' _iterator[342619](342626 call _getIterator tmpIter[342585]))
        Defer
        {
          {(342644 call _freeIterator _iterator[342619])
          }
        }
        { scopeless type(342633 'move' _indexOfInterest[342618](342630 call iteratorIndex _iterator[342619]))
        }
        ForLoop[342620]
        { unknown localeIdx[342637] "coforall index var" "index var" "insert auto destroy"(342639 'move' localeIdx[342637] _indexOfInterest[342618]) const tmp[342591] "const" "temp"(342593 'move' tmp[342591](342595 'deref'(342596 '_wide_get_locale'(342598 call(413321 call . this[344972] c"locDoms") localeIdx[342637]))))
          {(342606 call chpl__delete(342608 call(413327 call . this[344972] c"locDoms") localeIdx[342637]))(342613 call _downEndCount _coforallCount[342611] nil[44])(342601 'coforall on block' 0 tmp[342591])
          } label _continueLabel[342623] _indexOfInterest[342618] _iterator[342619]
        } label _breakLabel[342624]
        Defer
        {
          {(342663 call _endCountFree _coforallCount[342611])
          }
        }(342668 call _waitEndCount _coforallCount[342611] 0 numTasks[342612])
      }
      { const _coforallCount[342680] "const" "end count" "temp"(342736 'move' _coforallCount[342680](342733 call _endCountAlloc 0)) unknown _indexOfInterest[342687] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[342688] "expr temp" "temp"(342697 'move' _iterator[342688](342695 call _getIterator tmpIter[342585]))
        Defer
        {
          {(342713 call _freeIterator _iterator[342688])
          }
        }
        { scopeless type(342702 'move' _indexOfInterest[342687](342699 call iteratorIndex _iterator[342688]))
        }
        ForLoop[342689]
        { unknown localeIdx[342706] "coforall index var" "index var" "insert auto destroy"(342708 'move' localeIdx[342706] _indexOfInterest[342687])(342720 call _upEndCount _coforallCount[342680] 0) const tmp[342576] "const" "temp"(342578 'move' tmp[342576](342574 'deref'(342573 '_wide_get_locale'(342564 call(413309 call . this[344972] c"locDoms") localeIdx[342706]))))
          {(342570 call chpl__delete(342568 call(413315 call . this[344972] c"locDoms") localeIdx[342706]))(342682 call _downEndCount _coforallCount[342680] nil[44])(342581 'coforall on block' 0 tmp[342576])
          } label _continueLabel[342692] _indexOfInterest[342687] _iterator[342688]
        } label _breakLabel[342693]
        Defer
        {
          {(342724 call _endCountFree _coforallCount[342680])
          }
        }(342729 call _waitEndCount _coforallCount[342680] 0)
      }
    }
  } function SparseBlockDom[344966](?).getNNZ[342763](arg _mt[344978]:_MT[238], arg this[344976]:SparseBlockDom[344966](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(342786 return(342784 'reduce' SumReduceScanOp[376483](?)(342780 [  ld[342782]  in (413335 call . this[344976] c"locDoms") ]
    {(342777 call .(342774 call .(342770 call postfix! ld[342782]) c"mySparseBlock") c"size")
    } ) 0))
  } function SparseBlockDom[344966](?).dsiAdd[342800](arg _mt[344982]:_MT[238], arg this[344980]:SparseBlockDom[344966](?), arg ind[342797] :(342795 call *(413341 call . this[344980] c"rank")(413346 call . this[344980] c"idxType"))) : _unknown[51] "method" "primary method"
  { unknown _retval[342803] 0(342806 'end of statement') const tmp[342841] "const" "temp"(342843 'move' tmp[342841](342839 'deref'(342838 '_wide_get_locale'(342814 call(342809 call .(366608 call . this[344980] c"dist") c"dsiIndexToLocale") ind[342797]))))
    {
      {(342834 call = _retval[342803](342833 call(342828 call .(342826 call postfix!(342825 call(413353 call . this[344980] c"locDoms")(342823 call(342818 call .(366613 call . this[344980] c"dist") c"targetLocsIdx") ind[342797]))) c"dsiAdd") ind[342797]))
      }(342846 'on block' 0 tmp[342841])
    }(342850 return _retval[342803])
  } function SparseBlockDom[344966](?).dsiAdd[342860](arg _mt[344986]:_MT[238], arg this[344984]:SparseBlockDom[344966](?), arg ind[342857] :(413361 call . this[344984] c"idxType")) : _unknown[51] "method" "primary method"
  {(342875 return(342874 call(413365 call . this[344984] c"dsiAdd")(342871 call _build_tuple ind[342857])))
  }
  {(342867 call ==(342863 call . this[344984] c"rank") 1)
  } function SparseBlockDom[344966](?).dsiFirst[342883](arg _mt[344990]:_MT[238], arg this[344988]:SparseBlockDom[344966](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342904 return(342902 'reduce' MinReduceScanOp[376604](?)(342898 [  l[342900]  in (413373 call . this[344988] c"locDoms") ]
    {(342895 call .(342892 call .(342890 call postfix! l[342900]) c"mySparseBlock") c"first")
    } ) 0))
  } function SparseBlockDom[344966](?).dsiLast[342911](arg _mt[344994]:_MT[238], arg this[344992]:SparseBlockDom[344966](?)) : _unknown[51] "method" "primary method" "no parens"
  {(342932 return(342930 'reduce' MaxReduceScanOp[376560](?)(342926 [  l[342928]  in (413381 call . this[344992] c"locDoms") ]
    {(342923 call .(342920 call .(342918 call postfix! l[342928]) c"mySparseBlock") c"last")
    } ) 0))
  } function SparseBlockDom[344966](?).bulkAdd_help[342952](arg _mt[344998]:_MT[238], arg this[344996]:SparseBlockDom[344966](?), arg inds[342949] :(342947 call chpl__buildArrayRuntimeType unknown indsDom[342939](342945 call chpl__buildIndexType(413387 call . this[344996] c"rank")(413392 call . this[344996] c"idxType"))), arg dataSorted[342955] = 0, arg isUnique[342959] = 0, arg addOn[342963] = nilLocale[89942]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(343052 call _cond_test(342975 call != addOn[342963] nilLocale[89942]))
    { unknown retval[342978] 0(342981 'end of statement') const tmp[343041] "const" "temp"(343043 'move' tmp[343041](343039 'deref'(343038 '_wide_get_locale' addOn[342963])))
      {
        {
          if(343033 call _cond_test(342989 call ==(342986 call chpl_localeID_to_locale(342985 '_wide_get_locale' inds[342949]))(413400 call here[90438])))
          {(342998 call = retval[342978](342997 call(413406 call . this[344996] c"bulkAddHere_help") inds[342949] dataSorted[342955] isUnique[342959]))
          }
          { unknown _local_inds[343013](343011 call chpl__buildArrayRuntimeType(343009 call chpl__ensureDomainExpr indsDom[342939])(343007 call chpl__buildIndexType(413415 call . this[344996] c"rank")(413420 call . this[344996] c"idxType")))(343016 'end of statement')(343020 call = _local_inds[343013] inds[342949])(343030 call = retval[342978](343029 call(413427 call . this[344996] c"bulkAddHere_help") _local_inds[343013] dataSorted[342955] isUnique[342959]))
          }
        }(343046 'on block' 0 tmp[343041])
      }(343050 return retval[342978])
    } unknown comp[343068](343056 'new'(343067 call TargetLocaleComparator[342137](?)(rank =(413437 call . this[344996] c"rank"))(idxType =(413442 call . this[344996] c"idxType"))(sparseLayoutType =(413447 call . this[344996] c"sparseLayoutType"))(dist =(413452 call . this[344996] c"dist"))))(343071 'end of statement')
    if(343082 call _cond_test(343073 call ! dataSorted[342955]))
    {(343080 call sort inds[342949](comparator = comp[343068]))
    } unknown localeRanges[343097](343095 call chpl__buildArrayRuntimeType(343093 call chpl__ensureDomainExpr(343088 call .(366619 call . this[344996] c"dist") c"targetLocDom")) range[64319](?))(343100 'end of statement') const tmp[343308] "const" "temp"(343310 'move' tmp[343308](343306 'deref'(343305 '_wide_get_locale' inds[342949])))
    {
      {
        { unknown _indexOfInterest[343270] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343271] "expr temp" "temp"(343280 'move' _iterator[343271](343278 call _getIterator(343104 call .(366624 call . this[344996] c"dist") c"targetLocDom")))
          Defer
          {
            {(343297 call _freeIterator _iterator[343271])
            }
          }
          { scopeless type(343286 'move' _indexOfInterest[343270](343283 call iteratorIndex _iterator[343271]))
          }
          ForLoop[343272]
          { unknown l[343290] "index var" "insert auto destroy"(343292 'move' l[343290] _indexOfInterest[343270])
            { const blockval[343119] "const"(343116 call .(343113 call .(343111 call postfix!(343110 call(413462 call . this[344996] c"locDoms") l[343290])) c"mySparseBlock") c"_value")(343122 'end of statement') const _first[343131] "const"(343128 call .(343125 call . blockval[343119] c"parentDom") c"first")(343134 'end of statement') const _last[343142] "const"(343139 call .(343136 call . blockval[343119] c"parentDom") c"last")(343145 'end of statement') unknown tmp[343157] "temp"(343156 call binarySearch inds[342949] _first[343131] comp[343068])(343164 call _check_tuple_var_decl tmp[343157] 2) unknown foundFirst[343146](343158 call tmp[343157] 0) unknown locFirst[343148](343161 call tmp[343157] 1)(343169 'end of statement') unknown tmp[343181] "temp"(343180 call binarySearch inds[342949] _last[343142] comp[343068])(343188 call _check_tuple_var_decl tmp[343181] 2) unknown foundLast[343170](343182 call tmp[343181] 0) unknown locLast[343172](343185 call tmp[343181] 1)(343193 'end of statement')
              if(343202 call _cond_test(343195 call ! foundLast[343170]))
              {(343199 call -= locLast[343172] 1)
              }
              if(343228 call _cond_test(343215 call ==(343211 call .(343208 call .(366631 call . this[344996] c"dist") c"targetLocDom") c"first") l[343290]))
              {(343225 call = locFirst[343148](343222 call .(343219 call . inds[342949] c"_dom") c"first"))
              }
              if(343254 call _cond_test(343241 call ==(343237 call .(343234 call .(366637 call . this[344996] c"dist") c"targetLocDom") c"last") l[343290]))
              {(343251 call = locLast[343172](343248 call .(343245 call . inds[342949] c"_dom") c"last"))
              }(343267 call =(343262 call localeRanges[343097] l[343290])(343265 call chpl_build_bounded_range locFirst[343148] locLast[343172]))
            } label _continueLabel[343275] _indexOfInterest[343270] _iterator[343271]
          } label _breakLabel[343276]
        }
      }(343313 'on block' 0 tmp[343308])
    } unknown _totalAdded[343319](343317 call chpl__atomicType int(64)[13])(343322 'end of statement')
    { unknown tmpIter[343386] "expr temp" "maybe ref" "no copy" "temp"(343389 'move' tmpIter[343386](343325 call .(366643 call . this[344996] c"dist") c"targetLocDom")) unknown isRngDomArr[343569] "maybe param" "temp"(343584 'move' isRngDomArr[343569](343582 call ||(343571 call isBoundedRange tmpIter[343386])(343580 call ||(343574 call isDomain tmpIter[343386])(343577 call isArray tmpIter[343386]))))
      if isRngDomArr[343569]
      { const _coforallCount[343441] "const" "end count" "temp"(343506 'move' _coforallCount[343441](343503 call _endCountAlloc 0)) unknown numTasks[343442] "temp"(343490 'move' numTasks[343442](343486 call . tmpIter[343386] c"size"))(343481 call _upEndCount _coforallCount[343441] 0 numTasks[343442]) unknown _indexOfInterest[343448] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343449] "expr temp" "temp"(343458 'move' _iterator[343449](343456 call _getIterator tmpIter[343386]))
        Defer
        {
          {(343474 call _freeIterator _iterator[343449])
          }
        }
        { scopeless type(343463 'move' _indexOfInterest[343448](343460 call iteratorIndex _iterator[343449]))
        }
        ForLoop[343450]
        { unknown l[343467] "coforall index var" "index var" "insert auto destroy"(343469 'move' l[343467] _indexOfInterest[343448]) const tmp[343392] "const" "temp"(343394 'move' tmp[343392](343396 'deref'(343397 '_wide_get_locale'(343402 call(343399 call .(366654 call . this[344996] c"dist") c"targetLocales") l[343467]))))
          {
            { const _retval[343410] "const"(343422 call(343412 call .(343414 call .(343416 call postfix!(343418 call(413496 call . this[344996] c"locDoms") l[343467])) c"mySparseBlock") c"bulkAdd")(343424 call inds[342949](343426 call localeRanges[343097] l[343467]))(dataSorted = 1)(isUnique = 0))(343433 'end of statement')(343438 call(343435 call . _totalAdded[343319] c"add") _retval[343410])
            }(343443 call _downEndCount _coforallCount[343441] nil[44])(343405 'coforall on block' 0 tmp[343392])
          } label _continueLabel[343453] _indexOfInterest[343448] _iterator[343449]
        } label _breakLabel[343454]
        Defer
        {
          {(343493 call _endCountFree _coforallCount[343441])
          }
        }(343498 call _waitEndCount _coforallCount[343441] 0 numTasks[343442])
      }
      { const _coforallCount[343510] "const" "end count" "temp"(343566 'move' _coforallCount[343510](343563 call _endCountAlloc 0)) unknown _indexOfInterest[343517] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343518] "expr temp" "temp"(343527 'move' _iterator[343518](343525 call _getIterator tmpIter[343386]))
        Defer
        {
          {(343543 call _freeIterator _iterator[343518])
          }
        }
        { scopeless type(343532 'move' _indexOfInterest[343517](343529 call iteratorIndex _iterator[343518]))
        }
        ForLoop[343519]
        { unknown l[343536] "coforall index var" "index var" "insert auto destroy"(343538 'move' l[343536] _indexOfInterest[343517])(343550 call _upEndCount _coforallCount[343510] 0) const tmp[343378] "const" "temp"(343380 'move' tmp[343378](343376 'deref'(343375 '_wide_get_locale'(343334 call(343329 call .(366648 call . this[344996] c"dist") c"targetLocales") l[343536]))))
          {
            { const _retval[343362] "const"(343361 call(343346 call .(343341 call .(343339 call postfix!(343338 call(413485 call . this[344996] c"locDoms") l[343536])) c"mySparseBlock") c"bulkAdd")(343355 call inds[342949](343353 call localeRanges[343097] l[343536]))(dataSorted = 1)(isUnique = 0))(343365 'end of statement')(343373 call(343368 call . _totalAdded[343319] c"add") _retval[343362])
            }(343512 call _downEndCount _coforallCount[343510] nil[44])(343383 'coforall on block' 0 tmp[343378])
          } label _continueLabel[343522] _indexOfInterest[343517] _iterator[343518]
        } label _breakLabel[343523]
        Defer
        {
          {(343554 call _endCountFree _coforallCount[343510])
          }
        }(343559 call _waitEndCount _coforallCount[343510] 0)
      }
    } const _retval[343594] "const"(343593 call(343589 call . _totalAdded[343319] c"read"))(343597 'end of statement')(343599 return _retval[343594])(355705 'used modules list'(342967 'use' Sort[268056])(342971 'use' Search[291329]))
  } function SparseBlockDom[344966](?).bulkAddHere_help[343616](arg _mt[345002]:_MT[238], arg this[345000]:SparseBlockDom[344966](?), arg inds[343613] :(343610 call chpl__buildArrayRuntimeType nil[44](343608 call chpl__buildIndexType(413507 call . this[345000] c"rank")(413512 call . this[345000] c"idxType"))), arg dataSorted[343619] = 0, arg isUnique[343623] = 0) : _unknown[51] "method" "primary method"
  { const _retval[343642] "const"(343641 call(343632 call .(343629 call .(343627 call postfix!(413517 call . this[345000] c"myLocDom")) c"mySparseBlock") c"bulkAdd") inds[343613](dataSorted = 1)(isUnique = 0))(343645 'end of statement')(343648 return _retval[343642])
  } function SparseBlockDom[344966](?).dsiSerialWrite[343656](arg _mt[345006]:_MT[238], arg this[345004]:SparseBlockDom[344966](?), arg f[343654]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(343757 call _cond_test(343660 call ==(413524 call . this[345004] c"rank") 1))
    {(343664 call <~> f[343654] "{")
      { unknown _indexOfInterest[343697] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343698] "expr temp" "temp"(343707 'move' _iterator[343698](343705 call _getIterator(413530 call . this[345004] c"locDoms")))
        Defer
        {
          {(343723 call _freeIterator _iterator[343698])
          }
        }
        { scopeless type(343712 'move' _indexOfInterest[343697](343709 call iteratorIndex _iterator[343698]))
        }
        ForLoop[343699]
        { unknown locdom[343716] "index var" "insert auto destroy"(343718 'move' locdom[343716] _indexOfInterest[343697])
          {
            if(343692 call _cond_test(343673 call .(343671 call postfix! locdom[343716]) c"dsiNumIndices"))
            {(343678 call <~> f[343654] " ")(343690 call(343685 call .(343683 call postfix! locdom[343716]) c"dsiSerialWrite") f[343654])
            }
          } label _continueLabel[343702] _indexOfInterest[343697] _iterator[343698]
        } label _breakLabel[343703]
      }(343732 call <~> f[343654] "}")
    }
    {(343754 call compilerError "Can't write out multidimensional sparse distributed domains yet")
    }
  } function SparseBlockDom[344966](?).dsiBuildArray[343768](arg _mt[345010]:_MT[238], arg this[345008]:SparseBlockDom[344966](?), arg eltType[343766]:_any[178](?), param arg initElts[343771] : bool[10]) : _unknown[51] "method" "primary method"
  { unknown arr[343795](343776 'new'(_chpl_manager = unmanaged[220](?))(343794 call SparseBlockArr[413539](?)(eltType = eltType[343766])(rank =(413545 call . this[345008] c"rank"))(idxType =(413550 call . this[345008] c"idxType"))(stridable =(413555 call . this[345008] c"stridable"))(sparseLayoutType =(413560 call . this[345008] c"sparseLayoutType"))(dom =(343792 call _to_unmanaged this[345008]))))(343798 'end of statement')(343806 call(343801 call . arr[343795] c"setup") initElts[343771])(343809 return arr[343795])
  } function SparseBlockDom[344966](?).getLocDom[343817](arg _mt[345014]:_MT[238], arg this[345012]:SparseBlockDom[344966](?), arg localeIdx[343815]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(343825 return(343823 call postfix!(343822 call(413568 call . this[345012] c"locDoms") localeIdx[343815])))
  } function SparseBlockDom[344966](?).these[343832](arg _mt[345018]:_MT[238], arg this[345016]:SparseBlockDom[344966](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[343885] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343886] "expr temp" "temp"(343895 'move' _iterator[343886](343893 call _getIterator(413574 call . this[345016] c"locDoms")))
      Defer
      {
        {(343911 call _freeIterator _iterator[343886])
        }
      }
      { scopeless type(343900 'move' _indexOfInterest[343885](343897 call iteratorIndex _iterator[343886]))
      }
      ForLoop[343887]
      { unknown locDom[343904] "index var" "insert auto destroy"(343906 'move' locDom[343904] _indexOfInterest[343885])
        { unknown _indexOfInterest[343851] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343852] "expr temp" "temp"(343861 'move' _iterator[343852](343859 call _getIterator(343847 call(343843 call .(343840 call .(343838 call postfix! locDom[343904]) c"mySparseBlock") c"these"))))
          Defer
          {
            {(343878 call _freeIterator _iterator[343852])
            }
          }
          { scopeless type(343867 'move' _indexOfInterest[343851](343864 call iteratorIndex _iterator[343852]))
          }
          ForLoop[343853]
          { unknown x[343871] "index var" "insert auto destroy"(343873 'move' x[343871] _indexOfInterest[343851])(343849 yield x[343871]) label _continueLabel[343856] _indexOfInterest[343851] _iterator[343852]
          } label _breakLabel[343857]
        } label _continueLabel[343890] _indexOfInterest[343885] _iterator[343886]
      } label _breakLabel[343891]
    }
  } function SparseBlockDom[344966](?).these[343927](arg _mt[345022]:_MT[238], arg this[345020]:SparseBlockDom[344966](?), param arg tag[343924] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[344018] "expr temp" "maybe ref" "no copy" "temp"(344021 'move' tmpIter[344018](343947 call _build_tuple(413583 call . this[345020] c"locDoms")(343944 call .(366663 call . this[345020] c"dist") c"targetLocDom"))) unknown isRngDomArr[344242] "maybe param" "temp"(344257 'move' isRngDomArr[344242](344255 call ||(344244 call isBoundedRange tmpIter[344018])(344253 call ||(344247 call isDomain tmpIter[344018])(344250 call isArray tmpIter[344018]))))
      if isRngDomArr[344242]
      { const _coforallCount[344086] "const" "end count" "temp"(344165 'move' _coforallCount[344086](344162 call _endCountAlloc 0)) unknown numTasks[344087] "temp"(344149 'move' numTasks[344087](344145 call . tmpIter[344018] c"size"))(344140 call _upEndCount _coforallCount[344086] 0 numTasks[344087]) unknown _indexOfInterest[344093] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344094] "expr temp" "temp"(344103 'move' _iterator[344094](344101 call _getIteratorZip tmpIter[344018]))
        Defer
        {
          {(344133 call _freeIterator _iterator[344094])
          }
        }
        { scopeless type(344108 'move' _indexOfInterest[344093](344105 call iteratorIndex _iterator[344094]))
        }
        ForLoop[344095]
        {(344113 call _check_tuple_var_decl _indexOfInterest[344093] 2) unknown locDom[344119] "coforall index var" "index var" "insert auto destroy"(344121 'move' locDom[344119](344117 call _indexOfInterest[344093] 0)) unknown localeIndex[344126] "coforall index var" "index var" "insert auto destroy"(344128 'move' localeIndex[344126](344124 call _indexOfInterest[344093] 1)) const tmp[344024] "const" "temp"(344026 'move' tmp[344024](344028 'deref'(344029 '_wide_get_locale' locDom[344119])))
          {
            {
              { unknown _indexOfInterest[344037] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344039] "expr temp" "temp"(344041 'move' _iterator[344039](344044 call _getIterator(344054 call(344046 call .(344048 call .(344050 call postfix! locDom[344119]) c"mySparseBlock") c"these") tag[343924])))
                Defer
                {
                  {(344058 call _freeIterator _iterator[344039])
                  }
                }
                { scopeless type(344062 'move' _indexOfInterest[344037](344065 call iteratorIndex _iterator[344039]))
                }
                ForLoop[344067]
                { unknown followThis[344070] "index var" "insert auto destroy"(344072 'move' followThis[344070] _indexOfInterest[344037])
                  {(344076 yield(344078 call _build_tuple followThis[344070] localeIndex[344126]))
                  } label _continueLabel[344081] _indexOfInterest[344037] _iterator[344039]
                } label _breakLabel[344083]
              }
            }(344088 call _downEndCount _coforallCount[344086] nil[44])(344032 'coforall on block' 0 tmp[344024])
          } label _continueLabel[344098] _indexOfInterest[344093] _iterator[344094]
        } label _breakLabel[344099]
        Defer
        {
          {(344152 call _endCountFree _coforallCount[344086])
          }
        }(344157 call _waitEndCount _coforallCount[344086] 0 numTasks[344087])
      }
      { const _coforallCount[344169] "const" "end count" "temp"(344239 'move' _coforallCount[344169](344236 call _endCountAlloc 0)) unknown _indexOfInterest[344176] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344177] "expr temp" "temp"(344186 'move' _iterator[344177](344184 call _getIteratorZip tmpIter[344018]))
        Defer
        {
          {(344216 call _freeIterator _iterator[344177])
          }
        }
        { scopeless type(344191 'move' _indexOfInterest[344176](344188 call iteratorIndex _iterator[344177]))
        }
        ForLoop[344178]
        {(344196 call _check_tuple_var_decl _indexOfInterest[344176] 2) unknown locDom[344202] "coforall index var" "index var" "insert auto destroy"(344204 'move' locDom[344202](344200 call _indexOfInterest[344176] 0)) unknown localeIndex[344209] "coforall index var" "index var" "insert auto destroy"(344211 'move' localeIndex[344209](344207 call _indexOfInterest[344176] 1))(344223 call _upEndCount _coforallCount[344169] 0) const tmp[344008] "const" "temp"(344010 'move' tmp[344008](344006 'deref'(344005 '_wide_get_locale' locDom[344202])))
          {
            {
              { unknown _indexOfInterest[343970] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[343971] "expr temp" "temp"(343980 'move' _iterator[343971](343978 call _getIterator(343961 call(343956 call .(343953 call .(343951 call postfix! locDom[344202]) c"mySparseBlock") c"these") tag[343924])))
                Defer
                {
                  {(343997 call _freeIterator _iterator[343971])
                  }
                }
                { scopeless type(343986 'move' _indexOfInterest[343970](343983 call iteratorIndex _iterator[343971]))
                }
                ForLoop[343972]
                { unknown followThis[343990] "index var" "insert auto destroy"(343992 'move' followThis[343990] _indexOfInterest[343970])
                  {(343967 yield(343965 call _build_tuple followThis[343990] localeIndex[344209]))
                  } label _continueLabel[343975] _indexOfInterest[343970] _iterator[343971]
                } label _breakLabel[343976]
              }
            }(344171 call _downEndCount _coforallCount[344169] nil[44])(344013 'coforall on block' 0 tmp[344008])
          } label _continueLabel[344181] _indexOfInterest[344176] _iterator[344177]
        } label _breakLabel[344182]
        Defer
        {
          {(344227 call _endCountFree _coforallCount[344169])
          }
        }(344232 call _waitEndCount _coforallCount[344169] 0)
      }
    }
  }
  {(343934 call == tag[343924] leader[447])
  } function SparseBlockDom[344966](?).these[344271](arg _mt[345026]:_MT[238], arg this[345024]:SparseBlockDom[344966](?), param arg tag[344268] : iterKind[453], arg followThis[344273]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[344288] "temp" followThis[344273](344295 call _check_tuple_var_decl tmp[344288] 2) unknown locFollowThis[344282](344289 call tmp[344288] 0) unknown localeIndex[344284](344292 call tmp[344288] 1)(344300 'end of statement')
    { unknown _indexOfInterest[344317] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344318] "expr temp" "temp"(344327 'move' _iterator[344318](344325 call _getIterator(344313 call(344307 call .(344306 call locFollowThis[344282] 0) c"these") tag[344268] locFollowThis[344282])))
      Defer
      {
        {(344344 call _freeIterator _iterator[344318])
        }
      }
      { scopeless type(344333 'move' _indexOfInterest[344317](344330 call iteratorIndex _iterator[344318]))
      }
      ForLoop[344319]
      { unknown i[344337] "index var" "insert auto destroy"(344339 'move' i[344337] _indexOfInterest[344317])(344315 yield i[344337]) label _continueLabel[344322] _indexOfInterest[344317] _iterator[344318]
      } label _breakLabel[344323]
    }
  }
  {(344280 call == tag[344268] follower[449])
  } function SparseBlockDom[344966](?).these[344360](arg _mt[345030]:_MT[238], arg this[345028]:SparseBlockDom[344966](?), param arg tag[344357] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[344425] "expr temp" "maybe ref" "no copy" "temp"(344428 'move' tmpIter[344425](413618 call . this[345028] c"locDoms")) unknown isRngDomArr[344584] "maybe param" "temp"(344599 'move' isRngDomArr[344584](344597 call ||(344586 call isBoundedRange tmpIter[344425])(344595 call ||(344589 call isDomain tmpIter[344425])(344592 call isArray tmpIter[344425]))))
      if isRngDomArr[344584]
      { const _coforallCount[344456] "const" "end count" "temp"(344521 'move' _coforallCount[344456](344518 call _endCountAlloc 0)) unknown numTasks[344457] "temp"(344505 'move' numTasks[344457](344501 call . tmpIter[344425] c"size"))(344496 call _upEndCount _coforallCount[344456] 0 numTasks[344457]) unknown _indexOfInterest[344463] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344464] "expr temp" "temp"(344473 'move' _iterator[344464](344471 call _getIterator tmpIter[344425]))
        Defer
        {
          {(344489 call _freeIterator _iterator[344464])
          }
        }
        { scopeless type(344478 'move' _indexOfInterest[344463](344475 call iteratorIndex _iterator[344464]))
        }
        ForLoop[344465]
        { unknown locDom[344482] "coforall index var" "index var" "insert auto destroy"(344484 'move' locDom[344482] _indexOfInterest[344463]) const tmp[344431] "const" "temp"(344433 'move' tmp[344431](344435 'deref'(344436 '_wide_get_locale' locDom[344482])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344447] "index var" "insert auto destroy"
                iterated expressions:
                  (344450 call .(344452 call postfix! locDom[344482]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344444 yield i[344447])
                }
              }
            }(344458 call _downEndCount _coforallCount[344456] nil[44])(344439 'coforall on block' 0 tmp[344431])
          } label _continueLabel[344468] _indexOfInterest[344463] _iterator[344464]
        } label _breakLabel[344469]
        Defer
        {
          {(344508 call _endCountFree _coforallCount[344456])
          }
        }(344513 call _waitEndCount _coforallCount[344456] 0 numTasks[344457])
      }
      { const _coforallCount[344525] "const" "end count" "temp"(344581 'move' _coforallCount[344525](344578 call _endCountAlloc 0)) unknown _indexOfInterest[344532] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344533] "expr temp" "temp"(344542 'move' _iterator[344533](344540 call _getIterator tmpIter[344425]))
        Defer
        {
          {(344558 call _freeIterator _iterator[344533])
          }
        }
        { scopeless type(344547 'move' _indexOfInterest[344532](344544 call iteratorIndex _iterator[344533]))
        }
        ForLoop[344534]
        { unknown locDom[344551] "coforall index var" "index var" "insert auto destroy"(344553 'move' locDom[344551] _indexOfInterest[344532])(344565 call _upEndCount _coforallCount[344525] 0) const tmp[344416] "const" "temp"(344418 'move' tmp[344416](344414 'deref'(344413 '_wide_get_locale' locDom[344551])))
          {
            {
              Forall {
                induction variables:
                  unknown i[344408] "index var" "insert auto destroy"
                iterated expressions:
                  (344400 call .(344398 call postfix! locDom[344551]) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {(344404 yield i[344408])
                }
              }
            }(344527 call _downEndCount _coforallCount[344525] nil[44])(344421 'coforall on block' 0 tmp[344416])
          } label _continueLabel[344537] _indexOfInterest[344532] _iterator[344533]
        } label _breakLabel[344538]
        Defer
        {
          {(344569 call _endCountFree _coforallCount[344525])
          }
        }(344574 call _waitEndCount _coforallCount[344525] 0)
      }
    }
  }
  {(344391 call &&(344367 call == tag[344357] standalone[451])(344390 'method call resolves'(344385 call .(344382 call .(344380 call postfix!(344379 call(413607 call . this[345028] c"locDoms")(344377 call createTuple(413612 call . this[345028] c"rank") int(64)[13] 0))) c"mySparseBlock") c"_value") "these" tag[344357]))
  } function SparseBlockDom[344966](?).dsiMember[344611](arg _mt[345034]:_MT[238], arg this[345032]:SparseBlockDom[344966](?), arg ind[344609]:_any[178](?)) : _unknown[51] "method" "primary method"
  { unknown _retval[344616] 0 bool[10](344619 'end of statement') const tmp[344654] "const" "temp"(344656 'move' tmp[344654](344652 'deref'(344651 '_wide_get_locale'(344627 call(344622 call .(366670 call . this[345032] c"dist") c"dsiIndexToLocale") ind[344609]))))
    {
      {(344647 call = _retval[344616](344646 call(344641 call .(344639 call postfix!(344638 call(413631 call . this[345032] c"locDoms")(344636 call(344631 call .(366675 call . this[345032] c"dist") c"targetLocsIdx") ind[344609]))) c"dsiMember") ind[344609]))
      }(344659 'on block' 0 tmp[344654])
    }(344663 return _retval[344616])
  }
  { scopeless type bool[10]
  } function SparseBlockDom[344966](?).dsiClear[344670](arg _mt[345038]:_MT[238], arg this[345036]:SparseBlockDom[344966](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[344695] "expr temp" "maybe ref" "no copy" "temp"(344698 'move' tmpIter[344695](413639 call . this[345036] c"locDoms")) unknown isRngDomArr[344849] "maybe param" "temp"(344864 'move' isRngDomArr[344849](344862 call ||(344851 call isBoundedRange tmpIter[344695])(344860 call ||(344854 call isDomain tmpIter[344695])(344857 call isArray tmpIter[344695]))))
      if isRngDomArr[344849]
      { const _coforallCount[344721] "const" "end count" "temp"(344786 'move' _coforallCount[344721](344783 call _endCountAlloc 0)) unknown numTasks[344722] "temp"(344770 'move' numTasks[344722](344766 call . tmpIter[344695] c"size"))(344761 call _upEndCount _coforallCount[344721] 0 numTasks[344722]) unknown _indexOfInterest[344728] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344729] "expr temp" "temp"(344738 'move' _iterator[344729](344736 call _getIterator tmpIter[344695]))
        Defer
        {
          {(344754 call _freeIterator _iterator[344729])
          }
        }
        { scopeless type(344743 'move' _indexOfInterest[344728](344740 call iteratorIndex _iterator[344729]))
        }
        ForLoop[344730]
        { unknown locDom[344747] "coforall index var" "index var" "insert auto destroy"(344749 'move' locDom[344747] _indexOfInterest[344728]) const tmp[344701] "const" "temp"(344703 'move' tmp[344701](344705 'deref'(344706 '_wide_get_locale' locDom[344747])))
          {(344719 call(344714 call .(344716 call postfix! locDom[344747]) c"dsiClear"))(344723 call _downEndCount _coforallCount[344721] nil[44])(344709 'coforall on block' 0 tmp[344701])
          } label _continueLabel[344733] _indexOfInterest[344728] _iterator[344729]
        } label _breakLabel[344734]
        Defer
        {
          {(344773 call _endCountFree _coforallCount[344721])
          }
        }(344778 call _waitEndCount _coforallCount[344721] 0 numTasks[344722])
      }
      { const _coforallCount[344790] "const" "end count" "temp"(344846 'move' _coforallCount[344790](344843 call _endCountAlloc 0)) unknown _indexOfInterest[344797] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344798] "expr temp" "temp"(344807 'move' _iterator[344798](344805 call _getIterator tmpIter[344695]))
        Defer
        {
          {(344823 call _freeIterator _iterator[344798])
          }
        }
        { scopeless type(344812 'move' _indexOfInterest[344797](344809 call iteratorIndex _iterator[344798]))
        }
        ForLoop[344799]
        { unknown locDom[344816] "coforall index var" "index var" "insert auto destroy"(344818 'move' locDom[344816] _indexOfInterest[344797])(344830 call _upEndCount _coforallCount[344790] 0) const tmp[344687] "const" "temp"(344689 'move' tmp[344687](344685 'deref'(344684 '_wide_get_locale' locDom[344816])))
          {(344682 call(344678 call .(344676 call postfix! locDom[344816]) c"dsiClear"))(344792 call _downEndCount _coforallCount[344790] nil[44])(344692 'coforall on block' 0 tmp[344687])
          } label _continueLabel[344802] _indexOfInterest[344797] _iterator[344798]
        } label _breakLabel[344803]
        Defer
        {
          {(344834 call _endCountFree _coforallCount[344790])
          }
        }(344839 call _waitEndCount _coforallCount[344790] 0)
      }
    }
  } function SparseBlockDom[344966](?).dsiMyDist[344873](arg _mt[345042]:_MT[238], arg this[345040]:SparseBlockDom[344966](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(344876 return(413648 call . this[345040] c"dist"))
  } function SparseBlockDom[344966](?).dsiAssignDomain[344887](arg _mt[345046]:_MT[238], arg this[345044]:SparseBlockDom[344966](?), arg rhs[344884] : _domain[125908](?), arg lhsPrivate[344890] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(344917 call _cond_test(344894 call ! lhsPrivate[344890]))
    {(344915 call halt "SparseBlock domain assignment not yet supported")
    }
    { unknown _indexOfInterest[344930] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[344931] "expr temp" "temp"(344940 'move' _iterator[344931](344938 call _getIterator rhs[344884]))
      Defer
      {
        {(344956 call _freeIterator _iterator[344931])
        }
      }
      { scopeless type(344945 'move' _indexOfInterest[344930](344942 call iteratorIndex _iterator[344931]))
      }
      ForLoop[344932]
      { unknown i[344949] "index var" "insert auto destroy"(344951 'move' i[344949] _indexOfInterest[344930])(344928 call(413655 call . this[345044] c"dsiAdd") i[344949]) label _continueLabel[344935] _indexOfInterest[344930] _iterator[344931]
      } label _breakLabel[344936]
    }
  } type SparseBlockDom[344966](?) val super[355911]:BaseSparseDomImpl[148004](?) "super class" unknown sparseLayoutType[342147] "type variable" unknown stridable[342152] "param" 0 bool[10] const dist[342163] "const"(342161 call unmanaged Block[415647](?) rank[148254] idxType[148258] sparseLayoutType[342147]) unknown whole[342177](342175 call chpl__buildDomainRuntimeType defaultDist[94053](rank = rank[148254])(idxType = idxType[148258])(stridable = stridable[342152])) unknown locDoms[342199](342197 call chpl__buildArrayRuntimeType(342195 call chpl__ensureDomainExpr(342182 call . dist[342163] c"targetLocDom"))(342192 call unmanaged LocSparseBlockDom?[415680](?) rank[148254] idxType[148258] stridable[342152] sparseLayoutType[342147])) unknown myLocDom[342212](342209 call unmanaged LocSparseBlockDom?[415680](?) rank[148254] idxType[148258] stridable[342152] sparseLayoutType[342147]) type SparseBlockDom[409353](?) function getDefaultSparseDist[345053](arg sparseLayoutType[345051]:_any[178](?)) : _unknown[51] "private"
  {
    if(345078 call _cond_test(355045 'is_subtype' DefaultDist[378156](?)(345059 call _to_nonnil sparseLayoutType[345051])))
    {(345064 return defaultDist[94053])
    }
    {(345075 return(345067 'new'(345074 call dmap[118245](345069 'new'(345072 call sparseLayoutType[345051])))))
    }
  } function LocSparseBlockDom[345235](?).dsiAdd[345148](arg _mt[345239]:_MT[238], arg this[345237]:LocSparseBlockDom[345235](?), arg ind[345145] :(345143 call *(413673 call . this[345237] c"rank")(413678 call . this[345237] c"idxType"))) : _unknown[51] "method" "primary method"
  {(345157 return(345156 call(345151 call .(366681 call . this[345237] c"mySparseBlock") c"add") ind[345145]))
  } function LocSparseBlockDom[345235](?).dsiMember[345171](arg _mt[345243]:_MT[238], arg this[345241]:LocSparseBlockDom[345235](?), arg ind[345168] :(345166 call *(413684 call . this[345241] c"rank")(413689 call . this[345241] c"idxType"))) : _unknown[51] "method" "primary method"
  {(345180 return(345179 call(345174 call .(366686 call . this[345241] c"mySparseBlock") c"contains") ind[345168]))
  } function LocSparseBlockDom[345235](?).dsiClear[345187](arg _mt[345247]:_MT[238], arg this[345245]:LocSparseBlockDom[345235](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345194 call(345190 call .(366691 call . this[345245] c"mySparseBlock") c"clear"))
  } function LocSparseBlockDom[345235](?).dsiSerialWrite[345203](arg _mt[345251]:_MT[238], arg this[345249]:LocSparseBlockDom[345235](?), arg w[345201]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345216 call(345209 call .(345206 call .(366696 call . this[345249] c"mySparseBlock") c"_value") c"dsiSerialWrite") w[345201](printBrackets = 0))
  } function LocSparseBlockDom[345235](?).dsiNumIndices[345223](arg _mt[345255]:_MT[238], arg this[345253]:LocSparseBlockDom[345235](?)) : _unknown[51] "method" "primary method" "no parens"
  {(345229 return(345226 call .(366701 call . this[345253] c"mySparseBlock") c"size"))
  } type LocSparseBlockDom[345235](?) val super[355913]:object[22] "super class" unknown rank[345087] "param" int(64)[13] unknown idxType[345091] "type variable" unknown stridable[345095] "param" bool[10] unknown sparseLayoutType[345099] "type variable" unknown parentDom[345109](345107 call chpl__buildDomainRuntimeType defaultDist[94053] rank[345087] idxType[345091] stridable[345095]) unknown sparseDist[345117](345116 call getDefaultSparseDist sparseLayoutType[345099]) unknown mySparseBlock[345135](345133 call chpl__distributed sparseDist[345117](345130 call chpl__buildSparseDomainRuntimeType(345127 call . parentDom[345109] c"defaultSparseDist") parentDom[345109])) type unmanaged LocSparseBlockDom[415689](?) type unmanaged LocSparseBlockDom?[415680](?) type LocSparseBlockDom?[415677](?) type LocSparseBlockDom[413197](?) function SparseBlockArr[347294](?).init[345319](arg _mt[347298]:_MT[238], arg this[347296]:SparseBlockArr[347294](?), arg eltType[345317]:_any[178](?), param arg rank[345321]:_any[178](?), arg idxType[345323]:_any[178](?), param arg stridable[345325]:_any[178](?), arg sparseLayoutType[345327]:_any[178](?), arg dom[345329]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {(345344 call(345332 call .(366706 call . this[347296] c"super") c"init")(eltType = eltType[345317])(rank = rank[345321])(idxType = idxType[345323])(dom = dom[345329]))(345352 call =(345348 call . this[347296] c"stridable") stridable[345325])(345360 call =(345356 call . this[347296] c"sparseLayoutType") sparseLayoutType[345327])(345376 call =(345366 call . this[347296] c"locArrDom")(345373 call .(345370 call . dom[345329] c"dist") c"targetLocDom"))
  } function SparseBlockArr[347294](?).setup[345385](arg _mt[347302]:_MT[238], arg this[347300]:SparseBlockArr[347294](?), param arg initElts[345383]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown thisid[345392](345391 '_wide_get_node' this[347300])(345395 'end of statement')
    { unknown tmpIter[345480] "expr temp" "maybe ref" "no copy" "temp"(345483 'move' tmpIter[345480](345402 call .(345399 call .(366715 call . this[347300] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345681] "maybe param" "temp"(345696 'move' isRngDomArr[345681](345694 call ||(345683 call isBoundedRange tmpIter[345480])(345692 call ||(345686 call isDomain tmpIter[345480])(345689 call isArray tmpIter[345480]))))
      if isRngDomArr[345681]
      { const _coforallCount[345553] "const" "end count" "temp"(345618 'move' _coforallCount[345553](345615 call _endCountAlloc 0)) unknown numTasks[345554] "temp"(345602 'move' numTasks[345554](345598 call . tmpIter[345480] c"size"))(345593 call _upEndCount _coforallCount[345553] 0 numTasks[345554]) unknown _indexOfInterest[345560] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345561] "expr temp" "temp"(345570 'move' _iterator[345561](345568 call _getIterator tmpIter[345480]))
        Defer
        {
          {(345586 call _freeIterator _iterator[345561])
          }
        }
        { scopeless type(345575 'move' _indexOfInterest[345560](345572 call iteratorIndex _iterator[345561]))
        }
        ForLoop[345562]
        { unknown localeIdx[345579] "coforall index var" "index var" "insert auto destroy"(345581 'move' localeIdx[345579] _indexOfInterest[345560]) const tmp[345486] "const" "temp"(345488 'move' tmp[345486](345490 'deref'(345491 '_wide_get_locale'(345499 call(345493 call .(345495 call .(366732 call . this[347300] c"dom") c"dist") c"targetLocales") localeIdx[345579]))))
          {
            { const locDom[345507] "const"(345512 call(345509 call .(366737 call . this[347300] c"dom") c"getLocDom") localeIdx[345579])(345515 'end of statement')(345517 call =(345519 call(413773 call . this[347300] c"locArr") localeIdx[345579])(345521 'new'(_chpl_manager = unmanaged[220](?))(345525 call LocSparseBlockArr[413700](?)(413780 call . this[347300] c"eltType")(413785 call . this[347300] c"rank")(413790 call . this[347300] c"idxType")(413795 call . this[347300] c"stridable")(413800 call . this[347300] c"sparseLayoutType") locDom[345507](initElts = initElts[345383]))))
              if(345535 call _cond_test(345537 call == thisid[345392](345540 call .(366740 call here[90438]) c"id")))
              {(345546 call =(413808 call . this[347300] c"myLocArr")(345549 call(413813 call . this[347300] c"locArr") localeIdx[345579]))
              }
            }(345555 call _downEndCount _coforallCount[345553] nil[44])(345502 'coforall on block' 0 tmp[345486])
          } label _continueLabel[345565] _indexOfInterest[345560] _iterator[345561]
        } label _breakLabel[345566]
        Defer
        {
          {(345605 call _endCountFree _coforallCount[345553])
          }
        }(345610 call _waitEndCount _coforallCount[345553] 0 numTasks[345554])
      }
      { const _coforallCount[345622] "const" "end count" "temp"(345678 'move' _coforallCount[345622](345675 call _endCountAlloc 0)) unknown _indexOfInterest[345629] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345630] "expr temp" "temp"(345639 'move' _iterator[345630](345637 call _getIterator tmpIter[345480]))
        Defer
        {
          {(345655 call _freeIterator _iterator[345630])
          }
        }
        { scopeless type(345644 'move' _indexOfInterest[345629](345641 call iteratorIndex _iterator[345630]))
        }
        ForLoop[345631]
        { unknown localeIdx[345648] "coforall index var" "index var" "insert auto destroy"(345650 'move' localeIdx[345648] _indexOfInterest[345629])(345662 call _upEndCount _coforallCount[345622] 0) const tmp[345471] "const" "temp"(345473 'move' tmp[345471](345469 'deref'(345468 '_wide_get_locale'(345414 call(345409 call .(345406 call .(366720 call . this[347300] c"dom") c"dist") c"targetLocales") localeIdx[345648]))))
          {
            { const locDom[345422] "const"(345421 call(345416 call .(366725 call . this[347300] c"dom") c"getLocDom") localeIdx[345648])(345425 'end of statement')(345445 call =(345430 call(413725 call . this[347300] c"locArr") localeIdx[345648])(345433 'new'(_chpl_manager = unmanaged[220](?))(345444 call LocSparseBlockArr[413700](?)(413732 call . this[347300] c"eltType")(413737 call . this[347300] c"rank")(413742 call . this[347300] c"idxType")(413747 call . this[347300] c"stridable")(413752 call . this[347300] c"sparseLayoutType") locDom[345422](initElts = initElts[345383]))))
              if(345463 call _cond_test(345453 call == thisid[345392](345450 call .(366728 call here[90438]) c"id")))
              {(345460 call =(413760 call . this[347300] c"myLocArr")(345459 call(413765 call . this[347300] c"locArr") localeIdx[345648]))
              }
            }(345624 call _downEndCount _coforallCount[345622] nil[44])(345476 'coforall on block' 0 tmp[345471])
          } label _continueLabel[345634] _indexOfInterest[345629] _iterator[345630]
        } label _breakLabel[345635]
        Defer
        {
          {(345666 call _endCountFree _coforallCount[345622])
          }
        }(345671 call _waitEndCount _coforallCount[345622] 0)
      }
    }
  } function SparseBlockArr[347294](?).dsiElementInitializationComplete[345704](arg _mt[347306]:_MT[238], arg this[347304]:SparseBlockArr[347294](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345746] "expr temp" "maybe ref" "no copy" "temp"(345749 'move' tmpIter[345746](345711 call .(345708 call .(366744 call . this[347304] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[345907] "maybe param" "temp"(345922 'move' isRngDomArr[345907](345920 call ||(345909 call isBoundedRange tmpIter[345746])(345918 call ||(345912 call isDomain tmpIter[345746])(345915 call isArray tmpIter[345746]))))
      if isRngDomArr[345907]
      { const _coforallCount[345779] "const" "end count" "temp"(345844 'move' _coforallCount[345779](345841 call _endCountAlloc 0)) unknown numTasks[345780] "temp"(345828 'move' numTasks[345780](345824 call . tmpIter[345746] c"size"))(345819 call _upEndCount _coforallCount[345779] 0 numTasks[345780]) unknown _indexOfInterest[345786] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345787] "expr temp" "temp"(345796 'move' _iterator[345787](345794 call _getIterator tmpIter[345746]))
        Defer
        {
          {(345812 call _freeIterator _iterator[345787])
          }
        }
        { scopeless type(345801 'move' _indexOfInterest[345786](345798 call iteratorIndex _iterator[345787]))
        }
        ForLoop[345788]
        { unknown localeIdx[345805] "coforall index var" "index var" "insert auto destroy"(345807 'move' localeIdx[345805] _indexOfInterest[345786]) const tmp[345752] "const" "temp"(345754 'move' tmp[345752](345756 'deref'(345757 '_wide_get_locale'(345759 call(413831 call . this[347304] c"locArr") localeIdx[345805]))))
          {
            {(345777 call(345767 call .(345769 call .(345771 call postfix!(345773 call(413837 call . this[347304] c"locArr") localeIdx[345805])) c"myElems") c"dsiElementInitializationComplete"))
            }(345781 call _downEndCount _coforallCount[345779] nil[44])(345762 'coforall on block' 0 tmp[345752])
          } label _continueLabel[345791] _indexOfInterest[345786] _iterator[345787]
        } label _breakLabel[345792]
        Defer
        {
          {(345831 call _endCountFree _coforallCount[345779])
          }
        }(345836 call _waitEndCount _coforallCount[345779] 0 numTasks[345780])
      }
      { const _coforallCount[345848] "const" "end count" "temp"(345904 'move' _coforallCount[345848](345901 call _endCountAlloc 0)) unknown _indexOfInterest[345855] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[345856] "expr temp" "temp"(345865 'move' _iterator[345856](345863 call _getIterator tmpIter[345746]))
        Defer
        {
          {(345881 call _freeIterator _iterator[345856])
          }
        }
        { scopeless type(345870 'move' _indexOfInterest[345855](345867 call iteratorIndex _iterator[345856]))
        }
        ForLoop[345857]
        { unknown localeIdx[345874] "coforall index var" "index var" "insert auto destroy"(345876 'move' localeIdx[345874] _indexOfInterest[345855])(345888 call _upEndCount _coforallCount[345848] 0) const tmp[345737] "const" "temp"(345739 'move' tmp[345737](345735 'deref'(345734 '_wide_get_locale'(345717 call(413819 call . this[347304] c"locArr") localeIdx[345874]))))
          {
            {(345731 call(345727 call .(345724 call .(345722 call postfix!(345721 call(413825 call . this[347304] c"locArr") localeIdx[345874])) c"myElems") c"dsiElementInitializationComplete"))
            }(345850 call _downEndCount _coforallCount[345848] nil[44])(345742 'coforall on block' 0 tmp[345737])
          } label _continueLabel[345860] _indexOfInterest[345855] _iterator[345856]
        } label _breakLabel[345861]
        Defer
        {
          {(345892 call _endCountFree _coforallCount[345848])
          }
        }(345897 call _waitEndCount _coforallCount[345848] 0)
      }
    }
  } function SparseBlockArr[347294](?).dsiElementDeinitializationComplete[345931](arg _mt[347310]:_MT[238], arg this[347308]:SparseBlockArr[347294](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[345973] "expr temp" "maybe ref" "no copy" "temp"(345976 'move' tmpIter[345973](345938 call .(345935 call .(366749 call . this[347308] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[346134] "maybe param" "temp"(346149 'move' isRngDomArr[346134](346147 call ||(346136 call isBoundedRange tmpIter[345973])(346145 call ||(346139 call isDomain tmpIter[345973])(346142 call isArray tmpIter[345973]))))
      if isRngDomArr[346134]
      { const _coforallCount[346006] "const" "end count" "temp"(346071 'move' _coforallCount[346006](346068 call _endCountAlloc 0)) unknown numTasks[346007] "temp"(346055 'move' numTasks[346007](346051 call . tmpIter[345973] c"size"))(346046 call _upEndCount _coforallCount[346006] 0 numTasks[346007]) unknown _indexOfInterest[346013] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346014] "expr temp" "temp"(346023 'move' _iterator[346014](346021 call _getIterator tmpIter[345973]))
        Defer
        {
          {(346039 call _freeIterator _iterator[346014])
          }
        }
        { scopeless type(346028 'move' _indexOfInterest[346013](346025 call iteratorIndex _iterator[346014]))
        }
        ForLoop[346015]
        { unknown localeIdx[346032] "coforall index var" "index var" "insert auto destroy"(346034 'move' localeIdx[346032] _indexOfInterest[346013]) const tmp[345979] "const" "temp"(345981 'move' tmp[345979](345983 'deref'(345984 '_wide_get_locale'(345986 call(413855 call . this[347308] c"locArr") localeIdx[346032]))))
          {
            {(346004 call(345994 call .(345996 call .(345998 call postfix!(346000 call(413861 call . this[347308] c"locArr") localeIdx[346032])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(346008 call _downEndCount _coforallCount[346006] nil[44])(345989 'coforall on block' 0 tmp[345979])
          } label _continueLabel[346018] _indexOfInterest[346013] _iterator[346014]
        } label _breakLabel[346019]
        Defer
        {
          {(346058 call _endCountFree _coforallCount[346006])
          }
        }(346063 call _waitEndCount _coforallCount[346006] 0 numTasks[346007])
      }
      { const _coforallCount[346075] "const" "end count" "temp"(346131 'move' _coforallCount[346075](346128 call _endCountAlloc 0)) unknown _indexOfInterest[346082] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346083] "expr temp" "temp"(346092 'move' _iterator[346083](346090 call _getIterator tmpIter[345973]))
        Defer
        {
          {(346108 call _freeIterator _iterator[346083])
          }
        }
        { scopeless type(346097 'move' _indexOfInterest[346082](346094 call iteratorIndex _iterator[346083]))
        }
        ForLoop[346084]
        { unknown localeIdx[346101] "coforall index var" "index var" "insert auto destroy"(346103 'move' localeIdx[346101] _indexOfInterest[346082])(346115 call _upEndCount _coforallCount[346075] 0) const tmp[345964] "const" "temp"(345966 'move' tmp[345964](345962 'deref'(345961 '_wide_get_locale'(345944 call(413843 call . this[347308] c"locArr") localeIdx[346101]))))
          {
            {(345958 call(345954 call .(345951 call .(345949 call postfix!(345948 call(413849 call . this[347308] c"locArr") localeIdx[346101])) c"myElems") c"dsiElementDeinitializationComplete"))
            }(346077 call _downEndCount _coforallCount[346075] nil[44])(345969 'coforall on block' 0 tmp[345964])
          } label _continueLabel[346087] _indexOfInterest[346082] _iterator[346083]
        } label _breakLabel[346088]
        Defer
        {
          {(346119 call _endCountFree _coforallCount[346075])
          }
        }(346124 call _waitEndCount _coforallCount[346075] 0)
      }
    }
  } function SparseBlockArr[347294](?).dsiDestroyArr[346162](arg _mt[347314]:_MT[238], arg this[347312]:SparseBlockArr[347294](?), arg deinitElts[346159] : bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[346230] "expr temp" "maybe ref" "no copy" "temp"(346233 'move' tmpIter[346230](346169 call .(346166 call .(366754 call . this[347312] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[346413] "maybe param" "temp"(346428 'move' isRngDomArr[346413](346426 call ||(346415 call isBoundedRange tmpIter[346230])(346424 call ||(346418 call isDomain tmpIter[346230])(346421 call isArray tmpIter[346230]))))
      if isRngDomArr[346413]
      { const _coforallCount[346285] "const" "end count" "temp"(346350 'move' _coforallCount[346285](346347 call _endCountAlloc 0)) unknown numTasks[346286] "temp"(346334 'move' numTasks[346286](346330 call . tmpIter[346230] c"size"))(346325 call _upEndCount _coforallCount[346285] 0 numTasks[346286]) unknown _indexOfInterest[346292] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346293] "expr temp" "temp"(346302 'move' _iterator[346293](346300 call _getIterator tmpIter[346230]))
        Defer
        {
          {(346318 call _freeIterator _iterator[346293])
          }
        }
        { scopeless type(346307 'move' _indexOfInterest[346292](346304 call iteratorIndex _iterator[346293]))
        }
        ForLoop[346294]
        { unknown localeIdx[346311] "coforall index var" "index var" "insert auto destroy"(346313 'move' localeIdx[346311] _indexOfInterest[346292]) const tmp[346236] "const" "temp"(346238 'move' tmp[346236](346240 'deref'(346241 '_wide_get_locale'(346243 call(413883 call . this[347312] c"locArr") localeIdx[346311]))))
          {
            { unknown arr[346251](346253 call(413889 call . this[347312] c"locArr") localeIdx[346311])(346256 'end of statement')
              if(346258 call _cond_test deinitElts[346159])
              {(346263 call _deinitElements(346265 call .(346267 call postfix! arr[346251]) c"myElems"))
              }(346280 call(346272 call .(346274 call .(346276 call postfix! arr[346251]) c"myElems") c"dsiElementDeinitializationComplete"))(346282 call chpl__delete arr[346251])
            }(346287 call _downEndCount _coforallCount[346285] nil[44])(346246 'coforall on block' 0 tmp[346236])
          } label _continueLabel[346297] _indexOfInterest[346292] _iterator[346293]
        } label _breakLabel[346298]
        Defer
        {
          {(346337 call _endCountFree _coforallCount[346285])
          }
        }(346342 call _waitEndCount _coforallCount[346285] 0 numTasks[346286])
      }
      { const _coforallCount[346354] "const" "end count" "temp"(346410 'move' _coforallCount[346354](346407 call _endCountAlloc 0)) unknown _indexOfInterest[346361] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346362] "expr temp" "temp"(346371 'move' _iterator[346362](346369 call _getIterator tmpIter[346230]))
        Defer
        {
          {(346387 call _freeIterator _iterator[346362])
          }
        }
        { scopeless type(346376 'move' _indexOfInterest[346361](346373 call iteratorIndex _iterator[346362]))
        }
        ForLoop[346363]
        { unknown localeIdx[346380] "coforall index var" "index var" "insert auto destroy"(346382 'move' localeIdx[346380] _indexOfInterest[346361])(346394 call _upEndCount _coforallCount[346354] 0) const tmp[346221] "const" "temp"(346223 'move' tmp[346221](346219 'deref'(346218 '_wide_get_locale'(346175 call(413867 call . this[347312] c"locArr") localeIdx[346380]))))
          {
            { unknown arr[346180](346179 call(413873 call . this[347312] c"locArr") localeIdx[346380])(346183 'end of statement')
              if(346196 call _cond_test deinitElts[346159])
              {(346194 call _deinitElements(346190 call .(346188 call postfix! arr[346180]) c"myElems"))
              }(346211 call(346207 call .(346204 call .(346202 call postfix! arr[346180]) c"myElems") c"dsiElementDeinitializationComplete"))(346215 call chpl__delete arr[346180])
            }(346356 call _downEndCount _coforallCount[346354] nil[44])(346226 'coforall on block' 0 tmp[346221])
          } label _continueLabel[346366] _indexOfInterest[346361] _iterator[346362]
        } label _breakLabel[346367]
        Defer
        {
          {(346398 call _endCountFree _coforallCount[346354])
          }
        }(346403 call _waitEndCount _coforallCount[346354] 0)
      }
    }
  } function SparseBlockArr[347294](?).these[346437](arg _mt[347318]:_MT[238], arg this[347316]:SparseBlockArr[347294](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346520] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346521] "expr temp" "temp"(346530 'move' _iterator[346521](346528 call _getIterator(346444 call .(346441 call .(366759 call . this[347316] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(346547 call _freeIterator _iterator[346521])
        }
      }
      { scopeless type(346536 'move' _indexOfInterest[346520](346533 call iteratorIndex _iterator[346521]))
      }
      ForLoop[346522]
      { unknown locI[346540] "index var" "insert auto destroy"(346542 'move' locI[346540] _indexOfInterest[346520])
        { unknown locDom[346456](346454 call postfix!(346453 call(346448 call .(366764 call . this[347316] c"dom") c"locDoms") locI[346540]))(346459 'end of statement') unknown locArrI[346467](346465 call postfix!(346464 call(413900 call . this[347316] c"locArr") locI[346540]))(346470 'end of statement')
          { unknown _indexOfInterest[346486] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346487] "expr temp" "temp"(346496 'move' _iterator[346487](346494 call _getIterator(346473 call . locDom[346456] c"mySparseBlock")))
            Defer
            {
              {(346513 call _freeIterator _iterator[346487])
              }
            }
            { scopeless type(346502 'move' _indexOfInterest[346486](346499 call iteratorIndex _iterator[346487]))
            }
            ForLoop[346488]
            { unknown x[346506] "index var" "insert auto destroy"(346508 'move' x[346506] _indexOfInterest[346486])
              {(346483 yield(346482 call(346477 call . locArrI[346467] c"myElems") x[346506]))
              } label _continueLabel[346491] _indexOfInterest[346486] _iterator[346487]
            } label _breakLabel[346492]
          }
        } label _continueLabel[346525] _indexOfInterest[346520] _iterator[346521]
      } label _breakLabel[346526]
    }
  } function SparseBlockArr[347294](?).these[346563](arg _mt[347322]:_MT[238], arg this[347320]:SparseBlockArr[347294](?), param arg tag[346560] : iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[346583] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346584] "expr temp" "temp"(346593 'move' _iterator[346584](346591 call _getIterator(346579 call(346574 call .(366772 call . this[347320] c"dom") c"these") tag[346560])))
      Defer
      {
        {(346610 call _freeIterator _iterator[346584])
        }
      }
      { scopeless type(346599 'move' _indexOfInterest[346583](346596 call iteratorIndex _iterator[346584]))
      }
      ForLoop[346585]
      { unknown followThis[346603] "index var" "insert auto destroy"(346605 'move' followThis[346603] _indexOfInterest[346583])(346581 yield followThis[346603]) label _continueLabel[346588] _indexOfInterest[346583] _iterator[346584]
      } label _breakLabel[346589]
    }
  }
  {(346570 call == tag[346560] leader[447])
  } function SparseBlockArr[347294](?).these[346627](arg _mt[347326]:_MT[238], arg this[347324]:SparseBlockArr[347294](?), param arg tag[346624] : iterKind[453], arg followThis[346629]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[346644] "temp" followThis[346629](346651 call _check_tuple_var_decl tmp[346644] 2) unknown locFollowThis[346638](346645 call tmp[346644] 0) unknown localeIndex[346640](346648 call tmp[346644] 1)(346656 'end of statement')
    { unknown _indexOfInterest[346685] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346686] "expr temp" "temp"(346695 'move' _iterator[346686](346693 call _getIterator(346669 call(346663 call .(346662 call locFollowThis[346638] 0) c"these") tag[346624] locFollowThis[346638])))
      Defer
      {
        {(346712 call _freeIterator _iterator[346686])
        }
      }
      { scopeless type(346701 'move' _indexOfInterest[346685](346698 call iteratorIndex _iterator[346686]))
      }
      ForLoop[346687]
      { unknown i[346705] "index var" "insert auto destroy"(346707 'move' i[346705] _indexOfInterest[346685])
        {(346682 yield(346681 call(346676 call .(346674 call postfix!(346673 call(413917 call . this[347324] c"locArr") localeIndex[346640])) c"dsiAccess") i[346705]))
        } label _continueLabel[346690] _indexOfInterest[346685] _iterator[346686]
      } label _breakLabel[346691]
    }
  }
  {(346636 call == tag[346624] follower[449])
  } function SparseBlockArr[347294](?).these[346728](arg _mt[347330]:_MT[238], arg this[347328]:SparseBlockArr[347294](?), param arg tag[346725] : iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[346790] "expr temp" "maybe ref" "no copy" "temp"(346793 'move' tmpIter[346790](413932 call . this[347328] c"locArr")) unknown isRngDomArr[346949] "maybe param" "temp"(346964 'move' isRngDomArr[346949](346962 call ||(346951 call isBoundedRange tmpIter[346790])(346960 call ||(346954 call isDomain tmpIter[346790])(346957 call isArray tmpIter[346790]))))
      if isRngDomArr[346949]
      { const _coforallCount[346821] "const" "end count" "temp"(346886 'move' _coforallCount[346821](346883 call _endCountAlloc 0)) unknown numTasks[346822] "temp"(346870 'move' numTasks[346822](346866 call . tmpIter[346790] c"size"))(346861 call _upEndCount _coforallCount[346821] 0 numTasks[346822]) unknown _indexOfInterest[346828] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346829] "expr temp" "temp"(346838 'move' _iterator[346829](346836 call _getIterator tmpIter[346790]))
        Defer
        {
          {(346854 call _freeIterator _iterator[346829])
          }
        }
        { scopeless type(346843 'move' _indexOfInterest[346828](346840 call iteratorIndex _iterator[346829]))
        }
        ForLoop[346830]
        { unknown locA[346847] "coforall index var" "index var" "insert auto destroy"(346849 'move' locA[346847] _indexOfInterest[346828]) const tmp[346796] "const" "temp"(346798 'move' tmp[346796](346800 'deref'(346801 '_wide_get_locale' locA[346847])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346812] "index var" "insert auto destroy"
                iterated expressions:
                  (346815 call .(346817 call postfix! locA[346847]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346809 yield i[346812])
                }
              }
            }(346823 call _downEndCount _coforallCount[346821] nil[44])(346804 'coforall on block' 0 tmp[346796])
          } label _continueLabel[346833] _indexOfInterest[346828] _iterator[346829]
        } label _breakLabel[346834]
        Defer
        {
          {(346873 call _endCountFree _coforallCount[346821])
          }
        }(346878 call _waitEndCount _coforallCount[346821] 0 numTasks[346822])
      }
      { const _coforallCount[346890] "const" "end count" "temp"(346946 'move' _coforallCount[346890](346943 call _endCountAlloc 0)) unknown _indexOfInterest[346897] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[346898] "expr temp" "temp"(346907 'move' _iterator[346898](346905 call _getIterator tmpIter[346790]))
        Defer
        {
          {(346923 call _freeIterator _iterator[346898])
          }
        }
        { scopeless type(346912 'move' _indexOfInterest[346897](346909 call iteratorIndex _iterator[346898]))
        }
        ForLoop[346899]
        { unknown locA[346916] "coforall index var" "index var" "insert auto destroy"(346918 'move' locA[346916] _indexOfInterest[346897])(346930 call _upEndCount _coforallCount[346890] 0) const tmp[346782] "const" "temp"(346784 'move' tmp[346782](346780 'deref'(346779 '_wide_get_locale' locA[346916])))
          {
            {
              Forall {
                induction variables:
                  unknown i[346774] "index var" "insert auto destroy"
                iterated expressions:
                  (346766 call .(346764 call postfix! locA[346916]) c"myElems")
                shadow variables:
                other variables
                  forall body
                {(346770 yield i[346774])
                }
              }
            }(346892 call _downEndCount _coforallCount[346890] nil[44])(346787 'coforall on block' 0 tmp[346782])
          } label _continueLabel[346902] _indexOfInterest[346897] _iterator[346898]
        } label _breakLabel[346903]
        Defer
        {
          {(346934 call _endCountFree _coforallCount[346890])
          }
        }(346939 call _waitEndCount _coforallCount[346890] 0)
      }
    }
  }
  {(346757 call &&(346735 call == tag[346725] standalone[451])(346756 'method call resolves'(346751 call .(346748 call .(346746 call postfix!(346745 call(413926 call . this[347328] c"locArr")(346741 call .(366779 call . this[347328] c"locArrDom") c"low"))) c"myElems") c"_value") "these" tag[346725]))
  } function SparseBlockArr[347294](?).dsiAccess[346981](arg _mt[347334]:_MT[238], arg this[347332]:SparseBlockArr[347294](?), arg i[346978] :(346976 call *(413943 call . this[347332] c"rank")(413948 call . this[347332] c"idxType"))) ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347016 call _cond_test(347002 call &&(346985 call !=(413953 call . this[347332] c"myLocArr") nil[44])(347001 call(346996 call .(346993 call .(346990 call .(346988 call postfix!(413958 call . this[347332] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[346978])))
        {(347013 return(347012 call(347007 call .(347005 call postfix!(413964 call . this[347332] c"myLocArr")) c"dsiAccess") i[346978]))
        }
      }(347023 'local block')
    }(347046 return(347045 call(347040 call .(347038 call postfix!(347037 call(413970 call . this[347332] c"locArr")(347035 call(347030 call .(347027 call .(366784 call . this[347332] c"dom") c"dist") c"targetLocsIdx") i[346978]))) c"dsiAccess") i[346978]))
  } function SparseBlockArr[347294](?).dsiAccess[347059](arg _mt[347338]:_MT[238], arg this[347336]:SparseBlockArr[347294](?), arg i[347056] :(347054 call *(413977 call . this[347336] c"rank")(413982 call . this[347336] c"idxType"))) : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347098 call _cond_test(347084 call &&(347067 call !=(413992 call . this[347336] c"myLocArr") nil[44])(347083 call(347078 call .(347075 call .(347072 call .(347070 call postfix!(413997 call . this[347336] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[347056])))
        {(347095 return(347094 call(347089 call .(347087 call postfix!(414003 call . this[347336] c"myLocArr")) c"dsiAccess") i[347056]))
        }
      }(347105 'local block')
    }(347128 return(347127 call(347122 call .(347120 call postfix!(347119 call(414009 call . this[347336] c"locArr")(347117 call(347112 call .(347109 call .(366789 call . this[347336] c"dom") c"dist") c"targetLocsIdx") i[347056]))) c"dsiAccess") i[347056]))
  }
  {(347064 call shouldReturnRvalueByValue(413987 call . this[347336] c"eltType"))
  } function SparseBlockArr[347294](?).dsiAccess[347142](arg _mt[347342]:_MT[238], arg this[347340]:SparseBlockArr[347294](?), arg i[347139] :(347137 call *(414016 call . this[347340] c"rank")(414021 call . this[347340] c"idxType"))) const ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347181 call _cond_test(347167 call &&(347150 call !=(414031 call . this[347340] c"myLocArr") nil[44])(347166 call(347161 call .(347158 call .(347155 call .(347153 call postfix!(414036 call . this[347340] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[347139])))
        {(347178 return(347177 call(347172 call .(347170 call postfix!(414042 call . this[347340] c"myLocArr")) c"dsiAccess") i[347139]))
        }
      }(347188 'local block')
    }(347211 return(347210 call(347205 call .(347203 call postfix!(347202 call(414048 call . this[347340] c"locArr")(347200 call(347195 call .(347192 call .(366794 call . this[347340] c"dom") c"dist") c"targetLocsIdx") i[347139]))) c"dsiAccess") i[347139]))
  }
  {(347147 call shouldReturnRvalueByConstRef(414026 call . this[347340] c"eltType"))
  } function SparseBlockArr[347294](?).dsiAccess[347224](arg _mt[347346]:_MT[238], arg this[347344]:SparseBlockArr[347294](?), arg i[347220] ... :(414055 call . this[347344] c"idxType")) ref : _unknown[51] "method" "primary method"
  {(347230 return(347229 call(414064 call . this[347344] c"dsiAccess") i[347220]))
  } function SparseBlockArr[347294](?).dsiAccess[347243](arg _mt[347350]:_MT[238], arg this[347348]:SparseBlockArr[347294](?), arg i[347239] ... :(414070 call . this[347348] c"idxType")) : _unknown[51] "method" "primary method"
  {(347253 return(347252 call(414084 call . this[347348] c"dsiAccess") i[347239]))
  }
  {(347248 call shouldReturnRvalueByValue(414080 call . this[347348] c"eltType"))
  } function SparseBlockArr[347294](?).dsiAccess[347267](arg _mt[347354]:_MT[238], arg this[347352]:SparseBlockArr[347294](?), arg i[347263] ... :(414090 call . this[347352] c"idxType")) const ref : _unknown[51] "method" "primary method"
  {(347277 return(347276 call(414104 call . this[347352] c"dsiAccess") i[347263]))
  }
  {(347272 call shouldReturnRvalueByConstRef(414100 call . this[347352] c"eltType"))
  } function SparseBlockArr[347294](?).dsiGetBaseDom[347285](arg _mt[347358]:_MT[238], arg this[347356]:SparseBlockArr[347294](?)) : _unknown[51] "method" "primary method" "method overrides"
  {(347288 return(414110 call . this[347356] c"dom"))
  } type SparseBlockArr[347294](?) val super[355915]:BaseSparseArr[149900](?) "super class" unknown stridable[345262] "param" bool[10] unknown sparseLayoutType[345268] "type variable" unmanaged DefaultDist[415560] unknown locArrDom[345277](345275 call chpl__buildDomainRuntimeType defaultDist[94053] rank[149871] idxType[149875]) unknown locArr[345297](345295 call chpl__buildArrayRuntimeType(345293 call chpl__ensureDomainExpr locArrDom[345277])(345290 call unmanaged LocSparseBlockArr?[415686](?) eltType[149714] rank[149871] idxType[149875] stridable[345262] sparseLayoutType[345268])) unknown myLocArr[345311](345308 call unmanaged LocSparseBlockArr?[415686](?) eltType[149714] rank[149871] idxType[149875] stridable[345262] sparseLayoutType[345268]) type SparseBlockArr[413539](?) function LocSparseBlockArr[347603](?).init[347411](arg _mt[347607]:_MT[238], arg this[347605]:LocSparseBlockArr[347603](?), arg eltType[347409]:_any[178](?), param arg rank[347414] : int(64)[13], arg idxType[347417]:_any[178](?), param arg stridable[347420] : bool[10], arg sparseLayoutType[347423]:_any[178](?), const arg locDom[347433] :(347431 call unmanaged LocSparseBlockDom[415689](?) rank[347414] idxType[347417] stridable[347420] sparseLayoutType[347423]), param arg initElts[347437] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(347445 call =(347441 call . this[347605] c"eltType") eltType[347409])(347454 call =(347450 call . this[347605] c"rank") rank[347414])(347462 call =(347458 call . this[347605] c"idxType") idxType[347417])(347470 call =(347466 call . this[347605] c"stridable") stridable[347420])(347478 call =(347474 call . this[347605] c"sparseLayoutType") sparseLayoutType[347423])(347486 call =(347482 call . this[347605] c"locDom") locDom[347433])(347505 call =(347490 call . this[347605] c"myElems")(347504 call(347497 call .(347494 call . locDom[347433] c"mySparseBlock") c"buildArray") eltType[347409](initElts = initElts[347437])))
  } function LocSparseBlockArr[347603](?).deinit[347512](arg _mt[347611]:_MT[238], arg this[347609]:LocSparseBlockArr[347603](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  } function LocSparseBlockArr[347603](?).dsiAccess[347521](arg _mt[347615]:_MT[238], arg this[347613]:LocSparseBlockArr[347603](?), arg i[347519]:_any[178](?)) ref : _unknown[51] "method" "primary method"
  {(347527 return(347526 call(414134 call . this[347613] c"myElems") i[347519]))
  } function LocSparseBlockArr[347603](?).dsiAccess[347536](arg _mt[347619]:_MT[238], arg this[347617]:LocSparseBlockArr[347603](?), arg i[347534]:_any[178](?)) : _unknown[51] "method" "primary method"
  {(347546 return(347545 call(414145 call . this[347617] c"myElems") i[347534]))
  }
  {(347541 call shouldReturnRvalueByValue(414140 call . this[347617] c"eltType"))
  } function LocSparseBlockArr[347603](?).dsiAccess[347556](arg _mt[347623]:_MT[238], arg this[347621]:LocSparseBlockArr[347603](?), arg i[347554]:_any[178](?)) const ref : _unknown[51] "method" "primary method"
  {(347566 return(347565 call(414156 call . this[347621] c"myElems") i[347554]))
  }
  {(347561 call shouldReturnRvalueByConstRef(414151 call . this[347621] c"eltType"))
  } function LocSparseBlockArr[347603](?).writeThis[347576](arg _mt[347627]:_MT[238], arg this[347625]:LocSparseBlockArr[347603](?), arg f[347574]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(347597 call halt "LocSparseBlockArr.writeThis() is not implemented / should not be needed")
  } type LocSparseBlockArr[347603](?) val super[355917]:object[22] "super class" unknown eltType[347362] "type variable" unknown rank[347366] "param" int(64)[13] unknown idxType[347370] "type variable" unknown stridable[347374] "param" bool[10] unknown sparseLayoutType[347378] "type variable" const locDom[347389] "const"(347387 call unmanaged LocSparseBlockDom[415689](?) rank[347366] idxType[347370] stridable[347374] sparseLayoutType[347378]) unknown myElems[347403] "local field" "unsafe"(347401 call chpl__buildArrayRuntimeType(347399 call chpl__ensureDomainExpr(347394 call . locDom[347389] c"mySparseBlock")) eltType[347362]) type unmanaged LocSparseBlockArr?[415686](?) type LocSparseBlockArr?[415683](?) type LocSparseBlockArr[413700](?) function SparseBlockArr[347294](?).dsiSerialWrite[347635](arg _mt[347640]:_MT[238], arg this[347637]:SparseBlockArr[347294](?) : SparseBlockArr[347294](?), arg f[347633]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(347744 call _cond_test(347644 call ==(414162 call . this[347637] c"rank") 1))
    {(347648 call <~> f[347633] "[")
      { unknown _indexOfInterest[347684] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347685] "expr temp" "temp"(347694 'move' _iterator[347685](347692 call _getIterator(414168 call . this[347637] c"locArr")))
        Defer
        {
          {(347710 call _freeIterator _iterator[347685])
          }
        }
        { scopeless type(347699 'move' _indexOfInterest[347684](347696 call iteratorIndex _iterator[347685]))
        }
        ForLoop[347686]
        { unknown locarr[347703] "index var" "insert auto destroy"(347705 'move' locarr[347703] _indexOfInterest[347684])
          {
            if(347679 call _cond_test(347660 call .(347657 call .(347655 call postfix! locarr[347703]) c"locDom") c"dsiNumIndices"))
            {(347665 call <~> f[347633] " ")(347677 call(347672 call .(347670 call postfix! locarr[347703]) c"dsiSerialWrite") f[347633])
            }
          } label _continueLabel[347689] _indexOfInterest[347684] _iterator[347685]
        } label _breakLabel[347690]
      }(347719 call <~> f[347633] "]")
    }
    {(347741 call compilerError "Can't write out multidimensional sparse distributed arrays yet")
    }
  } function LocSparseBlockArr[347603](?).dsiSerialWrite[347756](arg _mt[347761]:_MT[238], arg this[347758]:LocSparseBlockArr[347603](?) : LocSparseBlockArr[347603](?), arg f[347754]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(347772 call(347767 call .(347764 call .(366808 call . this[347758] c"myElems") c"_value") c"dsiSerialWrite") f[347754])
  } function SparseBlockDom[344966](?).dsiSupportsPrivatization[347780](arg _mt[347785]:_MT[238], arg this[347782]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?)) param : _unknown[51] "method" "method overrides"
  {(347788 return 1)
  } function SparseBlockDom[344966](?).dsiGetPrivatizeData[347796](arg _mt[347801]:_MT[238], arg this[347798]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?)) : _unknown[51] "method"
  {(347816 return(347814 call _build_tuple(347804 call .(366813 call . this[347798] c"dist") c"pid")(347812 call(347808 call .(366818 call . this[347798] c"whole") c"dims"))))
  } function SparseBlockDom[344966](?).dsiPrivatize[347826](arg _mt[347831]:_MT[238], arg this[347828]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?), arg privatizeData[347824]:_any[178](?)) : _unknown[51] "method"
  { unknown privdist[347842](347841 call chpl_getPrivatizedCopy(347835 'typeof'(414179 call . this[347828] c"dist"))(347840 call privatizeData[347824] 0))(347845 'end of statement') unknown c[347870](347849 'new'(_chpl_manager = unmanaged[220](?))(347869 call SparseBlockDom[409353](?)(rank =(414186 call . this[347828] c"rank"))(idxType =(414191 call . this[347828] c"idxType"))(sparseLayoutType =(414196 call . this[347828] c"sparseLayoutType"))(stridable =(347859 call .(366823 call . this[347828] c"parentDom") c"stridable"))(dist = privdist[347842])(whole =(414202 call . this[347828] c"whole"))(parentDom =(414207 call . this[347828] c"parentDom"))))(347873 'end of statement')
    { unknown _indexOfInterest[347935] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[347936] "expr temp" "temp"(347945 'move' _iterator[347936](347943 call _getIterator(347879 call .(347876 call . c[347870] c"dist") c"targetLocDom")))
      Defer
      {
        {(347962 call _freeIterator _iterator[347936])
        }
      }
      { scopeless type(347951 'move' _indexOfInterest[347935](347948 call iteratorIndex _iterator[347936]))
      }
      ForLoop[347937]
      { unknown i[347955] "index var" "insert auto destroy"(347957 'move' i[347955] _indexOfInterest[347935])
        {(347893 call =(347888 call(347883 call . c[347870] c"locDoms") i[347955])(347892 call(414213 call . this[347828] c"locDoms") i[347955]))
          if(347930 call _cond_test(347912 call ==(347907 '_wide_get_node'(347903 call(347898 call . c[347870] c"locDoms") i[347955]))(347909 call .(366829 call here[90438]) c"id")))
          {(347927 call =(347917 call . c[347870] c"myLocDom")(347926 call(347921 call . c[347870] c"locDoms") i[347955]))
          }
        } label _continueLabel[347940] _indexOfInterest[347935] _iterator[347936]
      } label _breakLabel[347941]
    }(347981 call =(347970 call . c[347870] c"whole")(347979 call chpl__buildDomainExpr(347977 'expand_tuple'(347976 call privatizeData[347824] 1))))(347985 return c[347870])
  } function SparseBlockDom[344966](?).dsiGetReprivatizeData[347992](arg _mt[347997]:_MT[238], arg this[347994]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?)) : _unknown[51] "method"
  {(348005 return(348004 call(348000 call .(366836 call . this[347994] c"whole") c"dims")))
  } function SparseBlockDom[344966](?).dsiReprivatize[348015](arg _mt[348022]:_MT[238], arg this[348019]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?), arg other[348013]:_any[178](?), arg reprivatizeData[348017]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    { unknown _indexOfInterest[348043] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348044] "expr temp" "temp"(348053 'move' _iterator[348044](348051 call _getIterator(348026 call .(366841 call . this[348019] c"dist") c"targetLocDom")))
      Defer
      {
        {(348070 call _freeIterator _iterator[348044])
        }
      }
      { scopeless type(348059 'move' _indexOfInterest[348043](348056 call iteratorIndex _iterator[348044]))
      }
      ForLoop[348045]
      { unknown i[348063] "index var" "insert auto destroy"(348065 'move' i[348063] _indexOfInterest[348043])(348040 call =(348032 call(414223 call . this[348019] c"locDoms") i[348063])(348039 call(348034 call . other[348013] c"locDoms") i[348063])) label _continueLabel[348048] _indexOfInterest[348043] _iterator[348044]
      } label _breakLabel[348049]
    }(348084 call =(414230 call . this[348019] c"whole")(348082 call chpl__buildDomainExpr(348080 'expand_tuple' reprivatizeData[348017])))
  } function SparseBlockArr[347294](?).dsiSupportsPrivatization[348092](arg _mt[348097]:_MT[238], arg this[348094]:SparseBlockArr[347294](?) : SparseBlockArr[347294](?)) param : _unknown[51] "method" "method overrides"
  {(348100 return 1)
  } function SparseBlockArr[347294](?).dsiGetPrivatizeData[348108](arg _mt[348113]:_MT[238], arg this[348110]:SparseBlockArr[347294](?) : SparseBlockArr[347294](?)) : _unknown[51] "method"
  {(348119 return(348116 call .(366847 call . this[348110] c"dom") c"pid"))
  } function SparseBlockArr[347294](?).dsiPrivatize[348129](arg _mt[348134]:_MT[238], arg this[348131]:SparseBlockArr[347294](?) : SparseBlockArr[347294](?), arg privatizeData[348127]:_any[178](?)) : _unknown[51] "method"
  { unknown privdom[348142](348141 call chpl_getPrivatizedCopy(348138 'typeof'(414236 call . this[348131] c"dom")) privatizeData[348127])(348145 'end of statement') unknown c[348165](348149 'new'(_chpl_manager = unmanaged[220](?))(348164 call SparseBlockArr[413539](?)(sparseLayoutType =(414243 call . this[348131] c"sparseLayoutType"))(eltType =(414248 call . this[348131] c"eltType"))(rank =(414253 call . this[348131] c"rank"))(idxType =(414258 call . this[348131] c"idxType"))(stridable =(414263 call . this[348131] c"stridable"))(dom = privdom[348142])))(348168 'end of statement')
    { unknown _indexOfInterest[348233] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348234] "expr temp" "temp"(348243 'move' _iterator[348234](348241 call _getIterator(348177 call .(348174 call .(348171 call . c[348165] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(348260 call _freeIterator _iterator[348234])
        }
      }
      { scopeless type(348249 'move' _indexOfInterest[348233](348246 call iteratorIndex _iterator[348234]))
      }
      ForLoop[348235]
      { unknown localeIdx[348253] "index var" "insert auto destroy"(348255 'move' localeIdx[348253] _indexOfInterest[348233])
        {(348191 call =(348186 call(348181 call . c[348165] c"locArr") localeIdx[348253])(348190 call(414270 call . this[348131] c"locArr") localeIdx[348253]))
          if(348228 call _cond_test(348212 call ==(348207 '_wide_get_node'(348202 call postfix!(348201 call(348196 call . c[348165] c"locArr") localeIdx[348253])))(348209 call .(366853 call here[90438]) c"id")))
          {(348225 call =(348215 call . c[348165] c"myLocArr")(348224 call(348219 call . c[348165] c"locArr") localeIdx[348253]))
          }
        } label _continueLabel[348238] _indexOfInterest[348233] _iterator[348234]
      } label _breakLabel[348239]
    }(348268 return c[348165])
  } function SparseBlockDom[344966](?).numRemoteElems[348277](arg _mt[348284]:_MT[238], arg this[348281]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?), arg rlo[348275]:_any[178](?), arg rid[348279]:_any[178](?)) : _unknown[51] "method"
  { unknown blo[348286](348290 call .(366859 call . this[348281] c"dist") c"idxType") unknown bhi[348293](348297 'typeof' blo[348286])(348298 'end of statement')
    if(348426 call _cond_test(348320 call == rid[348279](348318 call -(348314 call .(348313 call(348305 call .(348302 call .(366864 call . this[348281] c"dist") c"targetLocDom") c"dim")(348310 call -(414281 call . this[348281] c"rank") 1)) c"size") 1)))
    {(348336 call = bhi[348293](348333 call .(348332 call(348324 call .(366869 call . this[348281] c"whole") c"dim")(348329 call -(414287 call . this[348281] c"rank") 1)) c"high"))
    }
    {(348423 call = bhi[348293](348421 call -(348418 call +(348353 call .(348352 call(348344 call .(348341 call .(366874 call . this[348281] c"dist") c"boundingBox") c"dim")(348349 call -(414293 call . this[348281] c"rank") 1)) c"low")(348417 call intCeilXDivByY(348398 call *(348392 call +(348389 call -(348370 call .(348369 call(348361 call .(348358 call .(366879 call . this[348281] c"dist") c"boundingBox") c"dim")(348366 call -(414298 call . this[348281] c"rank") 1)) c"high")(348386 call .(348385 call(348377 call .(348374 call .(366884 call . this[348281] c"dist") c"boundingBox") c"dim")(348382 call -(414303 call . this[348281] c"rank") 1)) c"low")) 1)(348396 call + rid[348279] 1))(348414 call .(348413 call(348405 call .(348402 call .(366889 call . this[348281] c"dist") c"targetLocDom") c"dim")(348410 call -(414309 call . this[348281] c"rank") 1)) c"size"))) 1))
    }(348439 return(348437 call +(348434 call - bhi[348293] rlo[348275]) 1))
  } function SparseBlockDom[344966](?).dsiHasSingleLocalSubdomain[348446](arg _mt[348451]:_MT[238], arg this[348448]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?)) param : _unknown[51] "method"
  {(348454 return 1)
  } function SparseBlockArr[347294](?).dsiHasSingleLocalSubdomain[348462](arg _mt[348467]:_MT[238], arg this[348464]:SparseBlockArr[347294](?) : SparseBlockArr[347294](?)) param : _unknown[51] "method"
  {(348470 return 1)
  } function SparseBlockDom[344966](?).dsiLocalSubdomain[348482](arg _mt[348487]:_MT[238], arg this[348484]:SparseBlockDom[344966](?) : SparseBlockDom[344966](?), arg loc[348479] : locale[28]) : _unknown[51] "method"
  {
    if(348531 call _cond_test(348491 call != loc[348479](414315 call here[90438])))
    {(348529 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    } const tmp[348552] "const" "temp"(348551 call(348546 call .(348543 call .(366894 call . this[348484] c"dist") c"targetLocales") c"find")(414317 call here[90438]))(348559 call _check_tuple_var_decl tmp[348552] 2) const found[348537] "const"(348553 call tmp[348552] 0) const targetIdx[348539] "const"(348556 call tmp[348552] 1)(348564 'end of statement')(348574 return(348571 call .(348569 call postfix!(348568 call(414321 call . this[348484] c"locDoms") targetIdx[348539])) c"mySparseBlock"))
  } function SparseBlockArr[347294](?).dsiLocalSubdomain[348585](arg _mt[348590]:_MT[238], arg this[348587]:SparseBlockArr[347294](?) : SparseBlockArr[347294](?), arg loc[348582] : locale[28]) : _unknown[51] "method"
  {
    if(348602 call _cond_test(348594 call != loc[348582](414326 call here[90438])))
    {(348600 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    }(348617 return(348614 call .(348611 call .(348609 call postfix!(414330 call . this[348587] c"myLocArr")) c"locDom") c"mySparseBlock"))
  }(355697 'used modules list'(353189 'use' ChapelStandard[20267])(341994 'use' DSIUtil[230976])(341997 'use' ChapelUtil[166964])(342000 'use' BlockDist[331404])(342003 'use' RangeChunk[266546])(342006 'use' HaltWrappers[210085])(342009 'use' LayoutCS[341990]))
}