AST dump for ReplicatedDist after pass scopeResolve.
Module use list: ChapelStandard 

{ unknown traceReplicatedDist[348516] "config" "param" 0(348519 'end of statement') type Replicated[348548] val super[355808]:BaseDist[145926] "super class" unknown targetLocDom[348532](348530 call chpl__buildDomainRuntimeType defaultDist[94050](348527 'typeof'(348524 call .(366786 call here[90435]) c"id"))) const targetLocales[348543] "const"(348541 call chpl__buildArrayRuntimeType(348539 call chpl__ensureDomainExpr targetLocDom[348532]) locale[28]) type unmanaged Replicated[415576] type Replicated[411150](?) function Replicated[348548].init[348563](arg _mt[348590]:_MT[238], arg this[348587]:Replicated[348548] : Replicated[348548], arg targetLocales[348559] :(348555 call chpl__buildArrayRuntimeType nil[44] locale[28]) = Locales[113656], arg purposeMessage[348583] : string[26] = "used to create a Replicated") : _unknown[51] "method" "no return value for void"
  {(348597 call(348593 call . this[348587] c"complete"))
    { unknown _indexOfInterest[348631] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348632] "expr temp" "temp"(348641 'move' _iterator[348632](348639 call _getIterator targetLocales[348559]))
      Defer
      {
        {(348657 call _freeIterator _iterator[348632])
        }
      }
      { scopeless type(348646 'move' _indexOfInterest[348631](348643 call iteratorIndex _iterator[348632]))
      }
      ForLoop[348633]
      { unknown loc[348650] "index var" "insert auto destroy"(348652 'move' loc[348650] _indexOfInterest[348631])
        {(348614 call(348606 call .(348603 call . this[348587] c"targetLocDom") c"add")(348610 call . loc[348650] c"id"))(348628 call =(348626 call(348618 call . this[348587] c"targetLocales")(348622 call . loc[348650] c"id")) loc[348650])
        } label _continueLabel[348636] _indexOfInterest[348631] _iterator[348632]
      } label _breakLabel[348637]
    }
    if(348687 call _cond_test traceReplicatedDist[348516])
    {(348685 call writeln "Replicated initializer over " targetLocales[348559])
    }
  } function Replicated[348548].dsiEqualDMaps[348704](arg _mt[348709]:_MT[238], arg this[348706]:Replicated[348548] : Replicated[348548], arg that[348701] :(348700 call Replicated[411150](?) ?[260])) : _unknown[51] "method"
  {(348724 return(348723 call(348715 call .(348712 call . this[348706] c"targetLocales") c"equals")(348719 call . that[348701] c"targetLocales")))
  } function Replicated[348548].dsiEqualDMaps[348734](arg _mt[348739]:_MT[238], arg this[348736]:Replicated[348548] : Replicated[348548], arg that[348732]:_any[178](?)) param : _unknown[51] "method"
  {(348742 return 0)
  } function Replicated[348548].dsiDestroyDist[348750](arg _mt[348755]:_MT[238], arg this[348752]:Replicated[348548] : Replicated[348548]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function Replicated[348548].dsiSupportsPrivatization[348763](arg _mt[348768]:_MT[238], arg this[348765]:Replicated[348548] : Replicated[348548]) param : _unknown[51] "method" "method overrides"
  {(348771 return 1)
  } function Replicated[348548].dsiGetPrivatizeData[348779](arg _mt[348784]:_MT[238], arg this[348781]:Replicated[348548] : Replicated[348548]) : _unknown[51] "method"
  {
    if(348808 call _cond_test traceReplicatedDist[348516])
    {(348806 call writeln "Replicated.dsiGetPrivatizeData")
    }(348815 return 0)
  } function Replicated[348548].dsiPrivatize[348824](arg _mt[348829]:_MT[238], arg this[348826]:Replicated[348548] : Replicated[348548], arg privatizeData[348822]:_any[178](?)) : _unknown[51] "method"
  {
    if(348854 call _cond_test traceReplicatedDist[348516])
    {(348852 call writeln "Replicated.dsiPrivatize on "(414227 call here[90435]))
    } const otherTargetLocales[348864] "const"(348861 call . this[348826] c"targetLocales")(348867 'end of statement') const privDom[348872] "const"(348869 call . otherTargetLocales[348864] c"_dom")(348875 'end of statement') const privTargetLocales[348884] "const" otherTargetLocales[348864](348881 call chpl__buildArrayRuntimeType(348879 call chpl__ensureDomainExpr privDom[348872]) locale[28])(348887 'end of statement') const nonNilWrapper[348910] "const"(348906 for  loc[348908]  in  otherTargetLocales[348864] do
    { loc[348908]
    } )(348901 call chpl__buildArrayRuntimeType(348899 call chpl__ensureDomainExpr(348895 call #(348889 call chpl_build_low_bounded_range 0)(348892 call . privTargetLocales[348884] c"size"))) locale[28])(348913 'end of statement')(348938 return(348916 'new'(_chpl_manager = unmanaged[220](?))(348937 call Replicated[411150](?) nonNilWrapper[348910] "used during privatization")))
  } function ReplicatedDom[349083](?).numReplicands[348985](arg _mt[349087]:_MT[238], arg this[349085]:ReplicatedDom[349083](?)) : _unknown[51] "method" "primary method" "no parens"
  {(348991 return(348988 call .(366801 call . this[349085] c"localDoms") c"size"))
  } function ReplicatedDom[349083](?).chpl_myLocDom[348998](arg _mt[349091]:_MT[238], arg this[349089]:ReplicatedDom[349083](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(349063 call _cond_test 1)
    {
      if(349058 call _cond_test(349014 call !(349013 call(349005 call .(349002 call .(366806 call . this[349089] c"dist") c"targetLocDom") c"contains")(349009 call .(366809 call here[90435]) c"id"))))
      {(349056 call halt "locale "(349036 call .(366811 call here[90435]) c"id") " has no local replicand")
      }
    }(349078 return(349076 call postfix!(349075 call(414251 call . this[349089] c"localDoms")(349071 call .(366813 call here[90435]) c"id"))))
  } type ReplicatedDom[349083](?) val super[355810]:BaseRectangularDom[146893](?) "super class" const dist[348947] "const" unmanaged Replicated[415576] unknown domRep[348958](348956 call chpl__buildDomainRuntimeType defaultDist[94050] rank[146812] idxType[146816] stridable[146820]) unknown localDoms[348979](348977 call chpl__buildArrayRuntimeType(348975 call chpl__ensureDomainExpr(348963 call . dist[348947] c"targetLocDom"))(348972 call unmanaged LocReplicatedDom?[415582](?) rank[146812] idxType[146816] stridable[146820])) type ReplicatedDom[414300](?) type LocReplicatedDom[349120](?) val super[355812]:object[22] "super class" unknown rank[349096] "param" int(64)[13] unknown idxType[349100] "type variable" unknown stridable[349104] "param" bool[10] unknown domLocalRep[349115](349113 call chpl__buildDomainRuntimeType defaultDist[94050] rank[349096] idxType[349100] stridable[349104]) type unmanaged LocReplicatedDom[415591](?) type unmanaged LocReplicatedDom?[415582](?) type LocReplicatedDom?[415579](?) type LocReplicatedDom[414242](?) function ReplicatedDom[349083](?).redirectee[349126](arg _mt[349131]:_MT[238], arg this[349128]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method"
  {(349141 return(414276 call . this[349128] c"domRep"))
  }
  { scopeless type(349138 call chpl__buildDomainRuntimeType defaultDist[94050](414260 call . this[349128] c"rank")(414265 call . this[349128] c"idxType")(414270 call . this[349128] c"stridable"))
  } function ReplicatedDom[349083](?).dsiMyDist[349150](arg _mt[349155]:_MT[238], arg this[349152]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "method overrides"
  {(349158 return(414281 call . this[349152] c"dist"))
  } function ReplicatedDom[349083](?).dsiSupportsPrivatization[349166](arg _mt[349171]:_MT[238], arg this[349168]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) param : _unknown[51] "method" "method overrides"
  {(349174 return 1)
  } type ReplicatedDomPrvData[349193](?) unknown distpid[349180] unknown domRep[349184] unknown localDoms[349188] function ReplicatedDom[349083](?).dsiGetPrivatizeData[349199](arg _mt[349204]:_MT[238], arg this[349201]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method"
  {
    if(349228 call _cond_test traceReplicatedDist[348516])
    {(349226 call writeln "ReplicatedDom.dsiGetPrivatizeData")
    }(349244 return(349234 'new'(349243 call ReplicatedDomPrvData[349193](?)(349237 call .(366817 call . this[349201] c"dist") c"pid")(414288 call . this[349201] c"domRep")(414293 call . this[349201] c"localDoms"))))
  } function ReplicatedDom[349083](?).dsiPrivatize[349253](arg _mt[349258]:_MT[238], arg this[349255]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg privatizeData[349251]:_any[178](?)) : _unknown[51] "method"
  {
    if(349283 call _cond_test traceReplicatedDist[348516])
    {(349281 call writeln "ReplicatedDom.dsiPrivatize on "(414297 call here[90435]))
    } unknown privdist[349301](349300 call chpl_getPrivatizedCopy(349294 'typeof'(349291 call . this[349255] c"dist"))(349297 call . privatizeData[349251] c"distpid"))(349304 'end of statement')(349333 return(349307 'new'(_chpl_manager = unmanaged[220](?))(349332 call ReplicatedDom[414300](?)(rank =(414305 call . this[349255] c"rank"))(idxType =(414310 call . this[349255] c"idxType"))(stridable =(414315 call . this[349255] c"stridable"))(dist = privdist[349301])(domRep =(349321 call . privatizeData[349251] c"domRep"))(localDoms =(349328 call . privatizeData[349251] c"localDoms")))))
  } function ReplicatedDom[349083](?).dsiGetReprivatizeData[349340](arg _mt[349345]:_MT[238], arg this[349342]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method"
  {(349348 return(414321 call . this[349342] c"domRep"))
  } function ReplicatedDom[349083](?).dsiReprivatize[349358](arg _mt[349365]:_MT[238], arg this[349362]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg other[349356]:_any[178](?), arg reprivatizeData[349360]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(349404 call assert(349401 call &&(349389 call &&(349377 call ==(349370 call . this[349362] c"rank")(349374 call . other[349356] c"rank"))(349387 call ==(349380 call . this[349362] c"idxType")(349384 call . other[349356] c"idxType")))(349399 call ==(349392 call . this[349362] c"stridable")(349396 call . other[349356] c"stridable"))))(349412 call =(349408 call . this[349362] c"domRep") reprivatizeData[349360])
  }
  { scopeless type void[4]
  } function Replicated[348548].dsiClone[349421](arg _mt[349426]:_MT[238], arg this[349423]:Replicated[348548] : Replicated[348548]) : _unknown[51] "method"
  {
    if(349455 call _cond_test traceReplicatedDist[348516])
    {(349453 call writeln "Replicated.dsiClone")
    } unknown nonNilWrapper[349483](349479 for  loc[349481]  in (414330 call . this[349423] c"targetLocales") do
    { loc[349481]
    } )(349474 call chpl__buildArrayRuntimeType(349472 call chpl__ensureDomainExpr(349468 call #(349462 call chpl_build_low_bounded_range 0)(349465 call .(366833 call . this[349423] c"targetLocales") c"size"))) locale[28])(349486 'end of statement')(349494 return(349489 'new'(_chpl_manager = unmanaged[220](?))(349493 call Replicated[411150](?) nonNilWrapper[349483])))
  }
  { scopeless type(349432 call _to_unmanaged(349430 'typeof' this[349423]))
  } function Replicated[348548].dsiNewRectangularDom[349506](arg _mt[349519]:_MT[238], arg this[349516]:Replicated[348548] : Replicated[348548], param arg rank[349503] : int(64)[13], arg idxType[349508]:_any[178](?), param arg stridable[349511] : bool[10], arg inds[349514]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349553 call _cond_test traceReplicatedDist[348516])
    {(349551 call writeln "Replicated.dsiNewRectangularDom "(349549 call _build_tuple rank[349503](349544 call _cast string[26] idxType[349508]) stridable[349511] inds[349514]))
    } unknown result[349576](349561 'new'(_chpl_manager = unmanaged[220](?))(349575 call ReplicatedDom[414300](?)(rank = rank[349503])(idxType = idxType[349508])(stridable = stridable[349511])(dist =(349573 call _to_unmanaged this[349516]))))(349579 'end of statement')
    { unknown tmpIter[349618] "expr temp" "maybe ref" "no copy" "temp"(349621 'move' tmpIter[349618](349591 call _build_tuple(414348 call . this[349516] c"targetLocales")(349588 call . result[349576] c"localDoms"))) unknown isRngDomArr[349804] "maybe param" "temp"(349819 'move' isRngDomArr[349804](349817 call ||(349806 call isBoundedRange tmpIter[349618])(349815 call ||(349809 call isDomain tmpIter[349618])(349812 call isArray tmpIter[349618]))))
      if isRngDomArr[349804]
      { const _coforallCount[349648] "const" "end count" "temp"(349727 'move' _coforallCount[349648](349724 call _endCountAlloc 0)) unknown numTasks[349649] "temp"(349711 'move' numTasks[349649](349707 call . tmpIter[349618] c"size"))(349702 call _upEndCount _coforallCount[349648] 0 numTasks[349649]) unknown _indexOfInterest[349655] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349656] "expr temp" "temp"(349665 'move' _iterator[349656](349663 call _getIteratorZip tmpIter[349618]))
        Defer
        {
          {(349695 call _freeIterator _iterator[349656])
          }
        }
        { scopeless type(349670 'move' _indexOfInterest[349655](349667 call iteratorIndex _iterator[349656]))
        }
        ForLoop[349657]
        {(349675 call _check_tuple_var_decl _indexOfInterest[349655] 2) unknown loc[349681] "coforall index var" "index var" "insert auto destroy"(349683 'move' loc[349681](349679 call _indexOfInterest[349655] 0)) unknown locDom[349688] "coforall index var" "index var" "insert auto destroy"(349690 'move' locDom[349688](349686 call _indexOfInterest[349655] 1)) const tmp[349624] "const" "temp"(349626 'move' tmp[349624](349628 'deref'(349629 '_wide_get_locale' loc[349681])))
          {(349637 call = locDom[349688](349639 'new'(_chpl_manager = unmanaged[220](?))(349643 call LocReplicatedDom[414242](?) rank[349503] idxType[349508] stridable[349511])))(349650 call _downEndCount _coforallCount[349648] nil[44])(349632 'coforall on block' 0 tmp[349624])
          } label _continueLabel[349660] _indexOfInterest[349655] _iterator[349656]
        } label _breakLabel[349661]
        Defer
        {
          {(349714 call _endCountFree _coforallCount[349648])
          }
        }(349719 call _waitEndCount _coforallCount[349648] 0 numTasks[349649])
      }
      { const _coforallCount[349731] "const" "end count" "temp"(349801 'move' _coforallCount[349731](349798 call _endCountAlloc 0)) unknown _indexOfInterest[349738] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349739] "expr temp" "temp"(349748 'move' _iterator[349739](349746 call _getIteratorZip tmpIter[349618]))
        Defer
        {
          {(349778 call _freeIterator _iterator[349739])
          }
        }
        { scopeless type(349753 'move' _indexOfInterest[349738](349750 call iteratorIndex _iterator[349739]))
        }
        ForLoop[349740]
        {(349758 call _check_tuple_var_decl _indexOfInterest[349738] 2) unknown loc[349764] "coforall index var" "index var" "insert auto destroy"(349766 'move' loc[349764](349762 call _indexOfInterest[349738] 0)) unknown locDom[349771] "coforall index var" "index var" "insert auto destroy"(349773 'move' locDom[349771](349769 call _indexOfInterest[349738] 1))(349785 call _upEndCount _coforallCount[349731] 0) const tmp[349609] "const" "temp"(349611 'move' tmp[349609](349607 'deref'(349606 '_wide_get_locale' loc[349764])))
          {(349603 call = locDom[349771](349596 'new'(_chpl_manager = unmanaged[220](?))(349602 call LocReplicatedDom[414242](?) rank[349503] idxType[349508] stridable[349511])))(349733 call _downEndCount _coforallCount[349731] nil[44])(349614 'coforall on block' 0 tmp[349609])
          } label _continueLabel[349743] _indexOfInterest[349738] _iterator[349739]
        } label _breakLabel[349744]
        Defer
        {
          {(349789 call _endCountFree _coforallCount[349731])
          }
        }(349794 call _waitEndCount _coforallCount[349731] 0)
      }
    }(349829 call(349824 call . result[349576] c"dsiSetIndices") inds[349514])(349832 return result[349576])
  } function Replicated[348548].dsiIndexToLocale[349841](arg _mt[349846]:_MT[238], arg this[349843]:Replicated[348548] : Replicated[348548], arg indexx[349839]:_any[178](?)) : _unknown[51] "method"
  {(349850 return(414365 call here[90435]))
  }
  { scopeless type locale[28]
  } function ReplicatedDom[349083](?).dsiSetIndices[349861](arg _mt[349866]:_MT[238], arg this[349863]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg x[349859]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(349910 call _cond_test traceReplicatedDist[348516])
    {(349908 call writeln "ReplicatedDom.dsiSetIndices on "(349904 call _cast string[26](349902 'typeof' x[349859])) ": " x[349859])
    }(349923 call(414373 call . this[349863] c"dsiSetIndices")(349920 call chpl__buildDomainExpr(349918 'expand_tuple' x[349859])))
  }
  {(349879 call &&(349871 call isTuple x[349859])(349878 call isRange(349876 call x[349859] 0)))
  } function ReplicatedDom[349083](?).dsiSetIndices[349935](arg _mt[349940]:_MT[238], arg this[349937]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg domArg[349932] : _domain[125902](?)) : _unknown[51] "method" "no return value for void"
  {
    if(349966 call _cond_test traceReplicatedDist[348516])
    {(349964 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg[349932])
    }(349974 call =(414382 call . this[349937] c"domRep") domArg[349932])
    { unknown tmpIter[350003] "expr temp" "maybe ref" "no copy" "temp"(350006 'move' tmpIter[350003](414388 call . this[349937] c"localDoms")) unknown isRngDomArr[350159] "maybe param" "temp"(350174 'move' isRngDomArr[350159](350172 call ||(350161 call isBoundedRange tmpIter[350003])(350170 call ||(350164 call isDomain tmpIter[350003])(350167 call isArray tmpIter[350003]))))
      if isRngDomArr[350159]
      { const _coforallCount[350031] "const" "end count" "temp"(350096 'move' _coforallCount[350031](350093 call _endCountAlloc 0)) unknown numTasks[350032] "temp"(350080 'move' numTasks[350032](350076 call . tmpIter[350003] c"size"))(350071 call _upEndCount _coforallCount[350031] 0 numTasks[350032]) unknown _indexOfInterest[350038] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350039] "expr temp" "temp"(350048 'move' _iterator[350039](350046 call _getIterator tmpIter[350003]))
        Defer
        {
          {(350064 call _freeIterator _iterator[350039])
          }
        }
        { scopeless type(350053 'move' _indexOfInterest[350038](350050 call iteratorIndex _iterator[350039]))
        }
        ForLoop[350040]
        { unknown locDom[350057] "coforall index var" "index var" "insert auto destroy"(350059 'move' locDom[350057] _indexOfInterest[350038]) const tmp[350009] "const" "temp"(350011 'move' tmp[350009](350013 'deref'(350014 '_wide_get_locale' locDom[350057])))
          {(350022 call =(350024 call .(350026 call postfix! locDom[350057]) c"domLocalRep") domArg[349932])(350033 call _downEndCount _coforallCount[350031] nil[44])(350017 'coforall on block' 0 tmp[350009])
          } label _continueLabel[350043] _indexOfInterest[350038] _iterator[350039]
        } label _breakLabel[350044]
        Defer
        {
          {(350083 call _endCountFree _coforallCount[350031])
          }
        }(350088 call _waitEndCount _coforallCount[350031] 0 numTasks[350032])
      }
      { const _coforallCount[350100] "const" "end count" "temp"(350156 'move' _coforallCount[350100](350153 call _endCountAlloc 0)) unknown _indexOfInterest[350107] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350108] "expr temp" "temp"(350117 'move' _iterator[350108](350115 call _getIterator tmpIter[350003]))
        Defer
        {
          {(350133 call _freeIterator _iterator[350108])
          }
        }
        { scopeless type(350122 'move' _indexOfInterest[350107](350119 call iteratorIndex _iterator[350108]))
        }
        ForLoop[350109]
        { unknown locDom[350126] "coforall index var" "index var" "insert auto destroy"(350128 'move' locDom[350126] _indexOfInterest[350107])(350140 call _upEndCount _coforallCount[350100] 0) const tmp[349995] "const" "temp"(349997 'move' tmp[349995](349993 'deref'(349992 '_wide_get_locale' locDom[350126])))
          {(349989 call =(349985 call .(349981 call postfix! locDom[350126]) c"domLocalRep") domArg[349932])(350102 call _downEndCount _coforallCount[350100] nil[44])(350000 'coforall on block' 0 tmp[349995])
          } label _continueLabel[350112] _indexOfInterest[350107] _iterator[350108]
        } label _breakLabel[350113]
        Defer
        {
          {(350144 call _endCountFree _coforallCount[350100])
          }
        }(350149 call _waitEndCount _coforallCount[350100] 0)
      }
    }
  }
  { scopeless type void[4]
  } function ReplicatedDom[349083](?).dsiGetIndices[350184](arg _mt[350189]:_MT[238], arg this[350186]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method"
  {
    if(350225 call _cond_test traceReplicatedDist[348516])
    {(350223 call writeln "ReplicatedDom.dsiGetIndices")
    }(350239 return(350238 call(350234 call .(350233 call(414417 call . this[350186] c"redirectee")) c"getIndices")))
  }
  { scopeless type(350201 call *(414399 call . this[350186] c"rank")(350200 call range[64316](?)(414405 call . this[350186] c"idxType") bounded[64205](414410 call . this[350186] c"stridable")))
  } function ReplicatedDom[349083](?).these[350247](arg _mt[350252]:_MT[238], arg this[350249]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  { unknown dom[350257](350256 call(414421 call . this[350249] c"redirectee"))(350260 'end of statement')
    { unknown _indexOfInterest[350267] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350268] "expr temp" "temp"(350277 'move' _iterator[350268](350275 call _getIterator dom[350257]))
      Defer
      {
        {(350293 call _freeIterator _iterator[350268])
        }
      }
      { scopeless type(350282 'move' _indexOfInterest[350267](350279 call iteratorIndex _iterator[350268]))
      }
      ForLoop[350269]
      { unknown i[350286] "index var" "insert auto destroy"(350288 'move' i[350286] _indexOfInterest[350267])(350265 yield i[350286]) label _continueLabel[350272] _indexOfInterest[350267] _iterator[350268]
      } label _breakLabel[350273]
    }
  } function ReplicatedDom[349083](?).these[350309](arg _mt[350314]:_MT[238], arg this[350311]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), param arg tag[350306] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350339] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350340] "expr temp" "temp"(350349 'move' _iterator[350340](350347 call _getIterator(350335 call(350330 call .(350327 call .(350326 call(414431 call . this[350311] c"chpl_myLocDom")) c"domLocalRep") c"these") tag[350306])))
      Defer
      {
        {(350366 call _freeIterator _iterator[350340])
        }
      }
      { scopeless type(350355 'move' _indexOfInterest[350339](350352 call iteratorIndex _iterator[350340]))
      }
      ForLoop[350341]
      { unknown follow[350359] "index var" "insert auto destroy"(350361 'move' follow[350359] _indexOfInterest[350339])(350337 yield follow[350359]) label _continueLabel[350344] _indexOfInterest[350339] _iterator[350340]
      } label _breakLabel[350345]
    }
  }
  {(350321 call == tag[350306] leader[447])
  } function ReplicatedDom[349083](?).these[350384](arg _mt[350391]:_MT[238], arg this[350388]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), param arg tag[350381] : iterKind[453], arg followThis[350386]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350414] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350415] "expr temp" "temp"(350424 'move' _iterator[350415](350422 call _getIterator(350410 call(350404 call .(350403 call(414439 call . this[350388] c"redirectee")) c"these") tag[350381] followThis[350386])))
      Defer
      {
        {(350441 call _freeIterator _iterator[350415])
        }
      }
      { scopeless type(350430 'move' _indexOfInterest[350414](350427 call iteratorIndex _iterator[350415]))
      }
      ForLoop[350416]
      { unknown i[350434] "index var" "insert auto destroy"(350436 'move' i[350434] _indexOfInterest[350414])(350412 yield i[350434]) label _continueLabel[350419] _indexOfInterest[350414] _iterator[350415]
      } label _breakLabel[350420]
    }
  }
  {(350398 call == tag[350381] follower[449])
  } function ReplicatedDom[349083](?).dsiSerialWrite[350457](arg _mt[350462]:_MT[238], arg this[350459]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg f[350455]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(350476 call(350471 call .(350468 call .(350467 call(414446 call . this[350459] c"redirectee")) c"_value") c"dsiSerialWrite") f[350455])
  }
  { scopeless type void[4]
  } function ReplicatedDom[349083](?).dsiDims[350485](arg _mt[350490]:_MT[238], arg this[350487]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method"
  {(350512 return(350511 call(350507 call .(350506 call(414467 call . this[350487] c"redirectee")) c"dims")))
  }
  { scopeless type(350502 call *(414452 call . this[350487] c"rank")(350501 call range[64316](?)(414458 call . this[350487] c"idxType") bounded[64205](414463 call . this[350487] c"stridable")))
  } function ReplicatedDom[349083](?).dsiDim[350525](arg _mt[350530]:_MT[238], arg this[350527]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg dim[350522] : int(64)[13]) : _unknown[51] "method"
  {(350550 return(350549 call(350544 call .(350543 call(414482 call . this[350527] c"redirectee")) c"dim") dim[350522]))
  }
  { scopeless type(350540 call range[64316](?)(414473 call . this[350527] c"idxType") bounded[64205](414478 call . this[350527] c"stridable"))
  } function ReplicatedDom[349083](?).dsiLow[350559](arg _mt[350564]:_MT[238], arg this[350561]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "no parens"
  {(350572 return(350569 call .(350568 call(414487 call . this[350561] c"redirectee")) c"low"))
  } function ReplicatedDom[349083](?).dsiHigh[350580](arg _mt[350585]:_MT[238], arg this[350582]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "no parens"
  {(350593 return(350590 call .(350589 call(414491 call . this[350582] c"redirectee")) c"high"))
  } function ReplicatedDom[349083](?).dsiStride[350601](arg _mt[350606]:_MT[238], arg this[350603]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "no parens"
  {(350614 return(350611 call .(350610 call(414495 call . this[350603] c"redirectee")) c"stride"))
  } function ReplicatedDom[349083](?).dsiAlignedLow[350622](arg _mt[350627]:_MT[238], arg this[350624]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "no parens"
  {(350635 return(350632 call .(350631 call(414499 call . this[350624] c"redirectee")) c"alignedLow"))
  } function ReplicatedDom[349083](?).dsiAlignedHigh[350643](arg _mt[350648]:_MT[238], arg this[350645]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "no parens"
  {(350656 return(350653 call .(350652 call(414503 call . this[350645] c"redirectee")) c"alignedHigh"))
  } function ReplicatedDom[349083](?).dsiAlignment[350664](arg _mt[350669]:_MT[238], arg this[350666]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "no parens"
  {(350677 return(350674 call .(350673 call(414507 call . this[350666] c"redirectee")) c"alignment"))
  } function ReplicatedDom[349083](?).dsiNumIndices[350685](arg _mt[350690]:_MT[238], arg this[350687]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "no parens"
  {(350698 return(350695 call .(350694 call(414511 call . this[350687] c"redirectee")) c"size"))
  } function ReplicatedDom[349083](?).dsiMember[350708](arg _mt[350713]:_MT[238], arg this[350710]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg indexx[350706]:_any[178](?)) : _unknown[51] "method"
  {(350724 return(350723 call(350718 call .(350717 call(414515 call . this[350710] c"redirectee")) c"contains") indexx[350706]))
  } function ReplicatedDom[349083](?).dsiIndexOrder[350734](arg _mt[350739]:_MT[238], arg this[350736]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg indexx[350732]:_any[178](?)) : _unknown[51] "method"
  {(350750 return(350749 call(350744 call .(350743 call(414520 call . this[350736] c"redirectee")) c"dsiIndexOrder") indexx[350732]))
  } function ReplicatedDom[349083](?).dsiDestroyDom[350758](arg _mt[350763]:_MT[238], arg this[350760]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[350797] "expr temp" "maybe ref" "no copy" "temp"(350800 'move' tmpIter[350797](350767 call .(366845 call . this[350760] c"dist") c"targetLocDom")) unknown isRngDomArr[350954] "maybe param" "temp"(350969 'move' isRngDomArr[350954](350967 call ||(350956 call isBoundedRange tmpIter[350797])(350965 call ||(350959 call isDomain tmpIter[350797])(350962 call isArray tmpIter[350797]))))
      if isRngDomArr[350954]
      { const _coforallCount[350826] "const" "end count" "temp"(350891 'move' _coforallCount[350826](350888 call _endCountAlloc 0)) unknown numTasks[350827] "temp"(350875 'move' numTasks[350827](350871 call . tmpIter[350797] c"size"))(350866 call _upEndCount _coforallCount[350826] 0 numTasks[350827]) unknown _indexOfInterest[350833] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350834] "expr temp" "temp"(350843 'move' _iterator[350834](350841 call _getIterator tmpIter[350797]))
        Defer
        {
          {(350859 call _freeIterator _iterator[350834])
          }
        }
        { scopeless type(350848 'move' _indexOfInterest[350833](350845 call iteratorIndex _iterator[350834]))
        }
        ForLoop[350835]
        { unknown localeIdx[350852] "coforall index var" "index var" "insert auto destroy"(350854 'move' localeIdx[350852] _indexOfInterest[350833]) const tmp[350803] "const" "temp"(350805 'move' tmp[350803](350807 'deref'(350808 '_wide_get_locale'(350813 call(350810 call .(366855 call . this[350760] c"dist") c"targetLocales") localeIdx[350852]))))
          {(350821 call chpl__delete(350823 call(414534 call . this[350760] c"localDoms") localeIdx[350852]))(350828 call _downEndCount _coforallCount[350826] nil[44])(350816 'coforall on block' 0 tmp[350803])
          } label _continueLabel[350838] _indexOfInterest[350833] _iterator[350834]
        } label _breakLabel[350839]
        Defer
        {
          {(350878 call _endCountFree _coforallCount[350826])
          }
        }(350883 call _waitEndCount _coforallCount[350826] 0 numTasks[350827])
      }
      { const _coforallCount[350895] "const" "end count" "temp"(350951 'move' _coforallCount[350895](350948 call _endCountAlloc 0)) unknown _indexOfInterest[350902] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350903] "expr temp" "temp"(350912 'move' _iterator[350903](350910 call _getIterator tmpIter[350797]))
        Defer
        {
          {(350928 call _freeIterator _iterator[350903])
          }
        }
        { scopeless type(350917 'move' _indexOfInterest[350902](350914 call iteratorIndex _iterator[350903]))
        }
        ForLoop[350904]
        { unknown localeIdx[350921] "coforall index var" "index var" "insert auto destroy"(350923 'move' localeIdx[350921] _indexOfInterest[350902])(350935 call _upEndCount _coforallCount[350895] 0) const tmp[350788] "const" "temp"(350790 'move' tmp[350788](350786 'deref'(350785 '_wide_get_locale'(350776 call(350771 call .(366850 call . this[350760] c"dist") c"targetLocales") localeIdx[350921]))))
          {(350782 call chpl__delete(350780 call(414527 call . this[350760] c"localDoms") localeIdx[350921]))(350897 call _downEndCount _coforallCount[350895] nil[44])(350793 'coforall on block' 0 tmp[350788])
          } label _continueLabel[350907] _indexOfInterest[350902] _iterator[350903]
        } label _breakLabel[350908]
        Defer
        {
          {(350939 call _endCountFree _coforallCount[350895])
          }
        }(350944 call _waitEndCount _coforallCount[350895] 0)
      }
    }
  } function ReplicatedDom[349083](?).dsiAssignDomain[350983](arg _mt[350992]:_MT[238], arg this[350989]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg rhs[350980] : _domain[125902](?), arg lhsPrivate[350986] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(351005 call(350995 call . this[350989] c"dsiSetIndices")(351003 call(350999 call . rhs[350980] c"getIndices")))
  } function ReplicatedArr[351136](?).chpl_myLocArr[351053](arg _mt[351140]:_MT[238], arg this[351138]:ReplicatedArr[351136](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351089 call _cond_test 1)
    {
      if(351084 call _cond_test(351072 call !(351071 call(351063 call .(351060 call .(351057 call .(366866 call . this[351138] c"dom") c"dist") c"targetLocDom") c"contains")(351067 call .(366869 call here[90435]) c"id"))))
      {(351082 call halt "locale "(351078 call .(366871 call here[90435]) c"id") " has no local replicand")
      }
    }(351104 return(351102 call postfix!(351101 call(414547 call . this[351138] c"localArrs")(351097 call .(366873 call here[90435]) c"id"))))
  } function ReplicatedArr[351136](?).replicand[351114](arg _mt[351144]:_MT[238], arg this[351142]:ReplicatedArr[351136](?), arg loc[351111] : locale[28]) ref : _unknown[51] "method" "primary method"
  {(351130 return(351127 call .(351123 call postfix!(351122 call(414552 call . this[351142] c"localArrs")(351118 call . loc[351111] c"id"))) c"arrLocalRep"))
  } type ReplicatedArr[351136](?) val super[355814]:AbsBaseArr[149697](?) "super class" const dom[351013] "const" unknown localArrs[351047](351045 call chpl__buildArrayRuntimeType(351043 call chpl__ensureDomainExpr(351021 call .(351018 call . dom[351013] c"dist") c"targetLocDom"))(351040 call unmanaged LocReplicatedArr?[415588](?) eltType[149671](351029 call . dom[351013] c"rank")(351033 call . dom[351013] c"idxType")(351037 call . dom[351013] c"stridable"))) type unmanaged ReplicatedArr[415594](?) type ReplicatedArr[414597](?) function _array[133588](?).replicand[351154](arg _mt[351159]:_MT[238], arg this[351156]:_array[133588](?) : _array[133588](?), arg loc[351151] : locale[28]) ref : _unknown[51] "method" "no doc"
  {(351168 return(351167 call(351162 call .(366877 call . this[351156] c"_value") c"replicand") loc[351151]))
  } function LocReplicatedArr[351420](?).init[351219](arg _mt[351424]:_MT[238], arg this[351422]:LocReplicatedArr[351420](?), arg eltType[351217]:_any[178](?), param arg rank[351222] : int(64)[13], arg idxType[351225]:_any[178](?), param arg stridable[351228] : bool[10], arg myDom[351238] :(351236 call unmanaged LocReplicatedDom[415591](?) rank[351222] idxType[351225] stridable[351228]), param arg initElts[351242] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(351250 call =(351246 call . this[351422] c"eltType") eltType[351217])(351259 call =(351255 call . this[351422] c"rank") rank[351222])(351267 call =(351263 call . this[351422] c"idxType") idxType[351225])(351275 call =(351271 call . this[351422] c"stridable") stridable[351228])(351285 call =(351281 call . this[351422] c"myDom") myDom[351238])(351307 call =(351289 call . this[351422] c"arrLocalRep")(351306 call(351299 call .(351296 call .(351293 call . this[351422] c"myDom") c"domLocalRep") c"buildArray") eltType[351217](initElts = 1)))
    if(351369 call _cond_test(351320 call &&(351312 call == initElts[351242] 0)(351318 call !(351317 call isPODType eltType[351217]))))
    {(351366 call compilerError(351363 call +(351344 call + "ReplicatedDist array initialization is not currently supported for element type "(351342 call _cast string[26] eltType[351217])) " - please default-initialize the array"))
    }
  } function LocReplicatedArr[351420](?).deinit[351377](arg _mt[351428]:_MT[238], arg this[351426]:LocReplicatedArr[351420](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {(351384 call _do_destroy_array(414576 call . this[351426] c"arrLocalRep")(deinitElts = 1))
  } function LocReplicatedArr[351420](?).writeThis[351393](arg _mt[351432]:_MT[238], arg this[351430]:LocReplicatedArr[351420](?), arg f[351391]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(351414 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  } type LocReplicatedArr[351420](?) val super[355816]:object[22] "super class" unknown eltType[351174] "type variable" unknown rank[351178] "param" int(64)[13] unknown idxType[351182] "type variable" unknown stridable[351186] "param" bool[10] unknown myDom[351197](351195 call unmanaged LocReplicatedDom[415591](?) rank[351178] idxType[351182] stridable[351186]) unknown arrLocalRep[351211] "local field" "no auto destroy" "unsafe"(351209 call chpl__buildArrayRuntimeType(351207 call chpl__ensureDomainExpr(351202 call . myDom[351197] c"domLocalRep")) eltType[351174]) type unmanaged LocReplicatedArr?[415588](?) type LocReplicatedArr?[415585](?) type LocReplicatedArr[414540](?) function ReplicatedArr[351136](?).init[351440](arg _mt[351447]:_MT[238], arg this[351444]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg eltType[351438]:_any[178](?), arg dom[351442]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(351456 call(351450 call .(366890 call . this[351444] c"super") c"init")(eltType = eltType[351438]))(351464 call =(351460 call . this[351444] c"dom") dom[351442])
  } function ReplicatedArr[351136](?).stridable[351472](arg _mt[351477]:_MT[238], arg this[351474]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) param : _unknown[51] "method" "no parens"
  {(351483 return(351480 call .(366896 call . this[351474] c"dom") c"stridable"))
  } function ReplicatedArr[351136](?).idxType[351491](arg _mt[351496]:_MT[238], arg this[351493]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) type : _unknown[51] "method" "no parens"
  {(351502 return(351499 call .(366901 call . this[351493] c"dom") c"idxType"))
  } function ReplicatedArr[351136](?).rank[351510](arg _mt[351515]:_MT[238], arg this[351512]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) param : _unknown[51] "method" "no parens"
  {(351521 return(351518 call .(366906 call . this[351512] c"dom") c"rank"))
  } function ReplicatedArr[351136](?).dsiGetBaseDom[351529](arg _mt[351534]:_MT[238], arg this[351531]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) : _unknown[51] "method" "method overrides"
  {(351537 return(414583 call . this[351531] c"dom"))
  } function ReplicatedArr[351136](?).dsiSupportsPrivatization[351545](arg _mt[351550]:_MT[238], arg this[351547]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) param : _unknown[51] "method" "method overrides"
  {(351553 return 1)
  } type ReplicatedArrPrvData[351568](?) unknown dompid[351559] unknown localArrs[351563] function ReplicatedArr[351136](?).dsiGetPrivatizeData[351574](arg _mt[351579]:_MT[238], arg this[351576]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) : _unknown[51] "method"
  {
    if(351603 call _cond_test traceReplicatedDist[348516])
    {(351601 call writeln "ReplicatedArr.dsiGetPrivatizeData")
    }(351618 return(351609 'new'(351617 call ReplicatedArrPrvData[351568](?)(351612 call .(366911 call . this[351576] c"dom") c"pid")(414590 call . this[351576] c"localArrs"))))
  } function ReplicatedArr[351136](?).dsiPrivatize[351627](arg _mt[351632]:_MT[238], arg this[351629]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg privatizeData[351625]:_any[178](?)) : _unknown[51] "method"
  {
    if(351657 call _cond_test traceReplicatedDist[348516])
    {(351655 call writeln "ReplicatedArr.dsiPrivatize on "(414594 call here[90435]))
    } unknown privdom[351675](351674 call chpl_getPrivatizedCopy(351668 'typeof'(351665 call . this[351629] c"dom"))(351671 call . privatizeData[351625] c"dompid"))(351678 'end of statement') unknown result[351687](351681 'new'(_chpl_manager = unmanaged[220](?))(351686 call ReplicatedArr[414597](?)(414602 call . this[351629] c"eltType") privdom[351675]))(351690 'end of statement')(351701 call =(351694 call . result[351687] c"localArrs")(351698 call . privatizeData[351625] c"localArrs"))(351705 return result[351687])
  } function ReplicatedDom[349083](?).dsiBuildArray[351714](arg _mt[351723]:_MT[238], arg this[351720]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg eltType[351712]:_any[178](?), param arg initElts[351717] : bool[10]) : _unknown[51] "method"
  {
    if(351757 call _cond_test traceReplicatedDist[348516])
    {(351755 call writeln "ReplicatedDom.dsiBuildArray")
    } unknown result[351774](351765 'new'(_chpl_manager = unmanaged[220](?))(351773 call ReplicatedArr[414597](?) eltType[351712](351772 call _to_unmanaged this[351720])))(351777 'end of statement')
    { unknown tmpIter[351827] "expr temp" "maybe ref" "no copy" "temp"(351830 'move' tmpIter[351827](351794 call _build_tuple(351785 call .(366920 call . this[351720] c"dist") c"targetLocales")(414616 call . this[351720] c"localDoms")(351791 call . result[351774] c"localArrs"))) unknown isRngDomArr[352033] "maybe param" "temp"(352048 'move' isRngDomArr[352033](352046 call ||(352035 call isBoundedRange tmpIter[351827])(352044 call ||(352038 call isDomain tmpIter[351827])(352041 call isArray tmpIter[351827]))))
      if isRngDomArr[352033]
      { const _coforallCount[351863] "const" "end count" "temp"(351949 'move' _coforallCount[351863](351946 call _endCountAlloc 0)) unknown numTasks[351864] "temp"(351933 'move' numTasks[351864](351929 call . tmpIter[351827] c"size"))(351924 call _upEndCount _coforallCount[351863] 0 numTasks[351864]) unknown _indexOfInterest[351870] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351871] "expr temp" "temp"(351880 'move' _iterator[351871](351878 call _getIteratorZip tmpIter[351827]))
        Defer
        {
          {(351917 call _freeIterator _iterator[351871])
          }
        }
        { scopeless type(351885 'move' _indexOfInterest[351870](351882 call iteratorIndex _iterator[351871]))
        }
        ForLoop[351872]
        {(351890 call _check_tuple_var_decl _indexOfInterest[351870] 3) unknown loc[351896] "coforall index var" "index var" "insert auto destroy"(351898 'move' loc[351896](351894 call _indexOfInterest[351870] 0)) unknown locDom[351903] "coforall index var" "index var" "insert auto destroy"(351905 'move' locDom[351903](351901 call _indexOfInterest[351870] 1)) unknown locArr[351910] "coforall index var" "index var" "insert auto destroy"(351912 'move' locArr[351910](351908 call _indexOfInterest[351870] 2)) const tmp[351833] "const" "temp"(351835 'move' tmp[351833](351837 'deref'(351838 '_wide_get_locale' loc[351896])))
          {(351846 call = locArr[351910](351848 'new'(_chpl_manager = unmanaged[220](?))(351852 call LocReplicatedArr[414540](?) eltType[351712](414646 call . this[351720] c"rank")(414651 call . this[351720] c"idxType")(414656 call . this[351720] c"stridable")(351858 call postfix! locDom[351903])(initElts = initElts[351717]))))(351865 call _downEndCount _coforallCount[351863] nil[44])(351841 'coforall on block' 0 tmp[351833])
          } label _continueLabel[351875] _indexOfInterest[351870] _iterator[351871]
        } label _breakLabel[351876]
        Defer
        {
          {(351936 call _endCountFree _coforallCount[351863])
          }
        }(351941 call _waitEndCount _coforallCount[351863] 0 numTasks[351864])
      }
      { const _coforallCount[351953] "const" "end count" "temp"(352030 'move' _coforallCount[351953](352027 call _endCountAlloc 0)) unknown _indexOfInterest[351960] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351961] "expr temp" "temp"(351970 'move' _iterator[351961](351968 call _getIteratorZip tmpIter[351827]))
        Defer
        {
          {(352007 call _freeIterator _iterator[351961])
          }
        }
        { scopeless type(351975 'move' _indexOfInterest[351960](351972 call iteratorIndex _iterator[351961]))
        }
        ForLoop[351962]
        {(351980 call _check_tuple_var_decl _indexOfInterest[351960] 3) unknown loc[351986] "coforall index var" "index var" "insert auto destroy"(351988 'move' loc[351986](351984 call _indexOfInterest[351960] 0)) unknown locDom[351993] "coforall index var" "index var" "insert auto destroy"(351995 'move' locDom[351993](351991 call _indexOfInterest[351960] 1)) unknown locArr[352000] "coforall index var" "index var" "insert auto destroy"(352002 'move' locArr[352000](351998 call _indexOfInterest[351960] 2))(352014 call _upEndCount _coforallCount[351953] 0) const tmp[351818] "const" "temp"(351820 'move' tmp[351818](351816 'deref'(351815 '_wide_get_locale' loc[351986])))
          {(351812 call = locArr[352000](351799 'new'(_chpl_manager = unmanaged[220](?))(351811 call LocReplicatedArr[414540](?) eltType[351712](414625 call . this[351720] c"rank")(414630 call . this[351720] c"idxType")(414635 call . this[351720] c"stridable")(351807 call postfix! locDom[351993])(initElts = initElts[351717]))))(351955 call _downEndCount _coforallCount[351953] nil[44])(351823 'coforall on block' 0 tmp[351818])
          } label _continueLabel[351965] _indexOfInterest[351960] _iterator[351961]
        } label _breakLabel[351966]
        Defer
        {
          {(352018 call _endCountFree _coforallCount[351953])
          }
        }(352023 call _waitEndCount _coforallCount[351953] 0)
      }
    }(352053 return result[351774])
  }
  { scopeless type(351733 call unmanaged ReplicatedArr[415594](?) eltType[351712](351732 call _to_unmanaged(351730 'typeof' this[351720])))
  } function ReplicatedArr[351136](?).dsiAccess[352063](arg _mt[352068]:_MT[238], arg this[352065]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg indexx[352061]:_any[178](?)) ref : _unknown[51] "method"
  {(352079 return(352078 call(352073 call .(352072 call(414665 call . this[352065] c"chpl_myLocArr")) c"arrLocalRep") indexx[352061]))
  } function ReplicatedArr[351136](?).dsiBoundsCheck[352089](arg _mt[352094]:_MT[238], arg this[352091]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg indexx[352087]:_any[178](?)) : _unknown[51] "method"
  {(352112 return(352111 call(352103 call .(352100 call .(352097 call .(366926 call . this[352091] c"dom") c"dist") c"targetLocDom") c"contains")(352107 call .(366929 call here[90435]) c"id")))
  } function ReplicatedArr[351136](?).dsiSerialWrite[352122](arg _mt[352127]:_MT[238], arg this[352124]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg f[352120]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352155 call(352150 call .(352147 call .(352144 call .(352142 call postfix!(352141 call(414671 call . this[352124] c"localArrs")(352137 call .(352136 call(352132 call . f[352120] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f[352120])
  }
  { scopeless type void[4]
  } function ReplicatedArr[351136](?).dsiSerialRead[352166](arg _mt[352173]:_MT[238], arg this[352170]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg f[352164]:_any[178](?), arg loc[352168]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352201 call(352196 call .(352193 call .(352190 call .(352188 call postfix!(352187 call(414677 call . this[352170] c"localArrs")(352183 call .(352182 call(352178 call . f[352164] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f[352164])
  }
  { scopeless type void[4]
  } function isReplicatedArr[352211](arg arr[352209]:_any[178](?)) param : _unknown[51]
  {(352225 return(354935 'is_subtype' ReplicatedArr[414597](?)(352221 'typeof'(352220 call _to_borrowed(352218 call chpl__getActualArray arr[352209])))))
  } function chpl_serialReadWriteRectangular[352234](arg f[352232]:_any[178](?), arg arr[352236]:_any[178](?), arg dom[352238]:_any[178](?)) : _unknown[51] "no return value for void"
  { const origloc[352250] "const"(352249 call(352245 call . f[352232] c"readWriteThisFromLocale"))(352253 'end of statement') const tmp[352266] "const" "temp"(352268 'move' tmp[352266](352264 'deref'(352263 '_wide_get_locale' origloc[352250])))
    {(352261 call chpl_serialReadWriteRectangularHelper f[352232] arr[352236] dom[352238])(352271 'on block' 0 tmp[352266])
    }
  }
  {(352243 call isReplicatedArr arr[352236])
  } function ReplicatedArr[351136](?).dsiElementInitializationComplete[352280](arg _mt[352285]:_MT[238], arg this[352282]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351136](?).dsiElementDeinitializationComplete[352293](arg _mt[352298]:_MT[238], arg this[352295]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351136](?).dsiDestroyArr[352310](arg _mt[352315]:_MT[238], arg this[352312]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg deinitElts[352307] : bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[352352] "expr temp" "maybe ref" "no copy" "temp"(352355 'move' tmpIter[352352](352331 call _build_tuple(352326 call .(352323 call .(366936 call . this[352312] c"dom") c"dist") c"targetLocales")(414690 call . this[352312] c"localArrs"))) unknown isRngDomArr[352530] "maybe param" "temp"(352545 'move' isRngDomArr[352530](352543 call ||(352532 call isBoundedRange tmpIter[352352])(352541 call ||(352535 call isDomain tmpIter[352352])(352538 call isArray tmpIter[352352]))))
      if isRngDomArr[352530]
      { const _coforallCount[352374] "const" "end count" "temp"(352453 'move' _coforallCount[352374](352450 call _endCountAlloc 0)) unknown numTasks[352375] "temp"(352437 'move' numTasks[352375](352433 call . tmpIter[352352] c"size"))(352428 call _upEndCount _coforallCount[352374] 0 numTasks[352375]) unknown _indexOfInterest[352381] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352382] "expr temp" "temp"(352391 'move' _iterator[352382](352389 call _getIteratorZip tmpIter[352352]))
        Defer
        {
          {(352421 call _freeIterator _iterator[352382])
          }
        }
        { scopeless type(352396 'move' _indexOfInterest[352381](352393 call iteratorIndex _iterator[352382]))
        }
        ForLoop[352383]
        {(352401 call _check_tuple_var_decl _indexOfInterest[352381] 2) unknown loc[352407] "coforall index var" "index var" "insert auto destroy"(352409 'move' loc[352407](352405 call _indexOfInterest[352381] 0)) unknown locArr[352414] "coforall index var" "index var" "insert auto destroy"(352416 'move' locArr[352414](352412 call _indexOfInterest[352381] 1)) const tmp[352358] "const" "temp"(352360 'move' tmp[352358](352362 'deref'(352363 '_wide_get_locale' loc[352407])))
          {
            {(352371 call chpl__delete locArr[352414])
            }(352376 call _downEndCount _coforallCount[352374] nil[44])(352366 'coforall on block' 0 tmp[352358])
          } label _continueLabel[352386] _indexOfInterest[352381] _iterator[352382]
        } label _breakLabel[352387]
        Defer
        {
          {(352440 call _endCountFree _coforallCount[352374])
          }
        }(352445 call _waitEndCount _coforallCount[352374] 0 numTasks[352375])
      }
      { const _coforallCount[352457] "const" "end count" "temp"(352527 'move' _coforallCount[352457](352524 call _endCountAlloc 0)) unknown _indexOfInterest[352464] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352465] "expr temp" "temp"(352474 'move' _iterator[352465](352472 call _getIteratorZip tmpIter[352352]))
        Defer
        {
          {(352504 call _freeIterator _iterator[352465])
          }
        }
        { scopeless type(352479 'move' _indexOfInterest[352464](352476 call iteratorIndex _iterator[352465]))
        }
        ForLoop[352466]
        {(352484 call _check_tuple_var_decl _indexOfInterest[352464] 2) unknown loc[352490] "coforall index var" "index var" "insert auto destroy"(352492 'move' loc[352490](352488 call _indexOfInterest[352464] 0)) unknown locArr[352497] "coforall index var" "index var" "insert auto destroy"(352499 'move' locArr[352497](352495 call _indexOfInterest[352464] 1))(352511 call _upEndCount _coforallCount[352457] 0) const tmp[352342] "const" "temp"(352344 'move' tmp[352342](352340 'deref'(352339 '_wide_get_locale' loc[352490])))
          {
            {(352335 call chpl__delete locArr[352497])
            }(352459 call _downEndCount _coforallCount[352457] nil[44])(352347 'coforall on block' 0 tmp[352342])
          } label _continueLabel[352469] _indexOfInterest[352464] _iterator[352465]
        } label _breakLabel[352470]
        Defer
        {
          {(352515 call _endCountFree _coforallCount[352457])
          }
        }(352520 call _waitEndCount _coforallCount[352457] 0)
      }
    }
  } function ReplicatedArr[351136](?).these[352555](arg _mt[352560]:_MT[238], arg this[352557]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352573] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352574] "expr temp" "temp"(352583 'move' _iterator[352574](352581 call _getIterator(352567 call .(352566 call(414703 call . this[352557] c"chpl_myLocArr")) c"arrLocalRep")))
      Defer
      {
        {(352600 call _freeIterator _iterator[352574])
        }
      }
      { scopeless type(352589 'move' _indexOfInterest[352573](352586 call iteratorIndex _iterator[352574]))
      }
      ForLoop[352575]
      { unknown a[352593] "index var" "insert auto destroy"(352595 'move' a[352593] _indexOfInterest[352573])(352571 yield a[352593]) label _continueLabel[352578] _indexOfInterest[352573] _iterator[352574]
      } label _breakLabel[352579]
    }
  }
  { scopeless type(414699 call . this[352557] c"eltType")
  } function ReplicatedArr[351136](?).these[352618](arg _mt[352623]:_MT[238], arg this[352620]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), param arg tag[352615] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352643] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352644] "expr temp" "temp"(352653 'move' _iterator[352644](352651 call _getIterator(352639 call(352634 call .(366942 call . this[352620] c"dom") c"these") tag[352615])))
      Defer
      {
        {(352670 call _freeIterator _iterator[352644])
        }
      }
      { scopeless type(352659 'move' _indexOfInterest[352643](352656 call iteratorIndex _iterator[352644]))
      }
      ForLoop[352645]
      { unknown follow[352663] "index var" "insert auto destroy"(352665 'move' follow[352663] _indexOfInterest[352643])(352641 yield follow[352663]) label _continueLabel[352648] _indexOfInterest[352643] _iterator[352644]
      } label _breakLabel[352649]
    }
  }
  {(352630 call == tag[352615] leader[447])
  } function ReplicatedArr[351136](?).these[352688](arg _mt[352695]:_MT[238], arg this[352692]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), param arg tag[352685] : iterKind[453], arg followThis[352690]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352721] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352722] "expr temp" "temp"(352731 'move' _iterator[352722](352729 call _getIterator(352717 call(352711 call .(352708 call .(352707 call(414714 call . this[352692] c"chpl_myLocArr")) c"arrLocalRep") c"these") tag[352685] followThis[352690])))
      Defer
      {
        {(352748 call _freeIterator _iterator[352722])
        }
      }
      { scopeless type(352737 'move' _indexOfInterest[352721](352734 call iteratorIndex _iterator[352722]))
      }
      ForLoop[352723]
      { unknown a[352741] "index var" "insert auto destroy"(352743 'move' a[352741] _indexOfInterest[352721])(352719 yield a[352741]) label _continueLabel[352726] _indexOfInterest[352721] _iterator[352722]
      } label _breakLabel[352727]
    }
  }
  {(352702 call == tag[352685] follower[449])
  } function Replicated[348548].dsiTargetLocales[352762](arg _mt[352767]:_MT[238], arg this[352764]:Replicated[348548] : Replicated[348548]) : _unknown[51] "method"
  {(352770 return(414722 call . this[352764] c"targetLocales"))
  } function ReplicatedDom[349083](?).dsiTargetLocales[352778](arg _mt[352783]:_MT[238], arg this[352780]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) : _unknown[51] "method"
  {(352789 return(352786 call .(366948 call . this[352780] c"dist") c"targetLocales"))
  } function ReplicatedArr[351136](?).dsiTargetLocales[352797](arg _mt[352802]:_MT[238], arg this[352799]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) : _unknown[51] "method"
  {(352811 return(352808 call .(352805 call .(366953 call . this[352799] c"dom") c"dist") c"targetLocales"))
  } function ReplicatedDom[349083](?).dsiHasSingleLocalSubdomain[352819](arg _mt[352824]:_MT[238], arg this[352821]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?)) param : _unknown[51] "method"
  {(352827 return 1)
  } function ReplicatedArr[351136](?).dsiHasSingleLocalSubdomain[352835](arg _mt[352840]:_MT[238], arg this[352837]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?)) param : _unknown[51] "method"
  {(352843 return 1)
  } function ReplicatedDom[349083](?).dsiLocalSubdomain[352855](arg _mt[352860]:_MT[238], arg this[352857]:ReplicatedDom[349083](?) : ReplicatedDom[349083](?), arg loc[352852] : locale[28]) : _unknown[51] "method"
  {
    if(352893 call _cond_test(352874 call(352866 call .(352863 call .(366958 call . this[352857] c"localDoms") c"_dom") c"contains")(352870 call . loc[352852] c"id")))
    {(352876 return(414727 call . this[352857] c"domRep"))
    }
    { unknown d[352885](352883 call chpl__buildDomainRuntimeType defaultDist[94050](414732 call . this[352857] c"rank")(414737 call . this[352857] c"idxType")(414742 call . this[352857] c"stridable"))(352888 'end of statement')(352891 return d[352885])
    }
  } function ReplicatedArr[351136](?).dsiLocalSubdomain[352908](arg _mt[352913]:_MT[238], arg this[352910]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg loc[352905] : locale[28]) : _unknown[51] "method"
  {
    if(352949 call _cond_test(352927 call(352919 call .(352916 call .(366964 call . this[352910] c"localArrs") c"_dom") c"contains")(352923 call . loc[352905] c"id")))
    {(352932 return(352929 call .(366970 call . this[352910] c"dom") c"domRep"))
    }
    { unknown d[352941](352939 call chpl__buildDomainRuntimeType defaultDist[94050](414748 call . this[352910] c"rank")(414752 call . this[352910] c"idxType")(414756 call . this[352910] c"stridable"))(352944 'end of statement')(352947 return d[352941])
    }
  } function ReplicatedArr[351136](?).dsiLocalSlice[352962](arg _mt[352967]:_MT[238], arg this[352964]:ReplicatedArr[351136](?) : ReplicatedArr[351136](?), arg ranges[352960]:_any[178](?)) : _unknown[51] "method"
  {(352979 return(352978 call(352972 call .(352971 call(414762 call . this[352964] c"chpl_myLocArr")) c"arrLocalRep")(352976 'expand_tuple' ranges[352960])))
  }(355597 'used modules list'(353082 'use' ChapelStandard[20264]))
}