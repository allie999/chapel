AST dump for ReplicatedDist after pass scopeResolve.
Module use list: ChapelStandard 

{ unknown traceReplicatedDist[348558] "config" "param" 0(348561 'end of statement') type Replicated[348590] val super[355851]:BaseDist[145968] "super class" unknown targetLocDom[348574](348572 call chpl__buildDomainRuntimeType defaultDist[94053](348569 'typeof'(348566 call .(366829 call here[90438]) c"id"))) const targetLocales[348585] "const"(348583 call chpl__buildArrayRuntimeType(348581 call chpl__ensureDomainExpr targetLocDom[348574]) locale[28]) type unmanaged Replicated[415619] type Replicated[411193](?) function Replicated[348590].init[348605](arg _mt[348632]:_MT[238], arg this[348629]:Replicated[348590] : Replicated[348590], arg targetLocales[348601] :(348597 call chpl__buildArrayRuntimeType nil[44] locale[28]) = Locales[113662], arg purposeMessage[348625] : string[26] = "used to create a Replicated") : _unknown[51] "method" "no return value for void"
  {(348639 call(348635 call . this[348629] c"complete"))
    { unknown _indexOfInterest[348673] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348674] "expr temp" "temp"(348683 'move' _iterator[348674](348681 call _getIterator targetLocales[348601]))
      Defer
      {
        {(348699 call _freeIterator _iterator[348674])
        }
      }
      { scopeless type(348688 'move' _indexOfInterest[348673](348685 call iteratorIndex _iterator[348674]))
      }
      ForLoop[348675]
      { unknown loc[348692] "index var" "insert auto destroy"(348694 'move' loc[348692] _indexOfInterest[348673])
        {(348656 call(348648 call .(348645 call . this[348629] c"targetLocDom") c"add")(348652 call . loc[348692] c"id"))(348670 call =(348668 call(348660 call . this[348629] c"targetLocales")(348664 call . loc[348692] c"id")) loc[348692])
        } label _continueLabel[348678] _indexOfInterest[348673] _iterator[348674]
      } label _breakLabel[348679]
    }
    if(348729 call _cond_test traceReplicatedDist[348558])
    {(348727 call writeln "Replicated initializer over " targetLocales[348601])
    }
  } function Replicated[348590].dsiEqualDMaps[348746](arg _mt[348751]:_MT[238], arg this[348748]:Replicated[348590] : Replicated[348590], arg that[348743] :(348742 call Replicated[411193](?) ?[260])) : _unknown[51] "method"
  {(348766 return(348765 call(348757 call .(348754 call . this[348748] c"targetLocales") c"equals")(348761 call . that[348743] c"targetLocales")))
  } function Replicated[348590].dsiEqualDMaps[348776](arg _mt[348781]:_MT[238], arg this[348778]:Replicated[348590] : Replicated[348590], arg that[348774]:_any[178](?)) param : _unknown[51] "method"
  {(348784 return 0)
  } function Replicated[348590].dsiDestroyDist[348792](arg _mt[348797]:_MT[238], arg this[348794]:Replicated[348590] : Replicated[348590]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function Replicated[348590].dsiSupportsPrivatization[348805](arg _mt[348810]:_MT[238], arg this[348807]:Replicated[348590] : Replicated[348590]) param : _unknown[51] "method" "method overrides"
  {(348813 return 1)
  } function Replicated[348590].dsiGetPrivatizeData[348821](arg _mt[348826]:_MT[238], arg this[348823]:Replicated[348590] : Replicated[348590]) : _unknown[51] "method"
  {
    if(348850 call _cond_test traceReplicatedDist[348558])
    {(348848 call writeln "Replicated.dsiGetPrivatizeData")
    }(348857 return 0)
  } function Replicated[348590].dsiPrivatize[348866](arg _mt[348871]:_MT[238], arg this[348868]:Replicated[348590] : Replicated[348590], arg privatizeData[348864]:_any[178](?)) : _unknown[51] "method"
  {
    if(348896 call _cond_test traceReplicatedDist[348558])
    {(348894 call writeln "Replicated.dsiPrivatize on "(414270 call here[90438]))
    } const otherTargetLocales[348906] "const"(348903 call . this[348868] c"targetLocales")(348909 'end of statement') const privDom[348914] "const"(348911 call . otherTargetLocales[348906] c"_dom")(348917 'end of statement') const privTargetLocales[348926] "const" otherTargetLocales[348906](348923 call chpl__buildArrayRuntimeType(348921 call chpl__ensureDomainExpr privDom[348914]) locale[28])(348929 'end of statement') const nonNilWrapper[348952] "const"(348948 for  loc[348950]  in  otherTargetLocales[348906] do
    { loc[348950]
    } )(348943 call chpl__buildArrayRuntimeType(348941 call chpl__ensureDomainExpr(348937 call #(348931 call chpl_build_low_bounded_range 0)(348934 call . privTargetLocales[348926] c"size"))) locale[28])(348955 'end of statement')(348980 return(348958 'new'(_chpl_manager = unmanaged[220](?))(348979 call Replicated[411193](?) nonNilWrapper[348952] "used during privatization")))
  } function ReplicatedDom[349125](?).numReplicands[349027](arg _mt[349129]:_MT[238], arg this[349127]:ReplicatedDom[349125](?)) : _unknown[51] "method" "primary method" "no parens"
  {(349033 return(349030 call .(366844 call . this[349127] c"localDoms") c"size"))
  } function ReplicatedDom[349125](?).chpl_myLocDom[349040](arg _mt[349133]:_MT[238], arg this[349131]:ReplicatedDom[349125](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(349105 call _cond_test 1)
    {
      if(349100 call _cond_test(349056 call !(349055 call(349047 call .(349044 call .(366849 call . this[349131] c"dist") c"targetLocDom") c"contains")(349051 call .(366852 call here[90438]) c"id"))))
      {(349098 call halt "locale "(349078 call .(366854 call here[90438]) c"id") " has no local replicand")
      }
    }(349120 return(349118 call postfix!(349117 call(414294 call . this[349131] c"localDoms")(349113 call .(366856 call here[90438]) c"id"))))
  } type ReplicatedDom[349125](?) val super[355853]:BaseRectangularDom[146935](?) "super class" const dist[348989] "const" unmanaged Replicated[415619] unknown domRep[349000](348998 call chpl__buildDomainRuntimeType defaultDist[94053] rank[146854] idxType[146858] stridable[146862]) unknown localDoms[349021](349019 call chpl__buildArrayRuntimeType(349017 call chpl__ensureDomainExpr(349005 call . dist[348989] c"targetLocDom"))(349014 call unmanaged LocReplicatedDom?[415625](?) rank[146854] idxType[146858] stridable[146862])) type ReplicatedDom[414343](?) type LocReplicatedDom[349162](?) val super[355855]:object[22] "super class" unknown rank[349138] "param" int(64)[13] unknown idxType[349142] "type variable" unknown stridable[349146] "param" bool[10] unknown domLocalRep[349157](349155 call chpl__buildDomainRuntimeType defaultDist[94053] rank[349138] idxType[349142] stridable[349146]) type unmanaged LocReplicatedDom[415634](?) type unmanaged LocReplicatedDom?[415625](?) type LocReplicatedDom?[415622](?) type LocReplicatedDom[414285](?) function ReplicatedDom[349125](?).redirectee[349168](arg _mt[349173]:_MT[238], arg this[349170]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method"
  {(349183 return(414319 call . this[349170] c"domRep"))
  }
  { scopeless type(349180 call chpl__buildDomainRuntimeType defaultDist[94053](414303 call . this[349170] c"rank")(414308 call . this[349170] c"idxType")(414313 call . this[349170] c"stridable"))
  } function ReplicatedDom[349125](?).dsiMyDist[349192](arg _mt[349197]:_MT[238], arg this[349194]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "method overrides"
  {(349200 return(414324 call . this[349194] c"dist"))
  } function ReplicatedDom[349125](?).dsiSupportsPrivatization[349208](arg _mt[349213]:_MT[238], arg this[349210]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) param : _unknown[51] "method" "method overrides"
  {(349216 return 1)
  } type ReplicatedDomPrvData[349235](?) unknown distpid[349222] unknown domRep[349226] unknown localDoms[349230] function ReplicatedDom[349125](?).dsiGetPrivatizeData[349241](arg _mt[349246]:_MT[238], arg this[349243]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method"
  {
    if(349270 call _cond_test traceReplicatedDist[348558])
    {(349268 call writeln "ReplicatedDom.dsiGetPrivatizeData")
    }(349286 return(349276 'new'(349285 call ReplicatedDomPrvData[349235](?)(349279 call .(366860 call . this[349243] c"dist") c"pid")(414331 call . this[349243] c"domRep")(414336 call . this[349243] c"localDoms"))))
  } function ReplicatedDom[349125](?).dsiPrivatize[349295](arg _mt[349300]:_MT[238], arg this[349297]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg privatizeData[349293]:_any[178](?)) : _unknown[51] "method"
  {
    if(349325 call _cond_test traceReplicatedDist[348558])
    {(349323 call writeln "ReplicatedDom.dsiPrivatize on "(414340 call here[90438]))
    } unknown privdist[349343](349342 call chpl_getPrivatizedCopy(349336 'typeof'(349333 call . this[349297] c"dist"))(349339 call . privatizeData[349293] c"distpid"))(349346 'end of statement')(349375 return(349349 'new'(_chpl_manager = unmanaged[220](?))(349374 call ReplicatedDom[414343](?)(rank =(414348 call . this[349297] c"rank"))(idxType =(414353 call . this[349297] c"idxType"))(stridable =(414358 call . this[349297] c"stridable"))(dist = privdist[349343])(domRep =(349363 call . privatizeData[349293] c"domRep"))(localDoms =(349370 call . privatizeData[349293] c"localDoms")))))
  } function ReplicatedDom[349125](?).dsiGetReprivatizeData[349382](arg _mt[349387]:_MT[238], arg this[349384]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method"
  {(349390 return(414364 call . this[349384] c"domRep"))
  } function ReplicatedDom[349125](?).dsiReprivatize[349400](arg _mt[349407]:_MT[238], arg this[349404]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg other[349398]:_any[178](?), arg reprivatizeData[349402]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(349446 call assert(349443 call &&(349431 call &&(349419 call ==(349412 call . this[349404] c"rank")(349416 call . other[349398] c"rank"))(349429 call ==(349422 call . this[349404] c"idxType")(349426 call . other[349398] c"idxType")))(349441 call ==(349434 call . this[349404] c"stridable")(349438 call . other[349398] c"stridable"))))(349454 call =(349450 call . this[349404] c"domRep") reprivatizeData[349402])
  }
  { scopeless type void[4]
  } function Replicated[348590].dsiClone[349463](arg _mt[349468]:_MT[238], arg this[349465]:Replicated[348590] : Replicated[348590]) : _unknown[51] "method"
  {
    if(349497 call _cond_test traceReplicatedDist[348558])
    {(349495 call writeln "Replicated.dsiClone")
    } unknown nonNilWrapper[349525](349521 for  loc[349523]  in (414373 call . this[349465] c"targetLocales") do
    { loc[349523]
    } )(349516 call chpl__buildArrayRuntimeType(349514 call chpl__ensureDomainExpr(349510 call #(349504 call chpl_build_low_bounded_range 0)(349507 call .(366876 call . this[349465] c"targetLocales") c"size"))) locale[28])(349528 'end of statement')(349536 return(349531 'new'(_chpl_manager = unmanaged[220](?))(349535 call Replicated[411193](?) nonNilWrapper[349525])))
  }
  { scopeless type(349474 call _to_unmanaged(349472 'typeof' this[349465]))
  } function Replicated[348590].dsiNewRectangularDom[349548](arg _mt[349561]:_MT[238], arg this[349558]:Replicated[348590] : Replicated[348590], param arg rank[349545] : int(64)[13], arg idxType[349550]:_any[178](?), param arg stridable[349553] : bool[10], arg inds[349556]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349595 call _cond_test traceReplicatedDist[348558])
    {(349593 call writeln "Replicated.dsiNewRectangularDom "(349591 call _build_tuple rank[349545](349586 call _cast string[26] idxType[349550]) stridable[349553] inds[349556]))
    } unknown result[349618](349603 'new'(_chpl_manager = unmanaged[220](?))(349617 call ReplicatedDom[414343](?)(rank = rank[349545])(idxType = idxType[349550])(stridable = stridable[349553])(dist =(349615 call _to_unmanaged this[349558]))))(349621 'end of statement')
    { unknown tmpIter[349660] "expr temp" "maybe ref" "no copy" "temp"(349663 'move' tmpIter[349660](349633 call _build_tuple(414391 call . this[349558] c"targetLocales")(349630 call . result[349618] c"localDoms"))) unknown isRngDomArr[349846] "maybe param" "temp"(349861 'move' isRngDomArr[349846](349859 call ||(349848 call isBoundedRange tmpIter[349660])(349857 call ||(349851 call isDomain tmpIter[349660])(349854 call isArray tmpIter[349660]))))
      if isRngDomArr[349846]
      { const _coforallCount[349690] "const" "end count" "temp"(349769 'move' _coforallCount[349690](349766 call _endCountAlloc 0)) unknown numTasks[349691] "temp"(349753 'move' numTasks[349691](349749 call . tmpIter[349660] c"size"))(349744 call _upEndCount _coforallCount[349690] 0 numTasks[349691]) unknown _indexOfInterest[349697] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349698] "expr temp" "temp"(349707 'move' _iterator[349698](349705 call _getIteratorZip tmpIter[349660]))
        Defer
        {
          {(349737 call _freeIterator _iterator[349698])
          }
        }
        { scopeless type(349712 'move' _indexOfInterest[349697](349709 call iteratorIndex _iterator[349698]))
        }
        ForLoop[349699]
        {(349717 call _check_tuple_var_decl _indexOfInterest[349697] 2) unknown loc[349723] "coforall index var" "index var" "insert auto destroy"(349725 'move' loc[349723](349721 call _indexOfInterest[349697] 0)) unknown locDom[349730] "coforall index var" "index var" "insert auto destroy"(349732 'move' locDom[349730](349728 call _indexOfInterest[349697] 1)) const tmp[349666] "const" "temp"(349668 'move' tmp[349666](349670 'deref'(349671 '_wide_get_locale' loc[349723])))
          {(349679 call = locDom[349730](349681 'new'(_chpl_manager = unmanaged[220](?))(349685 call LocReplicatedDom[414285](?) rank[349545] idxType[349550] stridable[349553])))(349692 call _downEndCount _coforallCount[349690] nil[44])(349674 'coforall on block' 0 tmp[349666])
          } label _continueLabel[349702] _indexOfInterest[349697] _iterator[349698]
        } label _breakLabel[349703]
        Defer
        {
          {(349756 call _endCountFree _coforallCount[349690])
          }
        }(349761 call _waitEndCount _coforallCount[349690] 0 numTasks[349691])
      }
      { const _coforallCount[349773] "const" "end count" "temp"(349843 'move' _coforallCount[349773](349840 call _endCountAlloc 0)) unknown _indexOfInterest[349780] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349781] "expr temp" "temp"(349790 'move' _iterator[349781](349788 call _getIteratorZip tmpIter[349660]))
        Defer
        {
          {(349820 call _freeIterator _iterator[349781])
          }
        }
        { scopeless type(349795 'move' _indexOfInterest[349780](349792 call iteratorIndex _iterator[349781]))
        }
        ForLoop[349782]
        {(349800 call _check_tuple_var_decl _indexOfInterest[349780] 2) unknown loc[349806] "coforall index var" "index var" "insert auto destroy"(349808 'move' loc[349806](349804 call _indexOfInterest[349780] 0)) unknown locDom[349813] "coforall index var" "index var" "insert auto destroy"(349815 'move' locDom[349813](349811 call _indexOfInterest[349780] 1))(349827 call _upEndCount _coforallCount[349773] 0) const tmp[349651] "const" "temp"(349653 'move' tmp[349651](349649 'deref'(349648 '_wide_get_locale' loc[349806])))
          {(349645 call = locDom[349813](349638 'new'(_chpl_manager = unmanaged[220](?))(349644 call LocReplicatedDom[414285](?) rank[349545] idxType[349550] stridable[349553])))(349775 call _downEndCount _coforallCount[349773] nil[44])(349656 'coforall on block' 0 tmp[349651])
          } label _continueLabel[349785] _indexOfInterest[349780] _iterator[349781]
        } label _breakLabel[349786]
        Defer
        {
          {(349831 call _endCountFree _coforallCount[349773])
          }
        }(349836 call _waitEndCount _coforallCount[349773] 0)
      }
    }(349871 call(349866 call . result[349618] c"dsiSetIndices") inds[349556])(349874 return result[349618])
  } function Replicated[348590].dsiIndexToLocale[349883](arg _mt[349888]:_MT[238], arg this[349885]:Replicated[348590] : Replicated[348590], arg indexx[349881]:_any[178](?)) : _unknown[51] "method"
  {(349892 return(414408 call here[90438]))
  }
  { scopeless type locale[28]
  } function ReplicatedDom[349125](?).dsiSetIndices[349903](arg _mt[349908]:_MT[238], arg this[349905]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg x[349901]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(349952 call _cond_test traceReplicatedDist[348558])
    {(349950 call writeln "ReplicatedDom.dsiSetIndices on "(349946 call _cast string[26](349944 'typeof' x[349901])) ": " x[349901])
    }(349965 call(414416 call . this[349905] c"dsiSetIndices")(349962 call chpl__buildDomainExpr(349960 'expand_tuple' x[349901])))
  }
  {(349921 call &&(349913 call isTuple x[349901])(349920 call isRange(349918 call x[349901] 0)))
  } function ReplicatedDom[349125](?).dsiSetIndices[349977](arg _mt[349982]:_MT[238], arg this[349979]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg domArg[349974] : _domain[125908](?)) : _unknown[51] "method" "no return value for void"
  {
    if(350008 call _cond_test traceReplicatedDist[348558])
    {(350006 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg[349974])
    }(350016 call =(414425 call . this[349979] c"domRep") domArg[349974])
    { unknown tmpIter[350045] "expr temp" "maybe ref" "no copy" "temp"(350048 'move' tmpIter[350045](414431 call . this[349979] c"localDoms")) unknown isRngDomArr[350201] "maybe param" "temp"(350216 'move' isRngDomArr[350201](350214 call ||(350203 call isBoundedRange tmpIter[350045])(350212 call ||(350206 call isDomain tmpIter[350045])(350209 call isArray tmpIter[350045]))))
      if isRngDomArr[350201]
      { const _coforallCount[350073] "const" "end count" "temp"(350138 'move' _coforallCount[350073](350135 call _endCountAlloc 0)) unknown numTasks[350074] "temp"(350122 'move' numTasks[350074](350118 call . tmpIter[350045] c"size"))(350113 call _upEndCount _coforallCount[350073] 0 numTasks[350074]) unknown _indexOfInterest[350080] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350081] "expr temp" "temp"(350090 'move' _iterator[350081](350088 call _getIterator tmpIter[350045]))
        Defer
        {
          {(350106 call _freeIterator _iterator[350081])
          }
        }
        { scopeless type(350095 'move' _indexOfInterest[350080](350092 call iteratorIndex _iterator[350081]))
        }
        ForLoop[350082]
        { unknown locDom[350099] "coforall index var" "index var" "insert auto destroy"(350101 'move' locDom[350099] _indexOfInterest[350080]) const tmp[350051] "const" "temp"(350053 'move' tmp[350051](350055 'deref'(350056 '_wide_get_locale' locDom[350099])))
          {(350064 call =(350066 call .(350068 call postfix! locDom[350099]) c"domLocalRep") domArg[349974])(350075 call _downEndCount _coforallCount[350073] nil[44])(350059 'coforall on block' 0 tmp[350051])
          } label _continueLabel[350085] _indexOfInterest[350080] _iterator[350081]
        } label _breakLabel[350086]
        Defer
        {
          {(350125 call _endCountFree _coforallCount[350073])
          }
        }(350130 call _waitEndCount _coforallCount[350073] 0 numTasks[350074])
      }
      { const _coforallCount[350142] "const" "end count" "temp"(350198 'move' _coforallCount[350142](350195 call _endCountAlloc 0)) unknown _indexOfInterest[350149] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350150] "expr temp" "temp"(350159 'move' _iterator[350150](350157 call _getIterator tmpIter[350045]))
        Defer
        {
          {(350175 call _freeIterator _iterator[350150])
          }
        }
        { scopeless type(350164 'move' _indexOfInterest[350149](350161 call iteratorIndex _iterator[350150]))
        }
        ForLoop[350151]
        { unknown locDom[350168] "coforall index var" "index var" "insert auto destroy"(350170 'move' locDom[350168] _indexOfInterest[350149])(350182 call _upEndCount _coforallCount[350142] 0) const tmp[350037] "const" "temp"(350039 'move' tmp[350037](350035 'deref'(350034 '_wide_get_locale' locDom[350168])))
          {(350031 call =(350027 call .(350023 call postfix! locDom[350168]) c"domLocalRep") domArg[349974])(350144 call _downEndCount _coforallCount[350142] nil[44])(350042 'coforall on block' 0 tmp[350037])
          } label _continueLabel[350154] _indexOfInterest[350149] _iterator[350150]
        } label _breakLabel[350155]
        Defer
        {
          {(350186 call _endCountFree _coforallCount[350142])
          }
        }(350191 call _waitEndCount _coforallCount[350142] 0)
      }
    }
  }
  { scopeless type void[4]
  } function ReplicatedDom[349125](?).dsiGetIndices[350226](arg _mt[350231]:_MT[238], arg this[350228]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method"
  {
    if(350267 call _cond_test traceReplicatedDist[348558])
    {(350265 call writeln "ReplicatedDom.dsiGetIndices")
    }(350281 return(350280 call(350276 call .(350275 call(414460 call . this[350228] c"redirectee")) c"getIndices")))
  }
  { scopeless type(350243 call *(414442 call . this[350228] c"rank")(350242 call range[64319](?)(414448 call . this[350228] c"idxType") bounded[64208](414453 call . this[350228] c"stridable")))
  } function ReplicatedDom[349125](?).these[350289](arg _mt[350294]:_MT[238], arg this[350291]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  { unknown dom[350299](350298 call(414464 call . this[350291] c"redirectee"))(350302 'end of statement')
    { unknown _indexOfInterest[350309] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350310] "expr temp" "temp"(350319 'move' _iterator[350310](350317 call _getIterator dom[350299]))
      Defer
      {
        {(350335 call _freeIterator _iterator[350310])
        }
      }
      { scopeless type(350324 'move' _indexOfInterest[350309](350321 call iteratorIndex _iterator[350310]))
      }
      ForLoop[350311]
      { unknown i[350328] "index var" "insert auto destroy"(350330 'move' i[350328] _indexOfInterest[350309])(350307 yield i[350328]) label _continueLabel[350314] _indexOfInterest[350309] _iterator[350310]
      } label _breakLabel[350315]
    }
  } function ReplicatedDom[349125](?).these[350351](arg _mt[350356]:_MT[238], arg this[350353]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), param arg tag[350348] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350381] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350382] "expr temp" "temp"(350391 'move' _iterator[350382](350389 call _getIterator(350377 call(350372 call .(350369 call .(350368 call(414474 call . this[350353] c"chpl_myLocDom")) c"domLocalRep") c"these") tag[350348])))
      Defer
      {
        {(350408 call _freeIterator _iterator[350382])
        }
      }
      { scopeless type(350397 'move' _indexOfInterest[350381](350394 call iteratorIndex _iterator[350382]))
      }
      ForLoop[350383]
      { unknown follow[350401] "index var" "insert auto destroy"(350403 'move' follow[350401] _indexOfInterest[350381])(350379 yield follow[350401]) label _continueLabel[350386] _indexOfInterest[350381] _iterator[350382]
      } label _breakLabel[350387]
    }
  }
  {(350363 call == tag[350348] leader[447])
  } function ReplicatedDom[349125](?).these[350426](arg _mt[350433]:_MT[238], arg this[350430]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), param arg tag[350423] : iterKind[453], arg followThis[350428]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350456] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350457] "expr temp" "temp"(350466 'move' _iterator[350457](350464 call _getIterator(350452 call(350446 call .(350445 call(414482 call . this[350430] c"redirectee")) c"these") tag[350423] followThis[350428])))
      Defer
      {
        {(350483 call _freeIterator _iterator[350457])
        }
      }
      { scopeless type(350472 'move' _indexOfInterest[350456](350469 call iteratorIndex _iterator[350457]))
      }
      ForLoop[350458]
      { unknown i[350476] "index var" "insert auto destroy"(350478 'move' i[350476] _indexOfInterest[350456])(350454 yield i[350476]) label _continueLabel[350461] _indexOfInterest[350456] _iterator[350457]
      } label _breakLabel[350462]
    }
  }
  {(350440 call == tag[350423] follower[449])
  } function ReplicatedDom[349125](?).dsiSerialWrite[350499](arg _mt[350504]:_MT[238], arg this[350501]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg f[350497]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(350518 call(350513 call .(350510 call .(350509 call(414489 call . this[350501] c"redirectee")) c"_value") c"dsiSerialWrite") f[350497])
  }
  { scopeless type void[4]
  } function ReplicatedDom[349125](?).dsiDims[350527](arg _mt[350532]:_MT[238], arg this[350529]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method"
  {(350554 return(350553 call(350549 call .(350548 call(414510 call . this[350529] c"redirectee")) c"dims")))
  }
  { scopeless type(350544 call *(414495 call . this[350529] c"rank")(350543 call range[64319](?)(414501 call . this[350529] c"idxType") bounded[64208](414506 call . this[350529] c"stridable")))
  } function ReplicatedDom[349125](?).dsiDim[350567](arg _mt[350572]:_MT[238], arg this[350569]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg dim[350564] : int(64)[13]) : _unknown[51] "method"
  {(350592 return(350591 call(350586 call .(350585 call(414525 call . this[350569] c"redirectee")) c"dim") dim[350564]))
  }
  { scopeless type(350582 call range[64319](?)(414516 call . this[350569] c"idxType") bounded[64208](414521 call . this[350569] c"stridable"))
  } function ReplicatedDom[349125](?).dsiLow[350601](arg _mt[350606]:_MT[238], arg this[350603]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "no parens"
  {(350614 return(350611 call .(350610 call(414530 call . this[350603] c"redirectee")) c"low"))
  } function ReplicatedDom[349125](?).dsiHigh[350622](arg _mt[350627]:_MT[238], arg this[350624]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "no parens"
  {(350635 return(350632 call .(350631 call(414534 call . this[350624] c"redirectee")) c"high"))
  } function ReplicatedDom[349125](?).dsiStride[350643](arg _mt[350648]:_MT[238], arg this[350645]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "no parens"
  {(350656 return(350653 call .(350652 call(414538 call . this[350645] c"redirectee")) c"stride"))
  } function ReplicatedDom[349125](?).dsiAlignedLow[350664](arg _mt[350669]:_MT[238], arg this[350666]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "no parens"
  {(350677 return(350674 call .(350673 call(414542 call . this[350666] c"redirectee")) c"alignedLow"))
  } function ReplicatedDom[349125](?).dsiAlignedHigh[350685](arg _mt[350690]:_MT[238], arg this[350687]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "no parens"
  {(350698 return(350695 call .(350694 call(414546 call . this[350687] c"redirectee")) c"alignedHigh"))
  } function ReplicatedDom[349125](?).dsiAlignment[350706](arg _mt[350711]:_MT[238], arg this[350708]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "no parens"
  {(350719 return(350716 call .(350715 call(414550 call . this[350708] c"redirectee")) c"alignment"))
  } function ReplicatedDom[349125](?).dsiNumIndices[350727](arg _mt[350732]:_MT[238], arg this[350729]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "no parens"
  {(350740 return(350737 call .(350736 call(414554 call . this[350729] c"redirectee")) c"size"))
  } function ReplicatedDom[349125](?).dsiMember[350750](arg _mt[350755]:_MT[238], arg this[350752]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg indexx[350748]:_any[178](?)) : _unknown[51] "method"
  {(350766 return(350765 call(350760 call .(350759 call(414558 call . this[350752] c"redirectee")) c"contains") indexx[350748]))
  } function ReplicatedDom[349125](?).dsiIndexOrder[350776](arg _mt[350781]:_MT[238], arg this[350778]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg indexx[350774]:_any[178](?)) : _unknown[51] "method"
  {(350792 return(350791 call(350786 call .(350785 call(414563 call . this[350778] c"redirectee")) c"dsiIndexOrder") indexx[350774]))
  } function ReplicatedDom[349125](?).dsiDestroyDom[350800](arg _mt[350805]:_MT[238], arg this[350802]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[350839] "expr temp" "maybe ref" "no copy" "temp"(350842 'move' tmpIter[350839](350809 call .(366888 call . this[350802] c"dist") c"targetLocDom")) unknown isRngDomArr[350996] "maybe param" "temp"(351011 'move' isRngDomArr[350996](351009 call ||(350998 call isBoundedRange tmpIter[350839])(351007 call ||(351001 call isDomain tmpIter[350839])(351004 call isArray tmpIter[350839]))))
      if isRngDomArr[350996]
      { const _coforallCount[350868] "const" "end count" "temp"(350933 'move' _coforallCount[350868](350930 call _endCountAlloc 0)) unknown numTasks[350869] "temp"(350917 'move' numTasks[350869](350913 call . tmpIter[350839] c"size"))(350908 call _upEndCount _coforallCount[350868] 0 numTasks[350869]) unknown _indexOfInterest[350875] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350876] "expr temp" "temp"(350885 'move' _iterator[350876](350883 call _getIterator tmpIter[350839]))
        Defer
        {
          {(350901 call _freeIterator _iterator[350876])
          }
        }
        { scopeless type(350890 'move' _indexOfInterest[350875](350887 call iteratorIndex _iterator[350876]))
        }
        ForLoop[350877]
        { unknown localeIdx[350894] "coforall index var" "index var" "insert auto destroy"(350896 'move' localeIdx[350894] _indexOfInterest[350875]) const tmp[350845] "const" "temp"(350847 'move' tmp[350845](350849 'deref'(350850 '_wide_get_locale'(350855 call(350852 call .(366898 call . this[350802] c"dist") c"targetLocales") localeIdx[350894]))))
          {(350863 call chpl__delete(350865 call(414577 call . this[350802] c"localDoms") localeIdx[350894]))(350870 call _downEndCount _coforallCount[350868] nil[44])(350858 'coforall on block' 0 tmp[350845])
          } label _continueLabel[350880] _indexOfInterest[350875] _iterator[350876]
        } label _breakLabel[350881]
        Defer
        {
          {(350920 call _endCountFree _coforallCount[350868])
          }
        }(350925 call _waitEndCount _coforallCount[350868] 0 numTasks[350869])
      }
      { const _coforallCount[350937] "const" "end count" "temp"(350993 'move' _coforallCount[350937](350990 call _endCountAlloc 0)) unknown _indexOfInterest[350944] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350945] "expr temp" "temp"(350954 'move' _iterator[350945](350952 call _getIterator tmpIter[350839]))
        Defer
        {
          {(350970 call _freeIterator _iterator[350945])
          }
        }
        { scopeless type(350959 'move' _indexOfInterest[350944](350956 call iteratorIndex _iterator[350945]))
        }
        ForLoop[350946]
        { unknown localeIdx[350963] "coforall index var" "index var" "insert auto destroy"(350965 'move' localeIdx[350963] _indexOfInterest[350944])(350977 call _upEndCount _coforallCount[350937] 0) const tmp[350830] "const" "temp"(350832 'move' tmp[350830](350828 'deref'(350827 '_wide_get_locale'(350818 call(350813 call .(366893 call . this[350802] c"dist") c"targetLocales") localeIdx[350963]))))
          {(350824 call chpl__delete(350822 call(414570 call . this[350802] c"localDoms") localeIdx[350963]))(350939 call _downEndCount _coforallCount[350937] nil[44])(350835 'coforall on block' 0 tmp[350830])
          } label _continueLabel[350949] _indexOfInterest[350944] _iterator[350945]
        } label _breakLabel[350950]
        Defer
        {
          {(350981 call _endCountFree _coforallCount[350937])
          }
        }(350986 call _waitEndCount _coforallCount[350937] 0)
      }
    }
  } function ReplicatedDom[349125](?).dsiAssignDomain[351025](arg _mt[351034]:_MT[238], arg this[351031]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg rhs[351022] : _domain[125908](?), arg lhsPrivate[351028] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(351047 call(351037 call . this[351031] c"dsiSetIndices")(351045 call(351041 call . rhs[351022] c"getIndices")))
  } function ReplicatedArr[351178](?).chpl_myLocArr[351095](arg _mt[351182]:_MT[238], arg this[351180]:ReplicatedArr[351178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351131 call _cond_test 1)
    {
      if(351126 call _cond_test(351114 call !(351113 call(351105 call .(351102 call .(351099 call .(366909 call . this[351180] c"dom") c"dist") c"targetLocDom") c"contains")(351109 call .(366912 call here[90438]) c"id"))))
      {(351124 call halt "locale "(351120 call .(366914 call here[90438]) c"id") " has no local replicand")
      }
    }(351146 return(351144 call postfix!(351143 call(414590 call . this[351180] c"localArrs")(351139 call .(366916 call here[90438]) c"id"))))
  } function ReplicatedArr[351178](?).replicand[351156](arg _mt[351186]:_MT[238], arg this[351184]:ReplicatedArr[351178](?), arg loc[351153] : locale[28]) ref : _unknown[51] "method" "primary method"
  {(351172 return(351169 call .(351165 call postfix!(351164 call(414595 call . this[351184] c"localArrs")(351160 call . loc[351153] c"id"))) c"arrLocalRep"))
  } type ReplicatedArr[351178](?) val super[355857]:AbsBaseArr[149740](?) "super class" const dom[351055] "const" unknown localArrs[351089](351087 call chpl__buildArrayRuntimeType(351085 call chpl__ensureDomainExpr(351063 call .(351060 call . dom[351055] c"dist") c"targetLocDom"))(351082 call unmanaged LocReplicatedArr?[415631](?) eltType[149714](351071 call . dom[351055] c"rank")(351075 call . dom[351055] c"idxType")(351079 call . dom[351055] c"stridable"))) type unmanaged ReplicatedArr[415637](?) type ReplicatedArr[414640](?) function _array[133594](?).replicand[351196](arg _mt[351201]:_MT[238], arg this[351198]:_array[133594](?) : _array[133594](?), arg loc[351193] : locale[28]) ref : _unknown[51] "method" "no doc"
  {(351210 return(351209 call(351204 call .(366920 call . this[351198] c"_value") c"replicand") loc[351193]))
  } function LocReplicatedArr[351462](?).init[351261](arg _mt[351466]:_MT[238], arg this[351464]:LocReplicatedArr[351462](?), arg eltType[351259]:_any[178](?), param arg rank[351264] : int(64)[13], arg idxType[351267]:_any[178](?), param arg stridable[351270] : bool[10], arg myDom[351280] :(351278 call unmanaged LocReplicatedDom[415634](?) rank[351264] idxType[351267] stridable[351270]), param arg initElts[351284] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(351292 call =(351288 call . this[351464] c"eltType") eltType[351259])(351301 call =(351297 call . this[351464] c"rank") rank[351264])(351309 call =(351305 call . this[351464] c"idxType") idxType[351267])(351317 call =(351313 call . this[351464] c"stridable") stridable[351270])(351327 call =(351323 call . this[351464] c"myDom") myDom[351280])(351349 call =(351331 call . this[351464] c"arrLocalRep")(351348 call(351341 call .(351338 call .(351335 call . this[351464] c"myDom") c"domLocalRep") c"buildArray") eltType[351259](initElts = 1)))
    if(351411 call _cond_test(351362 call &&(351354 call == initElts[351284] 0)(351360 call !(351359 call isPODType eltType[351259]))))
    {(351408 call compilerError(351405 call +(351386 call + "ReplicatedDist array initialization is not currently supported for element type "(351384 call _cast string[26] eltType[351259])) " - please default-initialize the array"))
    }
  } function LocReplicatedArr[351462](?).deinit[351419](arg _mt[351470]:_MT[238], arg this[351468]:LocReplicatedArr[351462](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {(351426 call _do_destroy_array(414619 call . this[351468] c"arrLocalRep")(deinitElts = 1))
  } function LocReplicatedArr[351462](?).writeThis[351435](arg _mt[351474]:_MT[238], arg this[351472]:LocReplicatedArr[351462](?), arg f[351433]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(351456 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  } type LocReplicatedArr[351462](?) val super[355859]:object[22] "super class" unknown eltType[351216] "type variable" unknown rank[351220] "param" int(64)[13] unknown idxType[351224] "type variable" unknown stridable[351228] "param" bool[10] unknown myDom[351239](351237 call unmanaged LocReplicatedDom[415634](?) rank[351220] idxType[351224] stridable[351228]) unknown arrLocalRep[351253] "local field" "no auto destroy" "unsafe"(351251 call chpl__buildArrayRuntimeType(351249 call chpl__ensureDomainExpr(351244 call . myDom[351239] c"domLocalRep")) eltType[351216]) type unmanaged LocReplicatedArr?[415631](?) type LocReplicatedArr?[415628](?) type LocReplicatedArr[414583](?) function ReplicatedArr[351178](?).init[351482](arg _mt[351489]:_MT[238], arg this[351486]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg eltType[351480]:_any[178](?), arg dom[351484]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(351498 call(351492 call .(366933 call . this[351486] c"super") c"init")(eltType = eltType[351480]))(351506 call =(351502 call . this[351486] c"dom") dom[351484])
  } function ReplicatedArr[351178](?).stridable[351514](arg _mt[351519]:_MT[238], arg this[351516]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) param : _unknown[51] "method" "no parens"
  {(351525 return(351522 call .(366939 call . this[351516] c"dom") c"stridable"))
  } function ReplicatedArr[351178](?).idxType[351533](arg _mt[351538]:_MT[238], arg this[351535]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) type : _unknown[51] "method" "no parens"
  {(351544 return(351541 call .(366944 call . this[351535] c"dom") c"idxType"))
  } function ReplicatedArr[351178](?).rank[351552](arg _mt[351557]:_MT[238], arg this[351554]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) param : _unknown[51] "method" "no parens"
  {(351563 return(351560 call .(366949 call . this[351554] c"dom") c"rank"))
  } function ReplicatedArr[351178](?).dsiGetBaseDom[351571](arg _mt[351576]:_MT[238], arg this[351573]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) : _unknown[51] "method" "method overrides"
  {(351579 return(414626 call . this[351573] c"dom"))
  } function ReplicatedArr[351178](?).dsiSupportsPrivatization[351587](arg _mt[351592]:_MT[238], arg this[351589]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) param : _unknown[51] "method" "method overrides"
  {(351595 return 1)
  } type ReplicatedArrPrvData[351610](?) unknown dompid[351601] unknown localArrs[351605] function ReplicatedArr[351178](?).dsiGetPrivatizeData[351616](arg _mt[351621]:_MT[238], arg this[351618]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) : _unknown[51] "method"
  {
    if(351645 call _cond_test traceReplicatedDist[348558])
    {(351643 call writeln "ReplicatedArr.dsiGetPrivatizeData")
    }(351660 return(351651 'new'(351659 call ReplicatedArrPrvData[351610](?)(351654 call .(366954 call . this[351618] c"dom") c"pid")(414633 call . this[351618] c"localArrs"))))
  } function ReplicatedArr[351178](?).dsiPrivatize[351669](arg _mt[351674]:_MT[238], arg this[351671]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg privatizeData[351667]:_any[178](?)) : _unknown[51] "method"
  {
    if(351699 call _cond_test traceReplicatedDist[348558])
    {(351697 call writeln "ReplicatedArr.dsiPrivatize on "(414637 call here[90438]))
    } unknown privdom[351717](351716 call chpl_getPrivatizedCopy(351710 'typeof'(351707 call . this[351671] c"dom"))(351713 call . privatizeData[351667] c"dompid"))(351720 'end of statement') unknown result[351729](351723 'new'(_chpl_manager = unmanaged[220](?))(351728 call ReplicatedArr[414640](?)(414645 call . this[351671] c"eltType") privdom[351717]))(351732 'end of statement')(351743 call =(351736 call . result[351729] c"localArrs")(351740 call . privatizeData[351667] c"localArrs"))(351747 return result[351729])
  } function ReplicatedDom[349125](?).dsiBuildArray[351756](arg _mt[351765]:_MT[238], arg this[351762]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg eltType[351754]:_any[178](?), param arg initElts[351759] : bool[10]) : _unknown[51] "method"
  {
    if(351799 call _cond_test traceReplicatedDist[348558])
    {(351797 call writeln "ReplicatedDom.dsiBuildArray")
    } unknown result[351816](351807 'new'(_chpl_manager = unmanaged[220](?))(351815 call ReplicatedArr[414640](?) eltType[351754](351814 call _to_unmanaged this[351762])))(351819 'end of statement')
    { unknown tmpIter[351869] "expr temp" "maybe ref" "no copy" "temp"(351872 'move' tmpIter[351869](351836 call _build_tuple(351827 call .(366963 call . this[351762] c"dist") c"targetLocales")(414659 call . this[351762] c"localDoms")(351833 call . result[351816] c"localArrs"))) unknown isRngDomArr[352075] "maybe param" "temp"(352090 'move' isRngDomArr[352075](352088 call ||(352077 call isBoundedRange tmpIter[351869])(352086 call ||(352080 call isDomain tmpIter[351869])(352083 call isArray tmpIter[351869]))))
      if isRngDomArr[352075]
      { const _coforallCount[351905] "const" "end count" "temp"(351991 'move' _coforallCount[351905](351988 call _endCountAlloc 0)) unknown numTasks[351906] "temp"(351975 'move' numTasks[351906](351971 call . tmpIter[351869] c"size"))(351966 call _upEndCount _coforallCount[351905] 0 numTasks[351906]) unknown _indexOfInterest[351912] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351913] "expr temp" "temp"(351922 'move' _iterator[351913](351920 call _getIteratorZip tmpIter[351869]))
        Defer
        {
          {(351959 call _freeIterator _iterator[351913])
          }
        }
        { scopeless type(351927 'move' _indexOfInterest[351912](351924 call iteratorIndex _iterator[351913]))
        }
        ForLoop[351914]
        {(351932 call _check_tuple_var_decl _indexOfInterest[351912] 3) unknown loc[351938] "coforall index var" "index var" "insert auto destroy"(351940 'move' loc[351938](351936 call _indexOfInterest[351912] 0)) unknown locDom[351945] "coforall index var" "index var" "insert auto destroy"(351947 'move' locDom[351945](351943 call _indexOfInterest[351912] 1)) unknown locArr[351952] "coforall index var" "index var" "insert auto destroy"(351954 'move' locArr[351952](351950 call _indexOfInterest[351912] 2)) const tmp[351875] "const" "temp"(351877 'move' tmp[351875](351879 'deref'(351880 '_wide_get_locale' loc[351938])))
          {(351888 call = locArr[351952](351890 'new'(_chpl_manager = unmanaged[220](?))(351894 call LocReplicatedArr[414583](?) eltType[351754](414689 call . this[351762] c"rank")(414694 call . this[351762] c"idxType")(414699 call . this[351762] c"stridable")(351900 call postfix! locDom[351945])(initElts = initElts[351759]))))(351907 call _downEndCount _coforallCount[351905] nil[44])(351883 'coforall on block' 0 tmp[351875])
          } label _continueLabel[351917] _indexOfInterest[351912] _iterator[351913]
        } label _breakLabel[351918]
        Defer
        {
          {(351978 call _endCountFree _coforallCount[351905])
          }
        }(351983 call _waitEndCount _coforallCount[351905] 0 numTasks[351906])
      }
      { const _coforallCount[351995] "const" "end count" "temp"(352072 'move' _coforallCount[351995](352069 call _endCountAlloc 0)) unknown _indexOfInterest[352002] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352003] "expr temp" "temp"(352012 'move' _iterator[352003](352010 call _getIteratorZip tmpIter[351869]))
        Defer
        {
          {(352049 call _freeIterator _iterator[352003])
          }
        }
        { scopeless type(352017 'move' _indexOfInterest[352002](352014 call iteratorIndex _iterator[352003]))
        }
        ForLoop[352004]
        {(352022 call _check_tuple_var_decl _indexOfInterest[352002] 3) unknown loc[352028] "coforall index var" "index var" "insert auto destroy"(352030 'move' loc[352028](352026 call _indexOfInterest[352002] 0)) unknown locDom[352035] "coforall index var" "index var" "insert auto destroy"(352037 'move' locDom[352035](352033 call _indexOfInterest[352002] 1)) unknown locArr[352042] "coforall index var" "index var" "insert auto destroy"(352044 'move' locArr[352042](352040 call _indexOfInterest[352002] 2))(352056 call _upEndCount _coforallCount[351995] 0) const tmp[351860] "const" "temp"(351862 'move' tmp[351860](351858 'deref'(351857 '_wide_get_locale' loc[352028])))
          {(351854 call = locArr[352042](351841 'new'(_chpl_manager = unmanaged[220](?))(351853 call LocReplicatedArr[414583](?) eltType[351754](414668 call . this[351762] c"rank")(414673 call . this[351762] c"idxType")(414678 call . this[351762] c"stridable")(351849 call postfix! locDom[352035])(initElts = initElts[351759]))))(351997 call _downEndCount _coforallCount[351995] nil[44])(351865 'coforall on block' 0 tmp[351860])
          } label _continueLabel[352007] _indexOfInterest[352002] _iterator[352003]
        } label _breakLabel[352008]
        Defer
        {
          {(352060 call _endCountFree _coforallCount[351995])
          }
        }(352065 call _waitEndCount _coforallCount[351995] 0)
      }
    }(352095 return result[351816])
  }
  { scopeless type(351775 call unmanaged ReplicatedArr[415637](?) eltType[351754](351774 call _to_unmanaged(351772 'typeof' this[351762])))
  } function ReplicatedArr[351178](?).dsiAccess[352105](arg _mt[352110]:_MT[238], arg this[352107]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg indexx[352103]:_any[178](?)) ref : _unknown[51] "method"
  {(352121 return(352120 call(352115 call .(352114 call(414708 call . this[352107] c"chpl_myLocArr")) c"arrLocalRep") indexx[352103]))
  } function ReplicatedArr[351178](?).dsiBoundsCheck[352131](arg _mt[352136]:_MT[238], arg this[352133]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg indexx[352129]:_any[178](?)) : _unknown[51] "method"
  {(352154 return(352153 call(352145 call .(352142 call .(352139 call .(366969 call . this[352133] c"dom") c"dist") c"targetLocDom") c"contains")(352149 call .(366972 call here[90438]) c"id")))
  } function ReplicatedArr[351178](?).dsiSerialWrite[352164](arg _mt[352169]:_MT[238], arg this[352166]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg f[352162]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352197 call(352192 call .(352189 call .(352186 call .(352184 call postfix!(352183 call(414714 call . this[352166] c"localArrs")(352179 call .(352178 call(352174 call . f[352162] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f[352162])
  }
  { scopeless type void[4]
  } function ReplicatedArr[351178](?).dsiSerialRead[352208](arg _mt[352215]:_MT[238], arg this[352212]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg f[352206]:_any[178](?), arg loc[352210]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352243 call(352238 call .(352235 call .(352232 call .(352230 call postfix!(352229 call(414720 call . this[352212] c"localArrs")(352225 call .(352224 call(352220 call . f[352206] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f[352206])
  }
  { scopeless type void[4]
  } function isReplicatedArr[352253](arg arr[352251]:_any[178](?)) param : _unknown[51]
  {(352267 return(354978 'is_subtype' ReplicatedArr[414640](?)(352263 'typeof'(352262 call _to_borrowed(352260 call chpl__getActualArray arr[352251])))))
  } function chpl_serialReadWriteRectangular[352276](arg f[352274]:_any[178](?), arg arr[352278]:_any[178](?), arg dom[352280]:_any[178](?)) : _unknown[51] "no return value for void"
  { const origloc[352292] "const"(352291 call(352287 call . f[352274] c"readWriteThisFromLocale"))(352295 'end of statement') const tmp[352308] "const" "temp"(352310 'move' tmp[352308](352306 'deref'(352305 '_wide_get_locale' origloc[352292])))
    {(352303 call chpl_serialReadWriteRectangularHelper f[352274] arr[352278] dom[352280])(352313 'on block' 0 tmp[352308])
    }
  }
  {(352285 call isReplicatedArr arr[352278])
  } function ReplicatedArr[351178](?).dsiElementInitializationComplete[352322](arg _mt[352327]:_MT[238], arg this[352324]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351178](?).dsiElementDeinitializationComplete[352335](arg _mt[352340]:_MT[238], arg this[352337]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351178](?).dsiDestroyArr[352352](arg _mt[352357]:_MT[238], arg this[352354]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg deinitElts[352349] : bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[352394] "expr temp" "maybe ref" "no copy" "temp"(352397 'move' tmpIter[352394](352373 call _build_tuple(352368 call .(352365 call .(366979 call . this[352354] c"dom") c"dist") c"targetLocales")(414733 call . this[352354] c"localArrs"))) unknown isRngDomArr[352572] "maybe param" "temp"(352587 'move' isRngDomArr[352572](352585 call ||(352574 call isBoundedRange tmpIter[352394])(352583 call ||(352577 call isDomain tmpIter[352394])(352580 call isArray tmpIter[352394]))))
      if isRngDomArr[352572]
      { const _coforallCount[352416] "const" "end count" "temp"(352495 'move' _coforallCount[352416](352492 call _endCountAlloc 0)) unknown numTasks[352417] "temp"(352479 'move' numTasks[352417](352475 call . tmpIter[352394] c"size"))(352470 call _upEndCount _coforallCount[352416] 0 numTasks[352417]) unknown _indexOfInterest[352423] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352424] "expr temp" "temp"(352433 'move' _iterator[352424](352431 call _getIteratorZip tmpIter[352394]))
        Defer
        {
          {(352463 call _freeIterator _iterator[352424])
          }
        }
        { scopeless type(352438 'move' _indexOfInterest[352423](352435 call iteratorIndex _iterator[352424]))
        }
        ForLoop[352425]
        {(352443 call _check_tuple_var_decl _indexOfInterest[352423] 2) unknown loc[352449] "coforall index var" "index var" "insert auto destroy"(352451 'move' loc[352449](352447 call _indexOfInterest[352423] 0)) unknown locArr[352456] "coforall index var" "index var" "insert auto destroy"(352458 'move' locArr[352456](352454 call _indexOfInterest[352423] 1)) const tmp[352400] "const" "temp"(352402 'move' tmp[352400](352404 'deref'(352405 '_wide_get_locale' loc[352449])))
          {
            {(352413 call chpl__delete locArr[352456])
            }(352418 call _downEndCount _coforallCount[352416] nil[44])(352408 'coforall on block' 0 tmp[352400])
          } label _continueLabel[352428] _indexOfInterest[352423] _iterator[352424]
        } label _breakLabel[352429]
        Defer
        {
          {(352482 call _endCountFree _coforallCount[352416])
          }
        }(352487 call _waitEndCount _coforallCount[352416] 0 numTasks[352417])
      }
      { const _coforallCount[352499] "const" "end count" "temp"(352569 'move' _coforallCount[352499](352566 call _endCountAlloc 0)) unknown _indexOfInterest[352506] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352507] "expr temp" "temp"(352516 'move' _iterator[352507](352514 call _getIteratorZip tmpIter[352394]))
        Defer
        {
          {(352546 call _freeIterator _iterator[352507])
          }
        }
        { scopeless type(352521 'move' _indexOfInterest[352506](352518 call iteratorIndex _iterator[352507]))
        }
        ForLoop[352508]
        {(352526 call _check_tuple_var_decl _indexOfInterest[352506] 2) unknown loc[352532] "coforall index var" "index var" "insert auto destroy"(352534 'move' loc[352532](352530 call _indexOfInterest[352506] 0)) unknown locArr[352539] "coforall index var" "index var" "insert auto destroy"(352541 'move' locArr[352539](352537 call _indexOfInterest[352506] 1))(352553 call _upEndCount _coforallCount[352499] 0) const tmp[352384] "const" "temp"(352386 'move' tmp[352384](352382 'deref'(352381 '_wide_get_locale' loc[352532])))
          {
            {(352377 call chpl__delete locArr[352539])
            }(352501 call _downEndCount _coforallCount[352499] nil[44])(352389 'coforall on block' 0 tmp[352384])
          } label _continueLabel[352511] _indexOfInterest[352506] _iterator[352507]
        } label _breakLabel[352512]
        Defer
        {
          {(352557 call _endCountFree _coforallCount[352499])
          }
        }(352562 call _waitEndCount _coforallCount[352499] 0)
      }
    }
  } function ReplicatedArr[351178](?).these[352597](arg _mt[352602]:_MT[238], arg this[352599]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352615] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352616] "expr temp" "temp"(352625 'move' _iterator[352616](352623 call _getIterator(352609 call .(352608 call(414746 call . this[352599] c"chpl_myLocArr")) c"arrLocalRep")))
      Defer
      {
        {(352642 call _freeIterator _iterator[352616])
        }
      }
      { scopeless type(352631 'move' _indexOfInterest[352615](352628 call iteratorIndex _iterator[352616]))
      }
      ForLoop[352617]
      { unknown a[352635] "index var" "insert auto destroy"(352637 'move' a[352635] _indexOfInterest[352615])(352613 yield a[352635]) label _continueLabel[352620] _indexOfInterest[352615] _iterator[352616]
      } label _breakLabel[352621]
    }
  }
  { scopeless type(414742 call . this[352599] c"eltType")
  } function ReplicatedArr[351178](?).these[352660](arg _mt[352665]:_MT[238], arg this[352662]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), param arg tag[352657] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352685] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352686] "expr temp" "temp"(352695 'move' _iterator[352686](352693 call _getIterator(352681 call(352676 call .(366985 call . this[352662] c"dom") c"these") tag[352657])))
      Defer
      {
        {(352712 call _freeIterator _iterator[352686])
        }
      }
      { scopeless type(352701 'move' _indexOfInterest[352685](352698 call iteratorIndex _iterator[352686]))
      }
      ForLoop[352687]
      { unknown follow[352705] "index var" "insert auto destroy"(352707 'move' follow[352705] _indexOfInterest[352685])(352683 yield follow[352705]) label _continueLabel[352690] _indexOfInterest[352685] _iterator[352686]
      } label _breakLabel[352691]
    }
  }
  {(352672 call == tag[352657] leader[447])
  } function ReplicatedArr[351178](?).these[352730](arg _mt[352737]:_MT[238], arg this[352734]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), param arg tag[352727] : iterKind[453], arg followThis[352732]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352763] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352764] "expr temp" "temp"(352773 'move' _iterator[352764](352771 call _getIterator(352759 call(352753 call .(352750 call .(352749 call(414757 call . this[352734] c"chpl_myLocArr")) c"arrLocalRep") c"these") tag[352727] followThis[352732])))
      Defer
      {
        {(352790 call _freeIterator _iterator[352764])
        }
      }
      { scopeless type(352779 'move' _indexOfInterest[352763](352776 call iteratorIndex _iterator[352764]))
      }
      ForLoop[352765]
      { unknown a[352783] "index var" "insert auto destroy"(352785 'move' a[352783] _indexOfInterest[352763])(352761 yield a[352783]) label _continueLabel[352768] _indexOfInterest[352763] _iterator[352764]
      } label _breakLabel[352769]
    }
  }
  {(352744 call == tag[352727] follower[449])
  } function Replicated[348590].dsiTargetLocales[352804](arg _mt[352809]:_MT[238], arg this[352806]:Replicated[348590] : Replicated[348590]) : _unknown[51] "method"
  {(352812 return(414765 call . this[352806] c"targetLocales"))
  } function ReplicatedDom[349125](?).dsiTargetLocales[352820](arg _mt[352825]:_MT[238], arg this[352822]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) : _unknown[51] "method"
  {(352831 return(352828 call .(366991 call . this[352822] c"dist") c"targetLocales"))
  } function ReplicatedArr[351178](?).dsiTargetLocales[352839](arg _mt[352844]:_MT[238], arg this[352841]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) : _unknown[51] "method"
  {(352853 return(352850 call .(352847 call .(366996 call . this[352841] c"dom") c"dist") c"targetLocales"))
  } function ReplicatedDom[349125](?).dsiHasSingleLocalSubdomain[352861](arg _mt[352866]:_MT[238], arg this[352863]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?)) param : _unknown[51] "method"
  {(352869 return 1)
  } function ReplicatedArr[351178](?).dsiHasSingleLocalSubdomain[352877](arg _mt[352882]:_MT[238], arg this[352879]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?)) param : _unknown[51] "method"
  {(352885 return 1)
  } function ReplicatedDom[349125](?).dsiLocalSubdomain[352897](arg _mt[352902]:_MT[238], arg this[352899]:ReplicatedDom[349125](?) : ReplicatedDom[349125](?), arg loc[352894] : locale[28]) : _unknown[51] "method"
  {
    if(352935 call _cond_test(352916 call(352908 call .(352905 call .(367001 call . this[352899] c"localDoms") c"_dom") c"contains")(352912 call . loc[352894] c"id")))
    {(352918 return(414770 call . this[352899] c"domRep"))
    }
    { unknown d[352927](352925 call chpl__buildDomainRuntimeType defaultDist[94053](414775 call . this[352899] c"rank")(414780 call . this[352899] c"idxType")(414785 call . this[352899] c"stridable"))(352930 'end of statement')(352933 return d[352927])
    }
  } function ReplicatedArr[351178](?).dsiLocalSubdomain[352950](arg _mt[352955]:_MT[238], arg this[352952]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg loc[352947] : locale[28]) : _unknown[51] "method"
  {
    if(352991 call _cond_test(352969 call(352961 call .(352958 call .(367007 call . this[352952] c"localArrs") c"_dom") c"contains")(352965 call . loc[352947] c"id")))
    {(352974 return(352971 call .(367013 call . this[352952] c"dom") c"domRep"))
    }
    { unknown d[352983](352981 call chpl__buildDomainRuntimeType defaultDist[94053](414791 call . this[352952] c"rank")(414795 call . this[352952] c"idxType")(414799 call . this[352952] c"stridable"))(352986 'end of statement')(352989 return d[352983])
    }
  } function ReplicatedArr[351178](?).dsiLocalSlice[353004](arg _mt[353009]:_MT[238], arg this[353006]:ReplicatedArr[351178](?) : ReplicatedArr[351178](?), arg ranges[353002]:_any[178](?)) : _unknown[51] "method"
  {(353021 return(353020 call(353014 call .(353013 call(414805 call . this[353006] c"chpl_myLocArr")) c"arrLocalRep")(353018 'expand_tuple' ranges[353002])))
  }(355640 'used modules list'(353124 'use' ChapelStandard[20267]))
}