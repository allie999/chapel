AST dump for ReplicatedDist after pass scopeResolve.
Module use list: ChapelStandard 

{ unknown traceReplicatedDist[348625] "config" "param" 0(348628 'end of statement') type Replicated[348657] val super[355919]:BaseDist[145968] "super class" unknown targetLocDom[348641](348639 call chpl__buildDomainRuntimeType defaultDist[94053](348636 'typeof'(348633 call .(366897 call here[90438]) c"id"))) const targetLocales[348652] "const"(348650 call chpl__buildArrayRuntimeType(348648 call chpl__ensureDomainExpr targetLocDom[348641]) locale[28]) type unmanaged Replicated[415692] type Replicated[411266](?) function Replicated[348657].init[348672](arg _mt[348699]:_MT[238], arg this[348696]:Replicated[348657] : Replicated[348657], arg targetLocales[348668] :(348664 call chpl__buildArrayRuntimeType nil[44] locale[28]) = Locales[113662], arg purposeMessage[348692] : string[26] = "used to create a Replicated") : _unknown[51] "method" "no return value for void"
  {(348706 call(348702 call . this[348696] c"complete"))
    { unknown _indexOfInterest[348740] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348741] "expr temp" "temp"(348750 'move' _iterator[348741](348748 call _getIterator targetLocales[348668]))
      Defer
      {
        {(348766 call _freeIterator _iterator[348741])
        }
      }
      { scopeless type(348755 'move' _indexOfInterest[348740](348752 call iteratorIndex _iterator[348741]))
      }
      ForLoop[348742]
      { unknown loc[348759] "index var" "insert auto destroy"(348761 'move' loc[348759] _indexOfInterest[348740])
        {(348723 call(348715 call .(348712 call . this[348696] c"targetLocDom") c"add")(348719 call . loc[348759] c"id"))(348737 call =(348735 call(348727 call . this[348696] c"targetLocales")(348731 call . loc[348759] c"id")) loc[348759])
        } label _continueLabel[348745] _indexOfInterest[348740] _iterator[348741]
      } label _breakLabel[348746]
    }
    if(348796 call _cond_test traceReplicatedDist[348625])
    {(348794 call writeln "Replicated initializer over " targetLocales[348668])
    }
  } function Replicated[348657].dsiEqualDMaps[348813](arg _mt[348818]:_MT[238], arg this[348815]:Replicated[348657] : Replicated[348657], arg that[348810] :(348809 call Replicated[411266](?) ?[260])) : _unknown[51] "method"
  {(348833 return(348832 call(348824 call .(348821 call . this[348815] c"targetLocales") c"equals")(348828 call . that[348810] c"targetLocales")))
  } function Replicated[348657].dsiEqualDMaps[348843](arg _mt[348848]:_MT[238], arg this[348845]:Replicated[348657] : Replicated[348657], arg that[348841]:_any[178](?)) param : _unknown[51] "method"
  {(348851 return 0)
  } function Replicated[348657].dsiDestroyDist[348859](arg _mt[348864]:_MT[238], arg this[348861]:Replicated[348657] : Replicated[348657]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function Replicated[348657].dsiSupportsPrivatization[348872](arg _mt[348877]:_MT[238], arg this[348874]:Replicated[348657] : Replicated[348657]) param : _unknown[51] "method" "method overrides"
  {(348880 return 1)
  } function Replicated[348657].dsiGetPrivatizeData[348888](arg _mt[348893]:_MT[238], arg this[348890]:Replicated[348657] : Replicated[348657]) : _unknown[51] "method"
  {
    if(348917 call _cond_test traceReplicatedDist[348625])
    {(348915 call writeln "Replicated.dsiGetPrivatizeData")
    }(348924 return 0)
  } function Replicated[348657].dsiPrivatize[348933](arg _mt[348938]:_MT[238], arg this[348935]:Replicated[348657] : Replicated[348657], arg privatizeData[348931]:_any[178](?)) : _unknown[51] "method"
  {
    if(348963 call _cond_test traceReplicatedDist[348625])
    {(348961 call writeln "Replicated.dsiPrivatize on "(414343 call here[90438]))
    } const otherTargetLocales[348973] "const"(348970 call . this[348935] c"targetLocales")(348976 'end of statement') const privDom[348981] "const"(348978 call . otherTargetLocales[348973] c"_dom")(348984 'end of statement') const privTargetLocales[348993] "const" otherTargetLocales[348973](348990 call chpl__buildArrayRuntimeType(348988 call chpl__ensureDomainExpr privDom[348981]) locale[28])(348996 'end of statement') const nonNilWrapper[349019] "const"(349015 for  loc[349017]  in  otherTargetLocales[348973] do
    { loc[349017]
    } )(349010 call chpl__buildArrayRuntimeType(349008 call chpl__ensureDomainExpr(349004 call #(348998 call chpl_build_low_bounded_range 0)(349001 call . privTargetLocales[348993] c"size"))) locale[28])(349022 'end of statement')(349047 return(349025 'new'(_chpl_manager = unmanaged[220](?))(349046 call Replicated[411266](?) nonNilWrapper[349019] "used during privatization")))
  } function ReplicatedDom[349192](?).numReplicands[349094](arg _mt[349196]:_MT[238], arg this[349194]:ReplicatedDom[349192](?)) : _unknown[51] "method" "primary method" "no parens"
  {(349100 return(349097 call .(366912 call . this[349194] c"localDoms") c"size"))
  } function ReplicatedDom[349192](?).chpl_myLocDom[349107](arg _mt[349200]:_MT[238], arg this[349198]:ReplicatedDom[349192](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(349172 call _cond_test 1)
    {
      if(349167 call _cond_test(349123 call !(349122 call(349114 call .(349111 call .(366917 call . this[349198] c"dist") c"targetLocDom") c"contains")(349118 call .(366920 call here[90438]) c"id"))))
      {(349165 call halt "locale "(349145 call .(366922 call here[90438]) c"id") " has no local replicand")
      }
    }(349187 return(349185 call postfix!(349184 call(414367 call . this[349198] c"localDoms")(349180 call .(366924 call here[90438]) c"id"))))
  } type ReplicatedDom[349192](?) val super[355921]:BaseRectangularDom[146935](?) "super class" const dist[349056] "const" unmanaged Replicated[415692] unknown domRep[349067](349065 call chpl__buildDomainRuntimeType defaultDist[94053] rank[146854] idxType[146858] stridable[146862]) unknown localDoms[349088](349086 call chpl__buildArrayRuntimeType(349084 call chpl__ensureDomainExpr(349072 call . dist[349056] c"targetLocDom"))(349081 call unmanaged LocReplicatedDom?[415698](?) rank[146854] idxType[146858] stridable[146862])) type ReplicatedDom[414416](?) type LocReplicatedDom[349229](?) val super[355923]:object[22] "super class" unknown rank[349205] "param" int(64)[13] unknown idxType[349209] "type variable" unknown stridable[349213] "param" bool[10] unknown domLocalRep[349224](349222 call chpl__buildDomainRuntimeType defaultDist[94053] rank[349205] idxType[349209] stridable[349213]) type unmanaged LocReplicatedDom[415707](?) type unmanaged LocReplicatedDom?[415698](?) type LocReplicatedDom?[415695](?) type LocReplicatedDom[414358](?) function ReplicatedDom[349192](?).redirectee[349235](arg _mt[349240]:_MT[238], arg this[349237]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method"
  {(349250 return(414392 call . this[349237] c"domRep"))
  }
  { scopeless type(349247 call chpl__buildDomainRuntimeType defaultDist[94053](414376 call . this[349237] c"rank")(414381 call . this[349237] c"idxType")(414386 call . this[349237] c"stridable"))
  } function ReplicatedDom[349192](?).dsiMyDist[349259](arg _mt[349264]:_MT[238], arg this[349261]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "method overrides"
  {(349267 return(414397 call . this[349261] c"dist"))
  } function ReplicatedDom[349192](?).dsiSupportsPrivatization[349275](arg _mt[349280]:_MT[238], arg this[349277]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) param : _unknown[51] "method" "method overrides"
  {(349283 return 1)
  } type ReplicatedDomPrvData[349302](?) unknown distpid[349289] unknown domRep[349293] unknown localDoms[349297] function ReplicatedDom[349192](?).dsiGetPrivatizeData[349308](arg _mt[349313]:_MT[238], arg this[349310]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method"
  {
    if(349337 call _cond_test traceReplicatedDist[348625])
    {(349335 call writeln "ReplicatedDom.dsiGetPrivatizeData")
    }(349353 return(349343 'new'(349352 call ReplicatedDomPrvData[349302](?)(349346 call .(366928 call . this[349310] c"dist") c"pid")(414404 call . this[349310] c"domRep")(414409 call . this[349310] c"localDoms"))))
  } function ReplicatedDom[349192](?).dsiPrivatize[349362](arg _mt[349367]:_MT[238], arg this[349364]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg privatizeData[349360]:_any[178](?)) : _unknown[51] "method"
  {
    if(349392 call _cond_test traceReplicatedDist[348625])
    {(349390 call writeln "ReplicatedDom.dsiPrivatize on "(414413 call here[90438]))
    } unknown privdist[349410](349409 call chpl_getPrivatizedCopy(349403 'typeof'(349400 call . this[349364] c"dist"))(349406 call . privatizeData[349360] c"distpid"))(349413 'end of statement')(349442 return(349416 'new'(_chpl_manager = unmanaged[220](?))(349441 call ReplicatedDom[414416](?)(rank =(414421 call . this[349364] c"rank"))(idxType =(414426 call . this[349364] c"idxType"))(stridable =(414431 call . this[349364] c"stridable"))(dist = privdist[349410])(domRep =(349430 call . privatizeData[349360] c"domRep"))(localDoms =(349437 call . privatizeData[349360] c"localDoms")))))
  } function ReplicatedDom[349192](?).dsiGetReprivatizeData[349449](arg _mt[349454]:_MT[238], arg this[349451]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method"
  {(349457 return(414437 call . this[349451] c"domRep"))
  } function ReplicatedDom[349192](?).dsiReprivatize[349467](arg _mt[349474]:_MT[238], arg this[349471]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg other[349465]:_any[178](?), arg reprivatizeData[349469]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(349513 call assert(349510 call &&(349498 call &&(349486 call ==(349479 call . this[349471] c"rank")(349483 call . other[349465] c"rank"))(349496 call ==(349489 call . this[349471] c"idxType")(349493 call . other[349465] c"idxType")))(349508 call ==(349501 call . this[349471] c"stridable")(349505 call . other[349465] c"stridable"))))(349521 call =(349517 call . this[349471] c"domRep") reprivatizeData[349469])
  }
  { scopeless type void[4]
  } function Replicated[348657].dsiClone[349530](arg _mt[349535]:_MT[238], arg this[349532]:Replicated[348657] : Replicated[348657]) : _unknown[51] "method"
  {
    if(349564 call _cond_test traceReplicatedDist[348625])
    {(349562 call writeln "Replicated.dsiClone")
    } unknown nonNilWrapper[349592](349588 for  loc[349590]  in (414446 call . this[349532] c"targetLocales") do
    { loc[349590]
    } )(349583 call chpl__buildArrayRuntimeType(349581 call chpl__ensureDomainExpr(349577 call #(349571 call chpl_build_low_bounded_range 0)(349574 call .(366944 call . this[349532] c"targetLocales") c"size"))) locale[28])(349595 'end of statement')(349603 return(349598 'new'(_chpl_manager = unmanaged[220](?))(349602 call Replicated[411266](?) nonNilWrapper[349592])))
  }
  { scopeless type(349541 call _to_unmanaged(349539 'typeof' this[349532]))
  } function Replicated[348657].dsiNewRectangularDom[349615](arg _mt[349628]:_MT[238], arg this[349625]:Replicated[348657] : Replicated[348657], param arg rank[349612] : int(64)[13], arg idxType[349617]:_any[178](?), param arg stridable[349620] : bool[10], arg inds[349623]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349662 call _cond_test traceReplicatedDist[348625])
    {(349660 call writeln "Replicated.dsiNewRectangularDom "(349658 call _build_tuple rank[349612](349653 call _cast string[26] idxType[349617]) stridable[349620] inds[349623]))
    } unknown result[349685](349670 'new'(_chpl_manager = unmanaged[220](?))(349684 call ReplicatedDom[414416](?)(rank = rank[349612])(idxType = idxType[349617])(stridable = stridable[349620])(dist =(349682 call _to_unmanaged this[349625]))))(349688 'end of statement')
    { unknown tmpIter[349727] "expr temp" "maybe ref" "no copy" "temp"(349730 'move' tmpIter[349727](349700 call _build_tuple(414464 call . this[349625] c"targetLocales")(349697 call . result[349685] c"localDoms"))) unknown isRngDomArr[349913] "maybe param" "temp"(349928 'move' isRngDomArr[349913](349926 call ||(349915 call isBoundedRange tmpIter[349727])(349924 call ||(349918 call isDomain tmpIter[349727])(349921 call isArray tmpIter[349727]))))
      if isRngDomArr[349913]
      { const _coforallCount[349757] "const" "end count" "temp"(349836 'move' _coforallCount[349757](349833 call _endCountAlloc 0)) unknown numTasks[349758] "temp"(349820 'move' numTasks[349758](349816 call . tmpIter[349727] c"size"))(349811 call _upEndCount _coforallCount[349757] 0 numTasks[349758]) unknown _indexOfInterest[349764] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349765] "expr temp" "temp"(349774 'move' _iterator[349765](349772 call _getIteratorZip tmpIter[349727]))
        Defer
        {
          {(349804 call _freeIterator _iterator[349765])
          }
        }
        { scopeless type(349779 'move' _indexOfInterest[349764](349776 call iteratorIndex _iterator[349765]))
        }
        ForLoop[349766]
        {(349784 call _check_tuple_var_decl _indexOfInterest[349764] 2) unknown loc[349790] "coforall index var" "index var" "insert auto destroy"(349792 'move' loc[349790](349788 call _indexOfInterest[349764] 0)) unknown locDom[349797] "coforall index var" "index var" "insert auto destroy"(349799 'move' locDom[349797](349795 call _indexOfInterest[349764] 1)) const tmp[349733] "const" "temp"(349735 'move' tmp[349733](349737 'deref'(349738 '_wide_get_locale' loc[349790])))
          {(349746 call = locDom[349797](349748 'new'(_chpl_manager = unmanaged[220](?))(349752 call LocReplicatedDom[414358](?) rank[349612] idxType[349617] stridable[349620])))(349759 call _downEndCount _coforallCount[349757] nil[44])(349741 'coforall on block' 0 tmp[349733])
          } label _continueLabel[349769] _indexOfInterest[349764] _iterator[349765]
        } label _breakLabel[349770]
        Defer
        {
          {(349823 call _endCountFree _coforallCount[349757])
          }
        }(349828 call _waitEndCount _coforallCount[349757] 0 numTasks[349758])
      }
      { const _coforallCount[349840] "const" "end count" "temp"(349910 'move' _coforallCount[349840](349907 call _endCountAlloc 0)) unknown _indexOfInterest[349847] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349848] "expr temp" "temp"(349857 'move' _iterator[349848](349855 call _getIteratorZip tmpIter[349727]))
        Defer
        {
          {(349887 call _freeIterator _iterator[349848])
          }
        }
        { scopeless type(349862 'move' _indexOfInterest[349847](349859 call iteratorIndex _iterator[349848]))
        }
        ForLoop[349849]
        {(349867 call _check_tuple_var_decl _indexOfInterest[349847] 2) unknown loc[349873] "coforall index var" "index var" "insert auto destroy"(349875 'move' loc[349873](349871 call _indexOfInterest[349847] 0)) unknown locDom[349880] "coforall index var" "index var" "insert auto destroy"(349882 'move' locDom[349880](349878 call _indexOfInterest[349847] 1))(349894 call _upEndCount _coforallCount[349840] 0) const tmp[349718] "const" "temp"(349720 'move' tmp[349718](349716 'deref'(349715 '_wide_get_locale' loc[349873])))
          {(349712 call = locDom[349880](349705 'new'(_chpl_manager = unmanaged[220](?))(349711 call LocReplicatedDom[414358](?) rank[349612] idxType[349617] stridable[349620])))(349842 call _downEndCount _coforallCount[349840] nil[44])(349723 'coforall on block' 0 tmp[349718])
          } label _continueLabel[349852] _indexOfInterest[349847] _iterator[349848]
        } label _breakLabel[349853]
        Defer
        {
          {(349898 call _endCountFree _coforallCount[349840])
          }
        }(349903 call _waitEndCount _coforallCount[349840] 0)
      }
    }(349938 call(349933 call . result[349685] c"dsiSetIndices") inds[349623])(349941 return result[349685])
  } function Replicated[348657].dsiIndexToLocale[349950](arg _mt[349955]:_MT[238], arg this[349952]:Replicated[348657] : Replicated[348657], arg indexx[349948]:_any[178](?)) : _unknown[51] "method"
  {(349959 return(414481 call here[90438]))
  }
  { scopeless type locale[28]
  } function ReplicatedDom[349192](?).dsiSetIndices[349970](arg _mt[349975]:_MT[238], arg this[349972]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg x[349968]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(350019 call _cond_test traceReplicatedDist[348625])
    {(350017 call writeln "ReplicatedDom.dsiSetIndices on "(350013 call _cast string[26](350011 'typeof' x[349968])) ": " x[349968])
    }(350032 call(414489 call . this[349972] c"dsiSetIndices")(350029 call chpl__buildDomainExpr(350027 'expand_tuple' x[349968])))
  }
  {(349988 call &&(349980 call isTuple x[349968])(349987 call isRange(349985 call x[349968] 0)))
  } function ReplicatedDom[349192](?).dsiSetIndices[350044](arg _mt[350049]:_MT[238], arg this[350046]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg domArg[350041] : _domain[125908](?)) : _unknown[51] "method" "no return value for void"
  {
    if(350075 call _cond_test traceReplicatedDist[348625])
    {(350073 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg[350041])
    }(350083 call =(414498 call . this[350046] c"domRep") domArg[350041])
    { unknown tmpIter[350112] "expr temp" "maybe ref" "no copy" "temp"(350115 'move' tmpIter[350112](414504 call . this[350046] c"localDoms")) unknown isRngDomArr[350268] "maybe param" "temp"(350283 'move' isRngDomArr[350268](350281 call ||(350270 call isBoundedRange tmpIter[350112])(350279 call ||(350273 call isDomain tmpIter[350112])(350276 call isArray tmpIter[350112]))))
      if isRngDomArr[350268]
      { const _coforallCount[350140] "const" "end count" "temp"(350205 'move' _coforallCount[350140](350202 call _endCountAlloc 0)) unknown numTasks[350141] "temp"(350189 'move' numTasks[350141](350185 call . tmpIter[350112] c"size"))(350180 call _upEndCount _coforallCount[350140] 0 numTasks[350141]) unknown _indexOfInterest[350147] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350148] "expr temp" "temp"(350157 'move' _iterator[350148](350155 call _getIterator tmpIter[350112]))
        Defer
        {
          {(350173 call _freeIterator _iterator[350148])
          }
        }
        { scopeless type(350162 'move' _indexOfInterest[350147](350159 call iteratorIndex _iterator[350148]))
        }
        ForLoop[350149]
        { unknown locDom[350166] "coforall index var" "index var" "insert auto destroy"(350168 'move' locDom[350166] _indexOfInterest[350147]) const tmp[350118] "const" "temp"(350120 'move' tmp[350118](350122 'deref'(350123 '_wide_get_locale' locDom[350166])))
          {(350131 call =(350133 call .(350135 call postfix! locDom[350166]) c"domLocalRep") domArg[350041])(350142 call _downEndCount _coforallCount[350140] nil[44])(350126 'coforall on block' 0 tmp[350118])
          } label _continueLabel[350152] _indexOfInterest[350147] _iterator[350148]
        } label _breakLabel[350153]
        Defer
        {
          {(350192 call _endCountFree _coforallCount[350140])
          }
        }(350197 call _waitEndCount _coforallCount[350140] 0 numTasks[350141])
      }
      { const _coforallCount[350209] "const" "end count" "temp"(350265 'move' _coforallCount[350209](350262 call _endCountAlloc 0)) unknown _indexOfInterest[350216] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350217] "expr temp" "temp"(350226 'move' _iterator[350217](350224 call _getIterator tmpIter[350112]))
        Defer
        {
          {(350242 call _freeIterator _iterator[350217])
          }
        }
        { scopeless type(350231 'move' _indexOfInterest[350216](350228 call iteratorIndex _iterator[350217]))
        }
        ForLoop[350218]
        { unknown locDom[350235] "coforall index var" "index var" "insert auto destroy"(350237 'move' locDom[350235] _indexOfInterest[350216])(350249 call _upEndCount _coforallCount[350209] 0) const tmp[350104] "const" "temp"(350106 'move' tmp[350104](350102 'deref'(350101 '_wide_get_locale' locDom[350235])))
          {(350098 call =(350094 call .(350090 call postfix! locDom[350235]) c"domLocalRep") domArg[350041])(350211 call _downEndCount _coforallCount[350209] nil[44])(350109 'coforall on block' 0 tmp[350104])
          } label _continueLabel[350221] _indexOfInterest[350216] _iterator[350217]
        } label _breakLabel[350222]
        Defer
        {
          {(350253 call _endCountFree _coforallCount[350209])
          }
        }(350258 call _waitEndCount _coforallCount[350209] 0)
      }
    }
  }
  { scopeless type void[4]
  } function ReplicatedDom[349192](?).dsiGetIndices[350293](arg _mt[350298]:_MT[238], arg this[350295]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method"
  {
    if(350334 call _cond_test traceReplicatedDist[348625])
    {(350332 call writeln "ReplicatedDom.dsiGetIndices")
    }(350348 return(350347 call(350343 call .(350342 call(414533 call . this[350295] c"redirectee")) c"getIndices")))
  }
  { scopeless type(350310 call *(414515 call . this[350295] c"rank")(350309 call range[64319](?)(414521 call . this[350295] c"idxType") bounded[64208](414526 call . this[350295] c"stridable")))
  } function ReplicatedDom[349192](?).these[350356](arg _mt[350361]:_MT[238], arg this[350358]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  { unknown dom[350366](350365 call(414537 call . this[350358] c"redirectee"))(350369 'end of statement')
    { unknown _indexOfInterest[350376] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350377] "expr temp" "temp"(350386 'move' _iterator[350377](350384 call _getIterator dom[350366]))
      Defer
      {
        {(350402 call _freeIterator _iterator[350377])
        }
      }
      { scopeless type(350391 'move' _indexOfInterest[350376](350388 call iteratorIndex _iterator[350377]))
      }
      ForLoop[350378]
      { unknown i[350395] "index var" "insert auto destroy"(350397 'move' i[350395] _indexOfInterest[350376])(350374 yield i[350395]) label _continueLabel[350381] _indexOfInterest[350376] _iterator[350377]
      } label _breakLabel[350382]
    }
  } function ReplicatedDom[349192](?).these[350418](arg _mt[350423]:_MT[238], arg this[350420]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), param arg tag[350415] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350448] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350449] "expr temp" "temp"(350458 'move' _iterator[350449](350456 call _getIterator(350444 call(350439 call .(350436 call .(350435 call(414547 call . this[350420] c"chpl_myLocDom")) c"domLocalRep") c"these") tag[350415])))
      Defer
      {
        {(350475 call _freeIterator _iterator[350449])
        }
      }
      { scopeless type(350464 'move' _indexOfInterest[350448](350461 call iteratorIndex _iterator[350449]))
      }
      ForLoop[350450]
      { unknown follow[350468] "index var" "insert auto destroy"(350470 'move' follow[350468] _indexOfInterest[350448])(350446 yield follow[350468]) label _continueLabel[350453] _indexOfInterest[350448] _iterator[350449]
      } label _breakLabel[350454]
    }
  }
  {(350430 call == tag[350415] leader[447])
  } function ReplicatedDom[349192](?).these[350493](arg _mt[350500]:_MT[238], arg this[350497]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), param arg tag[350490] : iterKind[453], arg followThis[350495]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350523] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350524] "expr temp" "temp"(350533 'move' _iterator[350524](350531 call _getIterator(350519 call(350513 call .(350512 call(414555 call . this[350497] c"redirectee")) c"these") tag[350490] followThis[350495])))
      Defer
      {
        {(350550 call _freeIterator _iterator[350524])
        }
      }
      { scopeless type(350539 'move' _indexOfInterest[350523](350536 call iteratorIndex _iterator[350524]))
      }
      ForLoop[350525]
      { unknown i[350543] "index var" "insert auto destroy"(350545 'move' i[350543] _indexOfInterest[350523])(350521 yield i[350543]) label _continueLabel[350528] _indexOfInterest[350523] _iterator[350524]
      } label _breakLabel[350529]
    }
  }
  {(350507 call == tag[350490] follower[449])
  } function ReplicatedDom[349192](?).dsiSerialWrite[350566](arg _mt[350571]:_MT[238], arg this[350568]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg f[350564]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(350585 call(350580 call .(350577 call .(350576 call(414562 call . this[350568] c"redirectee")) c"_value") c"dsiSerialWrite") f[350564])
  }
  { scopeless type void[4]
  } function ReplicatedDom[349192](?).dsiDims[350594](arg _mt[350599]:_MT[238], arg this[350596]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method"
  {(350621 return(350620 call(350616 call .(350615 call(414583 call . this[350596] c"redirectee")) c"dims")))
  }
  { scopeless type(350611 call *(414568 call . this[350596] c"rank")(350610 call range[64319](?)(414574 call . this[350596] c"idxType") bounded[64208](414579 call . this[350596] c"stridable")))
  } function ReplicatedDom[349192](?).dsiDim[350634](arg _mt[350639]:_MT[238], arg this[350636]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg dim[350631] : int(64)[13]) : _unknown[51] "method"
  {(350659 return(350658 call(350653 call .(350652 call(414598 call . this[350636] c"redirectee")) c"dim") dim[350631]))
  }
  { scopeless type(350649 call range[64319](?)(414589 call . this[350636] c"idxType") bounded[64208](414594 call . this[350636] c"stridable"))
  } function ReplicatedDom[349192](?).dsiLow[350668](arg _mt[350673]:_MT[238], arg this[350670]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "no parens"
  {(350681 return(350678 call .(350677 call(414603 call . this[350670] c"redirectee")) c"low"))
  } function ReplicatedDom[349192](?).dsiHigh[350689](arg _mt[350694]:_MT[238], arg this[350691]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "no parens"
  {(350702 return(350699 call .(350698 call(414607 call . this[350691] c"redirectee")) c"high"))
  } function ReplicatedDom[349192](?).dsiStride[350710](arg _mt[350715]:_MT[238], arg this[350712]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "no parens"
  {(350723 return(350720 call .(350719 call(414611 call . this[350712] c"redirectee")) c"stride"))
  } function ReplicatedDom[349192](?).dsiAlignedLow[350731](arg _mt[350736]:_MT[238], arg this[350733]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "no parens"
  {(350744 return(350741 call .(350740 call(414615 call . this[350733] c"redirectee")) c"alignedLow"))
  } function ReplicatedDom[349192](?).dsiAlignedHigh[350752](arg _mt[350757]:_MT[238], arg this[350754]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "no parens"
  {(350765 return(350762 call .(350761 call(414619 call . this[350754] c"redirectee")) c"alignedHigh"))
  } function ReplicatedDom[349192](?).dsiAlignment[350773](arg _mt[350778]:_MT[238], arg this[350775]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "no parens"
  {(350786 return(350783 call .(350782 call(414623 call . this[350775] c"redirectee")) c"alignment"))
  } function ReplicatedDom[349192](?).dsiNumIndices[350794](arg _mt[350799]:_MT[238], arg this[350796]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "no parens"
  {(350807 return(350804 call .(350803 call(414627 call . this[350796] c"redirectee")) c"size"))
  } function ReplicatedDom[349192](?).dsiMember[350817](arg _mt[350822]:_MT[238], arg this[350819]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg indexx[350815]:_any[178](?)) : _unknown[51] "method"
  {(350833 return(350832 call(350827 call .(350826 call(414631 call . this[350819] c"redirectee")) c"contains") indexx[350815]))
  } function ReplicatedDom[349192](?).dsiIndexOrder[350843](arg _mt[350848]:_MT[238], arg this[350845]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg indexx[350841]:_any[178](?)) : _unknown[51] "method"
  {(350859 return(350858 call(350853 call .(350852 call(414636 call . this[350845] c"redirectee")) c"dsiIndexOrder") indexx[350841]))
  } function ReplicatedDom[349192](?).dsiDestroyDom[350867](arg _mt[350872]:_MT[238], arg this[350869]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[350906] "expr temp" "maybe ref" "no copy" "temp"(350909 'move' tmpIter[350906](350876 call .(366956 call . this[350869] c"dist") c"targetLocDom")) unknown isRngDomArr[351063] "maybe param" "temp"(351078 'move' isRngDomArr[351063](351076 call ||(351065 call isBoundedRange tmpIter[350906])(351074 call ||(351068 call isDomain tmpIter[350906])(351071 call isArray tmpIter[350906]))))
      if isRngDomArr[351063]
      { const _coforallCount[350935] "const" "end count" "temp"(351000 'move' _coforallCount[350935](350997 call _endCountAlloc 0)) unknown numTasks[350936] "temp"(350984 'move' numTasks[350936](350980 call . tmpIter[350906] c"size"))(350975 call _upEndCount _coforallCount[350935] 0 numTasks[350936]) unknown _indexOfInterest[350942] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350943] "expr temp" "temp"(350952 'move' _iterator[350943](350950 call _getIterator tmpIter[350906]))
        Defer
        {
          {(350968 call _freeIterator _iterator[350943])
          }
        }
        { scopeless type(350957 'move' _indexOfInterest[350942](350954 call iteratorIndex _iterator[350943]))
        }
        ForLoop[350944]
        { unknown localeIdx[350961] "coforall index var" "index var" "insert auto destroy"(350963 'move' localeIdx[350961] _indexOfInterest[350942]) const tmp[350912] "const" "temp"(350914 'move' tmp[350912](350916 'deref'(350917 '_wide_get_locale'(350922 call(350919 call .(366966 call . this[350869] c"dist") c"targetLocales") localeIdx[350961]))))
          {(350930 call chpl__delete(350932 call(414650 call . this[350869] c"localDoms") localeIdx[350961]))(350937 call _downEndCount _coforallCount[350935] nil[44])(350925 'coforall on block' 0 tmp[350912])
          } label _continueLabel[350947] _indexOfInterest[350942] _iterator[350943]
        } label _breakLabel[350948]
        Defer
        {
          {(350987 call _endCountFree _coforallCount[350935])
          }
        }(350992 call _waitEndCount _coforallCount[350935] 0 numTasks[350936])
      }
      { const _coforallCount[351004] "const" "end count" "temp"(351060 'move' _coforallCount[351004](351057 call _endCountAlloc 0)) unknown _indexOfInterest[351011] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351012] "expr temp" "temp"(351021 'move' _iterator[351012](351019 call _getIterator tmpIter[350906]))
        Defer
        {
          {(351037 call _freeIterator _iterator[351012])
          }
        }
        { scopeless type(351026 'move' _indexOfInterest[351011](351023 call iteratorIndex _iterator[351012]))
        }
        ForLoop[351013]
        { unknown localeIdx[351030] "coforall index var" "index var" "insert auto destroy"(351032 'move' localeIdx[351030] _indexOfInterest[351011])(351044 call _upEndCount _coforallCount[351004] 0) const tmp[350897] "const" "temp"(350899 'move' tmp[350897](350895 'deref'(350894 '_wide_get_locale'(350885 call(350880 call .(366961 call . this[350869] c"dist") c"targetLocales") localeIdx[351030]))))
          {(350891 call chpl__delete(350889 call(414643 call . this[350869] c"localDoms") localeIdx[351030]))(351006 call _downEndCount _coforallCount[351004] nil[44])(350902 'coforall on block' 0 tmp[350897])
          } label _continueLabel[351016] _indexOfInterest[351011] _iterator[351012]
        } label _breakLabel[351017]
        Defer
        {
          {(351048 call _endCountFree _coforallCount[351004])
          }
        }(351053 call _waitEndCount _coforallCount[351004] 0)
      }
    }
  } function ReplicatedDom[349192](?).dsiAssignDomain[351092](arg _mt[351101]:_MT[238], arg this[351098]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg rhs[351089] : _domain[125908](?), arg lhsPrivate[351095] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(351114 call(351104 call . this[351098] c"dsiSetIndices")(351112 call(351108 call . rhs[351089] c"getIndices")))
  } function ReplicatedArr[351245](?).chpl_myLocArr[351162](arg _mt[351249]:_MT[238], arg this[351247]:ReplicatedArr[351245](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351198 call _cond_test 1)
    {
      if(351193 call _cond_test(351181 call !(351180 call(351172 call .(351169 call .(351166 call .(366977 call . this[351247] c"dom") c"dist") c"targetLocDom") c"contains")(351176 call .(366980 call here[90438]) c"id"))))
      {(351191 call halt "locale "(351187 call .(366982 call here[90438]) c"id") " has no local replicand")
      }
    }(351213 return(351211 call postfix!(351210 call(414663 call . this[351247] c"localArrs")(351206 call .(366984 call here[90438]) c"id"))))
  } function ReplicatedArr[351245](?).replicand[351223](arg _mt[351253]:_MT[238], arg this[351251]:ReplicatedArr[351245](?), arg loc[351220] : locale[28]) ref : _unknown[51] "method" "primary method"
  {(351239 return(351236 call .(351232 call postfix!(351231 call(414668 call . this[351251] c"localArrs")(351227 call . loc[351220] c"id"))) c"arrLocalRep"))
  } type ReplicatedArr[351245](?) val super[355925]:AbsBaseArr[149740](?) "super class" const dom[351122] "const" unknown localArrs[351156](351154 call chpl__buildArrayRuntimeType(351152 call chpl__ensureDomainExpr(351130 call .(351127 call . dom[351122] c"dist") c"targetLocDom"))(351149 call unmanaged LocReplicatedArr?[415704](?) eltType[149714](351138 call . dom[351122] c"rank")(351142 call . dom[351122] c"idxType")(351146 call . dom[351122] c"stridable"))) type unmanaged ReplicatedArr[415710](?) type ReplicatedArr[414713](?) function _array[133594](?).replicand[351263](arg _mt[351268]:_MT[238], arg this[351265]:_array[133594](?) : _array[133594](?), arg loc[351260] : locale[28]) ref : _unknown[51] "method" "no doc"
  {(351277 return(351276 call(351271 call .(366988 call . this[351265] c"_value") c"replicand") loc[351260]))
  } function LocReplicatedArr[351529](?).init[351328](arg _mt[351533]:_MT[238], arg this[351531]:LocReplicatedArr[351529](?), arg eltType[351326]:_any[178](?), param arg rank[351331] : int(64)[13], arg idxType[351334]:_any[178](?), param arg stridable[351337] : bool[10], arg myDom[351347] :(351345 call unmanaged LocReplicatedDom[415707](?) rank[351331] idxType[351334] stridable[351337]), param arg initElts[351351] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(351359 call =(351355 call . this[351531] c"eltType") eltType[351326])(351368 call =(351364 call . this[351531] c"rank") rank[351331])(351376 call =(351372 call . this[351531] c"idxType") idxType[351334])(351384 call =(351380 call . this[351531] c"stridable") stridable[351337])(351394 call =(351390 call . this[351531] c"myDom") myDom[351347])(351416 call =(351398 call . this[351531] c"arrLocalRep")(351415 call(351408 call .(351405 call .(351402 call . this[351531] c"myDom") c"domLocalRep") c"buildArray") eltType[351326](initElts = 1)))
    if(351478 call _cond_test(351429 call &&(351421 call == initElts[351351] 0)(351427 call !(351426 call isPODType eltType[351326]))))
    {(351475 call compilerError(351472 call +(351453 call + "ReplicatedDist array initialization is not currently supported for element type "(351451 call _cast string[26] eltType[351326])) " - please default-initialize the array"))
    }
  } function LocReplicatedArr[351529](?).deinit[351486](arg _mt[351537]:_MT[238], arg this[351535]:LocReplicatedArr[351529](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {(351493 call _do_destroy_array(414692 call . this[351535] c"arrLocalRep")(deinitElts = 1))
  } function LocReplicatedArr[351529](?).writeThis[351502](arg _mt[351541]:_MT[238], arg this[351539]:LocReplicatedArr[351529](?), arg f[351500]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(351523 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  } type LocReplicatedArr[351529](?) val super[355927]:object[22] "super class" unknown eltType[351283] "type variable" unknown rank[351287] "param" int(64)[13] unknown idxType[351291] "type variable" unknown stridable[351295] "param" bool[10] unknown myDom[351306](351304 call unmanaged LocReplicatedDom[415707](?) rank[351287] idxType[351291] stridable[351295]) unknown arrLocalRep[351320] "local field" "no auto destroy" "unsafe"(351318 call chpl__buildArrayRuntimeType(351316 call chpl__ensureDomainExpr(351311 call . myDom[351306] c"domLocalRep")) eltType[351283]) type unmanaged LocReplicatedArr?[415704](?) type LocReplicatedArr?[415701](?) type LocReplicatedArr[414656](?) function ReplicatedArr[351245](?).init[351549](arg _mt[351556]:_MT[238], arg this[351553]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg eltType[351547]:_any[178](?), arg dom[351551]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(351565 call(351559 call .(367001 call . this[351553] c"super") c"init")(eltType = eltType[351547]))(351573 call =(351569 call . this[351553] c"dom") dom[351551])
  } function ReplicatedArr[351245](?).stridable[351581](arg _mt[351586]:_MT[238], arg this[351583]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) param : _unknown[51] "method" "no parens"
  {(351592 return(351589 call .(367007 call . this[351583] c"dom") c"stridable"))
  } function ReplicatedArr[351245](?).idxType[351600](arg _mt[351605]:_MT[238], arg this[351602]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) type : _unknown[51] "method" "no parens"
  {(351611 return(351608 call .(367012 call . this[351602] c"dom") c"idxType"))
  } function ReplicatedArr[351245](?).rank[351619](arg _mt[351624]:_MT[238], arg this[351621]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) param : _unknown[51] "method" "no parens"
  {(351630 return(351627 call .(367017 call . this[351621] c"dom") c"rank"))
  } function ReplicatedArr[351245](?).dsiGetBaseDom[351638](arg _mt[351643]:_MT[238], arg this[351640]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) : _unknown[51] "method" "method overrides"
  {(351646 return(414699 call . this[351640] c"dom"))
  } function ReplicatedArr[351245](?).dsiSupportsPrivatization[351654](arg _mt[351659]:_MT[238], arg this[351656]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) param : _unknown[51] "method" "method overrides"
  {(351662 return 1)
  } type ReplicatedArrPrvData[351677](?) unknown dompid[351668] unknown localArrs[351672] function ReplicatedArr[351245](?).dsiGetPrivatizeData[351683](arg _mt[351688]:_MT[238], arg this[351685]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) : _unknown[51] "method"
  {
    if(351712 call _cond_test traceReplicatedDist[348625])
    {(351710 call writeln "ReplicatedArr.dsiGetPrivatizeData")
    }(351727 return(351718 'new'(351726 call ReplicatedArrPrvData[351677](?)(351721 call .(367022 call . this[351685] c"dom") c"pid")(414706 call . this[351685] c"localArrs"))))
  } function ReplicatedArr[351245](?).dsiPrivatize[351736](arg _mt[351741]:_MT[238], arg this[351738]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg privatizeData[351734]:_any[178](?)) : _unknown[51] "method"
  {
    if(351766 call _cond_test traceReplicatedDist[348625])
    {(351764 call writeln "ReplicatedArr.dsiPrivatize on "(414710 call here[90438]))
    } unknown privdom[351784](351783 call chpl_getPrivatizedCopy(351777 'typeof'(351774 call . this[351738] c"dom"))(351780 call . privatizeData[351734] c"dompid"))(351787 'end of statement') unknown result[351796](351790 'new'(_chpl_manager = unmanaged[220](?))(351795 call ReplicatedArr[414713](?)(414718 call . this[351738] c"eltType") privdom[351784]))(351799 'end of statement')(351810 call =(351803 call . result[351796] c"localArrs")(351807 call . privatizeData[351734] c"localArrs"))(351814 return result[351796])
  } function ReplicatedDom[349192](?).dsiBuildArray[351823](arg _mt[351832]:_MT[238], arg this[351829]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg eltType[351821]:_any[178](?), param arg initElts[351826] : bool[10]) : _unknown[51] "method"
  {
    if(351866 call _cond_test traceReplicatedDist[348625])
    {(351864 call writeln "ReplicatedDom.dsiBuildArray")
    } unknown result[351883](351874 'new'(_chpl_manager = unmanaged[220](?))(351882 call ReplicatedArr[414713](?) eltType[351821](351881 call _to_unmanaged this[351829])))(351886 'end of statement')
    { unknown tmpIter[351936] "expr temp" "maybe ref" "no copy" "temp"(351939 'move' tmpIter[351936](351903 call _build_tuple(351894 call .(367031 call . this[351829] c"dist") c"targetLocales")(414732 call . this[351829] c"localDoms")(351900 call . result[351883] c"localArrs"))) unknown isRngDomArr[352142] "maybe param" "temp"(352157 'move' isRngDomArr[352142](352155 call ||(352144 call isBoundedRange tmpIter[351936])(352153 call ||(352147 call isDomain tmpIter[351936])(352150 call isArray tmpIter[351936]))))
      if isRngDomArr[352142]
      { const _coforallCount[351972] "const" "end count" "temp"(352058 'move' _coforallCount[351972](352055 call _endCountAlloc 0)) unknown numTasks[351973] "temp"(352042 'move' numTasks[351973](352038 call . tmpIter[351936] c"size"))(352033 call _upEndCount _coforallCount[351972] 0 numTasks[351973]) unknown _indexOfInterest[351979] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351980] "expr temp" "temp"(351989 'move' _iterator[351980](351987 call _getIteratorZip tmpIter[351936]))
        Defer
        {
          {(352026 call _freeIterator _iterator[351980])
          }
        }
        { scopeless type(351994 'move' _indexOfInterest[351979](351991 call iteratorIndex _iterator[351980]))
        }
        ForLoop[351981]
        {(351999 call _check_tuple_var_decl _indexOfInterest[351979] 3) unknown loc[352005] "coforall index var" "index var" "insert auto destroy"(352007 'move' loc[352005](352003 call _indexOfInterest[351979] 0)) unknown locDom[352012] "coforall index var" "index var" "insert auto destroy"(352014 'move' locDom[352012](352010 call _indexOfInterest[351979] 1)) unknown locArr[352019] "coforall index var" "index var" "insert auto destroy"(352021 'move' locArr[352019](352017 call _indexOfInterest[351979] 2)) const tmp[351942] "const" "temp"(351944 'move' tmp[351942](351946 'deref'(351947 '_wide_get_locale' loc[352005])))
          {(351955 call = locArr[352019](351957 'new'(_chpl_manager = unmanaged[220](?))(351961 call LocReplicatedArr[414656](?) eltType[351821](414762 call . this[351829] c"rank")(414767 call . this[351829] c"idxType")(414772 call . this[351829] c"stridable")(351967 call postfix! locDom[352012])(initElts = initElts[351826]))))(351974 call _downEndCount _coforallCount[351972] nil[44])(351950 'coforall on block' 0 tmp[351942])
          } label _continueLabel[351984] _indexOfInterest[351979] _iterator[351980]
        } label _breakLabel[351985]
        Defer
        {
          {(352045 call _endCountFree _coforallCount[351972])
          }
        }(352050 call _waitEndCount _coforallCount[351972] 0 numTasks[351973])
      }
      { const _coforallCount[352062] "const" "end count" "temp"(352139 'move' _coforallCount[352062](352136 call _endCountAlloc 0)) unknown _indexOfInterest[352069] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352070] "expr temp" "temp"(352079 'move' _iterator[352070](352077 call _getIteratorZip tmpIter[351936]))
        Defer
        {
          {(352116 call _freeIterator _iterator[352070])
          }
        }
        { scopeless type(352084 'move' _indexOfInterest[352069](352081 call iteratorIndex _iterator[352070]))
        }
        ForLoop[352071]
        {(352089 call _check_tuple_var_decl _indexOfInterest[352069] 3) unknown loc[352095] "coforall index var" "index var" "insert auto destroy"(352097 'move' loc[352095](352093 call _indexOfInterest[352069] 0)) unknown locDom[352102] "coforall index var" "index var" "insert auto destroy"(352104 'move' locDom[352102](352100 call _indexOfInterest[352069] 1)) unknown locArr[352109] "coforall index var" "index var" "insert auto destroy"(352111 'move' locArr[352109](352107 call _indexOfInterest[352069] 2))(352123 call _upEndCount _coforallCount[352062] 0) const tmp[351927] "const" "temp"(351929 'move' tmp[351927](351925 'deref'(351924 '_wide_get_locale' loc[352095])))
          {(351921 call = locArr[352109](351908 'new'(_chpl_manager = unmanaged[220](?))(351920 call LocReplicatedArr[414656](?) eltType[351821](414741 call . this[351829] c"rank")(414746 call . this[351829] c"idxType")(414751 call . this[351829] c"stridable")(351916 call postfix! locDom[352102])(initElts = initElts[351826]))))(352064 call _downEndCount _coforallCount[352062] nil[44])(351932 'coforall on block' 0 tmp[351927])
          } label _continueLabel[352074] _indexOfInterest[352069] _iterator[352070]
        } label _breakLabel[352075]
        Defer
        {
          {(352127 call _endCountFree _coforallCount[352062])
          }
        }(352132 call _waitEndCount _coforallCount[352062] 0)
      }
    }(352162 return result[351883])
  }
  { scopeless type(351842 call unmanaged ReplicatedArr[415710](?) eltType[351821](351841 call _to_unmanaged(351839 'typeof' this[351829])))
  } function ReplicatedArr[351245](?).dsiAccess[352172](arg _mt[352177]:_MT[238], arg this[352174]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg indexx[352170]:_any[178](?)) ref : _unknown[51] "method"
  {(352188 return(352187 call(352182 call .(352181 call(414781 call . this[352174] c"chpl_myLocArr")) c"arrLocalRep") indexx[352170]))
  } function ReplicatedArr[351245](?).dsiBoundsCheck[352198](arg _mt[352203]:_MT[238], arg this[352200]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg indexx[352196]:_any[178](?)) : _unknown[51] "method"
  {(352221 return(352220 call(352212 call .(352209 call .(352206 call .(367037 call . this[352200] c"dom") c"dist") c"targetLocDom") c"contains")(352216 call .(367040 call here[90438]) c"id")))
  } function ReplicatedArr[351245](?).dsiSerialWrite[352231](arg _mt[352236]:_MT[238], arg this[352233]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg f[352229]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352264 call(352259 call .(352256 call .(352253 call .(352251 call postfix!(352250 call(414787 call . this[352233] c"localArrs")(352246 call .(352245 call(352241 call . f[352229] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f[352229])
  }
  { scopeless type void[4]
  } function ReplicatedArr[351245](?).dsiSerialRead[352275](arg _mt[352282]:_MT[238], arg this[352279]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg f[352273]:_any[178](?), arg loc[352277]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352310 call(352305 call .(352302 call .(352299 call .(352297 call postfix!(352296 call(414793 call . this[352279] c"localArrs")(352292 call .(352291 call(352287 call . f[352273] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f[352273])
  }
  { scopeless type void[4]
  } function isReplicatedArr[352320](arg arr[352318]:_any[178](?)) param : _unknown[51]
  {(352334 return(355046 'is_subtype' ReplicatedArr[414713](?)(352330 'typeof'(352329 call _to_borrowed(352327 call chpl__getActualArray arr[352318])))))
  } function chpl_serialReadWriteRectangular[352343](arg f[352341]:_any[178](?), arg arr[352345]:_any[178](?), arg dom[352347]:_any[178](?)) : _unknown[51] "no return value for void"
  { const origloc[352359] "const"(352358 call(352354 call . f[352341] c"readWriteThisFromLocale"))(352362 'end of statement') const tmp[352375] "const" "temp"(352377 'move' tmp[352375](352373 'deref'(352372 '_wide_get_locale' origloc[352359])))
    {(352370 call chpl_serialReadWriteRectangularHelper f[352341] arr[352345] dom[352347])(352380 'on block' 0 tmp[352375])
    }
  }
  {(352352 call isReplicatedArr arr[352345])
  } function ReplicatedArr[351245](?).dsiElementInitializationComplete[352389](arg _mt[352394]:_MT[238], arg this[352391]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351245](?).dsiElementDeinitializationComplete[352402](arg _mt[352407]:_MT[238], arg this[352404]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351245](?).dsiDestroyArr[352419](arg _mt[352424]:_MT[238], arg this[352421]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg deinitElts[352416] : bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[352461] "expr temp" "maybe ref" "no copy" "temp"(352464 'move' tmpIter[352461](352440 call _build_tuple(352435 call .(352432 call .(367047 call . this[352421] c"dom") c"dist") c"targetLocales")(414806 call . this[352421] c"localArrs"))) unknown isRngDomArr[352639] "maybe param" "temp"(352654 'move' isRngDomArr[352639](352652 call ||(352641 call isBoundedRange tmpIter[352461])(352650 call ||(352644 call isDomain tmpIter[352461])(352647 call isArray tmpIter[352461]))))
      if isRngDomArr[352639]
      { const _coforallCount[352483] "const" "end count" "temp"(352562 'move' _coforallCount[352483](352559 call _endCountAlloc 0)) unknown numTasks[352484] "temp"(352546 'move' numTasks[352484](352542 call . tmpIter[352461] c"size"))(352537 call _upEndCount _coforallCount[352483] 0 numTasks[352484]) unknown _indexOfInterest[352490] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352491] "expr temp" "temp"(352500 'move' _iterator[352491](352498 call _getIteratorZip tmpIter[352461]))
        Defer
        {
          {(352530 call _freeIterator _iterator[352491])
          }
        }
        { scopeless type(352505 'move' _indexOfInterest[352490](352502 call iteratorIndex _iterator[352491]))
        }
        ForLoop[352492]
        {(352510 call _check_tuple_var_decl _indexOfInterest[352490] 2) unknown loc[352516] "coforall index var" "index var" "insert auto destroy"(352518 'move' loc[352516](352514 call _indexOfInterest[352490] 0)) unknown locArr[352523] "coforall index var" "index var" "insert auto destroy"(352525 'move' locArr[352523](352521 call _indexOfInterest[352490] 1)) const tmp[352467] "const" "temp"(352469 'move' tmp[352467](352471 'deref'(352472 '_wide_get_locale' loc[352516])))
          {
            {(352480 call chpl__delete locArr[352523])
            }(352485 call _downEndCount _coforallCount[352483] nil[44])(352475 'coforall on block' 0 tmp[352467])
          } label _continueLabel[352495] _indexOfInterest[352490] _iterator[352491]
        } label _breakLabel[352496]
        Defer
        {
          {(352549 call _endCountFree _coforallCount[352483])
          }
        }(352554 call _waitEndCount _coforallCount[352483] 0 numTasks[352484])
      }
      { const _coforallCount[352566] "const" "end count" "temp"(352636 'move' _coforallCount[352566](352633 call _endCountAlloc 0)) unknown _indexOfInterest[352573] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352574] "expr temp" "temp"(352583 'move' _iterator[352574](352581 call _getIteratorZip tmpIter[352461]))
        Defer
        {
          {(352613 call _freeIterator _iterator[352574])
          }
        }
        { scopeless type(352588 'move' _indexOfInterest[352573](352585 call iteratorIndex _iterator[352574]))
        }
        ForLoop[352575]
        {(352593 call _check_tuple_var_decl _indexOfInterest[352573] 2) unknown loc[352599] "coforall index var" "index var" "insert auto destroy"(352601 'move' loc[352599](352597 call _indexOfInterest[352573] 0)) unknown locArr[352606] "coforall index var" "index var" "insert auto destroy"(352608 'move' locArr[352606](352604 call _indexOfInterest[352573] 1))(352620 call _upEndCount _coforallCount[352566] 0) const tmp[352451] "const" "temp"(352453 'move' tmp[352451](352449 'deref'(352448 '_wide_get_locale' loc[352599])))
          {
            {(352444 call chpl__delete locArr[352606])
            }(352568 call _downEndCount _coforallCount[352566] nil[44])(352456 'coforall on block' 0 tmp[352451])
          } label _continueLabel[352578] _indexOfInterest[352573] _iterator[352574]
        } label _breakLabel[352579]
        Defer
        {
          {(352624 call _endCountFree _coforallCount[352566])
          }
        }(352629 call _waitEndCount _coforallCount[352566] 0)
      }
    }
  } function ReplicatedArr[351245](?).these[352664](arg _mt[352669]:_MT[238], arg this[352666]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352682] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352683] "expr temp" "temp"(352692 'move' _iterator[352683](352690 call _getIterator(352676 call .(352675 call(414819 call . this[352666] c"chpl_myLocArr")) c"arrLocalRep")))
      Defer
      {
        {(352709 call _freeIterator _iterator[352683])
        }
      }
      { scopeless type(352698 'move' _indexOfInterest[352682](352695 call iteratorIndex _iterator[352683]))
      }
      ForLoop[352684]
      { unknown a[352702] "index var" "insert auto destroy"(352704 'move' a[352702] _indexOfInterest[352682])(352680 yield a[352702]) label _continueLabel[352687] _indexOfInterest[352682] _iterator[352683]
      } label _breakLabel[352688]
    }
  }
  { scopeless type(414815 call . this[352666] c"eltType")
  } function ReplicatedArr[351245](?).these[352727](arg _mt[352732]:_MT[238], arg this[352729]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), param arg tag[352724] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352752] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352753] "expr temp" "temp"(352762 'move' _iterator[352753](352760 call _getIterator(352748 call(352743 call .(367053 call . this[352729] c"dom") c"these") tag[352724])))
      Defer
      {
        {(352779 call _freeIterator _iterator[352753])
        }
      }
      { scopeless type(352768 'move' _indexOfInterest[352752](352765 call iteratorIndex _iterator[352753]))
      }
      ForLoop[352754]
      { unknown follow[352772] "index var" "insert auto destroy"(352774 'move' follow[352772] _indexOfInterest[352752])(352750 yield follow[352772]) label _continueLabel[352757] _indexOfInterest[352752] _iterator[352753]
      } label _breakLabel[352758]
    }
  }
  {(352739 call == tag[352724] leader[447])
  } function ReplicatedArr[351245](?).these[352797](arg _mt[352804]:_MT[238], arg this[352801]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), param arg tag[352794] : iterKind[453], arg followThis[352799]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352830] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352831] "expr temp" "temp"(352840 'move' _iterator[352831](352838 call _getIterator(352826 call(352820 call .(352817 call .(352816 call(414830 call . this[352801] c"chpl_myLocArr")) c"arrLocalRep") c"these") tag[352794] followThis[352799])))
      Defer
      {
        {(352857 call _freeIterator _iterator[352831])
        }
      }
      { scopeless type(352846 'move' _indexOfInterest[352830](352843 call iteratorIndex _iterator[352831]))
      }
      ForLoop[352832]
      { unknown a[352850] "index var" "insert auto destroy"(352852 'move' a[352850] _indexOfInterest[352830])(352828 yield a[352850]) label _continueLabel[352835] _indexOfInterest[352830] _iterator[352831]
      } label _breakLabel[352836]
    }
  }
  {(352811 call == tag[352794] follower[449])
  } function Replicated[348657].dsiTargetLocales[352871](arg _mt[352876]:_MT[238], arg this[352873]:Replicated[348657] : Replicated[348657]) : _unknown[51] "method"
  {(352879 return(414838 call . this[352873] c"targetLocales"))
  } function ReplicatedDom[349192](?).dsiTargetLocales[352887](arg _mt[352892]:_MT[238], arg this[352889]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) : _unknown[51] "method"
  {(352898 return(352895 call .(367059 call . this[352889] c"dist") c"targetLocales"))
  } function ReplicatedArr[351245](?).dsiTargetLocales[352906](arg _mt[352911]:_MT[238], arg this[352908]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) : _unknown[51] "method"
  {(352920 return(352917 call .(352914 call .(367064 call . this[352908] c"dom") c"dist") c"targetLocales"))
  } function ReplicatedDom[349192](?).dsiHasSingleLocalSubdomain[352928](arg _mt[352933]:_MT[238], arg this[352930]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?)) param : _unknown[51] "method"
  {(352936 return 1)
  } function ReplicatedArr[351245](?).dsiHasSingleLocalSubdomain[352944](arg _mt[352949]:_MT[238], arg this[352946]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?)) param : _unknown[51] "method"
  {(352952 return 1)
  } function ReplicatedDom[349192](?).dsiLocalSubdomain[352964](arg _mt[352969]:_MT[238], arg this[352966]:ReplicatedDom[349192](?) : ReplicatedDom[349192](?), arg loc[352961] : locale[28]) : _unknown[51] "method"
  {
    if(353002 call _cond_test(352983 call(352975 call .(352972 call .(367069 call . this[352966] c"localDoms") c"_dom") c"contains")(352979 call . loc[352961] c"id")))
    {(352985 return(414843 call . this[352966] c"domRep"))
    }
    { unknown d[352994](352992 call chpl__buildDomainRuntimeType defaultDist[94053](414848 call . this[352966] c"rank")(414853 call . this[352966] c"idxType")(414858 call . this[352966] c"stridable"))(352997 'end of statement')(353000 return d[352994])
    }
  } function ReplicatedArr[351245](?).dsiLocalSubdomain[353017](arg _mt[353022]:_MT[238], arg this[353019]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg loc[353014] : locale[28]) : _unknown[51] "method"
  {
    if(353058 call _cond_test(353036 call(353028 call .(353025 call .(367075 call . this[353019] c"localArrs") c"_dom") c"contains")(353032 call . loc[353014] c"id")))
    {(353041 return(353038 call .(367081 call . this[353019] c"dom") c"domRep"))
    }
    { unknown d[353050](353048 call chpl__buildDomainRuntimeType defaultDist[94053](414864 call . this[353019] c"rank")(414868 call . this[353019] c"idxType")(414872 call . this[353019] c"stridable"))(353053 'end of statement')(353056 return d[353050])
    }
  } function ReplicatedArr[351245](?).dsiLocalSlice[353071](arg _mt[353076]:_MT[238], arg this[353073]:ReplicatedArr[351245](?) : ReplicatedArr[351245](?), arg ranges[353069]:_any[178](?)) : _unknown[51] "method"
  {(353088 return(353087 call(353081 call .(353080 call(414878 call . this[353073] c"chpl_myLocArr")) c"arrLocalRep")(353085 'expand_tuple' ranges[353069])))
  }(355708 'used modules list'(353191 'use' ChapelStandard[20267]))
}