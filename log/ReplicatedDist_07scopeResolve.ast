AST dump for ReplicatedDist after pass scopeResolve.
Module use list: ChapelStandard 

{ unknown traceReplicatedDist[348428] "config" "param" 0(348431 'end of statement') type Replicated[348460] val super[355720]:BaseDist[145926] "super class" unknown targetLocDom[348444](348442 call chpl__buildDomainRuntimeType defaultDist[94050](348439 'typeof'(348436 call .(366698 call here[90435]) c"id"))) const targetLocales[348455] "const"(348453 call chpl__buildArrayRuntimeType(348451 call chpl__ensureDomainExpr targetLocDom[348444]) locale[28]) type unmanaged Replicated[415487] type Replicated[411061](?) function Replicated[348460].init[348475](arg _mt[348502]:_MT[238], arg this[348499]:Replicated[348460] : Replicated[348460], arg targetLocales[348471] :(348467 call chpl__buildArrayRuntimeType nil[44] locale[28]) = Locales[113656], arg purposeMessage[348495] : string[26] = "used to create a Replicated") : _unknown[51] "method" "no return value for void"
  {(348509 call(348505 call . this[348499] c"complete"))
    { unknown _indexOfInterest[348543] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348544] "expr temp" "temp"(348553 'move' _iterator[348544](348551 call _getIterator targetLocales[348471]))
      Defer
      {
        {(348569 call _freeIterator _iterator[348544])
        }
      }
      { scopeless type(348558 'move' _indexOfInterest[348543](348555 call iteratorIndex _iterator[348544]))
      }
      ForLoop[348545]
      { unknown loc[348562] "index var" "insert auto destroy"(348564 'move' loc[348562] _indexOfInterest[348543])
        {(348526 call(348518 call .(348515 call . this[348499] c"targetLocDom") c"add")(348522 call . loc[348562] c"id"))(348540 call =(348538 call(348530 call . this[348499] c"targetLocales")(348534 call . loc[348562] c"id")) loc[348562])
        } label _continueLabel[348548] _indexOfInterest[348543] _iterator[348544]
      } label _breakLabel[348549]
    }
    if(348599 call _cond_test traceReplicatedDist[348428])
    {(348597 call writeln "Replicated initializer over " targetLocales[348471])
    }
  } function Replicated[348460].dsiEqualDMaps[348616](arg _mt[348621]:_MT[238], arg this[348618]:Replicated[348460] : Replicated[348460], arg that[348613] :(348612 call Replicated[411061](?) ?[260])) : _unknown[51] "method"
  {(348636 return(348635 call(348627 call .(348624 call . this[348618] c"targetLocales") c"equals")(348631 call . that[348613] c"targetLocales")))
  } function Replicated[348460].dsiEqualDMaps[348646](arg _mt[348651]:_MT[238], arg this[348648]:Replicated[348460] : Replicated[348460], arg that[348644]:_any[178](?)) param : _unknown[51] "method"
  {(348654 return 0)
  } function Replicated[348460].dsiDestroyDist[348662](arg _mt[348667]:_MT[238], arg this[348664]:Replicated[348460] : Replicated[348460]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function Replicated[348460].dsiSupportsPrivatization[348675](arg _mt[348680]:_MT[238], arg this[348677]:Replicated[348460] : Replicated[348460]) param : _unknown[51] "method" "method overrides"
  {(348683 return 1)
  } function Replicated[348460].dsiGetPrivatizeData[348691](arg _mt[348696]:_MT[238], arg this[348693]:Replicated[348460] : Replicated[348460]) : _unknown[51] "method"
  {
    if(348720 call _cond_test traceReplicatedDist[348428])
    {(348718 call writeln "Replicated.dsiGetPrivatizeData")
    }(348727 return 0)
  } function Replicated[348460].dsiPrivatize[348736](arg _mt[348741]:_MT[238], arg this[348738]:Replicated[348460] : Replicated[348460], arg privatizeData[348734]:_any[178](?)) : _unknown[51] "method"
  {
    if(348766 call _cond_test traceReplicatedDist[348428])
    {(348764 call writeln "Replicated.dsiPrivatize on "(414138 call here[90435]))
    } const otherTargetLocales[348776] "const"(348773 call . this[348738] c"targetLocales")(348779 'end of statement') const privDom[348784] "const"(348781 call . otherTargetLocales[348776] c"_dom")(348787 'end of statement') const privTargetLocales[348796] "const" otherTargetLocales[348776](348793 call chpl__buildArrayRuntimeType(348791 call chpl__ensureDomainExpr privDom[348784]) locale[28])(348799 'end of statement') const nonNilWrapper[348822] "const"(348818 for  loc[348820]  in  otherTargetLocales[348776] do
    { loc[348820]
    } )(348813 call chpl__buildArrayRuntimeType(348811 call chpl__ensureDomainExpr(348807 call #(348801 call chpl_build_low_bounded_range 0)(348804 call . privTargetLocales[348796] c"size"))) locale[28])(348825 'end of statement')(348850 return(348828 'new'(_chpl_manager = unmanaged[220](?))(348849 call Replicated[411061](?) nonNilWrapper[348822] "used during privatization")))
  } function ReplicatedDom[348995](?).numReplicands[348897](arg _mt[348999]:_MT[238], arg this[348997]:ReplicatedDom[348995](?)) : _unknown[51] "method" "primary method" "no parens"
  {(348903 return(348900 call .(366713 call . this[348997] c"localDoms") c"size"))
  } function ReplicatedDom[348995](?).chpl_myLocDom[348910](arg _mt[349003]:_MT[238], arg this[349001]:ReplicatedDom[348995](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(348975 call _cond_test 1)
    {
      if(348970 call _cond_test(348926 call !(348925 call(348917 call .(348914 call .(366718 call . this[349001] c"dist") c"targetLocDom") c"contains")(348921 call .(366721 call here[90435]) c"id"))))
      {(348968 call halt "locale "(348948 call .(366723 call here[90435]) c"id") " has no local replicand")
      }
    }(348990 return(348988 call postfix!(348987 call(414162 call . this[349001] c"localDoms")(348983 call .(366725 call here[90435]) c"id"))))
  } type ReplicatedDom[348995](?) val super[355722]:BaseRectangularDom[146893](?) "super class" const dist[348859] "const" unmanaged Replicated[415487] unknown domRep[348870](348868 call chpl__buildDomainRuntimeType defaultDist[94050] rank[146812] idxType[146816] stridable[146820]) unknown localDoms[348891](348889 call chpl__buildArrayRuntimeType(348887 call chpl__ensureDomainExpr(348875 call . dist[348859] c"targetLocDom"))(348884 call unmanaged LocReplicatedDom?[415493](?) rank[146812] idxType[146816] stridable[146820])) type ReplicatedDom[414211](?) type LocReplicatedDom[349032](?) val super[355724]:object[22] "super class" unknown rank[349008] "param" int(64)[13] unknown idxType[349012] "type variable" unknown stridable[349016] "param" bool[10] unknown domLocalRep[349027](349025 call chpl__buildDomainRuntimeType defaultDist[94050] rank[349008] idxType[349012] stridable[349016]) type unmanaged LocReplicatedDom[415502](?) type unmanaged LocReplicatedDom?[415493](?) type LocReplicatedDom?[415490](?) type LocReplicatedDom[414153](?) function ReplicatedDom[348995](?).redirectee[349038](arg _mt[349043]:_MT[238], arg this[349040]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method"
  {(349053 return(414187 call . this[349040] c"domRep"))
  }
  { scopeless type(349050 call chpl__buildDomainRuntimeType defaultDist[94050](414171 call . this[349040] c"rank")(414176 call . this[349040] c"idxType")(414181 call . this[349040] c"stridable"))
  } function ReplicatedDom[348995](?).dsiMyDist[349062](arg _mt[349067]:_MT[238], arg this[349064]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "method overrides"
  {(349070 return(414192 call . this[349064] c"dist"))
  } function ReplicatedDom[348995](?).dsiSupportsPrivatization[349078](arg _mt[349083]:_MT[238], arg this[349080]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) param : _unknown[51] "method" "method overrides"
  {(349086 return 1)
  } type ReplicatedDomPrvData[349105](?) unknown distpid[349092] unknown domRep[349096] unknown localDoms[349100] function ReplicatedDom[348995](?).dsiGetPrivatizeData[349111](arg _mt[349116]:_MT[238], arg this[349113]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method"
  {
    if(349140 call _cond_test traceReplicatedDist[348428])
    {(349138 call writeln "ReplicatedDom.dsiGetPrivatizeData")
    }(349156 return(349146 'new'(349155 call ReplicatedDomPrvData[349105](?)(349149 call .(366729 call . this[349113] c"dist") c"pid")(414199 call . this[349113] c"domRep")(414204 call . this[349113] c"localDoms"))))
  } function ReplicatedDom[348995](?).dsiPrivatize[349165](arg _mt[349170]:_MT[238], arg this[349167]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg privatizeData[349163]:_any[178](?)) : _unknown[51] "method"
  {
    if(349195 call _cond_test traceReplicatedDist[348428])
    {(349193 call writeln "ReplicatedDom.dsiPrivatize on "(414208 call here[90435]))
    } unknown privdist[349213](349212 call chpl_getPrivatizedCopy(349206 'typeof'(349203 call . this[349167] c"dist"))(349209 call . privatizeData[349163] c"distpid"))(349216 'end of statement')(349245 return(349219 'new'(_chpl_manager = unmanaged[220](?))(349244 call ReplicatedDom[414211](?)(rank =(414216 call . this[349167] c"rank"))(idxType =(414221 call . this[349167] c"idxType"))(stridable =(414226 call . this[349167] c"stridable"))(dist = privdist[349213])(domRep =(349233 call . privatizeData[349163] c"domRep"))(localDoms =(349240 call . privatizeData[349163] c"localDoms")))))
  } function ReplicatedDom[348995](?).dsiGetReprivatizeData[349252](arg _mt[349257]:_MT[238], arg this[349254]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method"
  {(349260 return(414232 call . this[349254] c"domRep"))
  } function ReplicatedDom[348995](?).dsiReprivatize[349270](arg _mt[349277]:_MT[238], arg this[349274]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg other[349268]:_any[178](?), arg reprivatizeData[349272]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(349316 call assert(349313 call &&(349301 call &&(349289 call ==(349282 call . this[349274] c"rank")(349286 call . other[349268] c"rank"))(349299 call ==(349292 call . this[349274] c"idxType")(349296 call . other[349268] c"idxType")))(349311 call ==(349304 call . this[349274] c"stridable")(349308 call . other[349268] c"stridable"))))(349324 call =(349320 call . this[349274] c"domRep") reprivatizeData[349272])
  }
  { scopeless type void[4]
  } function Replicated[348460].dsiClone[349333](arg _mt[349338]:_MT[238], arg this[349335]:Replicated[348460] : Replicated[348460]) : _unknown[51] "method"
  {
    if(349367 call _cond_test traceReplicatedDist[348428])
    {(349365 call writeln "Replicated.dsiClone")
    } unknown nonNilWrapper[349395](349391 for  loc[349393]  in (414241 call . this[349335] c"targetLocales") do
    { loc[349393]
    } )(349386 call chpl__buildArrayRuntimeType(349384 call chpl__ensureDomainExpr(349380 call #(349374 call chpl_build_low_bounded_range 0)(349377 call .(366745 call . this[349335] c"targetLocales") c"size"))) locale[28])(349398 'end of statement')(349406 return(349401 'new'(_chpl_manager = unmanaged[220](?))(349405 call Replicated[411061](?) nonNilWrapper[349395])))
  }
  { scopeless type(349344 call _to_unmanaged(349342 'typeof' this[349335]))
  } function Replicated[348460].dsiNewRectangularDom[349418](arg _mt[349431]:_MT[238], arg this[349428]:Replicated[348460] : Replicated[348460], param arg rank[349415] : int(64)[13], arg idxType[349420]:_any[178](?), param arg stridable[349423] : bool[10], arg inds[349426]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349465 call _cond_test traceReplicatedDist[348428])
    {(349463 call writeln "Replicated.dsiNewRectangularDom "(349461 call _build_tuple rank[349415](349456 call _cast string[26] idxType[349420]) stridable[349423] inds[349426]))
    } unknown result[349488](349473 'new'(_chpl_manager = unmanaged[220](?))(349487 call ReplicatedDom[414211](?)(rank = rank[349415])(idxType = idxType[349420])(stridable = stridable[349423])(dist =(349485 call _to_unmanaged this[349428]))))(349491 'end of statement')
    { unknown tmpIter[349530] "expr temp" "maybe ref" "no copy" "temp"(349533 'move' tmpIter[349530](349503 call _build_tuple(414259 call . this[349428] c"targetLocales")(349500 call . result[349488] c"localDoms"))) unknown isRngDomArr[349716] "maybe param" "temp"(349731 'move' isRngDomArr[349716](349729 call ||(349718 call isBoundedRange tmpIter[349530])(349727 call ||(349721 call isDomain tmpIter[349530])(349724 call isArray tmpIter[349530]))))
      if isRngDomArr[349716]
      { const _coforallCount[349560] "const" "end count" "temp"(349639 'move' _coforallCount[349560](349636 call _endCountAlloc 0)) unknown numTasks[349561] "temp"(349623 'move' numTasks[349561](349619 call . tmpIter[349530] c"size"))(349614 call _upEndCount _coforallCount[349560] 0 numTasks[349561]) unknown _indexOfInterest[349567] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349568] "expr temp" "temp"(349577 'move' _iterator[349568](349575 call _getIteratorZip tmpIter[349530]))
        Defer
        {
          {(349607 call _freeIterator _iterator[349568])
          }
        }
        { scopeless type(349582 'move' _indexOfInterest[349567](349579 call iteratorIndex _iterator[349568]))
        }
        ForLoop[349569]
        {(349587 call _check_tuple_var_decl _indexOfInterest[349567] 2) unknown loc[349593] "coforall index var" "index var" "insert auto destroy"(349595 'move' loc[349593](349591 call _indexOfInterest[349567] 0)) unknown locDom[349600] "coforall index var" "index var" "insert auto destroy"(349602 'move' locDom[349600](349598 call _indexOfInterest[349567] 1)) const tmp[349536] "const" "temp"(349538 'move' tmp[349536](349540 'deref'(349541 '_wide_get_locale' loc[349593])))
          {(349549 call = locDom[349600](349551 'new'(_chpl_manager = unmanaged[220](?))(349555 call LocReplicatedDom[414153](?) rank[349415] idxType[349420] stridable[349423])))(349562 call _downEndCount _coforallCount[349560] nil[44])(349544 'coforall on block' 0 tmp[349536])
          } label _continueLabel[349572] _indexOfInterest[349567] _iterator[349568]
        } label _breakLabel[349573]
        Defer
        {
          {(349626 call _endCountFree _coforallCount[349560])
          }
        }(349631 call _waitEndCount _coforallCount[349560] 0 numTasks[349561])
      }
      { const _coforallCount[349643] "const" "end count" "temp"(349713 'move' _coforallCount[349643](349710 call _endCountAlloc 0)) unknown _indexOfInterest[349650] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349651] "expr temp" "temp"(349660 'move' _iterator[349651](349658 call _getIteratorZip tmpIter[349530]))
        Defer
        {
          {(349690 call _freeIterator _iterator[349651])
          }
        }
        { scopeless type(349665 'move' _indexOfInterest[349650](349662 call iteratorIndex _iterator[349651]))
        }
        ForLoop[349652]
        {(349670 call _check_tuple_var_decl _indexOfInterest[349650] 2) unknown loc[349676] "coforall index var" "index var" "insert auto destroy"(349678 'move' loc[349676](349674 call _indexOfInterest[349650] 0)) unknown locDom[349683] "coforall index var" "index var" "insert auto destroy"(349685 'move' locDom[349683](349681 call _indexOfInterest[349650] 1))(349697 call _upEndCount _coforallCount[349643] 0) const tmp[349521] "const" "temp"(349523 'move' tmp[349521](349519 'deref'(349518 '_wide_get_locale' loc[349676])))
          {(349515 call = locDom[349683](349508 'new'(_chpl_manager = unmanaged[220](?))(349514 call LocReplicatedDom[414153](?) rank[349415] idxType[349420] stridable[349423])))(349645 call _downEndCount _coforallCount[349643] nil[44])(349526 'coforall on block' 0 tmp[349521])
          } label _continueLabel[349655] _indexOfInterest[349650] _iterator[349651]
        } label _breakLabel[349656]
        Defer
        {
          {(349701 call _endCountFree _coforallCount[349643])
          }
        }(349706 call _waitEndCount _coforallCount[349643] 0)
      }
    }(349741 call(349736 call . result[349488] c"dsiSetIndices") inds[349426])(349744 return result[349488])
  } function Replicated[348460].dsiIndexToLocale[349753](arg _mt[349758]:_MT[238], arg this[349755]:Replicated[348460] : Replicated[348460], arg indexx[349751]:_any[178](?)) : _unknown[51] "method"
  {(349762 return(414276 call here[90435]))
  }
  { scopeless type locale[28]
  } function ReplicatedDom[348995](?).dsiSetIndices[349773](arg _mt[349778]:_MT[238], arg this[349775]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg x[349771]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(349822 call _cond_test traceReplicatedDist[348428])
    {(349820 call writeln "ReplicatedDom.dsiSetIndices on "(349816 call _cast string[26](349814 'typeof' x[349771])) ": " x[349771])
    }(349835 call(414284 call . this[349775] c"dsiSetIndices")(349832 call chpl__buildDomainExpr(349830 'expand_tuple' x[349771])))
  }
  {(349791 call &&(349783 call isTuple x[349771])(349790 call isRange(349788 call x[349771] 0)))
  } function ReplicatedDom[348995](?).dsiSetIndices[349847](arg _mt[349852]:_MT[238], arg this[349849]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg domArg[349844] : _domain[125902](?)) : _unknown[51] "method" "no return value for void"
  {
    if(349878 call _cond_test traceReplicatedDist[348428])
    {(349876 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg[349844])
    }(349886 call =(414293 call . this[349849] c"domRep") domArg[349844])
    { unknown tmpIter[349915] "expr temp" "maybe ref" "no copy" "temp"(349918 'move' tmpIter[349915](414299 call . this[349849] c"localDoms")) unknown isRngDomArr[350071] "maybe param" "temp"(350086 'move' isRngDomArr[350071](350084 call ||(350073 call isBoundedRange tmpIter[349915])(350082 call ||(350076 call isDomain tmpIter[349915])(350079 call isArray tmpIter[349915]))))
      if isRngDomArr[350071]
      { const _coforallCount[349943] "const" "end count" "temp"(350008 'move' _coforallCount[349943](350005 call _endCountAlloc 0)) unknown numTasks[349944] "temp"(349992 'move' numTasks[349944](349988 call . tmpIter[349915] c"size"))(349983 call _upEndCount _coforallCount[349943] 0 numTasks[349944]) unknown _indexOfInterest[349950] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349951] "expr temp" "temp"(349960 'move' _iterator[349951](349958 call _getIterator tmpIter[349915]))
        Defer
        {
          {(349976 call _freeIterator _iterator[349951])
          }
        }
        { scopeless type(349965 'move' _indexOfInterest[349950](349962 call iteratorIndex _iterator[349951]))
        }
        ForLoop[349952]
        { unknown locDom[349969] "coforall index var" "index var" "insert auto destroy"(349971 'move' locDom[349969] _indexOfInterest[349950]) const tmp[349921] "const" "temp"(349923 'move' tmp[349921](349925 'deref'(349926 '_wide_get_locale' locDom[349969])))
          {(349934 call =(349936 call .(349938 call postfix! locDom[349969]) c"domLocalRep") domArg[349844])(349945 call _downEndCount _coforallCount[349943] nil[44])(349929 'coforall on block' 0 tmp[349921])
          } label _continueLabel[349955] _indexOfInterest[349950] _iterator[349951]
        } label _breakLabel[349956]
        Defer
        {
          {(349995 call _endCountFree _coforallCount[349943])
          }
        }(350000 call _waitEndCount _coforallCount[349943] 0 numTasks[349944])
      }
      { const _coforallCount[350012] "const" "end count" "temp"(350068 'move' _coforallCount[350012](350065 call _endCountAlloc 0)) unknown _indexOfInterest[350019] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350020] "expr temp" "temp"(350029 'move' _iterator[350020](350027 call _getIterator tmpIter[349915]))
        Defer
        {
          {(350045 call _freeIterator _iterator[350020])
          }
        }
        { scopeless type(350034 'move' _indexOfInterest[350019](350031 call iteratorIndex _iterator[350020]))
        }
        ForLoop[350021]
        { unknown locDom[350038] "coforall index var" "index var" "insert auto destroy"(350040 'move' locDom[350038] _indexOfInterest[350019])(350052 call _upEndCount _coforallCount[350012] 0) const tmp[349907] "const" "temp"(349909 'move' tmp[349907](349905 'deref'(349904 '_wide_get_locale' locDom[350038])))
          {(349901 call =(349897 call .(349893 call postfix! locDom[350038]) c"domLocalRep") domArg[349844])(350014 call _downEndCount _coforallCount[350012] nil[44])(349912 'coforall on block' 0 tmp[349907])
          } label _continueLabel[350024] _indexOfInterest[350019] _iterator[350020]
        } label _breakLabel[350025]
        Defer
        {
          {(350056 call _endCountFree _coforallCount[350012])
          }
        }(350061 call _waitEndCount _coforallCount[350012] 0)
      }
    }
  }
  { scopeless type void[4]
  } function ReplicatedDom[348995](?).dsiGetIndices[350096](arg _mt[350101]:_MT[238], arg this[350098]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method"
  {
    if(350137 call _cond_test traceReplicatedDist[348428])
    {(350135 call writeln "ReplicatedDom.dsiGetIndices")
    }(350151 return(350150 call(350146 call .(350145 call(414328 call . this[350098] c"redirectee")) c"getIndices")))
  }
  { scopeless type(350113 call *(414310 call . this[350098] c"rank")(350112 call range[64316](?)(414316 call . this[350098] c"idxType") bounded[64205](414321 call . this[350098] c"stridable")))
  } function ReplicatedDom[348995](?).these[350159](arg _mt[350164]:_MT[238], arg this[350161]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  { unknown dom[350169](350168 call(414332 call . this[350161] c"redirectee"))(350172 'end of statement')
    { unknown _indexOfInterest[350179] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350180] "expr temp" "temp"(350189 'move' _iterator[350180](350187 call _getIterator dom[350169]))
      Defer
      {
        {(350205 call _freeIterator _iterator[350180])
        }
      }
      { scopeless type(350194 'move' _indexOfInterest[350179](350191 call iteratorIndex _iterator[350180]))
      }
      ForLoop[350181]
      { unknown i[350198] "index var" "insert auto destroy"(350200 'move' i[350198] _indexOfInterest[350179])(350177 yield i[350198]) label _continueLabel[350184] _indexOfInterest[350179] _iterator[350180]
      } label _breakLabel[350185]
    }
  } function ReplicatedDom[348995](?).these[350221](arg _mt[350226]:_MT[238], arg this[350223]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), param arg tag[350218] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350251] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350252] "expr temp" "temp"(350261 'move' _iterator[350252](350259 call _getIterator(350247 call(350242 call .(350239 call .(350238 call(414342 call . this[350223] c"chpl_myLocDom")) c"domLocalRep") c"these") tag[350218])))
      Defer
      {
        {(350278 call _freeIterator _iterator[350252])
        }
      }
      { scopeless type(350267 'move' _indexOfInterest[350251](350264 call iteratorIndex _iterator[350252]))
      }
      ForLoop[350253]
      { unknown follow[350271] "index var" "insert auto destroy"(350273 'move' follow[350271] _indexOfInterest[350251])(350249 yield follow[350271]) label _continueLabel[350256] _indexOfInterest[350251] _iterator[350252]
      } label _breakLabel[350257]
    }
  }
  {(350233 call == tag[350218] leader[447])
  } function ReplicatedDom[348995](?).these[350296](arg _mt[350303]:_MT[238], arg this[350300]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), param arg tag[350293] : iterKind[453], arg followThis[350298]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350326] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350327] "expr temp" "temp"(350336 'move' _iterator[350327](350334 call _getIterator(350322 call(350316 call .(350315 call(414350 call . this[350300] c"redirectee")) c"these") tag[350293] followThis[350298])))
      Defer
      {
        {(350353 call _freeIterator _iterator[350327])
        }
      }
      { scopeless type(350342 'move' _indexOfInterest[350326](350339 call iteratorIndex _iterator[350327]))
      }
      ForLoop[350328]
      { unknown i[350346] "index var" "insert auto destroy"(350348 'move' i[350346] _indexOfInterest[350326])(350324 yield i[350346]) label _continueLabel[350331] _indexOfInterest[350326] _iterator[350327]
      } label _breakLabel[350332]
    }
  }
  {(350310 call == tag[350293] follower[449])
  } function ReplicatedDom[348995](?).dsiSerialWrite[350369](arg _mt[350374]:_MT[238], arg this[350371]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg f[350367]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(350388 call(350383 call .(350380 call .(350379 call(414357 call . this[350371] c"redirectee")) c"_value") c"dsiSerialWrite") f[350367])
  }
  { scopeless type void[4]
  } function ReplicatedDom[348995](?).dsiDims[350397](arg _mt[350402]:_MT[238], arg this[350399]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method"
  {(350424 return(350423 call(350419 call .(350418 call(414378 call . this[350399] c"redirectee")) c"dims")))
  }
  { scopeless type(350414 call *(414363 call . this[350399] c"rank")(350413 call range[64316](?)(414369 call . this[350399] c"idxType") bounded[64205](414374 call . this[350399] c"stridable")))
  } function ReplicatedDom[348995](?).dsiDim[350437](arg _mt[350442]:_MT[238], arg this[350439]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg dim[350434] : int(64)[13]) : _unknown[51] "method"
  {(350462 return(350461 call(350456 call .(350455 call(414393 call . this[350439] c"redirectee")) c"dim") dim[350434]))
  }
  { scopeless type(350452 call range[64316](?)(414384 call . this[350439] c"idxType") bounded[64205](414389 call . this[350439] c"stridable"))
  } function ReplicatedDom[348995](?).dsiLow[350471](arg _mt[350476]:_MT[238], arg this[350473]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "no parens"
  {(350484 return(350481 call .(350480 call(414398 call . this[350473] c"redirectee")) c"low"))
  } function ReplicatedDom[348995](?).dsiHigh[350492](arg _mt[350497]:_MT[238], arg this[350494]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "no parens"
  {(350505 return(350502 call .(350501 call(414402 call . this[350494] c"redirectee")) c"high"))
  } function ReplicatedDom[348995](?).dsiStride[350513](arg _mt[350518]:_MT[238], arg this[350515]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "no parens"
  {(350526 return(350523 call .(350522 call(414406 call . this[350515] c"redirectee")) c"stride"))
  } function ReplicatedDom[348995](?).dsiAlignedLow[350534](arg _mt[350539]:_MT[238], arg this[350536]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "no parens"
  {(350547 return(350544 call .(350543 call(414410 call . this[350536] c"redirectee")) c"alignedLow"))
  } function ReplicatedDom[348995](?).dsiAlignedHigh[350555](arg _mt[350560]:_MT[238], arg this[350557]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "no parens"
  {(350568 return(350565 call .(350564 call(414414 call . this[350557] c"redirectee")) c"alignedHigh"))
  } function ReplicatedDom[348995](?).dsiAlignment[350576](arg _mt[350581]:_MT[238], arg this[350578]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "no parens"
  {(350589 return(350586 call .(350585 call(414418 call . this[350578] c"redirectee")) c"alignment"))
  } function ReplicatedDom[348995](?).dsiNumIndices[350597](arg _mt[350602]:_MT[238], arg this[350599]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "no parens"
  {(350610 return(350607 call .(350606 call(414422 call . this[350599] c"redirectee")) c"size"))
  } function ReplicatedDom[348995](?).dsiMember[350620](arg _mt[350625]:_MT[238], arg this[350622]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg indexx[350618]:_any[178](?)) : _unknown[51] "method"
  {(350636 return(350635 call(350630 call .(350629 call(414426 call . this[350622] c"redirectee")) c"contains") indexx[350618]))
  } function ReplicatedDom[348995](?).dsiIndexOrder[350646](arg _mt[350651]:_MT[238], arg this[350648]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg indexx[350644]:_any[178](?)) : _unknown[51] "method"
  {(350662 return(350661 call(350656 call .(350655 call(414431 call . this[350648] c"redirectee")) c"dsiIndexOrder") indexx[350644]))
  } function ReplicatedDom[348995](?).dsiDestroyDom[350670](arg _mt[350675]:_MT[238], arg this[350672]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[350709] "expr temp" "maybe ref" "no copy" "temp"(350712 'move' tmpIter[350709](350679 call .(366757 call . this[350672] c"dist") c"targetLocDom")) unknown isRngDomArr[350866] "maybe param" "temp"(350881 'move' isRngDomArr[350866](350879 call ||(350868 call isBoundedRange tmpIter[350709])(350877 call ||(350871 call isDomain tmpIter[350709])(350874 call isArray tmpIter[350709]))))
      if isRngDomArr[350866]
      { const _coforallCount[350738] "const" "end count" "temp"(350803 'move' _coforallCount[350738](350800 call _endCountAlloc 0)) unknown numTasks[350739] "temp"(350787 'move' numTasks[350739](350783 call . tmpIter[350709] c"size"))(350778 call _upEndCount _coforallCount[350738] 0 numTasks[350739]) unknown _indexOfInterest[350745] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350746] "expr temp" "temp"(350755 'move' _iterator[350746](350753 call _getIterator tmpIter[350709]))
        Defer
        {
          {(350771 call _freeIterator _iterator[350746])
          }
        }
        { scopeless type(350760 'move' _indexOfInterest[350745](350757 call iteratorIndex _iterator[350746]))
        }
        ForLoop[350747]
        { unknown localeIdx[350764] "coforall index var" "index var" "insert auto destroy"(350766 'move' localeIdx[350764] _indexOfInterest[350745]) const tmp[350715] "const" "temp"(350717 'move' tmp[350715](350719 'deref'(350720 '_wide_get_locale'(350725 call(350722 call .(366767 call . this[350672] c"dist") c"targetLocales") localeIdx[350764]))))
          {(350733 call chpl__delete(350735 call(414445 call . this[350672] c"localDoms") localeIdx[350764]))(350740 call _downEndCount _coforallCount[350738] nil[44])(350728 'coforall on block' 0 tmp[350715])
          } label _continueLabel[350750] _indexOfInterest[350745] _iterator[350746]
        } label _breakLabel[350751]
        Defer
        {
          {(350790 call _endCountFree _coforallCount[350738])
          }
        }(350795 call _waitEndCount _coforallCount[350738] 0 numTasks[350739])
      }
      { const _coforallCount[350807] "const" "end count" "temp"(350863 'move' _coforallCount[350807](350860 call _endCountAlloc 0)) unknown _indexOfInterest[350814] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350815] "expr temp" "temp"(350824 'move' _iterator[350815](350822 call _getIterator tmpIter[350709]))
        Defer
        {
          {(350840 call _freeIterator _iterator[350815])
          }
        }
        { scopeless type(350829 'move' _indexOfInterest[350814](350826 call iteratorIndex _iterator[350815]))
        }
        ForLoop[350816]
        { unknown localeIdx[350833] "coforall index var" "index var" "insert auto destroy"(350835 'move' localeIdx[350833] _indexOfInterest[350814])(350847 call _upEndCount _coforallCount[350807] 0) const tmp[350700] "const" "temp"(350702 'move' tmp[350700](350698 'deref'(350697 '_wide_get_locale'(350688 call(350683 call .(366762 call . this[350672] c"dist") c"targetLocales") localeIdx[350833]))))
          {(350694 call chpl__delete(350692 call(414438 call . this[350672] c"localDoms") localeIdx[350833]))(350809 call _downEndCount _coforallCount[350807] nil[44])(350705 'coforall on block' 0 tmp[350700])
          } label _continueLabel[350819] _indexOfInterest[350814] _iterator[350815]
        } label _breakLabel[350820]
        Defer
        {
          {(350851 call _endCountFree _coforallCount[350807])
          }
        }(350856 call _waitEndCount _coforallCount[350807] 0)
      }
    }
  } function ReplicatedDom[348995](?).dsiAssignDomain[350895](arg _mt[350904]:_MT[238], arg this[350901]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg rhs[350892] : _domain[125902](?), arg lhsPrivate[350898] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(350917 call(350907 call . this[350901] c"dsiSetIndices")(350915 call(350911 call . rhs[350892] c"getIndices")))
  } function ReplicatedArr[351048](?).chpl_myLocArr[350965](arg _mt[351052]:_MT[238], arg this[351050]:ReplicatedArr[351048](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351001 call _cond_test 1)
    {
      if(350996 call _cond_test(350984 call !(350983 call(350975 call .(350972 call .(350969 call .(366778 call . this[351050] c"dom") c"dist") c"targetLocDom") c"contains")(350979 call .(366781 call here[90435]) c"id"))))
      {(350994 call halt "locale "(350990 call .(366783 call here[90435]) c"id") " has no local replicand")
      }
    }(351016 return(351014 call postfix!(351013 call(414458 call . this[351050] c"localArrs")(351009 call .(366785 call here[90435]) c"id"))))
  } function ReplicatedArr[351048](?).replicand[351026](arg _mt[351056]:_MT[238], arg this[351054]:ReplicatedArr[351048](?), arg loc[351023] : locale[28]) ref : _unknown[51] "method" "primary method"
  {(351042 return(351039 call .(351035 call postfix!(351034 call(414463 call . this[351054] c"localArrs")(351030 call . loc[351023] c"id"))) c"arrLocalRep"))
  } type ReplicatedArr[351048](?) val super[355726]:AbsBaseArr[149697](?) "super class" const dom[350925] "const" unknown localArrs[350959](350957 call chpl__buildArrayRuntimeType(350955 call chpl__ensureDomainExpr(350933 call .(350930 call . dom[350925] c"dist") c"targetLocDom"))(350952 call unmanaged LocReplicatedArr?[415499](?) eltType[149671](350941 call . dom[350925] c"rank")(350945 call . dom[350925] c"idxType")(350949 call . dom[350925] c"stridable"))) type unmanaged ReplicatedArr[415505](?) type ReplicatedArr[414508](?) function _array[133588](?).replicand[351066](arg _mt[351071]:_MT[238], arg this[351068]:_array[133588](?) : _array[133588](?), arg loc[351063] : locale[28]) ref : _unknown[51] "method" "no doc"
  {(351080 return(351079 call(351074 call .(366789 call . this[351068] c"_value") c"replicand") loc[351063]))
  } function LocReplicatedArr[351332](?).init[351131](arg _mt[351336]:_MT[238], arg this[351334]:LocReplicatedArr[351332](?), arg eltType[351129]:_any[178](?), param arg rank[351134] : int(64)[13], arg idxType[351137]:_any[178](?), param arg stridable[351140] : bool[10], arg myDom[351150] :(351148 call unmanaged LocReplicatedDom[415502](?) rank[351134] idxType[351137] stridable[351140]), param arg initElts[351154] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(351162 call =(351158 call . this[351334] c"eltType") eltType[351129])(351171 call =(351167 call . this[351334] c"rank") rank[351134])(351179 call =(351175 call . this[351334] c"idxType") idxType[351137])(351187 call =(351183 call . this[351334] c"stridable") stridable[351140])(351197 call =(351193 call . this[351334] c"myDom") myDom[351150])(351219 call =(351201 call . this[351334] c"arrLocalRep")(351218 call(351211 call .(351208 call .(351205 call . this[351334] c"myDom") c"domLocalRep") c"buildArray") eltType[351129](initElts = 1)))
    if(351281 call _cond_test(351232 call &&(351224 call == initElts[351154] 0)(351230 call !(351229 call isPODType eltType[351129]))))
    {(351278 call compilerError(351275 call +(351256 call + "ReplicatedDist array initialization is not currently supported for element type "(351254 call _cast string[26] eltType[351129])) " - please default-initialize the array"))
    }
  } function LocReplicatedArr[351332](?).deinit[351289](arg _mt[351340]:_MT[238], arg this[351338]:LocReplicatedArr[351332](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {(351296 call _do_destroy_array(414487 call . this[351338] c"arrLocalRep")(deinitElts = 1))
  } function LocReplicatedArr[351332](?).writeThis[351305](arg _mt[351344]:_MT[238], arg this[351342]:LocReplicatedArr[351332](?), arg f[351303]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(351326 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  } type LocReplicatedArr[351332](?) val super[355728]:object[22] "super class" unknown eltType[351086] "type variable" unknown rank[351090] "param" int(64)[13] unknown idxType[351094] "type variable" unknown stridable[351098] "param" bool[10] unknown myDom[351109](351107 call unmanaged LocReplicatedDom[415502](?) rank[351090] idxType[351094] stridable[351098]) unknown arrLocalRep[351123] "local field" "no auto destroy" "unsafe"(351121 call chpl__buildArrayRuntimeType(351119 call chpl__ensureDomainExpr(351114 call . myDom[351109] c"domLocalRep")) eltType[351086]) type unmanaged LocReplicatedArr?[415499](?) type LocReplicatedArr?[415496](?) type LocReplicatedArr[414451](?) function ReplicatedArr[351048](?).init[351352](arg _mt[351359]:_MT[238], arg this[351356]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg eltType[351350]:_any[178](?), arg dom[351354]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(351368 call(351362 call .(366802 call . this[351356] c"super") c"init")(eltType = eltType[351350]))(351376 call =(351372 call . this[351356] c"dom") dom[351354])
  } function ReplicatedArr[351048](?).stridable[351384](arg _mt[351389]:_MT[238], arg this[351386]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) param : _unknown[51] "method" "no parens"
  {(351395 return(351392 call .(366808 call . this[351386] c"dom") c"stridable"))
  } function ReplicatedArr[351048](?).idxType[351403](arg _mt[351408]:_MT[238], arg this[351405]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) type : _unknown[51] "method" "no parens"
  {(351414 return(351411 call .(366813 call . this[351405] c"dom") c"idxType"))
  } function ReplicatedArr[351048](?).rank[351422](arg _mt[351427]:_MT[238], arg this[351424]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) param : _unknown[51] "method" "no parens"
  {(351433 return(351430 call .(366818 call . this[351424] c"dom") c"rank"))
  } function ReplicatedArr[351048](?).dsiGetBaseDom[351441](arg _mt[351446]:_MT[238], arg this[351443]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) : _unknown[51] "method" "method overrides"
  {(351449 return(414494 call . this[351443] c"dom"))
  } function ReplicatedArr[351048](?).dsiSupportsPrivatization[351457](arg _mt[351462]:_MT[238], arg this[351459]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) param : _unknown[51] "method" "method overrides"
  {(351465 return 1)
  } type ReplicatedArrPrvData[351480](?) unknown dompid[351471] unknown localArrs[351475] function ReplicatedArr[351048](?).dsiGetPrivatizeData[351486](arg _mt[351491]:_MT[238], arg this[351488]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) : _unknown[51] "method"
  {
    if(351515 call _cond_test traceReplicatedDist[348428])
    {(351513 call writeln "ReplicatedArr.dsiGetPrivatizeData")
    }(351530 return(351521 'new'(351529 call ReplicatedArrPrvData[351480](?)(351524 call .(366823 call . this[351488] c"dom") c"pid")(414501 call . this[351488] c"localArrs"))))
  } function ReplicatedArr[351048](?).dsiPrivatize[351539](arg _mt[351544]:_MT[238], arg this[351541]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg privatizeData[351537]:_any[178](?)) : _unknown[51] "method"
  {
    if(351569 call _cond_test traceReplicatedDist[348428])
    {(351567 call writeln "ReplicatedArr.dsiPrivatize on "(414505 call here[90435]))
    } unknown privdom[351587](351586 call chpl_getPrivatizedCopy(351580 'typeof'(351577 call . this[351541] c"dom"))(351583 call . privatizeData[351537] c"dompid"))(351590 'end of statement') unknown result[351599](351593 'new'(_chpl_manager = unmanaged[220](?))(351598 call ReplicatedArr[414508](?)(414513 call . this[351541] c"eltType") privdom[351587]))(351602 'end of statement')(351613 call =(351606 call . result[351599] c"localArrs")(351610 call . privatizeData[351537] c"localArrs"))(351617 return result[351599])
  } function ReplicatedDom[348995](?).dsiBuildArray[351626](arg _mt[351635]:_MT[238], arg this[351632]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg eltType[351624]:_any[178](?), param arg initElts[351629] : bool[10]) : _unknown[51] "method"
  {
    if(351669 call _cond_test traceReplicatedDist[348428])
    {(351667 call writeln "ReplicatedDom.dsiBuildArray")
    } unknown result[351686](351677 'new'(_chpl_manager = unmanaged[220](?))(351685 call ReplicatedArr[414508](?) eltType[351624](351684 call _to_unmanaged this[351632])))(351689 'end of statement')
    { unknown tmpIter[351739] "expr temp" "maybe ref" "no copy" "temp"(351742 'move' tmpIter[351739](351706 call _build_tuple(351697 call .(366832 call . this[351632] c"dist") c"targetLocales")(414527 call . this[351632] c"localDoms")(351703 call . result[351686] c"localArrs"))) unknown isRngDomArr[351945] "maybe param" "temp"(351960 'move' isRngDomArr[351945](351958 call ||(351947 call isBoundedRange tmpIter[351739])(351956 call ||(351950 call isDomain tmpIter[351739])(351953 call isArray tmpIter[351739]))))
      if isRngDomArr[351945]
      { const _coforallCount[351775] "const" "end count" "temp"(351861 'move' _coforallCount[351775](351858 call _endCountAlloc 0)) unknown numTasks[351776] "temp"(351845 'move' numTasks[351776](351841 call . tmpIter[351739] c"size"))(351836 call _upEndCount _coforallCount[351775] 0 numTasks[351776]) unknown _indexOfInterest[351782] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351783] "expr temp" "temp"(351792 'move' _iterator[351783](351790 call _getIteratorZip tmpIter[351739]))
        Defer
        {
          {(351829 call _freeIterator _iterator[351783])
          }
        }
        { scopeless type(351797 'move' _indexOfInterest[351782](351794 call iteratorIndex _iterator[351783]))
        }
        ForLoop[351784]
        {(351802 call _check_tuple_var_decl _indexOfInterest[351782] 3) unknown loc[351808] "coforall index var" "index var" "insert auto destroy"(351810 'move' loc[351808](351806 call _indexOfInterest[351782] 0)) unknown locDom[351815] "coforall index var" "index var" "insert auto destroy"(351817 'move' locDom[351815](351813 call _indexOfInterest[351782] 1)) unknown locArr[351822] "coforall index var" "index var" "insert auto destroy"(351824 'move' locArr[351822](351820 call _indexOfInterest[351782] 2)) const tmp[351745] "const" "temp"(351747 'move' tmp[351745](351749 'deref'(351750 '_wide_get_locale' loc[351808])))
          {(351758 call = locArr[351822](351760 'new'(_chpl_manager = unmanaged[220](?))(351764 call LocReplicatedArr[414451](?) eltType[351624](414557 call . this[351632] c"rank")(414562 call . this[351632] c"idxType")(414567 call . this[351632] c"stridable")(351770 call postfix! locDom[351815])(initElts = initElts[351629]))))(351777 call _downEndCount _coforallCount[351775] nil[44])(351753 'coforall on block' 0 tmp[351745])
          } label _continueLabel[351787] _indexOfInterest[351782] _iterator[351783]
        } label _breakLabel[351788]
        Defer
        {
          {(351848 call _endCountFree _coforallCount[351775])
          }
        }(351853 call _waitEndCount _coforallCount[351775] 0 numTasks[351776])
      }
      { const _coforallCount[351865] "const" "end count" "temp"(351942 'move' _coforallCount[351865](351939 call _endCountAlloc 0)) unknown _indexOfInterest[351872] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351873] "expr temp" "temp"(351882 'move' _iterator[351873](351880 call _getIteratorZip tmpIter[351739]))
        Defer
        {
          {(351919 call _freeIterator _iterator[351873])
          }
        }
        { scopeless type(351887 'move' _indexOfInterest[351872](351884 call iteratorIndex _iterator[351873]))
        }
        ForLoop[351874]
        {(351892 call _check_tuple_var_decl _indexOfInterest[351872] 3) unknown loc[351898] "coforall index var" "index var" "insert auto destroy"(351900 'move' loc[351898](351896 call _indexOfInterest[351872] 0)) unknown locDom[351905] "coforall index var" "index var" "insert auto destroy"(351907 'move' locDom[351905](351903 call _indexOfInterest[351872] 1)) unknown locArr[351912] "coforall index var" "index var" "insert auto destroy"(351914 'move' locArr[351912](351910 call _indexOfInterest[351872] 2))(351926 call _upEndCount _coforallCount[351865] 0) const tmp[351730] "const" "temp"(351732 'move' tmp[351730](351728 'deref'(351727 '_wide_get_locale' loc[351898])))
          {(351724 call = locArr[351912](351711 'new'(_chpl_manager = unmanaged[220](?))(351723 call LocReplicatedArr[414451](?) eltType[351624](414536 call . this[351632] c"rank")(414541 call . this[351632] c"idxType")(414546 call . this[351632] c"stridable")(351719 call postfix! locDom[351905])(initElts = initElts[351629]))))(351867 call _downEndCount _coforallCount[351865] nil[44])(351735 'coforall on block' 0 tmp[351730])
          } label _continueLabel[351877] _indexOfInterest[351872] _iterator[351873]
        } label _breakLabel[351878]
        Defer
        {
          {(351930 call _endCountFree _coforallCount[351865])
          }
        }(351935 call _waitEndCount _coforallCount[351865] 0)
      }
    }(351965 return result[351686])
  }
  { scopeless type(351645 call unmanaged ReplicatedArr[415505](?) eltType[351624](351644 call _to_unmanaged(351642 'typeof' this[351632])))
  } function ReplicatedArr[351048](?).dsiAccess[351975](arg _mt[351980]:_MT[238], arg this[351977]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg indexx[351973]:_any[178](?)) ref : _unknown[51] "method"
  {(351991 return(351990 call(351985 call .(351984 call(414576 call . this[351977] c"chpl_myLocArr")) c"arrLocalRep") indexx[351973]))
  } function ReplicatedArr[351048](?).dsiBoundsCheck[352001](arg _mt[352006]:_MT[238], arg this[352003]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg indexx[351999]:_any[178](?)) : _unknown[51] "method"
  {(352024 return(352023 call(352015 call .(352012 call .(352009 call .(366838 call . this[352003] c"dom") c"dist") c"targetLocDom") c"contains")(352019 call .(366841 call here[90435]) c"id")))
  } function ReplicatedArr[351048](?).dsiSerialWrite[352034](arg _mt[352039]:_MT[238], arg this[352036]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg f[352032]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352067 call(352062 call .(352059 call .(352056 call .(352054 call postfix!(352053 call(414582 call . this[352036] c"localArrs")(352049 call .(352048 call(352044 call . f[352032] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f[352032])
  }
  { scopeless type void[4]
  } function ReplicatedArr[351048](?).dsiSerialRead[352078](arg _mt[352085]:_MT[238], arg this[352082]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg f[352076]:_any[178](?), arg loc[352080]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352113 call(352108 call .(352105 call .(352102 call .(352100 call postfix!(352099 call(414588 call . this[352082] c"localArrs")(352095 call .(352094 call(352090 call . f[352076] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f[352076])
  }
  { scopeless type void[4]
  } function isReplicatedArr[352123](arg arr[352121]:_any[178](?)) param : _unknown[51]
  {(352137 return(354847 'is_subtype' ReplicatedArr[414508](?)(352133 'typeof'(352132 call _to_borrowed(352130 call chpl__getActualArray arr[352121])))))
  } function chpl_serialReadWriteRectangular[352146](arg f[352144]:_any[178](?), arg arr[352148]:_any[178](?), arg dom[352150]:_any[178](?)) : _unknown[51] "no return value for void"
  { const origloc[352162] "const"(352161 call(352157 call . f[352144] c"readWriteThisFromLocale"))(352165 'end of statement') const tmp[352178] "const" "temp"(352180 'move' tmp[352178](352176 'deref'(352175 '_wide_get_locale' origloc[352162])))
    {(352173 call chpl_serialReadWriteRectangularHelper f[352144] arr[352148] dom[352150])(352183 'on block' 0 tmp[352178])
    }
  }
  {(352155 call isReplicatedArr arr[352148])
  } function ReplicatedArr[351048](?).dsiElementInitializationComplete[352192](arg _mt[352197]:_MT[238], arg this[352194]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351048](?).dsiElementDeinitializationComplete[352205](arg _mt[352210]:_MT[238], arg this[352207]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351048](?).dsiDestroyArr[352222](arg _mt[352227]:_MT[238], arg this[352224]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg deinitElts[352219] : bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[352264] "expr temp" "maybe ref" "no copy" "temp"(352267 'move' tmpIter[352264](352243 call _build_tuple(352238 call .(352235 call .(366848 call . this[352224] c"dom") c"dist") c"targetLocales")(414601 call . this[352224] c"localArrs"))) unknown isRngDomArr[352442] "maybe param" "temp"(352457 'move' isRngDomArr[352442](352455 call ||(352444 call isBoundedRange tmpIter[352264])(352453 call ||(352447 call isDomain tmpIter[352264])(352450 call isArray tmpIter[352264]))))
      if isRngDomArr[352442]
      { const _coforallCount[352286] "const" "end count" "temp"(352365 'move' _coforallCount[352286](352362 call _endCountAlloc 0)) unknown numTasks[352287] "temp"(352349 'move' numTasks[352287](352345 call . tmpIter[352264] c"size"))(352340 call _upEndCount _coforallCount[352286] 0 numTasks[352287]) unknown _indexOfInterest[352293] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352294] "expr temp" "temp"(352303 'move' _iterator[352294](352301 call _getIteratorZip tmpIter[352264]))
        Defer
        {
          {(352333 call _freeIterator _iterator[352294])
          }
        }
        { scopeless type(352308 'move' _indexOfInterest[352293](352305 call iteratorIndex _iterator[352294]))
        }
        ForLoop[352295]
        {(352313 call _check_tuple_var_decl _indexOfInterest[352293] 2) unknown loc[352319] "coforall index var" "index var" "insert auto destroy"(352321 'move' loc[352319](352317 call _indexOfInterest[352293] 0)) unknown locArr[352326] "coforall index var" "index var" "insert auto destroy"(352328 'move' locArr[352326](352324 call _indexOfInterest[352293] 1)) const tmp[352270] "const" "temp"(352272 'move' tmp[352270](352274 'deref'(352275 '_wide_get_locale' loc[352319])))
          {
            {(352283 call chpl__delete locArr[352326])
            }(352288 call _downEndCount _coforallCount[352286] nil[44])(352278 'coforall on block' 0 tmp[352270])
          } label _continueLabel[352298] _indexOfInterest[352293] _iterator[352294]
        } label _breakLabel[352299]
        Defer
        {
          {(352352 call _endCountFree _coforallCount[352286])
          }
        }(352357 call _waitEndCount _coforallCount[352286] 0 numTasks[352287])
      }
      { const _coforallCount[352369] "const" "end count" "temp"(352439 'move' _coforallCount[352369](352436 call _endCountAlloc 0)) unknown _indexOfInterest[352376] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352377] "expr temp" "temp"(352386 'move' _iterator[352377](352384 call _getIteratorZip tmpIter[352264]))
        Defer
        {
          {(352416 call _freeIterator _iterator[352377])
          }
        }
        { scopeless type(352391 'move' _indexOfInterest[352376](352388 call iteratorIndex _iterator[352377]))
        }
        ForLoop[352378]
        {(352396 call _check_tuple_var_decl _indexOfInterest[352376] 2) unknown loc[352402] "coforall index var" "index var" "insert auto destroy"(352404 'move' loc[352402](352400 call _indexOfInterest[352376] 0)) unknown locArr[352409] "coforall index var" "index var" "insert auto destroy"(352411 'move' locArr[352409](352407 call _indexOfInterest[352376] 1))(352423 call _upEndCount _coforallCount[352369] 0) const tmp[352254] "const" "temp"(352256 'move' tmp[352254](352252 'deref'(352251 '_wide_get_locale' loc[352402])))
          {
            {(352247 call chpl__delete locArr[352409])
            }(352371 call _downEndCount _coforallCount[352369] nil[44])(352259 'coforall on block' 0 tmp[352254])
          } label _continueLabel[352381] _indexOfInterest[352376] _iterator[352377]
        } label _breakLabel[352382]
        Defer
        {
          {(352427 call _endCountFree _coforallCount[352369])
          }
        }(352432 call _waitEndCount _coforallCount[352369] 0)
      }
    }
  } function ReplicatedArr[351048](?).these[352467](arg _mt[352472]:_MT[238], arg this[352469]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352485] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352486] "expr temp" "temp"(352495 'move' _iterator[352486](352493 call _getIterator(352479 call .(352478 call(414614 call . this[352469] c"chpl_myLocArr")) c"arrLocalRep")))
      Defer
      {
        {(352512 call _freeIterator _iterator[352486])
        }
      }
      { scopeless type(352501 'move' _indexOfInterest[352485](352498 call iteratorIndex _iterator[352486]))
      }
      ForLoop[352487]
      { unknown a[352505] "index var" "insert auto destroy"(352507 'move' a[352505] _indexOfInterest[352485])(352483 yield a[352505]) label _continueLabel[352490] _indexOfInterest[352485] _iterator[352486]
      } label _breakLabel[352491]
    }
  }
  { scopeless type(414610 call . this[352469] c"eltType")
  } function ReplicatedArr[351048](?).these[352530](arg _mt[352535]:_MT[238], arg this[352532]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), param arg tag[352527] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352555] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352556] "expr temp" "temp"(352565 'move' _iterator[352556](352563 call _getIterator(352551 call(352546 call .(366854 call . this[352532] c"dom") c"these") tag[352527])))
      Defer
      {
        {(352582 call _freeIterator _iterator[352556])
        }
      }
      { scopeless type(352571 'move' _indexOfInterest[352555](352568 call iteratorIndex _iterator[352556]))
      }
      ForLoop[352557]
      { unknown follow[352575] "index var" "insert auto destroy"(352577 'move' follow[352575] _indexOfInterest[352555])(352553 yield follow[352575]) label _continueLabel[352560] _indexOfInterest[352555] _iterator[352556]
      } label _breakLabel[352561]
    }
  }
  {(352542 call == tag[352527] leader[447])
  } function ReplicatedArr[351048](?).these[352600](arg _mt[352607]:_MT[238], arg this[352604]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), param arg tag[352597] : iterKind[453], arg followThis[352602]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352633] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352634] "expr temp" "temp"(352643 'move' _iterator[352634](352641 call _getIterator(352629 call(352623 call .(352620 call .(352619 call(414625 call . this[352604] c"chpl_myLocArr")) c"arrLocalRep") c"these") tag[352597] followThis[352602])))
      Defer
      {
        {(352660 call _freeIterator _iterator[352634])
        }
      }
      { scopeless type(352649 'move' _indexOfInterest[352633](352646 call iteratorIndex _iterator[352634]))
      }
      ForLoop[352635]
      { unknown a[352653] "index var" "insert auto destroy"(352655 'move' a[352653] _indexOfInterest[352633])(352631 yield a[352653]) label _continueLabel[352638] _indexOfInterest[352633] _iterator[352634]
      } label _breakLabel[352639]
    }
  }
  {(352614 call == tag[352597] follower[449])
  } function Replicated[348460].dsiTargetLocales[352674](arg _mt[352679]:_MT[238], arg this[352676]:Replicated[348460] : Replicated[348460]) : _unknown[51] "method"
  {(352682 return(414633 call . this[352676] c"targetLocales"))
  } function ReplicatedDom[348995](?).dsiTargetLocales[352690](arg _mt[352695]:_MT[238], arg this[352692]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) : _unknown[51] "method"
  {(352701 return(352698 call .(366860 call . this[352692] c"dist") c"targetLocales"))
  } function ReplicatedArr[351048](?).dsiTargetLocales[352709](arg _mt[352714]:_MT[238], arg this[352711]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) : _unknown[51] "method"
  {(352723 return(352720 call .(352717 call .(366865 call . this[352711] c"dom") c"dist") c"targetLocales"))
  } function ReplicatedDom[348995](?).dsiHasSingleLocalSubdomain[352731](arg _mt[352736]:_MT[238], arg this[352733]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?)) param : _unknown[51] "method"
  {(352739 return 1)
  } function ReplicatedArr[351048](?).dsiHasSingleLocalSubdomain[352747](arg _mt[352752]:_MT[238], arg this[352749]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?)) param : _unknown[51] "method"
  {(352755 return 1)
  } function ReplicatedDom[348995](?).dsiLocalSubdomain[352767](arg _mt[352772]:_MT[238], arg this[352769]:ReplicatedDom[348995](?) : ReplicatedDom[348995](?), arg loc[352764] : locale[28]) : _unknown[51] "method"
  {
    if(352805 call _cond_test(352786 call(352778 call .(352775 call .(366870 call . this[352769] c"localDoms") c"_dom") c"contains")(352782 call . loc[352764] c"id")))
    {(352788 return(414638 call . this[352769] c"domRep"))
    }
    { unknown d[352797](352795 call chpl__buildDomainRuntimeType defaultDist[94050](414643 call . this[352769] c"rank")(414648 call . this[352769] c"idxType")(414653 call . this[352769] c"stridable"))(352800 'end of statement')(352803 return d[352797])
    }
  } function ReplicatedArr[351048](?).dsiLocalSubdomain[352820](arg _mt[352825]:_MT[238], arg this[352822]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg loc[352817] : locale[28]) : _unknown[51] "method"
  {
    if(352861 call _cond_test(352839 call(352831 call .(352828 call .(366876 call . this[352822] c"localArrs") c"_dom") c"contains")(352835 call . loc[352817] c"id")))
    {(352844 return(352841 call .(366882 call . this[352822] c"dom") c"domRep"))
    }
    { unknown d[352853](352851 call chpl__buildDomainRuntimeType defaultDist[94050](414659 call . this[352822] c"rank")(414663 call . this[352822] c"idxType")(414667 call . this[352822] c"stridable"))(352856 'end of statement')(352859 return d[352853])
    }
  } function ReplicatedArr[351048](?).dsiLocalSlice[352874](arg _mt[352879]:_MT[238], arg this[352876]:ReplicatedArr[351048](?) : ReplicatedArr[351048](?), arg ranges[352872]:_any[178](?)) : _unknown[51] "method"
  {(352891 return(352890 call(352884 call .(352883 call(414673 call . this[352876] c"chpl_myLocArr")) c"arrLocalRep")(352888 'expand_tuple' ranges[352872])))
  }(355509 'used modules list'(352994 'use' ChapelStandard[20264]))
}