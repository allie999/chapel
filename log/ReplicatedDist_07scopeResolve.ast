AST dump for ReplicatedDist after pass scopeResolve.
Module use list: ChapelStandard 

{ unknown traceReplicatedDist[348556] "config" "param" 0(348559 'end of statement') type Replicated[348588] val super[355848]:BaseDist[145968] "super class" unknown targetLocDom[348572](348570 call chpl__buildDomainRuntimeType defaultDist[94053](348567 'typeof'(348564 call .(366826 call here[90438]) c"id"))) const targetLocales[348583] "const"(348581 call chpl__buildArrayRuntimeType(348579 call chpl__ensureDomainExpr targetLocDom[348572]) locale[28]) type unmanaged Replicated[415614] type Replicated[411188](?) function Replicated[348588].init[348603](arg _mt[348630]:_MT[238], arg this[348627]:Replicated[348588] : Replicated[348588], arg targetLocales[348599] :(348595 call chpl__buildArrayRuntimeType nil[44] locale[28]) = Locales[113662], arg purposeMessage[348623] : string[26] = "used to create a Replicated") : _unknown[51] "method" "no return value for void"
  {(348637 call(348633 call . this[348627] c"complete"))
    { unknown _indexOfInterest[348671] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[348672] "expr temp" "temp"(348681 'move' _iterator[348672](348679 call _getIterator targetLocales[348599]))
      Defer
      {
        {(348697 call _freeIterator _iterator[348672])
        }
      }
      { scopeless type(348686 'move' _indexOfInterest[348671](348683 call iteratorIndex _iterator[348672]))
      }
      ForLoop[348673]
      { unknown loc[348690] "index var" "insert auto destroy"(348692 'move' loc[348690] _indexOfInterest[348671])
        {(348654 call(348646 call .(348643 call . this[348627] c"targetLocDom") c"add")(348650 call . loc[348690] c"id"))(348668 call =(348666 call(348658 call . this[348627] c"targetLocales")(348662 call . loc[348690] c"id")) loc[348690])
        } label _continueLabel[348676] _indexOfInterest[348671] _iterator[348672]
      } label _breakLabel[348677]
    }
    if(348727 call _cond_test traceReplicatedDist[348556])
    {(348725 call writeln "Replicated initializer over " targetLocales[348599])
    }
  } function Replicated[348588].dsiEqualDMaps[348744](arg _mt[348749]:_MT[238], arg this[348746]:Replicated[348588] : Replicated[348588], arg that[348741] :(348740 call Replicated[411188](?) ?[260])) : _unknown[51] "method"
  {(348764 return(348763 call(348755 call .(348752 call . this[348746] c"targetLocales") c"equals")(348759 call . that[348741] c"targetLocales")))
  } function Replicated[348588].dsiEqualDMaps[348774](arg _mt[348779]:_MT[238], arg this[348776]:Replicated[348588] : Replicated[348588], arg that[348772]:_any[178](?)) param : _unknown[51] "method"
  {(348782 return 0)
  } function Replicated[348588].dsiDestroyDist[348790](arg _mt[348795]:_MT[238], arg this[348792]:Replicated[348588] : Replicated[348588]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function Replicated[348588].dsiSupportsPrivatization[348803](arg _mt[348808]:_MT[238], arg this[348805]:Replicated[348588] : Replicated[348588]) param : _unknown[51] "method" "method overrides"
  {(348811 return 1)
  } function Replicated[348588].dsiGetPrivatizeData[348819](arg _mt[348824]:_MT[238], arg this[348821]:Replicated[348588] : Replicated[348588]) : _unknown[51] "method"
  {
    if(348848 call _cond_test traceReplicatedDist[348556])
    {(348846 call writeln "Replicated.dsiGetPrivatizeData")
    }(348855 return 0)
  } function Replicated[348588].dsiPrivatize[348864](arg _mt[348869]:_MT[238], arg this[348866]:Replicated[348588] : Replicated[348588], arg privatizeData[348862]:_any[178](?)) : _unknown[51] "method"
  {
    if(348894 call _cond_test traceReplicatedDist[348556])
    {(348892 call writeln "Replicated.dsiPrivatize on "(414265 call here[90438]))
    } const otherTargetLocales[348904] "const"(348901 call . this[348866] c"targetLocales")(348907 'end of statement') const privDom[348912] "const"(348909 call . otherTargetLocales[348904] c"_dom")(348915 'end of statement') const privTargetLocales[348924] "const" otherTargetLocales[348904](348921 call chpl__buildArrayRuntimeType(348919 call chpl__ensureDomainExpr privDom[348912]) locale[28])(348927 'end of statement') const nonNilWrapper[348950] "const"(348946 for  loc[348948]  in  otherTargetLocales[348904] do
    { loc[348948]
    } )(348941 call chpl__buildArrayRuntimeType(348939 call chpl__ensureDomainExpr(348935 call #(348929 call chpl_build_low_bounded_range 0)(348932 call . privTargetLocales[348924] c"size"))) locale[28])(348953 'end of statement')(348978 return(348956 'new'(_chpl_manager = unmanaged[220](?))(348977 call Replicated[411188](?) nonNilWrapper[348950] "used during privatization")))
  } function ReplicatedDom[349123](?).numReplicands[349025](arg _mt[349127]:_MT[238], arg this[349125]:ReplicatedDom[349123](?)) : _unknown[51] "method" "primary method" "no parens"
  {(349031 return(349028 call .(366841 call . this[349125] c"localDoms") c"size"))
  } function ReplicatedDom[349123](?).chpl_myLocDom[349038](arg _mt[349131]:_MT[238], arg this[349129]:ReplicatedDom[349123](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(349103 call _cond_test 1)
    {
      if(349098 call _cond_test(349054 call !(349053 call(349045 call .(349042 call .(366846 call . this[349129] c"dist") c"targetLocDom") c"contains")(349049 call .(366849 call here[90438]) c"id"))))
      {(349096 call halt "locale "(349076 call .(366851 call here[90438]) c"id") " has no local replicand")
      }
    }(349118 return(349116 call postfix!(349115 call(414289 call . this[349129] c"localDoms")(349111 call .(366853 call here[90438]) c"id"))))
  } type ReplicatedDom[349123](?) val super[355850]:BaseRectangularDom[146935](?) "super class" const dist[348987] "const" unmanaged Replicated[415614] unknown domRep[348998](348996 call chpl__buildDomainRuntimeType defaultDist[94053] rank[146854] idxType[146858] stridable[146862]) unknown localDoms[349019](349017 call chpl__buildArrayRuntimeType(349015 call chpl__ensureDomainExpr(349003 call . dist[348987] c"targetLocDom"))(349012 call unmanaged LocReplicatedDom?[415620](?) rank[146854] idxType[146858] stridable[146862])) type ReplicatedDom[414338](?) type LocReplicatedDom[349160](?) val super[355852]:object[22] "super class" unknown rank[349136] "param" int(64)[13] unknown idxType[349140] "type variable" unknown stridable[349144] "param" bool[10] unknown domLocalRep[349155](349153 call chpl__buildDomainRuntimeType defaultDist[94053] rank[349136] idxType[349140] stridable[349144]) type unmanaged LocReplicatedDom[415629](?) type unmanaged LocReplicatedDom?[415620](?) type LocReplicatedDom?[415617](?) type LocReplicatedDom[414280](?) function ReplicatedDom[349123](?).redirectee[349166](arg _mt[349171]:_MT[238], arg this[349168]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method"
  {(349181 return(414314 call . this[349168] c"domRep"))
  }
  { scopeless type(349178 call chpl__buildDomainRuntimeType defaultDist[94053](414298 call . this[349168] c"rank")(414303 call . this[349168] c"idxType")(414308 call . this[349168] c"stridable"))
  } function ReplicatedDom[349123](?).dsiMyDist[349190](arg _mt[349195]:_MT[238], arg this[349192]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "method overrides"
  {(349198 return(414319 call . this[349192] c"dist"))
  } function ReplicatedDom[349123](?).dsiSupportsPrivatization[349206](arg _mt[349211]:_MT[238], arg this[349208]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) param : _unknown[51] "method" "method overrides"
  {(349214 return 1)
  } type ReplicatedDomPrvData[349233](?) unknown distpid[349220] unknown domRep[349224] unknown localDoms[349228] function ReplicatedDom[349123](?).dsiGetPrivatizeData[349239](arg _mt[349244]:_MT[238], arg this[349241]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method"
  {
    if(349268 call _cond_test traceReplicatedDist[348556])
    {(349266 call writeln "ReplicatedDom.dsiGetPrivatizeData")
    }(349284 return(349274 'new'(349283 call ReplicatedDomPrvData[349233](?)(349277 call .(366857 call . this[349241] c"dist") c"pid")(414326 call . this[349241] c"domRep")(414331 call . this[349241] c"localDoms"))))
  } function ReplicatedDom[349123](?).dsiPrivatize[349293](arg _mt[349298]:_MT[238], arg this[349295]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg privatizeData[349291]:_any[178](?)) : _unknown[51] "method"
  {
    if(349323 call _cond_test traceReplicatedDist[348556])
    {(349321 call writeln "ReplicatedDom.dsiPrivatize on "(414335 call here[90438]))
    } unknown privdist[349341](349340 call chpl_getPrivatizedCopy(349334 'typeof'(349331 call . this[349295] c"dist"))(349337 call . privatizeData[349291] c"distpid"))(349344 'end of statement')(349373 return(349347 'new'(_chpl_manager = unmanaged[220](?))(349372 call ReplicatedDom[414338](?)(rank =(414343 call . this[349295] c"rank"))(idxType =(414348 call . this[349295] c"idxType"))(stridable =(414353 call . this[349295] c"stridable"))(dist = privdist[349341])(domRep =(349361 call . privatizeData[349291] c"domRep"))(localDoms =(349368 call . privatizeData[349291] c"localDoms")))))
  } function ReplicatedDom[349123](?).dsiGetReprivatizeData[349380](arg _mt[349385]:_MT[238], arg this[349382]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method"
  {(349388 return(414359 call . this[349382] c"domRep"))
  } function ReplicatedDom[349123](?).dsiReprivatize[349398](arg _mt[349405]:_MT[238], arg this[349402]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg other[349396]:_any[178](?), arg reprivatizeData[349400]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(349444 call assert(349441 call &&(349429 call &&(349417 call ==(349410 call . this[349402] c"rank")(349414 call . other[349396] c"rank"))(349427 call ==(349420 call . this[349402] c"idxType")(349424 call . other[349396] c"idxType")))(349439 call ==(349432 call . this[349402] c"stridable")(349436 call . other[349396] c"stridable"))))(349452 call =(349448 call . this[349402] c"domRep") reprivatizeData[349400])
  }
  { scopeless type void[4]
  } function Replicated[348588].dsiClone[349461](arg _mt[349466]:_MT[238], arg this[349463]:Replicated[348588] : Replicated[348588]) : _unknown[51] "method"
  {
    if(349495 call _cond_test traceReplicatedDist[348556])
    {(349493 call writeln "Replicated.dsiClone")
    } unknown nonNilWrapper[349523](349519 for  loc[349521]  in (414368 call . this[349463] c"targetLocales") do
    { loc[349521]
    } )(349514 call chpl__buildArrayRuntimeType(349512 call chpl__ensureDomainExpr(349508 call #(349502 call chpl_build_low_bounded_range 0)(349505 call .(366873 call . this[349463] c"targetLocales") c"size"))) locale[28])(349526 'end of statement')(349534 return(349529 'new'(_chpl_manager = unmanaged[220](?))(349533 call Replicated[411188](?) nonNilWrapper[349523])))
  }
  { scopeless type(349472 call _to_unmanaged(349470 'typeof' this[349463]))
  } function Replicated[348588].dsiNewRectangularDom[349546](arg _mt[349559]:_MT[238], arg this[349556]:Replicated[348588] : Replicated[348588], param arg rank[349543] : int(64)[13], arg idxType[349548]:_any[178](?), param arg stridable[349551] : bool[10], arg inds[349554]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(349593 call _cond_test traceReplicatedDist[348556])
    {(349591 call writeln "Replicated.dsiNewRectangularDom "(349589 call _build_tuple rank[349543](349584 call _cast string[26] idxType[349548]) stridable[349551] inds[349554]))
    } unknown result[349616](349601 'new'(_chpl_manager = unmanaged[220](?))(349615 call ReplicatedDom[414338](?)(rank = rank[349543])(idxType = idxType[349548])(stridable = stridable[349551])(dist =(349613 call _to_unmanaged this[349556]))))(349619 'end of statement')
    { unknown tmpIter[349658] "expr temp" "maybe ref" "no copy" "temp"(349661 'move' tmpIter[349658](349631 call _build_tuple(414386 call . this[349556] c"targetLocales")(349628 call . result[349616] c"localDoms"))) unknown isRngDomArr[349844] "maybe param" "temp"(349859 'move' isRngDomArr[349844](349857 call ||(349846 call isBoundedRange tmpIter[349658])(349855 call ||(349849 call isDomain tmpIter[349658])(349852 call isArray tmpIter[349658]))))
      if isRngDomArr[349844]
      { const _coforallCount[349688] "const" "end count" "temp"(349767 'move' _coforallCount[349688](349764 call _endCountAlloc 0)) unknown numTasks[349689] "temp"(349751 'move' numTasks[349689](349747 call . tmpIter[349658] c"size"))(349742 call _upEndCount _coforallCount[349688] 0 numTasks[349689]) unknown _indexOfInterest[349695] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349696] "expr temp" "temp"(349705 'move' _iterator[349696](349703 call _getIteratorZip tmpIter[349658]))
        Defer
        {
          {(349735 call _freeIterator _iterator[349696])
          }
        }
        { scopeless type(349710 'move' _indexOfInterest[349695](349707 call iteratorIndex _iterator[349696]))
        }
        ForLoop[349697]
        {(349715 call _check_tuple_var_decl _indexOfInterest[349695] 2) unknown loc[349721] "coforall index var" "index var" "insert auto destroy"(349723 'move' loc[349721](349719 call _indexOfInterest[349695] 0)) unknown locDom[349728] "coforall index var" "index var" "insert auto destroy"(349730 'move' locDom[349728](349726 call _indexOfInterest[349695] 1)) const tmp[349664] "const" "temp"(349666 'move' tmp[349664](349668 'deref'(349669 '_wide_get_locale' loc[349721])))
          {(349677 call = locDom[349728](349679 'new'(_chpl_manager = unmanaged[220](?))(349683 call LocReplicatedDom[414280](?) rank[349543] idxType[349548] stridable[349551])))(349690 call _downEndCount _coforallCount[349688] nil[44])(349672 'coforall on block' 0 tmp[349664])
          } label _continueLabel[349700] _indexOfInterest[349695] _iterator[349696]
        } label _breakLabel[349701]
        Defer
        {
          {(349754 call _endCountFree _coforallCount[349688])
          }
        }(349759 call _waitEndCount _coforallCount[349688] 0 numTasks[349689])
      }
      { const _coforallCount[349771] "const" "end count" "temp"(349841 'move' _coforallCount[349771](349838 call _endCountAlloc 0)) unknown _indexOfInterest[349778] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[349779] "expr temp" "temp"(349788 'move' _iterator[349779](349786 call _getIteratorZip tmpIter[349658]))
        Defer
        {
          {(349818 call _freeIterator _iterator[349779])
          }
        }
        { scopeless type(349793 'move' _indexOfInterest[349778](349790 call iteratorIndex _iterator[349779]))
        }
        ForLoop[349780]
        {(349798 call _check_tuple_var_decl _indexOfInterest[349778] 2) unknown loc[349804] "coforall index var" "index var" "insert auto destroy"(349806 'move' loc[349804](349802 call _indexOfInterest[349778] 0)) unknown locDom[349811] "coforall index var" "index var" "insert auto destroy"(349813 'move' locDom[349811](349809 call _indexOfInterest[349778] 1))(349825 call _upEndCount _coforallCount[349771] 0) const tmp[349649] "const" "temp"(349651 'move' tmp[349649](349647 'deref'(349646 '_wide_get_locale' loc[349804])))
          {(349643 call = locDom[349811](349636 'new'(_chpl_manager = unmanaged[220](?))(349642 call LocReplicatedDom[414280](?) rank[349543] idxType[349548] stridable[349551])))(349773 call _downEndCount _coforallCount[349771] nil[44])(349654 'coforall on block' 0 tmp[349649])
          } label _continueLabel[349783] _indexOfInterest[349778] _iterator[349779]
        } label _breakLabel[349784]
        Defer
        {
          {(349829 call _endCountFree _coforallCount[349771])
          }
        }(349834 call _waitEndCount _coforallCount[349771] 0)
      }
    }(349869 call(349864 call . result[349616] c"dsiSetIndices") inds[349554])(349872 return result[349616])
  } function Replicated[348588].dsiIndexToLocale[349881](arg _mt[349886]:_MT[238], arg this[349883]:Replicated[348588] : Replicated[348588], arg indexx[349879]:_any[178](?)) : _unknown[51] "method"
  {(349890 return(414403 call here[90438]))
  }
  { scopeless type locale[28]
  } function ReplicatedDom[349123](?).dsiSetIndices[349901](arg _mt[349906]:_MT[238], arg this[349903]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg x[349899]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(349950 call _cond_test traceReplicatedDist[348556])
    {(349948 call writeln "ReplicatedDom.dsiSetIndices on "(349944 call _cast string[26](349942 'typeof' x[349899])) ": " x[349899])
    }(349963 call(414411 call . this[349903] c"dsiSetIndices")(349960 call chpl__buildDomainExpr(349958 'expand_tuple' x[349899])))
  }
  {(349919 call &&(349911 call isTuple x[349899])(349918 call isRange(349916 call x[349899] 0)))
  } function ReplicatedDom[349123](?).dsiSetIndices[349975](arg _mt[349980]:_MT[238], arg this[349977]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg domArg[349972] : _domain[125908](?)) : _unknown[51] "method" "no return value for void"
  {
    if(350006 call _cond_test traceReplicatedDist[348556])
    {(350004 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg[349972])
    }(350014 call =(414420 call . this[349977] c"domRep") domArg[349972])
    { unknown tmpIter[350043] "expr temp" "maybe ref" "no copy" "temp"(350046 'move' tmpIter[350043](414426 call . this[349977] c"localDoms")) unknown isRngDomArr[350199] "maybe param" "temp"(350214 'move' isRngDomArr[350199](350212 call ||(350201 call isBoundedRange tmpIter[350043])(350210 call ||(350204 call isDomain tmpIter[350043])(350207 call isArray tmpIter[350043]))))
      if isRngDomArr[350199]
      { const _coforallCount[350071] "const" "end count" "temp"(350136 'move' _coforallCount[350071](350133 call _endCountAlloc 0)) unknown numTasks[350072] "temp"(350120 'move' numTasks[350072](350116 call . tmpIter[350043] c"size"))(350111 call _upEndCount _coforallCount[350071] 0 numTasks[350072]) unknown _indexOfInterest[350078] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350079] "expr temp" "temp"(350088 'move' _iterator[350079](350086 call _getIterator tmpIter[350043]))
        Defer
        {
          {(350104 call _freeIterator _iterator[350079])
          }
        }
        { scopeless type(350093 'move' _indexOfInterest[350078](350090 call iteratorIndex _iterator[350079]))
        }
        ForLoop[350080]
        { unknown locDom[350097] "coforall index var" "index var" "insert auto destroy"(350099 'move' locDom[350097] _indexOfInterest[350078]) const tmp[350049] "const" "temp"(350051 'move' tmp[350049](350053 'deref'(350054 '_wide_get_locale' locDom[350097])))
          {(350062 call =(350064 call .(350066 call postfix! locDom[350097]) c"domLocalRep") domArg[349972])(350073 call _downEndCount _coforallCount[350071] nil[44])(350057 'coforall on block' 0 tmp[350049])
          } label _continueLabel[350083] _indexOfInterest[350078] _iterator[350079]
        } label _breakLabel[350084]
        Defer
        {
          {(350123 call _endCountFree _coforallCount[350071])
          }
        }(350128 call _waitEndCount _coforallCount[350071] 0 numTasks[350072])
      }
      { const _coforallCount[350140] "const" "end count" "temp"(350196 'move' _coforallCount[350140](350193 call _endCountAlloc 0)) unknown _indexOfInterest[350147] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350148] "expr temp" "temp"(350157 'move' _iterator[350148](350155 call _getIterator tmpIter[350043]))
        Defer
        {
          {(350173 call _freeIterator _iterator[350148])
          }
        }
        { scopeless type(350162 'move' _indexOfInterest[350147](350159 call iteratorIndex _iterator[350148]))
        }
        ForLoop[350149]
        { unknown locDom[350166] "coforall index var" "index var" "insert auto destroy"(350168 'move' locDom[350166] _indexOfInterest[350147])(350180 call _upEndCount _coforallCount[350140] 0) const tmp[350035] "const" "temp"(350037 'move' tmp[350035](350033 'deref'(350032 '_wide_get_locale' locDom[350166])))
          {(350029 call =(350025 call .(350021 call postfix! locDom[350166]) c"domLocalRep") domArg[349972])(350142 call _downEndCount _coforallCount[350140] nil[44])(350040 'coforall on block' 0 tmp[350035])
          } label _continueLabel[350152] _indexOfInterest[350147] _iterator[350148]
        } label _breakLabel[350153]
        Defer
        {
          {(350184 call _endCountFree _coforallCount[350140])
          }
        }(350189 call _waitEndCount _coforallCount[350140] 0)
      }
    }
  }
  { scopeless type void[4]
  } function ReplicatedDom[349123](?).dsiGetIndices[350224](arg _mt[350229]:_MT[238], arg this[350226]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method"
  {
    if(350265 call _cond_test traceReplicatedDist[348556])
    {(350263 call writeln "ReplicatedDom.dsiGetIndices")
    }(350279 return(350278 call(350274 call .(350273 call(414455 call . this[350226] c"redirectee")) c"getIndices")))
  }
  { scopeless type(350241 call *(414437 call . this[350226] c"rank")(350240 call range[64319](?)(414443 call . this[350226] c"idxType") bounded[64208](414448 call . this[350226] c"stridable")))
  } function ReplicatedDom[349123](?).these[350287](arg _mt[350292]:_MT[238], arg this[350289]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  { unknown dom[350297](350296 call(414459 call . this[350289] c"redirectee"))(350300 'end of statement')
    { unknown _indexOfInterest[350307] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350308] "expr temp" "temp"(350317 'move' _iterator[350308](350315 call _getIterator dom[350297]))
      Defer
      {
        {(350333 call _freeIterator _iterator[350308])
        }
      }
      { scopeless type(350322 'move' _indexOfInterest[350307](350319 call iteratorIndex _iterator[350308]))
      }
      ForLoop[350309]
      { unknown i[350326] "index var" "insert auto destroy"(350328 'move' i[350326] _indexOfInterest[350307])(350305 yield i[350326]) label _continueLabel[350312] _indexOfInterest[350307] _iterator[350308]
      } label _breakLabel[350313]
    }
  } function ReplicatedDom[349123](?).these[350349](arg _mt[350354]:_MT[238], arg this[350351]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), param arg tag[350346] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350379] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350380] "expr temp" "temp"(350389 'move' _iterator[350380](350387 call _getIterator(350375 call(350370 call .(350367 call .(350366 call(414469 call . this[350351] c"chpl_myLocDom")) c"domLocalRep") c"these") tag[350346])))
      Defer
      {
        {(350406 call _freeIterator _iterator[350380])
        }
      }
      { scopeless type(350395 'move' _indexOfInterest[350379](350392 call iteratorIndex _iterator[350380]))
      }
      ForLoop[350381]
      { unknown follow[350399] "index var" "insert auto destroy"(350401 'move' follow[350399] _indexOfInterest[350379])(350377 yield follow[350399]) label _continueLabel[350384] _indexOfInterest[350379] _iterator[350380]
      } label _breakLabel[350385]
    }
  }
  {(350361 call == tag[350346] leader[447])
  } function ReplicatedDom[349123](?).these[350424](arg _mt[350431]:_MT[238], arg this[350428]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), param arg tag[350421] : iterKind[453], arg followThis[350426]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[350454] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350455] "expr temp" "temp"(350464 'move' _iterator[350455](350462 call _getIterator(350450 call(350444 call .(350443 call(414477 call . this[350428] c"redirectee")) c"these") tag[350421] followThis[350426])))
      Defer
      {
        {(350481 call _freeIterator _iterator[350455])
        }
      }
      { scopeless type(350470 'move' _indexOfInterest[350454](350467 call iteratorIndex _iterator[350455]))
      }
      ForLoop[350456]
      { unknown i[350474] "index var" "insert auto destroy"(350476 'move' i[350474] _indexOfInterest[350454])(350452 yield i[350474]) label _continueLabel[350459] _indexOfInterest[350454] _iterator[350455]
      } label _breakLabel[350460]
    }
  }
  {(350438 call == tag[350421] follower[449])
  } function ReplicatedDom[349123](?).dsiSerialWrite[350497](arg _mt[350502]:_MT[238], arg this[350499]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg f[350495]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(350516 call(350511 call .(350508 call .(350507 call(414484 call . this[350499] c"redirectee")) c"_value") c"dsiSerialWrite") f[350495])
  }
  { scopeless type void[4]
  } function ReplicatedDom[349123](?).dsiDims[350525](arg _mt[350530]:_MT[238], arg this[350527]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method"
  {(350552 return(350551 call(350547 call .(350546 call(414505 call . this[350527] c"redirectee")) c"dims")))
  }
  { scopeless type(350542 call *(414490 call . this[350527] c"rank")(350541 call range[64319](?)(414496 call . this[350527] c"idxType") bounded[64208](414501 call . this[350527] c"stridable")))
  } function ReplicatedDom[349123](?).dsiDim[350565](arg _mt[350570]:_MT[238], arg this[350567]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg dim[350562] : int(64)[13]) : _unknown[51] "method"
  {(350590 return(350589 call(350584 call .(350583 call(414520 call . this[350567] c"redirectee")) c"dim") dim[350562]))
  }
  { scopeless type(350580 call range[64319](?)(414511 call . this[350567] c"idxType") bounded[64208](414516 call . this[350567] c"stridable"))
  } function ReplicatedDom[349123](?).dsiLow[350599](arg _mt[350604]:_MT[238], arg this[350601]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "no parens"
  {(350612 return(350609 call .(350608 call(414525 call . this[350601] c"redirectee")) c"low"))
  } function ReplicatedDom[349123](?).dsiHigh[350620](arg _mt[350625]:_MT[238], arg this[350622]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "no parens"
  {(350633 return(350630 call .(350629 call(414529 call . this[350622] c"redirectee")) c"high"))
  } function ReplicatedDom[349123](?).dsiStride[350641](arg _mt[350646]:_MT[238], arg this[350643]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "no parens"
  {(350654 return(350651 call .(350650 call(414533 call . this[350643] c"redirectee")) c"stride"))
  } function ReplicatedDom[349123](?).dsiAlignedLow[350662](arg _mt[350667]:_MT[238], arg this[350664]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "no parens"
  {(350675 return(350672 call .(350671 call(414537 call . this[350664] c"redirectee")) c"alignedLow"))
  } function ReplicatedDom[349123](?).dsiAlignedHigh[350683](arg _mt[350688]:_MT[238], arg this[350685]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "no parens"
  {(350696 return(350693 call .(350692 call(414541 call . this[350685] c"redirectee")) c"alignedHigh"))
  } function ReplicatedDom[349123](?).dsiAlignment[350704](arg _mt[350709]:_MT[238], arg this[350706]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "no parens"
  {(350717 return(350714 call .(350713 call(414545 call . this[350706] c"redirectee")) c"alignment"))
  } function ReplicatedDom[349123](?).dsiNumIndices[350725](arg _mt[350730]:_MT[238], arg this[350727]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "no parens"
  {(350738 return(350735 call .(350734 call(414549 call . this[350727] c"redirectee")) c"size"))
  } function ReplicatedDom[349123](?).dsiMember[350748](arg _mt[350753]:_MT[238], arg this[350750]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg indexx[350746]:_any[178](?)) : _unknown[51] "method"
  {(350764 return(350763 call(350758 call .(350757 call(414553 call . this[350750] c"redirectee")) c"contains") indexx[350746]))
  } function ReplicatedDom[349123](?).dsiIndexOrder[350774](arg _mt[350779]:_MT[238], arg this[350776]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg indexx[350772]:_any[178](?)) : _unknown[51] "method"
  {(350790 return(350789 call(350784 call .(350783 call(414558 call . this[350776] c"redirectee")) c"dsiIndexOrder") indexx[350772]))
  } function ReplicatedDom[349123](?).dsiDestroyDom[350798](arg _mt[350803]:_MT[238], arg this[350800]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[350837] "expr temp" "maybe ref" "no copy" "temp"(350840 'move' tmpIter[350837](350807 call .(366885 call . this[350800] c"dist") c"targetLocDom")) unknown isRngDomArr[350994] "maybe param" "temp"(351009 'move' isRngDomArr[350994](351007 call ||(350996 call isBoundedRange tmpIter[350837])(351005 call ||(350999 call isDomain tmpIter[350837])(351002 call isArray tmpIter[350837]))))
      if isRngDomArr[350994]
      { const _coforallCount[350866] "const" "end count" "temp"(350931 'move' _coforallCount[350866](350928 call _endCountAlloc 0)) unknown numTasks[350867] "temp"(350915 'move' numTasks[350867](350911 call . tmpIter[350837] c"size"))(350906 call _upEndCount _coforallCount[350866] 0 numTasks[350867]) unknown _indexOfInterest[350873] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350874] "expr temp" "temp"(350883 'move' _iterator[350874](350881 call _getIterator tmpIter[350837]))
        Defer
        {
          {(350899 call _freeIterator _iterator[350874])
          }
        }
        { scopeless type(350888 'move' _indexOfInterest[350873](350885 call iteratorIndex _iterator[350874]))
        }
        ForLoop[350875]
        { unknown localeIdx[350892] "coforall index var" "index var" "insert auto destroy"(350894 'move' localeIdx[350892] _indexOfInterest[350873]) const tmp[350843] "const" "temp"(350845 'move' tmp[350843](350847 'deref'(350848 '_wide_get_locale'(350853 call(350850 call .(366895 call . this[350800] c"dist") c"targetLocales") localeIdx[350892]))))
          {(350861 call chpl__delete(350863 call(414572 call . this[350800] c"localDoms") localeIdx[350892]))(350868 call _downEndCount _coforallCount[350866] nil[44])(350856 'coforall on block' 0 tmp[350843])
          } label _continueLabel[350878] _indexOfInterest[350873] _iterator[350874]
        } label _breakLabel[350879]
        Defer
        {
          {(350918 call _endCountFree _coforallCount[350866])
          }
        }(350923 call _waitEndCount _coforallCount[350866] 0 numTasks[350867])
      }
      { const _coforallCount[350935] "const" "end count" "temp"(350991 'move' _coforallCount[350935](350988 call _endCountAlloc 0)) unknown _indexOfInterest[350942] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[350943] "expr temp" "temp"(350952 'move' _iterator[350943](350950 call _getIterator tmpIter[350837]))
        Defer
        {
          {(350968 call _freeIterator _iterator[350943])
          }
        }
        { scopeless type(350957 'move' _indexOfInterest[350942](350954 call iteratorIndex _iterator[350943]))
        }
        ForLoop[350944]
        { unknown localeIdx[350961] "coforall index var" "index var" "insert auto destroy"(350963 'move' localeIdx[350961] _indexOfInterest[350942])(350975 call _upEndCount _coforallCount[350935] 0) const tmp[350828] "const" "temp"(350830 'move' tmp[350828](350826 'deref'(350825 '_wide_get_locale'(350816 call(350811 call .(366890 call . this[350800] c"dist") c"targetLocales") localeIdx[350961]))))
          {(350822 call chpl__delete(350820 call(414565 call . this[350800] c"localDoms") localeIdx[350961]))(350937 call _downEndCount _coforallCount[350935] nil[44])(350833 'coforall on block' 0 tmp[350828])
          } label _continueLabel[350947] _indexOfInterest[350942] _iterator[350943]
        } label _breakLabel[350948]
        Defer
        {
          {(350979 call _endCountFree _coforallCount[350935])
          }
        }(350984 call _waitEndCount _coforallCount[350935] 0)
      }
    }
  } function ReplicatedDom[349123](?).dsiAssignDomain[351023](arg _mt[351032]:_MT[238], arg this[351029]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg rhs[351020] : _domain[125908](?), arg lhsPrivate[351026] : bool[10]) : _unknown[51] "method" "no return value for void"
  {(351045 call(351035 call . this[351029] c"dsiSetIndices")(351043 call(351039 call . rhs[351020] c"getIndices")))
  } function ReplicatedArr[351176](?).chpl_myLocArr[351093](arg _mt[351180]:_MT[238], arg this[351178]:ReplicatedArr[351176](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(351129 call _cond_test 1)
    {
      if(351124 call _cond_test(351112 call !(351111 call(351103 call .(351100 call .(351097 call .(366906 call . this[351178] c"dom") c"dist") c"targetLocDom") c"contains")(351107 call .(366909 call here[90438]) c"id"))))
      {(351122 call halt "locale "(351118 call .(366911 call here[90438]) c"id") " has no local replicand")
      }
    }(351144 return(351142 call postfix!(351141 call(414585 call . this[351178] c"localArrs")(351137 call .(366913 call here[90438]) c"id"))))
  } function ReplicatedArr[351176](?).replicand[351154](arg _mt[351184]:_MT[238], arg this[351182]:ReplicatedArr[351176](?), arg loc[351151] : locale[28]) ref : _unknown[51] "method" "primary method"
  {(351170 return(351167 call .(351163 call postfix!(351162 call(414590 call . this[351182] c"localArrs")(351158 call . loc[351151] c"id"))) c"arrLocalRep"))
  } type ReplicatedArr[351176](?) val super[355854]:AbsBaseArr[149740](?) "super class" const dom[351053] "const" unknown localArrs[351087](351085 call chpl__buildArrayRuntimeType(351083 call chpl__ensureDomainExpr(351061 call .(351058 call . dom[351053] c"dist") c"targetLocDom"))(351080 call unmanaged LocReplicatedArr?[415626](?) eltType[149714](351069 call . dom[351053] c"rank")(351073 call . dom[351053] c"idxType")(351077 call . dom[351053] c"stridable"))) type unmanaged ReplicatedArr[415632](?) type ReplicatedArr[414635](?) function _array[133594](?).replicand[351194](arg _mt[351199]:_MT[238], arg this[351196]:_array[133594](?) : _array[133594](?), arg loc[351191] : locale[28]) ref : _unknown[51] "method" "no doc"
  {(351208 return(351207 call(351202 call .(366917 call . this[351196] c"_value") c"replicand") loc[351191]))
  } function LocReplicatedArr[351460](?).init[351259](arg _mt[351464]:_MT[238], arg this[351462]:LocReplicatedArr[351460](?), arg eltType[351257]:_any[178](?), param arg rank[351262] : int(64)[13], arg idxType[351265]:_any[178](?), param arg stridable[351268] : bool[10], arg myDom[351278] :(351276 call unmanaged LocReplicatedDom[415629](?) rank[351262] idxType[351265] stridable[351268]), param arg initElts[351282] : bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {(351290 call =(351286 call . this[351462] c"eltType") eltType[351257])(351299 call =(351295 call . this[351462] c"rank") rank[351262])(351307 call =(351303 call . this[351462] c"idxType") idxType[351265])(351315 call =(351311 call . this[351462] c"stridable") stridable[351268])(351325 call =(351321 call . this[351462] c"myDom") myDom[351278])(351347 call =(351329 call . this[351462] c"arrLocalRep")(351346 call(351339 call .(351336 call .(351333 call . this[351462] c"myDom") c"domLocalRep") c"buildArray") eltType[351257](initElts = 1)))
    if(351409 call _cond_test(351360 call &&(351352 call == initElts[351282] 0)(351358 call !(351357 call isPODType eltType[351257]))))
    {(351406 call compilerError(351403 call +(351384 call + "ReplicatedDist array initialization is not currently supported for element type "(351382 call _cast string[26] eltType[351257])) " - please default-initialize the array"))
    }
  } function LocReplicatedArr[351460](?).deinit[351417](arg _mt[351468]:_MT[238], arg this[351466]:LocReplicatedArr[351460](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {(351424 call _do_destroy_array(414614 call . this[351466] c"arrLocalRep")(deinitElts = 1))
  } function LocReplicatedArr[351460](?).writeThis[351433](arg _mt[351472]:_MT[238], arg this[351470]:LocReplicatedArr[351460](?), arg f[351431]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {(351454 call halt "LocReplicatedArr.writeThis() is not implemented / should not be needed")
  } type LocReplicatedArr[351460](?) val super[355856]:object[22] "super class" unknown eltType[351214] "type variable" unknown rank[351218] "param" int(64)[13] unknown idxType[351222] "type variable" unknown stridable[351226] "param" bool[10] unknown myDom[351237](351235 call unmanaged LocReplicatedDom[415629](?) rank[351218] idxType[351222] stridable[351226]) unknown arrLocalRep[351251] "local field" "no auto destroy" "unsafe"(351249 call chpl__buildArrayRuntimeType(351247 call chpl__ensureDomainExpr(351242 call . myDom[351237] c"domLocalRep")) eltType[351214]) type unmanaged LocReplicatedArr?[415626](?) type LocReplicatedArr?[415623](?) type LocReplicatedArr[414578](?) function ReplicatedArr[351176](?).init[351480](arg _mt[351487]:_MT[238], arg this[351484]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg eltType[351478]:_any[178](?), arg dom[351482]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(351496 call(351490 call .(366930 call . this[351484] c"super") c"init")(eltType = eltType[351478]))(351504 call =(351500 call . this[351484] c"dom") dom[351482])
  } function ReplicatedArr[351176](?).stridable[351512](arg _mt[351517]:_MT[238], arg this[351514]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) param : _unknown[51] "method" "no parens"
  {(351523 return(351520 call .(366936 call . this[351514] c"dom") c"stridable"))
  } function ReplicatedArr[351176](?).idxType[351531](arg _mt[351536]:_MT[238], arg this[351533]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) type : _unknown[51] "method" "no parens"
  {(351542 return(351539 call .(366941 call . this[351533] c"dom") c"idxType"))
  } function ReplicatedArr[351176](?).rank[351550](arg _mt[351555]:_MT[238], arg this[351552]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) param : _unknown[51] "method" "no parens"
  {(351561 return(351558 call .(366946 call . this[351552] c"dom") c"rank"))
  } function ReplicatedArr[351176](?).dsiGetBaseDom[351569](arg _mt[351574]:_MT[238], arg this[351571]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) : _unknown[51] "method" "method overrides"
  {(351577 return(414621 call . this[351571] c"dom"))
  } function ReplicatedArr[351176](?).dsiSupportsPrivatization[351585](arg _mt[351590]:_MT[238], arg this[351587]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) param : _unknown[51] "method" "method overrides"
  {(351593 return 1)
  } type ReplicatedArrPrvData[351608](?) unknown dompid[351599] unknown localArrs[351603] function ReplicatedArr[351176](?).dsiGetPrivatizeData[351614](arg _mt[351619]:_MT[238], arg this[351616]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) : _unknown[51] "method"
  {
    if(351643 call _cond_test traceReplicatedDist[348556])
    {(351641 call writeln "ReplicatedArr.dsiGetPrivatizeData")
    }(351658 return(351649 'new'(351657 call ReplicatedArrPrvData[351608](?)(351652 call .(366951 call . this[351616] c"dom") c"pid")(414628 call . this[351616] c"localArrs"))))
  } function ReplicatedArr[351176](?).dsiPrivatize[351667](arg _mt[351672]:_MT[238], arg this[351669]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg privatizeData[351665]:_any[178](?)) : _unknown[51] "method"
  {
    if(351697 call _cond_test traceReplicatedDist[348556])
    {(351695 call writeln "ReplicatedArr.dsiPrivatize on "(414632 call here[90438]))
    } unknown privdom[351715](351714 call chpl_getPrivatizedCopy(351708 'typeof'(351705 call . this[351669] c"dom"))(351711 call . privatizeData[351665] c"dompid"))(351718 'end of statement') unknown result[351727](351721 'new'(_chpl_manager = unmanaged[220](?))(351726 call ReplicatedArr[414635](?)(414640 call . this[351669] c"eltType") privdom[351715]))(351730 'end of statement')(351741 call =(351734 call . result[351727] c"localArrs")(351738 call . privatizeData[351665] c"localArrs"))(351745 return result[351727])
  } function ReplicatedDom[349123](?).dsiBuildArray[351754](arg _mt[351763]:_MT[238], arg this[351760]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg eltType[351752]:_any[178](?), param arg initElts[351757] : bool[10]) : _unknown[51] "method"
  {
    if(351797 call _cond_test traceReplicatedDist[348556])
    {(351795 call writeln "ReplicatedDom.dsiBuildArray")
    } unknown result[351814](351805 'new'(_chpl_manager = unmanaged[220](?))(351813 call ReplicatedArr[414635](?) eltType[351752](351812 call _to_unmanaged this[351760])))(351817 'end of statement')
    { unknown tmpIter[351867] "expr temp" "maybe ref" "no copy" "temp"(351870 'move' tmpIter[351867](351834 call _build_tuple(351825 call .(366960 call . this[351760] c"dist") c"targetLocales")(414654 call . this[351760] c"localDoms")(351831 call . result[351814] c"localArrs"))) unknown isRngDomArr[352073] "maybe param" "temp"(352088 'move' isRngDomArr[352073](352086 call ||(352075 call isBoundedRange tmpIter[351867])(352084 call ||(352078 call isDomain tmpIter[351867])(352081 call isArray tmpIter[351867]))))
      if isRngDomArr[352073]
      { const _coforallCount[351903] "const" "end count" "temp"(351989 'move' _coforallCount[351903](351986 call _endCountAlloc 0)) unknown numTasks[351904] "temp"(351973 'move' numTasks[351904](351969 call . tmpIter[351867] c"size"))(351964 call _upEndCount _coforallCount[351903] 0 numTasks[351904]) unknown _indexOfInterest[351910] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[351911] "expr temp" "temp"(351920 'move' _iterator[351911](351918 call _getIteratorZip tmpIter[351867]))
        Defer
        {
          {(351957 call _freeIterator _iterator[351911])
          }
        }
        { scopeless type(351925 'move' _indexOfInterest[351910](351922 call iteratorIndex _iterator[351911]))
        }
        ForLoop[351912]
        {(351930 call _check_tuple_var_decl _indexOfInterest[351910] 3) unknown loc[351936] "coforall index var" "index var" "insert auto destroy"(351938 'move' loc[351936](351934 call _indexOfInterest[351910] 0)) unknown locDom[351943] "coforall index var" "index var" "insert auto destroy"(351945 'move' locDom[351943](351941 call _indexOfInterest[351910] 1)) unknown locArr[351950] "coforall index var" "index var" "insert auto destroy"(351952 'move' locArr[351950](351948 call _indexOfInterest[351910] 2)) const tmp[351873] "const" "temp"(351875 'move' tmp[351873](351877 'deref'(351878 '_wide_get_locale' loc[351936])))
          {(351886 call = locArr[351950](351888 'new'(_chpl_manager = unmanaged[220](?))(351892 call LocReplicatedArr[414578](?) eltType[351752](414684 call . this[351760] c"rank")(414689 call . this[351760] c"idxType")(414694 call . this[351760] c"stridable")(351898 call postfix! locDom[351943])(initElts = initElts[351757]))))(351905 call _downEndCount _coforallCount[351903] nil[44])(351881 'coforall on block' 0 tmp[351873])
          } label _continueLabel[351915] _indexOfInterest[351910] _iterator[351911]
        } label _breakLabel[351916]
        Defer
        {
          {(351976 call _endCountFree _coforallCount[351903])
          }
        }(351981 call _waitEndCount _coforallCount[351903] 0 numTasks[351904])
      }
      { const _coforallCount[351993] "const" "end count" "temp"(352070 'move' _coforallCount[351993](352067 call _endCountAlloc 0)) unknown _indexOfInterest[352000] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352001] "expr temp" "temp"(352010 'move' _iterator[352001](352008 call _getIteratorZip tmpIter[351867]))
        Defer
        {
          {(352047 call _freeIterator _iterator[352001])
          }
        }
        { scopeless type(352015 'move' _indexOfInterest[352000](352012 call iteratorIndex _iterator[352001]))
        }
        ForLoop[352002]
        {(352020 call _check_tuple_var_decl _indexOfInterest[352000] 3) unknown loc[352026] "coforall index var" "index var" "insert auto destroy"(352028 'move' loc[352026](352024 call _indexOfInterest[352000] 0)) unknown locDom[352033] "coforall index var" "index var" "insert auto destroy"(352035 'move' locDom[352033](352031 call _indexOfInterest[352000] 1)) unknown locArr[352040] "coforall index var" "index var" "insert auto destroy"(352042 'move' locArr[352040](352038 call _indexOfInterest[352000] 2))(352054 call _upEndCount _coforallCount[351993] 0) const tmp[351858] "const" "temp"(351860 'move' tmp[351858](351856 'deref'(351855 '_wide_get_locale' loc[352026])))
          {(351852 call = locArr[352040](351839 'new'(_chpl_manager = unmanaged[220](?))(351851 call LocReplicatedArr[414578](?) eltType[351752](414663 call . this[351760] c"rank")(414668 call . this[351760] c"idxType")(414673 call . this[351760] c"stridable")(351847 call postfix! locDom[352033])(initElts = initElts[351757]))))(351995 call _downEndCount _coforallCount[351993] nil[44])(351863 'coforall on block' 0 tmp[351858])
          } label _continueLabel[352005] _indexOfInterest[352000] _iterator[352001]
        } label _breakLabel[352006]
        Defer
        {
          {(352058 call _endCountFree _coforallCount[351993])
          }
        }(352063 call _waitEndCount _coforallCount[351993] 0)
      }
    }(352093 return result[351814])
  }
  { scopeless type(351773 call unmanaged ReplicatedArr[415632](?) eltType[351752](351772 call _to_unmanaged(351770 'typeof' this[351760])))
  } function ReplicatedArr[351176](?).dsiAccess[352103](arg _mt[352108]:_MT[238], arg this[352105]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg indexx[352101]:_any[178](?)) ref : _unknown[51] "method"
  {(352119 return(352118 call(352113 call .(352112 call(414703 call . this[352105] c"chpl_myLocArr")) c"arrLocalRep") indexx[352101]))
  } function ReplicatedArr[351176](?).dsiBoundsCheck[352129](arg _mt[352134]:_MT[238], arg this[352131]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg indexx[352127]:_any[178](?)) : _unknown[51] "method"
  {(352152 return(352151 call(352143 call .(352140 call .(352137 call .(366966 call . this[352131] c"dom") c"dist") c"targetLocDom") c"contains")(352147 call .(366969 call here[90438]) c"id")))
  } function ReplicatedArr[351176](?).dsiSerialWrite[352162](arg _mt[352167]:_MT[238], arg this[352164]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg f[352160]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352195 call(352190 call .(352187 call .(352184 call .(352182 call postfix!(352181 call(414709 call . this[352164] c"localArrs")(352177 call .(352176 call(352172 call . f[352160] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialWrite") f[352160])
  }
  { scopeless type void[4]
  } function ReplicatedArr[351176](?).dsiSerialRead[352206](arg _mt[352213]:_MT[238], arg this[352210]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg f[352204]:_any[178](?), arg loc[352208]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {(352241 call(352236 call .(352233 call .(352230 call .(352228 call postfix!(352227 call(414715 call . this[352210] c"localArrs")(352223 call .(352222 call(352218 call . f[352204] c"readWriteThisFromLocale")) c"id"))) c"arrLocalRep") c"_value") c"dsiSerialRead") f[352204])
  }
  { scopeless type void[4]
  } function isReplicatedArr[352251](arg arr[352249]:_any[178](?)) param : _unknown[51]
  {(352265 return(354975 'is_subtype' ReplicatedArr[414635](?)(352261 'typeof'(352260 call _to_borrowed(352258 call chpl__getActualArray arr[352249])))))
  } function chpl_serialReadWriteRectangular[352274](arg f[352272]:_any[178](?), arg arr[352276]:_any[178](?), arg dom[352278]:_any[178](?)) : _unknown[51] "no return value for void"
  { const origloc[352290] "const"(352289 call(352285 call . f[352272] c"readWriteThisFromLocale"))(352293 'end of statement') const tmp[352306] "const" "temp"(352308 'move' tmp[352306](352304 'deref'(352303 '_wide_get_locale' origloc[352290])))
    {(352301 call chpl_serialReadWriteRectangularHelper f[352272] arr[352276] dom[352278])(352311 'on block' 0 tmp[352306])
    }
  }
  {(352283 call isReplicatedArr arr[352276])
  } function ReplicatedArr[351176](?).dsiElementInitializationComplete[352320](arg _mt[352325]:_MT[238], arg this[352322]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351176](?).dsiElementDeinitializationComplete[352333](arg _mt[352338]:_MT[238], arg this[352335]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  } function ReplicatedArr[351176](?).dsiDestroyArr[352350](arg _mt[352355]:_MT[238], arg this[352352]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg deinitElts[352347] : bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[352392] "expr temp" "maybe ref" "no copy" "temp"(352395 'move' tmpIter[352392](352371 call _build_tuple(352366 call .(352363 call .(366976 call . this[352352] c"dom") c"dist") c"targetLocales")(414728 call . this[352352] c"localArrs"))) unknown isRngDomArr[352570] "maybe param" "temp"(352585 'move' isRngDomArr[352570](352583 call ||(352572 call isBoundedRange tmpIter[352392])(352581 call ||(352575 call isDomain tmpIter[352392])(352578 call isArray tmpIter[352392]))))
      if isRngDomArr[352570]
      { const _coforallCount[352414] "const" "end count" "temp"(352493 'move' _coforallCount[352414](352490 call _endCountAlloc 0)) unknown numTasks[352415] "temp"(352477 'move' numTasks[352415](352473 call . tmpIter[352392] c"size"))(352468 call _upEndCount _coforallCount[352414] 0 numTasks[352415]) unknown _indexOfInterest[352421] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352422] "expr temp" "temp"(352431 'move' _iterator[352422](352429 call _getIteratorZip tmpIter[352392]))
        Defer
        {
          {(352461 call _freeIterator _iterator[352422])
          }
        }
        { scopeless type(352436 'move' _indexOfInterest[352421](352433 call iteratorIndex _iterator[352422]))
        }
        ForLoop[352423]
        {(352441 call _check_tuple_var_decl _indexOfInterest[352421] 2) unknown loc[352447] "coforall index var" "index var" "insert auto destroy"(352449 'move' loc[352447](352445 call _indexOfInterest[352421] 0)) unknown locArr[352454] "coforall index var" "index var" "insert auto destroy"(352456 'move' locArr[352454](352452 call _indexOfInterest[352421] 1)) const tmp[352398] "const" "temp"(352400 'move' tmp[352398](352402 'deref'(352403 '_wide_get_locale' loc[352447])))
          {
            {(352411 call chpl__delete locArr[352454])
            }(352416 call _downEndCount _coforallCount[352414] nil[44])(352406 'coforall on block' 0 tmp[352398])
          } label _continueLabel[352426] _indexOfInterest[352421] _iterator[352422]
        } label _breakLabel[352427]
        Defer
        {
          {(352480 call _endCountFree _coforallCount[352414])
          }
        }(352485 call _waitEndCount _coforallCount[352414] 0 numTasks[352415])
      }
      { const _coforallCount[352497] "const" "end count" "temp"(352567 'move' _coforallCount[352497](352564 call _endCountAlloc 0)) unknown _indexOfInterest[352504] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352505] "expr temp" "temp"(352514 'move' _iterator[352505](352512 call _getIteratorZip tmpIter[352392]))
        Defer
        {
          {(352544 call _freeIterator _iterator[352505])
          }
        }
        { scopeless type(352519 'move' _indexOfInterest[352504](352516 call iteratorIndex _iterator[352505]))
        }
        ForLoop[352506]
        {(352524 call _check_tuple_var_decl _indexOfInterest[352504] 2) unknown loc[352530] "coforall index var" "index var" "insert auto destroy"(352532 'move' loc[352530](352528 call _indexOfInterest[352504] 0)) unknown locArr[352537] "coforall index var" "index var" "insert auto destroy"(352539 'move' locArr[352537](352535 call _indexOfInterest[352504] 1))(352551 call _upEndCount _coforallCount[352497] 0) const tmp[352382] "const" "temp"(352384 'move' tmp[352382](352380 'deref'(352379 '_wide_get_locale' loc[352530])))
          {
            {(352375 call chpl__delete locArr[352537])
            }(352499 call _downEndCount _coforallCount[352497] nil[44])(352387 'coforall on block' 0 tmp[352382])
          } label _continueLabel[352509] _indexOfInterest[352504] _iterator[352505]
        } label _breakLabel[352510]
        Defer
        {
          {(352555 call _endCountFree _coforallCount[352497])
          }
        }(352560 call _waitEndCount _coforallCount[352497] 0)
      }
    }
  } function ReplicatedArr[351176](?).these[352595](arg _mt[352600]:_MT[238], arg this[352597]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352613] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352614] "expr temp" "temp"(352623 'move' _iterator[352614](352621 call _getIterator(352607 call .(352606 call(414741 call . this[352597] c"chpl_myLocArr")) c"arrLocalRep")))
      Defer
      {
        {(352640 call _freeIterator _iterator[352614])
        }
      }
      { scopeless type(352629 'move' _indexOfInterest[352613](352626 call iteratorIndex _iterator[352614]))
      }
      ForLoop[352615]
      { unknown a[352633] "index var" "insert auto destroy"(352635 'move' a[352633] _indexOfInterest[352613])(352611 yield a[352633]) label _continueLabel[352618] _indexOfInterest[352613] _iterator[352614]
      } label _breakLabel[352619]
    }
  }
  { scopeless type(414737 call . this[352597] c"eltType")
  } function ReplicatedArr[351176](?).these[352658](arg _mt[352663]:_MT[238], arg this[352660]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), param arg tag[352655] : iterKind[453]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352683] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352684] "expr temp" "temp"(352693 'move' _iterator[352684](352691 call _getIterator(352679 call(352674 call .(366982 call . this[352660] c"dom") c"these") tag[352655])))
      Defer
      {
        {(352710 call _freeIterator _iterator[352684])
        }
      }
      { scopeless type(352699 'move' _indexOfInterest[352683](352696 call iteratorIndex _iterator[352684]))
      }
      ForLoop[352685]
      { unknown follow[352703] "index var" "insert auto destroy"(352705 'move' follow[352703] _indexOfInterest[352683])(352681 yield follow[352703]) label _continueLabel[352688] _indexOfInterest[352683] _iterator[352684]
      } label _breakLabel[352689]
    }
  }
  {(352670 call == tag[352655] leader[447])
  } function ReplicatedArr[351176](?).these[352728](arg _mt[352735]:_MT[238], arg this[352732]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), param arg tag[352725] : iterKind[453], arg followThis[352730]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[352761] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[352762] "expr temp" "temp"(352771 'move' _iterator[352762](352769 call _getIterator(352757 call(352751 call .(352748 call .(352747 call(414752 call . this[352732] c"chpl_myLocArr")) c"arrLocalRep") c"these") tag[352725] followThis[352730])))
      Defer
      {
        {(352788 call _freeIterator _iterator[352762])
        }
      }
      { scopeless type(352777 'move' _indexOfInterest[352761](352774 call iteratorIndex _iterator[352762]))
      }
      ForLoop[352763]
      { unknown a[352781] "index var" "insert auto destroy"(352783 'move' a[352781] _indexOfInterest[352761])(352759 yield a[352781]) label _continueLabel[352766] _indexOfInterest[352761] _iterator[352762]
      } label _breakLabel[352767]
    }
  }
  {(352742 call == tag[352725] follower[449])
  } function Replicated[348588].dsiTargetLocales[352802](arg _mt[352807]:_MT[238], arg this[352804]:Replicated[348588] : Replicated[348588]) : _unknown[51] "method"
  {(352810 return(414760 call . this[352804] c"targetLocales"))
  } function ReplicatedDom[349123](?).dsiTargetLocales[352818](arg _mt[352823]:_MT[238], arg this[352820]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) : _unknown[51] "method"
  {(352829 return(352826 call .(366988 call . this[352820] c"dist") c"targetLocales"))
  } function ReplicatedArr[351176](?).dsiTargetLocales[352837](arg _mt[352842]:_MT[238], arg this[352839]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) : _unknown[51] "method"
  {(352851 return(352848 call .(352845 call .(366993 call . this[352839] c"dom") c"dist") c"targetLocales"))
  } function ReplicatedDom[349123](?).dsiHasSingleLocalSubdomain[352859](arg _mt[352864]:_MT[238], arg this[352861]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?)) param : _unknown[51] "method"
  {(352867 return 1)
  } function ReplicatedArr[351176](?).dsiHasSingleLocalSubdomain[352875](arg _mt[352880]:_MT[238], arg this[352877]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?)) param : _unknown[51] "method"
  {(352883 return 1)
  } function ReplicatedDom[349123](?).dsiLocalSubdomain[352895](arg _mt[352900]:_MT[238], arg this[352897]:ReplicatedDom[349123](?) : ReplicatedDom[349123](?), arg loc[352892] : locale[28]) : _unknown[51] "method"
  {
    if(352933 call _cond_test(352914 call(352906 call .(352903 call .(366998 call . this[352897] c"localDoms") c"_dom") c"contains")(352910 call . loc[352892] c"id")))
    {(352916 return(414765 call . this[352897] c"domRep"))
    }
    { unknown d[352925](352923 call chpl__buildDomainRuntimeType defaultDist[94053](414770 call . this[352897] c"rank")(414775 call . this[352897] c"idxType")(414780 call . this[352897] c"stridable"))(352928 'end of statement')(352931 return d[352925])
    }
  } function ReplicatedArr[351176](?).dsiLocalSubdomain[352948](arg _mt[352953]:_MT[238], arg this[352950]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg loc[352945] : locale[28]) : _unknown[51] "method"
  {
    if(352989 call _cond_test(352967 call(352959 call .(352956 call .(367004 call . this[352950] c"localArrs") c"_dom") c"contains")(352963 call . loc[352945] c"id")))
    {(352972 return(352969 call .(367010 call . this[352950] c"dom") c"domRep"))
    }
    { unknown d[352981](352979 call chpl__buildDomainRuntimeType defaultDist[94053](414786 call . this[352950] c"rank")(414790 call . this[352950] c"idxType")(414794 call . this[352950] c"stridable"))(352984 'end of statement')(352987 return d[352981])
    }
  } function ReplicatedArr[351176](?).dsiLocalSlice[353002](arg _mt[353007]:_MT[238], arg this[353004]:ReplicatedArr[351176](?) : ReplicatedArr[351176](?), arg ranges[353000]:_any[178](?)) : _unknown[51] "method"
  {(353019 return(353018 call(353012 call .(353011 call(414800 call . this[353004] c"chpl_myLocArr")) c"arrLocalRep")(353016 'expand_tuple' ranges[353000])))
  }(355637 'used modules list'(353122 'use' ChapelStandard[20267]))
}