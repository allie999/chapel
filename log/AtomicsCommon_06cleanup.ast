AST dump for AtomicsCommon after pass cleanup.
Module use list: 

{
  (51944 'use' ChapelStandard)
  function atomic_refcnt[52102].inc[51962](arg _mt[52106]:_MT[238], arg this[52104]:atomic_refcnt[52102], arg cnt[51959] =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(51986 call _cond_test CHPL_CACHE_REMOTE)
    {
      (51976 call(51966 call . _cnt c"add") cnt(order =(51972 call . memoryOrder c"relaxed")))
    }
    {
      (51984 call(51979 call . _cnt c"add") cnt)
    }
  }
  function atomic_refcnt[52102].dec[51997](arg _mt[52110]:_MT[238], arg this[52108]:atomic_refcnt[52102]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown got[52007](52006 call int[13] 64)
    (52010 'end of statement')
    if(52074 call _cond_test CHPL_CACHE_REMOTE)
    {
      (52026 call = got(52025 call(52015 call . _cnt c"fetchSub") 1(order =(52021 call . memoryOrder c"release"))))
      if(52046 call _cond_test(52032 call == got 1))
      {
        (52040 call atomicFence(52036 call . memoryOrder c"acquire"))
        (52044 return 0)
      }
      (52054 return(52052 call - got 1))
    }
    {
      (52064 call = got(52063 call(52058 call . _cnt c"fetchSub") 1))
      (52072 return(52070 call - got 1))
    }
  }
  { scopeless type
    (52002 call int[13] 64)
  }
  function atomic_refcnt[52102].read[52083](arg _mt[52114]:_MT[238], arg this[52112]:atomic_refcnt[52102]) : _unknown[51] "inline" "method" "primary method"
  {
    (52095 return(52094 call(52090 call . _cnt c"read")))
  }
  { scopeless type
    (52088 call int[13] 64)
  }
  type atomic_refcnt[52102] unknown _cnt[51952](51951 call chpl__processorAtomicType int[13])
}