AST dump for String after pass scopeResolve.
Module use list: ChapelStandard SysCTypes ByteBufferHelpers BytesStringCommon SysBasic CString StringCasts NVStringFactory 

{
  function qio_decode_char_buf[27933](ref arg chr[27930] :
  (27929 call int(64)[13] 32), ref arg nbytes[27936] :
  c_int[20549], arg buf[27940] :
  c_string[19], arg buflen[27944] :
  ssize_t[20647]) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    syserr[223501]
  }
  function qio_decode_char_buf_esc[27960](ref arg chr[27957] :
  (27956 call int(64)[13] 32), ref arg nbytes[27963] :
  c_int[20549], arg buf[27967] :
  c_string[19], arg buflen[27971] :
  ssize_t[20647]) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    syserr[223501]
  }
  function qio_encode_char_buf[27984](arg dst[27981] :
  c_void_ptr[149], arg chr[27990] :
  (27989 call int(64)[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    syserr[223501]
  }
  function qio_nbytes_char[28006](arg chr[28003] :
  (28002 call int(64)[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    c_int[20549]
  }
  const CHPL_SHORT_STRING_SIZE[28013] "const" "extern" "no doc" c_int[20549]
  (28016 'end of statement')
  type chpl__inPlaceBuffer[28019]
  {
  }
  function chpl__getInPlaceBufferData[28030](const  ref arg data[28027] :
  chpl__inPlaceBuffer[28019]) : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    bufferType[172493]
  }
  function chpl__getInPlaceBufferDataForWrite[28042](ref arg data[28039] :
  chpl__inPlaceBuffer[28019]) : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    bufferType[172493]
  }
  unknown debugStrings[28049] "config" "param" "private" 0
  (28052 'end of statement')
  type __serializeHelper[28086] unknown buffLen[28055] int(64)[13] unknown buff[28060] bufferType[172493] unknown size[28065] int(64)[13] unknown locale_id[28071](28070 'typeof' chpl_nodeID[208164]) unknown shortData[28076] chpl__inPlaceBuffer[28019] unknown cachedNumCodepoints[28081] int(64)[13]
  function byteIndex[28170].init[28097](arg _mt[28174]:_MT[238], arg this[28172]:byteIndex[28170]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
  }
  function byteIndex[28170].init[28108](arg _mt[28178]:_MT[238], arg this[28176]:byteIndex[28170], arg i[28105] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28112 call =(369357 call . this[28176] c"_bindex") i[28105])
  }
  function byteIndex[28170].init=[28124](arg _mt[28182]:_MT[238], arg this[28180]:byteIndex[28170], arg other[28121] :
  byteIndex[28170]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28133 call =(369364 call . this[28180] c"_bindex")(28130 call . other[28121] c"_bindex"))
  }
  function byteIndex[28170].init=[28145](arg _mt[28186]:_MT[238], arg this[28184]:byteIndex[28170], arg i[28142] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28149 call =(369369 call . this[28184] c"_bindex") i[28142])
  }
  function byteIndex[28170].writeThis[28159](arg _mt[28190]:_MT[238], arg this[28188]:byteIndex[28170], arg f[28157]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (28163 call <~> f[28157](369376 call . this[28188] c"_bindex"))
  }
  type byteIndex[28170] unknown _bindex[28091] "no doc" int(64)[13]
  function codepointIndex[28274].init[28201](arg _mt[28278]:_MT[238], arg this[28276]:codepointIndex[28274]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
  }
  function codepointIndex[28274].init[28212](arg _mt[28282]:_MT[238], arg this[28280]:codepointIndex[28274], arg i[28209] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28216 call =(369381 call . this[28280] c"_cpindex") i[28209])
  }
  function codepointIndex[28274].init=[28228](arg _mt[28286]:_MT[238], arg this[28284]:codepointIndex[28274], arg i[28225] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28232 call =(369387 call . this[28284] c"_cpindex") i[28225])
  }
  function codepointIndex[28274].init=[28244](arg _mt[28290]:_MT[238], arg this[28288]:codepointIndex[28274], arg cpi[28241] :
  codepointIndex[28274]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28253 call =(369394 call . this[28288] c"_cpindex")(28250 call . cpi[28241] c"_cpindex"))
  }
  function codepointIndex[28274].writeThis[28263](arg _mt[28294]:_MT[238], arg this[28292]:codepointIndex[28274], arg f[28261]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (28267 call <~> f[28261](369400 call . this[28292] c"_cpindex"))
  }
  type codepointIndex[28274] unknown _cpindex[28195] "no doc" int(64)[13]
  function chpl_build_bounded_range[28304](arg low[28301] :
  unknown t[28299], arg high[28307] :
  t[28299]) : _unknown[51] "no doc"
  {
    (28329 return(28320 'new'(28328 call range[64316](?) t[28299](_low = low[28301])(_high = high[28307]))))
  }
  where {
    (28318 call ||(28312 call == t[28299] byteIndex[28170])(28316 call == t[28299] codepointIndex[28274]))
  }
  function chpl_build_low_bounded_range[28342](arg low[28339] :
  unknown t[28337]) : _unknown[51] "no doc"
  {
    (28367 return(28354 'new'(28366 call range[64316](?) t[28337] boundedLow[64207](_low = low[28339]))))
  }
  where {
    (28352 call ||(28346 call == t[28337] byteIndex[28170])(28350 call == t[28337] codepointIndex[28274]))
  }
  function chpl_build_high_bounded_range[28380](arg high[28377] :
  unknown t[28375]) : _unknown[51] "no doc"
  {
    (28405 return(28392 'new'(28404 call range[64316](?) t[28375] boundedHigh[64209](_high = high[28377]))))
  }
  where {
    (28390 call ||(28384 call == t[28375] byteIndex[28170])(28388 call == t[28375] codepointIndex[28274]))
  }
  function chpl__rangeStrideType[28417](arg idxType[28414] :
  byteIndex[28170]) type : _unknown[51] "no doc"
  {
    (28420 return int(64)[13])
  }
  function chpl__rangeStrideType[28431](arg idxType[28428] :
  codepointIndex[28274]) type : _unknown[51] "no doc"
  {
    (28434 return int(64)[13])
  }
  function chpl__rangeUnsignedType[28445](arg idxType[28442] :
  byteIndex[28170]) type : _unknown[51] "no doc"
  {
    (28448 return uint(64)[115])
  }
  function chpl__rangeUnsignedType[28459](arg idxType[28456] :
  codepointIndex[28274]) type : _unknown[51] "no doc"
  {
    (28462 return uint(64)[115])
  }
  function chpl__idxToInt[28474](arg i[28471] :
  unknown t[28469]) : _unknown[51] "inline" "no doc"
  {
    (28490 return(28488 call _cast int(64)[13] i[28471]))
  }
  where {
    (28484 call ||(28478 call == t[28469] byteIndex[28170])(28482 call == t[28469] codepointIndex[28274]))
  }
  function chpl__intToIdx[28502](arg idxType[28499] :
  byteIndex[28170], arg i[28505] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28512 return(28510 call _cast byteIndex[28170] i[28505]))
  }
  function chpl__intToIdx[28523](arg idxType[28520] :
  codepointIndex[28274], arg i[28526] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28533 return(28531 call _cast codepointIndex[28274] i[28526]))
  }
  function chpl__idxTypeToIntIdxType[28544](arg idxType[28541] :
  byteIndex[28170]) type : _unknown[51] "no doc"
  {
    (28547 return int(64)[13])
  }
  function chpl__idxTypeToIntIdxType[28558](arg idxType[28555] :
  codepointIndex[28274]) type : _unknown[51] "no doc"
  {
    (28561 return int(64)[13])
  }
  function >[28572](arg x[28569] :
  byteIndex[28170], arg y[28575] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (28588 return(28586 call >(28580 call _cast int(64)[13] x[28569])(28584 call _cast int(64)[13] y[28575])))
  }
  function >[28599](arg x[28596] :
  codepointIndex[28274], arg y[28602] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (28615 return(28613 call >(28607 call _cast int(64)[13] x[28596])(28611 call _cast int(64)[13] y[28602])))
  }
  function >[28626](arg x[28623] :
  byteIndex[28170], arg y[28629] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28639 return(28637 call >(28634 call _cast int(64)[13] x[28623]) y[28629]))
  }
  function >[28650](arg x[28647] :
  codepointIndex[28274], arg y[28653] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28663 return(28661 call >(28658 call _cast int(64)[13] x[28647]) y[28653]))
  }
  function >[28674](arg x[28671] :
  int(64)[13], arg y[28677] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (28687 return(28685 call > x[28671](28683 call _cast int(64)[13] y[28677])))
  }
  function >[28698](arg x[28695] :
  int(64)[13], arg y[28701] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (28711 return(28709 call > x[28695](28707 call _cast int(64)[13] y[28701])))
  }
  function +[28722](arg x[28719] :
  byteIndex[28170], arg y[28725] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28738 return(28736 call _cast byteIndex[28170](28733 call +(28730 call _cast int(64)[13] x[28719]) y[28725])))
  }
  function +[28749](arg x[28746] :
  codepointIndex[28274], arg y[28752] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28765 return(28763 call _cast codepointIndex[28274](28760 call +(28757 call _cast int(64)[13] x[28746]) y[28752])))
  }
  function +[28776](arg x[28773] :
  int(64)[13], arg y[28779] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (28792 return(28790 call _cast byteIndex[28170](28787 call + x[28773](28785 call _cast int(64)[13] y[28779]))))
  }
  function +[28803](arg x[28800] :
  int(64)[13], arg y[28806] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (28819 return(28817 call _cast codepointIndex[28274](28814 call + x[28800](28812 call _cast int(64)[13] y[28806]))))
  }
  function +[28830](arg x[28827] :
  bufferType[172493], arg y[28833] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (28843 return(28841 call + x[28827](28839 call _cast int(64)[13] y[28833])))
  }
  function -[28854](arg x[28851] :
  byteIndex[28170], arg y[28857] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28870 return(28868 call _cast byteIndex[28170](28865 call -(28862 call _cast int(64)[13] x[28851]) y[28857])))
  }
  function -[28881](arg x[28878] :
  codepointIndex[28274], arg y[28884] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28897 return(28895 call _cast codepointIndex[28274](28892 call -(28889 call _cast int(64)[13] x[28878]) y[28884])))
  }
  function -[28908](arg x[28905] :
  byteIndex[28170], arg y[28911] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (28924 return(28922 call -(28916 call _cast int(64)[13] x[28905])(28920 call _cast int(64)[13] y[28911])))
  }
  function -[28935](arg x[28932] :
  codepointIndex[28274], arg y[28938] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (28951 return(28949 call -(28943 call _cast int(64)[13] x[28932])(28947 call _cast int(64)[13] y[28938])))
  }
  function <[28962](arg x[28959] :
  byteIndex[28170], arg y[28965] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (28978 return(28976 call <(28970 call _cast int(64)[13] x[28959])(28974 call _cast int(64)[13] y[28965])))
  }
  function <[28989](arg x[28986] :
  codepointIndex[28274], arg y[28992] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29005 return(29003 call <(28997 call _cast int(64)[13] x[28986])(29001 call _cast int(64)[13] y[28992])))
  }
  function <[29016](arg x[29013] :
  byteIndex[28170], arg y[29019] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29029 return(29027 call <(29024 call _cast int(64)[13] x[29013]) y[29019]))
  }
  function <[29040](arg x[29037] :
  codepointIndex[28274], arg y[29043] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29053 return(29051 call <(29048 call _cast int(64)[13] x[29037]) y[29043]))
  }
  function <[29064](arg x[29061] :
  int(64)[13], arg y[29067] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29077 return(29075 call < x[29061](29073 call _cast int(64)[13] y[29067])))
  }
  function <[29088](arg x[29085] :
  int(64)[13], arg y[29091] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29101 return(29099 call < x[29085](29097 call _cast int(64)[13] y[29091])))
  }
  function >=[29112](arg x[29109] :
  byteIndex[28170], arg y[29115] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29128 return(29126 call >=(29120 call _cast int(64)[13] x[29109])(29124 call _cast int(64)[13] y[29115])))
  }
  function >=[29139](arg x[29136] :
  codepointIndex[28274], arg y[29142] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29155 return(29153 call >=(29147 call _cast int(64)[13] x[29136])(29151 call _cast int(64)[13] y[29142])))
  }
  function >=[29166](arg x[29163] :
  byteIndex[28170], arg y[29169] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29179 return(29177 call >=(29174 call _cast int(64)[13] x[29163]) y[29169]))
  }
  function >=[29190](arg x[29187] :
  codepointIndex[28274], arg y[29193] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29203 return(29201 call >=(29198 call _cast int(64)[13] x[29187]) y[29193]))
  }
  function >=[29214](arg x[29211] :
  int(64)[13], arg y[29217] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29227 return(29225 call >= x[29211](29223 call _cast int(64)[13] y[29217])))
  }
  function >=[29238](arg x[29235] :
  int(64)[13], arg y[29241] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29251 return(29249 call >= x[29235](29247 call _cast int(64)[13] y[29241])))
  }
  function <=[29262](arg x[29259] :
  byteIndex[28170], arg y[29265] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29278 return(29276 call <=(29270 call _cast int(64)[13] x[29259])(29274 call _cast int(64)[13] y[29265])))
  }
  function <=[29289](arg x[29286] :
  codepointIndex[28274], arg y[29292] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29305 return(29303 call <=(29297 call _cast int(64)[13] x[29286])(29301 call _cast int(64)[13] y[29292])))
  }
  function <=[29316](arg x[29313] :
  byteIndex[28170], arg y[29319] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29329 return(29327 call <=(29324 call _cast int(64)[13] x[29313]) y[29319]))
  }
  function <=[29340](arg x[29337] :
  codepointIndex[28274], arg y[29343] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29353 return(29351 call <=(29348 call _cast int(64)[13] x[29337]) y[29343]))
  }
  function <=[29364](arg x[29361] :
  int(64)[13], arg y[29367] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29377 return(29375 call <= x[29361](29373 call _cast int(64)[13] y[29367])))
  }
  function <=[29388](arg x[29385] :
  int(64)[13], arg y[29391] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29401 return(29399 call <= x[29385](29397 call _cast int(64)[13] y[29391])))
  }
  function ==[29412](arg x[29409] :
  byteIndex[28170], arg y[29415] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29428 return(29426 call ==(29420 call _cast int(64)[13] x[29409])(29424 call _cast int(64)[13] y[29415])))
  }
  function ==[29439](arg x[29436] :
  codepointIndex[28274], arg y[29442] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29455 return(29453 call ==(29447 call _cast int(64)[13] x[29436])(29451 call _cast int(64)[13] y[29442])))
  }
  function ==[29466](arg x[29463] :
  byteIndex[28170], arg y[29469] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29479 return(29477 call ==(29474 call _cast int(64)[13] x[29463]) y[29469]))
  }
  function ==[29490](arg x[29487] :
  codepointIndex[28274], arg y[29493] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29503 return(29501 call ==(29498 call _cast int(64)[13] x[29487]) y[29493]))
  }
  function ==[29514](arg x[29511] :
  int(64)[13], arg y[29517] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29527 return(29525 call == x[29511](29523 call _cast int(64)[13] y[29517])))
  }
  function ==[29538](arg x[29535] :
  int(64)[13], arg y[29541] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29551 return(29549 call == x[29535](29547 call _cast int(64)[13] y[29541])))
  }
  function !=[29562](arg x[29559] :
  byteIndex[28170], arg y[29565] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29578 return(29576 call !=(29570 call _cast int(64)[13] x[29559])(29574 call _cast int(64)[13] y[29565])))
  }
  function !=[29589](arg x[29586] :
  codepointIndex[28274], arg y[29592] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29605 return(29603 call !=(29597 call _cast int(64)[13] x[29586])(29601 call _cast int(64)[13] y[29592])))
  }
  function !=[29616](arg x[29613] :
  byteIndex[28170], arg y[29619] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29629 return(29627 call !=(29624 call _cast int(64)[13] x[29613]) y[29619]))
  }
  function !=[29640](arg x[29637] :
  codepointIndex[28274], arg y[29643] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29653 return(29651 call !=(29648 call _cast int(64)[13] x[29637]) y[29643]))
  }
  function !=[29664](arg x[29661] :
  int(64)[13], arg y[29667] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29677 return(29675 call != x[29661](29673 call _cast int(64)[13] y[29667])))
  }
  function !=[29688](arg x[29685] :
  int(64)[13], arg y[29691] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29701 return(29699 call != x[29685](29697 call _cast int(64)[13] y[29691])))
  }
  function ![29712](arg x[29709] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29720 return(29718 call !(29716 call _cast int(64)[13] x[29709])))
  }
  function ![29731](arg x[29728] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29739 return(29737 call !(29735 call _cast int(64)[13] x[29728])))
  }
  function _cond_test[29750](arg x[29747] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (29756 return(29754 call != x[29747] 0))
  }
  function _cond_test[29767](arg x[29764] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (29773 return(29771 call != x[29764] 0))
  }
  function validateEncoding[29782](arg buf[29780]:_any[178](?), arg len[29784]:_any[178](?)) : _unknown[51] throws "private"
  {
    function chpl_enc_validate_buf[29791](arg buf[29789]:_any[178](?), arg len[29793]:_any[178](?), ref arg numCodepoints[29795]:_any[178](?)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      c_int[20549]
    }
    unknown numCodepoints[29803] int(64)[13]
    (29806 'end of statement')
    if(29823 call _cond_test(29814 call !=(29812 call chpl_enc_validate_buf buf[29780] len[29784] numCodepoints[29803]) 0))
    {
      (29820 'throw'(29816 'new'(29819 call DecodeError[368804](?))))
    }
    (29828 return numCodepoints[29803])
  }
  { scopeless type
    int(64)[13]
  }
  function stringFactoryArgDepr[29835]() : _unknown[51] "private" "no return value for void"
  {
    (29859 call compilerWarning "createStringWith* with formal argument `s` is deprecated. " "Use argument name `x` instead")
  }
  function joinArgDepr[29866]() : _unknown[51] "private" "no return value for void"
  {
    (29888 call compilerWarning "string.join with formal argument `S` is deprecated. " "Use argument name `x` instead")
  }
  function createStringWithBorrowedBuffer[29899](arg x[29896] :
  string[26]) : _unknown[51] "inline"
  {
    unknown ret[29902] string[26]
    (29905 'end of statement')
    (29917 call =(29910 call . ret[29902] c"cachedNumCodepoints")(29914 call . x[29896] c"cachedNumCodepoints"))
    (29924 call initWithBorrowedBuffer ret[29902] x[29896])
    (29927 return ret[29902])
  }
  function createStringWithBorrowedBuffer[29937](arg s[29934] :
  string[26]) : _unknown[51] "inline" "last resort" "no doc"
  {
    (29941 call stringFactoryArgDepr)
    (29949 return(29948 call createStringWithBorrowedBuffer(x = s[29934])))
  }
  function createStringWithBorrowedBuffer[29959](arg x[29956] :
  c_string[19], arg length[29965] =
  (29962 call . x[29956] c"size")) : _unknown[51] throws "inline"
  {
    (29988 return(29987 call createStringWithBorrowedBuffer(29977 call _cast(29976 call c_ptr[205057](?)(29974 call uint(64)[115] 8)) x[29956])(length = length[29965])(size =(29984 call + length[29965] 1))))
  }
  function createStringWithBorrowedBuffer[29999](arg s[29996] :
  c_string[19], arg length[30005] =
  (30002 call . s[29996] c"size")) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30010 call stringFactoryArgDepr)
    (30019 return(30018 call createStringWithBorrowedBuffer(x = s[29996]) length[30005]))
  }
  function chpl_createStringWithLiteral[30029](arg x[30026] :
  c_string[19], arg length[30032] :
  int(64)[13], arg numCodepoints[30036] :
  int(64)[13]) : _unknown[51] "no doc"
  {
    (30061 return(30060 call chpl_createStringWithBorrowedBufferNV(30048 call _cast(30047 call c_ptr[205057](?)(30045 call uint(64)[115] 8)) x[30026])(length = length[30032])(size =(30055 call + length[30032] 1))(numCodepoints = numCodepoints[30036])))
  }
  function createStringWithBorrowedBuffer[30072](arg x[30069] :
  bufferType[172493], arg length[30075] :
  int(64)[13], arg size[30079] :
  int(64)[13]) : _unknown[51] throws "inline"
  {
    unknown ret[30083] string[26]
    (30086 'end of statement')
    (30097 call =(30089 call . ret[30083] c"cachedNumCodepoints")(30096 call validateEncoding x[30069] length[30075]))
    (30106 call initWithBorrowedBuffer ret[30083] x[30069] length[30075] size[30079])
    (30109 return ret[30083])
  }
  function createStringWithBorrowedBuffer[30119](arg s[30116] :
  bufferType[172493], arg length[30122] :
  int(64)[13], arg size[30126] :
  int(64)[13]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30131 call stringFactoryArgDepr)
    (30141 return(30140 call createStringWithBorrowedBuffer(x = s[30116]) length[30122] size[30126]))
  }
  function createStringWithOwnedBuffer[30151](arg x[30148] :
  string[26]) : _unknown[51] "inline" "no doc" "no return value for void"
  {
    (30174 call compilerError "A Chapel string cannot be passed to createStringWithOwnedBuffer")
  }
  function createStringWithOwnedBuffer[30185](arg s[30182] :
  string[26]) : _unknown[51] "inline" "last resort" "no doc"
  {
    (30189 call stringFactoryArgDepr)
    (30197 return(30196 call createStringWithOwnedBuffer(x = s[30182])))
  }
  function createStringWithOwnedBuffer[30207](arg x[30204] :
  c_string[19], arg length[30213] =
  (30210 call . x[30204] c"size")) : _unknown[51] throws "inline"
  {
    (30230 return(30229 call createStringWithOwnedBuffer(30219 call _cast bufferType[172493] x[30204])(length = length[30213])(size =(30226 call + length[30213] 1))))
  }
  function createStringWithOwnedBuffer[30241](arg s[30238] :
  c_string[19], arg length[30247] =
  (30244 call . s[30238] c"size")) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30252 call stringFactoryArgDepr)
    (30261 return(30260 call createStringWithOwnedBuffer(x = s[30238]) length[30247]))
  }
  function createStringWithOwnedBuffer[30271](arg x[30268] :
  bufferType[172493], arg length[30274] :
  int(64)[13], arg size[30278] :
  int(64)[13]) : _unknown[51] throws "inline"
  {
    unknown ret[30282] string[26]
    (30285 'end of statement')
    (30296 call =(30288 call . ret[30282] c"cachedNumCodepoints")(30295 call validateEncoding x[30268] length[30274]))
    (30305 call initWithOwnedBuffer ret[30282] x[30268] length[30274] size[30278])
    (30308 return ret[30282])
  }
  function createStringWithOwnedBuffer[30318](arg s[30315] :
  bufferType[172493], arg length[30321] :
  int(64)[13], arg size[30325] :
  int(64)[13]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30330 call stringFactoryArgDepr)
    (30340 return(30339 call createStringWithOwnedBuffer(x = s[30315]) length[30321] size[30325]))
  }
  function createStringWithNewBuffer[30350](arg x[30347] :
  string[26]) : _unknown[51] "inline"
  {
    unknown ret[30353] string[26]
    (30356 'end of statement')
    (30368 call =(30359 call . ret[30353] c"cachedNumCodepoints")(30365 call . x[30347] c"numCodepoints"))
    (30375 call initWithNewBuffer ret[30353] x[30347])
    (30378 return ret[30353])
  }
  function createStringWithNewBuffer[30388](arg s[30385] :
  string[26]) : _unknown[51] "inline" "last resort" "no doc"
  {
    (30392 call stringFactoryArgDepr)
    (30400 return(30399 call createStringWithNewBuffer(x = s[30385])))
  }
  function createStringWithNewBuffer[30410](arg x[30407] :
  c_string[19], arg length[30416] =
  (30413 call . x[30407] c"size"), arg policy[30423] =
  strict[173658]) : _unknown[51] throws "inline"
  {
    (30441 return(30440 call createStringWithNewBuffer(30429 call _cast bufferType[172493] x[30407])(length = length[30416])(size =(30436 call + length[30416] 1)) policy[30423]))
  }
  function createStringWithNewBuffer[30452](arg s[30449] :
  c_string[19], arg length[30458] =
  (30455 call . s[30449] c"size"), arg policy[30465] =
  strict[173658]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30470 call stringFactoryArgDepr)
    (30480 return(30479 call createStringWithNewBuffer(x = s[30449]) length[30458] policy[30465]))
  }
  function createStringWithNewBuffer[30490](arg x[30487] :
  bufferType[172493], arg length[30493] :
  int(64)[13], arg size[30500] =
  (30498 call + length[30493] 1), arg policy[30507] =
  strict[173658]) : _unknown[51] throws "inline"
  {
    (30516 return(30515 call decodeByteBuffer x[30487] length[30493] policy[30507]))
  }
  function createStringWithNewBuffer[30527](arg s[30524] :
  bufferType[172493], arg length[30530] :
  int(64)[13], arg size[30537] =
  (30535 call + length[30530] 1), arg policy[30544] =
  strict[173658]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30549 call stringFactoryArgDepr)
    (30560 return(30559 call createStringWithNewBuffer(x = s[30524]) length[30530] size[30537] policy[30544]))
  }
  def module NVStringFactory[30564]  
  function string[26].init[30760](arg _mt[32627]:_MT[238], arg this[32625]:string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function string[26].init=[30771](arg _mt[32631]:_MT[238], arg this[32629]:string[26], arg s[30768] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (30778 call(30774 call . this[32629] c"complete"))
    (30785 call initWithNewBuffer this[32629] s[30768])
  }
  function string[26].init=[30795](arg _mt[32635]:_MT[238], arg this[32633]:string[26], arg cs[30792] :
  c_string[19]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (30802 call(30798 call . this[32633] c"complete"))
    (30825 call initWithNewBuffer this[32633](30810 call _cast bufferType[172493] cs[30792])(length =(30813 call . cs[30792] c"size"))(size =(30822 call +(30818 call . cs[30792] c"size") 1)))
  }
  function string[26].deinit[30831](arg _mt[32639]:_MT[238], ref arg this[32637]:string[26]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(30874 call _cond_test(30841 call &&(369720 call . this[32637] c"isOwned")(30839 call !=(30835 call . this[32637] c"buff") nil[44])))
    {
      {
        const tmp[30865] "const" "temp"
        (30866 'move' tmp[30865](30863 'deref'(30853 'chpl_on_locale_num'(30852 call chpl_buildLocaleID(30847 call . this[32637] c"locale_id") c_sublocid_any[89879]))))
        {
          (30860 call chpl_here_free(30856 call . this[32637] c"buff"))
        }
        (30869 'elided on block' 0 tmp[30865])
      }
    }
  }
  function string[26].chpl__serialize[30883](arg _mt[32643]:_MT[238], arg this[32641]:string[26]) : _unknown[51] "method" "primary method"
  {
    unknown data[30886] chpl__inPlaceBuffer[28019]
    (30889 'end of statement')
    if(30907 call _cond_test(30893 call <=(369727 call . this[32641] c"buffLen") CHPL_SHORT_STRING_SIZE[28013]))
    {
      (30904 call chpl_string_comm_get(30899 call chpl__getInPlaceBufferDataForWrite data[30886])(369734 call . this[32641] c"locale_id")(369739 call . this[32641] c"buff")(369744 call . this[32641] c"buffLen"))
    }
    (30921 return(30911 'new'(30920 call __serializeHelper[28086](369750 call . this[32641] c"buffLen")(369755 call . this[32641] c"buff")(369760 call . this[32641] c"buffSize")(369765 call . this[32641] c"locale_id") data[30886](369771 call . this[32641] c"cachedNumCodepoints"))))
  }
  function string[26].chpl__deserialize[30929](arg _mt[32647]:_MT[238], arg this[32645]:string[26], arg data[30927]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(31037 call _cond_test(30936 call !=(30932 call . data[30927] c"locale_id") chpl_nodeID[208164]))
    {
      if(31010 call _cond_test(30943 call <=(30939 call . data[30927] c"buffLen") CHPL_SHORT_STRING_SIZE[28013]))
      {
        (30969 return(30968 call chpl_createStringWithNewBufferNV(30954 call chpl__getInPlaceBufferData(30950 call . data[30927] c"shortData"))(30957 call . data[30927] c"buffLen")(30961 call . data[30927] c"size")(30965 call . data[30927] c"cachedNumCodepoints")))
      }
      {
        unknown localBuff[30987](30986 call bufferCopyRemote(30974 call . data[30927] c"locale_id")(30979 call . data[30927] c"buff")(30983 call . data[30927] c"buffLen"))
        (30990 'end of statement')
        (31008 return(31007 call chpl_createStringWithOwnedBufferNV localBuff[30987](30996 call . data[30927] c"buffLen")(31000 call . data[30927] c"size")(31004 call . data[30927] c"cachedNumCodepoints")))
      }
    }
    {
      (31034 return(31033 call chpl_createStringWithBorrowedBufferNV(31017 call . data[30927] c"buff")(31022 call . data[30927] c"buffLen")(31026 call . data[30927] c"size")(31030 call . data[30927] c"cachedNumCodepoints")))
    }
  }
  function string[26].isASCII[31046](arg _mt[32651]:_MT[238], arg this[32649]:string[26]) : _unknown[51] "inline" "method" "primary method"
  {
    (31058 return(31056 call ==(31049 call . this[32649] c"numCodepoints")(31053 call . this[32649] c"numBytes")))
  }
  function string[26].byteIndices[31065](arg _mt[32655]:_MT[238], arg this[32653]:string[26]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (31077 return(31075 call chpl_build_bounded_range 0(31073 call -(31069 call . this[32653] c"numBytes") 1)))
  }
  function string[26].c_str[31084](arg _mt[32659]:_MT[238], param arg this[32657]:string[26]) param : _unknown[51] "inline" "method" "primary method"
  {
    (31091 return(31089 call _cast c_string[19] this[32657]))
  }
  { scopeless type
    c_string[19]
  }
  function string[26]._cpIndexLen[31106](arg _mt[32663]:_MT[238], arg this[32661]:string[26], arg start[31103] =
  (31101 call _cast byteIndex[28170] 0)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown localThis[31115](31114 call(31110 call . this[32661] c"localize")) string[26]
    (31118 'end of statement')
    if(31436 call _cond_test(31127 call(31123 call . localThis[31115] c"isASCII")))
    {
      {
        unknown _indexOfInterest[31168] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[31169] "expr temp" "temp"
        (31192 'move' _iterator[31169](31146 call _build_tuple(31181 call _getIterator(31178 call . this[32661] c"byteIndices"))(31189 call _getIterator(31188 call(31185 call . this[32661] c"chpl_bytes")))))
        Defer
        {
          {
            (31222 call _freeIterator _iterator[31169])
          }
        }
        { scopeless type
          (31197 'move' _indexOfInterest[31168](31194 call iteratorIndex _iterator[31169]))
        }
        ForLoop[31170]
        {
          (31202 call _check_tuple_var_decl _indexOfInterest[31168] 2)
          unknown i[31208] "index var" "insert auto destroy"
          (31210 'move' i[31208](31206 call _indexOfInterest[31168] 0))
          unknown b[31215] "index var" "insert auto destroy"
          (31217 'move' b[31215](31213 call _indexOfInterest[31168] 1))
          {
            (31165 yield(31163 call _build_tuple(31152 call _cast(31151 call int(64)[13] 32) b[31215])(31156 call _cast byteIndex[28170] i[31208])(31161 call _cast int(64)[13] 1)))
          }
          label _continueLabel[31173]
          _indexOfInterest[31168]
          _iterator[31169]
        }
        label _breakLabel[31174]
      }
    }
    {
      unknown i[31234](31232 call _cast int(64)[13] start[31103])
      (31237 'end of statement')
      if(31326 call _cond_test(31241 call > i[31234] 0))
      {
        unknown tmp[31269] "temp"
        (31323 'move' tmp[31269](31303 call _cond_test(31305 call &&(31307 call < i[31234](31310 call . localThis[31115] c"buffLen"))(31314 call !(31316 call isInitialByte(31321 call(31318 call . localThis[31115] c"buff") i[31234]))))))
        WhileDo[31274]
        {
          (31266 call += i[31234] 1)
          label _continueLabel[31272]
          (31298 'move' tmp[31269](31278 call _cond_test(31280 call &&(31282 call < i[31234](31285 call . localThis[31115] c"buffLen"))(31289 call !(31291 call isInitialByte(31296 call(31293 call . localThis[31115] c"buff") i[31234]))))))
          tmp[31269]
        }
        label _breakLabel[31273]
      }
      {
        unknown tmp[31403] "temp"
        (31433 'move' tmp[31403](31425 call _cond_test(31427 call < i[31234](31430 call . localThis[31115] c"buffLen"))))
        WhileDo[31408]
        {
          {
            const tmp[31361] "const" "temp"(31360 call decodeHelp(buff =(31346 call . localThis[31115] c"buff"))(buffLen =(31352 call . localThis[31115] c"buffLen"))(offset = i[31234])(allowEsc = 1))
            (31371 call _check_tuple_var_decl tmp[31361] 3)
            const decodeRet[31337] "const"(31362 call tmp[31361] 0)
            const cp[31339] "const"(31365 call tmp[31361] 1)
            const nBytes[31341] "const"(31368 call tmp[31361] 2)
            (31376 'end of statement')
            (31396 yield(31394 call _build_tuple(31383 call _cast(31382 call int(64)[13] 32) cp[31339])(31387 call _cast byteIndex[28170] i[31234])(31392 call _cast int(64)[13] nBytes[31341])))
            (31400 call += i[31234] nBytes[31341])
          }
          label _continueLabel[31406]
          (31420 'move' tmp[31403](31412 call _cond_test(31414 call < i[31234](31417 call . localThis[31115] c"buffLen"))))
          tmp[31403]
        }
        label _breakLabel[31407]
      }
    }
  }
  function string[26]._indexLen[31451](arg _mt[32667]:_MT[238], arg this[32665]:string[26], arg start[31448] =
  (31446 call _cast byteIndex[28170] 0)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown localThis[31460](31459 call(31455 call . this[32665] c"localize")) string[26]
    (31463 'end of statement')
    unknown i[31469](31467 call _cast int(64)[13] start[31448])
    (31472 'end of statement')
    if(31560 call _cond_test(31475 call > i[31469] 0))
    {
      unknown tmp[31503] "temp"
      (31557 'move' tmp[31503](31537 call _cond_test(31539 call &&(31541 call < i[31469](31544 call . localThis[31460] c"buffLen"))(31548 call !(31550 call isInitialByte(31555 call(31552 call . localThis[31460] c"buff") i[31469]))))))
      WhileDo[31508]
      {
        (31500 call += i[31469] 1)
        label _continueLabel[31506]
        (31532 'move' tmp[31503](31512 call _cond_test(31514 call &&(31516 call < i[31469](31519 call . localThis[31460] c"buffLen"))(31523 call !(31525 call isInitialByte(31530 call(31527 call . localThis[31460] c"buff") i[31469]))))))
        tmp[31503]
      }
      label _breakLabel[31507]
    }
    {
      unknown tmp[31681] "temp"
      (31711 'move' tmp[31681](31703 call _cond_test(31705 call < i[31469](31708 call . localThis[31460] c"buffLen"))))
      WhileDo[31686]
      {
        {
          unknown j[31575](31573 call + i[31469] 1)
          (31578 'end of statement')
          {
            unknown tmp[31606] "temp"
            (31660 'move' tmp[31606](31640 call _cond_test(31642 call &&(31644 call < j[31575](31647 call . localThis[31460] c"buffLen"))(31651 call !(31653 call isInitialByte(31658 call(31655 call . localThis[31460] c"buff") j[31575]))))))
            WhileDo[31611]
            {
              (31603 call += j[31575] 1)
              label _continueLabel[31609]
              (31635 'move' tmp[31606](31615 call _cond_test(31617 call &&(31619 call < j[31575](31622 call . localThis[31460] c"buffLen"))(31626 call !(31628 call isInitialByte(31633 call(31630 call . localThis[31460] c"buff") j[31575]))))))
              tmp[31606]
            }
            label _breakLabel[31610]
          }
          (31674 yield(31672 call _build_tuple(31665 call _cast byteIndex[28170] i[31469])(31669 call - j[31575] i[31469])))
          (31678 call = i[31469] j[31575])
        }
        label _continueLabel[31684]
        (31698 'move' tmp[31681](31690 call _cond_test(31692 call < i[31469](31695 call . localThis[31460] c"buffLen"))))
        tmp[31681]
      }
      label _breakLabel[31685]
    }
  }
  function string[26].substring[31722](arg _mt[32671]:_MT[238], arg this[32669]:string[26], arg i[31719] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (31743 call compilerError "substring removed: use string[index]")
  }
  function string[26].substring[31754](arg _mt[32675]:_MT[238], arg this[32673]:string[26], arg r[31751] :
  range[64316](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (31775 call compilerError "substring removed: use string[range]")
  }
  function string[26].writeThis[31784](arg _mt[32679]:_MT[238], arg this[32677]:string[26], arg f[31782]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (31789 call compilerError "not implemented: writeThis")
  }
  function string[26].readThis[31798](arg _mt[32683]:_MT[238], arg this[32681]:string[26], arg f[31796]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (31803 call compilerError "not implemented: readThis")
  }
  function string[26].doSearchUTF8[31814](arg _mt[32687]:_MT[238], arg this[32685]:string[26], arg needle[31811] :
  string[26], arg region[31820] :
  (31819 call range[64316](?) ?[260]), param arg count[31824] :
  bool[10], param arg fromLeft[31829] :
  bool[10] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[31837](31835 call - 1) int(64)[13]
    (31840 'end of statement')
    {
      const tmp[32395] "const" "temp"
      (32396 'move' tmp[32395](32393 'deref'(31852 'chpl_on_locale_num'(31851 call chpl_buildLocaleID(31846 call . this[32685] c"locale_id") c_sublocid_any[89879]))))
      {
        unknown localRet[31857](31855 call - 2) int(64)[13]
        (31860 'end of statement')
        const nLen[31866] "const"(31863 call . needle[31811] c"buffLen")
        (31869 'end of statement')
        const tmp[31880] "const" "temp"(31879 call getView this[32685] region[31820])
        (31884 call _check_tuple_var_decl tmp[31880] 2)
        const view[31870] "const"(31881 call tmp[31880] 0)
        (31889 'end of statement')
        const thisLen[31894] "const"(31891 call . view[31870] c"size")
        (31897 'end of statement')
        if(32114 call _cond_test count[31824])
        {
          if(32070 call _cond_test(31901 call == nLen[31866] 0))
          {
            if(32065 call _cond_test(31943 call ||(31921 call &&(31910 call(31906 call . region[31820] c"hasLowBound"))(31919 call ==(31917 'typeof'(31914 call . region[31820] c"low")) byteIndex[28170]))(31941 call &&(31930 call(31926 call . region[31820] c"hasHighBound"))(31939 call ==(31937 'typeof'(31934 call . region[31820] c"high")) byteIndex[28170]))))
            {
              (31947 call = localRet[31857] thisLen[31894])
            }
            {
              unknown nCodepoints[31952] 0
              (31955 'end of statement')
              unknown nextIdx[31958] 0
              (31961 'end of statement')
              {
                unknown _indexOfInterest[32027] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[32028] "expr temp" "temp"
                (32037 'move' _iterator[32028](32035 call _getIterator view[31870]))
                Defer
                {
                  {
                    (32053 call _freeIterator _iterator[32028])
                  }
                }
                { scopeless type
                  (32042 'move' _indexOfInterest[32027](32039 call iteratorIndex _iterator[32028]))
                }
                ForLoop[32029]
                {
                  unknown i[32046] "index var" "insert auto destroy"
                  (32048 'move' i[32046] _indexOfInterest[32027])
                  {
                    if(32022 call _cond_test(31966 call >= i[32046] nextIdx[31958]))
                    {
                      (31970 call += nCodepoints[31952] 1)
                      const tmp[31998] "const" "temp"(31997 call decodeHelp(buff =(31983 call . this[32685] c"buff"))(buffLen =(31989 call . this[32685] c"buffLen"))(offset = i[32046])(allowEsc = 1))
                      (32008 call _check_tuple_var_decl tmp[31998] 3)
                      const decodeRet[31974] "const"(31999 call tmp[31998] 0)
                      const cp[31976] "const"(32002 call tmp[31998] 1)
                      const nBytes[31978] "const"(32005 call tmp[31998] 2)
                      (32013 'end of statement')
                      (32019 call = nextIdx[31958](32017 call + i[32046] nBytes[31978]))
                    }
                  }
                  label _continueLabel[32032]
                  _indexOfInterest[32027]
                  _iterator[32028]
                }
                label _breakLabel[32033]
              }
              (32062 call = localRet[31857] nCodepoints[31952])
            }
          }
        }
        {
          if(32109 call _cond_test(32077 call == nLen[31866] 0))
          {
            if(32104 call _cond_test fromLeft[31829])
            {
              (32084 call = localRet[31857](32082 call - 1))
            }
            {
              (32100 call = localRet[31857](32097 IfExpr (32091 call == thisLen[31894] 0) then
              { scopeless
                (32094 call - 1)
              } else
              { scopeless
                thisLen[31894]
              } ))
            }
          }
        }
        if(32130 call _cond_test(32120 call > nLen[31866] thisLen[31894]))
        {
          (32126 call = localRet[31857](32124 call - 1))
        }
        if(32373 call _cond_test(32138 call == localRet[31857](32136 call - 2)))
        {
          (32144 call = localRet[31857](32142 call - 1))
          const localNeedle[32155] "const"(32154 call(32150 call . needle[31811] c"localize")) string[26]
          (32158 'end of statement')
          const numPossible[32166] "const"(32164 call +(32161 call - thisLen[31894] nLen[31866]) 1)
          (32169 'end of statement')
          const searchSpace[32191] "const"(32188 IfExpr  fromLeft[31829] then
          { scopeless
            (32175 call #(32172 call chpl_build_low_bounded_range 0) numPossible[32166])
          } else
          { scopeless
            (32186 call chpl_by(32181 call #(32178 call chpl_build_low_bounded_range 0) numPossible[32166])(32184 call - 1))
          } )
          (32194 'end of statement')
          {
            unknown _indexOfInterest[32340] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[32341] "expr temp" "temp"
            (32350 'move' _iterator[32341](32348 call _getIterator searchSpace[32191]))
            Defer
            {
              {
                (32366 call _freeIterator _iterator[32341])
              }
            }
            { scopeless type
              (32355 'move' _indexOfInterest[32340](32352 call iteratorIndex _iterator[32341]))
            }
            ForLoop[32342]
            {
              unknown i[32359] "index var" "insert auto destroy"
              (32361 'move' i[32359] _indexOfInterest[32340])
              {
                {
                  unknown _indexOfInterest[32280] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[32281] "expr temp" "temp"
                  (32290 'move' _iterator[32281](32288 call _getIterator(32297 call chpl_direct_counted_range_iter 0 nLen[31866])))
                  Defer
                  {
                    {
                      (32313 call _freeIterator _iterator[32281])
                    }
                  }
                  { scopeless type
                    (32302 'move' _indexOfInterest[32280](32299 call iteratorIndex _iterator[32281]))
                  }
                  ForLoop[32282]
                  {
                    unknown j[32306] "index var" "insert auto destroy"
                    (32308 'move' j[32306] _indexOfInterest[32280])
                    {
                      const idx[32216] "const"(32215 call(32207 call . view[31870] c"orderToIndex")(32212 call + i[32359] j[32306]))
                      (32219 'end of statement')
                      if(32240 call _cond_test(32235 call !=(32227 call(32222 call . this[32685] c"buff") idx[32216])(32234 call(32229 call . localNeedle[32155] c"buff") j[32306])))
                      {
                        break _breakLabel[32286] _breakLabel[32286]
                      }
                      if(32276 call _cond_test(32250 call == j[32306](32248 call - nLen[31866] 1)))
                      {
                        if(32271 call _cond_test count[31824])
                        {
                          (32255 call += localRet[31857] 1)
                        }
                        {
                          (32267 call = localRet[31857](32266 call(32261 call . view[31870] c"orderToIndex") i[32359]))
                        }
                      }
                    }
                    label _continueLabel[32285]
                    _indexOfInterest[32280]
                    _iterator[32281]
                  }
                  label _breakLabel[32286]
                }
                if(32335 call _cond_test(32330 call &&(32322 call ! count[31824])(32328 call != localRet[31857](32326 call - 1))))
                {
                  break _breakLabel[32346] _breakLabel[32346]
                }
              }
              label _continueLabel[32345]
              _indexOfInterest[32340]
              _iterator[32341]
            }
            label _breakLabel[32346]
          }
        }
        if(32383 call _cond_test count[31824])
        {
          (32380 call += localRet[31857] 1)
        }
        (32390 call = ret[31837] localRet[31857])
      }
      (32399 'elided on block' 0 tmp[32395])
    }
    (32404 return ret[31837])
  }
  function string[26].join[32412](arg _mt[32691]:_MT[238], arg this[32689]:string[26], const  ref arg S[32410]:_any[178](?)) : _unknown[51] "inline" "last resort" "method" "primary method"
  {
    (32421 call joinArgDepr)
    (32428 return(32427 call(369880 call . this[32689] c"join") S[32410]))
  }
  where {
    (32418 call isTuple S[32410])
  }
  { scopeless type
    string[26]
  }
  function string[26].join[32443](arg _mt[32695]:_MT[238], arg this[32693]:string[26], const  ref arg S[32440] :
  (32437 call chpl__buildArrayRuntimeType nil[44] string[26])) : _unknown[51] "inline" "last resort" "method" "primary method"
  {
    (32448 call joinArgDepr)
    (32455 return(32454 call(369885 call . this[32693] c"join") S[32440]))
  }
  { scopeless type
    string[26]
  }
  function string[26].join[32466](arg _mt[32699]:_MT[238], arg this[32697]:string[26], arg ir[32463] :
  _iteratorRecord[205](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (32474 return(32473 call doJoinIterator this[32697] ir[32463]))
  }
  { scopeless type
    string[26]
  }
  function string[26]._join[32484](arg _mt[32703]:_MT[238], arg this[32701]:string[26], const  ref arg S[32482]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (32502 return(32501 call doJoin this[32701] S[32482]))
  }
  where {
    (32495 call ||(32490 call isTuple S[32482])(32494 call isArray S[32482]))
  }
  { scopeless type
    string[26]
  }
  function string[26].capitalize[32511](arg _mt[32707]:_MT[238], arg this[32705]:string[26]) : _unknown[51] "method" "primary method"
  {
    unknown result[32523](32522 call(32518 call . this[32705] c"toLower")) string[26]
    (32526 'end of statement')
    if(32537 call _cond_test(32533 call(32529 call . result[32523] c"isEmpty")))
    {
      (32535 return result[32523])
    }
    const tmp[32566] "const" "temp"(32565 call decodeHelp(buff =(32551 call . result[32523] c"buff"))(buffLen =(32557 call . result[32523] c"buffLen"))(offset = 0)(allowEsc = 0))
    (32576 call _check_tuple_var_decl tmp[32566] 3)
    const decodeRet[32542] "const"(32567 call tmp[32566] 0)
    const cp[32544] "const"(32570 call tmp[32566] 1)
    const nBytes[32546] "const"(32573 call tmp[32566] 2)
    (32581 'end of statement')
    unknown upCodepoint[32586](32585 call codepoint_toUpper cp[32544])
    (32589 'end of statement')
    if(32613 call _cond_test(32601 call &&(32592 call != upCodepoint[32586] cp[32544])(32599 call ==(32597 call qio_nbytes_char upCodepoint[32586]) nBytes[32546])))
    {
      (32610 call qio_encode_char_buf(32605 call . result[32523] c"buff") upCodepoint[32586])
    }
    (32618 return result[32523])
  }
  { scopeless type
    string[26]
  }
  type string[26] unknown buffLen[30719] 0 int(64)[13] unknown buffSize[30725] 0 int(64)[13] unknown cachedNumCodepoints[30731] 0 int(64)[13] unknown buff[30737] nil[44] bufferType[172493] unknown isOwned[30743] 1 bool[10] unknown hasEscapes[30749] 0 bool[10] unknown locale_id[30754] chpl_nodeID[208164]
  function string[26].length[32713](arg _mt[32718]:_MT[238], arg this[32715]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32758 call compilerWarning(32755 call + "'string.length' is deprecated - " "please use 'string.size' instead"))
    (32762 return(369905 call . this[32715] c"numCodepoints"))
  }
  function string[26].size[32769](arg _mt[32774]:_MT[238], const arg this[32771]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32777 return(369909 call . this[32771] c"numCodepoints"))
  }
  function string[26].indices[32785](arg _mt[32790]:_MT[238], arg this[32787]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32799 return(32797 call chpl_build_bounded_range 0(32795 call -(369913 call . this[32787] c"size") 1)))
  }
  function string[26].numBytes[32807](arg _mt[32812]:_MT[238], arg this[32809]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32815 return(369918 call . this[32809] c"buffLen"))
  }
  function string[26].numCodepoints[32823](arg _mt[32828]:_MT[238], const arg this[32825]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    const n[32834] "const"(32831 call . this[32825] c"cachedNumCodepoints")
    (32837 'end of statement')
    if(32874 call _cond_test 1)
    {
      if(32869 call _cond_test(32845 call != n[32834](32844 call countNumCodepoints this[32825])))
      {
        (32866 call halt "Encountered corrupt string metadata")
      }
    }
    (32879 return n[32834])
  }
  function string[26].localize[32886](arg _mt[32891]:_MT[238], arg this[32888]:string[26] :
  string[26]) : _unknown[51] "inline" "method"
  {
    if(32921 call _cond_test(32902 call || 1(32900 call ==(32896 call . this[32888] c"locale_id") chpl_nodeID[208164])))
    {
      (32908 return(32907 call createStringWithBorrowedBuffer this[32888]))
    }
    {
      const x[32913] "const" this[32888] string[26]
      (32916 'end of statement')
      (32919 return x[32913])
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].c_str[32932](arg _mt[32937]:_MT[238], arg this[32934]:string[26] :
  string[26]) : _unknown[51] "inline" "method"
  {
    (32944 return(32943 call getCStr this[32934]))
  }
  { scopeless type
    c_string[19]
  }
  function string[26].encode[32962](arg _mt[32967]:_MT[238], arg this[32964]:string[26] :
  string[26], arg policy[32959] =
  pass[173674]) : _unknown[51] "method"
  {
    unknown localThis[32977](32976 call(32972 call . this[32964] c"localize")) string[26]
    (32980 'end of statement')
    if(33252 call _cond_test(32995 call ||(32987 call == policy[32959] pass[173674])(32994 call(32990 call . this[32964] c"isASCII"))))
    {
      (33008 return(33007 call createBytesWithNewBuffer(32999 call . localThis[32977] c"buff")(33004 call . localThis[32977] c"numBytes")))
    }
    {
      unknown tmp[33026] "temp"(33025 call bufferAlloc(33022 call +(33018 call . this[32964] c"buffLen") 1))
      (33033 call _check_tuple_var_decl tmp[33026] 2)
      unknown buff[33011](33027 call tmp[33026] 0)
      unknown size[33013](33030 call tmp[33026] 1)
      (33038 'end of statement')
      unknown readIdx[33041] 0
      (33044 'end of statement')
      unknown writeIdx[33046] 0
      (33049 'end of statement')
      {
        unknown tmp[33201] "temp"
        (33231 'move' tmp[33201](33223 call _cond_test(33225 call < readIdx[33041](33228 call . localThis[32977] c"buffLen"))))
        WhileDo[33206]
        {
          {
            unknown multibytes[33064](33062 call +(33058 call . localThis[32977] c"buff") readIdx[33041])
            (33067 'end of statement')
            const tmp[33093] "const" "temp"(33092 call decodeHelp(buff =(33078 call . localThis[32977] c"buff"))(buffLen =(33084 call . localThis[32977] c"buffLen"))(offset = readIdx[33041])(allowEsc = 1))
            (33103 call _check_tuple_var_decl tmp[33093] 3)
            const decodeRet[33069] "const"(33094 call tmp[33093] 0)
            const cp[33071] "const"(33097 call tmp[33093] 1)
            const nBytes[33073] "const"(33100 call tmp[33093] 2)
            (33108 'end of statement')
            if(33191 call _cond_test(33121 call &&(33113 call <= 56448 cp[33071])(33119 call <= cp[33071] 56575)))
            {
              (33136 call =(33126 call buff[33011] writeIdx[33046])(33134 call _cast byteType[172483](33131 call - cp[33071] 56320)))
              (33142 call += writeIdx[33046] 1)
            }
            {
              if(33187 call _cond_test(33147 call != decodeRet[33069] 0))
              {
                (33160 call bufferMemcpyLocal(dst =(33152 call + buff[33011] writeIdx[33046]))(src = multibytes[33064])(len = nBytes[33073]))
                (33165 call += writeIdx[33046] nBytes[33073])
              }
              {
                (33179 call bufferMemcpyLocal(dst =(33171 call + buff[33011] writeIdx[33046]))(src = multibytes[33064])(len = nBytes[33073]))
                (33184 call += writeIdx[33046] nBytes[33073])
              }
            }
            (33198 call += readIdx[33041] nBytes[33073])
          }
          label _continueLabel[33204]
          (33218 'move' tmp[33201](33210 call _cond_test(33212 call < readIdx[33041](33215 call . localThis[32977] c"buffLen"))))
          tmp[33201]
        }
        label _breakLabel[33205]
      }
      (33239 call =(33237 call buff[33011] writeIdx[33046]) 0)
      (33250 return(33249 call createBytesWithOwnedBuffer buff[33011](length = writeIdx[33046])(size = size[33013])))
    }
  }
  { scopeless type
    bytes[24]
  }
  function string[26].items[33262](arg _mt[33267]:_MT[238], arg this[33264]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown localThis[33277](33276 call(33272 call . this[33264] c"localize")) string[26]
    (33280 'end of statement')
    if(33503 call _cond_test(33287 call(33283 call . localThis[33277] c"isASCII")))
    {
      {
        unknown _indexOfInterest[33333] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[33334] "expr temp" "temp"
        (33343 'move' _iterator[33334](33341 call _getIterator(33290 call . this[33264] c"byteIndices")))
        Defer
        {
          {
            (33360 call _freeIterator _iterator[33334])
          }
        }
        { scopeless type
          (33349 'move' _indexOfInterest[33333](33346 call iteratorIndex _iterator[33334]))
        }
        ForLoop[33335]
        {
          unknown i[33353] "index var" "insert auto destroy"
          (33355 'move' i[33353] _indexOfInterest[33333])
          {
            unknown tmp[33310] "temp"(33309 call bufferCopyLocal(33304 call +(33300 call . localThis[33277] c"buff") i[33353])(len = 1))
            (33317 call _check_tuple_var_decl tmp[33310] 2)
            unknown newBuff[33293](33311 call tmp[33310] 0)
            unknown allocSize[33295](33314 call tmp[33310] 1)
            (33322 'end of statement')
            (33331 yield(33330 call chpl_createStringWithOwnedBufferNV newBuff[33293] 1 allocSize[33295] 1))
          }
          label _continueLabel[33338]
          _indexOfInterest[33333]
          _iterator[33334]
        }
        label _breakLabel[33339]
      }
    }
    {
      unknown i[33369] 0
      (33372 'end of statement')
      {
        unknown tmp[33470] "temp"
        (33500 'move' tmp[33470](33492 call _cond_test(33494 call < i[33369](33497 call . localThis[33277] c"buffLen"))))
        WhileDo[33475]
        {
          {
            const curPos[33388] "const"(33386 call +(33382 call . localThis[33277] c"buff") i[33369])
            (33391 'end of statement')
            const tmp[33417] "const" "temp"(33416 call decodeHelp(buff =(33402 call . localThis[33277] c"buff"))(buffLen =(33408 call . localThis[33277] c"buffLen"))(offset = i[33369])(allowEsc = 1))
            (33427 call _check_tuple_var_decl tmp[33417] 3)
            const decodeRet[33393] "const"(33418 call tmp[33417] 0)
            const cp[33395] "const"(33421 call tmp[33417] 1)
            const nBytes[33397] "const"(33424 call tmp[33417] 2)
            (33432 'end of statement')
            unknown tmp[33443] "temp"(33442 call bufferCopyLocal curPos[33388] nBytes[33397])
            (33450 call _check_tuple_var_decl tmp[33443] 2)
            unknown newBuf[33433](33444 call tmp[33443] 0)
            unknown newSize[33435](33447 call tmp[33443] 1)
            (33455 'end of statement')
            (33463 yield(33462 call chpl_createStringWithOwnedBufferNV newBuf[33433] nBytes[33397] newSize[33435] 1))
            (33467 call += i[33369] nBytes[33397])
          }
          label _continueLabel[33473]
          (33487 'move' tmp[33470](33479 call _cond_test(33481 call < i[33369](33484 call . localThis[33277] c"buffLen"))))
          tmp[33470]
        }
        label _breakLabel[33474]
      }
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].these[33513](arg _mt[33518]:_MT[238], arg this[33515]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[33533] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[33534] "expr temp" "temp"
      (33543 'move' _iterator[33534](33541 call _getIterator(33529 call(33525 call . this[33515] c"items"))))
      Defer
      {
        {
          (33560 call _freeIterator _iterator[33534])
        }
      }
      { scopeless type
        (33549 'move' _indexOfInterest[33533](33546 call iteratorIndex _iterator[33534]))
      }
      ForLoop[33535]
      {
        unknown c[33553] "index var" "insert auto destroy"
        (33555 'move' c[33553] _indexOfInterest[33533])
        (33531 yield c[33553])
        label _continueLabel[33538]
        _indexOfInterest[33533]
        _iterator[33534]
      }
      label _breakLabel[33539]
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].chpl_bytes[33574](arg _mt[33579]:_MT[238], arg this[33576]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown localThis[33589](33588 call(33584 call . this[33576] c"localize")) string[26]
    (33592 'end of statement')
    {
      unknown _indexOfInterest[33614] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[33615] "expr temp" "temp"
      (33624 'move' _iterator[33615](33622 call _getIterator(33634 call chpl_direct_counted_range_iter 0(33630 call . localThis[33589] c"buffLen"))))
      Defer
      {
        {
          (33650 call _freeIterator _iterator[33615])
        }
      }
      { scopeless type
        (33639 'move' _indexOfInterest[33614](33636 call iteratorIndex _iterator[33615]))
      }
      ForLoop[33616]
      {
        unknown i[33643] "index var" "insert auto destroy"
        (33645 'move' i[33643] _indexOfInterest[33614])
        {
          (33611 yield(33610 call(33605 call . localThis[33589] c"buff") i[33643]))
        }
        label _continueLabel[33619]
        _indexOfInterest[33614]
        _iterator[33615]
      }
      label _breakLabel[33620]
    }
  }
  { scopeless type
    byteType[172483]
  }
  function string[26].codepoints[33663](arg _mt[33668]:_MT[238], arg this[33665]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown localThis[33681](33680 call(33676 call . this[33665] c"localize")) string[26]
    (33684 'end of statement')
    if(33832 call _cond_test(33691 call(33687 call . this[33665] c"isASCII")))
    {
      {
        unknown _indexOfInterest[33702] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[33703] "expr temp" "temp"
        (33712 'move' _iterator[33703](33710 call _getIterator(33698 call(33694 call . this[33665] c"chpl_bytes"))))
        Defer
        {
          {
            (33729 call _freeIterator _iterator[33703])
          }
        }
        { scopeless type
          (33718 'move' _indexOfInterest[33702](33715 call iteratorIndex _iterator[33703]))
        }
        ForLoop[33704]
        {
          unknown b[33722] "index var" "insert auto destroy"
          (33724 'move' b[33722] _indexOfInterest[33702])
          (33700 yield b[33722])
          label _continueLabel[33707]
          _indexOfInterest[33702]
          _iterator[33703]
        }
        label _breakLabel[33708]
      }
    }
    {
      unknown i[33738] 0
      (33741 'end of statement')
      {
        unknown tmp[33799] "temp"
        (33829 'move' tmp[33799](33821 call _cond_test(33823 call < i[33738](33826 call . localThis[33681] c"buffLen"))))
        WhileDo[33804]
        {
          {
            const tmp[33774] "const" "temp"(33773 call decodeHelp(buff =(33759 call . localThis[33681] c"buff"))(buffLen =(33765 call . localThis[33681] c"buffLen"))(offset = i[33738])(allowEsc = 1))
            (33784 call _check_tuple_var_decl tmp[33774] 3)
            const decodeRet[33750] "const"(33775 call tmp[33774] 0)
            const cp[33752] "const"(33778 call tmp[33774] 1)
            const nBytes[33754] "const"(33781 call tmp[33774] 2)
            (33789 'end of statement')
            (33792 yield cp[33752])
            (33796 call += i[33738] nBytes[33754])
          }
          label _continueLabel[33802]
          (33816 'move' tmp[33799](33808 call _cond_test(33810 call < i[33738](33813 call . localThis[33681] c"buffLen"))))
          tmp[33799]
        }
        label _breakLabel[33803]
      }
    }
  }
  { scopeless type
    (33673 call int(64)[13] 32)
  }
  function string[26].toByte[33842](arg _mt[33847]:_MT[238], arg this[33844]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(33881 call _cond_test(33858 call !=(33854 call . this[33844] c"buffLen") 1))
    {
      (33879 call halt "string.toByte() only accepts single-byte strings")
    }
    (33902 return(33901 call bufferGetByte(buf =(33889 call . this[33844] c"buff"))(off = 0)(loc =(33897 call . this[33844] c"locale_id"))))
  }
  { scopeless type
    (33852 call uint(64)[115] 8)
  }
  function string[26].byte[33914](arg _mt[33919]:_MT[238], arg this[33916]:string[26] :
  string[26], arg i[33911] :
  int(64)[13]) : _unknown[51] "method"
  {
    if(33985 call _cond_test(33939 call && 1(33937 call ||(33928 call < i[33911] 0)(33935 call >= i[33911](33932 call . this[33916] c"buffLen")))))
    {
      (33983 call halt "index " i[33911] " out of bounds for string with "(33963 call . this[33916] c"numBytes") " bytes")
    }
    (34006 return(34005 call bufferGetByte(buf =(33993 call . this[33916] c"buff"))(off = i[33911])(loc =(34001 call . this[33916] c"locale_id"))))
  }
  { scopeless type
    (33924 call uint(64)[115] 8)
  }
  function string[26].toCodepoint[34014](arg _mt[34019]:_MT[238], arg this[34016]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown localThis[34032](34031 call(34027 call . this[34016] c"localize")) string[26]
    (34035 'end of statement')
    if(34064 call _cond_test(34042 call(34038 call . localThis[34032] c"isEmpty")))
    {
      (34062 call halt "string.toCodepoint() only accepts single-codepoint strings")
    }
    if(34167 call _cond_test(34074 call(34070 call . this[34016] c"isASCII")))
    {
      if(34087 call _cond_test(34080 call >(34076 call . localThis[34032] c"numBytes") 1))
      {
        (34085 call halt "string.toCodepoint() only accepts single-codepoint strings")
      }
      (34101 return(34100 call(34096 call . this[34016] c"toByte")))
    }
    {
      const tmp[34127] "const" "temp"(34126 call decodeHelp(buff =(34112 call . localThis[34032] c"buff"))(buffLen =(34118 call . localThis[34032] c"buffLen"))(offset = 0)(allowEsc = 1))
      (34137 call _check_tuple_var_decl tmp[34127] 3)
      const decodeRet[34103] "const"(34128 call tmp[34127] 0)
      const cp[34105] "const"(34131 call tmp[34127] 1)
      const nBytes[34107] "const"(34134 call tmp[34127] 2)
      (34142 'end of statement')
      if(34159 call _cond_test(34152 call !=(34145 call . localThis[34032] c"buffLen")(34150 call _cast int(64)[13] nBytes[34107])))
      {
        (34157 call halt "string.toCodepoint() only accepts single-codepoint strings")
      }
      (34165 return cp[34105])
    }
  }
  { scopeless type
    (34024 call int(64)[13] 32)
  }
  function string[26].codepoint[34181](arg _mt[34186]:_MT[238], arg this[34183]:string[26] :
  string[26], arg i[34178] :
  int(64)[13]) : _unknown[51] "method"
  {
    const idx[34196] "const"(34194 call _cast int(64)[13] i[34178])
    (34199 'end of statement')
    if(34231 call _cond_test(34206 call && 1(34204 call < idx[34196] 0)))
    {
      (34229 call halt "index " idx[34196] " out of bounds for string")
    }
    if(34387 call _cond_test(34241 call(34237 call . this[34183] c"isASCII")))
    {
      if(34279 call _cond_test(34250 call && 1(34248 call >= idx[34196](34245 call . this[34183] c"numBytes"))))
      {
        (34277 call halt "index " idx[34196] " out of bounds for string with length "(34274 call . this[34183] c"size"))
      }
      (34292 return(34291 call(34286 call . this[34183] c"byte") i[34178]))
    }
    {
      unknown j[34295] 0
      (34298 'end of statement')
      {
        unknown _indexOfInterest[34327] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[34328] "expr temp" "temp"
        (34337 'move' _iterator[34328](34335 call _getIterator(34308 call(34304 call . this[34183] c"codepoints"))))
        Defer
        {
          {
            (34354 call _freeIterator _iterator[34328])
          }
        }
        { scopeless type
          (34343 'move' _indexOfInterest[34327](34340 call iteratorIndex _iterator[34328]))
        }
        ForLoop[34329]
        {
          unknown cp[34347] "index var" "insert auto destroy"
          (34349 'move' cp[34347] _indexOfInterest[34327])
          {
            if(34316 call _cond_test(34311 call == j[34295] idx[34196]))
            {
              (34314 return cp[34347])
            }
            (34324 call += j[34295] 1)
          }
          label _continueLabel[34332]
          _indexOfInterest[34327]
          _iterator[34328]
        }
        label _breakLabel[34333]
      }
      if(34373 call _cond_test 1)
      {
        (34371 call halt "index " idx[34196] " out of bounds for string with length "(34368 call . this[34183] c"size"))
      }
      (34385 return(34383 call _cast(34382 call int(64)[13] 32) 0))
    }
  }
  { scopeless type
    (34191 call int(64)[13] 32)
  }
  function string[26].this[34401](arg _mt[34406]:_MT[238], arg this[34403]:string[26] :
  string[26], arg i[34398] :
  byteIndex[28170]) : _unknown[51] "method"
  {
    unknown idx[34413](34411 call _cast int(64)[13] i[34398])
    (34416 'end of statement')
    if(34446 call _cond_test(34432 call && 1(34430 call ||(34421 call < idx[34413] 0)(34428 call >= idx[34413](34425 call . this[34403] c"buffLen")))))
    {
      (34444 call halt "index " i[34398] " out of bounds for string with "(34440 call . this[34403] c"buffLen") " bytes")
    }
    if(34618 call _cond_test(34456 call(34452 call . this[34403] c"isASCII")))
    {
      unknown tmp[34482] "temp"(34481 call bufferCopy(buf =(34464 call . this[34403] c"buff"))(off =(34471 call _cast int(64)[13] i[34398]))(len = 1)(loc =(34477 call . this[34403] c"locale_id")))
      (34489 call _check_tuple_var_decl tmp[34482] 2)
      unknown newBuff[34457](34483 call tmp[34482] 0)
      unknown allocSize[34459](34486 call tmp[34482] 1)
      (34494 'end of statement')
      (34503 return(34502 call chpl_createStringWithOwnedBufferNV newBuff[34457] 1 allocSize[34459] 1))
    }
    {
      unknown maxbytes[34515](34513 call _cast ssize_t[20647](34510 call -(34506 call . this[34403] c"buffLen") idx[34413]))
      (34518 'end of statement')
      if(34535 call _cond_test(34528 call ||(34522 call < maxbytes[34515] 0)(34526 call > maxbytes[34515] 4)))
      {
        (34532 call = maxbytes[34515] 4)
      }
      unknown tmp[34562] "temp"(34561 call bufferCopy(buf =(34547 call . this[34403] c"buff"))(off = idx[34413])(len = maxbytes[34515])(loc =(34557 call . this[34403] c"locale_id")))
      (34569 call _check_tuple_var_decl tmp[34562] 2)
      unknown newBuff[34540](34563 call tmp[34562] 0)
      unknown allocSize[34542](34566 call tmp[34562] 1)
      (34574 'end of statement')
      const tmp[34593] "const" "temp"(34592 call decodeHelp(buff = newBuff[34540])(buffLen = maxbytes[34515])(offset = 0)(allowEsc = 1))
      (34603 call _check_tuple_var_decl tmp[34593] 3)
      const decodeRet[34575] "const"(34594 call tmp[34593] 0)
      const cp[34577] "const"(34597 call tmp[34593] 1)
      const nBytes[34579] "const"(34600 call tmp[34593] 2)
      (34608 'end of statement')
      (34616 return(34615 call chpl_createStringWithOwnedBufferNV newBuff[34540] nBytes[34579] allocSize[34542] 1))
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].this[34632](arg _mt[34637]:_MT[238], arg this[34634]:string[26] :
  string[26], arg i[34629] :
  codepointIndex[28274]) : _unknown[51] "method"
  {
    (34647 return(34646 call(34641 call . this[34634] c"item") i[34629]))
  }
  { scopeless type
    string[26]
  }
  function string[26].this[34660](arg _mt[34665]:_MT[238], arg this[34662]:string[26] :
  string[26], arg i[34657] :
  int(64)[13]) : _unknown[51] "inline" "method"
  {
    (34675 return(34674 call(34669 call . this[34662] c"item") i[34657]))
  }
  { scopeless type
    string[26]
  }
  function string[26].item[34688](arg _mt[34693]:_MT[238], arg this[34690]:string[26] :
  string[26], arg i[34685] :
  codepointIndex[28274]) : _unknown[51] "method"
  {
    if(34710 call _cond_test(34701 call && 1(34699 call < i[34685] 0)))
    {
      (34708 call halt "index " i[34685] " out of bounds for string")
    }
    if(34741 call _cond_test(34721 call(34717 call . this[34690] c"isEmpty")))
    {
      (34739 return "")
    }
    if(34994 call _cond_test(34751 call(34747 call . this[34690] c"isASCII")))
    {
      if(34773 call _cond_test(34760 call && 1(34758 call >= i[34685](34755 call . this[34690] c"numBytes"))))
      {
        (34771 call halt "index " i[34685] " out of bounds for string with length "(34768 call . this[34690] c"size"))
      }
      unknown tmp[34804] "temp"(34803 call bufferCopy(buf =(34786 call . this[34690] c"buff"))(off =(34793 call _cast int(64)[13] i[34685]))(len = 1)(loc =(34799 call . this[34690] c"locale_id")))
      (34811 call _check_tuple_var_decl tmp[34804] 2)
      unknown newBuff[34779](34805 call tmp[34804] 0)
      unknown allocSize[34781](34808 call tmp[34804] 1)
      (34816 'end of statement')
      (34824 return(34823 call chpl_createStringWithOwnedBufferNV newBuff[34779] 1 allocSize[34781] 1))
    }
    {
      unknown charCount[34827] 0
      (34830 'end of statement')
      {
        unknown _indexOfInterest[34903] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[34904] "expr temp" "temp"
        (34913 'move' _iterator[34904](34911 call _getIterator(34840 call(370044 call . this[34690] c"_cpIndexLen"))))
        Defer
        {
          {
            (34951 call _freeIterator _iterator[34904])
          }
        }
        { scopeless type
          (34919 'move' _indexOfInterest[34903](34916 call iteratorIndex _iterator[34904]))
        }
        ForLoop[34905]
        {
          (34924 call _check_tuple_var_decl _indexOfInterest[34903] 3)
          unknown cp[34930] "index var" "insert auto destroy"
          (34932 'move' cp[34930](34928 call _indexOfInterest[34903] 0))
          unknown byteIdx[34937] "index var" "insert auto destroy"
          (34939 'move' byteIdx[34937](34935 call _indexOfInterest[34903] 1))
          unknown nBytes[34944] "index var" "insert auto destroy"
          (34946 'move' nBytes[34944](34942 call _indexOfInterest[34903] 2))
          {
            if(34893 call _cond_test(34843 call == charCount[34827] i[34685]))
            {
              unknown tmp[34870] "temp"(34869 call bufferCopy(buf =(34852 call . this[34690] c"buff"))(off =(34859 call _cast int(64)[13] byteIdx[34937]))(len = nBytes[34944])(loc =(34865 call . this[34690] c"locale_id")))
              (34877 call _check_tuple_var_decl tmp[34870] 2)
              unknown newBuff[34845](34871 call tmp[34870] 0)
              unknown allocSize[34847](34874 call tmp[34870] 1)
              (34882 'end of statement')
              (34891 return(34890 call chpl_createStringWithOwnedBufferNV newBuff[34845] nBytes[34944] allocSize[34847] 1))
            }
            (34900 call += charCount[34827] 1)
          }
          label _continueLabel[34908]
          _indexOfInterest[34903]
          _iterator[34904]
        }
        label _breakLabel[34909]
      }
      if(34970 call _cond_test 1)
      {
        (34968 call halt "index " i[34685] " out of bounds for string with length "(34965 call . this[34690] c"size"))
      }
      (34992 return "")
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].item[35008](arg _mt[35013]:_MT[238], arg this[35010]:string[26] :
  string[26], arg i[35005] :
  int(64)[13]) : _unknown[51] "inline" "method"
  {
    (35023 return(35022 call this[35010](35019 call _cast codepointIndex[28274] i[35005])))
  }
  { scopeless type
    string[26]
  }
  function string[26].this[35039](arg _mt[35044]:_MT[238], arg this[35041]:string[26] :
  string[26], arg r[35036] :
  (35035 call range[64316](?) ?[260])) : _unknown[51] "inline" "method"
  {
    (35052 return(35051 call getSlice this[35041] r[35036]))
  }
  { scopeless type
    string[26]
  }
  function string[26].isEmpty[35061](arg _mt[35066]:_MT[238], arg this[35063]:string[26] :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35076 return(35074 call ==(35070 call . this[35063] c"buffLen") 0))
  }
  { scopeless type
    bool[10]
  }
  function string[26].startsWith[35091](arg _mt[35096]:_MT[238], arg this[35093]:string[26] :
  string[26], arg needles[35087] ... :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35106 return(35105 call startsEndsWith this[35093] needles[35087](fromLeft = 1)))
  }
  { scopeless type
    bool[10]
  }
  function string[26].endsWith[35121](arg _mt[35126]:_MT[238], arg this[35123]:string[26] :
  string[26], arg needles[35117] ... :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35136 return(35135 call startsEndsWith this[35123] needles[35117](fromLeft = 0)))
  }
  { scopeless type
    bool[10]
  }
  function string[26].find[35149](arg _mt[35172]:_MT[238], arg this[35169]:string[26] :
  string[26], arg needle[35146] :
  string[26], arg region[35165] :
  (35154 call range[64316](?) ?[260]) =
  (35163 call _cast(35162 call range[64316](?) byteIndex[28170])(35156 call . this[35169] c"byteIndices"))) : _unknown[51] "inline" "method"
  {
    if(35206 call _cond_test(35180 call(35176 call . this[35169] c"isASCII")))
    {
      (35192 return(35190 call _cast byteIndex[28170](35188 call doSearchNoEnc this[35169] needle[35146] region[35165](count = 0))))
    }
    {
      (35204 return(35202 call _cast byteIndex[28170](35200 call(370078 call . this[35169] c"doSearchUTF8") needle[35146] region[35165](count = 0))))
    }
  }
  { scopeless type
    byteIndex[28170]
  }
  function string[26].rfind[35223](arg _mt[35246]:_MT[238], arg this[35243]:string[26] :
  string[26], arg needle[35220] :
  string[26], arg region[35239] :
  (35228 call range[64316](?) ?[260]) =
  (35237 call _cast(35236 call range[64316](?) byteIndex[28170])(35230 call . this[35243] c"byteIndices"))) : _unknown[51] "inline" "method"
  {
    if(35284 call _cond_test(35254 call(35250 call . this[35243] c"isASCII")))
    {
      (35268 return(35266 call _cast byteIndex[28170](35264 call doSearchNoEnc this[35243] needle[35220] region[35239](count = 0)(fromLeft = 0))))
    }
    {
      (35282 return(35280 call _cast byteIndex[28170](35278 call(370093 call . this[35243] c"doSearchUTF8") needle[35220] region[35239](count = 0)(fromLeft = 0))))
    }
  }
  { scopeless type
    byteIndex[28170]
  }
  function string[26].count[35301](arg _mt[35318]:_MT[238], arg this[35315]:string[26] :
  string[26], arg needle[35298] :
  string[26], arg region[35311] :
  (35306 call range[64316](?) ?[260]) =
  (35308 call . this[35315] c"indices")) : _unknown[51] "inline" "method"
  {
    if(35346 call _cond_test(35326 call(35322 call . this[35315] c"isASCII")))
    {
      (35335 return(35334 call doSearchNoEnc this[35315] needle[35298] region[35311](count = 1)))
    }
    {
      (35344 return(35343 call(370104 call . this[35315] c"doSearchUTF8") needle[35298] region[35311](count = 1)))
    }
  }
  { scopeless type
    int(64)[13]
  }
  function string[26].replace[35363](arg _mt[35380]:_MT[238], arg this[35377]:string[26] :
  string[26], arg needle[35360] :
  string[26], arg replacement[35366] :
  string[26], arg count[35373] :
  int(64)[13] =
  (35371 call - 1)) : _unknown[51] "inline" "method"
  {
    (35390 return(35389 call doReplace this[35377] needle[35360] replacement[35366] count[35373]))
  }
  { scopeless type
    string[26]
  }
  function string[26].split[35403](arg _mt[35422]:_MT[238], arg this[35419]:string[26] :
  string[26], arg sep[35400] :
  string[26], arg maxsplit[35409] :
  int(64)[13] =
  (35407 call - 1), arg ignoreEmpty[35415] :
  bool[10] =
  0) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[35435] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[35436] "expr temp" "temp"
      (35445 'move' _iterator[35436](35443 call _getIterator(35431 call doSplit this[35419] sep[35400] maxsplit[35409] ignoreEmpty[35415])))
      Defer
      {
        {
          (35462 call _freeIterator _iterator[35436])
        }
      }
      { scopeless type
        (35451 'move' _indexOfInterest[35435](35448 call iteratorIndex _iterator[35436]))
      }
      ForLoop[35437]
      {
        unknown s[35455] "index var" "insert auto destroy"
        (35457 'move' s[35455] _indexOfInterest[35435])
        (35433 yield s[35455])
        label _continueLabel[35440]
        _indexOfInterest[35435]
        _iterator[35436]
      }
      label _breakLabel[35441]
    }
  }
  function string[26].split[35483](arg _mt[35488]:_MT[238], arg this[35485]:string[26] :
  string[26], arg maxsplit[35479] :
  int(64)[13] =
  (35477 call - 1)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    if(35934 call _cond_test(35495 call(35491 call . this[35485] c"isASCII")))
    {
      {
        unknown _indexOfInterest[35505] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[35506] "expr temp" "temp"
        (35515 'move' _iterator[35506](35513 call _getIterator(35501 call doSplitWSNoEnc this[35485] maxsplit[35479])))
        Defer
        {
          {
            (35532 call _freeIterator _iterator[35506])
          }
        }
        { scopeless type
          (35521 'move' _indexOfInterest[35505](35518 call iteratorIndex _iterator[35506]))
        }
        ForLoop[35507]
        {
          unknown s[35525] "index var" "insert auto destroy"
          (35527 'move' s[35525] _indexOfInterest[35505])
          (35503 yield s[35525])
          label _continueLabel[35510]
          _indexOfInterest[35505]
          _iterator[35506]
        }
        label _breakLabel[35511]
      }
    }
    {
      if(35929 call _cond_test(35546 call !(35545 call(35541 call . this[35485] c"isEmpty"))))
      {
        const localThis[35555] "const"(35554 call(35550 call . this[35485] c"localize")) string[26]
        (35558 'end of statement')
        unknown done[35562] 0 bool[10]
        (35565 'end of statement')
        unknown yieldChunk[35568] 0 bool[10]
        (35571 'end of statement')
        unknown chunk[35573] string[26]
        (35576 'end of statement')
        const noSplits[35582] "const"(35580 call == maxsplit[35479] 0) bool[10]
        (35585 'end of statement')
        const limitSplits[35591] "const"(35589 call > maxsplit[35479] 0) bool[10]
        (35594 'end of statement')
        unknown splitCount[35597] 0 int(64)[13]
        (35600 'end of statement')
        const iEnd[35609] "const"(35607 call -(35603 call . localThis[35555] c"buffLen") 2) byteIndex[28170]
        (35612 'end of statement')
        unknown inChunk[35615] 0 bool[10]
        (35618 'end of statement')
        unknown chunkStart[35620] byteIndex[28170]
        (35623 'end of statement')
        {
          unknown _indexOfInterest[35874] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[35875] "expr temp" "temp"
          (35884 'move' _iterator[35875](35882 call _getIterator(35637 call(35633 call . localThis[35555] c"_cpIndexLen"))))
          Defer
          {
            {
              (35922 call _freeIterator _iterator[35875])
            }
          }
          { scopeless type
            (35890 'move' _indexOfInterest[35874](35887 call iteratorIndex _iterator[35875]))
          }
          ForLoop[35876]
          {
            (35895 call _check_tuple_var_decl _indexOfInterest[35874] 3)
            unknown c[35901] "index var" "insert auto destroy"
            (35903 'move' c[35901](35899 call _indexOfInterest[35874] 0))
            unknown i[35908] "index var" "insert auto destroy"
            (35910 'move' i[35908](35906 call _indexOfInterest[35874] 1))
            unknown nBytes[35915] "index var" "insert auto destroy"
            (35917 'move' nBytes[35915](35913 call _indexOfInterest[35874] 2))
            {
              if(35846 call _cond_test noSplits[35582])
              {
                (35641 call = done[35562] 1)
                if(35666 call _cond_test(35653 call !(35652 call(35648 call . localThis[35555] c"isSpace"))))
                {
                  (35657 call = chunk[35573] localThis[35555])
                  (35663 call = yieldChunk[35568] 1)
                }
              }
              {
                unknown cSpace[35674](35673 call codepoint_isWhitespace c[35901])
                (35677 'end of statement')
                if(35841 call _cond_test(35683 call !(35681 call || inChunk[35615] cSpace[35674])))
                {
                  (35687 call = chunkStart[35620] i[35908])
                  (35693 call = inChunk[35615] 1)
                  if(35727 call _cond_test(35704 call >(35701 call +(35698 call - i[35908] 1) nBytes[35915]) iEnd[35609]))
                  {
                    (35713 call = chunk[35573](35712 call localThis[35555](35709 call chpl_build_low_bounded_range chunkStart[35620])))
                    (35719 call = yieldChunk[35568] 1)
                    (35724 call = done[35562] 1)
                  }
                }
                {
                  if(35837 call _cond_test inChunk[35615])
                  {
                    if(35831 call _cond_test cSpace[35674])
                    {
                      (35735 call += splitCount[35597] 1)
                      if(35792 call _cond_test(35744 call && limitSplits[35591](35742 call > splitCount[35597] maxsplit[35479])))
                      {
                        (35753 call = chunk[35573](35752 call localThis[35555](35749 call chpl_build_low_bounded_range chunkStart[35620])))
                        (35759 call = yieldChunk[35568] 1)
                        (35764 call = done[35562] 1)
                      }
                      {
                        (35778 call = chunk[35573](35777 call localThis[35555](35774 call chpl_build_bounded_range chunkStart[35620](35772 call - i[35908] 1))))
                        (35784 call = yieldChunk[35568] 1)
                        (35789 call = inChunk[35615] 0)
                      }
                    }
                    {
                      if(35827 call _cond_test(35804 call >(35801 call +(35798 call - i[35908] 1) nBytes[35915]) iEnd[35609]))
                      {
                        (35813 call = chunk[35573](35812 call localThis[35555](35809 call chpl_build_low_bounded_range chunkStart[35620])))
                        (35819 call = yieldChunk[35568] 1)
                        (35824 call = done[35562] 1)
                      }
                    }
                  }
                }
              }
              if(35861 call _cond_test yieldChunk[35568])
              {
                (35853 yield chunk[35573])
                (35858 call = yieldChunk[35568] 0)
              }
              if(35869 call _cond_test done[35562])
              {
                break _breakLabel[35880] _breakLabel[35880]
              }
            }
            label _continueLabel[35879]
            _indexOfInterest[35874]
            _iterator[35875]
          }
          label _breakLabel[35880]
        }
      }
    }
  }
  function string[26].join[35950](arg _mt[35955]:_MT[238], arg this[35952]:string[26] :
  string[26], const  ref arg x[35946] ... :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35962 return(35961 call(370174 call . this[35952] c"_join") x[35946]))
  }
  { scopeless type
    string[26]
  }
  function string[26].join[35973](arg _mt[35978]:_MT[238], arg this[35975]:string[26] :
  string[26], const  ref arg x[35971]:_any[178](?)) : _unknown[51] "inline" "method"
  {
    if(36025 call _cond_test(36000 call ||(35989 call !(35988 call isHomogeneousTuple x[35971]))(35998 call !(35997 call isString(35995 call x[35971] 1)))))
    {
      (36023 call compilerError "join() on tuples only handles homogeneous tuples of strings")
    }
    (36035 return(36034 call(370182 call . this[35975] c"_join") x[35971]))
  }
  where {
    (35984 call isTuple x[35971])
  }
  { scopeless type
    string[26]
  }
  function string[26].join[36051](arg _mt[36056]:_MT[238], arg this[36053]:string[26] :
  string[26], const  ref arg S[36048] :
  (36045 call chpl__buildArrayRuntimeType nil[44] string[26])) : _unknown[51] "inline" "method"
  {
    (36063 return(36062 call(370187 call . this[36053] c"_join") S[36048]))
  }
  { scopeless type
    string[26]
  }
  function string[26].strip[36092](arg _mt[36105]:_MT[238], arg this[36102]:string[26] :
  string[26], arg chars[36088] :
  string[26] =
  " \t\r\n", arg leading[36095] =
  1, arg trailing[36099] =
  1) : _unknown[51] "method"
  {
    if(36504 call _cond_test(36113 call(36109 call . this[36102] c"isASCII")))
    {
      (36121 return(36120 call doStripNoEnc this[36102] chars[36088] leading[36095] trailing[36099]))
    }
    {
      if(36149 call _cond_test(36129 call(36125 call . this[36102] c"isEmpty")))
      {
        (36147 return "")
      }
      if(36164 call _cond_test(36160 call(36156 call . chars[36088] c"isEmpty")))
      {
        (36162 return this[36102])
      }
      const localThis[36176] "const"(36175 call(36171 call . this[36102] c"localize")) string[26]
      (36179 'end of statement')
      const localChars[36187] "const"(36186 call(36182 call . chars[36088] c"localize")) string[26]
      (36190 'end of statement')
      unknown start[36193] 0 byteIndex[28170]
      (36196 'end of statement')
      unknown end[36205](36203 call -(36199 call . localThis[36176] c"buffLen") 1) byteIndex[28170]
      (36208 'end of statement')
      if(36344 call _cond_test leading[36095])
      {
        {
          unknown _indexOfInterest[36288] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36289] "expr temp" "temp"
          (36298 'move' _iterator[36289](36296 call _getIterator(36221 call(36217 call . localThis[36176] c"_cpIndexLen"))))
          Defer
          {
            {
              (36336 call _freeIterator _iterator[36289])
            }
          }
          { scopeless type
            (36304 'move' _indexOfInterest[36288](36301 call iteratorIndex _iterator[36289]))
          }
          ForLoop[36290]
          {
            (36309 call _check_tuple_var_decl _indexOfInterest[36288] 3)
            unknown thisChar[36315] "index var" "insert auto destroy"
            (36317 'move' thisChar[36315](36313 call _indexOfInterest[36288] 0))
            unknown i[36322] "index var" "insert auto destroy"
            (36324 'move' i[36322](36320 call _indexOfInterest[36288] 1))
            unknown nBytes[36329] "index var" "insert auto destroy"
            (36331 'move' nBytes[36329](36327 call _indexOfInterest[36288] 2))
            {
              {
                unknown _indexOfInterest[36250] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[36251] "expr temp" "temp"
                (36260 'move' _iterator[36251](36258 call _getIterator(36228 call(36224 call . localChars[36187] c"codepoints"))))
                Defer
                {
                  {
                    (36277 call _freeIterator _iterator[36251])
                  }
                }
                { scopeless type
                  (36266 'move' _indexOfInterest[36250](36263 call iteratorIndex _iterator[36251]))
                }
                ForLoop[36252]
                {
                  unknown removeChar[36270] "index var" "insert auto destroy"
                  (36272 'move' removeChar[36270] _indexOfInterest[36250])
                  {
                    if(36245 call _cond_test(36231 call == thisChar[36315] removeChar[36270]))
                    {
                      (36238 call = start[36193](36236 call + i[36322] nBytes[36329]))
                      continue _continueLabel[36293] _continueLabel[36293]
                    }
                  }
                  label _continueLabel[36255]
                  _indexOfInterest[36250]
                  _iterator[36251]
                }
                label _breakLabel[36256]
              }
              break _breakLabel[36294] _breakLabel[36294]
            }
            label _continueLabel[36293]
            _indexOfInterest[36288]
            _iterator[36289]
          }
          label _breakLabel[36294]
        }
      }
      if(36491 call _cond_test trailing[36099])
      {
        (36353 call = end[36205](36351 call - 1))
        {
          unknown _indexOfInterest[36436] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36437] "expr temp" "temp"
          (36446 'move' _iterator[36437](36444 call _getIterator(36369 call(36364 call . localThis[36176] c"_cpIndexLen") start[36193])))
          Defer
          {
            {
              (36484 call _freeIterator _iterator[36437])
            }
          }
          { scopeless type
            (36452 'move' _indexOfInterest[36436](36449 call iteratorIndex _iterator[36437]))
          }
          ForLoop[36438]
          {
            (36457 call _check_tuple_var_decl _indexOfInterest[36436] 3)
            unknown thisChar[36463] "index var" "insert auto destroy"
            (36465 'move' thisChar[36463](36461 call _indexOfInterest[36436] 0))
            unknown i[36470] "index var" "insert auto destroy"
            (36472 'move' i[36470](36468 call _indexOfInterest[36436] 1))
            unknown nBytes[36477] "index var" "insert auto destroy"
            (36479 'move' nBytes[36477](36475 call _indexOfInterest[36436] 2))
            {
              {
                unknown _indexOfInterest[36390] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[36391] "expr temp" "temp"
                (36400 'move' _iterator[36391](36398 call _getIterator(36376 call(36372 call . localChars[36187] c"codepoints"))))
                Defer
                {
                  {
                    (36417 call _freeIterator _iterator[36391])
                  }
                }
                { scopeless type
                  (36406 'move' _indexOfInterest[36390](36403 call iteratorIndex _iterator[36391]))
                }
                ForLoop[36392]
                {
                  unknown removeChar[36410] "index var" "insert auto destroy"
                  (36412 'move' removeChar[36410] _indexOfInterest[36390])
                  {
                    if(36385 call _cond_test(36379 call == thisChar[36463] removeChar[36410]))
                    {
                      continue _continueLabel[36441] _continueLabel[36441]
                    }
                  }
                  label _continueLabel[36395]
                  _indexOfInterest[36390]
                  _iterator[36391]
                }
                label _breakLabel[36396]
              }
              (36433 call = end[36205](36431 call -(36428 call + i[36470] nBytes[36477]) 1))
            }
            label _continueLabel[36441]
            _indexOfInterest[36436]
            _iterator[36437]
          }
          label _breakLabel[36442]
        }
      }
      (36502 return(36501 call localThis[36176](36498 call chpl_build_bounded_range start[36193] end[36205])))
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].partition[36519](arg _mt[36524]:_MT[238], const arg this[36521]:string[26] :
  string[26], arg sep[36516] :
  string[26]) : _unknown[51] "inline" "method"
  {
    (36535 return(36534 call doPartition this[36521] sep[36516]))
  }
  { scopeless type
    (36528 call * 3 string[26])
  }
  function string[26].isUpper[36544](arg _mt[36549]:_MT[238], arg this[36546]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36561 call _cond_test(36557 call(36553 call . this[36546] c"isEmpty")))
    {
      (36559 return 0)
    }
    unknown result[36568] bool[10]
    (36571 'end of statement')
    {
      const tmp[36675] "const" "temp"
      (36676 'move' tmp[36675](36673 'deref'(36582 'chpl_on_locale_num'(36581 call chpl_buildLocaleID(36576 call . this[36546] c"locale_id") c_sublocid_any[89879]))))
      {
        unknown locale_result[36584] 0
        (36587 'end of statement')
        {
          unknown _indexOfInterest[36634] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36635] "expr temp" "temp"
          (36644 'move' _iterator[36635](36642 call _getIterator(36595 call(36591 call . this[36546] c"codepoints"))))
          Defer
          {
            {
              (36661 call _freeIterator _iterator[36635])
            }
          }
          { scopeless type
            (36650 'move' _indexOfInterest[36634](36647 call iteratorIndex _iterator[36635]))
          }
          ForLoop[36636]
          {
            unknown cp[36654] "index var" "insert auto destroy"
            (36656 'move' cp[36654] _indexOfInterest[36634])
            {
              if(36628 call _cond_test(36599 call codepoint_isLower cp[36654]))
              {
                (36602 call = locale_result[36584] 0)
                break _breakLabel[36640] _breakLabel[36640]
              }
              {
                if(36624 call _cond_test(36616 call &&(36610 call ! locale_result[36584])(36615 call codepoint_isUpper cp[36654])))
                {
                  (36620 call = locale_result[36584] 1)
                }
              }
            }
            label _continueLabel[36639]
            _indexOfInterest[36634]
            _iterator[36635]
          }
          label _breakLabel[36640]
        }
        (36670 call = result[36568] locale_result[36584])
      }
      (36679 'elided on block' 0 tmp[36675])
    }
    (36684 return result[36568])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isLower[36692](arg _mt[36697]:_MT[238], arg this[36694]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36709 call _cond_test(36705 call(36701 call . this[36694] c"isEmpty")))
    {
      (36707 return 0)
    }
    unknown result[36716] bool[10]
    (36719 'end of statement')
    {
      const tmp[36823] "const" "temp"
      (36824 'move' tmp[36823](36821 'deref'(36730 'chpl_on_locale_num'(36729 call chpl_buildLocaleID(36724 call . this[36694] c"locale_id") c_sublocid_any[89879]))))
      {
        unknown locale_result[36732] 0
        (36735 'end of statement')
        {
          unknown _indexOfInterest[36782] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36783] "expr temp" "temp"
          (36792 'move' _iterator[36783](36790 call _getIterator(36743 call(36739 call . this[36694] c"codepoints"))))
          Defer
          {
            {
              (36809 call _freeIterator _iterator[36783])
            }
          }
          { scopeless type
            (36798 'move' _indexOfInterest[36782](36795 call iteratorIndex _iterator[36783]))
          }
          ForLoop[36784]
          {
            unknown cp[36802] "index var" "insert auto destroy"
            (36804 'move' cp[36802] _indexOfInterest[36782])
            {
              if(36776 call _cond_test(36747 call codepoint_isUpper cp[36802]))
              {
                (36750 call = locale_result[36732] 0)
                break _breakLabel[36788] _breakLabel[36788]
              }
              {
                if(36772 call _cond_test(36764 call &&(36758 call ! locale_result[36732])(36763 call codepoint_isLower cp[36802])))
                {
                  (36768 call = locale_result[36732] 1)
                }
              }
            }
            label _continueLabel[36787]
            _indexOfInterest[36782]
            _iterator[36783]
          }
          label _breakLabel[36788]
        }
        (36818 call = result[36716] locale_result[36732])
      }
      (36827 'elided on block' 0 tmp[36823])
    }
    (36832 return result[36716])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isSpace[36840](arg _mt[36845]:_MT[238], arg this[36842]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36857 call _cond_test(36853 call(36849 call . this[36842] c"isEmpty")))
    {
      (36855 return 0)
    }
    unknown result[36865] 1 bool[10]
    (36868 'end of statement')
    {
      const tmp[36944] "const" "temp"
      (36945 'move' tmp[36944](36942 'deref'(36879 'chpl_on_locale_num'(36878 call chpl_buildLocaleID(36873 call . this[36842] c"locale_id") c_sublocid_any[89879]))))
      {
        {
          unknown _indexOfInterest[36907] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36908] "expr temp" "temp"
          (36917 'move' _iterator[36908](36915 call _getIterator(36886 call(36882 call . this[36842] c"codepoints"))))
          Defer
          {
            {
              (36934 call _freeIterator _iterator[36908])
            }
          }
          { scopeless type
            (36923 'move' _indexOfInterest[36907](36920 call iteratorIndex _iterator[36908]))
          }
          ForLoop[36909]
          {
            unknown cp[36927] "index var" "insert auto destroy"
            (36929 'move' cp[36927] _indexOfInterest[36907])
            {
              if(36902 call _cond_test(36891 call !(36890 call codepoint_isWhitespace cp[36927])))
              {
                (36895 call = result[36865] 0)
                break _breakLabel[36913] _breakLabel[36913]
              }
            }
            label _continueLabel[36912]
            _indexOfInterest[36907]
            _iterator[36908]
          }
          label _breakLabel[36913]
        }
      }
      (36948 'elided on block' 0 tmp[36944])
    }
    (36953 return result[36865])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isAlpha[36961](arg _mt[36966]:_MT[238], arg this[36963]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36978 call _cond_test(36974 call(36970 call . this[36963] c"isEmpty")))
    {
      (36976 return 0)
    }
    unknown result[36986] 1 bool[10]
    (36989 'end of statement')
    {
      const tmp[37065] "const" "temp"
      (37066 'move' tmp[37065](37063 'deref'(37000 'chpl_on_locale_num'(36999 call chpl_buildLocaleID(36994 call . this[36963] c"locale_id") c_sublocid_any[89879]))))
      {
        {
          unknown _indexOfInterest[37028] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37029] "expr temp" "temp"
          (37038 'move' _iterator[37029](37036 call _getIterator(37007 call(37003 call . this[36963] c"codepoints"))))
          Defer
          {
            {
              (37055 call _freeIterator _iterator[37029])
            }
          }
          { scopeless type
            (37044 'move' _indexOfInterest[37028](37041 call iteratorIndex _iterator[37029]))
          }
          ForLoop[37030]
          {
            unknown cp[37048] "index var" "insert auto destroy"
            (37050 'move' cp[37048] _indexOfInterest[37028])
            {
              if(37023 call _cond_test(37012 call !(37011 call codepoint_isAlpha cp[37048])))
              {
                (37016 call = result[36986] 0)
                break _breakLabel[37034] _breakLabel[37034]
              }
            }
            label _continueLabel[37033]
            _indexOfInterest[37028]
            _iterator[37029]
          }
          label _breakLabel[37034]
        }
      }
      (37069 'elided on block' 0 tmp[37065])
    }
    (37074 return result[36986])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isDigit[37082](arg _mt[37087]:_MT[238], arg this[37084]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37099 call _cond_test(37095 call(37091 call . this[37084] c"isEmpty")))
    {
      (37097 return 0)
    }
    unknown result[37107] 1 bool[10]
    (37110 'end of statement')
    {
      const tmp[37186] "const" "temp"
      (37187 'move' tmp[37186](37184 'deref'(37121 'chpl_on_locale_num'(37120 call chpl_buildLocaleID(37115 call . this[37084] c"locale_id") c_sublocid_any[89879]))))
      {
        {
          unknown _indexOfInterest[37149] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37150] "expr temp" "temp"
          (37159 'move' _iterator[37150](37157 call _getIterator(37128 call(37124 call . this[37084] c"codepoints"))))
          Defer
          {
            {
              (37176 call _freeIterator _iterator[37150])
            }
          }
          { scopeless type
            (37165 'move' _indexOfInterest[37149](37162 call iteratorIndex _iterator[37150]))
          }
          ForLoop[37151]
          {
            unknown cp[37169] "index var" "insert auto destroy"
            (37171 'move' cp[37169] _indexOfInterest[37149])
            {
              if(37144 call _cond_test(37133 call !(37132 call codepoint_isDigit cp[37169])))
              {
                (37137 call = result[37107] 0)
                break _breakLabel[37155] _breakLabel[37155]
              }
            }
            label _continueLabel[37154]
            _indexOfInterest[37149]
            _iterator[37150]
          }
          label _breakLabel[37155]
        }
      }
      (37190 'elided on block' 0 tmp[37186])
    }
    (37195 return result[37107])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isAlnum[37203](arg _mt[37208]:_MT[238], arg this[37205]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37220 call _cond_test(37216 call(37212 call . this[37205] c"isEmpty")))
    {
      (37218 return 0)
    }
    unknown result[37228] 1 bool[10]
    (37231 'end of statement')
    {
      const tmp[37313] "const" "temp"
      (37314 'move' tmp[37313](37311 'deref'(37242 'chpl_on_locale_num'(37241 call chpl_buildLocaleID(37236 call . this[37205] c"locale_id") c_sublocid_any[89879]))))
      {
        {
          unknown _indexOfInterest[37276] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37277] "expr temp" "temp"
          (37286 'move' _iterator[37277](37284 call _getIterator(37249 call(37245 call . this[37205] c"codepoints"))))
          Defer
          {
            {
              (37303 call _freeIterator _iterator[37277])
            }
          }
          { scopeless type
            (37292 'move' _indexOfInterest[37276](37289 call iteratorIndex _iterator[37277]))
          }
          ForLoop[37278]
          {
            unknown cp[37296] "index var" "insert auto destroy"
            (37298 'move' cp[37296] _indexOfInterest[37276])
            {
              if(37271 call _cond_test(37260 call !(37258 call ||(37253 call codepoint_isAlpha cp[37296])(37257 call codepoint_isDigit cp[37296]))))
              {
                (37264 call = result[37228] 0)
                break _breakLabel[37282] _breakLabel[37282]
              }
            }
            label _continueLabel[37281]
            _indexOfInterest[37276]
            _iterator[37277]
          }
          label _breakLabel[37282]
        }
      }
      (37317 'elided on block' 0 tmp[37313])
    }
    (37322 return result[37228])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isPrintable[37330](arg _mt[37335]:_MT[238], arg this[37332]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37347 call _cond_test(37343 call(37339 call . this[37332] c"isEmpty")))
    {
      (37345 return 0)
    }
    unknown result[37355] 1 bool[10]
    (37358 'end of statement')
    {
      const tmp[37434] "const" "temp"
      (37435 'move' tmp[37434](37432 'deref'(37369 'chpl_on_locale_num'(37368 call chpl_buildLocaleID(37363 call . this[37332] c"locale_id") c_sublocid_any[89879]))))
      {
        {
          unknown _indexOfInterest[37397] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37398] "expr temp" "temp"
          (37407 'move' _iterator[37398](37405 call _getIterator(37376 call(37372 call . this[37332] c"codepoints"))))
          Defer
          {
            {
              (37424 call _freeIterator _iterator[37398])
            }
          }
          { scopeless type
            (37413 'move' _indexOfInterest[37397](37410 call iteratorIndex _iterator[37398]))
          }
          ForLoop[37399]
          {
            unknown cp[37417] "index var" "insert auto destroy"
            (37419 'move' cp[37417] _indexOfInterest[37397])
            {
              if(37392 call _cond_test(37381 call !(37380 call codepoint_isPrintable cp[37417])))
              {
                (37385 call = result[37355] 0)
                break _breakLabel[37403] _breakLabel[37403]
              }
            }
            label _continueLabel[37402]
            _indexOfInterest[37397]
            _iterator[37398]
          }
          label _breakLabel[37403]
        }
      }
      (37438 'elided on block' 0 tmp[37434])
    }
    (37443 return result[37355])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isTitle[37451](arg _mt[37456]:_MT[238], arg this[37453]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37468 call _cond_test(37464 call(37460 call . this[37453] c"isEmpty")))
    {
      (37466 return 0)
    }
    unknown result[37476] 1 bool[10]
    (37479 'end of statement')
    {
      const tmp[37631] "const" "temp"
      (37632 'move' tmp[37631](37629 'deref'(37490 'chpl_on_locale_num'(37489 call chpl_buildLocaleID(37484 call . this[37453] c"locale_id") c_sublocid_any[89879]))))
      {
        unknown UN[37492] "param" 0
        unknown UPPER[37496] "param" 1
        unknown LOWER[37500] "param" 2
        (37503 'end of statement')
        unknown last[37506] UN[37492]
        (37509 'end of statement')
        {
          unknown _indexOfInterest[37595] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37596] "expr temp" "temp"
          (37605 'move' _iterator[37596](37603 call _getIterator(37516 call(37512 call . this[37453] c"codepoints"))))
          Defer
          {
            {
              (37622 call _freeIterator _iterator[37596])
            }
          }
          { scopeless type
            (37611 'move' _indexOfInterest[37595](37608 call iteratorIndex _iterator[37596]))
          }
          ForLoop[37597]
          {
            unknown cp[37615] "index var" "insert auto destroy"
            (37617 'move' cp[37615] _indexOfInterest[37595])
            {
              if(37589 call _cond_test(37520 call codepoint_isLower cp[37615]))
              {
                if(37546 call _cond_test(37529 call ||(37523 call == last[37506] UPPER[37496])(37527 call == last[37506] LOWER[37500])))
                {
                  (37533 call = last[37506] LOWER[37500])
                }
                {
                  (37539 call = result[37476] 0)
                  break _breakLabel[37601] _breakLabel[37601]
                }
              }
              {
                if(37585 call _cond_test(37554 call codepoint_isUpper cp[37615]))
                {
                  if(37574 call _cond_test(37557 call == last[37506] UN[37492]))
                  {
                    (37561 call = last[37506] UPPER[37496])
                  }
                  {
                    (37567 call = result[37476] 0)
                    break _breakLabel[37601] _breakLabel[37601]
                  }
                }
                {
                  (37581 call = last[37506] UN[37492])
                }
              }
            }
            label _continueLabel[37600]
            _indexOfInterest[37595]
            _iterator[37596]
          }
          label _breakLabel[37601]
        }
      }
      (37635 'elided on block' 0 tmp[37631])
    }
    (37640 return result[37476])
  }
  { scopeless type
    bool[10]
  }
  function string[26].toLower[37648](arg _mt[37653]:_MT[238], arg this[37650]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown result[37658] this[37650] string[26]
    (37661 'end of statement')
    if(37672 call _cond_test(37668 call(37664 call . result[37658] c"isEmpty")))
    {
      (37670 return result[37658])
    }
    {
      unknown _indexOfInterest[37728] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[37729] "expr temp" "temp"
      (37738 'move' _iterator[37729](37736 call _getIterator(37688 call(37684 call . this[37650] c"_cpIndexLen"))))
      Defer
      {
        {
          (37776 call _freeIterator _iterator[37729])
        }
      }
      { scopeless type
        (37744 'move' _indexOfInterest[37728](37741 call iteratorIndex _iterator[37729]))
      }
      ForLoop[37730]
      {
        (37749 call _check_tuple_var_decl _indexOfInterest[37728] 3)
        unknown cp[37755] "index var" "insert auto destroy"
        (37757 'move' cp[37755](37753 call _indexOfInterest[37728] 0))
        unknown i[37762] "index var" "insert auto destroy"
        (37764 'move' i[37762](37760 call _indexOfInterest[37728] 1))
        unknown nBytes[37769] "index var" "insert auto destroy"
        (37771 'move' nBytes[37769](37767 call _indexOfInterest[37728] 2))
        {
          unknown lowCodepoint[37693](37692 call codepoint_toLower cp[37755])
          (37696 'end of statement')
          if(37724 call _cond_test(37709 call &&(37700 call != lowCodepoint[37693] cp[37755])(37707 call ==(37705 call qio_nbytes_char lowCodepoint[37693]) nBytes[37769])))
          {
            (37721 call qio_encode_char_buf(37717 call +(37713 call . result[37658] c"buff") i[37762]) lowCodepoint[37693])
          }
        }
        label _continueLabel[37733]
        _indexOfInterest[37728]
        _iterator[37729]
      }
      label _breakLabel[37734]
    }
    (37784 return result[37658])
  }
  { scopeless type
    string[26]
  }
  function string[26].toUpper[37792](arg _mt[37797]:_MT[238], arg this[37794]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown result[37802] this[37794] string[26]
    (37805 'end of statement')
    if(37816 call _cond_test(37812 call(37808 call . result[37802] c"isEmpty")))
    {
      (37814 return result[37802])
    }
    {
      unknown _indexOfInterest[37872] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[37873] "expr temp" "temp"
      (37882 'move' _iterator[37873](37880 call _getIterator(37832 call(37828 call . this[37794] c"_cpIndexLen"))))
      Defer
      {
        {
          (37920 call _freeIterator _iterator[37873])
        }
      }
      { scopeless type
        (37888 'move' _indexOfInterest[37872](37885 call iteratorIndex _iterator[37873]))
      }
      ForLoop[37874]
      {
        (37893 call _check_tuple_var_decl _indexOfInterest[37872] 3)
        unknown cp[37899] "index var" "insert auto destroy"
        (37901 'move' cp[37899](37897 call _indexOfInterest[37872] 0))
        unknown i[37906] "index var" "insert auto destroy"
        (37908 'move' i[37906](37904 call _indexOfInterest[37872] 1))
        unknown nBytes[37913] "index var" "insert auto destroy"
        (37915 'move' nBytes[37913](37911 call _indexOfInterest[37872] 2))
        {
          unknown upCodepoint[37837](37836 call codepoint_toUpper cp[37899])
          (37840 'end of statement')
          if(37868 call _cond_test(37853 call &&(37844 call != upCodepoint[37837] cp[37899])(37851 call ==(37849 call qio_nbytes_char upCodepoint[37837]) nBytes[37913])))
          {
            (37865 call qio_encode_char_buf(37861 call +(37857 call . result[37802] c"buff") i[37906]) upCodepoint[37837])
          }
        }
        label _continueLabel[37877]
        _indexOfInterest[37872]
        _iterator[37873]
      }
      label _breakLabel[37878]
    }
    (37928 return result[37802])
  }
  { scopeless type
    string[26]
  }
  function string[26].toTitle[37936](arg _mt[37941]:_MT[238], arg this[37938]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown result[37946] this[37938] string[26]
    (37949 'end of statement')
    if(37960 call _cond_test(37956 call(37952 call . result[37946] c"isEmpty")))
    {
      (37958 return result[37946])
    }
    unknown UN[37966] "param" 0
    unknown LETTER[37970] "param" 1
    (37973 'end of statement')
    unknown last[37975] UN[37966]
    (37978 'end of statement')
    {
      unknown _indexOfInterest[38098] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[38099] "expr temp" "temp"
      (38108 'move' _iterator[38099](38106 call _getIterator(37990 call(37986 call . this[37938] c"_cpIndexLen"))))
      Defer
      {
        {
          (38146 call _freeIterator _iterator[38099])
        }
      }
      { scopeless type
        (38114 'move' _indexOfInterest[38098](38111 call iteratorIndex _iterator[38099]))
      }
      ForLoop[38100]
      {
        (38119 call _check_tuple_var_decl _indexOfInterest[38098] 3)
        unknown cp[38125] "index var" "insert auto destroy"
        (38127 'move' cp[38125](38123 call _indexOfInterest[38098] 0))
        unknown i[38132] "index var" "insert auto destroy"
        (38134 'move' i[38132](38130 call _indexOfInterest[38098] 1))
        unknown nBytes[38139] "index var" "insert auto destroy"
        (38141 'move' nBytes[38139](38137 call _indexOfInterest[38098] 2))
        {
          if(38093 call _cond_test(37994 call codepoint_isAlpha cp[38125]))
          {
            if(38082 call _cond_test(37997 call == last[37975] UN[37966]))
            {
              (38001 call = last[37975] LETTER[37970])
              unknown upCodepoint[38009](38008 call codepoint_toUpper cp[38125])
              (38012 'end of statement')
              if(38039 call _cond_test(38024 call &&(38015 call != upCodepoint[38009] cp[38125])(38022 call ==(38020 call qio_nbytes_char upCodepoint[38009]) nBytes[38139])))
              {
                (38036 call qio_encode_char_buf(38032 call +(38028 call . result[37946] c"buff") i[38132]) upCodepoint[38009])
              }
            }
            {
              unknown lowCodepoint[38047](38046 call codepoint_toLower cp[38125])
              (38050 'end of statement')
              if(38078 call _cond_test(38063 call &&(38054 call != lowCodepoint[38047] cp[38125])(38061 call ==(38059 call qio_nbytes_char lowCodepoint[38047]) nBytes[38139])))
              {
                (38075 call qio_encode_char_buf(38071 call +(38067 call . result[37946] c"buff") i[38132]) lowCodepoint[38047])
              }
            }
          }
          {
            (38089 call = last[37975] UN[37966])
          }
        }
        label _continueLabel[38103]
        _indexOfInterest[38098]
        _iterator[38099]
      }
      label _breakLabel[38104]
    }
    (38154 return result[37946])
  }
  { scopeless type
    string[26]
  }
  function =[38165](ref arg lhs[38162] :
  byteIndex[28170], arg rhs[38168] :
  int(64)[13]) : _unknown[51] "assignop" "no return value for void"
  {
    (38179 call =(38172 call . lhs[38162] c"_bindex")(38177 call _cast int(64)[13] rhs[38168]))
  }
  function =[38191](ref arg lhs[38188] :
  byteIndex[28170], const  ref arg rhs[38194] :
  byteIndex[28170]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (38205 call =(38198 call . lhs[38188] c"_bindex")(38202 call . rhs[38194] c"_bindex"))
  }
  function =[38217](ref arg lhs[38214] :
  codepointIndex[28274], arg rhs[38220] :
  int(64)[13]) : _unknown[51] "assignop" "no return value for void"
  {
    (38231 call =(38224 call . lhs[38214] c"_cpindex")(38229 call _cast int(64)[13] rhs[38220]))
  }
  function =[38243](ref arg lhs[38240] :
  codepointIndex[28274], const  ref arg rhs[38246] :
  codepointIndex[28274]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (38257 call =(38250 call . lhs[38240] c"_cpindex")(38254 call . rhs[38246] c"_cpindex"))
  }
  function =[38269](ref arg lhs[38266] :
  string[26], arg rhs[38272] :
  string[26]) : _unknown[51] "assignop" "no return value for void"
  {
    (38279 call doAssign lhs[38266] rhs[38272])
  }
  function =[38290](ref arg lhs[38287] :
  string[26], arg rhs_c[38293] :
  c_string[19]) : _unknown[51] "assignop" "no return value for void"
  {
    Try
    {
      {
        (38301 call = lhs[38287](38300 call createStringWithNewBuffer rhs_c[38293]))
      }
    }
    Catch
    {
      unknown tmp[354216] "temp"(354219 'current error')
      unknown chpl_anon_error[354222](354227 'new'(354225 call _owned[30](?)(354223 'to non nilable class' tmp[354216])))
      {
        (38327 call halt "Assigning a c_string with non-UTF-8 data")
      }
    }
  }
  function +[38342](arg s0[38339] :
  string[26], arg s1[38345] :
  string[26]) : _unknown[51]
  {
    (38353 return(38352 call doConcat s0[38339] s1[38345]))
  }
  function *[38364](arg s[38361] :
  string[26], arg n[38367] :
  integral[199](?)) : _unknown[51]
  {
    (38375 return(38374 call doMultiply s[38361] n[38367]))
  }
  function ==[38386](param arg s0[38383] :
  string[26], param arg s1[38389] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38400 return(38398 call ==(38396 'string_compare' s0[38383] s1[38389]) 0))
  }
  function !=[38411](param arg s0[38408] :
  string[26], param arg s1[38414] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38425 return(38423 call !=(38421 'string_compare' s0[38408] s1[38414]) 0))
  }
  function <=[38436](param arg a[38433] :
  string[26], param arg b[38439] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38450 return(38448 call <=(38446 'string_compare' a[38433] b[38439]) 0))
  }
  function >=[38461](param arg a[38458] :
  string[26], param arg b[38464] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38475 return(38473 call >=(38471 'string_compare' a[38458] b[38464]) 0))
  }
  function <[38486](param arg a[38483] :
  string[26], param arg b[38489] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38500 return(38498 call <(38496 'string_compare' a[38483] b[38489]) 0))
  }
  function >[38511](param arg a[38508] :
  string[26], param arg b[38514] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38525 return(38523 call >(38521 'string_compare' a[38508] b[38514]) 0))
  }
  function +[38536](param arg a[38533] :
  string[26], param arg b[38539] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38547 return(38546 'string_concat' a[38533] b[38539]))
  }
  function string[26].toByte[38555](arg _mt[38560]:_MT[238], param arg this[38557]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc"
  {
    if(38578 call _cond_test(38571 call !=(38567 call . this[38557] c"numBytes") 1))
    {
      (38576 call compilerError "string.toByte() only accepts single-byte strings")
    }
    (38588 return(38587 'ascii' this[38557]))
  }
  { scopeless type
    (38565 call uint(64)[115] 8)
  }
  function string[26].byte[38600](arg _mt[38605]:_MT[238], param arg this[38602]:string[26] :
  string[26], param arg i[38597] :
  int(64)[13]) param : _unknown[51] "inline" "method" "no doc"
  {
    if(38653 call _cond_test(38625 call ||(38613 call < i[38597] 0)(38623 call > i[38597](38621 call -(38617 call . this[38602] c"numBytes") 1))))
    {
      (38651 call compilerError(38648 call +(38645 call +(38636 call +(38633 call + "index "(38631 call _cast string[26] i[38597])) " out of bounds for string with ")(38643 call _cast string[26](38639 call . this[38602] c"numBytes"))) " bytes"))
    }
    (38664 return(38663 'ascii' this[38602] i[38597]))
  }
  { scopeless type
    (38610 call uint(64)[115] 8)
  }
  function string[26].numBytes[38672](arg _mt[38677]:_MT[238], param arg this[38674]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38683 return(38682 'string_length_bytes' this[38674]))
  }
  function string[26].numCodepoints[38691](arg _mt[38696]:_MT[238], param arg this[38693]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38718 return(38717 'string_length_codepoints' this[38693]))
  }
  function string[26].length[38726](arg _mt[38731]:_MT[238], param arg this[38728]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38739 call compilerWarning(38736 call + "'string.length' is deprecated - " "please use 'string.size' instead"))
    (38746 return(38743 call . this[38728] c"numCodepoints"))
  }
  function string[26].size[38753](arg _mt[38758]:_MT[238], param arg this[38755]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38764 return(38761 call . this[38755] c"numCodepoints"))
  }
  function _string_contains[38775](param arg a[38772] :
  string[26], param arg b[38778] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38786 return(38785 'string_contains' a[38772] b[38778]))
  }
  function +=[38797](ref arg lhs[38794] :
  string[26], const  ref arg rhs[38800] :
  string[26]) : _unknown[51] "assignop" "no return value for void"
  {
    (38808 call doAppend lhs[38794] rhs[38800])
  }
  { scopeless type
    void[4]
  }
  function ==[38820](arg a[38817] :
  string[26], arg b[38823] :
  string[26]) : _unknown[51] "no doc"
  {
    (38832 return(38831 call doEq a[38817] b[38823]))
  }
  { scopeless type
    bool[10]
  }
  function !=[38844](arg a[38841] :
  string[26], arg b[38847] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38858 return(38856 call !(38855 call doEq a[38841] b[38847])))
  }
  { scopeless type
    bool[10]
  }
  function <[38870](arg a[38867] :
  string[26], arg b[38873] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38882 return(38881 call doLessThan a[38867] b[38873]))
  }
  { scopeless type
    bool[10]
  }
  function >[38894](arg a[38891] :
  string[26], arg b[38897] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38906 return(38905 call doGreaterThan a[38891] b[38897]))
  }
  { scopeless type
    bool[10]
  }
  function <=[38918](arg a[38915] :
  string[26], arg b[38921] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38930 return(38929 call doLessThanOrEq a[38915] b[38921]))
  }
  { scopeless type
    bool[10]
  }
  function >=[38942](arg a[38939] :
  string[26], arg b[38945] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38954 return(38953 call doGreaterThanOrEq a[38939] b[38945]))
  }
  { scopeless type
    bool[10]
  }
  (38978 'require' "wctype.h")
  unknown wint_t[38984] "extern" "no doc" "type variable"(38983 call int(64)[13] 32)
  function codepoint_isUpper[38996](arg c[38993] :
  (38992 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswupper[39005](arg wc[39002] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20549]
    }
    (39022 return(39020 call !=(39018 call iswupper(39015 call _cast wint_t[38984] c[38993])) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isLower[39036](arg c[39033] :
  (39032 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswlower[39045](arg wc[39042] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20549]
    }
    (39062 return(39060 call !=(39058 call iswlower(39055 call _cast wint_t[38984] c[39033])) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isAlpha[39076](arg c[39073] :
  (39072 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswalpha[39085](arg wc[39082] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20549]
    }
    (39102 return(39100 call !=(39098 call iswalpha(39095 call _cast wint_t[38984] c[39073])) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isDigit[39116](arg c[39113] :
  (39112 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswdigit[39125](arg wc[39122] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20549]
    }
    (39139 return(39137 call !=(39135 call iswdigit c[39113]) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isWhitespace[39153](arg c[39150] :
  (39149 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswspace[39162](arg wc[39159] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20549]
    }
    (39176 return(39174 call !=(39172 call iswspace c[39150]) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isPrintable[39190](arg c[39187] :
  (39186 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswprint[39199](arg wc[39196] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20549]
    }
    (39213 return(39211 call !=(39209 call iswprint c[39187]) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_toLower[39227](arg c[39224] :
  (39223 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function towlower[39239](arg wc[39236] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      wint_t[38984]
    }
    (39259 return(39257 call _cast(39256 call int(64)[13] 32)(39252 call towlower(39249 call _cast wint_t[38984] c[39224]))))
  }
  { scopeless type
    (39232 call int(64)[13] 32)
  }
  function codepoint_toUpper[39273](arg c[39270] :
  (39269 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function towupper[39285](arg wc[39282] :
    wint_t[38984]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      wint_t[38984]
    }
    (39305 return(39303 call _cast(39302 call int(64)[13] 32)(39298 call towupper(39295 call _cast wint_t[38984] c[39270]))))
  }
  { scopeless type
    (39278 call int(64)[13] 32)
  }
  function codepointToString[39319](arg i[39316] :
  (39315 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    const mblength[39328] "const"(39326 call _cast int(64)[13](39324 call qio_nbytes_char i[39316]))
    (39331 'end of statement')
    unknown tmp[39345] "temp"(39344 call bufferAlloc(39341 call + mblength[39328] 1))
    (39352 call _check_tuple_var_decl tmp[39345] 2)
    unknown buffer[39333](39346 call tmp[39345] 0)
    unknown mbsize[39335](39349 call tmp[39345] 1)
    (39357 'end of statement')
    (39362 call qio_encode_char_buf buffer[39333] i[39316])
    (39369 call =(39367 call buffer[39333] mblength[39328]) 0)
    Try!
    {
      {
        (39378 return(39377 call createStringWithOwnedBuffer buffer[39333] mblength[39328] mbsize[39335]))
      }
    }
  }
  function _cast[39392](arg t[39389] :
  bufferType[172493], arg cs[39395] :
  c_string[19]) : _unknown[51] "inline" "no doc"
  {
    (39403 return(39402 'cast' t[39389] cs[39395]))
  }
  function _cast[39414](arg t[39411] :
  string[26], arg cs[39417] :
  c_string[19]) : _unknown[51] "no doc"
  {
    Try
    {
      {
        (39424 return(39423 call createStringWithNewBuffer cs[39417]))
      }
    }
    Catch
    {
      unknown tmp[354230] "temp"(354233 'current error')
      unknown chpl_anon_error[354236](354241 'new'(354239 call _owned[30](?)(354237 'to non nilable class' tmp[354230])))
      {
        (39447 call halt "Casting a non-UTF-8 c_string to string")
      }
    }
  }
  function _cast[39462](arg t[39459] :
  int(64)[13], arg cpi[39465] :
  byteIndex[28170]) : _unknown[51] "inline" "no doc"
  {
    (39472 return(39469 call . cpi[39465] c"_bindex"))
  }
  function _cast[39483](arg t[39480] :
  byteIndex[28170], arg i[39486] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    unknown cpi[39490] byteIndex[28170]
    (39493 'end of statement')
    (39500 call =(39496 call . cpi[39490] c"_bindex") i[39486])
    (39504 return cpi[39490])
  }
  function _cast[39514](arg t[39511] :
  int(64)[13], arg cpi[39517] :
  codepointIndex[28274]) : _unknown[51] "inline" "no doc"
  {
    (39524 return(39521 call . cpi[39517] c"_cpindex"))
  }
  function _cast[39535](arg t[39532] :
  codepointIndex[28274], arg i[39538] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    unknown cpi[39542] codepointIndex[28274]
    (39545 'end of statement')
    (39552 call =(39548 call . cpi[39542] c"_cpindex") i[39538])
    (39556 return cpi[39542])
  }
  function chpl__defaultHash[39566](arg x[39563] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (39573 return(39572 call getHash x[39563]))
  }
  { scopeless type
    uint(64)[115]
  }
  (355066 'used modules list'(27896 'use' ChapelStandard[20264])(27900 'use' SysCTypes[20940])(27903 'use' ByteBufferHelpers[172471])(27906 'use' BytesStringCommon[173638])(27909 'use' SysBasic[223433])(27912 'use' CString[21682])(27915 'use' StringCasts[184424])(27919 'use' BytesStringCommon[173638] 'only' encodePolicy)(27922 'use' NVStringFactory[30564]))
}