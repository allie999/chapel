AST dump for String after pass scopeResolve.
Module use list: ChapelStandard SysCTypes ByteBufferHelpers BytesStringCommon SysBasic CString StringCasts NVStringFactory 

{
  function qio_decode_char_buf[27936](ref arg chr[27933] :
  (27932 call int(64)[13] 32), ref arg nbytes[27939] :
  c_int[20552], arg buf[27943] :
  c_string[19], arg buflen[27947] :
  ssize_t[20650]) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    syserr[223603]
  }
  function qio_decode_char_buf_esc[27963](ref arg chr[27960] :
  (27959 call int(64)[13] 32), ref arg nbytes[27966] :
  c_int[20552], arg buf[27970] :
  c_string[19], arg buflen[27974] :
  ssize_t[20650]) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    syserr[223603]
  }
  function qio_encode_char_buf[27987](arg dst[27984] :
  c_void_ptr[149], arg chr[27993] :
  (27992 call int(64)[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    syserr[223603]
  }
  function qio_nbytes_char[28009](arg chr[28006] :
  (28005 call int(64)[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "private" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    c_int[20552]
  }
  const CHPL_SHORT_STRING_SIZE[28016] "const" "extern" "no doc" c_int[20552]
  (28019 'end of statement')
  type chpl__inPlaceBuffer[28022]
  {
  }
  function chpl__getInPlaceBufferData[28033](const  ref arg data[28030] :
  chpl__inPlaceBuffer[28022]) : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    bufferType[172527]
  }
  function chpl__getInPlaceBufferDataForWrite[28045](ref arg data[28042] :
  chpl__inPlaceBuffer[28022]) : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free" "no return value for void"
  {
  }
  { scopeless type
    bufferType[172527]
  }
  unknown debugStrings[28052] "config" "param" "private" 0
  (28055 'end of statement')
  type __serializeHelper[28089] unknown buffLen[28058] int(64)[13] unknown buff[28063] bufferType[172527] unknown size[28068] int(64)[13] unknown locale_id[28074](28073 'typeof' chpl_nodeID[208207]) unknown shortData[28079] chpl__inPlaceBuffer[28022] unknown cachedNumCodepoints[28084] int(64)[13]
  function byteIndex[28173].init[28100](arg _mt[28177]:_MT[238], arg this[28175]:byteIndex[28173]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
  }
  function byteIndex[28173].init[28111](arg _mt[28181]:_MT[238], arg this[28179]:byteIndex[28173], arg i[28108] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28115 call =(369340 call . this[28179] c"_bindex") i[28108])
  }
  function byteIndex[28173].init=[28127](arg _mt[28185]:_MT[238], arg this[28183]:byteIndex[28173], arg other[28124] :
  byteIndex[28173]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28136 call =(369347 call . this[28183] c"_bindex")(28133 call . other[28124] c"_bindex"))
  }
  function byteIndex[28173].init=[28148](arg _mt[28189]:_MT[238], arg this[28187]:byteIndex[28173], arg i[28145] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28152 call =(369352 call . this[28187] c"_bindex") i[28145])
  }
  function byteIndex[28173].writeThis[28162](arg _mt[28193]:_MT[238], arg this[28191]:byteIndex[28173], arg f[28160]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (28166 call <~> f[28160](369359 call . this[28191] c"_bindex"))
  }
  type byteIndex[28173] unknown _bindex[28094] "no doc" int(64)[13]
  function codepointIndex[28277].init[28204](arg _mt[28281]:_MT[238], arg this[28279]:codepointIndex[28277]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
  }
  function codepointIndex[28277].init[28215](arg _mt[28285]:_MT[238], arg this[28283]:codepointIndex[28277], arg i[28212] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28219 call =(369364 call . this[28283] c"_cpindex") i[28212])
  }
  function codepointIndex[28277].init=[28231](arg _mt[28289]:_MT[238], arg this[28287]:codepointIndex[28277], arg i[28228] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28235 call =(369370 call . this[28287] c"_cpindex") i[28228])
  }
  function codepointIndex[28277].init=[28247](arg _mt[28293]:_MT[238], arg this[28291]:codepointIndex[28277], arg cpi[28244] :
  codepointIndex[28277]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (28256 call =(369377 call . this[28291] c"_cpindex")(28253 call . cpi[28244] c"_cpindex"))
  }
  function codepointIndex[28277].writeThis[28266](arg _mt[28297]:_MT[238], arg this[28295]:codepointIndex[28277], arg f[28264]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (28270 call <~> f[28264](369383 call . this[28295] c"_cpindex"))
  }
  type codepointIndex[28277] unknown _cpindex[28198] "no doc" int(64)[13]
  function chpl_build_bounded_range[28307](arg low[28304] :
  unknown t[28302], arg high[28310] :
  t[28302]) : _unknown[51] "no doc"
  {
    (28332 return(28323 'new'(28331 call range[64319](?) t[28302](_low = low[28304])(_high = high[28310]))))
  }
  where {
    (28321 call ||(28315 call == t[28302] byteIndex[28173])(28319 call == t[28302] codepointIndex[28277]))
  }
  function chpl_build_low_bounded_range[28345](arg low[28342] :
  unknown t[28340]) : _unknown[51] "no doc"
  {
    (28370 return(28357 'new'(28369 call range[64319](?) t[28340] boundedLow[64210](_low = low[28342]))))
  }
  where {
    (28355 call ||(28349 call == t[28340] byteIndex[28173])(28353 call == t[28340] codepointIndex[28277]))
  }
  function chpl_build_high_bounded_range[28383](arg high[28380] :
  unknown t[28378]) : _unknown[51] "no doc"
  {
    (28408 return(28395 'new'(28407 call range[64319](?) t[28378] boundedHigh[64212](_high = high[28380]))))
  }
  where {
    (28393 call ||(28387 call == t[28378] byteIndex[28173])(28391 call == t[28378] codepointIndex[28277]))
  }
  function chpl__rangeStrideType[28420](arg idxType[28417] :
  byteIndex[28173]) type : _unknown[51] "no doc"
  {
    (28423 return int(64)[13])
  }
  function chpl__rangeStrideType[28434](arg idxType[28431] :
  codepointIndex[28277]) type : _unknown[51] "no doc"
  {
    (28437 return int(64)[13])
  }
  function chpl__rangeUnsignedType[28448](arg idxType[28445] :
  byteIndex[28173]) type : _unknown[51] "no doc"
  {
    (28451 return uint(64)[115])
  }
  function chpl__rangeUnsignedType[28462](arg idxType[28459] :
  codepointIndex[28277]) type : _unknown[51] "no doc"
  {
    (28465 return uint(64)[115])
  }
  function chpl__idxToInt[28477](arg i[28474] :
  unknown t[28472]) : _unknown[51] "inline" "no doc"
  {
    (28493 return(28491 call _cast int(64)[13] i[28474]))
  }
  where {
    (28487 call ||(28481 call == t[28472] byteIndex[28173])(28485 call == t[28472] codepointIndex[28277]))
  }
  function chpl__intToIdx[28505](arg idxType[28502] :
  byteIndex[28173], arg i[28508] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28515 return(28513 call _cast byteIndex[28173] i[28508]))
  }
  function chpl__intToIdx[28526](arg idxType[28523] :
  codepointIndex[28277], arg i[28529] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28536 return(28534 call _cast codepointIndex[28277] i[28529]))
  }
  function chpl__idxTypeToIntIdxType[28547](arg idxType[28544] :
  byteIndex[28173]) type : _unknown[51] "no doc"
  {
    (28550 return int(64)[13])
  }
  function chpl__idxTypeToIntIdxType[28561](arg idxType[28558] :
  codepointIndex[28277]) type : _unknown[51] "no doc"
  {
    (28564 return int(64)[13])
  }
  function >[28575](arg x[28572] :
  byteIndex[28173], arg y[28578] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (28591 return(28589 call >(28583 call _cast int(64)[13] x[28572])(28587 call _cast int(64)[13] y[28578])))
  }
  function >[28602](arg x[28599] :
  codepointIndex[28277], arg y[28605] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (28618 return(28616 call >(28610 call _cast int(64)[13] x[28599])(28614 call _cast int(64)[13] y[28605])))
  }
  function >[28629](arg x[28626] :
  byteIndex[28173], arg y[28632] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28642 return(28640 call >(28637 call _cast int(64)[13] x[28626]) y[28632]))
  }
  function >[28653](arg x[28650] :
  codepointIndex[28277], arg y[28656] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28666 return(28664 call >(28661 call _cast int(64)[13] x[28650]) y[28656]))
  }
  function >[28677](arg x[28674] :
  int(64)[13], arg y[28680] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (28690 return(28688 call > x[28674](28686 call _cast int(64)[13] y[28680])))
  }
  function >[28701](arg x[28698] :
  int(64)[13], arg y[28704] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (28714 return(28712 call > x[28698](28710 call _cast int(64)[13] y[28704])))
  }
  function +[28725](arg x[28722] :
  byteIndex[28173], arg y[28728] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28741 return(28739 call _cast byteIndex[28173](28736 call +(28733 call _cast int(64)[13] x[28722]) y[28728])))
  }
  function +[28752](arg x[28749] :
  codepointIndex[28277], arg y[28755] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28768 return(28766 call _cast codepointIndex[28277](28763 call +(28760 call _cast int(64)[13] x[28749]) y[28755])))
  }
  function +[28779](arg x[28776] :
  int(64)[13], arg y[28782] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (28795 return(28793 call _cast byteIndex[28173](28790 call + x[28776](28788 call _cast int(64)[13] y[28782]))))
  }
  function +[28806](arg x[28803] :
  int(64)[13], arg y[28809] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (28822 return(28820 call _cast codepointIndex[28277](28817 call + x[28803](28815 call _cast int(64)[13] y[28809]))))
  }
  function +[28833](arg x[28830] :
  bufferType[172527], arg y[28836] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (28846 return(28844 call + x[28830](28842 call _cast int(64)[13] y[28836])))
  }
  function -[28857](arg x[28854] :
  byteIndex[28173], arg y[28860] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28873 return(28871 call _cast byteIndex[28173](28868 call -(28865 call _cast int(64)[13] x[28854]) y[28860])))
  }
  function -[28884](arg x[28881] :
  codepointIndex[28277], arg y[28887] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (28900 return(28898 call _cast codepointIndex[28277](28895 call -(28892 call _cast int(64)[13] x[28881]) y[28887])))
  }
  function -[28911](arg x[28908] :
  byteIndex[28173], arg y[28914] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (28927 return(28925 call -(28919 call _cast int(64)[13] x[28908])(28923 call _cast int(64)[13] y[28914])))
  }
  function -[28938](arg x[28935] :
  codepointIndex[28277], arg y[28941] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (28954 return(28952 call -(28946 call _cast int(64)[13] x[28935])(28950 call _cast int(64)[13] y[28941])))
  }
  function <[28965](arg x[28962] :
  byteIndex[28173], arg y[28968] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (28981 return(28979 call <(28973 call _cast int(64)[13] x[28962])(28977 call _cast int(64)[13] y[28968])))
  }
  function <[28992](arg x[28989] :
  codepointIndex[28277], arg y[28995] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29008 return(29006 call <(29000 call _cast int(64)[13] x[28989])(29004 call _cast int(64)[13] y[28995])))
  }
  function <[29019](arg x[29016] :
  byteIndex[28173], arg y[29022] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29032 return(29030 call <(29027 call _cast int(64)[13] x[29016]) y[29022]))
  }
  function <[29043](arg x[29040] :
  codepointIndex[28277], arg y[29046] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29056 return(29054 call <(29051 call _cast int(64)[13] x[29040]) y[29046]))
  }
  function <[29067](arg x[29064] :
  int(64)[13], arg y[29070] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29080 return(29078 call < x[29064](29076 call _cast int(64)[13] y[29070])))
  }
  function <[29091](arg x[29088] :
  int(64)[13], arg y[29094] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29104 return(29102 call < x[29088](29100 call _cast int(64)[13] y[29094])))
  }
  function >=[29115](arg x[29112] :
  byteIndex[28173], arg y[29118] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29131 return(29129 call >=(29123 call _cast int(64)[13] x[29112])(29127 call _cast int(64)[13] y[29118])))
  }
  function >=[29142](arg x[29139] :
  codepointIndex[28277], arg y[29145] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29158 return(29156 call >=(29150 call _cast int(64)[13] x[29139])(29154 call _cast int(64)[13] y[29145])))
  }
  function >=[29169](arg x[29166] :
  byteIndex[28173], arg y[29172] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29182 return(29180 call >=(29177 call _cast int(64)[13] x[29166]) y[29172]))
  }
  function >=[29193](arg x[29190] :
  codepointIndex[28277], arg y[29196] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29206 return(29204 call >=(29201 call _cast int(64)[13] x[29190]) y[29196]))
  }
  function >=[29217](arg x[29214] :
  int(64)[13], arg y[29220] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29230 return(29228 call >= x[29214](29226 call _cast int(64)[13] y[29220])))
  }
  function >=[29241](arg x[29238] :
  int(64)[13], arg y[29244] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29254 return(29252 call >= x[29238](29250 call _cast int(64)[13] y[29244])))
  }
  function <=[29265](arg x[29262] :
  byteIndex[28173], arg y[29268] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29281 return(29279 call <=(29273 call _cast int(64)[13] x[29262])(29277 call _cast int(64)[13] y[29268])))
  }
  function <=[29292](arg x[29289] :
  codepointIndex[28277], arg y[29295] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29308 return(29306 call <=(29300 call _cast int(64)[13] x[29289])(29304 call _cast int(64)[13] y[29295])))
  }
  function <=[29319](arg x[29316] :
  byteIndex[28173], arg y[29322] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29332 return(29330 call <=(29327 call _cast int(64)[13] x[29316]) y[29322]))
  }
  function <=[29343](arg x[29340] :
  codepointIndex[28277], arg y[29346] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29356 return(29354 call <=(29351 call _cast int(64)[13] x[29340]) y[29346]))
  }
  function <=[29367](arg x[29364] :
  int(64)[13], arg y[29370] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29380 return(29378 call <= x[29364](29376 call _cast int(64)[13] y[29370])))
  }
  function <=[29391](arg x[29388] :
  int(64)[13], arg y[29394] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29404 return(29402 call <= x[29388](29400 call _cast int(64)[13] y[29394])))
  }
  function ==[29415](arg x[29412] :
  byteIndex[28173], arg y[29418] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29431 return(29429 call ==(29423 call _cast int(64)[13] x[29412])(29427 call _cast int(64)[13] y[29418])))
  }
  function ==[29442](arg x[29439] :
  codepointIndex[28277], arg y[29445] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29458 return(29456 call ==(29450 call _cast int(64)[13] x[29439])(29454 call _cast int(64)[13] y[29445])))
  }
  function ==[29469](arg x[29466] :
  byteIndex[28173], arg y[29472] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29482 return(29480 call ==(29477 call _cast int(64)[13] x[29466]) y[29472]))
  }
  function ==[29493](arg x[29490] :
  codepointIndex[28277], arg y[29496] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29506 return(29504 call ==(29501 call _cast int(64)[13] x[29490]) y[29496]))
  }
  function ==[29517](arg x[29514] :
  int(64)[13], arg y[29520] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29530 return(29528 call == x[29514](29526 call _cast int(64)[13] y[29520])))
  }
  function ==[29541](arg x[29538] :
  int(64)[13], arg y[29544] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29554 return(29552 call == x[29538](29550 call _cast int(64)[13] y[29544])))
  }
  function !=[29565](arg x[29562] :
  byteIndex[28173], arg y[29568] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29581 return(29579 call !=(29573 call _cast int(64)[13] x[29562])(29577 call _cast int(64)[13] y[29568])))
  }
  function !=[29592](arg x[29589] :
  codepointIndex[28277], arg y[29595] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29608 return(29606 call !=(29600 call _cast int(64)[13] x[29589])(29604 call _cast int(64)[13] y[29595])))
  }
  function !=[29619](arg x[29616] :
  byteIndex[28173], arg y[29622] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29632 return(29630 call !=(29627 call _cast int(64)[13] x[29616]) y[29622]))
  }
  function !=[29643](arg x[29640] :
  codepointIndex[28277], arg y[29646] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    (29656 return(29654 call !=(29651 call _cast int(64)[13] x[29640]) y[29646]))
  }
  function !=[29667](arg x[29664] :
  int(64)[13], arg y[29670] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29680 return(29678 call != x[29664](29676 call _cast int(64)[13] y[29670])))
  }
  function !=[29691](arg x[29688] :
  int(64)[13], arg y[29694] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29704 return(29702 call != x[29688](29700 call _cast int(64)[13] y[29694])))
  }
  function ![29715](arg x[29712] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29723 return(29721 call !(29719 call _cast int(64)[13] x[29712])))
  }
  function ![29734](arg x[29731] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29742 return(29740 call !(29738 call _cast int(64)[13] x[29731])))
  }
  function _cond_test[29753](arg x[29750] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (29759 return(29757 call != x[29750] 0))
  }
  function _cond_test[29770](arg x[29767] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (29776 return(29774 call != x[29767] 0))
  }
  function validateEncoding[29785](arg buf[29783]:_any[178](?), arg len[29787]:_any[178](?)) : _unknown[51] throws "private"
  {
    function chpl_enc_validate_buf[29794](arg buf[29792]:_any[178](?), arg len[29796]:_any[178](?), ref arg numCodepoints[29798]:_any[178](?)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      c_int[20552]
    }
    unknown numCodepoints[29806] int(64)[13]
    (29809 'end of statement')
    if(29826 call _cond_test(29817 call !=(29815 call chpl_enc_validate_buf buf[29783] len[29787] numCodepoints[29806]) 0))
    {
      (29823 'throw'(29819 'new'(29822 call DecodeError[368787](?))))
    }
    (29831 return numCodepoints[29806])
  }
  { scopeless type
    int(64)[13]
  }
  function stringFactoryArgDepr[29838]() : _unknown[51] "private" "no return value for void"
  {
    (29862 call compilerWarning "createStringWith* with formal argument `s` is deprecated. " "Use argument name `x` instead")
  }
  function joinArgDepr[29869]() : _unknown[51] "private" "no return value for void"
  {
    (29891 call compilerWarning "string.join with formal argument `S` is deprecated. " "Use argument name `x` instead")
  }
  function createStringWithBorrowedBuffer[29902](arg x[29899] :
  string[26]) : _unknown[51] "inline"
  {
    unknown ret[29905] string[26]
    (29908 'end of statement')
    (29920 call =(29913 call . ret[29905] c"cachedNumCodepoints")(29917 call . x[29899] c"cachedNumCodepoints"))
    (29927 call initWithBorrowedBuffer ret[29905] x[29899])
    (29930 return ret[29905])
  }
  function createStringWithBorrowedBuffer[29940](arg s[29937] :
  string[26]) : _unknown[51] "inline" "last resort" "no doc"
  {
    (29944 call stringFactoryArgDepr)
    (29952 return(29951 call createStringWithBorrowedBuffer(x = s[29937])))
  }
  function createStringWithBorrowedBuffer[29962](arg x[29959] :
  c_string[19], arg length[29968] =
  (29965 call . x[29959] c"size")) : _unknown[51] throws "inline"
  {
    (29991 return(29990 call createStringWithBorrowedBuffer(29980 call _cast(29979 call c_ptr[205100](?)(29977 call uint(64)[115] 8)) x[29959])(length = length[29968])(size =(29987 call + length[29968] 1))))
  }
  function createStringWithBorrowedBuffer[30002](arg s[29999] :
  c_string[19], arg length[30008] =
  (30005 call . s[29999] c"size")) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30013 call stringFactoryArgDepr)
    (30022 return(30021 call createStringWithBorrowedBuffer(x = s[29999]) length[30008]))
  }
  function chpl_createStringWithLiteral[30032](arg x[30029] :
  c_string[19], arg length[30035] :
  int(64)[13], arg numCodepoints[30039] :
  int(64)[13]) : _unknown[51] "no doc"
  {
    (30064 return(30063 call chpl_createStringWithBorrowedBufferNV(30051 call _cast(30050 call c_ptr[205100](?)(30048 call uint(64)[115] 8)) x[30029])(length = length[30035])(size =(30058 call + length[30035] 1))(numCodepoints = numCodepoints[30039])))
  }
  function createStringWithBorrowedBuffer[30075](arg x[30072] :
  bufferType[172527], arg length[30078] :
  int(64)[13], arg size[30082] :
  int(64)[13]) : _unknown[51] throws "inline"
  {
    unknown ret[30086] string[26]
    (30089 'end of statement')
    (30100 call =(30092 call . ret[30086] c"cachedNumCodepoints")(30099 call validateEncoding x[30072] length[30078]))
    (30109 call initWithBorrowedBuffer ret[30086] x[30072] length[30078] size[30082])
    (30112 return ret[30086])
  }
  function createStringWithBorrowedBuffer[30122](arg s[30119] :
  bufferType[172527], arg length[30125] :
  int(64)[13], arg size[30129] :
  int(64)[13]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30134 call stringFactoryArgDepr)
    (30144 return(30143 call createStringWithBorrowedBuffer(x = s[30119]) length[30125] size[30129]))
  }
  function createStringWithOwnedBuffer[30154](arg x[30151] :
  string[26]) : _unknown[51] "inline" "no doc" "no return value for void"
  {
    (30177 call compilerError "A Chapel string cannot be passed to createStringWithOwnedBuffer")
  }
  function createStringWithOwnedBuffer[30188](arg s[30185] :
  string[26]) : _unknown[51] "inline" "last resort" "no doc"
  {
    (30192 call stringFactoryArgDepr)
    (30200 return(30199 call createStringWithOwnedBuffer(x = s[30185])))
  }
  function createStringWithOwnedBuffer[30210](arg x[30207] :
  c_string[19], arg length[30216] =
  (30213 call . x[30207] c"size")) : _unknown[51] throws "inline"
  {
    (30233 return(30232 call createStringWithOwnedBuffer(30222 call _cast bufferType[172527] x[30207])(length = length[30216])(size =(30229 call + length[30216] 1))))
  }
  function createStringWithOwnedBuffer[30244](arg s[30241] :
  c_string[19], arg length[30250] =
  (30247 call . s[30241] c"size")) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30255 call stringFactoryArgDepr)
    (30264 return(30263 call createStringWithOwnedBuffer(x = s[30241]) length[30250]))
  }
  function createStringWithOwnedBuffer[30274](arg x[30271] :
  bufferType[172527], arg length[30277] :
  int(64)[13], arg size[30281] :
  int(64)[13]) : _unknown[51] throws "inline"
  {
    unknown ret[30285] string[26]
    (30288 'end of statement')
    (30299 call =(30291 call . ret[30285] c"cachedNumCodepoints")(30298 call validateEncoding x[30271] length[30277]))
    (30308 call initWithOwnedBuffer ret[30285] x[30271] length[30277] size[30281])
    (30311 return ret[30285])
  }
  function createStringWithOwnedBuffer[30321](arg s[30318] :
  bufferType[172527], arg length[30324] :
  int(64)[13], arg size[30328] :
  int(64)[13]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30333 call stringFactoryArgDepr)
    (30343 return(30342 call createStringWithOwnedBuffer(x = s[30318]) length[30324] size[30328]))
  }
  function createStringWithNewBuffer[30353](arg x[30350] :
  string[26]) : _unknown[51] "inline"
  {
    unknown ret[30356] string[26]
    (30359 'end of statement')
    (30371 call =(30362 call . ret[30356] c"cachedNumCodepoints")(30368 call . x[30350] c"numCodepoints"))
    (30378 call initWithNewBuffer ret[30356] x[30350])
    (30381 return ret[30356])
  }
  function createStringWithNewBuffer[30391](arg s[30388] :
  string[26]) : _unknown[51] "inline" "last resort" "no doc"
  {
    (30395 call stringFactoryArgDepr)
    (30403 return(30402 call createStringWithNewBuffer(x = s[30388])))
  }
  function createStringWithNewBuffer[30413](arg x[30410] :
  c_string[19], arg length[30419] =
  (30416 call . x[30410] c"size"), arg policy[30426] =
  strict[173692]) : _unknown[51] throws "inline"
  {
    (30444 return(30443 call createStringWithNewBuffer(30432 call _cast bufferType[172527] x[30410])(length = length[30419])(size =(30439 call + length[30419] 1)) policy[30426]))
  }
  function createStringWithNewBuffer[30455](arg s[30452] :
  c_string[19], arg length[30461] =
  (30458 call . s[30452] c"size"), arg policy[30468] =
  strict[173692]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30473 call stringFactoryArgDepr)
    (30483 return(30482 call createStringWithNewBuffer(x = s[30452]) length[30461] policy[30468]))
  }
  function createStringWithNewBuffer[30493](arg x[30490] :
  bufferType[172527], arg length[30496] :
  int(64)[13], arg size[30503] =
  (30501 call + length[30496] 1), arg policy[30510] =
  strict[173692]) : _unknown[51] throws "inline"
  {
    (30519 return(30518 call decodeByteBuffer x[30490] length[30496] policy[30510]))
  }
  function createStringWithNewBuffer[30530](arg s[30527] :
  bufferType[172527], arg length[30533] :
  int(64)[13], arg size[30540] =
  (30538 call + length[30533] 1), arg policy[30547] =
  strict[173692]) : _unknown[51] throws "inline" "last resort" "no doc"
  {
    (30552 call stringFactoryArgDepr)
    (30563 return(30562 call createStringWithNewBuffer(x = s[30527]) length[30533] size[30540] policy[30547]))
  }
  def module NVStringFactory[30567]  
  function string[26].init[30763](arg _mt[32630]:_MT[238], arg this[32628]:string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function string[26].init=[30774](arg _mt[32634]:_MT[238], arg this[32632]:string[26], arg s[30771] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (30781 call(30777 call . this[32632] c"complete"))
    (30788 call initWithNewBuffer this[32632] s[30771])
  }
  function string[26].init=[30798](arg _mt[32638]:_MT[238], arg this[32636]:string[26], arg cs[30795] :
  c_string[19]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (30805 call(30801 call . this[32636] c"complete"))
    (30828 call initWithNewBuffer this[32636](30813 call _cast bufferType[172527] cs[30795])(length =(30816 call . cs[30795] c"size"))(size =(30825 call +(30821 call . cs[30795] c"size") 1)))
  }
  function string[26].deinit[30834](arg _mt[32642]:_MT[238], ref arg this[32640]:string[26]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(30877 call _cond_test(30844 call &&(369703 call . this[32640] c"isOwned")(30842 call !=(30838 call . this[32640] c"buff") nil[44])))
    {
      const tmp[30868] "const" "temp"
      (30870 'move' tmp[30868](30866 'deref'(30856 'chpl_on_locale_num'(30855 call chpl_buildLocaleID(30850 call . this[32640] c"locale_id") c_sublocid_any[89878]))))
      {
        {
          (30863 call chpl_here_free(30859 call . this[32640] c"buff"))
        }
        (30873 'on block' 0 tmp[30868])
      }
    }
  }
  function string[26].chpl__serialize[30886](arg _mt[32646]:_MT[238], arg this[32644]:string[26]) : _unknown[51] "method" "primary method"
  {
    unknown data[30889] chpl__inPlaceBuffer[28022]
    (30892 'end of statement')
    if(30910 call _cond_test(30896 call <=(369710 call . this[32644] c"buffLen") CHPL_SHORT_STRING_SIZE[28016]))
    {
      (30907 call chpl_string_comm_get(30902 call chpl__getInPlaceBufferDataForWrite data[30889])(369717 call . this[32644] c"locale_id")(369722 call . this[32644] c"buff")(369727 call . this[32644] c"buffLen"))
    }
    (30924 return(30914 'new'(30923 call __serializeHelper[28089](369733 call . this[32644] c"buffLen")(369738 call . this[32644] c"buff")(369743 call . this[32644] c"buffSize")(369748 call . this[32644] c"locale_id") data[30889](369754 call . this[32644] c"cachedNumCodepoints"))))
  }
  function string[26].chpl__deserialize[30932](arg _mt[32650]:_MT[238], arg this[32648]:string[26], arg data[30930]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(31040 call _cond_test(30939 call !=(30935 call . data[30930] c"locale_id") chpl_nodeID[208207]))
    {
      if(31013 call _cond_test(30946 call <=(30942 call . data[30930] c"buffLen") CHPL_SHORT_STRING_SIZE[28016]))
      {
        (30972 return(30971 call chpl_createStringWithNewBufferNV(30957 call chpl__getInPlaceBufferData(30953 call . data[30930] c"shortData"))(30960 call . data[30930] c"buffLen")(30964 call . data[30930] c"size")(30968 call . data[30930] c"cachedNumCodepoints")))
      }
      {
        unknown localBuff[30990](30989 call bufferCopyRemote(30977 call . data[30930] c"locale_id")(30982 call . data[30930] c"buff")(30986 call . data[30930] c"buffLen"))
        (30993 'end of statement')
        (31011 return(31010 call chpl_createStringWithOwnedBufferNV localBuff[30990](30999 call . data[30930] c"buffLen")(31003 call . data[30930] c"size")(31007 call . data[30930] c"cachedNumCodepoints")))
      }
    }
    {
      (31037 return(31036 call chpl_createStringWithBorrowedBufferNV(31020 call . data[30930] c"buff")(31025 call . data[30930] c"buffLen")(31029 call . data[30930] c"size")(31033 call . data[30930] c"cachedNumCodepoints")))
    }
  }
  function string[26].isASCII[31049](arg _mt[32654]:_MT[238], arg this[32652]:string[26]) : _unknown[51] "inline" "method" "primary method"
  {
    (31061 return(31059 call ==(31052 call . this[32652] c"numCodepoints")(31056 call . this[32652] c"numBytes")))
  }
  function string[26].byteIndices[31068](arg _mt[32658]:_MT[238], arg this[32656]:string[26]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (31080 return(31078 call chpl_build_bounded_range 0(31076 call -(31072 call . this[32656] c"numBytes") 1)))
  }
  function string[26].c_str[31087](arg _mt[32662]:_MT[238], param arg this[32660]:string[26]) param : _unknown[51] "inline" "method" "primary method"
  {
    (31094 return(31092 call _cast c_string[19] this[32660]))
  }
  { scopeless type
    c_string[19]
  }
  function string[26]._cpIndexLen[31109](arg _mt[32666]:_MT[238], arg this[32664]:string[26], arg start[31106] =
  (31104 call _cast byteIndex[28173] 0)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown localThis[31118](31117 call(31113 call . this[32664] c"localize")) string[26]
    (31121 'end of statement')
    if(31439 call _cond_test(31130 call(31126 call . localThis[31118] c"isASCII")))
    {
      {
        unknown _indexOfInterest[31171] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[31172] "expr temp" "temp"
        (31195 'move' _iterator[31172](31149 call _build_tuple(31184 call _getIterator(31181 call . this[32664] c"byteIndices"))(31192 call _getIterator(31191 call(31188 call . this[32664] c"chpl_bytes")))))
        Defer
        {
          {
            (31225 call _freeIterator _iterator[31172])
          }
        }
        { scopeless type
          (31200 'move' _indexOfInterest[31171](31197 call iteratorIndex _iterator[31172]))
        }
        ForLoop[31173]
        {
          (31205 call _check_tuple_var_decl _indexOfInterest[31171] 2)
          unknown i[31211] "index var" "insert auto destroy"
          (31213 'move' i[31211](31209 call _indexOfInterest[31171] 0))
          unknown b[31218] "index var" "insert auto destroy"
          (31220 'move' b[31218](31216 call _indexOfInterest[31171] 1))
          {
            (31168 yield(31166 call _build_tuple(31155 call _cast(31154 call int(64)[13] 32) b[31218])(31159 call _cast byteIndex[28173] i[31211])(31164 call _cast int(64)[13] 1)))
          }
          label _continueLabel[31176]
          _indexOfInterest[31171]
          _iterator[31172]
        }
        label _breakLabel[31177]
      }
    }
    {
      unknown i[31237](31235 call _cast int(64)[13] start[31106])
      (31240 'end of statement')
      if(31329 call _cond_test(31244 call > i[31237] 0))
      {
        unknown tmp[31272] "temp"
        (31326 'move' tmp[31272](31306 call _cond_test(31308 call &&(31310 call < i[31237](31313 call . localThis[31118] c"buffLen"))(31317 call !(31319 call isInitialByte(31324 call(31321 call . localThis[31118] c"buff") i[31237]))))))
        WhileDo[31277]
        {
          (31269 call += i[31237] 1)
          label _continueLabel[31275]
          (31301 'move' tmp[31272](31281 call _cond_test(31283 call &&(31285 call < i[31237](31288 call . localThis[31118] c"buffLen"))(31292 call !(31294 call isInitialByte(31299 call(31296 call . localThis[31118] c"buff") i[31237]))))))
          tmp[31272]
        }
        label _breakLabel[31276]
      }
      {
        unknown tmp[31406] "temp"
        (31436 'move' tmp[31406](31428 call _cond_test(31430 call < i[31237](31433 call . localThis[31118] c"buffLen"))))
        WhileDo[31411]
        {
          {
            const tmp[31364] "const" "temp"(31363 call decodeHelp(buff =(31349 call . localThis[31118] c"buff"))(buffLen =(31355 call . localThis[31118] c"buffLen"))(offset = i[31237])(allowEsc = 1))
            (31374 call _check_tuple_var_decl tmp[31364] 3)
            const decodeRet[31340] "const"(31365 call tmp[31364] 0)
            const cp[31342] "const"(31368 call tmp[31364] 1)
            const nBytes[31344] "const"(31371 call tmp[31364] 2)
            (31379 'end of statement')
            (31399 yield(31397 call _build_tuple(31386 call _cast(31385 call int(64)[13] 32) cp[31342])(31390 call _cast byteIndex[28173] i[31237])(31395 call _cast int(64)[13] nBytes[31344])))
            (31403 call += i[31237] nBytes[31344])
          }
          label _continueLabel[31409]
          (31423 'move' tmp[31406](31415 call _cond_test(31417 call < i[31237](31420 call . localThis[31118] c"buffLen"))))
          tmp[31406]
        }
        label _breakLabel[31410]
      }
    }
  }
  function string[26]._indexLen[31454](arg _mt[32670]:_MT[238], arg this[32668]:string[26], arg start[31451] =
  (31449 call _cast byteIndex[28173] 0)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown localThis[31463](31462 call(31458 call . this[32668] c"localize")) string[26]
    (31466 'end of statement')
    unknown i[31472](31470 call _cast int(64)[13] start[31451])
    (31475 'end of statement')
    if(31563 call _cond_test(31478 call > i[31472] 0))
    {
      unknown tmp[31506] "temp"
      (31560 'move' tmp[31506](31540 call _cond_test(31542 call &&(31544 call < i[31472](31547 call . localThis[31463] c"buffLen"))(31551 call !(31553 call isInitialByte(31558 call(31555 call . localThis[31463] c"buff") i[31472]))))))
      WhileDo[31511]
      {
        (31503 call += i[31472] 1)
        label _continueLabel[31509]
        (31535 'move' tmp[31506](31515 call _cond_test(31517 call &&(31519 call < i[31472](31522 call . localThis[31463] c"buffLen"))(31526 call !(31528 call isInitialByte(31533 call(31530 call . localThis[31463] c"buff") i[31472]))))))
        tmp[31506]
      }
      label _breakLabel[31510]
    }
    {
      unknown tmp[31684] "temp"
      (31714 'move' tmp[31684](31706 call _cond_test(31708 call < i[31472](31711 call . localThis[31463] c"buffLen"))))
      WhileDo[31689]
      {
        {
          unknown j[31578](31576 call + i[31472] 1)
          (31581 'end of statement')
          {
            unknown tmp[31609] "temp"
            (31663 'move' tmp[31609](31643 call _cond_test(31645 call &&(31647 call < j[31578](31650 call . localThis[31463] c"buffLen"))(31654 call !(31656 call isInitialByte(31661 call(31658 call . localThis[31463] c"buff") j[31578]))))))
            WhileDo[31614]
            {
              (31606 call += j[31578] 1)
              label _continueLabel[31612]
              (31638 'move' tmp[31609](31618 call _cond_test(31620 call &&(31622 call < j[31578](31625 call . localThis[31463] c"buffLen"))(31629 call !(31631 call isInitialByte(31636 call(31633 call . localThis[31463] c"buff") j[31578]))))))
              tmp[31609]
            }
            label _breakLabel[31613]
          }
          (31677 yield(31675 call _build_tuple(31668 call _cast byteIndex[28173] i[31472])(31672 call - j[31578] i[31472])))
          (31681 call = i[31472] j[31578])
        }
        label _continueLabel[31687]
        (31701 'move' tmp[31684](31693 call _cond_test(31695 call < i[31472](31698 call . localThis[31463] c"buffLen"))))
        tmp[31684]
      }
      label _breakLabel[31688]
    }
  }
  function string[26].substring[31725](arg _mt[32674]:_MT[238], arg this[32672]:string[26], arg i[31722] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (31746 call compilerError "substring removed: use string[index]")
  }
  function string[26].substring[31757](arg _mt[32678]:_MT[238], arg this[32676]:string[26], arg r[31754] :
  range[64319](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (31778 call compilerError "substring removed: use string[range]")
  }
  function string[26].writeThis[31787](arg _mt[32682]:_MT[238], arg this[32680]:string[26], arg f[31785]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (31792 call compilerError "not implemented: writeThis")
  }
  function string[26].readThis[31801](arg _mt[32686]:_MT[238], arg this[32684]:string[26], arg f[31799]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (31806 call compilerError "not implemented: readThis")
  }
  function string[26].doSearchUTF8[31817](arg _mt[32690]:_MT[238], arg this[32688]:string[26], arg needle[31814] :
  string[26], arg region[31823] :
  (31822 call range[64319](?) ?[260]), param arg count[31827] :
  bool[10], param arg fromLeft[31832] :
  bool[10] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[31840](31838 call - 1) int(64)[13]
    (31843 'end of statement')
    const tmp[32398] "const" "temp"
    (32400 'move' tmp[32398](32396 'deref'(31855 'chpl_on_locale_num'(31854 call chpl_buildLocaleID(31849 call . this[32688] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        unknown localRet[31860](31858 call - 2) int(64)[13]
        (31863 'end of statement')
        const nLen[31869] "const"(31866 call . needle[31814] c"buffLen")
        (31872 'end of statement')
        const tmp[31883] "const" "temp"(31882 call getView this[32688] region[31823])
        (31887 call _check_tuple_var_decl tmp[31883] 2)
        const view[31873] "const"(31884 call tmp[31883] 0)
        (31892 'end of statement')
        const thisLen[31897] "const"(31894 call . view[31873] c"size")
        (31900 'end of statement')
        if(32117 call _cond_test count[31827])
        {
          if(32073 call _cond_test(31904 call == nLen[31869] 0))
          {
            if(32068 call _cond_test(31946 call ||(31924 call &&(31913 call(31909 call . region[31823] c"hasLowBound"))(31922 call ==(31920 'typeof'(31917 call . region[31823] c"low")) byteIndex[28173]))(31944 call &&(31933 call(31929 call . region[31823] c"hasHighBound"))(31942 call ==(31940 'typeof'(31937 call . region[31823] c"high")) byteIndex[28173]))))
            {
              (31950 call = localRet[31860] thisLen[31897])
            }
            {
              unknown nCodepoints[31955] 0
              (31958 'end of statement')
              unknown nextIdx[31961] 0
              (31964 'end of statement')
              {
                unknown _indexOfInterest[32030] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[32031] "expr temp" "temp"
                (32040 'move' _iterator[32031](32038 call _getIterator view[31873]))
                Defer
                {
                  {
                    (32056 call _freeIterator _iterator[32031])
                  }
                }
                { scopeless type
                  (32045 'move' _indexOfInterest[32030](32042 call iteratorIndex _iterator[32031]))
                }
                ForLoop[32032]
                {
                  unknown i[32049] "index var" "insert auto destroy"
                  (32051 'move' i[32049] _indexOfInterest[32030])
                  {
                    if(32025 call _cond_test(31969 call >= i[32049] nextIdx[31961]))
                    {
                      (31973 call += nCodepoints[31955] 1)
                      const tmp[32001] "const" "temp"(32000 call decodeHelp(buff =(31986 call . this[32688] c"buff"))(buffLen =(31992 call . this[32688] c"buffLen"))(offset = i[32049])(allowEsc = 1))
                      (32011 call _check_tuple_var_decl tmp[32001] 3)
                      const decodeRet[31977] "const"(32002 call tmp[32001] 0)
                      const cp[31979] "const"(32005 call tmp[32001] 1)
                      const nBytes[31981] "const"(32008 call tmp[32001] 2)
                      (32016 'end of statement')
                      (32022 call = nextIdx[31961](32020 call + i[32049] nBytes[31981]))
                    }
                  }
                  label _continueLabel[32035]
                  _indexOfInterest[32030]
                  _iterator[32031]
                }
                label _breakLabel[32036]
              }
              (32065 call = localRet[31860] nCodepoints[31955])
            }
          }
        }
        {
          if(32112 call _cond_test(32080 call == nLen[31869] 0))
          {
            if(32107 call _cond_test fromLeft[31832])
            {
              (32087 call = localRet[31860](32085 call - 1))
            }
            {
              (32103 call = localRet[31860](32100 IfExpr (32094 call == thisLen[31897] 0) then
              { scopeless
                (32097 call - 1)
              } else
              { scopeless
                thisLen[31897]
              } ))
            }
          }
        }
        if(32133 call _cond_test(32123 call > nLen[31869] thisLen[31897]))
        {
          (32129 call = localRet[31860](32127 call - 1))
        }
        if(32376 call _cond_test(32141 call == localRet[31860](32139 call - 2)))
        {
          (32147 call = localRet[31860](32145 call - 1))
          const localNeedle[32158] "const"(32157 call(32153 call . needle[31814] c"localize")) string[26]
          (32161 'end of statement')
          const numPossible[32169] "const"(32167 call +(32164 call - thisLen[31897] nLen[31869]) 1)
          (32172 'end of statement')
          const searchSpace[32194] "const"(32191 IfExpr  fromLeft[31832] then
          { scopeless
            (32178 call #(32175 call chpl_build_low_bounded_range 0) numPossible[32169])
          } else
          { scopeless
            (32189 call chpl_by(32184 call #(32181 call chpl_build_low_bounded_range 0) numPossible[32169])(32187 call - 1))
          } )
          (32197 'end of statement')
          {
            unknown _indexOfInterest[32343] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[32344] "expr temp" "temp"
            (32353 'move' _iterator[32344](32351 call _getIterator searchSpace[32194]))
            Defer
            {
              {
                (32369 call _freeIterator _iterator[32344])
              }
            }
            { scopeless type
              (32358 'move' _indexOfInterest[32343](32355 call iteratorIndex _iterator[32344]))
            }
            ForLoop[32345]
            {
              unknown i[32362] "index var" "insert auto destroy"
              (32364 'move' i[32362] _indexOfInterest[32343])
              {
                {
                  unknown _indexOfInterest[32283] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[32284] "expr temp" "temp"
                  (32293 'move' _iterator[32284](32291 call _getIterator(32300 call chpl_direct_counted_range_iter 0 nLen[31869])))
                  Defer
                  {
                    {
                      (32316 call _freeIterator _iterator[32284])
                    }
                  }
                  { scopeless type
                    (32305 'move' _indexOfInterest[32283](32302 call iteratorIndex _iterator[32284]))
                  }
                  ForLoop[32285]
                  {
                    unknown j[32309] "index var" "insert auto destroy"
                    (32311 'move' j[32309] _indexOfInterest[32283])
                    {
                      const idx[32219] "const"(32218 call(32210 call . view[31873] c"orderToIndex")(32215 call + i[32362] j[32309]))
                      (32222 'end of statement')
                      if(32243 call _cond_test(32238 call !=(32230 call(32225 call . this[32688] c"buff") idx[32219])(32237 call(32232 call . localNeedle[32158] c"buff") j[32309])))
                      {
                        break _breakLabel[32289] _breakLabel[32289]
                      }
                      if(32279 call _cond_test(32253 call == j[32309](32251 call - nLen[31869] 1)))
                      {
                        if(32274 call _cond_test count[31827])
                        {
                          (32258 call += localRet[31860] 1)
                        }
                        {
                          (32270 call = localRet[31860](32269 call(32264 call . view[31873] c"orderToIndex") i[32362]))
                        }
                      }
                    }
                    label _continueLabel[32288]
                    _indexOfInterest[32283]
                    _iterator[32284]
                  }
                  label _breakLabel[32289]
                }
                if(32338 call _cond_test(32333 call &&(32325 call ! count[31827])(32331 call != localRet[31860](32329 call - 1))))
                {
                  break _breakLabel[32349] _breakLabel[32349]
                }
              }
              label _continueLabel[32348]
              _indexOfInterest[32343]
              _iterator[32344]
            }
            label _breakLabel[32349]
          }
        }
        if(32386 call _cond_test count[31827])
        {
          (32383 call += localRet[31860] 1)
        }
        (32393 call = ret[31840] localRet[31860])
      }
      (32403 'on block' 0 tmp[32398])
    }
    (32407 return ret[31840])
  }
  function string[26].join[32415](arg _mt[32694]:_MT[238], arg this[32692]:string[26], const  ref arg S[32413]:_any[178](?)) : _unknown[51] "inline" "last resort" "method" "primary method"
  {
    (32424 call joinArgDepr)
    (32431 return(32430 call(369863 call . this[32692] c"join") S[32413]))
  }
  where {
    (32421 call isTuple S[32413])
  }
  { scopeless type
    string[26]
  }
  function string[26].join[32446](arg _mt[32698]:_MT[238], arg this[32696]:string[26], const  ref arg S[32443] :
  (32440 call chpl__buildArrayRuntimeType nil[44] string[26])) : _unknown[51] "inline" "last resort" "method" "primary method"
  {
    (32451 call joinArgDepr)
    (32458 return(32457 call(369868 call . this[32696] c"join") S[32443]))
  }
  { scopeless type
    string[26]
  }
  function string[26].join[32469](arg _mt[32702]:_MT[238], arg this[32700]:string[26], arg ir[32466] :
  _iteratorRecord[205](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (32477 return(32476 call doJoinIterator this[32700] ir[32466]))
  }
  { scopeless type
    string[26]
  }
  function string[26]._join[32487](arg _mt[32706]:_MT[238], arg this[32704]:string[26], const  ref arg S[32485]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (32505 return(32504 call doJoin this[32704] S[32485]))
  }
  where {
    (32498 call ||(32493 call isTuple S[32485])(32497 call isArray S[32485]))
  }
  { scopeless type
    string[26]
  }
  function string[26].capitalize[32514](arg _mt[32710]:_MT[238], arg this[32708]:string[26]) : _unknown[51] "method" "primary method"
  {
    unknown result[32526](32525 call(32521 call . this[32708] c"toLower")) string[26]
    (32529 'end of statement')
    if(32540 call _cond_test(32536 call(32532 call . result[32526] c"isEmpty")))
    {
      (32538 return result[32526])
    }
    const tmp[32569] "const" "temp"(32568 call decodeHelp(buff =(32554 call . result[32526] c"buff"))(buffLen =(32560 call . result[32526] c"buffLen"))(offset = 0)(allowEsc = 0))
    (32579 call _check_tuple_var_decl tmp[32569] 3)
    const decodeRet[32545] "const"(32570 call tmp[32569] 0)
    const cp[32547] "const"(32573 call tmp[32569] 1)
    const nBytes[32549] "const"(32576 call tmp[32569] 2)
    (32584 'end of statement')
    unknown upCodepoint[32589](32588 call codepoint_toUpper cp[32547])
    (32592 'end of statement')
    if(32616 call _cond_test(32604 call &&(32595 call != upCodepoint[32589] cp[32547])(32602 call ==(32600 call qio_nbytes_char upCodepoint[32589]) nBytes[32549])))
    {
      (32613 call qio_encode_char_buf(32608 call . result[32526] c"buff") upCodepoint[32589])
    }
    (32621 return result[32526])
  }
  { scopeless type
    string[26]
  }
  type string[26] unknown buffLen[30722] 0 int(64)[13] unknown buffSize[30728] 0 int(64)[13] unknown cachedNumCodepoints[30734] 0 int(64)[13] unknown buff[30740] nil[44] bufferType[172527] unknown isOwned[30746] 1 bool[10] unknown hasEscapes[30752] 0 bool[10] unknown locale_id[30757] chpl_nodeID[208207]
  function string[26].length[32716](arg _mt[32721]:_MT[238], arg this[32718]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32761 call compilerWarning(32758 call + "'string.length' is deprecated - " "please use 'string.size' instead"))
    (32765 return(369888 call . this[32718] c"numCodepoints"))
  }
  function string[26].size[32772](arg _mt[32777]:_MT[238], const arg this[32774]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32780 return(369892 call . this[32774] c"numCodepoints"))
  }
  function string[26].indices[32788](arg _mt[32793]:_MT[238], arg this[32790]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32802 return(32800 call chpl_build_bounded_range 0(32798 call -(369896 call . this[32790] c"size") 1)))
  }
  function string[26].numBytes[32810](arg _mt[32815]:_MT[238], arg this[32812]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    (32818 return(369901 call . this[32812] c"buffLen"))
  }
  function string[26].numCodepoints[32826](arg _mt[32831]:_MT[238], const arg this[32828]:string[26] :
  string[26]) : _unknown[51] "inline" "method" "no parens"
  {
    const n[32837] "const"(32834 call . this[32828] c"cachedNumCodepoints")
    (32840 'end of statement')
    if(32877 call _cond_test 1)
    {
      if(32872 call _cond_test(32848 call != n[32837](32847 call countNumCodepoints this[32828])))
      {
        (32869 call halt "Encountered corrupt string metadata")
      }
    }
    (32882 return n[32837])
  }
  function string[26].localize[32889](arg _mt[32894]:_MT[238], arg this[32891]:string[26] :
  string[26]) : _unknown[51] "inline" "method"
  {
    if(32924 call _cond_test(32905 call || 0(32903 call ==(32899 call . this[32891] c"locale_id") chpl_nodeID[208207])))
    {
      (32911 return(32910 call createStringWithBorrowedBuffer this[32891]))
    }
    {
      const x[32916] "const" this[32891] string[26]
      (32919 'end of statement')
      (32922 return x[32916])
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].c_str[32935](arg _mt[32940]:_MT[238], arg this[32937]:string[26] :
  string[26]) : _unknown[51] "inline" "method"
  {
    (32947 return(32946 call getCStr this[32937]))
  }
  { scopeless type
    c_string[19]
  }
  function string[26].encode[32965](arg _mt[32970]:_MT[238], arg this[32967]:string[26] :
  string[26], arg policy[32962] =
  pass[173708]) : _unknown[51] "method"
  {
    unknown localThis[32980](32979 call(32975 call . this[32967] c"localize")) string[26]
    (32983 'end of statement')
    if(33255 call _cond_test(32998 call ||(32990 call == policy[32962] pass[173708])(32997 call(32993 call . this[32967] c"isASCII"))))
    {
      (33011 return(33010 call createBytesWithNewBuffer(33002 call . localThis[32980] c"buff")(33007 call . localThis[32980] c"numBytes")))
    }
    {
      unknown tmp[33029] "temp"(33028 call bufferAlloc(33025 call +(33021 call . this[32967] c"buffLen") 1))
      (33036 call _check_tuple_var_decl tmp[33029] 2)
      unknown buff[33014](33030 call tmp[33029] 0)
      unknown size[33016](33033 call tmp[33029] 1)
      (33041 'end of statement')
      unknown readIdx[33044] 0
      (33047 'end of statement')
      unknown writeIdx[33049] 0
      (33052 'end of statement')
      {
        unknown tmp[33204] "temp"
        (33234 'move' tmp[33204](33226 call _cond_test(33228 call < readIdx[33044](33231 call . localThis[32980] c"buffLen"))))
        WhileDo[33209]
        {
          {
            unknown multibytes[33067](33065 call +(33061 call . localThis[32980] c"buff") readIdx[33044])
            (33070 'end of statement')
            const tmp[33096] "const" "temp"(33095 call decodeHelp(buff =(33081 call . localThis[32980] c"buff"))(buffLen =(33087 call . localThis[32980] c"buffLen"))(offset = readIdx[33044])(allowEsc = 1))
            (33106 call _check_tuple_var_decl tmp[33096] 3)
            const decodeRet[33072] "const"(33097 call tmp[33096] 0)
            const cp[33074] "const"(33100 call tmp[33096] 1)
            const nBytes[33076] "const"(33103 call tmp[33096] 2)
            (33111 'end of statement')
            if(33194 call _cond_test(33124 call &&(33116 call <= 56448 cp[33074])(33122 call <= cp[33074] 56575)))
            {
              (33139 call =(33129 call buff[33014] writeIdx[33049])(33137 call _cast byteType[172517](33134 call - cp[33074] 56320)))
              (33145 call += writeIdx[33049] 1)
            }
            {
              if(33190 call _cond_test(33150 call != decodeRet[33072] 0))
              {
                (33163 call bufferMemcpyLocal(dst =(33155 call + buff[33014] writeIdx[33049]))(src = multibytes[33067])(len = nBytes[33076]))
                (33168 call += writeIdx[33049] nBytes[33076])
              }
              {
                (33182 call bufferMemcpyLocal(dst =(33174 call + buff[33014] writeIdx[33049]))(src = multibytes[33067])(len = nBytes[33076]))
                (33187 call += writeIdx[33049] nBytes[33076])
              }
            }
            (33201 call += readIdx[33044] nBytes[33076])
          }
          label _continueLabel[33207]
          (33221 'move' tmp[33204](33213 call _cond_test(33215 call < readIdx[33044](33218 call . localThis[32980] c"buffLen"))))
          tmp[33204]
        }
        label _breakLabel[33208]
      }
      (33242 call =(33240 call buff[33014] writeIdx[33049]) 0)
      (33253 return(33252 call createBytesWithOwnedBuffer buff[33014](length = writeIdx[33049])(size = size[33016])))
    }
  }
  { scopeless type
    bytes[24]
  }
  function string[26].items[33265](arg _mt[33270]:_MT[238], arg this[33267]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown localThis[33280](33279 call(33275 call . this[33267] c"localize")) string[26]
    (33283 'end of statement')
    if(33506 call _cond_test(33290 call(33286 call . localThis[33280] c"isASCII")))
    {
      {
        unknown _indexOfInterest[33336] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[33337] "expr temp" "temp"
        (33346 'move' _iterator[33337](33344 call _getIterator(33293 call . this[33267] c"byteIndices")))
        Defer
        {
          {
            (33363 call _freeIterator _iterator[33337])
          }
        }
        { scopeless type
          (33352 'move' _indexOfInterest[33336](33349 call iteratorIndex _iterator[33337]))
        }
        ForLoop[33338]
        {
          unknown i[33356] "index var" "insert auto destroy"
          (33358 'move' i[33356] _indexOfInterest[33336])
          {
            unknown tmp[33313] "temp"(33312 call bufferCopyLocal(33307 call +(33303 call . localThis[33280] c"buff") i[33356])(len = 1))
            (33320 call _check_tuple_var_decl tmp[33313] 2)
            unknown newBuff[33296](33314 call tmp[33313] 0)
            unknown allocSize[33298](33317 call tmp[33313] 1)
            (33325 'end of statement')
            (33334 yield(33333 call chpl_createStringWithOwnedBufferNV newBuff[33296] 1 allocSize[33298] 1))
          }
          label _continueLabel[33341]
          _indexOfInterest[33336]
          _iterator[33337]
        }
        label _breakLabel[33342]
      }
    }
    {
      unknown i[33372] 0
      (33375 'end of statement')
      {
        unknown tmp[33473] "temp"
        (33503 'move' tmp[33473](33495 call _cond_test(33497 call < i[33372](33500 call . localThis[33280] c"buffLen"))))
        WhileDo[33478]
        {
          {
            const curPos[33391] "const"(33389 call +(33385 call . localThis[33280] c"buff") i[33372])
            (33394 'end of statement')
            const tmp[33420] "const" "temp"(33419 call decodeHelp(buff =(33405 call . localThis[33280] c"buff"))(buffLen =(33411 call . localThis[33280] c"buffLen"))(offset = i[33372])(allowEsc = 1))
            (33430 call _check_tuple_var_decl tmp[33420] 3)
            const decodeRet[33396] "const"(33421 call tmp[33420] 0)
            const cp[33398] "const"(33424 call tmp[33420] 1)
            const nBytes[33400] "const"(33427 call tmp[33420] 2)
            (33435 'end of statement')
            unknown tmp[33446] "temp"(33445 call bufferCopyLocal curPos[33391] nBytes[33400])
            (33453 call _check_tuple_var_decl tmp[33446] 2)
            unknown newBuf[33436](33447 call tmp[33446] 0)
            unknown newSize[33438](33450 call tmp[33446] 1)
            (33458 'end of statement')
            (33466 yield(33465 call chpl_createStringWithOwnedBufferNV newBuf[33436] nBytes[33400] newSize[33438] 1))
            (33470 call += i[33372] nBytes[33400])
          }
          label _continueLabel[33476]
          (33490 'move' tmp[33473](33482 call _cond_test(33484 call < i[33372](33487 call . localThis[33280] c"buffLen"))))
          tmp[33473]
        }
        label _breakLabel[33477]
      }
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].these[33516](arg _mt[33521]:_MT[238], arg this[33518]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[33536] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[33537] "expr temp" "temp"
      (33546 'move' _iterator[33537](33544 call _getIterator(33532 call(33528 call . this[33518] c"items"))))
      Defer
      {
        {
          (33563 call _freeIterator _iterator[33537])
        }
      }
      { scopeless type
        (33552 'move' _indexOfInterest[33536](33549 call iteratorIndex _iterator[33537]))
      }
      ForLoop[33538]
      {
        unknown c[33556] "index var" "insert auto destroy"
        (33558 'move' c[33556] _indexOfInterest[33536])
        (33534 yield c[33556])
        label _continueLabel[33541]
        _indexOfInterest[33536]
        _iterator[33537]
      }
      label _breakLabel[33542]
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].chpl_bytes[33577](arg _mt[33582]:_MT[238], arg this[33579]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown localThis[33592](33591 call(33587 call . this[33579] c"localize")) string[26]
    (33595 'end of statement')
    {
      unknown _indexOfInterest[33617] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[33618] "expr temp" "temp"
      (33627 'move' _iterator[33618](33625 call _getIterator(33637 call chpl_direct_counted_range_iter 0(33633 call . localThis[33592] c"buffLen"))))
      Defer
      {
        {
          (33653 call _freeIterator _iterator[33618])
        }
      }
      { scopeless type
        (33642 'move' _indexOfInterest[33617](33639 call iteratorIndex _iterator[33618]))
      }
      ForLoop[33619]
      {
        unknown i[33646] "index var" "insert auto destroy"
        (33648 'move' i[33646] _indexOfInterest[33617])
        {
          (33614 yield(33613 call(33608 call . localThis[33592] c"buff") i[33646]))
        }
        label _continueLabel[33622]
        _indexOfInterest[33617]
        _iterator[33618]
      }
      label _breakLabel[33623]
    }
  }
  { scopeless type
    byteType[172517]
  }
  function string[26].codepoints[33666](arg _mt[33671]:_MT[238], arg this[33668]:string[26] :
  string[26]) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown localThis[33684](33683 call(33679 call . this[33668] c"localize")) string[26]
    (33687 'end of statement')
    if(33835 call _cond_test(33694 call(33690 call . this[33668] c"isASCII")))
    {
      {
        unknown _indexOfInterest[33705] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[33706] "expr temp" "temp"
        (33715 'move' _iterator[33706](33713 call _getIterator(33701 call(33697 call . this[33668] c"chpl_bytes"))))
        Defer
        {
          {
            (33732 call _freeIterator _iterator[33706])
          }
        }
        { scopeless type
          (33721 'move' _indexOfInterest[33705](33718 call iteratorIndex _iterator[33706]))
        }
        ForLoop[33707]
        {
          unknown b[33725] "index var" "insert auto destroy"
          (33727 'move' b[33725] _indexOfInterest[33705])
          (33703 yield b[33725])
          label _continueLabel[33710]
          _indexOfInterest[33705]
          _iterator[33706]
        }
        label _breakLabel[33711]
      }
    }
    {
      unknown i[33741] 0
      (33744 'end of statement')
      {
        unknown tmp[33802] "temp"
        (33832 'move' tmp[33802](33824 call _cond_test(33826 call < i[33741](33829 call . localThis[33684] c"buffLen"))))
        WhileDo[33807]
        {
          {
            const tmp[33777] "const" "temp"(33776 call decodeHelp(buff =(33762 call . localThis[33684] c"buff"))(buffLen =(33768 call . localThis[33684] c"buffLen"))(offset = i[33741])(allowEsc = 1))
            (33787 call _check_tuple_var_decl tmp[33777] 3)
            const decodeRet[33753] "const"(33778 call tmp[33777] 0)
            const cp[33755] "const"(33781 call tmp[33777] 1)
            const nBytes[33757] "const"(33784 call tmp[33777] 2)
            (33792 'end of statement')
            (33795 yield cp[33755])
            (33799 call += i[33741] nBytes[33757])
          }
          label _continueLabel[33805]
          (33819 'move' tmp[33802](33811 call _cond_test(33813 call < i[33741](33816 call . localThis[33684] c"buffLen"))))
          tmp[33802]
        }
        label _breakLabel[33806]
      }
    }
  }
  { scopeless type
    (33676 call int(64)[13] 32)
  }
  function string[26].toByte[33845](arg _mt[33850]:_MT[238], arg this[33847]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(33884 call _cond_test(33861 call !=(33857 call . this[33847] c"buffLen") 1))
    {
      (33882 call halt "string.toByte() only accepts single-byte strings")
    }
    (33905 return(33904 call bufferGetByte(buf =(33892 call . this[33847] c"buff"))(off = 0)(loc =(33900 call . this[33847] c"locale_id"))))
  }
  { scopeless type
    (33855 call uint(64)[115] 8)
  }
  function string[26].byte[33917](arg _mt[33922]:_MT[238], arg this[33919]:string[26] :
  string[26], arg i[33914] :
  int(64)[13]) : _unknown[51] "method"
  {
    if(33988 call _cond_test(33942 call && 1(33940 call ||(33931 call < i[33914] 0)(33938 call >= i[33914](33935 call . this[33919] c"buffLen")))))
    {
      (33986 call halt "index " i[33914] " out of bounds for string with "(33966 call . this[33919] c"numBytes") " bytes")
    }
    (34009 return(34008 call bufferGetByte(buf =(33996 call . this[33919] c"buff"))(off = i[33914])(loc =(34004 call . this[33919] c"locale_id"))))
  }
  { scopeless type
    (33927 call uint(64)[115] 8)
  }
  function string[26].toCodepoint[34017](arg _mt[34022]:_MT[238], arg this[34019]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown localThis[34035](34034 call(34030 call . this[34019] c"localize")) string[26]
    (34038 'end of statement')
    if(34067 call _cond_test(34045 call(34041 call . localThis[34035] c"isEmpty")))
    {
      (34065 call halt "string.toCodepoint() only accepts single-codepoint strings")
    }
    if(34170 call _cond_test(34077 call(34073 call . this[34019] c"isASCII")))
    {
      if(34090 call _cond_test(34083 call >(34079 call . localThis[34035] c"numBytes") 1))
      {
        (34088 call halt "string.toCodepoint() only accepts single-codepoint strings")
      }
      (34104 return(34103 call(34099 call . this[34019] c"toByte")))
    }
    {
      const tmp[34130] "const" "temp"(34129 call decodeHelp(buff =(34115 call . localThis[34035] c"buff"))(buffLen =(34121 call . localThis[34035] c"buffLen"))(offset = 0)(allowEsc = 1))
      (34140 call _check_tuple_var_decl tmp[34130] 3)
      const decodeRet[34106] "const"(34131 call tmp[34130] 0)
      const cp[34108] "const"(34134 call tmp[34130] 1)
      const nBytes[34110] "const"(34137 call tmp[34130] 2)
      (34145 'end of statement')
      if(34162 call _cond_test(34155 call !=(34148 call . localThis[34035] c"buffLen")(34153 call _cast int(64)[13] nBytes[34110])))
      {
        (34160 call halt "string.toCodepoint() only accepts single-codepoint strings")
      }
      (34168 return cp[34108])
    }
  }
  { scopeless type
    (34027 call int(64)[13] 32)
  }
  function string[26].codepoint[34184](arg _mt[34189]:_MT[238], arg this[34186]:string[26] :
  string[26], arg i[34181] :
  int(64)[13]) : _unknown[51] "method"
  {
    const idx[34199] "const"(34197 call _cast int(64)[13] i[34181])
    (34202 'end of statement')
    if(34234 call _cond_test(34209 call && 1(34207 call < idx[34199] 0)))
    {
      (34232 call halt "index " idx[34199] " out of bounds for string")
    }
    if(34390 call _cond_test(34244 call(34240 call . this[34186] c"isASCII")))
    {
      if(34282 call _cond_test(34253 call && 1(34251 call >= idx[34199](34248 call . this[34186] c"numBytes"))))
      {
        (34280 call halt "index " idx[34199] " out of bounds for string with length "(34277 call . this[34186] c"size"))
      }
      (34295 return(34294 call(34289 call . this[34186] c"byte") i[34181]))
    }
    {
      unknown j[34298] 0
      (34301 'end of statement')
      {
        unknown _indexOfInterest[34330] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[34331] "expr temp" "temp"
        (34340 'move' _iterator[34331](34338 call _getIterator(34311 call(34307 call . this[34186] c"codepoints"))))
        Defer
        {
          {
            (34357 call _freeIterator _iterator[34331])
          }
        }
        { scopeless type
          (34346 'move' _indexOfInterest[34330](34343 call iteratorIndex _iterator[34331]))
        }
        ForLoop[34332]
        {
          unknown cp[34350] "index var" "insert auto destroy"
          (34352 'move' cp[34350] _indexOfInterest[34330])
          {
            if(34319 call _cond_test(34314 call == j[34298] idx[34199]))
            {
              (34317 return cp[34350])
            }
            (34327 call += j[34298] 1)
          }
          label _continueLabel[34335]
          _indexOfInterest[34330]
          _iterator[34331]
        }
        label _breakLabel[34336]
      }
      if(34376 call _cond_test 1)
      {
        (34374 call halt "index " idx[34199] " out of bounds for string with length "(34371 call . this[34186] c"size"))
      }
      (34388 return(34386 call _cast(34385 call int(64)[13] 32) 0))
    }
  }
  { scopeless type
    (34194 call int(64)[13] 32)
  }
  function string[26].this[34404](arg _mt[34409]:_MT[238], arg this[34406]:string[26] :
  string[26], arg i[34401] :
  byteIndex[28173]) : _unknown[51] "method"
  {
    unknown idx[34416](34414 call _cast int(64)[13] i[34401])
    (34419 'end of statement')
    if(34449 call _cond_test(34435 call && 1(34433 call ||(34424 call < idx[34416] 0)(34431 call >= idx[34416](34428 call . this[34406] c"buffLen")))))
    {
      (34447 call halt "index " i[34401] " out of bounds for string with "(34443 call . this[34406] c"buffLen") " bytes")
    }
    if(34621 call _cond_test(34459 call(34455 call . this[34406] c"isASCII")))
    {
      unknown tmp[34485] "temp"(34484 call bufferCopy(buf =(34467 call . this[34406] c"buff"))(off =(34474 call _cast int(64)[13] i[34401]))(len = 1)(loc =(34480 call . this[34406] c"locale_id")))
      (34492 call _check_tuple_var_decl tmp[34485] 2)
      unknown newBuff[34460](34486 call tmp[34485] 0)
      unknown allocSize[34462](34489 call tmp[34485] 1)
      (34497 'end of statement')
      (34506 return(34505 call chpl_createStringWithOwnedBufferNV newBuff[34460] 1 allocSize[34462] 1))
    }
    {
      unknown maxbytes[34518](34516 call _cast ssize_t[20650](34513 call -(34509 call . this[34406] c"buffLen") idx[34416]))
      (34521 'end of statement')
      if(34538 call _cond_test(34531 call ||(34525 call < maxbytes[34518] 0)(34529 call > maxbytes[34518] 4)))
      {
        (34535 call = maxbytes[34518] 4)
      }
      unknown tmp[34565] "temp"(34564 call bufferCopy(buf =(34550 call . this[34406] c"buff"))(off = idx[34416])(len = maxbytes[34518])(loc =(34560 call . this[34406] c"locale_id")))
      (34572 call _check_tuple_var_decl tmp[34565] 2)
      unknown newBuff[34543](34566 call tmp[34565] 0)
      unknown allocSize[34545](34569 call tmp[34565] 1)
      (34577 'end of statement')
      const tmp[34596] "const" "temp"(34595 call decodeHelp(buff = newBuff[34543])(buffLen = maxbytes[34518])(offset = 0)(allowEsc = 1))
      (34606 call _check_tuple_var_decl tmp[34596] 3)
      const decodeRet[34578] "const"(34597 call tmp[34596] 0)
      const cp[34580] "const"(34600 call tmp[34596] 1)
      const nBytes[34582] "const"(34603 call tmp[34596] 2)
      (34611 'end of statement')
      (34619 return(34618 call chpl_createStringWithOwnedBufferNV newBuff[34543] nBytes[34582] allocSize[34545] 1))
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].this[34635](arg _mt[34640]:_MT[238], arg this[34637]:string[26] :
  string[26], arg i[34632] :
  codepointIndex[28277]) : _unknown[51] "method"
  {
    (34650 return(34649 call(34644 call . this[34637] c"item") i[34632]))
  }
  { scopeless type
    string[26]
  }
  function string[26].this[34663](arg _mt[34668]:_MT[238], arg this[34665]:string[26] :
  string[26], arg i[34660] :
  int(64)[13]) : _unknown[51] "inline" "method"
  {
    (34678 return(34677 call(34672 call . this[34665] c"item") i[34660]))
  }
  { scopeless type
    string[26]
  }
  function string[26].item[34691](arg _mt[34696]:_MT[238], arg this[34693]:string[26] :
  string[26], arg i[34688] :
  codepointIndex[28277]) : _unknown[51] "method"
  {
    if(34713 call _cond_test(34704 call && 1(34702 call < i[34688] 0)))
    {
      (34711 call halt "index " i[34688] " out of bounds for string")
    }
    if(34744 call _cond_test(34724 call(34720 call . this[34693] c"isEmpty")))
    {
      (34742 return "")
    }
    if(34997 call _cond_test(34754 call(34750 call . this[34693] c"isASCII")))
    {
      if(34776 call _cond_test(34763 call && 1(34761 call >= i[34688](34758 call . this[34693] c"numBytes"))))
      {
        (34774 call halt "index " i[34688] " out of bounds for string with length "(34771 call . this[34693] c"size"))
      }
      unknown tmp[34807] "temp"(34806 call bufferCopy(buf =(34789 call . this[34693] c"buff"))(off =(34796 call _cast int(64)[13] i[34688]))(len = 1)(loc =(34802 call . this[34693] c"locale_id")))
      (34814 call _check_tuple_var_decl tmp[34807] 2)
      unknown newBuff[34782](34808 call tmp[34807] 0)
      unknown allocSize[34784](34811 call tmp[34807] 1)
      (34819 'end of statement')
      (34827 return(34826 call chpl_createStringWithOwnedBufferNV newBuff[34782] 1 allocSize[34784] 1))
    }
    {
      unknown charCount[34830] 0
      (34833 'end of statement')
      {
        unknown _indexOfInterest[34906] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[34907] "expr temp" "temp"
        (34916 'move' _iterator[34907](34914 call _getIterator(34843 call(370027 call . this[34693] c"_cpIndexLen"))))
        Defer
        {
          {
            (34954 call _freeIterator _iterator[34907])
          }
        }
        { scopeless type
          (34922 'move' _indexOfInterest[34906](34919 call iteratorIndex _iterator[34907]))
        }
        ForLoop[34908]
        {
          (34927 call _check_tuple_var_decl _indexOfInterest[34906] 3)
          unknown cp[34933] "index var" "insert auto destroy"
          (34935 'move' cp[34933](34931 call _indexOfInterest[34906] 0))
          unknown byteIdx[34940] "index var" "insert auto destroy"
          (34942 'move' byteIdx[34940](34938 call _indexOfInterest[34906] 1))
          unknown nBytes[34947] "index var" "insert auto destroy"
          (34949 'move' nBytes[34947](34945 call _indexOfInterest[34906] 2))
          {
            if(34896 call _cond_test(34846 call == charCount[34830] i[34688]))
            {
              unknown tmp[34873] "temp"(34872 call bufferCopy(buf =(34855 call . this[34693] c"buff"))(off =(34862 call _cast int(64)[13] byteIdx[34940]))(len = nBytes[34947])(loc =(34868 call . this[34693] c"locale_id")))
              (34880 call _check_tuple_var_decl tmp[34873] 2)
              unknown newBuff[34848](34874 call tmp[34873] 0)
              unknown allocSize[34850](34877 call tmp[34873] 1)
              (34885 'end of statement')
              (34894 return(34893 call chpl_createStringWithOwnedBufferNV newBuff[34848] nBytes[34947] allocSize[34850] 1))
            }
            (34903 call += charCount[34830] 1)
          }
          label _continueLabel[34911]
          _indexOfInterest[34906]
          _iterator[34907]
        }
        label _breakLabel[34912]
      }
      if(34973 call _cond_test 1)
      {
        (34971 call halt "index " i[34688] " out of bounds for string with length "(34968 call . this[34693] c"size"))
      }
      (34995 return "")
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].item[35011](arg _mt[35016]:_MT[238], arg this[35013]:string[26] :
  string[26], arg i[35008] :
  int(64)[13]) : _unknown[51] "inline" "method"
  {
    (35026 return(35025 call this[35013](35022 call _cast codepointIndex[28277] i[35008])))
  }
  { scopeless type
    string[26]
  }
  function string[26].this[35042](arg _mt[35047]:_MT[238], arg this[35044]:string[26] :
  string[26], arg r[35039] :
  (35038 call range[64319](?) ?[260])) : _unknown[51] "inline" "method"
  {
    (35055 return(35054 call getSlice this[35044] r[35039]))
  }
  { scopeless type
    string[26]
  }
  function string[26].isEmpty[35064](arg _mt[35069]:_MT[238], arg this[35066]:string[26] :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35079 return(35077 call ==(35073 call . this[35066] c"buffLen") 0))
  }
  { scopeless type
    bool[10]
  }
  function string[26].startsWith[35094](arg _mt[35099]:_MT[238], arg this[35096]:string[26] :
  string[26], arg needles[35090] ... :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35109 return(35108 call startsEndsWith this[35096] needles[35090](fromLeft = 1)))
  }
  { scopeless type
    bool[10]
  }
  function string[26].endsWith[35124](arg _mt[35129]:_MT[238], arg this[35126]:string[26] :
  string[26], arg needles[35120] ... :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35139 return(35138 call startsEndsWith this[35126] needles[35120](fromLeft = 0)))
  }
  { scopeless type
    bool[10]
  }
  function string[26].find[35152](arg _mt[35175]:_MT[238], arg this[35172]:string[26] :
  string[26], arg needle[35149] :
  string[26], arg region[35168] :
  (35157 call range[64319](?) ?[260]) =
  (35166 call _cast(35165 call range[64319](?) byteIndex[28173])(35159 call . this[35172] c"byteIndices"))) : _unknown[51] "inline" "method"
  {
    if(35209 call _cond_test(35183 call(35179 call . this[35172] c"isASCII")))
    {
      (35195 return(35193 call _cast byteIndex[28173](35191 call doSearchNoEnc this[35172] needle[35149] region[35168](count = 0))))
    }
    {
      (35207 return(35205 call _cast byteIndex[28173](35203 call(370061 call . this[35172] c"doSearchUTF8") needle[35149] region[35168](count = 0))))
    }
  }
  { scopeless type
    byteIndex[28173]
  }
  function string[26].rfind[35226](arg _mt[35249]:_MT[238], arg this[35246]:string[26] :
  string[26], arg needle[35223] :
  string[26], arg region[35242] :
  (35231 call range[64319](?) ?[260]) =
  (35240 call _cast(35239 call range[64319](?) byteIndex[28173])(35233 call . this[35246] c"byteIndices"))) : _unknown[51] "inline" "method"
  {
    if(35287 call _cond_test(35257 call(35253 call . this[35246] c"isASCII")))
    {
      (35271 return(35269 call _cast byteIndex[28173](35267 call doSearchNoEnc this[35246] needle[35223] region[35242](count = 0)(fromLeft = 0))))
    }
    {
      (35285 return(35283 call _cast byteIndex[28173](35281 call(370076 call . this[35246] c"doSearchUTF8") needle[35223] region[35242](count = 0)(fromLeft = 0))))
    }
  }
  { scopeless type
    byteIndex[28173]
  }
  function string[26].count[35304](arg _mt[35321]:_MT[238], arg this[35318]:string[26] :
  string[26], arg needle[35301] :
  string[26], arg region[35314] :
  (35309 call range[64319](?) ?[260]) =
  (35311 call . this[35318] c"indices")) : _unknown[51] "inline" "method"
  {
    if(35349 call _cond_test(35329 call(35325 call . this[35318] c"isASCII")))
    {
      (35338 return(35337 call doSearchNoEnc this[35318] needle[35301] region[35314](count = 1)))
    }
    {
      (35347 return(35346 call(370087 call . this[35318] c"doSearchUTF8") needle[35301] region[35314](count = 1)))
    }
  }
  { scopeless type
    int(64)[13]
  }
  function string[26].replace[35366](arg _mt[35383]:_MT[238], arg this[35380]:string[26] :
  string[26], arg needle[35363] :
  string[26], arg replacement[35369] :
  string[26], arg count[35376] :
  int(64)[13] =
  (35374 call - 1)) : _unknown[51] "inline" "method"
  {
    (35393 return(35392 call doReplace this[35380] needle[35363] replacement[35369] count[35376]))
  }
  { scopeless type
    string[26]
  }
  function string[26].split[35406](arg _mt[35425]:_MT[238], arg this[35422]:string[26] :
  string[26], arg sep[35403] :
  string[26], arg maxsplit[35412] :
  int(64)[13] =
  (35410 call - 1), arg ignoreEmpty[35418] :
  bool[10] =
  0) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[35438] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[35439] "expr temp" "temp"
      (35448 'move' _iterator[35439](35446 call _getIterator(35434 call doSplit this[35422] sep[35403] maxsplit[35412] ignoreEmpty[35418])))
      Defer
      {
        {
          (35465 call _freeIterator _iterator[35439])
        }
      }
      { scopeless type
        (35454 'move' _indexOfInterest[35438](35451 call iteratorIndex _iterator[35439]))
      }
      ForLoop[35440]
      {
        unknown s[35458] "index var" "insert auto destroy"
        (35460 'move' s[35458] _indexOfInterest[35438])
        (35436 yield s[35458])
        label _continueLabel[35443]
        _indexOfInterest[35438]
        _iterator[35439]
      }
      label _breakLabel[35444]
    }
  }
  function string[26].split[35486](arg _mt[35491]:_MT[238], arg this[35488]:string[26] :
  string[26], arg maxsplit[35482] :
  int(64)[13] =
  (35480 call - 1)) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    if(35937 call _cond_test(35498 call(35494 call . this[35488] c"isASCII")))
    {
      {
        unknown _indexOfInterest[35508] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[35509] "expr temp" "temp"
        (35518 'move' _iterator[35509](35516 call _getIterator(35504 call doSplitWSNoEnc this[35488] maxsplit[35482])))
        Defer
        {
          {
            (35535 call _freeIterator _iterator[35509])
          }
        }
        { scopeless type
          (35524 'move' _indexOfInterest[35508](35521 call iteratorIndex _iterator[35509]))
        }
        ForLoop[35510]
        {
          unknown s[35528] "index var" "insert auto destroy"
          (35530 'move' s[35528] _indexOfInterest[35508])
          (35506 yield s[35528])
          label _continueLabel[35513]
          _indexOfInterest[35508]
          _iterator[35509]
        }
        label _breakLabel[35514]
      }
    }
    {
      if(35932 call _cond_test(35549 call !(35548 call(35544 call . this[35488] c"isEmpty"))))
      {
        const localThis[35558] "const"(35557 call(35553 call . this[35488] c"localize")) string[26]
        (35561 'end of statement')
        unknown done[35565] 0 bool[10]
        (35568 'end of statement')
        unknown yieldChunk[35571] 0 bool[10]
        (35574 'end of statement')
        unknown chunk[35576] string[26]
        (35579 'end of statement')
        const noSplits[35585] "const"(35583 call == maxsplit[35482] 0) bool[10]
        (35588 'end of statement')
        const limitSplits[35594] "const"(35592 call > maxsplit[35482] 0) bool[10]
        (35597 'end of statement')
        unknown splitCount[35600] 0 int(64)[13]
        (35603 'end of statement')
        const iEnd[35612] "const"(35610 call -(35606 call . localThis[35558] c"buffLen") 2) byteIndex[28173]
        (35615 'end of statement')
        unknown inChunk[35618] 0 bool[10]
        (35621 'end of statement')
        unknown chunkStart[35623] byteIndex[28173]
        (35626 'end of statement')
        {
          unknown _indexOfInterest[35877] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[35878] "expr temp" "temp"
          (35887 'move' _iterator[35878](35885 call _getIterator(35640 call(35636 call . localThis[35558] c"_cpIndexLen"))))
          Defer
          {
            {
              (35925 call _freeIterator _iterator[35878])
            }
          }
          { scopeless type
            (35893 'move' _indexOfInterest[35877](35890 call iteratorIndex _iterator[35878]))
          }
          ForLoop[35879]
          {
            (35898 call _check_tuple_var_decl _indexOfInterest[35877] 3)
            unknown c[35904] "index var" "insert auto destroy"
            (35906 'move' c[35904](35902 call _indexOfInterest[35877] 0))
            unknown i[35911] "index var" "insert auto destroy"
            (35913 'move' i[35911](35909 call _indexOfInterest[35877] 1))
            unknown nBytes[35918] "index var" "insert auto destroy"
            (35920 'move' nBytes[35918](35916 call _indexOfInterest[35877] 2))
            {
              if(35849 call _cond_test noSplits[35585])
              {
                (35644 call = done[35565] 1)
                if(35669 call _cond_test(35656 call !(35655 call(35651 call . localThis[35558] c"isSpace"))))
                {
                  (35660 call = chunk[35576] localThis[35558])
                  (35666 call = yieldChunk[35571] 1)
                }
              }
              {
                unknown cSpace[35677](35676 call codepoint_isWhitespace c[35904])
                (35680 'end of statement')
                if(35844 call _cond_test(35686 call !(35684 call || inChunk[35618] cSpace[35677])))
                {
                  (35690 call = chunkStart[35623] i[35911])
                  (35696 call = inChunk[35618] 1)
                  if(35730 call _cond_test(35707 call >(35704 call +(35701 call - i[35911] 1) nBytes[35918]) iEnd[35612]))
                  {
                    (35716 call = chunk[35576](35715 call localThis[35558](35712 call chpl_build_low_bounded_range chunkStart[35623])))
                    (35722 call = yieldChunk[35571] 1)
                    (35727 call = done[35565] 1)
                  }
                }
                {
                  if(35840 call _cond_test inChunk[35618])
                  {
                    if(35834 call _cond_test cSpace[35677])
                    {
                      (35738 call += splitCount[35600] 1)
                      if(35795 call _cond_test(35747 call && limitSplits[35594](35745 call > splitCount[35600] maxsplit[35482])))
                      {
                        (35756 call = chunk[35576](35755 call localThis[35558](35752 call chpl_build_low_bounded_range chunkStart[35623])))
                        (35762 call = yieldChunk[35571] 1)
                        (35767 call = done[35565] 1)
                      }
                      {
                        (35781 call = chunk[35576](35780 call localThis[35558](35777 call chpl_build_bounded_range chunkStart[35623](35775 call - i[35911] 1))))
                        (35787 call = yieldChunk[35571] 1)
                        (35792 call = inChunk[35618] 0)
                      }
                    }
                    {
                      if(35830 call _cond_test(35807 call >(35804 call +(35801 call - i[35911] 1) nBytes[35918]) iEnd[35612]))
                      {
                        (35816 call = chunk[35576](35815 call localThis[35558](35812 call chpl_build_low_bounded_range chunkStart[35623])))
                        (35822 call = yieldChunk[35571] 1)
                        (35827 call = done[35565] 1)
                      }
                    }
                  }
                }
              }
              if(35864 call _cond_test yieldChunk[35571])
              {
                (35856 yield chunk[35576])
                (35861 call = yieldChunk[35571] 0)
              }
              if(35872 call _cond_test done[35565])
              {
                break _breakLabel[35883] _breakLabel[35883]
              }
            }
            label _continueLabel[35882]
            _indexOfInterest[35877]
            _iterator[35878]
          }
          label _breakLabel[35883]
        }
      }
    }
  }
  function string[26].join[35953](arg _mt[35958]:_MT[238], arg this[35955]:string[26] :
  string[26], const  ref arg x[35949] ... :
  string[26]) : _unknown[51] "inline" "method"
  {
    (35965 return(35964 call(370157 call . this[35955] c"_join") x[35949]))
  }
  { scopeless type
    string[26]
  }
  function string[26].join[35976](arg _mt[35981]:_MT[238], arg this[35978]:string[26] :
  string[26], const  ref arg x[35974]:_any[178](?)) : _unknown[51] "inline" "method"
  {
    if(36028 call _cond_test(36003 call ||(35992 call !(35991 call isHomogeneousTuple x[35974]))(36001 call !(36000 call isString(35998 call x[35974] 1)))))
    {
      (36026 call compilerError "join() on tuples only handles homogeneous tuples of strings")
    }
    (36038 return(36037 call(370165 call . this[35978] c"_join") x[35974]))
  }
  where {
    (35987 call isTuple x[35974])
  }
  { scopeless type
    string[26]
  }
  function string[26].join[36054](arg _mt[36059]:_MT[238], arg this[36056]:string[26] :
  string[26], const  ref arg S[36051] :
  (36048 call chpl__buildArrayRuntimeType nil[44] string[26])) : _unknown[51] "inline" "method"
  {
    (36066 return(36065 call(370170 call . this[36056] c"_join") S[36051]))
  }
  { scopeless type
    string[26]
  }
  function string[26].strip[36095](arg _mt[36108]:_MT[238], arg this[36105]:string[26] :
  string[26], arg chars[36091] :
  string[26] =
  " \t\r\n", arg leading[36098] =
  1, arg trailing[36102] =
  1) : _unknown[51] "method"
  {
    if(36507 call _cond_test(36116 call(36112 call . this[36105] c"isASCII")))
    {
      (36124 return(36123 call doStripNoEnc this[36105] chars[36091] leading[36098] trailing[36102]))
    }
    {
      if(36152 call _cond_test(36132 call(36128 call . this[36105] c"isEmpty")))
      {
        (36150 return "")
      }
      if(36167 call _cond_test(36163 call(36159 call . chars[36091] c"isEmpty")))
      {
        (36165 return this[36105])
      }
      const localThis[36179] "const"(36178 call(36174 call . this[36105] c"localize")) string[26]
      (36182 'end of statement')
      const localChars[36190] "const"(36189 call(36185 call . chars[36091] c"localize")) string[26]
      (36193 'end of statement')
      unknown start[36196] 0 byteIndex[28173]
      (36199 'end of statement')
      unknown end[36208](36206 call -(36202 call . localThis[36179] c"buffLen") 1) byteIndex[28173]
      (36211 'end of statement')
      if(36347 call _cond_test leading[36098])
      {
        {
          unknown _indexOfInterest[36291] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36292] "expr temp" "temp"
          (36301 'move' _iterator[36292](36299 call _getIterator(36224 call(36220 call . localThis[36179] c"_cpIndexLen"))))
          Defer
          {
            {
              (36339 call _freeIterator _iterator[36292])
            }
          }
          { scopeless type
            (36307 'move' _indexOfInterest[36291](36304 call iteratorIndex _iterator[36292]))
          }
          ForLoop[36293]
          {
            (36312 call _check_tuple_var_decl _indexOfInterest[36291] 3)
            unknown thisChar[36318] "index var" "insert auto destroy"
            (36320 'move' thisChar[36318](36316 call _indexOfInterest[36291] 0))
            unknown i[36325] "index var" "insert auto destroy"
            (36327 'move' i[36325](36323 call _indexOfInterest[36291] 1))
            unknown nBytes[36332] "index var" "insert auto destroy"
            (36334 'move' nBytes[36332](36330 call _indexOfInterest[36291] 2))
            {
              {
                unknown _indexOfInterest[36253] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[36254] "expr temp" "temp"
                (36263 'move' _iterator[36254](36261 call _getIterator(36231 call(36227 call . localChars[36190] c"codepoints"))))
                Defer
                {
                  {
                    (36280 call _freeIterator _iterator[36254])
                  }
                }
                { scopeless type
                  (36269 'move' _indexOfInterest[36253](36266 call iteratorIndex _iterator[36254]))
                }
                ForLoop[36255]
                {
                  unknown removeChar[36273] "index var" "insert auto destroy"
                  (36275 'move' removeChar[36273] _indexOfInterest[36253])
                  {
                    if(36248 call _cond_test(36234 call == thisChar[36318] removeChar[36273]))
                    {
                      (36241 call = start[36196](36239 call + i[36325] nBytes[36332]))
                      continue _continueLabel[36296] _continueLabel[36296]
                    }
                  }
                  label _continueLabel[36258]
                  _indexOfInterest[36253]
                  _iterator[36254]
                }
                label _breakLabel[36259]
              }
              break _breakLabel[36297] _breakLabel[36297]
            }
            label _continueLabel[36296]
            _indexOfInterest[36291]
            _iterator[36292]
          }
          label _breakLabel[36297]
        }
      }
      if(36494 call _cond_test trailing[36102])
      {
        (36356 call = end[36208](36354 call - 1))
        {
          unknown _indexOfInterest[36439] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36440] "expr temp" "temp"
          (36449 'move' _iterator[36440](36447 call _getIterator(36372 call(36367 call . localThis[36179] c"_cpIndexLen") start[36196])))
          Defer
          {
            {
              (36487 call _freeIterator _iterator[36440])
            }
          }
          { scopeless type
            (36455 'move' _indexOfInterest[36439](36452 call iteratorIndex _iterator[36440]))
          }
          ForLoop[36441]
          {
            (36460 call _check_tuple_var_decl _indexOfInterest[36439] 3)
            unknown thisChar[36466] "index var" "insert auto destroy"
            (36468 'move' thisChar[36466](36464 call _indexOfInterest[36439] 0))
            unknown i[36473] "index var" "insert auto destroy"
            (36475 'move' i[36473](36471 call _indexOfInterest[36439] 1))
            unknown nBytes[36480] "index var" "insert auto destroy"
            (36482 'move' nBytes[36480](36478 call _indexOfInterest[36439] 2))
            {
              {
                unknown _indexOfInterest[36393] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[36394] "expr temp" "temp"
                (36403 'move' _iterator[36394](36401 call _getIterator(36379 call(36375 call . localChars[36190] c"codepoints"))))
                Defer
                {
                  {
                    (36420 call _freeIterator _iterator[36394])
                  }
                }
                { scopeless type
                  (36409 'move' _indexOfInterest[36393](36406 call iteratorIndex _iterator[36394]))
                }
                ForLoop[36395]
                {
                  unknown removeChar[36413] "index var" "insert auto destroy"
                  (36415 'move' removeChar[36413] _indexOfInterest[36393])
                  {
                    if(36388 call _cond_test(36382 call == thisChar[36466] removeChar[36413]))
                    {
                      continue _continueLabel[36444] _continueLabel[36444]
                    }
                  }
                  label _continueLabel[36398]
                  _indexOfInterest[36393]
                  _iterator[36394]
                }
                label _breakLabel[36399]
              }
              (36436 call = end[36208](36434 call -(36431 call + i[36473] nBytes[36480]) 1))
            }
            label _continueLabel[36444]
            _indexOfInterest[36439]
            _iterator[36440]
          }
          label _breakLabel[36445]
        }
      }
      (36505 return(36504 call localThis[36179](36501 call chpl_build_bounded_range start[36196] end[36208])))
    }
  }
  { scopeless type
    string[26]
  }
  function string[26].partition[36522](arg _mt[36527]:_MT[238], const arg this[36524]:string[26] :
  string[26], arg sep[36519] :
  string[26]) : _unknown[51] "inline" "method"
  {
    (36538 return(36537 call doPartition this[36524] sep[36519]))
  }
  { scopeless type
    (36531 call * 3 string[26])
  }
  function string[26].isUpper[36547](arg _mt[36552]:_MT[238], arg this[36549]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36564 call _cond_test(36560 call(36556 call . this[36549] c"isEmpty")))
    {
      (36562 return 0)
    }
    unknown result[36571] bool[10]
    (36574 'end of statement')
    const tmp[36678] "const" "temp"
    (36680 'move' tmp[36678](36676 'deref'(36585 'chpl_on_locale_num'(36584 call chpl_buildLocaleID(36579 call . this[36549] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        unknown locale_result[36587] 0
        (36590 'end of statement')
        {
          unknown _indexOfInterest[36637] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36638] "expr temp" "temp"
          (36647 'move' _iterator[36638](36645 call _getIterator(36598 call(36594 call . this[36549] c"codepoints"))))
          Defer
          {
            {
              (36664 call _freeIterator _iterator[36638])
            }
          }
          { scopeless type
            (36653 'move' _indexOfInterest[36637](36650 call iteratorIndex _iterator[36638]))
          }
          ForLoop[36639]
          {
            unknown cp[36657] "index var" "insert auto destroy"
            (36659 'move' cp[36657] _indexOfInterest[36637])
            {
              if(36631 call _cond_test(36602 call codepoint_isLower cp[36657]))
              {
                (36605 call = locale_result[36587] 0)
                break _breakLabel[36643] _breakLabel[36643]
              }
              {
                if(36627 call _cond_test(36619 call &&(36613 call ! locale_result[36587])(36618 call codepoint_isUpper cp[36657])))
                {
                  (36623 call = locale_result[36587] 1)
                }
              }
            }
            label _continueLabel[36642]
            _indexOfInterest[36637]
            _iterator[36638]
          }
          label _breakLabel[36643]
        }
        (36673 call = result[36571] locale_result[36587])
      }
      (36683 'on block' 0 tmp[36678])
    }
    (36687 return result[36571])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isLower[36695](arg _mt[36700]:_MT[238], arg this[36697]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36712 call _cond_test(36708 call(36704 call . this[36697] c"isEmpty")))
    {
      (36710 return 0)
    }
    unknown result[36719] bool[10]
    (36722 'end of statement')
    const tmp[36826] "const" "temp"
    (36828 'move' tmp[36826](36824 'deref'(36733 'chpl_on_locale_num'(36732 call chpl_buildLocaleID(36727 call . this[36697] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        unknown locale_result[36735] 0
        (36738 'end of statement')
        {
          unknown _indexOfInterest[36785] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36786] "expr temp" "temp"
          (36795 'move' _iterator[36786](36793 call _getIterator(36746 call(36742 call . this[36697] c"codepoints"))))
          Defer
          {
            {
              (36812 call _freeIterator _iterator[36786])
            }
          }
          { scopeless type
            (36801 'move' _indexOfInterest[36785](36798 call iteratorIndex _iterator[36786]))
          }
          ForLoop[36787]
          {
            unknown cp[36805] "index var" "insert auto destroy"
            (36807 'move' cp[36805] _indexOfInterest[36785])
            {
              if(36779 call _cond_test(36750 call codepoint_isUpper cp[36805]))
              {
                (36753 call = locale_result[36735] 0)
                break _breakLabel[36791] _breakLabel[36791]
              }
              {
                if(36775 call _cond_test(36767 call &&(36761 call ! locale_result[36735])(36766 call codepoint_isLower cp[36805])))
                {
                  (36771 call = locale_result[36735] 1)
                }
              }
            }
            label _continueLabel[36790]
            _indexOfInterest[36785]
            _iterator[36786]
          }
          label _breakLabel[36791]
        }
        (36821 call = result[36719] locale_result[36735])
      }
      (36831 'on block' 0 tmp[36826])
    }
    (36835 return result[36719])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isSpace[36843](arg _mt[36848]:_MT[238], arg this[36845]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36860 call _cond_test(36856 call(36852 call . this[36845] c"isEmpty")))
    {
      (36858 return 0)
    }
    unknown result[36868] 1 bool[10]
    (36871 'end of statement')
    const tmp[36947] "const" "temp"
    (36949 'move' tmp[36947](36945 'deref'(36882 'chpl_on_locale_num'(36881 call chpl_buildLocaleID(36876 call . this[36845] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        {
          unknown _indexOfInterest[36910] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[36911] "expr temp" "temp"
          (36920 'move' _iterator[36911](36918 call _getIterator(36889 call(36885 call . this[36845] c"codepoints"))))
          Defer
          {
            {
              (36937 call _freeIterator _iterator[36911])
            }
          }
          { scopeless type
            (36926 'move' _indexOfInterest[36910](36923 call iteratorIndex _iterator[36911]))
          }
          ForLoop[36912]
          {
            unknown cp[36930] "index var" "insert auto destroy"
            (36932 'move' cp[36930] _indexOfInterest[36910])
            {
              if(36905 call _cond_test(36894 call !(36893 call codepoint_isWhitespace cp[36930])))
              {
                (36898 call = result[36868] 0)
                break _breakLabel[36916] _breakLabel[36916]
              }
            }
            label _continueLabel[36915]
            _indexOfInterest[36910]
            _iterator[36911]
          }
          label _breakLabel[36916]
        }
      }
      (36952 'on block' 0 tmp[36947])
    }
    (36956 return result[36868])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isAlpha[36964](arg _mt[36969]:_MT[238], arg this[36966]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(36981 call _cond_test(36977 call(36973 call . this[36966] c"isEmpty")))
    {
      (36979 return 0)
    }
    unknown result[36989] 1 bool[10]
    (36992 'end of statement')
    const tmp[37068] "const" "temp"
    (37070 'move' tmp[37068](37066 'deref'(37003 'chpl_on_locale_num'(37002 call chpl_buildLocaleID(36997 call . this[36966] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        {
          unknown _indexOfInterest[37031] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37032] "expr temp" "temp"
          (37041 'move' _iterator[37032](37039 call _getIterator(37010 call(37006 call . this[36966] c"codepoints"))))
          Defer
          {
            {
              (37058 call _freeIterator _iterator[37032])
            }
          }
          { scopeless type
            (37047 'move' _indexOfInterest[37031](37044 call iteratorIndex _iterator[37032]))
          }
          ForLoop[37033]
          {
            unknown cp[37051] "index var" "insert auto destroy"
            (37053 'move' cp[37051] _indexOfInterest[37031])
            {
              if(37026 call _cond_test(37015 call !(37014 call codepoint_isAlpha cp[37051])))
              {
                (37019 call = result[36989] 0)
                break _breakLabel[37037] _breakLabel[37037]
              }
            }
            label _continueLabel[37036]
            _indexOfInterest[37031]
            _iterator[37032]
          }
          label _breakLabel[37037]
        }
      }
      (37073 'on block' 0 tmp[37068])
    }
    (37077 return result[36989])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isDigit[37085](arg _mt[37090]:_MT[238], arg this[37087]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37102 call _cond_test(37098 call(37094 call . this[37087] c"isEmpty")))
    {
      (37100 return 0)
    }
    unknown result[37110] 1 bool[10]
    (37113 'end of statement')
    const tmp[37189] "const" "temp"
    (37191 'move' tmp[37189](37187 'deref'(37124 'chpl_on_locale_num'(37123 call chpl_buildLocaleID(37118 call . this[37087] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        {
          unknown _indexOfInterest[37152] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37153] "expr temp" "temp"
          (37162 'move' _iterator[37153](37160 call _getIterator(37131 call(37127 call . this[37087] c"codepoints"))))
          Defer
          {
            {
              (37179 call _freeIterator _iterator[37153])
            }
          }
          { scopeless type
            (37168 'move' _indexOfInterest[37152](37165 call iteratorIndex _iterator[37153]))
          }
          ForLoop[37154]
          {
            unknown cp[37172] "index var" "insert auto destroy"
            (37174 'move' cp[37172] _indexOfInterest[37152])
            {
              if(37147 call _cond_test(37136 call !(37135 call codepoint_isDigit cp[37172])))
              {
                (37140 call = result[37110] 0)
                break _breakLabel[37158] _breakLabel[37158]
              }
            }
            label _continueLabel[37157]
            _indexOfInterest[37152]
            _iterator[37153]
          }
          label _breakLabel[37158]
        }
      }
      (37194 'on block' 0 tmp[37189])
    }
    (37198 return result[37110])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isAlnum[37206](arg _mt[37211]:_MT[238], arg this[37208]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37223 call _cond_test(37219 call(37215 call . this[37208] c"isEmpty")))
    {
      (37221 return 0)
    }
    unknown result[37231] 1 bool[10]
    (37234 'end of statement')
    const tmp[37316] "const" "temp"
    (37318 'move' tmp[37316](37314 'deref'(37245 'chpl_on_locale_num'(37244 call chpl_buildLocaleID(37239 call . this[37208] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        {
          unknown _indexOfInterest[37279] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37280] "expr temp" "temp"
          (37289 'move' _iterator[37280](37287 call _getIterator(37252 call(37248 call . this[37208] c"codepoints"))))
          Defer
          {
            {
              (37306 call _freeIterator _iterator[37280])
            }
          }
          { scopeless type
            (37295 'move' _indexOfInterest[37279](37292 call iteratorIndex _iterator[37280]))
          }
          ForLoop[37281]
          {
            unknown cp[37299] "index var" "insert auto destroy"
            (37301 'move' cp[37299] _indexOfInterest[37279])
            {
              if(37274 call _cond_test(37263 call !(37261 call ||(37256 call codepoint_isAlpha cp[37299])(37260 call codepoint_isDigit cp[37299]))))
              {
                (37267 call = result[37231] 0)
                break _breakLabel[37285] _breakLabel[37285]
              }
            }
            label _continueLabel[37284]
            _indexOfInterest[37279]
            _iterator[37280]
          }
          label _breakLabel[37285]
        }
      }
      (37321 'on block' 0 tmp[37316])
    }
    (37325 return result[37231])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isPrintable[37333](arg _mt[37338]:_MT[238], arg this[37335]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37350 call _cond_test(37346 call(37342 call . this[37335] c"isEmpty")))
    {
      (37348 return 0)
    }
    unknown result[37358] 1 bool[10]
    (37361 'end of statement')
    const tmp[37437] "const" "temp"
    (37439 'move' tmp[37437](37435 'deref'(37372 'chpl_on_locale_num'(37371 call chpl_buildLocaleID(37366 call . this[37335] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        {
          unknown _indexOfInterest[37400] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37401] "expr temp" "temp"
          (37410 'move' _iterator[37401](37408 call _getIterator(37379 call(37375 call . this[37335] c"codepoints"))))
          Defer
          {
            {
              (37427 call _freeIterator _iterator[37401])
            }
          }
          { scopeless type
            (37416 'move' _indexOfInterest[37400](37413 call iteratorIndex _iterator[37401]))
          }
          ForLoop[37402]
          {
            unknown cp[37420] "index var" "insert auto destroy"
            (37422 'move' cp[37420] _indexOfInterest[37400])
            {
              if(37395 call _cond_test(37384 call !(37383 call codepoint_isPrintable cp[37420])))
              {
                (37388 call = result[37358] 0)
                break _breakLabel[37406] _breakLabel[37406]
              }
            }
            label _continueLabel[37405]
            _indexOfInterest[37400]
            _iterator[37401]
          }
          label _breakLabel[37406]
        }
      }
      (37442 'on block' 0 tmp[37437])
    }
    (37446 return result[37358])
  }
  { scopeless type
    bool[10]
  }
  function string[26].isTitle[37454](arg _mt[37459]:_MT[238], arg this[37456]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    if(37471 call _cond_test(37467 call(37463 call . this[37456] c"isEmpty")))
    {
      (37469 return 0)
    }
    unknown result[37479] 1 bool[10]
    (37482 'end of statement')
    const tmp[37634] "const" "temp"
    (37636 'move' tmp[37634](37632 'deref'(37493 'chpl_on_locale_num'(37492 call chpl_buildLocaleID(37487 call . this[37456] c"locale_id") c_sublocid_any[89878]))))
    {
      {
        unknown UN[37495] "param" 0
        unknown UPPER[37499] "param" 1
        unknown LOWER[37503] "param" 2
        (37506 'end of statement')
        unknown last[37509] UN[37495]
        (37512 'end of statement')
        {
          unknown _indexOfInterest[37598] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[37599] "expr temp" "temp"
          (37608 'move' _iterator[37599](37606 call _getIterator(37519 call(37515 call . this[37456] c"codepoints"))))
          Defer
          {
            {
              (37625 call _freeIterator _iterator[37599])
            }
          }
          { scopeless type
            (37614 'move' _indexOfInterest[37598](37611 call iteratorIndex _iterator[37599]))
          }
          ForLoop[37600]
          {
            unknown cp[37618] "index var" "insert auto destroy"
            (37620 'move' cp[37618] _indexOfInterest[37598])
            {
              if(37592 call _cond_test(37523 call codepoint_isLower cp[37618]))
              {
                if(37549 call _cond_test(37532 call ||(37526 call == last[37509] UPPER[37499])(37530 call == last[37509] LOWER[37503])))
                {
                  (37536 call = last[37509] LOWER[37503])
                }
                {
                  (37542 call = result[37479] 0)
                  break _breakLabel[37604] _breakLabel[37604]
                }
              }
              {
                if(37588 call _cond_test(37557 call codepoint_isUpper cp[37618]))
                {
                  if(37577 call _cond_test(37560 call == last[37509] UN[37495]))
                  {
                    (37564 call = last[37509] UPPER[37499])
                  }
                  {
                    (37570 call = result[37479] 0)
                    break _breakLabel[37604] _breakLabel[37604]
                  }
                }
                {
                  (37584 call = last[37509] UN[37495])
                }
              }
            }
            label _continueLabel[37603]
            _indexOfInterest[37598]
            _iterator[37599]
          }
          label _breakLabel[37604]
        }
      }
      (37639 'on block' 0 tmp[37634])
    }
    (37643 return result[37479])
  }
  { scopeless type
    bool[10]
  }
  function string[26].toLower[37651](arg _mt[37656]:_MT[238], arg this[37653]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown result[37661] this[37653] string[26]
    (37664 'end of statement')
    if(37675 call _cond_test(37671 call(37667 call . result[37661] c"isEmpty")))
    {
      (37673 return result[37661])
    }
    {
      unknown _indexOfInterest[37731] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[37732] "expr temp" "temp"
      (37741 'move' _iterator[37732](37739 call _getIterator(37691 call(37687 call . this[37653] c"_cpIndexLen"))))
      Defer
      {
        {
          (37779 call _freeIterator _iterator[37732])
        }
      }
      { scopeless type
        (37747 'move' _indexOfInterest[37731](37744 call iteratorIndex _iterator[37732]))
      }
      ForLoop[37733]
      {
        (37752 call _check_tuple_var_decl _indexOfInterest[37731] 3)
        unknown cp[37758] "index var" "insert auto destroy"
        (37760 'move' cp[37758](37756 call _indexOfInterest[37731] 0))
        unknown i[37765] "index var" "insert auto destroy"
        (37767 'move' i[37765](37763 call _indexOfInterest[37731] 1))
        unknown nBytes[37772] "index var" "insert auto destroy"
        (37774 'move' nBytes[37772](37770 call _indexOfInterest[37731] 2))
        {
          unknown lowCodepoint[37696](37695 call codepoint_toLower cp[37758])
          (37699 'end of statement')
          if(37727 call _cond_test(37712 call &&(37703 call != lowCodepoint[37696] cp[37758])(37710 call ==(37708 call qio_nbytes_char lowCodepoint[37696]) nBytes[37772])))
          {
            (37724 call qio_encode_char_buf(37720 call +(37716 call . result[37661] c"buff") i[37765]) lowCodepoint[37696])
          }
        }
        label _continueLabel[37736]
        _indexOfInterest[37731]
        _iterator[37732]
      }
      label _breakLabel[37737]
    }
    (37787 return result[37661])
  }
  { scopeless type
    string[26]
  }
  function string[26].toUpper[37795](arg _mt[37800]:_MT[238], arg this[37797]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown result[37805] this[37797] string[26]
    (37808 'end of statement')
    if(37819 call _cond_test(37815 call(37811 call . result[37805] c"isEmpty")))
    {
      (37817 return result[37805])
    }
    {
      unknown _indexOfInterest[37875] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[37876] "expr temp" "temp"
      (37885 'move' _iterator[37876](37883 call _getIterator(37835 call(37831 call . this[37797] c"_cpIndexLen"))))
      Defer
      {
        {
          (37923 call _freeIterator _iterator[37876])
        }
      }
      { scopeless type
        (37891 'move' _indexOfInterest[37875](37888 call iteratorIndex _iterator[37876]))
      }
      ForLoop[37877]
      {
        (37896 call _check_tuple_var_decl _indexOfInterest[37875] 3)
        unknown cp[37902] "index var" "insert auto destroy"
        (37904 'move' cp[37902](37900 call _indexOfInterest[37875] 0))
        unknown i[37909] "index var" "insert auto destroy"
        (37911 'move' i[37909](37907 call _indexOfInterest[37875] 1))
        unknown nBytes[37916] "index var" "insert auto destroy"
        (37918 'move' nBytes[37916](37914 call _indexOfInterest[37875] 2))
        {
          unknown upCodepoint[37840](37839 call codepoint_toUpper cp[37902])
          (37843 'end of statement')
          if(37871 call _cond_test(37856 call &&(37847 call != upCodepoint[37840] cp[37902])(37854 call ==(37852 call qio_nbytes_char upCodepoint[37840]) nBytes[37916])))
          {
            (37868 call qio_encode_char_buf(37864 call +(37860 call . result[37805] c"buff") i[37909]) upCodepoint[37840])
          }
        }
        label _continueLabel[37880]
        _indexOfInterest[37875]
        _iterator[37876]
      }
      label _breakLabel[37881]
    }
    (37931 return result[37805])
  }
  { scopeless type
    string[26]
  }
  function string[26].toTitle[37939](arg _mt[37944]:_MT[238], arg this[37941]:string[26] :
  string[26]) : _unknown[51] "method"
  {
    unknown result[37949] this[37941] string[26]
    (37952 'end of statement')
    if(37963 call _cond_test(37959 call(37955 call . result[37949] c"isEmpty")))
    {
      (37961 return result[37949])
    }
    unknown UN[37969] "param" 0
    unknown LETTER[37973] "param" 1
    (37976 'end of statement')
    unknown last[37978] UN[37969]
    (37981 'end of statement')
    {
      unknown _indexOfInterest[38101] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[38102] "expr temp" "temp"
      (38111 'move' _iterator[38102](38109 call _getIterator(37993 call(37989 call . this[37941] c"_cpIndexLen"))))
      Defer
      {
        {
          (38149 call _freeIterator _iterator[38102])
        }
      }
      { scopeless type
        (38117 'move' _indexOfInterest[38101](38114 call iteratorIndex _iterator[38102]))
      }
      ForLoop[38103]
      {
        (38122 call _check_tuple_var_decl _indexOfInterest[38101] 3)
        unknown cp[38128] "index var" "insert auto destroy"
        (38130 'move' cp[38128](38126 call _indexOfInterest[38101] 0))
        unknown i[38135] "index var" "insert auto destroy"
        (38137 'move' i[38135](38133 call _indexOfInterest[38101] 1))
        unknown nBytes[38142] "index var" "insert auto destroy"
        (38144 'move' nBytes[38142](38140 call _indexOfInterest[38101] 2))
        {
          if(38096 call _cond_test(37997 call codepoint_isAlpha cp[38128]))
          {
            if(38085 call _cond_test(38000 call == last[37978] UN[37969]))
            {
              (38004 call = last[37978] LETTER[37973])
              unknown upCodepoint[38012](38011 call codepoint_toUpper cp[38128])
              (38015 'end of statement')
              if(38042 call _cond_test(38027 call &&(38018 call != upCodepoint[38012] cp[38128])(38025 call ==(38023 call qio_nbytes_char upCodepoint[38012]) nBytes[38142])))
              {
                (38039 call qio_encode_char_buf(38035 call +(38031 call . result[37949] c"buff") i[38135]) upCodepoint[38012])
              }
            }
            {
              unknown lowCodepoint[38050](38049 call codepoint_toLower cp[38128])
              (38053 'end of statement')
              if(38081 call _cond_test(38066 call &&(38057 call != lowCodepoint[38050] cp[38128])(38064 call ==(38062 call qio_nbytes_char lowCodepoint[38050]) nBytes[38142])))
              {
                (38078 call qio_encode_char_buf(38074 call +(38070 call . result[37949] c"buff") i[38135]) lowCodepoint[38050])
              }
            }
          }
          {
            (38092 call = last[37978] UN[37969])
          }
        }
        label _continueLabel[38106]
        _indexOfInterest[38101]
        _iterator[38102]
      }
      label _breakLabel[38107]
    }
    (38157 return result[37949])
  }
  { scopeless type
    string[26]
  }
  function =[38168](ref arg lhs[38165] :
  byteIndex[28173], arg rhs[38171] :
  int(64)[13]) : _unknown[51] "assignop" "no return value for void"
  {
    (38182 call =(38175 call . lhs[38165] c"_bindex")(38180 call _cast int(64)[13] rhs[38171]))
  }
  function =[38194](ref arg lhs[38191] :
  byteIndex[28173], const  ref arg rhs[38197] :
  byteIndex[28173]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (38208 call =(38201 call . lhs[38191] c"_bindex")(38205 call . rhs[38197] c"_bindex"))
  }
  function =[38220](ref arg lhs[38217] :
  codepointIndex[28277], arg rhs[38223] :
  int(64)[13]) : _unknown[51] "assignop" "no return value for void"
  {
    (38234 call =(38227 call . lhs[38217] c"_cpindex")(38232 call _cast int(64)[13] rhs[38223]))
  }
  function =[38246](ref arg lhs[38243] :
  codepointIndex[28277], const  ref arg rhs[38249] :
  codepointIndex[28277]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (38260 call =(38253 call . lhs[38243] c"_cpindex")(38257 call . rhs[38249] c"_cpindex"))
  }
  function =[38272](ref arg lhs[38269] :
  string[26], arg rhs[38275] :
  string[26]) : _unknown[51] "assignop" "no return value for void"
  {
    (38282 call doAssign lhs[38269] rhs[38275])
  }
  function =[38293](ref arg lhs[38290] :
  string[26], arg rhs_c[38296] :
  c_string[19]) : _unknown[51] "assignop" "no return value for void"
  {
    Try
    {
      {
        (38304 call = lhs[38290](38303 call createStringWithNewBuffer rhs_c[38296]))
      }
    }
    Catch
    {
      unknown tmp[354199] "temp"(354202 'current error')
      unknown chpl_anon_error[354205](354210 'new'(354208 call _owned[30](?)(354206 'to non nilable class' tmp[354199])))
      {
        (38330 call halt "Assigning a c_string with non-UTF-8 data")
      }
    }
  }
  function +[38345](arg s0[38342] :
  string[26], arg s1[38348] :
  string[26]) : _unknown[51]
  {
    (38356 return(38355 call doConcat s0[38342] s1[38348]))
  }
  function *[38367](arg s[38364] :
  string[26], arg n[38370] :
  integral[199](?)) : _unknown[51]
  {
    (38378 return(38377 call doMultiply s[38364] n[38370]))
  }
  function ==[38389](param arg s0[38386] :
  string[26], param arg s1[38392] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38403 return(38401 call ==(38399 'string_compare' s0[38386] s1[38392]) 0))
  }
  function !=[38414](param arg s0[38411] :
  string[26], param arg s1[38417] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38428 return(38426 call !=(38424 'string_compare' s0[38411] s1[38417]) 0))
  }
  function <=[38439](param arg a[38436] :
  string[26], param arg b[38442] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38453 return(38451 call <=(38449 'string_compare' a[38436] b[38442]) 0))
  }
  function >=[38464](param arg a[38461] :
  string[26], param arg b[38467] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38478 return(38476 call >=(38474 'string_compare' a[38461] b[38467]) 0))
  }
  function <[38489](param arg a[38486] :
  string[26], param arg b[38492] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38503 return(38501 call <(38499 'string_compare' a[38486] b[38492]) 0))
  }
  function >[38514](param arg a[38511] :
  string[26], param arg b[38517] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38528 return(38526 call >(38524 'string_compare' a[38511] b[38517]) 0))
  }
  function +[38539](param arg a[38536] :
  string[26], param arg b[38542] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38550 return(38549 'string_concat' a[38536] b[38542]))
  }
  function string[26].toByte[38558](arg _mt[38563]:_MT[238], param arg this[38560]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc"
  {
    if(38581 call _cond_test(38574 call !=(38570 call . this[38560] c"numBytes") 1))
    {
      (38579 call compilerError "string.toByte() only accepts single-byte strings")
    }
    (38591 return(38590 'ascii' this[38560]))
  }
  { scopeless type
    (38568 call uint(64)[115] 8)
  }
  function string[26].byte[38603](arg _mt[38608]:_MT[238], param arg this[38605]:string[26] :
  string[26], param arg i[38600] :
  int(64)[13]) param : _unknown[51] "inline" "method" "no doc"
  {
    if(38656 call _cond_test(38628 call ||(38616 call < i[38600] 0)(38626 call > i[38600](38624 call -(38620 call . this[38605] c"numBytes") 1))))
    {
      (38654 call compilerError(38651 call +(38648 call +(38639 call +(38636 call + "index "(38634 call _cast string[26] i[38600])) " out of bounds for string with ")(38646 call _cast string[26](38642 call . this[38605] c"numBytes"))) " bytes"))
    }
    (38667 return(38666 'ascii' this[38605] i[38600]))
  }
  { scopeless type
    (38613 call uint(64)[115] 8)
  }
  function string[26].numBytes[38675](arg _mt[38680]:_MT[238], param arg this[38677]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38686 return(38685 'string_length_bytes' this[38677]))
  }
  function string[26].numCodepoints[38694](arg _mt[38699]:_MT[238], param arg this[38696]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38721 return(38720 'string_length_codepoints' this[38696]))
  }
  function string[26].length[38729](arg _mt[38734]:_MT[238], param arg this[38731]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38742 call compilerWarning(38739 call + "'string.length' is deprecated - " "please use 'string.size' instead"))
    (38749 return(38746 call . this[38731] c"numCodepoints"))
  }
  function string[26].size[38756](arg _mt[38761]:_MT[238], param arg this[38758]:string[26] :
  string[26]) param : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    (38767 return(38764 call . this[38758] c"numCodepoints"))
  }
  function _string_contains[38778](param arg a[38775] :
  string[26], param arg b[38781] :
  string[26]) param : _unknown[51] "inline" "no doc"
  {
    (38789 return(38788 'string_contains' a[38775] b[38781]))
  }
  function +=[38800](ref arg lhs[38797] :
  string[26], const  ref arg rhs[38803] :
  string[26]) : _unknown[51] "assignop" "no return value for void"
  {
    (38811 call doAppend lhs[38797] rhs[38803])
  }
  { scopeless type
    void[4]
  }
  function ==[38823](arg a[38820] :
  string[26], arg b[38826] :
  string[26]) : _unknown[51] "no doc"
  {
    (38835 return(38834 call doEq a[38820] b[38826]))
  }
  { scopeless type
    bool[10]
  }
  function !=[38847](arg a[38844] :
  string[26], arg b[38850] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38861 return(38859 call !(38858 call doEq a[38844] b[38850])))
  }
  { scopeless type
    bool[10]
  }
  function <[38873](arg a[38870] :
  string[26], arg b[38876] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38885 return(38884 call doLessThan a[38870] b[38876]))
  }
  { scopeless type
    bool[10]
  }
  function >[38897](arg a[38894] :
  string[26], arg b[38900] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38909 return(38908 call doGreaterThan a[38894] b[38900]))
  }
  { scopeless type
    bool[10]
  }
  function <=[38921](arg a[38918] :
  string[26], arg b[38924] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38933 return(38932 call doLessThanOrEq a[38918] b[38924]))
  }
  { scopeless type
    bool[10]
  }
  function >=[38945](arg a[38942] :
  string[26], arg b[38948] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (38957 return(38956 call doGreaterThanOrEq a[38942] b[38948]))
  }
  { scopeless type
    bool[10]
  }
  (38981 'require' "wctype.h")
  unknown wint_t[38987] "extern" "no doc" "type variable"(38986 call int(64)[13] 32)
  function codepoint_isUpper[38999](arg c[38996] :
  (38995 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswupper[39008](arg wc[39005] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20552]
    }
    (39025 return(39023 call !=(39021 call iswupper(39018 call _cast wint_t[38987] c[38996])) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isLower[39039](arg c[39036] :
  (39035 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswlower[39048](arg wc[39045] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20552]
    }
    (39065 return(39063 call !=(39061 call iswlower(39058 call _cast wint_t[38987] c[39036])) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isAlpha[39079](arg c[39076] :
  (39075 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswalpha[39088](arg wc[39085] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20552]
    }
    (39105 return(39103 call !=(39101 call iswalpha(39098 call _cast wint_t[38987] c[39076])) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isDigit[39119](arg c[39116] :
  (39115 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswdigit[39128](arg wc[39125] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20552]
    }
    (39142 return(39140 call !=(39138 call iswdigit c[39116]) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isWhitespace[39156](arg c[39153] :
  (39152 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswspace[39165](arg wc[39162] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20552]
    }
    (39179 return(39177 call !=(39175 call iswspace c[39153]) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isPrintable[39193](arg c[39190] :
  (39189 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function iswprint[39202](arg wc[39199] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[20552]
    }
    (39216 return(39214 call !=(39212 call iswprint c[39190]) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_toLower[39230](arg c[39227] :
  (39226 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function towlower[39242](arg wc[39239] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      wint_t[38987]
    }
    (39262 return(39260 call _cast(39259 call int(64)[13] 32)(39255 call towlower(39252 call _cast wint_t[38987] c[39227]))))
  }
  { scopeless type
    (39235 call int(64)[13] 32)
  }
  function codepoint_toUpper[39276](arg c[39273] :
  (39272 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    function towupper[39288](arg wc[39285] :
    wint_t[38987]) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      wint_t[38987]
    }
    (39308 return(39306 call _cast(39305 call int(64)[13] 32)(39301 call towupper(39298 call _cast wint_t[38987] c[39273]))))
  }
  { scopeless type
    (39281 call int(64)[13] 32)
  }
  function codepointToString[39322](arg i[39319] :
  (39318 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    const mblength[39331] "const"(39329 call _cast int(64)[13](39327 call qio_nbytes_char i[39319]))
    (39334 'end of statement')
    unknown tmp[39348] "temp"(39347 call bufferAlloc(39344 call + mblength[39331] 1))
    (39355 call _check_tuple_var_decl tmp[39348] 2)
    unknown buffer[39336](39349 call tmp[39348] 0)
    unknown mbsize[39338](39352 call tmp[39348] 1)
    (39360 'end of statement')
    (39365 call qio_encode_char_buf buffer[39336] i[39319])
    (39372 call =(39370 call buffer[39336] mblength[39331]) 0)
    Try!
    {
      {
        (39381 return(39380 call createStringWithOwnedBuffer buffer[39336] mblength[39331] mbsize[39338]))
      }
    }
  }
  function _cast[39395](arg t[39392] :
  bufferType[172527], arg cs[39398] :
  c_string[19]) : _unknown[51] "inline" "no doc"
  {
    (39406 return(39405 'cast' t[39392] cs[39398]))
  }
  function _cast[39417](arg t[39414] :
  string[26], arg cs[39420] :
  c_string[19]) : _unknown[51] "no doc"
  {
    Try
    {
      {
        (39427 return(39426 call createStringWithNewBuffer cs[39420]))
      }
    }
    Catch
    {
      unknown tmp[354213] "temp"(354216 'current error')
      unknown chpl_anon_error[354219](354224 'new'(354222 call _owned[30](?)(354220 'to non nilable class' tmp[354213])))
      {
        (39450 call halt "Casting a non-UTF-8 c_string to string")
      }
    }
  }
  function _cast[39465](arg t[39462] :
  int(64)[13], arg cpi[39468] :
  byteIndex[28173]) : _unknown[51] "inline" "no doc"
  {
    (39475 return(39472 call . cpi[39468] c"_bindex"))
  }
  function _cast[39486](arg t[39483] :
  byteIndex[28173], arg i[39489] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    unknown cpi[39493] byteIndex[28173]
    (39496 'end of statement')
    (39503 call =(39499 call . cpi[39493] c"_bindex") i[39489])
    (39507 return cpi[39493])
  }
  function _cast[39517](arg t[39514] :
  int(64)[13], arg cpi[39520] :
  codepointIndex[28277]) : _unknown[51] "inline" "no doc"
  {
    (39527 return(39524 call . cpi[39520] c"_cpindex"))
  }
  function _cast[39538](arg t[39535] :
  codepointIndex[28277], arg i[39541] :
  int(64)[13]) : _unknown[51] "inline" "no doc"
  {
    unknown cpi[39545] codepointIndex[28277]
    (39548 'end of statement')
    (39555 call =(39551 call . cpi[39545] c"_cpindex") i[39541])
    (39559 return cpi[39545])
  }
  function chpl__defaultHash[39569](arg x[39566] :
  string[26]) : _unknown[51] "inline" "no doc"
  {
    (39576 return(39575 call getHash x[39566]))
  }
  { scopeless type
    uint(64)[115]
  }
  (355049 'used modules list'(27899 'use' ChapelStandard[20267])(27903 'use' SysCTypes[20943])(27906 'use' ByteBufferHelpers[172505])(27909 'use' BytesStringCommon[173672])(27912 'use' SysBasic[223535])(27915 'use' CString[21685])(27918 'use' StringCasts[184458])(27922 'use' BytesStringCommon[173672] 'only' encodePolicy)(27925 'use' NVStringFactory[30567]))
}