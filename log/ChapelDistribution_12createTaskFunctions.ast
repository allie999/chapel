AST dump for ChapelDistribution after pass createTaskFunctions.
Module use list: ChapelArray ChapelRange ChapelLocks ChapelHashtable Sort 

{
  function chpl__init_ChapelDistribution[415895]() : void[4] "insert line file info" "module init"
  {
    (520308 return _void[55])
  }
  function BaseDist[145926].deinit[145456](arg _mt[145930]:_MT[238], arg this[145928]:BaseDist[145926]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519584 return _void[55])
  }
  function BaseDist[145926].remove[145463](arg _mt[145934]:_MT[238], arg this[145932]:BaseDist[145926]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519588] "RVV" "temp"
    unknown free_dist[145469] "dead at end of block" "insert auto destroy"
    (543426 'init var' free_dist[145469] 0)
    (145472 'end of statement')
    unknown call_tmp[667327] "expr temp" "maybe param" "maybe type" "temp"
    (667330 'move' call_tmp[667327](145476 call(385284 call (partial) dsiTrackDomains _mt[243] this[145932])))
    unknown call_tmp[667332] "expr temp" "maybe param" "maybe type" "temp"
    (667335 'move' call_tmp[667332](145549 call _cond_test call_tmp[667327]))
    if call_tmp[667332]
    {
      const tmp[145534] "const" "temp"
      unknown call_tmp[667337] "expr temp" "maybe param" "maybe type" "temp"
      (667340 'move' call_tmp[667337](145531 '_wide_get_locale' this[145932]))
      (145536 'move' tmp[145534](145532 'deref' call_tmp[667337]))
      (935067 call on_fn[935063] tmp[145534])
      function on_fn[935063](const in arg dummy_locale_arg[935065]:chpl_localeID_t[209294]) : void[4] "on"
      {
        {
          unknown call_tmp[667342] "maybe param" "maybe type" "temp"
          (667345 'move' call_tmp[667342](145479 call - 1))
          unknown dom_count[145481] "dead at end of block" "insert auto destroy"
          (543428 'init var' dom_count[145481] call_tmp[667342])
          (145484 'end of statement')
          {
            {
              unknown call_tmp[667349] "expr temp" "maybe param" "maybe type" "temp"
              (667352 'move' call_tmp[667349](360361 call _domsLock _mt[243] this[145932]))
              (145491 call(145487 call (partial) lock _mt[243] call_tmp[667349]))
              (481237 'end of statement')
              unknown call_tmp[667358] "expr temp" "maybe param" "maybe type" "temp"
              (667361 'move' call_tmp[667358](385292 call _free_when_no_doms _mt[243] this[145932]))
              (145496 call = call_tmp[667358] 1)
              (481238 'end of statement')
              unknown call_tmp[667365] "expr temp" "maybe param" "maybe type" "temp"
              (667368 'move' call_tmp[667365](360366 call _doms _mt[243] this[145932]))
              unknown call_tmp[667372] "expr temp" "maybe param" "maybe type" "temp"
              (667375 'move' call_tmp[667372](145501 call size _mt[243] call_tmp[667365]))
              (145504 call = dom_count[145481] call_tmp[667372])
              (481239 'end of statement' dom_count[145481])
              unknown call_tmp[667379] "expr temp" "maybe param" "maybe type" "temp"
              (667382 'move' call_tmp[667379](360371 call _domsLock _mt[243] this[145932]))
              (145512 call(145508 call (partial) unlock _mt[243] call_tmp[667379]))
            }
            (145516 'local block')
          }
          unknown call_tmp[667386] "expr temp" "maybe param" "maybe type" "temp"
          (667389 'move' call_tmp[667386](145519 call == dom_count[145481] 0))
          unknown call_tmp[667391] "expr temp" "maybe param" "maybe type" "temp"
          (667394 'move' call_tmp[667391](145526 call _cond_test call_tmp[667386]))
          if call_tmp[667391]
          {
            (145523 call = free_dist[145469] 1)
            (481242 'end of statement' free_dist[145469])
          }
        }
        (935070 return _void[55])
      }
      {
      }
    }
    {
      (145545 call = free_dist[145469] 1)
      (481244 'end of statement' free_dist[145469])
    }
    unknown call_tmp[667396] "expr temp" "maybe param" "maybe type" "temp"
    (667399 'move' call_tmp[667396](145563 call _cond_test free_dist[145469]))
    if call_tmp[667396]
    {
      unknown call_tmp[667401] "expr temp" "maybe param" "maybe type" "temp"
      (667404 'move' call_tmp[667401](145557 call _to_unmanaged this[145932]))
      (519594 'move' ret[519588](519593 'coerce' call_tmp[667401] unmanaged BaseDist?[415370]))
      gotoReturn _end_remove[519586] _end_remove[519586]
    }
    {
      (519600 'move' ret[519588](519599 'coerce' nil[44] unmanaged BaseDist?[415370]))
      gotoReturn _end_remove[519586] _end_remove[519586]
    }
    label _end_remove[519586]
    (519590 return ret[519588])
  }
  { scopeless type
    unmanaged BaseDist?[415370]
  }
  function BaseDist[145926].remove_dom[145579](arg _mt[145938]:_MT[238], arg this[145936]:BaseDist[145926], arg x[145576]:unmanaged BaseDom[415316]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519606] "RVV" "temp"
    unknown call_tmp[667406] "maybe param" "maybe type" "temp"
    (667409 'move' call_tmp[667406](145583 call - 1))
    unknown count[145585] "dead at end of block" "insert auto destroy"
    (543430 'init var' count[145585] call_tmp[667406])
    (145588 'end of statement')
    const tmp[145654] "const" "temp"
    unknown call_tmp[667411] "expr temp" "maybe param" "maybe type" "temp"
    (667414 'move' call_tmp[667411](145651 '_wide_get_locale' this[145936]))
    (145656 'move' tmp[145654](145652 'deref' call_tmp[667411]))
    (935076 call on_fn[935072] tmp[145654])
    function on_fn[935072](const in arg dummy_locale_arg[935074]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[667416] "maybe param" "maybe type" "temp"
        (667419 'move' call_tmp[667416](145592 call - 1))
        unknown cnt[145594] "dead at end of block" "insert auto destroy"
        (543432 'init var' cnt[145594] call_tmp[667416])
        (145597 'end of statement')
        {
          {
            unknown call_tmp[667423] "expr temp" "maybe param" "maybe type" "temp"
            (667426 'move' call_tmp[667423](360376 call _domsLock _mt[243] this[145936]))
            (145604 call(145600 call (partial) lock _mt[243] call_tmp[667423]))
            (481248 'end of statement')
            unknown call_tmp[667432] "expr temp" "maybe param" "maybe type" "temp"
            (667435 'move' call_tmp[667432](360381 call _doms _mt[243] this[145936]))
            (145613 call(145608 call (partial) remove _mt[243] call_tmp[667432]) x[145576])
            (481249 'end of statement')
            unknown call_tmp[667441] "expr temp" "maybe param" "maybe type" "temp"
            (667444 'move' call_tmp[667441](360386 call _doms _mt[243] this[145936]))
            unknown call_tmp[667448] "expr temp" "maybe param" "maybe type" "temp"
            (667451 'move' call_tmp[667448](145617 call size _mt[243] call_tmp[667441]))
            (145620 call = cnt[145594] call_tmp[667448])
            (481250 'end of statement' cnt[145594])
            unknown call_tmp[667455] "expr temp" "maybe param" "maybe type" "temp"
            (667458 'move' call_tmp[667455](385307 call _free_when_no_doms _mt[243] this[145936]))
            unknown call_tmp[667460] "expr temp" "maybe param" "maybe type" "temp"
            (667463 'move' call_tmp[667460](145624 call ! call_tmp[667455]))
            unknown call_tmp[667465] "expr temp" "maybe param" "maybe type" "temp"
            (667468 'move' call_tmp[667465](145631 call _cond_test call_tmp[667460]))
            if call_tmp[667465]
            {
              (145628 call += cnt[145594] 1)
              (481252 'end of statement' cnt[145594])
            }
            unknown call_tmp[667472] "expr temp" "maybe param" "maybe type" "temp"
            (667475 'move' call_tmp[667472](360391 call _domsLock _mt[243] this[145936]))
            (145641 call(145637 call (partial) unlock _mt[243] call_tmp[667472]))
          }
          (145645 'local block')
        }
        (145648 call = count[145585] cnt[145594])
        (481255 'end of statement' count[145585] cnt[145594])
      }
      (935079 return _void[55])
    }
    {
    }
    unknown call_tmp[667479] "expr temp" "maybe param" "maybe type" "temp"
    (667482 'move' call_tmp[667479](145664 call == count[145585] 0))
    (519612 'move' ret[519606](519611 'coerce' call_tmp[667479] bool[10]))
    gotoReturn _end_remove_dom[519604] _end_remove_dom[519604]
    (481258 'end of statement' count[145585])
    label _end_remove_dom[519604]
    (519608 return ret[519606])
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145926].add_dom[145678](arg _mt[145942]:_MT[238], arg this[145940]:BaseDist[145926], arg x[145675]:unmanaged BaseDom[415316]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[145707] "const" "temp"
    unknown call_tmp[667484] "expr temp" "maybe param" "maybe type" "temp"
    (667487 'move' call_tmp[667484](145704 '_wide_get_locale' this[145940]))
    (145709 'move' tmp[145707](145705 'deref' call_tmp[667484]))
    (935085 call on_fn[935081] tmp[145707])
    function on_fn[935081](const in arg dummy_locale_arg[935083]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[667491] "expr temp" "maybe param" "maybe type" "temp"
        (667494 'move' call_tmp[667491](360396 call _domsLock _mt[243] this[145940]))
        (145686 call(145682 call (partial) lock _mt[243] call_tmp[667491]))
        (481260 'end of statement')
        unknown call_tmp[667500] "expr temp" "maybe param" "maybe type" "temp"
        (667503 'move' call_tmp[667500](360401 call _doms _mt[243] this[145940]))
        (145695 call(145690 call (partial) add _mt[243] call_tmp[667500]) x[145675])
        (481261 'end of statement')
        unknown call_tmp[667509] "expr temp" "maybe param" "maybe type" "temp"
        (667512 'move' call_tmp[667509](360406 call _domsLock _mt[243] this[145940]))
        (145702 call(145698 call (partial) unlock _mt[243] call_tmp[667509]))
      }
      (935088 return _void[55])
    }
    {
    }
    (519616 return _void[55])
  }
  function BaseDist[145926].dsiNewRectangularDom[145724](arg _mt[145946]:_MT[238], arg this[145944]:BaseDist[145926], param arg rank[145721]:int(64)[13], arg idxType[145726]:_any[178](?), param arg stridable[145729]:bool[10], arg inds[145732]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145753 call compilerError "rectangular domains not supported by this distribution")
    (519618 return _void[55])
  }
  function BaseDist[145926].dsiNewAssociativeDom[145762](arg _mt[145950]:_MT[238], arg this[145948]:BaseDist[145926], arg idxType[145760]:_any[178](?), param arg parSafe[145765]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145787 call compilerError "associative domains not supported by this distribution")
    (519620 return _void[55])
  }
  function BaseDist[145926].dsiNewSparseDom[145798](arg _mt[145954]:_MT[238], arg this[145952]:BaseDist[145926], param arg rank[145795]:int(64)[13], arg idxType[145800]:_any[178](?), arg dom[145803]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145825 call compilerError "sparse domains not supported by this distribution")
    (519622 return _void[55])
  }
  function BaseDist[145926].dsiSupportsPrivatization[145832](arg _mt[145958]:_MT[238], arg this[145956]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519626] "RVV" "param" "temp"
    (519631 'move' ret[519626](519630 'deref' 0))
    (519628 return ret[519626])
  }
  function BaseDist[145926].dsiRequiresPrivatization[145842](arg _mt[145962]:_MT[238], arg this[145960]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519635] "RVV" "param" "temp"
    (519640 'move' ret[519635](519639 'deref' 0))
    (519637 return ret[519635])
  }
  function BaseDist[145926].dsiDestroyDist[145852](arg _mt[145966]:_MT[238], arg this[145964]:BaseDist[145926]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519642 return _void[55])
  }
  function BaseDist[145926].dsiDisplayRepresentation[145859](arg _mt[145970]:_MT[238], arg this[145968]:BaseDist[145926]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145880 call writeln "<no way to display representation>")
    (519644 return _void[55])
  }
  function BaseDist[145926].trackDomains[145887](arg _mt[145974]:_MT[238], arg this[145972]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519648] "RVV" "param" "temp"
    (519653 'move' ret[519648](519652 'deref' 1))
    (519650 return ret[519648])
  }
  function BaseDist[145926].dsiTrackDomains[145897](arg _mt[145978]:_MT[238], arg this[145976]:BaseDist[145926]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519657] "RVV" "temp"
    (519662 'move' ret[519657](519661 'deref' 1))
    (519659 return ret[519657])
  }
  function BaseDist[145926].singleton[145907](arg _mt[145982]:_MT[238], arg this[145980]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519666] "RVV" "param" "temp"
    (519671 'move' ret[519666](519670 'deref' 0))
    (519668 return ret[519666])
  }
  function BaseDist[145926].dsiIsLayout[145917](arg _mt[145986]:_MT[238], arg this[145984]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519675] "RVV" "param" "temp"
    (519680 'move' ret[519675](519679 'deref' 0))
    (519677 return ret[519675])
  }
  function BaseDist[145926].init[786700](arg _mt[786702]:_MT[238], arg this[786703]:BaseDist[145926], in arg _doms[786714] :
  (786717 call chpl__simpleSet[204907](?) unmanaged BaseDom[415316]) =
  _typeDefaultT[250], in arg _domsLock[786729]:chpl_LocalSpinlock[187386] =
  _typeDefaultT[250], in arg _free_when_no_doms[786742]:bool[10] =
  _typeDefaultT[250], in arg pid[786755]:int(64)[13] :
  int(64)[13] =
  nullPid[113712]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[786772] "temporary of super field" "temp"
    (786774 'move' super_tmp[786772](786771 '.v' this[786703] c"super"))
    (786713 call(786711 call (partial) init _mt[243] super_tmp[786772]))
    (786807 'end of statement')
    unknown tmp[786777] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[786812] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[786824] "expr temp" "maybe param" "maybe type" "temp"
      (786827 'move' call_tmp[786824](786779 '.v' this[786703] c"super"))
      (786816 'move' call_type_tmp[786812](786782 'typeof' call_tmp[786824]))
    }
    (786783 'move' tmp[786777] call_type_tmp[786812])
    unknown call_tmp[786829] "maybe param" "maybe type" "temp"
    (786832 'move' call_tmp[786829](786788 'cast' tmp[786777] this[786703]))
    unknown chpl__thisAsParent[786785] "dead at end of block" "insert auto destroy" "temp"
    (786820 'init var' chpl__thisAsParent[786785] call_tmp[786829] tmp[786777])
    (786791 'setcid' chpl__thisAsParent[786785])
    (786793 'init field' this[786703] c"_doms" _doms[786714])
    (786808 'end of statement')
    (786796 'init field' this[786703] c"_domsLock" _domsLock[786729])
    (786799 'init field' this[786703] c"_free_when_no_doms" _free_when_no_doms[786742])
    (786809 'end of statement')
    (786802 'init field' this[786703] c"pid" pid[786755])
    (786810 'end of statement')
    (786805 'setcid' this[786703])
    (786818 return _void[55])
  }
  function BaseDist[145926].super[801112](arg _mt[801114]:_MT[238], arg this[801116]:BaseDist[145926]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801126] "RVV" "temp"
    unknown call_tmp[801133] "expr temp" "maybe param" "maybe type" "temp"
    (801136 'move' call_tmp[801133](801120 '.v' this[801116] c"super"))
    (801131 'move' ret[801126](801130 'deref' call_tmp[801133]))
    (801128 return ret[801126])
  }
  function BaseDist[145926]._doms[801138](arg _mt[801140]:_MT[238], arg this[801142]:BaseDist[145926]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801152] "RVV" "temp"
    unknown call_tmp[801159] "expr temp" "maybe param" "maybe type" "temp"
    (801162 'move' call_tmp[801159](801146 '.' this[801142] c"_doms"))
    (801157 'move' ret[801152](801156 'addr of' call_tmp[801159]))
    (801154 return ret[801152])
  }
  function BaseDist[145926]._domsLock[801164](arg _mt[801166]:_MT[238], arg this[801168]:BaseDist[145926]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801178] "RVV" "temp"
    unknown call_tmp[801185] "expr temp" "maybe param" "maybe type" "temp"
    (801188 'move' call_tmp[801185](801172 '.' this[801168] c"_domsLock"))
    (801183 'move' ret[801178](801182 'addr of' call_tmp[801185]))
    (801180 return ret[801178])
  }
  function BaseDist[145926]._free_when_no_doms[801190](arg _mt[801192]:_MT[238], arg this[801194]:BaseDist[145926]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801204] "RVV" "temp"
    unknown call_tmp[801211] "expr temp" "maybe param" "maybe type" "temp"
    (801214 'move' call_tmp[801211](801198 '.' this[801194] c"_free_when_no_doms"))
    (801209 'move' ret[801204](801208 'addr of' call_tmp[801211]))
    (801206 return ret[801204])
  }
  function BaseDist[145926].pid[801216](arg _mt[801218]:_MT[238], arg this[801220]:BaseDist[145926]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801230] "RVV" "temp"
    unknown call_tmp[801237] "expr temp" "maybe param" "maybe type" "temp"
    (801240 'move' call_tmp[801237](801224 '.' this[801220] c"pid"))
    (801235 'move' ret[801230](801234 'addr of' call_tmp[801237]))
    (801232 return ret[801230])
  }
  function BaseDist[145926].writeThis[801242](arg _mt[801246]:_MT[238], arg this[801244]:BaseDist[145926], arg f[801245]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801251 call writeThisDefaultImpl f[801245] this[801244])
    (801256 return _void[55])
  }
  function BaseDist[145926].readThis[801258](arg _mt[801262]:_MT[238], arg this[801260]:BaseDist[145926], arg f[801261]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801266 call readThisDefaultImpl f[801261] this[801260])
    (801272 return _void[55])
  }
  type BaseDist[145926] val super[355564]:object[22] "super class" unknown _doms[145434](145433 call chpl__simpleSet[204907](?) unmanaged BaseDom[415316]) val _domsLock[145439]:chpl_LocalSpinlock[187386] chpl_LocalSpinlock[187386] val _free_when_no_doms[145444]:bool[10] bool[10] val pid[145450]:int(64)[13] nullPid[113712] int(64)[13]
  type unmanaged BaseDist[415379]
  type unmanaged BaseDist?[415370]
  type BaseDist?[415367](?)
  type BaseDist[382250](?)
  function BaseDom[146725].init[146022](arg _mt[146729]:_MT[238], arg this[146727]:BaseDom[146725]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461598] "temporary of super field" "temp"
    (461606 'move' super_tmp[461598](461599 '.v' this[146727] c"super"))
    (461602 call init _mt[243] super_tmp[461598])
    (481273 'end of statement')
    unknown tmp[461533] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492224] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[667516] "expr temp" "maybe param" "maybe type" "temp"
      (667519 'move' call_tmp[667516](461535 '.v' this[146727] c"super"))
      (492228 'move' call_type_tmp[492224](461538 'typeof' call_tmp[667516]))
    }
    (461539 'move' tmp[461533] call_type_tmp[492224])
    unknown call_tmp[667521] "maybe param" "maybe type" "temp"
    (667524 'move' call_tmp[667521](461544 'cast' tmp[461533] this[146727]))
    unknown chpl__thisAsParent[461541] "dead at end of block" "insert auto destroy" "temp"
    (543434 'init var' chpl__thisAsParent[461541] call_tmp[667521] tmp[461533])
    (461547 'setcid' chpl__thisAsParent[461541])
    (481274 'end of statement')
    unknown tmp[461550] "temp"
    unknown call_tmp[667526] "expr temp" "maybe param" "maybe type" "temp"
    (667529 'move' call_tmp[667526](461553 call chpl__simpleSet[204907](?) unmanaged BaseArr[415364]))
    (461555 'default init var' tmp[461550] call_tmp[667526])
    (461557 '.=' this[146727] c"_arrs" tmp[461550])
    (481275 'end of statement')
    val tmp[461561]:int(64)[13] "temp"
    (461564 'default init var' tmp[461561] int(64)[13])
    (461566 '.=' this[146727] c"_arrs_containing_dom" tmp[461561])
    (481276 'end of statement')
    val tmp[461570]:chpl_LocalSpinlock[187386] "temp"
    (461573 'default init var' tmp[461570] chpl_LocalSpinlock[187386])
    (461575 '.=' this[146727] c"_arrsLock" tmp[461570])
    (481277 'end of statement')
    val tmp[461579]:bool[10] "temp"
    (461582 'default init var' tmp[461579] bool[10])
    (461584 '.=' this[146727] c"_free_when_no_arrs" tmp[461579])
    (481278 'end of statement')
    unknown tmp[461589] "temp"
    (461592 'init var' tmp[461589] nullPid[113712] int(64)[13])
    (461594 'init field' this[146727] c"pid" tmp[461589])
    (481279 'end of statement')
    (461609 'setcid' this[146727])
    (519682 return _void[55])
  }
  function BaseDom[146725].deinit[146029](arg _mt[146733]:_MT[238], arg this[146731]:BaseDom[146725]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519684 return _void[55])
  }
  function BaseDom[146725].dsiMyDist[146036](arg _mt[146737]:_MT[238], arg this[146735]:BaseDom[146725]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519688] "RVV" "temp"
    (146059 call halt "internal error: dsiMyDist is not implemented")
    (481281 'end of statement')
    unknown ret[146064] "dead at end of block" "insert auto destroy" "unsafe"
    (543436 'default init var' ret[146064] unmanaged BaseDist[415379])
    (146067 'end of statement')
    (519694 'move' ret[519688](519693 'coerce' ret[146064] unmanaged BaseDist[415379]))
    gotoReturn _end_dsiMyDist[519686] _end_dsiMyDist[519686]
    (481282 'end of statement' ret[146064])
    label _end_dsiMyDist[519686]
    (519690 return ret[519688])
  }
  { scopeless type
    unmanaged BaseDist[415379]
  }
  function BaseDom[146725].remove[146076](arg _mt[146741]:_MT[238], arg this[146739]:BaseDom[146725]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519700] "RVV" "temp"
    unknown call_tmp[667533] "expr temp" "maybe param" "maybe type" "temp"
    (667536 'move' call_tmp[667533](146090 call(385330 call (partial) dsiMyDist _mt[243] this[146739])))
    unknown call_tmp[667540] "expr temp" "maybe param" "maybe type" "temp"
    (667543 'move' call_tmp[667540](146097 call(146093 call (partial) dsiTrackDomains _mt[243] call_tmp[667533])))
    unknown call_tmp[667547] "expr temp" "maybe param" "maybe type" "temp"
    (667550 'move' call_tmp[667547](146100 call(385336 call (partial) dsiLinksDistribution _mt[243] this[146739])))
    unknown call_tmp[667552] "expr temp" "maybe param" "maybe type" "temp"
    (667555 'move' call_tmp[667552](146101 call == call_tmp[667540] call_tmp[667547]))
    (146104 call assert call_tmp[667552])
    (481284 'end of statement')
    unknown ret_dom[146111] "dead at end of block" "insert auto destroy"
    (543438 'init var' ret_dom[146111] nil[44] unmanaged BaseDom?[415376])
    (146114 'end of statement')
    unknown ret_dist[146119] "dead at end of block" "insert auto destroy"
    (543440 'init var' ret_dist[146119] nil[44] unmanaged BaseDist?[415370])
    (146122 'end of statement')
    unknown call_tmp[667559] "maybe param" "maybe type" "temp"
    (667562 'move' call_tmp[667559](146125 call(385342 call (partial) dsiMyDist _mt[243] this[146739])))
    unknown dist[146126] "dead at end of block" "insert auto destroy"
    (543442 'init var' dist[146126] call_tmp[667559])
    (146129 'end of statement')
    unknown free_dom[146131] "dead at end of block" "insert auto destroy"
    (543444 'init var' free_dom[146131] 0)
    (146134 'end of statement')
    unknown remove_dist[146136] "dead at end of block" "insert auto destroy"
    (543446 'init var' remove_dist[146136] 0)
    (146139 'end of statement')
    const tmp[146224] "const" "temp"
    unknown call_tmp[667564] "expr temp" "maybe param" "maybe type" "temp"
    (667567 'move' call_tmp[667564](146221 '_wide_get_locale' this[146739]))
    (146226 'move' tmp[146224](146222 'deref' call_tmp[667564]))
    (935094 call on_fn[935090] tmp[146224])
    function on_fn[935090](const in arg dummy_locale_arg[935092]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown arr_count[146142] "dead at end of block" "insert auto destroy"
        (543448 'init var' arr_count[146142] 0)
        (146145 'end of statement')
        {
          {
            unknown call_tmp[667571] "expr temp" "maybe param" "maybe type" "temp"
            (667574 'move' call_tmp[667571](360413 call _arrsLock _mt[243] this[146739]))
            (146152 call(146148 call (partial) lock _mt[243] call_tmp[667571]))
            (481285 'end of statement')
            unknown call_tmp[667580] "expr temp" "maybe param" "maybe type" "temp"
            (667583 'move' call_tmp[667580](360418 call _arrs _mt[243] this[146739]))
            unknown call_tmp[667587] "expr temp" "maybe param" "maybe type" "temp"
            (667590 'move' call_tmp[667587](146157 call size _mt[243] call_tmp[667580]))
            (146160 call = arr_count[146142] call_tmp[667587])
            (481286 'end of statement' arr_count[146142])
            unknown call_tmp[667594] "expr temp" "maybe param" "maybe type" "temp"
            (667597 'move' call_tmp[667594](385352 call _arrs_containing_dom _mt[243] this[146739]))
            (146165 call += arr_count[146142] call_tmp[667594])
            (481288 'end of statement' arr_count[146142])
            unknown call_tmp[667601] "expr temp" "maybe param" "maybe type" "temp"
            (667604 'move' call_tmp[667601](385357 call _free_when_no_arrs _mt[243] this[146739]))
            (146170 call = call_tmp[667601] 1)
            (481290 'end of statement')
            unknown call_tmp[667608] "expr temp" "maybe param" "maybe type" "temp"
            (667611 'move' call_tmp[667608](360423 call _arrsLock _mt[243] this[146739]))
            (146178 call(146174 call (partial) unlock _mt[243] call_tmp[667608]))
          }
          (146182 'local block')
        }
        unknown call_tmp[667615] "expr temp" "maybe param" "maybe type" "temp"
        (667618 'move' call_tmp[667615](146185 call == arr_count[146142] 0))
        unknown call_tmp[667620] "expr temp" "maybe param" "maybe type" "temp"
        (667623 'move' call_tmp[667620](146217 call _cond_test call_tmp[667615]))
        if call_tmp[667620]
        {
          (146189 call = free_dom[146131] 1)
          (481292 'end of statement' free_dom[146131])
          unknown call_tmp[667627] "expr temp" "maybe param" "maybe type" "temp"
          (667630 'move' call_tmp[667627](146195 call(385363 call (partial) dsiLinksDistribution _mt[243] this[146739])))
          unknown call_tmp[667632] "expr temp" "maybe param" "maybe type" "temp"
          (667635 'move' call_tmp[667632](146213 call _cond_test call_tmp[667627]))
          if call_tmp[667632]
          {
            unknown call_tmp[667639] "expr temp" "maybe param" "maybe type" "temp"
            (667642 'move' call_tmp[667639](146206 call _to_unmanaged this[146739]))
            unknown call_tmp[667644] "expr temp" "maybe param" "maybe type" "temp"
            (667647 'move' call_tmp[667644](146208 call(146200 call (partial) remove_dom _mt[243] dist[146126]) call_tmp[667639]))
            (146209 call = remove_dist[146136] call_tmp[667644])
            (481294 'end of statement' remove_dist[146136] dist[146126])
          }
        }
      }
      (935097 return _void[55])
    }
    {
    }
    unknown call_tmp[667649] "expr temp" "maybe param" "maybe type" "temp"
    (667652 'move' call_tmp[667649](146241 call _cond_test free_dom[146131]))
    if call_tmp[667649]
    {
      unknown call_tmp[667654] "expr temp" "maybe param" "maybe type" "temp"
      (667657 'move' call_tmp[667654](146237 call _to_unmanaged this[146739]))
      (146238 call = ret_dom[146111] call_tmp[667654])
      (481297 'end of statement' ret_dom[146111])
    }
    unknown call_tmp[667659] "expr temp" "maybe param" "maybe type" "temp"
    (667662 'move' call_tmp[667659](146252 call _cond_test remove_dist[146136]))
    if call_tmp[667659]
    {
      (146249 call = ret_dist[146119] dist[146126])
      (481299 'end of statement' ret_dist[146119] dist[146126])
    }
    unknown call_tmp[667664] "expr temp" "maybe param" "maybe type" "temp"
    (667667 'move' call_tmp[667664](146260 call _build_tuple ret_dom[146111] ret_dist[146119]))
    unknown call_tmp[667669] "expr temp" "maybe param" "maybe type" "temp"
    (667672 'move' call_tmp[667669](519705 call _build_tuple unmanaged BaseDom?[415376] unmanaged BaseDist?[415370]))
    (519709 'move' ret[519700](519708 'coerce' call_tmp[667664] call_tmp[667669]))
    gotoReturn _end_remove[519698] _end_remove[519698]
    (481302 'end of statement' ret_dom[146111] ret_dist[146119])
    label _end_remove[519698]
    (519702 return ret[519700])
  }
  { scopeless type
    (146085 call _build_tuple unmanaged BaseDom?[415376] unmanaged BaseDist?[415370])
  }
  function BaseDom[146725].remove_arr[146274](arg _mt[146745]:_MT[238], arg this[146743]:BaseDom[146725], arg x[146271]:unmanaged BaseArr[415364], param arg rmFromList[146277] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519715] "RVV" "temp"
    unknown call_tmp[667674] "maybe param" "maybe type" "temp"
    (667677 'move' call_tmp[667674](146282 call - 1))
    unknown count[146284] "dead at end of block" "insert auto destroy"
    (543450 'init var' count[146284] call_tmp[667674])
    (146287 'end of statement')
    const tmp[146370] "const" "temp"
    unknown call_tmp[667679] "expr temp" "maybe param" "maybe type" "temp"
    (667682 'move' call_tmp[667679](146367 '_wide_get_locale' this[146743]))
    (146372 'move' tmp[146370](146368 'deref' call_tmp[667679]))
    (935103 call on_fn[935099] tmp[146370])
    function on_fn[935099](const in arg dummy_locale_arg[935101]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[667684] "maybe param" "maybe type" "temp"
        (667687 'move' call_tmp[667684](146291 call - 1))
        unknown cnt[146293] "dead at end of block" "insert auto destroy"
        (543452 'init var' cnt[146293] call_tmp[667684])
        (146296 'end of statement')
        {
          {
            unknown call_tmp[667691] "expr temp" "maybe param" "maybe type" "temp"
            (667694 'move' call_tmp[667691](360429 call _arrsLock _mt[243] this[146743]))
            (146303 call(146299 call (partial) lock _mt[243] call_tmp[667691]))
            (481305 'end of statement')
            unknown call_tmp[667698] "expr temp" "maybe param" "maybe type" "temp"
            (667701 'move' call_tmp[667698](146320 call _cond_test rmFromList[146277]))
            if call_tmp[667698]
            {
              unknown call_tmp[667705] "expr temp" "maybe param" "maybe type" "temp"
              (667708 'move' call_tmp[667705](360434 call _arrs _mt[243] this[146743]))
              (146313 call(146308 call (partial) remove _mt[243] call_tmp[667705]) x[146271])
            }
            {
              unknown call_tmp[667714] "expr temp" "maybe param" "maybe type" "temp"
              (667717 'move' call_tmp[667714](385382 call _arrs_containing_dom _mt[243] this[146743]))
              (146317 call -= call_tmp[667714] 1)
            }
            unknown call_tmp[667721] "expr temp" "maybe param" "maybe type" "temp"
            (667724 'move' call_tmp[667721](360439 call _arrs _mt[243] this[146743]))
            unknown call_tmp[667728] "expr temp" "maybe param" "maybe type" "temp"
            (667731 'move' call_tmp[667728](146328 call size _mt[243] call_tmp[667721]))
            (146331 call = cnt[146293] call_tmp[667728])
            (481308 'end of statement' cnt[146293])
            unknown call_tmp[667735] "expr temp" "maybe param" "maybe type" "temp"
            (667738 'move' call_tmp[667735](385389 call _arrs_containing_dom _mt[243] this[146743]))
            (146336 call += cnt[146293] call_tmp[667735])
            (481310 'end of statement' cnt[146293])
            unknown call_tmp[667742] "expr temp" "maybe param" "maybe type" "temp"
            (667745 'move' call_tmp[667742](385394 call _free_when_no_arrs _mt[243] this[146743]))
            unknown call_tmp[667747] "expr temp" "maybe param" "maybe type" "temp"
            (667750 'move' call_tmp[667747](146340 call ! call_tmp[667742]))
            unknown call_tmp[667752] "expr temp" "maybe param" "maybe type" "temp"
            (667755 'move' call_tmp[667752](146347 call _cond_test call_tmp[667747]))
            if call_tmp[667752]
            {
              (146344 call += cnt[146293] 1)
              (481312 'end of statement' cnt[146293])
            }
            unknown call_tmp[667759] "expr temp" "maybe param" "maybe type" "temp"
            (667762 'move' call_tmp[667759](360444 call _arrsLock _mt[243] this[146743]))
            (146357 call(146353 call (partial) unlock _mt[243] call_tmp[667759]))
          }
          (146361 'local block')
        }
        (146364 call = count[146284] cnt[146293])
        (481315 'end of statement' count[146284] cnt[146293])
      }
      (935106 return _void[55])
    }
    {
    }
    unknown call_tmp[667766] "expr temp" "maybe param" "maybe type" "temp"
    (667769 'move' call_tmp[667766](146380 call == count[146284] 0))
    (519721 'move' ret[519715](519720 'coerce' call_tmp[667766] bool[10]))
    gotoReturn _end_remove_arr[519713] _end_remove_arr[519713]
    (481318 'end of statement' count[146284])
    label _end_remove_arr[519713]
    (519717 return ret[519715])
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146725].add_arr[146394](arg _mt[146749]:_MT[238], arg this[146747]:BaseDom[146725], arg x[146391]:unmanaged BaseArr[415364], param arg locking[146397] :
  1 =
  1, param arg addToList[146401] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146455] "const" "temp"
    unknown call_tmp[667771] "expr temp" "maybe param" "maybe type" "temp"
    (667774 'move' call_tmp[667771](146452 '_wide_get_locale' this[146747]))
    (146457 'move' tmp[146455](146453 'deref' call_tmp[667771]))
    (935112 call on_fn[935108] tmp[146455])
    function on_fn[935108](const in arg dummy_locale_arg[935110]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[667776] "expr temp" "maybe param" "maybe type" "temp"
        (667779 'move' call_tmp[667776](146413 call _cond_test locking[146397]))
        if call_tmp[667776]
        {
          unknown call_tmp[667783] "expr temp" "maybe param" "maybe type" "temp"
          (667786 'move' call_tmp[667783](360449 call _arrsLock _mt[243] this[146747]))
          (146411 call(146407 call (partial) lock _mt[243] call_tmp[667783]))
        }
        unknown call_tmp[667790] "expr temp" "maybe param" "maybe type" "temp"
        (667793 'move' call_tmp[667790](146433 call _cond_test addToList[146401]))
        if call_tmp[667790]
        {
          unknown call_tmp[667797] "expr temp" "maybe param" "maybe type" "temp"
          (667800 'move' call_tmp[667797](360454 call _arrs _mt[243] this[146747]))
          (146426 call(146421 call (partial) add _mt[243] call_tmp[667797]) x[146391])
        }
        {
          unknown call_tmp[667806] "expr temp" "maybe param" "maybe type" "temp"
          (667809 'move' call_tmp[667806](385408 call _arrs_containing_dom _mt[243] this[146747]))
          (146430 call += call_tmp[667806] 1)
        }
        unknown call_tmp[667811] "expr temp" "maybe param" "maybe type" "temp"
        (667814 'move' call_tmp[667811](146447 call _cond_test locking[146397]))
        if call_tmp[667811]
        {
          unknown call_tmp[667818] "expr temp" "maybe param" "maybe type" "temp"
          (667821 'move' call_tmp[667818](360459 call _arrsLock _mt[243] this[146747]))
          (146445 call(146441 call (partial) unlock _mt[243] call_tmp[667818]))
        }
      }
      (935115 return _void[55])
    }
    {
    }
    (519725 return _void[55])
  }
  function BaseDom[146725].remove_containing_arr[146473](arg _mt[146753]:_MT[238], arg this[146751]:BaseDom[146725], arg x[146470]:unmanaged BaseArr[415364]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519729] "RVV" "temp"
    unknown call_tmp[667825] "maybe param" "maybe type" "temp"
    (667828 'move' call_tmp[667825](146476 call - 1))
    unknown count[146478] "dead at end of block" "insert auto destroy"
    (543454 'init var' count[146478] call_tmp[667825])
    (146481 'end of statement')
    const tmp[146545] "const" "temp"
    unknown call_tmp[667830] "expr temp" "maybe param" "maybe type" "temp"
    (667833 'move' call_tmp[667830](146542 '_wide_get_locale' this[146751]))
    (146547 'move' tmp[146545](146543 'deref' call_tmp[667830]))
    (935121 call on_fn[935117] tmp[146545])
    function on_fn[935117](const in arg dummy_locale_arg[935119]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[667835] "maybe param" "maybe type" "temp"
        (667838 'move' call_tmp[667835](146485 call - 1))
        unknown cnt[146487] "dead at end of block" "insert auto destroy"
        (543456 'init var' cnt[146487] call_tmp[667835])
        (146490 'end of statement')
        unknown call_tmp[667842] "expr temp" "maybe param" "maybe type" "temp"
        (667845 'move' call_tmp[667842](360464 call _arrsLock _mt[243] this[146751]))
        (146497 call(146493 call (partial) lock _mt[243] call_tmp[667842]))
        (481324 'end of statement')
        unknown call_tmp[667851] "expr temp" "maybe param" "maybe type" "temp"
        (667854 'move' call_tmp[667851](385416 call _arrs_containing_dom _mt[243] this[146751]))
        (146501 call -= call_tmp[667851] 1)
        (481325 'end of statement')
        unknown call_tmp[667858] "expr temp" "maybe param" "maybe type" "temp"
        (667861 'move' call_tmp[667858](360469 call _arrs _mt[243] this[146751]))
        unknown call_tmp[667865] "expr temp" "maybe param" "maybe type" "temp"
        (667868 'move' call_tmp[667865](146506 call size _mt[243] call_tmp[667858]))
        (146509 call = cnt[146487] call_tmp[667865])
        (481326 'end of statement' cnt[146487])
        unknown call_tmp[667872] "expr temp" "maybe param" "maybe type" "temp"
        (667875 'move' call_tmp[667872](385423 call _arrs_containing_dom _mt[243] this[146751]))
        (146514 call += cnt[146487] call_tmp[667872])
        (481328 'end of statement' cnt[146487])
        unknown call_tmp[667879] "expr temp" "maybe param" "maybe type" "temp"
        (667882 'move' call_tmp[667879](385428 call _free_when_no_arrs _mt[243] this[146751]))
        unknown call_tmp[667884] "expr temp" "maybe param" "maybe type" "temp"
        (667887 'move' call_tmp[667884](146518 call ! call_tmp[667879]))
        unknown call_tmp[667889] "expr temp" "maybe param" "maybe type" "temp"
        (667892 'move' call_tmp[667889](146525 call _cond_test call_tmp[667884]))
        if call_tmp[667889]
        {
          (146522 call += cnt[146487] 1)
          (481330 'end of statement' cnt[146487])
        }
        unknown call_tmp[667896] "expr temp" "maybe param" "maybe type" "temp"
        (667899 'move' call_tmp[667896](360474 call _arrsLock _mt[243] this[146751]))
        (146535 call(146531 call (partial) unlock _mt[243] call_tmp[667896]))
        (481332 'end of statement')
        (146539 call = count[146478] cnt[146487])
        (481333 'end of statement' count[146478] cnt[146487])
      }
      (935124 return _void[55])
    }
    {
    }
    unknown call_tmp[667903] "expr temp" "maybe param" "maybe type" "temp"
    (667906 'move' call_tmp[667903](146555 call == count[146478] 0))
    (519734 'move' ret[519729](519733 'deref' call_tmp[667903]))
    gotoReturn _end_remove_containing_arr[519727] _end_remove_containing_arr[519727]
    (481336 'end of statement' count[146478])
    label _end_remove_containing_arr[519727]
    (519731 return ret[519729])
  }
  function BaseDom[146725].add_containing_arr[146568](arg _mt[146757]:_MT[238], arg this[146755]:BaseDom[146725], arg x[146565]:unmanaged BaseArr[415364]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146594] "const" "temp"
    unknown call_tmp[667908] "expr temp" "maybe param" "maybe type" "temp"
    (667911 'move' call_tmp[667908](146591 '_wide_get_locale' this[146755]))
    (146596 'move' tmp[146594](146592 'deref' call_tmp[667908]))
    (935130 call on_fn[935126] tmp[146594])
    function on_fn[935126](const in arg dummy_locale_arg[935128]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[667915] "expr temp" "maybe param" "maybe type" "temp"
        (667918 'move' call_tmp[667915](360479 call _arrsLock _mt[243] this[146755]))
        (146576 call(146572 call (partial) lock _mt[243] call_tmp[667915]))
        (481338 'end of statement')
        unknown call_tmp[667924] "expr temp" "maybe param" "maybe type" "temp"
        (667927 'move' call_tmp[667924](385439 call _arrs_containing_dom _mt[243] this[146755]))
        (146581 call += call_tmp[667924] 1)
        (481339 'end of statement')
        unknown call_tmp[667931] "expr temp" "maybe param" "maybe type" "temp"
        (667934 'move' call_tmp[667931](360484 call _arrsLock _mt[243] this[146755]))
        (146589 call(146585 call (partial) unlock _mt[243] call_tmp[667931]))
      }
      (935133 return _void[55])
    }
    {
    }
    (519738 return _void[55])
  }
  function BaseDom[146725].dsiSupportsPrivatization[146607](arg _mt[146761]:_MT[238], arg this[146759]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519742] "RVV" "param" "temp"
    (519747 'move' ret[519742](519746 'deref' 0))
    (519744 return ret[519742])
  }
  function BaseDom[146725].dsiRequiresPrivatization[146617](arg _mt[146765]:_MT[238], arg this[146763]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519751] "RVV" "param" "temp"
    (519756 'move' ret[519751](519755 'deref' 0))
    (519753 return ret[519751])
  }
  function BaseDom[146725].linksDistribution[146627](arg _mt[146769]:_MT[238], arg this[146767]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519760] "RVV" "param" "temp"
    (519765 'move' ret[519760](519764 'deref' 1))
    (519762 return ret[519760])
  }
  function BaseDom[146725].dsiLinksDistribution[146637](arg _mt[146773]:_MT[238], arg this[146771]:BaseDom[146725]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519769] "RVV" "temp"
    (519774 'move' ret[519769](519773 'deref' 1))
    (519771 return ret[519769])
  }
  function BaseDom[146725].dsiDestroyDom[146647](arg _mt[146777]:_MT[238], arg this[146775]:BaseDom[146725]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519776 return _void[55])
  }
  function BaseDom[146725].dsiDisplayRepresentation[146654](arg _mt[146781]:_MT[238], arg this[146779]:BaseDom[146725]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146659 call writeln "<no way to display representation>")
    (519778 return _void[55])
  }
  function BaseDom[146725].dsiSupportsAutoLocalAccess[146666](arg _mt[146785]:_MT[238], arg this[146783]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519782] "RVV" "param" "temp"
    (519787 'move' ret[519782](519786 'deref' 0))
    (519784 return ret[519782])
  }
  function BaseDom[415211](?).isDefaultRectangular[146676](arg _mt[146789]:_MT[238], arg this[146787]:BaseDom[415211](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519791] "RVV" "param" "temp"
    (519796 'move' ret[519791](519795 'deref' 0))
    (519793 return ret[519791])
  }
  function BaseDom[146725].isDefaultRectangular[146686](arg _mt[146793]:_MT[238], arg this[146791]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519800] "RVV" "param" "temp"
    (519805 'move' ret[519800](519804 'deref' 0))
    (519802 return ret[519800])
  }
  function BaseDom[146725].isSliceDomainView[146696](arg _mt[146797]:_MT[238], arg this[146795]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519809] "RVV" "param" "temp"
    (519814 'move' ret[519809](519813 'deref' 0))
    (519811 return ret[519809])
  }
  function BaseDom[146725].isRankChangeDomainView[146706](arg _mt[146801]:_MT[238], arg this[146799]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519818] "RVV" "param" "temp"
    (519823 'move' ret[519818](519822 'deref' 0))
    (519820 return ret[519818])
  }
  function BaseDom[146725].isReindexDomainView[146716](arg _mt[146805]:_MT[238], arg this[146803]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519827] "RVV" "param" "temp"
    (519832 'move' ret[519827](519831 'deref' 0))
    (519829 return ret[519827])
  }
  function BaseDom[146725].super[801274](arg _mt[801276]:_MT[238], arg this[801278]:BaseDom[146725]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801288] "RVV" "temp"
    unknown call_tmp[801295] "expr temp" "maybe param" "maybe type" "temp"
    (801298 'move' call_tmp[801295](801282 '.v' this[801278] c"super"))
    (801293 'move' ret[801288](801292 'deref' call_tmp[801295]))
    (801290 return ret[801288])
  }
  function BaseDom[146725]._arrs[801300](arg _mt[801302]:_MT[238], arg this[801304]:BaseDom[146725]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801314] "RVV" "temp"
    unknown call_tmp[801321] "expr temp" "maybe param" "maybe type" "temp"
    (801324 'move' call_tmp[801321](801308 '.' this[801304] c"_arrs"))
    (801319 'move' ret[801314](801318 'addr of' call_tmp[801321]))
    (801316 return ret[801314])
  }
  function BaseDom[146725]._arrs_containing_dom[801326](arg _mt[801328]:_MT[238], arg this[801330]:BaseDom[146725]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801340] "RVV" "temp"
    unknown call_tmp[801347] "expr temp" "maybe param" "maybe type" "temp"
    (801350 'move' call_tmp[801347](801334 '.' this[801330] c"_arrs_containing_dom"))
    (801345 'move' ret[801340](801344 'addr of' call_tmp[801347]))
    (801342 return ret[801340])
  }
  function BaseDom[146725]._arrsLock[801352](arg _mt[801354]:_MT[238], arg this[801356]:BaseDom[146725]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801366] "RVV" "temp"
    unknown call_tmp[801373] "expr temp" "maybe param" "maybe type" "temp"
    (801376 'move' call_tmp[801373](801360 '.' this[801356] c"_arrsLock"))
    (801371 'move' ret[801366](801370 'addr of' call_tmp[801373]))
    (801368 return ret[801366])
  }
  function BaseDom[146725]._free_when_no_arrs[801378](arg _mt[801380]:_MT[238], arg this[801382]:BaseDom[146725]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801392] "RVV" "temp"
    unknown call_tmp[801399] "expr temp" "maybe param" "maybe type" "temp"
    (801402 'move' call_tmp[801399](801386 '.' this[801382] c"_free_when_no_arrs"))
    (801397 'move' ret[801392](801396 'addr of' call_tmp[801399]))
    (801394 return ret[801392])
  }
  function BaseDom[146725].pid[801404](arg _mt[801406]:_MT[238], arg this[801408]:BaseDom[146725]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801418] "RVV" "temp"
    unknown call_tmp[801425] "expr temp" "maybe param" "maybe type" "temp"
    (801428 'move' call_tmp[801425](801412 '.' this[801408] c"pid"))
    (801423 'move' ret[801418](801422 'addr of' call_tmp[801425]))
    (801420 return ret[801418])
  }
  function BaseDom[146725].writeThis[801430](arg _mt[801434]:_MT[238], arg this[801432]:BaseDom[146725], arg f[801433]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801439 call writeThisDefaultImpl f[801433] this[801432])
    (801444 return _void[55])
  }
  function BaseDom[146725].readThis[801446](arg _mt[801450]:_MT[238], arg this[801448]:BaseDom[146725], arg f[801449]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801454 call readThisDefaultImpl f[801449] this[801448])
    (801460 return _void[55])
  }
  type BaseDom[146725] val super[355568]:object[22] "super class" unknown _arrs[145995](145994 call chpl__simpleSet[204907](?) unmanaged BaseArr[415364]) val _arrs_containing_dom[146000]:int(64)[13] int(64)[13] val _arrsLock[146005]:chpl_LocalSpinlock[187386] chpl_LocalSpinlock[187386] val _free_when_no_arrs[146010]:bool[10] bool[10] val pid[146016]:int(64)[13] nullPid[113712] int(64)[13]
  type unmanaged BaseDom?[415376]
  type BaseDom?[415373](?)
  type unmanaged BaseDom[415316]
  type BaseDom[415211](?)
  type BaseDom[372655](?)
  function BaseRectangularDom[146893](?).getBaseArrType[146826](arg _mt[146897]:_MT[238], arg this[146895]:BaseRectangularDom[146893](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[519836] "RVV" "temp" "type variable"
    unknown call_tmp[667940] "expr temp" "maybe param" "maybe type" "temp"
    (667943 'move' call_tmp[667940](385448 call rank _mt[243] this[146895]))
    unknown call_tmp[667947] "expr temp" "maybe param" "maybe type" "temp"
    (667950 'move' call_tmp[667947](385453 call idxType _mt[243] this[146895]))
    unknown call_tmp[667954] "expr temp" "maybe param" "maybe type" "temp"
    (667957 'move' call_tmp[667954](385458 call stridable _mt[243] this[146895]))
    unknown call_tmp[667959] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (667962 'move' call_tmp[667959](747804 'new' BaseArrOverRectangularDom[385443](?)(rank = call_tmp[667940])(idxType = call_tmp[667947])(stridable = call_tmp[667954])(_chpl_manager = unmanaged[220](?))))
    unknown tmp[146840] "dead at end of block" "insert auto destroy"
    (543458 'init var' tmp[146840] call_tmp[667959])
    (146843 'end of statement')
    unknown call_tmp[667964] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667967 'move' call_tmp[667964](146846 'typeof' tmp[146840]))
    (519841 'move' ret[519836](519840 'deref' call_tmp[667964]))
    gotoReturn _end_getBaseArrType[519834] _end_getBaseArrType[519834]
    (481352 'end of statement' tmp[146840])
    label _end_getBaseArrType[519834]
    (519838 return ret[519836])
  }
  function BaseRectangularDom[146893](?).deinit[146853](arg _mt[146901]:_MT[238], arg this[146899]:BaseRectangularDom[146893](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519845 return _void[55])
  }
  function BaseRectangularDom[146893](?).dsiAdd[146862](arg _mt[146905]:_MT[238], arg this[146903]:BaseRectangularDom[146893](?), in arg x[146860]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519849] "RVV" "temp"
    (146867 call compilerError "Cannot add indices to a rectangular domain")
    (481354 'end of statement')
    (519854 'move' ret[519849](519853 'deref' 0))
    (519851 return ret[519849])
  }
  function BaseRectangularDom[146893](?).dsiRemove[146879](arg _mt[146909]:_MT[238], arg this[146907]:BaseRectangularDom[146893](?), arg x[146877]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519858] "RVV" "temp"
    (146884 call compilerError "Cannot remove indices from a rectangular domain")
    (481356 'end of statement')
    (519863 'move' ret[519858](519862 'deref' 0))
    (519860 return ret[519858])
  }
  function BaseRectangularDom[146893](?).super[801462](arg _mt[801464]:_MT[238], arg this[801466]:BaseRectangularDom[146893](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801476] "RVV" "temp"
    unknown call_tmp[801483] "expr temp" "maybe param" "maybe type" "temp"
    (801486 'move' call_tmp[801483](801470 '.v' this[801466] c"super"))
    (801481 'move' ret[801476](801480 'deref' call_tmp[801483]))
    (801478 return ret[801476])
  }
  function BaseRectangularDom[801493](?).rank[801488](arg _mt[801490]:_MT[238], arg this[801495]:BaseRectangularDom[801493](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801526] "RVV" "param" "temp"
    unknown borrowOfThis[801497]
    (801518 'end of statement')
    (801499 'move' borrowOfThis[801497](801502 call _cast _borrowedNonNilable[214](?) this[801495]))
    (801519 'end of statement' borrowOfThis[801497])
    unknown call_tmp[801540] "expr temp" "maybe param" "maybe type" "temp"
    (801543 'move' call_tmp[801540](801508 'is bound' borrowOfThis[801497] c"rank"))
    if call_tmp[801540]
    {
      unknown call_tmp[801545] "expr temp" "maybe param" "maybe type" "temp"
      (801548 'move' call_tmp[801545](801507 '.' borrowOfThis[801497] c"rank"))
      (801531 'move' ret[801526](801530 'deref' call_tmp[801545]))
      gotoReturn _end_rank[801524] _end_rank[801524]
      (801521 'end of statement' borrowOfThis[801497])
    }
    {
      (801536 'move' ret[801526](801535 'deref' ?[260]))
      gotoReturn _end_rank[801524] _end_rank[801524]
    }
    label _end_rank[801524]
    (801528 return ret[801526])
  }
  function BaseRectangularDom[801493](?).rank[801550](arg _mt[801552]:_MT[238], arg this[801554]:BaseRectangularDom[801493](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801585] "RVV" "param" "temp"
    unknown borrowOfThis[801556] "type variable"
    (801577 'end of statement')
    (801558 'move' borrowOfThis[801556](801561 call _cast _borrowedNonNilable[214](?) this[801554]))
    (801578 'end of statement' borrowOfThis[801556])
    unknown call_tmp[801599] "expr temp" "maybe param" "maybe type" "temp"
    (801602 'move' call_tmp[801599](801567 'is bound' borrowOfThis[801556] c"rank"))
    if call_tmp[801599]
    {
      unknown call_tmp[801604] "expr temp" "maybe param" "maybe type" "temp"
      (801607 'move' call_tmp[801604](801566 '.' borrowOfThis[801556] c"rank"))
      (801590 'move' ret[801585](801589 'deref' call_tmp[801604]))
      gotoReturn _end_rank[801583] _end_rank[801583]
      (801580 'end of statement' borrowOfThis[801556])
    }
    {
      (801595 'move' ret[801585](801594 'deref' ?[260]))
      gotoReturn _end_rank[801583] _end_rank[801583]
    }
    label _end_rank[801583]
    (801587 return ret[801585])
  }
  function BaseRectangularDom[801493](?).idxType[801609](arg _mt[801611]:_MT[238], arg this[801613]:BaseRectangularDom[801493](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801648] "RVV" "temp" "type variable"
    unknown borrowOfThis[801615]
    (801640 'end of statement')
    (801617 'move' borrowOfThis[801615](801620 call _cast _borrowedNonNilable[214](?) this[801613]))
    (801641 'end of statement' borrowOfThis[801615])
    unknown call_tmp[801662] "expr temp" "maybe param" "maybe type" "temp"
    (801665 'move' call_tmp[801662](801630 'is bound' borrowOfThis[801615] c"idxType"))
    if call_tmp[801662]
    {
      unknown call_tmp[801667] "expr temp" "maybe param" "maybe type" "temp"
      (801670 'move' call_tmp[801667](801625 '.v' borrowOfThis[801615] c"idxType"))
      unknown call_tmp[801672] "expr temp" "maybe param" "maybe type" "temp"
      (801675 'move' call_tmp[801672](801626 call chpl_checkLegalTypeFieldAccessor this[801613] call_tmp[801667] "idxType"))
      (801653 'move' ret[801648](801652 'deref' call_tmp[801672]))
      gotoReturn _end_idxType[801646] _end_idxType[801646]
      (801643 'end of statement' borrowOfThis[801615])
    }
    {
      (801658 'move' ret[801648](801657 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[801646] _end_idxType[801646]
    }
    label _end_idxType[801646]
    (801650 return ret[801648])
  }
  function BaseRectangularDom[801493](?).idxType[801677](arg _mt[801679]:_MT[238], arg this[801681]:BaseRectangularDom[801493](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801716] "RVV" "temp" "type variable"
    unknown borrowOfThis[801683] "type variable"
    (801708 'end of statement')
    (801685 'move' borrowOfThis[801683](801688 call _cast _borrowedNonNilable[214](?) this[801681]))
    (801709 'end of statement' borrowOfThis[801683])
    unknown call_tmp[801730] "expr temp" "maybe param" "maybe type" "temp"
    (801733 'move' call_tmp[801730](801698 'is bound' borrowOfThis[801683] c"idxType"))
    if call_tmp[801730]
    {
      unknown call_tmp[801735] "expr temp" "maybe param" "maybe type" "temp"
      (801738 'move' call_tmp[801735](801693 '.v' borrowOfThis[801683] c"idxType"))
      unknown call_tmp[801740] "expr temp" "maybe param" "maybe type" "temp"
      (801743 'move' call_tmp[801740](801694 call chpl_checkLegalTypeFieldAccessor this[801681] call_tmp[801735] "idxType"))
      (801721 'move' ret[801716](801720 'deref' call_tmp[801740]))
      gotoReturn _end_idxType[801714] _end_idxType[801714]
      (801711 'end of statement' borrowOfThis[801683])
    }
    {
      (801726 'move' ret[801716](801725 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[801714] _end_idxType[801714]
    }
    label _end_idxType[801714]
    (801718 return ret[801716])
  }
  function BaseRectangularDom[801493](?).stridable[801745](arg _mt[801747]:_MT[238], arg this[801749]:BaseRectangularDom[801493](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801780] "RVV" "param" "temp"
    unknown borrowOfThis[801751]
    (801772 'end of statement')
    (801753 'move' borrowOfThis[801751](801756 call _cast _borrowedNonNilable[214](?) this[801749]))
    (801773 'end of statement' borrowOfThis[801751])
    unknown call_tmp[801794] "expr temp" "maybe param" "maybe type" "temp"
    (801797 'move' call_tmp[801794](801762 'is bound' borrowOfThis[801751] c"stridable"))
    if call_tmp[801794]
    {
      unknown call_tmp[801799] "expr temp" "maybe param" "maybe type" "temp"
      (801802 'move' call_tmp[801799](801761 '.' borrowOfThis[801751] c"stridable"))
      (801785 'move' ret[801780](801784 'deref' call_tmp[801799]))
      gotoReturn _end_stridable[801778] _end_stridable[801778]
      (801775 'end of statement' borrowOfThis[801751])
    }
    {
      (801790 'move' ret[801780](801789 'deref' ?[260]))
      gotoReturn _end_stridable[801778] _end_stridable[801778]
    }
    label _end_stridable[801778]
    (801782 return ret[801780])
  }
  function BaseRectangularDom[801493](?).stridable[801804](arg _mt[801806]:_MT[238], arg this[801808]:BaseRectangularDom[801493](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801839] "RVV" "param" "temp"
    unknown borrowOfThis[801810] "type variable"
    (801831 'end of statement')
    (801812 'move' borrowOfThis[801810](801815 call _cast _borrowedNonNilable[214](?) this[801808]))
    (801832 'end of statement' borrowOfThis[801810])
    unknown call_tmp[801853] "expr temp" "maybe param" "maybe type" "temp"
    (801856 'move' call_tmp[801853](801821 'is bound' borrowOfThis[801810] c"stridable"))
    if call_tmp[801853]
    {
      unknown call_tmp[801858] "expr temp" "maybe param" "maybe type" "temp"
      (801861 'move' call_tmp[801858](801820 '.' borrowOfThis[801810] c"stridable"))
      (801844 'move' ret[801839](801843 'deref' call_tmp[801858]))
      gotoReturn _end_stridable[801837] _end_stridable[801837]
      (801834 'end of statement' borrowOfThis[801810])
    }
    {
      (801849 'move' ret[801839](801848 'deref' ?[260]))
      gotoReturn _end_stridable[801837] _end_stridable[801837]
    }
    label _end_stridable[801837]
    (801841 return ret[801839])
  }
  function BaseRectangularDom[146893](?).init[801863](arg _mt[801865]:_MT[238], arg this[801866]:BaseRectangularDom[146893](?), param arg rank[801877]:int(64)[13], arg idxType[801889]:_any[178](?), param arg stridable[801898]:bool[10]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[801912] "temporary of super field" "temp"
    (801914 'move' super_tmp[801912](801911 '.v' this[801866] c"super"))
    (801876 call(801874 call (partial) init _mt[243] super_tmp[801912]))
    (801950 'end of statement')
    unknown tmp[801917] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[801954] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[801966] "expr temp" "maybe param" "maybe type" "temp"
      (801969 'move' call_tmp[801966](801919 '.v' this[801866] c"super"))
      (801958 'move' call_type_tmp[801954](801922 'typeof' call_tmp[801966]))
    }
    (801923 'move' tmp[801917] call_type_tmp[801954])
    unknown call_tmp[801971] "maybe param" "maybe type" "temp"
    (801974 'move' call_tmp[801971](801928 'cast' tmp[801917] this[801866]))
    unknown chpl__thisAsParent[801925] "dead at end of block" "insert auto destroy" "temp"
    (801962 'init var' chpl__thisAsParent[801925] call_tmp[801971] tmp[801917])
    (801931 'setcid' chpl__thisAsParent[801925])
    unknown call_tmp[801976] "expr temp" "maybe param" "maybe type" "temp"
    (801979 'move' call_tmp[801976](801934 call _cast int(64)[13] rank[801877]))
    (801936 'init field' this[801866] c"rank" call_tmp[801976])
    (801951 'end of statement')
    (801939 'init field' this[801866] c"idxType" idxType[801889])
    unknown call_tmp[801981] "expr temp" "maybe param" "maybe type" "temp"
    (801984 'move' call_tmp[801981](801943 call _cast bool[10] stridable[801898]))
    (801945 'init field' this[801866] c"stridable" call_tmp[801981])
    (801952 'end of statement')
    (801948 'setcid' this[801866])
    (801960 return _void[55])
  }
  function BaseRectangularDom[146893](?).writeThis[801986](arg _mt[801990]:_MT[238], arg this[801988]:BaseRectangularDom[146893](?), arg f[801989]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801995 call writeThisDefaultImpl f[801989] this[801988])
    (802000 return _void[55])
  }
  function BaseRectangularDom[146893](?).readThis[802002](arg _mt[802006]:_MT[238], arg this[802004]:BaseRectangularDom[146893](?), arg f[802005]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (802010 call readThisDefaultImpl f[802005] this[802004])
    (802016 return _void[55])
  }
  type BaseRectangularDom[146893](?) val super[355570]:BaseDom[146725] "super class" unknown rank[146812] "param" int(64)[13] unknown idxType[146816] "type variable" unknown stridable[146820] "param" bool[10]
  type BaseRectangularDom[801493](?)
  type BaseRectangularDom[382155](?)
  function BaseSparseDomImpl[147961](?).deinit[146928](arg _mt[147965]:_MT[238], arg this[147963]:BaseSparseDomImpl[147961](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519865 return _void[55])
  }
  function BaseSparseDomImpl[147961](?).dsiBulkAdd[146946](arg _mt[147969]:_MT[238], arg this[147967]:BaseSparseDomImpl[147961](?), arg inds[146943]:_array[133588](?), arg dataSorted[146949] :
  0 =
  0, arg isUnique[146953] :
  0 =
  0, arg preserveInds[146957] :
  1 =
  1, arg addOn[146961] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[519869] "RVV" "temp"
    unknown tmp[427000] "maybe param" "temp"
    (427011 'move' tmp[427000](146965 call ! dataSorted[146949]))
    unknown call_tmp[667969] "expr temp" "maybe param" "maybe type" "temp"
    (667972 'move' call_tmp[667969](427013 call _cond_invalid tmp[427000]))
    if call_tmp[667969]
    {
      (427016 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568424] "maybe param" "temp"
    unknown call_tmp[667974] "expr temp" "maybe param" "maybe type" "temp"
    (667977 'move' call_tmp[667974](427001 call isTrue tmp[427000]))
    (568429 'move' tmp[568424](568427 call _cond_test call_tmp[667974]))
    if tmp[568424]
    {
      unknown tmp[568431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568433 'move' tmp[568431](427004 call isTrue preserveInds[146957]))
      (568438 'move' tmp[568423](568435 '_paramFoldLogical' tmp[568424] tmp[568431]))
    }
    {
      (568443 'move' tmp[568423](568440 '_paramFoldLogical' tmp[568424] 0))
    }
    unknown call_tmp[667979] "expr temp" "maybe param" "maybe type" "temp"
    (667982 'move' call_tmp[667979](146995 call _cond_test tmp[568423]))
    if call_tmp[667979]
    {
      unknown _inds[146971] "dead at end of block" "insert auto destroy"
      (543460 'init var' _inds[146971] inds[146943])
      (146974 'end of statement')
      unknown call_tmp[667986] "expr temp" "maybe param" "maybe type" "temp"
      (667989 'move' call_tmp[667986](146982 call(385479 call (partial) bulkAdd_help _mt[243] this[147967]) _inds[146971] dataSorted[146949] isUnique[146953] addOn[146961]))
      (519874 'move' ret[519869](519873 'deref' call_tmp[667986]))
      gotoReturn _end_dsiBulkAdd[519867] _end_dsiBulkAdd[519867]
      (481359 'end of statement' _inds[146971])
    }
    {
      unknown call_tmp[667993] "expr temp" "maybe param" "maybe type" "temp"
      (667996 'move' call_tmp[667993](146991 call(385487 call (partial) bulkAdd_help _mt[243] this[147967]) inds[146943] dataSorted[146949] isUnique[146953] addOn[146961]))
      (519879 'move' ret[519869](519878 'deref' call_tmp[667993]))
      gotoReturn _end_dsiBulkAdd[519867] _end_dsiBulkAdd[519867]
    }
    label _end_dsiBulkAdd[519867]
    (519871 return ret[519869])
  }
  where {
    unknown call_tmp[668000] "expr temp" "maybe param" "maybe type" "temp"
    (668003 'move' call_tmp[668000](385464 call rank _mt[243] this[147967]))
    unknown call_tmp[668007] "expr temp" "maybe param" "maybe type" "temp"
    (668010 'move' call_tmp[668007](385469 call idxType _mt[243] this[147967]))
    unknown call_tmp[668012] "expr temp" "maybe param" "maybe type" "temp"
    (668015 'move' call_tmp[668012](146938 call chpl__buildIndexType call_tmp[668000] call_tmp[668007]))
    unknown call_tmp[668019] "expr temp" "maybe param" "maybe type" "temp"
    (668022 'move' call_tmp[668019](461617 call eltType _mt[243] inds[146943]))
    unknown call_tmp[668024] "expr temp" "maybe param" "maybe type" "temp"
    (668027 'move' call_tmp[668024](461621 call == call_tmp[668012] call_tmp[668019]))
    (461615 call & 1 call_tmp[668024])
  }
  function BaseSparseDomImpl[147961](?).bulkAdd_help[147017](arg _mt[147973]:_MT[238], arg this[147971]:BaseSparseDomImpl[147961](?), arg inds[147014]:_array[133588](?), arg dataSorted[147020] :
  0 =
  0, arg isUnique[147024] :
  0 =
  0, arg addOn[147028] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[519885] "RVV" "temp"
    (147050 call halt "Helper function called on the BaseSparseDomImpl")
    (481362 'end of statement')
    unknown call_tmp[668029] "expr temp" "maybe param" "maybe type" "temp"
    (668032 'move' call_tmp[668029](147054 call - 1))
    (519890 'move' ret[519885](519889 'deref' call_tmp[668029]))
    (519887 return ret[519885])
  }
  where {
    unknown call_tmp[668036] "expr temp" "maybe param" "maybe type" "temp"
    (668039 'move' call_tmp[668036](385496 call rank _mt[243] this[147971]))
    unknown call_tmp[668043] "expr temp" "maybe param" "maybe type" "temp"
    (668046 'move' call_tmp[668043](385501 call idxType _mt[243] this[147971]))
    unknown call_tmp[668048] "expr temp" "maybe param" "maybe type" "temp"
    (668051 'move' call_tmp[668048](147010 call chpl__buildIndexType call_tmp[668036] call_tmp[668043]))
    unknown call_tmp[668055] "expr temp" "maybe param" "maybe type" "temp"
    (668058 'move' call_tmp[668055](461629 call eltType _mt[243] inds[147014]))
    unknown call_tmp[668060] "expr temp" "maybe param" "maybe type" "temp"
    (668063 'move' call_tmp[668060](461633 call == call_tmp[668048] call_tmp[668055]))
    (461627 call & 1 call_tmp[668060])
  }
  function BaseSparseDomImpl[147961](?)._grow[147066](arg _mt[147977]:_MT[238], arg this[147975]:BaseSparseDomImpl[147961](?), arg size[147063]:int(64)[13], arg factor[147069] :
  arrayAsVecGrowthFactor[113749] =
  arrayAsVecGrowthFactor[113749]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668067] "expr temp" "maybe param" "maybe type" "temp"
    (668070 'move' call_tmp[668067](360489 call nnzDom _mt[243] this[147975]))
    unknown call_tmp[668074] "maybe param" "maybe type" "temp"
    (668077 'move' call_tmp[668074](147073 call size _mt[243] call_tmp[668067]))
    const oldNNZDomSize[147076] "dead at end of block" "const" "insert auto destroy"
    (543462 'init var' oldNNZDomSize[147076] call_tmp[668074])
    (147079 'end of statement')
    unknown call_tmp[668079] "expr temp" "maybe param" "maybe type" "temp"
    (668082 'move' call_tmp[668079](147083 call > size[147063] oldNNZDomSize[147076]))
    unknown call_tmp[668084] "expr temp" "maybe param" "maybe type" "temp"
    (668087 'move' call_tmp[668084](147118 call _cond_test call_tmp[668079]))
    if call_tmp[668084]
    {
      const _newNNZDomSize[147100] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[568450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568451] "maybe param" "temp"
      (568456 'move' tmp[568451](568454 call _cond_test oldNNZDomSize[147076]))
      if tmp[568451]
      {
        unknown tmp[568458] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668089] "expr temp" "maybe param" "maybe type" "temp"
        (668092 'move' call_tmp[668089](147089 call * factor[147069] oldNNZDomSize[147076]))
        unknown call_tmp[668094] "expr temp" "maybe param" "maybe type" "temp"
        (668097 'move' call_tmp[668094](147092 call ceil call_tmp[668089]))
        (568460 'move' tmp[568458](147094 call _cast int(64)[13] call_tmp[668094]))
        (568465 'move' tmp[568450](568462 '_paramFoldLogical' tmp[568451] tmp[568458]))
      }
      {
        (568470 'move' tmp[568450](568467 '_paramFoldLogical' tmp[568451] 1))
      }
      (543464 'init var' _newNNZDomSize[147100] tmp[568450])
      (147103 'end of statement' oldNNZDomSize[147076] oldNNZDomSize[147076])
      unknown call_tmp[668101] "expr temp" "maybe param" "maybe type" "temp"
      (668104 'move' call_tmp[668101](385513 call nnzDom _mt[243] this[147975]))
      unknown call_tmp[668106] "expr temp" "maybe param" "maybe type" "temp"
      (668109 'move' call_tmp[668106](147107 call chpl_build_low_bounded_range 1))
      unknown call_tmp[668111] "expr temp" "maybe param" "maybe type" "temp"
      (668114 'move' call_tmp[668111](147110 call # call_tmp[668106] _newNNZDomSize[147100]))
      unknown call_tmp[668116] "expr temp" "maybe param" "maybe type" "temp"
      (668119 'move' call_tmp[668116](147113 call chpl__buildDomainExpr call_tmp[668111]))
      (147115 call = call_tmp[668101] call_tmp[668116])
      (481366 'end of statement' _newNNZDomSize[147100])
    }
    (519892 return _void[55])
  }
  function BaseSparseDomImpl[147961](?)._shrink[147130](arg _mt[147981]:_MT[238], arg this[147979]:BaseSparseDomImpl[147961](?), arg size[147127]:int(64)[13], arg factor[147133] :
  arrayAsVecGrowthFactor[113749] =
  arrayAsVecGrowthFactor[113749]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668121] "expr temp" "maybe param" "maybe type" "temp"
    (668124 'move' call_tmp[668121](147138 call == size[147127] 0))
    unknown call_tmp[668126] "expr temp" "maybe param" "maybe type" "temp"
    (668129 'move' call_tmp[668126](147204 call _cond_test call_tmp[668121]))
    if call_tmp[668126]
    {
      unknown call_tmp[668133] "expr temp" "maybe param" "maybe type" "temp"
      (668136 'move' call_tmp[668133](385521 call nnzDom _mt[243] this[147979]))
      unknown call_tmp[668138] "expr temp" "maybe param" "maybe type" "temp"
      (668141 'move' call_tmp[668138](147143 call chpl_build_bounded_range 1 0))
      unknown call_tmp[668143] "expr temp" "maybe param" "maybe type" "temp"
      (668146 'move' call_tmp[668143](147146 call chpl__buildDomainExpr call_tmp[668138]))
      (147148 call = call_tmp[668133] call_tmp[668143])
    }
    {
      unknown call_tmp[668150] "expr temp" "maybe param" "maybe type" "temp"
      (668153 'move' call_tmp[668150](360494 call nnzDom _mt[243] this[147979]))
      unknown call_tmp[668157] "expr temp" "maybe param" "maybe type" "temp"
      (668160 'move' call_tmp[668157](147153 call size _mt[243] call_tmp[668150]))
      unknown call_tmp[668162] "expr temp" "maybe param" "maybe type" "temp"
      (668165 'move' call_tmp[668162](147158 call ** factor[147133] 2))
      unknown call_tmp[668167] "expr temp" "maybe param" "maybe type" "temp"
      (668170 'move' call_tmp[668167](147160 call / call_tmp[668157] call_tmp[668162]))
      unknown call_tmp[668172] "maybe param" "maybe type" "temp"
      (668175 'move' call_tmp[668172](147163 call _cast int(64)[13] call_tmp[668167]))
      const shrinkThreshold[147165] "dead at end of block" "const" "insert auto destroy"
      (543466 'init var' shrinkThreshold[147165] call_tmp[668172])
      (147168 'end of statement')
      unknown call_tmp[668177] "expr temp" "maybe param" "maybe type" "temp"
      (668180 'move' call_tmp[668177](147172 call < size[147127] shrinkThreshold[147165]))
      unknown call_tmp[668182] "expr temp" "maybe param" "maybe type" "temp"
      (668185 'move' call_tmp[668182](147200 call _cond_test call_tmp[668177]))
      if call_tmp[668182]
      {
        unknown call_tmp[668189] "expr temp" "maybe param" "maybe type" "temp"
        (668192 'move' call_tmp[668189](360499 call nnzDom _mt[243] this[147979]))
        unknown call_tmp[668196] "expr temp" "maybe param" "maybe type" "temp"
        (668199 'move' call_tmp[668196](147175 call size _mt[243] call_tmp[668189]))
        unknown call_tmp[668201] "expr temp" "maybe param" "maybe type" "temp"
        (668204 'move' call_tmp[668201](147179 call / call_tmp[668196] factor[147133]))
        unknown call_tmp[668206] "maybe param" "maybe type" "temp"
        (668209 'move' call_tmp[668206](147182 call _cast int(64)[13] call_tmp[668201]))
        const _newNNZDomSize[147184] "dead at end of block" "const" "insert auto destroy"
        (543468 'init var' _newNNZDomSize[147184] call_tmp[668206])
        (147187 'end of statement')
        unknown call_tmp[668213] "expr temp" "maybe param" "maybe type" "temp"
        (668216 'move' call_tmp[668213](385530 call nnzDom _mt[243] this[147979]))
        unknown call_tmp[668218] "expr temp" "maybe param" "maybe type" "temp"
        (668221 'move' call_tmp[668218](147192 call chpl_build_bounded_range 1 _newNNZDomSize[147184]))
        unknown call_tmp[668223] "expr temp" "maybe param" "maybe type" "temp"
        (668226 'move' call_tmp[668223](147195 call chpl__buildDomainExpr call_tmp[668218]))
        (147197 call = call_tmp[668213] call_tmp[668223])
        (481369 'end of statement' _newNNZDomSize[147184])
      }
    }
    (519894 return _void[55])
  }
  function BaseSparseDomImpl[147961](?)._bulkGrow[147213](arg _mt[147985]:_MT[238], arg this[147983]:BaseSparseDomImpl[147961](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668230] "maybe param" "maybe type" "temp"
    (668233 'move' call_tmp[668230](147217 call(385537 call (partial) getNNZ _mt[243] this[147983])))
    const nnz[147218] "dead at end of block" "const" "insert auto destroy"
    (543470 'init var' nnz[147218] call_tmp[668230])
    (147221 'end of statement')
    unknown call_tmp[668237] "expr temp" "maybe param" "maybe type" "temp"
    (668240 'move' call_tmp[668237](360504 call nnzDom _mt[243] this[147983]))
    unknown call_tmp[668244] "expr temp" "maybe param" "maybe type" "temp"
    (668247 'move' call_tmp[668244](147225 call size _mt[243] call_tmp[668237]))
    unknown call_tmp[668249] "expr temp" "maybe param" "maybe type" "temp"
    (668252 'move' call_tmp[668249](147228 call > nnz[147218] call_tmp[668244]))
    unknown call_tmp[668254] "expr temp" "maybe param" "maybe type" "temp"
    (668257 'move' call_tmp[668254](147261 call _cond_test call_tmp[668249]))
    if call_tmp[668254]
    {
      unknown call_tmp[668259] "expr temp" "maybe param" "maybe type" "temp"
      (668262 'move' call_tmp[668259](147234 call log2 nnz[147218]))
      unknown call_tmp[668264] "expr temp" "maybe param" "maybe type" "temp"
      (668267 'move' call_tmp[668264](147238 call + call_tmp[668259] 1.0))
      unknown call_tmp[668269] "expr temp" "maybe param" "maybe type" "temp"
      (668272 'move' call_tmp[668269](147241 call exp2 call_tmp[668264]))
      unknown call_tmp[668274] "maybe param" "maybe type" "temp"
      (668277 'move' call_tmp[668274](147243 call _cast int(64)[13] call_tmp[668269]))
      const _newNNZDomSize[147245] "dead at end of block" "const" "insert auto destroy"
      (543472 'init var' _newNNZDomSize[147245] call_tmp[668274])
      (147248 'end of statement' nnz[147218])
      unknown call_tmp[668281] "expr temp" "maybe param" "maybe type" "temp"
      (668284 'move' call_tmp[668281](385544 call nnzDom _mt[243] this[147983]))
      unknown call_tmp[668286] "expr temp" "maybe param" "maybe type" "temp"
      (668289 'move' call_tmp[668286](147253 call chpl_build_bounded_range 1 _newNNZDomSize[147245]))
      unknown call_tmp[668291] "expr temp" "maybe param" "maybe type" "temp"
      (668294 'move' call_tmp[668291](147256 call chpl__buildDomainExpr call_tmp[668286]))
      (147258 call = call_tmp[668281] call_tmp[668291])
      (481372 'end of statement' _newNNZDomSize[147245])
    }
    (519896 return _void[55])
  }
  function BaseSparseDomImpl[147961](?)._countDuplicates[147271](arg _mt[147989]:_MT[238], arg this[147987]:BaseSparseDomImpl[147961](?), arg arr[147269]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519900] "RVV" "temp"
    unknown call_tmp[668296] "maybe param" "maybe type" "temp"
    (668299 'move' call_tmp[668296](147278 call - 1))
    unknown dupCount[147280] "dead at end of block" "insert auto destroy"
    (543474 'init var' dupCount[147280] call_tmp[668296])
    (147283 'end of statement')
    unknown call_tmp[668303] "expr temp" "maybe param" "maybe type" "temp"
    (668306 'move' call_tmp[668303](147287 call _dom _mt[243] arr[147269]))
    unknown call_tmp[668310] "expr temp" "maybe param" "maybe type" "temp"
    (668313 'move' call_tmp[668310](147290 call low _mt[243] call_tmp[668303]))
    unknown call_tmp[668315] "maybe param" "maybe type" "temp"
    (668318 'move' call_tmp[668315](147294 call arr[147269] call_tmp[668310]))
    unknown prev[147295] "dead at end of block" "insert auto destroy"
    (543476 'init var' prev[147295] call_tmp[668315])
    (147298 'end of statement')
    {
      unknown _indexOfInterest[147324] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147325] "expr temp" "temp"
      (147334 'move' _iterator[147325](147332 call _getIterator arr[147269]))
      Defer
      {
        {
          (147350 call _freeIterator _iterator[147325])
        }
      }
      { scopeless type
        (147339 'move' _indexOfInterest[147324](147336 call iteratorIndex _iterator[147325]))
      }
      ForLoop[147326]
      {
        unknown a[147343] "index var" "insert auto destroy"
        (481375 'end of statement')
        (147345 'move' a[147343] _indexOfInterest[147324])
        (481376 'end of statement' a[147343])
        {
          unknown call_tmp[668320] "expr temp" "maybe param" "maybe type" "temp"
          (668323 'move' call_tmp[668320](147303 call == a[147343] prev[147295]))
          unknown call_tmp[668325] "expr temp" "maybe param" "maybe type" "temp"
          (668328 'move' call_tmp[668325](147315 call _cond_test call_tmp[668320]))
          if call_tmp[668325]
          {
            (147307 call += dupCount[147280] 1)
            (481378 'end of statement' dupCount[147280])
          }
          {
            (147312 call = prev[147295] a[147343])
            (481380 'end of statement' prev[147295] a[147343])
          }
          {
          }
        }
        label _continueLabel[147329]
        _indexOfInterest[147324]
        _iterator[147325]
      }
      label _breakLabel[147330]
    }
    (519905 'move' ret[519900](519904 'deref' dupCount[147280]))
    gotoReturn _end__countDuplicates[519898] _end__countDuplicates[519898]
    (481383 'end of statement' dupCount[147280])
    label _end__countDuplicates[519898]
    (519902 return ret[519900])
  }
  where {
    (147276 call isArray arr[147269])
  }
  function BaseSparseDomImpl[147961](?).bulkAdd_prepareInds[147367](arg _mt[147993]:_MT[238], arg this[147991]:BaseSparseDomImpl[147961](?), arg inds[147365]:_any[178](?), arg dataSorted[147369]:_any[178](?), arg isUnique[147371]:_any[178](?), arg cmp[147373]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668330] "expr temp" "maybe param" "maybe type" "temp"
    (668333 'move' call_tmp[668330](147380 call ! dataSorted[147369]))
    unknown call_tmp[668335] "expr temp" "maybe param" "maybe type" "temp"
    (668338 'move' call_tmp[668335](147389 call _cond_test call_tmp[668330]))
    if call_tmp[668335]
    {
      (147387 call sort inds[147365](comparator = cmp[147373]))
    }
    unknown call_tmp[668340] "expr temp" "maybe param" "maybe type" "temp"
    (668343 'move' call_tmp[668340](147603 call _cond_test 1))
    if call_tmp[668340]
    {
      unknown tmp[427021] "maybe param" "temp"
      (427032 'move' tmp[427021] dataSorted[147369])
      unknown call_tmp[668345] "expr temp" "maybe param" "maybe type" "temp"
      (668348 'move' call_tmp[668345](427034 call _cond_invalid tmp[427021]))
      if call_tmp[668345]
      {
        (427037 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568478] "maybe param" "temp"
      unknown call_tmp[668350] "expr temp" "maybe param" "maybe type" "temp"
      (668353 'move' call_tmp[668350](427022 call isTrue tmp[427021]))
      (568483 'move' tmp[568478](568481 call _cond_test call_tmp[668350]))
      if tmp[568478]
      {
        unknown tmp[568485] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668355] "expr temp" "maybe param" "maybe type" "temp"
        (668358 'move' call_tmp[668355](147401 call isSorted inds[147365](comparator = cmp[147373])))
        unknown call_tmp[668360] "expr temp" "maybe param" "maybe type" "temp"
        (668363 'move' call_tmp[668360](147402 call ! call_tmp[668355]))
        (568487 'move' tmp[568485](427025 call isTrue call_tmp[668360]))
        (568492 'move' tmp[568477](568489 '_paramFoldLogical' tmp[568478] tmp[568485]))
      }
      {
        (568497 'move' tmp[568477](568494 '_paramFoldLogical' tmp[568478] 0))
      }
      unknown call_tmp[668365] "expr temp" "maybe param" "maybe type" "temp"
      (668368 'move' call_tmp[668365](147429 call _cond_test tmp[568477]))
      if call_tmp[668365]
      {
        (147427 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      unknown call_tmp[668370] "expr temp" "maybe param" "maybe type" "temp"
      (668373 'move' call_tmp[668370](147559 call _cond_test isUnique[147371]))
      if call_tmp[668370]
      {
        unknown call_tmp[668377] "expr temp" "maybe param" "maybe type" "temp"
        (668380 'move' call_tmp[668377](147437 call _dom _mt[243] inds[147365]))
        unknown call_tmp[668384] "maybe param" "maybe type" "temp"
        (668387 'move' call_tmp[668384](147440 call low _mt[243] call_tmp[668377]))
        const indsStart[147443] "dead at end of block" "const" "insert auto destroy"
        (543478 'init var' indsStart[147443] call_tmp[668384])
        (147446 'end of statement')
        unknown call_tmp[668391] "expr temp" "maybe param" "maybe type" "temp"
        (668394 'move' call_tmp[668391](147449 call _dom _mt[243] inds[147365]))
        unknown call_tmp[668398] "maybe param" "maybe type" "temp"
        (668401 'move' call_tmp[668398](147452 call high _mt[243] call_tmp[668391]))
        const indsEnd[147455] "dead at end of block" "const" "insert auto destroy"
        (543480 'init var' indsEnd[147455] call_tmp[668398])
        (147458 'end of statement')
        unknown call_tmp[668403] "maybe param" "maybe type" "temp"
        (668406 'move' call_tmp[668403](147462 call inds[147365] indsStart[147443]))
        unknown lastInd[147463] "dead at end of block" "insert auto destroy"
        (543482 'init var' lastInd[147463] call_tmp[668403])
        (147466 'end of statement' indsStart[147443])
        {
          unknown _indexOfInterest[147518] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147519] "expr temp" "temp"
          unknown call_tmp[668408] "expr temp" "maybe param" "maybe type" "temp"
          (668411 'move' call_tmp[668408](147532 call + indsStart[147443] 1))
          unknown call_tmp[668413] "expr temp" "maybe param" "maybe type" "temp"
          (668416 'move' call_tmp[668413](147536 call chpl_direct_range_iter call_tmp[668408] indsEnd[147455] 1))
          (147528 'move' _iterator[147519](147526 call _getIterator call_tmp[668413]))
          Defer
          {
            {
              (147552 call _freeIterator _iterator[147519])
            }
          }
          { scopeless type
            (147541 'move' _indexOfInterest[147518](147538 call iteratorIndex _iterator[147519]))
          }
          ForLoop[147520]
          {
            unknown i[147545] "index var" "insert auto destroy"
            (481390 'end of statement')
            (147547 'move' i[147545] _indexOfInterest[147518])
            (481391 'end of statement' i[147545])
            {
              unknown call_tmp[668418] "expr temp" "maybe param" "maybe type" "temp"
              (668421 'move' call_tmp[668418](147478 call inds[147365] i[147545]))
              unknown call_tmp[668423] "expr temp" "maybe param" "maybe type" "temp"
              (668426 'move' call_tmp[668423](147480 call == call_tmp[668418] lastInd[147463]))
              unknown call_tmp[668428] "expr temp" "maybe param" "maybe type" "temp"
              (668431 'move' call_tmp[668428](147511 call _cond_test call_tmp[668423]))
              if call_tmp[668428]
              {
                (147501 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                unknown call_tmp[668433] "expr temp" "maybe param" "maybe type" "temp"
                (668436 'move' call_tmp[668433](147507 call inds[147365] i[147545]))
                (147508 call = lastInd[147463] call_tmp[668433])
                (481394 'end of statement' lastInd[147463] i[147545])
              }
            }
            label _continueLabel[147523]
            _indexOfInterest[147518]
            _iterator[147519]
          }
          label _breakLabel[147524]
        }
      }
      {
        unknown _indexOfInterest[147570] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147571] "expr temp" "temp"
        (147580 'move' _iterator[147571](147578 call _getIterator inds[147365]))
        Defer
        {
          {
            (147596 call _freeIterator _iterator[147571])
          }
        }
        { scopeless type
          (147585 'move' _indexOfInterest[147570](147582 call iteratorIndex _iterator[147571]))
        }
        ForLoop[147572]
        {
          unknown i[147589] "index var" "insert auto destroy"
          (481398 'end of statement')
          (147591 'move' i[147589] _indexOfInterest[147570])
          (481399 'end of statement' i[147589])
          (147568 call(385577 call (partial) boundsCheck _mt[243] this[147991]) i[147589])
          (481401 'end of statement' i[147589])
          label _continueLabel[147575]
          _indexOfInterest[147570]
          _iterator[147571]
        }
        label _breakLabel[147576]
      }
    }
    (519909 return _void[55])
    (355043 'used modules list'(147376 'use' Sort[267880]))
  }
  function BaseSparseDomImpl[147961](?).__getActualInsertPts[147613](arg _mt[147997]:_MT[238], arg this[147995]:BaseSparseDomImpl[147961](?), arg d[147611]:_any[178](?), arg inds[147615]:_any[178](?), arg isUnique[147617]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519913] "RVV" "temp"
    unknown indivInsertPts[147629] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668442] "expr temp" "maybe param" "maybe type" "temp"
    (668445 'move' call_tmp[668442](147620 call _dom _mt[243] inds[147615]))
    unknown call_tmp[668447] "expr temp" "maybe param" "maybe type" "temp"
    (668450 'move' call_tmp[668447](147625 call chpl__ensureDomainExpr call_tmp[668442]))
    unknown call_tmp[668452] "expr temp" "maybe param" "maybe type" "temp"
    (668455 'move' call_tmp[668452](147627 call chpl__buildArrayRuntimeType call_tmp[668447] int(64)[13]))
    (543484 'default init var' indivInsertPts[147629] call_tmp[668452])
    (147632 'end of statement')
    unknown actualInsertPts[147644] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668459] "expr temp" "maybe param" "maybe type" "temp"
    (668462 'move' call_tmp[668459](147635 call _dom _mt[243] inds[147615]))
    unknown call_tmp[668464] "expr temp" "maybe param" "maybe type" "temp"
    (668467 'move' call_tmp[668464](147640 call chpl__ensureDomainExpr call_tmp[668459]))
    unknown call_tmp[668469] "expr temp" "maybe param" "maybe type" "temp"
    (668472 'move' call_tmp[668469](147642 call chpl__buildArrayRuntimeType call_tmp[668464] int(64)[13]))
    (543486 'default init var' actualInsertPts[147644] call_tmp[668469])
    (147647 'end of statement')
    unknown call_tmp[668474] "expr temp" "maybe param" "maybe type" "temp"
    (668477 'move' call_tmp[668474](147649 call ! isUnique[147617]))
    unknown call_tmp[668479] "expr temp" "maybe param" "maybe type" "temp"
    (668482 'move' call_tmp[668479](147753 call _cond_test call_tmp[668474]))
    if call_tmp[668479]
    {
      unknown call_tmp[668486] "expr temp" "maybe param" "maybe type" "temp"
      (668489 'move' call_tmp[668486](147653 call _dom _mt[243] inds[147615]))
      unknown call_tmp[668493] "expr temp" "maybe param" "maybe type" "temp"
      (668496 'move' call_tmp[668493](147656 call low _mt[243] call_tmp[668486]))
      unknown call_tmp[668498] "expr temp" "maybe param" "maybe type" "temp"
      (668501 'move' call_tmp[668498](147660 call inds[147615] call_tmp[668493]))
      unknown call_tmp[668503] "maybe param" "maybe type" "temp"
      (668506 'move' call_tmp[668503](147662 call + call_tmp[668498] 1))
      unknown lastInd[147664] "dead at end of block" "insert auto destroy"
      (543488 'init var' lastInd[147664] call_tmp[668503])
      (147667 'end of statement')
      {
        unknown _indexOfInterest[147701] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147702] "expr temp" "temp"
        unknown call_tmp[668508] "expr temp" "maybe param" "maybe type" "temp"
        (668511 'move' call_tmp[668508](147711 call _getIterator inds[147615]))
        unknown call_tmp[668513] "expr temp" "maybe param" "maybe type" "temp"
        (668516 'move' call_tmp[668513](147714 call _getIterator indivInsertPts[147629]))
        (147716 'move' _iterator[147702](147677 call _build_tuple call_tmp[668508] call_tmp[668513]))
        Defer
        {
          {
            (147746 call _freeIterator _iterator[147702])
          }
        }
        { scopeless type
          (147721 'move' _indexOfInterest[147701](147718 call iteratorIndex _iterator[147702]))
        }
        ForLoop[147703]
        {
          (147726 call _check_tuple_var_decl _indexOfInterest[147701] 2)
          (481404 'end of statement')
          unknown i[147732] "index var" "insert auto destroy"
          (481405 'end of statement')
          (147734 'move' i[147732](147730 call _indexOfInterest[147701] 0))
          (481406 'end of statement' i[147732])
          unknown p[147739] "index var" "insert auto destroy"
          (481408 'end of statement')
          (147741 'move' p[147739](147737 call _indexOfInterest[147701] 1))
          (481409 'end of statement' p[147739])
          {
            unknown call_tmp[668518] "expr temp" "maybe param" "maybe type" "temp"
            (668521 'move' call_tmp[668518](147680 call == i[147732] lastInd[147664]))
            unknown call_tmp[668523] "expr temp" "maybe param" "maybe type" "temp"
            (668526 'move' call_tmp[668523](147694 call _cond_test call_tmp[668518]))
            if call_tmp[668523]
            {
              unknown call_tmp[668528] "expr temp" "maybe param" "maybe type" "temp"
              (668531 'move' call_tmp[668528](147684 call - 1))
              (147686 call = p[147739] call_tmp[668528])
              (481411 'end of statement' p[147739])
            }
            {
              (147691 call = lastInd[147664] i[147732])
              (481413 'end of statement' lastInd[147664] i[147732])
            }
          }
          label _continueLabel[147706]
          _indexOfInterest[147701]
          _iterator[147702]
        }
        label _breakLabel[147707]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147821] "index var" "insert auto destroy"
        
        unknown p[147823] "index var" "insert auto destroy"
      iterated expressions:
        inds[147615]
        indivInsertPts[147629]
      shadow variables:
      other variables
        forall body
      {
        unknown tmp[427042] "maybe param" "temp"
        (427053 'move' tmp[427042] isUnique[147617])
        unknown call_tmp[668533] "expr temp" "maybe param" "maybe type" "temp"
        (668536 'move' call_tmp[668533](427055 call _cond_invalid tmp[427042]))
        if call_tmp[668533]
        {
          (427058 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[568504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568505] "maybe param" "temp"
        unknown call_tmp[668538] "expr temp" "maybe param" "maybe type" "temp"
        (668541 'move' call_tmp[668538](427043 call isTrue tmp[427042]))
        (568510 'move' tmp[568505](568508 call _cond_test call_tmp[668538]))
        if tmp[568505]
        {
          (568515 'move' tmp[568504](568512 '_paramFoldLogical' tmp[568505] 1))
        }
        {
          unknown tmp[568517] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[668543] "expr temp" "maybe param" "maybe type" "temp"
          (668546 'move' call_tmp[668543](147769 call - 1))
          unknown call_tmp[668548] "expr temp" "maybe param" "maybe type" "temp"
          (668551 'move' call_tmp[668548](147771 call != p[147823] call_tmp[668543]))
          (568519 'move' tmp[568517](427047 call isTrue call_tmp[668548]))
          (568524 'move' tmp[568504](568521 '_paramFoldLogical' tmp[568505] tmp[568517]))
        }
        unknown call_tmp[668553] "expr temp" "maybe param" "maybe type" "temp"
        (668556 'move' call_tmp[668553](147815 call _cond_test tmp[568504]))
        if call_tmp[668553]
        {
          unknown call_tmp[668560] "maybe param" "maybe type" "temp"
          (668563 'move' call_tmp[668560](147788 call(147783 call (partial) find _mt[243] d[147611]) i[147821]))
          const tmp[147789] "dead at end of block" "const" "insert auto destroy" "temp"
          (543490 'init var' tmp[147789] call_tmp[668560])
          (147796 call _check_tuple_var_decl tmp[147789] 2)
          (481417 'end of statement')
          unknown call_tmp[668565] "maybe param" "maybe type" "temp"
          (668568 'move' call_tmp[668565](147790 call tmp[147789] 0))
          const found[147775] "dead at end of block" "const" "insert auto destroy"
          (543492 'init var' found[147775] call_tmp[668565])
          unknown call_tmp[668570] "maybe param" "maybe type" "temp"
          (668573 'move' call_tmp[668570](147793 call tmp[147789] 1))
          const insertPt[147777] "dead at end of block" "const" "insert auto destroy"
          (543494 'init var' insertPt[147777] call_tmp[668570])
          (147801 'end of statement')
          unknown tmp[568531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568532] "maybe param" "temp"
          (568537 'move' tmp[568532](568535 call _cond_test found[147775]))
          if tmp[568532]
          {
            unknown tmp[568539] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (568541 'move' tmp[568539](147806 call - 1))
            (568546 'move' tmp[568531](568543 '_paramFoldLogical' tmp[568532] tmp[568539]))
          }
          {
            (568551 'move' tmp[568531](568548 '_paramFoldLogical' tmp[568532] insertPt[147777]))
          }
          (147812 call = p[147823] tmp[568531])
          (481418 'end of statement' p[147823] found[147775] insertPt[147777])
        }
      }
    }
    unknown actualAddCnt[147827] "dead at end of block" "insert auto destroy"
    (543496 'init var' actualAddCnt[147827] 0)
    (147830 'end of statement')
    {
      unknown _indexOfInterest[147871] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147872] "expr temp" "temp"
      unknown call_tmp[668575] "expr temp" "maybe param" "maybe type" "temp"
      (668578 'move' call_tmp[668575](147881 call _getIterator indivInsertPts[147629]))
      unknown call_tmp[668580] "expr temp" "maybe param" "maybe type" "temp"
      (668583 'move' call_tmp[668580](147884 call _getIterator actualInsertPts[147644]))
      (147886 'move' _iterator[147872](147839 call _build_tuple call_tmp[668575] call_tmp[668580]))
      Defer
      {
        {
          (147916 call _freeIterator _iterator[147872])
        }
      }
      { scopeless type
        (147891 'move' _indexOfInterest[147871](147888 call iteratorIndex _iterator[147872]))
      }
      ForLoop[147873]
      {
        (147896 call _check_tuple_var_decl _indexOfInterest[147871] 2)
        (481423 'end of statement')
        unknown ip[147902] "index var" "insert auto destroy"
        (481424 'end of statement')
        (147904 'move' ip[147902](147900 call _indexOfInterest[147871] 0))
        (481425 'end of statement' ip[147902])
        unknown ap[147909] "index var" "insert auto destroy"
        (481427 'end of statement')
        (147911 'move' ap[147909](147907 call _indexOfInterest[147871] 1))
        (481428 'end of statement' ap[147909])
        {
          unknown call_tmp[668585] "expr temp" "maybe param" "maybe type" "temp"
          (668588 'move' call_tmp[668585](147842 call - 1))
          unknown call_tmp[668590] "expr temp" "maybe param" "maybe type" "temp"
          (668593 'move' call_tmp[668590](147844 call != ip[147902] call_tmp[668585]))
          unknown call_tmp[668595] "expr temp" "maybe param" "maybe type" "temp"
          (668598 'move' call_tmp[668595](147865 call _cond_test call_tmp[668590]))
          if call_tmp[668595]
          {
            unknown call_tmp[668600] "expr temp" "maybe param" "maybe type" "temp"
            (668603 'move' call_tmp[668600](147849 call + ip[147902] actualAddCnt[147827]))
            (147851 call = ap[147909] call_tmp[668600])
            (481430 'end of statement' ap[147909] ip[147902] actualAddCnt[147827])
            (147857 call += actualAddCnt[147827] 1)
            (481434 'end of statement' actualAddCnt[147827])
          }
          {
            (147862 call = ap[147909] ip[147902])
            (481436 'end of statement' ap[147909] ip[147902])
          }
        }
        label _continueLabel[147876]
        _indexOfInterest[147871]
        _iterator[147872]
      }
      label _breakLabel[147877]
    }
    unknown call_tmp[668605] "expr temp" "maybe param" "maybe type" "temp"
    (668608 'move' call_tmp[668605](147926 call _build_tuple actualInsertPts[147644] actualAddCnt[147827]))
    (519918 'move' ret[519913](519917 'deref' call_tmp[668605]))
    gotoReturn _end___getActualInsertPts[519911] _end___getActualInsertPts[519911]
    (481439 'end of statement' actualInsertPts[147644] actualAddCnt[147827])
    label _end___getActualInsertPts[519911]
    (519915 return ret[519913])
  }
  function BaseSparseDomImpl[147961](?).dsiClear[147934](arg _mt[148001]:_MT[238], arg this[147999]:BaseSparseDomImpl[147961](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147955 call halt "not implemented")
    (519922 return _void[55])
  }
  function BaseSparseDomImpl[147961](?).super[802018](arg _mt[802020]:_MT[238], arg this[802022]:BaseSparseDomImpl[147961](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802032] "RVV" "temp"
    unknown call_tmp[802039] "expr temp" "maybe param" "maybe type" "temp"
    (802042 'move' call_tmp[802039](802026 '.v' this[802022] c"super"))
    (802037 'move' ret[802032](802036 'deref' call_tmp[802039]))
    (802034 return ret[802032])
  }
  function BaseSparseDomImpl[147961](?).nnzDom[802044](arg _mt[802046]:_MT[238], arg this[802048]:BaseSparseDomImpl[147961](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802058] "RVV" "temp"
    unknown call_tmp[802065] "expr temp" "maybe param" "maybe type" "temp"
    (802068 'move' call_tmp[802065](802052 '.' this[802048] c"nnzDom"))
    (802063 'move' ret[802058](802062 'addr of' call_tmp[802065]))
    (802060 return ret[802058])
  }
  function BaseSparseDomImpl[147961](?).init[802070](arg _mt[802072]:_MT[238], arg this[802073]:BaseSparseDomImpl[147961](?), param arg rank[802196]:int(64)[13], arg idxType[802199]:_any[178](?), in arg parentDom[802202]:_any[178](?), in arg nnzDom[802205] :
  unknown call_tmp[802269] "expr temp" "maybe param" "maybe type" "temp" =
  unknown call_tmp[802274] "expr temp" "maybe param" "maybe type" "temp") : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[802230] "temporary of super field" "temp"
    (802232 'move' super_tmp[802230](802229 '.v' this[802073] c"super"))
    (802083 call(802081 call (partial) init _mt[243] super_tmp[802230]) rank[802196] idxType[802199] parentDom[802202])
    (802256 'end of statement')
    unknown tmp[802235] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[802259] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[802281] "expr temp" "maybe param" "maybe type" "temp"
      (802284 'move' call_tmp[802281](802237 '.v' this[802073] c"super"))
      (802263 'move' call_type_tmp[802259](802240 'typeof' call_tmp[802281]))
    }
    (802241 'move' tmp[802235] call_type_tmp[802259])
    unknown call_tmp[802286] "maybe param" "maybe type" "temp"
    (802289 'move' call_tmp[802286](802246 'cast' tmp[802235] this[802073]))
    unknown chpl__thisAsParent[802243] "dead at end of block" "insert auto destroy" "temp"
    (802267 'init var' chpl__thisAsParent[802243] call_tmp[802286] tmp[802235])
    (802249 'setcid' chpl__thisAsParent[802243])
    (802251 '.=' this[802073] c"nnzDom" nnzDom[802205])
    (802257 'end of statement')
    (802254 'setcid' this[802073])
    (802265 return _void[55])
  }
  function BaseSparseDomImpl[147961](?).writeThis[802291](arg _mt[802295]:_MT[238], arg this[802293]:BaseSparseDomImpl[147961](?), arg f[802294]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (802300 call writeThisDefaultImpl f[802294] this[802293])
    (802305 return _void[55])
  }
  function BaseSparseDomImpl[147961](?).readThis[802307](arg _mt[802311]:_MT[238], arg this[802309]:BaseSparseDomImpl[147961](?), arg f[802310]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (802315 call readThisDefaultImpl f[802310] this[802309])
    (802321 return _void[55])
  }
  type BaseSparseDomImpl[147961](?) val super[355586]:BaseSparseDom[148665](?) "delay instantiation" "super class" unknown nnzDom[146922](146920 call chpl__buildDomainExpr(146917 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[148188](?).init[148059](arg _mt[148192]:_MT[238], ref arg this[148190]:SparseIndexBuffer[148188](?), arg size[148057]:_any[178](?), param arg rank[148062]:int(64)[13], arg obj[148065]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668610] "expr temp" "maybe param" "maybe type" "temp"
    (668613 'move' call_tmp[668610](461636 call _cast int(64)[13] rank[148062]))
    (461638 'init field' this[148190] c"rank" call_tmp[668610])
    (481443 'end of statement')
    unknown tmp[461641] "temp"
    (461644 'init var' tmp[461641] obj[148065] BaseSparseDom[382165](?))
    (461646 'init field' this[148190] c"obj" tmp[461641])
    (481444 'end of statement')
    unknown tmp[461662] "temp" "type variable"
    unknown tmp[568558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568559] "maybe param" "temp"
    unknown call_tmp[668615] "expr temp" "maybe param" "maybe type" "temp"
    (668618 'move' call_tmp[668615](461670 '.v' this[148190] c"rank"))
    unknown call_tmp[668620] "expr temp" "maybe param" "maybe type" "temp"
    (668623 'move' call_tmp[668620](461651 call == call_tmp[668615] 1))
    (568564 'move' tmp[568559](568562 call _cond_test call_tmp[668620]))
    if tmp[568559]
    {
      (568569 'move' tmp[568558](568566 '_paramFoldLogical' tmp[568559] int(64)[13]))
    }
    {
      unknown tmp[568571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[668625] "expr temp" "maybe param" "maybe type" "temp"
      (668628 'move' call_tmp[668625](461673 '.v' this[148190] c"rank"))
      (568573 'move' tmp[568571](461658 call * call_tmp[668625] int(64)[13]))
      (568578 'move' tmp[568558](568575 '_paramFoldLogical' tmp[568559] tmp[568571]))
    }
    (461664 'move' tmp[461662] tmp[568558])
    (461666 'init field' this[148190] c"idxType" tmp[461662])
    (481445 'end of statement')
    unknown call_tmp[668630] "expr temp" "maybe param" "maybe type" "temp"
    (668633 'move' call_tmp[668630](148086 call chpl_build_low_bounded_range 0))
    unknown call_tmp[668635] "expr temp" "maybe param" "maybe type" "temp"
    (668638 'move' call_tmp[668635](148089 call # call_tmp[668630] size[148057]))
    unknown call_tmp[668640] "maybe param" "maybe type" "temp"
    (668643 'move' call_tmp[668640](148092 call chpl__buildDomainExpr call_tmp[668635]))
    unknown tmp[461676] "temp"
    (461678 'init var' tmp[461676] call_tmp[668640])
    (461680 '.=' this[148190] c"bufDom" tmp[461676])
    (481446 'end of statement')
    unknown tmp[461685] "temp"
    unknown call_tmp[668645] "expr temp" "maybe param" "maybe type" "temp"
    (668648 'move' call_tmp[668645](461699 '.' this[148190] c"bufDom"))
    unknown call_tmp[668650] "expr temp" "maybe param" "maybe type" "temp"
    (668653 'move' call_tmp[668650](461690 call chpl__ensureDomainExpr call_tmp[668645]))
    unknown call_tmp[668655] "expr temp" "maybe param" "maybe type" "temp"
    (668658 'move' call_tmp[668655](461702 '.v' this[148190] c"idxType"))
    unknown call_tmp[668660] "expr temp" "maybe param" "maybe type" "temp"
    (668663 'move' call_tmp[668660](461688 call chpl__buildArrayRuntimeType call_tmp[668650] call_tmp[668655]))
    (461693 'default init var' tmp[461685] call_tmp[668660])
    (461695 '.=' this[148190] c"buf" tmp[461685])
    (481447 'end of statement')
    unknown tmp[461706] "temp"
    (461708 'init var' tmp[461706] 0)
    (461710 '.=' this[148190] c"cur" tmp[461706])
    (481448 'end of statement')
    (519924 return _void[55])
  }
  function SparseIndexBuffer[148188](?).deinit[148101](arg _mt[148196]:_MT[238], arg this[148194]:SparseIndexBuffer[148188](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148105 call(385628 call (partial) commit _mt[243] this[148194]))
    (519926 return _void[55])
  }
  function SparseIndexBuffer[148188](?).add[148116](arg _mt[148200]:_MT[238], arg this[148198]:SparseIndexBuffer[148188](?), arg idx[148113] :
  (385633 call idxType _mt[243] this[148198])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668673] "expr temp" "maybe param" "maybe type" "temp"
    (668676 'move' call_tmp[668673](385645 call cur _mt[243] this[148198]))
    unknown call_tmp[668678] "expr temp" "maybe param" "maybe type" "temp"
    (668681 'move' call_tmp[668678](148121 call(385638 call (partial) buf _mt[243] this[148198]) call_tmp[668673]))
    (148123 call = call_tmp[668678] idx[148113])
    (481450 'end of statement')
    unknown call_tmp[668685] "expr temp" "maybe param" "maybe type" "temp"
    (668688 'move' call_tmp[668685](385651 call cur _mt[243] this[148198]))
    (148129 call += call_tmp[668685] 1)
    (481451 'end of statement')
    unknown call_tmp[668692] "expr temp" "maybe param" "maybe type" "temp"
    (668695 'move' call_tmp[668692](385656 call cur _mt[243] this[148198]))
    unknown call_tmp[668699] "expr temp" "maybe param" "maybe type" "temp"
    (668702 'move' call_tmp[668699](360520 call buf _mt[243] this[148198]))
    unknown call_tmp[668706] "expr temp" "maybe param" "maybe type" "temp"
    (668709 'move' call_tmp[668706](148134 call size _mt[243] call_tmp[668699]))
    unknown call_tmp[668711] "expr temp" "maybe param" "maybe type" "temp"
    (668714 'move' call_tmp[668711](148137 call == call_tmp[668692] call_tmp[668706]))
    unknown call_tmp[668716] "expr temp" "maybe param" "maybe type" "temp"
    (668719 'move' call_tmp[668716](148143 call _cond_test call_tmp[668711]))
    if call_tmp[668716]
    {
      (148141 call(385660 call (partial) commit _mt[243] this[148198]))
    }
    (519928 return _void[55])
  }
  function SparseIndexBuffer[148188](?).commit[148152](arg _mt[148204]:_MT[238], arg this[148202]:SparseIndexBuffer[148188](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668725] "expr temp" "maybe param" "maybe type" "temp"
    (668728 'move' call_tmp[668725](385665 call cur _mt[243] this[148202]))
    unknown call_tmp[668730] "expr temp" "maybe param" "maybe type" "temp"
    (668733 'move' call_tmp[668730](148156 call >= call_tmp[668725] 1))
    unknown call_tmp[668735] "expr temp" "maybe param" "maybe type" "temp"
    (668738 'move' call_tmp[668735](148174 call _cond_test call_tmp[668730]))
    if call_tmp[668735]
    {
      unknown call_tmp[668742] "expr temp" "maybe param" "maybe type" "temp"
      (668745 'move' call_tmp[668742](360525 call obj _mt[243] this[148202]))
      unknown call_tmp[668753] "expr temp" "maybe param" "maybe type" "temp"
      (668756 'move' call_tmp[668753](385675 call cur _mt[243] this[148202]))
      unknown call_tmp[668758] "expr temp" "maybe param" "maybe type" "temp"
      (668761 'move' call_tmp[668758](148165 call - call_tmp[668753] 1))
      unknown call_tmp[668763] "expr temp" "maybe param" "maybe type" "temp"
      (668766 'move' call_tmp[668763](148167 call chpl_build_high_bounded_range call_tmp[668758]))
      unknown call_tmp[668768] "expr temp" "maybe param" "maybe type" "temp"
      (668771 'move' call_tmp[668768](148170 call(385670 call (partial) buf _mt[243] this[148202]) call_tmp[668763]))
      (148172 call(148159 call (partial) dsiBulkAdd _mt[243] call_tmp[668742]) call_tmp[668768])
    }
    unknown call_tmp[668775] "expr temp" "maybe param" "maybe type" "temp"
    (668778 'move' call_tmp[668775](385680 call cur _mt[243] this[148202]))
    (148182 call = call_tmp[668775] 0)
    (519930 return _void[55])
  }
  function SparseIndexBuffer[148188](?).rank[802323](arg _mt[802325]:_MT[238], arg this[802327]:SparseIndexBuffer[148188](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802346] "RVV" "param" "temp"
    unknown call_tmp[802360] "expr temp" "maybe param" "maybe type" "temp"
    (802363 'move' call_tmp[802360](802332 'is bound' this[802327] c"rank"))
    if call_tmp[802360]
    {
      unknown call_tmp[802365] "expr temp" "maybe param" "maybe type" "temp"
      (802368 'move' call_tmp[802365](802331 '.' this[802327] c"rank"))
      (802351 'move' ret[802346](802350 'deref' call_tmp[802365]))
      gotoReturn _end_rank[802344] _end_rank[802344]
    }
    {
      (802356 'move' ret[802346](802355 'deref' ?[260]))
      gotoReturn _end_rank[802344] _end_rank[802344]
    }
    label _end_rank[802344]
    (802348 return ret[802346])
  }
  function SparseIndexBuffer[148188](?).rank[802370](arg _mt[802372]:_MT[238], arg this[802374]:SparseIndexBuffer[148188](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802393] "RVV" "param" "temp"
    unknown call_tmp[802407] "expr temp" "maybe param" "maybe type" "temp"
    (802410 'move' call_tmp[802407](802379 'is bound' this[802374] c"rank"))
    if call_tmp[802407]
    {
      unknown call_tmp[802412] "expr temp" "maybe param" "maybe type" "temp"
      (802415 'move' call_tmp[802412](802378 '.' this[802374] c"rank"))
      (802398 'move' ret[802393](802397 'deref' call_tmp[802412]))
      gotoReturn _end_rank[802391] _end_rank[802391]
    }
    {
      (802403 'move' ret[802393](802402 'deref' ?[260]))
      gotoReturn _end_rank[802391] _end_rank[802391]
    }
    label _end_rank[802391]
    (802395 return ret[802393])
  }
  function SparseIndexBuffer[148188](?).obj[802417](arg _mt[802419]:_MT[238], ref arg this[802421]:SparseIndexBuffer[148188](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802431] "RVV" "temp"
    unknown call_tmp[802438] "expr temp" "maybe param" "maybe type" "temp"
    (802441 'move' call_tmp[802438](802425 '.' this[802421] c"obj"))
    (802436 'move' ret[802431](802435 'addr of' call_tmp[802438]))
    (802433 return ret[802431])
  }
  function SparseIndexBuffer[148188](?).idxType[802443](arg _mt[802445]:_MT[238], arg this[802447]:SparseIndexBuffer[148188](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802466] "RVV" "temp" "type variable"
    unknown call_tmp[802480] "expr temp" "maybe param" "maybe type" "temp"
    (802483 'move' call_tmp[802480](802452 'is bound' this[802447] c"idxType"))
    if call_tmp[802480]
    {
      unknown call_tmp[802485] "expr temp" "maybe param" "maybe type" "temp"
      (802488 'move' call_tmp[802485](802451 '.v' this[802447] c"idxType"))
      (802471 'move' ret[802466](802470 'deref' call_tmp[802485]))
      gotoReturn _end_idxType[802464] _end_idxType[802464]
    }
    {
      (802476 'move' ret[802466](802475 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[802464] _end_idxType[802464]
    }
    label _end_idxType[802464]
    (802468 return ret[802466])
  }
  function SparseIndexBuffer[148188](?).idxType[802490](arg _mt[802492]:_MT[238], arg this[802494]:SparseIndexBuffer[148188](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802513] "RVV" "temp" "type variable"
    unknown call_tmp[802527] "expr temp" "maybe param" "maybe type" "temp"
    (802530 'move' call_tmp[802527](802499 'is bound' this[802494] c"idxType"))
    if call_tmp[802527]
    {
      unknown call_tmp[802532] "expr temp" "maybe param" "maybe type" "temp"
      (802535 'move' call_tmp[802532](802498 '.v' this[802494] c"idxType"))
      (802518 'move' ret[802513](802517 'deref' call_tmp[802532]))
      gotoReturn _end_idxType[802511] _end_idxType[802511]
    }
    {
      (802523 'move' ret[802513](802522 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[802511] _end_idxType[802511]
    }
    label _end_idxType[802511]
    (802515 return ret[802513])
  }
  function SparseIndexBuffer[148188](?).bufDom[802537](arg _mt[802539]:_MT[238], ref arg this[802541]:SparseIndexBuffer[148188](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802551] "RVV" "temp"
    unknown call_tmp[802558] "expr temp" "maybe param" "maybe type" "temp"
    (802561 'move' call_tmp[802558](802545 '.' this[802541] c"bufDom"))
    (802556 'move' ret[802551](802555 'addr of' call_tmp[802558]))
    (802553 return ret[802551])
  }
  function SparseIndexBuffer[148188](?).buf[802563](arg _mt[802565]:_MT[238], ref arg this[802567]:SparseIndexBuffer[148188](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802577] "RVV" "temp"
    unknown call_tmp[802584] "expr temp" "maybe param" "maybe type" "temp"
    (802587 'move' call_tmp[802584](802571 '.' this[802567] c"buf"))
    (802582 'move' ret[802577](802581 'addr of' call_tmp[802584]))
    (802579 return ret[802577])
  }
  function SparseIndexBuffer[148188](?).cur[802589](arg _mt[802591]:_MT[238], ref arg this[802593]:SparseIndexBuffer[148188](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802603] "RVV" "temp"
    unknown call_tmp[802610] "expr temp" "maybe param" "maybe type" "temp"
    (802613 'move' call_tmp[802610](802597 '.' this[802593] c"cur"))
    (802608 'move' ret[802603](802607 'addr of' call_tmp[802610]))
    (802605 return ret[802603])
  }
  function SparseIndexBuffer[148188](?).init=[802615](arg _mt[802618]:_MT[238], ref arg this[802619]:SparseIndexBuffer[148188](?), arg other[802622] :
  (802621 'typeof' this[802619])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[802756] "expr temp" "maybe param" "maybe type" "temp"
    (802759 'move' call_tmp[802756](802631 call rank _mt[243] other[802622]))
    unknown call_tmp[802761] "expr temp" "maybe param" "maybe type" "temp"
    (802764 'move' call_tmp[802761](802688 call _cast int(64)[13] call_tmp[802756]))
    (802690 'init field' this[802619] c"rank" call_tmp[802761])
    (802746 'end of statement')
    unknown call_tmp[802768] "maybe param" "maybe type" "temp"
    (802771 'move' call_tmp[802768](802641 call obj _mt[243] other[802622]))
    unknown tmp[802693] "temp"
    (802696 'init var' tmp[802693] call_tmp[802768] BaseSparseDom[382165](?))
    (802698 'init field' this[802619] c"obj" tmp[802693])
    (802747 'end of statement')
    unknown tmp[802702] "temp" "type variable"
    (802704 'move' tmp[802702](802651 call idxType _mt[243] other[802622]))
    (802706 'init field' this[802619] c"idxType" tmp[802702])
    (802748 'end of statement')
    unknown call_tmp[802777] "maybe param" "maybe type" "temp"
    (802780 'move' call_tmp[802777](802661 call bufDom _mt[243] other[802622]))
    unknown tmp[802710] "temp"
    (802712 'init var' tmp[802710] call_tmp[802777])
    (802714 '.=' this[802619] c"bufDom" tmp[802710])
    (802749 'end of statement')
    unknown call_tmp[802784] "maybe param" "maybe type" "temp"
    (802787 'move' call_tmp[802784](802671 call buf _mt[243] other[802622]))
    unknown call_tmp[802789] "expr temp" "maybe param" "maybe type" "temp"
    (802792 'move' call_tmp[802789](802732 '.' this[802619] c"bufDom"))
    unknown call_tmp[802794] "expr temp" "maybe param" "maybe type" "temp"
    (802797 'move' call_tmp[802794](802723 call chpl__ensureDomainExpr call_tmp[802789]))
    unknown call_tmp[802799] "expr temp" "maybe param" "maybe type" "temp"
    (802802 'move' call_tmp[802799](802735 '.v' this[802619] c"idxType"))
    unknown call_tmp[802804] "maybe param" "maybe type" "temp"
    (802807 'move' call_tmp[802804](802721 call chpl__buildArrayRuntimeType call_tmp[802794] call_tmp[802799]))
    unknown tmp[802718] "temp"
    (802726 'init var' tmp[802718] call_tmp[802784] call_tmp[802804])
    (802728 'init field' this[802619] c"buf" tmp[802718])
    (802750 'end of statement')
    unknown call_tmp[802811] "maybe param" "maybe type" "temp"
    (802814 'move' call_tmp[802811](802681 call cur _mt[243] other[802622]))
    unknown tmp[802738] "temp"
    (802740 'init var' tmp[802738] call_tmp[802811])
    (802742 '.=' this[802619] c"cur" tmp[802738])
    (802751 'end of statement')
    (802752 return _void[55])
  }
  function SparseIndexBuffer[148188](?).writeThis[802816](arg _mt[802820]:_MT[238], arg this[802818]:SparseIndexBuffer[148188](?), arg f[802819]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (802825 call writeThisDefaultImpl f[802819] this[802818])
    (802830 return _void[55])
  }
  function SparseIndexBuffer[148188](?).readThis[802832](arg _mt[802836]:_MT[238], arg this[802834]:SparseIndexBuffer[148188](?), arg f[802835]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (802840 call readThisDefaultImpl f[802835] this[802834])
    (802846 return _void[55])
  }
  function chpl_fields_are_comparable[802860](arg _arg1[802862]:SparseIndexBuffer[148188](?), arg _arg2[802863]:SparseIndexBuffer[148188](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[802922]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[802929] "expr temp" "maybe param" "maybe type" "temp"
    (802932 'move' call_tmp[802929](802866 call rank _mt[243] _arg1[802862]))
    unknown call_tmp[802934] "expr temp" "maybe param" "maybe type" "temp"
    (802937 'move' call_tmp[802934](802870 call rank _mt[243] _arg2[802863]))
    unknown call_tmp[802939] "expr temp" "maybe param" "maybe type" "temp"
    (802942 'move' call_tmp[802939](802874 'call resolves' c"==" call_tmp[802929] call_tmp[802934]))
    unknown call_tmp[802944] "expr temp" "maybe param" "maybe type" "temp"
    (802947 'move' call_tmp[802944](802876 call obj _mt[243] _arg1[802862]))
    unknown call_tmp[802949] "expr temp" "maybe param" "maybe type" "temp"
    (802952 'move' call_tmp[802949](802880 call obj _mt[243] _arg2[802863]))
    unknown call_tmp[802954] "expr temp" "maybe param" "maybe type" "temp"
    (802957 'move' call_tmp[802954](802884 'call resolves' c"==" call_tmp[802944] call_tmp[802949]))
    unknown call_tmp[802959] "expr temp" "maybe param" "maybe type" "temp"
    (802962 'move' call_tmp[802959](802886 call bufDom _mt[243] _arg1[802862]))
    unknown call_tmp[802964] "expr temp" "maybe param" "maybe type" "temp"
    (802967 'move' call_tmp[802964](802890 call bufDom _mt[243] _arg2[802863]))
    unknown call_tmp[802969] "expr temp" "maybe param" "maybe type" "temp"
    (802972 'move' call_tmp[802969](802894 'call resolves' c"==" call_tmp[802959] call_tmp[802964]))
    unknown call_tmp[802974] "expr temp" "maybe param" "maybe type" "temp"
    (802977 'move' call_tmp[802974](802896 call buf _mt[243] _arg1[802862]))
    unknown call_tmp[802979] "expr temp" "maybe param" "maybe type" "temp"
    (802982 'move' call_tmp[802979](802900 call buf _mt[243] _arg2[802863]))
    unknown call_tmp[802984] "expr temp" "maybe param" "maybe type" "temp"
    (802987 'move' call_tmp[802984](802904 'call resolves' c"==" call_tmp[802974] call_tmp[802979]))
    unknown call_tmp[802989] "expr temp" "maybe param" "maybe type" "temp"
    (802992 'move' call_tmp[802989](802906 call cur _mt[243] _arg1[802862]))
    unknown call_tmp[802994] "expr temp" "maybe param" "maybe type" "temp"
    (802997 'move' call_tmp[802994](802910 call cur _mt[243] _arg2[802863]))
    unknown call_tmp[802999] "expr temp" "maybe param" "maybe type" "temp"
    (803002 'move' call_tmp[802999](802914 'call resolves' c"==" call_tmp[802989] call_tmp[802994]))
    unknown call_tmp[803004] "expr temp" "maybe param" "maybe type" "temp"
    (803007 'move' call_tmp[803004](802916 '&' call_tmp[802939] call_tmp[802954] call_tmp[802969] call_tmp[802984] call_tmp[802999]))
    (802927 'move' ret[802922](802926 'deref' call_tmp[803004]))
    (802924 return ret[802922])
  }
  function ==[802848](arg _arg1[802850]:SparseIndexBuffer[148188](?), arg _arg2[802851]:SparseIndexBuffer[148188](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[803096]:bool[10] "RVV" "temp"
    unknown call_tmp[803128] "expr temp" "maybe param" "maybe type" "temp"
    (803131 'move' call_tmp[803128](803015 call rank _mt[243] _arg1[802850]))
    unknown call_tmp[803133] "expr temp" "maybe param" "maybe type" "temp"
    (803136 'move' call_tmp[803133](803019 call rank _mt[243] _arg2[802851]))
    unknown call_tmp[803138] "expr temp" "maybe param" "maybe type" "temp"
    (803141 'move' call_tmp[803138](803023 call != call_tmp[803128] call_tmp[803133]))
    if call_tmp[803138]
    {
      (803101 'move' ret[803096](803100 'deref' 0))
      gotoReturn _end_==[803094] _end_==[803094]
    }
    unknown call_tmp[803143] "expr temp" "maybe param" "maybe type" "temp"
    (803146 'move' call_tmp[803143](803029 call obj _mt[243] _arg1[802850]))
    unknown call_tmp[803148] "expr temp" "maybe param" "maybe type" "temp"
    (803151 'move' call_tmp[803148](803033 call obj _mt[243] _arg2[802851]))
    unknown call_tmp[803153] "expr temp" "maybe param" "maybe type" "temp"
    (803156 'move' call_tmp[803153](803037 call != call_tmp[803143] call_tmp[803148]))
    if call_tmp[803153]
    {
      (803106 'move' ret[803096](803105 'deref' 0))
      gotoReturn _end_==[803094] _end_==[803094]
    }
    unknown call_tmp[803158] "expr temp" "maybe param" "maybe type" "temp"
    (803161 'move' call_tmp[803158](803043 call bufDom _mt[243] _arg1[802850]))
    unknown call_tmp[803163] "expr temp" "maybe param" "maybe type" "temp"
    (803166 'move' call_tmp[803163](803047 call bufDom _mt[243] _arg2[802851]))
    unknown call_tmp[803168] "expr temp" "maybe param" "maybe type" "temp"
    (803171 'move' call_tmp[803168](803051 call != call_tmp[803158] call_tmp[803163]))
    if call_tmp[803168]
    {
      (803111 'move' ret[803096](803110 'deref' 0))
      gotoReturn _end_==[803094] _end_==[803094]
    }
    unknown call_tmp[803173] "expr temp" "maybe param" "maybe type" "temp"
    (803176 'move' call_tmp[803173](803057 call buf _mt[243] _arg1[802850]))
    unknown call_tmp[803178] "expr temp" "maybe param" "maybe type" "temp"
    (803181 'move' call_tmp[803178](803061 call buf _mt[243] _arg2[802851]))
    unknown call_tmp[803183] "expr temp" "maybe param" "maybe type" "temp"
    (803186 'move' call_tmp[803183](803065 call != call_tmp[803173] call_tmp[803178]))
    if call_tmp[803183]
    {
      (803116 'move' ret[803096](803115 'deref' 0))
      gotoReturn _end_==[803094] _end_==[803094]
    }
    unknown call_tmp[803188] "expr temp" "maybe param" "maybe type" "temp"
    (803191 'move' call_tmp[803188](803071 call cur _mt[243] _arg1[802850]))
    unknown call_tmp[803193] "expr temp" "maybe param" "maybe type" "temp"
    (803196 'move' call_tmp[803193](803075 call cur _mt[243] _arg2[802851]))
    unknown call_tmp[803198] "expr temp" "maybe param" "maybe type" "temp"
    (803201 'move' call_tmp[803198](803079 call != call_tmp[803188] call_tmp[803193]))
    if call_tmp[803198]
    {
      (803121 'move' ret[803096](803120 'deref' 0))
      gotoReturn _end_==[803094] _end_==[803094]
    }
    (803126 'move' ret[803096](803125 'deref' 1))
    label _end_==[803094]
    (803098 return ret[803096])
  }
  where {
    unknown call_tmp[803203] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803206 'move' call_tmp[803203](802854 'typeof' _arg1[802850]))
    unknown call_tmp[803208] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803211 'move' call_tmp[803208](802856 'typeof' _arg2[802851]))
    unknown call_tmp[803213] "expr temp" "maybe param" "maybe type" "temp"
    (803216 'move' call_tmp[803213](802858 call == call_tmp[803203] call_tmp[803208]))
    unknown call_tmp[803218] "expr temp" "maybe param" "maybe type" "temp"
    (803221 'move' call_tmp[803218](803009 call chpl_fields_are_comparable[802860] _arg1[802850] _arg2[802851]))
    (803013 '&' call_tmp[803213] call_tmp[803218])
  }
  function chpl_fields_are_comparable[803235](arg _arg1[803237]:SparseIndexBuffer[148188](?), arg _arg2[803238]:SparseIndexBuffer[148188](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[803297]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[803304] "expr temp" "maybe param" "maybe type" "temp"
    (803307 'move' call_tmp[803304](803241 call rank _mt[243] _arg1[803237]))
    unknown call_tmp[803309] "expr temp" "maybe param" "maybe type" "temp"
    (803312 'move' call_tmp[803309](803245 call rank _mt[243] _arg2[803238]))
    unknown call_tmp[803314] "expr temp" "maybe param" "maybe type" "temp"
    (803317 'move' call_tmp[803314](803249 'call resolves' c"!=" call_tmp[803304] call_tmp[803309]))
    unknown call_tmp[803319] "expr temp" "maybe param" "maybe type" "temp"
    (803322 'move' call_tmp[803319](803251 call obj _mt[243] _arg1[803237]))
    unknown call_tmp[803324] "expr temp" "maybe param" "maybe type" "temp"
    (803327 'move' call_tmp[803324](803255 call obj _mt[243] _arg2[803238]))
    unknown call_tmp[803329] "expr temp" "maybe param" "maybe type" "temp"
    (803332 'move' call_tmp[803329](803259 'call resolves' c"!=" call_tmp[803319] call_tmp[803324]))
    unknown call_tmp[803334] "expr temp" "maybe param" "maybe type" "temp"
    (803337 'move' call_tmp[803334](803261 call bufDom _mt[243] _arg1[803237]))
    unknown call_tmp[803339] "expr temp" "maybe param" "maybe type" "temp"
    (803342 'move' call_tmp[803339](803265 call bufDom _mt[243] _arg2[803238]))
    unknown call_tmp[803344] "expr temp" "maybe param" "maybe type" "temp"
    (803347 'move' call_tmp[803344](803269 'call resolves' c"!=" call_tmp[803334] call_tmp[803339]))
    unknown call_tmp[803349] "expr temp" "maybe param" "maybe type" "temp"
    (803352 'move' call_tmp[803349](803271 call buf _mt[243] _arg1[803237]))
    unknown call_tmp[803354] "expr temp" "maybe param" "maybe type" "temp"
    (803357 'move' call_tmp[803354](803275 call buf _mt[243] _arg2[803238]))
    unknown call_tmp[803359] "expr temp" "maybe param" "maybe type" "temp"
    (803362 'move' call_tmp[803359](803279 'call resolves' c"!=" call_tmp[803349] call_tmp[803354]))
    unknown call_tmp[803364] "expr temp" "maybe param" "maybe type" "temp"
    (803367 'move' call_tmp[803364](803281 call cur _mt[243] _arg1[803237]))
    unknown call_tmp[803369] "expr temp" "maybe param" "maybe type" "temp"
    (803372 'move' call_tmp[803369](803285 call cur _mt[243] _arg2[803238]))
    unknown call_tmp[803374] "expr temp" "maybe param" "maybe type" "temp"
    (803377 'move' call_tmp[803374](803289 'call resolves' c"!=" call_tmp[803364] call_tmp[803369]))
    unknown call_tmp[803379] "expr temp" "maybe param" "maybe type" "temp"
    (803382 'move' call_tmp[803379](803291 '&' call_tmp[803314] call_tmp[803329] call_tmp[803344] call_tmp[803359] call_tmp[803374]))
    (803302 'move' ret[803297](803301 'deref' call_tmp[803379]))
    (803299 return ret[803297])
  }
  function !=[803223](arg _arg1[803225]:SparseIndexBuffer[148188](?), arg _arg2[803226]:SparseIndexBuffer[148188](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[803471]:bool[10] "RVV" "temp"
    unknown call_tmp[803503] "expr temp" "maybe param" "maybe type" "temp"
    (803506 'move' call_tmp[803503](803390 call rank _mt[243] _arg1[803225]))
    unknown call_tmp[803508] "expr temp" "maybe param" "maybe type" "temp"
    (803511 'move' call_tmp[803508](803394 call rank _mt[243] _arg2[803226]))
    unknown call_tmp[803513] "expr temp" "maybe param" "maybe type" "temp"
    (803516 'move' call_tmp[803513](803398 call != call_tmp[803503] call_tmp[803508]))
    if call_tmp[803513]
    {
      (803476 'move' ret[803471](803475 'deref' 1))
      gotoReturn _end_!=[803469] _end_!=[803469]
    }
    unknown call_tmp[803518] "expr temp" "maybe param" "maybe type" "temp"
    (803521 'move' call_tmp[803518](803404 call obj _mt[243] _arg1[803225]))
    unknown call_tmp[803523] "expr temp" "maybe param" "maybe type" "temp"
    (803526 'move' call_tmp[803523](803408 call obj _mt[243] _arg2[803226]))
    unknown call_tmp[803528] "expr temp" "maybe param" "maybe type" "temp"
    (803531 'move' call_tmp[803528](803412 call != call_tmp[803518] call_tmp[803523]))
    if call_tmp[803528]
    {
      (803481 'move' ret[803471](803480 'deref' 1))
      gotoReturn _end_!=[803469] _end_!=[803469]
    }
    unknown call_tmp[803533] "expr temp" "maybe param" "maybe type" "temp"
    (803536 'move' call_tmp[803533](803418 call bufDom _mt[243] _arg1[803225]))
    unknown call_tmp[803538] "expr temp" "maybe param" "maybe type" "temp"
    (803541 'move' call_tmp[803538](803422 call bufDom _mt[243] _arg2[803226]))
    unknown call_tmp[803543] "expr temp" "maybe param" "maybe type" "temp"
    (803546 'move' call_tmp[803543](803426 call != call_tmp[803533] call_tmp[803538]))
    if call_tmp[803543]
    {
      (803486 'move' ret[803471](803485 'deref' 1))
      gotoReturn _end_!=[803469] _end_!=[803469]
    }
    unknown call_tmp[803548] "expr temp" "maybe param" "maybe type" "temp"
    (803551 'move' call_tmp[803548](803432 call buf _mt[243] _arg1[803225]))
    unknown call_tmp[803553] "expr temp" "maybe param" "maybe type" "temp"
    (803556 'move' call_tmp[803553](803436 call buf _mt[243] _arg2[803226]))
    unknown call_tmp[803558] "expr temp" "maybe param" "maybe type" "temp"
    (803561 'move' call_tmp[803558](803440 call != call_tmp[803548] call_tmp[803553]))
    if call_tmp[803558]
    {
      (803491 'move' ret[803471](803490 'deref' 1))
      gotoReturn _end_!=[803469] _end_!=[803469]
    }
    unknown call_tmp[803563] "expr temp" "maybe param" "maybe type" "temp"
    (803566 'move' call_tmp[803563](803446 call cur _mt[243] _arg1[803225]))
    unknown call_tmp[803568] "expr temp" "maybe param" "maybe type" "temp"
    (803571 'move' call_tmp[803568](803450 call cur _mt[243] _arg2[803226]))
    unknown call_tmp[803573] "expr temp" "maybe param" "maybe type" "temp"
    (803576 'move' call_tmp[803573](803454 call != call_tmp[803563] call_tmp[803568]))
    if call_tmp[803573]
    {
      (803496 'move' ret[803471](803495 'deref' 1))
      gotoReturn _end_!=[803469] _end_!=[803469]
    }
    (803501 'move' ret[803471](803500 'deref' 0))
    label _end_!=[803469]
    (803473 return ret[803471])
  }
  where {
    unknown call_tmp[803578] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803581 'move' call_tmp[803578](803229 'typeof' _arg1[803225]))
    unknown call_tmp[803583] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803586 'move' call_tmp[803583](803231 'typeof' _arg2[803226]))
    unknown call_tmp[803588] "expr temp" "maybe param" "maybe type" "temp"
    (803591 'move' call_tmp[803588](803233 call == call_tmp[803578] call_tmp[803583]))
    unknown call_tmp[803593] "expr temp" "maybe param" "maybe type" "temp"
    (803596 'move' call_tmp[803593](803384 call chpl_fields_are_comparable[803235] _arg1[803225] _arg2[803226]))
    (803388 '&' call_tmp[803588] call_tmp[803593])
  }
  function chpl_fields_are_comparable[803610](arg _arg1[803612]:SparseIndexBuffer[148188](?), arg _arg2[803613]:SparseIndexBuffer[148188](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[803672]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[803679] "expr temp" "maybe param" "maybe type" "temp"
    (803682 'move' call_tmp[803679](803616 call rank _mt[243] _arg1[803612]))
    unknown call_tmp[803684] "expr temp" "maybe param" "maybe type" "temp"
    (803687 'move' call_tmp[803684](803620 call rank _mt[243] _arg2[803613]))
    unknown call_tmp[803689] "expr temp" "maybe param" "maybe type" "temp"
    (803692 'move' call_tmp[803689](803624 'call resolves' c"<" call_tmp[803679] call_tmp[803684]))
    unknown call_tmp[803694] "expr temp" "maybe param" "maybe type" "temp"
    (803697 'move' call_tmp[803694](803626 call obj _mt[243] _arg1[803612]))
    unknown call_tmp[803699] "expr temp" "maybe param" "maybe type" "temp"
    (803702 'move' call_tmp[803699](803630 call obj _mt[243] _arg2[803613]))
    unknown call_tmp[803704] "expr temp" "maybe param" "maybe type" "temp"
    (803707 'move' call_tmp[803704](803634 'call resolves' c"<" call_tmp[803694] call_tmp[803699]))
    unknown call_tmp[803709] "expr temp" "maybe param" "maybe type" "temp"
    (803712 'move' call_tmp[803709](803636 call bufDom _mt[243] _arg1[803612]))
    unknown call_tmp[803714] "expr temp" "maybe param" "maybe type" "temp"
    (803717 'move' call_tmp[803714](803640 call bufDom _mt[243] _arg2[803613]))
    unknown call_tmp[803719] "expr temp" "maybe param" "maybe type" "temp"
    (803722 'move' call_tmp[803719](803644 'call resolves' c"<" call_tmp[803709] call_tmp[803714]))
    unknown call_tmp[803724] "expr temp" "maybe param" "maybe type" "temp"
    (803727 'move' call_tmp[803724](803646 call buf _mt[243] _arg1[803612]))
    unknown call_tmp[803729] "expr temp" "maybe param" "maybe type" "temp"
    (803732 'move' call_tmp[803729](803650 call buf _mt[243] _arg2[803613]))
    unknown call_tmp[803734] "expr temp" "maybe param" "maybe type" "temp"
    (803737 'move' call_tmp[803734](803654 'call resolves' c"<" call_tmp[803724] call_tmp[803729]))
    unknown call_tmp[803739] "expr temp" "maybe param" "maybe type" "temp"
    (803742 'move' call_tmp[803739](803656 call cur _mt[243] _arg1[803612]))
    unknown call_tmp[803744] "expr temp" "maybe param" "maybe type" "temp"
    (803747 'move' call_tmp[803744](803660 call cur _mt[243] _arg2[803613]))
    unknown call_tmp[803749] "expr temp" "maybe param" "maybe type" "temp"
    (803752 'move' call_tmp[803749](803664 'call resolves' c"<" call_tmp[803739] call_tmp[803744]))
    unknown call_tmp[803754] "expr temp" "maybe param" "maybe type" "temp"
    (803757 'move' call_tmp[803754](803666 '&' call_tmp[803689] call_tmp[803704] call_tmp[803719] call_tmp[803734] call_tmp[803749]))
    (803677 'move' ret[803672](803676 'deref' call_tmp[803754]))
    (803674 return ret[803672])
  }
  function <[803598](arg _arg1[803600]:SparseIndexBuffer[148188](?), arg _arg2[803601]:SparseIndexBuffer[148188](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[803921]:bool[10] "RVV" "temp"
    unknown call_tmp[803978] "expr temp" "maybe param" "maybe type" "temp"
    (803981 'move' call_tmp[803978](803765 call rank _mt[243] _arg1[803600]))
    unknown call_tmp[803983] "expr temp" "maybe param" "maybe type" "temp"
    (803986 'move' call_tmp[803983](803769 call rank _mt[243] _arg2[803601]))
    unknown call_tmp[803988] "expr temp" "maybe param" "maybe type" "temp"
    (803991 'move' call_tmp[803988](803773 call < call_tmp[803978] call_tmp[803983]))
    if call_tmp[803988]
    {
      (803926 'move' ret[803921](803925 'deref' 1))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[803993] "expr temp" "maybe param" "maybe type" "temp"
    (803996 'move' call_tmp[803993](803779 call rank _mt[243] _arg1[803600]))
    unknown call_tmp[803998] "expr temp" "maybe param" "maybe type" "temp"
    (804001 'move' call_tmp[803998](803783 call rank _mt[243] _arg2[803601]))
    unknown call_tmp[804003] "expr temp" "maybe param" "maybe type" "temp"
    (804006 'move' call_tmp[804003](803787 call > call_tmp[803993] call_tmp[803998]))
    if call_tmp[804003]
    {
      (803931 'move' ret[803921](803930 'deref' 0))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804008] "expr temp" "maybe param" "maybe type" "temp"
    (804011 'move' call_tmp[804008](803793 call obj _mt[243] _arg1[803600]))
    unknown call_tmp[804013] "expr temp" "maybe param" "maybe type" "temp"
    (804016 'move' call_tmp[804013](803797 call obj _mt[243] _arg2[803601]))
    unknown call_tmp[804018] "expr temp" "maybe param" "maybe type" "temp"
    (804021 'move' call_tmp[804018](803801 call < call_tmp[804008] call_tmp[804013]))
    if call_tmp[804018]
    {
      (803936 'move' ret[803921](803935 'deref' 1))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804023] "expr temp" "maybe param" "maybe type" "temp"
    (804026 'move' call_tmp[804023](803807 call obj _mt[243] _arg1[803600]))
    unknown call_tmp[804028] "expr temp" "maybe param" "maybe type" "temp"
    (804031 'move' call_tmp[804028](803811 call obj _mt[243] _arg2[803601]))
    unknown call_tmp[804033] "expr temp" "maybe param" "maybe type" "temp"
    (804036 'move' call_tmp[804033](803815 call > call_tmp[804023] call_tmp[804028]))
    if call_tmp[804033]
    {
      (803941 'move' ret[803921](803940 'deref' 0))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804038] "expr temp" "maybe param" "maybe type" "temp"
    (804041 'move' call_tmp[804038](803821 call bufDom _mt[243] _arg1[803600]))
    unknown call_tmp[804043] "expr temp" "maybe param" "maybe type" "temp"
    (804046 'move' call_tmp[804043](803825 call bufDom _mt[243] _arg2[803601]))
    unknown call_tmp[804048] "expr temp" "maybe param" "maybe type" "temp"
    (804051 'move' call_tmp[804048](803829 call < call_tmp[804038] call_tmp[804043]))
    if call_tmp[804048]
    {
      (803946 'move' ret[803921](803945 'deref' 1))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804053] "expr temp" "maybe param" "maybe type" "temp"
    (804056 'move' call_tmp[804053](803835 call bufDom _mt[243] _arg1[803600]))
    unknown call_tmp[804058] "expr temp" "maybe param" "maybe type" "temp"
    (804061 'move' call_tmp[804058](803839 call bufDom _mt[243] _arg2[803601]))
    unknown call_tmp[804063] "expr temp" "maybe param" "maybe type" "temp"
    (804066 'move' call_tmp[804063](803843 call > call_tmp[804053] call_tmp[804058]))
    if call_tmp[804063]
    {
      (803951 'move' ret[803921](803950 'deref' 0))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804068] "expr temp" "maybe param" "maybe type" "temp"
    (804071 'move' call_tmp[804068](803849 call buf _mt[243] _arg1[803600]))
    unknown call_tmp[804073] "expr temp" "maybe param" "maybe type" "temp"
    (804076 'move' call_tmp[804073](803853 call buf _mt[243] _arg2[803601]))
    unknown call_tmp[804078] "expr temp" "maybe param" "maybe type" "temp"
    (804081 'move' call_tmp[804078](803857 call < call_tmp[804068] call_tmp[804073]))
    if call_tmp[804078]
    {
      (803956 'move' ret[803921](803955 'deref' 1))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804083] "expr temp" "maybe param" "maybe type" "temp"
    (804086 'move' call_tmp[804083](803863 call buf _mt[243] _arg1[803600]))
    unknown call_tmp[804088] "expr temp" "maybe param" "maybe type" "temp"
    (804091 'move' call_tmp[804088](803867 call buf _mt[243] _arg2[803601]))
    unknown call_tmp[804093] "expr temp" "maybe param" "maybe type" "temp"
    (804096 'move' call_tmp[804093](803871 call > call_tmp[804083] call_tmp[804088]))
    if call_tmp[804093]
    {
      (803961 'move' ret[803921](803960 'deref' 0))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804098] "expr temp" "maybe param" "maybe type" "temp"
    (804101 'move' call_tmp[804098](803877 call cur _mt[243] _arg1[803600]))
    unknown call_tmp[804103] "expr temp" "maybe param" "maybe type" "temp"
    (804106 'move' call_tmp[804103](803881 call cur _mt[243] _arg2[803601]))
    unknown call_tmp[804108] "expr temp" "maybe param" "maybe type" "temp"
    (804111 'move' call_tmp[804108](803885 call < call_tmp[804098] call_tmp[804103]))
    if call_tmp[804108]
    {
      (803966 'move' ret[803921](803965 'deref' 1))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    unknown call_tmp[804113] "expr temp" "maybe param" "maybe type" "temp"
    (804116 'move' call_tmp[804113](803891 call cur _mt[243] _arg1[803600]))
    unknown call_tmp[804118] "expr temp" "maybe param" "maybe type" "temp"
    (804121 'move' call_tmp[804118](803895 call cur _mt[243] _arg2[803601]))
    unknown call_tmp[804123] "expr temp" "maybe param" "maybe type" "temp"
    (804126 'move' call_tmp[804123](803899 call > call_tmp[804113] call_tmp[804118]))
    if call_tmp[804123]
    {
      (803971 'move' ret[803921](803970 'deref' 0))
      gotoReturn _end_<[803919] _end_<[803919]
    }
    (803976 'move' ret[803921](803975 'deref' 0))
    label _end_<[803919]
    (803923 return ret[803921])
  }
  where {
    unknown call_tmp[804128] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804131 'move' call_tmp[804128](803604 'typeof' _arg1[803600]))
    unknown call_tmp[804133] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804136 'move' call_tmp[804133](803606 'typeof' _arg2[803601]))
    unknown call_tmp[804138] "expr temp" "maybe param" "maybe type" "temp"
    (804141 'move' call_tmp[804138](803608 call == call_tmp[804128] call_tmp[804133]))
    unknown call_tmp[804143] "expr temp" "maybe param" "maybe type" "temp"
    (804146 'move' call_tmp[804143](803759 call chpl_fields_are_comparable[803610] _arg1[803600] _arg2[803601]))
    (803763 '&' call_tmp[804138] call_tmp[804143])
  }
  function chpl_fields_are_comparable[804160](arg _arg1[804162]:SparseIndexBuffer[148188](?), arg _arg2[804163]:SparseIndexBuffer[148188](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[804222]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[804229] "expr temp" "maybe param" "maybe type" "temp"
    (804232 'move' call_tmp[804229](804166 call rank _mt[243] _arg1[804162]))
    unknown call_tmp[804234] "expr temp" "maybe param" "maybe type" "temp"
    (804237 'move' call_tmp[804234](804170 call rank _mt[243] _arg2[804163]))
    unknown call_tmp[804239] "expr temp" "maybe param" "maybe type" "temp"
    (804242 'move' call_tmp[804239](804174 'call resolves' c"<=" call_tmp[804229] call_tmp[804234]))
    unknown call_tmp[804244] "expr temp" "maybe param" "maybe type" "temp"
    (804247 'move' call_tmp[804244](804176 call obj _mt[243] _arg1[804162]))
    unknown call_tmp[804249] "expr temp" "maybe param" "maybe type" "temp"
    (804252 'move' call_tmp[804249](804180 call obj _mt[243] _arg2[804163]))
    unknown call_tmp[804254] "expr temp" "maybe param" "maybe type" "temp"
    (804257 'move' call_tmp[804254](804184 'call resolves' c"<=" call_tmp[804244] call_tmp[804249]))
    unknown call_tmp[804259] "expr temp" "maybe param" "maybe type" "temp"
    (804262 'move' call_tmp[804259](804186 call bufDom _mt[243] _arg1[804162]))
    unknown call_tmp[804264] "expr temp" "maybe param" "maybe type" "temp"
    (804267 'move' call_tmp[804264](804190 call bufDom _mt[243] _arg2[804163]))
    unknown call_tmp[804269] "expr temp" "maybe param" "maybe type" "temp"
    (804272 'move' call_tmp[804269](804194 'call resolves' c"<=" call_tmp[804259] call_tmp[804264]))
    unknown call_tmp[804274] "expr temp" "maybe param" "maybe type" "temp"
    (804277 'move' call_tmp[804274](804196 call buf _mt[243] _arg1[804162]))
    unknown call_tmp[804279] "expr temp" "maybe param" "maybe type" "temp"
    (804282 'move' call_tmp[804279](804200 call buf _mt[243] _arg2[804163]))
    unknown call_tmp[804284] "expr temp" "maybe param" "maybe type" "temp"
    (804287 'move' call_tmp[804284](804204 'call resolves' c"<=" call_tmp[804274] call_tmp[804279]))
    unknown call_tmp[804289] "expr temp" "maybe param" "maybe type" "temp"
    (804292 'move' call_tmp[804289](804206 call cur _mt[243] _arg1[804162]))
    unknown call_tmp[804294] "expr temp" "maybe param" "maybe type" "temp"
    (804297 'move' call_tmp[804294](804210 call cur _mt[243] _arg2[804163]))
    unknown call_tmp[804299] "expr temp" "maybe param" "maybe type" "temp"
    (804302 'move' call_tmp[804299](804214 'call resolves' c"<=" call_tmp[804289] call_tmp[804294]))
    unknown call_tmp[804304] "expr temp" "maybe param" "maybe type" "temp"
    (804307 'move' call_tmp[804304](804216 '&' call_tmp[804239] call_tmp[804254] call_tmp[804269] call_tmp[804284] call_tmp[804299]))
    (804227 'move' ret[804222](804226 'deref' call_tmp[804304]))
    (804224 return ret[804222])
  }
  function <=[804148](arg _arg1[804150]:SparseIndexBuffer[148188](?), arg _arg2[804151]:SparseIndexBuffer[148188](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[804471]:bool[10] "RVV" "temp"
    unknown call_tmp[804528] "expr temp" "maybe param" "maybe type" "temp"
    (804531 'move' call_tmp[804528](804315 call rank _mt[243] _arg1[804150]))
    unknown call_tmp[804533] "expr temp" "maybe param" "maybe type" "temp"
    (804536 'move' call_tmp[804533](804319 call rank _mt[243] _arg2[804151]))
    unknown call_tmp[804538] "expr temp" "maybe param" "maybe type" "temp"
    (804541 'move' call_tmp[804538](804323 call < call_tmp[804528] call_tmp[804533]))
    if call_tmp[804538]
    {
      (804476 'move' ret[804471](804475 'deref' 1))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804543] "expr temp" "maybe param" "maybe type" "temp"
    (804546 'move' call_tmp[804543](804329 call rank _mt[243] _arg1[804150]))
    unknown call_tmp[804548] "expr temp" "maybe param" "maybe type" "temp"
    (804551 'move' call_tmp[804548](804333 call rank _mt[243] _arg2[804151]))
    unknown call_tmp[804553] "expr temp" "maybe param" "maybe type" "temp"
    (804556 'move' call_tmp[804553](804337 call > call_tmp[804543] call_tmp[804548]))
    if call_tmp[804553]
    {
      (804481 'move' ret[804471](804480 'deref' 0))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804558] "expr temp" "maybe param" "maybe type" "temp"
    (804561 'move' call_tmp[804558](804343 call obj _mt[243] _arg1[804150]))
    unknown call_tmp[804563] "expr temp" "maybe param" "maybe type" "temp"
    (804566 'move' call_tmp[804563](804347 call obj _mt[243] _arg2[804151]))
    unknown call_tmp[804568] "expr temp" "maybe param" "maybe type" "temp"
    (804571 'move' call_tmp[804568](804351 call < call_tmp[804558] call_tmp[804563]))
    if call_tmp[804568]
    {
      (804486 'move' ret[804471](804485 'deref' 1))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804573] "expr temp" "maybe param" "maybe type" "temp"
    (804576 'move' call_tmp[804573](804357 call obj _mt[243] _arg1[804150]))
    unknown call_tmp[804578] "expr temp" "maybe param" "maybe type" "temp"
    (804581 'move' call_tmp[804578](804361 call obj _mt[243] _arg2[804151]))
    unknown call_tmp[804583] "expr temp" "maybe param" "maybe type" "temp"
    (804586 'move' call_tmp[804583](804365 call > call_tmp[804573] call_tmp[804578]))
    if call_tmp[804583]
    {
      (804491 'move' ret[804471](804490 'deref' 0))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804588] "expr temp" "maybe param" "maybe type" "temp"
    (804591 'move' call_tmp[804588](804371 call bufDom _mt[243] _arg1[804150]))
    unknown call_tmp[804593] "expr temp" "maybe param" "maybe type" "temp"
    (804596 'move' call_tmp[804593](804375 call bufDom _mt[243] _arg2[804151]))
    unknown call_tmp[804598] "expr temp" "maybe param" "maybe type" "temp"
    (804601 'move' call_tmp[804598](804379 call < call_tmp[804588] call_tmp[804593]))
    if call_tmp[804598]
    {
      (804496 'move' ret[804471](804495 'deref' 1))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804603] "expr temp" "maybe param" "maybe type" "temp"
    (804606 'move' call_tmp[804603](804385 call bufDom _mt[243] _arg1[804150]))
    unknown call_tmp[804608] "expr temp" "maybe param" "maybe type" "temp"
    (804611 'move' call_tmp[804608](804389 call bufDom _mt[243] _arg2[804151]))
    unknown call_tmp[804613] "expr temp" "maybe param" "maybe type" "temp"
    (804616 'move' call_tmp[804613](804393 call > call_tmp[804603] call_tmp[804608]))
    if call_tmp[804613]
    {
      (804501 'move' ret[804471](804500 'deref' 0))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804618] "expr temp" "maybe param" "maybe type" "temp"
    (804621 'move' call_tmp[804618](804399 call buf _mt[243] _arg1[804150]))
    unknown call_tmp[804623] "expr temp" "maybe param" "maybe type" "temp"
    (804626 'move' call_tmp[804623](804403 call buf _mt[243] _arg2[804151]))
    unknown call_tmp[804628] "expr temp" "maybe param" "maybe type" "temp"
    (804631 'move' call_tmp[804628](804407 call < call_tmp[804618] call_tmp[804623]))
    if call_tmp[804628]
    {
      (804506 'move' ret[804471](804505 'deref' 1))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804633] "expr temp" "maybe param" "maybe type" "temp"
    (804636 'move' call_tmp[804633](804413 call buf _mt[243] _arg1[804150]))
    unknown call_tmp[804638] "expr temp" "maybe param" "maybe type" "temp"
    (804641 'move' call_tmp[804638](804417 call buf _mt[243] _arg2[804151]))
    unknown call_tmp[804643] "expr temp" "maybe param" "maybe type" "temp"
    (804646 'move' call_tmp[804643](804421 call > call_tmp[804633] call_tmp[804638]))
    if call_tmp[804643]
    {
      (804511 'move' ret[804471](804510 'deref' 0))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804648] "expr temp" "maybe param" "maybe type" "temp"
    (804651 'move' call_tmp[804648](804427 call cur _mt[243] _arg1[804150]))
    unknown call_tmp[804653] "expr temp" "maybe param" "maybe type" "temp"
    (804656 'move' call_tmp[804653](804431 call cur _mt[243] _arg2[804151]))
    unknown call_tmp[804658] "expr temp" "maybe param" "maybe type" "temp"
    (804661 'move' call_tmp[804658](804435 call < call_tmp[804648] call_tmp[804653]))
    if call_tmp[804658]
    {
      (804516 'move' ret[804471](804515 'deref' 1))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    unknown call_tmp[804663] "expr temp" "maybe param" "maybe type" "temp"
    (804666 'move' call_tmp[804663](804441 call cur _mt[243] _arg1[804150]))
    unknown call_tmp[804668] "expr temp" "maybe param" "maybe type" "temp"
    (804671 'move' call_tmp[804668](804445 call cur _mt[243] _arg2[804151]))
    unknown call_tmp[804673] "expr temp" "maybe param" "maybe type" "temp"
    (804676 'move' call_tmp[804673](804449 call > call_tmp[804663] call_tmp[804668]))
    if call_tmp[804673]
    {
      (804521 'move' ret[804471](804520 'deref' 0))
      gotoReturn _end_<=[804469] _end_<=[804469]
    }
    (804526 'move' ret[804471](804525 'deref' 1))
    label _end_<=[804469]
    (804473 return ret[804471])
  }
  where {
    unknown call_tmp[804678] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804681 'move' call_tmp[804678](804154 'typeof' _arg1[804150]))
    unknown call_tmp[804683] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804686 'move' call_tmp[804683](804156 'typeof' _arg2[804151]))
    unknown call_tmp[804688] "expr temp" "maybe param" "maybe type" "temp"
    (804691 'move' call_tmp[804688](804158 call == call_tmp[804678] call_tmp[804683]))
    unknown call_tmp[804693] "expr temp" "maybe param" "maybe type" "temp"
    (804696 'move' call_tmp[804693](804309 call chpl_fields_are_comparable[804160] _arg1[804150] _arg2[804151]))
    (804313 '&' call_tmp[804688] call_tmp[804693])
  }
  function chpl_fields_are_comparable[804710](arg _arg1[804712]:SparseIndexBuffer[148188](?), arg _arg2[804713]:SparseIndexBuffer[148188](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[804772]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[804779] "expr temp" "maybe param" "maybe type" "temp"
    (804782 'move' call_tmp[804779](804716 call rank _mt[243] _arg1[804712]))
    unknown call_tmp[804784] "expr temp" "maybe param" "maybe type" "temp"
    (804787 'move' call_tmp[804784](804720 call rank _mt[243] _arg2[804713]))
    unknown call_tmp[804789] "expr temp" "maybe param" "maybe type" "temp"
    (804792 'move' call_tmp[804789](804724 'call resolves' c">" call_tmp[804779] call_tmp[804784]))
    unknown call_tmp[804794] "expr temp" "maybe param" "maybe type" "temp"
    (804797 'move' call_tmp[804794](804726 call obj _mt[243] _arg1[804712]))
    unknown call_tmp[804799] "expr temp" "maybe param" "maybe type" "temp"
    (804802 'move' call_tmp[804799](804730 call obj _mt[243] _arg2[804713]))
    unknown call_tmp[804804] "expr temp" "maybe param" "maybe type" "temp"
    (804807 'move' call_tmp[804804](804734 'call resolves' c">" call_tmp[804794] call_tmp[804799]))
    unknown call_tmp[804809] "expr temp" "maybe param" "maybe type" "temp"
    (804812 'move' call_tmp[804809](804736 call bufDom _mt[243] _arg1[804712]))
    unknown call_tmp[804814] "expr temp" "maybe param" "maybe type" "temp"
    (804817 'move' call_tmp[804814](804740 call bufDom _mt[243] _arg2[804713]))
    unknown call_tmp[804819] "expr temp" "maybe param" "maybe type" "temp"
    (804822 'move' call_tmp[804819](804744 'call resolves' c">" call_tmp[804809] call_tmp[804814]))
    unknown call_tmp[804824] "expr temp" "maybe param" "maybe type" "temp"
    (804827 'move' call_tmp[804824](804746 call buf _mt[243] _arg1[804712]))
    unknown call_tmp[804829] "expr temp" "maybe param" "maybe type" "temp"
    (804832 'move' call_tmp[804829](804750 call buf _mt[243] _arg2[804713]))
    unknown call_tmp[804834] "expr temp" "maybe param" "maybe type" "temp"
    (804837 'move' call_tmp[804834](804754 'call resolves' c">" call_tmp[804824] call_tmp[804829]))
    unknown call_tmp[804839] "expr temp" "maybe param" "maybe type" "temp"
    (804842 'move' call_tmp[804839](804756 call cur _mt[243] _arg1[804712]))
    unknown call_tmp[804844] "expr temp" "maybe param" "maybe type" "temp"
    (804847 'move' call_tmp[804844](804760 call cur _mt[243] _arg2[804713]))
    unknown call_tmp[804849] "expr temp" "maybe param" "maybe type" "temp"
    (804852 'move' call_tmp[804849](804764 'call resolves' c">" call_tmp[804839] call_tmp[804844]))
    unknown call_tmp[804854] "expr temp" "maybe param" "maybe type" "temp"
    (804857 'move' call_tmp[804854](804766 '&' call_tmp[804789] call_tmp[804804] call_tmp[804819] call_tmp[804834] call_tmp[804849]))
    (804777 'move' ret[804772](804776 'deref' call_tmp[804854]))
    (804774 return ret[804772])
  }
  function >[804698](arg _arg1[804700]:SparseIndexBuffer[148188](?), arg _arg2[804701]:SparseIndexBuffer[148188](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[805021]:bool[10] "RVV" "temp"
    unknown call_tmp[805078] "expr temp" "maybe param" "maybe type" "temp"
    (805081 'move' call_tmp[805078](804865 call rank _mt[243] _arg1[804700]))
    unknown call_tmp[805083] "expr temp" "maybe param" "maybe type" "temp"
    (805086 'move' call_tmp[805083](804869 call rank _mt[243] _arg2[804701]))
    unknown call_tmp[805088] "expr temp" "maybe param" "maybe type" "temp"
    (805091 'move' call_tmp[805088](804873 call > call_tmp[805078] call_tmp[805083]))
    if call_tmp[805088]
    {
      (805026 'move' ret[805021](805025 'deref' 1))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805093] "expr temp" "maybe param" "maybe type" "temp"
    (805096 'move' call_tmp[805093](804879 call rank _mt[243] _arg1[804700]))
    unknown call_tmp[805098] "expr temp" "maybe param" "maybe type" "temp"
    (805101 'move' call_tmp[805098](804883 call rank _mt[243] _arg2[804701]))
    unknown call_tmp[805103] "expr temp" "maybe param" "maybe type" "temp"
    (805106 'move' call_tmp[805103](804887 call < call_tmp[805093] call_tmp[805098]))
    if call_tmp[805103]
    {
      (805031 'move' ret[805021](805030 'deref' 0))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805108] "expr temp" "maybe param" "maybe type" "temp"
    (805111 'move' call_tmp[805108](804893 call obj _mt[243] _arg1[804700]))
    unknown call_tmp[805113] "expr temp" "maybe param" "maybe type" "temp"
    (805116 'move' call_tmp[805113](804897 call obj _mt[243] _arg2[804701]))
    unknown call_tmp[805118] "expr temp" "maybe param" "maybe type" "temp"
    (805121 'move' call_tmp[805118](804901 call > call_tmp[805108] call_tmp[805113]))
    if call_tmp[805118]
    {
      (805036 'move' ret[805021](805035 'deref' 1))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805123] "expr temp" "maybe param" "maybe type" "temp"
    (805126 'move' call_tmp[805123](804907 call obj _mt[243] _arg1[804700]))
    unknown call_tmp[805128] "expr temp" "maybe param" "maybe type" "temp"
    (805131 'move' call_tmp[805128](804911 call obj _mt[243] _arg2[804701]))
    unknown call_tmp[805133] "expr temp" "maybe param" "maybe type" "temp"
    (805136 'move' call_tmp[805133](804915 call < call_tmp[805123] call_tmp[805128]))
    if call_tmp[805133]
    {
      (805041 'move' ret[805021](805040 'deref' 0))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805138] "expr temp" "maybe param" "maybe type" "temp"
    (805141 'move' call_tmp[805138](804921 call bufDom _mt[243] _arg1[804700]))
    unknown call_tmp[805143] "expr temp" "maybe param" "maybe type" "temp"
    (805146 'move' call_tmp[805143](804925 call bufDom _mt[243] _arg2[804701]))
    unknown call_tmp[805148] "expr temp" "maybe param" "maybe type" "temp"
    (805151 'move' call_tmp[805148](804929 call > call_tmp[805138] call_tmp[805143]))
    if call_tmp[805148]
    {
      (805046 'move' ret[805021](805045 'deref' 1))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805153] "expr temp" "maybe param" "maybe type" "temp"
    (805156 'move' call_tmp[805153](804935 call bufDom _mt[243] _arg1[804700]))
    unknown call_tmp[805158] "expr temp" "maybe param" "maybe type" "temp"
    (805161 'move' call_tmp[805158](804939 call bufDom _mt[243] _arg2[804701]))
    unknown call_tmp[805163] "expr temp" "maybe param" "maybe type" "temp"
    (805166 'move' call_tmp[805163](804943 call < call_tmp[805153] call_tmp[805158]))
    if call_tmp[805163]
    {
      (805051 'move' ret[805021](805050 'deref' 0))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805168] "expr temp" "maybe param" "maybe type" "temp"
    (805171 'move' call_tmp[805168](804949 call buf _mt[243] _arg1[804700]))
    unknown call_tmp[805173] "expr temp" "maybe param" "maybe type" "temp"
    (805176 'move' call_tmp[805173](804953 call buf _mt[243] _arg2[804701]))
    unknown call_tmp[805178] "expr temp" "maybe param" "maybe type" "temp"
    (805181 'move' call_tmp[805178](804957 call > call_tmp[805168] call_tmp[805173]))
    if call_tmp[805178]
    {
      (805056 'move' ret[805021](805055 'deref' 1))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805183] "expr temp" "maybe param" "maybe type" "temp"
    (805186 'move' call_tmp[805183](804963 call buf _mt[243] _arg1[804700]))
    unknown call_tmp[805188] "expr temp" "maybe param" "maybe type" "temp"
    (805191 'move' call_tmp[805188](804967 call buf _mt[243] _arg2[804701]))
    unknown call_tmp[805193] "expr temp" "maybe param" "maybe type" "temp"
    (805196 'move' call_tmp[805193](804971 call < call_tmp[805183] call_tmp[805188]))
    if call_tmp[805193]
    {
      (805061 'move' ret[805021](805060 'deref' 0))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805198] "expr temp" "maybe param" "maybe type" "temp"
    (805201 'move' call_tmp[805198](804977 call cur _mt[243] _arg1[804700]))
    unknown call_tmp[805203] "expr temp" "maybe param" "maybe type" "temp"
    (805206 'move' call_tmp[805203](804981 call cur _mt[243] _arg2[804701]))
    unknown call_tmp[805208] "expr temp" "maybe param" "maybe type" "temp"
    (805211 'move' call_tmp[805208](804985 call > call_tmp[805198] call_tmp[805203]))
    if call_tmp[805208]
    {
      (805066 'move' ret[805021](805065 'deref' 1))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    unknown call_tmp[805213] "expr temp" "maybe param" "maybe type" "temp"
    (805216 'move' call_tmp[805213](804991 call cur _mt[243] _arg1[804700]))
    unknown call_tmp[805218] "expr temp" "maybe param" "maybe type" "temp"
    (805221 'move' call_tmp[805218](804995 call cur _mt[243] _arg2[804701]))
    unknown call_tmp[805223] "expr temp" "maybe param" "maybe type" "temp"
    (805226 'move' call_tmp[805223](804999 call < call_tmp[805213] call_tmp[805218]))
    if call_tmp[805223]
    {
      (805071 'move' ret[805021](805070 'deref' 0))
      gotoReturn _end_>[805019] _end_>[805019]
    }
    (805076 'move' ret[805021](805075 'deref' 0))
    label _end_>[805019]
    (805023 return ret[805021])
  }
  where {
    unknown call_tmp[805228] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805231 'move' call_tmp[805228](804704 'typeof' _arg1[804700]))
    unknown call_tmp[805233] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805236 'move' call_tmp[805233](804706 'typeof' _arg2[804701]))
    unknown call_tmp[805238] "expr temp" "maybe param" "maybe type" "temp"
    (805241 'move' call_tmp[805238](804708 call == call_tmp[805228] call_tmp[805233]))
    unknown call_tmp[805243] "expr temp" "maybe param" "maybe type" "temp"
    (805246 'move' call_tmp[805243](804859 call chpl_fields_are_comparable[804710] _arg1[804700] _arg2[804701]))
    (804863 '&' call_tmp[805238] call_tmp[805243])
  }
  function chpl_fields_are_comparable[805260](arg _arg1[805262]:SparseIndexBuffer[148188](?), arg _arg2[805263]:SparseIndexBuffer[148188](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[805322]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[805329] "expr temp" "maybe param" "maybe type" "temp"
    (805332 'move' call_tmp[805329](805266 call rank _mt[243] _arg1[805262]))
    unknown call_tmp[805334] "expr temp" "maybe param" "maybe type" "temp"
    (805337 'move' call_tmp[805334](805270 call rank _mt[243] _arg2[805263]))
    unknown call_tmp[805339] "expr temp" "maybe param" "maybe type" "temp"
    (805342 'move' call_tmp[805339](805274 'call resolves' c">=" call_tmp[805329] call_tmp[805334]))
    unknown call_tmp[805344] "expr temp" "maybe param" "maybe type" "temp"
    (805347 'move' call_tmp[805344](805276 call obj _mt[243] _arg1[805262]))
    unknown call_tmp[805349] "expr temp" "maybe param" "maybe type" "temp"
    (805352 'move' call_tmp[805349](805280 call obj _mt[243] _arg2[805263]))
    unknown call_tmp[805354] "expr temp" "maybe param" "maybe type" "temp"
    (805357 'move' call_tmp[805354](805284 'call resolves' c">=" call_tmp[805344] call_tmp[805349]))
    unknown call_tmp[805359] "expr temp" "maybe param" "maybe type" "temp"
    (805362 'move' call_tmp[805359](805286 call bufDom _mt[243] _arg1[805262]))
    unknown call_tmp[805364] "expr temp" "maybe param" "maybe type" "temp"
    (805367 'move' call_tmp[805364](805290 call bufDom _mt[243] _arg2[805263]))
    unknown call_tmp[805369] "expr temp" "maybe param" "maybe type" "temp"
    (805372 'move' call_tmp[805369](805294 'call resolves' c">=" call_tmp[805359] call_tmp[805364]))
    unknown call_tmp[805374] "expr temp" "maybe param" "maybe type" "temp"
    (805377 'move' call_tmp[805374](805296 call buf _mt[243] _arg1[805262]))
    unknown call_tmp[805379] "expr temp" "maybe param" "maybe type" "temp"
    (805382 'move' call_tmp[805379](805300 call buf _mt[243] _arg2[805263]))
    unknown call_tmp[805384] "expr temp" "maybe param" "maybe type" "temp"
    (805387 'move' call_tmp[805384](805304 'call resolves' c">=" call_tmp[805374] call_tmp[805379]))
    unknown call_tmp[805389] "expr temp" "maybe param" "maybe type" "temp"
    (805392 'move' call_tmp[805389](805306 call cur _mt[243] _arg1[805262]))
    unknown call_tmp[805394] "expr temp" "maybe param" "maybe type" "temp"
    (805397 'move' call_tmp[805394](805310 call cur _mt[243] _arg2[805263]))
    unknown call_tmp[805399] "expr temp" "maybe param" "maybe type" "temp"
    (805402 'move' call_tmp[805399](805314 'call resolves' c">=" call_tmp[805389] call_tmp[805394]))
    unknown call_tmp[805404] "expr temp" "maybe param" "maybe type" "temp"
    (805407 'move' call_tmp[805404](805316 '&' call_tmp[805339] call_tmp[805354] call_tmp[805369] call_tmp[805384] call_tmp[805399]))
    (805327 'move' ret[805322](805326 'deref' call_tmp[805404]))
    (805324 return ret[805322])
  }
  function >=[805248](arg _arg1[805250]:SparseIndexBuffer[148188](?), arg _arg2[805251]:SparseIndexBuffer[148188](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[805571]:bool[10] "RVV" "temp"
    unknown call_tmp[805628] "expr temp" "maybe param" "maybe type" "temp"
    (805631 'move' call_tmp[805628](805415 call rank _mt[243] _arg1[805250]))
    unknown call_tmp[805633] "expr temp" "maybe param" "maybe type" "temp"
    (805636 'move' call_tmp[805633](805419 call rank _mt[243] _arg2[805251]))
    unknown call_tmp[805638] "expr temp" "maybe param" "maybe type" "temp"
    (805641 'move' call_tmp[805638](805423 call > call_tmp[805628] call_tmp[805633]))
    if call_tmp[805638]
    {
      (805576 'move' ret[805571](805575 'deref' 1))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805643] "expr temp" "maybe param" "maybe type" "temp"
    (805646 'move' call_tmp[805643](805429 call rank _mt[243] _arg1[805250]))
    unknown call_tmp[805648] "expr temp" "maybe param" "maybe type" "temp"
    (805651 'move' call_tmp[805648](805433 call rank _mt[243] _arg2[805251]))
    unknown call_tmp[805653] "expr temp" "maybe param" "maybe type" "temp"
    (805656 'move' call_tmp[805653](805437 call < call_tmp[805643] call_tmp[805648]))
    if call_tmp[805653]
    {
      (805581 'move' ret[805571](805580 'deref' 0))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805658] "expr temp" "maybe param" "maybe type" "temp"
    (805661 'move' call_tmp[805658](805443 call obj _mt[243] _arg1[805250]))
    unknown call_tmp[805663] "expr temp" "maybe param" "maybe type" "temp"
    (805666 'move' call_tmp[805663](805447 call obj _mt[243] _arg2[805251]))
    unknown call_tmp[805668] "expr temp" "maybe param" "maybe type" "temp"
    (805671 'move' call_tmp[805668](805451 call > call_tmp[805658] call_tmp[805663]))
    if call_tmp[805668]
    {
      (805586 'move' ret[805571](805585 'deref' 1))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805673] "expr temp" "maybe param" "maybe type" "temp"
    (805676 'move' call_tmp[805673](805457 call obj _mt[243] _arg1[805250]))
    unknown call_tmp[805678] "expr temp" "maybe param" "maybe type" "temp"
    (805681 'move' call_tmp[805678](805461 call obj _mt[243] _arg2[805251]))
    unknown call_tmp[805683] "expr temp" "maybe param" "maybe type" "temp"
    (805686 'move' call_tmp[805683](805465 call < call_tmp[805673] call_tmp[805678]))
    if call_tmp[805683]
    {
      (805591 'move' ret[805571](805590 'deref' 0))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805688] "expr temp" "maybe param" "maybe type" "temp"
    (805691 'move' call_tmp[805688](805471 call bufDom _mt[243] _arg1[805250]))
    unknown call_tmp[805693] "expr temp" "maybe param" "maybe type" "temp"
    (805696 'move' call_tmp[805693](805475 call bufDom _mt[243] _arg2[805251]))
    unknown call_tmp[805698] "expr temp" "maybe param" "maybe type" "temp"
    (805701 'move' call_tmp[805698](805479 call > call_tmp[805688] call_tmp[805693]))
    if call_tmp[805698]
    {
      (805596 'move' ret[805571](805595 'deref' 1))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805703] "expr temp" "maybe param" "maybe type" "temp"
    (805706 'move' call_tmp[805703](805485 call bufDom _mt[243] _arg1[805250]))
    unknown call_tmp[805708] "expr temp" "maybe param" "maybe type" "temp"
    (805711 'move' call_tmp[805708](805489 call bufDom _mt[243] _arg2[805251]))
    unknown call_tmp[805713] "expr temp" "maybe param" "maybe type" "temp"
    (805716 'move' call_tmp[805713](805493 call < call_tmp[805703] call_tmp[805708]))
    if call_tmp[805713]
    {
      (805601 'move' ret[805571](805600 'deref' 0))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805718] "expr temp" "maybe param" "maybe type" "temp"
    (805721 'move' call_tmp[805718](805499 call buf _mt[243] _arg1[805250]))
    unknown call_tmp[805723] "expr temp" "maybe param" "maybe type" "temp"
    (805726 'move' call_tmp[805723](805503 call buf _mt[243] _arg2[805251]))
    unknown call_tmp[805728] "expr temp" "maybe param" "maybe type" "temp"
    (805731 'move' call_tmp[805728](805507 call > call_tmp[805718] call_tmp[805723]))
    if call_tmp[805728]
    {
      (805606 'move' ret[805571](805605 'deref' 1))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805733] "expr temp" "maybe param" "maybe type" "temp"
    (805736 'move' call_tmp[805733](805513 call buf _mt[243] _arg1[805250]))
    unknown call_tmp[805738] "expr temp" "maybe param" "maybe type" "temp"
    (805741 'move' call_tmp[805738](805517 call buf _mt[243] _arg2[805251]))
    unknown call_tmp[805743] "expr temp" "maybe param" "maybe type" "temp"
    (805746 'move' call_tmp[805743](805521 call < call_tmp[805733] call_tmp[805738]))
    if call_tmp[805743]
    {
      (805611 'move' ret[805571](805610 'deref' 0))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805748] "expr temp" "maybe param" "maybe type" "temp"
    (805751 'move' call_tmp[805748](805527 call cur _mt[243] _arg1[805250]))
    unknown call_tmp[805753] "expr temp" "maybe param" "maybe type" "temp"
    (805756 'move' call_tmp[805753](805531 call cur _mt[243] _arg2[805251]))
    unknown call_tmp[805758] "expr temp" "maybe param" "maybe type" "temp"
    (805761 'move' call_tmp[805758](805535 call > call_tmp[805748] call_tmp[805753]))
    if call_tmp[805758]
    {
      (805616 'move' ret[805571](805615 'deref' 1))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    unknown call_tmp[805763] "expr temp" "maybe param" "maybe type" "temp"
    (805766 'move' call_tmp[805763](805541 call cur _mt[243] _arg1[805250]))
    unknown call_tmp[805768] "expr temp" "maybe param" "maybe type" "temp"
    (805771 'move' call_tmp[805768](805545 call cur _mt[243] _arg2[805251]))
    unknown call_tmp[805773] "expr temp" "maybe param" "maybe type" "temp"
    (805776 'move' call_tmp[805773](805549 call < call_tmp[805763] call_tmp[805768]))
    if call_tmp[805773]
    {
      (805621 'move' ret[805571](805620 'deref' 0))
      gotoReturn _end_>=[805569] _end_>=[805569]
    }
    (805626 'move' ret[805571](805625 'deref' 1))
    label _end_>=[805569]
    (805573 return ret[805571])
  }
  where {
    unknown call_tmp[805778] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805781 'move' call_tmp[805778](805254 'typeof' _arg1[805250]))
    unknown call_tmp[805783] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805786 'move' call_tmp[805783](805256 'typeof' _arg2[805251]))
    unknown call_tmp[805788] "expr temp" "maybe param" "maybe type" "temp"
    (805791 'move' call_tmp[805788](805258 call == call_tmp[805778] call_tmp[805783]))
    unknown call_tmp[805793] "expr temp" "maybe param" "maybe type" "temp"
    (805796 'move' call_tmp[805793](805409 call chpl_fields_are_comparable[805260] _arg1[805250] _arg2[805251]))
    (805413 '&' call_tmp[805788] call_tmp[805793])
  }
  function =[805798](ref arg _arg1[805800]:SparseIndexBuffer[148188](?), const?  ref arg _arg2[805801]:SparseIndexBuffer[148188](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[805860] "expr temp" "maybe param" "maybe type" "temp"
    (805863 'move' call_tmp[805860](805811 call obj _mt[243] _arg1[805800]))
    unknown call_tmp[805867] "expr temp" "maybe param" "maybe type" "temp"
    (805870 'move' call_tmp[805867](805815 call obj _mt[243] _arg2[805801]))
    (805819 call = call_tmp[805860] call_tmp[805867])
    (805852 'end of statement')
    unknown call_tmp[805874] "expr temp" "maybe param" "maybe type" "temp"
    (805877 'move' call_tmp[805874](805821 call bufDom _mt[243] _arg1[805800]))
    unknown call_tmp[805881] "expr temp" "maybe param" "maybe type" "temp"
    (805884 'move' call_tmp[805881](805825 call bufDom _mt[243] _arg2[805801]))
    (805829 call = call_tmp[805874] call_tmp[805881])
    (805853 'end of statement')
    unknown call_tmp[805888] "expr temp" "maybe param" "maybe type" "temp"
    (805891 'move' call_tmp[805888](805831 call buf _mt[243] _arg1[805800]))
    unknown call_tmp[805895] "expr temp" "maybe param" "maybe type" "temp"
    (805898 'move' call_tmp[805895](805835 call buf _mt[243] _arg2[805801]))
    (805839 call = call_tmp[805888] call_tmp[805895])
    (805854 'end of statement')
    unknown call_tmp[805902] "expr temp" "maybe param" "maybe type" "temp"
    (805905 'move' call_tmp[805902](805841 call cur _mt[243] _arg1[805800]))
    unknown call_tmp[805909] "expr temp" "maybe param" "maybe type" "temp"
    (805912 'move' call_tmp[805909](805845 call cur _mt[243] _arg2[805801]))
    (805849 call = call_tmp[805902] call_tmp[805909])
    (805856 return _void[55])
  }
  where {
    unknown call_tmp[805914] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805917 'move' call_tmp[805914](805804 'typeof' _arg1[805800]))
    unknown call_tmp[805919] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805922 'move' call_tmp[805919](805806 'typeof' _arg2[805801]))
    (805808 call == call_tmp[805914] call_tmp[805919])
  }
  function chpl__defaultHash[805924](arg r[805926]:SparseIndexBuffer[148188](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[805984] "RVV" "temp"
    unknown call_tmp[805991] "expr temp" "maybe param" "maybe type" "temp"
    (805994 'move' call_tmp[805991](805970 call cur _mt[243] r[805926]))
    unknown call_tmp[805996] "expr temp" "maybe param" "maybe type" "temp"
    (805999 'move' call_tmp[805996](805974 call chpl__defaultHash call_tmp[805991]))
    unknown call_tmp[806001] "expr temp" "maybe param" "maybe type" "temp"
    (806004 'move' call_tmp[806001](805961 call buf _mt[243] r[805926]))
    unknown call_tmp[806006] "expr temp" "maybe param" "maybe type" "temp"
    (806009 'move' call_tmp[806006](805965 call chpl__defaultHash call_tmp[806001]))
    unknown call_tmp[806011] "expr temp" "maybe param" "maybe type" "temp"
    (806014 'move' call_tmp[806011](805952 call bufDom _mt[243] r[805926]))
    unknown call_tmp[806016] "expr temp" "maybe param" "maybe type" "temp"
    (806019 'move' call_tmp[806016](805956 call chpl__defaultHash call_tmp[806011]))
    unknown call_tmp[806021] "expr temp" "maybe param" "maybe type" "temp"
    (806024 'move' call_tmp[806021](805943 call idxType _mt[243] r[805926]))
    unknown call_tmp[806026] "expr temp" "maybe param" "maybe type" "temp"
    (806029 'move' call_tmp[806026](805947 call chpl__defaultHash call_tmp[806021]))
    unknown call_tmp[806031] "expr temp" "maybe param" "maybe type" "temp"
    (806034 'move' call_tmp[806031](805934 call obj _mt[243] r[805926]))
    unknown call_tmp[806036] "expr temp" "maybe param" "maybe type" "temp"
    (806039 'move' call_tmp[806036](805938 call chpl__defaultHash call_tmp[806031]))
    unknown call_tmp[806041] "expr temp" "maybe param" "maybe type" "temp"
    (806044 'move' call_tmp[806041](805928 call rank _mt[243] r[805926]))
    unknown call_tmp[806046] "expr temp" "maybe param" "maybe type" "temp"
    (806049 'move' call_tmp[806046](805932 call chpl__defaultHash call_tmp[806041]))
    unknown call_tmp[806051] "expr temp" "maybe param" "maybe type" "temp"
    (806054 'move' call_tmp[806051](805940 call chpl__defaultHashCombine call_tmp[806036] call_tmp[806046] 2))
    unknown call_tmp[806056] "expr temp" "maybe param" "maybe type" "temp"
    (806059 'move' call_tmp[806056](805949 call chpl__defaultHashCombine call_tmp[806026] call_tmp[806051] 3))
    unknown call_tmp[806061] "expr temp" "maybe param" "maybe type" "temp"
    (806064 'move' call_tmp[806061](805958 call chpl__defaultHashCombine call_tmp[806016] call_tmp[806056] 4))
    unknown call_tmp[806066] "expr temp" "maybe param" "maybe type" "temp"
    (806069 'move' call_tmp[806066](805967 call chpl__defaultHashCombine call_tmp[806006] call_tmp[806061] 5))
    unknown call_tmp[806071] "expr temp" "maybe param" "maybe type" "temp"
    (806074 'move' call_tmp[806071](805976 call chpl__defaultHashCombine call_tmp[805996] call_tmp[806066] 6))
    (805989 'move' ret[805984](805988 'deref' call_tmp[806071]))
    (805986 return ret[805984])
  }
  type SparseIndexBuffer[148188](?) unknown rank[148006] "param" int(64)[13] val obj[148011]:BaseSparseDom[382165](?) BaseSparseDom[382165](?) unknown idxType[148027] "type variable"(148024 IfExpr (148017 call == rank[148006] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (148022 call * rank[148006] int(64)[13])
  } ) unknown bufDom[148035](148033 call chpl__buildDomainRuntimeType defaultDist[94050] 1) unknown buf[148046](148044 call chpl__buildArrayRuntimeType(148042 call chpl__ensureDomainExpr bufDom[148035]) idxType[148027]) val cur[148051]:int(64)[13] 0
  function BaseSparseDom[148665](?).getNNZ[148224](arg _mt[148669]:_MT[238], arg this[148667]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[519934] "RVV" "temp"
    (148246 call halt "nnz queried on base class")
    (519936 return ret[519934])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148665](?).deinit[148254](arg _mt[148673]:_MT[238], arg this[148671]:BaseSparseDom[148665](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519938 return _void[55])
  }
  function BaseSparseDom[148665](?).dsiClear[148261](arg _mt[148677]:_MT[238], arg this[148675]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148282 call halt "clear not implemented for this distribution - BaseSparseDom")
    (519940 return _void[55])
  }
  function BaseSparseDom[148665](?).dsiBulkAdd[148300](arg _mt[148681]:_MT[238], arg this[148679]:BaseSparseDom[148665](?), arg inds[148297]:_array[133588](?), arg dataSorted[148303] :
  0 =
  0, arg isUnique[148307] :
  0 =
  0, arg preserveInds[148311] :
  1 =
  1, arg addOn[148315] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[519944] "RVV" "temp"
    (148338 call halt "Bulk addition is not supported by this sparse domain")
    (481457 'end of statement')
    (519950 'move' ret[519944](519949 'coerce' 0 int(64)[13]))
    (519946 return ret[519944])
  }
  where {
    unknown call_tmp[668782] "expr temp" "maybe param" "maybe type" "temp"
    (668785 'move' call_tmp[668782](385685 call rank _mt[243] this[148679]))
    unknown call_tmp[668789] "expr temp" "maybe param" "maybe type" "temp"
    (668792 'move' call_tmp[668789](385690 call idxType _mt[243] this[148679]))
    unknown call_tmp[668794] "expr temp" "maybe param" "maybe type" "temp"
    (668797 'move' call_tmp[668794](148292 call chpl__buildIndexType call_tmp[668782] call_tmp[668789]))
    unknown call_tmp[668801] "expr temp" "maybe param" "maybe type" "temp"
    (668804 'move' call_tmp[668801](461720 call eltType _mt[243] inds[148297]))
    unknown call_tmp[668806] "expr temp" "maybe param" "maybe type" "temp"
    (668809 'move' call_tmp[668806](461724 call == call_tmp[668794] call_tmp[668801]))
    (461718 call & 1 call_tmp[668806])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148665](?).boundsCheck[148357](arg _mt[148685]:_MT[238], arg this[148683]:BaseSparseDom[148665](?), arg ind[148354] :
  unknown call_tmp[668813] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[519954] "RVV" "temp"
    unknown call_tmp[668825] "expr temp" "maybe param" "maybe type" "temp"
    (668828 'move' call_tmp[668825](148416 call _cond_test 1))
    if call_tmp[668825]
    {
      unknown call_tmp[668832] "expr temp" "maybe param" "maybe type" "temp"
      (668835 'move' call_tmp[668832](360530 call parentDom _mt[243] this[148683]))
      unknown call_tmp[668839] "expr temp" "maybe param" "maybe type" "temp"
      (668842 'move' call_tmp[668839](148367 call(148362 call (partial) contains _mt[243] call_tmp[668832]) ind[148354]))
      unknown call_tmp[668844] "expr temp" "maybe param" "maybe type" "temp"
      (668847 'move' call_tmp[668844](148368 call ! call_tmp[668839]))
      unknown call_tmp[668849] "expr temp" "maybe param" "maybe type" "temp"
      (668852 'move' call_tmp[668849](148411 call _cond_test call_tmp[668844]))
      if call_tmp[668849]
      {
        unknown call_tmp[668856] "expr temp" "maybe param" "maybe type" "temp"
        (668859 'move' call_tmp[668856](385709 call parentDom _mt[243] this[148683]))
        (148409 call halt "Sparse domain/array index out of bounds: " ind[148354] " (expected to be within " call_tmp[668856] ")")
      }
    }
    (519956 return ret[519954])
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148665](?).dsiDim[148431](arg _mt[148689]:_MT[238], arg this[148687]:BaseSparseDom[148665](?), arg d[148428]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519960] "RVV" "temp"
    unknown call_tmp[668863] "expr temp" "maybe param" "maybe type" "temp"
    (668866 'move' call_tmp[668863](360535 call parentDom _mt[243] this[148687]))
    unknown call_tmp[668870] "expr temp" "maybe param" "maybe type" "temp"
    (668873 'move' call_tmp[668870](148439 call(148434 call (partial) dim _mt[243] call_tmp[668863]) d[148428]))
    (519965 'move' ret[519960](519964 'deref' call_tmp[668870]))
    (519962 return ret[519960])
  }
  function BaseSparseDom[148665](?).dsiDims[148447](arg _mt[148693]:_MT[238], arg this[148691]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519969] "RVV" "temp"
    unknown call_tmp[668877] "expr temp" "maybe param" "maybe type" "temp"
    (668880 'move' call_tmp[668877](360540 call parentDom _mt[243] this[148691]))
    unknown call_tmp[668884] "expr temp" "maybe param" "maybe type" "temp"
    (668887 'move' call_tmp[668884](148454 call(148450 call (partial) dims _mt[243] call_tmp[668877])))
    (519974 'move' ret[519969](519973 'deref' call_tmp[668884]))
    (519971 return ret[519969])
  }
  function BaseSparseDom[148665](?).dsiNumIndices[148462](arg _mt[148697]:_MT[238], arg this[148695]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[519978] "RVV" "temp"
    unknown call_tmp[668891] "expr temp" "maybe param" "maybe type" "temp"
    (668894 'move' call_tmp[668891](148466 call(385714 call (partial) getNNZ _mt[243] this[148695])))
    (519983 'move' ret[519978](519982 'deref' call_tmp[668891]))
    (519980 return ret[519978])
  }
  function BaseSparseDom[148665](?).dsiSize[148474](arg _mt[148701]:_MT[238], arg this[148699]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[519987] "RVV" "temp"
    unknown call_tmp[668898] "expr temp" "maybe param" "maybe type" "temp"
    (668901 'move' call_tmp[668898](148478 call(385718 call (partial) getNNZ _mt[243] this[148699])))
    (519992 'move' ret[519987](519991 'deref' call_tmp[668898]))
    (519989 return ret[519987])
  }
  function BaseSparseDom[148665](?).dsiLow[148486](arg _mt[148705]:_MT[238], arg this[148703]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[519996] "RVV" "temp"
    unknown call_tmp[668905] "expr temp" "maybe param" "maybe type" "temp"
    (668908 'move' call_tmp[668905](360545 call parentDom _mt[243] this[148703]))
    unknown call_tmp[668912] "expr temp" "maybe param" "maybe type" "temp"
    (668915 'move' call_tmp[668912](148489 call low _mt[243] call_tmp[668905]))
    (520001 'move' ret[519996](520000 'deref' call_tmp[668912]))
    (519998 return ret[519996])
  }
  function BaseSparseDom[148665](?).dsiHigh[148499](arg _mt[148709]:_MT[238], arg this[148707]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520005] "RVV" "temp"
    unknown call_tmp[668919] "expr temp" "maybe param" "maybe type" "temp"
    (668922 'move' call_tmp[668919](360550 call parentDom _mt[243] this[148707]))
    unknown call_tmp[668926] "expr temp" "maybe param" "maybe type" "temp"
    (668929 'move' call_tmp[668926](148502 call high _mt[243] call_tmp[668919]))
    (520010 'move' ret[520005](520009 'deref' call_tmp[668926]))
    (520007 return ret[520005])
  }
  function BaseSparseDom[148665](?).dsiStride[148512](arg _mt[148713]:_MT[238], arg this[148711]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520014] "RVV" "temp"
    unknown call_tmp[668933] "expr temp" "maybe param" "maybe type" "temp"
    (668936 'move' call_tmp[668933](360555 call parentDom _mt[243] this[148711]))
    unknown call_tmp[668940] "expr temp" "maybe param" "maybe type" "temp"
    (668943 'move' call_tmp[668940](148515 call stride _mt[243] call_tmp[668933]))
    (520019 'move' ret[520014](520018 'deref' call_tmp[668940]))
    (520016 return ret[520014])
  }
  function BaseSparseDom[148665](?).dsiAlignment[148525](arg _mt[148717]:_MT[238], arg this[148715]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520023] "RVV" "temp"
    unknown call_tmp[668947] "expr temp" "maybe param" "maybe type" "temp"
    (668950 'move' call_tmp[668947](360560 call parentDom _mt[243] this[148715]))
    unknown call_tmp[668954] "expr temp" "maybe param" "maybe type" "temp"
    (668957 'move' call_tmp[668954](148528 call alignment _mt[243] call_tmp[668947]))
    (520028 'move' ret[520023](520027 'deref' call_tmp[668954]))
    (520025 return ret[520023])
  }
  function BaseSparseDom[148665](?).dsiFirst[148538](arg _mt[148721]:_MT[238], arg this[148719]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520032] "RVV" "temp"
    (148559 call halt "dsiFirst is not implemented")
    (481468 'end of statement')
    const _tmp[148566] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[668961] "expr temp" "maybe param" "maybe type" "temp"
    (668964 'move' call_tmp[668961](385723 call rank _mt[243] this[148719]))
    unknown call_tmp[668968] "expr temp" "maybe param" "maybe type" "temp"
    (668971 'move' call_tmp[668968](385728 call idxType _mt[243] this[148719]))
    unknown call_tmp[668973] "expr temp" "maybe param" "maybe type" "temp"
    (668976 'move' call_tmp[668973](148564 call * call_tmp[668961] call_tmp[668968]))
    (543498 'default init var' _tmp[148566] call_tmp[668973])
    (148569 'end of statement')
    (520037 'move' ret[520032](520036 'deref' _tmp[148566]))
    gotoReturn _end_dsiFirst[520030] _end_dsiFirst[520030]
    (481469 'end of statement' _tmp[148566])
    label _end_dsiFirst[520030]
    (520034 return ret[520032])
  }
  function BaseSparseDom[148665](?).dsiLast[148577](arg _mt[148725]:_MT[238], arg this[148723]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520043] "RVV" "temp"
    (148598 call halt "dsiLast not implemented")
    (481471 'end of statement')
    const _tmp[148605] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[668980] "expr temp" "maybe param" "maybe type" "temp"
    (668983 'move' call_tmp[668980](385734 call rank _mt[243] this[148723]))
    unknown call_tmp[668987] "expr temp" "maybe param" "maybe type" "temp"
    (668990 'move' call_tmp[668987](385739 call idxType _mt[243] this[148723]))
    unknown call_tmp[668992] "expr temp" "maybe param" "maybe type" "temp"
    (668995 'move' call_tmp[668992](148603 call * call_tmp[668980] call_tmp[668987]))
    (543500 'default init var' _tmp[148605] call_tmp[668992])
    (148608 'end of statement')
    (520048 'move' ret[520043](520047 'deref' _tmp[148605]))
    gotoReturn _end_dsiLast[520041] _end_dsiLast[520041]
    (481472 'end of statement' _tmp[148605])
    label _end_dsiLast[520041]
    (520045 return ret[520043])
  }
  function BaseSparseDom[148665](?).dsiAlignedLow[148616](arg _mt[148729]:_MT[238], arg this[148727]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520054] "RVV" "temp"
    unknown call_tmp[668999] "expr temp" "maybe param" "maybe type" "temp"
    (669002 'move' call_tmp[668999](360565 call parentDom _mt[243] this[148727]))
    unknown call_tmp[669006] "expr temp" "maybe param" "maybe type" "temp"
    (669009 'move' call_tmp[669006](148619 call alignedLow _mt[243] call_tmp[668999]))
    (520059 'move' ret[520054](520058 'deref' call_tmp[669006]))
    (520056 return ret[520054])
  }
  function BaseSparseDom[148665](?).dsiAlignedHigh[148629](arg _mt[148733]:_MT[238], arg this[148731]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520063] "RVV" "temp"
    unknown call_tmp[669013] "expr temp" "maybe param" "maybe type" "temp"
    (669016 'move' call_tmp[669013](360570 call parentDom _mt[243] this[148731]))
    unknown call_tmp[669020] "expr temp" "maybe param" "maybe type" "temp"
    (669023 'move' call_tmp[669020](148632 call alignedHigh _mt[243] call_tmp[669013]))
    (520068 'move' ret[520063](520067 'deref' call_tmp[669020]))
    (520065 return ret[520063])
  }
  function BaseSparseDom[148665](?).dsiMakeIndexBuffer[148644](arg _mt[148737]:_MT[238], arg this[148735]:BaseSparseDom[148665](?), arg size[148642]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520072] "RVV" "temp"
    unknown call_tmp[669027] "expr temp" "maybe param" "maybe type" "temp"
    (669030 'move' call_tmp[669027](148649 call rank _mt[243] this[148735]))
    unknown call_tmp[669032] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (669035 'move' call_tmp[669032](747805 'new' SparseIndexBuffer[148188](?)(rank = call_tmp[669027])(obj = this[148735])(size = size[148642])))
    (520077 'move' ret[520072](520076 'deref' call_tmp[669032]))
    (520074 return ret[520072])
  }
  function BaseSparseDom[148665](?).init[802084](arg _mt[802086]:_MT[238], arg this[802087]:BaseSparseDom[148665](?), param arg rank[802098]:int(64)[13], arg idxType[802110]:_any[178](?), in arg parentDom[802119]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[802130] "temporary of super field" "temp"
    (802132 'move' super_tmp[802130](802129 '.v' this[802087] c"super"))
    (802097 call(802095 call (partial) init _mt[243] super_tmp[802130]))
    (802165 'end of statement')
    unknown tmp[802135] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[802169] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[802181] "expr temp" "maybe param" "maybe type" "temp"
      (802184 'move' call_tmp[802181](802137 '.v' this[802087] c"super"))
      (802173 'move' call_type_tmp[802169](802140 'typeof' call_tmp[802181]))
    }
    (802141 'move' tmp[802135] call_type_tmp[802169])
    unknown call_tmp[802186] "maybe param" "maybe type" "temp"
    (802189 'move' call_tmp[802186](802146 'cast' tmp[802135] this[802087]))
    unknown chpl__thisAsParent[802143] "dead at end of block" "insert auto destroy" "temp"
    (802177 'init var' chpl__thisAsParent[802143] call_tmp[802186] tmp[802135])
    (802149 'setcid' chpl__thisAsParent[802143])
    unknown call_tmp[802191] "expr temp" "maybe param" "maybe type" "temp"
    (802194 'move' call_tmp[802191](802152 call _cast int(64)[13] rank[802098]))
    (802154 'init field' this[802087] c"rank" call_tmp[802191])
    (802166 'end of statement')
    (802157 'init field' this[802087] c"idxType" idxType[802110])
    (802160 'init field' this[802087] c"parentDom" parentDom[802119])
    (802167 'end of statement')
    (802163 'setcid' this[802087])
    (802175 return _void[55])
  }
  function BaseSparseDom[148665](?).super[806076](arg _mt[806078]:_MT[238], arg this[806080]:BaseSparseDom[148665](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806090] "RVV" "temp"
    unknown call_tmp[806097] "expr temp" "maybe param" "maybe type" "temp"
    (806100 'move' call_tmp[806097](806084 '.v' this[806080] c"super"))
    (806095 'move' ret[806090](806094 'deref' call_tmp[806097]))
    (806092 return ret[806090])
  }
  function BaseSparseDom[806107](?).rank[806102](arg _mt[806104]:_MT[238], arg this[806109]:BaseSparseDom[806107](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806140] "RVV" "param" "temp"
    unknown borrowOfThis[806111]
    (806132 'end of statement')
    (806113 'move' borrowOfThis[806111](806116 call _cast _borrowedNonNilable[214](?) this[806109]))
    (806133 'end of statement' borrowOfThis[806111])
    unknown call_tmp[806154] "expr temp" "maybe param" "maybe type" "temp"
    (806157 'move' call_tmp[806154](806122 'is bound' borrowOfThis[806111] c"rank"))
    if call_tmp[806154]
    {
      unknown call_tmp[806159] "expr temp" "maybe param" "maybe type" "temp"
      (806162 'move' call_tmp[806159](806121 '.' borrowOfThis[806111] c"rank"))
      (806145 'move' ret[806140](806144 'deref' call_tmp[806159]))
      gotoReturn _end_rank[806138] _end_rank[806138]
      (806135 'end of statement' borrowOfThis[806111])
    }
    {
      (806150 'move' ret[806140](806149 'deref' ?[260]))
      gotoReturn _end_rank[806138] _end_rank[806138]
    }
    label _end_rank[806138]
    (806142 return ret[806140])
  }
  function BaseSparseDom[806107](?).rank[806164](arg _mt[806166]:_MT[238], arg this[806168]:BaseSparseDom[806107](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806199] "RVV" "param" "temp"
    unknown borrowOfThis[806170] "type variable"
    (806191 'end of statement')
    (806172 'move' borrowOfThis[806170](806175 call _cast _borrowedNonNilable[214](?) this[806168]))
    (806192 'end of statement' borrowOfThis[806170])
    unknown call_tmp[806213] "expr temp" "maybe param" "maybe type" "temp"
    (806216 'move' call_tmp[806213](806181 'is bound' borrowOfThis[806170] c"rank"))
    if call_tmp[806213]
    {
      unknown call_tmp[806218] "expr temp" "maybe param" "maybe type" "temp"
      (806221 'move' call_tmp[806218](806180 '.' borrowOfThis[806170] c"rank"))
      (806204 'move' ret[806199](806203 'deref' call_tmp[806218]))
      gotoReturn _end_rank[806197] _end_rank[806197]
      (806194 'end of statement' borrowOfThis[806170])
    }
    {
      (806209 'move' ret[806199](806208 'deref' ?[260]))
      gotoReturn _end_rank[806197] _end_rank[806197]
    }
    label _end_rank[806197]
    (806201 return ret[806199])
  }
  function BaseSparseDom[806107](?).idxType[806223](arg _mt[806225]:_MT[238], arg this[806227]:BaseSparseDom[806107](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806262] "RVV" "temp" "type variable"
    unknown borrowOfThis[806229]
    (806254 'end of statement')
    (806231 'move' borrowOfThis[806229](806234 call _cast _borrowedNonNilable[214](?) this[806227]))
    (806255 'end of statement' borrowOfThis[806229])
    unknown call_tmp[806276] "expr temp" "maybe param" "maybe type" "temp"
    (806279 'move' call_tmp[806276](806244 'is bound' borrowOfThis[806229] c"idxType"))
    if call_tmp[806276]
    {
      unknown call_tmp[806281] "expr temp" "maybe param" "maybe type" "temp"
      (806284 'move' call_tmp[806281](806239 '.v' borrowOfThis[806229] c"idxType"))
      unknown call_tmp[806286] "expr temp" "maybe param" "maybe type" "temp"
      (806289 'move' call_tmp[806286](806240 call chpl_checkLegalTypeFieldAccessor this[806227] call_tmp[806281] "idxType"))
      (806267 'move' ret[806262](806266 'deref' call_tmp[806286]))
      gotoReturn _end_idxType[806260] _end_idxType[806260]
      (806257 'end of statement' borrowOfThis[806229])
    }
    {
      (806272 'move' ret[806262](806271 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[806260] _end_idxType[806260]
    }
    label _end_idxType[806260]
    (806264 return ret[806262])
  }
  function BaseSparseDom[806107](?).idxType[806291](arg _mt[806293]:_MT[238], arg this[806295]:BaseSparseDom[806107](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806330] "RVV" "temp" "type variable"
    unknown borrowOfThis[806297] "type variable"
    (806322 'end of statement')
    (806299 'move' borrowOfThis[806297](806302 call _cast _borrowedNonNilable[214](?) this[806295]))
    (806323 'end of statement' borrowOfThis[806297])
    unknown call_tmp[806344] "expr temp" "maybe param" "maybe type" "temp"
    (806347 'move' call_tmp[806344](806312 'is bound' borrowOfThis[806297] c"idxType"))
    if call_tmp[806344]
    {
      unknown call_tmp[806349] "expr temp" "maybe param" "maybe type" "temp"
      (806352 'move' call_tmp[806349](806307 '.v' borrowOfThis[806297] c"idxType"))
      unknown call_tmp[806354] "expr temp" "maybe param" "maybe type" "temp"
      (806357 'move' call_tmp[806354](806308 call chpl_checkLegalTypeFieldAccessor this[806295] call_tmp[806349] "idxType"))
      (806335 'move' ret[806330](806334 'deref' call_tmp[806354]))
      gotoReturn _end_idxType[806328] _end_idxType[806328]
      (806325 'end of statement' borrowOfThis[806297])
    }
    {
      (806340 'move' ret[806330](806339 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[806328] _end_idxType[806328]
    }
    label _end_idxType[806328]
    (806332 return ret[806330])
  }
  function BaseSparseDom[148665](?).parentDom[806359](arg _mt[806361]:_MT[238], arg this[806363]:BaseSparseDom[148665](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806373] "RVV" "temp"
    unknown call_tmp[806380] "expr temp" "maybe param" "maybe type" "temp"
    (806383 'move' call_tmp[806380](806367 '.' this[806363] c"parentDom"))
    (806378 'move' ret[806373](806377 'addr of' call_tmp[806380]))
    (806375 return ret[806373])
  }
  function BaseSparseDom[148665](?).writeThis[806385](arg _mt[806389]:_MT[238], arg this[806387]:BaseSparseDom[148665](?), arg f[806388]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806394 call writeThisDefaultImpl f[806388] this[806387])
    (806399 return _void[55])
  }
  function BaseSparseDom[148665](?).readThis[806401](arg _mt[806405]:_MT[238], arg this[806403]:BaseSparseDom[148665](?), arg f[806404]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806409 call readThisDefaultImpl f[806404] this[806403])
    (806415 return _void[55])
  }
  type BaseSparseDom[148665](?) val super[355584]:BaseDom[146725] "super class" unknown rank[148211] "param" int(64)[13] unknown idxType[148215] "type variable" unknown parentDom[148218]
  type BaseSparseDom[806107](?)
  type BaseSparseDom[382165](?)
  function BaseAssociativeDom[148812].deinit[148745](arg _mt[148816]:_MT[238], arg this[148814]:BaseAssociativeDom[148812]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520079 return _void[55])
  }
  function BaseAssociativeDom[148812].dsiClear[148752](arg _mt[148820]:_MT[238], arg this[148818]:BaseAssociativeDom[148812]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148773 call halt "clear not implemented for this distribution")
    (520081 return _void[55])
  }
  function BaseAssociativeDom[148812].dsiAdd[148782](arg _mt[148824]:_MT[238], arg this[148822]:BaseAssociativeDom[148812], in arg idx[148780]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520085] "RVV" "temp"
    (148803 call compilerError "Index addition is not supported by this domain")
    (481478 'end of statement')
    (520090 'move' ret[520085](520089 'deref' 0))
    (520087 return ret[520085])
  }
  function BaseAssociativeDom[148812].super[806417](arg _mt[806419]:_MT[238], arg this[806421]:BaseAssociativeDom[148812]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806431] "RVV" "temp"
    unknown call_tmp[806438] "expr temp" "maybe param" "maybe type" "temp"
    (806441 'move' call_tmp[806438](806425 '.v' this[806421] c"super"))
    (806436 'move' ret[806431](806435 'deref' call_tmp[806438]))
    (806433 return ret[806431])
  }
  function BaseAssociativeDom[148812].init[806443](arg _mt[806445]:_MT[238], arg this[806446]:BaseAssociativeDom[148812]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[806459] "temporary of super field" "temp"
    (806461 'move' super_tmp[806459](806458 '.v' this[806446] c"super"))
    (806456 call(806454 call (partial) init _mt[243] super_tmp[806459]))
    (806482 'end of statement')
    unknown tmp[806464] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[806485] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[806497] "expr temp" "maybe param" "maybe type" "temp"
      (806500 'move' call_tmp[806497](806466 '.v' this[806446] c"super"))
      (806489 'move' call_type_tmp[806485](806469 'typeof' call_tmp[806497]))
    }
    (806470 'move' tmp[806464] call_type_tmp[806485])
    unknown call_tmp[806502] "maybe param" "maybe type" "temp"
    (806505 'move' call_tmp[806502](806475 'cast' tmp[806464] this[806446]))
    unknown chpl__thisAsParent[806472] "dead at end of block" "insert auto destroy" "temp"
    (806493 'init var' chpl__thisAsParent[806472] call_tmp[806502] tmp[806464])
    (806478 'setcid' chpl__thisAsParent[806472])
    (806483 'end of statement')
    (806480 'setcid' this[806446])
    (806491 return _void[55])
  }
  function BaseAssociativeDom[148812].writeThis[806507](arg _mt[806511]:_MT[238], arg this[806509]:BaseAssociativeDom[148812], arg f[806510]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806516 call writeThisDefaultImpl f[806510] this[806509])
    (806521 return _void[55])
  }
  function BaseAssociativeDom[148812].readThis[806523](arg _mt[806527]:_MT[238], arg this[806525]:BaseAssociativeDom[148812], arg f[806526]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806531 call readThisDefaultImpl f[806526] this[806525])
    (806537 return _void[55])
  }
  type BaseAssociativeDom[148812] val super[355588]:BaseDom[146725] "super class"
  type BaseAssociativeDom[382160](?)
  function BaseArr[149541].chpl__rvfMe[148842](arg _mt[149545]:_MT[238], arg this[149543]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520094] "RVV" "param" "temp"
    (520099 'move' ret[520094](520098 'deref' 0))
    (520096 return ret[520094])
  }
  function BaseArr[149541].isSliceArrayView[148852](arg _mt[149549]:_MT[238], arg this[149547]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520103] "RVV" "param" "temp"
    (520108 'move' ret[520103](520107 'deref' 0))
    (520105 return ret[520103])
  }
  function BaseArr[149541].isRankChangeArrayView[148862](arg _mt[149553]:_MT[238], arg this[149551]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520112] "RVV" "param" "temp"
    (520117 'move' ret[520112](520116 'deref' 0))
    (520114 return ret[520112])
  }
  function BaseArr[149541].isReindexArrayView[148872](arg _mt[149557]:_MT[238], arg this[149555]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520121] "RVV" "param" "temp"
    (520126 'move' ret[520121](520125 'deref' 0))
    (520123 return ret[520121])
  }
  function BaseArr[149541].deinit[148882](arg _mt[149561]:_MT[238], arg this[149559]:BaseArr[149541]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520128 return _void[55])
  }
  function BaseArr[149541].dsiStaticFastFollowCheck[148891](arg _mt[149565]:_MT[238], arg this[149563]:BaseArr[149541], arg leadType[148889]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520132] "RVV" "param" "temp"
    (520137 'move' ret[520132](520136 'deref' 0))
    (520134 return ret[520132])
  }
  function BaseArr[149541].dsiGetBaseDom[148901](arg _mt[149569]:_MT[238], arg this[149567]:BaseArr[149541]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520141] "RVV" "temp"
    (148924 call halt "internal error: dsiGetBaseDom is not implemented")
    (481485 'end of statement')
    unknown ret[148929] "dead at end of block" "insert auto destroy" "unsafe"
    (543502 'default init var' ret[148929] unmanaged BaseDom[415316])
    (148932 'end of statement')
    (520147 'move' ret[520141](520146 'coerce' ret[148929] unmanaged BaseDom[415316]))
    gotoReturn _end_dsiGetBaseDom[520139] _end_dsiGetBaseDom[520139]
    (481486 'end of statement' ret[148929])
    label _end_dsiGetBaseDom[520139]
    (520143 return ret[520141])
  }
  { scopeless type
    unmanaged BaseDom[415316]
  }
  function BaseArr[149541].remove[148945](arg _mt[149573]:_MT[238], arg this[149571]:BaseArr[149541], param arg rmFromList[148942]:bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[520153] "RVV" "temp"
    unknown ret_arr[148948] "dead at end of block" "insert auto destroy"
    (543504 'init var' ret_arr[148948] this[149571])
    (148951 'end of statement')
    unknown ret_dom[148957] "dead at end of block" "insert auto destroy"
    (543506 'init var' ret_dom[148957] nil[44] unmanaged BaseDom?[415376])
    (148960 'end of statement')
    unknown rm_dom[148962] "dead at end of block" "insert auto destroy"
    (543508 'init var' rm_dom[148962] 0)
    (148965 'end of statement')
    unknown call_tmp[669039] "maybe param" "maybe type" "temp"
    (669042 'move' call_tmp[669039](148968 call(385755 call (partial) dsiGetBaseDom _mt[243] this[149571])))
    unknown dom[148969] "dead at end of block" "insert auto destroy"
    (543510 'init var' dom[148969] call_tmp[669039])
    (148972 'end of statement')
    unknown call_tmp[669046] "expr temp" "maybe param" "maybe type" "temp"
    (669049 'move' call_tmp[669046](148983 call _to_unmanaged this[149571]))
    unknown call_tmp[669051] "expr temp" "maybe param" "maybe type" "temp"
    (669054 'move' call_tmp[669051](148986 call(148977 call (partial) remove_arr _mt[243] dom[148969]) call_tmp[669046] rmFromList[148942]))
    (148987 call = rm_dom[148962] call_tmp[669051])
    (481488 'end of statement' rm_dom[148962] dom[148969])
    unknown call_tmp[669056] "expr temp" "maybe param" "maybe type" "temp"
    (669059 'move' call_tmp[669056](148996 call _cond_test rm_dom[148962]))
    if call_tmp[669056]
    {
      (148993 call = ret_dom[148957] dom[148969])
      (481491 'end of statement' ret_dom[148957] dom[148969])
    }
    unknown call_tmp[669061] "expr temp" "maybe param" "maybe type" "temp"
    (669064 'move' call_tmp[669061](149004 call _build_tuple ret_arr[148948] ret_dom[148957]))
    (520158 'move' ret[520153](520157 'deref' call_tmp[669061]))
    gotoReturn _end_remove[520151] _end_remove[520151]
    (481494 'end of statement' ret_arr[148948] ret_dom[148957])
    label _end_remove[520151]
    (520155 return ret[520153])
  }
  function BaseArr[149541].dsiElementInitializationComplete[149012](arg _mt[149577]:_MT[238], arg this[149575]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149033 call halt "dsiElementInitializationComplete must be defined")
    (520162 return _void[55])
  }
  function BaseArr[149541].dsiElementDeinitializationComplete[149040](arg _mt[149581]:_MT[238], arg this[149579]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149061 call halt "dsiElementDeinitializationComplete must be defined")
    (520164 return _void[55])
  }
  function BaseArr[149541].dsiDestroyArr[149072](arg _mt[149585]:_MT[238], arg this[149583]:BaseArr[149541], arg deinitElts[149069]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149093 call halt "dsiDestroyArr must be defined")
    (520166 return _void[55])
  }
  function BaseArr[149541].dsiReallocate[149104](arg _mt[149589]:_MT[238], arg this[149587]:BaseArr[149541], arg d[149101]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149125 call halt "reallocating not supported for this array type")
    (520168 return _void[55])
  }
  function BaseArr[149541].dsiPostReallocate[149132](arg _mt[149593]:_MT[238], arg this[149591]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520170 return _void[55])
  }
  function BaseArr[149541]._purge[149143](arg _mt[149597]:_MT[238], arg this[149595]:BaseArr[149541], arg ind[149140]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149164 call halt "purging not supported for this array type")
    (520172 return _void[55])
  }
  function BaseArr[149541]._resize[149175](arg _mt[149601]:_MT[238], arg this[149599]:BaseArr[149541], arg length[149172]:int(64)[13], arg old_map[149177]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149198 call halt "resizing not supported for this array type")
    (520174 return _void[55])
  }
  function BaseArr[149541].sparseShiftArray[149207](arg _mt[149605]:_MT[238], arg this[149603]:BaseArr[149541], arg shiftrange[149205]:_any[178](?), arg initrange[149209]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149230 call halt "sparseGrowDomain not supported for non-sparse arrays")
    (520176 return _void[55])
  }
  function BaseArr[149541].sparseShiftArrayBack[149239](arg _mt[149609]:_MT[238], arg this[149607]:BaseArr[149541], arg shiftrange[149237]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149260 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
    (520178 return _void[55])
  }
  function BaseArr[149541].sparseBulkShiftArray[149269](arg _mt[149613]:_MT[238], arg this[149611]:BaseArr[149541], arg shiftMap[149267]:_any[178](?), arg oldnnz[149271]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149292 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
    (520180 return _void[55])
  }
  function BaseArr[149541]._defaultInitSlot[149303](arg _mt[149617]:_MT[238], arg this[149615]:BaseArr[149541], arg slot[149300]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149324 call halt "_defaultInitSlot() not supported for non-associative arrays")
    (520182 return _void[55])
  }
  function BaseArr[149541]._deinitSlot[149335](arg _mt[149621]:_MT[238], arg this[149619]:BaseArr[149541], arg slot[149332]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149356 call halt "_deinitSlot() not supported for non-associative arrays")
    (520184 return _void[55])
  }
  function BaseArr[149541]._startRehash[149367](arg _mt[149625]:_MT[238], arg this[149623]:BaseArr[149541], arg newSize[149364]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149388 call halt "_startRehash() not supported for non-associative arrays")
    (520186 return _void[55])
  }
  function BaseArr[149541]._finishRehash[149399](arg _mt[149629]:_MT[238], arg this[149627]:BaseArr[149541], arg oldSize[149396]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149420 call halt "_finishRehash() not supported for non-associative arrays")
    (520188 return _void[55])
  }
  function BaseArr[149541]._moveElementDuringRehash[149431](arg _mt[149633]:_MT[238], arg this[149631]:BaseArr[149541], arg oldslot[149428]:int(64)[13], arg newslot[149434]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149456 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
    (520190 return _void[55])
  }
  function BaseArr[149541].dsiSupportsAlignedFollower[149463](arg _mt[149637]:_MT[238], arg this[149635]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520194] "RVV" "param" "temp"
    (520199 'move' ret[520194](520198 'deref' 0))
    (520196 return ret[520194])
  }
  function BaseArr[149541].dsiSupportsPrivatization[149473](arg _mt[149641]:_MT[238], arg this[149639]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520203] "RVV" "param" "temp"
    (520208 'move' ret[520203](520207 'deref' 0))
    (520205 return ret[520203])
  }
  function BaseArr[149541].dsiRequiresPrivatization[149483](arg _mt[149645]:_MT[238], arg this[149643]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520212] "RVV" "param" "temp"
    (520217 'move' ret[520212](520216 'deref' 0))
    (520214 return ret[520212])
  }
  function BaseArr[149541].dsiDisplayRepresentation[149493](arg _mt[149649]:_MT[238], arg this[149647]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149498 call writeln "<no way to display representation>")
    (520219 return _void[55])
  }
  function BaseArr[415214](?).isDefaultRectangular[149505](arg _mt[149653]:_MT[238], arg this[149651]:BaseArr[415214](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520223] "RVV" "param" "temp"
    (520228 'move' ret[520223](520227 'deref' 0))
    (520225 return ret[520223])
  }
  function BaseArr[149541].isDefaultRectangular[149515](arg _mt[149657]:_MT[238], arg this[149655]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520232] "RVV" "param" "temp"
    (520237 'move' ret[520232](520236 'deref' 0))
    (520234 return ret[520232])
  }
  function BaseArr[149541].doiCanBulkTransferRankChange[149525](arg _mt[149661]:_MT[238], arg this[149659]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520241] "RVV" "param" "temp"
    (520246 'move' ret[520241](520245 'deref' 0))
    (520243 return ret[520241])
  }
  function BaseArr[149541].decEltCountsIfNeeded[149535](arg _mt[149665]:_MT[238], arg this[149663]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520248 return _void[55])
  }
  function BaseArr[149541].super[806539](arg _mt[806541]:_MT[238], arg this[806543]:BaseArr[149541]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806553] "RVV" "temp"
    unknown call_tmp[806560] "expr temp" "maybe param" "maybe type" "temp"
    (806563 'move' call_tmp[806560](806547 '.v' this[806543] c"super"))
    (806558 'move' ret[806553](806557 'deref' call_tmp[806560]))
    (806555 return ret[806553])
  }
  function BaseArr[149541].pid[806565](arg _mt[806567]:_MT[238], arg this[806569]:BaseArr[149541]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806579] "RVV" "temp"
    unknown call_tmp[806586] "expr temp" "maybe param" "maybe type" "temp"
    (806589 'move' call_tmp[806586](806573 '.' this[806569] c"pid"))
    (806584 'move' ret[806579](806583 'addr of' call_tmp[806586]))
    (806581 return ret[806579])
  }
  function BaseArr[149541]._decEltRefCounts[806591](arg _mt[806593]:_MT[238], arg this[806595]:BaseArr[149541]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806605] "RVV" "temp"
    unknown call_tmp[806612] "expr temp" "maybe param" "maybe type" "temp"
    (806615 'move' call_tmp[806612](806599 '.' this[806595] c"_decEltRefCounts"))
    (806610 'move' ret[806605](806609 'addr of' call_tmp[806612]))
    (806607 return ret[806605])
  }
  function BaseArr[149541].init[806617](arg _mt[806619]:_MT[238], arg this[806620]:BaseArr[149541], in arg pid[806631]:int(64)[13] :
  int(64)[13] =
  nullPid[113712], in arg _decEltRefCounts[806646]:bool[10] :
  bool[10] =
  0) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[806663] "temporary of super field" "temp"
    (806665 'move' super_tmp[806663](806662 '.v' this[806620] c"super"))
    (806630 call(806628 call (partial) init _mt[243] super_tmp[806663]))
    (806692 'end of statement')
    unknown tmp[806668] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[806696] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[806708] "expr temp" "maybe param" "maybe type" "temp"
      (806711 'move' call_tmp[806708](806670 '.v' this[806620] c"super"))
      (806700 'move' call_type_tmp[806696](806673 'typeof' call_tmp[806708]))
    }
    (806674 'move' tmp[806668] call_type_tmp[806696])
    unknown call_tmp[806713] "maybe param" "maybe type" "temp"
    (806716 'move' call_tmp[806713](806679 'cast' tmp[806668] this[806620]))
    unknown chpl__thisAsParent[806676] "dead at end of block" "insert auto destroy" "temp"
    (806704 'init var' chpl__thisAsParent[806676] call_tmp[806713] tmp[806668])
    (806682 'setcid' chpl__thisAsParent[806676])
    (806684 'init field' this[806620] c"pid" pid[806631])
    (806693 'end of statement')
    (806687 'init field' this[806620] c"_decEltRefCounts" _decEltRefCounts[806646])
    (806694 'end of statement')
    (806690 'setcid' this[806620])
    (806702 return _void[55])
  }
  type BaseArr[149541] val super[355576]:object[22] "super class" val pid[148830]:int(64)[13] nullPid[113712] int(64)[13] val _decEltRefCounts[148836]:bool[10] 0 bool[10]
  type unmanaged BaseArr?[415397]
  type BaseArr?[415394](?)
  type unmanaged BaseArr[415364]
  type BaseArr[415214](?)
  type BaseArr[382232](?)
  function AbsBaseArr[149697](?).decEltCountsIfNeeded[149676](arg _mt[149701]:_MT[238], arg this[149699]:AbsBaseArr[149697](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669068] "expr temp" "maybe param" "maybe type" "temp"
    (669071 'move' call_tmp[669068](385769 call _decEltRefCounts _mt[243] this[149699]))
    unknown call_tmp[669073] "expr temp" "maybe param" "maybe type" "temp"
    (669076 'move' call_tmp[669073](149689 call _cond_test call_tmp[669068]))
    if call_tmp[669073]
    {
      unknown call_tmp[669078] "expr temp" "maybe param" "maybe type" "temp"
      (669081 'move' call_tmp[669078](149683 call _to_unmanaged this[149699]))
      unknown call_tmp[669085] "expr temp" "maybe param" "maybe type" "temp"
      (669088 'move' call_tmp[669085](385775 call eltType _mt[243] this[149699]))
      (149686 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669078] call_tmp[669085])
    }
    (520250 return _void[55])
  }
  function AbsBaseArr[149697](?).super[806718](arg _mt[806720]:_MT[238], arg this[806722]:AbsBaseArr[149697](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806732] "RVV" "temp"
    unknown call_tmp[806739] "expr temp" "maybe param" "maybe type" "temp"
    (806742 'move' call_tmp[806739](806726 '.v' this[806722] c"super"))
    (806737 'move' ret[806732](806736 'deref' call_tmp[806739]))
    (806734 return ret[806732])
  }
  function AbsBaseArr[806749](?).eltType[806744](arg _mt[806746]:_MT[238], arg this[806751]:AbsBaseArr[806749](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806786] "RVV" "temp" "type variable"
    unknown borrowOfThis[806753]
    (806778 'end of statement')
    (806755 'move' borrowOfThis[806753](806758 call _cast _borrowedNonNilable[214](?) this[806751]))
    (806779 'end of statement' borrowOfThis[806753])
    unknown call_tmp[806800] "expr temp" "maybe param" "maybe type" "temp"
    (806803 'move' call_tmp[806800](806768 'is bound' borrowOfThis[806753] c"eltType"))
    if call_tmp[806800]
    {
      unknown call_tmp[806805] "expr temp" "maybe param" "maybe type" "temp"
      (806808 'move' call_tmp[806805](806763 '.v' borrowOfThis[806753] c"eltType"))
      unknown call_tmp[806810] "expr temp" "maybe param" "maybe type" "temp"
      (806813 'move' call_tmp[806810](806764 call chpl_checkLegalTypeFieldAccessor this[806751] call_tmp[806805] "eltType"))
      (806791 'move' ret[806786](806790 'deref' call_tmp[806810]))
      gotoReturn _end_eltType[806784] _end_eltType[806784]
      (806781 'end of statement' borrowOfThis[806753])
    }
    {
      (806796 'move' ret[806786](806795 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[806784] _end_eltType[806784]
    }
    label _end_eltType[806784]
    (806788 return ret[806786])
  }
  function AbsBaseArr[806749](?).eltType[806815](arg _mt[806817]:_MT[238], arg this[806819]:AbsBaseArr[806749](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806854] "RVV" "temp" "type variable"
    unknown borrowOfThis[806821] "type variable"
    (806846 'end of statement')
    (806823 'move' borrowOfThis[806821](806826 call _cast _borrowedNonNilable[214](?) this[806819]))
    (806847 'end of statement' borrowOfThis[806821])
    unknown call_tmp[806868] "expr temp" "maybe param" "maybe type" "temp"
    (806871 'move' call_tmp[806868](806836 'is bound' borrowOfThis[806821] c"eltType"))
    if call_tmp[806868]
    {
      unknown call_tmp[806873] "expr temp" "maybe param" "maybe type" "temp"
      (806876 'move' call_tmp[806873](806831 '.v' borrowOfThis[806821] c"eltType"))
      unknown call_tmp[806878] "expr temp" "maybe param" "maybe type" "temp"
      (806881 'move' call_tmp[806878](806832 call chpl_checkLegalTypeFieldAccessor this[806819] call_tmp[806873] "eltType"))
      (806859 'move' ret[806854](806858 'deref' call_tmp[806878]))
      gotoReturn _end_eltType[806852] _end_eltType[806852]
      (806849 'end of statement' borrowOfThis[806821])
    }
    {
      (806864 'move' ret[806854](806863 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[806852] _end_eltType[806852]
    }
    label _end_eltType[806852]
    (806856 return ret[806854])
  }
  function AbsBaseArr[149697](?).init[806883](arg _mt[806885]:_MT[238], arg this[806886]:AbsBaseArr[149697](?), in arg pid[806901]:int(64)[13] :
  int(64)[13] =
  nullPid[113712], in arg _decEltRefCounts[806908]:bool[10] :
  bool[10] =
  0, arg eltType[806911]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[806922] "temporary of super field" "temp"
    (806924 'move' super_tmp[806922](806921 '.v' this[806886] c"super"))
    (806896 call(806894 call (partial) init _mt[243] super_tmp[806922]) pid[806901] _decEltRefCounts[806908])
    (806948 'end of statement')
    unknown tmp[806927] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[806951] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[806963] "expr temp" "maybe param" "maybe type" "temp"
      (806966 'move' call_tmp[806963](806929 '.v' this[806886] c"super"))
      (806955 'move' call_type_tmp[806951](806932 'typeof' call_tmp[806963]))
    }
    (806933 'move' tmp[806927] call_type_tmp[806951])
    unknown call_tmp[806968] "maybe param" "maybe type" "temp"
    (806971 'move' call_tmp[806968](806938 'cast' tmp[806927] this[806886]))
    unknown chpl__thisAsParent[806935] "dead at end of block" "insert auto destroy" "temp"
    (806959 'init var' chpl__thisAsParent[806935] call_tmp[806968] tmp[806927])
    (806941 'setcid' chpl__thisAsParent[806935])
    (806943 'init field' this[806886] c"eltType" eltType[806911])
    (806949 'end of statement')
    (806946 'setcid' this[806886])
    (806957 return _void[55])
  }
  function AbsBaseArr[149697](?).deinit[806973](arg _mt[806975]:_MT[238], arg this[806977]:AbsBaseArr[149697](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (806985 return _void[55])
  }
  type AbsBaseArr[149697](?) val super[355590]:BaseArr[149541] "super class" unknown eltType[149671] "type variable"
  type AbsBaseArr[806749](?)
  function BaseArrOverRectangularDom[149762](?).dsiReallocate[149737](arg _mt[149766]:_MT[238], arg this[149764]:BaseArrOverRectangularDom[149762](?), arg bounds[149734] :
  unknown call_tmp[669092] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149742 call halt "reallocating not supported for this array type")
    (520252 return _void[55])
  }
  function BaseArrOverRectangularDom[149762](?).dsiPostReallocate[149749](arg _mt[149770]:_MT[238], arg this[149768]:BaseArrOverRectangularDom[149762](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (520254 return _void[55])
  }
  function BaseArrOverRectangularDom[149762](?).deinit[149756](arg _mt[149774]:_MT[238], arg this[149772]:BaseArrOverRectangularDom[149762](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520256 return _void[55])
  }
  function BaseArrOverRectangularDom[149762](?).super[806987](arg _mt[806989]:_MT[238], arg this[806991]:BaseArrOverRectangularDom[149762](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807001] "RVV" "temp"
    unknown call_tmp[807008] "expr temp" "maybe param" "maybe type" "temp"
    (807011 'move' call_tmp[807008](806995 '.v' this[806991] c"super"))
    (807006 'move' ret[807001](807005 'deref' call_tmp[807008]))
    (807003 return ret[807001])
  }
  function BaseArrOverRectangularDom[807018](?).rank[807013](arg _mt[807015]:_MT[238], arg this[807020]:BaseArrOverRectangularDom[807018](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807051] "RVV" "param" "temp"
    unknown borrowOfThis[807022]
    (807043 'end of statement')
    (807024 'move' borrowOfThis[807022](807027 call _cast _borrowedNonNilable[214](?) this[807020]))
    (807044 'end of statement' borrowOfThis[807022])
    unknown call_tmp[807065] "expr temp" "maybe param" "maybe type" "temp"
    (807068 'move' call_tmp[807065](807033 'is bound' borrowOfThis[807022] c"rank"))
    if call_tmp[807065]
    {
      unknown call_tmp[807070] "expr temp" "maybe param" "maybe type" "temp"
      (807073 'move' call_tmp[807070](807032 '.' borrowOfThis[807022] c"rank"))
      (807056 'move' ret[807051](807055 'deref' call_tmp[807070]))
      gotoReturn _end_rank[807049] _end_rank[807049]
      (807046 'end of statement' borrowOfThis[807022])
    }
    {
      (807061 'move' ret[807051](807060 'deref' ?[260]))
      gotoReturn _end_rank[807049] _end_rank[807049]
    }
    label _end_rank[807049]
    (807053 return ret[807051])
  }
  function BaseArrOverRectangularDom[807018](?).rank[807075](arg _mt[807077]:_MT[238], arg this[807079]:BaseArrOverRectangularDom[807018](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807110] "RVV" "param" "temp"
    unknown borrowOfThis[807081] "type variable"
    (807102 'end of statement')
    (807083 'move' borrowOfThis[807081](807086 call _cast _borrowedNonNilable[214](?) this[807079]))
    (807103 'end of statement' borrowOfThis[807081])
    unknown call_tmp[807124] "expr temp" "maybe param" "maybe type" "temp"
    (807127 'move' call_tmp[807124](807092 'is bound' borrowOfThis[807081] c"rank"))
    if call_tmp[807124]
    {
      unknown call_tmp[807129] "expr temp" "maybe param" "maybe type" "temp"
      (807132 'move' call_tmp[807129](807091 '.' borrowOfThis[807081] c"rank"))
      (807115 'move' ret[807110](807114 'deref' call_tmp[807129]))
      gotoReturn _end_rank[807108] _end_rank[807108]
      (807105 'end of statement' borrowOfThis[807081])
    }
    {
      (807120 'move' ret[807110](807119 'deref' ?[260]))
      gotoReturn _end_rank[807108] _end_rank[807108]
    }
    label _end_rank[807108]
    (807112 return ret[807110])
  }
  function BaseArrOverRectangularDom[807018](?).idxType[807134](arg _mt[807136]:_MT[238], arg this[807138]:BaseArrOverRectangularDom[807018](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807173] "RVV" "temp" "type variable"
    unknown borrowOfThis[807140]
    (807165 'end of statement')
    (807142 'move' borrowOfThis[807140](807145 call _cast _borrowedNonNilable[214](?) this[807138]))
    (807166 'end of statement' borrowOfThis[807140])
    unknown call_tmp[807187] "expr temp" "maybe param" "maybe type" "temp"
    (807190 'move' call_tmp[807187](807155 'is bound' borrowOfThis[807140] c"idxType"))
    if call_tmp[807187]
    {
      unknown call_tmp[807192] "expr temp" "maybe param" "maybe type" "temp"
      (807195 'move' call_tmp[807192](807150 '.v' borrowOfThis[807140] c"idxType"))
      unknown call_tmp[807197] "expr temp" "maybe param" "maybe type" "temp"
      (807200 'move' call_tmp[807197](807151 call chpl_checkLegalTypeFieldAccessor this[807138] call_tmp[807192] "idxType"))
      (807178 'move' ret[807173](807177 'deref' call_tmp[807197]))
      gotoReturn _end_idxType[807171] _end_idxType[807171]
      (807168 'end of statement' borrowOfThis[807140])
    }
    {
      (807183 'move' ret[807173](807182 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[807171] _end_idxType[807171]
    }
    label _end_idxType[807171]
    (807175 return ret[807173])
  }
  function BaseArrOverRectangularDom[807018](?).idxType[807202](arg _mt[807204]:_MT[238], arg this[807206]:BaseArrOverRectangularDom[807018](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807241] "RVV" "temp" "type variable"
    unknown borrowOfThis[807208] "type variable"
    (807233 'end of statement')
    (807210 'move' borrowOfThis[807208](807213 call _cast _borrowedNonNilable[214](?) this[807206]))
    (807234 'end of statement' borrowOfThis[807208])
    unknown call_tmp[807255] "expr temp" "maybe param" "maybe type" "temp"
    (807258 'move' call_tmp[807255](807223 'is bound' borrowOfThis[807208] c"idxType"))
    if call_tmp[807255]
    {
      unknown call_tmp[807260] "expr temp" "maybe param" "maybe type" "temp"
      (807263 'move' call_tmp[807260](807218 '.v' borrowOfThis[807208] c"idxType"))
      unknown call_tmp[807265] "expr temp" "maybe param" "maybe type" "temp"
      (807268 'move' call_tmp[807265](807219 call chpl_checkLegalTypeFieldAccessor this[807206] call_tmp[807260] "idxType"))
      (807246 'move' ret[807241](807245 'deref' call_tmp[807265]))
      gotoReturn _end_idxType[807239] _end_idxType[807239]
      (807236 'end of statement' borrowOfThis[807208])
    }
    {
      (807251 'move' ret[807241](807250 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[807239] _end_idxType[807239]
    }
    label _end_idxType[807239]
    (807243 return ret[807241])
  }
  function BaseArrOverRectangularDom[807018](?).stridable[807270](arg _mt[807272]:_MT[238], arg this[807274]:BaseArrOverRectangularDom[807018](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807305] "RVV" "param" "temp"
    unknown borrowOfThis[807276]
    (807297 'end of statement')
    (807278 'move' borrowOfThis[807276](807281 call _cast _borrowedNonNilable[214](?) this[807274]))
    (807298 'end of statement' borrowOfThis[807276])
    unknown call_tmp[807319] "expr temp" "maybe param" "maybe type" "temp"
    (807322 'move' call_tmp[807319](807287 'is bound' borrowOfThis[807276] c"stridable"))
    if call_tmp[807319]
    {
      unknown call_tmp[807324] "expr temp" "maybe param" "maybe type" "temp"
      (807327 'move' call_tmp[807324](807286 '.' borrowOfThis[807276] c"stridable"))
      (807310 'move' ret[807305](807309 'deref' call_tmp[807324]))
      gotoReturn _end_stridable[807303] _end_stridable[807303]
      (807300 'end of statement' borrowOfThis[807276])
    }
    {
      (807315 'move' ret[807305](807314 'deref' ?[260]))
      gotoReturn _end_stridable[807303] _end_stridable[807303]
    }
    label _end_stridable[807303]
    (807307 return ret[807305])
  }
  function BaseArrOverRectangularDom[807018](?).stridable[807329](arg _mt[807331]:_MT[238], arg this[807333]:BaseArrOverRectangularDom[807018](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807364] "RVV" "param" "temp"
    unknown borrowOfThis[807335] "type variable"
    (807356 'end of statement')
    (807337 'move' borrowOfThis[807335](807340 call _cast _borrowedNonNilable[214](?) this[807333]))
    (807357 'end of statement' borrowOfThis[807335])
    unknown call_tmp[807378] "expr temp" "maybe param" "maybe type" "temp"
    (807381 'move' call_tmp[807378](807346 'is bound' borrowOfThis[807335] c"stridable"))
    if call_tmp[807378]
    {
      unknown call_tmp[807383] "expr temp" "maybe param" "maybe type" "temp"
      (807386 'move' call_tmp[807383](807345 '.' borrowOfThis[807335] c"stridable"))
      (807369 'move' ret[807364](807368 'deref' call_tmp[807383]))
      gotoReturn _end_stridable[807362] _end_stridable[807362]
      (807359 'end of statement' borrowOfThis[807335])
    }
    {
      (807374 'move' ret[807364](807373 'deref' ?[260]))
      gotoReturn _end_stridable[807362] _end_stridable[807362]
    }
    label _end_stridable[807362]
    (807366 return ret[807364])
  }
  function BaseArrOverRectangularDom[149762](?).init[807388](arg _mt[807390]:_MT[238], arg this[807391]:BaseArrOverRectangularDom[149762](?), in arg pid[807406]:int(64)[13] :
  int(64)[13] =
  nullPid[113712], in arg _decEltRefCounts[807413]:bool[10] :
  bool[10] =
  0, param arg rank[807416]:int(64)[13], arg idxType[807428]:_any[178](?), param arg stridable[807437]:bool[10]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[807451] "temporary of super field" "temp"
    (807453 'move' super_tmp[807451](807450 '.v' this[807391] c"super"))
    (807401 call(807399 call (partial) init _mt[243] super_tmp[807451]) pid[807406] _decEltRefCounts[807413])
    (807489 'end of statement')
    unknown tmp[807456] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[807493] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[807505] "expr temp" "maybe param" "maybe type" "temp"
      (807508 'move' call_tmp[807505](807458 '.v' this[807391] c"super"))
      (807497 'move' call_type_tmp[807493](807461 'typeof' call_tmp[807505]))
    }
    (807462 'move' tmp[807456] call_type_tmp[807493])
    unknown call_tmp[807510] "maybe param" "maybe type" "temp"
    (807513 'move' call_tmp[807510](807467 'cast' tmp[807456] this[807391]))
    unknown chpl__thisAsParent[807464] "dead at end of block" "insert auto destroy" "temp"
    (807501 'init var' chpl__thisAsParent[807464] call_tmp[807510] tmp[807456])
    (807470 'setcid' chpl__thisAsParent[807464])
    unknown call_tmp[807515] "expr temp" "maybe param" "maybe type" "temp"
    (807518 'move' call_tmp[807515](807473 call _cast int(64)[13] rank[807416]))
    (807475 'init field' this[807391] c"rank" call_tmp[807515])
    (807490 'end of statement')
    (807478 'init field' this[807391] c"idxType" idxType[807428])
    unknown call_tmp[807520] "expr temp" "maybe param" "maybe type" "temp"
    (807523 'move' call_tmp[807520](807482 call _cast bool[10] stridable[807437]))
    (807484 'init field' this[807391] c"stridable" call_tmp[807520])
    (807491 'end of statement')
    (807487 'setcid' this[807391])
    (807499 return _void[55])
  }
  type BaseArrOverRectangularDom[149762](?) val super[355578]:BaseArr[149541] "super class" unknown rank[149708] "param" int(64)[13] unknown idxType[149712] "type variable" unknown stridable[149716] "param" bool[10]
  type BaseArrOverRectangularDom[807018](?)
  type BaseArrOverRectangularDom[385443](?)
  function BaseRectangularArr[149813](?).deinit[149785](arg _mt[149817]:_MT[238], arg this[149815]:BaseRectangularArr[149813](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520258 return _void[55])
  }
  function BaseRectangularArr[149813](?).decEltCountsIfNeeded[149792](arg _mt[149821]:_MT[238], arg this[149819]:BaseRectangularArr[149813](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669118] "expr temp" "maybe param" "maybe type" "temp"
    (669121 'move' call_tmp[669118](385796 call _decEltRefCounts _mt[243] this[149819]))
    unknown call_tmp[669123] "expr temp" "maybe param" "maybe type" "temp"
    (669126 'move' call_tmp[669123](149805 call _cond_test call_tmp[669118]))
    if call_tmp[669123]
    {
      unknown call_tmp[669128] "expr temp" "maybe param" "maybe type" "temp"
      (669131 'move' call_tmp[669128](149799 call _to_unmanaged this[149819]))
      unknown call_tmp[669135] "expr temp" "maybe param" "maybe type" "temp"
      (669138 'move' call_tmp[669135](385802 call eltType _mt[243] this[149819]))
      (149802 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669128] call_tmp[669135])
    }
    (520260 return _void[55])
  }
  function BaseRectangularArr[149813](?).super[807525](arg _mt[807527]:_MT[238], arg this[807529]:BaseRectangularArr[149813](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807539] "RVV" "temp"
    unknown call_tmp[807546] "expr temp" "maybe param" "maybe type" "temp"
    (807549 'move' call_tmp[807546](807533 '.v' this[807529] c"super"))
    (807544 'move' ret[807539](807543 'deref' call_tmp[807546]))
    (807541 return ret[807539])
  }
  function BaseRectangularArr[807556](?).eltType[807551](arg _mt[807553]:_MT[238], arg this[807558]:BaseRectangularArr[807556](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807593] "RVV" "temp" "type variable"
    unknown borrowOfThis[807560]
    (807585 'end of statement')
    (807562 'move' borrowOfThis[807560](807565 call _cast _borrowedNonNilable[214](?) this[807558]))
    (807586 'end of statement' borrowOfThis[807560])
    unknown call_tmp[807607] "expr temp" "maybe param" "maybe type" "temp"
    (807610 'move' call_tmp[807607](807575 'is bound' borrowOfThis[807560] c"eltType"))
    if call_tmp[807607]
    {
      unknown call_tmp[807612] "expr temp" "maybe param" "maybe type" "temp"
      (807615 'move' call_tmp[807612](807570 '.v' borrowOfThis[807560] c"eltType"))
      unknown call_tmp[807617] "expr temp" "maybe param" "maybe type" "temp"
      (807620 'move' call_tmp[807617](807571 call chpl_checkLegalTypeFieldAccessor this[807558] call_tmp[807612] "eltType"))
      (807598 'move' ret[807593](807597 'deref' call_tmp[807617]))
      gotoReturn _end_eltType[807591] _end_eltType[807591]
      (807588 'end of statement' borrowOfThis[807560])
    }
    {
      (807603 'move' ret[807593](807602 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[807591] _end_eltType[807591]
    }
    label _end_eltType[807591]
    (807595 return ret[807593])
  }
  function BaseRectangularArr[807556](?).eltType[807622](arg _mt[807624]:_MT[238], arg this[807626]:BaseRectangularArr[807556](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807661] "RVV" "temp" "type variable"
    unknown borrowOfThis[807628] "type variable"
    (807653 'end of statement')
    (807630 'move' borrowOfThis[807628](807633 call _cast _borrowedNonNilable[214](?) this[807626]))
    (807654 'end of statement' borrowOfThis[807628])
    unknown call_tmp[807675] "expr temp" "maybe param" "maybe type" "temp"
    (807678 'move' call_tmp[807675](807643 'is bound' borrowOfThis[807628] c"eltType"))
    if call_tmp[807675]
    {
      unknown call_tmp[807680] "expr temp" "maybe param" "maybe type" "temp"
      (807683 'move' call_tmp[807680](807638 '.v' borrowOfThis[807628] c"eltType"))
      unknown call_tmp[807685] "expr temp" "maybe param" "maybe type" "temp"
      (807688 'move' call_tmp[807685](807639 call chpl_checkLegalTypeFieldAccessor this[807626] call_tmp[807680] "eltType"))
      (807666 'move' ret[807661](807665 'deref' call_tmp[807685]))
      gotoReturn _end_eltType[807659] _end_eltType[807659]
      (807656 'end of statement' borrowOfThis[807628])
    }
    {
      (807671 'move' ret[807661](807670 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[807659] _end_eltType[807659]
    }
    label _end_eltType[807659]
    (807663 return ret[807661])
  }
  function BaseRectangularArr[149813](?).init[807690](arg _mt[807692]:_MT[238], arg this[807693]:BaseRectangularArr[149813](?), in arg pid[807708]:int(64)[13] :
  int(64)[13] =
  nullPid[113712], in arg _decEltRefCounts[807715]:bool[10] :
  bool[10] =
  0, param arg rank[807718]:int(64)[13], arg idxType[807721]:_any[178](?), param arg stridable[807724]:bool[10], arg eltType[807727]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[807738] "temporary of super field" "temp"
    (807740 'move' super_tmp[807738](807737 '.v' this[807693] c"super"))
    (807703 call(807701 call (partial) init _mt[243] super_tmp[807738]) pid[807708] _decEltRefCounts[807715] rank[807718] idxType[807721] stridable[807724])
    (807764 'end of statement')
    unknown tmp[807743] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[807767] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[807779] "expr temp" "maybe param" "maybe type" "temp"
      (807782 'move' call_tmp[807779](807745 '.v' this[807693] c"super"))
      (807771 'move' call_type_tmp[807767](807748 'typeof' call_tmp[807779]))
    }
    (807749 'move' tmp[807743] call_type_tmp[807767])
    unknown call_tmp[807784] "maybe param" "maybe type" "temp"
    (807787 'move' call_tmp[807784](807754 'cast' tmp[807743] this[807693]))
    unknown chpl__thisAsParent[807751] "dead at end of block" "insert auto destroy" "temp"
    (807775 'init var' chpl__thisAsParent[807751] call_tmp[807784] tmp[807743])
    (807757 'setcid' chpl__thisAsParent[807751])
    (807759 'init field' this[807693] c"eltType" eltType[807727])
    (807765 'end of statement')
    (807762 'setcid' this[807693])
    (807773 return _void[55])
  }
  type BaseRectangularArr[149813](?) val super[355580]:BaseArrOverRectangularDom[149762](?) "delay instantiation" "super class" unknown eltType[149780] "type variable"
  type BaseRectangularArr[807556](?)
  function BaseSparseArr[149857](?).dsiGetBaseDom[149841](arg _mt[149861]:_MT[238], arg this[149859]:BaseSparseArr[149857](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520264] "RVV" "temp"
    unknown call_tmp[669142] "expr temp" "maybe param" "maybe type" "temp"
    (669145 'move' call_tmp[669142](385807 call dom _mt[243] this[149859]))
    (520269 'move' ret[520264](520268 'deref' call_tmp[669142]))
    (520266 return ret[520264])
  }
  function BaseSparseArr[149857](?).deinit[149851](arg _mt[149865]:_MT[238], arg this[149863]:BaseSparseArr[149857](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520271 return _void[55])
  }
  function BaseSparseArr[149857](?).super[807789](arg _mt[807791]:_MT[238], arg this[807793]:BaseSparseArr[149857](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807803] "RVV" "temp"
    unknown call_tmp[807810] "expr temp" "maybe param" "maybe type" "temp"
    (807813 'move' call_tmp[807810](807797 '.v' this[807793] c"super"))
    (807808 'move' ret[807803](807807 'deref' call_tmp[807810]))
    (807805 return ret[807803])
  }
  function BaseSparseArr[807820](?).rank[807815](arg _mt[807817]:_MT[238], arg this[807822]:BaseSparseArr[807820](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807853] "RVV" "param" "temp"
    unknown borrowOfThis[807824]
    (807845 'end of statement')
    (807826 'move' borrowOfThis[807824](807829 call _cast _borrowedNonNilable[214](?) this[807822]))
    (807846 'end of statement' borrowOfThis[807824])
    unknown call_tmp[807867] "expr temp" "maybe param" "maybe type" "temp"
    (807870 'move' call_tmp[807867](807835 'is bound' borrowOfThis[807824] c"rank"))
    if call_tmp[807867]
    {
      unknown call_tmp[807872] "expr temp" "maybe param" "maybe type" "temp"
      (807875 'move' call_tmp[807872](807834 '.' borrowOfThis[807824] c"rank"))
      (807858 'move' ret[807853](807857 'deref' call_tmp[807872]))
      gotoReturn _end_rank[807851] _end_rank[807851]
      (807848 'end of statement' borrowOfThis[807824])
    }
    {
      (807863 'move' ret[807853](807862 'deref' ?[260]))
      gotoReturn _end_rank[807851] _end_rank[807851]
    }
    label _end_rank[807851]
    (807855 return ret[807853])
  }
  function BaseSparseArr[807820](?).rank[807877](arg _mt[807879]:_MT[238], arg this[807881]:BaseSparseArr[807820](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807912] "RVV" "param" "temp"
    unknown borrowOfThis[807883] "type variable"
    (807904 'end of statement')
    (807885 'move' borrowOfThis[807883](807888 call _cast _borrowedNonNilable[214](?) this[807881]))
    (807905 'end of statement' borrowOfThis[807883])
    unknown call_tmp[807926] "expr temp" "maybe param" "maybe type" "temp"
    (807929 'move' call_tmp[807926](807894 'is bound' borrowOfThis[807883] c"rank"))
    if call_tmp[807926]
    {
      unknown call_tmp[807931] "expr temp" "maybe param" "maybe type" "temp"
      (807934 'move' call_tmp[807931](807893 '.' borrowOfThis[807883] c"rank"))
      (807917 'move' ret[807912](807916 'deref' call_tmp[807931]))
      gotoReturn _end_rank[807910] _end_rank[807910]
      (807907 'end of statement' borrowOfThis[807883])
    }
    {
      (807922 'move' ret[807912](807921 'deref' ?[260]))
      gotoReturn _end_rank[807910] _end_rank[807910]
    }
    label _end_rank[807910]
    (807914 return ret[807912])
  }
  function BaseSparseArr[807820](?).idxType[807936](arg _mt[807938]:_MT[238], arg this[807940]:BaseSparseArr[807820](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807975] "RVV" "temp" "type variable"
    unknown borrowOfThis[807942]
    (807967 'end of statement')
    (807944 'move' borrowOfThis[807942](807947 call _cast _borrowedNonNilable[214](?) this[807940]))
    (807968 'end of statement' borrowOfThis[807942])
    unknown call_tmp[807989] "expr temp" "maybe param" "maybe type" "temp"
    (807992 'move' call_tmp[807989](807957 'is bound' borrowOfThis[807942] c"idxType"))
    if call_tmp[807989]
    {
      unknown call_tmp[807994] "expr temp" "maybe param" "maybe type" "temp"
      (807997 'move' call_tmp[807994](807952 '.v' borrowOfThis[807942] c"idxType"))
      unknown call_tmp[807999] "expr temp" "maybe param" "maybe type" "temp"
      (808002 'move' call_tmp[807999](807953 call chpl_checkLegalTypeFieldAccessor this[807940] call_tmp[807994] "idxType"))
      (807980 'move' ret[807975](807979 'deref' call_tmp[807999]))
      gotoReturn _end_idxType[807973] _end_idxType[807973]
      (807970 'end of statement' borrowOfThis[807942])
    }
    {
      (807985 'move' ret[807975](807984 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[807973] _end_idxType[807973]
    }
    label _end_idxType[807973]
    (807977 return ret[807975])
  }
  function BaseSparseArr[807820](?).idxType[808004](arg _mt[808006]:_MT[238], arg this[808008]:BaseSparseArr[807820](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808043] "RVV" "temp" "type variable"
    unknown borrowOfThis[808010] "type variable"
    (808035 'end of statement')
    (808012 'move' borrowOfThis[808010](808015 call _cast _borrowedNonNilable[214](?) this[808008]))
    (808036 'end of statement' borrowOfThis[808010])
    unknown call_tmp[808057] "expr temp" "maybe param" "maybe type" "temp"
    (808060 'move' call_tmp[808057](808025 'is bound' borrowOfThis[808010] c"idxType"))
    if call_tmp[808057]
    {
      unknown call_tmp[808062] "expr temp" "maybe param" "maybe type" "temp"
      (808065 'move' call_tmp[808062](808020 '.v' borrowOfThis[808010] c"idxType"))
      unknown call_tmp[808067] "expr temp" "maybe param" "maybe type" "temp"
      (808070 'move' call_tmp[808067](808021 call chpl_checkLegalTypeFieldAccessor this[808008] call_tmp[808062] "idxType"))
      (808048 'move' ret[808043](808047 'deref' call_tmp[808067]))
      gotoReturn _end_idxType[808041] _end_idxType[808041]
      (808038 'end of statement' borrowOfThis[808010])
    }
    {
      (808053 'move' ret[808043](808052 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[808041] _end_idxType[808041]
    }
    label _end_idxType[808041]
    (808045 return ret[808043])
  }
  function BaseSparseArr[149857](?).dom[808072](arg _mt[808074]:_MT[238], arg this[808076]:BaseSparseArr[149857](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808086] "RVV" "temp"
    unknown call_tmp[808093] "expr temp" "maybe param" "maybe type" "temp"
    (808096 'move' call_tmp[808093](808080 '.' this[808076] c"dom"))
    (808091 'move' ret[808086](808090 'addr of' call_tmp[808093]))
    (808088 return ret[808086])
  }
  function BaseSparseArr[149857](?).init[808098](arg _mt[808100]:_MT[238], arg this[808101]:BaseSparseArr[149857](?), in arg pid[808116]:int(64)[13] :
  int(64)[13] =
  nullPid[113712], in arg _decEltRefCounts[808123]:bool[10] :
  bool[10] =
  0, arg eltType[808126]:_any[178](?), param arg rank[808129]:int(64)[13], arg idxType[808141]:_any[178](?), in arg dom[808150]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[808161] "temporary of super field" "temp"
    (808163 'move' super_tmp[808161](808160 '.v' this[808101] c"super"))
    (808111 call(808109 call (partial) init _mt[243] super_tmp[808161]) pid[808116] _decEltRefCounts[808123] eltType[808126])
    (808196 'end of statement')
    unknown tmp[808166] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[808200] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808212] "expr temp" "maybe param" "maybe type" "temp"
      (808215 'move' call_tmp[808212](808168 '.v' this[808101] c"super"))
      (808204 'move' call_type_tmp[808200](808171 'typeof' call_tmp[808212]))
    }
    (808172 'move' tmp[808166] call_type_tmp[808200])
    unknown call_tmp[808217] "maybe param" "maybe type" "temp"
    (808220 'move' call_tmp[808217](808177 'cast' tmp[808166] this[808101]))
    unknown chpl__thisAsParent[808174] "dead at end of block" "insert auto destroy" "temp"
    (808208 'init var' chpl__thisAsParent[808174] call_tmp[808217] tmp[808166])
    (808180 'setcid' chpl__thisAsParent[808174])
    unknown call_tmp[808222] "expr temp" "maybe param" "maybe type" "temp"
    (808225 'move' call_tmp[808222](808183 call _cast int(64)[13] rank[808129]))
    (808185 'init field' this[808101] c"rank" call_tmp[808222])
    (808197 'end of statement')
    (808188 'init field' this[808101] c"idxType" idxType[808141])
    (808191 'init field' this[808101] c"dom" dom[808150])
    (808198 'end of statement')
    (808194 'setcid' this[808101])
    (808206 return _void[55])
  }
  type BaseSparseArr[149857](?) val super[355592]:AbsBaseArr[149697](?) "delay instantiation" "super class" unknown rank[149828] "param" int(64)[13] unknown idxType[149832] "type variable" unknown dom[149835]
  type BaseSparseArr[807820](?)
  function BaseSparseArrImpl[150527](?).init[149891](arg _mt[150531]:_MT[238], arg this[150529]:BaseSparseArrImpl[150527](?), arg eltType[149889]:_any[178](?), param arg rank[149894]:int(64)[13], arg idxType[149897]:_any[178](?), arg dom[149899]:_any[178](?), param arg initElts[149902]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461727] "temporary of super field" "temp"
    (461729 'move' super_tmp[461727](461726 '.v' this[150529] c"super"))
    (149918 call(149906 call (partial) init _mt[243] super_tmp[461727])(eltType = eltType[149889])(rank = rank[149894])(idxType = idxType[149897])(dom = dom[149899]))
    (481522 'end of statement')
    unknown tmp[461732] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492230] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[669149] "expr temp" "maybe param" "maybe type" "temp"
      (669152 'move' call_tmp[669149](461734 '.v' this[150529] c"super"))
      (492234 'move' call_type_tmp[492230](461737 'typeof' call_tmp[669149]))
    }
    (461738 'move' tmp[461732] call_type_tmp[492230])
    unknown call_tmp[669154] "maybe param" "maybe type" "temp"
    (669157 'move' call_tmp[669154](461743 'cast' tmp[461732] this[150529]))
    unknown chpl__thisAsParent[461740] "dead at end of block" "insert auto destroy" "temp"
    (543512 'init var' chpl__thisAsParent[461740] call_tmp[669154] tmp[461732])
    (461746 'setcid' chpl__thisAsParent[461740])
    (481523 'end of statement')
    unknown call_tmp[669159] "expr temp" "maybe param" "maybe type" "temp"
    (669162 'move' call_tmp[669159](149926 '.' this[150529] c"dom"))
    unknown call_tmp[669166] "expr temp" "maybe param" "maybe type" "temp"
    (669169 'move' call_tmp[669166](149929 call nnzDom _mt[243] call_tmp[669159]))
    unknown call_tmp[669173] "maybe param" "maybe type" "temp"
    (669176 'move' call_tmp[669173](149939 call(149932 call (partial) buildArray _mt[243] call_tmp[669166]) eltType[149889](initElts = initElts[149902])))
    unknown call_tmp[669178] "expr temp" "maybe param" "maybe type" "temp"
    (669181 'move' call_tmp[669178](461765 '.' this[150529] c"dom"))
    unknown call_tmp[669185] "expr temp" "maybe param" "maybe type" "temp"
    (669188 'move' call_tmp[669185](461755 call nnzDom _mt[243] call_tmp[669178]))
    unknown call_tmp[669190] "expr temp" "maybe param" "maybe type" "temp"
    (669193 'move' call_tmp[669190](461753 call chpl__ensureDomainExpr call_tmp[669185]))
    unknown call_tmp[669195] "expr temp" "maybe param" "maybe type" "temp"
    (669198 'move' call_tmp[669195](461768 '.v' this[150529] c"eltType"))
    unknown call_tmp[669200] "maybe param" "maybe type" "temp"
    (669203 'move' call_tmp[669200](461751 call chpl__buildArrayRuntimeType call_tmp[669190] call_tmp[669195]))
    unknown tmp[461748] "temp"
    (461759 'init var' tmp[461748] call_tmp[669173] call_tmp[669200])
    (461761 'init field' this[150529] c"data" tmp[461748])
    (481524 'end of statement')
    unknown tmp[461772] "temp"
    unknown call_tmp[669205] "expr temp" "maybe param" "maybe type" "temp"
    (669208 'move' call_tmp[669205](461781 '.v' this[150529] c"eltType"))
    (461775 'default init var' tmp[461772] call_tmp[669205])
    (461777 '.=' this[150529] c"irv" tmp[461772])
    (481525 'end of statement')
    (461784 'setcid' this[150529])
    (520273 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).deinit[149947](arg _mt[150535]:_MT[238], arg this[150533]:BaseSparseArrImpl[150527](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520275 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).dsiElementInitializationComplete[149954](arg _mt[150539]:_MT[238], arg this[150537]:BaseSparseArrImpl[150527](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669212] "expr temp" "maybe param" "maybe type" "temp"
    (669215 'move' call_tmp[669212](360586 call data _mt[243] this[150537]))
    (149961 call(149957 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[669212]))
    (520277 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).dsiElementDeinitializationComplete[149968](arg _mt[150543]:_MT[238], arg this[150541]:BaseSparseArrImpl[150527](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669221] "expr temp" "maybe param" "maybe type" "temp"
    (669224 'move' call_tmp[669221](360591 call data _mt[243] this[150541]))
    (149975 call(149971 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[669221]))
    (520279 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).dsiDestroyArr[149986](arg _mt[150547]:_MT[238], arg this[150545]:BaseSparseArrImpl[150527](?), arg deinitElts[149983]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669228] "expr temp" "maybe param" "maybe type" "temp"
    (669231 'move' call_tmp[669228](149994 call _cond_test deinitElts[149983]))
    if call_tmp[669228]
    {
      unknown call_tmp[669235] "expr temp" "maybe param" "maybe type" "temp"
      (669238 'move' call_tmp[669235](385820 call data _mt[243] this[150545]))
      (149992 call _deinitElements call_tmp[669235])
    }
    (520281 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).IRV[150009](arg _mt[150551]:_MT[238], arg this[150549]:BaseSparseArrImpl[150527](?)) ref : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520285] "RVV" "temp"
    unknown call_tmp[669242] "expr temp" "maybe param" "maybe type" "temp"
    (669245 'move' call_tmp[669242](385828 call irv _mt[243] this[150549]))
    (520290 'move' ret[520285](520289 'addr of' call_tmp[669242]))
    (520287 return ret[520285])
  }
  function BaseSparseArrImpl[150527](?).sparseBulkShiftArray[150021](arg _mt[150555]:_MT[238], arg this[150553]:BaseSparseArrImpl[150527](?), arg shiftMap[150019]:_any[178](?), arg oldnnz[150023]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150026] "dead at end of block" "insert auto destroy"
    (543514 'default init var' newIdx[150026] int(64)[13])
    (150029 'end of statement')
    unknown prevNewIdx[150032] "dead at end of block" "insert auto destroy"
    (543516 'init var' prevNewIdx[150032] 1)
    (150035 'end of statement')
    unknown call_tmp[669249] "expr temp" "maybe param" "maybe type" "temp"
    (669252 'move' call_tmp[669249](150038 call _dom _mt[243] shiftMap[150019]))
    unknown call_tmp[669256] "expr temp" "maybe param" "maybe type" "temp"
    (669259 'move' call_tmp[669256](150041 call high _mt[243] call_tmp[669249]))
    unknown call_tmp[669261] "expr temp" "maybe param" "maybe type" "temp"
    (669264 'move' call_tmp[669261](150045 call + call_tmp[669256] 1))
    unknown call_tmp[669268] "expr temp" "maybe param" "maybe type" "temp"
    (669271 'move' call_tmp[669268](360597 call dom _mt[243] this[150553]))
    unknown call_tmp[669275] "expr temp" "maybe param" "maybe type" "temp"
    (669278 'move' call_tmp[669275](150048 call nnzDom _mt[243] call_tmp[669268]))
    unknown call_tmp[669282] "expr temp" "maybe param" "maybe type" "temp"
    (669285 'move' call_tmp[669282](150051 call high _mt[243] call_tmp[669275]))
    unknown call_tmp[669287] "expr temp" "maybe param" "maybe type" "temp"
    (669290 'move' call_tmp[669287](150054 call chpl_build_bounded_range call_tmp[669261] call_tmp[669282]))
    Forall {
      induction variables:
        
        unknown i[150065] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[669287]
      shadow variables:
      other variables
        forall body
      {
        unknown call_tmp[669294] "expr temp" "maybe param" "maybe type" "temp"
        (669297 'move' call_tmp[669294](150059 call(385833 call (partial) data _mt[243] this[150553]) i[150065]))
        unknown call_tmp[669301] "expr temp" "maybe param" "maybe type" "temp"
        (669304 'move' call_tmp[669301](385839 call irv _mt[243] this[150553]))
        (150061 call = call_tmp[669294] call_tmp[669301])
        (481531 'end of statement' i[150065])
      }
    }
    {
      unknown _indexOfInterest[150187] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150188] "expr temp" "temp"
      unknown call_tmp[669306] "expr temp" "maybe param" "maybe type" "temp"
      (669309 'move' call_tmp[669306](150212 call - 1))
      unknown call_tmp[669311] "expr temp" "maybe param" "maybe type" "temp"
      (669314 'move' call_tmp[669311](150216 call chpl_direct_range_iter 1 oldnnz[150023] call_tmp[669306]))
      unknown call_tmp[669316] "expr temp" "maybe param" "maybe type" "temp"
      (669319 'move' call_tmp[669316](150205 call _getIterator call_tmp[669311]))
      unknown call_tmp[669323] "expr temp" "maybe param" "maybe type" "temp"
      (669326 'move' call_tmp[669323](150223 call _dom _mt[243] shiftMap[150019]))
      unknown call_tmp[669330] "expr temp" "maybe param" "maybe type" "temp"
      (669333 'move' call_tmp[669330](150227 call(150221 call (partial) dim _mt[243] call_tmp[669323]) 0))
      unknown call_tmp[669335] "expr temp" "maybe param" "maybe type" "temp"
      (669338 'move' call_tmp[669335](150230 call - 1))
      unknown call_tmp[669340] "expr temp" "maybe param" "maybe type" "temp"
      (669343 'move' call_tmp[669340](150219 call chpl_by call_tmp[669330] call_tmp[669335]))
      unknown call_tmp[669345] "expr temp" "maybe param" "maybe type" "temp"
      (669348 'move' call_tmp[669345](150232 call _getIterator call_tmp[669340]))
      (150246 'move' _iterator[150188](150098 call _build_tuple call_tmp[669316] call_tmp[669345]))
      Defer
      {
        {
          (150276 call _freeIterator _iterator[150188])
        }
      }
      { scopeless type
        (150251 'move' _indexOfInterest[150187](150248 call iteratorIndex _iterator[150188]))
      }
      ForLoop[150189]
      {
        (150256 call _check_tuple_var_decl _indexOfInterest[150187] 2)
        (481534 'end of statement')
        unknown i[150262] "index var" "insert auto destroy"
        (481535 'end of statement')
        (150264 'move' i[150262](150260 call _indexOfInterest[150187] 0))
        (481536 'end of statement' i[150262])
        unknown _newIdx[150269] "index var" "insert auto destroy"
        (481538 'end of statement')
        (150271 'move' _newIdx[150269](150267 call _indexOfInterest[150187] 1))
        (481539 'end of statement' _newIdx[150269])
        {
          unknown call_tmp[669350] "expr temp" "maybe param" "maybe type" "temp"
          (669353 'move' call_tmp[669350](150103 call shiftMap[150019] _newIdx[150269]))
          (150104 call = newIdx[150026] call_tmp[669350])
          (481541 'end of statement' newIdx[150026] _newIdx[150269])
          unknown call_tmp[669357] "expr temp" "maybe param" "maybe type" "temp"
          (669360 'move' call_tmp[669357](150111 call(385847 call (partial) data _mt[243] this[150553]) newIdx[150026]))
          unknown call_tmp[669364] "expr temp" "maybe param" "maybe type" "temp"
          (669367 'move' call_tmp[669364](150115 call(385853 call (partial) data _mt[243] this[150553]) i[150262]))
          (150116 call = call_tmp[669357] call_tmp[669364])
          (481544 'end of statement' newIdx[150026] i[150262])
          {
            unknown _indexOfInterest[150138] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150139] "expr temp" "temp"
            unknown call_tmp[669369] "expr temp" "maybe param" "maybe type" "temp"
            (669372 'move' call_tmp[669369](150152 call + newIdx[150026] 1))
            unknown call_tmp[669374] "expr temp" "maybe param" "maybe type" "temp"
            (669377 'move' call_tmp[669374](150156 call - prevNewIdx[150032] 1))
            unknown call_tmp[669379] "expr temp" "maybe param" "maybe type" "temp"
            (669382 'move' call_tmp[669379](150159 call chpl_direct_range_iter call_tmp[669369] call_tmp[669374] 1))
            (150148 'move' _iterator[150139](150146 call _getIterator call_tmp[669379]))
            Defer
            {
              {
                (150175 call _freeIterator _iterator[150139])
              }
            }
            { scopeless type
              (150164 'move' _indexOfInterest[150138](150161 call iteratorIndex _iterator[150139]))
            }
            ForLoop[150140]
            {
              unknown emptyIndex[150168] "index var" "insert auto destroy"
              (481548 'end of statement')
              (150170 'move' emptyIndex[150168] _indexOfInterest[150138])
              (481549 'end of statement' emptyIndex[150168])
              unknown call_tmp[669386] "expr temp" "maybe param" "maybe type" "temp"
              (669389 'move' call_tmp[669386](150133 call(385859 call (partial) data _mt[243] this[150553]) emptyIndex[150168]))
              unknown call_tmp[669393] "expr temp" "maybe param" "maybe type" "temp"
              (669396 'move' call_tmp[669393](385865 call irv _mt[243] this[150553]))
              (150135 call = call_tmp[669386] call_tmp[669393])
              (481551 'end of statement' emptyIndex[150168])
              label _continueLabel[150143]
              _indexOfInterest[150138]
              _iterator[150139]
            }
            label _breakLabel[150144]
          }
          (150184 call = prevNewIdx[150032] newIdx[150026])
          (481553 'end of statement' prevNewIdx[150032] newIdx[150026])
        }
        label _continueLabel[150192]
        _indexOfInterest[150187]
        _iterator[150188]
      }
      label _breakLabel[150193]
    }
    {
      unknown _indexOfInterest[150299] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150300] "expr temp" "temp"
      unknown call_tmp[669398] "expr temp" "maybe param" "maybe type" "temp"
      (669401 'move' call_tmp[669398](150314 call - prevNewIdx[150032] 1))
      unknown call_tmp[669403] "expr temp" "maybe param" "maybe type" "temp"
      (669406 'move' call_tmp[669403](150317 call chpl_direct_range_iter 1 call_tmp[669398] 1))
      (150309 'move' _iterator[150300](150307 call _getIterator call_tmp[669403]))
      Defer
      {
        {
          (150333 call _freeIterator _iterator[150300])
        }
      }
      { scopeless type
        (150322 'move' _indexOfInterest[150299](150319 call iteratorIndex _iterator[150300]))
      }
      ForLoop[150301]
      {
        unknown i[150326] "index var" "insert auto destroy"
        (481557 'end of statement')
        (150328 'move' i[150326] _indexOfInterest[150299])
        (481558 'end of statement' i[150326])
        unknown call_tmp[669410] "expr temp" "maybe param" "maybe type" "temp"
        (669413 'move' call_tmp[669410](150294 call(385875 call (partial) data _mt[243] this[150553]) i[150326]))
        unknown call_tmp[669417] "expr temp" "maybe param" "maybe type" "temp"
        (669420 'move' call_tmp[669417](385881 call irv _mt[243] this[150553]))
        (150296 call = call_tmp[669410] call_tmp[669417])
        (481560 'end of statement' i[150326])
        label _continueLabel[150304]
        _indexOfInterest[150299]
        _iterator[150300]
      }
      label _breakLabel[150305]
    }
    (520292 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).sparseShiftArray[150346](arg _mt[150559]:_MT[238], arg this[150557]:BaseSparseArrImpl[150527](?), arg shiftrange[150344]:_any[178](?), arg initrange[150348]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150361] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150362] "expr temp" "temp"
      (150371 'move' _iterator[150362](150369 call _getIterator initrange[150348]))
      Defer
      {
        {
          (150387 call _freeIterator _iterator[150362])
        }
      }
      { scopeless type
        (150376 'move' _indexOfInterest[150361](150373 call iteratorIndex _iterator[150362]))
      }
      ForLoop[150363]
      {
        unknown i[150380] "index var" "insert auto destroy"
        (481563 'end of statement')
        (150382 'move' i[150380] _indexOfInterest[150361])
        (481564 'end of statement' i[150380])
        {
          unknown call_tmp[669424] "expr temp" "maybe param" "maybe type" "temp"
          (669427 'move' call_tmp[669424](150355 call(385888 call (partial) data _mt[243] this[150557]) i[150380]))
          unknown call_tmp[669431] "expr temp" "maybe param" "maybe type" "temp"
          (669434 'move' call_tmp[669431](385894 call irv _mt[243] this[150557]))
          (150357 call = call_tmp[669424] call_tmp[669431])
          (481566 'end of statement' i[150380])
        }
        label _continueLabel[150366]
        _indexOfInterest[150361]
        _iterator[150362]
      }
      label _breakLabel[150367]
    }
    {
      unknown _indexOfInterest[150417] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150418] "expr temp" "temp"
      unknown call_tmp[669436] "expr temp" "maybe param" "maybe type" "temp"
      (669439 'move' call_tmp[669436](150398 call - 1))
      unknown call_tmp[669441] "expr temp" "maybe param" "maybe type" "temp"
      (669444 'move' call_tmp[669441](150400 call chpl_by shiftrange[150344] call_tmp[669436]))
      (150427 'move' _iterator[150418](150425 call _getIterator call_tmp[669441]))
      Defer
      {
        {
          (150447 call _freeIterator _iterator[150418])
        }
      }
      { scopeless type
        (150436 'move' _indexOfInterest[150417](150433 call iteratorIndex _iterator[150418]))
      }
      ForLoop[150419]
      {
        unknown i[150440] "index var" "insert auto destroy"
        (481569 'end of statement')
        (150442 'move' i[150440] _indexOfInterest[150417])
        (481570 'end of statement' i[150440])
        {
          unknown call_tmp[669448] "expr temp" "maybe param" "maybe type" "temp"
          (669451 'move' call_tmp[669448](150405 call + i[150440] 1))
          unknown call_tmp[669453] "expr temp" "maybe param" "maybe type" "temp"
          (669456 'move' call_tmp[669453](150408 call(385900 call (partial) data _mt[243] this[150557]) call_tmp[669448]))
          unknown call_tmp[669460] "expr temp" "maybe param" "maybe type" "temp"
          (669463 'move' call_tmp[669460](150412 call(385906 call (partial) data _mt[243] this[150557]) i[150440]))
          (150413 call = call_tmp[669453] call_tmp[669460])
          (481572 'end of statement' i[150440] i[150440])
        }
        label _continueLabel[150422]
        _indexOfInterest[150417]
        _iterator[150418]
      }
      label _breakLabel[150423]
    }
    unknown call_tmp[669469] "expr temp" "maybe param" "maybe type" "temp"
    (669472 'move' call_tmp[669469](150456 call low _mt[243] shiftrange[150344]))
    unknown call_tmp[669474] "expr temp" "maybe param" "maybe type" "temp"
    (669477 'move' call_tmp[669474](150460 call(385912 call (partial) data _mt[243] this[150557]) call_tmp[669469]))
    unknown call_tmp[669481] "expr temp" "maybe param" "maybe type" "temp"
    (669484 'move' call_tmp[669481](385917 call irv _mt[243] this[150557]))
    (150462 call = call_tmp[669474] call_tmp[669481])
    (520294 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).sparseShiftArrayBack[150471](arg _mt[150563]:_MT[238], arg this[150561]:BaseSparseArrImpl[150527](?), arg shiftrange[150469]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150490] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150491] "expr temp" "temp"
      (150500 'move' _iterator[150491](150498 call _getIterator shiftrange[150469]))
      Defer
      {
        {
          (150516 call _freeIterator _iterator[150491])
        }
      }
      { scopeless type
        (150505 'move' _indexOfInterest[150490](150502 call iteratorIndex _iterator[150491]))
      }
      ForLoop[150492]
      {
        unknown i[150509] "index var" "insert auto destroy"
        (481577 'end of statement')
        (150511 'move' i[150509] _indexOfInterest[150490])
        (481578 'end of statement' i[150509])
        {
          unknown call_tmp[669488] "expr temp" "maybe param" "maybe type" "temp"
          (669491 'move' call_tmp[669488](150478 call(385923 call (partial) data _mt[243] this[150561]) i[150509]))
          unknown call_tmp[669495] "expr temp" "maybe param" "maybe type" "temp"
          (669498 'move' call_tmp[669495](150482 call + i[150509] 1))
          unknown call_tmp[669500] "expr temp" "maybe param" "maybe type" "temp"
          (669503 'move' call_tmp[669500](150485 call(385929 call (partial) data _mt[243] this[150561]) call_tmp[669495]))
          (150486 call = call_tmp[669488] call_tmp[669500])
          (481580 'end of statement' i[150509] i[150509])
        }
        label _continueLabel[150495]
        _indexOfInterest[150490]
        _iterator[150491]
      }
      label _breakLabel[150496]
    }
    (520296 return _void[55])
  }
  function BaseSparseArrImpl[150527](?).super[808227](arg _mt[808229]:_MT[238], arg this[808231]:BaseSparseArrImpl[150527](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808241] "RVV" "temp"
    unknown call_tmp[808248] "expr temp" "maybe param" "maybe type" "temp"
    (808251 'move' call_tmp[808248](808235 '.v' this[808231] c"super"))
    (808246 'move' ret[808241](808245 'deref' call_tmp[808248]))
    (808243 return ret[808241])
  }
  function BaseSparseArrImpl[150527](?).data[808253](arg _mt[808255]:_MT[238], arg this[808257]:BaseSparseArrImpl[150527](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808267] "RVV" "temp"
    unknown call_tmp[808274] "expr temp" "maybe param" "maybe type" "temp"
    (808277 'move' call_tmp[808274](808261 '.' this[808257] c"data"))
    (808272 'move' ret[808267](808271 'addr of' call_tmp[808274]))
    (808269 return ret[808267])
  }
  function BaseSparseArrImpl[150527](?).irv[808279](arg _mt[808281]:_MT[238], arg this[808283]:BaseSparseArrImpl[150527](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808293] "RVV" "temp"
    unknown call_tmp[808300] "expr temp" "maybe param" "maybe type" "temp"
    (808303 'move' call_tmp[808300](808287 '.' this[808283] c"irv"))
    (808298 'move' ret[808293](808297 'addr of' call_tmp[808300]))
    (808295 return ret[808293])
  }
  type BaseSparseArrImpl[150527](?) val super[355594]:BaseSparseArr[149857](?) "delay instantiation" "super class" unknown data[149883] "local field" "unsafe"(149881 call chpl__buildArrayRuntimeType(149879 call chpl__ensureDomainExpr(149874 call nnzDom _mt[243] dom[149835])) eltType[149671]) unknown irv[150003] eltType[149671]
  function _delete_dist[150573](arg dist[150570]:unmanaged BaseDist[415379], arg privatized[150576]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150586 call(150582 call (partial) dsiDestroyDist _mt[243] dist[150570]))
    (481583 'end of statement')
    unknown tmp[427063] "maybe param" "temp"
    (427074 'move' tmp[427063] 1)
    unknown call_tmp[669509] "expr temp" "maybe param" "maybe type" "temp"
    (669512 'move' call_tmp[669509](427076 call _cond_invalid tmp[427063]))
    if call_tmp[669509]
    {
      (427079 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568586] "maybe param" "temp"
    unknown call_tmp[669514] "expr temp" "maybe param" "maybe type" "temp"
    (669517 'move' call_tmp[669514](427064 call isTrue tmp[427063]))
    (568591 'move' tmp[568586](568589 call _cond_test call_tmp[669514]))
    if tmp[568586]
    {
      unknown tmp[568593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568595 'move' tmp[568593](427067 call isTrue privatized[150576]))
      (568600 'move' tmp[568585](568597 '_paramFoldLogical' tmp[568586] tmp[568593]))
    }
    {
      (568605 'move' tmp[568585](568602 '_paramFoldLogical' tmp[568586] 0))
    }
    unknown call_tmp[669519] "expr temp" "maybe param" "maybe type" "temp"
    (669522 'move' call_tmp[669519](150603 call _cond_test tmp[568585]))
    if call_tmp[669519]
    {
      unknown call_tmp[669526] "expr temp" "maybe param" "maybe type" "temp"
      (669529 'move' call_tmp[669526](150595 call pid _mt[243] dist[150570]))
      (150600 call _freePrivatizedClass call_tmp[669526] dist[150570])
    }
    (150609 call chpl__delete dist[150570])
    (520298 return _void[55])
  }
  function _delete_dom[150618](arg dom[150616]:_any[178](?), arg privatized[150621]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150631 call(150627 call (partial) dsiDestroyDom _mt[243] dom[150616]))
    (481587 'end of statement')
    unknown tmp[427084] "maybe param" "temp"
    (427095 'move' tmp[427084] 1)
    unknown call_tmp[669533] "expr temp" "maybe param" "maybe type" "temp"
    (669536 'move' call_tmp[669533](427097 call _cond_invalid tmp[427084]))
    if call_tmp[669533]
    {
      (427100 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568613] "maybe param" "temp"
    unknown call_tmp[669538] "expr temp" "maybe param" "maybe type" "temp"
    (669541 'move' call_tmp[669538](427085 call isTrue tmp[427084]))
    (568618 'move' tmp[568613](568616 call _cond_test call_tmp[669538]))
    if tmp[568613]
    {
      unknown tmp[568620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568622 'move' tmp[568620](427088 call isTrue privatized[150621]))
      (568627 'move' tmp[568612](568624 '_paramFoldLogical' tmp[568613] tmp[568620]))
    }
    {
      (568632 'move' tmp[568612](568629 '_paramFoldLogical' tmp[568613] 0))
    }
    unknown call_tmp[669543] "expr temp" "maybe param" "maybe type" "temp"
    (669546 'move' call_tmp[669543](150648 call _cond_test tmp[568612]))
    if call_tmp[669543]
    {
      unknown call_tmp[669550] "expr temp" "maybe param" "maybe type" "temp"
      (669553 'move' call_tmp[669550](150640 call pid _mt[243] dom[150616]))
      (150645 call _freePrivatizedClass call_tmp[669550] dom[150616])
    }
    (150654 call chpl__delete dom[150616])
    (520300 return _void[55])
  }
  function _delete_arr[150666](arg arr[150663]:unmanaged BaseArr[415364], param arg privatized[150669]:bool[10], arg deinitElts[150673] :
  1 =
  1) : _unknown[51] "no return value for void"
  {
    (150685 call(150679 call (partial) dsiDestroyArr _mt[243] arr[150663])(deinitElts = deinitElts[150673]))
    (481591 'end of statement')
    (150695 call(150691 call (partial) decEltCountsIfNeeded _mt[243] arr[150663]))
    (481592 'end of statement')
    unknown tmp[427105] "maybe param" "temp"
    (427116 'move' tmp[427105] 1)
    unknown call_tmp[669559] "expr temp" "maybe param" "maybe type" "temp"
    (669562 'move' call_tmp[669559](427118 call _cond_invalid tmp[427105]))
    if call_tmp[669559]
    {
      (427121 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568640] "maybe param" "temp"
    unknown call_tmp[669564] "expr temp" "maybe param" "maybe type" "temp"
    (669567 'move' call_tmp[669564](427106 call isTrue tmp[427105]))
    (568645 'move' tmp[568640](568643 call _cond_test call_tmp[669564]))
    if tmp[568640]
    {
      unknown tmp[568647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568649 'move' tmp[568647](427109 call isTrue privatized[150669]))
      (568654 'move' tmp[568639](568651 '_paramFoldLogical' tmp[568640] tmp[568647]))
    }
    {
      (568659 'move' tmp[568639](568656 '_paramFoldLogical' tmp[568640] 0))
    }
    unknown call_tmp[669569] "expr temp" "maybe param" "maybe type" "temp"
    (669572 'move' call_tmp[669569](150711 call _cond_test tmp[568639]))
    if call_tmp[669569]
    {
      unknown call_tmp[669576] "expr temp" "maybe param" "maybe type" "temp"
      (669579 'move' call_tmp[669576](150703 call pid _mt[243] arr[150663]))
      (150708 call _freePrivatizedClass call_tmp[669576] arr[150663])
    }
    (150717 call chpl__delete arr[150663])
    (520302 return _void[55])
  }
  function chpl_assignDomainWithGetSetIndices[150729](arg lhs[150726]:_any[178](?), arg rhs[150732]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    unknown arrType[150751] "dead at end of block" "insert auto destroy" "type variable"(150750 call(150746 call (partial) getBaseArrType _mt[243] lhs[150726]))
    (543523 'move' arrType[150751](543522 call(543519 call (partial) getBaseArrType _mt[243] lhs[150726])))
    unknown call_tmp[669587] "maybe param" "maybe type" "temp"
    (669590 'move' call_tmp[669587](150756 call rank _mt[243] lhs[150726]))
    unknown rank[150759] "dead at end of block" "param"
    (543525 'init var' rank[150759] call_tmp[669587])
    (150762 'end of statement')
    unknown idxType[150767] "dead at end of block" "insert auto destroy" "type variable"(150764 call idxType _mt[243] lhs[150726])
    (543531 'move' idxType[150767](543528 call idxType _mt[243] lhs[150726]))
    unknown call_tmp[669598] "maybe param" "maybe type" "temp"
    (669601 'move' call_tmp[669598](150771 call stridable _mt[243] lhs[150726]))
    unknown stridable[150774] "dead at end of block" "param"
    (543533 'init var' stridable[150774] call_tmp[669598])
    (150777 'end of statement')
    {
      unknown _indexOfInterest[150977] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150978] "expr temp" "temp"
      unknown call_tmp[669605] "expr temp" "maybe param" "maybe type" "temp"
      (669608 'move' call_tmp[669605](150780 call _arrs _mt[243] lhs[150726]))
      (150987 'move' _iterator[150978](150985 call _getIterator call_tmp[669605]))
      Defer
      {
        {
          (151004 call _freeIterator _iterator[150978])
        }
      }
      { scopeless type
        (150993 'move' _indexOfInterest[150977](150990 call iteratorIndex _iterator[150978]))
      }
      ForLoop[150979]
      {
        unknown e[150997] "index var" "insert auto destroy"
        (481597 'end of statement')
        (150999 'move' e[150997] _indexOfInterest[150977])
        (481598 'end of statement' e[150997])
        {
          const tmp[150968] "const" "temp"
          unknown call_tmp[669610] "expr temp" "maybe param" "maybe type" "temp"
          (669613 'move' call_tmp[669610](150965 '_wide_get_locale' e[150997]))
          (150970 'move' tmp[150968](150966 'deref' call_tmp[669610]))
          (935139 call on_fn[935135] tmp[150968])
          function on_fn[935135](const in arg dummy_locale_arg[935137]:chpl_localeID_t[209294]) : void[4] "on"
          {
            {
              unknown call_tmp[669615] "expr temp" "maybe param" "maybe type" "temp"
              (669618 'move' call_tmp[669615](150786 'to nilable class from type' arrType[150751]))
              unknown call_tmp[669620] "maybe param" "maybe type" "temp"
              (669623 'move' call_tmp[669620](150787 call _cast call_tmp[669615] e[150997]))
              unknown eCastQ[150789] "dead at end of block" "insert auto destroy"
              (543535 'init var' eCastQ[150789] call_tmp[669620])
              (150792 'end of statement')
              unknown call_tmp[669625] "expr temp" "maybe param" "maybe type" "temp"
              (669628 'move' call_tmp[669625](150796 call == eCastQ[150789] nil[44]))
              unknown call_tmp[669630] "expr temp" "maybe param" "maybe type" "temp"
              (669633 'move' call_tmp[669630](150844 call _cond_test call_tmp[669625]))
              if call_tmp[669630]
              {
                unknown call_tmp[669635] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                (669638 'move' call_tmp[669635](461786 'typeof' lhs[150726]))
                unknown call_tmp[669640] "expr temp" "maybe param" "maybe type" "temp"
                (669643 'move' call_tmp[669640](150819 call _cast string[26] call_tmp[669635]))
                unknown call_tmp[669645] "expr temp" "maybe param" "maybe type" "temp"
                (669648 'move' call_tmp[669645](150840 call _cast string[26] arrType[150751]))
                (150842 call halt "internal error: " call_tmp[669640] " contains an bad array type " call_tmp[669645])
                (481602 'end of statement' arrType[150751])
              }
              unknown call_tmp[669650] "maybe param" "maybe type" "temp"
              (669653 'move' call_tmp[669650](150850 call postfix! eCastQ[150789]))
              unknown eCast[150852] "dead at end of block" "insert auto destroy"
              (543537 'init var' eCast[150852] call_tmp[669650])
              (150855 'end of statement')
              unknown call_tmp[669657] "maybe param" "maybe type" "temp"
              (669660 'move' call_tmp[669657](150861 call(150857 call (partial) getIndices _mt[243] rhs[150732])))
              unknown inds[150862] "dead at end of block" "insert auto destroy"
              (543539 'init var' inds[150862] call_tmp[669657])
              (150865 'end of statement')
              unknown tmp[150878] "dead at end of block" "insert auto destroy"
              unknown call_tmp[669662] "expr temp" "maybe param" "maybe type" "temp"
              (669665 'move' call_tmp[669662](150875 call range[64316](?) idxType[150767] bounded[64205] stridable[150774]))
              unknown call_tmp[669667] "expr temp" "maybe param" "maybe type" "temp"
              (669670 'move' call_tmp[669667](150876 call * rank[150759] call_tmp[669662]))
              (543541 'default init var' tmp[150878] call_tmp[669667])
              (150881 'end of statement' arrType[150751] e[150997] eCastQ[150789] idxType[150767])
              {
                unknown i[150920] "dead at end of block" "insert auto destroy"
                (543543 'init var' i[150920] 0)
                (481606 'end of statement')
                unknown tmp[150921] "maybe param" "temp"
                unknown call_tmp[669672] "expr temp" "maybe param" "maybe type" "temp"
                (669675 'move' call_tmp[669672](150885 call - rank[150759] 1))
                (150933 'move' tmp[150921](150931 call chpl_compute_low_param_loop_bound 0 call_tmp[669672]))
                unknown tmp[150922] "maybe param" "temp"
                unknown call_tmp[669677] "expr temp" "maybe param" "maybe type" "temp"
                (669680 'move' call_tmp[669677](150938 call - rank[150759] 1))
                (150943 'move' tmp[150922](150941 call chpl_compute_high_param_loop_bound 0 call_tmp[669677]))
                unknown tmp[150923] "maybe param" "temp"
                (150946 'move' tmp[150923] 1)
                ParamForLoop[150948]
                { i[150920] tmp[150921] tmp[150922] tmp[150923]
                  {
                    unknown call_tmp[669682] "maybe param" "maybe type" "temp"
                    (669685 'move' call_tmp[669682](150892 call inds[150862] i[150920]))
                    unknown from[150893] "dead at end of block" "insert auto destroy"
                    (543545 'init var' from[150893] call_tmp[669682])
                    (150896 'end of statement' inds[150862] i[150920])
                    unknown call_tmp[669687] "expr temp" "maybe param" "maybe type" "temp"
                    (669690 'move' call_tmp[669687](150901 call tmp[150878] i[150920]))
                    unknown call_tmp[669694] "expr temp" "maybe param" "maybe type" "temp"
                    (669697 'move' call_tmp[669694](150914 call range[64316](?) idxType[150767] bounded[64205] stridable[150774]))
                    unknown call_tmp[669699] "expr temp" "maybe param" "maybe type" "temp"
                    (669702 'move' call_tmp[669699](150916 call(150903 call (partial) safeCast _mt[243] from[150893]) call_tmp[669694]))
                    (150917 call = call_tmp[669687] call_tmp[669699])
                    (481609 'end of statement' tmp[150878] i[150920] from[150893] idxType[150767])
                  }
                }
                label _unused_continueLabel[150925]
                label _breakLabel[150924]
              }
              (150963 call(150958 call (partial) dsiReallocate _mt[243] eCast[150852]) tmp[150878])
              (481614 'end of statement' eCast[150852] tmp[150878])
            }
            (935142 return _void[55])
          }
          {
          }
        }
        label _continueLabel[150982]
        _indexOfInterest[150977]
        _iterator[150978]
      }
      label _breakLabel[150983]
    }
    unknown call_tmp[669710] "expr temp" "maybe param" "maybe type" "temp"
    (669713 'move' call_tmp[669710](151020 call(151016 call (partial) getIndices _mt[243] rhs[150732])))
    (151022 call(151012 call (partial) dsiSetIndices _mt[243] lhs[150726]) call_tmp[669710])
    (481617 'end of statement')
    {
      unknown _indexOfInterest[151065] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151066] "expr temp" "temp"
      unknown call_tmp[669717] "expr temp" "maybe param" "maybe type" "temp"
      (669720 'move' call_tmp[669717](151026 call _arrs _mt[243] lhs[150726]))
      (151075 'move' _iterator[151066](151073 call _getIterator call_tmp[669717]))
      Defer
      {
        {
          (151092 call _freeIterator _iterator[151066])
        }
      }
      { scopeless type
        (151081 'move' _indexOfInterest[151065](151078 call iteratorIndex _iterator[151066]))
      }
      ForLoop[151067]
      {
        unknown e[151085] "index var" "insert auto destroy"
        (481619 'end of statement')
        (151087 'move' e[151085] _indexOfInterest[151065])
        (481620 'end of statement' e[151085])
        {
          unknown call_tmp[669722] "expr temp" "maybe param" "maybe type" "temp"
          (669725 'move' call_tmp[669722](151031 'to nilable class from type' arrType[150751]))
          unknown call_tmp[669727] "maybe param" "maybe type" "temp"
          (669730 'move' call_tmp[669727](151032 call _cast call_tmp[669722] e[151085]))
          unknown eCastQ[151034] "dead at end of block" "insert auto destroy"
          (543547 'init var' eCastQ[151034] call_tmp[669727])
          (151037 'end of statement')
          unknown call_tmp[669732] "maybe param" "maybe type" "temp"
          (669735 'move' call_tmp[669732](151040 call postfix! eCastQ[151034]))
          unknown eCast[151042] "dead at end of block" "insert auto destroy"
          (543549 'init var' eCast[151042] call_tmp[669732])
          (151045 'end of statement' arrType[150751] e[151085] eCastQ[151034])
          const tmp[151057] "const" "temp"
          unknown call_tmp[669737] "expr temp" "maybe param" "maybe type" "temp"
          (669740 'move' call_tmp[669737](151054 '_wide_get_locale' e[151085]))
          (151059 'move' tmp[151057](151055 'deref' call_tmp[669737]))
          (935148 call on_fn[935144] tmp[151057])
          function on_fn[935144](const in arg dummy_locale_arg[935146]:chpl_localeID_t[209294]) : void[4] "on"
          {
            (151052 call(151048 call (partial) dsiPostReallocate _mt[243] eCast[151042]))
            (481625 'end of statement' eCast[151042])
            (935151 return _void[55])
          }
          {
          }
        }
        label _continueLabel[151070]
        _indexOfInterest[151065]
        _iterator[151066]
      }
      label _breakLabel[151071]
    }
    unknown call_tmp[669746] "expr temp" "maybe param" "maybe type" "temp"
    (669749 'move' call_tmp[669746](151104 call(151100 call (partial) dsiSupportsPrivatization _mt[243] lhs[150726])))
    unknown call_tmp[669751] "expr temp" "maybe param" "maybe type" "temp"
    (669754 'move' call_tmp[669751](151111 call _cond_test call_tmp[669746]))
    if call_tmp[669751]
    {
      (151108 call _reprivatize lhs[150726])
    }
    (520304 return _void[55])
  }
  where {
    unknown call_tmp[669756] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669759 'move' call_tmp[669756](461788 'typeof' lhs[150726]))
    unknown call_tmp[669761] "expr temp" "maybe param" "maybe type" "temp"
    (669764 'move' call_tmp[669761](150739 call _to_borrowed call_tmp[669756]))
    (354243 'is_subtype' BaseRectangularDom[382155](?) call_tmp[669761])
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151125](arg lhs[151122]:_any[178](?), arg rhs[151128]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151181] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151182] "expr temp" "temp"
      unknown call_tmp[669768] "expr temp" "maybe param" "maybe type" "temp"
      (669771 'move' call_tmp[669768](151157 call(151153 call (partial) dsiIndsIterSafeForRemoving _mt[243] lhs[151122])))
      (151191 'move' _iterator[151182](151189 call _getIterator call_tmp[669768]))
      Defer
      {
        {
          (151208 call _freeIterator _iterator[151182])
        }
      }
      { scopeless type
        (151197 'move' _indexOfInterest[151181](151194 call iteratorIndex _iterator[151182]))
      }
      ForLoop[151183]
      {
        unknown i[151201] "index var" "insert auto destroy"
        (481629 'end of statement')
        (151203 'move' i[151201] _indexOfInterest[151181])
        (481630 'end of statement' i[151201])
        {
          unknown call_tmp[669775] "expr temp" "maybe param" "maybe type" "temp"
          (669778 'move' call_tmp[669775](151164 call(151159 call (partial) contains _mt[243] rhs[151128]) i[151201]))
          unknown call_tmp[669780] "expr temp" "maybe param" "maybe type" "temp"
          (669783 'move' call_tmp[669780](151165 call ! call_tmp[669775]))
          unknown call_tmp[669785] "expr temp" "maybe param" "maybe type" "temp"
          (669788 'move' call_tmp[669785](151176 call _cond_test call_tmp[669780]))
          if call_tmp[669785]
          {
            (151173 call(151168 call (partial) dsiRemove _mt[243] lhs[151122]) i[151201])
            (481632 'end of statement' i[151201])
          }
        }
        label _continueLabel[151186]
        _indexOfInterest[151181]
        _iterator[151182]
      }
      label _breakLabel[151187]
    }
    {
      unknown _indexOfInterest[151241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151242] "expr temp" "temp"
      (151251 'move' _iterator[151242](151249 call _getIterator rhs[151128]))
      Defer
      {
        {
          (151267 call _freeIterator _iterator[151242])
        }
      }
      { scopeless type
        (151256 'move' _indexOfInterest[151241](151253 call iteratorIndex _iterator[151242]))
      }
      ForLoop[151243]
      {
        unknown i[151260] "index var" "insert auto destroy"
        (481635 'end of statement')
        (151262 'move' i[151260] _indexOfInterest[151241])
        (481636 'end of statement' i[151260])
        {
          unknown call_tmp[669794] "expr temp" "maybe param" "maybe type" "temp"
          (669797 'move' call_tmp[669794](151224 call(151219 call (partial) dsiMember _mt[243] lhs[151122]) i[151260]))
          unknown call_tmp[669799] "expr temp" "maybe param" "maybe type" "temp"
          (669802 'move' call_tmp[669799](151225 call ! call_tmp[669794]))
          unknown call_tmp[669804] "expr temp" "maybe param" "maybe type" "temp"
          (669807 'move' call_tmp[669804](151236 call _cond_test call_tmp[669799]))
          if call_tmp[669804]
          {
            (151233 call(151228 call (partial) dsiAdd _mt[243] lhs[151122]) i[151260])
            (481638 'end of statement' i[151260])
          }
        }
        label _continueLabel[151246]
        _indexOfInterest[151241]
        _iterator[151242]
      }
      label _breakLabel[151247]
    }
    (520306 return _void[55])
  }
  where {
    unknown tmp[427126] "maybe param" "temp"
    unknown call_tmp[669811] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669814 'move' call_tmp[669811](461790 'typeof' lhs[151122]))
    unknown call_tmp[669816] "expr temp" "maybe param" "maybe type" "temp"
    (669819 'move' call_tmp[669816](151135 call _to_borrowed call_tmp[669811]))
    (427137 'move' tmp[427126](354244 'is_subtype' BaseSparseDom[382165](?) call_tmp[669816]))
    unknown call_tmp[669821] "expr temp" "maybe param" "maybe type" "temp"
    (669824 'move' call_tmp[669821](427139 call _cond_invalid tmp[427126]))
    if call_tmp[669821]
    {
      (427142 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568667] "maybe param" "temp"
    unknown call_tmp[669826] "expr temp" "maybe param" "maybe type" "temp"
    (669829 'move' call_tmp[669826](427127 call isTrue tmp[427126]))
    (568672 'move' tmp[568667](568670 call _cond_test call_tmp[669826]))
    if tmp[568667]
    {
      (568677 'move' tmp[568666](568674 '_paramFoldLogical' tmp[568667] 1))
    }
    {
      unknown tmp[568679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[669831] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (669834 'move' call_tmp[669831](461792 'typeof' lhs[151122]))
      unknown call_tmp[669836] "expr temp" "maybe param" "maybe type" "temp"
      (669839 'move' call_tmp[669836](151143 call _to_borrowed call_tmp[669831]))
      unknown call_tmp[669841] "expr temp" "maybe param" "maybe type" "temp"
      (669844 'move' call_tmp[669841](354245 'is_subtype' BaseAssociativeDom[382160](?) call_tmp[669836]))
      (568681 'move' tmp[568679](427131 call isTrue call_tmp[669841]))
      (568686 'move' tmp[568666](568683 '_paramFoldLogical' tmp[568667] tmp[568679]))
    }
    (748243 call chpl_statementLevelSymbol tmp[568666])
  }
  (355038 'used modules list'(145418 'use' ChapelArray[113672])(145420 'use' ChapelRange[64180])(145423 'use' ChapelLocks[187256])(145426 'use' ChapelHashtable[200393]))
}