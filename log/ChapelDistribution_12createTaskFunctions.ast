AST dump for ChapelDistribution after pass createTaskFunctions.
Module use list: ChapelArray ChapelRange ChapelLocks ChapelHashtable Sort 

{
  function chpl__init_ChapelDistribution[416027]() : void[4] "insert line file info" "module init"
  {
    (520445 return _void[55])
  }
  function BaseDist[145968].deinit[145498](arg _mt[145972]:_MT[238], arg this[145970]:BaseDist[145968]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519721 return _void[55])
  }
  function BaseDist[145968].remove[145505](arg _mt[145976]:_MT[238], arg this[145974]:BaseDist[145968]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519725] "RVV" "temp"
    unknown free_dist[145511] "dead at end of block" "insert auto destroy"
    (543572 'init var' free_dist[145511] 0)
    (145514 'end of statement')
    unknown call_tmp[667456] "expr temp" "maybe param" "maybe type" "temp"
    (667459 'move' call_tmp[667456](145518 call(385415 call (partial) dsiTrackDomains _mt[243] this[145974])))
    unknown call_tmp[667461] "expr temp" "maybe param" "maybe type" "temp"
    (667464 'move' call_tmp[667461](145591 call _cond_test call_tmp[667456]))
    if call_tmp[667461]
    {
      const tmp[145576] "const" "temp"
      unknown call_tmp[667466] "expr temp" "maybe param" "maybe type" "temp"
      (667469 'move' call_tmp[667466](145573 '_wide_get_locale' this[145974]))
      (145578 'move' tmp[145576](145574 'deref' call_tmp[667466]))
      (935217 call on_fn[935213] tmp[145576])
      function on_fn[935213](const in arg dummy_locale_arg[935215]:chpl_localeID_t[209352]) : void[4] "on"
      {
        {
          unknown call_tmp[667471] "maybe param" "maybe type" "temp"
          (667474 'move' call_tmp[667471](145521 call - 1))
          unknown dom_count[145523] "dead at end of block" "insert auto destroy"
          (543574 'init var' dom_count[145523] call_tmp[667471])
          (145526 'end of statement')
          {
            {
              unknown call_tmp[667478] "expr temp" "maybe param" "maybe type" "temp"
              (667481 'move' call_tmp[667478](360492 call _domsLock _mt[243] this[145974]))
              (145533 call(145529 call (partial) lock _mt[243] call_tmp[667478]))
              (481371 'end of statement')
              unknown call_tmp[667487] "expr temp" "maybe param" "maybe type" "temp"
              (667490 'move' call_tmp[667487](385423 call _free_when_no_doms _mt[243] this[145974]))
              (145538 call = call_tmp[667487] 1)
              (481372 'end of statement')
              unknown call_tmp[667494] "expr temp" "maybe param" "maybe type" "temp"
              (667497 'move' call_tmp[667494](360497 call _doms _mt[243] this[145974]))
              unknown call_tmp[667501] "expr temp" "maybe param" "maybe type" "temp"
              (667504 'move' call_tmp[667501](145543 call size _mt[243] call_tmp[667494]))
              (145546 call = dom_count[145523] call_tmp[667501])
              (481373 'end of statement' dom_count[145523])
              unknown call_tmp[667508] "expr temp" "maybe param" "maybe type" "temp"
              (667511 'move' call_tmp[667508](360502 call _domsLock _mt[243] this[145974]))
              (145554 call(145550 call (partial) unlock _mt[243] call_tmp[667508]))
            }
            (145558 'local block')
          }
          unknown call_tmp[667515] "expr temp" "maybe param" "maybe type" "temp"
          (667518 'move' call_tmp[667515](145561 call == dom_count[145523] 0))
          unknown call_tmp[667520] "expr temp" "maybe param" "maybe type" "temp"
          (667523 'move' call_tmp[667520](145568 call _cond_test call_tmp[667515]))
          if call_tmp[667520]
          {
            (145565 call = free_dist[145511] 1)
            (481376 'end of statement' free_dist[145511])
          }
        }
        (935220 return _void[55])
      }
      {
      }
    }
    {
      (145587 call = free_dist[145511] 1)
      (481378 'end of statement' free_dist[145511])
    }
    unknown call_tmp[667525] "expr temp" "maybe param" "maybe type" "temp"
    (667528 'move' call_tmp[667525](145605 call _cond_test free_dist[145511]))
    if call_tmp[667525]
    {
      unknown call_tmp[667530] "expr temp" "maybe param" "maybe type" "temp"
      (667533 'move' call_tmp[667530](145599 call _to_unmanaged this[145974]))
      (519731 'move' ret[519725](519730 'coerce' call_tmp[667530] unmanaged BaseDist?[415502]))
      gotoReturn _end_remove[519723] _end_remove[519723]
    }
    {
      (519737 'move' ret[519725](519736 'coerce' nil[44] unmanaged BaseDist?[415502]))
      gotoReturn _end_remove[519723] _end_remove[519723]
    }
    label _end_remove[519723]
    (519727 return ret[519725])
  }
  { scopeless type
    unmanaged BaseDist?[415502]
  }
  function BaseDist[145968].remove_dom[145621](arg _mt[145980]:_MT[238], arg this[145978]:BaseDist[145968], arg x[145618]:unmanaged BaseDom[415448]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519743] "RVV" "temp"
    unknown call_tmp[667535] "maybe param" "maybe type" "temp"
    (667538 'move' call_tmp[667535](145625 call - 1))
    unknown count[145627] "dead at end of block" "insert auto destroy"
    (543576 'init var' count[145627] call_tmp[667535])
    (145630 'end of statement')
    const tmp[145696] "const" "temp"
    unknown call_tmp[667540] "expr temp" "maybe param" "maybe type" "temp"
    (667543 'move' call_tmp[667540](145693 '_wide_get_locale' this[145978]))
    (145698 'move' tmp[145696](145694 'deref' call_tmp[667540]))
    (935226 call on_fn[935222] tmp[145696])
    function on_fn[935222](const in arg dummy_locale_arg[935224]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[667545] "maybe param" "maybe type" "temp"
        (667548 'move' call_tmp[667545](145634 call - 1))
        unknown cnt[145636] "dead at end of block" "insert auto destroy"
        (543578 'init var' cnt[145636] call_tmp[667545])
        (145639 'end of statement')
        {
          {
            unknown call_tmp[667552] "expr temp" "maybe param" "maybe type" "temp"
            (667555 'move' call_tmp[667552](360507 call _domsLock _mt[243] this[145978]))
            (145646 call(145642 call (partial) lock _mt[243] call_tmp[667552]))
            (481382 'end of statement')
            unknown call_tmp[667561] "expr temp" "maybe param" "maybe type" "temp"
            (667564 'move' call_tmp[667561](360512 call _doms _mt[243] this[145978]))
            (145655 call(145650 call (partial) remove _mt[243] call_tmp[667561]) x[145618])
            (481383 'end of statement')
            unknown call_tmp[667570] "expr temp" "maybe param" "maybe type" "temp"
            (667573 'move' call_tmp[667570](360517 call _doms _mt[243] this[145978]))
            unknown call_tmp[667577] "expr temp" "maybe param" "maybe type" "temp"
            (667580 'move' call_tmp[667577](145659 call size _mt[243] call_tmp[667570]))
            (145662 call = cnt[145636] call_tmp[667577])
            (481384 'end of statement' cnt[145636])
            unknown call_tmp[667584] "expr temp" "maybe param" "maybe type" "temp"
            (667587 'move' call_tmp[667584](385438 call _free_when_no_doms _mt[243] this[145978]))
            unknown call_tmp[667589] "expr temp" "maybe param" "maybe type" "temp"
            (667592 'move' call_tmp[667589](145666 call ! call_tmp[667584]))
            unknown call_tmp[667594] "expr temp" "maybe param" "maybe type" "temp"
            (667597 'move' call_tmp[667594](145673 call _cond_test call_tmp[667589]))
            if call_tmp[667594]
            {
              (145670 call += cnt[145636] 1)
              (481386 'end of statement' cnt[145636])
            }
            unknown call_tmp[667601] "expr temp" "maybe param" "maybe type" "temp"
            (667604 'move' call_tmp[667601](360522 call _domsLock _mt[243] this[145978]))
            (145683 call(145679 call (partial) unlock _mt[243] call_tmp[667601]))
          }
          (145687 'local block')
        }
        (145690 call = count[145627] cnt[145636])
        (481389 'end of statement' count[145627] cnt[145636])
      }
      (935229 return _void[55])
    }
    {
    }
    unknown call_tmp[667608] "expr temp" "maybe param" "maybe type" "temp"
    (667611 'move' call_tmp[667608](145706 call == count[145627] 0))
    (519749 'move' ret[519743](519748 'coerce' call_tmp[667608] bool[10]))
    gotoReturn _end_remove_dom[519741] _end_remove_dom[519741]
    (481392 'end of statement' count[145627])
    label _end_remove_dom[519741]
    (519745 return ret[519743])
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145968].add_dom[145720](arg _mt[145984]:_MT[238], arg this[145982]:BaseDist[145968], arg x[145717]:unmanaged BaseDom[415448]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[145749] "const" "temp"
    unknown call_tmp[667613] "expr temp" "maybe param" "maybe type" "temp"
    (667616 'move' call_tmp[667613](145746 '_wide_get_locale' this[145982]))
    (145751 'move' tmp[145749](145747 'deref' call_tmp[667613]))
    (935235 call on_fn[935231] tmp[145749])
    function on_fn[935231](const in arg dummy_locale_arg[935233]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[667620] "expr temp" "maybe param" "maybe type" "temp"
        (667623 'move' call_tmp[667620](360527 call _domsLock _mt[243] this[145982]))
        (145728 call(145724 call (partial) lock _mt[243] call_tmp[667620]))
        (481394 'end of statement')
        unknown call_tmp[667629] "expr temp" "maybe param" "maybe type" "temp"
        (667632 'move' call_tmp[667629](360532 call _doms _mt[243] this[145982]))
        (145737 call(145732 call (partial) add _mt[243] call_tmp[667629]) x[145717])
        (481395 'end of statement')
        unknown call_tmp[667638] "expr temp" "maybe param" "maybe type" "temp"
        (667641 'move' call_tmp[667638](360537 call _domsLock _mt[243] this[145982]))
        (145744 call(145740 call (partial) unlock _mt[243] call_tmp[667638]))
      }
      (935238 return _void[55])
    }
    {
    }
    (519753 return _void[55])
  }
  function BaseDist[145968].dsiNewRectangularDom[145766](arg _mt[145988]:_MT[238], arg this[145986]:BaseDist[145968], param arg rank[145763]:int(64)[13], arg idxType[145768]:_any[178](?), param arg stridable[145771]:bool[10], arg inds[145774]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145795 call compilerError "rectangular domains not supported by this distribution")
    (519755 return _void[55])
  }
  function BaseDist[145968].dsiNewAssociativeDom[145804](arg _mt[145992]:_MT[238], arg this[145990]:BaseDist[145968], arg idxType[145802]:_any[178](?), param arg parSafe[145807]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145829 call compilerError "associative domains not supported by this distribution")
    (519757 return _void[55])
  }
  function BaseDist[145968].dsiNewSparseDom[145840](arg _mt[145996]:_MT[238], arg this[145994]:BaseDist[145968], param arg rank[145837]:int(64)[13], arg idxType[145842]:_any[178](?), arg dom[145845]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145867 call compilerError "sparse domains not supported by this distribution")
    (519759 return _void[55])
  }
  function BaseDist[145968].dsiSupportsPrivatization[145874](arg _mt[146000]:_MT[238], arg this[145998]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519763] "RVV" "param" "temp"
    (519768 'move' ret[519763](519767 'deref' 0))
    (519765 return ret[519763])
  }
  function BaseDist[145968].dsiRequiresPrivatization[145884](arg _mt[146004]:_MT[238], arg this[146002]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519772] "RVV" "param" "temp"
    (519777 'move' ret[519772](519776 'deref' 0))
    (519774 return ret[519772])
  }
  function BaseDist[145968].dsiDestroyDist[145894](arg _mt[146008]:_MT[238], arg this[146006]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519779 return _void[55])
  }
  function BaseDist[145968].dsiDisplayRepresentation[145901](arg _mt[146012]:_MT[238], arg this[146010]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145922 call writeln "<no way to display representation>")
    (519781 return _void[55])
  }
  function BaseDist[145968].trackDomains[145929](arg _mt[146016]:_MT[238], arg this[146014]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519785] "RVV" "param" "temp"
    (519790 'move' ret[519785](519789 'deref' 1))
    (519787 return ret[519785])
  }
  function BaseDist[145968].dsiTrackDomains[145939](arg _mt[146020]:_MT[238], arg this[146018]:BaseDist[145968]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519794] "RVV" "temp"
    (519799 'move' ret[519794](519798 'deref' 1))
    (519796 return ret[519794])
  }
  function BaseDist[145968].singleton[145949](arg _mt[146024]:_MT[238], arg this[146022]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519803] "RVV" "param" "temp"
    (519808 'move' ret[519803](519807 'deref' 0))
    (519805 return ret[519803])
  }
  function BaseDist[145968].dsiIsLayout[145959](arg _mt[146028]:_MT[238], arg this[146026]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519812] "RVV" "param" "temp"
    (519817 'move' ret[519812](519816 'deref' 0))
    (519814 return ret[519812])
  }
  function BaseDist[145968].init[786850](arg _mt[786852]:_MT[238], arg this[786853]:BaseDist[145968], in arg _doms[786864] :
  (786867 call chpl__simpleSet[204962](?) unmanaged BaseDom[415448]) =
  _typeDefaultT[250], in arg _domsLock[786879]:chpl_LocalSpinlock[187432] =
  _typeDefaultT[250], in arg _free_when_no_doms[786892]:bool[10] =
  _typeDefaultT[250], in arg pid[786905]:int(64)[13] :
  int(64)[13] =
  nullPid[113718]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[786922] "temporary of super field" "temp"
    (786924 'move' super_tmp[786922](786921 '.v' this[786853] c"super"))
    (786863 call(786861 call (partial) init _mt[243] super_tmp[786922]))
    (786957 'end of statement')
    unknown tmp[786927] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[786962] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[786974] "expr temp" "maybe param" "maybe type" "temp"
      (786977 'move' call_tmp[786974](786929 '.v' this[786853] c"super"))
      (786966 'move' call_type_tmp[786962](786932 'typeof' call_tmp[786974]))
    }
    (786933 'move' tmp[786927] call_type_tmp[786962])
    unknown call_tmp[786979] "maybe param" "maybe type" "temp"
    (786982 'move' call_tmp[786979](786938 'cast' tmp[786927] this[786853]))
    unknown chpl__thisAsParent[786935] "dead at end of block" "insert auto destroy" "temp"
    (786970 'init var' chpl__thisAsParent[786935] call_tmp[786979] tmp[786927])
    (786941 'setcid' chpl__thisAsParent[786935])
    (786943 'init field' this[786853] c"_doms" _doms[786864])
    (786958 'end of statement')
    (786946 'init field' this[786853] c"_domsLock" _domsLock[786879])
    (786949 'init field' this[786853] c"_free_when_no_doms" _free_when_no_doms[786892])
    (786959 'end of statement')
    (786952 'init field' this[786853] c"pid" pid[786905])
    (786960 'end of statement')
    (786955 'setcid' this[786853])
    (786968 return _void[55])
  }
  function BaseDist[145968].super[801262](arg _mt[801264]:_MT[238], arg this[801266]:BaseDist[145968]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801276] "RVV" "temp"
    unknown call_tmp[801283] "expr temp" "maybe param" "maybe type" "temp"
    (801286 'move' call_tmp[801283](801270 '.v' this[801266] c"super"))
    (801281 'move' ret[801276](801280 'deref' call_tmp[801283]))
    (801278 return ret[801276])
  }
  function BaseDist[145968]._doms[801288](arg _mt[801290]:_MT[238], arg this[801292]:BaseDist[145968]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801302] "RVV" "temp"
    unknown call_tmp[801309] "expr temp" "maybe param" "maybe type" "temp"
    (801312 'move' call_tmp[801309](801296 '.' this[801292] c"_doms"))
    (801307 'move' ret[801302](801306 'addr of' call_tmp[801309]))
    (801304 return ret[801302])
  }
  function BaseDist[145968]._domsLock[801314](arg _mt[801316]:_MT[238], arg this[801318]:BaseDist[145968]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801328] "RVV" "temp"
    unknown call_tmp[801335] "expr temp" "maybe param" "maybe type" "temp"
    (801338 'move' call_tmp[801335](801322 '.' this[801318] c"_domsLock"))
    (801333 'move' ret[801328](801332 'addr of' call_tmp[801335]))
    (801330 return ret[801328])
  }
  function BaseDist[145968]._free_when_no_doms[801340](arg _mt[801342]:_MT[238], arg this[801344]:BaseDist[145968]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801354] "RVV" "temp"
    unknown call_tmp[801361] "expr temp" "maybe param" "maybe type" "temp"
    (801364 'move' call_tmp[801361](801348 '.' this[801344] c"_free_when_no_doms"))
    (801359 'move' ret[801354](801358 'addr of' call_tmp[801361]))
    (801356 return ret[801354])
  }
  function BaseDist[145968].pid[801366](arg _mt[801368]:_MT[238], arg this[801370]:BaseDist[145968]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801380] "RVV" "temp"
    unknown call_tmp[801387] "expr temp" "maybe param" "maybe type" "temp"
    (801390 'move' call_tmp[801387](801374 '.' this[801370] c"pid"))
    (801385 'move' ret[801380](801384 'addr of' call_tmp[801387]))
    (801382 return ret[801380])
  }
  function BaseDist[145968].writeThis[801392](arg _mt[801396]:_MT[238], arg this[801394]:BaseDist[145968], arg f[801395]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801401 call writeThisDefaultImpl f[801395] this[801394])
    (801406 return _void[55])
  }
  function BaseDist[145968].readThis[801408](arg _mt[801412]:_MT[238], arg this[801410]:BaseDist[145968], arg f[801411]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801416 call readThisDefaultImpl f[801411] this[801410])
    (801422 return _void[55])
  }
  type BaseDist[145968] val super[355695]:object[22] "super class" unknown _doms[145476](145475 call chpl__simpleSet[204962](?) unmanaged BaseDom[415448]) val _domsLock[145481]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_doms[145486]:bool[10] bool[10] val pid[145492]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDist[415511]
  type unmanaged BaseDist?[415502]
  type BaseDist?[415499](?)
  type BaseDist[382381](?)
  function BaseDom[146767].init[146064](arg _mt[146771]:_MT[238], arg this[146769]:BaseDom[146767]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461730] "temporary of super field" "temp"
    (461738 'move' super_tmp[461730](461731 '.v' this[146769] c"super"))
    (461734 call init _mt[243] super_tmp[461730])
    (481407 'end of statement')
    unknown tmp[461665] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492361] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[667645] "expr temp" "maybe param" "maybe type" "temp"
      (667648 'move' call_tmp[667645](461667 '.v' this[146769] c"super"))
      (492365 'move' call_type_tmp[492361](461670 'typeof' call_tmp[667645]))
    }
    (461671 'move' tmp[461665] call_type_tmp[492361])
    unknown call_tmp[667650] "maybe param" "maybe type" "temp"
    (667653 'move' call_tmp[667650](461676 'cast' tmp[461665] this[146769]))
    unknown chpl__thisAsParent[461673] "dead at end of block" "insert auto destroy" "temp"
    (543580 'init var' chpl__thisAsParent[461673] call_tmp[667650] tmp[461665])
    (461679 'setcid' chpl__thisAsParent[461673])
    (481408 'end of statement')
    unknown tmp[461682] "temp"
    unknown call_tmp[667655] "expr temp" "maybe param" "maybe type" "temp"
    (667658 'move' call_tmp[667655](461685 call chpl__simpleSet[204962](?) unmanaged BaseArr[415496]))
    (461687 'default init var' tmp[461682] call_tmp[667655])
    (461689 '.=' this[146769] c"_arrs" tmp[461682])
    (481409 'end of statement')
    val tmp[461693]:int(64)[13] "temp"
    (461696 'default init var' tmp[461693] int(64)[13])
    (461698 '.=' this[146769] c"_arrs_containing_dom" tmp[461693])
    (481410 'end of statement')
    val tmp[461702]:chpl_LocalSpinlock[187432] "temp"
    (461705 'default init var' tmp[461702] chpl_LocalSpinlock[187432])
    (461707 '.=' this[146769] c"_arrsLock" tmp[461702])
    (481411 'end of statement')
    val tmp[461711]:bool[10] "temp"
    (461714 'default init var' tmp[461711] bool[10])
    (461716 '.=' this[146769] c"_free_when_no_arrs" tmp[461711])
    (481412 'end of statement')
    unknown tmp[461721] "temp"
    (461724 'init var' tmp[461721] nullPid[113718] int(64)[13])
    (461726 'init field' this[146769] c"pid" tmp[461721])
    (481413 'end of statement')
    (461741 'setcid' this[146769])
    (519819 return _void[55])
  }
  function BaseDom[146767].deinit[146071](arg _mt[146775]:_MT[238], arg this[146773]:BaseDom[146767]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519821 return _void[55])
  }
  function BaseDom[146767].dsiMyDist[146078](arg _mt[146779]:_MT[238], arg this[146777]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519825] "RVV" "temp"
    (146101 call halt "internal error: dsiMyDist is not implemented")
    (481415 'end of statement')
    unknown ret[146106] "dead at end of block" "insert auto destroy" "unsafe"
    (543582 'default init var' ret[146106] unmanaged BaseDist[415511])
    (146109 'end of statement')
    (519831 'move' ret[519825](519830 'coerce' ret[146106] unmanaged BaseDist[415511]))
    gotoReturn _end_dsiMyDist[519823] _end_dsiMyDist[519823]
    (481416 'end of statement' ret[146106])
    label _end_dsiMyDist[519823]
    (519827 return ret[519825])
  }
  { scopeless type
    unmanaged BaseDist[415511]
  }
  function BaseDom[146767].remove[146118](arg _mt[146783]:_MT[238], arg this[146781]:BaseDom[146767]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519837] "RVV" "temp"
    unknown call_tmp[667662] "expr temp" "maybe param" "maybe type" "temp"
    (667665 'move' call_tmp[667662](146132 call(385461 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown call_tmp[667669] "expr temp" "maybe param" "maybe type" "temp"
    (667672 'move' call_tmp[667669](146139 call(146135 call (partial) dsiTrackDomains _mt[243] call_tmp[667662])))
    unknown call_tmp[667676] "expr temp" "maybe param" "maybe type" "temp"
    (667679 'move' call_tmp[667676](146142 call(385467 call (partial) dsiLinksDistribution _mt[243] this[146781])))
    unknown call_tmp[667681] "expr temp" "maybe param" "maybe type" "temp"
    (667684 'move' call_tmp[667681](146143 call == call_tmp[667669] call_tmp[667676]))
    (146146 call assert call_tmp[667681])
    (481418 'end of statement')
    unknown ret_dom[146153] "dead at end of block" "insert auto destroy"
    (543584 'init var' ret_dom[146153] nil[44] unmanaged BaseDom?[415508])
    (146156 'end of statement')
    unknown ret_dist[146161] "dead at end of block" "insert auto destroy"
    (543586 'init var' ret_dist[146161] nil[44] unmanaged BaseDist?[415502])
    (146164 'end of statement')
    unknown call_tmp[667688] "maybe param" "maybe type" "temp"
    (667691 'move' call_tmp[667688](146167 call(385473 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown dist[146168] "dead at end of block" "insert auto destroy"
    (543588 'init var' dist[146168] call_tmp[667688])
    (146171 'end of statement')
    unknown free_dom[146173] "dead at end of block" "insert auto destroy"
    (543590 'init var' free_dom[146173] 0)
    (146176 'end of statement')
    unknown remove_dist[146178] "dead at end of block" "insert auto destroy"
    (543592 'init var' remove_dist[146178] 0)
    (146181 'end of statement')
    const tmp[146266] "const" "temp"
    unknown call_tmp[667693] "expr temp" "maybe param" "maybe type" "temp"
    (667696 'move' call_tmp[667693](146263 '_wide_get_locale' this[146781]))
    (146268 'move' tmp[146266](146264 'deref' call_tmp[667693]))
    (935244 call on_fn[935240] tmp[146266])
    function on_fn[935240](const in arg dummy_locale_arg[935242]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown arr_count[146184] "dead at end of block" "insert auto destroy"
        (543594 'init var' arr_count[146184] 0)
        (146187 'end of statement')
        {
          {
            unknown call_tmp[667700] "expr temp" "maybe param" "maybe type" "temp"
            (667703 'move' call_tmp[667700](360544 call _arrsLock _mt[243] this[146781]))
            (146194 call(146190 call (partial) lock _mt[243] call_tmp[667700]))
            (481419 'end of statement')
            unknown call_tmp[667709] "expr temp" "maybe param" "maybe type" "temp"
            (667712 'move' call_tmp[667709](360549 call _arrs _mt[243] this[146781]))
            unknown call_tmp[667716] "expr temp" "maybe param" "maybe type" "temp"
            (667719 'move' call_tmp[667716](146199 call size _mt[243] call_tmp[667709]))
            (146202 call = arr_count[146184] call_tmp[667716])
            (481420 'end of statement' arr_count[146184])
            unknown call_tmp[667723] "expr temp" "maybe param" "maybe type" "temp"
            (667726 'move' call_tmp[667723](385483 call _arrs_containing_dom _mt[243] this[146781]))
            (146207 call += arr_count[146184] call_tmp[667723])
            (481422 'end of statement' arr_count[146184])
            unknown call_tmp[667730] "expr temp" "maybe param" "maybe type" "temp"
            (667733 'move' call_tmp[667730](385488 call _free_when_no_arrs _mt[243] this[146781]))
            (146212 call = call_tmp[667730] 1)
            (481424 'end of statement')
            unknown call_tmp[667737] "expr temp" "maybe param" "maybe type" "temp"
            (667740 'move' call_tmp[667737](360554 call _arrsLock _mt[243] this[146781]))
            (146220 call(146216 call (partial) unlock _mt[243] call_tmp[667737]))
          }
          (146224 'local block')
        }
        unknown call_tmp[667744] "expr temp" "maybe param" "maybe type" "temp"
        (667747 'move' call_tmp[667744](146227 call == arr_count[146184] 0))
        unknown call_tmp[667749] "expr temp" "maybe param" "maybe type" "temp"
        (667752 'move' call_tmp[667749](146259 call _cond_test call_tmp[667744]))
        if call_tmp[667749]
        {
          (146231 call = free_dom[146173] 1)
          (481426 'end of statement' free_dom[146173])
          unknown call_tmp[667756] "expr temp" "maybe param" "maybe type" "temp"
          (667759 'move' call_tmp[667756](146237 call(385494 call (partial) dsiLinksDistribution _mt[243] this[146781])))
          unknown call_tmp[667761] "expr temp" "maybe param" "maybe type" "temp"
          (667764 'move' call_tmp[667761](146255 call _cond_test call_tmp[667756]))
          if call_tmp[667761]
          {
            unknown call_tmp[667768] "expr temp" "maybe param" "maybe type" "temp"
            (667771 'move' call_tmp[667768](146248 call _to_unmanaged this[146781]))
            unknown call_tmp[667773] "expr temp" "maybe param" "maybe type" "temp"
            (667776 'move' call_tmp[667773](146250 call(146242 call (partial) remove_dom _mt[243] dist[146168]) call_tmp[667768]))
            (146251 call = remove_dist[146178] call_tmp[667773])
            (481428 'end of statement' remove_dist[146178] dist[146168])
          }
        }
      }
      (935247 return _void[55])
    }
    {
    }
    unknown call_tmp[667778] "expr temp" "maybe param" "maybe type" "temp"
    (667781 'move' call_tmp[667778](146283 call _cond_test free_dom[146173]))
    if call_tmp[667778]
    {
      unknown call_tmp[667783] "expr temp" "maybe param" "maybe type" "temp"
      (667786 'move' call_tmp[667783](146279 call _to_unmanaged this[146781]))
      (146280 call = ret_dom[146153] call_tmp[667783])
      (481431 'end of statement' ret_dom[146153])
    }
    unknown call_tmp[667788] "expr temp" "maybe param" "maybe type" "temp"
    (667791 'move' call_tmp[667788](146294 call _cond_test remove_dist[146178]))
    if call_tmp[667788]
    {
      (146291 call = ret_dist[146161] dist[146168])
      (481433 'end of statement' ret_dist[146161] dist[146168])
    }
    unknown call_tmp[667793] "expr temp" "maybe param" "maybe type" "temp"
    (667796 'move' call_tmp[667793](146302 call _build_tuple ret_dom[146153] ret_dist[146161]))
    unknown call_tmp[667798] "expr temp" "maybe param" "maybe type" "temp"
    (667801 'move' call_tmp[667798](519842 call _build_tuple unmanaged BaseDom?[415508] unmanaged BaseDist?[415502]))
    (519846 'move' ret[519837](519845 'coerce' call_tmp[667793] call_tmp[667798]))
    gotoReturn _end_remove[519835] _end_remove[519835]
    (481436 'end of statement' ret_dom[146153] ret_dist[146161])
    label _end_remove[519835]
    (519839 return ret[519837])
  }
  { scopeless type
    (146127 call _build_tuple unmanaged BaseDom?[415508] unmanaged BaseDist?[415502])
  }
  function BaseDom[146767].remove_arr[146316](arg _mt[146787]:_MT[238], arg this[146785]:BaseDom[146767], arg x[146313]:unmanaged BaseArr[415496], param arg rmFromList[146319] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519852] "RVV" "temp"
    unknown call_tmp[667803] "maybe param" "maybe type" "temp"
    (667806 'move' call_tmp[667803](146324 call - 1))
    unknown count[146326] "dead at end of block" "insert auto destroy"
    (543596 'init var' count[146326] call_tmp[667803])
    (146329 'end of statement')
    const tmp[146412] "const" "temp"
    unknown call_tmp[667808] "expr temp" "maybe param" "maybe type" "temp"
    (667811 'move' call_tmp[667808](146409 '_wide_get_locale' this[146785]))
    (146414 'move' tmp[146412](146410 'deref' call_tmp[667808]))
    (935253 call on_fn[935249] tmp[146412])
    function on_fn[935249](const in arg dummy_locale_arg[935251]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[667813] "maybe param" "maybe type" "temp"
        (667816 'move' call_tmp[667813](146333 call - 1))
        unknown cnt[146335] "dead at end of block" "insert auto destroy"
        (543598 'init var' cnt[146335] call_tmp[667813])
        (146338 'end of statement')
        {
          {
            unknown call_tmp[667820] "expr temp" "maybe param" "maybe type" "temp"
            (667823 'move' call_tmp[667820](360560 call _arrsLock _mt[243] this[146785]))
            (146345 call(146341 call (partial) lock _mt[243] call_tmp[667820]))
            (481439 'end of statement')
            unknown call_tmp[667827] "expr temp" "maybe param" "maybe type" "temp"
            (667830 'move' call_tmp[667827](146362 call _cond_test rmFromList[146319]))
            if call_tmp[667827]
            {
              unknown call_tmp[667834] "expr temp" "maybe param" "maybe type" "temp"
              (667837 'move' call_tmp[667834](360565 call _arrs _mt[243] this[146785]))
              (146355 call(146350 call (partial) remove _mt[243] call_tmp[667834]) x[146313])
            }
            {
              unknown call_tmp[667843] "expr temp" "maybe param" "maybe type" "temp"
              (667846 'move' call_tmp[667843](385513 call _arrs_containing_dom _mt[243] this[146785]))
              (146359 call -= call_tmp[667843] 1)
            }
            unknown call_tmp[667850] "expr temp" "maybe param" "maybe type" "temp"
            (667853 'move' call_tmp[667850](360570 call _arrs _mt[243] this[146785]))
            unknown call_tmp[667857] "expr temp" "maybe param" "maybe type" "temp"
            (667860 'move' call_tmp[667857](146370 call size _mt[243] call_tmp[667850]))
            (146373 call = cnt[146335] call_tmp[667857])
            (481442 'end of statement' cnt[146335])
            unknown call_tmp[667864] "expr temp" "maybe param" "maybe type" "temp"
            (667867 'move' call_tmp[667864](385520 call _arrs_containing_dom _mt[243] this[146785]))
            (146378 call += cnt[146335] call_tmp[667864])
            (481444 'end of statement' cnt[146335])
            unknown call_tmp[667871] "expr temp" "maybe param" "maybe type" "temp"
            (667874 'move' call_tmp[667871](385525 call _free_when_no_arrs _mt[243] this[146785]))
            unknown call_tmp[667876] "expr temp" "maybe param" "maybe type" "temp"
            (667879 'move' call_tmp[667876](146382 call ! call_tmp[667871]))
            unknown call_tmp[667881] "expr temp" "maybe param" "maybe type" "temp"
            (667884 'move' call_tmp[667881](146389 call _cond_test call_tmp[667876]))
            if call_tmp[667881]
            {
              (146386 call += cnt[146335] 1)
              (481446 'end of statement' cnt[146335])
            }
            unknown call_tmp[667888] "expr temp" "maybe param" "maybe type" "temp"
            (667891 'move' call_tmp[667888](360575 call _arrsLock _mt[243] this[146785]))
            (146399 call(146395 call (partial) unlock _mt[243] call_tmp[667888]))
          }
          (146403 'local block')
        }
        (146406 call = count[146326] cnt[146335])
        (481449 'end of statement' count[146326] cnt[146335])
      }
      (935256 return _void[55])
    }
    {
    }
    unknown call_tmp[667895] "expr temp" "maybe param" "maybe type" "temp"
    (667898 'move' call_tmp[667895](146422 call == count[146326] 0))
    (519858 'move' ret[519852](519857 'coerce' call_tmp[667895] bool[10]))
    gotoReturn _end_remove_arr[519850] _end_remove_arr[519850]
    (481452 'end of statement' count[146326])
    label _end_remove_arr[519850]
    (519854 return ret[519852])
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146767].add_arr[146436](arg _mt[146791]:_MT[238], arg this[146789]:BaseDom[146767], arg x[146433]:unmanaged BaseArr[415496], param arg locking[146439] :
  1 =
  1, param arg addToList[146443] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146497] "const" "temp"
    unknown call_tmp[667900] "expr temp" "maybe param" "maybe type" "temp"
    (667903 'move' call_tmp[667900](146494 '_wide_get_locale' this[146789]))
    (146499 'move' tmp[146497](146495 'deref' call_tmp[667900]))
    (935262 call on_fn[935258] tmp[146497])
    function on_fn[935258](const in arg dummy_locale_arg[935260]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[667905] "expr temp" "maybe param" "maybe type" "temp"
        (667908 'move' call_tmp[667905](146455 call _cond_test locking[146439]))
        if call_tmp[667905]
        {
          unknown call_tmp[667912] "expr temp" "maybe param" "maybe type" "temp"
          (667915 'move' call_tmp[667912](360580 call _arrsLock _mt[243] this[146789]))
          (146453 call(146449 call (partial) lock _mt[243] call_tmp[667912]))
        }
        unknown call_tmp[667919] "expr temp" "maybe param" "maybe type" "temp"
        (667922 'move' call_tmp[667919](146475 call _cond_test addToList[146443]))
        if call_tmp[667919]
        {
          unknown call_tmp[667926] "expr temp" "maybe param" "maybe type" "temp"
          (667929 'move' call_tmp[667926](360585 call _arrs _mt[243] this[146789]))
          (146468 call(146463 call (partial) add _mt[243] call_tmp[667926]) x[146433])
        }
        {
          unknown call_tmp[667935] "expr temp" "maybe param" "maybe type" "temp"
          (667938 'move' call_tmp[667935](385539 call _arrs_containing_dom _mt[243] this[146789]))
          (146472 call += call_tmp[667935] 1)
        }
        unknown call_tmp[667940] "expr temp" "maybe param" "maybe type" "temp"
        (667943 'move' call_tmp[667940](146489 call _cond_test locking[146439]))
        if call_tmp[667940]
        {
          unknown call_tmp[667947] "expr temp" "maybe param" "maybe type" "temp"
          (667950 'move' call_tmp[667947](360590 call _arrsLock _mt[243] this[146789]))
          (146487 call(146483 call (partial) unlock _mt[243] call_tmp[667947]))
        }
      }
      (935265 return _void[55])
    }
    {
    }
    (519862 return _void[55])
  }
  function BaseDom[146767].remove_containing_arr[146515](arg _mt[146795]:_MT[238], arg this[146793]:BaseDom[146767], arg x[146512]:unmanaged BaseArr[415496]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519866] "RVV" "temp"
    unknown call_tmp[667954] "maybe param" "maybe type" "temp"
    (667957 'move' call_tmp[667954](146518 call - 1))
    unknown count[146520] "dead at end of block" "insert auto destroy"
    (543600 'init var' count[146520] call_tmp[667954])
    (146523 'end of statement')
    const tmp[146587] "const" "temp"
    unknown call_tmp[667959] "expr temp" "maybe param" "maybe type" "temp"
    (667962 'move' call_tmp[667959](146584 '_wide_get_locale' this[146793]))
    (146589 'move' tmp[146587](146585 'deref' call_tmp[667959]))
    (935271 call on_fn[935267] tmp[146587])
    function on_fn[935267](const in arg dummy_locale_arg[935269]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[667964] "maybe param" "maybe type" "temp"
        (667967 'move' call_tmp[667964](146527 call - 1))
        unknown cnt[146529] "dead at end of block" "insert auto destroy"
        (543602 'init var' cnt[146529] call_tmp[667964])
        (146532 'end of statement')
        unknown call_tmp[667971] "expr temp" "maybe param" "maybe type" "temp"
        (667974 'move' call_tmp[667971](360595 call _arrsLock _mt[243] this[146793]))
        (146539 call(146535 call (partial) lock _mt[243] call_tmp[667971]))
        (481458 'end of statement')
        unknown call_tmp[667980] "expr temp" "maybe param" "maybe type" "temp"
        (667983 'move' call_tmp[667980](385547 call _arrs_containing_dom _mt[243] this[146793]))
        (146543 call -= call_tmp[667980] 1)
        (481459 'end of statement')
        unknown call_tmp[667987] "expr temp" "maybe param" "maybe type" "temp"
        (667990 'move' call_tmp[667987](360600 call _arrs _mt[243] this[146793]))
        unknown call_tmp[667994] "expr temp" "maybe param" "maybe type" "temp"
        (667997 'move' call_tmp[667994](146548 call size _mt[243] call_tmp[667987]))
        (146551 call = cnt[146529] call_tmp[667994])
        (481460 'end of statement' cnt[146529])
        unknown call_tmp[668001] "expr temp" "maybe param" "maybe type" "temp"
        (668004 'move' call_tmp[668001](385554 call _arrs_containing_dom _mt[243] this[146793]))
        (146556 call += cnt[146529] call_tmp[668001])
        (481462 'end of statement' cnt[146529])
        unknown call_tmp[668008] "expr temp" "maybe param" "maybe type" "temp"
        (668011 'move' call_tmp[668008](385559 call _free_when_no_arrs _mt[243] this[146793]))
        unknown call_tmp[668013] "expr temp" "maybe param" "maybe type" "temp"
        (668016 'move' call_tmp[668013](146560 call ! call_tmp[668008]))
        unknown call_tmp[668018] "expr temp" "maybe param" "maybe type" "temp"
        (668021 'move' call_tmp[668018](146567 call _cond_test call_tmp[668013]))
        if call_tmp[668018]
        {
          (146564 call += cnt[146529] 1)
          (481464 'end of statement' cnt[146529])
        }
        unknown call_tmp[668025] "expr temp" "maybe param" "maybe type" "temp"
        (668028 'move' call_tmp[668025](360605 call _arrsLock _mt[243] this[146793]))
        (146577 call(146573 call (partial) unlock _mt[243] call_tmp[668025]))
        (481466 'end of statement')
        (146581 call = count[146520] cnt[146529])
        (481467 'end of statement' count[146520] cnt[146529])
      }
      (935274 return _void[55])
    }
    {
    }
    unknown call_tmp[668032] "expr temp" "maybe param" "maybe type" "temp"
    (668035 'move' call_tmp[668032](146597 call == count[146520] 0))
    (519871 'move' ret[519866](519870 'deref' call_tmp[668032]))
    gotoReturn _end_remove_containing_arr[519864] _end_remove_containing_arr[519864]
    (481470 'end of statement' count[146520])
    label _end_remove_containing_arr[519864]
    (519868 return ret[519866])
  }
  function BaseDom[146767].add_containing_arr[146610](arg _mt[146799]:_MT[238], arg this[146797]:BaseDom[146767], arg x[146607]:unmanaged BaseArr[415496]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146636] "const" "temp"
    unknown call_tmp[668037] "expr temp" "maybe param" "maybe type" "temp"
    (668040 'move' call_tmp[668037](146633 '_wide_get_locale' this[146797]))
    (146638 'move' tmp[146636](146634 'deref' call_tmp[668037]))
    (935280 call on_fn[935276] tmp[146636])
    function on_fn[935276](const in arg dummy_locale_arg[935278]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[668044] "expr temp" "maybe param" "maybe type" "temp"
        (668047 'move' call_tmp[668044](360610 call _arrsLock _mt[243] this[146797]))
        (146618 call(146614 call (partial) lock _mt[243] call_tmp[668044]))
        (481472 'end of statement')
        unknown call_tmp[668053] "expr temp" "maybe param" "maybe type" "temp"
        (668056 'move' call_tmp[668053](385570 call _arrs_containing_dom _mt[243] this[146797]))
        (146623 call += call_tmp[668053] 1)
        (481473 'end of statement')
        unknown call_tmp[668060] "expr temp" "maybe param" "maybe type" "temp"
        (668063 'move' call_tmp[668060](360615 call _arrsLock _mt[243] this[146797]))
        (146631 call(146627 call (partial) unlock _mt[243] call_tmp[668060]))
      }
      (935283 return _void[55])
    }
    {
    }
    (519875 return _void[55])
  }
  function BaseDom[146767].dsiSupportsPrivatization[146649](arg _mt[146803]:_MT[238], arg this[146801]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519879] "RVV" "param" "temp"
    (519884 'move' ret[519879](519883 'deref' 0))
    (519881 return ret[519879])
  }
  function BaseDom[146767].dsiRequiresPrivatization[146659](arg _mt[146807]:_MT[238], arg this[146805]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519888] "RVV" "param" "temp"
    (519893 'move' ret[519888](519892 'deref' 0))
    (519890 return ret[519888])
  }
  function BaseDom[146767].linksDistribution[146669](arg _mt[146811]:_MT[238], arg this[146809]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519897] "RVV" "param" "temp"
    (519902 'move' ret[519897](519901 'deref' 1))
    (519899 return ret[519897])
  }
  function BaseDom[146767].dsiLinksDistribution[146679](arg _mt[146815]:_MT[238], arg this[146813]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519906] "RVV" "temp"
    (519911 'move' ret[519906](519910 'deref' 1))
    (519908 return ret[519906])
  }
  function BaseDom[146767].dsiDestroyDom[146689](arg _mt[146819]:_MT[238], arg this[146817]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519913 return _void[55])
  }
  function BaseDom[146767].dsiDisplayRepresentation[146696](arg _mt[146823]:_MT[238], arg this[146821]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146701 call writeln "<no way to display representation>")
    (519915 return _void[55])
  }
  function BaseDom[146767].dsiSupportsAutoLocalAccess[146708](arg _mt[146827]:_MT[238], arg this[146825]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519919] "RVV" "param" "temp"
    (519924 'move' ret[519919](519923 'deref' 0))
    (519921 return ret[519919])
  }
  function BaseDom[415343](?).isDefaultRectangular[146718](arg _mt[146831]:_MT[238], arg this[146829]:BaseDom[415343](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519928] "RVV" "param" "temp"
    (519933 'move' ret[519928](519932 'deref' 0))
    (519930 return ret[519928])
  }
  function BaseDom[146767].isDefaultRectangular[146728](arg _mt[146835]:_MT[238], arg this[146833]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519937] "RVV" "param" "temp"
    (519942 'move' ret[519937](519941 'deref' 0))
    (519939 return ret[519937])
  }
  function BaseDom[146767].isSliceDomainView[146738](arg _mt[146839]:_MT[238], arg this[146837]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519946] "RVV" "param" "temp"
    (519951 'move' ret[519946](519950 'deref' 0))
    (519948 return ret[519946])
  }
  function BaseDom[146767].isRankChangeDomainView[146748](arg _mt[146843]:_MT[238], arg this[146841]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519955] "RVV" "param" "temp"
    (519960 'move' ret[519955](519959 'deref' 0))
    (519957 return ret[519955])
  }
  function BaseDom[146767].isReindexDomainView[146758](arg _mt[146847]:_MT[238], arg this[146845]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519964] "RVV" "param" "temp"
    (519969 'move' ret[519964](519968 'deref' 0))
    (519966 return ret[519964])
  }
  function BaseDom[146767].super[801424](arg _mt[801426]:_MT[238], arg this[801428]:BaseDom[146767]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801438] "RVV" "temp"
    unknown call_tmp[801445] "expr temp" "maybe param" "maybe type" "temp"
    (801448 'move' call_tmp[801445](801432 '.v' this[801428] c"super"))
    (801443 'move' ret[801438](801442 'deref' call_tmp[801445]))
    (801440 return ret[801438])
  }
  function BaseDom[146767]._arrs[801450](arg _mt[801452]:_MT[238], arg this[801454]:BaseDom[146767]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801464] "RVV" "temp"
    unknown call_tmp[801471] "expr temp" "maybe param" "maybe type" "temp"
    (801474 'move' call_tmp[801471](801458 '.' this[801454] c"_arrs"))
    (801469 'move' ret[801464](801468 'addr of' call_tmp[801471]))
    (801466 return ret[801464])
  }
  function BaseDom[146767]._arrs_containing_dom[801476](arg _mt[801478]:_MT[238], arg this[801480]:BaseDom[146767]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801490] "RVV" "temp"
    unknown call_tmp[801497] "expr temp" "maybe param" "maybe type" "temp"
    (801500 'move' call_tmp[801497](801484 '.' this[801480] c"_arrs_containing_dom"))
    (801495 'move' ret[801490](801494 'addr of' call_tmp[801497]))
    (801492 return ret[801490])
  }
  function BaseDom[146767]._arrsLock[801502](arg _mt[801504]:_MT[238], arg this[801506]:BaseDom[146767]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801516] "RVV" "temp"
    unknown call_tmp[801523] "expr temp" "maybe param" "maybe type" "temp"
    (801526 'move' call_tmp[801523](801510 '.' this[801506] c"_arrsLock"))
    (801521 'move' ret[801516](801520 'addr of' call_tmp[801523]))
    (801518 return ret[801516])
  }
  function BaseDom[146767]._free_when_no_arrs[801528](arg _mt[801530]:_MT[238], arg this[801532]:BaseDom[146767]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801542] "RVV" "temp"
    unknown call_tmp[801549] "expr temp" "maybe param" "maybe type" "temp"
    (801552 'move' call_tmp[801549](801536 '.' this[801532] c"_free_when_no_arrs"))
    (801547 'move' ret[801542](801546 'addr of' call_tmp[801549]))
    (801544 return ret[801542])
  }
  function BaseDom[146767].pid[801554](arg _mt[801556]:_MT[238], arg this[801558]:BaseDom[146767]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801568] "RVV" "temp"
    unknown call_tmp[801575] "expr temp" "maybe param" "maybe type" "temp"
    (801578 'move' call_tmp[801575](801562 '.' this[801558] c"pid"))
    (801573 'move' ret[801568](801572 'addr of' call_tmp[801575]))
    (801570 return ret[801568])
  }
  function BaseDom[146767].writeThis[801580](arg _mt[801584]:_MT[238], arg this[801582]:BaseDom[146767], arg f[801583]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801589 call writeThisDefaultImpl f[801583] this[801582])
    (801594 return _void[55])
  }
  function BaseDom[146767].readThis[801596](arg _mt[801600]:_MT[238], arg this[801598]:BaseDom[146767], arg f[801599]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (801604 call readThisDefaultImpl f[801599] this[801598])
    (801610 return _void[55])
  }
  type BaseDom[146767] val super[355699]:object[22] "super class" unknown _arrs[146037](146036 call chpl__simpleSet[204962](?) unmanaged BaseArr[415496]) val _arrs_containing_dom[146042]:int(64)[13] int(64)[13] val _arrsLock[146047]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_arrs[146052]:bool[10] bool[10] val pid[146058]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDom?[415508]
  type BaseDom?[415505](?)
  type unmanaged BaseDom[415448]
  type BaseDom[415343](?)
  type BaseDom[372786](?)
  function BaseRectangularDom[146935](?).getBaseArrType[146868](arg _mt[146939]:_MT[238], arg this[146937]:BaseRectangularDom[146935](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[519973] "RVV" "temp" "type variable"
    unknown call_tmp[668069] "expr temp" "maybe param" "maybe type" "temp"
    (668072 'move' call_tmp[668069](385579 call rank _mt[243] this[146937]))
    unknown call_tmp[668076] "expr temp" "maybe param" "maybe type" "temp"
    (668079 'move' call_tmp[668076](385584 call idxType _mt[243] this[146937]))
    unknown call_tmp[668083] "expr temp" "maybe param" "maybe type" "temp"
    (668086 'move' call_tmp[668083](385589 call stridable _mt[243] this[146937]))
    unknown call_tmp[668088] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (668091 'move' call_tmp[668088](747953 'new' BaseArrOverRectangularDom[385574](?)(rank = call_tmp[668069])(idxType = call_tmp[668076])(stridable = call_tmp[668083])(_chpl_manager = unmanaged[220](?))))
    unknown tmp[146882] "dead at end of block" "insert auto destroy"
    (543604 'init var' tmp[146882] call_tmp[668088])
    (146885 'end of statement')
    unknown call_tmp[668093] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (668096 'move' call_tmp[668093](146888 'typeof' tmp[146882]))
    (519978 'move' ret[519973](519977 'deref' call_tmp[668093]))
    gotoReturn _end_getBaseArrType[519971] _end_getBaseArrType[519971]
    (481486 'end of statement' tmp[146882])
    label _end_getBaseArrType[519971]
    (519975 return ret[519973])
  }
  function BaseRectangularDom[146935](?).deinit[146895](arg _mt[146943]:_MT[238], arg this[146941]:BaseRectangularDom[146935](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519982 return _void[55])
  }
  function BaseRectangularDom[146935](?).dsiAdd[146904](arg _mt[146947]:_MT[238], arg this[146945]:BaseRectangularDom[146935](?), in arg x[146902]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519986] "RVV" "temp"
    (146909 call compilerError "Cannot add indices to a rectangular domain")
    (481488 'end of statement')
    (519991 'move' ret[519986](519990 'deref' 0))
    (519988 return ret[519986])
  }
  function BaseRectangularDom[146935](?).dsiRemove[146921](arg _mt[146951]:_MT[238], arg this[146949]:BaseRectangularDom[146935](?), arg x[146919]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519995] "RVV" "temp"
    (146926 call compilerError "Cannot remove indices from a rectangular domain")
    (481490 'end of statement')
    (520000 'move' ret[519995](519999 'deref' 0))
    (519997 return ret[519995])
  }
  function BaseRectangularDom[146935](?).super[801612](arg _mt[801614]:_MT[238], arg this[801616]:BaseRectangularDom[146935](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801626] "RVV" "temp"
    unknown call_tmp[801633] "expr temp" "maybe param" "maybe type" "temp"
    (801636 'move' call_tmp[801633](801620 '.v' this[801616] c"super"))
    (801631 'move' ret[801626](801630 'deref' call_tmp[801633]))
    (801628 return ret[801626])
  }
  function BaseRectangularDom[801643](?).rank[801638](arg _mt[801640]:_MT[238], arg this[801645]:BaseRectangularDom[801643](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801676] "RVV" "param" "temp"
    unknown borrowOfThis[801647]
    (801668 'end of statement')
    (801649 'move' borrowOfThis[801647](801652 call _cast _borrowedNonNilable[214](?) this[801645]))
    (801669 'end of statement' borrowOfThis[801647])
    unknown call_tmp[801690] "expr temp" "maybe param" "maybe type" "temp"
    (801693 'move' call_tmp[801690](801658 'is bound' borrowOfThis[801647] c"rank"))
    if call_tmp[801690]
    {
      unknown call_tmp[801695] "expr temp" "maybe param" "maybe type" "temp"
      (801698 'move' call_tmp[801695](801657 '.' borrowOfThis[801647] c"rank"))
      (801681 'move' ret[801676](801680 'deref' call_tmp[801695]))
      gotoReturn _end_rank[801674] _end_rank[801674]
      (801671 'end of statement' borrowOfThis[801647])
    }
    {
      (801686 'move' ret[801676](801685 'deref' ?[260]))
      gotoReturn _end_rank[801674] _end_rank[801674]
    }
    label _end_rank[801674]
    (801678 return ret[801676])
  }
  function BaseRectangularDom[801643](?).rank[801700](arg _mt[801702]:_MT[238], arg this[801704]:BaseRectangularDom[801643](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801735] "RVV" "param" "temp"
    unknown borrowOfThis[801706] "type variable"
    (801727 'end of statement')
    (801708 'move' borrowOfThis[801706](801711 call _cast _borrowedNonNilable[214](?) this[801704]))
    (801728 'end of statement' borrowOfThis[801706])
    unknown call_tmp[801749] "expr temp" "maybe param" "maybe type" "temp"
    (801752 'move' call_tmp[801749](801717 'is bound' borrowOfThis[801706] c"rank"))
    if call_tmp[801749]
    {
      unknown call_tmp[801754] "expr temp" "maybe param" "maybe type" "temp"
      (801757 'move' call_tmp[801754](801716 '.' borrowOfThis[801706] c"rank"))
      (801740 'move' ret[801735](801739 'deref' call_tmp[801754]))
      gotoReturn _end_rank[801733] _end_rank[801733]
      (801730 'end of statement' borrowOfThis[801706])
    }
    {
      (801745 'move' ret[801735](801744 'deref' ?[260]))
      gotoReturn _end_rank[801733] _end_rank[801733]
    }
    label _end_rank[801733]
    (801737 return ret[801735])
  }
  function BaseRectangularDom[801643](?).idxType[801759](arg _mt[801761]:_MT[238], arg this[801763]:BaseRectangularDom[801643](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801798] "RVV" "temp" "type variable"
    unknown borrowOfThis[801765]
    (801790 'end of statement')
    (801767 'move' borrowOfThis[801765](801770 call _cast _borrowedNonNilable[214](?) this[801763]))
    (801791 'end of statement' borrowOfThis[801765])
    unknown call_tmp[801812] "expr temp" "maybe param" "maybe type" "temp"
    (801815 'move' call_tmp[801812](801780 'is bound' borrowOfThis[801765] c"idxType"))
    if call_tmp[801812]
    {
      unknown call_tmp[801817] "expr temp" "maybe param" "maybe type" "temp"
      (801820 'move' call_tmp[801817](801775 '.v' borrowOfThis[801765] c"idxType"))
      unknown call_tmp[801822] "expr temp" "maybe param" "maybe type" "temp"
      (801825 'move' call_tmp[801822](801776 call chpl_checkLegalTypeFieldAccessor this[801763] call_tmp[801817] "idxType"))
      (801803 'move' ret[801798](801802 'deref' call_tmp[801822]))
      gotoReturn _end_idxType[801796] _end_idxType[801796]
      (801793 'end of statement' borrowOfThis[801765])
    }
    {
      (801808 'move' ret[801798](801807 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[801796] _end_idxType[801796]
    }
    label _end_idxType[801796]
    (801800 return ret[801798])
  }
  function BaseRectangularDom[801643](?).idxType[801827](arg _mt[801829]:_MT[238], arg this[801831]:BaseRectangularDom[801643](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801866] "RVV" "temp" "type variable"
    unknown borrowOfThis[801833] "type variable"
    (801858 'end of statement')
    (801835 'move' borrowOfThis[801833](801838 call _cast _borrowedNonNilable[214](?) this[801831]))
    (801859 'end of statement' borrowOfThis[801833])
    unknown call_tmp[801880] "expr temp" "maybe param" "maybe type" "temp"
    (801883 'move' call_tmp[801880](801848 'is bound' borrowOfThis[801833] c"idxType"))
    if call_tmp[801880]
    {
      unknown call_tmp[801885] "expr temp" "maybe param" "maybe type" "temp"
      (801888 'move' call_tmp[801885](801843 '.v' borrowOfThis[801833] c"idxType"))
      unknown call_tmp[801890] "expr temp" "maybe param" "maybe type" "temp"
      (801893 'move' call_tmp[801890](801844 call chpl_checkLegalTypeFieldAccessor this[801831] call_tmp[801885] "idxType"))
      (801871 'move' ret[801866](801870 'deref' call_tmp[801890]))
      gotoReturn _end_idxType[801864] _end_idxType[801864]
      (801861 'end of statement' borrowOfThis[801833])
    }
    {
      (801876 'move' ret[801866](801875 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[801864] _end_idxType[801864]
    }
    label _end_idxType[801864]
    (801868 return ret[801866])
  }
  function BaseRectangularDom[801643](?).stridable[801895](arg _mt[801897]:_MT[238], arg this[801899]:BaseRectangularDom[801643](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801930] "RVV" "param" "temp"
    unknown borrowOfThis[801901]
    (801922 'end of statement')
    (801903 'move' borrowOfThis[801901](801906 call _cast _borrowedNonNilable[214](?) this[801899]))
    (801923 'end of statement' borrowOfThis[801901])
    unknown call_tmp[801944] "expr temp" "maybe param" "maybe type" "temp"
    (801947 'move' call_tmp[801944](801912 'is bound' borrowOfThis[801901] c"stridable"))
    if call_tmp[801944]
    {
      unknown call_tmp[801949] "expr temp" "maybe param" "maybe type" "temp"
      (801952 'move' call_tmp[801949](801911 '.' borrowOfThis[801901] c"stridable"))
      (801935 'move' ret[801930](801934 'deref' call_tmp[801949]))
      gotoReturn _end_stridable[801928] _end_stridable[801928]
      (801925 'end of statement' borrowOfThis[801901])
    }
    {
      (801940 'move' ret[801930](801939 'deref' ?[260]))
      gotoReturn _end_stridable[801928] _end_stridable[801928]
    }
    label _end_stridable[801928]
    (801932 return ret[801930])
  }
  function BaseRectangularDom[801643](?).stridable[801954](arg _mt[801956]:_MT[238], arg this[801958]:BaseRectangularDom[801643](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[801989] "RVV" "param" "temp"
    unknown borrowOfThis[801960] "type variable"
    (801981 'end of statement')
    (801962 'move' borrowOfThis[801960](801965 call _cast _borrowedNonNilable[214](?) this[801958]))
    (801982 'end of statement' borrowOfThis[801960])
    unknown call_tmp[802003] "expr temp" "maybe param" "maybe type" "temp"
    (802006 'move' call_tmp[802003](801971 'is bound' borrowOfThis[801960] c"stridable"))
    if call_tmp[802003]
    {
      unknown call_tmp[802008] "expr temp" "maybe param" "maybe type" "temp"
      (802011 'move' call_tmp[802008](801970 '.' borrowOfThis[801960] c"stridable"))
      (801994 'move' ret[801989](801993 'deref' call_tmp[802008]))
      gotoReturn _end_stridable[801987] _end_stridable[801987]
      (801984 'end of statement' borrowOfThis[801960])
    }
    {
      (801999 'move' ret[801989](801998 'deref' ?[260]))
      gotoReturn _end_stridable[801987] _end_stridable[801987]
    }
    label _end_stridable[801987]
    (801991 return ret[801989])
  }
  function BaseRectangularDom[146935](?).init[802013](arg _mt[802015]:_MT[238], arg this[802016]:BaseRectangularDom[146935](?), param arg rank[802027]:int(64)[13], arg idxType[802039]:_any[178](?), param arg stridable[802048]:bool[10]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[802062] "temporary of super field" "temp"
    (802064 'move' super_tmp[802062](802061 '.v' this[802016] c"super"))
    (802026 call(802024 call (partial) init _mt[243] super_tmp[802062]))
    (802100 'end of statement')
    unknown tmp[802067] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[802104] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[802116] "expr temp" "maybe param" "maybe type" "temp"
      (802119 'move' call_tmp[802116](802069 '.v' this[802016] c"super"))
      (802108 'move' call_type_tmp[802104](802072 'typeof' call_tmp[802116]))
    }
    (802073 'move' tmp[802067] call_type_tmp[802104])
    unknown call_tmp[802121] "maybe param" "maybe type" "temp"
    (802124 'move' call_tmp[802121](802078 'cast' tmp[802067] this[802016]))
    unknown chpl__thisAsParent[802075] "dead at end of block" "insert auto destroy" "temp"
    (802112 'init var' chpl__thisAsParent[802075] call_tmp[802121] tmp[802067])
    (802081 'setcid' chpl__thisAsParent[802075])
    unknown call_tmp[802126] "expr temp" "maybe param" "maybe type" "temp"
    (802129 'move' call_tmp[802126](802084 call _cast int(64)[13] rank[802027]))
    (802086 'init field' this[802016] c"rank" call_tmp[802126])
    (802101 'end of statement')
    (802089 'init field' this[802016] c"idxType" idxType[802039])
    unknown call_tmp[802131] "expr temp" "maybe param" "maybe type" "temp"
    (802134 'move' call_tmp[802131](802093 call _cast bool[10] stridable[802048]))
    (802095 'init field' this[802016] c"stridable" call_tmp[802131])
    (802102 'end of statement')
    (802098 'setcid' this[802016])
    (802110 return _void[55])
  }
  function BaseRectangularDom[146935](?).writeThis[802136](arg _mt[802140]:_MT[238], arg this[802138]:BaseRectangularDom[146935](?), arg f[802139]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (802145 call writeThisDefaultImpl f[802139] this[802138])
    (802150 return _void[55])
  }
  function BaseRectangularDom[146935](?).readThis[802152](arg _mt[802156]:_MT[238], arg this[802154]:BaseRectangularDom[146935](?), arg f[802155]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (802160 call readThisDefaultImpl f[802155] this[802154])
    (802166 return _void[55])
  }
  type BaseRectangularDom[146935](?) val super[355701]:BaseDom[146767] "super class" unknown rank[146854] "param" int(64)[13] unknown idxType[146858] "type variable" unknown stridable[146862] "param" bool[10]
  type BaseRectangularDom[801643](?)
  type BaseRectangularDom[382286](?)
  function BaseSparseDomImpl[148004](?).deinit[146970](arg _mt[148008]:_MT[238], arg this[148006]:BaseSparseDomImpl[148004](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520002 return _void[55])
  }
  function BaseSparseDomImpl[148004](?).dsiBulkAdd[146988](arg _mt[148012]:_MT[238], arg this[148010]:BaseSparseDomImpl[148004](?), arg inds[146985]:_array[133594](?), arg dataSorted[146991] :
  0 =
  0, arg isUnique[146995] :
  0 =
  0, arg preserveInds[146999] :
  1 =
  1, arg addOn[147003] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[520006] "RVV" "temp"
    unknown tmp[427132] "maybe param" "temp"
    (427143 'move' tmp[427132](147007 call ! dataSorted[146991]))
    unknown call_tmp[668098] "expr temp" "maybe param" "maybe type" "temp"
    (668101 'move' call_tmp[668098](427145 call _cond_invalid tmp[427132]))
    if call_tmp[668098]
    {
      (427148 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568552] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568553] "maybe param" "temp"
    unknown call_tmp[668103] "expr temp" "maybe param" "maybe type" "temp"
    (668106 'move' call_tmp[668103](427133 call isTrue tmp[427132]))
    (568558 'move' tmp[568553](568556 call _cond_test call_tmp[668103]))
    if tmp[568553]
    {
      unknown tmp[568560] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568562 'move' tmp[568560](427136 call isTrue preserveInds[146999]))
      (568567 'move' tmp[568552](568564 '_paramFoldLogical' tmp[568553] tmp[568560]))
    }
    {
      (568572 'move' tmp[568552](568569 '_paramFoldLogical' tmp[568553] 0))
    }
    unknown call_tmp[668108] "expr temp" "maybe param" "maybe type" "temp"
    (668111 'move' call_tmp[668108](147037 call _cond_test tmp[568552]))
    if call_tmp[668108]
    {
      unknown _inds[147013] "dead at end of block" "insert auto destroy"
      (543606 'init var' _inds[147013] inds[146985])
      (147016 'end of statement')
      unknown call_tmp[668115] "expr temp" "maybe param" "maybe type" "temp"
      (668118 'move' call_tmp[668115](147024 call(385610 call (partial) bulkAdd_help _mt[243] this[148010]) _inds[147013] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520011 'move' ret[520006](520010 'deref' call_tmp[668115]))
      gotoReturn _end_dsiBulkAdd[520004] _end_dsiBulkAdd[520004]
      (481493 'end of statement' _inds[147013])
    }
    {
      unknown call_tmp[668122] "expr temp" "maybe param" "maybe type" "temp"
      (668125 'move' call_tmp[668122](147033 call(385618 call (partial) bulkAdd_help _mt[243] this[148010]) inds[146985] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520016 'move' ret[520006](520015 'deref' call_tmp[668122]))
      gotoReturn _end_dsiBulkAdd[520004] _end_dsiBulkAdd[520004]
    }
    label _end_dsiBulkAdd[520004]
    (520008 return ret[520006])
  }
  where {
    unknown call_tmp[668129] "expr temp" "maybe param" "maybe type" "temp"
    (668132 'move' call_tmp[668129](385595 call rank _mt[243] this[148010]))
    unknown call_tmp[668136] "expr temp" "maybe param" "maybe type" "temp"
    (668139 'move' call_tmp[668136](385600 call idxType _mt[243] this[148010]))
    unknown call_tmp[668141] "expr temp" "maybe param" "maybe type" "temp"
    (668144 'move' call_tmp[668141](146980 call chpl__buildIndexType call_tmp[668129] call_tmp[668136]))
    unknown call_tmp[668148] "expr temp" "maybe param" "maybe type" "temp"
    (668151 'move' call_tmp[668148](461749 call eltType _mt[243] inds[146985]))
    unknown call_tmp[668153] "expr temp" "maybe param" "maybe type" "temp"
    (668156 'move' call_tmp[668153](461753 call == call_tmp[668141] call_tmp[668148]))
    (461747 call & 1 call_tmp[668153])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_help[147059](arg _mt[148016]:_MT[238], arg this[148014]:BaseSparseDomImpl[148004](?), arg inds[147056]:_array[133594](?), arg dataSorted[147062] :
  0 =
  0, arg isUnique[147066] :
  0 =
  0, arg addOn[147070] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520022] "RVV" "temp"
    (147092 call halt "Helper function called on the BaseSparseDomImpl")
    (481496 'end of statement')
    unknown call_tmp[668158] "expr temp" "maybe param" "maybe type" "temp"
    (668161 'move' call_tmp[668158](147096 call - 1))
    (520027 'move' ret[520022](520026 'deref' call_tmp[668158]))
    (520024 return ret[520022])
  }
  where {
    unknown call_tmp[668165] "expr temp" "maybe param" "maybe type" "temp"
    (668168 'move' call_tmp[668165](385627 call rank _mt[243] this[148014]))
    unknown call_tmp[668172] "expr temp" "maybe param" "maybe type" "temp"
    (668175 'move' call_tmp[668172](385632 call idxType _mt[243] this[148014]))
    unknown call_tmp[668177] "expr temp" "maybe param" "maybe type" "temp"
    (668180 'move' call_tmp[668177](147052 call chpl__buildIndexType call_tmp[668165] call_tmp[668172]))
    unknown call_tmp[668184] "expr temp" "maybe param" "maybe type" "temp"
    (668187 'move' call_tmp[668184](461761 call eltType _mt[243] inds[147056]))
    unknown call_tmp[668189] "expr temp" "maybe param" "maybe type" "temp"
    (668192 'move' call_tmp[668189](461765 call == call_tmp[668177] call_tmp[668184]))
    (461759 call & 1 call_tmp[668189])
  }
  function BaseSparseDomImpl[148004](?)._grow[147108](arg _mt[148020]:_MT[238], arg this[148018]:BaseSparseDomImpl[148004](?), arg size[147105]:int(64)[13], arg factor[147111] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668196] "expr temp" "maybe param" "maybe type" "temp"
    (668199 'move' call_tmp[668196](360620 call nnzDom _mt[243] this[148018]))
    unknown call_tmp[668203] "maybe param" "maybe type" "temp"
    (668206 'move' call_tmp[668203](147115 call size _mt[243] call_tmp[668196]))
    const oldNNZDomSize[147118] "dead at end of block" "const" "insert auto destroy"
    (543608 'init var' oldNNZDomSize[147118] call_tmp[668203])
    (147121 'end of statement')
    unknown call_tmp[668208] "expr temp" "maybe param" "maybe type" "temp"
    (668211 'move' call_tmp[668208](147125 call > size[147105] oldNNZDomSize[147118]))
    unknown call_tmp[668213] "expr temp" "maybe param" "maybe type" "temp"
    (668216 'move' call_tmp[668213](147160 call _cond_test call_tmp[668208]))
    if call_tmp[668213]
    {
      const _newNNZDomSize[147142] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[568579] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568580] "maybe param" "temp"
      (568585 'move' tmp[568580](568583 call _cond_test oldNNZDomSize[147118]))
      if tmp[568580]
      {
        unknown tmp[568587] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668218] "expr temp" "maybe param" "maybe type" "temp"
        (668221 'move' call_tmp[668218](147131 call * factor[147111] oldNNZDomSize[147118]))
        unknown call_tmp[668223] "expr temp" "maybe param" "maybe type" "temp"
        (668226 'move' call_tmp[668223](147134 call ceil call_tmp[668218]))
        (568589 'move' tmp[568587](147136 call _cast int(64)[13] call_tmp[668223]))
        (568594 'move' tmp[568579](568591 '_paramFoldLogical' tmp[568580] tmp[568587]))
      }
      {
        (568599 'move' tmp[568579](568596 '_paramFoldLogical' tmp[568580] 1))
      }
      (543610 'init var' _newNNZDomSize[147142] tmp[568579])
      (147145 'end of statement' oldNNZDomSize[147118] oldNNZDomSize[147118])
      unknown call_tmp[668230] "expr temp" "maybe param" "maybe type" "temp"
      (668233 'move' call_tmp[668230](385644 call nnzDom _mt[243] this[148018]))
      unknown call_tmp[668235] "expr temp" "maybe param" "maybe type" "temp"
      (668238 'move' call_tmp[668235](147149 call chpl_build_low_bounded_range 1))
      unknown call_tmp[668240] "expr temp" "maybe param" "maybe type" "temp"
      (668243 'move' call_tmp[668240](147152 call # call_tmp[668235] _newNNZDomSize[147142]))
      unknown call_tmp[668245] "expr temp" "maybe param" "maybe type" "temp"
      (668248 'move' call_tmp[668245](147155 call chpl__buildDomainExpr call_tmp[668240]))
      (147157 call = call_tmp[668230] call_tmp[668245])
      (481500 'end of statement' _newNNZDomSize[147142])
    }
    (520029 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._shrink[147172](arg _mt[148024]:_MT[238], arg this[148022]:BaseSparseDomImpl[148004](?), arg size[147169]:int(64)[13], arg factor[147175] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668250] "expr temp" "maybe param" "maybe type" "temp"
    (668253 'move' call_tmp[668250](147180 call == size[147169] 0))
    unknown call_tmp[668255] "expr temp" "maybe param" "maybe type" "temp"
    (668258 'move' call_tmp[668255](147246 call _cond_test call_tmp[668250]))
    if call_tmp[668255]
    {
      unknown call_tmp[668262] "expr temp" "maybe param" "maybe type" "temp"
      (668265 'move' call_tmp[668262](385652 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668267] "expr temp" "maybe param" "maybe type" "temp"
      (668270 'move' call_tmp[668267](147185 call chpl_build_bounded_range 1 0))
      unknown call_tmp[668272] "expr temp" "maybe param" "maybe type" "temp"
      (668275 'move' call_tmp[668272](147188 call chpl__buildDomainExpr call_tmp[668267]))
      (147190 call = call_tmp[668262] call_tmp[668272])
    }
    {
      unknown call_tmp[668279] "expr temp" "maybe param" "maybe type" "temp"
      (668282 'move' call_tmp[668279](360625 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668286] "expr temp" "maybe param" "maybe type" "temp"
      (668289 'move' call_tmp[668286](147195 call size _mt[243] call_tmp[668279]))
      unknown call_tmp[668291] "expr temp" "maybe param" "maybe type" "temp"
      (668294 'move' call_tmp[668291](147200 call ** factor[147175] 2))
      unknown call_tmp[668296] "expr temp" "maybe param" "maybe type" "temp"
      (668299 'move' call_tmp[668296](147202 call / call_tmp[668286] call_tmp[668291]))
      unknown call_tmp[668301] "maybe param" "maybe type" "temp"
      (668304 'move' call_tmp[668301](147205 call _cast int(64)[13] call_tmp[668296]))
      const shrinkThreshold[147207] "dead at end of block" "const" "insert auto destroy"
      (543612 'init var' shrinkThreshold[147207] call_tmp[668301])
      (147210 'end of statement')
      unknown call_tmp[668306] "expr temp" "maybe param" "maybe type" "temp"
      (668309 'move' call_tmp[668306](147214 call < size[147169] shrinkThreshold[147207]))
      unknown call_tmp[668311] "expr temp" "maybe param" "maybe type" "temp"
      (668314 'move' call_tmp[668311](147242 call _cond_test call_tmp[668306]))
      if call_tmp[668311]
      {
        unknown call_tmp[668318] "expr temp" "maybe param" "maybe type" "temp"
        (668321 'move' call_tmp[668318](360630 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668325] "expr temp" "maybe param" "maybe type" "temp"
        (668328 'move' call_tmp[668325](147217 call size _mt[243] call_tmp[668318]))
        unknown call_tmp[668330] "expr temp" "maybe param" "maybe type" "temp"
        (668333 'move' call_tmp[668330](147221 call / call_tmp[668325] factor[147175]))
        unknown call_tmp[668335] "maybe param" "maybe type" "temp"
        (668338 'move' call_tmp[668335](147224 call _cast int(64)[13] call_tmp[668330]))
        const _newNNZDomSize[147226] "dead at end of block" "const" "insert auto destroy"
        (543614 'init var' _newNNZDomSize[147226] call_tmp[668335])
        (147229 'end of statement')
        unknown call_tmp[668342] "expr temp" "maybe param" "maybe type" "temp"
        (668345 'move' call_tmp[668342](385661 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668347] "expr temp" "maybe param" "maybe type" "temp"
        (668350 'move' call_tmp[668347](147234 call chpl_build_bounded_range 1 _newNNZDomSize[147226]))
        unknown call_tmp[668352] "expr temp" "maybe param" "maybe type" "temp"
        (668355 'move' call_tmp[668352](147237 call chpl__buildDomainExpr call_tmp[668347]))
        (147239 call = call_tmp[668342] call_tmp[668352])
        (481503 'end of statement' _newNNZDomSize[147226])
      }
    }
    (520031 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._bulkGrow[147255](arg _mt[148028]:_MT[238], arg this[148026]:BaseSparseDomImpl[148004](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668359] "maybe param" "maybe type" "temp"
    (668362 'move' call_tmp[668359](147259 call(385668 call (partial) getNNZ _mt[243] this[148026])))
    const nnz[147260] "dead at end of block" "const" "insert auto destroy"
    (543616 'init var' nnz[147260] call_tmp[668359])
    (147263 'end of statement')
    unknown call_tmp[668366] "expr temp" "maybe param" "maybe type" "temp"
    (668369 'move' call_tmp[668366](360635 call nnzDom _mt[243] this[148026]))
    unknown call_tmp[668373] "expr temp" "maybe param" "maybe type" "temp"
    (668376 'move' call_tmp[668373](147267 call size _mt[243] call_tmp[668366]))
    unknown call_tmp[668378] "expr temp" "maybe param" "maybe type" "temp"
    (668381 'move' call_tmp[668378](147270 call > nnz[147260] call_tmp[668373]))
    unknown call_tmp[668383] "expr temp" "maybe param" "maybe type" "temp"
    (668386 'move' call_tmp[668383](147303 call _cond_test call_tmp[668378]))
    if call_tmp[668383]
    {
      unknown call_tmp[668388] "expr temp" "maybe param" "maybe type" "temp"
      (668391 'move' call_tmp[668388](147276 call log2 nnz[147260]))
      unknown call_tmp[668393] "expr temp" "maybe param" "maybe type" "temp"
      (668396 'move' call_tmp[668393](147280 call + call_tmp[668388] 1.0))
      unknown call_tmp[668398] "expr temp" "maybe param" "maybe type" "temp"
      (668401 'move' call_tmp[668398](147283 call exp2 call_tmp[668393]))
      unknown call_tmp[668403] "maybe param" "maybe type" "temp"
      (668406 'move' call_tmp[668403](147285 call _cast int(64)[13] call_tmp[668398]))
      const _newNNZDomSize[147287] "dead at end of block" "const" "insert auto destroy"
      (543618 'init var' _newNNZDomSize[147287] call_tmp[668403])
      (147290 'end of statement' nnz[147260])
      unknown call_tmp[668410] "expr temp" "maybe param" "maybe type" "temp"
      (668413 'move' call_tmp[668410](385675 call nnzDom _mt[243] this[148026]))
      unknown call_tmp[668415] "expr temp" "maybe param" "maybe type" "temp"
      (668418 'move' call_tmp[668415](147295 call chpl_build_bounded_range 1 _newNNZDomSize[147287]))
      unknown call_tmp[668420] "expr temp" "maybe param" "maybe type" "temp"
      (668423 'move' call_tmp[668420](147298 call chpl__buildDomainExpr call_tmp[668415]))
      (147300 call = call_tmp[668410] call_tmp[668420])
      (481506 'end of statement' _newNNZDomSize[147287])
    }
    (520033 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._countDuplicates[147313](arg _mt[148032]:_MT[238], arg this[148030]:BaseSparseDomImpl[148004](?), arg arr[147311]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520037] "RVV" "temp"
    unknown call_tmp[668425] "maybe param" "maybe type" "temp"
    (668428 'move' call_tmp[668425](147320 call - 1))
    unknown dupCount[147322] "dead at end of block" "insert auto destroy"
    (543620 'init var' dupCount[147322] call_tmp[668425])
    (147325 'end of statement')
    unknown call_tmp[668432] "expr temp" "maybe param" "maybe type" "temp"
    (668435 'move' call_tmp[668432](147329 call _dom _mt[243] arr[147311]))
    unknown call_tmp[668439] "expr temp" "maybe param" "maybe type" "temp"
    (668442 'move' call_tmp[668439](147332 call low _mt[243] call_tmp[668432]))
    unknown call_tmp[668444] "maybe param" "maybe type" "temp"
    (668447 'move' call_tmp[668444](147336 call arr[147311] call_tmp[668439]))
    unknown prev[147337] "dead at end of block" "insert auto destroy"
    (543622 'init var' prev[147337] call_tmp[668444])
    (147340 'end of statement')
    {
      unknown _indexOfInterest[147366] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147367] "expr temp" "temp"
      (147376 'move' _iterator[147367](147374 call _getIterator arr[147311]))
      Defer
      {
        {
          (147392 call _freeIterator _iterator[147367])
        }
      }
      { scopeless type
        (147381 'move' _indexOfInterest[147366](147378 call iteratorIndex _iterator[147367]))
      }
      ForLoop[147368]
      {
        unknown a[147385] "index var" "insert auto destroy"
        (481509 'end of statement')
        (147387 'move' a[147385] _indexOfInterest[147366])
        (481510 'end of statement' a[147385])
        {
          unknown call_tmp[668449] "expr temp" "maybe param" "maybe type" "temp"
          (668452 'move' call_tmp[668449](147345 call == a[147385] prev[147337]))
          unknown call_tmp[668454] "expr temp" "maybe param" "maybe type" "temp"
          (668457 'move' call_tmp[668454](147357 call _cond_test call_tmp[668449]))
          if call_tmp[668454]
          {
            (147349 call += dupCount[147322] 1)
            (481512 'end of statement' dupCount[147322])
          }
          {
            (147354 call = prev[147337] a[147385])
            (481514 'end of statement' prev[147337] a[147385])
          }
          {
          }
        }
        label _continueLabel[147371]
        _indexOfInterest[147366]
        _iterator[147367]
      }
      label _breakLabel[147372]
    }
    (520042 'move' ret[520037](520041 'deref' dupCount[147322]))
    gotoReturn _end__countDuplicates[520035] _end__countDuplicates[520035]
    (481517 'end of statement' dupCount[147322])
    label _end__countDuplicates[520035]
    (520039 return ret[520037])
  }
  where {
    (147318 call isArray arr[147311])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_prepareInds[147409](arg _mt[148036]:_MT[238], arg this[148034]:BaseSparseDomImpl[148004](?), arg inds[147407]:_any[178](?), arg dataSorted[147411]:_any[178](?), arg isUnique[147413]:_any[178](?), arg cmp[147415]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668459] "expr temp" "maybe param" "maybe type" "temp"
    (668462 'move' call_tmp[668459](147422 call ! dataSorted[147411]))
    unknown call_tmp[668464] "expr temp" "maybe param" "maybe type" "temp"
    (668467 'move' call_tmp[668464](147431 call _cond_test call_tmp[668459]))
    if call_tmp[668464]
    {
      (147429 call sort inds[147407](comparator = cmp[147415]))
    }
    unknown call_tmp[668469] "expr temp" "maybe param" "maybe type" "temp"
    (668472 'move' call_tmp[668469](147645 call _cond_test 1))
    if call_tmp[668469]
    {
      unknown tmp[427153] "maybe param" "temp"
      (427164 'move' tmp[427153] dataSorted[147411])
      unknown call_tmp[668474] "expr temp" "maybe param" "maybe type" "temp"
      (668477 'move' call_tmp[668474](427166 call _cond_invalid tmp[427153]))
      if call_tmp[668474]
      {
        (427169 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568606] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568607] "maybe param" "temp"
      unknown call_tmp[668479] "expr temp" "maybe param" "maybe type" "temp"
      (668482 'move' call_tmp[668479](427154 call isTrue tmp[427153]))
      (568612 'move' tmp[568607](568610 call _cond_test call_tmp[668479]))
      if tmp[568607]
      {
        unknown tmp[568614] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668484] "expr temp" "maybe param" "maybe type" "temp"
        (668487 'move' call_tmp[668484](147443 call isSorted inds[147407](comparator = cmp[147415])))
        unknown call_tmp[668489] "expr temp" "maybe param" "maybe type" "temp"
        (668492 'move' call_tmp[668489](147444 call ! call_tmp[668484]))
        (568616 'move' tmp[568614](427157 call isTrue call_tmp[668489]))
        (568621 'move' tmp[568606](568618 '_paramFoldLogical' tmp[568607] tmp[568614]))
      }
      {
        (568626 'move' tmp[568606](568623 '_paramFoldLogical' tmp[568607] 0))
      }
      unknown call_tmp[668494] "expr temp" "maybe param" "maybe type" "temp"
      (668497 'move' call_tmp[668494](147471 call _cond_test tmp[568606]))
      if call_tmp[668494]
      {
        (147469 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      unknown call_tmp[668499] "expr temp" "maybe param" "maybe type" "temp"
      (668502 'move' call_tmp[668499](147601 call _cond_test isUnique[147413]))
      if call_tmp[668499]
      {
        unknown call_tmp[668506] "expr temp" "maybe param" "maybe type" "temp"
        (668509 'move' call_tmp[668506](147479 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668513] "maybe param" "maybe type" "temp"
        (668516 'move' call_tmp[668513](147482 call low _mt[243] call_tmp[668506]))
        const indsStart[147485] "dead at end of block" "const" "insert auto destroy"
        (543624 'init var' indsStart[147485] call_tmp[668513])
        (147488 'end of statement')
        unknown call_tmp[668520] "expr temp" "maybe param" "maybe type" "temp"
        (668523 'move' call_tmp[668520](147491 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668527] "maybe param" "maybe type" "temp"
        (668530 'move' call_tmp[668527](147494 call high _mt[243] call_tmp[668520]))
        const indsEnd[147497] "dead at end of block" "const" "insert auto destroy"
        (543626 'init var' indsEnd[147497] call_tmp[668527])
        (147500 'end of statement')
        unknown call_tmp[668532] "maybe param" "maybe type" "temp"
        (668535 'move' call_tmp[668532](147504 call inds[147407] indsStart[147485]))
        unknown lastInd[147505] "dead at end of block" "insert auto destroy"
        (543628 'init var' lastInd[147505] call_tmp[668532])
        (147508 'end of statement' indsStart[147485])
        {
          unknown _indexOfInterest[147560] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147561] "expr temp" "temp"
          unknown call_tmp[668537] "expr temp" "maybe param" "maybe type" "temp"
          (668540 'move' call_tmp[668537](147574 call + indsStart[147485] 1))
          unknown call_tmp[668542] "expr temp" "maybe param" "maybe type" "temp"
          (668545 'move' call_tmp[668542](147578 call chpl_direct_range_iter call_tmp[668537] indsEnd[147497] 1))
          (147570 'move' _iterator[147561](147568 call _getIterator call_tmp[668542]))
          Defer
          {
            {
              (147594 call _freeIterator _iterator[147561])
            }
          }
          { scopeless type
            (147583 'move' _indexOfInterest[147560](147580 call iteratorIndex _iterator[147561]))
          }
          ForLoop[147562]
          {
            unknown i[147587] "index var" "insert auto destroy"
            (481524 'end of statement')
            (147589 'move' i[147587] _indexOfInterest[147560])
            (481525 'end of statement' i[147587])
            {
              unknown call_tmp[668547] "expr temp" "maybe param" "maybe type" "temp"
              (668550 'move' call_tmp[668547](147520 call inds[147407] i[147587]))
              unknown call_tmp[668552] "expr temp" "maybe param" "maybe type" "temp"
              (668555 'move' call_tmp[668552](147522 call == call_tmp[668547] lastInd[147505]))
              unknown call_tmp[668557] "expr temp" "maybe param" "maybe type" "temp"
              (668560 'move' call_tmp[668557](147553 call _cond_test call_tmp[668552]))
              if call_tmp[668557]
              {
                (147543 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                unknown call_tmp[668562] "expr temp" "maybe param" "maybe type" "temp"
                (668565 'move' call_tmp[668562](147549 call inds[147407] i[147587]))
                (147550 call = lastInd[147505] call_tmp[668562])
                (481528 'end of statement' lastInd[147505] i[147587])
              }
            }
            label _continueLabel[147565]
            _indexOfInterest[147560]
            _iterator[147561]
          }
          label _breakLabel[147566]
        }
      }
      {
        unknown _indexOfInterest[147612] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147613] "expr temp" "temp"
        (147622 'move' _iterator[147613](147620 call _getIterator inds[147407]))
        Defer
        {
          {
            (147638 call _freeIterator _iterator[147613])
          }
        }
        { scopeless type
          (147627 'move' _indexOfInterest[147612](147624 call iteratorIndex _iterator[147613]))
        }
        ForLoop[147614]
        {
          unknown i[147631] "index var" "insert auto destroy"
          (481532 'end of statement')
          (147633 'move' i[147631] _indexOfInterest[147612])
          (481533 'end of statement' i[147631])
          (147610 call(385708 call (partial) boundsCheck _mt[243] this[148034]) i[147631])
          (481535 'end of statement' i[147631])
          label _continueLabel[147617]
          _indexOfInterest[147612]
          _iterator[147613]
        }
        label _breakLabel[147618]
      }
    }
    (520046 return _void[55])
    (355174 'used modules list'(147418 'use' Sort[267989]))
  }
  function BaseSparseDomImpl[148004](?).__getActualInsertPts[147655](arg _mt[148040]:_MT[238], arg this[148038]:BaseSparseDomImpl[148004](?), arg d[147653]:_any[178](?), arg inds[147657]:_any[178](?), arg isUnique[147659]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520050] "RVV" "temp"
    unknown indivInsertPts[147671] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668571] "expr temp" "maybe param" "maybe type" "temp"
    (668574 'move' call_tmp[668571](147662 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668576] "expr temp" "maybe param" "maybe type" "temp"
    (668579 'move' call_tmp[668576](147667 call chpl__ensureDomainExpr call_tmp[668571]))
    unknown call_tmp[668581] "expr temp" "maybe param" "maybe type" "temp"
    (668584 'move' call_tmp[668581](147669 call chpl__buildArrayRuntimeType call_tmp[668576] int(64)[13]))
    (543630 'default init var' indivInsertPts[147671] call_tmp[668581])
    (147674 'end of statement')
    unknown actualInsertPts[147686] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668588] "expr temp" "maybe param" "maybe type" "temp"
    (668591 'move' call_tmp[668588](147677 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668593] "expr temp" "maybe param" "maybe type" "temp"
    (668596 'move' call_tmp[668593](147682 call chpl__ensureDomainExpr call_tmp[668588]))
    unknown call_tmp[668598] "expr temp" "maybe param" "maybe type" "temp"
    (668601 'move' call_tmp[668598](147684 call chpl__buildArrayRuntimeType call_tmp[668593] int(64)[13]))
    (543632 'default init var' actualInsertPts[147686] call_tmp[668598])
    (147689 'end of statement')
    unknown call_tmp[668603] "expr temp" "maybe param" "maybe type" "temp"
    (668606 'move' call_tmp[668603](147691 call ! isUnique[147659]))
    unknown call_tmp[668608] "expr temp" "maybe param" "maybe type" "temp"
    (668611 'move' call_tmp[668608](147795 call _cond_test call_tmp[668603]))
    if call_tmp[668608]
    {
      unknown call_tmp[668615] "expr temp" "maybe param" "maybe type" "temp"
      (668618 'move' call_tmp[668615](147695 call _dom _mt[243] inds[147657]))
      unknown call_tmp[668622] "expr temp" "maybe param" "maybe type" "temp"
      (668625 'move' call_tmp[668622](147698 call low _mt[243] call_tmp[668615]))
      unknown call_tmp[668627] "expr temp" "maybe param" "maybe type" "temp"
      (668630 'move' call_tmp[668627](147702 call inds[147657] call_tmp[668622]))
      unknown call_tmp[668632] "maybe param" "maybe type" "temp"
      (668635 'move' call_tmp[668632](147704 call + call_tmp[668627] 1))
      unknown lastInd[147706] "dead at end of block" "insert auto destroy"
      (543634 'init var' lastInd[147706] call_tmp[668632])
      (147709 'end of statement')
      {
        unknown _indexOfInterest[147743] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147744] "expr temp" "temp"
        unknown call_tmp[668637] "expr temp" "maybe param" "maybe type" "temp"
        (668640 'move' call_tmp[668637](147753 call _getIterator inds[147657]))
        unknown call_tmp[668642] "expr temp" "maybe param" "maybe type" "temp"
        (668645 'move' call_tmp[668642](147756 call _getIterator indivInsertPts[147671]))
        (147758 'move' _iterator[147744](147719 call _build_tuple call_tmp[668637] call_tmp[668642]))
        Defer
        {
          {
            (147788 call _freeIterator _iterator[147744])
          }
        }
        { scopeless type
          (147763 'move' _indexOfInterest[147743](147760 call iteratorIndex _iterator[147744]))
        }
        ForLoop[147745]
        {
          (147768 call _check_tuple_var_decl _indexOfInterest[147743] 2)
          (481538 'end of statement')
          unknown i[147774] "index var" "insert auto destroy"
          (481539 'end of statement')
          (147776 'move' i[147774](147772 call _indexOfInterest[147743] 0))
          (481540 'end of statement' i[147774])
          unknown p[147781] "index var" "insert auto destroy"
          (481542 'end of statement')
          (147783 'move' p[147781](147779 call _indexOfInterest[147743] 1))
          (481543 'end of statement' p[147781])
          {
            unknown call_tmp[668647] "expr temp" "maybe param" "maybe type" "temp"
            (668650 'move' call_tmp[668647](147722 call == i[147774] lastInd[147706]))
            unknown call_tmp[668652] "expr temp" "maybe param" "maybe type" "temp"
            (668655 'move' call_tmp[668652](147736 call _cond_test call_tmp[668647]))
            if call_tmp[668652]
            {
              unknown call_tmp[668657] "expr temp" "maybe param" "maybe type" "temp"
              (668660 'move' call_tmp[668657](147726 call - 1))
              (147728 call = p[147781] call_tmp[668657])
              (481545 'end of statement' p[147781])
            }
            {
              (147733 call = lastInd[147706] i[147774])
              (481547 'end of statement' lastInd[147706] i[147774])
            }
          }
          label _continueLabel[147748]
          _indexOfInterest[147743]
          _iterator[147744]
        }
        label _breakLabel[147749]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147863] "index var" "insert auto destroy"
        
        unknown p[147865] "index var" "insert auto destroy"
      iterated expressions:
        inds[147657]
        indivInsertPts[147671]
      shadow variables:
      other variables
        forall body
      {
        unknown tmp[427174] "maybe param" "temp"
        (427185 'move' tmp[427174] isUnique[147659])
        unknown call_tmp[668662] "expr temp" "maybe param" "maybe type" "temp"
        (668665 'move' call_tmp[668662](427187 call _cond_invalid tmp[427174]))
        if call_tmp[668662]
        {
          (427190 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[568633] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568634] "maybe param" "temp"
        unknown call_tmp[668667] "expr temp" "maybe param" "maybe type" "temp"
        (668670 'move' call_tmp[668667](427175 call isTrue tmp[427174]))
        (568639 'move' tmp[568634](568637 call _cond_test call_tmp[668667]))
        if tmp[568634]
        {
          (568644 'move' tmp[568633](568641 '_paramFoldLogical' tmp[568634] 1))
        }
        {
          unknown tmp[568646] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[668672] "expr temp" "maybe param" "maybe type" "temp"
          (668675 'move' call_tmp[668672](147811 call - 1))
          unknown call_tmp[668677] "expr temp" "maybe param" "maybe type" "temp"
          (668680 'move' call_tmp[668677](147813 call != p[147865] call_tmp[668672]))
          (568648 'move' tmp[568646](427179 call isTrue call_tmp[668677]))
          (568653 'move' tmp[568633](568650 '_paramFoldLogical' tmp[568634] tmp[568646]))
        }
        unknown call_tmp[668682] "expr temp" "maybe param" "maybe type" "temp"
        (668685 'move' call_tmp[668682](147857 call _cond_test tmp[568633]))
        if call_tmp[668682]
        {
          unknown call_tmp[668689] "maybe param" "maybe type" "temp"
          (668692 'move' call_tmp[668689](147830 call(147825 call (partial) find _mt[243] d[147653]) i[147863]))
          const tmp[147831] "dead at end of block" "const" "insert auto destroy" "temp"
          (543636 'init var' tmp[147831] call_tmp[668689])
          (147838 call _check_tuple_var_decl tmp[147831] 2)
          (481551 'end of statement')
          unknown call_tmp[668694] "maybe param" "maybe type" "temp"
          (668697 'move' call_tmp[668694](147832 call tmp[147831] 0))
          const found[147817] "dead at end of block" "const" "insert auto destroy"
          (543638 'init var' found[147817] call_tmp[668694])
          unknown call_tmp[668699] "maybe param" "maybe type" "temp"
          (668702 'move' call_tmp[668699](147835 call tmp[147831] 1))
          const insertPt[147819] "dead at end of block" "const" "insert auto destroy"
          (543640 'init var' insertPt[147819] call_tmp[668699])
          (147843 'end of statement')
          unknown tmp[568660] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568661] "maybe param" "temp"
          (568666 'move' tmp[568661](568664 call _cond_test found[147817]))
          if tmp[568661]
          {
            unknown tmp[568668] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (568670 'move' tmp[568668](147848 call - 1))
            (568675 'move' tmp[568660](568672 '_paramFoldLogical' tmp[568661] tmp[568668]))
          }
          {
            (568680 'move' tmp[568660](568677 '_paramFoldLogical' tmp[568661] insertPt[147819]))
          }
          (147854 call = p[147865] tmp[568660])
          (481552 'end of statement' p[147865] found[147817] insertPt[147819])
        }
      }
    }
    unknown actualAddCnt[147870] "dead at end of block" "insert auto destroy"
    (543642 'init var' actualAddCnt[147870] 0)
    (147873 'end of statement')
    {
      unknown _indexOfInterest[147914] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147915] "expr temp" "temp"
      unknown call_tmp[668704] "expr temp" "maybe param" "maybe type" "temp"
      (668707 'move' call_tmp[668704](147924 call _getIterator indivInsertPts[147671]))
      unknown call_tmp[668709] "expr temp" "maybe param" "maybe type" "temp"
      (668712 'move' call_tmp[668709](147927 call _getIterator actualInsertPts[147686]))
      (147929 'move' _iterator[147915](147882 call _build_tuple call_tmp[668704] call_tmp[668709]))
      Defer
      {
        {
          (147959 call _freeIterator _iterator[147915])
        }
      }
      { scopeless type
        (147934 'move' _indexOfInterest[147914](147931 call iteratorIndex _iterator[147915]))
      }
      ForLoop[147916]
      {
        (147939 call _check_tuple_var_decl _indexOfInterest[147914] 2)
        (481557 'end of statement')
        unknown ip[147945] "index var" "insert auto destroy"
        (481558 'end of statement')
        (147947 'move' ip[147945](147943 call _indexOfInterest[147914] 0))
        (481559 'end of statement' ip[147945])
        unknown ap[147952] "index var" "insert auto destroy"
        (481561 'end of statement')
        (147954 'move' ap[147952](147950 call _indexOfInterest[147914] 1))
        (481562 'end of statement' ap[147952])
        {
          unknown call_tmp[668714] "expr temp" "maybe param" "maybe type" "temp"
          (668717 'move' call_tmp[668714](147885 call - 1))
          unknown call_tmp[668719] "expr temp" "maybe param" "maybe type" "temp"
          (668722 'move' call_tmp[668719](147887 call != ip[147945] call_tmp[668714]))
          unknown call_tmp[668724] "expr temp" "maybe param" "maybe type" "temp"
          (668727 'move' call_tmp[668724](147908 call _cond_test call_tmp[668719]))
          if call_tmp[668724]
          {
            unknown call_tmp[668729] "expr temp" "maybe param" "maybe type" "temp"
            (668732 'move' call_tmp[668729](147892 call + ip[147945] actualAddCnt[147870]))
            (147894 call = ap[147952] call_tmp[668729])
            (481564 'end of statement' ap[147952] ip[147945] actualAddCnt[147870])
            (147900 call += actualAddCnt[147870] 1)
            (481568 'end of statement' actualAddCnt[147870])
          }
          {
            (147905 call = ap[147952] ip[147945])
            (481570 'end of statement' ap[147952] ip[147945])
          }
        }
        label _continueLabel[147919]
        _indexOfInterest[147914]
        _iterator[147915]
      }
      label _breakLabel[147920]
    }
    unknown call_tmp[668734] "expr temp" "maybe param" "maybe type" "temp"
    (668737 'move' call_tmp[668734](147969 call _build_tuple actualInsertPts[147686] actualAddCnt[147870]))
    (520055 'move' ret[520050](520054 'deref' call_tmp[668734]))
    gotoReturn _end___getActualInsertPts[520048] _end___getActualInsertPts[520048]
    (481573 'end of statement' actualInsertPts[147686] actualAddCnt[147870])
    label _end___getActualInsertPts[520048]
    (520052 return ret[520050])
  }
  function BaseSparseDomImpl[148004](?).dsiClear[147977](arg _mt[148044]:_MT[238], arg this[148042]:BaseSparseDomImpl[148004](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147998 call halt "not implemented")
    (520059 return _void[55])
  }
  function BaseSparseDomImpl[148004](?).super[802168](arg _mt[802170]:_MT[238], arg this[802172]:BaseSparseDomImpl[148004](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802182] "RVV" "temp"
    unknown call_tmp[802189] "expr temp" "maybe param" "maybe type" "temp"
    (802192 'move' call_tmp[802189](802176 '.v' this[802172] c"super"))
    (802187 'move' ret[802182](802186 'deref' call_tmp[802189]))
    (802184 return ret[802182])
  }
  function BaseSparseDomImpl[148004](?).nnzDom[802194](arg _mt[802196]:_MT[238], arg this[802198]:BaseSparseDomImpl[148004](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802208] "RVV" "temp"
    unknown call_tmp[802215] "expr temp" "maybe param" "maybe type" "temp"
    (802218 'move' call_tmp[802215](802202 '.' this[802198] c"nnzDom"))
    (802213 'move' ret[802208](802212 'addr of' call_tmp[802215]))
    (802210 return ret[802208])
  }
  function BaseSparseDomImpl[148004](?).init[802220](arg _mt[802222]:_MT[238], arg this[802223]:BaseSparseDomImpl[148004](?), param arg rank[802346]:int(64)[13], arg idxType[802349]:_any[178](?), in arg parentDom[802352]:_any[178](?), in arg nnzDom[802355] :
  unknown call_tmp[802419] "expr temp" "maybe param" "maybe type" "temp" =
  unknown call_tmp[802424] "expr temp" "maybe param" "maybe type" "temp") : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[802380] "temporary of super field" "temp"
    (802382 'move' super_tmp[802380](802379 '.v' this[802223] c"super"))
    (802233 call(802231 call (partial) init _mt[243] super_tmp[802380]) rank[802346] idxType[802349] parentDom[802352])
    (802406 'end of statement')
    unknown tmp[802385] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[802409] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[802431] "expr temp" "maybe param" "maybe type" "temp"
      (802434 'move' call_tmp[802431](802387 '.v' this[802223] c"super"))
      (802413 'move' call_type_tmp[802409](802390 'typeof' call_tmp[802431]))
    }
    (802391 'move' tmp[802385] call_type_tmp[802409])
    unknown call_tmp[802436] "maybe param" "maybe type" "temp"
    (802439 'move' call_tmp[802436](802396 'cast' tmp[802385] this[802223]))
    unknown chpl__thisAsParent[802393] "dead at end of block" "insert auto destroy" "temp"
    (802417 'init var' chpl__thisAsParent[802393] call_tmp[802436] tmp[802385])
    (802399 'setcid' chpl__thisAsParent[802393])
    (802401 '.=' this[802223] c"nnzDom" nnzDom[802355])
    (802407 'end of statement')
    (802404 'setcid' this[802223])
    (802415 return _void[55])
  }
  function BaseSparseDomImpl[148004](?).writeThis[802441](arg _mt[802445]:_MT[238], arg this[802443]:BaseSparseDomImpl[148004](?), arg f[802444]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (802450 call writeThisDefaultImpl f[802444] this[802443])
    (802455 return _void[55])
  }
  function BaseSparseDomImpl[148004](?).readThis[802457](arg _mt[802461]:_MT[238], arg this[802459]:BaseSparseDomImpl[148004](?), arg f[802460]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (802465 call readThisDefaultImpl f[802460] this[802459])
    (802471 return _void[55])
  }
  type BaseSparseDomImpl[148004](?) val super[355717]:BaseSparseDom[148708](?) "delay instantiation" "super class" unknown nnzDom[146964](146962 call chpl__buildDomainExpr(146959 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[148231](?).init[148102](arg _mt[148235]:_MT[238], ref arg this[148233]:SparseIndexBuffer[148231](?), arg size[148100]:_any[178](?), param arg rank[148105]:int(64)[13], arg obj[148108]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668739] "expr temp" "maybe param" "maybe type" "temp"
    (668742 'move' call_tmp[668739](461768 call _cast int(64)[13] rank[148105]))
    (461770 'init field' this[148233] c"rank" call_tmp[668739])
    (481577 'end of statement')
    unknown tmp[461773] "temp"
    (461776 'init var' tmp[461773] obj[148108] BaseSparseDom[382296](?))
    (461778 'init field' this[148233] c"obj" tmp[461773])
    (481578 'end of statement')
    unknown tmp[461794] "temp" "type variable"
    unknown tmp[568687] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568688] "maybe param" "temp"
    unknown call_tmp[668744] "expr temp" "maybe param" "maybe type" "temp"
    (668747 'move' call_tmp[668744](461802 '.v' this[148233] c"rank"))
    unknown call_tmp[668749] "expr temp" "maybe param" "maybe type" "temp"
    (668752 'move' call_tmp[668749](461783 call == call_tmp[668744] 1))
    (568693 'move' tmp[568688](568691 call _cond_test call_tmp[668749]))
    if tmp[568688]
    {
      (568698 'move' tmp[568687](568695 '_paramFoldLogical' tmp[568688] int(64)[13]))
    }
    {
      unknown tmp[568700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[668754] "expr temp" "maybe param" "maybe type" "temp"
      (668757 'move' call_tmp[668754](461805 '.v' this[148233] c"rank"))
      (568702 'move' tmp[568700](461790 call * call_tmp[668754] int(64)[13]))
      (568707 'move' tmp[568687](568704 '_paramFoldLogical' tmp[568688] tmp[568700]))
    }
    (461796 'move' tmp[461794] tmp[568687])
    (461798 'init field' this[148233] c"idxType" tmp[461794])
    (481579 'end of statement')
    unknown call_tmp[668759] "expr temp" "maybe param" "maybe type" "temp"
    (668762 'move' call_tmp[668759](148129 call chpl_build_low_bounded_range 0))
    unknown call_tmp[668764] "expr temp" "maybe param" "maybe type" "temp"
    (668767 'move' call_tmp[668764](148132 call # call_tmp[668759] size[148100]))
    unknown call_tmp[668769] "maybe param" "maybe type" "temp"
    (668772 'move' call_tmp[668769](148135 call chpl__buildDomainExpr call_tmp[668764]))
    unknown tmp[461808] "temp"
    (461810 'init var' tmp[461808] call_tmp[668769])
    (461812 '.=' this[148233] c"bufDom" tmp[461808])
    (481580 'end of statement')
    unknown tmp[461817] "temp"
    unknown call_tmp[668774] "expr temp" "maybe param" "maybe type" "temp"
    (668777 'move' call_tmp[668774](461831 '.' this[148233] c"bufDom"))
    unknown call_tmp[668779] "expr temp" "maybe param" "maybe type" "temp"
    (668782 'move' call_tmp[668779](461822 call chpl__ensureDomainExpr call_tmp[668774]))
    unknown call_tmp[668784] "expr temp" "maybe param" "maybe type" "temp"
    (668787 'move' call_tmp[668784](461834 '.v' this[148233] c"idxType"))
    unknown call_tmp[668789] "expr temp" "maybe param" "maybe type" "temp"
    (668792 'move' call_tmp[668789](461820 call chpl__buildArrayRuntimeType call_tmp[668779] call_tmp[668784]))
    (461825 'default init var' tmp[461817] call_tmp[668789])
    (461827 '.=' this[148233] c"buf" tmp[461817])
    (481581 'end of statement')
    unknown tmp[461838] "temp"
    (461840 'init var' tmp[461838] 0)
    (461842 '.=' this[148233] c"cur" tmp[461838])
    (481582 'end of statement')
    (520061 return _void[55])
  }
  function SparseIndexBuffer[148231](?).deinit[148144](arg _mt[148239]:_MT[238], arg this[148237]:SparseIndexBuffer[148231](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148148 call(385759 call (partial) commit _mt[243] this[148237]))
    (520063 return _void[55])
  }
  function SparseIndexBuffer[148231](?).add[148159](arg _mt[148243]:_MT[238], arg this[148241]:SparseIndexBuffer[148231](?), arg idx[148156] :
  (385764 call idxType _mt[243] this[148241])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668802] "expr temp" "maybe param" "maybe type" "temp"
    (668805 'move' call_tmp[668802](385776 call cur _mt[243] this[148241]))
    unknown call_tmp[668807] "expr temp" "maybe param" "maybe type" "temp"
    (668810 'move' call_tmp[668807](148164 call(385769 call (partial) buf _mt[243] this[148241]) call_tmp[668802]))
    (148166 call = call_tmp[668807] idx[148156])
    (481584 'end of statement')
    unknown call_tmp[668814] "expr temp" "maybe param" "maybe type" "temp"
    (668817 'move' call_tmp[668814](385782 call cur _mt[243] this[148241]))
    (148172 call += call_tmp[668814] 1)
    (481585 'end of statement')
    unknown call_tmp[668821] "expr temp" "maybe param" "maybe type" "temp"
    (668824 'move' call_tmp[668821](385787 call cur _mt[243] this[148241]))
    unknown call_tmp[668828] "expr temp" "maybe param" "maybe type" "temp"
    (668831 'move' call_tmp[668828](360651 call buf _mt[243] this[148241]))
    unknown call_tmp[668835] "expr temp" "maybe param" "maybe type" "temp"
    (668838 'move' call_tmp[668835](148177 call size _mt[243] call_tmp[668828]))
    unknown call_tmp[668840] "expr temp" "maybe param" "maybe type" "temp"
    (668843 'move' call_tmp[668840](148180 call == call_tmp[668821] call_tmp[668835]))
    unknown call_tmp[668845] "expr temp" "maybe param" "maybe type" "temp"
    (668848 'move' call_tmp[668845](148186 call _cond_test call_tmp[668840]))
    if call_tmp[668845]
    {
      (148184 call(385791 call (partial) commit _mt[243] this[148241]))
    }
    (520065 return _void[55])
  }
  function SparseIndexBuffer[148231](?).commit[148195](arg _mt[148247]:_MT[238], arg this[148245]:SparseIndexBuffer[148231](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668854] "expr temp" "maybe param" "maybe type" "temp"
    (668857 'move' call_tmp[668854](385796 call cur _mt[243] this[148245]))
    unknown call_tmp[668859] "expr temp" "maybe param" "maybe type" "temp"
    (668862 'move' call_tmp[668859](148199 call >= call_tmp[668854] 1))
    unknown call_tmp[668864] "expr temp" "maybe param" "maybe type" "temp"
    (668867 'move' call_tmp[668864](148217 call _cond_test call_tmp[668859]))
    if call_tmp[668864]
    {
      unknown call_tmp[668871] "expr temp" "maybe param" "maybe type" "temp"
      (668874 'move' call_tmp[668871](360656 call obj _mt[243] this[148245]))
      unknown call_tmp[668882] "expr temp" "maybe param" "maybe type" "temp"
      (668885 'move' call_tmp[668882](385806 call cur _mt[243] this[148245]))
      unknown call_tmp[668887] "expr temp" "maybe param" "maybe type" "temp"
      (668890 'move' call_tmp[668887](148208 call - call_tmp[668882] 1))
      unknown call_tmp[668892] "expr temp" "maybe param" "maybe type" "temp"
      (668895 'move' call_tmp[668892](148210 call chpl_build_high_bounded_range call_tmp[668887]))
      unknown call_tmp[668897] "expr temp" "maybe param" "maybe type" "temp"
      (668900 'move' call_tmp[668897](148213 call(385801 call (partial) buf _mt[243] this[148245]) call_tmp[668892]))
      (148215 call(148202 call (partial) dsiBulkAdd _mt[243] call_tmp[668871]) call_tmp[668897])
    }
    unknown call_tmp[668904] "expr temp" "maybe param" "maybe type" "temp"
    (668907 'move' call_tmp[668904](385811 call cur _mt[243] this[148245]))
    (148225 call = call_tmp[668904] 0)
    (520067 return _void[55])
  }
  function SparseIndexBuffer[148231](?).rank[802473](arg _mt[802475]:_MT[238], arg this[802477]:SparseIndexBuffer[148231](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802496] "RVV" "param" "temp"
    unknown call_tmp[802510] "expr temp" "maybe param" "maybe type" "temp"
    (802513 'move' call_tmp[802510](802482 'is bound' this[802477] c"rank"))
    if call_tmp[802510]
    {
      unknown call_tmp[802515] "expr temp" "maybe param" "maybe type" "temp"
      (802518 'move' call_tmp[802515](802481 '.' this[802477] c"rank"))
      (802501 'move' ret[802496](802500 'deref' call_tmp[802515]))
      gotoReturn _end_rank[802494] _end_rank[802494]
    }
    {
      (802506 'move' ret[802496](802505 'deref' ?[260]))
      gotoReturn _end_rank[802494] _end_rank[802494]
    }
    label _end_rank[802494]
    (802498 return ret[802496])
  }
  function SparseIndexBuffer[148231](?).rank[802520](arg _mt[802522]:_MT[238], arg this[802524]:SparseIndexBuffer[148231](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802543] "RVV" "param" "temp"
    unknown call_tmp[802557] "expr temp" "maybe param" "maybe type" "temp"
    (802560 'move' call_tmp[802557](802529 'is bound' this[802524] c"rank"))
    if call_tmp[802557]
    {
      unknown call_tmp[802562] "expr temp" "maybe param" "maybe type" "temp"
      (802565 'move' call_tmp[802562](802528 '.' this[802524] c"rank"))
      (802548 'move' ret[802543](802547 'deref' call_tmp[802562]))
      gotoReturn _end_rank[802541] _end_rank[802541]
    }
    {
      (802553 'move' ret[802543](802552 'deref' ?[260]))
      gotoReturn _end_rank[802541] _end_rank[802541]
    }
    label _end_rank[802541]
    (802545 return ret[802543])
  }
  function SparseIndexBuffer[148231](?).obj[802567](arg _mt[802569]:_MT[238], ref arg this[802571]:SparseIndexBuffer[148231](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802581] "RVV" "temp"
    unknown call_tmp[802588] "expr temp" "maybe param" "maybe type" "temp"
    (802591 'move' call_tmp[802588](802575 '.' this[802571] c"obj"))
    (802586 'move' ret[802581](802585 'addr of' call_tmp[802588]))
    (802583 return ret[802581])
  }
  function SparseIndexBuffer[148231](?).idxType[802593](arg _mt[802595]:_MT[238], arg this[802597]:SparseIndexBuffer[148231](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802616] "RVV" "temp" "type variable"
    unknown call_tmp[802630] "expr temp" "maybe param" "maybe type" "temp"
    (802633 'move' call_tmp[802630](802602 'is bound' this[802597] c"idxType"))
    if call_tmp[802630]
    {
      unknown call_tmp[802635] "expr temp" "maybe param" "maybe type" "temp"
      (802638 'move' call_tmp[802635](802601 '.v' this[802597] c"idxType"))
      (802621 'move' ret[802616](802620 'deref' call_tmp[802635]))
      gotoReturn _end_idxType[802614] _end_idxType[802614]
    }
    {
      (802626 'move' ret[802616](802625 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[802614] _end_idxType[802614]
    }
    label _end_idxType[802614]
    (802618 return ret[802616])
  }
  function SparseIndexBuffer[148231](?).idxType[802640](arg _mt[802642]:_MT[238], arg this[802644]:SparseIndexBuffer[148231](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[802663] "RVV" "temp" "type variable"
    unknown call_tmp[802677] "expr temp" "maybe param" "maybe type" "temp"
    (802680 'move' call_tmp[802677](802649 'is bound' this[802644] c"idxType"))
    if call_tmp[802677]
    {
      unknown call_tmp[802682] "expr temp" "maybe param" "maybe type" "temp"
      (802685 'move' call_tmp[802682](802648 '.v' this[802644] c"idxType"))
      (802668 'move' ret[802663](802667 'deref' call_tmp[802682]))
      gotoReturn _end_idxType[802661] _end_idxType[802661]
    }
    {
      (802673 'move' ret[802663](802672 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[802661] _end_idxType[802661]
    }
    label _end_idxType[802661]
    (802665 return ret[802663])
  }
  function SparseIndexBuffer[148231](?).bufDom[802687](arg _mt[802689]:_MT[238], ref arg this[802691]:SparseIndexBuffer[148231](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802701] "RVV" "temp"
    unknown call_tmp[802708] "expr temp" "maybe param" "maybe type" "temp"
    (802711 'move' call_tmp[802708](802695 '.' this[802691] c"bufDom"))
    (802706 'move' ret[802701](802705 'addr of' call_tmp[802708]))
    (802703 return ret[802701])
  }
  function SparseIndexBuffer[148231](?).buf[802713](arg _mt[802715]:_MT[238], ref arg this[802717]:SparseIndexBuffer[148231](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802727] "RVV" "temp"
    unknown call_tmp[802734] "expr temp" "maybe param" "maybe type" "temp"
    (802737 'move' call_tmp[802734](802721 '.' this[802717] c"buf"))
    (802732 'move' ret[802727](802731 'addr of' call_tmp[802734]))
    (802729 return ret[802727])
  }
  function SparseIndexBuffer[148231](?).cur[802739](arg _mt[802741]:_MT[238], ref arg this[802743]:SparseIndexBuffer[148231](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[802753] "RVV" "temp"
    unknown call_tmp[802760] "expr temp" "maybe param" "maybe type" "temp"
    (802763 'move' call_tmp[802760](802747 '.' this[802743] c"cur"))
    (802758 'move' ret[802753](802757 'addr of' call_tmp[802760]))
    (802755 return ret[802753])
  }
  function SparseIndexBuffer[148231](?).init=[802765](arg _mt[802768]:_MT[238], ref arg this[802769]:SparseIndexBuffer[148231](?), arg other[802772] :
  (802771 'typeof' this[802769])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[802906] "expr temp" "maybe param" "maybe type" "temp"
    (802909 'move' call_tmp[802906](802781 call rank _mt[243] other[802772]))
    unknown call_tmp[802911] "expr temp" "maybe param" "maybe type" "temp"
    (802914 'move' call_tmp[802911](802838 call _cast int(64)[13] call_tmp[802906]))
    (802840 'init field' this[802769] c"rank" call_tmp[802911])
    (802896 'end of statement')
    unknown call_tmp[802918] "maybe param" "maybe type" "temp"
    (802921 'move' call_tmp[802918](802791 call obj _mt[243] other[802772]))
    unknown tmp[802843] "temp"
    (802846 'init var' tmp[802843] call_tmp[802918] BaseSparseDom[382296](?))
    (802848 'init field' this[802769] c"obj" tmp[802843])
    (802897 'end of statement')
    unknown tmp[802852] "temp" "type variable"
    (802854 'move' tmp[802852](802801 call idxType _mt[243] other[802772]))
    (802856 'init field' this[802769] c"idxType" tmp[802852])
    (802898 'end of statement')
    unknown call_tmp[802927] "maybe param" "maybe type" "temp"
    (802930 'move' call_tmp[802927](802811 call bufDom _mt[243] other[802772]))
    unknown tmp[802860] "temp"
    (802862 'init var' tmp[802860] call_tmp[802927])
    (802864 '.=' this[802769] c"bufDom" tmp[802860])
    (802899 'end of statement')
    unknown call_tmp[802934] "maybe param" "maybe type" "temp"
    (802937 'move' call_tmp[802934](802821 call buf _mt[243] other[802772]))
    unknown call_tmp[802939] "expr temp" "maybe param" "maybe type" "temp"
    (802942 'move' call_tmp[802939](802882 '.' this[802769] c"bufDom"))
    unknown call_tmp[802944] "expr temp" "maybe param" "maybe type" "temp"
    (802947 'move' call_tmp[802944](802873 call chpl__ensureDomainExpr call_tmp[802939]))
    unknown call_tmp[802949] "expr temp" "maybe param" "maybe type" "temp"
    (802952 'move' call_tmp[802949](802885 '.v' this[802769] c"idxType"))
    unknown call_tmp[802954] "maybe param" "maybe type" "temp"
    (802957 'move' call_tmp[802954](802871 call chpl__buildArrayRuntimeType call_tmp[802944] call_tmp[802949]))
    unknown tmp[802868] "temp"
    (802876 'init var' tmp[802868] call_tmp[802934] call_tmp[802954])
    (802878 'init field' this[802769] c"buf" tmp[802868])
    (802900 'end of statement')
    unknown call_tmp[802961] "maybe param" "maybe type" "temp"
    (802964 'move' call_tmp[802961](802831 call cur _mt[243] other[802772]))
    unknown tmp[802888] "temp"
    (802890 'init var' tmp[802888] call_tmp[802961])
    (802892 '.=' this[802769] c"cur" tmp[802888])
    (802901 'end of statement')
    (802902 return _void[55])
  }
  function SparseIndexBuffer[148231](?).writeThis[802966](arg _mt[802970]:_MT[238], arg this[802968]:SparseIndexBuffer[148231](?), arg f[802969]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (802975 call writeThisDefaultImpl f[802969] this[802968])
    (802980 return _void[55])
  }
  function SparseIndexBuffer[148231](?).readThis[802982](arg _mt[802986]:_MT[238], arg this[802984]:SparseIndexBuffer[148231](?), arg f[802985]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (802990 call readThisDefaultImpl f[802985] this[802984])
    (802996 return _void[55])
  }
  function chpl_fields_are_comparable[803010](arg _arg1[803012]:SparseIndexBuffer[148231](?), arg _arg2[803013]:SparseIndexBuffer[148231](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[803072]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[803079] "expr temp" "maybe param" "maybe type" "temp"
    (803082 'move' call_tmp[803079](803016 call rank _mt[243] _arg1[803012]))
    unknown call_tmp[803084] "expr temp" "maybe param" "maybe type" "temp"
    (803087 'move' call_tmp[803084](803020 call rank _mt[243] _arg2[803013]))
    unknown call_tmp[803089] "expr temp" "maybe param" "maybe type" "temp"
    (803092 'move' call_tmp[803089](803024 'call resolves' c"==" call_tmp[803079] call_tmp[803084]))
    unknown call_tmp[803094] "expr temp" "maybe param" "maybe type" "temp"
    (803097 'move' call_tmp[803094](803026 call obj _mt[243] _arg1[803012]))
    unknown call_tmp[803099] "expr temp" "maybe param" "maybe type" "temp"
    (803102 'move' call_tmp[803099](803030 call obj _mt[243] _arg2[803013]))
    unknown call_tmp[803104] "expr temp" "maybe param" "maybe type" "temp"
    (803107 'move' call_tmp[803104](803034 'call resolves' c"==" call_tmp[803094] call_tmp[803099]))
    unknown call_tmp[803109] "expr temp" "maybe param" "maybe type" "temp"
    (803112 'move' call_tmp[803109](803036 call bufDom _mt[243] _arg1[803012]))
    unknown call_tmp[803114] "expr temp" "maybe param" "maybe type" "temp"
    (803117 'move' call_tmp[803114](803040 call bufDom _mt[243] _arg2[803013]))
    unknown call_tmp[803119] "expr temp" "maybe param" "maybe type" "temp"
    (803122 'move' call_tmp[803119](803044 'call resolves' c"==" call_tmp[803109] call_tmp[803114]))
    unknown call_tmp[803124] "expr temp" "maybe param" "maybe type" "temp"
    (803127 'move' call_tmp[803124](803046 call buf _mt[243] _arg1[803012]))
    unknown call_tmp[803129] "expr temp" "maybe param" "maybe type" "temp"
    (803132 'move' call_tmp[803129](803050 call buf _mt[243] _arg2[803013]))
    unknown call_tmp[803134] "expr temp" "maybe param" "maybe type" "temp"
    (803137 'move' call_tmp[803134](803054 'call resolves' c"==" call_tmp[803124] call_tmp[803129]))
    unknown call_tmp[803139] "expr temp" "maybe param" "maybe type" "temp"
    (803142 'move' call_tmp[803139](803056 call cur _mt[243] _arg1[803012]))
    unknown call_tmp[803144] "expr temp" "maybe param" "maybe type" "temp"
    (803147 'move' call_tmp[803144](803060 call cur _mt[243] _arg2[803013]))
    unknown call_tmp[803149] "expr temp" "maybe param" "maybe type" "temp"
    (803152 'move' call_tmp[803149](803064 'call resolves' c"==" call_tmp[803139] call_tmp[803144]))
    unknown call_tmp[803154] "expr temp" "maybe param" "maybe type" "temp"
    (803157 'move' call_tmp[803154](803066 '&' call_tmp[803089] call_tmp[803104] call_tmp[803119] call_tmp[803134] call_tmp[803149]))
    (803077 'move' ret[803072](803076 'deref' call_tmp[803154]))
    (803074 return ret[803072])
  }
  function ==[802998](arg _arg1[803000]:SparseIndexBuffer[148231](?), arg _arg2[803001]:SparseIndexBuffer[148231](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[803246]:bool[10] "RVV" "temp"
    unknown call_tmp[803278] "expr temp" "maybe param" "maybe type" "temp"
    (803281 'move' call_tmp[803278](803165 call rank _mt[243] _arg1[803000]))
    unknown call_tmp[803283] "expr temp" "maybe param" "maybe type" "temp"
    (803286 'move' call_tmp[803283](803169 call rank _mt[243] _arg2[803001]))
    unknown call_tmp[803288] "expr temp" "maybe param" "maybe type" "temp"
    (803291 'move' call_tmp[803288](803173 call != call_tmp[803278] call_tmp[803283]))
    if call_tmp[803288]
    {
      (803251 'move' ret[803246](803250 'deref' 0))
      gotoReturn _end_==[803244] _end_==[803244]
    }
    unknown call_tmp[803293] "expr temp" "maybe param" "maybe type" "temp"
    (803296 'move' call_tmp[803293](803179 call obj _mt[243] _arg1[803000]))
    unknown call_tmp[803298] "expr temp" "maybe param" "maybe type" "temp"
    (803301 'move' call_tmp[803298](803183 call obj _mt[243] _arg2[803001]))
    unknown call_tmp[803303] "expr temp" "maybe param" "maybe type" "temp"
    (803306 'move' call_tmp[803303](803187 call != call_tmp[803293] call_tmp[803298]))
    if call_tmp[803303]
    {
      (803256 'move' ret[803246](803255 'deref' 0))
      gotoReturn _end_==[803244] _end_==[803244]
    }
    unknown call_tmp[803308] "expr temp" "maybe param" "maybe type" "temp"
    (803311 'move' call_tmp[803308](803193 call bufDom _mt[243] _arg1[803000]))
    unknown call_tmp[803313] "expr temp" "maybe param" "maybe type" "temp"
    (803316 'move' call_tmp[803313](803197 call bufDom _mt[243] _arg2[803001]))
    unknown call_tmp[803318] "expr temp" "maybe param" "maybe type" "temp"
    (803321 'move' call_tmp[803318](803201 call != call_tmp[803308] call_tmp[803313]))
    if call_tmp[803318]
    {
      (803261 'move' ret[803246](803260 'deref' 0))
      gotoReturn _end_==[803244] _end_==[803244]
    }
    unknown call_tmp[803323] "expr temp" "maybe param" "maybe type" "temp"
    (803326 'move' call_tmp[803323](803207 call buf _mt[243] _arg1[803000]))
    unknown call_tmp[803328] "expr temp" "maybe param" "maybe type" "temp"
    (803331 'move' call_tmp[803328](803211 call buf _mt[243] _arg2[803001]))
    unknown call_tmp[803333] "expr temp" "maybe param" "maybe type" "temp"
    (803336 'move' call_tmp[803333](803215 call != call_tmp[803323] call_tmp[803328]))
    if call_tmp[803333]
    {
      (803266 'move' ret[803246](803265 'deref' 0))
      gotoReturn _end_==[803244] _end_==[803244]
    }
    unknown call_tmp[803338] "expr temp" "maybe param" "maybe type" "temp"
    (803341 'move' call_tmp[803338](803221 call cur _mt[243] _arg1[803000]))
    unknown call_tmp[803343] "expr temp" "maybe param" "maybe type" "temp"
    (803346 'move' call_tmp[803343](803225 call cur _mt[243] _arg2[803001]))
    unknown call_tmp[803348] "expr temp" "maybe param" "maybe type" "temp"
    (803351 'move' call_tmp[803348](803229 call != call_tmp[803338] call_tmp[803343]))
    if call_tmp[803348]
    {
      (803271 'move' ret[803246](803270 'deref' 0))
      gotoReturn _end_==[803244] _end_==[803244]
    }
    (803276 'move' ret[803246](803275 'deref' 1))
    label _end_==[803244]
    (803248 return ret[803246])
  }
  where {
    unknown call_tmp[803353] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803356 'move' call_tmp[803353](803004 'typeof' _arg1[803000]))
    unknown call_tmp[803358] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803361 'move' call_tmp[803358](803006 'typeof' _arg2[803001]))
    unknown call_tmp[803363] "expr temp" "maybe param" "maybe type" "temp"
    (803366 'move' call_tmp[803363](803008 call == call_tmp[803353] call_tmp[803358]))
    unknown call_tmp[803368] "expr temp" "maybe param" "maybe type" "temp"
    (803371 'move' call_tmp[803368](803159 call chpl_fields_are_comparable[803010] _arg1[803000] _arg2[803001]))
    (803163 '&' call_tmp[803363] call_tmp[803368])
  }
  function chpl_fields_are_comparable[803385](arg _arg1[803387]:SparseIndexBuffer[148231](?), arg _arg2[803388]:SparseIndexBuffer[148231](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[803447]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[803454] "expr temp" "maybe param" "maybe type" "temp"
    (803457 'move' call_tmp[803454](803391 call rank _mt[243] _arg1[803387]))
    unknown call_tmp[803459] "expr temp" "maybe param" "maybe type" "temp"
    (803462 'move' call_tmp[803459](803395 call rank _mt[243] _arg2[803388]))
    unknown call_tmp[803464] "expr temp" "maybe param" "maybe type" "temp"
    (803467 'move' call_tmp[803464](803399 'call resolves' c"!=" call_tmp[803454] call_tmp[803459]))
    unknown call_tmp[803469] "expr temp" "maybe param" "maybe type" "temp"
    (803472 'move' call_tmp[803469](803401 call obj _mt[243] _arg1[803387]))
    unknown call_tmp[803474] "expr temp" "maybe param" "maybe type" "temp"
    (803477 'move' call_tmp[803474](803405 call obj _mt[243] _arg2[803388]))
    unknown call_tmp[803479] "expr temp" "maybe param" "maybe type" "temp"
    (803482 'move' call_tmp[803479](803409 'call resolves' c"!=" call_tmp[803469] call_tmp[803474]))
    unknown call_tmp[803484] "expr temp" "maybe param" "maybe type" "temp"
    (803487 'move' call_tmp[803484](803411 call bufDom _mt[243] _arg1[803387]))
    unknown call_tmp[803489] "expr temp" "maybe param" "maybe type" "temp"
    (803492 'move' call_tmp[803489](803415 call bufDom _mt[243] _arg2[803388]))
    unknown call_tmp[803494] "expr temp" "maybe param" "maybe type" "temp"
    (803497 'move' call_tmp[803494](803419 'call resolves' c"!=" call_tmp[803484] call_tmp[803489]))
    unknown call_tmp[803499] "expr temp" "maybe param" "maybe type" "temp"
    (803502 'move' call_tmp[803499](803421 call buf _mt[243] _arg1[803387]))
    unknown call_tmp[803504] "expr temp" "maybe param" "maybe type" "temp"
    (803507 'move' call_tmp[803504](803425 call buf _mt[243] _arg2[803388]))
    unknown call_tmp[803509] "expr temp" "maybe param" "maybe type" "temp"
    (803512 'move' call_tmp[803509](803429 'call resolves' c"!=" call_tmp[803499] call_tmp[803504]))
    unknown call_tmp[803514] "expr temp" "maybe param" "maybe type" "temp"
    (803517 'move' call_tmp[803514](803431 call cur _mt[243] _arg1[803387]))
    unknown call_tmp[803519] "expr temp" "maybe param" "maybe type" "temp"
    (803522 'move' call_tmp[803519](803435 call cur _mt[243] _arg2[803388]))
    unknown call_tmp[803524] "expr temp" "maybe param" "maybe type" "temp"
    (803527 'move' call_tmp[803524](803439 'call resolves' c"!=" call_tmp[803514] call_tmp[803519]))
    unknown call_tmp[803529] "expr temp" "maybe param" "maybe type" "temp"
    (803532 'move' call_tmp[803529](803441 '&' call_tmp[803464] call_tmp[803479] call_tmp[803494] call_tmp[803509] call_tmp[803524]))
    (803452 'move' ret[803447](803451 'deref' call_tmp[803529]))
    (803449 return ret[803447])
  }
  function !=[803373](arg _arg1[803375]:SparseIndexBuffer[148231](?), arg _arg2[803376]:SparseIndexBuffer[148231](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[803621]:bool[10] "RVV" "temp"
    unknown call_tmp[803653] "expr temp" "maybe param" "maybe type" "temp"
    (803656 'move' call_tmp[803653](803540 call rank _mt[243] _arg1[803375]))
    unknown call_tmp[803658] "expr temp" "maybe param" "maybe type" "temp"
    (803661 'move' call_tmp[803658](803544 call rank _mt[243] _arg2[803376]))
    unknown call_tmp[803663] "expr temp" "maybe param" "maybe type" "temp"
    (803666 'move' call_tmp[803663](803548 call != call_tmp[803653] call_tmp[803658]))
    if call_tmp[803663]
    {
      (803626 'move' ret[803621](803625 'deref' 1))
      gotoReturn _end_!=[803619] _end_!=[803619]
    }
    unknown call_tmp[803668] "expr temp" "maybe param" "maybe type" "temp"
    (803671 'move' call_tmp[803668](803554 call obj _mt[243] _arg1[803375]))
    unknown call_tmp[803673] "expr temp" "maybe param" "maybe type" "temp"
    (803676 'move' call_tmp[803673](803558 call obj _mt[243] _arg2[803376]))
    unknown call_tmp[803678] "expr temp" "maybe param" "maybe type" "temp"
    (803681 'move' call_tmp[803678](803562 call != call_tmp[803668] call_tmp[803673]))
    if call_tmp[803678]
    {
      (803631 'move' ret[803621](803630 'deref' 1))
      gotoReturn _end_!=[803619] _end_!=[803619]
    }
    unknown call_tmp[803683] "expr temp" "maybe param" "maybe type" "temp"
    (803686 'move' call_tmp[803683](803568 call bufDom _mt[243] _arg1[803375]))
    unknown call_tmp[803688] "expr temp" "maybe param" "maybe type" "temp"
    (803691 'move' call_tmp[803688](803572 call bufDom _mt[243] _arg2[803376]))
    unknown call_tmp[803693] "expr temp" "maybe param" "maybe type" "temp"
    (803696 'move' call_tmp[803693](803576 call != call_tmp[803683] call_tmp[803688]))
    if call_tmp[803693]
    {
      (803636 'move' ret[803621](803635 'deref' 1))
      gotoReturn _end_!=[803619] _end_!=[803619]
    }
    unknown call_tmp[803698] "expr temp" "maybe param" "maybe type" "temp"
    (803701 'move' call_tmp[803698](803582 call buf _mt[243] _arg1[803375]))
    unknown call_tmp[803703] "expr temp" "maybe param" "maybe type" "temp"
    (803706 'move' call_tmp[803703](803586 call buf _mt[243] _arg2[803376]))
    unknown call_tmp[803708] "expr temp" "maybe param" "maybe type" "temp"
    (803711 'move' call_tmp[803708](803590 call != call_tmp[803698] call_tmp[803703]))
    if call_tmp[803708]
    {
      (803641 'move' ret[803621](803640 'deref' 1))
      gotoReturn _end_!=[803619] _end_!=[803619]
    }
    unknown call_tmp[803713] "expr temp" "maybe param" "maybe type" "temp"
    (803716 'move' call_tmp[803713](803596 call cur _mt[243] _arg1[803375]))
    unknown call_tmp[803718] "expr temp" "maybe param" "maybe type" "temp"
    (803721 'move' call_tmp[803718](803600 call cur _mt[243] _arg2[803376]))
    unknown call_tmp[803723] "expr temp" "maybe param" "maybe type" "temp"
    (803726 'move' call_tmp[803723](803604 call != call_tmp[803713] call_tmp[803718]))
    if call_tmp[803723]
    {
      (803646 'move' ret[803621](803645 'deref' 1))
      gotoReturn _end_!=[803619] _end_!=[803619]
    }
    (803651 'move' ret[803621](803650 'deref' 0))
    label _end_!=[803619]
    (803623 return ret[803621])
  }
  where {
    unknown call_tmp[803728] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803731 'move' call_tmp[803728](803379 'typeof' _arg1[803375]))
    unknown call_tmp[803733] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (803736 'move' call_tmp[803733](803381 'typeof' _arg2[803376]))
    unknown call_tmp[803738] "expr temp" "maybe param" "maybe type" "temp"
    (803741 'move' call_tmp[803738](803383 call == call_tmp[803728] call_tmp[803733]))
    unknown call_tmp[803743] "expr temp" "maybe param" "maybe type" "temp"
    (803746 'move' call_tmp[803743](803534 call chpl_fields_are_comparable[803385] _arg1[803375] _arg2[803376]))
    (803538 '&' call_tmp[803738] call_tmp[803743])
  }
  function chpl_fields_are_comparable[803760](arg _arg1[803762]:SparseIndexBuffer[148231](?), arg _arg2[803763]:SparseIndexBuffer[148231](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[803822]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[803829] "expr temp" "maybe param" "maybe type" "temp"
    (803832 'move' call_tmp[803829](803766 call rank _mt[243] _arg1[803762]))
    unknown call_tmp[803834] "expr temp" "maybe param" "maybe type" "temp"
    (803837 'move' call_tmp[803834](803770 call rank _mt[243] _arg2[803763]))
    unknown call_tmp[803839] "expr temp" "maybe param" "maybe type" "temp"
    (803842 'move' call_tmp[803839](803774 'call resolves' c"<" call_tmp[803829] call_tmp[803834]))
    unknown call_tmp[803844] "expr temp" "maybe param" "maybe type" "temp"
    (803847 'move' call_tmp[803844](803776 call obj _mt[243] _arg1[803762]))
    unknown call_tmp[803849] "expr temp" "maybe param" "maybe type" "temp"
    (803852 'move' call_tmp[803849](803780 call obj _mt[243] _arg2[803763]))
    unknown call_tmp[803854] "expr temp" "maybe param" "maybe type" "temp"
    (803857 'move' call_tmp[803854](803784 'call resolves' c"<" call_tmp[803844] call_tmp[803849]))
    unknown call_tmp[803859] "expr temp" "maybe param" "maybe type" "temp"
    (803862 'move' call_tmp[803859](803786 call bufDom _mt[243] _arg1[803762]))
    unknown call_tmp[803864] "expr temp" "maybe param" "maybe type" "temp"
    (803867 'move' call_tmp[803864](803790 call bufDom _mt[243] _arg2[803763]))
    unknown call_tmp[803869] "expr temp" "maybe param" "maybe type" "temp"
    (803872 'move' call_tmp[803869](803794 'call resolves' c"<" call_tmp[803859] call_tmp[803864]))
    unknown call_tmp[803874] "expr temp" "maybe param" "maybe type" "temp"
    (803877 'move' call_tmp[803874](803796 call buf _mt[243] _arg1[803762]))
    unknown call_tmp[803879] "expr temp" "maybe param" "maybe type" "temp"
    (803882 'move' call_tmp[803879](803800 call buf _mt[243] _arg2[803763]))
    unknown call_tmp[803884] "expr temp" "maybe param" "maybe type" "temp"
    (803887 'move' call_tmp[803884](803804 'call resolves' c"<" call_tmp[803874] call_tmp[803879]))
    unknown call_tmp[803889] "expr temp" "maybe param" "maybe type" "temp"
    (803892 'move' call_tmp[803889](803806 call cur _mt[243] _arg1[803762]))
    unknown call_tmp[803894] "expr temp" "maybe param" "maybe type" "temp"
    (803897 'move' call_tmp[803894](803810 call cur _mt[243] _arg2[803763]))
    unknown call_tmp[803899] "expr temp" "maybe param" "maybe type" "temp"
    (803902 'move' call_tmp[803899](803814 'call resolves' c"<" call_tmp[803889] call_tmp[803894]))
    unknown call_tmp[803904] "expr temp" "maybe param" "maybe type" "temp"
    (803907 'move' call_tmp[803904](803816 '&' call_tmp[803839] call_tmp[803854] call_tmp[803869] call_tmp[803884] call_tmp[803899]))
    (803827 'move' ret[803822](803826 'deref' call_tmp[803904]))
    (803824 return ret[803822])
  }
  function <[803748](arg _arg1[803750]:SparseIndexBuffer[148231](?), arg _arg2[803751]:SparseIndexBuffer[148231](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[804071]:bool[10] "RVV" "temp"
    unknown call_tmp[804128] "expr temp" "maybe param" "maybe type" "temp"
    (804131 'move' call_tmp[804128](803915 call rank _mt[243] _arg1[803750]))
    unknown call_tmp[804133] "expr temp" "maybe param" "maybe type" "temp"
    (804136 'move' call_tmp[804133](803919 call rank _mt[243] _arg2[803751]))
    unknown call_tmp[804138] "expr temp" "maybe param" "maybe type" "temp"
    (804141 'move' call_tmp[804138](803923 call < call_tmp[804128] call_tmp[804133]))
    if call_tmp[804138]
    {
      (804076 'move' ret[804071](804075 'deref' 1))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804143] "expr temp" "maybe param" "maybe type" "temp"
    (804146 'move' call_tmp[804143](803929 call rank _mt[243] _arg1[803750]))
    unknown call_tmp[804148] "expr temp" "maybe param" "maybe type" "temp"
    (804151 'move' call_tmp[804148](803933 call rank _mt[243] _arg2[803751]))
    unknown call_tmp[804153] "expr temp" "maybe param" "maybe type" "temp"
    (804156 'move' call_tmp[804153](803937 call > call_tmp[804143] call_tmp[804148]))
    if call_tmp[804153]
    {
      (804081 'move' ret[804071](804080 'deref' 0))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804158] "expr temp" "maybe param" "maybe type" "temp"
    (804161 'move' call_tmp[804158](803943 call obj _mt[243] _arg1[803750]))
    unknown call_tmp[804163] "expr temp" "maybe param" "maybe type" "temp"
    (804166 'move' call_tmp[804163](803947 call obj _mt[243] _arg2[803751]))
    unknown call_tmp[804168] "expr temp" "maybe param" "maybe type" "temp"
    (804171 'move' call_tmp[804168](803951 call < call_tmp[804158] call_tmp[804163]))
    if call_tmp[804168]
    {
      (804086 'move' ret[804071](804085 'deref' 1))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804173] "expr temp" "maybe param" "maybe type" "temp"
    (804176 'move' call_tmp[804173](803957 call obj _mt[243] _arg1[803750]))
    unknown call_tmp[804178] "expr temp" "maybe param" "maybe type" "temp"
    (804181 'move' call_tmp[804178](803961 call obj _mt[243] _arg2[803751]))
    unknown call_tmp[804183] "expr temp" "maybe param" "maybe type" "temp"
    (804186 'move' call_tmp[804183](803965 call > call_tmp[804173] call_tmp[804178]))
    if call_tmp[804183]
    {
      (804091 'move' ret[804071](804090 'deref' 0))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804188] "expr temp" "maybe param" "maybe type" "temp"
    (804191 'move' call_tmp[804188](803971 call bufDom _mt[243] _arg1[803750]))
    unknown call_tmp[804193] "expr temp" "maybe param" "maybe type" "temp"
    (804196 'move' call_tmp[804193](803975 call bufDom _mt[243] _arg2[803751]))
    unknown call_tmp[804198] "expr temp" "maybe param" "maybe type" "temp"
    (804201 'move' call_tmp[804198](803979 call < call_tmp[804188] call_tmp[804193]))
    if call_tmp[804198]
    {
      (804096 'move' ret[804071](804095 'deref' 1))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804203] "expr temp" "maybe param" "maybe type" "temp"
    (804206 'move' call_tmp[804203](803985 call bufDom _mt[243] _arg1[803750]))
    unknown call_tmp[804208] "expr temp" "maybe param" "maybe type" "temp"
    (804211 'move' call_tmp[804208](803989 call bufDom _mt[243] _arg2[803751]))
    unknown call_tmp[804213] "expr temp" "maybe param" "maybe type" "temp"
    (804216 'move' call_tmp[804213](803993 call > call_tmp[804203] call_tmp[804208]))
    if call_tmp[804213]
    {
      (804101 'move' ret[804071](804100 'deref' 0))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804218] "expr temp" "maybe param" "maybe type" "temp"
    (804221 'move' call_tmp[804218](803999 call buf _mt[243] _arg1[803750]))
    unknown call_tmp[804223] "expr temp" "maybe param" "maybe type" "temp"
    (804226 'move' call_tmp[804223](804003 call buf _mt[243] _arg2[803751]))
    unknown call_tmp[804228] "expr temp" "maybe param" "maybe type" "temp"
    (804231 'move' call_tmp[804228](804007 call < call_tmp[804218] call_tmp[804223]))
    if call_tmp[804228]
    {
      (804106 'move' ret[804071](804105 'deref' 1))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804233] "expr temp" "maybe param" "maybe type" "temp"
    (804236 'move' call_tmp[804233](804013 call buf _mt[243] _arg1[803750]))
    unknown call_tmp[804238] "expr temp" "maybe param" "maybe type" "temp"
    (804241 'move' call_tmp[804238](804017 call buf _mt[243] _arg2[803751]))
    unknown call_tmp[804243] "expr temp" "maybe param" "maybe type" "temp"
    (804246 'move' call_tmp[804243](804021 call > call_tmp[804233] call_tmp[804238]))
    if call_tmp[804243]
    {
      (804111 'move' ret[804071](804110 'deref' 0))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804248] "expr temp" "maybe param" "maybe type" "temp"
    (804251 'move' call_tmp[804248](804027 call cur _mt[243] _arg1[803750]))
    unknown call_tmp[804253] "expr temp" "maybe param" "maybe type" "temp"
    (804256 'move' call_tmp[804253](804031 call cur _mt[243] _arg2[803751]))
    unknown call_tmp[804258] "expr temp" "maybe param" "maybe type" "temp"
    (804261 'move' call_tmp[804258](804035 call < call_tmp[804248] call_tmp[804253]))
    if call_tmp[804258]
    {
      (804116 'move' ret[804071](804115 'deref' 1))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    unknown call_tmp[804263] "expr temp" "maybe param" "maybe type" "temp"
    (804266 'move' call_tmp[804263](804041 call cur _mt[243] _arg1[803750]))
    unknown call_tmp[804268] "expr temp" "maybe param" "maybe type" "temp"
    (804271 'move' call_tmp[804268](804045 call cur _mt[243] _arg2[803751]))
    unknown call_tmp[804273] "expr temp" "maybe param" "maybe type" "temp"
    (804276 'move' call_tmp[804273](804049 call > call_tmp[804263] call_tmp[804268]))
    if call_tmp[804273]
    {
      (804121 'move' ret[804071](804120 'deref' 0))
      gotoReturn _end_<[804069] _end_<[804069]
    }
    (804126 'move' ret[804071](804125 'deref' 0))
    label _end_<[804069]
    (804073 return ret[804071])
  }
  where {
    unknown call_tmp[804278] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804281 'move' call_tmp[804278](803754 'typeof' _arg1[803750]))
    unknown call_tmp[804283] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804286 'move' call_tmp[804283](803756 'typeof' _arg2[803751]))
    unknown call_tmp[804288] "expr temp" "maybe param" "maybe type" "temp"
    (804291 'move' call_tmp[804288](803758 call == call_tmp[804278] call_tmp[804283]))
    unknown call_tmp[804293] "expr temp" "maybe param" "maybe type" "temp"
    (804296 'move' call_tmp[804293](803909 call chpl_fields_are_comparable[803760] _arg1[803750] _arg2[803751]))
    (803913 '&' call_tmp[804288] call_tmp[804293])
  }
  function chpl_fields_are_comparable[804310](arg _arg1[804312]:SparseIndexBuffer[148231](?), arg _arg2[804313]:SparseIndexBuffer[148231](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[804372]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[804379] "expr temp" "maybe param" "maybe type" "temp"
    (804382 'move' call_tmp[804379](804316 call rank _mt[243] _arg1[804312]))
    unknown call_tmp[804384] "expr temp" "maybe param" "maybe type" "temp"
    (804387 'move' call_tmp[804384](804320 call rank _mt[243] _arg2[804313]))
    unknown call_tmp[804389] "expr temp" "maybe param" "maybe type" "temp"
    (804392 'move' call_tmp[804389](804324 'call resolves' c"<=" call_tmp[804379] call_tmp[804384]))
    unknown call_tmp[804394] "expr temp" "maybe param" "maybe type" "temp"
    (804397 'move' call_tmp[804394](804326 call obj _mt[243] _arg1[804312]))
    unknown call_tmp[804399] "expr temp" "maybe param" "maybe type" "temp"
    (804402 'move' call_tmp[804399](804330 call obj _mt[243] _arg2[804313]))
    unknown call_tmp[804404] "expr temp" "maybe param" "maybe type" "temp"
    (804407 'move' call_tmp[804404](804334 'call resolves' c"<=" call_tmp[804394] call_tmp[804399]))
    unknown call_tmp[804409] "expr temp" "maybe param" "maybe type" "temp"
    (804412 'move' call_tmp[804409](804336 call bufDom _mt[243] _arg1[804312]))
    unknown call_tmp[804414] "expr temp" "maybe param" "maybe type" "temp"
    (804417 'move' call_tmp[804414](804340 call bufDom _mt[243] _arg2[804313]))
    unknown call_tmp[804419] "expr temp" "maybe param" "maybe type" "temp"
    (804422 'move' call_tmp[804419](804344 'call resolves' c"<=" call_tmp[804409] call_tmp[804414]))
    unknown call_tmp[804424] "expr temp" "maybe param" "maybe type" "temp"
    (804427 'move' call_tmp[804424](804346 call buf _mt[243] _arg1[804312]))
    unknown call_tmp[804429] "expr temp" "maybe param" "maybe type" "temp"
    (804432 'move' call_tmp[804429](804350 call buf _mt[243] _arg2[804313]))
    unknown call_tmp[804434] "expr temp" "maybe param" "maybe type" "temp"
    (804437 'move' call_tmp[804434](804354 'call resolves' c"<=" call_tmp[804424] call_tmp[804429]))
    unknown call_tmp[804439] "expr temp" "maybe param" "maybe type" "temp"
    (804442 'move' call_tmp[804439](804356 call cur _mt[243] _arg1[804312]))
    unknown call_tmp[804444] "expr temp" "maybe param" "maybe type" "temp"
    (804447 'move' call_tmp[804444](804360 call cur _mt[243] _arg2[804313]))
    unknown call_tmp[804449] "expr temp" "maybe param" "maybe type" "temp"
    (804452 'move' call_tmp[804449](804364 'call resolves' c"<=" call_tmp[804439] call_tmp[804444]))
    unknown call_tmp[804454] "expr temp" "maybe param" "maybe type" "temp"
    (804457 'move' call_tmp[804454](804366 '&' call_tmp[804389] call_tmp[804404] call_tmp[804419] call_tmp[804434] call_tmp[804449]))
    (804377 'move' ret[804372](804376 'deref' call_tmp[804454]))
    (804374 return ret[804372])
  }
  function <=[804298](arg _arg1[804300]:SparseIndexBuffer[148231](?), arg _arg2[804301]:SparseIndexBuffer[148231](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[804621]:bool[10] "RVV" "temp"
    unknown call_tmp[804678] "expr temp" "maybe param" "maybe type" "temp"
    (804681 'move' call_tmp[804678](804465 call rank _mt[243] _arg1[804300]))
    unknown call_tmp[804683] "expr temp" "maybe param" "maybe type" "temp"
    (804686 'move' call_tmp[804683](804469 call rank _mt[243] _arg2[804301]))
    unknown call_tmp[804688] "expr temp" "maybe param" "maybe type" "temp"
    (804691 'move' call_tmp[804688](804473 call < call_tmp[804678] call_tmp[804683]))
    if call_tmp[804688]
    {
      (804626 'move' ret[804621](804625 'deref' 1))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804693] "expr temp" "maybe param" "maybe type" "temp"
    (804696 'move' call_tmp[804693](804479 call rank _mt[243] _arg1[804300]))
    unknown call_tmp[804698] "expr temp" "maybe param" "maybe type" "temp"
    (804701 'move' call_tmp[804698](804483 call rank _mt[243] _arg2[804301]))
    unknown call_tmp[804703] "expr temp" "maybe param" "maybe type" "temp"
    (804706 'move' call_tmp[804703](804487 call > call_tmp[804693] call_tmp[804698]))
    if call_tmp[804703]
    {
      (804631 'move' ret[804621](804630 'deref' 0))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804708] "expr temp" "maybe param" "maybe type" "temp"
    (804711 'move' call_tmp[804708](804493 call obj _mt[243] _arg1[804300]))
    unknown call_tmp[804713] "expr temp" "maybe param" "maybe type" "temp"
    (804716 'move' call_tmp[804713](804497 call obj _mt[243] _arg2[804301]))
    unknown call_tmp[804718] "expr temp" "maybe param" "maybe type" "temp"
    (804721 'move' call_tmp[804718](804501 call < call_tmp[804708] call_tmp[804713]))
    if call_tmp[804718]
    {
      (804636 'move' ret[804621](804635 'deref' 1))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804723] "expr temp" "maybe param" "maybe type" "temp"
    (804726 'move' call_tmp[804723](804507 call obj _mt[243] _arg1[804300]))
    unknown call_tmp[804728] "expr temp" "maybe param" "maybe type" "temp"
    (804731 'move' call_tmp[804728](804511 call obj _mt[243] _arg2[804301]))
    unknown call_tmp[804733] "expr temp" "maybe param" "maybe type" "temp"
    (804736 'move' call_tmp[804733](804515 call > call_tmp[804723] call_tmp[804728]))
    if call_tmp[804733]
    {
      (804641 'move' ret[804621](804640 'deref' 0))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804738] "expr temp" "maybe param" "maybe type" "temp"
    (804741 'move' call_tmp[804738](804521 call bufDom _mt[243] _arg1[804300]))
    unknown call_tmp[804743] "expr temp" "maybe param" "maybe type" "temp"
    (804746 'move' call_tmp[804743](804525 call bufDom _mt[243] _arg2[804301]))
    unknown call_tmp[804748] "expr temp" "maybe param" "maybe type" "temp"
    (804751 'move' call_tmp[804748](804529 call < call_tmp[804738] call_tmp[804743]))
    if call_tmp[804748]
    {
      (804646 'move' ret[804621](804645 'deref' 1))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804753] "expr temp" "maybe param" "maybe type" "temp"
    (804756 'move' call_tmp[804753](804535 call bufDom _mt[243] _arg1[804300]))
    unknown call_tmp[804758] "expr temp" "maybe param" "maybe type" "temp"
    (804761 'move' call_tmp[804758](804539 call bufDom _mt[243] _arg2[804301]))
    unknown call_tmp[804763] "expr temp" "maybe param" "maybe type" "temp"
    (804766 'move' call_tmp[804763](804543 call > call_tmp[804753] call_tmp[804758]))
    if call_tmp[804763]
    {
      (804651 'move' ret[804621](804650 'deref' 0))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804768] "expr temp" "maybe param" "maybe type" "temp"
    (804771 'move' call_tmp[804768](804549 call buf _mt[243] _arg1[804300]))
    unknown call_tmp[804773] "expr temp" "maybe param" "maybe type" "temp"
    (804776 'move' call_tmp[804773](804553 call buf _mt[243] _arg2[804301]))
    unknown call_tmp[804778] "expr temp" "maybe param" "maybe type" "temp"
    (804781 'move' call_tmp[804778](804557 call < call_tmp[804768] call_tmp[804773]))
    if call_tmp[804778]
    {
      (804656 'move' ret[804621](804655 'deref' 1))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804783] "expr temp" "maybe param" "maybe type" "temp"
    (804786 'move' call_tmp[804783](804563 call buf _mt[243] _arg1[804300]))
    unknown call_tmp[804788] "expr temp" "maybe param" "maybe type" "temp"
    (804791 'move' call_tmp[804788](804567 call buf _mt[243] _arg2[804301]))
    unknown call_tmp[804793] "expr temp" "maybe param" "maybe type" "temp"
    (804796 'move' call_tmp[804793](804571 call > call_tmp[804783] call_tmp[804788]))
    if call_tmp[804793]
    {
      (804661 'move' ret[804621](804660 'deref' 0))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804798] "expr temp" "maybe param" "maybe type" "temp"
    (804801 'move' call_tmp[804798](804577 call cur _mt[243] _arg1[804300]))
    unknown call_tmp[804803] "expr temp" "maybe param" "maybe type" "temp"
    (804806 'move' call_tmp[804803](804581 call cur _mt[243] _arg2[804301]))
    unknown call_tmp[804808] "expr temp" "maybe param" "maybe type" "temp"
    (804811 'move' call_tmp[804808](804585 call < call_tmp[804798] call_tmp[804803]))
    if call_tmp[804808]
    {
      (804666 'move' ret[804621](804665 'deref' 1))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    unknown call_tmp[804813] "expr temp" "maybe param" "maybe type" "temp"
    (804816 'move' call_tmp[804813](804591 call cur _mt[243] _arg1[804300]))
    unknown call_tmp[804818] "expr temp" "maybe param" "maybe type" "temp"
    (804821 'move' call_tmp[804818](804595 call cur _mt[243] _arg2[804301]))
    unknown call_tmp[804823] "expr temp" "maybe param" "maybe type" "temp"
    (804826 'move' call_tmp[804823](804599 call > call_tmp[804813] call_tmp[804818]))
    if call_tmp[804823]
    {
      (804671 'move' ret[804621](804670 'deref' 0))
      gotoReturn _end_<=[804619] _end_<=[804619]
    }
    (804676 'move' ret[804621](804675 'deref' 1))
    label _end_<=[804619]
    (804623 return ret[804621])
  }
  where {
    unknown call_tmp[804828] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804831 'move' call_tmp[804828](804304 'typeof' _arg1[804300]))
    unknown call_tmp[804833] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (804836 'move' call_tmp[804833](804306 'typeof' _arg2[804301]))
    unknown call_tmp[804838] "expr temp" "maybe param" "maybe type" "temp"
    (804841 'move' call_tmp[804838](804308 call == call_tmp[804828] call_tmp[804833]))
    unknown call_tmp[804843] "expr temp" "maybe param" "maybe type" "temp"
    (804846 'move' call_tmp[804843](804459 call chpl_fields_are_comparable[804310] _arg1[804300] _arg2[804301]))
    (804463 '&' call_tmp[804838] call_tmp[804843])
  }
  function chpl_fields_are_comparable[804860](arg _arg1[804862]:SparseIndexBuffer[148231](?), arg _arg2[804863]:SparseIndexBuffer[148231](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[804922]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[804929] "expr temp" "maybe param" "maybe type" "temp"
    (804932 'move' call_tmp[804929](804866 call rank _mt[243] _arg1[804862]))
    unknown call_tmp[804934] "expr temp" "maybe param" "maybe type" "temp"
    (804937 'move' call_tmp[804934](804870 call rank _mt[243] _arg2[804863]))
    unknown call_tmp[804939] "expr temp" "maybe param" "maybe type" "temp"
    (804942 'move' call_tmp[804939](804874 'call resolves' c">" call_tmp[804929] call_tmp[804934]))
    unknown call_tmp[804944] "expr temp" "maybe param" "maybe type" "temp"
    (804947 'move' call_tmp[804944](804876 call obj _mt[243] _arg1[804862]))
    unknown call_tmp[804949] "expr temp" "maybe param" "maybe type" "temp"
    (804952 'move' call_tmp[804949](804880 call obj _mt[243] _arg2[804863]))
    unknown call_tmp[804954] "expr temp" "maybe param" "maybe type" "temp"
    (804957 'move' call_tmp[804954](804884 'call resolves' c">" call_tmp[804944] call_tmp[804949]))
    unknown call_tmp[804959] "expr temp" "maybe param" "maybe type" "temp"
    (804962 'move' call_tmp[804959](804886 call bufDom _mt[243] _arg1[804862]))
    unknown call_tmp[804964] "expr temp" "maybe param" "maybe type" "temp"
    (804967 'move' call_tmp[804964](804890 call bufDom _mt[243] _arg2[804863]))
    unknown call_tmp[804969] "expr temp" "maybe param" "maybe type" "temp"
    (804972 'move' call_tmp[804969](804894 'call resolves' c">" call_tmp[804959] call_tmp[804964]))
    unknown call_tmp[804974] "expr temp" "maybe param" "maybe type" "temp"
    (804977 'move' call_tmp[804974](804896 call buf _mt[243] _arg1[804862]))
    unknown call_tmp[804979] "expr temp" "maybe param" "maybe type" "temp"
    (804982 'move' call_tmp[804979](804900 call buf _mt[243] _arg2[804863]))
    unknown call_tmp[804984] "expr temp" "maybe param" "maybe type" "temp"
    (804987 'move' call_tmp[804984](804904 'call resolves' c">" call_tmp[804974] call_tmp[804979]))
    unknown call_tmp[804989] "expr temp" "maybe param" "maybe type" "temp"
    (804992 'move' call_tmp[804989](804906 call cur _mt[243] _arg1[804862]))
    unknown call_tmp[804994] "expr temp" "maybe param" "maybe type" "temp"
    (804997 'move' call_tmp[804994](804910 call cur _mt[243] _arg2[804863]))
    unknown call_tmp[804999] "expr temp" "maybe param" "maybe type" "temp"
    (805002 'move' call_tmp[804999](804914 'call resolves' c">" call_tmp[804989] call_tmp[804994]))
    unknown call_tmp[805004] "expr temp" "maybe param" "maybe type" "temp"
    (805007 'move' call_tmp[805004](804916 '&' call_tmp[804939] call_tmp[804954] call_tmp[804969] call_tmp[804984] call_tmp[804999]))
    (804927 'move' ret[804922](804926 'deref' call_tmp[805004]))
    (804924 return ret[804922])
  }
  function >[804848](arg _arg1[804850]:SparseIndexBuffer[148231](?), arg _arg2[804851]:SparseIndexBuffer[148231](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[805171]:bool[10] "RVV" "temp"
    unknown call_tmp[805228] "expr temp" "maybe param" "maybe type" "temp"
    (805231 'move' call_tmp[805228](805015 call rank _mt[243] _arg1[804850]))
    unknown call_tmp[805233] "expr temp" "maybe param" "maybe type" "temp"
    (805236 'move' call_tmp[805233](805019 call rank _mt[243] _arg2[804851]))
    unknown call_tmp[805238] "expr temp" "maybe param" "maybe type" "temp"
    (805241 'move' call_tmp[805238](805023 call > call_tmp[805228] call_tmp[805233]))
    if call_tmp[805238]
    {
      (805176 'move' ret[805171](805175 'deref' 1))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805243] "expr temp" "maybe param" "maybe type" "temp"
    (805246 'move' call_tmp[805243](805029 call rank _mt[243] _arg1[804850]))
    unknown call_tmp[805248] "expr temp" "maybe param" "maybe type" "temp"
    (805251 'move' call_tmp[805248](805033 call rank _mt[243] _arg2[804851]))
    unknown call_tmp[805253] "expr temp" "maybe param" "maybe type" "temp"
    (805256 'move' call_tmp[805253](805037 call < call_tmp[805243] call_tmp[805248]))
    if call_tmp[805253]
    {
      (805181 'move' ret[805171](805180 'deref' 0))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805258] "expr temp" "maybe param" "maybe type" "temp"
    (805261 'move' call_tmp[805258](805043 call obj _mt[243] _arg1[804850]))
    unknown call_tmp[805263] "expr temp" "maybe param" "maybe type" "temp"
    (805266 'move' call_tmp[805263](805047 call obj _mt[243] _arg2[804851]))
    unknown call_tmp[805268] "expr temp" "maybe param" "maybe type" "temp"
    (805271 'move' call_tmp[805268](805051 call > call_tmp[805258] call_tmp[805263]))
    if call_tmp[805268]
    {
      (805186 'move' ret[805171](805185 'deref' 1))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805273] "expr temp" "maybe param" "maybe type" "temp"
    (805276 'move' call_tmp[805273](805057 call obj _mt[243] _arg1[804850]))
    unknown call_tmp[805278] "expr temp" "maybe param" "maybe type" "temp"
    (805281 'move' call_tmp[805278](805061 call obj _mt[243] _arg2[804851]))
    unknown call_tmp[805283] "expr temp" "maybe param" "maybe type" "temp"
    (805286 'move' call_tmp[805283](805065 call < call_tmp[805273] call_tmp[805278]))
    if call_tmp[805283]
    {
      (805191 'move' ret[805171](805190 'deref' 0))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805288] "expr temp" "maybe param" "maybe type" "temp"
    (805291 'move' call_tmp[805288](805071 call bufDom _mt[243] _arg1[804850]))
    unknown call_tmp[805293] "expr temp" "maybe param" "maybe type" "temp"
    (805296 'move' call_tmp[805293](805075 call bufDom _mt[243] _arg2[804851]))
    unknown call_tmp[805298] "expr temp" "maybe param" "maybe type" "temp"
    (805301 'move' call_tmp[805298](805079 call > call_tmp[805288] call_tmp[805293]))
    if call_tmp[805298]
    {
      (805196 'move' ret[805171](805195 'deref' 1))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805303] "expr temp" "maybe param" "maybe type" "temp"
    (805306 'move' call_tmp[805303](805085 call bufDom _mt[243] _arg1[804850]))
    unknown call_tmp[805308] "expr temp" "maybe param" "maybe type" "temp"
    (805311 'move' call_tmp[805308](805089 call bufDom _mt[243] _arg2[804851]))
    unknown call_tmp[805313] "expr temp" "maybe param" "maybe type" "temp"
    (805316 'move' call_tmp[805313](805093 call < call_tmp[805303] call_tmp[805308]))
    if call_tmp[805313]
    {
      (805201 'move' ret[805171](805200 'deref' 0))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805318] "expr temp" "maybe param" "maybe type" "temp"
    (805321 'move' call_tmp[805318](805099 call buf _mt[243] _arg1[804850]))
    unknown call_tmp[805323] "expr temp" "maybe param" "maybe type" "temp"
    (805326 'move' call_tmp[805323](805103 call buf _mt[243] _arg2[804851]))
    unknown call_tmp[805328] "expr temp" "maybe param" "maybe type" "temp"
    (805331 'move' call_tmp[805328](805107 call > call_tmp[805318] call_tmp[805323]))
    if call_tmp[805328]
    {
      (805206 'move' ret[805171](805205 'deref' 1))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805333] "expr temp" "maybe param" "maybe type" "temp"
    (805336 'move' call_tmp[805333](805113 call buf _mt[243] _arg1[804850]))
    unknown call_tmp[805338] "expr temp" "maybe param" "maybe type" "temp"
    (805341 'move' call_tmp[805338](805117 call buf _mt[243] _arg2[804851]))
    unknown call_tmp[805343] "expr temp" "maybe param" "maybe type" "temp"
    (805346 'move' call_tmp[805343](805121 call < call_tmp[805333] call_tmp[805338]))
    if call_tmp[805343]
    {
      (805211 'move' ret[805171](805210 'deref' 0))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805348] "expr temp" "maybe param" "maybe type" "temp"
    (805351 'move' call_tmp[805348](805127 call cur _mt[243] _arg1[804850]))
    unknown call_tmp[805353] "expr temp" "maybe param" "maybe type" "temp"
    (805356 'move' call_tmp[805353](805131 call cur _mt[243] _arg2[804851]))
    unknown call_tmp[805358] "expr temp" "maybe param" "maybe type" "temp"
    (805361 'move' call_tmp[805358](805135 call > call_tmp[805348] call_tmp[805353]))
    if call_tmp[805358]
    {
      (805216 'move' ret[805171](805215 'deref' 1))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    unknown call_tmp[805363] "expr temp" "maybe param" "maybe type" "temp"
    (805366 'move' call_tmp[805363](805141 call cur _mt[243] _arg1[804850]))
    unknown call_tmp[805368] "expr temp" "maybe param" "maybe type" "temp"
    (805371 'move' call_tmp[805368](805145 call cur _mt[243] _arg2[804851]))
    unknown call_tmp[805373] "expr temp" "maybe param" "maybe type" "temp"
    (805376 'move' call_tmp[805373](805149 call < call_tmp[805363] call_tmp[805368]))
    if call_tmp[805373]
    {
      (805221 'move' ret[805171](805220 'deref' 0))
      gotoReturn _end_>[805169] _end_>[805169]
    }
    (805226 'move' ret[805171](805225 'deref' 0))
    label _end_>[805169]
    (805173 return ret[805171])
  }
  where {
    unknown call_tmp[805378] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805381 'move' call_tmp[805378](804854 'typeof' _arg1[804850]))
    unknown call_tmp[805383] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805386 'move' call_tmp[805383](804856 'typeof' _arg2[804851]))
    unknown call_tmp[805388] "expr temp" "maybe param" "maybe type" "temp"
    (805391 'move' call_tmp[805388](804858 call == call_tmp[805378] call_tmp[805383]))
    unknown call_tmp[805393] "expr temp" "maybe param" "maybe type" "temp"
    (805396 'move' call_tmp[805393](805009 call chpl_fields_are_comparable[804860] _arg1[804850] _arg2[804851]))
    (805013 '&' call_tmp[805388] call_tmp[805393])
  }
  function chpl_fields_are_comparable[805410](arg _arg1[805412]:SparseIndexBuffer[148231](?), arg _arg2[805413]:SparseIndexBuffer[148231](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[805472]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[805479] "expr temp" "maybe param" "maybe type" "temp"
    (805482 'move' call_tmp[805479](805416 call rank _mt[243] _arg1[805412]))
    unknown call_tmp[805484] "expr temp" "maybe param" "maybe type" "temp"
    (805487 'move' call_tmp[805484](805420 call rank _mt[243] _arg2[805413]))
    unknown call_tmp[805489] "expr temp" "maybe param" "maybe type" "temp"
    (805492 'move' call_tmp[805489](805424 'call resolves' c">=" call_tmp[805479] call_tmp[805484]))
    unknown call_tmp[805494] "expr temp" "maybe param" "maybe type" "temp"
    (805497 'move' call_tmp[805494](805426 call obj _mt[243] _arg1[805412]))
    unknown call_tmp[805499] "expr temp" "maybe param" "maybe type" "temp"
    (805502 'move' call_tmp[805499](805430 call obj _mt[243] _arg2[805413]))
    unknown call_tmp[805504] "expr temp" "maybe param" "maybe type" "temp"
    (805507 'move' call_tmp[805504](805434 'call resolves' c">=" call_tmp[805494] call_tmp[805499]))
    unknown call_tmp[805509] "expr temp" "maybe param" "maybe type" "temp"
    (805512 'move' call_tmp[805509](805436 call bufDom _mt[243] _arg1[805412]))
    unknown call_tmp[805514] "expr temp" "maybe param" "maybe type" "temp"
    (805517 'move' call_tmp[805514](805440 call bufDom _mt[243] _arg2[805413]))
    unknown call_tmp[805519] "expr temp" "maybe param" "maybe type" "temp"
    (805522 'move' call_tmp[805519](805444 'call resolves' c">=" call_tmp[805509] call_tmp[805514]))
    unknown call_tmp[805524] "expr temp" "maybe param" "maybe type" "temp"
    (805527 'move' call_tmp[805524](805446 call buf _mt[243] _arg1[805412]))
    unknown call_tmp[805529] "expr temp" "maybe param" "maybe type" "temp"
    (805532 'move' call_tmp[805529](805450 call buf _mt[243] _arg2[805413]))
    unknown call_tmp[805534] "expr temp" "maybe param" "maybe type" "temp"
    (805537 'move' call_tmp[805534](805454 'call resolves' c">=" call_tmp[805524] call_tmp[805529]))
    unknown call_tmp[805539] "expr temp" "maybe param" "maybe type" "temp"
    (805542 'move' call_tmp[805539](805456 call cur _mt[243] _arg1[805412]))
    unknown call_tmp[805544] "expr temp" "maybe param" "maybe type" "temp"
    (805547 'move' call_tmp[805544](805460 call cur _mt[243] _arg2[805413]))
    unknown call_tmp[805549] "expr temp" "maybe param" "maybe type" "temp"
    (805552 'move' call_tmp[805549](805464 'call resolves' c">=" call_tmp[805539] call_tmp[805544]))
    unknown call_tmp[805554] "expr temp" "maybe param" "maybe type" "temp"
    (805557 'move' call_tmp[805554](805466 '&' call_tmp[805489] call_tmp[805504] call_tmp[805519] call_tmp[805534] call_tmp[805549]))
    (805477 'move' ret[805472](805476 'deref' call_tmp[805554]))
    (805474 return ret[805472])
  }
  function >=[805398](arg _arg1[805400]:SparseIndexBuffer[148231](?), arg _arg2[805401]:SparseIndexBuffer[148231](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[805721]:bool[10] "RVV" "temp"
    unknown call_tmp[805778] "expr temp" "maybe param" "maybe type" "temp"
    (805781 'move' call_tmp[805778](805565 call rank _mt[243] _arg1[805400]))
    unknown call_tmp[805783] "expr temp" "maybe param" "maybe type" "temp"
    (805786 'move' call_tmp[805783](805569 call rank _mt[243] _arg2[805401]))
    unknown call_tmp[805788] "expr temp" "maybe param" "maybe type" "temp"
    (805791 'move' call_tmp[805788](805573 call > call_tmp[805778] call_tmp[805783]))
    if call_tmp[805788]
    {
      (805726 'move' ret[805721](805725 'deref' 1))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805793] "expr temp" "maybe param" "maybe type" "temp"
    (805796 'move' call_tmp[805793](805579 call rank _mt[243] _arg1[805400]))
    unknown call_tmp[805798] "expr temp" "maybe param" "maybe type" "temp"
    (805801 'move' call_tmp[805798](805583 call rank _mt[243] _arg2[805401]))
    unknown call_tmp[805803] "expr temp" "maybe param" "maybe type" "temp"
    (805806 'move' call_tmp[805803](805587 call < call_tmp[805793] call_tmp[805798]))
    if call_tmp[805803]
    {
      (805731 'move' ret[805721](805730 'deref' 0))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805808] "expr temp" "maybe param" "maybe type" "temp"
    (805811 'move' call_tmp[805808](805593 call obj _mt[243] _arg1[805400]))
    unknown call_tmp[805813] "expr temp" "maybe param" "maybe type" "temp"
    (805816 'move' call_tmp[805813](805597 call obj _mt[243] _arg2[805401]))
    unknown call_tmp[805818] "expr temp" "maybe param" "maybe type" "temp"
    (805821 'move' call_tmp[805818](805601 call > call_tmp[805808] call_tmp[805813]))
    if call_tmp[805818]
    {
      (805736 'move' ret[805721](805735 'deref' 1))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805823] "expr temp" "maybe param" "maybe type" "temp"
    (805826 'move' call_tmp[805823](805607 call obj _mt[243] _arg1[805400]))
    unknown call_tmp[805828] "expr temp" "maybe param" "maybe type" "temp"
    (805831 'move' call_tmp[805828](805611 call obj _mt[243] _arg2[805401]))
    unknown call_tmp[805833] "expr temp" "maybe param" "maybe type" "temp"
    (805836 'move' call_tmp[805833](805615 call < call_tmp[805823] call_tmp[805828]))
    if call_tmp[805833]
    {
      (805741 'move' ret[805721](805740 'deref' 0))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805838] "expr temp" "maybe param" "maybe type" "temp"
    (805841 'move' call_tmp[805838](805621 call bufDom _mt[243] _arg1[805400]))
    unknown call_tmp[805843] "expr temp" "maybe param" "maybe type" "temp"
    (805846 'move' call_tmp[805843](805625 call bufDom _mt[243] _arg2[805401]))
    unknown call_tmp[805848] "expr temp" "maybe param" "maybe type" "temp"
    (805851 'move' call_tmp[805848](805629 call > call_tmp[805838] call_tmp[805843]))
    if call_tmp[805848]
    {
      (805746 'move' ret[805721](805745 'deref' 1))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805853] "expr temp" "maybe param" "maybe type" "temp"
    (805856 'move' call_tmp[805853](805635 call bufDom _mt[243] _arg1[805400]))
    unknown call_tmp[805858] "expr temp" "maybe param" "maybe type" "temp"
    (805861 'move' call_tmp[805858](805639 call bufDom _mt[243] _arg2[805401]))
    unknown call_tmp[805863] "expr temp" "maybe param" "maybe type" "temp"
    (805866 'move' call_tmp[805863](805643 call < call_tmp[805853] call_tmp[805858]))
    if call_tmp[805863]
    {
      (805751 'move' ret[805721](805750 'deref' 0))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805868] "expr temp" "maybe param" "maybe type" "temp"
    (805871 'move' call_tmp[805868](805649 call buf _mt[243] _arg1[805400]))
    unknown call_tmp[805873] "expr temp" "maybe param" "maybe type" "temp"
    (805876 'move' call_tmp[805873](805653 call buf _mt[243] _arg2[805401]))
    unknown call_tmp[805878] "expr temp" "maybe param" "maybe type" "temp"
    (805881 'move' call_tmp[805878](805657 call > call_tmp[805868] call_tmp[805873]))
    if call_tmp[805878]
    {
      (805756 'move' ret[805721](805755 'deref' 1))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805883] "expr temp" "maybe param" "maybe type" "temp"
    (805886 'move' call_tmp[805883](805663 call buf _mt[243] _arg1[805400]))
    unknown call_tmp[805888] "expr temp" "maybe param" "maybe type" "temp"
    (805891 'move' call_tmp[805888](805667 call buf _mt[243] _arg2[805401]))
    unknown call_tmp[805893] "expr temp" "maybe param" "maybe type" "temp"
    (805896 'move' call_tmp[805893](805671 call < call_tmp[805883] call_tmp[805888]))
    if call_tmp[805893]
    {
      (805761 'move' ret[805721](805760 'deref' 0))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805898] "expr temp" "maybe param" "maybe type" "temp"
    (805901 'move' call_tmp[805898](805677 call cur _mt[243] _arg1[805400]))
    unknown call_tmp[805903] "expr temp" "maybe param" "maybe type" "temp"
    (805906 'move' call_tmp[805903](805681 call cur _mt[243] _arg2[805401]))
    unknown call_tmp[805908] "expr temp" "maybe param" "maybe type" "temp"
    (805911 'move' call_tmp[805908](805685 call > call_tmp[805898] call_tmp[805903]))
    if call_tmp[805908]
    {
      (805766 'move' ret[805721](805765 'deref' 1))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    unknown call_tmp[805913] "expr temp" "maybe param" "maybe type" "temp"
    (805916 'move' call_tmp[805913](805691 call cur _mt[243] _arg1[805400]))
    unknown call_tmp[805918] "expr temp" "maybe param" "maybe type" "temp"
    (805921 'move' call_tmp[805918](805695 call cur _mt[243] _arg2[805401]))
    unknown call_tmp[805923] "expr temp" "maybe param" "maybe type" "temp"
    (805926 'move' call_tmp[805923](805699 call < call_tmp[805913] call_tmp[805918]))
    if call_tmp[805923]
    {
      (805771 'move' ret[805721](805770 'deref' 0))
      gotoReturn _end_>=[805719] _end_>=[805719]
    }
    (805776 'move' ret[805721](805775 'deref' 1))
    label _end_>=[805719]
    (805723 return ret[805721])
  }
  where {
    unknown call_tmp[805928] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805931 'move' call_tmp[805928](805404 'typeof' _arg1[805400]))
    unknown call_tmp[805933] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (805936 'move' call_tmp[805933](805406 'typeof' _arg2[805401]))
    unknown call_tmp[805938] "expr temp" "maybe param" "maybe type" "temp"
    (805941 'move' call_tmp[805938](805408 call == call_tmp[805928] call_tmp[805933]))
    unknown call_tmp[805943] "expr temp" "maybe param" "maybe type" "temp"
    (805946 'move' call_tmp[805943](805559 call chpl_fields_are_comparable[805410] _arg1[805400] _arg2[805401]))
    (805563 '&' call_tmp[805938] call_tmp[805943])
  }
  function =[805948](ref arg _arg1[805950]:SparseIndexBuffer[148231](?), const?  ref arg _arg2[805951]:SparseIndexBuffer[148231](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[806010] "expr temp" "maybe param" "maybe type" "temp"
    (806013 'move' call_tmp[806010](805961 call obj _mt[243] _arg1[805950]))
    unknown call_tmp[806017] "expr temp" "maybe param" "maybe type" "temp"
    (806020 'move' call_tmp[806017](805965 call obj _mt[243] _arg2[805951]))
    (805969 call = call_tmp[806010] call_tmp[806017])
    (806002 'end of statement')
    unknown call_tmp[806024] "expr temp" "maybe param" "maybe type" "temp"
    (806027 'move' call_tmp[806024](805971 call bufDom _mt[243] _arg1[805950]))
    unknown call_tmp[806031] "expr temp" "maybe param" "maybe type" "temp"
    (806034 'move' call_tmp[806031](805975 call bufDom _mt[243] _arg2[805951]))
    (805979 call = call_tmp[806024] call_tmp[806031])
    (806003 'end of statement')
    unknown call_tmp[806038] "expr temp" "maybe param" "maybe type" "temp"
    (806041 'move' call_tmp[806038](805981 call buf _mt[243] _arg1[805950]))
    unknown call_tmp[806045] "expr temp" "maybe param" "maybe type" "temp"
    (806048 'move' call_tmp[806045](805985 call buf _mt[243] _arg2[805951]))
    (805989 call = call_tmp[806038] call_tmp[806045])
    (806004 'end of statement')
    unknown call_tmp[806052] "expr temp" "maybe param" "maybe type" "temp"
    (806055 'move' call_tmp[806052](805991 call cur _mt[243] _arg1[805950]))
    unknown call_tmp[806059] "expr temp" "maybe param" "maybe type" "temp"
    (806062 'move' call_tmp[806059](805995 call cur _mt[243] _arg2[805951]))
    (805999 call = call_tmp[806052] call_tmp[806059])
    (806006 return _void[55])
  }
  where {
    unknown call_tmp[806064] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (806067 'move' call_tmp[806064](805954 'typeof' _arg1[805950]))
    unknown call_tmp[806069] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (806072 'move' call_tmp[806069](805956 'typeof' _arg2[805951]))
    (805958 call == call_tmp[806064] call_tmp[806069])
  }
  function chpl__defaultHash[806074](arg r[806076]:SparseIndexBuffer[148231](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[806134] "RVV" "temp"
    unknown call_tmp[806141] "expr temp" "maybe param" "maybe type" "temp"
    (806144 'move' call_tmp[806141](806120 call cur _mt[243] r[806076]))
    unknown call_tmp[806146] "expr temp" "maybe param" "maybe type" "temp"
    (806149 'move' call_tmp[806146](806124 call chpl__defaultHash call_tmp[806141]))
    unknown call_tmp[806151] "expr temp" "maybe param" "maybe type" "temp"
    (806154 'move' call_tmp[806151](806111 call buf _mt[243] r[806076]))
    unknown call_tmp[806156] "expr temp" "maybe param" "maybe type" "temp"
    (806159 'move' call_tmp[806156](806115 call chpl__defaultHash call_tmp[806151]))
    unknown call_tmp[806161] "expr temp" "maybe param" "maybe type" "temp"
    (806164 'move' call_tmp[806161](806102 call bufDom _mt[243] r[806076]))
    unknown call_tmp[806166] "expr temp" "maybe param" "maybe type" "temp"
    (806169 'move' call_tmp[806166](806106 call chpl__defaultHash call_tmp[806161]))
    unknown call_tmp[806171] "expr temp" "maybe param" "maybe type" "temp"
    (806174 'move' call_tmp[806171](806093 call idxType _mt[243] r[806076]))
    unknown call_tmp[806176] "expr temp" "maybe param" "maybe type" "temp"
    (806179 'move' call_tmp[806176](806097 call chpl__defaultHash call_tmp[806171]))
    unknown call_tmp[806181] "expr temp" "maybe param" "maybe type" "temp"
    (806184 'move' call_tmp[806181](806084 call obj _mt[243] r[806076]))
    unknown call_tmp[806186] "expr temp" "maybe param" "maybe type" "temp"
    (806189 'move' call_tmp[806186](806088 call chpl__defaultHash call_tmp[806181]))
    unknown call_tmp[806191] "expr temp" "maybe param" "maybe type" "temp"
    (806194 'move' call_tmp[806191](806078 call rank _mt[243] r[806076]))
    unknown call_tmp[806196] "expr temp" "maybe param" "maybe type" "temp"
    (806199 'move' call_tmp[806196](806082 call chpl__defaultHash call_tmp[806191]))
    unknown call_tmp[806201] "expr temp" "maybe param" "maybe type" "temp"
    (806204 'move' call_tmp[806201](806090 call chpl__defaultHashCombine call_tmp[806186] call_tmp[806196] 2))
    unknown call_tmp[806206] "expr temp" "maybe param" "maybe type" "temp"
    (806209 'move' call_tmp[806206](806099 call chpl__defaultHashCombine call_tmp[806176] call_tmp[806201] 3))
    unknown call_tmp[806211] "expr temp" "maybe param" "maybe type" "temp"
    (806214 'move' call_tmp[806211](806108 call chpl__defaultHashCombine call_tmp[806166] call_tmp[806206] 4))
    unknown call_tmp[806216] "expr temp" "maybe param" "maybe type" "temp"
    (806219 'move' call_tmp[806216](806117 call chpl__defaultHashCombine call_tmp[806156] call_tmp[806211] 5))
    unknown call_tmp[806221] "expr temp" "maybe param" "maybe type" "temp"
    (806224 'move' call_tmp[806221](806126 call chpl__defaultHashCombine call_tmp[806146] call_tmp[806216] 6))
    (806139 'move' ret[806134](806138 'deref' call_tmp[806221]))
    (806136 return ret[806134])
  }
  type SparseIndexBuffer[148231](?) unknown rank[148049] "param" int(64)[13] val obj[148054]:BaseSparseDom[382296](?) BaseSparseDom[382296](?) unknown idxType[148070] "type variable"(148067 IfExpr (148060 call == rank[148049] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (148065 call * rank[148049] int(64)[13])
  } ) unknown bufDom[148078](148076 call chpl__buildDomainRuntimeType defaultDist[94053] 1) unknown buf[148089](148087 call chpl__buildArrayRuntimeType(148085 call chpl__ensureDomainExpr bufDom[148078]) idxType[148070]) val cur[148094]:int(64)[13] 0
  function BaseSparseDom[148708](?).getNNZ[148267](arg _mt[148712]:_MT[238], arg this[148710]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520071] "RVV" "temp"
    (148289 call halt "nnz queried on base class")
    (520073 return ret[520071])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).deinit[148297](arg _mt[148716]:_MT[238], arg this[148714]:BaseSparseDom[148708](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520075 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiClear[148304](arg _mt[148720]:_MT[238], arg this[148718]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148325 call halt "clear not implemented for this distribution - BaseSparseDom")
    (520077 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiBulkAdd[148343](arg _mt[148724]:_MT[238], arg this[148722]:BaseSparseDom[148708](?), arg inds[148340]:_array[133594](?), arg dataSorted[148346] :
  0 =
  0, arg isUnique[148350] :
  0 =
  0, arg preserveInds[148354] :
  1 =
  1, arg addOn[148358] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520081] "RVV" "temp"
    (148381 call halt "Bulk addition is not supported by this sparse domain")
    (481591 'end of statement')
    (520087 'move' ret[520081](520086 'coerce' 0 int(64)[13]))
    (520083 return ret[520081])
  }
  where {
    unknown call_tmp[668911] "expr temp" "maybe param" "maybe type" "temp"
    (668914 'move' call_tmp[668911](385816 call rank _mt[243] this[148722]))
    unknown call_tmp[668918] "expr temp" "maybe param" "maybe type" "temp"
    (668921 'move' call_tmp[668918](385821 call idxType _mt[243] this[148722]))
    unknown call_tmp[668923] "expr temp" "maybe param" "maybe type" "temp"
    (668926 'move' call_tmp[668923](148335 call chpl__buildIndexType call_tmp[668911] call_tmp[668918]))
    unknown call_tmp[668930] "expr temp" "maybe param" "maybe type" "temp"
    (668933 'move' call_tmp[668930](461852 call eltType _mt[243] inds[148340]))
    unknown call_tmp[668935] "expr temp" "maybe param" "maybe type" "temp"
    (668938 'move' call_tmp[668935](461856 call == call_tmp[668923] call_tmp[668930]))
    (461850 call & 1 call_tmp[668935])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).boundsCheck[148400](arg _mt[148728]:_MT[238], arg this[148726]:BaseSparseDom[148708](?), arg ind[148397] :
  unknown call_tmp[668942] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520091] "RVV" "temp"
    unknown call_tmp[668954] "expr temp" "maybe param" "maybe type" "temp"
    (668957 'move' call_tmp[668954](148459 call _cond_test 1))
    if call_tmp[668954]
    {
      unknown call_tmp[668961] "expr temp" "maybe param" "maybe type" "temp"
      (668964 'move' call_tmp[668961](360661 call parentDom _mt[243] this[148726]))
      unknown call_tmp[668968] "expr temp" "maybe param" "maybe type" "temp"
      (668971 'move' call_tmp[668968](148410 call(148405 call (partial) contains _mt[243] call_tmp[668961]) ind[148397]))
      unknown call_tmp[668973] "expr temp" "maybe param" "maybe type" "temp"
      (668976 'move' call_tmp[668973](148411 call ! call_tmp[668968]))
      unknown call_tmp[668978] "expr temp" "maybe param" "maybe type" "temp"
      (668981 'move' call_tmp[668978](148454 call _cond_test call_tmp[668973]))
      if call_tmp[668978]
      {
        unknown call_tmp[668985] "expr temp" "maybe param" "maybe type" "temp"
        (668988 'move' call_tmp[668985](385840 call parentDom _mt[243] this[148726]))
        (148452 call halt "Sparse domain/array index out of bounds: " ind[148397] " (expected to be within " call_tmp[668985] ")")
      }
    }
    (520093 return ret[520091])
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148708](?).dsiDim[148474](arg _mt[148732]:_MT[238], arg this[148730]:BaseSparseDom[148708](?), arg d[148471]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520097] "RVV" "temp"
    unknown call_tmp[668992] "expr temp" "maybe param" "maybe type" "temp"
    (668995 'move' call_tmp[668992](360666 call parentDom _mt[243] this[148730]))
    unknown call_tmp[668999] "expr temp" "maybe param" "maybe type" "temp"
    (669002 'move' call_tmp[668999](148482 call(148477 call (partial) dim _mt[243] call_tmp[668992]) d[148471]))
    (520102 'move' ret[520097](520101 'deref' call_tmp[668999]))
    (520099 return ret[520097])
  }
  function BaseSparseDom[148708](?).dsiDims[148490](arg _mt[148736]:_MT[238], arg this[148734]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520106] "RVV" "temp"
    unknown call_tmp[669006] "expr temp" "maybe param" "maybe type" "temp"
    (669009 'move' call_tmp[669006](360671 call parentDom _mt[243] this[148734]))
    unknown call_tmp[669013] "expr temp" "maybe param" "maybe type" "temp"
    (669016 'move' call_tmp[669013](148497 call(148493 call (partial) dims _mt[243] call_tmp[669006])))
    (520111 'move' ret[520106](520110 'deref' call_tmp[669013]))
    (520108 return ret[520106])
  }
  function BaseSparseDom[148708](?).dsiNumIndices[148505](arg _mt[148740]:_MT[238], arg this[148738]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520115] "RVV" "temp"
    unknown call_tmp[669020] "expr temp" "maybe param" "maybe type" "temp"
    (669023 'move' call_tmp[669020](148509 call(385845 call (partial) getNNZ _mt[243] this[148738])))
    (520120 'move' ret[520115](520119 'deref' call_tmp[669020]))
    (520117 return ret[520115])
  }
  function BaseSparseDom[148708](?).dsiSize[148517](arg _mt[148744]:_MT[238], arg this[148742]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520124] "RVV" "temp"
    unknown call_tmp[669027] "expr temp" "maybe param" "maybe type" "temp"
    (669030 'move' call_tmp[669027](148521 call(385849 call (partial) getNNZ _mt[243] this[148742])))
    (520129 'move' ret[520124](520128 'deref' call_tmp[669027]))
    (520126 return ret[520124])
  }
  function BaseSparseDom[148708](?).dsiLow[148529](arg _mt[148748]:_MT[238], arg this[148746]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520133] "RVV" "temp"
    unknown call_tmp[669034] "expr temp" "maybe param" "maybe type" "temp"
    (669037 'move' call_tmp[669034](360676 call parentDom _mt[243] this[148746]))
    unknown call_tmp[669041] "expr temp" "maybe param" "maybe type" "temp"
    (669044 'move' call_tmp[669041](148532 call low _mt[243] call_tmp[669034]))
    (520138 'move' ret[520133](520137 'deref' call_tmp[669041]))
    (520135 return ret[520133])
  }
  function BaseSparseDom[148708](?).dsiHigh[148542](arg _mt[148752]:_MT[238], arg this[148750]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520142] "RVV" "temp"
    unknown call_tmp[669048] "expr temp" "maybe param" "maybe type" "temp"
    (669051 'move' call_tmp[669048](360681 call parentDom _mt[243] this[148750]))
    unknown call_tmp[669055] "expr temp" "maybe param" "maybe type" "temp"
    (669058 'move' call_tmp[669055](148545 call high _mt[243] call_tmp[669048]))
    (520147 'move' ret[520142](520146 'deref' call_tmp[669055]))
    (520144 return ret[520142])
  }
  function BaseSparseDom[148708](?).dsiStride[148555](arg _mt[148756]:_MT[238], arg this[148754]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520151] "RVV" "temp"
    unknown call_tmp[669062] "expr temp" "maybe param" "maybe type" "temp"
    (669065 'move' call_tmp[669062](360686 call parentDom _mt[243] this[148754]))
    unknown call_tmp[669069] "expr temp" "maybe param" "maybe type" "temp"
    (669072 'move' call_tmp[669069](148558 call stride _mt[243] call_tmp[669062]))
    (520156 'move' ret[520151](520155 'deref' call_tmp[669069]))
    (520153 return ret[520151])
  }
  function BaseSparseDom[148708](?).dsiAlignment[148568](arg _mt[148760]:_MT[238], arg this[148758]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520160] "RVV" "temp"
    unknown call_tmp[669076] "expr temp" "maybe param" "maybe type" "temp"
    (669079 'move' call_tmp[669076](360691 call parentDom _mt[243] this[148758]))
    unknown call_tmp[669083] "expr temp" "maybe param" "maybe type" "temp"
    (669086 'move' call_tmp[669083](148571 call alignment _mt[243] call_tmp[669076]))
    (520165 'move' ret[520160](520164 'deref' call_tmp[669083]))
    (520162 return ret[520160])
  }
  function BaseSparseDom[148708](?).dsiFirst[148581](arg _mt[148764]:_MT[238], arg this[148762]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520169] "RVV" "temp"
    (148602 call halt "dsiFirst is not implemented")
    (481602 'end of statement')
    const _tmp[148609] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669090] "expr temp" "maybe param" "maybe type" "temp"
    (669093 'move' call_tmp[669090](385854 call rank _mt[243] this[148762]))
    unknown call_tmp[669097] "expr temp" "maybe param" "maybe type" "temp"
    (669100 'move' call_tmp[669097](385859 call idxType _mt[243] this[148762]))
    unknown call_tmp[669102] "expr temp" "maybe param" "maybe type" "temp"
    (669105 'move' call_tmp[669102](148607 call * call_tmp[669090] call_tmp[669097]))
    (543644 'default init var' _tmp[148609] call_tmp[669102])
    (148612 'end of statement')
    (520174 'move' ret[520169](520173 'deref' _tmp[148609]))
    gotoReturn _end_dsiFirst[520167] _end_dsiFirst[520167]
    (481603 'end of statement' _tmp[148609])
    label _end_dsiFirst[520167]
    (520171 return ret[520169])
  }
  function BaseSparseDom[148708](?).dsiLast[148620](arg _mt[148768]:_MT[238], arg this[148766]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520180] "RVV" "temp"
    (148641 call halt "dsiLast not implemented")
    (481605 'end of statement')
    const _tmp[148648] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669109] "expr temp" "maybe param" "maybe type" "temp"
    (669112 'move' call_tmp[669109](385865 call rank _mt[243] this[148766]))
    unknown call_tmp[669116] "expr temp" "maybe param" "maybe type" "temp"
    (669119 'move' call_tmp[669116](385870 call idxType _mt[243] this[148766]))
    unknown call_tmp[669121] "expr temp" "maybe param" "maybe type" "temp"
    (669124 'move' call_tmp[669121](148646 call * call_tmp[669109] call_tmp[669116]))
    (543646 'default init var' _tmp[148648] call_tmp[669121])
    (148651 'end of statement')
    (520185 'move' ret[520180](520184 'deref' _tmp[148648]))
    gotoReturn _end_dsiLast[520178] _end_dsiLast[520178]
    (481606 'end of statement' _tmp[148648])
    label _end_dsiLast[520178]
    (520182 return ret[520180])
  }
  function BaseSparseDom[148708](?).dsiAlignedLow[148659](arg _mt[148772]:_MT[238], arg this[148770]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520191] "RVV" "temp"
    unknown call_tmp[669128] "expr temp" "maybe param" "maybe type" "temp"
    (669131 'move' call_tmp[669128](360696 call parentDom _mt[243] this[148770]))
    unknown call_tmp[669135] "expr temp" "maybe param" "maybe type" "temp"
    (669138 'move' call_tmp[669135](148662 call alignedLow _mt[243] call_tmp[669128]))
    (520196 'move' ret[520191](520195 'deref' call_tmp[669135]))
    (520193 return ret[520191])
  }
  function BaseSparseDom[148708](?).dsiAlignedHigh[148672](arg _mt[148776]:_MT[238], arg this[148774]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520200] "RVV" "temp"
    unknown call_tmp[669142] "expr temp" "maybe param" "maybe type" "temp"
    (669145 'move' call_tmp[669142](360701 call parentDom _mt[243] this[148774]))
    unknown call_tmp[669149] "expr temp" "maybe param" "maybe type" "temp"
    (669152 'move' call_tmp[669149](148675 call alignedHigh _mt[243] call_tmp[669142]))
    (520205 'move' ret[520200](520204 'deref' call_tmp[669149]))
    (520202 return ret[520200])
  }
  function BaseSparseDom[148708](?).dsiMakeIndexBuffer[148687](arg _mt[148780]:_MT[238], arg this[148778]:BaseSparseDom[148708](?), arg size[148685]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520209] "RVV" "temp"
    unknown call_tmp[669156] "expr temp" "maybe param" "maybe type" "temp"
    (669159 'move' call_tmp[669156](148692 call rank _mt[243] this[148778]))
    unknown call_tmp[669161] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (669164 'move' call_tmp[669161](747954 'new' SparseIndexBuffer[148231](?)(rank = call_tmp[669156])(obj = this[148778])(size = size[148685])))
    (520214 'move' ret[520209](520213 'deref' call_tmp[669161]))
    (520211 return ret[520209])
  }
  function BaseSparseDom[148708](?).init[802234](arg _mt[802236]:_MT[238], arg this[802237]:BaseSparseDom[148708](?), param arg rank[802248]:int(64)[13], arg idxType[802260]:_any[178](?), in arg parentDom[802269]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[802280] "temporary of super field" "temp"
    (802282 'move' super_tmp[802280](802279 '.v' this[802237] c"super"))
    (802247 call(802245 call (partial) init _mt[243] super_tmp[802280]))
    (802315 'end of statement')
    unknown tmp[802285] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[802319] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[802331] "expr temp" "maybe param" "maybe type" "temp"
      (802334 'move' call_tmp[802331](802287 '.v' this[802237] c"super"))
      (802323 'move' call_type_tmp[802319](802290 'typeof' call_tmp[802331]))
    }
    (802291 'move' tmp[802285] call_type_tmp[802319])
    unknown call_tmp[802336] "maybe param" "maybe type" "temp"
    (802339 'move' call_tmp[802336](802296 'cast' tmp[802285] this[802237]))
    unknown chpl__thisAsParent[802293] "dead at end of block" "insert auto destroy" "temp"
    (802327 'init var' chpl__thisAsParent[802293] call_tmp[802336] tmp[802285])
    (802299 'setcid' chpl__thisAsParent[802293])
    unknown call_tmp[802341] "expr temp" "maybe param" "maybe type" "temp"
    (802344 'move' call_tmp[802341](802302 call _cast int(64)[13] rank[802248]))
    (802304 'init field' this[802237] c"rank" call_tmp[802341])
    (802316 'end of statement')
    (802307 'init field' this[802237] c"idxType" idxType[802260])
    (802310 'init field' this[802237] c"parentDom" parentDom[802269])
    (802317 'end of statement')
    (802313 'setcid' this[802237])
    (802325 return _void[55])
  }
  function BaseSparseDom[148708](?).super[806226](arg _mt[806228]:_MT[238], arg this[806230]:BaseSparseDom[148708](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806240] "RVV" "temp"
    unknown call_tmp[806247] "expr temp" "maybe param" "maybe type" "temp"
    (806250 'move' call_tmp[806247](806234 '.v' this[806230] c"super"))
    (806245 'move' ret[806240](806244 'deref' call_tmp[806247]))
    (806242 return ret[806240])
  }
  function BaseSparseDom[806257](?).rank[806252](arg _mt[806254]:_MT[238], arg this[806259]:BaseSparseDom[806257](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806290] "RVV" "param" "temp"
    unknown borrowOfThis[806261]
    (806282 'end of statement')
    (806263 'move' borrowOfThis[806261](806266 call _cast _borrowedNonNilable[214](?) this[806259]))
    (806283 'end of statement' borrowOfThis[806261])
    unknown call_tmp[806304] "expr temp" "maybe param" "maybe type" "temp"
    (806307 'move' call_tmp[806304](806272 'is bound' borrowOfThis[806261] c"rank"))
    if call_tmp[806304]
    {
      unknown call_tmp[806309] "expr temp" "maybe param" "maybe type" "temp"
      (806312 'move' call_tmp[806309](806271 '.' borrowOfThis[806261] c"rank"))
      (806295 'move' ret[806290](806294 'deref' call_tmp[806309]))
      gotoReturn _end_rank[806288] _end_rank[806288]
      (806285 'end of statement' borrowOfThis[806261])
    }
    {
      (806300 'move' ret[806290](806299 'deref' ?[260]))
      gotoReturn _end_rank[806288] _end_rank[806288]
    }
    label _end_rank[806288]
    (806292 return ret[806290])
  }
  function BaseSparseDom[806257](?).rank[806314](arg _mt[806316]:_MT[238], arg this[806318]:BaseSparseDom[806257](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806349] "RVV" "param" "temp"
    unknown borrowOfThis[806320] "type variable"
    (806341 'end of statement')
    (806322 'move' borrowOfThis[806320](806325 call _cast _borrowedNonNilable[214](?) this[806318]))
    (806342 'end of statement' borrowOfThis[806320])
    unknown call_tmp[806363] "expr temp" "maybe param" "maybe type" "temp"
    (806366 'move' call_tmp[806363](806331 'is bound' borrowOfThis[806320] c"rank"))
    if call_tmp[806363]
    {
      unknown call_tmp[806368] "expr temp" "maybe param" "maybe type" "temp"
      (806371 'move' call_tmp[806368](806330 '.' borrowOfThis[806320] c"rank"))
      (806354 'move' ret[806349](806353 'deref' call_tmp[806368]))
      gotoReturn _end_rank[806347] _end_rank[806347]
      (806344 'end of statement' borrowOfThis[806320])
    }
    {
      (806359 'move' ret[806349](806358 'deref' ?[260]))
      gotoReturn _end_rank[806347] _end_rank[806347]
    }
    label _end_rank[806347]
    (806351 return ret[806349])
  }
  function BaseSparseDom[806257](?).idxType[806373](arg _mt[806375]:_MT[238], arg this[806377]:BaseSparseDom[806257](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806412] "RVV" "temp" "type variable"
    unknown borrowOfThis[806379]
    (806404 'end of statement')
    (806381 'move' borrowOfThis[806379](806384 call _cast _borrowedNonNilable[214](?) this[806377]))
    (806405 'end of statement' borrowOfThis[806379])
    unknown call_tmp[806426] "expr temp" "maybe param" "maybe type" "temp"
    (806429 'move' call_tmp[806426](806394 'is bound' borrowOfThis[806379] c"idxType"))
    if call_tmp[806426]
    {
      unknown call_tmp[806431] "expr temp" "maybe param" "maybe type" "temp"
      (806434 'move' call_tmp[806431](806389 '.v' borrowOfThis[806379] c"idxType"))
      unknown call_tmp[806436] "expr temp" "maybe param" "maybe type" "temp"
      (806439 'move' call_tmp[806436](806390 call chpl_checkLegalTypeFieldAccessor this[806377] call_tmp[806431] "idxType"))
      (806417 'move' ret[806412](806416 'deref' call_tmp[806436]))
      gotoReturn _end_idxType[806410] _end_idxType[806410]
      (806407 'end of statement' borrowOfThis[806379])
    }
    {
      (806422 'move' ret[806412](806421 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[806410] _end_idxType[806410]
    }
    label _end_idxType[806410]
    (806414 return ret[806412])
  }
  function BaseSparseDom[806257](?).idxType[806441](arg _mt[806443]:_MT[238], arg this[806445]:BaseSparseDom[806257](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806480] "RVV" "temp" "type variable"
    unknown borrowOfThis[806447] "type variable"
    (806472 'end of statement')
    (806449 'move' borrowOfThis[806447](806452 call _cast _borrowedNonNilable[214](?) this[806445]))
    (806473 'end of statement' borrowOfThis[806447])
    unknown call_tmp[806494] "expr temp" "maybe param" "maybe type" "temp"
    (806497 'move' call_tmp[806494](806462 'is bound' borrowOfThis[806447] c"idxType"))
    if call_tmp[806494]
    {
      unknown call_tmp[806499] "expr temp" "maybe param" "maybe type" "temp"
      (806502 'move' call_tmp[806499](806457 '.v' borrowOfThis[806447] c"idxType"))
      unknown call_tmp[806504] "expr temp" "maybe param" "maybe type" "temp"
      (806507 'move' call_tmp[806504](806458 call chpl_checkLegalTypeFieldAccessor this[806445] call_tmp[806499] "idxType"))
      (806485 'move' ret[806480](806484 'deref' call_tmp[806504]))
      gotoReturn _end_idxType[806478] _end_idxType[806478]
      (806475 'end of statement' borrowOfThis[806447])
    }
    {
      (806490 'move' ret[806480](806489 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[806478] _end_idxType[806478]
    }
    label _end_idxType[806478]
    (806482 return ret[806480])
  }
  function BaseSparseDom[148708](?).parentDom[806509](arg _mt[806511]:_MT[238], arg this[806513]:BaseSparseDom[148708](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806523] "RVV" "temp"
    unknown call_tmp[806530] "expr temp" "maybe param" "maybe type" "temp"
    (806533 'move' call_tmp[806530](806517 '.' this[806513] c"parentDom"))
    (806528 'move' ret[806523](806527 'addr of' call_tmp[806530]))
    (806525 return ret[806523])
  }
  function BaseSparseDom[148708](?).writeThis[806535](arg _mt[806539]:_MT[238], arg this[806537]:BaseSparseDom[148708](?), arg f[806538]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806544 call writeThisDefaultImpl f[806538] this[806537])
    (806549 return _void[55])
  }
  function BaseSparseDom[148708](?).readThis[806551](arg _mt[806555]:_MT[238], arg this[806553]:BaseSparseDom[148708](?), arg f[806554]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806559 call readThisDefaultImpl f[806554] this[806553])
    (806565 return _void[55])
  }
  type BaseSparseDom[148708](?) val super[355715]:BaseDom[146767] "super class" unknown rank[148254] "param" int(64)[13] unknown idxType[148258] "type variable" unknown parentDom[148261]
  type BaseSparseDom[806257](?)
  type BaseSparseDom[382296](?)
  function BaseAssociativeDom[148855].deinit[148788](arg _mt[148859]:_MT[238], arg this[148857]:BaseAssociativeDom[148855]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520216 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiClear[148795](arg _mt[148863]:_MT[238], arg this[148861]:BaseAssociativeDom[148855]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148816 call halt "clear not implemented for this distribution")
    (520218 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiAdd[148825](arg _mt[148867]:_MT[238], arg this[148865]:BaseAssociativeDom[148855], in arg idx[148823]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520222] "RVV" "temp"
    (148846 call compilerError "Index addition is not supported by this domain")
    (481612 'end of statement')
    (520227 'move' ret[520222](520226 'deref' 0))
    (520224 return ret[520222])
  }
  function BaseAssociativeDom[148855].super[806567](arg _mt[806569]:_MT[238], arg this[806571]:BaseAssociativeDom[148855]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806581] "RVV" "temp"
    unknown call_tmp[806588] "expr temp" "maybe param" "maybe type" "temp"
    (806591 'move' call_tmp[806588](806575 '.v' this[806571] c"super"))
    (806586 'move' ret[806581](806585 'deref' call_tmp[806588]))
    (806583 return ret[806581])
  }
  function BaseAssociativeDom[148855].init[806593](arg _mt[806595]:_MT[238], arg this[806596]:BaseAssociativeDom[148855]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[806609] "temporary of super field" "temp"
    (806611 'move' super_tmp[806609](806608 '.v' this[806596] c"super"))
    (806606 call(806604 call (partial) init _mt[243] super_tmp[806609]))
    (806632 'end of statement')
    unknown tmp[806614] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[806635] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[806647] "expr temp" "maybe param" "maybe type" "temp"
      (806650 'move' call_tmp[806647](806616 '.v' this[806596] c"super"))
      (806639 'move' call_type_tmp[806635](806619 'typeof' call_tmp[806647]))
    }
    (806620 'move' tmp[806614] call_type_tmp[806635])
    unknown call_tmp[806652] "maybe param" "maybe type" "temp"
    (806655 'move' call_tmp[806652](806625 'cast' tmp[806614] this[806596]))
    unknown chpl__thisAsParent[806622] "dead at end of block" "insert auto destroy" "temp"
    (806643 'init var' chpl__thisAsParent[806622] call_tmp[806652] tmp[806614])
    (806628 'setcid' chpl__thisAsParent[806622])
    (806633 'end of statement')
    (806630 'setcid' this[806596])
    (806641 return _void[55])
  }
  function BaseAssociativeDom[148855].writeThis[806657](arg _mt[806661]:_MT[238], arg this[806659]:BaseAssociativeDom[148855], arg f[806660]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806666 call writeThisDefaultImpl f[806660] this[806659])
    (806671 return _void[55])
  }
  function BaseAssociativeDom[148855].readThis[806673](arg _mt[806677]:_MT[238], arg this[806675]:BaseAssociativeDom[148855], arg f[806676]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (806681 call readThisDefaultImpl f[806676] this[806675])
    (806687 return _void[55])
  }
  type BaseAssociativeDom[148855] val super[355719]:BaseDom[146767] "super class"
  type BaseAssociativeDom[382291](?)
  function BaseArr[149584].chpl__rvfMe[148885](arg _mt[149588]:_MT[238], arg this[149586]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520231] "RVV" "param" "temp"
    (520236 'move' ret[520231](520235 'deref' 0))
    (520233 return ret[520231])
  }
  function BaseArr[149584].isSliceArrayView[148895](arg _mt[149592]:_MT[238], arg this[149590]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520240] "RVV" "param" "temp"
    (520245 'move' ret[520240](520244 'deref' 0))
    (520242 return ret[520240])
  }
  function BaseArr[149584].isRankChangeArrayView[148905](arg _mt[149596]:_MT[238], arg this[149594]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520249] "RVV" "param" "temp"
    (520254 'move' ret[520249](520253 'deref' 0))
    (520251 return ret[520249])
  }
  function BaseArr[149584].isReindexArrayView[148915](arg _mt[149600]:_MT[238], arg this[149598]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520258] "RVV" "param" "temp"
    (520263 'move' ret[520258](520262 'deref' 0))
    (520260 return ret[520258])
  }
  function BaseArr[149584].deinit[148925](arg _mt[149604]:_MT[238], arg this[149602]:BaseArr[149584]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520265 return _void[55])
  }
  function BaseArr[149584].dsiStaticFastFollowCheck[148934](arg _mt[149608]:_MT[238], arg this[149606]:BaseArr[149584], arg leadType[148932]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520269] "RVV" "param" "temp"
    (520274 'move' ret[520269](520273 'deref' 0))
    (520271 return ret[520269])
  }
  function BaseArr[149584].dsiGetBaseDom[148944](arg _mt[149612]:_MT[238], arg this[149610]:BaseArr[149584]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520278] "RVV" "temp"
    (148967 call halt "internal error: dsiGetBaseDom is not implemented")
    (481619 'end of statement')
    unknown ret[148972] "dead at end of block" "insert auto destroy" "unsafe"
    (543648 'default init var' ret[148972] unmanaged BaseDom[415448])
    (148975 'end of statement')
    (520284 'move' ret[520278](520283 'coerce' ret[148972] unmanaged BaseDom[415448]))
    gotoReturn _end_dsiGetBaseDom[520276] _end_dsiGetBaseDom[520276]
    (481620 'end of statement' ret[148972])
    label _end_dsiGetBaseDom[520276]
    (520280 return ret[520278])
  }
  { scopeless type
    unmanaged BaseDom[415448]
  }
  function BaseArr[149584].remove[148988](arg _mt[149616]:_MT[238], arg this[149614]:BaseArr[149584], param arg rmFromList[148985]:bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[520290] "RVV" "temp"
    unknown ret_arr[148991] "dead at end of block" "insert auto destroy"
    (543650 'init var' ret_arr[148991] this[149614])
    (148994 'end of statement')
    unknown ret_dom[149000] "dead at end of block" "insert auto destroy"
    (543652 'init var' ret_dom[149000] nil[44] unmanaged BaseDom?[415508])
    (149003 'end of statement')
    unknown rm_dom[149005] "dead at end of block" "insert auto destroy"
    (543654 'init var' rm_dom[149005] 0)
    (149008 'end of statement')
    unknown call_tmp[669168] "maybe param" "maybe type" "temp"
    (669171 'move' call_tmp[669168](149011 call(385886 call (partial) dsiGetBaseDom _mt[243] this[149614])))
    unknown dom[149012] "dead at end of block" "insert auto destroy"
    (543656 'init var' dom[149012] call_tmp[669168])
    (149015 'end of statement')
    unknown call_tmp[669175] "expr temp" "maybe param" "maybe type" "temp"
    (669178 'move' call_tmp[669175](149026 call _to_unmanaged this[149614]))
    unknown call_tmp[669180] "expr temp" "maybe param" "maybe type" "temp"
    (669183 'move' call_tmp[669180](149029 call(149020 call (partial) remove_arr _mt[243] dom[149012]) call_tmp[669175] rmFromList[148985]))
    (149030 call = rm_dom[149005] call_tmp[669180])
    (481622 'end of statement' rm_dom[149005] dom[149012])
    unknown call_tmp[669185] "expr temp" "maybe param" "maybe type" "temp"
    (669188 'move' call_tmp[669185](149039 call _cond_test rm_dom[149005]))
    if call_tmp[669185]
    {
      (149036 call = ret_dom[149000] dom[149012])
      (481625 'end of statement' ret_dom[149000] dom[149012])
    }
    unknown call_tmp[669190] "expr temp" "maybe param" "maybe type" "temp"
    (669193 'move' call_tmp[669190](149047 call _build_tuple ret_arr[148991] ret_dom[149000]))
    (520295 'move' ret[520290](520294 'deref' call_tmp[669190]))
    gotoReturn _end_remove[520288] _end_remove[520288]
    (481628 'end of statement' ret_arr[148991] ret_dom[149000])
    label _end_remove[520288]
    (520292 return ret[520290])
  }
  function BaseArr[149584].dsiElementInitializationComplete[149055](arg _mt[149620]:_MT[238], arg this[149618]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149076 call halt "dsiElementInitializationComplete must be defined")
    (520299 return _void[55])
  }
  function BaseArr[149584].dsiElementDeinitializationComplete[149083](arg _mt[149624]:_MT[238], arg this[149622]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149104 call halt "dsiElementDeinitializationComplete must be defined")
    (520301 return _void[55])
  }
  function BaseArr[149584].dsiDestroyArr[149115](arg _mt[149628]:_MT[238], arg this[149626]:BaseArr[149584], arg deinitElts[149112]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149136 call halt "dsiDestroyArr must be defined")
    (520303 return _void[55])
  }
  function BaseArr[149584].dsiReallocate[149147](arg _mt[149632]:_MT[238], arg this[149630]:BaseArr[149584], arg d[149144]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149168 call halt "reallocating not supported for this array type")
    (520305 return _void[55])
  }
  function BaseArr[149584].dsiPostReallocate[149175](arg _mt[149636]:_MT[238], arg this[149634]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520307 return _void[55])
  }
  function BaseArr[149584]._purge[149186](arg _mt[149640]:_MT[238], arg this[149638]:BaseArr[149584], arg ind[149183]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149207 call halt "purging not supported for this array type")
    (520309 return _void[55])
  }
  function BaseArr[149584]._resize[149218](arg _mt[149644]:_MT[238], arg this[149642]:BaseArr[149584], arg length[149215]:int(64)[13], arg old_map[149220]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149241 call halt "resizing not supported for this array type")
    (520311 return _void[55])
  }
  function BaseArr[149584].sparseShiftArray[149250](arg _mt[149648]:_MT[238], arg this[149646]:BaseArr[149584], arg shiftrange[149248]:_any[178](?), arg initrange[149252]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149273 call halt "sparseGrowDomain not supported for non-sparse arrays")
    (520313 return _void[55])
  }
  function BaseArr[149584].sparseShiftArrayBack[149282](arg _mt[149652]:_MT[238], arg this[149650]:BaseArr[149584], arg shiftrange[149280]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149303 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
    (520315 return _void[55])
  }
  function BaseArr[149584].sparseBulkShiftArray[149312](arg _mt[149656]:_MT[238], arg this[149654]:BaseArr[149584], arg shiftMap[149310]:_any[178](?), arg oldnnz[149314]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149335 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
    (520317 return _void[55])
  }
  function BaseArr[149584]._defaultInitSlot[149346](arg _mt[149660]:_MT[238], arg this[149658]:BaseArr[149584], arg slot[149343]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149367 call halt "_defaultInitSlot() not supported for non-associative arrays")
    (520319 return _void[55])
  }
  function BaseArr[149584]._deinitSlot[149378](arg _mt[149664]:_MT[238], arg this[149662]:BaseArr[149584], arg slot[149375]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149399 call halt "_deinitSlot() not supported for non-associative arrays")
    (520321 return _void[55])
  }
  function BaseArr[149584]._startRehash[149410](arg _mt[149668]:_MT[238], arg this[149666]:BaseArr[149584], arg newSize[149407]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149431 call halt "_startRehash() not supported for non-associative arrays")
    (520323 return _void[55])
  }
  function BaseArr[149584]._finishRehash[149442](arg _mt[149672]:_MT[238], arg this[149670]:BaseArr[149584], arg oldSize[149439]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149463 call halt "_finishRehash() not supported for non-associative arrays")
    (520325 return _void[55])
  }
  function BaseArr[149584]._moveElementDuringRehash[149474](arg _mt[149676]:_MT[238], arg this[149674]:BaseArr[149584], arg oldslot[149471]:int(64)[13], arg newslot[149477]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149499 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
    (520327 return _void[55])
  }
  function BaseArr[149584].dsiSupportsAlignedFollower[149506](arg _mt[149680]:_MT[238], arg this[149678]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520331] "RVV" "param" "temp"
    (520336 'move' ret[520331](520335 'deref' 0))
    (520333 return ret[520331])
  }
  function BaseArr[149584].dsiSupportsPrivatization[149516](arg _mt[149684]:_MT[238], arg this[149682]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520340] "RVV" "param" "temp"
    (520345 'move' ret[520340](520344 'deref' 0))
    (520342 return ret[520340])
  }
  function BaseArr[149584].dsiRequiresPrivatization[149526](arg _mt[149688]:_MT[238], arg this[149686]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520349] "RVV" "param" "temp"
    (520354 'move' ret[520349](520353 'deref' 0))
    (520351 return ret[520349])
  }
  function BaseArr[149584].dsiDisplayRepresentation[149536](arg _mt[149692]:_MT[238], arg this[149690]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149541 call writeln "<no way to display representation>")
    (520356 return _void[55])
  }
  function BaseArr[415346](?).isDefaultRectangular[149548](arg _mt[149696]:_MT[238], arg this[149694]:BaseArr[415346](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520360] "RVV" "param" "temp"
    (520365 'move' ret[520360](520364 'deref' 0))
    (520362 return ret[520360])
  }
  function BaseArr[149584].isDefaultRectangular[149558](arg _mt[149700]:_MT[238], arg this[149698]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520369] "RVV" "param" "temp"
    (520374 'move' ret[520369](520373 'deref' 0))
    (520371 return ret[520369])
  }
  function BaseArr[149584].doiCanBulkTransferRankChange[149568](arg _mt[149704]:_MT[238], arg this[149702]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520378] "RVV" "param" "temp"
    (520383 'move' ret[520378](520382 'deref' 0))
    (520380 return ret[520378])
  }
  function BaseArr[149584].decEltCountsIfNeeded[149578](arg _mt[149708]:_MT[238], arg this[149706]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520385 return _void[55])
  }
  function BaseArr[149584].super[806689](arg _mt[806691]:_MT[238], arg this[806693]:BaseArr[149584]) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806703] "RVV" "temp"
    unknown call_tmp[806710] "expr temp" "maybe param" "maybe type" "temp"
    (806713 'move' call_tmp[806710](806697 '.v' this[806693] c"super"))
    (806708 'move' ret[806703](806707 'deref' call_tmp[806710]))
    (806705 return ret[806703])
  }
  function BaseArr[149584].pid[806715](arg _mt[806717]:_MT[238], arg this[806719]:BaseArr[149584]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806729] "RVV" "temp"
    unknown call_tmp[806736] "expr temp" "maybe param" "maybe type" "temp"
    (806739 'move' call_tmp[806736](806723 '.' this[806719] c"pid"))
    (806734 'move' ret[806729](806733 'addr of' call_tmp[806736]))
    (806731 return ret[806729])
  }
  function BaseArr[149584]._decEltRefCounts[806741](arg _mt[806743]:_MT[238], arg this[806745]:BaseArr[149584]) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806755] "RVV" "temp"
    unknown call_tmp[806762] "expr temp" "maybe param" "maybe type" "temp"
    (806765 'move' call_tmp[806762](806749 '.' this[806745] c"_decEltRefCounts"))
    (806760 'move' ret[806755](806759 'addr of' call_tmp[806762]))
    (806757 return ret[806755])
  }
  function BaseArr[149584].init[806767](arg _mt[806769]:_MT[238], arg this[806770]:BaseArr[149584], in arg pid[806781]:int(64)[13] :
  int(64)[13] =
  nullPid[113718], in arg _decEltRefCounts[806796]:bool[10] :
  bool[10] =
  0) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[806813] "temporary of super field" "temp"
    (806815 'move' super_tmp[806813](806812 '.v' this[806770] c"super"))
    (806780 call(806778 call (partial) init _mt[243] super_tmp[806813]))
    (806842 'end of statement')
    unknown tmp[806818] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[806846] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[806858] "expr temp" "maybe param" "maybe type" "temp"
      (806861 'move' call_tmp[806858](806820 '.v' this[806770] c"super"))
      (806850 'move' call_type_tmp[806846](806823 'typeof' call_tmp[806858]))
    }
    (806824 'move' tmp[806818] call_type_tmp[806846])
    unknown call_tmp[806863] "maybe param" "maybe type" "temp"
    (806866 'move' call_tmp[806863](806829 'cast' tmp[806818] this[806770]))
    unknown chpl__thisAsParent[806826] "dead at end of block" "insert auto destroy" "temp"
    (806854 'init var' chpl__thisAsParent[806826] call_tmp[806863] tmp[806818])
    (806832 'setcid' chpl__thisAsParent[806826])
    (806834 'init field' this[806770] c"pid" pid[806781])
    (806843 'end of statement')
    (806837 'init field' this[806770] c"_decEltRefCounts" _decEltRefCounts[806796])
    (806844 'end of statement')
    (806840 'setcid' this[806770])
    (806852 return _void[55])
  }
  type BaseArr[149584] val super[355707]:object[22] "super class" val pid[148873]:int(64)[13] nullPid[113718] int(64)[13] val _decEltRefCounts[148879]:bool[10] 0 bool[10]
  type unmanaged BaseArr?[415529]
  type BaseArr?[415526](?)
  type unmanaged BaseArr[415496]
  type BaseArr[415346](?)
  type BaseArr[382363](?)
  function AbsBaseArr[149740](?).decEltCountsIfNeeded[149719](arg _mt[149744]:_MT[238], arg this[149742]:AbsBaseArr[149740](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669197] "expr temp" "maybe param" "maybe type" "temp"
    (669200 'move' call_tmp[669197](385900 call _decEltRefCounts _mt[243] this[149742]))
    unknown call_tmp[669202] "expr temp" "maybe param" "maybe type" "temp"
    (669205 'move' call_tmp[669202](149732 call _cond_test call_tmp[669197]))
    if call_tmp[669202]
    {
      unknown call_tmp[669207] "expr temp" "maybe param" "maybe type" "temp"
      (669210 'move' call_tmp[669207](149726 call _to_unmanaged this[149742]))
      unknown call_tmp[669214] "expr temp" "maybe param" "maybe type" "temp"
      (669217 'move' call_tmp[669214](385906 call eltType _mt[243] this[149742]))
      (149729 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669207] call_tmp[669214])
    }
    (520387 return _void[55])
  }
  function AbsBaseArr[149740](?).super[806868](arg _mt[806870]:_MT[238], arg this[806872]:AbsBaseArr[149740](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806882] "RVV" "temp"
    unknown call_tmp[806889] "expr temp" "maybe param" "maybe type" "temp"
    (806892 'move' call_tmp[806889](806876 '.v' this[806872] c"super"))
    (806887 'move' ret[806882](806886 'deref' call_tmp[806889]))
    (806884 return ret[806882])
  }
  function AbsBaseArr[806899](?).eltType[806894](arg _mt[806896]:_MT[238], arg this[806901]:AbsBaseArr[806899](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[806936] "RVV" "temp" "type variable"
    unknown borrowOfThis[806903]
    (806928 'end of statement')
    (806905 'move' borrowOfThis[806903](806908 call _cast _borrowedNonNilable[214](?) this[806901]))
    (806929 'end of statement' borrowOfThis[806903])
    unknown call_tmp[806950] "expr temp" "maybe param" "maybe type" "temp"
    (806953 'move' call_tmp[806950](806918 'is bound' borrowOfThis[806903] c"eltType"))
    if call_tmp[806950]
    {
      unknown call_tmp[806955] "expr temp" "maybe param" "maybe type" "temp"
      (806958 'move' call_tmp[806955](806913 '.v' borrowOfThis[806903] c"eltType"))
      unknown call_tmp[806960] "expr temp" "maybe param" "maybe type" "temp"
      (806963 'move' call_tmp[806960](806914 call chpl_checkLegalTypeFieldAccessor this[806901] call_tmp[806955] "eltType"))
      (806941 'move' ret[806936](806940 'deref' call_tmp[806960]))
      gotoReturn _end_eltType[806934] _end_eltType[806934]
      (806931 'end of statement' borrowOfThis[806903])
    }
    {
      (806946 'move' ret[806936](806945 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[806934] _end_eltType[806934]
    }
    label _end_eltType[806934]
    (806938 return ret[806936])
  }
  function AbsBaseArr[806899](?).eltType[806965](arg _mt[806967]:_MT[238], arg this[806969]:AbsBaseArr[806899](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807004] "RVV" "temp" "type variable"
    unknown borrowOfThis[806971] "type variable"
    (806996 'end of statement')
    (806973 'move' borrowOfThis[806971](806976 call _cast _borrowedNonNilable[214](?) this[806969]))
    (806997 'end of statement' borrowOfThis[806971])
    unknown call_tmp[807018] "expr temp" "maybe param" "maybe type" "temp"
    (807021 'move' call_tmp[807018](806986 'is bound' borrowOfThis[806971] c"eltType"))
    if call_tmp[807018]
    {
      unknown call_tmp[807023] "expr temp" "maybe param" "maybe type" "temp"
      (807026 'move' call_tmp[807023](806981 '.v' borrowOfThis[806971] c"eltType"))
      unknown call_tmp[807028] "expr temp" "maybe param" "maybe type" "temp"
      (807031 'move' call_tmp[807028](806982 call chpl_checkLegalTypeFieldAccessor this[806969] call_tmp[807023] "eltType"))
      (807009 'move' ret[807004](807008 'deref' call_tmp[807028]))
      gotoReturn _end_eltType[807002] _end_eltType[807002]
      (806999 'end of statement' borrowOfThis[806971])
    }
    {
      (807014 'move' ret[807004](807013 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[807002] _end_eltType[807002]
    }
    label _end_eltType[807002]
    (807006 return ret[807004])
  }
  function AbsBaseArr[149740](?).init[807033](arg _mt[807035]:_MT[238], arg this[807036]:AbsBaseArr[149740](?), in arg pid[807051]:int(64)[13] :
  int(64)[13] =
  nullPid[113718], in arg _decEltRefCounts[807058]:bool[10] :
  bool[10] =
  0, arg eltType[807061]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[807072] "temporary of super field" "temp"
    (807074 'move' super_tmp[807072](807071 '.v' this[807036] c"super"))
    (807046 call(807044 call (partial) init _mt[243] super_tmp[807072]) pid[807051] _decEltRefCounts[807058])
    (807098 'end of statement')
    unknown tmp[807077] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[807101] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[807113] "expr temp" "maybe param" "maybe type" "temp"
      (807116 'move' call_tmp[807113](807079 '.v' this[807036] c"super"))
      (807105 'move' call_type_tmp[807101](807082 'typeof' call_tmp[807113]))
    }
    (807083 'move' tmp[807077] call_type_tmp[807101])
    unknown call_tmp[807118] "maybe param" "maybe type" "temp"
    (807121 'move' call_tmp[807118](807088 'cast' tmp[807077] this[807036]))
    unknown chpl__thisAsParent[807085] "dead at end of block" "insert auto destroy" "temp"
    (807109 'init var' chpl__thisAsParent[807085] call_tmp[807118] tmp[807077])
    (807091 'setcid' chpl__thisAsParent[807085])
    (807093 'init field' this[807036] c"eltType" eltType[807061])
    (807099 'end of statement')
    (807096 'setcid' this[807036])
    (807107 return _void[55])
  }
  function AbsBaseArr[149740](?).deinit[807123](arg _mt[807125]:_MT[238], arg this[807127]:AbsBaseArr[149740](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (807135 return _void[55])
  }
  type AbsBaseArr[149740](?) val super[355721]:BaseArr[149584] "super class" unknown eltType[149714] "type variable"
  type AbsBaseArr[806899](?)
  function BaseArrOverRectangularDom[149805](?).dsiReallocate[149780](arg _mt[149809]:_MT[238], arg this[149807]:BaseArrOverRectangularDom[149805](?), arg bounds[149777] :
  unknown call_tmp[669221] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149785 call halt "reallocating not supported for this array type")
    (520389 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).dsiPostReallocate[149792](arg _mt[149813]:_MT[238], arg this[149811]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (520391 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).deinit[149799](arg _mt[149817]:_MT[238], arg this[149815]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520393 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).super[807137](arg _mt[807139]:_MT[238], arg this[807141]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807151] "RVV" "temp"
    unknown call_tmp[807158] "expr temp" "maybe param" "maybe type" "temp"
    (807161 'move' call_tmp[807158](807145 '.v' this[807141] c"super"))
    (807156 'move' ret[807151](807155 'deref' call_tmp[807158]))
    (807153 return ret[807151])
  }
  function BaseArrOverRectangularDom[807168](?).rank[807163](arg _mt[807165]:_MT[238], arg this[807170]:BaseArrOverRectangularDom[807168](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807201] "RVV" "param" "temp"
    unknown borrowOfThis[807172]
    (807193 'end of statement')
    (807174 'move' borrowOfThis[807172](807177 call _cast _borrowedNonNilable[214](?) this[807170]))
    (807194 'end of statement' borrowOfThis[807172])
    unknown call_tmp[807215] "expr temp" "maybe param" "maybe type" "temp"
    (807218 'move' call_tmp[807215](807183 'is bound' borrowOfThis[807172] c"rank"))
    if call_tmp[807215]
    {
      unknown call_tmp[807220] "expr temp" "maybe param" "maybe type" "temp"
      (807223 'move' call_tmp[807220](807182 '.' borrowOfThis[807172] c"rank"))
      (807206 'move' ret[807201](807205 'deref' call_tmp[807220]))
      gotoReturn _end_rank[807199] _end_rank[807199]
      (807196 'end of statement' borrowOfThis[807172])
    }
    {
      (807211 'move' ret[807201](807210 'deref' ?[260]))
      gotoReturn _end_rank[807199] _end_rank[807199]
    }
    label _end_rank[807199]
    (807203 return ret[807201])
  }
  function BaseArrOverRectangularDom[807168](?).rank[807225](arg _mt[807227]:_MT[238], arg this[807229]:BaseArrOverRectangularDom[807168](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807260] "RVV" "param" "temp"
    unknown borrowOfThis[807231] "type variable"
    (807252 'end of statement')
    (807233 'move' borrowOfThis[807231](807236 call _cast _borrowedNonNilable[214](?) this[807229]))
    (807253 'end of statement' borrowOfThis[807231])
    unknown call_tmp[807274] "expr temp" "maybe param" "maybe type" "temp"
    (807277 'move' call_tmp[807274](807242 'is bound' borrowOfThis[807231] c"rank"))
    if call_tmp[807274]
    {
      unknown call_tmp[807279] "expr temp" "maybe param" "maybe type" "temp"
      (807282 'move' call_tmp[807279](807241 '.' borrowOfThis[807231] c"rank"))
      (807265 'move' ret[807260](807264 'deref' call_tmp[807279]))
      gotoReturn _end_rank[807258] _end_rank[807258]
      (807255 'end of statement' borrowOfThis[807231])
    }
    {
      (807270 'move' ret[807260](807269 'deref' ?[260]))
      gotoReturn _end_rank[807258] _end_rank[807258]
    }
    label _end_rank[807258]
    (807262 return ret[807260])
  }
  function BaseArrOverRectangularDom[807168](?).idxType[807284](arg _mt[807286]:_MT[238], arg this[807288]:BaseArrOverRectangularDom[807168](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807323] "RVV" "temp" "type variable"
    unknown borrowOfThis[807290]
    (807315 'end of statement')
    (807292 'move' borrowOfThis[807290](807295 call _cast _borrowedNonNilable[214](?) this[807288]))
    (807316 'end of statement' borrowOfThis[807290])
    unknown call_tmp[807337] "expr temp" "maybe param" "maybe type" "temp"
    (807340 'move' call_tmp[807337](807305 'is bound' borrowOfThis[807290] c"idxType"))
    if call_tmp[807337]
    {
      unknown call_tmp[807342] "expr temp" "maybe param" "maybe type" "temp"
      (807345 'move' call_tmp[807342](807300 '.v' borrowOfThis[807290] c"idxType"))
      unknown call_tmp[807347] "expr temp" "maybe param" "maybe type" "temp"
      (807350 'move' call_tmp[807347](807301 call chpl_checkLegalTypeFieldAccessor this[807288] call_tmp[807342] "idxType"))
      (807328 'move' ret[807323](807327 'deref' call_tmp[807347]))
      gotoReturn _end_idxType[807321] _end_idxType[807321]
      (807318 'end of statement' borrowOfThis[807290])
    }
    {
      (807333 'move' ret[807323](807332 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[807321] _end_idxType[807321]
    }
    label _end_idxType[807321]
    (807325 return ret[807323])
  }
  function BaseArrOverRectangularDom[807168](?).idxType[807352](arg _mt[807354]:_MT[238], arg this[807356]:BaseArrOverRectangularDom[807168](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807391] "RVV" "temp" "type variable"
    unknown borrowOfThis[807358] "type variable"
    (807383 'end of statement')
    (807360 'move' borrowOfThis[807358](807363 call _cast _borrowedNonNilable[214](?) this[807356]))
    (807384 'end of statement' borrowOfThis[807358])
    unknown call_tmp[807405] "expr temp" "maybe param" "maybe type" "temp"
    (807408 'move' call_tmp[807405](807373 'is bound' borrowOfThis[807358] c"idxType"))
    if call_tmp[807405]
    {
      unknown call_tmp[807410] "expr temp" "maybe param" "maybe type" "temp"
      (807413 'move' call_tmp[807410](807368 '.v' borrowOfThis[807358] c"idxType"))
      unknown call_tmp[807415] "expr temp" "maybe param" "maybe type" "temp"
      (807418 'move' call_tmp[807415](807369 call chpl_checkLegalTypeFieldAccessor this[807356] call_tmp[807410] "idxType"))
      (807396 'move' ret[807391](807395 'deref' call_tmp[807415]))
      gotoReturn _end_idxType[807389] _end_idxType[807389]
      (807386 'end of statement' borrowOfThis[807358])
    }
    {
      (807401 'move' ret[807391](807400 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[807389] _end_idxType[807389]
    }
    label _end_idxType[807389]
    (807393 return ret[807391])
  }
  function BaseArrOverRectangularDom[807168](?).stridable[807420](arg _mt[807422]:_MT[238], arg this[807424]:BaseArrOverRectangularDom[807168](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807455] "RVV" "param" "temp"
    unknown borrowOfThis[807426]
    (807447 'end of statement')
    (807428 'move' borrowOfThis[807426](807431 call _cast _borrowedNonNilable[214](?) this[807424]))
    (807448 'end of statement' borrowOfThis[807426])
    unknown call_tmp[807469] "expr temp" "maybe param" "maybe type" "temp"
    (807472 'move' call_tmp[807469](807437 'is bound' borrowOfThis[807426] c"stridable"))
    if call_tmp[807469]
    {
      unknown call_tmp[807474] "expr temp" "maybe param" "maybe type" "temp"
      (807477 'move' call_tmp[807474](807436 '.' borrowOfThis[807426] c"stridable"))
      (807460 'move' ret[807455](807459 'deref' call_tmp[807474]))
      gotoReturn _end_stridable[807453] _end_stridable[807453]
      (807450 'end of statement' borrowOfThis[807426])
    }
    {
      (807465 'move' ret[807455](807464 'deref' ?[260]))
      gotoReturn _end_stridable[807453] _end_stridable[807453]
    }
    label _end_stridable[807453]
    (807457 return ret[807455])
  }
  function BaseArrOverRectangularDom[807168](?).stridable[807479](arg _mt[807481]:_MT[238], arg this[807483]:BaseArrOverRectangularDom[807168](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807514] "RVV" "param" "temp"
    unknown borrowOfThis[807485] "type variable"
    (807506 'end of statement')
    (807487 'move' borrowOfThis[807485](807490 call _cast _borrowedNonNilable[214](?) this[807483]))
    (807507 'end of statement' borrowOfThis[807485])
    unknown call_tmp[807528] "expr temp" "maybe param" "maybe type" "temp"
    (807531 'move' call_tmp[807528](807496 'is bound' borrowOfThis[807485] c"stridable"))
    if call_tmp[807528]
    {
      unknown call_tmp[807533] "expr temp" "maybe param" "maybe type" "temp"
      (807536 'move' call_tmp[807533](807495 '.' borrowOfThis[807485] c"stridable"))
      (807519 'move' ret[807514](807518 'deref' call_tmp[807533]))
      gotoReturn _end_stridable[807512] _end_stridable[807512]
      (807509 'end of statement' borrowOfThis[807485])
    }
    {
      (807524 'move' ret[807514](807523 'deref' ?[260]))
      gotoReturn _end_stridable[807512] _end_stridable[807512]
    }
    label _end_stridable[807512]
    (807516 return ret[807514])
  }
  function BaseArrOverRectangularDom[149805](?).init[807538](arg _mt[807540]:_MT[238], arg this[807541]:BaseArrOverRectangularDom[149805](?), in arg pid[807556]:int(64)[13] :
  int(64)[13] =
  nullPid[113718], in arg _decEltRefCounts[807563]:bool[10] :
  bool[10] =
  0, param arg rank[807566]:int(64)[13], arg idxType[807578]:_any[178](?), param arg stridable[807587]:bool[10]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[807601] "temporary of super field" "temp"
    (807603 'move' super_tmp[807601](807600 '.v' this[807541] c"super"))
    (807551 call(807549 call (partial) init _mt[243] super_tmp[807601]) pid[807556] _decEltRefCounts[807563])
    (807639 'end of statement')
    unknown tmp[807606] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[807643] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[807655] "expr temp" "maybe param" "maybe type" "temp"
      (807658 'move' call_tmp[807655](807608 '.v' this[807541] c"super"))
      (807647 'move' call_type_tmp[807643](807611 'typeof' call_tmp[807655]))
    }
    (807612 'move' tmp[807606] call_type_tmp[807643])
    unknown call_tmp[807660] "maybe param" "maybe type" "temp"
    (807663 'move' call_tmp[807660](807617 'cast' tmp[807606] this[807541]))
    unknown chpl__thisAsParent[807614] "dead at end of block" "insert auto destroy" "temp"
    (807651 'init var' chpl__thisAsParent[807614] call_tmp[807660] tmp[807606])
    (807620 'setcid' chpl__thisAsParent[807614])
    unknown call_tmp[807665] "expr temp" "maybe param" "maybe type" "temp"
    (807668 'move' call_tmp[807665](807623 call _cast int(64)[13] rank[807566]))
    (807625 'init field' this[807541] c"rank" call_tmp[807665])
    (807640 'end of statement')
    (807628 'init field' this[807541] c"idxType" idxType[807578])
    unknown call_tmp[807670] "expr temp" "maybe param" "maybe type" "temp"
    (807673 'move' call_tmp[807670](807632 call _cast bool[10] stridable[807587]))
    (807634 'init field' this[807541] c"stridable" call_tmp[807670])
    (807641 'end of statement')
    (807637 'setcid' this[807541])
    (807649 return _void[55])
  }
  type BaseArrOverRectangularDom[149805](?) val super[355709]:BaseArr[149584] "super class" unknown rank[149751] "param" int(64)[13] unknown idxType[149755] "type variable" unknown stridable[149759] "param" bool[10]
  type BaseArrOverRectangularDom[807168](?)
  type BaseArrOverRectangularDom[385574](?)
  function BaseRectangularArr[149856](?).deinit[149828](arg _mt[149860]:_MT[238], arg this[149858]:BaseRectangularArr[149856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520395 return _void[55])
  }
  function BaseRectangularArr[149856](?).decEltCountsIfNeeded[149835](arg _mt[149864]:_MT[238], arg this[149862]:BaseRectangularArr[149856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669247] "expr temp" "maybe param" "maybe type" "temp"
    (669250 'move' call_tmp[669247](385927 call _decEltRefCounts _mt[243] this[149862]))
    unknown call_tmp[669252] "expr temp" "maybe param" "maybe type" "temp"
    (669255 'move' call_tmp[669252](149848 call _cond_test call_tmp[669247]))
    if call_tmp[669252]
    {
      unknown call_tmp[669257] "expr temp" "maybe param" "maybe type" "temp"
      (669260 'move' call_tmp[669257](149842 call _to_unmanaged this[149862]))
      unknown call_tmp[669264] "expr temp" "maybe param" "maybe type" "temp"
      (669267 'move' call_tmp[669264](385933 call eltType _mt[243] this[149862]))
      (149845 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669257] call_tmp[669264])
    }
    (520397 return _void[55])
  }
  function BaseRectangularArr[149856](?).super[807675](arg _mt[807677]:_MT[238], arg this[807679]:BaseRectangularArr[149856](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807689] "RVV" "temp"
    unknown call_tmp[807696] "expr temp" "maybe param" "maybe type" "temp"
    (807699 'move' call_tmp[807696](807683 '.v' this[807679] c"super"))
    (807694 'move' ret[807689](807693 'deref' call_tmp[807696]))
    (807691 return ret[807689])
  }
  function BaseRectangularArr[807706](?).eltType[807701](arg _mt[807703]:_MT[238], arg this[807708]:BaseRectangularArr[807706](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807743] "RVV" "temp" "type variable"
    unknown borrowOfThis[807710]
    (807735 'end of statement')
    (807712 'move' borrowOfThis[807710](807715 call _cast _borrowedNonNilable[214](?) this[807708]))
    (807736 'end of statement' borrowOfThis[807710])
    unknown call_tmp[807757] "expr temp" "maybe param" "maybe type" "temp"
    (807760 'move' call_tmp[807757](807725 'is bound' borrowOfThis[807710] c"eltType"))
    if call_tmp[807757]
    {
      unknown call_tmp[807762] "expr temp" "maybe param" "maybe type" "temp"
      (807765 'move' call_tmp[807762](807720 '.v' borrowOfThis[807710] c"eltType"))
      unknown call_tmp[807767] "expr temp" "maybe param" "maybe type" "temp"
      (807770 'move' call_tmp[807767](807721 call chpl_checkLegalTypeFieldAccessor this[807708] call_tmp[807762] "eltType"))
      (807748 'move' ret[807743](807747 'deref' call_tmp[807767]))
      gotoReturn _end_eltType[807741] _end_eltType[807741]
      (807738 'end of statement' borrowOfThis[807710])
    }
    {
      (807753 'move' ret[807743](807752 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[807741] _end_eltType[807741]
    }
    label _end_eltType[807741]
    (807745 return ret[807743])
  }
  function BaseRectangularArr[807706](?).eltType[807772](arg _mt[807774]:_MT[238], arg this[807776]:BaseRectangularArr[807706](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807811] "RVV" "temp" "type variable"
    unknown borrowOfThis[807778] "type variable"
    (807803 'end of statement')
    (807780 'move' borrowOfThis[807778](807783 call _cast _borrowedNonNilable[214](?) this[807776]))
    (807804 'end of statement' borrowOfThis[807778])
    unknown call_tmp[807825] "expr temp" "maybe param" "maybe type" "temp"
    (807828 'move' call_tmp[807825](807793 'is bound' borrowOfThis[807778] c"eltType"))
    if call_tmp[807825]
    {
      unknown call_tmp[807830] "expr temp" "maybe param" "maybe type" "temp"
      (807833 'move' call_tmp[807830](807788 '.v' borrowOfThis[807778] c"eltType"))
      unknown call_tmp[807835] "expr temp" "maybe param" "maybe type" "temp"
      (807838 'move' call_tmp[807835](807789 call chpl_checkLegalTypeFieldAccessor this[807776] call_tmp[807830] "eltType"))
      (807816 'move' ret[807811](807815 'deref' call_tmp[807835]))
      gotoReturn _end_eltType[807809] _end_eltType[807809]
      (807806 'end of statement' borrowOfThis[807778])
    }
    {
      (807821 'move' ret[807811](807820 'deref' _uninstantiated[258]))
      gotoReturn _end_eltType[807809] _end_eltType[807809]
    }
    label _end_eltType[807809]
    (807813 return ret[807811])
  }
  function BaseRectangularArr[149856](?).init[807840](arg _mt[807842]:_MT[238], arg this[807843]:BaseRectangularArr[149856](?), in arg pid[807858]:int(64)[13] :
  int(64)[13] =
  nullPid[113718], in arg _decEltRefCounts[807865]:bool[10] :
  bool[10] =
  0, param arg rank[807868]:int(64)[13], arg idxType[807871]:_any[178](?), param arg stridable[807874]:bool[10], arg eltType[807877]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[807888] "temporary of super field" "temp"
    (807890 'move' super_tmp[807888](807887 '.v' this[807843] c"super"))
    (807853 call(807851 call (partial) init _mt[243] super_tmp[807888]) pid[807858] _decEltRefCounts[807865] rank[807868] idxType[807871] stridable[807874])
    (807914 'end of statement')
    unknown tmp[807893] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[807917] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[807929] "expr temp" "maybe param" "maybe type" "temp"
      (807932 'move' call_tmp[807929](807895 '.v' this[807843] c"super"))
      (807921 'move' call_type_tmp[807917](807898 'typeof' call_tmp[807929]))
    }
    (807899 'move' tmp[807893] call_type_tmp[807917])
    unknown call_tmp[807934] "maybe param" "maybe type" "temp"
    (807937 'move' call_tmp[807934](807904 'cast' tmp[807893] this[807843]))
    unknown chpl__thisAsParent[807901] "dead at end of block" "insert auto destroy" "temp"
    (807925 'init var' chpl__thisAsParent[807901] call_tmp[807934] tmp[807893])
    (807907 'setcid' chpl__thisAsParent[807901])
    (807909 'init field' this[807843] c"eltType" eltType[807877])
    (807915 'end of statement')
    (807912 'setcid' this[807843])
    (807923 return _void[55])
  }
  type BaseRectangularArr[149856](?) val super[355711]:BaseArrOverRectangularDom[149805](?) "delay instantiation" "super class" unknown eltType[149823] "type variable"
  type BaseRectangularArr[807706](?)
  function BaseSparseArr[149900](?).dsiGetBaseDom[149884](arg _mt[149904]:_MT[238], arg this[149902]:BaseSparseArr[149900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520401] "RVV" "temp"
    unknown call_tmp[669271] "expr temp" "maybe param" "maybe type" "temp"
    (669274 'move' call_tmp[669271](385938 call dom _mt[243] this[149902]))
    (520406 'move' ret[520401](520405 'deref' call_tmp[669271]))
    (520403 return ret[520401])
  }
  function BaseSparseArr[149900](?).deinit[149894](arg _mt[149908]:_MT[238], arg this[149906]:BaseSparseArr[149900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520408 return _void[55])
  }
  function BaseSparseArr[149900](?).super[807939](arg _mt[807941]:_MT[238], arg this[807943]:BaseSparseArr[149900](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[807953] "RVV" "temp"
    unknown call_tmp[807960] "expr temp" "maybe param" "maybe type" "temp"
    (807963 'move' call_tmp[807960](807947 '.v' this[807943] c"super"))
    (807958 'move' ret[807953](807957 'deref' call_tmp[807960]))
    (807955 return ret[807953])
  }
  function BaseSparseArr[807970](?).rank[807965](arg _mt[807967]:_MT[238], arg this[807972]:BaseSparseArr[807970](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808003] "RVV" "param" "temp"
    unknown borrowOfThis[807974]
    (807995 'end of statement')
    (807976 'move' borrowOfThis[807974](807979 call _cast _borrowedNonNilable[214](?) this[807972]))
    (807996 'end of statement' borrowOfThis[807974])
    unknown call_tmp[808017] "expr temp" "maybe param" "maybe type" "temp"
    (808020 'move' call_tmp[808017](807985 'is bound' borrowOfThis[807974] c"rank"))
    if call_tmp[808017]
    {
      unknown call_tmp[808022] "expr temp" "maybe param" "maybe type" "temp"
      (808025 'move' call_tmp[808022](807984 '.' borrowOfThis[807974] c"rank"))
      (808008 'move' ret[808003](808007 'deref' call_tmp[808022]))
      gotoReturn _end_rank[808001] _end_rank[808001]
      (807998 'end of statement' borrowOfThis[807974])
    }
    {
      (808013 'move' ret[808003](808012 'deref' ?[260]))
      gotoReturn _end_rank[808001] _end_rank[808001]
    }
    label _end_rank[808001]
    (808005 return ret[808003])
  }
  function BaseSparseArr[807970](?).rank[808027](arg _mt[808029]:_MT[238], arg this[808031]:BaseSparseArr[807970](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808062] "RVV" "param" "temp"
    unknown borrowOfThis[808033] "type variable"
    (808054 'end of statement')
    (808035 'move' borrowOfThis[808033](808038 call _cast _borrowedNonNilable[214](?) this[808031]))
    (808055 'end of statement' borrowOfThis[808033])
    unknown call_tmp[808076] "expr temp" "maybe param" "maybe type" "temp"
    (808079 'move' call_tmp[808076](808044 'is bound' borrowOfThis[808033] c"rank"))
    if call_tmp[808076]
    {
      unknown call_tmp[808081] "expr temp" "maybe param" "maybe type" "temp"
      (808084 'move' call_tmp[808081](808043 '.' borrowOfThis[808033] c"rank"))
      (808067 'move' ret[808062](808066 'deref' call_tmp[808081]))
      gotoReturn _end_rank[808060] _end_rank[808060]
      (808057 'end of statement' borrowOfThis[808033])
    }
    {
      (808072 'move' ret[808062](808071 'deref' ?[260]))
      gotoReturn _end_rank[808060] _end_rank[808060]
    }
    label _end_rank[808060]
    (808064 return ret[808062])
  }
  function BaseSparseArr[807970](?).idxType[808086](arg _mt[808088]:_MT[238], arg this[808090]:BaseSparseArr[807970](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808125] "RVV" "temp" "type variable"
    unknown borrowOfThis[808092]
    (808117 'end of statement')
    (808094 'move' borrowOfThis[808092](808097 call _cast _borrowedNonNilable[214](?) this[808090]))
    (808118 'end of statement' borrowOfThis[808092])
    unknown call_tmp[808139] "expr temp" "maybe param" "maybe type" "temp"
    (808142 'move' call_tmp[808139](808107 'is bound' borrowOfThis[808092] c"idxType"))
    if call_tmp[808139]
    {
      unknown call_tmp[808144] "expr temp" "maybe param" "maybe type" "temp"
      (808147 'move' call_tmp[808144](808102 '.v' borrowOfThis[808092] c"idxType"))
      unknown call_tmp[808149] "expr temp" "maybe param" "maybe type" "temp"
      (808152 'move' call_tmp[808149](808103 call chpl_checkLegalTypeFieldAccessor this[808090] call_tmp[808144] "idxType"))
      (808130 'move' ret[808125](808129 'deref' call_tmp[808149]))
      gotoReturn _end_idxType[808123] _end_idxType[808123]
      (808120 'end of statement' borrowOfThis[808092])
    }
    {
      (808135 'move' ret[808125](808134 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[808123] _end_idxType[808123]
    }
    label _end_idxType[808123]
    (808127 return ret[808125])
  }
  function BaseSparseArr[807970](?).idxType[808154](arg _mt[808156]:_MT[238], arg this[808158]:BaseSparseArr[807970](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808193] "RVV" "temp" "type variable"
    unknown borrowOfThis[808160] "type variable"
    (808185 'end of statement')
    (808162 'move' borrowOfThis[808160](808165 call _cast _borrowedNonNilable[214](?) this[808158]))
    (808186 'end of statement' borrowOfThis[808160])
    unknown call_tmp[808207] "expr temp" "maybe param" "maybe type" "temp"
    (808210 'move' call_tmp[808207](808175 'is bound' borrowOfThis[808160] c"idxType"))
    if call_tmp[808207]
    {
      unknown call_tmp[808212] "expr temp" "maybe param" "maybe type" "temp"
      (808215 'move' call_tmp[808212](808170 '.v' borrowOfThis[808160] c"idxType"))
      unknown call_tmp[808217] "expr temp" "maybe param" "maybe type" "temp"
      (808220 'move' call_tmp[808217](808171 call chpl_checkLegalTypeFieldAccessor this[808158] call_tmp[808212] "idxType"))
      (808198 'move' ret[808193](808197 'deref' call_tmp[808217]))
      gotoReturn _end_idxType[808191] _end_idxType[808191]
      (808188 'end of statement' borrowOfThis[808160])
    }
    {
      (808203 'move' ret[808193](808202 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[808191] _end_idxType[808191]
    }
    label _end_idxType[808191]
    (808195 return ret[808193])
  }
  function BaseSparseArr[149900](?).dom[808222](arg _mt[808224]:_MT[238], arg this[808226]:BaseSparseArr[149900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808236] "RVV" "temp"
    unknown call_tmp[808243] "expr temp" "maybe param" "maybe type" "temp"
    (808246 'move' call_tmp[808243](808230 '.' this[808226] c"dom"))
    (808241 'move' ret[808236](808240 'addr of' call_tmp[808243]))
    (808238 return ret[808236])
  }
  function BaseSparseArr[149900](?).init[808248](arg _mt[808250]:_MT[238], arg this[808251]:BaseSparseArr[149900](?), in arg pid[808266]:int(64)[13] :
  int(64)[13] =
  nullPid[113718], in arg _decEltRefCounts[808273]:bool[10] :
  bool[10] =
  0, arg eltType[808276]:_any[178](?), param arg rank[808279]:int(64)[13], arg idxType[808291]:_any[178](?), in arg dom[808300]:_any[178](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[808311] "temporary of super field" "temp"
    (808313 'move' super_tmp[808311](808310 '.v' this[808251] c"super"))
    (808261 call(808259 call (partial) init _mt[243] super_tmp[808311]) pid[808266] _decEltRefCounts[808273] eltType[808276])
    (808346 'end of statement')
    unknown tmp[808316] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[808350] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[808362] "expr temp" "maybe param" "maybe type" "temp"
      (808365 'move' call_tmp[808362](808318 '.v' this[808251] c"super"))
      (808354 'move' call_type_tmp[808350](808321 'typeof' call_tmp[808362]))
    }
    (808322 'move' tmp[808316] call_type_tmp[808350])
    unknown call_tmp[808367] "maybe param" "maybe type" "temp"
    (808370 'move' call_tmp[808367](808327 'cast' tmp[808316] this[808251]))
    unknown chpl__thisAsParent[808324] "dead at end of block" "insert auto destroy" "temp"
    (808358 'init var' chpl__thisAsParent[808324] call_tmp[808367] tmp[808316])
    (808330 'setcid' chpl__thisAsParent[808324])
    unknown call_tmp[808372] "expr temp" "maybe param" "maybe type" "temp"
    (808375 'move' call_tmp[808372](808333 call _cast int(64)[13] rank[808279]))
    (808335 'init field' this[808251] c"rank" call_tmp[808372])
    (808347 'end of statement')
    (808338 'init field' this[808251] c"idxType" idxType[808291])
    (808341 'init field' this[808251] c"dom" dom[808300])
    (808348 'end of statement')
    (808344 'setcid' this[808251])
    (808356 return _void[55])
  }
  type BaseSparseArr[149900](?) val super[355723]:AbsBaseArr[149740](?) "delay instantiation" "super class" unknown rank[149871] "param" int(64)[13] unknown idxType[149875] "type variable" unknown dom[149878]
  type BaseSparseArr[807970](?)
  function BaseSparseArrImpl[150571](?).init[149934](arg _mt[150575]:_MT[238], arg this[150573]:BaseSparseArrImpl[150571](?), arg eltType[149932]:_any[178](?), param arg rank[149937]:int(64)[13], arg idxType[149940]:_any[178](?), arg dom[149942]:_any[178](?), param arg initElts[149945]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461859] "temporary of super field" "temp"
    (461861 'move' super_tmp[461859](461858 '.v' this[150573] c"super"))
    (149961 call(149949 call (partial) init _mt[243] super_tmp[461859])(eltType = eltType[149932])(rank = rank[149937])(idxType = idxType[149940])(dom = dom[149942]))
    (481656 'end of statement')
    unknown tmp[461864] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492367] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[669278] "expr temp" "maybe param" "maybe type" "temp"
      (669281 'move' call_tmp[669278](461866 '.v' this[150573] c"super"))
      (492371 'move' call_type_tmp[492367](461869 'typeof' call_tmp[669278]))
    }
    (461870 'move' tmp[461864] call_type_tmp[492367])
    unknown call_tmp[669283] "maybe param" "maybe type" "temp"
    (669286 'move' call_tmp[669283](461875 'cast' tmp[461864] this[150573]))
    unknown chpl__thisAsParent[461872] "dead at end of block" "insert auto destroy" "temp"
    (543658 'init var' chpl__thisAsParent[461872] call_tmp[669283] tmp[461864])
    (461878 'setcid' chpl__thisAsParent[461872])
    (481657 'end of statement')
    unknown call_tmp[669288] "expr temp" "maybe param" "maybe type" "temp"
    (669291 'move' call_tmp[669288](149969 '.' this[150573] c"dom"))
    unknown call_tmp[669295] "expr temp" "maybe param" "maybe type" "temp"
    (669298 'move' call_tmp[669295](149972 call nnzDom _mt[243] call_tmp[669288]))
    unknown call_tmp[669302] "maybe param" "maybe type" "temp"
    (669305 'move' call_tmp[669302](149982 call(149975 call (partial) buildArray _mt[243] call_tmp[669295]) eltType[149932](initElts = initElts[149945])))
    unknown call_tmp[669307] "expr temp" "maybe param" "maybe type" "temp"
    (669310 'move' call_tmp[669307](461897 '.' this[150573] c"dom"))
    unknown call_tmp[669314] "expr temp" "maybe param" "maybe type" "temp"
    (669317 'move' call_tmp[669314](461887 call nnzDom _mt[243] call_tmp[669307]))
    unknown call_tmp[669319] "expr temp" "maybe param" "maybe type" "temp"
    (669322 'move' call_tmp[669319](461885 call chpl__ensureDomainExpr call_tmp[669314]))
    unknown call_tmp[669324] "expr temp" "maybe param" "maybe type" "temp"
    (669327 'move' call_tmp[669324](461900 '.v' this[150573] c"eltType"))
    unknown call_tmp[669329] "maybe param" "maybe type" "temp"
    (669332 'move' call_tmp[669329](461883 call chpl__buildArrayRuntimeType call_tmp[669319] call_tmp[669324]))
    unknown tmp[461880] "temp"
    (461891 'init var' tmp[461880] call_tmp[669302] call_tmp[669329])
    (461893 'init field' this[150573] c"data" tmp[461880])
    (481658 'end of statement')
    unknown tmp[461904] "temp"
    unknown call_tmp[669334] "expr temp" "maybe param" "maybe type" "temp"
    (669337 'move' call_tmp[669334](461913 '.v' this[150573] c"eltType"))
    (461907 'default init var' tmp[461904] call_tmp[669334])
    (461909 '.=' this[150573] c"irv" tmp[461904])
    (481659 'end of statement')
    (461916 'setcid' this[150573])
    (520410 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).deinit[149990](arg _mt[150579]:_MT[238], arg this[150577]:BaseSparseArrImpl[150571](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520412 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementInitializationComplete[149997](arg _mt[150583]:_MT[238], arg this[150581]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669341] "expr temp" "maybe param" "maybe type" "temp"
    (669344 'move' call_tmp[669341](360717 call data _mt[243] this[150581]))
    (150004 call(150000 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[669341]))
    (520414 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementDeinitializationComplete[150011](arg _mt[150587]:_MT[238], arg this[150585]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669350] "expr temp" "maybe param" "maybe type" "temp"
    (669353 'move' call_tmp[669350](360722 call data _mt[243] this[150585]))
    (150018 call(150014 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[669350]))
    (520416 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiDestroyArr[150029](arg _mt[150591]:_MT[238], arg this[150589]:BaseSparseArrImpl[150571](?), arg deinitElts[150026]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669357] "expr temp" "maybe param" "maybe type" "temp"
    (669360 'move' call_tmp[669357](150037 call _cond_test deinitElts[150026]))
    if call_tmp[669357]
    {
      unknown call_tmp[669364] "expr temp" "maybe param" "maybe type" "temp"
      (669367 'move' call_tmp[669364](385951 call data _mt[243] this[150589]))
      (150035 call _deinitElements call_tmp[669364])
    }
    (520418 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).IRV[150052](arg _mt[150595]:_MT[238], arg this[150593]:BaseSparseArrImpl[150571](?)) ref : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520422] "RVV" "temp"
    unknown call_tmp[669371] "expr temp" "maybe param" "maybe type" "temp"
    (669374 'move' call_tmp[669371](385959 call irv _mt[243] this[150593]))
    (520427 'move' ret[520422](520426 'addr of' call_tmp[669371]))
    (520424 return ret[520422])
  }
  function BaseSparseArrImpl[150571](?).sparseBulkShiftArray[150064](arg _mt[150599]:_MT[238], arg this[150597]:BaseSparseArrImpl[150571](?), arg shiftMap[150062]:_any[178](?), arg oldnnz[150066]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150069] "dead at end of block" "insert auto destroy"
    (543660 'default init var' newIdx[150069] int(64)[13])
    (150072 'end of statement')
    unknown prevNewIdx[150075] "dead at end of block" "insert auto destroy"
    (543662 'init var' prevNewIdx[150075] 1)
    (150078 'end of statement')
    unknown call_tmp[669378] "expr temp" "maybe param" "maybe type" "temp"
    (669381 'move' call_tmp[669378](150081 call _dom _mt[243] shiftMap[150062]))
    unknown call_tmp[669385] "expr temp" "maybe param" "maybe type" "temp"
    (669388 'move' call_tmp[669385](150084 call high _mt[243] call_tmp[669378]))
    unknown call_tmp[669390] "expr temp" "maybe param" "maybe type" "temp"
    (669393 'move' call_tmp[669390](150088 call + call_tmp[669385] 1))
    unknown call_tmp[669397] "expr temp" "maybe param" "maybe type" "temp"
    (669400 'move' call_tmp[669397](360728 call dom _mt[243] this[150597]))
    unknown call_tmp[669404] "expr temp" "maybe param" "maybe type" "temp"
    (669407 'move' call_tmp[669404](150091 call nnzDom _mt[243] call_tmp[669397]))
    unknown call_tmp[669411] "expr temp" "maybe param" "maybe type" "temp"
    (669414 'move' call_tmp[669411](150094 call high _mt[243] call_tmp[669404]))
    unknown call_tmp[669416] "expr temp" "maybe param" "maybe type" "temp"
    (669419 'move' call_tmp[669416](150097 call chpl_build_bounded_range call_tmp[669390] call_tmp[669411]))
    Forall {
      induction variables:
        
        unknown i[150108] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[669416]
      shadow variables:
      other variables
        forall body
      {
        unknown call_tmp[669423] "expr temp" "maybe param" "maybe type" "temp"
        (669426 'move' call_tmp[669423](150102 call(385964 call (partial) data _mt[243] this[150597]) i[150108]))
        unknown call_tmp[669430] "expr temp" "maybe param" "maybe type" "temp"
        (669433 'move' call_tmp[669430](385970 call irv _mt[243] this[150597]))
        (150104 call = call_tmp[669423] call_tmp[669430])
        (481665 'end of statement' i[150108])
      }
    }
    {
      unknown _indexOfInterest[150231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150232] "expr temp" "temp"
      unknown call_tmp[669435] "expr temp" "maybe param" "maybe type" "temp"
      (669438 'move' call_tmp[669435](150256 call - 1))
      unknown call_tmp[669440] "expr temp" "maybe param" "maybe type" "temp"
      (669443 'move' call_tmp[669440](150260 call chpl_direct_range_iter 1 oldnnz[150066] call_tmp[669435]))
      unknown call_tmp[669445] "expr temp" "maybe param" "maybe type" "temp"
      (669448 'move' call_tmp[669445](150249 call _getIterator call_tmp[669440]))
      unknown call_tmp[669452] "expr temp" "maybe param" "maybe type" "temp"
      (669455 'move' call_tmp[669452](150267 call _dom _mt[243] shiftMap[150062]))
      unknown call_tmp[669459] "expr temp" "maybe param" "maybe type" "temp"
      (669462 'move' call_tmp[669459](150271 call(150265 call (partial) dim _mt[243] call_tmp[669452]) 0))
      unknown call_tmp[669464] "expr temp" "maybe param" "maybe type" "temp"
      (669467 'move' call_tmp[669464](150274 call - 1))
      unknown call_tmp[669469] "expr temp" "maybe param" "maybe type" "temp"
      (669472 'move' call_tmp[669469](150263 call chpl_by call_tmp[669459] call_tmp[669464]))
      unknown call_tmp[669474] "expr temp" "maybe param" "maybe type" "temp"
      (669477 'move' call_tmp[669474](150276 call _getIterator call_tmp[669469]))
      (150290 'move' _iterator[150232](150142 call _build_tuple call_tmp[669445] call_tmp[669474]))
      Defer
      {
        {
          (150320 call _freeIterator _iterator[150232])
        }
      }
      { scopeless type
        (150295 'move' _indexOfInterest[150231](150292 call iteratorIndex _iterator[150232]))
      }
      ForLoop[150233]
      {
        (150300 call _check_tuple_var_decl _indexOfInterest[150231] 2)
        (481668 'end of statement')
        unknown i[150306] "index var" "insert auto destroy"
        (481669 'end of statement')
        (150308 'move' i[150306](150304 call _indexOfInterest[150231] 0))
        (481670 'end of statement' i[150306])
        unknown _newIdx[150313] "index var" "insert auto destroy"
        (481672 'end of statement')
        (150315 'move' _newIdx[150313](150311 call _indexOfInterest[150231] 1))
        (481673 'end of statement' _newIdx[150313])
        {
          unknown call_tmp[669479] "expr temp" "maybe param" "maybe type" "temp"
          (669482 'move' call_tmp[669479](150147 call shiftMap[150062] _newIdx[150313]))
          (150148 call = newIdx[150069] call_tmp[669479])
          (481675 'end of statement' newIdx[150069] _newIdx[150313])
          unknown call_tmp[669486] "expr temp" "maybe param" "maybe type" "temp"
          (669489 'move' call_tmp[669486](150155 call(385978 call (partial) data _mt[243] this[150597]) newIdx[150069]))
          unknown call_tmp[669493] "expr temp" "maybe param" "maybe type" "temp"
          (669496 'move' call_tmp[669493](150159 call(385984 call (partial) data _mt[243] this[150597]) i[150306]))
          (150160 call = call_tmp[669486] call_tmp[669493])
          (481678 'end of statement' newIdx[150069] i[150306])
          {
            unknown _indexOfInterest[150182] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150183] "expr temp" "temp"
            unknown call_tmp[669498] "expr temp" "maybe param" "maybe type" "temp"
            (669501 'move' call_tmp[669498](150196 call + newIdx[150069] 1))
            unknown call_tmp[669503] "expr temp" "maybe param" "maybe type" "temp"
            (669506 'move' call_tmp[669503](150200 call - prevNewIdx[150075] 1))
            unknown call_tmp[669508] "expr temp" "maybe param" "maybe type" "temp"
            (669511 'move' call_tmp[669508](150203 call chpl_direct_range_iter call_tmp[669498] call_tmp[669503] 1))
            (150192 'move' _iterator[150183](150190 call _getIterator call_tmp[669508]))
            Defer
            {
              {
                (150219 call _freeIterator _iterator[150183])
              }
            }
            { scopeless type
              (150208 'move' _indexOfInterest[150182](150205 call iteratorIndex _iterator[150183]))
            }
            ForLoop[150184]
            {
              unknown emptyIndex[150212] "index var" "insert auto destroy"
              (481682 'end of statement')
              (150214 'move' emptyIndex[150212] _indexOfInterest[150182])
              (481683 'end of statement' emptyIndex[150212])
              unknown call_tmp[669515] "expr temp" "maybe param" "maybe type" "temp"
              (669518 'move' call_tmp[669515](150177 call(385990 call (partial) data _mt[243] this[150597]) emptyIndex[150212]))
              unknown call_tmp[669522] "expr temp" "maybe param" "maybe type" "temp"
              (669525 'move' call_tmp[669522](385996 call irv _mt[243] this[150597]))
              (150179 call = call_tmp[669515] call_tmp[669522])
              (481685 'end of statement' emptyIndex[150212])
              label _continueLabel[150187]
              _indexOfInterest[150182]
              _iterator[150183]
            }
            label _breakLabel[150188]
          }
          (150228 call = prevNewIdx[150075] newIdx[150069])
          (481687 'end of statement' prevNewIdx[150075] newIdx[150069])
        }
        label _continueLabel[150236]
        _indexOfInterest[150231]
        _iterator[150232]
      }
      label _breakLabel[150237]
    }
    {
      unknown _indexOfInterest[150343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150344] "expr temp" "temp"
      unknown call_tmp[669527] "expr temp" "maybe param" "maybe type" "temp"
      (669530 'move' call_tmp[669527](150358 call - prevNewIdx[150075] 1))
      unknown call_tmp[669532] "expr temp" "maybe param" "maybe type" "temp"
      (669535 'move' call_tmp[669532](150361 call chpl_direct_range_iter 1 call_tmp[669527] 1))
      (150353 'move' _iterator[150344](150351 call _getIterator call_tmp[669532]))
      Defer
      {
        {
          (150377 call _freeIterator _iterator[150344])
        }
      }
      { scopeless type
        (150366 'move' _indexOfInterest[150343](150363 call iteratorIndex _iterator[150344]))
      }
      ForLoop[150345]
      {
        unknown i[150370] "index var" "insert auto destroy"
        (481691 'end of statement')
        (150372 'move' i[150370] _indexOfInterest[150343])
        (481692 'end of statement' i[150370])
        unknown call_tmp[669539] "expr temp" "maybe param" "maybe type" "temp"
        (669542 'move' call_tmp[669539](150338 call(386006 call (partial) data _mt[243] this[150597]) i[150370]))
        unknown call_tmp[669546] "expr temp" "maybe param" "maybe type" "temp"
        (669549 'move' call_tmp[669546](386012 call irv _mt[243] this[150597]))
        (150340 call = call_tmp[669539] call_tmp[669546])
        (481694 'end of statement' i[150370])
        label _continueLabel[150348]
        _indexOfInterest[150343]
        _iterator[150344]
      }
      label _breakLabel[150349]
    }
    (520429 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArray[150390](arg _mt[150603]:_MT[238], arg this[150601]:BaseSparseArrImpl[150571](?), arg shiftrange[150388]:_any[178](?), arg initrange[150392]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150405] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150406] "expr temp" "temp"
      (150415 'move' _iterator[150406](150413 call _getIterator initrange[150392]))
      Defer
      {
        {
          (150431 call _freeIterator _iterator[150406])
        }
      }
      { scopeless type
        (150420 'move' _indexOfInterest[150405](150417 call iteratorIndex _iterator[150406]))
      }
      ForLoop[150407]
      {
        unknown i[150424] "index var" "insert auto destroy"
        (481697 'end of statement')
        (150426 'move' i[150424] _indexOfInterest[150405])
        (481698 'end of statement' i[150424])
        {
          unknown call_tmp[669553] "expr temp" "maybe param" "maybe type" "temp"
          (669556 'move' call_tmp[669553](150399 call(386019 call (partial) data _mt[243] this[150601]) i[150424]))
          unknown call_tmp[669560] "expr temp" "maybe param" "maybe type" "temp"
          (669563 'move' call_tmp[669560](386025 call irv _mt[243] this[150601]))
          (150401 call = call_tmp[669553] call_tmp[669560])
          (481700 'end of statement' i[150424])
        }
        label _continueLabel[150410]
        _indexOfInterest[150405]
        _iterator[150406]
      }
      label _breakLabel[150411]
    }
    {
      unknown _indexOfInterest[150461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150462] "expr temp" "temp"
      unknown call_tmp[669565] "expr temp" "maybe param" "maybe type" "temp"
      (669568 'move' call_tmp[669565](150442 call - 1))
      unknown call_tmp[669570] "expr temp" "maybe param" "maybe type" "temp"
      (669573 'move' call_tmp[669570](150444 call chpl_by shiftrange[150388] call_tmp[669565]))
      (150471 'move' _iterator[150462](150469 call _getIterator call_tmp[669570]))
      Defer
      {
        {
          (150491 call _freeIterator _iterator[150462])
        }
      }
      { scopeless type
        (150480 'move' _indexOfInterest[150461](150477 call iteratorIndex _iterator[150462]))
      }
      ForLoop[150463]
      {
        unknown i[150484] "index var" "insert auto destroy"
        (481703 'end of statement')
        (150486 'move' i[150484] _indexOfInterest[150461])
        (481704 'end of statement' i[150484])
        {
          unknown call_tmp[669577] "expr temp" "maybe param" "maybe type" "temp"
          (669580 'move' call_tmp[669577](150449 call + i[150484] 1))
          unknown call_tmp[669582] "expr temp" "maybe param" "maybe type" "temp"
          (669585 'move' call_tmp[669582](150452 call(386031 call (partial) data _mt[243] this[150601]) call_tmp[669577]))
          unknown call_tmp[669589] "expr temp" "maybe param" "maybe type" "temp"
          (669592 'move' call_tmp[669589](150456 call(386037 call (partial) data _mt[243] this[150601]) i[150484]))
          (150457 call = call_tmp[669582] call_tmp[669589])
          (481706 'end of statement' i[150484] i[150484])
        }
        label _continueLabel[150466]
        _indexOfInterest[150461]
        _iterator[150462]
      }
      label _breakLabel[150467]
    }
    unknown call_tmp[669598] "expr temp" "maybe param" "maybe type" "temp"
    (669601 'move' call_tmp[669598](150500 call low _mt[243] shiftrange[150388]))
    unknown call_tmp[669603] "expr temp" "maybe param" "maybe type" "temp"
    (669606 'move' call_tmp[669603](150504 call(386043 call (partial) data _mt[243] this[150601]) call_tmp[669598]))
    unknown call_tmp[669610] "expr temp" "maybe param" "maybe type" "temp"
    (669613 'move' call_tmp[669610](386048 call irv _mt[243] this[150601]))
    (150506 call = call_tmp[669603] call_tmp[669610])
    (520431 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArrayBack[150515](arg _mt[150607]:_MT[238], arg this[150605]:BaseSparseArrImpl[150571](?), arg shiftrange[150513]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150535] "expr temp" "temp"
      (150544 'move' _iterator[150535](150542 call _getIterator shiftrange[150513]))
      Defer
      {
        {
          (150560 call _freeIterator _iterator[150535])
        }
      }
      { scopeless type
        (150549 'move' _indexOfInterest[150534](150546 call iteratorIndex _iterator[150535]))
      }
      ForLoop[150536]
      {
        unknown i[150553] "index var" "insert auto destroy"
        (481711 'end of statement')
        (150555 'move' i[150553] _indexOfInterest[150534])
        (481712 'end of statement' i[150553])
        {
          unknown call_tmp[669617] "expr temp" "maybe param" "maybe type" "temp"
          (669620 'move' call_tmp[669617](150522 call(386054 call (partial) data _mt[243] this[150605]) i[150553]))
          unknown call_tmp[669624] "expr temp" "maybe param" "maybe type" "temp"
          (669627 'move' call_tmp[669624](150526 call + i[150553] 1))
          unknown call_tmp[669629] "expr temp" "maybe param" "maybe type" "temp"
          (669632 'move' call_tmp[669629](150529 call(386060 call (partial) data _mt[243] this[150605]) call_tmp[669624]))
          (150530 call = call_tmp[669617] call_tmp[669629])
          (481714 'end of statement' i[150553] i[150553])
        }
        label _continueLabel[150539]
        _indexOfInterest[150534]
        _iterator[150535]
      }
      label _breakLabel[150540]
    }
    (520433 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).super[808377](arg _mt[808379]:_MT[238], arg this[808381]:BaseSparseArrImpl[150571](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808391] "RVV" "temp"
    unknown call_tmp[808398] "expr temp" "maybe param" "maybe type" "temp"
    (808401 'move' call_tmp[808398](808385 '.v' this[808381] c"super"))
    (808396 'move' ret[808391](808395 'deref' call_tmp[808398]))
    (808393 return ret[808391])
  }
  function BaseSparseArrImpl[150571](?).data[808403](arg _mt[808405]:_MT[238], arg this[808407]:BaseSparseArrImpl[150571](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808417] "RVV" "temp"
    unknown call_tmp[808424] "expr temp" "maybe param" "maybe type" "temp"
    (808427 'move' call_tmp[808424](808411 '.' this[808407] c"data"))
    (808422 'move' ret[808417](808421 'addr of' call_tmp[808424]))
    (808419 return ret[808417])
  }
  function BaseSparseArrImpl[150571](?).irv[808429](arg _mt[808431]:_MT[238], arg this[808433]:BaseSparseArrImpl[150571](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[808443] "RVV" "temp"
    unknown call_tmp[808450] "expr temp" "maybe param" "maybe type" "temp"
    (808453 'move' call_tmp[808450](808437 '.' this[808433] c"irv"))
    (808448 'move' ret[808443](808447 'addr of' call_tmp[808450]))
    (808445 return ret[808443])
  }
  type BaseSparseArrImpl[150571](?) val super[355725]:BaseSparseArr[149900](?) "delay instantiation" "super class" unknown data[149926] "local field" "unsafe"(149924 call chpl__buildArrayRuntimeType(149922 call chpl__ensureDomainExpr(149917 call nnzDom _mt[243] dom[149878])) eltType[149714]) unknown irv[150046] eltType[149714]
  function _delete_dist[150617](arg dist[150614]:unmanaged BaseDist[415511], arg privatized[150620]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150630 call(150626 call (partial) dsiDestroyDist _mt[243] dist[150614]))
    (481717 'end of statement')
    unknown tmp[427195] "maybe param" "temp"
    (427206 'move' tmp[427195] 1)
    unknown call_tmp[669638] "expr temp" "maybe param" "maybe type" "temp"
    (669641 'move' call_tmp[669638](427208 call _cond_invalid tmp[427195]))
    if call_tmp[669638]
    {
      (427211 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568714] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568715] "maybe param" "temp"
    unknown call_tmp[669643] "expr temp" "maybe param" "maybe type" "temp"
    (669646 'move' call_tmp[669643](427196 call isTrue tmp[427195]))
    (568720 'move' tmp[568715](568718 call _cond_test call_tmp[669643]))
    if tmp[568715]
    {
      unknown tmp[568722] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568724 'move' tmp[568722](427199 call isTrue privatized[150620]))
      (568729 'move' tmp[568714](568726 '_paramFoldLogical' tmp[568715] tmp[568722]))
    }
    {
      (568734 'move' tmp[568714](568731 '_paramFoldLogical' tmp[568715] 0))
    }
    unknown call_tmp[669648] "expr temp" "maybe param" "maybe type" "temp"
    (669651 'move' call_tmp[669648](150647 call _cond_test tmp[568714]))
    if call_tmp[669648]
    {
      unknown call_tmp[669655] "expr temp" "maybe param" "maybe type" "temp"
      (669658 'move' call_tmp[669655](150639 call pid _mt[243] dist[150614]))
      (150644 call _freePrivatizedClass call_tmp[669655] dist[150614])
    }
    (150653 call chpl__delete dist[150614])
    (520435 return _void[55])
  }
  function _delete_dom[150662](arg dom[150660]:_any[178](?), arg privatized[150665]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150675 call(150671 call (partial) dsiDestroyDom _mt[243] dom[150660]))
    (481721 'end of statement')
    unknown tmp[427216] "maybe param" "temp"
    (427227 'move' tmp[427216] 1)
    unknown call_tmp[669662] "expr temp" "maybe param" "maybe type" "temp"
    (669665 'move' call_tmp[669662](427229 call _cond_invalid tmp[427216]))
    if call_tmp[669662]
    {
      (427232 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568741] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568742] "maybe param" "temp"
    unknown call_tmp[669667] "expr temp" "maybe param" "maybe type" "temp"
    (669670 'move' call_tmp[669667](427217 call isTrue tmp[427216]))
    (568747 'move' tmp[568742](568745 call _cond_test call_tmp[669667]))
    if tmp[568742]
    {
      unknown tmp[568749] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568751 'move' tmp[568749](427220 call isTrue privatized[150665]))
      (568756 'move' tmp[568741](568753 '_paramFoldLogical' tmp[568742] tmp[568749]))
    }
    {
      (568761 'move' tmp[568741](568758 '_paramFoldLogical' tmp[568742] 0))
    }
    unknown call_tmp[669672] "expr temp" "maybe param" "maybe type" "temp"
    (669675 'move' call_tmp[669672](150692 call _cond_test tmp[568741]))
    if call_tmp[669672]
    {
      unknown call_tmp[669679] "expr temp" "maybe param" "maybe type" "temp"
      (669682 'move' call_tmp[669679](150684 call pid _mt[243] dom[150660]))
      (150689 call _freePrivatizedClass call_tmp[669679] dom[150660])
    }
    (150698 call chpl__delete dom[150660])
    (520437 return _void[55])
  }
  function _delete_arr[150710](arg arr[150707]:unmanaged BaseArr[415496], param arg privatized[150713]:bool[10], arg deinitElts[150717] :
  1 =
  1) : _unknown[51] "no return value for void"
  {
    (150729 call(150723 call (partial) dsiDestroyArr _mt[243] arr[150707])(deinitElts = deinitElts[150717]))
    (481725 'end of statement')
    (150739 call(150735 call (partial) decEltCountsIfNeeded _mt[243] arr[150707]))
    (481726 'end of statement')
    unknown tmp[427237] "maybe param" "temp"
    (427248 'move' tmp[427237] 1)
    unknown call_tmp[669688] "expr temp" "maybe param" "maybe type" "temp"
    (669691 'move' call_tmp[669688](427250 call _cond_invalid tmp[427237]))
    if call_tmp[669688]
    {
      (427253 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568768] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568769] "maybe param" "temp"
    unknown call_tmp[669693] "expr temp" "maybe param" "maybe type" "temp"
    (669696 'move' call_tmp[669693](427238 call isTrue tmp[427237]))
    (568774 'move' tmp[568769](568772 call _cond_test call_tmp[669693]))
    if tmp[568769]
    {
      unknown tmp[568776] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568778 'move' tmp[568776](427241 call isTrue privatized[150713]))
      (568783 'move' tmp[568768](568780 '_paramFoldLogical' tmp[568769] tmp[568776]))
    }
    {
      (568788 'move' tmp[568768](568785 '_paramFoldLogical' tmp[568769] 0))
    }
    unknown call_tmp[669698] "expr temp" "maybe param" "maybe type" "temp"
    (669701 'move' call_tmp[669698](150755 call _cond_test tmp[568768]))
    if call_tmp[669698]
    {
      unknown call_tmp[669705] "expr temp" "maybe param" "maybe type" "temp"
      (669708 'move' call_tmp[669705](150747 call pid _mt[243] arr[150707]))
      (150752 call _freePrivatizedClass call_tmp[669705] arr[150707])
    }
    (150761 call chpl__delete arr[150707])
    (520439 return _void[55])
  }
  function chpl_assignDomainWithGetSetIndices[150773](arg lhs[150770]:_any[178](?), arg rhs[150776]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown arrType[150795] "dead at end of block" "insert auto destroy" "type variable"(150794 call(150790 call (partial) getBaseArrType _mt[243] lhs[150770]))
    (543669 'move' arrType[150795](543668 call(543665 call (partial) getBaseArrType _mt[243] lhs[150770])))
    unknown call_tmp[669716] "maybe param" "maybe type" "temp"
    (669719 'move' call_tmp[669716](150800 call rank _mt[243] lhs[150770]))
    unknown rank[150803] "dead at end of block" "param"
    (543671 'init var' rank[150803] call_tmp[669716])
    (150806 'end of statement')
    unknown idxType[150811] "dead at end of block" "insert auto destroy" "type variable"(150808 call idxType _mt[243] lhs[150770])
    (543677 'move' idxType[150811](543674 call idxType _mt[243] lhs[150770]))
    unknown call_tmp[669727] "maybe param" "maybe type" "temp"
    (669730 'move' call_tmp[669727](150815 call stridable _mt[243] lhs[150770]))
    unknown stridable[150818] "dead at end of block" "param"
    (543679 'init var' stridable[150818] call_tmp[669727])
    (150821 'end of statement')
    {
      unknown _indexOfInterest[151021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151022] "expr temp" "temp"
      unknown call_tmp[669734] "expr temp" "maybe param" "maybe type" "temp"
      (669737 'move' call_tmp[669734](150824 call _arrs _mt[243] lhs[150770]))
      (151031 'move' _iterator[151022](151029 call _getIterator call_tmp[669734]))
      Defer
      {
        {
          (151048 call _freeIterator _iterator[151022])
        }
      }
      { scopeless type
        (151037 'move' _indexOfInterest[151021](151034 call iteratorIndex _iterator[151022]))
      }
      ForLoop[151023]
      {
        unknown e[151041] "index var" "insert auto destroy"
        (481731 'end of statement')
        (151043 'move' e[151041] _indexOfInterest[151021])
        (481732 'end of statement' e[151041])
        {
          const tmp[151012] "const" "temp"
          unknown call_tmp[669739] "expr temp" "maybe param" "maybe type" "temp"
          (669742 'move' call_tmp[669739](151009 '_wide_get_locale' e[151041]))
          (151014 'move' tmp[151012](151010 'deref' call_tmp[669739]))
          (935289 call on_fn[935285] tmp[151012])
          function on_fn[935285](const in arg dummy_locale_arg[935287]:chpl_localeID_t[209352]) : void[4] "on"
          {
            {
              unknown call_tmp[669744] "expr temp" "maybe param" "maybe type" "temp"
              (669747 'move' call_tmp[669744](150830 'to nilable class from type' arrType[150795]))
              unknown call_tmp[669749] "maybe param" "maybe type" "temp"
              (669752 'move' call_tmp[669749](150831 call _cast call_tmp[669744] e[151041]))
              unknown eCastQ[150833] "dead at end of block" "insert auto destroy"
              (543681 'init var' eCastQ[150833] call_tmp[669749])
              (150836 'end of statement')
              unknown call_tmp[669754] "expr temp" "maybe param" "maybe type" "temp"
              (669757 'move' call_tmp[669754](150840 call == eCastQ[150833] nil[44]))
              unknown call_tmp[669759] "expr temp" "maybe param" "maybe type" "temp"
              (669762 'move' call_tmp[669759](150888 call _cond_test call_tmp[669754]))
              if call_tmp[669759]
              {
                unknown call_tmp[669764] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                (669767 'move' call_tmp[669764](461918 'typeof' lhs[150770]))
                unknown call_tmp[669769] "expr temp" "maybe param" "maybe type" "temp"
                (669772 'move' call_tmp[669769](150863 call _cast string[26] call_tmp[669764]))
                unknown call_tmp[669774] "expr temp" "maybe param" "maybe type" "temp"
                (669777 'move' call_tmp[669774](150884 call _cast string[26] arrType[150795]))
                (150886 call halt "internal error: " call_tmp[669769] " contains an bad array type " call_tmp[669774])
                (481736 'end of statement' arrType[150795])
              }
              unknown call_tmp[669779] "maybe param" "maybe type" "temp"
              (669782 'move' call_tmp[669779](150894 call postfix! eCastQ[150833]))
              unknown eCast[150896] "dead at end of block" "insert auto destroy"
              (543683 'init var' eCast[150896] call_tmp[669779])
              (150899 'end of statement')
              unknown call_tmp[669786] "maybe param" "maybe type" "temp"
              (669789 'move' call_tmp[669786](150905 call(150901 call (partial) getIndices _mt[243] rhs[150776])))
              unknown inds[150906] "dead at end of block" "insert auto destroy"
              (543685 'init var' inds[150906] call_tmp[669786])
              (150909 'end of statement')
              unknown tmp[150922] "dead at end of block" "insert auto destroy"
              unknown call_tmp[669791] "expr temp" "maybe param" "maybe type" "temp"
              (669794 'move' call_tmp[669791](150919 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
              unknown call_tmp[669796] "expr temp" "maybe param" "maybe type" "temp"
              (669799 'move' call_tmp[669796](150920 call * rank[150803] call_tmp[669791]))
              (543687 'default init var' tmp[150922] call_tmp[669796])
              (150925 'end of statement' arrType[150795] e[151041] eCastQ[150833] idxType[150811])
              {
                unknown i[150964] "dead at end of block" "insert auto destroy"
                (543689 'init var' i[150964] 0)
                (481740 'end of statement')
                unknown tmp[150965] "maybe param" "temp"
                unknown call_tmp[669801] "expr temp" "maybe param" "maybe type" "temp"
                (669804 'move' call_tmp[669801](150929 call - rank[150803] 1))
                (150977 'move' tmp[150965](150975 call chpl_compute_low_param_loop_bound 0 call_tmp[669801]))
                unknown tmp[150966] "maybe param" "temp"
                unknown call_tmp[669806] "expr temp" "maybe param" "maybe type" "temp"
                (669809 'move' call_tmp[669806](150982 call - rank[150803] 1))
                (150987 'move' tmp[150966](150985 call chpl_compute_high_param_loop_bound 0 call_tmp[669806]))
                unknown tmp[150967] "maybe param" "temp"
                (150990 'move' tmp[150967] 1)
                ParamForLoop[150992]
                { i[150964] tmp[150965] tmp[150966] tmp[150967]
                  {
                    unknown call_tmp[669811] "maybe param" "maybe type" "temp"
                    (669814 'move' call_tmp[669811](150936 call inds[150906] i[150964]))
                    unknown from[150937] "dead at end of block" "insert auto destroy"
                    (543691 'init var' from[150937] call_tmp[669811])
                    (150940 'end of statement' inds[150906] i[150964])
                    unknown call_tmp[669816] "expr temp" "maybe param" "maybe type" "temp"
                    (669819 'move' call_tmp[669816](150945 call tmp[150922] i[150964]))
                    unknown call_tmp[669823] "expr temp" "maybe param" "maybe type" "temp"
                    (669826 'move' call_tmp[669823](150958 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
                    unknown call_tmp[669828] "expr temp" "maybe param" "maybe type" "temp"
                    (669831 'move' call_tmp[669828](150960 call(150947 call (partial) safeCast _mt[243] from[150937]) call_tmp[669823]))
                    (150961 call = call_tmp[669816] call_tmp[669828])
                    (481743 'end of statement' tmp[150922] i[150964] from[150937] idxType[150811])
                  }
                }
                label _unused_continueLabel[150969]
                label _breakLabel[150968]
              }
              (151007 call(151002 call (partial) dsiReallocate _mt[243] eCast[150896]) tmp[150922])
              (481748 'end of statement' eCast[150896] tmp[150922])
            }
            (935292 return _void[55])
          }
          {
          }
        }
        label _continueLabel[151026]
        _indexOfInterest[151021]
        _iterator[151022]
      }
      label _breakLabel[151027]
    }
    unknown call_tmp[669839] "expr temp" "maybe param" "maybe type" "temp"
    (669842 'move' call_tmp[669839](151064 call(151060 call (partial) getIndices _mt[243] rhs[150776])))
    (151066 call(151056 call (partial) dsiSetIndices _mt[243] lhs[150770]) call_tmp[669839])
    (481751 'end of statement')
    {
      unknown _indexOfInterest[151109] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151110] "expr temp" "temp"
      unknown call_tmp[669846] "expr temp" "maybe param" "maybe type" "temp"
      (669849 'move' call_tmp[669846](151070 call _arrs _mt[243] lhs[150770]))
      (151119 'move' _iterator[151110](151117 call _getIterator call_tmp[669846]))
      Defer
      {
        {
          (151136 call _freeIterator _iterator[151110])
        }
      }
      { scopeless type
        (151125 'move' _indexOfInterest[151109](151122 call iteratorIndex _iterator[151110]))
      }
      ForLoop[151111]
      {
        unknown e[151129] "index var" "insert auto destroy"
        (481753 'end of statement')
        (151131 'move' e[151129] _indexOfInterest[151109])
        (481754 'end of statement' e[151129])
        {
          unknown call_tmp[669851] "expr temp" "maybe param" "maybe type" "temp"
          (669854 'move' call_tmp[669851](151075 'to nilable class from type' arrType[150795]))
          unknown call_tmp[669856] "maybe param" "maybe type" "temp"
          (669859 'move' call_tmp[669856](151076 call _cast call_tmp[669851] e[151129]))
          unknown eCastQ[151078] "dead at end of block" "insert auto destroy"
          (543693 'init var' eCastQ[151078] call_tmp[669856])
          (151081 'end of statement')
          unknown call_tmp[669861] "maybe param" "maybe type" "temp"
          (669864 'move' call_tmp[669861](151084 call postfix! eCastQ[151078]))
          unknown eCast[151086] "dead at end of block" "insert auto destroy"
          (543695 'init var' eCast[151086] call_tmp[669861])
          (151089 'end of statement' arrType[150795] e[151129] eCastQ[151078])
          const tmp[151101] "const" "temp"
          unknown call_tmp[669866] "expr temp" "maybe param" "maybe type" "temp"
          (669869 'move' call_tmp[669866](151098 '_wide_get_locale' e[151129]))
          (151103 'move' tmp[151101](151099 'deref' call_tmp[669866]))
          (935298 call on_fn[935294] tmp[151101])
          function on_fn[935294](const in arg dummy_locale_arg[935296]:chpl_localeID_t[209352]) : void[4] "on"
          {
            (151096 call(151092 call (partial) dsiPostReallocate _mt[243] eCast[151086]))
            (481759 'end of statement' eCast[151086])
            (935301 return _void[55])
          }
          {
          }
        }
        label _continueLabel[151114]
        _indexOfInterest[151109]
        _iterator[151110]
      }
      label _breakLabel[151115]
    }
    unknown call_tmp[669875] "expr temp" "maybe param" "maybe type" "temp"
    (669878 'move' call_tmp[669875](151148 call(151144 call (partial) dsiSupportsPrivatization _mt[243] lhs[150770])))
    unknown call_tmp[669880] "expr temp" "maybe param" "maybe type" "temp"
    (669883 'move' call_tmp[669880](151155 call _cond_test call_tmp[669875]))
    if call_tmp[669880]
    {
      (151152 call _reprivatize lhs[150770])
    }
    (520441 return _void[55])
  }
  where {
    unknown call_tmp[669885] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669888 'move' call_tmp[669885](461920 'typeof' lhs[150770]))
    unknown call_tmp[669890] "expr temp" "maybe param" "maybe type" "temp"
    (669893 'move' call_tmp[669890](150783 call _to_borrowed call_tmp[669885]))
    (354373 'is_subtype' BaseRectangularDom[382286](?) call_tmp[669890])
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151169](arg lhs[151166]:_any[178](?), arg rhs[151172]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151226] "expr temp" "temp"
      unknown call_tmp[669897] "expr temp" "maybe param" "maybe type" "temp"
      (669900 'move' call_tmp[669897](151201 call(151197 call (partial) dsiIndsIterSafeForRemoving _mt[243] lhs[151166])))
      (151235 'move' _iterator[151226](151233 call _getIterator call_tmp[669897]))
      Defer
      {
        {
          (151252 call _freeIterator _iterator[151226])
        }
      }
      { scopeless type
        (151241 'move' _indexOfInterest[151225](151238 call iteratorIndex _iterator[151226]))
      }
      ForLoop[151227]
      {
        unknown i[151245] "index var" "insert auto destroy"
        (481763 'end of statement')
        (151247 'move' i[151245] _indexOfInterest[151225])
        (481764 'end of statement' i[151245])
        {
          unknown call_tmp[669904] "expr temp" "maybe param" "maybe type" "temp"
          (669907 'move' call_tmp[669904](151208 call(151203 call (partial) contains _mt[243] rhs[151172]) i[151245]))
          unknown call_tmp[669909] "expr temp" "maybe param" "maybe type" "temp"
          (669912 'move' call_tmp[669909](151209 call ! call_tmp[669904]))
          unknown call_tmp[669914] "expr temp" "maybe param" "maybe type" "temp"
          (669917 'move' call_tmp[669914](151220 call _cond_test call_tmp[669909]))
          if call_tmp[669914]
          {
            (151217 call(151212 call (partial) dsiRemove _mt[243] lhs[151166]) i[151245])
            (481766 'end of statement' i[151245])
          }
        }
        label _continueLabel[151230]
        _indexOfInterest[151225]
        _iterator[151226]
      }
      label _breakLabel[151231]
    }
    {
      unknown _indexOfInterest[151285] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151286] "expr temp" "temp"
      (151295 'move' _iterator[151286](151293 call _getIterator rhs[151172]))
      Defer
      {
        {
          (151311 call _freeIterator _iterator[151286])
        }
      }
      { scopeless type
        (151300 'move' _indexOfInterest[151285](151297 call iteratorIndex _iterator[151286]))
      }
      ForLoop[151287]
      {
        unknown i[151304] "index var" "insert auto destroy"
        (481769 'end of statement')
        (151306 'move' i[151304] _indexOfInterest[151285])
        (481770 'end of statement' i[151304])
        {
          unknown call_tmp[669923] "expr temp" "maybe param" "maybe type" "temp"
          (669926 'move' call_tmp[669923](151268 call(151263 call (partial) dsiMember _mt[243] lhs[151166]) i[151304]))
          unknown call_tmp[669928] "expr temp" "maybe param" "maybe type" "temp"
          (669931 'move' call_tmp[669928](151269 call ! call_tmp[669923]))
          unknown call_tmp[669933] "expr temp" "maybe param" "maybe type" "temp"
          (669936 'move' call_tmp[669933](151280 call _cond_test call_tmp[669928]))
          if call_tmp[669933]
          {
            (151277 call(151272 call (partial) dsiAdd _mt[243] lhs[151166]) i[151304])
            (481772 'end of statement' i[151304])
          }
        }
        label _continueLabel[151290]
        _indexOfInterest[151285]
        _iterator[151286]
      }
      label _breakLabel[151291]
    }
    (520443 return _void[55])
  }
  where {
    unknown tmp[427258] "maybe param" "temp"
    unknown call_tmp[669940] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669943 'move' call_tmp[669940](461922 'typeof' lhs[151166]))
    unknown call_tmp[669945] "expr temp" "maybe param" "maybe type" "temp"
    (669948 'move' call_tmp[669945](151179 call _to_borrowed call_tmp[669940]))
    (427269 'move' tmp[427258](354374 'is_subtype' BaseSparseDom[382296](?) call_tmp[669945]))
    unknown call_tmp[669950] "expr temp" "maybe param" "maybe type" "temp"
    (669953 'move' call_tmp[669950](427271 call _cond_invalid tmp[427258]))
    if call_tmp[669950]
    {
      (427274 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568795] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568796] "maybe param" "temp"
    unknown call_tmp[669955] "expr temp" "maybe param" "maybe type" "temp"
    (669958 'move' call_tmp[669955](427259 call isTrue tmp[427258]))
    (568801 'move' tmp[568796](568799 call _cond_test call_tmp[669955]))
    if tmp[568796]
    {
      (568806 'move' tmp[568795](568803 '_paramFoldLogical' tmp[568796] 1))
    }
    {
      unknown tmp[568808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[669960] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (669963 'move' call_tmp[669960](461924 'typeof' lhs[151166]))
      unknown call_tmp[669965] "expr temp" "maybe param" "maybe type" "temp"
      (669968 'move' call_tmp[669965](151187 call _to_borrowed call_tmp[669960]))
      unknown call_tmp[669970] "expr temp" "maybe param" "maybe type" "temp"
      (669973 'move' call_tmp[669970](354375 'is_subtype' BaseAssociativeDom[382291](?) call_tmp[669965]))
      (568810 'move' tmp[568808](427263 call isTrue call_tmp[669970]))
      (568815 'move' tmp[568795](568812 '_paramFoldLogical' tmp[568796] tmp[568808]))
    }
    (748393 call chpl_statementLevelSymbol tmp[568795])
  }
  (355169 'used modules list'(145460 'use' ChapelArray[113678])(145462 'use' ChapelRange[64183])(145465 'use' ChapelLocks[187302])(145468 'use' ChapelHashtable[200446]))
}