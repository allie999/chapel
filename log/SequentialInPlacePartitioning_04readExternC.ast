AST dump for SequentialInPlacePartitioning after pass readExternC.
Module use list: 

{
  (353042 'use' ChapelStandard)
  { scopeless
    unknown DISTRIBUTE_BUFFER[278098] "param" "private" 5
    (278101 'end of statement')
  }
  function bucketize[278109](arg start_n[278106] :
  int[13], arg end_n[278112] :
  int[13], arg A[278118] :
  (278115 call chpl__buildArrayRuntimeType nil[44]), arg bucketizer[278121]:_any[178](?), arg criterion[278123]:_any[178](?), arg startbit[278126] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown nBuckets[278137](278136 call(278132 call . bucketizer c"getNumBuckets"))
      (278140 'end of statement')
    }
    { scopeless
      const nTasks[278154] "const"(278151 IfExpr (278144 call > dataParTasksPerLocale 0) then
      { scopeless
        dataParTasksPerLocale
      } else
      { scopeless
        (278148 call . here c"maxTaskPar")
      } )
      (278157 'end of statement')
    }
    { scopeless
      const countsSize[278162] "const"(278160 call * nTasks nBuckets)
      (278165 'end of statement')
    }
    { scopeless
      const n[278173] "const"(278171 call +(278168 call - end_n start_n) 1)
      (278176 'end of statement')
    }
    { scopeless
      const blockSize[278182] "const"(278181 call divceil n nTasks)
      (278185 'end of statement')
    }
    { scopeless
      const nBlocks[278191] "const"(278190 call divceil n blockSize)
      (278194 'end of statement')
    }
    { scopeless
      unknown counts[278207](278205 call chpl__buildArrayRuntimeType(278203 call chpl__ensureDomainExpr(278199 call #(278196 call chpl_build_low_bounded_range 0) nBuckets)) int[13])
      (278210 'end of statement')
    }
    {
      unknown tmpIter[278339] "expr temp" "maybe ref" "no copy" "temp"
      (278342 'move' tmpIter[278339](278216 call #(278213 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[278578] "maybe param" "temp"
      (278593 'move' isRngDomArr[278578](278591 call ||(278580 call isBoundedRange tmpIter[278339])(278589 call ||(278583 call isDomain tmpIter[278339])(278586 call isArray tmpIter[278339]))))
      if isRngDomArr[278578]
      {
        const _coforallCount[278445] "const" "end count" "temp"
        (278514 'move' _coforallCount[278445](278511 call _endCountAlloc 1))
        unknown numTasks[278446] "temp"
        (278498 'move' numTasks[278446](278494 call . tmpIter[278339] c"size"))
        (278489 call _upEndCount _coforallCount[278445] 1 numTasks[278446])
        (278486 call chpl_resetTaskSpawn numTasks[278446])
        unknown _indexOfInterest[278453] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[278454] "expr temp" "temp"
        (278463 'move' _iterator[278454](278461 call _getIterator tmpIter[278339]))
        Defer
        {
          {
            (278479 call _freeIterator _iterator[278454])
          }
        }
        { scopeless type
          (278468 'move' _indexOfInterest[278453](278465 call iteratorIndex _iterator[278454]))
        }
        ForLoop[278455]
        {
          unknown tid[278472] "coforall index var" "index var" "insert auto destroy"
          (278474 'move' tid[278472] _indexOfInterest[278453])
          {
            {
              { scopeless
                unknown start[278349](278351 call + start_n(278354 call * tid blockSize))
                (278358 'end of statement')
              }
              { scopeless
                unknown end[278360](278362 call -(278364 call + start blockSize) 1)
                (278369 'end of statement')
              }
              if(278371 call _cond_test(278373 call > end end_n))
              {
                (278378 call = end end_n)
              }
              {
                unknown _indexOfInterest[278383] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[278385] "expr temp" "temp"
                (278387 'move' _iterator[278385](278390 call _getIterator(278395 call(278392 call . bucketizer c"classify") A start end criterion startbit)))
                Defer
                {
                  {
                    (278403 call _freeIterator _iterator[278385])
                  }
                }
                { scopeless type
                  (278407 'move' _indexOfInterest[278383](278410 call iteratorIndex _iterator[278385]))
                }
                ForLoop[278412]
                {
                  (278416 call _check_tuple_var_decl _indexOfInterest[278383] 2)
                  unknown i[278419] "index var" "insert auto destroy"
                  (278421 'move' i[278419](278424 call _indexOfInterest[278383] 0))
                  unknown bin[278426] "index var" "insert auto destroy"
                  (278428 'move' bin[278426](278431 call _indexOfInterest[278383] 1))
                  {
                    (278435 call +=(278437 call counts bin) 1)
                  }
                  label _continueLabel[278440]
                  _indexOfInterest[278383]
                  _iterator[278385]
                }
                label _breakLabel[278442]
              }
            }
            (278448 call _downEndCount _coforallCount[278445] nil[44])
            (278447 'coforall loop')
            (278344 'actuals list' SumReduceScanOp counts)
          }
          label _continueLabel[278458]
          _indexOfInterest[278453]
          _iterator[278454]
        }
        label _breakLabel[278459]
        Defer
        {
          {
            (278501 call _endCountFree _coforallCount[278445])
          }
        }
        (278506 call _waitEndCount _coforallCount[278445] 1 numTasks[278446])
      }
      {
        const _coforallCount[278518] "const" "end count" "temp"
        (278575 'move' _coforallCount[278518](278572 call _endCountAlloc 1))
        unknown _indexOfInterest[278526] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[278527] "expr temp" "temp"
        (278536 'move' _iterator[278527](278534 call _getIterator tmpIter[278339]))
        Defer
        {
          {
            (278552 call _freeIterator _iterator[278527])
          }
        }
        { scopeless type
          (278541 'move' _indexOfInterest[278526](278538 call iteratorIndex _iterator[278527]))
        }
        ForLoop[278528]
        {
          unknown tid[278545] "coforall index var" "index var" "insert auto destroy"
          (278547 'move' tid[278545] _indexOfInterest[278526])
          (278559 call _upEndCount _coforallCount[278518] 1)
          {
            {
              { scopeless
                unknown start[278234](278232 call + start_n(278230 call * tid blockSize))
                (278237 'end of statement')
              }
              { scopeless
                unknown end[278246](278244 call -(278241 call + start blockSize) 1)
                (278249 'end of statement')
              }
              if(278260 call _cond_test(278252 call > end end_n))
              {
                (278256 call = end end_n)
              }
              {
                unknown _indexOfInterest[278291] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[278292] "expr temp" "temp"
                (278301 'move' _iterator[278292](278299 call _getIterator(278281 call(278272 call . bucketizer c"classify") A start end criterion startbit)))
                Defer
                {
                  {
                    (278332 call _freeIterator _iterator[278292])
                  }
                }
                { scopeless type
                  (278307 'move' _indexOfInterest[278291](278304 call iteratorIndex _iterator[278292]))
                }
                ForLoop[278293]
                {
                  (278312 call _check_tuple_var_decl _indexOfInterest[278291] 2)
                  unknown i[278318] "index var" "insert auto destroy"
                  (278320 'move' i[278318](278316 call _indexOfInterest[278291] 0))
                  unknown bin[278325] "index var" "insert auto destroy"
                  (278327 'move' bin[278325](278323 call _indexOfInterest[278291] 1))
                  {
                    (278287 call +=(278285 call counts bin) 1)
                  }
                  label _continueLabel[278296]
                  _indexOfInterest[278291]
                  _iterator[278292]
                }
                label _breakLabel[278297]
              }
            }
            (278521 call _downEndCount _coforallCount[278518] nil[44])
            (278520 'coforall loop')
            (278225 'actuals list' SumReduceScanOp counts)
          }
          label _continueLabel[278531]
          _indexOfInterest[278526]
          _iterator[278527]
        }
        label _breakLabel[278532]
        Defer
        {
          {
            (278563 call _endCountFree _coforallCount[278518])
          }
        }
        (278568 call _waitEndCount _coforallCount[278518] 1)
      }
    }
    { scopeless
      unknown end_offsets[278636](278634 call +(278632 call function chpl__scan3[278599](arg chpl_toScan[278601]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
      {
        unknown chpl_eltType[278603] "maybe type" "temp"
        { scopeless type
          (278607 'move' chpl_eltType[278603](278609 'typeof'(278611 call chpl__initCopy(278613 call iteratorIndex(278615 call _getIterator chpl_toScan[278601])))))
        }
        const tmp[278604] "const" "temp"
        (278624 'move' tmp[278604](278623 'new'(278622 call SumReduceScanOp(eltType = chpl_eltType[278603])(_chpl_manager = unmanaged[220](?)))))
        (278626 return(278628 call chpl__scanIterator tmp[278604] chpl_toScan[278601]))
      } counts) start_n)
      (278639 'end of statement')
    }
    { scopeless
      unknown offsets[278644](278642 call - end_offsets counts)
      (278647 'end of statement')
    }
    { scopeless
      unknown curbin[278649] 0
      (278652 'end of statement')
    }
    {
      unknown tmp[279166] "temp"
      (279184 'move' tmp[279166](279182 call _cond_test 1))
      WhileDo[279171]
      {
        {
          {
            unknown tmp[278676] "temp"
            (278720 'move' tmp[278676](278705 call _cond_test(278707 call &&(278709 call < curbin nBuckets)(278713 call ==(278715 call offsets curbin)(278718 call end_offsets curbin)))))
            WhileDo[278681]
            {
              {
                (278672 call += curbin 1)
              }
              label _continueLabel[278679]
              (278700 'move' tmp[278676](278685 call _cond_test(278687 call &&(278689 call < curbin nBuckets)(278693 call ==(278695 call offsets curbin)(278698 call end_offsets curbin)))))
              tmp[278676]
            }
            label _breakLabel[278680]
          }
          if(278732 call _cond_test(278726 call >= curbin nBuckets))
          {
            break nil[44]
          }
          { scopeless
            unknown max_buf[278737] "param" DISTRIBUTE_BUFFER
            (278740 'end of statement')
          }
          { scopeless
            unknown buf[278748](278746 call * max_buf(278743 call . A c"eltType"))
            (278751 'end of statement')
          }
          { scopeless
            unknown used_buf[278753] 0
            (278756 'end of statement')
          }
          { scopeless
            unknown end[278761](278760 call end_offsets curbin)
            (278764 'end of statement')
          }
          { scopeless
            unknown endfast[278782](278781 call max(278769 call offsets curbin)(278779 call -(278774 call end_offsets curbin)(278777 call * 2 max_buf)))
            (278785 'end of statement')
          }
          { scopeless
            unknown bufstart[278800](278799 call max(278790 call offsets curbin)(278797 call -(278795 call end_offsets curbin) max_buf))
            (278803 'end of statement')
          }
          { scopeless
            unknown i[278805] bufstart
            (278808 'end of statement')
          }
          {
            unknown tmp[278835] "temp"
            (278859 'move' tmp[278835](278854 call _cond_test(278856 call < i end)))
            WhileDo[278840]
            {
              {
                (278821 call <=>(278816 call buf used_buf)(278820 call A i))
                (278827 call += used_buf 1)
                (278832 call += i 1)
              }
              label _continueLabel[278838]
              (278849 'move' tmp[278835](278844 call _cond_test(278846 call < i end)))
              tmp[278835]
            }
            label _breakLabel[278839]
          }
          {
            unknown tmp[278960] "temp"
            (278988 'move' tmp[278960](278981 call _cond_test(278983 call <(278985 call offsets curbin) endfast)))
            WhileDo[278965]
            {
              {
                {
                  unknown _indexOfInterest[278911] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[278912] "expr temp" "temp"
                  (278921 'move' _iterator[278912](278919 call _getIterator(278887 call(278875 call . bucketizer c"classify") buf 0(278883 call - max_buf 1) criterion startbit)))
                  Defer
                  {
                    {
                      (278952 call _freeIterator _iterator[278912])
                    }
                  }
                  { scopeless type
                    (278927 'move' _indexOfInterest[278911](278924 call iteratorIndex _iterator[278912]))
                  }
                  ForLoop[278913]
                  {
                    (278932 call _check_tuple_var_decl _indexOfInterest[278911] 2)
                    unknown idx[278938] "index var" "insert auto destroy"
                    (278940 'move' idx[278938](278936 call _indexOfInterest[278911] 0))
                    unknown bin[278945] "index var" "insert auto destroy"
                    (278947 'move' bin[278945](278943 call _indexOfInterest[278911] 1))
                    {
                      (278899 call <=>(278894 call A(278892 call offsets bin))(278898 call buf idx))
                      (278908 call +=(278906 call offsets bin) 1)
                    }
                    label _continueLabel[278916]
                    _indexOfInterest[278911]
                    _iterator[278912]
                  }
                  label _breakLabel[278917]
                }
              }
              label _continueLabel[278963]
              (278976 'move' tmp[278960](278969 call _cond_test(278971 call <(278973 call offsets curbin) endfast)))
              tmp[278960]
            }
            label _breakLabel[278964]
          }
          {
            unknown tmp[279135] "temp"
            (279163 'move' tmp[279135](279156 call _cond_test(279158 call <(279160 call offsets curbin) end)))
            WhileDo[279140]
            {
              {
                { scopeless
                  unknown j[278999] 0
                  (279002 'end of statement')
                }
                {
                  unknown tmp[279096] "temp"
                  (279132 'move' tmp[279096](279121 call _cond_test(279123 call &&(279125 call >= used_buf 0)(279129 call < j used_buf))))
                  WhileDo[279101]
                  {
                    {
                      { scopeless
                        const bin[279028] "const"(279027 call(279017 call . bucketizer c"bucketForRecord")(279023 call buf j) criterion startbit)
                        (279031 'end of statement')
                      }
                      { scopeless
                        unknown offset[279037](279036 call offsets bin)
                        (279040 'end of statement')
                      }
                      (279049 call <=>(279044 call A offset)(279048 call buf j))
                      (279057 call +=(279055 call offsets bin) 1)
                      if(279087 call _cond_test(279068 call &&(279062 call == bin curbin)(279066 call >= offset bufstart)))
                      {
                        (279072 call -= used_buf 1)
                        (279084 call <=>(279079 call buf j)(279083 call buf used_buf))
                      }
                      (279093 call += j 1)
                    }
                    label _continueLabel[279099]
                    (279116 'move' tmp[279096](279105 call _cond_test(279107 call &&(279109 call >= used_buf 0)(279113 call < j used_buf))))
                    tmp[279096]
                  }
                  label _breakLabel[279100]
                }
              }
              label _continueLabel[279138]
              (279151 'move' tmp[279135](279144 call _cond_test(279146 call <(279148 call offsets curbin) end)))
              tmp[279135]
            }
            label _breakLabel[279139]
          }
        }
        label _continueLabel[279169]
        (279177 'move' tmp[279166](279175 call _cond_test 1))
        tmp[279166]
      }
      label _breakLabel[279170]
    }
    (279188 return counts)
  }
}