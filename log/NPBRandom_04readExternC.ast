AST dump for NPBRandom after pass readExternC.
Module use list: 

{
  (353110 'use' ChapelStandard)
  (314416 'use'(314413 call . super c"RandomSupport"))
  (314420 'use' ChapelLocks)
  type NPBRandomStream[315408](?) unknown eltType[314427] "type variable"(314426 call real[16] 64) const seed[314434] "const"(314433 call int[13] 64) unknown parSafe[314440] "param" 1 bool[10] function NPBRandomStream[315408](?).init[314453](arg _mt[315412]:_MT[238], arg this[315410]:NPBRandomStream[315408](?), arg eltType[314450]:_any[178](?) =
  (314449 call real[16] 64), arg seed[314463] :
  (314458 call int[13] 64) =
  (314460 call . SeedGenerator c"oddCurrentTime"), param arg parSafe[314469] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    (314474 'use' HaltWrappers)
    (314482 call =(314478 call . this c"eltType") eltType)
    { scopeless
      unknown one[314490] 1(314488 call uint[115] 64)
      (314493 'end of statement')
    }
    { scopeless
      unknown two_46[314502](314500 call << one 46)(314497 call uint[115] 64)
      (314505 'end of statement')
    }
    { scopeless
      unknown two_46_mask[314514](314512 call - two_46 1)(314509 call uint[115] 64)
      (314517 'end of statement')
    }
    { scopeless
      unknown useed[314525](314523 call _cast(314522 call uint[115] 64) seed)
      (314528 'end of statement')
    }
    { scopeless
      unknown mod[314533](314532 call uint[115] 64)
      (314536 'end of statement')
    }
    if(314570 call _cond_test(314542 call ==(314539 call % useed 2) 0))
    {
      { scopeless
        (314568 call(314547 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer")
      }
    }
    (314580 call = mod(314578 call & useed two_46_mask))
    (314594 call =(314584 call . this c"seed")(314592 call _cast(314591 call int[13] 64) mod))
    (314602 call =(314598 call . this c"parSafe") parSafe)
    (314610 call(314606 call . this c"complete"))
    if(314670 call _cond_test(314644 call ||(314629 call ||(314620 call ==(314617 call %(314613 call . this c"seed") 2) 0)(314627 call <(314623 call . this c"seed") 1))(314642 call >(314632 call . this c"seed")(314640 call _cast(314639 call int[13] 64) two_46))))
    {
      { scopeless
        (314668 call(314647 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer between 0 and 2**46")
      }
    }
    (314677 call = NPBRandomStreamPrivate_cursor seed)
    (314682 call = NPBRandomStreamPrivate_count 1)
    if(314724 call _cond_test(314699 call ||(314693 call ||(314687 call == eltType real[16])(314691 call == eltType imag[130]))(314697 call == eltType complex[140])))
    {
    }
    {
      (314721 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }
  } function NPBRandomStream[315408](?).NPBRandomStreamPrivate_getNext_noLock[314732](arg _mt[315416]:_MT[238], arg this[315414]:NPBRandomStream[315408](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314750 call _cond_test(314736 call == eltType complex[140]))
    {
      (314740 call += NPBRandomStreamPrivate_count 2)
    }
    {
      (314746 call += NPBRandomStreamPrivate_count 1)
    }
    (314760 return(314759 call randlc eltType NPBRandomStreamPrivate_cursor))
  } function NPBRandomStream[315408](?).NPBRandomStreamPrivate_skipToNth_noLock[314770](arg _mt[315420]:_MT[238], arg this[315418]:NPBRandomStream[315408](?), in arg n[314767] :
  integral) : _unknown[51] "method" "primary method" "no doc"
  {
    (314774 call += n 1)
    if(314793 call _cond_test(314780 call == eltType complex[140]))
    {
      { scopeless
        (314790 call = n(314788 call -(314785 call * n 2) 1))
      }
    }
    (314800 call = NPBRandomStreamPrivate_count n)
    (314809 call = NPBRandomStreamPrivate_cursor(314808 call randlc_skipto seed n))
  } function NPBRandomStream[315408](?).getNext[314816](arg _mt[315424]:_MT[238], arg this[315422]:NPBRandomStream[315408](?)) : _unknown[51] "method" "primary method"
  {
    (314821 call _lock)
    { scopeless
      const result[314827] "const"(314826 call NPBRandomStreamPrivate_getNext_noLock)
      (314830 'end of statement')
    }
    (314833 call _unlock)
    (314836 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[315408](?).skipToNth[314847](arg _mt[315428]:_MT[238], arg this[315426]:NPBRandomStream[315408](?), arg n[314844] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(314884 call _cond_test(314851 call < n 0))
    {
      { scopeless
        (314882 'throw'(314855 'new'(_chpl_manager = _owned[30](?))(314881 call IllegalArgumentError(314878 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314876 call _cast string[26] n)))))
      }
    }
    (314892 call _lock)
    (314897 call NPBRandomStreamPrivate_skipToNth_noLock n)
    (314901 call _unlock)
  } function NPBRandomStream[315408](?).getNth[314911](arg _mt[315432]:_MT[238], arg this[315430]:NPBRandomStream[315408](?), arg n[314908] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(314949 call _cond_test(314916 call < n 0))
    {
      { scopeless
        (314947 'throw'(314920 'new'(_chpl_manager = _owned[30](?))(314946 call IllegalArgumentError(314943 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(314941 call _cast string[26] n)))))
      }
    }
    (314957 call _lock)
    (314962 call NPBRandomStreamPrivate_skipToNth_noLock n)
    { scopeless
      const result[314967] "const"(314966 call NPBRandomStreamPrivate_getNext_noLock)
      (314970 'end of statement')
    }
    (314973 call _unlock)
    (314976 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[315408](?).fillRandom[314990](arg _mt[315436]:_MT[238], arg this[315434]:NPBRandomStream[315408](?), arg arr[314987] :
  (314984 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown x[315017] "index var" "insert auto destroy"
        
        unknown r[315019] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (315009 call iterate(315001 call . arr c"_dom")(315006 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (315013 call = x r)
      }
    }
  } function NPBRandomStream[315408](?).fillRandom[315034](arg _mt[315440]:_MT[238], arg this[315438]:NPBRandomStream[315408](?), arg arr[315031] :
  (315028 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc"
  {
    (315064 call compilerError "NPBRandomStream(eltType="(315057 call _cast string[26] eltType) ") can only be used to fill arrays of "(315062 call _cast string[26] eltType))
  } function NPBRandomStream[315408](?).choice[315077](arg _mt[315444]:_MT[238], arg this[315442]:NPBRandomStream[315408](?), arg x[315074] :
  (315071 call chpl__buildArrayRuntimeType nil[44]), arg size[315082] :
  unknown sizeType[315079] =
  none[57], arg replace[315087] =
  1, arg prob[315093] :
  unknown probType[315090] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315116 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315408](?).choice[315131](arg _mt[315448]:_MT[238], arg this[315446]:NPBRandomStream[315408](?), arg x[315128] :
  (315127 call range(stridable = ?[260])), arg size[315136] :
  unknown sizeType[315133] =
  none[57], arg replace[315141] =
  1, arg prob[315147] :
  unknown probType[315144] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315154 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315408](?).choice[315165](arg _mt[315452]:_MT[238], arg this[315450]:NPBRandomStream[315408](?), arg x[315162] :
  _domain, arg size[315170] :
  unknown sizeType[315167] =
  none[57], arg replace[315175] =
  1, arg prob[315181] :
  unknown probType[315178] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315188 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315408](?).iterate[315199](arg _mt[315456]:_MT[238], arg this[315454]:NPBRandomStream[315408](?), arg D[315196] :
  _domain, arg resultType[315202]:_any[178](?) =
  real[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (315207 call _lock)
    { scopeless
      const start[315211] "const" NPBRandomStreamPrivate_count
      (315214 'end of statement')
    }
    (315229 call += NPBRandomStreamPrivate_count(315228 call(315220 call .(315217 call . D c"size") c"safeCast")(315226 call int[13] 64)))
    (315238 call NPBRandomStreamPrivate_skipToNth_noLock(315235 call - NPBRandomStreamPrivate_count 1))
    (315242 call _unlock)
    (315251 return(315250 call NPBRandomPrivate_iterate resultType D seed start))
  } function NPBRandomStream[315408](?).iterate[315261](arg _mt[315460]:_MT[238], arg this[315458]:NPBRandomStream[315408](?), arg D[315258] :
  _domain, arg resultType[315264]:_any[178](?) =
  real[16], param arg tag[315267]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    { scopeless
      const start[315277] "const" NPBRandomStreamPrivate_count
      (315280 'end of statement')
    }
    (315290 return(315289 call NPBRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (315274 call == tag(315271 call . iterKind c"leader"))
  } function NPBRandomStream[315408](?).writeThis[315299](arg _mt[315464]:_MT[238], arg this[315462]:NPBRandomStream[315408](?), arg f[315297]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides"
  {
    (315303 call <~> f "NPBRandomStream(eltType=")
    (315312 call <~> f(315310 call _cast string[26] eltType))
    (315317 call <~> f ", parSafe=")
    (315322 call <~> f parSafe)
    (315327 call <~> f ", seed=")
    (315332 call <~> f seed)
    (315337 call <~> f ")")
  } unknown _l[315348] "no doc"(315345 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) function NPBRandomStream[315408](?)._lock[315354](arg _mt[315468]:_MT[238], arg this[315466]:NPBRandomStream[315408](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(315364 call _cond_test parSafe)
    {
      { scopeless
        (315362 call(315358 call . _l c"lock"))
      }
    }
  } function NPBRandomStream[315408](?)._unlock[315374](arg _mt[315472]:_MT[238], arg this[315470]:NPBRandomStream[315408](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(315384 call _cond_test parSafe)
    {
      { scopeless
        (315382 call(315378 call . _l c"unlock"))
      }
    }
  } unknown NPBRandomStreamPrivate_cursor[315394] "no doc" seed real[16] unknown NPBRandomStreamPrivate_count[315403] "no doc" 1(315401 call int[13] 64)
  { scopeless
    const r23[315481] "const" "private"(315479 call ** 0.5 23)
    const t23[315488] "const" "private"(315486 call ** 2.0 23)
    const r46[315495] "const" "private"(315493 call ** 0.5 46)
    const t46[315502] "const" "private"(315500 call ** 2.0 46)
    const arand[315508] "const" "private" 1.2207e+09
    (315511 'end of statement')
  }
  function randlc[315518](inout arg x[315515] :
  real[16], arg a[315522] :
  real[16] =
  arand) : _unknown[51] "private"
  {
    { scopeless
      unknown t1[315530](315528 call * r23 a)
      (315533 'end of statement')
    }
    { scopeless
      const a1[315539] "const"(315538 call floor t1)
      const a2[315549] "const"(315547 call - a(315545 call * t23 a1))
      (315552 'end of statement')
    }
    (315558 call = t1(315556 call * r23 x))
    { scopeless
      const x1[315565] "const"(315564 call floor t1)
      const x2[315575] "const"(315573 call - x(315571 call * t23 x1))
      (315578 'end of statement')
    }
    (315590 call = t1(315588 call +(315582 call * a1 x2)(315586 call * a2 x1)))
    { scopeless
      const t2[315600] "const"(315599 call floor(315596 call * r23 t1))
      const z[315610] "const"(315608 call - t1(315606 call * t23 t2))
      const t3[315623] "const"(315621 call +(315615 call * t23 z)(315619 call * a2 x2))
      const t4[315633] "const"(315632 call floor(315629 call * r46 t3))
      const x3[315643] "const"(315641 call - t3(315639 call * t46 t4))
      (315646 'end of statement')
    }
    (315649 call = x x3)
    (315656 return(315654 call * r46 x3))
  }
  function randlc[315664](arg resultType[315662]:_any[178](?), inout arg x[315667] :
  real[16]) : _unknown[51] "private"
  {
    if(315715 call _cond_test(315672 call == resultType complex[140]))
    {
      { scopeless
        (315688 return(315686 call _cast complex[140](315683 call _build_tuple(315677 call randlc x)(315681 call randlc x))))
      }
    }
    {
      { scopeless
        if(315709 call _cond_test(315692 call == resultType imag[130]))
        {
          { scopeless
            (315701 return(315700 call _r2i(315698 call randlc x)))
          }
        }
        {
          { scopeless
            (315707 return(315706 call randlc x))
          }
        }
      }
    }
  }
  function randlc_skipto[315733](arg seed[315730] :
  (315729 call int[13] 64), in arg n[315736] :
  integral) : _unknown[51] "private"
  {
    { scopeless
      unknown cursor[315744](315742 call _cast real[16] seed)
      (315747 'end of statement')
    }
    (315751 call -= n 1)
    { scopeless
      unknown t[315755] arand
      (315758 'end of statement')
    }
    arand
    {
      unknown tmp[315821] "temp"
      (315845 'move' tmp[315821](315840 call _cond_test(315842 call != n 0)))
      WhileDo[315826]
      {
        {
          { scopeless
            const i[315769] "const"(315767 call / n 2)
            (315772 'end of statement')
          }
          if(315787 call _cond_test(315779 call !=(315776 call * 2 i) n))
          {
            { scopeless
              (315785 call randlc cursor t)
            }
          }
          if(315804 call _cond_test(315794 call == i 0))
          {
            { scopeless
              break nil[44]
            }
          }
          {
            { scopeless
              (315801 call = n i)
            }
          }
          (315814 call randlc t t)
          (315818 call = n i)
        }
        label _continueLabel[315824]
        (315835 'move' tmp[315821](315830 call _cond_test(315832 call != n 0)))
        tmp[315821]
      }
      label _breakLabel[315825]
    }
    (315849 return cursor)
  }
  { scopeless type
    real[16]
  }
  function outer[315858](arg ranges[315856]:_any[178](?), param arg dim[315862] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private"
  {
    if(316030 call _cond_test(315874 call ==(315868 call + dim 2)(315871 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[315886] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[315887] "expr temp" "temp"
        (315896 'move' _iterator[315887](315894 call _getIterator(315880 call ranges dim)))
        Defer
        {
          {
            (315913 call _freeIterator _iterator[315887])
          }
        }
        { scopeless type
          (315902 'move' _indexOfInterest[315886](315899 call iteratorIndex _iterator[315887]))
        }
        ForLoop[315888]
        {
          unknown i[315906] "index var" "insert auto destroy"
          (315908 'move' i[315906] _indexOfInterest[315886])
          { scopeless
            (315884 yield(315882 call _build_tuple i))
          }
          label _continueLabel[315891]
          _indexOfInterest[315886]
          _iterator[315887]
        }
        label _breakLabel[315892]
      }
    }
    {
      { scopeless
        if(316026 call _cond_test(315929 call <(315923 call + dim 2)(315926 call . ranges c"size")))
        {
          {
            unknown _indexOfInterest[315987] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[315988] "expr temp" "temp"
            (315997 'move' _iterator[315988](315995 call _getIterator(315935 call ranges dim)))
            Defer
            {
              {
                (316014 call _freeIterator _iterator[315988])
              }
            }
            { scopeless type
              (316003 'move' _indexOfInterest[315987](316000 call iteratorIndex _iterator[315988]))
            }
            ForLoop[315989]
            {
              unknown i[316007] "index var" "insert auto destroy"
              (316009 'move' i[316007] _indexOfInterest[315987])
              {
                unknown _indexOfInterest[315953] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[315954] "expr temp" "temp"
                (315963 'move' _iterator[315954](315961 call _getIterator(315944 call outer ranges(315942 call + dim 1))))
                Defer
                {
                  {
                    (315980 call _freeIterator _iterator[315954])
                  }
                }
                { scopeless type
                  (315969 'move' _indexOfInterest[315953](315966 call iteratorIndex _iterator[315954]))
                }
                ForLoop[315955]
                {
                  unknown j[315973] "index var" "insert auto destroy"
                  (315975 'move' j[315973] _indexOfInterest[315953])
                  { scopeless
                    (315951 yield(315949 call _build_tuple i(315947 'expand_tuple' j)))
                  }
                  label _continueLabel[315958]
                  _indexOfInterest[315953]
                  _iterator[315954]
                }
                label _breakLabel[315959]
              }
              label _continueLabel[315992]
              _indexOfInterest[315987]
              _iterator[315988]
            }
            label _breakLabel[315993]
          }
        }
        {
          (316023 yield 0)
        }
      }
    }
  }
  function NPBRandomPrivate_iterate[316042](arg resultType[316040]:_any[178](?), arg D[316045] :
  _domain, arg seed[316052] :
  (316051 call int[13] 64), arg start[316059] :
  (316058 call int[13] 64)) : _unknown[51] "iterator fn" "no doc"
  {
    { scopeless
      unknown cursor[316067](316066 call randlc_skipto seed start)
      (316070 'end of statement')
    }
    {
      unknown _indexOfInterest[316081] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316082] "expr temp" "temp"
      (316091 'move' _iterator[316082](316089 call _getIterator D))
      Defer
      {
        {
          (316107 call _freeIterator _iterator[316082])
        }
      }
      { scopeless type
        (316096 'move' _indexOfInterest[316081](316093 call iteratorIndex _iterator[316082]))
      }
      ForLoop[316083]
      {
        unknown i[316100] "index var" "insert auto destroy"
        (316102 'move' i[316100] _indexOfInterest[316081])
        { scopeless
          (316079 yield(316078 call randlc resultType cursor))
        }
        label _continueLabel[316086]
        _indexOfInterest[316081]
        _iterator[316082]
      }
      label _breakLabel[316087]
    }
  }
  function NPBRandomPrivate_iterate[316120](arg resultType[316118]:_any[178](?), arg D[316123] :
  _domain, arg seed[316130] :
  (316129 call int[13] 64), arg start[316137] :
  (316136 call int[13] 64), param arg tag[316141] :
  iterKind) : _unknown[51] "iterator fn" "no doc"
  {
    {
      unknown _indexOfInterest[316166] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316167] "expr temp" "temp"
      (316176 'move' _iterator[316167](316174 call _getIterator(316162 call(316153 call . D c"these")(tag =(316157 call . iterKind c"leader")))))
      Defer
      {
        {
          (316193 call _freeIterator _iterator[316167])
        }
      }
      { scopeless type
        (316182 'move' _indexOfInterest[316166](316179 call iteratorIndex _iterator[316167]))
      }
      ForLoop[316168]
      {
        unknown block[316186] "index var" "insert auto destroy"
        (316188 'move' block[316186] _indexOfInterest[316166])
        { scopeless
          (316164 yield block)
        }
        label _continueLabel[316171]
        _indexOfInterest[316166]
        _iterator[316167]
      }
      label _breakLabel[316172]
    }
  }
  where {
    (316149 call == tag(316146 call . iterKind c"leader"))
  }
  function NPBRandomPrivate_iterate[316208](arg resultType[316206]:_any[178](?), arg D[316211] :
  _domain, arg seed[316218] :
  (316217 call int[13] 64), arg start[316225] :
  (316224 call int[13] 64), param arg tag[316229] :
  iterKind, arg followThis[316232]:_any[178](?)) : _unknown[51] "iterator fn" "no doc"
  {
    (316242 'use' DSIUtil)
    { scopeless
      unknown multiplier[316254] "param"(316251 IfExpr (316247 call == resultType complex[140]) then
      { scopeless
        2
      } else
      { scopeless
        1
      } )
      (316257 'end of statement')
    }
    { scopeless
      const ZD[316262] "const"(316261 call computeZeroBasedDomain D)
      (316265 'end of statement')
    }
    { scopeless
      const innerRange[316276] "const"(316275 call followThis(316272 call -(316268 call . ZD c"rank") 1))
      (316279 'end of statement')
    }
    { scopeless
      unknown cursor[316281] real[16]
      (316284 'end of statement')
    }
    {
      unknown _indexOfInterest[316513] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316514] "expr temp" "temp"
      (316523 'move' _iterator[316514](316521 call _getIterator(316289 call outer followThis)))
      Defer
      {
        {
          (316540 call _freeIterator _iterator[316514])
        }
      }
      { scopeless type
        (316529 'move' _indexOfInterest[316513](316526 call iteratorIndex _iterator[316514]))
      }
      ForLoop[316515]
      {
        unknown outer[316533] "index var" "insert auto destroy"
        (316535 'move' outer[316533] _indexOfInterest[316513])
        {
          { scopeless
            unknown myStart[316291] start
            (316294 'end of statement')
          }
          if(316360 call _cond_test(316301 call >(316297 call . ZD c"rank") 1))
          {
            { scopeless
              (316331 call += myStart(316329 call * multiplier(316328 call(316320 call .(316319 call(316306 call . ZD c"indexOrder")(316316 call _build_tuple(316310 'expand_tuple' outer)(316312 call . innerRange c"low"))) c"safeCast")(316326 call int[13] 64))))
            }
          }
          {
            { scopeless
              (316357 call += myStart(316355 call * multiplier(316354 call(316346 call .(316345 call(316337 call . ZD c"indexOrder")(316341 call . innerRange c"low")) c"safeCast")(316352 call int[13] 64))))
            }
          }
          if(316509 call _cond_test(316370 call !(316367 call . innerRange c"stridable")))
          {
            (316378 call = cursor(316377 call randlc_skipto seed myStart))
            {
              unknown _indexOfInterest[316391] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316392] "expr temp" "temp"
              (316401 'move' _iterator[316392](316399 call _getIterator innerRange))
              Defer
              {
                {
                  (316417 call _freeIterator _iterator[316392])
                }
              }
              { scopeless type
                (316406 'move' _indexOfInterest[316391](316403 call iteratorIndex _iterator[316392]))
              }
              ForLoop[316393]
              {
                unknown i[316410] "index var" "insert auto destroy"
                (316412 'move' i[316410] _indexOfInterest[316391])
                { scopeless
                  (316389 yield(316388 call randlc resultType cursor))
                }
                label _continueLabel[316396]
                _indexOfInterest[316391]
                _iterator[316392]
              }
              label _breakLabel[316397]
            }
          }
          {
            (316438 call -= myStart(316437 call(316429 call .(316426 call . innerRange c"low") c"safeCast")(316435 call int[13] 64)))
            {
              unknown _indexOfInterest[316476] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316477] "expr temp" "temp"
              (316486 'move' _iterator[316477](316484 call _getIterator innerRange))
              Defer
              {
                {
                  (316502 call _freeIterator _iterator[316477])
                }
              }
              { scopeless type
                (316491 'move' _indexOfInterest[316476](316488 call iteratorIndex _iterator[316477]))
              }
              ForLoop[316478]
              {
                unknown i[316495] "index var" "insert auto destroy"
                (316497 'move' i[316495] _indexOfInterest[316476])
                {
                  (316465 call = cursor(316464 call randlc_skipto seed(316462 call + myStart(316460 call *(316458 call(316450 call . i c"safeCast")(316456 call int[13] 64)) multiplier))))
                  (316474 yield(316473 call randlc resultType cursor))
                }
                label _continueLabel[316481]
                _indexOfInterest[316476]
                _iterator[316477]
              }
              label _breakLabel[316482]
            }
          }
        }
        label _continueLabel[316518]
        _indexOfInterest[316513]
        _iterator[316514]
      }
      label _breakLabel[316519]
    }
  }
  where {
    (316239 call == tag(316236 call . iterKind c"follower"))
  }
}