AST dump for NPBRandom after pass readExternC.
Module use list: 

{
  (353070 'use' ChapelStandard)
  (314388 'use'(314385 call . super c"RandomSupport"))
  (314392 'use' ChapelLocks)
  type NPBRandomStream[315379](?) unknown eltType[314399] "type variable"(314398 call real[16] 64) const seed[314406] "const"(314405 call int[13] 64) unknown parSafe[314412] "param" 1 bool[10] function NPBRandomStream[315379](?).init[314425](arg _mt[315383]:_MT[238], arg this[315381]:NPBRandomStream[315379](?), arg eltType[314422]:_any[178](?) =
  (314421 call real[16] 64), arg seed[314435] :
  (314430 call int[13] 64) =
  (314432 call . SeedGenerator c"oddCurrentTime"), param arg parSafe[314441] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    (314446 'use' HaltWrappers)
    (314454 call =(314450 call . this c"eltType") eltType)
    { scopeless
      unknown one[314462] 1(314460 call uint[115] 64)
      (314465 'end of statement')
    }
    { scopeless
      unknown two_46[314474](314472 call << one 46)(314469 call uint[115] 64)
      (314477 'end of statement')
    }
    { scopeless
      unknown two_46_mask[314486](314484 call - two_46 1)(314481 call uint[115] 64)
      (314489 'end of statement')
    }
    { scopeless
      unknown useed[314497](314495 call _cast(314494 call uint[115] 64) seed)
      (314500 'end of statement')
    }
    { scopeless
      unknown mod[314505](314504 call uint[115] 64)
      (314508 'end of statement')
    }
    if(314542 call _cond_test(314514 call ==(314511 call % useed 2) 0))
    {
      { scopeless
        (314540 call(314519 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer")
      }
    }
    (314552 call = mod(314550 call & useed two_46_mask))
    (314566 call =(314556 call . this c"seed")(314564 call _cast(314563 call int[13] 64) mod))
    (314574 call =(314570 call . this c"parSafe") parSafe)
    (314582 call(314578 call . this c"complete"))
    if(314642 call _cond_test(314616 call ||(314601 call ||(314592 call ==(314589 call %(314585 call . this c"seed") 2) 0)(314599 call <(314595 call . this c"seed") 1))(314614 call >(314604 call . this c"seed")(314612 call _cast(314611 call int[13] 64) two_46))))
    {
      { scopeless
        (314640 call(314619 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer between 0 and 2**46")
      }
    }
    (314649 call = NPBRandomStreamPrivate_cursor seed)
    (314654 call = NPBRandomStreamPrivate_count 1)
    if(314696 call _cond_test(314671 call ||(314665 call ||(314659 call == eltType real[16])(314663 call == eltType imag[130]))(314669 call == eltType complex[140])))
    {
    }
    {
      (314693 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }
  } function NPBRandomStream[315379](?).NPBRandomStreamPrivate_getNext_noLock[314704](arg _mt[315387]:_MT[238], arg this[315385]:NPBRandomStream[315379](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(314722 call _cond_test(314708 call == eltType complex[140]))
    {
      (314712 call += NPBRandomStreamPrivate_count 2)
    }
    {
      (314718 call += NPBRandomStreamPrivate_count 1)
    }
    (314732 return(314731 call randlc eltType NPBRandomStreamPrivate_cursor))
  } function NPBRandomStream[315379](?).NPBRandomStreamPrivate_skipToNth_noLock[314742](arg _mt[315391]:_MT[238], arg this[315389]:NPBRandomStream[315379](?), in arg n[314739] :
  integral) : _unknown[51] "method" "primary method" "no doc"
  {
    (314746 call += n 1)
    if(314765 call _cond_test(314752 call == eltType complex[140]))
    {
      { scopeless
        (314762 call = n(314760 call -(314757 call * n 2) 1))
      }
    }
    (314772 call = NPBRandomStreamPrivate_count n)
    (314781 call = NPBRandomStreamPrivate_cursor(314780 call randlc_skipto seed n))
  } function NPBRandomStream[315379](?).getNext[314788](arg _mt[315395]:_MT[238], arg this[315393]:NPBRandomStream[315379](?)) : _unknown[51] "method" "primary method"
  {
    (314793 call _lock)
    { scopeless
      const result[314799] "const"(314798 call NPBRandomStreamPrivate_getNext_noLock)
      (314802 'end of statement')
    }
    (314805 call _unlock)
    (314808 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[315379](?).skipToNth[314819](arg _mt[315399]:_MT[238], arg this[315397]:NPBRandomStream[315379](?), arg n[314816] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(314856 call _cond_test(314823 call < n 0))
    {
      { scopeless
        (314854 'throw'(314827 'new'(_chpl_manager = _owned[30](?))(314853 call IllegalArgumentError(314850 call + "NPBRandomStream.skipToNth(n) called with negative 'n' value "(314848 call _cast string[26] n)))))
      }
    }
    (314864 call _lock)
    (314869 call NPBRandomStreamPrivate_skipToNth_noLock n)
    (314873 call _unlock)
  } function NPBRandomStream[315379](?).getNth[314883](arg _mt[315403]:_MT[238], arg this[315401]:NPBRandomStream[315379](?), arg n[314880] :
  integral) : _unknown[51] throws "method" "primary method"
  {
    if(314921 call _cond_test(314888 call < n 0))
    {
      { scopeless
        (314919 'throw'(314892 'new'(_chpl_manager = _owned[30](?))(314918 call IllegalArgumentError(314915 call + "NPBRandomStream.getNth(n) called with negative 'n' value "(314913 call _cast string[26] n)))))
      }
    }
    (314929 call _lock)
    (314934 call NPBRandomStreamPrivate_skipToNth_noLock n)
    { scopeless
      const result[314939] "const"(314938 call NPBRandomStreamPrivate_getNext_noLock)
      (314942 'end of statement')
    }
    (314945 call _unlock)
    (314948 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[315379](?).fillRandom[314962](arg _mt[315407]:_MT[238], arg this[315405]:NPBRandomStream[315379](?), arg arr[314959] :
  (314956 call chpl__buildArrayRuntimeType nil[44] eltType)) : _unknown[51] "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown x[314989] "index var" "insert auto destroy"
        
        unknown r[314991] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (314981 call iterate(314973 call . arr c"_dom")(314978 call . arr c"eltType"))
      shadow variables:
      other variables
        forall body
      {
        (314985 call = x r)
      }
    }
  } function NPBRandomStream[315379](?).fillRandom[315005](arg _mt[315411]:_MT[238], arg this[315409]:NPBRandomStream[315379](?), arg arr[315002] :
  (314999 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc"
  {
    (315035 call compilerError "NPBRandomStream(eltType="(315028 call _cast string[26] eltType) ") can only be used to fill arrays of "(315033 call _cast string[26] eltType))
  } function NPBRandomStream[315379](?).choice[315048](arg _mt[315415]:_MT[238], arg this[315413]:NPBRandomStream[315379](?), arg x[315045] :
  (315042 call chpl__buildArrayRuntimeType nil[44]), arg size[315053] :
  unknown sizeType[315050] =
  none[57], arg replace[315058] =
  1, arg prob[315064] :
  unknown probType[315061] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315087 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315379](?).choice[315102](arg _mt[315419]:_MT[238], arg this[315417]:NPBRandomStream[315379](?), arg x[315099] :
  (315098 call range(stridable = ?[260])), arg size[315107] :
  unknown sizeType[315104] =
  none[57], arg replace[315112] =
  1, arg prob[315118] :
  unknown probType[315115] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315125 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315379](?).choice[315136](arg _mt[315423]:_MT[238], arg this[315421]:NPBRandomStream[315379](?), arg x[315133] :
  _domain, arg size[315141] :
  unknown sizeType[315138] =
  none[57], arg replace[315146] =
  1, arg prob[315152] :
  unknown probType[315149] =
  none[57]) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (315159 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[315379](?).iterate[315170](arg _mt[315427]:_MT[238], arg this[315425]:NPBRandomStream[315379](?), arg D[315167] :
  _domain, arg resultType[315173]:_any[178](?) =
  real[16]) : _unknown[51] "method" "primary method" "fn returns iterator"
  {
    (315178 call _lock)
    { scopeless
      const start[315182] "const" NPBRandomStreamPrivate_count
      (315185 'end of statement')
    }
    (315200 call += NPBRandomStreamPrivate_count(315199 call(315191 call .(315188 call . D c"size") c"safeCast")(315197 call int[13] 64)))
    (315209 call NPBRandomStreamPrivate_skipToNth_noLock(315206 call - NPBRandomStreamPrivate_count 1))
    (315213 call _unlock)
    (315222 return(315221 call NPBRandomPrivate_iterate resultType D seed start))
  } function NPBRandomStream[315379](?).iterate[315232](arg _mt[315431]:_MT[238], arg this[315429]:NPBRandomStream[315379](?), arg D[315229] :
  _domain, arg resultType[315235]:_any[178](?) =
  real[16], param arg tag[315238]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  {
    { scopeless
      const start[315248] "const" NPBRandomStreamPrivate_count
      (315251 'end of statement')
    }
    (315261 return(315260 call NPBRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (315245 call == tag(315242 call . iterKind c"leader"))
  } function NPBRandomStream[315379](?).writeThis[315270](arg _mt[315435]:_MT[238], arg this[315433]:NPBRandomStream[315379](?), arg f[315268]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides"
  {
    (315274 call <~> f "NPBRandomStream(eltType=")
    (315283 call <~> f(315281 call _cast string[26] eltType))
    (315288 call <~> f ", parSafe=")
    (315293 call <~> f parSafe)
    (315298 call <~> f ", seed=")
    (315303 call <~> f seed)
    (315308 call <~> f ")")
  } unknown _l[315319] "no doc"(315316 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) function NPBRandomStream[315379](?)._lock[315325](arg _mt[315439]:_MT[238], arg this[315437]:NPBRandomStream[315379](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(315335 call _cond_test parSafe)
    {
      { scopeless
        (315333 call(315329 call . _l c"lock"))
      }
    }
  } function NPBRandomStream[315379](?)._unlock[315345](arg _mt[315443]:_MT[238], arg this[315441]:NPBRandomStream[315379](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(315355 call _cond_test parSafe)
    {
      { scopeless
        (315353 call(315349 call . _l c"unlock"))
      }
    }
  } unknown NPBRandomStreamPrivate_cursor[315365] "no doc" seed real[16] unknown NPBRandomStreamPrivate_count[315374] "no doc" 1(315372 call int[13] 64)
  { scopeless
    const r23[315452] "const" "private"(315450 call ** 0.5 23)
    const t23[315459] "const" "private"(315457 call ** 2.0 23)
    const r46[315466] "const" "private"(315464 call ** 0.5 46)
    const t46[315473] "const" "private"(315471 call ** 2.0 46)
    const arand[315479] "const" "private" 1.2207e+09
    (315482 'end of statement')
  }
  function randlc[315489](inout arg x[315486] :
  real[16], arg a[315493] :
  real[16] =
  arand) : _unknown[51] "private"
  {
    { scopeless
      unknown t1[315501](315499 call * r23 a)
      (315504 'end of statement')
    }
    { scopeless
      const a1[315510] "const"(315509 call floor t1)
      const a2[315520] "const"(315518 call - a(315516 call * t23 a1))
      (315523 'end of statement')
    }
    (315529 call = t1(315527 call * r23 x))
    { scopeless
      const x1[315536] "const"(315535 call floor t1)
      const x2[315546] "const"(315544 call - x(315542 call * t23 x1))
      (315549 'end of statement')
    }
    (315561 call = t1(315559 call +(315553 call * a1 x2)(315557 call * a2 x1)))
    { scopeless
      const t2[315571] "const"(315570 call floor(315567 call * r23 t1))
      const z[315581] "const"(315579 call - t1(315577 call * t23 t2))
      const t3[315594] "const"(315592 call +(315586 call * t23 z)(315590 call * a2 x2))
      const t4[315604] "const"(315603 call floor(315600 call * r46 t3))
      const x3[315614] "const"(315612 call - t3(315610 call * t46 t4))
      (315617 'end of statement')
    }
    (315620 call = x x3)
    (315627 return(315625 call * r46 x3))
  }
  function randlc[315635](arg resultType[315633]:_any[178](?), inout arg x[315638] :
  real[16]) : _unknown[51] "private"
  {
    if(315686 call _cond_test(315643 call == resultType complex[140]))
    {
      { scopeless
        (315659 return(315657 call _cast complex[140](315654 call _build_tuple(315648 call randlc x)(315652 call randlc x))))
      }
    }
    {
      { scopeless
        if(315680 call _cond_test(315663 call == resultType imag[130]))
        {
          { scopeless
            (315672 return(315671 call _r2i(315669 call randlc x)))
          }
        }
        {
          { scopeless
            (315678 return(315677 call randlc x))
          }
        }
      }
    }
  }
  function randlc_skipto[315704](arg seed[315701] :
  (315700 call int[13] 64), in arg n[315707] :
  integral) : _unknown[51] "private"
  {
    { scopeless
      unknown cursor[315715](315713 call _cast real[16] seed)
      (315718 'end of statement')
    }
    (315722 call -= n 1)
    { scopeless
      unknown t[315726] arand
      (315729 'end of statement')
    }
    arand
    {
      unknown tmp[315792] "temp"
      (315816 'move' tmp[315792](315811 call _cond_test(315813 call != n 0)))
      WhileDo[315797]
      {
        {
          { scopeless
            const i[315740] "const"(315738 call / n 2)
            (315743 'end of statement')
          }
          if(315758 call _cond_test(315750 call !=(315747 call * 2 i) n))
          {
            { scopeless
              (315756 call randlc cursor t)
            }
          }
          if(315775 call _cond_test(315765 call == i 0))
          {
            { scopeless
              break nil[44]
            }
          }
          {
            { scopeless
              (315772 call = n i)
            }
          }
          (315785 call randlc t t)
          (315789 call = n i)
        }
        label _continueLabel[315795]
        (315806 'move' tmp[315792](315801 call _cond_test(315803 call != n 0)))
        tmp[315792]
      }
      label _breakLabel[315796]
    }
    (315820 return cursor)
  }
  { scopeless type
    real[16]
  }
  function outer[315829](arg ranges[315827]:_any[178](?), param arg dim[315833] :
  int[13] =
  0) : _unknown[51] "iterator fn" "private"
  {
    if(316001 call _cond_test(315845 call ==(315839 call + dim 2)(315842 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[315857] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[315858] "expr temp" "temp"
        (315867 'move' _iterator[315858](315865 call _getIterator(315851 call ranges dim)))
        Defer
        {
          {
            (315884 call _freeIterator _iterator[315858])
          }
        }
        { scopeless type
          (315873 'move' _indexOfInterest[315857](315870 call iteratorIndex _iterator[315858]))
        }
        ForLoop[315859]
        {
          unknown i[315877] "index var" "insert auto destroy"
          (315879 'move' i[315877] _indexOfInterest[315857])
          { scopeless
            (315855 yield(315853 call _build_tuple i))
          }
          label _continueLabel[315862]
          _indexOfInterest[315857]
          _iterator[315858]
        }
        label _breakLabel[315863]
      }
    }
    {
      { scopeless
        if(315997 call _cond_test(315900 call <(315894 call + dim 2)(315897 call . ranges c"size")))
        {
          {
            unknown _indexOfInterest[315958] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[315959] "expr temp" "temp"
            (315968 'move' _iterator[315959](315966 call _getIterator(315906 call ranges dim)))
            Defer
            {
              {
                (315985 call _freeIterator _iterator[315959])
              }
            }
            { scopeless type
              (315974 'move' _indexOfInterest[315958](315971 call iteratorIndex _iterator[315959]))
            }
            ForLoop[315960]
            {
              unknown i[315978] "index var" "insert auto destroy"
              (315980 'move' i[315978] _indexOfInterest[315958])
              {
                unknown _indexOfInterest[315924] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[315925] "expr temp" "temp"
                (315934 'move' _iterator[315925](315932 call _getIterator(315915 call outer ranges(315913 call + dim 1))))
                Defer
                {
                  {
                    (315951 call _freeIterator _iterator[315925])
                  }
                }
                { scopeless type
                  (315940 'move' _indexOfInterest[315924](315937 call iteratorIndex _iterator[315925]))
                }
                ForLoop[315926]
                {
                  unknown j[315944] "index var" "insert auto destroy"
                  (315946 'move' j[315944] _indexOfInterest[315924])
                  { scopeless
                    (315922 yield(315920 call _build_tuple i(315918 'expand_tuple' j)))
                  }
                  label _continueLabel[315929]
                  _indexOfInterest[315924]
                  _iterator[315925]
                }
                label _breakLabel[315930]
              }
              label _continueLabel[315963]
              _indexOfInterest[315958]
              _iterator[315959]
            }
            label _breakLabel[315964]
          }
        }
        {
          (315994 yield 0)
        }
      }
    }
  }
  function NPBRandomPrivate_iterate[316013](arg resultType[316011]:_any[178](?), arg D[316016] :
  _domain, arg seed[316023] :
  (316022 call int[13] 64), arg start[316030] :
  (316029 call int[13] 64)) : _unknown[51] "iterator fn" "no doc"
  {
    { scopeless
      unknown cursor[316038](316037 call randlc_skipto seed start)
      (316041 'end of statement')
    }
    {
      unknown _indexOfInterest[316052] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316053] "expr temp" "temp"
      (316062 'move' _iterator[316053](316060 call _getIterator D))
      Defer
      {
        {
          (316078 call _freeIterator _iterator[316053])
        }
      }
      { scopeless type
        (316067 'move' _indexOfInterest[316052](316064 call iteratorIndex _iterator[316053]))
      }
      ForLoop[316054]
      {
        unknown i[316071] "index var" "insert auto destroy"
        (316073 'move' i[316071] _indexOfInterest[316052])
        { scopeless
          (316050 yield(316049 call randlc resultType cursor))
        }
        label _continueLabel[316057]
        _indexOfInterest[316052]
        _iterator[316053]
      }
      label _breakLabel[316058]
    }
  }
  function NPBRandomPrivate_iterate[316091](arg resultType[316089]:_any[178](?), arg D[316094] :
  _domain, arg seed[316101] :
  (316100 call int[13] 64), arg start[316108] :
  (316107 call int[13] 64), param arg tag[316112] :
  iterKind) : _unknown[51] "iterator fn" "no doc"
  {
    {
      unknown _indexOfInterest[316137] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316138] "expr temp" "temp"
      (316147 'move' _iterator[316138](316145 call _getIterator(316133 call(316124 call . D c"these")(tag =(316128 call . iterKind c"leader")))))
      Defer
      {
        {
          (316164 call _freeIterator _iterator[316138])
        }
      }
      { scopeless type
        (316153 'move' _indexOfInterest[316137](316150 call iteratorIndex _iterator[316138]))
      }
      ForLoop[316139]
      {
        unknown block[316157] "index var" "insert auto destroy"
        (316159 'move' block[316157] _indexOfInterest[316137])
        { scopeless
          (316135 yield block)
        }
        label _continueLabel[316142]
        _indexOfInterest[316137]
        _iterator[316138]
      }
      label _breakLabel[316143]
    }
  }
  where {
    (316120 call == tag(316117 call . iterKind c"leader"))
  }
  function NPBRandomPrivate_iterate[316179](arg resultType[316177]:_any[178](?), arg D[316182] :
  _domain, arg seed[316189] :
  (316188 call int[13] 64), arg start[316196] :
  (316195 call int[13] 64), param arg tag[316200] :
  iterKind, arg followThis[316203]:_any[178](?)) : _unknown[51] "iterator fn" "no doc"
  {
    (316213 'use' DSIUtil)
    { scopeless
      unknown multiplier[316225] "param"(316222 IfExpr (316218 call == resultType complex[140]) then
      { scopeless
        2
      } else
      { scopeless
        1
      } )
      (316228 'end of statement')
    }
    { scopeless
      const ZD[316233] "const"(316232 call computeZeroBasedDomain D)
      (316236 'end of statement')
    }
    { scopeless
      const innerRange[316247] "const"(316246 call followThis(316243 call -(316239 call . ZD c"rank") 1))
      (316250 'end of statement')
    }
    { scopeless
      unknown cursor[316252] real[16]
      (316255 'end of statement')
    }
    {
      unknown _indexOfInterest[316484] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[316485] "expr temp" "temp"
      (316494 'move' _iterator[316485](316492 call _getIterator(316260 call outer followThis)))
      Defer
      {
        {
          (316511 call _freeIterator _iterator[316485])
        }
      }
      { scopeless type
        (316500 'move' _indexOfInterest[316484](316497 call iteratorIndex _iterator[316485]))
      }
      ForLoop[316486]
      {
        unknown outer[316504] "index var" "insert auto destroy"
        (316506 'move' outer[316504] _indexOfInterest[316484])
        {
          { scopeless
            unknown myStart[316262] start
            (316265 'end of statement')
          }
          if(316331 call _cond_test(316272 call >(316268 call . ZD c"rank") 1))
          {
            { scopeless
              (316302 call += myStart(316300 call * multiplier(316299 call(316291 call .(316290 call(316277 call . ZD c"indexOrder")(316287 call _build_tuple(316281 'expand_tuple' outer)(316283 call . innerRange c"low"))) c"safeCast")(316297 call int[13] 64))))
            }
          }
          {
            { scopeless
              (316328 call += myStart(316326 call * multiplier(316325 call(316317 call .(316316 call(316308 call . ZD c"indexOrder")(316312 call . innerRange c"low")) c"safeCast")(316323 call int[13] 64))))
            }
          }
          if(316480 call _cond_test(316341 call !(316338 call . innerRange c"stridable")))
          {
            (316349 call = cursor(316348 call randlc_skipto seed myStart))
            {
              unknown _indexOfInterest[316362] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316363] "expr temp" "temp"
              (316372 'move' _iterator[316363](316370 call _getIterator innerRange))
              Defer
              {
                {
                  (316388 call _freeIterator _iterator[316363])
                }
              }
              { scopeless type
                (316377 'move' _indexOfInterest[316362](316374 call iteratorIndex _iterator[316363]))
              }
              ForLoop[316364]
              {
                unknown i[316381] "index var" "insert auto destroy"
                (316383 'move' i[316381] _indexOfInterest[316362])
                { scopeless
                  (316360 yield(316359 call randlc resultType cursor))
                }
                label _continueLabel[316367]
                _indexOfInterest[316362]
                _iterator[316363]
              }
              label _breakLabel[316368]
            }
          }
          {
            (316409 call -= myStart(316408 call(316400 call .(316397 call . innerRange c"low") c"safeCast")(316406 call int[13] 64)))
            {
              unknown _indexOfInterest[316447] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[316448] "expr temp" "temp"
              (316457 'move' _iterator[316448](316455 call _getIterator innerRange))
              Defer
              {
                {
                  (316473 call _freeIterator _iterator[316448])
                }
              }
              { scopeless type
                (316462 'move' _indexOfInterest[316447](316459 call iteratorIndex _iterator[316448]))
              }
              ForLoop[316449]
              {
                unknown i[316466] "index var" "insert auto destroy"
                (316468 'move' i[316466] _indexOfInterest[316447])
                {
                  (316436 call = cursor(316435 call randlc_skipto seed(316433 call + myStart(316431 call *(316429 call(316421 call . i c"safeCast")(316427 call int[13] 64)) multiplier))))
                  (316445 yield(316444 call randlc resultType cursor))
                }
                label _continueLabel[316452]
                _indexOfInterest[316447]
                _iterator[316448]
              }
              label _breakLabel[316453]
            }
          }
        }
        label _continueLabel[316489]
        _indexOfInterest[316484]
        _iterator[316485]
      }
      label _breakLabel[316490]
    }
  }
  where {
    (316210 call == tag(316207 call . iterKind c"follower"))
  }
}