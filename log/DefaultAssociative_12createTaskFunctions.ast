AST dump for DefaultAssociative after pass createTaskFunctions.
Module use list: DSIUtil ChapelDistribution ChapelRange SysBasic ChapelArray ChapelBase ChapelLocks IO ChapelHashing ChapelHashtable SysError Sort 

{
  function chpl__init_DefaultAssociative[416037]() : void[4] "insert line file info" "module init"
  {
    (543995 'init var' debugDefaultAssoc[156309] 0)
    (156312 'end of statement')
    (543997 'init var' debugAssocDataPar[156314] 0)
    (156317 'end of statement')
    (521390 return _void[55])
  }
  unknown debugDefaultAssoc[156309] "config" "param"
  unknown debugAssocDataPar[156314] "config" "param"
  function DefaultAssociativeDomRehashHelper[156516](?).startRehash[156333](arg _mt[156520]:_MT[238], arg this[156518]:DefaultAssociativeDomRehashHelper[156516](?), arg newSize[156330]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156351] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156352] "expr temp" "temp"
      unknown call_tmp[672884] "expr temp" "maybe param" "maybe type" "temp"
      (672887 'move' call_tmp[672884](360835 call dom _mt[243] this[156518]))
      unknown call_tmp[672891] "expr temp" "maybe param" "maybe type" "temp"
      (672894 'move' call_tmp[672891](156337 call _arrs _mt[243] call_tmp[672884]))
      (156361 'move' _iterator[156352](156359 call _getIterator call_tmp[672891]))
      Defer
      {
        {
          (156378 call _freeIterator _iterator[156352])
        }
      }
      { scopeless type
        (156367 'move' _indexOfInterest[156351](156364 call iteratorIndex _iterator[156352]))
      }
      ForLoop[156353]
      {
        unknown arr[156371] "index var" "insert auto destroy"
        (482114 'end of statement')
        (156373 'move' arr[156371] _indexOfInterest[156351])
        (482115 'end of statement' arr[156371])
        {
          (156348 call(156343 call (partial) _startRehash _mt[243] arr[156371]) newSize[156330])
          (482117 'end of statement' arr[156371])
        }
        label _continueLabel[156356]
        _indexOfInterest[156351]
        _iterator[156352]
      }
      label _breakLabel[156357]
    }
    (520908 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).moveElementDuringRehash[156394](arg _mt[156524]:_MT[238], arg this[156522]:DefaultAssociativeDomRehashHelper[156516](?), arg oldSlot[156391]:int(64)[13], arg newSlot[156397]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156417] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156418] "expr temp" "temp"
      unknown call_tmp[672900] "expr temp" "maybe param" "maybe type" "temp"
      (672903 'move' call_tmp[672900](360841 call dom _mt[243] this[156522]))
      unknown call_tmp[672907] "expr temp" "maybe param" "maybe type" "temp"
      (672910 'move' call_tmp[672907](156402 call _arrs _mt[243] call_tmp[672900]))
      (156427 'move' _iterator[156418](156425 call _getIterator call_tmp[672907]))
      Defer
      {
        {
          (156444 call _freeIterator _iterator[156418])
        }
      }
      { scopeless type
        (156433 'move' _indexOfInterest[156417](156430 call iteratorIndex _iterator[156418]))
      }
      ForLoop[156419]
      {
        unknown arr[156437] "index var" "insert auto destroy"
        (482120 'end of statement')
        (156439 'move' arr[156437] _indexOfInterest[156417])
        (482121 'end of statement' arr[156437])
        {
          (156414 call(156408 call (partial) _moveElementDuringRehash _mt[243] arr[156437]) oldSlot[156391] newSlot[156397])
          (482123 'end of statement' arr[156437])
        }
        label _continueLabel[156422]
        _indexOfInterest[156417]
        _iterator[156418]
      }
      label _breakLabel[156423]
    }
    (520910 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).finishRehash[156460](arg _mt[156528]:_MT[238], arg this[156526]:DefaultAssociativeDomRehashHelper[156516](?), arg oldSize[156457]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156478] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156479] "expr temp" "temp"
      unknown call_tmp[672916] "expr temp" "maybe param" "maybe type" "temp"
      (672919 'move' call_tmp[672916](360847 call dom _mt[243] this[156526]))
      unknown call_tmp[672923] "expr temp" "maybe param" "maybe type" "temp"
      (672926 'move' call_tmp[672923](156464 call _arrs _mt[243] call_tmp[672916]))
      (156488 'move' _iterator[156479](156486 call _getIterator call_tmp[672923]))
      Defer
      {
        {
          (156505 call _freeIterator _iterator[156479])
        }
      }
      { scopeless type
        (156494 'move' _indexOfInterest[156478](156491 call iteratorIndex _iterator[156479]))
      }
      ForLoop[156480]
      {
        unknown arr[156498] "index var" "insert auto destroy"
        (482126 'end of statement')
        (156500 'move' arr[156498] _indexOfInterest[156478])
        (482127 'end of statement' arr[156498])
        {
          (156475 call(156470 call (partial) _finishRehash _mt[243] arr[156498]) oldSize[156457])
          (482129 'end of statement' arr[156498])
        }
        label _continueLabel[156483]
        _indexOfInterest[156478]
        _iterator[156479]
      }
      label _breakLabel[156484]
    }
    (520912 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).super[810216](arg _mt[810218]:_MT[238], arg this[810220]:DefaultAssociativeDomRehashHelper[156516](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810230] "RVV" "temp"
    unknown call_tmp[810237] "expr temp" "maybe param" "maybe type" "temp"
    (810240 'move' call_tmp[810237](810224 '.v' this[810220] c"super"))
    (810235 'move' ret[810230](810234 'deref' call_tmp[810237]))
    (810232 return ret[810230])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).dom[810242](arg _mt[810244]:_MT[238], arg this[810246]:DefaultAssociativeDomRehashHelper[156516](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810256] "RVV" "temp"
    unknown call_tmp[810263] "expr temp" "maybe param" "maybe type" "temp"
    (810266 'move' call_tmp[810263](810250 '.' this[810246] c"dom"))
    (810261 'move' ret[810256](810260 'addr of' call_tmp[810263]))
    (810258 return ret[810256])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).init[810268](arg _mt[810270]:_MT[238], arg this[810271]:DefaultAssociativeDomRehashHelper[156516](?), in arg dom[810346]:unmanaged DefaultAssociativeDom[415509](?) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[810361] "temporary of super field" "temp"
    (810363 'move' super_tmp[810361](810360 '.v' this[810271] c"super"))
    (810281 call(810279 call (partial) init _mt[243] super_tmp[810361]))
    (810387 'end of statement')
    unknown tmp[810366] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[810390] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[810402] "expr temp" "maybe param" "maybe type" "temp"
      (810405 'move' call_tmp[810402](810368 '.v' this[810271] c"super"))
      (810394 'move' call_type_tmp[810390](810371 'typeof' call_tmp[810402]))
    }
    (810372 'move' tmp[810366] call_type_tmp[810390])
    unknown call_tmp[810407] "maybe param" "maybe type" "temp"
    (810410 'move' call_tmp[810407](810377 'cast' tmp[810366] this[810271]))
    unknown chpl__thisAsParent[810374] "dead at end of block" "insert auto destroy" "temp"
    (810398 'init var' chpl__thisAsParent[810374] call_tmp[810407] tmp[810366])
    (810380 'setcid' chpl__thisAsParent[810374])
    (810382 'init field' this[810271] c"dom" dom[810346])
    (810388 'end of statement')
    (810385 'setcid' this[810271])
    (810396 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).deinit[810412](arg _mt[810414]:_MT[238], arg this[810416]:DefaultAssociativeDomRehashHelper[156516](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (810424 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).writeThis[810426](arg _mt[810430]:_MT[238], arg this[810428]:DefaultAssociativeDomRehashHelper[156516](?), arg f[810429]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810435 call writeThisDefaultImpl f[810429] this[810428])
    (810440 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156516](?).readThis[810442](arg _mt[810446]:_MT[238], arg this[810444]:DefaultAssociativeDomRehashHelper[156516](?), arg f[810445]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810450 call readThisDefaultImpl f[810445] this[810444])
    (810456 return _void[55])
  }
  type DefaultAssociativeDomRehashHelper[156516](?) val super[355726]:chpl__rehashHelpers[202396] "super class" val dom[156323]:unmanaged DefaultAssociativeDom[415509](?) unmanaged DefaultAssociativeDom[415509](?)
  type DefaultAssociativeDomRehashHelper[386733](?)
  function DefaultAssociativeDom[158900](?).lockTable[156577](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672932] "expr temp" "maybe param" "maybe type" "temp"
    (672935 'move' call_tmp[672932](386716 call parSafe _mt[243] this[158902]))
    unknown call_tmp[672937] "expr temp" "maybe param" "maybe type" "temp"
    (672940 'move' call_tmp[672937](156587 call _cond_test call_tmp[672932]))
    if call_tmp[672937]
    {
      unknown call_tmp[672944] "expr temp" "maybe param" "maybe type" "temp"
      (672947 'move' call_tmp[672944](360855 call tableLock _mt[243] this[158902]))
      (156585 call(156581 call (partial) lock _mt[243] call_tmp[672944]))
    }
    (520914 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).unlockTable[156597](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672953] "expr temp" "maybe param" "maybe type" "temp"
    (672956 'move' call_tmp[672953](386721 call parSafe _mt[243] this[158906]))
    unknown call_tmp[672958] "expr temp" "maybe param" "maybe type" "temp"
    (672961 'move' call_tmp[672958](156607 call _cond_test call_tmp[672953]))
    if call_tmp[672958]
    {
      unknown call_tmp[672965] "expr temp" "maybe param" "maybe type" "temp"
      (672968 'move' call_tmp[672965](360860 call tableLock _mt[243] this[158906]))
      (156605 call(156601 call (partial) unlock _mt[243] call_tmp[672965]))
    }
    (520916 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).linksDistribution[156617](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158900](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520920] "RVV" "param" "temp"
    (520925 'move' ret[520920](520924 'deref' 0))
    (520922 return ret[520920])
  }
  function DefaultAssociativeDom[158900](?).dsiLinksDistribution[156627](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520929] "RVV" "temp"
    (520934 'move' ret[520929](520933 'deref' 0))
    (520931 return ret[520929])
  }
  function DefaultAssociativeDom[158900](?).init[156639](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158900](?), arg idxType[156637]:_any[178](?), param arg parSafe[156642]:bool[10], arg dist[156647]:unmanaged DefaultDist[415482]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462075] "temporary of super field" "temp"
    (462083 'move' super_tmp[462075](462076 '.v' this[158918] c"super"))
    (462079 call init _mt[243] super_tmp[462075])
    (482135 'end of statement')
    unknown tmp[461991] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492392] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[672972] "expr temp" "maybe param" "maybe type" "temp"
      (672975 'move' call_tmp[672972](461993 '.v' this[158918] c"super"))
      (492396 'move' call_type_tmp[492392](461996 'typeof' call_tmp[672972]))
    }
    (461997 'move' tmp[461991] call_type_tmp[492392])
    unknown call_tmp[672977] "maybe param" "maybe type" "temp"
    (672980 'move' call_tmp[672977](462002 'cast' tmp[461991] this[158918]))
    unknown chpl__thisAsParent[461999] "dead at end of block" "insert auto destroy" "temp"
    (543999 'init var' chpl__thisAsParent[461999] call_tmp[672977] tmp[461991])
    (462005 'setcid' chpl__thisAsParent[461999])
    (482136 'end of statement')
    unknown call_tmp[672982] "expr temp" "maybe param" "maybe type" "temp"
    (672985 'move' call_tmp[672982](156653 call chpl__validDefaultAssocDomIdxType idxType[156637]))
    unknown call_tmp[672987] "expr temp" "maybe param" "maybe type" "temp"
    (672990 'move' call_tmp[672987](156654 call ! call_tmp[672982]))
    unknown call_tmp[672992] "expr temp" "maybe param" "maybe type" "temp"
    (672995 'move' call_tmp[672992](156699 call _cond_test call_tmp[672987]))
    if call_tmp[672992]
    {
      unknown call_tmp[672997] "expr temp" "maybe param" "maybe type" "temp"
      (673000 'move' call_tmp[672997](156677 call _cast string[26] idxType[156637]))
      (156697 call compilerError "Default Associative domains with idxType=" call_tmp[672997] " are not allowed" 2)
    }
    unknown tmp[462007] "temp" "type variable"
    (462009 'move' tmp[462007] idxType[156637])
    (462011 'init field' this[158918] c"idxType" tmp[462007])
    unknown call_tmp[673002] "expr temp" "maybe param" "maybe type" "temp"
    (673005 'move' call_tmp[673002](462016 call _cast bool[10] parSafe[156642]))
    (462018 'init field' this[158918] c"parSafe" call_tmp[673002])
    (482138 'end of statement')
    unknown tmp[462021] "temp"
    (462024 'init var' tmp[462021] dist[156647] unmanaged DefaultDist[415482])
    (462026 'init field' this[158918] c"dist" tmp[462021])
    (482139 'end of statement')
    unknown tmp[462030] "temp"
    unknown call_tmp[673007] "expr temp" "maybe param" "maybe type" "temp"
    (673010 'move' call_tmp[673007](462033 call chpl__processorAtomicType int(64)[13]))
    (462035 'default init var' tmp[462030] call_tmp[673007])
    (462037 '.=' this[158918] c"numEntries" tmp[462030])
    (482140 'end of statement')
    unknown tmp[462041] "temp"
    unknown tmp[569848] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569849] "maybe param" "temp"
    unknown call_tmp[673012] "expr temp" "maybe param" "maybe type" "temp"
    (673015 'move' call_tmp[673012](462055 '.v' this[158918] c"parSafe"))
    (569854 'move' tmp[569849](569852 call _cond_test call_tmp[673012]))
    if tmp[569849]
    {
      (569859 'move' tmp[569848](569856 '_paramFoldLogical' tmp[569849] chpl_LocalSpinlock[187432]))
    }
    {
      (569864 'move' tmp[569848](569861 '_paramFoldLogical' tmp[569849] nothing[7]))
    }
    (462049 'default init var' tmp[462041] tmp[569848])
    (462051 '.=' this[158918] c"tableLock" tmp[462041])
    (482141 'end of statement')
    unknown call_tmp[673017] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673020 'move' call_tmp[673017](747968 'new' chpl__hashtable[204564](?) idxType[156637] nothing[7]))
    unknown call_tmp[673022] "expr temp" "maybe param" "maybe type" "temp"
    (673025 'move' call_tmp[673022](462070 '.v' this[158918] c"idxType"))
    unknown call_tmp[673027] "maybe param" "maybe type" "temp"
    (673030 'move' call_tmp[673027](462061 call chpl__hashtable[204564](?) call_tmp[673022] nothing[7]))
    unknown tmp[462058] "temp"
    (462064 'init var' tmp[462058] call_tmp[673017] call_tmp[673027])
    (462066 'init field' this[158918] c"table" tmp[462058])
    (482142 'end of statement')
    (462074 'setcid' this[158918])
    (482143 'end of statement')
    unknown call_tmp[673034] "expr temp" "maybe param" "maybe type" "temp"
    (673037 'move' call_tmp[673034](156752 call table _mt[243] this[158918]))
    unknown call_tmp[673041] "expr temp" "maybe param" "maybe type" "temp"
    (673044 'move' call_tmp[673041](156757 call rehashHelpers _mt[243] call_tmp[673034]))
    unknown call_tmp[673046] "expr temp" "maybe param" "maybe type" "temp"
    (673049 'move' call_tmp[673046](156765 call _cast _unmanagedNonNilable[223](?) this[158918]))
    unknown call_tmp[673051] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673054 'move' call_tmp[673051](747969 'new' DefaultAssociativeDomRehashHelper[386733](?) call_tmp[673046]))
    (156769 call = call_tmp[673041] call_tmp[673051])
    (520936 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).deinit[156776](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520938 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiBuildArray[156785](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158900](?), arg eltType[156783]:_any[178](?), param arg initElts[156788]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520942] "RVV" "temp"
    unknown call_tmp[673058] "expr temp" "maybe param" "maybe type" "temp"
    (673061 'move' call_tmp[673058](386744 call idxType _mt[243] this[158926]))
    unknown call_tmp[673065] "expr temp" "maybe param" "maybe type" "temp"
    (673068 'move' call_tmp[673065](386749 call parSafe _mt[243] this[158926]))
    unknown call_tmp[673070] "expr temp" "maybe param" "maybe type" "temp"
    (673073 'move' call_tmp[673070](156805 call _to_unmanaged this[158926]))
    unknown call_tmp[673075] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673078 'move' call_tmp[673075](747970 'new' DefaultAssociativeArr[386738](?)(eltType = eltType[156783])(idxType = call_tmp[673058])(parSafeDom = call_tmp[673065])(dom = call_tmp[673070])(initElts = initElts[156788])(_chpl_manager = unmanaged[220](?))))
    (520947 'move' ret[520942](520946 'deref' call_tmp[673075]))
    (520944 return ret[520942])
  }
  function DefaultAssociativeDom[158900](?).dsiSerialReadWrite[156819](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158900](?), arg f[156817]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[673082] "maybe param" "maybe type" "temp"
    (673085 'move' call_tmp[673082](156826 call(156822 call (partial) binary _mt[243] f[156817])))
    unknown binary[156827] "dead at end of block" "insert auto destroy"
    (544001 'init var' binary[156827] call_tmp[673082])
    (156830 'end of statement')
    unknown call_tmp[673089] "expr temp" "maybe param" "maybe type" "temp"
    (673092 'move' call_tmp[673089](156833 call writing _mt[243] f[156817]))
    unknown call_tmp[673094] "expr temp" "maybe param" "maybe type" "temp"
    (673097 'move' call_tmp[673094](157168 call _cond_test call_tmp[673089]))
    if call_tmp[673094]
    {
      unknown call_tmp[673099] "expr temp" "maybe param" "maybe type" "temp"
      (673102 'move' call_tmp[673099](156976 call _cond_test binary[156827]))
      if call_tmp[673099]
      {
        unknown call_tmp[673106] "maybe param" "maybe type" "temp"
        (673109 'move' call_tmp[673106](386756 call dsiNumIndices _mt[243] this[158930]))
        unknown numIndices[156839] "dead at end of block" "insert auto destroy"
        (544003 'init var' numIndices[156839] call_tmp[673106] int(64)[13])
        (156842 'end of statement')
        (156846 call <~> f[156817] numIndices[156839])
        (482146 'end of statement' numIndices[156839])
        {
          unknown _indexOfInterest[156857] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156858] "expr temp" "temp"
          (156867 'move' _iterator[156858](156865 call _getIterator this[158930]))
          Defer
          {
            {
              (156883 call _freeIterator _iterator[156858])
            }
          }
          { scopeless type
            (156872 'move' _indexOfInterest[156857](156869 call iteratorIndex _iterator[156858]))
          }
          ForLoop[156859]
          {
            unknown idx[156876] "index var" "insert auto destroy"
            (482149 'end of statement')
            (156878 'move' idx[156876] _indexOfInterest[156857])
            (482150 'end of statement' idx[156876])
            {
              (156853 call <~> f[156817] idx[156876])
              (482152 'end of statement' idx[156876])
            }
            label _continueLabel[156862]
            _indexOfInterest[156857]
            _iterator[156858]
          }
          label _breakLabel[156863]
        }
      }
      {
        unknown first[156891] "dead at end of block" "insert auto destroy"
        (544005 'init var' first[156891] 1)
        (156894 'end of statement')
        unknown call_tmp[673111] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673114 'move' call_tmp[673111](747971 'new' ioLiteral[238772] "{"))
        (156902 call <~> f[156817] call_tmp[673111])
        (482154 'end of statement')
        {
          unknown _indexOfInterest[156934] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156935] "expr temp" "temp"
          (156944 'move' _iterator[156935](156942 call _getIterator this[158930]))
          Defer
          {
            {
              (156960 call _freeIterator _iterator[156935])
            }
          }
          { scopeless type
            (156949 'move' _indexOfInterest[156934](156946 call iteratorIndex _iterator[156935]))
          }
          ForLoop[156936]
          {
            unknown idx[156953] "index var" "insert auto destroy"
            (482156 'end of statement')
            (156955 'move' idx[156953] _indexOfInterest[156934])
            (482157 'end of statement' idx[156953])
            {
              unknown call_tmp[673116] "expr temp" "maybe param" "maybe type" "temp"
              (673119 'move' call_tmp[673116](156922 call _cond_test first[156891]))
              if call_tmp[673116]
              {
                (156910 call = first[156891] 0)
                (482159 'end of statement' first[156891])
              }
              {
                unknown call_tmp[673121] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (673124 'move' call_tmp[673121](747972 'new' ioLiteral[238772] ", "))
                (156919 call <~> f[156817] call_tmp[673121])
              }
              (156931 call <~> f[156817] idx[156953])
              (482162 'end of statement' idx[156953])
            }
            label _continueLabel[156939]
            _indexOfInterest[156934]
            _iterator[156935]
          }
          label _breakLabel[156940]
        }
        unknown call_tmp[673126] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673129 'move' call_tmp[673126](747973 'new' ioLiteral[238772] "}"))
        (156973 call <~> f[156817] call_tmp[673126])
      }
    }
    {
      (156983 call(386776 call (partial) dsiClear _mt[243] this[158930]))
      (482165 'end of statement')
      unknown call_tmp[673133] "expr temp" "maybe param" "maybe type" "temp"
      (673136 'move' call_tmp[673133](157164 call _cond_test binary[156827]))
      if call_tmp[673133]
      {
        unknown numIndices[156988] "dead at end of block" "insert auto destroy"
        (544007 'default init var' numIndices[156988] int(64)[13])
        (156991 'end of statement')
        (156995 call <~> f[156817] numIndices[156988])
        (482166 'end of statement' numIndices[156988])
        {
          unknown _indexOfInterest[157019] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[157020] "expr temp" "temp"
          unknown call_tmp[673138] "expr temp" "maybe param" "maybe type" "temp"
          (673141 'move' call_tmp[673138](157034 call chpl_direct_range_iter 1 numIndices[156988] 1))
          (157029 'move' _iterator[157020](157027 call _getIterator call_tmp[673138]))
          Defer
          {
            {
              (157050 call _freeIterator _iterator[157020])
            }
          }
          { scopeless type
            (157039 'move' _indexOfInterest[157019](157036 call iteratorIndex _iterator[157020]))
          }
          ForLoop[157021]
          {
            unknown i[157043] "index var" "insert auto destroy"
            (482169 'end of statement')
            (157045 'move' i[157043] _indexOfInterest[157019])
            (482170 'end of statement' i[157043])
            {
              unknown idx[157004] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673145] "expr temp" "maybe param" "maybe type" "temp"
              (673148 'move' call_tmp[673145](386784 call idxType _mt[243] this[158930]))
              (544009 'default init var' idx[157004] call_tmp[673145])
              (157007 'end of statement')
              (157011 call <~> f[156817] idx[157004])
              (482172 'end of statement' idx[157004])
              (157017 call(386790 call (partial) dsiAdd _mt[243] this[158930]) idx[157004])
              (482174 'end of statement' idx[157004])
            }
            label _continueLabel[157024]
            _indexOfInterest[157019]
            _iterator[157020]
          }
          label _breakLabel[157025]
        }
      }
      {
        unknown call_tmp[673152] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673155 'move' call_tmp[673152](747974 'new' ioLiteral[238772] "{"))
        (157063 call <~> f[156817] call_tmp[673152])
        (482176 'end of statement')
        unknown first[157068] "dead at end of block" "insert auto destroy"
        (544011 'init var' first[157068] 1)
        (157071 'end of statement')
        unknown call_tmp[673157] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673160 'move' call_tmp[673157](747975 'new' ioLiteral[238772] "," 1))
        unknown comma[157078] "dead at end of block" "insert auto destroy"
        (544013 'init var' comma[157078] call_tmp[673157])
        (157081 'end of statement')
        unknown call_tmp[673162] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673165 'move' call_tmp[673162](747976 'new' ioLiteral[238772] "}"))
        unknown end[157087] "dead at end of block" "insert auto destroy"
        (544015 'init var' end[157087] call_tmp[673162])
        (157090 'end of statement')
        {
          unknown tmp[157143] "temp"
          (157161 'move' tmp[157143](157159 call _cond_test 1))
          WhileDo[157148]
          {
            {
              Try
              {
                {
                  (157094 call <~> f[156817] end[157087])
                  (482177 'end of statement' end[157087])
                  break _breakLabel[157147] _breakLabel[157147]
                }
              }
              Catch err : BadFormatError
              {
                unknown call_tmp[673167] "expr temp" "maybe param" "maybe type" "temp"
                (673170 'move' call_tmp[673167](354498 'current error'))
                unknown call_tmp[673172] "maybe param" "maybe type" "temp"
                (673175 'move' call_tmp[673172](354499 'dynamic_cast' unmanaged BadFormatError?[415644] call_tmp[673167]))
                unknown tmp[354495] "dead at end of block" "insert auto destroy" "temp"
                (544017 'init var' tmp[354495] call_tmp[673172])
                unknown call_tmp[673177] "expr temp" "maybe param" "maybe type" "temp"
                (673180 'move' call_tmp[673177](354502 '!=' tmp[354495] nil[44]))
                if call_tmp[673177]
                {
                  unknown call_tmp[673182] "expr temp" "maybe param" "maybe type" "temp"
                  (673185 'move' call_tmp[673182](354509 'to non nilable class' tmp[354495]))
                  unknown call_tmp[673187] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (673190 'move' call_tmp[673187](747977 'new' _owned[30](?) call_tmp[673182]))
                  unknown err[354508] "dead at end of block" "insert auto destroy"
                  (544019 'init var' err[354508] call_tmp[673187])
                  (482179 'end of statement')
                  {
                  }
                }
                {
                }
              }
              unknown call_tmp[673192] "expr temp" "maybe param" "maybe type" "temp"
              (673195 'move' call_tmp[673192](157111 call ! first[157068]))
              unknown call_tmp[673197] "expr temp" "maybe param" "maybe type" "temp"
              (673200 'move' call_tmp[673197](157118 call _cond_test call_tmp[673192]))
              if call_tmp[673197]
              {
                (157115 call <~> f[156817] comma[157078])
                (482180 'end of statement' comma[157078])
              }
              (157125 call = first[157068] 0)
              (482182 'end of statement' first[157068])
              unknown idx[157129] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673204] "expr temp" "maybe param" "maybe type" "temp"
              (673207 'move' call_tmp[673204](386808 call idxType _mt[243] this[158930]))
              (544021 'default init var' idx[157129] call_tmp[673204])
              (157132 'end of statement')
              (157135 call <~> f[156817] idx[157129])
              (482184 'end of statement' idx[157129])
              (157141 call(386814 call (partial) dsiAdd _mt[243] this[158930]) idx[157129])
              (482186 'end of statement' idx[157129])
            }
            label _continueLabel[157146]
            (157154 'move' tmp[157143](157152 call _cond_test 1))
            tmp[157143]
          }
          label _breakLabel[157147]
        }
      }
    }
    (520949 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiSerialWrite[157178](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158900](?), arg f[157176]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157186 call(157181 call (partial) dsiSerialReadWrite _mt[243] this[158934]) f[157176])
    (520951 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiSerialRead[157195](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158900](?), arg f[157193]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157203 call(157198 call (partial) dsiSerialReadWrite _mt[243] this[158938]) f[157193])
    (520953 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiAssignDomain[157214](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158900](?), arg rhs[157211]:_domain[125908](?), arg lhsPrivate[157217]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (157224 call chpl_assignDomainWithIndsIterSafeForRemoving this[158942] rhs[157211])
    (520955 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiNumIndices[157231](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158900](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[520959] "RVV" "temp"
    unknown call_tmp[673217] "expr temp" "maybe param" "maybe type" "temp"
    (673220 'move' call_tmp[673217](360877 call numEntries _mt[243] this[158946]))
    unknown call_tmp[673224] "expr temp" "maybe param" "maybe type" "temp"
    (673227 'move' call_tmp[673224](157238 call(157234 call (partial) read _mt[243] call_tmp[673217])))
    (520964 'move' ret[520959](520963 'deref' call_tmp[673224]))
    (520961 return ret[520959])
  }
  function DefaultAssociativeDom[158900](?).dsiIndsIterSafeForRemoving[157246](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520968] "RVV" "temp"
    unknown call_tmp[673231] "expr temp" "maybe param" "maybe type" "temp"
    (673234 'move' call_tmp[673231](360882 call table _mt[243] this[158950]))
    unknown call_tmp[673238] "expr temp" "maybe param" "maybe type" "temp"
    (673241 'move' call_tmp[673238](157251 call postponeResize _mt[243] call_tmp[673231]))
    (157255 call = call_tmp[673238] 1)
    (482192 'end of statement')
    {
      unknown _indexOfInterest[157269] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157270] "expr temp" "temp"
      unknown call_tmp[673245] "expr temp" "maybe param" "maybe type" "temp"
      (673248 'move' call_tmp[673245](157265 call(157261 call (partial) these _mt[243] this[158950])))
      (157279 'move' _iterator[157270](157277 call _getIterator call_tmp[673245]))
      Defer
      {
        {
          (157296 call _freeIterator _iterator[157270])
        }
      }
      { scopeless type
        (157285 'move' _indexOfInterest[157269](157282 call iteratorIndex _iterator[157270]))
      }
      ForLoop[157271]
      {
        unknown i[157289] "index var" "insert auto destroy"
        (482194 'end of statement')
        (157291 'move' i[157289] _indexOfInterest[157269])
        (482195 'end of statement' i[157289])
        unknown yret[520972] "YVV" "temp"
        (520975 'move' yret[520972](520974 'deref' i[157289]))
        (520977 yield yret[520972])
        (482197 'end of statement' i[157289])
        label _continueLabel[157274]
        _indexOfInterest[157269]
        _iterator[157270]
      }
      label _breakLabel[157275]
    }
    const tmp[157336] "const" "temp"
    unknown call_tmp[673250] "expr temp" "maybe param" "maybe type" "temp"
    (673253 'move' call_tmp[673250](157333 '_wide_get_locale' this[158950]))
    (157338 'move' tmp[157336](157334 'deref' call_tmp[673250]))
    (935274 call on_fn[935270] tmp[157336])
    function on_fn[935270](const in arg dummy_locale_arg[935272]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[673257] "expr temp" "maybe param" "maybe type" "temp"
        (673260 'move' call_tmp[673257](360888 call table _mt[243] this[158950]))
        unknown call_tmp[673264] "expr temp" "maybe param" "maybe type" "temp"
        (673267 'move' call_tmp[673264](157305 call postponeResize _mt[243] call_tmp[673257]))
        (157309 call = call_tmp[673264] 0)
        (482199 'end of statement')
        (157315 call(386828 call (partial) lockTable _mt[243] this[158950]))
        (482200 'end of statement')
        Defer
        {
          {
            (157319 call(386834 call (partial) unlockTable _mt[243] this[158950]))
          }
        }
        unknown call_tmp[673275] "expr temp" "maybe param" "maybe type" "temp"
        (673278 'move' call_tmp[673275](360893 call table _mt[243] this[158950]))
        (157331 call(157327 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673275]))
      }
      (935277 return _void[55])
    }
    {
    }
    (520970 return ret[520968])
  }
  function DefaultAssociativeDom[158900](?)._isSlotFull[157352](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158900](?), arg slot[157349]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520981] "RVV" "temp"
    unknown call_tmp[673284] "expr temp" "maybe param" "maybe type" "temp"
    (673287 'move' call_tmp[673284](360898 call table _mt[243] this[158954]))
    unknown call_tmp[673291] "expr temp" "maybe param" "maybe type" "temp"
    (673294 'move' call_tmp[673291](157361 call(157356 call (partial) table _mt[243] call_tmp[673284]) slot[157349]))
    unknown call_tmp[673298] "expr temp" "maybe param" "maybe type" "temp"
    (673301 'move' call_tmp[673298](157366 call(157362 call (partial) isFull _mt[243] call_tmp[673291])))
    (520987 'move' ret[520981](520986 'coerce' call_tmp[673298] bool[10]))
    (520983 return ret[520981])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158900](?).these[157375](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520991] "RVV" "temp"
    {
      unknown _indexOfInterest[157425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157426] "expr temp" "temp"
      unknown call_tmp[673305] "expr temp" "maybe param" "maybe type" "temp"
      (673308 'move' call_tmp[673305](360903 call table _mt[243] this[158958]))
      unknown call_tmp[673312] "expr temp" "maybe param" "maybe type" "temp"
      (673315 'move' call_tmp[673312](157385 call(157381 call (partial) allSlots _mt[243] call_tmp[673305])))
      (157435 'move' _iterator[157426](157433 call _getIterator call_tmp[673312]))
      Defer
      {
        {
          (157452 call _freeIterator _iterator[157426])
        }
      }
      { scopeless type
        (157441 'move' _indexOfInterest[157425](157438 call iteratorIndex _iterator[157426]))
      }
      ForLoop[157427]
      {
        unknown slot[157445] "index var" "insert auto destroy"
        (482205 'end of statement')
        (157447 'move' slot[157445] _indexOfInterest[157425])
        (482206 'end of statement' slot[157445])
        {
          unknown aSlot[157393] "dead at end of block" "ref var"
          unknown call_tmp[673319] "expr temp" "maybe param" "maybe type" "temp"
          (673322 'move' call_tmp[673319](360908 call table _mt[243] this[158958]))
          unknown call_tmp[673326] "expr temp" "maybe param" "maybe type" "temp"
          (673329 'move' call_tmp[673326](157392 call(157387 call (partial) table _mt[243] call_tmp[673319]) slot[157445]))
          (544024 'move' aSlot[157393](544023 'addr of' call_tmp[673326]))
          (157396 'end of statement' slot[157445])
          unknown call_tmp[673333] "expr temp" "maybe param" "maybe type" "temp"
          (673336 'move' call_tmp[673333](157401 call status _mt[243] aSlot[157393]))
          unknown call_tmp[673338] "expr temp" "maybe param" "maybe type" "temp"
          (673341 'move' call_tmp[673338](157410 call == call_tmp[673333] full[200457]))
          unknown call_tmp[673343] "expr temp" "maybe param" "maybe type" "temp"
          (673346 'move' call_tmp[673343](157421 call _cond_test call_tmp[673338]))
          if call_tmp[673343]
          {
            unknown yret[520995] "YVV" "temp"
            unknown call_tmp[673350] "expr temp" "maybe param" "maybe type" "temp"
            (673353 'move' call_tmp[673350](157415 call key _mt[243] aSlot[157393]))
            (520998 'move' yret[520995](520997 'deref' call_tmp[673350]))
            (521000 yield yret[520995])
            (482209 'end of statement' aSlot[157393])
          }
        }
        label _continueLabel[157430]
        _indexOfInterest[157425]
        _iterator[157426]
      }
      label _breakLabel[157431]
    }
    (520993 return ret[520991])
  }
  function DefaultAssociativeDom[158900](?).these[157468](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158900](?), param arg tag[157465]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521004] "RVV" "temp"
    unknown call_tmp[673355] "expr temp" "maybe param" "maybe type" "temp"
    (673358 'move' call_tmp[673355](157500 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[673355]
    {
      (157497 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157547] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157548] "expr temp" "temp"
      unknown call_tmp[673362] "expr temp" "maybe param" "maybe type" "temp"
      (673365 'move' call_tmp[673362](360917 call table _mt[243] this[158962]))
      unknown call_tmp[673369] "expr temp" "maybe param" "maybe type" "temp"
      (673372 'move' call_tmp[673369](157513 call(157507 call (partial) allSlots _mt[243] call_tmp[673362])(tag = tag[157465])))
      (157557 'move' _iterator[157548](157555 call _getIterator call_tmp[673369]))
      Defer
      {
        {
          (157574 call _freeIterator _iterator[157548])
        }
      }
      { scopeless type
        (157563 'move' _indexOfInterest[157547](157560 call iteratorIndex _iterator[157548]))
      }
      ForLoop[157549]
      {
        unknown slot[157567] "index var" "insert auto destroy"
        (482213 'end of statement')
        (157569 'move' slot[157567] _indexOfInterest[157547])
        (482214 'end of statement' slot[157567])
        {
          unknown aSlot[157521] "dead at end of block" "ref var"
          unknown call_tmp[673376] "expr temp" "maybe param" "maybe type" "temp"
          (673379 'move' call_tmp[673376](360922 call table _mt[243] this[158962]))
          unknown call_tmp[673383] "expr temp" "maybe param" "maybe type" "temp"
          (673386 'move' call_tmp[673383](157520 call(157515 call (partial) table _mt[243] call_tmp[673376]) slot[157567]))
          (544027 'move' aSlot[157521](544026 'addr of' call_tmp[673383]))
          (157524 'end of statement' slot[157567])
          unknown call_tmp[673390] "expr temp" "maybe param" "maybe type" "temp"
          (673393 'move' call_tmp[673390](157527 call status _mt[243] aSlot[157521]))
          unknown call_tmp[673395] "expr temp" "maybe param" "maybe type" "temp"
          (673398 'move' call_tmp[673395](157534 call == call_tmp[673390] full[200457]))
          unknown call_tmp[673400] "expr temp" "maybe param" "maybe type" "temp"
          (673403 'move' call_tmp[673400](157543 call _cond_test call_tmp[673395]))
          if call_tmp[673400]
          {
            unknown yret[521008] "YVV" "temp"
            unknown call_tmp[673407] "expr temp" "maybe param" "maybe type" "temp"
            (673410 'move' call_tmp[673407](157537 call key _mt[243] aSlot[157521]))
            (521011 'move' yret[521008](521010 'deref' call_tmp[673407]))
            (521013 yield yret[521008])
            (482217 'end of statement' aSlot[157521])
          }
        }
        label _continueLabel[157552]
        _indexOfInterest[157547]
        _iterator[157548]
      }
      label _breakLabel[157553]
    }
    (521006 return ret[521004])
  }
  where {
    (157475 call == tag[157465] standalone[451])
  }
  function DefaultAssociativeDom[158900](?).these[157590](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158900](?), param arg tag[157587]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521017] "RVV" "temp"
    unknown call_tmp[673412] "expr temp" "maybe param" "maybe type" "temp"
    (673415 'move' call_tmp[673412](157621 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[673412]
    {
      (157619 call writeln "*** In associative domain leader iterator")
    }
    {
      unknown _indexOfInterest[157643] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157644] "expr temp" "temp"
      unknown call_tmp[673419] "expr temp" "maybe param" "maybe type" "temp"
      (673422 'move' call_tmp[673419](360931 call table _mt[243] this[158966]))
      unknown call_tmp[673426] "expr temp" "maybe param" "maybe type" "temp"
      (673429 'move' call_tmp[673426](157635 call(157629 call (partial) allSlots _mt[243] call_tmp[673419])(tag = tag[157587])))
      (157653 'move' _iterator[157644](157651 call _getIterator call_tmp[673426]))
      Defer
      {
        {
          (157670 call _freeIterator _iterator[157644])
        }
      }
      { scopeless type
        (157659 'move' _indexOfInterest[157643](157656 call iteratorIndex _iterator[157644]))
      }
      ForLoop[157645]
      {
        unknown chunk[157663] "index var" "insert auto destroy"
        (482221 'end of statement')
        (157665 'move' chunk[157663] _indexOfInterest[157643])
        (482222 'end of statement' chunk[157663])
        unknown yret[521021] "YVV" "temp"
        unknown call_tmp[673431] "expr temp" "maybe param" "maybe type" "temp"
        (673434 'move' call_tmp[673431](157639 call _build_tuple chunk[157663] this[158966]))
        (521024 'move' yret[521021](521023 'deref' call_tmp[673431]))
        (521026 yield yret[521021])
        (482224 'end of statement' chunk[157663])
        label _continueLabel[157648]
        _indexOfInterest[157643]
        _iterator[157644]
      }
      label _breakLabel[157649]
    }
    (521019 return ret[521017])
  }
  where {
    (157597 call == tag[157587] leader[447])
  }
  function DefaultAssociativeDom[158900](?).these[157686](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158900](?), param arg tag[157683]:iterKind[453], arg followThis[157688]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521030] "RVV" "temp"
    unknown tmp[157703] "dead at end of block" "insert auto destroy" "temp"
    (544029 'init var' tmp[157703] followThis[157688])
    (157710 call _check_tuple_var_decl tmp[157703] 2)
    (482226 'end of statement')
    unknown call_tmp[673436] "maybe param" "maybe type" "temp"
    (673439 'move' call_tmp[673436](157704 call tmp[157703] 0))
    unknown chunk[157697] "dead at end of block" "insert auto destroy"
    (544031 'init var' chunk[157697] call_tmp[673436])
    unknown call_tmp[673441] "maybe param" "maybe type" "temp"
    (673444 'move' call_tmp[673441](157707 call tmp[157703] 1))
    unknown followThisDom[157699] "dead at end of block" "insert auto destroy"
    (544033 'init var' followThisDom[157699] call_tmp[673441])
    (157715 'end of statement')
    unknown call_tmp[673446] "expr temp" "maybe param" "maybe type" "temp"
    (673449 'move' call_tmp[673446](157739 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[673446]
    {
      (157737 call writeln "In associative domain follower code")
    }
    unknown call_tmp[673451] "maybe param" "maybe type" "temp"
    (673454 'move' call_tmp[673451](157746 call == followThisDom[157699] this[158970]))
    const sameDom[157748] "dead at end of block" "const" "insert auto destroy"
    (544035 'init var' sameDom[157748] call_tmp[673451])
    (157751 'end of statement')
    unknown call_tmp[673456] "expr temp" "maybe param" "maybe type" "temp"
    (673459 'move' call_tmp[673456](157753 call ! sameDom[157748]))
    unknown call_tmp[673461] "expr temp" "maybe param" "maybe type" "temp"
    (673464 'move' call_tmp[673461](157791 call _cond_test call_tmp[673456]))
    if call_tmp[673461]
    {
      unknown call_tmp[673468] "expr temp" "maybe param" "maybe type" "temp"
      (673471 'move' call_tmp[673468](157756 call dsiNumIndices _mt[243] followThisDom[157699]))
      unknown call_tmp[673475] "expr temp" "maybe param" "maybe type" "temp"
      (673478 'move' call_tmp[673475](157760 call dsiNumIndices _mt[243] this[158970]))
      unknown call_tmp[673480] "expr temp" "maybe param" "maybe type" "temp"
      (673483 'move' call_tmp[673480](157763 call != call_tmp[673468] call_tmp[673475]))
      unknown call_tmp[673485] "expr temp" "maybe param" "maybe type" "temp"
      (673488 'move' call_tmp[673485](157786 call _cond_test call_tmp[673480]))
      if call_tmp[673485]
      {
        (157784 call halt "zippered associative domains do not match")
      }
    }
    unknown call_tmp[673492] "expr temp" "maybe param" "maybe type" "temp"
    (673495 'move' call_tmp[673492](157797 call table _mt[243] followThisDom[157699]))
    unknown call_tmp[673499] "maybe param" "maybe type" "temp"
    (673502 'move' call_tmp[673499](157800 call table _mt[243] call_tmp[673492]))
    const otherTable[157803] "dead at end of block" "const" "insert auto destroy"
    (544037 'init var' otherTable[157803] call_tmp[673499])
    (157806 'end of statement' followThisDom[157699] followThisDom[157699])
    {
      unknown _indexOfInterest[157902] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157903] "expr temp" "temp"
      (157912 'move' _iterator[157903](157910 call _getIterator chunk[157697]))
      Defer
      {
        {
          (157928 call _freeIterator _iterator[157903])
        }
      }
      { scopeless type
        (157917 'move' _indexOfInterest[157902](157914 call iteratorIndex _iterator[157903]))
      }
      ForLoop[157904]
      {
        unknown slot[157921] "index var" "insert auto destroy"
        (482232 'end of statement')
        (157923 'move' slot[157921] _indexOfInterest[157902])
        (482233 'end of statement' slot[157921])
        {
          const aSlot[157813] "dead at end of block" "const" "ref var"
          unknown call_tmp[673504] "expr temp" "maybe param" "maybe type" "temp"
          (673507 'move' call_tmp[673504](157812 call otherTable[157803] slot[157921]))
          (544040 'move' aSlot[157813](544039 'addr of' call_tmp[673504]))
          (157816 'end of statement' otherTable[157803] slot[157921])
          unknown call_tmp[673511] "expr temp" "maybe param" "maybe type" "temp"
          (673514 'move' call_tmp[673511](157823 call(157819 call (partial) isFull _mt[243] aSlot[157813])))
          unknown call_tmp[673516] "expr temp" "maybe param" "maybe type" "temp"
          (673519 'move' call_tmp[673516](157898 call _cond_test call_tmp[673511]))
          if call_tmp[673516]
          {
            unknown idx[157825] "dead at end of block" "insert auto destroy"
            (544042 'init var' idx[157825] slot[157921])
            (157828 'end of statement' slot[157921])
            unknown call_tmp[673521] "expr temp" "maybe param" "maybe type" "temp"
            (673524 'move' call_tmp[673521](157831 call ! sameDom[157748]))
            unknown call_tmp[673526] "expr temp" "maybe param" "maybe type" "temp"
            (673529 'move' call_tmp[673526](157882 call _cond_test call_tmp[673521]))
            if call_tmp[673526]
            {
              unknown call_tmp[673533] "expr temp" "maybe param" "maybe type" "temp"
              (673536 'move' call_tmp[673533](360941 call table _mt[243] this[158970]))
              unknown call_tmp[673542] "expr temp" "maybe param" "maybe type" "temp"
              (673545 'move' call_tmp[673542](157845 call key _mt[243] aSlot[157813]))
              unknown call_tmp[673547] "maybe param" "maybe type" "temp"
              (673550 'move' call_tmp[673547](157849 call(157841 call (partial) findFullSlot _mt[243] call_tmp[673533]) call_tmp[673542]))
              const tmp[157850] "dead at end of block" "const" "insert auto destroy" "temp"
              (544044 'init var' tmp[157850] call_tmp[673547])
              (157857 call _check_tuple_var_decl tmp[157850] 2)
              (482238 'end of statement')
              unknown call_tmp[673552] "maybe param" "maybe type" "temp"
              (673555 'move' call_tmp[673552](157851 call tmp[157850] 0))
              const match[157833] "dead at end of block" "const" "insert auto destroy"
              (544046 'init var' match[157833] call_tmp[673552])
              unknown call_tmp[673557] "maybe param" "maybe type" "temp"
              (673560 'move' call_tmp[673557](157854 call tmp[157850] 1))
              const loc[157835] "dead at end of block" "const" "insert auto destroy"
              (544048 'init var' loc[157835] call_tmp[673557])
              (157862 'end of statement')
              unknown call_tmp[673562] "expr temp" "maybe param" "maybe type" "temp"
              (673565 'move' call_tmp[673562](157865 call ! match[157833]))
              unknown call_tmp[673567] "expr temp" "maybe param" "maybe type" "temp"
              (673570 'move' call_tmp[673567](157872 call _cond_test call_tmp[673562]))
              if call_tmp[673567]
              {
                (157870 call halt "zippered associative domains do not match")
              }
              (157879 call = idx[157825] loc[157835])
              (482240 'end of statement' idx[157825] loc[157835])
            }
            unknown yret[521034] "YVV" "temp"
            unknown call_tmp[673574] "expr temp" "maybe param" "maybe type" "temp"
            (673577 'move' call_tmp[673574](360947 call table _mt[243] this[158970]))
            unknown call_tmp[673581] "expr temp" "maybe param" "maybe type" "temp"
            (673584 'move' call_tmp[673581](157892 call(157887 call (partial) table _mt[243] call_tmp[673574]) idx[157825]))
            unknown call_tmp[673588] "expr temp" "maybe param" "maybe type" "temp"
            (673591 'move' call_tmp[673588](157893 call key _mt[243] call_tmp[673581]))
            (521037 'move' yret[521034](521036 'deref' call_tmp[673588]))
            (521039 yield yret[521034])
            (482243 'end of statement' idx[157825])
          }
        }
        label _continueLabel[157907]
        _indexOfInterest[157902]
        _iterator[157903]
      }
      label _breakLabel[157908]
    }
    (521032 return ret[521030])
  }
  where {
    (157695 call == tag[157683] follower[449])
  }
  function DefaultAssociativeDom[158900](?).dsiMyDist[157940](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521043] "RVV" "temp"
    unknown call_tmp[673595] "expr temp" "maybe param" "maybe type" "temp"
    (673598 'move' call_tmp[673595](386869 call dist _mt[243] this[158974]))
    (521049 'move' ret[521043](521048 'coerce' call_tmp[673595] unmanaged BaseDist[415506]))
    (521045 return ret[521043])
  }
  { scopeless type
    unmanaged BaseDist[415506]
  }
  function DefaultAssociativeDom[158900](?).dsiClear[157953](arg _mt[158980]:_MT[238], arg this[158978]:DefaultAssociativeDom[158900](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const tmp[158132] "const" "temp"
    unknown call_tmp[673600] "expr temp" "maybe param" "maybe type" "temp"
    (673603 'move' call_tmp[673600](158129 '_wide_get_locale' this[158978]))
    (158134 'move' tmp[158132](158130 'deref' call_tmp[673600]))
    (935283 call on_fn[935279] tmp[158132])
    function on_fn[935279](const in arg dummy_locale_arg[935281]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        (157958 call(386874 call (partial) lockTable _mt[243] this[158978]))
        (482246 'end of statement')
        {
          unknown _indexOfInterest[158076] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158077] "expr temp" "temp"
          unknown call_tmp[673609] "expr temp" "maybe param" "maybe type" "temp"
          (673612 'move' call_tmp[673609](360952 call table _mt[243] this[158978]))
          unknown call_tmp[673616] "expr temp" "maybe param" "maybe type" "temp"
          (673619 'move' call_tmp[673616](157967 call(157963 call (partial) allSlots _mt[243] call_tmp[673609])))
          (158086 'move' _iterator[158077](158084 call _getIterator call_tmp[673616]))
          Defer
          {
            {
              (158103 call _freeIterator _iterator[158077])
            }
          }
          { scopeless type
            (158092 'move' _indexOfInterest[158076](158089 call iteratorIndex _iterator[158077]))
          }
          ForLoop[158078]
          {
            unknown slot[158096] "index var" "insert auto destroy"
            (482248 'end of statement')
            (158098 'move' slot[158096] _indexOfInterest[158076])
            (482249 'end of statement' slot[158096])
            {
              unknown aSlot[157975] "dead at end of block" "ref var"
              unknown call_tmp[673623] "expr temp" "maybe param" "maybe type" "temp"
              (673626 'move' call_tmp[673623](360957 call table _mt[243] this[158978]))
              unknown call_tmp[673630] "expr temp" "maybe param" "maybe type" "temp"
              (673633 'move' call_tmp[673630](157974 call(157969 call (partial) table _mt[243] call_tmp[673623]) slot[158096]))
              (544051 'move' aSlot[157975](544050 'addr of' call_tmp[673630]))
              (157978 'end of statement' slot[158096])
              unknown call_tmp[673637] "expr temp" "maybe param" "maybe type" "temp"
              (673640 'move' call_tmp[673637](157985 call(157981 call (partial) isFull _mt[243] aSlot[157975])))
              unknown call_tmp[673642] "expr temp" "maybe param" "maybe type" "temp"
              (673645 'move' call_tmp[673642](158055 call _cond_test call_tmp[673637]))
              if call_tmp[673642]
              {
                unknown tmpKey[157987] "dead at end of block" "insert auto destroy"
                unknown call_tmp[673649] "expr temp" "maybe param" "maybe type" "temp"
                (673652 'move' call_tmp[673649](386880 call idxType _mt[243] this[158978]))
                (544053 'default init var' tmpKey[157987] call_tmp[673649])
                (157990 'end of statement')
                unknown tmpVal[157993] "dead at end of block" "insert auto destroy"
                (544055 'default init var' tmpVal[157993] nothing[7])
                (157996 'end of statement')
                unknown call_tmp[673656] "expr temp" "maybe param" "maybe type" "temp"
                (673659 'move' call_tmp[673656](360963 call table _mt[243] this[158978]))
                (158007 call(158000 call (partial) clearSlot _mt[243] call_tmp[673656]) aSlot[157975] tmpKey[157987] tmpVal[157993])
                (482252 'end of statement' aSlot[157975] tmpKey[157987] tmpVal[157993])
                {
                  unknown _indexOfInterest[158022] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[158023] "expr temp" "temp"
                  unknown call_tmp[673665] "expr temp" "maybe param" "maybe type" "temp"
                  (673668 'move' call_tmp[673665](386888 call _arrs _mt[243] this[158978]))
                  (158032 'move' _iterator[158023](158030 call _getIterator call_tmp[673665]))
                  Defer
                  {
                    {
                      (158048 call _freeIterator _iterator[158023])
                    }
                  }
                  { scopeless type
                    (158037 'move' _indexOfInterest[158022](158034 call iteratorIndex _iterator[158023]))
                  }
                  ForLoop[158024]
                  {
                    unknown arr[158041] "index var" "insert auto destroy"
                    (482257 'end of statement')
                    (158043 'move' arr[158041] _indexOfInterest[158022])
                    (482258 'end of statement' arr[158041])
                    {
                      (158019 call(158014 call (partial) _deinitSlot _mt[243] arr[158041]) slot[158096])
                      (482260 'end of statement' arr[158041] slot[158096])
                    }
                    label _continueLabel[158027]
                    _indexOfInterest[158022]
                    _iterator[158023]
                  }
                  label _breakLabel[158028]
                }
              }
              unknown call_tmp[673674] "expr temp" "maybe param" "maybe type" "temp"
              (673677 'move' call_tmp[673674](360969 call table _mt[243] this[158978]))
              unknown call_tmp[673681] "expr temp" "maybe param" "maybe type" "temp"
              (673684 'move' call_tmp[673681](158065 call(158060 call (partial) table _mt[243] call_tmp[673674]) slot[158096]))
              unknown call_tmp[673688] "expr temp" "maybe param" "maybe type" "temp"
              (673691 'move' call_tmp[673688](158066 call status _mt[243] call_tmp[673681]))
              (158073 call = call_tmp[673688] empty[200455])
              (482263 'end of statement' slot[158096])
            }
            label _continueLabel[158081]
            _indexOfInterest[158076]
            _iterator[158077]
          }
          label _breakLabel[158082]
        }
        unknown call_tmp[673695] "expr temp" "maybe param" "maybe type" "temp"
        (673698 'move' call_tmp[673695](360975 call numEntries _mt[243] this[158978]))
        (158116 call(158111 call (partial) write _mt[243] call_tmp[673695]) 0)
        (482265 'end of statement')
        unknown call_tmp[673704] "expr temp" "maybe param" "maybe type" "temp"
        (673707 'move' call_tmp[673704](360980 call table _mt[243] this[158978]))
        (158123 call(158119 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673704]))
        (482266 'end of statement')
        (158127 call(386894 call (partial) unlockTable _mt[243] this[158978]))
      }
      (935286 return _void[55])
    }
    {
    }
    (521051 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiMember[158149](arg _mt[158984]:_MT[238], arg this[158982]:DefaultAssociativeDom[158900](?), arg idx[158146] :
  (386899 call idxType _mt[243] this[158982])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521055] "RVV" "temp"
    (158154 call(386903 call (partial) lockTable _mt[243] this[158982]))
    (482268 'end of statement')
    Defer
    {
      {
        (158159 call(386907 call (partial) unlockTable _mt[243] this[158982]))
      }
    }
    unknown call_tmp[673721] "expr temp" "maybe param" "maybe type" "temp"
    (673724 'move' call_tmp[673721](360985 call table _mt[243] this[158982]))
    unknown call_tmp[673728] "maybe param" "maybe type" "temp"
    (673731 'move' call_tmp[673728](158175 call(158170 call (partial) findFullSlot _mt[243] call_tmp[673721]) idx[158146]))
    unknown tmp[158176] "dead at end of block" "insert auto destroy" "temp"
    (544057 'init var' tmp[158176] call_tmp[673728])
    (158183 call _check_tuple_var_decl tmp[158176] 2)
    (482270 'end of statement')
    unknown call_tmp[673733] "maybe param" "maybe type" "temp"
    (673736 'move' call_tmp[673733](158177 call tmp[158176] 0))
    unknown foundFullSlot[158164] "dead at end of block" "insert auto destroy"
    (544059 'init var' foundFullSlot[158164] call_tmp[673733])
    unknown call_tmp[673738] "maybe param" "maybe type" "temp"
    (673741 'move' call_tmp[673738](158180 call tmp[158176] 1))
    unknown slotNum[158166] "dead at end of block" "insert auto destroy"
    (544061 'init var' slotNum[158166] call_tmp[673738])
    (158188 'end of statement')
    (521061 'move' ret[521055](521060 'coerce' foundFullSlot[158164] bool[10]))
    gotoReturn _end_dsiMember[521053] _end_dsiMember[521053]
    (482271 'end of statement' foundFullSlot[158164])
    label _end_dsiMember[521053]
    (521057 return ret[521055])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158900](?).dsiAdd[158199](arg _mt[158988]:_MT[238], arg this[158986]:DefaultAssociativeDom[158900](?), in arg idx[158197]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521067] "RVV" "temp"
    unknown call_tmp[673745] "expr temp" "maybe param" "maybe type" "temp"
    (673748 'move' call_tmp[673745](158204 call(386915 call (partial) _addWrapper _mt[243] this[158986]) idx[158197]))
    unknown call_tmp[673750] "maybe param" "maybe type" "temp"
    (673753 'move' call_tmp[673750](158207 call call_tmp[673745] 1))
    const numInds[158208] "dead at end of block" "const" "insert auto destroy"
    (544063 'init var' numInds[158208] call_tmp[673750])
    (158211 'end of statement')
    (521072 'move' ret[521067](521071 'deref' numInds[158208]))
    gotoReturn _end_dsiAdd[521065] _end_dsiAdd[521065]
    (482273 'end of statement' numInds[158208])
    label _end_dsiAdd[521065]
    (521069 return ret[521067])
  }
  function DefaultAssociativeDom[158900](?)._addWrapper[158224](arg _mt[158992]:_MT[238], arg this[158990]:DefaultAssociativeDom[158900](?), in arg idx[158221] :
  (386922 call idxType _mt[243] this[158990])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521078] "RVV" "temp"
    unknown call_tmp[673757] "maybe param" "maybe type" "temp"
    (673760 'move' call_tmp[673757](158227 call - 1))
    unknown slotNum[158229] "dead at end of block" "insert auto destroy"
    (544065 'init var' slotNum[158229] call_tmp[673757])
    (158232 'end of statement')
    unknown retVal[158235] "dead at end of block" "insert auto destroy"
    (544067 'init var' retVal[158235] 0)
    (158238 'end of statement')
    const tmp[158267] "const" "temp"
    unknown call_tmp[673762] "expr temp" "maybe param" "maybe type" "temp"
    (673765 'move' call_tmp[673762](158264 '_wide_get_locale' this[158990]))
    (158269 'move' tmp[158267](158265 'deref' call_tmp[673762]))
    (935292 call on_fn[935288] tmp[158267])
    function on_fn[935288](const in arg dummy_locale_arg[935290]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        (158242 call(386927 call (partial) lockTable _mt[243] this[158990]))
        (482275 'end of statement')
        Defer
        {
          {
            (158247 call(386931 call (partial) unlockTable _mt[243] this[158990]))
          }
        }
        unknown tmp[492398] "expr temp" "maybe param" "maybe type" "temp"
        unknown tmp[492423] "maybe param" "temp"
        (492426 'move' tmp[492423](492424 'addr of' slotNum[158229]))
        unknown tmp[492434] "maybe param" "temp"
        (492437 'move' tmp[492434](492435 'addr of' retVal[158235]))
        (492399 'move' tmp[492398](158260 call(386939 call (partial) _add _mt[243] this[158990]) idx[158221]))
        { scopeless
          unknown call_tmp[673775] "expr temp" "maybe param" "maybe type" "temp"
          (673778 'move' call_tmp[673775](492405 call size _mt[243] tmp[492398]))
          unknown call_tmp[673780] "expr temp" "maybe param" "maybe type" "temp"
          (673783 'move' call_tmp[673780](492408 call != 2 call_tmp[673775]))
          unknown call_tmp[673785] "expr temp" "maybe param" "maybe type" "temp"
          (673788 'move' call_tmp[673785](492415 call _cond_test call_tmp[673780]))
          if call_tmp[673785]
          {
            (492411 call compilerError "tuple size must match the number of grouped variables" 0)
          }
        }
        unknown call_tmp[673790] "expr temp" "maybe param" "maybe type" "temp"
        (673793 'move' call_tmp[673790](492421 call tmp[492398] 0))
        (492428 call = tmp[492423] call_tmp[673790])
        unknown call_tmp[673795] "expr temp" "maybe param" "maybe type" "temp"
        (673798 'move' call_tmp[673795](492432 call tmp[492398] 1))
        (492439 call = tmp[492434] call_tmp[673795])
        (482277 'end of statement' slotNum[158229] retVal[158235])
      }
      (935295 return _void[55])
    }
    {
    }
    unknown call_tmp[673800] "expr temp" "maybe param" "maybe type" "temp"
    (673803 'move' call_tmp[673800](158278 call _build_tuple slotNum[158229] retVal[158235]))
    (521083 'move' ret[521078](521082 'deref' call_tmp[673800]))
    gotoReturn _end__addWrapper[521076] _end__addWrapper[521076]
    (482280 'end of statement' slotNum[158229] retVal[158235])
    label _end__addWrapper[521076]
    (521080 return ret[521078])
  }
  function DefaultAssociativeDom[158900](?)._add[158290](arg _mt[158996]:_MT[238], arg this[158994]:DefaultAssociativeDom[158900](?), in arg idx[158287] :
  (386947 call idxType _mt[243] this[158994])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521089] "RVV" "temp"
    unknown foundFullSlot[158293] "dead at end of block" "insert auto destroy"
    (544069 'init var' foundFullSlot[158293] 0)
    (158296 'end of statement')
    unknown call_tmp[673807] "maybe param" "maybe type" "temp"
    (673810 'move' call_tmp[673807](158299 call - 1))
    unknown slotNum[158301] "dead at end of block" "insert auto destroy"
    (544071 'init var' slotNum[158301] call_tmp[673807])
    (158304 'end of statement')
    unknown tmp[492442] "expr temp" "maybe param" "maybe type" "temp"
    unknown tmp[492467] "maybe param" "temp"
    (492470 'move' tmp[492467](492468 'addr of' foundFullSlot[158293]))
    unknown tmp[492478] "maybe param" "temp"
    (492481 'move' tmp[492478](492479 'addr of' slotNum[158301]))
    unknown call_tmp[673814] "expr temp" "maybe param" "maybe type" "temp"
    (673817 'move' call_tmp[673814](360990 call table _mt[243] this[158994]))
    (492443 'move' tmp[492442](158318 call(158313 call (partial) findAvailableSlot _mt[243] call_tmp[673814]) idx[158287]))
    { scopeless
      unknown call_tmp[673823] "expr temp" "maybe param" "maybe type" "temp"
      (673826 'move' call_tmp[673823](492449 call size _mt[243] tmp[492442]))
      unknown call_tmp[673828] "expr temp" "maybe param" "maybe type" "temp"
      (673831 'move' call_tmp[673828](492452 call != 2 call_tmp[673823]))
      unknown call_tmp[673833] "expr temp" "maybe param" "maybe type" "temp"
      (673836 'move' call_tmp[673833](492459 call _cond_test call_tmp[673828]))
      if call_tmp[673833]
      {
        (492455 call compilerError "tuple size must match the number of grouped variables" 0)
      }
    }
    unknown call_tmp[673838] "expr temp" "maybe param" "maybe type" "temp"
    (673841 'move' call_tmp[673838](492465 call tmp[492442] 0))
    (492472 call = tmp[492467] call_tmp[673838])
    unknown call_tmp[673843] "expr temp" "maybe param" "maybe type" "temp"
    (673846 'move' call_tmp[673843](492476 call tmp[492442] 1))
    (492483 call = tmp[492478] call_tmp[673843])
    (482283 'end of statement' foundFullSlot[158293] slotNum[158301])
    unknown call_tmp[673848] "expr temp" "maybe param" "maybe type" "temp"
    (673851 'move' call_tmp[673848](158405 call _cond_test foundFullSlot[158293]))
    if call_tmp[673848]
    {
      unknown call_tmp[673853] "expr temp" "maybe param" "maybe type" "temp"
      (673856 'move' call_tmp[673853](158326 call _build_tuple slotNum[158301] 0))
      (521094 'move' ret[521089](521093 'deref' call_tmp[673853]))
      gotoReturn _end__add[521087] _end__add[521087]
      (482286 'end of statement' slotNum[158301])
    }
    {
      unknown call_tmp[673860] "expr temp" "maybe param" "maybe type" "temp"
      (673863 'move' call_tmp[673860](360995 call table _mt[243] this[158994]))
      (158341 call(158334 call (partial) fillSlot _mt[243] call_tmp[673860]) slotNum[158301] idx[158287] none[57])
      (482288 'end of statement' slotNum[158301])
      unknown call_tmp[673869] "expr temp" "maybe param" "maybe type" "temp"
      (673872 'move' call_tmp[673869](361000 call numEntries _mt[243] this[158994]))
      (158350 call(158345 call (partial) add _mt[243] call_tmp[673869]) 1)
      (482290 'end of statement')
      {
        unknown _indexOfInterest[158365] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158366] "expr temp" "temp"
        unknown call_tmp[673878] "expr temp" "maybe param" "maybe type" "temp"
        (673881 'move' call_tmp[673878](386959 call _arrs _mt[243] this[158994]))
        (158375 'move' _iterator[158366](158373 call _getIterator call_tmp[673878]))
        Defer
        {
          {
            (158391 call _freeIterator _iterator[158366])
          }
        }
        { scopeless type
          (158380 'move' _indexOfInterest[158365](158377 call iteratorIndex _iterator[158366]))
        }
        ForLoop[158367]
        {
          unknown arr[158384] "index var" "insert auto destroy"
          (482292 'end of statement')
          (158386 'move' arr[158384] _indexOfInterest[158365])
          (482293 'end of statement' arr[158384])
          {
            (158362 call(158357 call (partial) _defaultInitSlot _mt[243] arr[158384]) slotNum[158301])
            (482295 'end of statement' arr[158384] slotNum[158301])
          }
          label _continueLabel[158370]
          _indexOfInterest[158365]
          _iterator[158366]
        }
        label _breakLabel[158371]
      }
      unknown call_tmp[673885] "expr temp" "maybe param" "maybe type" "temp"
      (673888 'move' call_tmp[673885](158401 call _build_tuple slotNum[158301] 1))
      (521099 'move' ret[521089](521098 'deref' call_tmp[673885]))
      gotoReturn _end__add[521087] _end__add[521087]
      (482298 'end of statement' slotNum[158301])
    }
    label _end__add[521087]
    (521091 return ret[521089])
  }
  function DefaultAssociativeDom[158900](?).dsiRemove[158417](arg _mt[159000]:_MT[238], arg this[158998]:DefaultAssociativeDom[158900](?), arg idx[158414] :
  (386966 call idxType _mt[243] this[158998])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521105] "RVV" "temp"
    unknown retval[158420] "dead at end of block" "insert auto destroy"
    (544073 'default init var' retval[158420] int(64)[13])
    (158423 'end of statement')
    const tmp[158562] "const" "temp"
    unknown call_tmp[673892] "expr temp" "maybe param" "maybe type" "temp"
    (673895 'move' call_tmp[673892](158559 '_wide_get_locale' this[158998]))
    (158564 'move' tmp[158562](158560 'deref' call_tmp[673892]))
    (935301 call on_fn[935297] tmp[158562])
    function on_fn[935297](const in arg dummy_locale_arg[935299]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        (158428 call(386971 call (partial) lockTable _mt[243] this[158998]))
        (482300 'end of statement')
        Defer
        {
          {
            (158433 call(386975 call (partial) unlockTable _mt[243] this[158998]))
          }
        }
        unknown call_tmp[673903] "expr temp" "maybe param" "maybe type" "temp"
        (673906 'move' call_tmp[673903](361006 call table _mt[243] this[158998]))
        unknown call_tmp[673910] "maybe param" "maybe type" "temp"
        (673913 'move' call_tmp[673910](158449 call(158444 call (partial) findFullSlot _mt[243] call_tmp[673903]) idx[158414]))
        const tmp[158450] "dead at end of block" "const" "insert auto destroy" "temp"
        (544075 'init var' tmp[158450] call_tmp[673910])
        (158457 call _check_tuple_var_decl tmp[158450] 2)
        (482302 'end of statement')
        unknown call_tmp[673915] "maybe param" "maybe type" "temp"
        (673918 'move' call_tmp[673915](158451 call tmp[158450] 0))
        const foundSlot[158438] "dead at end of block" "const" "insert auto destroy"
        (544077 'init var' foundSlot[158438] call_tmp[673915])
        unknown call_tmp[673920] "maybe param" "maybe type" "temp"
        (673923 'move' call_tmp[673920](158454 call tmp[158450] 1))
        const slotNum[158440] "dead at end of block" "const" "insert auto destroy"
        (544079 'init var' slotNum[158440] call_tmp[673920])
        (158462 'end of statement')
        unknown call_tmp[673925] "expr temp" "maybe param" "maybe type" "temp"
        (673928 'move' call_tmp[673925](158548 call _cond_test foundSlot[158438]))
        if call_tmp[673925]
        {
          unknown tmpIdx[158465] "dead at end of block" "insert auto destroy"
          unknown call_tmp[673932] "expr temp" "maybe param" "maybe type" "temp"
          (673935 'move' call_tmp[673932](386982 call idxType _mt[243] this[158998]))
          (544081 'default init var' tmpIdx[158465] call_tmp[673932])
          (158468 'end of statement')
          unknown tmpVal[158471] "dead at end of block" "insert auto destroy"
          (544083 'default init var' tmpVal[158471] nothing[7])
          (158474 'end of statement')
          unknown call_tmp[673939] "expr temp" "maybe param" "maybe type" "temp"
          (673942 'move' call_tmp[673939](361011 call table _mt[243] this[158998]))
          (158483 call(158476 call (partial) clearSlot _mt[243] call_tmp[673939]) slotNum[158440] tmpIdx[158465] tmpVal[158471])
          (482303 'end of statement' slotNum[158440] tmpIdx[158465] tmpVal[158471])
          unknown call_tmp[673948] "expr temp" "maybe param" "maybe type" "temp"
          (673951 'move' call_tmp[673948](361016 call numEntries _mt[243] this[158998]))
          (158491 call(158486 call (partial) sub _mt[243] call_tmp[673948]) 1)
          (482307 'end of statement')
          {
            unknown _indexOfInterest[158504] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158505] "expr temp" "temp"
            unknown call_tmp[673957] "expr temp" "maybe param" "maybe type" "temp"
            (673960 'move' call_tmp[673957](386990 call _arrs _mt[243] this[158998]))
            (158514 'move' _iterator[158505](158512 call _getIterator call_tmp[673957]))
            Defer
            {
              {
                (158530 call _freeIterator _iterator[158505])
              }
            }
            { scopeless type
              (158519 'move' _indexOfInterest[158504](158516 call iteratorIndex _iterator[158505]))
            }
            ForLoop[158506]
            {
              unknown arr[158523] "index var" "insert auto destroy"
              (482309 'end of statement')
              (158525 'move' arr[158523] _indexOfInterest[158504])
              (482310 'end of statement' arr[158523])
              {
                (158501 call(158496 call (partial) _deinitSlot _mt[243] arr[158523]) slotNum[158440])
                (482312 'end of statement' arr[158523] slotNum[158440])
              }
              label _continueLabel[158509]
              _indexOfInterest[158504]
              _iterator[158505]
            }
            label _breakLabel[158510]
          }
          (158539 call = retval[158420] 1)
          (482315 'end of statement' retval[158420])
        }
        {
          (158544 call = retval[158420] 0)
          (482317 'end of statement' retval[158420])
        }
        unknown call_tmp[673966] "expr temp" "maybe param" "maybe type" "temp"
        (673969 'move' call_tmp[673966](361022 call table _mt[243] this[158998]))
        (158557 call(158553 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673966]))
      }
      (935304 return _void[55])
    }
    {
    }
    (521110 'move' ret[521105](521109 'deref' retval[158420]))
    gotoReturn _end_dsiRemove[521103] _end_dsiRemove[521103]
    (482320 'end of statement' retval[158420])
    label _end_dsiRemove[521103]
    (521107 return ret[521105])
  }
  function DefaultAssociativeDom[158900](?).dsiRequestCapacity[158581](arg _mt[159004]:_MT[238], arg this[159002]:DefaultAssociativeDom[158900](?), arg numKeys[158578]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[158669] "const" "temp"
    unknown call_tmp[673973] "expr temp" "maybe param" "maybe type" "temp"
    (673976 'move' call_tmp[673973](158666 '_wide_get_locale' this[159002]))
    (158671 'move' tmp[158669](158667 'deref' call_tmp[673973]))
    (935310 call on_fn[935306] tmp[158669])
    function on_fn[935306](const in arg dummy_locale_arg[935308]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        unknown call_tmp[673980] "expr temp" "maybe param" "maybe type" "temp"
        (673983 'move' call_tmp[673980](361027 call numEntries _mt[243] this[159002]))
        unknown call_tmp[673987] "maybe param" "maybe type" "temp"
        (673990 'move' call_tmp[673987](158589 call(158585 call (partial) read _mt[243] call_tmp[673980])))
        unknown entries[158590] "dead at end of block" "insert auto destroy"
        (544085 'init var' entries[158590] call_tmp[673987])
        (158593 'end of statement')
        unknown call_tmp[673992] "expr temp" "maybe param" "maybe type" "temp"
        (673995 'move' call_tmp[673992](158597 call < entries[158590] numKeys[158578]))
        unknown call_tmp[673997] "expr temp" "maybe param" "maybe type" "temp"
        (674000 'move' call_tmp[673997](158662 call _cond_test call_tmp[673992]))
        if call_tmp[673997]
        {
          (158601 call(387001 call (partial) lockTable _mt[243] this[159002]))
          (482322 'end of statement')
          Defer
          {
            {
              (158606 call(387005 call (partial) unlockTable _mt[243] this[159002]))
            }
          }
          unknown call_tmp[674008] "expr temp" "maybe param" "maybe type" "temp"
          (674011 'move' call_tmp[674008](361032 call table _mt[243] this[159002]))
          (158617 call(158612 call (partial) requestCapacity _mt[243] call_tmp[674008]) numKeys[158578])
        }
        {
          (158659 call warning "Requested capacity (" numKeys[158578] ") " "is less than current size (" entries[158590] ")")
          (482325 'end of statement' entries[158590])
        }
      }
      (935313 return _void[55])
    }
    {
    }
    (521114 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).dsiSorted[158684](arg _mt[159008]:_MT[238], arg this[159006]:DefaultAssociativeDom[158900](?), arg comparator[158682]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521118] "RVV" "temp"
    unknown tableCopy[158725] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter8[582984](arg iterator[582986]:_any[178](?), arg this[583022]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583033] "RVV" "temp"
      {
        unknown _indexOfInterest[582991] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582992] "expr temp" "temp"
        (583001 'move' _iterator[582992](582999 call _getIterator iterator[582986]))
        Defer
        {
          {
            (583015 call _freeIterator _iterator[582992])
          }
        }
        { scopeless type
          (583006 'move' _indexOfInterest[582991](583003 call iteratorIndex _iterator[582992]))
        }
        ForLoop[582993] for-expr
        {
          unknown slot[158723] "index var" "insert auto destroy" "no doc"
          (583026 'end of statement')
          (583010 'move' slot[158723] _indexOfInterest[582991])
          (583027 'end of statement' slot[158723])
          {
            {
              unknown yret[583037] "YVV" "temp"
              unknown call_tmp[583046] "expr temp" "maybe param" "maybe type" "temp"
              (583049 'move' call_tmp[583046](361042 call table _mt[243] this[583022]))
              unknown call_tmp[583053] "expr temp" "maybe param" "maybe type" "temp"
              (583056 'move' call_tmp[583053](158717 call(158712 call (partial) table _mt[243] call_tmp[583046]) slot[158723]))
              unknown call_tmp[583060] "expr temp" "maybe param" "maybe type" "temp"
              (583063 'move' call_tmp[583060](158718 call key _mt[243] call_tmp[583053]))
              (583040 'move' yret[583037](583039 'deref' call_tmp[583060]))
              (583042 yield yret[583037])
              (583029 'end of statement' slot[158723])
            }
          }
          label _continueLabel[582996]
          _indexOfInterest[582991]
          _iterator[582992]
        }
        label _breakLabel[582997]
      }
      (583035 return ret[583033])
    }
    function chpl__forexpr8[582964](arg iterExpr[582967]:_any[178](?), arg this[582971]:DefaultAssociativeDom[158900](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583068] "RVV" "temp"
      unknown _iterator[582974] "expr temp" "maybe ref" "temp"
      (582976 'move' _iterator[582974] iterExpr[582967])
      unknown call_tmp[583075] "expr temp" "maybe param" "maybe type" "temp"
      (583078 'move' call_tmp[583075](582979 call chpl__loopexpr_iter8 _iterator[582974] this[582971]))
      (583073 'move' ret[583068](583072 'deref' call_tmp[583075]))
      (583070 return ret[583068])
    }
    unknown call_tmp[583082] "expr temp" "maybe param" "maybe type" "temp"
    (583085 'move' call_tmp[583082](158710 call(387018 call (partial) _fullSlots _mt[243] this[159006])))
    unknown call_tmp[583087] "maybe param" "maybe type" "temp"
    (583090 'move' call_tmp[583087](582969 call chpl__forexpr8 call_tmp[583082] this[159006]))
    (583094 'iterator record set shape' call_tmp[583087] call_tmp[583082] 1)
    unknown call_tmp[674015] "expr temp" "maybe param" "maybe type" "temp"
    (674018 'move' call_tmp[674015](158691 call chpl_build_low_bounded_range 0))
    unknown call_tmp[674022] "expr temp" "maybe param" "maybe type" "temp"
    (674025 'move' call_tmp[674022](361037 call numEntries _mt[243] this[159006]))
    unknown call_tmp[674029] "expr temp" "maybe param" "maybe type" "temp"
    (674032 'move' call_tmp[674029](158698 call(158694 call (partial) read _mt[243] call_tmp[674022])))
    unknown call_tmp[674034] "expr temp" "maybe param" "maybe type" "temp"
    (674037 'move' call_tmp[674034](158699 call # call_tmp[674015] call_tmp[674029]))
    unknown call_tmp[674039] "expr temp" "maybe param" "maybe type" "temp"
    (674042 'move' call_tmp[674039](158703 call chpl__ensureDomainExpr call_tmp[674034]))
    unknown call_tmp[674046] "expr temp" "maybe param" "maybe type" "temp"
    (674049 'move' call_tmp[674046](387013 call idxType _mt[243] this[159006]))
    unknown call_tmp[674051] "maybe param" "maybe type" "temp"
    (674054 'move' call_tmp[674051](158705 call chpl__buildArrayRuntimeType call_tmp[674039] call_tmp[674046]))
    (544087 'init var' tableCopy[158725] call_tmp[583087] call_tmp[674051])
    (158728 'end of statement')
    (158734 call sort tableCopy[158725](comparator = comparator[158682]))
    (482327 'end of statement' tableCopy[158725])
    {
      unknown _indexOfInterest[158741] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158742] "expr temp" "temp"
      (158751 'move' _iterator[158742](158749 call _getIterator tableCopy[158725]))
      Defer
      {
        {
          (158767 call _freeIterator _iterator[158742])
        }
      }
      { scopeless type
        (158756 'move' _indexOfInterest[158741](158753 call iteratorIndex _iterator[158742]))
      }
      ForLoop[158743]
      {
        unknown ind[158760] "index var" "insert auto destroy"
        (482330 'end of statement')
        (158762 'move' ind[158760] _indexOfInterest[158741])
        (482331 'end of statement' ind[158760])
        unknown yret[521122] "YVV" "temp"
        (521125 'move' yret[521122](521124 'deref' ind[158760]))
        (521127 yield yret[521122])
        (482333 'end of statement' ind[158760])
        label _continueLabel[158746]
        _indexOfInterest[158741]
        _iterator[158742]
      }
      label _breakLabel[158747]
    }
    (521120 return ret[521118])
    (355197 'used modules list'(158687 'use' Sort[267987]))
  }
  function DefaultAssociativeDom[158900](?)._fullSlots[158778](arg _mt[159012]:_MT[238], arg this[159010]:DefaultAssociativeDom[158900](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521131] "RVV" "temp"
    {
      unknown _indexOfInterest[158805] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158806] "expr temp" "temp"
      unknown call_tmp[674058] "expr temp" "maybe param" "maybe type" "temp"
      (674061 'move' call_tmp[674058](361047 call table _mt[243] this[159010]))
      unknown call_tmp[674065] "expr temp" "maybe param" "maybe type" "temp"
      (674068 'move' call_tmp[674065](158786 call(158782 call (partial) allSlots _mt[243] call_tmp[674058])))
      (158815 'move' _iterator[158806](158813 call _getIterator call_tmp[674065]))
      Defer
      {
        {
          (158832 call _freeIterator _iterator[158806])
        }
      }
      { scopeless type
        (158821 'move' _indexOfInterest[158805](158818 call iteratorIndex _iterator[158806]))
      }
      ForLoop[158807]
      {
        unknown slot[158825] "index var" "insert auto destroy"
        (482336 'end of statement')
        (158827 'move' slot[158825] _indexOfInterest[158805])
        (482337 'end of statement' slot[158825])
        {
          unknown call_tmp[674072] "expr temp" "maybe param" "maybe type" "temp"
          (674075 'move' call_tmp[674072](361052 call table _mt[243] this[159010]))
          unknown call_tmp[674079] "expr temp" "maybe param" "maybe type" "temp"
          (674082 'move' call_tmp[674079](158795 call(158790 call (partial) isSlotFull _mt[243] call_tmp[674072]) slot[158825]))
          unknown call_tmp[674084] "expr temp" "maybe param" "maybe type" "temp"
          (674087 'move' call_tmp[674084](158800 call _cond_test call_tmp[674079]))
          if call_tmp[674084]
          {
            unknown yret[521135] "YVV" "temp"
            (521138 'move' yret[521135](521137 'deref' slot[158825]))
            (521140 yield yret[521135])
            (482339 'end of statement' slot[158825])
          }
        }
        label _continueLabel[158810]
        _indexOfInterest[158805]
        _iterator[158806]
      }
      label _breakLabel[158811]
    }
    (521133 return ret[521131])
  }
  function DefaultAssociativeDom[158900](?).dsiHasSingleLocalSubdomain[158844](arg _mt[159016]:_MT[238], arg this[159014]:DefaultAssociativeDom[158900](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521144] "RVV" "param" "temp"
    (521149 'move' ret[521144](521148 'deref' 1))
    (521146 return ret[521144])
  }
  function DefaultAssociativeDom[158900](?).dsiLocalSubdomain[158858](arg _mt[159020]:_MT[238], arg this[159018]:DefaultAssociativeDom[158900](?), arg loc[158855]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521153] "RVV" "temp"
    unknown call_tmp[674089] "expr temp" "maybe param" "maybe type" "temp"
    (674092 'move' call_tmp[674089](158861 '_wide_get_locale' this[159018]))
    unknown call_tmp[674094] "expr temp" "maybe param" "maybe type" "temp"
    (674097 'move' call_tmp[674094](158862 call chpl_localeID_to_locale call_tmp[674089]))
    unknown call_tmp[674099] "expr temp" "maybe param" "maybe type" "temp"
    (674102 'move' call_tmp[674099](158865 call == call_tmp[674094] loc[158855]))
    unknown call_tmp[674104] "expr temp" "maybe param" "maybe type" "temp"
    (674107 'move' call_tmp[674104](158892 call _cond_test call_tmp[674099]))
    if call_tmp[674104]
    {
      unknown call_tmp[674109] "expr temp" "maybe param" "maybe type" "temp"
      (674112 'move' call_tmp[674109](158871 call _to_unmanaged this[159018]))
      unknown call_tmp[674114] "expr temp" "maybe param" "maybe type" "temp"
      (674117 'move' call_tmp[674114](158873 call _getDomain call_tmp[674109]))
      (521158 'move' ret[521153](521157 'deref' call_tmp[674114]))
      gotoReturn _end_dsiLocalSubdomain[521151] _end_dsiLocalSubdomain[521151]
    }
    {
      unknown a[158884] "dead at end of block" "insert auto destroy"
      unknown call_tmp[674121] "expr temp" "maybe param" "maybe type" "temp"
      (674124 'move' call_tmp[674121](387033 call idxType _mt[243] this[159018]))
      unknown call_tmp[674128] "expr temp" "maybe param" "maybe type" "temp"
      (674131 'move' call_tmp[674128](387038 call parSafe _mt[243] this[159018]))
      unknown call_tmp[674133] "expr temp" "maybe param" "maybe type" "temp"
      (674136 'move' call_tmp[674133](158882 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[674121](parSafe = call_tmp[674128])))
      (544089 'default init var' a[158884] call_tmp[674133])
      (158887 'end of statement')
      (521163 'move' ret[521153](521162 'deref' a[158884]))
      gotoReturn _end_dsiLocalSubdomain[521151] _end_dsiLocalSubdomain[521151]
      (482343 'end of statement' a[158884])
    }
    label _end_dsiLocalSubdomain[521151]
    (521155 return ret[521153])
  }
  function DefaultAssociativeDom[158900](?).super[810458](arg _mt[810460]:_MT[238], arg this[810462]:DefaultAssociativeDom[158900](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810472] "RVV" "temp"
    unknown call_tmp[810479] "expr temp" "maybe param" "maybe type" "temp"
    (810482 'move' call_tmp[810479](810466 '.v' this[810462] c"super"))
    (810477 'move' ret[810472](810476 'deref' call_tmp[810479]))
    (810474 return ret[810472])
  }
  function DefaultAssociativeDom[810489](?).idxType[810484](arg _mt[810486]:_MT[238], arg this[810491]:DefaultAssociativeDom[810489](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810526] "RVV" "temp" "type variable"
    unknown borrowOfThis[810493]
    (810518 'end of statement')
    (810495 'move' borrowOfThis[810493](810498 call _cast _borrowedNonNilable[214](?) this[810491]))
    (810519 'end of statement' borrowOfThis[810493])
    unknown call_tmp[810540] "expr temp" "maybe param" "maybe type" "temp"
    (810543 'move' call_tmp[810540](810508 'is bound' borrowOfThis[810493] c"idxType"))
    if call_tmp[810540]
    {
      unknown call_tmp[810545] "expr temp" "maybe param" "maybe type" "temp"
      (810548 'move' call_tmp[810545](810503 '.v' borrowOfThis[810493] c"idxType"))
      unknown call_tmp[810550] "expr temp" "maybe param" "maybe type" "temp"
      (810553 'move' call_tmp[810550](810504 call chpl_checkLegalTypeFieldAccessor this[810491] call_tmp[810545] "idxType"))
      (810531 'move' ret[810526](810530 'deref' call_tmp[810550]))
      gotoReturn _end_idxType[810524] _end_idxType[810524]
      (810521 'end of statement' borrowOfThis[810493])
    }
    {
      (810536 'move' ret[810526](810535 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810524] _end_idxType[810524]
    }
    label _end_idxType[810524]
    (810528 return ret[810526])
  }
  function DefaultAssociativeDom[810489](?).idxType[810555](arg _mt[810557]:_MT[238], arg this[810559]:DefaultAssociativeDom[810489](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810594] "RVV" "temp" "type variable"
    unknown borrowOfThis[810561] "type variable"
    (810586 'end of statement')
    (810563 'move' borrowOfThis[810561](810566 call _cast _borrowedNonNilable[214](?) this[810559]))
    (810587 'end of statement' borrowOfThis[810561])
    unknown call_tmp[810608] "expr temp" "maybe param" "maybe type" "temp"
    (810611 'move' call_tmp[810608](810576 'is bound' borrowOfThis[810561] c"idxType"))
    if call_tmp[810608]
    {
      unknown call_tmp[810613] "expr temp" "maybe param" "maybe type" "temp"
      (810616 'move' call_tmp[810613](810571 '.v' borrowOfThis[810561] c"idxType"))
      unknown call_tmp[810618] "expr temp" "maybe param" "maybe type" "temp"
      (810621 'move' call_tmp[810618](810572 call chpl_checkLegalTypeFieldAccessor this[810559] call_tmp[810613] "idxType"))
      (810599 'move' ret[810594](810598 'deref' call_tmp[810618]))
      gotoReturn _end_idxType[810592] _end_idxType[810592]
      (810589 'end of statement' borrowOfThis[810561])
    }
    {
      (810604 'move' ret[810594](810603 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810592] _end_idxType[810592]
    }
    label _end_idxType[810592]
    (810596 return ret[810594])
  }
  function DefaultAssociativeDom[810489](?).parSafe[810623](arg _mt[810625]:_MT[238], arg this[810627]:DefaultAssociativeDom[810489](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810658] "RVV" "param" "temp"
    unknown borrowOfThis[810629]
    (810650 'end of statement')
    (810631 'move' borrowOfThis[810629](810634 call _cast _borrowedNonNilable[214](?) this[810627]))
    (810651 'end of statement' borrowOfThis[810629])
    unknown call_tmp[810672] "expr temp" "maybe param" "maybe type" "temp"
    (810675 'move' call_tmp[810672](810640 'is bound' borrowOfThis[810629] c"parSafe"))
    if call_tmp[810672]
    {
      unknown call_tmp[810677] "expr temp" "maybe param" "maybe type" "temp"
      (810680 'move' call_tmp[810677](810639 '.' borrowOfThis[810629] c"parSafe"))
      (810663 'move' ret[810658](810662 'deref' call_tmp[810677]))
      gotoReturn _end_parSafe[810656] _end_parSafe[810656]
      (810653 'end of statement' borrowOfThis[810629])
    }
    {
      (810668 'move' ret[810658](810667 'deref' ?[260]))
      gotoReturn _end_parSafe[810656] _end_parSafe[810656]
    }
    label _end_parSafe[810656]
    (810660 return ret[810658])
  }
  function DefaultAssociativeDom[810489](?).parSafe[810682](arg _mt[810684]:_MT[238], arg this[810686]:DefaultAssociativeDom[810489](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810717] "RVV" "param" "temp"
    unknown borrowOfThis[810688] "type variable"
    (810709 'end of statement')
    (810690 'move' borrowOfThis[810688](810693 call _cast _borrowedNonNilable[214](?) this[810686]))
    (810710 'end of statement' borrowOfThis[810688])
    unknown call_tmp[810731] "expr temp" "maybe param" "maybe type" "temp"
    (810734 'move' call_tmp[810731](810699 'is bound' borrowOfThis[810688] c"parSafe"))
    if call_tmp[810731]
    {
      unknown call_tmp[810736] "expr temp" "maybe param" "maybe type" "temp"
      (810739 'move' call_tmp[810736](810698 '.' borrowOfThis[810688] c"parSafe"))
      (810722 'move' ret[810717](810721 'deref' call_tmp[810736]))
      gotoReturn _end_parSafe[810715] _end_parSafe[810715]
      (810712 'end of statement' borrowOfThis[810688])
    }
    {
      (810727 'move' ret[810717](810726 'deref' ?[260]))
      gotoReturn _end_parSafe[810715] _end_parSafe[810715]
    }
    label _end_parSafe[810715]
    (810719 return ret[810717])
  }
  function DefaultAssociativeDom[158900](?).dist[810741](arg _mt[810743]:_MT[238], arg this[810745]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810755] "RVV" "temp"
    unknown call_tmp[810762] "expr temp" "maybe param" "maybe type" "temp"
    (810765 'move' call_tmp[810762](810749 '.' this[810745] c"dist"))
    (810760 'move' ret[810755](810759 'addr of' call_tmp[810762]))
    (810757 return ret[810755])
  }
  function DefaultAssociativeDom[158900](?).numEntries[810767](arg _mt[810769]:_MT[238], arg this[810771]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810781] "RVV" "temp"
    unknown call_tmp[810788] "expr temp" "maybe param" "maybe type" "temp"
    (810791 'move' call_tmp[810788](810775 '.' this[810771] c"numEntries"))
    (810786 'move' ret[810781](810785 'addr of' call_tmp[810788]))
    (810783 return ret[810781])
  }
  function DefaultAssociativeDom[158900](?).tableLock[810793](arg _mt[810795]:_MT[238], arg this[810797]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810807] "RVV" "temp"
    unknown call_tmp[810814] "expr temp" "maybe param" "maybe type" "temp"
    (810817 'move' call_tmp[810814](810801 '.' this[810797] c"tableLock"))
    (810812 'move' ret[810807](810811 'addr of' call_tmp[810814]))
    (810809 return ret[810807])
  }
  function DefaultAssociativeDom[158900](?).table[810819](arg _mt[810821]:_MT[238], arg this[810823]:DefaultAssociativeDom[158900](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810833] "RVV" "temp"
    unknown call_tmp[810840] "expr temp" "maybe param" "maybe type" "temp"
    (810843 'move' call_tmp[810840](810827 '.' this[810823] c"table"))
    (810838 'move' ret[810833](810837 'addr of' call_tmp[810840]))
    (810835 return ret[810833])
  }
  function DefaultAssociativeDom[158900](?).writeThis[810845](arg _mt[810849]:_MT[238], arg this[810847]:DefaultAssociativeDom[158900](?), arg f[810848]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810854 call writeThisDefaultImpl f[810848] this[810847])
    (810859 return _void[55])
  }
  function DefaultAssociativeDom[158900](?).readThis[810861](arg _mt[810865]:_MT[238], arg this[810863]:DefaultAssociativeDom[158900](?), arg f[810864]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810869 call readThisDefaultImpl f[810864] this[810863])
    (810875 return _void[55])
  }
  type DefaultAssociativeDom[158900](?) val super[355728]:BaseAssociativeDom[148855] "super class" unknown idxType[156534] "type variable" unknown parSafe[156538] "param" bool[10] val dist[156544]:unmanaged DefaultDist[415482] unmanaged DefaultDist[415482] unknown numEntries[156552](156551 call chpl__processorAtomicType int(64)[13]) unknown tableLock[156562](156559 IfExpr  parSafe[156538] then
  { scopeless
    chpl_LocalSpinlock[187432]
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156571](156570 call chpl__hashtable[204564](?) idxType[156534] nothing[7])
  type DefaultAssociativeDom[810489](?)
  type unmanaged DefaultAssociativeDom[415509](?)
  type DefaultAssociativeDom[378066](?)
  function DefaultAssociativeArr[161464](?).init[159075](arg _mt[161468]:_MT[238], arg this[161466]:DefaultAssociativeArr[161464](?), arg eltType[159073]:_any[178](?), arg idxType[159077]:_any[178](?), param arg parSafeDom[159079]:_any[178](?), arg dom[159088] :
  (159086 call unmanaged DefaultAssociativeDom[415509](?) idxType[159077](parSafe = parSafeDom[159079])), param arg initElts[159091]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462087] "temporary of super field" "temp"
    (462089 'move' super_tmp[462087](462086 '.v' this[161466] c"super"))
    (159100 call(159094 call (partial) init _mt[243] super_tmp[462087])(eltType = eltType[159073]))
    (482345 'end of statement')
    unknown tmp[462092] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492486] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[674140] "expr temp" "maybe param" "maybe type" "temp"
      (674143 'move' call_tmp[674140](462094 '.v' this[161466] c"super"))
      (492490 'move' call_type_tmp[492486](462097 'typeof' call_tmp[674140]))
    }
    (462098 'move' tmp[462092] call_type_tmp[492486])
    unknown call_tmp[674145] "maybe param" "maybe type" "temp"
    (674148 'move' call_tmp[674145](462103 'cast' tmp[462092] this[161466]))
    unknown chpl__thisAsParent[462100] "dead at end of block" "insert auto destroy" "temp"
    (544091 'init var' chpl__thisAsParent[462100] call_tmp[674145] tmp[462092])
    (462106 'setcid' chpl__thisAsParent[462100])
    (482346 'end of statement')
    unknown tmp[462108] "temp" "type variable"
    (462110 'move' tmp[462108] idxType[159077])
    (462112 'init field' this[161466] c"idxType" tmp[462108])
    unknown call_tmp[674150] "expr temp" "maybe param" "maybe type" "temp"
    (674153 'move' call_tmp[674150](462117 call _cast bool[10] parSafeDom[159079]))
    (462119 'init field' this[161466] c"parSafeDom" call_tmp[674150])
    (482347 'end of statement')
    unknown call_tmp[674155] "expr temp" "maybe param" "maybe type" "temp"
    (674158 'move' call_tmp[674155](462135 '.v' this[161466] c"idxType"))
    unknown call_tmp[674160] "expr temp" "maybe param" "maybe type" "temp"
    (674163 'move' call_tmp[674160](462138 '.v' this[161466] c"parSafeDom"))
    unknown call_tmp[674165] "maybe param" "maybe type" "temp"
    (674168 'move' call_tmp[674165](462125 call unmanaged DefaultAssociativeDom[415509](?) call_tmp[674155](parSafe = call_tmp[674160])))
    unknown tmp[462122] "temp"
    (462129 'init var' tmp[462122] dom[159088] call_tmp[674165])
    (462131 'init field' this[161466] c"dom" tmp[462122])
    (482348 'end of statement')
    unknown call_tmp[674172] "expr temp" "maybe param" "maybe type" "temp"
    (674175 'move' call_tmp[674172](159130 call table _mt[243] dom[159088]))
    unknown call_tmp[674179] "maybe param" "maybe type" "temp"
    (674182 'move' call_tmp[674179](159135 call tableSize _mt[243] call_tmp[674172]))
    unknown tableSize[159138] "dead at end of block" "insert auto destroy"
    (544093 'init var' tableSize[159138] call_tmp[674179])
    (159141 'end of statement')
    val tmp[462141]:int(64)[13] "temp"
    (462144 'default init var' tmp[462141] int(64)[13])
    (462148 '.=' this[161466] c"dataSize" tmp[462141])
    (482349 'end of statement')
    unknown call_tmp[674186] "expr temp" "maybe param" "maybe type" "temp"
    (674189 'move' call_tmp[674186](159147 call table _mt[243] dom[159088]))
    unknown call_tmp[674193] "maybe param" "maybe type" "temp"
    (674196 'move' call_tmp[674193](159158 call(159152 call (partial) allocateData _mt[243] call_tmp[674186]) tableSize[159138] eltType[159073]))
    unknown call_tmp[674198] "expr temp" "maybe param" "maybe type" "temp"
    (674201 'move' call_tmp[674198](462163 '.v' this[161466] c"eltType"))
    unknown call_tmp[674203] "maybe param" "maybe type" "temp"
    (674206 'move' call_tmp[674203](462155 call _ddata[11696](?) call_tmp[674198]))
    unknown tmp[462152] "temp"
    (462157 'init var' tmp[462152] call_tmp[674193] call_tmp[674203])
    (462159 'init field' this[161466] c"data" tmp[462152])
    (482350 'end of statement' tableSize[159138])
    unknown call_tmp[674208] "expr temp" "maybe param" "maybe type" "temp"
    (674211 'move' call_tmp[674208](462177 '.v' this[161466] c"eltType"))
    unknown call_tmp[674213] "maybe param" "maybe type" "temp"
    (674216 'move' call_tmp[674213](462169 call _ddata[11696](?) call_tmp[674208]))
    unknown tmp[462166] "temp"
    (462171 'init var' tmp[462166] nil[44] call_tmp[674213])
    (462173 'init field' this[161466] c"tmpData" tmp[462166])
    (482352 'end of statement')
    unknown tmp[462180] "temp"
    (462182 'init var' tmp[462180] initElts[159091])
    (462184 '.=' this[161466] c"eltsNeedDeinit" tmp[462180])
    (482353 'end of statement')
    (462189 'setcid' this[161466])
    (482354 'end of statement')
    unknown call_tmp[674218] "expr temp" "maybe param" "maybe type" "temp"
    (674221 'move' call_tmp[674218](159326 call _cond_test initElts[159091]))
    if call_tmp[674218]
    {
      unknown call_tmp[674225] "expr temp" "maybe param" "maybe type" "temp"
      (674228 'move' call_tmp[674225](159192 call eltType _mt[243] this[161466]))
      unknown call_tmp[674230] "expr temp" "maybe param" "maybe type" "temp"
      (674233 'move' call_tmp[674230](159196 call isNonNilableClass call_tmp[674225]))
      unknown call_tmp[674235] "expr temp" "maybe param" "maybe type" "temp"
      (674238 'move' call_tmp[674235](159320 call _cond_test call_tmp[674230]))
      if call_tmp[674235]
      {
        unknown call_tmp[674240] "expr temp" "maybe param" "maybe type" "temp"
        (674243 'move' call_tmp[674240](159231 call + "Cannot default initialize associative array because" " element type "))
        unknown call_tmp[674245] "expr temp" "maybe param" "maybe type" "temp"
        (674248 'move' call_tmp[674245](159235 call _cast string[26] eltType[159073]))
        unknown call_tmp[674250] "expr temp" "maybe param" "maybe type" "temp"
        (674253 'move' call_tmp[674250](159237 call + call_tmp[674240] call_tmp[674245]))
        unknown call_tmp[674255] "maybe param" "maybe type" "temp"
        (674258 'move' call_tmp[674255](159256 call + call_tmp[674250] " is a non-nilable class"))
        unknown msg[159258] "dead at end of block" "param"
        (544095 'init var' msg[159258] call_tmp[674255])
        (159261 'end of statement')
        (159266 call compilerError msg[159258])
      }
      {
        unknown call_tmp[674262] "expr temp" "maybe param" "maybe type" "temp"
        (674265 'move' call_tmp[674262](159270 call eltType _mt[243] this[161466]))
        unknown call_tmp[674267] "expr temp" "maybe param" "maybe type" "temp"
        (674270 'move' call_tmp[674267](159274 call isDefaultInitializable call_tmp[674262]))
        unknown call_tmp[674272] "expr temp" "maybe param" "maybe type" "temp"
        (674275 'move' call_tmp[674272](159275 call ! call_tmp[674267]))
        unknown call_tmp[674277] "expr temp" "maybe param" "maybe type" "temp"
        (674280 'move' call_tmp[674277](159316 call _cond_test call_tmp[674272]))
        if call_tmp[674277]
        {
          unknown call_tmp[674282] "expr temp" "maybe param" "maybe type" "temp"
          (674285 'move' call_tmp[674282](159279 call + "Cannot default initialize associative array because" " element type "))
          unknown call_tmp[674287] "expr temp" "maybe param" "maybe type" "temp"
          (674290 'move' call_tmp[674287](159283 call _cast string[26] eltType[159073]))
          unknown call_tmp[674292] "expr temp" "maybe param" "maybe type" "temp"
          (674295 'move' call_tmp[674292](159285 call + call_tmp[674282] call_tmp[674287]))
          unknown call_tmp[674297] "maybe param" "maybe type" "temp"
          (674300 'move' call_tmp[674297](159304 call + call_tmp[674292] " cannot be default initialized"))
          unknown msg[159306] "dead at end of block" "param"
          (544097 'init var' msg[159306] call_tmp[674297])
          (159309 'end of statement')
          (159314 call compilerError msg[159306])
        }
      }
    }
    unknown call_tmp[674302] "expr temp" "maybe param" "maybe type" "temp"
    (674305 'move' call_tmp[674302](159502 call _cond_test initElts[159091]))
    if call_tmp[674302]
    {
      unknown call_tmp[674307] "maybe param" "maybe type" "temp"
      (674310 'move' call_tmp[674307](159335 call init_elts_method tableSize[159138] eltType[159073]))
      unknown initMethod[159336] "dead at end of block" "insert auto destroy"
      (544099 'init var' initMethod[159336] call_tmp[674307])
      (159339 'end of statement' tableSize[159138])
      {
        unknown tmp[159477] "expr temp" "maybe param" "maybe type" "temp"
        (159479 'move' tmp[159477] initMethod[159336])
        unknown call_tmp[674312] "expr temp" "maybe param" "maybe type" "temp"
        (674315 'move' call_tmp[674312](159481 call == tmp[159477] noInit[11146]))
        unknown call_tmp[674317] "expr temp" "maybe param" "maybe type" "temp"
        (674320 'move' call_tmp[674317](159484 call _cond_test call_tmp[674312]))
        if call_tmp[674317]
        {
        }
        {
          unknown call_tmp[674322] "expr temp" "maybe param" "maybe type" "temp"
          (674325 'move' call_tmp[674322](159487 call == tmp[159477] serialInit[11148]))
          unknown call_tmp[674327] "expr temp" "maybe param" "maybe type" "temp"
          (674330 'move' call_tmp[674327](159490 call _cond_test call_tmp[674322]))
          if call_tmp[674327]
          {
            {
              unknown _indexOfInterest[159388] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159389] "expr temp" "temp"
              unknown call_tmp[674334] "expr temp" "maybe param" "maybe type" "temp"
              (674337 'move' call_tmp[674334](159358 call table _mt[243] dom[159088]))
              unknown call_tmp[674341] "expr temp" "maybe param" "maybe type" "temp"
              (674344 'move' call_tmp[674341](159365 call(159361 call (partial) allSlots _mt[243] call_tmp[674334])))
              (159398 'move' _iterator[159389](159396 call _getIterator call_tmp[674341]))
              Defer
              {
                {
                  (159415 call _freeIterator _iterator[159389])
                }
              }
              { scopeless type
                (159404 'move' _indexOfInterest[159388](159401 call iteratorIndex _iterator[159389]))
              }
              ForLoop[159390]
              {
                unknown slot[159408] "index var" "insert auto destroy"
                (482359 'end of statement')
                (159410 'move' slot[159408] _indexOfInterest[159388])
                (482360 'end of statement' slot[159408])
                {
                  unknown call_tmp[674348] "expr temp" "maybe param" "maybe type" "temp"
                  (674351 'move' call_tmp[674348](159374 call(159369 call (partial) _isSlotFull _mt[243] dom[159088]) slot[159408]))
                  unknown call_tmp[674353] "expr temp" "maybe param" "maybe type" "temp"
                  (674356 'move' call_tmp[674353](159383 call _cond_test call_tmp[674348]))
                  if call_tmp[674353]
                  {
                    (159380 call(387073 call (partial) _doDefaultInitSlot _mt[243] this[161466]) slot[159408](inAdd = 0))
                    (482362 'end of statement' slot[159408])
                  }
                }
                label _continueLabel[159393]
                _indexOfInterest[159388]
                _iterator[159389]
              }
              label _breakLabel[159394]
            }
          }
          {
            unknown call_tmp[674360] "expr temp" "maybe param" "maybe type" "temp"
            (674363 'move' call_tmp[674360](159494 call == tmp[159477] parallelInit[11150]))
            unknown call_tmp[674365] "expr temp" "maybe param" "maybe type" "temp"
            (674368 'move' call_tmp[674365](159497 call _cond_test call_tmp[674360]))
            if call_tmp[674365]
            {
              unknown call_tmp[674372] "expr temp" "maybe param" "maybe type" "temp"
              (674375 'move' call_tmp[674372](159432 call table _mt[243] dom[159088]))
              unknown call_tmp[674379] "expr temp" "maybe param" "maybe type" "temp"
              (674382 'move' call_tmp[674379](159439 call(159435 call (partial) allSlots _mt[243] call_tmp[674372])))
              Forall {
                induction variables:
                  
                  unknown slot[159461] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[674379]
                shadow variables:
                other variables
                  forall body
                {
                  unknown call_tmp[674386] "expr temp" "maybe param" "maybe type" "temp"
                  (674389 'move' call_tmp[674386](159446 call(159441 call (partial) _isSlotFull _mt[243] dom[159088]) slot[159461]))
                  unknown call_tmp[674391] "expr temp" "maybe param" "maybe type" "temp"
                  (674394 'move' call_tmp[674391](159455 call _cond_test call_tmp[674386]))
                  if call_tmp[674391]
                  {
                    (159452 call(387079 call (partial) _doDefaultInitSlot _mt[243] this[161466]) slot[159461](inAdd = 0))
                    (482364 'end of statement' slot[159461])
                  }
                }
              }
            }
            {
              (159471 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
    (521167 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).deinit[159510](arg _mt[161472]:_MT[238], arg this[161470]:DefaultAssociativeArr[161464](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674400] "expr temp" "maybe param" "maybe type" "temp"
    (674403 'move' call_tmp[674400](387085 call data _mt[243] this[161470]))
    unknown call_tmp[674407] "expr temp" "maybe param" "maybe type" "temp"
    (674410 'move' call_tmp[674407](361080 call dom _mt[243] this[161470]))
    unknown call_tmp[674414] "expr temp" "maybe param" "maybe type" "temp"
    (674417 'move' call_tmp[674414](159516 call table _mt[243] call_tmp[674407]))
    unknown call_tmp[674421] "expr temp" "maybe param" "maybe type" "temp"
    (674424 'move' call_tmp[674421](159519 call tableSize _mt[243] call_tmp[674414]))
    (159522 call _ddata_free call_tmp[674400] call_tmp[674421])
    (521169 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiGetBaseDom[159529](arg _mt[161476]:_MT[238], arg this[161474]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521173] "RVV" "temp"
    unknown call_tmp[674428] "expr temp" "maybe param" "maybe type" "temp"
    (674431 'move' call_tmp[674428](387090 call dom _mt[243] this[161474]))
    (521178 'move' ret[521173](521177 'deref' call_tmp[674428]))
    (521175 return ret[521173])
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159543](arg _mt[161480]:_MT[238], arg this[161478]:DefaultAssociativeArr[161464](?), arg idx[159540] :
  (387095 call idxType _mt[243] this[161478])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521182] "RVV" "temp"
    unknown call_tmp[674437] "expr temp" "maybe param" "maybe type" "temp"
    (674440 'move' call_tmp[674437](361085 call dom _mt[243] this[161478]))
    unknown call_tmp[674444] "expr temp" "maybe param" "maybe type" "temp"
    (674447 'move' call_tmp[674444](159551 call table _mt[243] call_tmp[674437]))
    unknown call_tmp[674451] "maybe param" "maybe type" "temp"
    (674454 'move' call_tmp[674451](159559 call(159554 call (partial) findFullSlot _mt[243] call_tmp[674444]) idx[159540]))
    unknown tmp[159560] "dead at end of block" "insert auto destroy" "temp"
    (544101 'init var' tmp[159560] call_tmp[674451])
    (159567 call _check_tuple_var_decl tmp[159560] 2)
    (482369 'end of statement')
    unknown call_tmp[674456] "maybe param" "maybe type" "temp"
    (674459 'move' call_tmp[674456](159561 call tmp[159560] 0))
    unknown found[159545] "dead at end of block" "insert auto destroy"
    (544103 'init var' found[159545] call_tmp[674456])
    unknown call_tmp[674461] "maybe param" "maybe type" "temp"
    (674464 'move' call_tmp[674461](159564 call tmp[159560] 1))
    unknown slotNum[159547] "dead at end of block" "insert auto destroy"
    (544105 'init var' slotNum[159547] call_tmp[674461])
    (159572 'end of statement')
    unknown call_tmp[674466] "expr temp" "maybe param" "maybe type" "temp"
    (674469 'move' call_tmp[674466](159605 call _cond_test found[159545]))
    if call_tmp[674466]
    {
      unknown call_tmp[674473] "expr temp" "maybe param" "maybe type" "temp"
      (674476 'move' call_tmp[674473](159578 call(387102 call (partial) data _mt[243] this[161478]) slotNum[159547]))
      (521187 'move' ret[521182](521186 'addr of' call_tmp[674473]))
      gotoReturn _end_dsiAccess[521180] _end_dsiAccess[521180]
      (482370 'end of statement' slotNum[159547])
    }
    {
      (159602 call halt "array index out of bounds: " idx[159540])
    }
    label _end_dsiAccess[521180]
    (521184 return ret[521182])
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159617](arg _mt[161484]:_MT[238], arg this[161482]:DefaultAssociativeArr[161464](?), arg idx[159614] :
  (387109 call idxType _mt[243] this[161482])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521193] "RVV" "temp"
    unknown call_tmp[674482] "expr temp" "maybe param" "maybe type" "temp"
    (674485 'move' call_tmp[674482](361090 call dom _mt[243] this[161482]))
    unknown call_tmp[674489] "expr temp" "maybe param" "maybe type" "temp"
    (674492 'move' call_tmp[674489](159629 call table _mt[243] call_tmp[674482]))
    unknown call_tmp[674496] "maybe param" "maybe type" "temp"
    (674499 'move' call_tmp[674496](159637 call(159632 call (partial) findFullSlot _mt[243] call_tmp[674489]) idx[159614]))
    unknown tmp[159638] "dead at end of block" "insert auto destroy" "temp"
    (544107 'init var' tmp[159638] call_tmp[674496])
    (159645 call _check_tuple_var_decl tmp[159638] 2)
    (482373 'end of statement')
    unknown call_tmp[674501] "maybe param" "maybe type" "temp"
    (674504 'move' call_tmp[674501](159639 call tmp[159638] 0))
    unknown found[159623] "dead at end of block" "insert auto destroy"
    (544109 'init var' found[159623] call_tmp[674501])
    unknown call_tmp[674506] "maybe param" "maybe type" "temp"
    (674509 'move' call_tmp[674506](159642 call tmp[159638] 1))
    unknown slotNum[159625] "dead at end of block" "insert auto destroy"
    (544111 'init var' slotNum[159625] call_tmp[674506])
    (159650 'end of statement')
    unknown call_tmp[674511] "expr temp" "maybe param" "maybe type" "temp"
    (674514 'move' call_tmp[674511](159673 call _cond_test found[159623]))
    if call_tmp[674511]
    {
      unknown call_tmp[674518] "expr temp" "maybe param" "maybe type" "temp"
      (674521 'move' call_tmp[674518](159656 call(387121 call (partial) data _mt[243] this[161482]) slotNum[159625]))
      (521198 'move' ret[521193](521197 'deref' call_tmp[674518]))
      gotoReturn _end_dsiAccess[521191] _end_dsiAccess[521191]
      (482374 'end of statement' slotNum[159625])
    }
    {
      (159664 call halt "array index out of bounds: " idx[159614])
      (482376 'end of statement')
      unknown call_tmp[674525] "expr temp" "maybe param" "maybe type" "temp"
      (674528 'move' call_tmp[674525](159670 call(387128 call (partial) data _mt[243] this[161482]) 0))
      (521203 'move' ret[521193](521202 'deref' call_tmp[674525]))
      gotoReturn _end_dsiAccess[521191] _end_dsiAccess[521191]
    }
    label _end_dsiAccess[521191]
    (521195 return ret[521193])
  }
  where {
    unknown call_tmp[674532] "expr temp" "maybe param" "maybe type" "temp"
    (674535 'move' call_tmp[674532](387114 call eltType _mt[243] this[161482]))
    (159622 call shouldReturnRvalueByValue call_tmp[674532])
  }
  function DefaultAssociativeArr[161464](?).dsiAccess[159686](arg _mt[161488]:_MT[238], arg this[161486]:DefaultAssociativeArr[161464](?), arg idx[159683] :
  (387133 call idxType _mt[243] this[161486])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521209] "RVV" "temp"
    unknown call_tmp[674541] "expr temp" "maybe param" "maybe type" "temp"
    (674544 'move' call_tmp[674541](361095 call dom _mt[243] this[161486]))
    unknown call_tmp[674548] "expr temp" "maybe param" "maybe type" "temp"
    (674551 'move' call_tmp[674548](159698 call table _mt[243] call_tmp[674541]))
    unknown call_tmp[674555] "maybe param" "maybe type" "temp"
    (674558 'move' call_tmp[674555](159706 call(159701 call (partial) findFullSlot _mt[243] call_tmp[674548]) idx[159683]))
    unknown tmp[159707] "dead at end of block" "insert auto destroy" "temp"
    (544113 'init var' tmp[159707] call_tmp[674555])
    (159714 call _check_tuple_var_decl tmp[159707] 2)
    (482378 'end of statement')
    unknown call_tmp[674560] "maybe param" "maybe type" "temp"
    (674563 'move' call_tmp[674560](159708 call tmp[159707] 0))
    unknown found[159692] "dead at end of block" "insert auto destroy"
    (544115 'init var' found[159692] call_tmp[674560])
    unknown call_tmp[674565] "maybe param" "maybe type" "temp"
    (674568 'move' call_tmp[674565](159711 call tmp[159707] 1))
    unknown slotNum[159694] "dead at end of block" "insert auto destroy"
    (544117 'init var' slotNum[159694] call_tmp[674565])
    (159719 'end of statement')
    unknown call_tmp[674570] "expr temp" "maybe param" "maybe type" "temp"
    (674573 'move' call_tmp[674570](159742 call _cond_test found[159692]))
    if call_tmp[674570]
    {
      unknown call_tmp[674577] "expr temp" "maybe param" "maybe type" "temp"
      (674580 'move' call_tmp[674577](159725 call(387145 call (partial) data _mt[243] this[161486]) slotNum[159694]))
      (521214 'move' ret[521209](521213 'addr of' call_tmp[674577]))
      gotoReturn _end_dsiAccess[521207] _end_dsiAccess[521207]
      (482379 'end of statement' slotNum[159694])
    }
    {
      (159733 call halt "array index out of bounds: " idx[159683])
      (482381 'end of statement')
      unknown call_tmp[674584] "expr temp" "maybe param" "maybe type" "temp"
      (674587 'move' call_tmp[674584](159739 call(387152 call (partial) data _mt[243] this[161486]) 0))
      (521219 'move' ret[521209](521218 'addr of' call_tmp[674584]))
      gotoReturn _end_dsiAccess[521207] _end_dsiAccess[521207]
    }
    label _end_dsiAccess[521207]
    (521211 return ret[521209])
  }
  where {
    unknown call_tmp[674591] "expr temp" "maybe param" "maybe type" "temp"
    (674594 'move' call_tmp[674591](387138 call eltType _mt[243] this[161486]))
    (159691 call shouldReturnRvalueByConstRef call_tmp[674591])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159753](arg _mt[161492]:_MT[238], arg this[161490]:DefaultAssociativeArr[161464](?), arg i[159751]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521225] "RVV" "temp"
    unknown call_tmp[674598] "expr temp" "maybe param" "maybe type" "temp"
    (674601 'move' call_tmp[674598](159758 call(387156 call (partial) dsiAccess _mt[243] this[161490]) i[159751]))
    (521230 'move' ret[521225](521229 'addr of' call_tmp[674598]))
    (521227 return ret[521225])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159768](arg _mt[161496]:_MT[238], arg this[161494]:DefaultAssociativeArr[161464](?), arg i[159766]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521234] "RVV" "temp"
    unknown call_tmp[674605] "expr temp" "maybe param" "maybe type" "temp"
    (674608 'move' call_tmp[674605](159777 call(387166 call (partial) dsiAccess _mt[243] this[161494]) i[159766]))
    (521239 'move' ret[521234](521238 'deref' call_tmp[674605]))
    (521236 return ret[521234])
  }
  where {
    unknown call_tmp[674612] "expr temp" "maybe param" "maybe type" "temp"
    (674615 'move' call_tmp[674612](387162 call eltType _mt[243] this[161494]))
    (159773 call shouldReturnRvalueByValue call_tmp[674612])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalAccess[159788](arg _mt[161500]:_MT[238], arg this[161498]:DefaultAssociativeArr[161464](?), arg i[159786]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521243] "RVV" "temp"
    unknown call_tmp[674619] "expr temp" "maybe param" "maybe type" "temp"
    (674622 'move' call_tmp[674619](159797 call(387176 call (partial) dsiAccess _mt[243] this[161498]) i[159786]))
    (521248 'move' ret[521243](521247 'addr of' call_tmp[674619]))
    (521245 return ret[521243])
  }
  where {
    unknown call_tmp[674626] "expr temp" "maybe param" "maybe type" "temp"
    (674629 'move' call_tmp[674626](387172 call eltType _mt[243] this[161498]))
    (159793 call shouldReturnRvalueByConstRef call_tmp[674626])
  }
  function DefaultAssociativeArr[161464](?).these[159806](arg _mt[161504]:_MT[238], arg this[161502]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521252] "RVV" "temp"
    {
      unknown _indexOfInterest[159837] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159838] "expr temp" "temp"
      unknown call_tmp[674633] "expr temp" "maybe param" "maybe type" "temp"
      (674636 'move' call_tmp[674633](361100 call dom _mt[243] this[161502]))
      unknown call_tmp[674640] "expr temp" "maybe param" "maybe type" "temp"
      (674643 'move' call_tmp[674640](159810 call table _mt[243] call_tmp[674633]))
      unknown call_tmp[674647] "expr temp" "maybe param" "maybe type" "temp"
      (674650 'move' call_tmp[674647](159817 call(159813 call (partial) allSlots _mt[243] call_tmp[674640])))
      (159847 'move' _iterator[159838](159845 call _getIterator call_tmp[674647]))
      Defer
      {
        {
          (159864 call _freeIterator _iterator[159838])
        }
      }
      { scopeless type
        (159853 'move' _indexOfInterest[159837](159850 call iteratorIndex _iterator[159838]))
      }
      ForLoop[159839]
      {
        unknown slot[159857] "index var" "insert auto destroy"
        (482387 'end of statement')
        (159859 'move' slot[159857] _indexOfInterest[159837])
        (482388 'end of statement' slot[159857])
        {
          unknown call_tmp[674654] "expr temp" "maybe param" "maybe type" "temp"
          (674657 'move' call_tmp[674654](361105 call dom _mt[243] this[161502]))
          unknown call_tmp[674661] "expr temp" "maybe param" "maybe type" "temp"
          (674664 'move' call_tmp[674661](159824 call(159819 call (partial) _isSlotFull _mt[243] call_tmp[674654]) slot[159857]))
          unknown call_tmp[674666] "expr temp" "maybe param" "maybe type" "temp"
          (674669 'move' call_tmp[674666](159832 call _cond_test call_tmp[674661]))
          if call_tmp[674666]
          {
            unknown yret[521256] "YVV" "temp"
            unknown call_tmp[674673] "expr temp" "maybe param" "maybe type" "temp"
            (674676 'move' call_tmp[674673](159828 call(387183 call (partial) data _mt[243] this[161502]) slot[159857]))
            (521259 'move' yret[521256](521258 'addr of' call_tmp[674673]))
            (521261 yield yret[521256])
            (482390 'end of statement' slot[159857])
          }
        }
        label _continueLabel[159842]
        _indexOfInterest[159837]
        _iterator[159838]
      }
      label _breakLabel[159843]
    }
    (521254 return ret[521252])
  }
  function DefaultAssociativeArr[161464](?).these[159880](arg _mt[161508]:_MT[238], arg this[161506]:DefaultAssociativeArr[161464](?), param arg tag[159877]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521265] "RVV" "temp"
    unknown call_tmp[674678] "expr temp" "maybe param" "maybe type" "temp"
    (674681 'move' call_tmp[674678](159912 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[674678]
    {
      (159909 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159948] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159949] "expr temp" "temp"
      unknown call_tmp[674685] "expr temp" "maybe param" "maybe type" "temp"
      (674688 'move' call_tmp[674685](361111 call dom _mt[243] this[161506]))
      unknown call_tmp[674692] "expr temp" "maybe param" "maybe type" "temp"
      (674695 'move' call_tmp[674692](159919 call table _mt[243] call_tmp[674685]))
      unknown call_tmp[674699] "expr temp" "maybe param" "maybe type" "temp"
      (674702 'move' call_tmp[674699](159928 call(159922 call (partial) allSlots _mt[243] call_tmp[674692])(tag = tag[159877])))
      (159958 'move' _iterator[159949](159956 call _getIterator call_tmp[674699]))
      Defer
      {
        {
          (159975 call _freeIterator _iterator[159949])
        }
      }
      { scopeless type
        (159964 'move' _indexOfInterest[159948](159961 call iteratorIndex _iterator[159949]))
      }
      ForLoop[159950]
      {
        unknown slot[159968] "index var" "insert auto destroy"
        (482394 'end of statement')
        (159970 'move' slot[159968] _indexOfInterest[159948])
        (482395 'end of statement' slot[159968])
        {
          unknown call_tmp[674706] "expr temp" "maybe param" "maybe type" "temp"
          (674709 'move' call_tmp[674706](361116 call dom _mt[243] this[161506]))
          unknown call_tmp[674713] "expr temp" "maybe param" "maybe type" "temp"
          (674716 'move' call_tmp[674713](159935 call(159930 call (partial) _isSlotFull _mt[243] call_tmp[674706]) slot[159968]))
          unknown call_tmp[674718] "expr temp" "maybe param" "maybe type" "temp"
          (674721 'move' call_tmp[674718](159943 call _cond_test call_tmp[674713]))
          if call_tmp[674718]
          {
            unknown yret[521269] "YVV" "temp"
            unknown call_tmp[674725] "expr temp" "maybe param" "maybe type" "temp"
            (674728 'move' call_tmp[674725](159939 call(387194 call (partial) data _mt[243] this[161506]) slot[159968]))
            (521272 'move' yret[521269](521271 'addr of' call_tmp[674725]))
            (521274 yield yret[521269])
            (482397 'end of statement' slot[159968])
          }
        }
        label _continueLabel[159953]
        _indexOfInterest[159948]
        _iterator[159949]
      }
      label _breakLabel[159954]
    }
    (521267 return ret[521265])
  }
  where {
    (159887 call == tag[159877] standalone[451])
  }
  function DefaultAssociativeArr[161464](?).these[159991](arg _mt[161512]:_MT[238], arg this[161510]:DefaultAssociativeArr[161464](?), param arg tag[159988]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521278] "RVV" "temp"
    {
      unknown _indexOfInterest[160011] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160012] "expr temp" "temp"
      unknown call_tmp[674732] "expr temp" "maybe param" "maybe type" "temp"
      (674735 'move' call_tmp[674732](361122 call dom _mt[243] this[161510]))
      unknown call_tmp[674739] "expr temp" "maybe param" "maybe type" "temp"
      (674742 'move' call_tmp[674739](160007 call(160002 call (partial) these _mt[243] call_tmp[674732]) tag[159988]))
      (160021 'move' _iterator[160012](160019 call _getIterator call_tmp[674739]))
      Defer
      {
        {
          (160038 call _freeIterator _iterator[160012])
        }
      }
      { scopeless type
        (160027 'move' _indexOfInterest[160011](160024 call iteratorIndex _iterator[160012]))
      }
      ForLoop[160013]
      {
        unknown followThis[160031] "index var" "insert auto destroy"
        (482400 'end of statement')
        (160033 'move' followThis[160031] _indexOfInterest[160011])
        (482401 'end of statement' followThis[160031])
        unknown yret[521282] "YVV" "temp"
        (521285 'move' yret[521282](521284 'deref' followThis[160031]))
        (521287 yield yret[521282])
        (482403 'end of statement' followThis[160031])
        label _continueLabel[160016]
        _indexOfInterest[160011]
        _iterator[160012]
      }
      label _breakLabel[160017]
    }
    (521280 return ret[521278])
  }
  where {
    (159998 call == tag[159988] leader[447])
  }
  function DefaultAssociativeArr[161464](?).these[160055](arg _mt[161516]:_MT[238], arg this[161514]:DefaultAssociativeArr[161464](?), param arg tag[160052]:iterKind[453], arg followThis[160057]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521291] "RVV" "temp"
    unknown tmp[160072] "dead at end of block" "insert auto destroy" "temp"
    (544119 'init var' tmp[160072] followThis[160057])
    (160079 call _check_tuple_var_decl tmp[160072] 2)
    (482405 'end of statement')
    unknown call_tmp[674744] "maybe param" "maybe type" "temp"
    (674747 'move' call_tmp[674744](160073 call tmp[160072] 0))
    unknown chunk[160066] "dead at end of block" "insert auto destroy"
    (544121 'init var' chunk[160066] call_tmp[674744])
    unknown call_tmp[674749] "maybe param" "maybe type" "temp"
    (674752 'move' call_tmp[674749](160076 call tmp[160072] 1))
    unknown followThisDom[160068] "dead at end of block" "insert auto destroy"
    (544123 'init var' followThisDom[160068] call_tmp[674749])
    (160084 'end of statement')
    unknown call_tmp[674754] "expr temp" "maybe param" "maybe type" "temp"
    (674757 'move' call_tmp[674754](160109 call _cond_test debugDefaultAssoc[156309]))
    if call_tmp[674754]
    {
      (160107 call writeln "In array follower code: Following " chunk[160066])
      (482406 'end of statement' chunk[160066])
    }
    unknown call_tmp[674761] "expr temp" "maybe param" "maybe type" "temp"
    (674764 'move' call_tmp[674761](160116 call dom _mt[243] this[161514]))
    unknown call_tmp[674766] "maybe param" "maybe type" "temp"
    (674769 'move' call_tmp[674766](160119 call == followThisDom[160068] call_tmp[674761]))
    const sameDom[160121] "dead at end of block" "const" "insert auto destroy"
    (544125 'init var' sameDom[160121] call_tmp[674766])
    (160124 'end of statement')
    unknown call_tmp[674771] "expr temp" "maybe param" "maybe type" "temp"
    (674774 'move' call_tmp[674771](160126 call ! sameDom[160121]))
    unknown call_tmp[674776] "expr temp" "maybe param" "maybe type" "temp"
    (674779 'move' call_tmp[674776](160167 call _cond_test call_tmp[674771]))
    if call_tmp[674776]
    {
      unknown call_tmp[674783] "expr temp" "maybe param" "maybe type" "temp"
      (674786 'move' call_tmp[674783](160129 call dsiNumIndices _mt[243] followThisDom[160068]))
      unknown call_tmp[674790] "expr temp" "maybe param" "maybe type" "temp"
      (674793 'move' call_tmp[674790](160133 call dom _mt[243] this[161514]))
      unknown call_tmp[674797] "expr temp" "maybe param" "maybe type" "temp"
      (674800 'move' call_tmp[674797](160136 call dsiNumIndices _mt[243] call_tmp[674790]))
      unknown call_tmp[674802] "expr temp" "maybe param" "maybe type" "temp"
      (674805 'move' call_tmp[674802](160139 call != call_tmp[674783] call_tmp[674797]))
      unknown call_tmp[674807] "expr temp" "maybe param" "maybe type" "temp"
      (674810 'move' call_tmp[674807](160162 call _cond_test call_tmp[674802]))
      if call_tmp[674807]
      {
        (160160 call halt "zippered associative array does not match the iterated domain")
      }
    }
    unknown call_tmp[674814] "expr temp" "maybe param" "maybe type" "temp"
    (674817 'move' call_tmp[674814](160173 call table _mt[243] followThisDom[160068]))
    unknown call_tmp[674821] "maybe param" "maybe type" "temp"
    (674824 'move' call_tmp[674821](160176 call table _mt[243] call_tmp[674814]))
    const otherTable[160179] "dead at end of block" "const" "insert auto destroy"
    (544127 'init var' otherTable[160179] call_tmp[674821])
    (160182 'end of statement' followThisDom[160068] followThisDom[160068])
    {
      unknown _indexOfInterest[160273] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160274] "expr temp" "temp"
      (160283 'move' _iterator[160274](160281 call _getIterator chunk[160066]))
      Defer
      {
        {
          (160299 call _freeIterator _iterator[160274])
        }
      }
      { scopeless type
        (160288 'move' _indexOfInterest[160273](160285 call iteratorIndex _iterator[160274]))
      }
      ForLoop[160275]
      {
        unknown slot[160292] "index var" "insert auto destroy"
        (482412 'end of statement')
        (160294 'move' slot[160292] _indexOfInterest[160273])
        (482413 'end of statement' slot[160292])
        {
          const aSlot[160189] "dead at end of block" "const" "ref var"
          unknown call_tmp[674826] "expr temp" "maybe param" "maybe type" "temp"
          (674829 'move' call_tmp[674826](160188 call otherTable[160179] slot[160292]))
          (544130 'move' aSlot[160189](544129 'addr of' call_tmp[674826]))
          (160192 'end of statement' otherTable[160179] slot[160292])
          unknown call_tmp[674833] "expr temp" "maybe param" "maybe type" "temp"
          (674836 'move' call_tmp[674833](160199 call(160195 call (partial) isFull _mt[243] aSlot[160189])))
          unknown call_tmp[674838] "expr temp" "maybe param" "maybe type" "temp"
          (674841 'move' call_tmp[674838](160269 call _cond_test call_tmp[674833]))
          if call_tmp[674838]
          {
            unknown idx[160201] "dead at end of block" "insert auto destroy"
            (544132 'init var' idx[160201] slot[160292])
            (160204 'end of statement' slot[160292])
            unknown call_tmp[674843] "expr temp" "maybe param" "maybe type" "temp"
            (674846 'move' call_tmp[674843](160207 call ! sameDom[160121]))
            unknown call_tmp[674848] "expr temp" "maybe param" "maybe type" "temp"
            (674851 'move' call_tmp[674848](160259 call _cond_test call_tmp[674843]))
            if call_tmp[674848]
            {
              unknown call_tmp[674855] "expr temp" "maybe param" "maybe type" "temp"
              (674858 'move' call_tmp[674855](361133 call dom _mt[243] this[161514]))
              unknown call_tmp[674862] "expr temp" "maybe param" "maybe type" "temp"
              (674865 'move' call_tmp[674862](160215 call table _mt[243] call_tmp[674855]))
              unknown call_tmp[674871] "expr temp" "maybe param" "maybe type" "temp"
              (674874 'move' call_tmp[674871](160222 call key _mt[243] aSlot[160189]))
              unknown call_tmp[674876] "maybe param" "maybe type" "temp"
              (674879 'move' call_tmp[674876](160226 call(160218 call (partial) findFullSlot _mt[243] call_tmp[674862]) call_tmp[674871]))
              const tmp[160227] "dead at end of block" "const" "insert auto destroy" "temp"
              (544134 'init var' tmp[160227] call_tmp[674876])
              (160234 call _check_tuple_var_decl tmp[160227] 2)
              (482418 'end of statement')
              unknown call_tmp[674881] "maybe param" "maybe type" "temp"
              (674884 'move' call_tmp[674881](160228 call tmp[160227] 0))
              const match[160209] "dead at end of block" "const" "insert auto destroy"
              (544136 'init var' match[160209] call_tmp[674881])
              unknown call_tmp[674886] "maybe param" "maybe type" "temp"
              (674889 'move' call_tmp[674886](160231 call tmp[160227] 1))
              const loc[160211] "dead at end of block" "const" "insert auto destroy"
              (544138 'init var' loc[160211] call_tmp[674886])
              (160239 'end of statement')
              unknown call_tmp[674891] "expr temp" "maybe param" "maybe type" "temp"
              (674894 'move' call_tmp[674891](160242 call ! match[160209]))
              unknown call_tmp[674896] "expr temp" "maybe param" "maybe type" "temp"
              (674899 'move' call_tmp[674896](160249 call _cond_test call_tmp[674891]))
              if call_tmp[674896]
              {
                (160247 call halt "zippered associative array does not match the iterated domain")
              }
              (160256 call = idx[160201] loc[160211])
              (482420 'end of statement' idx[160201] loc[160211])
            }
            unknown yret[521295] "YVV" "temp"
            unknown call_tmp[674903] "expr temp" "maybe param" "maybe type" "temp"
            (674906 'move' call_tmp[674903](160266 call(387219 call (partial) data _mt[243] this[161514]) idx[160201]))
            (521298 'move' yret[521295](521297 'addr of' call_tmp[674903]))
            (521300 yield yret[521295])
            (482423 'end of statement' idx[160201])
          }
        }
        label _continueLabel[160278]
        _indexOfInterest[160273]
        _iterator[160274]
      }
      label _breakLabel[160279]
    }
    (521293 return ret[521291])
  }
  where {
    (160064 call == tag[160052] follower[449])
  }
  function DefaultAssociativeArr[161464](?).dsiSerialReadWrite[160313](arg _mt[161520]:_MT[238], arg this[161518]:DefaultAssociativeArr[161464](?), arg f[160311]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674910] "maybe param" "maybe type" "temp"
    (674913 'move' call_tmp[674910](160320 call(160316 call (partial) binary _mt[243] f[160311])))
    unknown binary[160321] "dead at end of block" "insert auto destroy"
    (544140 'init var' binary[160321] call_tmp[674910])
    (160324 'end of statement')
    unknown call_tmp[674917] "maybe param" "maybe type" "temp"
    (674920 'move' call_tmp[674917](160332 call(160327 call (partial) styleElement _mt[243] f[160311]) QIO_STYLE_ELEMENT_ARRAY[19665]))
    unknown arrayStyle[160333] "dead at end of block" "insert auto destroy"
    (544142 'init var' arrayStyle[160333] call_tmp[674917])
    (160336 'end of statement')
    unknown tmp[427946] "maybe param" "temp"
    (427957 'move' tmp[427946](160339 call == arrayStyle[160333] QIO_ARRAY_FORMAT_SPACE[19695]))
    unknown call_tmp[674922] "expr temp" "maybe param" "maybe type" "temp"
    (674925 'move' call_tmp[674922](427959 call _cond_invalid tmp[427946]))
    if call_tmp[674922]
    {
      (427962 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[160346] "dead at end of block" "insert auto destroy"
    unknown tmp[569871] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569872] "maybe param" "temp"
    unknown call_tmp[674927] "expr temp" "maybe param" "maybe type" "temp"
    (674930 'move' call_tmp[674927](427947 call isTrue tmp[427946]))
    (569877 'move' tmp[569872](569875 call _cond_test call_tmp[674927]))
    if tmp[569872]
    {
      unknown tmp[569879] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674932] "expr temp" "maybe param" "maybe type" "temp"
      (674935 'move' call_tmp[674932](160342 call ! binary[160321]))
      (569881 'move' tmp[569879](427950 call isTrue call_tmp[674932]))
      (569886 'move' tmp[569871](569883 '_paramFoldLogical' tmp[569872] tmp[569879]))
    }
    {
      (569891 'move' tmp[569871](569888 '_paramFoldLogical' tmp[569872] 0))
    }
    (544144 'init var' isspace[160346] tmp[569871])
    (160349 'end of statement')
    unknown tmp[427967] "maybe param" "temp"
    (427978 'move' tmp[427967](160352 call == arrayStyle[160333] QIO_ARRAY_FORMAT_JSON[19705]))
    unknown call_tmp[674937] "expr temp" "maybe param" "maybe type" "temp"
    (674940 'move' call_tmp[674937](427980 call _cond_invalid tmp[427967]))
    if call_tmp[674937]
    {
      (427983 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[160359] "dead at end of block" "insert auto destroy"
    unknown tmp[569898] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569899] "maybe param" "temp"
    unknown call_tmp[674942] "expr temp" "maybe param" "maybe type" "temp"
    (674945 'move' call_tmp[674942](427968 call isTrue tmp[427967]))
    (569904 'move' tmp[569899](569902 call _cond_test call_tmp[674942]))
    if tmp[569899]
    {
      unknown tmp[569906] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674947] "expr temp" "maybe param" "maybe type" "temp"
      (674950 'move' call_tmp[674947](160355 call ! binary[160321]))
      (569908 'move' tmp[569906](427971 call isTrue call_tmp[674947]))
      (569913 'move' tmp[569898](569910 '_paramFoldLogical' tmp[569899] tmp[569906]))
    }
    {
      (569918 'move' tmp[569898](569915 '_paramFoldLogical' tmp[569899] 0))
    }
    (544146 'init var' isjson[160359] tmp[569898])
    (160362 'end of statement')
    unknown tmp[427988] "maybe param" "temp"
    (427999 'move' tmp[427988](160365 call == arrayStyle[160333] QIO_ARRAY_FORMAT_CHPL[19700]))
    unknown call_tmp[674952] "expr temp" "maybe param" "maybe type" "temp"
    (674955 'move' call_tmp[674952](428001 call _cond_invalid tmp[427988]))
    if call_tmp[674952]
    {
      (428004 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[160372] "dead at end of block" "insert auto destroy"
    unknown tmp[569925] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569926] "maybe param" "temp"
    unknown call_tmp[674957] "expr temp" "maybe param" "maybe type" "temp"
    (674960 'move' call_tmp[674957](427989 call isTrue tmp[427988]))
    (569931 'move' tmp[569926](569929 call _cond_test call_tmp[674957]))
    if tmp[569926]
    {
      unknown tmp[569933] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674962] "expr temp" "maybe param" "maybe type" "temp"
      (674965 'move' call_tmp[674962](160368 call ! binary[160321]))
      (569935 'move' tmp[569933](427992 call isTrue call_tmp[674962]))
      (569940 'move' tmp[569925](569937 '_paramFoldLogical' tmp[569926] tmp[569933]))
    }
    {
      (569945 'move' tmp[569925](569942 '_paramFoldLogical' tmp[569926] 0))
    }
    (544148 'init var' ischpl[160372] tmp[569925])
    (160375 'end of statement')
    unknown tmp[428009] "maybe param" "temp"
    unknown call_tmp[674969] "expr temp" "maybe param" "maybe type" "temp"
    (674972 'move' call_tmp[674969](160377 call writing _mt[243] f[160311]))
    (428020 'move' tmp[428009](160380 call ! call_tmp[674969]))
    unknown call_tmp[674974] "expr temp" "maybe param" "maybe type" "temp"
    (674977 'move' call_tmp[674974](428022 call _cond_invalid tmp[428009]))
    if call_tmp[674974]
    {
      (428025 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[569952] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569953] "maybe param" "temp"
    unknown call_tmp[674979] "expr temp" "maybe param" "maybe type" "temp"
    (674982 'move' call_tmp[674979](428010 call isTrue tmp[428009]))
    (569958 'move' tmp[569953](569956 call _cond_test call_tmp[674979]))
    if tmp[569953]
    {
      unknown tmp[569960] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569962 'move' tmp[569960](428013 call isTrue ischpl[160372]))
      (569967 'move' tmp[569952](569964 '_paramFoldLogical' tmp[569953] tmp[569960]))
    }
    {
      (569972 'move' tmp[569952](569969 '_paramFoldLogical' tmp[569953] 0))
    }
    unknown call_tmp[674984] "expr temp" "maybe param" "maybe type" "temp"
    (674987 'move' call_tmp[674984](160398 call _cond_test tmp[569952]))
    if call_tmp[674984]
    {
      (160393 call(160388 call (partial) readChapelStyleAssocArray _mt[243] this[161518]) f[160311])
      (482432 'end of statement')
      gotoReturn _end_dsiSerialReadWrite[521302] _end_dsiSerialReadWrite[521302]
    }
    unknown tmp[428030] "maybe param" "temp"
    (428041 'move' tmp[428030] isjson[160359])
    unknown call_tmp[674991] "expr temp" "maybe param" "maybe type" "temp"
    (674994 'move' call_tmp[674991](428043 call _cond_invalid tmp[428030]))
    if call_tmp[674991]
    {
      (428046 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569979] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569980] "maybe param" "temp"
    unknown call_tmp[674996] "expr temp" "maybe param" "maybe type" "temp"
    (674999 'move' call_tmp[674996](428031 call isTrue tmp[428030]))
    (569985 'move' tmp[569980](569983 call _cond_test call_tmp[674996]))
    if tmp[569980]
    {
      (569990 'move' tmp[569979](569987 '_paramFoldLogical' tmp[569980] 1))
    }
    {
      unknown tmp[569992] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569994 'move' tmp[569992](428035 call isTrue ischpl[160372]))
      (569999 'move' tmp[569979](569996 '_paramFoldLogical' tmp[569980] tmp[569992]))
    }
    unknown call_tmp[675001] "expr temp" "maybe param" "maybe type" "temp"
    (675004 'move' call_tmp[675001](160415 call _cond_test tmp[569979]))
    if call_tmp[675001]
    {
      unknown call_tmp[675006] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (675009 'move' call_tmp[675006](747978 'new' ioLiteral[238772] "["))
      (160412 call <~> f[160311] call_tmp[675006])
    }
    unknown first[160421] "dead at end of block" "insert auto destroy"
    (544150 'init var' first[160421] 1)
    (160424 'end of statement' binary[160321] binary[160321] binary[160321])
    {
      unknown _indexOfInterest[160531] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160532] "expr temp" "temp"
      unknown call_tmp[675013] "expr temp" "maybe param" "maybe type" "temp"
      (675016 'move' call_tmp[675013](160541 call dom _mt[243] this[161518]))
      unknown call_tmp[675018] "expr temp" "maybe param" "maybe type" "temp"
      (675021 'move' call_tmp[675018](160544 call _getIterator call_tmp[675013]))
      unknown call_tmp[675023] "expr temp" "maybe param" "maybe type" "temp"
      (675026 'move' call_tmp[675023](160548 call _getIterator this[161518]))
      (160550 'move' _iterator[160532](160436 call _build_tuple call_tmp[675018] call_tmp[675023]))
      Defer
      {
        {
          (160580 call _freeIterator _iterator[160532])
        }
      }
      { scopeless type
        (160555 'move' _indexOfInterest[160531](160552 call iteratorIndex _iterator[160532]))
      }
      ForLoop[160533]
      {
        (160560 call _check_tuple_var_decl _indexOfInterest[160531] 2)
        (482437 'end of statement')
        unknown key[160566] "index var" "insert auto destroy"
        (482438 'end of statement')
        (160568 'move' key[160566](160564 call _indexOfInterest[160531] 0))
        (482439 'end of statement' key[160566])
        unknown val[160573] "index var" "insert auto destroy"
        (482441 'end of statement')
        (160575 'move' val[160573](160571 call _indexOfInterest[160531] 1))
        (482442 'end of statement' val[160573])
        {
          unknown call_tmp[675028] "expr temp" "maybe param" "maybe type" "temp"
          (675031 'move' call_tmp[675028](160477 call _cond_test first[160421]))
          if call_tmp[675028]
          {
            (160440 call = first[160421] 0)
            (482444 'end of statement' first[160421])
          }
          {
            unknown call_tmp[675033] "expr temp" "maybe param" "maybe type" "temp"
            (675036 'move' call_tmp[675033](160471 call _cond_test isspace[160346]))
            if call_tmp[675033]
            {
              unknown call_tmp[675038] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
              (675041 'move' call_tmp[675038](747979 'new' ioLiteral[238772] " "))
              (160450 call <~> f[160311] call_tmp[675038])
            }
            {
              unknown tmp[428051] "maybe param" "temp"
              (428062 'move' tmp[428051] isjson[160359])
              unknown call_tmp[675043] "expr temp" "maybe param" "maybe type" "temp"
              (675046 'move' call_tmp[675043](428064 call _cond_invalid tmp[428051]))
              if call_tmp[675043]
              {
                (428067 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[570006] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[570007] "maybe param" "temp"
              unknown call_tmp[675048] "expr temp" "maybe param" "maybe type" "temp"
              (675051 'move' call_tmp[675048](428052 call isTrue tmp[428051]))
              (570012 'move' tmp[570007](570010 call _cond_test call_tmp[675048]))
              if tmp[570007]
              {
                (570017 'move' tmp[570006](570014 '_paramFoldLogical' tmp[570007] 1))
              }
              {
                unknown tmp[570019] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (570021 'move' tmp[570019](428056 call isTrue ischpl[160372]))
                (570026 'move' tmp[570006](570023 '_paramFoldLogical' tmp[570007] tmp[570019]))
              }
              unknown call_tmp[675053] "expr temp" "maybe param" "maybe type" "temp"
              (675056 'move' call_tmp[675053](160466 call _cond_test tmp[570006]))
              if call_tmp[675053]
              {
                unknown call_tmp[675058] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675061 'move' call_tmp[675058](747980 'new' ioLiteral[238772] ", "))
                (160463 call <~> f[160311] call_tmp[675058])
              }
            }
          }
          unknown tmp[428072] "maybe param" "temp"
          (428083 'move' tmp[428072](160485 call writing _mt[243] f[160311]))
          unknown call_tmp[675065] "expr temp" "maybe param" "maybe type" "temp"
          (675068 'move' call_tmp[675065](428085 call _cond_invalid tmp[428072]))
          if call_tmp[675065]
          {
            (428088 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[570033] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[570034] "maybe param" "temp"
          unknown call_tmp[675070] "expr temp" "maybe param" "maybe type" "temp"
          (675073 'move' call_tmp[675070](428073 call isTrue tmp[428072]))
          (570039 'move' tmp[570034](570037 call _cond_test call_tmp[675070]))
          if tmp[570034]
          {
            unknown tmp[570041] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (570043 'move' tmp[570041](428076 call isTrue ischpl[160372]))
            (570048 'move' tmp[570033](570045 '_paramFoldLogical' tmp[570034] tmp[570041]))
          }
          {
            (570053 'move' tmp[570033](570050 '_paramFoldLogical' tmp[570034] 0))
          }
          unknown call_tmp[675075] "expr temp" "maybe param" "maybe type" "temp"
          (675078 'move' call_tmp[675075](160522 call _cond_test tmp[570033]))
          if call_tmp[675075]
          {
            (160493 call <~> f[160311] key[160566])
            (482450 'end of statement' key[160566])
            unknown call_tmp[675080] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
            (675083 'move' call_tmp[675080](747981 'new' ioLiteral[238772] " => "))
            (160519 call <~> f[160311] call_tmp[675080])
          }
          (160528 call <~> f[160311] val[160573])
          (482453 'end of statement' val[160573])
        }
        label _continueLabel[160536]
        _indexOfInterest[160531]
        _iterator[160532]
      }
      label _breakLabel[160537]
    }
    unknown tmp[428093] "maybe param" "temp"
    (428104 'move' tmp[428093] isjson[160359])
    unknown call_tmp[675085] "expr temp" "maybe param" "maybe type" "temp"
    (675088 'move' call_tmp[675085](428106 call _cond_invalid tmp[428093]))
    if call_tmp[675085]
    {
      (428109 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[570060] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570061] "maybe param" "temp"
    unknown call_tmp[675090] "expr temp" "maybe param" "maybe type" "temp"
    (675093 'move' call_tmp[675090](428094 call isTrue tmp[428093]))
    (570066 'move' tmp[570061](570064 call _cond_test call_tmp[675090]))
    if tmp[570061]
    {
      (570071 'move' tmp[570060](570068 '_paramFoldLogical' tmp[570061] 1))
    }
    {
      unknown tmp[570073] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (570075 'move' tmp[570073](428098 call isTrue ischpl[160372]))
      (570080 'move' tmp[570060](570077 '_paramFoldLogical' tmp[570061] tmp[570073]))
    }
    unknown call_tmp[675095] "expr temp" "maybe param" "maybe type" "temp"
    (675098 'move' call_tmp[675095](160600 call _cond_test tmp[570060]))
    if call_tmp[675095]
    {
      unknown call_tmp[675100] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (675103 'move' call_tmp[675100](747982 'new' ioLiteral[238772] "]"))
      (160597 call <~> f[160311] call_tmp[675100])
    }
    label _end_dsiSerialReadWrite[521302]
    (521304 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).readChapelStyleAssocArray[160611](arg _mt[161524]:_MT[238], arg this[161522]:DefaultAssociativeArr[161464](?), arg f[160609]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675105] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675108 'move' call_tmp[675105](747983 'new' ioLiteral[238772] "["))
    const openBracket[160618] "dead at end of block" "const" "insert auto destroy"
    (544152 'init var' openBracket[160618] call_tmp[675105])
    (160621 'end of statement')
    unknown call_tmp[675110] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675113 'move' call_tmp[675110](747984 'new' ioLiteral[238772] "]"))
    const closedBracket[160628] "dead at end of block" "const" "insert auto destroy"
    (544154 'init var' closedBracket[160628] call_tmp[675110])
    (160631 'end of statement')
    unknown first[160633] "dead at end of block" "insert auto destroy"
    (544156 'init var' first[160633] 1)
    (160636 'end of statement')
    unknown readEnd[160638] "dead at end of block" "insert auto destroy"
    (544158 'init var' readEnd[160638] 0)
    (160641 'end of statement')
    (160644 call <~> f[160609] openBracket[160618])
    (482457 'end of statement' openBracket[160618])
    {
      unknown tmp[160747] "temp"
      (160765 'move' tmp[160747](160763 call _cond_test 1))
      WhileDo[160752]
      {
        {
          unknown call_tmp[675115] "expr temp" "maybe param" "maybe type" "temp"
          (675118 'move' call_tmp[675115](160699 call _cond_test first[160633]))
          if call_tmp[675115]
          {
            (160651 call = first[160633] 0)
            (482459 'end of statement' first[160633])
            Try
            {
              {
                (160657 call <~> f[160609] closedBracket[160628])
                (482461 'end of statement' closedBracket[160628])
                (160663 call = readEnd[160638] 1)
                (482463 'end of statement' readEnd[160638])
                break _breakLabel[160751] _breakLabel[160751]
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675120] "expr temp" "maybe param" "maybe type" "temp"
              (675123 'move' call_tmp[675120](354520 'current error'))
              unknown call_tmp[675125] "maybe param" "maybe type" "temp"
              (675128 'move' call_tmp[675125](354521 'dynamic_cast' unmanaged BadFormatError?[415644] call_tmp[675120]))
              unknown tmp[354517] "dead at end of block" "insert auto destroy" "temp"
              (544160 'init var' tmp[354517] call_tmp[675125])
              unknown call_tmp[675130] "expr temp" "maybe param" "maybe type" "temp"
              (675133 'move' call_tmp[675130](354524 '!=' tmp[354517] nil[44]))
              if call_tmp[675130]
              {
                unknown call_tmp[675135] "expr temp" "maybe param" "maybe type" "temp"
                (675138 'move' call_tmp[675135](354531 'to non nilable class' tmp[354517]))
                unknown call_tmp[675140] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675143 'move' call_tmp[675140](747985 'new' _owned[30](?) call_tmp[675135]))
                unknown err[354530] "dead at end of block" "insert auto destroy"
                (544162 'init var' err[354530] call_tmp[675140])
                (482465 'end of statement')
                {
                }
              }
              {
              }
            }
          }
          {
            Try
            {
              {
                unknown call_tmp[675145] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675148 'move' call_tmp[675145](747986 'new' ioLiteral[238772] ","))
                (160683 call <~> f[160609] call_tmp[675145])
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675150] "expr temp" "maybe param" "maybe type" "temp"
              (675153 'move' call_tmp[675150](354541 'current error'))
              unknown call_tmp[675155] "maybe param" "maybe type" "temp"
              (675158 'move' call_tmp[675155](354542 'dynamic_cast' unmanaged BadFormatError?[415644] call_tmp[675150]))
              unknown tmp[354538] "dead at end of block" "insert auto destroy" "temp"
              (544164 'init var' tmp[354538] call_tmp[675155])
              unknown call_tmp[675160] "expr temp" "maybe param" "maybe type" "temp"
              (675163 'move' call_tmp[675160](354545 '!=' tmp[354538] nil[44]))
              if call_tmp[675160]
              {
                unknown call_tmp[675165] "expr temp" "maybe param" "maybe type" "temp"
                (675168 'move' call_tmp[675165](354552 'to non nilable class' tmp[354538]))
                unknown call_tmp[675170] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675173 'move' call_tmp[675170](747987 'new' _owned[30](?) call_tmp[675165]))
                unknown err[354551] "dead at end of block" "insert auto destroy"
                (544166 'init var' err[354551] call_tmp[675170])
                (482467 'end of statement')
                {
                  break _breakLabel[160751] _breakLabel[160751]
                }
              }
              {
              }
            }
          }
          unknown key[160705] "dead at end of block" "insert auto destroy"
          unknown call_tmp[675177] "expr temp" "maybe param" "maybe type" "temp"
          (675180 'move' call_tmp[675177](387275 call idxType _mt[243] this[161522]))
          (544168 'default init var' key[160705] call_tmp[675177])
          (160708 'end of statement')
          (160711 call <~> f[160609] key[160705])
          (482468 'end of statement' key[160705])
          unknown call_tmp[675182] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (675185 'move' call_tmp[675182](747988 'new' ioLiteral[238772] "=>"))
          (160736 call <~> f[160609] call_tmp[675182])
          (482470 'end of statement')
          unknown call_tmp[675189] "expr temp" "maybe param" "maybe type" "temp"
          (675192 'move' call_tmp[675189](160743 call(387284 call (partial) dsiAccess _mt[243] this[161522]) key[160705]))
          (160744 call <~> f[160609] call_tmp[675189])
          (482471 'end of statement' key[160705])
        }
        label _continueLabel[160750]
        (160758 'move' tmp[160747](160756 call _cond_test 1))
        tmp[160747]
      }
      label _breakLabel[160751]
    }
    unknown call_tmp[675194] "expr temp" "maybe param" "maybe type" "temp"
    (675197 'move' call_tmp[675194](160769 call ! readEnd[160638]))
    unknown call_tmp[675199] "expr temp" "maybe param" "maybe type" "temp"
    (675202 'move' call_tmp[675199](160776 call _cond_test call_tmp[675194]))
    if call_tmp[675199]
    {
      (160773 call <~> f[160609] closedBracket[160628])
      (482473 'end of statement' closedBracket[160628])
    }
    (521308 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiSerialWrite[160787](arg _mt[161528]:_MT[238], arg this[161526]:DefaultAssociativeArr[161464](?), arg f[160785]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160795 call(160790 call (partial) dsiSerialReadWrite _mt[243] this[161526]) f[160785])
    (521310 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiSerialRead[160804](arg _mt[161532]:_MT[238], arg this[161530]:DefaultAssociativeArr[161464](?), arg f[160802]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160812 call(160807 call (partial) dsiSerialReadWrite _mt[243] this[161530]) f[160802])
    (521312 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiSorted[160821](arg _mt[161536]:_MT[238], arg this[161534]:DefaultAssociativeArr[161464](?), arg comparator[160819]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521316] "RVV" "temp"
    unknown tableCopy[160859] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter9[583116](arg iterator[583118]:_any[178](?), arg this[583154]:DefaultAssociativeArr[161464](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583165] "RVV" "temp"
      {
        unknown _indexOfInterest[583123] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[583124] "expr temp" "temp"
        (583133 'move' _iterator[583124](583131 call _getIterator iterator[583118]))
        Defer
        {
          {
            (583147 call _freeIterator _iterator[583124])
          }
        }
        { scopeless type
          (583138 'move' _indexOfInterest[583123](583135 call iteratorIndex _iterator[583124]))
        }
        ForLoop[583125] for-expr
        {
          unknown slot[160857] "index var" "insert auto destroy" "no doc"
          (583158 'end of statement')
          (583142 'move' slot[160857] _indexOfInterest[583123])
          (583159 'end of statement' slot[160857])
          {
            {
              unknown yret[583169] "YVV" "temp"
              unknown call_tmp[583178] "expr temp" "maybe param" "maybe type" "temp"
              (583181 'move' call_tmp[583178](160854 call(387301 call (partial) data _mt[243] this[583154]) slot[160857]))
              (583172 'move' yret[583169](583171 'deref' call_tmp[583178]))
              (583174 yield yret[583169])
              (583161 'end of statement' slot[160857])
            }
          }
          label _continueLabel[583128]
          _indexOfInterest[583123]
          _iterator[583124]
        }
        label _breakLabel[583129]
      }
      (583167 return ret[583165])
    }
    function chpl__forexpr9[583096](arg iterExpr[583099]:_any[178](?), arg this[583103]:DefaultAssociativeArr[161464](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583186] "RVV" "temp"
      unknown _iterator[583106] "expr temp" "maybe ref" "temp"
      (583108 'move' _iterator[583106] iterExpr[583099])
      unknown call_tmp[583193] "expr temp" "maybe param" "maybe type" "temp"
      (583196 'move' call_tmp[583193](583111 call chpl__loopexpr_iter9 _iterator[583106] this[583103]))
      (583191 'move' ret[583186](583190 'deref' call_tmp[583193]))
      (583188 return ret[583186])
    }
    unknown call_tmp[583200] "expr temp" "maybe param" "maybe type" "temp"
    (583203 'move' call_tmp[583200](361152 call dom _mt[243] this[161534]))
    unknown call_tmp[583207] "expr temp" "maybe param" "maybe type" "temp"
    (583210 'move' call_tmp[583207](160850 call(160846 call (partial) _fullSlots _mt[243] call_tmp[583200])))
    unknown call_tmp[583212] "maybe param" "maybe type" "temp"
    (583215 'move' call_tmp[583212](583101 call chpl__forexpr9 call_tmp[583207] this[161534]))
    (583219 'iterator record set shape' call_tmp[583212] call_tmp[583207] 1)
    unknown call_tmp[675208] "expr temp" "maybe param" "maybe type" "temp"
    (675211 'move' call_tmp[675208](160828 call chpl_build_low_bounded_range 0))
    unknown call_tmp[675215] "expr temp" "maybe param" "maybe type" "temp"
    (675218 'move' call_tmp[675215](361147 call dom _mt[243] this[161534]))
    unknown call_tmp[675222] "expr temp" "maybe param" "maybe type" "temp"
    (675225 'move' call_tmp[675222](160831 call dsiNumIndices _mt[243] call_tmp[675215]))
    unknown call_tmp[675227] "expr temp" "maybe param" "maybe type" "temp"
    (675230 'move' call_tmp[675227](160834 call # call_tmp[675208] call_tmp[675222]))
    unknown call_tmp[675232] "expr temp" "maybe param" "maybe type" "temp"
    (675235 'move' call_tmp[675232](160838 call chpl__ensureDomainExpr call_tmp[675227]))
    unknown call_tmp[675239] "expr temp" "maybe param" "maybe type" "temp"
    (675242 'move' call_tmp[675239](387295 call eltType _mt[243] this[161534]))
    unknown call_tmp[675244] "maybe param" "maybe type" "temp"
    (675247 'move' call_tmp[675244](160840 call chpl__buildArrayRuntimeType call_tmp[675232] call_tmp[675239]))
    (544170 'init var' tableCopy[160859] call_tmp[583212] call_tmp[675244])
    (160862 'end of statement')
    (160868 call sort tableCopy[160859](comparator = comparator[160819]))
    (482477 'end of statement' tableCopy[160859])
    {
      unknown _indexOfInterest[160875] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160876] "expr temp" "temp"
      (160885 'move' _iterator[160876](160883 call _getIterator tableCopy[160859]))
      Defer
      {
        {
          (160901 call _freeIterator _iterator[160876])
        }
      }
      { scopeless type
        (160890 'move' _indexOfInterest[160875](160887 call iteratorIndex _iterator[160876]))
      }
      ForLoop[160877]
      {
        unknown elem[160894] "index var" "insert auto destroy"
        (482480 'end of statement')
        (160896 'move' elem[160894] _indexOfInterest[160875])
        (482481 'end of statement' elem[160894])
        unknown yret[521320] "YVV" "temp"
        (521323 'move' yret[521320](521322 'deref' elem[160894]))
        (521325 yield yret[521320])
        (482483 'end of statement' elem[160894])
        label _continueLabel[160880]
        _indexOfInterest[160875]
        _iterator[160876]
      }
      label _breakLabel[160881]
    }
    (521318 return ret[521316])
    (355199 'used modules list'(160824 'use' Sort[267987]))
  }
  function DefaultAssociativeArr[161464](?)._doDefaultInitSlot[160916](arg _mt[161540]:_MT[238], arg this[161538]:DefaultAssociativeArr[161464](?), arg slot[160913]:int(64)[13], arg inAdd[160919]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675251] "expr temp" "maybe param" "maybe type" "temp"
    (675254 'move' call_tmp[675251](387311 call eltType _mt[243] this[161538]))
    unknown call_tmp[675256] "expr temp" "maybe param" "maybe type" "temp"
    (675259 'move' call_tmp[675256](160925 call isDefaultInitializable call_tmp[675251]))
    unknown call_tmp[675261] "expr temp" "maybe param" "maybe type" "temp"
    (675264 'move' call_tmp[675261](160926 call ! call_tmp[675256]))
    unknown call_tmp[675266] "expr temp" "maybe param" "maybe type" "temp"
    (675269 'move' call_tmp[675266](161036 call _cond_test call_tmp[675261]))
    if call_tmp[675266]
    {
      unknown call_tmp[675271] "expr temp" "maybe param" "maybe type" "temp"
      (675274 'move' call_tmp[675271](161011 call _cond_test inAdd[160919]))
      if call_tmp[675271]
      {
        unknown call_tmp[675276] "expr temp" "maybe param" "maybe type" "temp"
        (675279 'move' call_tmp[675276](160964 call + "Can't resize domains whose arrays' elements don't " "have default values"))
        (160967 call halt call_tmp[675276])
      }
      {
        unknown call_tmp[675281] "expr temp" "maybe param" "maybe type" "temp"
        (675284 'move' call_tmp[675281](161005 call + "Can't default initialize associative arrays whose " "elements have no default value"))
        (161008 call halt call_tmp[675281])
      }
    }
    {
      unknown initval[161017] "dead at end of block" "no auto destroy"
      unknown call_tmp[675288] "expr temp" "maybe param" "maybe type" "temp"
      (675291 'move' call_tmp[675288](387317 call eltType _mt[243] this[161538]))
      (544172 'default init var' initval[161017] call_tmp[675288])
      (161020 'end of statement')
      unknown dst[161026] "dead at end of block" "ref var"
      unknown call_tmp[675295] "expr temp" "maybe param" "maybe type" "temp"
      (675298 'move' call_tmp[675295](161025 call(387322 call (partial) data _mt[243] this[161538]) slot[160913]))
      (544175 'move' dst[161026](544174 'addr of' call_tmp[675295]))
      (161029 'end of statement')
      (161034 '=' dst[161026] initval[161017])
      (482487 'end of statement' dst[161026] initval[161017])
    }
    (521327 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._defaultInitSlot[161049](arg _mt[161544]:_MT[238], arg this[161542]:DefaultAssociativeArr[161464](?), arg slot[161046]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161056 call(387329 call (partial) _doDefaultInitSlot _mt[243] this[161542]) slot[161046](inAdd = 1))
    (521329 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._deinitSlot[161067](arg _mt[161548]:_MT[238], arg this[161546]:DefaultAssociativeArr[161464](?), arg slot[161064]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675306] "expr temp" "maybe param" "maybe type" "temp"
    (675309 'move' call_tmp[675306](161073 call(387341 call (partial) data _mt[243] this[161546]) slot[161064]))
    (161075 call(387336 call (partial) _deinitElement _mt[243] this[161546]) call_tmp[675306])
    (521331 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._elementNeedsDeinit[161082](arg _mt[161552]:_MT[238], arg this[161550]:DefaultAssociativeArr[161464](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521335] "RVV" "param" "temp"
    unknown call_tmp[675313] "expr temp" "maybe param" "maybe type" "temp"
    (675316 'move' call_tmp[675313](387347 call eltType _mt[243] this[161550]))
    unknown call_tmp[675318] "expr temp" "maybe param" "maybe type" "temp"
    (675321 'move' call_tmp[675318](161087 'needs auto destroy' call_tmp[675313]))
    (521340 'move' ret[521335](521339 'deref' call_tmp[675318]))
    (521337 return ret[521335])
  }
  function DefaultAssociativeArr[161464](?)._deinitElement[161099](arg _mt[161556]:_MT[238], arg this[161554]:DefaultAssociativeArr[161464](?), ref arg elt[161096] :
  (387352 call eltType _mt[243] this[161554])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675327] "expr temp" "maybe param" "maybe type" "temp"
    (675330 'move' call_tmp[675327](161103 call(387358 call (partial) _elementNeedsDeinit _mt[243] this[161554])))
    unknown call_tmp[675332] "expr temp" "maybe param" "maybe type" "temp"
    (675335 'move' call_tmp[675332](161110 call _cond_test call_tmp[675327]))
    if call_tmp[675332]
    {
      (161107 call chpl__autoDestroy elt[161096])
    }
    (521342 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._startRehash[161123](arg _mt[161560]:_MT[238], arg this[161558]:DefaultAssociativeArr[161464](?), arg newSize[161120]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675339] "expr temp" "maybe param" "maybe type" "temp"
    (675342 'move' call_tmp[675339](387364 call tmpData _mt[243] this[161558]))
    unknown call_tmp[675346] "expr temp" "maybe param" "maybe type" "temp"
    (675349 'move' call_tmp[675346](387369 call data _mt[243] this[161558]))
    (161127 call = call_tmp[675339] call_tmp[675346])
    (482494 'end of statement')
    unknown call_tmp[675353] "expr temp" "maybe param" "maybe type" "temp"
    (675356 'move' call_tmp[675353](387374 call data _mt[243] this[161558]))
    unknown call_tmp[675360] "expr temp" "maybe param" "maybe type" "temp"
    (675363 'move' call_tmp[675360](361157 call dom _mt[243] this[161558]))
    unknown call_tmp[675367] "expr temp" "maybe param" "maybe type" "temp"
    (675370 'move' call_tmp[675367](161133 call table _mt[243] call_tmp[675360]))
    unknown call_tmp[675376] "expr temp" "maybe param" "maybe type" "temp"
    (675379 'move' call_tmp[675376](387380 call eltType _mt[243] this[161558]))
    unknown call_tmp[675381] "expr temp" "maybe param" "maybe type" "temp"
    (675384 'move' call_tmp[675381](161142 call(161136 call (partial) allocateData _mt[243] call_tmp[675367]) newSize[161120] call_tmp[675376]))
    (161143 call = call_tmp[675353] call_tmp[675381])
    (521344 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._finishRehash[161154](arg _mt[161564]:_MT[238], arg this[161562]:DefaultAssociativeArr[161464](?), arg oldSize[161151]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675388] "expr temp" "maybe param" "maybe type" "temp"
    (675391 'move' call_tmp[675388](387385 call tmpData _mt[243] this[161562]))
    (161160 call _ddata_free call_tmp[675388] oldSize[161151])
    (482496 'end of statement')
    unknown call_tmp[675395] "expr temp" "maybe param" "maybe type" "temp"
    (675398 'move' call_tmp[675395](387391 call tmpData _mt[243] this[161562]))
    (161165 call = call_tmp[675395] nil[44])
    (521346 return _void[55])
  }
  function DefaultAssociativeArr[161464](?)._moveElementDuringRehash[161176](arg _mt[161568]:_MT[238], arg this[161566]:DefaultAssociativeArr[161464](?), arg oldslot[161173]:int(64)[13], arg newslot[161179]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const src[161186] "dead at end of block" "const" "ref var"
    unknown call_tmp[675402] "expr temp" "maybe param" "maybe type" "temp"
    (675405 'move' call_tmp[675402](161185 call(387396 call (partial) tmpData _mt[243] this[161566]) oldslot[161173]))
    (544178 'move' src[161186](544177 'addr of' call_tmp[675402]))
    (161189 'end of statement')
    unknown dst[161195] "dead at end of block" "ref var"
    unknown call_tmp[675409] "expr temp" "maybe param" "maybe type" "temp"
    (675412 'move' call_tmp[675409](161194 call(387402 call (partial) data _mt[243] this[161566]) newslot[161179]))
    (544181 'move' dst[161195](544180 'addr of' call_tmp[675409]))
    (161198 'end of statement')
    (161203 '=' dst[161195] src[161186])
    (482498 'end of statement' dst[161195] src[161186])
    (521348 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiTargetLocales[161209](arg _mt[161572]:_MT[238], arg this[161570]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521352] "RVV" "temp"
    unknown call_tmp[675414] "expr temp" "maybe param" "maybe type" "temp"
    (675417 'move' call_tmp[675414](161212 '_wide_get_locale' this[161570]))
    unknown call_tmp[675419] "expr temp" "maybe param" "maybe type" "temp"
    (675422 'move' call_tmp[675419](161213 call chpl_localeID_to_locale call_tmp[675414]))
    unknown call_tmp[675424] "expr temp" "maybe param" "maybe type" "temp"
    (675427 'move' call_tmp[675424](161216 call chpl__buildArrayExpr call_tmp[675419]))
    (521357 'move' ret[521352](521356 'deref' call_tmp[675424]))
    (521354 return ret[521352])
  }
  function DefaultAssociativeArr[161464](?).dsiHasSingleLocalSubdomain[161225](arg _mt[161576]:_MT[238], arg this[161574]:DefaultAssociativeArr[161464](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521361] "RVV" "param" "temp"
    (521366 'move' ret[521361](521365 'deref' 1))
    (521363 return ret[521361])
  }
  function DefaultAssociativeArr[161464](?).dsiLocalSubdomain[161239](arg _mt[161580]:_MT[238], arg this[161578]:DefaultAssociativeArr[161464](?), arg loc[161236]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521370] "RVV" "temp"
    unknown call_tmp[675429] "expr temp" "maybe param" "maybe type" "temp"
    (675432 'move' call_tmp[675429](161242 '_wide_get_locale' this[161578]))
    unknown call_tmp[675434] "expr temp" "maybe param" "maybe type" "temp"
    (675437 'move' call_tmp[675434](161243 call chpl_localeID_to_locale call_tmp[675429]))
    unknown call_tmp[675439] "expr temp" "maybe param" "maybe type" "temp"
    (675442 'move' call_tmp[675439](161246 call == call_tmp[675434] loc[161236]))
    unknown call_tmp[675444] "expr temp" "maybe param" "maybe type" "temp"
    (675447 'move' call_tmp[675444](161276 call _cond_test call_tmp[675439]))
    if call_tmp[675444]
    {
      unknown call_tmp[675451] "expr temp" "maybe param" "maybe type" "temp"
      (675454 'move' call_tmp[675451](387413 call dom _mt[243] this[161578]))
      unknown call_tmp[675456] "expr temp" "maybe param" "maybe type" "temp"
      (675459 'move' call_tmp[675456](161251 call _getDomain call_tmp[675451]))
      (521375 'move' ret[521370](521374 'deref' call_tmp[675456]))
      gotoReturn _end_dsiLocalSubdomain[521368] _end_dsiLocalSubdomain[521368]
    }
    {
      unknown a[161268] "dead at end of block" "insert auto destroy"
      unknown call_tmp[675463] "expr temp" "maybe param" "maybe type" "temp"
      (675466 'move' call_tmp[675463](361162 call dom _mt[243] this[161578]))
      unknown call_tmp[675470] "expr temp" "maybe param" "maybe type" "temp"
      (675473 'move' call_tmp[675470](161256 call idxType _mt[243] call_tmp[675463]))
      unknown call_tmp[675477] "expr temp" "maybe param" "maybe type" "temp"
      (675480 'move' call_tmp[675477](361167 call dom _mt[243] this[161578]))
      unknown call_tmp[675484] "expr temp" "maybe param" "maybe type" "temp"
      (675487 'move' call_tmp[675484](161261 call parSafe _mt[243] call_tmp[675477]))
      unknown call_tmp[675489] "expr temp" "maybe param" "maybe type" "temp"
      (675492 'move' call_tmp[675489](161266 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[675470](parSafe = call_tmp[675484])))
      (544183 'default init var' a[161268] call_tmp[675489])
      (161271 'end of statement')
      (521380 'move' ret[521370](521379 'deref' a[161268]))
      gotoReturn _end_dsiLocalSubdomain[521368] _end_dsiLocalSubdomain[521368]
      (482504 'end of statement' a[161268])
    }
    label _end_dsiLocalSubdomain[521368]
    (521372 return ret[521370])
  }
  function DefaultAssociativeArr[161464](?).dsiElementInitializationComplete[161285](arg _mt[161584]:_MT[238], arg this[161582]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675496] "expr temp" "maybe param" "maybe type" "temp"
    (675499 'move' call_tmp[675496](161288 call eltsNeedDeinit _mt[243] this[161582]))
    (161292 call = call_tmp[675496] 1)
    (521384 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiElementDeinitializationComplete[161300](arg _mt[161588]:_MT[238], arg this[161586]:DefaultAssociativeArr[161464](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675503] "expr temp" "maybe param" "maybe type" "temp"
    (675506 'move' call_tmp[675503](161303 call eltsNeedDeinit _mt[243] this[161586]))
    (161307 call = call_tmp[675503] 0)
    (521386 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).dsiDestroyArr[161319](arg _mt[161592]:_MT[238], arg this[161590]:DefaultAssociativeArr[161464](?), arg deinitElts[161316]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown tmp[428114] "maybe param" "temp"
    (428125 'move' tmp[428114] deinitElts[161316])
    unknown call_tmp[675508] "expr temp" "maybe param" "maybe type" "temp"
    (675511 'move' call_tmp[675508](428127 call _cond_invalid tmp[428114]))
    if call_tmp[675508]
    {
      (428130 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570087] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570088] "maybe param" "temp"
    unknown call_tmp[675513] "expr temp" "maybe param" "maybe type" "temp"
    (675516 'move' call_tmp[675513](428115 call isTrue tmp[428114]))
    (570093 'move' tmp[570088](570091 call _cond_test call_tmp[675513]))
    if tmp[570088]
    {
      unknown tmp[570095] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675520] "expr temp" "maybe param" "maybe type" "temp"
      (675523 'move' call_tmp[675520](161323 call eltsNeedDeinit _mt[243] this[161590]))
      (570097 'move' tmp[570095](428118 call isTrue call_tmp[675520]))
      (570102 'move' tmp[570087](570099 '_paramFoldLogical' tmp[570088] tmp[570095]))
    }
    {
      (570107 'move' tmp[570087](570104 '_paramFoldLogical' tmp[570088] 0))
    }
    unknown call_tmp[675525] "expr temp" "maybe param" "maybe type" "temp"
    (675528 'move' call_tmp[675525](161448 call _cond_test tmp[570087]))
    if call_tmp[675525]
    {
      unknown call_tmp[675532] "expr temp" "maybe param" "maybe type" "temp"
      (675535 'move' call_tmp[675532](161330 call(387420 call (partial) _elementNeedsDeinit _mt[243] this[161590])))
      unknown call_tmp[675537] "expr temp" "maybe param" "maybe type" "temp"
      (675540 'move' call_tmp[675537](161443 call _cond_test call_tmp[675532]))
      if call_tmp[675537]
      {
        unknown call_tmp[675544] "expr temp" "maybe param" "maybe type" "temp"
        (675547 'move' call_tmp[675544](387425 call eltType _mt[243] this[161590]))
        unknown call_tmp[675549] "expr temp" "maybe param" "maybe type" "temp"
        (675552 'move' call_tmp[675549](161334 call _deinitElementsIsParallel call_tmp[675544]))
        unknown call_tmp[675554] "expr temp" "maybe param" "maybe type" "temp"
        (675557 'move' call_tmp[675554](161438 call _cond_test call_tmp[675549]))
        if call_tmp[675554]
        {
          unknown call_tmp[675561] "expr temp" "maybe param" "maybe type" "temp"
          (675564 'move' call_tmp[675561](361175 call dom _mt[243] this[161590]))
          unknown call_tmp[675568] "expr temp" "maybe param" "maybe type" "temp"
          (675571 'move' call_tmp[675568](161337 call table _mt[243] call_tmp[675561]))
          unknown call_tmp[675575] "expr temp" "maybe param" "maybe type" "temp"
          (675578 'move' call_tmp[675575](161344 call(161340 call (partial) allSlots _mt[243] call_tmp[675568])))
          Forall {
            induction variables:
              
              unknown slot[161367] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[675575]
            shadow variables:
            other variables
              forall body
            {
              unknown call_tmp[675582] "expr temp" "maybe param" "maybe type" "temp"
              (675585 'move' call_tmp[675582](361180 call dom _mt[243] this[161590]))
              unknown call_tmp[675589] "expr temp" "maybe param" "maybe type" "temp"
              (675592 'move' call_tmp[675589](161351 call(161346 call (partial) _isSlotFull _mt[243] call_tmp[675582]) slot[161367]))
              unknown call_tmp[675594] "expr temp" "maybe param" "maybe type" "temp"
              (675597 'move' call_tmp[675594](161361 call _cond_test call_tmp[675589]))
              if call_tmp[675594]
              {
                unknown call_tmp[675603] "expr temp" "maybe param" "maybe type" "temp"
                (675606 'move' call_tmp[675603](161356 call(387435 call (partial) data _mt[243] this[161590]) slot[161367]))
                (161358 call(387430 call (partial) _deinitElement _mt[243] this[161590]) call_tmp[675603])
                (482509 'end of statement' slot[161367])
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161403] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161404] "expr temp" "temp"
            unknown call_tmp[675610] "expr temp" "maybe param" "maybe type" "temp"
            (675613 'move' call_tmp[675610](361185 call dom _mt[243] this[161590]))
            unknown call_tmp[675617] "expr temp" "maybe param" "maybe type" "temp"
            (675620 'move' call_tmp[675617](161374 call table _mt[243] call_tmp[675610]))
            unknown call_tmp[675624] "expr temp" "maybe param" "maybe type" "temp"
            (675627 'move' call_tmp[675624](161381 call(161377 call (partial) allSlots _mt[243] call_tmp[675617])))
            (161413 'move' _iterator[161404](161411 call _getIterator call_tmp[675624]))
            Defer
            {
              {
                (161430 call _freeIterator _iterator[161404])
              }
            }
            { scopeless type
              (161419 'move' _indexOfInterest[161403](161416 call iteratorIndex _iterator[161404]))
            }
            ForLoop[161405]
            {
              unknown slot[161423] "index var" "insert auto destroy"
              (482512 'end of statement')
              (161425 'move' slot[161423] _indexOfInterest[161403])
              (482513 'end of statement' slot[161423])
              {
                unknown call_tmp[675631] "expr temp" "maybe param" "maybe type" "temp"
                (675634 'move' call_tmp[675631](361190 call dom _mt[243] this[161590]))
                unknown call_tmp[675638] "expr temp" "maybe param" "maybe type" "temp"
                (675641 'move' call_tmp[675638](161388 call(161383 call (partial) _isSlotFull _mt[243] call_tmp[675631]) slot[161423]))
                unknown call_tmp[675643] "expr temp" "maybe param" "maybe type" "temp"
                (675646 'move' call_tmp[675643](161398 call _cond_test call_tmp[675638]))
                if call_tmp[675643]
                {
                  unknown call_tmp[675652] "expr temp" "maybe param" "maybe type" "temp"
                  (675655 'move' call_tmp[675652](161393 call(387446 call (partial) data _mt[243] this[161590]) slot[161423]))
                  (161395 call(387441 call (partial) _deinitElement _mt[243] this[161590]) call_tmp[675652])
                  (482515 'end of statement' slot[161423])
                }
              }
              label _continueLabel[161408]
              _indexOfInterest[161403]
              _iterator[161404]
            }
            label _breakLabel[161409]
          }
        }
      }
    }
    unknown call_tmp[675659] "expr temp" "maybe param" "maybe type" "temp"
    (675662 'move' call_tmp[675659](161454 call eltsNeedDeinit _mt[243] this[161590]))
    (161458 call = call_tmp[675659] 0)
    (521388 return _void[55])
  }
  function DefaultAssociativeArr[161464](?).super[810877](arg _mt[810879]:_MT[238], arg this[810881]:DefaultAssociativeArr[161464](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810891] "RVV" "temp"
    unknown call_tmp[810898] "expr temp" "maybe param" "maybe type" "temp"
    (810901 'move' call_tmp[810898](810885 '.v' this[810881] c"super"))
    (810896 'move' ret[810891](810895 'deref' call_tmp[810898]))
    (810893 return ret[810891])
  }
  function DefaultAssociativeArr[810908](?).idxType[810903](arg _mt[810905]:_MT[238], arg this[810910]:DefaultAssociativeArr[810908](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810945] "RVV" "temp" "type variable"
    unknown borrowOfThis[810912]
    (810937 'end of statement')
    (810914 'move' borrowOfThis[810912](810917 call _cast _borrowedNonNilable[214](?) this[810910]))
    (810938 'end of statement' borrowOfThis[810912])
    unknown call_tmp[810959] "expr temp" "maybe param" "maybe type" "temp"
    (810962 'move' call_tmp[810959](810927 'is bound' borrowOfThis[810912] c"idxType"))
    if call_tmp[810959]
    {
      unknown call_tmp[810964] "expr temp" "maybe param" "maybe type" "temp"
      (810967 'move' call_tmp[810964](810922 '.v' borrowOfThis[810912] c"idxType"))
      unknown call_tmp[810969] "expr temp" "maybe param" "maybe type" "temp"
      (810972 'move' call_tmp[810969](810923 call chpl_checkLegalTypeFieldAccessor this[810910] call_tmp[810964] "idxType"))
      (810950 'move' ret[810945](810949 'deref' call_tmp[810969]))
      gotoReturn _end_idxType[810943] _end_idxType[810943]
      (810940 'end of statement' borrowOfThis[810912])
    }
    {
      (810955 'move' ret[810945](810954 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810943] _end_idxType[810943]
    }
    label _end_idxType[810943]
    (810947 return ret[810945])
  }
  function DefaultAssociativeArr[810908](?).idxType[810974](arg _mt[810976]:_MT[238], arg this[810978]:DefaultAssociativeArr[810908](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811013] "RVV" "temp" "type variable"
    unknown borrowOfThis[810980] "type variable"
    (811005 'end of statement')
    (810982 'move' borrowOfThis[810980](810985 call _cast _borrowedNonNilable[214](?) this[810978]))
    (811006 'end of statement' borrowOfThis[810980])
    unknown call_tmp[811027] "expr temp" "maybe param" "maybe type" "temp"
    (811030 'move' call_tmp[811027](810995 'is bound' borrowOfThis[810980] c"idxType"))
    if call_tmp[811027]
    {
      unknown call_tmp[811032] "expr temp" "maybe param" "maybe type" "temp"
      (811035 'move' call_tmp[811032](810990 '.v' borrowOfThis[810980] c"idxType"))
      unknown call_tmp[811037] "expr temp" "maybe param" "maybe type" "temp"
      (811040 'move' call_tmp[811037](810991 call chpl_checkLegalTypeFieldAccessor this[810978] call_tmp[811032] "idxType"))
      (811018 'move' ret[811013](811017 'deref' call_tmp[811037]))
      gotoReturn _end_idxType[811011] _end_idxType[811011]
      (811008 'end of statement' borrowOfThis[810980])
    }
    {
      (811023 'move' ret[811013](811022 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[811011] _end_idxType[811011]
    }
    label _end_idxType[811011]
    (811015 return ret[811013])
  }
  function DefaultAssociativeArr[810908](?).parSafeDom[811042](arg _mt[811044]:_MT[238], arg this[811046]:DefaultAssociativeArr[810908](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811077] "RVV" "param" "temp"
    unknown borrowOfThis[811048]
    (811069 'end of statement')
    (811050 'move' borrowOfThis[811048](811053 call _cast _borrowedNonNilable[214](?) this[811046]))
    (811070 'end of statement' borrowOfThis[811048])
    unknown call_tmp[811091] "expr temp" "maybe param" "maybe type" "temp"
    (811094 'move' call_tmp[811091](811059 'is bound' borrowOfThis[811048] c"parSafeDom"))
    if call_tmp[811091]
    {
      unknown call_tmp[811096] "expr temp" "maybe param" "maybe type" "temp"
      (811099 'move' call_tmp[811096](811058 '.' borrowOfThis[811048] c"parSafeDom"))
      (811082 'move' ret[811077](811081 'deref' call_tmp[811096]))
      gotoReturn _end_parSafeDom[811075] _end_parSafeDom[811075]
      (811072 'end of statement' borrowOfThis[811048])
    }
    {
      (811087 'move' ret[811077](811086 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811075] _end_parSafeDom[811075]
    }
    label _end_parSafeDom[811075]
    (811079 return ret[811077])
  }
  function DefaultAssociativeArr[810908](?).parSafeDom[811101](arg _mt[811103]:_MT[238], arg this[811105]:DefaultAssociativeArr[810908](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811136] "RVV" "param" "temp"
    unknown borrowOfThis[811107] "type variable"
    (811128 'end of statement')
    (811109 'move' borrowOfThis[811107](811112 call _cast _borrowedNonNilable[214](?) this[811105]))
    (811129 'end of statement' borrowOfThis[811107])
    unknown call_tmp[811150] "expr temp" "maybe param" "maybe type" "temp"
    (811153 'move' call_tmp[811150](811118 'is bound' borrowOfThis[811107] c"parSafeDom"))
    if call_tmp[811150]
    {
      unknown call_tmp[811155] "expr temp" "maybe param" "maybe type" "temp"
      (811158 'move' call_tmp[811155](811117 '.' borrowOfThis[811107] c"parSafeDom"))
      (811141 'move' ret[811136](811140 'deref' call_tmp[811155]))
      gotoReturn _end_parSafeDom[811134] _end_parSafeDom[811134]
      (811131 'end of statement' borrowOfThis[811107])
    }
    {
      (811146 'move' ret[811136](811145 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811134] _end_parSafeDom[811134]
    }
    label _end_parSafeDom[811134]
    (811138 return ret[811136])
  }
  function DefaultAssociativeArr[161464](?).dom[811160](arg _mt[811162]:_MT[238], arg this[811164]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811174] "RVV" "temp"
    unknown call_tmp[811181] "expr temp" "maybe param" "maybe type" "temp"
    (811184 'move' call_tmp[811181](811168 '.' this[811164] c"dom"))
    (811179 'move' ret[811174](811178 'addr of' call_tmp[811181]))
    (811176 return ret[811174])
  }
  function DefaultAssociativeArr[161464](?).dataSize[811186](arg _mt[811188]:_MT[238], arg this[811190]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811200] "RVV" "temp"
    unknown call_tmp[811207] "expr temp" "maybe param" "maybe type" "temp"
    (811210 'move' call_tmp[811207](811194 '.' this[811190] c"dataSize"))
    (811205 'move' ret[811200](811204 'addr of' call_tmp[811207]))
    (811202 return ret[811200])
  }
  function DefaultAssociativeArr[161464](?).data[811212](arg _mt[811214]:_MT[238], arg this[811216]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811226] "RVV" "temp"
    unknown call_tmp[811233] "expr temp" "maybe param" "maybe type" "temp"
    (811236 'move' call_tmp[811233](811220 '.' this[811216] c"data"))
    (811231 'move' ret[811226](811230 'addr of' call_tmp[811233]))
    (811228 return ret[811226])
  }
  function DefaultAssociativeArr[161464](?).tmpData[811238](arg _mt[811240]:_MT[238], arg this[811242]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811252] "RVV" "temp"
    unknown call_tmp[811259] "expr temp" "maybe param" "maybe type" "temp"
    (811262 'move' call_tmp[811259](811246 '.' this[811242] c"tmpData"))
    (811257 'move' ret[811252](811256 'addr of' call_tmp[811259]))
    (811254 return ret[811252])
  }
  function DefaultAssociativeArr[161464](?).eltsNeedDeinit[811264](arg _mt[811266]:_MT[238], arg this[811268]:DefaultAssociativeArr[161464](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811278] "RVV" "temp"
    unknown call_tmp[811285] "expr temp" "maybe param" "maybe type" "temp"
    (811288 'move' call_tmp[811285](811272 '.' this[811268] c"eltsNeedDeinit"))
    (811283 'move' ret[811278](811282 'addr of' call_tmp[811285]))
    (811280 return ret[811278])
  }
  type DefaultAssociativeArr[161464](?) val super[355730]:AbsBaseArr[149740](?) "delay instantiation" "super class" unknown idxType[159026] "type variable" unknown parSafeDom[159030] "param" bool[10] unknown dom[159041](159039 call unmanaged DefaultAssociativeDom[415509](?) idxType[159026](parSafe = parSafeDom[159030])) val dataSize[159046]:int(64)[13] int(64)[13] unknown data[159054](159053 call _ddata[11696](?) eltType[149714]) unknown tmpData[159062](159061 call _ddata[11696](?) eltType[149714]) val eltsNeedDeinit[159067]:bool[10] 1
  type DefaultAssociativeArr[810908](?)
  type DefaultAssociativeArr[386738](?)
  (355185 'used modules list'(156281 'use' DSIUtil[230907])(156288 'use' ChapelDistribution[145457])(156290 'use' ChapelRange[64183])(156291 'use' SysBasic[223535])(156292 'use' ChapelArray[113678])(156296 'use' ChapelBase[307])(156298 'use' ChapelLocks[187302])(156299 'use' IO[230910])(156302 'use' ChapelHashing[155409])(156304 'use' ChapelHashtable[200446])(156306 'use' SysError[264250]))
}