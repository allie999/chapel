AST dump for DefaultAssociative after pass createTaskFunctions.
Module use list: DSIUtil ChapelDistribution ChapelRange SysBasic ChapelArray ChapelBase ChapelLocks IO ChapelHashing ChapelHashtable SysError Sort 

{
  function chpl__init_DefaultAssociative[415999]() : void[4] "insert line file info" "module init"
  {
    (543954 'init var' debugDefaultAssoc[156265] 0)
    (156268 'end of statement')
    (543956 'init var' debugAssocDataPar[156270] 0)
    (156273 'end of statement')
    (521349 return _void[55])
  }
  unknown debugDefaultAssoc[156265] "config" "param"
  unknown debugAssocDataPar[156270] "config" "param"
  function DefaultAssociativeDomRehashHelper[156472](?).startRehash[156289](arg _mt[156476]:_MT[238], arg this[156474]:DefaultAssociativeDomRehashHelper[156472](?), arg newSize[156286]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156307] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156308] "expr temp" "temp"
      unknown call_tmp[672845] "expr temp" "maybe param" "maybe type" "temp"
      (672848 'move' call_tmp[672845](360795 call dom _mt[243] this[156474]))
      unknown call_tmp[672852] "expr temp" "maybe param" "maybe type" "temp"
      (672855 'move' call_tmp[672852](156293 call _arrs _mt[243] call_tmp[672845]))
      (156317 'move' _iterator[156308](156315 call _getIterator call_tmp[672852]))
      Defer
      {
        {
          (156334 call _freeIterator _iterator[156308])
        }
      }
      { scopeless type
        (156323 'move' _indexOfInterest[156307](156320 call iteratorIndex _iterator[156308]))
      }
      ForLoop[156309]
      {
        unknown arr[156327] "index var" "insert auto destroy"
        (482072 'end of statement')
        (156329 'move' arr[156327] _indexOfInterest[156307])
        (482073 'end of statement' arr[156327])
        {
          (156304 call(156299 call (partial) _startRehash _mt[243] arr[156327]) newSize[156286])
          (482075 'end of statement' arr[156327])
        }
        label _continueLabel[156312]
        _indexOfInterest[156307]
        _iterator[156308]
      }
      label _breakLabel[156313]
    }
    (520867 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).moveElementDuringRehash[156350](arg _mt[156480]:_MT[238], arg this[156478]:DefaultAssociativeDomRehashHelper[156472](?), arg oldSlot[156347]:int(64)[13], arg newSlot[156353]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156373] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156374] "expr temp" "temp"
      unknown call_tmp[672861] "expr temp" "maybe param" "maybe type" "temp"
      (672864 'move' call_tmp[672861](360801 call dom _mt[243] this[156478]))
      unknown call_tmp[672868] "expr temp" "maybe param" "maybe type" "temp"
      (672871 'move' call_tmp[672868](156358 call _arrs _mt[243] call_tmp[672861]))
      (156383 'move' _iterator[156374](156381 call _getIterator call_tmp[672868]))
      Defer
      {
        {
          (156400 call _freeIterator _iterator[156374])
        }
      }
      { scopeless type
        (156389 'move' _indexOfInterest[156373](156386 call iteratorIndex _iterator[156374]))
      }
      ForLoop[156375]
      {
        unknown arr[156393] "index var" "insert auto destroy"
        (482078 'end of statement')
        (156395 'move' arr[156393] _indexOfInterest[156373])
        (482079 'end of statement' arr[156393])
        {
          (156370 call(156364 call (partial) _moveElementDuringRehash _mt[243] arr[156393]) oldSlot[156347] newSlot[156353])
          (482081 'end of statement' arr[156393])
        }
        label _continueLabel[156378]
        _indexOfInterest[156373]
        _iterator[156374]
      }
      label _breakLabel[156379]
    }
    (520869 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).finishRehash[156416](arg _mt[156484]:_MT[238], arg this[156482]:DefaultAssociativeDomRehashHelper[156472](?), arg oldSize[156413]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156434] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156435] "expr temp" "temp"
      unknown call_tmp[672877] "expr temp" "maybe param" "maybe type" "temp"
      (672880 'move' call_tmp[672877](360807 call dom _mt[243] this[156482]))
      unknown call_tmp[672884] "expr temp" "maybe param" "maybe type" "temp"
      (672887 'move' call_tmp[672884](156420 call _arrs _mt[243] call_tmp[672877]))
      (156444 'move' _iterator[156435](156442 call _getIterator call_tmp[672884]))
      Defer
      {
        {
          (156461 call _freeIterator _iterator[156435])
        }
      }
      { scopeless type
        (156450 'move' _indexOfInterest[156434](156447 call iteratorIndex _iterator[156435]))
      }
      ForLoop[156436]
      {
        unknown arr[156454] "index var" "insert auto destroy"
        (482084 'end of statement')
        (156456 'move' arr[156454] _indexOfInterest[156434])
        (482085 'end of statement' arr[156454])
        {
          (156431 call(156426 call (partial) _finishRehash _mt[243] arr[156454]) oldSize[156413])
          (482087 'end of statement' arr[156454])
        }
        label _continueLabel[156439]
        _indexOfInterest[156434]
        _iterator[156435]
      }
      label _breakLabel[156440]
    }
    (520871 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).super[810197](arg _mt[810199]:_MT[238], arg this[810201]:DefaultAssociativeDomRehashHelper[156472](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810211] "RVV" "temp"
    unknown call_tmp[810218] "expr temp" "maybe param" "maybe type" "temp"
    (810221 'move' call_tmp[810218](810205 '.v' this[810201] c"super"))
    (810216 'move' ret[810211](810215 'deref' call_tmp[810218]))
    (810213 return ret[810211])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).dom[810223](arg _mt[810225]:_MT[238], arg this[810227]:DefaultAssociativeDomRehashHelper[156472](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810237] "RVV" "temp"
    unknown call_tmp[810244] "expr temp" "maybe param" "maybe type" "temp"
    (810247 'move' call_tmp[810244](810231 '.' this[810227] c"dom"))
    (810242 'move' ret[810237](810241 'addr of' call_tmp[810244]))
    (810239 return ret[810237])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).init[810249](arg _mt[810251]:_MT[238], arg this[810252]:DefaultAssociativeDomRehashHelper[156472](?), in arg dom[810327]:unmanaged DefaultAssociativeDom[415471](?) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[810342] "temporary of super field" "temp"
    (810344 'move' super_tmp[810342](810341 '.v' this[810252] c"super"))
    (810262 call(810260 call (partial) init _mt[243] super_tmp[810342]))
    (810368 'end of statement')
    unknown tmp[810347] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[810371] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[810383] "expr temp" "maybe param" "maybe type" "temp"
      (810386 'move' call_tmp[810383](810349 '.v' this[810252] c"super"))
      (810375 'move' call_type_tmp[810371](810352 'typeof' call_tmp[810383]))
    }
    (810353 'move' tmp[810347] call_type_tmp[810371])
    unknown call_tmp[810388] "maybe param" "maybe type" "temp"
    (810391 'move' call_tmp[810388](810358 'cast' tmp[810347] this[810252]))
    unknown chpl__thisAsParent[810355] "dead at end of block" "insert auto destroy" "temp"
    (810379 'init var' chpl__thisAsParent[810355] call_tmp[810388] tmp[810347])
    (810361 'setcid' chpl__thisAsParent[810355])
    (810363 'init field' this[810252] c"dom" dom[810327])
    (810369 'end of statement')
    (810366 'setcid' this[810252])
    (810377 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).deinit[810393](arg _mt[810395]:_MT[238], arg this[810397]:DefaultAssociativeDomRehashHelper[156472](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (810405 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).writeThis[810407](arg _mt[810411]:_MT[238], arg this[810409]:DefaultAssociativeDomRehashHelper[156472](?), arg f[810410]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810416 call writeThisDefaultImpl f[810410] this[810409])
    (810421 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).readThis[810423](arg _mt[810427]:_MT[238], arg this[810425]:DefaultAssociativeDomRehashHelper[156472](?), arg f[810426]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810431 call readThisDefaultImpl f[810426] this[810425])
    (810437 return _void[55])
  }
  type DefaultAssociativeDomRehashHelper[156472](?) val super[355686]:chpl__rehashHelpers[202342] "super class" val dom[156279]:unmanaged DefaultAssociativeDom[415471](?) unmanaged DefaultAssociativeDom[415471](?)
  type DefaultAssociativeDomRehashHelper[386693](?)
  function DefaultAssociativeDom[158856](?).lockTable[156533](arg _mt[158860]:_MT[238], arg this[158858]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672893] "expr temp" "maybe param" "maybe type" "temp"
    (672896 'move' call_tmp[672893](386676 call parSafe _mt[243] this[158858]))
    unknown call_tmp[672898] "expr temp" "maybe param" "maybe type" "temp"
    (672901 'move' call_tmp[672898](156543 call _cond_test call_tmp[672893]))
    if call_tmp[672898]
    {
      unknown call_tmp[672905] "expr temp" "maybe param" "maybe type" "temp"
      (672908 'move' call_tmp[672905](360815 call tableLock _mt[243] this[158858]))
      (156541 call(156537 call (partial) lock _mt[243] call_tmp[672905]))
    }
    (520873 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).unlockTable[156553](arg _mt[158864]:_MT[238], arg this[158862]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672914] "expr temp" "maybe param" "maybe type" "temp"
    (672917 'move' call_tmp[672914](386681 call parSafe _mt[243] this[158862]))
    unknown call_tmp[672919] "expr temp" "maybe param" "maybe type" "temp"
    (672922 'move' call_tmp[672919](156563 call _cond_test call_tmp[672914]))
    if call_tmp[672919]
    {
      unknown call_tmp[672926] "expr temp" "maybe param" "maybe type" "temp"
      (672929 'move' call_tmp[672926](360820 call tableLock _mt[243] this[158862]))
      (156561 call(156557 call (partial) unlock _mt[243] call_tmp[672926]))
    }
    (520875 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).linksDistribution[156573](arg _mt[158868]:_MT[238], arg this[158866]:DefaultAssociativeDom[158856](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520879] "RVV" "param" "temp"
    (520884 'move' ret[520879](520883 'deref' 0))
    (520881 return ret[520879])
  }
  function DefaultAssociativeDom[158856](?).dsiLinksDistribution[156583](arg _mt[158872]:_MT[238], arg this[158870]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520888] "RVV" "temp"
    (520893 'move' ret[520888](520892 'deref' 0))
    (520890 return ret[520888])
  }
  function DefaultAssociativeDom[158856](?).init[156595](arg _mt[158876]:_MT[238], arg this[158874]:DefaultAssociativeDom[158856](?), arg idxType[156593]:_any[178](?), param arg parSafe[156598]:bool[10], arg dist[156603]:unmanaged DefaultDist[415444]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462037] "temporary of super field" "temp"
    (462045 'move' super_tmp[462037](462038 '.v' this[158874] c"super"))
    (462041 call init _mt[243] super_tmp[462037])
    (482093 'end of statement')
    unknown tmp[461953] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492351] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[672933] "expr temp" "maybe param" "maybe type" "temp"
      (672936 'move' call_tmp[672933](461955 '.v' this[158874] c"super"))
      (492355 'move' call_type_tmp[492351](461958 'typeof' call_tmp[672933]))
    }
    (461959 'move' tmp[461953] call_type_tmp[492351])
    unknown call_tmp[672938] "maybe param" "maybe type" "temp"
    (672941 'move' call_tmp[672938](461964 'cast' tmp[461953] this[158874]))
    unknown chpl__thisAsParent[461961] "dead at end of block" "insert auto destroy" "temp"
    (543958 'init var' chpl__thisAsParent[461961] call_tmp[672938] tmp[461953])
    (461967 'setcid' chpl__thisAsParent[461961])
    (482094 'end of statement')
    unknown call_tmp[672943] "expr temp" "maybe param" "maybe type" "temp"
    (672946 'move' call_tmp[672943](156609 call chpl__validDefaultAssocDomIdxType idxType[156593]))
    unknown call_tmp[672948] "expr temp" "maybe param" "maybe type" "temp"
    (672951 'move' call_tmp[672948](156610 call ! call_tmp[672943]))
    unknown call_tmp[672953] "expr temp" "maybe param" "maybe type" "temp"
    (672956 'move' call_tmp[672953](156655 call _cond_test call_tmp[672948]))
    if call_tmp[672953]
    {
      unknown call_tmp[672958] "expr temp" "maybe param" "maybe type" "temp"
      (672961 'move' call_tmp[672958](156633 call _cast string[26] idxType[156593]))
      (156653 call compilerError "Default Associative domains with idxType=" call_tmp[672958] " are not allowed" 2)
    }
    unknown tmp[461969] "temp" "type variable"
    (461971 'move' tmp[461969] idxType[156593])
    (461973 'init field' this[158874] c"idxType" tmp[461969])
    unknown call_tmp[672963] "expr temp" "maybe param" "maybe type" "temp"
    (672966 'move' call_tmp[672963](461978 call _cast bool[10] parSafe[156598]))
    (461980 'init field' this[158874] c"parSafe" call_tmp[672963])
    (482096 'end of statement')
    unknown tmp[461983] "temp"
    (461986 'init var' tmp[461983] dist[156603] unmanaged DefaultDist[415444])
    (461988 'init field' this[158874] c"dist" tmp[461983])
    (482097 'end of statement')
    unknown tmp[461992] "temp"
    unknown call_tmp[672968] "expr temp" "maybe param" "maybe type" "temp"
    (672971 'move' call_tmp[672968](461995 call chpl__processorAtomicType int(64)[13]))
    (461997 'default init var' tmp[461992] call_tmp[672968])
    (461999 '.=' this[158874] c"numEntries" tmp[461992])
    (482098 'end of statement')
    unknown tmp[462003] "temp"
    unknown tmp[569809] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569810] "maybe param" "temp"
    unknown call_tmp[672973] "expr temp" "maybe param" "maybe type" "temp"
    (672976 'move' call_tmp[672973](462017 '.v' this[158874] c"parSafe"))
    (569815 'move' tmp[569810](569813 call _cond_test call_tmp[672973]))
    if tmp[569810]
    {
      (569820 'move' tmp[569809](569817 '_paramFoldLogical' tmp[569810] chpl_LocalSpinlock[187386]))
    }
    {
      (569825 'move' tmp[569809](569822 '_paramFoldLogical' tmp[569810] nothing[7]))
    }
    (462011 'default init var' tmp[462003] tmp[569809])
    (462013 '.=' this[158874] c"tableLock" tmp[462003])
    (482099 'end of statement')
    unknown call_tmp[672978] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (672981 'move' call_tmp[672978](747949 'new' chpl__hashtable[204509](?) idxType[156593] nothing[7]))
    unknown call_tmp[672983] "expr temp" "maybe param" "maybe type" "temp"
    (672986 'move' call_tmp[672983](462032 '.v' this[158874] c"idxType"))
    unknown call_tmp[672988] "maybe param" "maybe type" "temp"
    (672991 'move' call_tmp[672988](462023 call chpl__hashtable[204509](?) call_tmp[672983] nothing[7]))
    unknown tmp[462020] "temp"
    (462026 'init var' tmp[462020] call_tmp[672978] call_tmp[672988])
    (462028 'init field' this[158874] c"table" tmp[462020])
    (482100 'end of statement')
    (462036 'setcid' this[158874])
    (482101 'end of statement')
    unknown call_tmp[672995] "expr temp" "maybe param" "maybe type" "temp"
    (672998 'move' call_tmp[672995](156708 call table _mt[243] this[158874]))
    unknown call_tmp[673002] "expr temp" "maybe param" "maybe type" "temp"
    (673005 'move' call_tmp[673002](156713 call rehashHelpers _mt[243] call_tmp[672995]))
    unknown call_tmp[673007] "expr temp" "maybe param" "maybe type" "temp"
    (673010 'move' call_tmp[673007](156721 call _cast _unmanagedNonNilable[223](?) this[158874]))
    unknown call_tmp[673012] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673015 'move' call_tmp[673012](747950 'new' DefaultAssociativeDomRehashHelper[386693](?) call_tmp[673007]))
    (156725 call = call_tmp[673002] call_tmp[673012])
    (520895 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).deinit[156732](arg _mt[158880]:_MT[238], arg this[158878]:DefaultAssociativeDom[158856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520897 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiBuildArray[156741](arg _mt[158884]:_MT[238], arg this[158882]:DefaultAssociativeDom[158856](?), arg eltType[156739]:_any[178](?), param arg initElts[156744]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520901] "RVV" "temp"
    unknown call_tmp[673019] "expr temp" "maybe param" "maybe type" "temp"
    (673022 'move' call_tmp[673019](386704 call idxType _mt[243] this[158882]))
    unknown call_tmp[673026] "expr temp" "maybe param" "maybe type" "temp"
    (673029 'move' call_tmp[673026](386709 call parSafe _mt[243] this[158882]))
    unknown call_tmp[673031] "expr temp" "maybe param" "maybe type" "temp"
    (673034 'move' call_tmp[673031](156761 call _to_unmanaged this[158882]))
    unknown call_tmp[673036] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (673039 'move' call_tmp[673036](747951 'new' DefaultAssociativeArr[386698](?)(eltType = eltType[156739])(idxType = call_tmp[673019])(parSafeDom = call_tmp[673026])(dom = call_tmp[673031])(initElts = initElts[156744])(_chpl_manager = unmanaged[220](?))))
    (520906 'move' ret[520901](520905 'deref' call_tmp[673036]))
    (520903 return ret[520901])
  }
  function DefaultAssociativeDom[158856](?).dsiSerialReadWrite[156775](arg _mt[158888]:_MT[238], arg this[158886]:DefaultAssociativeDom[158856](?), arg f[156773]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[673043] "maybe param" "maybe type" "temp"
    (673046 'move' call_tmp[673043](156782 call(156778 call (partial) binary _mt[243] f[156773])))
    unknown binary[156783] "dead at end of block" "insert auto destroy"
    (543960 'init var' binary[156783] call_tmp[673043])
    (156786 'end of statement')
    unknown call_tmp[673050] "expr temp" "maybe param" "maybe type" "temp"
    (673053 'move' call_tmp[673050](156789 call writing _mt[243] f[156773]))
    unknown call_tmp[673055] "expr temp" "maybe param" "maybe type" "temp"
    (673058 'move' call_tmp[673055](157124 call _cond_test call_tmp[673050]))
    if call_tmp[673055]
    {
      unknown call_tmp[673060] "expr temp" "maybe param" "maybe type" "temp"
      (673063 'move' call_tmp[673060](156932 call _cond_test binary[156783]))
      if call_tmp[673060]
      {
        unknown call_tmp[673067] "maybe param" "maybe type" "temp"
        (673070 'move' call_tmp[673067](386716 call dsiNumIndices _mt[243] this[158886]))
        unknown numIndices[156795] "dead at end of block" "insert auto destroy"
        (543962 'init var' numIndices[156795] call_tmp[673067] int(64)[13])
        (156798 'end of statement')
        (156802 call <~> f[156773] numIndices[156795])
        (482104 'end of statement' numIndices[156795])
        {
          unknown _indexOfInterest[156813] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156814] "expr temp" "temp"
          (156823 'move' _iterator[156814](156821 call _getIterator this[158886]))
          Defer
          {
            {
              (156839 call _freeIterator _iterator[156814])
            }
          }
          { scopeless type
            (156828 'move' _indexOfInterest[156813](156825 call iteratorIndex _iterator[156814]))
          }
          ForLoop[156815]
          {
            unknown idx[156832] "index var" "insert auto destroy"
            (482107 'end of statement')
            (156834 'move' idx[156832] _indexOfInterest[156813])
            (482108 'end of statement' idx[156832])
            {
              (156809 call <~> f[156773] idx[156832])
              (482110 'end of statement' idx[156832])
            }
            label _continueLabel[156818]
            _indexOfInterest[156813]
            _iterator[156814]
          }
          label _breakLabel[156819]
        }
      }
      {
        unknown first[156847] "dead at end of block" "insert auto destroy"
        (543964 'init var' first[156847] 1)
        (156850 'end of statement')
        unknown call_tmp[673072] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673075 'move' call_tmp[673072](747952 'new' ioLiteral[238753] "{"))
        (156858 call <~> f[156773] call_tmp[673072])
        (482112 'end of statement')
        {
          unknown _indexOfInterest[156890] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156891] "expr temp" "temp"
          (156900 'move' _iterator[156891](156898 call _getIterator this[158886]))
          Defer
          {
            {
              (156916 call _freeIterator _iterator[156891])
            }
          }
          { scopeless type
            (156905 'move' _indexOfInterest[156890](156902 call iteratorIndex _iterator[156891]))
          }
          ForLoop[156892]
          {
            unknown idx[156909] "index var" "insert auto destroy"
            (482114 'end of statement')
            (156911 'move' idx[156909] _indexOfInterest[156890])
            (482115 'end of statement' idx[156909])
            {
              unknown call_tmp[673077] "expr temp" "maybe param" "maybe type" "temp"
              (673080 'move' call_tmp[673077](156878 call _cond_test first[156847]))
              if call_tmp[673077]
              {
                (156866 call = first[156847] 0)
                (482117 'end of statement' first[156847])
              }
              {
                unknown call_tmp[673082] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (673085 'move' call_tmp[673082](747953 'new' ioLiteral[238753] ", "))
                (156875 call <~> f[156773] call_tmp[673082])
              }
              (156887 call <~> f[156773] idx[156909])
              (482120 'end of statement' idx[156909])
            }
            label _continueLabel[156895]
            _indexOfInterest[156890]
            _iterator[156891]
          }
          label _breakLabel[156896]
        }
        unknown call_tmp[673087] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673090 'move' call_tmp[673087](747954 'new' ioLiteral[238753] "}"))
        (156929 call <~> f[156773] call_tmp[673087])
      }
    }
    {
      (156939 call(386736 call (partial) dsiClear _mt[243] this[158886]))
      (482123 'end of statement')
      unknown call_tmp[673094] "expr temp" "maybe param" "maybe type" "temp"
      (673097 'move' call_tmp[673094](157120 call _cond_test binary[156783]))
      if call_tmp[673094]
      {
        unknown numIndices[156944] "dead at end of block" "insert auto destroy"
        (543966 'default init var' numIndices[156944] int(64)[13])
        (156947 'end of statement')
        (156951 call <~> f[156773] numIndices[156944])
        (482124 'end of statement' numIndices[156944])
        {
          unknown _indexOfInterest[156975] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156976] "expr temp" "temp"
          unknown call_tmp[673099] "expr temp" "maybe param" "maybe type" "temp"
          (673102 'move' call_tmp[673099](156990 call chpl_direct_range_iter 1 numIndices[156944] 1))
          (156985 'move' _iterator[156976](156983 call _getIterator call_tmp[673099]))
          Defer
          {
            {
              (157006 call _freeIterator _iterator[156976])
            }
          }
          { scopeless type
            (156995 'move' _indexOfInterest[156975](156992 call iteratorIndex _iterator[156976]))
          }
          ForLoop[156977]
          {
            unknown i[156999] "index var" "insert auto destroy"
            (482127 'end of statement')
            (157001 'move' i[156999] _indexOfInterest[156975])
            (482128 'end of statement' i[156999])
            {
              unknown idx[156960] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673106] "expr temp" "maybe param" "maybe type" "temp"
              (673109 'move' call_tmp[673106](386744 call idxType _mt[243] this[158886]))
              (543968 'default init var' idx[156960] call_tmp[673106])
              (156963 'end of statement')
              (156967 call <~> f[156773] idx[156960])
              (482130 'end of statement' idx[156960])
              (156973 call(386750 call (partial) dsiAdd _mt[243] this[158886]) idx[156960])
              (482132 'end of statement' idx[156960])
            }
            label _continueLabel[156980]
            _indexOfInterest[156975]
            _iterator[156976]
          }
          label _breakLabel[156981]
        }
      }
      {
        unknown call_tmp[673113] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673116 'move' call_tmp[673113](747955 'new' ioLiteral[238753] "{"))
        (157019 call <~> f[156773] call_tmp[673113])
        (482134 'end of statement')
        unknown first[157024] "dead at end of block" "insert auto destroy"
        (543970 'init var' first[157024] 1)
        (157027 'end of statement')
        unknown call_tmp[673118] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673121 'move' call_tmp[673118](747956 'new' ioLiteral[238753] "," 1))
        unknown comma[157034] "dead at end of block" "insert auto destroy"
        (543972 'init var' comma[157034] call_tmp[673118])
        (157037 'end of statement')
        unknown call_tmp[673123] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673126 'move' call_tmp[673123](747957 'new' ioLiteral[238753] "}"))
        unknown end[157043] "dead at end of block" "insert auto destroy"
        (543974 'init var' end[157043] call_tmp[673123])
        (157046 'end of statement')
        {
          unknown tmp[157099] "temp"
          (157117 'move' tmp[157099](157115 call _cond_test 1))
          WhileDo[157104]
          {
            {
              Try
              {
                {
                  (157050 call <~> f[156773] end[157043])
                  (482135 'end of statement' end[157043])
                  break _breakLabel[157103] _breakLabel[157103]
                }
              }
              Catch err : BadFormatError
              {
                unknown call_tmp[673128] "expr temp" "maybe param" "maybe type" "temp"
                (673131 'move' call_tmp[673128](354458 'current error'))
                unknown call_tmp[673133] "maybe param" "maybe type" "temp"
                (673136 'move' call_tmp[673133](354459 'dynamic_cast' unmanaged BadFormatError?[415606] call_tmp[673128]))
                unknown tmp[354455] "dead at end of block" "insert auto destroy" "temp"
                (543976 'init var' tmp[354455] call_tmp[673133])
                unknown call_tmp[673138] "expr temp" "maybe param" "maybe type" "temp"
                (673141 'move' call_tmp[673138](354462 '!=' tmp[354455] nil[44]))
                if call_tmp[673138]
                {
                  unknown call_tmp[673143] "expr temp" "maybe param" "maybe type" "temp"
                  (673146 'move' call_tmp[673143](354469 'to non nilable class' tmp[354455]))
                  unknown call_tmp[673148] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (673151 'move' call_tmp[673148](747958 'new' _owned[30](?) call_tmp[673143]))
                  unknown err[354468] "dead at end of block" "insert auto destroy"
                  (543978 'init var' err[354468] call_tmp[673148])
                  (482137 'end of statement')
                  {
                  }
                }
                {
                }
              }
              unknown call_tmp[673153] "expr temp" "maybe param" "maybe type" "temp"
              (673156 'move' call_tmp[673153](157067 call ! first[157024]))
              unknown call_tmp[673158] "expr temp" "maybe param" "maybe type" "temp"
              (673161 'move' call_tmp[673158](157074 call _cond_test call_tmp[673153]))
              if call_tmp[673158]
              {
                (157071 call <~> f[156773] comma[157034])
                (482138 'end of statement' comma[157034])
              }
              (157081 call = first[157024] 0)
              (482140 'end of statement' first[157024])
              unknown idx[157085] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673165] "expr temp" "maybe param" "maybe type" "temp"
              (673168 'move' call_tmp[673165](386768 call idxType _mt[243] this[158886]))
              (543980 'default init var' idx[157085] call_tmp[673165])
              (157088 'end of statement')
              (157091 call <~> f[156773] idx[157085])
              (482142 'end of statement' idx[157085])
              (157097 call(386774 call (partial) dsiAdd _mt[243] this[158886]) idx[157085])
              (482144 'end of statement' idx[157085])
            }
            label _continueLabel[157102]
            (157110 'move' tmp[157099](157108 call _cond_test 1))
            tmp[157099]
          }
          label _breakLabel[157103]
        }
      }
    }
    (520908 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiSerialWrite[157134](arg _mt[158892]:_MT[238], arg this[158890]:DefaultAssociativeDom[158856](?), arg f[157132]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157142 call(157137 call (partial) dsiSerialReadWrite _mt[243] this[158890]) f[157132])
    (520910 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiSerialRead[157151](arg _mt[158896]:_MT[238], arg this[158894]:DefaultAssociativeDom[158856](?), arg f[157149]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157159 call(157154 call (partial) dsiSerialReadWrite _mt[243] this[158894]) f[157149])
    (520912 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiAssignDomain[157170](arg _mt[158900]:_MT[238], arg this[158898]:DefaultAssociativeDom[158856](?), arg rhs[157167]:_domain[125902](?), arg lhsPrivate[157173]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (157180 call chpl_assignDomainWithIndsIterSafeForRemoving this[158898] rhs[157167])
    (520914 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiNumIndices[157187](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[520918] "RVV" "temp"
    unknown call_tmp[673178] "expr temp" "maybe param" "maybe type" "temp"
    (673181 'move' call_tmp[673178](360837 call numEntries _mt[243] this[158902]))
    unknown call_tmp[673185] "expr temp" "maybe param" "maybe type" "temp"
    (673188 'move' call_tmp[673185](157194 call(157190 call (partial) read _mt[243] call_tmp[673178])))
    (520923 'move' ret[520918](520922 'deref' call_tmp[673185]))
    (520920 return ret[520918])
  }
  function DefaultAssociativeDom[158856](?).dsiIndsIterSafeForRemoving[157202](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520927] "RVV" "temp"
    unknown call_tmp[673192] "expr temp" "maybe param" "maybe type" "temp"
    (673195 'move' call_tmp[673192](360842 call table _mt[243] this[158906]))
    unknown call_tmp[673199] "expr temp" "maybe param" "maybe type" "temp"
    (673202 'move' call_tmp[673199](157207 call postponeResize _mt[243] call_tmp[673192]))
    (157211 call = call_tmp[673199] 1)
    (482150 'end of statement')
    {
      unknown _indexOfInterest[157225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157226] "expr temp" "temp"
      unknown call_tmp[673206] "expr temp" "maybe param" "maybe type" "temp"
      (673209 'move' call_tmp[673206](157221 call(157217 call (partial) these _mt[243] this[158906])))
      (157235 'move' _iterator[157226](157233 call _getIterator call_tmp[673206]))
      Defer
      {
        {
          (157252 call _freeIterator _iterator[157226])
        }
      }
      { scopeless type
        (157241 'move' _indexOfInterest[157225](157238 call iteratorIndex _iterator[157226]))
      }
      ForLoop[157227]
      {
        unknown i[157245] "index var" "insert auto destroy"
        (482152 'end of statement')
        (157247 'move' i[157245] _indexOfInterest[157225])
        (482153 'end of statement' i[157245])
        unknown yret[520931] "YVV" "temp"
        (520934 'move' yret[520931](520933 'deref' i[157245]))
        (520936 yield yret[520931])
        (482155 'end of statement' i[157245])
        label _continueLabel[157230]
        _indexOfInterest[157225]
        _iterator[157226]
      }
      label _breakLabel[157231]
    }
    const tmp[157292] "const" "temp"
    unknown call_tmp[673211] "expr temp" "maybe param" "maybe type" "temp"
    (673214 'move' call_tmp[673211](157289 '_wide_get_locale' this[158906]))
    (157294 'move' tmp[157292](157290 'deref' call_tmp[673211]))
    (935255 call on_fn[935251] tmp[157292])
    function on_fn[935251](const in arg dummy_locale_arg[935253]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[673218] "expr temp" "maybe param" "maybe type" "temp"
        (673221 'move' call_tmp[673218](360848 call table _mt[243] this[158906]))
        unknown call_tmp[673225] "expr temp" "maybe param" "maybe type" "temp"
        (673228 'move' call_tmp[673225](157261 call postponeResize _mt[243] call_tmp[673218]))
        (157265 call = call_tmp[673225] 0)
        (482157 'end of statement')
        (157271 call(386788 call (partial) lockTable _mt[243] this[158906]))
        (482158 'end of statement')
        Defer
        {
          {
            (157275 call(386794 call (partial) unlockTable _mt[243] this[158906]))
          }
        }
        unknown call_tmp[673236] "expr temp" "maybe param" "maybe type" "temp"
        (673239 'move' call_tmp[673236](360853 call table _mt[243] this[158906]))
        (157287 call(157283 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673236]))
      }
      (935258 return _void[55])
    }
    {
    }
    (520929 return ret[520927])
  }
  function DefaultAssociativeDom[158856](?)._isSlotFull[157308](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158856](?), arg slot[157305]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520940] "RVV" "temp"
    unknown call_tmp[673245] "expr temp" "maybe param" "maybe type" "temp"
    (673248 'move' call_tmp[673245](360858 call table _mt[243] this[158910]))
    unknown call_tmp[673252] "expr temp" "maybe param" "maybe type" "temp"
    (673255 'move' call_tmp[673252](157317 call(157312 call (partial) table _mt[243] call_tmp[673245]) slot[157305]))
    unknown call_tmp[673259] "expr temp" "maybe param" "maybe type" "temp"
    (673262 'move' call_tmp[673259](157322 call(157318 call (partial) isFull _mt[243] call_tmp[673252])))
    (520946 'move' ret[520940](520945 'coerce' call_tmp[673259] bool[10]))
    (520942 return ret[520940])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158856](?).these[157331](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520950] "RVV" "temp"
    {
      unknown _indexOfInterest[157381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157382] "expr temp" "temp"
      unknown call_tmp[673266] "expr temp" "maybe param" "maybe type" "temp"
      (673269 'move' call_tmp[673266](360863 call table _mt[243] this[158914]))
      unknown call_tmp[673273] "expr temp" "maybe param" "maybe type" "temp"
      (673276 'move' call_tmp[673273](157341 call(157337 call (partial) allSlots _mt[243] call_tmp[673266])))
      (157391 'move' _iterator[157382](157389 call _getIterator call_tmp[673273]))
      Defer
      {
        {
          (157408 call _freeIterator _iterator[157382])
        }
      }
      { scopeless type
        (157397 'move' _indexOfInterest[157381](157394 call iteratorIndex _iterator[157382]))
      }
      ForLoop[157383]
      {
        unknown slot[157401] "index var" "insert auto destroy"
        (482163 'end of statement')
        (157403 'move' slot[157401] _indexOfInterest[157381])
        (482164 'end of statement' slot[157401])
        {
          unknown aSlot[157349] "dead at end of block" "ref var"
          unknown call_tmp[673280] "expr temp" "maybe param" "maybe type" "temp"
          (673283 'move' call_tmp[673280](360868 call table _mt[243] this[158914]))
          unknown call_tmp[673287] "expr temp" "maybe param" "maybe type" "temp"
          (673290 'move' call_tmp[673287](157348 call(157343 call (partial) table _mt[243] call_tmp[673280]) slot[157401]))
          (543983 'move' aSlot[157349](543982 'addr of' call_tmp[673287]))
          (157352 'end of statement' slot[157401])
          unknown call_tmp[673294] "expr temp" "maybe param" "maybe type" "temp"
          (673297 'move' call_tmp[673294](157357 call status _mt[243] aSlot[157349]))
          unknown call_tmp[673299] "expr temp" "maybe param" "maybe type" "temp"
          (673302 'move' call_tmp[673299](157366 call == call_tmp[673294] full[200404]))
          unknown call_tmp[673304] "expr temp" "maybe param" "maybe type" "temp"
          (673307 'move' call_tmp[673304](157377 call _cond_test call_tmp[673299]))
          if call_tmp[673304]
          {
            unknown yret[520954] "YVV" "temp"
            unknown call_tmp[673311] "expr temp" "maybe param" "maybe type" "temp"
            (673314 'move' call_tmp[673311](157371 call key _mt[243] aSlot[157349]))
            (520957 'move' yret[520954](520956 'deref' call_tmp[673311]))
            (520959 yield yret[520954])
            (482167 'end of statement' aSlot[157349])
          }
        }
        label _continueLabel[157386]
        _indexOfInterest[157381]
        _iterator[157382]
      }
      label _breakLabel[157387]
    }
    (520952 return ret[520950])
  }
  function DefaultAssociativeDom[158856](?).these[157424](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158856](?), param arg tag[157421]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520963] "RVV" "temp"
    unknown call_tmp[673316] "expr temp" "maybe param" "maybe type" "temp"
    (673319 'move' call_tmp[673316](157456 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[673316]
    {
      (157453 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157503] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157504] "expr temp" "temp"
      unknown call_tmp[673323] "expr temp" "maybe param" "maybe type" "temp"
      (673326 'move' call_tmp[673323](360877 call table _mt[243] this[158918]))
      unknown call_tmp[673330] "expr temp" "maybe param" "maybe type" "temp"
      (673333 'move' call_tmp[673330](157469 call(157463 call (partial) allSlots _mt[243] call_tmp[673323])(tag = tag[157421])))
      (157513 'move' _iterator[157504](157511 call _getIterator call_tmp[673330]))
      Defer
      {
        {
          (157530 call _freeIterator _iterator[157504])
        }
      }
      { scopeless type
        (157519 'move' _indexOfInterest[157503](157516 call iteratorIndex _iterator[157504]))
      }
      ForLoop[157505]
      {
        unknown slot[157523] "index var" "insert auto destroy"
        (482171 'end of statement')
        (157525 'move' slot[157523] _indexOfInterest[157503])
        (482172 'end of statement' slot[157523])
        {
          unknown aSlot[157477] "dead at end of block" "ref var"
          unknown call_tmp[673337] "expr temp" "maybe param" "maybe type" "temp"
          (673340 'move' call_tmp[673337](360882 call table _mt[243] this[158918]))
          unknown call_tmp[673344] "expr temp" "maybe param" "maybe type" "temp"
          (673347 'move' call_tmp[673344](157476 call(157471 call (partial) table _mt[243] call_tmp[673337]) slot[157523]))
          (543986 'move' aSlot[157477](543985 'addr of' call_tmp[673344]))
          (157480 'end of statement' slot[157523])
          unknown call_tmp[673351] "expr temp" "maybe param" "maybe type" "temp"
          (673354 'move' call_tmp[673351](157483 call status _mt[243] aSlot[157477]))
          unknown call_tmp[673356] "expr temp" "maybe param" "maybe type" "temp"
          (673359 'move' call_tmp[673356](157490 call == call_tmp[673351] full[200404]))
          unknown call_tmp[673361] "expr temp" "maybe param" "maybe type" "temp"
          (673364 'move' call_tmp[673361](157499 call _cond_test call_tmp[673356]))
          if call_tmp[673361]
          {
            unknown yret[520967] "YVV" "temp"
            unknown call_tmp[673368] "expr temp" "maybe param" "maybe type" "temp"
            (673371 'move' call_tmp[673368](157493 call key _mt[243] aSlot[157477]))
            (520970 'move' yret[520967](520969 'deref' call_tmp[673368]))
            (520972 yield yret[520967])
            (482175 'end of statement' aSlot[157477])
          }
        }
        label _continueLabel[157508]
        _indexOfInterest[157503]
        _iterator[157504]
      }
      label _breakLabel[157509]
    }
    (520965 return ret[520963])
  }
  where {
    (157431 call == tag[157421] standalone[451])
  }
  function DefaultAssociativeDom[158856](?).these[157546](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158856](?), param arg tag[157543]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520976] "RVV" "temp"
    unknown call_tmp[673373] "expr temp" "maybe param" "maybe type" "temp"
    (673376 'move' call_tmp[673373](157577 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[673373]
    {
      (157575 call writeln "*** In associative domain leader iterator")
    }
    {
      unknown _indexOfInterest[157599] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157600] "expr temp" "temp"
      unknown call_tmp[673380] "expr temp" "maybe param" "maybe type" "temp"
      (673383 'move' call_tmp[673380](360891 call table _mt[243] this[158922]))
      unknown call_tmp[673387] "expr temp" "maybe param" "maybe type" "temp"
      (673390 'move' call_tmp[673387](157591 call(157585 call (partial) allSlots _mt[243] call_tmp[673380])(tag = tag[157543])))
      (157609 'move' _iterator[157600](157607 call _getIterator call_tmp[673387]))
      Defer
      {
        {
          (157626 call _freeIterator _iterator[157600])
        }
      }
      { scopeless type
        (157615 'move' _indexOfInterest[157599](157612 call iteratorIndex _iterator[157600]))
      }
      ForLoop[157601]
      {
        unknown chunk[157619] "index var" "insert auto destroy"
        (482179 'end of statement')
        (157621 'move' chunk[157619] _indexOfInterest[157599])
        (482180 'end of statement' chunk[157619])
        unknown yret[520980] "YVV" "temp"
        unknown call_tmp[673392] "expr temp" "maybe param" "maybe type" "temp"
        (673395 'move' call_tmp[673392](157595 call _build_tuple chunk[157619] this[158922]))
        (520983 'move' yret[520980](520982 'deref' call_tmp[673392]))
        (520985 yield yret[520980])
        (482182 'end of statement' chunk[157619])
        label _continueLabel[157604]
        _indexOfInterest[157599]
        _iterator[157600]
      }
      label _breakLabel[157605]
    }
    (520978 return ret[520976])
  }
  where {
    (157553 call == tag[157543] leader[447])
  }
  function DefaultAssociativeDom[158856](?).these[157642](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158856](?), param arg tag[157639]:iterKind[453], arg followThis[157644]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520989] "RVV" "temp"
    unknown tmp[157659] "dead at end of block" "insert auto destroy" "temp"
    (543988 'init var' tmp[157659] followThis[157644])
    (157666 call _check_tuple_var_decl tmp[157659] 2)
    (482184 'end of statement')
    unknown call_tmp[673397] "maybe param" "maybe type" "temp"
    (673400 'move' call_tmp[673397](157660 call tmp[157659] 0))
    unknown chunk[157653] "dead at end of block" "insert auto destroy"
    (543990 'init var' chunk[157653] call_tmp[673397])
    unknown call_tmp[673402] "maybe param" "maybe type" "temp"
    (673405 'move' call_tmp[673402](157663 call tmp[157659] 1))
    unknown followThisDom[157655] "dead at end of block" "insert auto destroy"
    (543992 'init var' followThisDom[157655] call_tmp[673402])
    (157671 'end of statement')
    unknown call_tmp[673407] "expr temp" "maybe param" "maybe type" "temp"
    (673410 'move' call_tmp[673407](157695 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[673407]
    {
      (157693 call writeln "In associative domain follower code")
    }
    unknown call_tmp[673412] "maybe param" "maybe type" "temp"
    (673415 'move' call_tmp[673412](157702 call == followThisDom[157655] this[158926]))
    const sameDom[157704] "dead at end of block" "const" "insert auto destroy"
    (543994 'init var' sameDom[157704] call_tmp[673412])
    (157707 'end of statement')
    unknown call_tmp[673417] "expr temp" "maybe param" "maybe type" "temp"
    (673420 'move' call_tmp[673417](157709 call ! sameDom[157704]))
    unknown call_tmp[673422] "expr temp" "maybe param" "maybe type" "temp"
    (673425 'move' call_tmp[673422](157747 call _cond_test call_tmp[673417]))
    if call_tmp[673422]
    {
      unknown call_tmp[673429] "expr temp" "maybe param" "maybe type" "temp"
      (673432 'move' call_tmp[673429](157712 call dsiNumIndices _mt[243] followThisDom[157655]))
      unknown call_tmp[673436] "expr temp" "maybe param" "maybe type" "temp"
      (673439 'move' call_tmp[673436](157716 call dsiNumIndices _mt[243] this[158926]))
      unknown call_tmp[673441] "expr temp" "maybe param" "maybe type" "temp"
      (673444 'move' call_tmp[673441](157719 call != call_tmp[673429] call_tmp[673436]))
      unknown call_tmp[673446] "expr temp" "maybe param" "maybe type" "temp"
      (673449 'move' call_tmp[673446](157742 call _cond_test call_tmp[673441]))
      if call_tmp[673446]
      {
        (157740 call halt "zippered associative domains do not match")
      }
    }
    unknown call_tmp[673453] "expr temp" "maybe param" "maybe type" "temp"
    (673456 'move' call_tmp[673453](157753 call table _mt[243] followThisDom[157655]))
    unknown call_tmp[673460] "maybe param" "maybe type" "temp"
    (673463 'move' call_tmp[673460](157756 call table _mt[243] call_tmp[673453]))
    const otherTable[157759] "dead at end of block" "const" "insert auto destroy"
    (543996 'init var' otherTable[157759] call_tmp[673460])
    (157762 'end of statement' followThisDom[157655] followThisDom[157655])
    {
      unknown _indexOfInterest[157858] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157859] "expr temp" "temp"
      (157868 'move' _iterator[157859](157866 call _getIterator chunk[157653]))
      Defer
      {
        {
          (157884 call _freeIterator _iterator[157859])
        }
      }
      { scopeless type
        (157873 'move' _indexOfInterest[157858](157870 call iteratorIndex _iterator[157859]))
      }
      ForLoop[157860]
      {
        unknown slot[157877] "index var" "insert auto destroy"
        (482190 'end of statement')
        (157879 'move' slot[157877] _indexOfInterest[157858])
        (482191 'end of statement' slot[157877])
        {
          const aSlot[157769] "dead at end of block" "const" "ref var"
          unknown call_tmp[673465] "expr temp" "maybe param" "maybe type" "temp"
          (673468 'move' call_tmp[673465](157768 call otherTable[157759] slot[157877]))
          (543999 'move' aSlot[157769](543998 'addr of' call_tmp[673465]))
          (157772 'end of statement' otherTable[157759] slot[157877])
          unknown call_tmp[673472] "expr temp" "maybe param" "maybe type" "temp"
          (673475 'move' call_tmp[673472](157779 call(157775 call (partial) isFull _mt[243] aSlot[157769])))
          unknown call_tmp[673477] "expr temp" "maybe param" "maybe type" "temp"
          (673480 'move' call_tmp[673477](157854 call _cond_test call_tmp[673472]))
          if call_tmp[673477]
          {
            unknown idx[157781] "dead at end of block" "insert auto destroy"
            (544001 'init var' idx[157781] slot[157877])
            (157784 'end of statement' slot[157877])
            unknown call_tmp[673482] "expr temp" "maybe param" "maybe type" "temp"
            (673485 'move' call_tmp[673482](157787 call ! sameDom[157704]))
            unknown call_tmp[673487] "expr temp" "maybe param" "maybe type" "temp"
            (673490 'move' call_tmp[673487](157838 call _cond_test call_tmp[673482]))
            if call_tmp[673487]
            {
              unknown call_tmp[673494] "expr temp" "maybe param" "maybe type" "temp"
              (673497 'move' call_tmp[673494](360901 call table _mt[243] this[158926]))
              unknown call_tmp[673503] "expr temp" "maybe param" "maybe type" "temp"
              (673506 'move' call_tmp[673503](157801 call key _mt[243] aSlot[157769]))
              unknown call_tmp[673508] "maybe param" "maybe type" "temp"
              (673511 'move' call_tmp[673508](157805 call(157797 call (partial) findFullSlot _mt[243] call_tmp[673494]) call_tmp[673503]))
              const tmp[157806] "dead at end of block" "const" "insert auto destroy" "temp"
              (544003 'init var' tmp[157806] call_tmp[673508])
              (157813 call _check_tuple_var_decl tmp[157806] 2)
              (482196 'end of statement')
              unknown call_tmp[673513] "maybe param" "maybe type" "temp"
              (673516 'move' call_tmp[673513](157807 call tmp[157806] 0))
              const match[157789] "dead at end of block" "const" "insert auto destroy"
              (544005 'init var' match[157789] call_tmp[673513])
              unknown call_tmp[673518] "maybe param" "maybe type" "temp"
              (673521 'move' call_tmp[673518](157810 call tmp[157806] 1))
              const loc[157791] "dead at end of block" "const" "insert auto destroy"
              (544007 'init var' loc[157791] call_tmp[673518])
              (157818 'end of statement')
              unknown call_tmp[673523] "expr temp" "maybe param" "maybe type" "temp"
              (673526 'move' call_tmp[673523](157821 call ! match[157789]))
              unknown call_tmp[673528] "expr temp" "maybe param" "maybe type" "temp"
              (673531 'move' call_tmp[673528](157828 call _cond_test call_tmp[673523]))
              if call_tmp[673528]
              {
                (157826 call halt "zippered associative domains do not match")
              }
              (157835 call = idx[157781] loc[157791])
              (482198 'end of statement' idx[157781] loc[157791])
            }
            unknown yret[520993] "YVV" "temp"
            unknown call_tmp[673535] "expr temp" "maybe param" "maybe type" "temp"
            (673538 'move' call_tmp[673535](360907 call table _mt[243] this[158926]))
            unknown call_tmp[673542] "expr temp" "maybe param" "maybe type" "temp"
            (673545 'move' call_tmp[673542](157848 call(157843 call (partial) table _mt[243] call_tmp[673535]) idx[157781]))
            unknown call_tmp[673549] "expr temp" "maybe param" "maybe type" "temp"
            (673552 'move' call_tmp[673549](157849 call key _mt[243] call_tmp[673542]))
            (520996 'move' yret[520993](520995 'deref' call_tmp[673549]))
            (520998 yield yret[520993])
            (482201 'end of statement' idx[157781])
          }
        }
        label _continueLabel[157863]
        _indexOfInterest[157858]
        _iterator[157859]
      }
      label _breakLabel[157864]
    }
    (520991 return ret[520989])
  }
  where {
    (157651 call == tag[157639] follower[449])
  }
  function DefaultAssociativeDom[158856](?).dsiMyDist[157896](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521002] "RVV" "temp"
    unknown call_tmp[673556] "expr temp" "maybe param" "maybe type" "temp"
    (673559 'move' call_tmp[673556](386829 call dist _mt[243] this[158930]))
    (521008 'move' ret[521002](521007 'coerce' call_tmp[673556] unmanaged BaseDist[415468]))
    (521004 return ret[521002])
  }
  { scopeless type
    unmanaged BaseDist[415468]
  }
  function DefaultAssociativeDom[158856](?).dsiClear[157909](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const tmp[158088] "const" "temp"
    unknown call_tmp[673561] "expr temp" "maybe param" "maybe type" "temp"
    (673564 'move' call_tmp[673561](158085 '_wide_get_locale' this[158934]))
    (158090 'move' tmp[158088](158086 'deref' call_tmp[673561]))
    (935264 call on_fn[935260] tmp[158088])
    function on_fn[935260](const in arg dummy_locale_arg[935262]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (157914 call(386834 call (partial) lockTable _mt[243] this[158934]))
        (482204 'end of statement')
        {
          unknown _indexOfInterest[158032] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158033] "expr temp" "temp"
          unknown call_tmp[673570] "expr temp" "maybe param" "maybe type" "temp"
          (673573 'move' call_tmp[673570](360912 call table _mt[243] this[158934]))
          unknown call_tmp[673577] "expr temp" "maybe param" "maybe type" "temp"
          (673580 'move' call_tmp[673577](157923 call(157919 call (partial) allSlots _mt[243] call_tmp[673570])))
          (158042 'move' _iterator[158033](158040 call _getIterator call_tmp[673577]))
          Defer
          {
            {
              (158059 call _freeIterator _iterator[158033])
            }
          }
          { scopeless type
            (158048 'move' _indexOfInterest[158032](158045 call iteratorIndex _iterator[158033]))
          }
          ForLoop[158034]
          {
            unknown slot[158052] "index var" "insert auto destroy"
            (482206 'end of statement')
            (158054 'move' slot[158052] _indexOfInterest[158032])
            (482207 'end of statement' slot[158052])
            {
              unknown aSlot[157931] "dead at end of block" "ref var"
              unknown call_tmp[673584] "expr temp" "maybe param" "maybe type" "temp"
              (673587 'move' call_tmp[673584](360917 call table _mt[243] this[158934]))
              unknown call_tmp[673591] "expr temp" "maybe param" "maybe type" "temp"
              (673594 'move' call_tmp[673591](157930 call(157925 call (partial) table _mt[243] call_tmp[673584]) slot[158052]))
              (544010 'move' aSlot[157931](544009 'addr of' call_tmp[673591]))
              (157934 'end of statement' slot[158052])
              unknown call_tmp[673598] "expr temp" "maybe param" "maybe type" "temp"
              (673601 'move' call_tmp[673598](157941 call(157937 call (partial) isFull _mt[243] aSlot[157931])))
              unknown call_tmp[673603] "expr temp" "maybe param" "maybe type" "temp"
              (673606 'move' call_tmp[673603](158011 call _cond_test call_tmp[673598]))
              if call_tmp[673603]
              {
                unknown tmpKey[157943] "dead at end of block" "insert auto destroy"
                unknown call_tmp[673610] "expr temp" "maybe param" "maybe type" "temp"
                (673613 'move' call_tmp[673610](386840 call idxType _mt[243] this[158934]))
                (544012 'default init var' tmpKey[157943] call_tmp[673610])
                (157946 'end of statement')
                unknown tmpVal[157949] "dead at end of block" "insert auto destroy"
                (544014 'default init var' tmpVal[157949] nothing[7])
                (157952 'end of statement')
                unknown call_tmp[673617] "expr temp" "maybe param" "maybe type" "temp"
                (673620 'move' call_tmp[673617](360923 call table _mt[243] this[158934]))
                (157963 call(157956 call (partial) clearSlot _mt[243] call_tmp[673617]) aSlot[157931] tmpKey[157943] tmpVal[157949])
                (482210 'end of statement' aSlot[157931] tmpKey[157943] tmpVal[157949])
                {
                  unknown _indexOfInterest[157978] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[157979] "expr temp" "temp"
                  unknown call_tmp[673626] "expr temp" "maybe param" "maybe type" "temp"
                  (673629 'move' call_tmp[673626](386848 call _arrs _mt[243] this[158934]))
                  (157988 'move' _iterator[157979](157986 call _getIterator call_tmp[673626]))
                  Defer
                  {
                    {
                      (158004 call _freeIterator _iterator[157979])
                    }
                  }
                  { scopeless type
                    (157993 'move' _indexOfInterest[157978](157990 call iteratorIndex _iterator[157979]))
                  }
                  ForLoop[157980]
                  {
                    unknown arr[157997] "index var" "insert auto destroy"
                    (482215 'end of statement')
                    (157999 'move' arr[157997] _indexOfInterest[157978])
                    (482216 'end of statement' arr[157997])
                    {
                      (157975 call(157970 call (partial) _deinitSlot _mt[243] arr[157997]) slot[158052])
                      (482218 'end of statement' arr[157997] slot[158052])
                    }
                    label _continueLabel[157983]
                    _indexOfInterest[157978]
                    _iterator[157979]
                  }
                  label _breakLabel[157984]
                }
              }
              unknown call_tmp[673635] "expr temp" "maybe param" "maybe type" "temp"
              (673638 'move' call_tmp[673635](360929 call table _mt[243] this[158934]))
              unknown call_tmp[673642] "expr temp" "maybe param" "maybe type" "temp"
              (673645 'move' call_tmp[673642](158021 call(158016 call (partial) table _mt[243] call_tmp[673635]) slot[158052]))
              unknown call_tmp[673649] "expr temp" "maybe param" "maybe type" "temp"
              (673652 'move' call_tmp[673649](158022 call status _mt[243] call_tmp[673642]))
              (158029 call = call_tmp[673649] empty[200402])
              (482221 'end of statement' slot[158052])
            }
            label _continueLabel[158037]
            _indexOfInterest[158032]
            _iterator[158033]
          }
          label _breakLabel[158038]
        }
        unknown call_tmp[673656] "expr temp" "maybe param" "maybe type" "temp"
        (673659 'move' call_tmp[673656](360935 call numEntries _mt[243] this[158934]))
        (158072 call(158067 call (partial) write _mt[243] call_tmp[673656]) 0)
        (482223 'end of statement')
        unknown call_tmp[673665] "expr temp" "maybe param" "maybe type" "temp"
        (673668 'move' call_tmp[673665](360940 call table _mt[243] this[158934]))
        (158079 call(158075 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673665]))
        (482224 'end of statement')
        (158083 call(386854 call (partial) unlockTable _mt[243] this[158934]))
      }
      (935267 return _void[55])
    }
    {
    }
    (521010 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiMember[158105](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158856](?), arg idx[158102] :
  (386859 call idxType _mt[243] this[158938])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521014] "RVV" "temp"
    (158110 call(386863 call (partial) lockTable _mt[243] this[158938]))
    (482226 'end of statement')
    Defer
    {
      {
        (158115 call(386867 call (partial) unlockTable _mt[243] this[158938]))
      }
    }
    unknown call_tmp[673682] "expr temp" "maybe param" "maybe type" "temp"
    (673685 'move' call_tmp[673682](360945 call table _mt[243] this[158938]))
    unknown call_tmp[673689] "maybe param" "maybe type" "temp"
    (673692 'move' call_tmp[673689](158131 call(158126 call (partial) findFullSlot _mt[243] call_tmp[673682]) idx[158102]))
    unknown tmp[158132] "dead at end of block" "insert auto destroy" "temp"
    (544016 'init var' tmp[158132] call_tmp[673689])
    (158139 call _check_tuple_var_decl tmp[158132] 2)
    (482228 'end of statement')
    unknown call_tmp[673694] "maybe param" "maybe type" "temp"
    (673697 'move' call_tmp[673694](158133 call tmp[158132] 0))
    unknown foundFullSlot[158120] "dead at end of block" "insert auto destroy"
    (544018 'init var' foundFullSlot[158120] call_tmp[673694])
    unknown call_tmp[673699] "maybe param" "maybe type" "temp"
    (673702 'move' call_tmp[673699](158136 call tmp[158132] 1))
    unknown slotNum[158122] "dead at end of block" "insert auto destroy"
    (544020 'init var' slotNum[158122] call_tmp[673699])
    (158144 'end of statement')
    (521020 'move' ret[521014](521019 'coerce' foundFullSlot[158120] bool[10]))
    gotoReturn _end_dsiMember[521012] _end_dsiMember[521012]
    (482229 'end of statement' foundFullSlot[158120])
    label _end_dsiMember[521012]
    (521016 return ret[521014])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158856](?).dsiAdd[158155](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158856](?), in arg idx[158153]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521026] "RVV" "temp"
    unknown call_tmp[673706] "expr temp" "maybe param" "maybe type" "temp"
    (673709 'move' call_tmp[673706](158160 call(386875 call (partial) _addWrapper _mt[243] this[158942]) idx[158153]))
    unknown call_tmp[673711] "maybe param" "maybe type" "temp"
    (673714 'move' call_tmp[673711](158163 call call_tmp[673706] 1))
    const numInds[158164] "dead at end of block" "const" "insert auto destroy"
    (544022 'init var' numInds[158164] call_tmp[673711])
    (158167 'end of statement')
    (521031 'move' ret[521026](521030 'deref' numInds[158164]))
    gotoReturn _end_dsiAdd[521024] _end_dsiAdd[521024]
    (482231 'end of statement' numInds[158164])
    label _end_dsiAdd[521024]
    (521028 return ret[521026])
  }
  function DefaultAssociativeDom[158856](?)._addWrapper[158180](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158856](?), in arg idx[158177] :
  (386882 call idxType _mt[243] this[158946])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521037] "RVV" "temp"
    unknown call_tmp[673718] "maybe param" "maybe type" "temp"
    (673721 'move' call_tmp[673718](158183 call - 1))
    unknown slotNum[158185] "dead at end of block" "insert auto destroy"
    (544024 'init var' slotNum[158185] call_tmp[673718])
    (158188 'end of statement')
    unknown retVal[158191] "dead at end of block" "insert auto destroy"
    (544026 'init var' retVal[158191] 0)
    (158194 'end of statement')
    const tmp[158223] "const" "temp"
    unknown call_tmp[673723] "expr temp" "maybe param" "maybe type" "temp"
    (673726 'move' call_tmp[673723](158220 '_wide_get_locale' this[158946]))
    (158225 'move' tmp[158223](158221 'deref' call_tmp[673723]))
    (935273 call on_fn[935269] tmp[158223])
    function on_fn[935269](const in arg dummy_locale_arg[935271]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (158198 call(386887 call (partial) lockTable _mt[243] this[158946]))
        (482233 'end of statement')
        Defer
        {
          {
            (158203 call(386891 call (partial) unlockTable _mt[243] this[158946]))
          }
        }
        unknown tmp[492357] "expr temp" "maybe param" "maybe type" "temp"
        unknown tmp[492382] "maybe param" "temp"
        (492385 'move' tmp[492382](492383 'addr of' slotNum[158185]))
        unknown tmp[492393] "maybe param" "temp"
        (492396 'move' tmp[492393](492394 'addr of' retVal[158191]))
        (492358 'move' tmp[492357](158216 call(386899 call (partial) _add _mt[243] this[158946]) idx[158177]))
        { scopeless
          unknown call_tmp[673736] "expr temp" "maybe param" "maybe type" "temp"
          (673739 'move' call_tmp[673736](492364 call size _mt[243] tmp[492357]))
          unknown call_tmp[673741] "expr temp" "maybe param" "maybe type" "temp"
          (673744 'move' call_tmp[673741](492367 call != 2 call_tmp[673736]))
          unknown call_tmp[673746] "expr temp" "maybe param" "maybe type" "temp"
          (673749 'move' call_tmp[673746](492374 call _cond_test call_tmp[673741]))
          if call_tmp[673746]
          {
            (492370 call compilerError "tuple size must match the number of grouped variables" 0)
          }
        }
        unknown call_tmp[673751] "expr temp" "maybe param" "maybe type" "temp"
        (673754 'move' call_tmp[673751](492380 call tmp[492357] 0))
        (492387 call = tmp[492382] call_tmp[673751])
        unknown call_tmp[673756] "expr temp" "maybe param" "maybe type" "temp"
        (673759 'move' call_tmp[673756](492391 call tmp[492357] 1))
        (492398 call = tmp[492393] call_tmp[673756])
        (482235 'end of statement' slotNum[158185] retVal[158191])
      }
      (935276 return _void[55])
    }
    {
    }
    unknown call_tmp[673761] "expr temp" "maybe param" "maybe type" "temp"
    (673764 'move' call_tmp[673761](158234 call _build_tuple slotNum[158185] retVal[158191]))
    (521042 'move' ret[521037](521041 'deref' call_tmp[673761]))
    gotoReturn _end__addWrapper[521035] _end__addWrapper[521035]
    (482238 'end of statement' slotNum[158185] retVal[158191])
    label _end__addWrapper[521035]
    (521039 return ret[521037])
  }
  function DefaultAssociativeDom[158856](?)._add[158246](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158856](?), in arg idx[158243] :
  (386907 call idxType _mt[243] this[158950])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521048] "RVV" "temp"
    unknown foundFullSlot[158249] "dead at end of block" "insert auto destroy"
    (544028 'init var' foundFullSlot[158249] 0)
    (158252 'end of statement')
    unknown call_tmp[673768] "maybe param" "maybe type" "temp"
    (673771 'move' call_tmp[673768](158255 call - 1))
    unknown slotNum[158257] "dead at end of block" "insert auto destroy"
    (544030 'init var' slotNum[158257] call_tmp[673768])
    (158260 'end of statement')
    unknown tmp[492401] "expr temp" "maybe param" "maybe type" "temp"
    unknown tmp[492426] "maybe param" "temp"
    (492429 'move' tmp[492426](492427 'addr of' foundFullSlot[158249]))
    unknown tmp[492437] "maybe param" "temp"
    (492440 'move' tmp[492437](492438 'addr of' slotNum[158257]))
    unknown call_tmp[673775] "expr temp" "maybe param" "maybe type" "temp"
    (673778 'move' call_tmp[673775](360950 call table _mt[243] this[158950]))
    (492402 'move' tmp[492401](158274 call(158269 call (partial) findAvailableSlot _mt[243] call_tmp[673775]) idx[158243]))
    { scopeless
      unknown call_tmp[673784] "expr temp" "maybe param" "maybe type" "temp"
      (673787 'move' call_tmp[673784](492408 call size _mt[243] tmp[492401]))
      unknown call_tmp[673789] "expr temp" "maybe param" "maybe type" "temp"
      (673792 'move' call_tmp[673789](492411 call != 2 call_tmp[673784]))
      unknown call_tmp[673794] "expr temp" "maybe param" "maybe type" "temp"
      (673797 'move' call_tmp[673794](492418 call _cond_test call_tmp[673789]))
      if call_tmp[673794]
      {
        (492414 call compilerError "tuple size must match the number of grouped variables" 0)
      }
    }
    unknown call_tmp[673799] "expr temp" "maybe param" "maybe type" "temp"
    (673802 'move' call_tmp[673799](492424 call tmp[492401] 0))
    (492431 call = tmp[492426] call_tmp[673799])
    unknown call_tmp[673804] "expr temp" "maybe param" "maybe type" "temp"
    (673807 'move' call_tmp[673804](492435 call tmp[492401] 1))
    (492442 call = tmp[492437] call_tmp[673804])
    (482241 'end of statement' foundFullSlot[158249] slotNum[158257])
    unknown call_tmp[673809] "expr temp" "maybe param" "maybe type" "temp"
    (673812 'move' call_tmp[673809](158361 call _cond_test foundFullSlot[158249]))
    if call_tmp[673809]
    {
      unknown call_tmp[673814] "expr temp" "maybe param" "maybe type" "temp"
      (673817 'move' call_tmp[673814](158282 call _build_tuple slotNum[158257] 0))
      (521053 'move' ret[521048](521052 'deref' call_tmp[673814]))
      gotoReturn _end__add[521046] _end__add[521046]
      (482244 'end of statement' slotNum[158257])
    }
    {
      unknown call_tmp[673821] "expr temp" "maybe param" "maybe type" "temp"
      (673824 'move' call_tmp[673821](360955 call table _mt[243] this[158950]))
      (158297 call(158290 call (partial) fillSlot _mt[243] call_tmp[673821]) slotNum[158257] idx[158243] none[57])
      (482246 'end of statement' slotNum[158257])
      unknown call_tmp[673830] "expr temp" "maybe param" "maybe type" "temp"
      (673833 'move' call_tmp[673830](360960 call numEntries _mt[243] this[158950]))
      (158306 call(158301 call (partial) add _mt[243] call_tmp[673830]) 1)
      (482248 'end of statement')
      {
        unknown _indexOfInterest[158321] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158322] "expr temp" "temp"
        unknown call_tmp[673839] "expr temp" "maybe param" "maybe type" "temp"
        (673842 'move' call_tmp[673839](386919 call _arrs _mt[243] this[158950]))
        (158331 'move' _iterator[158322](158329 call _getIterator call_tmp[673839]))
        Defer
        {
          {
            (158347 call _freeIterator _iterator[158322])
          }
        }
        { scopeless type
          (158336 'move' _indexOfInterest[158321](158333 call iteratorIndex _iterator[158322]))
        }
        ForLoop[158323]
        {
          unknown arr[158340] "index var" "insert auto destroy"
          (482250 'end of statement')
          (158342 'move' arr[158340] _indexOfInterest[158321])
          (482251 'end of statement' arr[158340])
          {
            (158318 call(158313 call (partial) _defaultInitSlot _mt[243] arr[158340]) slotNum[158257])
            (482253 'end of statement' arr[158340] slotNum[158257])
          }
          label _continueLabel[158326]
          _indexOfInterest[158321]
          _iterator[158322]
        }
        label _breakLabel[158327]
      }
      unknown call_tmp[673846] "expr temp" "maybe param" "maybe type" "temp"
      (673849 'move' call_tmp[673846](158357 call _build_tuple slotNum[158257] 1))
      (521058 'move' ret[521048](521057 'deref' call_tmp[673846]))
      gotoReturn _end__add[521046] _end__add[521046]
      (482256 'end of statement' slotNum[158257])
    }
    label _end__add[521046]
    (521050 return ret[521048])
  }
  function DefaultAssociativeDom[158856](?).dsiRemove[158373](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158856](?), arg idx[158370] :
  (386926 call idxType _mt[243] this[158954])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521064] "RVV" "temp"
    unknown retval[158376] "dead at end of block" "insert auto destroy"
    (544032 'default init var' retval[158376] int(64)[13])
    (158379 'end of statement')
    const tmp[158518] "const" "temp"
    unknown call_tmp[673853] "expr temp" "maybe param" "maybe type" "temp"
    (673856 'move' call_tmp[673853](158515 '_wide_get_locale' this[158954]))
    (158520 'move' tmp[158518](158516 'deref' call_tmp[673853]))
    (935282 call on_fn[935278] tmp[158518])
    function on_fn[935278](const in arg dummy_locale_arg[935280]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (158384 call(386931 call (partial) lockTable _mt[243] this[158954]))
        (482258 'end of statement')
        Defer
        {
          {
            (158389 call(386935 call (partial) unlockTable _mt[243] this[158954]))
          }
        }
        unknown call_tmp[673864] "expr temp" "maybe param" "maybe type" "temp"
        (673867 'move' call_tmp[673864](360966 call table _mt[243] this[158954]))
        unknown call_tmp[673871] "maybe param" "maybe type" "temp"
        (673874 'move' call_tmp[673871](158405 call(158400 call (partial) findFullSlot _mt[243] call_tmp[673864]) idx[158370]))
        const tmp[158406] "dead at end of block" "const" "insert auto destroy" "temp"
        (544034 'init var' tmp[158406] call_tmp[673871])
        (158413 call _check_tuple_var_decl tmp[158406] 2)
        (482260 'end of statement')
        unknown call_tmp[673876] "maybe param" "maybe type" "temp"
        (673879 'move' call_tmp[673876](158407 call tmp[158406] 0))
        const foundSlot[158394] "dead at end of block" "const" "insert auto destroy"
        (544036 'init var' foundSlot[158394] call_tmp[673876])
        unknown call_tmp[673881] "maybe param" "maybe type" "temp"
        (673884 'move' call_tmp[673881](158410 call tmp[158406] 1))
        const slotNum[158396] "dead at end of block" "const" "insert auto destroy"
        (544038 'init var' slotNum[158396] call_tmp[673881])
        (158418 'end of statement')
        unknown call_tmp[673886] "expr temp" "maybe param" "maybe type" "temp"
        (673889 'move' call_tmp[673886](158504 call _cond_test foundSlot[158394]))
        if call_tmp[673886]
        {
          unknown tmpIdx[158421] "dead at end of block" "insert auto destroy"
          unknown call_tmp[673893] "expr temp" "maybe param" "maybe type" "temp"
          (673896 'move' call_tmp[673893](386942 call idxType _mt[243] this[158954]))
          (544040 'default init var' tmpIdx[158421] call_tmp[673893])
          (158424 'end of statement')
          unknown tmpVal[158427] "dead at end of block" "insert auto destroy"
          (544042 'default init var' tmpVal[158427] nothing[7])
          (158430 'end of statement')
          unknown call_tmp[673900] "expr temp" "maybe param" "maybe type" "temp"
          (673903 'move' call_tmp[673900](360971 call table _mt[243] this[158954]))
          (158439 call(158432 call (partial) clearSlot _mt[243] call_tmp[673900]) slotNum[158396] tmpIdx[158421] tmpVal[158427])
          (482261 'end of statement' slotNum[158396] tmpIdx[158421] tmpVal[158427])
          unknown call_tmp[673909] "expr temp" "maybe param" "maybe type" "temp"
          (673912 'move' call_tmp[673909](360976 call numEntries _mt[243] this[158954]))
          (158447 call(158442 call (partial) sub _mt[243] call_tmp[673909]) 1)
          (482265 'end of statement')
          {
            unknown _indexOfInterest[158460] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158461] "expr temp" "temp"
            unknown call_tmp[673918] "expr temp" "maybe param" "maybe type" "temp"
            (673921 'move' call_tmp[673918](386950 call _arrs _mt[243] this[158954]))
            (158470 'move' _iterator[158461](158468 call _getIterator call_tmp[673918]))
            Defer
            {
              {
                (158486 call _freeIterator _iterator[158461])
              }
            }
            { scopeless type
              (158475 'move' _indexOfInterest[158460](158472 call iteratorIndex _iterator[158461]))
            }
            ForLoop[158462]
            {
              unknown arr[158479] "index var" "insert auto destroy"
              (482267 'end of statement')
              (158481 'move' arr[158479] _indexOfInterest[158460])
              (482268 'end of statement' arr[158479])
              {
                (158457 call(158452 call (partial) _deinitSlot _mt[243] arr[158479]) slotNum[158396])
                (482270 'end of statement' arr[158479] slotNum[158396])
              }
              label _continueLabel[158465]
              _indexOfInterest[158460]
              _iterator[158461]
            }
            label _breakLabel[158466]
          }
          (158495 call = retval[158376] 1)
          (482273 'end of statement' retval[158376])
        }
        {
          (158500 call = retval[158376] 0)
          (482275 'end of statement' retval[158376])
        }
        unknown call_tmp[673927] "expr temp" "maybe param" "maybe type" "temp"
        (673930 'move' call_tmp[673927](360982 call table _mt[243] this[158954]))
        (158513 call(158509 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673927]))
      }
      (935285 return _void[55])
    }
    {
    }
    (521069 'move' ret[521064](521068 'deref' retval[158376]))
    gotoReturn _end_dsiRemove[521062] _end_dsiRemove[521062]
    (482278 'end of statement' retval[158376])
    label _end_dsiRemove[521062]
    (521066 return ret[521064])
  }
  function DefaultAssociativeDom[158856](?).dsiRequestCapacity[158537](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158856](?), arg numKeys[158534]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[158625] "const" "temp"
    unknown call_tmp[673934] "expr temp" "maybe param" "maybe type" "temp"
    (673937 'move' call_tmp[673934](158622 '_wide_get_locale' this[158958]))
    (158627 'move' tmp[158625](158623 'deref' call_tmp[673934]))
    (935291 call on_fn[935287] tmp[158625])
    function on_fn[935287](const in arg dummy_locale_arg[935289]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[673941] "expr temp" "maybe param" "maybe type" "temp"
        (673944 'move' call_tmp[673941](360987 call numEntries _mt[243] this[158958]))
        unknown call_tmp[673948] "maybe param" "maybe type" "temp"
        (673951 'move' call_tmp[673948](158545 call(158541 call (partial) read _mt[243] call_tmp[673941])))
        unknown entries[158546] "dead at end of block" "insert auto destroy"
        (544044 'init var' entries[158546] call_tmp[673948])
        (158549 'end of statement')
        unknown call_tmp[673953] "expr temp" "maybe param" "maybe type" "temp"
        (673956 'move' call_tmp[673953](158553 call < entries[158546] numKeys[158534]))
        unknown call_tmp[673958] "expr temp" "maybe param" "maybe type" "temp"
        (673961 'move' call_tmp[673958](158618 call _cond_test call_tmp[673953]))
        if call_tmp[673958]
        {
          (158557 call(386961 call (partial) lockTable _mt[243] this[158958]))
          (482280 'end of statement')
          Defer
          {
            {
              (158562 call(386965 call (partial) unlockTable _mt[243] this[158958]))
            }
          }
          unknown call_tmp[673969] "expr temp" "maybe param" "maybe type" "temp"
          (673972 'move' call_tmp[673969](360992 call table _mt[243] this[158958]))
          (158573 call(158568 call (partial) requestCapacity _mt[243] call_tmp[673969]) numKeys[158534])
        }
        {
          (158615 call warning "Requested capacity (" numKeys[158534] ") " "is less than current size (" entries[158546] ")")
          (482283 'end of statement' entries[158546])
        }
      }
      (935294 return _void[55])
    }
    {
    }
    (521073 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiSorted[158640](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158856](?), arg comparator[158638]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521077] "RVV" "temp"
    unknown tableCopy[158681] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter8[582945](arg iterator[582947]:_any[178](?), arg this[582983]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582994] "RVV" "temp"
      {
        unknown _indexOfInterest[582952] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582953] "expr temp" "temp"
        (582962 'move' _iterator[582953](582960 call _getIterator iterator[582947]))
        Defer
        {
          {
            (582976 call _freeIterator _iterator[582953])
          }
        }
        { scopeless type
          (582967 'move' _indexOfInterest[582952](582964 call iteratorIndex _iterator[582953]))
        }
        ForLoop[582954] for-expr
        {
          unknown slot[158679] "index var" "insert auto destroy" "no doc"
          (582987 'end of statement')
          (582971 'move' slot[158679] _indexOfInterest[582952])
          (582988 'end of statement' slot[158679])
          {
            {
              unknown yret[582998] "YVV" "temp"
              unknown call_tmp[583007] "expr temp" "maybe param" "maybe type" "temp"
              (583010 'move' call_tmp[583007](361002 call table _mt[243] this[582983]))
              unknown call_tmp[583014] "expr temp" "maybe param" "maybe type" "temp"
              (583017 'move' call_tmp[583014](158673 call(158668 call (partial) table _mt[243] call_tmp[583007]) slot[158679]))
              unknown call_tmp[583021] "expr temp" "maybe param" "maybe type" "temp"
              (583024 'move' call_tmp[583021](158674 call key _mt[243] call_tmp[583014]))
              (583001 'move' yret[582998](583000 'deref' call_tmp[583021]))
              (583003 yield yret[582998])
              (582990 'end of statement' slot[158679])
            }
          }
          label _continueLabel[582957]
          _indexOfInterest[582952]
          _iterator[582953]
        }
        label _breakLabel[582958]
      }
      (582996 return ret[582994])
    }
    function chpl__forexpr8[582925](arg iterExpr[582928]:_any[178](?), arg this[582932]:DefaultAssociativeDom[158856](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583029] "RVV" "temp"
      unknown _iterator[582935] "expr temp" "maybe ref" "temp"
      (582937 'move' _iterator[582935] iterExpr[582928])
      unknown call_tmp[583036] "expr temp" "maybe param" "maybe type" "temp"
      (583039 'move' call_tmp[583036](582940 call chpl__loopexpr_iter8 _iterator[582935] this[582932]))
      (583034 'move' ret[583029](583033 'deref' call_tmp[583036]))
      (583031 return ret[583029])
    }
    unknown call_tmp[583043] "expr temp" "maybe param" "maybe type" "temp"
    (583046 'move' call_tmp[583043](158666 call(386978 call (partial) _fullSlots _mt[243] this[158962])))
    unknown call_tmp[583048] "maybe param" "maybe type" "temp"
    (583051 'move' call_tmp[583048](582930 call chpl__forexpr8 call_tmp[583043] this[158962]))
    (583055 'iterator record set shape' call_tmp[583048] call_tmp[583043] 1)
    unknown call_tmp[673976] "expr temp" "maybe param" "maybe type" "temp"
    (673979 'move' call_tmp[673976](158647 call chpl_build_low_bounded_range 0))
    unknown call_tmp[673983] "expr temp" "maybe param" "maybe type" "temp"
    (673986 'move' call_tmp[673983](360997 call numEntries _mt[243] this[158962]))
    unknown call_tmp[673990] "expr temp" "maybe param" "maybe type" "temp"
    (673993 'move' call_tmp[673990](158654 call(158650 call (partial) read _mt[243] call_tmp[673983])))
    unknown call_tmp[673995] "expr temp" "maybe param" "maybe type" "temp"
    (673998 'move' call_tmp[673995](158655 call # call_tmp[673976] call_tmp[673990]))
    unknown call_tmp[674000] "expr temp" "maybe param" "maybe type" "temp"
    (674003 'move' call_tmp[674000](158659 call chpl__ensureDomainExpr call_tmp[673995]))
    unknown call_tmp[674007] "expr temp" "maybe param" "maybe type" "temp"
    (674010 'move' call_tmp[674007](386973 call idxType _mt[243] this[158962]))
    unknown call_tmp[674012] "maybe param" "maybe type" "temp"
    (674015 'move' call_tmp[674012](158661 call chpl__buildArrayRuntimeType call_tmp[674000] call_tmp[674007]))
    (544046 'init var' tableCopy[158681] call_tmp[583048] call_tmp[674012])
    (158684 'end of statement')
    (158690 call sort tableCopy[158681](comparator = comparator[158638]))
    (482285 'end of statement' tableCopy[158681])
    {
      unknown _indexOfInterest[158697] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158698] "expr temp" "temp"
      (158707 'move' _iterator[158698](158705 call _getIterator tableCopy[158681]))
      Defer
      {
        {
          (158723 call _freeIterator _iterator[158698])
        }
      }
      { scopeless type
        (158712 'move' _indexOfInterest[158697](158709 call iteratorIndex _iterator[158698]))
      }
      ForLoop[158699]
      {
        unknown ind[158716] "index var" "insert auto destroy"
        (482288 'end of statement')
        (158718 'move' ind[158716] _indexOfInterest[158697])
        (482289 'end of statement' ind[158716])
        unknown yret[521081] "YVV" "temp"
        (521084 'move' yret[521081](521083 'deref' ind[158716]))
        (521086 yield yret[521081])
        (482291 'end of statement' ind[158716])
        label _continueLabel[158702]
        _indexOfInterest[158697]
        _iterator[158698]
      }
      label _breakLabel[158703]
    }
    (521079 return ret[521077])
    (355157 'used modules list'(158643 'use' Sort[267968]))
  }
  function DefaultAssociativeDom[158856](?)._fullSlots[158734](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521090] "RVV" "temp"
    {
      unknown _indexOfInterest[158761] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158762] "expr temp" "temp"
      unknown call_tmp[674019] "expr temp" "maybe param" "maybe type" "temp"
      (674022 'move' call_tmp[674019](361007 call table _mt[243] this[158966]))
      unknown call_tmp[674026] "expr temp" "maybe param" "maybe type" "temp"
      (674029 'move' call_tmp[674026](158742 call(158738 call (partial) allSlots _mt[243] call_tmp[674019])))
      (158771 'move' _iterator[158762](158769 call _getIterator call_tmp[674026]))
      Defer
      {
        {
          (158788 call _freeIterator _iterator[158762])
        }
      }
      { scopeless type
        (158777 'move' _indexOfInterest[158761](158774 call iteratorIndex _iterator[158762]))
      }
      ForLoop[158763]
      {
        unknown slot[158781] "index var" "insert auto destroy"
        (482294 'end of statement')
        (158783 'move' slot[158781] _indexOfInterest[158761])
        (482295 'end of statement' slot[158781])
        {
          unknown call_tmp[674033] "expr temp" "maybe param" "maybe type" "temp"
          (674036 'move' call_tmp[674033](361012 call table _mt[243] this[158966]))
          unknown call_tmp[674040] "expr temp" "maybe param" "maybe type" "temp"
          (674043 'move' call_tmp[674040](158751 call(158746 call (partial) isSlotFull _mt[243] call_tmp[674033]) slot[158781]))
          unknown call_tmp[674045] "expr temp" "maybe param" "maybe type" "temp"
          (674048 'move' call_tmp[674045](158756 call _cond_test call_tmp[674040]))
          if call_tmp[674045]
          {
            unknown yret[521094] "YVV" "temp"
            (521097 'move' yret[521094](521096 'deref' slot[158781]))
            (521099 yield yret[521094])
            (482297 'end of statement' slot[158781])
          }
        }
        label _continueLabel[158766]
        _indexOfInterest[158761]
        _iterator[158762]
      }
      label _breakLabel[158767]
    }
    (521092 return ret[521090])
  }
  function DefaultAssociativeDom[158856](?).dsiHasSingleLocalSubdomain[158800](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158856](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521103] "RVV" "param" "temp"
    (521108 'move' ret[521103](521107 'deref' 1))
    (521105 return ret[521103])
  }
  function DefaultAssociativeDom[158856](?).dsiLocalSubdomain[158814](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158856](?), arg loc[158811]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521112] "RVV" "temp"
    unknown call_tmp[674050] "expr temp" "maybe param" "maybe type" "temp"
    (674053 'move' call_tmp[674050](158817 '_wide_get_locale' this[158974]))
    unknown call_tmp[674055] "expr temp" "maybe param" "maybe type" "temp"
    (674058 'move' call_tmp[674055](158818 call chpl_localeID_to_locale call_tmp[674050]))
    unknown call_tmp[674060] "expr temp" "maybe param" "maybe type" "temp"
    (674063 'move' call_tmp[674060](158821 call == call_tmp[674055] loc[158811]))
    unknown call_tmp[674065] "expr temp" "maybe param" "maybe type" "temp"
    (674068 'move' call_tmp[674065](158848 call _cond_test call_tmp[674060]))
    if call_tmp[674065]
    {
      unknown call_tmp[674070] "expr temp" "maybe param" "maybe type" "temp"
      (674073 'move' call_tmp[674070](158827 call _to_unmanaged this[158974]))
      unknown call_tmp[674075] "expr temp" "maybe param" "maybe type" "temp"
      (674078 'move' call_tmp[674075](158829 call _getDomain call_tmp[674070]))
      (521117 'move' ret[521112](521116 'deref' call_tmp[674075]))
      gotoReturn _end_dsiLocalSubdomain[521110] _end_dsiLocalSubdomain[521110]
    }
    {
      unknown a[158840] "dead at end of block" "insert auto destroy"
      unknown call_tmp[674082] "expr temp" "maybe param" "maybe type" "temp"
      (674085 'move' call_tmp[674082](386993 call idxType _mt[243] this[158974]))
      unknown call_tmp[674089] "expr temp" "maybe param" "maybe type" "temp"
      (674092 'move' call_tmp[674089](386998 call parSafe _mt[243] this[158974]))
      unknown call_tmp[674094] "expr temp" "maybe param" "maybe type" "temp"
      (674097 'move' call_tmp[674094](158838 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[674082](parSafe = call_tmp[674089])))
      (544048 'default init var' a[158840] call_tmp[674094])
      (158843 'end of statement')
      (521122 'move' ret[521112](521121 'deref' a[158840]))
      gotoReturn _end_dsiLocalSubdomain[521110] _end_dsiLocalSubdomain[521110]
      (482301 'end of statement' a[158840])
    }
    label _end_dsiLocalSubdomain[521110]
    (521114 return ret[521112])
  }
  function DefaultAssociativeDom[158856](?).super[810439](arg _mt[810441]:_MT[238], arg this[810443]:DefaultAssociativeDom[158856](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810453] "RVV" "temp"
    unknown call_tmp[810460] "expr temp" "maybe param" "maybe type" "temp"
    (810463 'move' call_tmp[810460](810447 '.v' this[810443] c"super"))
    (810458 'move' ret[810453](810457 'deref' call_tmp[810460]))
    (810455 return ret[810453])
  }
  function DefaultAssociativeDom[810470](?).idxType[810465](arg _mt[810467]:_MT[238], arg this[810472]:DefaultAssociativeDom[810470](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810507] "RVV" "temp" "type variable"
    unknown borrowOfThis[810474]
    (810499 'end of statement')
    (810476 'move' borrowOfThis[810474](810479 call _cast _borrowedNonNilable[214](?) this[810472]))
    (810500 'end of statement' borrowOfThis[810474])
    unknown call_tmp[810521] "expr temp" "maybe param" "maybe type" "temp"
    (810524 'move' call_tmp[810521](810489 'is bound' borrowOfThis[810474] c"idxType"))
    if call_tmp[810521]
    {
      unknown call_tmp[810526] "expr temp" "maybe param" "maybe type" "temp"
      (810529 'move' call_tmp[810526](810484 '.v' borrowOfThis[810474] c"idxType"))
      unknown call_tmp[810531] "expr temp" "maybe param" "maybe type" "temp"
      (810534 'move' call_tmp[810531](810485 call chpl_checkLegalTypeFieldAccessor this[810472] call_tmp[810526] "idxType"))
      (810512 'move' ret[810507](810511 'deref' call_tmp[810531]))
      gotoReturn _end_idxType[810505] _end_idxType[810505]
      (810502 'end of statement' borrowOfThis[810474])
    }
    {
      (810517 'move' ret[810507](810516 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810505] _end_idxType[810505]
    }
    label _end_idxType[810505]
    (810509 return ret[810507])
  }
  function DefaultAssociativeDom[810470](?).idxType[810536](arg _mt[810538]:_MT[238], arg this[810540]:DefaultAssociativeDom[810470](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810575] "RVV" "temp" "type variable"
    unknown borrowOfThis[810542] "type variable"
    (810567 'end of statement')
    (810544 'move' borrowOfThis[810542](810547 call _cast _borrowedNonNilable[214](?) this[810540]))
    (810568 'end of statement' borrowOfThis[810542])
    unknown call_tmp[810589] "expr temp" "maybe param" "maybe type" "temp"
    (810592 'move' call_tmp[810589](810557 'is bound' borrowOfThis[810542] c"idxType"))
    if call_tmp[810589]
    {
      unknown call_tmp[810594] "expr temp" "maybe param" "maybe type" "temp"
      (810597 'move' call_tmp[810594](810552 '.v' borrowOfThis[810542] c"idxType"))
      unknown call_tmp[810599] "expr temp" "maybe param" "maybe type" "temp"
      (810602 'move' call_tmp[810599](810553 call chpl_checkLegalTypeFieldAccessor this[810540] call_tmp[810594] "idxType"))
      (810580 'move' ret[810575](810579 'deref' call_tmp[810599]))
      gotoReturn _end_idxType[810573] _end_idxType[810573]
      (810570 'end of statement' borrowOfThis[810542])
    }
    {
      (810585 'move' ret[810575](810584 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810573] _end_idxType[810573]
    }
    label _end_idxType[810573]
    (810577 return ret[810575])
  }
  function DefaultAssociativeDom[810470](?).parSafe[810604](arg _mt[810606]:_MT[238], arg this[810608]:DefaultAssociativeDom[810470](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810639] "RVV" "param" "temp"
    unknown borrowOfThis[810610]
    (810631 'end of statement')
    (810612 'move' borrowOfThis[810610](810615 call _cast _borrowedNonNilable[214](?) this[810608]))
    (810632 'end of statement' borrowOfThis[810610])
    unknown call_tmp[810653] "expr temp" "maybe param" "maybe type" "temp"
    (810656 'move' call_tmp[810653](810621 'is bound' borrowOfThis[810610] c"parSafe"))
    if call_tmp[810653]
    {
      unknown call_tmp[810658] "expr temp" "maybe param" "maybe type" "temp"
      (810661 'move' call_tmp[810658](810620 '.' borrowOfThis[810610] c"parSafe"))
      (810644 'move' ret[810639](810643 'deref' call_tmp[810658]))
      gotoReturn _end_parSafe[810637] _end_parSafe[810637]
      (810634 'end of statement' borrowOfThis[810610])
    }
    {
      (810649 'move' ret[810639](810648 'deref' ?[260]))
      gotoReturn _end_parSafe[810637] _end_parSafe[810637]
    }
    label _end_parSafe[810637]
    (810641 return ret[810639])
  }
  function DefaultAssociativeDom[810470](?).parSafe[810663](arg _mt[810665]:_MT[238], arg this[810667]:DefaultAssociativeDom[810470](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810698] "RVV" "param" "temp"
    unknown borrowOfThis[810669] "type variable"
    (810690 'end of statement')
    (810671 'move' borrowOfThis[810669](810674 call _cast _borrowedNonNilable[214](?) this[810667]))
    (810691 'end of statement' borrowOfThis[810669])
    unknown call_tmp[810712] "expr temp" "maybe param" "maybe type" "temp"
    (810715 'move' call_tmp[810712](810680 'is bound' borrowOfThis[810669] c"parSafe"))
    if call_tmp[810712]
    {
      unknown call_tmp[810717] "expr temp" "maybe param" "maybe type" "temp"
      (810720 'move' call_tmp[810717](810679 '.' borrowOfThis[810669] c"parSafe"))
      (810703 'move' ret[810698](810702 'deref' call_tmp[810717]))
      gotoReturn _end_parSafe[810696] _end_parSafe[810696]
      (810693 'end of statement' borrowOfThis[810669])
    }
    {
      (810708 'move' ret[810698](810707 'deref' ?[260]))
      gotoReturn _end_parSafe[810696] _end_parSafe[810696]
    }
    label _end_parSafe[810696]
    (810700 return ret[810698])
  }
  function DefaultAssociativeDom[158856](?).dist[810722](arg _mt[810724]:_MT[238], arg this[810726]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810736] "RVV" "temp"
    unknown call_tmp[810743] "expr temp" "maybe param" "maybe type" "temp"
    (810746 'move' call_tmp[810743](810730 '.' this[810726] c"dist"))
    (810741 'move' ret[810736](810740 'addr of' call_tmp[810743]))
    (810738 return ret[810736])
  }
  function DefaultAssociativeDom[158856](?).numEntries[810748](arg _mt[810750]:_MT[238], arg this[810752]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810762] "RVV" "temp"
    unknown call_tmp[810769] "expr temp" "maybe param" "maybe type" "temp"
    (810772 'move' call_tmp[810769](810756 '.' this[810752] c"numEntries"))
    (810767 'move' ret[810762](810766 'addr of' call_tmp[810769]))
    (810764 return ret[810762])
  }
  function DefaultAssociativeDom[158856](?).tableLock[810774](arg _mt[810776]:_MT[238], arg this[810778]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810788] "RVV" "temp"
    unknown call_tmp[810795] "expr temp" "maybe param" "maybe type" "temp"
    (810798 'move' call_tmp[810795](810782 '.' this[810778] c"tableLock"))
    (810793 'move' ret[810788](810792 'addr of' call_tmp[810795]))
    (810790 return ret[810788])
  }
  function DefaultAssociativeDom[158856](?).table[810800](arg _mt[810802]:_MT[238], arg this[810804]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810814] "RVV" "temp"
    unknown call_tmp[810821] "expr temp" "maybe param" "maybe type" "temp"
    (810824 'move' call_tmp[810821](810808 '.' this[810804] c"table"))
    (810819 'move' ret[810814](810818 'addr of' call_tmp[810821]))
    (810816 return ret[810814])
  }
  function DefaultAssociativeDom[158856](?).writeThis[810826](arg _mt[810830]:_MT[238], arg this[810828]:DefaultAssociativeDom[158856](?), arg f[810829]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810835 call writeThisDefaultImpl f[810829] this[810828])
    (810840 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).readThis[810842](arg _mt[810846]:_MT[238], arg this[810844]:DefaultAssociativeDom[158856](?), arg f[810845]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810850 call readThisDefaultImpl f[810845] this[810844])
    (810856 return _void[55])
  }
  type DefaultAssociativeDom[158856](?) val super[355688]:BaseAssociativeDom[148812] "super class" unknown idxType[156490] "type variable" unknown parSafe[156494] "param" bool[10] val dist[156500]:unmanaged DefaultDist[415444] unmanaged DefaultDist[415444] unknown numEntries[156508](156507 call chpl__processorAtomicType int(64)[13]) unknown tableLock[156518](156515 IfExpr  parSafe[156494] then
  { scopeless
    chpl_LocalSpinlock[187386]
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156527](156526 call chpl__hashtable[204509](?) idxType[156490] nothing[7])
  type DefaultAssociativeDom[810470](?)
  type unmanaged DefaultAssociativeDom[415471](?)
  type DefaultAssociativeDom[378026](?)
  function DefaultAssociativeArr[161418](?).init[159031](arg _mt[161422]:_MT[238], arg this[161420]:DefaultAssociativeArr[161418](?), arg eltType[159029]:_any[178](?), arg idxType[159033]:_any[178](?), param arg parSafeDom[159035]:_any[178](?), arg dom[159044] :
  (159042 call unmanaged DefaultAssociativeDom[415471](?) idxType[159033](parSafe = parSafeDom[159035])), param arg initElts[159047]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[462049] "temporary of super field" "temp"
    (462051 'move' super_tmp[462049](462048 '.v' this[161420] c"super"))
    (159056 call(159050 call (partial) init _mt[243] super_tmp[462049])(eltType = eltType[159029]))
    (482303 'end of statement')
    unknown tmp[462054] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492445] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[674101] "expr temp" "maybe param" "maybe type" "temp"
      (674104 'move' call_tmp[674101](462056 '.v' this[161420] c"super"))
      (492449 'move' call_type_tmp[492445](462059 'typeof' call_tmp[674101]))
    }
    (462060 'move' tmp[462054] call_type_tmp[492445])
    unknown call_tmp[674106] "maybe param" "maybe type" "temp"
    (674109 'move' call_tmp[674106](462065 'cast' tmp[462054] this[161420]))
    unknown chpl__thisAsParent[462062] "dead at end of block" "insert auto destroy" "temp"
    (544050 'init var' chpl__thisAsParent[462062] call_tmp[674106] tmp[462054])
    (462068 'setcid' chpl__thisAsParent[462062])
    (482304 'end of statement')
    unknown tmp[462070] "temp" "type variable"
    (462072 'move' tmp[462070] idxType[159033])
    (462074 'init field' this[161420] c"idxType" tmp[462070])
    unknown call_tmp[674111] "expr temp" "maybe param" "maybe type" "temp"
    (674114 'move' call_tmp[674111](462079 call _cast bool[10] parSafeDom[159035]))
    (462081 'init field' this[161420] c"parSafeDom" call_tmp[674111])
    (482305 'end of statement')
    unknown call_tmp[674116] "expr temp" "maybe param" "maybe type" "temp"
    (674119 'move' call_tmp[674116](462097 '.v' this[161420] c"idxType"))
    unknown call_tmp[674121] "expr temp" "maybe param" "maybe type" "temp"
    (674124 'move' call_tmp[674121](462100 '.v' this[161420] c"parSafeDom"))
    unknown call_tmp[674126] "maybe param" "maybe type" "temp"
    (674129 'move' call_tmp[674126](462087 call unmanaged DefaultAssociativeDom[415471](?) call_tmp[674116](parSafe = call_tmp[674121])))
    unknown tmp[462084] "temp"
    (462091 'init var' tmp[462084] dom[159044] call_tmp[674126])
    (462093 'init field' this[161420] c"dom" tmp[462084])
    (482306 'end of statement')
    unknown call_tmp[674133] "expr temp" "maybe param" "maybe type" "temp"
    (674136 'move' call_tmp[674133](159086 call table _mt[243] dom[159044]))
    unknown call_tmp[674140] "maybe param" "maybe type" "temp"
    (674143 'move' call_tmp[674140](159091 call tableSize _mt[243] call_tmp[674133]))
    unknown tableSize[159094] "dead at end of block" "insert auto destroy"
    (544052 'init var' tableSize[159094] call_tmp[674140])
    (159097 'end of statement')
    val tmp[462103]:int(64)[13] "temp"
    (462106 'default init var' tmp[462103] int(64)[13])
    (462110 '.=' this[161420] c"dataSize" tmp[462103])
    (482307 'end of statement')
    unknown call_tmp[674147] "expr temp" "maybe param" "maybe type" "temp"
    (674150 'move' call_tmp[674147](159103 call table _mt[243] dom[159044]))
    unknown call_tmp[674154] "maybe param" "maybe type" "temp"
    (674157 'move' call_tmp[674154](159114 call(159108 call (partial) allocateData _mt[243] call_tmp[674147]) tableSize[159094] eltType[159029]))
    unknown call_tmp[674159] "expr temp" "maybe param" "maybe type" "temp"
    (674162 'move' call_tmp[674159](462125 '.v' this[161420] c"eltType"))
    unknown call_tmp[674164] "maybe param" "maybe type" "temp"
    (674167 'move' call_tmp[674164](462117 call _ddata[11695](?) call_tmp[674159]))
    unknown tmp[462114] "temp"
    (462119 'init var' tmp[462114] call_tmp[674154] call_tmp[674164])
    (462121 'init field' this[161420] c"data" tmp[462114])
    (482308 'end of statement' tableSize[159094])
    unknown call_tmp[674169] "expr temp" "maybe param" "maybe type" "temp"
    (674172 'move' call_tmp[674169](462139 '.v' this[161420] c"eltType"))
    unknown call_tmp[674174] "maybe param" "maybe type" "temp"
    (674177 'move' call_tmp[674174](462131 call _ddata[11695](?) call_tmp[674169]))
    unknown tmp[462128] "temp"
    (462133 'init var' tmp[462128] nil[44] call_tmp[674174])
    (462135 'init field' this[161420] c"tmpData" tmp[462128])
    (482310 'end of statement')
    unknown tmp[462142] "temp"
    (462144 'init var' tmp[462142] initElts[159047])
    (462146 '.=' this[161420] c"eltsNeedDeinit" tmp[462142])
    (482311 'end of statement')
    (462151 'setcid' this[161420])
    (482312 'end of statement')
    unknown call_tmp[674179] "expr temp" "maybe param" "maybe type" "temp"
    (674182 'move' call_tmp[674179](159282 call _cond_test initElts[159047]))
    if call_tmp[674179]
    {
      unknown call_tmp[674186] "expr temp" "maybe param" "maybe type" "temp"
      (674189 'move' call_tmp[674186](159148 call eltType _mt[243] this[161420]))
      unknown call_tmp[674191] "expr temp" "maybe param" "maybe type" "temp"
      (674194 'move' call_tmp[674191](159152 call isNonNilableClass call_tmp[674186]))
      unknown call_tmp[674196] "expr temp" "maybe param" "maybe type" "temp"
      (674199 'move' call_tmp[674196](159276 call _cond_test call_tmp[674191]))
      if call_tmp[674196]
      {
        unknown call_tmp[674201] "expr temp" "maybe param" "maybe type" "temp"
        (674204 'move' call_tmp[674201](159187 call + "Cannot default initialize associative array because" " element type "))
        unknown call_tmp[674206] "expr temp" "maybe param" "maybe type" "temp"
        (674209 'move' call_tmp[674206](159191 call _cast string[26] eltType[159029]))
        unknown call_tmp[674211] "expr temp" "maybe param" "maybe type" "temp"
        (674214 'move' call_tmp[674211](159193 call + call_tmp[674201] call_tmp[674206]))
        unknown call_tmp[674216] "maybe param" "maybe type" "temp"
        (674219 'move' call_tmp[674216](159212 call + call_tmp[674211] " is a non-nilable class"))
        unknown msg[159214] "dead at end of block" "param"
        (544054 'init var' msg[159214] call_tmp[674216])
        (159217 'end of statement')
        (159222 call compilerError msg[159214])
      }
      {
        unknown call_tmp[674223] "expr temp" "maybe param" "maybe type" "temp"
        (674226 'move' call_tmp[674223](159226 call eltType _mt[243] this[161420]))
        unknown call_tmp[674228] "expr temp" "maybe param" "maybe type" "temp"
        (674231 'move' call_tmp[674228](159230 call isDefaultInitializable call_tmp[674223]))
        unknown call_tmp[674233] "expr temp" "maybe param" "maybe type" "temp"
        (674236 'move' call_tmp[674233](159231 call ! call_tmp[674228]))
        unknown call_tmp[674238] "expr temp" "maybe param" "maybe type" "temp"
        (674241 'move' call_tmp[674238](159272 call _cond_test call_tmp[674233]))
        if call_tmp[674238]
        {
          unknown call_tmp[674243] "expr temp" "maybe param" "maybe type" "temp"
          (674246 'move' call_tmp[674243](159235 call + "Cannot default initialize associative array because" " element type "))
          unknown call_tmp[674248] "expr temp" "maybe param" "maybe type" "temp"
          (674251 'move' call_tmp[674248](159239 call _cast string[26] eltType[159029]))
          unknown call_tmp[674253] "expr temp" "maybe param" "maybe type" "temp"
          (674256 'move' call_tmp[674253](159241 call + call_tmp[674243] call_tmp[674248]))
          unknown call_tmp[674258] "maybe param" "maybe type" "temp"
          (674261 'move' call_tmp[674258](159260 call + call_tmp[674253] " cannot be default initialized"))
          unknown msg[159262] "dead at end of block" "param"
          (544056 'init var' msg[159262] call_tmp[674258])
          (159265 'end of statement')
          (159270 call compilerError msg[159262])
        }
      }
    }
    unknown call_tmp[674263] "expr temp" "maybe param" "maybe type" "temp"
    (674266 'move' call_tmp[674263](159457 call _cond_test initElts[159047]))
    if call_tmp[674263]
    {
      unknown call_tmp[674268] "maybe param" "maybe type" "temp"
      (674271 'move' call_tmp[674268](159291 call init_elts_method tableSize[159094] eltType[159029]))
      unknown initMethod[159292] "dead at end of block" "insert auto destroy"
      (544058 'init var' initMethod[159292] call_tmp[674268])
      (159295 'end of statement' tableSize[159094])
      {
        unknown tmp[159432] "expr temp" "maybe param" "maybe type" "temp"
        (159434 'move' tmp[159432] initMethod[159292])
        unknown call_tmp[674273] "expr temp" "maybe param" "maybe type" "temp"
        (674276 'move' call_tmp[674273](159436 call == tmp[159432] noInit[11146]))
        unknown call_tmp[674278] "expr temp" "maybe param" "maybe type" "temp"
        (674281 'move' call_tmp[674278](159439 call _cond_test call_tmp[674273]))
        if call_tmp[674278]
        {
        }
        {
          unknown call_tmp[674283] "expr temp" "maybe param" "maybe type" "temp"
          (674286 'move' call_tmp[674283](159442 call == tmp[159432] serialInit[11148]))
          unknown call_tmp[674288] "expr temp" "maybe param" "maybe type" "temp"
          (674291 'move' call_tmp[674288](159445 call _cond_test call_tmp[674283]))
          if call_tmp[674288]
          {
            {
              unknown _indexOfInterest[159344] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159345] "expr temp" "temp"
              unknown call_tmp[674295] "expr temp" "maybe param" "maybe type" "temp"
              (674298 'move' call_tmp[674295](159314 call table _mt[243] dom[159044]))
              unknown call_tmp[674302] "expr temp" "maybe param" "maybe type" "temp"
              (674305 'move' call_tmp[674302](159321 call(159317 call (partial) allSlots _mt[243] call_tmp[674295])))
              (159354 'move' _iterator[159345](159352 call _getIterator call_tmp[674302]))
              Defer
              {
                {
                  (159371 call _freeIterator _iterator[159345])
                }
              }
              { scopeless type
                (159360 'move' _indexOfInterest[159344](159357 call iteratorIndex _iterator[159345]))
              }
              ForLoop[159346]
              {
                unknown slot[159364] "index var" "insert auto destroy"
                (482317 'end of statement')
                (159366 'move' slot[159364] _indexOfInterest[159344])
                (482318 'end of statement' slot[159364])
                {
                  unknown call_tmp[674309] "expr temp" "maybe param" "maybe type" "temp"
                  (674312 'move' call_tmp[674309](159330 call(159325 call (partial) _isSlotFull _mt[243] dom[159044]) slot[159364]))
                  unknown call_tmp[674314] "expr temp" "maybe param" "maybe type" "temp"
                  (674317 'move' call_tmp[674314](159339 call _cond_test call_tmp[674309]))
                  if call_tmp[674314]
                  {
                    (159336 call(387033 call (partial) _doDefaultInitSlot _mt[243] this[161420]) slot[159364](inAdd = 0))
                    (482320 'end of statement' slot[159364])
                  }
                }
                label _continueLabel[159349]
                _indexOfInterest[159344]
                _iterator[159345]
              }
              label _breakLabel[159350]
            }
          }
          {
            unknown call_tmp[674321] "expr temp" "maybe param" "maybe type" "temp"
            (674324 'move' call_tmp[674321](159449 call == tmp[159432] parallelInit[11150]))
            unknown call_tmp[674326] "expr temp" "maybe param" "maybe type" "temp"
            (674329 'move' call_tmp[674326](159452 call _cond_test call_tmp[674321]))
            if call_tmp[674326]
            {
              unknown call_tmp[674333] "expr temp" "maybe param" "maybe type" "temp"
              (674336 'move' call_tmp[674333](159388 call table _mt[243] dom[159044]))
              unknown call_tmp[674340] "expr temp" "maybe param" "maybe type" "temp"
              (674343 'move' call_tmp[674340](159395 call(159391 call (partial) allSlots _mt[243] call_tmp[674333])))
              Forall {
                induction variables:
                  
                  unknown slot[159417] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[674340]
                shadow variables:
                other variables
                  forall body
                {
                  unknown call_tmp[674347] "expr temp" "maybe param" "maybe type" "temp"
                  (674350 'move' call_tmp[674347](159402 call(159397 call (partial) _isSlotFull _mt[243] dom[159044]) slot[159417]))
                  unknown call_tmp[674352] "expr temp" "maybe param" "maybe type" "temp"
                  (674355 'move' call_tmp[674352](159411 call _cond_test call_tmp[674347]))
                  if call_tmp[674352]
                  {
                    (159408 call(387039 call (partial) _doDefaultInitSlot _mt[243] this[161420]) slot[159417](inAdd = 0))
                    (482322 'end of statement' slot[159417])
                  }
                }
              }
            }
            {
              (159426 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
    (521126 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).deinit[159465](arg _mt[161426]:_MT[238], arg this[161424]:DefaultAssociativeArr[161418](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674361] "expr temp" "maybe param" "maybe type" "temp"
    (674364 'move' call_tmp[674361](387045 call data _mt[243] this[161424]))
    unknown call_tmp[674368] "expr temp" "maybe param" "maybe type" "temp"
    (674371 'move' call_tmp[674368](361040 call dom _mt[243] this[161424]))
    unknown call_tmp[674375] "expr temp" "maybe param" "maybe type" "temp"
    (674378 'move' call_tmp[674375](159471 call table _mt[243] call_tmp[674368]))
    unknown call_tmp[674382] "expr temp" "maybe param" "maybe type" "temp"
    (674385 'move' call_tmp[674382](159474 call tableSize _mt[243] call_tmp[674375]))
    (159477 call _ddata_free call_tmp[674361] call_tmp[674382])
    (521128 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiGetBaseDom[159484](arg _mt[161430]:_MT[238], arg this[161428]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521132] "RVV" "temp"
    unknown call_tmp[674389] "expr temp" "maybe param" "maybe type" "temp"
    (674392 'move' call_tmp[674389](387050 call dom _mt[243] this[161428]))
    (521137 'move' ret[521132](521136 'deref' call_tmp[674389]))
    (521134 return ret[521132])
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159498](arg _mt[161434]:_MT[238], arg this[161432]:DefaultAssociativeArr[161418](?), arg idx[159495] :
  (387055 call idxType _mt[243] this[161432])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521141] "RVV" "temp"
    unknown call_tmp[674398] "expr temp" "maybe param" "maybe type" "temp"
    (674401 'move' call_tmp[674398](361045 call dom _mt[243] this[161432]))
    unknown call_tmp[674405] "expr temp" "maybe param" "maybe type" "temp"
    (674408 'move' call_tmp[674405](159506 call table _mt[243] call_tmp[674398]))
    unknown call_tmp[674412] "maybe param" "maybe type" "temp"
    (674415 'move' call_tmp[674412](159514 call(159509 call (partial) findFullSlot _mt[243] call_tmp[674405]) idx[159495]))
    unknown tmp[159515] "dead at end of block" "insert auto destroy" "temp"
    (544060 'init var' tmp[159515] call_tmp[674412])
    (159522 call _check_tuple_var_decl tmp[159515] 2)
    (482327 'end of statement')
    unknown call_tmp[674417] "maybe param" "maybe type" "temp"
    (674420 'move' call_tmp[674417](159516 call tmp[159515] 0))
    unknown found[159500] "dead at end of block" "insert auto destroy"
    (544062 'init var' found[159500] call_tmp[674417])
    unknown call_tmp[674422] "maybe param" "maybe type" "temp"
    (674425 'move' call_tmp[674422](159519 call tmp[159515] 1))
    unknown slotNum[159502] "dead at end of block" "insert auto destroy"
    (544064 'init var' slotNum[159502] call_tmp[674422])
    (159527 'end of statement')
    unknown call_tmp[674427] "expr temp" "maybe param" "maybe type" "temp"
    (674430 'move' call_tmp[674427](159560 call _cond_test found[159500]))
    if call_tmp[674427]
    {
      unknown call_tmp[674434] "expr temp" "maybe param" "maybe type" "temp"
      (674437 'move' call_tmp[674434](159533 call(387062 call (partial) data _mt[243] this[161432]) slotNum[159502]))
      (521146 'move' ret[521141](521145 'addr of' call_tmp[674434]))
      gotoReturn _end_dsiAccess[521139] _end_dsiAccess[521139]
      (482328 'end of statement' slotNum[159502])
    }
    {
      (159557 call halt "array index out of bounds: " idx[159495])
    }
    label _end_dsiAccess[521139]
    (521143 return ret[521141])
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159572](arg _mt[161438]:_MT[238], arg this[161436]:DefaultAssociativeArr[161418](?), arg idx[159569] :
  (387069 call idxType _mt[243] this[161436])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521152] "RVV" "temp"
    unknown call_tmp[674443] "expr temp" "maybe param" "maybe type" "temp"
    (674446 'move' call_tmp[674443](361050 call dom _mt[243] this[161436]))
    unknown call_tmp[674450] "expr temp" "maybe param" "maybe type" "temp"
    (674453 'move' call_tmp[674450](159584 call table _mt[243] call_tmp[674443]))
    unknown call_tmp[674457] "maybe param" "maybe type" "temp"
    (674460 'move' call_tmp[674457](159592 call(159587 call (partial) findFullSlot _mt[243] call_tmp[674450]) idx[159569]))
    unknown tmp[159593] "dead at end of block" "insert auto destroy" "temp"
    (544066 'init var' tmp[159593] call_tmp[674457])
    (159600 call _check_tuple_var_decl tmp[159593] 2)
    (482331 'end of statement')
    unknown call_tmp[674462] "maybe param" "maybe type" "temp"
    (674465 'move' call_tmp[674462](159594 call tmp[159593] 0))
    unknown found[159578] "dead at end of block" "insert auto destroy"
    (544068 'init var' found[159578] call_tmp[674462])
    unknown call_tmp[674467] "maybe param" "maybe type" "temp"
    (674470 'move' call_tmp[674467](159597 call tmp[159593] 1))
    unknown slotNum[159580] "dead at end of block" "insert auto destroy"
    (544070 'init var' slotNum[159580] call_tmp[674467])
    (159605 'end of statement')
    unknown call_tmp[674472] "expr temp" "maybe param" "maybe type" "temp"
    (674475 'move' call_tmp[674472](159628 call _cond_test found[159578]))
    if call_tmp[674472]
    {
      unknown call_tmp[674479] "expr temp" "maybe param" "maybe type" "temp"
      (674482 'move' call_tmp[674479](159611 call(387081 call (partial) data _mt[243] this[161436]) slotNum[159580]))
      (521157 'move' ret[521152](521156 'deref' call_tmp[674479]))
      gotoReturn _end_dsiAccess[521150] _end_dsiAccess[521150]
      (482332 'end of statement' slotNum[159580])
    }
    {
      (159619 call halt "array index out of bounds: " idx[159569])
      (482334 'end of statement')
      unknown call_tmp[674486] "expr temp" "maybe param" "maybe type" "temp"
      (674489 'move' call_tmp[674486](159625 call(387088 call (partial) data _mt[243] this[161436]) 0))
      (521162 'move' ret[521152](521161 'deref' call_tmp[674486]))
      gotoReturn _end_dsiAccess[521150] _end_dsiAccess[521150]
    }
    label _end_dsiAccess[521150]
    (521154 return ret[521152])
  }
  where {
    unknown call_tmp[674493] "expr temp" "maybe param" "maybe type" "temp"
    (674496 'move' call_tmp[674493](387074 call eltType _mt[243] this[161436]))
    (159577 call shouldReturnRvalueByValue call_tmp[674493])
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159641](arg _mt[161442]:_MT[238], arg this[161440]:DefaultAssociativeArr[161418](?), arg idx[159638] :
  (387093 call idxType _mt[243] this[161440])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521168] "RVV" "temp"
    unknown call_tmp[674502] "expr temp" "maybe param" "maybe type" "temp"
    (674505 'move' call_tmp[674502](361055 call dom _mt[243] this[161440]))
    unknown call_tmp[674509] "expr temp" "maybe param" "maybe type" "temp"
    (674512 'move' call_tmp[674509](159653 call table _mt[243] call_tmp[674502]))
    unknown call_tmp[674516] "maybe param" "maybe type" "temp"
    (674519 'move' call_tmp[674516](159661 call(159656 call (partial) findFullSlot _mt[243] call_tmp[674509]) idx[159638]))
    unknown tmp[159662] "dead at end of block" "insert auto destroy" "temp"
    (544072 'init var' tmp[159662] call_tmp[674516])
    (159669 call _check_tuple_var_decl tmp[159662] 2)
    (482336 'end of statement')
    unknown call_tmp[674521] "maybe param" "maybe type" "temp"
    (674524 'move' call_tmp[674521](159663 call tmp[159662] 0))
    unknown found[159647] "dead at end of block" "insert auto destroy"
    (544074 'init var' found[159647] call_tmp[674521])
    unknown call_tmp[674526] "maybe param" "maybe type" "temp"
    (674529 'move' call_tmp[674526](159666 call tmp[159662] 1))
    unknown slotNum[159649] "dead at end of block" "insert auto destroy"
    (544076 'init var' slotNum[159649] call_tmp[674526])
    (159674 'end of statement')
    unknown call_tmp[674531] "expr temp" "maybe param" "maybe type" "temp"
    (674534 'move' call_tmp[674531](159697 call _cond_test found[159647]))
    if call_tmp[674531]
    {
      unknown call_tmp[674538] "expr temp" "maybe param" "maybe type" "temp"
      (674541 'move' call_tmp[674538](159680 call(387105 call (partial) data _mt[243] this[161440]) slotNum[159649]))
      (521173 'move' ret[521168](521172 'addr of' call_tmp[674538]))
      gotoReturn _end_dsiAccess[521166] _end_dsiAccess[521166]
      (482337 'end of statement' slotNum[159649])
    }
    {
      (159688 call halt "array index out of bounds: " idx[159638])
      (482339 'end of statement')
      unknown call_tmp[674545] "expr temp" "maybe param" "maybe type" "temp"
      (674548 'move' call_tmp[674545](159694 call(387112 call (partial) data _mt[243] this[161440]) 0))
      (521178 'move' ret[521168](521177 'addr of' call_tmp[674545]))
      gotoReturn _end_dsiAccess[521166] _end_dsiAccess[521166]
    }
    label _end_dsiAccess[521166]
    (521170 return ret[521168])
  }
  where {
    unknown call_tmp[674552] "expr temp" "maybe param" "maybe type" "temp"
    (674555 'move' call_tmp[674552](387098 call eltType _mt[243] this[161440]))
    (159646 call shouldReturnRvalueByConstRef call_tmp[674552])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159708](arg _mt[161446]:_MT[238], arg this[161444]:DefaultAssociativeArr[161418](?), arg i[159706]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521184] "RVV" "temp"
    unknown call_tmp[674559] "expr temp" "maybe param" "maybe type" "temp"
    (674562 'move' call_tmp[674559](159713 call(387116 call (partial) dsiAccess _mt[243] this[161444]) i[159706]))
    (521189 'move' ret[521184](521188 'addr of' call_tmp[674559]))
    (521186 return ret[521184])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159723](arg _mt[161450]:_MT[238], arg this[161448]:DefaultAssociativeArr[161418](?), arg i[159721]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521193] "RVV" "temp"
    unknown call_tmp[674566] "expr temp" "maybe param" "maybe type" "temp"
    (674569 'move' call_tmp[674566](159732 call(387126 call (partial) dsiAccess _mt[243] this[161448]) i[159721]))
    (521198 'move' ret[521193](521197 'deref' call_tmp[674566]))
    (521195 return ret[521193])
  }
  where {
    unknown call_tmp[674573] "expr temp" "maybe param" "maybe type" "temp"
    (674576 'move' call_tmp[674573](387122 call eltType _mt[243] this[161448]))
    (159728 call shouldReturnRvalueByValue call_tmp[674573])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159743](arg _mt[161454]:_MT[238], arg this[161452]:DefaultAssociativeArr[161418](?), arg i[159741]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521202] "RVV" "temp"
    unknown call_tmp[674580] "expr temp" "maybe param" "maybe type" "temp"
    (674583 'move' call_tmp[674580](159752 call(387136 call (partial) dsiAccess _mt[243] this[161452]) i[159741]))
    (521207 'move' ret[521202](521206 'addr of' call_tmp[674580]))
    (521204 return ret[521202])
  }
  where {
    unknown call_tmp[674587] "expr temp" "maybe param" "maybe type" "temp"
    (674590 'move' call_tmp[674587](387132 call eltType _mt[243] this[161452]))
    (159748 call shouldReturnRvalueByConstRef call_tmp[674587])
  }
  function DefaultAssociativeArr[161418](?).these[159761](arg _mt[161458]:_MT[238], arg this[161456]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521211] "RVV" "temp"
    {
      unknown _indexOfInterest[159792] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159793] "expr temp" "temp"
      unknown call_tmp[674594] "expr temp" "maybe param" "maybe type" "temp"
      (674597 'move' call_tmp[674594](361060 call dom _mt[243] this[161456]))
      unknown call_tmp[674601] "expr temp" "maybe param" "maybe type" "temp"
      (674604 'move' call_tmp[674601](159765 call table _mt[243] call_tmp[674594]))
      unknown call_tmp[674608] "expr temp" "maybe param" "maybe type" "temp"
      (674611 'move' call_tmp[674608](159772 call(159768 call (partial) allSlots _mt[243] call_tmp[674601])))
      (159802 'move' _iterator[159793](159800 call _getIterator call_tmp[674608]))
      Defer
      {
        {
          (159819 call _freeIterator _iterator[159793])
        }
      }
      { scopeless type
        (159808 'move' _indexOfInterest[159792](159805 call iteratorIndex _iterator[159793]))
      }
      ForLoop[159794]
      {
        unknown slot[159812] "index var" "insert auto destroy"
        (482345 'end of statement')
        (159814 'move' slot[159812] _indexOfInterest[159792])
        (482346 'end of statement' slot[159812])
        {
          unknown call_tmp[674615] "expr temp" "maybe param" "maybe type" "temp"
          (674618 'move' call_tmp[674615](361065 call dom _mt[243] this[161456]))
          unknown call_tmp[674622] "expr temp" "maybe param" "maybe type" "temp"
          (674625 'move' call_tmp[674622](159779 call(159774 call (partial) _isSlotFull _mt[243] call_tmp[674615]) slot[159812]))
          unknown call_tmp[674627] "expr temp" "maybe param" "maybe type" "temp"
          (674630 'move' call_tmp[674627](159787 call _cond_test call_tmp[674622]))
          if call_tmp[674627]
          {
            unknown yret[521215] "YVV" "temp"
            unknown call_tmp[674634] "expr temp" "maybe param" "maybe type" "temp"
            (674637 'move' call_tmp[674634](159783 call(387143 call (partial) data _mt[243] this[161456]) slot[159812]))
            (521218 'move' yret[521215](521217 'addr of' call_tmp[674634]))
            (521220 yield yret[521215])
            (482348 'end of statement' slot[159812])
          }
        }
        label _continueLabel[159797]
        _indexOfInterest[159792]
        _iterator[159793]
      }
      label _breakLabel[159798]
    }
    (521213 return ret[521211])
  }
  function DefaultAssociativeArr[161418](?).these[159835](arg _mt[161462]:_MT[238], arg this[161460]:DefaultAssociativeArr[161418](?), param arg tag[159832]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521224] "RVV" "temp"
    unknown call_tmp[674639] "expr temp" "maybe param" "maybe type" "temp"
    (674642 'move' call_tmp[674639](159867 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[674639]
    {
      (159864 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159903] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159904] "expr temp" "temp"
      unknown call_tmp[674646] "expr temp" "maybe param" "maybe type" "temp"
      (674649 'move' call_tmp[674646](361071 call dom _mt[243] this[161460]))
      unknown call_tmp[674653] "expr temp" "maybe param" "maybe type" "temp"
      (674656 'move' call_tmp[674653](159874 call table _mt[243] call_tmp[674646]))
      unknown call_tmp[674660] "expr temp" "maybe param" "maybe type" "temp"
      (674663 'move' call_tmp[674660](159883 call(159877 call (partial) allSlots _mt[243] call_tmp[674653])(tag = tag[159832])))
      (159913 'move' _iterator[159904](159911 call _getIterator call_tmp[674660]))
      Defer
      {
        {
          (159930 call _freeIterator _iterator[159904])
        }
      }
      { scopeless type
        (159919 'move' _indexOfInterest[159903](159916 call iteratorIndex _iterator[159904]))
      }
      ForLoop[159905]
      {
        unknown slot[159923] "index var" "insert auto destroy"
        (482352 'end of statement')
        (159925 'move' slot[159923] _indexOfInterest[159903])
        (482353 'end of statement' slot[159923])
        {
          unknown call_tmp[674667] "expr temp" "maybe param" "maybe type" "temp"
          (674670 'move' call_tmp[674667](361076 call dom _mt[243] this[161460]))
          unknown call_tmp[674674] "expr temp" "maybe param" "maybe type" "temp"
          (674677 'move' call_tmp[674674](159890 call(159885 call (partial) _isSlotFull _mt[243] call_tmp[674667]) slot[159923]))
          unknown call_tmp[674679] "expr temp" "maybe param" "maybe type" "temp"
          (674682 'move' call_tmp[674679](159898 call _cond_test call_tmp[674674]))
          if call_tmp[674679]
          {
            unknown yret[521228] "YVV" "temp"
            unknown call_tmp[674686] "expr temp" "maybe param" "maybe type" "temp"
            (674689 'move' call_tmp[674686](159894 call(387154 call (partial) data _mt[243] this[161460]) slot[159923]))
            (521231 'move' yret[521228](521230 'addr of' call_tmp[674686]))
            (521233 yield yret[521228])
            (482355 'end of statement' slot[159923])
          }
        }
        label _continueLabel[159908]
        _indexOfInterest[159903]
        _iterator[159904]
      }
      label _breakLabel[159909]
    }
    (521226 return ret[521224])
  }
  where {
    (159842 call == tag[159832] standalone[451])
  }
  function DefaultAssociativeArr[161418](?).these[159946](arg _mt[161466]:_MT[238], arg this[161464]:DefaultAssociativeArr[161418](?), param arg tag[159943]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521237] "RVV" "temp"
    {
      unknown _indexOfInterest[159966] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159967] "expr temp" "temp"
      unknown call_tmp[674693] "expr temp" "maybe param" "maybe type" "temp"
      (674696 'move' call_tmp[674693](361082 call dom _mt[243] this[161464]))
      unknown call_tmp[674700] "expr temp" "maybe param" "maybe type" "temp"
      (674703 'move' call_tmp[674700](159962 call(159957 call (partial) these _mt[243] call_tmp[674693]) tag[159943]))
      (159976 'move' _iterator[159967](159974 call _getIterator call_tmp[674700]))
      Defer
      {
        {
          (159993 call _freeIterator _iterator[159967])
        }
      }
      { scopeless type
        (159982 'move' _indexOfInterest[159966](159979 call iteratorIndex _iterator[159967]))
      }
      ForLoop[159968]
      {
        unknown followThis[159986] "index var" "insert auto destroy"
        (482358 'end of statement')
        (159988 'move' followThis[159986] _indexOfInterest[159966])
        (482359 'end of statement' followThis[159986])
        unknown yret[521241] "YVV" "temp"
        (521244 'move' yret[521241](521243 'deref' followThis[159986]))
        (521246 yield yret[521241])
        (482361 'end of statement' followThis[159986])
        label _continueLabel[159971]
        _indexOfInterest[159966]
        _iterator[159967]
      }
      label _breakLabel[159972]
    }
    (521239 return ret[521237])
  }
  where {
    (159953 call == tag[159943] leader[447])
  }
  function DefaultAssociativeArr[161418](?).these[160010](arg _mt[161470]:_MT[238], arg this[161468]:DefaultAssociativeArr[161418](?), param arg tag[160007]:iterKind[453], arg followThis[160012]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521250] "RVV" "temp"
    unknown tmp[160027] "dead at end of block" "insert auto destroy" "temp"
    (544078 'init var' tmp[160027] followThis[160012])
    (160034 call _check_tuple_var_decl tmp[160027] 2)
    (482363 'end of statement')
    unknown call_tmp[674705] "maybe param" "maybe type" "temp"
    (674708 'move' call_tmp[674705](160028 call tmp[160027] 0))
    unknown chunk[160021] "dead at end of block" "insert auto destroy"
    (544080 'init var' chunk[160021] call_tmp[674705])
    unknown call_tmp[674710] "maybe param" "maybe type" "temp"
    (674713 'move' call_tmp[674710](160031 call tmp[160027] 1))
    unknown followThisDom[160023] "dead at end of block" "insert auto destroy"
    (544082 'init var' followThisDom[160023] call_tmp[674710])
    (160039 'end of statement')
    unknown call_tmp[674715] "expr temp" "maybe param" "maybe type" "temp"
    (674718 'move' call_tmp[674715](160064 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[674715]
    {
      (160062 call writeln "In array follower code: Following " chunk[160021])
      (482364 'end of statement' chunk[160021])
    }
    unknown call_tmp[674722] "expr temp" "maybe param" "maybe type" "temp"
    (674725 'move' call_tmp[674722](160071 call dom _mt[243] this[161468]))
    unknown call_tmp[674727] "maybe param" "maybe type" "temp"
    (674730 'move' call_tmp[674727](160074 call == followThisDom[160023] call_tmp[674722]))
    const sameDom[160076] "dead at end of block" "const" "insert auto destroy"
    (544084 'init var' sameDom[160076] call_tmp[674727])
    (160079 'end of statement')
    unknown call_tmp[674732] "expr temp" "maybe param" "maybe type" "temp"
    (674735 'move' call_tmp[674732](160081 call ! sameDom[160076]))
    unknown call_tmp[674737] "expr temp" "maybe param" "maybe type" "temp"
    (674740 'move' call_tmp[674737](160122 call _cond_test call_tmp[674732]))
    if call_tmp[674737]
    {
      unknown call_tmp[674744] "expr temp" "maybe param" "maybe type" "temp"
      (674747 'move' call_tmp[674744](160084 call dsiNumIndices _mt[243] followThisDom[160023]))
      unknown call_tmp[674751] "expr temp" "maybe param" "maybe type" "temp"
      (674754 'move' call_tmp[674751](160088 call dom _mt[243] this[161468]))
      unknown call_tmp[674758] "expr temp" "maybe param" "maybe type" "temp"
      (674761 'move' call_tmp[674758](160091 call dsiNumIndices _mt[243] call_tmp[674751]))
      unknown call_tmp[674763] "expr temp" "maybe param" "maybe type" "temp"
      (674766 'move' call_tmp[674763](160094 call != call_tmp[674744] call_tmp[674758]))
      unknown call_tmp[674768] "expr temp" "maybe param" "maybe type" "temp"
      (674771 'move' call_tmp[674768](160117 call _cond_test call_tmp[674763]))
      if call_tmp[674768]
      {
        (160115 call halt "zippered associative array does not match the iterated domain")
      }
    }
    unknown call_tmp[674775] "expr temp" "maybe param" "maybe type" "temp"
    (674778 'move' call_tmp[674775](160128 call table _mt[243] followThisDom[160023]))
    unknown call_tmp[674782] "maybe param" "maybe type" "temp"
    (674785 'move' call_tmp[674782](160131 call table _mt[243] call_tmp[674775]))
    const otherTable[160134] "dead at end of block" "const" "insert auto destroy"
    (544086 'init var' otherTable[160134] call_tmp[674782])
    (160137 'end of statement' followThisDom[160023] followThisDom[160023])
    {
      unknown _indexOfInterest[160228] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160229] "expr temp" "temp"
      (160238 'move' _iterator[160229](160236 call _getIterator chunk[160021]))
      Defer
      {
        {
          (160254 call _freeIterator _iterator[160229])
        }
      }
      { scopeless type
        (160243 'move' _indexOfInterest[160228](160240 call iteratorIndex _iterator[160229]))
      }
      ForLoop[160230]
      {
        unknown slot[160247] "index var" "insert auto destroy"
        (482370 'end of statement')
        (160249 'move' slot[160247] _indexOfInterest[160228])
        (482371 'end of statement' slot[160247])
        {
          const aSlot[160144] "dead at end of block" "const" "ref var"
          unknown call_tmp[674787] "expr temp" "maybe param" "maybe type" "temp"
          (674790 'move' call_tmp[674787](160143 call otherTable[160134] slot[160247]))
          (544089 'move' aSlot[160144](544088 'addr of' call_tmp[674787]))
          (160147 'end of statement' otherTable[160134] slot[160247])
          unknown call_tmp[674794] "expr temp" "maybe param" "maybe type" "temp"
          (674797 'move' call_tmp[674794](160154 call(160150 call (partial) isFull _mt[243] aSlot[160144])))
          unknown call_tmp[674799] "expr temp" "maybe param" "maybe type" "temp"
          (674802 'move' call_tmp[674799](160224 call _cond_test call_tmp[674794]))
          if call_tmp[674799]
          {
            unknown idx[160156] "dead at end of block" "insert auto destroy"
            (544091 'init var' idx[160156] slot[160247])
            (160159 'end of statement' slot[160247])
            unknown call_tmp[674804] "expr temp" "maybe param" "maybe type" "temp"
            (674807 'move' call_tmp[674804](160162 call ! sameDom[160076]))
            unknown call_tmp[674809] "expr temp" "maybe param" "maybe type" "temp"
            (674812 'move' call_tmp[674809](160214 call _cond_test call_tmp[674804]))
            if call_tmp[674809]
            {
              unknown call_tmp[674816] "expr temp" "maybe param" "maybe type" "temp"
              (674819 'move' call_tmp[674816](361093 call dom _mt[243] this[161468]))
              unknown call_tmp[674823] "expr temp" "maybe param" "maybe type" "temp"
              (674826 'move' call_tmp[674823](160170 call table _mt[243] call_tmp[674816]))
              unknown call_tmp[674832] "expr temp" "maybe param" "maybe type" "temp"
              (674835 'move' call_tmp[674832](160177 call key _mt[243] aSlot[160144]))
              unknown call_tmp[674837] "maybe param" "maybe type" "temp"
              (674840 'move' call_tmp[674837](160181 call(160173 call (partial) findFullSlot _mt[243] call_tmp[674823]) call_tmp[674832]))
              const tmp[160182] "dead at end of block" "const" "insert auto destroy" "temp"
              (544093 'init var' tmp[160182] call_tmp[674837])
              (160189 call _check_tuple_var_decl tmp[160182] 2)
              (482376 'end of statement')
              unknown call_tmp[674842] "maybe param" "maybe type" "temp"
              (674845 'move' call_tmp[674842](160183 call tmp[160182] 0))
              const match[160164] "dead at end of block" "const" "insert auto destroy"
              (544095 'init var' match[160164] call_tmp[674842])
              unknown call_tmp[674847] "maybe param" "maybe type" "temp"
              (674850 'move' call_tmp[674847](160186 call tmp[160182] 1))
              const loc[160166] "dead at end of block" "const" "insert auto destroy"
              (544097 'init var' loc[160166] call_tmp[674847])
              (160194 'end of statement')
              unknown call_tmp[674852] "expr temp" "maybe param" "maybe type" "temp"
              (674855 'move' call_tmp[674852](160197 call ! match[160164]))
              unknown call_tmp[674857] "expr temp" "maybe param" "maybe type" "temp"
              (674860 'move' call_tmp[674857](160204 call _cond_test call_tmp[674852]))
              if call_tmp[674857]
              {
                (160202 call halt "zippered associative array does not match the iterated domain")
              }
              (160211 call = idx[160156] loc[160166])
              (482378 'end of statement' idx[160156] loc[160166])
            }
            unknown yret[521254] "YVV" "temp"
            unknown call_tmp[674864] "expr temp" "maybe param" "maybe type" "temp"
            (674867 'move' call_tmp[674864](160221 call(387179 call (partial) data _mt[243] this[161468]) idx[160156]))
            (521257 'move' yret[521254](521256 'addr of' call_tmp[674864]))
            (521259 yield yret[521254])
            (482381 'end of statement' idx[160156])
          }
        }
        label _continueLabel[160233]
        _indexOfInterest[160228]
        _iterator[160229]
      }
      label _breakLabel[160234]
    }
    (521252 return ret[521250])
  }
  where {
    (160019 call == tag[160007] follower[449])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialReadWrite[160268](arg _mt[161474]:_MT[238], arg this[161472]:DefaultAssociativeArr[161418](?), arg f[160266]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674871] "maybe param" "maybe type" "temp"
    (674874 'move' call_tmp[674871](160275 call(160271 call (partial) binary _mt[243] f[160266])))
    unknown binary[160276] "dead at end of block" "insert auto destroy"
    (544099 'init var' binary[160276] call_tmp[674871])
    (160279 'end of statement')
    unknown call_tmp[674878] "maybe param" "maybe type" "temp"
    (674881 'move' call_tmp[674878](160287 call(160282 call (partial) styleElement _mt[243] f[160266]) QIO_STYLE_ELEMENT_ARRAY[19662]))
    unknown arrayStyle[160288] "dead at end of block" "insert auto destroy"
    (544101 'init var' arrayStyle[160288] call_tmp[674878])
    (160291 'end of statement')
    unknown tmp[427908] "maybe param" "temp"
    (427919 'move' tmp[427908](160294 call == arrayStyle[160288] QIO_ARRAY_FORMAT_SPACE[19692]))
    unknown call_tmp[674883] "expr temp" "maybe param" "maybe type" "temp"
    (674886 'move' call_tmp[674883](427921 call _cond_invalid tmp[427908]))
    if call_tmp[674883]
    {
      (427924 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[160301] "dead at end of block" "insert auto destroy"
    unknown tmp[569832] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569833] "maybe param" "temp"
    unknown call_tmp[674888] "expr temp" "maybe param" "maybe type" "temp"
    (674891 'move' call_tmp[674888](427909 call isTrue tmp[427908]))
    (569838 'move' tmp[569833](569836 call _cond_test call_tmp[674888]))
    if tmp[569833]
    {
      unknown tmp[569840] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674893] "expr temp" "maybe param" "maybe type" "temp"
      (674896 'move' call_tmp[674893](160297 call ! binary[160276]))
      (569842 'move' tmp[569840](427912 call isTrue call_tmp[674893]))
      (569847 'move' tmp[569832](569844 '_paramFoldLogical' tmp[569833] tmp[569840]))
    }
    {
      (569852 'move' tmp[569832](569849 '_paramFoldLogical' tmp[569833] 0))
    }
    (544103 'init var' isspace[160301] tmp[569832])
    (160304 'end of statement')
    unknown tmp[427929] "maybe param" "temp"
    (427940 'move' tmp[427929](160307 call == arrayStyle[160288] QIO_ARRAY_FORMAT_JSON[19702]))
    unknown call_tmp[674898] "expr temp" "maybe param" "maybe type" "temp"
    (674901 'move' call_tmp[674898](427942 call _cond_invalid tmp[427929]))
    if call_tmp[674898]
    {
      (427945 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[160314] "dead at end of block" "insert auto destroy"
    unknown tmp[569859] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569860] "maybe param" "temp"
    unknown call_tmp[674903] "expr temp" "maybe param" "maybe type" "temp"
    (674906 'move' call_tmp[674903](427930 call isTrue tmp[427929]))
    (569865 'move' tmp[569860](569863 call _cond_test call_tmp[674903]))
    if tmp[569860]
    {
      unknown tmp[569867] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674908] "expr temp" "maybe param" "maybe type" "temp"
      (674911 'move' call_tmp[674908](160310 call ! binary[160276]))
      (569869 'move' tmp[569867](427933 call isTrue call_tmp[674908]))
      (569874 'move' tmp[569859](569871 '_paramFoldLogical' tmp[569860] tmp[569867]))
    }
    {
      (569879 'move' tmp[569859](569876 '_paramFoldLogical' tmp[569860] 0))
    }
    (544105 'init var' isjson[160314] tmp[569859])
    (160317 'end of statement')
    unknown tmp[427950] "maybe param" "temp"
    (427961 'move' tmp[427950](160320 call == arrayStyle[160288] QIO_ARRAY_FORMAT_CHPL[19697]))
    unknown call_tmp[674913] "expr temp" "maybe param" "maybe type" "temp"
    (674916 'move' call_tmp[674913](427963 call _cond_invalid tmp[427950]))
    if call_tmp[674913]
    {
      (427966 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[160327] "dead at end of block" "insert auto destroy"
    unknown tmp[569886] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569887] "maybe param" "temp"
    unknown call_tmp[674918] "expr temp" "maybe param" "maybe type" "temp"
    (674921 'move' call_tmp[674918](427951 call isTrue tmp[427950]))
    (569892 'move' tmp[569887](569890 call _cond_test call_tmp[674918]))
    if tmp[569887]
    {
      unknown tmp[569894] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674923] "expr temp" "maybe param" "maybe type" "temp"
      (674926 'move' call_tmp[674923](160323 call ! binary[160276]))
      (569896 'move' tmp[569894](427954 call isTrue call_tmp[674923]))
      (569901 'move' tmp[569886](569898 '_paramFoldLogical' tmp[569887] tmp[569894]))
    }
    {
      (569906 'move' tmp[569886](569903 '_paramFoldLogical' tmp[569887] 0))
    }
    (544107 'init var' ischpl[160327] tmp[569886])
    (160330 'end of statement')
    unknown tmp[427971] "maybe param" "temp"
    unknown call_tmp[674930] "expr temp" "maybe param" "maybe type" "temp"
    (674933 'move' call_tmp[674930](160332 call writing _mt[243] f[160266]))
    (427982 'move' tmp[427971](160335 call ! call_tmp[674930]))
    unknown call_tmp[674935] "expr temp" "maybe param" "maybe type" "temp"
    (674938 'move' call_tmp[674935](427984 call _cond_invalid tmp[427971]))
    if call_tmp[674935]
    {
      (427987 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[569913] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569914] "maybe param" "temp"
    unknown call_tmp[674940] "expr temp" "maybe param" "maybe type" "temp"
    (674943 'move' call_tmp[674940](427972 call isTrue tmp[427971]))
    (569919 'move' tmp[569914](569917 call _cond_test call_tmp[674940]))
    if tmp[569914]
    {
      unknown tmp[569921] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569923 'move' tmp[569921](427975 call isTrue ischpl[160327]))
      (569928 'move' tmp[569913](569925 '_paramFoldLogical' tmp[569914] tmp[569921]))
    }
    {
      (569933 'move' tmp[569913](569930 '_paramFoldLogical' tmp[569914] 0))
    }
    unknown call_tmp[674945] "expr temp" "maybe param" "maybe type" "temp"
    (674948 'move' call_tmp[674945](160353 call _cond_test tmp[569913]))
    if call_tmp[674945]
    {
      (160348 call(160343 call (partial) readChapelStyleAssocArray _mt[243] this[161472]) f[160266])
      (482390 'end of statement')
      gotoReturn _end_dsiSerialReadWrite[521261] _end_dsiSerialReadWrite[521261]
    }
    unknown tmp[427992] "maybe param" "temp"
    (428003 'move' tmp[427992] isjson[160314])
    unknown call_tmp[674952] "expr temp" "maybe param" "maybe type" "temp"
    (674955 'move' call_tmp[674952](428005 call _cond_invalid tmp[427992]))
    if call_tmp[674952]
    {
      (428008 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569940] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569941] "maybe param" "temp"
    unknown call_tmp[674957] "expr temp" "maybe param" "maybe type" "temp"
    (674960 'move' call_tmp[674957](427993 call isTrue tmp[427992]))
    (569946 'move' tmp[569941](569944 call _cond_test call_tmp[674957]))
    if tmp[569941]
    {
      (569951 'move' tmp[569940](569948 '_paramFoldLogical' tmp[569941] 1))
    }
    {
      unknown tmp[569953] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569955 'move' tmp[569953](427997 call isTrue ischpl[160327]))
      (569960 'move' tmp[569940](569957 '_paramFoldLogical' tmp[569941] tmp[569953]))
    }
    unknown call_tmp[674962] "expr temp" "maybe param" "maybe type" "temp"
    (674965 'move' call_tmp[674962](160370 call _cond_test tmp[569940]))
    if call_tmp[674962]
    {
      unknown call_tmp[674967] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (674970 'move' call_tmp[674967](747959 'new' ioLiteral[238753] "["))
      (160367 call <~> f[160266] call_tmp[674967])
    }
    unknown first[160376] "dead at end of block" "insert auto destroy"
    (544109 'init var' first[160376] 1)
    (160379 'end of statement' binary[160276] binary[160276] binary[160276])
    {
      unknown _indexOfInterest[160486] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160487] "expr temp" "temp"
      unknown call_tmp[674974] "expr temp" "maybe param" "maybe type" "temp"
      (674977 'move' call_tmp[674974](160496 call dom _mt[243] this[161472]))
      unknown call_tmp[674979] "expr temp" "maybe param" "maybe type" "temp"
      (674982 'move' call_tmp[674979](160499 call _getIterator call_tmp[674974]))
      unknown call_tmp[674984] "expr temp" "maybe param" "maybe type" "temp"
      (674987 'move' call_tmp[674984](160503 call _getIterator this[161472]))
      (160505 'move' _iterator[160487](160391 call _build_tuple call_tmp[674979] call_tmp[674984]))
      Defer
      {
        {
          (160535 call _freeIterator _iterator[160487])
        }
      }
      { scopeless type
        (160510 'move' _indexOfInterest[160486](160507 call iteratorIndex _iterator[160487]))
      }
      ForLoop[160488]
      {
        (160515 call _check_tuple_var_decl _indexOfInterest[160486] 2)
        (482395 'end of statement')
        unknown key[160521] "index var" "insert auto destroy"
        (482396 'end of statement')
        (160523 'move' key[160521](160519 call _indexOfInterest[160486] 0))
        (482397 'end of statement' key[160521])
        unknown val[160528] "index var" "insert auto destroy"
        (482399 'end of statement')
        (160530 'move' val[160528](160526 call _indexOfInterest[160486] 1))
        (482400 'end of statement' val[160528])
        {
          unknown call_tmp[674989] "expr temp" "maybe param" "maybe type" "temp"
          (674992 'move' call_tmp[674989](160432 call _cond_test first[160376]))
          if call_tmp[674989]
          {
            (160395 call = first[160376] 0)
            (482402 'end of statement' first[160376])
          }
          {
            unknown call_tmp[674994] "expr temp" "maybe param" "maybe type" "temp"
            (674997 'move' call_tmp[674994](160426 call _cond_test isspace[160301]))
            if call_tmp[674994]
            {
              unknown call_tmp[674999] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
              (675002 'move' call_tmp[674999](747960 'new' ioLiteral[238753] " "))
              (160405 call <~> f[160266] call_tmp[674999])
            }
            {
              unknown tmp[428013] "maybe param" "temp"
              (428024 'move' tmp[428013] isjson[160314])
              unknown call_tmp[675004] "expr temp" "maybe param" "maybe type" "temp"
              (675007 'move' call_tmp[675004](428026 call _cond_invalid tmp[428013]))
              if call_tmp[675004]
              {
                (428029 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[569967] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[569968] "maybe param" "temp"
              unknown call_tmp[675009] "expr temp" "maybe param" "maybe type" "temp"
              (675012 'move' call_tmp[675009](428014 call isTrue tmp[428013]))
              (569973 'move' tmp[569968](569971 call _cond_test call_tmp[675009]))
              if tmp[569968]
              {
                (569978 'move' tmp[569967](569975 '_paramFoldLogical' tmp[569968] 1))
              }
              {
                unknown tmp[569980] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (569982 'move' tmp[569980](428018 call isTrue ischpl[160327]))
                (569987 'move' tmp[569967](569984 '_paramFoldLogical' tmp[569968] tmp[569980]))
              }
              unknown call_tmp[675014] "expr temp" "maybe param" "maybe type" "temp"
              (675017 'move' call_tmp[675014](160421 call _cond_test tmp[569967]))
              if call_tmp[675014]
              {
                unknown call_tmp[675019] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675022 'move' call_tmp[675019](747961 'new' ioLiteral[238753] ", "))
                (160418 call <~> f[160266] call_tmp[675019])
              }
            }
          }
          unknown tmp[428034] "maybe param" "temp"
          (428045 'move' tmp[428034](160440 call writing _mt[243] f[160266]))
          unknown call_tmp[675026] "expr temp" "maybe param" "maybe type" "temp"
          (675029 'move' call_tmp[675026](428047 call _cond_invalid tmp[428034]))
          if call_tmp[675026]
          {
            (428050 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569994] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569995] "maybe param" "temp"
          unknown call_tmp[675031] "expr temp" "maybe param" "maybe type" "temp"
          (675034 'move' call_tmp[675031](428035 call isTrue tmp[428034]))
          (570000 'move' tmp[569995](569998 call _cond_test call_tmp[675031]))
          if tmp[569995]
          {
            unknown tmp[570002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (570004 'move' tmp[570002](428038 call isTrue ischpl[160327]))
            (570009 'move' tmp[569994](570006 '_paramFoldLogical' tmp[569995] tmp[570002]))
          }
          {
            (570014 'move' tmp[569994](570011 '_paramFoldLogical' tmp[569995] 0))
          }
          unknown call_tmp[675036] "expr temp" "maybe param" "maybe type" "temp"
          (675039 'move' call_tmp[675036](160477 call _cond_test tmp[569994]))
          if call_tmp[675036]
          {
            (160448 call <~> f[160266] key[160521])
            (482408 'end of statement' key[160521])
            unknown call_tmp[675041] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
            (675044 'move' call_tmp[675041](747962 'new' ioLiteral[238753] " => "))
            (160474 call <~> f[160266] call_tmp[675041])
          }
          (160483 call <~> f[160266] val[160528])
          (482411 'end of statement' val[160528])
        }
        label _continueLabel[160491]
        _indexOfInterest[160486]
        _iterator[160487]
      }
      label _breakLabel[160492]
    }
    unknown tmp[428055] "maybe param" "temp"
    (428066 'move' tmp[428055] isjson[160314])
    unknown call_tmp[675046] "expr temp" "maybe param" "maybe type" "temp"
    (675049 'move' call_tmp[675046](428068 call _cond_invalid tmp[428055]))
    if call_tmp[675046]
    {
      (428071 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[570021] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570022] "maybe param" "temp"
    unknown call_tmp[675051] "expr temp" "maybe param" "maybe type" "temp"
    (675054 'move' call_tmp[675051](428056 call isTrue tmp[428055]))
    (570027 'move' tmp[570022](570025 call _cond_test call_tmp[675051]))
    if tmp[570022]
    {
      (570032 'move' tmp[570021](570029 '_paramFoldLogical' tmp[570022] 1))
    }
    {
      unknown tmp[570034] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (570036 'move' tmp[570034](428060 call isTrue ischpl[160327]))
      (570041 'move' tmp[570021](570038 '_paramFoldLogical' tmp[570022] tmp[570034]))
    }
    unknown call_tmp[675056] "expr temp" "maybe param" "maybe type" "temp"
    (675059 'move' call_tmp[675056](160555 call _cond_test tmp[570021]))
    if call_tmp[675056]
    {
      unknown call_tmp[675061] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (675064 'move' call_tmp[675061](747963 'new' ioLiteral[238753] "]"))
      (160552 call <~> f[160266] call_tmp[675061])
    }
    label _end_dsiSerialReadWrite[521261]
    (521263 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).readChapelStyleAssocArray[160566](arg _mt[161478]:_MT[238], arg this[161476]:DefaultAssociativeArr[161418](?), arg f[160564]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675066] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675069 'move' call_tmp[675066](747964 'new' ioLiteral[238753] "["))
    const openBracket[160573] "dead at end of block" "const" "insert auto destroy"
    (544111 'init var' openBracket[160573] call_tmp[675066])
    (160576 'end of statement')
    unknown call_tmp[675071] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675074 'move' call_tmp[675071](747965 'new' ioLiteral[238753] "]"))
    const closedBracket[160583] "dead at end of block" "const" "insert auto destroy"
    (544113 'init var' closedBracket[160583] call_tmp[675071])
    (160586 'end of statement')
    unknown first[160588] "dead at end of block" "insert auto destroy"
    (544115 'init var' first[160588] 1)
    (160591 'end of statement')
    unknown readEnd[160593] "dead at end of block" "insert auto destroy"
    (544117 'init var' readEnd[160593] 0)
    (160596 'end of statement')
    (160599 call <~> f[160564] openBracket[160573])
    (482415 'end of statement' openBracket[160573])
    {
      unknown tmp[160702] "temp"
      (160720 'move' tmp[160702](160718 call _cond_test 1))
      WhileDo[160707]
      {
        {
          unknown call_tmp[675076] "expr temp" "maybe param" "maybe type" "temp"
          (675079 'move' call_tmp[675076](160654 call _cond_test first[160588]))
          if call_tmp[675076]
          {
            (160606 call = first[160588] 0)
            (482417 'end of statement' first[160588])
            Try
            {
              {
                (160612 call <~> f[160564] closedBracket[160583])
                (482419 'end of statement' closedBracket[160583])
                (160618 call = readEnd[160593] 1)
                (482421 'end of statement' readEnd[160593])
                break _breakLabel[160706] _breakLabel[160706]
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675081] "expr temp" "maybe param" "maybe type" "temp"
              (675084 'move' call_tmp[675081](354480 'current error'))
              unknown call_tmp[675086] "maybe param" "maybe type" "temp"
              (675089 'move' call_tmp[675086](354481 'dynamic_cast' unmanaged BadFormatError?[415606] call_tmp[675081]))
              unknown tmp[354477] "dead at end of block" "insert auto destroy" "temp"
              (544119 'init var' tmp[354477] call_tmp[675086])
              unknown call_tmp[675091] "expr temp" "maybe param" "maybe type" "temp"
              (675094 'move' call_tmp[675091](354484 '!=' tmp[354477] nil[44]))
              if call_tmp[675091]
              {
                unknown call_tmp[675096] "expr temp" "maybe param" "maybe type" "temp"
                (675099 'move' call_tmp[675096](354491 'to non nilable class' tmp[354477]))
                unknown call_tmp[675101] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675104 'move' call_tmp[675101](747966 'new' _owned[30](?) call_tmp[675096]))
                unknown err[354490] "dead at end of block" "insert auto destroy"
                (544121 'init var' err[354490] call_tmp[675101])
                (482423 'end of statement')
                {
                }
              }
              {
              }
            }
          }
          {
            Try
            {
              {
                unknown call_tmp[675106] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675109 'move' call_tmp[675106](747967 'new' ioLiteral[238753] ","))
                (160638 call <~> f[160564] call_tmp[675106])
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675111] "expr temp" "maybe param" "maybe type" "temp"
              (675114 'move' call_tmp[675111](354501 'current error'))
              unknown call_tmp[675116] "maybe param" "maybe type" "temp"
              (675119 'move' call_tmp[675116](354502 'dynamic_cast' unmanaged BadFormatError?[415606] call_tmp[675111]))
              unknown tmp[354498] "dead at end of block" "insert auto destroy" "temp"
              (544123 'init var' tmp[354498] call_tmp[675116])
              unknown call_tmp[675121] "expr temp" "maybe param" "maybe type" "temp"
              (675124 'move' call_tmp[675121](354505 '!=' tmp[354498] nil[44]))
              if call_tmp[675121]
              {
                unknown call_tmp[675126] "expr temp" "maybe param" "maybe type" "temp"
                (675129 'move' call_tmp[675126](354512 'to non nilable class' tmp[354498]))
                unknown call_tmp[675131] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675134 'move' call_tmp[675131](747968 'new' _owned[30](?) call_tmp[675126]))
                unknown err[354511] "dead at end of block" "insert auto destroy"
                (544125 'init var' err[354511] call_tmp[675131])
                (482425 'end of statement')
                {
                  break _breakLabel[160706] _breakLabel[160706]
                }
              }
              {
              }
            }
          }
          unknown key[160660] "dead at end of block" "insert auto destroy"
          unknown call_tmp[675138] "expr temp" "maybe param" "maybe type" "temp"
          (675141 'move' call_tmp[675138](387235 call idxType _mt[243] this[161476]))
          (544127 'default init var' key[160660] call_tmp[675138])
          (160663 'end of statement')
          (160666 call <~> f[160564] key[160660])
          (482426 'end of statement' key[160660])
          unknown call_tmp[675143] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (675146 'move' call_tmp[675143](747969 'new' ioLiteral[238753] "=>"))
          (160691 call <~> f[160564] call_tmp[675143])
          (482428 'end of statement')
          unknown call_tmp[675150] "expr temp" "maybe param" "maybe type" "temp"
          (675153 'move' call_tmp[675150](160698 call(387244 call (partial) dsiAccess _mt[243] this[161476]) key[160660]))
          (160699 call <~> f[160564] call_tmp[675150])
          (482429 'end of statement' key[160660])
        }
        label _continueLabel[160705]
        (160713 'move' tmp[160702](160711 call _cond_test 1))
        tmp[160702]
      }
      label _breakLabel[160706]
    }
    unknown call_tmp[675155] "expr temp" "maybe param" "maybe type" "temp"
    (675158 'move' call_tmp[675155](160724 call ! readEnd[160593]))
    unknown call_tmp[675160] "expr temp" "maybe param" "maybe type" "temp"
    (675163 'move' call_tmp[675160](160731 call _cond_test call_tmp[675155]))
    if call_tmp[675160]
    {
      (160728 call <~> f[160564] closedBracket[160583])
      (482431 'end of statement' closedBracket[160583])
    }
    (521267 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialWrite[160742](arg _mt[161482]:_MT[238], arg this[161480]:DefaultAssociativeArr[161418](?), arg f[160740]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160750 call(160745 call (partial) dsiSerialReadWrite _mt[243] this[161480]) f[160740])
    (521269 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialRead[160759](arg _mt[161486]:_MT[238], arg this[161484]:DefaultAssociativeArr[161418](?), arg f[160757]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160767 call(160762 call (partial) dsiSerialReadWrite _mt[243] this[161484]) f[160757])
    (521271 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiSorted[160776](arg _mt[161490]:_MT[238], arg this[161488]:DefaultAssociativeArr[161418](?), arg comparator[160774]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521275] "RVV" "temp"
    unknown tableCopy[160814] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter9[583077](arg iterator[583079]:_any[178](?), arg this[583115]:DefaultAssociativeArr[161418](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583126] "RVV" "temp"
      {
        unknown _indexOfInterest[583084] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[583085] "expr temp" "temp"
        (583094 'move' _iterator[583085](583092 call _getIterator iterator[583079]))
        Defer
        {
          {
            (583108 call _freeIterator _iterator[583085])
          }
        }
        { scopeless type
          (583099 'move' _indexOfInterest[583084](583096 call iteratorIndex _iterator[583085]))
        }
        ForLoop[583086] for-expr
        {
          unknown slot[160812] "index var" "insert auto destroy" "no doc"
          (583119 'end of statement')
          (583103 'move' slot[160812] _indexOfInterest[583084])
          (583120 'end of statement' slot[160812])
          {
            {
              unknown yret[583130] "YVV" "temp"
              unknown call_tmp[583139] "expr temp" "maybe param" "maybe type" "temp"
              (583142 'move' call_tmp[583139](160809 call(387261 call (partial) data _mt[243] this[583115]) slot[160812]))
              (583133 'move' yret[583130](583132 'deref' call_tmp[583139]))
              (583135 yield yret[583130])
              (583122 'end of statement' slot[160812])
            }
          }
          label _continueLabel[583089]
          _indexOfInterest[583084]
          _iterator[583085]
        }
        label _breakLabel[583090]
      }
      (583128 return ret[583126])
    }
    function chpl__forexpr9[583057](arg iterExpr[583060]:_any[178](?), arg this[583064]:DefaultAssociativeArr[161418](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583147] "RVV" "temp"
      unknown _iterator[583067] "expr temp" "maybe ref" "temp"
      (583069 'move' _iterator[583067] iterExpr[583060])
      unknown call_tmp[583154] "expr temp" "maybe param" "maybe type" "temp"
      (583157 'move' call_tmp[583154](583072 call chpl__loopexpr_iter9 _iterator[583067] this[583064]))
      (583152 'move' ret[583147](583151 'deref' call_tmp[583154]))
      (583149 return ret[583147])
    }
    unknown call_tmp[583161] "expr temp" "maybe param" "maybe type" "temp"
    (583164 'move' call_tmp[583161](361112 call dom _mt[243] this[161488]))
    unknown call_tmp[583168] "expr temp" "maybe param" "maybe type" "temp"
    (583171 'move' call_tmp[583168](160805 call(160801 call (partial) _fullSlots _mt[243] call_tmp[583161])))
    unknown call_tmp[583173] "maybe param" "maybe type" "temp"
    (583176 'move' call_tmp[583173](583062 call chpl__forexpr9 call_tmp[583168] this[161488]))
    (583180 'iterator record set shape' call_tmp[583173] call_tmp[583168] 1)
    unknown call_tmp[675169] "expr temp" "maybe param" "maybe type" "temp"
    (675172 'move' call_tmp[675169](160783 call chpl_build_low_bounded_range 0))
    unknown call_tmp[675176] "expr temp" "maybe param" "maybe type" "temp"
    (675179 'move' call_tmp[675176](361107 call dom _mt[243] this[161488]))
    unknown call_tmp[675183] "expr temp" "maybe param" "maybe type" "temp"
    (675186 'move' call_tmp[675183](160786 call dsiNumIndices _mt[243] call_tmp[675176]))
    unknown call_tmp[675188] "expr temp" "maybe param" "maybe type" "temp"
    (675191 'move' call_tmp[675188](160789 call # call_tmp[675169] call_tmp[675183]))
    unknown call_tmp[675193] "expr temp" "maybe param" "maybe type" "temp"
    (675196 'move' call_tmp[675193](160793 call chpl__ensureDomainExpr call_tmp[675188]))
    unknown call_tmp[675200] "expr temp" "maybe param" "maybe type" "temp"
    (675203 'move' call_tmp[675200](387255 call eltType _mt[243] this[161488]))
    unknown call_tmp[675205] "maybe param" "maybe type" "temp"
    (675208 'move' call_tmp[675205](160795 call chpl__buildArrayRuntimeType call_tmp[675193] call_tmp[675200]))
    (544129 'init var' tableCopy[160814] call_tmp[583173] call_tmp[675205])
    (160817 'end of statement')
    (160823 call sort tableCopy[160814](comparator = comparator[160774]))
    (482435 'end of statement' tableCopy[160814])
    {
      unknown _indexOfInterest[160830] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160831] "expr temp" "temp"
      (160840 'move' _iterator[160831](160838 call _getIterator tableCopy[160814]))
      Defer
      {
        {
          (160856 call _freeIterator _iterator[160831])
        }
      }
      { scopeless type
        (160845 'move' _indexOfInterest[160830](160842 call iteratorIndex _iterator[160831]))
      }
      ForLoop[160832]
      {
        unknown elem[160849] "index var" "insert auto destroy"
        (482438 'end of statement')
        (160851 'move' elem[160849] _indexOfInterest[160830])
        (482439 'end of statement' elem[160849])
        unknown yret[521279] "YVV" "temp"
        (521282 'move' yret[521279](521281 'deref' elem[160849]))
        (521284 yield yret[521279])
        (482441 'end of statement' elem[160849])
        label _continueLabel[160835]
        _indexOfInterest[160830]
        _iterator[160831]
      }
      label _breakLabel[160836]
    }
    (521277 return ret[521275])
    (355159 'used modules list'(160779 'use' Sort[267968]))
  }
  function DefaultAssociativeArr[161418](?)._doDefaultInitSlot[160871](arg _mt[161494]:_MT[238], arg this[161492]:DefaultAssociativeArr[161418](?), arg slot[160868]:int(64)[13], arg inAdd[160874]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675212] "expr temp" "maybe param" "maybe type" "temp"
    (675215 'move' call_tmp[675212](387271 call eltType _mt[243] this[161492]))
    unknown call_tmp[675217] "expr temp" "maybe param" "maybe type" "temp"
    (675220 'move' call_tmp[675217](160880 call isDefaultInitializable call_tmp[675212]))
    unknown call_tmp[675222] "expr temp" "maybe param" "maybe type" "temp"
    (675225 'move' call_tmp[675222](160881 call ! call_tmp[675217]))
    unknown call_tmp[675227] "expr temp" "maybe param" "maybe type" "temp"
    (675230 'move' call_tmp[675227](160991 call _cond_test call_tmp[675222]))
    if call_tmp[675227]
    {
      unknown call_tmp[675232] "expr temp" "maybe param" "maybe type" "temp"
      (675235 'move' call_tmp[675232](160966 call _cond_test inAdd[160874]))
      if call_tmp[675232]
      {
        unknown call_tmp[675237] "expr temp" "maybe param" "maybe type" "temp"
        (675240 'move' call_tmp[675237](160919 call + "Can't resize domains whose arrays' elements don't " "have default values"))
        (160922 call halt call_tmp[675237])
      }
      {
        unknown call_tmp[675242] "expr temp" "maybe param" "maybe type" "temp"
        (675245 'move' call_tmp[675242](160960 call + "Can't default initialize associative arrays whose " "elements have no default value"))
        (160963 call halt call_tmp[675242])
      }
    }
    {
      unknown initval[160972] "dead at end of block" "no auto destroy"
      unknown call_tmp[675249] "expr temp" "maybe param" "maybe type" "temp"
      (675252 'move' call_tmp[675249](387277 call eltType _mt[243] this[161492]))
      (544131 'default init var' initval[160972] call_tmp[675249])
      (160975 'end of statement')
      unknown dst[160981] "dead at end of block" "ref var"
      unknown call_tmp[675256] "expr temp" "maybe param" "maybe type" "temp"
      (675259 'move' call_tmp[675256](160980 call(387282 call (partial) data _mt[243] this[161492]) slot[160868]))
      (544134 'move' dst[160981](544133 'addr of' call_tmp[675256]))
      (160984 'end of statement')
      (160989 '=' dst[160981] initval[160972])
      (482445 'end of statement' dst[160981] initval[160972])
    }
    (521286 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._defaultInitSlot[161004](arg _mt[161498]:_MT[238], arg this[161496]:DefaultAssociativeArr[161418](?), arg slot[161001]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161011 call(387289 call (partial) _doDefaultInitSlot _mt[243] this[161496]) slot[161001](inAdd = 1))
    (521288 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._deinitSlot[161022](arg _mt[161502]:_MT[238], arg this[161500]:DefaultAssociativeArr[161418](?), arg slot[161019]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675267] "expr temp" "maybe param" "maybe type" "temp"
    (675270 'move' call_tmp[675267](161028 call(387301 call (partial) data _mt[243] this[161500]) slot[161019]))
    (161030 call(387296 call (partial) _deinitElement _mt[243] this[161500]) call_tmp[675267])
    (521290 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._elementNeedsDeinit[161037](arg _mt[161506]:_MT[238], arg this[161504]:DefaultAssociativeArr[161418](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521294] "RVV" "param" "temp"
    unknown call_tmp[675274] "expr temp" "maybe param" "maybe type" "temp"
    (675277 'move' call_tmp[675274](387307 call eltType _mt[243] this[161504]))
    unknown call_tmp[675279] "expr temp" "maybe param" "maybe type" "temp"
    (675282 'move' call_tmp[675279](161042 'needs auto destroy' call_tmp[675274]))
    (521299 'move' ret[521294](521298 'deref' call_tmp[675279]))
    (521296 return ret[521294])
  }
  function DefaultAssociativeArr[161418](?)._deinitElement[161054](arg _mt[161510]:_MT[238], arg this[161508]:DefaultAssociativeArr[161418](?), ref arg elt[161051] :
  (387312 call eltType _mt[243] this[161508])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675288] "expr temp" "maybe param" "maybe type" "temp"
    (675291 'move' call_tmp[675288](161058 call(387318 call (partial) _elementNeedsDeinit _mt[243] this[161508])))
    unknown call_tmp[675293] "expr temp" "maybe param" "maybe type" "temp"
    (675296 'move' call_tmp[675293](161065 call _cond_test call_tmp[675288]))
    if call_tmp[675293]
    {
      (161062 call chpl__autoDestroy elt[161051])
    }
    (521301 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._startRehash[161078](arg _mt[161514]:_MT[238], arg this[161512]:DefaultAssociativeArr[161418](?), arg newSize[161075]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675300] "expr temp" "maybe param" "maybe type" "temp"
    (675303 'move' call_tmp[675300](387324 call tmpData _mt[243] this[161512]))
    unknown call_tmp[675307] "expr temp" "maybe param" "maybe type" "temp"
    (675310 'move' call_tmp[675307](387329 call data _mt[243] this[161512]))
    (161082 call = call_tmp[675300] call_tmp[675307])
    (482452 'end of statement')
    unknown call_tmp[675314] "expr temp" "maybe param" "maybe type" "temp"
    (675317 'move' call_tmp[675314](387334 call data _mt[243] this[161512]))
    unknown call_tmp[675321] "expr temp" "maybe param" "maybe type" "temp"
    (675324 'move' call_tmp[675321](361117 call dom _mt[243] this[161512]))
    unknown call_tmp[675328] "expr temp" "maybe param" "maybe type" "temp"
    (675331 'move' call_tmp[675328](161088 call table _mt[243] call_tmp[675321]))
    unknown call_tmp[675337] "expr temp" "maybe param" "maybe type" "temp"
    (675340 'move' call_tmp[675337](387340 call eltType _mt[243] this[161512]))
    unknown call_tmp[675342] "expr temp" "maybe param" "maybe type" "temp"
    (675345 'move' call_tmp[675342](161097 call(161091 call (partial) allocateData _mt[243] call_tmp[675328]) newSize[161075] call_tmp[675337]))
    (161098 call = call_tmp[675314] call_tmp[675342])
    (521303 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._finishRehash[161109](arg _mt[161518]:_MT[238], arg this[161516]:DefaultAssociativeArr[161418](?), arg oldSize[161106]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675349] "expr temp" "maybe param" "maybe type" "temp"
    (675352 'move' call_tmp[675349](387345 call tmpData _mt[243] this[161516]))
    (161115 call _ddata_free call_tmp[675349] oldSize[161106])
    (482454 'end of statement')
    unknown call_tmp[675356] "expr temp" "maybe param" "maybe type" "temp"
    (675359 'move' call_tmp[675356](387351 call tmpData _mt[243] this[161516]))
    (161120 call = call_tmp[675356] nil[44])
    (521305 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._moveElementDuringRehash[161131](arg _mt[161522]:_MT[238], arg this[161520]:DefaultAssociativeArr[161418](?), arg oldslot[161128]:int(64)[13], arg newslot[161134]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const src[161141] "dead at end of block" "const" "ref var"
    unknown call_tmp[675363] "expr temp" "maybe param" "maybe type" "temp"
    (675366 'move' call_tmp[675363](161140 call(387356 call (partial) tmpData _mt[243] this[161520]) oldslot[161128]))
    (544137 'move' src[161141](544136 'addr of' call_tmp[675363]))
    (161144 'end of statement')
    unknown dst[161150] "dead at end of block" "ref var"
    unknown call_tmp[675370] "expr temp" "maybe param" "maybe type" "temp"
    (675373 'move' call_tmp[675370](161149 call(387362 call (partial) data _mt[243] this[161520]) newslot[161134]))
    (544140 'move' dst[161150](544139 'addr of' call_tmp[675370]))
    (161153 'end of statement')
    (161158 '=' dst[161150] src[161141])
    (482456 'end of statement' dst[161150] src[161141])
    (521307 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiTargetLocales[161164](arg _mt[161526]:_MT[238], arg this[161524]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521311] "RVV" "temp"
    unknown call_tmp[675375] "expr temp" "maybe param" "maybe type" "temp"
    (675378 'move' call_tmp[675375](161167 '_wide_get_locale' this[161524]))
    unknown call_tmp[675380] "expr temp" "maybe param" "maybe type" "temp"
    (675383 'move' call_tmp[675380](161168 call chpl_localeID_to_locale call_tmp[675375]))
    unknown call_tmp[675385] "expr temp" "maybe param" "maybe type" "temp"
    (675388 'move' call_tmp[675385](161171 call chpl__buildArrayExpr call_tmp[675380]))
    (521316 'move' ret[521311](521315 'deref' call_tmp[675385]))
    (521313 return ret[521311])
  }
  function DefaultAssociativeArr[161418](?).dsiHasSingleLocalSubdomain[161180](arg _mt[161530]:_MT[238], arg this[161528]:DefaultAssociativeArr[161418](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521320] "RVV" "param" "temp"
    (521325 'move' ret[521320](521324 'deref' 1))
    (521322 return ret[521320])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalSubdomain[161194](arg _mt[161534]:_MT[238], arg this[161532]:DefaultAssociativeArr[161418](?), arg loc[161191]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521329] "RVV" "temp"
    unknown call_tmp[675390] "expr temp" "maybe param" "maybe type" "temp"
    (675393 'move' call_tmp[675390](161197 '_wide_get_locale' this[161532]))
    unknown call_tmp[675395] "expr temp" "maybe param" "maybe type" "temp"
    (675398 'move' call_tmp[675395](161198 call chpl_localeID_to_locale call_tmp[675390]))
    unknown call_tmp[675400] "expr temp" "maybe param" "maybe type" "temp"
    (675403 'move' call_tmp[675400](161201 call == call_tmp[675395] loc[161191]))
    unknown call_tmp[675405] "expr temp" "maybe param" "maybe type" "temp"
    (675408 'move' call_tmp[675405](161231 call _cond_test call_tmp[675400]))
    if call_tmp[675405]
    {
      unknown call_tmp[675412] "expr temp" "maybe param" "maybe type" "temp"
      (675415 'move' call_tmp[675412](387373 call dom _mt[243] this[161532]))
      unknown call_tmp[675417] "expr temp" "maybe param" "maybe type" "temp"
      (675420 'move' call_tmp[675417](161206 call _getDomain call_tmp[675412]))
      (521334 'move' ret[521329](521333 'deref' call_tmp[675417]))
      gotoReturn _end_dsiLocalSubdomain[521327] _end_dsiLocalSubdomain[521327]
    }
    {
      unknown a[161223] "dead at end of block" "insert auto destroy"
      unknown call_tmp[675424] "expr temp" "maybe param" "maybe type" "temp"
      (675427 'move' call_tmp[675424](361122 call dom _mt[243] this[161532]))
      unknown call_tmp[675431] "expr temp" "maybe param" "maybe type" "temp"
      (675434 'move' call_tmp[675431](161211 call idxType _mt[243] call_tmp[675424]))
      unknown call_tmp[675438] "expr temp" "maybe param" "maybe type" "temp"
      (675441 'move' call_tmp[675438](361127 call dom _mt[243] this[161532]))
      unknown call_tmp[675445] "expr temp" "maybe param" "maybe type" "temp"
      (675448 'move' call_tmp[675445](161216 call parSafe _mt[243] call_tmp[675438]))
      unknown call_tmp[675450] "expr temp" "maybe param" "maybe type" "temp"
      (675453 'move' call_tmp[675450](161221 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[675431](parSafe = call_tmp[675445])))
      (544142 'default init var' a[161223] call_tmp[675450])
      (161226 'end of statement')
      (521339 'move' ret[521329](521338 'deref' a[161223]))
      gotoReturn _end_dsiLocalSubdomain[521327] _end_dsiLocalSubdomain[521327]
      (482462 'end of statement' a[161223])
    }
    label _end_dsiLocalSubdomain[521327]
    (521331 return ret[521329])
  }
  function DefaultAssociativeArr[161418](?).dsiElementInitializationComplete[161240](arg _mt[161538]:_MT[238], arg this[161536]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675457] "expr temp" "maybe param" "maybe type" "temp"
    (675460 'move' call_tmp[675457](161243 call eltsNeedDeinit _mt[243] this[161536]))
    (161247 call = call_tmp[675457] 1)
    (521343 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiElementDeinitializationComplete[161255](arg _mt[161542]:_MT[238], arg this[161540]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675464] "expr temp" "maybe param" "maybe type" "temp"
    (675467 'move' call_tmp[675464](161258 call eltsNeedDeinit _mt[243] this[161540]))
    (161262 call = call_tmp[675464] 0)
    (521345 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiDestroyArr[161274](arg _mt[161546]:_MT[238], arg this[161544]:DefaultAssociativeArr[161418](?), arg deinitElts[161271]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown tmp[428076] "maybe param" "temp"
    (428087 'move' tmp[428076] deinitElts[161271])
    unknown call_tmp[675469] "expr temp" "maybe param" "maybe type" "temp"
    (675472 'move' call_tmp[675469](428089 call _cond_invalid tmp[428076]))
    if call_tmp[675469]
    {
      (428092 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[570048] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[570049] "maybe param" "temp"
    unknown call_tmp[675474] "expr temp" "maybe param" "maybe type" "temp"
    (675477 'move' call_tmp[675474](428077 call isTrue tmp[428076]))
    (570054 'move' tmp[570049](570052 call _cond_test call_tmp[675474]))
    if tmp[570049]
    {
      unknown tmp[570056] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675481] "expr temp" "maybe param" "maybe type" "temp"
      (675484 'move' call_tmp[675481](161278 call eltsNeedDeinit _mt[243] this[161544]))
      (570058 'move' tmp[570056](428080 call isTrue call_tmp[675481]))
      (570063 'move' tmp[570048](570060 '_paramFoldLogical' tmp[570049] tmp[570056]))
    }
    {
      (570068 'move' tmp[570048](570065 '_paramFoldLogical' tmp[570049] 0))
    }
    unknown call_tmp[675486] "expr temp" "maybe param" "maybe type" "temp"
    (675489 'move' call_tmp[675486](161402 call _cond_test tmp[570048]))
    if call_tmp[675486]
    {
      unknown call_tmp[675493] "expr temp" "maybe param" "maybe type" "temp"
      (675496 'move' call_tmp[675493](161285 call(387380 call (partial) _elementNeedsDeinit _mt[243] this[161544])))
      unknown call_tmp[675498] "expr temp" "maybe param" "maybe type" "temp"
      (675501 'move' call_tmp[675498](161397 call _cond_test call_tmp[675493]))
      if call_tmp[675498]
      {
        unknown call_tmp[675505] "expr temp" "maybe param" "maybe type" "temp"
        (675508 'move' call_tmp[675505](387385 call eltType _mt[243] this[161544]))
        unknown call_tmp[675510] "expr temp" "maybe param" "maybe type" "temp"
        (675513 'move' call_tmp[675510](161289 call _deinitElementsIsParallel call_tmp[675505]))
        unknown call_tmp[675515] "expr temp" "maybe param" "maybe type" "temp"
        (675518 'move' call_tmp[675515](161392 call _cond_test call_tmp[675510]))
        if call_tmp[675515]
        {
          unknown call_tmp[675522] "expr temp" "maybe param" "maybe type" "temp"
          (675525 'move' call_tmp[675522](361135 call dom _mt[243] this[161544]))
          unknown call_tmp[675529] "expr temp" "maybe param" "maybe type" "temp"
          (675532 'move' call_tmp[675529](161292 call table _mt[243] call_tmp[675522]))
          unknown call_tmp[675536] "expr temp" "maybe param" "maybe type" "temp"
          (675539 'move' call_tmp[675536](161299 call(161295 call (partial) allSlots _mt[243] call_tmp[675529])))
          Forall {
            induction variables:
              
              unknown slot[161322] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[675536]
            shadow variables:
            other variables
              forall body
            {
              unknown call_tmp[675543] "expr temp" "maybe param" "maybe type" "temp"
              (675546 'move' call_tmp[675543](361140 call dom _mt[243] this[161544]))
              unknown call_tmp[675550] "expr temp" "maybe param" "maybe type" "temp"
              (675553 'move' call_tmp[675550](161306 call(161301 call (partial) _isSlotFull _mt[243] call_tmp[675543]) slot[161322]))
              unknown call_tmp[675555] "expr temp" "maybe param" "maybe type" "temp"
              (675558 'move' call_tmp[675555](161316 call _cond_test call_tmp[675550]))
              if call_tmp[675555]
              {
                unknown call_tmp[675564] "expr temp" "maybe param" "maybe type" "temp"
                (675567 'move' call_tmp[675564](161311 call(387395 call (partial) data _mt[243] this[161544]) slot[161322]))
                (161313 call(387390 call (partial) _deinitElement _mt[243] this[161544]) call_tmp[675564])
                (482467 'end of statement' slot[161322])
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161357] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161358] "expr temp" "temp"
            unknown call_tmp[675571] "expr temp" "maybe param" "maybe type" "temp"
            (675574 'move' call_tmp[675571](361145 call dom _mt[243] this[161544]))
            unknown call_tmp[675578] "expr temp" "maybe param" "maybe type" "temp"
            (675581 'move' call_tmp[675578](161328 call table _mt[243] call_tmp[675571]))
            unknown call_tmp[675585] "expr temp" "maybe param" "maybe type" "temp"
            (675588 'move' call_tmp[675585](161335 call(161331 call (partial) allSlots _mt[243] call_tmp[675578])))
            (161367 'move' _iterator[161358](161365 call _getIterator call_tmp[675585]))
            Defer
            {
              {
                (161384 call _freeIterator _iterator[161358])
              }
            }
            { scopeless type
              (161373 'move' _indexOfInterest[161357](161370 call iteratorIndex _iterator[161358]))
            }
            ForLoop[161359]
            {
              unknown slot[161377] "index var" "insert auto destroy"
              (482470 'end of statement')
              (161379 'move' slot[161377] _indexOfInterest[161357])
              (482471 'end of statement' slot[161377])
              {
                unknown call_tmp[675592] "expr temp" "maybe param" "maybe type" "temp"
                (675595 'move' call_tmp[675592](361150 call dom _mt[243] this[161544]))
                unknown call_tmp[675599] "expr temp" "maybe param" "maybe type" "temp"
                (675602 'move' call_tmp[675599](161342 call(161337 call (partial) _isSlotFull _mt[243] call_tmp[675592]) slot[161377]))
                unknown call_tmp[675604] "expr temp" "maybe param" "maybe type" "temp"
                (675607 'move' call_tmp[675604](161352 call _cond_test call_tmp[675599]))
                if call_tmp[675604]
                {
                  unknown call_tmp[675613] "expr temp" "maybe param" "maybe type" "temp"
                  (675616 'move' call_tmp[675613](161347 call(387406 call (partial) data _mt[243] this[161544]) slot[161377]))
                  (161349 call(387401 call (partial) _deinitElement _mt[243] this[161544]) call_tmp[675613])
                  (482473 'end of statement' slot[161377])
                }
              }
              label _continueLabel[161362]
              _indexOfInterest[161357]
              _iterator[161358]
            }
            label _breakLabel[161363]
          }
        }
      }
    }
    unknown call_tmp[675620] "expr temp" "maybe param" "maybe type" "temp"
    (675623 'move' call_tmp[675620](161408 call eltsNeedDeinit _mt[243] this[161544]))
    (161412 call = call_tmp[675620] 0)
    (521347 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).super[810858](arg _mt[810860]:_MT[238], arg this[810862]:DefaultAssociativeArr[161418](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810872] "RVV" "temp"
    unknown call_tmp[810879] "expr temp" "maybe param" "maybe type" "temp"
    (810882 'move' call_tmp[810879](810866 '.v' this[810862] c"super"))
    (810877 'move' ret[810872](810876 'deref' call_tmp[810879]))
    (810874 return ret[810872])
  }
  function DefaultAssociativeArr[810889](?).idxType[810884](arg _mt[810886]:_MT[238], arg this[810891]:DefaultAssociativeArr[810889](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810926] "RVV" "temp" "type variable"
    unknown borrowOfThis[810893]
    (810918 'end of statement')
    (810895 'move' borrowOfThis[810893](810898 call _cast _borrowedNonNilable[214](?) this[810891]))
    (810919 'end of statement' borrowOfThis[810893])
    unknown call_tmp[810940] "expr temp" "maybe param" "maybe type" "temp"
    (810943 'move' call_tmp[810940](810908 'is bound' borrowOfThis[810893] c"idxType"))
    if call_tmp[810940]
    {
      unknown call_tmp[810945] "expr temp" "maybe param" "maybe type" "temp"
      (810948 'move' call_tmp[810945](810903 '.v' borrowOfThis[810893] c"idxType"))
      unknown call_tmp[810950] "expr temp" "maybe param" "maybe type" "temp"
      (810953 'move' call_tmp[810950](810904 call chpl_checkLegalTypeFieldAccessor this[810891] call_tmp[810945] "idxType"))
      (810931 'move' ret[810926](810930 'deref' call_tmp[810950]))
      gotoReturn _end_idxType[810924] _end_idxType[810924]
      (810921 'end of statement' borrowOfThis[810893])
    }
    {
      (810936 'move' ret[810926](810935 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810924] _end_idxType[810924]
    }
    label _end_idxType[810924]
    (810928 return ret[810926])
  }
  function DefaultAssociativeArr[810889](?).idxType[810955](arg _mt[810957]:_MT[238], arg this[810959]:DefaultAssociativeArr[810889](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810994] "RVV" "temp" "type variable"
    unknown borrowOfThis[810961] "type variable"
    (810986 'end of statement')
    (810963 'move' borrowOfThis[810961](810966 call _cast _borrowedNonNilable[214](?) this[810959]))
    (810987 'end of statement' borrowOfThis[810961])
    unknown call_tmp[811008] "expr temp" "maybe param" "maybe type" "temp"
    (811011 'move' call_tmp[811008](810976 'is bound' borrowOfThis[810961] c"idxType"))
    if call_tmp[811008]
    {
      unknown call_tmp[811013] "expr temp" "maybe param" "maybe type" "temp"
      (811016 'move' call_tmp[811013](810971 '.v' borrowOfThis[810961] c"idxType"))
      unknown call_tmp[811018] "expr temp" "maybe param" "maybe type" "temp"
      (811021 'move' call_tmp[811018](810972 call chpl_checkLegalTypeFieldAccessor this[810959] call_tmp[811013] "idxType"))
      (810999 'move' ret[810994](810998 'deref' call_tmp[811018]))
      gotoReturn _end_idxType[810992] _end_idxType[810992]
      (810989 'end of statement' borrowOfThis[810961])
    }
    {
      (811004 'move' ret[810994](811003 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810992] _end_idxType[810992]
    }
    label _end_idxType[810992]
    (810996 return ret[810994])
  }
  function DefaultAssociativeArr[810889](?).parSafeDom[811023](arg _mt[811025]:_MT[238], arg this[811027]:DefaultAssociativeArr[810889](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811058] "RVV" "param" "temp"
    unknown borrowOfThis[811029]
    (811050 'end of statement')
    (811031 'move' borrowOfThis[811029](811034 call _cast _borrowedNonNilable[214](?) this[811027]))
    (811051 'end of statement' borrowOfThis[811029])
    unknown call_tmp[811072] "expr temp" "maybe param" "maybe type" "temp"
    (811075 'move' call_tmp[811072](811040 'is bound' borrowOfThis[811029] c"parSafeDom"))
    if call_tmp[811072]
    {
      unknown call_tmp[811077] "expr temp" "maybe param" "maybe type" "temp"
      (811080 'move' call_tmp[811077](811039 '.' borrowOfThis[811029] c"parSafeDom"))
      (811063 'move' ret[811058](811062 'deref' call_tmp[811077]))
      gotoReturn _end_parSafeDom[811056] _end_parSafeDom[811056]
      (811053 'end of statement' borrowOfThis[811029])
    }
    {
      (811068 'move' ret[811058](811067 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811056] _end_parSafeDom[811056]
    }
    label _end_parSafeDom[811056]
    (811060 return ret[811058])
  }
  function DefaultAssociativeArr[810889](?).parSafeDom[811082](arg _mt[811084]:_MT[238], arg this[811086]:DefaultAssociativeArr[810889](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811117] "RVV" "param" "temp"
    unknown borrowOfThis[811088] "type variable"
    (811109 'end of statement')
    (811090 'move' borrowOfThis[811088](811093 call _cast _borrowedNonNilable[214](?) this[811086]))
    (811110 'end of statement' borrowOfThis[811088])
    unknown call_tmp[811131] "expr temp" "maybe param" "maybe type" "temp"
    (811134 'move' call_tmp[811131](811099 'is bound' borrowOfThis[811088] c"parSafeDom"))
    if call_tmp[811131]
    {
      unknown call_tmp[811136] "expr temp" "maybe param" "maybe type" "temp"
      (811139 'move' call_tmp[811136](811098 '.' borrowOfThis[811088] c"parSafeDom"))
      (811122 'move' ret[811117](811121 'deref' call_tmp[811136]))
      gotoReturn _end_parSafeDom[811115] _end_parSafeDom[811115]
      (811112 'end of statement' borrowOfThis[811088])
    }
    {
      (811127 'move' ret[811117](811126 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811115] _end_parSafeDom[811115]
    }
    label _end_parSafeDom[811115]
    (811119 return ret[811117])
  }
  function DefaultAssociativeArr[161418](?).dom[811141](arg _mt[811143]:_MT[238], arg this[811145]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811155] "RVV" "temp"
    unknown call_tmp[811162] "expr temp" "maybe param" "maybe type" "temp"
    (811165 'move' call_tmp[811162](811149 '.' this[811145] c"dom"))
    (811160 'move' ret[811155](811159 'addr of' call_tmp[811162]))
    (811157 return ret[811155])
  }
  function DefaultAssociativeArr[161418](?).dataSize[811167](arg _mt[811169]:_MT[238], arg this[811171]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811181] "RVV" "temp"
    unknown call_tmp[811188] "expr temp" "maybe param" "maybe type" "temp"
    (811191 'move' call_tmp[811188](811175 '.' this[811171] c"dataSize"))
    (811186 'move' ret[811181](811185 'addr of' call_tmp[811188]))
    (811183 return ret[811181])
  }
  function DefaultAssociativeArr[161418](?).data[811193](arg _mt[811195]:_MT[238], arg this[811197]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811207] "RVV" "temp"
    unknown call_tmp[811214] "expr temp" "maybe param" "maybe type" "temp"
    (811217 'move' call_tmp[811214](811201 '.' this[811197] c"data"))
    (811212 'move' ret[811207](811211 'addr of' call_tmp[811214]))
    (811209 return ret[811207])
  }
  function DefaultAssociativeArr[161418](?).tmpData[811219](arg _mt[811221]:_MT[238], arg this[811223]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811233] "RVV" "temp"
    unknown call_tmp[811240] "expr temp" "maybe param" "maybe type" "temp"
    (811243 'move' call_tmp[811240](811227 '.' this[811223] c"tmpData"))
    (811238 'move' ret[811233](811237 'addr of' call_tmp[811240]))
    (811235 return ret[811233])
  }
  function DefaultAssociativeArr[161418](?).eltsNeedDeinit[811245](arg _mt[811247]:_MT[238], arg this[811249]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811259] "RVV" "temp"
    unknown call_tmp[811266] "expr temp" "maybe param" "maybe type" "temp"
    (811269 'move' call_tmp[811266](811253 '.' this[811249] c"eltsNeedDeinit"))
    (811264 'move' ret[811259](811263 'addr of' call_tmp[811266]))
    (811261 return ret[811259])
  }
  type DefaultAssociativeArr[161418](?) val super[355690]:AbsBaseArr[149697](?) "delay instantiation" "super class" unknown idxType[158982] "type variable" unknown parSafeDom[158986] "param" bool[10] unknown dom[158997](158995 call unmanaged DefaultAssociativeDom[415471](?) idxType[158982](parSafe = parSafeDom[158986])) val dataSize[159002]:int(64)[13] int(64)[13] unknown data[159010](159009 call _ddata[11695](?) eltType[149671]) unknown tmpData[159018](159017 call _ddata[11695](?) eltType[149671]) val eltsNeedDeinit[159023]:bool[10] 1
  type DefaultAssociativeArr[810889](?)
  type DefaultAssociativeArr[386698](?)
  (355145 'used modules list'(156237 'use' DSIUtil[230888])(156244 'use' ChapelDistribution[145415])(156246 'use' ChapelRange[64180])(156247 'use' SysBasic[223516])(156248 'use' ChapelArray[113672])(156252 'use' ChapelBase[307])(156254 'use' ChapelLocks[187256])(156255 'use' IO[230891])(156258 'use' ChapelHashing[155365])(156260 'use' ChapelHashtable[200393])(156262 'use' SysError[264231]))
}