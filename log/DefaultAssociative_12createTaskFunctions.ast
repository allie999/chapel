AST dump for DefaultAssociative after pass createTaskFunctions.
Module use list: DSIUtil ChapelDistribution ChapelRange SysBasic ChapelArray ChapelBase ChapelLocks IO ChapelHashing ChapelHashtable SysError Sort 

{
  function chpl__init_DefaultAssociative[415910]() : void[4] "insert line file info" "module init"
  {
    (543863 'init var' debugDefaultAssoc[156265] 0)
    (156268 'end of statement')
    (543865 'init var' debugAssocDataPar[156270] 0)
    (156273 'end of statement')
    (521258 return _void[55])
  }
  unknown debugDefaultAssoc[156265] "config" "param"
  unknown debugAssocDataPar[156270] "config" "param"
  function DefaultAssociativeDomRehashHelper[156472](?).startRehash[156289](arg _mt[156476]:_MT[238], arg this[156474]:DefaultAssociativeDomRehashHelper[156472](?), arg newSize[156286]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156307] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156308] "expr temp" "temp"
      unknown call_tmp[672771] "expr temp" "maybe param" "maybe type" "temp"
      (672774 'move' call_tmp[672771](360707 call dom _mt[243] this[156474]))
      unknown call_tmp[672778] "expr temp" "maybe param" "maybe type" "temp"
      (672781 'move' call_tmp[672778](156293 call _arrs _mt[243] call_tmp[672771]))
      (156317 'move' _iterator[156308](156315 call _getIterator call_tmp[672778]))
      Defer
      {
        {
          (156334 call _freeIterator _iterator[156308])
        }
      }
      { scopeless type
        (156323 'move' _indexOfInterest[156307](156320 call iteratorIndex _iterator[156308]))
      }
      ForLoop[156309]
      {
        unknown arr[156327] "index var" "insert auto destroy"
        (481983 'end of statement')
        (156329 'move' arr[156327] _indexOfInterest[156307])
        (481984 'end of statement' arr[156327])
        {
          (156304 call(156299 call (partial) _startRehash _mt[243] arr[156327]) newSize[156286])
          (481986 'end of statement' arr[156327])
        }
        label _continueLabel[156312]
        _indexOfInterest[156307]
        _iterator[156308]
      }
      label _breakLabel[156313]
    }
    (520776 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).moveElementDuringRehash[156350](arg _mt[156480]:_MT[238], arg this[156478]:DefaultAssociativeDomRehashHelper[156472](?), arg oldSlot[156347]:int(64)[13], arg newSlot[156353]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156373] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156374] "expr temp" "temp"
      unknown call_tmp[672787] "expr temp" "maybe param" "maybe type" "temp"
      (672790 'move' call_tmp[672787](360713 call dom _mt[243] this[156478]))
      unknown call_tmp[672794] "expr temp" "maybe param" "maybe type" "temp"
      (672797 'move' call_tmp[672794](156358 call _arrs _mt[243] call_tmp[672787]))
      (156383 'move' _iterator[156374](156381 call _getIterator call_tmp[672794]))
      Defer
      {
        {
          (156400 call _freeIterator _iterator[156374])
        }
      }
      { scopeless type
        (156389 'move' _indexOfInterest[156373](156386 call iteratorIndex _iterator[156374]))
      }
      ForLoop[156375]
      {
        unknown arr[156393] "index var" "insert auto destroy"
        (481989 'end of statement')
        (156395 'move' arr[156393] _indexOfInterest[156373])
        (481990 'end of statement' arr[156393])
        {
          (156370 call(156364 call (partial) _moveElementDuringRehash _mt[243] arr[156393]) oldSlot[156347] newSlot[156353])
          (481992 'end of statement' arr[156393])
        }
        label _continueLabel[156378]
        _indexOfInterest[156373]
        _iterator[156374]
      }
      label _breakLabel[156379]
    }
    (520778 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).finishRehash[156416](arg _mt[156484]:_MT[238], arg this[156482]:DefaultAssociativeDomRehashHelper[156472](?), arg oldSize[156413]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[156434] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156435] "expr temp" "temp"
      unknown call_tmp[672803] "expr temp" "maybe param" "maybe type" "temp"
      (672806 'move' call_tmp[672803](360719 call dom _mt[243] this[156482]))
      unknown call_tmp[672810] "expr temp" "maybe param" "maybe type" "temp"
      (672813 'move' call_tmp[672810](156420 call _arrs _mt[243] call_tmp[672803]))
      (156444 'move' _iterator[156435](156442 call _getIterator call_tmp[672810]))
      Defer
      {
        {
          (156461 call _freeIterator _iterator[156435])
        }
      }
      { scopeless type
        (156450 'move' _indexOfInterest[156434](156447 call iteratorIndex _iterator[156435]))
      }
      ForLoop[156436]
      {
        unknown arr[156454] "index var" "insert auto destroy"
        (481995 'end of statement')
        (156456 'move' arr[156454] _indexOfInterest[156434])
        (481996 'end of statement' arr[156454])
        {
          (156431 call(156426 call (partial) _finishRehash _mt[243] arr[156454]) oldSize[156413])
          (481998 'end of statement' arr[156454])
        }
        label _continueLabel[156439]
        _indexOfInterest[156434]
        _iterator[156435]
      }
      label _breakLabel[156440]
    }
    (520780 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).super[810108](arg _mt[810110]:_MT[238], arg this[810112]:DefaultAssociativeDomRehashHelper[156472](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810122] "RVV" "temp"
    unknown call_tmp[810129] "expr temp" "maybe param" "maybe type" "temp"
    (810132 'move' call_tmp[810129](810116 '.v' this[810112] c"super"))
    (810127 'move' ret[810122](810126 'deref' call_tmp[810129]))
    (810124 return ret[810122])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).dom[810134](arg _mt[810136]:_MT[238], arg this[810138]:DefaultAssociativeDomRehashHelper[156472](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810148] "RVV" "temp"
    unknown call_tmp[810155] "expr temp" "maybe param" "maybe type" "temp"
    (810158 'move' call_tmp[810155](810142 '.' this[810138] c"dom"))
    (810153 'move' ret[810148](810152 'addr of' call_tmp[810155]))
    (810150 return ret[810148])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).init[810160](arg _mt[810162]:_MT[238], arg this[810163]:DefaultAssociativeDomRehashHelper[156472](?), in arg dom[810238]:unmanaged DefaultAssociativeDom[415382](?) =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[810253] "temporary of super field" "temp"
    (810255 'move' super_tmp[810253](810252 '.v' this[810163] c"super"))
    (810173 call(810171 call (partial) init _mt[243] super_tmp[810253]))
    (810279 'end of statement')
    unknown tmp[810258] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[810282] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[810294] "expr temp" "maybe param" "maybe type" "temp"
      (810297 'move' call_tmp[810294](810260 '.v' this[810163] c"super"))
      (810286 'move' call_type_tmp[810282](810263 'typeof' call_tmp[810294]))
    }
    (810264 'move' tmp[810258] call_type_tmp[810282])
    unknown call_tmp[810299] "maybe param" "maybe type" "temp"
    (810302 'move' call_tmp[810299](810269 'cast' tmp[810258] this[810163]))
    unknown chpl__thisAsParent[810266] "dead at end of block" "insert auto destroy" "temp"
    (810290 'init var' chpl__thisAsParent[810266] call_tmp[810299] tmp[810258])
    (810272 'setcid' chpl__thisAsParent[810266])
    (810274 'init field' this[810163] c"dom" dom[810238])
    (810280 'end of statement')
    (810277 'setcid' this[810163])
    (810288 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).deinit[810304](arg _mt[810306]:_MT[238], arg this[810308]:DefaultAssociativeDomRehashHelper[156472](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (810316 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).writeThis[810318](arg _mt[810322]:_MT[238], arg this[810320]:DefaultAssociativeDomRehashHelper[156472](?), arg f[810321]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810327 call writeThisDefaultImpl f[810321] this[810320])
    (810332 return _void[55])
  }
  function DefaultAssociativeDomRehashHelper[156472](?).readThis[810334](arg _mt[810338]:_MT[238], arg this[810336]:DefaultAssociativeDomRehashHelper[156472](?), arg f[810337]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810342 call readThisDefaultImpl f[810337] this[810336])
    (810348 return _void[55])
  }
  type DefaultAssociativeDomRehashHelper[156472](?) val super[355598]:chpl__rehashHelpers[202342] "super class" val dom[156279]:unmanaged DefaultAssociativeDom[415382](?) unmanaged DefaultAssociativeDom[415382](?)
  type DefaultAssociativeDomRehashHelper[386605](?)
  function DefaultAssociativeDom[158856](?).lockTable[156533](arg _mt[158860]:_MT[238], arg this[158858]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672819] "expr temp" "maybe param" "maybe type" "temp"
    (672822 'move' call_tmp[672819](386588 call parSafe _mt[243] this[158858]))
    unknown call_tmp[672824] "expr temp" "maybe param" "maybe type" "temp"
    (672827 'move' call_tmp[672824](156543 call _cond_test call_tmp[672819]))
    if call_tmp[672824]
    {
      unknown call_tmp[672831] "expr temp" "maybe param" "maybe type" "temp"
      (672834 'move' call_tmp[672831](360727 call tableLock _mt[243] this[158858]))
      (156541 call(156537 call (partial) lock _mt[243] call_tmp[672831]))
    }
    (520782 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).unlockTable[156553](arg _mt[158864]:_MT[238], arg this[158862]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672840] "expr temp" "maybe param" "maybe type" "temp"
    (672843 'move' call_tmp[672840](386593 call parSafe _mt[243] this[158862]))
    unknown call_tmp[672845] "expr temp" "maybe param" "maybe type" "temp"
    (672848 'move' call_tmp[672845](156563 call _cond_test call_tmp[672840]))
    if call_tmp[672845]
    {
      unknown call_tmp[672852] "expr temp" "maybe param" "maybe type" "temp"
      (672855 'move' call_tmp[672852](360732 call tableLock _mt[243] this[158862]))
      (156561 call(156557 call (partial) unlock _mt[243] call_tmp[672852]))
    }
    (520784 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).linksDistribution[156573](arg _mt[158868]:_MT[238], arg this[158866]:DefaultAssociativeDom[158856](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520788] "RVV" "param" "temp"
    (520793 'move' ret[520788](520792 'deref' 0))
    (520790 return ret[520788])
  }
  function DefaultAssociativeDom[158856](?).dsiLinksDistribution[156583](arg _mt[158872]:_MT[238], arg this[158870]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520797] "RVV" "temp"
    (520802 'move' ret[520797](520801 'deref' 0))
    (520799 return ret[520797])
  }
  function DefaultAssociativeDom[158856](?).init[156595](arg _mt[158876]:_MT[238], arg this[158874]:DefaultAssociativeDom[158856](?), arg idxType[156593]:_any[178](?), param arg parSafe[156598]:bool[10], arg dist[156603]:unmanaged DefaultDist[415355]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461948] "temporary of super field" "temp"
    (461956 'move' super_tmp[461948](461949 '.v' this[158874] c"super"))
    (461952 call init _mt[243] super_tmp[461948])
    (482004 'end of statement')
    unknown tmp[461864] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492260] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[672859] "expr temp" "maybe param" "maybe type" "temp"
      (672862 'move' call_tmp[672859](461866 '.v' this[158874] c"super"))
      (492264 'move' call_type_tmp[492260](461869 'typeof' call_tmp[672859]))
    }
    (461870 'move' tmp[461864] call_type_tmp[492260])
    unknown call_tmp[672864] "maybe param" "maybe type" "temp"
    (672867 'move' call_tmp[672864](461875 'cast' tmp[461864] this[158874]))
    unknown chpl__thisAsParent[461872] "dead at end of block" "insert auto destroy" "temp"
    (543867 'init var' chpl__thisAsParent[461872] call_tmp[672864] tmp[461864])
    (461878 'setcid' chpl__thisAsParent[461872])
    (482005 'end of statement')
    unknown call_tmp[672869] "expr temp" "maybe param" "maybe type" "temp"
    (672872 'move' call_tmp[672869](156609 call chpl__validDefaultAssocDomIdxType idxType[156593]))
    unknown call_tmp[672874] "expr temp" "maybe param" "maybe type" "temp"
    (672877 'move' call_tmp[672874](156610 call ! call_tmp[672869]))
    unknown call_tmp[672879] "expr temp" "maybe param" "maybe type" "temp"
    (672882 'move' call_tmp[672879](156655 call _cond_test call_tmp[672874]))
    if call_tmp[672879]
    {
      unknown call_tmp[672884] "expr temp" "maybe param" "maybe type" "temp"
      (672887 'move' call_tmp[672884](156633 call _cast string[26] idxType[156593]))
      (156653 call compilerError "Default Associative domains with idxType=" call_tmp[672884] " are not allowed" 2)
    }
    unknown tmp[461880] "temp" "type variable"
    (461882 'move' tmp[461880] idxType[156593])
    (461884 'init field' this[158874] c"idxType" tmp[461880])
    unknown call_tmp[672889] "expr temp" "maybe param" "maybe type" "temp"
    (672892 'move' call_tmp[672889](461889 call _cast bool[10] parSafe[156598]))
    (461891 'init field' this[158874] c"parSafe" call_tmp[672889])
    (482007 'end of statement')
    unknown tmp[461894] "temp"
    (461897 'init var' tmp[461894] dist[156603] unmanaged DefaultDist[415355])
    (461899 'init field' this[158874] c"dist" tmp[461894])
    (482008 'end of statement')
    unknown tmp[461903] "temp"
    unknown call_tmp[672894] "expr temp" "maybe param" "maybe type" "temp"
    (672897 'move' call_tmp[672894](461906 call chpl__processorAtomicType int(64)[13]))
    (461908 'default init var' tmp[461903] call_tmp[672894])
    (461910 '.=' this[158874] c"numEntries" tmp[461903])
    (482009 'end of statement')
    unknown tmp[461914] "temp"
    unknown tmp[569735] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569736] "maybe param" "temp"
    unknown call_tmp[672899] "expr temp" "maybe param" "maybe type" "temp"
    (672902 'move' call_tmp[672899](461928 '.v' this[158874] c"parSafe"))
    (569741 'move' tmp[569736](569739 call _cond_test call_tmp[672899]))
    if tmp[569736]
    {
      (569746 'move' tmp[569735](569743 '_paramFoldLogical' tmp[569736] chpl_LocalSpinlock[187386]))
    }
    {
      (569751 'move' tmp[569735](569748 '_paramFoldLogical' tmp[569736] nothing[7]))
    }
    (461922 'default init var' tmp[461914] tmp[569735])
    (461924 '.=' this[158874] c"tableLock" tmp[461914])
    (482010 'end of statement')
    unknown call_tmp[672904] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (672907 'move' call_tmp[672904](747860 'new' chpl__hashtable[204509](?) idxType[156593] nothing[7]))
    unknown call_tmp[672909] "expr temp" "maybe param" "maybe type" "temp"
    (672912 'move' call_tmp[672909](461943 '.v' this[158874] c"idxType"))
    unknown call_tmp[672914] "maybe param" "maybe type" "temp"
    (672917 'move' call_tmp[672914](461934 call chpl__hashtable[204509](?) call_tmp[672909] nothing[7]))
    unknown tmp[461931] "temp"
    (461937 'init var' tmp[461931] call_tmp[672904] call_tmp[672914])
    (461939 'init field' this[158874] c"table" tmp[461931])
    (482011 'end of statement')
    (461947 'setcid' this[158874])
    (482012 'end of statement')
    unknown call_tmp[672921] "expr temp" "maybe param" "maybe type" "temp"
    (672924 'move' call_tmp[672921](156708 call table _mt[243] this[158874]))
    unknown call_tmp[672928] "expr temp" "maybe param" "maybe type" "temp"
    (672931 'move' call_tmp[672928](156713 call rehashHelpers _mt[243] call_tmp[672921]))
    unknown call_tmp[672933] "expr temp" "maybe param" "maybe type" "temp"
    (672936 'move' call_tmp[672933](156721 call _cast _unmanagedNonNilable[223](?) this[158874]))
    unknown call_tmp[672938] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (672941 'move' call_tmp[672938](747861 'new' DefaultAssociativeDomRehashHelper[386605](?) call_tmp[672933]))
    (156725 call = call_tmp[672928] call_tmp[672938])
    (520804 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).deinit[156732](arg _mt[158880]:_MT[238], arg this[158878]:DefaultAssociativeDom[158856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520806 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiBuildArray[156741](arg _mt[158884]:_MT[238], arg this[158882]:DefaultAssociativeDom[158856](?), arg eltType[156739]:_any[178](?), param arg initElts[156744]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520810] "RVV" "temp"
    unknown call_tmp[672945] "expr temp" "maybe param" "maybe type" "temp"
    (672948 'move' call_tmp[672945](386616 call idxType _mt[243] this[158882]))
    unknown call_tmp[672952] "expr temp" "maybe param" "maybe type" "temp"
    (672955 'move' call_tmp[672952](386621 call parSafe _mt[243] this[158882]))
    unknown call_tmp[672957] "expr temp" "maybe param" "maybe type" "temp"
    (672960 'move' call_tmp[672957](156761 call _to_unmanaged this[158882]))
    unknown call_tmp[672962] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (672965 'move' call_tmp[672962](747862 'new' DefaultAssociativeArr[386610](?)(eltType = eltType[156739])(idxType = call_tmp[672945])(parSafeDom = call_tmp[672952])(dom = call_tmp[672957])(initElts = initElts[156744])(_chpl_manager = unmanaged[220](?))))
    (520815 'move' ret[520810](520814 'deref' call_tmp[672962]))
    (520812 return ret[520810])
  }
  function DefaultAssociativeDom[158856](?).dsiSerialReadWrite[156775](arg _mt[158888]:_MT[238], arg this[158886]:DefaultAssociativeDom[158856](?), arg f[156773]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[672969] "maybe param" "maybe type" "temp"
    (672972 'move' call_tmp[672969](156782 call(156778 call (partial) binary _mt[243] f[156773])))
    unknown binary[156783] "dead at end of block" "insert auto destroy"
    (543869 'init var' binary[156783] call_tmp[672969])
    (156786 'end of statement')
    unknown call_tmp[672976] "expr temp" "maybe param" "maybe type" "temp"
    (672979 'move' call_tmp[672976](156789 call writing _mt[243] f[156773]))
    unknown call_tmp[672981] "expr temp" "maybe param" "maybe type" "temp"
    (672984 'move' call_tmp[672981](157124 call _cond_test call_tmp[672976]))
    if call_tmp[672981]
    {
      unknown call_tmp[672986] "expr temp" "maybe param" "maybe type" "temp"
      (672989 'move' call_tmp[672986](156932 call _cond_test binary[156783]))
      if call_tmp[672986]
      {
        unknown call_tmp[672993] "maybe param" "maybe type" "temp"
        (672996 'move' call_tmp[672993](386628 call dsiNumIndices _mt[243] this[158886]))
        unknown numIndices[156795] "dead at end of block" "insert auto destroy"
        (543871 'init var' numIndices[156795] call_tmp[672993] int(64)[13])
        (156798 'end of statement')
        (156802 call <~> f[156773] numIndices[156795])
        (482015 'end of statement' numIndices[156795])
        {
          unknown _indexOfInterest[156813] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156814] "expr temp" "temp"
          (156823 'move' _iterator[156814](156821 call _getIterator this[158886]))
          Defer
          {
            {
              (156839 call _freeIterator _iterator[156814])
            }
          }
          { scopeless type
            (156828 'move' _indexOfInterest[156813](156825 call iteratorIndex _iterator[156814]))
          }
          ForLoop[156815]
          {
            unknown idx[156832] "index var" "insert auto destroy"
            (482018 'end of statement')
            (156834 'move' idx[156832] _indexOfInterest[156813])
            (482019 'end of statement' idx[156832])
            {
              (156809 call <~> f[156773] idx[156832])
              (482021 'end of statement' idx[156832])
            }
            label _continueLabel[156818]
            _indexOfInterest[156813]
            _iterator[156814]
          }
          label _breakLabel[156819]
        }
      }
      {
        unknown first[156847] "dead at end of block" "insert auto destroy"
        (543873 'init var' first[156847] 1)
        (156850 'end of statement')
        unknown call_tmp[672998] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673001 'move' call_tmp[672998](747863 'new' ioLiteral[238665] "{"))
        (156858 call <~> f[156773] call_tmp[672998])
        (482023 'end of statement')
        {
          unknown _indexOfInterest[156890] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156891] "expr temp" "temp"
          (156900 'move' _iterator[156891](156898 call _getIterator this[158886]))
          Defer
          {
            {
              (156916 call _freeIterator _iterator[156891])
            }
          }
          { scopeless type
            (156905 'move' _indexOfInterest[156890](156902 call iteratorIndex _iterator[156891]))
          }
          ForLoop[156892]
          {
            unknown idx[156909] "index var" "insert auto destroy"
            (482025 'end of statement')
            (156911 'move' idx[156909] _indexOfInterest[156890])
            (482026 'end of statement' idx[156909])
            {
              unknown call_tmp[673003] "expr temp" "maybe param" "maybe type" "temp"
              (673006 'move' call_tmp[673003](156878 call _cond_test first[156847]))
              if call_tmp[673003]
              {
                (156866 call = first[156847] 0)
                (482028 'end of statement' first[156847])
              }
              {
                unknown call_tmp[673008] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (673011 'move' call_tmp[673008](747864 'new' ioLiteral[238665] ", "))
                (156875 call <~> f[156773] call_tmp[673008])
              }
              (156887 call <~> f[156773] idx[156909])
              (482031 'end of statement' idx[156909])
            }
            label _continueLabel[156895]
            _indexOfInterest[156890]
            _iterator[156891]
          }
          label _breakLabel[156896]
        }
        unknown call_tmp[673013] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673016 'move' call_tmp[673013](747865 'new' ioLiteral[238665] "}"))
        (156929 call <~> f[156773] call_tmp[673013])
      }
    }
    {
      (156939 call(386648 call (partial) dsiClear _mt[243] this[158886]))
      (482034 'end of statement')
      unknown call_tmp[673020] "expr temp" "maybe param" "maybe type" "temp"
      (673023 'move' call_tmp[673020](157120 call _cond_test binary[156783]))
      if call_tmp[673020]
      {
        unknown numIndices[156944] "dead at end of block" "insert auto destroy"
        (543875 'default init var' numIndices[156944] int(64)[13])
        (156947 'end of statement')
        (156951 call <~> f[156773] numIndices[156944])
        (482035 'end of statement' numIndices[156944])
        {
          unknown _indexOfInterest[156975] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156976] "expr temp" "temp"
          unknown call_tmp[673025] "expr temp" "maybe param" "maybe type" "temp"
          (673028 'move' call_tmp[673025](156990 call chpl_direct_range_iter 1 numIndices[156944] 1))
          (156985 'move' _iterator[156976](156983 call _getIterator call_tmp[673025]))
          Defer
          {
            {
              (157006 call _freeIterator _iterator[156976])
            }
          }
          { scopeless type
            (156995 'move' _indexOfInterest[156975](156992 call iteratorIndex _iterator[156976]))
          }
          ForLoop[156977]
          {
            unknown i[156999] "index var" "insert auto destroy"
            (482038 'end of statement')
            (157001 'move' i[156999] _indexOfInterest[156975])
            (482039 'end of statement' i[156999])
            {
              unknown idx[156960] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673032] "expr temp" "maybe param" "maybe type" "temp"
              (673035 'move' call_tmp[673032](386656 call idxType _mt[243] this[158886]))
              (543877 'default init var' idx[156960] call_tmp[673032])
              (156963 'end of statement')
              (156967 call <~> f[156773] idx[156960])
              (482041 'end of statement' idx[156960])
              (156973 call(386662 call (partial) dsiAdd _mt[243] this[158886]) idx[156960])
              (482043 'end of statement' idx[156960])
            }
            label _continueLabel[156980]
            _indexOfInterest[156975]
            _iterator[156976]
          }
          label _breakLabel[156981]
        }
      }
      {
        unknown call_tmp[673039] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673042 'move' call_tmp[673039](747866 'new' ioLiteral[238665] "{"))
        (157019 call <~> f[156773] call_tmp[673039])
        (482045 'end of statement')
        unknown first[157024] "dead at end of block" "insert auto destroy"
        (543879 'init var' first[157024] 1)
        (157027 'end of statement')
        unknown call_tmp[673044] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673047 'move' call_tmp[673044](747867 'new' ioLiteral[238665] "," 1))
        unknown comma[157034] "dead at end of block" "insert auto destroy"
        (543881 'init var' comma[157034] call_tmp[673044])
        (157037 'end of statement')
        unknown call_tmp[673049] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (673052 'move' call_tmp[673049](747868 'new' ioLiteral[238665] "}"))
        unknown end[157043] "dead at end of block" "insert auto destroy"
        (543883 'init var' end[157043] call_tmp[673049])
        (157046 'end of statement')
        {
          unknown tmp[157099] "temp"
          (157117 'move' tmp[157099](157115 call _cond_test 1))
          WhileDo[157104]
          {
            {
              Try
              {
                {
                  (157050 call <~> f[156773] end[157043])
                  (482046 'end of statement' end[157043])
                  break _breakLabel[157103] _breakLabel[157103]
                }
              }
              Catch err : BadFormatError
              {
                unknown call_tmp[673054] "expr temp" "maybe param" "maybe type" "temp"
                (673057 'move' call_tmp[673054](354370 'current error'))
                unknown call_tmp[673059] "maybe param" "maybe type" "temp"
                (673062 'move' call_tmp[673059](354371 'dynamic_cast' unmanaged BadFormatError?[415517] call_tmp[673054]))
                unknown tmp[354367] "dead at end of block" "insert auto destroy" "temp"
                (543885 'init var' tmp[354367] call_tmp[673059])
                unknown call_tmp[673064] "expr temp" "maybe param" "maybe type" "temp"
                (673067 'move' call_tmp[673064](354374 '!=' tmp[354367] nil[44]))
                if call_tmp[673064]
                {
                  unknown call_tmp[673069] "expr temp" "maybe param" "maybe type" "temp"
                  (673072 'move' call_tmp[673069](354381 'to non nilable class' tmp[354367]))
                  unknown call_tmp[673074] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (673077 'move' call_tmp[673074](747869 'new' _owned[30](?) call_tmp[673069]))
                  unknown err[354380] "dead at end of block" "insert auto destroy"
                  (543887 'init var' err[354380] call_tmp[673074])
                  (482048 'end of statement')
                  {
                  }
                }
                {
                }
              }
              unknown call_tmp[673079] "expr temp" "maybe param" "maybe type" "temp"
              (673082 'move' call_tmp[673079](157067 call ! first[157024]))
              unknown call_tmp[673084] "expr temp" "maybe param" "maybe type" "temp"
              (673087 'move' call_tmp[673084](157074 call _cond_test call_tmp[673079]))
              if call_tmp[673084]
              {
                (157071 call <~> f[156773] comma[157034])
                (482049 'end of statement' comma[157034])
              }
              (157081 call = first[157024] 0)
              (482051 'end of statement' first[157024])
              unknown idx[157085] "dead at end of block" "insert auto destroy"
              unknown call_tmp[673091] "expr temp" "maybe param" "maybe type" "temp"
              (673094 'move' call_tmp[673091](386680 call idxType _mt[243] this[158886]))
              (543889 'default init var' idx[157085] call_tmp[673091])
              (157088 'end of statement')
              (157091 call <~> f[156773] idx[157085])
              (482053 'end of statement' idx[157085])
              (157097 call(386686 call (partial) dsiAdd _mt[243] this[158886]) idx[157085])
              (482055 'end of statement' idx[157085])
            }
            label _continueLabel[157102]
            (157110 'move' tmp[157099](157108 call _cond_test 1))
            tmp[157099]
          }
          label _breakLabel[157103]
        }
      }
    }
    (520817 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiSerialWrite[157134](arg _mt[158892]:_MT[238], arg this[158890]:DefaultAssociativeDom[158856](?), arg f[157132]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157142 call(157137 call (partial) dsiSerialReadWrite _mt[243] this[158890]) f[157132])
    (520819 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiSerialRead[157151](arg _mt[158896]:_MT[238], arg this[158894]:DefaultAssociativeDom[158856](?), arg f[157149]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (157159 call(157154 call (partial) dsiSerialReadWrite _mt[243] this[158894]) f[157149])
    (520821 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiAssignDomain[157170](arg _mt[158900]:_MT[238], arg this[158898]:DefaultAssociativeDom[158856](?), arg rhs[157167]:_domain[125902](?), arg lhsPrivate[157173]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (157180 call chpl_assignDomainWithIndsIterSafeForRemoving this[158898] rhs[157167])
    (520823 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiNumIndices[157187](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158856](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[520827] "RVV" "temp"
    unknown call_tmp[673104] "expr temp" "maybe param" "maybe type" "temp"
    (673107 'move' call_tmp[673104](360749 call numEntries _mt[243] this[158902]))
    unknown call_tmp[673111] "expr temp" "maybe param" "maybe type" "temp"
    (673114 'move' call_tmp[673111](157194 call(157190 call (partial) read _mt[243] call_tmp[673104])))
    (520832 'move' ret[520827](520831 'deref' call_tmp[673111]))
    (520829 return ret[520827])
  }
  function DefaultAssociativeDom[158856](?).dsiIndsIterSafeForRemoving[157202](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520836] "RVV" "temp"
    unknown call_tmp[673118] "expr temp" "maybe param" "maybe type" "temp"
    (673121 'move' call_tmp[673118](360754 call table _mt[243] this[158906]))
    unknown call_tmp[673125] "expr temp" "maybe param" "maybe type" "temp"
    (673128 'move' call_tmp[673125](157207 call postponeResize _mt[243] call_tmp[673118]))
    (157211 call = call_tmp[673125] 1)
    (482061 'end of statement')
    {
      unknown _indexOfInterest[157225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157226] "expr temp" "temp"
      unknown call_tmp[673132] "expr temp" "maybe param" "maybe type" "temp"
      (673135 'move' call_tmp[673132](157221 call(157217 call (partial) these _mt[243] this[158906])))
      (157235 'move' _iterator[157226](157233 call _getIterator call_tmp[673132]))
      Defer
      {
        {
          (157252 call _freeIterator _iterator[157226])
        }
      }
      { scopeless type
        (157241 'move' _indexOfInterest[157225](157238 call iteratorIndex _iterator[157226]))
      }
      ForLoop[157227]
      {
        unknown i[157245] "index var" "insert auto destroy"
        (482063 'end of statement')
        (157247 'move' i[157245] _indexOfInterest[157225])
        (482064 'end of statement' i[157245])
        unknown yret[520840] "YVV" "temp"
        (520843 'move' yret[520840](520842 'deref' i[157245]))
        (520845 yield yret[520840])
        (482066 'end of statement' i[157245])
        label _continueLabel[157230]
        _indexOfInterest[157225]
        _iterator[157226]
      }
      label _breakLabel[157231]
    }
    const tmp[157292] "const" "temp"
    unknown call_tmp[673137] "expr temp" "maybe param" "maybe type" "temp"
    (673140 'move' call_tmp[673137](157289 '_wide_get_locale' this[158906]))
    (157294 'move' tmp[157292](157290 'deref' call_tmp[673137]))
    (935166 call on_fn[935162] tmp[157292])
    function on_fn[935162](const in arg dummy_locale_arg[935164]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[673144] "expr temp" "maybe param" "maybe type" "temp"
        (673147 'move' call_tmp[673144](360760 call table _mt[243] this[158906]))
        unknown call_tmp[673151] "expr temp" "maybe param" "maybe type" "temp"
        (673154 'move' call_tmp[673151](157261 call postponeResize _mt[243] call_tmp[673144]))
        (157265 call = call_tmp[673151] 0)
        (482068 'end of statement')
        (157271 call(386700 call (partial) lockTable _mt[243] this[158906]))
        (482069 'end of statement')
        Defer
        {
          {
            (157275 call(386706 call (partial) unlockTable _mt[243] this[158906]))
          }
        }
        unknown call_tmp[673162] "expr temp" "maybe param" "maybe type" "temp"
        (673165 'move' call_tmp[673162](360765 call table _mt[243] this[158906]))
        (157287 call(157283 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673162]))
      }
      (935169 return _void[55])
    }
    {
    }
    (520838 return ret[520836])
  }
  function DefaultAssociativeDom[158856](?)._isSlotFull[157308](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158856](?), arg slot[157305]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520849] "RVV" "temp"
    unknown call_tmp[673171] "expr temp" "maybe param" "maybe type" "temp"
    (673174 'move' call_tmp[673171](360770 call table _mt[243] this[158910]))
    unknown call_tmp[673178] "expr temp" "maybe param" "maybe type" "temp"
    (673181 'move' call_tmp[673178](157317 call(157312 call (partial) table _mt[243] call_tmp[673171]) slot[157305]))
    unknown call_tmp[673185] "expr temp" "maybe param" "maybe type" "temp"
    (673188 'move' call_tmp[673185](157322 call(157318 call (partial) isFull _mt[243] call_tmp[673178])))
    (520855 'move' ret[520849](520854 'coerce' call_tmp[673185] bool[10]))
    (520851 return ret[520849])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158856](?).these[157331](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520859] "RVV" "temp"
    {
      unknown _indexOfInterest[157381] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157382] "expr temp" "temp"
      unknown call_tmp[673192] "expr temp" "maybe param" "maybe type" "temp"
      (673195 'move' call_tmp[673192](360775 call table _mt[243] this[158914]))
      unknown call_tmp[673199] "expr temp" "maybe param" "maybe type" "temp"
      (673202 'move' call_tmp[673199](157341 call(157337 call (partial) allSlots _mt[243] call_tmp[673192])))
      (157391 'move' _iterator[157382](157389 call _getIterator call_tmp[673199]))
      Defer
      {
        {
          (157408 call _freeIterator _iterator[157382])
        }
      }
      { scopeless type
        (157397 'move' _indexOfInterest[157381](157394 call iteratorIndex _iterator[157382]))
      }
      ForLoop[157383]
      {
        unknown slot[157401] "index var" "insert auto destroy"
        (482074 'end of statement')
        (157403 'move' slot[157401] _indexOfInterest[157381])
        (482075 'end of statement' slot[157401])
        {
          unknown aSlot[157349] "dead at end of block" "ref var"
          unknown call_tmp[673206] "expr temp" "maybe param" "maybe type" "temp"
          (673209 'move' call_tmp[673206](360780 call table _mt[243] this[158914]))
          unknown call_tmp[673213] "expr temp" "maybe param" "maybe type" "temp"
          (673216 'move' call_tmp[673213](157348 call(157343 call (partial) table _mt[243] call_tmp[673206]) slot[157401]))
          (543892 'move' aSlot[157349](543891 'addr of' call_tmp[673213]))
          (157352 'end of statement' slot[157401])
          unknown call_tmp[673220] "expr temp" "maybe param" "maybe type" "temp"
          (673223 'move' call_tmp[673220](157357 call status _mt[243] aSlot[157349]))
          unknown call_tmp[673225] "expr temp" "maybe param" "maybe type" "temp"
          (673228 'move' call_tmp[673225](157366 call == call_tmp[673220] full[200404]))
          unknown call_tmp[673230] "expr temp" "maybe param" "maybe type" "temp"
          (673233 'move' call_tmp[673230](157377 call _cond_test call_tmp[673225]))
          if call_tmp[673230]
          {
            unknown yret[520863] "YVV" "temp"
            unknown call_tmp[673237] "expr temp" "maybe param" "maybe type" "temp"
            (673240 'move' call_tmp[673237](157371 call key _mt[243] aSlot[157349]))
            (520866 'move' yret[520863](520865 'deref' call_tmp[673237]))
            (520868 yield yret[520863])
            (482078 'end of statement' aSlot[157349])
          }
        }
        label _continueLabel[157386]
        _indexOfInterest[157381]
        _iterator[157382]
      }
      label _breakLabel[157387]
    }
    (520861 return ret[520859])
  }
  function DefaultAssociativeDom[158856](?).these[157424](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158856](?), param arg tag[157421]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520872] "RVV" "temp"
    unknown call_tmp[673242] "expr temp" "maybe param" "maybe type" "temp"
    (673245 'move' call_tmp[673242](157456 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[673242]
    {
      (157453 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157503] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157504] "expr temp" "temp"
      unknown call_tmp[673249] "expr temp" "maybe param" "maybe type" "temp"
      (673252 'move' call_tmp[673249](360789 call table _mt[243] this[158918]))
      unknown call_tmp[673256] "expr temp" "maybe param" "maybe type" "temp"
      (673259 'move' call_tmp[673256](157469 call(157463 call (partial) allSlots _mt[243] call_tmp[673249])(tag = tag[157421])))
      (157513 'move' _iterator[157504](157511 call _getIterator call_tmp[673256]))
      Defer
      {
        {
          (157530 call _freeIterator _iterator[157504])
        }
      }
      { scopeless type
        (157519 'move' _indexOfInterest[157503](157516 call iteratorIndex _iterator[157504]))
      }
      ForLoop[157505]
      {
        unknown slot[157523] "index var" "insert auto destroy"
        (482082 'end of statement')
        (157525 'move' slot[157523] _indexOfInterest[157503])
        (482083 'end of statement' slot[157523])
        {
          unknown aSlot[157477] "dead at end of block" "ref var"
          unknown call_tmp[673263] "expr temp" "maybe param" "maybe type" "temp"
          (673266 'move' call_tmp[673263](360794 call table _mt[243] this[158918]))
          unknown call_tmp[673270] "expr temp" "maybe param" "maybe type" "temp"
          (673273 'move' call_tmp[673270](157476 call(157471 call (partial) table _mt[243] call_tmp[673263]) slot[157523]))
          (543895 'move' aSlot[157477](543894 'addr of' call_tmp[673270]))
          (157480 'end of statement' slot[157523])
          unknown call_tmp[673277] "expr temp" "maybe param" "maybe type" "temp"
          (673280 'move' call_tmp[673277](157483 call status _mt[243] aSlot[157477]))
          unknown call_tmp[673282] "expr temp" "maybe param" "maybe type" "temp"
          (673285 'move' call_tmp[673282](157490 call == call_tmp[673277] full[200404]))
          unknown call_tmp[673287] "expr temp" "maybe param" "maybe type" "temp"
          (673290 'move' call_tmp[673287](157499 call _cond_test call_tmp[673282]))
          if call_tmp[673287]
          {
            unknown yret[520876] "YVV" "temp"
            unknown call_tmp[673294] "expr temp" "maybe param" "maybe type" "temp"
            (673297 'move' call_tmp[673294](157493 call key _mt[243] aSlot[157477]))
            (520879 'move' yret[520876](520878 'deref' call_tmp[673294]))
            (520881 yield yret[520876])
            (482086 'end of statement' aSlot[157477])
          }
        }
        label _continueLabel[157508]
        _indexOfInterest[157503]
        _iterator[157504]
      }
      label _breakLabel[157509]
    }
    (520874 return ret[520872])
  }
  where {
    (157431 call == tag[157421] standalone[451])
  }
  function DefaultAssociativeDom[158856](?).these[157546](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158856](?), param arg tag[157543]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520885] "RVV" "temp"
    unknown call_tmp[673299] "expr temp" "maybe param" "maybe type" "temp"
    (673302 'move' call_tmp[673299](157577 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[673299]
    {
      (157575 call writeln "*** In associative domain leader iterator")
    }
    {
      unknown _indexOfInterest[157599] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157600] "expr temp" "temp"
      unknown call_tmp[673306] "expr temp" "maybe param" "maybe type" "temp"
      (673309 'move' call_tmp[673306](360803 call table _mt[243] this[158922]))
      unknown call_tmp[673313] "expr temp" "maybe param" "maybe type" "temp"
      (673316 'move' call_tmp[673313](157591 call(157585 call (partial) allSlots _mt[243] call_tmp[673306])(tag = tag[157543])))
      (157609 'move' _iterator[157600](157607 call _getIterator call_tmp[673313]))
      Defer
      {
        {
          (157626 call _freeIterator _iterator[157600])
        }
      }
      { scopeless type
        (157615 'move' _indexOfInterest[157599](157612 call iteratorIndex _iterator[157600]))
      }
      ForLoop[157601]
      {
        unknown chunk[157619] "index var" "insert auto destroy"
        (482090 'end of statement')
        (157621 'move' chunk[157619] _indexOfInterest[157599])
        (482091 'end of statement' chunk[157619])
        unknown yret[520889] "YVV" "temp"
        unknown call_tmp[673318] "expr temp" "maybe param" "maybe type" "temp"
        (673321 'move' call_tmp[673318](157595 call _build_tuple chunk[157619] this[158922]))
        (520892 'move' yret[520889](520891 'deref' call_tmp[673318]))
        (520894 yield yret[520889])
        (482093 'end of statement' chunk[157619])
        label _continueLabel[157604]
        _indexOfInterest[157599]
        _iterator[157600]
      }
      label _breakLabel[157605]
    }
    (520887 return ret[520885])
  }
  where {
    (157553 call == tag[157543] leader[447])
  }
  function DefaultAssociativeDom[158856](?).these[157642](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158856](?), param arg tag[157639]:iterKind[453], arg followThis[157644]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520898] "RVV" "temp"
    unknown tmp[157659] "dead at end of block" "insert auto destroy" "temp"
    (543897 'init var' tmp[157659] followThis[157644])
    (157666 call _check_tuple_var_decl tmp[157659] 2)
    (482095 'end of statement')
    unknown call_tmp[673323] "maybe param" "maybe type" "temp"
    (673326 'move' call_tmp[673323](157660 call tmp[157659] 0))
    unknown chunk[157653] "dead at end of block" "insert auto destroy"
    (543899 'init var' chunk[157653] call_tmp[673323])
    unknown call_tmp[673328] "maybe param" "maybe type" "temp"
    (673331 'move' call_tmp[673328](157663 call tmp[157659] 1))
    unknown followThisDom[157655] "dead at end of block" "insert auto destroy"
    (543901 'init var' followThisDom[157655] call_tmp[673328])
    (157671 'end of statement')
    unknown call_tmp[673333] "expr temp" "maybe param" "maybe type" "temp"
    (673336 'move' call_tmp[673333](157695 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[673333]
    {
      (157693 call writeln "In associative domain follower code")
    }
    unknown call_tmp[673338] "maybe param" "maybe type" "temp"
    (673341 'move' call_tmp[673338](157702 call == followThisDom[157655] this[158926]))
    const sameDom[157704] "dead at end of block" "const" "insert auto destroy"
    (543903 'init var' sameDom[157704] call_tmp[673338])
    (157707 'end of statement')
    unknown call_tmp[673343] "expr temp" "maybe param" "maybe type" "temp"
    (673346 'move' call_tmp[673343](157709 call ! sameDom[157704]))
    unknown call_tmp[673348] "expr temp" "maybe param" "maybe type" "temp"
    (673351 'move' call_tmp[673348](157747 call _cond_test call_tmp[673343]))
    if call_tmp[673348]
    {
      unknown call_tmp[673355] "expr temp" "maybe param" "maybe type" "temp"
      (673358 'move' call_tmp[673355](157712 call dsiNumIndices _mt[243] followThisDom[157655]))
      unknown call_tmp[673362] "expr temp" "maybe param" "maybe type" "temp"
      (673365 'move' call_tmp[673362](157716 call dsiNumIndices _mt[243] this[158926]))
      unknown call_tmp[673367] "expr temp" "maybe param" "maybe type" "temp"
      (673370 'move' call_tmp[673367](157719 call != call_tmp[673355] call_tmp[673362]))
      unknown call_tmp[673372] "expr temp" "maybe param" "maybe type" "temp"
      (673375 'move' call_tmp[673372](157742 call _cond_test call_tmp[673367]))
      if call_tmp[673372]
      {
        (157740 call halt "zippered associative domains do not match")
      }
    }
    unknown call_tmp[673379] "expr temp" "maybe param" "maybe type" "temp"
    (673382 'move' call_tmp[673379](157753 call table _mt[243] followThisDom[157655]))
    unknown call_tmp[673386] "maybe param" "maybe type" "temp"
    (673389 'move' call_tmp[673386](157756 call table _mt[243] call_tmp[673379]))
    const otherTable[157759] "dead at end of block" "const" "insert auto destroy"
    (543905 'init var' otherTable[157759] call_tmp[673386])
    (157762 'end of statement' followThisDom[157655] followThisDom[157655])
    {
      unknown _indexOfInterest[157858] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157859] "expr temp" "temp"
      (157868 'move' _iterator[157859](157866 call _getIterator chunk[157653]))
      Defer
      {
        {
          (157884 call _freeIterator _iterator[157859])
        }
      }
      { scopeless type
        (157873 'move' _indexOfInterest[157858](157870 call iteratorIndex _iterator[157859]))
      }
      ForLoop[157860]
      {
        unknown slot[157877] "index var" "insert auto destroy"
        (482101 'end of statement')
        (157879 'move' slot[157877] _indexOfInterest[157858])
        (482102 'end of statement' slot[157877])
        {
          const aSlot[157769] "dead at end of block" "const" "ref var"
          unknown call_tmp[673391] "expr temp" "maybe param" "maybe type" "temp"
          (673394 'move' call_tmp[673391](157768 call otherTable[157759] slot[157877]))
          (543908 'move' aSlot[157769](543907 'addr of' call_tmp[673391]))
          (157772 'end of statement' otherTable[157759] slot[157877])
          unknown call_tmp[673398] "expr temp" "maybe param" "maybe type" "temp"
          (673401 'move' call_tmp[673398](157779 call(157775 call (partial) isFull _mt[243] aSlot[157769])))
          unknown call_tmp[673403] "expr temp" "maybe param" "maybe type" "temp"
          (673406 'move' call_tmp[673403](157854 call _cond_test call_tmp[673398]))
          if call_tmp[673403]
          {
            unknown idx[157781] "dead at end of block" "insert auto destroy"
            (543910 'init var' idx[157781] slot[157877])
            (157784 'end of statement' slot[157877])
            unknown call_tmp[673408] "expr temp" "maybe param" "maybe type" "temp"
            (673411 'move' call_tmp[673408](157787 call ! sameDom[157704]))
            unknown call_tmp[673413] "expr temp" "maybe param" "maybe type" "temp"
            (673416 'move' call_tmp[673413](157838 call _cond_test call_tmp[673408]))
            if call_tmp[673413]
            {
              unknown call_tmp[673420] "expr temp" "maybe param" "maybe type" "temp"
              (673423 'move' call_tmp[673420](360813 call table _mt[243] this[158926]))
              unknown call_tmp[673429] "expr temp" "maybe param" "maybe type" "temp"
              (673432 'move' call_tmp[673429](157801 call key _mt[243] aSlot[157769]))
              unknown call_tmp[673434] "maybe param" "maybe type" "temp"
              (673437 'move' call_tmp[673434](157805 call(157797 call (partial) findFullSlot _mt[243] call_tmp[673420]) call_tmp[673429]))
              const tmp[157806] "dead at end of block" "const" "insert auto destroy" "temp"
              (543912 'init var' tmp[157806] call_tmp[673434])
              (157813 call _check_tuple_var_decl tmp[157806] 2)
              (482107 'end of statement')
              unknown call_tmp[673439] "maybe param" "maybe type" "temp"
              (673442 'move' call_tmp[673439](157807 call tmp[157806] 0))
              const match[157789] "dead at end of block" "const" "insert auto destroy"
              (543914 'init var' match[157789] call_tmp[673439])
              unknown call_tmp[673444] "maybe param" "maybe type" "temp"
              (673447 'move' call_tmp[673444](157810 call tmp[157806] 1))
              const loc[157791] "dead at end of block" "const" "insert auto destroy"
              (543916 'init var' loc[157791] call_tmp[673444])
              (157818 'end of statement')
              unknown call_tmp[673449] "expr temp" "maybe param" "maybe type" "temp"
              (673452 'move' call_tmp[673449](157821 call ! match[157789]))
              unknown call_tmp[673454] "expr temp" "maybe param" "maybe type" "temp"
              (673457 'move' call_tmp[673454](157828 call _cond_test call_tmp[673449]))
              if call_tmp[673454]
              {
                (157826 call halt "zippered associative domains do not match")
              }
              (157835 call = idx[157781] loc[157791])
              (482109 'end of statement' idx[157781] loc[157791])
            }
            unknown yret[520902] "YVV" "temp"
            unknown call_tmp[673461] "expr temp" "maybe param" "maybe type" "temp"
            (673464 'move' call_tmp[673461](360819 call table _mt[243] this[158926]))
            unknown call_tmp[673468] "expr temp" "maybe param" "maybe type" "temp"
            (673471 'move' call_tmp[673468](157848 call(157843 call (partial) table _mt[243] call_tmp[673461]) idx[157781]))
            unknown call_tmp[673475] "expr temp" "maybe param" "maybe type" "temp"
            (673478 'move' call_tmp[673475](157849 call key _mt[243] call_tmp[673468]))
            (520905 'move' yret[520902](520904 'deref' call_tmp[673475]))
            (520907 yield yret[520902])
            (482112 'end of statement' idx[157781])
          }
        }
        label _continueLabel[157863]
        _indexOfInterest[157858]
        _iterator[157859]
      }
      label _breakLabel[157864]
    }
    (520900 return ret[520898])
  }
  where {
    (157651 call == tag[157639] follower[449])
  }
  function DefaultAssociativeDom[158856](?).dsiMyDist[157896](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520911] "RVV" "temp"
    unknown call_tmp[673482] "expr temp" "maybe param" "maybe type" "temp"
    (673485 'move' call_tmp[673482](386741 call dist _mt[243] this[158930]))
    (520917 'move' ret[520911](520916 'coerce' call_tmp[673482] unmanaged BaseDist[415379]))
    (520913 return ret[520911])
  }
  { scopeless type
    unmanaged BaseDist[415379]
  }
  function DefaultAssociativeDom[158856](?).dsiClear[157909](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const tmp[158088] "const" "temp"
    unknown call_tmp[673487] "expr temp" "maybe param" "maybe type" "temp"
    (673490 'move' call_tmp[673487](158085 '_wide_get_locale' this[158934]))
    (158090 'move' tmp[158088](158086 'deref' call_tmp[673487]))
    (935175 call on_fn[935171] tmp[158088])
    function on_fn[935171](const in arg dummy_locale_arg[935173]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (157914 call(386746 call (partial) lockTable _mt[243] this[158934]))
        (482115 'end of statement')
        {
          unknown _indexOfInterest[158032] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158033] "expr temp" "temp"
          unknown call_tmp[673496] "expr temp" "maybe param" "maybe type" "temp"
          (673499 'move' call_tmp[673496](360824 call table _mt[243] this[158934]))
          unknown call_tmp[673503] "expr temp" "maybe param" "maybe type" "temp"
          (673506 'move' call_tmp[673503](157923 call(157919 call (partial) allSlots _mt[243] call_tmp[673496])))
          (158042 'move' _iterator[158033](158040 call _getIterator call_tmp[673503]))
          Defer
          {
            {
              (158059 call _freeIterator _iterator[158033])
            }
          }
          { scopeless type
            (158048 'move' _indexOfInterest[158032](158045 call iteratorIndex _iterator[158033]))
          }
          ForLoop[158034]
          {
            unknown slot[158052] "index var" "insert auto destroy"
            (482117 'end of statement')
            (158054 'move' slot[158052] _indexOfInterest[158032])
            (482118 'end of statement' slot[158052])
            {
              unknown aSlot[157931] "dead at end of block" "ref var"
              unknown call_tmp[673510] "expr temp" "maybe param" "maybe type" "temp"
              (673513 'move' call_tmp[673510](360829 call table _mt[243] this[158934]))
              unknown call_tmp[673517] "expr temp" "maybe param" "maybe type" "temp"
              (673520 'move' call_tmp[673517](157930 call(157925 call (partial) table _mt[243] call_tmp[673510]) slot[158052]))
              (543919 'move' aSlot[157931](543918 'addr of' call_tmp[673517]))
              (157934 'end of statement' slot[158052])
              unknown call_tmp[673524] "expr temp" "maybe param" "maybe type" "temp"
              (673527 'move' call_tmp[673524](157941 call(157937 call (partial) isFull _mt[243] aSlot[157931])))
              unknown call_tmp[673529] "expr temp" "maybe param" "maybe type" "temp"
              (673532 'move' call_tmp[673529](158011 call _cond_test call_tmp[673524]))
              if call_tmp[673529]
              {
                unknown tmpKey[157943] "dead at end of block" "insert auto destroy"
                unknown call_tmp[673536] "expr temp" "maybe param" "maybe type" "temp"
                (673539 'move' call_tmp[673536](386752 call idxType _mt[243] this[158934]))
                (543921 'default init var' tmpKey[157943] call_tmp[673536])
                (157946 'end of statement')
                unknown tmpVal[157949] "dead at end of block" "insert auto destroy"
                (543923 'default init var' tmpVal[157949] nothing[7])
                (157952 'end of statement')
                unknown call_tmp[673543] "expr temp" "maybe param" "maybe type" "temp"
                (673546 'move' call_tmp[673543](360835 call table _mt[243] this[158934]))
                (157963 call(157956 call (partial) clearSlot _mt[243] call_tmp[673543]) aSlot[157931] tmpKey[157943] tmpVal[157949])
                (482121 'end of statement' aSlot[157931] tmpKey[157943] tmpVal[157949])
                {
                  unknown _indexOfInterest[157978] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[157979] "expr temp" "temp"
                  unknown call_tmp[673552] "expr temp" "maybe param" "maybe type" "temp"
                  (673555 'move' call_tmp[673552](386760 call _arrs _mt[243] this[158934]))
                  (157988 'move' _iterator[157979](157986 call _getIterator call_tmp[673552]))
                  Defer
                  {
                    {
                      (158004 call _freeIterator _iterator[157979])
                    }
                  }
                  { scopeless type
                    (157993 'move' _indexOfInterest[157978](157990 call iteratorIndex _iterator[157979]))
                  }
                  ForLoop[157980]
                  {
                    unknown arr[157997] "index var" "insert auto destroy"
                    (482126 'end of statement')
                    (157999 'move' arr[157997] _indexOfInterest[157978])
                    (482127 'end of statement' arr[157997])
                    {
                      (157975 call(157970 call (partial) _deinitSlot _mt[243] arr[157997]) slot[158052])
                      (482129 'end of statement' arr[157997] slot[158052])
                    }
                    label _continueLabel[157983]
                    _indexOfInterest[157978]
                    _iterator[157979]
                  }
                  label _breakLabel[157984]
                }
              }
              unknown call_tmp[673561] "expr temp" "maybe param" "maybe type" "temp"
              (673564 'move' call_tmp[673561](360841 call table _mt[243] this[158934]))
              unknown call_tmp[673568] "expr temp" "maybe param" "maybe type" "temp"
              (673571 'move' call_tmp[673568](158021 call(158016 call (partial) table _mt[243] call_tmp[673561]) slot[158052]))
              unknown call_tmp[673575] "expr temp" "maybe param" "maybe type" "temp"
              (673578 'move' call_tmp[673575](158022 call status _mt[243] call_tmp[673568]))
              (158029 call = call_tmp[673575] empty[200402])
              (482132 'end of statement' slot[158052])
            }
            label _continueLabel[158037]
            _indexOfInterest[158032]
            _iterator[158033]
          }
          label _breakLabel[158038]
        }
        unknown call_tmp[673582] "expr temp" "maybe param" "maybe type" "temp"
        (673585 'move' call_tmp[673582](360847 call numEntries _mt[243] this[158934]))
        (158072 call(158067 call (partial) write _mt[243] call_tmp[673582]) 0)
        (482134 'end of statement')
        unknown call_tmp[673591] "expr temp" "maybe param" "maybe type" "temp"
        (673594 'move' call_tmp[673591](360852 call table _mt[243] this[158934]))
        (158079 call(158075 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673591]))
        (482135 'end of statement')
        (158083 call(386766 call (partial) unlockTable _mt[243] this[158934]))
      }
      (935178 return _void[55])
    }
    {
    }
    (520919 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiMember[158105](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158856](?), arg idx[158102] :
  (386771 call idxType _mt[243] this[158938])) : _unknown[51] "method" "primary method"
  {
    unknown ret[520923] "RVV" "temp"
    (158110 call(386775 call (partial) lockTable _mt[243] this[158938]))
    (482137 'end of statement')
    Defer
    {
      {
        (158115 call(386779 call (partial) unlockTable _mt[243] this[158938]))
      }
    }
    unknown call_tmp[673608] "expr temp" "maybe param" "maybe type" "temp"
    (673611 'move' call_tmp[673608](360857 call table _mt[243] this[158938]))
    unknown call_tmp[673615] "maybe param" "maybe type" "temp"
    (673618 'move' call_tmp[673615](158131 call(158126 call (partial) findFullSlot _mt[243] call_tmp[673608]) idx[158102]))
    unknown tmp[158132] "dead at end of block" "insert auto destroy" "temp"
    (543925 'init var' tmp[158132] call_tmp[673615])
    (158139 call _check_tuple_var_decl tmp[158132] 2)
    (482139 'end of statement')
    unknown call_tmp[673620] "maybe param" "maybe type" "temp"
    (673623 'move' call_tmp[673620](158133 call tmp[158132] 0))
    unknown foundFullSlot[158120] "dead at end of block" "insert auto destroy"
    (543927 'init var' foundFullSlot[158120] call_tmp[673620])
    unknown call_tmp[673625] "maybe param" "maybe type" "temp"
    (673628 'move' call_tmp[673625](158136 call tmp[158132] 1))
    unknown slotNum[158122] "dead at end of block" "insert auto destroy"
    (543929 'init var' slotNum[158122] call_tmp[673625])
    (158144 'end of statement')
    (520929 'move' ret[520923](520928 'coerce' foundFullSlot[158120] bool[10]))
    gotoReturn _end_dsiMember[520921] _end_dsiMember[520921]
    (482140 'end of statement' foundFullSlot[158120])
    label _end_dsiMember[520921]
    (520925 return ret[520923])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[158856](?).dsiAdd[158155](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158856](?), in arg idx[158153]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520935] "RVV" "temp"
    unknown call_tmp[673632] "expr temp" "maybe param" "maybe type" "temp"
    (673635 'move' call_tmp[673632](158160 call(386787 call (partial) _addWrapper _mt[243] this[158942]) idx[158153]))
    unknown call_tmp[673637] "maybe param" "maybe type" "temp"
    (673640 'move' call_tmp[673637](158163 call call_tmp[673632] 1))
    const numInds[158164] "dead at end of block" "const" "insert auto destroy"
    (543931 'init var' numInds[158164] call_tmp[673637])
    (158167 'end of statement')
    (520940 'move' ret[520935](520939 'deref' numInds[158164]))
    gotoReturn _end_dsiAdd[520933] _end_dsiAdd[520933]
    (482142 'end of statement' numInds[158164])
    label _end_dsiAdd[520933]
    (520937 return ret[520935])
  }
  function DefaultAssociativeDom[158856](?)._addWrapper[158180](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158856](?), in arg idx[158177] :
  (386794 call idxType _mt[243] this[158946])) : _unknown[51] "method" "primary method"
  {
    unknown ret[520946] "RVV" "temp"
    unknown call_tmp[673644] "maybe param" "maybe type" "temp"
    (673647 'move' call_tmp[673644](158183 call - 1))
    unknown slotNum[158185] "dead at end of block" "insert auto destroy"
    (543933 'init var' slotNum[158185] call_tmp[673644])
    (158188 'end of statement')
    unknown retVal[158191] "dead at end of block" "insert auto destroy"
    (543935 'init var' retVal[158191] 0)
    (158194 'end of statement')
    const tmp[158223] "const" "temp"
    unknown call_tmp[673649] "expr temp" "maybe param" "maybe type" "temp"
    (673652 'move' call_tmp[673649](158220 '_wide_get_locale' this[158946]))
    (158225 'move' tmp[158223](158221 'deref' call_tmp[673649]))
    (935184 call on_fn[935180] tmp[158223])
    function on_fn[935180](const in arg dummy_locale_arg[935182]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (158198 call(386799 call (partial) lockTable _mt[243] this[158946]))
        (482144 'end of statement')
        Defer
        {
          {
            (158203 call(386803 call (partial) unlockTable _mt[243] this[158946]))
          }
        }
        unknown tmp[492266] "expr temp" "maybe param" "maybe type" "temp"
        unknown tmp[492291] "maybe param" "temp"
        (492294 'move' tmp[492291](492292 'addr of' slotNum[158185]))
        unknown tmp[492302] "maybe param" "temp"
        (492305 'move' tmp[492302](492303 'addr of' retVal[158191]))
        (492267 'move' tmp[492266](158216 call(386811 call (partial) _add _mt[243] this[158946]) idx[158177]))
        { scopeless
          unknown call_tmp[673662] "expr temp" "maybe param" "maybe type" "temp"
          (673665 'move' call_tmp[673662](492273 call size _mt[243] tmp[492266]))
          unknown call_tmp[673667] "expr temp" "maybe param" "maybe type" "temp"
          (673670 'move' call_tmp[673667](492276 call != 2 call_tmp[673662]))
          unknown call_tmp[673672] "expr temp" "maybe param" "maybe type" "temp"
          (673675 'move' call_tmp[673672](492283 call _cond_test call_tmp[673667]))
          if call_tmp[673672]
          {
            (492279 call compilerError "tuple size must match the number of grouped variables" 0)
          }
        }
        unknown call_tmp[673677] "expr temp" "maybe param" "maybe type" "temp"
        (673680 'move' call_tmp[673677](492289 call tmp[492266] 0))
        (492296 call = tmp[492291] call_tmp[673677])
        unknown call_tmp[673682] "expr temp" "maybe param" "maybe type" "temp"
        (673685 'move' call_tmp[673682](492300 call tmp[492266] 1))
        (492307 call = tmp[492302] call_tmp[673682])
        (482146 'end of statement' slotNum[158185] retVal[158191])
      }
      (935187 return _void[55])
    }
    {
    }
    unknown call_tmp[673687] "expr temp" "maybe param" "maybe type" "temp"
    (673690 'move' call_tmp[673687](158234 call _build_tuple slotNum[158185] retVal[158191]))
    (520951 'move' ret[520946](520950 'deref' call_tmp[673687]))
    gotoReturn _end__addWrapper[520944] _end__addWrapper[520944]
    (482149 'end of statement' slotNum[158185] retVal[158191])
    label _end__addWrapper[520944]
    (520948 return ret[520946])
  }
  function DefaultAssociativeDom[158856](?)._add[158246](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158856](?), in arg idx[158243] :
  (386819 call idxType _mt[243] this[158950])) : _unknown[51] "method" "primary method"
  {
    unknown ret[520957] "RVV" "temp"
    unknown foundFullSlot[158249] "dead at end of block" "insert auto destroy"
    (543937 'init var' foundFullSlot[158249] 0)
    (158252 'end of statement')
    unknown call_tmp[673694] "maybe param" "maybe type" "temp"
    (673697 'move' call_tmp[673694](158255 call - 1))
    unknown slotNum[158257] "dead at end of block" "insert auto destroy"
    (543939 'init var' slotNum[158257] call_tmp[673694])
    (158260 'end of statement')
    unknown tmp[492310] "expr temp" "maybe param" "maybe type" "temp"
    unknown tmp[492335] "maybe param" "temp"
    (492338 'move' tmp[492335](492336 'addr of' foundFullSlot[158249]))
    unknown tmp[492346] "maybe param" "temp"
    (492349 'move' tmp[492346](492347 'addr of' slotNum[158257]))
    unknown call_tmp[673701] "expr temp" "maybe param" "maybe type" "temp"
    (673704 'move' call_tmp[673701](360862 call table _mt[243] this[158950]))
    (492311 'move' tmp[492310](158274 call(158269 call (partial) findAvailableSlot _mt[243] call_tmp[673701]) idx[158243]))
    { scopeless
      unknown call_tmp[673710] "expr temp" "maybe param" "maybe type" "temp"
      (673713 'move' call_tmp[673710](492317 call size _mt[243] tmp[492310]))
      unknown call_tmp[673715] "expr temp" "maybe param" "maybe type" "temp"
      (673718 'move' call_tmp[673715](492320 call != 2 call_tmp[673710]))
      unknown call_tmp[673720] "expr temp" "maybe param" "maybe type" "temp"
      (673723 'move' call_tmp[673720](492327 call _cond_test call_tmp[673715]))
      if call_tmp[673720]
      {
        (492323 call compilerError "tuple size must match the number of grouped variables" 0)
      }
    }
    unknown call_tmp[673725] "expr temp" "maybe param" "maybe type" "temp"
    (673728 'move' call_tmp[673725](492333 call tmp[492310] 0))
    (492340 call = tmp[492335] call_tmp[673725])
    unknown call_tmp[673730] "expr temp" "maybe param" "maybe type" "temp"
    (673733 'move' call_tmp[673730](492344 call tmp[492310] 1))
    (492351 call = tmp[492346] call_tmp[673730])
    (482152 'end of statement' foundFullSlot[158249] slotNum[158257])
    unknown call_tmp[673735] "expr temp" "maybe param" "maybe type" "temp"
    (673738 'move' call_tmp[673735](158361 call _cond_test foundFullSlot[158249]))
    if call_tmp[673735]
    {
      unknown call_tmp[673740] "expr temp" "maybe param" "maybe type" "temp"
      (673743 'move' call_tmp[673740](158282 call _build_tuple slotNum[158257] 0))
      (520962 'move' ret[520957](520961 'deref' call_tmp[673740]))
      gotoReturn _end__add[520955] _end__add[520955]
      (482155 'end of statement' slotNum[158257])
    }
    {
      unknown call_tmp[673747] "expr temp" "maybe param" "maybe type" "temp"
      (673750 'move' call_tmp[673747](360867 call table _mt[243] this[158950]))
      (158297 call(158290 call (partial) fillSlot _mt[243] call_tmp[673747]) slotNum[158257] idx[158243] none[57])
      (482157 'end of statement' slotNum[158257])
      unknown call_tmp[673756] "expr temp" "maybe param" "maybe type" "temp"
      (673759 'move' call_tmp[673756](360872 call numEntries _mt[243] this[158950]))
      (158306 call(158301 call (partial) add _mt[243] call_tmp[673756]) 1)
      (482159 'end of statement')
      {
        unknown _indexOfInterest[158321] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158322] "expr temp" "temp"
        unknown call_tmp[673765] "expr temp" "maybe param" "maybe type" "temp"
        (673768 'move' call_tmp[673765](386831 call _arrs _mt[243] this[158950]))
        (158331 'move' _iterator[158322](158329 call _getIterator call_tmp[673765]))
        Defer
        {
          {
            (158347 call _freeIterator _iterator[158322])
          }
        }
        { scopeless type
          (158336 'move' _indexOfInterest[158321](158333 call iteratorIndex _iterator[158322]))
        }
        ForLoop[158323]
        {
          unknown arr[158340] "index var" "insert auto destroy"
          (482161 'end of statement')
          (158342 'move' arr[158340] _indexOfInterest[158321])
          (482162 'end of statement' arr[158340])
          {
            (158318 call(158313 call (partial) _defaultInitSlot _mt[243] arr[158340]) slotNum[158257])
            (482164 'end of statement' arr[158340] slotNum[158257])
          }
          label _continueLabel[158326]
          _indexOfInterest[158321]
          _iterator[158322]
        }
        label _breakLabel[158327]
      }
      unknown call_tmp[673772] "expr temp" "maybe param" "maybe type" "temp"
      (673775 'move' call_tmp[673772](158357 call _build_tuple slotNum[158257] 1))
      (520967 'move' ret[520957](520966 'deref' call_tmp[673772]))
      gotoReturn _end__add[520955] _end__add[520955]
      (482167 'end of statement' slotNum[158257])
    }
    label _end__add[520955]
    (520959 return ret[520957])
  }
  function DefaultAssociativeDom[158856](?).dsiRemove[158373](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158856](?), arg idx[158370] :
  (386838 call idxType _mt[243] this[158954])) : _unknown[51] "method" "primary method"
  {
    unknown ret[520973] "RVV" "temp"
    unknown retval[158376] "dead at end of block" "insert auto destroy"
    (543941 'default init var' retval[158376] int(64)[13])
    (158379 'end of statement')
    const tmp[158518] "const" "temp"
    unknown call_tmp[673779] "expr temp" "maybe param" "maybe type" "temp"
    (673782 'move' call_tmp[673779](158515 '_wide_get_locale' this[158954]))
    (158520 'move' tmp[158518](158516 'deref' call_tmp[673779]))
    (935193 call on_fn[935189] tmp[158518])
    function on_fn[935189](const in arg dummy_locale_arg[935191]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (158384 call(386843 call (partial) lockTable _mt[243] this[158954]))
        (482169 'end of statement')
        Defer
        {
          {
            (158389 call(386847 call (partial) unlockTable _mt[243] this[158954]))
          }
        }
        unknown call_tmp[673790] "expr temp" "maybe param" "maybe type" "temp"
        (673793 'move' call_tmp[673790](360878 call table _mt[243] this[158954]))
        unknown call_tmp[673797] "maybe param" "maybe type" "temp"
        (673800 'move' call_tmp[673797](158405 call(158400 call (partial) findFullSlot _mt[243] call_tmp[673790]) idx[158370]))
        const tmp[158406] "dead at end of block" "const" "insert auto destroy" "temp"
        (543943 'init var' tmp[158406] call_tmp[673797])
        (158413 call _check_tuple_var_decl tmp[158406] 2)
        (482171 'end of statement')
        unknown call_tmp[673802] "maybe param" "maybe type" "temp"
        (673805 'move' call_tmp[673802](158407 call tmp[158406] 0))
        const foundSlot[158394] "dead at end of block" "const" "insert auto destroy"
        (543945 'init var' foundSlot[158394] call_tmp[673802])
        unknown call_tmp[673807] "maybe param" "maybe type" "temp"
        (673810 'move' call_tmp[673807](158410 call tmp[158406] 1))
        const slotNum[158396] "dead at end of block" "const" "insert auto destroy"
        (543947 'init var' slotNum[158396] call_tmp[673807])
        (158418 'end of statement')
        unknown call_tmp[673812] "expr temp" "maybe param" "maybe type" "temp"
        (673815 'move' call_tmp[673812](158504 call _cond_test foundSlot[158394]))
        if call_tmp[673812]
        {
          unknown tmpIdx[158421] "dead at end of block" "insert auto destroy"
          unknown call_tmp[673819] "expr temp" "maybe param" "maybe type" "temp"
          (673822 'move' call_tmp[673819](386854 call idxType _mt[243] this[158954]))
          (543949 'default init var' tmpIdx[158421] call_tmp[673819])
          (158424 'end of statement')
          unknown tmpVal[158427] "dead at end of block" "insert auto destroy"
          (543951 'default init var' tmpVal[158427] nothing[7])
          (158430 'end of statement')
          unknown call_tmp[673826] "expr temp" "maybe param" "maybe type" "temp"
          (673829 'move' call_tmp[673826](360883 call table _mt[243] this[158954]))
          (158439 call(158432 call (partial) clearSlot _mt[243] call_tmp[673826]) slotNum[158396] tmpIdx[158421] tmpVal[158427])
          (482172 'end of statement' slotNum[158396] tmpIdx[158421] tmpVal[158427])
          unknown call_tmp[673835] "expr temp" "maybe param" "maybe type" "temp"
          (673838 'move' call_tmp[673835](360888 call numEntries _mt[243] this[158954]))
          (158447 call(158442 call (partial) sub _mt[243] call_tmp[673835]) 1)
          (482176 'end of statement')
          {
            unknown _indexOfInterest[158460] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158461] "expr temp" "temp"
            unknown call_tmp[673844] "expr temp" "maybe param" "maybe type" "temp"
            (673847 'move' call_tmp[673844](386862 call _arrs _mt[243] this[158954]))
            (158470 'move' _iterator[158461](158468 call _getIterator call_tmp[673844]))
            Defer
            {
              {
                (158486 call _freeIterator _iterator[158461])
              }
            }
            { scopeless type
              (158475 'move' _indexOfInterest[158460](158472 call iteratorIndex _iterator[158461]))
            }
            ForLoop[158462]
            {
              unknown arr[158479] "index var" "insert auto destroy"
              (482178 'end of statement')
              (158481 'move' arr[158479] _indexOfInterest[158460])
              (482179 'end of statement' arr[158479])
              {
                (158457 call(158452 call (partial) _deinitSlot _mt[243] arr[158479]) slotNum[158396])
                (482181 'end of statement' arr[158479] slotNum[158396])
              }
              label _continueLabel[158465]
              _indexOfInterest[158460]
              _iterator[158461]
            }
            label _breakLabel[158466]
          }
          (158495 call = retval[158376] 1)
          (482184 'end of statement' retval[158376])
        }
        {
          (158500 call = retval[158376] 0)
          (482186 'end of statement' retval[158376])
        }
        unknown call_tmp[673853] "expr temp" "maybe param" "maybe type" "temp"
        (673856 'move' call_tmp[673853](360894 call table _mt[243] this[158954]))
        (158513 call(158509 call (partial) maybeShrinkAfterRemove _mt[243] call_tmp[673853]))
      }
      (935196 return _void[55])
    }
    {
    }
    (520978 'move' ret[520973](520977 'deref' retval[158376]))
    gotoReturn _end_dsiRemove[520971] _end_dsiRemove[520971]
    (482189 'end of statement' retval[158376])
    label _end_dsiRemove[520971]
    (520975 return ret[520973])
  }
  function DefaultAssociativeDom[158856](?).dsiRequestCapacity[158537](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158856](?), arg numKeys[158534]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[158625] "const" "temp"
    unknown call_tmp[673860] "expr temp" "maybe param" "maybe type" "temp"
    (673863 'move' call_tmp[673860](158622 '_wide_get_locale' this[158958]))
    (158627 'move' tmp[158625](158623 'deref' call_tmp[673860]))
    (935202 call on_fn[935198] tmp[158625])
    function on_fn[935198](const in arg dummy_locale_arg[935200]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        unknown call_tmp[673867] "expr temp" "maybe param" "maybe type" "temp"
        (673870 'move' call_tmp[673867](360899 call numEntries _mt[243] this[158958]))
        unknown call_tmp[673874] "maybe param" "maybe type" "temp"
        (673877 'move' call_tmp[673874](158545 call(158541 call (partial) read _mt[243] call_tmp[673867])))
        unknown entries[158546] "dead at end of block" "insert auto destroy"
        (543953 'init var' entries[158546] call_tmp[673874])
        (158549 'end of statement')
        unknown call_tmp[673879] "expr temp" "maybe param" "maybe type" "temp"
        (673882 'move' call_tmp[673879](158553 call < entries[158546] numKeys[158534]))
        unknown call_tmp[673884] "expr temp" "maybe param" "maybe type" "temp"
        (673887 'move' call_tmp[673884](158618 call _cond_test call_tmp[673879]))
        if call_tmp[673884]
        {
          (158557 call(386873 call (partial) lockTable _mt[243] this[158958]))
          (482191 'end of statement')
          Defer
          {
            {
              (158562 call(386877 call (partial) unlockTable _mt[243] this[158958]))
            }
          }
          unknown call_tmp[673895] "expr temp" "maybe param" "maybe type" "temp"
          (673898 'move' call_tmp[673895](360904 call table _mt[243] this[158958]))
          (158573 call(158568 call (partial) requestCapacity _mt[243] call_tmp[673895]) numKeys[158534])
        }
        {
          (158615 call warning "Requested capacity (" numKeys[158534] ") " "is less than current size (" entries[158546] ")")
          (482194 'end of statement' entries[158546])
        }
      }
      (935205 return _void[55])
    }
    {
    }
    (520982 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).dsiSorted[158640](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158856](?), arg comparator[158638]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520986] "RVV" "temp"
    unknown tableCopy[158681] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter8[582871](arg iterator[582873]:_any[178](?), arg this[582909]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582920] "RVV" "temp"
      {
        unknown _indexOfInterest[582878] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582879] "expr temp" "temp"
        (582888 'move' _iterator[582879](582886 call _getIterator iterator[582873]))
        Defer
        {
          {
            (582902 call _freeIterator _iterator[582879])
          }
        }
        { scopeless type
          (582893 'move' _indexOfInterest[582878](582890 call iteratorIndex _iterator[582879]))
        }
        ForLoop[582880] for-expr
        {
          unknown slot[158679] "index var" "insert auto destroy" "no doc"
          (582913 'end of statement')
          (582897 'move' slot[158679] _indexOfInterest[582878])
          (582914 'end of statement' slot[158679])
          {
            {
              unknown yret[582924] "YVV" "temp"
              unknown call_tmp[582933] "expr temp" "maybe param" "maybe type" "temp"
              (582936 'move' call_tmp[582933](360914 call table _mt[243] this[582909]))
              unknown call_tmp[582940] "expr temp" "maybe param" "maybe type" "temp"
              (582943 'move' call_tmp[582940](158673 call(158668 call (partial) table _mt[243] call_tmp[582933]) slot[158679]))
              unknown call_tmp[582947] "expr temp" "maybe param" "maybe type" "temp"
              (582950 'move' call_tmp[582947](158674 call key _mt[243] call_tmp[582940]))
              (582927 'move' yret[582924](582926 'deref' call_tmp[582947]))
              (582929 yield yret[582924])
              (582916 'end of statement' slot[158679])
            }
          }
          label _continueLabel[582883]
          _indexOfInterest[582878]
          _iterator[582879]
        }
        label _breakLabel[582884]
      }
      (582922 return ret[582920])
    }
    function chpl__forexpr8[582851](arg iterExpr[582854]:_any[178](?), arg this[582858]:DefaultAssociativeDom[158856](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582955] "RVV" "temp"
      unknown _iterator[582861] "expr temp" "maybe ref" "temp"
      (582863 'move' _iterator[582861] iterExpr[582854])
      unknown call_tmp[582962] "expr temp" "maybe param" "maybe type" "temp"
      (582965 'move' call_tmp[582962](582866 call chpl__loopexpr_iter8 _iterator[582861] this[582858]))
      (582960 'move' ret[582955](582959 'deref' call_tmp[582962]))
      (582957 return ret[582955])
    }
    unknown call_tmp[582969] "expr temp" "maybe param" "maybe type" "temp"
    (582972 'move' call_tmp[582969](158666 call(386890 call (partial) _fullSlots _mt[243] this[158962])))
    unknown call_tmp[582974] "maybe param" "maybe type" "temp"
    (582977 'move' call_tmp[582974](582856 call chpl__forexpr8 call_tmp[582969] this[158962]))
    (582981 'iterator record set shape' call_tmp[582974] call_tmp[582969] 1)
    unknown call_tmp[673902] "expr temp" "maybe param" "maybe type" "temp"
    (673905 'move' call_tmp[673902](158647 call chpl_build_low_bounded_range 0))
    unknown call_tmp[673909] "expr temp" "maybe param" "maybe type" "temp"
    (673912 'move' call_tmp[673909](360909 call numEntries _mt[243] this[158962]))
    unknown call_tmp[673916] "expr temp" "maybe param" "maybe type" "temp"
    (673919 'move' call_tmp[673916](158654 call(158650 call (partial) read _mt[243] call_tmp[673909])))
    unknown call_tmp[673921] "expr temp" "maybe param" "maybe type" "temp"
    (673924 'move' call_tmp[673921](158655 call # call_tmp[673902] call_tmp[673916]))
    unknown call_tmp[673926] "expr temp" "maybe param" "maybe type" "temp"
    (673929 'move' call_tmp[673926](158659 call chpl__ensureDomainExpr call_tmp[673921]))
    unknown call_tmp[673933] "expr temp" "maybe param" "maybe type" "temp"
    (673936 'move' call_tmp[673933](386885 call idxType _mt[243] this[158962]))
    unknown call_tmp[673938] "maybe param" "maybe type" "temp"
    (673941 'move' call_tmp[673938](158661 call chpl__buildArrayRuntimeType call_tmp[673926] call_tmp[673933]))
    (543955 'init var' tableCopy[158681] call_tmp[582974] call_tmp[673938])
    (158684 'end of statement')
    (158690 call sort tableCopy[158681](comparator = comparator[158638]))
    (482196 'end of statement' tableCopy[158681])
    {
      unknown _indexOfInterest[158697] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158698] "expr temp" "temp"
      (158707 'move' _iterator[158698](158705 call _getIterator tableCopy[158681]))
      Defer
      {
        {
          (158723 call _freeIterator _iterator[158698])
        }
      }
      { scopeless type
        (158712 'move' _indexOfInterest[158697](158709 call iteratorIndex _iterator[158698]))
      }
      ForLoop[158699]
      {
        unknown ind[158716] "index var" "insert auto destroy"
        (482199 'end of statement')
        (158718 'move' ind[158716] _indexOfInterest[158697])
        (482200 'end of statement' ind[158716])
        unknown yret[520990] "YVV" "temp"
        (520993 'move' yret[520990](520992 'deref' ind[158716]))
        (520995 yield yret[520990])
        (482202 'end of statement' ind[158716])
        label _continueLabel[158702]
        _indexOfInterest[158697]
        _iterator[158698]
      }
      label _breakLabel[158703]
    }
    (520988 return ret[520986])
    (355069 'used modules list'(158643 'use' Sort[267880]))
  }
  function DefaultAssociativeDom[158856](?)._fullSlots[158734](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158856](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[520999] "RVV" "temp"
    {
      unknown _indexOfInterest[158761] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158762] "expr temp" "temp"
      unknown call_tmp[673945] "expr temp" "maybe param" "maybe type" "temp"
      (673948 'move' call_tmp[673945](360919 call table _mt[243] this[158966]))
      unknown call_tmp[673952] "expr temp" "maybe param" "maybe type" "temp"
      (673955 'move' call_tmp[673952](158742 call(158738 call (partial) allSlots _mt[243] call_tmp[673945])))
      (158771 'move' _iterator[158762](158769 call _getIterator call_tmp[673952]))
      Defer
      {
        {
          (158788 call _freeIterator _iterator[158762])
        }
      }
      { scopeless type
        (158777 'move' _indexOfInterest[158761](158774 call iteratorIndex _iterator[158762]))
      }
      ForLoop[158763]
      {
        unknown slot[158781] "index var" "insert auto destroy"
        (482205 'end of statement')
        (158783 'move' slot[158781] _indexOfInterest[158761])
        (482206 'end of statement' slot[158781])
        {
          unknown call_tmp[673959] "expr temp" "maybe param" "maybe type" "temp"
          (673962 'move' call_tmp[673959](360924 call table _mt[243] this[158966]))
          unknown call_tmp[673966] "expr temp" "maybe param" "maybe type" "temp"
          (673969 'move' call_tmp[673966](158751 call(158746 call (partial) isSlotFull _mt[243] call_tmp[673959]) slot[158781]))
          unknown call_tmp[673971] "expr temp" "maybe param" "maybe type" "temp"
          (673974 'move' call_tmp[673971](158756 call _cond_test call_tmp[673966]))
          if call_tmp[673971]
          {
            unknown yret[521003] "YVV" "temp"
            (521006 'move' yret[521003](521005 'deref' slot[158781]))
            (521008 yield yret[521003])
            (482208 'end of statement' slot[158781])
          }
        }
        label _continueLabel[158766]
        _indexOfInterest[158761]
        _iterator[158762]
      }
      label _breakLabel[158767]
    }
    (521001 return ret[520999])
  }
  function DefaultAssociativeDom[158856](?).dsiHasSingleLocalSubdomain[158800](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158856](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521012] "RVV" "param" "temp"
    (521017 'move' ret[521012](521016 'deref' 1))
    (521014 return ret[521012])
  }
  function DefaultAssociativeDom[158856](?).dsiLocalSubdomain[158814](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158856](?), arg loc[158811]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521021] "RVV" "temp"
    unknown call_tmp[673976] "expr temp" "maybe param" "maybe type" "temp"
    (673979 'move' call_tmp[673976](158817 '_wide_get_locale' this[158974]))
    unknown call_tmp[673981] "expr temp" "maybe param" "maybe type" "temp"
    (673984 'move' call_tmp[673981](158818 call chpl_localeID_to_locale call_tmp[673976]))
    unknown call_tmp[673986] "expr temp" "maybe param" "maybe type" "temp"
    (673989 'move' call_tmp[673986](158821 call == call_tmp[673981] loc[158811]))
    unknown call_tmp[673991] "expr temp" "maybe param" "maybe type" "temp"
    (673994 'move' call_tmp[673991](158848 call _cond_test call_tmp[673986]))
    if call_tmp[673991]
    {
      unknown call_tmp[673996] "expr temp" "maybe param" "maybe type" "temp"
      (673999 'move' call_tmp[673996](158827 call _to_unmanaged this[158974]))
      unknown call_tmp[674001] "expr temp" "maybe param" "maybe type" "temp"
      (674004 'move' call_tmp[674001](158829 call _getDomain call_tmp[673996]))
      (521026 'move' ret[521021](521025 'deref' call_tmp[674001]))
      gotoReturn _end_dsiLocalSubdomain[521019] _end_dsiLocalSubdomain[521019]
    }
    {
      unknown a[158840] "dead at end of block" "insert auto destroy"
      unknown call_tmp[674008] "expr temp" "maybe param" "maybe type" "temp"
      (674011 'move' call_tmp[674008](386905 call idxType _mt[243] this[158974]))
      unknown call_tmp[674015] "expr temp" "maybe param" "maybe type" "temp"
      (674018 'move' call_tmp[674015](386910 call parSafe _mt[243] this[158974]))
      unknown call_tmp[674020] "expr temp" "maybe param" "maybe type" "temp"
      (674023 'move' call_tmp[674020](158838 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[674008](parSafe = call_tmp[674015])))
      (543957 'default init var' a[158840] call_tmp[674020])
      (158843 'end of statement')
      (521031 'move' ret[521021](521030 'deref' a[158840]))
      gotoReturn _end_dsiLocalSubdomain[521019] _end_dsiLocalSubdomain[521019]
      (482212 'end of statement' a[158840])
    }
    label _end_dsiLocalSubdomain[521019]
    (521023 return ret[521021])
  }
  function DefaultAssociativeDom[158856](?).super[810350](arg _mt[810352]:_MT[238], arg this[810354]:DefaultAssociativeDom[158856](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810364] "RVV" "temp"
    unknown call_tmp[810371] "expr temp" "maybe param" "maybe type" "temp"
    (810374 'move' call_tmp[810371](810358 '.v' this[810354] c"super"))
    (810369 'move' ret[810364](810368 'deref' call_tmp[810371]))
    (810366 return ret[810364])
  }
  function DefaultAssociativeDom[810381](?).idxType[810376](arg _mt[810378]:_MT[238], arg this[810383]:DefaultAssociativeDom[810381](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810418] "RVV" "temp" "type variable"
    unknown borrowOfThis[810385]
    (810410 'end of statement')
    (810387 'move' borrowOfThis[810385](810390 call _cast _borrowedNonNilable[214](?) this[810383]))
    (810411 'end of statement' borrowOfThis[810385])
    unknown call_tmp[810432] "expr temp" "maybe param" "maybe type" "temp"
    (810435 'move' call_tmp[810432](810400 'is bound' borrowOfThis[810385] c"idxType"))
    if call_tmp[810432]
    {
      unknown call_tmp[810437] "expr temp" "maybe param" "maybe type" "temp"
      (810440 'move' call_tmp[810437](810395 '.v' borrowOfThis[810385] c"idxType"))
      unknown call_tmp[810442] "expr temp" "maybe param" "maybe type" "temp"
      (810445 'move' call_tmp[810442](810396 call chpl_checkLegalTypeFieldAccessor this[810383] call_tmp[810437] "idxType"))
      (810423 'move' ret[810418](810422 'deref' call_tmp[810442]))
      gotoReturn _end_idxType[810416] _end_idxType[810416]
      (810413 'end of statement' borrowOfThis[810385])
    }
    {
      (810428 'move' ret[810418](810427 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810416] _end_idxType[810416]
    }
    label _end_idxType[810416]
    (810420 return ret[810418])
  }
  function DefaultAssociativeDom[810381](?).idxType[810447](arg _mt[810449]:_MT[238], arg this[810451]:DefaultAssociativeDom[810381](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810486] "RVV" "temp" "type variable"
    unknown borrowOfThis[810453] "type variable"
    (810478 'end of statement')
    (810455 'move' borrowOfThis[810453](810458 call _cast _borrowedNonNilable[214](?) this[810451]))
    (810479 'end of statement' borrowOfThis[810453])
    unknown call_tmp[810500] "expr temp" "maybe param" "maybe type" "temp"
    (810503 'move' call_tmp[810500](810468 'is bound' borrowOfThis[810453] c"idxType"))
    if call_tmp[810500]
    {
      unknown call_tmp[810505] "expr temp" "maybe param" "maybe type" "temp"
      (810508 'move' call_tmp[810505](810463 '.v' borrowOfThis[810453] c"idxType"))
      unknown call_tmp[810510] "expr temp" "maybe param" "maybe type" "temp"
      (810513 'move' call_tmp[810510](810464 call chpl_checkLegalTypeFieldAccessor this[810451] call_tmp[810505] "idxType"))
      (810491 'move' ret[810486](810490 'deref' call_tmp[810510]))
      gotoReturn _end_idxType[810484] _end_idxType[810484]
      (810481 'end of statement' borrowOfThis[810453])
    }
    {
      (810496 'move' ret[810486](810495 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810484] _end_idxType[810484]
    }
    label _end_idxType[810484]
    (810488 return ret[810486])
  }
  function DefaultAssociativeDom[810381](?).parSafe[810515](arg _mt[810517]:_MT[238], arg this[810519]:DefaultAssociativeDom[810381](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810550] "RVV" "param" "temp"
    unknown borrowOfThis[810521]
    (810542 'end of statement')
    (810523 'move' borrowOfThis[810521](810526 call _cast _borrowedNonNilable[214](?) this[810519]))
    (810543 'end of statement' borrowOfThis[810521])
    unknown call_tmp[810564] "expr temp" "maybe param" "maybe type" "temp"
    (810567 'move' call_tmp[810564](810532 'is bound' borrowOfThis[810521] c"parSafe"))
    if call_tmp[810564]
    {
      unknown call_tmp[810569] "expr temp" "maybe param" "maybe type" "temp"
      (810572 'move' call_tmp[810569](810531 '.' borrowOfThis[810521] c"parSafe"))
      (810555 'move' ret[810550](810554 'deref' call_tmp[810569]))
      gotoReturn _end_parSafe[810548] _end_parSafe[810548]
      (810545 'end of statement' borrowOfThis[810521])
    }
    {
      (810560 'move' ret[810550](810559 'deref' ?[260]))
      gotoReturn _end_parSafe[810548] _end_parSafe[810548]
    }
    label _end_parSafe[810548]
    (810552 return ret[810550])
  }
  function DefaultAssociativeDom[810381](?).parSafe[810574](arg _mt[810576]:_MT[238], arg this[810578]:DefaultAssociativeDom[810381](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810609] "RVV" "param" "temp"
    unknown borrowOfThis[810580] "type variable"
    (810601 'end of statement')
    (810582 'move' borrowOfThis[810580](810585 call _cast _borrowedNonNilable[214](?) this[810578]))
    (810602 'end of statement' borrowOfThis[810580])
    unknown call_tmp[810623] "expr temp" "maybe param" "maybe type" "temp"
    (810626 'move' call_tmp[810623](810591 'is bound' borrowOfThis[810580] c"parSafe"))
    if call_tmp[810623]
    {
      unknown call_tmp[810628] "expr temp" "maybe param" "maybe type" "temp"
      (810631 'move' call_tmp[810628](810590 '.' borrowOfThis[810580] c"parSafe"))
      (810614 'move' ret[810609](810613 'deref' call_tmp[810628]))
      gotoReturn _end_parSafe[810607] _end_parSafe[810607]
      (810604 'end of statement' borrowOfThis[810580])
    }
    {
      (810619 'move' ret[810609](810618 'deref' ?[260]))
      gotoReturn _end_parSafe[810607] _end_parSafe[810607]
    }
    label _end_parSafe[810607]
    (810611 return ret[810609])
  }
  function DefaultAssociativeDom[158856](?).dist[810633](arg _mt[810635]:_MT[238], arg this[810637]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810647] "RVV" "temp"
    unknown call_tmp[810654] "expr temp" "maybe param" "maybe type" "temp"
    (810657 'move' call_tmp[810654](810641 '.' this[810637] c"dist"))
    (810652 'move' ret[810647](810651 'addr of' call_tmp[810654]))
    (810649 return ret[810647])
  }
  function DefaultAssociativeDom[158856](?).numEntries[810659](arg _mt[810661]:_MT[238], arg this[810663]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810673] "RVV" "temp"
    unknown call_tmp[810680] "expr temp" "maybe param" "maybe type" "temp"
    (810683 'move' call_tmp[810680](810667 '.' this[810663] c"numEntries"))
    (810678 'move' ret[810673](810677 'addr of' call_tmp[810680]))
    (810675 return ret[810673])
  }
  function DefaultAssociativeDom[158856](?).tableLock[810685](arg _mt[810687]:_MT[238], arg this[810689]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810699] "RVV" "temp"
    unknown call_tmp[810706] "expr temp" "maybe param" "maybe type" "temp"
    (810709 'move' call_tmp[810706](810693 '.' this[810689] c"tableLock"))
    (810704 'move' ret[810699](810703 'addr of' call_tmp[810706]))
    (810701 return ret[810699])
  }
  function DefaultAssociativeDom[158856](?).table[810711](arg _mt[810713]:_MT[238], arg this[810715]:DefaultAssociativeDom[158856](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810725] "RVV" "temp"
    unknown call_tmp[810732] "expr temp" "maybe param" "maybe type" "temp"
    (810735 'move' call_tmp[810732](810719 '.' this[810715] c"table"))
    (810730 'move' ret[810725](810729 'addr of' call_tmp[810732]))
    (810727 return ret[810725])
  }
  function DefaultAssociativeDom[158856](?).writeThis[810737](arg _mt[810741]:_MT[238], arg this[810739]:DefaultAssociativeDom[158856](?), arg f[810740]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810746 call writeThisDefaultImpl f[810740] this[810739])
    (810751 return _void[55])
  }
  function DefaultAssociativeDom[158856](?).readThis[810753](arg _mt[810757]:_MT[238], arg this[810755]:DefaultAssociativeDom[158856](?), arg f[810756]:_any[178](?)) : void[4] throws "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (810761 call readThisDefaultImpl f[810756] this[810755])
    (810767 return _void[55])
  }
  type DefaultAssociativeDom[158856](?) val super[355600]:BaseAssociativeDom[148812] "super class" unknown idxType[156490] "type variable" unknown parSafe[156494] "param" bool[10] val dist[156500]:unmanaged DefaultDist[415355] unmanaged DefaultDist[415355] unknown numEntries[156508](156507 call chpl__processorAtomicType int(64)[13]) unknown tableLock[156518](156515 IfExpr  parSafe[156494] then
  { scopeless
    chpl_LocalSpinlock[187386]
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156527](156526 call chpl__hashtable[204509](?) idxType[156490] nothing[7])
  type DefaultAssociativeDom[810381](?)
  type unmanaged DefaultAssociativeDom[415382](?)
  type DefaultAssociativeDom[377938](?)
  function DefaultAssociativeArr[161418](?).init[159031](arg _mt[161422]:_MT[238], arg this[161420]:DefaultAssociativeArr[161418](?), arg eltType[159029]:_any[178](?), arg idxType[159033]:_any[178](?), param arg parSafeDom[159035]:_any[178](?), arg dom[159044] :
  (159042 call unmanaged DefaultAssociativeDom[415382](?) idxType[159033](parSafe = parSafeDom[159035])), param arg initElts[159047]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461960] "temporary of super field" "temp"
    (461962 'move' super_tmp[461960](461959 '.v' this[161420] c"super"))
    (159056 call(159050 call (partial) init _mt[243] super_tmp[461960])(eltType = eltType[159029]))
    (482214 'end of statement')
    unknown tmp[461965] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492354] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[674027] "expr temp" "maybe param" "maybe type" "temp"
      (674030 'move' call_tmp[674027](461967 '.v' this[161420] c"super"))
      (492358 'move' call_type_tmp[492354](461970 'typeof' call_tmp[674027]))
    }
    (461971 'move' tmp[461965] call_type_tmp[492354])
    unknown call_tmp[674032] "maybe param" "maybe type" "temp"
    (674035 'move' call_tmp[674032](461976 'cast' tmp[461965] this[161420]))
    unknown chpl__thisAsParent[461973] "dead at end of block" "insert auto destroy" "temp"
    (543959 'init var' chpl__thisAsParent[461973] call_tmp[674032] tmp[461965])
    (461979 'setcid' chpl__thisAsParent[461973])
    (482215 'end of statement')
    unknown tmp[461981] "temp" "type variable"
    (461983 'move' tmp[461981] idxType[159033])
    (461985 'init field' this[161420] c"idxType" tmp[461981])
    unknown call_tmp[674037] "expr temp" "maybe param" "maybe type" "temp"
    (674040 'move' call_tmp[674037](461990 call _cast bool[10] parSafeDom[159035]))
    (461992 'init field' this[161420] c"parSafeDom" call_tmp[674037])
    (482216 'end of statement')
    unknown call_tmp[674042] "expr temp" "maybe param" "maybe type" "temp"
    (674045 'move' call_tmp[674042](462008 '.v' this[161420] c"idxType"))
    unknown call_tmp[674047] "expr temp" "maybe param" "maybe type" "temp"
    (674050 'move' call_tmp[674047](462011 '.v' this[161420] c"parSafeDom"))
    unknown call_tmp[674052] "maybe param" "maybe type" "temp"
    (674055 'move' call_tmp[674052](461998 call unmanaged DefaultAssociativeDom[415382](?) call_tmp[674042](parSafe = call_tmp[674047])))
    unknown tmp[461995] "temp"
    (462002 'init var' tmp[461995] dom[159044] call_tmp[674052])
    (462004 'init field' this[161420] c"dom" tmp[461995])
    (482217 'end of statement')
    unknown call_tmp[674059] "expr temp" "maybe param" "maybe type" "temp"
    (674062 'move' call_tmp[674059](159086 call table _mt[243] dom[159044]))
    unknown call_tmp[674066] "maybe param" "maybe type" "temp"
    (674069 'move' call_tmp[674066](159091 call tableSize _mt[243] call_tmp[674059]))
    unknown tableSize[159094] "dead at end of block" "insert auto destroy"
    (543961 'init var' tableSize[159094] call_tmp[674066])
    (159097 'end of statement')
    val tmp[462014]:int(64)[13] "temp"
    (462017 'default init var' tmp[462014] int(64)[13])
    (462021 '.=' this[161420] c"dataSize" tmp[462014])
    (482218 'end of statement')
    unknown call_tmp[674073] "expr temp" "maybe param" "maybe type" "temp"
    (674076 'move' call_tmp[674073](159103 call table _mt[243] dom[159044]))
    unknown call_tmp[674080] "maybe param" "maybe type" "temp"
    (674083 'move' call_tmp[674080](159114 call(159108 call (partial) allocateData _mt[243] call_tmp[674073]) tableSize[159094] eltType[159029]))
    unknown call_tmp[674085] "expr temp" "maybe param" "maybe type" "temp"
    (674088 'move' call_tmp[674085](462036 '.v' this[161420] c"eltType"))
    unknown call_tmp[674090] "maybe param" "maybe type" "temp"
    (674093 'move' call_tmp[674090](462028 call _ddata[11695](?) call_tmp[674085]))
    unknown tmp[462025] "temp"
    (462030 'init var' tmp[462025] call_tmp[674080] call_tmp[674090])
    (462032 'init field' this[161420] c"data" tmp[462025])
    (482219 'end of statement' tableSize[159094])
    unknown call_tmp[674095] "expr temp" "maybe param" "maybe type" "temp"
    (674098 'move' call_tmp[674095](462050 '.v' this[161420] c"eltType"))
    unknown call_tmp[674100] "maybe param" "maybe type" "temp"
    (674103 'move' call_tmp[674100](462042 call _ddata[11695](?) call_tmp[674095]))
    unknown tmp[462039] "temp"
    (462044 'init var' tmp[462039] nil[44] call_tmp[674100])
    (462046 'init field' this[161420] c"tmpData" tmp[462039])
    (482221 'end of statement')
    unknown tmp[462053] "temp"
    (462055 'init var' tmp[462053] initElts[159047])
    (462057 '.=' this[161420] c"eltsNeedDeinit" tmp[462053])
    (482222 'end of statement')
    (462062 'setcid' this[161420])
    (482223 'end of statement')
    unknown call_tmp[674105] "expr temp" "maybe param" "maybe type" "temp"
    (674108 'move' call_tmp[674105](159282 call _cond_test initElts[159047]))
    if call_tmp[674105]
    {
      unknown call_tmp[674112] "expr temp" "maybe param" "maybe type" "temp"
      (674115 'move' call_tmp[674112](159148 call eltType _mt[243] this[161420]))
      unknown call_tmp[674117] "expr temp" "maybe param" "maybe type" "temp"
      (674120 'move' call_tmp[674117](159152 call isNonNilableClass call_tmp[674112]))
      unknown call_tmp[674122] "expr temp" "maybe param" "maybe type" "temp"
      (674125 'move' call_tmp[674122](159276 call _cond_test call_tmp[674117]))
      if call_tmp[674122]
      {
        unknown call_tmp[674127] "expr temp" "maybe param" "maybe type" "temp"
        (674130 'move' call_tmp[674127](159187 call + "Cannot default initialize associative array because" " element type "))
        unknown call_tmp[674132] "expr temp" "maybe param" "maybe type" "temp"
        (674135 'move' call_tmp[674132](159191 call _cast string[26] eltType[159029]))
        unknown call_tmp[674137] "expr temp" "maybe param" "maybe type" "temp"
        (674140 'move' call_tmp[674137](159193 call + call_tmp[674127] call_tmp[674132]))
        unknown call_tmp[674142] "maybe param" "maybe type" "temp"
        (674145 'move' call_tmp[674142](159212 call + call_tmp[674137] " is a non-nilable class"))
        unknown msg[159214] "dead at end of block" "param"
        (543963 'init var' msg[159214] call_tmp[674142])
        (159217 'end of statement')
        (159222 call compilerError msg[159214])
      }
      {
        unknown call_tmp[674149] "expr temp" "maybe param" "maybe type" "temp"
        (674152 'move' call_tmp[674149](159226 call eltType _mt[243] this[161420]))
        unknown call_tmp[674154] "expr temp" "maybe param" "maybe type" "temp"
        (674157 'move' call_tmp[674154](159230 call isDefaultInitializable call_tmp[674149]))
        unknown call_tmp[674159] "expr temp" "maybe param" "maybe type" "temp"
        (674162 'move' call_tmp[674159](159231 call ! call_tmp[674154]))
        unknown call_tmp[674164] "expr temp" "maybe param" "maybe type" "temp"
        (674167 'move' call_tmp[674164](159272 call _cond_test call_tmp[674159]))
        if call_tmp[674164]
        {
          unknown call_tmp[674169] "expr temp" "maybe param" "maybe type" "temp"
          (674172 'move' call_tmp[674169](159235 call + "Cannot default initialize associative array because" " element type "))
          unknown call_tmp[674174] "expr temp" "maybe param" "maybe type" "temp"
          (674177 'move' call_tmp[674174](159239 call _cast string[26] eltType[159029]))
          unknown call_tmp[674179] "expr temp" "maybe param" "maybe type" "temp"
          (674182 'move' call_tmp[674179](159241 call + call_tmp[674169] call_tmp[674174]))
          unknown call_tmp[674184] "maybe param" "maybe type" "temp"
          (674187 'move' call_tmp[674184](159260 call + call_tmp[674179] " cannot be default initialized"))
          unknown msg[159262] "dead at end of block" "param"
          (543965 'init var' msg[159262] call_tmp[674184])
          (159265 'end of statement')
          (159270 call compilerError msg[159262])
        }
      }
    }
    unknown call_tmp[674189] "expr temp" "maybe param" "maybe type" "temp"
    (674192 'move' call_tmp[674189](159457 call _cond_test initElts[159047]))
    if call_tmp[674189]
    {
      unknown call_tmp[674194] "maybe param" "maybe type" "temp"
      (674197 'move' call_tmp[674194](159291 call init_elts_method tableSize[159094] eltType[159029]))
      unknown initMethod[159292] "dead at end of block" "insert auto destroy"
      (543967 'init var' initMethod[159292] call_tmp[674194])
      (159295 'end of statement' tableSize[159094])
      {
        unknown tmp[159432] "expr temp" "maybe param" "maybe type" "temp"
        (159434 'move' tmp[159432] initMethod[159292])
        unknown call_tmp[674199] "expr temp" "maybe param" "maybe type" "temp"
        (674202 'move' call_tmp[674199](159436 call == tmp[159432] noInit[11146]))
        unknown call_tmp[674204] "expr temp" "maybe param" "maybe type" "temp"
        (674207 'move' call_tmp[674204](159439 call _cond_test call_tmp[674199]))
        if call_tmp[674204]
        {
        }
        {
          unknown call_tmp[674209] "expr temp" "maybe param" "maybe type" "temp"
          (674212 'move' call_tmp[674209](159442 call == tmp[159432] serialInit[11148]))
          unknown call_tmp[674214] "expr temp" "maybe param" "maybe type" "temp"
          (674217 'move' call_tmp[674214](159445 call _cond_test call_tmp[674209]))
          if call_tmp[674214]
          {
            {
              unknown _indexOfInterest[159344] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159345] "expr temp" "temp"
              unknown call_tmp[674221] "expr temp" "maybe param" "maybe type" "temp"
              (674224 'move' call_tmp[674221](159314 call table _mt[243] dom[159044]))
              unknown call_tmp[674228] "expr temp" "maybe param" "maybe type" "temp"
              (674231 'move' call_tmp[674228](159321 call(159317 call (partial) allSlots _mt[243] call_tmp[674221])))
              (159354 'move' _iterator[159345](159352 call _getIterator call_tmp[674228]))
              Defer
              {
                {
                  (159371 call _freeIterator _iterator[159345])
                }
              }
              { scopeless type
                (159360 'move' _indexOfInterest[159344](159357 call iteratorIndex _iterator[159345]))
              }
              ForLoop[159346]
              {
                unknown slot[159364] "index var" "insert auto destroy"
                (482228 'end of statement')
                (159366 'move' slot[159364] _indexOfInterest[159344])
                (482229 'end of statement' slot[159364])
                {
                  unknown call_tmp[674235] "expr temp" "maybe param" "maybe type" "temp"
                  (674238 'move' call_tmp[674235](159330 call(159325 call (partial) _isSlotFull _mt[243] dom[159044]) slot[159364]))
                  unknown call_tmp[674240] "expr temp" "maybe param" "maybe type" "temp"
                  (674243 'move' call_tmp[674240](159339 call _cond_test call_tmp[674235]))
                  if call_tmp[674240]
                  {
                    (159336 call(386945 call (partial) _doDefaultInitSlot _mt[243] this[161420]) slot[159364](inAdd = 0))
                    (482231 'end of statement' slot[159364])
                  }
                }
                label _continueLabel[159349]
                _indexOfInterest[159344]
                _iterator[159345]
              }
              label _breakLabel[159350]
            }
          }
          {
            unknown call_tmp[674247] "expr temp" "maybe param" "maybe type" "temp"
            (674250 'move' call_tmp[674247](159449 call == tmp[159432] parallelInit[11150]))
            unknown call_tmp[674252] "expr temp" "maybe param" "maybe type" "temp"
            (674255 'move' call_tmp[674252](159452 call _cond_test call_tmp[674247]))
            if call_tmp[674252]
            {
              unknown call_tmp[674259] "expr temp" "maybe param" "maybe type" "temp"
              (674262 'move' call_tmp[674259](159388 call table _mt[243] dom[159044]))
              unknown call_tmp[674266] "expr temp" "maybe param" "maybe type" "temp"
              (674269 'move' call_tmp[674266](159395 call(159391 call (partial) allSlots _mt[243] call_tmp[674259])))
              Forall {
                induction variables:
                  
                  unknown slot[159417] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[674266]
                shadow variables:
                other variables
                  forall body
                {
                  unknown call_tmp[674273] "expr temp" "maybe param" "maybe type" "temp"
                  (674276 'move' call_tmp[674273](159402 call(159397 call (partial) _isSlotFull _mt[243] dom[159044]) slot[159417]))
                  unknown call_tmp[674278] "expr temp" "maybe param" "maybe type" "temp"
                  (674281 'move' call_tmp[674278](159411 call _cond_test call_tmp[674273]))
                  if call_tmp[674278]
                  {
                    (159408 call(386951 call (partial) _doDefaultInitSlot _mt[243] this[161420]) slot[159417](inAdd = 0))
                    (482233 'end of statement' slot[159417])
                  }
                }
              }
            }
            {
              (159426 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
    (521035 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).deinit[159465](arg _mt[161426]:_MT[238], arg this[161424]:DefaultAssociativeArr[161418](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674287] "expr temp" "maybe param" "maybe type" "temp"
    (674290 'move' call_tmp[674287](386957 call data _mt[243] this[161424]))
    unknown call_tmp[674294] "expr temp" "maybe param" "maybe type" "temp"
    (674297 'move' call_tmp[674294](360952 call dom _mt[243] this[161424]))
    unknown call_tmp[674301] "expr temp" "maybe param" "maybe type" "temp"
    (674304 'move' call_tmp[674301](159471 call table _mt[243] call_tmp[674294]))
    unknown call_tmp[674308] "expr temp" "maybe param" "maybe type" "temp"
    (674311 'move' call_tmp[674308](159474 call tableSize _mt[243] call_tmp[674301]))
    (159477 call _ddata_free call_tmp[674287] call_tmp[674308])
    (521037 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiGetBaseDom[159484](arg _mt[161430]:_MT[238], arg this[161428]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[521041] "RVV" "temp"
    unknown call_tmp[674315] "expr temp" "maybe param" "maybe type" "temp"
    (674318 'move' call_tmp[674315](386962 call dom _mt[243] this[161428]))
    (521046 'move' ret[521041](521045 'deref' call_tmp[674315]))
    (521043 return ret[521041])
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159498](arg _mt[161434]:_MT[238], arg this[161432]:DefaultAssociativeArr[161418](?), arg idx[159495] :
  (386967 call idxType _mt[243] this[161432])) ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521050] "RVV" "temp"
    unknown call_tmp[674324] "expr temp" "maybe param" "maybe type" "temp"
    (674327 'move' call_tmp[674324](360957 call dom _mt[243] this[161432]))
    unknown call_tmp[674331] "expr temp" "maybe param" "maybe type" "temp"
    (674334 'move' call_tmp[674331](159506 call table _mt[243] call_tmp[674324]))
    unknown call_tmp[674338] "maybe param" "maybe type" "temp"
    (674341 'move' call_tmp[674338](159514 call(159509 call (partial) findFullSlot _mt[243] call_tmp[674331]) idx[159495]))
    unknown tmp[159515] "dead at end of block" "insert auto destroy" "temp"
    (543969 'init var' tmp[159515] call_tmp[674338])
    (159522 call _check_tuple_var_decl tmp[159515] 2)
    (482238 'end of statement')
    unknown call_tmp[674343] "maybe param" "maybe type" "temp"
    (674346 'move' call_tmp[674343](159516 call tmp[159515] 0))
    unknown found[159500] "dead at end of block" "insert auto destroy"
    (543971 'init var' found[159500] call_tmp[674343])
    unknown call_tmp[674348] "maybe param" "maybe type" "temp"
    (674351 'move' call_tmp[674348](159519 call tmp[159515] 1))
    unknown slotNum[159502] "dead at end of block" "insert auto destroy"
    (543973 'init var' slotNum[159502] call_tmp[674348])
    (159527 'end of statement')
    unknown call_tmp[674353] "expr temp" "maybe param" "maybe type" "temp"
    (674356 'move' call_tmp[674353](159560 call _cond_test found[159500]))
    if call_tmp[674353]
    {
      unknown call_tmp[674360] "expr temp" "maybe param" "maybe type" "temp"
      (674363 'move' call_tmp[674360](159533 call(386974 call (partial) data _mt[243] this[161432]) slotNum[159502]))
      (521055 'move' ret[521050](521054 'addr of' call_tmp[674360]))
      gotoReturn _end_dsiAccess[521048] _end_dsiAccess[521048]
      (482239 'end of statement' slotNum[159502])
    }
    {
      (159557 call halt "array index out of bounds: " idx[159495])
    }
    label _end_dsiAccess[521048]
    (521052 return ret[521050])
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159572](arg _mt[161438]:_MT[238], arg this[161436]:DefaultAssociativeArr[161418](?), arg idx[159569] :
  (386981 call idxType _mt[243] this[161436])) : _unknown[51] "method" "primary method"
  {
    unknown ret[521061] "RVV" "temp"
    unknown call_tmp[674369] "expr temp" "maybe param" "maybe type" "temp"
    (674372 'move' call_tmp[674369](360962 call dom _mt[243] this[161436]))
    unknown call_tmp[674376] "expr temp" "maybe param" "maybe type" "temp"
    (674379 'move' call_tmp[674376](159584 call table _mt[243] call_tmp[674369]))
    unknown call_tmp[674383] "maybe param" "maybe type" "temp"
    (674386 'move' call_tmp[674383](159592 call(159587 call (partial) findFullSlot _mt[243] call_tmp[674376]) idx[159569]))
    unknown tmp[159593] "dead at end of block" "insert auto destroy" "temp"
    (543975 'init var' tmp[159593] call_tmp[674383])
    (159600 call _check_tuple_var_decl tmp[159593] 2)
    (482242 'end of statement')
    unknown call_tmp[674388] "maybe param" "maybe type" "temp"
    (674391 'move' call_tmp[674388](159594 call tmp[159593] 0))
    unknown found[159578] "dead at end of block" "insert auto destroy"
    (543977 'init var' found[159578] call_tmp[674388])
    unknown call_tmp[674393] "maybe param" "maybe type" "temp"
    (674396 'move' call_tmp[674393](159597 call tmp[159593] 1))
    unknown slotNum[159580] "dead at end of block" "insert auto destroy"
    (543979 'init var' slotNum[159580] call_tmp[674393])
    (159605 'end of statement')
    unknown call_tmp[674398] "expr temp" "maybe param" "maybe type" "temp"
    (674401 'move' call_tmp[674398](159628 call _cond_test found[159578]))
    if call_tmp[674398]
    {
      unknown call_tmp[674405] "expr temp" "maybe param" "maybe type" "temp"
      (674408 'move' call_tmp[674405](159611 call(386993 call (partial) data _mt[243] this[161436]) slotNum[159580]))
      (521066 'move' ret[521061](521065 'deref' call_tmp[674405]))
      gotoReturn _end_dsiAccess[521059] _end_dsiAccess[521059]
      (482243 'end of statement' slotNum[159580])
    }
    {
      (159619 call halt "array index out of bounds: " idx[159569])
      (482245 'end of statement')
      unknown call_tmp[674412] "expr temp" "maybe param" "maybe type" "temp"
      (674415 'move' call_tmp[674412](159625 call(387000 call (partial) data _mt[243] this[161436]) 0))
      (521071 'move' ret[521061](521070 'deref' call_tmp[674412]))
      gotoReturn _end_dsiAccess[521059] _end_dsiAccess[521059]
    }
    label _end_dsiAccess[521059]
    (521063 return ret[521061])
  }
  where {
    unknown call_tmp[674419] "expr temp" "maybe param" "maybe type" "temp"
    (674422 'move' call_tmp[674419](386986 call eltType _mt[243] this[161436]))
    (159577 call shouldReturnRvalueByValue call_tmp[674419])
  }
  function DefaultAssociativeArr[161418](?).dsiAccess[159641](arg _mt[161442]:_MT[238], arg this[161440]:DefaultAssociativeArr[161418](?), arg idx[159638] :
  (387005 call idxType _mt[243] this[161440])) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[521077] "RVV" "temp"
    unknown call_tmp[674428] "expr temp" "maybe param" "maybe type" "temp"
    (674431 'move' call_tmp[674428](360967 call dom _mt[243] this[161440]))
    unknown call_tmp[674435] "expr temp" "maybe param" "maybe type" "temp"
    (674438 'move' call_tmp[674435](159653 call table _mt[243] call_tmp[674428]))
    unknown call_tmp[674442] "maybe param" "maybe type" "temp"
    (674445 'move' call_tmp[674442](159661 call(159656 call (partial) findFullSlot _mt[243] call_tmp[674435]) idx[159638]))
    unknown tmp[159662] "dead at end of block" "insert auto destroy" "temp"
    (543981 'init var' tmp[159662] call_tmp[674442])
    (159669 call _check_tuple_var_decl tmp[159662] 2)
    (482247 'end of statement')
    unknown call_tmp[674447] "maybe param" "maybe type" "temp"
    (674450 'move' call_tmp[674447](159663 call tmp[159662] 0))
    unknown found[159647] "dead at end of block" "insert auto destroy"
    (543983 'init var' found[159647] call_tmp[674447])
    unknown call_tmp[674452] "maybe param" "maybe type" "temp"
    (674455 'move' call_tmp[674452](159666 call tmp[159662] 1))
    unknown slotNum[159649] "dead at end of block" "insert auto destroy"
    (543985 'init var' slotNum[159649] call_tmp[674452])
    (159674 'end of statement')
    unknown call_tmp[674457] "expr temp" "maybe param" "maybe type" "temp"
    (674460 'move' call_tmp[674457](159697 call _cond_test found[159647]))
    if call_tmp[674457]
    {
      unknown call_tmp[674464] "expr temp" "maybe param" "maybe type" "temp"
      (674467 'move' call_tmp[674464](159680 call(387017 call (partial) data _mt[243] this[161440]) slotNum[159649]))
      (521082 'move' ret[521077](521081 'addr of' call_tmp[674464]))
      gotoReturn _end_dsiAccess[521075] _end_dsiAccess[521075]
      (482248 'end of statement' slotNum[159649])
    }
    {
      (159688 call halt "array index out of bounds: " idx[159638])
      (482250 'end of statement')
      unknown call_tmp[674471] "expr temp" "maybe param" "maybe type" "temp"
      (674474 'move' call_tmp[674471](159694 call(387024 call (partial) data _mt[243] this[161440]) 0))
      (521087 'move' ret[521077](521086 'addr of' call_tmp[674471]))
      gotoReturn _end_dsiAccess[521075] _end_dsiAccess[521075]
    }
    label _end_dsiAccess[521075]
    (521079 return ret[521077])
  }
  where {
    unknown call_tmp[674478] "expr temp" "maybe param" "maybe type" "temp"
    (674481 'move' call_tmp[674478](387010 call eltType _mt[243] this[161440]))
    (159646 call shouldReturnRvalueByConstRef call_tmp[674478])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159708](arg _mt[161446]:_MT[238], arg this[161444]:DefaultAssociativeArr[161418](?), arg i[159706]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521093] "RVV" "temp"
    unknown call_tmp[674485] "expr temp" "maybe param" "maybe type" "temp"
    (674488 'move' call_tmp[674485](159713 call(387028 call (partial) dsiAccess _mt[243] this[161444]) i[159706]))
    (521098 'move' ret[521093](521097 'addr of' call_tmp[674485]))
    (521095 return ret[521093])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159723](arg _mt[161450]:_MT[238], arg this[161448]:DefaultAssociativeArr[161418](?), arg i[159721]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521102] "RVV" "temp"
    unknown call_tmp[674492] "expr temp" "maybe param" "maybe type" "temp"
    (674495 'move' call_tmp[674492](159732 call(387038 call (partial) dsiAccess _mt[243] this[161448]) i[159721]))
    (521107 'move' ret[521102](521106 'deref' call_tmp[674492]))
    (521104 return ret[521102])
  }
  where {
    unknown call_tmp[674499] "expr temp" "maybe param" "maybe type" "temp"
    (674502 'move' call_tmp[674499](387034 call eltType _mt[243] this[161448]))
    (159728 call shouldReturnRvalueByValue call_tmp[674499])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalAccess[159743](arg _mt[161454]:_MT[238], arg this[161452]:DefaultAssociativeArr[161418](?), arg i[159741]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[521111] "RVV" "temp"
    unknown call_tmp[674506] "expr temp" "maybe param" "maybe type" "temp"
    (674509 'move' call_tmp[674506](159752 call(387048 call (partial) dsiAccess _mt[243] this[161452]) i[159741]))
    (521116 'move' ret[521111](521115 'addr of' call_tmp[674506]))
    (521113 return ret[521111])
  }
  where {
    unknown call_tmp[674513] "expr temp" "maybe param" "maybe type" "temp"
    (674516 'move' call_tmp[674513](387044 call eltType _mt[243] this[161452]))
    (159748 call shouldReturnRvalueByConstRef call_tmp[674513])
  }
  function DefaultAssociativeArr[161418](?).these[159761](arg _mt[161458]:_MT[238], arg this[161456]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521120] "RVV" "temp"
    {
      unknown _indexOfInterest[159792] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159793] "expr temp" "temp"
      unknown call_tmp[674520] "expr temp" "maybe param" "maybe type" "temp"
      (674523 'move' call_tmp[674520](360972 call dom _mt[243] this[161456]))
      unknown call_tmp[674527] "expr temp" "maybe param" "maybe type" "temp"
      (674530 'move' call_tmp[674527](159765 call table _mt[243] call_tmp[674520]))
      unknown call_tmp[674534] "expr temp" "maybe param" "maybe type" "temp"
      (674537 'move' call_tmp[674534](159772 call(159768 call (partial) allSlots _mt[243] call_tmp[674527])))
      (159802 'move' _iterator[159793](159800 call _getIterator call_tmp[674534]))
      Defer
      {
        {
          (159819 call _freeIterator _iterator[159793])
        }
      }
      { scopeless type
        (159808 'move' _indexOfInterest[159792](159805 call iteratorIndex _iterator[159793]))
      }
      ForLoop[159794]
      {
        unknown slot[159812] "index var" "insert auto destroy"
        (482256 'end of statement')
        (159814 'move' slot[159812] _indexOfInterest[159792])
        (482257 'end of statement' slot[159812])
        {
          unknown call_tmp[674541] "expr temp" "maybe param" "maybe type" "temp"
          (674544 'move' call_tmp[674541](360977 call dom _mt[243] this[161456]))
          unknown call_tmp[674548] "expr temp" "maybe param" "maybe type" "temp"
          (674551 'move' call_tmp[674548](159779 call(159774 call (partial) _isSlotFull _mt[243] call_tmp[674541]) slot[159812]))
          unknown call_tmp[674553] "expr temp" "maybe param" "maybe type" "temp"
          (674556 'move' call_tmp[674553](159787 call _cond_test call_tmp[674548]))
          if call_tmp[674553]
          {
            unknown yret[521124] "YVV" "temp"
            unknown call_tmp[674560] "expr temp" "maybe param" "maybe type" "temp"
            (674563 'move' call_tmp[674560](159783 call(387055 call (partial) data _mt[243] this[161456]) slot[159812]))
            (521127 'move' yret[521124](521126 'addr of' call_tmp[674560]))
            (521129 yield yret[521124])
            (482259 'end of statement' slot[159812])
          }
        }
        label _continueLabel[159797]
        _indexOfInterest[159792]
        _iterator[159793]
      }
      label _breakLabel[159798]
    }
    (521122 return ret[521120])
  }
  function DefaultAssociativeArr[161418](?).these[159835](arg _mt[161462]:_MT[238], arg this[161460]:DefaultAssociativeArr[161418](?), param arg tag[159832]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521133] "RVV" "temp"
    unknown call_tmp[674565] "expr temp" "maybe param" "maybe type" "temp"
    (674568 'move' call_tmp[674565](159867 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[674565]
    {
      (159864 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159903] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159904] "expr temp" "temp"
      unknown call_tmp[674572] "expr temp" "maybe param" "maybe type" "temp"
      (674575 'move' call_tmp[674572](360983 call dom _mt[243] this[161460]))
      unknown call_tmp[674579] "expr temp" "maybe param" "maybe type" "temp"
      (674582 'move' call_tmp[674579](159874 call table _mt[243] call_tmp[674572]))
      unknown call_tmp[674586] "expr temp" "maybe param" "maybe type" "temp"
      (674589 'move' call_tmp[674586](159883 call(159877 call (partial) allSlots _mt[243] call_tmp[674579])(tag = tag[159832])))
      (159913 'move' _iterator[159904](159911 call _getIterator call_tmp[674586]))
      Defer
      {
        {
          (159930 call _freeIterator _iterator[159904])
        }
      }
      { scopeless type
        (159919 'move' _indexOfInterest[159903](159916 call iteratorIndex _iterator[159904]))
      }
      ForLoop[159905]
      {
        unknown slot[159923] "index var" "insert auto destroy"
        (482263 'end of statement')
        (159925 'move' slot[159923] _indexOfInterest[159903])
        (482264 'end of statement' slot[159923])
        {
          unknown call_tmp[674593] "expr temp" "maybe param" "maybe type" "temp"
          (674596 'move' call_tmp[674593](360988 call dom _mt[243] this[161460]))
          unknown call_tmp[674600] "expr temp" "maybe param" "maybe type" "temp"
          (674603 'move' call_tmp[674600](159890 call(159885 call (partial) _isSlotFull _mt[243] call_tmp[674593]) slot[159923]))
          unknown call_tmp[674605] "expr temp" "maybe param" "maybe type" "temp"
          (674608 'move' call_tmp[674605](159898 call _cond_test call_tmp[674600]))
          if call_tmp[674605]
          {
            unknown yret[521137] "YVV" "temp"
            unknown call_tmp[674612] "expr temp" "maybe param" "maybe type" "temp"
            (674615 'move' call_tmp[674612](159894 call(387066 call (partial) data _mt[243] this[161460]) slot[159923]))
            (521140 'move' yret[521137](521139 'addr of' call_tmp[674612]))
            (521142 yield yret[521137])
            (482266 'end of statement' slot[159923])
          }
        }
        label _continueLabel[159908]
        _indexOfInterest[159903]
        _iterator[159904]
      }
      label _breakLabel[159909]
    }
    (521135 return ret[521133])
  }
  where {
    (159842 call == tag[159832] standalone[451])
  }
  function DefaultAssociativeArr[161418](?).these[159946](arg _mt[161466]:_MT[238], arg this[161464]:DefaultAssociativeArr[161418](?), param arg tag[159943]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521146] "RVV" "temp"
    {
      unknown _indexOfInterest[159966] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159967] "expr temp" "temp"
      unknown call_tmp[674619] "expr temp" "maybe param" "maybe type" "temp"
      (674622 'move' call_tmp[674619](360994 call dom _mt[243] this[161464]))
      unknown call_tmp[674626] "expr temp" "maybe param" "maybe type" "temp"
      (674629 'move' call_tmp[674626](159962 call(159957 call (partial) these _mt[243] call_tmp[674619]) tag[159943]))
      (159976 'move' _iterator[159967](159974 call _getIterator call_tmp[674626]))
      Defer
      {
        {
          (159993 call _freeIterator _iterator[159967])
        }
      }
      { scopeless type
        (159982 'move' _indexOfInterest[159966](159979 call iteratorIndex _iterator[159967]))
      }
      ForLoop[159968]
      {
        unknown followThis[159986] "index var" "insert auto destroy"
        (482269 'end of statement')
        (159988 'move' followThis[159986] _indexOfInterest[159966])
        (482270 'end of statement' followThis[159986])
        unknown yret[521150] "YVV" "temp"
        (521153 'move' yret[521150](521152 'deref' followThis[159986]))
        (521155 yield yret[521150])
        (482272 'end of statement' followThis[159986])
        label _continueLabel[159971]
        _indexOfInterest[159966]
        _iterator[159967]
      }
      label _breakLabel[159972]
    }
    (521148 return ret[521146])
  }
  where {
    (159953 call == tag[159943] leader[447])
  }
  function DefaultAssociativeArr[161418](?).these[160010](arg _mt[161470]:_MT[238], arg this[161468]:DefaultAssociativeArr[161418](?), param arg tag[160007]:iterKind[453], arg followThis[160012]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521159] "RVV" "temp"
    unknown tmp[160027] "dead at end of block" "insert auto destroy" "temp"
    (543987 'init var' tmp[160027] followThis[160012])
    (160034 call _check_tuple_var_decl tmp[160027] 2)
    (482274 'end of statement')
    unknown call_tmp[674631] "maybe param" "maybe type" "temp"
    (674634 'move' call_tmp[674631](160028 call tmp[160027] 0))
    unknown chunk[160021] "dead at end of block" "insert auto destroy"
    (543989 'init var' chunk[160021] call_tmp[674631])
    unknown call_tmp[674636] "maybe param" "maybe type" "temp"
    (674639 'move' call_tmp[674636](160031 call tmp[160027] 1))
    unknown followThisDom[160023] "dead at end of block" "insert auto destroy"
    (543991 'init var' followThisDom[160023] call_tmp[674636])
    (160039 'end of statement')
    unknown call_tmp[674641] "expr temp" "maybe param" "maybe type" "temp"
    (674644 'move' call_tmp[674641](160064 call _cond_test debugDefaultAssoc[156265]))
    if call_tmp[674641]
    {
      (160062 call writeln "In array follower code: Following " chunk[160021])
      (482275 'end of statement' chunk[160021])
    }
    unknown call_tmp[674648] "expr temp" "maybe param" "maybe type" "temp"
    (674651 'move' call_tmp[674648](160071 call dom _mt[243] this[161468]))
    unknown call_tmp[674653] "maybe param" "maybe type" "temp"
    (674656 'move' call_tmp[674653](160074 call == followThisDom[160023] call_tmp[674648]))
    const sameDom[160076] "dead at end of block" "const" "insert auto destroy"
    (543993 'init var' sameDom[160076] call_tmp[674653])
    (160079 'end of statement')
    unknown call_tmp[674658] "expr temp" "maybe param" "maybe type" "temp"
    (674661 'move' call_tmp[674658](160081 call ! sameDom[160076]))
    unknown call_tmp[674663] "expr temp" "maybe param" "maybe type" "temp"
    (674666 'move' call_tmp[674663](160122 call _cond_test call_tmp[674658]))
    if call_tmp[674663]
    {
      unknown call_tmp[674670] "expr temp" "maybe param" "maybe type" "temp"
      (674673 'move' call_tmp[674670](160084 call dsiNumIndices _mt[243] followThisDom[160023]))
      unknown call_tmp[674677] "expr temp" "maybe param" "maybe type" "temp"
      (674680 'move' call_tmp[674677](160088 call dom _mt[243] this[161468]))
      unknown call_tmp[674684] "expr temp" "maybe param" "maybe type" "temp"
      (674687 'move' call_tmp[674684](160091 call dsiNumIndices _mt[243] call_tmp[674677]))
      unknown call_tmp[674689] "expr temp" "maybe param" "maybe type" "temp"
      (674692 'move' call_tmp[674689](160094 call != call_tmp[674670] call_tmp[674684]))
      unknown call_tmp[674694] "expr temp" "maybe param" "maybe type" "temp"
      (674697 'move' call_tmp[674694](160117 call _cond_test call_tmp[674689]))
      if call_tmp[674694]
      {
        (160115 call halt "zippered associative array does not match the iterated domain")
      }
    }
    unknown call_tmp[674701] "expr temp" "maybe param" "maybe type" "temp"
    (674704 'move' call_tmp[674701](160128 call table _mt[243] followThisDom[160023]))
    unknown call_tmp[674708] "maybe param" "maybe type" "temp"
    (674711 'move' call_tmp[674708](160131 call table _mt[243] call_tmp[674701]))
    const otherTable[160134] "dead at end of block" "const" "insert auto destroy"
    (543995 'init var' otherTable[160134] call_tmp[674708])
    (160137 'end of statement' followThisDom[160023] followThisDom[160023])
    {
      unknown _indexOfInterest[160228] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160229] "expr temp" "temp"
      (160238 'move' _iterator[160229](160236 call _getIterator chunk[160021]))
      Defer
      {
        {
          (160254 call _freeIterator _iterator[160229])
        }
      }
      { scopeless type
        (160243 'move' _indexOfInterest[160228](160240 call iteratorIndex _iterator[160229]))
      }
      ForLoop[160230]
      {
        unknown slot[160247] "index var" "insert auto destroy"
        (482281 'end of statement')
        (160249 'move' slot[160247] _indexOfInterest[160228])
        (482282 'end of statement' slot[160247])
        {
          const aSlot[160144] "dead at end of block" "const" "ref var"
          unknown call_tmp[674713] "expr temp" "maybe param" "maybe type" "temp"
          (674716 'move' call_tmp[674713](160143 call otherTable[160134] slot[160247]))
          (543998 'move' aSlot[160144](543997 'addr of' call_tmp[674713]))
          (160147 'end of statement' otherTable[160134] slot[160247])
          unknown call_tmp[674720] "expr temp" "maybe param" "maybe type" "temp"
          (674723 'move' call_tmp[674720](160154 call(160150 call (partial) isFull _mt[243] aSlot[160144])))
          unknown call_tmp[674725] "expr temp" "maybe param" "maybe type" "temp"
          (674728 'move' call_tmp[674725](160224 call _cond_test call_tmp[674720]))
          if call_tmp[674725]
          {
            unknown idx[160156] "dead at end of block" "insert auto destroy"
            (544000 'init var' idx[160156] slot[160247])
            (160159 'end of statement' slot[160247])
            unknown call_tmp[674730] "expr temp" "maybe param" "maybe type" "temp"
            (674733 'move' call_tmp[674730](160162 call ! sameDom[160076]))
            unknown call_tmp[674735] "expr temp" "maybe param" "maybe type" "temp"
            (674738 'move' call_tmp[674735](160214 call _cond_test call_tmp[674730]))
            if call_tmp[674735]
            {
              unknown call_tmp[674742] "expr temp" "maybe param" "maybe type" "temp"
              (674745 'move' call_tmp[674742](361005 call dom _mt[243] this[161468]))
              unknown call_tmp[674749] "expr temp" "maybe param" "maybe type" "temp"
              (674752 'move' call_tmp[674749](160170 call table _mt[243] call_tmp[674742]))
              unknown call_tmp[674758] "expr temp" "maybe param" "maybe type" "temp"
              (674761 'move' call_tmp[674758](160177 call key _mt[243] aSlot[160144]))
              unknown call_tmp[674763] "maybe param" "maybe type" "temp"
              (674766 'move' call_tmp[674763](160181 call(160173 call (partial) findFullSlot _mt[243] call_tmp[674749]) call_tmp[674758]))
              const tmp[160182] "dead at end of block" "const" "insert auto destroy" "temp"
              (544002 'init var' tmp[160182] call_tmp[674763])
              (160189 call _check_tuple_var_decl tmp[160182] 2)
              (482287 'end of statement')
              unknown call_tmp[674768] "maybe param" "maybe type" "temp"
              (674771 'move' call_tmp[674768](160183 call tmp[160182] 0))
              const match[160164] "dead at end of block" "const" "insert auto destroy"
              (544004 'init var' match[160164] call_tmp[674768])
              unknown call_tmp[674773] "maybe param" "maybe type" "temp"
              (674776 'move' call_tmp[674773](160186 call tmp[160182] 1))
              const loc[160166] "dead at end of block" "const" "insert auto destroy"
              (544006 'init var' loc[160166] call_tmp[674773])
              (160194 'end of statement')
              unknown call_tmp[674778] "expr temp" "maybe param" "maybe type" "temp"
              (674781 'move' call_tmp[674778](160197 call ! match[160164]))
              unknown call_tmp[674783] "expr temp" "maybe param" "maybe type" "temp"
              (674786 'move' call_tmp[674783](160204 call _cond_test call_tmp[674778]))
              if call_tmp[674783]
              {
                (160202 call halt "zippered associative array does not match the iterated domain")
              }
              (160211 call = idx[160156] loc[160166])
              (482289 'end of statement' idx[160156] loc[160166])
            }
            unknown yret[521163] "YVV" "temp"
            unknown call_tmp[674790] "expr temp" "maybe param" "maybe type" "temp"
            (674793 'move' call_tmp[674790](160221 call(387091 call (partial) data _mt[243] this[161468]) idx[160156]))
            (521166 'move' yret[521163](521165 'addr of' call_tmp[674790]))
            (521168 yield yret[521163])
            (482292 'end of statement' idx[160156])
          }
        }
        label _continueLabel[160233]
        _indexOfInterest[160228]
        _iterator[160229]
      }
      label _breakLabel[160234]
    }
    (521161 return ret[521159])
  }
  where {
    (160019 call == tag[160007] follower[449])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialReadWrite[160268](arg _mt[161474]:_MT[238], arg this[161472]:DefaultAssociativeArr[161418](?), arg f[160266]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674797] "maybe param" "maybe type" "temp"
    (674800 'move' call_tmp[674797](160275 call(160271 call (partial) binary _mt[243] f[160266])))
    unknown binary[160276] "dead at end of block" "insert auto destroy"
    (544008 'init var' binary[160276] call_tmp[674797])
    (160279 'end of statement')
    unknown call_tmp[674804] "maybe param" "maybe type" "temp"
    (674807 'move' call_tmp[674804](160287 call(160282 call (partial) styleElement _mt[243] f[160266]) QIO_STYLE_ELEMENT_ARRAY[19662]))
    unknown arrayStyle[160288] "dead at end of block" "insert auto destroy"
    (544010 'init var' arrayStyle[160288] call_tmp[674804])
    (160291 'end of statement')
    unknown tmp[427819] "maybe param" "temp"
    (427830 'move' tmp[427819](160294 call == arrayStyle[160288] QIO_ARRAY_FORMAT_SPACE[19692]))
    unknown call_tmp[674809] "expr temp" "maybe param" "maybe type" "temp"
    (674812 'move' call_tmp[674809](427832 call _cond_invalid tmp[427819]))
    if call_tmp[674809]
    {
      (427835 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[160301] "dead at end of block" "insert auto destroy"
    unknown tmp[569758] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569759] "maybe param" "temp"
    unknown call_tmp[674814] "expr temp" "maybe param" "maybe type" "temp"
    (674817 'move' call_tmp[674814](427820 call isTrue tmp[427819]))
    (569764 'move' tmp[569759](569762 call _cond_test call_tmp[674814]))
    if tmp[569759]
    {
      unknown tmp[569766] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674819] "expr temp" "maybe param" "maybe type" "temp"
      (674822 'move' call_tmp[674819](160297 call ! binary[160276]))
      (569768 'move' tmp[569766](427823 call isTrue call_tmp[674819]))
      (569773 'move' tmp[569758](569770 '_paramFoldLogical' tmp[569759] tmp[569766]))
    }
    {
      (569778 'move' tmp[569758](569775 '_paramFoldLogical' tmp[569759] 0))
    }
    (544012 'init var' isspace[160301] tmp[569758])
    (160304 'end of statement')
    unknown tmp[427840] "maybe param" "temp"
    (427851 'move' tmp[427840](160307 call == arrayStyle[160288] QIO_ARRAY_FORMAT_JSON[19702]))
    unknown call_tmp[674824] "expr temp" "maybe param" "maybe type" "temp"
    (674827 'move' call_tmp[674824](427853 call _cond_invalid tmp[427840]))
    if call_tmp[674824]
    {
      (427856 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[160314] "dead at end of block" "insert auto destroy"
    unknown tmp[569785] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569786] "maybe param" "temp"
    unknown call_tmp[674829] "expr temp" "maybe param" "maybe type" "temp"
    (674832 'move' call_tmp[674829](427841 call isTrue tmp[427840]))
    (569791 'move' tmp[569786](569789 call _cond_test call_tmp[674829]))
    if tmp[569786]
    {
      unknown tmp[569793] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674834] "expr temp" "maybe param" "maybe type" "temp"
      (674837 'move' call_tmp[674834](160310 call ! binary[160276]))
      (569795 'move' tmp[569793](427844 call isTrue call_tmp[674834]))
      (569800 'move' tmp[569785](569797 '_paramFoldLogical' tmp[569786] tmp[569793]))
    }
    {
      (569805 'move' tmp[569785](569802 '_paramFoldLogical' tmp[569786] 0))
    }
    (544014 'init var' isjson[160314] tmp[569785])
    (160317 'end of statement')
    unknown tmp[427861] "maybe param" "temp"
    (427872 'move' tmp[427861](160320 call == arrayStyle[160288] QIO_ARRAY_FORMAT_CHPL[19697]))
    unknown call_tmp[674839] "expr temp" "maybe param" "maybe type" "temp"
    (674842 'move' call_tmp[674839](427874 call _cond_invalid tmp[427861]))
    if call_tmp[674839]
    {
      (427877 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[160327] "dead at end of block" "insert auto destroy"
    unknown tmp[569812] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569813] "maybe param" "temp"
    unknown call_tmp[674844] "expr temp" "maybe param" "maybe type" "temp"
    (674847 'move' call_tmp[674844](427862 call isTrue tmp[427861]))
    (569818 'move' tmp[569813](569816 call _cond_test call_tmp[674844]))
    if tmp[569813]
    {
      unknown tmp[569820] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[674849] "expr temp" "maybe param" "maybe type" "temp"
      (674852 'move' call_tmp[674849](160323 call ! binary[160276]))
      (569822 'move' tmp[569820](427865 call isTrue call_tmp[674849]))
      (569827 'move' tmp[569812](569824 '_paramFoldLogical' tmp[569813] tmp[569820]))
    }
    {
      (569832 'move' tmp[569812](569829 '_paramFoldLogical' tmp[569813] 0))
    }
    (544016 'init var' ischpl[160327] tmp[569812])
    (160330 'end of statement')
    unknown tmp[427882] "maybe param" "temp"
    unknown call_tmp[674856] "expr temp" "maybe param" "maybe type" "temp"
    (674859 'move' call_tmp[674856](160332 call writing _mt[243] f[160266]))
    (427893 'move' tmp[427882](160335 call ! call_tmp[674856]))
    unknown call_tmp[674861] "expr temp" "maybe param" "maybe type" "temp"
    (674864 'move' call_tmp[674861](427895 call _cond_invalid tmp[427882]))
    if call_tmp[674861]
    {
      (427898 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[569839] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569840] "maybe param" "temp"
    unknown call_tmp[674866] "expr temp" "maybe param" "maybe type" "temp"
    (674869 'move' call_tmp[674866](427883 call isTrue tmp[427882]))
    (569845 'move' tmp[569840](569843 call _cond_test call_tmp[674866]))
    if tmp[569840]
    {
      unknown tmp[569847] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569849 'move' tmp[569847](427886 call isTrue ischpl[160327]))
      (569854 'move' tmp[569839](569851 '_paramFoldLogical' tmp[569840] tmp[569847]))
    }
    {
      (569859 'move' tmp[569839](569856 '_paramFoldLogical' tmp[569840] 0))
    }
    unknown call_tmp[674871] "expr temp" "maybe param" "maybe type" "temp"
    (674874 'move' call_tmp[674871](160353 call _cond_test tmp[569839]))
    if call_tmp[674871]
    {
      (160348 call(160343 call (partial) readChapelStyleAssocArray _mt[243] this[161472]) f[160266])
      (482301 'end of statement')
      gotoReturn _end_dsiSerialReadWrite[521170] _end_dsiSerialReadWrite[521170]
    }
    unknown tmp[427903] "maybe param" "temp"
    (427914 'move' tmp[427903] isjson[160314])
    unknown call_tmp[674878] "expr temp" "maybe param" "maybe type" "temp"
    (674881 'move' call_tmp[674878](427916 call _cond_invalid tmp[427903]))
    if call_tmp[674878]
    {
      (427919 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569866] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569867] "maybe param" "temp"
    unknown call_tmp[674883] "expr temp" "maybe param" "maybe type" "temp"
    (674886 'move' call_tmp[674883](427904 call isTrue tmp[427903]))
    (569872 'move' tmp[569867](569870 call _cond_test call_tmp[674883]))
    if tmp[569867]
    {
      (569877 'move' tmp[569866](569874 '_paramFoldLogical' tmp[569867] 1))
    }
    {
      unknown tmp[569879] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569881 'move' tmp[569879](427908 call isTrue ischpl[160327]))
      (569886 'move' tmp[569866](569883 '_paramFoldLogical' tmp[569867] tmp[569879]))
    }
    unknown call_tmp[674888] "expr temp" "maybe param" "maybe type" "temp"
    (674891 'move' call_tmp[674888](160370 call _cond_test tmp[569866]))
    if call_tmp[674888]
    {
      unknown call_tmp[674893] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (674896 'move' call_tmp[674893](747870 'new' ioLiteral[238665] "["))
      (160367 call <~> f[160266] call_tmp[674893])
    }
    unknown first[160376] "dead at end of block" "insert auto destroy"
    (544018 'init var' first[160376] 1)
    (160379 'end of statement' binary[160276] binary[160276] binary[160276])
    {
      unknown _indexOfInterest[160486] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160487] "expr temp" "temp"
      unknown call_tmp[674900] "expr temp" "maybe param" "maybe type" "temp"
      (674903 'move' call_tmp[674900](160496 call dom _mt[243] this[161472]))
      unknown call_tmp[674905] "expr temp" "maybe param" "maybe type" "temp"
      (674908 'move' call_tmp[674905](160499 call _getIterator call_tmp[674900]))
      unknown call_tmp[674910] "expr temp" "maybe param" "maybe type" "temp"
      (674913 'move' call_tmp[674910](160503 call _getIterator this[161472]))
      (160505 'move' _iterator[160487](160391 call _build_tuple call_tmp[674905] call_tmp[674910]))
      Defer
      {
        {
          (160535 call _freeIterator _iterator[160487])
        }
      }
      { scopeless type
        (160510 'move' _indexOfInterest[160486](160507 call iteratorIndex _iterator[160487]))
      }
      ForLoop[160488]
      {
        (160515 call _check_tuple_var_decl _indexOfInterest[160486] 2)
        (482306 'end of statement')
        unknown key[160521] "index var" "insert auto destroy"
        (482307 'end of statement')
        (160523 'move' key[160521](160519 call _indexOfInterest[160486] 0))
        (482308 'end of statement' key[160521])
        unknown val[160528] "index var" "insert auto destroy"
        (482310 'end of statement')
        (160530 'move' val[160528](160526 call _indexOfInterest[160486] 1))
        (482311 'end of statement' val[160528])
        {
          unknown call_tmp[674915] "expr temp" "maybe param" "maybe type" "temp"
          (674918 'move' call_tmp[674915](160432 call _cond_test first[160376]))
          if call_tmp[674915]
          {
            (160395 call = first[160376] 0)
            (482313 'end of statement' first[160376])
          }
          {
            unknown call_tmp[674920] "expr temp" "maybe param" "maybe type" "temp"
            (674923 'move' call_tmp[674920](160426 call _cond_test isspace[160301]))
            if call_tmp[674920]
            {
              unknown call_tmp[674925] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
              (674928 'move' call_tmp[674925](747871 'new' ioLiteral[238665] " "))
              (160405 call <~> f[160266] call_tmp[674925])
            }
            {
              unknown tmp[427924] "maybe param" "temp"
              (427935 'move' tmp[427924] isjson[160314])
              unknown call_tmp[674930] "expr temp" "maybe param" "maybe type" "temp"
              (674933 'move' call_tmp[674930](427937 call _cond_invalid tmp[427924]))
              if call_tmp[674930]
              {
                (427940 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[569893] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[569894] "maybe param" "temp"
              unknown call_tmp[674935] "expr temp" "maybe param" "maybe type" "temp"
              (674938 'move' call_tmp[674935](427925 call isTrue tmp[427924]))
              (569899 'move' tmp[569894](569897 call _cond_test call_tmp[674935]))
              if tmp[569894]
              {
                (569904 'move' tmp[569893](569901 '_paramFoldLogical' tmp[569894] 1))
              }
              {
                unknown tmp[569906] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (569908 'move' tmp[569906](427929 call isTrue ischpl[160327]))
                (569913 'move' tmp[569893](569910 '_paramFoldLogical' tmp[569894] tmp[569906]))
              }
              unknown call_tmp[674940] "expr temp" "maybe param" "maybe type" "temp"
              (674943 'move' call_tmp[674940](160421 call _cond_test tmp[569893]))
              if call_tmp[674940]
              {
                unknown call_tmp[674945] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (674948 'move' call_tmp[674945](747872 'new' ioLiteral[238665] ", "))
                (160418 call <~> f[160266] call_tmp[674945])
              }
            }
          }
          unknown tmp[427945] "maybe param" "temp"
          (427956 'move' tmp[427945](160440 call writing _mt[243] f[160266]))
          unknown call_tmp[674952] "expr temp" "maybe param" "maybe type" "temp"
          (674955 'move' call_tmp[674952](427958 call _cond_invalid tmp[427945]))
          if call_tmp[674952]
          {
            (427961 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569920] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569921] "maybe param" "temp"
          unknown call_tmp[674957] "expr temp" "maybe param" "maybe type" "temp"
          (674960 'move' call_tmp[674957](427946 call isTrue tmp[427945]))
          (569926 'move' tmp[569921](569924 call _cond_test call_tmp[674957]))
          if tmp[569921]
          {
            unknown tmp[569928] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (569930 'move' tmp[569928](427949 call isTrue ischpl[160327]))
            (569935 'move' tmp[569920](569932 '_paramFoldLogical' tmp[569921] tmp[569928]))
          }
          {
            (569940 'move' tmp[569920](569937 '_paramFoldLogical' tmp[569921] 0))
          }
          unknown call_tmp[674962] "expr temp" "maybe param" "maybe type" "temp"
          (674965 'move' call_tmp[674962](160477 call _cond_test tmp[569920]))
          if call_tmp[674962]
          {
            (160448 call <~> f[160266] key[160521])
            (482319 'end of statement' key[160521])
            unknown call_tmp[674967] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
            (674970 'move' call_tmp[674967](747873 'new' ioLiteral[238665] " => "))
            (160474 call <~> f[160266] call_tmp[674967])
          }
          (160483 call <~> f[160266] val[160528])
          (482322 'end of statement' val[160528])
        }
        label _continueLabel[160491]
        _indexOfInterest[160486]
        _iterator[160487]
      }
      label _breakLabel[160492]
    }
    unknown tmp[427966] "maybe param" "temp"
    (427977 'move' tmp[427966] isjson[160314])
    unknown call_tmp[674972] "expr temp" "maybe param" "maybe type" "temp"
    (674975 'move' call_tmp[674972](427979 call _cond_invalid tmp[427966]))
    if call_tmp[674972]
    {
      (427982 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569947] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569948] "maybe param" "temp"
    unknown call_tmp[674977] "expr temp" "maybe param" "maybe type" "temp"
    (674980 'move' call_tmp[674977](427967 call isTrue tmp[427966]))
    (569953 'move' tmp[569948](569951 call _cond_test call_tmp[674977]))
    if tmp[569948]
    {
      (569958 'move' tmp[569947](569955 '_paramFoldLogical' tmp[569948] 1))
    }
    {
      unknown tmp[569960] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (569962 'move' tmp[569960](427971 call isTrue ischpl[160327]))
      (569967 'move' tmp[569947](569964 '_paramFoldLogical' tmp[569948] tmp[569960]))
    }
    unknown call_tmp[674982] "expr temp" "maybe param" "maybe type" "temp"
    (674985 'move' call_tmp[674982](160555 call _cond_test tmp[569947]))
    if call_tmp[674982]
    {
      unknown call_tmp[674987] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (674990 'move' call_tmp[674987](747874 'new' ioLiteral[238665] "]"))
      (160552 call <~> f[160266] call_tmp[674987])
    }
    label _end_dsiSerialReadWrite[521170]
    (521172 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).readChapelStyleAssocArray[160566](arg _mt[161478]:_MT[238], arg this[161476]:DefaultAssociativeArr[161418](?), arg f[160564]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[674992] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (674995 'move' call_tmp[674992](747875 'new' ioLiteral[238665] "["))
    const openBracket[160573] "dead at end of block" "const" "insert auto destroy"
    (544020 'init var' openBracket[160573] call_tmp[674992])
    (160576 'end of statement')
    unknown call_tmp[674997] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (675000 'move' call_tmp[674997](747876 'new' ioLiteral[238665] "]"))
    const closedBracket[160583] "dead at end of block" "const" "insert auto destroy"
    (544022 'init var' closedBracket[160583] call_tmp[674997])
    (160586 'end of statement')
    unknown first[160588] "dead at end of block" "insert auto destroy"
    (544024 'init var' first[160588] 1)
    (160591 'end of statement')
    unknown readEnd[160593] "dead at end of block" "insert auto destroy"
    (544026 'init var' readEnd[160593] 0)
    (160596 'end of statement')
    (160599 call <~> f[160564] openBracket[160573])
    (482326 'end of statement' openBracket[160573])
    {
      unknown tmp[160702] "temp"
      (160720 'move' tmp[160702](160718 call _cond_test 1))
      WhileDo[160707]
      {
        {
          unknown call_tmp[675002] "expr temp" "maybe param" "maybe type" "temp"
          (675005 'move' call_tmp[675002](160654 call _cond_test first[160588]))
          if call_tmp[675002]
          {
            (160606 call = first[160588] 0)
            (482328 'end of statement' first[160588])
            Try
            {
              {
                (160612 call <~> f[160564] closedBracket[160583])
                (482330 'end of statement' closedBracket[160583])
                (160618 call = readEnd[160593] 1)
                (482332 'end of statement' readEnd[160593])
                break _breakLabel[160706] _breakLabel[160706]
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675007] "expr temp" "maybe param" "maybe type" "temp"
              (675010 'move' call_tmp[675007](354392 'current error'))
              unknown call_tmp[675012] "maybe param" "maybe type" "temp"
              (675015 'move' call_tmp[675012](354393 'dynamic_cast' unmanaged BadFormatError?[415517] call_tmp[675007]))
              unknown tmp[354389] "dead at end of block" "insert auto destroy" "temp"
              (544028 'init var' tmp[354389] call_tmp[675012])
              unknown call_tmp[675017] "expr temp" "maybe param" "maybe type" "temp"
              (675020 'move' call_tmp[675017](354396 '!=' tmp[354389] nil[44]))
              if call_tmp[675017]
              {
                unknown call_tmp[675022] "expr temp" "maybe param" "maybe type" "temp"
                (675025 'move' call_tmp[675022](354403 'to non nilable class' tmp[354389]))
                unknown call_tmp[675027] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675030 'move' call_tmp[675027](747877 'new' _owned[30](?) call_tmp[675022]))
                unknown err[354402] "dead at end of block" "insert auto destroy"
                (544030 'init var' err[354402] call_tmp[675027])
                (482334 'end of statement')
                {
                }
              }
              {
              }
            }
          }
          {
            Try
            {
              {
                unknown call_tmp[675032] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675035 'move' call_tmp[675032](747878 'new' ioLiteral[238665] ","))
                (160638 call <~> f[160564] call_tmp[675032])
              }
            }
            Catch err : BadFormatError
            {
              unknown call_tmp[675037] "expr temp" "maybe param" "maybe type" "temp"
              (675040 'move' call_tmp[675037](354413 'current error'))
              unknown call_tmp[675042] "maybe param" "maybe type" "temp"
              (675045 'move' call_tmp[675042](354414 'dynamic_cast' unmanaged BadFormatError?[415517] call_tmp[675037]))
              unknown tmp[354410] "dead at end of block" "insert auto destroy" "temp"
              (544032 'init var' tmp[354410] call_tmp[675042])
              unknown call_tmp[675047] "expr temp" "maybe param" "maybe type" "temp"
              (675050 'move' call_tmp[675047](354417 '!=' tmp[354410] nil[44]))
              if call_tmp[675047]
              {
                unknown call_tmp[675052] "expr temp" "maybe param" "maybe type" "temp"
                (675055 'move' call_tmp[675052](354424 'to non nilable class' tmp[354410]))
                unknown call_tmp[675057] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (675060 'move' call_tmp[675057](747879 'new' _owned[30](?) call_tmp[675052]))
                unknown err[354423] "dead at end of block" "insert auto destroy"
                (544034 'init var' err[354423] call_tmp[675057])
                (482336 'end of statement')
                {
                  break _breakLabel[160706] _breakLabel[160706]
                }
              }
              {
              }
            }
          }
          unknown key[160660] "dead at end of block" "insert auto destroy"
          unknown call_tmp[675064] "expr temp" "maybe param" "maybe type" "temp"
          (675067 'move' call_tmp[675064](387147 call idxType _mt[243] this[161476]))
          (544036 'default init var' key[160660] call_tmp[675064])
          (160663 'end of statement')
          (160666 call <~> f[160564] key[160660])
          (482337 'end of statement' key[160660])
          unknown call_tmp[675069] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (675072 'move' call_tmp[675069](747880 'new' ioLiteral[238665] "=>"))
          (160691 call <~> f[160564] call_tmp[675069])
          (482339 'end of statement')
          unknown call_tmp[675076] "expr temp" "maybe param" "maybe type" "temp"
          (675079 'move' call_tmp[675076](160698 call(387156 call (partial) dsiAccess _mt[243] this[161476]) key[160660]))
          (160699 call <~> f[160564] call_tmp[675076])
          (482340 'end of statement' key[160660])
        }
        label _continueLabel[160705]
        (160713 'move' tmp[160702](160711 call _cond_test 1))
        tmp[160702]
      }
      label _breakLabel[160706]
    }
    unknown call_tmp[675081] "expr temp" "maybe param" "maybe type" "temp"
    (675084 'move' call_tmp[675081](160724 call ! readEnd[160593]))
    unknown call_tmp[675086] "expr temp" "maybe param" "maybe type" "temp"
    (675089 'move' call_tmp[675086](160731 call _cond_test call_tmp[675081]))
    if call_tmp[675086]
    {
      (160728 call <~> f[160564] closedBracket[160583])
      (482342 'end of statement' closedBracket[160583])
    }
    (521176 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialWrite[160742](arg _mt[161482]:_MT[238], arg this[161480]:DefaultAssociativeArr[161418](?), arg f[160740]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160750 call(160745 call (partial) dsiSerialReadWrite _mt[243] this[161480]) f[160740])
    (521178 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiSerialRead[160759](arg _mt[161486]:_MT[238], arg this[161484]:DefaultAssociativeArr[161418](?), arg f[160757]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (160767 call(160762 call (partial) dsiSerialReadWrite _mt[243] this[161484]) f[160757])
    (521180 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiSorted[160776](arg _mt[161490]:_MT[238], arg this[161488]:DefaultAssociativeArr[161418](?), arg comparator[160774]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[521184] "RVV" "temp"
    unknown tableCopy[160814] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter9[583003](arg iterator[583005]:_any[178](?), arg this[583041]:DefaultAssociativeArr[161418](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583052] "RVV" "temp"
      {
        unknown _indexOfInterest[583010] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[583011] "expr temp" "temp"
        (583020 'move' _iterator[583011](583018 call _getIterator iterator[583005]))
        Defer
        {
          {
            (583034 call _freeIterator _iterator[583011])
          }
        }
        { scopeless type
          (583025 'move' _indexOfInterest[583010](583022 call iteratorIndex _iterator[583011]))
        }
        ForLoop[583012] for-expr
        {
          unknown slot[160812] "index var" "insert auto destroy" "no doc"
          (583045 'end of statement')
          (583029 'move' slot[160812] _indexOfInterest[583010])
          (583046 'end of statement' slot[160812])
          {
            {
              unknown yret[583056] "YVV" "temp"
              unknown call_tmp[583065] "expr temp" "maybe param" "maybe type" "temp"
              (583068 'move' call_tmp[583065](160809 call(387173 call (partial) data _mt[243] this[583041]) slot[160812]))
              (583059 'move' yret[583056](583058 'deref' call_tmp[583065]))
              (583061 yield yret[583056])
              (583048 'end of statement' slot[160812])
            }
          }
          label _continueLabel[583015]
          _indexOfInterest[583010]
          _iterator[583011]
        }
        label _breakLabel[583016]
      }
      (583054 return ret[583052])
    }
    function chpl__forexpr9[582983](arg iterExpr[582986]:_any[178](?), arg this[582990]:DefaultAssociativeArr[161418](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583073] "RVV" "temp"
      unknown _iterator[582993] "expr temp" "maybe ref" "temp"
      (582995 'move' _iterator[582993] iterExpr[582986])
      unknown call_tmp[583080] "expr temp" "maybe param" "maybe type" "temp"
      (583083 'move' call_tmp[583080](582998 call chpl__loopexpr_iter9 _iterator[582993] this[582990]))
      (583078 'move' ret[583073](583077 'deref' call_tmp[583080]))
      (583075 return ret[583073])
    }
    unknown call_tmp[583087] "expr temp" "maybe param" "maybe type" "temp"
    (583090 'move' call_tmp[583087](361024 call dom _mt[243] this[161488]))
    unknown call_tmp[583094] "expr temp" "maybe param" "maybe type" "temp"
    (583097 'move' call_tmp[583094](160805 call(160801 call (partial) _fullSlots _mt[243] call_tmp[583087])))
    unknown call_tmp[583099] "maybe param" "maybe type" "temp"
    (583102 'move' call_tmp[583099](582988 call chpl__forexpr9 call_tmp[583094] this[161488]))
    (583106 'iterator record set shape' call_tmp[583099] call_tmp[583094] 1)
    unknown call_tmp[675095] "expr temp" "maybe param" "maybe type" "temp"
    (675098 'move' call_tmp[675095](160783 call chpl_build_low_bounded_range 0))
    unknown call_tmp[675102] "expr temp" "maybe param" "maybe type" "temp"
    (675105 'move' call_tmp[675102](361019 call dom _mt[243] this[161488]))
    unknown call_tmp[675109] "expr temp" "maybe param" "maybe type" "temp"
    (675112 'move' call_tmp[675109](160786 call dsiNumIndices _mt[243] call_tmp[675102]))
    unknown call_tmp[675114] "expr temp" "maybe param" "maybe type" "temp"
    (675117 'move' call_tmp[675114](160789 call # call_tmp[675095] call_tmp[675109]))
    unknown call_tmp[675119] "expr temp" "maybe param" "maybe type" "temp"
    (675122 'move' call_tmp[675119](160793 call chpl__ensureDomainExpr call_tmp[675114]))
    unknown call_tmp[675126] "expr temp" "maybe param" "maybe type" "temp"
    (675129 'move' call_tmp[675126](387167 call eltType _mt[243] this[161488]))
    unknown call_tmp[675131] "maybe param" "maybe type" "temp"
    (675134 'move' call_tmp[675131](160795 call chpl__buildArrayRuntimeType call_tmp[675119] call_tmp[675126]))
    (544038 'init var' tableCopy[160814] call_tmp[583099] call_tmp[675131])
    (160817 'end of statement')
    (160823 call sort tableCopy[160814](comparator = comparator[160774]))
    (482346 'end of statement' tableCopy[160814])
    {
      unknown _indexOfInterest[160830] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160831] "expr temp" "temp"
      (160840 'move' _iterator[160831](160838 call _getIterator tableCopy[160814]))
      Defer
      {
        {
          (160856 call _freeIterator _iterator[160831])
        }
      }
      { scopeless type
        (160845 'move' _indexOfInterest[160830](160842 call iteratorIndex _iterator[160831]))
      }
      ForLoop[160832]
      {
        unknown elem[160849] "index var" "insert auto destroy"
        (482349 'end of statement')
        (160851 'move' elem[160849] _indexOfInterest[160830])
        (482350 'end of statement' elem[160849])
        unknown yret[521188] "YVV" "temp"
        (521191 'move' yret[521188](521190 'deref' elem[160849]))
        (521193 yield yret[521188])
        (482352 'end of statement' elem[160849])
        label _continueLabel[160835]
        _indexOfInterest[160830]
        _iterator[160831]
      }
      label _breakLabel[160836]
    }
    (521186 return ret[521184])
    (355071 'used modules list'(160779 'use' Sort[267880]))
  }
  function DefaultAssociativeArr[161418](?)._doDefaultInitSlot[160871](arg _mt[161494]:_MT[238], arg this[161492]:DefaultAssociativeArr[161418](?), arg slot[160868]:int(64)[13], arg inAdd[160874]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675138] "expr temp" "maybe param" "maybe type" "temp"
    (675141 'move' call_tmp[675138](387183 call eltType _mt[243] this[161492]))
    unknown call_tmp[675143] "expr temp" "maybe param" "maybe type" "temp"
    (675146 'move' call_tmp[675143](160880 call isDefaultInitializable call_tmp[675138]))
    unknown call_tmp[675148] "expr temp" "maybe param" "maybe type" "temp"
    (675151 'move' call_tmp[675148](160881 call ! call_tmp[675143]))
    unknown call_tmp[675153] "expr temp" "maybe param" "maybe type" "temp"
    (675156 'move' call_tmp[675153](160991 call _cond_test call_tmp[675148]))
    if call_tmp[675153]
    {
      unknown call_tmp[675158] "expr temp" "maybe param" "maybe type" "temp"
      (675161 'move' call_tmp[675158](160966 call _cond_test inAdd[160874]))
      if call_tmp[675158]
      {
        unknown call_tmp[675163] "expr temp" "maybe param" "maybe type" "temp"
        (675166 'move' call_tmp[675163](160919 call + "Can't resize domains whose arrays' elements don't " "have default values"))
        (160922 call halt call_tmp[675163])
      }
      {
        unknown call_tmp[675168] "expr temp" "maybe param" "maybe type" "temp"
        (675171 'move' call_tmp[675168](160960 call + "Can't default initialize associative arrays whose " "elements have no default value"))
        (160963 call halt call_tmp[675168])
      }
    }
    {
      unknown initval[160972] "dead at end of block" "no auto destroy"
      unknown call_tmp[675175] "expr temp" "maybe param" "maybe type" "temp"
      (675178 'move' call_tmp[675175](387189 call eltType _mt[243] this[161492]))
      (544040 'default init var' initval[160972] call_tmp[675175])
      (160975 'end of statement')
      unknown dst[160981] "dead at end of block" "ref var"
      unknown call_tmp[675182] "expr temp" "maybe param" "maybe type" "temp"
      (675185 'move' call_tmp[675182](160980 call(387194 call (partial) data _mt[243] this[161492]) slot[160868]))
      (544043 'move' dst[160981](544042 'addr of' call_tmp[675182]))
      (160984 'end of statement')
      (160989 '=' dst[160981] initval[160972])
      (482356 'end of statement' dst[160981] initval[160972])
    }
    (521195 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._defaultInitSlot[161004](arg _mt[161498]:_MT[238], arg this[161496]:DefaultAssociativeArr[161418](?), arg slot[161001]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (161011 call(387201 call (partial) _doDefaultInitSlot _mt[243] this[161496]) slot[161001](inAdd = 1))
    (521197 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._deinitSlot[161022](arg _mt[161502]:_MT[238], arg this[161500]:DefaultAssociativeArr[161418](?), arg slot[161019]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675193] "expr temp" "maybe param" "maybe type" "temp"
    (675196 'move' call_tmp[675193](161028 call(387213 call (partial) data _mt[243] this[161500]) slot[161019]))
    (161030 call(387208 call (partial) _deinitElement _mt[243] this[161500]) call_tmp[675193])
    (521199 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._elementNeedsDeinit[161037](arg _mt[161506]:_MT[238], arg this[161504]:DefaultAssociativeArr[161418](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521203] "RVV" "param" "temp"
    unknown call_tmp[675200] "expr temp" "maybe param" "maybe type" "temp"
    (675203 'move' call_tmp[675200](387219 call eltType _mt[243] this[161504]))
    unknown call_tmp[675205] "expr temp" "maybe param" "maybe type" "temp"
    (675208 'move' call_tmp[675205](161042 'needs auto destroy' call_tmp[675200]))
    (521208 'move' ret[521203](521207 'deref' call_tmp[675205]))
    (521205 return ret[521203])
  }
  function DefaultAssociativeArr[161418](?)._deinitElement[161054](arg _mt[161510]:_MT[238], arg this[161508]:DefaultAssociativeArr[161418](?), ref arg elt[161051] :
  (387224 call eltType _mt[243] this[161508])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[675214] "expr temp" "maybe param" "maybe type" "temp"
    (675217 'move' call_tmp[675214](161058 call(387230 call (partial) _elementNeedsDeinit _mt[243] this[161508])))
    unknown call_tmp[675219] "expr temp" "maybe param" "maybe type" "temp"
    (675222 'move' call_tmp[675219](161065 call _cond_test call_tmp[675214]))
    if call_tmp[675219]
    {
      (161062 call chpl__autoDestroy elt[161051])
    }
    (521210 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._startRehash[161078](arg _mt[161514]:_MT[238], arg this[161512]:DefaultAssociativeArr[161418](?), arg newSize[161075]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675226] "expr temp" "maybe param" "maybe type" "temp"
    (675229 'move' call_tmp[675226](387236 call tmpData _mt[243] this[161512]))
    unknown call_tmp[675233] "expr temp" "maybe param" "maybe type" "temp"
    (675236 'move' call_tmp[675233](387241 call data _mt[243] this[161512]))
    (161082 call = call_tmp[675226] call_tmp[675233])
    (482363 'end of statement')
    unknown call_tmp[675240] "expr temp" "maybe param" "maybe type" "temp"
    (675243 'move' call_tmp[675240](387246 call data _mt[243] this[161512]))
    unknown call_tmp[675247] "expr temp" "maybe param" "maybe type" "temp"
    (675250 'move' call_tmp[675247](361029 call dom _mt[243] this[161512]))
    unknown call_tmp[675254] "expr temp" "maybe param" "maybe type" "temp"
    (675257 'move' call_tmp[675254](161088 call table _mt[243] call_tmp[675247]))
    unknown call_tmp[675263] "expr temp" "maybe param" "maybe type" "temp"
    (675266 'move' call_tmp[675263](387252 call eltType _mt[243] this[161512]))
    unknown call_tmp[675268] "expr temp" "maybe param" "maybe type" "temp"
    (675271 'move' call_tmp[675268](161097 call(161091 call (partial) allocateData _mt[243] call_tmp[675254]) newSize[161075] call_tmp[675263]))
    (161098 call = call_tmp[675240] call_tmp[675268])
    (521212 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._finishRehash[161109](arg _mt[161518]:_MT[238], arg this[161516]:DefaultAssociativeArr[161418](?), arg oldSize[161106]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675275] "expr temp" "maybe param" "maybe type" "temp"
    (675278 'move' call_tmp[675275](387257 call tmpData _mt[243] this[161516]))
    (161115 call _ddata_free call_tmp[675275] oldSize[161106])
    (482365 'end of statement')
    unknown call_tmp[675282] "expr temp" "maybe param" "maybe type" "temp"
    (675285 'move' call_tmp[675282](387263 call tmpData _mt[243] this[161516]))
    (161120 call = call_tmp[675282] nil[44])
    (521214 return _void[55])
  }
  function DefaultAssociativeArr[161418](?)._moveElementDuringRehash[161131](arg _mt[161522]:_MT[238], arg this[161520]:DefaultAssociativeArr[161418](?), arg oldslot[161128]:int(64)[13], arg newslot[161134]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    const src[161141] "dead at end of block" "const" "ref var"
    unknown call_tmp[675289] "expr temp" "maybe param" "maybe type" "temp"
    (675292 'move' call_tmp[675289](161140 call(387268 call (partial) tmpData _mt[243] this[161520]) oldslot[161128]))
    (544046 'move' src[161141](544045 'addr of' call_tmp[675289]))
    (161144 'end of statement')
    unknown dst[161150] "dead at end of block" "ref var"
    unknown call_tmp[675296] "expr temp" "maybe param" "maybe type" "temp"
    (675299 'move' call_tmp[675296](161149 call(387274 call (partial) data _mt[243] this[161520]) newslot[161134]))
    (544049 'move' dst[161150](544048 'addr of' call_tmp[675296]))
    (161153 'end of statement')
    (161158 '=' dst[161150] src[161141])
    (482367 'end of statement' dst[161150] src[161141])
    (521216 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiTargetLocales[161164](arg _mt[161526]:_MT[238], arg this[161524]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[521220] "RVV" "temp"
    unknown call_tmp[675301] "expr temp" "maybe param" "maybe type" "temp"
    (675304 'move' call_tmp[675301](161167 '_wide_get_locale' this[161524]))
    unknown call_tmp[675306] "expr temp" "maybe param" "maybe type" "temp"
    (675309 'move' call_tmp[675306](161168 call chpl_localeID_to_locale call_tmp[675301]))
    unknown call_tmp[675311] "expr temp" "maybe param" "maybe type" "temp"
    (675314 'move' call_tmp[675311](161171 call chpl__buildArrayExpr call_tmp[675306]))
    (521225 'move' ret[521220](521224 'deref' call_tmp[675311]))
    (521222 return ret[521220])
  }
  function DefaultAssociativeArr[161418](?).dsiHasSingleLocalSubdomain[161180](arg _mt[161530]:_MT[238], arg this[161528]:DefaultAssociativeArr[161418](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[521229] "RVV" "param" "temp"
    (521234 'move' ret[521229](521233 'deref' 1))
    (521231 return ret[521229])
  }
  function DefaultAssociativeArr[161418](?).dsiLocalSubdomain[161194](arg _mt[161534]:_MT[238], arg this[161532]:DefaultAssociativeArr[161418](?), arg loc[161191]:locale[28]) : _unknown[51] "method" "primary method"
  {
    unknown ret[521238] "RVV" "temp"
    unknown call_tmp[675316] "expr temp" "maybe param" "maybe type" "temp"
    (675319 'move' call_tmp[675316](161197 '_wide_get_locale' this[161532]))
    unknown call_tmp[675321] "expr temp" "maybe param" "maybe type" "temp"
    (675324 'move' call_tmp[675321](161198 call chpl_localeID_to_locale call_tmp[675316]))
    unknown call_tmp[675326] "expr temp" "maybe param" "maybe type" "temp"
    (675329 'move' call_tmp[675326](161201 call == call_tmp[675321] loc[161191]))
    unknown call_tmp[675331] "expr temp" "maybe param" "maybe type" "temp"
    (675334 'move' call_tmp[675331](161231 call _cond_test call_tmp[675326]))
    if call_tmp[675331]
    {
      unknown call_tmp[675338] "expr temp" "maybe param" "maybe type" "temp"
      (675341 'move' call_tmp[675338](387285 call dom _mt[243] this[161532]))
      unknown call_tmp[675343] "expr temp" "maybe param" "maybe type" "temp"
      (675346 'move' call_tmp[675343](161206 call _getDomain call_tmp[675338]))
      (521243 'move' ret[521238](521242 'deref' call_tmp[675343]))
      gotoReturn _end_dsiLocalSubdomain[521236] _end_dsiLocalSubdomain[521236]
    }
    {
      unknown a[161223] "dead at end of block" "insert auto destroy"
      unknown call_tmp[675350] "expr temp" "maybe param" "maybe type" "temp"
      (675353 'move' call_tmp[675350](361034 call dom _mt[243] this[161532]))
      unknown call_tmp[675357] "expr temp" "maybe param" "maybe type" "temp"
      (675360 'move' call_tmp[675357](161211 call idxType _mt[243] call_tmp[675350]))
      unknown call_tmp[675364] "expr temp" "maybe param" "maybe type" "temp"
      (675367 'move' call_tmp[675364](361039 call dom _mt[243] this[161532]))
      unknown call_tmp[675371] "expr temp" "maybe param" "maybe type" "temp"
      (675374 'move' call_tmp[675371](161216 call parSafe _mt[243] call_tmp[675364]))
      unknown call_tmp[675376] "expr temp" "maybe param" "maybe type" "temp"
      (675379 'move' call_tmp[675376](161221 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[675357](parSafe = call_tmp[675371])))
      (544051 'default init var' a[161223] call_tmp[675376])
      (161226 'end of statement')
      (521248 'move' ret[521238](521247 'deref' a[161223]))
      gotoReturn _end_dsiLocalSubdomain[521236] _end_dsiLocalSubdomain[521236]
      (482373 'end of statement' a[161223])
    }
    label _end_dsiLocalSubdomain[521236]
    (521240 return ret[521238])
  }
  function DefaultAssociativeArr[161418](?).dsiElementInitializationComplete[161240](arg _mt[161538]:_MT[238], arg this[161536]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675383] "expr temp" "maybe param" "maybe type" "temp"
    (675386 'move' call_tmp[675383](161243 call eltsNeedDeinit _mt[243] this[161536]))
    (161247 call = call_tmp[675383] 1)
    (521252 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiElementDeinitializationComplete[161255](arg _mt[161542]:_MT[238], arg this[161540]:DefaultAssociativeArr[161418](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[675390] "expr temp" "maybe param" "maybe type" "temp"
    (675393 'move' call_tmp[675390](161258 call eltsNeedDeinit _mt[243] this[161540]))
    (161262 call = call_tmp[675390] 0)
    (521254 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).dsiDestroyArr[161274](arg _mt[161546]:_MT[238], arg this[161544]:DefaultAssociativeArr[161418](?), arg deinitElts[161271]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown tmp[427987] "maybe param" "temp"
    (427998 'move' tmp[427987] deinitElts[161271])
    unknown call_tmp[675395] "expr temp" "maybe param" "maybe type" "temp"
    (675398 'move' call_tmp[675395](428000 call _cond_invalid tmp[427987]))
    if call_tmp[675395]
    {
      (428003 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[569974] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569975] "maybe param" "temp"
    unknown call_tmp[675400] "expr temp" "maybe param" "maybe type" "temp"
    (675403 'move' call_tmp[675400](427988 call isTrue tmp[427987]))
    (569980 'move' tmp[569975](569978 call _cond_test call_tmp[675400]))
    if tmp[569975]
    {
      unknown tmp[569982] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[675407] "expr temp" "maybe param" "maybe type" "temp"
      (675410 'move' call_tmp[675407](161278 call eltsNeedDeinit _mt[243] this[161544]))
      (569984 'move' tmp[569982](427991 call isTrue call_tmp[675407]))
      (569989 'move' tmp[569974](569986 '_paramFoldLogical' tmp[569975] tmp[569982]))
    }
    {
      (569994 'move' tmp[569974](569991 '_paramFoldLogical' tmp[569975] 0))
    }
    unknown call_tmp[675412] "expr temp" "maybe param" "maybe type" "temp"
    (675415 'move' call_tmp[675412](161402 call _cond_test tmp[569974]))
    if call_tmp[675412]
    {
      unknown call_tmp[675419] "expr temp" "maybe param" "maybe type" "temp"
      (675422 'move' call_tmp[675419](161285 call(387292 call (partial) _elementNeedsDeinit _mt[243] this[161544])))
      unknown call_tmp[675424] "expr temp" "maybe param" "maybe type" "temp"
      (675427 'move' call_tmp[675424](161397 call _cond_test call_tmp[675419]))
      if call_tmp[675424]
      {
        unknown call_tmp[675431] "expr temp" "maybe param" "maybe type" "temp"
        (675434 'move' call_tmp[675431](387297 call eltType _mt[243] this[161544]))
        unknown call_tmp[675436] "expr temp" "maybe param" "maybe type" "temp"
        (675439 'move' call_tmp[675436](161289 call _deinitElementsIsParallel call_tmp[675431]))
        unknown call_tmp[675441] "expr temp" "maybe param" "maybe type" "temp"
        (675444 'move' call_tmp[675441](161392 call _cond_test call_tmp[675436]))
        if call_tmp[675441]
        {
          unknown call_tmp[675448] "expr temp" "maybe param" "maybe type" "temp"
          (675451 'move' call_tmp[675448](361047 call dom _mt[243] this[161544]))
          unknown call_tmp[675455] "expr temp" "maybe param" "maybe type" "temp"
          (675458 'move' call_tmp[675455](161292 call table _mt[243] call_tmp[675448]))
          unknown call_tmp[675462] "expr temp" "maybe param" "maybe type" "temp"
          (675465 'move' call_tmp[675462](161299 call(161295 call (partial) allSlots _mt[243] call_tmp[675455])))
          Forall {
            induction variables:
              
              unknown slot[161322] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[675462]
            shadow variables:
            other variables
              forall body
            {
              unknown call_tmp[675469] "expr temp" "maybe param" "maybe type" "temp"
              (675472 'move' call_tmp[675469](361052 call dom _mt[243] this[161544]))
              unknown call_tmp[675476] "expr temp" "maybe param" "maybe type" "temp"
              (675479 'move' call_tmp[675476](161306 call(161301 call (partial) _isSlotFull _mt[243] call_tmp[675469]) slot[161322]))
              unknown call_tmp[675481] "expr temp" "maybe param" "maybe type" "temp"
              (675484 'move' call_tmp[675481](161316 call _cond_test call_tmp[675476]))
              if call_tmp[675481]
              {
                unknown call_tmp[675490] "expr temp" "maybe param" "maybe type" "temp"
                (675493 'move' call_tmp[675490](161311 call(387307 call (partial) data _mt[243] this[161544]) slot[161322]))
                (161313 call(387302 call (partial) _deinitElement _mt[243] this[161544]) call_tmp[675490])
                (482378 'end of statement' slot[161322])
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161357] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161358] "expr temp" "temp"
            unknown call_tmp[675497] "expr temp" "maybe param" "maybe type" "temp"
            (675500 'move' call_tmp[675497](361057 call dom _mt[243] this[161544]))
            unknown call_tmp[675504] "expr temp" "maybe param" "maybe type" "temp"
            (675507 'move' call_tmp[675504](161328 call table _mt[243] call_tmp[675497]))
            unknown call_tmp[675511] "expr temp" "maybe param" "maybe type" "temp"
            (675514 'move' call_tmp[675511](161335 call(161331 call (partial) allSlots _mt[243] call_tmp[675504])))
            (161367 'move' _iterator[161358](161365 call _getIterator call_tmp[675511]))
            Defer
            {
              {
                (161384 call _freeIterator _iterator[161358])
              }
            }
            { scopeless type
              (161373 'move' _indexOfInterest[161357](161370 call iteratorIndex _iterator[161358]))
            }
            ForLoop[161359]
            {
              unknown slot[161377] "index var" "insert auto destroy"
              (482381 'end of statement')
              (161379 'move' slot[161377] _indexOfInterest[161357])
              (482382 'end of statement' slot[161377])
              {
                unknown call_tmp[675518] "expr temp" "maybe param" "maybe type" "temp"
                (675521 'move' call_tmp[675518](361062 call dom _mt[243] this[161544]))
                unknown call_tmp[675525] "expr temp" "maybe param" "maybe type" "temp"
                (675528 'move' call_tmp[675525](161342 call(161337 call (partial) _isSlotFull _mt[243] call_tmp[675518]) slot[161377]))
                unknown call_tmp[675530] "expr temp" "maybe param" "maybe type" "temp"
                (675533 'move' call_tmp[675530](161352 call _cond_test call_tmp[675525]))
                if call_tmp[675530]
                {
                  unknown call_tmp[675539] "expr temp" "maybe param" "maybe type" "temp"
                  (675542 'move' call_tmp[675539](161347 call(387318 call (partial) data _mt[243] this[161544]) slot[161377]))
                  (161349 call(387313 call (partial) _deinitElement _mt[243] this[161544]) call_tmp[675539])
                  (482384 'end of statement' slot[161377])
                }
              }
              label _continueLabel[161362]
              _indexOfInterest[161357]
              _iterator[161358]
            }
            label _breakLabel[161363]
          }
        }
      }
    }
    unknown call_tmp[675546] "expr temp" "maybe param" "maybe type" "temp"
    (675549 'move' call_tmp[675546](161408 call eltsNeedDeinit _mt[243] this[161544]))
    (161412 call = call_tmp[675546] 0)
    (521256 return _void[55])
  }
  function DefaultAssociativeArr[161418](?).super[810769](arg _mt[810771]:_MT[238], arg this[810773]:DefaultAssociativeArr[161418](?)) : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810783] "RVV" "temp"
    unknown call_tmp[810790] "expr temp" "maybe param" "maybe type" "temp"
    (810793 'move' call_tmp[810790](810777 '.v' this[810773] c"super"))
    (810788 'move' ret[810783](810787 'deref' call_tmp[810790]))
    (810785 return ret[810783])
  }
  function DefaultAssociativeArr[810800](?).idxType[810795](arg _mt[810797]:_MT[238], arg this[810802]:DefaultAssociativeArr[810800](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810837] "RVV" "temp" "type variable"
    unknown borrowOfThis[810804]
    (810829 'end of statement')
    (810806 'move' borrowOfThis[810804](810809 call _cast _borrowedNonNilable[214](?) this[810802]))
    (810830 'end of statement' borrowOfThis[810804])
    unknown call_tmp[810851] "expr temp" "maybe param" "maybe type" "temp"
    (810854 'move' call_tmp[810851](810819 'is bound' borrowOfThis[810804] c"idxType"))
    if call_tmp[810851]
    {
      unknown call_tmp[810856] "expr temp" "maybe param" "maybe type" "temp"
      (810859 'move' call_tmp[810856](810814 '.v' borrowOfThis[810804] c"idxType"))
      unknown call_tmp[810861] "expr temp" "maybe param" "maybe type" "temp"
      (810864 'move' call_tmp[810861](810815 call chpl_checkLegalTypeFieldAccessor this[810802] call_tmp[810856] "idxType"))
      (810842 'move' ret[810837](810841 'deref' call_tmp[810861]))
      gotoReturn _end_idxType[810835] _end_idxType[810835]
      (810832 'end of statement' borrowOfThis[810804])
    }
    {
      (810847 'move' ret[810837](810846 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810835] _end_idxType[810835]
    }
    label _end_idxType[810835]
    (810839 return ret[810837])
  }
  function DefaultAssociativeArr[810800](?).idxType[810866](arg _mt[810868]:_MT[238], arg this[810870]:DefaultAssociativeArr[810800](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810905] "RVV" "temp" "type variable"
    unknown borrowOfThis[810872] "type variable"
    (810897 'end of statement')
    (810874 'move' borrowOfThis[810872](810877 call _cast _borrowedNonNilable[214](?) this[810870]))
    (810898 'end of statement' borrowOfThis[810872])
    unknown call_tmp[810919] "expr temp" "maybe param" "maybe type" "temp"
    (810922 'move' call_tmp[810919](810887 'is bound' borrowOfThis[810872] c"idxType"))
    if call_tmp[810919]
    {
      unknown call_tmp[810924] "expr temp" "maybe param" "maybe type" "temp"
      (810927 'move' call_tmp[810924](810882 '.v' borrowOfThis[810872] c"idxType"))
      unknown call_tmp[810929] "expr temp" "maybe param" "maybe type" "temp"
      (810932 'move' call_tmp[810929](810883 call chpl_checkLegalTypeFieldAccessor this[810870] call_tmp[810924] "idxType"))
      (810910 'move' ret[810905](810909 'deref' call_tmp[810929]))
      gotoReturn _end_idxType[810903] _end_idxType[810903]
      (810900 'end of statement' borrowOfThis[810872])
    }
    {
      (810915 'move' ret[810905](810914 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[810903] _end_idxType[810903]
    }
    label _end_idxType[810903]
    (810907 return ret[810905])
  }
  function DefaultAssociativeArr[810800](?).parSafeDom[810934](arg _mt[810936]:_MT[238], arg this[810938]:DefaultAssociativeArr[810800](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[810969] "RVV" "param" "temp"
    unknown borrowOfThis[810940]
    (810961 'end of statement')
    (810942 'move' borrowOfThis[810940](810945 call _cast _borrowedNonNilable[214](?) this[810938]))
    (810962 'end of statement' borrowOfThis[810940])
    unknown call_tmp[810983] "expr temp" "maybe param" "maybe type" "temp"
    (810986 'move' call_tmp[810983](810951 'is bound' borrowOfThis[810940] c"parSafeDom"))
    if call_tmp[810983]
    {
      unknown call_tmp[810988] "expr temp" "maybe param" "maybe type" "temp"
      (810991 'move' call_tmp[810988](810950 '.' borrowOfThis[810940] c"parSafeDom"))
      (810974 'move' ret[810969](810973 'deref' call_tmp[810988]))
      gotoReturn _end_parSafeDom[810967] _end_parSafeDom[810967]
      (810964 'end of statement' borrowOfThis[810940])
    }
    {
      (810979 'move' ret[810969](810978 'deref' ?[260]))
      gotoReturn _end_parSafeDom[810967] _end_parSafeDom[810967]
    }
    label _end_parSafeDom[810967]
    (810971 return ret[810969])
  }
  function DefaultAssociativeArr[810800](?).parSafeDom[810993](arg _mt[810995]:_MT[238], arg this[810997]:DefaultAssociativeArr[810800](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811028] "RVV" "param" "temp"
    unknown borrowOfThis[810999] "type variable"
    (811020 'end of statement')
    (811001 'move' borrowOfThis[810999](811004 call _cast _borrowedNonNilable[214](?) this[810997]))
    (811021 'end of statement' borrowOfThis[810999])
    unknown call_tmp[811042] "expr temp" "maybe param" "maybe type" "temp"
    (811045 'move' call_tmp[811042](811010 'is bound' borrowOfThis[810999] c"parSafeDom"))
    if call_tmp[811042]
    {
      unknown call_tmp[811047] "expr temp" "maybe param" "maybe type" "temp"
      (811050 'move' call_tmp[811047](811009 '.' borrowOfThis[810999] c"parSafeDom"))
      (811033 'move' ret[811028](811032 'deref' call_tmp[811047]))
      gotoReturn _end_parSafeDom[811026] _end_parSafeDom[811026]
      (811023 'end of statement' borrowOfThis[810999])
    }
    {
      (811038 'move' ret[811028](811037 'deref' ?[260]))
      gotoReturn _end_parSafeDom[811026] _end_parSafeDom[811026]
    }
    label _end_parSafeDom[811026]
    (811030 return ret[811028])
  }
  function DefaultAssociativeArr[161418](?).dom[811052](arg _mt[811054]:_MT[238], arg this[811056]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811066] "RVV" "temp"
    unknown call_tmp[811073] "expr temp" "maybe param" "maybe type" "temp"
    (811076 'move' call_tmp[811073](811060 '.' this[811056] c"dom"))
    (811071 'move' ret[811066](811070 'addr of' call_tmp[811073]))
    (811068 return ret[811066])
  }
  function DefaultAssociativeArr[161418](?).dataSize[811078](arg _mt[811080]:_MT[238], arg this[811082]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811092] "RVV" "temp"
    unknown call_tmp[811099] "expr temp" "maybe param" "maybe type" "temp"
    (811102 'move' call_tmp[811099](811086 '.' this[811082] c"dataSize"))
    (811097 'move' ret[811092](811096 'addr of' call_tmp[811099]))
    (811094 return ret[811092])
  }
  function DefaultAssociativeArr[161418](?).data[811104](arg _mt[811106]:_MT[238], arg this[811108]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811118] "RVV" "temp"
    unknown call_tmp[811125] "expr temp" "maybe param" "maybe type" "temp"
    (811128 'move' call_tmp[811125](811112 '.' this[811108] c"data"))
    (811123 'move' ret[811118](811122 'addr of' call_tmp[811125]))
    (811120 return ret[811118])
  }
  function DefaultAssociativeArr[161418](?).tmpData[811130](arg _mt[811132]:_MT[238], arg this[811134]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811144] "RVV" "temp"
    unknown call_tmp[811151] "expr temp" "maybe param" "maybe type" "temp"
    (811154 'move' call_tmp[811151](811138 '.' this[811134] c"tmpData"))
    (811149 'move' ret[811144](811148 'addr of' call_tmp[811151]))
    (811146 return ret[811144])
  }
  function DefaultAssociativeArr[161418](?).eltsNeedDeinit[811156](arg _mt[811158]:_MT[238], arg this[811160]:DefaultAssociativeArr[161418](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[811170] "RVV" "temp"
    unknown call_tmp[811177] "expr temp" "maybe param" "maybe type" "temp"
    (811180 'move' call_tmp[811177](811164 '.' this[811160] c"eltsNeedDeinit"))
    (811175 'move' ret[811170](811174 'addr of' call_tmp[811177]))
    (811172 return ret[811170])
  }
  type DefaultAssociativeArr[161418](?) val super[355602]:AbsBaseArr[149697](?) "delay instantiation" "super class" unknown idxType[158982] "type variable" unknown parSafeDom[158986] "param" bool[10] unknown dom[158997](158995 call unmanaged DefaultAssociativeDom[415382](?) idxType[158982](parSafe = parSafeDom[158986])) val dataSize[159002]:int(64)[13] int(64)[13] unknown data[159010](159009 call _ddata[11695](?) eltType[149671]) unknown tmpData[159018](159017 call _ddata[11695](?) eltType[149671]) val eltsNeedDeinit[159023]:bool[10] 1
  type DefaultAssociativeArr[810800](?)
  type DefaultAssociativeArr[386610](?)
  (355057 'used modules list'(156237 'use' DSIUtil[230800])(156244 'use' ChapelDistribution[145415])(156246 'use' ChapelRange[64180])(156247 'use' SysBasic[223428])(156248 'use' ChapelArray[113672])(156252 'use' ChapelBase[307])(156254 'use' ChapelLocks[187256])(156255 'use' IO[230803])(156258 'use' ChapelHashing[155365])(156260 'use' ChapelHashtable[200393])(156262 'use' SysError[264143]))
}