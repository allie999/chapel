AST dump for ChapelError after pass flattenClasses.
Module use list: ChapelStandard ChapelLocks 

{
  function Error[167942].init[167900](arg _mt[167946]:_MT[238], arg this[167944]:Error[167942]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (167904 call =(388508 call . this[167944] c"_next") nil[44])
  }
  function Error[167942].init[167916](arg _mt[167950]:_MT[238], arg this[167948]:Error[167942], arg msg[167913] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (167925 call =(167921 call . this[167948] c"_msg") msg[167913])
  }
  function Error[167942].message[167933](arg _mt[167954]:_MT[238], arg this[167952]:Error[167942]) : _unknown[51] "method" "primary method"
  {
    (167936 return(388514 call . this[167952] c"_msg"))
  }
  type Error[167942] val super[355753]:object[22] "super class" unknown _next[167870] "no doc" nil[44] unmanaged Error?[415401] unknown thrownLine[167875] "no doc" int(64)[13] unknown thrownFileId[167883] "no doc"(167882 call int(64)[13] 32) unknown _msg[167888] "no doc" string[26] unknown _hasThrowInfo[167894] "no doc" 0 bool[10]
  type unmanaged Error[415532]
  type borrowed Error?[415475]
  type unmanaged Error?[415401]
  type Error?[415398](?)
  type Error[368236](?)
  function NilThrownError[167987].message[167962](arg _mt[167991]:_MT[238], arg this[167989]:NilThrownError[167987]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (167981 return "thrown error was nil")
  }
  type NilThrownError[167987] val super[355755]:Error[167942] "super class"
  type NilThrownError[388785](?)
  function NilClassError[168024].message[167999](arg _mt[168028]:_MT[238], arg this[168026]:NilClassError[168024]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168018 return "cannot convert nil class to non nilable type")
  }
  type NilClassError[168024] val super[355757]:Error[167942] "super class"
  type NilClassError[368342](?)
  function ClassCastError[168061].message[168036](arg _mt[168065]:_MT[238], arg this[168063]:ClassCastError[168061]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168055 return "cannot cast class to type - runtime types not compatible")
  }
  type ClassCastError[168061] val super[355759]:Error[167942] "super class"
  type ClassCastError[368367](?)
  function DecodeError[168098].message[168073](arg _mt[168102]:_MT[238], arg this[168100]:DecodeError[168098]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168092 return "Invalid UTF-8 character encountered.")
  }
  type DecodeError[168098] val super[355761]:Error[167942] "super class"
  type unmanaged DecodeError?[415658]
  type unmanaged DecodeError[415655]
  type DecodeError[368804](?)
  function IllegalArgumentError[168204].init[168110](arg _mt[168208]:_MT[238], arg this[168206]:IllegalArgumentError[168204]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function IllegalArgumentError[168204].init[168121](arg _mt[168212]:_MT[238], arg this[168210]:IllegalArgumentError[168204], arg info[168118] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168129 call(168124 call .(361446 call . this[168210] c"super") c"init") info[168118])
  }
  function IllegalArgumentError[168204].init[168140](arg _mt[168216]:_MT[238], arg this[168214]:IllegalArgumentError[168204], arg formal[168137] :
  string[26], arg info[168143] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown msg[168188](168186 call +(168183 call +(168164 call + "illegal argument '" formal[168137]) "': ") info[168143])
    (168191 'end of statement')
    (168199 call(168194 call .(361451 call . this[168214] c"super") c"init") msg[168188])
  }
  type IllegalArgumentError[168204] val super[355763]:Error[167942] "super class"
  type unmanaged IllegalArgumentError?[415676]
  type unmanaged IllegalArgumentError[415673]
  type IllegalArgumentError[388835](?)
  function chpl_TaskErrors[168306].append[168240](arg _mt[168310]:_MT[238], arg this[168308]:chpl_TaskErrors[168306], arg err[168237] :
  unmanaged Error[415532]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    {
      const tmp[168281] "const" "temp"
      (168282 'move' tmp[168281](168279 'deref'(168278 '_wide_get_locale' this[168308])))
      {
        (168248 call(168244 call .(361458 call . this[168308] c"_errorsLock") c"lock"))
        unknown tmp[168252](388527 call . this[168308] c"_head")
        (168255 'end of statement')
        (168263 call =(168259 call . err[168237] c"_next") tmp[168252])
        (168268 call =(388533 call . this[168308] c"_head") err[168237])
        (168276 call(168272 call .(361464 call . this[168308] c"_errorsLock") c"unlock"))
      }
      (168285 'elided on block' 0 tmp[168281])
    }
  }
  function chpl_TaskErrors[168306].empty[168294](arg _mt[168314]:_MT[238], arg this[168312]:chpl_TaskErrors[168306]) : _unknown[51] "method" "primary method"
  {
    (168300 return(168298 call ==(388539 call . this[168312] c"_head") nil[44]))
  }
  type chpl_TaskErrors[168306] unknown _head[168224] nil[44] unmanaged Error?[415401] unknown _errorsLock[168229] chpl_LocalSpinlock[187398]
  function TaskErrors[169660].init[168342](arg _mt[169664]:_MT[238], arg this[169662]:TaskErrors[169660], ref arg group[168339] :
  chpl_TaskErrors[168306]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown head[168353](168350 call . group[168339] c"_head") unmanaged Error?[415401]
    (168356 'end of statement')
    (168363 call =(168359 call . group[168339] c"_head") nil[44])
    (168371 call(168367 call . this[169662] c"complete"))
    unknown cur[168376] unmanaged Error?[415401]
    (168379 'end of statement')
    unknown n[168381] 0
    (168384 'end of statement')
    (168387 call = cur[168376] head[168353])
    {
      unknown tmp[168491] "temp"
      (168515 'move' tmp[168491](168510 call _cond_test(168512 call != cur[168376] nil[44])))
      WhileDo[168496]
      {
        {
          unknown curnext[168400](168397 call .(168395 call postfix! cur[168376]) c"_next")
          (168403 'end of statement')
          unknown asTaskErr[168414](168412 call _cast unmanaged TaskErrors?[415538] cur[168376]) unmanaged TaskErrors?[415538]
          (168417 'end of statement')
          if(168482 call _cond_test(168420 call == asTaskErr[168414] nil[44]))
          {
            (168424 call += n[168381] 1)
          }
          {
            {
              unknown _indexOfInterest[168447] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[168448] "expr temp" "temp"
              (168457 'move' _iterator[168448](168455 call _getIterator(168430 call postfix! asTaskErr[168414])))
              Defer
              {
                {
                  (168474 call _freeIterator _iterator[168448])
                }
              }
              { scopeless type
                (168463 'move' _indexOfInterest[168447](168460 call iteratorIndex _iterator[168448]))
              }
              ForLoop[168449]
              {
                unknown e[168467] "index var" "insert auto destroy"
                (168469 'move' e[168467] _indexOfInterest[168447])
                {
                  if(168441 call _cond_test(168434 call != e[168467] nil[44]))
                  {
                    (168438 call += n[168381] 1)
                  }
                }
                label _continueLabel[168452]
                _indexOfInterest[168447]
                _iterator[168448]
              }
              label _breakLabel[168453]
            }
          }
          (168488 call = cur[168376] curnext[168400])
        }
        label _continueLabel[168494]
        (168505 'move' tmp[168491](168500 call _cond_test(168502 call != cur[168376] nil[44])))
        tmp[168491]
      }
      label _breakLabel[168495]
    }
    (168520 call =(388567 call . this[169662] c"nErrors") n[168381])
    (168532 call =(388575 call . this[169662] c"errorsArray")(168531 call c_calloc(168527 call _owned[30](?) borrowed Error?[415475]) n[168381]))
    unknown idx[168536] 0
    (168539 'end of statement')
    (168542 call = cur[168376] head[168353])
    {
      unknown tmp[168687] "temp"
      (168711 'move' tmp[168687](168706 call _cond_test(168708 call != cur[168376] nil[44])))
      WhileDo[168692]
      {
        {
          unknown curnext[168555](168552 call .(168550 call postfix! cur[168376]) c"_next")
          (168558 'end of statement')
          (168567 call =(168563 call .(168561 call postfix! cur[168376]) c"_next") nil[44])
          unknown asTaskErr[168579](168577 call _cast unmanaged TaskErrors?[415538] cur[168376]) unmanaged TaskErrors?[415538]
          (168582 'end of statement')
          if(168678 call _cond_test(168585 call == asTaskErr[168579] nil[44]))
          {
            (168598 call(168591 call .(168590 call(388591 call . this[169662] c"errorsArray") idx[168536]) c"retain")(168595 call postfix! cur[168376]))
            (168603 call += idx[168536] 1)
          }
          {
            {
              unknown _indexOfInterest[168638] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[168639] "expr temp" "temp"
              (168648 'move' _iterator[168639](168646 call _getIterator(168614 call(168610 call .(168608 call postfix! asTaskErr[168579]) c"these"))))
              Defer
              {
                {
                  (168665 call _freeIterator _iterator[168639])
                }
              }
              { scopeless type
                (168654 'move' _indexOfInterest[168638](168651 call iteratorIndex _iterator[168639]))
              }
              ForLoop[168640]
              {
                unknown e[168658] "index var" "insert auto destroy"
                (168660 'move' e[168658] _indexOfInterest[168638])
                {
                  if(168633 call _cond_test(168617 call != e[168658] nil[44]))
                  {
                    (168624 call =(168622 call(388601 call . this[169662] c"errorsArray") idx[168536]) e[168658])
                    (168630 call += idx[168536] 1)
                  }
                }
                label _continueLabel[168643]
                _indexOfInterest[168638]
                _iterator[168639]
              }
              label _breakLabel[168644]
            }
            (168675 call chpl__delete asTaskErr[168579])
          }
          (168684 call = cur[168376] curnext[168555])
        }
        label _continueLabel[168690]
        (168701 'move' tmp[168687](168696 call _cond_test(168698 call != cur[168376] nil[44])))
        tmp[168687]
      }
      label _breakLabel[168691]
    }
  }
  function TaskErrors[169660].init[168723](arg _mt[169668]:_MT[238], arg this[169666]:TaskErrors[169660], arg err[168720] :
  unmanaged Error[415532]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168727 call =(388615 call . this[169666] c"nErrors") 1)
    (168740 call =(388620 call . this[169666] c"errorsArray")(168739 call c_calloc(168735 call _owned[30](?) borrowed Error?[415475]) 1))
    (168748 call(168744 call . this[169666] c"complete"))
    (168755 call =(168751 call . err[168720] c"_next") nil[44])
    (168767 call(168762 call .(168761 call(388627 call . this[169666] c"errorsArray") 0) c"retain") err[168720])
  }
  function TaskErrors[169660].init[168773](arg _mt[169672]:_MT[238], arg this[169670]:TaskErrors[169660]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168777 call =(388633 call . this[169670] c"nErrors") 0)
    (168783 call =(388638 call . this[169670] c"errorsArray") nil[44])
  }
  function TaskErrors[169660].deinit[168790](arg _mt[169676]:_MT[238], arg this[169674]:TaskErrors[169660]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(168857 call _cond_test(388643 call . this[169674] c"errorsArray"))
    {
      {
        unknown _indexOfInterest[168811] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[168812] "expr temp" "temp"
        (168821 'move' _iterator[168812](168819 call _getIterator(168828 call chpl_direct_counted_range_iter 0(388654 call . this[169674] c"nErrors"))))
        Defer
        {
          {
            (168844 call _freeIterator _iterator[168812])
          }
        }
        { scopeless type
          (168833 'move' _indexOfInterest[168811](168830 call iteratorIndex _iterator[168812]))
        }
        ForLoop[168813]
        {
          unknown i[168837] "index var" "insert auto destroy"
          (168839 'move' i[168837] _indexOfInterest[168811])
          {
            (168808 call(168804 call .(168803 call(388648 call . this[169674] c"errorsArray") i[168837]) c"clear"))
          }
          label _continueLabel[168816]
          _indexOfInterest[168811]
          _iterator[168812]
        }
        label _breakLabel[168817]
      }
      (168855 call c_free(388659 call . this[169674] c"errorsArray"))
    }
  }
  function TaskErrors[169660].these[168866](arg _mt[169680]:_MT[238], arg this[169678]:TaskErrors[169660]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[168898] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[168899] "expr temp" "temp"
      (168908 'move' _iterator[168899](168906 call _getIterator(168915 call chpl_direct_counted_range_iter 0(388678 call . this[169678] c"nErrors"))))
      Defer
      {
        {
          (168931 call _freeIterator _iterator[168899])
        }
      }
      { scopeless type
        (168920 'move' _indexOfInterest[168898](168917 call iteratorIndex _iterator[168899]))
      }
      ForLoop[168900]
      {
        unknown i[168924] "index var" "insert auto destroy"
        (168926 'move' i[168924] _indexOfInterest[168898])
        {
          if(168893 call _cond_test(168884 call !=(168882 call(388666 call . this[169678] c"errorsArray") i[168924]) nil[44]))
          {
            (168890 yield(168889 call(388672 call . this[169678] c"errorsArray") i[168924]))
          }
        }
        label _continueLabel[168903]
        _indexOfInterest[168898]
        _iterator[168899]
      }
      label _breakLabel[168904]
    }
  }
  { scopeless type
    (168870 call _owned[30](?) borrowed Error?[415475])
  }
  function TaskErrors[169660].first[168944](arg _mt[169684]:_MT[238], arg this[169682]:TaskErrors[169660]) ref : _unknown[51] "method" "primary method"
  {
    unknown first[168951] 0
    (168954 'end of statement')
    {
      unknown _indexOfInterest[168984] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[168985] "expr temp" "temp"
      (168994 'move' _iterator[168985](168992 call _getIterator(169001 call chpl_direct_counted_range_iter 0(388693 call . this[169682] c"nErrors"))))
      Defer
      {
        {
          (169017 call _freeIterator _iterator[168985])
        }
      }
      { scopeless type
        (169006 'move' _indexOfInterest[168984](169003 call iteratorIndex _iterator[168985]))
      }
      ForLoop[168986]
      {
        unknown i[169010] "index var" "insert auto destroy"
        (169012 'move' i[169010] _indexOfInterest[168984])
        {
          if(168979 call _cond_test(168968 call !=(168966 call(388685 call . this[169682] c"errorsArray") i[169010]) nil[44]))
          {
            (168972 call = first[168951] i[169010])
            break _breakLabel[168990] _breakLabel[168990]
          }
        }
        label _continueLabel[168989]
        _indexOfInterest[168984]
        _iterator[168985]
      }
      label _breakLabel[168990]
    }
    (169028 return(169027 call(388698 call . this[169682] c"errorsArray") first[168951]))
  }
  { scopeless type
    (168948 call _owned[30](?) borrowed Error?[415475])
  }
  function TaskErrors[169660].message[169035](arg _mt[169688]:_MT[238], arg this[169686]:TaskErrors[169660]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown n[169039] 0
    (169042 'end of statement')
    unknown minMsg[169045] string[26]
    (169048 'end of statement')
    unknown maxMsg[169050] string[26]
    (169053 'end of statement')
    unknown first[169057] borrowed Error?[415475]
    (169060 'end of statement')
    unknown last[169064] borrowed Error?[415475]
    (169067 'end of statement')
    {
      unknown _indexOfInterest[169179] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169180] "expr temp" "temp"
      (169189 'move' _iterator[169180](169187 call _getIterator(169071 call(388705 call . this[169686] c"these"))))
      Defer
      {
        {
          (169206 call _freeIterator _iterator[169180])
        }
      }
      { scopeless type
        (169195 'move' _indexOfInterest[169179](169192 call iteratorIndex _iterator[169180]))
      }
      ForLoop[169181]
      {
        unknown err[169199] "index var" "insert auto destroy"
        (169201 'move' err[169199] _indexOfInterest[169179])
        {
          unknown e[169075](169073 call postfix! err[169199])
          (169078 'end of statement')
          if(169123 call _cond_test(169111 call ||(169098 call == minMsg[169045] "")(169109 call <(169107 call(169103 call . e[169075] c"message")) minMsg[169045])))
          {
            (169120 call = minMsg[169045](169119 call(169115 call . e[169075] c"message")))
          }
          if(169169 call _cond_test(169157 call ||(169146 call == maxMsg[169050] "")(169155 call >(169153 call(169149 call . e[169075] c"message")) maxMsg[169050])))
          {
            (169166 call = maxMsg[169050](169165 call(169161 call . e[169075] c"message")))
          }
          (169176 call += n[169039] 1)
        }
        label _continueLabel[169184]
        _indexOfInterest[169179]
        _iterator[169180]
      }
      label _breakLabel[169185]
    }
    {
      {
        unknown _indexOfInterest[169258] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[169259] "expr temp" "temp"
        (169268 'move' _iterator[169259](169266 call _getIterator(169216 call(388717 call . this[169686] c"these"))))
        Defer
        {
          {
            (169285 call _freeIterator _iterator[169259])
          }
        }
        { scopeless type
          (169274 'move' _indexOfInterest[169258](169271 call iteratorIndex _iterator[169259]))
        }
        ForLoop[169260]
        {
          unknown err[169278] "index var" "insert auto destroy"
          (169280 'move' err[169278] _indexOfInterest[169258])
          {
            unknown e[169220](169218 call postfix! err[169278])
            (169223 'end of statement')
            if(169254 call _cond_test(169232 call ==(169230 call(169226 call . e[169220] c"message")) minMsg[169045]))
            {
              if(169243 call _cond_test(169236 call == first[169057] nil[44]))
              {
                (169240 call = first[169057] e[169220])
              }
              (169251 call = last[169064] e[169220])
            }
          }
          label _continueLabel[169263]
          _indexOfInterest[169258]
          _iterator[169259]
        }
        label _breakLabel[169264]
      }
      if(169363 call _cond_test(169295 call != minMsg[169045] maxMsg[169050]))
      {
        {
          unknown _indexOfInterest[169328] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[169329] "expr temp" "temp"
          (169338 'move' _iterator[169329](169336 call _getIterator(169300 call(388730 call . this[169686] c"these"))))
          Defer
          {
            {
              (169355 call _freeIterator _iterator[169329])
            }
          }
          { scopeless type
            (169344 'move' _indexOfInterest[169328](169341 call iteratorIndex _iterator[169329]))
          }
          ForLoop[169330]
          {
            unknown err[169348] "index var" "insert auto destroy"
            (169350 'move' err[169348] _indexOfInterest[169328])
            {
              unknown e[169304](169302 call postfix! err[169348])
              (169307 'end of statement')
              if(169324 call _cond_test(169316 call ==(169314 call(169310 call . e[169304] c"message")) maxMsg[169050]))
              {
                (169320 call = last[169064] e[169304])
              }
            }
            label _continueLabel[169333]
            _indexOfInterest[169328]
            _iterator[169329]
          }
          label _breakLabel[169334]
        }
      }
    }
    unknown ret[169390](169388 call +(169369 call _cast string[26] n[169039]) " errors: ")
    (169393 'end of statement')
    if(169466 call _cond_test(169408 call &&(169402 call &&(169396 call != first[169057] nil[44])(169400 call != last[169064] nil[44]))(169406 call != first[169057] last[169064])))
    {
      (169444 call += ret[169390](169442 call +(169434 call +(169416 call chpl_describe_error(169413 call postfix! first[169057])) " ... ")(169441 call chpl_describe_error(169438 call postfix! last[169064]))))
    }
    {
      if(169461 call _cond_test(169449 call != first[169057] nil[44]))
      {
        (169458 call += ret[169390](169457 call chpl_describe_error(169454 call postfix! first[169057])))
      }
    }
    (169473 return ret[169390])
  }
  { scopeless type
    string[26]
  }
  function TaskErrors[169660].filter[169482](arg _mt[169692]:_MT[238], arg this[169690]:TaskErrors[169660], arg t[169480]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[169535] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169536] "expr temp" "temp"
      (169545 'move' _iterator[169536](169543 call _getIterator(169501 call(388754 call . this[169690] c"these"))))
      Defer
      {
        {
          (169562 call _freeIterator _iterator[169536])
        }
      }
      { scopeless type
        (169551 'move' _indexOfInterest[169535](169548 call iteratorIndex _iterator[169536]))
      }
      ForLoop[169537]
      {
        unknown e[169555] "index var" "insert auto destroy"
        (169557 'move' e[169555] _indexOfInterest[169535])
        {
          unknown tmp[169521](169519 call _cast(169517 call _cast _borrowedNilable[217](?) t[169480])(169511 call _cast _borrowedNilable[217](?)(169507 call(169503 call . e[169555] c"borrow"))))
          (169524 'end of statement')
          if(169530 call _cond_test tmp[169521])
          {
            (169528 yield e[169555])
          }
        }
        label _continueLabel[169540]
        _indexOfInterest[169535]
        _iterator[169536]
      }
      label _breakLabel[169541]
    }
  }
  where {
    (354575 'is_subtype' Error[167942](169492 call _cast _borrowedNonNilable[214](?) t[169480]))
  }
  { scopeless type
    (169486 call _owned[30](?) borrowed Error?[415475])
  }
  function TaskErrors[169660].filter[169578](arg _mt[169696]:_MT[238], arg this[169694]:TaskErrors[169660], arg t[169576]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    (169599 call compilerError "Filtered iterator only supports subclasses of Error")
  }
  function TaskErrors[169660].contains[169608](arg _mt[169700]:_MT[238], arg this[169698]:TaskErrors[169660], arg t[169606]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[169619] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169620] "expr temp" "temp"
      (169629 'move' _iterator[169620](169627 call _getIterator(169614 call(388763 call . this[169698] c"filter") t[169606])))
      Defer
      {
        {
          (169646 call _freeIterator _iterator[169620])
        }
      }
      { scopeless type
        (169635 'move' _indexOfInterest[169619](169632 call iteratorIndex _iterator[169620]))
      }
      ForLoop[169621]
      {
        unknown e[169639] "index var" "insert auto destroy"
        (169641 'move' e[169639] _indexOfInterest[169619])
        {
          (169616 return 1)
        }
        label _continueLabel[169624]
        _indexOfInterest[169619]
        _iterator[169620]
      }
      label _breakLabel[169625]
    }
    (169655 return 0)
  }
  type TaskErrors[169660] val super[355765]:Error[167942] "super class" unknown nErrors[168321] "no doc" int(64)[13] unknown errorsArray[168332] "no doc"(168331 call c_ptr[205057](?)(168328 call _owned[30](?) borrowed Error?[415475]))
  type unmanaged TaskErrors?[415538]
  type TaskErrors?[415535](?)
  type TaskErrors[368245](?)
  function chpl_error_type_name[169710](arg err[169707] :
  Error[167942]) : _unknown[51] "no doc"
  {
    unknown cid[169733](169732 'getcid' err[169707])
    (169736 'end of statement')
    unknown nameC[169759](169758 'class name by id' cid[169733]) c_string[19]
    (169762 'end of statement')
    unknown nameS[169764] string[26]
    (169767 'end of statement')
    Try!
    {
      {
        (169773 call = nameS[169764](169772 call createStringWithNewBuffer nameC[169759]))
      }
    }
    (169781 return nameS[169764])
  }
  { scopeless type
    string[26]
  }
  function chpl_describe_error[169793](arg err[169790] :
  Error[167942]) : _unknown[51] "no doc"
  {
    unknown nameS[169800](169799 call chpl_error_type_name err[169790])
    (169803 'end of statement')
    unknown ret[169817](169815 call +(169807 call + nameS[169800] ": ")(169814 call(169810 call . err[169790] c"message")))
    (169820 'end of statement')
    (169822 return ret[169817])
  }
  { scopeless type
    string[26]
  }
  function chpl_do_fix_thrown_error[169835](arg err[169832] :
  unmanaged Error?[415401]) : _unknown[51] "always propagate line file info" "insert line file info" "no doc"
  {
    unknown fixErr[169843] err[169832] unmanaged Error?[415401]
    (169846 'end of statement')
    if(169862 call _cond_test(169850 call == fixErr[169843] nil[44]))
    {
      (169859 call = fixErr[169843](169855 'new'(_chpl_manager = unmanaged[220](?))(169858 call NilThrownError[388785](?))))
    }
    const line[169886] "const"(169885 '_get_user_line')
    (169889 'end of statement')
    const fileId[169909] "const"(169908 '_get_user_file')
    (169912 'end of statement')
    if(169958 call _cond_test(169921 call !(169918 call .(169914 call postfix! fixErr[169843]) c"_hasThrowInfo")))
    {
      (169930 call =(169926 call .(169924 call postfix! fixErr[169843]) c"_hasThrowInfo") 1)
      (169943 call =(169939 call .(169935 call postfix! fixErr[169843]) c"thrownLine") line[169886])
      (169955 call =(169951 call .(169947 call postfix! fixErr[169843]) c"thrownFileId") fileId[169909])
    }
    (169966 return(169965 call _to_nonnil fixErr[169843]))
  }
  { scopeless type
    unmanaged Error[415532]
  }
  function chpl_fix_thrown_error[169980](in arg err[169977] :
  (169975 call _owned[30](?) borrowed Error?[415475])) : _unknown[51] "always propagate line file info" "ignore in global analysis" "insert line file info" "no doc"
  {
    (169993 return(169992 call chpl_do_fix_thrown_error(169990 call(169986 call . err[169977] c"release"))))
  }
  { scopeless type
    unmanaged Error[415532]
  }
  function chpl_fix_thrown_error[170007](in arg err[170004] :
  (170002 call _owned[30](?) Error[167942])) : _unknown[51] "always propagate line file info" "ignore in global analysis" "insert line file info" "no doc" "ignore transfer errors"
  {
    (170020 return(170019 call chpl_do_fix_thrown_error(170017 call(170013 call . err[170004] c"release"))))
  }
  { scopeless type
    unmanaged Error[415532]
  }
  function chpl_fix_thrown_error[170032](arg err[170029] :
  _nilType[42]) : _unknown[51] "always propagate line file info" "insert line file info" "no doc"
  {
    (170038 return(170037 call chpl_do_fix_thrown_error nil[44]))
  }
  function chpl_fix_thrown_error[170047](arg err[170045]:_any[178](?)) : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    unknown t[170051] "type variable"(170050 'typeof' err[170045])
    if(170155 call _cond_test(354576 'is_coercible' borrowed Error?[415475] t[170051]))
    {
      (170103 call compilerError "Cannot throw an instance of type \'"(170083 call _cast string[26] t[170051]) "\' - please throw owned" 1)
    }
    {
      if(170151 call _cond_test(170109 call isClassType t[170051]))
      {
        (170137 call compilerError "Cannot throw an instance of type \'"(170118 call _cast string[26](170115 call _cast borrowed[211](?) t[170051])) "\', not a subtype of Error")
      }
      {
        (170148 call compilerError "Cannot throw an instance of type \'"(170145 call _cast string[26] t[170051]) "\', not a subtype of Error")
      }
    }
  }
  function chpl_fix_thrown_error[170166](arg errType[170164]:_any[178](?)) : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    (170208 call compilerError "Cannot throw a type: '"(170189 call _cast string[26] errType[170164]) "'. Did you forget the keyword 'new'\?")
  }
  function chpl_delete_error[170221](arg err[170218] :
  unmanaged Error?[415401]) : _unknown[51] "no doc" "no return value for void"
  {
    if(170232 call _cond_test(170225 call != err[170218] nil[44]))
    {
      (170229 call chpl__delete err[170218])
    }
  }
  function chpl_uncaught_error[170247](arg err[170244] :
  unmanaged Error[415532]) : _unknown[51] "always propagate line file info" "function terminates program" "insert line file info" "no doc" "no return value for void"
  {
    function chpl_error_preformatted[170253](arg c_string[170251]:_any[178](?)) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    const myFileC[170281] "const"(170280 'chpl_lookupFilename'(170279 '_get_user_file')) c_string[19]
    (170284 'end of statement')
    unknown myFileS[170286] string[26]
    (170289 'end of statement')
    Try!
    {
      {
        (170295 call = myFileS[170286](170294 call createStringWithNewBuffer myFileC[170281]))
      }
    }
    const myLine[170305] "const"(170304 '_get_user_line')
    (170308 'end of statement')
    const thrownFileC[170317] "const"(170316 'chpl_lookupFilename'(170313 call . err[170244] c"thrownFileId")) c_string[19]
    (170320 'end of statement')
    unknown thrownFileS[170322] string[26]
    (170325 'end of statement')
    Try!
    {
      {
        (170331 call = thrownFileS[170322](170330 call createStringWithNewBuffer thrownFileC[170317]))
      }
    }
    const thrownLine[170342] "const"(170339 call . err[170244] c"thrownLine")
    (170345 'end of statement')
    unknown s[170453](170451 call +(170432 call +(170426 call +(170423 call +(170420 call +(170417 call +(170398 call +(170392 call +(170389 call +(170386 call +(170367 call + "uncaught "(170366 call chpl_describe_error err[170244])) "\n  ") thrownFileS[170322]) ":")(170396 call _cast string[26] thrownLine[170342])) ": thrown here") "\n  ") myFileS[170286]) ":")(170430 call _cast string[26] myLine[170305])) ": uncaught here")
    (170456 'end of statement')
    (170465 call chpl_error_preformatted(170463 call(170459 call . s[170453] c"c_str")))
  }
  function chpl_propagate_error[170476](arg err[170473] :
  unmanaged Error[415532]) : _unknown[51] "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    (170481 call chpl_uncaught_error err[170473])
  }
  function chpl_forall_error[170493](arg err[170490] :
  unmanaged Error[415532]) : _unknown[51] "no doc"
  {
    if(170506 call _cond_test(170501 call _cast unmanaged TaskErrors?[415538] err[170490]))
    {
      (170504 return err[170490])
    }
    (170519 return(170514 'new'(_chpl_manager = unmanaged[220](?))(170518 call TaskErrors[368245](?) err[170490])))
  }
  { scopeless type
    unmanaged Error[415532]
  }
  function chpl_enum_cast_error[170530](arg casted[170527] :
  string[26], arg enumName[170533] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    if(170626 call _cond_test(170541 call(170537 call . casted[170527] c"isEmpty")))
    {
      (170571 'throw'(170544 'new'(_chpl_manager = _owned[30](?))(170570 call IllegalArgumentError[388835](?)(170567 call +(170564 call + "bad cast from empty string to enum '" enumName[170533]) "'"))))
    }
    {
      (170624 'throw'(170575 'new'(_chpl_manager = _owned[30](?))(170623 call IllegalArgumentError[388835](?)(170620 call +(170617 call +(170614 call +(170595 call + "bad cast from string '" casted[170527]) "' to enum '") enumName[170533]) "'"))))
    }
  }
  function chpl_enum_cast_error[170641](arg casted[170638] :
  integral[199](?), arg enumName[170644] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    (170683 'throw'(170649 'new'(_chpl_manager = _owned[30](?))(170682 call IllegalArgumentError[388835](?)(170678 call +(170675 call +(170672 call + "bad cast from int '"(170670 call _cast string[26] casted[170638])) "' to enum '") enumName[170644]) "'")))
  }
  function chpl_enum_cast_error_no_int[170694](arg enumName[170691] :
  string[26], arg constName[170697] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc"
  {
    (170767 'throw'(170702 'new'(_chpl_manager = _owned[30](?))(170766 call IllegalArgumentError[388835](?)(170763 call +(170744 call +(170741 call +(170722 call + "bad cast: enum '" enumName[170691]) ".") constName[170697]) "' has no integer value"))))
    (170771 return 0)
  }
  function chpl_enum_cast_error[170781](arg casted[170778] :
  bytes[24], arg enumName[170784] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    if(170872 call _cond_test(170792 call(170788 call . casted[170778] c"isEmpty")))
    {
      (170822 'throw'(170795 'new'(_chpl_manager = _owned[30](?))(170821 call IllegalArgumentError[388835](?)(170818 call +(170815 call + "bad cast from empty bytes to enum '" enumName[170784]) "'"))))
    }
    {
      (170870 'throw'(170826 'new'(_chpl_manager = _owned[30](?))(170869 call IllegalArgumentError[388835](?)(170866 call +(170863 call +(170860 call +(170857 call + "bad cast from bytes '"(170856 call(170846 call . casted[170778] c"decode") replace[173660])) "' to enum '") enumName[170784]) "'"))))
    }
  }
  (355233 'used modules list'(167859 'use' ChapelStandard[20264])(167863 'use' ChapelLocks[187268]))
}