AST dump for ChapelError after pass flattenClasses.
Module use list: ChapelStandard ChapelLocks 

{
  function Error[167984].init[167942](arg _mt[167988]:_MT[238], arg this[167986]:Error[167984]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (167946 call =(388491 call . this[167986] c"_next") nil[44])
  }
  function Error[167984].init[167958](arg _mt[167992]:_MT[238], arg this[167990]:Error[167984], arg msg[167955] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (167967 call =(167963 call . this[167990] c"_msg") msg[167955])
  }
  function Error[167984].message[167975](arg _mt[167996]:_MT[238], arg this[167994]:Error[167984]) : _unknown[51] "method" "primary method"
  {
    (167978 return(388497 call . this[167994] c"_msg"))
  }
  type Error[167984] val super[355736]:object[22] "super class" unknown _next[167912] "no doc" nil[44] unmanaged Error?[415381] unknown thrownLine[167917] "no doc" int(64)[13] unknown thrownFileId[167925] "no doc"(167924 call int(64)[13] 32) unknown _msg[167930] "no doc" string[26] unknown _hasThrowInfo[167936] "no doc" 0 bool[10]
  type unmanaged Error[415512]
  type borrowed Error?[415455]
  type unmanaged Error?[415381]
  type Error?[415378](?)
  type Error[368219](?)
  function NilThrownError[168029].message[168004](arg _mt[168033]:_MT[238], arg this[168031]:NilThrownError[168029]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168023 return "thrown error was nil")
  }
  type NilThrownError[168029] val super[355738]:Error[167984] "super class"
  type NilThrownError[388768](?)
  function NilClassError[168066].message[168041](arg _mt[168070]:_MT[238], arg this[168068]:NilClassError[168066]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168060 return "cannot convert nil class to non nilable type")
  }
  type NilClassError[168066] val super[355740]:Error[167984] "super class"
  type NilClassError[368325](?)
  function ClassCastError[168103].message[168078](arg _mt[168107]:_MT[238], arg this[168105]:ClassCastError[168103]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168097 return "cannot cast class to type - runtime types not compatible")
  }
  type ClassCastError[168103] val super[355742]:Error[167984] "super class"
  type ClassCastError[368350](?)
  function DecodeError[168140].message[168115](arg _mt[168144]:_MT[238], arg this[168142]:DecodeError[168140]) : _unknown[51] "method" "primary method" "no doc" "method overrides"
  {
    (168134 return "Invalid UTF-8 character encountered.")
  }
  type DecodeError[168140] val super[355744]:Error[167984] "super class"
  type unmanaged DecodeError?[415638]
  type unmanaged DecodeError[415635]
  type DecodeError[368787](?)
  function IllegalArgumentError[168246].init[168152](arg _mt[168250]:_MT[238], arg this[168248]:IllegalArgumentError[168246]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function IllegalArgumentError[168246].init[168163](arg _mt[168254]:_MT[238], arg this[168252]:IllegalArgumentError[168246], arg info[168160] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168171 call(168166 call .(361429 call . this[168252] c"super") c"init") info[168160])
  }
  function IllegalArgumentError[168246].init[168182](arg _mt[168258]:_MT[238], arg this[168256]:IllegalArgumentError[168246], arg formal[168179] :
  string[26], arg info[168185] :
  string[26]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown msg[168230](168228 call +(168225 call +(168206 call + "illegal argument '" formal[168179]) "': ") info[168185])
    (168233 'end of statement')
    (168241 call(168236 call .(361434 call . this[168256] c"super") c"init") msg[168230])
  }
  type IllegalArgumentError[168246] val super[355746]:Error[167984] "super class"
  type unmanaged IllegalArgumentError?[415656]
  type unmanaged IllegalArgumentError[415653]
  type IllegalArgumentError[388818](?)
  function chpl_TaskErrors[168348].append[168282](arg _mt[168352]:_MT[238], arg this[168350]:chpl_TaskErrors[168348], arg err[168279] :
  unmanaged Error[415512]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[168323] "const" "temp"
    (168325 'move' tmp[168323](168321 'deref'(168320 '_wide_get_locale' this[168350])))
    {
      {
        (168290 call(168286 call .(361441 call . this[168350] c"_errorsLock") c"lock"))
        unknown tmp[168294](388510 call . this[168350] c"_head")
        (168297 'end of statement')
        (168305 call =(168301 call . err[168279] c"_next") tmp[168294])
        (168310 call =(388516 call . this[168350] c"_head") err[168279])
        (168318 call(168314 call .(361447 call . this[168350] c"_errorsLock") c"unlock"))
      }
      (168328 'on block' 0 tmp[168323])
    }
  }
  function chpl_TaskErrors[168348].empty[168336](arg _mt[168356]:_MT[238], arg this[168354]:chpl_TaskErrors[168348]) : _unknown[51] "method" "primary method"
  {
    (168342 return(168340 call ==(388522 call . this[168354] c"_head") nil[44]))
  }
  type chpl_TaskErrors[168348] unknown _head[168266] nil[44] unmanaged Error?[415381] unknown _errorsLock[168271] chpl_LocalSpinlock[187432]
  function TaskErrors[169702].init[168384](arg _mt[169706]:_MT[238], arg this[169704]:TaskErrors[169702], ref arg group[168381] :
  chpl_TaskErrors[168348]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown head[168395](168392 call . group[168381] c"_head") unmanaged Error?[415381]
    (168398 'end of statement')
    (168405 call =(168401 call . group[168381] c"_head") nil[44])
    (168413 call(168409 call . this[169704] c"complete"))
    unknown cur[168418] unmanaged Error?[415381]
    (168421 'end of statement')
    unknown n[168423] 0
    (168426 'end of statement')
    (168429 call = cur[168418] head[168395])
    {
      unknown tmp[168533] "temp"
      (168557 'move' tmp[168533](168552 call _cond_test(168554 call != cur[168418] nil[44])))
      WhileDo[168538]
      {
        {
          unknown curnext[168442](168439 call .(168437 call postfix! cur[168418]) c"_next")
          (168445 'end of statement')
          unknown asTaskErr[168456](168454 call _cast unmanaged TaskErrors?[415518] cur[168418]) unmanaged TaskErrors?[415518]
          (168459 'end of statement')
          if(168524 call _cond_test(168462 call == asTaskErr[168456] nil[44]))
          {
            (168466 call += n[168423] 1)
          }
          {
            {
              unknown _indexOfInterest[168489] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[168490] "expr temp" "temp"
              (168499 'move' _iterator[168490](168497 call _getIterator(168472 call postfix! asTaskErr[168456])))
              Defer
              {
                {
                  (168516 call _freeIterator _iterator[168490])
                }
              }
              { scopeless type
                (168505 'move' _indexOfInterest[168489](168502 call iteratorIndex _iterator[168490]))
              }
              ForLoop[168491]
              {
                unknown e[168509] "index var" "insert auto destroy"
                (168511 'move' e[168509] _indexOfInterest[168489])
                {
                  if(168483 call _cond_test(168476 call != e[168509] nil[44]))
                  {
                    (168480 call += n[168423] 1)
                  }
                }
                label _continueLabel[168494]
                _indexOfInterest[168489]
                _iterator[168490]
              }
              label _breakLabel[168495]
            }
          }
          (168530 call = cur[168418] curnext[168442])
        }
        label _continueLabel[168536]
        (168547 'move' tmp[168533](168542 call _cond_test(168544 call != cur[168418] nil[44])))
        tmp[168533]
      }
      label _breakLabel[168537]
    }
    (168562 call =(388550 call . this[169704] c"nErrors") n[168423])
    (168574 call =(388558 call . this[169704] c"errorsArray")(168573 call c_calloc(168569 call _owned[30](?) borrowed Error?[415455]) n[168423]))
    unknown idx[168578] 0
    (168581 'end of statement')
    (168584 call = cur[168418] head[168395])
    {
      unknown tmp[168729] "temp"
      (168753 'move' tmp[168729](168748 call _cond_test(168750 call != cur[168418] nil[44])))
      WhileDo[168734]
      {
        {
          unknown curnext[168597](168594 call .(168592 call postfix! cur[168418]) c"_next")
          (168600 'end of statement')
          (168609 call =(168605 call .(168603 call postfix! cur[168418]) c"_next") nil[44])
          unknown asTaskErr[168621](168619 call _cast unmanaged TaskErrors?[415518] cur[168418]) unmanaged TaskErrors?[415518]
          (168624 'end of statement')
          if(168720 call _cond_test(168627 call == asTaskErr[168621] nil[44]))
          {
            (168640 call(168633 call .(168632 call(388574 call . this[169704] c"errorsArray") idx[168578]) c"retain")(168637 call postfix! cur[168418]))
            (168645 call += idx[168578] 1)
          }
          {
            {
              unknown _indexOfInterest[168680] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[168681] "expr temp" "temp"
              (168690 'move' _iterator[168681](168688 call _getIterator(168656 call(168652 call .(168650 call postfix! asTaskErr[168621]) c"these"))))
              Defer
              {
                {
                  (168707 call _freeIterator _iterator[168681])
                }
              }
              { scopeless type
                (168696 'move' _indexOfInterest[168680](168693 call iteratorIndex _iterator[168681]))
              }
              ForLoop[168682]
              {
                unknown e[168700] "index var" "insert auto destroy"
                (168702 'move' e[168700] _indexOfInterest[168680])
                {
                  if(168675 call _cond_test(168659 call != e[168700] nil[44]))
                  {
                    (168666 call =(168664 call(388584 call . this[169704] c"errorsArray") idx[168578]) e[168700])
                    (168672 call += idx[168578] 1)
                  }
                }
                label _continueLabel[168685]
                _indexOfInterest[168680]
                _iterator[168681]
              }
              label _breakLabel[168686]
            }
            (168717 call chpl__delete asTaskErr[168621])
          }
          (168726 call = cur[168418] curnext[168597])
        }
        label _continueLabel[168732]
        (168743 'move' tmp[168729](168738 call _cond_test(168740 call != cur[168418] nil[44])))
        tmp[168729]
      }
      label _breakLabel[168733]
    }
  }
  function TaskErrors[169702].init[168765](arg _mt[169710]:_MT[238], arg this[169708]:TaskErrors[169702], arg err[168762] :
  unmanaged Error[415512]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168769 call =(388598 call . this[169708] c"nErrors") 1)
    (168782 call =(388603 call . this[169708] c"errorsArray")(168781 call c_calloc(168777 call _owned[30](?) borrowed Error?[415455]) 1))
    (168790 call(168786 call . this[169708] c"complete"))
    (168797 call =(168793 call . err[168762] c"_next") nil[44])
    (168809 call(168804 call .(168803 call(388610 call . this[169708] c"errorsArray") 0) c"retain") err[168762])
  }
  function TaskErrors[169702].init[168815](arg _mt[169714]:_MT[238], arg this[169712]:TaskErrors[169702]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (168819 call =(388616 call . this[169712] c"nErrors") 0)
    (168825 call =(388621 call . this[169712] c"errorsArray") nil[44])
  }
  function TaskErrors[169702].deinit[168832](arg _mt[169718]:_MT[238], arg this[169716]:TaskErrors[169702]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(168899 call _cond_test(388626 call . this[169716] c"errorsArray"))
    {
      {
        unknown _indexOfInterest[168853] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[168854] "expr temp" "temp"
        (168863 'move' _iterator[168854](168861 call _getIterator(168870 call chpl_direct_counted_range_iter 0(388637 call . this[169716] c"nErrors"))))
        Defer
        {
          {
            (168886 call _freeIterator _iterator[168854])
          }
        }
        { scopeless type
          (168875 'move' _indexOfInterest[168853](168872 call iteratorIndex _iterator[168854]))
        }
        ForLoop[168855]
        {
          unknown i[168879] "index var" "insert auto destroy"
          (168881 'move' i[168879] _indexOfInterest[168853])
          {
            (168850 call(168846 call .(168845 call(388631 call . this[169716] c"errorsArray") i[168879]) c"clear"))
          }
          label _continueLabel[168858]
          _indexOfInterest[168853]
          _iterator[168854]
        }
        label _breakLabel[168859]
      }
      (168897 call c_free(388642 call . this[169716] c"errorsArray"))
    }
  }
  function TaskErrors[169702].these[168908](arg _mt[169722]:_MT[238], arg this[169720]:TaskErrors[169702]) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[168940] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[168941] "expr temp" "temp"
      (168950 'move' _iterator[168941](168948 call _getIterator(168957 call chpl_direct_counted_range_iter 0(388661 call . this[169720] c"nErrors"))))
      Defer
      {
        {
          (168973 call _freeIterator _iterator[168941])
        }
      }
      { scopeless type
        (168962 'move' _indexOfInterest[168940](168959 call iteratorIndex _iterator[168941]))
      }
      ForLoop[168942]
      {
        unknown i[168966] "index var" "insert auto destroy"
        (168968 'move' i[168966] _indexOfInterest[168940])
        {
          if(168935 call _cond_test(168926 call !=(168924 call(388649 call . this[169720] c"errorsArray") i[168966]) nil[44]))
          {
            (168932 yield(168931 call(388655 call . this[169720] c"errorsArray") i[168966]))
          }
        }
        label _continueLabel[168945]
        _indexOfInterest[168940]
        _iterator[168941]
      }
      label _breakLabel[168946]
    }
  }
  { scopeless type
    (168912 call _owned[30](?) borrowed Error?[415455])
  }
  function TaskErrors[169702].first[168986](arg _mt[169726]:_MT[238], arg this[169724]:TaskErrors[169702]) ref : _unknown[51] "method" "primary method"
  {
    unknown first[168993] 0
    (168996 'end of statement')
    {
      unknown _indexOfInterest[169026] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169027] "expr temp" "temp"
      (169036 'move' _iterator[169027](169034 call _getIterator(169043 call chpl_direct_counted_range_iter 0(388676 call . this[169724] c"nErrors"))))
      Defer
      {
        {
          (169059 call _freeIterator _iterator[169027])
        }
      }
      { scopeless type
        (169048 'move' _indexOfInterest[169026](169045 call iteratorIndex _iterator[169027]))
      }
      ForLoop[169028]
      {
        unknown i[169052] "index var" "insert auto destroy"
        (169054 'move' i[169052] _indexOfInterest[169026])
        {
          if(169021 call _cond_test(169010 call !=(169008 call(388668 call . this[169724] c"errorsArray") i[169052]) nil[44]))
          {
            (169014 call = first[168993] i[169052])
            break _breakLabel[169032] _breakLabel[169032]
          }
        }
        label _continueLabel[169031]
        _indexOfInterest[169026]
        _iterator[169027]
      }
      label _breakLabel[169032]
    }
    (169070 return(169069 call(388681 call . this[169724] c"errorsArray") first[168993]))
  }
  { scopeless type
    (168990 call _owned[30](?) borrowed Error?[415455])
  }
  function TaskErrors[169702].message[169077](arg _mt[169730]:_MT[238], arg this[169728]:TaskErrors[169702]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown n[169081] 0
    (169084 'end of statement')
    unknown minMsg[169087] string[26]
    (169090 'end of statement')
    unknown maxMsg[169092] string[26]
    (169095 'end of statement')
    unknown first[169099] borrowed Error?[415455]
    (169102 'end of statement')
    unknown last[169106] borrowed Error?[415455]
    (169109 'end of statement')
    {
      unknown _indexOfInterest[169221] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169222] "expr temp" "temp"
      (169231 'move' _iterator[169222](169229 call _getIterator(169113 call(388688 call . this[169728] c"these"))))
      Defer
      {
        {
          (169248 call _freeIterator _iterator[169222])
        }
      }
      { scopeless type
        (169237 'move' _indexOfInterest[169221](169234 call iteratorIndex _iterator[169222]))
      }
      ForLoop[169223]
      {
        unknown err[169241] "index var" "insert auto destroy"
        (169243 'move' err[169241] _indexOfInterest[169221])
        {
          unknown e[169117](169115 call postfix! err[169241])
          (169120 'end of statement')
          if(169165 call _cond_test(169153 call ||(169140 call == minMsg[169087] "")(169151 call <(169149 call(169145 call . e[169117] c"message")) minMsg[169087])))
          {
            (169162 call = minMsg[169087](169161 call(169157 call . e[169117] c"message")))
          }
          if(169211 call _cond_test(169199 call ||(169188 call == maxMsg[169092] "")(169197 call >(169195 call(169191 call . e[169117] c"message")) maxMsg[169092])))
          {
            (169208 call = maxMsg[169092](169207 call(169203 call . e[169117] c"message")))
          }
          (169218 call += n[169081] 1)
        }
        label _continueLabel[169226]
        _indexOfInterest[169221]
        _iterator[169222]
      }
      label _breakLabel[169227]
    }
    {
      {
        unknown _indexOfInterest[169300] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[169301] "expr temp" "temp"
        (169310 'move' _iterator[169301](169308 call _getIterator(169258 call(388700 call . this[169728] c"these"))))
        Defer
        {
          {
            (169327 call _freeIterator _iterator[169301])
          }
        }
        { scopeless type
          (169316 'move' _indexOfInterest[169300](169313 call iteratorIndex _iterator[169301]))
        }
        ForLoop[169302]
        {
          unknown err[169320] "index var" "insert auto destroy"
          (169322 'move' err[169320] _indexOfInterest[169300])
          {
            unknown e[169262](169260 call postfix! err[169320])
            (169265 'end of statement')
            if(169296 call _cond_test(169274 call ==(169272 call(169268 call . e[169262] c"message")) minMsg[169087]))
            {
              if(169285 call _cond_test(169278 call == first[169099] nil[44]))
              {
                (169282 call = first[169099] e[169262])
              }
              (169293 call = last[169106] e[169262])
            }
          }
          label _continueLabel[169305]
          _indexOfInterest[169300]
          _iterator[169301]
        }
        label _breakLabel[169306]
      }
      if(169405 call _cond_test(169337 call != minMsg[169087] maxMsg[169092]))
      {
        {
          unknown _indexOfInterest[169370] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[169371] "expr temp" "temp"
          (169380 'move' _iterator[169371](169378 call _getIterator(169342 call(388713 call . this[169728] c"these"))))
          Defer
          {
            {
              (169397 call _freeIterator _iterator[169371])
            }
          }
          { scopeless type
            (169386 'move' _indexOfInterest[169370](169383 call iteratorIndex _iterator[169371]))
          }
          ForLoop[169372]
          {
            unknown err[169390] "index var" "insert auto destroy"
            (169392 'move' err[169390] _indexOfInterest[169370])
            {
              unknown e[169346](169344 call postfix! err[169390])
              (169349 'end of statement')
              if(169366 call _cond_test(169358 call ==(169356 call(169352 call . e[169346] c"message")) maxMsg[169092]))
              {
                (169362 call = last[169106] e[169346])
              }
            }
            label _continueLabel[169375]
            _indexOfInterest[169370]
            _iterator[169371]
          }
          label _breakLabel[169376]
        }
      }
    }
    unknown ret[169432](169430 call +(169411 call _cast string[26] n[169081]) " errors: ")
    (169435 'end of statement')
    if(169508 call _cond_test(169450 call &&(169444 call &&(169438 call != first[169099] nil[44])(169442 call != last[169106] nil[44]))(169448 call != first[169099] last[169106])))
    {
      (169486 call += ret[169432](169484 call +(169476 call +(169458 call chpl_describe_error(169455 call postfix! first[169099])) " ... ")(169483 call chpl_describe_error(169480 call postfix! last[169106]))))
    }
    {
      if(169503 call _cond_test(169491 call != first[169099] nil[44]))
      {
        (169500 call += ret[169432](169499 call chpl_describe_error(169496 call postfix! first[169099])))
      }
    }
    (169515 return ret[169432])
  }
  { scopeless type
    string[26]
  }
  function TaskErrors[169702].filter[169524](arg _mt[169734]:_MT[238], arg this[169732]:TaskErrors[169702], arg t[169522]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[169577] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169578] "expr temp" "temp"
      (169587 'move' _iterator[169578](169585 call _getIterator(169543 call(388737 call . this[169732] c"these"))))
      Defer
      {
        {
          (169604 call _freeIterator _iterator[169578])
        }
      }
      { scopeless type
        (169593 'move' _indexOfInterest[169577](169590 call iteratorIndex _iterator[169578]))
      }
      ForLoop[169579]
      {
        unknown e[169597] "index var" "insert auto destroy"
        (169599 'move' e[169597] _indexOfInterest[169577])
        {
          unknown tmp[169563](169561 call _cast(169559 call _cast _borrowedNilable[217](?) t[169522])(169553 call _cast _borrowedNilable[217](?)(169549 call(169545 call . e[169597] c"borrow"))))
          (169566 'end of statement')
          if(169572 call _cond_test tmp[169563])
          {
            (169570 yield e[169597])
          }
        }
        label _continueLabel[169582]
        _indexOfInterest[169577]
        _iterator[169578]
      }
      label _breakLabel[169583]
    }
  }
  where {
    (354558 'is_subtype' Error[167984](169534 call _cast _borrowedNonNilable[214](?) t[169522]))
  }
  { scopeless type
    (169528 call _owned[30](?) borrowed Error?[415455])
  }
  function TaskErrors[169702].filter[169620](arg _mt[169738]:_MT[238], arg this[169736]:TaskErrors[169702], arg t[169618]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    (169641 call compilerError "Filtered iterator only supports subclasses of Error")
  }
  function TaskErrors[169702].contains[169650](arg _mt[169742]:_MT[238], arg this[169740]:TaskErrors[169702], arg t[169648]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[169661] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[169662] "expr temp" "temp"
      (169671 'move' _iterator[169662](169669 call _getIterator(169656 call(388746 call . this[169740] c"filter") t[169648])))
      Defer
      {
        {
          (169688 call _freeIterator _iterator[169662])
        }
      }
      { scopeless type
        (169677 'move' _indexOfInterest[169661](169674 call iteratorIndex _iterator[169662]))
      }
      ForLoop[169663]
      {
        unknown e[169681] "index var" "insert auto destroy"
        (169683 'move' e[169681] _indexOfInterest[169661])
        {
          (169658 return 1)
        }
        label _continueLabel[169666]
        _indexOfInterest[169661]
        _iterator[169662]
      }
      label _breakLabel[169667]
    }
    (169697 return 0)
  }
  type TaskErrors[169702] val super[355748]:Error[167984] "super class" unknown nErrors[168363] "no doc" int(64)[13] unknown errorsArray[168374] "no doc"(168373 call c_ptr[205100](?)(168370 call _owned[30](?) borrowed Error?[415455]))
  type unmanaged TaskErrors?[415518]
  type TaskErrors?[415515](?)
  type TaskErrors[368228](?)
  function chpl_error_type_name[169752](arg err[169749] :
  Error[167984]) : _unknown[51] "no doc"
  {
    unknown cid[169775](169774 'getcid' err[169749])
    (169778 'end of statement')
    unknown nameC[169801](169800 'class name by id' cid[169775]) c_string[19]
    (169804 'end of statement')
    unknown nameS[169806] string[26]
    (169809 'end of statement')
    Try!
    {
      {
        (169815 call = nameS[169806](169814 call createStringWithNewBuffer nameC[169801]))
      }
    }
    (169823 return nameS[169806])
  }
  { scopeless type
    string[26]
  }
  function chpl_describe_error[169835](arg err[169832] :
  Error[167984]) : _unknown[51] "no doc"
  {
    unknown nameS[169842](169841 call chpl_error_type_name err[169832])
    (169845 'end of statement')
    unknown ret[169859](169857 call +(169849 call + nameS[169842] ": ")(169856 call(169852 call . err[169832] c"message")))
    (169862 'end of statement')
    (169864 return ret[169859])
  }
  { scopeless type
    string[26]
  }
  function chpl_do_fix_thrown_error[169877](arg err[169874] :
  unmanaged Error?[415381]) : _unknown[51] "always propagate line file info" "insert line file info" "no doc"
  {
    unknown fixErr[169885] err[169874] unmanaged Error?[415381]
    (169888 'end of statement')
    if(169904 call _cond_test(169892 call == fixErr[169885] nil[44]))
    {
      (169901 call = fixErr[169885](169897 'new'(_chpl_manager = unmanaged[220](?))(169900 call NilThrownError[388768](?))))
    }
    const line[169928] "const"(169927 '_get_user_line')
    (169931 'end of statement')
    const fileId[169951] "const"(169950 '_get_user_file')
    (169954 'end of statement')
    if(170000 call _cond_test(169963 call !(169960 call .(169956 call postfix! fixErr[169885]) c"_hasThrowInfo")))
    {
      (169972 call =(169968 call .(169966 call postfix! fixErr[169885]) c"_hasThrowInfo") 1)
      (169985 call =(169981 call .(169977 call postfix! fixErr[169885]) c"thrownLine") line[169928])
      (169997 call =(169993 call .(169989 call postfix! fixErr[169885]) c"thrownFileId") fileId[169951])
    }
    (170008 return(170007 call _to_nonnil fixErr[169885]))
  }
  { scopeless type
    unmanaged Error[415512]
  }
  function chpl_fix_thrown_error[170022](in arg err[170019] :
  (170017 call _owned[30](?) borrowed Error?[415455])) : _unknown[51] "always propagate line file info" "ignore in global analysis" "insert line file info" "no doc"
  {
    (170035 return(170034 call chpl_do_fix_thrown_error(170032 call(170028 call . err[170019] c"release"))))
  }
  { scopeless type
    unmanaged Error[415512]
  }
  function chpl_fix_thrown_error[170049](in arg err[170046] :
  (170044 call _owned[30](?) Error[167984])) : _unknown[51] "always propagate line file info" "ignore in global analysis" "insert line file info" "no doc" "ignore transfer errors"
  {
    (170062 return(170061 call chpl_do_fix_thrown_error(170059 call(170055 call . err[170046] c"release"))))
  }
  { scopeless type
    unmanaged Error[415512]
  }
  function chpl_fix_thrown_error[170074](arg err[170071] :
  _nilType[42]) : _unknown[51] "always propagate line file info" "insert line file info" "no doc"
  {
    (170080 return(170079 call chpl_do_fix_thrown_error nil[44]))
  }
  function chpl_fix_thrown_error[170089](arg err[170087]:_any[178](?)) : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    unknown t[170093] "type variable"(170092 'typeof' err[170087])
    if(170197 call _cond_test(354559 'is_coercible' borrowed Error?[415455] t[170093]))
    {
      (170145 call compilerError "Cannot throw an instance of type \'"(170125 call _cast string[26] t[170093]) "\' - please throw owned" 1)
    }
    {
      if(170193 call _cond_test(170151 call isClassType t[170093]))
      {
        (170179 call compilerError "Cannot throw an instance of type \'"(170160 call _cast string[26](170157 call _cast borrowed[211](?) t[170093])) "\', not a subtype of Error")
      }
      {
        (170190 call compilerError "Cannot throw an instance of type \'"(170187 call _cast string[26] t[170093]) "\', not a subtype of Error")
      }
    }
  }
  function chpl_fix_thrown_error[170208](arg errType[170206]:_any[178](?)) : _unknown[51] "last resort" "no doc" "no return value for void"
  {
    (170250 call compilerError "Cannot throw a type: '"(170231 call _cast string[26] errType[170206]) "'. Did you forget the keyword 'new'\?")
  }
  function chpl_delete_error[170263](arg err[170260] :
  unmanaged Error?[415381]) : _unknown[51] "no doc" "no return value for void"
  {
    if(170274 call _cond_test(170267 call != err[170260] nil[44]))
    {
      (170271 call chpl__delete err[170260])
    }
  }
  function chpl_uncaught_error[170289](arg err[170286] :
  unmanaged Error[415512]) : _unknown[51] "always propagate line file info" "function terminates program" "insert line file info" "no doc" "no return value for void"
  {
    function chpl_error_preformatted[170295](arg c_string[170293]:_any[178](?)) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    const myFileC[170323] "const"(170322 'chpl_lookupFilename'(170321 '_get_user_file')) c_string[19]
    (170326 'end of statement')
    unknown myFileS[170328] string[26]
    (170331 'end of statement')
    Try!
    {
      {
        (170337 call = myFileS[170328](170336 call createStringWithNewBuffer myFileC[170323]))
      }
    }
    const myLine[170347] "const"(170346 '_get_user_line')
    (170350 'end of statement')
    const thrownFileC[170359] "const"(170358 'chpl_lookupFilename'(170355 call . err[170286] c"thrownFileId")) c_string[19]
    (170362 'end of statement')
    unknown thrownFileS[170364] string[26]
    (170367 'end of statement')
    Try!
    {
      {
        (170373 call = thrownFileS[170364](170372 call createStringWithNewBuffer thrownFileC[170359]))
      }
    }
    const thrownLine[170384] "const"(170381 call . err[170286] c"thrownLine")
    (170387 'end of statement')
    unknown s[170495](170493 call +(170474 call +(170468 call +(170465 call +(170462 call +(170459 call +(170440 call +(170434 call +(170431 call +(170428 call +(170409 call + "uncaught "(170408 call chpl_describe_error err[170286])) "\n  ") thrownFileS[170364]) ":")(170438 call _cast string[26] thrownLine[170384])) ": thrown here") "\n  ") myFileS[170328]) ":")(170472 call _cast string[26] myLine[170347])) ": uncaught here")
    (170498 'end of statement')
    (170507 call chpl_error_preformatted(170505 call(170501 call . s[170495] c"c_str")))
  }
  function chpl_propagate_error[170518](arg err[170515] :
  unmanaged Error[415512]) : _unknown[51] "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    (170523 call chpl_uncaught_error err[170515])
  }
  function chpl_forall_error[170535](arg err[170532] :
  unmanaged Error[415512]) : _unknown[51] "no doc"
  {
    if(170548 call _cond_test(170543 call _cast unmanaged TaskErrors?[415518] err[170532]))
    {
      (170546 return err[170532])
    }
    (170561 return(170556 'new'(_chpl_manager = unmanaged[220](?))(170560 call TaskErrors[368228](?) err[170532])))
  }
  { scopeless type
    unmanaged Error[415512]
  }
  function chpl_enum_cast_error[170572](arg casted[170569] :
  string[26], arg enumName[170575] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    if(170668 call _cond_test(170583 call(170579 call . casted[170569] c"isEmpty")))
    {
      (170613 'throw'(170586 'new'(_chpl_manager = _owned[30](?))(170612 call IllegalArgumentError[388818](?)(170609 call +(170606 call + "bad cast from empty string to enum '" enumName[170575]) "'"))))
    }
    {
      (170666 'throw'(170617 'new'(_chpl_manager = _owned[30](?))(170665 call IllegalArgumentError[388818](?)(170662 call +(170659 call +(170656 call +(170637 call + "bad cast from string '" casted[170569]) "' to enum '") enumName[170575]) "'"))))
    }
  }
  function chpl_enum_cast_error[170683](arg casted[170680] :
  integral[199](?), arg enumName[170686] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    (170725 'throw'(170691 'new'(_chpl_manager = _owned[30](?))(170724 call IllegalArgumentError[388818](?)(170720 call +(170717 call +(170714 call + "bad cast from int '"(170712 call _cast string[26] casted[170680])) "' to enum '") enumName[170686]) "'")))
  }
  function chpl_enum_cast_error_no_int[170736](arg enumName[170733] :
  string[26], arg constName[170739] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc"
  {
    (170809 'throw'(170744 'new'(_chpl_manager = _owned[30](?))(170808 call IllegalArgumentError[388818](?)(170805 call +(170786 call +(170783 call +(170764 call + "bad cast: enum '" enumName[170733]) ".") constName[170739]) "' has no integer value"))))
    (170813 return 0)
  }
  function chpl_enum_cast_error[170823](arg casted[170820] :
  bytes[24], arg enumName[170826] :
  string[26]) : _unknown[51] throws "always propagate line file info" "insert line file info" "no doc" "no return value for void"
  {
    if(170914 call _cond_test(170834 call(170830 call . casted[170820] c"isEmpty")))
    {
      (170864 'throw'(170837 'new'(_chpl_manager = _owned[30](?))(170863 call IllegalArgumentError[388818](?)(170860 call +(170857 call + "bad cast from empty bytes to enum '" enumName[170826]) "'"))))
    }
    {
      (170912 'throw'(170868 'new'(_chpl_manager = _owned[30](?))(170911 call IllegalArgumentError[388818](?)(170908 call +(170905 call +(170902 call +(170899 call + "bad cast from bytes '"(170898 call(170888 call . casted[170820] c"decode") replace[173694])) "' to enum '") enumName[170826]) "'"))))
    }
  }
  (355216 'used modules list'(167901 'use' ChapelStandard[20267])(167905 'use' ChapelLocks[187302]))
}