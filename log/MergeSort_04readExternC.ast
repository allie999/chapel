AST dump for MergeSort after pass readExternC.
Module use list: 

{
  (352940 'use' ChapelStandard)
  (271109 'use' Sort)
  function mergeSort[271124](arg Data[271121] :
  (271119 call chpl__buildArrayRuntimeType unknown Dom[271114] unknown eltType[271117]), arg minlen[271127] =
  16, arg comparator[271133] :
  unknown rec[271130] =
  defaultComparator) : _unknown[51]
  {
    (271141 call chpl_check_comparator comparator eltType)
    if(271173 call _cond_test(271149 call !=(271145 call . Dom c"rank") 1))
    {
      (271170 call compilerError "mergeSort() requires 1-D array")
    }
    { scopeless
      unknown Scratch[271179](271178 'typeof' Data)
      (271182 'end of statement')
    }
    (271198 call _MergeSort Data Scratch(271188 call . Dom c"alignedLow")(271192 call . Dom c"alignedHigh") minlen comparator 0)
  }
  function _MergeSort[271212](arg Data[271209] :
  (271207 call chpl__buildArrayRuntimeType unknown Dom[271204]), arg Scratch[271217] :
  (271214 call chpl__buildArrayRuntimeType nil[44]), arg lo[271221] :
  int[13], arg hi[271225] :
  int[13], arg minlen[271229] =
  16, arg comparator[271235] :
  unknown rec[271232] =
  defaultComparator, arg depth[271240] :
  int[13]) : _unknown[51] "private"
  {
    (271256 'import'(271253 call . Sort c"InsertionSort"))
    { scopeless
      const stride[271274] "const"(271271 IfExpr (271260 call . Dom c"stridable") then
      { scopeless
        (271269 call abs(271265 call . Dom c"stride"))
      } else
      { scopeless
        1
      } )
      const size[271284] "const"(271282 call /(271279 call - hi lo) stride)
      const mid[271297] "const"(271295 call + lo(271293 call *(271290 call / size 2) stride))
      (271300 'end of statement')
    }
    if(271411 call _cond_test(271327 call ||(271306 call <(271303 call + size 1) minlen)(271325 call &&(271313 call ==(271310 call & depth 1) 0)(271323 call <(271317 call + size 1)(271321 call * 2 minlen)))))
    {
      (271341 call(271332 call . InsertionSort c"insertionSort") Data(comparator = comparator) lo hi)
      if(271405 call _cond_test(271346 call & depth 1))
      {
        if(271398 call _cond_test(271349 call . Dom c"stridable"))
        {
          { scopeless
            (271378 call =(271364 call Scratch(271361 call chpl_by(271355 call chpl_build_bounded_range lo hi)(271358 call . Dom c"stride")))(271377 call Data(271374 call chpl_by(271368 call chpl_build_bounded_range lo hi)(271371 call . Dom c"stride"))))
          }
        }
        {
          { scopeless
            (271395 call =(271387 call Scratch(271384 call chpl_build_bounded_range lo hi))(271394 call Data(271391 call chpl_build_bounded_range lo hi)))
          }
        }
      }
      (271409 return)
    }
    if(271532 call _cond_test(271429 call <(271420 call(271416 call . here c"runningTasks"))(271428 call(271422 call . here c"numPUs")(logical = 1))))
    {
      {
        const _cobeginCount[271465] "const" "end count" "temp"
        (271486 'move' _cobeginCount[271465](271483 call _endCountAlloc 1))
        (271478 call _upEndCount _cobeginCount[271465] 1 2)
        {
          {
            (271443 call _MergeSort Data Scratch lo mid minlen comparator(271441 call + depth 1))
          }
          (271468 call _downEndCount _cobeginCount[271465] nil[44])
          (271467 'cobegin block')
        }
        {
          {
            (271462 call _MergeSort Data Scratch(271453 call + mid stride) hi minlen comparator(271460 call + depth 1))
          }
          (271474 call _downEndCount _cobeginCount[271465] nil[44])
          (271473 'cobegin block')
        }
        Defer
        {
          {
            (271489 call _endCountFree _cobeginCount[271465])
          }
        }
        (271494 call _waitEndCount _cobeginCount[271465] 1 2)
      }
    }
    {
      (271512 call _MergeSort Data Scratch lo mid minlen comparator(271510 call + depth 1))
      (271530 call _MergeSort Data Scratch(271521 call + mid stride) hi minlen comparator(271528 call + depth 1))
    }
    if(271565 call _cond_test(271541 call ==(271538 call & depth 1) 0))
    {
      (271551 call _Merge Data Scratch lo mid hi comparator)
    }
    {
      (271562 call _Merge Scratch Data lo mid hi comparator)
    }
  }
  where {
    (271248 call ==(271244 call . Dom c"rank") 1)
  }
  function _Merge[271584](arg Dst[271581] :
  (271579 call chpl__buildArrayRuntimeType unknown Dom[271574] unknown eltType[271577]), arg Src[271589] :
  (271586 call chpl__buildArrayRuntimeType nil[44]), arg lo[271593] :
  int[13], arg mid[271597] :
  int[13], arg hi[271601] :
  int[13], arg comparator[271607] :
  unknown rec[271604] =
  defaultComparator) : _unknown[51] "private"
  {
    { scopeless
      const stride[271626] "const"(271623 IfExpr (271612 call . Dom c"stridable") then
      { scopeless
        (271621 call abs(271617 call . Dom c"stride"))
      } else
      { scopeless
        1
      } )
      (271629 'end of statement')
    }
    { scopeless
      const a1range[271649] "const"(271646 IfExpr (271632 call . Dom c"stridable") then
      { scopeless
        (271640 call chpl_by(271637 call chpl_build_bounded_range lo mid) stride)
      } else
      { scopeless
        (271644 call chpl_build_bounded_range lo mid)
      } )
      (271652 'end of statement')
    }
    { scopeless
      const a1max[271654] "const" mid
      (271657 'end of statement')
    }
    { scopeless
      const a2range[271682] "const"(271679 IfExpr (271659 call . Dom c"stridable") then
      { scopeless
        (271670 call chpl_by(271667 call chpl_build_bounded_range(271664 call + mid stride) hi) stride)
      } else
      { scopeless
        (271677 call chpl_build_bounded_range(271674 call + mid 1) hi)
      } )
      (271685 'end of statement')
    }
    { scopeless
      const a2max[271687] "const" hi
      (271690 'end of statement')
    }
    { scopeless
      unknown A1[271695] "ref var"(271694 call Src a1range)
      (271698 'end of statement')
    }
    { scopeless
      unknown A2[271703] "ref var"(271702 call Src a2range)
      (271706 'end of statement')
    }
    { scopeless
      unknown a1[271711](271708 call . a1range c"first")
      (271714 'end of statement')
    }
    { scopeless
      unknown a2[271719](271716 call . a2range c"first")
      (271722 'end of statement')
    }
    { scopeless
      unknown i[271724] lo
      (271727 'end of statement')
    }
    {
      unknown tmp[271802] "temp"
      (271838 'move' tmp[271802](271827 call _cond_test(271829 call &&(271831 call <= a1 a1max)(271835 call <= a2 a2max))))
      WhileDo[271807]
      {
        {
          if(271797 call _cond_test(271751 call <=(271749 call chpl_compare(271742 call A1 a1)(271747 call A2 a2) comparator) 0))
          {
            (271761 call =(271756 call Dst i)(271760 call A1 a1))
            (271767 call += a1 stride)
            (271772 call += i stride)
          }
          {
            (271783 call =(271778 call Dst i)(271782 call A2 a2))
            (271789 call += a2 stride)
            (271794 call += i stride)
          }
        }
        label _continueLabel[271805]
        (271822 'move' tmp[271802](271811 call _cond_test(271813 call &&(271815 call <= a1 a1max)(271819 call <= a2 a2max))))
        tmp[271802]
      }
      label _breakLabel[271806]
    }
    {
      unknown tmp[271867] "temp"
      (271891 'move' tmp[271867](271886 call _cond_test(271888 call <= a1 a1max)))
      WhileDo[271872]
      {
        {
          (271853 call =(271848 call Dst i)(271852 call A1 a1))
          (271859 call += a1 stride)
          (271864 call += i stride)
        }
        label _continueLabel[271870]
        (271881 'move' tmp[271867](271876 call _cond_test(271878 call <= a1 a1max)))
        tmp[271867]
      }
      label _breakLabel[271871]
    }
    {
      unknown tmp[271920] "temp"
      (271944 'move' tmp[271920](271939 call _cond_test(271941 call <= a2 a2max)))
      WhileDo[271925]
      {
        {
          (271906 call =(271901 call Dst i)(271905 call A2 a2))
          (271912 call += a2 stride)
          (271917 call += i stride)
        }
        label _continueLabel[271923]
        (271934 'move' tmp[271920](271929 call _cond_test(271931 call <= a2 a2max)))
        tmp[271920]
      }
      label _breakLabel[271924]
    }
  }
}