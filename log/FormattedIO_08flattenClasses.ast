AST dump for FormattedIO after pass flattenClasses.
Module use list: ChapelStandard IO SysCTypes SysBasic SysError Regexp 

{
  function _toIntegral[251289](arg x[251286] :
  unknown t[251284]) : _unknown[51] "inline" "private"
  {
    (251300 return(251298 call _build_tuple x[251286] 1))
  }
  where {
    (251294 call isIntegralType t[251284])
  }
  function _toIntegral[251313](arg x[251310] :
  unknown t[251308]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251332](251330 call _build_tuple int(64)[13] bool[10])
    (251335 'end of statement')
    if(251362 call _cond_test(251340 call isAbstractEnumType t[251308]))
    {
      (251347 call = ret[251332](251345 call _build_tuple 0 0))
    }
    {
      (251359 call = ret[251332](251357 call _build_tuple(251353 call _cast int(64)[13] x[251310]) 1))
    }
    (251369 return ret[251332])
  }
  where {
    (251325 call &&(251318 call _isIoPrimitiveType t[251308])(251323 call !(251322 call isIntegralType t[251308])))
  }
  function _toIntegral[251381](arg x[251378] :
  unknown t[251376]) : _unknown[51] "inline" "private"
  {
    (251394 return(251392 call _build_tuple 0 0))
  }
  where {
    (251387 call !(251386 call _isIoPrimitiveType t[251376]))
  }
  function _toSigned[251407](arg x[251404] :
  unknown t[251402]) : _unknown[51] "inline" "private"
  {
    (251418 return(251416 call _build_tuple x[251404] 1))
  }
  where {
    (251412 call isIntType t[251402])
  }
  function _toSigned[251433](arg x[251430] :
  (251429 call uint(64)[115] 8)) : _unknown[51] "inline" "private"
  {
    (251446 return(251444 call _build_tuple(251440 call _cast(251439 call int(64)[13] 8) x[251430]) 1))
  }
  function _toSigned[251460](arg x[251457] :
  (251456 call uint(64)[115] 16)) : _unknown[51] "inline" "private"
  {
    (251473 return(251471 call _build_tuple(251467 call _cast(251466 call int(64)[13] 16) x[251457]) 1))
  }
  function _toSigned[251487](arg x[251484] :
  (251483 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    (251500 return(251498 call _build_tuple(251494 call _cast(251493 call int(64)[13] 32) x[251484]) 1))
  }
  function _toSigned[251514](arg x[251511] :
  (251510 call uint(64)[115] 64)) : _unknown[51] "inline" "private"
  {
    (251527 return(251525 call _build_tuple(251521 call _cast(251520 call int(64)[13] 64) x[251511]) 1))
  }
  function _toSigned[251539](arg x[251536] :
  unknown t[251534]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251558](251556 call _build_tuple int(64)[13] bool[10])
    (251561 'end of statement')
    if(251588 call _cond_test(251566 call isAbstractEnumType t[251534]))
    {
      (251573 call = ret[251558](251571 call _build_tuple 0 0))
    }
    {
      (251585 call = ret[251558](251583 call _build_tuple(251579 call _cast int(64)[13] x[251536]) 1))
    }
    (251595 return ret[251558])
  }
  where {
    (251551 call &&(251544 call _isIoPrimitiveType t[251534])(251549 call !(251548 call isIntegralType t[251534])))
  }
  function _toSigned[251607](arg x[251604] :
  unknown t[251602]) : _unknown[51] "inline" "private"
  {
    (251623 return(251621 call _build_tuple(251617 call _cast int(64)[13] 0) 0))
  }
  where {
    (251613 call !(251612 call _isIoPrimitiveType t[251602]))
  }
  function _toUnsigned[251636](arg x[251633] :
  unknown t[251631]) : _unknown[51] "inline" "private"
  {
    (251647 return(251645 call _build_tuple x[251633] 1))
  }
  where {
    (251641 call isUintType t[251631])
  }
  function _toUnsigned[251662](arg x[251659] :
  (251658 call int(64)[13] 8)) : _unknown[51] "inline" "private"
  {
    (251675 return(251673 call _build_tuple(251669 call _cast(251668 call uint(64)[115] 8) x[251659]) 1))
  }
  function _toUnsigned[251689](arg x[251686] :
  (251685 call int(64)[13] 16)) : _unknown[51] "inline" "private"
  {
    (251702 return(251700 call _build_tuple(251696 call _cast(251695 call uint(64)[115] 16) x[251686]) 1))
  }
  function _toUnsigned[251716](arg x[251713] :
  (251712 call int(64)[13] 32)) : _unknown[51] "inline" "private"
  {
    (251729 return(251727 call _build_tuple(251723 call _cast(251722 call uint(64)[115] 32) x[251713]) 1))
  }
  function _toUnsigned[251743](arg x[251740] :
  (251739 call int(64)[13] 64)) : _unknown[51] "inline" "private"
  {
    (251756 return(251754 call _build_tuple(251750 call _cast(251749 call uint(64)[115] 64) x[251740]) 1))
  }
  function _toUnsigned[251768](arg x[251765] :
  unknown t[251763]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251787](251785 call _build_tuple uint(64)[115] bool[10])
    (251790 'end of statement')
    if(251820 call _cond_test(251795 call isAbstractEnumType t[251763]))
    {
      (251805 call = ret[251787](251803 call _build_tuple(251799 call _cast uint(64)[115] 0) 0))
    }
    {
      (251817 call = ret[251787](251815 call _build_tuple(251811 call _cast uint(64)[115] x[251765]) 1))
    }
    (251827 return ret[251787])
  }
  where {
    (251780 call &&(251773 call _isIoPrimitiveType t[251763])(251778 call !(251777 call isIntegralType t[251763])))
  }
  function _toUnsigned[251839](arg x[251836] :
  unknown t[251834]) : _unknown[51] "inline" "private"
  {
    (251855 return(251853 call _build_tuple(251849 call _cast uint(64)[115] 0) 0))
  }
  where {
    (251845 call !(251844 call _isIoPrimitiveType t[251834]))
  }
  function _toReal[251868](arg x[251865] :
  unknown t[251863]) : _unknown[51] "inline" "private"
  {
    (251879 return(251877 call _build_tuple x[251865] 1))
  }
  where {
    (251873 call isRealType t[251863])
  }
  function _toReal[251892](arg x[251889] :
  unknown t[251887]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[251911](251909 call _build_tuple real(64)[16] bool[10])
    (251914 'end of statement')
    if(251941 call _cond_test(251919 call isAbstractEnumType t[251887]))
    {
      (251926 call = ret[251911](251924 call _build_tuple 0.0 0))
    }
    {
      (251938 call = ret[251911](251936 call _build_tuple(251932 call _cast real(64)[16] x[251889]) 1))
    }
    (251948 return ret[251911])
  }
  where {
    (251904 call &&(251897 call _isIoPrimitiveType t[251887])(251902 call !(251901 call isRealType t[251887])))
  }
  function _toReal[251960](arg x[251957] :
  unknown t[251955]) : _unknown[51] "inline" "private"
  {
    (251973 return(251971 call _build_tuple 0.0 0))
  }
  where {
    (251966 call !(251965 call _isIoPrimitiveType t[251955]))
  }
  function _toImag[251986](arg x[251983] :
  unknown t[251981]) : _unknown[51] "inline" "private"
  {
    (251997 return(251995 call _build_tuple x[251983] 1))
  }
  where {
    (251991 call isImagType t[251981])
  }
  function _toImag[252010](arg x[252007] :
  unknown t[252005]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[252029](252027 call _build_tuple imag(64)[130] bool[10])
    (252032 'end of statement')
    if(252059 call _cond_test(252037 call isAbstractEnumType t[252005]))
    {
      (252044 call = ret[252029](252042 call _build_tuple 0.0i 0))
    }
    {
      (252056 call = ret[252029](252054 call _build_tuple(252050 call _cast imag(64)[130] x[252007]) 1))
    }
    (252066 return ret[252029])
  }
  where {
    (252022 call &&(252015 call _isIoPrimitiveType t[252005])(252020 call !(252019 call isImagType t[252005])))
  }
  function _toImag[252078](arg x[252075] :
  unknown t[252073]) : _unknown[51] "inline" "private"
  {
    (252091 return(252089 call _build_tuple 0.0i 0))
  }
  where {
    (252084 call !(252083 call _isIoPrimitiveType t[252073]))
  }
  function _toComplex[252104](arg x[252101] :
  unknown t[252099]) : _unknown[51] "inline" "private"
  {
    (252115 return(252113 call _build_tuple x[252101] 1))
  }
  where {
    (252109 call isComplexType t[252099])
  }
  function _toComplex[252128](arg x[252125] :
  unknown t[252123]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[252147](252145 call _build_tuple complex(128)[140] bool[10])
    (252150 'end of statement')
    if(252180 call _cond_test(252155 call isAbstractEnumType t[252123]))
    {
      (252165 call = ret[252147](252163 call _build_tuple(252159 call + 0.0 0.0i) 0))
    }
    {
      (252177 call = ret[252147](252175 call _build_tuple(252171 call _cast complex(128)[140] x[252125]) 1))
    }
    (252187 return ret[252147])
  }
  where {
    (252140 call &&(252133 call _isIoPrimitiveType t[252123])(252138 call !(252137 call isComplexType t[252123])))
  }
  function _toComplex[252199](arg x[252196] :
  unknown t[252194]) : _unknown[51] "inline" "private"
  {
    (252215 return(252213 call _build_tuple(252209 call + 0.0 0.0i) 0))
  }
  where {
    (252205 call !(252204 call _isIoPrimitiveType t[252194]))
  }
  function _toRealOrComplex[252228](arg x[252225] :
  unknown t[252223]) : _unknown[51] "inline" "private"
  {
    (252239 return(252237 call _build_tuple x[252225] 1))
  }
  where {
    (252233 call isComplexType t[252223])
  }
  function _toRealOrComplex[252252](arg x[252249] :
  unknown t[252247]) : _unknown[51] "inline" "private"
  {
    (252263 return(252261 call _build_tuple x[252249] 1))
  }
  where {
    (252257 call isFloatType t[252247])
  }
  function _toRealOrComplex[252276](arg x[252273] :
  unknown t[252271]) : _unknown[51] "inline" "private"
  {
    (252306 return(252304 call _build_tuple(252300 call _cast real(64)[16] x[252273]) 1))
  }
  where {
    (252296 call &&(252288 call &&(252281 call _isIoPrimitiveType t[252271])(252286 call !(252285 call isComplexType t[252271])))(252294 call !(252293 call isFloatType t[252271])))
  }
  function _toRealOrComplex[252319](arg x[252316] :
  unknown t[252314]) : _unknown[51] "inline" "private"
  {
    (252332 return(252330 call _build_tuple 0.0 0))
  }
  where {
    (252325 call !(252324 call _isIoPrimitiveType t[252314]))
  }
  function _toNumeric[252345](arg x[252342] :
  unknown t[252340]) : _unknown[51] "inline" "private"
  {
    (252356 return(252354 call _build_tuple x[252342] 1))
  }
  where {
    (252350 call isNumericType t[252340])
  }
  function _toNumeric[252369](arg x[252366] :
  unknown t[252364]) : _unknown[51] throws "inline" "private"
  {
    unknown ret[252388](252386 call _build_tuple int(64)[13] bool[10])
    (252391 'end of statement')
    if(252418 call _cond_test(252396 call isAbstractEnumType t[252364]))
    {
      (252403 call = ret[252388](252401 call _build_tuple 0 0))
    }
    {
      (252415 call = ret[252388](252413 call _build_tuple(252409 call _cast int(64)[13] x[252366]) 1))
    }
    (252425 return ret[252388])
  }
  where {
    (252381 call &&(252374 call _isIoPrimitiveType t[252364])(252379 call !(252378 call isNumericType t[252364])))
  }
  function _toNumeric[252437](arg x[252434] :
  unknown t[252432]) : _unknown[51] "inline" "private"
  {
    (252450 return(252448 call _build_tuple 0 0))
  }
  where {
    (252443 call !(252442 call _isIoPrimitiveType t[252432]))
  }
  function _toBytes[252462](arg x[252459] :
  bytes[24]) : _unknown[51] "inline" "private"
  {
    (252469 return(252467 call _build_tuple x[252459] 1))
  }
  function _toBytes[252480](arg x[252477] :
  string[26]) : _unknown[51] "inline" "private"
  {
    (252490 return(252488 call _build_tuple(252484 call _cast bytes[24] x[252477]) 1))
  }
  function _toBytes[252502](arg x[252499] :
  unknown t[252497]) : _unknown[51] "inline" "private"
  {
    (252528 return(252526 call _build_tuple(252522 call _cast bytes[24] "") 0))
  }
  function _toString[252539](arg x[252536] :
  string[26]) : _unknown[51] "inline" "private"
  {
    (252546 return(252544 call _build_tuple x[252536] 1))
  }
  function _toString[252557](arg x[252554] :
  bytes[24]) : _unknown[51] "inline" "private"
  {
    (252580 return(252578 call _build_tuple "" 0))
  }
  function _toString[252592](arg x[252589] :
  unknown t[252587]) : _unknown[51] "inline" "private"
  {
    (252618 return(252616 call _build_tuple(252612 call _cast string[26] x[252589]) 1))
  }
  where {
    (252608 call &&(252602 call &&(252597 call _isIoPrimitiveType t[252587])(252600 call != t[252587] bytes[24]))(252606 call != t[252587] string[26]))
  }
  function _toString[252631](arg x[252628] :
  unknown t[252626]) : _unknown[51] "inline" "private"
  {
    (252660 return(252658 call _build_tuple "" 0))
  }
  where {
    (252637 call !(252636 call _isIoPrimitiveType t[252626]))
  }
  function _toChar[252673](arg x[252670] :
  unknown t[252668]) : _unknown[51] "inline" "private"
  {
    (252690 return(252688 call _build_tuple(252684 call _cast(252683 call int(64)[13] 32) x[252670]) 1))
  }
  where {
    (252678 call isIntegralType t[252668])
  }
  function _toChar[252703](arg x[252700] :
  unknown t[252698]) : _unknown[51] "inline" "private"
  {
    unknown chr[252713](252712 call int(64)[13] 32)
    (252716 'end of statement')
    unknown nbytes[252719] c_int[20549]
    (252722 'end of statement')
    unknown local_x[252729](252728 call(252724 call . x[252700] c"localize"))
    (252732 'end of statement')
    (252750 call qio_decode_char_buf chr[252713] nbytes[252719](252742 call(252738 call . local_x[252729] c"c_str"))(252748 call _cast ssize_t[20647](252744 call . local_x[252729] c"numBytes")))
    (252757 return(252755 call _build_tuple chr[252713] 1))
  }
  where {
    (252707 call == t[252698] string[26])
  }
  function _toChar[252769](arg x[252766] :
  unknown t[252764]) : _unknown[51] "inline" "private"
  {
    (252794 return(252792 call _build_tuple(252788 call _cast(252787 call int(64)[13] 32) 0) 0))
  }
  where {
    (252781 call !(252779 call ||(252773 call == t[252764] string[26])(252778 call isIntegralType t[252764])))
  }
  function _setIfPrimitive[252807](ref arg lhs[252804] :
  unknown t[252802], arg rhs[252811] :
  unknown t2[252809], arg argi[252815] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    unknown empty[252830] t2[252809]
    (252833 'end of statement')
    if(252851 call _cond_test(252837 call == rhs[252811] empty[252830]))
    {
      (252841 call = lhs[252804] 0)
    }
    {
      (252847 call = lhs[252804] 1)
    }
    (252856 return(398464 call ENOERR[223654]))
  }
  where {
    (252827 call &&(252821 call == t[252802] bool[10])(252826 call _isIoPrimitiveType t2[252809]))
  }
  { scopeless type
    syserr[223584]
  }
  function _setIfPrimitive[252869](ref arg lhs[252866] :
  unknown t[252864], arg rhs[252873] :
  unknown t2[252871], arg argi[252877] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    Try
    {
      {
        if(253000 call _cond_test(252894 call isAbstractEnumType t[252864]))
        {
          if(252912 call _cond_test(252898 call isStringType t2[252871]))
          {
            (252904 call = lhs[252866](252902 call _cast t[252864] rhs[252873]))
          }
          {
            (252909 return ERANGE[224774])
          }
        }
        {
          if(252996 call _cond_test(252920 call isEnumType t[252864]))
          {
            if(252952 call _cond_test(252929 call ||(252924 call isIntType t2[252871])(252928 call isStringType t2[252871])))
            {
              (252936 call = lhs[252866](252934 call _cast t[252864] rhs[252873]))
            }
            {
              (252948 call = lhs[252866](252946 call _cast t[252864](252943 call _cast int(64)[13] rhs[252873])))
            }
          }
          {
            if(252991 call _cond_test(252965 call &&(252960 call isBytesType t2[252871])(252964 call isStringType t[252864])))
            {
              (252978 call = lhs[252866](252977 call(252969 call . rhs[252873] c"decode") strict[173646]))
            }
            {
              (252987 call = lhs[252866](252985 call _cast t[252864] rhs[252873]))
            }
          }
        }
      }
    }
    Catch
    {
      unknown tmp[354639] "temp"(354642 'current error')
      unknown chpl_anon_error[354645](354650 'new'(354648 call _owned[30](?)(354646 'to non nilable class' tmp[354639])))
      {
        (253008 return ERANGE[224774])
      }
    }
    (253016 return(398491 call ENOERR[223654]))
  }
  where {
    (252889 call &&(252883 call != t[252864] bool[10])(252888 call _isIoPrimitiveType t[252864]))
  }
  { scopeless type
    syserr[223584]
  }
  function _setIfPrimitive[253029](ref arg lhs[253026] :
  unknown t[253024], arg rhs[253031]:_any[178](?), arg argi[253034] :
  int(64)[13]) : _unknown[51] "inline" "private"
  {
    (253048 return(253047 call qio_format_error_arg_mismatch argi[253034]))
  }
  where {
    (253042 call !(253041 call _isIoPrimitiveType t[253024]))
  }
  { scopeless type
    syserr[223584]
  }
  function _setIfChar[253062](ref arg lhs[253059] :
  unknown t[253057], arg rhs[253068] :
  (253067 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (253084 call = lhs[253059](253082 call _cast string[26](253076 'new'(253080 call ioChar[238633] rhs[253068]))))
  }
  where {
    (253073 call == t[253057] string[26])
  }
  function _setIfChar[253098](ref arg lhs[253095] :
  unknown t[253093], arg rhs[253104] :
  (253103 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (253116 call = lhs[253095](253114 call _cast t[253093] rhs[253104]))
  }
  where {
    (253110 call isIntegralType t[253093])
  }
  function _setIfChar[253130](ref arg lhs[253127] :
  unknown t[253125], arg rhs[253136] :
  (253135 call int(64)[13] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
  }
  where {
    (253149 call !(253147 call ||(253141 call == t[253125] string[26])(253146 call isIntegralType t[253125])))
  }
  function _toRegexp[253162](arg x[253159] :
  unknown t[253157]) : _unknown[51] "inline" "private"
  {
    (253177 return(253175 call _build_tuple x[253159] 1))
  }
  where {
    (354652 'is_subtype'(253170 call regexp[297117](?) ?[260]) t[253157])
  }
  function _toRegexp[253190](arg x[253187] :
  unknown t[253185]) : _unknown[51] "inline" "private"
  {
    unknown r[253196](253195 call regexp[297117](?) string[26])
    (253199 'end of statement')
    (253206 return(253204 call _build_tuple r[253196] 0))
  }
  function _channel_regexp_info[253598].clear[253263](arg _mt[253602]:_MT[238], arg this[253600]:_channel_regexp_info[253598]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(253272 call _cond_test(398516 call . this[253600] c"releaseRegexp"))
    {
      (253269 call qio_regexp_release(398521 call . this[253600] c"theRegexp"))
    }
    (253281 call =(398526 call . this[253600] c"theRegexp")(253280 call qio_regexp_null))
    (253286 call =(398531 call . this[253600] c"hasRegexp") 0)
    (253291 call =(398536 call . this[253600] c"matchedRegexp") 0)
    (253296 call =(398541 call . this[253600] c"releaseRegexp") 0)
    if(253309 call _cond_test(398546 call . this[253600] c"matches"))
    {
      (253307 call _ddata_free(398551 call . this[253600] c"matches")(253305 call +(398556 call . this[253600] c"ncaptures") 1))
    }
    {
      unknown _indexOfInterest[253344] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[253345] "expr temp" "temp"
      (253354 'move' _iterator[253345](253352 call _getIterator(253361 call chpl_direct_counted_range_iter 0(398567 call . this[253600] c"ncaptures"))))
      Defer
      {
        {
          (253377 call _freeIterator _iterator[253345])
        }
      }
      { scopeless type
        (253366 'move' _indexOfInterest[253344](253363 call iteratorIndex _iterator[253345]))
      }
      ForLoop[253346]
      {
        unknown i[253370] "index var" "insert auto destroy"
        (253372 'move' i[253370] _indexOfInterest[253344])
        (253341 call =(253324 call(398561 call . this[253600] c"capArr") i[253370]) b"")
        label _continueLabel[253349]
        _indexOfInterest[253344]
        _iterator[253345]
      }
      label _breakLabel[253350]
    }
    if(253391 call _cond_test(398572 call . this[253600] c"capArr"))
    {
      (253389 call _ddata_free(398577 call . this[253600] c"capArr")(398582 call . this[253600] c"ncaptures"))
    }
  }
  function _channel_regexp_info[253598].allocate_captures[253400](arg _mt[253606]:_MT[238], arg this[253604]:_channel_regexp_info[253598]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (253407 call =(398587 call . this[253604] c"ncaptures")(253406 call qio_regexp_get_ncaptures(398592 call . this[253604] c"theRegexp")))
    (253420 call =(398597 call . this[253604] c"matches")(253419 call _ddata_allocate qio_regexp_string_piece_t[293888](253417 call +(398603 call . this[253604] c"ncaptures") 1)))
    (253429 call =(398608 call . this[253604] c"capArr")(253428 call _ddata_allocate bytes[24](398613 call . this[253604] c"ncaptures")))
    (253434 call =(398618 call . this[253604] c"capturei") 0)
  }
  function _channel_regexp_info[253598].deinit[253441](arg _mt[253610]:_MT[238], arg this[253608]:_channel_regexp_info[253598]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (253445 call(398622 call . this[253608] c"clear"))
  }
  function _channel_regexp_info[253598].writeThis[253454](arg _mt[253614]:_MT[238], arg this[253612]:_channel_regexp_info[253598], arg f[253452]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (253480 call <~> f[253452](253478 call + "{hasRegexp = "(253476 call _cast string[26](398628 call . this[253612] c"hasRegexp"))))
    (253508 call <~> f[253452](253506 call + ", matchedRegexp = "(253504 call _cast string[26](398634 call . this[253612] c"matchedRegexp"))))
    (253535 call <~> f[253452](253533 call + ", releaseRegexp = "(253531 call _cast string[26](398640 call . this[253612] c"releaseRegexp"))))
    (253562 call <~> f[253452](253560 call + ", ... capturei = "(253558 call _cast string[26](398646 call . this[253612] c"capturei"))))
    (253592 call <~> f[253452](253590 call +(253587 call + ", ncaptures = "(253585 call _cast string[26](398652 call . this[253612] c"ncaptures"))) "}"))
  }
  type _channel_regexp_info[253598] val super[355728]:object[22] "super class" unknown hasRegexp[253212] 0 unknown matchedRegexp[253217] 0 unknown releaseRegexp[253222] 0 unknown theRegexp[253229](253228 call qio_regexp_null) unknown matches[253238] nil[44](253236 call _ddata[11695](?) qio_regexp_string_piece_t[293888]) unknown capArr[253247] nil[44](253245 call _ddata[11695](?) bytes[24]) unknown capturei[253252] int(64)[13] unknown ncaptures[253257] int(64)[13]
  type unmanaged _channel_regexp_info?[415525]
  type _channel_regexp_info?[415522](?)
  type unmanaged _channel_regexp_info[415519]
  type _channel_regexp_info[398660](?)
  function channel[237730](?)._match_regexp_if_needed[253624](arg _mt[253646]:_MT[238], arg this[253643]:channel[237730](?) :
  channel[237730](?), arg cur[253621] :
  size_t[20654], arg len[253627] :
  size_t[20654], ref arg error[253631] :
  syserr[223584], ref arg style[253635] :
  iostyle[231844], arg r[253640] :
  unmanaged _channel_regexp_info[415519]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(254047 call _cond_test(253656 call qio_regexp_ok(253652 call . r[253640] c"theRegexp")))
    {
      if(253665 call _cond_test(253660 call . r[253640] c"matchedRegexp"))
      {
        (253663 return _void[55])
      }
      (253676 call =(253672 call . r[253640] c"matchedRegexp") 1)
      (253686 call(253682 call . r[253640] c"allocate_captures"))
      unknown ncaps[253694](253691 call . r[253640] c"ncaptures")
      (253697 'end of statement')
      unknown nm[253702](253700 call + ncaps[253694] 1)
      (253705 'end of statement')
      unknown maxlen[253716](253713 call . style[253635] c"max_width_characters")(253709 call int(64)[13] 64)
      (253719 'end of statement')
      unknown can_discard[253724](253722 call == cur[253621] len[253627])
      (253727 'end of statement')
      if(253749 call _cond_test(253736 call == maxlen[253716](253735 call max(253733 call uint(64)[115] 32))))
      {
        (253746 call = maxlen[253716](253745 call max(253743 call int(64)[13] 64)))
      }
      unknown before_match[253758](253757 call qio_channel_offset_unlocked(398670 call . this[253643] c"_channel_internal"))
      (253761 'end of statement')
      (253784 call = error[253631](253783 call qio_regexp_channel_match(253765 call . r[253640] c"theRegexp") 0(398676 call . this[253643] c"_channel_internal") maxlen[253716] QIO_REGEXP_ANCHOR_START[293861] can_discard[253724] 1 0(253779 call . r[253640] c"matches") nm[253702]))
      unknown after_match[253791](253790 call qio_channel_offset_unlocked(398685 call . this[253643] c"_channel_internal"))
      (253794 'end of statement')
      if(254033 call _cond_test(253796 call ! error[253631]))
      {
        {
          unknown _indexOfInterest[253847] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[253848] "expr temp" "temp"
          (253857 'move' _iterator[253848](253855 call _getIterator(253864 call chpl_direct_counted_range_iter 0 ncaps[253694])))
          Defer
          {
            {
              (253880 call _freeIterator _iterator[253848])
            }
          }
          { scopeless type
            (253869 'move' _indexOfInterest[253847](253866 call iteratorIndex _iterator[253848]))
          }
          ForLoop[253849]
          {
            unknown j[253873] "index var" "insert auto destroy"
            (253875 'move' j[253873] _indexOfInterest[253847])
            {
              unknown m[253818](253817 call _to_reMatch(253815 call(253807 call . r[253640] c"matches")(253812 call + 1 j[253873])))
              (253821 'end of statement')
              (253836 call(398693 call . this[253643] c"_extractMatch") m[253818](253834 call(253829 call . r[253640] c"capArr") j[253873]) error[253631])
              if(253842 call _cond_test error[253631])
              {
                break _breakLabel[253853] _breakLabel[253853]
              }
            }
            label _continueLabel[253852]
            _indexOfInterest[253847]
            _iterator[253848]
          }
          label _breakLabel[253853]
        }
        unknown cur[253892](253891 call qio_channel_offset_unlocked(398703 call . this[253643] c"_channel_internal"))
        (253895 'end of statement')
        unknown target[253923](253921 call _cast int(64)[13](253918 call +(253903 call .(253902 call(253897 call . r[253640] c"matches") 0) c"offset")(253915 call .(253912 call(253907 call . r[253640] c"matches") 0) c"len")))
        (253926 'end of statement')
        (253937 call = error[253631](253936 call qio_channel_advance 0(398709 call . this[253643] c"_channel_internal")(253934 call - target[253923] cur[253892])))
      }
      {
        {
          unknown _indexOfInterest[253974] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[253975] "expr temp" "temp"
          (253984 'move' _iterator[253975](253982 call _getIterator(253991 call chpl_direct_counted_range_iter 0 ncaps[253694])))
          Defer
          {
            {
              (254007 call _freeIterator _iterator[253975])
            }
          }
          { scopeless type
            (253996 'move' _indexOfInterest[253974](253993 call iteratorIndex _iterator[253975]))
          }
          ForLoop[253976]
          {
            unknown j[254000] "index var" "insert auto destroy"
            (254002 'move' j[254000] _indexOfInterest[253974])
            {
              (253970 call =(253953 call(253948 call . r[253640] c"capArr") j[254000]) b"")
            }
            label _continueLabel[253979]
            _indexOfInterest[253974]
            _iterator[253975]
          }
          label _breakLabel[253980]
        }
        unknown cur[254019](254018 call qio_channel_offset_unlocked(398718 call . this[253643] c"_channel_internal"))
        (254022 'end of statement')
        (254031 call qio_channel_advance 0(398723 call . this[253643] c"_channel_internal")(254029 call - before_match[253758] cur[254019]))
      }
    }
    {
      (254041 call = error[253631](254040 call qio_format_error_bad_regexp))
      {
      }
    }
  }
  function channel[237730](?)._format_reader[254062](arg _mt[254101]:_MT[238], arg this[254098]:channel[237730](?) :
  channel[237730](?), arg fmtStr[254059] :
  unknown fmtType[254057], ref arg cur[254065] :
  size_t[20654], arg len[254069] :
  size_t[20654], ref arg error[254073] :
  syserr[223584], ref arg conv[254077] :
  qio_conv_t[235056], ref arg gotConv[254081] :
  bool[10], ref arg style[254085] :
  iostyle[231844], ref arg r[254091] :
  unmanaged _channel_regexp_info?[415525], arg isReadf[254095] :
  bool[10]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(254119 call _cond_test(254105 call != r[254091] nil[44]))
    {
      (254116 call =(254112 call .(254108 call postfix! r[254091]) c"hasRegexp") 0)
    }
    if(254650 call _cond_test(254126 call ! error[254073]))
    {
      unknown fmt[254139](254138 call(254134 call .(254133 call(254129 call . fmtStr[254059] c"localize")) c"c_str"))
      (254142 'end of statement')
      {
        unknown tmp[254623] "temp"
        (254647 'move' tmp[254623](254642 call _cond_test(254644 call < cur[254065] len[254069])))
        WhileDo[254628]
        {
          {
            (254150 call = gotConv[254081] 0)
            if(254158 call _cond_test error[254073])
            {
              break _breakLabel[254627] _breakLabel[254627]
            }
            unknown end[254167](254166 call uint(64)[115] 64)
            (254170 'end of statement')
            (254181 call = error[254073](254180 call qio_conv_parse fmt[254139] cur[254065] end[254167] isReadf[254095] conv[254077] style[254085]))
            if(254186 call _cond_test error[254073])
            {
            }
            (254195 call = cur[254065](254193 call _cast size_t[20654] end[254167]))
            if(254202 call _cond_test error[254073])
            {
              break _breakLabel[254627] _breakLabel[254627]
            }
            if(254618 call _cond_test(254214 call ==(254210 call . conv[254077] c"argType") QIO_CONV_ARG_TYPE_NONE_LITERAL[235150]))
            {
              if(254387 call _cond_test isReadf[254095])
              {
                if(254360 call _cond_test(254224 call ==(254220 call . conv[254077] c"literal_is_whitespace") 2))
                {
                  unknown offsetA[254230](254229 call qio_channel_offset_unlocked(398756 call . this[254098] c"_channel_internal"))
                  (254233 'end of statement')
                  (254242 call = error[254073](254241 call qio_channel_skip_past_newline 0(398762 call . this[254098] c"_channel_internal") 1))
                  unknown offsetB[254249](254248 call qio_channel_offset_unlocked(398767 call . this[254098] c"_channel_internal"))
                  (254252 'end of statement')
                  if(254268 call _cond_test(254260 call &&(254254 call ! error[254073])(254258 call == offsetA[254230] offsetB[254249])))
                  {
                    (254264 call = error[254073](398774 call EFORMAT[224270]))
                  }
                }
                {
                  if(254356 call _cond_test(254277 call ==(254273 call . conv[254077] c"literal_is_whitespace") 1))
                  {
                    unknown offsetA[254283](254282 call qio_channel_offset_unlocked(398778 call . this[254098] c"_channel_internal"))
                    (254286 'end of statement')
                    (254302 call = error[254073](254301 call qio_channel_scan_literal_2 0(398784 call . this[254098] c"_channel_internal")(254296 call . conv[254077] c"literal") 0 1))
                    unknown offsetB[254309](254308 call qio_channel_offset_unlocked(398789 call . this[254098] c"_channel_internal"))
                    (254312 'end of statement')
                    if(254328 call _cond_test(254320 call &&(254314 call ! error[254073])(254318 call == offsetA[254283] offsetB[254309])))
                    {
                      (254324 call = error[254073](398796 call EFORMAT[224270]))
                    }
                  }
                  {
                    (254352 call = error[254073](254351 call qio_channel_scan_literal_2 0(398801 call . this[254098] c"_channel_internal")(254338 call . conv[254077] c"literal")(254348 call _cast ssize_t[20647](254344 call . conv[254077] c"literal_length")) 0))
                  }
                }
              }
              {
                (254383 call = error[254073](254382 call qio_channel_print_literal_2 0(398808 call . this[254098] c"_channel_internal")(254372 call . conv[254077] c"literal")(254380 call _cast ssize_t[20647](254376 call . conv[254077] c"literal_length"))))
              }
            }
            {
              if(254614 call _cond_test(254397 call ==(254393 call . conv[254077] c"argType") QIO_CONV_ARG_TYPE_NONE_REGEXP_LITERAL[235145]))
              {
                if(254600 call _cond_test(254400 call ! isReadf[254095]))
                {
                  (254406 call = error[254073](254405 call qio_format_error_write_regexp))
                }
                {
                  if(254424 call _cond_test(254412 call == r[254091] nil[44]))
                  {
                    (254421 call = r[254091](254417 'new'(_chpl_manager = unmanaged[220](?))(254420 call _channel_regexp_info[398660](?))))
                  }
                  const rnn[254433] "const"(254431 call postfix! r[254091])
                  (254436 'end of statement')
                  (254442 call(254438 call . rnn[254433] c"clear"))
                  unknown errstr[254445] string[26]
                  (254448 'end of statement')
                  (254483 call qio_regexp_create_compile_flags_2(254453 call . conv[254077] c"regexp")(254460 call . conv[254077] c"regexp_length")(254466 call . conv[254077] c"regexp_flags")(254472 call . conv[254077] c"regexp_flags_length")(254477 call == fmtType[254057] string[26])(254480 call . rnn[254433] c"theRegexp"))
                  (254492 call =(254488 call . rnn[254433] c"releaseRegexp") 1)
                  if(254596 call _cond_test(254501 call qio_regexp_ok(254497 call . rnn[254433] c"theRegexp")))
                  {
                    (254507 call =(254503 call . rnn[254433] c"hasRegexp") 1)
                    (254522 call =(254512 call . rnn[254433] c"ncaptures")(254521 call qio_regexp_get_ncaptures(254517 call . rnn[254433] c"theRegexp")))
                    if(254584 call _cond_test(254563 call ||(254552 call ||(254541 call ||(254530 call >(254526 call . rnn[254433] c"ncaptures") 0)(254539 call !=(254535 call . conv[254077] c"preArg1") QIO_CONV_UNK[235060]))(254550 call !=(254546 call . conv[254077] c"preArg2") QIO_CONV_UNK[235060]))(254561 call !=(254557 call . conv[254077] c"preArg3") QIO_CONV_UNK[235060])))
                    {
                      (254567 call = gotConv[254081] 1)
                      break _breakLabel[254627] _breakLabel[254627]
                    }
                    {
                      (254581 call(398827 call . this[254098] c"_match_regexp_if_needed") cur[254065] len[254069] error[254073] style[254085] rnn[254433])
                    }
                  }
                  {
                    (254592 call = error[254073](254591 call qio_format_error_bad_regexp))
                  }
                }
              }
              {
                (254607 call = gotConv[254081] 1)
                break _breakLabel[254627] _breakLabel[254627]
              }
            }
          }
          label _continueLabel[254626]
          (254637 'move' tmp[254623](254632 call _cond_test(254634 call < cur[254065] len[254069])))
          tmp[254623]
        }
        label _breakLabel[254627]
      }
    }
  }
  function channel[237730](?)._conv_helper[254663](arg _mt[254682]:_MT[238], arg this[254679]:channel[237730](?) :
  channel[237730](?), ref arg error[254660] :
  syserr[223584], ref arg conv[254666] :
  qio_conv_t[235056], ref arg gotConv[254670] :
  bool[10], ref arg j[254674] :
  int(64)[13], ref arg argType[254677]:_any[178](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(254687 call _cond_test error[254660])
    {
      (254685 return _void[55])
    }
    if(254819 call _cond_test gotConv[254670])
    {
      if(254718 call _cond_test(254699 call !=(254695 call . conv[254666] c"preArg1") QIO_CONV_UNK[235060]))
      {
        (254709 call =(254704 call argType[254677] j[254674])(254706 call . conv[254666] c"preArg1"))
        (254715 call += j[254674] 1)
      }
      if(254747 call _cond_test(254728 call !=(254724 call . conv[254666] c"preArg2") QIO_CONV_UNK[235060]))
      {
        (254738 call =(254733 call argType[254677] j[254674])(254735 call . conv[254666] c"preArg2"))
        (254744 call += j[254674] 1)
      }
      if(254775 call _cond_test(254756 call !=(254752 call . conv[254666] c"preArg3") QIO_CONV_UNK[235060]))
      {
        (254766 call =(254761 call argType[254677] j[254674])(254763 call . conv[254666] c"preArg3"))
        (254772 call += j[254674] 1)
      }
      if(254815 call _cond_test(254784 call !=(254780 call . conv[254666] c"argType") QIO_CONV_UNK[235060]))
      {
        if(254805 call _cond_test(254791 call ==(254789 call argType[254677] j[254674]) QIO_CONV_UNK[235060]))
        {
          (254801 call =(254796 call argType[254677] j[254674])(254798 call . conv[254666] c"argType"))
        }
        (254812 call += j[254674] 1)
      }
    }
  }
  function channel[237730](?)._conv_sethandler[254832](arg _mt[254855]:_MT[238], arg this[254852]:channel[237730](?) :
  channel[237730](?), ref arg error[254829] :
  syserr[223584], arg argtypei[254835] :
  c_int[20549], ref arg style[254839] :
  iostyle[231844], arg i[254843] :
  int(64)[13], arg argi[254846]:_any[178](?), arg isReadf[254849] :
  bool[10]) : _unknown[51] throws "method" "no doc"
  {
    if(254862 call _cond_test error[254829])
    {
      (254860 return 0)
    }
    {
      unknown tmp[255489] "expr temp" "maybe param" "maybe type" "temp"
      (255491 'move' tmp[255489] argtypei[254835])
      if(255496 call _cond_test(255493 call == tmp[255489] QIO_CONV_SET_MIN_WIDTH_COLS[235155]))
      {
        unknown tmp[254881] "temp"(254880 call _toIntegral argi[254846])
        (254888 call _check_tuple_var_decl tmp[254881] 2)
        unknown t[254872](254882 call tmp[254881] 0)
        unknown ok[254874](254885 call tmp[254881] 1)
        (254893 'end of statement')
        if(254923 call _cond_test(254896 call ! ok[254874]))
        {
          (254903 call = error[254829](254902 call qio_format_error_arg_mismatch i[254843]))
        }
        {
          (254920 call =(254910 call . style[254839] c"min_width_columns")(254918 call _cast(254917 call uint(64)[115] 32) t[254872]))
        }
      }
      {
        if(255502 call _cond_test(255499 call == tmp[255489] QIO_CONV_SET_MAX_WIDTH_COLS[235160]))
        {
          unknown tmp[254941] "temp"(254940 call _toIntegral argi[254846])
          (254948 call _check_tuple_var_decl tmp[254941] 2)
          unknown t[254932](254942 call tmp[254941] 0)
          unknown ok[254934](254945 call tmp[254941] 1)
          (254953 'end of statement')
          if(254983 call _cond_test(254956 call ! ok[254934]))
          {
            (254963 call = error[254829](254962 call qio_format_error_arg_mismatch i[254843]))
          }
          {
            (254980 call =(254970 call . style[254839] c"max_width_columns")(254978 call _cast(254977 call uint(64)[115] 32) t[254932]))
          }
        }
        {
          if(255509 call _cond_test(255506 call == tmp[255489] QIO_CONV_SET_MAX_WIDTH_CHARS[235165]))
          {
            unknown tmp[255001] "temp"(255000 call _toIntegral argi[254846])
            (255008 call _check_tuple_var_decl tmp[255001] 2)
            unknown t[254992](255002 call tmp[255001] 0)
            unknown ok[254994](255005 call tmp[255001] 1)
            (255013 'end of statement')
            if(255041 call _cond_test(255016 call ! ok[254994]))
            {
              (255023 call = error[254829](255022 call qio_format_error_arg_mismatch i[254843]))
            }
            {
              (255038 call =(255028 call . style[254839] c"max_width_characters")(255036 call _cast(255035 call uint(64)[115] 32) t[254992]))
            }
          }
          {
            if(255516 call _cond_test(255513 call == tmp[255489] QIO_CONV_SET_MAX_WIDTH_BYTES[235170]))
            {
              unknown tmp[255059] "temp"(255058 call _toIntegral argi[254846])
              (255066 call _check_tuple_var_decl tmp[255059] 2)
              unknown t[255050](255060 call tmp[255059] 0)
              unknown ok[255052](255063 call tmp[255059] 1)
              (255071 'end of statement')
              if(255101 call _cond_test(255074 call ! ok[255052]))
              {
                (255081 call = error[254829](255080 call qio_format_error_arg_mismatch i[254843]))
              }
              {
                (255098 call =(255088 call . style[254839] c"max_width_bytes")(255096 call _cast(255095 call uint(64)[115] 32) t[255050]))
              }
            }
            {
              if(255523 call _cond_test(255520 call == tmp[255489] QIO_CONV_SET_PRECISION[235175]))
              {
                unknown tmp[255119] "temp"(255118 call _toIntegral argi[254846])
                (255126 call _check_tuple_var_decl tmp[255119] 2)
                unknown t[255110](255120 call tmp[255119] 0)
                unknown ok[255112](255123 call tmp[255119] 1)
                (255131 'end of statement')
                if(255161 call _cond_test(255134 call ! ok[255112]))
                {
                  (255141 call = error[254829](255140 call qio_format_error_arg_mismatch i[254843]))
                }
                {
                  (255158 call =(255148 call . style[254839] c"precision")(255156 call _cast(255155 call int(64)[13] 32) t[255110]))
                }
              }
              {
                if(255530 call _cond_test(255527 call == tmp[255489] QIO_CONV_SET_STRINGSTART[235190]))
                {
                  unknown tmp[255179] "temp"(255178 call _toChar argi[254846])
                  (255186 call _check_tuple_var_decl tmp[255179] 2)
                  unknown t[255170](255180 call tmp[255179] 0)
                  unknown ok[255172](255183 call tmp[255179] 1)
                  (255191 'end of statement')
                  if(255218 call _cond_test(255194 call ! ok[255172]))
                  {
                    (255201 call = error[254829](255200 call qio_format_error_arg_mismatch i[254843]))
                  }
                  {
                    (255215 call =(255208 call . style[254839] c"string_start")(255213 call _cast style_char_t[231487] t[255170]))
                  }
                }
                {
                  if(255537 call _cond_test(255534 call == tmp[255489] QIO_CONV_SET_STRINGEND[235200]))
                  {
                    unknown tmp[255236] "temp"(255235 call _toChar argi[254846])
                    (255243 call _check_tuple_var_decl tmp[255236] 2)
                    unknown t[255227](255237 call tmp[255236] 0)
                    unknown ok[255229](255240 call tmp[255236] 1)
                    (255248 'end of statement')
                    if(255273 call _cond_test(255251 call ! ok[255229]))
                    {
                      (255258 call = error[254829](255257 call qio_format_error_arg_mismatch i[254843]))
                    }
                    {
                      (255270 call =(255263 call . style[254839] c"string_end")(255268 call _cast style_char_t[231487] t[255227]))
                    }
                  }
                  {
                    if(255544 call _cond_test(255541 call == tmp[255489] QIO_CONV_SET_STRINGSTARTEND[235195]))
                    {
                      unknown tmp[255291] "temp"(255290 call _toChar argi[254846])
                      (255298 call _check_tuple_var_decl tmp[255291] 2)
                      unknown t[255282](255292 call tmp[255291] 0)
                      unknown ok[255284](255295 call tmp[255291] 1)
                      (255303 'end of statement')
                      if(255340 call _cond_test(255306 call ! ok[255284]))
                      {
                        (255313 call = error[254829](255312 call qio_format_error_arg_mismatch i[254843]))
                      }
                      {
                        (255325 call =(255318 call . style[254839] c"string_start")(255323 call _cast style_char_t[231487] t[255282]))
                        (255337 call =(255330 call . style[254839] c"string_end")(255335 call _cast style_char_t[231487] t[255282]))
                      }
                    }
                    {
                      if(255551 call _cond_test(255548 call == tmp[255489] QIO_CONV_SET_STRINGLEN[235180]))
                      {
                        unknown tmp[255357] "temp"(255356 call _toIntegral argi[254846])
                        (255364 call _check_tuple_var_decl tmp[255357] 2)
                        unknown t[255348](255358 call tmp[255357] 0)
                        unknown ok[255350](255361 call tmp[255357] 1)
                        (255369 'end of statement')
                        if(255398 call _cond_test(255372 call ! ok[255350]))
                        {
                          (255379 call = error[254829](255378 call qio_format_error_arg_mismatch i[254843]))
                        }
                        {
                          (255394 call =(255384 call . style[254839] c"str_style")(255392 call _cast(255391 call int(64)[13] 64) t[255348]))
                        }
                      }
                      {
                        if(255558 call _cond_test(255555 call == tmp[255489] QIO_CONV_SET_TERMINATOR[235185]))
                        {
                          unknown tmp[255415] "temp"(255414 call _toChar argi[254846])
                          (255422 call _check_tuple_var_decl tmp[255415] 2)
                          unknown t[255406](255416 call tmp[255415] 0)
                          unknown ok[255408](255419 call tmp[255415] 1)
                          (255427 'end of statement')
                          if(255459 call _cond_test(255430 call ! ok[255408]))
                          {
                            (255437 call = error[254829](255436 call qio_format_error_arg_mismatch i[254843]))
                          }
                          {
                            (255455 call =(255442 call . style[254839] c"str_style")(255454 call stringStyleTerminated(255451 call _cast(255450 call uint(64)[115] 8) t[255406])))
                          }
                        }
                        {
                          if(255565 call _cond_test(255562 call == tmp[255489] QIO_CONV_SET_DONE[235210]))
                          {
                          }
                          {
                            if(255572 call _cond_test(255569 call == tmp[255489] QIO_CONV_UNK[235060]))
                            {
                              (255476 call = error[254829](255475 call qio_format_error_too_many_args))
                            }
                            {
                              (255483 return 1)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    (255578 return 0)
  }
  { scopeless type
    bool[10]
  }
  function channel[237730](?)._write_signed[255593](arg _mt[255606]:_MT[238], arg this[255603]:channel[237730](?) :
  channel[237730](?), arg width[255590] :
  (255589 call uint(64)[115] 32), arg t[255596] :
  int(64)[13], arg i[255600] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255610] syserr[223584]
    (255613 'end of statement')
    unknown byteorder[255619](255618 call qio_channel_byteorder(398941 call . this[255603] c"_channel_internal"))
    (255622 'end of statement')
    {
      unknown tmp[255744] "expr temp" "maybe param" "maybe type" "temp"
      (255746 'move' tmp[255744] width[255590])
      if(255751 call _cond_test(255748 call == tmp[255744] 1))
      {
        unknown x[255634](255632 call _cast(255631 call int(64)[13] 8) t[255596])
        (255637 'end of statement')
        (255646 call = err[255610](255645 call qio_channel_write_int8 0(398949 call . this[255603] c"_channel_internal") x[255634]))
      }
      {
        if(255757 call _cond_test(255754 call == tmp[255744] 2))
        {
          unknown x[255660](255658 call _cast(255657 call int(64)[13] 16) t[255596])
          (255663 'end of statement')
          (255673 call = err[255610](255672 call qio_channel_write_int16 0 byteorder[255619](398958 call . this[255603] c"_channel_internal") x[255660]))
        }
        {
          if(255764 call _cond_test(255761 call == tmp[255744] 4))
          {
            unknown x[255687](255685 call _cast(255684 call int(64)[13] 32) t[255596])
            (255690 'end of statement')
            (255700 call = err[255610](255699 call qio_channel_write_int32 0 byteorder[255619](398967 call . this[255603] c"_channel_internal") x[255687]))
          }
          {
            if(255771 call _cond_test(255768 call == tmp[255744] 8))
            {
              unknown x[255714](255712 call _cast(255711 call int(64)[13] 64) t[255596])
              (255717 'end of statement')
              (255727 call = err[255610](255726 call qio_channel_write_int64 0 byteorder[255619](398976 call . this[255603] c"_channel_internal") x[255714]))
            }
            {
              (255737 call = err[255610](255736 call qio_format_error_arg_mismatch i[255600]))
            }
          }
        }
      }
    }
    (255777 return err[255610])
  }
  { scopeless type
    syserr[223584]
  }
  function channel[237730](?)._read_signed[255792](arg _mt[255805]:_MT[238], arg this[255802]:channel[237730](?) :
  channel[237730](?), arg width[255789] :
  (255788 call uint(64)[115] 32), out arg t[255795] :
  int(64)[13], arg i[255799] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[255809] syserr[223584]
    (255812 'end of statement')
    unknown byteorder[255818](255817 call qio_channel_byteorder(398987 call . this[255802] c"_channel_internal"))
    (255821 'end of statement')
    {
      unknown tmp[255951] "expr temp" "maybe param" "maybe type" "temp"
      (255953 'move' tmp[255951] width[255789])
      if(255958 call _cond_test(255955 call == tmp[255951] 1))
      {
        unknown x[255830](255829 call int(64)[13] 8)
        (255833 'end of statement')
        (255842 call = err[255809](255841 call qio_channel_read_int8 0(398994 call . this[255802] c"_channel_internal") x[255830]))
        (255847 call = t[255795] x[255830])
      }
      {
        if(255964 call _cond_test(255961 call == tmp[255951] 2))
        {
          unknown x[255858](255857 call int(64)[13] 16)
          (255861 'end of statement')
          (255871 call = err[255809](255870 call qio_channel_read_int16 0 byteorder[255818](399004 call . this[255802] c"_channel_internal") x[255858]))
          (255876 call = t[255795] x[255858])
        }
        {
          if(255971 call _cond_test(255968 call == tmp[255951] 4))
          {
            unknown x[255887](255886 call int(64)[13] 32)
            (255890 'end of statement')
            (255900 call = err[255809](255899 call qio_channel_read_int32 0 byteorder[255818](399014 call . this[255802] c"_channel_internal") x[255887]))
            (255905 call = t[255795] x[255887])
          }
          {
            if(255978 call _cond_test(255975 call == tmp[255951] 8))
            {
              unknown x[255916](255915 call int(64)[13] 64)
              (255919 'end of statement')
              (255929 call = err[255809](255928 call qio_channel_read_int64 0 byteorder[255818](399024 call . this[255802] c"_channel_internal") x[255916]))
              (255934 call = t[255795] x[255916])
            }
            {
              (255944 call = err[255809](255943 call qio_format_error_arg_mismatch i[255799]))
            }
          }
        }
      }
    }
    (255984 return err[255809])
  }
  { scopeless type
    syserr[223584]
  }
  function channel[237730](?)._write_unsigned[255999](arg _mt[256012]:_MT[238], arg this[256009]:channel[237730](?) :
  channel[237730](?), arg width[255996] :
  (255995 call uint(64)[115] 32), arg t[256002] :
  uint(64)[115], arg i[256006] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256015] syserr[223584]
    (256018 'end of statement')
    unknown byteorder[256024](256023 call qio_channel_byteorder(399036 call . this[256009] c"_channel_internal"))
    (256027 'end of statement')
    {
      unknown tmp[256149] "expr temp" "maybe param" "maybe type" "temp"
      (256151 'move' tmp[256149] width[255996])
      if(256156 call _cond_test(256153 call == tmp[256149] 1))
      {
        unknown x[256039](256037 call _cast(256036 call uint(64)[115] 8) t[256002])
        (256042 'end of statement')
        (256051 call = err[256015](256050 call qio_channel_write_uint8 0(399044 call . this[256009] c"_channel_internal") x[256039]))
      }
      {
        if(256162 call _cond_test(256159 call == tmp[256149] 2))
        {
          unknown x[256065](256063 call _cast(256062 call uint(64)[115] 16) t[256002])
          (256068 'end of statement')
          (256078 call = err[256015](256077 call qio_channel_write_uint16 0 byteorder[256024](399053 call . this[256009] c"_channel_internal") x[256065]))
        }
        {
          if(256169 call _cond_test(256166 call == tmp[256149] 4))
          {
            unknown x[256092](256090 call _cast(256089 call uint(64)[115] 32) t[256002])
            (256095 'end of statement')
            (256105 call = err[256015](256104 call qio_channel_write_uint32 0 byteorder[256024](399062 call . this[256009] c"_channel_internal") x[256092]))
          }
          {
            if(256176 call _cond_test(256173 call == tmp[256149] 8))
            {
              unknown x[256119](256117 call _cast(256116 call uint(64)[115] 64) t[256002])
              (256122 'end of statement')
              (256132 call = err[256015](256131 call qio_channel_write_uint64 0 byteorder[256024](399071 call . this[256009] c"_channel_internal") x[256119]))
            }
            {
              (256142 call = err[256015](256141 call qio_format_error_arg_mismatch i[256006]))
            }
          }
        }
      }
    }
    (256182 return err[256015])
  }
  function channel[237730](?)._read_unsigned[256196](arg _mt[256209]:_MT[238], arg this[256206]:channel[237730](?) :
  channel[237730](?), arg width[256193] :
  (256192 call uint(64)[115] 32), out arg t[256199] :
  uint(64)[115], arg i[256203] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256212] syserr[223584]
    (256215 'end of statement')
    unknown byteorder[256221](256220 call qio_channel_byteorder(399081 call . this[256206] c"_channel_internal"))
    (256224 'end of statement')
    {
      unknown tmp[256354] "expr temp" "maybe param" "maybe type" "temp"
      (256356 'move' tmp[256354] width[256193])
      if(256361 call _cond_test(256358 call == tmp[256354] 1))
      {
        unknown x[256233](256232 call uint(64)[115] 8)
        (256236 'end of statement')
        (256245 call = err[256212](256244 call qio_channel_read_uint8 0(399088 call . this[256206] c"_channel_internal") x[256233]))
        (256250 call = t[256199] x[256233])
      }
      {
        if(256367 call _cond_test(256364 call == tmp[256354] 2))
        {
          unknown x[256261](256260 call uint(64)[115] 16)
          (256264 'end of statement')
          (256274 call = err[256212](256273 call qio_channel_read_uint16 0 byteorder[256221](399098 call . this[256206] c"_channel_internal") x[256261]))
          (256279 call = t[256199] x[256261])
        }
        {
          if(256374 call _cond_test(256371 call == tmp[256354] 4))
          {
            unknown x[256290](256289 call uint(64)[115] 32)
            (256293 'end of statement')
            (256303 call = err[256212](256302 call qio_channel_read_uint32 0 byteorder[256221](399108 call . this[256206] c"_channel_internal") x[256290]))
            (256308 call = t[256199] x[256290])
          }
          {
            if(256381 call _cond_test(256378 call == tmp[256354] 8))
            {
              unknown x[256319](256318 call uint(64)[115] 64)
              (256322 'end of statement')
              (256332 call = err[256212](256331 call qio_channel_read_uint64 0 byteorder[256221](399118 call . this[256206] c"_channel_internal") x[256319]))
              (256337 call = t[256199] x[256319])
            }
            {
              (256347 call = err[256212](256346 call qio_format_error_arg_mismatch i[256203]))
            }
          }
        }
      }
    }
    (256387 return err[256212])
  }
  function channel[237730](?)._write_real[256401](arg _mt[256414]:_MT[238], arg this[256411]:channel[237730](?) :
  channel[237730](?), arg width[256398] :
  (256397 call uint(64)[115] 32), arg t[256404] :
  real(64)[16], arg i[256408] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256417] syserr[223584]
    (256420 'end of statement')
    unknown byteorder[256426](256425 call qio_channel_byteorder(399130 call . this[256411] c"_channel_internal"))
    (256429 'end of statement')
    {
      unknown tmp[256498] "expr temp" "maybe param" "maybe type" "temp"
      (256500 'move' tmp[256498] width[256398])
      if(256505 call _cond_test(256502 call == tmp[256498] 4))
      {
        unknown x[256441](256439 call _cast(256438 call real(64)[16] 32) t[256404])
        (256444 'end of statement')
        (256454 call = err[256417](256453 call qio_channel_write_float32 0 byteorder[256426](399139 call . this[256411] c"_channel_internal") x[256441]))
      }
      {
        if(256511 call _cond_test(256508 call == tmp[256498] 8))
        {
          unknown x[256468](256466 call _cast(256465 call real(64)[16] 64) t[256404])
          (256471 'end of statement')
          (256481 call = err[256417](256480 call qio_channel_write_float64 0 byteorder[256426](399148 call . this[256411] c"_channel_internal") x[256468]))
        }
        {
          (256491 call = err[256417](256490 call qio_format_error_arg_mismatch i[256408]))
        }
      }
    }
    (256517 return err[256417])
  }
  function channel[237730](?)._read_real[256531](arg _mt[256544]:_MT[238], arg this[256541]:channel[237730](?) :
  channel[237730](?), arg width[256528] :
  (256527 call uint(64)[115] 32), out arg t[256534] :
  real(64)[16], arg i[256538] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256547] syserr[223584]
    (256550 'end of statement')
    unknown byteorder[256556](256555 call qio_channel_byteorder(399158 call . this[256541] c"_channel_internal"))
    (256559 'end of statement')
    {
      unknown tmp[256632] "expr temp" "maybe param" "maybe type" "temp"
      (256634 'move' tmp[256632] width[256528])
      if(256639 call _cond_test(256636 call == tmp[256632] 4))
      {
        unknown x[256568](256567 call real(64)[16] 32)
        (256571 'end of statement')
        (256581 call = err[256547](256580 call qio_channel_read_float32 0 byteorder[256556](399166 call . this[256541] c"_channel_internal") x[256568]))
        (256586 call = t[256534] x[256568])
      }
      {
        if(256645 call _cond_test(256642 call == tmp[256632] 8))
        {
          unknown x[256597](256596 call real(64)[16] 64)
          (256600 'end of statement')
          (256610 call = err[256547](256609 call qio_channel_read_float64 0 byteorder[256556](399176 call . this[256541] c"_channel_internal") x[256597]))
          (256615 call = t[256534] x[256597])
        }
        {
          (256625 call = err[256547](256624 call qio_format_error_arg_mismatch i[256538]))
        }
      }
    }
    (256651 return err[256547])
  }
  function channel[237730](?)._write_complex[256665](arg _mt[256678]:_MT[238], arg this[256675]:channel[237730](?) :
  channel[237730](?), arg width[256662] :
  (256661 call uint(64)[115] 32), arg t[256668] :
  complex(128)[140], arg i[256672] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256682](399186 call ENOERR[223654]) syserr[223584]
    (256685 'end of statement')
    unknown byteorder[256691](256690 call qio_channel_byteorder(399190 call . this[256675] c"_channel_internal"))
    (256694 'end of statement')
    {
      unknown tmp[256833] "expr temp" "maybe param" "maybe type" "temp"
      (256835 'move' tmp[256833] width[256662])
      if(256840 call _cond_test(256837 call == tmp[256833] 8))
      {
        unknown x[256706](256704 call _cast(256703 call complex(128)[140] 64) t[256668])
        (256709 'end of statement')
        unknown re[256715](256712 call . x[256706] c"re")
        (256718 'end of statement')
        unknown im[256723](256720 call . x[256706] c"im")
        (256726 'end of statement')
        (256735 call = err[256682](256734 call qio_channel_write_float32 0 byteorder[256691](399199 call . this[256675] c"_channel_internal") re[256715]))
        if(256753 call _cond_test(256739 call ! err[256682]))
        {
          (256749 call = err[256682](256748 call qio_channel_write_float32 0 byteorder[256691](399208 call . this[256675] c"_channel_internal") im[256723]))
        }
      }
      {
        if(256846 call _cond_test(256843 call == tmp[256833] 16))
        {
          unknown x[256768](256766 call _cast(256765 call complex(128)[140] 128) t[256668])
          (256771 'end of statement')
          unknown re[256777](256774 call . x[256768] c"re")
          (256780 'end of statement')
          unknown im[256785](256782 call . x[256768] c"im")
          (256788 'end of statement')
          (256797 call = err[256682](256796 call qio_channel_write_float64 0 byteorder[256691](399217 call . this[256675] c"_channel_internal") re[256777]))
          if(256815 call _cond_test(256801 call ! err[256682]))
          {
            (256811 call = err[256682](256810 call qio_channel_write_float64 0 byteorder[256691](399226 call . this[256675] c"_channel_internal") im[256785]))
          }
        }
        {
          (256826 call = err[256682](256825 call qio_format_error_arg_mismatch i[256672]))
        }
      }
    }
    (256852 return err[256682])
  }
  function channel[237730](?)._read_complex[256866](arg _mt[256879]:_MT[238], arg this[256876]:channel[237730](?) :
  channel[237730](?), arg width[256863] :
  (256862 call uint(64)[115] 32), out arg t[256869] :
  complex(128)[140], arg i[256873] :
  int(64)[13]) : _unknown[51] "method" "no doc"
  {
    unknown err[256883](399234 call ENOERR[223654]) syserr[223584]
    (256886 'end of statement')
    unknown byteorder[256892](256891 call qio_channel_byteorder(399238 call . this[256876] c"_channel_internal"))
    (256895 'end of statement')
    {
      unknown tmp[257072] "expr temp" "maybe param" "maybe type" "temp"
      (257074 'move' tmp[257072] width[256863])
      if(257079 call _cond_test(257076 call == tmp[257072] 8))
      {
        unknown x[256904](256903 call complex(128)[140] 64)
        (256907 'end of statement')
        unknown re[256914](256913 'typeof'(256910 call . x[256904] c"re"))
        (256917 'end of statement')
        unknown im[256923](256922 'typeof'(256919 call . x[256904] c"im"))
        (256926 'end of statement')
        (256935 call = err[256883](256934 call qio_channel_read_float32 0 byteorder[256892](399246 call . this[256876] c"_channel_internal") re[256914]))
        if(256953 call _cond_test(256939 call ! err[256883]))
        {
          (256949 call = err[256883](256948 call qio_channel_read_float32 0 byteorder[256892](399255 call . this[256876] c"_channel_internal") im[256923]))
        }
        (256969 call = x[256904](256967 call _cast(256966 call complex(128)[140] 64)(256961 call _build_tuple re[256914] im[256923])))
        (256974 call = t[256869] x[256904])
      }
      {
        if(257085 call _cond_test(257082 call == tmp[257072] 16))
        {
          unknown x[256985](256984 call complex(128)[140] 128)
          (256988 'end of statement')
          unknown re[256995](256994 'typeof'(256991 call . x[256985] c"re"))
          (256998 'end of statement')
          unknown im[257004](257003 'typeof'(257000 call . x[256985] c"im"))
          (257007 'end of statement')
          (257016 call = err[256883](257015 call qio_channel_read_float64 0 byteorder[256892](399268 call . this[256876] c"_channel_internal") re[256995]))
          if(257034 call _cond_test(257020 call ! err[256883]))
          {
            (257030 call = err[256883](257029 call qio_channel_read_float64 0 byteorder[256892](399277 call . this[256876] c"_channel_internal") im[257004]))
          }
          (257050 call = x[256985](257048 call _cast(257047 call complex(128)[140] 128)(257042 call _build_tuple re[256995] im[257004])))
          (257055 call = t[256869] x[256985])
        }
        {
          (257065 call = err[256883](257064 call qio_format_error_arg_mismatch i[256873]))
        }
      }
    }
    (257091 return err[256883])
  }
  function channel[237730](?).writef[257103](arg _mt[257113]:_MT[238], arg this[257110]:channel[237730](?) :
  channel[237730](?), arg fmtStr[257100] :
  unknown t[257098], const arg args[257107]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    if(257150 call _cond_test(257127 call !(399293 call . this[257110] c"writing")))
    {
      (257148 call compilerError "writef on read-only channel")
    }
    const origLocale[257162] "const"(257161 call(257157 call . this[257110] c"getLocaleOfIoRequest"))
    (257165 'end of statement')
    unknown err[257168](399297 call ENOERR[223654]) syserr[223584]
    (257171 'end of statement')
    const tmp[258401] "const" "temp"
    (258403 'move' tmp[258401](258399 'deref'(258398 '_wide_get_locale'(257173 call . this[257110] c"home"))))
    {
      {
        Try
        {
          {
            (257181 call(257177 call . this[257110] c"lock"))
          }
        }
        Defer
        {
          {
            (257191 call(257187 call . this[257110] c"unlock"))
          }
        }
        unknown save_style[257202](257201 call(257197 call . this[257110] c"_style"))
        (257205 'end of statement')
        unknown cur[257208] 0 size_t[20654]
        (257211 'end of statement')
        unknown len[257220](257218 call _cast size_t[20654](257214 call . fmtStr[257100] c"size")) size_t[20654]
        (257223 'end of statement')
        unknown conv[257225] qio_conv_t[235056]
        (257228 'end of statement')
        unknown gotConv[257230] bool[10]
        (257233 'end of statement')
        unknown style[257235] iostyle[231844]
        (257238 'end of statement')
        unknown end[257240] size_t[20654]
        (257243 'end of statement')
        unknown argType[257251](257249 call *(257246 call + k[257105] 5) c_int[20549])
        (257254 'end of statement')
        unknown r[257258] unmanaged _channel_regexp_info?[415525]
        (257261 'end of statement')
        Defer
        {
          {
            if(257268 call _cond_test r[257258])
            {
              (257265 call chpl__delete r[257258])
            }
          }
        }
        {
          unknown _indexOfInterest[257296] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[257297] "expr temp" "temp"
          (257306 'move' _iterator[257297](257304 call _getIterator(257317 call chpl_direct_range_iter 0(257311 call -(257313 call . argType[257251] c"size") 1) 1)))
          Defer
          {
            {
              (257333 call _freeIterator _iterator[257297])
            }
          }
          { scopeless type
            (257322 'move' _indexOfInterest[257296](257319 call iteratorIndex _iterator[257297]))
          }
          ForLoop[257298]
          {
            unknown i[257326] "index var" "insert auto destroy"
            (257328 'move' i[257326] _indexOfInterest[257296])
            {
              (257292 call =(257290 call argType[257251] i[257326]) QIO_CONV_UNK[235060])
            }
            label _continueLabel[257301]
            _indexOfInterest[257296]
            _iterator[257297]
          }
          label _breakLabel[257302]
        }
        unknown j[257341] 0
        (257344 'end of statement')
        {
          unknown i[258302] 0
          unknown tmp[258303] "maybe param" "temp"
          (258315 'move' tmp[258303](258313 call chpl_compute_low_param_loop_bound 0(257348 call - k[257105] 1)))
          unknown tmp[258304] "maybe param" "temp"
          (258325 'move' tmp[258304](258323 call chpl_compute_high_param_loop_bound 0(258320 call - k[257105] 1)))
          unknown tmp[258305] "maybe param" "temp"
          (258328 'move' tmp[258305] 1)
          ParamForLoop[258330]
          { i[258302] tmp[258303] tmp[258304] tmp[258305]
            {
              (257354 call = gotConv[257230] 0)
              if(257376 call _cond_test(257360 call <= j[257341] i[258302]))
              {
                (257373 call(399320 call . this[257110] c"_format_reader") fmtStr[257100] cur[257208] len[257220] err[257168] conv[257225] gotConv[257230] style[257235] r[257258] 0)
              }
              (257387 call(399334 call . this[257110] c"_conv_helper") err[257168] conv[257225] gotConv[257230] j[257341] argType[257251])
              unknown domore[257404](257403 call(399345 call . this[257110] c"_conv_sethandler") err[257168](257395 call argType[257251] i[258302]) style[257235] i[258302](257401 call args[257107] i[258302]) 0)
              (257407 'end of statement')
              if(258298 call _cond_test domore[257404])
              {
                (257415 call(257410 call . this[257110] c"_set_style") style[257235])
                {
                  unknown tmp[258192] "expr temp" "maybe param" "maybe type" "temp"
                  (258194 'move' tmp[258192](257421 call argType[257251] i[258302]))
                  if(258204 call _cond_test(258202 call ||(258196 call == tmp[258192] QIO_CONV_ARG_TYPE_SIGNED[235070])(258199 call == tmp[258192] QIO_CONV_ARG_TYPE_BINARY_SIGNED[235075])))
                  {
                    unknown tmp[257438] "temp"(257437 call _toSigned(257435 call args[257107] i[258302]))
                    (257445 call _check_tuple_var_decl tmp[257438] 2)
                    unknown t[257426](257439 call tmp[257438] 0)
                    unknown ok[257428](257442 call tmp[257438] 1)
                    (257450 'end of statement')
                    if(257503 call _cond_test(257453 call ! ok[257428]))
                    {
                      (257460 call = err[257168](257459 call qio_format_error_arg_mismatch i[258302]))
                    }
                    {
                      if(257496 call _cond_test(257469 call ==(257467 call argType[257251] i[258302]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[235075]))
                      {
                        (257481 call = err[257168](257480 call(399373 call . this[257110] c"_write_signed")(257474 call . style[257235] c"max_width_bytes") t[257426] i[258302]))
                      }
                      {
                        Try
                        {
                          {
                            (257492 call(399379 call . this[257110] c"_writeOne") dynamic[230920] t[257426] origLocale[257162])
                          }
                        }
                      }
                    }
                  }
                  {
                    if(258215 call _cond_test(258213 call ||(258207 call == tmp[258192] QIO_CONV_ARG_TYPE_UNSIGNED[235080])(258210 call == tmp[258192] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235085])))
                    {
                      unknown tmp[257524] "temp"(257523 call _toUnsigned(257521 call args[257107] i[258302]))
                      (257531 call _check_tuple_var_decl tmp[257524] 2)
                      unknown t[257512](257525 call tmp[257524] 0)
                      unknown ok[257514](257528 call tmp[257524] 1)
                      (257536 'end of statement')
                      if(257589 call _cond_test(257539 call ! ok[257514]))
                      {
                        (257546 call = err[257168](257545 call qio_format_error_arg_mismatch i[258302]))
                      }
                      {
                        if(257582 call _cond_test(257555 call ==(257553 call argType[257251] i[258302]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235085]))
                        {
                          (257567 call = err[257168](257566 call(399398 call . this[257110] c"_write_unsigned")(257560 call . style[257235] c"max_width_bytes") t[257512] i[258302]))
                        }
                        {
                          Try
                          {
                            {
                              (257578 call(399404 call . this[257110] c"_writeOne") dynamic[230920] t[257512] origLocale[257162])
                            }
                          }
                        }
                      }
                    }
                    {
                      if(258227 call _cond_test(258225 call ||(258219 call == tmp[258192] QIO_CONV_ARG_TYPE_REAL[235090])(258222 call == tmp[258192] QIO_CONV_ARG_TYPE_BINARY_REAL[235095])))
                      {
                        unknown tmp[257610] "temp"(257609 call _toReal(257607 call args[257107] i[258302]))
                        (257617 call _check_tuple_var_decl tmp[257610] 2)
                        unknown t[257598](257611 call tmp[257610] 0)
                        unknown ok[257600](257614 call tmp[257610] 1)
                        (257622 'end of statement')
                        if(257675 call _cond_test(257625 call ! ok[257600]))
                        {
                          (257632 call = err[257168](257631 call qio_format_error_arg_mismatch i[258302]))
                        }
                        {
                          if(257668 call _cond_test(257641 call ==(257639 call argType[257251] i[258302]) QIO_CONV_ARG_TYPE_BINARY_REAL[235095]))
                          {
                            (257653 call = err[257168](257652 call(399423 call . this[257110] c"_write_real")(257646 call . style[257235] c"max_width_bytes") t[257598] i[258302]))
                          }
                          {
                            Try
                            {
                              {
                                (257664 call(399429 call . this[257110] c"_writeOne") dynamic[230920] t[257598] origLocale[257162])
                              }
                            }
                          }
                        }
                      }
                      {
                        if(258239 call _cond_test(258237 call ||(258231 call == tmp[258192] QIO_CONV_ARG_TYPE_IMAG[235100])(258234 call == tmp[258192] QIO_CONV_ARG_TYPE_BINARY_IMAG[235105])))
                        {
                          unknown tmp[257696] "temp"(257695 call _toImag(257693 call args[257107] i[258302]))
                          (257703 call _check_tuple_var_decl tmp[257696] 2)
                          unknown t[257684](257697 call tmp[257696] 0)
                          unknown ok[257686](257700 call tmp[257696] 1)
                          (257708 'end of statement')
                          if(257764 call _cond_test(257711 call ! ok[257686]))
                          {
                            (257718 call = err[257168](257717 call qio_format_error_arg_mismatch i[258302]))
                          }
                          {
                            if(257757 call _cond_test(257727 call ==(257725 call argType[257251] i[258302]) QIO_CONV_ARG_TYPE_BINARY_IMAG[235105]))
                            {
                              (257742 call = err[257168](257741 call(399446 call . this[257110] c"_write_real")(257732 call . style[257235] c"max_width_bytes")(257738 call _cast real(64)[16] t[257684]) i[258302]))
                            }
                            {
                              Try
                              {
                                {
                                  (257753 call(399452 call . this[257110] c"_writeOne") dynamic[230920] t[257684] origLocale[257162])
                                }
                              }
                            }
                          }
                        }
                        {
                          if(258251 call _cond_test(258249 call ||(258243 call == tmp[258192] QIO_CONV_ARG_TYPE_COMPLEX[235110])(258246 call == tmp[258192] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235115])))
                          {
                            unknown tmp[257785] "temp"(257784 call _toComplex(257782 call args[257107] i[258302]))
                            (257792 call _check_tuple_var_decl tmp[257785] 2)
                            unknown t[257773](257786 call tmp[257785] 0)
                            unknown ok[257775](257789 call tmp[257785] 1)
                            (257797 'end of statement')
                            if(257850 call _cond_test(257800 call ! ok[257775]))
                            {
                              (257807 call = err[257168](257806 call qio_format_error_arg_mismatch i[258302]))
                            }
                            {
                              if(257843 call _cond_test(257816 call ==(257814 call argType[257251] i[258302]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235115]))
                              {
                                (257828 call = err[257168](257827 call(399471 call . this[257110] c"_write_complex")(257821 call . style[257235] c"max_width_bytes") t[257773] i[258302]))
                              }
                              {
                                Try
                                {
                                  {
                                    (257839 call(399477 call . this[257110] c"_writeOne") dynamic[230920] t[257773] origLocale[257162])
                                  }
                                }
                              }
                            }
                          }
                          {
                            if(258258 call _cond_test(258255 call == tmp[258192] QIO_CONV_ARG_TYPE_NUMERIC[235065]))
                            {
                              unknown tmp[257870] "temp"(257869 call _toNumeric(257867 call args[257107] i[258302]))
                              (257877 call _check_tuple_var_decl tmp[257870] 2)
                              unknown t[257858](257871 call tmp[257870] 0)
                              unknown ok[257860](257874 call tmp[257870] 1)
                              (257882 'end of statement')
                              if(257908 call _cond_test(257885 call ! ok[257860]))
                              {
                                (257892 call = err[257168](257891 call qio_format_error_arg_mismatch i[258302]))
                              }
                              {
                                Try
                                {
                                  {
                                    (257904 call(399489 call . this[257110] c"_writeOne") dynamic[230920] t[257858] origLocale[257162])
                                  }
                                }
                              }
                            }
                            {
                              if(258265 call _cond_test(258262 call == tmp[258192] QIO_CONV_ARG_TYPE_CHAR[235120]))
                              {
                                unknown tmp[257929] "temp"(257928 call _toChar(257926 call args[257107] i[258302]))
                                (257936 call _check_tuple_var_decl tmp[257929] 2)
                                unknown t[257917](257930 call tmp[257929] 0)
                                unknown ok[257919](257933 call tmp[257929] 1)
                                (257941 'end of statement')
                                if(257971 call _cond_test(257944 call ! ok[257919]))
                                {
                                  (257951 call = err[257168](257950 call qio_format_error_arg_mismatch i[258302]))
                                }
                                {
                                  Try
                                  {
                                    {
                                      (257967 call(399501 call . this[257110] c"_writeOne") dynamic[230920](257961 'new'(257965 call ioChar[238633] t[257917])) origLocale[257162])
                                    }
                                  }
                                }
                              }
                              {
                                if(258272 call _cond_test(258269 call == tmp[258192] QIO_CONV_ARG_TYPE_BINARY_STRING[235130]))
                                {
                                  unknown tmp[257992] "temp"(257991 call _toBytes(257989 call args[257107] i[258302]))
                                  (257999 call _check_tuple_var_decl tmp[257992] 2)
                                  unknown t[257980](257993 call tmp[257992] 0)
                                  unknown ok[257982](257996 call tmp[257992] 1)
                                  (258004 'end of statement')
                                  if(258030 call _cond_test(258007 call ! ok[257982]))
                                  {
                                    (258014 call = err[257168](258013 call qio_format_error_arg_mismatch i[258302]))
                                  }
                                  {
                                    Try
                                    {
                                      {
                                        (258026 call(399514 call . this[257110] c"_writeOne") dynamic[230920] t[257980] origLocale[257162])
                                      }
                                    }
                                  }
                                }
                                {
                                  if(258279 call _cond_test(258276 call == tmp[258192] QIO_CONV_ARG_TYPE_STRING[235125]))
                                  {
                                    unknown tmp[258051] "temp"(258050 call _toString(258048 call args[257107] i[258302]))
                                    (258058 call _check_tuple_var_decl tmp[258051] 2)
                                    unknown t[258039](258052 call tmp[258051] 0)
                                    unknown ok[258041](258055 call tmp[258051] 1)
                                    (258063 'end of statement')
                                    if(258089 call _cond_test(258066 call ! ok[258041]))
                                    {
                                      (258073 call = err[257168](258072 call qio_format_error_arg_mismatch i[258302]))
                                    }
                                    {
                                      Try
                                      {
                                        {
                                          (258085 call(399526 call . this[257110] c"_writeOne") dynamic[230920] t[258039] origLocale[257162])
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if(258286 call _cond_test(258283 call == tmp[258192] QIO_CONV_ARG_TYPE_REGEXP[235140]))
                                    {
                                      (258102 call = err[257168](258101 call qio_format_error_write_regexp))
                                    }
                                    {
                                      if(258293 call _cond_test(258290 call == tmp[258192] QIO_CONV_ARG_TYPE_REPR[235135]))
                                      {
                                        Try
                                        {
                                          {
                                            (258121 call(399535 call . this[257110] c"_writeOne") dynamic[230920](258119 call args[257107] i[258302]) origLocale[257162])
                                          }
                                        }
                                      }
                                      {
                                        (258186 'throw'(258130 'new'(_chpl_manager = _owned[30](?))(258185 call IllegalArgumentError[388778](?)(258156 call +(258153 call + "args("(258151 call _cast string[26] i[258302])) ")")(258183 call + "writef internal error "(258181 call _cast string[26](258179 call argType[257251] i[258302]))))))
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          label _unused_continueLabel[258307]
          label _breakLabel[258306]
        }
        if(258386 call _cond_test(258340 call ! err[257168]))
        {
          if(258365 call _cond_test(258344 call < cur[257208] len[257220]))
          {
            unknown dummy[258347] c_int[20549]
            (258350 'end of statement')
            (258363 call(399551 call . this[257110] c"_format_reader") fmtStr[257100] cur[257208] len[257220] err[257168] conv[257225] gotConv[257230] style[257235] r[257258] 0)
          }
          if(258382 call _cond_test(258372 call < cur[257208] len[257220]))
          {
            (258378 call = err[257168](258377 call qio_format_error_too_few_args))
          }
        }
        (258396 call(258391 call . this[257110] c"_set_style") save_style[257202])
      }
      (258406 'on block' 0 tmp[258401])
    }
    if(258437 call _cond_test err[257168])
    {
      Try
      {
        {
          (258433 call(258411 call . this[257110] c"_ch_ioerror") err[257168] "in channel.writef(fmt:string)")
        }
      }
    }
    (258443 return 1)
  }
  where {
    (257124 call ||(257119 call isStringType t[257098])(257123 call isBytesType t[257098]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237730](?).writef[258457](arg _mt[258462]:_MT[238], arg this[258459]:channel[237730](?) :
  channel[237730](?), arg fmtStr[258454] :
  unknown t[258452]) : _unknown[51] throws "method"
  {
    if(258483 call _cond_test(258476 call !(399572 call . this[258459] c"writing")))
    {
      (258481 call compilerError "writef on read-only channel")
    }
    unknown err[258491](399576 call ENOERR[223654]) syserr[223584]
    (258494 'end of statement')
    const tmp[258662] "const" "temp"
    (258664 'move' tmp[258662](258660 'deref'(258659 '_wide_get_locale'(258496 call . this[258459] c"home"))))
    {
      {
        Try
        {
          {
            (258504 call(258500 call . this[258459] c"lock"))
          }
        }
        Defer
        {
          {
            (258514 call(258510 call . this[258459] c"unlock"))
          }
        }
        unknown save_style[258525](258524 call(258520 call . this[258459] c"_style"))
        (258528 'end of statement')
        unknown cur[258531] 0 size_t[20654]
        (258534 'end of statement')
        unknown len[258543](258541 call _cast size_t[20654](258537 call . fmtStr[258454] c"size")) size_t[20654]
        (258546 'end of statement')
        unknown conv[258548] qio_conv_t[235056]
        (258551 'end of statement')
        unknown gotConv[258553] bool[10]
        (258556 'end of statement')
        unknown style[258558] iostyle[231844]
        (258561 'end of statement')
        unknown end[258563] size_t[20654]
        (258566 'end of statement')
        unknown dummy[258568] c_int[20549]
        (258571 'end of statement')
        unknown r[258575] unmanaged _channel_regexp_info?[415525]
        (258578 'end of statement')
        Defer
        {
          {
            if(258585 call _cond_test r[258575])
            {
              (258582 call chpl__delete r[258575])
            }
          }
        }
        (258604 call(399589 call . this[258459] c"_format_reader") fmtStr[258454] cur[258531] len[258543] err[258491] conv[258548] gotConv[258553] style[258558] r[258575] 0)
        if(258623 call _cond_test(258607 call ! err[258491]))
        {
          if(258618 call _cond_test gotConv[258553])
          {
            (258614 call = err[258491](258613 call qio_format_error_too_few_args))
          }
        }
        if(258647 call _cond_test(258628 call ! err[258491]))
        {
          if(258642 call _cond_test(258632 call < cur[258531] len[258543]))
          {
            (258638 call = err[258491](258637 call qio_format_error_too_few_args))
          }
        }
        (258657 call(258652 call . this[258459] c"_set_style") save_style[258525])
      }
      (258667 'on block' 0 tmp[258662])
    }
    if(258698 call _cond_test err[258491])
    {
      Try
      {
        {
          (258694 call(258672 call . this[258459] c"_ch_ioerror") err[258491] "in channel.writef(fmt:string, ...)")
        }
      }
    }
    (258704 return 1)
  }
  where {
    (258473 call ||(258468 call isStringType t[258452])(258472 call isBytesType t[258452]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237730](?).readf[258718](arg _mt[258728]:_MT[238], arg this[258725]:channel[237730](?) :
  channel[237730](?), arg fmtStr[258715] :
  unknown t[258713], ref arg args[258722]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    if(258763 call _cond_test(399614 call . this[258725] c"writing"))
    {
      (258761 call compilerError "readf on write-only channel")
    }
    const origLocale[258775] "const"(258774 call(258770 call . this[258725] c"getLocaleOfIoRequest"))
    (258778 'end of statement')
    unknown err[258781](399618 call ENOERR[223654]) syserr[223584]
    (258784 'end of statement')
    const tmp[260866] "const" "temp"
    (260868 'move' tmp[260866](260864 'deref'(260863 '_wide_get_locale'(258786 call . this[258725] c"home"))))
    {
      {
        Try
        {
          {
            (258794 call(258790 call . this[258725] c"lock"))
          }
        }
        Defer
        {
          {
            (258804 call(258800 call . this[258725] c"unlock"))
          }
        }
        unknown save_style[258815](258814 call(258810 call . this[258725] c"_style"))
        (258818 'end of statement')
        Defer
        {
          {
            (258825 call(258820 call . this[258725] c"_set_style") save_style[258815])
          }
        }
        unknown cur[258832] 0 size_t[20654]
        (258835 'end of statement')
        unknown len[258844](258842 call _cast size_t[20654](258838 call . fmtStr[258715] c"size")) size_t[20654]
        (258847 'end of statement')
        unknown conv[258849] qio_conv_t[235056]
        (258852 'end of statement')
        unknown gotConv[258854] bool[10]
        (258857 'end of statement')
        unknown style[258859] iostyle[231844]
        (258862 'end of statement')
        unknown end[258864] size_t[20654]
        (258867 'end of statement')
        unknown argType[258875](258873 call *(258870 call + k[258720] 5) c_int[20549])
        (258878 'end of statement')
        unknown r[258882] unmanaged _channel_regexp_info?[415525]
        (258885 'end of statement')
        Defer
        {
          {
            if(258892 call _cond_test r[258882])
            {
              (258889 call chpl__delete r[258882])
            }
          }
        }
        {
          unknown _indexOfInterest[258920] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[258921] "expr temp" "temp"
          (258930 'move' _iterator[258921](258928 call _getIterator(258941 call chpl_direct_range_iter 0(258935 call -(258937 call . argType[258875] c"size") 1) 1)))
          Defer
          {
            {
              (258957 call _freeIterator _iterator[258921])
            }
          }
          { scopeless type
            (258946 'move' _indexOfInterest[258920](258943 call iteratorIndex _iterator[258921]))
          }
          ForLoop[258922]
          {
            unknown i[258950] "index var" "insert auto destroy"
            (258952 'move' i[258950] _indexOfInterest[258920])
            {
              (258916 call =(258914 call argType[258875] i[258950]) QIO_CONV_UNK[235060])
            }
            label _continueLabel[258925]
            _indexOfInterest[258920]
            _iterator[258921]
          }
          label _breakLabel[258926]
        }
        (258970 call = err[258781](258969 call qio_channel_mark 0(399638 call . this[258725] c"_channel_internal")))
        if(260858 call _cond_test(258974 call ! err[258781]))
        {
          Try
          {
            {
              unknown j[258977] 0
              (258980 'end of statement')
              {
                unknown i[260715] 0
                unknown tmp[260716] "maybe param" "temp"
                (260728 'move' tmp[260716](260726 call chpl_compute_low_param_loop_bound 0(258985 call - k[258720] 1)))
                unknown tmp[260717] "maybe param" "temp"
                (260738 'move' tmp[260717](260736 call chpl_compute_high_param_loop_bound 0(260733 call - k[258720] 1)))
                unknown tmp[260718] "maybe param" "temp"
                (260741 'move' tmp[260718] 1)
                ParamForLoop[260743]
                { i[260715] tmp[260716] tmp[260717] tmp[260718]
                  {
                    if(259137 call _cond_test(258991 call <= j[258977] i[260715]))
                    {
                      (259004 call(399646 call . this[258725] c"_format_reader") fmtStr[258715] cur[258832] len[258844] err[258781] conv[258849] gotConv[258854] style[258859] r[258882] 1)
                      if(259133 call _cond_test(259009 call != r[258882] nil[44]))
                      {
                        const rnn[259014] "const"(259012 call postfix! r[258882])
                        (259017 'end of statement')
                        if(259129 call _cond_test(259020 call . rnn[259014] c"hasRegexp"))
                        {
                          if(259044 call _cond_test(259034 call >(259031 call -(259028 call + i[260715](259025 call . rnn[259014] c"ncaptures")) 1) k[258720]))
                          {
                            (259040 call = err[258781](259039 call qio_format_error_too_few_args))
                          }
                          {
                            unknown _indexOfInterest[259086] "an _indexOfInterest or chpl__followIdx variable" "temp"
                            unknown _iterator[259087] "expr temp" "temp"
                            (259096 'move' _iterator[259087](259094 call _getIterator(259106 call chpl_direct_counted_range_iter 0(259102 call . rnn[259014] c"ncaptures"))))
                            Defer
                            {
                              {
                                (259122 call _freeIterator _iterator[259087])
                              }
                            }
                            { scopeless type
                              (259111 'move' _indexOfInterest[259086](259108 call iteratorIndex _iterator[259087]))
                            }
                            ForLoop[259088]
                            {
                              unknown z[259115] "index var" "insert auto destroy"
                              (259117 'move' z[259115] _indexOfInterest[259086])
                              {
                                if(259081 call _cond_test(259067 call <=(259061 call + i[260715] z[259115])(259064 call . argType[258875] c"size")))
                                {
                                  (259077 call =(259075 call argType[258875](259072 call + i[260715] z[259115])) QIO_CONV_SET_CAPTURE[235205])
                                }
                              }
                              label _continueLabel[259091]
                              _indexOfInterest[259086]
                              _iterator[259087]
                            }
                            label _breakLabel[259092]
                          }
                        }
                      }
                    }
                    (259149 call(399669 call . this[258725] c"_conv_helper") err[258781] conv[258849] gotConv[258854] j[258977] argType[258875])
                    unknown domore[259166](259165 call(399678 call . this[258725] c"_conv_sethandler") err[258781](259157 call argType[258875] i[260715]) style[258859] i[260715](259163 call args[258722] i[260715]) 0)
                    (259169 'end of statement')
                    if(260711 call _cond_test domore[259166])
                    {
                      (259177 call(259172 call . this[258725] c"_set_style") style[258859])
                      {
                        unknown tmp[260598] "expr temp" "maybe param" "maybe type" "temp"
                        (260600 'move' tmp[260598](259183 call argType[258875] i[260715]))
                        if(260610 call _cond_test(260608 call ||(260602 call == tmp[260598] QIO_CONV_ARG_TYPE_SIGNED[235070])(260605 call == tmp[260598] QIO_CONV_ARG_TYPE_BINARY_SIGNED[235075])))
                        {
                          unknown tmp[259200] "temp"(259199 call _toSigned(259197 call args[258722] i[260715]))
                          (259207 call _check_tuple_var_decl tmp[259200] 2)
                          unknown t[259188](259201 call tmp[259200] 0)
                          unknown ok[259190](259204 call tmp[259200] 1)
                          (259212 'end of statement')
                          if(259291 call _cond_test(259215 call ! ok[259190]))
                          {
                            (259222 call = err[258781](259221 call qio_format_error_arg_mismatch i[260715]))
                          }
                          {
                            unknown ti[259227] int(64)[13]
                            (259230 'end of statement')
                            if(259264 call _cond_test(259237 call ==(259235 call argType[258875] i[260715]) QIO_CONV_ARG_TYPE_BINARY_SIGNED[235075]))
                            {
                              (259249 call = err[258781](259248 call(399706 call . this[258725] c"_read_signed")(259242 call . style[258859] c"max_width_bytes") ti[259227] i[260715]))
                            }
                            {
                              Try
                              {
                                {
                                  (259260 call(399712 call . this[258725] c"_readOne") dynamic[230920] ti[259227] origLocale[258775])
                                }
                              }
                            }
                            if(259286 call _cond_test(259271 call ! err[258781]))
                            {
                              (259283 call = err[258781](259282 call _setIfPrimitive(259278 call args[258722] i[260715]) ti[259227] i[260715]))
                            }
                          }
                        }
                        {
                          if(260621 call _cond_test(260619 call ||(260613 call == tmp[260598] QIO_CONV_ARG_TYPE_UNSIGNED[235080])(260616 call == tmp[260598] QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235085])))
                          {
                            unknown tmp[259312] "temp"(259311 call _toUnsigned(259309 call args[258722] i[260715]))
                            (259319 call _check_tuple_var_decl tmp[259312] 2)
                            unknown t[259300](259313 call tmp[259312] 0)
                            unknown ok[259302](259316 call tmp[259312] 1)
                            (259324 'end of statement')
                            if(259403 call _cond_test(259327 call ! ok[259302]))
                            {
                              (259334 call = err[258781](259333 call qio_format_error_arg_mismatch i[260715]))
                            }
                            {
                              unknown ti[259339] uint(64)[115]
                              (259342 'end of statement')
                              if(259376 call _cond_test(259349 call ==(259347 call argType[258875] i[260715]) QIO_CONV_ARG_TYPE_BINARY_UNSIGNED[235085]))
                              {
                                (259361 call = err[258781](259360 call(399737 call . this[258725] c"_read_unsigned")(259354 call . style[258859] c"max_width_bytes") ti[259339] i[260715]))
                              }
                              {
                                Try
                                {
                                  {
                                    (259372 call(399743 call . this[258725] c"_readOne") dynamic[230920] ti[259339] origLocale[258775])
                                  }
                                }
                              }
                              if(259398 call _cond_test(259383 call ! err[258781]))
                              {
                                (259395 call = err[258781](259394 call _setIfPrimitive(259390 call args[258722] i[260715]) ti[259339] i[260715]))
                              }
                            }
                          }
                          {
                            if(260633 call _cond_test(260631 call ||(260625 call == tmp[260598] QIO_CONV_ARG_TYPE_REAL[235090])(260628 call == tmp[260598] QIO_CONV_ARG_TYPE_BINARY_REAL[235095])))
                            {
                              unknown tmp[259424] "temp"(259423 call _toReal(259421 call args[258722] i[260715]))
                              (259431 call _check_tuple_var_decl tmp[259424] 2)
                              unknown t[259412](259425 call tmp[259424] 0)
                              unknown ok[259414](259428 call tmp[259424] 1)
                              (259436 'end of statement')
                              if(259515 call _cond_test(259439 call ! ok[259414]))
                              {
                                (259446 call = err[258781](259445 call qio_format_error_arg_mismatch i[260715]))
                              }
                              {
                                unknown ti[259451] real(64)[16]
                                (259454 'end of statement')
                                if(259488 call _cond_test(259461 call ==(259459 call argType[258875] i[260715]) QIO_CONV_ARG_TYPE_BINARY_REAL[235095]))
                                {
                                  (259473 call = err[258781](259472 call(399768 call . this[258725] c"_read_real")(259466 call . style[258859] c"max_width_bytes") ti[259451] i[260715]))
                                }
                                {
                                  Try
                                  {
                                    {
                                      (259484 call(399774 call . this[258725] c"_readOne") dynamic[230920] ti[259451] origLocale[258775])
                                    }
                                  }
                                }
                                if(259510 call _cond_test(259495 call ! err[258781]))
                                {
                                  (259507 call = err[258781](259506 call _setIfPrimitive(259502 call args[258722] i[260715]) ti[259451] i[260715]))
                                }
                              }
                            }
                            {
                              if(260645 call _cond_test(260643 call ||(260637 call == tmp[260598] QIO_CONV_ARG_TYPE_IMAG[235100])(260640 call == tmp[260598] QIO_CONV_ARG_TYPE_BINARY_IMAG[235105])))
                              {
                                unknown tmp[259536] "temp"(259535 call _toImag(259533 call args[258722] i[260715]))
                                (259543 call _check_tuple_var_decl tmp[259536] 2)
                                unknown t[259524](259537 call tmp[259536] 0)
                                unknown ok[259526](259540 call tmp[259536] 1)
                                (259548 'end of statement')
                                if(259640 call _cond_test(259551 call ! ok[259526]))
                                {
                                  (259558 call = err[258781](259557 call qio_format_error_arg_mismatch i[260715]))
                                }
                                {
                                  unknown ti[259563] imag(64)[130]
                                  (259566 'end of statement')
                                  if(259614 call _cond_test(259573 call ==(259571 call argType[258875] i[260715]) QIO_CONV_ARG_TYPE_BINARY_IMAG[235105]))
                                  {
                                    unknown tr[259576] real(64)[16]
                                    (259579 'end of statement')
                                    (259591 call = err[258781](259590 call(399797 call . this[258725] c"_read_real")(259584 call . style[258859] c"max_width_bytes") tr[259576] i[260715]))
                                    (259599 call = ti[259563](259597 call _cast imag(64)[130] tr[259576]))
                                  }
                                  {
                                    Try
                                    {
                                      {
                                        (259610 call(399805 call . this[258725] c"_readOne") dynamic[230920] ti[259563] origLocale[258775])
                                      }
                                    }
                                  }
                                  if(259635 call _cond_test(259620 call ! err[258781]))
                                  {
                                    (259632 call = err[258781](259631 call _setIfPrimitive(259627 call args[258722] i[260715]) ti[259563] i[260715]))
                                  }
                                }
                              }
                              {
                                if(260657 call _cond_test(260655 call ||(260649 call == tmp[260598] QIO_CONV_ARG_TYPE_COMPLEX[235110])(260652 call == tmp[260598] QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235115])))
                                {
                                  unknown tmp[259661] "temp"(259660 call _toComplex(259658 call args[258722] i[260715]))
                                  (259668 call _check_tuple_var_decl tmp[259661] 2)
                                  unknown t[259649](259662 call tmp[259661] 0)
                                  unknown ok[259651](259665 call tmp[259661] 1)
                                  (259673 'end of statement')
                                  if(259752 call _cond_test(259676 call ! ok[259651]))
                                  {
                                    (259683 call = err[258781](259682 call qio_format_error_arg_mismatch i[260715]))
                                  }
                                  {
                                    unknown ti[259688] complex(128)[140]
                                    (259691 'end of statement')
                                    if(259725 call _cond_test(259698 call ==(259696 call argType[258875] i[260715]) QIO_CONV_ARG_TYPE_BINARY_COMPLEX[235115]))
                                    {
                                      (259710 call = err[258781](259709 call(399830 call . this[258725] c"_read_complex")(259703 call . style[258859] c"max_width_bytes") ti[259688] i[260715]))
                                    }
                                    {
                                      Try
                                      {
                                        {
                                          (259721 call(399836 call . this[258725] c"_readOne") dynamic[230920] ti[259688] origLocale[258775])
                                        }
                                      }
                                    }
                                    if(259747 call _cond_test(259732 call ! err[258781]))
                                    {
                                      (259744 call = err[258781](259743 call _setIfPrimitive(259739 call args[258722] i[260715]) ti[259688] i[260715]))
                                    }
                                  }
                                }
                                {
                                  if(260664 call _cond_test(260661 call == tmp[260598] QIO_CONV_ARG_TYPE_NUMERIC[235065]))
                                  {
                                    unknown tmp[259772] "temp"(259771 call _toNumeric(259769 call args[258722] i[260715]))
                                    (259779 call _check_tuple_var_decl tmp[259772] 2)
                                    unknown t[259760](259773 call tmp[259772] 0)
                                    unknown ok[259762](259776 call tmp[259772] 1)
                                    (259784 'end of statement')
                                    if(259837 call _cond_test(259787 call ! ok[259762]))
                                    {
                                      (259794 call = err[258781](259793 call qio_format_error_arg_mismatch i[260715]))
                                    }
                                    {
                                      unknown ti[259799] t[259760]
                                      (259802 'end of statement')
                                      Try
                                      {
                                        {
                                          (259812 call(399855 call . this[258725] c"_readOne") dynamic[230920] ti[259799] origLocale[258775])
                                        }
                                      }
                                      if(259832 call _cond_test(259817 call ! err[258781]))
                                      {
                                        (259829 call = err[258781](259828 call _setIfPrimitive(259824 call args[258722] i[260715]) ti[259799] i[260715]))
                                      }
                                    }
                                  }
                                  {
                                    if(260671 call _cond_test(260668 call == tmp[260598] QIO_CONV_ARG_TYPE_CHAR[235120]))
                                    {
                                      unknown tmp[259857] "temp"(259856 call _toChar(259854 call args[258722] i[260715]))
                                      (259864 call _check_tuple_var_decl tmp[259857] 2)
                                      unknown t[259845](259858 call tmp[259857] 0)
                                      unknown ok[259847](259861 call tmp[259857] 1)
                                      (259869 'end of statement')
                                      unknown chr[259876](259871 'new'(259875 call ioChar[238633] t[259845]))
                                      (259879 'end of statement')
                                      if(259904 call _cond_test(259881 call ! ok[259847]))
                                      {
                                        (259888 call = err[258781](259887 call qio_format_error_arg_mismatch i[260715]))
                                      }
                                      {
                                        Try
                                        {
                                          {
                                            (259900 call(399875 call . this[258725] c"_readOne") dynamic[230920] chr[259876] origLocale[258775])
                                          }
                                        }
                                      }
                                      if(259924 call _cond_test(259910 call ! err[258781]))
                                      {
                                        (259922 call _setIfChar(259916 call args[258722] i[260715])(259919 call . chr[259876] c"ch"))
                                      }
                                    }
                                    {
                                      if(260678 call _cond_test(260675 call == tmp[260598] QIO_CONV_ARG_TYPE_BINARY_STRING[235130]))
                                      {
                                        unknown tmp[259945] "temp"(259944 call _toBytes(259942 call args[258722] i[260715]))
                                        (259952 call _check_tuple_var_decl tmp[259945] 2)
                                        unknown t[259933](259946 call tmp[259945] 0)
                                        unknown ok[259935](259949 call tmp[259945] 1)
                                        (259957 'end of statement')
                                        if(259983 call _cond_test(259960 call ! ok[259935]))
                                        {
                                          (259967 call = err[258781](259966 call qio_format_error_arg_mismatch i[260715]))
                                        }
                                        {
                                          Try
                                          {
                                            {
                                              (259979 call(399890 call . this[258725] c"_readOne") dynamic[230920] t[259933] origLocale[258775])
                                            }
                                          }
                                        }
                                        if(260004 call _cond_test(259989 call ! err[258781]))
                                        {
                                          (260001 call = err[258781](260000 call _setIfPrimitive(259996 call args[258722] i[260715]) t[259933] i[260715]))
                                        }
                                      }
                                      {
                                        if(260685 call _cond_test(260682 call == tmp[260598] QIO_CONV_ARG_TYPE_STRING[235125]))
                                        {
                                          unknown tmp[260025] "temp"(260024 call _toString(260022 call args[258722] i[260715]))
                                          (260032 call _check_tuple_var_decl tmp[260025] 2)
                                          unknown t[260013](260026 call tmp[260025] 0)
                                          unknown ok[260015](260029 call tmp[260025] 1)
                                          (260037 'end of statement')
                                          if(260063 call _cond_test(260040 call ! ok[260015]))
                                          {
                                            (260047 call = err[258781](260046 call qio_format_error_arg_mismatch i[260715]))
                                          }
                                          {
                                            Try
                                            {
                                              {
                                                (260059 call(399908 call . this[258725] c"_readOne") dynamic[230920] t[260013] origLocale[258775])
                                              }
                                            }
                                          }
                                          if(260084 call _cond_test(260069 call ! err[258781]))
                                          {
                                            (260081 call = err[258781](260080 call _setIfPrimitive(260076 call args[258722] i[260715]) t[260013] i[260715]))
                                          }
                                        }
                                        {
                                          if(260692 call _cond_test(260689 call == tmp[260598] QIO_CONV_ARG_TYPE_REGEXP[235140]))
                                          {
                                            unknown tmp[260105] "temp"(260104 call _toRegexp(260102 call args[258722] i[260715]))
                                            (260112 call _check_tuple_var_decl tmp[260105] 2)
                                            unknown t[260093](260106 call tmp[260105] 0)
                                            unknown ok[260095](260109 call tmp[260105] 1)
                                            (260117 'end of statement')
                                            if(260311 call _cond_test(260120 call ! ok[260095]))
                                            {
                                              (260127 call = err[258781](260126 call qio_format_error_arg_mismatch i[260715]))
                                            }
                                            {
                                              if(260145 call _cond_test(260133 call == r[258882] nil[44]))
                                              {
                                                (260142 call = r[258882](260138 'new'(_chpl_manager = unmanaged[220](?))(260141 call _channel_regexp_info[398660](?))))
                                              }
                                              const rnn[260154] "const"(260152 call postfix! r[258882])
                                              (260157 'end of statement')
                                              (260163 call(260159 call . rnn[260154] c"clear"))
                                              (260175 call =(260166 call . rnn[260154] c"theRegexp")(260172 call . t[260093] c"_regexp"))
                                              (260183 call =(260179 call . rnn[260154] c"hasRegexp") 1)
                                              (260191 call =(260187 call . rnn[260154] c"releaseRegexp") 0)
                                              (260201 call(399930 call . this[258725] c"_match_regexp_if_needed") cur[258832] len[258844] err[258781] style[258859] rnn[260154])
                                              if(260224 call _cond_test(260214 call >(260211 call -(260208 call + i[260715](260205 call . rnn[260154] c"ncaptures")) 1) k[258720]))
                                              {
                                                (260220 call = err[258781](260219 call qio_format_error_too_few_args))
                                              }
                                              {
                                                unknown _indexOfInterest[260268] "an _indexOfInterest or chpl__followIdx variable" "temp"
                                                unknown _iterator[260269] "expr temp" "temp"
                                                (260278 'move' _iterator[260269](260276 call _getIterator(260288 call chpl_direct_counted_range_iter 0(260284 call . rnn[260154] c"ncaptures"))))
                                                Defer
                                                {
                                                  {
                                                    (260304 call _freeIterator _iterator[260269])
                                                  }
                                                }
                                                { scopeless type
                                                  (260293 'move' _indexOfInterest[260268](260290 call iteratorIndex _iterator[260269]))
                                                }
                                                ForLoop[260270]
                                                {
                                                  unknown z[260297] "index var" "insert auto destroy"
                                                  (260299 'move' z[260297] _indexOfInterest[260268])
                                                  {
                                                    if(260263 call _cond_test(260246 call <=(260240 call + i[260715] z[260297])(260243 call . argType[258875] c"size")))
                                                    {
                                                      (260259 call =(260257 call argType[258875](260254 call +(260251 call + i[260715] z[260297]) 1)) QIO_CONV_SET_CAPTURE[235205])
                                                    }
                                                  }
                                                  label _continueLabel[260273]
                                                  _indexOfInterest[260268]
                                                  _iterator[260269]
                                                }
                                                label _breakLabel[260274]
                                              }
                                            }
                                          }
                                          {
                                            if(260699 call _cond_test(260696 call == tmp[260598] QIO_CONV_ARG_TYPE_REPR[235135]))
                                            {
                                              Try
                                              {
                                                {
                                                  (260330 call(399949 call . this[258725] c"_readOne") dynamic[230920](260328 call args[258722] i[260715]) origLocale[258775])
                                                }
                                              }
                                            }
                                            {
                                              if(260706 call _cond_test(260703 call == tmp[260598] QIO_CONV_SET_CAPTURE[235205]))
                                              {
                                                if(260543 call _cond_test(260341 call == r[258882] nil[44]))
                                                {
                                                  (260347 call = err[258781](260346 call qio_format_error_bad_regexp))
                                                }
                                                {
                                                  const rnn[260354] "const"(260352 call postfix! r[258882])
                                                  (260357 'end of statement')
                                                  (260366 call(399960 call . this[258725] c"_match_regexp_if_needed") cur[258832] len[258844] err[258781] style[258859] rnn[260354])
                                                  if(260539 call _cond_test(260378 call >=(260371 call . rnn[260354] c"capturei")(260375 call . rnn[260354] c"ncaptures")))
                                                  {
                                                    (260384 call = err[258781](260383 call qio_format_error_bad_regexp))
                                                  }
                                                  {
                                                    if(260526 call _cond_test(260395 call _isIoPrimitiveType(260393 'typeof'(260392 call args[258722] i[260715]))))
                                                    {
                                                      Try
                                                      {
                                                        {
                                                          if(260493 call _cond_test(260402 call ==(260400 'typeof'(260399 call args[258722] i[260715])) string[26]))
                                                          {
                                                            (260423 call =(260407 call args[258722] i[260715])(260422 call(260418 call .(260417 call(260409 call . rnn[260354] c"capArr")(260413 call . rnn[260354] c"capturei")) c"decode")))
                                                          }
                                                          {
                                                            if(260487 call _cond_test(260433 call isEnumType(260431 'typeof'(260430 call args[258722] i[260715]))))
                                                            {
                                                              (260460 call =(260437 call args[258722] i[260715])(260458 call _cast(260457 'typeof'(260456 call args[258722] i[260715]))(260452 call(260448 call .(260447 call(260439 call . rnn[260354] c"capArr")(260443 call . rnn[260354] c"capturei")) c"decode"))))
                                                            }
                                                            {
                                                              (260484 call =(260466 call args[258722] i[260715])(260482 call _cast(260481 'typeof'(260480 call args[258722] i[260715]))(260476 call(260468 call . rnn[260354] c"capArr")(260472 call . rnn[260354] c"capturei"))))
                                                            }
                                                          }
                                                        }
                                                      }
                                                      Catch e : DecodeError
                                                      {
                                                        unknown tmp[354656] "temp"(354660 'dynamic_cast' unmanaged DecodeError?[415600](354659 'current error'))
                                                        if(354663 '!=' tmp[354656] nil[44])
                                                        {
                                                          unknown e[354669](354674 'new'(354672 call _owned[30](?)(354670 'to non nilable class' tmp[354656])))
                                                          {
                                                            (260509 call = err[258781](260508 call qio_format_error_arg_mismatch i[260715]))
                                                          }
                                                        }
                                                        {
                                                        }
                                                      }
                                                      Catch
                                                      {
                                                        unknown tmp[354677] "temp"(354680 'current error')
                                                        unknown chpl_anon_error[354683](354688 'new'(354686 call _owned[30](?)(354684 'to non nilable class' tmp[354677])))
                                                        {
                                                          (260518 call = err[258781](260517 call qio_format_error_bad_regexp))
                                                        }
                                                      }
                                                    }
                                                    (260536 call +=(260532 call . rnn[260354] c"capturei") 1)
                                                  }
                                                }
                                              }
                                              {
                                                (260592 'throw'(260552 'new'(_chpl_manager = _owned[30](?))(260591 call IllegalArgumentError[388778](?)(260562 call +(260559 call + "args("(260557 call _cast string[26] i[260715])) ")")(260589 call + "readf internal error "(260587 call _cast string[26](260585 call argType[258875] i[260715]))))))
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                label _unused_continueLabel[260720]
                label _breakLabel[260719]
              }
              if(260783 call _cond_test(260753 call ! err[258781]))
              {
                if(260778 call _cond_test(260757 call < cur[258832] len[258844]))
                {
                  unknown dummy[260760] c_int[20549]
                  (260763 'end of statement')
                  (260776 call(399999 call . this[258725] c"_format_reader") fmtStr[258715] cur[258832] len[258844] err[258781] conv[258849] gotConv[258854] style[258859] r[258882] 1)
                }
              }
              if(260807 call _cond_test(260788 call ! err[258781]))
              {
                if(260802 call _cond_test(260792 call < cur[258832] len[258844]))
                {
                  (260798 call = err[258781](260797 call qio_format_error_too_few_args))
                }
              }
              if(260826 call _cond_test(260812 call ! err[258781]))
              {
                (260817 call qio_channel_commit_unlocked(400017 call . this[258725] c"_channel_internal"))
              }
              {
                (260823 call qio_channel_revert_unlocked(400022 call . this[258725] c"_channel_internal"))
              }
            }
          }
          Catch thrownError : SystemError
          {
            unknown tmp[354691] "temp"(354695 'dynamic_cast' unmanaged SystemError?[415612](354694 'current error'))
            if(354698 '!=' tmp[354691] nil[44])
            {
              unknown thrownError[354704](354709 'new'(354707 call _owned[30](?)(354705 'to non nilable class' tmp[354691])))
              {
                if(260844 call _cond_test(260839 call !=(260835 call . thrownError[354704] c"err")(400026 call EEOF[224224])))
                {
                  (260842 'throw' thrownError[354704])
                }
                (260852 call = err[258781](400030 call EEOF[224224]))
              }
            }
            {
            }
          }
        }
      }
      (260871 'on block' 0 tmp[260866])
    }
    if(260921 call _cond_test(260875 call ! err[258781]))
    {
      (260878 return 1)
    }
    {
      if(260917 call _cond_test(260883 call == err[258781](400034 call EEOF[224224])))
      {
        (260886 return 0)
      }
      {
        Try
        {
          {
            (260912 call(260890 call . this[258725] c"_ch_ioerror") err[258781] "in channel.readf(fmt:string, ...)")
          }
        }
      }
    }
    (260927 return 0)
  }
  where {
    (258739 call ||(258734 call isStringType t[258713])(258738 call isBytesType t[258713]))
  }
  { scopeless type
    bool[10]
  }
  function channel[237730](?).readf[260941](arg _mt[260946]:_MT[238], arg this[260943]:channel[237730](?) :
  channel[237730](?), arg fmtStr[260938] :
  unknown t[260936]) : _unknown[51] throws "method" "no doc"
  {
    if(260964 call _cond_test(400041 call . this[260943] c"writing"))
    {
      (260962 call compilerError "readf on write-only channel")
    }
    unknown err[260972](400045 call ENOERR[223654]) syserr[223584]
    (260975 'end of statement')
    const tmp[261174] "const" "temp"
    (261176 'move' tmp[261174](261172 'deref'(261171 '_wide_get_locale'(260977 call . this[260943] c"home"))))
    {
      {
        Try
        {
          {
            (260985 call(260981 call . this[260943] c"lock"))
          }
        }
        Defer
        {
          {
            (260995 call(260991 call . this[260943] c"unlock"))
          }
        }
        unknown save_style[261006](261005 call(261001 call . this[260943] c"_style"))
        (261009 'end of statement')
        Defer
        {
          {
            (261016 call(261011 call . this[260943] c"_set_style") save_style[261006])
          }
        }
        unknown cur[261023] 0 size_t[20654]
        (261026 'end of statement')
        unknown len[261035](261033 call _cast size_t[20654](261029 call . fmtStr[260938] c"size")) size_t[20654]
        (261038 'end of statement')
        unknown conv[261040] qio_conv_t[235056]
        (261043 'end of statement')
        unknown gotConv[261045] bool[10]
        (261048 'end of statement')
        unknown style[261050] iostyle[231844]
        (261053 'end of statement')
        unknown end[261055] size_t[20654]
        (261058 'end of statement')
        unknown dummy[261060] c_int[20549]
        (261063 'end of statement')
        unknown r[261067] unmanaged _channel_regexp_info?[415525]
        (261070 'end of statement')
        Defer
        {
          {
            if(261077 call _cond_test r[261067])
            {
              (261074 call chpl__delete r[261067])
            }
          }
        }
        (261091 call = err[260972](261090 call qio_channel_mark 0(400061 call . this[260943] c"_channel_internal")))
        if(261124 call _cond_test(261095 call ! err[260972]))
        {
          (261108 call(400066 call . this[260943] c"_format_reader") fmtStr[260938] cur[261023] len[261035] err[260972] conv[261040] gotConv[261045] style[261050] r[261067] 1)
          if(261120 call _cond_test gotConv[261045])
          {
            (261116 call = err[260972](261115 call qio_format_error_too_few_args))
          }
        }
        if(261148 call _cond_test(261129 call ! err[260972]))
        {
          if(261143 call _cond_test(261133 call < cur[261023] len[261035]))
          {
            (261139 call = err[260972](261138 call qio_format_error_too_few_args))
          }
        }
        if(261167 call _cond_test(261153 call ! err[260972]))
        {
          (261158 call qio_channel_commit_unlocked(400086 call . this[260943] c"_channel_internal"))
        }
        {
          (261164 call qio_channel_revert_unlocked(400091 call . this[260943] c"_channel_internal"))
        }
      }
      (261179 'on block' 0 tmp[261174])
    }
    if(261232 call _cond_test(261183 call ! err[260972]))
    {
      (261186 return 1)
    }
    {
      if(261228 call _cond_test(261191 call == err[260972](400096 call EEOF[224224])))
      {
        (261194 return 0)
      }
      {
        Try
        {
          {
            (261220 call(261198 call . this[260943] c"_ch_ioerror") err[260972] "in channel.readf(fmt:string)")
          }
        }
        (261226 return 0)
      }
    }
  }
  where {
    (260956 call ||(260951 call isStringType t[260936])(260955 call isBytesType t[260936]))
  }
  function readf[261246](arg fmt[261243] :
  string[26], ref arg args[261250]:_any[178](?) ...) : _unknown[51] throws
  {
    (261266 return(261265 'try-expr'(261264 call(261257 call . stdin[250208] c"readf") fmt[261243](261263 'expand_tuple' args[261250]))))
  }
  { scopeless type
    bool[10]
  }
  function readf[261278](arg fmt[261275] :
  string[26]) : _unknown[51] throws "no doc"
  {
    (261289 return(261288 'try-expr'(261287 call(261282 call . stdin[250208] c"readf") fmt[261275])))
  }
  { scopeless type
    bool[10]
  }
  function channel[237730](?).skipField[261298](arg _mt[261303]:_MT[238], arg this[261300]:channel[237730](?) :
  channel[237730](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown err[261307](400103 call ENOERR[223654]) syserr[223584]
    (261310 'end of statement')
    const tmp[261374] "const" "temp"
    (261376 'move' tmp[261374](261372 'deref'(261371 '_wide_get_locale'(261313 call . this[261300] c"home"))))
    {
      {
        Try
        {
          {
            (261321 call(261317 call . this[261300] c"lock"))
          }
        }
        Defer
        {
          {
            (261331 call(261327 call . this[261300] c"unlock"))
          }
        }
        unknown st[261343](261342 call(261337 call . this[261300] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19667])
        (261346 'end of statement')
        if(261367 call _cond_test(261349 call == st[261343] QIO_AGGREGATE_FORMAT_JSON[19717]))
        {
          (261357 call = err[261307](261356 call qio_channel_skip_json_field 0(400111 call . this[261300] c"_channel_internal")))
        }
        {
          (261363 call = err[261307] ENOTSUP[224714])
        }
      }
      (261379 'on block' 0 tmp[261374])
    }
    if(261410 call _cond_test err[261307])
    {
      Try
      {
        {
          (261406 call(261384 call . this[261300] c"_ch_ioerror") err[261307] "in skipField")
        }
      }
    }
  }
  function string[26].format[261425](arg _mt[261430]:_MT[238], arg this[261427]:string[26] :
  string[26], arg args[261422]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    Try
    {
      {
        (261439 return(261438 call chpl_do_format this[261427](261437 'expand_tuple' args[261422])))
      }
    }
    Catch e : IllegalArgumentError
    {
      unknown tmp[354712] "temp"(354716 'dynamic_cast' unmanaged IllegalArgumentError?[415618](354715 'current error'))
      if(354719 '!=' tmp[354712] nil[44])
      {
        unknown e[354725](354730 'new'(354728 call _owned[30](?)(354726 'to non nilable class' tmp[354712])))
        {
          (261447 'throw' e[354725])
        }
      }
      {
      }
    }
    Catch e : SystemError
    {
      unknown tmp[354733] "temp"(354737 'dynamic_cast' unmanaged SystemError?[415612](354736 'current error'))
      if(354740 '!=' tmp[354733] nil[44])
      {
        unknown e[354746](354751 'new'(354749 call _owned[30](?)(354747 'to non nilable class' tmp[354733])))
        {
          Try
          {
            {
              (261477 call ioerror(261456 call . e[354746] c"err") "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch e : DecodeError
    {
      unknown tmp[354754] "temp"(354758 'dynamic_cast' unmanaged DecodeError?[415600](354757 'current error'))
      if(354761 '!=' tmp[354754] nil[44])
      {
        unknown e[354767](354772 'new'(354770 call _owned[30](?)(354768 'to non nilable class' tmp[354754])))
        {
          Try
          {
            {
              (261493 call ioerror(261489 call _cast syserr[223584] EILSEQ[224444]) "in string.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[354775] "temp"(354778 'current error')
      unknown chpl_anon_error[354781](354786 'new'(354784 call _owned[30](?)(354782 'to non nilable class' tmp[354775])))
      {
        Try
        {
          {
            (261506 call ioerror(261502 call _cast syserr[223584] EINVAL[224459]) "in string.format")
          }
        }
      }
    }
    (261532 return "")
  }
  { scopeless type
    string[26]
  }
  function bytes[24].format[261545](arg _mt[261550]:_MT[238], arg this[261547]:bytes[24] :
  bytes[24], arg args[261542]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    Try
    {
      {
        (261559 return(261558 call chpl_do_format this[261547](261557 'expand_tuple' args[261542])))
      }
    }
    Catch e : SystemError
    {
      unknown tmp[354789] "temp"(354793 'dynamic_cast' unmanaged SystemError?[415612](354792 'current error'))
      if(354796 '!=' tmp[354789] nil[44])
      {
        unknown e[354802](354807 'new'(354805 call _owned[30](?)(354803 'to non nilable class' tmp[354789])))
        {
          Try
          {
            {
              (261589 call ioerror(261568 call . e[354802] c"err") "in bytes.format")
            }
          }
        }
      }
      {
      }
    }
    Catch
    {
      unknown tmp[354810] "temp"(354813 'current error')
      unknown chpl_anon_error[354816](354821 'new'(354819 call _owned[30](?)(354817 'to non nilable class' tmp[354810])))
      {
        Try
        {
          {
            (261602 call ioerror(261598 call _cast syserr[223584] EINVAL[224459]) "in bytes.format")
          }
        }
      }
    }
    (261627 return b"")
  }
  { scopeless type
    bytes[24]
  }
  function chpl_do_format[261639](arg fmt[261636] :
  unknown t[261634], arg args[261643]:_any[178](?) ...) : _unknown[51] throws "inline" "private"
  {
    unknown f[261661](261660 'try-expr'(261659 call openmem))
    (261664 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (261671 call(261667 call . f[261661] c"close"))
          }
        }
        Catch
        {
          unknown tmp[354824] "temp"(354827 'current error')
          unknown chpl_anon_error[354830](354835 'new'(354833 call _owned[30](?)(354831 'to non nilable class' tmp[354824])))
          {
          }
        }
      }
    }
    unknown offset[261684] 0 int(64)[13]
    (261687 'end of statement')
    {
      unknown w[261697](261696 'try-expr'(261695 call(261689 call . f[261661] c"writer")(locking = 0)))
      (261700 'end of statement')
      Defer
      {
        {
          Try
          {
            {
              (261707 call(261703 call . w[261697] c"close"))
            }
          }
          Catch
          {
            unknown tmp[354838] "temp"(354841 'current error')
            unknown chpl_anon_error[354844](354849 'new'(354847 call _owned[30](?)(354845 'to non nilable class' tmp[354838])))
            {
            }
          }
        }
      }
      Try
      {
        {
          (261726 call(261719 call . w[261697] c"writef") fmt[261636](261725 'expand_tuple' args[261643]))
        }
      }
      (261737 call = offset[261684](261736 call(261732 call . w[261697] c"offset")))
      Try
      {
        {
          (261745 call(261741 call . w[261697] c"close"))
        }
      }
    }
    unknown buf[261760](261759 call c_malloc(261753 call uint(64)[115] 8)(261757 call + offset[261684] 1))
    (261763 'end of statement')
    unknown r[261773](261772 'try-expr'(261771 call(261765 call . f[261661] c"reader")(locking = 0)))
    (261776 'end of statement')
    Defer
    {
      {
        Try
        {
          {
            (261782 call(261778 call . r[261773] c"close"))
          }
        }
        Catch
        {
          unknown tmp[354852] "temp"(354855 'current error')
          unknown chpl_anon_error[354858](354863 'new'(354861 call _owned[30](?)(354859 'to non nilable class' tmp[354852])))
          {
          }
        }
      }
    }
    Try
    {
      {
        (261803 call(261794 call . r[261773] c"readBytes") buf[261760](261801 call _cast ssize_t[20647] offset[261684]))
      }
    }
    Try
    {
      {
        (261812 call(261808 call . r[261773] c"close"))
      }
    }
    Try
    {
      {
        (261821 call(261817 call . f[261661] c"close"))
      }
    }
    (261830 call =(261828 call buf[261760] offset[261684]) 0)
    if(261859 call _cond_test(261836 call isStringType t[261634]))
    {
      (261846 return(261845 call createStringWithOwnedBuffer buf[261760] offset[261684](261843 call + offset[261684] 1)))
    }
    {
      (261857 return(261856 call createBytesWithOwnedBuffer buf[261760] offset[261684](261854 call + offset[261684] 1)))
    }
  }
  where {
    (261655 call ||(261650 call isStringType t[261634])(261654 call isBytesType t[261634]))
  }
  { scopeless type
    t[261634]
  }
  function qio_regexp_channel_match[261878](const  ref arg re[261875] :
  qio_regexp_t[293606], arg threadsafe[261881] :
  c_int[20549], arg ch[261885] :
  qio_channel_ptr_t[231465], arg maxlen[261892] :
  (261891 call int(64)[13] 64), arg anchor[261896] :
  c_int[20549], arg can_discard[261900] :
  bool[10], arg keep_unmatched[261904] :
  bool[10], arg keep_whole_pattern[261908] :
  bool[10], arg submatch[261915] :
  (261914 call _ddata[11695](?) qio_regexp_string_piece_t[293888]), arg nsubmatch[261922] :
  (261921 call int(64)[13] 64)) : _unknown[51] "extern" "local args" "no fn body" "private" "no return value for void"
  {
  }
  { scopeless type
    syserr[223584]
  }
  function channel[237730](?)._extractMatch[261936](arg _mt[261949]:_MT[238], arg this[261946]:channel[237730](?) :
  channel[237730](?), arg m[261933] :
  reMatch[294573], ref arg arg[261939] :
  reMatch[294573], ref arg error[261943] :
  syserr[223584]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (261953 call = arg[261939] m[261933])
  }
  function channel[237730](?)._extractMatch[261966](arg _mt[261979]:_MT[238], arg this[261976]:channel[237730](?) :
  channel[237730](?), arg m[261963] :
  reMatch[294573], ref arg arg[261969] :
  bytes[24], ref arg error[261973] :
  syserr[223584]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown cur[261985](261984 call int(64)[13] 64)
    (261988 'end of statement')
    unknown target[261997](261995 call _cast int(64)[13](261991 call . m[261963] c"offset"))
    (262000 'end of statement')
    unknown len[262005](262002 call . m[261963] c"size")
    (262008 'end of statement')
    if(262038 call _cond_test(262015 call !(262012 call . m[261963] c"matched")))
    {
      (262034 call = arg[261969] b"")
    }
    if(262068 call _cond_test(262043 call ! error[261973]))
    {
      (262048 call qio_channel_revert_unlocked(400170 call . this[261976] c"_channel_internal"))
      (262057 call = error[261973](262056 call qio_channel_mark 0(400176 call . this[261976] c"_channel_internal")))
      (262065 call = cur[261985](262064 call qio_channel_offset_unlocked(400182 call . this[261976] c"_channel_internal")))
    }
    if(262089 call _cond_test(262073 call ! error[261973]))
    {
      (262085 call = error[261973](262084 call qio_channel_advance 0(400189 call . this[261976] c"_channel_internal")(262082 call - target[261997] cur[261985])))
    }
    unknown s[262094] bytes[24]
    (262097 'end of statement')
    if(262151 call _cond_test(262099 call ! error[261973]))
    {
      unknown gotlen[262105](262104 call int(64)[13] 64)
      (262108 'end of statement')
      unknown ts[262111] c_string[19]
      (262114 'end of statement')
      (262138 call = error[261973](262137 call qio_channel_read_string 0(262124 call _cast c_int[20549] native[230923])(262129 call stringStyleExactLen len[262005])(400201 call . this[261976] c"_channel_internal") ts[262111] gotlen[262105](262135 call _cast ssize_t[20647] len[262005])))
      (262148 call = s[262094](262147 call createBytesWithOwnedBuffer ts[262111](length = gotlen[262105])))
    }
    if(262185 call _cond_test(262156 call ! error[261973]))
    {
      (262160 call = arg[261969] s[262094])
    }
    {
      (262181 call = arg[261969] b"")
    }
  }
  function channel[237730](?)._extractMatch[262198](arg _mt[262212]:_MT[238], arg this[262209]:channel[237730](?) :
  channel[237730](?), arg m[262195] :
  reMatch[294573], ref arg arg[262202] :
  unknown t[262200], ref arg error[262206] :
  syserr[223584]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    if(262242 call _cond_test(262228 call !(262225 call . m[262195] c"matched")))
    {
      unknown empty[262232](262231 'typeof' arg[262202])
      (262235 'end of statement')
      (262239 call = arg[262202] empty[262232])
    }
    unknown s[262248] bytes[24]
    (262251 'end of statement')
    (262257 call(400224 call . this[262209] c"_extractMatch") m[262195] s[262248] error[262206])
    if(262316 call _cond_test(262260 call ! error[262206]))
    {
      if(262299 call _cond_test(262265 call ==(262263 'typeof' arg[262202]) string[26]))
      {
        Try
        {
          {
            (262274 call = arg[262202](262273 call(262269 call . s[262248] c"decode")))
          }
        }
        Catch
        {
          unknown tmp[354866] "temp"(354869 'current error')
          unknown chpl_anon_error[354872](354877 'new'(354875 call _owned[30](?)(354873 'to non nilable class' tmp[354866])))
          {
            (262281 call = error[262206](400234 call EFORMAT[224270]))
          }
        }
      }
      {
        (262295 call = arg[262202](262293 call _cast(262292 'typeof' arg[262202]) s[262248]))
      }
    }
    {
      unknown empty[262306](262305 'typeof' arg[262202])
      (262309 'end of statement')
      (262313 call = arg[262202] empty[262306])
    }
  }
  where {
    (262222 call &&(262216 call != t[262200] reMatch[294573])(262220 call != t[262200] bytes[24]))
  }
  function channel[237730](?).extractMatch[262330](arg _mt[262337]:_MT[238], arg this[262334]:channel[237730](?) :
  channel[237730](?), arg m[262327] :
  reMatch[294573], ref arg arg[262332]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    unknown err[262341](400244 call ENOERR[223654]) syserr[223584]
    (262344 'end of statement')
    const tmp[262380] "const" "temp"
    (262382 'move' tmp[262380](262378 'deref'(262377 '_wide_get_locale'(262347 call . this[262334] c"home"))))
    {
      {
        Try
        {
          {
            (262355 call(262351 call . this[262334] c"lock"))
          }
        }
        Defer
        {
          {
            (262365 call(262361 call . this[262334] c"unlock"))
          }
        }
        (262375 call(400247 call . this[262334] c"_extractMatch") m[262327] arg[262332] err[262341])
      }
      (262385 'on block' 0 tmp[262380])
    }
    if(262427 call _cond_test err[262341])
    {
      Try
      {
        {
          (262422 call(262390 call . this[262334] c"_ch_ioerror") err[262341](262420 call +(262417 call + "in channel.extractMatch(m:reMatch, ref "(262415 call _cast string[26](262413 'typeof' arg[262332]))) ")"))
        }
      }
    }
  }
  function channel[237730](?).extractMatch[262440](arg _mt[262451]:_MT[238], arg this[262448]:channel[237730](?) :
  channel[237730](?), arg m[262437] :
  reMatch[294573], ref arg arg[262442]:_any[178](?), ref arg error[262445] :
  syserr[223584]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    const tmp[262484] "const" "temp"
    (262486 'move' tmp[262484](262482 'deref'(262481 '_wide_get_locale'(262454 call . this[262448] c"home"))))
    {
      {
        Try!
        {
          {
            (262462 call(262458 call . this[262448] c"lock"))
          }
        }
        (262472 call(400259 call . this[262448] c"_extractMatch") m[262437] arg[262442] error[262445])
        (262479 call(262475 call . this[262448] c"unlock"))
      }
      (262489 'on block' 0 tmp[262484])
    }
  }
  function channel[237730](?)._ch_handle_captures[262505](arg _mt[262520]:_MT[238], arg this[262517]:channel[237730](?) :
  channel[237730](?), arg matches[262502] :
  (262501 call _ddata[11695](?) qio_regexp_string_piece_t[293888]), arg nmatches[262508] :
  int(64)[13], ref arg captures[262511]:_any[178](?), ref arg error[262514] :
  syserr[223584]) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (262531 call assert(262528 call >= nmatches[262508](262525 call . captures[262511] c"size")))
    {
      unknown i[262566] 0
      unknown tmp[262567] "maybe param" "temp"
      (262579 'move' tmp[262567](262577 call chpl_compute_low_param_loop_bound 0(262540 call -(262536 call . captures[262511] c"size") 1)))
      unknown tmp[262568] "maybe param" "temp"
      (262592 'move' tmp[262568](262590 call chpl_compute_high_param_loop_bound 0(262584 call -(262586 call . captures[262511] c"size") 1)))
      unknown tmp[262569] "maybe param" "temp"
      (262595 'move' tmp[262569] 1)
      ParamForLoop[262597]
      { i[262566] tmp[262567] tmp[262568] tmp[262569]
        {
          unknown m[262551](262550 call _to_reMatch(262548 call matches[262502] i[262566]))
          (262554 'end of statement')
          (262564 call(400272 call . this[262517] c"_extractMatch") m[262551](262562 call captures[262511] i[262566]) error[262514])
        }
      }
      label _unused_continueLabel[262571]
      label _breakLabel[262570]
    }
  }
  function channel[237730](?).search[262618](arg _mt[262627]:_MT[238], arg this[262624]:channel[237730](?) :
  channel[237730](?), arg re[262615] :
  (262614 call regexp[297117](?) ?[260]), ref arg error[262621] :
  syserr[223584]) : _unknown[51] "method" "no doc"
  {
    unknown m[262631] reMatch[294573]
    (262634 'end of statement')
    const tmp[262814] "const" "temp"
    (262816 'move' tmp[262814](262812 'deref'(262811 '_wide_get_locale'(262637 call . this[262624] c"home"))))
    {
      {
        Try!
        {
          {
            (262645 call(262641 call . this[262624] c"lock"))
          }
        }
        unknown nm[262651] 1
        (262654 'end of statement')
        unknown matches[262660](262659 call _ddata_allocate qio_regexp_string_piece_t[293888] nm[262651])
        (262663 'end of statement')
        (262670 call = error[262621](262669 call qio_channel_mark 0(400288 call . this[262624] c"_channel_internal")))
        if(262703 call _cond_test(262674 call ! error[262621]))
        {
          (262699 call = error[262621](262698 call qio_regexp_channel_match(262679 call . re[262615] c"_regexp") 0(400295 call . this[262624] c"_channel_internal")(262691 call max(262689 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293856] 1 0 1 matches[262660] nm[262651]))
        }
        if(262722 call _cond_test(262715 call ||(262709 call == error[262621](400302 call EFORMAT[224270]))(262713 call == error[262621](400305 call EEOF[224224]))))
        {
          (262719 call = error[262621](400308 call ENOERR[223654]))
        }
        if(262794 call _cond_test(262728 call ! error[262621]))
        {
          (262738 call = m[262631](262737 call _to_reMatch(262735 call matches[262660] 0)))
          if(262790 call _cond_test(262743 call . m[262631] c"matched"))
          {
            (262749 call qio_channel_revert_unlocked(400315 call . this[262624] c"_channel_internal"))
            unknown cur[262756](262755 call qio_channel_offset_unlocked(400320 call . this[262624] c"_channel_internal"))
            (262759 'end of statement')
            unknown target[262767](262765 call _cast int(64)[13](262761 call . m[262631] c"offset"))
            (262770 'end of statement')
            (262781 call = error[262621](262780 call qio_channel_advance 0(400326 call . this[262624] c"_channel_internal")(262778 call - target[262767] cur[262756])))
          }
          {
            (262787 call qio_channel_commit_unlocked(400333 call . this[262624] c"_channel_internal"))
          }
        }
        (262802 call _ddata_free matches[262660] nm[262651])
        (262809 call(262805 call . this[262624] c"unlock"))
      }
      (262819 'on block' 0 tmp[262814])
    }
    (262823 return m[262631])
  }
  { scopeless type
    reMatch[294573]
  }
  function channel[237730](?).search[262838](arg _mt[262843]:_MT[238], arg this[262840]:channel[237730](?) :
  channel[237730](?), arg re[262835] :
  (262834 call regexp[297117](?) ?[260])) : _unknown[51] throws "method" "no doc"
  {
    unknown e[262848](400342 call ENOERR[223654]) syserr[223584]
    (262851 'end of statement')
    unknown ret[262864](262863 call(262856 call . this[262840] c"search") re[262835](error = e[262848]))
    (262867 'end of statement')
    if(262896 call _cond_test e[262848])
    {
      Try
      {
        {
          (262892 call(262870 call . this[262840] c"_ch_ioerror") e[262848] "in channel.search")
        }
      }
    }
    (262902 return ret[262864])
  }
  { scopeless type
    reMatch[294573]
  }
  function channel[237730](?).search[262917](arg _mt[262927]:_MT[238], arg this[262924]:channel[237730](?) :
  channel[237730](?), arg re[262914] :
  (262913 call regexp[297117](?) ?[260]), ref arg captures[262921]:_any[178](?) ...) : _unknown[51] throws "method"
  {
    unknown m[262931] reMatch[294573]
    (262934 'end of statement')
    unknown err[262938](400353 call ENOERR[223654]) syserr[223584]
    (262941 'end of statement')
    const tmp[263137] "const" "temp"
    (263139 'move' tmp[263137](263135 'deref'(263134 '_wide_get_locale'(262943 call . this[262924] c"home"))))
    {
      {
        Try
        {
          {
            (262951 call(262947 call . this[262924] c"lock"))
          }
        }
        Defer
        {
          {
            (262961 call(262957 call . this[262924] c"unlock"))
          }
        }
        unknown nm[262973](262971 call +(262967 call . captures[262921] c"size") 1)
        (262976 'end of statement')
        unknown matches[262982](262981 call _ddata_allocate qio_regexp_string_piece_t[293888] nm[262973])
        (262985 'end of statement')
        (262992 call = err[262938](262991 call qio_channel_mark 0(400360 call . this[262924] c"_channel_internal")))
        if(263025 call _cond_test(262996 call ! err[262938]))
        {
          (263021 call = err[262938](263020 call qio_regexp_channel_match(263001 call . re[262914] c"_regexp") 0(400367 call . this[262924] c"_channel_internal")(263013 call max(263011 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293856] 1 0 1 matches[262982] nm[262973]))
        }
        if(263044 call _cond_test(263037 call ||(263031 call == err[262938](400374 call EFORMAT[224270]))(263035 call == err[262938](400377 call EEOF[224224]))))
        {
          (263041 call = err[262938](400380 call ENOERR[223654]))
        }
        if(263124 call _cond_test(263050 call ! err[262938]))
        {
          (263060 call = m[262931](263059 call _to_reMatch(263057 call matches[262982] 0)))
          if(263120 call _cond_test(263065 call . m[262931] c"matched"))
          {
            (263074 call(400388 call . this[262924] c"_ch_handle_captures") matches[262982] nm[262973] captures[262921] err[262938])
            (263080 call qio_channel_revert_unlocked(400397 call . this[262924] c"_channel_internal"))
            unknown cur[263086](263085 call qio_channel_offset_unlocked(400402 call . this[262924] c"_channel_internal"))
            (263089 'end of statement')
            unknown target[263097](263095 call _cast int(64)[13](263091 call . m[262931] c"offset"))
            (263100 'end of statement')
            (263111 call = err[262938](263110 call qio_channel_advance 0(400408 call . this[262924] c"_channel_internal")(263108 call - target[263097] cur[263086])))
          }
          {
            (263117 call qio_channel_commit_unlocked(400415 call . this[262924] c"_channel_internal"))
          }
        }
        (263132 call _ddata_free matches[262982] nm[262973])
      }
      (263142 'on block' 0 tmp[263137])
    }
    if(263157 call _cond_test err[262938])
    {
      Try
      {
        {
          (263153 call(263147 call . this[262924] c"_ch_ioerror") err[262938] "in channel.search")
        }
      }
    }
    (263163 return m[262931])
  }
  { scopeless type
    reMatch[294573]
  }
  function channel[237730](?).match[263178](arg _mt[263187]:_MT[238], arg this[263184]:channel[237730](?) :
  channel[237730](?), arg re[263175] :
  (263174 call regexp[297117](?) ?[260]), ref arg error[263181] :
  syserr[223584]) : _unknown[51] "method" "no doc"
  {
    unknown m[263191] reMatch[294573]
    (263194 'end of statement')
    const tmp[263374] "const" "temp"
    (263376 'move' tmp[263374](263372 'deref'(263371 '_wide_get_locale'(263197 call . this[263184] c"home"))))
    {
      {
        Try!
        {
          {
            (263205 call(263201 call . this[263184] c"lock"))
          }
        }
        unknown nm[263211] 1
        (263214 'end of statement')
        unknown matches[263220](263219 call _ddata_allocate qio_regexp_string_piece_t[293888] nm[263211])
        (263223 'end of statement')
        (263230 call = error[263181](263229 call qio_channel_mark 0(400432 call . this[263184] c"_channel_internal")))
        if(263263 call _cond_test(263234 call ! error[263181]))
        {
          (263259 call = error[263181](263258 call qio_regexp_channel_match(263239 call . re[263175] c"_regexp") 0(400439 call . this[263184] c"_channel_internal")(263251 call max(263249 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_START[293861] 1 1 1 matches[263220] nm[263211]))
        }
        if(263282 call _cond_test(263275 call ||(263269 call == error[263181](400446 call EFORMAT[224270]))(263273 call == error[263181](400449 call EEOF[224224]))))
        {
          (263279 call = error[263181](400452 call ENOERR[223654]))
        }
        if(263354 call _cond_test(263288 call ! error[263181]))
        {
          (263298 call = m[263191](263297 call _to_reMatch(263295 call matches[263220] 0)))
          if(263350 call _cond_test(263303 call . m[263191] c"matched"))
          {
            (263309 call qio_channel_revert_unlocked(400459 call . this[263184] c"_channel_internal"))
            unknown cur[263316](263315 call qio_channel_offset_unlocked(400464 call . this[263184] c"_channel_internal"))
            (263319 'end of statement')
            unknown target[263327](263325 call _cast int(64)[13](263321 call . m[263191] c"offset"))
            (263330 'end of statement')
            (263341 call = error[263181](263340 call qio_channel_advance 0(400470 call . this[263184] c"_channel_internal")(263338 call - target[263327] cur[263316])))
          }
          {
            (263347 call qio_channel_revert_unlocked(400477 call . this[263184] c"_channel_internal"))
          }
        }
        (263362 call _ddata_free matches[263220] nm[263211])
        (263369 call(263365 call . this[263184] c"unlock"))
      }
      (263379 'on block' 0 tmp[263374])
    }
    (263383 return m[263191])
  }
  { scopeless type
    reMatch[294573]
  }
  function channel[237730](?).match[263398](arg _mt[263403]:_MT[238], arg this[263400]:channel[237730](?) :
  channel[237730](?), arg re[263395] :
  (263394 call regexp[297117](?) ?[260])) : _unknown[51] throws "method" "no doc"
  {
    unknown e[263408](400486 call ENOERR[223654]) syserr[223584]
    (263411 'end of statement')
    unknown ret[263424](263423 call(263416 call . this[263400] c"match") re[263395](error = e[263408]))
    (263427 'end of statement')
    if(263456 call _cond_test e[263408])
    {
      Try
      {
        {
          (263452 call(263430 call . this[263400] c"_ch_ioerror") e[263408] "in channel.match")
        }
      }
    }
    (263462 return ret[263424])
  }
  { scopeless type
    reMatch[294573]
  }
  function channel[237730](?).match[263477](arg _mt[263491]:_MT[238], arg this[263488]:channel[237730](?) :
  channel[237730](?), arg re[263474] :
  (263473 call regexp[297117](?) ?[260]), ref arg captures[263481]:_any[178](?) ..., ref arg error[263485] :
  syserr[223584]) : _unknown[51] "method"
  {
    unknown m[263495] reMatch[294573]
    (263498 'end of statement')
    const tmp[263692] "const" "temp"
    (263694 'move' tmp[263692](263690 'deref'(263689 '_wide_get_locale'(263501 call . this[263488] c"home"))))
    {
      {
        Try!
        {
          {
            (263509 call(263505 call . this[263488] c"lock"))
          }
        }
        unknown nm[263521](263519 call + 1(263516 call . captures[263481] c"size"))
        (263524 'end of statement')
        unknown matches[263530](263529 call _ddata_allocate qio_regexp_string_piece_t[293888] nm[263521])
        (263533 'end of statement')
        (263540 call = error[263485](263539 call qio_channel_mark 0(400502 call . this[263488] c"_channel_internal")))
        if(263573 call _cond_test(263544 call ! error[263485]))
        {
          (263569 call = error[263485](263568 call qio_regexp_channel_match(263549 call . re[263474] c"_regexp") 0(400509 call . this[263488] c"_channel_internal")(263561 call max(263559 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_START[293861] 1 1 1 matches[263530] nm[263521]))
        }
        if(263592 call _cond_test(263585 call ||(263579 call == error[263485](400516 call EFORMAT[224270]))(263583 call == error[263485](400519 call EEOF[224224]))))
        {
          (263589 call = error[263485](400522 call ENOERR[223654]))
        }
        if(263672 call _cond_test(263598 call ! error[263485]))
        {
          (263608 call = m[263495](263607 call _to_reMatch(263605 call matches[263530] 0)))
          if(263668 call _cond_test(263613 call . m[263495] c"matched"))
          {
            (263622 call(400528 call . this[263488] c"_ch_handle_captures") matches[263530] nm[263521] captures[263481] error[263485])
            (263628 call qio_channel_revert_unlocked(400537 call . this[263488] c"_channel_internal"))
            unknown cur[263634](263633 call qio_channel_offset_unlocked(400542 call . this[263488] c"_channel_internal"))
            (263637 'end of statement')
            unknown target[263645](263643 call _cast int(64)[13](263639 call . m[263495] c"offset"))
            (263648 'end of statement')
            (263659 call = error[263485](263658 call qio_channel_advance 0(400548 call . this[263488] c"_channel_internal")(263656 call - target[263645] cur[263634])))
          }
          {
            (263665 call qio_channel_revert_unlocked(400555 call . this[263488] c"_channel_internal"))
          }
        }
        (263680 call _ddata_free matches[263530] nm[263521])
        (263687 call(263683 call . this[263488] c"unlock"))
      }
      (263697 'on block' 0 tmp[263692])
    }
    (263701 return m[263495])
  }
  { scopeless type
    reMatch[294573]
  }
  function channel[237730](?).match[263716](arg _mt[263726]:_MT[238], arg this[263723]:channel[237730](?) :
  channel[237730](?), arg re[263713] :
  (263712 call regexp[297117](?) ?[260]), ref arg captures[263720]:_any[178](?) ...) : _unknown[51] throws "method" "no doc"
  {
    unknown e[263731](400564 call ENOERR[223654]) syserr[223584]
    (263734 'end of statement')
    unknown ret[263747](263746 call(263737 call . this[263723] c"match") re[263713](263743 'expand_tuple' captures[263720])(error = e[263731]))
    (263750 'end of statement')
    if(263763 call _cond_test e[263731])
    {
      Try
      {
        {
          (263759 call(263753 call . this[263723] c"_ch_ioerror") e[263731] "in channel.match")
        }
      }
    }
    (263769 return ret[263747])
  }
  { scopeless type
    reMatch[294573]
  }
  function channel[237730](?).matches[263784](arg _mt[263802]:_MT[238], arg this[263799]:channel[237730](?) :
  channel[237730](?), arg re[263781] :
  (263780 call regexp[297117](?) ?[260]), param arg captures[263787] =
  0, arg maxmatches[263795] :
  int(64)[13] =
  (263794 call max int(64)[13])) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    unknown m[263805] reMatch[294573]
    (263808 'end of statement')
    unknown go[263811] 1
    (263814 'end of statement')
    unknown i[263816] 0
    (263819 'end of statement')
    unknown error[263822](400575 call ENOERR[223654]) syserr[223584]
    (263825 'end of statement')
    unknown nret[263830] "param"(263828 call + captures[263787] 1)
    (263833 'end of statement')
    unknown ret[263838](263836 call * nret[263830] reMatch[294573])
    (263841 'end of statement')
    Try!
    {
      {
        (263844 call(400581 call . this[263799] c"lock"))
      }
    }
    const tmp[263861] "const" "temp"
    (263863 'move' tmp[263861](263859 'deref'(263858 '_wide_get_locale'(263849 call . this[263799] c"home"))))
    {
      Try!
      {
        {
          (263854 call(400587 call . this[263799] c"_mark"))
        }
      }
      (263866 'on block' 0 tmp[263861])
    }
    {
      unknown tmp[264126] "temp"
      (264156 'move' tmp[264126](264148 call _cond_test(264150 call && go[263811](264153 call < i[263816] maxmatches[263795]))))
      WhileDo[264131]
      {
        {
          const tmp[264101] "const" "temp"
          (264103 'move' tmp[264101](264099 'deref'(264098 '_wide_get_locale'(263877 call . this[263799] c"home"))))
          {
            {
              unknown nm[263884](263882 call + 1 captures[263787])
              (263887 'end of statement')
              unknown matches[263894](263893 call _ddata_allocate qio_regexp_string_piece_t[293888] nm[263884])
              (263897 'end of statement')
              if(263928 call _cond_test(263899 call ! error[263822]))
              {
                (263924 call = error[263822](263923 call qio_regexp_channel_match(263904 call . re[263781] c"_regexp") 0(400597 call . this[263799] c"_channel_internal")(263916 call max(263914 call int(64)[13] 64)) QIO_REGEXP_ANCHOR_UNANCHORED[293856] 1 0 1 matches[263894] nm[263884]))
              }
              if(264077 call _cond_test(263933 call ! error[263822]))
              {
                (263943 call = m[263805](263942 call _to_reMatch(263940 call matches[263894] 0)))
                if(264073 call _cond_test(263948 call . m[263805] c"matched"))
                {
                  {
                    unknown i[263980] 0
                    unknown tmp[263981] "maybe param" "temp"
                    (263993 'move' tmp[263981](263991 call chpl_compute_low_param_loop_bound 0(263954 call - nret[263830] 1)))
                    unknown tmp[263982] "maybe param" "temp"
                    (264003 'move' tmp[263982](264001 call chpl_compute_high_param_loop_bound 0(263998 call - nret[263830] 1)))
                    unknown tmp[263983] "maybe param" "temp"
                    (264006 'move' tmp[263983] 1)
                    ParamForLoop[264008]
                    { i[263980] tmp[263981] tmp[263982] tmp[263983]
                      {
                        (263966 call = m[263805](263965 call _to_reMatch(263963 call matches[263894] i[263980])))
                        (263978 call(400611 call . this[263799] c"_extractMatch") m[263805](263976 call ret[263838] i[263980]) error[263822])
                      }
                    }
                    label _unused_continueLabel[263985]
                    label _breakLabel[263984]
                  }
                  (264021 call qio_channel_revert_unlocked(400621 call . this[263799] c"_channel_internal"))
                  (264029 call = error[263822](264028 call qio_channel_mark 0(400627 call . this[263799] c"_channel_internal")))
                  if(264068 call _cond_test(264033 call ! error[263822]))
                  {
                    unknown cur[264039](264038 call qio_channel_offset_unlocked(400633 call . this[263799] c"_channel_internal"))
                    (264042 'end of statement')
                    unknown target[264051](264049 call _cast int(64)[13](264045 call . m[263805] c"offset"))
                    (264054 'end of statement')
                    (264065 call = error[263822](264064 call qio_channel_advance 0(400639 call . this[263799] c"_channel_internal")(264062 call - target[264051] cur[264039])))
                  }
                }
                {
                }
              }
              (264085 call _ddata_free matches[263894] nm[263884])
              if(264093 call _cond_test error[263822])
              {
                (264090 call = go[263811] 0)
              }
            }
            (264106 'on block' 0 tmp[264101])
          }
          if(264116 call _cond_test(264111 call ! error[263822]))
          {
            (264114 yield ret[263838])
          }
          (264123 call += i[263816] 1)
        }
        label _continueLabel[264129]
        (264143 'move' tmp[264126](264135 call _cond_test(264137 call && go[263811](264140 call < i[263816] maxmatches[263795]))))
        tmp[264126]
      }
      label _breakLabel[264130]
    }
    (264161 call(400660 call . this[263799] c"_commit"))
    (264165 call(400664 call . this[263799] c"unlock"))
    if(264182 call _cond_test(264175 call ||(264169 call == error[263822](400668 call EFORMAT[224270]))(264173 call == error[263822](400671 call EEOF[224224]))))
    {
      (264179 call = error[263822](400674 call ENOERR[223654]))
    }
    if(264215 call _cond_test error[263822])
    {
      Try!
      {
        {
          (264211 call(264189 call . this[263799] c"_ch_ioerror") error[263822] "in channel.matches")
        }
      }
    }
  }
  (355312 'used modules list'(353012 'use' ChapelStandard[20264])(251270 'use' IO[230891])(251274 'use' SysCTypes[20940])(251277 'use' SysBasic[223516])(251280 'use' SysError[264231])(261870 'use' Regexp[293593]))
}