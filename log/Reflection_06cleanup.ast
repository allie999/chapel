AST dump for Reflection after pass cleanup.
Module use list: 

{
  (353048 'use' ChapelStandard)
  function checkQueryT[224908](arg t[224906]:_any[178](?)) type : _unknown[51] "private"
  {
    if(224966 call _cond_test(224913 call isClassType t))
    {
      (224919 return(224917 call _cast(224916 'to borrowed class from unknown' class[232](?)) t))
    }
    {
      if(224960 call _cond_test(224929 call ||(224924 call isRecordType t)(224928 call isUnionType t)))
      {
        (224932 return t)
      }
      {
        (224958 call compilerError(224937 call _cast string[26] t) " is not a class, record, or union type" 2)
      }
    }
  }
  function numFields[224980](arg t[224978]:_any[178](?)) param : _unknown[51]
  {
    (224990 return(224989 'num fields'(224988 call checkQueryT t)))
  }
  { scopeless type
    int[13]
  }
  function getFieldName[225000](arg t[224998]:_any[178](?), param arg i[225003] :
  int[13]) param : _unknown[51]
  {
    (225018 return(225017 'field num to name'(225012 call checkQueryT t)(225015 call + i 1)))
  }
  { scopeless type
    string[26]
  }
  function getField[225031](const  ref arg x[225028] :
  unknown t[225026], param arg i[225034] :
  int[13]) param : _unknown[51]
  {
    (225071 return(225070 'field by num' x(225068 call + i 1)))
  }
  where {
    (225061 call &&(225048 call &&(225039 call >= i 0)(225046 call < i(225045 call numFields t)))(225060 call isParam(225058 'field by num' x(225056 call + i 1))))
  }
  function getField[225084](const  ref arg x[225081] :
  unknown t[225079], param arg i[225087] :
  int[13]) type : _unknown[51]
  {
    (225124 return(225123 'field by num' x(225121 call + i 1)))
  }
  where {
    (225114 call &&(225101 call &&(225092 call >= i 0)(225099 call < i(225098 call numFields t)))(225113 call isType(225111 'field by num' x(225109 call + i 1))))
  }
  function getField[225137](const  ref arg x[225134] :
  unknown t[225132], param arg i[225140] :
  int[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    (225151 return(225150 'field by num' x(225148 call + i 1)))
  }
  function getField[225163](const  ref arg x[225160] :
  unknown t[225158], param arg s[225166] :
  string[26]) param : _unknown[51]
  {
    (225202 return(225201 call getField x(225200 call getFieldIndex t s)))
  }
  where {
    (225191 call &&(225177 call !=(225173 call getFieldIndex t s)(225175 call - 1))(225190 call isParam(225188 call getField x(225187 call getFieldIndex t s))))
  }
  function getField[225215](const  ref arg x[225212] :
  unknown t[225210], param arg s[225218] :
  string[26]) type : _unknown[51]
  {
    (225254 return(225253 call getField x(225252 call getFieldIndex t s)))
  }
  where {
    (225243 call &&(225229 call !=(225225 call getFieldIndex t s)(225227 call - 1))(225242 call isType(225240 call getField x(225239 call getFieldIndex t s))))
  }
  function getField[225267](const  ref arg x[225264] :
  unknown t[225262], param arg s[225270] :
  string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    unknown i[225294] "param"(225293 'field name to num' t s)
    (225297 'end of statement')
    if(225346 call _cond_test(225301 call == i 0))
    {
      (225344 call compilerError "field " s " not found in "(225342 call _cast string[26] t))
    }
    (225356 return(225355 'field by num' x i))
  }
  function isImplementedWithRecords[225364](arg t[225362]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (225376 return(225374 call ||(225369 call isRangeType t)(225373 call isStringType t)))
  }
  function numImplementationFields[225385](arg t[225383]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (225396 return(225395 'num fields' t))
  }
  where {
    (225391 call isImplementedWithRecords t)
  }
  { scopeless type
    int[13]
  }
  function getImplementationField[225410](const  ref arg x[225407] :
  unknown t[225405], param arg i[225413] :
  int[13]) type : _unknown[51] "no doc"
  {
    (225435 return(225434 'field by num' x i))
  }
  where {
    (225428 call &&(225419 call isImplementedWithRecords t)(225427 call isType(225425 'field by num' x i)))
  }
  function getImplementationField[225448](const  ref arg x[225445] :
  unknown t[225443], param arg i[225451] :
  int[13]) param : _unknown[51] "no doc"
  {
    (225473 return(225472 'field by num' x i))
  }
  where {
    (225466 call &&(225457 call isImplementedWithRecords t)(225465 call isParam(225463 'field by num' x i)))
  }
  function getImplementationField[225486](const  ref arg x[225483] :
  unknown t[225481], param arg i[225489] :
  int[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    if(225540 call _cond_test(225496 call !(225495 call isImplementedWithRecords t)))
    {
      (225538 call compilerError "an argument of the type "(225519 call _cast string[26] t) " is not valid for getImplementationField()")
    }
    (225551 return(225550 'field by num' x i))
  }
  function getFieldRef[225562](ref arg x[225559] :
  unknown t[225557], param arg i[225565] :
  int[13]) ref : _unknown[51] "inline" "unsafe"
  {
    (225576 return(225575 'field by num' x(225573 call + i 1)))
  }
  function getFieldRef[225588](ref arg x[225585] :
  unknown t[225583], param arg s[225591] :
  string[26]) ref : _unknown[51] "unsafe"
  {
    unknown i[225599] "param"(225598 'field name to num' t s)
    (225602 'end of statement')
    if(225619 call _cond_test(225606 call == i 0))
    {
      (225617 call compilerError "field " s " not found in "(225615 call _cast string[26] t))
    }
    (225629 return(225628 'field by num' x i))
  }
  function getFieldIndex[225637](arg t[225635]:_any[178](?), param arg s[225640] :
  string[26]) param : _unknown[51]
  {
    (225655 return(225653 call -(225651 'field name to num'(225649 call checkQueryT t) s) 1))
  }
  { scopeless type
    int[13]
  }
  function hasField[225665](arg t[225663]:_any[178](?), param arg s[225668] :
  string[26]) param : _unknown[51]
  {
    (225680 return(225678 call >=(225676 call getFieldIndex t s) 0))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225690](arg t[225688]:_any[178](?), param arg i[225693] :
  int[13]) param : _unknown[51]
  {
    (225728 return(225727 'is bound'(225718 call checkQueryT t)(225726 call getFieldName(225723 call checkQueryT t) i)))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225738](arg t[225736]:_any[178](?), param arg s[225741] :
  string[26]) param : _unknown[51]
  {
    (225753 return(225752 'is bound'(225750 call checkQueryT t) s))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225765](param arg fname[225762] :
  string[26]) param : _unknown[51]
  {
    (225788 return(225787 'call and fn resolves' fname))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225800](param arg fname[225797] :
  string[26], arg args[225803]:_any[178](?) ...) param : _unknown[51]
  {
    (225813 return(225812 'call and fn resolves' fname(225811 'expand_tuple' args)))
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225823](arg obj[225821]:_any[178](?), param arg fname[225826] :
  string[26]) param : _unknown[51]
  {
    (225851 return(225850 'method call and fn resolves' obj fname))
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225861](arg obj[225859]:_any[178](?), param arg fname[225864] :
  string[26], arg args[225868]:_any[178](?) ...) param : _unknown[51]
  {
    (225879 return(225878 'method call and fn resolves' obj fname(225877 'expand_tuple' args)))
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225889](arg t[225887]:_any[178](?), param arg fname[225892] :
  string[26]) param : _unknown[51]
  {
    (225901 return(225900 'method call and fn resolves' t fname))
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225911](arg t[225909]:_any[178](?), param arg fname[225914] :
  string[26], arg args[225918]:_any[178](?) ...) param : _unknown[51]
  {
    (225929 return(225928 'method call and fn resolves' t fname(225927 'expand_tuple' args)))
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[225937]() param : _unknown[51] "get line number" "no return value for void"
  {
  }
  { scopeless type
    int[13]
  }
  function getFileName[225946]() param : _unknown[51] "get file name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[225955]() param : _unknown[51] "get function name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
  function getModuleName[225964]() param : _unknown[51] "get module name" "no return value for void"
  {
  }
  { scopeless type
    string[26]
  }
}