AST dump for BinaryInsertionSort after pass scopeResolve.
Module use list: ChapelStandard Sort 

{ function binaryInsertionSort[270732](arg Data[270729] :(270727 call chpl__buildArrayRuntimeType unknown Dom[270722] unknown eltType[270725]), arg comparator[270737] : unknown rec[270734] = defaultComparator[267996]) : _unknown[51] "no return value for void"
  {(270745 call chpl_check_comparator comparator[270737] eltType[270725])
    if(270777 call _cond_test(270753 call !=(270749 call . Dom[270722] c"rank") 1))
    {(270774 call compilerError "binaryInsertionSort() requires 1-D array")
    } const low[270785] "const"(270782 call . Dom[270722] c"alignedLow") const high[270792] "const"(270789 call . Dom[270722] c"alignedHigh") const stride[270802] "const"(270801 call abs(270797 call . Dom[270722] c"stride"))(270805 'end of statement')
    { unknown _indexOfInterest[270959] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[270960] "expr temp" "temp"(270969 'move' _iterator[270960](270967 call _getIterator(270978 call chpl_direct_range_iter low[270785] high[270792] stride[270802])))
      Defer
      {
        {(270994 call _freeIterator _iterator[270960])
        }
      }
      { scopeless type(270983 'move' _indexOfInterest[270959](270980 call iteratorIndex _iterator[270960]))
      }
      ForLoop[270961]
      { unknown i[270987] "index var" "insert auto destroy"(270989 'move' i[270987] _indexOfInterest[270959])
        { unknown valToInsert[270818](270817 call Data[270729] i[270987]) unknown lo[270822] low[270785] unknown hi[270829](270827 call - i[270987] stride[270802])(270832 'end of statement') unknown tmp[270847] "temp"(270846 call _binarySearchForLastOccurrence Data[270729] valToInsert[270818] comparator[270737] lo[270822] hi[270829])(270854 call _check_tuple_var_decl tmp[270847] 2) unknown found[270834](270848 call tmp[270847] 0) unknown loc[270836](270851 call tmp[270847] 1)(270859 'end of statement')(270870 call = loc[270836](270867 IfExpr  found[270834] then
          { scopeless(270864 call + loc[270836] stride[270802])
          } else
          { scopeless loc[270836]
          } ))
          { unknown _indexOfInterest[270901] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[270902] "expr temp" "temp"(270911 'move' _iterator[270902](270909 call _getIterator(270928 call chpl_direct_range_iter loc[270836](270925 call - i[270987] stride[270802])(270921 call - stride[270802]))))
            Defer
            {
              {(270944 call _freeIterator _iterator[270902])
              }
            }
            { scopeless type(270933 'move' _indexOfInterest[270901](270930 call iteratorIndex _iterator[270902]))
            }
            ForLoop[270903]
            { unknown j[270937] "index var" "insert auto destroy"(270939 'move' j[270937] _indexOfInterest[270901])
              {(270897 call =(270892 call Data[270729](270889 call + j[270937] stride[270802]))(270896 call Data[270729] j[270937]))
              } label _continueLabel[270906] _indexOfInterest[270901] _iterator[270902]
            } label _breakLabel[270907]
          }(270956 call =(270954 call Data[270729] loc[270836]) valToInsert[270818])
        } label _continueLabel[270964] _indexOfInterest[270959] _iterator[270960]
      } label _breakLabel[270965]
    }
  } function _binarySearchForLastOccurrence[271013](arg Data[271010] :(271008 call chpl__buildArrayRuntimeType unknown Dom[271005]), arg val[271015]:_any[178](?), arg comparator[271020] : unknown rec[271017] = defaultComparator[267996], in arg lo[271028] =(271025 call . Dom[271005] c"alignedLow"), in arg hi[271035] =(271032 call . Dom[271005] c"alignedHigh")) : _unknown[51] "private"
  { const stride[271053] "const"(271050 IfExpr (271039 call . Dom[271005] c"stridable") then
    { scopeless(271048 call abs(271044 call . Dom[271005] c"stride"))
    } else
    { scopeless 1
    } )(271056 'end of statement') unknown loc[271061](271059 call - 1)(271064 'end of statement')
    { unknown tmp[271159] "temp"(271183 'move' tmp[271159](271178 call _cond_test(271180 call <= lo[271028] hi[271035])))
      WhileDo[271164]
      {
        { const size[271076] "const"(271074 call /(271071 call - hi[271035] lo[271028]) stride[271053]) const mid[271089] "const"(271087 call + lo[271028](271085 call *(271082 call / size[271076] 2) stride[271053]))(271092 'end of statement')
          if(271154 call _cond_test(271104 call ==(271102 call chpl_compare val[271015](271100 call Data[271010] mid[271089]) comparator[271020]) 0))
          {(271108 call = loc[271061] mid[271089])(271117 call = lo[271028](271115 call + loc[271061] stride[271053]))
          }
          {
            if(271148 call _cond_test(271130 call >(271128 call chpl_compare val[271015](271126 call Data[271010] mid[271089]) comparator[271020]) 0))
            {(271137 call = lo[271028](271135 call + mid[271089] stride[271053]))
            }
            {(271145 call = hi[271035](271143 call - mid[271089] stride[271053]))
            }
          }
        } label _continueLabel[271162](271173 'move' tmp[271159](271168 call _cond_test(271170 call <= lo[271028] hi[271035]))) tmp[271159]
      } label _breakLabel[271163]
    }
    if(271199 call _cond_test(271190 call == loc[271061](271188 call - 1)))
    {(271197 return(271195 call _build_tuple 0 lo[271028]))
    }(271209 return(271207 call _build_tuple 1 loc[271061]))
  }(355381 'used modules list'(353066 'use' ChapelStandard[20267])(270717 'use' Sort[267987]))
}