AST dump for ChapelHashtable after pass readExternC.
Module use list: 

{
  { scopeless
    (200396 'use' ChapelBase)
    (200398 'use' DSIUtil)
  }
  type chpl__hash_status[200408] def empty[200402]:chpl__hash_status[200408] 0 def full[200404]:chpl__hash_status[200408] def deleted[200406]:chpl__hash_status[200408]
  {
  }
  type chpl_TableEntry[200451](?) unknown status[200419](200416 call . chpl__hash_status c"empty") chpl__hash_status unknown key[200423] unknown val[200427] function chpl_TableEntry[200451](?).isFull[200433](arg _mt[200455]:_MT[238], arg this[200453]:chpl_TableEntry[200451](?)) : _unknown[51] "inline" "method" "primary method"
  {
    (200445 return(200443 call ==(200436 call . this c"status")(200440 call . chpl__hash_status c"full")))
  }
  function chpl__primes[200460]() : _unknown[51] "inline" "no parens" "private"
  {
    { scopeless
      (200628 return(200626 call _build_tuple 0 23 53 89 191 383 761 1531 3067 6143 12281 24571 49139 98299 196597 393209 786431 1572853 3145721 6291449 12582893 25165813 50331599 100663291 201326557 402653171 805306357 1610612711 3221225461 6442450939 12884901877 25769803751 51539607551 103079215087 206158430183 412316860387 824633720831 1649267441651 3298534883309 6597069766631 13194139533299 26388279066623 52776558133177 105553116266489 211106232532969 422212465065953 844424930131963 1688849860263901 3377699720527861 6755399441055731 13510798882111483 27021597764222939 54043195528445869 108086391056891903 216172782113783773 432345564227567561 864691128455135207))
    }
  }
  function _moveToReturn[200637](const  ref arg arg[200635]:_any[178](?)) : _unknown[51] "private"
  {
    if(200664 call _cond_test(200642 call ==(200640 'typeof' arg) nothing[7]))
    {
      (200645 return none[57])
    }
    {
      { scopeless
        unknown moved[200650] "no auto destroy" "no copy" "no init"(200649 'typeof' arg)
        (200653 'end of statement')
      }
      (200659 '=' moved arg)
      (200662 return moved)
    }
  }
  function _moveInit[200675](ref arg lhs[200673]:_any[178](?), in arg rhs[200677]:_any[178](?)) : _unknown[51] "private"
  {
    if(200707 call _cond_test(200683 call !=(200680 'typeof' lhs)(200682 'typeof' rhs)))
    {
      (200704 call compilerError "type mismatch in _moveInit")
    }
    if(200725 call _cond_test(200715 call ==(200713 'typeof' lhs) nothing[7]))
    {
    }
    {
      (200722 '=' lhs rhs)
    }
  }
  function _allocateData[200737](arg size[200734] :
  int[13], arg tableEltType[200739]:_any[178](?)) : _unknown[51] "private"
  {
    if(200766 call _cond_test(200743 call == size 0))
    {
      { scopeless
        (200764 call halt "attempt to allocate hashtable with size 0")
      }
    }
    { scopeless
      unknown callPostAlloc[200773] bool[10]
      (200776 'end of statement')
    }
    { scopeless
      unknown ret[200783](200782 call _ddata_allocate_noinit tableEltType size callPostAlloc)
      (200786 'end of statement')
    }
    { scopeless
      unknown initMethod[200792](200791 call init_elts_method size tableEltType)
      (200795 'end of statement')
    }
    { scopeless
      const sizeofElement[200800] "const"(200799 call _ddata_sizeof_element ret)
      (200803 'end of statement')
    }
    function ptrTo[200808](ref arg x[200806]:_any[178](?)) : _unknown[51] "inline"
    {
      (200814 return(200813 call c_pointer_return x))
    }
    {
      unknown tmp[200942] "expr temp" "maybe param" "maybe type" "temp"
      (200944 'move' tmp[200942] initMethod)
      if(200949 call _cond_test(200946 call == tmp[200942](200822 call . ArrayInit c"noInit")))
      {
      }
      {
        if(200955 call _cond_test(200952 call == tmp[200942](200830 call . ArrayInit c"serialInit")))
        {
          {
            unknown _indexOfInterest[200859] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[200860] "expr temp" "temp"
            (200869 'move' _iterator[200860](200867 call _getIterator(200838 call _allSlots size)))
            Defer
            {
              {
                (200886 call _freeIterator _iterator[200860])
              }
            }
            { scopeless type
              (200875 'move' _indexOfInterest[200859](200872 call iteratorIndex _iterator[200860]))
            }
            ForLoop[200861]
            {
              unknown slot[200879] "index var" "insert auto destroy"
              (200881 'move' slot[200879] _indexOfInterest[200859])
              {
                (200856 call c_memset(200846 call ptrTo(200844 call ret slot))(200853 call _cast(200852 call uint[115] 8) 0) sizeofElement)
              }
              label _continueLabel[200864]
              _indexOfInterest[200859]
              _iterator[200860]
            }
            label _breakLabel[200865]
          }
        }
        {
          if(200962 call _cond_test(200959 call == tmp[200942](200897 call . ArrayInit c"parallelInit")))
          {
            Forall {
              induction variables:
                
                unknown slot[200927] "index var" "insert auto destroy"
              iterated expressions:
                (200905 call _allSlots size)
              shadow variables:
              other variables
                forall body
              {
                (200923 call c_memset(200913 call ptrTo(200911 call ret slot))(200920 call _cast(200919 call uint[115] 8) 0) sizeofElement)
              }
            }
          }
          {
            (200936 call halt "ArrayInit.heuristicInit should have been made concrete")
          }
        }
      }
    }
    if(200975 call _cond_test callPostAlloc)
    {
      (200972 call _ddata_allocate_postalloc ret size)
    }
    (200980 return ret)
  }
  function _freeData[200988](arg data[200986]:_any[178](?), arg size[200991] :
  int[13]) : _unknown[51] "private"
  {
    if(201005 call _cond_test(200996 call != data nil[44]))
    {
      (201002 call _ddata_free data size)
    }
  }
  function _typeNeedsDeinit[201016](arg t[201014]:_any[178](?)) param : _unknown[51] "private"
  {
    (201022 return(201021 'needs auto destroy' t))
  }
  function _deinitSlot[201033](ref arg aSlot[201030] :
  chpl_TableEntry) : _unknown[51] "private"
  {
    if(201052 call _cond_test(201042 call _typeNeedsDeinit(201040 'typeof'(201037 call . aSlot c"key"))))
    {
      (201049 call chpl__autoDestroy(201045 call . aSlot c"key"))
    }
    if(201076 call _cond_test(201066 call _typeNeedsDeinit(201064 'typeof'(201061 call . aSlot c"val"))))
    {
      (201073 call chpl__autoDestroy(201069 call . aSlot c"val"))
    }
  }
  function _isSlotFull[201088](const  ref arg aSlot[201085] :
  chpl_TableEntry) : _unknown[51] "inline" "private"
  {
    (201101 return(201099 call ==(201092 call . aSlot c"status")(201096 call . chpl__hash_status c"full")))
  }
  { scopeless type
    bool[10]
  }
  function _allSlotsNumChunks[201113](arg size[201110] :
  int[13]) : _unknown[51] "private"
  {
    { scopeless
      const numTasks[201127] "const"(201124 IfExpr (201117 call == dataParTasksPerLocale 0) then
      { scopeless
        (201120 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (201130 'end of statement')
    }
    { scopeless
      const ignoreRunning[201133] "const" dataParIgnoreRunningTasks
      (201136 'end of statement')
    }
    { scopeless
      const minSizePerTask[201138] "const" dataParMinGranularity
      (201141 'end of statement')
    }
    if(201194 call _cond_test debugAssocDataPar)
    {
      (201163 call writeln "### numTasks = " numTasks)
      (201170 call writeln "### ignoreRunning = " ignoreRunning)
      (201192 call writeln "### minSizePerTask = " minSizePerTask)
    }
    { scopeless
      unknown numChunks[201205](201204 call _computeNumChunks numTasks ignoreRunning minSizePerTask size)
      (201208 'end of statement')
    }
    if(201251 call _cond_test debugAssocDataPar)
    {
      (201248 call writeln "### numChunks=" numChunks ", size=" size)
    }
    (201256 return numChunks)
  }
  function _allSlots[201266](arg size[201263] :
  int[13]) : _unknown[51] "iterator fn"
  {
    {
      unknown _indexOfInterest[201279] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[201280] "expr temp" "temp"
      (201289 'move' _iterator[201280](201287 call _getIterator(201296 call chpl_direct_counted_range_iter 0 size)))
      Defer
      {
        {
          (201312 call _freeIterator _iterator[201280])
        }
      }
      { scopeless type
        (201301 'move' _indexOfInterest[201279](201298 call iteratorIndex _iterator[201280]))
      }
      ForLoop[201281]
      {
        unknown slot[201305] "index var" "insert auto destroy"
        (201307 'move' slot[201305] _indexOfInterest[201279])
        {
          (201276 yield slot)
        }
        label _continueLabel[201284]
        _indexOfInterest[201279]
        _iterator[201280]
      }
      label _breakLabel[201285]
    }
  }
  function _allSlots[201328](arg size[201325] :
  int[13], param arg tag[201331] :
  iterKind) : _unknown[51] "iterator fn" "private"
  {
    if(201364 call _cond_test debugDefaultAssoc)
    {
      (201361 call writeln "*** In associative domain _allSlots standalone iterator")
    }
    { scopeless
      const numChunks[201373] "const"(201372 call _allSlotsNumChunks size)
      (201376 'end of statement')
    }
    if(201807 call _cond_test(201379 call == numChunks 1))
    {
      {
        unknown _indexOfInterest[201392] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[201393] "expr temp" "temp"
        (201402 'move' _iterator[201393](201400 call _getIterator(201409 call chpl_direct_counted_range_iter 0 size)))
        Defer
        {
          {
            (201425 call _freeIterator _iterator[201393])
          }
        }
        { scopeless type
          (201414 'move' _indexOfInterest[201392](201411 call iteratorIndex _iterator[201393]))
        }
        ForLoop[201394]
        {
          unknown slot[201418] "index var" "insert auto destroy"
          (201420 'move' slot[201418] _indexOfInterest[201392])
          {
            (201389 yield slot)
          }
          label _continueLabel[201397]
          _indexOfInterest[201392]
          _iterator[201393]
        }
        label _breakLabel[201398]
      }
    }
    {
      {
        unknown tmpIter[201565] "expr temp" "maybe ref" "no copy" "temp"
        (201568 'move' tmpIter[201565](201438 call #(201435 call chpl_build_low_bounded_range 0) numChunks))
        unknown isRngDomArr[201787] "maybe param" "temp"
        (201802 'move' isRngDomArr[201787](201800 call ||(201789 call isBoundedRange tmpIter[201565])(201798 call ||(201792 call isDomain tmpIter[201565])(201795 call isArray tmpIter[201565]))))
        if isRngDomArr[201787]
        {
          const _coforallCount[201654] "const" "end count" "temp"
          (201723 'move' _coforallCount[201654](201720 call _endCountAlloc 1))
          unknown numTasks[201655] "temp"
          (201707 'move' numTasks[201655](201703 call . tmpIter[201565] c"size"))
          (201698 call _upEndCount _coforallCount[201654] 1 numTasks[201655])
          (201695 call chpl_resetTaskSpawn numTasks[201655])
          unknown _indexOfInterest[201662] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[201663] "expr temp" "temp"
          (201672 'move' _iterator[201663](201670 call _getIterator tmpIter[201565]))
          Defer
          {
            {
              (201688 call _freeIterator _iterator[201663])
            }
          }
          { scopeless type
            (201677 'move' _indexOfInterest[201662](201674 call iteratorIndex _iterator[201663]))
          }
          ForLoop[201664]
          {
            unknown chunk[201681] "coforall index var" "index var" "insert auto destroy"
            (201683 'move' chunk[201681] _indexOfInterest[201662])
            {
              {
                { scopeless
                  const tmp[201572] "const" "temp"(201574 call _computeBlock size numChunks chunk(201579 call - size 1))
                  (201584 call _check_tuple_var_decl tmp[201572] 2)
                  const lo[201587] "const"(201589 call tmp[201572] 0)
                  const hi[201592] "const"(201594 call tmp[201572] 1)
                  (201597 'end of statement')
                }
                if(201599 call _cond_test debugAssocDataPar)
                {
                  { scopeless
                    (201604 call writeln "*** chunk: " chunk " owns "(201609 call chpl_build_bounded_range lo hi))
                  }
                }
                {
                  unknown _indexOfInterest[201614] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[201616] "expr temp" "temp"
                  (201618 'move' _iterator[201616](201621 call _getIterator(201623 call chpl_direct_range_iter lo hi 1)))
                  Defer
                  {
                    {
                      (201629 call _freeIterator _iterator[201616])
                    }
                  }
                  { scopeless type
                    (201633 'move' _indexOfInterest[201614](201636 call iteratorIndex _iterator[201616]))
                  }
                  ForLoop[201638]
                  {
                    unknown slot[201641] "index var" "insert auto destroy"
                    (201643 'move' slot[201641] _indexOfInterest[201614])
                    {
                      (201647 yield slot)
                    }
                    label _continueLabel[201649]
                    _indexOfInterest[201614]
                    _iterator[201616]
                  }
                  label _breakLabel[201651]
                }
              }
              (201657 call _downEndCount _coforallCount[201654] nil[44])
              (201656 'coforall loop')
            }
            label _continueLabel[201667]
            _indexOfInterest[201662]
            _iterator[201663]
          }
          label _breakLabel[201668]
          Defer
          {
            {
              (201710 call _endCountFree _coforallCount[201654])
            }
          }
          (201715 call _waitEndCount _coforallCount[201654] 1 numTasks[201655])
        }
        {
          const _coforallCount[201727] "const" "end count" "temp"
          (201784 'move' _coforallCount[201727](201781 call _endCountAlloc 1))
          unknown _indexOfInterest[201735] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[201736] "expr temp" "temp"
          (201745 'move' _iterator[201736](201743 call _getIterator tmpIter[201565]))
          Defer
          {
            {
              (201761 call _freeIterator _iterator[201736])
            }
          }
          { scopeless type
            (201750 'move' _indexOfInterest[201735](201747 call iteratorIndex _iterator[201736]))
          }
          ForLoop[201737]
          {
            unknown chunk[201754] "coforall index var" "index var" "insert auto destroy"
            (201756 'move' chunk[201754] _indexOfInterest[201735])
            (201768 call _upEndCount _coforallCount[201727] 1)
            {
              {
                { scopeless
                  const tmp[201455] "const" "temp"(201454 call _computeBlock size numChunks chunk(201452 call - size 1))
                  (201462 call _check_tuple_var_decl tmp[201455] 2)
                  const lo[201440] "const"(201456 call tmp[201455] 0)
                  const hi[201442] "const"(201459 call tmp[201455] 1)
                  (201467 'end of statement')
                }
                if(201513 call _cond_test debugAssocDataPar)
                {
                  { scopeless
                    (201511 call writeln "*** chunk: " chunk " owns "(201509 call chpl_build_bounded_range lo hi))
                  }
                }
                {
                  unknown _indexOfInterest[201527] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[201528] "expr temp" "temp"
                  (201537 'move' _iterator[201528](201535 call _getIterator(201542 call chpl_direct_range_iter lo hi 1)))
                  Defer
                  {
                    {
                      (201558 call _freeIterator _iterator[201528])
                    }
                  }
                  { scopeless type
                    (201547 'move' _indexOfInterest[201527](201544 call iteratorIndex _iterator[201528]))
                  }
                  ForLoop[201529]
                  {
                    unknown slot[201551] "index var" "insert auto destroy"
                    (201553 'move' slot[201551] _indexOfInterest[201527])
                    {
                      (201524 yield slot)
                    }
                    label _continueLabel[201532]
                    _indexOfInterest[201527]
                    _iterator[201528]
                  }
                  label _breakLabel[201533]
                }
              }
              (201730 call _downEndCount _coforallCount[201727] nil[44])
              (201729 'coforall loop')
            }
            label _continueLabel[201740]
            _indexOfInterest[201735]
            _iterator[201736]
          }
          label _breakLabel[201741]
          Defer
          {
            {
              (201772 call _endCountFree _coforallCount[201727])
            }
          }
          (201777 call _waitEndCount _coforallCount[201727] 1)
        }
      }
    }
  }
  where {
    (201339 call == tag(201336 call . iterKind c"standalone"))
  }
  function _allSlots[201820](arg size[201817] :
  int[13], param arg tag[201823] :
  iterKind) : _unknown[51] "iterator fn" "private"
  {
    if(201855 call _cond_test debugDefaultAssoc)
    {
      { scopeless
        (201853 call writeln "*** In associative domain _allSlots leader iterator:")
      }
    }
    { scopeless
      const numChunks[201865] "const"(201864 call _allSlotsNumChunks size)
      (201868 'end of statement')
    }
    if(202168 call _cond_test(201871 call == numChunks 1))
    {
      (201879 yield(201877 call #(201874 call chpl_build_low_bounded_range 0) size))
    }
    {
      {
        unknown tmpIter[201959] "expr temp" "maybe ref" "no copy" "temp"
        (201962 'move' tmpIter[201959](201887 call #(201884 call chpl_build_low_bounded_range 0) numChunks))
        unknown isRngDomArr[202148] "maybe param" "temp"
        (202163 'move' isRngDomArr[202148](202161 call ||(202150 call isBoundedRange tmpIter[201959])(202159 call ||(202153 call isDomain tmpIter[201959])(202156 call isArray tmpIter[201959]))))
        if isRngDomArr[202148]
        {
          const _coforallCount[202015] "const" "end count" "temp"
          (202084 'move' _coforallCount[202015](202081 call _endCountAlloc 1))
          unknown numTasks[202016] "temp"
          (202068 'move' numTasks[202016](202064 call . tmpIter[201959] c"size"))
          (202059 call _upEndCount _coforallCount[202015] 1 numTasks[202016])
          (202056 call chpl_resetTaskSpawn numTasks[202016])
          unknown _indexOfInterest[202023] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[202024] "expr temp" "temp"
          (202033 'move' _iterator[202024](202031 call _getIterator tmpIter[201959]))
          Defer
          {
            {
              (202049 call _freeIterator _iterator[202024])
            }
          }
          { scopeless type
            (202038 'move' _indexOfInterest[202023](202035 call iteratorIndex _iterator[202024]))
          }
          ForLoop[202025]
          {
            unknown chunk[202042] "coforall index var" "index var" "insert auto destroy"
            (202044 'move' chunk[202042] _indexOfInterest[202023])
            {
              {
                { scopeless
                  const tmp[201966] "const" "temp"(201968 call _computeBlock size numChunks chunk(201973 call - size 1))
                  (201978 call _check_tuple_var_decl tmp[201966] 2)
                  const lo[201981] "const"(201983 call tmp[201966] 0)
                  const hi[201986] "const"(201988 call tmp[201966] 1)
                  (201991 'end of statement')
                }
                if(201993 call _cond_test debugDefaultAssoc)
                {
                  { scopeless
                    (201998 call writeln "*** DI[" chunk "]: tuple = "(202003 call _build_tuple(202005 call chpl_build_bounded_range lo hi)))
                  }
                }
                (202009 yield(202011 call chpl_build_bounded_range lo hi))
              }
              (202018 call _downEndCount _coforallCount[202015] nil[44])
              (202017 'coforall loop')
            }
            label _continueLabel[202028]
            _indexOfInterest[202023]
            _iterator[202024]
          }
          label _breakLabel[202029]
          Defer
          {
            {
              (202071 call _endCountFree _coforallCount[202015])
            }
          }
          (202076 call _waitEndCount _coforallCount[202015] 1 numTasks[202016])
        }
        {
          const _coforallCount[202088] "const" "end count" "temp"
          (202145 'move' _coforallCount[202088](202142 call _endCountAlloc 1))
          unknown _indexOfInterest[202096] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[202097] "expr temp" "temp"
          (202106 'move' _iterator[202097](202104 call _getIterator tmpIter[201959]))
          Defer
          {
            {
              (202122 call _freeIterator _iterator[202097])
            }
          }
          { scopeless type
            (202111 'move' _indexOfInterest[202096](202108 call iteratorIndex _iterator[202097]))
          }
          ForLoop[202098]
          {
            unknown chunk[202115] "coforall index var" "index var" "insert auto destroy"
            (202117 'move' chunk[202115] _indexOfInterest[202096])
            (202129 call _upEndCount _coforallCount[202088] 1)
            {
              {
                { scopeless
                  const tmp[201904] "const" "temp"(201903 call _computeBlock size numChunks chunk(201901 call - size 1))
                  (201911 call _check_tuple_var_decl tmp[201904] 2)
                  const lo[201889] "const"(201905 call tmp[201904] 0)
                  const hi[201891] "const"(201908 call tmp[201904] 1)
                  (201916 'end of statement')
                }
                if(201948 call _cond_test debugDefaultAssoc)
                {
                  { scopeless
                    (201946 call writeln "*** DI[" chunk "]: tuple = "(201944 call _build_tuple(201942 call chpl_build_bounded_range lo hi)))
                  }
                }
                (201957 yield(201955 call chpl_build_bounded_range lo hi))
              }
              (202091 call _downEndCount _coforallCount[202088] nil[44])
              (202090 'coforall loop')
            }
            label _continueLabel[202101]
            _indexOfInterest[202096]
            _iterator[202097]
          }
          label _breakLabel[202102]
          Defer
          {
            {
              (202133 call _endCountFree _coforallCount[202088])
            }
          }
          (202138 call _waitEndCount _coforallCount[202088] 1)
        }
      }
    }
  }
  where {
    (201831 call == tag(201828 call . iterKind c"leader"))
  }
  function _allSlots[202181](arg size[202178] :
  int[13], arg followThis[202183]:_any[178](?), param arg tag[202186] :
  iterKind) : _unknown[51] "iterator fn" "private"
  {
    { scopeless
      unknown tmp[202202] "temp" followThis
      (202209 call _check_tuple_var_decl tmp[202202] 2)
      unknown chunk[202196](202203 call tmp[202202] 0)
      unknown followThisDom[202198](202206 call tmp[202202] 1)
      (202214 'end of statement')
    }
    if(202256 call _cond_test debugDefaultAssoc)
    {
      { scopeless
        (202254 call writeln "In associative domain _allSlots follower iterator: " "Following " chunk)
      }
    }
    {
      unknown _indexOfInterest[202267] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202268] "expr temp" "temp"
      (202277 'move' _iterator[202268](202275 call _getIterator chunk))
      Defer
      {
        {
          (202293 call _freeIterator _iterator[202268])
        }
      }
      { scopeless type
        (202282 'move' _indexOfInterest[202267](202279 call iteratorIndex _iterator[202268]))
      }
      ForLoop[202269]
      {
        unknown slot[202286] "index var" "insert auto destroy"
        (202288 'move' slot[202286] _indexOfInterest[202267])
        {
          (202264 yield slot)
        }
        label _continueLabel[202272]
        _indexOfInterest[202267]
        _iterator[202268]
      }
      label _breakLabel[202273]
    }
  }
  where {
    (202194 call == tag(202191 call . iterKind c"follower"))
  }
  type chpl__rehashHelpers[202342] function chpl__rehashHelpers[202342].startRehash[202310](arg _mt[202346]:_MT[238], arg this[202344]:chpl__rehashHelpers[202342], arg newSize[202307] :
  int[13]) : _unknown[51] "method" "primary method"
  {
  } function chpl__rehashHelpers[202342].moveElementDuringRehash[202321](arg _mt[202350]:_MT[238], arg this[202348]:chpl__rehashHelpers[202342], arg oldSlot[202318] :
  int[13], arg newSlot[202324] :
  int[13]) : _unknown[51] "method" "primary method"
  {
  } function chpl__rehashHelpers[202342].finishRehash[202336](arg _mt[202354]:_MT[238], arg this[202352]:chpl__rehashHelpers[202342], arg oldSize[202333] :
  int[13]) : _unknown[51] "method" "primary method"
  {
  }
  type chpl__hashtable[204509](?) unknown keyType[202358] "type variable" unknown valType[202361] "type variable" unknown tableNumFullSlots[202365] int[13] unknown tableNumDeletedSlots[202370] int[13] unknown tableSizeNum[202375] int[13] unknown tableSize[202380] int[13] unknown table[202392](202391 call _ddata(202389 call chpl_TableEntry keyType valType)) unknown rehashHelpers[202400](202398 call _owned(202397 'to nilable class from type' chpl__rehashHelpers)) unknown postponeResize[202405] bool[10] function chpl__hashtable[204509](?).init[202413](arg _mt[204513]:_MT[238], arg this[204511]:chpl__hashtable[204509](?), arg keyType[202411]:_any[178](?), arg valType[202415]:_any[178](?), in arg rehashHelpers[202422] :
  (202419 call _owned(202418 'to nilable class from type' chpl__rehashHelpers)) =
  nil[44]) : _unknown[51] "method" "primary method"
  {
    (202433 call =(202429 call . this c"keyType") keyType)
    (202442 call =(202438 call . this c"valType") valType)
    (202452 call =(202448 call . this c"tableNumFullSlots") 0)
    (202462 call =(202458 call . this c"tableNumDeletedSlots") 0)
    (202472 call =(202468 call . this c"tableSizeNum") 0)
    (202483 call =(202476 call . this c"tableSize")(202482 call chpl__primes tableSizeNum))
    (202491 call =(202487 call . this c"rehashHelpers") rehashHelpers)
    (202499 call =(202495 call . this c"postponeResize") 0)
    (202507 call(202503 call . this c"complete"))
    (202520 call =(202510 call . this c"table")(202519 call allocateTable(202515 call . this c"tableSize")))
  } function chpl__hashtable[204509](?).deinit[202527](arg _mt[204517]:_MT[238], arg this[204515]:chpl__hashtable[204509](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    if(202650 call _cond_test(202537 call ||(202532 call _typeNeedsDeinit keyType)(202536 call _typeNeedsDeinit valType)))
    {
      if(202645 call _cond_test(202547 call &&(202542 call _deinitElementsIsParallel keyType)(202546 call _deinitElementsIsParallel valType)))
      {
        Forall {
          induction variables:
            
            unknown slot[202578] "index var" "insert auto destroy"
          iterated expressions:
            (202553 call _allSlots tableSize)
          shadow variables:
          other variables
            forall body
          {
            { scopeless
              unknown aSlot[202558] "ref var"(202557 call table slot)
              (202561 'end of statement')
            }
            if(202573 call _cond_test(202566 call _isSlotFull aSlot))
            {
              (202570 call _deinitSlot aSlot)
            }
          }
        }
      }
      {
        {
          unknown _indexOfInterest[202610] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[202611] "expr temp" "temp"
          (202620 'move' _iterator[202611](202618 call _getIterator(202586 call _allSlots tableSize)))
          Defer
          {
            {
              (202637 call _freeIterator _iterator[202611])
            }
          }
          { scopeless type
            (202626 'move' _indexOfInterest[202610](202623 call iteratorIndex _iterator[202611]))
          }
          ForLoop[202612]
          {
            unknown slot[202630] "index var" "insert auto destroy"
            (202632 'move' slot[202630] _indexOfInterest[202610])
            {
              { scopeless
                unknown aSlot[202591] "ref var"(202590 call table slot)
                (202594 'end of statement')
              }
              if(202606 call _cond_test(202599 call _isSlotFull aSlot))
              {
                (202603 call _deinitSlot aSlot)
              }
            }
            label _continueLabel[202615]
            _indexOfInterest[202610]
            _iterator[202611]
          }
          label _breakLabel[202616]
        }
      }
    }
    (202659 call _freeData table tableSize)
  } function chpl__hashtable[204509](?).isSlotFull[202669](arg _mt[204521]:_MT[238], arg this[204519]:chpl__hashtable[204509](?), arg slot[202666] :
  int[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (202685 return(202683 call ==(202676 call .(202675 call table slot) c"status")(202680 call . chpl__hash_status c"full")))
  }
  { scopeless type
    bool[10]
  } function chpl__hashtable[204509](?).allSlots[202693](arg _mt[204525]:_MT[238], arg this[204523]:chpl__hashtable[204509](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[202704] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202705] "expr temp" "temp"
      (202714 'move' _iterator[202705](202712 call _getIterator(202699 call _allSlots tableSize)))
      Defer
      {
        {
          (202731 call _freeIterator _iterator[202705])
        }
      }
      { scopeless type
        (202720 'move' _indexOfInterest[202704](202717 call iteratorIndex _iterator[202705]))
      }
      ForLoop[202706]
      {
        unknown slot[202724] "index var" "insert auto destroy"
        (202726 'move' slot[202724] _indexOfInterest[202704])
        {
          (202701 yield slot)
        }
        label _continueLabel[202709]
        _indexOfInterest[202704]
        _iterator[202705]
      }
      label _breakLabel[202710]
    }
  } function chpl__hashtable[204509](?).allSlots[202747](arg _mt[204529]:_MT[238], arg this[204527]:chpl__hashtable[204509](?), param arg tag[202744] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[202767] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202768] "expr temp" "temp"
      (202777 'move' _iterator[202768](202775 call _getIterator(202762 call _allSlots tableSize(tag = tag))))
      Defer
      {
        {
          (202794 call _freeIterator _iterator[202768])
        }
      }
      { scopeless type
        (202783 'move' _indexOfInterest[202767](202780 call iteratorIndex _iterator[202768]))
      }
      ForLoop[202769]
      {
        unknown slot[202787] "index var" "insert auto destroy"
        (202789 'move' slot[202787] _indexOfInterest[202767])
        {
          (202764 yield slot)
        }
        label _continueLabel[202772]
        _indexOfInterest[202767]
        _iterator[202768]
      }
      label _breakLabel[202773]
    }
  }
  where {
    (202754 call == tag(202751 call . iterKind c"standalone"))
  } function chpl__hashtable[204509](?).allSlots[202811](arg _mt[204533]:_MT[238], arg this[204531]:chpl__hashtable[204509](?), param arg tag[202808] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[202831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202832] "expr temp" "temp"
      (202841 'move' _iterator[202832](202839 call _getIterator(202826 call _allSlots tableSize(tag = tag))))
      Defer
      {
        {
          (202858 call _freeIterator _iterator[202832])
        }
      }
      { scopeless type
        (202847 'move' _indexOfInterest[202831](202844 call iteratorIndex _iterator[202832]))
      }
      ForLoop[202833]
      {
        unknown followThis[202851] "index var" "insert auto destroy"
        (202853 'move' followThis[202851] _indexOfInterest[202831])
        {
          (202828 yield followThis)
        }
        label _continueLabel[202836]
        _indexOfInterest[202831]
        _iterator[202832]
      }
      label _breakLabel[202837]
    }
  }
  where {
    (202818 call == tag(202815 call . iterKind c"leader"))
  } function chpl__hashtable[204509](?).allSlots[202873](arg _mt[204537]:_MT[238], arg this[204535]:chpl__hashtable[204509](?), arg followThis[202871]:_any[178](?), param arg tag[202876] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[202898] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[202899] "expr temp" "temp"
      (202908 'move' _iterator[202899](202906 call _getIterator(202893 call _allSlots tableSize followThis(tag = tag))))
      Defer
      {
        {
          (202925 call _freeIterator _iterator[202899])
        }
      }
      { scopeless type
        (202914 'move' _indexOfInterest[202898](202911 call iteratorIndex _iterator[202899]))
      }
      ForLoop[202900]
      {
        unknown i[202918] "index var" "insert auto destroy"
        (202920 'move' i[202918] _indexOfInterest[202898])
        {
          (202895 yield i)
        }
        label _continueLabel[202903]
        _indexOfInterest[202898]
        _iterator[202899]
      }
      label _breakLabel[202904]
    }
  }
  where {
    (202884 call == tag(202881 call . iterKind c"follower"))
  } function chpl__hashtable[204509](?)._findSlot[202942](arg _mt[204541]:_MT[238], arg this[204539]:chpl__hashtable[204509](?), arg key[202939] :
  keyType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown firstOpen[202952](202950 call - 1)
      (202955 'end of statement')
    }
    {
      unknown _indexOfInterest[203061] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[203062] "expr temp" "temp"
      (203071 'move' _iterator[203062](203069 call _getIterator(202961 call _lookForSlots key)))
      Defer
      {
        {
          (203088 call _freeIterator _iterator[203062])
        }
      }
      { scopeless type
        (203077 'move' _indexOfInterest[203061](203074 call iteratorIndex _iterator[203062]))
      }
      ForLoop[203063]
      {
        unknown slotNum[203081] "index var" "insert auto destroy"
        (203083 'move' slotNum[203081] _indexOfInterest[203061])
        {
          { scopeless
            const slotStatus[202969] "const"(202966 call .(202965 call table slotNum) c"status")
            (202972 'end of statement')
          }
          if(203056 call _cond_test(202979 call == slotStatus(202976 call . chpl__hash_status c"empty")))
          {
            if(202992 call _cond_test(202985 call == firstOpen(202983 call - 1)))
            {
              { scopeless
                (202989 call = firstOpen slotNum)
              }
            }
            (203003 return(203001 call _build_tuple 0 firstOpen))
          }
          {
            { scopeless
              if(203052 call _cond_test(203010 call == slotStatus(203007 call . chpl__hash_status c"full")))
              {
                if(203030 call _cond_test(203020 call ==(203016 call .(203015 call table slotNum) c"key") key))
                {
                  (203027 return(203025 call _build_tuple 1 slotNum))
                }
              }
              {
                if(203046 call _cond_test(203039 call == firstOpen(203037 call - 1)))
                {
                  { scopeless
                    (203043 call = firstOpen slotNum)
                  }
                }
              }
            }
          }
        }
        label _continueLabel[203066]
        _indexOfInterest[203061]
        _iterator[203062]
      }
      label _breakLabel[203067]
    }
    (203102 return(203100 call _build_tuple 0(203097 call - 1)))
  }
  { scopeless type
    (202947 call _build_tuple bool[10] int[13])
  } function chpl__hashtable[204509](?)._lookForSlots[203113](arg _mt[204545]:_MT[238], arg this[204543]:chpl__hashtable[204509](?), arg key[203110] :
  keyType, arg numSlots[203116] =
  tableSize) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      const baseSlot[203126] "const"(203124 call _cast uint[115](203122 call chpl__defaultHashWrapper key))
      (203129 'end of statement')
    }
    if(203137 call _cond_test(203133 call == numSlots 0))
    {
      { scopeless
        (203135 return)
      }
    }
    {
      unknown _indexOfInterest[203182] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[203183] "expr temp" "temp"
      (203192 'move' _iterator[203183](203190 call _getIterator(203200 call chpl_direct_range_iter 0(203197 call / numSlots 2) 1)))
      Defer
      {
        {
          (203216 call _freeIterator _iterator[203183])
        }
      }
      { scopeless type
        (203205 'move' _indexOfInterest[203182](203202 call iteratorIndex _iterator[203183]))
      }
      ForLoop[203184]
      {
        unknown probe[203209] "index var" "insert auto destroy"
        (203211 'move' probe[203209] _indexOfInterest[203182])
        {
          { scopeless
            unknown uprobe[203154](203152 call _cast uint[115] probe)
            (203157 'end of statement')
          }
          { scopeless
            unknown n[203163](203161 call _cast uint[115] numSlots)
            (203166 'end of statement')
          }
          (203180 yield(203178 call _cast int[13](203175 call %(203172 call + baseSlot(203170 call ** uprobe 2)) n)))
        }
        label _continueLabel[203187]
        _indexOfInterest[203182]
        _iterator[203183]
      }
      label _breakLabel[203188]
    }
  } function chpl__hashtable[204509](?).findAvailableSlot[203231](arg _mt[204549]:_MT[238], arg this[204547]:chpl__hashtable[204509](?), arg key[203228] :
  keyType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown slotNum[203241](203239 call - 1)
      (203244 'end of statement')
    }
    { scopeless
      unknown foundSlot[203247] 0
      (203250 'end of statement')
    }
    if(203271 call _cond_test(203262 call >(203259 call *(203256 call +(203253 call + tableNumFullSlots tableNumDeletedSlots) 1) 2) tableSize))
    {
      (203268 call resize(grow = 1))
    }
    (203284 call =(203278 call _build_tuple foundSlot slotNum)(203283 call _findSlot key))
    if(203400 call _cond_test(203289 call >= slotNum 0))
    {
      (203296 return(203294 call _build_tuple foundSlot slotNum))
    }
    {
      (203303 call rehash tableSizeNum tableSize)
      (203315 call =(203309 call _build_tuple foundSlot slotNum)(203314 call _findSlot key))
      if(203389 call _cond_test(203320 call < slotNum 0))
      {
        (203377 call halt "couldn't add key -- " tableNumFullSlots " / " tableSize " taken")
        (203387 return(203385 call _build_tuple 0(203382 call - 1)))
      }
      (203398 return(203396 call _build_tuple foundSlot slotNum))
    }
  }
  { scopeless type
    (203236 call _build_tuple bool[10] int[13])
  } function chpl__hashtable[204509](?).fillSlot[203417](arg _mt[204553]:_MT[238], arg this[204551]:chpl__hashtable[204509](?), ref arg tableEntry[203414] :
  (203413 call chpl_TableEntry keyType valType), in arg key[203420] :
  keyType, in arg val[203424] :
  valType) : _unknown[51] "method" "primary method"
  {
    if(203471 call _cond_test(203435 call ==(203428 call . tableEntry c"status")(203432 call . chpl__hash_status c"full")))
    {
      (203440 call _deinitSlot tableEntry)
    }
    {
      if(203461 call _cond_test(203453 call ==(203444 call . tableEntry c"status")(203450 call . chpl__hash_status c"deleted")))
      {
        (203457 call -= tableNumDeletedSlots 1)
      }
      (203468 call += tableNumFullSlots 1)
    }
    (203484 call =(203477 call . tableEntry c"status")(203481 call . chpl__hash_status c"full"))
    (203494 call _moveInit(203489 call . tableEntry c"key") key)
    (203503 call _moveInit(203498 call . tableEntry c"val") val)
  } function chpl__hashtable[204509](?).fillSlot[203513](arg _mt[204557]:_MT[238], arg this[204555]:chpl__hashtable[204509](?), arg slotNum[203510] :
  int[13], in arg key[203516] :
  keyType, in arg val[203520] :
  valType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown tableEntry[203527] "ref var"(203526 call table slotNum)
      (203530 'end of statement')
    }
    (203537 call fillSlot tableEntry key val)
  } function chpl__hashtable[204509](?).findFullSlot[203547](arg _mt[204561]:_MT[238], arg this[204559]:chpl__hashtable[204509](?), arg key[203544] :
  keyType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown slotNum[203557](203555 call - 1)
      (203560 'end of statement')
    }
    { scopeless
      unknown foundSlot[203563] 0
      (203566 'end of statement')
    }
    (203576 call =(203570 call _build_tuple foundSlot slotNum)(203575 call _findSlot key))
    (203584 return(203582 call _build_tuple foundSlot slotNum))
  }
  { scopeless type
    (203552 call _build_tuple bool[10] int[13])
  } function chpl__hashtable[204509](?).clearSlot[203599](arg _mt[204565]:_MT[238], arg this[204563]:chpl__hashtable[204509](?), ref arg tableEntry[203596] :
  (203595 call chpl_TableEntry keyType valType), out arg key[203602] :
  keyType, out arg val[203606] :
  valType) : _unknown[51] "method" "primary method"
  {
    (203617 call = key(203616 call _moveToReturn(203612 call . tableEntry c"key")))
    (203629 call = val(203628 call _moveToReturn(203624 call . tableEntry c"val")))
    (203640 call =(203633 call . tableEntry c"status")(203637 call . chpl__hash_status c"deleted"))
    (203645 call -= tableNumFullSlots 1)
    (203650 call += tableNumDeletedSlots 1)
  } function chpl__hashtable[204509](?).clearSlot[203661](arg _mt[204569]:_MT[238], arg this[204567]:chpl__hashtable[204509](?), arg slotNum[203658] :
  int[13], out arg key[203664] :
  keyType, out arg val[203668] :
  valType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown tableEntry[203675] "ref var"(203674 call table slotNum)
      (203678 'end of statement')
    }
    (203685 call clearSlot tableEntry key val)
  } function chpl__hashtable[204509](?).maybeShrinkAfterRemove[203691](arg _mt[204573]:_MT[238], arg this[204571]:chpl__hashtable[204509](?)) : _unknown[51] "method" "primary method"
  {
    if(203713 call _cond_test(203704 call &&(203698 call <(203695 call * tableNumFullSlots 8) tableSize)(203702 call > tableSizeNum 0)))
    {
      (203710 call resize(grow = 0))
    }
  } function chpl__hashtable[204509](?)._findPrimeSizeIndex[203726](arg _mt[204577]:_MT[238], arg this[204575]:chpl__hashtable[204509](?), arg numKeys[203723] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown threshold[203735](203733 call *(203730 call + numKeys 1) 2)
      (203738 'end of statement')
    }
    { scopeless
      unknown prime[203741] 0
      (203744 'end of statement')
    }
    { scopeless
      unknown primeLoc[203746] 0
      (203749 'end of statement')
    }
    {
      unknown _indexOfInterest[203789] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[203790] "expr temp" "temp"
      (203799 'move' _iterator[203790](203797 call _getIterator(203809 call chpl_direct_counted_range_iter 0(203805 call . chpl__primes c"size"))))
      Defer
      {
        {
          (203825 call _freeIterator _iterator[203790])
        }
      }
      { scopeless type
        (203814 'move' _indexOfInterest[203789](203811 call iteratorIndex _iterator[203790]))
      }
      ForLoop[203791]
      {
        unknown i[203818] "index var" "insert auto destroy"
        (203820 'move' i[203818] _indexOfInterest[203789])
        {
          if(203784 call _cond_test(203765 call >(203763 call chpl__primes i) threshold))
          {
            (203772 call = prime(203771 call chpl__primes i))
            (203778 call = primeLoc i)
            break nil[44]
          }
        }
        label _continueLabel[203794]
        _indexOfInterest[203789]
        _iterator[203790]
      }
      label _breakLabel[203795]
    }
    if(203860 call _cond_test(203834 call == prime 0))
    {
      (203857 call halt "Requested capacity (" numKeys ") exceeds maximum size")
    }
    (203865 return primeLoc)
  } function chpl__hashtable[204509](?).allocateData[203875](arg _mt[204581]:_MT[238], arg this[204579]:chpl__hashtable[204509](?), arg size[203872] :
  int[13], arg tableEltType[203877]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(203895 call _cond_test(203881 call == size 0))
    {
      (203884 return nil[44])
    }
    {
      (203892 return(203891 call _allocateData size tableEltType))
    }
  } function chpl__hashtable[204509](?).allocateTable[203908](arg _mt[204585]:_MT[238], arg this[204583]:chpl__hashtable[204509](?), arg size[203905] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    if(203930 call _cond_test(203912 call == size 0))
    {
      (203915 return nil[44])
    }
    {
      (203927 return(203926 call _allocateData size(203925 call chpl_TableEntry keyType valType)))
    }
  } function chpl__hashtable[204509](?).rehash[203943](arg _mt[204589]:_MT[238], arg this[204587]:chpl__hashtable[204509](?), arg newSizeNum[203940] :
  int[13], arg newSize[203946] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown oldSize[203950] tableSize
      (203953 'end of statement')
    }
    { scopeless
      unknown oldTable[203956] table
      (203959 'end of statement')
    }
    (203962 call = tableSizeNum newSizeNum)
    (203967 call = tableSize newSize)
    { scopeless
      unknown entries[203971] tableNumFullSlots
      (203974 'end of statement')
    }
    if(204357 call _cond_test(203977 call > entries 0))
    {
      if(204005 call _cond_test(203981 call == newSize 0))
      {
        (204002 call halt "attempt to resize to 0 a table that is not empty")
      }
      (204015 call = table(204014 call allocateTable tableSize))
      if(204034 call _cond_test(204020 call != rehashHelpers nil[44]))
      {
        { scopeless
          (204032 call(204027 call .(204023 call postfix! rehashHelpers) c"startRehash") tableSize)
        }
      }
      (204041 call = tableNumDeletedSlots 0)
      {
        unknown _indexOfInterest[204247] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[204248] "expr temp" "temp"
        (204257 'move' _iterator[204248](204255 call _getIterator(204048 call _allSlots oldSize)))
        Defer
        {
          {
            (204274 call _freeIterator _iterator[204248])
          }
        }
        { scopeless type
          (204263 'move' _indexOfInterest[204247](204260 call iteratorIndex _iterator[204248]))
        }
        ForLoop[204249]
        {
          unknown oldslot[204267] "index var" "insert auto destroy"
          (204269 'move' oldslot[204267] _indexOfInterest[204247])
          {
            if(204242 call _cond_test(204060 call ==(204053 call .(204052 call oldTable oldslot) c"status")(204057 call . chpl__hash_status c"full")))
            {
              { scopeless
                unknown oldEntry[204066] "ref var"(204065 call oldTable oldslot)
                (204069 'end of statement')
              }
              { scopeless
                unknown tmp[204083] "temp"(204082 call _findSlot(204078 call . oldEntry c"key"))
                (204090 call _check_tuple_var_decl tmp[204083] 2)
                unknown foundSlot[204071](204084 call tmp[204083] 0)
                unknown newslot[204073](204087 call tmp[204083] 1)
                (204095 'end of statement')
              }
              if(204119 call _cond_test foundSlot)
              {
                (204116 call halt "duplicate element found while resizing for key")
              }
              if(204167 call _cond_test(204125 call < newslot 0))
              {
                (204164 call halt "couldn't add element during resize - got slot " newslot " for key")
              }
              { scopeless
                unknown dstSlot[204175] "ref var"(204174 call table newslot)
                (204178 'end of statement')
              }
              (204187 call =(204180 call . dstSlot c"status")(204184 call . chpl__hash_status c"full"))
              (204203 call _moveInit(204192 call . dstSlot c"key")(204202 call _moveToReturn(204198 call . oldEntry c"key")))
              (204218 call _moveInit(204207 call . dstSlot c"val")(204217 call _moveToReturn(204213 call . oldEntry c"val")))
              if(204237 call _cond_test(204222 call != rehashHelpers nil[44]))
              {
                { scopeless
                  (204235 call(204229 call .(204225 call postfix! rehashHelpers) c"moveElementDuringRehash") oldslot newslot)
                }
              }
            }
          }
          label _continueLabel[204252]
          _indexOfInterest[204247]
          _iterator[204248]
        }
        label _breakLabel[204253]
      }
      if(204297 call _cond_test(204283 call != rehashHelpers nil[44]))
      {
        { scopeless
          (204295 call(204290 call .(204286 call postfix! rehashHelpers) c"finishRehash") oldSize)
        }
      }
      (204306 call _freeData oldTable oldSize)
    }
    {
      if(204333 call _cond_test(204310 call != rehashHelpers nil[44]))
      {
        (204320 call(204315 call .(204313 call postfix! rehashHelpers) c"startRehash") tableSize)
        (204331 call(204326 call .(204324 call postfix! rehashHelpers) c"finishRehash") oldSize)
      }
      (204342 call _freeData oldTable oldSize)
      (204349 call = table(204348 call allocateTable tableSize))
      (204354 call = tableNumDeletedSlots 0)
    }
  } function chpl__hashtable[204509](?).requestCapacity[204369](arg _mt[204593]:_MT[238], arg this[204591]:chpl__hashtable[204509](?), arg numKeys[204366] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    if(204398 call _cond_test(204373 call < tableNumFullSlots numKeys))
    {
      { scopeless
        unknown primeLoc[204379](204378 call _findPrimeSizeIndex numKeys)
        (204382 'end of statement')
      }
      { scopeless
        unknown prime[204388](204387 call chpl__primes primeLoc)
        (204391 'end of statement')
      }
      (204396 call rehash primeLoc prime)
    }
  } function chpl__hashtable[204509](?).resize[204411](arg _mt[204597]:_MT[238], arg this[204595]:chpl__hashtable[204509](?), arg grow[204408] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    if(204416 call _cond_test postponeResize)
    {
      { scopeless
        (204414 return)
      }
    }
    { scopeless
      unknown newSizeNum[204423] tableSizeNum
      (204426 'end of statement')
    }
    (204436 call += newSizeNum(204433 IfExpr  grow then
    { scopeless
      1
    } else
    { scopeless
      (204431 call - 1)
    } ))
    if(204467 call _cond_test(204444 call > newSizeNum(204441 call . chpl__primes c"size")))
    {
      { scopeless
        (204465 call halt "associative array exceeds maximum size")
      }
    }
    { scopeless
      unknown newSize[204476](204475 call chpl__primes newSizeNum)
      (204479 'end of statement')
    }
    if(204496 call _cond_test(204491 call &&(204482 call == grow 0)(204489 call >(204486 call * 2 tableNumFullSlots) newSize)))
    {
      (204493 return)
    }
    (204504 call rehash newSizeNum newSize)
  }
  type chpl__simpleSet[204907](?) unknown eltType[204601] "type variable" unknown table[204609](204608 call chpl__hashtable eltType nothing[7]) function chpl__simpleSet[204907](?).size[204615](arg _mt[204911]:_MT[238], arg this[204909]:chpl__simpleSet[204907](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (204621 return(204618 call . table c"tableNumFullSlots"))
  } function chpl__simpleSet[204907](?).add[204630](arg _mt[204915]:_MT[238], arg this[204913]:chpl__simpleSet[204907](?), arg elem[204628]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown tmp[204644] "temp"(204643 call(204638 call . table c"findAvailableSlot") elem)
      (204651 call _check_tuple_var_decl tmp[204644] 2)
      unknown isFullSlot[204632](204645 call tmp[204644] 0)
      unknown idx[204634](204648 call tmp[204644] 1)
      (204656 'end of statement')
    }
    (204663 call assert(204660 call ! isFullSlot))
    (204673 call(204666 call . table c"fillSlot") idx elem none[57])
  } function chpl__simpleSet[204907](?).remove[204681](arg _mt[204919]:_MT[238], arg this[204917]:chpl__simpleSet[204907](?), arg elem[204679]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown tmp[204695] "temp"(204694 call(204689 call . table c"findFullSlot") elem)
      (204702 call _check_tuple_var_decl tmp[204695] 2)
      unknown hasFoundSlot[204683](204696 call tmp[204695] 0)
      unknown idx[204685](204699 call tmp[204695] 1)
      (204707 'end of statement')
    }
    if(204737 call _cond_test hasFoundSlot)
    {
      { scopeless
        unknown key[204711] eltType
        unknown val[204715] nothing[7]
        (204718 'end of statement')
      }
      (204728 call(204721 call . table c"clearSlot") idx key val)
      (204735 call(204731 call . table c"maybeShrinkAfterRemove"))
    }
  } function chpl__simpleSet[204907](?).these[204745](arg _mt[204923]:_MT[238], arg this[204921]:chpl__simpleSet[204907](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[204778] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[204779] "expr temp" "temp"
      (204788 'move' _iterator[204779](204786 call _getIterator(204753 call(204749 call . table c"allSlots"))))
      Defer
      {
        {
          (204805 call _freeIterator _iterator[204779])
        }
      }
      { scopeless type
        (204794 'move' _indexOfInterest[204778](204791 call iteratorIndex _iterator[204779]))
      }
      ForLoop[204780]
      {
        unknown slot[204798] "index var" "insert auto destroy"
        (204800 'move' slot[204798] _indexOfInterest[204778])
        { scopeless
          if(204773 call _cond_test(204760 call(204755 call . table c"isSlotFull") slot))
          {
            { scopeless
              (204771 yield(204768 call .(204767 call(204762 call . table c"table") slot) c"key"))
            }
          }
        }
        label _continueLabel[204783]
        _indexOfInterest[204778]
        _iterator[204779]
      }
      label _breakLabel[204784]
    }
  } function chpl__simpleSet[204907](?).writeThis[204819](arg _mt[204927]:_MT[238], arg this[204925]:chpl__simpleSet[204907](?), arg f[204817]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      unknown count[204822] 1
      (204825 'end of statement')
    }
    (204829 call <~> f "{")
    {
      unknown _indexOfInterest[204866] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[204867] "expr temp" "temp"
      (204876 'move' _iterator[204867](204874 call _getIterator this))
      Defer
      {
        {
          (204892 call _freeIterator _iterator[204867])
        }
      }
      { scopeless type
        (204881 'move' _indexOfInterest[204866](204878 call iteratorIndex _iterator[204867]))
      }
      ForLoop[204868]
      {
        unknown e[204885] "index var" "insert auto destroy"
        (204887 'move' e[204885] _indexOfInterest[204866])
        {
          if(204861 call _cond_test(204839 call <= count(204837 call - size 1)))
          {
            (204843 call += count 1)
            (204852 call <~>(204849 call <~> f e) ", ")
          }
          {
            (204857 call <~> f e)
          }
        }
        label _continueLabel[204871]
        _indexOfInterest[204866]
        _iterator[204867]
      }
      label _breakLabel[204872]
    }
    (204901 call <~> f "}")
  }
}