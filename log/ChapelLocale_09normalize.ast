AST dump for ChapelLocale after pass normalize.
Module use list: LocaleModel HaltWrappers SysCTypes 

{
  function chpl__init_ChapelLocale[415972]() : void[4] "insert line file info" "module init"
  {
    (541654 'move' chpl_nodeID_t[89859](541652 call int(64)[13] 32))
    (541659 'move' chpl_sublocID_t[89866](541657 call int(64)[13] 32))
    { scopeless type extern
      (541661 'default init var' c_sublocid_none[89870] chpl_sublocID_t[89866])
    }
    (89873 'end of statement')
    { scopeless type extern
      (541664 'default init var' c_sublocid_any[89875] chpl_sublocID_t[89866])
    }
    (89878 'end of statement')
    { scopeless type extern
      (541667 'default init var' c_sublocid_all[89880] chpl_sublocID_t[89866])
    }
    (89883 'end of statement')
    {
    }
    unknown call_tmp[632327] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632330 'move' call_tmp[632327](747814 'new' locale[28] nilLocale[89918]))
    (541670 'init var' nilLocale[89939] call_tmp[632327])
    (89942 'end of statement')
    unknown call_tmp[632332] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632335 'move' call_tmp[632332](747815 'new' locale[28] default[89922]))
    (541672 'init var' defaultLocale[89953] call_tmp[632332])
    (89956 'end of statement')
    unknown call_tmp[632337] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632340 'move' call_tmp[632337](747816 'new' locale[28] dummy[89920]))
    (541674 'init var' dummyLocale[89967] call_tmp[632337])
    (89970 'end of statement')
    (541690 'init var' rootLocale[91511] nilLocale[89939])
    (91514 'end of statement')
    (541692 'init var' replicateRootLocale[91516] 1)
    (91519 'end of statement')
    (541694 'init var' origRootLocale[91521] nilLocale[89939])
    (91524 'end of statement')
    { scopeless type extern
      unknown call_tmp[633445] "expr temp" "maybe param" "maybe type" "temp"
      (633448 'move' call_tmp[633445](92931 call c_ptr[205045](?) chpl_privateObject_t[92925]))
      (541727 'default init var' chpl_privateObjects[92932] call_tmp[633445])
    }
    (92935 'end of statement' chpl_sublocID_t[89866] chpl_sublocID_t[89866] chpl_sublocID_t[89866] nilLocale[89939] nilLocale[89939])
    (514229 return _void[55])
  }
  function chpl__deinit_ChapelLocale[93254]() : _unknown[51] "no doc" "no return value for void"
  {
    unknown call_tmp[633547] "expr temp" "maybe param" "maybe type" "temp"
    (633550 'move' call_tmp[633547](93257 call _instance _mt[243] origRootLocale[91521]))
    (93261 call chpl__delete call_tmp[633547])
    (477446 'end of statement')
    unknown call_tmp[633554] "expr temp" "maybe param" "maybe type" "temp"
    (633557 'move' call_tmp[633554](93266 call _instance _mt[243] dummyLocale[89967]))
    (93270 call chpl__delete call_tmp[633554])
    (514231 return _void[55])
  }
  unknown chpl_nodeID_t[89859] "dead at end of block" "insert auto destroy" "no doc" "type variable"(89858 call int(64)[13] 32)
  unknown chpl_sublocID_t[89866] "dead at end of block" "insert auto destroy" "no doc" "type variable"(89865 call int(64)[13] 32)
  const c_sublocid_none[89870] "dead at end of block" "const" "extern" "insert auto destroy" "no doc"
  const c_sublocid_any[89875] "dead at end of block" "const" "extern" "insert auto destroy" "no doc"
  const c_sublocid_all[89880] "dead at end of block" "const" "extern" "insert auto destroy" "no doc"
  function chpl_isActualSublocID[89890](arg subloc[89887] :
  chpl_sublocID_t[89866]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[513628] "RVV" "temp"
    unknown tmp[422301] "maybe param" "temp"
    unknown tmp[422322] "maybe param" "temp"
    (422333 'move' tmp[422322](89894 call != subloc[89887] c_sublocid_none[89870]))
    unknown call_tmp[632297] "expr temp" "maybe param" "maybe type" "temp"
    (632300 'move' call_tmp[632297](422335 call _cond_invalid tmp[422322]))
    if call_tmp[632297]
    {
      (422338 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560873] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560874] "maybe param" "temp"
    unknown call_tmp[632302] "expr temp" "maybe param" "maybe type" "temp"
    (632305 'move' call_tmp[632302](422323 call isTrue tmp[422322]))
    (560879 'move' tmp[560874](560877 call _cond_test call_tmp[632302]))
    if tmp[560874]
    {
      unknown tmp[560881] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[632307] "expr temp" "maybe param" "maybe type" "temp"
      (632310 'move' call_tmp[632307](89898 call != subloc[89887] c_sublocid_any[89875]))
      (560883 'move' tmp[560881](422326 call isTrue call_tmp[632307]))
      (560888 'move' tmp[560873](560885 '_paramFoldLogical' tmp[560874] tmp[560881]))
    }
    {
      (560893 'move' tmp[560873](560890 '_paramFoldLogical' tmp[560874] 0))
    }
    (422312 'move' tmp[422301] tmp[560873])
    unknown call_tmp[632312] "expr temp" "maybe param" "maybe type" "temp"
    (632315 'move' call_tmp[632312](422314 call _cond_invalid tmp[422301]))
    if call_tmp[632312]
    {
      (422317 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560900] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560901] "maybe param" "temp"
    unknown call_tmp[632317] "expr temp" "maybe param" "maybe type" "temp"
    (632320 'move' call_tmp[632317](422302 call isTrue tmp[422301]))
    (560906 'move' tmp[560901](560904 call _cond_test call_tmp[632317]))
    if tmp[560901]
    {
      unknown tmp[560908] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[632322] "expr temp" "maybe param" "maybe type" "temp"
      (632325 'move' call_tmp[632322](89904 call != subloc[89887] c_sublocid_all[89880]))
      (560910 'move' tmp[560908](422305 call isTrue call_tmp[632322]))
      (560915 'move' tmp[560900](560912 '_paramFoldLogical' tmp[560901] tmp[560908]))
    }
    {
      (560920 'move' tmp[560900](560917 '_paramFoldLogical' tmp[560901] 0))
    }
    (513633 'move' ret[513628](513632 'deref' tmp[560900]))
    (513630 return ret[513628])
  }
  type localeKind[89924] def regular[89914]:localeKind[89924] def any[89916]:localeKind[89924] def nilLocale[89918]:localeKind[89924] def dummy[89920]:localeKind[89924] def default[89922]:localeKind[89924]
  const nilLocale[89939] "dead at end of block" "const" "insert auto destroy" "locale private" "no doc"
  unknown defaultLocale[89953] "dead at end of block" "insert auto destroy" "locale private" "no doc"
  unknown dummyLocale[89967] "dead at end of block" "insert auto destroy" "no doc"
  function locale[28]._value[89981](arg _mt[90370]:_MT[238], arg this[90368]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[513637] "RVV" "temp"
    unknown call_tmp[632344] "expr temp" "maybe param" "maybe type" "temp"
    (632347 'move' call_tmp[632344](377792 call _instance _mt[243] this[90368]))
    unknown call_tmp[632349] "expr temp" "maybe param" "maybe type" "temp"
    (632352 'move' call_tmp[632349](89984 call postfix! call_tmp[632344]))
    (513642 'move' ret[513637](513641 'deref' call_tmp[632349]))
    (513639 return ret[513637])
  }
  function locale[28].chpl_forwarding_expr3__value[89992](arg _mt[90374]:_MT[238], arg this[90372]:locale[28]) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[513646] "RVV" "temp"
    (513650 'move' ret[513646](377796 call _value _mt[243] this[90372]))
    (513648 return ret[513646])
  }
  function locale[28].init[90000](arg _mt[90378]:_MT[238], ref arg this[90376]:locale[28]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632356] "expr temp" "maybe param" "maybe type" "temp"
    (632359 'move' call_tmp[632356](90024 call _cond_test rootLocaleInitialized[310]))
    if call_tmp[632356]
    {
      unknown call_tmp[632363] "maybe param" "maybe type" "temp"
      (632366 'move' call_tmp[632363](90008 call _instance _mt[243] defaultLocale[89953]))
      unknown tmp[460374] "temp"
      (460377 'init var' tmp[460374] call_tmp[632363] unmanaged BaseLocale?[415423])
      (460379 'init field' this[90376] c"_instance" tmp[460374])
      (477199 'end of statement')
    }
    {
      unknown tmp[460383] "temp"
      (460386 'init var' tmp[460383] nil[44] unmanaged BaseLocale?[415423])
      (460388 'init field' this[90376] c"_instance" tmp[460383])
      (477200 'end of statement')
    }
    (513652 return _void[55])
  }
  function locale[28].init[90037](arg _mt[90382]:_MT[238], ref arg this[90380]:locale[28], arg _instance[90034]:BaseLocale[377787](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632368] "maybe param" "maybe type" "temp"
    (632371 'move' call_tmp[632368](90046 call _to_unmanaged _instance[90034]))
    unknown tmp[460392] "temp"
    (460395 'init var' tmp[460392] call_tmp[632368] unmanaged BaseLocale?[415423])
    (460397 'init field' this[90380] c"_instance" tmp[460392])
    (477201 'end of statement')
    (513654 return _void[55])
  }
  function locale[28].init[90057](arg _mt[90386]:_MT[238], ref arg this[90384]:locale[28], param arg kind[90055]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632373] "expr temp" "maybe param" "maybe type" "temp"
    (632376 'move' call_tmp[632373](90066 call == kind[90055] regular[89914]))
    unknown call_tmp[632378] "expr temp" "maybe param" "maybe type" "temp"
    (632381 'move' call_tmp[632378](90152 call _cond_test call_tmp[632373]))
    if call_tmp[632378]
    {
      (90104 call compilerError "locale.init(kind) can not be used to create " "a regular locale instance")
      (477202 'end of statement')
      val tmp[460431]:unmanaged BaseLocale?[415423] "temp"
      (460434 'default init var' tmp[460431] unmanaged BaseLocale?[415423])
      (460436 '.=' this[90384] c"_instance" tmp[460431])
      (477203 'end of statement')
    }
    {
      unknown call_tmp[632383] "expr temp" "maybe param" "maybe type" "temp"
      (632386 'move' call_tmp[632383](90111 call == kind[90055] dummy[89920]))
      unknown call_tmp[632388] "expr temp" "maybe param" "maybe type" "temp"
      (632391 'move' call_tmp[632388](90146 call _cond_test call_tmp[632383]))
      if call_tmp[632388]
      {
        unknown call_tmp[632393] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (632396 'move' call_tmp[632393](747817 'new' DummyLocale[377805](?)(_chpl_manager = unmanaged[220](?))))
        unknown tmp[460401] "temp"
        (460404 'init var' tmp[460401] call_tmp[632393] unmanaged BaseLocale?[415423])
        (460406 'init field' this[90384] c"_instance" tmp[460401])
        (477204 'end of statement')
      }
      {
        unknown call_tmp[632398] "expr temp" "maybe param" "maybe type" "temp"
        (632401 'move' call_tmp[632398](90131 call == kind[90055] default[89922]))
        unknown call_tmp[632403] "expr temp" "maybe param" "maybe type" "temp"
        (632406 'move' call_tmp[632403](90141 call _cond_test call_tmp[632398]))
        if call_tmp[632403]
        {
          unknown tmp[460410] "temp"
          (460413 'init var' tmp[460410] nil[44] unmanaged BaseLocale?[415423])
          (460415 'init field' this[90384] c"_instance" tmp[460410])
          (477205 'end of statement')
        }
        {
          val tmp[460421]:unmanaged BaseLocale?[415423] "temp"
          (460424 'default init var' tmp[460421] unmanaged BaseLocale?[415423])
          (460426 '.=' this[90384] c"_instance" tmp[460421])
          (477206 'end of statement')
        }
      }
    }
    (513656 return _void[55])
  }
  function locale[28].init=[90167](arg _mt[90390]:_MT[238], ref arg this[90388]:locale[28], arg other[90164]:locale[28]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632410] "maybe param" "maybe type" "temp"
    (632413 'move' call_tmp[632410](90174 call _instance _mt[243] other[90164]))
    unknown tmp[460440] "temp"
    (460443 'init var' tmp[460440] call_tmp[632410] unmanaged BaseLocale?[415423])
    (460445 'init field' this[90388] c"_instance" tmp[460440])
    (477207 'end of statement')
    (513658 return _void[55])
  }
  function locale[28].deinit[90185](arg _mt[90394]:_MT[238], arg this[90392]:locale[28]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (513660 return _void[55])
  }
  function locale[28].localeid[90192](arg _mt[90398]:_MT[238], arg this[90396]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[513664] "RVV" "temp"
    unknown call_tmp[632417] "expr temp" "maybe param" "maybe type" "temp"
    (632420 'move' call_tmp[632417](90195 call _value _mt[243] this[90396]))
    unknown call_tmp[632424] "expr temp" "maybe param" "maybe type" "temp"
    (632427 'move' call_tmp[632424](90200 call localeid _mt[243] call_tmp[632417]))
    (513669 'move' ret[513664](513668 'deref' call_tmp[632424]))
    (513666 return ret[513664])
  }
  function locale[28].chpl_id[90210](arg _mt[90402]:_MT[238], arg this[90400]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513673] "RVV" "temp"
    unknown call_tmp[632431] "expr temp" "maybe param" "maybe type" "temp"
    (632434 'move' call_tmp[632431](90213 call _value _mt[243] this[90400]))
    unknown call_tmp[632438] "expr temp" "maybe param" "maybe type" "temp"
    (632441 'move' call_tmp[632438](90222 call(90218 call (partial) chpl_id _mt[243] call_tmp[632431])))
    (513678 'move' ret[513673](513677 'deref' call_tmp[632438]))
    (513675 return ret[513673])
  }
  function locale[28].chpl_localeid[90230](arg _mt[90406]:_MT[238], arg this[90404]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513682] "RVV" "temp"
    unknown call_tmp[632445] "expr temp" "maybe param" "maybe type" "temp"
    (632448 'move' call_tmp[632445](90233 call _value _mt[243] this[90404]))
    unknown call_tmp[632452] "expr temp" "maybe param" "maybe type" "temp"
    (632455 'move' call_tmp[632452](90242 call(90238 call (partial) chpl_localeid _mt[243] call_tmp[632445])))
    (513687 'move' ret[513682](513686 'deref' call_tmp[632452]))
    (513684 return ret[513682])
  }
  function locale[28].chpl_name[90250](arg _mt[90410]:_MT[238], arg this[90408]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513691] "RVV" "temp"
    unknown call_tmp[632459] "expr temp" "maybe param" "maybe type" "temp"
    (632462 'move' call_tmp[632459](90253 call _value _mt[243] this[90408]))
    unknown call_tmp[632466] "expr temp" "maybe param" "maybe type" "temp"
    (632469 'move' call_tmp[632466](90262 call(90258 call (partial) chpl_name _mt[243] call_tmp[632459])))
    (513696 'move' ret[513691](513695 'deref' call_tmp[632466]))
    (513693 return ret[513691])
  }
  function locale[28].defaultMemory[90270](arg _mt[90414]:_MT[238], arg this[90412]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513700] "RVV" "temp"
    unknown call_tmp[632473] "expr temp" "maybe param" "maybe type" "temp"
    (632476 'move' call_tmp[632473](90273 call _value _mt[243] this[90412]))
    unknown call_tmp[632480] "expr temp" "maybe param" "maybe type" "temp"
    (632483 'move' call_tmp[632480](90282 call(90278 call (partial) defaultMemory _mt[243] call_tmp[632473])))
    (513705 'move' ret[513700](513704 'deref' call_tmp[632480]))
    (513702 return ret[513700])
  }
  function locale[28].largeMemory[90290](arg _mt[90418]:_MT[238], arg this[90416]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513709] "RVV" "temp"
    unknown call_tmp[632487] "expr temp" "maybe param" "maybe type" "temp"
    (632490 'move' call_tmp[632487](90293 call _value _mt[243] this[90416]))
    unknown call_tmp[632494] "expr temp" "maybe param" "maybe type" "temp"
    (632497 'move' call_tmp[632494](90302 call(90298 call (partial) largeMemory _mt[243] call_tmp[632487])))
    (513714 'move' ret[513709](513713 'deref' call_tmp[632494]))
    (513711 return ret[513709])
  }
  function locale[28].lowLatencyMemory[90310](arg _mt[90422]:_MT[238], arg this[90420]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513718] "RVV" "temp"
    unknown call_tmp[632501] "expr temp" "maybe param" "maybe type" "temp"
    (632504 'move' call_tmp[632501](90313 call _value _mt[243] this[90420]))
    unknown call_tmp[632508] "expr temp" "maybe param" "maybe type" "temp"
    (632511 'move' call_tmp[632508](90322 call(90318 call (partial) lowLatencyMemory _mt[243] call_tmp[632501])))
    (513723 'move' ret[513718](513722 'deref' call_tmp[632508]))
    (513720 return ret[513718])
  }
  function locale[28].highBandwidthMemory[90330](arg _mt[90426]:_MT[238], arg this[90424]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513727] "RVV" "temp"
    unknown call_tmp[632515] "expr temp" "maybe param" "maybe type" "temp"
    (632518 'move' call_tmp[632515](90333 call _value _mt[243] this[90424]))
    unknown call_tmp[632522] "expr temp" "maybe param" "maybe type" "temp"
    (632525 'move' call_tmp[632522](90342 call(90338 call (partial) highBandwidthMemory _mt[243] call_tmp[632515])))
    (513732 'move' ret[513727](513731 'deref' call_tmp[632522]))
    (513729 return ret[513727])
  }
  function locale[28].getChildCount[90350](arg _mt[90430]:_MT[238], arg this[90428]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513736] "RVV" "temp"
    unknown call_tmp[632529] "expr temp" "maybe param" "maybe type" "temp"
    (632532 'move' call_tmp[632529](90353 call _value _mt[243] this[90428]))
    unknown call_tmp[632536] "expr temp" "maybe param" "maybe type" "temp"
    (632539 'move' call_tmp[632536](90360 call(90356 call (partial) getChildCount _mt[243] call_tmp[632529])))
    (513741 'move' ret[513736](513740 'deref' call_tmp[632536]))
    (513738 return ret[513736])
  }
  type locale[28] val _instance[89975]:unmanaged BaseLocale?[415423] unmanaged BaseLocale?[415423] forwarding ( )
  function here[90435]() : _unknown[51] "inline" "no parens"
  {
    unknown ret[513745] "RVV" "temp"
    unknown call_tmp[632541] "expr temp" "maybe param" "maybe type" "temp"
    (632544 'move' call_tmp[632541](377809 call here_id[92815]))
    unknown call_tmp[632546] "expr temp" "maybe param" "maybe type" "temp"
    (632549 'move' call_tmp[632546](90440 call chpl_localeID_to_locale call_tmp[632541]))
    (513750 'move' ret[513745](513749 'deref' call_tmp[632546]))
    (513747 return ret[513745])
  }
  function locale[28].hostname[90449](arg _mt[90454]:_MT[238], arg this[90451]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513754] "RVV" "temp"
    (90475 call writeln "in locale.hostname line 212")
    (477218 'end of statement')
    unknown call_tmp[632553] "expr temp" "maybe param" "maybe type" "temp"
    (632556 'move' call_tmp[632553](90479 call _value _mt[243] this[90451]))
    unknown call_tmp[632560] "expr temp" "maybe param" "maybe type" "temp"
    (632563 'move' call_tmp[632560](90484 call hostname _mt[243] call_tmp[632553]))
    (513759 'move' ret[513754](513758 'deref' call_tmp[632560]))
    (513756 return ret[513754])
  }
  function locale[28].name[90494](arg _mt[90499]:_MT[238], arg this[90496]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513763] "RVV" "temp"
    unknown call_tmp[632567] "expr temp" "maybe param" "maybe type" "temp"
    (632570 'move' call_tmp[632567](90502 call _value _mt[243] this[90496]))
    unknown call_tmp[632574] "expr temp" "maybe param" "maybe type" "temp"
    (632577 'move' call_tmp[632574](90507 call name _mt[243] call_tmp[632567]))
    (513768 'move' ret[513763](513767 'deref' call_tmp[632574]))
    (513765 return ret[513763])
  }
  function locale[28].id[90518](arg _mt[90523]:_MT[238], arg this[90520]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513772] "RVV" "temp"
    unknown call_tmp[632581] "expr temp" "maybe param" "maybe type" "temp"
    (632584 'move' call_tmp[632581](90526 call _value _mt[243] this[90520]))
    unknown call_tmp[632588] "expr temp" "maybe param" "maybe type" "temp"
    (632591 'move' call_tmp[632588](90531 call id _mt[243] call_tmp[632581]))
    (513777 'move' ret[513772](513776 'deref' call_tmp[632588]))
    (513774 return ret[513772])
  }
  function locale[28].maxTaskPar[90542](arg _mt[90547]:_MT[238], arg this[90544]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513781] "RVV" "temp"
    unknown call_tmp[632595] "expr temp" "maybe param" "maybe type" "temp"
    (632598 'move' call_tmp[632595](90550 call _value _mt[243] this[90544]))
    unknown call_tmp[632602] "expr temp" "maybe param" "maybe type" "temp"
    (632605 'move' call_tmp[632602](90553 call maxTaskPar _mt[243] call_tmp[632595]))
    (513786 'move' ret[513781](513785 'deref' call_tmp[632602]))
    (513783 return ret[513781])
  }
  function locale[28].numPUs[90570](arg _mt[90581]:_MT[238], arg this[90578]:locale[28] :
  locale[28], arg logical[90566]:bool[10] =
  0, arg accessible[90574]:bool[10] =
  1) : _unknown[51] "inline" "method"
  {
    unknown ret[513790] "RVV" "temp"
    unknown call_tmp[632609] "expr temp" "maybe param" "maybe type" "temp"
    (632612 'move' call_tmp[632609](90584 call _value _mt[243] this[90578]))
    unknown call_tmp[632616] "expr temp" "maybe param" "maybe type" "temp"
    (632619 'move' call_tmp[632616](90595 call(90589 call (partial) numPUs _mt[243] call_tmp[632609]) logical[90566] accessible[90574]))
    (513795 'move' ret[513790](513794 'deref' call_tmp[632616]))
    (513792 return ret[513790])
  }
  function locale[28].callStackSize[90604](arg _mt[90609]:_MT[238], arg this[90606]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513799] "RVV" "temp"
    unknown call_tmp[632623] "expr temp" "maybe param" "maybe type" "temp"
    (632626 'move' call_tmp[632623](90612 call _value _mt[243] this[90606]))
    unknown call_tmp[632630] "expr temp" "maybe param" "maybe type" "temp"
    (632633 'move' call_tmp[632630](90617 call callStackSize _mt[243] call_tmp[632623]))
    (513804 'move' ret[513799](513803 'deref' call_tmp[632630]))
    (513801 return ret[513799])
  }
  function =[90631](ref arg l1[90628]:locale[28], const  ref arg l2[90634]:locale[28]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    unknown call_tmp[632637] "expr temp" "maybe param" "maybe type" "temp"
    (632640 'move' call_tmp[632637](90638 call _instance _mt[243] l1[90628]))
    unknown call_tmp[632644] "expr temp" "maybe param" "maybe type" "temp"
    (632647 'move' call_tmp[632644](90642 call _instance _mt[243] l2[90634]))
    (90645 call = call_tmp[632637] call_tmp[632644])
    (513806 return _void[55])
  }
  function BaseLocale[91201].init[90654](arg _mt[91205]:_MT[238], arg this[91203]:BaseLocale[91201]) : void[4] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown super_tmp[460544] "temporary of super field" "temp"
    (460552 'move' super_tmp[460544](460545 '.v' this[91203] c"super"))
    (460548 call init _mt[243] super_tmp[460544])
    (477226 'end of statement')
    unknown tmp[460453] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491969] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632649] "expr temp" "maybe param" "maybe type" "temp"
      (632652 'move' call_tmp[632649](460455 '.v' this[91203] c"super"))
      (491973 'move' call_type_tmp[491969](460458 'typeof' call_tmp[632649]))
    }
    (460459 'move' tmp[460453] call_type_tmp[491969])
    unknown call_tmp[632654] "maybe param" "maybe type" "temp"
    (632657 'move' call_tmp[632654](460464 'cast' tmp[460453] this[91203]))
    unknown chpl__thisAsParent[460461] "dead at end of block" "insert auto destroy" "temp"
    (541676 'init var' chpl__thisAsParent[460461] call_tmp[632654] tmp[460453])
    (460467 'setcid' chpl__thisAsParent[460461])
    (477227 'end of statement')
    unknown tmp[460471] "temp"
    (460473 'init var' tmp[460471] nilLocale[89939])
    (460475 '.=' this[91203] c"parent" tmp[460471])
    (477228 'end of statement')
    val tmp[460479]:int(64)[13] "temp"
    (460482 'default init var' tmp[460479] int(64)[13])
    (460484 '.=' this[91203] c"nPUsLogAcc" tmp[460479])
    (477229 'end of statement')
    val tmp[460488]:int(64)[13] "temp"
    (460491 'default init var' tmp[460488] int(64)[13])
    (460493 '.=' this[91203] c"nPUsLogAll" tmp[460488])
    (477230 'end of statement')
    val tmp[460497]:int(64)[13] "temp"
    (460500 'default init var' tmp[460497] int(64)[13])
    (460502 '.=' this[91203] c"nPUsPhysAcc" tmp[460497])
    (477231 'end of statement')
    val tmp[460506]:int(64)[13] "temp"
    (460509 'default init var' tmp[460506] int(64)[13])
    (460511 '.=' this[91203] c"nPUsPhysAll" tmp[460506])
    (477232 'end of statement')
    val tmp[460515]:int(64)[13] "temp"
    (460518 'default init var' tmp[460515] int(64)[13])
    (460520 '.=' this[91203] c"maxTaskPar" tmp[460515])
    (477233 'end of statement')
    unknown tmp[460524] "temp"
    (460527 'default init var' tmp[460524] size_t[20654])
    (460529 '.=' this[91203] c"callStackSize" tmp[460524])
    (477234 'end of statement')
    unknown tmp[460533] "temp"
    unknown call_tmp[632659] "expr temp" "maybe param" "maybe type" "temp"
    (632662 'move' call_tmp[632659](460536 call chpl__processorAtomicType int(64)[13]))
    (460538 'default init var' tmp[460533] call_tmp[632659])
    (460540 '.=' this[91203] c"runningTaskCounter" tmp[460533])
    (477235 'end of statement')
    (460555 'setcid' this[91203])
    (513808 return _void[55])
  }
  function BaseLocale[91201].init[90665](arg _mt[91209]:_MT[238], arg this[91207]:BaseLocale[91201], arg parent[90662]:locale[28]) : void[4] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown super_tmp[460651] "temporary of super field" "temp"
    (460659 'move' super_tmp[460651](460652 '.v' this[91207] c"super"))
    (460655 call init _mt[243] super_tmp[460651])
    (477237 'end of statement')
    unknown tmp[460561] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491975] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632664] "expr temp" "maybe param" "maybe type" "temp"
      (632667 'move' call_tmp[632664](460563 '.v' this[91207] c"super"))
      (491979 'move' call_type_tmp[491975](460566 'typeof' call_tmp[632664]))
    }
    (460567 'move' tmp[460561] call_type_tmp[491975])
    unknown call_tmp[632669] "maybe param" "maybe type" "temp"
    (632672 'move' call_tmp[632669](460572 'cast' tmp[460561] this[91207]))
    unknown chpl__thisAsParent[460569] "dead at end of block" "insert auto destroy" "temp"
    (541678 'init var' chpl__thisAsParent[460569] call_tmp[632669] tmp[460561])
    (460575 'setcid' chpl__thisAsParent[460569])
    (477238 'end of statement')
    unknown tmp[460577] "temp"
    (460579 'init var' tmp[460577] parent[90662])
    (460581 '.=' this[91207] c"parent" tmp[460577])
    (477239 'end of statement')
    val tmp[460586]:int(64)[13] "temp"
    (460589 'default init var' tmp[460586] int(64)[13])
    (460591 '.=' this[91207] c"nPUsLogAcc" tmp[460586])
    (477240 'end of statement')
    val tmp[460595]:int(64)[13] "temp"
    (460598 'default init var' tmp[460595] int(64)[13])
    (460600 '.=' this[91207] c"nPUsLogAll" tmp[460595])
    (477241 'end of statement')
    val tmp[460604]:int(64)[13] "temp"
    (460607 'default init var' tmp[460604] int(64)[13])
    (460609 '.=' this[91207] c"nPUsPhysAcc" tmp[460604])
    (477242 'end of statement')
    val tmp[460613]:int(64)[13] "temp"
    (460616 'default init var' tmp[460613] int(64)[13])
    (460618 '.=' this[91207] c"nPUsPhysAll" tmp[460613])
    (477243 'end of statement')
    val tmp[460622]:int(64)[13] "temp"
    (460625 'default init var' tmp[460622] int(64)[13])
    (460627 '.=' this[91207] c"maxTaskPar" tmp[460622])
    (477244 'end of statement')
    unknown tmp[460631] "temp"
    (460634 'default init var' tmp[460631] size_t[20654])
    (460636 '.=' this[91207] c"callStackSize" tmp[460631])
    (477245 'end of statement')
    unknown tmp[460640] "temp"
    unknown call_tmp[632674] "expr temp" "maybe param" "maybe type" "temp"
    (632677 'move' call_tmp[632674](460643 call chpl__processorAtomicType int(64)[13]))
    (460645 'default init var' tmp[460640] call_tmp[632674])
    (460647 '.=' this[91207] c"runningTaskCounter" tmp[460640])
    (477246 'end of statement')
    (460662 'setcid' this[91207])
    (513810 return _void[55])
  }
  function BaseLocale[91201].numPUs[90713](arg _mt[91213]:_MT[238], arg this[91211]:BaseLocale[91201], arg logical[90709]:bool[10] =
  0, arg accessible[90717]:bool[10] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513814] "RVV" "temp"
    unknown tmp[560989] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560990] "maybe param" "temp"
    (560995 'move' tmp[560990](560993 call _cond_test logical[90709]))
    if tmp[560990]
    {
      unknown tmp[560927] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[560928] "maybe param" "temp"
      (560933 'move' tmp[560928](560931 call _cond_test accessible[90717]))
      if tmp[560928]
      {
        unknown tmp[560935] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560937 'move' tmp[560935](377819 call nPUsLogAcc _mt[243] this[91211]))
        (560942 'move' tmp[560927](560939 '_paramFoldLogical' tmp[560928] tmp[560935]))
      }
      {
        unknown tmp[560944] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560946 'move' tmp[560944](377824 call nPUsLogAll _mt[243] this[91211]))
        (560951 'move' tmp[560927](560948 '_paramFoldLogical' tmp[560928] tmp[560944]))
      }
      (561000 'move' tmp[560989](560997 '_paramFoldLogical' tmp[560990] tmp[560927]))
    }
    {
      unknown tmp[560958] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[560959] "maybe param" "temp"
      (560964 'move' tmp[560959](560962 call _cond_test accessible[90717]))
      if tmp[560959]
      {
        unknown tmp[560966] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560968 'move' tmp[560966](377830 call nPUsPhysAcc _mt[243] this[91211]))
        (560973 'move' tmp[560958](560970 '_paramFoldLogical' tmp[560959] tmp[560966]))
      }
      {
        unknown tmp[560975] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560977 'move' tmp[560975](377835 call nPUsPhysAll _mt[243] this[91211]))
        (560982 'move' tmp[560958](560979 '_paramFoldLogical' tmp[560959] tmp[560975]))
      }
      (561005 'move' tmp[560989](561002 '_paramFoldLogical' tmp[560990] tmp[560958]))
    }
    (513819 'move' ret[513814](513818 'deref' tmp[560989]))
    (513816 return ret[513814])
  }
  function BaseLocale[91201].id[90754](arg _mt[91217]:_MT[238], arg this[91215]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513823] "RVV" "temp"
    unknown call_tmp[632687] "expr temp" "maybe param" "maybe type" "temp"
    (632690 'move' call_tmp[632687](90777 '_wide_get_locale' this[91215]))
    unknown call_tmp[632692] "expr temp" "maybe param" "maybe type" "temp"
    (632695 'move' call_tmp[632692](90779 call chpl_nodeFromLocaleID call_tmp[632687]))
    (513829 'move' ret[513823](513828 'coerce' call_tmp[632692] int(64)[13]))
    (513825 return ret[513823])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseLocale[91201].localeid[90788](arg _mt[91221]:_MT[238], arg this[91219]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[513833] "RVV" "temp"
    unknown call_tmp[632697] "expr temp" "maybe param" "maybe type" "temp"
    (632700 'move' call_tmp[632697](90794 '_wide_get_locale' this[91219]))
    (513839 'move' ret[513833](513838 'coerce' call_tmp[632697] chpl_localeID_t[209294]))
    (513835 return ret[513833])
  }
  { scopeless type
    chpl_localeID_t[209294]
  }
  function BaseLocale[91201].hostname[90803](arg _mt[91225]:_MT[238], arg this[91223]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513849] "RVV" "temp"
    function chpl_nodeName[90808]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[513843] "RVV" "temp"
      (513845 return ret[513843])
    }
    { scopeless type
      c_string[19]
    }
    unknown hname[90816] "dead at end of block" "insert auto destroy"
    (541680 'default init var' hname[90816] string[26])
    (90819 'end of statement')
    const tmp[90839] "const" "temp"
    unknown call_tmp[632702] "expr temp" "maybe param" "maybe type" "temp"
    (632705 'move' call_tmp[632702](90836 '_wide_get_locale' this[91223]))
    (90841 'move' tmp[90839](90837 'deref' call_tmp[632702]))
    {
      {
        Try!
        {
          {
            unknown call_tmp[632707] "expr temp" "maybe param" "maybe type" "temp"
            (632710 'move' call_tmp[632707](90825 call chpl_nodeName))
            unknown call_tmp[632712] "expr temp" "maybe param" "maybe type" "temp"
            (632715 'move' call_tmp[632712](90827 call createStringWithNewBuffer call_tmp[632707]))
            (90828 call = hname[90816] call_tmp[632712])
            (477251 'end of statement' hname[90816])
          }
        }
      }
      (90844 'on block' 0 tmp[90839])
    }
    (513855 'move' ret[513849](513854 'coerce' hname[90816] string[26]))
    gotoReturn _end_hostname[513847] _end_hostname[513847]
    (477253 'end of statement' hname[90816])
    label _end_hostname[513847]
    (513851 return ret[513849])
  }
  { scopeless type
    string[26]
  }
  function BaseLocale[91201].writeThis[90857](arg _mt[91229]:_MT[238], arg this[91227]:BaseLocale[91201], arg f[90855]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (90866 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (513859 return _void[55])
    (358336 'referenced modules list' HaltWrappers[209998])
  }
  function BaseLocale[91201].name[90873](arg _mt[91233]:_MT[238], arg this[91231]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513863] "RVV" "temp"
    unknown call_tmp[632719] "expr temp" "maybe param" "maybe type" "temp"
    (632722 'move' call_tmp[632719](90877 call(377847 call (partial) chpl_name _mt[243] this[91231])))
    unknown call_tmp[632724] "expr temp" "maybe param" "maybe type" "temp"
    (632727 'move' call_tmp[632724](90879 call _cast string[26] call_tmp[632719]))
    (513868 'move' ret[513863](513867 'deref' call_tmp[632724]))
    (513865 return ret[513863])
  }
  function BaseLocale[91201].runningTaskCntSet[90900](arg _mt[91237]:_MT[238], arg this[91235]:BaseLocale[91201], arg val[90897]:int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[632731] "expr temp" "maybe param" "maybe type" "temp"
    (632734 'move' call_tmp[632731](358345 call runningTaskCounter _mt[243] this[91235]))
    (90912 call(90903 call (partial) write _mt[243] call_tmp[632731]) val[90897] relaxed[186964])
    (513870 return _void[55])
  }
  function BaseLocale[91201].runningTaskCntAdd[90923](arg _mt[91241]:_MT[238], arg this[91239]:BaseLocale[91201], arg val[90920]:int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[632740] "expr temp" "maybe param" "maybe type" "temp"
    (632743 'move' call_tmp[632740](358351 call runningTaskCounter _mt[243] this[91239]))
    (90935 call(90926 call (partial) add _mt[243] call_tmp[632740]) val[90920] relaxed[186964])
    (513872 return _void[55])
  }
  function BaseLocale[91201].runningTaskCntSub[90946](arg _mt[91245]:_MT[238], arg this[91243]:BaseLocale[91201], arg val[90943]:int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[632749] "expr temp" "maybe param" "maybe type" "temp"
    (632752 'move' call_tmp[632749](358357 call runningTaskCounter _mt[243] this[91243]))
    (90958 call(90949 call (partial) sub _mt[243] call_tmp[632749]) val[90943] relaxed[186964])
    (513874 return _void[55])
  }
  function BaseLocale[91201].runningTaskCnt[90965](arg _mt[91249]:_MT[238], arg this[91247]:BaseLocale[91201]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[513878] "RVV" "temp"
    unknown call_tmp[632758] "expr temp" "maybe param" "maybe type" "temp"
    (632761 'move' call_tmp[632758](358363 call runningTaskCounter _mt[243] this[91247]))
    unknown call_tmp[632765] "maybe param" "maybe type" "temp"
    (632768 'move' call_tmp[632765](90976 call(90968 call (partial) read _mt[243] call_tmp[632758]) relaxed[186964]))
    unknown rtc[90977] "dead at end of block" "insert auto destroy"
    (541682 'init var' rtc[90977] call_tmp[632765])
    (90980 'end of statement')
    unknown tmp[561012] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[561013] "maybe param" "temp"
    unknown call_tmp[632770] "expr temp" "maybe param" "maybe type" "temp"
    (632773 'move' call_tmp[632770](90984 call <= rtc[90977] 0))
    (561018 'move' tmp[561013](561016 call _cond_test call_tmp[632770]))
    if tmp[561013]
    {
      (561023 'move' tmp[561012](561020 '_paramFoldLogical' tmp[561013] 1))
    }
    {
      (561028 'move' tmp[561012](561025 '_paramFoldLogical' tmp[561013] rtc[90977]))
    }
    (513883 'move' ret[513878](513882 'deref' tmp[561012]))
    gotoReturn _end_runningTaskCnt[513876] _end_runningTaskCnt[513876]
    (477260 'end of statement' rtc[90977] rtc[90977])
    label _end_runningTaskCnt[513876]
    (513880 return ret[513878])
  }
  function BaseLocale[91201].chpl_id[90997](arg _mt[91253]:_MT[238], arg this[91251]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513889] "RVV" "temp"
    (91005 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (477263 'end of statement')
    unknown call_tmp[632775] "expr temp" "maybe param" "maybe type" "temp"
    (632778 'move' call_tmp[632775](91009 call - 1))
    (513895 'move' ret[513889](513894 'coerce' call_tmp[632775] int(64)[13]))
    (513891 return ret[513889])
    (358368 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseLocale[91201].chpl_localeid[91018](arg _mt[91257]:_MT[238], arg this[91255]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513899] "RVV" "temp"
    (91026 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (477265 'end of statement')
    unknown call_tmp[632780] "expr temp" "maybe param" "maybe type" "temp"
    (632783 'move' call_tmp[632780](91032 call _cast chpl_nodeID_t[89859] 1))
    unknown call_tmp[632785] "expr temp" "maybe param" "maybe type" "temp"
    (632788 'move' call_tmp[632785](91034 call - call_tmp[632780]))
    unknown call_tmp[632790] "expr temp" "maybe param" "maybe type" "temp"
    (632793 'move' call_tmp[632790](91038 call chpl_buildLocaleID call_tmp[632785] c_sublocid_none[89870]))
    (513905 'move' ret[513899](513904 'coerce' call_tmp[632790] chpl_localeID_t[209294]))
    (513901 return ret[513899])
    (358374 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    chpl_localeID_t[209294]
  }
  function BaseLocale[91201].chpl_name[91046](arg _mt[91261]:_MT[238], arg this[91259]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513909] "RVV" "temp"
    (91054 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (477267 'end of statement')
    (513915 'move' ret[513909](513914 'coerce' "" string[26]))
    (513911 return ret[513909])
    (358380 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    string[26]
  }
  function BaseLocale[91201].defaultMemory[91081](arg _mt[91265]:_MT[238], arg this[91263]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513919] "RVV" "temp"
    (91089 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (513921 return ret[513919])
    (358386 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91201].largeMemory[91097](arg _mt[91269]:_MT[238], arg this[91267]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513925] "RVV" "temp"
    (91105 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (513927 return ret[513925])
    (358392 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91201].lowLatencyMemory[91113](arg _mt[91273]:_MT[238], arg this[91271]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513931] "RVV" "temp"
    (91121 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (513933 return ret[513931])
    (358398 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91201].highBandwidthMemory[91129](arg _mt[91277]:_MT[238], arg this[91275]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513937] "RVV" "temp"
    (91137 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (513939 return ret[513937])
    (358404 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91201].getChildCount[91145](arg _mt[91281]:_MT[238], arg this[91279]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513943] "RVV" "temp"
    (91153 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (477273 'end of statement')
    (513949 'move' ret[513943](513948 'coerce' 0 int(64)[13]))
    (513945 return ret[513943])
    (358410 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseLocale[91201].addChild[91168](arg _mt[91285]:_MT[238], arg this[91283]:BaseLocale[91201], arg loc[91165]:locale[28]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (91175 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (513951 return _void[55])
    (358416 'referenced modules list' HaltWrappers[209998])
  }
  function BaseLocale[91201].getChild[91186](arg _mt[91289]:_MT[238], arg this[91287]:BaseLocale[91201], arg idx[91183]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513955] "RVV" "temp"
    (91194 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (513957 return ret[513955])
    (358422 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    locale[28]
  }
  type BaseLocale[91201] val super[355638]:object[22] "super class" const parent[90681] "const" "no doc" nilLocale[89939] val nPUsLogAcc[90686]:int(64)[13] "no doc" int(64)[13] val nPUsLogAll[90691]:int(64)[13] "no doc" int(64)[13] val nPUsPhysAcc[90696]:int(64)[13] "no doc" int(64)[13] val nPUsPhysAll[90701]:int(64)[13] "no doc" int(64)[13] val maxTaskPar[90743]:int(64)[13] int(64)[13] unknown callStackSize[90748] size_t[20654] unknown runningTaskCounter[90890] "no doc"(90889 call chpl__processorAtomicType int(64)[13])
  type unmanaged BaseLocale?[415423]
  type BaseLocale?[415420](?)
  type BaseLocale[377787](?)
  function DummyLocale[91438].init[91297](arg _mt[91442]:_MT[238], arg this[91440]:DummyLocale[91438]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460665] "temporary of super field" "temp"
    (460667 'move' super_tmp[460665](460664 '.v' this[91440] c"super"))
    (91305 call(91300 call (partial) init _mt[243] super_tmp[460665]) nilLocale[89939])
    (477277 'end of statement')
    unknown tmp[460670] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491981] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632797] "expr temp" "maybe param" "maybe type" "temp"
      (632800 'move' call_tmp[632797](460672 '.v' this[91440] c"super"))
      (491985 'move' call_type_tmp[491981](460675 'typeof' call_tmp[632797]))
    }
    (460676 'move' tmp[460670] call_type_tmp[491981])
    unknown call_tmp[632802] "maybe param" "maybe type" "temp"
    (632805 'move' call_tmp[632802](460681 'cast' tmp[460670] this[91440]))
    unknown chpl__thisAsParent[460678] "dead at end of block" "insert auto destroy" "temp"
    (541684 'init var' chpl__thisAsParent[460678] call_tmp[632802] tmp[460670])
    (460684 'setcid' chpl__thisAsParent[460678])
    (477278 'end of statement')
    (460686 'setcid' this[91440])
    (513959 return _void[55])
  }
  function DummyLocale[91438].chpl_id[91312](arg _mt[91446]:_MT[238], arg this[91444]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[513963] "RVV" "temp"
    unknown call_tmp[632807] "expr temp" "maybe param" "maybe type" "temp"
    (632810 'move' call_tmp[632807](91316 call - 1))
    (513969 'move' ret[513963](513968 'coerce' call_tmp[632807] int(64)[13]))
    (513965 return ret[513963])
  }
  { scopeless type
    int(64)[13]
  }
  function DummyLocale[91438].chpl_localeid[91326](arg _mt[91450]:_MT[238], arg this[91448]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[513973] "RVV" "temp"
    unknown call_tmp[632812] "expr temp" "maybe param" "maybe type" "temp"
    (632815 'move' call_tmp[632812](91332 call _cast chpl_nodeID_t[89859] 1))
    unknown call_tmp[632817] "expr temp" "maybe param" "maybe type" "temp"
    (632820 'move' call_tmp[632817](91334 call - call_tmp[632812]))
    unknown call_tmp[632822] "expr temp" "maybe param" "maybe type" "temp"
    (632825 'move' call_tmp[632822](91338 call chpl_buildLocaleID call_tmp[632817] c_sublocid_none[89870]))
    (513979 'move' ret[513973](513978 'coerce' call_tmp[632822] chpl_localeID_t[209294]))
    (513975 return ret[513973])
  }
  { scopeless type
    chpl_localeID_t[209294]
  }
  function DummyLocale[91438].chpl_name[91347](arg _mt[91454]:_MT[238], arg this[91452]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[513983] "RVV" "temp"
    (513989 'move' ret[513983](513988 'coerce' "dummy-locale" string[26]))
    (513985 return ret[513983])
  }
  { scopeless type
    string[26]
  }
  function DummyLocale[91438].getChildCount[91375](arg _mt[91458]:_MT[238], arg this[91456]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[513993] "RVV" "temp"
    (513999 'move' ret[513993](513998 'coerce' 0 int(64)[13]))
    (513995 return ret[513993])
  }
  { scopeless type
    int(64)[13]
  }
  function DummyLocale[91438].getChild[91391](arg _mt[91462]:_MT[238], arg this[91460]:DummyLocale[91438], arg idx[91388]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[514003] "RVV" "temp"
    unknown call_tmp[632827] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632830 'move' call_tmp[632827](747818 'new' locale[28] this[91460]))
    (514009 'move' ret[514003](514008 'coerce' call_tmp[632827] locale[28]))
    (514005 return ret[514003])
  }
  { scopeless type
    locale[28]
  }
  function DummyLocale[91438].addChild[91411](arg _mt[91466]:_MT[238], arg this[91464]:DummyLocale[91438], arg loc[91408]:locale[28]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (91432 call halt "addChild on DummyLocale")
    (514011 return _void[55])
  }
  type DummyLocale[91438] val super[355648]:BaseLocale[91201] "super class"
  type DummyLocale[377805](?)
  function AbstractLocaleModel[91499].init[91478](arg _mt[91503]:_MT[238], arg this[91501]:AbstractLocaleModel[91499], arg parent_loc[91475]:locale[28]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460689] "temporary of super field" "temp"
    (460691 'move' super_tmp[460689](460688 '.v' this[91501] c"super"))
    (91486 call(91481 call (partial) init _mt[243] super_tmp[460689]) parent_loc[91475])
    (477286 'end of statement')
    unknown tmp[460694] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491987] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632834] "expr temp" "maybe param" "maybe type" "temp"
      (632837 'move' call_tmp[632834](460696 '.v' this[91501] c"super"))
      (491991 'move' call_type_tmp[491987](460699 'typeof' call_tmp[632834]))
    }
    (460700 'move' tmp[460694] call_type_tmp[491987])
    unknown call_tmp[632839] "maybe param" "maybe type" "temp"
    (632842 'move' call_tmp[632839](460705 'cast' tmp[460694] this[91501]))
    unknown chpl__thisAsParent[460702] "dead at end of block" "insert auto destroy" "temp"
    (541686 'init var' chpl__thisAsParent[460702] call_tmp[632839] tmp[460694])
    (460708 'setcid' chpl__thisAsParent[460702])
    (477287 'end of statement')
    (460710 'setcid' this[91501])
    (514013 return _void[55])
  }
  function AbstractLocaleModel[91499].init[91493](arg _mt[91507]:_MT[238], arg this[91505]:AbstractLocaleModel[91499]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460732] "temporary of super field" "temp"
    (460740 'move' super_tmp[460732](460733 '.v' this[91505] c"super"))
    (460736 call init _mt[243] super_tmp[460732])
    (477289 'end of statement')
    unknown tmp[460716] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491993] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632844] "expr temp" "maybe param" "maybe type" "temp"
      (632847 'move' call_tmp[632844](460718 '.v' this[91505] c"super"))
      (491997 'move' call_type_tmp[491993](460721 'typeof' call_tmp[632844]))
    }
    (460722 'move' tmp[460716] call_type_tmp[491993])
    unknown call_tmp[632849] "maybe param" "maybe type" "temp"
    (632852 'move' call_tmp[632849](460727 'cast' tmp[460716] this[91505]))
    unknown chpl__thisAsParent[460724] "dead at end of block" "insert auto destroy" "temp"
    (541688 'init var' chpl__thisAsParent[460724] call_tmp[632849] tmp[460716])
    (460730 'setcid' chpl__thisAsParent[460724])
    (477290 'end of statement')
    (460743 'setcid' this[91505])
    (514015 return _void[55])
  }
  type AbstractLocaleModel[91499] val super[355640]:BaseLocale[91201] "super class"
  unknown rootLocale[91511] "dead at end of block" "insert auto destroy" "locale private" "no doc"
  unknown replicateRootLocale[91516] "config" "no doc" "param"
  unknown origRootLocale[91521] "dead at end of block" "insert auto destroy" "no doc"
  function AbstractRootLocale[92009].init[91530](arg _mt[92013]:_MT[238], arg this[92011]:AbstractRootLocale[92009]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460765] "temporary of super field" "temp"
    (460773 'move' super_tmp[460765](460766 '.v' this[92011] c"super"))
    (460769 call init _mt[243] super_tmp[460765])
    (477294 'end of statement')
    unknown tmp[460749] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[491999] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632854] "expr temp" "maybe param" "maybe type" "temp"
      (632857 'move' call_tmp[632854](460751 '.v' this[92011] c"super"))
      (492003 'move' call_type_tmp[491999](460754 'typeof' call_tmp[632854]))
    }
    (460755 'move' tmp[460749] call_type_tmp[491999])
    unknown call_tmp[632859] "maybe param" "maybe type" "temp"
    (632862 'move' call_tmp[632859](460760 'cast' tmp[460749] this[92011]))
    unknown chpl__thisAsParent[460757] "dead at end of block" "insert auto destroy" "temp"
    (541696 'init var' chpl__thisAsParent[460757] call_tmp[632859] tmp[460749])
    (460763 'setcid' chpl__thisAsParent[460757])
    (477295 'end of statement')
    (460776 'setcid' this[92011])
    (514017 return _void[55])
  }
  function AbstractRootLocale[92009].init[91541](arg _mt[92017]:_MT[238], arg this[92015]:AbstractRootLocale[92009], arg parent_loc[91538]:locale[28]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460779] "temporary of super field" "temp"
    (460781 'move' super_tmp[460779](460778 '.v' this[92015] c"super"))
    (91549 call(91544 call (partial) init _mt[243] super_tmp[460779]) parent_loc[91538])
    (477297 'end of statement')
    unknown tmp[460784] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492005] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632866] "expr temp" "maybe param" "maybe type" "temp"
      (632869 'move' call_tmp[632866](460786 '.v' this[92015] c"super"))
      (492009 'move' call_type_tmp[492005](460789 'typeof' call_tmp[632866]))
    }
    (460790 'move' tmp[460784] call_type_tmp[492005])
    unknown call_tmp[632871] "maybe param" "maybe type" "temp"
    (632874 'move' call_tmp[632871](460795 'cast' tmp[460784] this[92015]))
    unknown chpl__thisAsParent[460792] "dead at end of block" "insert auto destroy" "temp"
    (541698 'init var' chpl__thisAsParent[460792] call_tmp[632871] tmp[460784])
    (460798 'setcid' chpl__thisAsParent[460792])
    (477298 'end of statement')
    (460800 'setcid' this[92015])
    (514019 return _void[55])
  }
  function AbstractRootLocale[92009].getDefaultLocaleSpace[91556](arg _mt[92021]:_MT[238], arg this[92019]:AbstractRootLocale[92009]) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[514023] "RVV" "temp"
    (91563 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (477300 'end of statement')
    (514028 'move' ret[514023](514027 'addr of' chpl_emptyLocaleSpace[88781]))
    (514025 return ret[514023])
    (358443 'referenced modules list' HaltWrappers[209998])
  }
  function AbstractRootLocale[92009].getDefaultLocaleArray[91573](arg _mt[92025]:_MT[238], arg this[92023]:AbstractRootLocale[92009]) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[514032] "RVV" "temp"
    (91580 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (477302 'end of statement')
    (514037 'move' ret[514032](514036 'addr of' chpl_emptyLocales[88792]))
    (514034 return ret[514032])
    (358449 'referenced modules list' HaltWrappers[209998])
  }
  function AbstractRootLocale[92009].localeIDtoLocale[91594](arg _mt[92029]:_MT[238], arg this[92027]:AbstractRootLocale[92009], arg id[91591]:chpl_localeID_t[209294]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[514041] "RVV" "temp"
    (91602 call pureVirtualMethodHalt module=[255] HaltWrappers[209998])
    (514043 return ret[514041])
    (358455 'referenced modules list' HaltWrappers[209998])
  }
  { scopeless type
    locale[28]
  }
  function AbstractRootLocale[92009].chpl_initOnLocales[91610](arg _mt[92033]:_MT[238], arg this[92031]:AbstractRootLocale[92009]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[514047] "RVV" "temp"
    unknown call_tmp[632876] "expr temp" "maybe param" "maybe type" "temp"
    (632879 'move' call_tmp[632876](91614 call > numLocales[209834] 1))
    unknown call_tmp[632881] "expr temp" "maybe param" "maybe type" "temp"
    (632884 'move' call_tmp[632881](91637 call _cond_test call_tmp[632876]))
    if call_tmp[632881]
    {
      (91635 call halt "The locales must be initialized in parallel")
    }
    {
      unknown _indexOfInterest[91676] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[91677] "expr temp" "temp"
      unknown call_tmp[632888] "expr temp" "maybe param" "maybe type" "temp"
      (632891 'move' call_tmp[632888](91645 call _instance _mt[243] origRootLocale[91521]))
      unknown call_tmp[632893] "expr temp" "maybe param" "maybe type" "temp"
      (632896 'move' call_tmp[632893](91651 call _cast borrowed RootLocale?[415429] call_tmp[632888]))
      unknown call_tmp[632898] "expr temp" "maybe param" "maybe type" "temp"
      (632901 'move' call_tmp[632898](91653 call postfix! call_tmp[632893]))
      unknown call_tmp[632905] "expr temp" "maybe param" "maybe type" "temp"
      (632908 'move' call_tmp[632905](91661 call(91657 call (partial) getDefaultLocaleSpace _mt[243] call_tmp[632898])))
      (91686 'move' _iterator[91677](91684 call _getIterator call_tmp[632905]))
      Defer
      {
        {
          (91703 call _freeIterator _iterator[91677])
        }
      }
      { scopeless type
        (91692 'move' _indexOfInterest[91676](91689 call iteratorIndex _iterator[91677]))
      }
      ForLoop[91678]
      {
        unknown locIdx[91696] "index var" "insert auto destroy"
        (477307 'end of statement')
        (91698 'move' locIdx[91696] _indexOfInterest[91676])
        (477308 'end of statement' locIdx[91696])
        {
          unknown yret[514051] "YVV" "temp"
          (514054 'move' yret[514051](514053 'deref' locIdx[91696]))
          (514056 yield yret[514051])
          (477310 'end of statement' locIdx[91696])
          (91668 call = rootLocale[91511] origRootLocale[91521])
          (477312 'end of statement')
          (91673 call = rootLocaleInitialized[310] 1)
        }
        label _continueLabel[91681]
        _indexOfInterest[91676]
        _iterator[91677]
      }
      label _breakLabel[91682]
    }
    (514049 return ret[514047])
  }
  function AbstractRootLocale[92009].chpl_initOnLocales[91718](arg _mt[92037]:_MT[238], arg this[92035]:AbstractRootLocale[92009], param arg tag[91715]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[514060] "RVV" "temp"
    unknown b[91728] "dead at end of block" "insert auto destroy"
    (541700 'default init var' b[91728] localesBarrier[92483])
    (91731 'end of statement')
    unknown flags[91750] "dead at end of block" "insert auto destroy"
    unknown call_tmp[632910] "expr temp" "maybe param" "maybe type" "temp"
    (632913 'move' call_tmp[632910](91734 call chpl_build_low_bounded_range 1))
    unknown call_tmp[632915] "expr temp" "maybe param" "maybe type" "temp"
    (632918 'move' call_tmp[632915](91738 call - numLocales[209834] 1))
    unknown call_tmp[632920] "expr temp" "maybe param" "maybe type" "temp"
    (632923 'move' call_tmp[632920](91740 call # call_tmp[632910] call_tmp[632915]))
    unknown call_tmp[632925] "expr temp" "maybe param" "maybe type" "temp"
    (632928 'move' call_tmp[632925](91746 call chpl__ensureDomainExpr call_tmp[632920]))
    unknown call_tmp[632930] "expr temp" "maybe param" "maybe type" "temp"
    (632933 'move' call_tmp[632930](91748 call chpl__buildArrayRuntimeType call_tmp[632925] unmanaged localesSignal?[415435]))
    (541702 'default init var' flags[91750] call_tmp[632930])
    (91753 'end of statement')
    {
      unknown tmpIter[91815] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[632935] "expr temp" "maybe param" "maybe type" "temp"
      (632938 'move' call_tmp[632935](91756 call chpl_build_low_bounded_range 0))
      (91818 'move' tmpIter[91815](91759 call # call_tmp[632935] numLocales[209834]))
      unknown isRngDomArr[91986] "maybe param" "temp"
      unknown tmp[422343] "maybe param" "temp"
      (422354 'move' tmp[422343](91988 call isBoundedRange tmpIter[91815]))
      unknown call_tmp[632940] "expr temp" "maybe param" "maybe type" "temp"
      (632943 'move' call_tmp[632940](422356 call _cond_invalid tmp[422343]))
      if call_tmp[632940]
      {
        (422359 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[561062] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[561063] "maybe param" "temp"
      unknown call_tmp[632945] "expr temp" "maybe param" "maybe type" "temp"
      (632948 'move' call_tmp[632945](422344 call isTrue tmp[422343]))
      (561068 'move' tmp[561063](561066 call _cond_test call_tmp[632945]))
      if tmp[561063]
      {
        (561073 'move' tmp[561062](561070 '_paramFoldLogical' tmp[561063] 1))
      }
      {
        unknown tmp[422364] "maybe param" "temp"
        (422375 'move' tmp[422364](91991 call isDomain tmpIter[91815]))
        unknown call_tmp[632950] "expr temp" "maybe param" "maybe type" "temp"
        (632953 'move' call_tmp[632950](422377 call _cond_invalid tmp[422364]))
        if call_tmp[632950]
        {
          (422380 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[561035] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[561036] "maybe param" "temp"
        unknown call_tmp[632955] "expr temp" "maybe param" "maybe type" "temp"
        (632958 'move' call_tmp[632955](422365 call isTrue tmp[422364]))
        (561041 'move' tmp[561036](561039 call _cond_test call_tmp[632955]))
        if tmp[561036]
        {
          (561046 'move' tmp[561035](561043 '_paramFoldLogical' tmp[561036] 1))
        }
        {
          unknown tmp[561048] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[632960] "expr temp" "maybe param" "maybe type" "temp"
          (632963 'move' call_tmp[632960](91994 call isArray tmpIter[91815]))
          (561050 'move' tmp[561048](422369 call isTrue call_tmp[632960]))
          (561055 'move' tmp[561035](561052 '_paramFoldLogical' tmp[561036] tmp[561048]))
        }
        unknown tmp[561075] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (561077 'move' tmp[561075](422348 call isTrue tmp[561035]))
        (561082 'move' tmp[561062](561079 '_paramFoldLogical' tmp[561063] tmp[561075]))
      }
      (92001 'move' isRngDomArr[91986] tmp[561062])
      if isRngDomArr[91986]
      {
        const _coforallCount[91858] "const" "end count" "temp"
        (91923 'move' _coforallCount[91858](91920 call _endCountAlloc 0))
        unknown numTasks[91859] "temp"
        (91907 'move' numTasks[91859](91903 call size _mt[243] tmpIter[91815]))
        (91898 call _upEndCount _coforallCount[91858] 0 numTasks[91859])
        (477315 'end of statement')
        unknown _indexOfInterest[91865] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91866] "expr temp" "temp"
        (91875 'move' _iterator[91866](91873 call _getIterator tmpIter[91815]))
        Defer
        {
          {
            (91891 call _freeIterator _iterator[91866])
          }
        }
        { scopeless type
          (91880 'move' _indexOfInterest[91865](91877 call iteratorIndex _iterator[91866]))
        }
        ForLoop[91867]
        {
          unknown locIdx[91884] "coforall index var" "index var" "insert auto destroy"
          (477317 'end of statement')
          (91886 'move' locIdx[91884] _indexOfInterest[91865])
          (477318 'end of statement' locIdx[91884])
          const tmp[91821] "const" "temp"
          unknown call_tmp[632967] "expr temp" "maybe param" "maybe type" "temp"
          (632970 'move' call_tmp[632967](91830 call _cast chpl_nodeID_t[89859] locIdx[91884]))
          unknown call_tmp[632972] "expr temp" "maybe param" "maybe type" "temp"
          (632975 'move' call_tmp[632972](91828 call chpl_buildLocaleID call_tmp[632967] c_sublocid_any[89875]))
          unknown call_tmp[632977] "expr temp" "maybe param" "maybe type" "temp"
          (632980 'move' call_tmp[632977](91826 'chpl_on_locale_num' call_tmp[632972]))
          (91823 'move' tmp[91821](91825 'deref' call_tmp[632977]))
          {
            {
              (91840 call chpl_defaultDistInitPrivate)
              (477320 'end of statement')
              unknown yret[514064] "YVV" "temp"
              (514067 'move' yret[514064](514066 'deref' locIdx[91884]))
              (514069 yield yret[514064])
              (477321 'end of statement' locIdx[91884])
              (91847 call(91844 call (partial) wait _mt[243] b[91728]) locIdx[91884] flags[91750])
              (477323 'end of statement' b[91728] locIdx[91884] flags[91750])
              (91851 call chpl_rootLocaleInitPrivate locIdx[91884])
              (477327 'end of statement' locIdx[91884])
              (91854 call chpl_defaultLocaleInitPrivate)
              (477329 'end of statement')
              (91856 call warmupRuntime)
            }
            (91860 call _downEndCount _coforallCount[91858] nil[44])
            (91835 'coforall on block' 0 tmp[91821])
          }
          label _continueLabel[91870]
          _indexOfInterest[91865]
          _iterator[91866]
        }
        label _breakLabel[91871]
        Defer
        {
          {
            (91910 call _endCountFree _coforallCount[91858])
          }
        }
        (91915 call _waitEndCount _coforallCount[91858] 0 numTasks[91859])
      }
      {
        const _coforallCount[91927] "const" "end count" "temp"
        (91983 'move' _coforallCount[91927](91980 call _endCountAlloc 0))
        unknown _indexOfInterest[91934] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91935] "expr temp" "temp"
        (91944 'move' _iterator[91935](91942 call _getIterator tmpIter[91815]))
        Defer
        {
          {
            (91960 call _freeIterator _iterator[91935])
          }
        }
        { scopeless type
          (91949 'move' _indexOfInterest[91934](91946 call iteratorIndex _iterator[91935]))
        }
        ForLoop[91936]
        {
          unknown locIdx[91953] "coforall index var" "index var" "insert auto destroy"
          (477335 'end of statement')
          (91955 'move' locIdx[91953] _indexOfInterest[91934])
          (477336 'end of statement' locIdx[91953])
          (91967 call _upEndCount _coforallCount[91927] 0)
          (477338 'end of statement')
          const tmp[91806] "const" "temp"
          unknown call_tmp[632984] "expr temp" "maybe param" "maybe type" "temp"
          (632987 'move' call_tmp[632984](91766 call _cast chpl_nodeID_t[89859] locIdx[91953]))
          unknown call_tmp[632989] "expr temp" "maybe param" "maybe type" "temp"
          (632992 'move' call_tmp[632989](91770 call chpl_buildLocaleID call_tmp[632984] c_sublocid_any[89875]))
          unknown call_tmp[632994] "expr temp" "maybe param" "maybe type" "temp"
          (632997 'move' call_tmp[632994](91771 'chpl_on_locale_num' call_tmp[632989]))
          (91808 'move' tmp[91806](91804 'deref' call_tmp[632994]))
          {
            {
              (91774 call chpl_defaultDistInitPrivate)
              (477339 'end of statement')
              unknown yret[514071] "YVV" "temp"
              (514074 'move' yret[514071](514073 'deref' locIdx[91953]))
              (514076 yield yret[514071])
              (477340 'end of statement' locIdx[91953])
              (91789 call(91783 call (partial) wait _mt[243] b[91728]) locIdx[91953] flags[91750])
              (477342 'end of statement' b[91728] locIdx[91953] flags[91750])
              (91794 call chpl_rootLocaleInitPrivate locIdx[91953])
              (477346 'end of statement' locIdx[91953])
              (91798 call chpl_defaultLocaleInitPrivate)
              (477348 'end of statement')
              (91802 call warmupRuntime)
            }
            (91929 call _downEndCount _coforallCount[91927] nil[44])
            (91811 'coforall on block' 0 tmp[91806])
          }
          label _continueLabel[91939]
          _indexOfInterest[91934]
          _iterator[91935]
        }
        label _breakLabel[91940]
        Defer
        {
          {
            (91971 call _endCountFree _coforallCount[91927])
          }
        }
        (91976 call _waitEndCount _coforallCount[91927] 0)
      }
    }
    (514062 return ret[514060])
  }
  where {
    (91725 call == tag[91715] standalone[451])
  }
  type AbstractRootLocale[92009] val super[355644]:BaseLocale[91201] "super class"
  type borrowed AbstractRootLocale?[415441]
  type AbstractRootLocale?[415438](?)
  type AbstractRootLocale[377954](?)
  function warmupRuntime[92042]() : _unknown[51] "private" "no return value for void"
  {
    function chpl_task_getFixedNumThreads[92046]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514080] "RVV" "temp"
      (514082 return ret[514080])
    }
    { scopeless type
      (92051 call uint(64)[115] 32)
    }
    {
      unknown tmpIter[92088] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[633001] "expr temp" "maybe param" "maybe type" "temp"
      (633004 'move' call_tmp[633001](92058 call chpl_build_low_bounded_range 0))
      unknown call_tmp[633006] "expr temp" "maybe param" "maybe type" "temp"
      (633009 'move' call_tmp[633006](92062 call chpl_task_getFixedNumThreads))
      (92091 'move' tmpIter[92088](92063 call # call_tmp[633001] call_tmp[633006]))
      unknown isRngDomArr[92245] "maybe param" "temp"
      unknown tmp[422385] "maybe param" "temp"
      (422396 'move' tmp[422385](92247 call isBoundedRange tmpIter[92088]))
      unknown call_tmp[633011] "expr temp" "maybe param" "maybe type" "temp"
      (633014 'move' call_tmp[633011](422398 call _cond_invalid tmp[422385]))
      if call_tmp[633011]
      {
        (422401 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[561116] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[561117] "maybe param" "temp"
      unknown call_tmp[633016] "expr temp" "maybe param" "maybe type" "temp"
      (633019 'move' call_tmp[633016](422386 call isTrue tmp[422385]))
      (561122 'move' tmp[561117](561120 call _cond_test call_tmp[633016]))
      if tmp[561117]
      {
        (561127 'move' tmp[561116](561124 '_paramFoldLogical' tmp[561117] 1))
      }
      {
        unknown tmp[422406] "maybe param" "temp"
        (422417 'move' tmp[422406](92250 call isDomain tmpIter[92088]))
        unknown call_tmp[633021] "expr temp" "maybe param" "maybe type" "temp"
        (633024 'move' call_tmp[633021](422419 call _cond_invalid tmp[422406]))
        if call_tmp[633021]
        {
          (422422 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[561089] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[561090] "maybe param" "temp"
        unknown call_tmp[633026] "expr temp" "maybe param" "maybe type" "temp"
        (633029 'move' call_tmp[633026](422407 call isTrue tmp[422406]))
        (561095 'move' tmp[561090](561093 call _cond_test call_tmp[633026]))
        if tmp[561090]
        {
          (561100 'move' tmp[561089](561097 '_paramFoldLogical' tmp[561090] 1))
        }
        {
          unknown tmp[561102] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[633031] "expr temp" "maybe param" "maybe type" "temp"
          (633034 'move' call_tmp[633031](92253 call isArray tmpIter[92088]))
          (561104 'move' tmp[561102](422411 call isTrue call_tmp[633031]))
          (561109 'move' tmp[561089](561106 '_paramFoldLogical' tmp[561090] tmp[561102]))
        }
        unknown tmp[561129] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (561131 'move' tmp[561129](422390 call isTrue tmp[561089]))
        (561136 'move' tmp[561116](561133 '_paramFoldLogical' tmp[561117] tmp[561129]))
      }
      (92260 'move' isRngDomArr[92245] tmp[561116])
      if isRngDomArr[92245]
      {
        const _coforallCount[92112] "const" "end count" "temp"
        (92181 'move' _coforallCount[92112](92178 call _endCountAlloc 1))
        unknown numTasks[92113] "temp"
        (92165 'move' numTasks[92113](92161 call size _mt[243] tmpIter[92088]))
        (92156 call _upEndCount _coforallCount[92112] 1 numTasks[92113])
        (477354 'end of statement')
        (92153 call chpl_resetTaskSpawn numTasks[92113])
        (477355 'end of statement')
        unknown _indexOfInterest[92120] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92121] "expr temp" "temp"
        (92130 'move' _iterator[92121](92128 call _getIterator tmpIter[92088]))
        Defer
        {
          {
            (92146 call _freeIterator _iterator[92121])
          }
        }
        { scopeless type
          (92135 'move' _indexOfInterest[92120](92132 call iteratorIndex _iterator[92121]))
        }
        ForLoop[92122]
        {
          unknown i[92139] "coforall index var" "index var" "insert auto destroy"
          (477357 'end of statement')
          (92141 'move' i[92139] _indexOfInterest[92120])
          (477358 'end of statement' i[92139])
          {
            {
              unknown call_tmp[633038] "maybe param" "maybe type" "temp"
              (633041 'move' call_tmp[633038](92097 call c_malloc int(64)[13] 1))
              unknown p[92095] "dead at end of block" "insert auto destroy"
              (541704 'init var' p[92095] call_tmp[633038])
              (92101 'end of statement')
              unknown call_tmp[633043] "expr temp" "maybe param" "maybe type" "temp"
              (633046 'move' call_tmp[633043](92105 call p[92095] 0))
              (92103 call = call_tmp[633043] i[92139])
              (477360 'end of statement' p[92095] i[92139])
              (92109 call c_free p[92095])
              (477363 'end of statement' p[92095])
            }
            (92115 call _downEndCount _coforallCount[92112] nil[44])
            (92114 'coforall loop')
          }
          label _continueLabel[92125]
          _indexOfInterest[92120]
          _iterator[92121]
        }
        label _breakLabel[92126]
        Defer
        {
          {
            (92168 call _endCountFree _coforallCount[92112])
          }
        }
        (92173 call _waitEndCount _coforallCount[92112] 1 numTasks[92113])
      }
      {
        const _coforallCount[92185] "const" "end count" "temp"
        (92242 'move' _coforallCount[92185](92239 call _endCountAlloc 1))
        unknown _indexOfInterest[92193] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92194] "expr temp" "temp"
        (92203 'move' _iterator[92194](92201 call _getIterator tmpIter[92088]))
        Defer
        {
          {
            (92219 call _freeIterator _iterator[92194])
          }
        }
        { scopeless type
          (92208 'move' _indexOfInterest[92193](92205 call iteratorIndex _iterator[92194]))
        }
        ForLoop[92195]
        {
          unknown i[92212] "coforall index var" "index var" "insert auto destroy"
          (477369 'end of statement')
          (92214 'move' i[92212] _indexOfInterest[92193])
          (477370 'end of statement' i[92212])
          (92226 call _upEndCount _coforallCount[92185] 1)
          (477372 'end of statement')
          {
            {
              unknown call_tmp[633048] "maybe param" "maybe type" "temp"
              (633051 'move' call_tmp[633048](92069 call c_malloc int(64)[13] 1))
              unknown p[92070] "dead at end of block" "insert auto destroy"
              (541706 'init var' p[92070] call_tmp[633048])
              (92073 'end of statement')
              unknown call_tmp[633053] "expr temp" "maybe param" "maybe type" "temp"
              (633056 'move' call_tmp[633053](92078 call p[92070] 0))
              (92080 call = call_tmp[633053] i[92212])
              (477373 'end of statement' p[92070] i[92212])
              (92086 call c_free p[92070])
              (477376 'end of statement' p[92070])
            }
            (92188 call _downEndCount _coforallCount[92185] nil[44])
            (92187 'coforall loop')
          }
          label _continueLabel[92198]
          _indexOfInterest[92193]
          _iterator[92194]
        }
        label _breakLabel[92199]
        Defer
        {
          {
            (92230 call _endCountFree _coforallCount[92185])
          }
        }
        (92235 call _waitEndCount _coforallCount[92185] 1)
      }
    }
    (514084 return _void[55])
  }
  type localesSignal[92275] val super[355650]:object[22] "super class" unknown s[92270](92268 call chpl__atomicType bool[10])
  type unmanaged localesSignal?[415435]
  type localesSignal?[415432](?)
  type localesSignal[377884](?)
  function localesBarrier[92483].wait[92283](arg _mt[92487]:_MT[238], arg this[92485]:localesBarrier[92483], arg locIdx[92281]:_any[178](?), arg flags[92285]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[633058] "expr temp" "maybe param" "maybe type" "temp"
    (633061 'move' call_tmp[633058](92289 call == locIdx[92281] 0))
    unknown call_tmp[633063] "expr temp" "maybe param" "maybe type" "temp"
    (633066 'move' call_tmp[633063](92475 call _cond_test call_tmp[633058]))
    if call_tmp[633063]
    {
      {
        unknown tmp[92367] "temp"
        (92385 'move' tmp[92367](92383 call _cond_test 1))
        WhileDo[92372]
        {
          {
            (92294 call atomicFence)
            (477381 'end of statement')
            unknown count[92298] "dead at end of block" "insert auto destroy"
            (541708 'init var' count[92298] 0)
            (92301 'end of statement')
            {
              unknown _indexOfInterest[92315] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[92316] "expr temp" "temp"
              (92325 'move' _iterator[92316](92323 call _getIterator flags[92285]))
              Defer
              {
                {
                  (92341 call _freeIterator _iterator[92316])
                }
              }
              { scopeless type
                (92330 'move' _indexOfInterest[92315](92327 call iteratorIndex _iterator[92316]))
              }
              ForLoop[92317]
              {
                unknown f[92334] "index var" "insert auto destroy"
                (477383 'end of statement')
                (92336 'move' f[92334] _indexOfInterest[92315])
                (477384 'end of statement' f[92334])
                unknown call_tmp[633068] "expr temp" "maybe param" "maybe type" "temp"
                (633071 'move' call_tmp[633068](92310 call _cond_test f[92334]))
                if call_tmp[633068]
                {
                  (92307 call += count[92298] 1)
                  (477386 'end of statement' count[92298])
                }
                label _continueLabel[92320]
                _indexOfInterest[92315]
                _iterator[92316]
              }
              label _breakLabel[92321]
            }
            unknown call_tmp[633073] "expr temp" "maybe param" "maybe type" "temp"
            (633076 'move' call_tmp[633073](92351 call - numLocales[209834] 1))
            unknown call_tmp[633078] "expr temp" "maybe param" "maybe type" "temp"
            (633081 'move' call_tmp[633078](92353 call == count[92298] call_tmp[633073]))
            unknown call_tmp[633083] "expr temp" "maybe param" "maybe type" "temp"
            (633086 'move' call_tmp[633083](92358 call _cond_test call_tmp[633078]))
            if call_tmp[633083]
            {
              break _breakLabel[92371] _breakLabel[92371]
            }
            (92365 call chpl_task_yield)
          }
          label _continueLabel[92370]
          (92378 'move' tmp[92367](92376 call _cond_test 1))
          tmp[92367]
        }
        label _breakLabel[92371]
      }
      {
        unknown _indexOfInterest[92407] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92408] "expr temp" "temp"
        (92417 'move' _iterator[92408](92415 call _getIterator flags[92285]))
        Defer
        {
          {
            (92433 call _freeIterator _iterator[92408])
          }
        }
        { scopeless type
          (92422 'move' _indexOfInterest[92407](92419 call iteratorIndex _iterator[92408]))
        }
        ForLoop[92409]
        {
          unknown f[92426] "index var" "insert auto destroy"
          (477390 'end of statement')
          (92428 'move' f[92426] _indexOfInterest[92407])
          (477391 'end of statement' f[92426])
          unknown call_tmp[633088] "expr temp" "maybe param" "maybe type" "temp"
          (633091 'move' call_tmp[633088](92392 call postfix! f[92426]))
          unknown call_tmp[633095] "expr temp" "maybe param" "maybe type" "temp"
          (633098 'move' call_tmp[633095](92396 call s _mt[243] call_tmp[633088]))
          (92405 call(92401 call (partial) testAndSet _mt[243] call_tmp[633095]))
          (477393 'end of statement' f[92426])
          label _continueLabel[92412]
          _indexOfInterest[92407]
          _iterator[92408]
        }
        label _breakLabel[92413]
      }
    }
    {
      unknown call_tmp[633102] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (633105 'move' call_tmp[633102](747819 'new' localesSignal[377884](?)(_chpl_manager = unmanaged[220](?))))
      unknown f[92446] "dead at end of block" "insert auto destroy"
      (541710 'init var' f[92446] call_tmp[633102])
      (92449 'end of statement')
      unknown call_tmp[633107] "expr temp" "maybe param" "maybe type" "temp"
      (633110 'move' call_tmp[633107](92454 call flags[92285] locIdx[92281]))
      (92456 call = call_tmp[633107] f[92446])
      (477395 'end of statement' f[92446])
      unknown call_tmp[633114] "expr temp" "maybe param" "maybe type" "temp"
      (633117 'move' call_tmp[633114](92460 call s _mt[243] f[92446]))
      (92468 call(92463 call (partial) waitFor _mt[243] call_tmp[633114]) 1)
      (477397 'end of statement' f[92446])
      (92472 call chpl__delete f[92446])
      (477399 'end of statement' f[92446])
    }
    (514086 return _void[55])
  }
  type localesBarrier[92483]
  function chpl_init_rootLocale[92492]() : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[422427] "maybe param" "temp"
    (422438 'move' tmp[422427](92496 call > numLocales[209834] 1))
    unknown call_tmp[633121] "expr temp" "maybe param" "maybe type" "temp"
    (633124 'move' call_tmp[633121](422440 call _cond_invalid tmp[422427]))
    if call_tmp[633121]
    {
      (422443 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[561143] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[561144] "maybe param" "temp"
    unknown call_tmp[633126] "expr temp" "maybe param" "maybe type" "temp"
    (633129 'move' call_tmp[633126](422428 call isTrue tmp[422427]))
    (561149 'move' tmp[561144](561147 call _cond_test call_tmp[633126]))
    if tmp[561144]
    {
      unknown tmp[561151] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (561153 'move' tmp[561151](422431 call isTrue 0))
      (561158 'move' tmp[561143](561155 '_paramFoldLogical' tmp[561144] tmp[561151]))
    }
    {
      (561163 'move' tmp[561143](561160 '_paramFoldLogical' tmp[561144] 0))
    }
    unknown call_tmp[633131] "expr temp" "maybe param" "maybe type" "temp"
    (633134 'move' call_tmp[633131](92522 call _cond_test tmp[561143]))
    if call_tmp[633131]
    {
      (92520 call halt "Cannot run a program compiled with --local in more than 1 locale")
    }
    unknown call_tmp[633138] "expr temp" "maybe param" "maybe type" "temp"
    (633141 'move' call_tmp[633138](92529 call _instance _mt[243] origRootLocale[91521]))
    unknown call_tmp[633143] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (633146 'move' call_tmp[633143](747820 'new' RootLocale[377872](?)(_chpl_manager = unmanaged[220](?))))
    (92538 call = call_tmp[633138] call_tmp[633143])
    (477403 'end of statement')
    unknown call_tmp[633150] "expr temp" "maybe param" "maybe type" "temp"
    (633153 'move' call_tmp[633150](92542 call _instance _mt[243] origRootLocale[91521]))
    unknown call_tmp[633155] "expr temp" "maybe param" "maybe type" "temp"
    (633158 'move' call_tmp[633155](92548 call _cast borrowed RootLocale?[415429] call_tmp[633150]))
    unknown call_tmp[633160] "expr temp" "maybe param" "maybe type" "temp"
    (633163 'move' call_tmp[633160](92550 call postfix! call_tmp[633155]))
    (92558 call(92554 call (partial) setup _mt[243] call_tmp[633160]))
    (514088 return _void[55])
  }
  function chpl_defaultLocaleInitPrivate[92564]() : _unknown[51] "inline" "no doc" "no return value for void"
  {
    const rl[92584] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
    unknown call_tmp[633169] "expr temp" "maybe param" "maybe type" "temp"
    (633172 'move' call_tmp[633169](92567 call _instance _mt[243] rootLocale[91511]))
    unknown call_tmp[633174] "expr temp" "maybe param" "maybe type" "temp"
    (633177 'move' call_tmp[633174](92573 call _cast borrowed RootLocale?[415429] call_tmp[633169]))
    unknown call_tmp[633179] "expr temp" "maybe param" "maybe type" "temp"
    (633182 'move' call_tmp[633179](92575 call postfix! call_tmp[633174]))
    unknown call_tmp[633186] "expr temp" "maybe param" "maybe type" "temp"
    (633189 'move' call_tmp[633186](92583 call(92579 call (partial) getDefaultLocaleArray _mt[243] call_tmp[633179])))
    (541713 'move' rl[92584](541712 'addr of' call_tmp[633186]))
    (92587 'end of statement')
    unknown call_tmp[633193] "expr temp" "maybe param" "maybe type" "temp"
    (633196 'move' call_tmp[633193](92590 call _instance _mt[243] defaultLocale[89953]))
    unknown call_tmp[633198] "expr temp" "maybe param" "maybe type" "temp"
    (633201 'move' call_tmp[633198](92596 call rl[92584] 0))
    unknown call_tmp[633205] "expr temp" "maybe param" "maybe type" "temp"
    (633208 'move' call_tmp[633205](92597 call _instance _mt[243] call_tmp[633198]))
    (92600 call = call_tmp[633193] call_tmp[633205])
    (477405 'end of statement' rl[92584])
    (514090 return _void[55])
  }
  function chpl_rootLocaleInitPrivate[92609](arg locIdx[92607]:_any[178](?)) : _unknown[51] "no doc" "no return value for void"
  {
    (92613 call = rootLocale[91511] origRootLocale[91521])
    (477407 'end of statement')
    unknown tmp[422448] "maybe param" "temp"
    (422459 'move' tmp[422448] replicateRootLocale[91516])
    unknown call_tmp[633210] "expr temp" "maybe param" "maybe type" "temp"
    (633213 'move' call_tmp[633210](422461 call _cond_invalid tmp[422448]))
    if call_tmp[633210]
    {
      (422464 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[561170] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[561171] "maybe param" "temp"
    unknown call_tmp[633215] "expr temp" "maybe param" "maybe type" "temp"
    (633218 'move' call_tmp[633215](422449 call isTrue tmp[422448]))
    (561176 'move' tmp[561171](561174 call _cond_test call_tmp[633215]))
    if tmp[561171]
    {
      unknown tmp[561178] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[633220] "expr temp" "maybe param" "maybe type" "temp"
      (633223 'move' call_tmp[633220](92620 call != locIdx[92607] 0))
      (561180 'move' tmp[561178](422452 call isTrue call_tmp[633220]))
      (561185 'move' tmp[561170](561182 '_paramFoldLogical' tmp[561171] tmp[561178]))
    }
    {
      (561190 'move' tmp[561170](561187 '_paramFoldLogical' tmp[561171] 0))
    }
    unknown call_tmp[633225] "expr temp" "maybe param" "maybe type" "temp"
    (633228 'move' call_tmp[633225](92727 call _cond_test tmp[561170]))
    if call_tmp[633225]
    {
      unknown call_tmp[633230] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (633233 'move' call_tmp[633230](747821 'new' RootLocale[377872](?)(_chpl_manager = unmanaged[220](?))))
      unknown newRootLocale[92630] "dead at end of block" "insert auto destroy"
      (541715 'init var' newRootLocale[92630] call_tmp[633230])
      (92633 'end of statement')
      const origLocales[92651] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
      unknown call_tmp[633237] "expr temp" "maybe param" "maybe type" "temp"
      (633240 'move' call_tmp[633237](92636 call _instance _mt[243] origRootLocale[91521]))
      unknown call_tmp[633242] "expr temp" "maybe param" "maybe type" "temp"
      (633245 'move' call_tmp[633242](92642 call _cast borrowed RootLocale?[415429] call_tmp[633237]))
      unknown call_tmp[633247] "expr temp" "maybe param" "maybe type" "temp"
      (633250 'move' call_tmp[633247](92644 call postfix! call_tmp[633242]))
      unknown call_tmp[633254] "expr temp" "maybe param" "maybe type" "temp"
      (633257 'move' call_tmp[633254](92650 call(92646 call (partial) getDefaultLocaleArray _mt[243] call_tmp[633247])))
      (541718 'move' origLocales[92651](541717 'addr of' call_tmp[633254]))
      (92654 'end of statement')
      unknown call_tmp[633261] "expr temp" "maybe param" "maybe type" "temp"
      (633264 'move' call_tmp[633261](92656 call _value _mt[243] origLocales[92651]))
      unknown call_tmp[633268] "maybe param" "maybe type" "temp"
      (633271 'move' call_tmp[633268](92661 call theData _mt[243] call_tmp[633261]))
      unknown origRL[92664] "dead at end of block" "insert auto destroy"
      (541720 'init var' origRL[92664] call_tmp[633268])
      (92667 'end of statement')
      unknown call_tmp[633275] "expr temp" "maybe param" "maybe type" "temp"
      (633278 'move' call_tmp[633275](92673 call(92669 call (partial) getDefaultLocaleArray _mt[243] newRootLocale[92630])))
      unknown call_tmp[633282] "expr temp" "maybe param" "maybe type" "temp"
      (633285 'move' call_tmp[633282](92674 call _value _mt[243] call_tmp[633275]))
      unknown call_tmp[633289] "maybe param" "maybe type" "temp"
      (633292 'move' call_tmp[633289](92677 call theData _mt[243] call_tmp[633282]))
      unknown newRL[92680] "dead at end of block" "insert auto destroy"
      (541722 'init var' newRL[92680] call_tmp[633289])
      (92683 'end of statement' origLocales[92651] newRootLocale[92630])
      unknown call_tmp[633294] "expr temp" "maybe param" "maybe type" "temp"
      (633297 'move' call_tmp[633294](92706 'array_get' newRL[92680] 0))
      unknown call_tmp[633299] "expr temp" "maybe param" "maybe type" "temp"
      (633302 'move' call_tmp[633299](92712 'array_get' origRL[92664] 0))
      unknown call_tmp[633304] "expr temp" "maybe param" "maybe type" "temp"
      (633307 'move' call_tmp[633304](92715 call _cast size_t[20654] numLocales[209834]))
      (92717 'chpl_comm_array_get' call_tmp[633294] 0 call_tmp[633299] call_tmp[633304])
      (477411 'end of statement' newRL[92680] origRL[92664])
      unknown call_tmp[633311] "expr temp" "maybe param" "maybe type" "temp"
      (633314 'move' call_tmp[633311](92720 call _instance _mt[243] rootLocale[91511]))
      (92724 call = call_tmp[633311] newRootLocale[92630])
      (477414 'end of statement' newRootLocale[92630])
    }
    unknown call_tmp[633316] "expr temp" "maybe param" "maybe type" "temp"
    (633319 'move' call_tmp[633316](92733 call != locIdx[92607] 0))
    unknown call_tmp[633321] "expr temp" "maybe param" "maybe type" "temp"
    (633324 'move' call_tmp[633321](92778 call _cond_test call_tmp[633316]))
    if call_tmp[633321]
    {
      const tmp[92751] "dead at end of block" "const" "no auto destroy" "ref var"
      unknown call_tmp[633328] "expr temp" "maybe param" "maybe type" "temp"
      (633331 'move' call_tmp[633328](92736 call _instance _mt[243] rootLocale[91511]))
      unknown call_tmp[633333] "expr temp" "maybe param" "maybe type" "temp"
      (633336 'move' call_tmp[633333](92742 call _cast borrowed RootLocale?[415429] call_tmp[633328]))
      unknown call_tmp[633338] "expr temp" "maybe param" "maybe type" "temp"
      (633341 'move' call_tmp[633338](92744 call postfix! call_tmp[633333]))
      unknown call_tmp[633345] "expr temp" "maybe param" "maybe type" "temp"
      (633348 'move' call_tmp[633345](92750 call(92746 call (partial) getDefaultLocaleArray _mt[243] call_tmp[633338])))
      (541725 'move' tmp[92751](541724 'addr of' call_tmp[633345]))
      (92754 'end of statement')
      (92776 'move' Locales[113656] tmp[92751])
      (477416 'end of statement' tmp[92751])
    }
    (92784 call = rootLocaleInitialized[310] 1)
    (514092 return _void[55])
  }
  function chpl_task_getRequestedSubloc[92791]() : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free" "no return value for void"
  {
    unknown ret[514096] "RVV" "temp"
    (514098 return ret[514096])
  }
  { scopeless type
    chpl_sublocID_t[89866]
  }
  function chpl_getLocaleID[92803](ref arg localeID[92800]:chpl_localeID_t[209294]) : _unknown[51] "export" "insert line file info" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633350] "expr temp" "maybe param" "maybe type" "temp"
    (633353 'move' call_tmp[633350](377946 call here_id[92815]))
    (92807 call = localeID[92800] call_tmp[633350])
    (514100 return _void[55])
  }
  function here_id[92815]() : _unknown[51] "inline" "no doc" "no parens"
  {
    unknown ret[514104] "RVV" "temp"
    unknown call_tmp[633355] "expr temp" "maybe param" "maybe type" "temp"
    (633358 'move' call_tmp[633355](92834 call _cond_test localeModelHasSublocales[187403]))
    if call_tmp[633355]
    {
      unknown call_tmp[633360] "expr temp" "maybe param" "maybe type" "temp"
      (633363 'move' call_tmp[633360](92823 call chpl_task_getRequestedSubloc))
      unknown call_tmp[633365] "expr temp" "maybe param" "maybe type" "temp"
      (633368 'move' call_tmp[633365](92824 call chpl_rt_buildLocaleID chpl_nodeID[208152] call_tmp[633360]))
      (514109 'move' ret[514104](514108 'deref' call_tmp[633365]))
      gotoReturn _end_here_id[514102] _end_here_id[514102]
    }
    {
      unknown call_tmp[633370] "expr temp" "maybe param" "maybe type" "temp"
      (633373 'move' call_tmp[633370](92831 call chpl_rt_buildLocaleID chpl_nodeID[208152] c_sublocid_any[89875]))
      (514114 'move' ret[514104](514113 'deref' call_tmp[633370]))
      gotoReturn _end_here_id[514102] _end_here_id[514102]
    }
    label _end_here_id[514102]
    (514106 return ret[514104])
  }
  function chpl_localeID_to_locale[92849](arg id[92846]:chpl_localeID_t[209294]) : _unknown[51] "no doc" "fn returns infinite lifetime"
  {
    unknown ret[514120] "RVV" "temp"
    unknown call_tmp[633377] "expr temp" "maybe param" "maybe type" "temp"
    (633380 'move' call_tmp[633377](92853 call _instance _mt[243] rootLocale[91511]))
    unknown call_tmp[633382] "expr temp" "maybe param" "maybe type" "temp"
    (633385 'move' call_tmp[633382](92857 call != call_tmp[633377] nil[44]))
    unknown call_tmp[633387] "expr temp" "maybe param" "maybe type" "temp"
    (633390 'move' call_tmp[633387](92909 call _cond_test call_tmp[633382]))
    if call_tmp[633387]
    {
      unknown call_tmp[633394] "expr temp" "maybe param" "maybe type" "temp"
      (633397 'move' call_tmp[633394](92860 call _instance _mt[243] rootLocale[91511]))
      unknown call_tmp[633399] "expr temp" "maybe param" "maybe type" "temp"
      (633402 'move' call_tmp[633399](92866 call _cast borrowed AbstractRootLocale?[415441] call_tmp[633394]))
      unknown call_tmp[633404] "expr temp" "maybe param" "maybe type" "temp"
      (633407 'move' call_tmp[633404](92868 call postfix! call_tmp[633399]))
      unknown call_tmp[633411] "expr temp" "maybe param" "maybe type" "temp"
      (633414 'move' call_tmp[633411](92877 call(92872 call (partial) localeIDtoLocale _mt[243] call_tmp[633404]) id[92846]))
      (514126 'move' ret[514120](514125 'coerce' call_tmp[633411] locale[28]))
      gotoReturn _end_chpl_localeID_to_locale[514118] _end_chpl_localeID_to_locale[514118]
    }
    {
      unknown call_tmp[633418] "expr temp" "maybe param" "maybe type" "temp"
      (633421 'move' call_tmp[633418](92881 call _instance _mt[243] dummyLocale[89967]))
      unknown call_tmp[633423] "expr temp" "maybe param" "maybe type" "temp"
      (633426 'move' call_tmp[633423](92885 call == call_tmp[633418] nil[44]))
      unknown call_tmp[633428] "expr temp" "maybe param" "maybe type" "temp"
      (633431 'move' call_tmp[633428](92901 call _cond_test call_tmp[633423]))
      if call_tmp[633428]
      {
        unknown call_tmp[633435] "expr temp" "maybe param" "maybe type" "temp"
        (633438 'move' call_tmp[633435](92888 call _instance _mt[243] dummyLocale[89967]))
        unknown call_tmp[633440] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (633443 'move' call_tmp[633440](747822 'new' DummyLocale[377805](?)(_chpl_manager = unmanaged[220](?))))
        (92897 call = call_tmp[633435] call_tmp[633440])
      }
      (514132 'move' ret[514120](514131 'coerce' dummyLocale[89967] locale[28]))
      gotoReturn _end_chpl_localeID_to_locale[514118] _end_chpl_localeID_to_locale[514118]
    }
    label _end_chpl_localeID_to_locale[514118]
    (514122 return ret[514120])
  }
  { scopeless type
    locale[28]
  }
  type chpl_privateObject_t[92925] val obj[92920]:c_void_ptr[149] c_void_ptr[149]
  unknown chpl_privateObjects[92932] "dead at end of block" "extern" "insert auto destroy" "no doc"
  function chpl_getPrivatizedCopy[92940](arg objectType[92938]:_any[178](?), arg objectPid[92943]:int(64)[13]) : _unknown[51] "inline" "no doc" "fn returns infinite lifetime"
  {
    unknown ret[514138] "RVV" "temp"
    unknown call_tmp[633450] "expr temp" "maybe param" "maybe type" "temp"
    (633453 'move' call_tmp[633450](92953 call chpl_privateObjects[92932] objectPid[92943]))
    unknown call_tmp[633457] "expr temp" "maybe param" "maybe type" "temp"
    (633460 'move' call_tmp[633457](92956 call obj _mt[243] call_tmp[633450]))
    unknown call_tmp[633462] "expr temp" "maybe param" "maybe type" "temp"
    (633465 'move' call_tmp[633462](92959 'cast' objectType[92938] call_tmp[633457]))
    (514144 'move' ret[514138](514143 'coerce' call_tmp[633462] objectType[92938]))
    (514140 return ret[514138])
  }
  { scopeless type
    objectType[92938]
  }
  function locale[28].totalThreads[92969](arg _mt[92974]:_MT[238], arg this[92971]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514154] "RVV" "temp"
    unknown totalThreads[92977] "dead at end of block" "insert auto destroy"
    (541730 'default init var' totalThreads[92977] int(64)[13])
    (92980 'end of statement')
    function chpl_task_getNumThreads[92984]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514148] "RVV" "temp"
      (514150 return ret[514148])
    }
    { scopeless type
      (92989 call uint(64)[115] 32)
    }
    const tmp[93004] "const" "temp"
    unknown call_tmp[633467] "expr temp" "maybe param" "maybe type" "temp"
    (633470 'move' call_tmp[633467](93001 '_wide_get_locale' this[92971]))
    (93006 'move' tmp[93004](93002 'deref' call_tmp[633467]))
    {
      unknown call_tmp[633472] "expr temp" "maybe param" "maybe type" "temp"
      (633475 'move' call_tmp[633472](92997 call chpl_task_getNumThreads))
      (92998 call = totalThreads[92977] call_tmp[633472])
      (477426 'end of statement' totalThreads[92977])
      (93009 'on block' 0 tmp[93004])
    }
    (514159 'move' ret[514154](514158 'deref' totalThreads[92977]))
    gotoReturn _end_totalThreads[514152] _end_totalThreads[514152]
    (477428 'end of statement' totalThreads[92977])
    label _end_totalThreads[514152]
    (514156 return ret[514154])
  }
  function locale[28].idleThreads[93020](arg _mt[93025]:_MT[238], arg this[93022]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514171] "RVV" "temp"
    unknown idleThreads[93028] "dead at end of block" "insert auto destroy"
    (541732 'default init var' idleThreads[93028] int(64)[13])
    (93031 'end of statement')
    function chpl_task_getNumIdleThreads[93035]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514165] "RVV" "temp"
      (514167 return ret[514165])
    }
    { scopeless type
      (93040 call uint(64)[115] 32)
    }
    const tmp[93055] "const" "temp"
    unknown call_tmp[633477] "expr temp" "maybe param" "maybe type" "temp"
    (633480 'move' call_tmp[633477](93052 '_wide_get_locale' this[93022]))
    (93057 'move' tmp[93055](93053 'deref' call_tmp[633477]))
    {
      unknown call_tmp[633482] "expr temp" "maybe param" "maybe type" "temp"
      (633485 'move' call_tmp[633482](93048 call chpl_task_getNumIdleThreads))
      (93049 call = idleThreads[93028] call_tmp[633482])
      (477430 'end of statement' idleThreads[93028])
      (93060 'on block' 0 tmp[93055])
    }
    (514176 'move' ret[514171](514175 'deref' idleThreads[93028]))
    gotoReturn _end_idleThreads[514169] _end_idleThreads[514169]
    (477432 'end of statement' idleThreads[93028])
    label _end_idleThreads[514169]
    (514173 return ret[514171])
  }
  function locale[28].queuedTasks[93071](arg _mt[93076]:_MT[238], arg this[93073]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514188] "RVV" "temp"
    unknown queuedTasks[93079] "dead at end of block" "insert auto destroy"
    (541734 'default init var' queuedTasks[93079] int(64)[13])
    (93082 'end of statement')
    function chpl_task_getNumQueuedTasks[93086]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514182] "RVV" "temp"
      (514184 return ret[514182])
    }
    { scopeless type
      (93091 call uint(64)[115] 32)
    }
    const tmp[93106] "const" "temp"
    unknown call_tmp[633487] "expr temp" "maybe param" "maybe type" "temp"
    (633490 'move' call_tmp[633487](93103 '_wide_get_locale' this[93073]))
    (93108 'move' tmp[93106](93104 'deref' call_tmp[633487]))
    {
      unknown call_tmp[633492] "expr temp" "maybe param" "maybe type" "temp"
      (633495 'move' call_tmp[633492](93099 call chpl_task_getNumQueuedTasks))
      (93100 call = queuedTasks[93079] call_tmp[633492])
      (477434 'end of statement' queuedTasks[93079])
      (93111 'on block' 0 tmp[93106])
    }
    (514193 'move' ret[514188](514192 'deref' queuedTasks[93079]))
    gotoReturn _end_queuedTasks[514186] _end_queuedTasks[514186]
    (477436 'end of statement' queuedTasks[93079])
    label _end_queuedTasks[514186]
    (514190 return ret[514188])
  }
  function locale[28].runningTasks[93122](arg _mt[93127]:_MT[238], arg this[93124]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc" "fn synchronization free"
  {
    unknown ret[514199] "RVV" "temp"
    unknown call_tmp[633499] "expr temp" "maybe param" "maybe type" "temp"
    (633502 'move' call_tmp[633499](93136 call(93132 call (partial) runningTaskCnt _mt[243] this[93124])))
    (514204 'move' ret[514199](514203 'deref' call_tmp[633499]))
    (514201 return ret[514199])
  }
  function locale[28].blockedTasks[93145](arg _mt[93150]:_MT[238], arg this[93147]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514214] "RVV" "temp"
    unknown blockedTasks[93153] "dead at end of block" "insert auto destroy"
    (541736 'default init var' blockedTasks[93153] int(64)[13])
    (93156 'end of statement')
    function chpl_task_getNumBlockedTasks[93160]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514208] "RVV" "temp"
      (514210 return ret[514208])
    }
    { scopeless type
      (93165 call int(64)[13] 32)
    }
    const tmp[93180] "const" "temp"
    unknown call_tmp[633504] "expr temp" "maybe param" "maybe type" "temp"
    (633507 'move' call_tmp[633504](93177 '_wide_get_locale' this[93147]))
    (93182 'move' tmp[93180](93178 'deref' call_tmp[633504]))
    {
      unknown call_tmp[633509] "expr temp" "maybe param" "maybe type" "temp"
      (633512 'move' call_tmp[633509](93173 call chpl_task_getNumBlockedTasks))
      (93174 call = blockedTasks[93153] call_tmp[633509])
      (477439 'end of statement' blockedTasks[93153])
      (93185 'on block' 0 tmp[93180])
    }
    (514219 'move' ret[514214](514218 'deref' blockedTasks[93153]))
    gotoReturn _end_blockedTasks[514212] _end_blockedTasks[514212]
    (477441 'end of statement' blockedTasks[93153])
    label _end_blockedTasks[514212]
    (514216 return ret[514214])
  }
  function chpl_taskRunningCntInc[93195]() : _unknown[51] "export" "insert line file info" "inc running task" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633514] "expr temp" "maybe param" "maybe type" "temp"
    (633517 'move' call_tmp[633514](93207 call _cond_test rootLocaleInitialized[310]))
    if call_tmp[633514]
    {
      unknown call_tmp[633519] "expr temp" "maybe param" "maybe type" "temp"
      (633522 'move' call_tmp[633519](358479 call here[90435]))
      (93204 call(93199 call (partial) runningTaskCntAdd _mt[243] call_tmp[633519]) 1)
    }
    (514223 return _void[55])
  }
  function chpl_taskRunningCntDec[93216]() : _unknown[51] "export" "insert line file info" "dec running task" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633526] "expr temp" "maybe param" "maybe type" "temp"
    (633529 'move' call_tmp[633526](93228 call _cond_test rootLocaleInitialized[310]))
    if call_tmp[633526]
    {
      unknown call_tmp[633531] "expr temp" "maybe param" "maybe type" "temp"
      (633534 'move' call_tmp[633531](358481 call here[90435]))
      (93225 call(93220 call (partial) runningTaskCntSub _mt[243] call_tmp[633531]) 1)
    }
    (514225 return _void[55])
  }
  function chpl_taskRunningCntReset[93237]() : _unknown[51] "export" "insert line file info" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633538] "expr temp" "maybe param" "maybe type" "temp"
    (633541 'move' call_tmp[633538](358483 call here[90435]))
    (93247 call(93242 call (partial) runningTaskCntSet _mt[243] call_tmp[633538]) 0)
    (514227 return _void[55])
  }
  (355077 'used modules list'(89846 'use' LocaleModel[88726])(89850 'import' HaltWrappers[209998])(89853 'use' SysCTypes[20940]))
}