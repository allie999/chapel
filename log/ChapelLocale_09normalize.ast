AST dump for ChapelLocale after pass normalize.
Module use list: LocaleModel HaltWrappers SysCTypes 

{
  function chpl__init_ChapelLocale[416015]() : void[4] "insert line file info" "module init"
  {
    (541709 'move' chpl_nodeID_t[89862](541707 call int(64)[13] 32))
    (541714 'move' chpl_sublocID_t[89869](541712 call int(64)[13] 32))
    { scopeless type extern
      (541716 'default init var' c_sublocid_none[89873] chpl_sublocID_t[89869])
    }
    (89876 'end of statement')
    { scopeless type extern
      (541719 'default init var' c_sublocid_any[89878] chpl_sublocID_t[89869])
    }
    (89881 'end of statement')
    { scopeless type extern
      (541722 'default init var' c_sublocid_all[89883] chpl_sublocID_t[89869])
    }
    (89886 'end of statement')
    {
    }
    unknown call_tmp[632382] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632385 'move' call_tmp[632382](747874 'new' locale[28] nilLocale[89921]))
    (541725 'init var' nilLocale[89942] call_tmp[632382])
    (89945 'end of statement')
    unknown call_tmp[632387] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632390 'move' call_tmp[632387](747875 'new' locale[28] default[89925]))
    (541727 'init var' defaultLocale[89956] call_tmp[632387])
    (89959 'end of statement')
    unknown call_tmp[632392] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632395 'move' call_tmp[632392](747876 'new' locale[28] dummy[89923]))
    (541729 'init var' dummyLocale[89970] call_tmp[632392])
    (89973 'end of statement')
    (541745 'init var' rootLocale[91514] nilLocale[89942])
    (91517 'end of statement')
    (541747 'init var' replicateRootLocale[91519] 1)
    (91522 'end of statement')
    (541749 'init var' origRootLocale[91524] nilLocale[89942])
    (91527 'end of statement')
    { scopeless type extern
      unknown call_tmp[633500] "expr temp" "maybe param" "maybe type" "temp"
      (633503 'move' call_tmp[633500](92934 call c_ptr[205100](?) chpl_privateObject_t[92928]))
      (541782 'default init var' chpl_privateObjects[92935] call_tmp[633500])
    }
    (92938 'end of statement' chpl_sublocID_t[89869] chpl_sublocID_t[89869] chpl_sublocID_t[89869] nilLocale[89942] nilLocale[89942])
    (514275 return _void[55])
  }
  function chpl__deinit_ChapelLocale[93257]() : _unknown[51] "no doc" "no return value for void"
  {
    unknown call_tmp[633602] "expr temp" "maybe param" "maybe type" "temp"
    (633605 'move' call_tmp[633602](93260 call _instance _mt[243] origRootLocale[91524]))
    (93264 call chpl__delete call_tmp[633602])
    (477491 'end of statement')
    unknown call_tmp[633609] "expr temp" "maybe param" "maybe type" "temp"
    (633612 'move' call_tmp[633609](93269 call _instance _mt[243] dummyLocale[89970]))
    (93273 call chpl__delete call_tmp[633609])
    (514277 return _void[55])
  }
  unknown chpl_nodeID_t[89862] "dead at end of block" "insert auto destroy" "no doc" "type variable"(89861 call int(64)[13] 32)
  unknown chpl_sublocID_t[89869] "dead at end of block" "insert auto destroy" "no doc" "type variable"(89868 call int(64)[13] 32)
  const c_sublocid_none[89873] "dead at end of block" "const" "extern" "insert auto destroy" "no doc"
  const c_sublocid_any[89878] "dead at end of block" "const" "extern" "insert auto destroy" "no doc"
  const c_sublocid_all[89883] "dead at end of block" "const" "extern" "insert auto destroy" "no doc"
  function chpl_isActualSublocID[89893](arg subloc[89890] :
  chpl_sublocID_t[89869]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[513674] "RVV" "temp"
    unknown tmp[422344] "maybe param" "temp"
    unknown tmp[422365] "maybe param" "temp"
    (422376 'move' tmp[422365](89897 call != subloc[89890] c_sublocid_none[89873]))
    unknown call_tmp[632352] "expr temp" "maybe param" "maybe type" "temp"
    (632355 'move' call_tmp[632352](422378 call _cond_invalid tmp[422365]))
    if call_tmp[632352]
    {
      (422381 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560928] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560929] "maybe param" "temp"
    unknown call_tmp[632357] "expr temp" "maybe param" "maybe type" "temp"
    (632360 'move' call_tmp[632357](422366 call isTrue tmp[422365]))
    (560934 'move' tmp[560929](560932 call _cond_test call_tmp[632357]))
    if tmp[560929]
    {
      unknown tmp[560936] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[632362] "expr temp" "maybe param" "maybe type" "temp"
      (632365 'move' call_tmp[632362](89901 call != subloc[89890] c_sublocid_any[89878]))
      (560938 'move' tmp[560936](422369 call isTrue call_tmp[632362]))
      (560943 'move' tmp[560928](560940 '_paramFoldLogical' tmp[560929] tmp[560936]))
    }
    {
      (560948 'move' tmp[560928](560945 '_paramFoldLogical' tmp[560929] 0))
    }
    (422355 'move' tmp[422344] tmp[560928])
    unknown call_tmp[632367] "expr temp" "maybe param" "maybe type" "temp"
    (632370 'move' call_tmp[632367](422357 call _cond_invalid tmp[422344]))
    if call_tmp[632367]
    {
      (422360 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[560955] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[560956] "maybe param" "temp"
    unknown call_tmp[632372] "expr temp" "maybe param" "maybe type" "temp"
    (632375 'move' call_tmp[632372](422345 call isTrue tmp[422344]))
    (560961 'move' tmp[560956](560959 call _cond_test call_tmp[632372]))
    if tmp[560956]
    {
      unknown tmp[560963] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[632377] "expr temp" "maybe param" "maybe type" "temp"
      (632380 'move' call_tmp[632377](89907 call != subloc[89890] c_sublocid_all[89883]))
      (560965 'move' tmp[560963](422348 call isTrue call_tmp[632377]))
      (560970 'move' tmp[560955](560967 '_paramFoldLogical' tmp[560956] tmp[560963]))
    }
    {
      (560975 'move' tmp[560955](560972 '_paramFoldLogical' tmp[560956] 0))
    }
    (513679 'move' ret[513674](513678 'deref' tmp[560955]))
    (513676 return ret[513674])
  }
  type localeKind[89927] def regular[89917]:localeKind[89927] def any[89919]:localeKind[89927] def nilLocale[89921]:localeKind[89927] def dummy[89923]:localeKind[89927] def default[89925]:localeKind[89927]
  const nilLocale[89942] "dead at end of block" "const" "insert auto destroy" "locale private" "no doc"
  unknown defaultLocale[89956] "dead at end of block" "insert auto destroy" "locale private" "no doc"
  unknown dummyLocale[89970] "dead at end of block" "insert auto destroy" "no doc"
  function locale[28]._value[89984](arg _mt[90373]:_MT[238], arg this[90371]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[513683] "RVV" "temp"
    unknown call_tmp[632399] "expr temp" "maybe param" "maybe type" "temp"
    (632402 'move' call_tmp[632399](377835 call _instance _mt[243] this[90371]))
    unknown call_tmp[632404] "expr temp" "maybe param" "maybe type" "temp"
    (632407 'move' call_tmp[632404](89987 call postfix! call_tmp[632399]))
    (513688 'move' ret[513683](513687 'deref' call_tmp[632404]))
    (513685 return ret[513683])
  }
  function locale[28].chpl_forwarding_expr3__value[89995](arg _mt[90377]:_MT[238], arg this[90375]:locale[28]) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[513692] "RVV" "temp"
    (513696 'move' ret[513692](377839 call _value _mt[243] this[90375]))
    (513694 return ret[513692])
  }
  function locale[28].init[90003](arg _mt[90381]:_MT[238], ref arg this[90379]:locale[28]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632411] "expr temp" "maybe param" "maybe type" "temp"
    (632414 'move' call_tmp[632411](90027 call _cond_test rootLocaleInitialized[310]))
    if call_tmp[632411]
    {
      unknown call_tmp[632418] "maybe param" "maybe type" "temp"
      (632421 'move' call_tmp[632418](90011 call _instance _mt[243] defaultLocale[89956]))
      unknown tmp[460417] "temp"
      (460420 'init var' tmp[460417] call_tmp[632418] unmanaged BaseLocale?[415466])
      (460422 'init field' this[90379] c"_instance" tmp[460417])
      (477244 'end of statement')
    }
    {
      unknown tmp[460426] "temp"
      (460429 'init var' tmp[460426] nil[44] unmanaged BaseLocale?[415466])
      (460431 'init field' this[90379] c"_instance" tmp[460426])
      (477245 'end of statement')
    }
    (513698 return _void[55])
  }
  function locale[28].init[90040](arg _mt[90385]:_MT[238], ref arg this[90383]:locale[28], arg _instance[90037]:BaseLocale[377830](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632423] "maybe param" "maybe type" "temp"
    (632426 'move' call_tmp[632423](90049 call _to_unmanaged _instance[90037]))
    unknown tmp[460435] "temp"
    (460438 'init var' tmp[460435] call_tmp[632423] unmanaged BaseLocale?[415466])
    (460440 'init field' this[90383] c"_instance" tmp[460435])
    (477246 'end of statement')
    (513700 return _void[55])
  }
  function locale[28].init[90060](arg _mt[90389]:_MT[238], ref arg this[90387]:locale[28], param arg kind[90058]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632428] "expr temp" "maybe param" "maybe type" "temp"
    (632431 'move' call_tmp[632428](90069 call == kind[90058] regular[89917]))
    unknown call_tmp[632433] "expr temp" "maybe param" "maybe type" "temp"
    (632436 'move' call_tmp[632433](90155 call _cond_test call_tmp[632428]))
    if call_tmp[632433]
    {
      (90107 call compilerError "locale.init(kind) can not be used to create " "a regular locale instance")
      (477247 'end of statement')
      val tmp[460474]:unmanaged BaseLocale?[415466] "temp"
      (460477 'default init var' tmp[460474] unmanaged BaseLocale?[415466])
      (460479 '.=' this[90387] c"_instance" tmp[460474])
      (477248 'end of statement')
    }
    {
      unknown call_tmp[632438] "expr temp" "maybe param" "maybe type" "temp"
      (632441 'move' call_tmp[632438](90114 call == kind[90058] dummy[89923]))
      unknown call_tmp[632443] "expr temp" "maybe param" "maybe type" "temp"
      (632446 'move' call_tmp[632443](90149 call _cond_test call_tmp[632438]))
      if call_tmp[632443]
      {
        unknown call_tmp[632448] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (632451 'move' call_tmp[632448](747877 'new' DummyLocale[377848](?)(_chpl_manager = unmanaged[220](?))))
        unknown tmp[460444] "temp"
        (460447 'init var' tmp[460444] call_tmp[632448] unmanaged BaseLocale?[415466])
        (460449 'init field' this[90387] c"_instance" tmp[460444])
        (477249 'end of statement')
      }
      {
        unknown call_tmp[632453] "expr temp" "maybe param" "maybe type" "temp"
        (632456 'move' call_tmp[632453](90134 call == kind[90058] default[89925]))
        unknown call_tmp[632458] "expr temp" "maybe param" "maybe type" "temp"
        (632461 'move' call_tmp[632458](90144 call _cond_test call_tmp[632453]))
        if call_tmp[632458]
        {
          unknown tmp[460453] "temp"
          (460456 'init var' tmp[460453] nil[44] unmanaged BaseLocale?[415466])
          (460458 'init field' this[90387] c"_instance" tmp[460453])
          (477250 'end of statement')
        }
        {
          val tmp[460464]:unmanaged BaseLocale?[415466] "temp"
          (460467 'default init var' tmp[460464] unmanaged BaseLocale?[415466])
          (460469 '.=' this[90387] c"_instance" tmp[460464])
          (477251 'end of statement')
        }
      }
    }
    (513702 return _void[55])
  }
  function locale[28].init=[90170](arg _mt[90393]:_MT[238], ref arg this[90391]:locale[28], arg other[90167]:locale[28]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[632465] "maybe param" "maybe type" "temp"
    (632468 'move' call_tmp[632465](90177 call _instance _mt[243] other[90167]))
    unknown tmp[460483] "temp"
    (460486 'init var' tmp[460483] call_tmp[632465] unmanaged BaseLocale?[415466])
    (460488 'init field' this[90391] c"_instance" tmp[460483])
    (477252 'end of statement')
    (513704 return _void[55])
  }
  function locale[28].deinit[90188](arg _mt[90397]:_MT[238], arg this[90395]:locale[28]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (513706 return _void[55])
  }
  function locale[28].localeid[90195](arg _mt[90401]:_MT[238], arg this[90399]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[513710] "RVV" "temp"
    unknown call_tmp[632472] "expr temp" "maybe param" "maybe type" "temp"
    (632475 'move' call_tmp[632472](90198 call _value _mt[243] this[90399]))
    unknown call_tmp[632479] "expr temp" "maybe param" "maybe type" "temp"
    (632482 'move' call_tmp[632479](90203 call localeid _mt[243] call_tmp[632472]))
    (513715 'move' ret[513710](513714 'deref' call_tmp[632479]))
    (513712 return ret[513710])
  }
  function locale[28].chpl_id[90213](arg _mt[90405]:_MT[238], arg this[90403]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513719] "RVV" "temp"
    unknown call_tmp[632486] "expr temp" "maybe param" "maybe type" "temp"
    (632489 'move' call_tmp[632486](90216 call _value _mt[243] this[90403]))
    unknown call_tmp[632493] "expr temp" "maybe param" "maybe type" "temp"
    (632496 'move' call_tmp[632493](90225 call(90221 call (partial) chpl_id _mt[243] call_tmp[632486])))
    (513724 'move' ret[513719](513723 'deref' call_tmp[632493]))
    (513721 return ret[513719])
  }
  function locale[28].chpl_localeid[90233](arg _mt[90409]:_MT[238], arg this[90407]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513728] "RVV" "temp"
    unknown call_tmp[632500] "expr temp" "maybe param" "maybe type" "temp"
    (632503 'move' call_tmp[632500](90236 call _value _mt[243] this[90407]))
    unknown call_tmp[632507] "expr temp" "maybe param" "maybe type" "temp"
    (632510 'move' call_tmp[632507](90245 call(90241 call (partial) chpl_localeid _mt[243] call_tmp[632500])))
    (513733 'move' ret[513728](513732 'deref' call_tmp[632507]))
    (513730 return ret[513728])
  }
  function locale[28].chpl_name[90253](arg _mt[90413]:_MT[238], arg this[90411]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513737] "RVV" "temp"
    unknown call_tmp[632514] "expr temp" "maybe param" "maybe type" "temp"
    (632517 'move' call_tmp[632514](90256 call _value _mt[243] this[90411]))
    unknown call_tmp[632521] "expr temp" "maybe param" "maybe type" "temp"
    (632524 'move' call_tmp[632521](90265 call(90261 call (partial) chpl_name _mt[243] call_tmp[632514])))
    (513742 'move' ret[513737](513741 'deref' call_tmp[632521]))
    (513739 return ret[513737])
  }
  function locale[28].defaultMemory[90273](arg _mt[90417]:_MT[238], arg this[90415]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513746] "RVV" "temp"
    unknown call_tmp[632528] "expr temp" "maybe param" "maybe type" "temp"
    (632531 'move' call_tmp[632528](90276 call _value _mt[243] this[90415]))
    unknown call_tmp[632535] "expr temp" "maybe param" "maybe type" "temp"
    (632538 'move' call_tmp[632535](90285 call(90281 call (partial) defaultMemory _mt[243] call_tmp[632528])))
    (513751 'move' ret[513746](513750 'deref' call_tmp[632535]))
    (513748 return ret[513746])
  }
  function locale[28].largeMemory[90293](arg _mt[90421]:_MT[238], arg this[90419]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513755] "RVV" "temp"
    unknown call_tmp[632542] "expr temp" "maybe param" "maybe type" "temp"
    (632545 'move' call_tmp[632542](90296 call _value _mt[243] this[90419]))
    unknown call_tmp[632549] "expr temp" "maybe param" "maybe type" "temp"
    (632552 'move' call_tmp[632549](90305 call(90301 call (partial) largeMemory _mt[243] call_tmp[632542])))
    (513760 'move' ret[513755](513759 'deref' call_tmp[632549]))
    (513757 return ret[513755])
  }
  function locale[28].lowLatencyMemory[90313](arg _mt[90425]:_MT[238], arg this[90423]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513764] "RVV" "temp"
    unknown call_tmp[632556] "expr temp" "maybe param" "maybe type" "temp"
    (632559 'move' call_tmp[632556](90316 call _value _mt[243] this[90423]))
    unknown call_tmp[632563] "expr temp" "maybe param" "maybe type" "temp"
    (632566 'move' call_tmp[632563](90325 call(90321 call (partial) lowLatencyMemory _mt[243] call_tmp[632556])))
    (513769 'move' ret[513764](513768 'deref' call_tmp[632563]))
    (513766 return ret[513764])
  }
  function locale[28].highBandwidthMemory[90333](arg _mt[90429]:_MT[238], arg this[90427]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513773] "RVV" "temp"
    unknown call_tmp[632570] "expr temp" "maybe param" "maybe type" "temp"
    (632573 'move' call_tmp[632570](90336 call _value _mt[243] this[90427]))
    unknown call_tmp[632577] "expr temp" "maybe param" "maybe type" "temp"
    (632580 'move' call_tmp[632577](90345 call(90341 call (partial) highBandwidthMemory _mt[243] call_tmp[632570])))
    (513778 'move' ret[513773](513777 'deref' call_tmp[632577]))
    (513775 return ret[513773])
  }
  function locale[28].getChildCount[90353](arg _mt[90433]:_MT[238], arg this[90431]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513782] "RVV" "temp"
    unknown call_tmp[632584] "expr temp" "maybe param" "maybe type" "temp"
    (632587 'move' call_tmp[632584](90356 call _value _mt[243] this[90431]))
    unknown call_tmp[632591] "expr temp" "maybe param" "maybe type" "temp"
    (632594 'move' call_tmp[632591](90363 call(90359 call (partial) getChildCount _mt[243] call_tmp[632584])))
    (513787 'move' ret[513782](513786 'deref' call_tmp[632591]))
    (513784 return ret[513782])
  }
  type locale[28] val _instance[89978]:unmanaged BaseLocale?[415466] unmanaged BaseLocale?[415466] forwarding ( )
  function here[90438]() : _unknown[51] "inline" "no parens"
  {
    unknown ret[513791] "RVV" "temp"
    unknown call_tmp[632596] "expr temp" "maybe param" "maybe type" "temp"
    (632599 'move' call_tmp[632596](377852 call here_id[92818]))
    unknown call_tmp[632601] "expr temp" "maybe param" "maybe type" "temp"
    (632604 'move' call_tmp[632601](90443 call chpl_localeID_to_locale call_tmp[632596]))
    (513796 'move' ret[513791](513795 'deref' call_tmp[632601]))
    (513793 return ret[513791])
  }
  function locale[28].hostname[90452](arg _mt[90457]:_MT[238], arg this[90454]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513800] "RVV" "temp"
    (90478 call writeln "in locale.hostname line 212")
    (477263 'end of statement')
    unknown call_tmp[632608] "expr temp" "maybe param" "maybe type" "temp"
    (632611 'move' call_tmp[632608](90482 call _value _mt[243] this[90454]))
    unknown call_tmp[632615] "expr temp" "maybe param" "maybe type" "temp"
    (632618 'move' call_tmp[632615](90487 call hostname _mt[243] call_tmp[632608]))
    (513805 'move' ret[513800](513804 'deref' call_tmp[632615]))
    (513802 return ret[513800])
  }
  function locale[28].name[90497](arg _mt[90502]:_MT[238], arg this[90499]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513809] "RVV" "temp"
    unknown call_tmp[632622] "expr temp" "maybe param" "maybe type" "temp"
    (632625 'move' call_tmp[632622](90505 call _value _mt[243] this[90499]))
    unknown call_tmp[632629] "expr temp" "maybe param" "maybe type" "temp"
    (632632 'move' call_tmp[632629](90510 call name _mt[243] call_tmp[632622]))
    (513814 'move' ret[513809](513813 'deref' call_tmp[632629]))
    (513811 return ret[513809])
  }
  function locale[28].id[90521](arg _mt[90526]:_MT[238], arg this[90523]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513818] "RVV" "temp"
    unknown call_tmp[632636] "expr temp" "maybe param" "maybe type" "temp"
    (632639 'move' call_tmp[632636](90529 call _value _mt[243] this[90523]))
    unknown call_tmp[632643] "expr temp" "maybe param" "maybe type" "temp"
    (632646 'move' call_tmp[632643](90534 call id _mt[243] call_tmp[632636]))
    (513823 'move' ret[513818](513822 'deref' call_tmp[632643]))
    (513820 return ret[513818])
  }
  function locale[28].maxTaskPar[90545](arg _mt[90550]:_MT[238], arg this[90547]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513827] "RVV" "temp"
    unknown call_tmp[632650] "expr temp" "maybe param" "maybe type" "temp"
    (632653 'move' call_tmp[632650](90553 call _value _mt[243] this[90547]))
    unknown call_tmp[632657] "expr temp" "maybe param" "maybe type" "temp"
    (632660 'move' call_tmp[632657](90556 call maxTaskPar _mt[243] call_tmp[632650]))
    (513832 'move' ret[513827](513831 'deref' call_tmp[632657]))
    (513829 return ret[513827])
  }
  function locale[28].numPUs[90573](arg _mt[90584]:_MT[238], arg this[90581]:locale[28] :
  locale[28], arg logical[90569]:bool[10] =
  0, arg accessible[90577]:bool[10] =
  1) : _unknown[51] "inline" "method"
  {
    unknown ret[513836] "RVV" "temp"
    unknown call_tmp[632664] "expr temp" "maybe param" "maybe type" "temp"
    (632667 'move' call_tmp[632664](90587 call _value _mt[243] this[90581]))
    unknown call_tmp[632671] "expr temp" "maybe param" "maybe type" "temp"
    (632674 'move' call_tmp[632671](90598 call(90592 call (partial) numPUs _mt[243] call_tmp[632664]) logical[90569] accessible[90577]))
    (513841 'move' ret[513836](513840 'deref' call_tmp[632671]))
    (513838 return ret[513836])
  }
  function locale[28].callStackSize[90607](arg _mt[90612]:_MT[238], arg this[90609]:locale[28] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[513845] "RVV" "temp"
    unknown call_tmp[632678] "expr temp" "maybe param" "maybe type" "temp"
    (632681 'move' call_tmp[632678](90615 call _value _mt[243] this[90609]))
    unknown call_tmp[632685] "expr temp" "maybe param" "maybe type" "temp"
    (632688 'move' call_tmp[632685](90620 call callStackSize _mt[243] call_tmp[632678]))
    (513850 'move' ret[513845](513849 'deref' call_tmp[632685]))
    (513847 return ret[513845])
  }
  function =[90634](ref arg l1[90631]:locale[28], const  ref arg l2[90637]:locale[28]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    unknown call_tmp[632692] "expr temp" "maybe param" "maybe type" "temp"
    (632695 'move' call_tmp[632692](90641 call _instance _mt[243] l1[90631]))
    unknown call_tmp[632699] "expr temp" "maybe param" "maybe type" "temp"
    (632702 'move' call_tmp[632699](90645 call _instance _mt[243] l2[90637]))
    (90648 call = call_tmp[632692] call_tmp[632699])
    (513852 return _void[55])
  }
  function BaseLocale[91204].init[90657](arg _mt[91208]:_MT[238], arg this[91206]:BaseLocale[91204]) : void[4] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown super_tmp[460587] "temporary of super field" "temp"
    (460595 'move' super_tmp[460587](460588 '.v' this[91206] c"super"))
    (460591 call init _mt[243] super_tmp[460587])
    (477271 'end of statement')
    unknown tmp[460496] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492015] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632704] "expr temp" "maybe param" "maybe type" "temp"
      (632707 'move' call_tmp[632704](460498 '.v' this[91206] c"super"))
      (492019 'move' call_type_tmp[492015](460501 'typeof' call_tmp[632704]))
    }
    (460502 'move' tmp[460496] call_type_tmp[492015])
    unknown call_tmp[632709] "maybe param" "maybe type" "temp"
    (632712 'move' call_tmp[632709](460507 'cast' tmp[460496] this[91206]))
    unknown chpl__thisAsParent[460504] "dead at end of block" "insert auto destroy" "temp"
    (541731 'init var' chpl__thisAsParent[460504] call_tmp[632709] tmp[460496])
    (460510 'setcid' chpl__thisAsParent[460504])
    (477272 'end of statement')
    unknown tmp[460514] "temp"
    (460516 'init var' tmp[460514] nilLocale[89942])
    (460518 '.=' this[91206] c"parent" tmp[460514])
    (477273 'end of statement')
    val tmp[460522]:int(64)[13] "temp"
    (460525 'default init var' tmp[460522] int(64)[13])
    (460527 '.=' this[91206] c"nPUsLogAcc" tmp[460522])
    (477274 'end of statement')
    val tmp[460531]:int(64)[13] "temp"
    (460534 'default init var' tmp[460531] int(64)[13])
    (460536 '.=' this[91206] c"nPUsLogAll" tmp[460531])
    (477275 'end of statement')
    val tmp[460540]:int(64)[13] "temp"
    (460543 'default init var' tmp[460540] int(64)[13])
    (460545 '.=' this[91206] c"nPUsPhysAcc" tmp[460540])
    (477276 'end of statement')
    val tmp[460549]:int(64)[13] "temp"
    (460552 'default init var' tmp[460549] int(64)[13])
    (460554 '.=' this[91206] c"nPUsPhysAll" tmp[460549])
    (477277 'end of statement')
    val tmp[460558]:int(64)[13] "temp"
    (460561 'default init var' tmp[460558] int(64)[13])
    (460563 '.=' this[91206] c"maxTaskPar" tmp[460558])
    (477278 'end of statement')
    unknown tmp[460567] "temp"
    (460570 'default init var' tmp[460567] size_t[20657])
    (460572 '.=' this[91206] c"callStackSize" tmp[460567])
    (477279 'end of statement')
    unknown tmp[460576] "temp"
    unknown call_tmp[632714] "expr temp" "maybe param" "maybe type" "temp"
    (632717 'move' call_tmp[632714](460579 call chpl__processorAtomicType int(64)[13]))
    (460581 'default init var' tmp[460576] call_tmp[632714])
    (460583 '.=' this[91206] c"runningTaskCounter" tmp[460576])
    (477280 'end of statement')
    (460598 'setcid' this[91206])
    (513854 return _void[55])
  }
  function BaseLocale[91204].init[90668](arg _mt[91212]:_MT[238], arg this[91210]:BaseLocale[91204], arg parent[90665]:locale[28]) : void[4] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown super_tmp[460694] "temporary of super field" "temp"
    (460702 'move' super_tmp[460694](460695 '.v' this[91210] c"super"))
    (460698 call init _mt[243] super_tmp[460694])
    (477282 'end of statement')
    unknown tmp[460604] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492021] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632719] "expr temp" "maybe param" "maybe type" "temp"
      (632722 'move' call_tmp[632719](460606 '.v' this[91210] c"super"))
      (492025 'move' call_type_tmp[492021](460609 'typeof' call_tmp[632719]))
    }
    (460610 'move' tmp[460604] call_type_tmp[492021])
    unknown call_tmp[632724] "maybe param" "maybe type" "temp"
    (632727 'move' call_tmp[632724](460615 'cast' tmp[460604] this[91210]))
    unknown chpl__thisAsParent[460612] "dead at end of block" "insert auto destroy" "temp"
    (541733 'init var' chpl__thisAsParent[460612] call_tmp[632724] tmp[460604])
    (460618 'setcid' chpl__thisAsParent[460612])
    (477283 'end of statement')
    unknown tmp[460620] "temp"
    (460622 'init var' tmp[460620] parent[90665])
    (460624 '.=' this[91210] c"parent" tmp[460620])
    (477284 'end of statement')
    val tmp[460629]:int(64)[13] "temp"
    (460632 'default init var' tmp[460629] int(64)[13])
    (460634 '.=' this[91210] c"nPUsLogAcc" tmp[460629])
    (477285 'end of statement')
    val tmp[460638]:int(64)[13] "temp"
    (460641 'default init var' tmp[460638] int(64)[13])
    (460643 '.=' this[91210] c"nPUsLogAll" tmp[460638])
    (477286 'end of statement')
    val tmp[460647]:int(64)[13] "temp"
    (460650 'default init var' tmp[460647] int(64)[13])
    (460652 '.=' this[91210] c"nPUsPhysAcc" tmp[460647])
    (477287 'end of statement')
    val tmp[460656]:int(64)[13] "temp"
    (460659 'default init var' tmp[460656] int(64)[13])
    (460661 '.=' this[91210] c"nPUsPhysAll" tmp[460656])
    (477288 'end of statement')
    val tmp[460665]:int(64)[13] "temp"
    (460668 'default init var' tmp[460665] int(64)[13])
    (460670 '.=' this[91210] c"maxTaskPar" tmp[460665])
    (477289 'end of statement')
    unknown tmp[460674] "temp"
    (460677 'default init var' tmp[460674] size_t[20657])
    (460679 '.=' this[91210] c"callStackSize" tmp[460674])
    (477290 'end of statement')
    unknown tmp[460683] "temp"
    unknown call_tmp[632729] "expr temp" "maybe param" "maybe type" "temp"
    (632732 'move' call_tmp[632729](460686 call chpl__processorAtomicType int(64)[13]))
    (460688 'default init var' tmp[460683] call_tmp[632729])
    (460690 '.=' this[91210] c"runningTaskCounter" tmp[460683])
    (477291 'end of statement')
    (460705 'setcid' this[91210])
    (513856 return _void[55])
  }
  function BaseLocale[91204].numPUs[90716](arg _mt[91216]:_MT[238], arg this[91214]:BaseLocale[91204], arg logical[90712]:bool[10] =
  0, arg accessible[90720]:bool[10] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[513860] "RVV" "temp"
    unknown tmp[561044] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[561045] "maybe param" "temp"
    (561050 'move' tmp[561045](561048 call _cond_test logical[90712]))
    if tmp[561045]
    {
      unknown tmp[560982] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[560983] "maybe param" "temp"
      (560988 'move' tmp[560983](560986 call _cond_test accessible[90720]))
      if tmp[560983]
      {
        unknown tmp[560990] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560992 'move' tmp[560990](377862 call nPUsLogAcc _mt[243] this[91214]))
        (560997 'move' tmp[560982](560994 '_paramFoldLogical' tmp[560983] tmp[560990]))
      }
      {
        unknown tmp[560999] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (561001 'move' tmp[560999](377867 call nPUsLogAll _mt[243] this[91214]))
        (561006 'move' tmp[560982](561003 '_paramFoldLogical' tmp[560983] tmp[560999]))
      }
      (561055 'move' tmp[561044](561052 '_paramFoldLogical' tmp[561045] tmp[560982]))
    }
    {
      unknown tmp[561013] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[561014] "maybe param" "temp"
      (561019 'move' tmp[561014](561017 call _cond_test accessible[90720]))
      if tmp[561014]
      {
        unknown tmp[561021] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (561023 'move' tmp[561021](377873 call nPUsPhysAcc _mt[243] this[91214]))
        (561028 'move' tmp[561013](561025 '_paramFoldLogical' tmp[561014] tmp[561021]))
      }
      {
        unknown tmp[561030] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (561032 'move' tmp[561030](377878 call nPUsPhysAll _mt[243] this[91214]))
        (561037 'move' tmp[561013](561034 '_paramFoldLogical' tmp[561014] tmp[561030]))
      }
      (561060 'move' tmp[561044](561057 '_paramFoldLogical' tmp[561045] tmp[561013]))
    }
    (513865 'move' ret[513860](513864 'deref' tmp[561044]))
    (513862 return ret[513860])
  }
  function BaseLocale[91204].id[90757](arg _mt[91220]:_MT[238], arg this[91218]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513869] "RVV" "temp"
    unknown call_tmp[632742] "expr temp" "maybe param" "maybe type" "temp"
    (632745 'move' call_tmp[632742](90780 '_wide_get_locale' this[91218]))
    unknown call_tmp[632747] "expr temp" "maybe param" "maybe type" "temp"
    (632750 'move' call_tmp[632747](90782 call chpl_nodeFromLocaleID call_tmp[632742]))
    (513875 'move' ret[513869](513874 'coerce' call_tmp[632747] int(64)[13]))
    (513871 return ret[513869])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseLocale[91204].localeid[90791](arg _mt[91224]:_MT[238], arg this[91222]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[513879] "RVV" "temp"
    unknown call_tmp[632752] "expr temp" "maybe param" "maybe type" "temp"
    (632755 'move' call_tmp[632752](90797 '_wide_get_locale' this[91222]))
    (513885 'move' ret[513879](513884 'coerce' call_tmp[632752] chpl_localeID_t[209352]))
    (513881 return ret[513879])
  }
  { scopeless type
    chpl_localeID_t[209352]
  }
  function BaseLocale[91204].hostname[90806](arg _mt[91228]:_MT[238], arg this[91226]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513895] "RVV" "temp"
    function chpl_nodeName[90811]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[513889] "RVV" "temp"
      (513891 return ret[513889])
    }
    { scopeless type
      c_string[19]
    }
    unknown hname[90819] "dead at end of block" "insert auto destroy"
    (541735 'default init var' hname[90819] string[26])
    (90822 'end of statement')
    const tmp[90842] "const" "temp"
    unknown call_tmp[632757] "expr temp" "maybe param" "maybe type" "temp"
    (632760 'move' call_tmp[632757](90839 '_wide_get_locale' this[91226]))
    (90844 'move' tmp[90842](90840 'deref' call_tmp[632757]))
    {
      {
        Try!
        {
          {
            unknown call_tmp[632762] "expr temp" "maybe param" "maybe type" "temp"
            (632765 'move' call_tmp[632762](90828 call chpl_nodeName))
            unknown call_tmp[632767] "expr temp" "maybe param" "maybe type" "temp"
            (632770 'move' call_tmp[632767](90830 call createStringWithNewBuffer call_tmp[632762]))
            (90831 call = hname[90819] call_tmp[632767])
            (477296 'end of statement' hname[90819])
          }
        }
      }
      (90847 'on block' 0 tmp[90842])
    }
    (513901 'move' ret[513895](513900 'coerce' hname[90819] string[26]))
    gotoReturn _end_hostname[513893] _end_hostname[513893]
    (477298 'end of statement' hname[90819])
    label _end_hostname[513893]
    (513897 return ret[513895])
  }
  { scopeless type
    string[26]
  }
  function BaseLocale[91204].writeThis[90860](arg _mt[91232]:_MT[238], arg this[91230]:BaseLocale[91204], arg f[90858]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (90869 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (513905 return _void[55])
    (358379 'referenced modules list' HaltWrappers[210018])
  }
  function BaseLocale[91204].name[90876](arg _mt[91236]:_MT[238], arg this[91234]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[513909] "RVV" "temp"
    unknown call_tmp[632774] "expr temp" "maybe param" "maybe type" "temp"
    (632777 'move' call_tmp[632774](90880 call(377890 call (partial) chpl_name _mt[243] this[91234])))
    unknown call_tmp[632779] "expr temp" "maybe param" "maybe type" "temp"
    (632782 'move' call_tmp[632779](90882 call _cast string[26] call_tmp[632774]))
    (513914 'move' ret[513909](513913 'deref' call_tmp[632779]))
    (513911 return ret[513909])
  }
  function BaseLocale[91204].runningTaskCntSet[90903](arg _mt[91240]:_MT[238], arg this[91238]:BaseLocale[91204], arg val[90900]:int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[632786] "expr temp" "maybe param" "maybe type" "temp"
    (632789 'move' call_tmp[632786](358388 call runningTaskCounter _mt[243] this[91238]))
    (90915 call(90906 call (partial) write _mt[243] call_tmp[632786]) val[90900] relaxed[187010])
    (513916 return _void[55])
  }
  function BaseLocale[91204].runningTaskCntAdd[90926](arg _mt[91244]:_MT[238], arg this[91242]:BaseLocale[91204], arg val[90923]:int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[632795] "expr temp" "maybe param" "maybe type" "temp"
    (632798 'move' call_tmp[632795](358394 call runningTaskCounter _mt[243] this[91242]))
    (90938 call(90929 call (partial) add _mt[243] call_tmp[632795]) val[90923] relaxed[187010])
    (513918 return _void[55])
  }
  function BaseLocale[91204].runningTaskCntSub[90949](arg _mt[91248]:_MT[238], arg this[91246]:BaseLocale[91204], arg val[90946]:int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[632804] "expr temp" "maybe param" "maybe type" "temp"
    (632807 'move' call_tmp[632804](358400 call runningTaskCounter _mt[243] this[91246]))
    (90961 call(90952 call (partial) sub _mt[243] call_tmp[632804]) val[90946] relaxed[187010])
    (513920 return _void[55])
  }
  function BaseLocale[91204].runningTaskCnt[90968](arg _mt[91252]:_MT[238], arg this[91250]:BaseLocale[91204]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[513924] "RVV" "temp"
    unknown call_tmp[632813] "expr temp" "maybe param" "maybe type" "temp"
    (632816 'move' call_tmp[632813](358406 call runningTaskCounter _mt[243] this[91250]))
    unknown call_tmp[632820] "maybe param" "maybe type" "temp"
    (632823 'move' call_tmp[632820](90979 call(90971 call (partial) read _mt[243] call_tmp[632813]) relaxed[187010]))
    unknown rtc[90980] "dead at end of block" "insert auto destroy"
    (541737 'init var' rtc[90980] call_tmp[632820])
    (90983 'end of statement')
    unknown tmp[561067] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[561068] "maybe param" "temp"
    unknown call_tmp[632825] "expr temp" "maybe param" "maybe type" "temp"
    (632828 'move' call_tmp[632825](90987 call <= rtc[90980] 0))
    (561073 'move' tmp[561068](561071 call _cond_test call_tmp[632825]))
    if tmp[561068]
    {
      (561078 'move' tmp[561067](561075 '_paramFoldLogical' tmp[561068] 1))
    }
    {
      (561083 'move' tmp[561067](561080 '_paramFoldLogical' tmp[561068] rtc[90980]))
    }
    (513929 'move' ret[513924](513928 'deref' tmp[561067]))
    gotoReturn _end_runningTaskCnt[513922] _end_runningTaskCnt[513922]
    (477305 'end of statement' rtc[90980] rtc[90980])
    label _end_runningTaskCnt[513922]
    (513926 return ret[513924])
  }
  function BaseLocale[91204].chpl_id[91000](arg _mt[91256]:_MT[238], arg this[91254]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513935] "RVV" "temp"
    (91008 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (477308 'end of statement')
    unknown call_tmp[632830] "expr temp" "maybe param" "maybe type" "temp"
    (632833 'move' call_tmp[632830](91012 call - 1))
    (513941 'move' ret[513935](513940 'coerce' call_tmp[632830] int(64)[13]))
    (513937 return ret[513935])
    (358411 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseLocale[91204].chpl_localeid[91021](arg _mt[91260]:_MT[238], arg this[91258]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513945] "RVV" "temp"
    (91029 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (477310 'end of statement')
    unknown call_tmp[632835] "expr temp" "maybe param" "maybe type" "temp"
    (632838 'move' call_tmp[632835](91035 call _cast chpl_nodeID_t[89862] 1))
    unknown call_tmp[632840] "expr temp" "maybe param" "maybe type" "temp"
    (632843 'move' call_tmp[632840](91037 call - call_tmp[632835]))
    unknown call_tmp[632845] "expr temp" "maybe param" "maybe type" "temp"
    (632848 'move' call_tmp[632845](91041 call chpl_buildLocaleID call_tmp[632840] c_sublocid_none[89873]))
    (513951 'move' ret[513945](513950 'coerce' call_tmp[632845] chpl_localeID_t[209352]))
    (513947 return ret[513945])
    (358417 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    chpl_localeID_t[209352]
  }
  function BaseLocale[91204].chpl_name[91049](arg _mt[91264]:_MT[238], arg this[91262]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513955] "RVV" "temp"
    (91057 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (477312 'end of statement')
    (513961 'move' ret[513955](513960 'coerce' "" string[26]))
    (513957 return ret[513955])
    (358423 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    string[26]
  }
  function BaseLocale[91204].defaultMemory[91084](arg _mt[91268]:_MT[238], arg this[91266]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513965] "RVV" "temp"
    (91092 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (513967 return ret[513965])
    (358429 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91204].largeMemory[91100](arg _mt[91272]:_MT[238], arg this[91270]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513971] "RVV" "temp"
    (91108 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (513973 return ret[513971])
    (358435 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91204].lowLatencyMemory[91116](arg _mt[91276]:_MT[238], arg this[91274]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513977] "RVV" "temp"
    (91124 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (513979 return ret[513977])
    (358441 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91204].highBandwidthMemory[91132](arg _mt[91280]:_MT[238], arg this[91278]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[513983] "RVV" "temp"
    (91140 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (513985 return ret[513983])
    (358447 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    locale[28]
  }
  function BaseLocale[91204].getChildCount[91148](arg _mt[91284]:_MT[238], arg this[91282]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[513989] "RVV" "temp"
    (91156 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (477318 'end of statement')
    (513995 'move' ret[513989](513994 'coerce' 0 int(64)[13]))
    (513991 return ret[513989])
    (358453 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseLocale[91204].addChild[91171](arg _mt[91288]:_MT[238], arg this[91286]:BaseLocale[91204], arg loc[91168]:locale[28]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (91178 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (513997 return _void[55])
    (358459 'referenced modules list' HaltWrappers[210018])
  }
  function BaseLocale[91204].getChild[91189](arg _mt[91292]:_MT[238], arg this[91290]:BaseLocale[91204], arg idx[91186]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[514001] "RVV" "temp"
    (91197 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (514003 return ret[514001])
    (358465 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    locale[28]
  }
  type BaseLocale[91204] val super[355681]:object[22] "super class" const parent[90684] "const" "no doc" nilLocale[89942] val nPUsLogAcc[90689]:int(64)[13] "no doc" int(64)[13] val nPUsLogAll[90694]:int(64)[13] "no doc" int(64)[13] val nPUsPhysAcc[90699]:int(64)[13] "no doc" int(64)[13] val nPUsPhysAll[90704]:int(64)[13] "no doc" int(64)[13] val maxTaskPar[90746]:int(64)[13] int(64)[13] unknown callStackSize[90751] size_t[20657] unknown runningTaskCounter[90893] "no doc"(90892 call chpl__processorAtomicType int(64)[13])
  type unmanaged BaseLocale?[415466]
  type BaseLocale?[415463](?)
  type BaseLocale[377830](?)
  function DummyLocale[91441].init[91300](arg _mt[91445]:_MT[238], arg this[91443]:DummyLocale[91441]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460708] "temporary of super field" "temp"
    (460710 'move' super_tmp[460708](460707 '.v' this[91443] c"super"))
    (91308 call(91303 call (partial) init _mt[243] super_tmp[460708]) nilLocale[89942])
    (477322 'end of statement')
    unknown tmp[460713] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492027] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632852] "expr temp" "maybe param" "maybe type" "temp"
      (632855 'move' call_tmp[632852](460715 '.v' this[91443] c"super"))
      (492031 'move' call_type_tmp[492027](460718 'typeof' call_tmp[632852]))
    }
    (460719 'move' tmp[460713] call_type_tmp[492027])
    unknown call_tmp[632857] "maybe param" "maybe type" "temp"
    (632860 'move' call_tmp[632857](460724 'cast' tmp[460713] this[91443]))
    unknown chpl__thisAsParent[460721] "dead at end of block" "insert auto destroy" "temp"
    (541739 'init var' chpl__thisAsParent[460721] call_tmp[632857] tmp[460713])
    (460727 'setcid' chpl__thisAsParent[460721])
    (477323 'end of statement')
    (460729 'setcid' this[91443])
    (514005 return _void[55])
  }
  function DummyLocale[91441].chpl_id[91315](arg _mt[91449]:_MT[238], arg this[91447]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[514009] "RVV" "temp"
    unknown call_tmp[632862] "expr temp" "maybe param" "maybe type" "temp"
    (632865 'move' call_tmp[632862](91319 call - 1))
    (514015 'move' ret[514009](514014 'coerce' call_tmp[632862] int(64)[13]))
    (514011 return ret[514009])
  }
  { scopeless type
    int(64)[13]
  }
  function DummyLocale[91441].chpl_localeid[91329](arg _mt[91453]:_MT[238], arg this[91451]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[514019] "RVV" "temp"
    unknown call_tmp[632867] "expr temp" "maybe param" "maybe type" "temp"
    (632870 'move' call_tmp[632867](91335 call _cast chpl_nodeID_t[89862] 1))
    unknown call_tmp[632872] "expr temp" "maybe param" "maybe type" "temp"
    (632875 'move' call_tmp[632872](91337 call - call_tmp[632867]))
    unknown call_tmp[632877] "expr temp" "maybe param" "maybe type" "temp"
    (632880 'move' call_tmp[632877](91341 call chpl_buildLocaleID call_tmp[632872] c_sublocid_none[89873]))
    (514025 'move' ret[514019](514024 'coerce' call_tmp[632877] chpl_localeID_t[209352]))
    (514021 return ret[514019])
  }
  { scopeless type
    chpl_localeID_t[209352]
  }
  function DummyLocale[91441].chpl_name[91350](arg _mt[91457]:_MT[238], arg this[91455]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[514029] "RVV" "temp"
    (514035 'move' ret[514029](514034 'coerce' "dummy-locale" string[26]))
    (514031 return ret[514029])
  }
  { scopeless type
    string[26]
  }
  function DummyLocale[91441].getChildCount[91378](arg _mt[91461]:_MT[238], arg this[91459]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[514039] "RVV" "temp"
    (514045 'move' ret[514039](514044 'coerce' 0 int(64)[13]))
    (514041 return ret[514039])
  }
  { scopeless type
    int(64)[13]
  }
  function DummyLocale[91441].getChild[91394](arg _mt[91465]:_MT[238], arg this[91463]:DummyLocale[91441], arg idx[91391]:int(64)[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[514049] "RVV" "temp"
    unknown call_tmp[632882] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (632885 'move' call_tmp[632882](747878 'new' locale[28] this[91463]))
    (514055 'move' ret[514049](514054 'coerce' call_tmp[632882] locale[28]))
    (514051 return ret[514049])
  }
  { scopeless type
    locale[28]
  }
  function DummyLocale[91441].addChild[91414](arg _mt[91469]:_MT[238], arg this[91467]:DummyLocale[91441], arg loc[91411]:locale[28]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (91435 call halt "addChild on DummyLocale")
    (514057 return _void[55])
  }
  type DummyLocale[91441] val super[355691]:BaseLocale[91204] "super class"
  type DummyLocale[377848](?)
  function AbstractLocaleModel[91502].init[91481](arg _mt[91506]:_MT[238], arg this[91504]:AbstractLocaleModel[91502], arg parent_loc[91478]:locale[28]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460732] "temporary of super field" "temp"
    (460734 'move' super_tmp[460732](460731 '.v' this[91504] c"super"))
    (91489 call(91484 call (partial) init _mt[243] super_tmp[460732]) parent_loc[91478])
    (477331 'end of statement')
    unknown tmp[460737] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492033] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632889] "expr temp" "maybe param" "maybe type" "temp"
      (632892 'move' call_tmp[632889](460739 '.v' this[91504] c"super"))
      (492037 'move' call_type_tmp[492033](460742 'typeof' call_tmp[632889]))
    }
    (460743 'move' tmp[460737] call_type_tmp[492033])
    unknown call_tmp[632894] "maybe param" "maybe type" "temp"
    (632897 'move' call_tmp[632894](460748 'cast' tmp[460737] this[91504]))
    unknown chpl__thisAsParent[460745] "dead at end of block" "insert auto destroy" "temp"
    (541741 'init var' chpl__thisAsParent[460745] call_tmp[632894] tmp[460737])
    (460751 'setcid' chpl__thisAsParent[460745])
    (477332 'end of statement')
    (460753 'setcid' this[91504])
    (514059 return _void[55])
  }
  function AbstractLocaleModel[91502].init[91496](arg _mt[91510]:_MT[238], arg this[91508]:AbstractLocaleModel[91502]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460775] "temporary of super field" "temp"
    (460783 'move' super_tmp[460775](460776 '.v' this[91508] c"super"))
    (460779 call init _mt[243] super_tmp[460775])
    (477334 'end of statement')
    unknown tmp[460759] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492039] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632899] "expr temp" "maybe param" "maybe type" "temp"
      (632902 'move' call_tmp[632899](460761 '.v' this[91508] c"super"))
      (492043 'move' call_type_tmp[492039](460764 'typeof' call_tmp[632899]))
    }
    (460765 'move' tmp[460759] call_type_tmp[492039])
    unknown call_tmp[632904] "maybe param" "maybe type" "temp"
    (632907 'move' call_tmp[632904](460770 'cast' tmp[460759] this[91508]))
    unknown chpl__thisAsParent[460767] "dead at end of block" "insert auto destroy" "temp"
    (541743 'init var' chpl__thisAsParent[460767] call_tmp[632904] tmp[460759])
    (460773 'setcid' chpl__thisAsParent[460767])
    (477335 'end of statement')
    (460786 'setcid' this[91508])
    (514061 return _void[55])
  }
  type AbstractLocaleModel[91502] val super[355683]:BaseLocale[91204] "super class"
  unknown rootLocale[91514] "dead at end of block" "insert auto destroy" "locale private" "no doc"
  unknown replicateRootLocale[91519] "config" "no doc" "param"
  unknown origRootLocale[91524] "dead at end of block" "insert auto destroy" "no doc"
  function AbstractRootLocale[92012].init[91533](arg _mt[92016]:_MT[238], arg this[92014]:AbstractRootLocale[92012]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460808] "temporary of super field" "temp"
    (460816 'move' super_tmp[460808](460809 '.v' this[92014] c"super"))
    (460812 call init _mt[243] super_tmp[460808])
    (477339 'end of statement')
    unknown tmp[460792] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492045] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632909] "expr temp" "maybe param" "maybe type" "temp"
      (632912 'move' call_tmp[632909](460794 '.v' this[92014] c"super"))
      (492049 'move' call_type_tmp[492045](460797 'typeof' call_tmp[632909]))
    }
    (460798 'move' tmp[460792] call_type_tmp[492045])
    unknown call_tmp[632914] "maybe param" "maybe type" "temp"
    (632917 'move' call_tmp[632914](460803 'cast' tmp[460792] this[92014]))
    unknown chpl__thisAsParent[460800] "dead at end of block" "insert auto destroy" "temp"
    (541751 'init var' chpl__thisAsParent[460800] call_tmp[632914] tmp[460792])
    (460806 'setcid' chpl__thisAsParent[460800])
    (477340 'end of statement')
    (460819 'setcid' this[92014])
    (514063 return _void[55])
  }
  function AbstractRootLocale[92012].init[91544](arg _mt[92020]:_MT[238], arg this[92018]:AbstractRootLocale[92012], arg parent_loc[91541]:locale[28]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[460822] "temporary of super field" "temp"
    (460824 'move' super_tmp[460822](460821 '.v' this[92018] c"super"))
    (91552 call(91547 call (partial) init _mt[243] super_tmp[460822]) parent_loc[91541])
    (477342 'end of statement')
    unknown tmp[460827] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492051] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[632921] "expr temp" "maybe param" "maybe type" "temp"
      (632924 'move' call_tmp[632921](460829 '.v' this[92018] c"super"))
      (492055 'move' call_type_tmp[492051](460832 'typeof' call_tmp[632921]))
    }
    (460833 'move' tmp[460827] call_type_tmp[492051])
    unknown call_tmp[632926] "maybe param" "maybe type" "temp"
    (632929 'move' call_tmp[632926](460838 'cast' tmp[460827] this[92018]))
    unknown chpl__thisAsParent[460835] "dead at end of block" "insert auto destroy" "temp"
    (541753 'init var' chpl__thisAsParent[460835] call_tmp[632926] tmp[460827])
    (460841 'setcid' chpl__thisAsParent[460835])
    (477343 'end of statement')
    (460843 'setcid' this[92018])
    (514065 return _void[55])
  }
  function AbstractRootLocale[92012].getDefaultLocaleSpace[91559](arg _mt[92024]:_MT[238], arg this[92022]:AbstractRootLocale[92012]) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[514069] "RVV" "temp"
    (91566 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (477345 'end of statement')
    (514074 'move' ret[514069](514073 'addr of' chpl_emptyLocaleSpace[88784]))
    (514071 return ret[514069])
    (358486 'referenced modules list' HaltWrappers[210018])
  }
  function AbstractRootLocale[92012].getDefaultLocaleArray[91576](arg _mt[92028]:_MT[238], arg this[92026]:AbstractRootLocale[92012]) const ref : _unknown[51] "method" "primary method"
  {
    unknown ret[514078] "RVV" "temp"
    (91583 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (477347 'end of statement')
    (514083 'move' ret[514078](514082 'addr of' chpl_emptyLocales[88795]))
    (514080 return ret[514078])
    (358492 'referenced modules list' HaltWrappers[210018])
  }
  function AbstractRootLocale[92012].localeIDtoLocale[91597](arg _mt[92032]:_MT[238], arg this[92030]:AbstractRootLocale[92012], arg id[91594]:chpl_localeID_t[209352]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[514087] "RVV" "temp"
    (91605 call pureVirtualMethodHalt module=[255] HaltWrappers[210018])
    (514089 return ret[514087])
    (358498 'referenced modules list' HaltWrappers[210018])
  }
  { scopeless type
    locale[28]
  }
  function AbstractRootLocale[92012].chpl_initOnLocales[91613](arg _mt[92036]:_MT[238], arg this[92034]:AbstractRootLocale[92012]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[514093] "RVV" "temp"
    unknown call_tmp[632931] "expr temp" "maybe param" "maybe type" "temp"
    (632934 'move' call_tmp[632931](91617 call > numLocales[209892] 1))
    unknown call_tmp[632936] "expr temp" "maybe param" "maybe type" "temp"
    (632939 'move' call_tmp[632936](91640 call _cond_test call_tmp[632931]))
    if call_tmp[632936]
    {
      (91638 call halt "The locales must be initialized in parallel")
    }
    {
      unknown _indexOfInterest[91679] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[91680] "expr temp" "temp"
      unknown call_tmp[632943] "expr temp" "maybe param" "maybe type" "temp"
      (632946 'move' call_tmp[632943](91648 call _instance _mt[243] origRootLocale[91524]))
      unknown call_tmp[632948] "expr temp" "maybe param" "maybe type" "temp"
      (632951 'move' call_tmp[632948](91654 call _cast borrowed RootLocale?[415472] call_tmp[632943]))
      unknown call_tmp[632953] "expr temp" "maybe param" "maybe type" "temp"
      (632956 'move' call_tmp[632953](91656 call postfix! call_tmp[632948]))
      unknown call_tmp[632960] "expr temp" "maybe param" "maybe type" "temp"
      (632963 'move' call_tmp[632960](91664 call(91660 call (partial) getDefaultLocaleSpace _mt[243] call_tmp[632953])))
      (91689 'move' _iterator[91680](91687 call _getIterator call_tmp[632960]))
      Defer
      {
        {
          (91706 call _freeIterator _iterator[91680])
        }
      }
      { scopeless type
        (91695 'move' _indexOfInterest[91679](91692 call iteratorIndex _iterator[91680]))
      }
      ForLoop[91681]
      {
        unknown locIdx[91699] "index var" "insert auto destroy"
        (477352 'end of statement')
        (91701 'move' locIdx[91699] _indexOfInterest[91679])
        (477353 'end of statement' locIdx[91699])
        {
          unknown yret[514097] "YVV" "temp"
          (514100 'move' yret[514097](514099 'deref' locIdx[91699]))
          (514102 yield yret[514097])
          (477355 'end of statement' locIdx[91699])
          (91671 call = rootLocale[91514] origRootLocale[91524])
          (477357 'end of statement')
          (91676 call = rootLocaleInitialized[310] 1)
        }
        label _continueLabel[91684]
        _indexOfInterest[91679]
        _iterator[91680]
      }
      label _breakLabel[91685]
    }
    (514095 return ret[514093])
  }
  function AbstractRootLocale[92012].chpl_initOnLocales[91721](arg _mt[92040]:_MT[238], arg this[92038]:AbstractRootLocale[92012], param arg tag[91718]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[514106] "RVV" "temp"
    unknown b[91731] "dead at end of block" "insert auto destroy"
    (541755 'default init var' b[91731] localesBarrier[92486])
    (91734 'end of statement')
    unknown flags[91753] "dead at end of block" "insert auto destroy"
    unknown call_tmp[632965] "expr temp" "maybe param" "maybe type" "temp"
    (632968 'move' call_tmp[632965](91737 call chpl_build_low_bounded_range 1))
    unknown call_tmp[632970] "expr temp" "maybe param" "maybe type" "temp"
    (632973 'move' call_tmp[632970](91741 call - numLocales[209892] 1))
    unknown call_tmp[632975] "expr temp" "maybe param" "maybe type" "temp"
    (632978 'move' call_tmp[632975](91743 call # call_tmp[632965] call_tmp[632970]))
    unknown call_tmp[632980] "expr temp" "maybe param" "maybe type" "temp"
    (632983 'move' call_tmp[632980](91749 call chpl__ensureDomainExpr call_tmp[632975]))
    unknown call_tmp[632985] "expr temp" "maybe param" "maybe type" "temp"
    (632988 'move' call_tmp[632985](91751 call chpl__buildArrayRuntimeType call_tmp[632980] unmanaged localesSignal?[415478]))
    (541757 'default init var' flags[91753] call_tmp[632985])
    (91756 'end of statement')
    {
      unknown tmpIter[91818] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[632990] "expr temp" "maybe param" "maybe type" "temp"
      (632993 'move' call_tmp[632990](91759 call chpl_build_low_bounded_range 0))
      (91821 'move' tmpIter[91818](91762 call # call_tmp[632990] numLocales[209892]))
      unknown isRngDomArr[91989] "maybe param" "temp"
      unknown tmp[422386] "maybe param" "temp"
      (422397 'move' tmp[422386](91991 call isBoundedRange tmpIter[91818]))
      unknown call_tmp[632995] "expr temp" "maybe param" "maybe type" "temp"
      (632998 'move' call_tmp[632995](422399 call _cond_invalid tmp[422386]))
      if call_tmp[632995]
      {
        (422402 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[561117] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[561118] "maybe param" "temp"
      unknown call_tmp[633000] "expr temp" "maybe param" "maybe type" "temp"
      (633003 'move' call_tmp[633000](422387 call isTrue tmp[422386]))
      (561123 'move' tmp[561118](561121 call _cond_test call_tmp[633000]))
      if tmp[561118]
      {
        (561128 'move' tmp[561117](561125 '_paramFoldLogical' tmp[561118] 1))
      }
      {
        unknown tmp[422407] "maybe param" "temp"
        (422418 'move' tmp[422407](91994 call isDomain tmpIter[91818]))
        unknown call_tmp[633005] "expr temp" "maybe param" "maybe type" "temp"
        (633008 'move' call_tmp[633005](422420 call _cond_invalid tmp[422407]))
        if call_tmp[633005]
        {
          (422423 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[561090] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[561091] "maybe param" "temp"
        unknown call_tmp[633010] "expr temp" "maybe param" "maybe type" "temp"
        (633013 'move' call_tmp[633010](422408 call isTrue tmp[422407]))
        (561096 'move' tmp[561091](561094 call _cond_test call_tmp[633010]))
        if tmp[561091]
        {
          (561101 'move' tmp[561090](561098 '_paramFoldLogical' tmp[561091] 1))
        }
        {
          unknown tmp[561103] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[633015] "expr temp" "maybe param" "maybe type" "temp"
          (633018 'move' call_tmp[633015](91997 call isArray tmpIter[91818]))
          (561105 'move' tmp[561103](422412 call isTrue call_tmp[633015]))
          (561110 'move' tmp[561090](561107 '_paramFoldLogical' tmp[561091] tmp[561103]))
        }
        unknown tmp[561130] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (561132 'move' tmp[561130](422391 call isTrue tmp[561090]))
        (561137 'move' tmp[561117](561134 '_paramFoldLogical' tmp[561118] tmp[561130]))
      }
      (92004 'move' isRngDomArr[91989] tmp[561117])
      if isRngDomArr[91989]
      {
        const _coforallCount[91861] "const" "end count" "temp"
        (91926 'move' _coforallCount[91861](91923 call _endCountAlloc 0))
        unknown numTasks[91862] "temp"
        (91910 'move' numTasks[91862](91906 call size _mt[243] tmpIter[91818]))
        (91901 call _upEndCount _coforallCount[91861] 0 numTasks[91862])
        (477360 'end of statement')
        unknown _indexOfInterest[91868] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91869] "expr temp" "temp"
        (91878 'move' _iterator[91869](91876 call _getIterator tmpIter[91818]))
        Defer
        {
          {
            (91894 call _freeIterator _iterator[91869])
          }
        }
        { scopeless type
          (91883 'move' _indexOfInterest[91868](91880 call iteratorIndex _iterator[91869]))
        }
        ForLoop[91870]
        {
          unknown locIdx[91887] "coforall index var" "index var" "insert auto destroy"
          (477362 'end of statement')
          (91889 'move' locIdx[91887] _indexOfInterest[91868])
          (477363 'end of statement' locIdx[91887])
          const tmp[91824] "const" "temp"
          unknown call_tmp[633022] "expr temp" "maybe param" "maybe type" "temp"
          (633025 'move' call_tmp[633022](91833 call _cast chpl_nodeID_t[89862] locIdx[91887]))
          unknown call_tmp[633027] "expr temp" "maybe param" "maybe type" "temp"
          (633030 'move' call_tmp[633027](91831 call chpl_buildLocaleID call_tmp[633022] c_sublocid_any[89878]))
          unknown call_tmp[633032] "expr temp" "maybe param" "maybe type" "temp"
          (633035 'move' call_tmp[633032](91829 'chpl_on_locale_num' call_tmp[633027]))
          (91826 'move' tmp[91824](91828 'deref' call_tmp[633032]))
          {
            {
              (91843 call chpl_defaultDistInitPrivate)
              (477365 'end of statement')
              unknown yret[514110] "YVV" "temp"
              (514113 'move' yret[514110](514112 'deref' locIdx[91887]))
              (514115 yield yret[514110])
              (477366 'end of statement' locIdx[91887])
              (91850 call(91847 call (partial) wait _mt[243] b[91731]) locIdx[91887] flags[91753])
              (477368 'end of statement' b[91731] locIdx[91887] flags[91753])
              (91854 call chpl_rootLocaleInitPrivate locIdx[91887])
              (477372 'end of statement' locIdx[91887])
              (91857 call chpl_defaultLocaleInitPrivate)
              (477374 'end of statement')
              (91859 call warmupRuntime)
            }
            (91863 call _downEndCount _coforallCount[91861] nil[44])
            (91838 'coforall on block' 0 tmp[91824])
          }
          label _continueLabel[91873]
          _indexOfInterest[91868]
          _iterator[91869]
        }
        label _breakLabel[91874]
        Defer
        {
          {
            (91913 call _endCountFree _coforallCount[91861])
          }
        }
        (91918 call _waitEndCount _coforallCount[91861] 0 numTasks[91862])
      }
      {
        const _coforallCount[91930] "const" "end count" "temp"
        (91986 'move' _coforallCount[91930](91983 call _endCountAlloc 0))
        unknown _indexOfInterest[91937] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91938] "expr temp" "temp"
        (91947 'move' _iterator[91938](91945 call _getIterator tmpIter[91818]))
        Defer
        {
          {
            (91963 call _freeIterator _iterator[91938])
          }
        }
        { scopeless type
          (91952 'move' _indexOfInterest[91937](91949 call iteratorIndex _iterator[91938]))
        }
        ForLoop[91939]
        {
          unknown locIdx[91956] "coforall index var" "index var" "insert auto destroy"
          (477380 'end of statement')
          (91958 'move' locIdx[91956] _indexOfInterest[91937])
          (477381 'end of statement' locIdx[91956])
          (91970 call _upEndCount _coforallCount[91930] 0)
          (477383 'end of statement')
          const tmp[91809] "const" "temp"
          unknown call_tmp[633039] "expr temp" "maybe param" "maybe type" "temp"
          (633042 'move' call_tmp[633039](91769 call _cast chpl_nodeID_t[89862] locIdx[91956]))
          unknown call_tmp[633044] "expr temp" "maybe param" "maybe type" "temp"
          (633047 'move' call_tmp[633044](91773 call chpl_buildLocaleID call_tmp[633039] c_sublocid_any[89878]))
          unknown call_tmp[633049] "expr temp" "maybe param" "maybe type" "temp"
          (633052 'move' call_tmp[633049](91774 'chpl_on_locale_num' call_tmp[633044]))
          (91811 'move' tmp[91809](91807 'deref' call_tmp[633049]))
          {
            {
              (91777 call chpl_defaultDistInitPrivate)
              (477384 'end of statement')
              unknown yret[514117] "YVV" "temp"
              (514120 'move' yret[514117](514119 'deref' locIdx[91956]))
              (514122 yield yret[514117])
              (477385 'end of statement' locIdx[91956])
              (91792 call(91786 call (partial) wait _mt[243] b[91731]) locIdx[91956] flags[91753])
              (477387 'end of statement' b[91731] locIdx[91956] flags[91753])
              (91797 call chpl_rootLocaleInitPrivate locIdx[91956])
              (477391 'end of statement' locIdx[91956])
              (91801 call chpl_defaultLocaleInitPrivate)
              (477393 'end of statement')
              (91805 call warmupRuntime)
            }
            (91932 call _downEndCount _coforallCount[91930] nil[44])
            (91814 'coforall on block' 0 tmp[91809])
          }
          label _continueLabel[91942]
          _indexOfInterest[91937]
          _iterator[91938]
        }
        label _breakLabel[91943]
        Defer
        {
          {
            (91974 call _endCountFree _coforallCount[91930])
          }
        }
        (91979 call _waitEndCount _coforallCount[91930] 0)
      }
    }
    (514108 return ret[514106])
  }
  where {
    (91728 call == tag[91718] standalone[451])
  }
  type AbstractRootLocale[92012] val super[355687]:BaseLocale[91204] "super class"
  type borrowed AbstractRootLocale?[415484]
  type AbstractRootLocale?[415481](?)
  type AbstractRootLocale[377997](?)
  function warmupRuntime[92045]() : _unknown[51] "private" "no return value for void"
  {
    function chpl_task_getFixedNumThreads[92049]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514126] "RVV" "temp"
      (514128 return ret[514126])
    }
    { scopeless type
      (92054 call uint(64)[115] 32)
    }
    {
      unknown tmpIter[92091] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[633056] "expr temp" "maybe param" "maybe type" "temp"
      (633059 'move' call_tmp[633056](92061 call chpl_build_low_bounded_range 0))
      unknown call_tmp[633061] "expr temp" "maybe param" "maybe type" "temp"
      (633064 'move' call_tmp[633061](92065 call chpl_task_getFixedNumThreads))
      (92094 'move' tmpIter[92091](92066 call # call_tmp[633056] call_tmp[633061]))
      unknown isRngDomArr[92248] "maybe param" "temp"
      unknown tmp[422428] "maybe param" "temp"
      (422439 'move' tmp[422428](92250 call isBoundedRange tmpIter[92091]))
      unknown call_tmp[633066] "expr temp" "maybe param" "maybe type" "temp"
      (633069 'move' call_tmp[633066](422441 call _cond_invalid tmp[422428]))
      if call_tmp[633066]
      {
        (422444 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[561171] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[561172] "maybe param" "temp"
      unknown call_tmp[633071] "expr temp" "maybe param" "maybe type" "temp"
      (633074 'move' call_tmp[633071](422429 call isTrue tmp[422428]))
      (561177 'move' tmp[561172](561175 call _cond_test call_tmp[633071]))
      if tmp[561172]
      {
        (561182 'move' tmp[561171](561179 '_paramFoldLogical' tmp[561172] 1))
      }
      {
        unknown tmp[422449] "maybe param" "temp"
        (422460 'move' tmp[422449](92253 call isDomain tmpIter[92091]))
        unknown call_tmp[633076] "expr temp" "maybe param" "maybe type" "temp"
        (633079 'move' call_tmp[633076](422462 call _cond_invalid tmp[422449]))
        if call_tmp[633076]
        {
          (422465 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[561144] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[561145] "maybe param" "temp"
        unknown call_tmp[633081] "expr temp" "maybe param" "maybe type" "temp"
        (633084 'move' call_tmp[633081](422450 call isTrue tmp[422449]))
        (561150 'move' tmp[561145](561148 call _cond_test call_tmp[633081]))
        if tmp[561145]
        {
          (561155 'move' tmp[561144](561152 '_paramFoldLogical' tmp[561145] 1))
        }
        {
          unknown tmp[561157] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[633086] "expr temp" "maybe param" "maybe type" "temp"
          (633089 'move' call_tmp[633086](92256 call isArray tmpIter[92091]))
          (561159 'move' tmp[561157](422454 call isTrue call_tmp[633086]))
          (561164 'move' tmp[561144](561161 '_paramFoldLogical' tmp[561145] tmp[561157]))
        }
        unknown tmp[561184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (561186 'move' tmp[561184](422433 call isTrue tmp[561144]))
        (561191 'move' tmp[561171](561188 '_paramFoldLogical' tmp[561172] tmp[561184]))
      }
      (92263 'move' isRngDomArr[92248] tmp[561171])
      if isRngDomArr[92248]
      {
        const _coforallCount[92115] "const" "end count" "temp"
        (92184 'move' _coforallCount[92115](92181 call _endCountAlloc 1))
        unknown numTasks[92116] "temp"
        (92168 'move' numTasks[92116](92164 call size _mt[243] tmpIter[92091]))
        (92159 call _upEndCount _coforallCount[92115] 1 numTasks[92116])
        (477399 'end of statement')
        (92156 call chpl_resetTaskSpawn numTasks[92116])
        (477400 'end of statement')
        unknown _indexOfInterest[92123] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92124] "expr temp" "temp"
        (92133 'move' _iterator[92124](92131 call _getIterator tmpIter[92091]))
        Defer
        {
          {
            (92149 call _freeIterator _iterator[92124])
          }
        }
        { scopeless type
          (92138 'move' _indexOfInterest[92123](92135 call iteratorIndex _iterator[92124]))
        }
        ForLoop[92125]
        {
          unknown i[92142] "coforall index var" "index var" "insert auto destroy"
          (477402 'end of statement')
          (92144 'move' i[92142] _indexOfInterest[92123])
          (477403 'end of statement' i[92142])
          {
            {
              unknown call_tmp[633093] "maybe param" "maybe type" "temp"
              (633096 'move' call_tmp[633093](92100 call c_malloc int(64)[13] 1))
              unknown p[92098] "dead at end of block" "insert auto destroy"
              (541759 'init var' p[92098] call_tmp[633093])
              (92104 'end of statement')
              unknown call_tmp[633098] "expr temp" "maybe param" "maybe type" "temp"
              (633101 'move' call_tmp[633098](92108 call p[92098] 0))
              (92106 call = call_tmp[633098] i[92142])
              (477405 'end of statement' p[92098] i[92142])
              (92112 call c_free p[92098])
              (477408 'end of statement' p[92098])
            }
            (92118 call _downEndCount _coforallCount[92115] nil[44])
            (92117 'coforall loop')
          }
          label _continueLabel[92128]
          _indexOfInterest[92123]
          _iterator[92124]
        }
        label _breakLabel[92129]
        Defer
        {
          {
            (92171 call _endCountFree _coforallCount[92115])
          }
        }
        (92176 call _waitEndCount _coforallCount[92115] 1 numTasks[92116])
      }
      {
        const _coforallCount[92188] "const" "end count" "temp"
        (92245 'move' _coforallCount[92188](92242 call _endCountAlloc 1))
        unknown _indexOfInterest[92196] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92197] "expr temp" "temp"
        (92206 'move' _iterator[92197](92204 call _getIterator tmpIter[92091]))
        Defer
        {
          {
            (92222 call _freeIterator _iterator[92197])
          }
        }
        { scopeless type
          (92211 'move' _indexOfInterest[92196](92208 call iteratorIndex _iterator[92197]))
        }
        ForLoop[92198]
        {
          unknown i[92215] "coforall index var" "index var" "insert auto destroy"
          (477414 'end of statement')
          (92217 'move' i[92215] _indexOfInterest[92196])
          (477415 'end of statement' i[92215])
          (92229 call _upEndCount _coforallCount[92188] 1)
          (477417 'end of statement')
          {
            {
              unknown call_tmp[633103] "maybe param" "maybe type" "temp"
              (633106 'move' call_tmp[633103](92072 call c_malloc int(64)[13] 1))
              unknown p[92073] "dead at end of block" "insert auto destroy"
              (541761 'init var' p[92073] call_tmp[633103])
              (92076 'end of statement')
              unknown call_tmp[633108] "expr temp" "maybe param" "maybe type" "temp"
              (633111 'move' call_tmp[633108](92081 call p[92073] 0))
              (92083 call = call_tmp[633108] i[92215])
              (477418 'end of statement' p[92073] i[92215])
              (92089 call c_free p[92073])
              (477421 'end of statement' p[92073])
            }
            (92191 call _downEndCount _coforallCount[92188] nil[44])
            (92190 'coforall loop')
          }
          label _continueLabel[92201]
          _indexOfInterest[92196]
          _iterator[92197]
        }
        label _breakLabel[92202]
        Defer
        {
          {
            (92233 call _endCountFree _coforallCount[92188])
          }
        }
        (92238 call _waitEndCount _coforallCount[92188] 1)
      }
    }
    (514130 return _void[55])
  }
  type localesSignal[92278] val super[355693]:object[22] "super class" unknown s[92273](92271 call chpl__atomicType bool[10])
  type unmanaged localesSignal?[415478]
  type localesSignal?[415475](?)
  type localesSignal[377927](?)
  function localesBarrier[92486].wait[92286](arg _mt[92490]:_MT[238], arg this[92488]:localesBarrier[92486], arg locIdx[92284]:_any[178](?), arg flags[92288]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[633113] "expr temp" "maybe param" "maybe type" "temp"
    (633116 'move' call_tmp[633113](92292 call == locIdx[92284] 0))
    unknown call_tmp[633118] "expr temp" "maybe param" "maybe type" "temp"
    (633121 'move' call_tmp[633118](92478 call _cond_test call_tmp[633113]))
    if call_tmp[633118]
    {
      {
        unknown tmp[92370] "temp"
        (92388 'move' tmp[92370](92386 call _cond_test 1))
        WhileDo[92375]
        {
          {
            (92297 call atomicFence)
            (477426 'end of statement')
            unknown count[92301] "dead at end of block" "insert auto destroy"
            (541763 'init var' count[92301] 0)
            (92304 'end of statement')
            {
              unknown _indexOfInterest[92318] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[92319] "expr temp" "temp"
              (92328 'move' _iterator[92319](92326 call _getIterator flags[92288]))
              Defer
              {
                {
                  (92344 call _freeIterator _iterator[92319])
                }
              }
              { scopeless type
                (92333 'move' _indexOfInterest[92318](92330 call iteratorIndex _iterator[92319]))
              }
              ForLoop[92320]
              {
                unknown f[92337] "index var" "insert auto destroy"
                (477428 'end of statement')
                (92339 'move' f[92337] _indexOfInterest[92318])
                (477429 'end of statement' f[92337])
                unknown call_tmp[633123] "expr temp" "maybe param" "maybe type" "temp"
                (633126 'move' call_tmp[633123](92313 call _cond_test f[92337]))
                if call_tmp[633123]
                {
                  (92310 call += count[92301] 1)
                  (477431 'end of statement' count[92301])
                }
                label _continueLabel[92323]
                _indexOfInterest[92318]
                _iterator[92319]
              }
              label _breakLabel[92324]
            }
            unknown call_tmp[633128] "expr temp" "maybe param" "maybe type" "temp"
            (633131 'move' call_tmp[633128](92354 call - numLocales[209892] 1))
            unknown call_tmp[633133] "expr temp" "maybe param" "maybe type" "temp"
            (633136 'move' call_tmp[633133](92356 call == count[92301] call_tmp[633128]))
            unknown call_tmp[633138] "expr temp" "maybe param" "maybe type" "temp"
            (633141 'move' call_tmp[633138](92361 call _cond_test call_tmp[633133]))
            if call_tmp[633138]
            {
              break _breakLabel[92374] _breakLabel[92374]
            }
            (92368 call chpl_task_yield)
          }
          label _continueLabel[92373]
          (92381 'move' tmp[92370](92379 call _cond_test 1))
          tmp[92370]
        }
        label _breakLabel[92374]
      }
      {
        unknown _indexOfInterest[92410] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92411] "expr temp" "temp"
        (92420 'move' _iterator[92411](92418 call _getIterator flags[92288]))
        Defer
        {
          {
            (92436 call _freeIterator _iterator[92411])
          }
        }
        { scopeless type
          (92425 'move' _indexOfInterest[92410](92422 call iteratorIndex _iterator[92411]))
        }
        ForLoop[92412]
        {
          unknown f[92429] "index var" "insert auto destroy"
          (477435 'end of statement')
          (92431 'move' f[92429] _indexOfInterest[92410])
          (477436 'end of statement' f[92429])
          unknown call_tmp[633143] "expr temp" "maybe param" "maybe type" "temp"
          (633146 'move' call_tmp[633143](92395 call postfix! f[92429]))
          unknown call_tmp[633150] "expr temp" "maybe param" "maybe type" "temp"
          (633153 'move' call_tmp[633150](92399 call s _mt[243] call_tmp[633143]))
          (92408 call(92404 call (partial) testAndSet _mt[243] call_tmp[633150]))
          (477438 'end of statement' f[92429])
          label _continueLabel[92415]
          _indexOfInterest[92410]
          _iterator[92411]
        }
        label _breakLabel[92416]
      }
    }
    {
      unknown call_tmp[633157] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (633160 'move' call_tmp[633157](747879 'new' localesSignal[377927](?)(_chpl_manager = unmanaged[220](?))))
      unknown f[92449] "dead at end of block" "insert auto destroy"
      (541765 'init var' f[92449] call_tmp[633157])
      (92452 'end of statement')
      unknown call_tmp[633162] "expr temp" "maybe param" "maybe type" "temp"
      (633165 'move' call_tmp[633162](92457 call flags[92288] locIdx[92284]))
      (92459 call = call_tmp[633162] f[92449])
      (477440 'end of statement' f[92449])
      unknown call_tmp[633169] "expr temp" "maybe param" "maybe type" "temp"
      (633172 'move' call_tmp[633169](92463 call s _mt[243] f[92449]))
      (92471 call(92466 call (partial) waitFor _mt[243] call_tmp[633169]) 1)
      (477442 'end of statement' f[92449])
      (92475 call chpl__delete f[92449])
      (477444 'end of statement' f[92449])
    }
    (514132 return _void[55])
  }
  type localesBarrier[92486]
  function chpl_init_rootLocale[92495]() : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[422470] "maybe param" "temp"
    (422481 'move' tmp[422470](92499 call > numLocales[209892] 1))
    unknown call_tmp[633176] "expr temp" "maybe param" "maybe type" "temp"
    (633179 'move' call_tmp[633176](422483 call _cond_invalid tmp[422470]))
    if call_tmp[633176]
    {
      (422486 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[561198] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[561199] "maybe param" "temp"
    unknown call_tmp[633181] "expr temp" "maybe param" "maybe type" "temp"
    (633184 'move' call_tmp[633181](422471 call isTrue tmp[422470]))
    (561204 'move' tmp[561199](561202 call _cond_test call_tmp[633181]))
    if tmp[561199]
    {
      unknown tmp[561206] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (561208 'move' tmp[561206](422474 call isTrue 0))
      (561213 'move' tmp[561198](561210 '_paramFoldLogical' tmp[561199] tmp[561206]))
    }
    {
      (561218 'move' tmp[561198](561215 '_paramFoldLogical' tmp[561199] 0))
    }
    unknown call_tmp[633186] "expr temp" "maybe param" "maybe type" "temp"
    (633189 'move' call_tmp[633186](92525 call _cond_test tmp[561198]))
    if call_tmp[633186]
    {
      (92523 call halt "Cannot run a program compiled with --local in more than 1 locale")
    }
    unknown call_tmp[633193] "expr temp" "maybe param" "maybe type" "temp"
    (633196 'move' call_tmp[633193](92532 call _instance _mt[243] origRootLocale[91524]))
    unknown call_tmp[633198] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (633201 'move' call_tmp[633198](747880 'new' RootLocale[377915](?)(_chpl_manager = unmanaged[220](?))))
    (92541 call = call_tmp[633193] call_tmp[633198])
    (477448 'end of statement')
    unknown call_tmp[633205] "expr temp" "maybe param" "maybe type" "temp"
    (633208 'move' call_tmp[633205](92545 call _instance _mt[243] origRootLocale[91524]))
    unknown call_tmp[633210] "expr temp" "maybe param" "maybe type" "temp"
    (633213 'move' call_tmp[633210](92551 call _cast borrowed RootLocale?[415472] call_tmp[633205]))
    unknown call_tmp[633215] "expr temp" "maybe param" "maybe type" "temp"
    (633218 'move' call_tmp[633215](92553 call postfix! call_tmp[633210]))
    (92561 call(92557 call (partial) setup _mt[243] call_tmp[633215]))
    (514134 return _void[55])
  }
  function chpl_defaultLocaleInitPrivate[92567]() : _unknown[51] "inline" "no doc" "no return value for void"
  {
    const rl[92587] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
    unknown call_tmp[633224] "expr temp" "maybe param" "maybe type" "temp"
    (633227 'move' call_tmp[633224](92570 call _instance _mt[243] rootLocale[91514]))
    unknown call_tmp[633229] "expr temp" "maybe param" "maybe type" "temp"
    (633232 'move' call_tmp[633229](92576 call _cast borrowed RootLocale?[415472] call_tmp[633224]))
    unknown call_tmp[633234] "expr temp" "maybe param" "maybe type" "temp"
    (633237 'move' call_tmp[633234](92578 call postfix! call_tmp[633229]))
    unknown call_tmp[633241] "expr temp" "maybe param" "maybe type" "temp"
    (633244 'move' call_tmp[633241](92586 call(92582 call (partial) getDefaultLocaleArray _mt[243] call_tmp[633234])))
    (541768 'move' rl[92587](541767 'addr of' call_tmp[633241]))
    (92590 'end of statement')
    unknown call_tmp[633248] "expr temp" "maybe param" "maybe type" "temp"
    (633251 'move' call_tmp[633248](92593 call _instance _mt[243] defaultLocale[89956]))
    unknown call_tmp[633253] "expr temp" "maybe param" "maybe type" "temp"
    (633256 'move' call_tmp[633253](92599 call rl[92587] 0))
    unknown call_tmp[633260] "expr temp" "maybe param" "maybe type" "temp"
    (633263 'move' call_tmp[633260](92600 call _instance _mt[243] call_tmp[633253]))
    (92603 call = call_tmp[633248] call_tmp[633260])
    (477450 'end of statement' rl[92587])
    (514136 return _void[55])
  }
  function chpl_rootLocaleInitPrivate[92612](arg locIdx[92610]:_any[178](?)) : _unknown[51] "no doc" "no return value for void"
  {
    (92616 call = rootLocale[91514] origRootLocale[91524])
    (477452 'end of statement')
    unknown tmp[422491] "maybe param" "temp"
    (422502 'move' tmp[422491] replicateRootLocale[91519])
    unknown call_tmp[633265] "expr temp" "maybe param" "maybe type" "temp"
    (633268 'move' call_tmp[633265](422504 call _cond_invalid tmp[422491]))
    if call_tmp[633265]
    {
      (422507 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[561225] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[561226] "maybe param" "temp"
    unknown call_tmp[633270] "expr temp" "maybe param" "maybe type" "temp"
    (633273 'move' call_tmp[633270](422492 call isTrue tmp[422491]))
    (561231 'move' tmp[561226](561229 call _cond_test call_tmp[633270]))
    if tmp[561226]
    {
      unknown tmp[561233] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[633275] "expr temp" "maybe param" "maybe type" "temp"
      (633278 'move' call_tmp[633275](92623 call != locIdx[92610] 0))
      (561235 'move' tmp[561233](422495 call isTrue call_tmp[633275]))
      (561240 'move' tmp[561225](561237 '_paramFoldLogical' tmp[561226] tmp[561233]))
    }
    {
      (561245 'move' tmp[561225](561242 '_paramFoldLogical' tmp[561226] 0))
    }
    unknown call_tmp[633280] "expr temp" "maybe param" "maybe type" "temp"
    (633283 'move' call_tmp[633280](92730 call _cond_test tmp[561225]))
    if call_tmp[633280]
    {
      unknown call_tmp[633285] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (633288 'move' call_tmp[633285](747881 'new' RootLocale[377915](?)(_chpl_manager = unmanaged[220](?))))
      unknown newRootLocale[92633] "dead at end of block" "insert auto destroy"
      (541770 'init var' newRootLocale[92633] call_tmp[633285])
      (92636 'end of statement')
      const origLocales[92654] "dead at end of block" "const" "no auto destroy" "no copy" "ref var"
      unknown call_tmp[633292] "expr temp" "maybe param" "maybe type" "temp"
      (633295 'move' call_tmp[633292](92639 call _instance _mt[243] origRootLocale[91524]))
      unknown call_tmp[633297] "expr temp" "maybe param" "maybe type" "temp"
      (633300 'move' call_tmp[633297](92645 call _cast borrowed RootLocale?[415472] call_tmp[633292]))
      unknown call_tmp[633302] "expr temp" "maybe param" "maybe type" "temp"
      (633305 'move' call_tmp[633302](92647 call postfix! call_tmp[633297]))
      unknown call_tmp[633309] "expr temp" "maybe param" "maybe type" "temp"
      (633312 'move' call_tmp[633309](92653 call(92649 call (partial) getDefaultLocaleArray _mt[243] call_tmp[633302])))
      (541773 'move' origLocales[92654](541772 'addr of' call_tmp[633309]))
      (92657 'end of statement')
      unknown call_tmp[633316] "expr temp" "maybe param" "maybe type" "temp"
      (633319 'move' call_tmp[633316](92659 call _value _mt[243] origLocales[92654]))
      unknown call_tmp[633323] "maybe param" "maybe type" "temp"
      (633326 'move' call_tmp[633323](92664 call theData _mt[243] call_tmp[633316]))
      unknown origRL[92667] "dead at end of block" "insert auto destroy"
      (541775 'init var' origRL[92667] call_tmp[633323])
      (92670 'end of statement')
      unknown call_tmp[633330] "expr temp" "maybe param" "maybe type" "temp"
      (633333 'move' call_tmp[633330](92676 call(92672 call (partial) getDefaultLocaleArray _mt[243] newRootLocale[92633])))
      unknown call_tmp[633337] "expr temp" "maybe param" "maybe type" "temp"
      (633340 'move' call_tmp[633337](92677 call _value _mt[243] call_tmp[633330]))
      unknown call_tmp[633344] "maybe param" "maybe type" "temp"
      (633347 'move' call_tmp[633344](92680 call theData _mt[243] call_tmp[633337]))
      unknown newRL[92683] "dead at end of block" "insert auto destroy"
      (541777 'init var' newRL[92683] call_tmp[633344])
      (92686 'end of statement' origLocales[92654] newRootLocale[92633])
      unknown call_tmp[633349] "expr temp" "maybe param" "maybe type" "temp"
      (633352 'move' call_tmp[633349](92709 'array_get' newRL[92683] 0))
      unknown call_tmp[633354] "expr temp" "maybe param" "maybe type" "temp"
      (633357 'move' call_tmp[633354](92715 'array_get' origRL[92667] 0))
      unknown call_tmp[633359] "expr temp" "maybe param" "maybe type" "temp"
      (633362 'move' call_tmp[633359](92718 call _cast size_t[20657] numLocales[209892]))
      (92720 'chpl_comm_array_get' call_tmp[633349] 0 call_tmp[633354] call_tmp[633359])
      (477456 'end of statement' newRL[92683] origRL[92667])
      unknown call_tmp[633366] "expr temp" "maybe param" "maybe type" "temp"
      (633369 'move' call_tmp[633366](92723 call _instance _mt[243] rootLocale[91514]))
      (92727 call = call_tmp[633366] newRootLocale[92633])
      (477459 'end of statement' newRootLocale[92633])
    }
    unknown call_tmp[633371] "expr temp" "maybe param" "maybe type" "temp"
    (633374 'move' call_tmp[633371](92736 call != locIdx[92610] 0))
    unknown call_tmp[633376] "expr temp" "maybe param" "maybe type" "temp"
    (633379 'move' call_tmp[633376](92781 call _cond_test call_tmp[633371]))
    if call_tmp[633376]
    {
      const tmp[92754] "dead at end of block" "const" "no auto destroy" "ref var"
      unknown call_tmp[633383] "expr temp" "maybe param" "maybe type" "temp"
      (633386 'move' call_tmp[633383](92739 call _instance _mt[243] rootLocale[91514]))
      unknown call_tmp[633388] "expr temp" "maybe param" "maybe type" "temp"
      (633391 'move' call_tmp[633388](92745 call _cast borrowed RootLocale?[415472] call_tmp[633383]))
      unknown call_tmp[633393] "expr temp" "maybe param" "maybe type" "temp"
      (633396 'move' call_tmp[633393](92747 call postfix! call_tmp[633388]))
      unknown call_tmp[633400] "expr temp" "maybe param" "maybe type" "temp"
      (633403 'move' call_tmp[633400](92753 call(92749 call (partial) getDefaultLocaleArray _mt[243] call_tmp[633393])))
      (541780 'move' tmp[92754](541779 'addr of' call_tmp[633400]))
      (92757 'end of statement')
      (92779 'move' Locales[113662] tmp[92754])
      (477461 'end of statement' tmp[92754])
    }
    (92787 call = rootLocaleInitialized[310] 1)
    (514138 return _void[55])
  }
  function chpl_task_getRequestedSubloc[92794]() : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free" "no return value for void"
  {
    unknown ret[514142] "RVV" "temp"
    (514144 return ret[514142])
  }
  { scopeless type
    chpl_sublocID_t[89869]
  }
  function chpl_getLocaleID[92806](ref arg localeID[92803]:chpl_localeID_t[209352]) : _unknown[51] "export" "insert line file info" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633405] "expr temp" "maybe param" "maybe type" "temp"
    (633408 'move' call_tmp[633405](377989 call here_id[92818]))
    (92810 call = localeID[92803] call_tmp[633405])
    (514146 return _void[55])
  }
  function here_id[92818]() : _unknown[51] "inline" "no doc" "no parens"
  {
    unknown ret[514150] "RVV" "temp"
    unknown call_tmp[633410] "expr temp" "maybe param" "maybe type" "temp"
    (633413 'move' call_tmp[633410](92837 call _cond_test localeModelHasSublocales[187449]))
    if call_tmp[633410]
    {
      unknown call_tmp[633415] "expr temp" "maybe param" "maybe type" "temp"
      (633418 'move' call_tmp[633415](92826 call chpl_task_getRequestedSubloc))
      unknown call_tmp[633420] "expr temp" "maybe param" "maybe type" "temp"
      (633423 'move' call_tmp[633420](92827 call chpl_rt_buildLocaleID chpl_nodeID[208207] call_tmp[633415]))
      (514155 'move' ret[514150](514154 'deref' call_tmp[633420]))
      gotoReturn _end_here_id[514148] _end_here_id[514148]
    }
    {
      unknown call_tmp[633425] "expr temp" "maybe param" "maybe type" "temp"
      (633428 'move' call_tmp[633425](92834 call chpl_rt_buildLocaleID chpl_nodeID[208207] c_sublocid_any[89878]))
      (514160 'move' ret[514150](514159 'deref' call_tmp[633425]))
      gotoReturn _end_here_id[514148] _end_here_id[514148]
    }
    label _end_here_id[514148]
    (514152 return ret[514150])
  }
  function chpl_localeID_to_locale[92852](arg id[92849]:chpl_localeID_t[209352]) : _unknown[51] "no doc" "fn returns infinite lifetime"
  {
    unknown ret[514166] "RVV" "temp"
    unknown call_tmp[633432] "expr temp" "maybe param" "maybe type" "temp"
    (633435 'move' call_tmp[633432](92856 call _instance _mt[243] rootLocale[91514]))
    unknown call_tmp[633437] "expr temp" "maybe param" "maybe type" "temp"
    (633440 'move' call_tmp[633437](92860 call != call_tmp[633432] nil[44]))
    unknown call_tmp[633442] "expr temp" "maybe param" "maybe type" "temp"
    (633445 'move' call_tmp[633442](92912 call _cond_test call_tmp[633437]))
    if call_tmp[633442]
    {
      unknown call_tmp[633449] "expr temp" "maybe param" "maybe type" "temp"
      (633452 'move' call_tmp[633449](92863 call _instance _mt[243] rootLocale[91514]))
      unknown call_tmp[633454] "expr temp" "maybe param" "maybe type" "temp"
      (633457 'move' call_tmp[633454](92869 call _cast borrowed AbstractRootLocale?[415484] call_tmp[633449]))
      unknown call_tmp[633459] "expr temp" "maybe param" "maybe type" "temp"
      (633462 'move' call_tmp[633459](92871 call postfix! call_tmp[633454]))
      unknown call_tmp[633466] "expr temp" "maybe param" "maybe type" "temp"
      (633469 'move' call_tmp[633466](92880 call(92875 call (partial) localeIDtoLocale _mt[243] call_tmp[633459]) id[92849]))
      (514172 'move' ret[514166](514171 'coerce' call_tmp[633466] locale[28]))
      gotoReturn _end_chpl_localeID_to_locale[514164] _end_chpl_localeID_to_locale[514164]
    }
    {
      unknown call_tmp[633473] "expr temp" "maybe param" "maybe type" "temp"
      (633476 'move' call_tmp[633473](92884 call _instance _mt[243] dummyLocale[89970]))
      unknown call_tmp[633478] "expr temp" "maybe param" "maybe type" "temp"
      (633481 'move' call_tmp[633478](92888 call == call_tmp[633473] nil[44]))
      unknown call_tmp[633483] "expr temp" "maybe param" "maybe type" "temp"
      (633486 'move' call_tmp[633483](92904 call _cond_test call_tmp[633478]))
      if call_tmp[633483]
      {
        unknown call_tmp[633490] "expr temp" "maybe param" "maybe type" "temp"
        (633493 'move' call_tmp[633490](92891 call _instance _mt[243] dummyLocale[89970]))
        unknown call_tmp[633495] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (633498 'move' call_tmp[633495](747882 'new' DummyLocale[377848](?)(_chpl_manager = unmanaged[220](?))))
        (92900 call = call_tmp[633490] call_tmp[633495])
      }
      (514178 'move' ret[514166](514177 'coerce' dummyLocale[89970] locale[28]))
      gotoReturn _end_chpl_localeID_to_locale[514164] _end_chpl_localeID_to_locale[514164]
    }
    label _end_chpl_localeID_to_locale[514164]
    (514168 return ret[514166])
  }
  { scopeless type
    locale[28]
  }
  type chpl_privateObject_t[92928] val obj[92923]:c_void_ptr[149] c_void_ptr[149]
  unknown chpl_privateObjects[92935] "dead at end of block" "extern" "insert auto destroy" "no doc"
  function chpl_getPrivatizedCopy[92943](arg objectType[92941]:_any[178](?), arg objectPid[92946]:int(64)[13]) : _unknown[51] "inline" "no doc" "fn returns infinite lifetime"
  {
    unknown ret[514184] "RVV" "temp"
    unknown call_tmp[633505] "expr temp" "maybe param" "maybe type" "temp"
    (633508 'move' call_tmp[633505](92956 call chpl_privateObjects[92935] objectPid[92946]))
    unknown call_tmp[633512] "expr temp" "maybe param" "maybe type" "temp"
    (633515 'move' call_tmp[633512](92959 call obj _mt[243] call_tmp[633505]))
    unknown call_tmp[633517] "expr temp" "maybe param" "maybe type" "temp"
    (633520 'move' call_tmp[633517](92962 'cast' objectType[92941] call_tmp[633512]))
    (514190 'move' ret[514184](514189 'coerce' call_tmp[633517] objectType[92941]))
    (514186 return ret[514184])
  }
  { scopeless type
    objectType[92941]
  }
  function locale[28].totalThreads[92972](arg _mt[92977]:_MT[238], arg this[92974]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514200] "RVV" "temp"
    unknown totalThreads[92980] "dead at end of block" "insert auto destroy"
    (541785 'default init var' totalThreads[92980] int(64)[13])
    (92983 'end of statement')
    function chpl_task_getNumThreads[92987]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514194] "RVV" "temp"
      (514196 return ret[514194])
    }
    { scopeless type
      (92992 call uint(64)[115] 32)
    }
    const tmp[93007] "const" "temp"
    unknown call_tmp[633522] "expr temp" "maybe param" "maybe type" "temp"
    (633525 'move' call_tmp[633522](93004 '_wide_get_locale' this[92974]))
    (93009 'move' tmp[93007](93005 'deref' call_tmp[633522]))
    {
      unknown call_tmp[633527] "expr temp" "maybe param" "maybe type" "temp"
      (633530 'move' call_tmp[633527](93000 call chpl_task_getNumThreads))
      (93001 call = totalThreads[92980] call_tmp[633527])
      (477471 'end of statement' totalThreads[92980])
      (93012 'on block' 0 tmp[93007])
    }
    (514205 'move' ret[514200](514204 'deref' totalThreads[92980]))
    gotoReturn _end_totalThreads[514198] _end_totalThreads[514198]
    (477473 'end of statement' totalThreads[92980])
    label _end_totalThreads[514198]
    (514202 return ret[514200])
  }
  function locale[28].idleThreads[93023](arg _mt[93028]:_MT[238], arg this[93025]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514217] "RVV" "temp"
    unknown idleThreads[93031] "dead at end of block" "insert auto destroy"
    (541787 'default init var' idleThreads[93031] int(64)[13])
    (93034 'end of statement')
    function chpl_task_getNumIdleThreads[93038]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514211] "RVV" "temp"
      (514213 return ret[514211])
    }
    { scopeless type
      (93043 call uint(64)[115] 32)
    }
    const tmp[93058] "const" "temp"
    unknown call_tmp[633532] "expr temp" "maybe param" "maybe type" "temp"
    (633535 'move' call_tmp[633532](93055 '_wide_get_locale' this[93025]))
    (93060 'move' tmp[93058](93056 'deref' call_tmp[633532]))
    {
      unknown call_tmp[633537] "expr temp" "maybe param" "maybe type" "temp"
      (633540 'move' call_tmp[633537](93051 call chpl_task_getNumIdleThreads))
      (93052 call = idleThreads[93031] call_tmp[633537])
      (477475 'end of statement' idleThreads[93031])
      (93063 'on block' 0 tmp[93058])
    }
    (514222 'move' ret[514217](514221 'deref' idleThreads[93031]))
    gotoReturn _end_idleThreads[514215] _end_idleThreads[514215]
    (477477 'end of statement' idleThreads[93031])
    label _end_idleThreads[514215]
    (514219 return ret[514217])
  }
  function locale[28].queuedTasks[93074](arg _mt[93079]:_MT[238], arg this[93076]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514234] "RVV" "temp"
    unknown queuedTasks[93082] "dead at end of block" "insert auto destroy"
    (541789 'default init var' queuedTasks[93082] int(64)[13])
    (93085 'end of statement')
    function chpl_task_getNumQueuedTasks[93089]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514228] "RVV" "temp"
      (514230 return ret[514228])
    }
    { scopeless type
      (93094 call uint(64)[115] 32)
    }
    const tmp[93109] "const" "temp"
    unknown call_tmp[633542] "expr temp" "maybe param" "maybe type" "temp"
    (633545 'move' call_tmp[633542](93106 '_wide_get_locale' this[93076]))
    (93111 'move' tmp[93109](93107 'deref' call_tmp[633542]))
    {
      unknown call_tmp[633547] "expr temp" "maybe param" "maybe type" "temp"
      (633550 'move' call_tmp[633547](93102 call chpl_task_getNumQueuedTasks))
      (93103 call = queuedTasks[93082] call_tmp[633547])
      (477479 'end of statement' queuedTasks[93082])
      (93114 'on block' 0 tmp[93109])
    }
    (514239 'move' ret[514234](514238 'deref' queuedTasks[93082]))
    gotoReturn _end_queuedTasks[514232] _end_queuedTasks[514232]
    (477481 'end of statement' queuedTasks[93082])
    label _end_queuedTasks[514232]
    (514236 return ret[514234])
  }
  function locale[28].runningTasks[93125](arg _mt[93130]:_MT[238], arg this[93127]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc" "fn synchronization free"
  {
    unknown ret[514245] "RVV" "temp"
    unknown call_tmp[633554] "expr temp" "maybe param" "maybe type" "temp"
    (633557 'move' call_tmp[633554](93139 call(93135 call (partial) runningTaskCnt _mt[243] this[93127])))
    (514250 'move' ret[514245](514249 'deref' call_tmp[633554]))
    (514247 return ret[514245])
  }
  function locale[28].blockedTasks[93148](arg _mt[93153]:_MT[238], arg this[93150]:locale[28] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    unknown ret[514260] "RVV" "temp"
    unknown blockedTasks[93156] "dead at end of block" "insert auto destroy"
    (541791 'default init var' blockedTasks[93156] int(64)[13])
    (93159 'end of statement')
    function chpl_task_getNumBlockedTasks[93163]() : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[514254] "RVV" "temp"
      (514256 return ret[514254])
    }
    { scopeless type
      (93168 call int(64)[13] 32)
    }
    const tmp[93183] "const" "temp"
    unknown call_tmp[633559] "expr temp" "maybe param" "maybe type" "temp"
    (633562 'move' call_tmp[633559](93180 '_wide_get_locale' this[93150]))
    (93185 'move' tmp[93183](93181 'deref' call_tmp[633559]))
    {
      unknown call_tmp[633564] "expr temp" "maybe param" "maybe type" "temp"
      (633567 'move' call_tmp[633564](93176 call chpl_task_getNumBlockedTasks))
      (93177 call = blockedTasks[93156] call_tmp[633564])
      (477484 'end of statement' blockedTasks[93156])
      (93188 'on block' 0 tmp[93183])
    }
    (514265 'move' ret[514260](514264 'deref' blockedTasks[93156]))
    gotoReturn _end_blockedTasks[514258] _end_blockedTasks[514258]
    (477486 'end of statement' blockedTasks[93156])
    label _end_blockedTasks[514258]
    (514262 return ret[514260])
  }
  function chpl_taskRunningCntInc[93198]() : _unknown[51] "export" "insert line file info" "inc running task" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633569] "expr temp" "maybe param" "maybe type" "temp"
    (633572 'move' call_tmp[633569](93210 call _cond_test rootLocaleInitialized[310]))
    if call_tmp[633569]
    {
      unknown call_tmp[633574] "expr temp" "maybe param" "maybe type" "temp"
      (633577 'move' call_tmp[633574](358522 call here[90438]))
      (93207 call(93202 call (partial) runningTaskCntAdd _mt[243] call_tmp[633574]) 1)
    }
    (514269 return _void[55])
  }
  function chpl_taskRunningCntDec[93219]() : _unknown[51] "export" "insert line file info" "dec running task" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633581] "expr temp" "maybe param" "maybe type" "temp"
    (633584 'move' call_tmp[633581](93231 call _cond_test rootLocaleInitialized[310]))
    if call_tmp[633581]
    {
      unknown call_tmp[633586] "expr temp" "maybe param" "maybe type" "temp"
      (633589 'move' call_tmp[633586](358524 call here[90438]))
      (93228 call(93223 call (partial) runningTaskCntSub _mt[243] call_tmp[633586]) 1)
    }
    (514271 return _void[55])
  }
  function chpl_taskRunningCntReset[93240]() : _unknown[51] "export" "insert line file info" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[633593] "expr temp" "maybe param" "maybe type" "temp"
    (633596 'move' call_tmp[633593](358526 call here[90438]))
    (93250 call(93245 call (partial) runningTaskCntSet _mt[243] call_tmp[633593]) 0)
    (514273 return _void[55])
  }
  (355120 'used modules list'(89849 'use' LocaleModel[88729])(89853 'import' HaltWrappers[210018])(89856 'use' SysCTypes[20943]))
}